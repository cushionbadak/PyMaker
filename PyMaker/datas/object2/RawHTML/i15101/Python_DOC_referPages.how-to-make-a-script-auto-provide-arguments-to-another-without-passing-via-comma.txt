<div class="post-text" itemprop="text">
<p>The best way to explain my question is with the help of an example.<br/>
Consider a Python Script that asks a question and gives an answer depending on the question.</p>
<pre><code>QandA.py

import os,sys,re

ans = input('How you doin\' \(Say Yes\/No\)')
if (ans == "Yes"):
   print("Nice to hear")
elif (ans == "No") :
   print("Oh Too Bad")
</code></pre>
<p>The above Script would normally prompt the User for an Input, BUT I'd also like it to be called by a Batch Script which will provide the input to the called Python Script.
I'll hardcode these inputs in the Batch File itself (as seen below).</p>
<pre><code>call.bat

set ans="Yes"
D:
cd "Automate Answers"
python "QandA.py"
</code></pre>
<p>Is there any way to achieve this (make the Python Script aware of ans) without modifying the Python Script itself to handle optional command line arguments ?
I'd prefer the Batch Script to run as if it were the user giving inputs to the script from an array of variables.</p>
</div>
<div class="post-text" itemprop="text">
<p>Variables set in <code>.bat</code>, <code>.cmd</code>, should show up as environment variables.
Python can read <em>environment variables</em> passed in via the <a href="https://docs.python.org/3/library/os.html#os.environ" rel="nofollow"><code>os.environ</code></a></p>
<pre><code>import os
print(os.environ['ans'])
</code></pre>
<p>thus you could write:</p>
<pre><code>import os

ans = os.environ.get('ans')
if ans is None:  # it was not set, so ask user
    ans = input("How you doin' (Say Yes/No)")

if ans == "Yes":
    print("Nice to hear")
elif ans == "No":
    print("Oh Too Bad")
</code></pre>
<p>or even do a function:</p>
<pre><code>def env_or_input(var_name, prompt):
    val = os.environ.get(var_name)
    if val is None:  # it was not set, so ask user
        val = input(prompt)
    return val

...

ans = env_or_input("ans", "How you doin' (Say Yes/No)")
if ans == "Yes":
    print("Nice to hear")
elif ans == "No":
    print("Oh Too Bad")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I suppose that <code>echo 'Yes' | python QandA.py</code> would work. You can add several answers in a fixed sequence, separated by newlines:</p>
<pre><code>cat &lt;&lt;EOF | python QandA.py
Yes
No
Why are you asking?
EOF
</code></pre>
<p>For longer scenarios when you e.g. have to react to changing prompts, you can use <a href="http://expect.sourceforge.net/" rel="nofollow"><code>expect</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Piping in a single answer is trivial:</p>
<pre><code>set ans="Yes"
cd /d "D:Automate Answers"
echo %ans%|python "QandA.py"
</code></pre>
<p>But piping in multiple answers is tricky. The following is broken because the batch parser inserts an extra space before each <code>&amp;</code> and <code>)</code></p>
<pre><code>(echo val1&amp;echo val2&amp;echo val3)|python "script.py"
</code></pre>
<p>The easiest way to provide multiple answers without extra space is to delay the appearance of the <code>&amp;</code> so the initial parsing pass that prepares the pipe sees only a single ECHO on the left side</p>
<pre><code>set "+=&amp;"
echo val1%%+%%echo val2%%+%%echo val3|python "script.py"
</code></pre>
</div>
<span class="comment-copy">Without modifying the python script, you would use <a href="http://expect.sourceforge.net/" rel="nofollow noreferrer">expect</a>. But I'm not sure about using it with windows.</span>
<span class="comment-copy">Thanks expect doesn't help a great deal but thanks for bringing it to my awareness :)</span>
<span class="comment-copy">I don't see how this meets the requirement that the python script not be modified. But the OP seems to like it.</span>
<span class="comment-copy">well, these are not command line arguments, and they're easier to set in the bat than giving command line arguments</span>
<span class="comment-copy">I believe the OP is using Windows</span>
