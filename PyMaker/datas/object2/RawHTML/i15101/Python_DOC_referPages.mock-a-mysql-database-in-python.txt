<div class="post-text" itemprop="text">
<p>I use Python 3.4 from the Anaconda distribution. Within this distribution, I found the <code>pymysql</code> library to connect to an existing MySQL database, which is located on another computer.</p>
<pre><code>import pymysql
config = {
      'user': 'my_user',
      'passwd': 'my_passwd',
      'host': 'my_host',
      'port': my_port
    }

    try:
        cnx = pymysql.connect(**config)
    except pymysql.err.OperationalError : 
        sys.exit("Invalid Input: Wrong username/database or password")
</code></pre>
<p>I now want to write test code for my application, in which I want to create a very small database at the <code>setUp</code> of every test case, preferably in memory. However, when I try this out of the blue with <code>pymysql</code>, it cannot make a connection.</p>
<pre><code>def setUp(self):
    config = {
      'user': 'test_user',
      'passwd': 'test_passwd',
      'host': 'localhost'
    }
    cnx = pymysql.connect(**config)

pymysql.err.OperationalError: (2003, "Can't connect to MySQL server on 'localhost' ([Errno 61] Connection refused)")
</code></pre>
<p>I have been googling around, and found some things about <code>SQLite</code> and <code>MySQLdb</code>. I have the following questions:</p>
<ol>
<li>Is <code>sqlite3</code> or <code>MySQLdb</code> suitable for creating quickly a database in memory?</li>
<li>How do I install <code>MySQLdb</code> within the Anaconda package?</li>
<li>Is there an example of a test database, created in the <code>setUp</code>? Is this even a good idea?</li>
</ol>
<p>I do not have a MySQL server running locally on my computer.</p>
</div>
<div class="post-text" itemprop="text">
<p>Both pymysql, MySQLdb, and sqlite will want a real database to connect too. 
If you want just to test your code, you should just mock the pymysql module on the module you want to test, and use it accordingly
(in your test code: you can setup the mock object to return hardcoded results to predefined SQL statements) </p>
<p>Check the documentation on native Python mocking library at:
<a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer">https://docs.python.org/3/library/unittest.mock.html</a></p>
<p>Or, for Python 2:
<a href="https://pypi.python.org/pypi/mock" rel="nofollow noreferrer">https://pypi.python.org/pypi/mock</a></p>
</div>
<span class="comment-copy">The answer may well be to <i>get</i> a mysql db running locally.  SQLite has many differences to mysql so it would not be a good test to replace mysql with SQLite.</span>
<span class="comment-copy">It seems like it is not possible what I want then. The goal is not to mock pymysql, since I want to test if the code works on a "real" SQL database. It doesn't matter if that has all the peculiarities of MySQL, but it should be able to be communicated with through pymysql. Installing a MySQL server locally on every machine that I run the tests on is not practical.</span>
<span class="comment-copy">SQLite <i>is</i> a "real" database, as opposed to pymysql and MySQLdb which are simply connectors to MySQL.</span>
<span class="comment-copy">Also note that in no way you need to have a MySQL in "all machines you have to run tests" - all of them can connect to one and the same MySQL database, in a single machine, given a connection URL</span>
<span class="comment-copy">To future readers: this is a use case for Docker containers. It simplifies this type of integration testing, and won't be difficult to find supporting documentation.</span>
