<div class="post-text" itemprop="text">
<p>When I try to or/and two sets using <code>&amp;=</code> and <code>|=</code> operator, I got some weird result.</p>
<pre><code>s1 = {1,2,3}
s2 = {2,3,4}
tmp = s1
tmp &amp;= s2 
</code></pre>
<p>As expected, tmp will be {2,3}, but I don't know why <code>s1</code> also changed it value to {2,3}. </p>
<p>However, if I do:</p>
<pre><code>tmp = tmp &amp; s2
</code></pre>
<p>Then, <code>s1</code> will be unchanged! Can anyone explain for me what happens underneath <code>&amp;=</code> operator?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://hg.python.org/cpython/file/5ea093a41198/Objects/setobject.c#l1318" rel="noreferrer"><code>&amp;=</code> (<code>set.__iadd__</code>)</a> for <code>set</code> is implemented differently with <a href="https://hg.python.org/cpython/file/5ea093a41198/Objects/setobject.c#l1310" rel="noreferrer"><code>&amp;</code> (<code>set.__add</code>)</a>.</p>
<p><code>set &amp;= ...</code> is implemented using <a href="https://docs.python.org/3/library/stdtypes.html#set.intersection_update" rel="noreferrer"><code>set.intersection_update</code></a> which update the set in-place.</p>
<hr/>
<p>Relevant CPython code (<code>Object/setobject.c</code>):</p>
<pre><code>set_iand(PySetObject *so, PyObject *other)
{
    PyObject *result;

    if (!PyAnySet_Check(other))
        Py_RETURN_NOTIMPLEMENTED;
    result = set_intersection_update(so, other); // &lt;----
    if (result == NULL)
        return NULL;
    Py_DECREF(result);
    Py_INCREF(so);
    return (PyObject *)so;
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's called <code>intersection_update</code>. <em>return set s keeping only elements also found in t</em>.  As you see in this picture;</p>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/itHWa.jpg"/></p>
<p>You are re-building first set with intersection.</p>
</div>
<div class="post-text" itemprop="text">
<p>Copy the set by value instead of by refrerence</p>
<pre><code>tmp = set(s1)
</code></pre>
<p>(As <code>s1</code> is an instance of <code>set</code>)</p>
</div>
<span class="comment-copy">You should copy <code>s1</code> by value and not by reference</span>
<span class="comment-copy">What I was looking for..</span>
<span class="comment-copy">Wow, that's a good point! Thanks for all answer.</span>
<span class="comment-copy">@Bent, You're welcome.</span>
