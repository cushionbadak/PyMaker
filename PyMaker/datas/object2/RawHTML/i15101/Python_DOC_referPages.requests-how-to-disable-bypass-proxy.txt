<div class="post-text" itemprop="text">
<p>I am getting an url with:</p>
<pre><code>r = requests.get("http://myserver.com")
</code></pre>
<p>As I can see in the 'access.log' of "myserver.com", the client's system proxy is used. But I want to disable using proxies at all with <code>requests</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The only way I'm currently aware of for disabling proxies <em>entirely</em> is the following:</p>
<ul>
<li>Create a session</li>
<li>Set <code>session.trust_env</code> to <code>False</code></li>
<li>Create your request using that session</li>
</ul>
<pre><code>import requests

session = requests.Session()
session.trust_env = False

response = session.get('http://www.stackoverflow.com')
</code></pre>
<p>This is based on <a href="https://github.com/kennethreitz/requests/issues/879#issuecomment-10472633" rel="noreferrer">this comment by Lukasa</a> and the (limited) documentation for <a href="http://docs.python-requests.org/en/latest/api/#requests.Session.trust_env" rel="noreferrer"><code>requests.Session.trust_env</code></a>.</p>
<p><strong>Note:</strong> Setting <code>trust_env</code> to <code>False</code> also ignores the following:</p>
<ul>
<li>Authentication information from <code>.netrc</code> (<a href="https://github.com/kennethreitz/requests/blob/master/requests/sessions.py#L219" rel="noreferrer">code</a>)</li>
<li>CA bundles defined in <code>REQUESTS_CA_BUNDLE</code> or <code>CURL_CA_BUNDLE</code> (<a href="https://github.com/kennethreitz/requests/blob/master/requests/sessions.py#L625-L627" rel="noreferrer">code</a>)</li>
</ul>
<hr/>
<p>If however you only want to disable proxies for a particular domain (like <code>localhost</code>), you can use the <a href="http://www.gnu.org/software/wget/manual/html_node/Proxies.html" rel="noreferrer"><code>NO_PROXY</code> environment variable</a>:</p>
<pre><code>import os
import requests

os.environ['NO_PROXY'] = 'stackoverflow.com'

response = requests.get('http://www.stackoverflow.com')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can choose proxies for each request. From <a href="http://docs.python-requests.org/en/master/user/advanced/#proxies">the docs</a>:</p>
<pre><code>import requests

proxies = {
  "http": "http://10.10.1.10:3128",
  "https": "http://10.10.1.10:1080",
}

requests.get("http://example.org", proxies=proxies)
</code></pre>
<p>So to disable the proxy, just set each one to None:</p>
<pre><code>import requests

proxies = {
  "http": None,
  "https": None,
}

requests.get("http://example.org", proxies=proxies)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>requests library respects environment variables.
<a href="http://docs.python-requests.org/en/latest/user/advanced/#proxies" rel="nofollow noreferrer">http://docs.python-requests.org/en/latest/user/advanced/#proxies</a></p>
<p>So try deleting environment variables HTTP_PROXY and HTTPS_PROXY.</p>
<pre><code>import os
for k in list(os.environ.keys()):
    if k.lower().endswith('_proxy'):
        del os.environ[k]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The way to stop requests/urllib from proxying any requests is to set the the <code>no_proxy</code> (or <code>NO_PROXY</code>) environment variable to <code>*</code> e.g. in bash:</p>
<pre><code>export no_proxy='*'
</code></pre>
<p>Or from Python:</p>
<pre><code>import os
os.environ['no_proxy'] = '*' 
</code></pre>
<p>To understand why this works is because the <a href="https://docs.python.org/3/library/urllib.request.html#urllib.request.getproxies" rel="nofollow noreferrer">urllib.request.getproxies</a> function first checks for any proxies set in the environment variables (e.g. http_proxy etc) or if none are set then it will check for system configured proxies using platform specific calls (e.g. On MacOS it will check using the system scutil/configd interfaces, and on Windows it will check the Registry). </p>
<p>Then when urllib attempts to use any proxies the <code>proxyHandler</code> function it will check for the presence and setting of the <code>no_proxy</code> environment variable - which can either be set to specific hostnames as mentioned above or it can be set the special <code>*</code> value whereby all hosts bypass the proxy.</p>
</div>
<span class="comment-copy">Does adding proxies=None to the request work?</span>
<span class="comment-copy">@Lesleh that is the default for the <code>proxies</code> keyword argument, which means it won't change the behavior at all.</span>
<span class="comment-copy">@Lesleh I tried that and unfortunately, it does not work. :(</span>
<span class="comment-copy">Has <code>trust_env=False</code> any other (side-)effects than disabling the proxy?</span>
<span class="comment-copy">@t777 it does indeed - updated my answer.</span>
<span class="comment-copy">NO_PROXY is the correct answer</span>
<span class="comment-copy">Actually, on one of my servers, <code>no_proxy</code> is the correct answer (lower case).</span>
<span class="comment-copy">this answer just saved my ass, thank you!</span>
<span class="comment-copy">Did you have check for 2nd case. In my case it's not working i.e. it's still using system proxy.</span>
<span class="comment-copy">@sonukumar What do you mean by "2nd case?"</span>
<span class="comment-copy">oh! I mean using proxies parameter to get method.</span>
<span class="comment-copy">@sonukumar I tested it again and verified it works at least for my system and network. Check the documentation I linked to to see if there's anything else I didn't mention. Of course, you can always ask another question if you can verify it's not working on your system.</span>
<span class="comment-copy">If you are just using HTTP then you don't need to set <code>"https": None</code>, for those wondering</span>
<span class="comment-copy">It definitely does not check the environment variables on a Mac.</span>
