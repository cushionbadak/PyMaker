<div class="post-text" itemprop="text">
<p>A small part of a bigger code problem I am working on: I am reading the content from a file: <strong>glmfile.glm</strong>. I am trying to write each line from <strong>glmfile.glm</strong> to another file: <strong>combined.glm</strong> skipping lines meeting certain criteria.</p>
<pre><code>glmfile=open("glmfile.glm",'r').readlines()
combined=open("combined.glm",'w')
</code></pre>
<p>The content of <strong>glmfile.glm</strong> looks like this:</p>
<pre><code>...
#other objects
object node {
    name SPU123-389-3066753-3_breaker_rec_recnode;
    phases ABC;
    nominal_voltage 7621.024;
}

object node {
    name SPU123-416-25308_recnode;
    phases ABC;
    nominal_voltage 7621.024;
}
object node {
    name SPU123-403-492320;
    groupid from_db;
    phases CN;
    nominal_voltage 7621.024;
}

object node {
    name SPU123-392-97334;
    groupid from_db;
    phases ABCN;
    nominal_voltage 7621.024;
}

object node {
    name SPU123-391-348982;
    groupid from_db;
    phases AN;
    nominal_voltage 7621.024;
}

object node {
    name SPU123-391-542649;
    groupid from_db;
    phases AN;
    nominal_voltage 7621.024;
}
#few more node objects and other objects
...
</code></pre>
<p>Now, I formed an array of <code>node_names</code> that looks like this:</p>
<pre><code>node_names=['389-3066753','403-492320','392-97334','391-348982']
</code></pre>
<p>I am comparing the name of <strong>glmfile</strong> with the elements in the array to see if the <strong>object node name</strong> is listed in the array <code>node_names</code>:</p>
<pre><code>for h,aaline in enumerate(glmfile):
    if aaline.startswith('object node {') and ('SWING' not in glmfile[h+3]):
        if glmfile[h+1][13:-2].strip() in node_names:
            #DO NOT WRITE THAT ENTIRE OBJECT NODE SECTION to 'combined'
            #I am able to skip just that line 'glmfile[h]' but how to NOT   
            #write out the entire object node i.e., glmfile[h:h+6]?
            print glmfile[h:h+6]
        else:
            combined.writelines([glmfile[h:h+6]]) 
</code></pre>
<p>NOTE: The problem I am struggling with is in the above code snippet in <code>if case</code> comment.</p>
</div>
<div class="post-text" itemprop="text">
<p>how about using an extra index and the modulo operator:</p>
<pre><code>a%b
</code></pre>
<p>for example:</p>
<pre><code>idx = 6
for h,aaline in enumerate(glmfile):
if aaline.startswith('object node {') and ('SWING' not in glmfile[h+3]):
    if glmfile[h+1][13:-2].strip() in node_names or idx%6!=0:
        idx = idx+1
        print glmfile[h:h+6]
        pass
    else:
        combined.writelines([glmfile[h:h+6]]) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let's talk broad terms first, and specify from there.</p>
<p>You have objects that look like:</p>
<pre><code>object node {
    name NAME_VAL;
    phases PHASES_VAL;
    nominal_voltage VOLTAGE_VAL;
}
</code></pre>
<p>You're trying to write from one file full of these objects to another blank file, only taking such objects that</p>
<pre><code>'SWING' in PHASES_VAL and NAME_VAL in [some list of nodes].
</code></pre>
<p>Let's do this then:</p>
<pre><code>import itertools

def grouper(iterable, n, fillvalue=None)
    '''from https://docs.python.org/3/library/itertools.html'''
    args = [iter(iterable)] * n
    return itertools.zip_longest(*args, fillvalue=fillvalue)

with open('path/to/infile.txt') as inf, \
        open('path/to/outfile.txt', 'w') as outf:
    objects_in = grouper(inf, 6) # 5 lines of the object plus a newline
    for obj in objects_in:
        obj = list(obj) # let's look at them all at once
        NAME_VAL = obj[1].strip().split()[1]
        PHASES_VAL = obj[2].strip().split()[1]
        VOLTAGE_VAL = obj[3].strip().split()[1]
        if 'SWING' in PHASES_VAL and \
                NAME_VAL in some_list_of_nodes:
            outf.writelines(obj)
</code></pre>
<p>That said, if this was something you're going to be doing over and over again, it's probably better to write a parser for this.</p>
<pre><code># node.py

class Node(dict):
    '''simply inheriting from dict will handle almost everything,
    but we will have to give it a classmethod to build from string'''

    @classmethod
    def from_string(cls, s):
        kwargs = {}
        reading = False
        for line in s.splitlines():
            if "}" in line:
                return cls.__init__(**kwargs)
            if reading:
                key,val = line.strip().split()
                kwargs[key]=val
            if "{" in line:
                reading = True

    def __str__(self):
        return "object node {\n" + \
                "\n".join("    {} {}".format(item)\
                          for item in self.items()) + "\n}"
</code></pre>
<p> </p>
<pre><code># parser.py

from node import Node

def parse(f):
    tokens = []
    token = []
    parsing = False
    for line in inf:
        if line.startswith('object node {'):
            parsing = True
        if parsing:
            token.append(line.strip())
        if line.strip() == "}":
            parsing = False
            obj = Node("\n".join(token))
            tokens.append[obj]
            token = []
    return tokens
</code></pre>
<p> </p>
<pre><code># yourfile.py

import parser

with open('path/to/infile.txt') as infile, \
        open('path/to/outfile.txt', 'w') as outfile:
    for obj in parser.parse(infile):
        if obj['name'] in some_node_names_list and \
               'SWING' in obj['phases']:
            outfile.write(str(obj))
</code></pre>
</div>
<span class="comment-copy">Does enumerate pull a file line by line? I was under the impression it broke down everything into a tuple.</span>
<span class="comment-copy">@EricThomas enumerating a file object returns <code>[(line_number, line_as_str), ...]</code></span>
<span class="comment-copy">I'm not exactly sure what it is you're trying to do. Can you write it in English? I understand that you're trying to read from <code>glmfile</code> and write to <code>combined</code> if and only if some conditions are matched (or aren't matched?) but can you tell us precisely what those conditions are?</span>
<span class="comment-copy">@AdamSmith if  the numeric portion of <b>name</b> of <b>object node</b> is in array, I DON'T want to write out that object (i.e., object node { ... }) else: write everything else.</span>
<span class="comment-copy">I tried the second approach but I am getting <b>'module' object has no attribute 'parse'</b> error. The first approach errored with <b>'module' object has no attribute 'zip_longest'</b></span>
<span class="comment-copy">@NikhilGupta If you're on Python2, use <code>izip_longest</code> instead of <code>zip_longest</code></span>
<span class="comment-copy">the first approach is doing something else actually. I am still not able to get your second approach to compile.</span>
<span class="comment-copy">@NikhilGupta If both <code>node.py</code> and <code>parser.py</code> are in your <code>PYTHONPATH</code>, it should work fine. That said: I haven't tested it at all so I could be completely wrong!! The error you said it was throwing definitely SHOULDN'T happen if they're all on your <code>PYTHONPATH</code></span>
