<div class="post-text" itemprop="text">
<p>I am writing unit tests for my <code>Python</code> and <code>Fabric</code> based code. I have following method which in turn calls <code>sudo</code> method of Fabric API multiple times with different arguments. I would like to know how to call assert on mock <code>sudo</code> object. Can anyone please help me here?</p>
<pre><code>**main_file.py**

from fabric.api import sudo

def do_something(path_to_file_to_be_copied, destination_path):
    # remove file if already exists
    sudo('rm ' + path_to_file_to_be_copied, warn_only=True)
    sudo('cp ' + path_to_file_to_be_copied + ' ' + destination_path)
</code></pre>
<p>I have written test file as below :</p>
<pre><code>**test_main_file.py**

import main_file

class MainFileTest(unittest.TestCase):

    @mock.patch('main_file.sudo')
    def test_do_something(self, mock_sudo):
        file_path = '/dummy/file/path.txt'
        dest_dir = '/path/to/dest/dir'
        main_file.do_something(file_path, dest_dir)
        mock_sudo.assert_called_with('rm ' + file_path)
</code></pre>
<p>Above test fails because mocked object remembers only last call. that is, if I write <code>mock_sudo.assert_called_with(cp + file_path + ' ' + dest_dir)</code>  then test fails.</p>
<p>Can anyone please tell how can I assert both the calls to <code>sudo</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Try <a href="http://www.voidspace.org.uk/python/mock/mock.html#mock.Mock.assert_any_call" rel="nofollow"><code>assert_any_call</code></a> which asserts whether there has been <em>any</em> call, not just the most recent one.</p>
<p>Or, you can use <a href="http://www.voidspace.org.uk/python/mock/mock.html#mock.Mock.call_args_list" rel="nofollow"><code>call_args_list</code></a> to get the list of args the mock has been called with.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer">assert_has_calls</a> will do the job for you.</p>
<blockquote>
<p><strong>assert_has_calls :</strong> assert the mock has been called with the specified calls. The mock_calls list is checked for the calls.<br/>
  If any_order is true then the calls can be in any order, but they must all appear in mock_calls.</p>
</blockquote>
<pre><code>import main_file
class MainFileTest(unittest.TestCase):

    @mock.patch('main_file.sudo')
    def test_do_something(self, mock_sudo):
        file_path = '/dummy/file/path.txt'
        dest_dir = '/path/to/dest/dir'
        main_file.do_something(file_path, dest_dir)
        mock_sudo.assert_has_calls(['rm ' + file_path,
                                    'cp' + file_path + ' ' + dest_dir],
                                     any_order=True)
</code></pre>
</div>
