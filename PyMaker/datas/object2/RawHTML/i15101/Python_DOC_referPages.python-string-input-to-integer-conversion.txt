<div class="post-text" itemprop="text">
<p>I need to create a script to ask a user to input a string containing round numbers separated by a space. Then I need to convert the string to integers.</p>
<p>Any pointers on where to start? This is what I've tried:</p>
<pre><code>a=str(input('Voer een door spatie gescheiden lijst met getallen in:').split())
b=int(a)
print(b)
</code></pre>
<p>but I keep getting:</p>
<pre><code>ValueError: invalid literal for int() with base 10: "['50', '60']"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are trying to cast a string representation of a list, just split the contents into a list and use map to cast to ints:</p>
<pre><code>inp = input('Voer een door spatie gescheiden lijst met getallen in:').split())
a,b = map(int,inp)
</code></pre>
<p>This presumes the user always enters two numbers separated by a space.</p>
<p>Safer use a while loop and a try/except:</p>
<pre><code>while True:
    try:
        inp = input('Voer een door spatie gescheiden lijst met getallen in:').split()
        a, b  = map(int, inp)
        break
    except ValueError:
        print("Invalid input")
print(a,b)
</code></pre>
<p>If you have an unknown amount of ints entered:</p>
<pre><code>  while True:
        try:
            inp = input('Voer een door spatie gescheiden lijst met getallen in:').split()
            nums = map(int, inp)
            break
        except ValueError:
            print("Invalid input")
    for num in nums:
       print(num)
</code></pre>
<p>Using <code>python3</code>, map returns a map object so it is an efficient way to assign.<br/>
<code>[int(x) for x in inp]</code> will also work but unless you need a list there is no point creating one.</p>
</div>
<div class="post-text" itemprop="text">
<h1>The Lengthy Answer</h1>
<p>Oversymplifyng the issue, the <a href="https://docs.python.org/3/library/functions.html#int" rel="nofollow"><code>int</code> builtin</a> (follow the link to know the whole story) requires a single argument, either a numeric literal or a string.</p>
<p>Your code</p>
<pre><code>&gt;&gt;&gt; a=str(input('Voer een door spatie gescheiden lijst met getallen in: ').split())
</code></pre>
<p>is creating the textual representation of a list, because you use the <code>str</code> builtin that returns a textual representation of a python object:</p>
<pre><code>&gt;&gt;&gt; a
"['2', '3', '4', '5']"
</code></pre>
<p>The above is not the textual representation of a number, as required by <code>int</code>, but the textual representation of a list, so when you pass it to <code>int</code> it complains </p>
<pre><code>ValueError: invalid literal for int() with base 10: "['2', '3', '4', '5']"
</code></pre>
<p>What if we omit the call to <code>str</code>?</p>
<pre><code>&gt;&gt;&gt; a = input('Voer een door spatie gescheiden lijst met getallen in: ').split()
&gt;&gt;&gt; a
['2', '3', '4', '5']
&gt;&gt;&gt; int(a)
TypeError: int() argument must be a string or a number, not 'list'
</code></pre>
<p>Note that the error message is different: no more a <code>ValueError</code> but a <code>TypeError</code>.  We have a list, whose items are strings representing numbers, but we're not allowed to use the list <em>as is</em> as an argument to <code>int</code>.</p>
<p>Enter <em>list comprehension</em>, the contemporary idiom to manipulate the <em>contents</em> of a list (or of a generic <em>iterable</em>).</p>
<pre><code>&gt;&gt;&gt; [int(elt) for elt in a]
[2, 3, 4, 5]
</code></pre>
<p>The syntax is easy, <code>[...]</code> you have the opening and closing bracket, as you would write when using a list literal, and inside you have an inside-out loop, first the body of the loop and then the <code>for</code> specification.  The results of the evaluation of the body are sequentially stored in a list, that the interpreter outputs for you, as you can see above we have no more strings representing numbers but integers. Assign the result of the list comprehension to a variable</p>
<pre><code>&gt;&gt;&gt; b = [int(elt) for elt in a]
</code></pre>
<p>and you're done:</p>
<pre><code>&gt;&gt;&gt; print(b)
[2, 3, 4, 5]
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>After <code>split</code> you have a <code>list</code> of <code>str</code>, so you need to convert each of the individual items to <code>int</code>.</p>
<p>You could use a list comprehension</p>
<pre><code>b = [int(i) for i in a]
</code></pre>
<p>Or use <code>map</code></p>
<pre><code>b = list(map(int, a))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to convert each element of the list into int using the following way,  </p>
<p><code>
a = [int(each) for each in a]
</code></p>
<p>This will give you a list of integers that you could use in your program. In case if it is an invalid integer, then you can use <code>try-except</code>,</p>
<pre><code>b = []
for each in a:
    try:
      b.append(int(each))
    except ValueError:
      print('Invalid number')
</code></pre>
</div>
<span class="comment-copy">In Python3, <code>input</code> already produces a string, so <code>str(input(...))</code> is redundant.</span>
<span class="comment-copy">@BhargavRao, there are two numbers entered, the OP needs to unpack the two and assign to variables then print.</span>
<span class="comment-copy">@BhargavRao,  I presume the OP is using python3 so actually <code>map(int,inp)</code> is sufficient</span>
<span class="comment-copy">Thanks it worked with the while loop!</span>
<span class="comment-copy">@Bart1K, no prob you're welcome</span>
<span class="comment-copy">deserving long late answer ... Sad ... :(</span>
