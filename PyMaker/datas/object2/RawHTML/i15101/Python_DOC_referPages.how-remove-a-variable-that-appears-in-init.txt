<div class="post-text" itemprop="text">
<p>If i have this:</p>
<pre><code>class One(object):
    def __init__(self, name):
        self.name = name
</code></pre>
<p>I want to use <code>One</code> but altering the name <code>name</code> and relace it by <code>other</code></p>
<p>The solution I supposed is inheriting:</p>
<pre><code>class Two(One):
    def __init__(self, other):
        super(Two, self).__init__(other)
</code></pre>
<p>The idea is : How to delete or change the variable names that appears in <code>__init__</code> ?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't do what you want, not if you are calling <code>One.__init__</code> from <code>Two.__init__</code>.</p>
<p>If you want to alter what attributes are set, simply <em>don't call <code>One.__init__()</code> here</em>. Set your own attributes instead:</p>
<pre><code>class One(object):
    def __init__(self, name):
        self.name = name


class Two(One):
    def __init__(self, other):
        self.other = other
</code></pre>
<p>Now <code>self.name</code> will never be set. This most likely will break the rest of functionality in <code>One</code>, something you probably don't want to do. The rest of the methods in that class are likely to rely on certain attributes having been set.</p>
<p>In OOP terms, if <code>Two</code> is not a special kind of <code>One</code> object, don't inherit from <code>One</code>. If <code>Two</code> <em>is</em> a kind of <code>One</code> object, don't try to make it into something else.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is <em>no</em> relation at all between the name of the parameter passed to <code>__init__</code> and the name of the instance variable that <em>might eventuality</em> be initialized by that argument. This is only a matter of convention than both are called the same.</p>
<p>Both code fragments below will perform exactly the same:</p>
<pre><code>class One(object):
    def __init__(self, name):
        self.name = name

class One(object):
    def __init__(self, xyz):
        self.name = xyz
</code></pre>
<p>As about <em>renaming</em> an instance variable, you might do something like that, but this is (very) bad style and has (great) chances to break something in (the base class and/or in any client code that expects a <em>proper</em> <code>One</code> instance):</p>
<pre><code>class Two(One):
    def __init__(self, other):
        super(Two, self).__init__(other)
        self.other = self.name # &lt;-  no, seriously,
        del self.name          # &lt;-  don't do that !!!
</code></pre>
</div>
<span class="comment-copy">What do you mean by <i>delete</i>? You are not deleting anything here. You are using the name <code>other</code> to pass a value to <code>One.__init__</code>, where it is stored on the instance with the name <code>name</code>.</span>
<span class="comment-copy">Argument names are <i>just local names</i>, they don't alter what other functions call their arguments.</span>
<span class="comment-copy">I want to use <code>One</code> but altering the name <code>name</code></span>
<span class="comment-copy">@Abdelouahab: <b>why</b> would you want to do that? Perhaps you shouldn't be inheriting from <code>One</code> then?</span>
<span class="comment-copy">@Abdelouahab: perhaps you need to talk about that problem then.</span>
<span class="comment-copy">this is for <code>http</code> resting, where some dictionnary keys will be altered to check, so the original keys must be deleted or replaced by other keywords, instead of going to the original library and change the variable names</span>
<span class="comment-copy">@Abdelouahab: are you testing that library, or your own code? If your own code, use <i>mocking</i> to provide your code with faked objects that act just the way you need them to.</span>
<span class="comment-copy">no, not the library, but will use it (http server), and instead of using the normal http headers, I want to alter them to check if the browser can detect that.</span>
<span class="comment-copy">And you cannot use the library in a way that it is designed for to do the same?</span>
<span class="comment-copy">I want to alter all those variable names to check <a href="https://github.com/tornadoweb/tornado/blob/master/tornado/httpclient.py#L414" rel="nofollow noreferrer">github.com/tornadoweb/tornado/blob/master/tornado/â€¦</a></span>
<span class="comment-copy"><code>self.name</code> will be deleted then?</span>
<span class="comment-copy">the <a href="https://docs.python.org/3/reference/simple_stmts.html#grammar-token-del_stmt" rel="nofollow noreferrer"><code>del</code> statement</a> will remove the attribute from the object dictionary. In other words, there will be no more <code>name</code> attribute in the object after that statement. Any further reference to that attribute will raise an <code>AttributeError</code></span>
<span class="comment-copy">ah, i see! thank you ^_^</span>
