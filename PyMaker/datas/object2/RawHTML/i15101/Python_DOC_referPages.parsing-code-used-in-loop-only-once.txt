<div class="post-text" itemprop="text">
<p>I'm writing a code in Python which can be used to solve equations. The user must first input a code via a raw_input(), which will then be used to calculate y for every x in a loop with eval(), like so:</p>
<pre><code>#some imports (math) and other irrelevant code
Code = raw_input('please enter your equation')
Low = raw_input('please enter the lowest number in the domain')
High = raw_input('please enter the highest number in the domain')
X = Low
While X &lt;= High:
    Y = eval(code)
    #complicated code to solve equation
    X += #number depending on the amount of decimals
#simpler code to print the result
</code></pre>
<p>The problem is that parsing the input code using eval() for every loop is extremely slow. Is there a way to parse the code only once and then use it as a function in the rest of the program?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can compile the expression in advance using <a href="https://docs.python.org/2/library/compiler.html#compiler.compile" rel="nofollow noreferrer"><code>compiler.compile()</code></a> (<a href="https://mail.python.org/pipermail/python-3000/2008-January/011693.html" rel="nofollow noreferrer">deprecated</a> since Python v2.6).</p>
<p>With Python 3.x:</p>
<ul>
<li>the <a href="https://docs.python.org/3/library/functions.html#compile" rel="nofollow noreferrer"><code>compile</code></a> functionality is built-in</li>
<li>the <a href="https://docs.python.org/3.3/library/ast.html" rel="nofollow noreferrer">AST module</a> offers similar functions</li>
</ul>
<p>Also take a look at: <a href="https://stackoverflow.com/q/12467570/3235496">Python: Way to speed up a repeatedly executed eval statement?</a></p>
<p>EDIT</p>
<p>Some examples:</p>
<pre><code>&gt;&gt;&gt; expr = 'x*x + 2*x + 1'
&gt;&gt;&gt; expr_obj = compile(expr, '', 'eval')
&gt;&gt;&gt; x = 1
&gt;&gt;&gt; y = eval(expr)
</code></pre>
<p>and now</p>
<pre><code>&gt;&gt;&gt; y
4
&gt;&gt;&gt; x = 2
&gt;&gt;&gt; y = eval(expr)
&gt;&gt;&gt; y
9
</code></pre>
<p><code>compile</code> is a lower level version of <code>eval</code> (and <code>exec</code>). It doesn't evaluate/execute your expression/statement but returns a code object that can do it.</p>
<hr/>
<p>PS as a general rule when using <code>eval</code> on user submitted strings you must be very careful about what you accept (it's a potential security hole).</p>
</div>
<div class="post-text" itemprop="text">
<p>if the equation in code doen't need any reference to X, then you could move <code>Y = eval(code)</code> outside the loop. Otherwise you need it at this position to access X and its current value.</p>
</div>
<div class="post-text" itemprop="text">
<p>If the user inputs the equation in terms of a single variable "X", then you can convert it to a function using Python's <code>lambda</code> keyword:</p>
<pre><code>CodeAsFunction = eval('lambda X : ' + Code)
</code></pre>
<p>(For this to work, the user just enters the right-hand side of the equation, <code>3*X + 100</code>, not <code>Y = 3*X+100</code>.)</p>
<p>Then in the body of your loop, you can call this function instead:</p>
<pre><code>while X = High:
    Y = CodeAsFunction(X)
    ... etc. ...
</code></pre>
<p>Note, <code>eval</code> is now only being called once, to create the callable <code>CodeAsFunction</code> variable.</p>
<p>Of course, you must take care regarding security issues, as have already been mentioned by other posters.</p>
</div>
<span class="comment-copy">Move it outside of the loop?</span>
<span class="comment-copy">If "code" does not reference any variables/data that changes in the loop then you can just move that line to be above the while.</span>
<span class="comment-copy">I might be doing something wrong, but compile(code) returns the location of the code instead of the evaluation.</span>
<span class="comment-copy"><code>compile</code> doesn't evaluate your expression but returns a code object that can do it. I've added an example.</span>
<span class="comment-copy">Thank you, that reduced calculation times significantly!</span>
<span class="comment-copy">To give you an example: it can now calculate all 128 intersections of tan(x**2)=y with the x-axis in just 3300 miliseconds accurate to 7 decimals on my 1.4Ghz iPad.</span>
<span class="comment-copy">If the equation doesn't reference X, then the value of Y would be constant, and there would be no need for the loop in the first place. It looks like the OP is trying to get a table of values of Y for different values of X, implying that Y <i>is</i> a function of X.</span>
