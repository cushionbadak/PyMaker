<div class="post-text" itemprop="text">
<p>I have this tail recursive function here:</p>
<pre><code>def fib(n, sum):
    if n &lt; 1:
        return sum
    else:
        return fib(n-1, sum+n)

c = 998
print(fib(c, 0))
</code></pre>
<p>It works up to n=997, then it just breaks and spits a "maximum recursion depth exceeded in comparison" <code>RuntimeError</code>. Is this just a stack overflow? Is there a way to get around it?</p>
</div>
<div class="post-text" itemprop="text">
<p>It is a guard against a stack overflow, yes. Python (or rather, the CPython implementation) doesn't optimize tail recursion, and unbridled recursion causes stack overflows. You can change the recursion limit with <a href="http://docs.python.org/library/sys.html#sys.setrecursionlimit" rel="noreferrer"><code>sys.setrecursionlimit</code></a>, but doing so is dangerous -- the standard limit is a little conservative, but Python stackframes can be quite big.</p>
<p>Python isn't a functional language and tail recursion is not a particularly efficient technique. Rewriting the algorithm iteratively, if possible, is generally a better idea.</p>
</div>
<div class="post-text" itemprop="text">
<p>Looks like you just need to set a higher recursion depth</p>
<pre><code>sys.setrecursionlimit(1500)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's to avoid a stack overflow. The Python interpreter limits the depths of recursion to help you avoid infinite recursions, resulting in stack overflows.
Try increasing the recursion limit (sys.setrecursionlimit) or re-writing your code without recursion.</p>
<p>from <a href="https://docs.python.org/2/library/sys.html#sys.setrecursionlimit" rel="noreferrer">python website</a>:</p>
<blockquote>
<p><code>sys.getrecursionlimit()</code></p>
<p>Return the current value of the recursion limit, the maximum depth of the Python interpreter stack. This limit prevents infinite recursion from causing an overflow of the C stack and crashing Python. It can be set by setrecursionlimit().</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Use a language that guarantees tail-call optimisation. Or use iteration. Alternatively, get cute with <a href="http://code.activestate.com/recipes/474088/" rel="noreferrer">decorators</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I realize this is an old question but for those reading, I would recommend against using recursion for problems such as this - lists are much faster and avoid recursion entirely.  I would implement this as:</p>
<pre><code>def fibonacci(n):
    f = [0,1,1]
    for i in xrange(3,n):
        f.append(f[i-1] + f[i-2])
    return 'The %.0fth fibonacci number is: %.0f' % (n,f[-1])
</code></pre>
<p>(Use n+1 in xrange if you start counting your fibonacci sequence from 0 instead of 1.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Of course Fibonacci numbers can be computed in O(n) by applying the Binet formula:</p>
<pre><code>from math import floor, sqrt

def fib(n):                                                     
    return int(floor(((1+sqrt(5))**n-(1-sqrt(5))**n)/(2**n*sqrt(5))+0.5))
</code></pre>
<p>As the commenters note it's not O(1) but O(n) because of <code>2**n</code>. Also a difference is that you only get one value, while with recursion you get all values of <code>Fibonacci(n)</code> up to that value. </p>
</div>
<div class="post-text" itemprop="text">
<p>I had a similar issue with the error "Max recursion depth exceeded". I discovered the error was being triggered by a corrupt file in the directory I was looping over with os.walk. If you have trouble solving this issue and you are working with file paths, be sure to narrow it down, as it might be a corrupt file. </p>
</div>
<div class="post-text" itemprop="text">
<p>If you often need to change the recursion limit (e.g. while solving programming puzzles) you can define a simple <a href="https://docs.python.org/3/reference/datamodel.html#context-managers" rel="noreferrer">context manager</a> like this:</p>
<pre><code>import sys

class recursionlimit:
    def __init__(self, limit):
        self.limit = limit
        self.old_limit = sys.getrecursionlimit()

    def __enter__(self):
        sys.setrecursionlimit(self.limit)

    def __exit__(self, type, value, tb):
        sys.setrecursionlimit(self.old_limit)
</code></pre>
<p>Then to call a function with a custom limit you can do:</p>
<pre><code>with recursionlimit(1500):
    print(fib(1000, 0))
</code></pre>
<p>On exit from the body of the <code>with</code> statement the recursion limit will be restored to the default value.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong><code>resource.setrlimit</code> must also be used to increase the stack size and prevent segfault</strong></p>
<p>The Linux kernel limits the stack of processes.</p>
<p>Python stores local variables on the stack of the interpreter, and so recursion takes up stack space of the interpreter.</p>
<p>If the Python interpreter tries to go over the stack limit, the Linux kernel segfaults it.</p>
<p>The stack limit size is controlled with the <code>getrlimit</code> and <code>setrlimit</code> system calls.</p>
<p>Python offers access to those system calls through the <code>resource</code> module.</p>
<pre><code>import resource
import sys

print resource.getrlimit(resource.RLIMIT_STACK)
print sys.getrecursionlimit()
print

# Will segfault without this line.
resource.setrlimit(resource.RLIMIT_STACK, [0x10000000, resource.RLIM_INFINITY])
sys.setrecursionlimit(0x100000)

def f(i):
    print i
    sys.stdout.flush()
    f(i + 1)
f(0)
</code></pre>
<p>Of course, if you keep increasing ulimit, your RAM will run out, which will either slow your computer to a halt due to swap madness, or kill Python via the OOM Killer.</p>
<p>From bash, you can see and set the stack limit (in kb) with:</p>
<pre><code>ulimit -s
ulimit -s 10000
</code></pre>
<p>Default value for me is 8Mb.</p>
<p>See also:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/5061582/setting-stacksize-in-a-python-script">Setting stacksize in a python script</a></li>
<li><a href="https://stackoverflow.com/questions/2917210/python-what-is-the-hard-recursion-limit-for-linux-mac-and-windows">Python: What is the hard recursion limit for Linux, Mac and Windows?</a></li>
</ul>
<p>Tested on Ubuntu 16.10, Python 2.7.12.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use generators?</p>
<pre><code>def fib():
    a, b = 0, 1
    while True:
        yield a
        a, b = b, a + b

fibs = fib() #seems to be the only way to get the following line to work is to
             #assign the infinite generator to a variable

f = [fibs.next() for x in xrange(1001)]

for num in f:
        print num
</code></pre>
<p>above fib() function adapted from: <a href="http://intermediatepythonista.com/python-generators" rel="nofollow">http://intermediatepythonista.com/python-generators</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to get only few Fibonacci numbers, you can use matrix method.</p>
<pre><code>from numpy import matrix

def fib(n):
    return (matrix('0 1; 1 1', dtype='object') ** n).item(1)
</code></pre>
<p>It's fast as numpy uses fast exponentiation algorithm. You get answer in O(log n). And it's better than Binet's formula because it uses only integers. But if you want all Fibonacci numbers up to n, then it's better to do it by memorisation.</p>
</div>
<div class="post-text" itemprop="text">
<p>Many recommend that increasing recursion limit is a good solution however it is not because there will be always limit. Instead use an iterative solution. </p>
<pre><code>def fib(n):
    a,b = 1,1
    for i in range(n-1):
        a,b = b,a+b
    return a
print fib(5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As @alex <a href="https://stackoverflow.com/a/31731476/355230">suggested</a>, you could use a generator function to do this. Here's the equivalent of the code in your question:</p>
<pre><code>def fib(n):
    def fibseq(n):
        """ Iteratively return the first n Fibonacci numbers, starting from 0 """
        a, b = 0, 1
        for _ in xrange(n):
            yield a
            a, b = b, a + b

    return sum(v for v in fibseq(n))

print format(fib(100000), ',d')  # -&gt; no recursion depth error
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I wanted to give you an example for using memoization to compute Fibonacci as this will allow you to compute significantly larger numbers using recursion:</p>
<pre><code>cache = {}
def fib_dp(n):
    if n in cache:
        return cache[n]
    if n == 0: return 0
    elif n == 1: return 1
    else:
        value = fib_dp(n-1) + fib_dp(n-2)
    cache[n] = value
    return value

print(fib_dp(998))
</code></pre>
<p>This is still recursive, but uses a simple hashtable that allows the reuse of previously calculated Fibonacci numbers instead of doing them again.</p>
</div>
<span class="comment-copy">See also <a href="http://stackoverflow.com/questions/5061582/setting-stacksize-in-a-python-script" title="setting stacksize in a python script">stackoverflow.com/questions/5061582/â€¦</a></span>
<span class="comment-copy"><a href="https://en.wikipedia.org/wiki/Memoization" rel="nofollow noreferrer">memoization</a> could speed up your function and increase its effective recursive depth by making previously calculated values terminate instead of increasing the stack size.</span>
<span class="comment-copy">Just out of curiosity, why did you name this <code>fib</code>? Were you intending to use this as a helper to calculate the Fibonacci sequence? If so, what's your approach?</span>
<span class="comment-copy">From my experience, you need to increase the limit both in the <code>sys</code> and the <code>resource</code> modules: <a href="http://stackoverflow.com/a/16248113/205521">stackoverflow.com/a/16248113/205521</a></span>
<span class="comment-copy">as a tactic to convert it to an iterative version, <a href="https://github.com/lihaoyi/macropy#tail-call-optimization" rel="nofollow noreferrer">a tail call optimization decorator could be used</a></span>
<span class="comment-copy">you can use <a href="http://svn.python.org/projects/python/trunk/Tools/scripts/find_recursionlimit.py" rel="nofollow noreferrer">svn.python.org/projects/python/trunk/Tools/scripts/â€¦</a> to find out your OS upper limit</span>
<span class="comment-copy">For those interested in the source, the default recursion limit is set to 1000 <a href="https://hg.python.org/cpython/file/tip/Python/ceval.c#l691" rel="nofollow noreferrer">hg.python.org/cpython/file/tip/Python/ceval.c#l691</a> and it can be changed using the API at <a href="https://hg.python.org/cpython/file/tip/Python/sysmodule.c#l643" rel="nofollow noreferrer">hg.python.org/cpython/file/tip/Python/sysmodule.c#l643</a> which in turn sets the limit to the new value at <a href="https://hg.python.org/cpython/file/tip/Python/ceval.c#l703" rel="nofollow noreferrer">hg.python.org/cpython/file/tip/Python/ceval.c#l703</a></span>
<span class="comment-copy">Tail recursion is a perfectly efficient technique in a  programming language optimized for it. For the right sort of problem, it may be considerably more expressive an an iterative implementation.  The answer probably means "in Python specifically" but that isn't what it says</span>
<span class="comment-copy">On my Anaconda x64, 3.5 Python on Windows, the default limit is 1000.</span>
<span class="comment-copy">My windows default limit is also 1000, but it's 2000 on my mac's Anaconda 3 x64 3.6 installation. I think the main point is the default limit can be different in different installations. However, this is unbelievably the only answer until recently that actually tells you how to check the value. The highest-voted answer doesn't even mention <code>sys.getrecursionlimit()</code>, and that was half of the original question!</span>
<span class="comment-copy">That's rather throwing the baby out with the bathwater.</span>
<span class="comment-copy">@Russell: Only one of the options I offered advises this.</span>
<span class="comment-copy">why use O(n) space when you can use O(1)?</span>
<span class="comment-copy">Just in case the O(n) space comment was confusing: don't use a list.  List will keep all the values when all you need is the nth value.  A simple algorithm would be to keep the last two fibonacci numbers and add them until you get to the one you need.  There are better algorithms too.</span>
<span class="comment-copy">Also for those reading: xrange does not work in Python 3.</span>
<span class="comment-copy">@Mathime: <code>xrange</code> is called simply <code>range</code>, in Python 3.</span>
<span class="comment-copy">@Mathime I was making things explicit for those reading these comments.</span>
<span class="comment-copy">There is no maximum size of a long in python.</span>
<span class="comment-copy">It's worth noting that this fails for larger <code>n</code> because of floating point imprecision - the difference between <code>(1+sqrt(5))**n</code> and <code>(1+sqrt(5))**(n+1)</code> becomes less than 1 ulp, so you start getting incorrect results.</span>
<span class="comment-copy">There are actually no big integers in NumPyâ€¦</span>
<span class="comment-copy">@Mego What? It's the difference between <code>(1+sqrt(5))**n</code> and <code>((1+sqrt(5))**n)+1</code> that becomes less than 1 ulp! (small typo) Also, {@}rwst That's not O(1)! Calculating <code>2**n</code> takes at least O(n) time.</span>
<span class="comment-copy">@user202729 That's not true, calculating <code>2**n</code> is effectively O(log(n)) using <a href="https://en.wikipedia.org/wiki/Exponentiation_by_squaring" rel="nofollow noreferrer">Exponentiattion by squaring</a>.</span>
<span class="comment-copy">The OP does give his code, and his experiment is reproducible at will. It does not involve corrupt files.</span>
<span class="comment-copy">You're right, but my answer isn't geared towards the OP, since this was over four years ago. My answer is aimed to help those with MRD errors indirectly caused by corrupt files - since this is one of the first search results. It helped someone, since it was up voted. Thanks for the down vote.</span>
<span class="comment-copy">This was the only thing I found anywhere when searching for my issue that connected a "max recursion depth" traceback to a corrupted file.  Thanks!</span>
<span class="comment-copy">Attempting to set <code>rlimit_stack</code> after <a href="http://www.openwall.com/lists/oss-security/2017/06/19/1" rel="nofollow noreferrer">Stack Clash</a> remediations may result in failure or related problems. Also see Red Hat <a href="https://bugzilla.redhat.com/show_bug.cgi?id=1463241" rel="nofollow noreferrer">Issue 1463241</a></span>
<span class="comment-copy">I used this (the Python resource part) to help my implementation of Kosaraju's algorithm on professor Tim Roughgarden's mean (huge) dataset. My implementation worked on small sets, certainly the issue with a large dataset was the recursion/stack limit... Or was it? Well, yes it was! Thanks!</span>
<span class="comment-copy">the reason for having to assign a generator to a variable is because <code>[fibs().next() for ...]</code> would make a new generator each time.</span>
<span class="comment-copy">Sadly you can't use numpy in most competitive programming judges. But yes sir, your solution is my favorite.   I've used the matrix soluction for some problems. It is the best solution when you need a very large fibonacci number and you can't use a modulus.  If you are allowed to use a modulus, the pisano period the better way to do it.</span>
