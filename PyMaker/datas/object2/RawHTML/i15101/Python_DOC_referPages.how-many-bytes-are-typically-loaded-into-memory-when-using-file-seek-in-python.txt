<div class="post-text" itemprop="text">
<p>I'm currently using a 4 Giga-byte sized file as Open-addressing Hash table.
In order to read each offset I'm using file.seek() function for a 1-byte (char) data. I want to optimize the size of the file using buckets (saving up space on offsets that have no data), for the optimization to be best I want to know how much bytes are cached into memory when ever I am using file.seek()?
That way I can tune the buckets so the file will require less space but the disk I/O reads won't increase.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>file.seek()</code> approach will be very memory efficient but also very slow. You will want to align everything by the page boundary though, thus I suggest that you do not cross the 4 kiB boundaries.</p>
<p>Instead of using <code>file.seek()</code>, if you are using 64-bit processor, map the entire file in memory using <a href="https://docs.python.org/3/library/mmap.html" rel="nofollow"><code>mmap</code></a>. Then you can use the rule that pages are usually 4 kiB in size, thus aligning everything on the 4 kiB boundary. This is most certainly faster than dummily using <code>file.seek</code>; though it might end up consuming more memory, the operating system can fine tune to your access patterns.</p>
<hr/>
<p>On Python 3 you would use <code>mmap</code> as follows:</p>
<pre><code># provided that your hashtable is in this file
# and its size is 4 GiB
with open("hashtable", "r+b") as f:
    # memory-map the file, size 0 means whole file
    mm = mmap.mmap(f.fileno(), 0)

    # here mm behaves like 4 billion element bytearray
    # that you can read from and write to. changes
    # are flushed to the underlying file.

    # set 1 byte in the file
    mm[123456789] = 42

    # ensure that changes are written to disk
    mm.flush()

    # close the mapping
    mm.close()
</code></pre>
</div>
<span class="comment-copy">I would encourage the use <code>mmap</code> too. Do you know if there are some mechanism to explicitly <i>unload</i> some pages when their are no longer required ? The default OS cache strategy is not necessary suitable in the OP particular use case...</span>
<span class="comment-copy">Unfortunately the exact specifics of cache flushing are OS specific, would need to call <code>madvise</code> on Linux; certainly doable with <code>ctypes</code>.</span>
<span class="comment-copy">I will consider your offering to use mmap instead. but unfortunately I think it won't help me, since I am dealing with 40 files as described above, each of them can size from 100MB to 4GB, so loading all of them to the memory can be some what unfeasible, and I will use the swap partition way too much. Also loading all the files can take really long time (it takes about 10-30 minutes to load all of them to memory).  Regarding OS, currently the code runs on Windows-7, But I will soon need to set it up on a dedicated linux (probably centos) server.</span>
<span class="comment-copy">No, they will not use swap, they will use the <i>file</i>. This is also the approach used by MongoDB for the entire database (the <i>entire</i> database is mmapped at all times).</span>
