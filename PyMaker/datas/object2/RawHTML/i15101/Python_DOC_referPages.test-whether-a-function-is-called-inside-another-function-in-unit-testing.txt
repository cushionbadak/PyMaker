<div class="post-text" itemprop="text">
<p>New to mock and patch in python. I have a class which has a method update</p>
<pre><code>class myclass(object):
   def update(self, name, passwd):
       self.update_in(name,passwd)
   def update_in(self, name, passwd):
       self.name = name
       self.passwd = passwd
</code></pre>
<p>Now in another class I have to test the update method and ascertain that the update method calls in update_in method. How do I achieve this ?</p>
</div>
<div class="post-text" itemprop="text">
<p>You should use <code>mock.patch</code> to replace the method with a mock, and then you can assert various things about the mock after calling your <code>update</code> method.</p>
<pre><code>patcher = mock.patch.object(myclass, 'update_in')
patched = patcher.start()

m=myclass()
m.update('foo', 'bar')

assert patched.call_count == 1
patched.assert_called_with('foo', 'bar')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>By <a href="https://docs.python.org/3/library/unittest.mock.html#patch" rel="nofollow"><code>patch</code></a> from <code>unittest.mock</code> module you can patch methods, functions, object or attribute of your production code. Now I assume <code>myclass</code> in <code>mymodule</code> and I will show you some simple way of how to do your test. </p>
<pre><code>from unittest.mock import patch
from mymodule import myclass

m = myclass()
with patch("mymodule.myclass.update_in", autospec=True) as mock_update_in:
    m.update('me', 'mypassword')
    mock_update_in.assert_called_with('me', 'mypassword')

@patch("mymodule.myclass.update_in", autospec=True)
def my_test(mock_update_in):
    m = myclass()
    m.update('me', 'mypassword')
    mock_update_in.assert_called_with('me', 'mypassword')

my_test()
</code></pre>
<p>Now instead of <code>patch</code> you can use <code>patch.object(myclass, "update_in", autospec=True)</code> and patch the reference of <code>myclass</code> in the module of your tests. My feel is to use <code>patch.object</code> just when you cannot do otherwise: you must be sure that you are patching the code that will be called by your test and not something else. For instance you have <code>mymodule_b</code> the use <code>from mymodule import myclass</code> and now you test a method in <code>mymodule_b</code> like:</p>
<pre><code>from mymodule import myclass
def get_registered(username, password):
    m = myclass()
    m.update(username, password)
    return m
</code></pre>
<p>Now the reference of <code>myclass</code> used by <code>get_registered()</code> <strong>is not the one</strong> in your test module. Next test will fail</p>
<pre><code>from mymodule import myclass
from mymodule_b import get_registered

with patch.object(myclass, "update_in", autospec=True) as mock_update_in:
    m = get_registered('me', 'mypassword')
    assert m is not None
    mock_update_in.assert_called_with('me', 'mypassword')
</code></pre>
<p>Is a good practice take a look to <a href="https://docs.python.org/3/library/unittest.mock.html#where-to-patch" rel="nofollow">Where to patch</a> session before to start to ride <code>patch</code> functions.</p>
<p>Just a note about use <code>autospec=True</code>: <code>autospec</code> is a real powerful option of <code>patch</code> functions family, your patched object will take the signature and the attributes from the original reference and prevent some silly errors in your test. To understand the value of <code>autospec</code> take a look to the next example:</p>
<pre><code>m = myclass()
with patch("mymodule.myclass.update_in") as mock_update_in:
    m.update('me', 'mypassword')
    mock_update_in.assert_call_with('you', 'yourpassword')
</code></pre>
<p>The <strong>previous test pass</strong> even if you check by the wrong arguments just because <code>mock_update_in</code> is a standard <code>MagicMock()</code> return a <code>MagicMock</code> object for every attribute you ask or every method you call without raise any exception: in that scenario <code>mock_update_in.assert_call_with('you', 'yourpassword')</code> will return a <code>MagicMock()</code>.</p>
</div>
<span class="comment-copy">Whenever a colleague asks about writing a test like that, I always ask, "Why do you care?" Does it really matter how <code>update()</code> does its dirty work? Granted, sometimes it might. But you want to be careful to avoid writing a test suite that is too tightly coupled to your current implementation. When that occurs, your tests become a form of code duplication. I'm not saying that you shouldn't write this test, but just that you might want to take a step back and consider which types of tests would cover your code effectively without restricting your ability to refactor in the future.</span>
<span class="comment-copy">@FMc you are right but there are cases where it can be useful: trust library and just test how you call, working with legacy code where really you are not sure how to sense result, call a your method or function that you had already well tested and you don't want replicate your tests but just trust it. However I completely agree to you that is better not abuse of it and pay lot of attention... if we have some dubs is better don't do it. BTW that is the same of standard test case where we override a class method to test  how you call that method: mock patch just provide a simple way to do it.</span>
