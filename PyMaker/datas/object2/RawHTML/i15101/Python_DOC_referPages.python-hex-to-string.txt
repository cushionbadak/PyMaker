<div class="post-text" itemprop="text">
<p>I've generated a hex string using</p>
<pre><code>x = os.system('openssl rand -hex 10')
</code></pre>
<p>But I'd like to use it as a string.</p>
<p>I've tried with <code>str(b0f4735701d6325fd072)</code> but it does not work.</p>
<p>also</p>
<pre><code>&gt;&gt;&gt; print(x)
7a7f13f40aac84332d44

&gt;&gt;&gt; print("x is of type {}\nx has value {}".format(type(x), x))
x is of type &lt;type 'int'&gt;
x has value 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I recommend, if you want to get this from a separate process, follow Python best practices and use the <code>subprocess</code> module. <code>check_output</code> will give you the <code>stdout</code> of the process that is kicked off. <code>shlex</code> can properly parse the shell command for you, don't do it manually:</p>
<pre><code>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; import shlex
&gt;&gt;&gt; shlex.split('openssl rand -hex 10')
['openssl', 'rand', '-hex', '10']
&gt;&gt;&gt; x = subprocess.check_output(shlex.split('openssl rand -hex 10'))
&gt;&gt;&gt; x
'42bfeea1f5a1d9b96e4b\n'
&gt;&gt;&gt; x = x.strip()
&gt;&gt;&gt; x
'42bfeea1f5a1d9b96e4b'
&gt;&gt;&gt; int(x, 16)
315216711282402877075019L
</code></pre>
<p>To start with a proper hex literal, which begins with <code>0x</code>, 
which Python translates to a long int:</p>
<pre><code>&gt;&gt;&gt; 0xb0f4735701d6325fd072
835645817652699503513714L
</code></pre>
<p>Pass it to <code>hex</code>:</p>
<pre><code>&gt;&gt;&gt; hex(0xb0f4735701d6325fd072)
'0xb0f4735701d6325fd072L'
</code></pre>
<p>(You can strip the <code>L</code> from the string with <code>hex(0xb0f4735701d6325fd072).strip('L')</code>)</p>
<p>To convert back to a long from the string representation, you need to pass it to <code>int</code> (also <code>long</code> in Python 2) along with the proper base (16 in this case):</p>
<pre><code>&gt;&gt;&gt; int('0xb0f4735701d6325fd072', 16)
835645817652699503513714L
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is an XY question because you don't know what <code>os.system</code> does.</p>
<p><code>os.system</code> runs a shell command and returns the exit code. You mentioned that it's returning <code>0</code>, that's because it ran successfully.</p>
<p>Instead you should use <code>subprocess.check_output</code>.</p>
<pre><code>import subprocess

hexcode = subprocess.check_output(["openssl", "rand", "-hex", "10"])
</code></pre>
<p>This will return as a string the output of the shell call <code>openssl rand -hex 10</code> rather than its exit code.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could get random bytes using <a href="https://docs.python.org/3/library/os.html#os.urandom" rel="nofollow"><code>os.urandom()</code></a>:</p>
<pre><code>&gt;&gt;&gt; import binascii, os
&gt;&gt;&gt; random_bytes = os.urandom(10)
&gt;&gt;&gt; random_bytes
b'\xe4\x19\x9e\xbb\r\xe6C\xaa\x1e\x1f'
&gt;&gt;&gt; binascii.hexlify(random_bytes)
b'e4199ebb0de643aa1e1f'
</code></pre>
<p>If you want to get an exception if the PRNG has not been seeded with enough data; you could use <a href="https://docs.python.org/3/library/ssl.html#ssl.RAND_bytes" rel="nofollow"><code>ssl.RAND_bytes()</code></a>:</p>
<pre><code>&gt;&gt;&gt; import ssl
&gt;&gt;&gt; ssl.RAND_bytes(10)
b'\xbdH\xec\xc2+\x03\x1f\x07\xd0R'
</code></pre>
<p>To get random bytes from <code>openssl</code> subprocess:</p>
<pre><code>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; hex_data = subprocess.check_output('openssl rand -hex 10'.split()).strip()
&gt;&gt;&gt; hex_data
b'd310f3378f3e93e1f5ca'
&gt;&gt;&gt; random_bytes = binascii.unhexlify(hex_data)
&gt;&gt;&gt; random_bytes
b'\xd3\x10\xf37\x8f&gt;\x93\xe1\xf5\xca'
</code></pre>
</div>
<span class="comment-copy"><code>b0f4735701d6325fd072</code> is not a valid identifier in Python. Do you have <code>0xb0f4735701d6325fd072</code>?</span>
<span class="comment-copy">Actually i was doing like x = os.system(openssl rand -hex 10) and saving it to a file with a string concatenation but it returns 0.</span>
<span class="comment-copy">Wonderfull!! thanks buddy i've watched somewhere how to execute a shell command and it does but i didn't know that it returns the exit code &gt;.&lt;</span>
<span class="comment-copy">You did this at the same time as myself, so +1. :)</span>
