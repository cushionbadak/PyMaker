<div class="post-text" itemprop="text">
<p>Here's my code:</p>
<pre><code>#! /usr/bin/env python3
import subprocess
a = subprocess.check_output('echo -n "hello world!"',shell=True)
print("a="+str(a))
</code></pre>
<p>output:</p>
<pre><code>a=b'hello world!'
</code></pre>
<p>If I include the argument <code>universal_newlines=True</code> in the call to <code>check_output</code>, then I get the desired output:</p>
<pre><code>a=hello world!
</code></pre>
<p>For the sake of better understanding the mysterious world of programming with text in the modern (<a href="http://en.wikipedia.org/wiki/Unicode" rel="nofollow">Unicode</a>) age, I would like to know how to generate the second output without specifying <code>universal_newlines=True</code>.  In other words, what function do I call to convert <code>a</code> so that it will produce the desired output.</p>
<p>A working example would go a long way.  Detailed explanations are nice, but they tend to be a bit confusing for the uninitiated -- maybe due to the use of overloaded terminology, maybe because of differences between Python2 and Python3, or maybe just because I very rarely need to think about text encoding in my line of work -- most of the tools that I work with don't require special handling like this.</p>
<p>Also: I believe the first output is of type <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow"><code>bytes</code></a>, but what is the type of the second output?  My guess is <code>str</code> with UTF-8 encoding.</p>
</div>
<div class="post-text" itemprop="text">
<p>As originally implied by Ignacio's comment, you could use <code>decode</code>:</p>
<pre><code>&gt;&gt;&gt; a = b"hello world!"
&gt;&gt;&gt; print("a="+str(a))
a=b'hello world!'
&gt;&gt;&gt; print("a="+a.decode())
a=hello world!
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow noreferrer"><code>subprocess.check_output()</code> docs</a>:</p>
<blockquote>
<p>By default, this function will return the data as encoded <strong>bytes</strong>. The
  actual encoding of the output data may depend on the command being
  invoked, so the decoding to text will often need to be handled at the
  application level.</p>
<p><em>This behaviour may be overridden</em> by setting <code>universal_newlines</code> to <code>True</code>
  as described below in <a href="https://docs.python.org/3/library/subprocess.html#frequently-used-arguments" rel="nofollow noreferrer">Frequently Used Arguments</a>.</p>
</blockquote>
<p>If you follow the link to <a href="https://docs.python.org/3/library/subprocess.html#frequently-used-arguments" rel="nofollow noreferrer">Frequently Used Arguments</a>; it describes what <code>universal_newlines=True</code> does:</p>
<blockquote>
<p>If <code>universal_newlines</code> is <code>False</code> the file objects stdin, stdout and
  stderr will be opened as <strong>binary streams</strong>, and no line ending conversion
  is done.</p>
<p>If <code>universal_newlines</code> is <code>True</code>, these file objects will be opened as
  <strong>text streams</strong> in universal newlines mode using the encoding returned by
  <code>locale.getpreferredencoding(False)</code>. For stdin, line ending characters
  <code>'\n'</code> in the input will be converted to the default line separator
  <code>os.linesep</code>. For stdout and stderr, all line endings in the output will
  be converted to <code>'\n'</code>. For more information see the documentation of
  the <a href="https://docs.python.org/3/library/io.html#io.TextIOWrapper" rel="nofollow noreferrer"><code>io.TextIOWrapper</code> class</a> when the newline argument to its
  constructor is <code>None</code>.</p>
</blockquote>
<p>For more details you could look at <a href="https://docs.python.org/3/library/io.html#io.TextIOWrapper" rel="nofollow noreferrer"><code>io.TextIOWrapper()</code> documentation</a>.</p>
<p>To run your <code>echo -n "hello world!"</code> shell command and to return text without <code>check_output()</code> and without using <code>universal_newlines=True</code>:</p>
<pre><code>#!/usr/bin/env python
import locale
from subprocess import Popen, PIPE

charset = locale.getpreferredencoding(False)
with Popen(['echo', 'Hello world!'], stdout=PIPE) as process:
    output = process.communicate()[0].decode(charset).strip()
</code></pre>
<p>Here's a <a href="https://stackoverflow.com/a/28300123/4279">couple of code examples</a> that show <a href="https://stackoverflow.com/a/25945031/4279">how <code>subprocess</code> pipes and <code>TextIOWrapper</code> class could be used together</a>.</p>
<p>To understand what is text and what is binary data in Python, read <a href="https://docs.python.org/3/howto/unicode.html" rel="nofollow noreferrer">Unicode HOWTO</a>. Here's the most important part: there are two major string types in Python: bytestrings (a sequence of bytes) that represent binary data and Unicode strings (a sequence of Unicode codepoints) that represent human-readable text. It is simple to convert one into another (â˜¯):</p>
<pre><code>unicode_text = bytestring.decode(character_encoding)
bytestring = unicode_text.encode(character_encoding)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Also: I believe the first output is of type
  <code>bytes</code>, but
  what is the type of the second output?  My guess is
  <code>str</code>
  with UTF-8
  encoding.</p>
</blockquote>
<p>Close, but not quite right.  In Python3 the <a href="https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str" rel="nofollow noreferrer"><code>str</code></a> type is indexed by Unicode <em>code points</em> (note that code points usually, but not always, have a 1:1 correspondence with user perceived characters).  Therefore, the underlying <em>encoding</em> is abstracted away when using the <code>str</code> type -- consider it unencoded, even though that is fundamentally not the case.  It is the <a href="https://docs.python.org/3/library/stdtypes.html#bytes" rel="nofollow noreferrer"><code>bytes</code></a> type which is indexed as a simple array of bytes and therefore must use a particular <a href="https://docs.python.org/3/library/codecs.html#standard-encodings" rel="nofollow noreferrer">encoding</a>,  In this case (as in most similar usages), <code>ASCII</code> would suffice for decoding what was generated by the subprocess script.</p>
<p>Python2 has different defaults for the interpretation of the <code>str</code> type (<a href="https://docs.python.org/3.0/whatsnew/3.0.html#text-vs-data-instead-of-unicode-vs-8-bit" rel="nofollow noreferrer">see here</a>), so string literals will be represented differently in that version of the language (this difference could be a big stumbling block when researching text handling).</p>
<p>As a person who mostly uses C++, I found the following to be extremely enlightening about the practical storage, encoding, and indexing of Unicode text: <a href="https://stackoverflow.com/questions/12643580/how-do-i-use-3-and-4-byte-unicode-characters-with-standard-c-strings">How do I use 3 and 4-byte Unicode characters with standard C++ strings?</a></p>
<hr/>
<p>So the answer to the first part of the question is <a href="https://docs.python.org/3/library/stdtypes.html#bytes.decode" rel="nofollow noreferrer"><code>bytes.decode()</code></a>:</p>
<pre><code>a = a.decode('ascii') ## convert from `bytes` to 'str' type
</code></pre>
<p>although simply using</p>
<pre><code>a = a.decode() ## assumes UTF-8 encoding
</code></pre>
<p>will typically produce the same results since ASCII is a subset of UTF-8.</p>
<p>Alternatively, you can use <a href="https://docs.python.org/3/library/stdtypes.html#str" rel="nofollow noreferrer"><code>str()</code></a> like so:</p>
<pre><code>a = str(a,encoding='ascii')
</code></pre>
<p>but note that here an encoding must be specified if you want the "contents only" representation -- otherwise it will actually build a <code>str</code> type which internally contains the quote characters (including the 'b' prefix), which is exactly what was happening in the first output shown in the question.</p>
<hr/>
<p><a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow noreferrer"><code>subprocess.check_output</code></a> processes the data in <em>binary</em> mode (returning the raw byte sequence) by default, but the cryptic argument <code>universal_newlines=True</code> basically tells it to <em>decode</em> the string and represent it as <em>text</em> (using the <code>str</code> type).  This conversion to the <code>str</code> type is necessary (in Python3) if you want to display the output (and "only the contents") using Python's <code>print</code> function.</p>
<p>The funny thing about this conversion is that, for these purposes, it really doesn't do anything to the data.  What happens under the hood is an implementation detail, but if the data is ASCII (as is very typical for this type of program) it essentially just gets copied from one place to another without any  meaningful translation.  The <em>decode</em> operation is just <a href="http://en.wiktionary.org/wiki/jump_through_hoops" rel="nofollow noreferrer">hoop jumping</a> to change the data type -- and the seemingly pointless nature of the operation further obfuscates the larger vision behind Python's text handling (for the uninitiated).  Further, since <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow noreferrer">the docs</a> don't make the return type(s) explicit (by name), it's hard to even know where to start looking for the appropriate conversion function.</p>
</div>
<span class="comment-copy">Have you tried decoding the output?</span>
<span class="comment-copy">@IgnacioVazquez-Abrams: Sure, I tried to figure that out, but my first few guesses didn't pan out.  I'm hoping someone can show me how to do that.  What is the syntax?  What are the data types involved? etc.  I'm sure this is very easy for people who already know how to do it.  Hopefully, I will soon be one of those people. :)</span>
<span class="comment-copy">Now that I know what everything is called, I was able to find <a href="http://stackoverflow.com/questions/606191/convert-bytes-to-a-python-string">the dup</a>.  Based on the number of hits that question has generated, I think is is fair to say that the documentation for the subprocess module could stand to provide a few more usage hints in order to be easier for the casual Python user.</span>
<span class="comment-copy">Very helpful -- thanks for pointing me in the right direction.</span>
<span class="comment-copy">These docs were the first thing that I read (that's how I guessed to try <code>universal_newlines=True</code>).  But, frankly, a lot of this was over my head initially because I didn't know how all of the terminology translated into data types (which I now know can be either <code>bytes</code> or <code>str</code>) and function calls (in particular it doesn't tell me that I should probably just call <code>decode()</code>, even though the data isn't really encoded).</span>
<span class="comment-copy">...Also, the description (and name) of <code>universal_newlines</code> doesn't directly match anything in my prior experience.  It seems to be describing what I would normally think of as text vs. binary I/O modes, but this is normally a NOP on Linux systems so I didn't find it too meaningful.  What I don't see in these docs is clear documentation of the fact that <code>universal_newlines=True</code> changes the return type from <code>bytes</code> to <code>str</code>.  ...But there's a lot of good data captured in this answer -- thanks!</span>
<span class="comment-copy">@nobar: I'm (almost) sure subprocess' docs, don't tell you to call <code>.strip()</code> method if you want to remove the leading/trailing whitespace from the output. <code>subprocess</code> module uses <code>bytes</code>, <code>str</code> types but teaching about <code>bytes.decode()</code> is not its responsibility. The phrase <i>text streams</i> implies that the result is <code>str</code> (the last paragraph is a common knowledge in Python -- you shouldn't expect <code>subprocess</code> to teach you that). Yes, <code>universal_newlines</code> does not suggests 'text mode' for me too -- it seems like a good compromise if you need to write single-source Python 2/3 compatible code.</span>
<span class="comment-copy">Show the type of an object: <code>print("a=["+str(a)+"], type="+str(type(a)))</code></span>
<span class="comment-copy">I probably would have had no problems, and never asked this question, if they had simply made <code>universal_newlines=True</code> the default.  If your subprocess is returning non-ASCII Unicode (a rare case in my experience), then you would be happy to deal with this conversion process.  If your subprocess is returning non-text binary, then a binary return mode would be good, but maybe it should be named as such.</span>
<span class="comment-copy">On the plus side, I can finally say that I have actually programmed with Unicode -- even though it was only used for the <a href="http://stackoverflow.com/questions/19212306/difference-between-ascii-and-unicode">ASCII subset</a> and served no real purpose.</span>
<span class="comment-copy">Note to self: Think twice before trying to work in Python3.  <a href="http://lucumr.pocoo.org/2014/1/5/unicode-in-2-and-3/" rel="nofollow noreferrer">It is a black hole of wasted time</a>.  Still makes a fine calculator though.</span>
