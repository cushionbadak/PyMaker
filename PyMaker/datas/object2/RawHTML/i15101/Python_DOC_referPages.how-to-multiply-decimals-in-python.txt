<div class="post-text" itemprop="text">
<p>I was writing a pounds to dollars converter program. I encountered some problems multiplying the two numbers.</p>
<pre><code>pounds = input('Number of Pounds: ')
convert = pounds * .56
print('Your amount of British pounds in US dollars is: $', convert)
</code></pre>
<p>Can anyone tell me the code to correct this program?</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3 <a href="https://docs.python.org/3/library/functions.html#input"><code>input</code></a> will return a string. This is basically equivalent of <code>raw_input</code> in Python 2. So, you need to convert that string to a number before performing any calculation. And be prepared for "bad input" (i.e: non-numeric values).</p>
<p>In addition, for monetary values, it is usually <em>not</em> a good idea to use floats. You should use <a href="https://docs.python.org/3/library/decimal.html"><code>decimal</code></a> to avoid rounding errors:</p>
<pre><code>&gt;&gt;&gt; 100*.56
56.00000000000001
&gt;&gt;&gt; Decimal('100')*Decimal('.56')
Decimal('56.00')
</code></pre>
<p>All of that lead to something <em>like</em> that:</p>
<pre><code>import decimal

try:
    pounds = decimal.Decimal(input('Number of Pounds: '))
    convert = pounds * decimal.Decimal('.56')
    print('Your amount of British pounds in US dollars is: $', convert)
except decimal.InvalidOperation:
    print("Invalid input")
</code></pre>
<p>Producing:</p>
<pre><code>sh$ python3 m.py
Number of Pounds: 100
Your amount of British pounds in US dollars is: $ 56.00

sh$ python3 m.py
Number of Pounds: douze
Invalid input
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def main():
    pounds = float(input('Number of Pounds: '))
    convert = pounds * .56
    print('Your amount of British pounds in US dollars is: $', convert) 

main()
</code></pre>
<p>If you are using input, you are inputing a string. You want to input a floating number for this questions.</p>
</div>
<span class="comment-copy">What is the error message you are seeing? These three commands worked for me in the interpreter. Which version of Python are you using? Consider what will happen when if someone enters a non-numeric value for pounds.</span>
<span class="comment-copy">@kdopen This will work in Python 2 as <code>input</code> is <code>eval(raw_input(...))</code> -- so, with proper user input, returning a <i>number</i> not a <i>string</i>. In Python 3 <code>input</code> is the equivalent of <code>raw_input</code>  and will always return a string. So there is a need for an explicit conversion. Very probably the OP is using Python 3 but his code was based on an example written for Python 2.</span>
<span class="comment-copy">I have to strongly recommend this answer especially because of the point about using decimal in place of float for all monetary values.</span>
