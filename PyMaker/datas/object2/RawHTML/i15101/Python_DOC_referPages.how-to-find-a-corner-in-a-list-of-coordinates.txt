<div class="post-text" itemprop="text">
<p>I have a style/performance issue for the following code:</p>
<pre><code>dq=((410, -890), (490, -890), (490, -790), (590, -790), (590, -710), 
    (490, -710), (490, -590), (590, -590), (590, -510), (490, -510), 
    (490, -410), (410, -410), (410, -510), (310, -510), (310, -590), 
    (410, -590), (410, -710), (310, -710), (310, -790), (410, -790))
maxy=max([q[1] for q in dq])
minx=min([q[0] for q in dq if q[1]==maxy])
idx=dq.index((minx,maxy))
</code></pre>
<p>I have a list of coordinates and I want to find the index with the greatest Y value and the lowest X value.</p>
<p>Is there any better/pythonic way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Another option is to pass a key function to <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow"><code>max</code></a>:</p>
<pre><code>&gt;&gt;&gt; max(enumerate(dq), key=lambda x: (x[1][1], -x[1][0]))
(11, (410, -410))
&gt;&gt;&gt; idx, maxval = max(enumerate(dq), key=lambda x: (x[1][1], -x[1][0]))
&gt;&gt;&gt; idx
11
</code></pre>
<p>Here, where we're working with numbers, we can use the sign-flip trick to exchange min and max.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you prefer a functional style of code:</p>
<pre><code>get_x = operator.itemgetter(0)
get_y = operator.itemgetter(1)
maxy = max(dq, key=get_y)
minx = min(filter(lambda item: item[1] == maxy, dq), key=get_x)
</code></pre>
<p>Personally, I prefer the generator comprehensions, but some people swear by this kind of code.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'll solve tis way:</p>
<pre><code>maxy=max(q[1] for q in dq)
minx=min((q[0],idx) for idx,q in enumerate(dq) if q[1]==maxy)
idx=minx[1]
</code></pre>
<p>I feel it is less readable, but I need one iteration less.</p>
<p>Thank you, @Kevin and @Bhargav</p>
</div>
<span class="comment-copy">What do you want to return if <code>dq = ((3,2), (4, 3))</code>?  Right now, you'll return <code>(4, 3)</code>.  Is that correct?</span>
<span class="comment-copy">@Kevin imagine I have a square: <code>dq=((0,1),(1,1),(1,0),(0,0)</code>. I want to return <code>idx=0</code> because dq has at index 0 the tuple with the lower X value having the greater Y value.</span>
<span class="comment-copy">@NicolaSysnet but Nicola In this solution, the commitment between the teams presents trends to return int or bool approve the maintenance of the positions of the structure bodies with respect to their classes. why dont invert the values minx and maxy?</span>
<span class="comment-copy">Nice! I think this is the fastest solution and uses at best the tuple ordering of Python.</span>
<span class="comment-copy">@NicolaSysnet: if performance is a concern for a task like this you're using the wrong language. :-)</span>
<span class="comment-copy">Still I have to find the index in the list...</span>
