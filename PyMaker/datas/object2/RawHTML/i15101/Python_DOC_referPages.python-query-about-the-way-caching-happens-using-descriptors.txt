<div class="post-text" itemprop="text">
<p>I was trying out caching using descriptors using below code</p>
<pre><code>class TestDesc(object):
    def __init__(self,test):
        self.test = test

    def __get__(self, instance, owner):
        if instance is None:
            return self

        value =  instance.__dict__[self.test.__name__] = self.test(instance)
        return value

    def __set__(self, instance, value):
        pass

class MyClass(object):
    @TestDesc
    def func(self):
        time.sleep(5)
        return "I am very slow"

c = MyClass()
print(c.func)
print(c.func)
</code></pre>
<p>Both the calls to print take 5 seconds which is not how it should work. But if I remove the <code>__set__</code> method that I had added, caching works fine. 
I couldnt figure out why caching does not work as expected with the <code>__set__</code> method in the descriptor class.
Any pointers appreciated. I am using Python 3.4.1</p>
<p>Ref: <a href="http://www.pydanny.com/cached-property.html" rel="nofollow">http://www.pydanny.com/cached-property.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You hit upon the difference between a <em>data descriptor</em> and a regular descriptor. Data descriptors are handled before instance attributes, while regular descriptors are handled after.</p>
<p>See <a href="https://docs.python.org/3/reference/datamodel.html#invoking-descriptors" rel="nofollow"><em>Invoking Descriptors</em></a> in the reference documenation:</p>
<blockquote>
<p>If the descriptor defines <code>__set__()</code> and/or <code>__delete__()</code>, it is a data descriptor; if it defines neither, it is a non-data descriptor.</p>
<p>[...]</p>
<p>Data descriptors with <code>__set__()</code> and <code>__get__()</code> defined <strong>always override a redefinition in an instance dictionary</strong>. In contrast, non-data descriptors can be overridden by instances.</p>
</blockquote>
<p>Emphasis mine.</p>
<p>And from the <a href="https://docs.python.org/3/howto/descriptor.html#descriptor-protocol" rel="nofollow"><em>Descriptor HowTo Guide</em></a>:</p>
<blockquote>
<p>If an object defines both <code>__get__()</code> and <code>__set__()</code>, it is considered a data descriptor. Descriptors that only define <code>__get__()</code> are called non-data descriptors (they are typically used for methods but other uses are possible).</p>
<p>Data and non-data descriptors differ in how overrides are calculated with respect to entries in an instance’s dictionary. <strong>If an instance’s dictionary has an entry with the same name as a data descriptor, the data descriptor takes precedence</strong>. If an instance’s dictionary has an entry with the same name as a non-data descriptor, the dictionary entry takes precedence.</p>
</blockquote>
<p>Your <code>TestDecs</code> descriptor has a <code>__set__</code> method, so it is considered a data descriptor, and the instance attribute is not consulted to allow the setter to always be invoked.</p>
</div>
<span class="comment-copy">I guess the heart of the code is in "value =  instance.__dict__[self.test.__name__] = self.test(instance)". So you mean if I define <b>set</b>, it works like "value = self.test(instance)" otherwise as "value = instance.__dict__[self.test.__name__]" ?</span>
<span class="comment-copy">@RohitSasikumar: that line sets an attribute on the instance with the exact same name as the property; for a non-data descriptor that then overrides all future access for that name. If you have a <code>__set__</code> method, making this a data-descriptor, the <code>__get__</code> method is always going to be called, so in your getter you'd need to check if you already set a cached value and return that instead of calling the method.</span>
