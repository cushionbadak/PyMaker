<div class="post-text" itemprop="text">
<p>What I'd like to accomplish is to set <code>testobj.alpha</code> to <code>.5</code> in the example below:</p>
<pre><code>class test():
    def __init__(self):
        self.alpha = 0

d = {'alpha' : .5}
testobj = test()

for i in d:
    testobj.i = d[i] #creates a new class member called 'i' instead of setting alpha to .5
</code></pre>
<p>As the comment says, in the <code>for</code> loop, a new class member called <code>i</code> is created, rather than setting the existing <code>alpha</code> member to .5  </p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/functions.html#setattr" rel="nofollow"><code>setattr</code></a> to set attributes dynamically:</p>
<pre><code>for i in d:
    setattr(testobj, i, d[i])
</code></pre>
<p>or update the internal attribute dictionary directly (<a href="https://docs.python.org/3/library/functions.html#vars" rel="nofollow"><code>vars</code></a> will serve as a proxy for the <a href="https://docs.python.org/3/library/stdtypes.html?highlight=__dict__#object.__dict__" rel="nofollow"><code>__dict__</code> attribute</a>):</p>
<pre><code>vars(testobj).update(d) # No (explicit) loop
</code></pre>
<p>The latter approach will fail if an object doesn't have the <code>__dict__</code> attribute (e.g. it was defined with the <code>__slots__</code> attribute).</p>
</div>
