<div class="post-text" itemprop="text">
<p>I am working on a standalone Python-GUI-program. When I run</p>
<pre><code>python3 setup.py sdist
</code></pre>
<p>I get the following warning:</p>
<pre><code>package init file 'main-application-folder/__init__.py' not found (or not a regular file)
</code></pre>
<p>Is this warning only meant for packages or should a standalone Python program also have an <code>__init__.py</code> instead of something like <code>main-window.py</code> or <code>my-first-program.py</code>?</p>
<p>Should I rename my main file (in my case <code>ìbk-st.py</code> to <code>__init__.py</code>) or would it be good to retain a certain structure in the <code>__init__.py</code> (i.e. make a separate file that calls the <code>ibk-st.py</code> file)</p>
<p>Link to project:</p>
<ul>
<li><a href="https://github.com/tobias47n9e/innsbruck-stereographic" rel="nofollow">https://github.com/tobias47n9e/innsbruck-stereographic</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You should rename the <code>ibk-st</code> into a valid package identifier for python (<code>ibk_st</code> maybe); then <code>ibk-st.py</code> into something like <code>main_ui.py</code>; then have an <code>__init__.py</code> for that whole package (alternatively you can rename <code>ibk-st.py</code> to <code>__init__.py</code>). </p>
<p>Do note that <a href="https://docs.python.org/3/distutils/setupscript.html#installing-scripts" rel="nofollow"><code>setup.py</code> can install command line scripts</a>; you can provide a thin wrapper as file <code>bin/ibk-st-ui</code> with contents</p>
<pre><code>#!/usr/bin/env python

from ibk_st.main_ui import main
main()
</code></pre>
<p>The module installation will ensure that the script is runnable on whatever platform the user is using.</p>
<p>Then in your <code>setup.py</code> you should have</p>
<pre><code>...
packages = [ 'ibk_st' ],
scripts=[ 'bin/ibk-st-ui' ],
...
</code></pre>
<p>Now when you run the <code>setup.py install</code> or install the package, the modules can be embedded into other programs <strong>and</strong> the command <code>ibk-st-ui</code> will be installed in the the <code>bin</code> folder (be it the <code>bin</code> of a virtualenv or the system <code>/usr/local/bin</code>), that can run the UI.</p>
</div>
<span class="comment-copy">It's not clear what distinction you're drawing between <i>"packages"</i> and a <i>"standalone Python program"</i> - packages generally <i>are</i> standalone programs. You have numerous <code>.py</code> files grouped together in a directory, so yes you should write an <code>__init__.py</code> to specify what should be exposed publicly from them.</span>
<span class="comment-copy">This answer might help you: <a href="http://stackoverflow.com/questions/28444747/whats-the-minimal-directory-structure-to-make-setuptools-work-with-one-file-py/28573255#28573255" title="whats the minimal directory structure to make setuptools work with one file py">stackoverflow.com/questions/28444747/…</a></span>
<span class="comment-copy">@jonrsharpe: Sorry to be so easily confused but does that mean I should rename my ibk-st.py to <code>__init__.py</code> or are there certain specifications that an <code>__init__.py</code> should fulfil?</span>
<span class="comment-copy">@Spießbürger I suppose you <i>could</i>, but that would be unconventional - <code>__init__.py</code> usually contains very little code, just imports of the names you want to expose externally. See e.g. <a href="http://stackoverflow.com/q/448271/3001761">stackoverflow.com/q/448271/3001761</a></span>
<span class="comment-copy">you have packages = ["ibk-st"] in your setup.py, so naturally distutils ask for a <b>init</b>.py in the package. If you don't want to distribute a package just use only py-modules.</span>
<span class="comment-copy">Thanks this is very helpful. I will reed up on those details and get my project structure in order!</span>
