<div class="post-text" itemprop="text">
<p>I'm having some difficulty with Python decorators, and I think it has to do with the fact I am passing a class as a parameter to a function decorator, when the function being decorated is a method of the class being passed.</p>
<p>I have no clearer explanation of the problem than that, so hopefully some code will help:</p>
<pre><code>from typeChecking import *

class Vector:
    @accepts(Vector, float, float, float) #Vector hasn't been defined yet... In c++ I could forward declare...
    def __init__(self, x, y, z):
        self._x = float(x)
        self._y = float(y)
        self._z = float(z)
    ...
</code></pre>
<p>I don't think the definition of <code>@accepts</code> is important, but I'll leave it here just in case:</p>
<pre><code>def accepts(*types):
    def check_accepts(f):
        assert len(types) == f.func_code.co_argcount
        def new_f(*args, **kwds):
            for (a, t) in zip(args, types):
                assert isinstance(a, t), \
                       "arg %r does not match %s" % (a,t)
            return f(*args, **kwds)
        new_f.func_name = f.func_name
        return new_f
    return check_accepts
</code></pre>
<p>I get the following error:</p>
<pre><code>File "raytracerBase.py", line 41, in &lt;module&gt;
  class Vector:
File "raytracerBase.py", line 42, in Vector
  @accepts(Vector, float, float, float)
NameError: name 'Vector' is not defined
</code></pre>
<p>I think my comment explains what I think is happening: The class hasn't been defined yet (because, I'm in the process of defining it) and therefore I can't pass it.</p>
<p>Is there a neat workaround that isn't:</p>
<pre><code>assert isinstance(self, Vector), "Something is wrong... very wrong..."
</code></pre>
<p>I am aware I'm type checking more than is deemed necessary, but I would like to know how to solve this sort of problem anyway.</p>
<p><strong>Edit:</strong> I'm also aware that <code>@accepts</code> isn't actually valid Python. But, It's the outline of the code I intend to implement.</p>
</div>
<div class="post-text" itemprop="text">
<p>The short answer is <strong>No</strong>, you can't refer to your class like that before you've finished defining it.</p>
<p>Type-checking is a subject under active discussion among the Python development team at the moment, and to the extent that there's a consensus, it's that <a href="https://docs.python.org/3/tutorial/controlflow.html#function-annotations">function annotations</a> are the way forward: <a href="https://www.python.org/dev/peps/pep-0484">PEP 484</a> describes the direction Guido wants to take in implementing it.</p>
<p>The workaround for forward references <a href="https://www.python.org/dev/peps/pep-0484/#forward-references">proposed</a> in that PEP is to just use a string instead:</p>
<blockquote>
<p>When a type hint contains names that have not been defined yet, that definition may be expressed as a string, to be resolved later. For example, instead of writing:</p>
<pre><code>def notify_by_email(employees: Set[Employee]): ...
</code></pre>
<p>one might write:</p>
<pre><code>def notify_by_email(employees: 'Set[Employee]'): ...
</code></pre>
</blockquote>
</div>
<span class="comment-copy">I don't have a solution to this one, but I do want to point out that generally you don't want to have to do argument type checking in Python. Treat it like a duck, and catch any exceptions it might throw if you expect a quack and it barks.</span>
<span class="comment-copy">Indeed, I don't think you're going to get an answer you want. Most are going to focus on the fact that what you're trying to do is <i>incredibly</i> un-pythonic. Duck typing is a fundamental part of python.</span>
<span class="comment-copy">And if you wanted the type info for some kind of static typing just-in-time compilation for a speedup, then either do your own low-level work in <code>llvmpy</code> or <code>llvmlite</code>, or just use <code>numba</code> (which already has a type annotation decorator for this purpose).</span>
<span class="comment-copy">Alternatively, you can use string-based reflection to essentially defer evaluation of the type to runtime (when the class will exist). See here: <a href="http://stackoverflow.com/questions/17522706/how-to-pass-a-class-variable-to-a-decorator-inside-class-definition?rq=1" title="how to pass a class variable to a decorator inside class definition">stackoverflow.com/questions/17522706/â€¦</a></span>
<span class="comment-copy">For instance, I'm fairly certain that no one intended to combine <code>iter</code>, <code>zip</code>, and multiplying one-element lists to be used as a <code>grouper</code> recipe, but someone realized it worked, was concise, well-understood, and was very flexible.</span>
