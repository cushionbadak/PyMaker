<div class="post-text" itemprop="text">
<p>I'm trying to get used to iterators. Why if I type</p>
<pre><code>b = list(reversed([1,2,3,4,5]))
</code></pre>
<p>It will give me a reversed list, but</p>
<pre><code>c = str(reversed('abcde'))
</code></pre>
<p>won't give me a reversed string?</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, <a href="https://docs.python.org/3/library/functions.html#reversed" rel="noreferrer"><code>reversed</code></a> actually returns a reverse iterator. So, <a href="https://docs.python.org/3/library/functions.html#func-list" rel="noreferrer"><code>list</code></a> applied on the iterator will give you the list object.</p>
<p>In the first case, input was also a list, so the result of <code>list</code> applied on the <code>reversed</code> iterator seemed appropriate to you.</p>
<p>In the second case, <a href="https://docs.python.org/3/library/stdtypes.html#str" rel="noreferrer"><code>str</code></a> applied on the returned iterator object will actually give you the string representation of it.</p>
<p>Instead, you need to iterate the values in the iterator and join them all with <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="noreferrer"><code>str.join</code></a> function, like this</p>
<pre><code>&gt;&gt;&gt; ''.join(reversed('abcde'))
edcba
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>another way by <strong>extend slice</strong> method. <a href="https://docs.python.org/2.3/whatsnew/section-slices.html" rel="nofollow">more details</a></p>
<pre><code>&gt;&gt;&gt; a = "abcde"
&gt;&gt;&gt; a[::-1]
'edcba'
&gt;&gt;&gt; 
</code></pre>
<hr/>
<p>by string to list --&gt; list reverse  --&gt; join list</p>
<pre><code>&gt;&gt;&gt; a
'abcde'
&gt;&gt;&gt; b = list(a)
&gt;&gt;&gt; b
['a', 'b', 'c', 'd', 'e']
&gt;&gt;&gt; b.reverse()
&gt;&gt;&gt; b
['e', 'd', 'c', 'b', 'a']
&gt;&gt;&gt; "".join(b)
'edcba'
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">you need to iterate over the reversed object, which is what you do by calling list on it, <code>str(reversed('abcde')) </code>  will give you the object as a string the same as <code>str([])</code> etc.. does</span>
<span class="comment-copy">Related: <a href="http://stackoverflow.com/q/931092/1497596">Reverse a string in Python</a></span>
<span class="comment-copy">Please go through your questions and see if there are answers deserve being accepted (as the one in this topic).</span>
<span class="comment-copy">Thanks I'm not sure what the string representation is vs the string? Does using join work because it is iterating through the reversed string to rebuild it (excuse my poor terminology), whereas str() isn't doing this?</span>
<span class="comment-copy">Str ll try to convert the object to a string. Since the reverse iterator is an object, it would be tried to converted to a string. But join iterates the iterator and builds a new string with all the strings from the iterator</span>
<span class="comment-copy">Thanks so str() doesn't iterate to build a new string, like list does  to build a list.  How does str() build or covert a string?  Is the difference due to a string being immutable vs list is mutable so a str() can't rebuild a string in the same way</span>
<span class="comment-copy">Str internally calls the <code>__str__</code> magic method to get the string representation.</span>
