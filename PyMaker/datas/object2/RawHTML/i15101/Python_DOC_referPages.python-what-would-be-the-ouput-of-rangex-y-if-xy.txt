<div class="post-text" itemprop="text">
<p>Let x and y be two integers :  </p>
<p>How <code>range(x,y)</code> such <code>x&gt;y</code> would be considered in Python ?<br/>
I tried following code in both python 2.7 and python 3.3:  </p>
<pre><code>for i in range(10,3):
    print i  
</code></pre>
<p>I thought range(10,3) should be considered as  the list [0,3,6,9], but this portion of code isn't rendering anything.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have two options:</p>
<ol>
<li><p>rearrange the input values,</p>
<pre><code>range(0, 10, 3)     # =&gt; (0, 3, 6, 9)
</code></pre></li>
<li><p>write a wrapper function which rearranges them for you:</p>
<pre><code>def safe_range(a, b):
    return range(0, max(a,b), min(a,b))

safe_range(3, 10)   # =&gt; (0, 3, 6, 9)
</code></pre></li>
</ol>
<p><strong>Edit:</strong> after thinking about it a bit more, I see; you were trying to do something like</p>
<pre><code>range({start=0,} stop, step)
</code></pre>
<p>but if you only give two values there is no way to tell the difference between that and</p>
<pre><code>range(start, stop, {step=1})
</code></pre>
<p>To resolve this ambiguity, Python syntax demands that default-value parameters can only appear after all positional parameters - that is, the second example is valid Python, the first isn't.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/stdtypes.html#range" rel="nofollow"><code>range</code></a>'s signature is </p>
<blockquote>
<p><em>range(start, stop[, step])</em></p>
</blockquote>
<p><code>range(10, 3)</code> sets <em>start</em> and <em>stop</em> to 10 and 3, respectively, therefore if you will to provide the <em>step</em> argument, you'll need to provide the <em>start</em> argument:</p>
<pre><code>In [1]: range(0, 10, 3) # list(range(0, 10, 3)) in Python3+
Out[1]: [0, 3, 6, 9]
</code></pre>
<p>The <em>step</em>'s default value is 1 and (quoting the documentation page I linked before)</p>
<blockquote>
<p>For a positive <em>step</em>, the contents of a range <em>r</em> are determined by the formula <em>r[i] = start + step*i</em> where <em>i &gt;= 0</em> and <em>r[i] &lt; stop</em>.</p>
</blockquote>
<p><code>range(10, 3)</code> is empty because <em>r[i] &lt; stop</em> is false from the very beginning (<em>r[0]</em> is <em>10 + 1*0 = 10</em> and 10 is greater than 3).</p>
</div>
<div class="post-text" itemprop="text">
<p><code>range()</code> with just two arguments interprets those arguments as <code>start</code> and <code>stop</code>. From the <a href="https://docs.python.org/2/library/functions.html#range" rel="nofollow"><code>range()</code> function documentation</a>:</p>
<blockquote>
<p><code>range(stop)</code><br/>
<code>range(start, stop[, step])</code></p>
</blockquote>
<p>Note that <code>[, step]</code> is optional in the second form. By supplying a <code>stop</code> that is smaller or equal to <code>start</code> while leaving <code>step</code> at the default <code>1</code>, you created an empty range. The documentation includes this case explicitly as one of the examples given:</p>
<pre><code>&gt;&gt;&gt; range(1, 0)
[]
</code></pre>
<p>The <a href="https://docs.python.org/3/library/stdtypes.html#range" rel="nofollow">Python 3 version of the documentation</a> is a little more explicit still:</p>
<blockquote>
<p>A range object will be empty if <code>r[0]</code> does not meet the value constraint.</p>
</blockquote>
<p>If you wanted to supply a <code>step</code> value, you <em>have</em> to specify the start:</p>
<pre><code>for i in range(0, 10, 3):
</code></pre>
<p>Python refuses to guess here; there are legitimate uses for using variables for both the <code>start</code> and <code>stop</code> arguments, where given certain runs of an algorithm the stop value ends up equal or lower than the start; such code <em>expects</em> the <code>range()</code> to be empty in such cases.</p>
</div>
<span class="comment-copy">By default, the step size is one, so how can one be added to get from 10 to 3?</span>
<span class="comment-copy">I thought that the start is 0 and step here considered as 3 But I think I ignored the order of parameters</span>
<span class="comment-copy">you should read docs - check <a href="https://docs.python.org/2/library/functions.html#range" rel="nofollow noreferrer"><code>range(start, stop[, step])</code></a></span>
<span class="comment-copy">@mounaim: the documentation gives you two signatures. One with <i>one</i> argument, the other with <i>three</i> arguments*, the third one optional.</span>
<span class="comment-copy">@mounaim: you can also give <i>negative</i> steps, and provided <code>x &gt; y</code> you'll get a range too: <code>range(10, 3, -1)</code> for example.</span>
<span class="comment-copy">also add answer to : "but this portion of code isn't rendering anything." (about - what we was doing)</span>
<span class="comment-copy">Ok I've forgotten that step was optional in the second range() signature, Thank you very much @Martjin</span>
