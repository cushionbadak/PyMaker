<div class="post-text" itemprop="text">
<blockquote>
<p>Write a program that asks the user to enter some numbers (positives,
  negatives and zeros). Your program should NOT ask the user to enter a
  fixed number of numbers. Also it should NOT ask for the number of
  numbers the user wants to enter. But rather it should ask the user to
  enter a few numbers and end with -9999 (a sentinel value). The user
  can enter the numbers in any order. Your program should NOT ask the
  user to enter the positive and the negative numbers separately.</p>
<p>Your program then should create a list with the numbers entered (make
  sure NOT to include the sentinel value (-9999) in this list) and
  output the list and a dictionary with the following Key-Value pairs
  (using the input list and the above functions):</p>
</blockquote>
<p>I know this is a question that has been on the board 3 times, and I've tried copying other examples, but I still get an error stating I'm missing 1 required positional argument.  I've tried changing several things with no resolution.  I thought my average functions were working, but at this point I'm not even sure of that.  This is also my first time posting anything here, so I'm sorry for poor formatting.  Below is my code:</p>
<pre><code>def numList(): 
    values = [] 
    while True: 
         x = int(input("Enter any amount of numbers or -9999 to quit: ")) 
         if x == -9999: break 
         values.append(x) 
    return values

def allNumAvg(values): 
    whole = [] 
    average = 0 
    for i in values: 
         whole.append(i) 
    average = sum(whole)/len(whole) 
    return average

def posNumAvg(values): 
    pos = [] 
    average = 0 
    for i in values: 
         if i &gt; 0: 
              pos.append(i) 
              average = sum(pos)/len(pos) 
    return average

def nonPosAvg(values): 
    non = [] 
    average = 0 
    for i in values: 
         if i &lt; 1: 
              non.append(i) 
              average = sum(non)/len(non) 
    return average

print(numList())

def store(): 
     return {'all': allNumAvg(), 'pos': posNumAvg(), 'def': nonPosAvg()}() 

print(store())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>your functions <code>allNumAvg</code> <code>posNumAvg</code> and <code>nonPosAvg</code> all take 1 argument, values. You're calling them without any arguments. allNumAvg()</p>
<p>try changing to this</p>
<pre><code>values = numList()

def store(): 
     return {'all': allNumAvg(values), 'pos': posNumAvg(values), 'def': nonPosAvg(values)}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Apart for not passing the values and trying to call a dict you are calculating the average before the lists have been filled completely, in your code calculate the average outside the loop when you are finished appending:</p>
<pre><code>def posNumAvg(values): 
    pos = [] 
    #  average = 0 don't need to declare variable
    for i in values: 
         if i &gt; 0: 
              pos.append(i) 
    average = sum(pos)/len(pos)  # only calculate once when done
    return average
</code></pre>
<p>In <code>allNumAvg</code> you already have a list of values and you then make another list of the exact same values, just use values itself:</p>
<pre><code>def allNumAvg(values): 
    average = sum(values )/ len(values) 
    return average
</code></pre>
<p>You can use also use  list comprehensions:</p>
<pre><code>def num_list():
    # "-9999" is the sentinel value which will break the loop if entered
    values = [int(i) for i in iter(lambda:input("Enter any amount of numbers or -9999 to quit: "),"-9999")]
    return values


def all_num_avg(values):
    average = sum(values) / len(values)
    return average


def pos_num_avg(values):
    pos = [x for x in values if x &gt; 0]
    return sum(pos) / len(pos)


def non_pos_avg(values):
    non = [i for i in values if i &lt; 1]
    return sum(non) / len(non)


values = num_list()

def store():
    return {'all': all_num_avg(values), 'pos': pos_num_avg(values), 'def': non_pos_avg(values)}
</code></pre>
<p>I also changed your function names using underscores which is in line with the <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow">pep-8 style guide</a></p>
<p>Ideally when taking user input it is best to use a <a href="https://wiki.python.org/moin/HandlingExceptions" rel="nofollow">try/except</a> to catch bad input from the user:</p>
<pre><code>def num_list():
    values = []
    while True:
        try:
            inp = int(input("Enter any amount of numbers or -9999 to quit: "))
            if inp == -9999:
                return values 
            values.append(int(inp))  # any input that cannot be cast will raise a ValueError which we catch and then inform the user
        except ValueError:
            print("Invalid input")
    return values
</code></pre>
<p>If a user enters no positive or negative numbers then you will also get a <code>zeroDivisionError</code> so you would also need to handle that case by either using try/except again or returning a default values if the list is empty, we can use  a default value as we will have already validated the input to make sure is a number:</p>
<pre><code> def non_pos_avg(values):
    non = [i for i in values if i &lt; 1]
    return sum(non) / len(non) if non else 0
</code></pre>
<p>Which can all be done in a single function updating the dict at the end and returning it:</p>
<pre><code>def store():
    store_dict = {}
    values = []
    while True:
        try:
            inp = int(input("Enter any amount of numbers or -9999 to quit: "))
            if inp == -9999:
                break
            values.append(int(inp))
        except ValueError:
            print("Invalid input")
    pos = [x for x in values if x &gt; 0]
    non = [i for i in values if i &lt; 1] 
    # catch cases where user does not enter a mixture of pos and negative nums of break on the first iteration
    # if values etc.. will all evaluate to False for an empty list
    store_dict["all"] = sum(values) / len(values) if values else 0
    store_dict["pos"] = sum(pos) / len(pos) if pos else 0
    store_dict["def"] = sum(non) / len(non) if non else 0
    return store_dict

print(store())
</code></pre>
<p>Because you are using <code>python3.4</code> we can also let the <a href="https://docs.python.org/3/library/statistics.html" rel="nofollow">statistics module</a> handle the averaging:</p>
<pre><code>from statistics import mean

def store():
    store_dict = {}
    values = []
    while True:
        try:
            inp = int(input("Enter any amount of numbers or -9999 to quit: "))
            if inp == -9999:
                break
            values.append(int(inp))
        except ValueError:
            print("Invalid input")
    pos = [x for x in values if x &gt; 0]
    non = [i for i in values if i &lt; 1]
    store_dict["all"] = mean(values) if values else 0
    store_dict["pos"] = mean(pos) if pos else 0
    store_dict["def"] = mean(non) if non else 0
    return store_dict
</code></pre>
<p>As per your comment if you want a the dict and the list returned you can return both and unpack:</p>
<pre><code>def store():
        store_dict = {}
        values = []
        while True:
            try:
                inp = int(input("Enter any amount of numbers or -9999 to quit: "))
                if inp == -9999:
                    break
                values.append(int(inp))
            except ValueError:
                print("Invalid input")
        pos = [x for x in values if x &gt; 0]
        non = [i for i in values if i &lt; 1]
        store_dict["all"] = mean(values) if values else 0
        store_dict["pos"] = mean(pos) if pos else 0
        store_dict["def"] = mean(non) if non else 0
        return store_dict,values

d, vals = store() # unpack 
print(d, vals)
</code></pre>
</div>
<span class="comment-copy"><code>average = sum(pos) / len(pos)</code> keeps calculating the average needlessly, you should move it outside the loop</span>
<span class="comment-copy">Thank you.  How do I get it to print the values in store?  If I add a line to print(store()) it prompts me for more numbers and prints the average of those numbers?</span>
<span class="comment-copy">This has been helpful.  I didn't include the full instructions, but it asks for 3 functions for averages and two print lines, one for the whole list of entries, and one for the dictionary of averages.  If I add two print lines: print(numList()) and print(store()), it  asks for numbers a 2nd time and uses the second set of inputs for the store averages.  Is there a way to get it to print both from the same data?</span>
<span class="comment-copy">so you want a list of all values and the dict?</span>
<span class="comment-copy">Never mind.  I figured it out.  I was reading the instructions wrong.  I didn't need separate functions for each average.  I created 2 functions, one to get the number list and a second to create the dictionary.</span>
<span class="comment-copy">@jbeast, the last example I added does both at the same time</span>
