<div class="post-text" itemprop="text">
<p>I have a problem with understanding how data is exchanged between processes (multiprocessing implementation). It behaves as parameters are passed as reference (or copy - depends whether it is mutable or imutable variable). If so, how it is achieved between processes?</p>
<p>Below examplary code is understandable for me if it is executed within one process (ConsumerProcess is a thread not a process for instance) but how does it work if it is exercised within 2 separate processes?</p>
<pre><code>tasks = Queue()
consumerProcess = ConsumerProcess(tasks)  # it is subprocess for main
tasks.put(aTask)  # why does it behave as reference?
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>multiprocessing</code> library either lets you use shared memory, or in the case your <code>Queue</code> class, using a manager service that coordinates communication between processes.</p>
<p>See the <a href="https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes" rel="nofollow"><em>Sharing state between processes</em></a> and <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing-managers" rel="nofollow"><em>Managers</em></a> sections in the documentation.</p>
<p>Managers use <a href="https://docs.python.org/3/library/multiprocessing.html#proxy-objects" rel="nofollow"><em>Proxy objects</em></a> to represent state in a process. The <code>Queue</code> class is such a proxy. State is then shared via <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow"><code>pickle</code>d states</a>:</p>
<blockquote>
<p>An important feature of proxy objects is that they are picklable so they can be passed between processes. </p>
</blockquote>
</div>
<span class="comment-copy">What are the practical implications you are concerned about?</span>
<span class="comment-copy">Thanks. This shed some light on this topic. More less I understand :-)</span>
<span class="comment-copy">So this is under the hood never a way to achieve the passing of paramters by reference, right?! Implicitly, even huge objects are still serialized and passed around by value?</span>
<span class="comment-copy">@BaluJr.: exactly; they can't be passed to a subprocess otherwise. Note that globals created <i>before</i> you start a process pool (before the process is forked), are available to child processes too, but are independent from that point onwards. Creating large objects that don't need to be shared between processes this way can speed things up a little.</span>
<span class="comment-copy">@MartijnPieters But as they are independent from this moment on, doesn't that also mean that there are again multiple copies of the files in memory? (One 2GB Array processed by 8 processes would still becomes 16GB)</span>
<span class="comment-copy">@BaluJr.: yes, you'd still have copies. The memory is shared at first, but copy-on-write and Python's reference counting just about guarantees that you'll have a copy on first access.</span>
