<div class="post-text" itemprop="text">
<p>I'm trying to check modulo of a number against a tuple of numbers, if the modulo is equals to one of the values in the tuple I want to return True else return False.</p>
<p>This is what I had tried so far:</p>
<pre><code>def check(y):
    k = (2, 5, 8, 10, 13, 16, 19, 21, 24, 27, 29)
    for i in range(0, len(k)):
        if k[i] == y % 30:
            return True
        else:
            return False


def main():
    print(check(1439))

main()
</code></pre>
<p>It always returns false.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is always returning false as only first item is checked. If first item is a match then it will return true. For example, if <code>y</code> is 32 then it will return true. You need to return false after checking all values, i.e. outside of for loop. Or a better solution is to use <code>in</code> operator. </p>
<pre><code>def check(y):
    k = (2, 5, 8, 10, 13, 16, 19, 21, 24, 27, 29)
    return y % 30 in k
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It always returns false because this code:</p>
<pre><code>for i in range(0, len(k)):
    if k[i] == y % 30:
        return True
    else:
        return False
</code></pre>
<p>returns true or false based only on the <em>first</em> item in the array, because it returns in <em>both</em> possible code paths. Either <code>k[0] == y % 30</code> and it returns true, or <code>k[0] != y % 30</code> and it returns false.</p>
<p>If you want to use this loop-based solution, you need to check <em>every</em> item in the array, returning true immediately if it matches, otherwise returning false <em>only</em> after the list is exhausted, something like (using the <code>for n in k</code> variant of the loop since the index is irrelevant here):</p>
<pre><code>for n in k:
    if n == y % 30:
        return True
return False
</code></pre>
<p>The full program is thus:</p>
<pre><code>def check(y):
    k = (2, 5, 8, 10, 13, 16, 19, 21, 24, 27, 29)
    for n in k:
        if n == y % 30:
            return True
    return False

def main():
    print(check(1439))
    print(check(36))

main()
</code></pre>
<p>with the first call producing true as <code>1439 % 30 == 29</code> (in the list) but the second giving false because <code>36 % 30 == 6</code> (not in the list).</p>
<p>Of course, there's a far more Pythonic way to achieve this:</p>
<pre><code>def check(y):
    k = (2, 5, 8, 10, 13, 16, 19, 21, 24, 27, 29)
    return any (x == y % 30 for x in k)
</code></pre>
<p>That basically finds any element in <code>k</code> for which that element is equal to <code>y % 30</code>. See <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow">this link</a> for more information on the Python <code>any</code> operation, and you'll see instantly the equivalent code given is remarkably similar to your loop:</p>
<pre><code>def any(iterable):
    for element in iterable:
        if element:
            return True
    return False
</code></pre>
<p>But, of course, it turns out to be unnecessary to use <code>any</code> in this particular case as <code>y % 30</code> is effectively a <em>fixed</em> value in the context of searching through the list. Instead, you can opt for the much simpler:</p>
<pre><code>def check(y):
    k = (2, 5, 8, 10, 13, 16, 19, 21, 24, 27, 29)
    return (y % 30) in k
</code></pre>
<p>leaving the <code>any</code> variant for more complex comparisons not easily doable, such as only checking even numbers from the list:</p>
<pre><code>def check(y):
    k = (2, 5, 8, 10, 13, 16, 19, 21, 24, 27, 29)
    return any (x == y % 30 for x in k if x % 2 == 0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can accomplish this with a generator expression inside <code>any()</code>:</p>
<pre class="lang-py prettyprint-override"><code>def check(y):
  return any(n == y % 30 for n in k)
</code></pre>
<p>This builds an iterator of booleans that is true for all elements of k that are divisors of <code>y</code>.</p>
</div>
<span class="comment-copy">Thanks taskinoor.</span>
<span class="comment-copy">I think that should be <code>==</code> rather than <code>=</code>, yes?</span>
<span class="comment-copy">@paxdiablo Yep. Had Ada on the brain and didn't switch back to Python.</span>
