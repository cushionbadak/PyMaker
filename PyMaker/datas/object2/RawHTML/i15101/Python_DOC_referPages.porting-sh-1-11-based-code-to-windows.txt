<div class="post-text" itemprop="text">
<p>All signs seem to indicate that my script is fully operational within a Linux environment and as far as I can tell, the only thing keeping it from working in Windows is my usage of <a href="https://pypi.python.org/pypi/sh" rel="nofollow"><strong>sh</strong></a>, which is pretty straightforward:</p>
<pre><code>from sh import convert

convert(inputfile, '-resize', r, '-quality', q, '-strip', outputfile)
</code></pre>
<p>This translates to a bash line:</p>
<pre><code>convert image.jpg -resize 350x350 -quality 80 -strip ./small/export.jpg
</code></pre>
<p>where the <code>r</code> and <code>q</code> variables are any given resolution or quality.</p>
<hr/>
<p>Running this in Windows of course raises an error because 'sh' is completely non-functional in Windows :( I tried replacing 'sh' with the deprecated <a href="https://pypi.python.org/pypi/pbs" rel="nofollow"><strong>pbs</strong></a>, but am not having any luck. This is what I've got so far:</p>
<pre><code>import pbs

pbs.convert('-resize', r, '-quality', q, '-strip', inputfile, outputfile)
</code></pre>
<p>The error being raised is:</p>
<pre><code>  File "C:\Python27\lib\site-packages\pbs.py", line 265, in _create
    if not path: raise CommandNotFound(program)
pbs.CommandNotFound: convert
</code></pre>
<hr/>
<p><strong>Question:</strong></p>
<blockquote>
<p><strong>How do I successfully pass these ImageMagick commands from my script while in a Windows environment?</strong></p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Following <a href="https://stackoverflow.com/users/1231827/kevin-brotcke">Kevin Brotcke</a>'s <a href="https://stackoverflow.com/a/36004813/110488">answer</a>, this is the hack we went with:</p>
<pre><code>try:
    import sh
except ImportError:
    # fallback: emulate the sh API with pbs
    import pbs
    class Sh(object):
        def __getattr__(self, attr):
            return pbs.Command(attr)
    sh = Sh()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>pbs.CommandNotFound</code> error message is because pbs does not have a <code>convert</code> method. Instead you need to use the <code>Command</code> method:</p>
<pre><code>import pbs
convert = pbs.Command('convert')
</code></pre>
<p>Now you can use it similar to <code>sh</code>:</p>
<pre><code>convert(inputfile, '-resize', r, '-quality', q, '-strip', outputfile)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sub process is your best bet. While, as you said it isn't the easiest to learn, it is really useful. I would look at <a href="http://jimmyg.org/blog/2009/working-with-python-subprocess.html" rel="nofollow">this indepth tutorial</a>. Of course, read <a href="https://docs.python.org/2/library/subprocess.html" rel="nofollow">the docs</a> too. </p>
<p>As to your specific problem, <code>sh</code> has been around longer than pbs, so it almost certainly has more functions. Looking through the source (<code>pbs.py</code>), I found no function named <code>convert()</code>. Also, you changed the arguments you called from <code>sh</code> to <code>pbs</code> (you didn't put an <code>inputfile</code>). Finally, there is no function named <code>convert()</code> in <code>sh.py</code> from the git repo, so I suspect you are confusing it with convert from something else.</p>
<p>Beyond that, you should be able to use <code>pbs</code> and <code>subprocess</code> in conjunction.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">use stdlib's <code>subprocess</code> module</a>, to run the command on Windows:</p>
<pre><code>#!/usr/bin/env python
from subprocess import check_call

check_call(r'c:\path\to\ImageMagick\convert.exe image.jpg -resize 350x350 -quality 80 -strip small\export.jpg')
</code></pre>
<p>It is important to provide the full path with the file extension otherwise a <a href="https://stackoverflow.com/q/24789749/4279">different <code>convert</code> command may be chosen</a>.</p>
<p><code>check_call()</code> raises an exception if <code>convert</code> exits with non-zero status. You could use <code>subprocess.call()</code> and check the status manually instead.</p>
</div>
<span class="comment-copy">why not use subprocess and popen or call?</span>
<span class="comment-copy">@IronManMark20: I'm trying to make sense of how to use those. subprocess seems like the right direction, but it isn't as noob-friendly as sh was.</span>
<span class="comment-copy">Thanks! Also adding <code>if hasattr(self, attr): return getattr(self, attr)</code>  in <code>__getattr__</code> retains access to the Command classes via <code>sh</code></span>
