<div class="post-text" itemprop="text">
<p>can anyone is help me with that:</p>
<p>I need to find all words from list containing letters [t OR d] AND [k OR c] but not any of [s,z,n,m]</p>
<p>I figured out first part, but don't know how to include stop list:</p>
<pre><code>\w*[t|d]\w*[k|c]\w*
</code></pre>
<p>in Python notation</p>
<p>Thank you in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>Based on answer of <a href="https://stackoverflow.com/users/2141635/padraic-cunningham">Padraic</a></p>
<p><strong>EDIT</strong> We both missed this condition </p>
<blockquote>
<p>[t OR d] AND [k OR c]</p>
</blockquote>
<p>So - fixed accordingly</p>
<pre><code>s = "detected dot knight track"

allowed = ({"t","d"},{"k","c"})
forbidden = {"s","z","n", "m"}

for word in s.split():
    letter_set = set(word)
    if all(letter_set &amp; a for a in allowed) and letter_set - forbidden == letter_set:
        print(word)
</code></pre>
<p>And the result is</p>
<pre><code>detected
track
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use 2 steps. First find t|d AND k|c, then filter out matches with  unwanted letters.</p>
<p>Since you said you figured out first part, here is the second:</p>
<pre><code>matches = [i for i in matches if not re.search(r'[sznm]', i)]    
print(matches) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you need the <code>t or d</code> appearing before <code>k or c</code>, use : <code>[^sznm\s\d]*[td][^sznm\s\d]*[kc][^sznm\s\d]*</code>.</p>
<p><code>[^sznm\s\d]</code> means any character except <code>z, n, m, s</code>, whitespace characters (<code>\s</code>) or numbers (<code>\d</code>).</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>s = "foobar foo".split()

allowed = ({"k", "c"}, {"r", "d"})
forbid = {"s","c","z","m"}

for word in s:
    if all(any(k in st for k in word) for st in allowed) and all(k not in forbid for k in word):
        print(word)
</code></pre>
<p>Or using a list comp with set.intersection:</p>
<pre><code>words = [word for word in s if all(st.intersection(word) for st in allowed) and not denied.intersection(word)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use this code:</p>
<pre><code>import re
re.findall('[abcdefghijklopqrtuvwxy]*[td][abcdefghijklopqrtuvwxy]*[kc][abcdefghijklopqrtuvwxy]*', text)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to use lookarounds.</p>
<pre><code>^(?=.*[td])(?!.*[sznm])\w*[kc]\w*$
</code></pre>
<p>ie, </p>
<pre><code>&gt;&gt;&gt; l = ['fooktz', 'foocdm', 'foobar', 'kbard']
&gt;&gt;&gt; [i for i in l if re.match(r'^(?=.*[td])(?!.*[sznm])\w*[kc]\w*$', i)]
['kbard']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I really like the answer by @padraic-cunningham that does not make use of re, but here is a pattern, which will work:</p>
<pre><code>pattern = r'(?!\w*[sznm])(?=\w*[td])(?=\w*[kc])\w*'
</code></pre>
<p>Positive <code>(?=...)</code> and negative <code>(?!...)</code> lookahead assertions are well documented on <a href="https://docs.python.org/3/library/re.html" rel="nofollow">python.org</a>.</p>
</div>
<span class="comment-copy">an example and your expected result would be helpful</span>
<span class="comment-copy"><code>if (re.search('[td]', input) or re.search('[kc]', input)) and not re.search('[sznm]', input)</code></span>
<span class="comment-copy">Note that your current regex will only find words where <code>t</code> or <code>d</code> appears before <code>k</code> or <code>c</code> - is that what you want?</span>
<span class="comment-copy">What do you mean by <code>[t OR d]</code>? Would <code>tried</code> be a match?</span>
<span class="comment-copy">Thank you, regex was not feasible idea in long run</span>
<span class="comment-copy">[^sznm] is not equal to <b>all letters except s, z, n, m</b> this is mean that word can containing signs spaces and ...</span>
<span class="comment-copy">yep, thus the precision, but I added white space and numbers</span>
<span class="comment-copy">ok, new suggested pattern is more acceptable but not excepted signs.</span>
<span class="comment-copy">Your solution is working, but it made whole a bit complicated (it's just my issue), so I decided to avoid regex - thank you</span>
