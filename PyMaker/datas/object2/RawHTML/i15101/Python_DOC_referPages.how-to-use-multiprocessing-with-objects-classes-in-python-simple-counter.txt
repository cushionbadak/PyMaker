<div class="post-text" itemprop="text">
<p>I want speed up program in Python with use true multi threading. As I learned I need to use multiprocessing since threading produced threads on one cpu what is not need and slows down my program.</p>
<p>First of all I want to write simple working program using multiprocessing to modify object instance.</p>
<p>Let it be counter since simple to explain what counter should.</p>
<pre><code># coding=utf-8
import multiprocessing
import copy_reg
import types

def pickle_method(method):
  # instance method
  if method.im_self is not None:
    return getattr, (method.im_self, method.im_func.func_name)
  # class method
  else:
    return getattr, (method.im_class, method.im_func.func_name)

copy_reg.pickle(types.MethodType, pickle_method)

COUNTS = 10

class Counter(object):
  def __init__(self):
    self.counter = 0

  def count_thread(self):
    # how to lock it?
    # how to share it?
    self.counter += 1

  def count(self):
    max_threads = multiprocessing.cpu_count()
    pool = multiprocessing.Pool(max_threads)
    for i in range(COUNTS):
      # send to execute but how to lock?
      pool.apply_async(self.count_thread)
    pool.close()
    pool.join()

def main():
  counter = Counter()
  counter.count()
  assert counter.counter == COUNTS, (counter.counter)

if __name__ == '__main__':
    main()
</code></pre>
<p>The result of this program is not what I want or except (should be COUNTS = 10):</p>
<pre><code>Traceback (most recent call last):
  File "C:/root/Dropbox/Private/PyCharm/learn_thread/thread_class_run.py", line 40, in &lt;module&gt;
    main()
  File "C:/root/Dropbox/Private/PyCharm/learn_thread/thread_class_run.py", line 37, in main
    assert counter.counter == COUNTS, (counter.counter)
AssertionError: 0
</code></pre>
<p>How can I simply - please help:</p>
<ol>
<li>Pass object to other "processes/threads"?</li>
<li>Lock object variable in other "processes/threads"?</li>
</ol>
<p>I am good at threading/parallelism but has no idea how to do it with <strong>Python</strong> threading (rather multiprocessing) - it looks that is possible.</p>
</div>
<div class="post-text" itemprop="text">
<p>multiprocessing is not threading so your example does not quite do what you expect it to do. <code>multiprocessing</code> uses fork, so your child processes runs fine doing job on their copy of your object and then exiting discarding the changes. </p>
<p>What you could do is to use <code>callback</code> on <code>apply_async</code> to gain some visibility into what's going on, but you can't just share your member variable. You can share state between processes by using <a href="http://%20https://docs.python.org/2/library/multiprocessing.html#sharing-state-between-processes" rel="nofollow">value, array or manager</a> as mentioned in the comments.</p>
<p>So just to reiterate, if you want threading use threadig (it's still there), but if you want parallelization then you have to use multiprocessing in Python but then you will have to adjust your design as you don't have same access to your subprocesses as you do with threads.</p>
<p>edit: also you can use the <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.AsyncResult" rel="nofollow">result</a> object returned from <code>apply_async</code> to fetch a result, which will most likely give you what you want.</p>
<p>Hope this helps.</p>
</div>
<span class="comment-copy">The best course of action to get true parallelism would be to <i>not</i> modify any object with multithreading. Instead use things like <code>multiprocessing.map</code> that return values...</span>
<span class="comment-copy">If you absolutely think you need to share state over processes, you should look into <a href="https://docs.python.org/3/library/multiprocessing.html#managers" rel="nofollow noreferrer"><code>multiprocessing.Manager</code></a></span>
<span class="comment-copy">I try both solution whatever I think that is not problem with code modification if something should be multi threaded.</span>
<span class="comment-copy">Not code modification but mutable <b>values</b>.</span>
<span class="comment-copy">What is called in Python <b>threading</b> is not true threading since it runs on ONE CORE - I want use <b>multiprocessing</b> to USE ALL CORES. I tested treading and result is bad 8 threads gives 140s time and 1 thread 40s so it mean that I will not use it anymore.</span>
<span class="comment-copy">correct, but multiprocessing are separate processes that don't share the memory unless you explicitly do that - links included in answer. what's the output of your processing? you can try to return that and then just collate the results through series of callbacks or results objects from async calls</span>
<span class="comment-copy">also threading does not necessarily run on one core... but no more than one thread runs at a time: <a href="https://wiki.python.org/moin/GlobalInterpreterLock" rel="nofollow noreferrer">wiki.python.org/moin/GlobalInterpreterLock</a></span>
<span class="comment-copy">It is <b>word play</b> "also threading does not run on one core" indeed true whatever no use here - matter if all cores will be used :)</span>
<span class="comment-copy">if you want any more help, i'm afraid you would have to edit your question with more details as right now it's just XY problem...</span>
