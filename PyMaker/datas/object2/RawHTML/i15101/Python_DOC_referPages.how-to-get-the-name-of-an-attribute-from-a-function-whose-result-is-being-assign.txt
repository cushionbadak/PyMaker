<div class="post-text" itemprop="text">
<p>The question may be a bit convoluted, but let me give an example. PyQt does what I'm asking for in the <code>pyqtSignal</code> function. You can do this:</p>
<pre><code>class Foo():
  some_attr = pyqtSignal()
</code></pre>
<p><code>pyqtSignal</code> has a keyword argument called <code>name</code>. It's optional, and if omitted the name of the attribute is used (in this case <code>some_attr</code>). I want to replicate that behavior. Any ideas on how I can do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>This was really killing me here for a while. So I tried something just for the fun of it.</p>
<p>Anyhow, my idea was that I should grab the line with code of the caller, and then compare that line to a list of all local names of the frame the call originated from. If I'd get a hit, that means that variable of local namespace is the one that called my class.</p>
<p>However, issues start when you have to start considering, what exactly is a proper match and what isn't. That boils down to a parsing/matching problem. It's likely a strong regex that looks for assignment operator <code>=</code> could do the trick? I just did it with <code>find</code> string comparison function in python because I'm lazy</p>
<p>But like I said, I find all this little wonky and strange...</p>
<p>Here's an example code of how a function retrieves the name of a variable/attribute that the result of called function is assigned to.</p>
<pre><code>import inspect

def call():
    frame = inspect.currentframe()
    caller_code = inspect.getframeinfo(frame.f_back).code_context[0].strip()
    names = frame.f_back.f_code.co_names
    caller_name = [name for name in names
                   if caller_code.find(name)+1 and name!="call" ]
    return caller_name

class Test():
  attr1 = "sad"      
  def __init__(self):
    self.attr = call()
    self.attr2 = "sda"

class Test2():
  attr = call()
  attr1 = "adsa"
  attr3 = "sas"
  attr4 = call()
</code></pre>
<p>Output of this is </p>
<pre><code>&gt;&gt;&gt; t = Test()
&gt;&gt;&gt; t.attr
['attr']

&gt;&gt;&gt; Test2.attr
['attr']
&gt;&gt;&gt; Test2.attr4
['attr', 'attr4']
</code></pre>
<p>Obviously, <code>find</code> matches <code>attr</code>, and <code>attr4</code> because in names we have both of them and <code>find</code> just looks for the first and last matching index and would find a hit even in "nnnaattrnnnnnn".</p>
<p>I do have to mention I doubt they did it the hammer to forehead style I did it in.... (I've not even tried experimenting with multiple assignemets, generator expressions, and other wild context in which your a variable could possibly be found)</p>
</div>
<span class="comment-copy">Start with <a href="https://docs.python.org/3/library/inspect.html" rel="nofollow noreferrer"><code>inspect</code></a>.</span>
<span class="comment-copy">already did, no luck so far</span>
<span class="comment-copy">Then where is your code, and what exactly is the problem with it?</span>
<span class="comment-copy">the problem is that I'm not able to find a reliable way to get the name. I know that the name itself is stored in <code>frame.f_back.f_code.co_names</code> but haven't found a way to determine the proper index of that tuple</span>
<span class="comment-copy">Your code you're missing inheritance from <code>QObject</code>. Locate how they implemented this weird weird <a href="http://python-3-patterns-idioms-test.readthedocs.org/en/latest/Factory.html" rel="nofollow noreferrer">factory</a> in source and try to make sense out of it perhaps. I find this really strange, and less explicit than it probably should be. What you're looking for is in the <a href="http://pyqt.sourceforge.net/Docs/PyQt4/qobject.html#setProperty" rel="nofollow noreferrer">setProperty</a> method.</span>
