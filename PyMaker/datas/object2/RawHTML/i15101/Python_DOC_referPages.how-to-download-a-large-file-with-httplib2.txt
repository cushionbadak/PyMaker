<div class="post-text" itemprop="text">
<p>Is it possible to download a large file in chunks using httplib2. I am downloading files from a Google API, and in order to use the credentials from the google OAuth2WebServerFlow, I am bound to use httplib2.</p>
<p>At the moment I am doing:</p>
<pre><code>flow = OAuth2WebServerFlow(
    client_id=XXXX,
    client_secret=XXXX,
    scope=XYZ,
    redirect_uri=XYZ
)

credentials = flow.step2_exchange(oauth_code)

http = httplib2.Http()
http = credentials.authorize(http)

resp, content = self.http.request(url, "GET")
with open(file_name, 'wb') as fw:
    fw.write(content)
</code></pre>
<p>But the <code>content</code> variable can get more than 500MB.</p>
<p>Any way of reading the response in chunks?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could consider <a href="https://github.com/madlag/streaming_httplib2" rel="nofollow noreferrer">streaming_httplib2</a>, a fork of httplib2 with exactly that change in behaviour.</p>
<blockquote>
<p>in order to use the credentials from the google OAuth2WebServerFlow, I am bound to use httplib2.</p>
</blockquote>
<p>If you need features that aren't available in httplib2, it's worth looking at how much work it would be to get your credential handling working with another HTTP library. It may be a good longer-term investment. (e.g. <a href="https://stackoverflow.com/questions/16694907/how-to-download-large-file-in-python-with-requests-py">How to download large file in python with requests.py?</a>.)</p>
</div>
<div class="post-text" itemprop="text">
<p>About reading response in chunks (works with httplib, must work with httplib2)</p>
<pre><code>import httplib
conn = httplib.HTTPConnection("google.com")
conn.request("GET", "/")
r1 = conn.getresponse()

try:
    print r1.fp.next()
    print r1.fp.next()
except:
    print "Exception handled!"
</code></pre>
<p>Note: <code>next()</code> may raise <code>StopIteration</code> exception, you need to handle it. </p>
<p>You can avoid calling <code>next()</code> like this</p>
<pre><code>F=open("file.html","w")
for n in r1.fp:
    F.write(n)
    F.flush()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can apply oauth2client.client.Credentials to a urllib2 request.</p>
<p>First, obtain the <code>credentials</code> object. In your case, you're using:</p>
<pre><code>credentials = flow.step2_exchange(oauth_code)
</code></pre>
<p>Now, use that object to get the auth headers and add them to the urllib2 request:</p>
<pre><code>req = urllib2.Request(url)
auth_headers = {}
credentials.apply(auth_headers)
for k,v in auth_headers.iteritems():
  req.add_header(k,v)
resp = urllib2.urlopen(req)
</code></pre>
<p>Now <code>resp</code> is a file-like object that you can use to read the contents of the URL</p>
</div>
<span class="comment-copy">Does it work? Do you get any errors?</span>
<span class="comment-copy">It works, but its not ok to have 500MB variables</span>
<span class="comment-copy">Under Python 3.4 this works: <a href="https://docs.python.org/3/library/http.client.html#examples" rel="nofollow noreferrer">docs.python.org/3/library/http.client.html#examples</a></span>
<span class="comment-copy">Does it have to be <code>httplib2</code>? <a href="http://stackoverflow.com/a/16696317/831531">stackoverflow.com/a/16696317/831531</a></span>
<span class="comment-copy">yes in order to use the authorization from google's oauth library</span>
