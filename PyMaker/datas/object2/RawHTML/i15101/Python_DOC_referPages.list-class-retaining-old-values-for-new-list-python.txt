<div class="post-text" itemprop="text">
<p>I have created a list class with a few simple methods.</p>
<pre><code>class ListQ(object):
    """List object creation"""
    def __init__(self, earlier_list=[]):
        self.list=earlier_list

    def isEmpty(self):
        """checks if list is empty"""
        if len(self.list)==0:
            return(True)
        else:
            return(False)

    def put(self, new_item):
        """puts new_item last in list"""
        self.list.append(new_item)

    def get(self):
        """returns the next item in line"""
        self.first_item = self.list.pop(0)
        return self.first_item
</code></pre>
<p>I also have a function to help create these lists. (Helping to solve a magic card trick btw)</p>
<pre><code>def create_card_list(card_list=None):
    """creates listQ of cards from user input"""
    if card_list!=None: #if user already has list of cards
        for item in card_list:
            item=replace_card_strings(item) #replaces any strings in list
            if item == False:
                print('One of your cards does not exist, list creation failed')
                return(False)
        cards=ListQ(card_list)
</code></pre>
<p>The replace_card_strings() function has been properly tested and I do not believe it's at fault but here it is anyway.</p>
<pre><code>def replace_card_strings(word):
    """replaces strings of words with their numbers and returns edited list"""
    if type(word)!=int:
        if word.lower()=='one':
            word=1
        elif word.lower()=='two':
            word=2
        elif word.lower()=='three':
            word=3
        elif word.lower()=='four':
            word=4
        elif word.lower()=='five':
            word=5
        elif word.lower()=='six':
            word=6
        elif word.lower()=='seven':
            word=7
        elif word.lower()=='eight':
            word=8
        elif word.lower()=='nine':
            word=9
        elif word.lower()=='ten':
            word=10
        elif word.lower()=='jack':
            word=11
        elif word.lower()=='queen':
            word=12
        elif word.lower()=='king':
            word=13
        elif word.lower()=='ace':
            word=1
        else:
            word=False #if card doesnt exist
    return(word)
</code></pre>
<p>When I run the following test is when the problem start.</p>
<pre><code>cards=create_card_list(['one', 2, 3])
one=cards.get()
two=cards.get()
three=cards.get()
print(one, two, three)
if one==1 and two==2 and three==3:
    print("create_card_list gives the correct answer")
else:
    print("create_card_list gives the wrong answer")
</code></pre>
<p>It prints that the function has given the wrong answer and
the <code>print(one, two, three)</code> prints <code>one 2 3</code> which is the original list.</p>
<p>Anybody have an idea where I've messed up?</p>
</div>
<div class="post-text" itemprop="text">
<p>You're not replacing items in the list, only in the loop's context:</p>
<p>Replace the entire loop:</p>
<pre><code>    for item in card_list:
        item=replace_card_strings(item) #replaces any strings in list
        ....
</code></pre>
<p>Which does not do anything to the list (it does <strong>not</strong> "replace" the item).</p>
<p>With python's <a href="https://docs.python.org/2/library/functions.html#map" rel="nofollow"><code>map</code></a> which is used in order to apply a function to an iterable and create a list of results:</p>
<pre><code>card_list = map(replace_card_strings, card_list)
</code></pre>
<p>If you don't want to use <code>map</code> you can use <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>:</p>
<pre><code>card_list = [replace_card_strings(card_str) for card_str in card_list]
</code></pre>
<p>Now you'll have:</p>
<pre><code>def create_card_list(card_list=None):
    """creates listQ of cards from user input"""
    if card_list != None:
        card_list = map(replace_card_strings, card_list)
    cards=ListQ(card_list)
</code></pre>
<p><strong>Tip:</strong></p>
<p>You can replace the lengthy function <code>replace_card_strings</code>:</p>
<pre><code>def replace_card_strings(word):
    """replaces strings of words with their numbers and returns edited list"""

    word = word.lower()

    string_to_int = {"one":1, "two":2 ...}

    return word in string_to_int and string_to_int[word]
</code></pre>
<p>This works since <a href="https://docs.python.org/3/reference/expressions.html#boolean-operations" rel="nofollow"><code>and</code></a> returns the last <code>Truth</code>-y result or the first <code>False</code>-y result.</p>
<p>You can also use <a href="https://docs.python.org/2/library/stdtypes.html#dict.get" rel="nofollow"><code>dict.get</code></a>:</p>
<pre><code># return word in string_to_int and string_to_int[word]
# try and read value from dict, return False otherwise
return string_to_int.get(word, False)
</code></pre>
<p>Which is cleaner (thanks @padraic).</p>
<p><strong>Tip 2:</strong> You don't want two places referencing, and possibly mutating, the same list. It seems like you're keeping a reference to the same list that's used to construct a card list outside the generated object. This is prone to errors. What you should do is instead copy the list when it's passed:</p>
<pre><code>def __init__(self, earlier_list=[]):
    self.list=earlier_list[:]
</code></pre>
<p><strong>Tip 3:</strong> python has a <a href="http://docs.python-guide.org/en/latest/writing/gotchas/#mutable-default-arguments" rel="nofollow">known "gotcha" with mutable default argument</a>, which is exactly what you use here (<code>earlier_list=[]</code>). This is prone to errors as well since python binds default arguments once. You should instead have:</p>
<pre><code>def __init__(self, earlier_list=None):
    # copy passed list or create a new one if none passed.
    self.list=earlier_list[:] if earlier_list else []
</code></pre>
</div>
<span class="comment-copy">You shouldn't have created the list class in the first place, since that is there already a list in Python.</span>
<span class="comment-copy">Yes, I know but the assignment is to create this class so I do not have a choice.</span>
<span class="comment-copy">Also, you <i>need</i> to copy the list in the ListQ constructor!</span>
<span class="comment-copy">Please fix your indentation - paste all the code, select all, control-K to format it as code.</span>
<span class="comment-copy">Thank you for your help!</span>
<span class="comment-copy">Thank you for your help both with the problem and the extra tip!</span>
<span class="comment-copy">I think <code>return string_to_int.get(word, False)</code> would be a bit nicer</span>
<span class="comment-copy">@PadraicCunningham thanks, added</span>
