<div class="post-text" itemprop="text">
<p>I wrote a system to exchange crc-checked struct data between an arduino nano and my python script. This is working pretty well but when i let the system run i get unexpected output on my python monitor (using pycharm)</p>
<p>print "Took ", (time.time() - timeout), " s" sometimes prints out Took  0.0  s.
Usually it prints Took  0.0160000324249  s.
Using win7-64bit professional.</p>
<p>From time doc : <em>Return the time in seconds since the epoch as a floating point number. Note that even though the time is always returned as a floating point number, not all systems provide time with a better precision than 1 second.</em></p>
<p>IÂ´m looking for something like millis() thats enough precision for my case</p>
<p>Code Python :</p>
<pre><code>import serial
import time
import binascii
import struct
from ctypes import *    

arduino = serial.Serial()
def receive_struct2():
  start = 0x85
  detected_start = False
  arduino.baudrate = 57600
  arduino.timeout = 0
  arduino.port = 'COM8'
  try:
    arduino.open()
  except serial.SerialException, e:
    print e

  while True:
     if(arduino.inWaiting() &gt;= 1 and detected_start == False):
        data = ord(arduino.read())
        if data == start:
          print "Detected begin"
          detected_start = True
        else: print chr(data),

     if arduino.inWaiting() &gt;= 1 and detected_start == True:
       message_length = ord(arduino.read())
       #print "Got message length ", message_length
       timeout = time.time()
       while time.time() - timeout &lt;= 0.3 and arduino.inWaiting() &lt;  message_length-1:pass
       print "Took ", (time.time() - timeout), " s"
       ....
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Summary: Use <a href="https://docs.python.org/2/library/timeit.html#timeit.default_timer" rel="nofollow noreferrer"><code>timeit.default_timer()</code></a> instead of <code>time.time()</code>, to measure a short duration.</p>
<hr/>
<p>16ms error for <code>time.time()</code> is not surprising on Windows.</p>
<p>Currently, Python uses <code>GetSystemTimeAsFileTime()</code> to implement <code>time.time()</code> on Windows that has  the resolution (precision) of 0.1ms (instead of <code>ftime()</code>'s 1ms) and the accuracy is between 0.5 ms and 15 ms (you could change it system-wide using <code>NtSetTimerResolution()</code>). See Python bug: <a href="http://bugs.python.org/issue13845" rel="nofollow noreferrer">Use <code>GetSystemTimeAsFileTime()</code> to get a resolution of 100 ns on Windows</a> and another SO question: <a href="https://stackoverflow.com/q/27830403/4279">How does python's time.time() method work?</a></p>
<p>A better alternative to measure short time intervals on Windows is to use <code>time.clock()</code> that is implemented using <code>QueryPerformanceCounter()</code> on Windows. For portability, you could use <a href="https://docs.python.org/2/library/timeit.html#timeit.default_timer" rel="nofollow noreferrer"><code>timeit.default_timer</code></a> that is assigned to <code>time.clock()</code> on Windows, <code>time.time()</code> on other systems, and it is <a href="https://docs.python.org/3/library/time.html#time.perf_counter" rel="nofollow noreferrer"><code>time.perf_counter()</code></a> since Python3.3. See <a href="https://stackoverflow.com/q/85451/4279">Python - time.clock() vs. time.time() - accuracy?</a></p>
</div>
<span class="comment-copy">unrelated: there should be a way to wait for I/O without a busy loop (<code>select()</code> analog on Windows) check aurdino API doc. A better way to implement a busy loop is to use a deadline: <code>deadline = timer() + 0.3; while timer() &lt; deadline and ...</code>. Note: there are different useful timer definitions: system-wide vs. process-wide value, known-origin vs. only relative values are useful, count sleep time and/or time in child processes or not, etc. For example read <a href="https://docs.python.org/3/library/time.html#time.monotonic" rel="nofollow noreferrer"><code>time.monotonic()</code>, <code>time.perf_counter()</code>, <code>time.process_time()</code>  definitions</a></span>
