<div class="post-text" itemprop="text">
<p>I have been trying to debug this for some time but I don't appear to be making any progress. </p>
<p>Why does the regex below not match the text provided?</p>
<p>Regex:</p>
<pre><code>'^(.*)============== TT ==============(.*)=================================================='
</code></pre>
<p>Text:</p>
<pre><code>'fasdfdsfadf\ndfassdflj\n============== TT ==============\nPlease add.\n=================================================='
</code></pre>
<p><code>re.search(x, editor_text)</code></p>
<p>will return <code>None</code></p>
<p>To my understanding the regex says return the first segment of text <code>(.*)</code> then look for the delimeter (===) and look for the 2nd segment of text <code>(.*)</code> and finish with delimeter.</p>
<p>Why does the regex not extract </p>
<p><code>fasdfdsfadf\ndfassdflj\n</code></p>
<p>and </p>
<p><code>\nPlease add.\n</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You need to use the <code>s</code> (<em>dotall</em>) modifier which forces the dot to match newline sequences.</p>
<p>Using it as an <a href="http://www.rexegg.com/regex-disambiguation.html#modifiers" rel="nofollow">inline</a> modifier:</p>
<pre><code>(?s)(.*)============== TT ==============(.*)==================================================
</code></pre>
<p><strong>Note:</strong> You can simplify the regular expression as follows:</p>
<pre><code>(?s)(.*)={14} TT ={14}(.*)={50}
</code></pre>
<p>Or including the flag inside your call to <code>re.search()</code>:</p>
<pre><code>re.search(x, editor_text, re.S)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also use the <a href="https://docs.python.org/3/library/re.html#re.DOTALL" rel="nofollow"><code>re.DOTALL</code></a> flag to match newline characters:</p>
<pre><code>re.search(x, editor_text, re.DOTALL)
</code></pre>
</div>
<span class="comment-copy">afaik <code>.</code> <b>does not</b> match newlines by default</span>
<span class="comment-copy">o i did not know you could use it like that... I always did <code>re.DOT_ALL</code> thats cool .... its neat when I learn new stuff :P</span>
<span class="comment-copy">P.S. you don't need the <code>^</code> anchor here.</span>
<span class="comment-copy">I still prefer to use re.DOTALL for its readability. (?iLmsux) always struck me as being a bit arcane.</span>
