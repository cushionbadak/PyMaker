<div class="post-text" itemprop="text">
<p>I am trying to pass a window over an image so I can get the average b,g,r pixel values inside the window (not really sure how to do this). </p>
<p>At the moment I am trying to get a window to pass over my image but on line 17 I get the error:</p>
<pre><code>Traceback (most recent call last):
  File "C:\Python27\bgr.py", line 17, in &lt;module&gt;
    pt2=(pt1.x+5,pt1.y+5)
AttributeError: 'tuple' object has no attribute 'x'
</code></pre>
<p>Any ideas?</p>
<p>Here is my code:</p>
<pre><code># import packages
import numpy as np
import argparse
import cv2
import dateutil
from matplotlib import pyplot as plt

bgr_img = cv2.imread('images/0021.jpg')
height, width = bgr_img.shape[:2]

#split b,g,r channels
#b,g,r = cv2.split(bgr_img)

for i in range(0,height):
  for j in range(0,width):
    pt1=(i,j)
    pt2=(pt1.x+5,pt1.y+5)
    point.append([pt1,pt2])
    cv2.rectangle(bgr_img,pt1,pt2,(255,0,0))

#cv2.imshow('image',bgr_img)          
#cv2.waitKey(0)
</code></pre>
<p>Thanks in advance :)</p>
</div>
<div class="post-text" itemprop="text">
<p>This line:</p>
<pre><code>pt1 = (i, j)  # I have added spaces per the style guide
</code></pre>
<p>assigns a new <strong>tuple</strong> object to the name <code>pt1</code> (see <a href="https://docs.python.org/2/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange" rel="nofollow">the docs</a>, <a href="https://docs.python.org/2/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow">the tutorial</a>). Tuples do not, by default, have an <code>x</code> or <code>y</code> attribute. You either need to access the first and second items in the tuple by index:</p>
<pre><code>pt2 = (pt1[0] + 5, pt1[1] + 5)  # note 0-based indexing
</code></pre>
<p>or to create a <a href="https://docs.python.org/2/library/collections.html#collections.namedtuple" rel="nofollow"><code>collections.namedtuple</code></a>, which allows you to define attributes:</p>
<pre><code>from collections import namedtuple

Point = namedtuple("Point", "x y")

pt1 = Point(i, j)
pt2 = Point(pt1.x + 5, pt1.y + 5)
</code></pre>
<hr/>
<p>That being said, as <code>i</code> and <code>j</code> are still in scope, the <em>easiest</em> thing to do would be simply:</p>
<pre><code>pt1 = (i, j)
pt2 = (i + 5, j + 5)
</code></pre>
<p>and even if they <em>weren't</em> still in scope you could <em>unpack</em> <code>pt1</code> (whether <code>tuple</code> or <code>namedtuple</code>), and use the separate <code>x</code> and <code>y</code>:</p>
<pre><code>x, y = pt1
pt2 = (x + 5, y + 5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because pt1 is a tuple and doesn't have <code>x</code> or <code>y</code> attributes . You probably want:</p>
<pre><code>pt2 = (pt1[0] + 5, pt1[1] + 5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are trying to access an <code>x</code> attribute in <code>pt1</code>, but <code>pt1</code> is a tuple and tuple have no <code>x</code> attribute. You could either</p>
<ul>
<li>Write a Custom Point class</li>
<li>Use a <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow">named tuple</a></li>
</ul>
<p>The second solution could look like the following:</p>
<pre><code>from collections import namedtuple
Point = namedtuple('Point', ['x', 'y'])
p1 = Point(i,j)
p2 = (pt1.x+5,pt1.y+5) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can't access plain tuples like that, you need to change </p>
<pre><code>pt2=(pt1.x+5,pt1.y+5)
</code></pre>
<p>to</p>
<pre><code>pt2=(pt1[0] + 5, pt1[0] + 5)
</code></pre>
<p>However, Python does have a <a href="https://docs.python.org/2/library/collections.html#namedtuple-factory-function-for-tuples-with-named-fields" rel="nofollow">namedtuple</a> which can be accessed via attributes; there's even a Point namedtuple example in the docs.</p>
<p>Here's a small example derived from the docs I linked to:</p>
<pre><code>#!/usr/bin/env python

from collections import namedtuple

Point = namedtuple('Point', ['x', 'y'])

p = Point(11, y=22)     # instantiate with positional or keyword arguments

print p[0] + p[1]       # indexable like the plain tuple (11, 22)

x, y = p                # unpack like a regular tuple
print x, y
print p.x + p.y         # fields also accessible by name

print repr(p)           # readable __repr__ with a name=value style
print tuple(p)
</code></pre>
<p><strong>output</strong></p>
<pre><code>33
11 22
33
Point(x=11, y=22)
(11, 22)
</code></pre>
</div>
