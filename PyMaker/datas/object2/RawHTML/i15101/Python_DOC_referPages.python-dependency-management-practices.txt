<div class="post-text" itemprop="text">
<p>Now I'm taking part in node.js project and i like "node way" of dependecy management. </p>
<p>I'll provide some examples for those who haven't worked with <code>npm</code></p>
<ul>
<li><code>npm install package_name --save</code> - installs <code>package_name</code> as <strong>production</strong> dependency</li>
<li><code>npm install package name --save-dev</code> - install <code>package_name</code> as development dependecy.</li>
</ul>
<p>All deps are stored in <code>package.json</code> file, which is indexed by version control system. When i clone repo, i just type <code>npm install</code> in terminal and it installs everything.
As far as i know, <code>pip freeze</code> is able to do it, but:</p>
<p>On production server I can type <code>npm install --production</code> and all my build tools, testing frameworks, etc. are not installed. Just production deps.</p>
<p>So, the question is:</p>
<p>How do you split production and development dependecies with pip(or other tool)?</p>
</div>
<div class="post-text" itemprop="text">
<p>I would create two <a href="https://virtualenv.pypa.io/en/latest/" rel="nofollow">virtualenvs</a> (<a href="https://docs.python.org/3/library/venv.html" rel="nofollow">venv</a> for Python 3) with a separate <code>requirements.txt</code> file for each, like <code>requirements-production.txt</code> and <code>requirements-develop.txt</code>, but that looks a bit strange to me.  </p>
<p>Personally, I usually use git's branches to separate production/development code.  Most of the development goes in the <code>develop</code> branch, there's a single <code>requirements.txt</code> (which can change over time, for sure). When everything's alright and/or the development cycle has ended, I just merge it with the <code>master</code> branch.  Haven't had a need to test different versions of dependencies simultaneously.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a nice solution, it is quite new tool, called <a href="https://github.com/pypa/pipenv" rel="nofollow noreferrer">pipenv</a>. Seems an analog of npm for python.</p>
</div>
<span class="comment-copy">Thank you very much, don't you think it needs too much manual work?</span>
<span class="comment-copy">@AlexeySidash Nah, it's pretty easy and fast, at least to me :) I also deploy projects using <a href="http://docs.fabfile.org" rel="nofollow noreferrer">fabric</a>, so it's even faster - actually, just a command: <code>fab deploy -R production</code>. It connects to the production servers by ssh, does <code>git pull</code> from the corresponding branch (<code>master</code>) and restarts whatever's in charge on the server (like uwsgi).</span>
<span class="comment-copy">Thanks for fabric. It looks nice!</span>
