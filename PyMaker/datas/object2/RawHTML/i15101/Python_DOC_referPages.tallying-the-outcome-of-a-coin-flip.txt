<div class="post-text" itemprop="text">
<p>I have written a little piece of code for modelling the outcome of a coin flip, and would like to find a better way of presenting the results than a list of consecutive coin flips. I'm one month into learning Python as part of my physics degree, if that helps provide some context.</p>
<p>Here's the code;</p>
<pre><code>from pylab import *

x=0
while x&lt;=100:

    num = randint(0,2)
    if num == 0:
        print 'Heads'
    else:
        print 'Tails'
    x=x+1
print 'Done'
</code></pre>
<p>What options do I have to present this data in an easier to interpret manner?</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of using a <code>while</code> loop and printing results to the screen, Python can do the counting and store the results very neatly using <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a>, a subclass of the built in dictionary container.</p>
<p>For example:</p>
<pre><code>from collections import Counter
import random

Counter(random.choice(['H', 'T']) for _ in range(100))
</code></pre>
<p>When I ran the code, it produced the following tally:</p>
<pre><code>Counter({'H': 52, 'T': 48})
</code></pre>
<p>We can see that heads was flipped 52 times and tails 48 times.</p>
<p>This is already much easier to interpret, but now that you have the data in a data structure you can also plot a simple bar chart. </p>
<p>Following the suggestions in a Stack Overflow answer <a href="https://stackoverflow.com/questions/16010869/python-plot-a-bar-using-matplotlib-using-a-dictionary">here</a>, you could write:</p>
<pre><code>import matplotlib.pyplot as plt

# tally = Counter({'H': 52, 'T': 48})

plt.bar(range(len(tally)), tally.values(), width=0.5, align='center')
plt.xticks(range(len(tally)), ['H', 'T'])
plt.show()
</code></pre>
<p>This produces a bar chart which looks like this:</p>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/zGg7h.png"/></p>
</div>
<span class="comment-copy">take a look at <code>matplotlib</code> module python</span>
<span class="comment-copy">Somewhat annoyingly,  <code>randint(a,b)</code> does <b>not</b> use the same argument convention as <code>range()</code> or <code>xrange()</code>.  <code>randint(a,b)</code> will return a random integer n: a &lt;= n &lt;= b. So your simulated coin is a bit wonky. :)</span>
<span class="comment-copy"><code>Counter</code> is neat. I've been using <code>defaultdict(lambda: 0)</code> all the time.</span>
<span class="comment-copy">Wow, thanks! I'm looking forward to putting this to use.</span>
