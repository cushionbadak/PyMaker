<div class="post-text" itemprop="text">
<p>I have a file </p>
<pre><code>gu|8
gt|5
gr|5
gp|1
uk|2
gr|20
gp|98
uk|1
me|2
support|6
</code></pre>
<p>And I want to have one number per TLD like:</p>
<pre><code> gr|25
 gp|99
 uk|3
 me|2
 support|6
 gu|8
 gt|5
</code></pre>
<p>and here is my code:</p>
<pre><code>f = open(file,'r')
d={}
for line in f:
    line = line.strip('\n')
    TLD,count = line.split('|')
    d[TLD] = d.get(TLD)+count

print d
</code></pre>
<p>But I get this error:</p>
<pre><code>    d[TLD] = d.get(TLD)+count
TypeError: unsupported operand type(s) for +: 'NoneType' and 'str'
</code></pre>
<p>Can anybody help?</p>
</div>
<div class="post-text" itemprop="text">
<p>To answer the title of your question: "how to sum values for the same key" - well, there is the builtin class called <code>collections.Counter</code> that is a perfect match for you:</p>
<pre><code>import collections
d = collections.Counter()
with open(file) as f:
    tld, cnt = line.strip().split('|')
    d[tld] += int(cnt)
</code></pre>
<p>then to write back:</p>
<pre><code>with open(file, 'w') as f:
    for tld, cnt in sorted(d.items()):
        print &gt;&gt; f, "%s|%d" % (tld, cnt)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Taking a look at the full traceback:</p>
<pre><code>Traceback (most recent call last):
  File "mee.py", line 6, in &lt;module&gt;
    d[TLD] = d.get(TLD) + count
TypeError: unsupported operand type(s) for +: 'NoneType' and 'str'
</code></pre>
<p>The error is telling us that we tried to add something of type <code>NoneType</code> to something of type <code>str</code>, which isn't allowed in Python.</p>
<p>There's only one object of type <code>NoneType</code>, which, unsurprisingly, is <a href="https://docs.python.org/3/library/constants.html?highlight=nonetype#None" rel="nofollow noreferrer"><code>None</code></a> – so we know that we tried to add a string to <code>None</code>.</p>
<p>The two things we tried to add together in that line were <code>d.get(TLD)</code> and <code>count</code>, and looking at the documentation for <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow noreferrer"><code>dict.get()</code></a>, we see that what it does is</p>
<blockquote>
<p>Return the value for <em>key</em> if <em>key</em> is in the dictionary, else <em>default</em>. If <em>default</em> is not given, it defaults to <code>None</code>, so that this method never raises a <code>KeyError</code>.</p>
</blockquote>
<p>Since we didn't supply a <em>default</em>, <code>d.get(TLD)</code> returned <code>None</code> when it didn't find <code>TLD</code> in the dictionary, and we got the error attempting to add <code>count</code> to it. So, let's supply a <em>default</em> of <code>0</code> and see what happens:</p>
<pre><code>f = open('data','r')
d={}
for line in f:
    line = line.strip('\n')
    TLD, count = line.split('|')
    d[TLD] = d.get(TLD, 0) + count

print d
</code></pre>
<pre><code>$ python mee.py
Traceback (most recent call last):
  File "mee.py", line 6, in &lt;module&gt;
    d[TLD] = d.get(TLD, 0) + count
TypeError: unsupported operand type(s) for +: 'int' and 'str'
</code></pre>
<p>Well, we've still got an error, but now the problem is that we're trying to add a string to an integer, which is also not allowed, because it would be <a href="https://stackoverflow.com/a/25675944/1014938">ambiguous</a>.</p>
<p>That's happening because <code>line.split('|')</code> returns a list of strings – so we need to explicitly convert <code>count</code> to an integer:</p>
<pre><code>f = open('data','r')
d={}
for line in f:
    line = line.strip('\n')
    TLD, count = line.split('|')
    d[TLD] = d.get(TLD, 0) + int(count)

print d
</code></pre>
<p>... and now it works:</p>
<pre><code>$ python mee.py 
{'me': 2, 'gu': 8, 'gt': 5, 'gr': 25, 'gp': 99, 'support': 6, 'uk': 3}
</code></pre>
<p>Turning that dictionary back into the file output you want is a separate issue (and not attempted by your code), so I'll leave you to work on that.</p>
</div>
<span class="comment-copy">It looks like you want us to write some code for you. While many users are willing to produce code for a coder in distress, they usually only help when the poster has already tried to solve the problem on their own. A good way to demonstrate this effort is to include the code you've written so far, example input (if there is any), the expected output, and the output you actually get (console output, stack traces, compiler errors - whatever is applicable). The more detail you provide, the more answers you are likely to receive.</span>
<span class="comment-copy">Did you at least try it?</span>
