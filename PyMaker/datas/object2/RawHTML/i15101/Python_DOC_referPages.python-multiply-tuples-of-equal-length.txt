<div class="post-text" itemprop="text">
<p>I was hoping for an elegant or effective way to multiply sequences of integers (or floats).</p>
<p>My first thought was to try <code>(1, 2, 3) * (1, 2, 2)</code> would result <code>(1, 4, 6)</code>, the products of the individual multiplications.</p>
<p>Though python isn't preset to do that for sequences. Which is fine, I wouldn't really expect it to. So what's the pythonic way to multiply (or possibly other arithmetic operations as well) each item in two series with and to their respective indices?</p>
<p>A second example <code>(0.6, 3.5) * (4, 4)</code> = <code>(2.4, 14)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>The simplest way is to use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> function, with a <a href="https://docs.python.org/2/reference/expressions.html#generator-expressions" rel="nofollow noreferrer">generator expression</a>, like this</p>
<pre><code>tuple(l * r for l, r in zip(left, right))
</code></pre>
<p>For example,</p>
<pre><code>&gt;&gt;&gt; tuple(l * r for l, r in zip((1, 2, 3), (1, 2, 3)))
(1, 4, 9)
&gt;&gt;&gt; tuple(l * r for l, r in zip((0.6, 3.5), (4, 4)))
(2.4, 14.0)
</code></pre>
<p>In Python 2.x, <a href="https://docs.python.org/2/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> returns a list of tuples. If you want to avoid creating the temporary list, you can use <a href="https://docs.python.org/2/library/itertools.html#itertools.izip" rel="nofollow noreferrer"><code>itertools.izip</code></a>, like this</p>
<pre><code>&gt;&gt;&gt; from itertools import izip
&gt;&gt;&gt; tuple(l * r for l, r in izip((1, 2, 3), (1, 2, 3)))
(1, 4, 9)
&gt;&gt;&gt; tuple(l * r for l, r in izip((0.6, 3.5), (4, 4)))
(2.4, 14.0)
</code></pre>
<p>You can read more about the differences between <code>zip</code> and <code>itertools.izip</code> in <a href="https://stackoverflow.com/q/4989763/1903116">this question</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are interested in element-wise multiplication, you'll probably find that many other element-wise mathematical operations are also useful.  If that is the case, consider using the <a href="http://docs.scipy.org/doc/numpy/user/index.html" rel="noreferrer"><code>numpy</code></a> library.</p>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; x = np.array([1, 2, 3])
&gt;&gt;&gt; y = np.array([1, 2, 2])
&gt;&gt;&gt; x * y
array([1, 4, 6])
&gt;&gt;&gt; x + y
array([2, 4, 5])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A simpler way would be:</p>
<pre><code>from operator import mul

In [19]: tuple(map(mul, [0, 1, 2, 3], [10, 20, 30, 40]))
Out[19]: (0, 20, 60, 120)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With list comprehensions the operation could be completed like</p>
<pre><code>def seqMul(left, right):
    return tuple([value*right[idx] for idx, value in enumerate(left)])

seqMul((0.6, 3.5), (4, 4))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>A = (1, 2, 3)
B = (4, 5, 6)    
AB = [a * b for a, b in zip(A, B)]
</code></pre>
<p>use itertools.izip instead of zip for larger inputs.</p>
</div>
<span class="comment-copy">Perhaps you should look into <code>numpy</code>, multiplication operator when used with two <code>numpy.arrays</code> would behave like you expect.</span>
<span class="comment-copy">@Akavall, Would you be willing you post a numpy example?</span>
<span class="comment-copy">@ThorSummoner: See my answer.</span>
<span class="comment-copy">@ThorSummoner Have you thought about accepting an answer?</span>
<span class="comment-copy">@VictorCastilloTorres That's tough, I don't feel qualified to say which if the three competing answers are most pythonic/elegant; Was hoping the upvotes would make that clear for me. I'm leaning tword thefourtheye's answer as of current due to its potential to work without an import, but that may not be a good reason at all.</span>
<span class="comment-copy">Nice, and can easily be extended to handle other binary operators. Although I think the OP might want <code>tuple(map(mul, seq1, seq2))</code>.</span>
<span class="comment-copy">@martineau Updated answer, Thanks!</span>
<span class="comment-copy">You're input and output don't match.  Specifically, you should end up with a <code>tuple</code>, not a <code>list</code> ;-)</span>
<span class="comment-copy">Can you post an itertools example? This exact zip + list comprehension sort of answer has already been posted by @thefourtheye</span>
<span class="comment-copy">@ThorSummoner, yes it is the same as the other answer, that was posted while I was writing my answer. for izip version <code>import itertools</code> and use <code>itertools.izip</code> instead of <code>zip</code>, otherwise it's exactly the same.</span>
