<div class="post-text" itemprop="text">
<p>When making superficial changes to a Python script (changing code-style/formatting/whitespace, for example), it's useful to be able to check if any logical changes were (accidentally) made to the code.</p>
<p>For C/C++ I generate assembler and diff it <em>(not 100% fool proof with platform specific <code>ifdef's</code>, but still useful)</em>. While I could binary diff a <code>pyc</code> file, this isn't so helpful in seeing what exactly changed.</p>
<p>Is there a convenient way to get some human-readable text output of the AST that can be checked for changes? </p>
<p>This may of course raise some false positives (replacing <code>str % bar</code> with <code>str.format(bar)</code>, for example), but I am still interested to know if some convenient ways exist.</p>
<hr/>
<p><strong>Background info</strong></p>
<p>Since it was suggested to just <em>run tests</em>.
Here is some background on why I ask this question.
This code has no tests and it's unlikely to ever have 100% test coverage since it happens to be build-system utility scripts. In theory, we could spend time to add a test suite and find ways to enable tests to run on different platforms (monkey patch <code>sys.platform</code> or run continuous integration on all supported platforms in a VM...) but we simply can't justify spending this kind of effort at the moment.</p>
<p>Also, it's possible that you might want to clean up test code itself!</p>
</div>
<div class="post-text" itemprop="text">
<p>Parsing the AST to check for logical diff is a great idea. Python makes working with <a href="https://docs.python.org/3/library/ast.html" rel="nofollow">its AST</a> incredibly easy.</p>
<pre><code>import ast

original_ast = ast.parse("""
import sys
for a in range(0,10):
    print(a)
sys.exit(0)""")

altered_ast = ast.parse("""
import sys
for a in range(0,10):
    print(a + 1)
sys.exit(0)""")

ast.dump(original_ast) == ast.dump(altered_ast)
</code></pre>
<p>If you would like to see a diff then Python has another <a href="https://docs.python.org/3/library/difflib.html" rel="nofollow">built in diff library</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>As @erik-e noted, you can simply use <code>ast.dump</code>, however this puts everything in a single line, heres a modified version of <code>ast.dump</code>, in a script that reads from the stdin and prints out the ast.</p>
<p>eg:</p>
<pre><code>py_to_ast &lt; my_script.py &gt; my_ast.txt
</code></pre>
<p>Other than newlines and indentation, output is the same as <code>ast.dump</code>.</p>
<p>You can download the script from:
<a href="https://gitlab.com/ideasman42/dotfiles/blob/master/bin/py_to_ast.py" rel="nofollow">https://gitlab.com/ideasman42/dotfiles/blob/master/bin/py_to_ast.py</a></p>
<p><a href="https://gist.github.com/ideasman42/efe531fc0dd4bc1686f0" rel="nofollow">Example output</a> of this script run through its self</p>
<pre><code>#!/usr/bin/env python3

import ast


def dump(node, annotate_fields=True, include_attributes=False):
    """
    ast.dump from Python3.4 modified for pretty printing.
    """
    from ast import AST, iter_fields

    def _format(node, level):
        level_next = level + 1
        indent = level * '  '
        indent_next = level_next * '  '
        if isinstance(node, AST):
            fields = [(a, _format(b, level_next)) for a, b in iter_fields(node)]
            rv = '\n' + indent + '%s(%s' % (node.__class__.__name__, (',\n' + indent_next).join(
                ('%s=%s' % field for field in fields)
                if annotate_fields else
                (b for a, b in fields)
            ))

            if include_attributes and node._attributes:
                rv += fields and ', ' or ' '
                rv += (',\n' + indent_next).join('%s=%s' % (a, _format(getattr(node, a), level_next))
                                                 for a in node._attributes)
            return rv + ')'
        elif isinstance(node, list):
            return '[%s]' % (',\n' + indent_next).join(_format(x, level_next) for x in node)
        return repr(node)
    if not isinstance(node, AST):
        raise TypeError('expected AST, got %r' % node.__class__.__name__)
    return _format(node, 0)


import sys

def main():
    data = sys.stdin.read()
    tree = ast.parse(data)
    print(dump(tree))

if __name__ == "__main__":
    main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could possibly make your own tree rather easily, I'd recommend reading if the equality operator on it has been overloaded for comparison, it it hasn't you'd have to manually compare them. </p>
<p>Read about it <a href="https://docs.python.org/2/library/ast.html#ast.parse" rel="nofollow">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Our <a href="http://www.semanticdesigns.com/Products/SmartDifferencer" rel="nofollow">SmartDifferencer</a> parses source code into an AST, and computes a difference over the ASTs.  This ignores whitespace formatting, comments, number radix, escape sequences in strings.  SmartDifference works with Python as well as other languages.</p>
<p>If the only change are whitespace differences, the AST difference is empty.  In this case the program is semantically identical.</p>
<p>Any actual differences are reported in the form of plausible edits to the code structures, such as:  delete, insert, move, copy, replace identifier.</p>
</div>
<span class="comment-copy">This is good but all content is in one line, <code>ast.dump(tree).split(', ')</code> - gives a fairly good quick &amp; easy text file to diff against, indentation can be done but is more work. (the code for <code>ast.dump</code> is &lt;20 lines, so easy to make something with indentation)</span>
<span class="comment-copy">While interesting, the question is tagged <code>Python3.x</code> and this tool only supports <code>Python2.x</code></span>
