<div class="post-text" itemprop="text">
<p>if i have two lists (may be with different len):</p>
<pre><code>x = [1,2,3,4]
f = [1,11,22,33,44,3,4]

result = [11,22,33,44]
</code></pre>
<p>im doing:</p>
<pre><code>for element in f:
    if element in x:
        f.remove(element)
</code></pre>
<p>im getting</p>
<pre><code>result = [11,22,33,44,4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want the unique elements from both lists, this should work:</p>
<pre><code>x = [1,2,3,4]
f = [1,11,22,33,44,3,4]

res = list(set(x+f))
print(res)
# res = [1, 2, 3, 4, 33, 11, 44, 22]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Based on the clarification of this question in a <a href="https://stackoverflow.com/questions/45098206/unique-values-between-2-lists#45098206">new (closed) question</a>:</p>
<p>If you want all items from the second list that do not appear in the first list you can write:</p>
<pre><code>x = [1,2,3,4]
f = [1,11,22,33,44,3,4]

result = set(f) - set(x) # correct elements, but not yet in sorted order
print(sorted(result)) # sort and print

# Output: [11, 22, 33, 44]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>if you want to get  only unique elements from the two list then you can get it by..</p>
<pre><code>a=[1,2,3,4,5]
b= [2,4,1]
list(set(a) - set(b))
OP:- [3, 5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using this piece of <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">Python's documentation</a> on sets:</p>
<pre><code>&gt;&gt;&gt; # Demonstrate set operations on unique letters from two words
...
&gt;&gt;&gt; a = set('abracadabra')
&gt;&gt;&gt; b = set('alacazam')
&gt;&gt;&gt; a                                  # unique letters in a
{'a', 'r', 'b', 'c', 'd'}
&gt;&gt;&gt; a - b                              # letters in a but not in b
{'r', 'd', 'b'}
&gt;&gt;&gt; a | b                              # letters in a or b or both
{'a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'}
&gt;&gt;&gt; a &amp; b                              # letters in both a and b
{'a', 'c'}
&gt;&gt;&gt; a ^ b                              # letters in a or b but not both
{'r', 'd', 'b', 'm', 'z', 'l'}
</code></pre>
<p>I came up with this piece of code to obtain unique elements from two lists:</p>
<pre><code>(set(x) | set(f)) - (set(x) &amp; set(f))
</code></pre>
<p>or slightly modified to return <code>list</code>:</p>
<pre><code>list((set(x) | set(f)) - (set(x) &amp; set(f))) #if you need a list
</code></pre>
<p>Here:</p>
<ol>
<li><code>|</code> operator returns elements in <code>x</code>, <code>f</code> or <strong>both</strong></li>
<li><code>&amp;</code> operator returns elements in <strong>both</strong> <code>x</code> and <code>f</code> </li>
<li><code>-</code> operator subtracts the results of <code>&amp;</code> from <code>|</code> and provides us with the elements that are uniquely presented only in one of the lists</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Your method won't get the unique element "2".  What about:</p>
<pre><code>list(set(x).intersection(f))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>v_child_value = [{'a':1}, {'b':2}, {'v':22}, {'bb':23}]
shop_by_cat_sub_cats = [{'a':1}, {'b':2}, {'bbb':222}, {'bb':23}]


unique_sub_cats = []
for ind in shop_by_cat_sub_cats:
    if ind not in v_child_value:
        unique_sub_cats.append(ind)
</code></pre>
<blockquote>
<p>unique_sub_cats = [{'bbb': 222}]</p>
</blockquote>
</div>
<span class="comment-copy">Why isn't <code>2</code> part of your output?  FWIW, what you are doing is <code>f - x</code> whereas what you want is <code>(f \cup x) - (f \cap x)</code></span>
<span class="comment-copy">But this does not answer the OP question at all!</span>
<span class="comment-copy">@lifebalance how do you say that ?!!</span>
<span class="comment-copy">Almost right, but you got it backwards. Try symmetric_difference() instead.</span>
<span class="comment-copy">"Unique elements from both lists" sounds like intersection to me. Questioner should clarify.</span>
