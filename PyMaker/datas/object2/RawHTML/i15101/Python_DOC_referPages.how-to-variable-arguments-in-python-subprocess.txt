<div class="post-text" itemprop="text">
<p>I am writing a python script and then using a subprocess to log to the syslog.  The log structure is made up of variables:</p>
<p>Sensor
Alert</p>
<p>Each variable is pulled from a database so to get the correct sensor and the correct alert.  My problem is that I can not build the alert because I am messing up the variables as arguments.</p>
<pre><code>sensor = 12345
alert_text = "Help me Help me."

subprocess.call("sudo logger -t ALERT --priority alert -- ALERT: Sensor: '%s', Alert: '%s'" % sa, alert_text, shell=True)
</code></pre>
<p>In my code above the syslog comment is constructed of the "Sensor ID" and then the "Alert Test" so that log entry should read as:</p>
<pre><code>ALERT: Sensor: 12345 Alert: Help me Help me.
</code></pre>
<p>I am getting the "Not enough arguments to build a sentence" error.  I suspect I am submitting my arguments incorrectly.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>% sa, alert_text</code> to <code>% (sa, alert_text)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>format()</code> function. Clear and more elegant.</p>
<pre><code>subprocess.call("sudo logger -t ALERT --priority alert -- ALERT: Sensor: {}, Alert: {}".format(sa, alert_text), shell=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need pass tuple to string formatting:    </p>
<pre><code>alert_text = "Help me Help me"
subprocess.call("sudo logger -t ALERT --priority alert -- ALERT: Sensor: '%s', Alert: %s" % (sa, alert_text), shell=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need <code>subprocess</code> module to log to syslog. You could <a href="https://docs.python.org/3/library/logging.handlers.html#sysloghandler" rel="nofollow">use <code>logging</code> module instead</a>:</p>
<pre><code>#!/usr/bin/env python3
import logging.handlers

# .. check what address you should be using for a domain socket - it’s system dependent.
# For example, on Linux it’s usually ‘/dev/log’ but on OS/X it’s ‘/var/run/syslog’.
address = '/dev/log'

# handlers parameter is available since Python 3.3+ (write custom code for earlier versions)
logging.basicConfig(handlers=[logging.handlers.SysLogHandler(address)])

sensor = 12345
alert_text = "Help me Help me."
logging.warning("Sensor: %d, Alert: %s", sensor, alert_text)
</code></pre>
<p>It writes to syslog on my machine:</p>
<pre><code>Feb 17 05:39:13 ubuntu WARNING:root:Sensor: 12345, Alert: Help me Help me.
</code></pre>
<p>If you want; you can use <code>subprocess</code>:</p>
<pre><code>#!/usr/bin/env python
from subprocess import check_call

sensor = 12345
alert_text = "Help me Help me."
check_call('sudo logger -t ALERT --priority alert'.split() +
           ["ALERT: Sensor: {sensor} Alert: {alert}".format(sensor=sensor, alert=alert_text)])
</code></pre>
<p>Note: <code>subprocess</code> module does not use shell by default therefore you don't need to escape anything. In particular, you don't need the single quotes here.</p>
<p>There is also <a href="https://docs.python.org/3/library/syslog.html" rel="nofollow"><code>syslog</code> stdlib module</a>.</p>
</div>
<span class="comment-copy">Ok, thanks, this is really close.  The only problem is that the output is <code>ALERT: Sensor: 12345, Alert: (Help me Help me!,)</code>  this has the extra parenthesis and a comma</span>
<span class="comment-copy">Same output, no chage</span>
<span class="comment-copy">I've tried this, and my output is <code>ALERT: Sensor: 12345, Alert: Help me Help me.</code></span>
<span class="comment-copy">do not use <code>shell=True</code> here. Imagine what happens: <code>alert_text = "Help me ... you're my only hope"</code>. You can <a href="http://stackoverflow.com/a/28554785/4279">use syslog without invoking the shell</a></span>
