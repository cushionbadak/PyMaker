<div class="post-text" itemprop="text">
<p>I'm using Python3, but the script is not compatible with this version and I hit some errors. Now I have problem with <code>cmp</code> parameter. Here is the code</p>
<pre><code>def my_cmp(x,y):
    counter = lambda x, items: reduce(lambda a,b:a+b, [list(x).count(xx) for xx in items])
    tmp =  cmp(counter(x, [2,3,4,5]), counter(y, [2,3,4,5]))
    return tmp if tmp!=0 else cmp(len(x),len(y)) 

for i, t in enumerate([tmp[0] for tmp in sorted(zip(tracks, self.mapping[idx][track_selection[-1]].iloc[0]), cmp=my_cmp, key=lambda x:x[1])]):
    img[i,:len(t)] = t
</code></pre>
<p>I would really appreciate any help how to deal with this error in Python3.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should try to rewrite your <code>cmp</code> function to a <em>key</em> function instead. In this case it looks like you can simply return the <code>counter()</code> function output for just <em>one</em> element:</p>
<pre><code>def my_key(elem):
    counter = lambda x, items: sum(list(x).count(xx) for xx in items)
    return counter(elem, [2, 3, 4, 5]), len(elem)
</code></pre>
<p>I took the liberty of replacing the <code>reduce(...)</code> code with the <code>sum()</code> function, a far more compact and readable method to sum a series of integers.</p>
<p>The above too will first sort by the output of <code>counter()</code>, and by the length of each sorted element in case of a tie.</p>
<p>The <code>counter</code> function is hugely inefficient however; I'd use a <code>Counter()</code> class here instead:</p>
<pre><code>from collections import Counter

def my_key(elem):
    counter = lambda x, items: sum(Counter(i for i in x if i in items).values())
    return counter(elem, {2, 3, 4, 5}), len(elem)
</code></pre>
<p>This function will work in both Python 2 and 3:</p>
<pre><code>sorted(zip(tracks, self.mapping[idx][track_selection[-1]].iloc[0]),
       key=lambda x: my_key(x[1]))
</code></pre>
<p>If you cannot, you can use the <a href="https://docs.python.org/3/library/functools.html#functools.cmp_to_key" rel="nofollow"><code>cmp_to_key()</code> utility function</a> to adapt your <code>cmp</code> argument, but take into account this is not an ideal solution (it affects performance).</p>
</div>
