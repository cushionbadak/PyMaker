<div class="post-text" itemprop="text">
<p>When I try to print a Unicode string in a Windows console, I get a <code>UnicodeEncodeError: 'charmap' codec can't encode character ....</code> error.  I assume this is because the Windows console does not accept Unicode-only characters. What's the best way around this? Is there any way I can make Python automatically print a <code>?</code> instead of failing in this situation?</p>
<p><strong>Edit:</strong>  I'm using Python 2.5.</p>
<hr/>
<p><strong>Note:</strong> @LasseV.Karlsen answer with the checkmark is sort of outdated (from 2008). Please use the solutions/answers/suggestions below with care!!</p>
<p><a href="https://stackoverflow.com/a/32176732/610569">@JFSebastian answer</a> is more relevant as of today (6 Jan 2016).</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Note:</strong> This answer is sort of outdated (from 2008). Please use the solution below with care!!</p>
<hr/>
<p>Here is a page that details the problem and a solution (search the page for the text <em>Wrapping sys.stdout into an instance</em>):</p>
<p><a href="http://wiki.python.org/moin/PrintFails" rel="noreferrer">PrintFails - Python Wiki</a></p>
<p>Here's a code excerpt from that page:</p>
<pre><code>$ python -c 'import sys, codecs, locale; print sys.stdout.encoding; \
    sys.stdout = codecs.getwriter(locale.getpreferredencoding())(sys.stdout); \
    line = u"\u0411\n"; print type(line), len(line); \
    sys.stdout.write(line); print line'
  UTF-8
  &lt;type 'unicode'&gt; 2
  Б
  Б

  $ python -c 'import sys, codecs, locale; print sys.stdout.encoding; \
    sys.stdout = codecs.getwriter(locale.getpreferredencoding())(sys.stdout); \
    line = u"\u0411\n"; print type(line), len(line); \
    sys.stdout.write(line); print line' | cat
  None
  &lt;type 'unicode'&gt; 2
  Б
  Б
</code></pre>
<p>There's some more information on that page, well worth a read.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Update:</strong> <a href="https://docs.python.org/3.6/whatsnew/3.6.html#pep-528-change-windows-console-encoding-to-utf-8" rel="noreferrer">Python 3.6</a> implements <a href="https://www.python.org/dev/peps/pep-0528/" rel="noreferrer">PEP 528: Change Windows console encoding to UTF-8</a>: <em>the default console on Windows will now accept all Unicode characters.</em> Internally, it uses the same Unicode API as <a href="https://github.com/Drekin/win-unicode-console" rel="noreferrer">the <code>win-unicode-console</code> package mentioned below</a>. <code>print(unicode_string)</code> should just work now.</p>
<hr/>
<blockquote>
<p>I get a <code>UnicodeEncodeError: 'charmap' codec can't encode character...</code>  error. </p>
</blockquote>
<p>The error means that Unicode characters that you are trying to print can't be represented using the current (<code>chcp</code>) console character encoding. The codepage is often 8-bit encoding such as <code>cp437</code> that can represent only ~0x100 characters from ~1M Unicode characters:</p>
<pre>&gt;&gt;&gt; u"\N{EURO SIGN}".encode('cp437')
Traceback (most recent call last):
...
UnicodeEncodeError: 'charmap' codec can't encode character '\u20ac' in position 0:
character maps to </pre>
<blockquote>
<p>I assume this is because the Windows console does not accept Unicode-only characters. What's the best way around this? </p>
</blockquote>
<p>Windows console does accept Unicode characters and it can even display them (BMP only) <strong>if the corresponding font is configured</strong>. <code>WriteConsoleW()</code> API should be used as suggested in <a href="https://stackoverflow.com/a/4637795/4279">@Daira Hopwood's answer</a>. It can be called transparently i.e., you don't need to and should not modify your scripts if you use <a href="https://github.com/Drekin/win-unicode-console" rel="noreferrer"><code>win-unicode-console</code> package</a>:</p>
<pre><code>T:\&gt; py -mpip install win-unicode-console
T:\&gt; py -mrun your_script.py
</code></pre>
<p>See <a href="https://stackoverflow.com/a/30551552/4279">What's the deal with Python 3.4, Unicode, different languages and Windows?</a></p>
<blockquote>
<p>Is there any way I can make Python
  automatically print a <code>?</code> instead of failing in this situation?</p>
</blockquote>
<p>If it is enough to replace all unencodable characters with <code>?</code> in your case then you could set <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONIOENCODING" rel="noreferrer"><code>PYTHONIOENCODING</code> envvar</a>:</p>
<pre><code>T:\&gt; set PYTHONIOENCODING=:replace
T:\&gt; python3 -c "print(u'[\N{EURO SIGN}]')"
[?]
</code></pre>
<p>In Python 3.6+, the encoding specified by <code>PYTHONIOENCODING</code> envvar is ignored for interactive console buffers unless <code>PYTHONLEGACYWINDOWSIOENCODING</code> envvar is set to a non-empty string. </p>
</div>
<div class="post-text" itemprop="text">
<p>Despite the other plausible-sounding answers that suggest changing the code page to 65001, that <a href="http://bugs.python.org/issue1602" rel="noreferrer">does not work</a>. (Also, changing the default encoding using <code>sys.setdefaultencoding</code> is <a href="https://stackoverflow.com/questions/3578685/how-to-display-utf-8-in-windows-console/3580165#3580165">not a good idea</a>.)</p>
<p>See <a href="https://stackoverflow.com/questions/878972/windows-cmd-encoding-change-causes-python-crash/3259271">this question</a> for details and code that does work.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're not interested in getting a reliable representation of the bad character(s) you might use something like this (working with python &gt;= 2.6, including 3.x):</p>
<pre><code>from __future__ import print_function
import sys

def safeprint(s):
    try:
        print(s)
    except UnicodeEncodeError:
        if sys.version_info &gt;= (3,):
            print(s.encode('utf8').decode(sys.stdout.encoding))
        else:
            print(s.encode('utf8'))

safeprint(u"\N{EM DASH}")
</code></pre>
<p>The bad character(s) in the string will be converted in a representation which is printable by the Windows console.</p>
</div>
<div class="post-text" itemprop="text">
<p>The below code will make Python output to console as UTF-8 even on Windows. </p>
<p>The console will display the characters well on Windows 7 but on Windows XP it will not display them well, but at least it will work and most important you will have a consistent output from your script on all platforms. You'll be able to redirect the output to a file.</p>
<p>Below code was tested with Python 2.6 on Windows.</p>
<pre><code>
#!/usr/bin/python
# -*- coding: UTF-8 -*-

import codecs, sys

reload(sys)
sys.setdefaultencoding('utf-8')

print sys.getdefaultencoding()

if sys.platform == 'win32':
    try:
        import win32console 
    except:
        print "Python Win32 Extensions module is required.\n You can download it from https://sourceforge.net/projects/pywin32/ (x86 and x64 builds are available)\n"
        exit(-1)
    # win32console implementation  of SetConsoleCP does not return a value
    # CP_UTF8 = 65001
    win32console.SetConsoleCP(65001)
    if (win32console.GetConsoleCP() != 65001):
        raise Exception ("Cannot set console codepage to 65001 (UTF-8)")
    win32console.SetConsoleOutputCP(65001)
    if (win32console.GetConsoleOutputCP() != 65001):
        raise Exception ("Cannot set console output codepage to 65001 (UTF-8)")

#import sys, codecs
sys.stdout = codecs.getwriter('utf8')(sys.stdout)
sys.stderr = codecs.getwriter('utf8')(sys.stderr)

print "This is an Е乂αmp١ȅ testing Unicode support using Arabic, Latin, Cyrillic, Greek, Hebrew and CJK code points.\n"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Like Giampaolo Rodolà's answer, but even more dirty: I really, really intend to spend a long time (soon) understanding the whole subject of encodings and how they apply to Windoze consoles, </p>
<p>For the moment I just wanted sthg which would mean my program would NOT CRASH, and which I understood ... and also which didn't involve importing too many exotic modules (in particular I'm using Jython, so half the time a Python module turns out not in fact to be available).</p>
<pre><code>def pr(s):
    try:
        print(s)
    except UnicodeEncodeError:
        for c in s:
            try:
                print( c, end='')
            except UnicodeEncodeError:
                print( '?', end='')
</code></pre>
<p>NB "pr" is shorter to type than "print" (and quite a bit shorter to type than "safeprint")...!</p>
</div>
<div class="post-text" itemprop="text">
<p>For Python 2 try:</p>
<pre><code>print unicode(string, 'unicode-escape')
</code></pre>
<p>For Python 3 try:</p>
<pre><code>import os
string = "002 Could've Would've Should've"
os.system('echo ' + string)
</code></pre>
<p>Or try win-unicode-console:</p>
<pre><code>pip install win-unicode-console
py -mrun your_script.py
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just enter this code in command line before executing python script:</p>
<pre><code>chcp 65001 &amp; set PYTHONIOENCODING=utf-8
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The cause of your problem is <strong>NOT</strong> the Win console not willing to accept Unicode (as it does this since I guess Win2k by default). It is the default system encoding. Try this code and see what it gives you:</p>
<pre><code>import sys
sys.getdefaultencoding()
</code></pre>
<p>if it says ascii, there's your cause ;-)
You have to create a file called sitecustomize.py and put it under python path (I put it under /usr/lib/python2.5/site-packages, but that is differen on Win - it is c:\python\lib\site-packages or something), with the following contents:</p>
<pre><code>import sys
sys.setdefaultencoding('utf-8')
</code></pre>
<p>and perhaps you might want to specify the encoding in your files as well:</p>
<pre><code># -*- coding: UTF-8 -*-
import sys,time
</code></pre>
<p>Edit: more info can be found <a href="http://www.diveintopython.net/xml_processing/unicode.html" rel="nofollow noreferrer">in excellent the Dive into Python book</a></p>
</div>
<div class="post-text" itemprop="text">
<p>TL;DR:</p>
<pre><code>print(yourstring.encode('ascii','replace'));
</code></pre>
<hr/>
<p>I ran into this myself, working on a Twitch chat (IRC) bot. (Python 2.7 latest)</p>
<p>I wanted to parse chat messages in order to respond...</p>
<pre><code>msg = s.recv(1024).decode("utf-8")
</code></pre>
<p>but also print them safely to the console in a human-readable format:</p>
<pre><code>print(msg.encode('ascii','replace'));
</code></pre>
<p>This corrected the issue of the bot throwing <code>UnicodeEncodeError: 'charmap'</code> errors and replaced the unicode characters with <code>?</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Kind of related on the answer by J. F. Sebastian, but more direct.</p>
<p>If you are having this problem when printing to the console/terminal, then do this:</p>
<pre><code>&gt;set PYTHONIOENCODING=UTF-8
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python 3.6 windows7: There is several way to launch a python you could use the python console (which has a python logo on it) or the windows console (it's written cmd.exe on it). </p>
<p>I could not print utf8 characters in the windows console. Printing utf-8 characters throw me this error:</p>
<pre><code>OSError: [winError 87] The paraneter is incorrect 
Exception ignored in: (_io-TextIOwrapper name='(stdout)' mode='w' ' encoding='utf8') 
OSError: [WinError 87] The parameter is incorrect 
</code></pre>
<p>After trying and failing to understand the answer above I discovered it was only a setting problem. Right click on the top of the cmd console windows, on the tab <code>font</code> chose lucida console.</p>
</div>
<div class="post-text" itemprop="text">
<p>James Sulak asked,</p>
<blockquote>
<p>Is there any way I can make Python automatically print a ? instead of failing in this situation?</p>
</blockquote>
<p>Other solutions recommend we attempt to modify the Windows environment or replace Python's <code>print()</code> function.  The answer below comes closer to fulfilling Sulak's request.</p>
<p>Under Windows 7, Python 3.5 can be made to print Unicode without throwing a <code>UnicodeEncodeError</code> as follows:</p>
<p>    In place of:
   <code>print(text)</code><br/>
    substitute:
    <code>print(str(text).encode('utf-8'))</code></p>
<p>Instead of throwing an exception, Python now displays unprintable Unicode characters as <em>\xNN</em> hex codes, e.g.:</p>
<p>  <em>Halmalo n\xe2\x80\x99\xc3\xa9tait plus qu\xe2\x80\x99un point noir</em></p>
<p>Instead of</p>
<p>  <em>Halmalo n’était plus qu’un point noir</em></p>
<p>Granted, the latter is preferable <em>ceteris paribus</em>, but otherwise the former is completely accurate for diagnostic messages.  Because it displays Unicode as literal byte values the former may also assist in diagnosing encode/decode problems.</p>
<p><strong>Note:</strong> The <code>str()</code> call above is needed because otherwise <code>encode()</code> causes Python to reject a Unicode character as a tuple of numbers.</p>
</div>
<span class="comment-copy">What version of Python are you on? I've seen references that this was broken in 2.4.3 and fixed in 2.4.4.</span>
<span class="comment-copy">related: <a href="http://bugs.python.org/issue1602" rel="nofollow noreferrer">bugs.python.org/issue1602</a></span>
<span class="comment-copy">check <a href="http://stackoverflow.com/q/39528462/5284370">this</a> out.</span>
<span class="comment-copy">the most simple answer that I found is to type: chcp 65001 before using pyhton in cmd</span>
<span class="comment-copy">Then you should change your accepted answer...</span>
<span class="comment-copy">The link is dead and the gist of the answer wasn't quoted. -1</span>
<span class="comment-copy">The link works now but it's not very clear what it suggests.</span>
<span class="comment-copy">When I try the given advice about wrapping <code>sys.stdout</code>, it prints the wrong things. For example, <code>u'\u2013'</code> becomes <code>û</code> instead of an en-dash.</span>
<span class="comment-copy">@user2357112 You will have to post a new question about that. Unicode and system console is not necessarily the best combination, but I don't know enough about this, so if you need a definite answer, post a question here on SO about it.</span>
<span class="comment-copy">the link is dead. The code example is wrong for Windows console where the codepage (OEM) such as <code>cp437</code> is different from Windows ANSI  codepage such as <code>cp1252</code>. The code does not fix <code>UnicodeEncodeError: 'charmap' codec can't encode character</code> error and may lead to mojibake e.g., <code>Ø§©</code> is silently replaced with <code>╪º⌐</code>.</span>
<span class="comment-copy">"the default console on Windows will now accept all Unicode characters" <b>BUT</b> you need to configure the console: right click on the top of the windows (of the cmd or the python IDLE), in default/font choose the "Lucida console". (Japanese and Chinese don't work for me, but I should survive without it...)</span>
<span class="comment-copy">@Guillaume: the answer contains the phrase in <b>bold</b> about Windows console: <i>"if the corresponding font is configured."</i> This answer doesn't mention IDLE but you don't need to configure the font in it (I see Japanese and Chinese characters just fine in IDLE by default. Try <code>print('\u4E01')</code>, <code>print('\u6b63')</code>).</span>
<span class="comment-copy">@Guillaume You can even get Chinese if you install the language pack in Windows 10.  It added console fonts that support Chinese.</span>
<span class="comment-copy"><code>win-unicode-console</code> Python package (based on your code) allows to avoid modifying your script if it prints Unicode directly using <a href="http://stackoverflow.com/a/32176732/4279"><code>py -mrun your_script.py</code> command</a>.</span>
<span class="comment-copy"><code>.encode('utf8').decode(sys.stdout.encoding)</code> leads to mojibake e.g., <code>u"\N{EM DASH}".encode('utf-8').decode('cp437')</code> -&gt; <code>ΓÇö</code></span>
<span class="comment-copy">Simply <code>print(s.encode('utf-8'))</code> may be a better way to avoid compiler errors.  Instead, you get \xNN output for unprintable characters, which was enough for my diagnostic messages.</span>
<span class="comment-copy">This is enormously, <i>spectacularly</i> wrong. Encoding to UTF-8 then decoding as an 8-bit charset will a) often fail, not all codepages have characters for all 256 byte values, and b) <i>always</i> the wrong interpretation of the data, producing a <a href="https://en.wikipedia.org/wiki/Mojibake" rel="nofollow noreferrer">Mojibake</a> mess instead.</span>
<span class="comment-copy">Is there a way to avoid this by just using a different console?</span>
<span class="comment-copy"><a href="http://bugs.python.org/msg97731" rel="nofollow noreferrer"><code>cp65001 != utf-8</code></a></span>
<span class="comment-copy">@sorin: Why do you first <code>import win32console</code> outside a <code>try</code> and later you do it conditionally inside a <code>try</code>? Isn't that kind of pointless (the first <code>import</code>)</span>
<span class="comment-copy">For what it's worth, the one provided by David-Sarah Hopwood works (I didn't get this one to even run because I haven't bothered installing the win32 extensions module)</span>
<span class="comment-copy">Don't change the system default encoding; fix your Unicode values instead. Changing the default encoding can break libraries that rely on the, you know, <i>default behaviour</i>. There is a reason you have to force a module reload before you can do this.</span>
<span class="comment-copy">Clever, a quick and dirty way to get around the issue. I think this is great for an intermittent solution.</span>
<span class="comment-copy">setdefaultencoding() is nolonger in sys (as of v2.0 according to the module docs).</span>
<span class="comment-copy">I cannot prove it right now, but I know that I've used this trick on a later version - 2.5 on Windows.</span>
<span class="comment-copy">OK, after quite a while I have found out that: "This function is only intended to be used by the site module implementation and, where needed, by sitecustomize. Once used by the site module, it is removed from the sys module’s namespace."</span>
<span class="comment-copy">actually you can set the windows console to be utf-8. you need to say chcp 65001 and it will be unicode.</span>
<span class="comment-copy">To make it absolutely clear: <b>it is a is very a bad idea</b> to change the default encoding. This is akin to spalking your broken leg and walking on as if nothing happened, rather than have a doctor set the bone properly. All code handling Unicode text should do so consistently instead of relying on implicit encoding / decoding.</span>
<span class="comment-copy"><code>set PYTHONIOENCODING=UTF-8</code> may lead to <a href="http://goo.gl/QlkFXZ" rel="nofollow noreferrer">mojibake</a> if the console uses a different encoding such as cp437. <a href="http://bugs.python.org/issue1602" rel="nofollow noreferrer"><code>cp65001</code> has various issues</a>. To print Unicode to Windows console, Unicode API should be used (<code>WriteConsoleW()</code>) as suggested in <a href="http://stackoverflow.com/a/32176732/4279">my answer</a> where <code>PYTHONIOENCODING</code> is used only to replace characters that can't be represented in the current OEM code page with <code>?</code> (<code>WriteConsoleW()</code> works even for such characters). <code>PYTHONIOENCODING</code> can be used if the output is redirected to a file.</span>
