<div class="post-text" itemprop="text">
<p>There any way to optimize these two functions ?</p>
<p>first function:</p>
<pre><code>def searchList(list_, element):
    for i in range (0,len(list_)):
        if(list_[i] == element):
            return True      
    return False
</code></pre>
<p>second function:</p>
<pre><code>return_list=[]
for x in list_search:
    if searchList(list_users,x)==False:
        return_list.append(x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes:</p>
<pre><code>return_list = [x for x in list_search if x not in list_users]
</code></pre>
<p>The first function basically checks for membership, in which case you could use the <a href="https://docs.python.org/3/reference/expressions.html#in" rel="nofollow"><code>in</code> keyword</a>. The second function can be reduced to a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a> to filter out elements from <code>list_search</code> list based on your condition.</p>
</div>
<div class="post-text" itemprop="text">
<p>For first function</p>
<pre><code>def searchList(list, element):
   return element in list
</code></pre>
<p>You can make it in 1 line</p>
<pre><code>searchList = lambda x,y: y in x
</code></pre>
<p>For 2nd, use a list comp like shown in the other answer</p>
</div>
<div class="post-text" itemprop="text">
<p>What you are doing with your two functions is building the complement as ozgur pointed out.
Using sets is the most easy thing here</p>
<pre><code>&gt;&gt;&gt; set([2,2,2,3,3,4])- set([1,2,2,4,5])
set([3])
</code></pre>
<p>your <code>list_search</code> would be the first list and your <code>list_users</code> the second list.
The only difference is that your new user is only once in the result no matter how often it is in the <code>list_search</code></p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Disclaimer:</strong> I assumed <code>list_search</code> has no duplicate elements. Otherwise, use this <a href="https://stackoverflow.com/a/28570994/793428">solution</a>.</p>
<p>What you want is exactly the set <a href="http://en.wikipedia.org/wiki/Set_%28mathematics%29#Complements" rel="nofollow noreferrer">complement</a> of <code>list_users</code> in <code>list_search</code>. </p>
<p>As an alternative approach, you can use <a href="https://docs.python.org/2/tutorial/datastructures.html#sets" rel="nofollow noreferrer"><code>sets</code></a> to get the difference between two lists and I think it should be much more performant than the naive look up which takes <code>0(n^2)</code>.</p>
<pre><code>&gt;&gt;&gt; list_search = [1, 2, 3, 4]
&gt;&gt;&gt; list_users = [4, 5, 1, 6]
&gt;&gt;&gt; print set(list_search).difference(list_users)
&gt;&gt;&gt; {2, 3}
</code></pre>
</div>
<span class="comment-copy">Before asking for a faster way to do something, you should first explain what you are trying to do!</span>
<span class="comment-copy">Convert <code>list_users</code> to a  <code>set</code> and check for item simply using the <code>in</code> operator.</span>
<span class="comment-copy">Optimize for what? Readability? Speed? Memory usage? Either way, since your question is about working code, it's better suited for <a href="http://codereview.stackexchange.com/">codereview.stackexchange.com</a></span>
<span class="comment-copy"><code>in</code> is O(n) for list. If you wanted to get really crazy you can write a binary search (if applicable) which would reduce this to logn!</span>
<span class="comment-copy">Good point ! first time i seen this question and vote the first answer! but i miss this elegant answer!</span>
