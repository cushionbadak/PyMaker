<div class="post-text" itemprop="text">
<p>I am completely baffled at this seemingly simple problem that I have.  I want to define a function that will take the input, which can be a str or int and double it.  For example, if the input is <code>'foo'</code>, then the output will be <code>'foofoo'</code>.  Likewise, if the input is (9), the output will be 18.  Can somebody point me in the right direction?</p>
<p>Here is what I have so far:</p>
<pre><code>def double(x):
    """returns two times a number if input is a number, returns double the size of the string inputted, if input is a string
str -&gt; str; int -&gt; int"""
    if x is :
        return x*2
    if x is :
        return x*2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What about:</p>
<pre><code>def double(x):
    return x+x
</code></pre>
<p>or </p>
<pre><code>def double(x):
    return x*2
</code></pre>
<p>Both should work as:</p>
<ul>
<li>the <code>+</code> operator is overloaded to perform concatenation when arguments are strings;</li>
<li>the <code>*</code> operator is overloaded to "duplicate" when one argument is a string.</li>
</ul>
<p>As Python is dynamically typed, the choice of the <em>real</em> operation performed will be made at run-time, depending the type of the operands.</p>
<hr/>
<p>More formally, to quote <a href="https://docs.python.org/3/reference/expressions.html#binary-arithmetic-operations" rel="nofollow">the documentation</a>:</p>
<blockquote>
<p>The <code>*</code> (multiplication) operator yields the product of its arguments. <strong>The arguments must either both be numbers, or one argument must be an integer and the other must be a sequence</strong>. In the former case, the numbers are converted to a common type and then multiplied together. In the latter case, sequence repetition is performed; a negative repetition factor yields an empty sequence.</p>
<p>[...]</p>
<p>The <code>+</code> (addition) operator yields the sum of its arguments. <strong>The arguments must either both be numbers or both be sequences of the same type</strong>. In the former case, the numbers are converted to a common type and then added together. In the latter case, the sequences are concatenated.</p>
</blockquote>
<hr/>
<p>If you're curious, from the sources or <code>Python3.3.6/Objects/abstract.c</code> (The code for <code>PyNumber_Mul</code> is quite comparable) :</p>
<pre><code>PyObject *
PyNumber_Add(PyObject *v, PyObject *w)
{
    PyObject *result = binary_op1(v, w, NB_SLOT(nb_add));
    if (result == Py_NotImplemented) {
        PySequenceMethods *m = v-&gt;ob_type-&gt;tp_as_sequence;
        Py_DECREF(result);
        if (m &amp;&amp; m-&gt;sq_concat) {
            return (*m-&gt;sq_concat)(v, w);
        }
        result = binop_type_error(v, w, "+");
    }
    return result;
}
</code></pre>
<p>As you can see, the interpreter will first try to perform an addition using the special method <code>__add__</code> defined for the left operand. If this one returns <code>NotImplemented</code>, it will try to interpret the left operand as a sequence and perform a concatenation.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just multiply the input by two. If it is a string, it will concatenate twice. If it is a number, it will double.</p>
<pre><code>user = raw_input('Enter input: ')
print user * 2
</code></pre>
<p>Look at the Python Documentation. This is taken straight from it.</p>
<blockquote>
<p>Strings can be concatenated (glued together) with the <code>+</code> operator, and repeated with <code>*</code>:</p>
</blockquote>
<pre><code>&gt;&gt;&gt; # 3 times 'un', followed by 'ium'
&gt;&gt;&gt; 3 * 'un' + 'ium'
'unununium'
</code></pre>
</div>
<span class="comment-copy">Have your <i>tried</i> multiplying by 2? <code>'foo'*2 == 'foofoo'</code> and  <code>4*2 == 8</code> in Python.</span>
<span class="comment-copy">Python is dynamically typed, and the <code>*</code> operator works for both integers and strings, so you don't need to care about what the function input is.</span>
<span class="comment-copy">See below Jared.</span>
<span class="comment-copy">thanks everyone, had a brain fart</span>
<span class="comment-copy">thanks, had a brain fart</span>
