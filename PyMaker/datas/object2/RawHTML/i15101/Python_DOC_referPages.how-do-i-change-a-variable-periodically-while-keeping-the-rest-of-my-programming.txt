<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/23368999/move-an-object-every-few-seconds-in-pygame">Move an object every few seconds in Pygame</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I'm trying to make a game sort of like cookie-clicker, but the problem I'm having is that I want to change the "money" variable once every second while keeping the rest of the program running at normal speed. (i.e. when you click a button to bring up a menu, it doesn't take a second to refresh.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have two main choices (for Python, or for any language):</p>
<ul>
<li><p>Create a thread (which executes in an infinite loop, and wakes up ever n seconds to do work asynchronously), or</p></li>
<li><p>Create a timer (which asynchronously jumps to your "interrupt handler" every N seconds).</p></li>
</ul>
<p>Here is a good threads tutorial:</p>
<ul>
<li><a href="http://www.tutorialspoint.com/python/python_multithreading.htm" rel="nofollow">http://www.tutorialspoint.com/python/python_multithreading.htm</a></li>
</ul>
<p>This is a simple "alarm" handler:</p>
<p><a href="https://docs.python.org/3/library/signal.html" rel="nofollow">https://docs.python.org/3/library/signal.html</a></p>
<pre><code>import signal, os

def handler(signum, frame):
    print('Signal handler called with signal', _)

# Set the alarm to fire every second
signal.signal(signal.SIGALRM, handler)
signal.alarm(1)

# ... Do stuff - the alarm will keep firing ...

# Done: clear alarm
signal.alarm(0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Make a thread which allows you to simultaneously run tasks:</p>
<pre><code>from threading import *
import time

class CookieThread(Thread):
    def __init__(self, rate):
        self.money = 0
        self.rate = rate
        self.running = False
        super(Thread, self).__init__()

    def start(self):
        self.running = True
        super(Thread, self).start()

    def run(self):
        while self.running:
            self.money += self.rate
            time.sleep(1) # wait a second
</code></pre>
<p>Now create a thread and start it:</p>
<pre><code>cookie = CookieThread(10)
cookie.start()
</code></pre>
</div>
<span class="comment-copy">See this one: <a href="http://stackoverflow.com/questions/2846653/python-multithreading-for-dummies" title="python multithreading for dummies">stackoverflow.com/questions/2846653/â€¦</a></span>
<span class="comment-copy">You mean a thread?</span>
<span class="comment-copy">But you're using Pygame. Why not stick it right in your gameloop?</span>
<span class="comment-copy">Does an alarm interrupt a pygame game loop though? Or is it in a separate thread?</span>
