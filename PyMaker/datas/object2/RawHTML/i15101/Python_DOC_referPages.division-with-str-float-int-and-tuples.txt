<div class="post-text" itemprop="text">
<p>Basically, I want to be able to divide int, str, tuple, and float in half. I'm having trouble with distinguishing the type of an input and then returning the same type.</p>
<p>For example, half(7) should return 3 (not 3.0!), half(9.0) should return 4.5, half("seventeen") should return "seve", and half((1,2,3,4,5,6,7)) should return (1,2,3).  I have tried this code without success:</p>
<pre><code>def half(x):
    """returns half of the input, rounded down

    str -&gt; str, int -&gt; int, float -&gt; float, tuple -&gt; tuple"""
    return int(x/2)
    if x is float:
        return float(x/2)
    if x is tuple:
        return tuple(x/2)
    if x is str:
        return str(x/2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First of all you need to check types. Secondly, this code assumes you're using Python 2.</p>
<pre><code>def half(x):

    if type(x) == float:
        return x / 2

    if type(x) == int:
        return x // 2

    if type(x) in (tuple, str):
         return x[:len(x)//2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just use <a href="https://docs.python.org/3/library/functools.html#functools.singledispatch"><code>functools.singledispatch</code></a>, which chooses the implementation based on the type of the first argument:</p>
<pre><code>from functools import singledispatch

@singledispatch
def half(x):
    raise TypeError()

@half.register(int)
def _(x):
    return x // 2

@half.register(float)
def _(x):
    return x / 2

@half.register(tuple)
def _(x):
    return x[:len(x) // 2]

@half.register(str)
def _(x):
    return x[:len(x) // 2]
</code></pre>
<p>You can shorten this to passing lambdas to <code>half.register</code> instead of using decorators and function statements if you prefer so:</p>
<pre><code>from functools import singledispatch

@singledispatch
def half(x):
    raise TypeError()

half.register(int, lambda x: x // 2)
half.register(float, lambda x: x / 2)
half.register(tuple, lambda x: x[:len(x) // 2])
half.register(str, lambda x: x[:len(x) // 2])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import numbers

def half(x):
    if isinstance(x, numbers.Integral):
        return x // 2
    elif isinstance(x, numbers.Real):
        return x / 2.
    elif isinstance(x, (tuple, str)):
        return x[:len(x) // 2]
    else:
        raise TypeError("x should be an int, float, tuple, or str (or derived from one of those)")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a dict with type as key and lambda as value using <code>//</code> for ints and <code>/</code> for floats and simply indexing for str and tuple <code>len(x)//2</code>. </p>
<pre><code>def half(i):
    d = {float: lambda x: x/2, int: lambda x: x//2, str: lambda x: x[:len(x)//2:], tuple: lambda x: x[:len(x)//2]}
    return d.get(type(i), lambda x: "Invalid input")(i)

In [29]: print(half(7))
3   
In [30]: print(half((1,2,3,4,5,6,7)))
(1, 2, 3)
In [31]: print(half("seventeen") )
seve
In [32]: print( half(9.0))
4.5
</code></pre>
</div>
<span class="comment-copy"><code>x is float</code> tells you whether or not <code>x</code> is <i>exactly the same object</i> as <code>float</code> (which it is pretty unlikely to be). Did you mean <code>if isinstance(x, float)</code> (i.e. if <code>x</code> is an instance of the <code>float</code> class)?</span>
<span class="comment-copy"><code>isinstance(x, (float, int))</code> would be generally preferred</span>
<span class="comment-copy">In Python 3, <code>4 / 2 == 2.0</code> - not what is wanted.</span>
<span class="comment-copy">Jon, what would be the purpose of the <code>type</code> function if it is not preferred?</span>
<span class="comment-copy">How's this Hugh?</span>
<span class="comment-copy">@MalikBrahimi it's like you read my mind. thanks</span>
<span class="comment-copy">it would be <code>import numbers</code> and <code>str</code> as there is no basestring in <code>python3</code></span>
<span class="comment-copy">That's a smart idea. Never would've done that. +1 for you.</span>
<span class="comment-copy">@MalikBrahimi, thanks.</span>
