<div class="post-text" itemprop="text">
<p>I'm working on mass-converting a number of HTML files to XML using BeautifulSoup in Python.</p>
<p>A sample HTML file looks something like this:</p>
<pre><code>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;!-- this is an HTML comment --&gt;
&lt;!-- this is another HTML comment --&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
    &lt;head&gt;
        ...
        &lt;!-- here is a comment inside the head tag --&gt;
    &lt;/head&gt;
    &lt;body&gt;
        ...
        &lt;!-- Comment inside body tag --&gt;
        &lt;!-- Another comment inside body tag --&gt;
        &lt;!-- There could be many comments in each file and scattered, not just 1 in the head and three in the body. This is just a sample. --&gt;
    &lt;/body&gt;
&lt;/html&gt;
&lt;!-- This comment is the last line of the file --&gt;
</code></pre>
<p>I figured out how to find the doctype and replace it with the tag <code>&lt;doctype&gt;...&lt;/doctype&gt;</code>, but the commenting is giving me a lot of frustration. I want to replace the HTML comments with <code>&lt;comment&gt;...&lt;/comment&gt;</code>. In this example HTML, I was able to replace the first two HTML comments, but anything inside the <code>html</code> tag and the last comment after the closing html tag I was not. </p>
<p>Here is my code:</p>
<pre><code>file = open ("sample.html", "r")
soup = BeautifulSoup(file, "xml")

for child in soup.children:

    # This takes care of the first two HTML comments
    if isinstance(child, bs4.Comment):
        child.replace_with("&lt;comment&gt;" + child.strip() + "&lt;/comment&gt;")

    # This should find all nested HTML comments and replace.
    # It looks like it works but the changes are not finalized
    if isinstance(child, bs4.Tag):
        re.sub("(&lt;!--)|(&amp;lt;!--)", "&lt;comment&gt;", child.text, flags=re.MULTILINE)
        re.sub("(--&gt;)|(--&amp;gr;)", "&lt;/comment&gt;", child.text, flags=re.MULTILINE)

# The HTML comments should have been replaced but nothing changed.
print (soup.prettify(formatter=None))
</code></pre>
<p>This is my first time using BeautifulSoup. How do I use BeautifulSoup to find and replace all HTML comments with the <code>&lt;comment&gt;</code> tag?</p>
<p>Could I convert it to a byte stream, via <code>pickle</code>, serializing it, applying regex, and then deseralize it back to a <code>BeautifulSoup</code> object? Would this work or just cause more problems?</p>
<p>I tried using pickle on the child tag object but deserialization fails with <code>TypeError: __new__() missing 1 required positional argument: 'name'</code>. </p>
<p>Then I tried pickling just the text of the tag, via <code>child.text</code>, but deserialization failed due to <code>AttributeError: can't set attribute</code>. Basically, <code>child.text</code> is read-only, which explains why the regex doesn't work. So, I have no idea how to modify the text.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have a couple of problems:</p>
<ol>
<li><p>You can't modify <code>child.text</code>. it's a read-only property that just calls <a href="http://www.crummy.com/software/BeautifulSoup/bs4/doc/#get-text" rel="nofollow"><code>get_text()</code></a> behind the scenes, and its result is a brand new string unconnected to your document.</p></li>
<li><p><a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow"><code>re.sub()</code></a> doesn't modify anything in-place. Your line</p>
<pre class="lang-python prettyprint-override"><code>re.sub("(&lt;!--)|(&amp;lt;!--)", "&lt;comment&gt;", child.text, flags=re.MULTILINE)
</code></pre>
<p>would have had to be </p>
<pre class="lang-python prettyprint-override"><code>child.text = re.sub("(&lt;!--)|(&amp;lt;!--)", "&lt;comment&gt;", child.text, flags=re.MULTILINE)
</code></pre>
<p>... but that wouldn't work anyway, because of point 1.</p></li>
<li><p>Trying to modify the document by replacing chunks of text in it with a regex is the wrong way to use BeautifulSoup. Instead, you need to find nodes and replace them with other nodes.</p></li>
</ol>
<p>Here's a solution that works:</p>
<pre class="lang-python prettyprint-override"><code>import bs4

with open("example.html") as f:
    soup = bs4.BeautifulSoup(f)

for comment in soup.find_all(text=lambda e: isinstance(e, bs4.Comment)):
    tag = bs4.Tag(name="comment")
    tag.string = comment.strip()
    comment.replace_with(tag)
</code></pre>
<p>This code starts by iterating over the result of a call to <code>find_all()</code>, taking advantage of the fact that we can <a href="http://www.crummy.com/software/BeautifulSoup/bs4/doc/#the-text-argument" rel="nofollow">pass a function</a> as the <code>text</code> argument. In BeautifulSoup, <code>Comment</code> is a subclass of <code>NavigableString</code>, so we search for it as though it were a string, and the <code>lambda ...</code> is just a shorthand for e.g.</p>
<pre><code>def is_comment(e):
    return isinstance(e, bs4.Comment)

soup.find_all(text=is_comment)
</code></pre>
<p>Then, we create a new <code>Tag</code> with the appropriate name, set its content to be the stripped content of the original comment, and replace the comment with the tag we just created.</p>
<p>Here's the result:</p>
<pre><code>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;

&lt;comment&gt;this is an HTML comment&lt;/comment&gt;
&lt;comment&gt;this is another HTML comment&lt;/comment&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
        ...
        &lt;comment&gt;here is a comment inside the head tag&lt;/comment&gt;
&lt;/head&gt;
&lt;body&gt;
        ...
        &lt;comment&gt;Comment inside body tag&lt;/comment&gt;
&lt;comment&gt;Another comment inside body tag&lt;/comment&gt;
&lt;comment&gt;There could be many comments in each file and scattered, not just 1 in the head and three in the body. This is just a sample.&lt;/comment&gt;
&lt;/body&gt;
&lt;/html&gt;
&lt;comment&gt;This comment is the last line of the file&lt;/comment&gt;
</code></pre>
</div>
<span class="comment-copy">Would not result a bad-formed <code>xml</code> file once all changes applied?</span>
<span class="comment-copy">I don't know but <code>Chilkat</code> has a (not free) HTML-to-XML conversion python library which converts all HTML comments to <code>&lt;comment&gt;</code> and the XML file looks good.</span>
<span class="comment-copy">Thank you so much for your help. I'm just reading through this now. If you can, would you please explain or elaborate each line in the python code, starting with the <code>for</code>. Again, I'm still new to Beautiful Soup. Thank you in advance! I'm not at all familiar with the usage of lamda.</span>
<span class="comment-copy">@user3621633 I've added an explanation of what the code does now.</span>
<span class="comment-copy">This worked! Thank you. The only thing I would add is I needed it in XML format. So, I think I have to apply BeautifulSoup with xml just before writing out to the output file. If I use xml the first time, the HTML comments come out as HTML entities (i.e. &amp;lt;) and I'm not sure if BeautifulSoup can work with those.</span>
