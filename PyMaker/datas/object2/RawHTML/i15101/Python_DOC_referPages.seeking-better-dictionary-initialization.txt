<div class="post-text" itemprop="text">
<p>I recently answered a question here with a PowerShell dictionary that used "ContainsKey" to decide whether to define a key value or add to it if necessary. I do that a lot - usually in C#, Python, R, or PowerShell these days, and I tire of it.</p>
<p>Is there a language - or even a library - that could do the following PowerShell code block in a single line?</p>
<pre><code>  if ($sums.ContainsKey($skey))
  {
        $sums[$skey] += $sval 
  }
  else
  {
        $sums[$skey] = $sval 
  }
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://msdn.microsoft.com/en-us/library/dd287191(v=vs.110).aspx" rel="noreferrer"><code>ConcurrentDictionary</code></a> in .NET will allow you to do that, yes:</p>
<pre><code>sums.AddOrUpdate(key, value, (k, v) =&gt; v + value);
</code></pre>
<p>You should be able to use that (with syntax changes, obviously) in PowerShell, too.</p>
<p>Alternatively, if you want to do this for plain <code>Dictionary</code> in .NET, you could add an extension method:</p>
<pre><code>public static void AddOrUpdate&lt;TKey, TValue&gt;(
    this Dictionary&lt;TKey, TValue&gt; dictionary,
    TKey key,
    TValue addValue,
    Func&lt;TKey, TValue, TValue&gt; updateValueFactory)
{
    TValue existing;
    if (dictionary.TryGetValue(key, out existing))
    {
        dictionary[key] = updateValueFactory(key, existing);
    }
    else
    {
        dictionary[key] = addValue;
    }
}
</code></pre>
<p>This is written to have the same effective signature as the <code>ConcurrentDictionary</code> method; if you only ever need a <code>Func&lt;TValue, TValue&gt;</code> for the update factory, you could change it accordingly.</p>
<p>I would imagine you could take the same approach in Python with a helper method - I don't know enough about Python to say whether you could do something like the extension method.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Perl (you did ask "a language"), you just add it:</p>
<pre><code>my %sums;

$sums{$skey} += $sval;
</code></pre>
<p>If the key does not exist it will create it with a value of <code>undef</code>, which numerically equates to zero, and <code>$sval</code> is then added to it.  If the key does exist then the operation is as you would expect.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do that in one line in Powershell:</p>
<pre><code>$sums[$skey] += $sval
</code></pre>
<p>If $skey doesn't exist as a key in $sums, it will be added, with a value of $sval.</p>
<p>If it does exist, the current value will be updated according to the rules for using the += operator on the type of the existing value.  If it's a number, it will do a mathematical addition, if it's a string it will concatenate, and if it's an array or collection it will add it as a new element.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python (I am using Python 3 in these), there is <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow"><code>collections.defaultdict</code></a> whose constructor takes a factory method, that is used to create default values for missing keys. <code>int()</code> returns 0, thus it is good for counting.</p>
<pre><code>&gt;&gt;&gt; import collections
&gt;&gt;&gt; sums = collections.defaultdict(int)
&gt;&gt;&gt; sums['a'] += 23
&gt;&gt;&gt; sums['a'] += 12
&gt;&gt;&gt; sums
defaultdict(&lt;class 'int'&gt;, {'a': 35})
</code></pre>
<p>Or if you have an iterable of things, you can use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>collections.Counter</code></a>:</p>
<pre><code>&gt;&gt;&gt; sums = collections.Counter(['a', 'b']) 
&gt;&gt;&gt; sums['b'] += 2
&gt;&gt;&gt; sums.update(['c', 'd', 'e'])
&gt;&gt;&gt; sums
Counter({'b': 3, 'c': 1, 'a': 1, 'e': 1, 'd': 1})
</code></pre>
<p>Say you have a function that asks for input:</p>
<pre><code>&gt;&gt;&gt; def input_skey():
...    return input("Give a next skey, empty line ends&gt; ")
...
&gt;&gt;&gt; sums = collections.Counter(iter(input_skey, ''))
Give a next skey, empty line ends&gt; foo
Give a next skey, empty line ends&gt; bar
Give a next skey, empty line ends&gt; baz
Give a next skey, empty line ends&gt; baz
Give a next skey, empty line ends&gt; bar
Give a next skey, empty line ends&gt; foo
Give a next skey, empty line ends&gt; baz
Give a next skey, empty line ends&gt; 42
Give a next skey, empty line ends&gt; 
&gt;&gt;&gt; sums
Counter({'baz': 3, 'bar': 2, 'foo': 2, '42': 1})
</code></pre>
<p>(the <code>iter(function, sentinel)</code> makes an iterator of repeated calls to <code>function</code> until the function returns a value that equals to <code>sentinel</code>).</p>
</div>
<span class="comment-copy">This is really too broad. In Python there is the <a href="https://docs.python.org/2/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict()</code> object</a>; <code>sums = defaultdict(int)</code>, then just use <code>sums[key] += val</code> and it'll auto-insert <code>0</code> for you if the key is missing.</span>
<span class="comment-copy">Yeah it is broad, but should I have made 4 questions out of it :)?</span>
<span class="comment-copy">@MartijnPieters: It's <i>sort</i> of too broad - but at the same time I think there are useful answers that can be written, IMO. I wonder if we can fix the question into something more obviously useful.</span>
<span class="comment-copy">@JonSkeet: if this was focused on <b>one</b> language we can avoid the <i>and here is how you do it in language X!</i> list of answers this post is going to attract.</span>
<span class="comment-copy">So four questions apparently... Anyway, I have two answers, that was probably worth the 2 drop in reputation.</span>
<span class="comment-copy">Yes, thank you. Because I used Perl a lot, but 15 years ago, I probably had this in the back of my head. Very cool.</span>
<span class="comment-copy">@Mike Wise: If you used it 15 years ago then you might be interested in Googling "Modern Perl" - Perl has improved a lot.  Don't forget to <code>use strict;</code> and <code>use warnings;</code>.</span>
<span class="comment-copy">I changed the R tag to Perl, because I think that is more relevant.</span>
<span class="comment-copy">I did not know this. And I am a little bit embarrassed that I didn't try it out. Thanks.</span>
<span class="comment-copy">Is that using a normal .NET type under the covers, or a PowerShell-specific one?</span>
<span class="comment-copy">@Jon Skeet: It's a normal .NET type.  You can verify that with (@{}).psobject.TypeNames.  The behavior seems to be implemented in the operator.</span>
<span class="comment-copy">@mjolinor: Right - interesting. So presumably that works on <i>any</i> <code>IDictionary&lt;,&gt;</code>? Really must learn PowerShell some time.</span>
