<div class="post-text" itemprop="text">
<p>Given this sample code:</p>
<pre><code>import pdb

for i in range(10):
  pdb.set_trace()
  print(str(i))
</code></pre>
<p>When I get the prompt from PDB, how can I skip an iteration of the loop, with the <em>continue</em> loop control statement, when it's also used by PDB, to continue code execution?</p>
</div>
<div class="post-text" itemprop="text">
<p>Sounds like a strange thing to want to do. You should be able to use the <a href="https://docs.python.org/3/library/pdb.html#pdbcommand-jump" rel="noreferrer">jump command</a> though. You'll probably need to add a pass statement at the end of your for loop so you can jump to the end of the loop. If you're not sure of the line numbers of your code then you can use <a href="https://docs.python.org/3/library/pdb.html#pdbcommand-ll" rel="noreferrer"><code>ll</code></a> to find out the line numbers of your loop.</p>
<pre><code>&gt; c:\run.py(5)&lt;module&gt;()
-&gt; print(i)
(Pdb) ll
  1     import pdb
  2     
  3     for i in range(10):
  4         pdb.set_trace()
  5  -&gt;     print(i)
  6         pass
(Pdb) j 6
&gt; c:\run.py(6)&lt;module&gt;()
-&gt; pass
(Pdb) c
&gt; c:\python\run.py(4)&lt;module&gt;()
-&gt; pdb.set_trace()
(Pdb) c
1
&gt; c:\python\run.py(5)&lt;module&gt;()
-&gt; print(i)
</code></pre>
<p>It's worth noting that jumping to the <code>for</code> line will restart the loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot use <code>continue</code> because new statements in the debugger need to be <em>complete</em> and valid without any other context; <code>continue</code> must be given inside a loop construct <em>when being compiled</em>. As such using <code>!continue</code> (with the <code>!</code> to prevent <code>pdb</code> from interpreting the command) cannot be used even if the debugger is processing a loop construct.</p>
<p>You can use the <code>j[ump]</code> command, <em>provided you have a <strong>later</strong> statement to jump to</em>. If your loop is empty after the statements you wanted to jump over, you can only 'rewind':</p>
<pre><code>$ bin/python test.py
&gt; /.../test.py(5)&lt;module&gt;()
-&gt; print(str(i))
(Pdb) l
  1     import pdb
  2     
  3     for i in range(10):
  4         pdb.set_trace()
  5  -&gt;     print(str(i))
  6     
[EOF]
(Pdb) j 3
&gt; /.../test.py(3)&lt;module&gt;()
-&gt; for i in range(10):
</code></pre>
<p><code>j 3</code> jumped to line 3, not skipping anything; line 3 will be re-executed including setting up the <code>range()</code>. You could jump to line 4, but then the <code>for</code> loop doesn't advance.</p>
<p>You'd need to add another statement at the end of the loop to jump to for Python to continue from. That statement can be a <code>print()</code> or a <code>pass</code> or anything else that doesn't have to alter your state. You could even use <code>continue</code> as the last statement. I used <code>i</code>:</p>
<pre><code>for i in range(10):
    pdb.set_trace()
    print(str(i))
    i  # only here to jump to.
</code></pre>
<p>Demo:</p>
<pre><code>$ bin/python test.py
&gt; /.../test.py(5)&lt;module&gt;()
-&gt; print(str(i))
(Pdb) l
  1     import pdb
  2     
  3     for i in range(10):
  4         pdb.set_trace()
  5  -&gt;     print(str(i))
  6         i  # only here to jump to.
  7     
[EOF]
(Pdb) j 6
&gt; /.../test.py(6)&lt;module&gt;()
-&gt; i  # only here to jump to.
(Pdb) c
&gt; /.../test.py(4)&lt;module&gt;()
-&gt; pdb.set_trace()
(Pdb) s
&gt; /.../test.py(5)&lt;module&gt;()
-&gt; print(str(i))
(Pdb) j 6
&gt; /.../test.py(6)&lt;module&gt;()
-&gt; i  # only here to jump to.
(Pdb) i
1
(Pdb) c
&gt; /.../test.py(4)&lt;module&gt;()
-&gt; pdb.set_trace()
(Pdb) s
&gt; /.../test.py(5)&lt;module&gt;()
-&gt; print(str(i))
(Pdb) j 6
&gt; /.../test.py(6)&lt;module&gt;()
-&gt; i  # only here to jump to.
(Pdb) i
2
</code></pre>
<p>From <a href="https://docs.python.org/2/library/pdb.html#debugger-commands" rel="noreferrer"><em>Debugger Commands</em></a>:</p>
<blockquote>
<p>j(ump) <em>lineno</em><br/>
  Set the next line that will be executed. Only available in the bottom-most frame. This lets you jump back and execute code again, or jump forward to skip code that you don’t want to run.</p>
<p>It should be noted that not all jumps are allowed — for instance it is not possible to jump into the middle of a <code>for</code> loop or out of a <code>finally</code> clause.</p>
</blockquote>
</div>
<span class="comment-copy">So, to be clear, you want the code to behave as though a <code>continue</code> statement were executed? You don't want <code>str(i)</code> to get printed for that loop, right?</span>
<span class="comment-copy">That's correct!</span>
<span class="comment-copy">Incidentally, for the general problem of "how do I make a distinction between pdb commands and Python expressions that just look like pdb commands?", you can prefix your Python expression with an exclamation point. But this doesn't appear to work for <code>continue</code> in particular.</span>
<span class="comment-copy">@MartijnPieters If you add a pass statement at the end of the loop you can jump to the end of the loop, then continue and the next iteration of the loop will be initialised properly.</span>
<span class="comment-copy">Thanks for all of you! I also appreciate Kevin's comment, which is kind of a confirmation, that this can only be done with a workaround.</span>
<span class="comment-copy">That's a solution. Thank you very much! Though if anyone knows a solution just to execute a <i>continue</i> statement in the context, it would be even better.</span>
