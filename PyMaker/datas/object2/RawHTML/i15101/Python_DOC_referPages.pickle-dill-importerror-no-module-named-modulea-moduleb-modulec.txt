<div class="post-text" itemprop="text">
<p>I have a problem with <code>pickle.load()</code> from a file. Dump and load is done in <code>dill_read_write.py</code>:</p>
<p><strong>dill_read_write.py</strong></p>
<pre><code>import os
import dill
from contact_geometry import ContactGeometry

def write_pickle(obj, filename):
    os.chdir(os.path.abspath(os.path.join(os.path.dirname(__file__))))
    filename = os.path.join(os.getcwd(), filename)
    with open(filename, 'wb') as output_:
        dill.dump(obj, output_)

def read_pickle(filename):
    with open(filename, 'rb') as input_:
        return dill.load(input_)

if __name__ == "__main__":
    read_pickle("ground_.pkl")
</code></pre>
<p>Saving object <code>ContactGeometry</code> data to pickle file is done when the PyQt application (project) is running. Function <code>write()</code> is called in <code>moduleC.py</code>:</p>
<p><strong>moduleC.py</strong></p>
<pre><code>from contact_geometry import ContactGeometry
from moduleA.moduleB import dill_read_write

class Foo(FooItem):
    def __init__(self,...):
        ...
    def createGeometry(self):
        contact_geometry_ = ContactGeometry()
        #   save object to pickle file
        dill_read_write.write_pickle(contact_geometry_, "object_data.pkl") 
</code></pre>
<p>The object is saved and pickle file is created. But when I run only the file <code>dill_read_write.py</code> to read (load) object data from pickle file I get the following error:</p>
<pre><code>    Traceback (most recent call last):
File "C:\projectName\moduleA\moduleB\dill_read_write.py", line 29, in &lt;module&gt;
read("ground_.pkl")
File "C:\projectName\moduleA\moduleB\dill_read_write.py", line 24, in read
return dill.load(input_)
File "C:\Python27\lib\site-packages\dill-0.2.2-py2.7.egg\dill\dill.py", line 199, in load
obj = pik.load()
File "C:\Python27\Lib\pickle.py", line 858, in load
dispatch[key](self)
File "C:\Python27\Lib\pickle.py", line 1090, in load_global
klass = self.find_class(module, name)
File "C:\Python27\lib\site-packages\dill-0.2.2-py2.7.egg\dill\dill.py", line 278, in find_class
return StockUnpickler.find_class(self, module, name)
File "C:\Python27\Lib\pickle.py", line 1124, in find_class
__import__(module)
ImportError: No module named moduleA.moduleB.contact_geometry
</code></pre>
<p>I searched a bit and found that <code>dill</code> can perform better than <code>pickle</code> with classes but I am having problems to implement it. I've also found that I have to implement <code>__reduce__()</code> in class <code>ContactGeometry</code> in file <code>contact_geometry.py</code>.</p>
<p><strong>contact_geometry.py</strong></p>
<pre><code>class ContactGeometry(object):
    def __init__(self, ...):
        ...    
    def __reduce__(self):
        return (self.__class__, (os.path.realpath(__file__))
</code></pre>
<p>But I am not sure what should return this method? How could I successfully load pickle file from the current situation?</p>
<p>Below is the project structure, if it is any help.</p>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/MeHXb.png"/></p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot run a python file <em>from within</em> a package like that; it wouldn't find the toplevel package names. I'd propose any of the following:</p>
<ol>
<li><p>Write a start script in at the top level (where the <code>main.py</code> is), that imports and runs the <code>read_write_dill</code> from <code>moduleA.moduleB</code></p></li>
<li><p>Instead in the top level directory, where the <code>main</code> is, you can run
that module with <code>python -m moduleA.moduleB.dill_read_write</code>.</p></li>
<li><p>Or, my preferred alternative, write a <a href="https://docs.python.org/3/distutils/setupscript.html" rel="nofollow"><code>setup.py</code></a> for your project and write a <a href="https://docs.python.org/2/distutils/setupscript.html#installing-scripts" rel="nofollow">script</a> for that utility.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>I'm the <code>dill</code> author.  It's hard to tell how you are running the code, but it looks like the issue is that one way you are running the code and the module name as in @Antti Haapala's answer.  His suggestions are also good ones to follow.</p>
<p>I'll add thisâ€¦ You need to make sure that (1) <code>moduleA.moduleB.contact_geometry</code> is on the <code>PYTHONPATH</code>, and (2) you are not dumping the module as <code>__main__.moduleB.contact_geometry</code> and trying to load it as <code>moduleA.moduleB.contact_geometry</code> -- <code>dill</code> treats <code>__main__</code> as if it were a module (for the most part).</p>
<p>You shouldn't need to add <code>__reduce__</code> methods to your classes, however.</p>
</div>
<span class="comment-copy">Do you have an` __all__` in each of the <code>__init__</code>s?</span>
<span class="comment-copy">Ex. `__all__ = ["foo.py","bar.py"]</span>
<span class="comment-copy">At the moment no. If I understand your suggestion for example (see project tree structure figure), for <code>__init__.py</code> in package <code>moduleB</code> I should add: <code>__all__=[contac_geometry.py, moduleC.py, dill_read_write.py?]</code>?</span>
<span class="comment-copy">@Antii Haapala I went for your 1. suggestion and it worked! Thanks. Saved a lot of time. I'll try to learn something new about your other suggestions.</span>
<span class="comment-copy">Thanks for the suggestions, I have not tried it yet, as I used 1. suggestion of @Antti Haapala's answer and it worked. I will remove <code>__reduce__</code> as you suggested.</span>
