<div class="post-text" itemprop="text">
<p>I can't quite understand what the difference is between the two print statements below for the number I am trying to express in scientific notation.  I thought the the bottom one is supposed to allow 2 spaces for the printed result, and move the decimal place 4 times, but the result I get does not corroborate that understanding. As far as the first one, What does 4e mean?</p>
<pre><code>&gt;&gt;&gt; print('{:.4e}'.format(3454356.7))
3.4544e+06

&gt;&gt;&gt; print('{:2.4}'.format(3454356.7))
3.454e+06
</code></pre>
<p>All help greatly appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>In the first example , <code>4e</code> means, 4 decimal places in scientific notation. You can come to know that by doing </p>
<pre><code>&gt;&gt;&gt; print('{:.4e}'.format(3454356.7))
3.4544e+06
&gt;&gt;&gt; print('{:.5e}'.format(3454356.7))
3.45436e+06
&gt;&gt;&gt; print('{:.6e}'.format(3454356.7))
3.454357e+06
</code></pre>
<p>In the second example, <code>.4</code> , means 4 significant figures. And <code>2</code> means to fit the whole data into 2 characters</p>
<pre><code>&gt;&gt;&gt; print('{:2.4}'.format(3454356.7))
3.454e+06
&gt;&gt;&gt; print('{:2.5}'.format(3454356.7))
3.4544e+06
&gt;&gt;&gt; print('{:2.6}'.format(3454356.7))
3.45436e+06
</code></pre>
<p>Testing with different value of <code>2</code></p>
<pre><code>&gt;&gt;&gt; print('-{:20.6}'.format(3454356.7))
-         3.45436e+06
</code></pre>
<p>You can learn more <a href="https://docs.python.org/2/library/string.html#formatspec" rel="nofollow">from the python documentation on <code>format</code></a></p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to produce a float, you will have to specify the float type:</p>
<pre><code>&gt;&gt;&gt; '{:2.4f}'.format(3454356.7)
'3454356.7000'
</code></pre>
<p>Otherwise, if you don’t specify a type, Python will choose <code>g</code> as the type for which precision will mean the precision based on its <a href="http://en.wikipedia.org/wiki/Significant_figures" rel="nofollow">significant figures</a>, the digits <em>before</em> and <em>after</em> the decimal point. And since you have a precision of <code>4</code>, it will only display 4 digits, falling back to scientific notation so it doesn’t add false precision.</p>
<blockquote>
<p>The <em>precision</em> is a decimal number indicating how many digits should be displayed after the decimal point for a floating point value formatted with <code>'f'</code> and <code>'F'</code>, or <strong>before and after the decimal point for a floating point value formatted with <code>'g'</code> or <code>'G'</code></strong>. For non-number types the field indicates the maximum field size - in other words, how many characters will be used from the field content. The precision is not allowed for integer values.</p>
</blockquote>
<p>(<a href="https://docs.python.org/3/library/string.html#formatstrings" rel="nofollow">source</a>, emphasis mine)</p>
<p>Finally, note that the width (the <code>2</code> in above format string) includes the <em>full width</em>, including digits before the decimal point, digits after it, the decimal point itself, <em>and</em> the components of the scientific notation. The above result would have a width of 12, so in this case, the width of the format string is simply ignored.</p>
</div>
<span class="comment-copy">Note that the <code>2</code>, the field width in <code>'{:2.4}'</code>, is ignored because the data can't fit in two characters.</span>
<span class="comment-copy">Had it been a significantly larger size, say <code>'{:10.4}'</code>, Python would have prefixed spaces as needed to achieve that number of characters (<code>' 3.454e+06'</code>). Inserting a <code>0</code> will change the prefix character to <code>0</code>: <code>'{:012.4}'.format(3454356.7)</code> gives <code>'0003.454e+06'</code>.</span>
<span class="comment-copy">Thanks everybody.  I understand now.  Thank you.</span>
