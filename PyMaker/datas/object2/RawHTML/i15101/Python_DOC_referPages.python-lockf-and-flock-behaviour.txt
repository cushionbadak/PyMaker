<div class="post-text" itemprop="text">
<p>I have read enough posts on stackoverflow regarding the difference b/w <code>flock/lockf/fcntl</code> but I am unable to answer the below observation:</p>
<pre><code>&gt;&gt;&gt; import fcntl
&gt;&gt;&gt; a = open('/tmp/locktest', 'w')
&gt;&gt;&gt; b = open('/tmp/locktest', 'w')
&gt;&gt;&gt; fcntl.lockf(a, fcntl.LOCK_EX | fcntl.LOCK_NB)
&gt;&gt;&gt; fcntl.lockf(a, fcntl.LOCK_EX | fcntl.LOCK_NB)
&gt;&gt;&gt; fcntl.lockf(b, fcntl.LOCK_EX | fcntl.LOCK_NB)
&gt;&gt;&gt;
&gt;&gt;&gt; a.close()
&gt;&gt;&gt; b.close()

&gt;&gt;&gt; a = open('/tmp/locktest', 'w')
&gt;&gt;&gt; b = open('/tmp/locktest', 'w')
&gt;&gt;&gt; fcntl.flock(a, fcntl.LOCK_EX | fcntl.LOCK_NB)
&gt;&gt;&gt; fcntl.flock(a, fcntl.LOCK_EX | fcntl.LOCK_NB)
&gt;&gt;&gt; fcntl.flock(b, fcntl.LOCK_EX | fcntl.LOCK_NB)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IOError: [Errno 35] Resource temporarily unavailable
</code></pre>
<p>Why is the behaviour different in the two cases? I know the obvious answer that these are two different locking mechanisms. I am looking for:</p>
<ol>
<li>What actually lockf() or flock() does to file (inode/fd)?</li>
<li>As per the demo, are we allowed taking the same lock recursively?</li>
</ol>
<p>I understand the basics of <code>fds</code> and stuff so I would prefer to have a technical answer with more insights to operating system level details.</p>
<p>OSX 10.9.3, Python: 2.7.5</p>
</div>
<div class="post-text" itemprop="text">
<p>A nice article about this: 
<a href="http://0pointer.de/blog/projects/locking.html" rel="nofollow noreferrer">On the Brokenness of File Locking</a></p>
<p>In short:</p>
<ul>
<li><p>POSIX locks:</p>
<blockquote>
<p>lockf() most of the time implemented as just an interface of fcntl()</p>
<p>fcntl() locks are bound to processes, not file descriptors. <strong>If a process has multiple open file descriptors for a particular file, any one of these file descriptors used for acquiring locking will <em>RESET</em> the lock.</strong> </p>
</blockquote></li>
<li><p>BSD lock:</p>
<blockquote>
<p>flock() locks are bound to file descriptors, not processes. </p>
</blockquote></li>
</ul>
<h2>Furthermore</h2>
<p>A good analysis with tests:
<a href="http://loonytek.com/2015/01/15/advisory-file-locking-differences-between-posix-and-bsd-locks/" rel="nofollow noreferrer">Advisory File Locking – My take on POSIX and BSD locks</a></p>
<p>Excerpt of Summary:</p>
<blockquote>
<ul>
<li>fcntl and flock style locks are completely orthogonal to each other. Any system providing both(Linux does) will be treating locks obtained through each one of them independently.</li>
<li>Both POSIX and BSD locks are automatically released when the process exits or is aborted. </li>
<li>Both POSIX and BSD locks are preserved across execve calls except when the process has set FD_CLOEXEC flag forcing the file descriptor to be closed, and not inherited by the new process.</li>
</ul>
</blockquote>
</div>
<span class="comment-copy">I've taken the liberty to edit the question to actually include a question. Please review and edit if that's not what you're asking. Thanks.</span>
<span class="comment-copy">@NPE: It was part of my first sentence though its better to have it explicitly put there. Thanks :)</span>
<span class="comment-copy">A fair assessment. It should be emphasized that <b>POSIX locks silently fail under multithreading scenarios</b> and should (<i>arguably</i>) be considered harmful for use in modern software stacks – <a href="https://wiki.python.org/moin/GlobalInterpreterLock" rel="nofollow noreferrer">GIL</a> notwithstanding. More critically, it should be emphasized that <b>both POSIX and BSD locks on group- or world-readable files pose an extreme security risk.</b> Why? Because <i>any</i> user with read permissions for the file to be locked can permanently deadlock your Python application by preemptively acquiring that lock first and then never releasing it.</span>
<span class="comment-copy"><b>tl;dr:</b> <b>(A)</b> in-memory locks (e.g., <a href="https://docs.python.org/3/library/multiprocessing.html#synchronization-between-processes" rel="nofollow noreferrer"><code>multiprocessing</code> module</a> synchronization primitives) are strongly preferable to both BSD- and POSIX-style locks, <b>(B)</b> BSD-style <code>flock</code> locks are strongly preferable to POSIX-style <code>fcntl</code> locks, and <b>(C)</b> neither BSD- nor POSIX-style locks should be used unless permissions for the file(s) to be locked are strictly constrained to at most <code>0600</code>.</span>
