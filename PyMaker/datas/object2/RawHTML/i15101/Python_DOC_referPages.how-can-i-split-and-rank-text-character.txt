<div class="post-text" itemprop="text">
<p>It may be easy to do but as a beginner it seems to me trivial.</p>
<p>I have text like this or file containing this text:</p>
<pre><code>'fdhdhjduvduvfbvhufbvufvhifbusdbjhkbueigvuerafvguavgugvg'
</code></pre>
<p>How can use Python to split the text like this:</p>
<pre><code>'fdh dhj duv duv fbv huf bvu fvh ifb usd bjh kbu eig vue raf vgu avg ugvg'
'f dhd hjd uvd uvf bvh ufb vuf vhi fbu sdb jhk bue igv uer afv gua vgu gvg'
'fd hdh jdu vdu vfb vhu fbv ufv hif bus dbj hkb uei gvu era fvg uav gug vg'
</code></pre>
<p>Then need to calculate frequency of three seq (for example how many 'fdh') and rank all most frequented seq.</p>
<p>I saw the answers here: <a href="https://stackoverflow.com/q/434287">What is the most "pythonic" way to iterate over a list in chunks?</a></p>
<p>But I do not know which one is good for me. Also I need to open a file that contain the text and write to another file. Please provide me an expert opinion.</p>
<p>EDIT:</p>
<p><code></code></p>
<pre><code>with open(fasta, 'r') as fin, open(outfile, 'w') as fout:
        for item in Counter(s[i:i+4] for i in range(len(fin))).most_common():
            fout.write(item)
</code></pre>
<p></p></div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; s = 'fdhdhjduvduvfbvhufbvufvhifbusdbjhkbueigvuerafvguavgugvg'
&gt;&gt;&gt; for item in Counter(s[i:i+3] for i in range(len(s))).most_common():
...     print item
... 
('fbv', 2)
('vgu', 2)
('duv', 2)
('raf', 1)
('fbu', 1)
('dbj', 1)
('uei', 1)
('bvu', 1)
('vg', 1)
('bjh', 1)
('hjd', 1)
('bvh', 1)
('uvd', 1)
('ugv', 1)
('uvf', 1)
('kbu', 1)
('igv', 1)
('usd', 1)
('dhj', 1)
('fvh', 1)
('fvg', 1)
('dhd', 1)
('gvg', 1)
('afv', 1)
('uer', 1)
('gvu', 1)
('huf', 1)
('eig', 1)
('bus', 1)
('ufb', 1)
('avg', 1)
('sdb', 1)
('hif', 1)
('hkb', 1)
('gug', 1)
('uav', 1)
('ufv', 1)
('bue', 1)
('vuf', 1)
('gua', 1)
('vue', 1)
('vdu', 1)
('g', 1)
('vhu', 1)
('fdh', 1)
('jhk', 1)
('vfb', 1)
('vhi', 1)
('era', 1)
('ifb', 1)
('jdu', 1)
('hdh', 1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use regular expressions to split the string into chunks of 3, then use a dictionary comprehension to generate a dict which counts occurrences of each chunk.</p>
<pre><code>import re

chunked = re.findall('...', your_string)
result = {key: chunked.count(k) for key in set(chunked)}
</code></pre>
<p>EDIT: to do the chunking without regex, and to capture the different ways of partitioning the string into chunks of 3, use a list comprehension:</p>
<pre><code>chunked = [your_string[i:i+3] for i in xrange(len(your_string))]
</code></pre>
<p>It's inelegant, but to handle the <code>'f'</code> and <code>'fd'</code> cases, you can simply concatenate these to the end of <code>chunked</code>:</p>
<pre><code>chunked = [your_string[i:i+3] for i in xrange(len(your_string))] + [your_string[:1], your_string[:2]]
</code></pre>
<p>Then apply the dictionary comprehension as before:</p>
<pre><code>result = {key: chunked.count(k) for key in set(chunked)}
</code></pre>
<p>Result:</p>
<pre><code>{'afv': 1,
'avg': 1,
'bjh': 1,
'bue': 1,
'bus': 1,
'bvh': 1,
'bvu': 1,
'dbj': 1,
'dhd': 1,
'dhj': 1,
'duv': 2,
'eig': 1,
'era': 1,
'f': 1,
'fbu': 1,
'fbv': 2,
'fd': 1,
'fdh': 1,
'fvg': 1,
'fvh': 1,
'g': 1,
'gua': 1,
'gug': 1,
'gvg': 1,
'gvu': 1,
'hdh': 1,
'hif': 1,
'hjd': 1,
'hkb': 1,
'huf': 1,
'ifb': 1,
'igv': 1,
'jdu': 1,
'jhk': 1,
'kbu': 1,
'raf': 1,
'sdb': 1,
'uav': 1,
'uei': 1,
'uer': 1,
'ufb': 1,
'ufv': 1,
'ugv': 1,
'usd': 1,
'uvd': 1,
'uvf': 1,
'vdu': 1,
'vfb': 1,
'vg': 1,
'vgu': 2,
'vhi': 1,
'vhu': 1,
'vue': 1,
'vuf': 1}
</code></pre>
</div>
<span class="comment-copy">This may be useful to you: <a href="http://stackoverflow.com/q/312443/953482">How do you split a list into evenly sized chunks in Python?</a> For frequency counting, Try <code>collections.Counter</code>. You can learn how to read from and write to files in pretty much any Python tutorial, ex <a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">this</a> one.</span>
<span class="comment-copy">Looks like you want the <a href="http://en.wikipedia.org/wiki/N-gram" rel="nofollow noreferrer">n-gram</a> algorithm (or the trigram to be more specific). Python has a n-gram module, I would start there.</span>
<span class="comment-copy"><code>fin</code> is a file object and has no length. Modify to <code>fin.read()</code></span>
<span class="comment-copy">Thanks that solved the problem</span>
<span class="comment-copy">Thank you for the answer. It solves the problem.</span>
<span class="comment-copy">But if I want to print like this: 'fdh dhj duv duv fbv huf bvu fvh ifb usd bjh kbu eig vue raf vgu avg ugv' 'dhd hjd uvd uvf bvh ufb vuf vhi fbu sdb jhk bue igv uer afv gua vgu gvg' 'hdh jdu vdu vfb vhu fbv ufv hif bus dbj hkb uei gvu era fvg uav gug' What modification I need to include?</span>
<span class="comment-copy">I've tried your code. It only shows the first one. I need also second and third. How could I achieve that?</span>
<span class="comment-copy">I've modified my answer to handle those cases, and only to use 'pure' Python.</span>
<span class="comment-copy">Thank you very much.</span>
