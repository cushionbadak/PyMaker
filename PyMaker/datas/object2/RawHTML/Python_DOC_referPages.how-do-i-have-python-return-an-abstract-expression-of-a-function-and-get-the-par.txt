<div class="post-text" itemprop="text">
<p>Assume I defined a function</p>
<pre><code>def pdf(x_1, x_2):
    return ((x_1 ** 2.0) * ((1.0 - x_2) ** 3.0)) + (((1.0 - x_1) ** 3.0) * (x_1 ** 2.0) * (1.0 + x_2) ** 3.0)
</code></pre>
<p>Is there a way for me to return the fully expanded abstract expression of function <code>pdf</code>, like the following</p>
<pre><code>2.0 * x_1 ** 2.0 - 3.0 * x_1 ** 3.0 + 3.0 * x_1 ** 4.0 - x_1 ** 5.0 - 9.0 * x_1 ** 3.0 * x_2 + 9.0 * x_1 ** 4 * x_2 - 3 * x_1 ** 5.0 * x_2 + 6.0 * x_1 ** 2.0 * x_2 ** 2.0 - 9.0 * x_1 ** 3.0 * x_2 ** 2.0 + 9.0 * x_1 ** 4.0 * x_2 ** 2.0 - 3.0 * x_1 ** 5.0 * x_2 ** 2.0 - 3.0 * x_1 ** 3.0 * x_2 ** 3.0 + 3.0 * x_1 ** 4.0 * x_2 ** 3.0 - x_1 ** 5.0 * x_2 ** 3.0
</code></pre>
<p>Also, is it possible to return the coefficients and powers in each term as well? Is everything described above even doable in Python? Or should I seek to use Mathematica?</p>
<p>Any advice will be welcome! Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>This cannot be done with any arbitrary function, but the <a href="https://docs.sympy.org/latest/tutorial/basic_operations.html" rel="nofollow noreferrer">SymPy</a> library should let you do this in a fairly straightforward way for algebraic expressions. To use your example above:</p>
<pre><code>import sympy
x_1, x_2 = sympy.symbols("x_1 x_2")
pdf = ((x_1 ** 2.0) * ((1.0 - x_2) ** 3.0)) + (((1.0 - x_1) ** 3.0) * (x_1 ** 2.0) * (1.0 + x_2) ** 3.0)
expanded = sympy.expand(pdf)
print(expanded) # x_1**2.0*(-x_1 + 1.0)**3.0*(x_2 + 1.0)**3.0 + x_1**2.0*(-x_2 + 1.0)**3.0
example_solution = pdf.subs(x_1, 3).subs(x_2, 5) # -16128.0000000000
</code></pre>
</div>
