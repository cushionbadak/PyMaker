<div class="post-text" itemprop="text">
<p>I know it is possible to create session object using session_transaction() method. However, is there a way to access the current session object which gets created when for example "/" route gets hit? I did <code>from flask import session</code> to access the session but it's empty. Let me know if it is possible. Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://flask.pocoo.org/docs/0.12/testing/#accessing-and-modifying-sessions" rel="nofollow noreferrer">This</a> is what you're looking for. As it says however, you'd have to use the instantiation you create in your <code>with</code> statement.</p>
<pre><code>with app.test_client() as c:
    with c.session_transaction() as sess:
        sess['a_key'] = 'a value'

    # once this is reached the session was stored
</code></pre>
<p>Note that this won't work if you run your test within the scope of the <code>with</code> statement.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to read the session data written in your view from the test, one way is to mock the session view as a dict and verify the session in your test. Here's an example using <a href="https://docs.python.org/3/library/unittest.mock.html#module-unittest.mock" rel="nofollow noreferrer">Python's unittest.mock</a>:</p>
<p><strong>app.py</strong></p>
<pre><code>from flask import Flask, session, request

app = Flask(__name__)

app.config["SECRET_KEY"] = "my secret key"

@app.route("/", methods=["POST"])
def index():
    session["username"] = request.form["username"]
    return "Username saved in session"
</code></pre>
<p><strong>test_index.py</strong></p>
<pre><code>from unittest.mock import patch
from app import app


def test_index():
    with patch("app.session", dict()) as session:
        client = app.test_client()
        response = client.post("/", data={
            "username": "test"
        })
        assert session.get("username") == "test"
        assert response.data == b"Username saved in session"
</code></pre>
<p>You can use any mocking solution you prefer, of course.</p>
</div>
