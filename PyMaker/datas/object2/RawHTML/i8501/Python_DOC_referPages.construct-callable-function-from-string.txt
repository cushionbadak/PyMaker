<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/3061/calling-a-function-of-a-module-by-using-its-name-a-string">Calling a function of a module by using its name (a string)</a>
<span class="question-originals-answer-count">
                    11 answers
                </span>
</li>
</ul>
</div>
<p>How to construct and call a function from a string?
For example, consider three different functions and a list of strings, I want to be able to use the items in list of strings to construct and call the appropriate function</p>
<pre><code>def do_function1():
    return 'done function1'

def do_function2():
    return 'done function2'

def do_function3():
    return 'done function3'

listOfstr = ['function1','function2','function3']  

for item in listOfstr:
    result = 'do_'+item()
    print(result)

result = 'do_'+item()
TypeError: 'str' object is not callable
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problematic code is</p>
<pre><code>listOfstr = ['function1','function2','function3']  

for item in listOfstr:
    result = 'do_'+item()
</code></pre>
<p>In the first loop <code>item</code>, will have the value <code>'function1'</code>. You are calling this string as if it were a function. But strings are not callable and have no code assigned to them!</p>
<p>Then, you go on with the for loop before doing anything.</p>
<p>Simply refer to <code>item</code>, like this:</p>
<pre><code>for item in listOfstr:
    func_name = 'do_' + item
    func = globals()[func_name]
    func()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The most explicit way would be to have a dictionary of those functions:</p>
<pre><code>funcs = {
    'function1': do_function1,
    'function2': do_function2,
    'function3': do_function3,
}

funcs[item]()
</code></pre>
<p>That way you can also name your functions whatever you want, decouple from item names, make them methods, move to other modules etc without breaking the general design. The other way is globals, as already answered.</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, usually you won't need this. Instead of putting strings in a list, you can also put functions themselves in a list like this:</p>
<pre><code>def do_function1():
    return 'done function1'

def do_function2():
    return 'done function2'

def do_function3():
    return 'done function3'

list_of_functions = [do_function1, do_function2, do_function3]

for item in list_of_functions:
    result = item()
    print(result)
</code></pre>
<p>However, if you insist, you can do it like this:</p>
<pre><code>locals()["do_function1"]()
</code></pre>
<p><code>locals()</code> gives you a dictionary of locally defined objects by name.</p>
</div>
<span class="comment-copy">Are you looking for <a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow noreferrer"><code>eval</code></a>?</span>
<span class="comment-copy">This similar question might help: <a href="http://stackoverflow.com/questions/3061/calling-a-function-of-a-module-from-a-string-with-the-functions-name-in-python">Calling a function of a module from a string with the function's name in Python</a></span>
<span class="comment-copy">can't u just match string to call a function at the place where your return statemnet ends.  string x="dosmething."  and if(x==do something ){call functions(); or better use switch}</span>
