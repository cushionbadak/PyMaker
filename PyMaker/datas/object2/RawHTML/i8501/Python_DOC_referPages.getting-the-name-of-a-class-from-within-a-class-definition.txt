<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/11408148/how-to-get-derived-class-name-from-base-class">how to get derived class name from base class</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>So I have my base class:</p>
<pre><code>class Foo():
    pass
</code></pre>
<p>I'm never going to instantiate this class - I just want it as a custom namespace.  One of the things I want from it is its name:</p>
<pre><code>&gt;&gt;&gt; Foo.__name__
'Foo'
</code></pre>
<p>But I want to change the interface to this, so that there's no underscores.  Getting the name of the class from the class object is going to happen a lot, so it should be cleaner:</p>
<pre><code>class Foo:
    def name():
        return Foo.__name__
</code></pre>
<p>This works great!  Oh, except I have the name "Foo" hard coded.  I might as well just have it return a string.  That's not good enough, because I need to inherit this adjustment:</p>
<pre><code>class Bar(Foo):
   pass

&gt;&gt;&gt; Bar.name()
'Foo'
</code></pre>
<p>No bueno.</p>
<p>Basically, I need a class function that returns the name of the class, and which will still work when inherited.  I can't use self because I'm not making instances.  Is there anything which will achieve a similar result?  Do functions know about the namespace they are called from?  If I really need to use objects I will, but for my purposes that will be uglier than a simple class hierarchy.</p>
<p>EDIT:  I do not not believe this question is the same as the one it has been linked with.  The solutions provided to the other question - mainly invoking the .__class__ attribute - would not work as an answer to this question because in my example I explicitly avoid instantiating objects.  Also, the best answer provided here (using the @classmethod decorator to get the class object as a "self"-esque arg) appears nowhere in the linked alternative.  Also, I believe my question to be framed in a clearer and more basic way than its purported duplicate.  The same goes for the answer chosen.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just make it a class method with <a href="https://docs.python.org/3/library/functions.html#classmethod" rel="nofollow noreferrer"><code>@classmethod</code></a> and return the name of the class that's passed in:</p>
<pre><code>class Foo:
    @classmethod
    def name(cls):
        return cls.__name__

class Bar(Foo): pass
</code></pre>
<p>This returns the correct name in each case:</p>
<pre><code>&gt;&gt;&gt; Foo.name()
'Foo'
&gt;&gt;&gt; Bar.name()
'Bar'
</code></pre>
</div>
<span class="comment-copy">Read up on <code>@classmethod</code></span>
<span class="comment-copy">Your example errors for me, because it expects a <code>self</code> argument</span>
<span class="comment-copy">Reading about decorators now, thanks for the lead.  Looks awesome.</span>
