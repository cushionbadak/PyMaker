<div class="post-text" itemprop="text">
<p>I am creating a graph from a weighted adjacency matrix the size of 222 x 222 nodes. All of the weights given in the matrix are a floating point numbers between <code>0.42757498546089029</code> and <code>1.6671726002927263</code>. <code>nx.minimum_spanning_tree(G, weight = "weight")</code> method gives me the first picture below, meanwhile if I multiply all matrix values by <code>100.0</code> the same method gives me the second picture. This doesn't occur while plotting the same with <code>igraph</code>. Documentation of <code>Networkx</code> is silent about precision issues. Do you know why it might occur?
<a href="https://i.stack.imgur.com/RwRWf.png" rel="nofollow noreferrer"><img alt="Minimum spanning tree of a graph with potential precision issues" src="https://i.stack.imgur.com/RwRWf.png"/></a>
<a href="https://i.stack.imgur.com/Rr4VG.png" rel="nofollow noreferrer"><img alt="Minimum spanning tree of a graph" src="https://i.stack.imgur.com/Rr4VG.png"/></a></p>
<p>networkx code:</p>
<pre><code>G=nx.from_numpy_matrix(M)
G1=nx.minimum_spanning_tree(G, weight = "weight")

labels = {i : node_names[i][1] for i in G1.nodes()}
colors = {i : node_attributes[labels[i]] for i in G1.nodes()}
for i in G1.nodes():
    G1.node[i]["color"] = 'white'
    G1.node[i]["style"] = "filled"    
    G1.node[i]["fillcolor"] = colors[i]
color=nx.get_node_attributes(G1,'color')
fillcolor=nx.get_node_attributes(G1,'fillcolor')
H=nx.relabel_nodes(G1,labels)
nx.draw(H, scale=30, nodelist=H.nodes(), linewidths=0, with_labels = True, node_size=500,font_size=8)
</code></pre>
<p>igraph code:</p>
<pre><code>    g = igraph.Graph.Weighted_Adjacency(M.tolist())
    for i, v in enumerate(g.vs):
        v["color"] = colors[i]
        v["label"] = labels[i]
        v["frame_color"] = colors[i]
        v["label_size"] = 10
        v["size"] = 26
    G = g.spanning_tree(weights='weight', return_tree=True)
    G.to_undirected()
    igraph.plot(G, labels=False, bbox = (900, 900), margin=40, loops=False

)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you see is expected behaviour and not a precision issue at all. As the name suggests, the spring layout "simulates" the action of springs between your nodes onto their positions. The node positions are initialised on a circle, and then the force of the springs is applied to your nodes for a certain number of iterations (50 by default). With weak connection weights, your nodes will more or less remain on the circle (first case), with strong weights your nodes will gravitate towards the centre (second case). </p>
<p>In igraph, by default, the unweighted graph is used to compute the layout and you need to give the plotting routine the weights explicitly. I suspect that you might have plotted the graph without specifying the "weights" parameter. </p>
</div>
<span class="comment-copy">Those algorithms are using Python floating point numbers and inherit the precision of those operations (floats are 53 bits according to <a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/floatingpoint.html</a>)</span>
<span class="comment-copy">Perhaps you can post an example so we can see what the issue is?</span>
<span class="comment-copy">Are you sure the trees are different? I believe only the layout differs, but the topology is the same, at least at the first glance.</span>
<span class="comment-copy">I didn't change the layout, both pictures have been drawn with the same spring layout. Why would the difference in a picture be so huge for the scaled adjacency matrices?</span>
<span class="comment-copy">You'll need to provide a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> to get better help.  I do not think this is a precision issue (or have anything to do with the initial condition that Paul suggested in his answer)</span>
<span class="comment-copy">Why do you suspect that I plotted graph without weight for igraph? The answer is true for networkx and it can be seen that networkx uses spring as a default layout. However igraph doesn't use spring by default.</span>
<span class="comment-copy">Regarding the setting of the weight parameter: just a guess. Regarding the default layout: igraph by default uses Kamada-Kawei for small graphs, and Fruchterman-Reingold (aka spring layout) for larger graphs. IIRC, the cutoff is around 1000 nodes.</span>
<span class="comment-copy">Ok, so igraph uses spring layout, and weight is specified like <code>G = g.spanning_tree(weights='weight', return_tree=True)</code> so I think that I gave the weights to igraph MST. Although why then <code>G.is_weighted()</code> returns <code>False</code>? Is it possible that the weights were not taken into account indeed?</span>
<span class="comment-copy">Depends on how you converted your adjacency matrix to a graph. <code>igraph.Graph.Weighted_Adjacency(w.tolist(), mode='directed')</code> gives you a weighted, directed igraph Graph object (assuming <code>w</code> is your weight matrix).</span>
<span class="comment-copy">You should really read the documentation. <code>G.to_undirected()</code> removes edge attributes such as weight by default. Try <code>G.to_undirected(combine_edges='sum')</code>. Make sure that your resulting graph is still weighted. Also, force a layout with <code>layout = G.layout('fr'); igraph.plot(G, layout=layout, ...)</code>.</span>
