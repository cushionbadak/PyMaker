<div class="post-text" itemprop="text">
<p>Is it possible to do the below with list comprehension? Trying to store the maximum value that has been seen at any given point through the loop.</p>
<pre><code>def test(input):
    a = input[0]
    b = []
    for i in input:
        a = max(i,a)
        b.append(a)
    return b

print test([-5,6,19,4,5,20,1,30])

# returns [-5, 6, 19, 19, 19, 20, 20, 30]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you present here is a typical form of what is known in <em>functional programming</em> as <code>scan</code>.</p>
<p>A way to do this with <em>list comprehension</em> that is <strong>inefficient</strong> is:</p>
<pre><code>[max(input[:i]) for i in range(1,n+1)]
</code></pre>
<p>But this will run in <em>O(n<sup>2</sup>)</em>.</p>
<p>You can do this with list comprehension given you <strong>use a function with side effects</strong>: like the following:</p>
<pre><code>def update_and_store(f,initial=None):
    cache = [initial]
    def g(x):
       cache[0] = f(cache[0],x)
       return cache[0]
    return g
</code></pre>
<p>You can then use:</p>
<pre><code>h = update_and_store(max,a[0])
[h(x) for x in a]
</code></pre>
<p>Or you can use a dictonaries <code>setdefault()</code> like:</p>
<pre><code>def update_and_store(f):
    c = {}
    def g(x):
        return c.setdefault(0,f(c.pop(0,x),x))
    return g
</code></pre>
<p>and call it with:</p>
<pre><code>h = update_and_store(max)
[h(x) for x in a]
</code></pre>
<p>like <a href="https://stackoverflow.com/questions/43162741/possible-to-do-in-list-comprehension-max-value-seen-so-far/43162806?noredirect=1#comment73400616_43162806">@AChampion</a> says.</p>
<p>But functions with <em>side-effects</em> are rather <em>unpythonic</em> and not <em>declarative</em>.</p>
<p>But you better use a <code>scanl</code> or <code>accumulate</code> approach like the one offered by <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer"><code>itertools</code></a>:</p>
<pre><code><b>from itertools import accumulate</b>

accumulate(input,max)</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer"><code>itertools.accumulate</code></a> with the <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer"><code>max</code></a> builtin in Python 3:</p>
<pre><code>from itertools import accumulate

lst = [-5,6,19,4,5,20,1,30]
r = list(accumulate(lst, max)) #[i for i in accumulate(lst, max)]
print(r)
# [-5, 6, 19, 19, 19, 20, 20, 30]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If using NumPy is permitted, then you can use NumPy:</p>
<pre><code>import numpy as np
np.maximum.accumulate([-5,6,19,4,5,20,1,30])
# array([-5,  6, 19, 19, 19, 20, 20, 30])
</code></pre>
</div>
<span class="comment-copy">You can't do it with a "plain" list comprehension, because the list comprehension itself won't maintain state (like the highest seen so far).  You can only do it if your list comprehension applies a function that maintains state (like <code>itertools.accumulate</code>), or if you run your function on chunks of the list instead of individual elements (as in Willem Van Onsem's O(n^2) example.</span>
<span class="comment-copy">The duplicate is not exactly a duplicate. It is correct that both questions have the same structure, but they address different operations.</span>
<span class="comment-copy">@DYZ - Yes, it is a duplicate. All you have to change is choosing an appropriate function, which the OP of this question has already done.</span>
<span class="comment-copy">@TigerhawkT3 I doubt if people looking for a solution to this same problem  will find solace in that dupe target.</span>
<span class="comment-copy">@MosesKoledoye - They will, unless they're (mis)using this site as a free coding service.</span>
<span class="comment-copy">Just as a trick. You can implement the <code>update_and_store()</code> with a <code>dict</code>: <code>c = {}; [c.setdefault(0, max(c.pop(0, n), n)) for n in d]</code></span>
<span class="comment-copy">@AChampion: yeah. That is indeed a smart way to do this. Nevertheless regardless on how one implements functions with side-effects, they are almost inherently dangerous to use in list-comprehension, generators, etc. So I would not recommend using them anyway.</span>
<span class="comment-copy">With <code>list(accumulate(...))</code> you can avoid the explicit list comprehension.</span>
<span class="comment-copy">@DYZ Brainfart. Got carried away by the OP. Thanks</span>
