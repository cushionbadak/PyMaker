<div class="post-text" itemprop="text">
<p>Is there a way to save a list in an auxiliary file and then manipulate it directly, without having to download it, manipulate it, and then rewriting the file?</p>
<p>Namely, I would like to be able to do e.g. something like this:</p>
<pre><code>L = open('file')
L.append(0)
L.close()
</code></pre>
<p>What is the correct way to do it? Is there a specific class for it?</p>
<hr/>
<p>I solved the problem using <code>shelve</code> (a <code>pickle</code>-based library) as follows:</p>
<pre><code>import shelve

f = shelve.open('list.db',writeback=True)
f['0'] = the list I want
L = f['0']

Manipulate L however I want

f.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you put data in a file and you want to make modifications, any operation that changes the length of the data requires you to read and write back out the remainder of the file. (You <em>can</em> modify parts of the file in place if the length remains exactly the same, and you can append at the end or truncate from the end.) </p>
<p>So if you're looking for a way to keep your dataset in a file instead of loading it into memory, a plain file is not going to cut it. Neither is a pickled list, since it would have to be read in and written back out in its entirety. If that is your goal, I recommend using a database such as <code>sqlite3</code>, which does exactly what you want: It stores your data in a file, and takes care of the modifications for you.</p>
<pre><code>import sqlite3    
conn = sqlite3.connect('file.db')
c = conn.cursor()
c.execute("INSERT INTO mytable VALUES ('a', 'b', 'c')")
...
</code></pre>
<p>Check out the <a href="https://docs.python.org/3/library/sqlite3.html" rel="nofollow noreferrer">sqlite documentation</a> for the details on how to use it.</p>
<p>If your data doesn't have much structure, you may prefer <a href="https://docs.python.org/3/library/dbm.html" rel="nofollow noreferrer"><code>dbm</code></a>, which is a "key store" database for managing key-value pairs:</p>
<pre><code>with dbm.open('file.dbm', 'c') as db:   # Open db, creating if necessary
    db['hello'] = 'Hello, world!'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>depending in what you are doing, you can save each element in your list in a line of your file, thus making easy to append new stuff to the file, for example</p>
<p>lets said this is yours original file</p>
<pre><code>&gt;&gt;&gt; data = [1,2,3]
&gt;&gt;&gt; with open("test file.txt","w") as file:
        file.write("\n".join(map(str,data)))


5
&gt;&gt;&gt;
</code></pre>
<p>and this is the new stuff you want to add, then you only need to open the file in append mode ("a")</p>
<pre><code>&gt;&gt;&gt; new_data = [4,5,6]
&gt;&gt;&gt; with open("test file.txt","a") as file: 
        file.write("\n")
        file.write("\n".join(map(str,new_data)))


1
5
&gt;&gt;&gt;
</code></pre>
<p>now the file have both data, which you can recover at any time, like this for example</p>
<pre><code>&gt;&gt;&gt; with open("test file.txt") as file:
        [int(line) for line in file]


[1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This may be tremendously insecure, but it works:</p>
<pre><code>class Open(list):
    def __init__(self, fname):
        list.__init__(self, [])
        self.fname = fname
        with open(fname) as f:
            self.extend(eval(f.read()))

    def close(self):
        with open(self.fname, "w") as f:
            f.write(str(self))
</code></pre>
<p>Usage:</p>
<pre><code>L = Open("test.txt")
L.append(0)
L.close()
</code></pre>
<p><code>Open</code> behaves like an ordinary <code>list</code> and can save itself to a file and construct itself using one.</p>
<p>This will execute the contents of the file as if it was Python code, so if any <em>malicious</em> code is read, it'll do its thing, be aware of this. Anyway, reading data from untrusted sources is always dangerous.</p>
</div>
<span class="comment-copy">I was going to suggest using pickle <code>https://docs.python.org/3/library/pickle.html#examples</code> but the requirement of manipulating the file directly blocked my answer, could you please elaborate a bit why you are enforcing that requirement?</span>
<span class="comment-copy">@DRC It just looks more direct to do it like that than to save the list to a file and then having to read it from the file, change it in a script and rewrite the file. Thus, I was just wondering if there is a way to do it.</span>
<span class="comment-copy">if the data you are writing is not trivial, you will end up having your serialization format and have to maintain it, if the list fits in memory using pickle could be really simpler.</span>
<span class="comment-copy">When you're updating the list, you're writing to memory, so you'll have to rewrite the file anyway.</span>
<span class="comment-copy">@DRC I'm sorry, but I don't think I understand your comment...</span>
<span class="comment-copy">Thanks. The problem I see with this is that it would not possible to pop elements from the list directly...</span>
<span class="comment-copy">directly no, with this you would need to make a copy of the file while leaving out the pop element, deleting the original and renaming the copy to the original... so maybe a database approach as alexis suggest is better for that use case</span>
<span class="comment-copy">this don't even address the requirements of OP question, what I'm missing?</span>
<span class="comment-copy">Sorry, but I don't see how this answers my question...</span>
<span class="comment-copy">@DanielRobert-Nicoud, I've just replicated almost the exact syntax you showed in your question, what's wrong now?</span>
<span class="comment-copy">@DanielRobert-Nicoud, anyway, it's impossible to manipulate the list in a file directly, without having to download it, manipulate it, and then rewriting the file. When you're manipulating an ordinary list, you're effectively manipulating the memory it occupies.</span>
