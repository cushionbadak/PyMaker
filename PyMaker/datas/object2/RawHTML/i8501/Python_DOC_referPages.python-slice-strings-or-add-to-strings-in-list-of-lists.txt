<div class="post-text" itemprop="text">
<p>I am trying to change elements in my list of lists depending on the length of the element, if the string length is greater than 8 I want to chop the string from start to length 8, if the string is shorter than 8 I want to add however much it is shorter by in white space. Where is this code going wrong?</p>
<pre><code>list_of_lists = [['PARENT', 'ID', 'DESCRIPTION1', 'DESCRIPTION2'],
             ['', 'R1', 'R1_Des_1', '0'],
             ['C1', 'E1', 'E1_Des_1', '1'],
             ['P1', 'C1', 'C1_Des_1', '2'],
             ['R1', 'P1', 'P1_Des_1', '3'],
             ['C2', 'E2', 'E2_Des_1', '4'],
             ['P2', 'C2', 'C2_Des_1', '5'],
             ['R1', 'P2', 'P2_Des_1', '6'],
             ['P2', 'C3', 'C3_Des_1', '7'],
             ['C4', 'E3', 'E3_Des_1', '8'],
             ['P3', 'C4', 'C4_Des_1', '9'],
             ['R2', 'P3', 'P3_Des_1', '10'],
             ['None', 'R3', 'R3_Des_', '11'],
             ['P3', 'C5', 'C5_Des_1', '12'],
             ['C6', 'E4', 'E4_Des_1', '13'],
             ['P4', 'C6', 'C6_Des_1', '14'],
             ['R2', 'P4', 'P4_Des_1', '15'],
             ['C7', 'E5', 'E5_Des_1', '16'],
             ['P5', 'C7', 'C7_Des_1', '17'],
             ['R3', 'P5', 'P5_Des_1', '18'],
             ['C9', 'E6', 'E6_Des_1', '19'],
             ['P6', 'C9', 'C9_Des_1', '20'],
             ['R3', 'P6', 'P6_Des_1', '21'],
             ['P6', 'C8', 'C8_Des_1', '22'],
             ['C10', 'E7', 'E7_Des_1', '23'],
             ['P7', 'C10', 'C10_Des_1', '24'],
             ['R4', 'P7', 'P7_Des_1', '25'],
             ['P7', 'C11', 'C11_Des_1', '26'],
             ['C12', 'E8', 'E8_Des_1', '27'],
             ['P8', 'C12', 'C12_Des_1', '28'],
             ['R4', 'P8','','29'],
             ['', 'P8','','30'],
             ['R1', 'P8','','31'],
             ['', 'z1','','32'],
             ['z1', 'z2','','33'],
             ['z1', 'z3','','34'],
             ['z2', 'z4','','35'],
             ['z3', 'z4','','36']]

list_of_lists_slice = list(list_of_lists)
list_string = []

for sublist in list_of_lists_slice:
    for element in sublist:
        if len(element) &gt; 8:
            element = element[:7]
        if len(element) &lt; 8:
            space = 8 - len(element)
            element = element + (' ' * space)


for sublist in list_of_lists_slice:
    row_str = str(' |')
    ele_str = '|'.join(sublist)
    row_str = row_str + ele_str + ('| ')
    list_string.append(row_str)
    middle = ('  ')
    middle = middle + str((len(sublist)) * (9 * ('-')))
    list_string.append(middle)

for row in list_string:
    print (row)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Really, you only need two methods: string slicing and <a href="https://docs.python.org/3/library/stdtypes.html#str.ljust" rel="nofollow noreferrer"><code>ljust</code></a>. Using a list-comprehension, you could do:</p>
<pre><code>&gt;&gt;&gt; new_list = [[s[:8].ljust(8, ' ') for s in sublist] for sublist in list_of_lists]
</code></pre>
<p>Now, let's pretty print it using <code>pprint</code> </p>
<pre><code>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(new_list)
[['PARENT  ', 'ID      ', 'DESCRIPT', 'DESCRIPT'],
 ['        ', 'R1      ', 'R1_Des_1', '0       '],
 ['C1      ', 'E1      ', 'E1_Des_1', '1       '],
 ['P1      ', 'C1      ', 'C1_Des_1', '2       '],
 ['R1      ', 'P1      ', 'P1_Des_1', '3       '],
 ['C2      ', 'E2      ', 'E2_Des_1', '4       '],
 ['P2      ', 'C2      ', 'C2_Des_1', '5       '],
 ['R1      ', 'P2      ', 'P2_Des_1', '6       '],
 ['P2      ', 'C3      ', 'C3_Des_1', '7       '],
 ['C4      ', 'E3      ', 'E3_Des_1', '8       '],
 ['P3      ', 'C4      ', 'C4_Des_1', '9       '],
 ['R2      ', 'P3      ', 'P3_Des_1', '10      '],
 ['None    ', 'R3      ', 'R3_Des_ ', '11      '],
 ['P3      ', 'C5      ', 'C5_Des_1', '12      '],
 ['C6      ', 'E4      ', 'E4_Des_1', '13      '],
 ['P4      ', 'C6      ', 'C6_Des_1', '14      '],
 ['R2      ', 'P4      ', 'P4_Des_1', '15      '],
 ['C7      ', 'E5      ', 'E5_Des_1', '16      '],
 ['P5      ', 'C7      ', 'C7_Des_1', '17      '],
 ['R3      ', 'P5      ', 'P5_Des_1', '18      '],
 ['C9      ', 'E6      ', 'E6_Des_1', '19      '],
 ['P6      ', 'C9      ', 'C9_Des_1', '20      '],
 ['R3      ', 'P6      ', 'P6_Des_1', '21      '],
 ['P6      ', 'C8      ', 'C8_Des_1', '22      '],
 ['C10     ', 'E7      ', 'E7_Des_1', '23      '],
 ['P7      ', 'C10     ', 'C10_Des_', '24      '],
 ['R4      ', 'P7      ', 'P7_Des_1', '25      '],
 ['P7      ', 'C11     ', 'C11_Des_', '26      '],
 ['C12     ', 'E8      ', 'E8_Des_1', '27      '],
 ['P8      ', 'C12     ', 'C12_Des_', '28      '],
 ['R4      ', 'P8      ', '        ', '29      '],
 ['        ', 'P8      ', '        ', '30      '],
 ['R1      ', 'P8      ', '        ', '31      '],
 ['        ', 'z1      ', '        ', '32      '],
 ['z1      ', 'z2      ', '        ', '33      '],
 ['z1      ', 'z3      ', '        ', '34      '],
 ['z2      ', 'z4      ', '        ', '35      '],
 ['z3      ', 'z4      ', '        ', '36      ']]
&gt;&gt;&gt;
</code></pre>
<p>You can think of the above nested list comprehension as short-hand for the following:</p>
<pre><code>new_list = []
for sublist in list_of_lists:
    sub = []
    for s in sublist:
        sub.append(s[:8].ljust(8, ' '))
    new_list.append(sub)
</code></pre>
<p>Once people learn list comprehensions, they tend to overuse them. The example above is probably a borderline case, because it's becoming <em>unreadable</em>, and <strong>readability counts</strong>. The nested for-loops might be more appropriate.</p>
<p>There were a few subtle bugs with your original attempt. I've cleaned it up and kept it to it's original spirit. I've added comments which I hope make it obvious what was going awry. </p>
<pre><code>new_list = [] # need to build a new list!
for sublist in list_of_lists:
    sub = [] # need to build new sublists!
    for element in sublist:
        if len(element) &gt; 8:
            sub.append(element[:8]) # slice to length 8
        else: # use else! You were skipping strings with len == 8
            space = 8 - len(element)
            sub.append(element + (' ' * space))
    new_list.append(sub)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't know what is wrong with your code, but you should definitely just use string formatting, combining the <em>truncating</em> and <em>padding</em> options of the format language:</p>
<pre><code>&gt;&gt;&gt; s1 = 'longer than 8'
&gt;&gt;&gt; s2 = 'short'
&gt;&gt;&gt; f'{s1:8.8}'
'longer t'
&gt;&gt;&gt; f'{s2:8.8}'
'short   '
</code></pre>
<p>If you get a <code>SyntaxError</code> for these f-strings, use the old school way:</p>
<pre><code>&gt;&gt;&gt; '{:8.8}'.format(s1)
'longer t'
&gt;&gt;&gt; '{:8.8}'.format(s2)
'short   '
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>[['{:&gt;8}'.format(x[:8]) for x in row] for row in  list_of_lists]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may use this list compression </p>
<pre><code>[i[:8] if len(i)&gt;8 else i+[' ']*(8-len(i)) for i in list_of_lists]
</code></pre>
</div>
<span class="comment-copy">thank you for your responses</span>
<span class="comment-copy">Yes I am still learning list comprehensions and have already been warned not to use very long ones in code others will have to read D:</span>
<span class="comment-copy">@new_to_coding I suggest accepting wim's answer using string formatting. It is really the "correct" way.</span>
<span class="comment-copy">if you insist, I shall</span>
<span class="comment-copy">@new_to_coding Also, I've debugged your original attempt. Chck out the edit at the bottom of my answer, I've added comment to show where you went wrong...</span>
<span class="comment-copy">thank you very much! but er, I can't get wim's answer to work, any idea how the above code would work with his format answer in there?</span>
<span class="comment-copy">Oh man. I really need to master the format language.</span>
<span class="comment-copy">These are all great answers, I should learn format language also</span>
