<div class="post-text" itemprop="text">
<p>My code below has two for loops. First one will loop thru the directory pannam where there are some wav files. </p>
<pre><code>print (f_name)
</code></pre>
<p>will produce these results:</p>
<pre><code>a.wav
b.wav
c.wav
d.wav
</code></pre>
<p>The code will print all the wav file names</p>
<p>Then there is another loop. That will read the lines of my text file <strong>corpus_text</strong></p>
<pre><code>print (line_strip)
</code></pre>
<p>will give these result</p>
<pre><code>Name of first file
Name of second file
Name of Third file
Name of Fourth file
</code></pre>
<p>I am trying to combine these two results something like this</p>
<pre><code> Name of first file is a
 Name of second file is b
 Name of Third file is c
 Name of Fourth file is d
</code></pre>
<p>This is my code, it runs an infinite loop. I guess its about embedded loop which I fail to understand.  </p>
<pre><code>  import os


    rootdir = r'C:\Users\PANNAM\Desktop\Final_Earthquake\pannam'

    for dirpath, dirnames, filenames in os.walk(rootdir):

        for file in filenames:
         filepath = dirpath +os.sep+file
         if filepath.endswith('wav'):
             split_dirpath = dirpath.split(os.sep)
             f_name, f_ext = (os.path.splitext(file))

             print (f_name)

             with open('test_corpus.txt', mode = 'r+', encoding="utf=8") as f:

              for line in f:
                  if line.rstrip():
                      line_strip = line.strip()
                      print(line_strip)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Now I understand what you want, but I'm not sure I understand why you want it.
Regardless, based on your desired output, you don't need any embedded loops at all.
You should be using either
<a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a>,
or maybe
<a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer"><code>itertools.zip_longest</code></a>.</p>
<p>Below, I'm assuming you've already got functions or generators that provide the input strings --- filenames and lines of text.
I've hard-coded them below, so I can focus on the interesting part.</p>
<pre><code>import itertools
import os.path


def output(prefix, filename):
    stem, __ = os.path.splitext(filename)
    return prefix + ' is ' + stem + '.'


def main():
    prefixes = ['Name of first file', 'Name of second file']
    filenames = ['a.wav', 'b.wav', 'c.wav', 'd.wav']

    print('zip:')
    for prefix, filename in zip(prefixes, filenames):
        print(output(prefix, filename))
    print()

    print('itertools.zip_longest:')
    for prefix, filename in itertools.zip_longest(
      prefixes,
      filenames,
      fillvalue='[unknown file]'
      ):
        print(output(prefix, filename))
    return


if "__main__" == __name__:
    main()
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>zip:
Name of first file is a.
Name of second file is b.

itertools.zip_longest:
Name of first file is a.
Name of second file is b.
[unknown file] is c.
[unknown file] is d.
</code></pre>
<p>The distinction between <code>zip</code> and <code>zip_longest</code> should hint at why I can't figure out your goal...
You're combining a list of filenames with the lines of a text file, either of which could outnumber the other.
<code>zip</code> will stop as soon as any of its inputs runs out;
<code>zip_longest</code> will continue until <em>all</em> of them run out.
To ensure sensible output, you must either ensure the two input lists are the same length, or decide what to do if they aren't.</p>
<p>Worse,
<a href="https://docs.python.org/3/library/os.html#os.walk" rel="nofollow noreferrer"><code>os.walk</code></a>
lists files by calling
<a href="https://docs.python.org/3/library/os.html#os.listdir" rel="nofollow noreferrer"><code>os.listdir</code></a>
or
<a href="https://docs.python.org/3/library/os.html#os.scandir" rel="nofollow noreferrer"><code>os.scandir</code></a>,
neither of which guarantees any particular order, meaning you can't predict which one will get paired with which line from your corpus file.
Solving this problem requires either sorting the filenames into some predictable order
(which must match the lines in your corpus file),
or somehow working out which file goes with which line.</p>
</div>
<span class="comment-copy">"<code>if "cln" and "raw" not in file:</code>" That's not how that works.</span>
<span class="comment-copy">@IgnacioVazquez-Abrams yes I know, Its just a small fix. However could you help me with the question?</span>
<span class="comment-copy">I tried <code>if "pannam_11" and "pannam_12"  not in f_name:</code> but didn't give me the result so using it that way.</span>
<span class="comment-copy">What do your inputs look like --- meaning what do the loops generate now, or at least, what kinds of values are <code>f_name</code> and <code>tag_strip</code> assigned?  And what do you want the output to look like?  What's wrong with <code>f_name + tag_strip</code>?</span>
<span class="comment-copy">Why your code is so messy? You can't ask a question and expect us to to use it. Fix the code, organize it and than ask</span>
