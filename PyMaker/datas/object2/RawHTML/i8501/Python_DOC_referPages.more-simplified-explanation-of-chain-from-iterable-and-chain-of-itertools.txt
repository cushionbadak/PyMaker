<div class="post-text" itemprop="text">
<p>Can you give a more simplified explanation of these two methods <code>chain()</code> and <code>chain.from_iterable</code> from <code>itertools</code>?</p>
<p>I have searched the knowledge base and as well the python documentation but i got confused.</p>
<p>I am new to python that's why I am asking a more simplified explanation regarding these.</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can chain sequences to make a single sequence:</p>
<pre><code>&gt;&gt;&gt; from itertools import chain

&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; b = ['a', 'b', 'c']
&gt;&gt;&gt; list(chain(a, b))
[1, 2, 3, 'a', 'b', 'c']
</code></pre>
<p>If <code>a</code> and <code>b</code> are in another sequence, instead of having to unpack them and pass them to <code>chain</code> you can pass the whole sequence to <code>from_iterable</code>:</p>
<pre><code>&gt;&gt;&gt; c = [a, b]
&gt;&gt;&gt; list(chain.from_iterable(c))
[1, 2, 3, 'a', 'b', 'c']
</code></pre>
<p>It creates a sequence by iterating over the sub-sequences of your main sequence. This is sometimes called flattening a list. If you want to flatten lists of lists of lists, you'll have to code that yourself. There are plenty of questions and answers about that on Stack Overflow.</p>
</div>
<div class="post-text" itemprop="text">
<p>We can learn about the difference between these two tools by looking at <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer">the docs</a>.  </p>
<pre><code>def chain(*iterables):
    # chain('ABC', 'DEF') --&gt; A B C D E F
    ...

def from_iterable(iterable):
    # chain.from_iterable(['ABC', 'DEF']) --&gt; A B C D E F
    ...
</code></pre>
<p>The key difference is in the signatures and how they handle an <a href="https://stackoverflow.com/questions/9884132/what-exactly-are-pythons-iterator-iterable-and-iteration-protocols">iterable</a>, which is something that can be iterated or looped over.</p>
<ul>
<li><code>chain</code> accepts iterables, such as <code>"ABC", "DEF"</code> or <code>[1, 2, 3], [7, 8, 9]</code>.</li>
<li><code>chain.from_iterable</code> accepts one iterable, often a nested iterable, e.g. <code>"ABCDEF"</code> or <code>[1, 2, 3, 7, 8, 9]</code>.  This is helpful for a flattening nested iterables.  See its direct implementation in the <code>flatten</code> tool found in the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">itertools recipes</a>.</li>
</ul>
</div>
<span class="comment-copy">Do you understand how generators work in python?  If not, it's probably best to start there.</span>
<span class="comment-copy">Have you tried writing some code? It usually helps me to understand things I've read. Come up with a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> to show what you don't understand.</span>
<span class="comment-copy">No, like I have said earlier, I am ramping up to learn Python. What I read about generators is that is a simplified way to loop to create a list or a dictionary. You may correct me if I am wrong on this part.</span>
