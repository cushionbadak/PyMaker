<div class="post-text" itemprop="text">
<p>In Python3, I have essentially the following code:</p>
<p>server.py:</p>
<pre><code>import os
import socket

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
sock.bind(("127.0.0.1", 10000))
sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
sock.listen(5)

while True:
    print("waiting")
    connection, client_address = sock.accept()
    print("received")
    child_pid = os.fork()
    if child_pid == 0:
        print("connection received")
        received = connection.recv(1024)
        connection.sendall("OK".encode('utf-8'))
        os._exit(0)
</code></pre>
<p>client.py:</p>
<pre><code>import socket
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect(("127.0.0.1", 10000))    
sock.close()
</code></pre>
<p>When I start the server and then the client, each time the client finishes a zombie process remains. </p>
<p>How to change the code so that no zombie process remains?</p>
</div>
<div class="post-text" itemprop="text">
<p>The usual technique is to track all the child pids so that they can be killed when the main process exits or whenever you want the children to be cleaned-up.  </p>
<p>You can periodically poll and reap processes as needed or wait until you're about to exit.</p>
<p>For an example of how to do this, look at the <a href="https://hg.python.org/cpython/file/2.7/Lib/SocketServer.py#l507" rel="nofollow noreferrer"><em>collect_children()</em></a> code in the <a href="https://docs.python.org/2.7/library/socketserver.html#SocketServer.ForkingMixIn" rel="nofollow noreferrer"><em>ForkingMixin</em></a> for the <a href="https://docs.python.org/2.7/library/socketserver.html#module-SocketServer" rel="nofollow noreferrer">SocketServer module</a>.</p>
<p>The <a href="https://docs.python.org/2.7/library/os.html" rel="nofollow noreferrer"><em>os</em> module</a> has a number of tools for managing the subprocesses like <a href="https://docs.python.org/2.7/library/os.html#os.wait" rel="nofollow noreferrer"><em>os.wait()</em></a> and <a href="https://docs.python.org/2.7/library/os.html#os.kill" rel="nofollow noreferrer"><em>os.kill</em></a>.</p>
<p>I don't know whether it fits your problem or not, but a <a href="https://docs.python.org/2.7/library/multiprocessing.html#module-multiprocessing.pool" rel="nofollow noreferrer">multiprocessing.Pool()</a> may be of some help.  It automatically manages a pool of subprocesses and reuses them for future tasks.  It is mainly helpful when there is only limited data exchange between the processes and whether the work is relatively homogenous (all the child processes are doing the same kind of work).</p>
</div>
<div class="post-text" itemprop="text">
<p>When a process exits, it remains in the process table until something reads its return code. Assuming this is linux, you could make it a daemon and have the init process deal with it. But you could also just call <code>os.waitpid</code> yourself. Here is an example of a class that waits for pids in the background. Its nice becaue it keeps your program from exiting until its fully tidied itself up. You could expand it to do things like sending kill signals to child processes, logging results, and etc.</p>
<pre><code>import threading
import queue
import os
import time

class ZombieKiller(threading.Thread):
    """Okay, really its just a zombie waiter, but where's the fun in that?
    """
    def __init__(self):
        super().__init__()
        self.pid_q = queue.Queue()
        self.start()

    def run(self):
        while True:
            pid = self.pid_q.get()
            if pid is None:
                return
            print(pid, 'wait')
            os.waitpid(pid, 0)
            print(pid, 'wait done')

    def cull_zombie(self, pid):
        self.pid_q.put(pid)

    def close(self):
        self.pid_q.put(None)
        self.join()

def test():
    zombie_killer = ZombieKiller()
    for i in range(3):
        pid = os.fork()
        if pid == 0:
            # child
            time.sleep(5)
            print(os.getpid(), 'work done')
            exit()
        else:
            # parent
            zombie_killer.cull_zombie(pid)
    zombie_killer.close()
    print('test complete')


test()
</code></pre>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/2760652/how-to-kill-or-avoid-zombie-processes-with-subprocess-module">Similar question</a>, this one using the <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer"><code>subprocess</code></a> module instead of trying to manage child threads directly.</span>
<span class="comment-copy">Are these indeed <a href="https://en.wikipedia.org/wiki/Zombie_process" rel="nofollow noreferrer">zombies</a>, that is, processes in terminated state? Maybe they are alive, just lost the parent process?</span>
<span class="comment-copy">This is a <a href="https://stackoverflow.com/questions/18090230/forking-python-defunct-child">duplicate of this question</a></span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/18090230/forking-python-defunct-child">Forking python, defunct child</a></span>
<span class="comment-copy">But the main process runs a very long time</span>
<span class="comment-copy">Yes, maybe this is a suitable way. Whenever a new child is created, the old one gets destroyed. Not really nice, but at least I won't end up with hundreds of zombie processes...</span>
<span class="comment-copy">THAT problem should be really solved with a PEP</span>
<span class="comment-copy">@Alex I think this is just part of the "facts of life" when creating child processes.  They need to be tracked and no other tool can automatically know what you want to do with them.</span>
