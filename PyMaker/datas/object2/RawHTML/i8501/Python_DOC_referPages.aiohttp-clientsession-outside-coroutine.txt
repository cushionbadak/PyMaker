<div class="post-text" itemprop="text">
<p>I have a REST API wrapper which is supposed to run in an interactive Python session. HTTP requests are made both through an automated background thread (which uses the API wrapper) and manually by the end user through the interactive session. I am trying to migrate all HTTP request management to asyncio from the former new-thread-per-request approach, but since I can't run the asyncio loop in the main thread (it has to be free for ad-hoc Python commands/requests), I wrote the following to run it in a background thread:</p>
<pre><code>import aiohttp
import asyncio
from concurrent.futures import ThreadPoolExecutor

def start_thread_loop(pool=None):
    """Starts thread with running loop, bounding the loop to the thread"""
    def init_loop(loop):
        asyncio.set_event_loop(loop)  # bound loop to thread
        loop.run_forever()
    _pool = ThreadPoolExecutor() if pool is None else pool
    loop = asyncio.new_event_loop()
    future = _pool.submit(init_loop, loop)
    return future, loop

def send_to_loop(coro, loop):
    """Wraps couroutine in Task object and sends it to given loop"""
    return asyncio.run_coroutine_threadsafe(coro, loop=loop)
</code></pre>
<p>The actual API wrapper is something like the following:</p>
<pre><code>class Foo:
    def __init__(self):
        _, self.loop = start_thread_loop()
        self.session = aiohttp.ClientSession(loop=self.loop)
        self.loop.set_debug(True)

    def send_url(self, url):
        async def _request(url):
            print('sending request')
            async with self.session.get(url) as resp:
                print(resp.status)
        return send_to_loop(_request(url), self.loop)
</code></pre>
<p>However, <code>aiohttp</code> highly recommends against making a <code>ClientSession</code>
outside of coroutine and turning on <code>asyncio</code> debug mode before initializing <code>ClientSession</code> raises a <code>RuntimeError</code>. Therefore, I tried making a slightly different version using <code>asycio.Queue</code> in order to avoid making a <code>ClientSession</code> inside a coroutine:</p>
<pre><code>class Bar:

    def __init__(self):
        _, self.loop = start_thread_loop()
        self.q = asyncio.Queue(loop=self.loop)
        self.status = send_to_loop(self.main(), loop=self.loop)

    async def main(self):
        async with aiohttp.ClientSession(loop=self.loop) as session:
            while True:
                url = await self.q.get()
                print('sending request')
                asyncio.ensure_future(self._process_url(url, session), loop=self.loop)

    def send_url(self, url):
        send_to_loop(self.q.put(url), loop=self.loop)

    @staticmethod
    async def _process_url(url, session):
        async with session.get(url) as resp:
            print(resp.status)
</code></pre>
<p>However, this approach is more complex/verbose and I don't really understand if it is actually necessary.</p>
<p><strong>Questions:</strong></p>
<ol>
<li>Why is it a problem starting a <code>ClientSession</code> outside of a coroutine?</li>
<li>Is the queue approach better/safer? If so, why?</li>
<li>Is there any problem in my approach for starting a loop inside a background thread?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Why is it a problem starting a ClientSession outside of a coroutine?</p>
</blockquote>
<p>That's how aiohttp is built, in theory it should be possible to initialize some kind of client session outside a loop ie. outside a coroutine but it's not how aiohttp is built. AFAIU in <a href="https://github.com/aio-libs/aiohttp/pull/1468" rel="nofollow noreferrer">the issue that introduced this warning</a>, it's because a) it's difficult to test b) it's prone to error</p>
<blockquote>
<p>Is the queue approach better/safer? If so, why?</p>
</blockquote>
<p>I don't understand what you try to achieve so I am not sure how to answer. Maybe the problem you have is that you try to initialize a <code>ClientSession</code> inside the constructor aka. <code>__init__</code> of another class. In this case, you should work around that issue by creating a helper method that is a coroutine that will finish the initialization of the class. This is known pattern when working with async code. </p>
<blockquote>
<p>Is there any problem in my approach for starting a loop inside a background thread?</p>
</blockquote>
<p>It's perfectly ok.</p>
</div>
<span class="comment-copy">Did you ever get further on this? I'm wondering the same thing myself. I'm working around the warning by creating a ClientSession in my startup logic and passing that into my API client's constructor.</span>
<span class="comment-copy">Not really. I have been using the code roughly as shown in the question's <code>Foo</code> class. I haven't really found out why starting a <code>ClientSession</code> outside a coroutine issues a warning, so I chose to ignore it.</span>
<span class="comment-copy">what do you call asyncio debug mode?</span>
<span class="comment-copy">@amirouche: I didn't make that name up. It is in the official <a href="https://docs.python.org/3/library/asyncio-dev.html#debug-mode-of-asyncio" rel="nofollow noreferrer">docs</a>. In my code, it refers specifically to this line: <code>self.loop.set_debug(True)</code></span>
<span class="comment-copy">Thanks for taking the time to answer. Unfortunately, I forgot to write down which version of <code>aiohttp</code> I was using at the time of the question, but from the issue you pointed out, it seems the fix I was looking for came from this commit: <a href="https://github.com/aio-libs/aiohttp/commit/aae6f8bc769244169fbcb53c8d3b7e96f28e3cec#diff-7dd84b5ef8d5eea2de1dfc5329411dfc" rel="nofollow noreferrer">github.com/aio-libs/aiohttp/commit/â€¦</a> from Feb 7, 2017. I must have been using an older version when asked the question.</span>
<span class="comment-copy">In summary, as long as the loop is <b>explicitly passed</b> to the <code>ClientSession</code> constructor, no warnings are raised, even if the instantiation takes place outside a coroutine. Running the code from the question with <code>aiohttp</code> v2.2.0, does not raise any warnings. If you add this info to your answer I will mark is as accepted. Thanks again.</span>
<span class="comment-copy">Please anwser yourself the question, I am not sure to fully understand the situation. Thanks!</span>
