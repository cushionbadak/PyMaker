<div class="post-text" itemprop="text">
<p>I'm quyering a pandas dataframe <code>df</code> like this.</p>
<pre><code>df = df[
    (df.value1 &gt;= threshold1) &amp;
    (df.value2 &gt;= threshold2) &amp;
    (df.value3.isin(list3))
    ]
</code></pre>
<p>Python has the built in function <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer">all</a>, which allows this syntax:</p>
<pre><code>if all([
    value1 &gt; threshold1,
    value2 &gt; threshold2,
    value3 in list3,
    ]):
</code></pre>
<p>Instead of this:</p>
<pre><code>if (
    value1 &gt; threshold1 and
    value2 &gt; threshold2 and
    value3 in list3,
    ):
</code></pre>
<p>Does Pandas have something similar to <code>all</code> in Python? Thanks.</p>
<p>Also, is this the fastest way of subsetting a Pandas dataframe based on multiple conditions?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/questions/43104309/is-there-an-equivalent-of-the-python-built-in-function-all-in-pandas#comment73290345_43104309">@juanpa.arrivillaga</a> already gave you a very good explanation about boolean indexing in Pandas.</p>
<p>I'd like to give you a bit nicer alternative - <a href="http://pandas.pydata.org/pandas-docs/stable/indexing.html#the-query-method-experimental" rel="nofollow noreferrer">DataFrame.query()</a> method:</p>
<pre><code>df.query("value1 &gt; @threshold1 and value2 &gt; @threshold2 and value3 in @list3")
</code></pre>
<p>Demo:</p>
<pre><code>In [138]: df = pd.DataFrame(np.random.randint(1, 10, (10, 3)),
                            columns=['value1','value2','value3'])

In [139]: df
Out[139]:
   value1  value2  value3
0       7       9       1
1       4       1       3
2       3       8       8
3       2       8       9
4       9       2       7
5       5       8       9
6       4       2       9
7       7       2       5
8       6       3       5
9       9       1       5

In [140]: threshold1 = 2

In [141]: threshold2 = 4

In [142]: list3 = [1,9]

In [143]: df.query("value1 &gt; @threshold1 and value2 &gt; @threshold2 and value3 in @list3")
Out[143]:
   value1  value2  value3
0       7       9       1
5       5       8       9
</code></pre>
</div>
<span class="comment-copy">That really isn't the use case for <code>all</code>, and normally I would write that with <code>and</code>.</span>
<span class="comment-copy">What is the use case for <code>all</code> then? Thanks.</span>
<span class="comment-copy">something like <code>all(condition(x) for x in some_iterable)</code></span>
<span class="comment-copy">Note, your use of <code>all</code> does what you want, but it is not idiomatic. I would have to look at that code a couple of times before I grokked it. I would know immediately what the line using <code>and</code> is doing. Also, your use of <code>all</code>  creates an unnecessary intermediate data-structure, and uses function call. It's not efficient, and I wouldn't encourage it's use, especially if you are evaluating the condition repeatedly in a loop.</span>
<span class="comment-copy">I understand that! Indeed, it is against <a href="https://www.python.org/dev/peps/pep-0008/#should-a-line-break-before-or-after-a-binary-operator" rel="nofollow noreferrer">the official style guide</a>!</span>
