<div class="post-text" itemprop="text">
<p>My issue is, that i have dict (argparse). If flag has only one attribute, parser will return string, else list.
I am basically making parser, that will create command from input args.
Example:</p>
<pre><code>kwargs = {-name: "MyName", tags: ["tag_1", "tag_2", "tag_3"] }
</code></pre>
<p>Needed output:</p>
<pre><code>"--name Myname --tags tag_1 tag_2 tag3"
</code></pre>
<p>I kind managed to do that, but I do not think this is optimal way :/</p>
<pre><code>for k, v in kwargs.iteritems():
    if v is None:
        continue
    elif not isinstance(v, basestring):
        print (v)
        command = command+' {} '.format(k) + ' '.join(v)
    else:
        print (v)
        command = command+' {} {}'.format(k, v)
</code></pre>
<p>Also I use this method of argparse, to feth values <code>vars(argparse.parse_args())</code> (this is not a part of this question, but maybe someone knows). That way keeps missing leading '-' signs, but I'd like to have them... a lot :)
Example:</p>
<pre><code>--tag tag_1 tag_2 tag_3
</code></pre>
<p>is converted to:</p>
<pre><code>[tag: tag_1, tag_2, tag3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Does this function produce what you want:</p>
<pre><code>def foo(adict):
    alist = []
    for k,v in adict.items():
        k = '--'+k
        if isinstance(v,list):
            v = ' '.join([str(i) for i in v])
        else:
            v = str(v)
        alist.append('{} {}'.format(k,v))
    return ' '.join(alist)
</code></pre>
<p>Adding the <code>--</code> to the key is trivial.  I suppose you could refine it so that it adds just <code>-</code> to a single character key.  The rest is making sure that lists (and possibly nonstring values) are formatted correctly.</p>
<p>Doing all the refinement in the formatting is a lot easier than trying to tweak the <code>argparse</code> or its out put directly.</p>
<pre><code>In [38]: args = argparse.Namespace(name="MyName", tags=['tag1','tag2'], other=12)
Out[39]: Namespace(name='MyName', other=12, tags=['tag1', 'tag2'])
In [41]: vars(args)
Out[41]: {'name': 'MyName', 'other': 12, 'tags': ['tag1', 'tag2']}
In [42]: foo(vars(args))
Out[42]: '--tags tag1 tag2 --name MyName --other 12'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not sure if  I understand your question 100%.
But why can't you use dict as follows,  </p>
<pre><code>kwargs = {"--name" : "MyName", "--tags" : ["tag_1", "tag_2", "tag_3"] }
</code></pre>
<p>That way your command would be  </p>
<pre><code>&gt;&gt;&gt; command
'your_command --name MyName --tags tag_1 tag_2 tag_3'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In order to have your desired output, you can try something like this:</p>
<pre><code>kwargs = {'name': "MyName", 'tags': ["tag_1", "tag_2", "tag_3"] }
final = "--{0} {1} --{2} {3}".format(list(kwargs.keys())[0], list(kwargs.values())[0], list(kwargs.keys())[1], " ".join(list(kwargs.values())[1]))
print(final)
</code></pre>
<p>Output:</p>
<pre><code>'--name MyName --tags tag_1 tag_2 tag_3'
</code></pre>
</div>
<span class="comment-copy">Take a look at <code>.add_argument()</code>'s <code>dest</code> keyword argument.</span>
<span class="comment-copy">well, this is pretty much same way I did it (except adding '-' marks). I was more curious, if you maybe know way to get 'raw'  dictionary form argparse, or way to handle string and list params without distinguishing one from another (eg. having one element list from argparse instead raw string), or maybe some kind of alternative for handling input values to script (but not creating own class from scratch). I really appreciate your help though, It's just not exactly what I am looking for.</span>
<span class="comment-copy">Because I use argparse, that has different method of parsing. To my knowledge, I cannot just change parsing way <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">docs.python.org/3/library/argparse.html</a></span>
<span class="comment-copy">Input may vary a lot, that is just an example. I need something generic for that. I mean, there can be 'n' list elements and 'm' just string elements. As that is dictionary, order may vary as well.</span>
