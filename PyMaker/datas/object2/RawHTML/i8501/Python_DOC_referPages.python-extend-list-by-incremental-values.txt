<div class="post-text" itemprop="text">
<p>Is there a nice simple method for extending a list <em>n</em> times, and doing so incrementally based on the existing values?</p>
<p>Basically I'm extrapolating a gradient, but don't want to invoke numpy/scipy if I can really avoid it.</p>
<p>I have some lists, lets say:</p>
<pre><code>x = [1,2,3,4,5]
y = [10,20,30,40,50]
</code></pre>
<p>Where I have already got a value for the average of the pairwise differences (the 'average gradient' of the list). I would now like to extend each list (let's say 20 times, to a total length of 25 each), where each subsequent value added is the previous value plus the computed average difference (if this was negative, obviously it would decrease).</p>
<p>So, <code>x[5]</code> would evaluate to <code>x[4] + gradient</code>.</p>
<p>Thus, the <code>x</code> list would ultimately end up:</p>
<pre><code>x = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]
</code></pre>
<p>Because the average difference in the original <code>x</code> = 1 (obviously this is just test data, in actuality I want to do this with more complicated floats in the <code>y</code> list.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes you can.</p>
<pre><code>x = [1,2,3,4,5]
# Calculate your gradient, for simplicity I will just assign 1
# If the gradient has to change, calculate inside the loop
gradient = 1
for i in range(20):
    x.append(x[-1] + gradient)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>list.extend()</code> and a list comprehension:</p>
<pre><code>&gt;&gt;&gt; x = [1,2,3,4,5]
&gt;&gt;&gt; gradient, n = x[1]-x[0], 10
&gt;&gt;&gt; x.extend([x[-1] + gradient*i for i in range(1, n+1)])
&gt;&gt;&gt; x
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
</code></pre>
<p>For integer values you can also pass a <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer"><code>range</code></a> directly to <code>list.extend()</code>:</p>
<pre><code>&gt;&gt;&gt; x.extend(range(x[-1]+gradient, x[-1] + gradient*n + 1, gradient))
</code></pre>
</div>
<span class="comment-copy">I had even gotten as far as <code>for i in range()</code>: x.append` - just couldn't engage the brain cells this morning! Thanks. I'll accept this as it was closest to what I was planning to do anyway</span>
<span class="comment-copy">It happens to anyone, you're welcome, glad I helped</span>
<span class="comment-copy"><code>range()</code> does not support floats, so this answer would be better by dropping the second half and using <code>gradient</code> in the first half. Also, <code>extend()</code> will take a generator expression, so you don't need the inner <code>[]</code>.</span>
<span class="comment-copy">@FMc: good point, updated.</span>
