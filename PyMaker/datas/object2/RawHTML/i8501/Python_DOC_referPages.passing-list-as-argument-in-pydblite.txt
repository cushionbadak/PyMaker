<div class="post-text" itemprop="text">
<p>I've been trying to figure out how to pass a list of values as an individual parameter for pydblite.insert(*args). Each value from the list 'temp' and 'keys' must be an individual parameter for both the .insert() and .create() function respectively.</p>
<pre><code>def copyToMemory(self, table, items):
    db = Base(table + ".pdl")

    if not (db.exists()):
        keys = ""
        for key, val in items[0].items(): keys += key + ', '
        #db.create(keys)

    db.open()
    for i in items:
        temp = []
        for val in i.itervalues():
            temp += val
        #db.insert(temp)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For the <code>db.create()</code>, construct a list of the keys and pass them as unpacked arguments like this:</p>
<pre><code>db.create(*items[0].keys())
</code></pre>
<p>Since <code>items</code> is a list of dictionaries, you can simply use <code>dict.keys()</code> to get a list of the keys using the first item in the list. This list of keys is then unpacked to pass <em>positional</em> arguments to the <code>create()</code> function. For reference see <a href="https://docs.python.org/3/reference/expressions.html#index-42" rel="nofollow noreferrer">* in function calls</a>.</p>
<p>Because <code>dict.keys()</code> is unordered, the above assumes that you do not particularly care about the order of the fields in the table.</p>
<p>For <code>db.insert()</code> you can pass an unpacked dictionary using <code>**</code>:</p>
<pre><code>for item in items:
    db.insert(**item)
</code></pre>
<p>See <a href="https://docs.python.org/3/reference/expressions.html#index-43" rel="nofollow noreferrer">** in function calls</a>. This will pass the arguments to the function as keyword arguments. Note that the order does not matter - the fields in the table will be properly associated with the corresponding item from the dictionary.</p>
</div>
<span class="comment-copy">Worked! Thanks!</span>
