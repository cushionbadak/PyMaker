<div class="post-text" itemprop="text">
<p>I am writing python code that handles a text file and, for each line of input, calculates the time involved with the action described in that line, then reports a "running time". Required output like</p>
<pre><code>        lapse     time
start            12:00
action1  0:37    12:37
action2  1:01    13:38
action3  0:30    14:08
</code></pre>
<p>I came to some possible approaches but all looked awkward. Most of all I am confused about using either "time" or "strftime" or "datetime" or perhaps even something else. I am sure a simple elegant solution must exist. </p>
<p>NB timezones and DST are of no concern, if I can get to show UTC that is sufficient, at least for a beginning. In a later stage the last column (UTC) might be augmented by a column "local time" but that is secondary.</p>
<p>Edited, for apparent lack of clarity, to add example pseudo-code:</p>
<pre><code> TIME='12:00'
 PCS_PER_HOUR=750
 with infile:
  read line of data
  process data, including calc of PCS_DONE
  LAPSE=PCS_DONE/PCS_PER_HOUR
  TIME += LAPSE
  print(' .....   ' ,format(data, data, data, LAPSE, TIME))
</code></pre>
<p>My question is how to make the "TIME='12:00" into something that python can easily handle, and increment with a calculated integer number of seconds or minutes or whatever.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>datetime.timedelta</code>.</p>
<p>Set the start time.</p>
<pre><code>In [1]: import datetime
</code></pre>
<p>The initial time is 12 hours.</p>
<pre><code>In [2]: start = datetime.timedelta(hours=12)

In [3]: start
Out[3]: datetime.timedelta(0, 43200)
</code></pre>
<p>Let's say that <code>LAPSE</code> is 0.23 hours (pieces divided by pieces per hour yields hours).</p>
<pre><code>In [4]: action1 = datetime.timedelta(hours=0.23)
</code></pre>
<p>Now you can format the times like you want. The standard representation is hours, minutes and seconds:</p>
<pre><code>In [5]: str(start)
Out[5]: '12:00:00'

In [6]: str(start+action1)
Out[6]: '12:13:48'
</code></pre>
</div>
<span class="comment-copy">Please share your "some possible approaches."</span>
<span class="comment-copy">They were along the lines of keeping separate variables for number of hours, number of minutes, then adding "the artisanal way" like "if minutes &gt; 60 : hours +=1, minutes -= 60 " . Essentially not using any time-specific functions at all, while python has a wealth of them, in fact so much as to cause confusion.</span>
<span class="comment-copy">Keep the time in seconds, as returned by <code>time.time()</code>. Print it any way you like using <code>strftime()</code>.</span>
<span class="comment-copy">Will look into that. time.time() might not even be needed but "keep the time in seconds" might well be the keyword I was missing.</span>
<span class="comment-copy">@Karel everyone is pointing you towards using <a href="https://docs.python.org/3/library/time.html#time.struct_time" rel="nofollow noreferrer"><code>time.struct_time</code></a> because that's the Python Standard Library's method of "keeping separate variables". Effectively you have one variable (the <code>struct_time</code>), and each of the members of the tuple are hours, minutes, seconds, etc. Most of the many "time specific functions" you're confused over are in fact wrappers to C's <code>time.h</code> library.</span>
<span class="comment-copy">Thanks, but not really an answer. I calculate the time lapse like LAPSE=PCS_DONE/PCS_PER_HOUR or so. How can I get such a result into the strftime, which seems to expect a tuple as its input? In other words, the "current time" is not involved at all.</span>
<span class="comment-copy">Then only use the deltas.</span>
<span class="comment-copy">Again thanks, but you seem to miss my issue. I edited the opening question, adding a bit of pseudo code.</span>
<span class="comment-copy">I've completely changed the answer based on your edit.</span>
<span class="comment-copy">And now the question is answered. Thanks indeed!</span>
