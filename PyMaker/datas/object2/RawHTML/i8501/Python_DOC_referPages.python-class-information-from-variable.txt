<div class="post-text" itemprop="text">
<p>In the following code:</p>
<pre><code>class species:
    def __init__(self, continent):
        self.continent=continent

giraffe = species("africa")

animal = "giraffe"
</code></pre>
<p>EDIT: animal is a string</p>
<p>can i retrieve "africa" from var "animal"?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes. Both <code>animal</code> and <code>giraffe</code> are <em>references</em> to the same underlying object. Very much like "Jala015" and "Jala Smith" and "mom" (or dad?) might all be references to the same person. </p>
<p>Similarly, if you <em>change</em> the <code>continent</code> of the object via one of the references, that change will be visible through the other reference, since they both point to the same place.</p>
<p><strong>Update</strong></p>
<p>Now you say that animal is not a reference to an object, but a string. There are a couple of ways to do that, all of them somewhat complex.</p>
<p>First, if <code>giraffe</code> is a global (as shown in your code, it is) then it will be in the <a href="https://docs.python.org/3/library/functions.html?highlight=globals#globals" rel="nofollow noreferrer"><code>globals()</code></a> dictionary. You can do this:</p>
<pre><code>giraffe = species('Africa')
animal = "giraffe"

continent = globals()[animal].continent
</code></pre>
<p>If giraffe is not global, but rather a local variable in a function, that won't work. You might be able to get it with <code>locals()</code> but even that is iffy. In that case, and <strong>in general,</strong> you should probably put this stuff in your own dictionary for lookups:</p>
<pre><code>Zoo = {}  # empty dictionary

giraffe = species('Africa')

Zoo['giraffe'] = giraffe

animal = "giraffe"

continent = Zoo[animal].continent
</code></pre>
<p>You can make this simpler by storing the species name in the <code>Animal</code> class, thus:</p>
<pre><code>class Animal:
    def __init__(self, name, where):
        self.name = name
        self.continent = where
</code></pre>
<p>Then you could put your objects into a deque, dict, list, set, tuple, or whatever other thing you like, and still match them by <em>brute force</em>:</p>
<pre><code>Zoo = [ Animal('giraffe', 'Africa'), Animal('zebra', 'Africa'), Animal('Cheeto-Stained Ferret-Wearing Shitgibbon', 'North America') ]

pet = None

for animal in Zoo:
    if animal.name == 'giraffe':
        pet = animal
        break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Access the attribute</p>
<p>animal.continent</p>
</div>
<span class="comment-copy"><b>animal.continent</b> is the reference you need.  Please look up these details in a tutorial on classes and objects.</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/10313471/python-access-class-variables-via-instance">Python: access class variables via instance</a></span>
<span class="comment-copy">i forgot: animal = "giraffe"</span>
<span class="comment-copy">Well, that changes everything.</span>
<span class="comment-copy">Updated with more examples.</span>
<span class="comment-copy">i forgot: animal = "giraffe"</span>
<span class="comment-copy">That changed the question...</span>
