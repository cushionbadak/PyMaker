<div class="post-text" itemprop="text">
<p>I have a <code>text file</code> that holds some result of an operation. The data is displayed in a <code>human-readable format</code> (like a table). How do I parse this data so that I can form a data structure such as <code>dictionaries</code> with this data? </p>
<p>An example of the <code>unstructured data</code> is shown below.</p>
<pre><code>===============================================================
Title
===============================================================
Header     Header Header Header  Header       Header
1          2      3      4       5            6                   
---------------------------------------------------------------
1          Yes    No     6       0001 0002    True    
2          No     Yes    7       0003 0004    False    
3          Yes    No     6       0001 0001    True    
4          Yes    No     6       0001 0004    False    
4          No     No     4       0004 0004    True    
5          Yes    No     2       0001 0001    True    
6          Yes    No     1       0001 0001    False    
7          No     No     2       0004 0004    True
</code></pre>
<p>The data displayed in the above example is not <code>tab-separated</code> or <code>comma separated</code>. It always has a <code>header</code> and correspondingly may/may not have values along the <code>column-like</code> appearance. </p>
<p>I have tried using basic parsing techniques such as <code>regex</code> and <code>conditional checks</code>, but I need a more robust way to parse this data as the above shown example is not the only format the data gets rendered. </p>
<p><em>Update 1</em>: There are many cases apart from the shown example such as addition of more columns, single cell having more than one instance (but shown visually in next row, whereas it belongs to the previous row). </p>
<p>Is there any <code>python</code> library to solve this problem?</p>
<p>Can <code>machine learning</code> techniques help in this problem without parsing? If yes, what type of problem would it be (Classification, Regression, Clustering)?</p>
<pre><code>===============================================================
Title
===============================================================
Header     Key_1   Header Header  Header       Header
1          Key_2   3      4       5            6                   
---------------------------------------------------------------
1          Value1  No     6       0001 0002    True
           Value2    
2          Value1  Yes    7       0003 0004    False    
           Value2
3          Value1  No     6       0001 0001    True    
           Value2
4          Value1  No     6       0001 0004    False    
           Value2  
5          Value1  No     4       0004 0004    True    
           Value2  
6          Value1  No     2       0001 0001    True    
           Value2  
7          Value1  No     1       0001 0001    False    
           Value2  
8          Value1  No     2       0004 0004    True
           Value2  
</code></pre>
<p><em>Update 2</em>: Another example of what it might look like which involves a single cell having more than one instance (but shown visually in next row, whereas it belongs to the previous row).  </p>
</div>
<div class="post-text" itemprop="text">
<p>Say your example is 'sample.txt'.</p>
<pre><code>import pandas as pd

df = pd.read_table('sample.txt', skiprows=[0, 1, 2, 3, 5], delimiter='\s\s+')

print(df)
print(df.shape)

   1    2    3  4          5      6
0  1  Yes   No  6  0001 0002   True
1  2   No  Yes  7  0003 0004  False
2  3  Yes   No  6  0001 0001   True
3  4  Yes   No  6  0001 0004  False
4  4   No   No  4  0004 0004   True
5  5  Yes   No  2  0001 0001   True
6  6  Yes   No  1  0001 0001  False
7  7   No   No  2  0004 0004   True
(8, 6)
</code></pre>
<p>You can change the data types of course. Please check tons of <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_table.html" rel="nofollow noreferrer">params</a> of <code>pd.read_table()</code>. Also, there are <a href="http://pandas.pydata.org/pandas-docs/stable/io.html" rel="nofollow noreferrer">method</a> for xlsx, csv, html, sql, json, hdf, even clipboard, etc.</p>
<p>welcome to <a href="http://pandas.pydata.org/" rel="nofollow noreferrer">pandas</a>...</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this, it should fully handle multi-row cells:</p>
<pre><code>import re

def splitLine(line, delimiters):
    output = []
    for start, end in delimiters:
        output.append(line[start:end].strip())
    return output

with open("path/to/the/file.ext", "r") as f:
    _ = f.readline()
    _ = f.readline()
    _ = f.readline()

    headers = [f.readline()]
    next = f.readline()
    while(next[0] != "-"):
        headers.append(next)
        next = f.readline()

    starts = []
    columnNames = set(headers[0].split())
    for each in columnNames:
        starts.extend([i for i in re.finditer(each, headers[0])])
    starts.sort()
    delimiters = list(zip(starts, starts[1:] + [-1]))

    if (len(columnNames) - 1):
        rowsPerEntry = len(headers)
    else:
        rowsPerEntry = 1

    headers = [splitLine(header, delimiters) for header in headers]
    keys = []
    for i in range(len(starts)):
        if ("Header" == headers[0][i]):
            keys.append(headers[1][i])
        else:
            keys.append([])
            for header in headers:
                keys[-1].append(header[i])

    entries = []
    rows = []
    for line in f:
        rows.append(splitLine(line, delimiters))
        if (rowsPerEntry == len(rows)):
            if (1 == rowsPerEntry):
                entries.append(dict(zip(keys, rows[0])))
            else:
                entries.append({})
                for i, key in enumerate(keys):
                    if (str == type(key)):
                       entries[-1][key] = rows[0][i]
                    else:
                       k = "Column " + str(i+1)
                       entries[-1][k] = dict.fromkeys(key)
                       for j, subkey in enumerate(key):
                           entries[-1][k][subkey] = rows[j][i]
            rows = []
</code></pre>
<h2>Explanation</h2>
<p>We use the <code>re</code> module in order to find the appearances og "Header" in the 4th column.</p>
<p>The <code>splitLine(line, delimiters)</code> auxiliar function returns an array of the line splitted by columns as defined by the delimiters parameter. This parameter is a list of 2-items tuples, where the first item represents the starting position and the second one the ending position.</p>
</div>
<div class="post-text" itemprop="text">
<p>i dont know what you want to do with the title so i will go ahead and skip all 6 lines...the space is not consistent so you need first to make the space consistent between records otherwise it will be hard to read it line by line.
you can do some thing like this </p>
<pre><code>import re

def read_file():
    with open('unstructured-data.txt', 'r') as f:
         for line in f.readlines()[6:]:
             line = re.sub(" +", " ", line)
             print(line)
             record = line.split(" ")
             print(record)
read_file()
</code></pre>
<p>which will give you something like this </p>
<pre><code>1 Yes No 6 0001 0002 True

['1', 'Yes', 'No', '6', '0001', '0002', 'True', '\n']
2 No Yes 7 0003 0004 False 

['2', 'No', 'Yes', '7', '0003', '0004', 'False', '\n']
3 Yes No 6 0001 0001 True 

['3', 'Yes', 'No', '6', '0001', '0001', 'True', '\n']
4 Yes No 6 0001 0004 False 

['4', 'Yes', 'No', '6', '0001', '0004', 'False', '\n']
4 No No 4 0004 0004 True 

['4', 'No', 'No', '4', '0004', '0004', 'True', '\n']
5 Yes No 2 0001 0001 True 

['5', 'Yes', 'No', '2', '0001', '0001', 'True', '\n']
6 Yes No 1 0001 0001 False 

['6', 'Yes', 'No', '1', '0001', '0001', 'False', '\n']
7 No No 2 0004 0004 True

['7', 'No', 'No', '2', '0004', '0004', 'True\n']
</code></pre>
</div>
<span class="comment-copy">You need to readfille line by line and skip 6 lines ...the parse the first data line with split(' ') to get the the whole line in a list like [1,yes,no,6,001,002,True]</span>
<span class="comment-copy">Do you know the data type of each column?</span>
<span class="comment-copy">The single cell in multiple rows is a problem for sure</span>
<span class="comment-copy">The solutions provided so far do not handle the case you described properly. The right solution will have to take into account the vertical alignment in some way.</span>
<span class="comment-copy">I posted a solution that takes into account vertical alignment, as an space can mean something different than a column change as we can see in column 5. Is still doesn't handle the multi-row cell issue. For this I would need some more info: for example, is the first column always empty when a multi-row cell is found?</span>
<span class="comment-copy">Why does every answer requiring to read a file suggest a library such as pandas? If he only needs to read a file installing and importing pandas is way more than what he actually needs.</span>
<span class="comment-copy">libraries are there for that...and mostly are way optimized...but i agree it kind requires learning the library itself rather than python</span>
<span class="comment-copy">Not only that, it also adds a major overhead that is not justified just for reading a file</span>
<span class="comment-copy">@Adirio Because he asked library for robust parsing and structuring. And he have already tried regex, etc. Please let me know your code if there is superior way of it.</span>
<span class="comment-copy">Im trying to consider all the points he gave us in the comments, give me some time.</span>
<span class="comment-copy">@how is this memory efficient as you commented in the answers below?</span>
<span class="comment-copy">@Eliethesaiyan check the after the second code clock in <a href="https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects" rel="nofollow noreferrer">docs.python.org/3/tutorial/…</a> where it explains why. It basically uses an iterator in order to avoid having the file completely loaded. You obviously have to store it in a big array but at least you don't have two big arrays (In you case you onyl have one because you are inmediately printing while I'm storing, if you stored you would have 2 big lists and I just have 1, while in the print version you would have 1 and I wouldnt need any)</span>
<span class="comment-copy">@Adirio....even if you read line by line the program will end up loading the whole content in memory since you are "storing" .....unless of course, he read a chunk of the file...printing was only to show him the result...he will do whatever he wants with it...again...the argument you gave really doesnt convince me at all about memory issue</span>
<span class="comment-copy">@Eliethesaiyan our solutions differ in that I store and you print, right. He may do whatever he wants, true, but in order to compare our answers you do understand that we need to do the same thing. So lets assume we have a file of N+6 length (6 being the header). Lets assume that every row is an entry and there are not multi-row cells as your solution doesn't handle them while mine does. Then assume that what he wants to do is storing so that we both are under the same conditions. You would have two <code>list</code>s with N elements each, one from <code>f.readlines()[6:]</code> and the other where you store it.</span>
<span class="comment-copy">I would just have 1, where I store it. Now let's assume that he wants to print it instead of storing, you would still have the first <code>list</code> of N items while I would have none, as my loop doesn't create a <code>list</code> but reads a line each time.</span>
<span class="comment-copy">Getting all the lines in a <code>list</code> is not scalable memory-wise. This solution also splits "0001 0002" in two different values while they are a single column. <code>line.split()</code> with no argument already handles multiple spaces and it also handles line breaks for you. Cells occupying two rows as he described in a comment later are also not handled.</span>
<span class="comment-copy">@Adirio ..what is the not memory-wise option in this case?why don't you post the right answer?..he wants to be able to manipulate the data...i hope in your next answer you are going to describe it for him...he asked for a library also...so i think pandas is valid</span>
<span class="comment-copy">You are building the full list instead of iterating over the lines without storing the whole file. Did I make myself clear? You could be iterating over rows without loading them lal at a time so that with millions of rows the process won't get out of memory.</span>
