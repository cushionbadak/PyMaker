<div class="post-text" itemprop="text">
<p>I'm writing a method <code>check</code> of a class called <code>Rule</code> which can throw a <code>RuleEnforced</code> exception of which the error message includes a string representation of the <code>Rule</code> which raised it. Here is how it is implemented now:</p>
<pre><code>class RuleEnforced(Exception):
    def __init__(self, rule, reason):
        message = "The rule {rule} failed for the following reason: {reason}".format(rule=rule, reason=reason)
        super(RuleEnforced, self).__init__(message)

class Rule(object):
    def check(self):
        raise RuleEnforced(rule=self, reason="Why not?")
</code></pre>
<p>The <code>rule=self</code> argument is always the same, however, and I'm looking for a way to make the code more succinct by using, in the Exception, something like "<code>self.caller.__class__</code>" (in pseudo-code). Is there any way to achieve this?</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no <em>easier</em> method of getting to the instance that raised the exception.</p>
<p>Raised exceptions include a traceback, the stack of calls that lead to the exception site. You could extract <code>self</code> from that stack (the locals and globals of the stack are preserved), but that is not nearly as readable and easy and clear as just passing in <code>rule=self</code>. See the <a href="https://docs.python.org/3/library/inspect.html#types-and-members" rel="nofollow noreferrer"><code>inspect</code> module overview of internal objects</a> to see what <code>traceback</code> and <code>frame</code> objects support.</p>
<p>If you want to access the caller when constructing the exception (so <em>before</em> raising the exception), you'd have to inspect the current call stack and extract <code>self</code> from the caller. Again, this is not intuitive or readable, and depends on implementation details of the Python interpreter. Passing in the rule explicitly is much clearer and more readable. If you do want to go this route, see the <a href="https://docs.python.org/3/library/sys.html#sys._getframe" rel="nofollow noreferrer"><code>sys._getframe()</code> method</a> and the <a href="https://docs.python.org/3/library/inspect.html#the-interpreter-stack" rel="nofollow noreferrer"><code>inspect</code> module support for stack inspection</a>.</p>
<p>In other words, from the <a href="https://www.python.org/dev/peps/pep-0020/#the-zen-of-python" rel="nofollow noreferrer">Zen of Python</a>: <em>Explicit is better than implicit</em>.</p>
</div>
<span class="comment-copy">Yes, in the traceback. However, that's not nearly as accessible as just passing in <code>self</code>.</span>
