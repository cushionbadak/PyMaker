<div class="post-text" itemprop="text">
<p>I'm new to SQLAlchemy and trying to set up an ORM for an existing database. I'm setting up the tables using metadata and specifying the foreign keys myself. The table setup looks like this:</p>
<pre><code>class User(Base):
    __table__ = Table('users', metadata, 
                      Column('user_id', Integer, primary_key=True), 
                      autoload=True)

class Transaction(Base):
    __table__ = Table('transaction', metadata,
                      Column('transaction_id', Integer, primary_key=True), 
                      Column('seller_id', Integer, ForeignKey('users.user_id')),
                      Column('buyer_id', Integer, ForeignKey('users.user_id')),
                      autoload=True)
    seller = relationship('User', foreign_keys=[seller_id])
    buyer = relationship('User', foreign_keys=[buyer_id])
</code></pre>
<p>This doesn't run, with the error:</p>
<pre><code>NameError: name 'seller_id' is not defined
</code></pre>
<p>Any idea what's wrong? </p>
</div>
<div class="post-text" itemprop="text">
<p>To understand why you get the error you should refresh your understanding on <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">class construction</a> in Python:</p>
<blockquote>
<p>When a class definition is entered, a new namespace is created, and used as the local scope â€” thus, all assignments to local variables go into this new namespace. In particular, function definitions bind the name of the new function here.</p>
</blockquote>
<p>In your example you have no assignments to <code>seller_id</code> that would introduce the name, and so an attempt to use that name during class construction raises the <code>NameError</code>. What you do have available in the current namespace during class construction is the <code>__table__</code> that you assigned. In fact this exact use case is documented under <a href="http://docs.sqlalchemy.org/en/latest/orm/extensions/declarative/table_config.html#using-a-hybrid-approach-with-table" rel="nofollow noreferrer">"Using a Hybrid Approach with <code>__table__</code>"</a>:</p>
<blockquote>
<p>Note that when the <code>__table__</code> approach is used, the object is immediately usable as a plain <code>Table</code> within the class declaration body itself, as a Python class is only another syntactical block.</p>
</blockquote>
<p>In other words access the columns through the <code>Table</code> object bound to the name <code>__table__</code>:</p>
<pre><code>class Transaction(Base):
    __table__ = Table('transaction', metadata,
                      Column('transaction_id', Integer, primary_key=True), 
                      Column('seller_id', Integer, ForeignKey('users.user_id')),
                      Column('buyer_id', Integer, ForeignKey('users.user_id')),
                      autoload=True)
    seller = relationship('User', foreign_keys=[__table__.c.seller_id])
    buyer = relationship('User', foreign_keys=[__table__.c.buyer_id])
</code></pre>
</div>
