<div class="post-text" itemprop="text">
<p>list1=[1,2,3,4,5,6,7]
list2=[6,4,5]
I want to compute multiplication of ith maximum element pair from the two list, and then summation of the results, like 6*7+5*6+4*5.
Is there any python trick with short coding.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; a=[1,2,3,4,5,6,7]
&gt;&gt;&gt; b=[6,4,5]
&gt;&gt;&gt; sum([x*y for x,y in zip(sorted(a, reverse=True), sorted(b, reverse=True))])
92
</code></pre>
<p>or</p>
<pre><code>sum(map(lambda a, b: a*b, sorted(a, reverse=True), sorted(b, reverse=True)))
</code></pre>
<p>There are no special tricks, get familiar with some common functions in python, such as <code>map</code>, <code>sum</code>, <code>sorted</code>, <code>lambda</code>, or more on <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">itertools</a> and <a href="https://docs.python.org/3/library/functools.html" rel="nofollow noreferrer">functools</a>. And learn some <a href="https://www.haskell.org/" rel="nofollow noreferrer">haskell</a>...</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>list1=[1,2,3,4,5,6,7]
list2=[6,4,5]

sum(reduce(lambda a,b:a*b, i, 1) for i in zip(sorted(list1, reverse=True), sorted(list2, reverse=True)))
&gt;&gt;&gt; 92
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you may try this way...</p>
<pre><code>list1=[2,3,4,5,7,1,6]
list2 = [4,6,5]

list1 = sorted(list1,reverse = True)
list2 = sorted(list2, reverse=True)
sum = 0
length = min(len(list1),len(list2))
for i in range(length):
    sum =sum + list1[i]*list2[i]
print sum
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are already some descent answers posted, but I wanted to expand on some additional capability with functools and itertools that @delta referred to.
Python 2.x solution:</p>
<pre><code>from functools import partial # helps with less typing &amp; faster lookup
from itertools import izip # izip is a lazy memory efficient version of zip

In [33]: list1, list2 = [1,2,3,4,5,6,7], [6,4,5]
In [34]: des_sort = partial(sorted, reverse=True) #
In [35]: sum(a*b for a,b in izip(des_sort(list1), des_sort(list2))) 
Out[35]: 92
</code></pre>
<p>Note the execution of sum() using generator expression instead of list comprehension using sum([...]).</p>
<p>There's the numpy/pandas route for more math intensive operations; it is slower for small lists, but efficient for large numpy ndarray type. </p>
<p>Of course all of the speed/memory benefits make sense only for larger data sets otherwise any of the other solutions work just as well.</p>
<pre><code>In [39]: import pandas as pd
In [40]: pd.DataFrame([des_sort(list1), des_sort(list2)]).fillna(0).prod().sum() # performs dot product
Out[40]: 92.0
</code></pre>
</div>
