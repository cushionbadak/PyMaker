<div class="post-text" itemprop="text">
<p>In Python 2.7 running on WindowsÂ XP pro:</p>
<pre><code>import csv
outfile = file('test.csv', 'w')
writer = csv.writer(outfile, delimiter=',', quoting=csv.QUOTE_MINIMAL)
writer.writerow(['hi','dude'])
writer.writerow(['hi2','dude2'])
outfile.close()
</code></pre>
<p>It generates a file, test.csv, with an extra \r at each row, like so:</p>
<h2>test.csv</h2>
<pre><code>hi,dude\r\r\nhi2,dude2\r\r\n
</code></pre>
<p>instead of the expected:</p>
<pre><code>hi,dude\r\nhi2,dude2\r\n
</code></pre>
<p>Why is this happening, or is this actually the desired behavior?</p>
</div>
<div class="post-text" itemprop="text">
<p>On Windows, always open your files in binary mode ("rb" or "wb") before passing them to csv.reader or csv.writer.</p>
<p>Although the file is a text file, CSV is regarded a <em>binary</em> format by the libraries involved, with "\r\n" separating records. If that separator is written in text mode, the Python runtime replaces the "\n" with "\r\n" hence the "\r\r\n" that you observed in your file.</p>
<p>See <a href="https://stackoverflow.com/questions/1170214/pythons-csv-writer-produces-wrong-line-terminator/1170297#1170297">this previous answer</a>.</p>
<hr/>
<p>This answer was posted in 2010 and does not address the problem in Python3.</p>
<p>One of the possible fixes in Python3, as described in @YiboYang's answer, is opening the file with the <code>newline</code> parameter set to be an empty string:</p>
<pre><code>f = open(path_to_file, 'w', newline='')
writer = csv.writer(f)
...
...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While <a href="https://stackoverflow.com/a/3191811/3357935">@john-machin</a> gives a good answer, it's not always the best approach. For example, it doesn't work on Python 3 unless you encode all of your inputs to the CSV writer. Also, it doesn't address the issue if the script wants to use sys.stdout as the stream.</p>
<p>I suggest instead setting the 'lineterminator' attribute when creating the writer:</p>
<pre><code>import csv
import sys

doc = csv.writer(sys.stdout, lineterminator='\n')
doc.writerow('abc')
doc.writerow(range(3))
</code></pre>
<p>That example will work on Python 2 and Python 3 and won't produce the unwanted newline characters. Note, however, that it may produce undesirable newlines (omitting the LF character on Unix operating systems).</p>
<p>In most cases, however, I believe that behavior is preferable and more natural than treating all CSV as a binary format. I provide this answer as an alternative for your consideration.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3 (I haven't tried this in Python 2), you can also simply do</p>
<pre><code>with open('output.csv','w',newline='') as f:
    writer=csv.writer(f)
    writer.writerow(mystuff)
    ...
</code></pre>
<p>as per <a href="https://docs.python.org/3/library/csv.html#csv.writer" rel="noreferrer">documentation</a>.</p>
<p>More on this in the doc's <a href="https://docs.python.org/3/library/csv.html#id3" rel="noreferrer">footnote</a>:</p>
<blockquote>
<p>If newline='' is not specified, newlines embedded inside quoted fields
  will not be interpreted correctly, and on platforms that use \r\n
  linendings on write an extra \r will be added. It should always be
  safe to specify newline='', since the csv module does its own
  (universal) newline handling.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure exactly why it is happening, but changing your file mode from "w" to "wb" fixes it.  See my answer to "<a href="https://stackoverflow.com/questions/3191289/how-to-remove-m/3191470#3191470">how to remove ^M</a>" for more details.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have to add attribute newline="\n" to open function like this:</p>
<pre><code>with open('file.csv','w',newline="\n") as out:
    csv_out = csv.writer(out, delimiter =';')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can introduce the  <strong>lineterminator='\n'</strong> parameter in the csv writer command.</p>
<pre><code>import csv
delimiter='\t'
with open('tmp.csv', '+w', encoding='utf-8') as stream:
    writer = csv.writer(stream, delimiter=delimiter, quoting=csv.QUOTE_NONE, quotechar='',  lineterminator='\n')
    writer.writerow(['A1' , 'B1', 'C1'])
    writer.writerow(['A2' , 'B2', 'C2'])
    writer.writerow(['A3' , 'B3', 'C3'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Note that if you use DictWriter, you will have a new line from the open function and a new line from the writerow function.
You can use newline='' within the open function to remove the extra newline.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/1170214/python-2-csv-writer-produces-wrong-line-terminator-on-windows">Python 2 CSV writer produces wrong line terminator on Windows</a></span>
<span class="comment-copy">Also "ab" for appending in binary format.</span>
<span class="comment-copy">This is fine for ASCII but will kill encoding like UTF-8. Jason's solution below worked for me.</span>
<span class="comment-copy">In Python 3, I was able to fix it by using the following options for the file object: <code>open(..., "w", newline="\n", encoding="utf-8")</code>. <code>newline</code> can also be a blank string, same result. <code>"wb"</code> does not work in Python 3, strings and the buffer interface are incompatible.</span>
<span class="comment-copy">How many devs step on the flaming sack of poo that is CSV?</span>
<span class="comment-copy">Elegant way of handling the extra carriage return</span>
<span class="comment-copy">This is the best answer in my opinion. As to it being problematic in Unix, how about calling sys.platform and dealing with it dynamically?</span>
<span class="comment-copy">Best answer in my opinion too, and lineterminator='\n' works beautifully.</span>
<span class="comment-copy">Doesn't work in Python3 in Ubuntu.</span>
<span class="comment-copy">Can you give an example of the problem that arises if you don't "encode all of your inputs to the CSV writer"?</span>
<span class="comment-copy">Related: <a href="https://stackoverflow.com/a/39379062/95852">stackoverflow.com/a/39379062/95852</a></span>
<span class="comment-copy">Doesn't work for Python 2 unfortunately</span>
<span class="comment-copy">@Yibo-Yang, You saved me a lot of time.</span>
<span class="comment-copy">GREAT. I confirmed this way in python 3.5</span>
<span class="comment-copy">Doesn't work in Python3 in Ubuntu.</span>
<span class="comment-copy">Why wouldn't this be the default behavior?</span>
<span class="comment-copy">does not work in Python 2.7</span>
<span class="comment-copy">With Python 3.5.2, this was the only thing that worked for me (well, I used just <code>lineterminator='\n'</code>); the CSV module seemed to be the origin of <code>\r\n</code>. No set of arguments to <code>open</code> had any effect.</span>
