<div class="post-text" itemprop="text">
<p>I have the following small python script to run a local server for testing some html:</p>
<pre><code>print('opened')

from http.server import HTTPServer, SimpleHTTPRequestHandler

server_address = ('', 8000)
httpd = HTTPServer(server_address, SimpleHTTPRequestHandler)

print("Listening at https://127.0.0.1:8000/ . . .")
httpd.serve_forever()
</code></pre>
<p>When I run this in the terminal, it blocks the <code>print</code> statements: nothing is printed. But the server works and I can go to <code>localhost:8000</code> in the browser and access my html files. If, however, I comment out the last line, the call to <code>serve_forever()</code>, it works, printing both 'opened' and 'Listening at https:127.0.0.1:8000/ . . .'. Except of course it doesn't actually <em>work</em>, since now the server isn't being run.</p>
<p>I find this very confusing. The previous lines are executed before the last line. Why would the last line cause the previous lines to not work?</p>
<p>Python3 on Windows7 if anyone was going to ask, but I doubt that's relevant.</p>
</div>
<div class="post-text" itemprop="text">
<p>That maybe related with the "infamous" need to <strong>flush</strong> in order for your prints to work!</p>
<p><em>Related reading material:</em></p>
<ul>
<li><a href="https://www.tutorialspoint.com/python/file_flush.htm" rel="nofollow noreferrer">Theoretical knowledge on the subject</a> </li>
<li><a href="https://stackoverflow.com/questions/230751/how-to-flush-output-of-python-print?answertab=votes#tab-top">How to flush output of Python print?</a>,
<a href="https://stackoverflow.com/questions/25368786/python-print-does-not-work-in-loop?answertab=votes#tab-top">python `print` does not work in loop</a>, as suggested by @Kerorin:</li>
</ul>
<p><hr/>
Because you are using Python 3 and since version 3.3 you don't have to follow the solutions given in the above great answers. <br/>
The <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer">print build-in type</a> has an option <code>flush</code> which by default is <code>False</code>. Do: </p>
<pre><code>print('opened', flush=True)

from http.server import HTTPServer, SimpleHTTPRequestHandler

server_address = ('', 8000)
httpd = HTTPServer(server_address, SimpleHTTPRequestHandler)

print('Listening at https://127.0.0.1:8000/ . . .', flush=True)
httpd.serve_forever()
</code></pre>
<hr/>
<p>PS: <a href="https://stackoverflow.com/questions/43279486/how-to-see-print-output-from-generator-before-ending-the-cycle/43279570#43279570">This is a confirmed solution on a similar issue</a></p>
</div>
<div class="post-text" itemprop="text">
<p>There several solutions for this phenomena:</p>
<h2><strong>Disable output buffering</strong></h2>
<p>Reopen stdout file descriptor with write mode, and 0 as the buffer size (unbuffered). I suggest to write this line as the first line in your code, and this way, all your code will remain the same except the <code>stdout</code> buffer:</p>
<pre><code>sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)
</code></pre>
<h2><strong>Run python with unbuffered binary stdout and stderr</strong></h2>
<p>Force the binary layer of the stdout and stderr streams (which is available as their buffer attribute) to be unbuffered. The text I/O layer will still be line-buffered if writing to the console, or block-buffered if redirected to a non-interactive file.</p>
<p>So just run your script like this:</p>
<pre><code>python -u &lt;your_pyScript&gt;
</code></pre>
<p>Or by setting the environment variable <code>PYTHONUNBUFFERED</code></p>
<h2> <strong>Set <code>flush</code> keyword argument to true</strong></h2>
<p>Since Python 3.3, you can force the normal <code>print()</code> function to flush without the need to use <code>sys.stdout.flush()</code> just set the "flush" keyword argument to true:</p>
<pre><code>print("...", flush=True)
</code></pre>
<h2><strong>Changing the default in one module to <code>flush=True</code></strong></h2>
<p>You can change the default for the print function by using <code>functools.partial</code> on the global scope of a module:</p>
<pre><code>import functools
print = functools.partial(print, flush=True)
</code></pre>
<p>We can see it works just as expected:</p>
<pre><code>&gt;&gt;&gt; print('foo')
foo
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import logging
logging.info('Listening at https://127.0.0.1:8000/ . . .')
</code></pre>
<p>Hi, please, consider using logging instead of printing, you do not want bother with all the shortcomings of the print statement. Print is for beginners, may be for interactive mode, all the server coders rely on logging.</p>
<p>Check 
<a href="https://stackoverflow.com/questions/6918493/in-python-why-use-logging-instead-of-print">In python, why use logging instead of print?</a> for the full list of logging goodness.</p>
</div>
<span class="comment-copy">Would anything be printed if you call <code>sys.stdout.flush()</code> before the last <code>print</code>?</span>
<span class="comment-copy">Because I tried executing the same and I got both the messages along with the server running. Could you please also mention your platform and python3 version?</span>
<span class="comment-copy">And the reason your printing wasn't happening is that, your operating system supplied library was buffering the output. Since I was using Linux, it didn't do it for me. sys.stdout.flush forces it to display whatever is buffered up to that point.</span>
<span class="comment-copy">FYI, The same code as OP's does work well to me on Mac OS X.</span>
<span class="comment-copy">I think you will like these posts <a href="http://stackoverflow.com/questions/230751/how-to-flush-output-of-python-print" title="how to flush output of python print">stackoverflow.com/questions/230751/…</a> and <a href="http://stackoverflow.com/questions/25368786/python-print-does-not-work-in-loop" title="python print does not work in loop">stackoverflow.com/questions/25368786/…</a> It won't work well without flushing, either.</span>
<span class="comment-copy">Your 2nd, 3rd, and 4th solutions all work perfectly of course, but the first gives me an error: <code>File "C:\Users\Aerovistae\AppData\Local\Programs\Python\Python36-32\lib\os.py", line 1015, in fdopen     return io.open(fd, *args, **kwargs) ValueError: can't have unbuffered text I/O Exception ignored in: &lt;_io.TextIOWrapper name='&lt;stdout&gt;' mode='w' encoding='cp1252'&gt; OSError: [Errno 9] Bad file descriptor</code></span>
<span class="comment-copy">Doesn't actually answer the question, which is about understanding why this happens, but does provide a very useful related suggestion anyway! Upvoted. I hadn't encountered the logging module before.</span>
