<div class="post-text" itemprop="text">
<p>I am trying to build a hierarchical directed network where some nodes can branch into others, while others do not.  The values in the inner dictionary (i.e. the integers) are to keep track of leaves in the tree-like structure.  I've created a naive way to turn this particular nested dictionary <code>graph_data</code> into a directed graph but it is only specific to 3 layers.  Below shows the hierarchy: 
<a href="https://i.stack.imgur.com/8rJILm.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/8rJILm.png"/></a></p>
<p><strong>How can I create a nested function that adds edges to the directed graph for any number of levels?</strong>  For example, if there was a <code>level-3</code> or a <code>level-4</code> this would not work and I would have to expand it out each time. Do I need to use a <code>while</code> loop? </p>
<pre><code>import numpy as np
from collections import *
import networkx as nx

%matplotlib inline

# Hierarchical data
graph_data = {"root": {"level-0.A":0, 
                      "level-0.B":{"level-1.B.1":2, 
                                   "level-1.B.2": {"level-2.B.2.1":3, "level-2.B.2.2":1}}}}
# Empty directed graph
G = nx.DiGraph()

# Helper functions
is_dict = lambda x: type(x) in {dict, OrderedDict, defaultdict}

# Iterate through the layers
for root, level_0 in graph_data.items():
    if len(level_0) &gt; 0:
        for level_0_node, level_1 in level_0.items():
            G.add_edge(root, level_0_node)
            if is_dict(level_1):
                for level_1_node, level_2 in level_1.items():
                    G.add_edge(level_0_node, level_1_node)
                    if is_dict(level_2):
                        for level_2_node, level_3 in level_2.items():
                            G.add_edge(level_1_node, level_2_node)

np.random.seed(8)
nx.draw(G, with_labels=True)
</code></pre>
<p><a href="https://i.stack.imgur.com/G9lAh.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/G9lAh.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>Use a queue to hold the details, e.g.:</p>
<pre><code>from collections import Mapping
graph_data = {"root": {"level-0.A":0,
                      "level-0.B":{"level-1.B.1":2,
                                   "level-1.B.2": {"level-2.B.2.1":3, "level-2.B.2.2":1}}}}
# Empty directed graph
G = nx.DiGraph()

# Iterate through the layers
q = list(graph_data.items())
while q:
    v, d = q.pop()
    for nv, nd in d.items():
        G.add_edge(v, nv)
        if isinstance(nd, Mapping):
            q.append((nv, nd))

np.random.seed(8)
nx.draw(G, with_labels=True)
</code></pre>
<p><a href="https://i.stack.imgur.com/DBu90.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/DBu90.png"/></a></p>
</div>
<span class="comment-copy">you need a recursive function/call</span>
<span class="comment-copy">I've never used <code>pop</code>, <code>isinstance</code>, <code>Mapping</code>, or <code>MutableMapping</code> but it's nice to see how they are used.  I noticed you changed <code>MutableMapping</code> to <code>Mapping</code>.  I'm looking at the <a href="https://docs.python.org/3/library/collections.abc.html" rel="nofollow noreferrer">docs</a> but I'm a little unclear on what types of objects fall under each category.  I know that dictionary objects result in <code>True</code> vals for <code>MutableMapping</code> but am confused what the difference is.</span>
<span class="comment-copy"><code>Mapping</code> is the interface for reading a dictionary like object - which is all you needed. <code>MutableMapping</code> is for a read/write interface to a dictionary like object, overkill for your requirements. <code>dict</code>, <code>defaultdict</code>, etc. would return <code>True</code> for both of these <code>types</code>.</span>
