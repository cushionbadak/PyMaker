<div class="post-text" itemprop="text">
<p>In this single line code, When call a method as parameter, but not release resource, <code>__exit__</code> is called when method is finished ?</p>
<pre><code>hashlib.md5(open("PATH", 'rb').read()).hexdigest()
</code></pre>
<p>It can be issued about 'improper resource release' ?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>__exit__</code> won't be called, <code>__exit__</code> is triggered at the end of <a href="https://docs.python.org/2/reference/compound_stmts.html#the-with-statement" rel="nofollow noreferrer"><code>with-statement</code></a>.</p>
<p>In CPython <a href="https://docs.python.org/3/reference/datamodel.html#object.__del__" rel="nofollow noreferrer"><code>__del__</code></a> will get triggered eventually as there are no reference to this file object anymore and <a href="https://hg.python.org/cpython/file/2.7/Objects/fileobject.c#l612" rel="nofollow noreferrer">it will close the file</a>.</p>
<p>But it's recommended to use <a href="https://docs.python.org/2/reference/compound_stmts.html#the-with-statement" rel="nofollow noreferrer"><code>with-statement</code></a> to make sure the <code>close()</code> call is explicit not implicit and in this way you're not relying on implementation details.</p>
<pre><code>with open("PATH", 'rb') as f:
    hash = hashlib.md5(f.read()).hexdigest()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can find a comprehensive explanations regard this in python <a href="https://docs.python.org/3.6/reference/datamodel.html" rel="nofollow noreferrer">data models documentation</a>:</p>
<blockquote>
<p>Some objects contain references to “external” resources such as open files or windows. It is understood that these resources are freed when the object is garbage-collected, but since garbage collection is not guaranteed to happen, such objects also provide an explicit way to release the external resource, usually a <code>close()</code> method. Programs are strongly recommended to explicitly close such objects. The <code>try...finally</code> statement and the <code>with</code> statement provide convenient ways to do this.</p>
</blockquote>
<p>That said your opened object will not be closed since you're not calling the <code>close</code> attribute of the opened object. If you don't call the close explicitly you should wrap your code within a <code>with</code> statement:</p>
<pre><code>with open("PATH", 'rb') as f:
    hashlib.md5(f.read()).hexdigest()
</code></pre>
<p>By doing the context manager will call <code>__exit__</code> method automatically at the end of the block which it will call the close method of your file object consequently.</p>
</div>
<span class="comment-copy">no, the <code>__exit__</code> method will not be called</span>
