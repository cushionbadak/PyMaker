<div class="post-text" itemprop="text">
<p>Before explaining my requirement, let me explain what I don't want:</p>
<pre><code>s= 'Hello satya, have you achieved your goal'
s.count('l') #o/p: 3
#I don't want 3 instead  I need 2. How? explained below.
</code></pre>
<p>Expected Output:</p>
<pre><code>{'H':3, 'e':3, 'l':2, 'o':4, 's':1, 'a':3....etc}
</code></pre>
<p>That is : take all unique letters/characters from that sentence.
Then find "in how many words that character is present" , so count that no of occurence and store in dictionary.</p>
<p>For example character 'l' is present 3 times in that sentence, but  present in 2 WORDS(in hello it is repeated but I want it to be counted as 1).</p>
<p>Please suggest. If i missed something to make my problem more understandable, please highlight.</p>
<p>Here is what I tried:</p>
<pre><code>def char_word(s):
    s_d = {}
    chars = list(s.replace(' ', ''))
    print(chars)
    for char in chars:
        c_count = 0
        for word in s.split():
            if char in word:
                c_count += 1
            s_d[char] = c_count
    print(s_d)
    return s_d
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First, split the string into individual words and create the output dictionary. I recommend using the <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> c.ass, which is just a <code>dict</code> subclass designed to count occurrences:</p>
<pre><code>import collections
counter = collections.Counter()
words = s.split()
</code></pre>
<p>Now loop through all of the words and create a <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer"><code>set</code></a> from each word. Since <code>set</code> can't have duplicate values, it's guaranteed to have exactly one copy of each characters:</p>
<pre><code>for word in words:
    characters = set(word)
</code></pre>
<p>And finally, loop through the now unique characters of the word, incrementing the counter's value for that character:</p>
<pre><code>    for character in characters:
        counter[character] += 1
</code></pre>
<p>Also, you can shorten this quite a lot, even down to a one-liner:</p>
<pre><code>&gt;&gt;&gt; counter = collections.Counter(c for word in s.split() for c in set(word))
</code></pre>
<p>To get the count of a particular character, just access it through <code>counter[c]</code>:</p>
<pre><code>&gt;&gt;&gt; counter['l']
2
&gt;&gt;&gt; counter['x']
0
&gt;&gt;&gt; counter['H']
1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do </p>
<pre><code>sum(['l' in i for i in s.split()])
</code></pre>
<p><code>s.split()</code> splits your sentence into words (it splits by <code></code>). Then the for-loop checks if the character <code>l</code> is in that particular word, yielding <code>True</code> or <code>False</code> if it is or is not. The <code>sum</code> function counts all the <code>True</code>s</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it, too, within <code>groupby</code> from <code>itertools</code> module and <code>dict comprenesion</code> like this way:</p>
<pre><code>from itertools import groupby

a = 'Hello satya, have you achieved your goal'
a = a.replace(',','').split()
sub = [j.lower() for k in a for j in set(k)]
final = {k:len(list(v)) for k,v in groupby(sorted(sub), lambda x: x)}
print(final)
</code></pre>
<p>Outut: </p>
<pre><code>{'h': 3, 'u': 2, 's': 1, 'i': 1, 'c': 1, 'a': 4, 'd': 1, 'e': 3, 't': 1, 'v': 2, 'l': 2, 'o': 4, 'r': 1, 'g': 1, 'y': 3}
</code></pre>
</div>
<span class="comment-copy">As usual, what have you tried to solve your problem?</span>
<span class="comment-copy">posted my trial in question. Don't know if it is pythonic way.</span>
<span class="comment-copy">@Markus-did the One liner Worked for you, because I am getting "NameError: name 'word' is not defined"</span>
<span class="comment-copy">@Satya Fixed. I accidentally pasted in an earlier prototype.</span>
<span class="comment-copy">@markus-I prefer char_dict = dict(counter). Thanks for the OneLiner. Worked for me.Accepted as Answer.</span>
<span class="comment-copy">@Satya They should work exactly the same except <code>Counter</code> returns <code>0</code> if a key doesn't exist, while <code>dict</code> raises a <code>KeyError</code>. But you're free to do as you please, glad to help :)</span>
<span class="comment-copy">This doesn't yield the desired output dictionary though.</span>
