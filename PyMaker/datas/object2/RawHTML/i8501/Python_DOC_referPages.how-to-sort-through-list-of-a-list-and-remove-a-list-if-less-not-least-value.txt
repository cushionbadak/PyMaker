<div class="post-text" itemprop="text">
<p>Currently, this takes the list of the candidates and sorts it so that the candidates with the lowest score are in the first positions, how would I get it so that it checks each list and if the number in the second field is not equal to the first one it deletes this list? 
I am trying to remove all lists that are not the lowest or equal lowest number in candidate [x][1]:</p>
<pre><code>candidates = [[name, 3, characteristic], [name, 7, characteristic], [name, 3, characteristic]]
</code></pre>
<p>so the following code should only delete candidates [1]</p>
<pre><code>from operator import itemgetter

candidates.sort(key=itemgetter(1))

for [x][1] in candidates:
    if candidates[x][1] != candidates[0][1] :
        candidates.remove(candidates[x])
</code></pre>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem with your solution is that you are modifying the <code>candidates</code> list while iterating over the very same list. This causes problems as you probably noticed.</p>
<p>Rather than <code>sorted()</code> you can use <a href="https://docs.python.org/3/library/functions.html#min" rel="nofollow noreferrer"><code>min()</code></a> with a key to determine the item with the least value. This gives better performance - O(n) vs. O(n log n) - which might be important if there is a long list of candidates.</p>
<p>Furthermore, you would be better off determining the minimum value upfront, store it in a variable, and use that in a list comprehension/filter when comparing items. This avoids multiple redundant calls to <code>min()</code> resulting in a more efficient solution:</p>
<pre><code>from operator import itemgetter

candidates = [['name', 97, 'blah'], ['name', 7, 'candidate'], ['name', 3, 'characteristic'], ['name', 3, 'characteristic']]

min_value = min(candidates, key=itemgetter(1))[1]
candidates = [candidate for candidate in candidates if candidate[1] == min_value]
print(candidates)
# [['name', 3, 'characteristic'], ['name', 3, 'characteristic']]
</code></pre>
<p>Note that I use a list comprehension here. They are considered more Pythonic, may have better performance, and can easily be changed into generator expressions which can also yield better performance in many situations.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try this, if I don't misunderstand your meaning:</p>
<pre><code>from operator import itemgetter
candidates = [['name', 3, 'characteristic'], ['name', 7, 'characteristic'], ['name', 3, 'characteristic']]

candidates=filter(lambda x:x[1]==sorted(candidates,key=itemgetter(1))[0][1],candidates)

print(candidates)
</code></pre>
<p>Use <code>filter()</code> method to remove the sublist, if the second field is not equal to the lowest score.</p>
<p>If you're using Python3.x, you should use <code>list(filter(...))</code></p>
<p>Output:</p>
<pre><code>[['name', 3, 'characteristic'], ['name', 3, 'characteristic']]
</code></pre>
<hr/>
<p><strong>Update</strong></p>
<p>I forgot that you can use <code>min()</code> to get the lowest score, it is an more efficient way:</p>
<pre><code>candidates = [['name', 3, 'characteristic'], ['name', 7, 'characteristic'], ['name', 3, 'characteristic']]

candidates=list(filter(lambda x:x[1]==min([i[1] for i in candidates]),candidates))

print(candidates)
</code></pre>
</div>
<span class="comment-copy">If I understood you correctly, you could use the <code>filter()</code> function to do this</span>
<span class="comment-copy">Yeah I wasn't sure how to implement that for a list of a list though, any ideas?</span>
<span class="comment-copy">This is now returning &lt;filter object at 0x1104137f0&gt;, any ideas?</span>
<span class="comment-copy">@TimJames In Python3.x, you should use <code>list(filter(...))</code> to convert the result to list.</span>
<span class="comment-copy">This is not efficient - the list is sorted once for each item in the list. Sort once and save the result and, better, use <code>min()</code>.</span>
<span class="comment-copy">@mhawke Yeah, that's an more efficient way, I update my answer.</span>
