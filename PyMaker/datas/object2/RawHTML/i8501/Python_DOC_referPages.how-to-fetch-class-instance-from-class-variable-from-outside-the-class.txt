<div class="post-text" itemprop="text">
<p>Let's say I have this:</p>
<pre><code>from PySide2 import QtWidgets

class MyClass(object):
    def __init__(self, parent=None):
        self.class_variable = QtWidgets.QWidget()

class_instance = MyClass()
variable = class_instance.class_variable
class_instance_returned = mystery_method(variable)  # How to make this return class_instance?
</code></pre>
<p>How should I define <code>mystery_method</code> so that it would return the <code>class_instance</code> instance?</p>
<p>The real-world case I have is that I'm sending a <code>QWidget</code> which I'm using as a base instance for .ui file loading into a function. Inside this function I need to figure out which class instance it belongs to.</p>
</div>
<div class="post-text" itemprop="text">
<p>One way would we to define <code>foo</code> as a custom property that returns both its value and the related instance when its value is fetched:</p>
<pre><code>from collections import namedtuple


class Prop(object):
    def __init__(self, val):
        self.val = val

    def __get__(self, instance, type):
        return namedtuple('Prop', ('value', 'instance'))(self.val, instance)

    def __set__(self, instance, val):
        self.val = val


class MyClass(object):
    foo = Prop('bar')
</code></pre>
<p>Now in your program you can <strong>explicitly</strong> use its value and the related instance using <code>foo</code>'s <code>value</code> and <code>instance</code> attributes respectively.</p>
<p><strong>Demo:</strong></p>
<pre><code>&gt;&gt;&gt; instance = MyClass()
&gt;&gt;&gt; instance.foo
Prop(value='bar', instance=&lt;__main__.MyClass object at 0x10effbcd0&gt;)
&gt;&gt;&gt; instance.foo.value
'bar'
&gt;&gt;&gt; instance.foo.instance
&lt;__main__.MyClass object at 0x10effbcd0&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Python 2.7</strong></p>
<pre><code>class MyClass(object):
    def foo():
        return 'bar'

instance = MyClass()

def mystery_method(method):
    return method.im_self.__class__

print mystery_method(instance.foo)
</code></pre>
<p><strong>Python 3</strong></p>
<pre><code>class MyClass(object):
    def foo():
        return 'bar'

instance = MyClass()

def mystery_method(method):
    return method.__self__.__class__

print mystery_method(instance.foo)
</code></pre>
<p><strong>EDIT</strong></p>
<p>After the OP was edited:</p>
<pre><code>class ParentClass():
    def foo():
        return 'bar'

class MyClass(object):
    def __init__(self, parent=None):
        self.instance_attribute = ParentClass()

def mystery_method(method):
    return method.__class__

class_instance = MyClass()
print mystery_method(class_instance.instance_attribute)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In general you cannot (at least not without a lot of searching through all the objects in the system) but if all you want is to find which instances of a class match a particular value then it's fairly easy.</p>
<p>You can create a set of all instances and iterate over them to find what you need.</p>
<pre><code>from weakref import WeakSet
class MyClass(object):
    _instances = WeakSet()

    def __init__(self, foo):
        self._instances.add(self)
        self.foo = foo

    @classmethod
    def findFoo(cls, foo):
        return [instance for instance in cls._instances if instance.foo == foo]


&gt;&gt;&gt; instance1 = MyClass('bar')
&gt;&gt;&gt; instance2 = MyClass('baz')
&gt;&gt;&gt; MyClass.findFoo('baz')
[&lt;__main__.MyClass object at 0x7f6723308f50&gt;]
&gt;&gt;&gt; MyClass.findFoo('bar')
[&lt;__main__.MyClass object at 0x7f6723308c50&gt;]
</code></pre>
<p>Note that deleting the object won't remove it immediately, it may not go until garbage collected:</p>
<pre><code>&gt;&gt;&gt; del instance1
&gt;&gt;&gt; MyClass.findFoo('bar')
[&lt;__main__.MyClass object at 0x7f6723308c50&gt;]
&gt;&gt;&gt; import gc
&gt;&gt;&gt; gc.collect()
16
&gt;&gt;&gt; MyClass.findFoo('bar')
[]
</code></pre>
<p>However in general you would be better to keep the reference to the original object hanging around and just use that.</p>
<p>Also, note that you cannot reliably tell which instance holds <code>'bar'</code> if it is stored in more than one object: they could be the same <code>'bar'</code> or they could be different ones, and whether they are the same or different is an implementation detail.</p>
</div>
<span class="comment-copy">you want <a href="https://docs.python.org/3/library/functions.html#type" rel="nofollow noreferrer"><code>type</code></a></span>
<span class="comment-copy">No I don't want the type. I want the actual class instance.</span>
<span class="comment-copy">Whoops misunderstood. I don't think that's possible in the general case. Or at all, really...</span>
<span class="comment-copy">There are infinite possible answers to this questions. What do you want exactly? A method that returns all instances of <code>MyClass</code> with their attribute <code>foo</code> == 'bar' stored in global scope?</span>
<span class="comment-copy">Wow, this is excellent. Thank you!</span>
<span class="comment-copy">Sorry, I realized I had done a big mistake in my original post. I had defined the class as a function. I meant having a class... I just edited my question.</span>
<span class="comment-copy"><code>foo</code> is suppose to be a class-level data attribute, not a method.</span>
<span class="comment-copy">Hi @fredrik! There is still something off with the code on your post. See, you set <code>foo</code> as a local variable of the <code>__init__</code> method, but then you try to pass <code>foo</code> to <code>mystery_method</code> as if <code>foo</code> was a method of <code>MyClass</code>.</span>
<span class="comment-copy">@IvanChaer yeah, sorry ...I totally messed up here. I've again edited my question.</span>
<span class="comment-copy">@fredrik, If all you need is the class of an object, you can use _<i>class_</i>. I edited my answer with this in mind. Please, let me know if I understood it correctly.</span>
