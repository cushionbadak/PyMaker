<div class="post-text" itemprop="text">
<p>I try to make my code more modular for general readability. When moving functions and dictionaries storing function names to external py.files in the same folder, it raises a name error. It does however work fine when in one file and the dict-file importing the function file (please see below):</p>
<p>Does not work:</p>
<pre><code>data.py
modes = {'add' : {'adds an entry': addMode}} 

func.py
def addMode():
    print('tada')
</code></pre>
<p>Main file</p>
<pre><code>from data import modes
from func import addMode
for v, button in modes.items():
    for tip, function in button.items():
        function()
</code></pre>
<p>Does work but seems messy:</p>
<pre><code>data2.py
from func import addMode
modes = {'add' : {'adds an entry': addMode}}
</code></pre>
<p>Main file</p>
<pre><code>from data2 import modes
for v, button in modes.items():
    for tip, function in button.items():
        function()
</code></pre>
<p>Is there a reason why the former does not work? It seems that order is of importance for the addMode in the dict to not cause a NameError, is there a way to force it?</p>
</div>
<div class="post-text" itemprop="text">
<p>It doesn't have much to do with the order things are in â€” this is how namespaces work. data.py and func.py have different namespaces, and if you want to use something in one namespace from another, you need to import it. And importing something into the main file's namespace doesn't cause it to appear in data.py's namespace.</p>
</div>
<span class="comment-copy">you want to use <code>func</code>'s <code>addMode</code> function, import it in <code>data.py</code>, not in <code>main.py</code>, would also work.</span>
<span class="comment-copy">I did in the latter example. Does work, but seems messy :(</span>
<span class="comment-copy">not sure what makes it seem messy, maybe because you prefer to see all imports in one location? maybe the functionality of  <code>__all__</code> in an <code>__init__.py</code> file may be the way you'd want to organize your imports. <a href="http://stackoverflow.com/questions/1057431/loading-all-modules-in-a-folder-in-python">Loading all modules in a folder in Python</a>, or <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">modules tutorial</a></span>
<span class="comment-copy">So, even though both are imported in the main function, they have separate namespaces? I thought (apparently foolishly) that the import function takes the thing to be imported and treats it as part of the script.</span>
<span class="comment-copy">So the "messy" way described above is indeed how it should work?</span>
<span class="comment-copy">@Necrorubi: <code>import</code> pulls in values from another namespace. You can think of a namespace as kind of like a dictionary. So your data.py file is kind of like <code>data_py = {}; data_py['modes'] = {'add' : {'adds an entry': data_py['addMode']}}</code>. Then when you do <code>from func import addMode</code> in data.py, that's like writing <code>data_py['addMode'] = func_py['addMode']</code>. Any symbol you reference has to have been brought into the current namespace somehow.</span>
<span class="comment-copy">@Necrorubi: So yes, the "messy" way is the Pythonic way to do it. There are other ways you could get around it, but they'd be more complicated and most are less Pythonic.</span>
<span class="comment-copy">Ah, great thanks for the advice and feedback. I am still rather new to python and have yet to get a grasp of what is pythonic vs hackish/depreciated. As I am new to SO, I cannot upvote yet. Is there anythin I can/should do to improve my etiquette (other than including MCV-Code)?</span>
