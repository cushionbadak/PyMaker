<div class="post-text" itemprop="text">
<pre><code>hex = "\xc0\x1d\x00\x00"
n = 4

result = chr(int(hex, 16) + n)
</code></pre>
<p>I'm reading an .avi file and extracting "hex" from it
I need to be able to operate on it before putting it back in the file
but I'm struggling with the conversions, is there any way I could do this ?</p>
<blockquote>
<p>ValueError: invalid literal for int() with base 16: '\xc0\x1d\x00\x00'</p>
</blockquote>
<p>edit : more details</p>
<p>I heard .avi files have frame indexes that start at "idx1", the 4 bytes following ("\xc0\x1d\x00\x00") describe the length of that said index.
Since I'm duplicating frames I need to fix the size of the index to make the file readable again.</p>
</div>
<div class="post-text" itemprop="text">
<p>assuming your using python 2.7 ?</p>
<pre><code>arr = []
for h in hex:
    arr.append(ord(h))
print( arr ) 

&gt;&gt;&gt; [192, 29, 0, 0]
</code></pre>
<p>Then you could compress to a 32 int or just add 4 to the LSB ? </p>
<pre><code>def addToBytearray(arr, n):
    l = len(arr) - 1 
    for i,x in enumerate(arr[::-1]):
        x += n
        n = x &gt;&gt; 8
        arr[l-i] =  x &amp; 0xff
        if n == 0 : 
            break
    if n != 0 : 
        print( "overflow error" ) 
    return arr


print(addToBytearray(arr,4))
&gt;&gt;&gt; [192, 29, 0, 4]

print(addToBytearray(arr,304))
&gt;&gt;&gt; [192, 29, 1, 52]
</code></pre>
<p>if you want to only use built-ins ( should be easier with 3.x ) </p>
</div>
<span class="comment-copy">Look at the <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer">struct</a> module.</span>
<span class="comment-copy">You need to do only one hex value. You are trying to calculate 4 different hex values at once, Python cannot do that in one function call.</span>
<span class="comment-copy">Can you indicate the desired output and provide more examples?</span>
<span class="comment-copy">edited the original post ! not sure if I should of answered here or if that's just fine since it's my first time here, thanks though</span>
<span class="comment-copy"><code>struct.unpack('&lt;i',"\xc0\x1d\x00\x00")[0]</code> â‡’ <code>7616</code></span>
