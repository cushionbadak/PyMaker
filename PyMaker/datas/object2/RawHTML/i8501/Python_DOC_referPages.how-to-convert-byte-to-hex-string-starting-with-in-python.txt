<div class="post-text" itemprop="text">
<p>I would like to convert Unicode characters encoded by 'utf-8' to hex string of which character starts with '%' because the API server only recognize this form.</p>
<p>For example, if I need to input unicode character '※' to the server, I should convert this character to string '%E2%80%BB'. (It does not matter whether a character is upper or lower.)</p>
<p>I found the way to convert unicode character to bytes and convert bytes to hex string in <a href="https://stackoverflow.com/a/35599781">https://stackoverflow.com/a/35599781</a>.</p>
<pre><code>&gt;&gt;&gt; print('※'.encode('utf-8'))
b'\xe2\x80\xbb'
&gt;&gt;&gt; print('※'.encode('utf-8').hex())
e280bb
</code></pre>
<p>But I need the form of starting with '%' like '%E2%80%BB' or %e2%80%bb'</p>
<p>Are there any concise way to implement this? Or do I need to make the function to add '%' to each hex character?</p>
</div>
<div class="post-text" itemprop="text">
<p>There is two ways to do this:</p>
<p>The <strong>preferred</strong> solution. Use <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode" rel="nofollow noreferrer"><code>urllib.parse.urlencode</code></a> and specify multiple parameters and encode all at once:</p>
<pre><code>urllib.parse.urlencode({'parameter': '※', 'test': 'True'})
# parameter=%E2%80%BB&amp;test=True
</code></pre>
<p>Or, you can manually convert this into chunks of two symbols, then join with the <code>%</code> symbol:</p>
<pre><code>def encode_symbol(symbol):
    symbol_hex = symbol.encode('utf-8').hex()
    symbol_groups = [symbol_hex[i:i + 2].upper() for i in range(0, len(symbol_hex), 2)]
    symbol_groups.insert(0, '')
    return '%'.join(symbol_groups)

encode_symbol('※')
# %E2%80%BB
</code></pre>
</div>
<span class="comment-copy">Looks like url encoding - take a look at <code>urllib.parse.urlencode</code>.</span>
<span class="comment-copy">Thank you! The preferred solution is what I look for.</span>
