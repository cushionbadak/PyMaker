<div class="post-text" itemprop="text">
<p>I am logging into a remote node using SSH, getting the status of a service and want to print it.</p>
<p>Running the bash command on my remote node yields.</p>
<pre><code>[root@redis-1 ~]# redis-cli -a '!t3bmjEJss' info replication | grep role | cut -d':' -f2
slave
</code></pre>
<p>The python code that Ive written is </p>
<pre><code>def serviceDetails(ip,svc):
    if svc == 'redis-server':
       ssh = subprocess.Popen(["ssh", "%s" % ip, "redis-cli -a '!t3Z9LJt2_wmUDbmjEJss' info replication | grep role | cut -d':' -f2"], shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
       result = ssh.stdout.readlines()
       print (result)
    else:
       print ("Redis service is not running on this node")
</code></pre>
<p>The output that I am getting from <code>result</code> variable is:</p>
<pre><code>[b'slave\r\n']
</code></pre>
<p>Why do all these extra characters appear ? And how can I get rid of them ? </p>
</div>
<div class="post-text" itemprop="text">
<p>The entire process of calling <code>subprocess.Popen</code> and then manually reading from its <code>stdout</code> property can be condensed into one call which will also automatically performs the bytes to string conversion:</p>
<pre><code>subprocess.check_output([arg0, arg1, ...], encoding='utf-8')
</code></pre>
<p>If you also want to read stderr, then include a <code>stderr=subprocess.STDOUT</code>.</p>
<p>You can find the <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow noreferrer">docs</a> for <code>subprocess.check_output</code>  here.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you use <code>.readlines()</code>, it will return a list of lines. You can use <code>.read()</code> if you want it all in one string. It has the b there because it is a byte string. To get it to a normal string, you can use <code>.decode('utf-8')</code> in most cases. It may be a different encoding, but utf-8 will probably work. Then to get rid of the new line, you can use <code>.strip()</code>. Putting it all together, either of these would work:</p>
<pre><code>result = ssh.stdout.read().decode('utf-8').strip()
print(result)
# slave
</code></pre>
<p>or</p>
<pre><code>result = [line.decode('utf-8').strip() for line in ssh.stdout.readlines()]
print(result)
# ['slave']
</code></pre>
<p>Either one will work when you have only one line. If you have more than one line, the first will not work properly; it will have <code>\r\n</code> in the middle of the string.</p>
</div>
<span class="comment-copy"><code>result = result.encode('utf-8').strip()</code></span>
<span class="comment-copy">@zondo Is this for a list ? Cause right now Im getting  Traceback (most recent call last):   File "&lt;stdin&gt;", line 1, in &lt;module&gt; AttributeError: 'list' object has no attribute 'encode' . result is a list.</span>
<span class="comment-copy">I'm sorry, no. That's for each line in <code>stdout</code>. You would want <code>result = [line.encode('utf-8').strip() for line in result]</code></span>
<span class="comment-copy">@zondo This approach works perfectly fine with python v2.7 but fails with v3.4 . Im trying to run it with 3.4 and get this error AttributeError: 'bytes' object has no attribute 'encode'</span>
<span class="comment-copy">Ah, encoding and decoding are too confusing. I meant <code>.decode()</code>, not <code>.encode()</code>.</span>
