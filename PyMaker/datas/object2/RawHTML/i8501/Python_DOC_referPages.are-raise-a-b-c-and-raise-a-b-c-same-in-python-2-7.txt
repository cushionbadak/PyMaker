<div class="post-text" itemprop="text">
<p>Can somebody please explain if why or why not 'raise a,b,c,' and 'raise (a,b,c)' are same in Python 2.7. </p>
<p>I tried to find information on how Tuples are treated from <a href="https://docs.python.org/2.7/reference/simple_stmts.html#grammar-token-raise_stmt" rel="nofollow noreferrer">here</a> and <a href="https://www.python.org/dev/peps/pep-3109/" rel="nofollow noreferrer">here</a> but I couldn't establish if I could use the above expressions in place of one another. </p>
<p>Here is some background.
I have a Python 2 code which is having a lot of following statements </p>
<pre><code>raise e,v,t
</code></pre>
<p>Python 3 gives error on this syntax. 
Converting it to following gets away the Python 3 compiler error but I wanted to verify if intent remains same in both Python 2 as well as Python 3. </p>
<pre><code>raise (e,v,t)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Never pass a tuple to <code>raise</code>. It won't do what you expect.</p>
<p>On both Python 2 and Python 3, <code>raise</code> is documented to not accept a tuple. However, Python 2 has a <a href="https://github.com/python/cpython/blob/2.7/Python/ceval.c#L3846" rel="nofollow noreferrer">weird code path</a> in the <code>raise</code> implementation where if the first (or only) argument to <code>raise</code> is a tuple, it will be repeatedly replaced with its first element until Python reaches something that isn't a tuple. I have no idea why this is a thing, but it means that something like</p>
<pre><code>raise ((Exception,), "other", "tuple", "items", "get", "ignored")
</code></pre>
<p>gets treated like</p>
<pre><code>raise Exception
</code></pre>
<p>Here's a <a href="http://ideone.com/lmNOWm" rel="nofollow noreferrer">demo</a>. Python 3 behaves <a href="http://ideone.com/e2ADfD" rel="nofollow noreferrer">more sensibly</a>, erroring out because a tuple isn't an exception.</p>
<hr/>
<p>The syntax for raising exceptions changed on Python 3. The Python 2 statement</p>
<pre><code>raise ExceptionType, value, traceback
</code></pre>
<p>is now</p>
<pre><code>raise ExceptionType(value).with_traceback(traceback)
</code></pre>
<p>or, if <code>value</code> is an instance of <code>ExceptionType</code>,</p>
<pre><code>raise value.with_traceback(traceback)
</code></pre>
<p>Unfortunately, these syntaxes are incompatible to the degree that you can't even write both and pick which one to run based on your Python version. You'll get a syntax error before your code even runs.</p>
<hr/>
<p>The easiest way to fix this is with a compatibility library. For example, with <a href="https://pythonhosted.org/six/index.html#six.reraise" rel="nofollow noreferrer"><code>six.reraise</code></a>:</p>
<pre><code>six.reraise(ExceptionType, value, traceback)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>raise</code> has <em>never</em> taken a tuple as a parameter. In Python 2, the syntax was such that it <em>looked</em> like a tuple, which is where your confusion is coming from. There was a drastic syntax change for Python 3, where the redundant exception class type was removed and the keyword <code>from</code> is used in place of a comma.</p>
<p>In Python 2:</p>
<pre><code>raise a, b, c
</code></pre>
<p>Becomes in Python 3:</p>
<pre><code>raise b.with_traceback(c)
</code></pre>
</div>
<span class="comment-copy">Did you try them? Did you get the same result?</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/34463087/raise-exception-in-python-2-x-and-3-x/40877934" title="raise exception in python 2 x and 3 x">stackoverflow.com/questions/34463087/…</a> <a href="https://stackoverflow.com/questions/5497013/convert-code-from-python-2-x-to-3-x/5497070" title="convert code from python 2 x to 3 x">stackoverflow.com/questions/5497013/…</a></span>
<span class="comment-copy">Did you try to check the Python3 <a href="https://docs.python.org/3.5/reference/simple_stmts.html#grammar-token-raise_stmt" rel="nofollow noreferrer">docs</a>?</span>
<span class="comment-copy">@AChampion : I tried <code>x = 1,2,3</code> and <code>x =(1,2,3)</code> in python interpreter and got 'type(x)' as same that's why I had confusion if it is a safe change.</span>
<span class="comment-copy">In other words, no it is not the same. In fact in Python 3 if you ever execute that line, you'll get an error, because it will try to call that instance (which is a tuple), and you can only <code>raise</code> objects that derive from <code>BaseException</code></span>
<span class="comment-copy">You've gotten the exception chaining syntax mixed up with the syntax for alternate tracebacks. The way to pick a different traceback is the <a href="https://docs.python.org/3/library/exceptions.html#BaseException.with_traceback" rel="nofollow noreferrer"><code>with_traceback</code></a> method, so it's <code>raise a(b).with_traceback(c)</code>, or <code>raise b.with_traceback(c)</code> if <code>b</code> is already an instance of <code>a</code> (or one of a few other variants, because Python 2 has a lot of ways to interpret the second <code>raise</code> argument). <a href="https://docs.python.org/3/reference/simple_stmts.html#the-raise-statement" rel="nofollow noreferrer"><code>from</code> is for one exception being caused by another</a>.</span>
<span class="comment-copy">@user2357112 thanks, I was misreading the documentation. I've never actually tried raising anything other than a simple <code>Exception</code> class myself.</span>
