<div class="post-text" itemprop="text">
<p>Simple question – can I print the source code of this <code>if</code>?</p>
<pre><code>if __name__ == '__main__':
  # ...
  # this is the `if` I want to print
  #  V 
  if args and args[0][0] == '-':
    if args[0] in ('--help','-h','-?'):
      print_source_of_block(level=2)
    icase = 'i' in args[0]
    desc = 'd' in args[0]
    args = args[1:]
</code></pre>
<p>Please don't ask me why I need it, nor give me advice on how to write user help. I want to know it because I'm curious.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yeah, that's doable. Here's a quick sketch of how you could do it and what tools would be involved:</p>
<ol>
<li>Retrieve the stack frame of <code>print_source_of_block</code>'s caller with <a href="https://docs.python.org/3/library/inspect.html#inspect.currentframe" rel="nofollow noreferrer"><code>inspect.currentframe().f_back</code></a>.</li>
<li>Determine the caller's source file and line number within that source file with <a href="https://docs.python.org/3/library/inspect.html#inspect.getframeinfo" rel="nofollow noreferrer"><code>inspect.getframeinfo</code></a>.</li>
<li>Open the source file.</li>
<li>Either

<ul>
<li>Use <a href="https://docs.python.org/3/library/ast.html#ast.parse" rel="nofollow noreferrer"><code>ast.parse</code></a> to parse the file, or</li>
<li>Use <a href="https://docs.python.org/3/library/tokenize.html#tokenize.tokenize" rel="nofollow noreferrer"><code>tokenize.tokenize</code></a> to tokenize it.</li>
</ul></li>
<li>Using either the abstract syntax tree or the token stream, determine where the requested source block begins and ends.</li>
<li>Print the block.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Might want to look at the <code>inspect</code> module (<a href="https://docs.python.org/2/library/inspect.html" rel="nofollow noreferrer">https://docs.python.org/2/library/inspect.html</a>).  Specifically, the <code>inspect.getsource(object)</code> method.</p>
</div>
<span class="comment-copy">I don't ask why you need this but here are some essential questions. You have this snippet in a file or a function? Is it part of an object or not? have you searched about it so far? what have you tried and whats the problem with your code?</span>
<span class="comment-copy">Sorry to be so rude, but I haven't done any research and I don't plan on doing any. Neither do I expect anyone to do research for me. Rather I just ask in case someone knows the answer. If no one knows, it's not a problem. It's not vital for me to know the answer to this question and neither do I have time to look for an answer on my own in other way than simply asking on stackoverflow. In other cases I would take an effort, but I suspect this will not even be possible and hence I don't want to waste time on it.</span>
<span class="comment-copy">Well that's ok, but you need to be clear enough in your question if you expect a correct and comprehensive answer and that's why my first question was about your code. Also I think searching in google and just reading would be so faster than asking a question and waiting for the sun to shine ;-). Nevertheless, if you just want to know if it's possible or not the answer is yes. Because  based on <i>Von Neumann</i>’s model of a “stored program computer,” code is also represented by objects. And accessing to objects in python is usually so easy.</span>
<span class="comment-copy">You're implying it's "so easy" to do what I want? Then show me :D</span>
<span class="comment-copy">It's like giving someone a fish or teaching him/her the fishing. Unfortunately I'm not the one who gives you the fish, maybe if your question was a trivial one I'd do that but this is an interesting question and doesn't come in everybody's mind easily, and that's why I think the questioner deserves more than just a simple answer.</span>
<span class="comment-copy">I kind of hoped I could avoid steps 4 and 5, but I guess that wasn't a very realistic expectation.</span>
<span class="comment-copy">I figure I could use a hack based on Python's indentation-defined block syntax. No actual parsing necessary.</span>
<span class="comment-copy">@kyrill: That's <i>almost</i> what the tokenization-based solution would be, except that you can also have things like one-liner <code>if</code>s, which do not involve <code>INDENT</code> and <code>DEDENT</code> tokens in the token stream. It's much harder to get those right, hard enough to make the AST solution preferable.</span>
