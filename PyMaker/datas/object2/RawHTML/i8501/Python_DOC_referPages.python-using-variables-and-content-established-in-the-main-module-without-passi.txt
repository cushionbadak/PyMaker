<div class="post-text" itemprop="text">
<p>I am relatively new to python (and programming). I would like to understand what items, content, variables need to be passed as an explicit argument in the function definition and what can be used without being passed as an argument.</p>
<p>It seems that if a variable or item is introduced/defined in the module where the function is later located that it does not need to be passed as an argument. </p>
<p>Perhaps the below example from Codecademy will help to illustrate my question. Here we access the values from the created dictionaries <em>stock</em> and <em>prices</em> without passing either as an argument.</p>
<p><div class="snippet" data-babel="false" data-console="true" data-hide="false" data-lang="js">
<div class="snippet-code">
<pre class="snippet-code-html lang-html prettyprint-override"><code>shopping_list = ["banana", "orange", "apple"]

stock = {
    "banana": 6,
    "apple": 0,
    "orange": 32,
    "pear": 15
}
    
prices = {
    "banana": 4,
    "apple": 2,
    "orange": 1.5,
    "pear": 3
}

def compute_bill(food):
    total = 0
    for item in food:
        if stock[item] &gt; 0:
            total += prices[item]
            stock[item] -= 1
    return total</code></pre>
</div>
</div>
</p>
</div>
<div class="post-text" itemprop="text">
<p>You can define a variable first, and then pass it to the function or loop just to initialize the variable ahead of time:</p>
<p>For instance:</p>
<pre><code>i = 0
for i in some_list:
    do something
    i += 1
</code></pre>
<p>This will allow you to create i to 0 first and then loop through a list of an undetermined length and increment i to count over each item. If you were to try to run this function again however, it would do nothing as i has been increased and stays that way. You would need to reset i back to 0 or close out the interpreter and re-run the program.</p>
<p>Functions can do many different things. Say you want to say hello to someone:</p>
<pre><code>def hello(name):
    name = name
    print(Hello, {}.format(name))

hello("Peter")
</code></pre>
<p>Output would be:</p>
<pre><code>Hello, Peter
</code></pre>
<p>With this you can pass a variable without defining it, and it will store it inside of that function. If you try and call the "name" variable outside of the function though, you will get an error as its scope is only for that function. I hope this makes since and I highly recommend reading up more on Python Scope on their website here <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/index.html</a> This will tell you everything you need to know about functions in python. </p>
<p>Also as an aside, the reason the dictionaries are not passed as an argument in your example, is because we are using a For loop to iterate over the values. Look into For loops at the link I provided. Basically it is counting over each loop through and grabbing the prices of each item, and dynamically passing the location to each item via the "item" variable. once it reaches the end of the dictionary, it is giving you a total price, along with deducting inventory off the stock dictionary. So they are being used, but for a For loop in python there is no need to pass them as parameters. Now if you were to compare the two together, and your function was written in a way to take two dictionaries or strings as values to compare, then you would either need to define them in the function parameter itself, or create them ahead of time and pass the variable as a parameter.</p>
<p>Clarification:</p>
<p>So say you want to compare whats different in two dictionaries as a function. You can pass the dictionaries like so as parameters:</p>
<pre><code>d1 = {'a': 912,'b':256,'c':350}
d2 = {'b':256,'x':290,'a':912}

def compare(a, b):
    diff1 = set(a.items()) - set(b.items())
    diff2 = set(b.items()) - set(a.items())
    print(diff1)
    print(diff2)

compare(d1,d2)
</code></pre>
<p>Output would be:</p>
<pre><code>{('c', 350)}
{('x', 290)}
</code></pre>
<p>As you can see, we defined the dictionaries first, then passed them as arguments to the function to see what was different between the two.</p>
<p>You can even define the dictionaries on the fly:</p>
<pre><code>compare({'a': 912, 'b': 256, 'c': 350}, {'b': 256, 'x': 290, 'a': 912})
</code></pre>
<p>Results remain the same.</p>
<p>You can also explicitly define they are used in the function directly but will limit the ability to use this function on any other dictionaries you wanted to compare.</p>
<pre><code>d1 = {'a': 912,'b':256,'c':350}
d2 = {'b':256,'x':290,'a':912}

def compare():
    diff1 = set(d1.items()) - set(d2.items())
    diff2 = set(d2.items()) - set(d1.items())
    print(diff1)
    print(diff2)

compare()
</code></pre>
<p>Output remains the same as above. As you can see, we pass no arguments, and simply just compare the results and call that through:</p>
<pre><code>compare()
</code></pre>
<p>It makes more sense though to pass arguments in this case, so you can compare multiple dictionaries anywhere in your program. Hope that clears that up some.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use python classes to initialize variables in the constructor and use them in the methods if you have many methods . So you can avoid passing same arguments to all functions
<a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/classes.html</a> </p>
</div>
<div class="post-text" itemprop="text">
<p>In order to know how those list and dictionary is accessible in function defined later, you should know how python looks and resolves variables.</p>
<ol>
<li>Look for local variable with same name if found use it</li>
<li>If no local variable is found then look for global variable if found then use it.</li>
<li>If global variable is not found then look for environment variable.(in sys.path)  if found use that.</li>
<li>If variable doesn't exist then raise an error. </li>
</ol>
<p>Looking for a variable is also like looking for a function . It is because of that you can also import python variables like importing a function. I hope you know this.</p>
</div>
<span class="comment-copy">Could you elaborate on this: "Now if you were to compare the two together, and your function was written in a way to take two dictionaries or strings as values to compare, then you would either need to define them in the function parameter itself, or create them ahead of time and pass the variable as a parameter." Perhaps an example.</span>
<span class="comment-copy">@synergy77 Please see clarification at the bottom of my post. Let me know if that makes more sense now</span>
<span class="comment-copy">Thanks! Could you also clarify your two For loops in the beginning of your post? By defining "i=0" within the loop you reset it each time. Therefore "do something" is never using the "i" from "some_list", because "i" becomes 0 each time through. Also, your counter keeps resetting as well, so i will become "i = 0 + 1".</span>
<span class="comment-copy">Yeah that was my bad, Ill fix that part. Good catch</span>
<span class="comment-copy">Please dont forget to mark the answer that best answers your question with the green checkmark :)</span>
<span class="comment-copy">While thats true, he probably isn't to the point of OOP yet. From his example and understanding of scope and how functions work atm I would say he is more suited to understanding linear programming at the moment than understanding classes with init methods and how methods vary from functions etc.</span>
