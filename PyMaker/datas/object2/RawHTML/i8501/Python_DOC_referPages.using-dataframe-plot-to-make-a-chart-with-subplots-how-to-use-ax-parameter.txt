<div class="post-text" itemprop="text">
<p>I can not wrap my head around axes parameter, what it contains and how to use it for making subplots.</p>
<p>Would really appreciate if someone could explain what is going on in the following example</p>
<pre><code>fig, axes = plt.subplots(nrows=3, ncols=4, figsize=(15, 10))
for idx, feature in enumerate(df.columns[:-1]):
  df.plot(feature, "cnt", subplots=True, kind="scatter", ax=axes[idx / 4, idx % 4])
</code></pre>
<p>Here is the data (<a href="https://archive.ics.uci.edu/ml/datasets/Bike+Sharing+Dataset" rel="nofollow noreferrer">UCI Bike sharing dataset</a>):
<a href="https://i.stack.imgur.com/2sBMh.png" rel="nofollow noreferrer"><img alt="a table with 5 rows of raw data" src="https://i.stack.imgur.com/2sBMh.png"/></a>
Here is the output of the code snippet (a pairwise comparison of features and the end results):
<a href="https://i.stack.imgur.com/GEkO8.png" rel="nofollow noreferrer"><img alt="a beautiful chart with subplots" src="https://i.stack.imgur.com/GEkO8.png"/></a></p>
<p>To be more specific, here are the parts that I do understand (at least I think I do)</p>
<ul>
<li>plt.subplots returns a tuple containing a figure and axes object(s) (<a href="https://stackoverflow.com/questions/34162443/why-do-many-examples-use-fig-ax-plt-subplots-in-matplotlib-pyplot-python">link</a>)</li>
<li>enumerate() returns a tuple containing index of a feature and its name(<a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer">link</a>)</li>
<li>df.plot uses column names to put data on subplots within  fig</li>
</ul>
<p>Here is what I do not understand</p>
<ul>
<li>What does axes object contain? Again, based on documentation and <a href="https://stackoverflow.com/questions/5575451/difference-between-axes-and-axis-in-matplotlib">this</a> answer I do realize that axes contains "Axis, Tick, Line2D, Text, Polygon, etc." but 

<ul>
<li>what do we address using axes[x,y] ? </li>
<li>why in this example author decided to use [idx / 4, idx % 4] as values?</li>
</ul></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Concerning the last question about the array indexing as <code>[idx / 4, idx % 4]</code>: </p>
<p>The idea is to loop over all subplots and all dataframe columns at the same time. The problem is that the axes array is two-dimensional while the column array is one-dimensional. One therefore needs to decide over which of those to loop and map the loop index/indizes to the other dimension. </p>
<p>An intuitive way would be to use two loops</p>
<pre><code>for i in range(axes.shape[0]):
    for j in range(axes.shape[1]):
        df.plot(df.columns[i*axes.shape[0]+j], "cnt", ... , ax=axes[i,j])
</code></pre>
<p>Here, <code>i*axes.shape[0]+j</code> maps the two dimension of the numpy array to the single dimension of the columns list.</p>
<p>In the example from the question, the loop is over the columns, which means we have to somehow map the one-dimensional index to two dimensions. This is what <strong><code>[idx / 4, idx % 4]</code></strong> does.. or should do. <strong>It will only work in python 2.</strong> To make it more comprehensible and version save, one should actually use <code>[idx // 4, idx % 4]</code>. The <code>//</code> makes it clear that an integer division is used. So for the first 4 idx values (0,1,2,3), <code>idx // 4</code> is 0, for the next set of 4 values it's 1 and so on. <code>idx % 4</code> calculates the index modulo 4. So (0,1,2,3) are mapped to (0,1,2,3), and then (4,5,6,7) are mapped to (0,1,2,3) again, etc.</p>
<p>An alternative solution using a single loop would be to flatten the axes array:</p>
<pre><code>for idx, feature in enumerate(df.columns[:-1]):
    df.plot(feature, "cnt", ... , ax=axes.flatten()[idx])
</code></pre>
<p>or maybe most pythonic</p>
<pre><code>for ax, feature in zip(axes.flatten(), df.columns[:-1]):
    df.plot(feature, "cnt", ... , ax=ax)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>axes</code> object in your code is a 2D Numpy array of <a href="http://matplotlib.org/api/axes_api.html" rel="nofollow noreferrer">matplotlib <code>Axes</code></a> objects. Since the call to <code>subplots()</code> asked for 3 rows and 4 columns, the array will be 3 by 4. Indexing into the array like <code>axes[r, c]</code> gives you the <code>Axes</code> object that corresponds to row <code>r</code> and column <code>c</code>, and you can pass that object as the <code>ax</code> keyword argument to a plotting method to make the plot show up on that axis. E.g. if you wanted to plot something in the second row and second column, you would call <code>plot(..., ax=axes[1,1])</code>.</p>
<p>The code uses <code>[idx / 4, idx % 4]</code> as a way of converting the indices (numbers from 0 to 11) into locations in the 3-by-4 grid. Try evaluating that expression yourself with <code>idx</code> set to each value from 0 to 11 in turn, and you'll see how it works out.</p>
</div>
<span class="comment-copy">Sigh, that makes sense. I ask for subplots and i get an array of axes that correspond with those subplots.  I did tried to evaluate it and was surprised that I am getting values like [1.25, 1] which is not a very usual way of accessing elements of an array. Is that a typical way to access subplots? is it mentioned somewhere in the matplotlib documentation?</span>
