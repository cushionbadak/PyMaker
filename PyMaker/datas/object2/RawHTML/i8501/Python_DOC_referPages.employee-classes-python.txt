<div class="post-text" itemprop="text">
<p>Write a class named Employee that holds the following data about an employee in attributes: name, ID number, department, and job title.</p>
<p>Once you have written the class, write a program that creates three Employee objects to hold the following data:</p>
<p>Susan Meyers - 47899 - Accounting - Vice President
Mark Jones - 39119 - IT - Programmer
Joy Rogers - 81774 - Manufacturing - Engineer</p>
<p>^ This is the problem I'm stuck on. I believe I have the first part of the code correct, but I don't understand what to do for the second part of the program to create Employee objects.</p>
<p>Here is my code so far...</p>
<p>emp.py file</p>
<pre><code>#create a class named Employee
class Employee:

    #initialize the attributes
    def __init__(self, name, id, department, title):
        self.__name = name
        self.__id = id
        self.__department = department
        self.__title = title

    #set the attributes
    def set_name(self, name):
        self.__name = name

    def set_id(self, id):
        self.__id = id

    def set_department(self, department):
        self.__department = department

    def set_title(self, title):
        self.__title = title

    #return the attributes
    def get_name(self):
        return self.__name

    def get_id(self):
        return self.__id

    def get_department(self):
        return self.__department

    def get_title(self):
        return self.__title

    #return the objects state as a string

    def __str__(self):
        return 'Name: ' + self.__name + \
               '\nID number: ' + self.__id + \
               '\nDepartment: ' + self.__department + \
               '\nTitle: ' + self.__title
</code></pre>
<p>and here is my main function where the second part is going to go...</p>
<pre><code> import emp


def main():
    #Create three employee objects
    emp1 = emp.Employee('name', 'id', 'department', 'title')
    emp2 = emp.Employee('name', 'id', 'department', 'title')
    emp3 = emp.Employee('name', 'id', 'department', 'title')

    #create three Employee objects for each attribute
    emp1.set_name('Susan Meyers')
    emp1.set_id('47899')
    emp1.set_department('Accounting')
    emp1.set_title('Vice President')

    emp2.set_name('Mark Jones')
    emp2.set_id('39119')
    emp2.set_department('IT')
    emp2.set_title('Programmer')

    emp3.set_name('Joy Rogersr')
    emp3.set_id('81774')
    emp3.set_department('Manufacturing')
    emp3.set_title('Engineer')

    print()
    print(emp1)
    print()
    print(emp2)
    print()
    print(emp3)


main()
</code></pre>
<p>So with this code, I am now getting the correct answer of this:</p>
<pre><code>Employee 1:
Name: Susan Meyers
ID number: 47899
Department: Accounting
Title: Vice President

Employee 2:
Name: Mark Jones
ID number: 39119
Department: IT
Title: Programmer

Employee 3:
Name: Joy Rogers
ID number: 81774
Title: Programmer

Process finished with exit code 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at <a href="https://docs.python.org/2/tutorial/classes.html" rel="nofollow noreferrer">this</a></p>
<p>You have inpored you python file emp.py that has the class 'Employee' with <code>import emp</code> statement.
Now ,</p>
<pre><code>emp1=emp.Employee('kee',1,'CSE','SE')
print emp1
</code></pre>
<p>Will create the object and stores its pointer to emp1. </p>
</div>
<div class="post-text" itemprop="text">
<p>Import emp.py</p>
<pre><code>    from emp import Employee
</code></pre>
<p>Go ahead and create 3 Employee objects:</p>
<pre><code>    def main():
        emp1 = Employee("name", id, department, title)
        emp2 = Employee("name", id, department, title)
        emp3 = Employee("name", id, department, title)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The emp.py file could be:</p>
<pre><code>    class Employee:

    def __init__(self, name, employee_id, department, title):
        self.name = name
        self.employee_id = employee_id
        self.department = department
        self.title = title

    def __str__(self):
        return '{} , id={}, is in {} and is a {}.'.format(self.name, self.employee_id, self.department, self.title)
</code></pre>
<p>A couple of notes: </p>
<ul>
<li><a href="https://docs.python.org/3/library/functions.html#id" rel="nofollow noreferrer">id</a> is a built-in function that returns the “identity” of an object.  It is best not use that as an attribute, it might confuse other programmers.</li>
<li>The attributes should not have double underscores, aka dunders. </li>
<li>In Python, there is no need for setters and getters.</li>
<li>Add a <strong>str</strong> method for well-formatted printing</li>
</ul>
<p>Then the second would be:</p>
<pre><code>from emp import Employee

def main():

    # Create three employee objects
    emp1 = Employee(name='Susan Meyers', employee_id='47899', department='Accounting', title='Vice President')
    emp2 = Employee(name='Mark Jones', employee_id='39119', department='IT', title='Programmer')
    emp3 = Employee(name='Joy Rogersr', employee_id='81774', department='Manufacturing', title='Engineer')

    print(emp1, sep='/n/n')
    print(emp2, sep='/n/n')
    print(emp3, sep='/n/n')
</code></pre>
<p>Instance attributes can be set when constructing. This saves many lines of code.</p>
</div>
<span class="comment-copy"><code>susan =  emp.Employee('Susan Meyers',  47899 , 'Accounting' , 'Vice President')</code></span>
<span class="comment-copy">I know there is no code in the second part. That is because I wasn't sure how to continue. Wright, is that creating an object for the class?</span>
<span class="comment-copy">Google is your friend. type something like "create new instance of a class in python"... you'll see dozens of tutorials. For example <a href="https://www.dotnetperls.com/class-python" rel="nofollow noreferrer">this</a></span>
<span class="comment-copy">As explained in the first comment from @Wright, you don't need to call the setters - the properties are already set via the constructor.  Also, not that you need them here, but your getters/setters are not idiomatic Python.  There are multiple ways to support properties in Python classes.  The simplest is to not obscure them with <code>__</code> and just make them directly visible.  Next up is the property decorator syntax, <a href="http://stackabuse.com/python-properties/" rel="nofollow noreferrer">described here</a>.  I usually avoid the even more complicated ways (<code>getattr()</code> and friends) but I mention them here for completeness.</span>
<span class="comment-copy">Another person learning Python from someone teaching Java.</span>
<span class="comment-copy">Hmm, so I would do this for each employee and emp.Employee is using the imported file and class correct? So is that creating an Employee object to hold data?</span>
<span class="comment-copy">Yeah! You are right.</span>
<span class="comment-copy">Okay cool cool! I'm learning!</span>
<span class="comment-copy">Yea.i get it. Take a look at the python documentation link I've shared. That will have more detailed explanation. Happy coding!</span>
<span class="comment-copy">Thank you! Will do</span>
