<div class="post-text" itemprop="text">
<p>I wrote a python module to generate a random topology using Mininet and connected OpenDayLight as the remote controller.</p>
<p>I would like to pass a command to the mininet CLI, but from inside the python module. After generating the hosts and switches as well as connecting them to the remote controller, the module randomly chooses 2 hosts to act as Server and Client. 
I am having trouble doing something similar to this, but from in-line inside the python module:</p>
<pre><code>mininet&gt; h&lt;random_number&gt; sudo python HTTPTraffic.py &lt;SrcIP&gt; &lt;DstIP&gt;
</code></pre>
<p><code>HTTPTraffic.py</code> is another module that takes arguments <code>SrcIP</code> and <code>DstIP</code></p>
<p>This is the part of the main module that elects 2 random hosts and gets their IPs. I would like the <code>HTTPTraffic.py</code> to run in the host corresponding to <code>SrcIP</code></p>
<pre><code>Nodes = list(range(1,h))
Src = random.choice(Nodes)         # randomly chooses 1 host
Nodes.remove(Src)
Dst = random.choice(Nodes)         # randomly chooses another host

SrcName = 'h%s' %(Src)
DstName = 'h%s' %(Dst)
SrcNode=net.get(SrcName)
DstNode=net.get(DstName)

SrcIP = SrcNode.IP()               # IP retrieval of chosen hosts
DstIP = DstNode.IP()
print ('The Souce/Client is: '+ SrcName)
print (SrcIP)
print ('The Destination/Server is: '+ DstName)
print (DstIP) 

SrcName +".cmd('sudo python HTTPTraffic.py "+SrcIP+" " +DstIP+"')"    # this is where I am having trouble
</code></pre>
<p>From the <a href="http://mininet.org/sample-workflow/" rel="nofollow noreferrer">mininet API documentation</a> (See section 'Customizing a Network'), something like that is possible but I am having so much trouble doing it. Also, I would like for this command to run in the background while the main program runs. Any feedback is appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>I recommend you take a look at the documentation for the Python module <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer"><code>subprocess</code></a>, which acts as an platform-agnostic API for running other programs from your program. </p>
<p>For example, you can call <code>ls</code> by adding the following line to your code:</p>
<pre><code>subprocess.run(["ls", "-l"])
</code></pre>
<p>The first argument of <code>run</code> takes an array of strings where each string is a part of the command you are executing. </p>
</div>
<span class="comment-copy">I just realized this after I read your question again, it looks like my suggestion doesn't actually answer your question. It looks like to do what you are trying to do, you're going to want to use the mininet API instead, since the mininet CLI is acts as an interactive terminal.</span>
<span class="comment-copy">actually this is not what I am looking for. My primary issue is how to pass a command from python to the Mininet CLI. Your suggestion might be answering my second issue which is to run this in the background. Still I wanna try it as soon as I find a solution to my first problem.</span>
<span class="comment-copy">Take a look at <a href="http://stackoverflow.com/questions/10962141/wrapping-an-interactive-cli-in-python">this</a> SO question and answer, and read some of the comments. There is a way to wrap an interactive CLI in python using <code>subprocess.Popen</code>. Essentially you will call <code>sudo mn</code> using <code>Popen</code> and pass it commands with <code>proc.stdin.write("command string")</code> and read the output of mininet with <code>line = proc.stdout.readline()</code>.</span>
<span class="comment-copy">I tried using <code>subprocess</code> as you suggested, but it is passing the command to the Linux CLI instead of mininet CLI. You mentioned calling <code>sudo mn</code> using Popen, how it this done can you provide an example ?  Also, the code seems to have problems with passing commands consisting of more that 1 word.  <code>shlex.split</code> did not do the trick unfortunately.</span>
<span class="comment-copy">Ok, so it's going to look a little like this:   <code>proc = subprocess.Popen(['sudo', 'mn'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)</code>  Then you will pass commands to mininet by using the <code>proc.stdin.write</code> method. You can then read the results by using <code>proc.stdout.readline()</code>.</span>
