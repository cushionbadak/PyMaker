<div class="post-text" itemprop="text">
<p>I am trying to write a Linear congruential generator in python and I find a little piece of <a href="https://en.wikipedia.org/wiki/Linear_congruential_generator#Sample_Python_code" rel="nofollow noreferrer">code on Wikipedia</a> but have some difficulty on understanding it. The code is as follows:</p>
<pre><code>def lcg(modulus, a, c, seed=None):
    if seed != None:
        lcg.previous = seed
    random_number = (lcg.previous * a + c) % modulus
    lcg.previous = random_number
    return random_number / modulus
lcg.previous = 2222
</code></pre>
<p>My problem is that what is "<code>lcg.previous</code>"? I notice that the function is done, the value of <code>lcg.previous</code> gets updated and stored. Is it declared as a member variable of function lcg() here or actually some kind of default set up for all function in python? </p>
<p>Thanks a lot!</p>
</div>
<div class="post-text" itemprop="text">
<p>It is a "member variable" of the function, so that each time it is called (except when called with something for <code>seed</code>) the sequence will pick of where it left off.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python is recognizing the lcg.previous as a new variable declaration, and will add it as a member to lcg.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>previous</code> variable is a property on the <code>lcg</code> function. In this example it's being used as a static variable for the <code>lcg</code> function. Since Python doesn't require variables (or object members) to be declared before use you can create them at need. In this case, you've create a member <code>previous</code> of the <code>lcg</code> function object.</p>
</div>
<span class="comment-copy">Maybe you can give the reference of where you found that code snippet.</span>
<span class="comment-copy">I guess you did not copy all the relevant code, and lcg.previous is set to a starting value directly after the function definition.</span>
<span class="comment-copy">Sorry about this, I happen to upload the my edited version. Thanks for editing.</span>
<span class="comment-copy">I wonder if this is very old code. A much better way of achieving this would be with generators, but maybe this was written before they were available.</span>
<span class="comment-copy">@DanielRoseman yeah, it is a very old way to generate a uniform random variable</span>
<span class="comment-copy">+1. As a note, with this you can emulate the behaviour of <code>static</code> function variables common in other languages, like C.</span>
<span class="comment-copy">Thanks for your explanation.</span>
<span class="comment-copy">Python doesn't have variable declarations.</span>
<span class="comment-copy">It does, it's just implied. the line &lt;code&gt;lcg(modulus, a, c, seed=None):&lt;/code&gt; has implied local variable declaration of modulus, a, c, and seed. the line lcg.previous is an implied declaration of a member variable. Python just abstracts away the gritty part of declaring variables under the hood.</span>
<span class="comment-copy">Python, the language, doesn't have a variable declarations. Variables <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects" rel="nofollow noreferrer">spring into existence</a> when they are assigned to. The language construct of variable declaration simply doesn't exist in Python, as it does in C, C++, Java etc. There is only assignment in Python. You are playing loose with terminology.</span>
<span class="comment-copy">See, for example, <a href="http://stackoverflow.com/a/11008311/5014455">this answer</a></span>
<span class="comment-copy">Variable declaration is either explicit or implicit.  Most compilers interpret an assignment statement as purely an assignment of a value to a memory location. If there is no memory location associated with the reference, you'll at worst get a run time exception, or at best a compiler exception.  Python sees that you are trying to use "seed", knows it doesn't have a memory address for it already, so it assigns one for you. Python operates under the assumption that your attempt to use a reference implies that you want the reference to actually exist.</span>
