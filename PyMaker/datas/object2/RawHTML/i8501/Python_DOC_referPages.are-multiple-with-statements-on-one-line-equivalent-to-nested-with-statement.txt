<div class="post-text" itemprop="text">
<p>Are these two statements equivalent?</p>
<pre><code>with A() as a, B() as b:
  # do something

with A() as a:
  with B() as b:
    # do something
</code></pre>
<p>I ask because both <code>a</code> and <code>b</code> alter global variables (tensorflow here) and <code>b</code> depends on changes made by <code>a</code>. So I know the 2nd form is safe to use, but is it equivalent to shorten it to the 1st form?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, listing multiple <code>with</code> statements on one line is exactly the same as nesting them, according to the <a href="https://docs.python.org/2/reference/compound_stmts.html#the-with-statement" rel="noreferrer">Python 2.7 language reference</a>:</p>
<blockquote>
<p>With more than one item, the context managers are processed as if multiple with statements were nested:</p>
<pre><code>with A() as a, B() as b:
    suite
</code></pre>
<p>is equivalent to</p>
<pre><code>with A() as a:
    with B() as b:
        suite
</code></pre>
</blockquote>
<p>Exactly the same language appears in the <a href="https://docs.python.org/3/reference/compound_stmts.html#the-with-statement" rel="noreferrer">Python 3 language reference</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Absolutely identical. Just depends on your personal preference.</p>
</div>
<div class="post-text" itemprop="text">
<p>As others have said, it's the same result. Here's a more detailed example of how this syntax might be used:</p>
<p><em>blah.txt</em></p>
<pre><code>1
2
3
4
5
</code></pre>
<p>I can open one file and write its contents to another file in a succinct manner:</p>
<pre><code>with open('blah.txt', 'r') as infile, open('foo.txt', 'w+') as outfile:
    for line in infile:
        outfile.write(str(line))
</code></pre>
<p><em>foo.txt</em> now contains:</p>
<pre><code>1
2
3
4
5
</code></pre>
</div>
<span class="comment-copy">Performance wise? Memory wise?</span>
<span class="comment-copy">@Nabin: If there is any difference at all, it will be very slight. Python is not designed for micro-optimization, so any difference will not matter in practice.</span>
<span class="comment-copy">With due respect, I would not expect someone with 18.8k to say this. I always look for the optimal piece of code in python.</span>
<span class="comment-copy">@Nabin: You are wrong to do so. Python is a slow, high-level language. Micro-optimization is a net loss of time. Regardless, I tried putting both versions into <code>dis.dis()</code> and they generated identical bytecode.</span>
<span class="comment-copy">I like the example, and appreciate it. However I feel a bit compelled to point out that the order in which you open <code>blah</code> and <code>foo</code> wouldn't actually matter in this case, thus defeating the point of the example.</span>
<span class="comment-copy">@DavidParks I never said the order in which either file is opened would matter. You could open the <code>outfile</code> first and <code>infile</code> second... Whatever you want to do. I provided the example to demonstrate how this syntax enables tasks like the above to be done in a very readable way. The "point of the example" isn't defeated.</span>
<span class="comment-copy">Agreed, and it's a good and relevant example, my question in particular was specific to order, that's why I commented. But as a general point about how it works, I'm sure it will be a useful reference to others that may stumble across this, so thanks for taking the time to add it!</span>
