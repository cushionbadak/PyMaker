<div class="post-text" itemprop="text">
<p>Does Python have a function that I can use to escape special characters in a regular expression?</p>
<p>For example, <code>I'm "stuck" :\</code> should become <code>I\'m \"stuck\" :\\</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/re.html#re.escape" rel="nofollow noreferrer"><code>re.escape</code></a></p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.escape(r'\ a.*$')
'\\\\\\ a\\.\\*\\$'
&gt;&gt;&gt; print(re.escape(r'\ a.*$'))
\\\ a\.\*\$
&gt;&gt;&gt; re.escape('www.stackoverflow.com')
'www\\.stackoverflow\\.com'
&gt;&gt;&gt; print(re.escape('www.stackoverflow.com'))
www\.stackoverflow\.com
</code></pre>
<p>Repeating it here:</p>
<blockquote>
<p>re.escape(string)</p>
<p>Return string with all non-alphanumerics backslashed; this is useful if you want to match an arbitrary literal string that may have regular expression metacharacters in it.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>I'm surprised no one has mentioned using regular expressions via <code>re.sub()</code>:</p>
<pre><code>import re
print re.sub(r'([\"])',    r'\\\1', 'it\'s "this"')  # it's \"this\"
print re.sub(r"([\'])",    r'\\\1', 'it\'s "this"')  # it\'s "this"
print re.sub(r'([\" \'])', r'\\\1', 'it\'s "this"')  # it\'s\ \"this\"
</code></pre>
<p>Important things to note:</p>
<ul>
<li>In the <strong>search</strong> pattern, include <code>\</code> as well as the character(s) you're looking for.
You're going to be using <code>\</code> to escape your characters, so you need to escape
<em>that</em> as well.</li>
<li>Put parentheses around the <strong>search</strong> pattern, e.g. <code>([\"])</code>, so that the <strong>substitution</strong>
pattern can use the found character when it adds <code>\</code> in front of it. (That's what
<code>\1</code> does: uses the value of the first parenthesized group.)</li>
<li>The <code>r</code> in front of <code>r'([\"])'</code> means it's a <em>raw string</em>. Raw strings use different
rules for escaping backslashes. To write <code>([\"])</code> as a plain string, you'd need to
double all the backslashes and write <code>'([\\"])'</code>. Raw strings are friendlier when
you're writing regular expressions.</li>
<li>In the <strong>substitution</strong> pattern, you need to escape <code>\</code> to distinguish it from a
backslash that precedes a substitution group, e.g. <code>\1</code>, hence <code>r'\\\1'</code>. To write
<em>that</em> as a plain string, you'd need <code>'\\\\\\1'</code> â€” and nobody wants that.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Use repr()[1:-1]. In this case, the double quotes don't need to be escaped. The [-1:1] slice is to remove the single quote from the beginning and the end.</p>
<pre><code>&gt;&gt;&gt; x = raw_input()
I'm "stuck" :\
&gt;&gt;&gt; print x
I'm "stuck" :\
&gt;&gt;&gt; print repr(x)[1:-1]
I\'m "stuck" :\\
</code></pre>
<p>Or maybe you just want to escape a phrase to paste into your program? If so, do this:</p>
<pre><code>&gt;&gt;&gt; raw_input()
I'm "stuck" :\
'I\'m "stuck" :\\'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As it was mentioned above, the answer depends on your case. If you want to escape a string for a regular expression then you should use re.escape(). But if you want to escape a specific set of characters then use this lambda function:</p>
<pre><code>&gt;&gt;&gt; escape = lambda s, escapechar, specialchars: "".join(escapechar + c if c in specialchars or c == escapechar else c for c in s)
&gt;&gt;&gt; s = raw_input()
I'm "stuck" :\
&gt;&gt;&gt; print s
I'm "stuck" :\
&gt;&gt;&gt; print escape(s, "\\", ['"'])
I'm \"stuck\" :\\
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's not that hard:</p>
<pre><code>def escapeSpecialCharacters ( text, characters ):
    for character in characters:
        text = text.replace( character, '\\' + character )
    return text

&gt;&gt;&gt; escapeSpecialCharacters( 'I\'m "stuck" :\\', '\'"' )
'I\\\'m \\"stuck\\" :\\'
&gt;&gt;&gt; print( _ )
I\'m \"stuck\" :\
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you only want to replace some characters you could use this:</p>
<pre><code>import re

print re.sub(r'([\.\\\+\*\?\[\^\]\$\(\)\{\}\!\&lt;\&gt;\|\:\-])', r'\\\1', "example string.")
</code></pre>
</div>
<span class="comment-copy">What do you consider to be a special character?</span>
<span class="comment-copy">', " and \ ...aren't they?</span>
<span class="comment-copy">Completely depends on your context. Usually those characters are totally fine when you have them inside a string.</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/280435/escaping-regex-string-in-python">Escaping regex string in Python</a></span>
<span class="comment-copy">That escapes a lot though, which might not be that helpful.</span>
<span class="comment-copy">@poke: You are looking at some special cases. All else does fine and you don't need to track your special characters.</span>
<span class="comment-copy">It is fine, I just wanted to mention that it might do too much :)</span>
<span class="comment-copy">@poke : I understand but it is reliable. I was almost tempted to provide the answer based on substitution but then why do it when there is lib support :)</span>
<span class="comment-copy">Why is the output of re.escape('\ a.*$') and print(re.escape('\ a.*$')) different?</span>
<span class="comment-copy">That doesn't work if the string is unicode, because you will have u and should run <code>repr(x)[2:-1]</code></span>
<span class="comment-copy">In python3.4, where all strings are unicode, this doesn't seem to work at all, unfortunately. Instead, <code>print(repr("I'm stuck")[1:-1])</code> prints  <code>I'm stuck</code>.</span>
<span class="comment-copy">If backslash is one of the <code>characters</code> it had better be the first one!</span>
