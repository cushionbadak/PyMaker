<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/31710499/python-equivalent-of-haskells-1-to-index-a-list">Python equivalent of Haskell's [1..] (to index a list)</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I want to keep track of index as I iterate through an iterator. In Haskell, I could just zip the iterator with an infinite list of integers, <code>[1..]</code>. However, I'm not aware of functionality like this in Python. What's the easiest way to construct an iterator that works as below?</p>
<pre><code>for (case,i) in zip(data, magic_infinite_list):
    print('Case #{}: {}'.format(i,case))
</code></pre>
<p>(I know I could just make a variable <code>i</code> and manually increment it, that's not the point -- I want to know if it's possible to do this with iterators)</p>
</div>
<div class="post-text" itemprop="text">
<p><code>enumerate()</code> was already given, and that's what most people would use.  But if you really want to start at 1, and get the integer second, <code>itertools.count()</code> generates a lazy infinite sequence of integers:</p>
<pre><code>import itertools
for case, i in zip(data, itertools.count(1)):
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should use <code>enumerate</code>. Note that here <code>i</code> is 0-based:</p>
<pre><code>for (i, case) in enumerate(data):
    print('Case #{}: {}'.format(i + 1, case))
</code></pre>
</div>
<span class="comment-copy">You should use <code>enumerate</code> in this case, but you could also zip with <a href="https://docs.python.org/3/library/itertools.html#itertools.count" rel="nofollow noreferrer"><code>itertools.count</code></a> if you want to change the step. If you are coming from Haskell, you will likely want to familiarize yourself with <code>itertools</code> anyway for all you lazy, iterator needs!</span>
<span class="comment-copy">I think I'll accept this answer because it gives the practical solution (<code>enumerate</code>) as well as answering my actual question. That's one less thing I know how to do in Haskell but not in Python!</span>
<span class="comment-copy">Wow, I didn't know that existed! Thanks so much!</span>
<span class="comment-copy">Do you know why they chose <code>i,case</code> instead of <code>case,i</code>? Seems counterintuitive to me.</span>
<span class="comment-copy">I guess normally people put an object's ID before the actual object. Actually, I think this is more intuitive.</span>
