<div class="post-text" itemprop="text">
<p>I have tried a wealth of options and got it down with like some hacked together parsing but I am curious how to do this with strptime? </p>
<pre><code>item = "01/Jul/1995:00:00:01-0400"

checkdate = datetime.strptime(item,"%Y-%m-%dT:%H:%M%S%z")
checkdate = datetime.strptime(item,"%Y/%m/%dT:%H:%M:%S%z")
checkdate = datetime.strptime(item,"%Y-%b-%d:%H:%M%S%z")
checkdate = datetime.strptime(item,"%Y-%b-%dT:%H:%M:%S%z")
checkdate = datetime.strptime(item,"%Y/%m/%d:%H:%M:%S%z")
</code></pre>
<p>what i get for each attempt is :</p>
<pre><code>ValueError: time data '01/Jul/1995:00:00:01-0400' does not match format '%Y/%m/%d:%H:%M:%S%z'
</code></pre>
<p>what is the correct strptime formatting for this?</p>
<p>EDIT:
so you were correct and i did a small test</p>
<pre><code>def split_date (stringdate):    
     datepart = [] 
     monthDict = {'Jan':'01','Feb':'02','Mar':'03','Apr':'04','May':'05',
 'Jun':'06','Jul':'07','Aug':'08','Sep':'09','Oct':'10','Nov':'11','Dec':'12'}
    split1 = [part for part in stringdate.split('/')]
    day = split1[0]
    month = split1[1]
    month = monthDict.get(month)
    split2 = [part for part in split1[2].split(":")]
    year = split2[0]
    hour = split2[1]
    minute = split2[2]
    split3 = [part for part in split2[3].split('-')]
    second = split3[0]
    timezone = split3[1]
    return datetime(int(year), int(month), int(day), int(hour), int(minute), int(second), int(timezone)

datetime_received_split = []
datetime_received_strp = []
s = time.time()
for date in data.time_received:
    try: 
        datetime_received_split.append(split_date(date))
    except:
        split_fail.append(date)
e = time.time()
print ('split took {} s '.format(e-s))
s = time.time() 
for date in data.time_received:
    try: 
             datetime_received_strp.append(datetime.strptime(item,"%d/%b/%Y:%H:%M:%S-     %f"))
    except: 
        strp_fail.append(date)
e = time.time() 
print ('strp took {} s'.format(e-s))
</code></pre>
<p>and i found that the manual split was actually faster by a large margin? </p>
</div>
<div class="post-text" itemprop="text">
<p>I fixed your date conversion.  What's great is <code>%f</code> is supported in both Python 2.7 and 3.x.</p>
<pre><code>from datetime import datetime

item = "01/Jul/1995:00:00:01-0400"
checkdate = datetime.strptime(item,"%d/%b/%Y:%H:%M:%S-%f")

print(checkdate)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>%z is supported in Python 3.2+.</p>
</blockquote>
<p>So for Python2.x, have a look at <a href="https://stackoverflow.com/questions/1101508/how-to-parse-dates-with-0400-timezone-string-in-python">How to parse dates with -0400 timezone string in python?</a></p>
<p>If you're using Python3.x you can try this:</p>
<pre><code>from datetime import datetime

item = "01/Jul/1995:00:00:01-0400"
checkdate = datetime.strptime(item,"%d/%b/%Y:%H:%M:%S%z")

print(checkdate)
</code></pre>
<p>Result:</p>
<pre><code>1995-07-01 00:00:01-04:00
</code></pre>
<p>See more details from <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">strftime() and strptime() Behavior</a></p>
</div>
<span class="comment-copy">Did you try one that actually matched the data? All of your attempts start with <code>%Y</code>, which is year, and your string starts with the day of the month, <code>%d</code>. Try building your format string <a href="https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior" rel="nofollow noreferrer">with the documentation</a></span>
<span class="comment-copy">thank you!!! it makes so much sense now</span>
