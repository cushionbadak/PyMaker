<div class="post-text" itemprop="text">
<p>Consider the code below:</p>
<pre><code>1 | x = 20
2 | 
3 | def f():
4 |     x = 0
5 |     for x in range(10):
6 |         x += 10
7 |     return x
8 | f()
9 |
10| for x in range(10):
11|     pass
12| x += 1
13| print(x)
</code></pre>
<p>The value of <code>x</code> after execution of the code above is <code>10</code>. Now, how can I get all the nodes with class <code>Name</code> whose <code>id</code>s are <code>x</code> and refer to the <code>x</code> that's being used in lines 1, 10, 12 and 13?</p>
<p>In other words, the <code>x</code> inside of <code>f</code> is different from the rest of the <code>x</code>s. Is it possible to get their AST nodes, having only the script and script's AST while not executing it?</p>
</div>
<div class="post-text" itemprop="text">
<p>When walking the AST tree, track the context; start with a global context, then as you encounter <code>FunctionDef</code> or <code>ClassDef</code> or <code>Lambda</code> nodes, record that context as a stack (pop the stack again when exiting the relevant node).</p>
<p>You can then simply only look at <code>Name</code> nodes in the global context. You can track <code>global</code> identifiers too (I'd use a set per stack level).</p>
<p>Using a <a href="https://docs.python.org/3/library/ast.html#ast.NodeVisitor" rel="nofollow noreferrer"><code>NodeVisitor</code> subclass</a>:</p>
<pre><code>import ast

class GlobalUseCollector(ast.NodeVisitor):
    def __init__(self, name):
        self.name = name
        # track context name and set of names marked as `global`
        self.context = [('global', ())]

    def visit_FunctionDef(self, node):
        self.context.append(('function', set()))
        self.generic_visit(node)
        self.context.pop()

    def visit_ClassDef(self, node):
        self.context.append(('class', ()))
        self.generic_visit(node)
        self.context.pop()

    def visit_Lambda(self, node):
        # lambdas are just functions, albeit with no statements
        self.context.append(('function', ()))
        self.generic_visit(node)
        self.context.pop()

    def visit_Global(self, node):
        assert self.context[-1][0] == 'function'
        self.context[-1][1].update(node.names)

    def visit_Name(self, node):
        ctx, g = self.context[-1]
        if node.id == self.name and (ctx == 'global' or node.id in g):
            print('{} used at line {}'.format(node.id, node.lineno))
</code></pre>
<p>Demo (given the AST tree for your sample code in <code>t</code>):</p>
<pre><code>&gt;&gt;&gt; GlobalUseCollector('x').visit(t)
x used at line 1
x used at line 10
x used at line 12
x used at line 13
</code></pre>
<p>And using <code>global x</code> in a function:</p>
<pre><code>&gt;&gt;&gt; u = ast.parse('''\
... x = 20
...
... def g():
...     global x
...     x = 0
...     for x in range(10):
...         x += 10
...     return x
...
... g()
... for x in range(10):
...     pass
... x += 1
... print(x)
... ''')
&gt;&gt;&gt; GlobalUseCollector('x').visit(u)
x used at line 1
x used at line 5
x used at line 6
x used at line 7
x used at line 8
x used at line 11
x used at line 13
x used at line 14
</code></pre>
</div>
