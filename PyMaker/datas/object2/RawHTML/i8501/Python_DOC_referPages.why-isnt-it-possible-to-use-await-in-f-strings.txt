<div class="post-text" itemprop="text">
<p>Why isn't it possible to use "await" in f-strings? Is there any way to coerce f-strings into evaluating the format expressions in the context of a coroutine function?</p>
<pre><code>$ python3 
Python 3.6.0 (default, Mar  4 2017, 12:32:37) 
[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.42.1)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; async def a(): return 1
... 
&gt;&gt;&gt; async def b(): return 'The return value of await a() is {}.'.format(await a())
... 
&gt;&gt;&gt; async def c(): return f'The return value of await a() is {await a()}'
... 
  File "&lt;fstring&gt;", line 1
    (await a())
           ^
SyntaxError: invalid syntax
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As of Python <code>3.6</code>, this <em>is not possible</em>. It will be possible in <code>3.7</code> according to the messages on <a href="https://bugs.python.org/issue28942" rel="nofollow noreferrer">Issue 28942 -- await expressions in <code>f-strings</code></a> on the Python bug tracker.</p>
<p>As for the reason, the author of the <a href="https://www.python.org/dev/peps/pep-0492/" rel="nofollow noreferrer">PEP</a> that introduced <code>async</code>/<code>await</code> expressions, Yury Selivanov, had this to say:</p>
<blockquote>
<p>I suspect the reason is that <code>async</code>/<code>await</code> aren't proper keywords in
  3.5/3.6, and the hacks we have in tokenizer to recognize them aren't working in f-strings.</p>
<p>I'll assign this issue to myself to make sure it's resolved in 3.7
  once we make <code>async</code>/<code>await</code> keywords.</p>
</blockquote>
<p>and indeed, the tokenizer does seem to <a href="https://github.com/python/cpython/blob/master/Parser/tokenizer.h#L69" rel="nofollow noreferrer">treat these specially</a>.</p>
<p>You were right to be puzzled by this as formatted strings are documented as supporting <a href="https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals" rel="nofollow noreferrer">all valid Python expressions</a> (with the appropriate limitations those expressions entail i.e <code>await</code> in an <code>async def</code> function). </p>
<p>I don't believe there's any way to circumvent this at the moment. You'll need to stick with the <code>.format</code> route until the issue is resolved.</p>
</div>
