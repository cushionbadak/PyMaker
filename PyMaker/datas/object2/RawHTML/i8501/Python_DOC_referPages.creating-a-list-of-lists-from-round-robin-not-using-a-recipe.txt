<div class="post-text" itemprop="text">
<p>I am new to python and trying to learn how to round robin of a list into a list of lists. I saw posts with answers pointing to a standard round robin recipe, but I don't understand some of the concepts in it and would prefer a simpler solution. </p>
<p>I want to achieve something like this using a function, but I haven't been able to come close:</p>
<pre><code>MYLIST = ['apples', 'oranges', 'bananas', 'grapes', 'strawberries', 'pears']
&gt;&gt;&gt;myfunc(MYLIST)
[['apples', 'grapes'], ['oranges', 'strawberries'], ['bananas', 'pears']]
</code></pre>
<p>I'm very confused after attempting to solve this problem using a combination of for loops, while loops and if statements. Nothing I did worked.</p>
<p>I don't have any code that works or comes close to working. Any help would be appreciated. Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Solution</strong>: This behavior is implemented in <code>more_itertools.distribute</code> <a href="https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.distribute" rel="nofollow noreferrer">see documentation for details</a>.  Simply <code>pip install more-itertools</code> and code the following:</p>
<pre><code>import more_itertools

list_ = ['apples', 'oranges', 'bananas', 'grapes', 'strawberries', 'pears']
[list(c) for c in list(more_itertools.distribute(3, list_))] 
# [['apples', 'grapes'], ['oranges', 'strawberries'], ['bananas', 'pears']]
</code></pre>
<p><strong>Explanation</strong>: The latter redistributes an iterable across <code>n</code> containers.  </p>
<p>Note, this is not what the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>roundrobin</code></a> recipe does, which yields interleaved elements from <code>n</code> iterables, e.g. <code>roundrobin('ABC', 'D', 'EF') --&gt; A D E B F C</code>.  This creates a single stream of elements that are not divided among separate containers, as you require.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try below code I don't know much about round robin algorithm but,</p>
<pre><code>l = ['apples', 'oranges', 'bananas', 'grapes', 'strawberries', 'pears']

half = len(l) / 2

l1 = l[:half]
l2 = l[half:]

l3 = []

for i in range(half):
    l3 += [l1[i],l2[i]],

print l3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>@Abhishek gurjar your code is giving a traceback with a TypeError. I think it is because of true division which outputs in float. It works if the expression len(l)/2 is inside an int() function. :) </p>
<pre><code>l = ['apples', 'oranges', 'bananas', 'grapes', 'strawberries', 'pears']

half = int(len(l) / 2)
l1 = l[:half]
l2 = l[half:]
l3 = []
for i in range(half):
    l3 += [l1[i],l2[i]],
print l3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>since  you're new to python and you said that <strong>"Nothing I did worked."</strong> I guess you might not know that you can't pass some parameters to a function and make global effects inside the function.  </p>
<p>here's a sample of what I'm saying</p>
<pre><code>&gt;&gt;&gt; def f(a):  
       a = [0,1,2,3]

&gt;&gt;&gt; t = [0,0,0,0]
&gt;&gt;&gt; f(t)
&gt;&gt;&gt; t
[0,0,0,0]
</code></pre>
<p>how ever working with items of a list is ok  </p>
<pre><code>&gt;&gt;&gt; def f(a):
        a[0] = 0
        a[1] = 1
        a[2] = 2
        a[3] = 3
&gt;&gt;&gt; t = [0,0,0,0]
&gt;&gt;&gt; f(t)
&gt;&gt;&gt; t
[0,1,2,3]
</code></pre>
<p>also another solution is to return the result  </p>
<pre><code>&gt;&gt;&gt; def f(a):  
       a = [0,1,2,3]
       return a

&gt;&gt;&gt; t = [0,0,0,0]
&gt;&gt;&gt; t = f(t)
&gt;&gt;&gt; t
[0,1,2,3]
</code></pre>
</div>
<span class="comment-copy">for better answers add your code, it doesn't matter if it doesn't work!   this way we can see where the problem is</span>
<span class="comment-copy">What happens if there are more than 6 values or if have arbitrary number of values in main list?</span>
<span class="comment-copy">See the link to the documentation.  In certain cases, empty lists are returned if the iterables are exhausted.</span>
