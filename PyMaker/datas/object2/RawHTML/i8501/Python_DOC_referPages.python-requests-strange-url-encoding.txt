<div class="post-text" itemprop="text">
<p>Using Python 3.6.1, Requests 2.13.0, I am getting strange encoding of the URL being requested. I have a URL with Chinese characters in the query string, for example <code>huà 話 用</code>, which should %-encode to <code>hu%C3%A0%20%E8%A9%B1%20%E7%94%A8</code> or even <code>hu%C3%A0+%E8%A9%B1+%E7%94%A8</code>, but for some reason it is %-encoding to <code>hu%C3%83%C2%A0%20%C3%A8%C2%A9%C2%B1%20%C3%A7%C2%94%C2%A8</code>. This is not correct. I've been using <a href="http://r12a.github.io/apps/conversion/" rel="nofollow noreferrer">http://r12a.github.io/apps/conversion/</a> page to help me work the encodings. I've also used JavaScript <code>encodeURI</code> and PHP <code>urlencode</code> and don't get anything near what I see the Requests library doing.</p>
<p>Am I doing something wrong such that the encoding is so far off?</p>
<p>UPDATE:
I looked into Mojibake encoding and dug into the Requests library a little more and found out what the problem is, but I'm still not sure how to fix it.</p>
<p>I'm making a call against an internal server, using a simple <code>.get(url)</code> call. The call goes to the server and gets a redirect response. The redirect page has a <code>meta charset="UTF-8"</code> in the header and the URL listed in it is correct. The <code>location</code> header leaving the server is ok; it is encoded as UTF-8 and the <code>Content-Type</code> header has a <code>charset=UTF-8</code> on it. However, when I debug the redirect response in Python I note that the header on the response object is incorrect, it doesn't seem to be decoded correctly. The <code>headers</code> property contains this in <code>location</code>: <code>huÃ\xa0 è©± ç\x94</code>. As said above, it should be decoded as: <code>huà 話 用</code>. So, that strange URL query string get's % encoded by Requests and set back to the server, which then rejects that URL (obviously).</p>
<p>Is there something I can do to prevent Requests from messing this up? Or get it to correctly decode the <code>location</code> header? Web browsers don't seem to have trouble with this.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have a <a href="https://en.wikipedia.org/wiki/Mojibake" rel="nofollow noreferrer">Mojibake</a> encoding. The bytes encoded are those of the Latin-1 interpretation of the UTF-8 bytes:</p>
<pre><code>&gt;&gt;&gt; from urllib.parse import quote
&gt;&gt;&gt; text = 'huà 話 用'
&gt;&gt;&gt; quote(text)
'hu%C3%A0%20%E8%A9%B1%20%E7%94%A8'
&gt;&gt;&gt; quote(text.encode('utf8').decode('latin1'))
'hu%C3%83%C2%A0%20%C3%A8%C2%A9%C2%B1%20%C3%A7%C2%94%C2%A8'
</code></pre>
<p>You can reverse the process by manually encoding to Latin-1 again, then decoding from UTF-8:</p>
<pre><code>&gt;&gt;&gt; unquote('hu%C3%83%C2%A0%20%C3%A8%C2%A9%C2%B1%20%C3%A7%C2%94%C2%A8').encode('latin1').decode('utf8')
'huà 話 用'
</code></pre>
<p>or you could use the <a href="https://ftfy.readthedocs.io/en/latest/" rel="nofollow noreferrer"><code>ftfy</code> library</a> to automate fixing the wrong encoding (<code>ftfy</code> usually does a much better job, especially when Windows codepages are involved in the Mojibake):</p>
<pre><code>&gt;&gt;&gt; from ftfy import fix_text
&gt;&gt;&gt; fix_text(unquote('hu%C3%83%C2%A0%20%C3%A8%C2%A9%C2%B1%20%C3%A7%C2%94%C2%A8'))
'huà 話 用'
</code></pre>
<p>You said this about the source of the URL:</p>
<blockquote>
<p>The location header leaving the server is ok; it is encoded as UTF-8</p>
</blockquote>
<p>That's your problem, right there. HTTP headers are <em>always encoded as Latin-1</em><sup>(*)</sup>. The server MUST set the Location header to a fully percent-encoded URL, so that all UTF-8 bytes are represented as <code>%HH</code> escape sequences. These are just ASCII characters, perfectly save in a Latin-1 context. </p>
<p>If your server sends the header as un-escaped UTF-8 bytes, then HTTP clients (including <code>requests</code>) will decode that as Latin-1 instead resulting in the exact Mojibake problem you observed. And because the URL contains invalid URL characters, <code>requests</code> escapes the Mojibake result to the percent-encoded version. </p>
<hr/>
<p><sup>(*)</sup> Actually, the <code>Location</code> header should be an <a href="https://tools.ietf.org/html/rfc2396#section-3" rel="nofollow noreferrer"><code>absoluteURI</code>  as per RFC2396</a> which is always ASCII (7-bit) clean data, but because some other HTTP headers allow for 'descriptive' text, Latin-1 (ISO-8859-1) is the accepted default encoding for header data. See the <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec2.html#sec2.2" rel="nofollow noreferrer"><code>TEXT</code> rule in section 2.2 of the HTTP/1.1 RFC</a>, and the <a href="https://docs.python.org/3/library/http.client.html" rel="nofollow noreferrer"><code>http.client</code> module</a> that ultimately decodes the headers for <code>requests</code> follows this RFC in this regard when decoding non-ASCII data in any header. You can provide non-Latin-1 data only if wrapped as per <a href="https://tools.ietf.org/html/rfc2047" rel="nofollow noreferrer">the Message Header Extensions RFC 2047</a>, but this doesn't apply to the <code>Location</code> header.</p>
</div>
<span class="comment-copy">You'll have to show your code to see if you are doing anything wrong; I don't think <code>requests</code> would do this by itself normally.</span>
<span class="comment-copy">So how do I prevent <code>Request</code> from doing that. I'm working with all unicode strings in Python 3, so I wouldn't ever expect it would do this.</span>
<span class="comment-copy">@cjbarth: again, I don't know how you are passing in URLs to requests. This is not anything that I'd expect <code>requests</code> for actually doing.</span>
<span class="comment-copy">I've updated my question with more details about what is happening. Thanks for your comments about Mojibake encoding.</span>
<span class="comment-copy">@cjbarth: I'm afraid that it is your server that is the issue here; I've added the relevant standards information to the post. Also see <a href="//stackoverflow.com/q/7654207">What charset SHOULD be used for a Location: header in a 301 response?</a></span>
