<div class="post-text" itemprop="text">
<p>Assume that, <code>file.txt</code> is closed or deleted during the delay between <code>open</code> and <code>write</code>. (or it can ?)</p>
<p>Then, this situation can occur <a href="https://cwe.mitre.org/data/definitions/367.html" rel="nofollow noreferrer">TOCTOU</a> ?</p>
<p><code>with</code> statement sure that atomic until with block or not?</p>
<pre><code>with open("file.txt") as f :
    # ...delayed...
    f.write("something")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Can this occur?</strong></p>
<p><strong>Use case 1</strong>: Python itself deletes the file* </p>
<p><strong>yes</strong> it can happen. I just tested like this:</p>
<pre><code>In [1]: with open("file.txt", "w") as f :
   ...:     f.write("Something Old")
   ...:

In [2]: !cat ./file.txt
Something Old
In [3]: import os
   ...: with open("file.txt","w") as f:
   ...:     os.remove("./file.txt")
   ...:     print f.write("Something new")
   ...:
None

In [4]: !cat ./file.txt
cat: ./file.txt: No such file or directory
</code></pre>
<p><strong>Use Case 2:</strong> Other than python deletes the file. </p>
<p>Then also, found the behavior to be same. </p>
<pre><code>In [1]: !cat ./file.txt
Something Old
In [2]: import os
   ...: import time
   ...:
   ...: with open("file.txt","w") as f:
   ...:     time.sleep(15)
   ...:     print f.write("Something new")
   ...:
None

In [3]: !cat ./file.txt
cat: ./file.txt: No such file or directory
</code></pre>
<p><strong>How to avoid it?</strong> </p>
<p>You can use exclusive lock from <a href="https://docs.python.org/3/library/fcntl.html#fcntl.lockf" rel="nofollow noreferrer">fcntl.lockf()</a> </p>
<p>Edit: There is one more caveat here. Locking the file may not be straight forward and may be OS dependent like <a href="https://stackoverflow.com/questions/186202/what-is-the-best-way-to-open-a-file-for-exclusive-access-in-python">What is the best way to open a file for exclusive access in Python?</a></p>
</div>
<span class="comment-copy"><code>with</code> blocks aren’t atomic (neither in general nor with files). On Windows, IIRC, you can’t delete a file that’s being written to; elsewhere, unlinking a file doesn’t invalidate handles to it. Either way, there’s no problem with continuing to write. <b>tl;dr: no</b></span>
<span class="comment-copy">@Ryan but there's problem when I read deleted file. right ?</span>
<span class="comment-copy">No. As long as the file is open, it won’t actually be deleted by conventional means.</span>
<span class="comment-copy">Oh, I'm stupid. I just try it. thank you !</span>
<span class="comment-copy">It's pretty interested example. Thank you !</span>
