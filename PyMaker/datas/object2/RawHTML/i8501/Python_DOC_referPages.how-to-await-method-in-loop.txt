<div class="post-text" itemprop="text">
<p>I have the following method that generates data for me:</p>
<pre><code>async def generate_url(self, video_id):
    data = await self.s3.generate_presigned_url(...video_id...)
    return data

def convert_to_json(self, urls):
    ids = [self.generate_url(url) for url in urls]
    ...
</code></pre>
<p>How to correctly await <code>generate_url</code> in <code>convert_to_json</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>You may use a <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.wait" rel="noreferrer"><code>wait</code></a> wrapper around the list of tasks:</p>
<pre><code>async def convert_to_json(self, urls):
    tasks = [self.generate_url(url) for url in urls]
    await asyncio.wait(tasks)
</code></pre>
<p>Or, if you can't mark <code>convert_to_json</code> method as <code>async</code>, wait it synchronously:</p>
<pre><code>import asyncio

def convert_to_json(self, urls):
    loop = asyncio.get_event_loop()
    tasks = [self.generate_url(url) for url in urls]
    loop.run_until_complete(asyncio.wait(tasks))
</code></pre>
<p>Also you can try to implement <a href="https://www.python.org/dev/peps/pep-0492/#asynchronous-iterators-and-async-for" rel="noreferrer">an <code>async</code> iterator</a> and use it with <code>async for</code> syntax, something like this:</p>
<pre><code>class Loader:
    def __init__(self, urls):
        self._urls = iter(urls)

    async def generate_url(self, video_id):
        data = await self.s3.generate_presigned_url(...video_id...)
        return data

    def __aiter__(self):
        return self

    async def __anext__(self):
        try:
            url = next(self._urls)
        except StopIteration:
            raise StopAsyncIteration
        data = await self.generate_url(url)
        return data

async for id in Loader(urls):
    print(id)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For me it worked something like this:</p>
<pre><code>import asyncio

class A:
    def __init__(self):
        pass

    async def generate_url(self, video_id):
        data = await self.s3.generate_presigned_url(...video_id...)
        return data

    def add_to_ids(self, id):
        ids.append(id.result())

    def convert_to_json(self, urls):
        loop = asyncio.get_event_loop()

        ids = []
        tasks = []

        for url in urls:
            task = asyncio.ensure_future(self.generate_url(url))
            task.add_done_callback(self.add_to_ids)
            tasks.append(task)
        tasks = asyncio.gather(*tasks)

        loop.run_until_complete(tasks)
        loop.close()

a = A()
a.convert_to_json([1, 2, 3])
</code></pre>
<p>Enjoy!</p>
</div>
<div class="post-text" itemprop="text">
<p>If you don't use a loop already, try:</p>
<pre><code>loop = asyncio.get_event_loop()
ids = loop.run_until_complete(asyncio.gather(*[self.generate_url(url) for url in urls]))
</code></pre>
<p>Or in a coroutine:</p>
<pre><code>ids = await asyncio.gather(*[self.generate_url(url) for url in urls])
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/1239035/asynchronous-method-call-in-python">Asynchronous method call in Python?</a></span>
<span class="comment-copy">assuming <code>convert_to_json</code> was async then you would just await for each element of <code>ids</code>, I think <code>async for data in ids:</code> would work.</span>
