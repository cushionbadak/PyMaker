<div class="post-text" itemprop="text">
<p>It seems to be legal Python code to have a file consisting only of a single quote-enclosed string. The Python interpreter will not complain about the following:</p>
<pre><code>#!/usr/bin/python

"somevalue"
</code></pre>
<p>If I wanted to keep some one-off value (say an API key) isolated from other configuration settings, is it possible to import a file like this into another script as a module and use the string?</p>
<p>The default string representation of the imported module will be something like <code>&lt;module x from y-path&gt;</code>. Can the string value contained within that module be somehow accessed?</p>
<p>(To preemptively cut off tangents, I understand I could just read the file as text or assign the value to <code>variable</code> and <code>from module import variable</code> in another script. There are more conventional ways to accomplish related goals. I am asking out of a desire to better understand the language's design and capabilities.)</p>
</div>
<div class="post-text" itemprop="text">
<p>That string actually ends up being the docstring for the module.
So it is accessed by the <code>__doc__</code> attribute of the module.
Python picks up the first loose string it finds in a module, class, or function to determine its docstring.</p>
<p><a href="https://www.python.org/dev/peps/pep-0257/#what-is-a-docstring" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0257/#what-is-a-docstring</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can also retrieve your string by using <code>inspect</code>. Which is almost the same as <code>__doc__</code> except that it also got "cleaned up" by <a href="https://docs.python.org/3/library/inspect.html#inspect.cleandoc" rel="nofollow noreferrer"><code>inspect.cleandoc()</code></a></p>
<pre><code>import inspect
value = inspect.getdoc(__import__('filename'))
</code></pre>
</div>
<span class="comment-copy">Aha! That taught me something. I'm glad I asked.</span>
