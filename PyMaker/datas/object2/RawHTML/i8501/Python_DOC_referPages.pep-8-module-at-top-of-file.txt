<div class="post-text" itemprop="text">
<p>Desiring to improve my Python style, I ran a PEP-8 style checker on one of my script and it complained about something I don't know how to fix.  The prologue of the script is something like:</p>
<pre><code>#! /bin/env python3

import sys
import os

exe_name = os.path.basename(os.path.realpath(__file__))
bin_dir = os.path.dirname(os.path.realpath(__file__))
inst_dir = os.path.dirname(bin_dir)
sys.path.insert(0, inst_dir+'/path/to/packages')

import mypackage.mymodule
</code></pre>
<p>and the style checker complain on the <code>import mymodule</code> line, stating that it should be a top of file.  But I obviously can't move it before setting the path where it will be found.  Is there a good way to achieve this (mandating an environment variable or a shell wrapper are not what I find better than my current code) while respecting PEP-8 recommendations at the same time?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to avoid path manipulation, you may be able to do so by using the under-known <code>.pth</code> feature.</p>
<p><code>sys.path</code> should begin with the directory containing the main program either by name or by reference as ''.  I assume that the file importing <code>mymodule</code> is not part of <code>mypackage</code>, so that the '' entry is not useful for importing <code>mymodule</code>.</p>
<p><code>sys.path</code> should end with the <code>site-packages</code> directory for the executing binary.  That is the normal place for added packages.  If you do not want to move <code>mypackage</code> into <code>site-packages</code>, you can extend the latter 'vitually' by putting a <code>mystuff.pth</code> file in it.  It should contain one line: the path to the directory <em>containing</em> <code>mypackage</code>.  Call it <code>myprojects</code>. Then <code>mypackage</code> and any other package in <code>myprojects</code> can be imported as if they were in <code>site-packages</code>.</p>
<p>One advantage of .pth files is that you can put identical copies in multiple site-packages directories.  For instance, I have multiple projects in <code>F:/python</code>.  I have multiple versions of Python installed.  So I have put <code>python.pth</code> containing that one line in the site-packages for each.</p>
</div>
<div class="post-text" itemprop="text">
<p>The best strategy would be to put the <code>sys.path</code> related code in separate file and import it in working code file.</p>
<p>So, I will split above code in two files. One named <code>my_module.py</code> and other named <code>working_module.py</code></p>
<p>Now <code>my_module</code> will contain below lines</p>
<pre><code>import sys
import os

exe_name = os.path.basename(os.path.realpath(__file__))
bin_dir = os.path.dirname(os.path.realpath(__file__))
inst_dir = os.path.dirname(bin_dir)
sys.path.insert(0, inst_dir+'/path/to/packages')
</code></pre>
<p>and <code>working_module</code> will contain</p>
<pre><code>import my_module
import mypackage.mymodule
</code></pre>
<p>because we are importing <code>my_module</code> before <code>mypackage</code>, it will execute the path related code before and your package will be available in path.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>importlib</code> module (python 3.5) or <code>imp</code> for python 2.7 to load <code>mypackage.mymodule</code> programatically. Both have the same purpose:</p>
<blockquote>
<p>mechanisms used to implement the import statement</p>
</blockquote>
<p>This question might help you more:
<a href="https://stackoverflow.com/questions/67631/how-to-import-a-module-given-the-full-path">How to import a module given the full path?</a></p>
<p><a href="https://docs.python.org/3/library/importlib.html#examples" rel="nofollow noreferrer">https://docs.python.org/3/library/importlib.html#examples</a></p>
<p><a href="https://docs.python.org/2/library/imp.html" rel="nofollow noreferrer">https://docs.python.org/2/library/imp.html</a></p>
</div>
<span class="comment-copy">PEP-8 recommendations are just that: recommendations. I'd just tell the linter to ignore that one line.</span>
<span class="comment-copy">@MartijnPieters, that's was my first inclination (rules are either simple and exceptions are needed, or complex and not followed as nobody remember them) but I wondered if there was a common idiom that I was unaware of.</span>
<span class="comment-copy">Nah, this looks like a good exception.</span>
<span class="comment-copy">Just append the line with <code># noqa</code>, so that lint would ignore it, like so <code>import mypackage.mymodule # noqa</code>.</span>
<span class="comment-copy">Imports shouldn't alter functionality like that. It's super-duper bad form, and it doesn't make it clear <i>why</i> your code is failing when you take out the seemingly unneeded import.</span>
<span class="comment-copy">@aryamccarthy it is not changing/altering any functionality. You can write imports in another file if it too long.</span>
<span class="comment-copy">Adding another file just to respect a style guidance does not seem such a good idea to me.</span>
<span class="comment-copy">@AProgrammer it doesn't seems right then it would be better to ask Pep8 to silent/ignore these lines.</span>
<span class="comment-copy">To what end? Only to not have an import statement after the <code>sys.path</code> manipulation? Just mark the line as ignored, never write more complicated code just to satisfy a style-guide recommendation.</span>
