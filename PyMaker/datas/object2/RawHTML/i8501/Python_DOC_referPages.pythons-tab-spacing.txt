<div class="post-text" itemprop="text">
<p>So I have a program that prints out two "fish" per line, and the distance between two fish is a tab character "\t", the output looks like this:</p>
<p><a href="https://i.stack.imgur.com/crTjW.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/crTjW.png"/></a></p>
<p>My question is, you see, for example, Theodore is longer than Marge, and they all have a "\t" character after them. So why is Simon and Maggie aligned? And why are Homer and Maude the position they are at? I'm suspecting that there are some invisible gridding? I'm using pycharm</p>
<p>Thank you very much!</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I'm suspecting that there are some invisible gridding?</p>
</blockquote>
<p>That's exactly what tabs do, move the cursor position to the <em>next available tab stop</em>, which are basically gridlines. Tabstops are usually given every 4th or 8th column. </p>
<p>So when you are printing the <code>\t</code> tab at column 5 in a 8th-column tab stop configuration, the next tab stop column would be at position 8. But if your text so far brought you to column 8, then the next stop would be at column 16. Where the next set of characters are printed depends then on how far the preceding text has taken you so far.</p>
<p>Don't use tabs if you need exact control over the output columns. Use <a href="https://docs.python.org/3/library/string.html#formatstrings" rel="nofollow noreferrer">string formatting</a> with minimal field sizes to format your data.</p>
<pre><code>'&lt;&gt;&lt; {:30} &lt;&gt;&lt; {:30}'.format(
    '({}, {})'.format(vara, varb),
    '({}, {})'.format(varc, vard))
</code></pre>
<p>Now the output string will take at least 30 characters for the each field, adding spaces to make up the difference.</p>
</div>
<span class="comment-copy">A tab character will advance the text cursor to the next tab stop. For example, if the cursor is just before the second tab stop, it will advance to that. But if it's just past the second tab stop, it will advance to the third tab stop. So things end up partially lined up. Tabs don't know where you want things to be aligned to by magic.</span>
<span class="comment-copy">You might look at pycurses if you want to ensure table like efficiency in console.</span>
<span class="comment-copy">If your combination of the two fishes name is bigger than "X" chars, you'll need 1 tab, if it's smaller than "X", you'll need more than 1 tab.</span>
<span class="comment-copy">@khelwood is this different in java? I thought in java adding a "\t" is literally adding the distance of a tab</span>
<span class="comment-copy">@JavaLearner If you're outputting to a console, it doesn't matter what language you're using. The console determines how to render your tab.</span>
<span class="comment-copy">Thank you, is this different in java? I thought in java adding a "\t" is literally adding the distance of a tab</span>
<span class="comment-copy">@JavaLearner: no, tabs work the same everywhere.</span>
<span class="comment-copy">Thank you, I guess I've been having a misunderstanding with tab.</span>
<span class="comment-copy">@JavaLearner: and there is no 'distance of a tab'. Only the next tab stop position. Tab characters have <b>no width</b>. They move the character position to the next stop.</span>
<span class="comment-copy">@JavaLearner: there is no such thing as a "tab" distance. You can add a fixed number of spaces instead. This is what string formatting does; add spaces to make up a field width.</span>
