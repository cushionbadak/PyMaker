<div class="post-text" itemprop="text">
<p>I am creating a simple multiple choice quiz in python 3 with tkinter</p>
<p>i am planning to add all questions along with answer in a text file. But i don't know how to get my radio buttons to work with text file and then call them. i need a small example so i can complete my program.
i have tried to use google and other python documents but i am not getting anything proper.</p>
<pre><code>import sys
from tkinter import *

root=Tk()
name=StringVar(value='Enter Name Here')
cn=StringVar(value='Enter CN Here')

def random():
    mlabel=Label(root,text="U CLicked Me").pack()
    return

def random1():
    mtext=name.get()
    mno=cn.get()
    mlabel2=Label(root,text=mtext).pack()
    mlabel3=Label(root,text=mno).pack()

def mquit():
    mexit=messagebox.askyesno(title="Quit",message="Quit The Test ?")
    if mexit &gt; 0:
        root.destroy()
        return

root.geometry('700x700+400+400')
root.title('Welcome To Quiz')

mainmenu=Menu(root)

root.configure(menu=mainmenu)

submenu=Menu(mainmenu,tearoff=0)
mainmenu.add_cascade(label="Options",menu=submenu)
submenu.add_command(label="Restart",command=random)
submenu.add_command(label="Close",command=mquit)

mentry=Entry(root,textvariable=name).pack()
mentry=Entry(root,textvariable=cn).pack()
mbutton=Button(root,text='Ok',command=random1,fg='red',bg='blue').pack()

root.mainloop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are 2 parts you need to understand.</p>
<p>First part is to get the values from your text file. How you do this depends on the format of your text file (which you haven't specified). I would suggest you use either a csv (<a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">csv documentation</a>) or even a config file (<a href="https://docs.python.org/3/library/configparser.html" rel="nofollow noreferrer">config parser documentation</a>).</p>
<p>Once you have the questions and answers loaded into variables, you can assign the values to the radiobuttons. <em>The key point to remember is that radiobuttons in a group all point to one variable.</em> If you programmatically set the variable to a valid option, that button will be selected; if the user selects a radiobutton, the variable will be set to that value - and you can test that value against the answer you loaded from the csv or config file.</p>
<p>(From Modern TKinter for the Busy Python DEveloper by Rocci Rossi):</p>
<p>Radiobuttons are created using the ttk.Radiobutton function, and typically as a set:</p>
<pre><code>phone = StringVar()
home = ttk.Radiobutton(parent, text='Home', variable=phone, value='home')
office = ttk.Radiobutton(parent, text='Office', variable=phone, value='office')
cell = ttk.Radiobutton(parent, text='Mobile', variable=phone, value='cell')
</code></pre>
<p>Each of the radiobuttons of the set will have the same linked variable, but a different value; when the variable has the given value, the radiobutton will be selected, otherwise unselected. When the linked variable does not exist, radiobuttons also display a "tristate" or indeterminate, which can be checked
via the "alternate" state flag.  </p>
</div>
<div class="post-text" itemprop="text">
<p>To show you how it could be done, below is a complete, standalone, <code>tkinter</code> application that illustrates the basics (as well as one or two bonus features).</p>
<p>One important point to grasp is that as a whole, all the <code>tk.Radiobutton</code>s together form a functional group, and share a single <code>tk.IntVar</code> control variable to hold the value of which one, if any, is currently pressed. When one in the group is pressed, using it will not only update that button's indicator, but also those of all the others' automaticallyâ€”which eliminates the need for writing any of your own code to make that happen. See <a href="http://effbot.org/tkinterbook/variable.htm" rel="nofollow noreferrer">this article</a> for more information about tkinter "variable" classes.</p>
<p>The question and answer information is read from a plain text file which is structured in a super simple format with only one datum per line. The first line is the question. The second line is the number of possible answers. The third line is the number of the correct answer (counting from 1). Following these three are a variable number of lines which each contain one of the specified number of answers. Optional comments are allowed on any of these lines.</p>
<p>Here's an example showing the layout of the data in the question and answer file:</p>
<pre class="lang-none prettyprint-override"><code>Question #1
4  // answer count
2  // number of correct answer
q1 answer1
q1 answer2
q1 answer3
q1 answer4
Question #2
3  // answer count
3  // number of correct answer
q2 answer1
q2 answer2
q2 answer3
Question #3
2  // answer count
1  // number of correct answer
q3 answer1
q3 answer2
</code></pre>
<p>Here's the results of it in the running script:</p>
<p>[<img alt="screenshot of app running" src="https://i.stack.imgur.com/XcDg9.png"/></p>
<p>And this is the code:</p>
<pre><code>try:
    import Tkinter as tk
    import tkFont
    import tkMessageBox
except ImportError:  # Python 3
    import tkinter as tk
    import tkinter.font as tkFont
    from tkinter import messagebox as tkMessageBox

class Struct(object):
    """Generic container object."""
    def __init__(self, **kwds):  # keyword args define attribute names and their values
        self.__dict__.update(**kwds)

class App(tk.Frame):
    MIN_WIDTH = 40  # characters
    COMMENT_PREFIX = '//'

    def __init__(self, filename, master=None):
        tk.Frame.__init__(self, master)
        self.grid()
        self.qa_info = self.read_qa_file(filename)
        self.current_question = 0  # index of Struct in qa_info
        self.create_widgets()

    def qa_readline(self, file):
        """Read a single line from file, remove any comment and trailing newline."""
        line = file.readline().rstrip()
        if line:
            try:
                line = line[:line.index(self.COMMENT_PREFIX)]
            except ValueError:
                pass
        return line

    def read_qa_file(self, filename):
        qa_info = []
        with open(filename, 'rt') as file:
            while True:
                question = self.qa_readline(file)
                if not question:  # end-of-file?
                    break
                num_answers = int(self.qa_readline(file))
                correct_answer_num = int(self.qa_readline(file))-1
                answers = [self.qa_readline(file) for _ in range(num_answers)]
                qa_info.append(Struct(question=question, num_answers=num_answers,
                                      correct_answer_num=correct_answer_num,
                                      answers=answers))
        return qa_info

    def create_widgets(self):
        self.btn_font = tkFont.Font(family="Helvetica", size=10, weight='normal')
        self.query_font = tkFont.Font(family="Helvetica", size=12, weight='normal')
        self.ans_font = tkFont.Font(family="Helvetica", size=10, weight='normal')

        self.next_btn = tk.Button(self, text='Next question', font=self.btn_font,
                                  anchor=tk.NW, justify=tk.LEFT,
                                  command=self.next_question)
        self.next_btn.grid(column=0, row=0)
        self.create_query_frame(self.current_question)

    def create_query_frame(self, question_num):
        """Create independent Frame holding question Label and answer Radiobuttons."""
        try:
            getattr(self, 'qa_frame').destroy()  # remove any previous question
        except AttributeError:
            pass
        qa_frame = self.qa_frame = tk.Frame(self)
        qa_frame.grid(column=0, row=1)

        question = self.qa_info[question_num].question
        self.question = tk.Label(qa_frame, text=question, font=self.query_font,
                                 width=self.MIN_WIDTH, anchor=tk.NW)
        question_row = 0  # relative to query frame
        self.question.grid(column=0, row=question_row)

        self.ans_var = tk.IntVar()  # Note: shared by all answer Radiobuttons
        self.ans_var.set(-1)  # set to something that won't match any Radiobutton's value

        # create answer buttons
        answers = self.qa_info[question_num].answers
        self.answer_buttons = []
        first_answer_row = question_row+1  # relative to query frame
        for i, answer in enumerate(answers):
            radiobutton = tk.Radiobutton(qa_frame, text=answer, font=self.query_font,
                                         width=self.MIN_WIDTH, anchor=tk.NW, value=i,
                                         variable=self.ans_var, relief=tk.RIDGE,
                                         command=lambda btn=i: self.button_pressed(btn))
            radiobutton.grid(column=0, row=first_answer_row+i)
            self.answer_buttons.append(radiobutton)

    def next_question(self):
        """Determine index of next question and create frame holding it."""
        self.current_question += 1
        if self.current_question &gt; len(self.qa_info)-1:  # last question?
            self.current_question = 0  # wrap-around
        self.create_query_frame(self.current_question)

    def button_pressed(self, button):
        """React to answer Radiobutton presses.
           (Could also keep score here...)
        """
        qa_info = self.qa_info[self.current_question]
        if button == qa_info.correct_answer_num:
            tkMessageBox.showinfo('Feedback', "That's absolutely correct!")
        else:
            tkMessageBox.showerror('Feedback', "Sorry, that's not right")
            self.ans_var.set(-1)  # turn indicator off

qa_filename = 'questions_and_answers.txt'
app = App(qa_filename)
app.master.title('Q &amp; A Demo')
app.mainloop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>here is the way I found for this using tkinker</p>
<pre><code>Picker = StringVar(value=()) #This sets the variable to all option within the radiobuttons 
Option1 = Radiobutton(root, text="Option1", Variable=Picked, value="Option1")
Option2 = Radiobutton(root, text="Option2", Variable=Picked, value="Option2")

text_file = open(Output.text", "w+")
text_file.write(Picked.get())
</code></pre>
</div>
<span class="comment-copy">Please post a <a href="http://stackoverflow.com/help/mcve">minimal, complete, verifiable example</a> to your question, not a link to an external site. The SO search doesn't search external sites and when your link expires your question will not make any sense.</span>
<span class="comment-copy">Here's some <a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/radiobutton.html" rel="nofollow noreferrer">documentation</a> on <code>Radiobutton</code> widgets. It's unclear how you intend on using them in your quiz program. Are all the questions multiple choice or what? What exactly is the format of the questions and answer text file?</span>
<span class="comment-copy">@martineau by text i meant to say (.txt) sorry for not specifying it</span>
<span class="comment-copy">I understand it's a text file, the extension used isn't really important. By format, I meant the layout of questions and answers with the file. <code>Radiobotton</code>s consist of two parts, an indicator and a label. So it's unclear how you would use them in your quiz program. This is why I asked what kind of questions do you envision it handling.</span>
<span class="comment-copy">@martineau ohk sorry now i am getting it so the format will be like label=questions and indicators= answers but where i am stuck here is how do i get it to work with cvs file or text file to shuffle the answers and point out the right one from the four options and how do i get the radio button working with it this is where i am actually stuck i have read documentations but i need a proper example which i have not found internet</span>
<span class="comment-copy">i was planning to use txt format but if cvs is easy to do i'll follow up that can i do something like this - make all questions under 1 columns then all right answers in a separate column and that way the rest of the columns will be wrong answers can we do something like this and add radio button accordingly ?</span>
<span class="comment-copy">A <code>csv</code> <i>is</i> a text file - it stands for "comma separated values" e.g. <code>question_number, possible_answer1, possible_answer2, possible_answer3, correct_answer</code></span>
<span class="comment-copy">thanks thought this is still kinda complex for me i'll try to go through it and give it a try</span>
<span class="comment-copy">@Rashi_kp: I was concerned that might be the case. Unfortunately GUI programs are generally going to be more complex than their console/terminal equivalentsâ€”it's just the nature of the beast, I suppose. The parts that are the most relevant to your question are the portions that create the <code>Radiobutton</code>s and the associated <code>command</code> callback functions.</span>
<span class="comment-copy">P.S. If my answer tells you what you wanted to know, please consider up-voting and accepting it. (See <a href="http://stackoverflow.com/help/someone-answers"><b><i>What should I do when someone answers my question?</i></b></a>)</span>
