<div class="post-text" itemprop="text">
<p>I have noticed some strange behaviour with list extension return values. </p>
<p>I have read this thread <a href="https://stackoverflow.com/questions/2347265/why-does-behave-unexpectedly-on-lists">Why does += behave unexpectedly on lists?</a></p>
<p>but it still does not make sense. </p>
<p>This is what I did: </p>
<pre><code>Python 3.5.2 |Anaconda custom (64-bit)| (default, Jul  2 2016, 17:53:06) 
[GCC 4.4.7 20120313 (Red Hat 4.4.7-1)] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; l = [1, 2]
&gt;&gt;&gt; print(l.extend([1]))
None
&gt;&gt;&gt; print(l.__iadd__([1]))
[1, 2, 1, 1]
&gt;&gt;&gt; print(l += [1])
  File "&lt;stdin&gt;", line 1
print(l += [1])
         ^
SyntaxError: invalid syntax
&gt;&gt;&gt; 
</code></pre>
<p>I understand that <code>extend</code> does not return the extended object, but <code>None</code>. Not helpful, but I get it. </p>
<p>Now <code>__iadd__</code> behaves differently, which is weird, since I read that this basically calls extend for a list. </p>
<p>But the third one baffles me. I thought <code>+=</code> was shorthand for <code>__iadd__</code>, so why do I get a <code>SyntaxError</code> here? Especially since <code>__iadd__</code> returns the modified list, which would make sense to pass on as a return value. But it seems I can't use <code>+=</code> (or <code>*=</code> for that matter, e.g. with integers) in function calls. </p>
<p>Is that by design? </p>
</div>
<div class="post-text" itemprop="text">
<p><code>l.__iadd__(val)</code> is a function call, that is, <em>an expression</em>.</p>
<p><code>l += [1]</code> is an assignment, that is, <em>a statement</em>.</p>
<p>Argument values (the ones you have supplied to <code>print</code> in this case) are not allowed to be statements, <em>only expressions</em>, simple as that.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>__iadd__</code> is used to implement <code>+=</code>, but the two are not identical. <code>l += [1]</code> is still a <em>statement</em>, while <code>l.__iadd__([1])</code> is an <em>expression</em>.</p>
</div>
<span class="comment-copy">Thanks, I wasn't even aware of the distinction. Very interesting. If anyone else also didn't know, <a href="http://stackoverflow.com/questions/4728073/what-is-the-difference-between-an-expression-and-a-statement-in-python">here's</a> a good explanation.</span>
<span class="comment-copy">@Niko If you're interested in more technical details, Python has 3 full chapters for expressions and simple and compound statements in the <a href="https://docs.python.org/3/reference/index.html" rel="nofollow noreferrer">Reference Manual</a> Might want to bookmark it for some later point :-)</span>
