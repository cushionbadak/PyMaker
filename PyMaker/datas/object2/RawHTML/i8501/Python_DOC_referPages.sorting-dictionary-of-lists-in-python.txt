<div class="post-text" itemprop="text">
<p>I'm making an auction program and need to sort stored bids by price, and date. I'm trying to pull any bids that equal the reserve price, and find the earliest one. I've pulled the line below from another question, however I need to find the max bid (sorted in reverse to bring highest bid and then oldest bid if there are two of the same value). </p>
<pre><code>sorted(stored_bids_1.items(), key=lambda e:e[1][2][3][4])
</code></pre>
<p>The dictionary has the following info:</p>
<pre><code>stored_bids_1 {bid_number : [cust_bid_price, bid_date_time, cust_num_seats, cust_name]}
</code></pre>
<p>I'd like the bids to be ranked by bid price, then date&amp;time. </p>
<p>Any help is much appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>At first glance big thing that I can think of doing is to use a different datastructure. The dicitonary you have works well for storing it the information, but is clearly creating a hurtle. I'd suggest another a dictionary of dictionaries maybe, that way you could access the different values (cust_bid_price, bid_date_time, etc.) by the keys they are in the sub-dictionaries. It's definitely not perfect, but it may lead to another way of looking at this and solving the problems you have.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I need to find the max bid (sorted in reverse to bring 
  highest bid and then oldest bid if there are two of the same value).</p>
</blockquote>
<p>This can be done by taking advantage of <a href="https://en.wikipedia.org/wiki/Sorting_algorithm#Stability" rel="nofollow noreferrer">sort stability</a> and doing two successive sorts:</p>
<pre><code>bids.sort(key = lambda e: e[1])               # where e[1] is bid_date_time
bids.sort(key = lambda e: e[0], reverse=True) # where e[0] is cust_bid_price
</code></pre>
<p>See the Python Sorting HowTo guide for <a href="https://docs.python.org/3/howto/sorting.html#sort-stability-and-complex-sorts" rel="nofollow noreferrer">more explanation and another example</a>. </p>
</div>
<span class="comment-copy"><code>key=lambda e: (e[1][0], -datetime.datetime(e[1][1]))</code> assuming that <code>bid_date_time</code> is a valid date format string. And you can just use <code>max()</code></span>
<span class="comment-copy">Try a <a href="https://wiki.python.org/moin/HowTo/Sorting" rel="nofollow noreferrer">sorting tutorial</a>.  I think that you want to sort several times, starting with the least important factor and finish with the most.  You'll also want to specify the sort key at each level.</span>
