<div class="post-text" itemprop="text">
<p>As part of my unittests, I am testing some responses using the fantastic Requests library. Something cool you can do with this library is test a response for a <code>200</code> OK status code by simply calling:
</p>
<pre class="lang-py prettyprint-override"><code>r = requests.get("http://example.com")
if r:
    # success code, do something...
else:
    # error code, handle the error.
</code></pre>
<p>The way this works behind the scenes is Requests updates the <code>__bool__()</code> protocol method of the response returned according to the type of status code.</p>
<p>What I'd like to do is to be able to mock the response object of <code>requests.get()</code> well enough so that I can not only patch the methods/attributes I'm interested in checking (<code>status_code</code>, <code>json()</code>) but also to be able to return <code>False</code> whenever I choose to.</p>
<p>The following isn't working for me, as once I call <code>r</code> from the sample code above, it returns the Mock object <code>&lt;Mock id='2998569132'&gt;</code> which evaluates to <code>True</code>.</p>
<pre class="lang-py prettyprint-override"><code>with mock.patch.object(requests, 'get', return_value=mock.MagicMock(
    # False, # didn't work
    # __bool__=mock.Mock(return_value=False), # throws AttributeError, might be Python2.7 problem
    # ok=False, # works if I call if r.ok: instead, but it's not what I want
    status_code=401,
    json=mock.Mock(
    return_value={
        u'error': {
            u'code': 401,
            u'message':
            u'Request had invalid authentication credentials.',
            u'status': u'UNAUTHENTICATED'
        }
    }
)
)) as mock_account_get_failure:
# mock_account_get_failure.return_value = False # overwrites what I just mocked with json() and status_code
</code></pre>
<p>I thought the answer might lie in <a href="https://docs.python.org/3/library/unittest.mock.html#magic-mock" rel="noreferrer">Magic Mocking the protocol method's return value</a>, but read <a href="http://www.voidspace.org.uk/python/mock/magicmock.html" rel="noreferrer">here</a> that <code>__bool__</code> is only supported for Python 3.0.</p>
</div>
<div class="post-text" itemprop="text">
<p>In python2.7, you should mock <code>__nonzero__</code> instead of <code>__bool__</code>.</p>
<p><code>m = mock.MagicMock(__nonzero__=mock.Mock(return_value=False), status_code=400)
m.status_code  # &gt; 400
bool(m)        # &gt; False
</code></p>
</div>
