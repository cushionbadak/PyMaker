<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1549801/what-are-the-differences-between-type-and-isinstance">What are the differences between type() and isinstance()?</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>I found this 3 ways to check it, but I don't know which of them is the best:</p>
<pre><code>x = ['Bla', 'Bla', 'Bla', 'etc']

if isinstance(a, list): print('Perfect!')
if type(a) is list:     print('Incredible!')
if type(a) == type([]): print('Awesome!')
</code></pre>
<p>Which of these is better?</p>
<p>Also, Can I use these ways to check whether an <em>x</em> is a string, tuple, dictionary, int, float, etc? If this is possible, in the first two methods do I have to convert a list to a tuple, string, dictionary, int, float, etc (no?), but in the third? I have to use (), {}, '', and what more for int and float?</p>
</div>
<div class="post-text" itemprop="text">
<p>These all express different things, so really it depends on exactly what you wish to achieve:</p>
<ul>
<li><code>isinstance(x, list)</code> check if the type of <code>x</code> is either <code>list</code> or has <code>list</code> as a parent class (lets ignore ABCs for simplicity etc);</li>
<li><code>type(x) is list</code> checks if the type of <code>x</code> is precisely <code>list</code>;</li>
<li><code>type(x) == list</code> checks for equality of types, which is not the same as being identical types as the metaclass could conceivably override <code>__eq__</code></li>
</ul>
<p>So in order they express the following:</p>
<ul>
<li><code>isinstance(x, list)</code>: is <code>x</code> like a <code>list</code></li>
<li><code>type(x) is list</code>: is <code>x</code> precisely a <code>list</code> and <em>not</em> a sub class</li>
<li><code>type(x) == list</code>: is <code>x</code> a list, or some other type using metaclass magic to masquerade as a <code>list</code>.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Usually we prefer, <code>isinstance(a, list)</code> because it allows <em>a</em> to be either a list or list subclass.</p>
<p>For better speed, an exact check can to an identity test, <code>type(a) is list</code>.  This is a bit faster than using <code>==</code>.</p>
<p>That said, the norm in Python is to avoid type checks altogether and instead do <a href="https://docs.python.org/3/glossary.html#term-duck-typing" rel="nofollow noreferrer">"duck typing"</a>.  You call list methods on <em>a</em> and if they succeed, then we deem <em>a</em> to be sufficiently list like.</p>
</div>
<div class="post-text" itemprop="text">
<p>Do you need to know if it's a list, or just if it's iterable (if you can use it in a for loop, for example)? Generally the "Pythonic way" is to just go ahead and do it in a try-except, because many things can be iterable: strings, lists, sets, deques, custom types, etc. (All it takes is an <code>__iter__</code> or <code>__getitem__</code> method)</p>
<p>If you REALLY need to know what type it is, isinstance() is typically the way to go since it will also cover subclasses.</p>
<p>As far as using <code>type() == something</code> is concerned, <code>int</code>, <code>float</code>, <code>list</code>, etc are all types: <code>type(1) == int</code> is <code>True</code>.</p>
<p>My typical approach, where I might have a string, a list (or tuple, etc.) of strings, or an int or other object which can be converted to a string, would be this (for Python 2 - Py3 no longer has <code>basestring</code> so you'll need to check for <code>str</code> and/or <code>bytes</code>), assuming <code>foo</code> is your variable:</p>
<pre><code>if isinstance(foo, basestring):
    foo = (foo,) # turn it into an iterable (tuple)
    # or, doStuff(foo) followed by a return or break
try:
    for x in foo:
        doStuff(str(x)) # do something with each element
except TypeError: # TypeError: 'some' object is not iterable
    doStuff(str(foo))
</code></pre>
</div>
<span class="comment-copy">I usually prefer to use isinstance form instead of type, it is more expressive and allows to check types of object classes that don't inherit from object directly</span>
<span class="comment-copy">Usually having to check the type of something is very bad. Only do it if absolutely necessary.</span>
<span class="comment-copy">Sorry but i am a quite noob, i only could understand the second: <b>"type(x) is list"</b>.  "check if the type of x is either list or has list <b>as a parent class</b> ¿parent class? ¿Is something about classes (i don't know almost nothing about that)?. And 'checks for <b>equality</b> of types, which is not the same as being <b>identical</b> types as...', sorry but what is a equality of types but not identical types?. If i want to check a 'simple list' (nothing about class or something advanced), my best way (less complicated or advanced) is to use <b>"type(x) is a list'</b>?</span>
<span class="comment-copy">Thanks for the grammar fix in my post, sorry but english isn't my strong.</span>
<span class="comment-copy">Thanks for the advice, but i have to do the check really, because if my argument in the function is a list it will do something like 'for x in list: print(x)', and if the argument is a string it will only do: print(argument).</span>
<span class="comment-copy">In that case, I would test if it's a string instead. Only two things are a string (bytes and string in Py3; string and unicode in Py2). Many things are iterable (lists, tuples, sets, deques, custom objects). In a similar situation I've done this by testing if it's a string, if not it goes to a for loop in a try, then the except block checks if I can call str() on it (i.e. if it has a <b>str</b>).</span>
<span class="comment-copy">Tring to improve my code with your suggestion I realice that i don't use strings only :), i use ints and floats also. How can i make: if x is iterable (i mean, list, tuples, etc): do something, elif x is not iterable (i mean, strings, ints, floats, etc): do other thing?</span>
<span class="comment-copy">I would still likely do that same thing. First you have to special-case strings (because strings are iterable, but you don't want to do that). Then you check if it IS iterable by using a for loop inside a try. The third step  using <code>str(variable)</code> in the except will take care of ints, floats, etc. I'll edit my answer to have an example.</span>
