<div class="post-text" itemprop="text">
<p>I would like to write a unit test that can ensure a SQL statement in a function call is schematically correct. It should test the execution of this call. I would then like to mock the call to commit, so that no insertions to the database take place. I'm using psycopg2 for my tests.</p>
<p>I have a function like:</p>
<pre><code>def test_insert(a, b, c):
    con = psycopg2.connect(os.environ['PGDB'])
    cur = con.cursor()
    cur.execute('insert into test_table values ({a}, {b}, {c})'.format(a=a, b=b, c=c))
    con.commit()
    con.close()
</code></pre>
<p>when calling <code>test_insert(1,2,3)</code> I see the row inserted into the table. Now I try to mock the call. I've taken a few approaches so far:</p>
<pre><code>@mock.patch('psycopg2.connect')
def test(mock_connect, a, b, c):
    mock_con = mock_connect.return_value
    mock_con.commit.return_value = None
    insert_row(a, b, c)
</code></pre>
<p>This seems to work but does not actually call the execution statement. <code>test_insert(1,4,'xyz')</code> fails for instance while <code>test(1,4,'xyz')</code> does not. Next I tried to mock just the commit method of the connection class in psycopg2:</p>
<pre><code>@mock.patch('psycopg2.extensions.connection.commit')
def test_insert(mock_commit, a, b, c):
    mock_commit.return_value = None
    insert_row(a,b,c)
</code></pre>
<p>but this gives me a syntax error</p>
<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/home/a/.virtualenv/test/lib/python2.7/site-packages/mock/mock.py", line 1318, in patched
    patching.__exit__(*exc_info)
  File "/home/a/.virtualenv/test/lib/python2.7/site-packages/mock/mock.py", line 1480, in __exit__
    setattr(self.target, self.attribute, self.temp_original)
TypeError: can't set attributes of built-in/extension type 'psycopg2.extensions.connection'
</code></pre>
<p>Is there a good way to do what I am trying to do?</p>
</div>
<div class="post-text" itemprop="text">
<p>I assume you are using <a href="https://docs.pytest.org/en/latest/example/" rel="nofollow noreferrer">pytest</a> and it is not a good practice to name your functions starting with <code>test_</code> if they are not actual tests as this will probably raise problems with the testing framework. Therefore I slightly modified your initial snippet as follows and I named the module <code>psyco.py</code></p>
<pre><code>import psycopg2
import os

def insert(a, b, c):
    con = psycopg2.connect(os.environ['PGDB'])
    import ipdb; ipdb.set_trace()
    cur = con.cursor()
    cur.execute('insert into test_table values ({a}, {b}, {c})'.format(a=a, b=b, c=c))
    con.commit()
    con.close()
</code></pre>
<p>Next, I created the test for your method by taking into account <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer">how patch works</a> and <a href="https://docs.python.org/3/library/unittest.mock.html#where-to-patch" rel="nofollow noreferrer">where to patch</a>. As you are dealing with os environment variables <a href="https://stackoverflow.com/questions/31582750/python-mock-patch-os-environ-and-return-value">this question</a> can help you understand why I mocked it that way.</p>
<p>An example implementation of the test could be as follows:</p>
<pre><code>from psyco import insert
from unittest.mock import patch, Mock, MagicMock
import os

@patch.dict(os.environ,{'PGDB':'db_url'})
@patch('psycopg2.connect')
def test_insert_function(psycopg2_mock):

    x = 1
    y = 4
    z = 'xyz'
    sql_query = 'insert into test_table values ({0}, {1}, {2})'.format(x,y,z)
    insert(x,y,z)
    assert psycopg2_mock.return_value.cursor.call_count == 1
    psycopg2_mock.return_value.cursor.return_value.execute.assert_called_with(sql_query)
    assert psycopg2_mock.return_value.commit.call_count == 1
    assert psycopg2_mock.return_value.close.call_count == 1
</code></pre>
</div>
<span class="comment-copy">The questioner is not trying to patch the environment variable or <code>connect</code>. They're trying to patch <code>commit</code>.</span>
<span class="comment-copy">@user2357112 I get yur point, I assumed that since it is a Unit Test you do not want to have external dependencies. That's why I proposed to both check that the <code>function call is schematically correct</code> and mocking the call to commit since <code>psycopg2.connect</code> call is a mock</span>
