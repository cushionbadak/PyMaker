<div class="post-text" itemprop="text">
<p>From what I've read, <code>^</code> should match the start of a string, and <code>$</code> the end. However, with <code>re.search()</code>, it looks like the behavior of <code>^</code> continues to work fine, while <code>$</code> 'breaks'. Example:</p>
<pre><code>&gt;&gt;&gt; a = re.compile( "^a" )
&gt;&gt;&gt; print a.search( "cat", 1, 3 )
None
</code></pre>
<p>This seems correct to me -- <code>'a'</code> is not at the start of the string, even if it is at the start of the search.</p>
<pre><code>&gt;&gt;&gt; a = re.compile( "a$" )
&gt;&gt;&gt; print a.search( "cat", 0, 2 )
&lt;_sre.SRE_Match object at 0x7f41df2334a8&gt;
</code></pre>
<p>This seems wrong to me, or inconsistent at least.</p>
<p>The documentation on the <code>re</code> module explicitly mentions that the behavior of <code>^</code> does not change due to start/end arguments to <code>re.search</code>, but no change in behavior is mentioned for <code>$</code> (that I've seen).</p>
<p>Can anyone explain why things were designed this way, and/or suggest a convenient workaround?</p>
<p>By workaround, I would like to compose a regex which always matches the end of the string, even when someone uses the end argument to <code>re.search</code>.</p>
<p>And <em>why</em> was <code>re.search</code> designed such that:</p>
<pre><code>s.search( string, endPos=len(string) - 1 )
</code></pre>
<p>is the same as</p>
<pre><code>s.search( string[:-1] )
</code></pre>
<p>when</p>
<pre><code>s.search( string, startPos=1 )
</code></pre>
<p>is explicitly and intentionally not the same as</p>
<pre><code>s.search( string[1:] )
</code></pre>
<p>It seems to be less an issue of inconsistency between <code>^</code> and <code>$</code>, and more of an inconsistency within the <code>re.search</code> function.</p>
</div>
<div class="post-text" itemprop="text">
<h2>Short Answer</h2>
<p>Use <code>\A</code> to and <code>\Z</code> to match the literal beginning or end of a string.
The relevant lines from the <code>re</code> module's docs:</p>
<blockquote>
<p><a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="noreferrer">6.2.1. Regular Expression Syntax</a></p>
<p><code>\A</code>
  Matches only at the start of the string.</p>
<p><code>\Z</code>
  Matches only at the end of the string.</p>
</blockquote>
<h3>Caveat about <code>endpos</code></h3>
<p>This <em>won't</em> work "even when someone uses the end argument to <code>re.search</code>".
Unlike the "start" parameter <code>pos</code>, which just marks a starting point, the <code>endpos</code> parameter means the search (or match) will be conducted on only a portion of the string (emphasis added):</p>
<blockquote>
<p><a href="https://docs.python.org/3/library/re.html#regular-expression-objects" rel="noreferrer">6.2.3. Regular Expression Objects</a></p>
<p><a href="https://docs.python.org/3/library/re.html#re.regex.search" rel="noreferrer"><code>regex.search(string[, pos[, endpos]]</code>)</a></p>
<p>The optional parameter <code>endpos</code> limits how far the string will be searched;
  <strong>it will be as if the string is <code>endpos</code> characters long</strong>,
  [...]
  <code>rx.search(string, 0, 50)</code> is equivalent to <code>rx.search(string[:50], 0)</code>.</p>
</blockquote>
<p>The <code>\Z</code> matches the end of the string being searched, which is exactly what <code>endpos</code> changes.</p>
<h2>Background</h2>
<p>The more-familiar <code>^</code> and <code>$</code> don't do what you think they do:</p>
<blockquote>
<p><code>^</code>
  (Caret.) Matches the start of the string, and in <a href="https://docs.python.org/3/library/re.html#re.MULTILINE" rel="noreferrer"><code>MULTILINE</code></a> mode also matches immediately after each newline.</p>
<p><code>$</code>
  Matches the end of the string or just before the newline at the end of the string, and in <a href="https://docs.python.org/3/library/re.html#re.MULTILINE" rel="noreferrer"><code>MULTILINE</code></a> mode also matches before a newline.
  <code>foo</code> matches both 'foo' and 'foobar', while the regular expression <code>foo$</code> matches only 'foo'.
  More interestingly, searching for <code>foo.$</code> in <code>'foo1\nfoo2\n'</code> matches 'foo2' normally, but 'foo1' in <a href="https://docs.python.org/3/library/re.html#re.MULTILINE" rel="noreferrer"><code>MULTILINE</code></a> mode;
  searching for a single <code>$</code> in <code>'foo\n'</code> will find two (empty) matches:
  one just before the newline, and one at the end of the string.</p>
</blockquote>
<p>Python's regular expressions are heavily influenced by Perl's, which extended the old <code>grep</code> abilities with a host of its own.
That included multi-line matching, which raised a question about metacharacters like <code>^</code>:
Was it matching the beginning of the <em>string</em>, or the beginning of the <em>line</em>?
When <code>grep</code> was only matching one line at a time, those were equivalent concepts.</p>
<p>As you can see, <code>^</code> and <code>$</code> ended up trying to match everything "start-like" and "end-ish".
Perl introduced the new escape sequences <code>\A</code> and <code>\z</code> (lower-case) to match <em>only</em> the start-of-string and end-of-string.</p>
<p>Those escape sequences were adopted by Python, but with one difference:
Python did <em>not</em> adopt Perl's <code>\Z</code> (upper-case), which matched both end-of-string and the special case newline-before-end-of-string...
making it not <em>quite</em> the partner to <code>\A</code> that one would expect.</p>
<p>(I assume Python upper-cased Perl's <code>\z</code> for consistency, avoiding the lopsided <code>'\Apattern\z'</code> regexes that were recommended in books like <em>Perl Best Practices</em>.)</p>
<h3>History of <code>pos</code> and <code>endpos</code></h3>
<p>It appears that the strange "not actually the <em>start</em>-start position" meaning of <code>pos</code> is as old as the parameter itself:</p>
<ul>
<li><p>The <a href="https://docs.python.org/release/1.4/lib/node52.html#2734" rel="noreferrer">Python 1.4 <code>match</code> <em>function</em> docs</a> (25 Oct 1996 --- probably pre-dating the regex object) don't show the <code>pos</code> or <code>endpos</code> parameters at all.</p></li>
<li><p>The <a href="https://docs.python.org/release/1.5/lib/node67.html#4660" rel="noreferrer">Python 1.5 <code>match</code> <em>method</em> docs</a> (17 Feb 1998) introduce both the regular expression object and the <code>pos</code> and <code>endpos</code> parameters.
It states that a <strong><code>^</code> <em>will</em> match at <code>pos</code></strong>, although later revisions suggest this was a typo.
(Speaking of typos:
The <code>^</code> character itself is missing.
It came and went, until finally reappearing for good(?) in <a href="https://docs.python.org/2.1/lib/re-objects.html#l2h-685" rel="noreferrer">Python 2.1</a>.)</p></li>
<li><p>The <a href="https://docs.python.org/release/1.5.1/lib/node68.html#l2h-6357" rel="noreferrer">Python 1.5.1 <code>match</code> method docs</a> (14 Apr 1998) insert the missing "not", reversing the previous docs.</p></li>
<li><p>The <a href="https://docs.python.org/release/1.5.1p1/lib/re-objects.html#l2h-6723" rel="noreferrer">Python 1.5.1p1 <code>match</code> method docs</a> (06 Aug 1998) clarify the unexpected effects of <code>pos</code>.
They match <a href="https://docs.python.org/3/library/re.html#re.regex.search" rel="noreferrer">Python 3.6.1's</a> description of <code>pos</code> word-for-word...
give or take that pesky <code>^</code> typo.</p></li>
</ul>
<p>I suspect the numerous changes to the docs over a couple months of bug-fix releases reflect the docs catching up with reality --- not changes to the design of <code>match</code>
(although I don't have Python 1 lying around to verify that).</p>
<p>The <a href="https://mail.python.org/pipermail/python-dev/" rel="noreferrer"><code>python-dev</code> mailing list archives</a> only go back to 1999, so unless the earlier messages were saved somewhere else, I think answering the "why" question would require guessing who wrote that code, and asking them.</p>
</div>
<div class="post-text" itemprop="text">
<p>According to the <code>search()</code> documentation <a href="https://docs.python.org/2/library/re.html#re.RegexObject.search" rel="noreferrer" title="here">here</a>:</p>
<blockquote>
<p>The optional parameter endpos limits how far the string will be searched; it will be as if the string is endpos characters long, so only the characters from pos to endpos - 1 will be searched for a match.</p>
</blockquote>
<p>So your syntax, <code>a.search("cat", 0, 2)</code> is equivalent to <code>a.search("ca")</code>, which does match the pattern <code>a$</code>.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>This seems wrong to me, or inconsistent at least.</p>
</blockquote>
<p>No, the <code>endpos</code> interpretation is consistent with the rest of Python, it's the starting <code>pos</code> position that's inconsistent as <a href="https://docs.python.org/3/library/re.html" rel="noreferrer">the documentation</a> explains:</p>
<blockquote>
<p>parameter pos gives an index in the string where the search is to
  start; it defaults to 0. This is not completely equivalent to slicing
  the string; the '^' pattern character matches at the real beginning of
  the string</p>
</blockquote>
</div>
<span class="comment-copy">I'm trying to think of a workaround but I'm actually having trouble conceiving of a use case: In what situation would you be in where you needed to provide support for both a "true" end-of-string match <i>and</i> an arbitrary <code>endpos</code> parameter? An example might help with a workaround. I can think of a few different strategies (for example, two separate <code>search</code> calls, or dropping <code>endpos</code> and manually testing the position and length of a match to make sure it's in range, etc.) but they all depend on application requirements.</span>
<span class="comment-copy">@JasonC I'm using a table of priority-sorted regular expressions to recursively find patterns in, and parse, a string. It's sort of a production rule system to translate letter sequences into phoneme sequences. I could, of course, add a 'column' to my table to denote that some rules should only be executed when the substring being parsed is aligned to the start or end of the original query, but I'd prefer if this hint could just be contained to the regex itself. Doesn't look like it can be, however.</span>
<span class="comment-copy">For that, unless a better magic answer pops up, one workaround that can hold you over in the mean time and not e.g. double <code>search</code> operations could be to check if the regex string ends with a <code>$</code> and if so, omit <code>endpos</code>. Of course that only works if your regex's actually end in <code>$</code>, you may have to think of a more appropriate test. Another option could be to store a flag in with your dataset of regex's that indicates whether or not <code>endpos</code> should be included. That would give you flexible support at the expense of having to include that information in your regex list. Just some ideas.</span>
<span class="comment-copy">(And of course the latter only works if you're not mixing "true-end" and <code>endpos</code>-dependent patterns [for lack of better words] in one regex. If you are you'd have to divide up your regexes so that was no longer the case.)</span>
<span class="comment-copy">Oh I see you edited your comment to cover that suggestion. Well you could also "hack" it if you don't mind being dirty: e.g. add some indicator prefix/suffix to your regex strings then strip it before passing it to search. Advantage: No new column. Disadvantage: The raw regexes are no longer valid until you strip your indicators out.</span>
<span class="comment-copy">This is a great answer to the first question (that you can't write a regex which matches the true end of the source string when using endpos &lt; len( string) ), but not so much the second question...edited OP to be yet more specific.</span>
<span class="comment-copy">@bgutt3r:  I added some history of <code>pos</code> and <code>endpos</code>...  Unenlightening, I'm afraid.</span>
<span class="comment-copy">And <code>a.search("cat", 1, 3)</code> is equivalent to <code>a.search("at\0")</code> and sould match <code>"^a"</code>.</span>
<span class="comment-copy">@YSC Where does that '\0' come from? Strings in Python are not zero terminated, zero bytes can be within strings.  So <code>a.match('cat', 1, 3)</code> would match <code>'^at\0'</code> in your example, but it doesn't.</span>
<span class="comment-copy">@BlackJack I know! It was too late to edit it, I've got a misspell too :( Thanks for clarifying it though.</span>
