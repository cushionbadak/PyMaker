<div class="post-text" itemprop="text">
<p>I have the following package (and working directory):</p>
<pre><code>WorkingDirectory--
                 |--MyPackage--
                 |            |--__init__.py
                 |            |--module1.py
                 |            |--module2.py
                 |
                 |--notebook.ipynb
</code></pre>
<p>In <code>__init__.py</code> I have:</p>
<pre><code>import module1
import module2
</code></pre>
<p>If I try to import MyPackage into my notebook:</p>
<pre><code>import MyPackage as mp 
</code></pre>
<p>I will get <code>ModuleNotFoundError: No module named 'module1'</code>. But import works fine if I execute the script outside a notebook: if I create <code>test.py</code> in the same directory and do the same as in the notebook the import would work properly. It will work inside the notebook if I use fully qualified name in <code>__init__.py</code> (<code>import MyPackage.module1</code>).</p>
<p>What's the reason for different import behavior?</p>
<p>I have confirmed the working directory of the notebook is <code>WorkingDirectory</code>.</p>
<p>---Update---------</p>
<p>Exact error is:</p>
<pre><code>C:\Users\Me\Documents\Working Directory\MyPackage\__init__.py in &lt;module&gt;()
---&gt; 17 import module1

ModuleNotFoundError: No module named 'module1'
</code></pre>
<p>My problem differs from the possible duplicate:</p>
<ol>
<li><p>The notebook was able to find the package, but only unable to load the module. This was inferred from substituting <code>module1</code> with <code>MyPackage.module1</code> worked well and suggests it may not be a problem related with <code>PATH</code>.</p></li>
<li><p>I cded into <code>WorkingDirectory</code> and started the server there. The working directory should be the folder containing my package.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>I'm pretty sure this issue is related and the answer there will help you: <a href="https://stackoverflow.com/a/15622021/7458681">https://stackoverflow.com/a/15622021/7458681</a></p>
<p>tl;dr the cwd of the notebook server is always the base path where you started the server, no matter was running <code>import os os.getcwd()</code> says. Use <code>import sys sys.path.append("/path/to/your/module/folder")</code>. </p>
<p>I ran it with some dummy modules in the same structure as you had specified, and before modifying <code>sys.path</code> it wouldn't run and after it would</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason is that your <code>MyPackage/__init__.py</code> is ran from the current working directory. E.g. from <code>WorkingDirectory</code> in this case. It means, that interpreter cannot find the module named <code>module1</code> since it is not located in either current or global packages directory.</p>
<p>There are few workarounds for this. For example, you can temporarily override a current working directory like this</p>
<pre><code>cwd = os.getcwd()
csd = __path__[0]
os.chdir(csd)
</code></pre>
<p>and then, after all a package initialization actions like <code>import module1</code> are done, restore "caller's" working directory with <code>os.chdir(cwd)</code>.</p>
<p>This is quite a bad approach as for me, since, for example, if an exception is raised on initialization actions, a working directory would not be restored. You'll need to play with <code>try..except</code> statements to fix this. </p>
<p>Another approach would be using relative imports. Refer to the <a href="https://docs.python.org/3/tutorial/modules.html#intra-package-references" rel="nofollow noreferrer">documentation</a> for more details.</p>
<p>Here is an example of <code>MyPackage/__init__.py</code> that will work for your example:</p>
<pre><code>from .module1 import *
</code></pre>
<p>But it has few disadvantages that are found rather empirically then through the documentation. For example, you cannot write something like <code>import .module1</code>.</p>
<hr/>
<p><strong>Upd:</strong>
I've found this exception to be raised even if <code>import MyPackage</code> is ran from usual python console. Not from IPython or Jupyter Notebook. So this seems to be not an IPython itself issue.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/15514593/importerror-no-module-named-when-trying-to-run-python-script">"ImportError: No module named" when trying to run Python script</a></span>
<span class="comment-copy">@LouiseDavies I updated my question to address the duplicate issue.</span>
<span class="comment-copy">Do you mean to add <code>WorkingDirecotry</code> to <code>PATH</code> or <code>WorkingDirectory/MyPackage</code>? The latter worked but the former didn't. Is that the expected behavior? And if the <code>PATH</code> is where the problem lies, why does using fully qualified name in <b>init</b>.py solve the problem?</span>
