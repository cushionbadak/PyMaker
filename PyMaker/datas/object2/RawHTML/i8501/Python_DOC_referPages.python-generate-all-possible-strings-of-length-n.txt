<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/7074051/what-is-the-best-way-to-generate-all-possible-three-letter-strings">What is the best way to generate all possible three letter strings?</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<p>I am learning ethical hacking. I have the hash key of a password and the crypt algorithm (sha256/sha512). I want to parse all the strings from a file and to check if the hash of the password matches the hash of each of the string from the file.</p>
<p>The generated String may contain small letters, big letters and numbers.</p>
<p>Any ideas how to generate all the possible Strings of length n which may contain letters and numbers?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a piece of code that uses <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer">[Python 3]: itertools.<strong>product</strong>(<em>*iterables, repeat=1</em>)</a>. <br/>
Note that the number of generated strings is <code>62 ** length</code>, so for testing purposes use <strong>small values</strong> for <em>length</em>:</p>
<pre class="lang-py prettyprint-override"><code>import string
import itertools


def generate_strings(length=3):
    chars = string.ascii_letters + string.digits  # "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    for item in itertools.product(chars, repeat=length):
        yield "".join(item)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/2/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a>:</p>
<pre><code>print([''.join(x) for x in itertools.product('abcABC123', repeat=3)])
['aaa',
 'aab',
 'aac',
 'aaA',
 'aaB',
 'aaC',
 'aa1',
 'aa2',
 'aa3',
 'aba',
...
</code></pre>
<p>Just add the remaining characters you need to the input string. You can use the constants from the <code>strings</code> module for this.</p>
<p>Be aware that this quickly grows. ;)</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a></p>
<pre><code>from itertools import product
from string import ascii_letters, digits

for i in product(ascii_letters + digits, repeat=n):
    print(''.join(i))
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/2/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> (with <code>repeat=n</code>) might come in handy.</span>
<span class="comment-copy">it's not duplicate as there are no digits included</span>
<span class="comment-copy">There's no structural difference. You just need to extend the alphabet.</span>
<span class="comment-copy">A better approach is to use lists of frequent passwords, see  <a href="https://github.com/danielmiessler/SecLists/tree/master/Passwords" rel="nofollow noreferrer">SecLists</a>. .</span>
<span class="comment-copy">For a 8 character passwords there are about 100,000,000,000,000 possibilities. Also see: Infosec <a href="http://resources.infosecinstitute.com/10-popular-password-cracking-tools/" rel="nofollow noreferrer">password-cracking-tools</a>   Advanced Password Recovery <a href="https://hashcat.net/hashcat/" rel="nofollow noreferrer">hashcat</a></span>
<span class="comment-copy">what is count var?</span>
<span class="comment-copy">It's <code>n</code> (generated string's length).</span>
<span class="comment-copy">@PatrickHaugh fixed</span>
<span class="comment-copy">This will only generate strings where each letter is contained at max once.</span>
<span class="comment-copy">permutations won't allow repeated letters though, right? Don't you want <code>itertools.combinations_with_replacement</code>?</span>
<span class="comment-copy">You're right, should be product.</span>
<span class="comment-copy">Wouldn't it raise <code>TypeError</code> when not specifying <code>repeat=n</code>?</span>
