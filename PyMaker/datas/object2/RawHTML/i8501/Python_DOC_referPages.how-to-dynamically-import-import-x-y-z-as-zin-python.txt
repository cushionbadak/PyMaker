<div class="post-text" itemprop="text">
<p>To do</p>
<pre><code>import itertools
</code></pre>
<p>dynamically, I can do the following</p>
<pre><code>import importlib
importlib.import_module('itertools')
</code></pre>
<p>But what should I do to do the following dynamically</p>
<pre><code>import itertools as iters
</code></pre>
<p><strong>Problem Context:</strong></p>
<p>I need to import a different version (0.10) of a module('pika' in my case), installed in a separate directory instead of default version(0.9). </p>
<pre><code>Python 2.7.6 (default, Jun 22 2015, 17:58:13)
[GCC 4.8.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
Welcome to Python !!
&gt;&gt;&gt; import importlib
&gt;&gt;&gt; import pika
&gt;&gt;&gt; pika.__version__
'0.9.14'
&gt;&gt;&gt; import scale.lib.hypervisor.esx65.pika_3_5 as pika35
&gt;&gt;&gt; pika35.__version__
'0.10.0'
&gt;&gt;&gt; importlib.import_module('scale.lib.hypervisor.esx65.pika_3_5')
&lt;module 'scale.lib.hypervisor.esx65.pika_3_5' from 'scale/lib/hypervisor/esx65/pika_3_5/__init__.pyc'&gt;
</code></pre>
<p>As we can see regular imports are working fine. However when importing dynamically, importing relative to the location is causing issues. As per <a href="https://docs.python.org/3/library/importlib.html#importlib.import_module" rel="nofollow noreferrer">importlib.import_module documentaion </a>, following should work but it doesn't.</p>
<pre><code>&gt;&gt;&gt; importlib.import_module('pika_3_5', 'scale.lib.hypervisor.esx65')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.7/importlib/__init__.py", line 37, in import_module
    __import__(name)
ImportError: No module named pika_3_5
</code></pre>
<p>And when trying to import 'pika' from a relative path, which should fail as there is no module pika under the relative path, it is still importing it from default module. </p>
<pre><code>&gt;&gt;&gt; importlib.import_module('pika', 'scale.lib.hypervisor.esx65.pika_3_5')
&lt;module 'pika' from '/usr/local/lib/python2.7/dist-packages/pika/__init__.pyc'&gt;
&gt;&gt;&gt;
</code></pre>
<p>What is it that I am missing ? I mainly want to do the following dynamically.</p>
<pre><code>import scale.lib.hypervisor.esx65.pika_3_5 as pika
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>To do</p>
<pre><code>import itertools
</code></pre>
<p>dynamically, I can do the following</p>
<pre><code>import importlib
importlib.import_module('itertools')
</code></pre>
</blockquote>
<p>No, you do the following:</p>
<pre><code>import importlib
itertools = importlib.import_module('itertools')
</code></pre>
<p>Similarly, to replicate <code>import itertools as iters</code>, you do</p>
<pre><code>import importlib
iters = importlib.import_module('itertools')
</code></pre>
<p><code>importlib.import_module</code> doesn't care what you call the module. <code>as</code> is not and cannot be part of <code>importlib.import_module</code>'s functionality. It just gives you the module object; what you call that object is up to you.</p>
<hr/>
<p>As for your context, you've misunderstood what a relative import is. The second argument to <code>importlib.import_module</code> has nothing to do with <code>from</code> imports, and <code>importlib.import_module('thing', 'whatever')</code> is not supposed to be equivalent to <code>from whatever import thing</code>.</p>
<p>If you want to do</p>
<pre><code>import scale.lib.hypervisor.esx65.pika_3_5 as pika
</code></pre>
<p>that's <code>pika = importlib.import_module('scale.lib.hypervisor.esx65.pika_3_5')</code>. The second argument doesn't enter the picture. You seem to think this is somehow not dynamic, but it's as dynamic as any other importlib call.</p>
</div>
<span class="comment-copy">You've misunderstood what relative imports are. Neither <code>from whatever import thing</code> nor <code>import whatever.thing</code> are relative imports; relative imports are imports like <code>from . import thing</code>, where Python determines what to import based on what module the import occurs in. None of the stuff in importlib about relative imports is talking about your use case.</span>
<span class="comment-copy">OK i got cause of error at least. I missed a '.' and it should be<code>importlib.import_module('.pika_3_5', 'scale.lib.hypervisor.esx65')</code> , .pika_3_5 and not just pika_3_5.</span>
<span class="comment-copy">You seem to conflate loading a module with the name it is bound to in the current namespace. There are <b>two separate steps</b> when importing; loading the module if not yet loaded, and name binding. <code>importlib.import_module()</code> only covers the <i>first part</i>, and returns the loaded module object. How you then assign names in your current namespace from that module object is a separate step you didn't execute. <code>as alternative_name</code> influences the second part, and is outside the scope of the function.</span>
<span class="comment-copy">Btw, why a negative vote on this question ?</span>
