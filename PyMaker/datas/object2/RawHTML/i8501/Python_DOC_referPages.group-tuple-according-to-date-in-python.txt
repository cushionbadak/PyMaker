<div class="post-text" itemprop="text">
<pre><code>[(-0.0625, u'2017-02-14'), (0.21428571428571427, u'2017-02-14'), (0.125, u'2017-02-14')]
</code></pre>
<p>I have list of tuples which looks like this. I'm trying to get the average of the decimals according to each month of the year.</p>
<p>What is the fastest(in terms of speed) pythonic way to do something like this ?</p>
</div>
<div class="post-text" itemprop="text">
<p>I added another month, and here is what you can do without external libraries:</p>
<pre><code>a = [(-0.0625, u'2017-02-14'), (0.21428571428571427, u'2017-02-14'), (0.125, u'2017-02-14'), (-0.1625, u'2017-03-14'), (0.21428571428571427, u'2017-03-14'), (0.125, u'2017-03-14')]

months = list(set(['-'.join(item[1].split('-')[:2]) for item in a]))

grouped_data = [[x[0] for x in a if '-'.join(x[1].split('-')[:2]) == month] for month in months]

result = {month: sum(item)/len(item) for month, item in zip(months, grouped_data)}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Iterators are generally pretty fast. You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a>. This requires the list to be sorted by date (or at least by month), which you can do in-place:</p>
<pre><code>from itertools import groupby
from datetime import date
from calendar import month_name # This is just to pretty-print the month

# This can be a lambda if you prefer
def get_month(x):
    return date.strptime(x[1], "%Y-%m-%d").month

l = [(-0.0625, u'2017-02-14'), (0.21428571428571427, u'2017-02-14'), (0.125, u'2017-02-14')].sort(key=get_month)
for mon, group in groupby(l, get_month)
    group = [x[0] for x in group]
    mean = sum(group) / len(group)
    print('Sum for month {}: {}'.format(month_name[mon], mean))
</code></pre>
<p>There are a number of ways to extract the month, and <code>strptime</code> is probably not the fastest, but it is the safest and most flexible.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use pandas to create a DataFrame, resample to monthly and calculate the mean of each month:</p>
<pre><code>import pandas as pd
l = [(-0.0625, u'2017-02-14'), 
     (0.21428571428571427, u'2017-02-14'), 
     (0.125, u'2017-02-14')]
df = pd.DataFrame(l, columns=['value','date'])
df['date'] = pd.to_datetime(df.date)
df = df.set_index('date')
print df.resample('M').mean()
</code></pre>
</div>
<span class="comment-copy">Fastest in terms of speed or line count?</span>
<span class="comment-copy">Also, that's a list of tuples, not a tuple.</span>
<span class="comment-copy"><code>sorted(list_of_tuples, key=lambda tuple: tuple[1])</code>.</span>
<span class="comment-copy">@MadPhysicist yeah thats what i meant. Fixed it. Fastest in terms of speed</span>
<span class="comment-copy">@erip wont that filter according to the date ? Im trying to filter according to each month of the year</span>
<span class="comment-copy">It successfully aggregates according to the month. But it doesn't distinguish between different years. I was looking for a solution which filters according to different years too</span>
<span class="comment-copy">And now it does :)</span>
