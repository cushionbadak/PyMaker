<div class="post-text" itemprop="text">
<p>I am writing tests with <code>pytest</code>, and I ran into the next problem: I have a test which testing some variable, and then I perform some heavy calculation, and after that I want to perform another test.</p>
<p>The problem is- if the first <code>assert</code> failed, the whole test failed, and the <code>pystest</code> does not perform the second test.
The code:</p>
<pre><code>class TestSomething:
    def tests_method(self, some_variables):
        # Some actions that take a lot of time!
        assert some_var == 1
        # Some actions that take a lot of time!
        assert some_var == 2
</code></pre>
<p>I'm aware that this test method can be separated into 2 methods, but the performance issue here is crucial.</p>
<p>There is a way I can run 2 asserts in one method?</p>
</div>
<div class="post-text" itemprop="text">
<p>Usually, I just let the test fail on the first assertion. However, if you really want to do more than one comparison, compare tuples. Here's a simple example:</p>
<pre><code>def foo(x):
    return x + 1


def bar(y):
    return y - 1


def test_foo():
    # some expensive calculation                                                                                                                                    
    a = foo(10)

    # another expensive calculation                                                                                                                                 
    b = bar(10)

    assert (a, b) == (10, 9)
</code></pre>
<p>When I run that with pytest, it shows me both values:</p>
<pre><code>$ pytest scratch.py
============================= test session starts =============================
platform linux2 -- Python 2.7.12, pytest-3.0.7, py-1.4.33, pluggy-0.4.0
rootdir: /home/don/workspace/scratch, inifile:
collected 1 items

scratch.py F

================================== FAILURES ===================================
__________________________________ test_foo ___________________________________

def test_foo():
# some expensive calculation
a = foo(10)

# another expensive calculation
b = bar(10)

&gt;       assert (a, b) == (10, 9)
E       assert (11, 9) == (10, 9)
E         At index 0 diff: 11 != 10
E         Use -v to get the full diff

scratch.py:16: AssertionError
========================== 1 failed in 0.02 seconds ===========================
</code></pre>
<p>I also tried using <code>and</code> to combine comparisons, but that doesn't work because of <a href="https://docs.python.org/3.6/tutorial/datastructures.html#more-on-conditions" rel="nofollow noreferrer">short circuiting</a>. For example, I tried this assertion:</p>
<pre><code>assert a == 10 and b == 9
</code></pre>
<p>Pytest reported this failure:</p>
<pre><code>&gt;       assert a == 10 and b == 9
E       assert (11 == 10)
</code></pre>
<p>It doesn't report the value of <code>b</code> unless you use the <code>--showlocals</code> option.</p>
</div>
<span class="comment-copy">If the first assert fails, does it matter whether the second assert succeeds or not?</span>
<span class="comment-copy">@SimeonVisser Yes, this is another test I perform and I want to know the result of it too.</span>
<span class="comment-copy">Maybe you need a setup function that takes care of that for both the assertions?</span>
<span class="comment-copy">You can use boolean flags that keep track of all asserts, then you can apply and over all values and assert that result</span>
<span class="comment-copy">Unit tests are not the place for heavy compute.  You are better of finding a smaller test case, or mocking the heavy computations (<a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer">docs.python.org/3/library/unittest.mock.html</a>), e.g. replace the heavy computation with fake, preset object/data.</span>
