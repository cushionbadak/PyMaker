<div class="post-text" itemprop="text">
<p>When is the <code>inner()</code> function actually getting called in this simple code snippet?
I have read about python properties, but I am unsure what magic is it doing here.</p>
<pre><code>&gt;&gt;&gt; class Magic:
...     @property
...     def __repr__(self):
...         def inner():
...             return "It works!"
...         return inner
...
&gt;&gt;&gt; repr(Magic())
'It works!'
</code></pre>
<p>When I remove <code>"@property"</code>, I get an expected error:</p>
<pre><code>TypeError: __repr__ returned non-string (type function)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#repr" rel="nofollow noreferrer"><code>__repr__</code></a> is supposed to give a human-readable representation of the object...</p>
<blockquote>
<p>Return a string containing a printable representation of an object.</p>
<p>For many types, this function makes an attempt to return a string that would yield an object with the same value when passed to eval(), otherwise <strong>the representation is a string enclosed in angle brackets that contains the name of the type of the object together with additional information often including the name and address of the object</strong>. A class can control what this function returns for its instances by defining a __repr__() method.</p>
</blockquote>
<p>You are returning a function.
Try:</p>
<pre><code>&gt;&gt;&gt; class Magic:
...     def __repr__(self):
...         def inner():
...             return "It works!"
...         return inner()
...
&gt;&gt;&gt; repr(Magic())
'It works!'
</code></pre>
<hr/>
<p>It's also worth reading up on the <code>@property</code> decorator, and decorators in general... See <a href="https://stackoverflow.com/a/17330273/1347519">this answer</a>.</p>
<hr/>
<p>To answer youy "<em>When is the inner() function actually getting called?</em>", see below. It's getting called when <code>repr()</code> calls <code>Magic.__repr__()</code> on your behalf.</p>
<pre class="lang-py prettyprint-override"><code>#!/usr/bin/env python3

def my_decorator(info):
    def my_dec_inner(self):
        return "Testing"
    return my_dec_inner

class Magic:
    @my_decorator
    def __repr__(self):
        def inner():
            return "It works!"
        return inner

m = Magic()

# these are nearly synonymous
print(m.__repr__())
print(repr(m))

# this is actually a 'bound function' - my_decorator
print(m.__repr__)
</code></pre>
<pre class="lang-none prettyprint-override"><code>Testing
Testing
&lt;bound method Magic.my_dec_inner of Testing&gt;
</code></pre>
</div>
<span class="comment-copy">Thanks Attie. I get it now.</span>
