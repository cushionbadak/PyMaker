<div class="post-text" itemprop="text">
<p>I am actively learning Python(3.5) and really enjoying it.</p>
<p>I want to get comfortable with string manipulation and thus decided to make a basic crypter/decrypter which shifts a string one forward in the alphabet.</p>
<p><strong><em>Here's the code:</em></strong> </p>
<pre><code>def encrypt(string):
    string = string.replace('z', 'a')
    string = string.replace('y', 'z')
    string = string.replace('x', 'y')
    string = string.replace('w', 'x')
    string = string.replace('v', 'w')
    string = string.replace('u', 'v')
    string = string.replace('t', 'u')
    string = string.replace('s', 't')
    string = string.replace('r', 's')
    string = string.replace('q', 'r')
    string = string.replace('p', 'q')
    string = string.replace('o', 'p')
    string = string.replace('n', 'o')
    string = string.replace('m', 'n')
    string = string.replace('l', 'm')
    string = string.replace('k', 'l')
    string = string.replace('j', 'k')
    string = string.replace('i', 'j')
    string = string.replace('h', 'i')
    string = string.replace('g', 'h')
    string = string.replace('f', 'g')
    string = string.replace('e', 'f')
    string = string.replace('d', 'e')
    string = string.replace('c', 'd')
    string = string.replace('b', 'c')
    string = string.replace('a', 'b')
    return string


def decrypt(string):
    string = string.replace('b', 'a')
    string = string.replace('c', 'b')
    string = string.replace('d', 'c')
    string = string.replace('e', 'd')
    string = string.replace('f', 'e')
    string = string.replace('g', 'f')
    string = string.replace('h', 'g')
    string = string.replace('i', 'h')
    string = string.replace('j', 'i')
    string = string.replace('k', 'j')
    string = string.replace('l', 'k')
    string = string.replace('m', 'l')
    string = string.replace('n', 'm')
    string = string.replace('o', 'n')
    string = string.replace('p', 'o')
    string = string.replace('q', 'p')
    string = string.replace('r', 'q')
    string = string.replace('s', 'r')
    string = string.replace('t', 's')
    string = string.replace('u', 't')
    string = string.replace('v', 'u')
    string = string.replace('w', 'v')
    string = string.replace('x', 'w')
    string = string.replace('y', 'x')
    string = string.replace('z', 'y')
    string = string.replace('a', 'z')
    return string

choice = input('Do you want to decrypt or encrypt a sentence? (d / e)')
question = 'Give me a sentence to %s\n'

if choice == 'd':
    encrypted_str = input(question % 'decrypt')
    decrypted_str = decrypt(encrypted_str)
    print(decrypted_str)

elif choice == 'e':
    plaintext = input(question % 'encrypt')
    encrypted_str = encrypt(plaintext)
    print(encrypted_str)

else:
    print('That is not a valid option')
</code></pre>
<p>I know this is <strong>NOT</strong> how you should do it but I don't know how else.</p>
<p>The problem I am experiencing is that if I try encrypt 'zaaz' it gives me 'bbbb' instead of 'abba'. I know where my fault is ('z' gets replaced with 'a' and 'a' with 'b') and what it is but not how to fix it. Can someone maybe suggest a better way to do this.</p>
<p>P.S. I saw someone use the modulo operator to make the text wrap or string indexing with the alphabet as a string, but I don't know how to implement it here.</p>
<p>Any suggestions?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>strssmall = 'abcdefghijklmnopqrstuvwxyz'
strscaps = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'

shift =  1 # How many characters need to shift
def encrypt(inp):
    data = []
    for i in inp: 
        if i.strip() and i in strssmall: 
            data.append(strssmall[(strssmall.index(i) + shift) % 26])
        elif i.strip() and i in strscaps: 
            data.append(strscaps[(strscaps.index(i) + shift) % 26])
        else:
            data.append(i) 
    output = ''.join(data)
    return output
def decrypt(inp):
    data = []
    for i in inp: 
        if i.strip() and i in strssmall: 
            data.append(strssmall[(strssmall.index(i) - shift) % 26])
        elif i.strip() and i in strscaps: 
            data.append(strscaps[(strscaps.index(i) - shift) % 26])
        else:
            data.append(i) 
    output = ''.join(data)
    return output

choice = input('Do you want to decrypt or encrypt a sentence? (d / e) :')
question = 'Give me a sentence to %s\n'

if choice == 'd':
    encrypted_str = input(question % 'decrypt')
    decrypted_str = decrypt(encrypted_str)
    print(decrypted_str)

elif choice == 'e':
    plaintext = input(question % 'encrypt')
    encrypted_str = encrypt(plaintext)
    print(encrypted_str)

else:
    print('That is not a valid option')
</code></pre>
<p>Also, you can visit <a href="https://stackoverflow.com/questions/14424500/text-shift-function-in-python">link</a></p>
</div>
<div class="post-text" itemprop="text">
<p>As a suggestion,
take a look at the chr / ord function of python (<a href="https://docs.python.org/2/library/functions.html#chr" rel="nofollow noreferrer">https://docs.python.org/2/library/functions.html#chr</a>, <a href="https://docs.python.org/2/library/functions.html#ord" rel="nofollow noreferrer">https://docs.python.org/2/library/functions.html#ord</a>), which basically takes a single char and converts it to a number, where you can add a constant and convert that back to a string using ord.</p>
<p>Then you could loop through yourt code, using a for loop or a list comprehension.</p>
<p>I show no code, since you want to learn, but I could easily provide some help :)</p>
</div>
<div class="post-text" itemprop="text">
<p>a simple and easy to understand way of doing this is by using <a href="https://docs.python.org/3/library/stdtypes.html" rel="nofollow noreferrer">dictionaries</a> to map the old character to the new one, and them transform each character individually before <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer">joining</a> them together, like this for example: </p>
<pre><code>encrypt_table = {'a': 'b', 'b': 'c', 'c': 'd', 'd': 'e', 'e': 'f', 'f': 'g',
                 'g': 'h', 'h': 'i', 'i': 'j', 'j': 'k', 'k': 'l', 'l': 'm',
                 'm': 'n', 'n': 'o', 'o': 'p', 'p': 'q', 'q': 'r', 'r': 's',
                 's': 't', 't': 'u', 'u': 'v', 'v': 'w', 'w': 'x', 'x': 'y',
                 'y': 'z', 'z': 'a'}
encrypt_table.update( [(k.upper(),v.upper()) for k,v in encrypt_table.items()] ) # to include upper case letters

decrypt_table = {v:k for k,v in encrypt_table.items() } # is just the inverse of the other table

def encrypt(string):
    return "".join( encrypt_table.get(c,c) for c in string )

def decrypt_table(string):
    return "".join( decrypt_table.get(c,c) for c in string )
</code></pre>
<p>with that the cipher function are as simple as show above, using the <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow noreferrer">get</a> method of dictionaries to transform the character or leave it unchanged if is not the the transformation table</p>
<p>now you get the right result</p>
<pre><code>&gt;&gt;&gt; encrypt("zaaz")
'abba'
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">Something you might find helpful is that the <code>str</code> type in python is iterable - you can write code like <code>for character in myStr</code> and look at each character individually... for fixing the code you currently have and not completely starting over you might want to think about that!</span>
<span class="comment-copy">I have corrected it but differs slightly from your code(or the code you copied). Firstly I left out the <code>i.strip and</code> . Secondly I stored the processed characters in a string, not a list. Is/will there be any issues with these?</span>
<span class="comment-copy">I don't see that make a difference, but validate the result you are getting. i.strip() is to handle the new line and space characters.</span>
