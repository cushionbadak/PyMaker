<div class="post-text" itemprop="text">
<p>I have the following list of tuples: <code>[('a', 1), ('a', 1), ('b', 1), ('c',1), ('a', 1), ('c', 1)]</code></p>
<p>I would like to know if I can utilize python's <code>reduce</code> function to aggregate them and produce the following output : <code>[('a', 3), ('b', 1), ('c', 2)]</code></p>
<p>Or if there are other ways, I would like to know as well (loop is fine)</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems difficult to achieve using <code>reduce</code>, because if both tuples that you "reduce" don't bear the same letter, you cannot compute the result. How to reduce <code>('a',1)</code> and <code>('b',1)</code> to some viable result?</p>
<p>Best I could do was <code>l = functools.reduce(lambda x,y : (x[0],x[1]+y[1]) if x[0]==y[0] else x+y,sorted(l))</code></p>
<p>it got me <code>('a', 3, 'b', 1, 'c', 1, 'c', 1)</code>. So it kind of worked for the first element, but would need more than one pass to do the other ones (recreating tuples and make another similar <code>reduce</code>, well, not very efficient to say the least!).</p>
<p>Anyway, here are 2 working ways of doing it</p>
<p>First, using <code>collections.Counter</code> counting elements of the same kind:</p>
<pre><code>l = [('a', 1), ('a', 1), ('b', 1), ('c',1), ('a', 1), ('c', 1)]

import collections

c = collections.Counter()
for a,i in l:
    c[a] += i
</code></pre>
<p>We cannot use listcomp because each element has a weight (even if here it is 1)</p>
<p>Result: a dictionary: <code>Counter({'a': 3, 'c': 2, 'b': 1})</code></p>
<p>Second option: use <code>itertools.groupby</code> on the sorted list, grouping by name/letter, and performing the sum on the integers bearing the same letter:</p>
<pre><code>print ([(k,sum(e for _,e in v)) for k,v in itertools.groupby(sorted(l),key=lambda x : x[0])])
</code></pre>
<p>result:</p>
<pre><code>[('a', 3), ('b', 1), ('c', 2)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The alternative approach using <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer">defaultdict</a> subclass and <a href="https://docs.python.org/3/library/functions.html?highlight=sum#sum" rel="nofollow noreferrer">sum</a> function:</p>
<pre><code>import collections

l = [('a', 1), ('a', 1), ('b', 1), ('c',1), ('a', 1), ('c', 1)]
d = collections.defaultdict(list)
for t in l:
    d[t[0]].append(t[1])

result = [(k,sum(v)) for k,v in d.items()]
print(result)
</code></pre>
<p>The output:</p>
<pre><code>[('b', 1), ('a', 3), ('c', 2)]
</code></pre>
</div>
<span class="comment-copy">Unless you're doing it concurrently, the best way is to use a HashMap with &lt;tuple[0], frequency?</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/31430384/how-to-sum-values-of-tuples-that-have-same-name-in-python">How to sum values of tuples that have same name in Python</a></span>
