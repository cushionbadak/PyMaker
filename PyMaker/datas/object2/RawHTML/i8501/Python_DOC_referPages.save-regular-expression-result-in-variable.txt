<div class="post-text" itemprop="text">
<p>I would like to split a string into separated, single strings and save each in a new variable. That's the use case:</p>
<ul>
<li><p>Direct user input with <code>BC1 = input("BC1: ")</code> in the following format: <code>'17899792270101010000000000', '17899792270102010000000000', '17899792270103010000000000'</code></p></li>
<li><p>Now I want each number - and just the number in a single variable:</p>
<pre><code>a = 17899792270101010000000000
b = 17899792270102010000000000
c = 17899792270103010000000000
</code></pre></li>
</ul>
<p>How to realise that in python 3?</p>
<p>Sadly I'm not able to create a suitable regular expression for it and neither a way to save string parts in separate variables. I hope someone of you could help me. 
Thanks already in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>Look into <a href="https://docs.python.org/2/library/re.html#re.findall" rel="nofollow noreferrer">re</a></p>
<pre><code>import re

input = "'17899792270101010000000000', '17899792270102010000000000', '17899792270103010000000000'"

 matches = re.findall('(\d+)', input)
 # matches = ['17899792270101010000000000', '17899792270102010000000000', '17899792270103010000000000']

 a, b, c = re.findall('(\d+)', input)
 # a = '17899792270101010000000000'
 # b = '17899792270102010000000000'
 # c = '17899792270103010000000000'
</code></pre>
<p>edit: 
If you want <code>int</code> not <code>str</code>, you can <code>map(int, matches)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>If I understand you correctly, this should do the trick</p>
<pre><code>BC1 = input("BC1: ")
numbers = [int(x.strip(' \'')) for x in BC1.split(',')]
</code></pre>
<p>And now your desired numbers are</p>
<pre><code>numbers[0] == a # 17899792270101010000000000
numbers[1] == b # 17899792270102010000000000
numbers[2] == c # 17899792270103010000000000
</code></pre>
<ul>
<li><p>The <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>split</code></a> function creates an array of your numbers, but includes the spaces and the quotes.</p>
<p><code>["'17899792270101010000000000'", " '17899792270102010000000000'", " '17899792270103010000000000'"]</code></p></li>
<li><p>The <a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow noreferrer"><code>strip</code></a> function gets rid of the spaces and the quotes</p>
<p><code>['17899792270101010000000000', '17899792270102010000000000', '17899792270103010000000000']</code></p></li>
<li><p>The <a href="https://docs.python.org/3/library/functions.html#int" rel="nofollow noreferrer"><code>int</code></a> function parses the strings into an integer (number)</p>
<p><code>[17899792270101010000000000, 17899792270102010000000000, 17899792270103010000000000]</code></p></li>
</ul>
<p>However, this requires the user to follow the format you specified. <a href="https://stackoverflow.com/a/43095545/5272567">Foryah's answer</a> is more robust to different input formats.</p>
</div>
<div class="post-text" itemprop="text">
<p>if it's already "format" at the input :</p>
<pre><code>&gt;&gt;&gt; BC1 = input("BC1: ")
BC1: '17899792270101010000000000', '17899792270102010000000000', '17899792270103010000000000'
&gt;&gt;&gt; a=int(BC1[0])
&gt;&gt;&gt; b=int(BC1[1])
&gt;&gt;&gt; c=int(BC1[2])
&gt;&gt;&gt; a
17899792270101010000000000
&gt;&gt;&gt; b
17899792270102010000000000
&gt;&gt;&gt; c
17899792270103010000000000
</code></pre>
</div>
<span class="comment-copy">Would you say this is a csv format? If it is, why not use the csv module?</span>
<span class="comment-copy">Look at re.match - it returns matched parts of your regexp, specified by putting ( ) around the part.</span>
<span class="comment-copy">Someone will probably come along and answer this anyway, but for future reference, you can increase your chances of getting quality help by showing that you've put some effort into it yourself. Show what code you've tried, and describe how the output differs from what you're expecting.</span>
<span class="comment-copy">People are volunteering their time here, and you'll find that the amount of time they're willing to put into helping you is correlated to the amount of work you've shown you've put into it yourself. Plus, if you show your failed attempt, someone can explain <i>why</i> it's wrong and how to fix it (or whether it's better to go in a completely different direction).</span>
<span class="comment-copy">And for what it's worth, the problem as presented doesn't require <code>re</code> or <code>csv</code> or any other module. (Hint: <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>split()</code></a>, <a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow noreferrer"><code>strip()</code></a>, <a href="https://docs.python.org/3/library/functions.html#int" rel="nofollow noreferrer"><code>int()</code></a>)</span>
<span class="comment-copy">Thanks a lot! I will adjust that solution for my needs.</span>
<span class="comment-copy">Thanks a lot for your effort, this suits exactly to the case I mentioned.  I also will check Foryah's answer.</span>
