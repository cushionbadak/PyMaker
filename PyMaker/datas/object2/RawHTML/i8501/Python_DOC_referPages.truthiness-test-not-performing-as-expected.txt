<div class="post-text" itemprop="text">
<p>I have a simple function that tests an item in a tuple to see if it is truthy or not. For some reason all tests come back True (<code>...if connection:...</code>), even though the value being tested is either a 1 (assumed True) or 0 (assumed false). </p>
<p>I tested to see if 1 == True (output: True), 1 == False (False), connection is True (False) just to try to understand what is going on. </p>
<p>User input: <code>players = [('a', 1), ('b', 0)]</code></p>
<p>Function:</p>
<pre><code>def validplayers(players):
    for player, connection in players:
        if connection:
            player
        print player, connection, 1 == True, 1 == False, connection is True
</code></pre>
<p>Output:</p>
<pre><code>a 1 True False False
b 0 True False False
</code></pre>
<p>The <code>connection</code> var is passing a 1 or 0 which <code>type(connection)</code> defines as an int. </p>
</div>
<div class="post-text" itemprop="text">
<p>Your error is looking at <code>connection is True</code>. This is <em>always going to be <code>False</code></em>. <code>is</code> <a href="https://docs.python.org/3/reference/expressions.html#is-not" rel="nofollow noreferrer">tests for <em>identity</em></a>, two expressions resulting in a reference to the <em>same object in memory</em>.</p>
<p>If you want to print the truth value of an object, use the <a href="https://docs.python.org/3/library/functions.html#bool" rel="nofollow noreferrer"><code>bool()</code> function</a>:</p>
<pre><code>&gt;&gt;&gt; bool(1)
True
&gt;&gt;&gt; bool(0)
False
</code></pre>
<p>That <code>1 == True</code> works at all is because in Python, the <code>bool</code> type is a subclass of <code>int</code>:</p>
<pre><code>&gt;&gt;&gt; issubclass(bool, int)
True
</code></pre>
<p>The integer value of <code>True</code> is 1, and <code>False</code> has an integer value of <code>0</code>. Testing for equality won't work for other integer values:</p>
<pre><code>&gt;&gt;&gt; 1 == True
True
&gt;&gt;&gt; 2 == True
False
&gt;&gt;&gt; bool(2)
True
</code></pre>
<p>Note that your <code>if</code> test is otherwise meaningless; the only thing that is executed or not is the line <code>player</code>, which is a no-op expression that just returns the reference to <code>player</code>, but since there is nothing else there the reference is unused.</p>
<p>If you wanted the <code>print</code> statement to be executed only when <code>if</code> is true, you need to indent it to be further to the right from <code>if</code> and make it part of the nested block:</p>
<pre><code>def validplayers(players):
    for player, connection in players:
        if connection:
            print player, connection, bool(connection)
</code></pre>
<p>This then only prints something for player <code>a</code>:</p>
<pre><code>&gt;&gt;&gt; def validplayers(players):
...     for player, connection in players:
...         if connection:
...             print player, connection, bool(connection)
...
&gt;&gt;&gt; validplayers([('a', 1), ('b', 0)])
a 1 True
</code></pre>
</div>
<span class="comment-copy">You are not <i>doing</i> anything in the <code>if</code> statement. You just reference <code>player</code>, but nothing else. That expression achieves nothing.</span>
<span class="comment-copy">I'm a student learning python. Shouldn't the function show only those players who have a 1 (True) connection?</span>
<span class="comment-copy">Why should it? The <code>print</code> statement is not part of the <code>if</code> test. It is <b>always</b> executed.</span>
<span class="comment-copy">If you want that to happen, the <code>print</code> is positioned at the wrong indentation.</span>
<span class="comment-copy">Are questions from students learning the language not accepted? Not sure why or what downvoting a question means. Is it a stupid question or does this mean that its too easy for stack overflow?</span>
<span class="comment-copy">Thanks for this explanation! This solved the problem. I want to eventually use this function in my module to pass valid players into another function to form 'teams'. I might have more silly questions coming up.</span>
