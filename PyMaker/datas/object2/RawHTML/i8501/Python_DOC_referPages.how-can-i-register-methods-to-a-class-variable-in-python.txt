<div class="post-text" itemprop="text">
<p>I am writing a program to transform a collection of XML documents into HTML. The documents require similar but not identical transformations, so I am hoping to abstract most of the details into a generic <code>BaseParser</code> class and then write an single subclass for each document that encapsulates the document-specific transformations. I am using the Python standard library <code>xml.etree.ElementTree</code> package for event-based parsing.</p>
<p>I would like to be able to write code like this, where the logic of the function is bundled together with when it should be called.</p>
<pre><code>class CustomParser(BaseParser):
    @on_tag('word', {'lang':'en'})
    def found_en_word(self, tag, attrs):
        # do something
</code></pre>
<p>For this to work, the decorator needs register the <code>found_en_word</code> function in a class variable (or an instance variable, though it would be redundant for each instance to have its own copy), so that the control flow can be separated in the <code>BaseParser</code> class.</p>
<p>My current solution, shown below, is to use a metaclass to create a <code>callbacks</code> dictionary on the class.</p>
<pre><code>class Meta(type):
    def __new__(cls, clsname, bases, dct):
        callbacks = {}
        for key, value in dct.items():
            if hasattr(value, '_on_tag'):
                callbacks[value._on_tag] = value
        ret = type(clsname, bases, dct)
        ret.callbacks = callbacks
        return ret

def on_tag(tag, attrs=None):
    def decorator(f):
        f._on_tag = (tag, attrs)
        return f
    return decorator

class BaseParser(metaclass=Meta):
    ...
</code></pre>
<p>Unfortunately it doesn't look like the metaclass is inherited the way I had hoped: it seems that the metaclass is used to construct a modified <code>BaseParser</code> class, from which <code>CustomParser</code> just inherits normally.</p>
<p>Can this construction be implemented, with or without metaclasses, in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your metaclass isn't constructing the class correctly.  As described in <a href="https://docs.python.org/3/reference/datamodel.html#metaclass-example" rel="nofollow noreferrer">the docs</a>, you actually need to call <code>type.__new__(Meta, clsname, bases, dct)</code>.  By just calling <code>type(clsname, bases, dct)</code>, you are constructing an ordinary class that is not an instance of your custom metaclass.</p>
<p>Once you fix that, you'll have another problem, which is that you're trying to use <code>_on_tag</code> as a dictionary key, but <code>_on_tag</code> contains a dictionary, and dictionaries aren't hashable.  That's somewhat tangential to your main question, but you'll have to figure out some way to handle it (perhaps by making the user do <code>@on_tag('word', ('lang', 'en'))</code> instead of <code>@on_tag('word', {'lang': 'en'})</code>).</p>
</div>
<span class="comment-copy">Good catch, that addressed both my original problem and a problem I didn't know I had! I'll have the decorator convert the dictionary to a tuple so I can retain the nicer calling syntax.</span>
