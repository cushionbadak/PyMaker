<div class="post-text" itemprop="text">
<p>I got two lists <code>list1</code> and <code>list2</code>, I want to get all the indexes of the of  the element of <code>list1</code> that are also in 2nd one </p>
<pre><code>    for i in list1:
       print(i) ## this works fine 
Test_features_index.append(list1.index(i for i in list2))# here not that well 
</code></pre>
<p>running this doens't work here is what I get : </p>
<pre><code>&lt;ipython-input-35-8d7ff70a8be0&gt; in &lt;module&gt;()
----&gt; 1 Test_features_index.append(list1.index(i for i in list2))

ValueError: &lt;generator object &lt;genexpr&gt; at 0x0000021710BBA7D8&gt; is not in list
</code></pre>
<p>Any idea how to do that? I wanted to avoid a for loop, but not sure if it's possible </p>
</div>
<div class="post-text" itemprop="text">
<p>You are trying to find the index of a generator expression which is supposedly in your list. Besides, using <code>list.index</code> repeatedly is not very performant since you'll be running the entire length of the list (worst case) every time.</p>
<p>You can instead use a <em>list comprehension</em> with <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a>:</p>
<pre><code>set2 = set(list2)
Test_features_index = [i for i, x in enumerate(list1) if x in set2]
</code></pre>
<p>Using a set for the lookup of shared items ensures 0(1) lookup time as opposed to O(n) for lists.</p>
</div>
<span class="comment-copy">You could do it with a list comprehension e.g. <code>Test_features_index.append([list1.index(i) for i in list2 if i in list1])</code> (assuming that you actually wanted to append the result to another list called <code>Test_features_index</code>). Be aware that index returns only the first index if an item occurs multiple times. <code>index</code> throws an exception if the item can't be found, requiring <code>if i in list1</code> check.</span>
<span class="comment-copy">thanks for the help I don't get why  you're using set2 extra it did work without ;-)</span>
<span class="comment-copy">@Engine It's a performance hack. Set membership lookup is faster than that for lists.</span>
