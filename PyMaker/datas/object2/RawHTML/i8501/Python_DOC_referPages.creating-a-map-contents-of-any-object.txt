<div class="post-text" itemprop="text">
<p>In Python 3.6. What I'm trying to do is create a function that can accept any object and then generate a tree like contents. </p>
<p>Similar to a book:</p>
<pre><code>1. Object
 1.1 member: integer
 1.2 member: list
   2.1 list: element 1
   2.2 list: element 2
 1.3 member: string
</code></pre>
<p>My purpose is to use the numbers as a key for a technical readout, the number could also stand in for a more understandable ID number than id() generates. Because the objects I want to deal with are all types, I'd like the function to be recursive. Here is what I have so far: </p>
<pre><code>def contents(a, n = 0, lim = 5, prefix=""):
    index = 1
    text = ""
    j = None
    if n &lt; lim:
        try:
            for i in a.__dict__:
                text = text + "\n" + ("\t" *(n)) + prefix + str(index) + ", " + str(i) + ": " + contents(a.__dict__[i], n = n + 1, prefix=str(n)+".") + ""
                index += 1
        except:
            try:
                for i, j in a.items():
                    text = text + "\n" + ("\t"*(n)) + prefix + str(index) + ", " + str(i) + ": " + contents(i, n = n + 1, prefix=str(n)+".") + ""
                    index += 1
                except:
                    if isinstance(a, str):
                        text = text + "\n" + ("\t"*(n)) + prefix  + str(index) + ", " + str(a) + " "
                    else:
                        try:
                            for i in a:
                                text = text + "\n" + ("\t"*(n)) + prefix  + str(index) + ", " + str(i) + contents(i, n = n + 1, prefix=str(n)+".") + " "
                                index += 1

                    except:
                        text = text + "\n" + ("\t"*(n)) + prefix  + str(index) + ", " + str(a) + " "

    else:
        text = text + "limit. \n"
    return text 
</code></pre>
<p>a is the object, n is the current number of recursion, lim is the recursion limit, prefix has to do with the object ID displayed.</p>
<p>Here's the testing object</p>
<pre><code>class Aclass:

    def __init__(self):
        self.a = [12, 24]
        self.b = 5

a = [Aclass(), 1, "2", 3, 4, Aclass(), {"c":"d","e":"f"}]
</code></pre>
<p>The problem I'm running into has to do with strange revursive behavior with lists, I already made an exception for strings, because the string would register as an iterable made up of iterables, which would recurse indefinitely if I hadn't put in a limit. Now simple lists of numbers like [1, 2, 3, 4] will often list the number twice as if it breaks down into a one item list [1] and then reports on the number inside: 1.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should have a look at the <a href="https://docs.python.org/3/library/pprint.html?highlight=pprint#module-pprint" rel="nofollow noreferrer"><code>pprint</code></a> module, which is part of the standard distribution. It solves this problem already, and so might serve as a basis for your code. (I can easily see, for instance, adding numbers by subclassing the <code>PrettyPrinter</code> class.)</p>
<p>This code:</p>
<pre><code>class Aclass:
    def __init__(self):
        self.a = [12, 24]
        self.b = 5

a = [Aclass(), 1, "2", 3, 4, Aclass(), {"c":"d","e":"f"}]

import pprint
s = pprint.pformat(a, indent=4)
print(s)
</code></pre>
<p>Produces this output:</p>
<pre><code>[   &lt;__main__.Aclass object at 0x1060fb160&gt;,
    1,
    '2',
    3,
    4,
    &lt;__main__.Aclass object at 0x1060fb198&gt;,
    {'c': 'd', 'e': 'f'}]
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/reprlib.html" rel="nofollow noreferrer"><code>reprlib</code></a> and especially its <a href="https://docs.python.org/3/library/reprlib.html#reprlib.recursive_repr" rel="nofollow noreferrer"><code>@recursive_repr</code> decorator</a> exist to solve problems with self-recursive data structures.</span>
<span class="comment-copy">Although that doesn't exactly solve my problem, because I'm dealing with builtin data types that can't be simply overloaded. However the <code>reprlib.Repr</code> object might be a useful example to follow, for instance I can overload the <code>repr_instance</code> method and almost get the functionality I want. Thanks!</span>
<span class="comment-copy">Thanks, I will have to take a closer look at the pprint module.</span>
