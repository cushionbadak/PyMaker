<div class="post-text" itemprop="text">
<p><strong>Sample DF:</strong></p>
<pre><code>ID   Name        Price     Condition   Fit_Test
1    Apple         10      Good        Super_Fit
2    Apple         10      OK          Super_Fit
3    Apple         10      Bad         Super_Fit
4    Orange        12      Good        Not_Fit
5    Orange        12      OK          Not_Fit
6    Banana        15      OK          Medium_Fit
7    Banana        15      Bad         Medium_Fit
8    Pineapple     25      OK          Medium_Fit
9    Pineapple     25      OK          Medium_Fit
10   Cherry        30      Bad         Medium_Fit
</code></pre>
<p><strong>Expected DF:</strong></p>
<pre><code>ID   Name        Price     Condition   Fit_Test
1    Apple         10      Good        Super_Fit
2    Apple         10      OK          Super_Fit
3    Apple         10      Bad         Super_Fit

4    Orange        12      Good        Not_Fit

6    Banana        15      OK          Medium_Fit

8    Pineapple     25      OK          Medium_Fit
9    Pineapple     25      OK          Medium_Fit
10   Cherry        30      Bad         Medium_Fit
</code></pre>
<p><strong>Problem Statement:</strong></p>
<p>I want to <code>group-by</code> by <code>Name</code> and <code>Price</code> and then filter based on <code>Condition</code>.</p>
<ol>
<li><p>If within a <code>Name</code> and <code>Price</code> All 3 conditions of Good, Bad and OK exist then Keep only Good one and Fit_Test is not <code>Super_Fit</code></p></li>
<li><p>If within a Name and Price conditions of Good and OK exist then Keep only Good one (Id 4,5 is only ID 4 in expected) and Fit_Test is not <code>Super_Fit</code></p></li>
<li><p>If within a <code>Name</code> and <code>Price</code> conditions of Bad and OK exist then Keep only OK one <strong>(Id 6,7 is only ID 6 in expected)</strong> and Fit_Test is not <code>Super_Fit</code></p></li>
<li><p>If within a <code>Name</code> and <code>Price</code> conditions of OK and OK exist, Good and Good Exist or just Bad exist then don't do anything then Keep only OK one <strong>(Id 8,9,10 is ID 8,9,10 in expected)</strong> and Fit_Test is not <code>Super_Fit</code></p></li>
</ol>
<p><strong>Update on Answer(s)</strong></p>
<ol>
<li>The 1st answer and edit for testing works for all the <code>df</code> where you don't have a condition of <code>Fit_Test</code> column. In this answer the <strong>Expected DF</strong> will not have rows 2 &amp; 3 as also shown in the answer</li>
<li>The <strong>Edit for Update</strong> answer works when you need to take another columns which is <code>Fit_Test</code> and should only work when the value is not <code>Super_Fit</code>.</li>
</ol>
<p>In both the solutions the Filtering of rows based on <code>Condition</code> column and group by of 2 columns is same. </p>
<p><strong>I found things with filter + group by on the numeric columns but none on the String columns.</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>Idea is create <code>set</code>s for comparing:</p>
<pre><code>a = df.join(df.groupby(['Price','Name'])['Condition'].apply(set).rename('m'),
             on=['Price','Name'])['m']
print (a)
0    {Bad, Good, OK}
1    {Bad, Good, OK}
2    {Bad, Good, OK}
3         {Good, OK}
4         {Good, OK}
5          {Bad, OK}
6          {Bad, OK}
7               {OK}
8               {OK}
9              {Bad}
Name: m, dtype: object
</code></pre>
<hr/>
<pre><code>m1 = (a == set({'Bad', 'Good', 'OK'})) | (a == set({'Good', 'OK'}))
m2 = a == set({'Bad', 'OK'})
#check if unique value - length of set is 1
m3 = a.str.len() == 1
m4 = df['Condition'] == 'Good'
m5 = df['Condition'] == 'OK'

df = df[(m1 &amp; m4) | (m2 &amp; m5) | m3]
print (df)
   ID       Name  Price Condition
0   1      Apple     10      Good
3   4     Orange     12      Good
5   6     Banana     15        OK
7   8  Pineapple     25        OK
8   9  Pineapple     25        OK
9  10     Cherry     30       Bad
</code></pre>
<p>EDIT for testing:</p>
<p>For testing is possible use <code>assign</code>:</p>
<pre><code>print (df.assign(sets=a, m1 = m1, m2=m2, m3=m3, m4=m4, m5=m5, m=m))
   ID       Name  Price Condition             sets     m1     m2     m3  \
0   1      Apple     10      Good  {Bad, Good, OK}   True  False  False   
1   2      Apple     10        OK  {Bad, Good, OK}   True  False  False   
2   3      Apple     10       Bad  {Bad, Good, OK}   True  False  False   
3   4     Orange     12      Good       {Good, OK}   True  False  False   
4   5     Orange     12        OK       {Good, OK}   True  False  False   
5   6     Banana     15        OK        {Bad, OK}  False   True  False   
6   7     Banana     15       Bad        {Bad, OK}  False   True  False   
7   8  Pineapple     25        OK             {OK}  False  False   True   
8   9  Pineapple     25        OK             {OK}  False  False   True   
9  10     Cherry     30       Bad            {Bad}  False  False   True   

      m4     m5      m  
0   True  False   True  
1  False   True  False  
2  False  False  False  
3   True  False   True  
4  False   True  False  
5  False   True   True  
6  False  False  False  
7  False   True   True  
8  False   True   True  
9  False  False   True  
</code></pre>
<p>EDIT for update:</p>
<p>For new condition use:</p>
<pre><code>    m6 = df['Fit_Test'] == 'Super_Fit'
    df = df[((m1 &amp; m4) | (m2 &amp; m5) | m3) | m6]
    print (df)
       ID       Name  Price Condition    Fit_Test
    0   1      Apple     10      Good   Super_Fit
    1   2      Apple     10        OK   Super_Fit
    2   3      Apple     10       Bad   Super_Fit
    3   4     Orange     12      Good     Not_Fit
    5   6     Banana     15        OK  Medium_Fit
    7   8  Pineapple     25        OK  Medium_Fit
    8   9  Pineapple     25        OK  Medium_Fit
    9  10     Cherry     30       Bad  Medium_Fit
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't have too many conditions (like here it is only 3), the following is an easy workaround:</p>
<pre><code>df.loc[df["Condition"] == 'Good',"Condition"] = 3
df.loc[df["Condition"] == 'OK',"Condition"] = 2
df.loc[df["Condition"] == 'Bad',"Condition"] = 1

df = df.groupby(['Name','Price']).max()

df.loc[df["Condition"] == 3] = "Good"
df.loc[df["Condition"] == 2] = "OK"
df.loc[df["Condition"] == 1] = "Bad"
</code></pre>
</div>
<span class="comment-copy">Will it also take care of the <code>Good Good</code> condition</span>
<span class="comment-copy">@RahulAgarwal - yes, because set create <code>{Good}</code> and <code>m3</code> is <code>True</code></span>
<span class="comment-copy">I am loosing rows where I have just one <code>OK</code>. I can see <code>a</code> is correct but in <code>df</code> I see those rows are not there.</span>
<span class="comment-copy">@RahulAgarwal - I have idea, edited answer.</span>
<span class="comment-copy">@RahulAgarwal - Thank you.</span>
<span class="comment-copy">It is deleting rows where I have <code>Good Good</code> condition ?</span>
<span class="comment-copy">It will keep one good.</span>
<span class="comment-copy">Yes, if all are Good and OK then I want to keep all of them. Point 4 in my question!!</span>
<span class="comment-copy">Ok.  First of all, no reason for getting upset.</span>
<span class="comment-copy">If it seems like this, I apologize. I am not upset or anything like that. Above all, you are helping me!!</span>
