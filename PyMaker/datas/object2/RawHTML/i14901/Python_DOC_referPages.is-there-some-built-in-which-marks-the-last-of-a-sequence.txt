<div class="post-text" itemprop="text">
<p>I need something like this:</p>
<pre><code>&gt;&gt;&gt; for i in mark_last([1, 2, 3]):
...  print(i)
... 
(1, False)
(2, False)
(3, True)
</code></pre>
<p>I implemented it this way, but...</p>
<pre><code>def mark_last(li):
    items = iter(items)
    try:
        prev = next(items)
    except StopIteration:
        return
    for item in items:
        yield prev, False
        prev = item
    yield prev, True
</code></pre>
<p>Is there a built-in for this? Or a shorter way to do it? Maybe something combined with <code>itertools.groupby()</code>? – Tricks with <code>len()</code> are not accepted, because they don’t work with generators.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Is there some built-in which marks the last of a sequence?</p>
</blockquote>
<p>No, there isn't.</p>
<p>Your function is fine except for two points:</p>
<ol>
<li>How does it handle an empty sequence?</li>
<li>Instead of <code>raise StopIteration</code> you should just <code>break</code>; eventually a <code>raise StopIteration</code> will result in a <code>RunTimeError</code> (<a href="https://www.python.org/dev/peps/pep-0479/" rel="nofollow">PEP 479</a>).</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>You could define <code>mark_last</code> in terms of <code>iwindow</code>, which returns a sliding
window over an iterable.</p>
<pre><code>import itertools as IT

def iwindow(iterable, n=2):
    """
    Returns a sliding window (of width n) over data from the sequence.
    s -&gt; (s0,s1,...s[n-1]), (s1,s2,...,sn), ...
    """
    iterables = IT.tee(iterable, n)
    iterables = (IT.islice(it, pos, None) for pos, it in enumerate(iterables))
    for result in IT.izip(*iterables):
        yield result

def mark_last(iterable):
    for i, j in iwindow(iterable):
        yield i, False
    yield j, True

for i in mark_last([1, 2, 3]):
    print(i)
</code></pre>
<p>yields</p>
<pre><code>(1, False)
(2, False)
(3, True)
</code></pre>
<p>Note that you might be able to solve your problem with <code>iwindow</code> directly, by-passing the need for <code>mark_last</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>A neater version of what you gave would be</p>
<pre><code>def mark_last(items):
    items = iter(items)

    prev = next(items)
    for item in items:
        yield prev, False
        prev = item

    yield item, True
</code></pre>
<p>Note that using a bare <code>next</code> to raise <code>StopIteration</code> is deprecated, though, so you might want to use an explicit <code>try...except</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3+</p>
<p>This might be a little hard on performance for large lists...</p>
<pre><code>&gt;&gt;&gt; def mark_last(iterable):
...     *others, last = iterable
...     for element in others:
...             yield (element, False)
...     yield (last, True)
...
&gt;&gt;&gt; for i in mark_last([1, 2, 3]):
...     print(i)
...
(1, False)
(2, False)
(3, True)
</code></pre>
<p><a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow">From the docs</a>:</p>
<blockquote>
<p>If the target list contains one target prefixed with an asterisk,
  called a “starred” target: The object must be a sequence with at least
  as many items as there are targets in the target list, minus one. <strong>The
  first items of the sequence are assigned, from left to right, to the
  targets before the starred target. The final items of the sequence are
  assigned to the targets after the starred target. A list of the
  remaining items in the sequence is then assigned to the starred target</strong>
  (the list can be empty).</p>
</blockquote>
<p>This is what's being done on the <code>*others, last = iterable</code> line, but in reverse.</p>
</div>
<span class="comment-copy">Your no. 2 is a good point. Regarding no. 1: empty sequence → no elements → no last element → nothing to mark. – So, by design, the print loop is not entered at all.</span>
<span class="comment-copy">@RobertSiemer: If you look at line 2 of <code>mark_last</code>: <code>last = next(li)</code> -- this is the same issue as 2: it works now, but won't in a post-PEP479 world.</span>
<span class="comment-copy">I don’t see how this makes my code shorter...</span>
<span class="comment-copy">Indeed it doesn't make the code shorter, but perhaps that shouldn't be the goal. <code>iwindow</code> is a more commonly needed design pattern. If you keep <code>iwindow</code> in your toolbox (as, say, in a <code>util.py</code> module), you'll be able to solve many sliding-window problems in terms of it. <code>mark_last</code> is just one example.</span>
<span class="comment-copy">Yeah, <code>for...in</code> is way better. I’ll edit my question.</span>
<span class="comment-copy">@RobertSiemer You don't need to edit the question.</span>
<span class="comment-copy">That one does not work on “infinite generators”.</span>
<span class="comment-copy">Is there a last element of an infinite iterator?</span>
<span class="comment-copy">No, but the code would run anyway.</span>
<span class="comment-copy">If you know that there's the possibility of this function being called on an infinite iterator, you should use Veedrac's solution.</span>
