<div class="post-text" itemprop="text">
<p>Below is a simplified version of the code I have: </p>
<pre><code>class Base:
    def __new__(klass, *args):
        N = len(args)
        try:
            return [Sub0, Sub1, Sub2][N](*args)
        except IndexError:
            raise RuntimeError("Wrong number of arguments.") from None

class Sub0(Base): pass
class Sub1(Base): pass
class Sub2(Base): pass
</code></pre>
<p>This code does not work. My understanding for the reason it doesn't work is that my base class definition is dependent upon definition of the subclasses, which are in turn dependent on the base class. </p>
<p>What I am trying to accomplish is to create an API (for myself) in which I can do things like the following: </p>
<pre><code>obj = Base(1,2)
assert type(obj) == Sub2
obj = Base()
assert type(obj) == Sub0
assert isinstance(obj, Base)
</code></pre>
<p>I might be asked <em>why</em>, exactly, I want to be able to write code like this. The answer is it seems like it will be useful for a project I'm working on. However, I am considering abandoning the subclasses and doing it this way instead: </p>
<pre><code>obj = Base(1,2)
assert obj.type == "Sub2"
obj = Base()
assert obj.type == "Sub0"
assert isinstance(obj, Base)
</code></pre>
<p>As a relatively inexperienced programmer, I'm still trying to figure out what I should be doing for my particular problem. </p>
<p>However, the focus of this question is: if there are situations where using the base class and subclasses in this way makes sense, how can I make this work the way I have described? On the other hand, if it definitely does not ever - or at least, very rarely - make sense to try and do this (in Python, I mean - Python is different from other languages), why is this true? </p>
</div>
<div class="post-text" itemprop="text">
<p>Your design doesn't particularly make sense ... Generally, it's a bit strange for a base class to know about it's ancestors.  The information flow should go the other way around.  The particular problem with your code is that you call:</p>
<pre><code>Base(1, 2)
</code></pre>
<p>which calls <code>Base.__new__</code>.  It picks out one of the subclasses (<code>Sub2</code> in this example) and then (essentially) does:</p>
<pre><code>return Sub2(1, 2)
</code></pre>
<p>However, this calls <code>Sub2.__new__</code> which just so happens to be <code>Base.__new__</code> and so you have recursion problems.</p>
<p>A much better design is to forget about having <code>Base</code> pick out the subclass... Make your classes as you normally would:</p>
<pre><code>class Sub0:
    ...

class Sub1:
    ...

class Sub2:
    ...
</code></pre>
<p>And then have a factory function do what <code>Base</code> is doing now.</p>
<pre><code># This might be a bad name :-)
_NARG_CLS_MAP = (Sub0, Sub1, Sub2) 

def factory(*args):
    n = len(args)
    try:
        return _NARG_CLS_MAP[n](*args)
    except IndexError as err:
        raise RuntimeError('...') from err
</code></pre>
<p>This avoids any sort of weird recursion and strange inheritance tree problems.</p>
</div>
<div class="post-text" itemprop="text">
<p>Taking a guess about your requirements, it's almost as if you want to have multiple constructors for a class, each with a different number of arguments, i.e. multiple dispatch on arguments. You can use the <a href="https://pypi.python.org/pypi/multipledispatch" rel="nofollow">multipledispatch</a> module to overload <code>__init__</code>, for example:</p>
<pre><code>from multipledispatch import dispatch

class Thing(object):

    @dispatch(object)
    def __init__(self, arg1):
        """Thing(object): create a Thing with single argument."""
        print "Thing.__init__(): arg1 %r" % (arg1)

    @dispatch(object, object)
    def __init__(self, arg1, arg2):
        """Thing(object): create a Thing with two arguments."""
        print "Thing.__init__(): arg1 %r, arg2 %r" % (arg1, arg2)

    @dispatch(object, object, object)
    def __init__(self, arg1, arg2, arg3):
        """Thing(object): create a Thing with three arguments."""
        print "Thing.__init__(): arg1 %r, arg2 %r, arg3 %r" % (arg1, arg2, arg3)

    def normal_method(self, arg):
        print "Thing.normal_method: arg %r" % arg
</code></pre>
<hr/>
<pre><code>Thing.__init__(): arg1 1
&gt;&gt;&gt; thing = Thing('a', 2)
Thing.__init__(): arg1 'a', arg2 2
&gt;&gt;&gt; thing = Thing(1, 2, 'three')
Thing.__init__(): arg1 1, arg2 2, arg3 'three'
&gt;&gt;&gt; thing = Thing()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/home/mhawke/virtualenvs/urllib3/lib/python2.7/site-packages/multipledispatch/dispatcher.py", line 235, in __call__
    func = self.resolve(types)
  File "/home/mhawke/virtualenvs/urllib3/lib/python2.7/site-packages/multipledispatch/dispatcher.py", line 184, in resolve
    (self.name, str_signature(types)))
NotImplementedError: Could not find signature for __init__: &lt;&gt;
&gt;&gt;&gt; thing = Thing(1, 2, 3, 4)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/home/mhawke/virtualenvs/urllib3/lib/python2.7/site-packages/multipledispatch/dispatcher.py", line 235, in __call__
    func = self.resolve(types)
  File "/home/mhawke/virtualenvs/urllib3/lib/python2.7/site-packages/multipledispatch/dispatcher.py", line 184, in resolve
    (self.name, str_signature(types)))
NotImplementedError: Could not find signature for __init__: &lt;int, int, int, int&gt;
</code></pre>
<p>So this <em>might</em> be a solution for you if you don't actually require separate sub classes, just different ways of constructing them.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is gonna be a short answer as i am on my phone. 
First, check out <a href="https://stackoverflow.com/questions/4162456/forward-declaration-of-class-in-python">this</a>. </p>
<p>Now, although you might find  a way of doing it (there is a way in c++ not sure about python) it is a bad design. You shouldn't have an issue like this. A parent cannot be dependent of its child. You missed the point of inheritance. It is like saying a parent class car depends on its children: Bentley or Mazeratti. Right now, I can think of 2 scenarios that you might have:</p>
<ol>
<li><p>If two classes really depend on each other (one object is LIKE the other), then there can be another base for both, which will contain the sharing part of both. </p></li>
<li><p>If there cannot be a class base for both (one object is PART of another), you do not need inheritance at all.   </p></li>
</ol>
<p>In short, it really depends on your problem, try to fix the cause of such problem. You should change the design of your objects. </p>
</div>
<div class="post-text" itemprop="text">
<p>In reading the other answers and thinking about this a bit more, I have come up with a way to accomplish what I set out to do as described in the question. However, I do not necessarily think it is a good design; I'll leave that to people with more experience than me. </p>
<p>This approach uses functionality found in the <a href="https://docs.python.org/3/library/abc.html" rel="nofollow noreferrer">abstract base classes or <code>abc</code> module</a> to override <code>isinstance</code> so it behaves the way we want. </p>
<pre><code>from abc import ABCMeta

class RealBase: 
    '''This is the real base class; it could be an abc as well if desired.'''
    def __init__(*args):
        pass

class Sub0(RealBase): pass
class Sub1(RealBase): pass
class Sub2(RealBase): pass

class Base(metaclass = ABCMeta):
    '''Base is both an abstract base class AND a factory.'''
    def __new__(klass, *args):
        N = len(args)
        try:
            return [Sub0, Sub1, Sub2][N](*args)
        except IndexError:
            raise RuntimeError("Wrong number of arguments.") from None

#Now register all the subclasses of RealBase with the Base abc
for klass in RealBase.__subclasses__():
    Base.register(klass)

if __name__ == "__main__":
    obj = Base(1,2)
    assert type(obj) == Sub2
    obj = Base()
    assert type(obj) == Sub0
    assert isinstance(obj, Base)
</code></pre>
<p>Although I'm not certain, I believe the design approach I have used above is a sound one, as <a href="https://stackoverflow.com/questions/3570796/why-use-abstract-base-classes-in-python/19328146#19328146">this kind of thing is what the <code>abc</code> module seems to have been created for in the first place</a> (providing <a href="https://www.python.org/dev/peps/pep-3119/" rel="nofollow noreferrer">a way to overload the <code>isinstance()</code> and <code>issublcass()</code></a> functions). </p>
</div>
<span class="comment-copy">You're right. Thanks for helping me to realize the flaw in my thinking. I have used some of your suggestions in my own answer.</span>
<span class="comment-copy">I did not know about <code>multipledispatch</code> - I'll have to look into it some more.</span>
<span class="comment-copy">OK. <code>multipledispatch.dispatch</code> rules. I've used <code>overload.overload</code> a bit, but this is a lot better.</span>
<span class="comment-copy">Do you happen to know if <code>multipledispatch.dispatch</code> has a way to add a method at the end that catches any and all arguments? I'm looking through the documentation and don't see a way to do that. What I am trying to do is add a fourth version of <code>__init__</code> with the signature of <code>(self, *args, **kwargs)</code> so that I can have custom behavior for all other argument combinations not accounted for in previous <code>@dispatch</code> decorated versions.</span>
<span class="comment-copy">Unfortunately varargs is not supported. You can get keyword args to work by declaring the function like <code>def __init__(self, arg1, **kwargs):</code> and it will still dispatch to this version of the function having 1 positional argument. But, <code>*args</code> doesn't work. There is no standard way to mark a function as a "catchall", although a hack is possible that can kind of make it work. Given this limitation you might want to consider <a href="http://stackoverflow.com/a/29025568/21945">mgilson's answer</a> for it's simplicity and flexibility.</span>
<span class="comment-copy">You are exactly right. I think I have come up with a way to fix this problem; see my own answer.</span>
