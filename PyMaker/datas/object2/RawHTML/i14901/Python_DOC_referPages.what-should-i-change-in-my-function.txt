<div class="post-text" itemprop="text">
<pre><code>list_1  =[1, 2, 3, 4 ]

def fun(list_1):
    for each value in list1:
        # perform some operation and create a new data frame(pandas) for each value in the list
        # so in total I should get 4 data frames.
        print each_value

        return new_data_frame
</code></pre>
<p>When I run <code>fun(list_1)</code> I should get 4 data frames:</p>
<pre><code>1
data_frame_1

2
data_frame_2

3
data_frame_3

4
data_frame_4
</code></pre>
<p>but I am getting an ouput only with first value.</p>
<pre><code>1
data_frame_1
</code></pre>
<p>so what should I change in my function.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you <code>return</code> from the function, it's over.<br/>
You're out of the function and that's it.  </p>
<p>You could use <a href="https://docs.python.org/3/glossary.html#term-generator" rel="nofollow noreferrer">a generator</a> to achieve what you want or you may return a <code>tuple</code> or a <code>list</code>.</p>
<hr/>
<p>Using a generator :</p>
<pre><code>def fun(list_1):
    for each_value in list_1:
        # perform some operation and create a new data frame(pandas) named "new_data_frame" for each value in the list
        print each_value
        yield new_data_frame

for data_frame in fun(list_1):
    # Do something with the data frame "data_frame"
</code></pre>
<p>This will print the value each time, and return your data frame.
But it returns a generator, so you have to call the function multiple times.  What you cannot really do is get your data frames in a loop without wanting to store them in an list or assimilated or call the function only once.</p>
<hr/>
<p>A simpler way with a list could be:</p>
<pre><code>def fun(list_1):
    data_frames = []
    for each_value in list1:
        # perform some operation and create a new data frame(pandas) named "new_data_frame" for each value in the list
        print each_value
        data_frames.append(new_data_frame)

return data_frames
</code></pre>
<hr/>
<p>For reference, I'd suggest you have a look at <a href="https://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python/231855#231855">What does the "yield" keyword do in Python?</a> 
which may be interesting for you.</p>
</div>
<span class="comment-copy">There is a <code>yield</code> keyword! <a href="http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python" title="what does the yield keyword do in python">stackoverflow.com/questions/231767/â€¦</a></span>
<span class="comment-copy">Sorry you want 4 dataframes but where are these going to be stored? In the callee or the caller? it's very unclear what you are trying to achieve here</span>
<span class="comment-copy">@EdChum - sorry I am new to programming. I dont understand the differene between callee and caller. what detail you need. I will provide it</span>
<span class="comment-copy">@ElizabethSusanJoseph The callee is the one who is called, the caller is the one who calls.</span>
<span class="comment-copy">but you then need to store these dfs somewhere which means either in a list or tuple or some other container or use a generator</span>
<span class="comment-copy">so what is the proposed solution?</span>
<span class="comment-copy">The false is in the identation, place your return one tab back, same us your for loop.</span>
<span class="comment-copy">it worked. but I dont want those data frames inside a list</span>
<span class="comment-copy">I added a generator example</span>
<span class="comment-copy">in generator eg , why do you use an empty list <code>data_frames = []</code>?</span>
