<div class="post-text" itemprop="text">
<p>I want to pass a dictionary as an argument to a separate python script as shown below:</p>
<pre><code>dict1= {'appid':'facebook'}
subprocess.call('python mypython.py -o' + dict1, shell=True) (Also tried with os.system)
</code></pre>
<p>Contents of mypython.py:</p>
<pre><code>parser = argparse.ArgumentParser(fromfile_prefix_chars='@')
parser.add_argument("-o", dest="dict1")
args = parser.parse_args()
if args.dict1:
    op1 = args.dict1
    print op1
</code></pre>
<p>Traceback details:</p>
<pre><code>python parent.py
Traceback (most recent call last):
  File "parent.py", line 52, in &lt;module&gt;
    sys.exit(main())
  File "mypython.py", line 30, in main
    subprocess.call('python mypython.py -o' + dict1, shell=True)
TypeError: cannot concatenate 'str' and 'dict' objects
</code></pre>
<p>Now when I convert the dict object to string using str, I hit another issue:</p>
<pre><code>dict1={2:11}
tostr=str(dict1)
print (tostr)
os.system('python mypython.py -o '+tostr)

python parent.py
{2: 11}
usage: mypython.py [-h] [-o DICT1]
mypython.py: error: unrecognized arguments: 11}
</code></pre>
<p>It adds an extra space after : (before 11) and hence it fails. Only workaround is my input is a string:</p>
<pre><code>dict1="{2:11}"
os.system('python mypython.py -o '+dict1)
</code></pre>
<p>It works as expected in the above case.</p>
<p>Can someone suggest me how to pass a dictionary as an argument to another script?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could cast the dict to a string (<code>str(dict1)</code>) and then parse it in the other class with <a href="https://stackoverflow.com/questions/988228/converting-a-string-to-dictionary">this</a>.</p>
</div>
<span class="comment-copy">Why are you doing this via <code>subprocess</code>?</span>
<span class="comment-copy">It looks like that you're trying to find a workaround on how to call a function which lies inside file A from file B. Please <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">read up on the Python tutorial section on modules</a>. That's the far better solution to your (presumed) problem.</span>
