<div class="post-text" itemprop="text">
<p>In the examples I saw,argparse all handles just one positional commandline argument, and arbitrarily number of optional commandline arguments. So I wonder if it can handle more than one positional arguments? If yes, how does it do and how are the commandline arguments specified?  Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>So I wonder if it can handle more than one positional arguments? If yes, how does it do and how are the commandline arguments specified?</p>
</blockquote>
<p>Well, the <em>very first</em> example in the <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow">argparse documentation</a> handles multiple non-option arguments.  So that's probably a good place to start.</p>
<p>Here's a trivial example; place the following in <code>argtest.py</code>:</p>
<pre><code>import argparse


def parse_args():
    p = argparse.ArgumentParser()
    p.add_argument('--option1', '-1')
    p.add_argument('--option2', '-2')
    p.add_argument('commandline1')
    p.add_argument('commandline2')
    return p.parse_args()


if __name__ == '__main__':
    p = parse_args()
    print p
</code></pre>
<p>And then:</p>
<pre><code>python argtest.py
usage: argtest.py [-h] [--option1 OPTION1] [--option2 OPTION2]
                  commandline1 commandline2
argtest.py: error: too few arguments
</code></pre>
<p>Or:</p>
<pre><code>python argtest.py hello world
Namespace(commandline1='hello', commandline2='world', option1=None, option2=None) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>yes, </p>
<pre><code>parser = argparse.ArgumentParser(description="my_example")

# these are your positional arguments
parser.add_argument("first", type=int, nargs=1)                                          
parser.add_argument("second", type=str, nargs=1)

# this is your optional one
parser.add_argument("-r", this is an optional argument)

args = parser.parse_args()
parser.print_help()
print args.first args.second  
</code></pre>
<p>On the command line</p>
<pre><code>$ python argtest1.py 5 'c' -r R                                  
</code></pre>
<p>Output:</p>
<pre><code>usage: argtest1.py [-h] [-r R] first second                                     

my_example                                                                      

positional arguments:                                                           
  first                                                                         
  second                                                                        

optional arguments:                                                             
 -h, --help  show this help message and exit                                   
 -r R        this is an optional argument                                      

[5] ['c']                     
</code></pre>
<p>Note that you can put the positional arguments after the optional one on the command line:  <code>python argtest1.py -r R 5 'c'</code>. You could also do this:  <code>python argtest1.py 5 -r R 'c'</code>. Obviously you can't do this <code>python argtest1.py -r R 'c' 5</code>.</p>
</div>
<span class="comment-copy">I am not sure I understand your question, but have you tried <code>enumerate(sys.argv)</code> ?</span>
<span class="comment-copy">Does the order between <code>p.add_argument('commandline1')</code> and <code>p.add_argument('commandline2')</code> matters?</span>
<span class="comment-copy">What happens if you swap the position of those two lines and re-run the example?</span>
