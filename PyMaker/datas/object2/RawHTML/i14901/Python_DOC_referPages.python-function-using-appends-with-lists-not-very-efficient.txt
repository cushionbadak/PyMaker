<div class="post-text" itemprop="text">
<p>Trying to write a function which takes input of 4 digit numbers and compares them, output of Ys and Ns to try and check if they are the same. EG 1234 and 1235 would output YYYN. At the minute it's very inefficient to keep using all these append commands. How could I simplify that?</p>
<pre><code>def func():
results=[]
firstn= str(input("Please enter a 4 digit number: "))
secondn= str(input("Please enter a 4 digit number: "))

listone= list(firstn)
listtwo= list(secondn)


if listone[0]==listtwo[0]:
    results.append("Y") 
else:
    results.append("N") 
if listone[1]==listtwo[1]:
    results.append("Y") 
else:
    results.append("N") 
if listone[2]==listtwo[2]:
    results.append("Y") 
else:
    results.append("N") 
if listone[3]==listtwo[3]:
    results.append("Y") 
else:
    results.append("N") 

print(results)
</code></pre>
<p>Furthermore, how can I validate this to just 4 digits for length and type IE. Nothing more or less than a length of four / only numerical input? I have been researching into the len function but don't know how I can apply this to validate the input itself?</p>
</div>
<div class="post-text" itemprop="text">
<p>For the validation, you can write a function that will ask repeatedly for a number until it gets one that has <code>len</code> 4 and is all digits (using the <code>isdigit()</code> string method).</p>
<p>The actual comparison can be done in one line using a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>.</p>
<pre><code>def get_number(digits):
    while True:
        a = input('Please enter a {} digit number: '.format(digits))
        if len(a) == digits and a.isdigit():
            return a
        print('That was not a {} digit number. Please try again.'.format(digits))

def compare_numbers(a, b):
    return ['Y' if digit_a == digit_b else 'N' for digit_a, digit_b in zip(a, b)]

first = get_number(4)
second = get_number(4)
print(compare_numbers(first, second))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think this should work.   </p>
<pre><code>def compare(a,b):
     a,b = str(a),str(b)
     truthvalue = {True:"Y",False:"N"}

     return "".join([truthvalue[a[idx]==b[idx]] for idx,digit in enumerate(a)])


print(compare(311,321)) #Returns YNY
print(compare(321312,725322)) #Returns NYNYNY
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def two_fourDigits():
     results = []

     firstn = input("Please enter the first 4 digit number: ")

     while firstn.isnumeric() == False and len(firstn) != 4:
          firstn= input("Please enter the second 4 digit number: ")

     secondn = input("Please enter a 4 digit number: ")

     while secondn.isnumeric() == False and len(secondn) != 4:
          secondn= input("Please enter a 4 digit number: ")

     for i in range(0, len(firstn)):
          if firstn[i] == secondn[i]:
               results.append("Y")
          else:
               results.append("N") 

     print(results)
</code></pre>
<p>You don't need to convert the input to a string, the input() function automatically takes in the values as a string.</p>
<p>Second, I added in input validation for firstn and secondn to check that they were numeric, and to check if they are the correct length (4).  Also, there is no need to change the input to a list, because you can search through the strings.</p>
<p>I tried to do your function like this.  Basically, the function uses the length of the first string to iterate through all the values of each list, and return Y if they are the same and N if they are not.</p>
</div>
<div class="post-text" itemprop="text">
<p>Because you don't make it a global variable which can be used from out of the function. Here is an example:</p>
<pre><code>my_list = []
def my_func():
    global my_list
    my_list.append(0)
    return "Something..."

my_list.append(1)
print my_list
</code></pre>
</div>
<span class="comment-copy">Please check the tabs in your code - presumably there should be more indentation.</span>
<span class="comment-copy">I see, so I need to make the list global? And write a new function?</span>
<span class="comment-copy">Yes. If you want to use a global variable in a function you must define it as global in the function. If you want to create a list in a function for using it from out of the function, you must return the list then create a variable which is equal to the function.</span>
<span class="comment-copy">But there is no need for the variable to be global (perhaps this confusion is based on the lack of indentation in the original post) and this is not a good way to solve the problem.</span>
<span class="comment-copy">Yes. I agree with you @Stuart. I thought that function is first code block and if block is another code block. But it is OK.</span>
