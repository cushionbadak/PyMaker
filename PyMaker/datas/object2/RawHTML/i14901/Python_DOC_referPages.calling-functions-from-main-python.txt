<div class="post-text" itemprop="text">
<p>I have some python 3.4 code that works fine:</p>
<pre><code>def run():
    m = 0
    while m != 1:    
        p = input('Please choose p: ')
        p = makeInt(p)
        #Some other code
        print(p)
        m = makeInt(input('Enter 1 if you would like to quit: '))

def makeInt(i):
    try:
        i = int(i)
    except ValueError:
        i = input('Incorrect input! Enter your answer: ')
        i = makeInt(i)
    return i

#Some other functions    

if __name__ == '__main__':
    run()
</code></pre>
<p>I want to put all this code in a class (Except possibly <code>if __name__ ==</code>...) When I put all the code including <code>if __name__ ==</code>... in a class like so:</p>
<pre><code>class Foo(object):
    def run(self):
        m = 0
        while m != 1:    
            p1 = input('Please choose p: ')
            p1 = self.makeInt(p1)
            #Some other code
            print(p1)
            m = self.makeInt(input('Enter 1 if you would like to quit: '))

    def makeInt(self, i):
        try:
            i = int(i)
        except ValueError:
            i = input('Incorrect input! Enter your answer: ')
            i = self.makeInt(i)
        return i
    #Some other functions and stuff

    if __name__ == '__main__':
        run()
</code></pre>
<p>I get the following error: <code>TypeError: run() missing 1 required positional argument: 'self'</code>.  When I remove the self argument from <code>run()</code> it runs until <code>makeInt()</code> is called and then I get: <code>NameError: name 'makeInt' is not defined</code>.  I get the same error if I take the if statement out of the class and call <code>Foo.run()</code>.  I have some other code earlier in this program that works when I call functions of a class from another function in that same class.  I realize I don't have to put all my code in a class, but in this case I want to. Why am I getting these errors and what can I do to put my working code in a class? </p>
</div>
<div class="post-text" itemprop="text">
<p>Since you wrap your code within a class, your <code>run()</code> is a method now. You should remove your <code>main</code> from your class by unindenting it and initialize an instance of your class:</p>
<pre><code>if __name__ == '__main__':
    Foo().run()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As others mentioned, by putting your functions in a class, you've made them methods, that means they need an instance of this class as first argument. So you can indeed call your <code>run</code> method using <code>Foo().run()</code> as <code>Foo()</code> will create an instance of <code>Foo</code>.</p>
<p>Another way (e.g. if you don't need the class for anything else than encapsulation) is to make them <a href="http://en.wikipedia.org/wiki/Method_%28computer_programming%29#Static_methods" rel="nofollow">static</a>, using the <a href="https://docs.python.org/3/library/functions.html#staticmethod" rel="nofollow"><code>staticmethod</code></a> decorator:</p>
<pre><code>class Foo(object):
    @staticmethod
    def run():
        ...

    @staticmethod
    def makeInt(i):
        ...

if __name__ == '__main__':
    Foo.run() # don't need an instance as run is static
</code></pre>
<p>In Python, a method can be static, i.e. no need for any special argument, a class method, i.e. first argument is the class itself, or a standard method, i.e. the first argument is an instance of the class.</p>
</div>
<div class="post-text" itemprop="text">
<p>It thinks the guard is a part of your class due to the indentation: you have your guard indented to the same level as the other class members. Unindent the</p>
<pre><code>if __name__ == '__main__'
</code></pre>
<p>Also change it to be</p>
<pre><code>if __name__ == '__main__':
  main()
</code></pre>
<p>and then instantiate a new object of type Foo in your newly created main() function</p>
<pre><code>def main():
  newFoo = Foo()
  newFoo.run()
</code></pre>
</div>
<span class="comment-copy">But if you are using a class only as a namespace, why not just use a module?</span>
<span class="comment-copy">Well, I agree with you, but that's a question better asked to the OP who specifically wanted to do this.</span>
