<div class="post-text" itemprop="text">
<p>I was playing around with closures in Python and I do not understand why the following does not work and how to make it work:</p>
<pre><code>&gt;&gt;&gt; def make_counter():
...     i = 0
...     def inner():
...         i += 1
...         return i
...     return inner
...
&gt;&gt;&gt; c = make_counter()
&gt;&gt;&gt; c()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 4, in inner
UnboundLocalError: local variable 'i' referenced before assignment
</code></pre>
<p>Could anybody shed some light on it?
Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>In the <code>inner</code> function, the statement </p>
<pre><code>i += 1
</code></pre>
<p>can be understood like this</p>
<pre><code>i = i + 1
</code></pre>
<p>since you are assigning a value to <code>i</code> in this function, Python thinks that you are creating a new variable scoped to this current function. And then when it executes the right hand side expression, <code>i + 1</code>, it finds that <code>i</code> has not been assigned any value before using it. That is why it is throwing</p>
<pre class="lang-none prettyprint-override"><code>UnboundLocalError: local variable 'i' referenced before assignment
</code></pre>
<p>To fix this, you need to explicitly tell Python that you are not creating a new variable, instead, you are accessing a variable from the outer scope, with <a href="https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement" rel="nofollow noreferrer"><code>nonlocal</code></a> (Python 3.x) like this</p>
<pre><code>&gt;&gt;&gt; def make_counter():
...     i = 0
...     def inner():
...         nonlocal i
...         i += 1
...         return i
...     return inner
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; make_counter()()
1
</code></pre>
<p><strong>Note:</strong> If you are using Python 2.x, follow any of the methods mentioned in <a href="https://stackoverflow.com/q/3190706/1903116">this question</a></p>
</div>
<span class="comment-copy">In this particular case, you are better off using <code>c = itertools.count()</code>. Then use <code>foo = next(c)</code> to increment the count</span>
