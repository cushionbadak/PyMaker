<div class="post-text" itemprop="text">
<p>I am a programmer new to python trying to write a simple test1() function that uses arg (or *arg)  to print out how it was called using the "name" of the argument passed to it, not the content of the list or any other variable that I am passing.  </p>
<p>The following example:</p>
<pre><code>def test1(arg):

    print "name of arg is %r" % arg


alphabet = ['a', 'b', 'c']

test1(alphabet) # prints name of arg is ['a', 'b', 'c']
</code></pre>
<p>I want it to print out: name of arg is alphabet
I researched and tried several things related to using *argv but did not succeed. Can someone shed some light on this?  I feel like I'm missing something obvious.
Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>This is more than a little ugly, but it's one way to achieve what you're after:</p>
<pre><code>import traceback
import re

alphabet = ['a', 'b', 'c']

def test(arg):
    stack = traceback.extract_stack()
    arg_name = re.sub('test\((.*)\)', '\g&lt;1&gt;', stack[-2][-1])
    print arg_name

test(alphabet)
test('foo')
</code></pre>
<p>The result of which is</p>
<pre><code>alphabet
'foo'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not quite sure, why you want this, anyway ...</p>
<p>If you want the name of argument available in a function, you have to pass the name of the argument to the function. Python is <em>call by reference</em> in all cases.</p>
<p>In your function, <code>arg</code> will always be named <code>arg</code> inside the function. Its outside variable name is not available inside the function.</p>
<pre><code>def test1(arg):
    print "name of arg is %r" % arg
</code></pre>
<p>However python has variable keyword arguments and there lies a possible solution to your problem. Let me redefine <code>test1()</code>:</p>
<pre><code>def test1(**kwargs):
   param_name = iter(kwargs).next()
   print "name of parameter is %s" % param_name
</code></pre>
<p>You can call this function with a keyword argument:</p>
<pre><code>alphabet = ['a', 'b', 'c']
test1(alphabet=alphabet)
</code></pre>
<p>Note, however, that what get's printed is not the variable name from <em>outside</em> the function, but the name of the keyword.</p>
</div>
<span class="comment-copy">Python objects are <a href="https://docs.python.org/3/faq/programming.html#how-can-my-code-discover-the-name-of-an-object" rel="nofollow noreferrer">like stray cats</a>: they don't know or care about their names, and may have multiple names or be nameless.</span>
<span class="comment-copy">This is nowhere near a duplicate. In fact it has nothing to do with <i>argv</i> as it's known in programming world</span>
<span class="comment-copy">@TimCastelijns Oops, you're right.  I should have read the question more carefully.  I removed my duplicate comment.  Unfortunately, I cannot remove my flag, but I think the discerning moderator will dismiss my flag.  I apologize, Tom D.</span>
<span class="comment-copy">I don't think this duplicates that. The OP hasn't so much as mentioned command line arguments. Voting to reopen.</span>
<span class="comment-copy">Sorry, the closing is my fault (at least partly).  Can we please get a moderator to reopen?</span>
<span class="comment-copy">If I ever saw this in production code, I would weep silently. +1</span>
<span class="comment-copy">@AdamSmith: I would weep, but it most definitely would <i>not</i> be silently ;)</span>
<span class="comment-copy">@Demian - It's beautiful to me, regular expressions and all !  I have a lot to learn. Cheers!</span>
<span class="comment-copy">@TomD If you learn one thing about programming, make it be to NEVER DO SOMETHING LIKE THIS. Make code that's self-documenting and easy to read. Regular expressions are great and well worth your time to look up, but using them to manually hack apart a stack trace is the definition of ugly, hacky code.</span>
<span class="comment-copy">Kevin's comment in response to your question is Python's stance on the matter. Keep data out of identifiers, and you'll never need to know what the identifier is.</span>
<span class="comment-copy">dhke, Thanks for the quick help!  The reason I wanted the test1() function was to be able to call it from various places in a large program. Knowing the name or names of the argument(s) passed would help in determining where it was called from. It was going to be a useful log or learning tool. I realize there are other ways to achieve the same results.  Your **kwargs solution will work as well as passing a second argument with a string that tells the name of the arg being passed. Being new to Python, I just thought there might be something else more efficient that I was missing. Thanks again!</span>
<span class="comment-copy">python actually passes object references by value. if it were truly pass by reference, this would work: <code>j = 61; def f(i): i = 7; f(j); assert(j == 7)</code></span>
<span class="comment-copy">@acushner If you want to be that correct, you get pass by reference, but you get a <i>copy of the reference</i>, same as e.g. Java does it. C++ of course is a little different.</span>
<span class="comment-copy">yeah, it passes the reference by value.</span>
<span class="comment-copy">@acushner - succinctly stated and I now completely understand. Thank you.</span>
