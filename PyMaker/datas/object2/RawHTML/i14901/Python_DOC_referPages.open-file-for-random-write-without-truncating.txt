<div class="post-text" itemprop="text">
<p>In python, there are a few flags you can supply when opening a file for operation. I am a bit baffled at finding a combination that allow me to do <strong>random write without truncating</strong>. The behavior I am looking for is equivalent to C: create it if it doesn't exist, otherwise, open for write (not truncating)</p>
<p><code>open(filename, O_WRONLY|O_CREAT)</code></p>
<p>Python's <a href="https://docs.python.org/2.7/library/io.html#module-io">document</a> is confusing (to me): <code>"w"</code> will truncate the file first, <code>"+"</code> is supposed to mean updating, but <code>"w+"</code> will truncate it anyway. Is there anyway to achieve this without resorting to the low-level <code>os.open()</code> interface?</p>
<p>Note: the <code>"a"</code> or <code>"a+"</code> doesn't work either (please correct if I am doing something wrong here)</p>
<pre><code>cat test.txt
eee

with open("test.txt", "a+") as f:
  f.seek(0)
  f.write("a")
cat test.txt
eeea
</code></pre>
<p>Is that so the append mode insist on writing to the end?</p>
</div>
<div class="post-text" itemprop="text">
<p>You should open in <code>rb+</code> mode.</p>
<pre><code>with open("file", "rb+") as file:
    file.write(b"...")
</code></pre>
<p>On Python 2 you <em>could</em> use <code>r+</code> instead for text mode, but you shouldn't since it can change the length of the text you write.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it with os.open:</p>
<pre><code>import os
f = os.fdopen(os.open(filename, os.O_RDWR | os.O_CREAT), 'rb+')
</code></pre>
<p>Now you can read, write in the middle of the file, seek, and so on. And it creates the file. Tested on Python 2 and 3.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to use <code>"a"</code> to append, it will create the file if it does not exist or append to it if it does.</p>
<p>You cannot do what you want with append as the pointer automatically moves to the end of the file when you call the write method. </p>
<p>You could check if the file exists then  use <code>fileinput.input</code> with <code>inplace=True</code> inserting a line on whichever line number you want.</p>
<pre><code>import fileinput
import os


def random_write(f, rnd_n, line):
    if not os.path.isfile(f):
        with open(f, "w") as f:
            f.write(line)
    else:
        for ind, line in enumerate(fileinput.input(f, inplace=True)):
            if ind == rnd_n:
                print("{}\n".format(line) + line, end="")
            else:
                print(line, end="")
</code></pre>
<p><a href="http://www.manpagez.com/man/3/fopen/" rel="nofollow">http://linux.die.net/man/3/fopen</a></p>
<blockquote>
<p>a+
  Open for reading and appending (writing at end of file). The file is created if it does not exist. The initial file position for reading is at the beginning of the file, but output is always appended to the end of the file.</p>
</blockquote>
<p>fileinput makes a <code>f.bak</code> copy of the file you pass in and it is deleted when the output is closed. If you  specify a backup extension <code>backup=."foo"</code> the backup file will be kept. </p>
</div>
<span class="comment-copy">The docs say that "on some Unix systems [a+] means that all writes append to the end of the file regardless of the current seek position."</span>
<span class="comment-copy">true ... which is another reason "append" won't work.</span>
<span class="comment-copy">As counter-intuitive as "rb+" is, it is the way for random write without truncating, verified and true. The caveat is that, the file must exist prior. In that sense, it is not a complete match of behavior of C's open( ... O_WRONLY| O_CREAT), but I think this might be as good as it gets.</span>
<span class="comment-copy">@Oliver You can emulate C's functions with <a href="https://docs.python.org/3/library/os.html#os.open" rel="nofollow noreferrer"><code>os.open</code></a>.</span>
<span class="comment-copy">@Oliver What about those rare cases where you have write permissions for the file but not read permissions?</span>
<span class="comment-copy">see the example provided to show append mode doesn't allow you to do random write.</span>
<span class="comment-copy">so you want to write  to the file on a random line?</span>
<span class="comment-copy">yes, without going into too much details on use case - think of parallel write in cluster environment.</span>
<span class="comment-copy">I don't think it is possible with append, the  pointer is always moved to the end of the file when you call write even if you seek</span>
