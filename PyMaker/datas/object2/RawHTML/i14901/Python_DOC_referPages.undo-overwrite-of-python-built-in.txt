<div class="post-text" itemprop="text">
<p>In Python there are several <a href="https://docs.python.org/2/library/functions.html#open" rel="nofollow">built-in functions</a>.  Take open for example <code>open</code>.  I can fire up a Python console and get some info about <code>open</code> by doing the following:</p>
<pre><code>&gt;&gt; open    
&gt;&gt;(built-in function open)
</code></pre>
<p>But if I were to do something like this:</p>
<pre><code>&gt;&gt; # I know it's bad practice to import all items from the namespace    
&gt;&gt; from gzip import *    
&gt;&gt; open    
&gt;&gt;(function open at 0x26E88F0)
</code></pre>
<p>It appears that, for the rest of my console session, all calls to the <code>open</code> function will not use the built-in function but the one in the <code>gzip</code> module.  Is there any way to redefine a built-in function in Python back to the original?  It's easy if I have a reference to the desired function, like below:</p>
<pre><code>def MyOpen(path):
  print('Trivial example')

open = MyOpen
</code></pre>
<p>How do you obtain a reference for built-in functions once those references have been overwritten?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can simply delete the global:</p>
<pre><code>del open
</code></pre>
<p>or you can import the <a href="https://docs.python.org/2/library/__builtin__.html"><code>__builtin__</code> module</a> (Python 2) or <a href="https://docs.python.org/3/library/builtins.html"><code>builtins</code> module</a> (Python 3) to get to the original:</p>
<pre><code>import __builtin__

__builtin__.open
</code></pre>
<p>Name lookups go first to your global namespace, then to the built-ins namespace; if you delete the global name <code>open</code> it'll no longer be in the way and the name lookup progresses to the built-ins namespace, or you can access that namespace directly via the imported module.</p>
</div>
