<div class="post-text" itemprop="text">
<p>Python's <a href="https://www.python.org/dev/peps/pep-0435/" rel="nofollow">PEP 435</a> about the <a href="https://docs.python.org/3/library/enum.html#module-enum" rel="nofollow"><code>enum</code> module</a> says that enumerators <a href="https://www.python.org/dev/peps/pep-0435/#comparisons" rel="nofollow">should be compared with <code>is</code></a> instead of the usual <code>==</code>. I guess that the reasoning is that an enum members are static and won't ever change, so it makes sense.</p>
<p>I am using Python 2.7.9 for compatibility reasons and I don't want to introduce too many new libraries to the project, so I don't plan to use the Python 2.7.9 port of the <code>enum</code> module. Therefore I use a simpler form of enumerations instead:</p>
<pre><code>class Color(object):
    red = 1
    green = 2
    blue = 3
</code></pre>
<p>In such a case, is it still fine to use <code>is</code> for comparison? More generally, is it ok to compare static class variables that are known not to change during the lifetime of the program with <code>is</code> instead of <code>==</code>, regardless of their type?</p>
<p><strong>Note:</strong> I take that only the name of the static variable will be used for assignment/comparison, never its value.</p>
</div>
<div class="post-text" itemprop="text">
<p>Can you? <strong>Yes</strong> - small integers are interned in CPython, so wherever you get e.g. <code>x = 2</code> from, <code>x is Color.green</code> will evaluate <code>True</code>.</p>
<p>Should you? <strong>No</strong>. For one thing, it doesn't make conceptual sense - do you really care if they're the same exact object (<em>identity</em>, <code>is</code>), or just whether they have the same value (<em>equality</em>, <code>==</code>)? What if the values are sourced from somewhere other than the class itself, e.g. a database or user input? For another, interning of small integers is an <em>implementation detail</em>, so shouldn't be relied upon.</p>
<blockquote>
<p>More generally, is it ok to compare static class variables that are known not to change during the lifetime of the program with <code>is</code> instead of <code>==</code>, regardless of their type?</p>
</blockquote>
<p><strong>No</strong>, because this could fail whether or not they are <em>"static"</em>:</p>
<pre><code>&gt;&gt;&gt; class Demo(object):
    class_attr = "some string"


&gt;&gt;&gt; "some string" is Demo.class_attr
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It <strong>may</strong> work since CPython uses the same addresses for the numbers in <code>[-5, ..., 256]</code> (they are never re-created):</p>
<pre><code>&gt;&gt;&gt; (-5 + 0) is -5
True
&gt;&gt;&gt; (-6 + 0) is -6
False
&gt;&gt;&gt; (256 + 0) is 256
True
&gt;&gt;&gt; (257 + 0) is 257
False
</code></pre>
<p>But it's relying on implementation which is not a good thing.</p>
<p>Why not use <code>==</code> anyway?</p>
</div>
<span class="comment-copy">What advantage do you gain from comparing these things with <code>is</code>? Your code will look like it is wrong even if it works.</span>
<span class="comment-copy">@khelwood Documentation. If it works, then reading <code>is</code> in my code will clearly trigger <code>static</code> or <code>enum</code> in my mind.</span>
<span class="comment-copy">If you <i>only ever</i> compare class attributes then <code>is</code> is fine. Eg, <code>a=Color.red;b=Color.red;c=Color.blue;print a is b, a is c</code>.</span>
<span class="comment-copy">Your final example is not one of my use cases. I would only write <code>a = Demo.class_attr</code> at some point and check <code>a is class_attr</code> at some other point. I wouldn't really care about the value actually.</span>
<span class="comment-copy">Again, what if the value comes from somewhere else? If you're <b>always</b> going to have the same object then it's up to you, but I don't think it's the best approach.</span>
<span class="comment-copy">That's good point. I wonder how Python 3.4 enums behave if you try to load their values from somewhere else.</span>
<span class="comment-copy">@Morwenn you have to call the class to get the member - see <a href="https://docs.python.org/3/library/enum.html#programmatic-access-to-enumeration-members-and-their-attributes" rel="nofollow noreferrer">the docs</a>.</span>
<span class="comment-copy">@Morwenn I would argue that you can't guarantee that you will <b>always</b> have the same object on both end hence it's quite pointless to risk creating hard to diagnose problems just to use <b>is</b> (e.g. 5 is 5 but 300 is not 300)</span>
