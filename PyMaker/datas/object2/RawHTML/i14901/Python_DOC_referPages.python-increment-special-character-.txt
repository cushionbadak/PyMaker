<div class="post-text" itemprop="text">
<p>I want to read some words from an excel file and extracte some information.
Reading the file is no problem.</p>
<p>The point is, that I want to increment the last character of a word. It is no problem for normal characters like 'A'. But special Characters like 'Í' are a problem.</p>
<p>I read the content with this:</p>
<pre><code>val = val.encode('utf-8')
</code></pre>
<p>I put this value in a dictionary. </p>
<p>The next step is to iterate through the dict and get the saved information. info['streettype'] contains my val from before. Now i convert the value to upper case like this:</p>
<pre><code>w2 = info['streettype'].decode('utf-8').upper().encode('utf-8')
</code></pre>
<p>That is needed because some characters are special, like I said (e.g. 'é', 'ž', 'í'). 
Now I want to increment the last character of the word, which can be a special character.</p>
<pre><code>w3 = w2.decode('utf-8')[:-1].encode('utf-8')    
lastLetter = w2.decode('utf-8')[-1].encode('utf-8')
</code></pre>
<p>Now I increment the character by using:</p>
<pre><code>lastLetter2 = (chr(ord(lastLetter.decode('utf-8')) + 1))
</code></pre>
<p>Next I want to save it in a text file.
I want to save the original word and the edited word.
I think I need to reencode my lastLetter2, but it does not work.
When I just save my w2 and w3+lastLetter2 I get strange results because some are encoded, some are not.</p>
<p>For the word:</p>
<pre><code>NÁBŘEŽÍ
</code></pre>
<p>my Result is:</p>
<pre><code>"NÃBÅ˜EÅ½Ã", "NÃBÅ˜EÅ½ÎÃ"
</code></pre>
<p>but I want:</p>
<pre><code>"NÁBŘEŽÍ", "NÁBŘEŽÎ"
</code></pre>
<p>(Í is ascii 205, Î is ascii 206)</p>
<p>Can someone help me to save this problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>Stop encoding your data to UTF-8 all the time; keep your text as Unicode, it makes processing much easier. Leave encoding to the last minute, preferably by having the <em>file object</em> encode this for you.</p>
<p>Having the file encode Unicode means that in Python 2 you'd use <a href="https://docs.python.org/2/library/io.html#io.open" rel="nofollow"><code>io.open()</code></a> rather than the standard built-in <code>open()</code> function; this is the same infrastructure Python 3 uses to handle Unicode and file I/O.</p>
<p>You managed to create a <a href="http://en.wikipedia.org/wiki/Mojibake" rel="nofollow">Mojibake</a> by encoding and decoding at will here; your text is now a mix of UTF-8 data decoded with Windows codepage 1252 then encoded to UTF8 again, plus non-mangled data:</p>
<pre><code>&gt;&gt;&gt; print u'NÃBÅ˜EÅ½Ã'
NÃBÅ˜EÅ½Ã
&gt;&gt;&gt; print u'NÃBÅ˜EÅ½Ã'[3:-1].encode('cp1252').decode('utf8')
ŘEŽ
</code></pre>
<p>Note that the last character in the first stringis invalid; it is missing a byte! That's because the result of 'decoding' the last character's UTF-8 bytes should not have been possible in a proper CP1252 codec; I had to use the <a href="http://ftfy.readthedocs.org/en/latest/" rel="nofollow"><code>ftfy</code> project</a> internal repair codecs to bypass that problem:</p>
<pre><code>&gt;&gt;&gt; print u'NÃBÅ˜EÅ½Ã\x8d'[3:].encode('sloppy-cp1252').decode('utf8')
ŘEŽÍ
&gt;&gt;&gt; u'Í'.encode('utf8').decode('cp1252')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/mpieters/Development/venvs/stackoverflow-2.7/lib/python2.7/encodings/cp1252.py", line 15, in decode
    return codecs.charmap_decode(input,errors,decoding_table)
UnicodeDecodeError: 'charmap' codec can't decode byte 0x8d in position 1: character maps to &lt;undefined&gt;
&gt;&gt;&gt; u'Í'.encode('utf8').decode('sloppy-cp1252')
u'\xc3\x8d'
&gt;&gt;&gt; print u'Í'.encode('utf8').decode('sloppy-cp1252')
Ã
</code></pre>
<p>The only way to fix this is to a) ensure you read your data using the <em>correct codecs</em>, and b) then treat <em>all text</em> as Unicode throughout your code, and only encode at the last moment to the correct output codec.</p>
<p>Handling Unicode code points with <a href="https://docs.python.org/2/library/functions.html#ord" rel="nofollow"><code>ord()</code></a> and <a href="https://docs.python.org/2/library/functions.html#unichr" rel="nofollow"><code>unichr()</code> (in Python 2)</a> and <a href="https://docs.python.org/3/library/functions.html#chr" rel="nofollow"><code>chr()</code> in Python 3</a> will then work as expected:</p>
<pre><code>&gt;&gt;&gt; lastletter = u'Î'
&gt;&gt;&gt; ord(lastletter)
206
&gt;&gt;&gt; unichr(ord(lastletter) + 1)
u'\xcf'
&gt;&gt;&gt; print unichr(ord(lastletter) + 1)
Ï
</code></pre>
<p>You may want to read up on Python and Unicode:</p>
<ul>
<li><p><a href="http://nedbatchelder.com/text/unipain.html" rel="nofollow">Pragmatic Unicode</a> by Ned Batchelder</p></li>
<li><p><a href="http://joelonsoftware.com/articles/Unicode.html" rel="nofollow">The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)</a> by Joel Spolsky</p></li>
<li><p>The <a href="http://docs.python.org/2/howto/unicode.html" rel="nofollow">Python Unicode HOWTO</a></p></li>
</ul>
</div>
<span class="comment-copy">don't operate (concatenate, change characters) on encoded strings. Operate on unicode (decoded) strings, and <b>encode only after you're finished</b></span>
<span class="comment-copy"><i>Í is ascii 205, Î is ascii 206</i>. No, they are not. Those characters are <b>not in the ASCII standard</b>, which only has 128 codepoints. They are iso-8859-1 (Latin-1) characters, and in <i>that</i> standard they are indeed encoded to 205 and 206. They also have the same <i>Unicode</i> codepoint.</span>
<span class="comment-copy">Are you using Python 2 or 3 here?</span>
<span class="comment-copy">Why do you want to "increment" a character? Depending on the encoding, you will get completely different results. I'm not aware of any special  relationship between characters and their successors.</span>
<span class="comment-copy">@oele3110: that table is <b>very wrong</b>; it appears to be using the Windows 1252 codepage instead, but that codepage only has 256 codepoints. Where the remaining 744 characters come from is aynone's guess, they do correspond with Unicode, but with Windows 1252 mixed in the table is <i>worthless</i>. See <a href="http://en.wikipedia.org/wiki/ASCII" rel="nofollow noreferrer">Wikipedia</a> for a proper ASCII table.</span>
