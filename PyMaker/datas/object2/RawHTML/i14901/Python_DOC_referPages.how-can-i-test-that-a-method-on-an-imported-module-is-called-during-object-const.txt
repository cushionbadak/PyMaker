<div class="post-text" itemprop="text">
<p>I'm working on a Reddit bot to learn TDD in python. </p>
<p>I have a module with a class that is something like this:</p>
<pre><code>from praw import Reddit


class Bot():
    def __init__(self):
        self.reddit = Reddit(user_agent='myBot')
        self.reddit.login('fake', 'fakePassword')
</code></pre>
<p>In my test suite I have a setup method like this:</p>
<pre><code>@patch('bot.bot.Reddit.login')
def setUp(self, mocked_reddit):
    self.mocked_reddit = mocked_reddit
    self.subject = Bot()
</code></pre>
<p>..and  a test like this:</p>
<pre><code>def should_call_reddit_login_when_initialized_test(self):
        self.assertTrue(self.mocked_reddit.assert_called_with('fake', 'fakePassword'))
</code></pre>
<p>It seems like my patch is only partially working. It doesn't actually call the Reddit API which is good. The assertion is always false however. </p>
<pre><code>line 22 in should_call_reddit_login_when_initialized_test
      self.assertTrue(self.mocked_reddit.assert_called_with('fake', 'fakePassword'))
   AssertionError: None is not true
</code></pre>
<p>Ideally I could just mock the entire Reddit class and assert the methods are called with expected arguments later. How can I accomplish this? </p>
</div>
<div class="post-text" itemprop="text">
<p>You are asking two different things:</p>
<ol>
<li>Why my assert doesn't work</li>
<li>How can I mock entire <code>Reddit</code></li>
</ol>
<p>For <em>1</em> @wim answer is correct and tell to you exactly how to fix it: replace your test line by:</p>
<pre><code>self.mocked_reddit.assert_called_with('fake', 'fakePassword')
</code></pre>
<p><code>assert_*</code> mock's call already raise exceptions when assert fail.</p>
<p>To take care of <em>2</em> you should patch <code>'bot.bot.Reddit'</code> instead and take in account that your object will be the <code>return_value</code> of your mock. In this case I strongly recommend to use <code>autospec=True</code> to preserve <code>Reddit</code> complete signature, take a look to <a href="https://docs.python.org/3/library/unittest.mock.html#autospeccing" rel="nofollow">Autospeccing</a> to more details.</p>
<p>In this case your test become:</p>
<pre><code>@patch('bot.bot.Reddit', autospec=True)
def setUp(self, mocked_reddit_class):
    self.mocked_reddit_class = mocked_reddit_class
    self.mocked_reddit = mocked_reddit_class.return_value
    self.subject = Bot()

def should_call_reddit_login_when_initialized_test(self):
    self.mocked_reddit.login.assert_called_with('fake', 'fakePassword')
</code></pre>
<p>In this case you should take care of use <code>self.mocked_reddit</code> to check object method and <code>self.mocked_reddit_class</code> to check both static and class methods. Follow a simple example:</p>
<pre><code>import unittest
from unittest.mock import patch

class A():
    def b(self, a, b):
        pass
    @classmethod
    def c(cls,a,b):
        pass
    @staticmethod
    def d(a,b):
        pass

def ab(a,b):
    return A().b(a,b)

def ac(a,b):
    return A.c(a,b)

def ad(a,b):
    return A.d(a,b)

class MyTestCase(unittest.TestCase):
    @patch(__name__+".A", autospec=True)
    def test_something(self,mock_a):
        ab(1,2)
        mock_a.return_value.b.assert_called_with(1,2)
        ac(1,2)
        self.assertFalse(mock_a.return_value.c.called)
        mock_a.c.assert_called_with(1,2)
        ad(1,2)
        self.assertFalse(mock_a.return_value.d.called)
        mock_a.d.assert_called_with(1,2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>assert_called_with</code> <em>is</em> the assertion.  As long as that isn't firing, i.e. raising an <code>AssertionError</code> exception, then you're OK.  You needn't check its return value, which will always be <code>None</code>.</p>
</div>
<span class="comment-copy">The fact that you <i>need</i> to reference an outside library when performing a <i>unit</i> test is indicative of a  design flaw. You should really think about changing your code so that unit tests really can be unit tests with no side effects.</span>
<span class="comment-copy">I'm trying to mock it so that it isn't actually being called. I need to verify that it is called at some point, but I don't need the tests be calling the actual Reddit api.</span>
<span class="comment-copy">How can I patch the entire Reddit object in my setup method?</span>
