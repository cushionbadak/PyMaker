<div class="post-text" itemprop="text">
<p>I have a list of real values:</p>
<pre><code>values = [0.1, 2.9, 1.4, 5.7, 9.2, 3.8]
</code></pre>
<p>I want to have the number of items iterated over, until some condition was met. For example, if the condition was <code>item &gt; 5</code>, the result would be 3.</p>
<p>The easiest way, and perhaps most straight-forward way to do this would be:</p>
<pre><code>for index, item in enumerate(values):
    if (item &gt; 5):
        print(index)
        break
</code></pre>
<p>Is there any other way <strong>more pythonic, preferably one-liner</strong>, which does this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>itertools.takewhile</code> with <code>sum</code> which will take elements until the condition is met, using a generator expression we lazily evaluate:</p>
<pre><code>values = [0.1, 2.9, 1.4, 5.7, 9.2, 3.8]

from itertools import takewhile

print(sum(1 for _ in takewhile(lambda x: x&lt; 5,values)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your code is equivalent to the following generator expression</p>
<pre><code>In [1]: gen = (i for i, v in enumerate(values) if v &gt; 5)
</code></pre>
<p><a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow"><code>next(</code></a><code>gen )</code> will return the index of the first matching element</p>
<pre><code>In [2]: next(gen)
Out[2]: 3
</code></pre>
<p>or raise <code>StopIteration</code> (if there are no such elements) - if this is a problem consider adding some default value e.g <code>None</code>:</p>
<pre><code>In [3]: next((i for i, v in enumerate(values) if v &gt; 10), None) is None
Out[3]: True
</code></pre>
<p>or using <a href="https://docs.python.org/3/library/itertools.html#itertools.takewhile" rel="nofollow"><code>itertools.takewhile</code></a> with <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow"><code>sum</code></a> (please note that you'll need to negate the predicate):</p>
<pre><code>In [4]: import itertools

In [5]: it = itertools.takewhile(lambda x: x &lt;= 5, values)

In [6]: sum(1 for _ in it)
Out[6]: 3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For lists, Padraic's answer! Using NumPy is definitely fastest if data structure is already an array...</p>
<pre><code>In [370]: a = np.array(values)

In [371]: (a&gt;5).argmax()
Out[371]: 3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The most pythonic way to do this is with a comprehension list.</p>
<pre><code>print next(ind for ind, i in enumerate([0.1, 2.9, 1.4, 5.7, 9.2, 3.8]) if i &gt; 5)
</code></pre>
</div>
<span class="comment-copy">Why do you want a one-liner? What you have is perfectly clear and does what you want it to do.</span>
<span class="comment-copy">One-liner is not what I want, but I won't mind it. The above method is the standard procedure. It came to me that there must be a way of making it more concise, succint; similar to list comprehension abilities in python.</span>
<span class="comment-copy">Thanks. Can't say that the code is clearer, but it is concise, and succinct anyways. In terms of efficiency, though, will it not take a lot of function calls, if we have a really large list?</span>
<span class="comment-copy">@skuzzy,   do you mean in terms of speed or memory?</span>
<span class="comment-copy">@Padraic Both. Lazy evaluation, I believe, guarantees better memory efficiency than the other solutions. but speed? The naive solution (in my question) does not have any memory or performance overhead.</span>
<span class="comment-copy">@skuzzy, yes,  generators carry more overhead than a simple loop, it is a trade off between space vs time.  If  you wanted the most efficient solution speed wise then your simple loop would almost certainly be the most efficient. Unless you were running the code numerous times and the lists were very very large then any  solution would not cause many real issues.</span>
<span class="comment-copy">This does not produce the expected result (3).</span>
<span class="comment-copy">I do not want the total number of elements satisfying some condition. I suppose I have it clear in the question.</span>
<span class="comment-copy">@wflynny thats was just a sample with comprehension list. I update the answer with the correct code to this question.</span>
<span class="comment-copy">@skuzzy updated, check it.</span>
