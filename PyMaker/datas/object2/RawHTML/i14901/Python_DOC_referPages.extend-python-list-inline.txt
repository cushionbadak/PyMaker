<div class="post-text" itemprop="text">
<p>I'm looking for an alternative to the <em>list.extend()</em> method that works inline.</p>
<p>Instead of</p>
<pre><code>x = range(15,30,3)
x.extend([0])
print (x)

&gt;&gt;&gt; [15, 18, 21, 24, 27, 0]
</code></pre>
<p>I need an equivalend that works inline, like</p>
<pre><code>print range(15,30,3).extend([0])

&gt;&gt;&gt; None
</code></pre>
<p>But extend does not return the list itself.</p>
<p>Is there any fancy out-of-the-box commmand to achieve the same?</p>
</div>
<div class="post-text" itemprop="text">
<p>Just concatenate these lists with <code>+</code> operator:</p>
<pre><code>range(15, 30, 3) + [0]
</code></pre>
<p>Or, if you need an iterator and the <code>list</code> is huge, use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="noreferrer"><code>itertools.chain</code></a>:</p>
<pre><code>import itertools
it = itertools.chain(range(15, 30, 3), [0])
</code></pre>
<p>A quick note: <a href="https://docs.python.org/3/library/stdtypes.html?highlight=range#range" rel="noreferrer"><code>range</code></a> creates a <code>range</code> object in Python 3+, which doesn't allow concatenation:</p>
<blockquote>
<p>Ranges implement all of the common sequence operations except
  concatenation and repetition (due to the fact that range objects can
  only represent sequences that follow a strict pattern and repetition
  and concatenation will usually violate that pattern).</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3+, like @vaultah said, range creates <code>range</code> object. But you can create <code>list</code> from the range object first.</p>
<pre><code>x = list(range(15, 30, 3)) + [0]
</code></pre>
</div>
<span class="comment-copy">Ah, <code>print sum([range(15,30,3)],[0])</code> seems to work for my case...</span>
<span class="comment-copy">I don't understand why it doesn't work.  This doesn't work either ["hi"].extend(["my", "name", "is"]).  It results in None.</span>
<span class="comment-copy">Oops, somtimes I don't see the obvious...Thanks, solved :)</span>
