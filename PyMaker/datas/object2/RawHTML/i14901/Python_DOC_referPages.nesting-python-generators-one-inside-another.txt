<div class="post-text" itemprop="text">
<p>I have two functions (generator).</p>
<pre><code>def a():
  yield 1
  yield 2


def b():
  yield 'A'
  yield 'B'
  yield a()
</code></pre>
<p>Now I want to iterate over <code>b()</code> and expect it should output <code>A B 1 2</code>. But no. Its giving this.</p>
<pre><code>In [11]: for i in b():
   ....:     print i
   ....:     
A
B
&lt;generator object a at 0x10fc3ddc0&gt;
</code></pre>
<p>How can I get the required output?</p>
</div>
<div class="post-text" itemprop="text">
<p>On python3.3+, you can use <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-380" rel="noreferrer"><code>yield from</code></a>:</p>
<pre><code>def b():
    yield 'A'
    yield 'B'
    yield from a()
</code></pre>
<p>In versions prior to python3.3, you need to yield the values explicitly in a loop:</p>
<pre><code>def b():
    yield 'A'
    yield 'B'
    for item in a():
        yield item
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3. You could use <code>yield from</code></p>
<pre><code>def a():
  yield 1
  yield 2


def b():
  yield 'A'
  yield 'B'
  yield from a()
</code></pre>
</div>
<span class="comment-copy">Why would you expect <code>A B 1 2</code>? You're <code>yield</code>ing the <i>generator object itself</i>, not its contents.</span>
<span class="comment-copy">My bad luck its not available on python2. But this is what I expected actually!</span>
<span class="comment-copy">@ReutSharabani -- Sorry, it means I was having a hard time typing :-)  You should still be able to see my comment on your now deleted post, but basically I was pushing back on the notion that <code>yield from</code> is simply "syntatic sugar" as it is true generator delegation -- and accomplishing the same thing prior to <code>yield from</code> is tricky.</span>
