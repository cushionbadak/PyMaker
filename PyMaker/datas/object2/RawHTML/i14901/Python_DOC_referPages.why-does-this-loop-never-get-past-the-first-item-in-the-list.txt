<div class="post-text" itemprop="text">
<p>I have a function that is supposed to increment each element in the odd rows of a matrix by 5, and each element in the even rows by 10.  I have written the code below:</p>
<pre><code>def incrementRows(matrix):
    for i in matrix:
        print(matrix.index(i))

        if matrix.index(i) % 2 == 0:
            matrix[matrix.index(i)] = [x + 5 for x in matrix[matrix.index(i)]]
        else:
            matrix[matrix.index(i)] = [x + 10 for x in matrix[matrix.index(i)]]


    return matrix


matrix = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]

print(incrementRows(matrix))
</code></pre>
<p>The problem with this code, is that judging by the print(matrix.index(i)) statement in the function, the loop never passes the first item in the list.  I cannot understand why.  Below is the output:</p>
<pre><code>0
0
0
[[16, 17, 18, 19, 20], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]
</code></pre>
<p>If I take the If/else statements out of the function, then the loop will iterate through each item in the list properly.  </p>
<pre><code>def incrementRows(matrix):
    for i in matrix:
        print(matrix.index(i))

    return matrix


matrix = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]

print(incrementRows(matrix))
</code></pre>
<p>Result:</p>
<pre><code>0
1
2
[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]
</code></pre>
<p>Can anybody tell me why the If/else statements in the function are preventing the loop from iterating through each item in the list?</p>
</div>
<div class="post-text" itemprop="text">
<p>With your given data, you're changing the matrix at each step to ensure what was the next item in it is always found at index 0.</p>
<p>To check that, change</p>
<pre><code>print(matrix.index(i))
</code></pre>
<p>to</p>
<pre><code>print(i, matrix, matrix.index(i))
</code></pre>
<p>and you'll see the much more informative output:</p>
<pre><code>[1, 2, 3, 4, 5] [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]] 0
[6, 7, 8, 9, 10] [[6, 7, 8, 9, 10], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]] 0
[11, 12, 13, 14, 15] [[11, 12, 13, 14, 15], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]] 0
</code></pre>
<p>See?  Each time, you're changing the 0th index so it equals the next item in the matrix.</p>
<p>Looping on a list's items and then doing an <code>.index</code> of each item on the list, of course, will always find the <strong>first</strong> occurrence of a copy of each item -- besides wasting a lot of computation in any case (making a loop O(N squared) that should of course be O(N)) this will provoke truly weird results in cases like yours.</p>
<p>To get back to sanity, change the part:</p>
<pre><code>def incrementRows(matrix):
    for i in matrix:
        print(matrix.index(i))
</code></pre>
<p>to, e.g</p>
<pre><code>def incrementRows(matrix):
    for where in range(len(matrix)):
        print(where)
</code></pre>
<p>and use <code>where</code> throughout the rest wherever you're now re-computing (wasting ridiculous numbers of cycles) <code>matrix.index(i)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that on the second iteration, the first and second items compare equal, so index just gives you the first one again.</p>
<p>I believe it's time for you to learn about <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow">enumerate()</a>. Basically here <code>i</code> is just the index without having to scan the list for matches over and over.</p>
<pre><code>def incrementRows(matrix):
    for i, item in enumerate(matrix):
        print(i)

        if i % 2 == 0:
            matrix[i] = [x + 5 for x in item]
        else:
            matrix[i] = [x + 10 for x in item]


    return matrix


matrix = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]

print(incrementRows(matrix))
</code></pre>
<p>The code is much easier to read and it works properly now</p>
</div>
<div class="post-text" itemprop="text">
<p>It'll be much more straight-forward here to use a list-comp, and base the modulus on the "row number" that you're iterating over inside a conditional expression to choose either to add 5 or 10, eg:</p>
<pre><code>matrix = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]
result = [
    [n + 5 if rowno % 2 == 0 else n + 10 for n in row] 
    for rowno, row in enumerate(matrix)
]
# [[6, 7, 8, 9, 10], [16, 17, 18, 19, 20], [16, 17, 18, 19, 20]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First off, you're modifying the structure of a list while iterating over it. <a href="https://stackoverflow.com/questions/1637807/modifying-list-while-iterating">Don't do that</a>.</p>
<p>But I think you do that because you don't realize what this does:</p>
<pre><code>for i in matrix:
    print(matrix.index(i))
</code></pre>
<p>I don't know if you realize this, but <code>i</code> is going to be <em>the element in the list at that loop in the iteration</em>. An example:</p>
<pre><code>matrix = [[1,2],[3,4],[5,6]]
for row in matrix:
    print(row)
</code></pre>
<p>Outputs:</p>
<pre><code>[1,2]
[3,4]
[5,6]
</code></pre>
<p>And <code>matrix.index(i)</code> is going to result in the index of the 'value' <code>i</code> in the list <code>matrix</code> using a simple linear search.</p>
<p>If you want a "c-style" for-loop over an index, you'd do it like so:</p>
<pre><code>for i in xrange(len(matrix)): # Use just range(len(matrix)) if python 3.X
    print(matrix[i])
</code></pre>
<p>However, python has a nifty method, <code>enumerate</code>, which will give us both the index and the value at a location in an iterator.</p>
<p>In which case your code would become the following:</p>
<pre><code>def increment_rows(matrix):
    for i,row in enumerate(matrix):
        print(i,row)
        matrix[i] = [v + 5 for v in row] if i % 2 else [v + 10 for v in row]
    print(matrix)
    return matrix
</code></pre>
<p>Which will result in the output you want. Of course you can actually collapse this into a single one-liner list comp leveraging <code>enumerate</code>:</p>
<pre><code>def increment_rows(matrix):
    return [([v + 5 for v in row] if i % 2 else [v + 10 for v in row]) for i,row in enumerate(matrix)]
</code></pre>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/1637807/modifying-list-while-iterating">Modifying list while iterating</a></span>
<span class="comment-copy"><code>index()</code> returns the position of a value in a list, this doesn't <i>seem</i> to be what you want. What happens if you replace <code>matrix.index(i)</code> with just <code>i</code>?</span>
<span class="comment-copy">If you need <code>i</code> to be index of the matrix instead of the value at that index, you can use <code>enumerate</code>, e.g. <code>for i, row in enumerate(matrix): print(i, row)</code>.</span>
<span class="comment-copy">A note, the OP's original code has their cases backwards since it's supposed to add 10 to <i>even</i> rows, which would be when <code>i%2==0</code>.</span>
<span class="comment-copy">A note, the OP's original code has their cases backwards since it's supposed to add 10 to <i>even</i> rows, which would be when <code>i%2==0</code>.</span>
<span class="comment-copy">@aruisdante I was pondering that - I admit I went with the logic in the OPs code instead of the reading properly the previous sentence though... I'm sure the OP can manage to swap the numbers around easily enough :p</span>
<span class="comment-copy">Actually, the OP is <b>not</b> modifying the <b>structure</b> -- he's modifying fixed-places <b>items</b> within the list, which is just fine.  He's wrong in a completely different way -- the use (and over-use) of <code>matrix.index(i)</code>.</span>
