<div class="post-text" itemprop="text">
<p>My webapp wants to send a message to AWS SQS with boto and I'd want to mock out sending the actual message and just checking that calling send_message is called. However I do not understand how to use python mock to patch a function that a function being tested calls.</p>
<p>How could I achieve mocking out boto con.send_message as in the pseudo-like code below?</p>
<p>views.py:</p>
<pre><code>@app.route('/test')
def send_msg():
    con = boto.sqs.connect_to_region("eu-west-1",aws_access_key_id="asd",aws_secret_access_key="asd")
    que = con.get_queue('my_queue')
    msg = json.dumps({'data':'asd'})
    r=con.send_message(que, msg)
</code></pre>
<p>tests.py</p>
<pre><code>class MyTestCase(unittest.TestCase):
    def test_test(self):
        with patch('views.con.send_message') as sqs_send:
            self.test_client.get('/test')
            assert(sqs_send.called)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To do this kind of test you need <code>patch</code> <code>connect_to_region()</code>. When this method is patched return a <code>MagicMock()</code> object that you can use to test all your function behavior.</p>
<p>Your test case can be something like this one:</p>
<pre><code>class MyTestCase(unittest.TestCase):
    @patch("boto.sqs.connect_to_region", autospec=True)
    def test_test(self, mock_connect_to_region):
        #grab the mocked connection returned by patched connect_to_region
        mock_con = mock_connect_to_region.return_value
        #call client
        self.test_client.get('/test')
        #test connect_to_region call
        mock_connect_to_region.assert_called_with("eu-west-1",aws_access_key_id="asd",aws_secret_access_key="asd")
        #test get_queue()
        mock_con.get_queue.assert_called_with('my_queue')
        #finaly test send_message
        mock_con.send_message.assert_called_with(mock_con.get_queue.return_value, json.dumps({'data':'asd'}))
</code></pre>
<p>Just some notes:</p>
<ol>
<li>I wrote it in a <em>white box</em> style and check all calls of your view: you can do it more loose and omit some checks; use <code>self.assertTrue(mock_con.send_message.called)</code> if you want just check the call or use <code>mock.ANY</code> as argument if you are not interested in some argument content.</li>
<li><code>autospec=True</code> is not mandatory but very useful: take a look at <a href="https://docs.python.org/3/library/unittest.mock.html#autospeccing" rel="nofollow">autospeccing</a>.</li>
<li>I apologize if code contains some error... I cannot test it now but I hope the idea is clear enough.</li>
</ol>
</div>
<span class="comment-copy">Are your still interested on this question?</span>
