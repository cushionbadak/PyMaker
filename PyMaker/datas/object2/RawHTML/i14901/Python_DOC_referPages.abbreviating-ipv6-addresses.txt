<div class="post-text" itemprop="text">
<p>There is an array with IP addresses. I need a selected IP address to shorten. For example:</p>
<pre><code>['fcef:b0e7:7d20:0000:0000:0000:3b95:0565']
</code></pre>
<p>abbreviation rules: if a part beginning 0 need to del from part or there is e.g. <code>0000</code> need to change it to <code>0</code>.
The previous example after abbreviation:</p>
<pre><code>['fcef:b0e7:7d20:0:0:0:3b95:565']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should use the <a href="https://docs.python.org/3/library/ipaddress.html" rel="nofollow"><code>ipaddress</code></a> module from the standard library:</p>
<pre><code>&gt;&gt;&gt; import ipaddress
&gt;&gt;&gt; str(ipaddress.ip_address('fcef:b0e7:7d20:0000:0000:0000:3b95:0565'))
'fcef:b0e7:7d20::3b95:565'
&gt;&gt;&gt; ip = ipaddress.ip_address('fcef:b0e7:7d20:0000:0000:0000:3b95:0565')
&gt;&gt;&gt; ip.compressed
'fcef:b0e7:7d20::3b95:565'
&gt;&gt;&gt; ip.exploded
'fcef:b0e7:7d20:0000:0000:0000:3b95:0565'
</code></pre>
<hr/>
<p>This shortens the ip under the actual rules.</p>
<p>To shorten the ip with only the rule you cite, you can simply use <code>replace</code>:</p>
<pre><code>&gt;&gt;&gt; 'fcef:b0e7:7d20:0000:0000:0000:3b95:0565'.replace('0000', '0')
'fcef:b0e7:7d20:0:0:0:3b95:0565'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a generator expression within <code>join</code> as following :</p>
<pre><code>&gt;&gt;&gt; ':'.join('0' if i.count('0')==4 else i.lstrip('0') for i in s.split(':'))
'fcef:b0e7:7d20:0:0:0:3b95:565'
</code></pre>
<p>or as @J.F. Sebastian mentioned in comment you can just use <code>i == '0000'</code> instead of <code>count</code> !</p>
<pre><code>&gt;&gt;&gt; ':'.join('0' if i=='0000' else i.lstrip('0') for i in s.split(':'))
'fcef:b0e7:7d20:0:0:0:3b95:565'
</code></pre>
</div>
<span class="comment-copy">Have you tried anything yourself yet? Show us your code.</span>
<span class="comment-copy">Why you dont remove the zero from <code>b0e7:7d20</code> ?</span>
<span class="comment-copy">Kasra: because this is the task. :)</span>
<span class="comment-copy">JGreenwell:  it is a part of a task</span>
<span class="comment-copy">logic? one address is one string row I try more idea but I'm stuck with. Maybe is there a built in  ipv6 manipulation?</span>
<span class="comment-copy">Because the full task (in two step):  ip: 2001:0db8:03cd:0000:0000:ef45:0006:0123 - Each of the groups leading zeros omitted. For example, the way described above address 2001: DB8: 3CD: 0: 0: ef45: 6: 123 - Two or more groups only zeros can be simplified two colon empty between groups. With this rule further simplifying the previous address: 2001: DB8: 3CD :: ef45: 6: 123</span>
<span class="comment-copy">and the last rule: - If there are several places in title only zeros groups, then only once the latter method can be implemented abbreviation. In such a case always the more number of zero group should be shortened. If the group is located in the same number of zeros in many places, it is to be shorten only once the first from left. For example: 2001:0000:0000:00f5:0000:0000:0000:0123 shortened: 2001:0:0:f5::123</span>
<span class="comment-copy"><code>i == '0000'</code> would work as well.</span>
<span class="comment-copy">@J.F.Sebastian :) yeah! so simple! how i miss that?</span>
