<div class="post-text" itemprop="text">
<p>I am trying to build a random word generator that randomly selects a consonant and vowel structure (e.g. 'cvvc' could be 'mean'). It is not working. The problem when I run it in the debugger is at the last two lines at the end of the while loop.</p>
<pre><code>import random

vowelsList = ['a','e','i','o','u']

constonentsList = ['b','c','d','f','g','h','j','k','l','p','q','r','s','t','u','v','w','x','y','z','th','ch','sh','st','ck']

n = random.randint(1,2)
word = ''
struct = ''
length = 0
x = True
len_con = len(constonentsList)
len_vow = len(vowelsList)
length = 0

while x:
    if n == 1:
        word +=  constonentsList[random.randint(0,len_con - 1)]
        struct += 'c'
        length += 1
    elif n == 2:
        word += vowelsList[random.randint(0,len_vow - 1)]
        struct += 'v'
        length += 1
    n = random.randint(0,2)
    if (length &gt;= 3 &amp; n == 0):    #If the word is more than 3 letters and n == 0, don't continue
        x = False

print(word)
print(struct)
print(length)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your code is actually working, albeit only just. The length reflects how many consonants and vowels you produced, but the generated word can be longer as you include two-letter consonants like <code>th</code> and <code>sh</code>. However, there are improvements to be made. </p>
<p>The <code>&amp;</code> operator does not do what you think it does. It is a <a href="https://docs.python.org/3/reference/expressions.html#binary-bitwise-operations" rel="nofollow"><em>binary bitwise operator</em></a>; it sets binary flags in integers:</p>
<pre><code>&gt;&gt;&gt; 1 &amp; 1
1
&gt;&gt;&gt; 2 &amp; 1
3
</code></pre>
<p>You want to use the <a href="https://docs.python.org/3/reference/expressions.html#boolean-operations" rel="nofollow"><code>and</code> operator</a> instead to do <em>boolean logic AND</em> testing:</p>
<pre><code>if length &gt;= 3 and n == 0:
</code></pre>
<p>For booleans, using <code>&amp;</code> happens to work as the boolean type overloads the operator to return booleans still.</p>
<p>You can greatly simplify your program by using the <a href="https://docs.python.org/3/library/random.html#random.choice" rel="nofollow"><code>random.choice()</code> function</a>, and move the termination test to the <code>while</code> loop condition. The <code>length</code> variable is redundant; you can just use <code>len(struct)</code> here:</p>
<pre><code>import random
import string

vowels = 'aeiou'
consonants = [c for c in string.ascii_lowercase if c not in vowels]
consonants += ['th','ch','sh','st','ck']

n = random.randint(1, 2)
word = ''
struct = ''

while len(struct) &lt; 3 or n:  # minimum length 3
    if n == 1:
        word += random.choice(consonants)
        struct += 'c'
    elif n == 2:
        word += random.choice(vowels)
        struct += 'v'
    n = random.randint(0, 2)

print(word)
print(struct)
print(len(struct))
</code></pre>
</div>
<span class="comment-copy">Welcome to Stack Overflow! Please <a href="https://stackoverflow.com/posts/28921689/edit">edit</a> your question to explain what about the last two lines confuses you when debugging. Thanks for improving the question's reference value and making it more answerable!</span>
<span class="comment-copy">Hint: There is a <code>random.choice()</code> function that'll make it much easier to pick a random value from a list.</span>
