<div class="post-text" itemprop="text">
<p>So im trying to create my own type of brute force application.
I know there are already versions out there on how to do it but i want help with a certain type of way that I'm doing it</p>
<p>What I have done is make a loop that loops through an array of values</p>
<pre><code>poss = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0"]
</code></pre>
<p>which gives all the possible characters (excluding special characters), I'm adding them later.</p>
<p>I set a default password each time just for testing purposes this will be changed to the format of what I'm trying to breach at a later date.</p>
<pre><code>psw = str(input("Password?"))
</code></pre>
<p>So what I did was do a for loop that loops through all of the values in <code>poss</code> and if it is equal to the password it will break and print that it's correct</p>
<pre><code>for i in poss:
    print(i)
    if i is psw:
        print("\"" +i+ "\"", "Is the correct password!")
        break
</code></pre>
<p>This code here is fine.. if the password is one character.</p>
<p>But now I'm faced with the issue of adding a character. 
eg if I looped through to the end off <code>poss</code> and it still never matched <code>psw</code> how do i make it add a decimal place, eg once it's tried "0" I want it to restart but with a character before like "aa", then "ab" etc.</p>
<h2>UPDATE:</h2>
<p>i tryed adding more lists:</p>
<pre><code>possa = []
possb = []
possc = []
possd = []
</code></pre>
<p>etc.</p>
<p>I then went on and looped the values in:</p>
<pre><code>for i in poss:
    possa.append("a"+str(i))
    possb.append("b"+str(i))
    possc.append("c"+str(i))
    possd.append("d"+str(i))
</code></pre>
<p>etc.</p>
<p>This is one method but again that is long as I'd have to do this for every character in <code>poss</code> and then again for three characters like "aaa"</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from itertools import product
from string import ascii_lowercase, digits

possible_chars = ascii_lowercase + digits

for password_length in range(1, 9):  # up to 8 characters
    for chars in product(possible_chars, repeat=password_length):
        guess = "".join(chars)
        # test guess
</code></pre>
</div>
<span class="comment-copy">Use <code>==</code> not <code>is</code>.</span>
<span class="comment-copy">@MalikBrahimi Why? What is the difference?</span>
<span class="comment-copy">Is compares the references or their locations in memory. Thus, this value should never be true because they are two different variables. The double equals tests for equal values which will yield the desired result.</span>
<span class="comment-copy">@MalikBrahimi Ah i understand now, I always wondered why there would two different ways of saying the same thing</span>
<span class="comment-copy">Ahh, i have not seen this module before thank you. I shall try this and look into this module also. Is it basically to iterate through values I assume?</span>
<span class="comment-copy">Yes; it works like <code>product(['a','b','c'], ['d','e']) == [('a','d'), ('a','e'), ('b','d'), ('b','e'), ('c','d'), ('c','e')]</code>. The <code>repeat</code> parameter allows you to use one domain multiple times. For more info, see <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer">docs.python.org/3/library/itertools.html#itertools.product</a></span>
<span class="comment-copy">Thankyou that's alot of help!</span>
