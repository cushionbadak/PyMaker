<div class="post-text" itemprop="text">
<p>I am fetching price from a site in format: 10.990,00 which does not make sense as such. What is needed to make it as 10,990.00. I tried following but it's replacing all.</p>
<pre><code>price = "10.990,00"
price = price.replace(',','.',1)
price = price.replace('.',',',1)
</code></pre>
<p>What am I doing wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are replacing the <em>first</em> dot with a comma, after first replacing the first comma with a dot. The dot the first <code>str.replace()</code> inserted is not exempt from being replaced by the second <code>str.replace()</code> call.</p>
<p>Use the <a href="https://docs.python.org/2/library/stdtypes.html#str.translate" rel="nofollow noreferrer"><code>str.translate()</code> method</a> instead:</p>
<pre><code>try:
    from string import maketrans   # Python 2
except ImportError:
    maketrans = str.maketrans      # Python 3

price = price.translate(maketrans(',.', '.,'))
</code></pre>
<p>This'll swap commas for dots and vice versa as it traverses the string, and won't make double replacements, and is <em>very fast</em> to boot.</p>
<p>I made the code compatible with both Python 2 and 3, where <a href="https://docs.python.org/2/library/string.html#string.maketrans" rel="nofollow noreferrer"><code>string.maketrans()</code></a> was replaced by a the <a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="nofollow noreferrer">static <code>str.maketrans()</code> function</a>.</p>
<p>The exception here is Python 2 <code>unicode</code>; it works the same as <code>str.translate()</code> in Python 3, but there is no <code>maketrans</code> factory to create the mapping for you. You can use a dictionary for that:</p>
<pre><code>unicode_price = unicode_price.translate({u'.': u',', u',': u'.'})
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; try:
...     from string import maketrans   # Python 2
... except ImportError:
...     maketrans = str.maketrans      # Python 3
... 
&gt;&gt;&gt; price = "10.990,00"
&gt;&gt;&gt; price.translate(maketrans(',.', '.,'))
'10,990.00'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The reason your code doesn't work is because you convert <code>10.990,00</code> to <code>10.990.00</code> and then you are replacing <strong>all</strong> dots with comma. </p>
<p>Instead you can convert <code>,</code> to a symbol then convert <code>.</code> to <code>,</code> and the symbol to <code>.</code> :</p>
<pre><code>price = "10.990,00"
price = price.replace(',','COMMA')
price = price.replace('.',',')

price = price.replace('COMMA','.')

print(price)
</code></pre>
<p>Or as suggested by <a href="https://stackoverflow.com/questions/29036023/how-to-swap-comma-and-dot-in-a-string/29036080#comment46313002_29036080">georg</a> </p>
<pre><code>price = price.replace(',','COMMA').replace('.',',').replace('COMMA','.')
</code></pre>
<p>Note that i removed the optional argument in <code>replace()</code>, since numbers like <code>1.200.000,30</code> would not convert as expected.</p>
</div>
<div class="post-text" itemprop="text">
<p>@Martijn has given the best answer. you can also iterate over the <code>price</code> and <code>replace</code>.</p>
<pre><code>swap = {'.':',',',':'.'}
def switchDotsAndCommas(text):
    text = ''.join(swap.get(k, k) for k in text)
    print text

switchDotsAndCommas('10.990,00')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>May be this is a long answer but it is simple to execute and doesn't use any built in function:</p>
<pre><code>l=input("enter the input:")
m=[]
for i in l:
 if(i=='.'):
  m.append(',')
 elif(i==','):
  m.append('.')
 else:
  m.append(i)
print(''.join(m))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>price = "10.990,00"
price = price.replace(',','.')
price1=price[0:3].replace('.',',')
print(price1+price[3:9])
</code></pre>
</div>
<span class="comment-copy">The existing answers do a good job of answering your question, but taking a step back, what are you trying to accomplish? If you're trying to "fetch prices from a site and display them in your local currency, regardless of the source currency," you might benefit from converting the price to a number, then using your locale to display the price properly: <a href="http://stackoverflow.com/questions/8421922/how-do-i-convert-a-currency-string-to-a-floating-point-number-in-python" title="how do i convert a currency string to a floating point number in python">stackoverflow.com/questions/8421922/…</a> and <a href="http://stackoverflow.com/questions/3606517/python-how-to-format-currency-string" title="python how to format currency string">stackoverflow.com/questions/3606517/…</a></span>
<span class="comment-copy">Of course, my suggestion above doesn't account for currency conversion... but that's a whole other issue...</span>
<span class="comment-copy">The site I am scraping mistakenly swapped commas and dots.</span>
<span class="comment-copy">@Volatil3: while it could be a mistake, it's worth remembering that not everyone on Earth uses the same comma/period conventions for formatting numbers.</span>
<span class="comment-copy">It's interesting I am on Py27 and it says <code>Uresolved Reference</code> for <code>maketrans</code></span>
<span class="comment-copy">@Volatil3: that sounds like your IDE is telling you that; is it PyCharm? You can just use the first line without the <code>try..except</code> and PyCharm will not complain anymore, or you could just ignore that warning; the IDE sees the <code>maketrans = str.maketrans</code> line and doesn't know it will never be executed on Python 2.</span>
<span class="comment-copy">Yes it's PyCharm :-) let me run then</span>
<span class="comment-copy">For python2, I'd add a note that this won't work for unicode strings (e.g. they're getting <code>price</code> from some json).</span>
<span class="comment-copy">@georg: at which point you'd have to use your own dictionary: <code>{u'.': u',', u',': u'.'}</code>.</span>
<span class="comment-copy">You actually don't need the "COMMA" thing here, just <code>price.replace('.','@').replace(',','.').replace('@',',')</code></span>
<span class="comment-copy">@georg You are right. I will edit accordingly.</span>
<span class="comment-copy">It would be a big trouble if OP had to exchange 3 characters, 4 characters and so on  :D</span>
<span class="comment-copy">@Heisenberg I agree, but since he only mentions <code>,</code> and <code>.</code> this solution would be ok. Creating an answer based on further assumptions might make it unnecessarily complex.</span>
<span class="comment-copy">This is essentially what <code>str.translate()</code> <i>does</i>. But way, way faster.</span>
<span class="comment-copy">@MartijnPieters Is it faster due to some other algo being used or something else?</span>
<span class="comment-copy">@Volatil3: it is faster because it is done entirely in C.</span>
<span class="comment-copy">@MartijnPieters: yeah, but this is more generalizable, and uses a pattern which comes in handy in many other contexts as well.  It's worth knowing about.</span>
<span class="comment-copy">@DSM - it is as same as <code>list compression</code> is much faster than creating a list by iterating over other list as LC is entirely done in <code>C</code>. (I guess).</span>
<span class="comment-copy">this won't work for larger numbers (ex. "100.990,00" will result in "100.990.0")</span>
<span class="comment-copy">Please explain your answer - add some text around it.</span>
