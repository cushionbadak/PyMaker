<div class="post-text" itemprop="text">
<p>I'm currently writing a python wrapper for a C++-Library that does network communication via IPv6 link-local addresses. To initialize the library the network interface has to be selected. This is done via the link-local address of the desired interface.</p>
<p>On the C++ side we use boost <a href="http://www.boost.org/doc/libs/1_57_0/doc/html/boost_asio/reference/ip__address_v6.html" rel="nofollow">address_v6 objects</a>. On the python side the <a href="https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Address" rel="nofollow">ipaddress.IPv6Address</a> seemed to be a perfect match.</p>
<p>However I did not find a way to specify the scope id of the interface on the python side. </p>
<pre><code>ip = ipaddress.IPv6Address('fe80::3c4e:6a7:3f57:4cbc%12')
</code></pre>
<p>gives the error:</p>
<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\Python34\lib\ipaddress.py", line 1835, in __init__
    self._ip = self._ip_int_from_string(addr_str)
  File "C:\Python34\lib\ipaddress.py", line 1664, in _ip_int_from_string
    raise AddressValueError("%s in %r" % (exc, ip_str)) from None
ipaddress.AddressValueError: Only hex digits permitted in '4cbc%12' in 'fe80::3c4e:6a7:3f57:4cbc%12'
</code></pre>
<p>IPv6 link-local communication is pretty much impossible without the scope ids. </p>
<p>Am I missing something here or is the best way to specify an IPv6 link-local interface addresses as a string?</p>
</div>
<div class="post-text" itemprop="text">
<p>I recommend using the same structures as the Python socket module in all those cases where this makes any sense. Even if using your native library means the Python socket module isn't going to be used, it can still be beneficial, if some data structures are compatible between the two.</p>
<p>For representing an IP address, the Python socket module does indeed use a string. And that string can include a scope ID when appropriate.</p>
<p>The Python socket module also needs to represent socket addresses for that purpose it uses a tuple consisting of four fields. It could for example be:</p>
<pre><code>('ff02::2%eth0', 80, 0, 2)
</code></pre>
<p>Notice that this representation is slightly redundant, because the scope ID is specified both as <code>%eth0</code> inside the IP address and as <code>2</code> (the last element of the tuple).</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>((*_, sockaddr),) = socket.getaddrinfo(
    'ff02::1de:c0:face:8D%42',
    1234,
    socket.AF_INET6,
    socket.SOCK_DGRAM,
    socket.IPPROTO_UDP
)

assert sockaddr == ('ff02::1de:c0:face:8d', 1234, 0, 42)
</code></pre>
<p>see <a href="https://github.com/python/cpython/pull/4724" rel="nofollow noreferrer">https://github.com/python/cpython/pull/4724</a></p>
</div>
<span class="comment-copy">Thank you for the hint, this seems like a good alternative.</span>
<span class="comment-copy">see my solution. and my PR about redundancy</span>
