<div class="post-text" itemprop="text">
<p>I am trying to write a script which breaks down subnets larger(not greater than /16) than /24 to a /24 subnet.
Eg : 10.10.10.0/23 should give me 10.10.10.0/24 and 10.10.11.0/24</p>
<p>My logic is to first scan for the CIDR mask. if smaller than 24, then subtract that from 24 and that number(lets say x) gives the total number of /24s and then 1 to third octet of the IP x times and /24.</p>
<p>eg: 10.10.8.0/22 </p>
<pre><code>if 22 &lt; 24 
x = 24-22 = 2
total # of /24s = 2^x = 4
So output :
10.10.8.0/24
10.10.9.0/24 
10.10.10.0/24
10.10.11.0/24
</code></pre>
<p>I am not sure how to code/modify the string for the third octet only and add 1 to the third octet only. </p>
<p>I am thinking of creating a list of all the third octet values and re constructing the IPs. But if there is a simpler way out there, that would help me a lot !! </p>
<p>Thanks !</p>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at the <a href="https://pypi.python.org/pypi/netaddr" rel="nofollow">netaddr</a> package. It already comes with built-in support for understanding net masks and is able to generate a list of subnets for any desired length:</p>
<pre><code>&gt;&gt;&gt; n = netaddr.IPNetwork('10.10.8.0/22')
&gt;&gt;&gt; list(n.subnet(24))
[IPNetwork('10.10.8.0/24'), IPNetwork('10.10.9.0/24'), IPNetwork('10.10.10.0/24'), IPNetwork('10.10.11.0/24')]
&gt;&gt;&gt; [str(sn) for sn in n.subnet(24)]
['10.10.8.0/24', '10.10.9.0/24', '10.10.10.0/24', '10.10.11.0/24']
</code></pre>
<p>Since Python 3.3, this functionality is also available in the new built-in <a href="https://docs.python.org/3/library/ipaddress.html" rel="nofollow"><code>ipaddress</code></a> module.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're using Python 3.3 or newer, you can use <a href="https://docs.python.org/3/library/ipaddress.html" rel="nofollow">the <code>ipaddress</code> module</a>. Using the <a href="https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network.subnets" rel="nofollow"><code>subnets</code> method</a>, you can do it in one line:</p>
<pre><code>&gt;&gt;&gt; list(ipaddress.ip_network('10.10.8.0/22').subnets(new_prefix=24))
[IPv4Network('10.10.8.0/24'), IPv4Network('10.10.9.0/24'), IPv4Network('10.10.10.0/24'), IPv4Network('10.10.11.0/24')]
</code></pre>
<p>Converting to strings is trivial. Just cast to <code>str</code>.</p>
</div>
<span class="comment-copy">I am not asking for the code here, just a direction / few links on how to  approach should be good to go. thanks !</span>
<span class="comment-copy">Maybe try not to work with the decimal-dot notation, but the binary (or decimal, if you like) one. If you have a <code>IP/N</code> subnet, you want to generate all 24-bit numbers from 0 to <code>2^(24 - N) - 1</code>, add them to your base IP address, and you got yourself all prefixes for your <code>/24</code> subnets. Then you can convert them back to the decimal-dot notation if you like.</span>
<span class="comment-copy">@Carsten  But I will still have the "dots" The dots dont go away if i convert to binary eg : 192.168.1.1 == 11000000.10101000.00000001.00000001</span>
<span class="comment-copy">The dots are just there as a delimiter for you and fellow humans who have to enter these addresses. The string representation "192.168.1.1" is the same as the binary representation "11000000101010000000000100000001" and the same as the decimal representation "3232235777".</span>
<span class="comment-copy">@Carsten .. duh,, my bad.. human error(layer 8 issue) thanks for your ideas. i see its definitely possible that way</span>
<span class="comment-copy">I am still using py 2.7. But I will up-vote this since the output shows what I need ! thanks !</span>
