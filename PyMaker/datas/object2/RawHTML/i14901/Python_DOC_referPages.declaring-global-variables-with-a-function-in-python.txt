<div class="post-text" itemprop="text">
<p>This piece of JavaScript code works well. My issue isn't with fixing the code itself, rather how I can mimic this in Python.</p>
<pre><code>function setupSomeGlobals() {
    // Local variable that ends up within closure
    var num = 666;
    // Store some references to functions as global variables
    gAlertNumber = function() { alert(num); }
    gIncreaseNumber = function() { num++; }
    gSetNumber = function(x) { num = x; }
}
</code></pre>
<p>When <code>setupSomeGlobals()</code> is called it declares new functions to be used globally. Could this be mimicked in python somehow? I can't figure out how. Python functions don't really seem to run like JavaScript ones, since anything global needs to be returned somehow.</p>
</div>
<div class="post-text" itemprop="text">
<p>With the standard disclaimer of <strong>do not do this in real code</strong>, a Python (3) translation of your Javascript would be the following:</p>
<pre><code>def setup_some_globals():
    # Local variable
    num = 666

    # You have to explicitly declare variables to be global, 
    # otherwise they are local.
    global alert_number, increase_number, set_number

    def alert_number():
        # You can read a variable from an enclosing scope 
        # without doing anything special
        print(num)

    def increase_number():
        # But if you want to assign to it, you need to be explicit about 
        # it. `nonlocal` means "in an enclosing scope, but not 
        # global".
        nonlocal num
        num += 1

    def set_number(x):
        # Same as above
        nonlocal num
        num = x

# Usage:
&gt;&gt;&gt; setup_some_globals()
&gt;&gt;&gt; set_number(3)
&gt;&gt;&gt; increase_number()
&gt;&gt;&gt; alert_number()
4
</code></pre>
<p><a href="https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement" rel="nofollow">Docs for <code>nonlocal</code> statement</a></p>
<p><a href="https://docs.python.org/3/reference/simple_stmts.html#the-global-statement" rel="nofollow">Docs for <code>global</code> statement</a></p>
<p>But if you are actually doing this then there's almost certainly a much better way to do what you want to do.</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>You will have to create a separate file with functions you want
to use globally.</li>
<li>import this file in any other python file and you should be good to go.</li>
</ol>
<p>Is there a specific reason you want to mimic the exact functionality? If not this should suffice.</p>
</div>
<div class="post-text" itemprop="text">
<p>I know that this is the worst possible implementation ;) , but I was trying to entertain other possibility, which is somewhat closer to the javascript code in the question.</p>
<p>File 1 : setup_some_globals.py</p>
<pre><code>num = 666

def g_alert_number():
    global num
    print num


def g_increase_number():
    global num
    num += 1


def g_set_number(x):
    global num
    num = x
</code></pre>
<p>the variable num has scope of the module in which it's defined.</p>
<p>File 2 : use_some.py</p>
<pre><code>def use_global_functions():
    from setup_some_globals import g_alert_number, g_increase_number, g_set_number
    global g_alert_number
    g_alert_number = g_alert_number
    global g_increase_number
    g_increase_number = g_increase_number
    global g_set_number
    g_set_number = g_set_number


use_global_functions()
g_alert_number()
g_increase_number()
g_alert_number()
g_set_number(99)
g_alert_number()
</code></pre>
<p>You cannot access the functions, unless and until you call 'use_global_functions()'</p>
</div>
<span class="comment-copy">I suppose my question was asked more to explore the bounds of Python functions. I know that you could simply import globals in other ways. Is there a way to make/import functions after a certain event?</span>
