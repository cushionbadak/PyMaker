<div class="post-text" itemprop="text">
<p>I have a multi dimensional list:</p>
<pre><code>multiDimList = [['a',1],['a',1],['a',1],['b',2],['c',3],['c',3]]
</code></pre>
<p>I'm trying to sum the instances of element <code>[1]</code> where element <code>[0]</code> is common.</p>
<p>To put it more clearly, my desired output is another multi dimensional list:</p>
<pre><code>multiDimListSum = [['a',3],['b',2],['c',6]]
</code></pre>
<p>I see I can access, say the value '2' in <code>multiDimList</code> by</p>
<pre><code>x = multiDimList [3][1]
</code></pre>
<p>so I can grab the individual elements, and could probably build some sort of function to do this job, but it'd would be <em>disgusting</em>.</p>
<p>Does anyone have a suggestion of how to do this pythonically?</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming your actual sequence has similar elements grouped together as in your example (all instances of <code>'a'</code>, <code>'b'</code> etc. together), you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow"><code>itertools.groupby()</code></a> and <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow"><code>operator.itemgetter()</code></a>:</p>
<pre><code>from itertools import groupby
from operator import itemgetter

[[k, sum(v[1] for v in g)] for k, g in groupby(multiDimList, itemgetter(0))]

# result: [['a', 3], ['b', 2], ['c', 6]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Zero Piraeus's answer covers the case when field entries are grouped in order. If they're not, then the following is short and reasonably efficient.</p>
<pre><code>from collections import Counter
reduce(lambda c,x: c.update({x[0]: x[1]}) or c, multiDimList, Counter())
</code></pre>
<p>This returns a collection, accessible by element name. If you prefer it as a list you can call the .items() method on it, but note that the order of the labels in the output may be different from the order in the input even in the cases where the input <em>was</em> consistently ordered.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a <code>dict</code> to accumulate the total associated to each string</p>
<pre><code>d = {}
multiDimList = [['a',1],['a',1],['a',1],['b',2],['c',3],['c',3]]
for string, value in multiDimList:
    # Retrieves the current value in the dict if it exists or 0
    current_value = d.get(string, 0) 
    d[string] += value
print d # {'a': 3, 'b': 2, 'c': 6}
</code></pre>
<p>You can then access the value for <code>b</code> by using <code>d["b"]</code>.</p>
</div>
<span class="comment-copy">What do you mean by disgusting, Any approach to a problem is justified if gets the desirable output.</span>
<span class="comment-copy">You are right of course. It's just I tend to write code that stinks, and as a inexperienced coder I'm pretty self deprecating. I always try to provide examples of what I've tried on SO, but in this instance I think I'd just be way off base.</span>
<span class="comment-copy">As you anticipated, I hadn't included all the nuances of the problem in my example. To first sort my list, I combined your answer with: <a href="http://stackoverflow.com/questions/20099669/python-sort-multidimensional-array-based-on-2nd-element-of-subarray" title="python sort multidimensional array based on 2nd element of subarray">stackoverflow.com/questions/20099669/â€¦</a></span>
<span class="comment-copy">It's probably worth mentioning that <code>reduce()</code> is no longer a builtin in Python 3.x, and has to be imported from <code>functools</code>. But yes, this is a good solution where the input isn't grouped.</span>
