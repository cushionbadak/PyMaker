<div class="post-text" itemprop="text">
<p>What is the "best" way to merge two nested dictionaries of depth 2?</p>
<p>For example, I'd like to merge the following two dictionaries:</p>
<pre><code>dicA: - user1 {name,age,sex}
      - user2 {name,age,sex}

dicB  - user1 {location,job}
      - user3 {location,job}
</code></pre>
<p>In order to get:</p>
<pre><code>dic_merged - user1 {name,age,sex,location,job}
           - user2 {name,age,sex}
           - user3 {location,job}
</code></pre>
<p>Note that the subvalues in dicA and dicB will always be disjoint.
Currently, I'm using:</p>
<pre><code>def merge(dicA,dicB):
    for user in dicB:
        if user in dicA:
            dicA[user].update(dicB[user])
        else:
            dicA[user] = dicB[user]
    return dicA
</code></pre>
<p>Is there an alternative to update or a one-liner that can merge nested dictionaries? </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/tutorial/datastructures.html#dictionaries" rel="nofollow"><code>dict comprehension</code></a> (bottom of section):</p>
<pre><code>def merge(d1, d2):
     return {key: dict(d1.get(key, {}).items() + d2.get(key, {}).items()) for key in d1.keys() + d2.keys()}
</code></pre>
<p>This creates a list of all keys to use in a dict comprehension, and uses the more robust <a href="https://docs.python.org/2/library/stdtypes.html#dict.get" rel="nofollow"><code>dict.get</code></a> to prevent errors if key is only in the one of the <code>dict</code>s.</p>
<hr/>
<p>For Python 3 <a href="https://docs.python.org/3/library/stdtypes.html#dict-views" rel="nofollow"><code>dict view</code></a> objects are returned from <code>dict.keys()</code> and <code>dict.items()</code>, so you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow"><code>itertools.chain</code></a> (or wrap in  each <code>dict view</code> object in <code>list</code>):</p>
<pre><code>def merge(d1, d2):
     return {key: dict(chain(d1.get(key, {}).items(), d2.get(key, {}).items())) for key in chain(d1.keys(), d2.keys())}
</code></pre>
<p><strong>Note:</strong> Using <a href="https://docs.python.org/2/library/collections.html#collections.defaultdict" rel="nofollow"><code>collections.defaultdict(dict)</code></a> would make the whole thing nicer.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't think there's too much wrong with the way you suggest, though I would use a <code>try...except</code> clause:</p>
<pre><code>dicA = {'user1': { 'name': 'John', 'age': 45, 'sex': 'M'},
        'user2': { 'name': 'Jane', 'age': 42, 'sex': 'F'}}

dicB = {'user1': {'job': 'janitor', 'location': 'HK'},
        'user3': {'job': 'Python-wrangler', 'location': 'NY'}}

def merge(dicA,dicB):
    for user, d in dicB.items():
        try:
            dicA[user].update(dicB[user])
        except KeyError:
            dicA[user] = d
    return dicA
</code></pre>
<p>The result is then, for <code>dicA</code>:</p>
<pre><code>    {'user1': {'job': 'janitor', 'age': 45, 'name': 'John',
     'location': 'HK', 'sex': 'M'},
     'user2': {'age': 42, 'name': 'Jane', 'sex': 'F'},
     'user3': {'job': 'Python-wrangler', 'location': 'NY'}}
</code></pre>
</div>
<span class="comment-copy">Where did <code>def</code> go bro?</span>
<span class="comment-copy">You could have given actual input and output. It would have been easier to verify then.</span>
<span class="comment-copy">def didn't make the pseudocode cut. Apologies.</span>
<span class="comment-copy">What do you mean by the actual input/output? Because I actually have a dozen "subfields" in my dictionaries, and I thought it would have made it less readable.</span>
<span class="comment-copy">I don't think this works for Python 3: <code>d1.keys()</code> etc returns a <code>dict_keys</code> object and these can't be concatenated</span>
<span class="comment-copy">@xnx added method for python 3.</span>
<span class="comment-copy"><code>list(d1.keys()) + list(d2.keys())</code></span>
