<div class="post-text" itemprop="text">
<p>Is there a more elegant way to pass an optional list of integers to <code>argparse</code> than to <a href="https://stackoverflow.com/a/24866869/241211">pass a delimited string and parse it later</a>? I also have a positional argument.</p>
<pre><code>parser.add_argument('--ids', type=int, nargs='+')
parser.add_argument('cmd')
</code></pre>
<p>doesn't work, because <code>argparse</code> attempts to grab <code>cmd</code> and complains that it isn't an integer.</p>
<p>Ideally, I'd like to execute with one of</p>
<pre><code>program.py --ids 6,32,12 refresh
program.py --ids 6 32 12 refresh
</code></pre>
<p>or something similar, but also be able to</p>
<pre><code>program.py refresh
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you just want to parse arguments of the form <code>--ids 1,2,3</code> (no whitespace), you can use something like this:</p>
<pre><code>def convert(argument):
    return map(int, argument.split(','))  # 3.x: consider wrapping in list()

parser.add_argument('--ids', type=convert)
</code></pre>
<p>This will not handle arguments separated by whitespace, though you could probably mitigate that somewhat with a smarter <code>convert()</code> function.  You would then need to quote them, however, or else the shell would pass them as separate arguments.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>--</code> is a handy way of saying 'positional arguments start here'.</p>
<p>With your parser, these work:</p>
<pre><code>program.py refresh   # sets ids=None
program.py refresh --ids 1 2 3
program.py --ids 1 2 3 -- refresh
</code></pre>
<p>You could give the <code>--ids</code> argument a default (e.g. []) if you don't like the <code>None</code>.</p>
<p>Any problems with  <code>program.py refesh --ids 1,2,3</code> are due to how the shell splits your command line.  Look at the <code>sys.argv</code> list.</p>
<p>Problems with <code>program.py --ids 1 2 3 refresh</code> arise because when handling <code>--ids</code>, the parser tries to use all strings that follow that aren't obviously flags (e.g. with '-').  It does not use the 'int' type to test which ones to use and which to leave.</p>
<p>Now if the <code>ids</code> were positional, it would handle the <code>1 2 3 refresh</code>:</p>
<pre><code>parser.add_argument('ids',type=int,nargs='+')
parser.add_argument('cmd')
parser.parse_args('1 2 3 refresh'.split())
</code></pre>
<p>But that's because the parser uses a different strategy to allocate strings to several positional arguments.  It uses a <code>re</code> matcher that looks like <code>A+A</code>.</p>
<hr/>
<p>Kevin's <code>type</code> approach might be better implemented with a simple function:</p>
<pre><code>def mytype(astring):
    ll = astring.split(',')
    return [int(l) for l in ll]
parser.add_argument('--ids', type=mytype)
</code></pre>
<p>It could be generalized to handle quoted strings like "1 2 3". <code>type</code> can be any function that takes a string, and returns the desired value(s), and raises an error if it can't do the conversion.</p>
</div>
<span class="comment-copy">You could parse the string immediately instead of later, by passing an arbitrary callable as the <code>type</code>.</span>
<span class="comment-copy">@Kevin a la the <a href="https://docs.python.org/3/library/argparse.html#type" rel="nofollow noreferrer"><code>perfect_square</code></a> example?</span>
<span class="comment-copy">Yes, precisely.  You could use something like <a href="https://docs.python.org/3/library/operator.html#operator.methodcaller" rel="nofollow noreferrer"><code>operator.methodcaller('split', ',')</code></a> as your <code>type</code>, to split on commas automatically.</span>
<span class="comment-copy">@Kevin You should turn your comments into an answer</span>
