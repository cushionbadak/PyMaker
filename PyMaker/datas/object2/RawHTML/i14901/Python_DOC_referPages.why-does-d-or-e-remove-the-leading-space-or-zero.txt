<div class="post-text" itemprop="text">
<p>On SO question <a href="https://stackoverflow.com/questions/904928/python-strftime-date-without-leading-0">904928 (Python strftime - date without leading 0?)</a> Ryan answered:</p>
<blockquote>
<p>Actually I had the same problem and I realised that, if you add a
  hyphen between the % and the letter, you can remove the leading zero.</p>
<p>For example %Y/%-m/%-d.</p>
</blockquote>
<p>I faced the same problem and that was a great solution, BUT, why does this behave like this?</p>
<pre class="lang-python prettyprint-override"><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime(2015, 3, 5).strftime('%d')
'05'

&gt;&gt;&gt; datetime.datetime(2015, 3, 5).strftime('%-d')
'5'

# It also works with a leading space
&gt;&gt;&gt; datetime.datetime(2015, 3, 5).strftime('%e')
' 5'

&gt;&gt;&gt; datetime.datetime(2015, 3, 5).strftime('%-e')
'5'

# Of course other numbers doesn't get stripped
&gt;&gt;&gt; datetime.datetime(2015, 3, 15).strftime('%-e')
'15'
</code></pre>
<p>I cannot find any documentation about that? -&gt; <a href="https://docs.python.org/2/library/datetime.html" rel="noreferrer">python datetime docs</a> / <a href="https://docs.python.org/2/library/string.html" rel="noreferrer">python string operations</a></p>
<p>It seems like this doesn't work on windows machines, well I don't use windows but it would be interesting to know why it doesn't work?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior">Python <code>datetime.strftime()</code> delegates to C <code>strftime()</code> function that is platform-dependent</a>:</p>
<blockquote>
<p>The full set of format codes supported varies across platforms,
  because Python calls the platform C library’s strftime() function, and
  platform variations are common. To see the full set of format codes
  supported on your platform, consult the strftime(3) documentation.</p>
</blockquote>
<p><a href="http://man7.org/linux/man-pages/man3/strftime.3.html">Glibc notes for strftime(3)</a>:</p>
<blockquote>
<p><strong>-</strong>      (dash) Do not pad a numeric result string.</p>
</blockquote>
<p>The result on my Ubuntu machine:</p>
<pre><code>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.now().strftime('%d')
'07'
&gt;&gt;&gt; datetime.now().strftime('%-d')
'7'
</code></pre>
</div>
<span class="comment-copy">On my Windows build only your first example works without error.  The rest result in a <code>ValueError: Invalid format string</code>.  <a href="http://stackoverflow.com/questions/10807164/python-time-formatting-different-in-windows">This question</a> may shed some light on yours, regarding standard/portable directives vs. platform-specific "enhancements".</span>
<span class="comment-copy">So it depends on the libc implementation of each OS. thank you! Any hints about how/why those examples works generally on unix systems?</span>
<span class="comment-copy">This is great if you are working on Linux. What should you do when working on Windows?</span>
<span class="comment-copy">@NoctisSkytower I guess there wouldn't be the problem on Windows in the first place. If it doesn't support minus in the time format then there won't be the question  "why does minus remove anything."  No support — no question.</span>
<span class="comment-copy">A note to use a <code>#</code> instead of a <code>-</code> on Windows may be helpful to future readers.</span>
<span class="comment-copy">@NoctisSkytower if you think it is relevant to the current question, you could post your own answer.</span>
