<div class="post-text" itemprop="text">
<p>Basically, I want a script that opens a file, and then goes through the file and sees if the file contains any curse words. If a line in the file contains a curse word, then I want to replace that line with "CENSORED". So far, I think I'm just messing up the code somehow because I'm new to Python:</p>
<pre><code>filename = input("Enter a file name: ")
censor = input("Enter the curse word that you want censored: ")

with open(filename)as fi:
    for line in fi:
        if censor in line:
            fi.write(fi.replace(line, "CENSORED"))
    print(fi) 
</code></pre>
<p>I am new to this, so I'm probably just messing something up...</p>
<p>Line, as in This code (if "Hat" was a curse word):</p>
<pre><code>There Is 
A 
Hat
</code></pre>
<p>Would be:</p>
<pre><code>There Is 
A 
CENSORED 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You cannot write to the same file your are reading, for two reasons:</p>
<ul>
<li><p>You opened the file in read-only mode, you cannot write to such a file. You'd have to open the file in read-write mode (using <code>open(filename, mode='r+')</code>) to be able to do what you want.</p></li>
<li><p>You are replacing data as you read, with lines that are most likely going to be shorter or longer. You cannot do that in a file. For example, replacing the word <code>cute</code> with <code>censored</code> would create a longer line, and that would overwrite not just the old line but the start of the <em>next</em> line as well.</p></li>
</ul>
<p>You need to write out your changed lines to a <em>new</em> file, and at the end of that process replace the old file with the new.</p>
<p>Note that your <code>replace()</code> call is also incorrect; you'd call it on the line:</p>
<pre><code>line = line.replace(censor, 'CENSORED')
</code></pre>
<p>The easiest way for you to achieve what you want is to use the <a href="https://docs.python.org/3/library/fileinput.html" rel="nofollow"><code>fileinput</code> module</a>; it'll let you replace a file in-place, as it'll handle writing to another file and the file swap for you:</p>
<pre><code>import fileinput

filename = input("Enter a file name: ")
censor = input("Enter the curse word that you want censored: ")

for line in fileinput.input(filename, inplace=True):
    line = line.replace(censor, 'CENSORED')
    print(line, end='')
</code></pre>
<p>The <code>print()</code> call is a little magic here; the <code>fileinput</code> module temporarily replaces <code>sys.stdout</code> meaning that <code>print()</code> will write to the replacement file rather than your console. The <code>end=''</code> tells <code>print()</code> not to include a newline; that newline is already part of the original <code>line</code> read from the input file.</p>
</div>
<div class="post-text" itemprop="text">
<p>Consider:</p>
<pre><code>filename = input("Enter a file name: ")
censor = input("Enter the curse word that you want censored: ")

# Open the file, iterate through the lines and censor them, storing them in lines list
with open(filename) as f:
    lines = [line.replace(censor, 'CENSORED').strip() for line in f]

# If you want to re-write the censored file, re-open it, and write the lines
with open(filename, 'w') as f:
    f.write('\n'.join(lines))
</code></pre>
<p>We're using a list comprehension to censor the lines of the file.</p>
<p>If you want to replace the <em>entire line</em>, and not just the word, replace</p>
<pre><code>lines = [line.replace(censor, 'CENSORED').strip() for line in f]
</code></pre>
<p>with </p>
<pre><code>lines = ['CENSORED' if censor in line else line.strip() for line in f]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>filename = input("Enter a file name: ")
censor = input("Enter the curse word that you want censored: ")

with open(filename)as fi:
    for line in fi:
        if censor in line:
            print("CENSORED")
        else:
            print(line)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>with open('filename.txt', 'r') as data:
    the_lines = data.readlines()

with open('filename.txt', 'w') as data:
    for line_content in the_lines:

        if curse_word in line_content:
            data.write('Censored')

        else:
            data.write(line_content)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have only opened the file for reading.  Some options:</p>
<ul>
<li>Read the whole file in, do the replacement, and write it over the original file again.</li>
<li>Read the file line-by-line, process and write the lines to a new file, then delete the old file and rename in the new file.</li>
<li>Use the <a href="https://docs.python.org/2/library/fileinput.html" rel="nofollow">fileinput</a> module, which does all the work for you.</li>
</ul>
<p>Here's an example of the last option:</p>
<pre><code>import fileinput,sys
for line in fileinput.input(inplace=1):
    line = line.replace('bad','CENSORED')
    sys.stdout.write(line)
</code></pre>
<p>And use:</p>
<pre><code>test.py file1.txt file2.txt file3.txt
</code></pre>
<p>Each file will be edited in place.</p>
</div>
<span class="comment-copy">You're opening the file in read mode you can't write.</span>
<span class="comment-copy">Duplicate of another homework problem. Probably your classmate? <a href="http://stackoverflow.com/questions/28885457/replacing-lines-of-output-with-custom-message" title="replacing lines of output with custom message">stackoverflow.com/questions/28885457/â€¦</a></span>
<span class="comment-copy">Oh interesting! I'll have to check into writing the info to a new file. Thanks, also, at least we're trying! I just want to finally get a good night's sleep tonight..</span>
<span class="comment-copy">Write it not print.</span>
<span class="comment-copy">this will replace the entire line containing a curse word with "Censored".</span>
<span class="comment-copy">That's exactly what he wanted in the OP.</span>
