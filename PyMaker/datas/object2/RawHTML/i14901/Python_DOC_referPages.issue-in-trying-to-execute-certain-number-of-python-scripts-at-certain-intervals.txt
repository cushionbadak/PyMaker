<div class="post-text" itemprop="text">
<p>I am trying to execute certain number of <code>python scripts</code> at certain intervals. Each script takes a lot of time to execute and hence I do not want to waste time in waiting to run them sequentially. I tired this code but it is not executing them simultaneously and is executing them one by one:</p>
<p><strong>Main_file.py</strong></p>
<pre><code>import time
def func(argument):

    print 'Starting the execution for argument:',argument
    execfile('test_'+argument+'.py')


if __name__ == '__main__':

    arg = ['01','02','03','04','05']

    for val in arg:
        func(val)
        time.sleep(60)
</code></pre>
<p>What I want is to kick off by starting the executing of <code>first file</code>(<code>test_01.py</code>). This will keep on executing for some time. After <code>1 minute</code> has passed I want to start the simultaneous execution of <code>second file</code> (<code>test_02.py</code>). This will also keep on executing for some time. Like this I want to start the executing of all the scripts after gaps of 1 minute.</p>
<p>With the above code, I notice that the execution is happening one after other file and not simultaneously as the print statements which are there in these files appear one after the other and not mixed up.</p>
<p>How can I achieve above needed functionality?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using python 2.7 on my computer, the following seems to work with small python scripts as test_01.py, test_02.py, etc. when threading with the following code:</p>
<pre><code>import time
import thread

def func(argument):
    print('Starting the execution for argument:',argument)
    execfile('test_'+argument+'.py')


if __name__ == '__main__':

    arg = ['01','02','03']

    for val in arg:
        thread.start_new_thread(func, (val,))
        time.sleep(10)
</code></pre>
<p>However, you indicated that you kept getting a memory exception error.  This is likely due to your scripts using more stack memory than was allocated to them, as each thread is allocated 8 kb by default (on Linux).  You could attempt to give them more memory by calling</p>
<pre><code>thread.stack_size([size])
</code></pre>
<p>which is outlined here: <a href="https://docs.python.org/2/library/thread.html" rel="nofollow">https://docs.python.org/2/library/thread.html</a></p>
<p>Without knowing the number of threads that you're attempting to create or how memory intensive they are, it's difficult to if a better solution should be sought.  Since you seem to be looking into executing multiple scripts essentially independently of one another (no shared data), you could also look into the Multiprocessing module here:</p>
<p><a href="https://docs.python.org/2/library/multiprocessing.html" rel="nofollow">https://docs.python.org/2/library/multiprocessing.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If you need them to run parallel you will need to look into threading. Take a look at <a href="https://docs.python.org/3/library/threading.html" rel="nofollow">https://docs.python.org/3/library/threading.html</a> or <a href="https://docs.python.org/2/library/threading.html" rel="nofollow">https://docs.python.org/2/library/threading.html</a> depending on the version of python you are using.</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen" rel="nofollow noreferrer">import subprocess</a>, and then use <code>subprocess.Popen(['python', 'yourscript.py'])</code> instead of <code>execfile()</code>.</span>
<span class="comment-copy">@CarlGroner I have tried subprocess as well as threading and in both the cases <code>memory limit exceeded</code> error comes</span>
<span class="comment-copy">My scripts run for few hours each. I tries you method with a simple script where in main script there is <code>time.sleep(3)</code> and then in each separate script first there is print statement then <code>time.sleep(10)</code> and then another print statement. When I execute this then I do see first print statements of each separate file but not the second print statements for all.</span>
<span class="comment-copy">it seems as if as soon as the main process finishes, all threads are ended and hence we do not see second print statement for all of them</span>
<span class="comment-copy">Join the threads. <a href="http://stackoverflow.com/questions/11968689/python-multithreading-wait-till-all-threads-finished" title="python multithreading wait till all threads finished">stackoverflow.com/questions/11968689/â€¦</a></span>
<span class="comment-copy">I did used join and it runs into same memory limit exceeded error. I also specified the stack size to be 10MB but that also didn't resolved the issue</span>
<span class="comment-copy">Any data that you load into memory with an open command is going to be inherited by all processes that you spawn.  So, for instance, if you load a file, and then spawn a process, the spawned process will inherit a copy of that data.  Obviously, this is a problem.  You can avoid this by making sure that any load calls come AFTER you spawn a new process.  Looking at what you want to do, this shouldn't be a problem for you.</span>
<span class="comment-copy">I have tried threading but it is running into memory exception error. I can run these simultaneously in different shells at certain intervals but I want to automate that</span>
<span class="comment-copy">Then post your threaded code so that we can take a look at it because the only way to have functions run in parallel is to thread them.</span>
