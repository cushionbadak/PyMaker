<div class="post-text" itemprop="text">
<p>Is there any way to make an implicit initializer for modules (not packages)?
Something like:</p>
<pre><code>#file: mymodule.py
def __init__(val):
    global value
    value = 5
</code></pre>
<p>And when you import it:</p>
<pre><code>#file: mainmodule.py
import mymodule(5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>import</code> statement uses the <a href="https://docs.python.org/3/library/functions.html#__import__" rel="nofollow">builtin <code>__import__</code> function</a>.<br/>
Therefore it's not possible to have a module <code>__init__</code> function.</p>
<p>You'll have to call it yourself:</p>
<pre><code>import mymodule
mymodule.__init__(5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>These things often are not closed as duplicates, so here's a really nice solution from <a href="https://stackoverflow.com/questions/3720740/pass-variable-on-import">Pass Variable On Import</a>. TL;DR: use a config module, configure that before importing your module.</p>
<blockquote>
<p>[...] A cleaner way to do it which is very useful for multiple configuration
  items in your project is to create a separate Configuration module
  that is imported by your wrapping code first, and the items set at
  runtime, before your functional module imports it. This pattern is
  often used in other projects.</p>
<p><strong>myconfig/__init__.py :</strong></p>
<pre><code>PATH_TO_R_SOURCE   = '/default/R/source/path'
OTHER_CONFIG_ITEM  = 'DEFAULT'
PI                 = 3.14
</code></pre>
<p><strong>mymodule/__init__.py :</strong></p>
<pre><code>import myconfig

PATH_TO_R_SOURCE = myconfig.PATH_TO_R_SOURCE
robjects.r.source(PATH_TO_R_SOURCE, chdir = True) ## this takes time

class SomeClass:
  def __init__(self, aCurve):
    self._curve = aCurve

if myconfig.VERSION is not None:
  version = myconfig.VERSION
else:
  version = "UNDEFINED"

two_pi = myconfig.PI * 2
</code></pre>
<p>And you can change the behaviour of your module at runtime from the
  wrapper:</p>
<p><strong>run.py :</strong></p>
<pre><code>import myconfig

myconfig.PATH_TO_R_SOURCE = 'actual/path/to/R/source'
myconfig.PI = 3.14159
# we can even add a new configuration item that isn't present in the original myconfig:
myconfig.VERSION="1.0"

import mymodule
print "Mymodule.two_pi = %r" % mymodule.two_pi
print "Mymodule.version is %s" % mymodule.version
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>&gt; Mymodule.two_pi = 6.28318
&gt; Mymodule.version is 1.0
</code></pre>
</blockquote>
</div>
<span class="comment-copy">Code placed in the "root" of a module (not in a function) will be run on import.</span>
<span class="comment-copy">Why do you need to do this? Global variables are usually a bad idea.</span>
<span class="comment-copy">I can't place the code outside a function because I need to get arguments. Basically I want the module to have a global variable that all the methods use, and it will be passed when I initialize the module.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/3720740/pass-variable-on-import">Pass Variable On Import</a></span>
