<div class="post-text" itemprop="text">
<p>I was looking at an example in the Python library where the total number of occurrences of a word in a list are ordered by their frequency count in a dictionary:</p>
<pre><code>cnt = Counter()
for word in ['red', 'blue', 'red', 'green', 'blue', 'blue']:
    cnt[word] += 1
</code></pre>
<p>The output for <code>cnt</code> where the elements are listed in order of their frequency count:</p>
<pre><code>Counter({'blue': 3, 'red': 2, 'green': 1})
</code></pre>
<p>I want to make a set where the numerical frequencies aren't included, but the order the elements are listed is retained:</p>
<pre><code>{'blue', 'red', 'green'}
</code></pre>
<p>However in my attempt to achieve this:</p>
<pre><code>set(word for word, count in cnt.most_common(3))
</code></pre>
<p>I instead receive a set where the elements are ordered alphabetically instead of frequency count:</p>
<pre><code>{'blue', 'green', 'red'}
</code></pre>
<p>Is it possible to order the set according to the frequency count?</p>
</div>
<div class="post-text" itemprop="text">
<p>Sets are a unordered collection of unique elements, as such ordering them has no meaning whatsoever.</p>
<p>You probably want a list, which <em>is</em> ordered. The following uses a <a href="https://docs.python.org/3.4/tutorial/datastructures.html#list-comprehensions">list comprehension</a> to construct a list of the keys. </p>
<p>We can iterate over <a href="https://docs.python.org/3/library/collections.html#collections.Counter.most_common"><code>Counter.most_common()</code></a> which returns a sequence of <code>(key, value)</code> tuples in order.</p>
<pre><code>from collections import Counter

c = Counter({'blue': 3, 'red': 2, 'green': 1})

keys = [key for key, val in c.most_common()]

print(keys)
# ['blue', 'red', 'green']
</code></pre>
</div>
<span class="comment-copy">Sets aren't ordered, <i>at all.</i> If you did get alphabetic ordering then you cannot rely on it to be alphabetic next time.</span>
<span class="comment-copy">Why re-invent the wheel? <code>[w for w,n in c.most_common()]</code></span>
<span class="comment-copy">Off the top of my head I thought <code>most_common</code> didn't return all elements by default for some reason -_- Fixed anyway, thanks @tobias_k</span>
