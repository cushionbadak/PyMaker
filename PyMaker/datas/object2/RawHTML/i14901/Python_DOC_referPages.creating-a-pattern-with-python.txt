<div class="post-text" itemprop="text">
<p>With Python editor I am trying to recreate this specific line pattern over here:</p>
<pre><code>666666
6   6
6  6
6 6
66
6
</code></pre>
<p>This is the Code that I have created:</p>
<pre><code>steps=6
for s in range(steps):
    print('6' + (' ' * r) + '6')
</code></pre>
<p>However the output that I get instead is:</p>
<pre><code>66
6 6
6  6
6   6
6    6
6     6
</code></pre>
<p>Thus as you can see it almost does the opposite operation to what I wanted in the opening output above. If there is a way to reverse this output I have to what I want please share.</p>
</div>
<div class="post-text" itemprop="text">
<p>Let us start with building it in ascending order, that is like the diagram below</p>
<pre><code>6
66
6 6
6  6
66666
</code></pre>
<p>There is a series to the number of spaces depending after height = 1, that is from height = 2 the number of spaces have the series 0,1,2 and so on, therefore if height is n then the series begins at 2 where the space = 0 and ends at n - 1 where the number of spaces is equal to n - 3, and at height = n the number of 6s is equal to n - 2.</p>
<p>The code for this would be</p>
<pre><code>def print6(height):
...     print 6
...     for s in range(0, height - 2):
...             print str(6) + ' '*s + str(6)
...     print str(6)*2+str(6)*(height-2)
</code></pre>
<p>To reverse this</p>
<pre><code>def print6(height):
...     print str(6)*2+str(6)*(height-2)
...     for s in range(0, height - 2):
...             print str(6) + ' '*(height-3-s) + str(6)
...     print 6
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the built-in <code>reversed</code> function that returns an iterator that goes through the range in reverse.</p>
<pre><code>steps=6
for r in reversed(range(steps)):
     print('#' + (' ' * r) + '#')
</code></pre>
<p>Or you can use list splicing to revers the list like so:</p>
<pre><code>steps=6
for r in range(steps)[::-1]:
     print('#' + (' ' * r) + '#')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Aside from Martijn's comment on considering what kind of pattern you need to follow, i.e. how the number of spaces evolves from one line to the next, you may want to look into the documentation of the command <code>range</code> at <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow">PythonDocs on range()</a>. Currently you are only providing one argument:</p>
<pre><code> range(stop)
</code></pre>
<p>Python will then use default values for the remaining arguments: <code>start=0</code> and <code>step=1</code>. However, you can provide these explicitly. The 'step' argument is where you can put in reversed counting:</p>
<pre><code> range(start, stop[, step])
</code></pre>
</div>
<span class="comment-copy">Think about how many spaces you need to print on the first line, then on the second, etc. The relationship is the inverse of current count, relative to <code>steps</code>..</span>
<span class="comment-copy">In other words, if <code>s</code> is <code>1</code>, how many spaces do you need to print in between?</span>
<span class="comment-copy">Don't you mean <code>s</code> instead of <code>r</code>?</span>
<span class="comment-copy">I tried this code, it gives you an output of the opposite of the output I need above</span>
<span class="comment-copy">Do you think a range value of for r in range(666666,6,6): would make sense in this context because I start off with 666666 and then go ultimately till I end up with one 6, while going down by 6 each time</span>
<span class="comment-copy">or for s in  range(6, 1[, 1]): might work</span>
