<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/17649875/why-does-random-shuffle-return-none">Why does random.shuffle return None?</a>
<span class="question-originals-answer-count">
                    9 answers
                </span>
</li>
</ul>
</div>
<p>I define a tuple called <code>states</code> in my test environment. I then wish to step through this tuple in a random manner as I test my system:</p>
<pre><code>st = time.time()
for s in sorted(states,key=lambda k: random.random()):
    my_system.set_state(s)
    test.confirm_state(s) 
</code></pre>
<p>Each state should only be visited once. Is this the most pythonic way of shuffling my tuple?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python comes with batteries included. Use <a href="https://docs.python.org/3/library/random.html#random.shuffle" rel="nofollow noreferrer"><code>random.shuffle</code></a> on a sequence.</p>
<p>You must be aware that <code>random.shuffle</code> operates in place on a mutable sequence, which is why it does not return the list itself.</p>
<pre><code>l = list(states)
random.shuffle(l) # random.shuffle is returning None
for x in l:
    # do stuff
</code></pre>
</div>
<span class="comment-copy">You are using exactly what I advocated before. Since <code>random.shuffle()</code> would require you to create a list copy of the tuple first, I'd say your approach is fine. Closing as a dupe, as your basic question is essentially primarily opinion based.</span>
<span class="comment-copy">Now you have 3 lines instead of 1. Why is this more pythonic than what the OP has? :-P</span>
<span class="comment-copy">You have a point, as always :) Is shortness more pythonic than using what the library provides?</span>
<span class="comment-copy">Pythonicness is in the eye of the beholder. <code>sorted()</code> is also something the library provides, giving it <code>random.random()</code> as a key is just as pythonic, and it works just as well.</span>
<span class="comment-copy"><code>len(set(tuple(sorted(range(3), key=lambda x: random.randrange(2))) for i in range(10000))) == 5</code> but there are 6 permutations of <code>[0, 1, 2]</code>. Using <code>key=&lt;something random&gt;</code> can't generate all permutations with equal probability unless <code>&lt;something random&gt;</code> doesn't generate duplicates. In particular, the algorithm of <code>sorted</code> (timsort) is stable and thus can't generate <code>(2, 1, 0)</code> using <code>randrange(2)</code> as key (proof left for the reader). That's a strawman random-key, granted, but I hope it gets the point across: watch out for duplicate random keys!</span>
