<div class="post-text" itemprop="text">
<p>How can I get the Cartesian product (every possible combination of values) from a group of lists?</p>
<p>Input: </p>
<pre><code>somelists = [
   [1, 2, 3],
   ['a', 'b'],
   [4, 5]
]
</code></pre>
<p>Desired output:</p>
<pre><code>[(1, 'a', 4), (1, 'a', 5), (1, 'b', 4), (1, 'b', 5), (2, 'a', 4), (2, 'a', 5) ...]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2.6+</p>
<pre><code>import itertools
for element in itertools.product(*somelists):
    print(element)
</code></pre>
<p>Documentation:
<a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="noreferrer">Python 3 - itertools.product</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import itertools
&gt;&gt;&gt; for i in itertools.product([1,2,3],['a','b'],[4,5]):
...         print i
...
(1, 'a', 4)
(1, 'a', 5)
(1, 'b', 4)
(1, 'b', 5)
(2, 'a', 4)
(2, 'a', 5)
(2, 'b', 4)
(2, 'b', 5)
(3, 'a', 4)
(3, 'a', 5)
(3, 'b', 4)
(3, 'b', 5)
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For Python 2.5 and older:</p>
<pre><code>&gt;&gt;&gt; [(a, b, c) for a in [1,2,3] for b in ['a','b'] for c in [4,5]]
[(1, 'a', 4), (1, 'a', 5), (1, 'b', 4), (1, 'b', 5), (2, 'a', 4), 
 (2, 'a', 5), (2, 'b', 4), (2, 'b', 5), (3, 'a', 4), (3, 'a', 5), 
 (3, 'b', 4), (3, 'b', 5)]
</code></pre>
<p>Here's a recursive version of <code>product()</code> (just an illustration):</p>
<pre><code>def product(*args):
    if not args:
        return iter(((),)) # yield tuple()
    return (items + (item,) 
            for items in product(*args[:-1]) for item in args[-1])
</code></pre>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; list(product([1,2,3], ['a','b'], [4,5])) 
[(1, 'a', 4), (1, 'a', 5), (1, 'b', 4), (1, 'b', 5), (2, 'a', 4), 
 (2, 'a', 5), (2, 'b', 4), (2, 'b', 5), (3, 'a', 4), (3, 'a', 5), 
 (3, 'b', 4), (3, 'b', 5)]
&gt;&gt;&gt; list(product([1,2,3]))
[(1,), (2,), (3,)]
&gt;&gt;&gt; list(product([]))
[]
&gt;&gt;&gt; list(product())
[()]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>with <a href="http://docs.python.org/library/itertools.html#itertools.permutations" rel="noreferrer">itertools.product</a>:</p>
<pre><code>import itertools
result = list(itertools.product(*somelists))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2.6 and above you can use 'itertools.product`. In older versions of Python you can use the following (almost -- see documentation) equivalent <a href="http://docs.python.org/library/itertools.html#itertools.product" rel="nofollow noreferrer">code from the documentation</a>, at least as a starting point:</p>
<pre><code>def product(*args, **kwds):
    # product('ABCD', 'xy') --&gt; Ax Ay Bx By Cx Cy Dx Dy
    # product(range(2), repeat=3) --&gt; 000 001 010 011 100 101 110 111
    pools = map(tuple, args) * kwds.get('repeat', 1)
    result = [[]]
    for pool in pools:
        result = [x+[y] for x in result for y in pool]
    for prod in result:
        yield tuple(prod)
</code></pre>
<p>The result of both is an iterator, so if you really need a list for furthert processing, use <code>list(result)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would use list comprehension : </p>
<pre><code>somelists = [
   [1, 2, 3],
   ['a', 'b'],
   [4, 5]
]

cart_prod = [(a,b,c) for a in somelists[0] for b in somelists[1] for c in somelists[2]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a recursive generator, which doesn't store any temporary lists</p>
<pre><code>def product(ar_list):
    if not ar_list:
        yield ()
    else:
        for a in ar_list[0]:
            for prod in product(ar_list[1:]):
                yield (a,)+prod

print list(product([[1,2],[3,4],[5,6]]))
</code></pre>
<p>Output:</p>
<pre><code>[(1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Although there are many answers already, I would like to share some of my thoughts:</p>
<h2>Iterative approach</h2>
<pre><code>def cartesian_iterative(pools):
  result = [[]]
  for pool in pools:
    result = [x+[y] for x in result for y in pool]
  return result
</code></pre>
<h2>Recursive Approach</h2>
<pre><code>def cartesian_recursive(pools):
  if len(pools) &gt; 2:
    pools[0] = product(pools[0], pools[1])
    del pools[1]
    return cartesian_recursive(pools)
  else:
    pools[0] = product(pools[0], pools[1])
    del pools[1]
    return pools
def product(x, y):
  return [xx + [yy] if isinstance(xx, list) else [xx] + [yy] for xx in x for yy in y]
</code></pre>
<h2>Lambda Approach</h2>
<pre><code>def cartesian_reduct(pools):
  return reduce(lambda x,y: product(x,y) , pools)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just to add a bit to what has already been said: if you use sympy, you can use symbols rather than strings which makes them mathematically useful.</p>
<pre><code>import itertools
import sympy

x, y = sympy.symbols('x y')

somelist = [[x,y], [1,2,3], [4,5]]
somelist2 = [[1,2], [1,2,3], [4,5]]

for element in itertools.product(*somelist):
  print element
</code></pre>
<p>About <a href="http://sympy.com" rel="nofollow">sympy</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>A minor modification to the above recursive generator solution in variadic flavor:</p>
<pre><code>def product_args(*args):
    if args:
        for a in args[0]:
            for prod in product_args(*args[1:]) if args[1:] else ((),):
                yield (a,) + prod
</code></pre>
<p>And of course a wrapper which makes it work exactly the same as that solution:</p>
<pre><code>def product2(ar_list):
    """
    &gt;&gt;&gt; list(product(()))
    [()]
    &gt;&gt;&gt; list(product2(()))
    []
    """
    return product_args(*ar_list)
</code></pre>
<p>with <strong>one trade-off</strong>: it checks if recursion should break upon each outer loop, and <strong>one gain</strong>: no yield upon empty call, e.g.<code>product(())</code>, which I suppose would be semantically more correct (see the doctest).</p>
<p>Regarding list comprehension: the mathematical definition applies to an arbitrary number of arguments, while list comprehension could only deal with a known number of them.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Recursive Approach:</strong></p>
<pre><code>def rec_cart(start, array, partial, results):
  if len(partial) == len(array):
    results.append(partial)
    return 

  for element in array[start]:
    rec_cart(start+1, array, partial+[element], results)

rec_res = []
some_lists = [[1, 2, 3], ['a', 'b'], [4, 5]]  
rec_cart(0, some_lists, [], rec_res)
print(rec_res)
</code></pre>
<p><strong>Iterative Approach:</strong></p>
<pre><code>def itr_cart(array):
  results = [[]]
  for i in range(len(array)):
    temp = []
    for res in results:
      for element in array[i]:
        temp.append(res+[element])
    results = temp

  return results

some_lists = [[1, 2, 3], ['a', 'b'], [4, 5]]  
itr_res = itr_cart(some_lists)
print(itr_res)
</code></pre>
</div>
<span class="comment-copy">be aware that 'every possible combination' is not quite the same as 'Cartesian product', since in Cartesian products, duplicates are allowed.</span>
<span class="comment-copy">Is there a non duplicate version of cartesian product?</span>
<span class="comment-copy">@KJW Yes, <code>set(cartesian product)</code></span>
<span class="comment-copy">There should be no duplicates in a Cartesian product, unless the input lists contain duplicates themselves. If you want no duplicates in the Cartesian product, use <code>set(inputlist)</code> over all your input lists. Not on the result.</span>
<span class="comment-copy">Related: <a href="https://stackoverflow.com/questions/53699012/performant-cartesian-product-cross-join-with-pandas">Cartesian product in pandas</a>, <a href="https://stackoverflow.com/questions/11144513/numpy-cartesian-product-of-x-and-y-array-points-into-single-array-of-2d-points">Cartesian product in numpy</a></span>
<span class="comment-copy">Just wanted to add the '*' character is required if you use the variable somelists as provided by the OP.</span>
<span class="comment-copy">@jaska: <code>product()</code> generates <code>nitems_in_a_list ** nlists</code> elements in the result (<code>reduce(mul, map(len, somelists))</code>). There is no reason to believe that yielding a single element is not <code>O(nlists)</code> (amortized) i.e., the time complexity is the same as for <a href="http://stackoverflow.com/a/534085/4279">simple nested <code>for</code>-loops</a> e.g., for the input in the question: <code>nlists=3</code>,  total number of elements in the result: <code>3*2*2</code>, and each element has <code>nlists</code> items (<code>3</code> in this case).</span>
<span class="comment-copy">What is the use of <code>*</code> before somelists? What does it do?</span>
<span class="comment-copy">@VineetKumarDoshi: Here it is used to unpcak a list into multiple arguments to the function call. Read more here: <a href="http://stackoverflow.com/questions/36901/what-does-double-star-and-star-do-for-python-parameters" title="what does double star and star do for python parameters">stackoverflow.com/questions/36901/â€¦</a></span>
<span class="comment-copy">Note: This works only if each list contains at least one item</span>
<span class="comment-copy">The recursive version doesn't work if some of <code>args</code> are iterators.</span>
<span class="comment-copy">What is the use of <code>*</code> before somelists?</span>
<span class="comment-copy">@VineetKumarDoshi <i>"product(somelists)"</i> is a cartesian product between the sublists in a way that Python first get <i>"[1, 2, 3]"</i> as an element and then gets other element after next comman and that is linebreak so the first product term is ([1, 2, 3],), similary for the second ([4, 5],) and so <i>"[([1, 2, 3],), ([4, 5],), ([6, 7],)]"</i>. If you wanna get a cartesian product between elements inside the tuples, you need to tell Python with Asterisk about the tuple structure. For dictionary, you use **. More <a href="http://stackoverflow.com/a/400753/164148">here</a>.</span>
<span class="comment-copy">Per the documentation, the actual itertools.product implementation does NOT build intermediate results, which could be expensive.  Using this technique could get out of hand quite quickly for moderately sized lists.</span>
<span class="comment-copy">i can only point the OP to the documentation, not read it for him.</span>
<span class="comment-copy">The code from the documentation is meant to demonstrate what the product function does, not as a workaround for earlier versions of Python.</span>
<span class="comment-copy">your point being?</span>
<span class="comment-copy">I really like this solution using list comprehensions. I don't know why isn't upvoted more, it's so simple.</span>
<span class="comment-copy">@llekn because the code seems to be fixed to the number of lists</span>
<span class="comment-copy">They're stored in the stack, though.</span>
<span class="comment-copy">@QuentinPradet do you mean a generator like <code>def f(): while True: yield 1</code> will keep on increasing its stack size as we go through it?</span>
<span class="comment-copy">no, but def f(): yield 1; f() will, right?</span>
<span class="comment-copy">@QuentinPradet yeah, but even in this case only the stack needed for max depth, not the whole list, so in this case stack of 3</span>
<span class="comment-copy">It's true, sorry. A benchmark could be interesting. :)</span>
<span class="comment-copy">In "Iterative Approach", why is result declared as      result = [[]] I know that it is list_of_list but in general even if we have declare list_of_list we use     [] and not      [[]]</span>
<span class="comment-copy">I'm a bit of a newby in terms of Pythonic solutions.  Would you or some passerby please write the list comprehension in the "iterative approach" in separate loops?</span>
