<div class="post-text" itemprop="text">
<p>I have two problems:</p>
<p><strong>a) Python csv module could not handle particular csv file properly</strong></p>
<p>I have the following data in <code>database.csv</code></p>
<pre><code>"AAAAAAAA"        ,  5.4817,    0.0000,    0.0000,    0.0000,   65.8370
"n,m-BBBBBBBBB"   ,  1.7897,  675.3787, 1234.7865,   47.0000,   42.0070
</code></pre>
<p>Take note that there are whitespaces between the double quote and comma.
I used the following script to read the file, the first column will be decoded as <code>"AAAAAAAA        "</code>, instead of <code>"AAAAAAAA"</code></p>
<pre><code>import csv

def read_csv_data(path):
  with open(path, 'rU') as f:
    f_csv = csv.reader(f)
    for row in f_csv:
      yield row

for row in read_csv_data('database.csv'):
  print(row)
</code></pre>
<p>The output is</p>
<pre><code>['AAAAAAAA        ', '  5.4817', '    0.0000', '    0.0000', '    0.0000', '   65.8370']
['n,m-BBBBBBBBB   ', '  1.7897', '  675.3787', ' 1234.7865', '   47.0000', '   42.0070']
</code></pre>
<p>To remove the whitespaces, I do that</p>
<pre><code>import csv

def read_csv_data(path):
  col_type = [str, float, float, float, float, float]
  with open(path, 'rU') as f:
    f_csv = csv.reader(f)
    for row in f_csv:
      row = tuple(cast(val.strip()) for cast, val in zip(col_type, row))
      yield row

for row in read_csv_data('database.csv'):
  print(row)
</code></pre>
<p>The output is now</p>
<pre><code>('AAAAAAAA', 5.4817, 0.0, 0.0, 0.0, 65.8370)
('n,m-BBBBBBBBB', 1.7897, 675.3787, 1234.7865, 47.0, 42.007)
</code></pre>
<p><strong>b) Using namedtuple to read in the csv data into memory</strong></p>
<p>With the same csv file <code>database.csv</code>, I use another script:</p>
<pre><code>import csv
from collections import namedtuple

def read_csv_data(path):
  col_type = [str, float, float, float, float, float]
  Gas = namedtuple("Gas", ["gas", "sf", "h1", "h2", "h3", "m"])
  with open(path, 'rU') as f:
    f_csv = csv.reader(f)
    for row in f_csv:
      row = list(cast(val.strip()) for cast, val in zip(col_type, row))
      for row2 in map(Gas._make, row):
        yield row2


  for row in read_csv_data('database.csv'):
    print(row)
</code></pre>
<p>The error is</p>
<pre><code>Traceback (most recent call last):
  File "read_dict.py", line 17, in &lt;module&gt;
    for row in read_csv_data('database.csv'):
  File "read_dict.py", line 13, in read_csv_data
    for row2 in map(Gas._make, row):
  File "&lt;string&gt;", line 21, in _make
TypeError: Expected 6 arguments, got 8
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of</p>
<pre><code>for row2 in map(Gas._make, row):
    yield row2
</code></pre>
<p>You simply want</p>
<pre><code>yield Gas._make(row)
</code></pre>
<p>Right now you're looping over every element in <code>row</code> and calling <code>Gas._make</code> on it.  That's why you're getting "Expected 6 arguments, got 8" -- you're trying to make a <code>Gas</code> instance out of <code>"AAAAAAAA"</code>.</p>
<p>After changing this, the output is</p>
<pre><code>Gas(gas='AAAAAAAA', sf=5.4817, h1=0.0, h2=0.0, h3=0.0, m=65.837)
Gas(gas='n,m-BBBBBBBBB', sf=1.7897, h1=675.3787, h2=1234.7865, h3=47.0, m=42.007)
</code></pre>
<hr/>
<p>PS: for Python 3, you should open files for use with <code>csv</code> using <code>newline=""</code>, see <a href="https://docs.python.org/3/library/csv.html#csv.reader" rel="nofollow">here</a>.</p>
</div>
<span class="comment-copy">That is great!. Thank you.</span>
<span class="comment-copy">For problem a), I have a feeling that csv module does not handle this kind of csv file. I tried <code>quoting=csv.QUOTE_NONNUMERIC</code>, and <code>skipinitialspace=True</code>.</span>
<span class="comment-copy">I import the csv file <code>database.csv</code> into Microsoft Excel, the trailing whitespaces are included. It would mean that it is considered a valid csv file.</span>
