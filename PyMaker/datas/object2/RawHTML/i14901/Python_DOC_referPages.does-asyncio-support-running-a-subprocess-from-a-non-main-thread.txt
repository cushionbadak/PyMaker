<div class="post-text" itemprop="text">
<p>I'm developing an application that mainly consists of services which are threads with custom run loops.</p>
<p>One of the services needs to spawn subprocesses and I don't really understand whether it's valid or not. Official <a href="https://docs.python.org/3/library/asyncio-subprocess.html#subprocess-and-threads" rel="nofollow">documentation</a> is ambiguous. Namely it says both <code>asyncio supports running subprocesses from different threads</code> and <code>An event loop must run in the main thread</code> in the same section.</p>
<p>How is it even possible to run subprocess from different threads if event loop must run in the main thread?</p>
</div>
<div class="post-text" itemprop="text">
<p>Documentation says: </p>
<ol>
<li>You should have running event loop in the main thread.</li>
<li>In the main thread please call <code>asyncio.get_child_watcher()</code> at the start of the program.</li>
</ol>
<p>After that you may create subprocess from non-main thread.</p>
</div>
<span class="comment-copy">Why do we need this limitation anyway? I would like to avoid occupying main thread, since it's already busy with GUI s event look (Qt).</span>
<span class="comment-copy">When asyncio starts subprocess it need to be notified by subproc finish event.  Unfortunately in Unix systems the generic way to do it is catching SIG_CHLD signal. Python interpreter can process signals only in main thread.  BTW you can try to use <a href="https://github.com/harvimt/quamash" rel="nofollow noreferrer">Quamash</a> for running asyncio eventloop over Qt.</span>
<span class="comment-copy">I will, thank you for suggestion. Wouldn't it possible to make signal catching implicit, without direct requirement of event_loop?</span>
<span class="comment-copy">Nope, sorry. Implicit signal catching cannot be implemented without deep enough asyncio rewriting. Moreover, signals behave like singletons: every part of your program want to have exclusive access to signal system, but libraries may conflict each other.</span>
