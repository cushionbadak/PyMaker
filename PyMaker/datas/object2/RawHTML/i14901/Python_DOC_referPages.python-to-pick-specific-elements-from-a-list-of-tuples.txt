<div class="post-text" itemprop="text">
<p>Hello all…I have a list of tuples (number of colors in an image. For example, there are 6320 (255, 255, 255) colors there etc.)</p>
<p>What I want to have is get the number of certain colors, like “(159, 177, 205)” and “(223, 213, 196)”. 2 and 618 are their correspondences.</p>
<p>How can I operate the tuples so I can pick them out (2 and 618)?</p>
<p>Thanks.</p>
<pre><code>[(6320, (255, 255, 255)), (17, (249, 251, 253)), (9, (244, 245, 248)), (2, (159, 177, 205)), (3, (147, 145, 140)), (4, (241, 243, 246)), (138128, (240, 237, 229)), (1726, (237, 227, 208)), (7, (234, 237, 241)), (7298, (233, 229, 223)), (15, (212, 209, 202)), (3392, (229, 227, 216)), (3, (228, 235, 246)), (5962, (227, 223, 213)), (8, (226, 223, 216)), (2, (173, 194, 227)), (618, (223, 213, 196)), (3, (220, 225, 234)), (7, (217, 229, 247)), (6224, (216, 209, 200)), (2, (214, 227, 246)), (3, (213, 229, 252)), (7, (212, 223, 239)), (10, (211, 217, 226)), (9, (210, 225, 248)), (3279, (200, 223, 174)), (29, (197, 217, 247)), (7, (193, 217, 253))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use simple <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">List comprehension</a>, with a filtering condition and unpacking the tuple, like this</p>
<pre><code>&gt;&gt;&gt; items_to_pick = [2, 618]
&gt;&gt;&gt; [color for idx, color in list_of_tuples if idx in items_to_pick]
[(159, 177, 205), (173, 194, 227), (223, 213, 196), (214, 227, 246)]
</code></pre>
<p>But, if the number of items to be filtered is very big, then you can convert this to a <a href="https://docs.python.org/3/reference/expressions.html#generator-expressions" rel="nofollow">generator expression</a> and get the elements only when you need, like this</p>
<pre><code>&gt;&gt;&gt; my_filter = (color for idx, color in list_of_tuples if idx in items_to_pick)
&gt;&gt;&gt; next(my_filter)
(159, 177, 205)
&gt;&gt;&gt; next(my_filter)
(173, 194, 227)
&gt;&gt;&gt; next(my_filter)
(223, 213, 196)
&gt;&gt;&gt; next(my_filter)
(214, 227, 246)
&gt;&gt;&gt; next(my_filter)
Traceback (most recent call last):
  File "&lt;input&gt;", line 1, in &lt;module&gt;
StopIteration
</code></pre>
<p>Or, if you are just going to iterate the filtered data, you can simply iterate over the generator, like this</p>
<pre><code>&gt;&gt;&gt; for item in (color for idx, color in list_of_tuples if idx in items_to_pick):
...     print(item)
...     
... 
(159, 177, 205)
(173, 194, 227)
(223, 213, 196)
(214, 227, 246)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>x=[(6320, (255, 255, 255)), (17, (249, 251, 253)), (9, (244, 245, 248)), (2, (159, 177, 205)), (3, (147, 145, 140)), (4, (241, 243, 246)), (138128, (240, 237, 229)), (1726, (237, 227, 208)), (7, (234, 237, 241)), (7298, (233, 229, 223)), (15, (212, 209, 202)), (3392, (229, 227, 216)), (3, (228, 235, 246)), (5962, (227, 223, 213)), (8, (226, 223, 216)), (2, (173, 194, 227)), (618, (223, 213, 196)), (3, (220, 225, 234)), (7, (217, 229, 247)), (6224, (216, 209, 200)), (2, (214, 227, 246)), (3, (213, 229, 252)), (7, (212, 223, 239)), (10, (211, 217, 226)), (9, (210, 225, 248)), (3279, (200, 223, 174)), (29, (197, 217, 247)), (7, (193, 217, 253))]
print [k for k in x if k[0] in [2,618]]
</code></pre>
<p>This can be done using simple list comprehension.</p>
<p>Output:<code>[(2, (159, 177, 205)), (2, (173, 194, 227)), (618, (223, 213, 196)), (2, (214, 227, 246))]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Seems like you want to get only the tuple element which was at the the index 1 only if the corresponding  index 0 value is <code>2</code> or <code>618</code></p>
<pre><code>&gt;&gt;&gt; t = [(6320, (255, 255, 255)), (17, (249, 251, 253)), (9, (244, 245, 248)), (2, (159, 177, 205)), (3, (147, 145, 140)), (4, (241, 243, 246)), (138128, (240, 237, 229)), (1726, (237, 227, 208)), (7, (234, 237, 241)), (7298, (233, 229, 223)), (15, (212, 209, 202)), (3392, (229, 227, 216)), (3, (228, 235, 246)), (5962, (227, 223, 213)), (8, (226, 223, 216)), (2, (173, 194, 227)), (618, (223, 213, 196)), (3, (220, 225, 234)), (7, (217, 229, 247)), (6224, (216, 209, 200)), (2, (214, 227, 246)), (3, (213, 229, 252)), (7, (212, 223, 239)), (10, (211, 217, 226)), (9, (210, 225, 248)), (3279, (200, 223, 174)), (29, (197, 217, 247)), (7, (193, 217, 253))]
&gt;&gt;&gt; [k[1] for k in t if k[0] in [2,618]]
[(159, 177, 205), (173, 194, 227), (223, 213, 196), (214, 227, 246)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why not use a dictionary instead of a list? </p>
<p>Given your original list, let's call it tuples:</p>
<pre><code>tuples = [(6320, (255, 255, 255)), (17, (249, 251, 253)), (9, (244, 245, 248)), (2, (159, 177, 205)), (3, (147, 145, 140)), (4, (241, 243, 246)), (138128, (240, 237, 229)), (1726, (237, 227, 208)), (7, (234, 237, 241)), (7298, (233, 229, 223)), (15, (212, 209, 202)), (3392, (229, 227, 216)), (3, (228, 235, 246)), (5962, (227, 223, 213)), (8, (226, 223, 216)), (2, (173, 194, 227)), (618, (223, 213, 196)), (3, (220, 225, 234)), (7, (217, 229, 247)), (6224, (216, 209, 200)), (2, (214, 227, 246)), (3, (213, 229, 252)), (7, (212, 223, 239)), (10, (211, 217, 226)), (9, (210, 225, 248)), (3279, (200, 223, 174)), (29, (197, 217, 247)), (7, (193, 217, 253))]
</code></pre>
<p>you can succinctly convert it to a dictionary as follows:</p>
<pre><code>d = {k: v for k, v in tuples}
</code></pre>
<p>Then you can access the tuples for 618, for example, as follows:</p>
<pre><code>print(d[618])
(223, 213, 196)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Or you can use a dictionary: </p>
<pre><code>&gt;&gt;&gt; t = [(6320, (255, 255, 255)), (17, (249, 251, 253)), (9, (244, 245, 248))]
&gt;&gt;&gt; dic = {x[0]:x[1] for x in t}
&gt;&gt;&gt; print(dic)
{6320: (255, 255, 255), 17: (249, 251, 253), 9: (244, 245, 248)}
&gt;&gt;&gt; list = [x for x, y in dic.items() if y == (249,251,253) or y == (1,1,1)]
&gt;&gt;&gt; list
[17]
</code></pre>
<p>EDIT: Well, I have updated to solve your problem with dictionaries.</p>
</div>
<span class="comment-copy">Why don't you use a dictionary <code>{(255, 255, 255): 6320, ...}</code>? Then it's a trivial <code>O(1)</code> lookup.</span>
<span class="comment-copy">I have updated my solution with dictionaries that solves your problem but note that you should use my solution, if you can completely switch to dictionaries, which seems much better than tuple for this kind of data. If you can't switch to dictionary, converting it to dic just for this problem is pointless.</span>
<span class="comment-copy">thanks jonrsharpe and khajvah for the comments.</span>
<span class="comment-copy"><code>I want to know how many “(159, 177, 205)” in there, and how many “(223, 213, 196)"</code> Please don't include tangential questions in the same question. That would invalidate most of the answers already posted. Feel free to post a new question, if you want :-) Reverting the question's edit.</span>
<span class="comment-copy">thanks, you've been the most active.</span>
<span class="comment-copy">thank you for your answer.</span>
<span class="comment-copy">thanks for your anwser.</span>
<span class="comment-copy">thanks for your anwser.</span>
<span class="comment-copy">thanks for your answer.</span>
