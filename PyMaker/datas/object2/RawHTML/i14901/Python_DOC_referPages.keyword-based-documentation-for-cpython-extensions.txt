<div class="post-text" itemprop="text">
<p>How CPython extensions should be written in order for <code>pydoc</code> to mention the arguments'name instead of <code>(...)</code>?</p>
<p>I've followed the <a href="https://docs.python.org/3/extending/extending.html#keyword-parameters-for-extension-functions" rel="nofollow">official python tutorial about extending Python</a>, and even for the <code>keywdarg.parrot</code> procedure I get:</p>
<pre><code>$&gt; pydoc kewdarg.parrot

parrot(...)
   Print a lovely skit to standard output.
</code></pre>
<p>whereas I would expect</p>
<pre><code>parrot(voltage, state="a stiff", action="voom", type="Norwegian Blue")
   Print a lovely skit to standard output.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Looking at the <a href="http://svn.python.org/projects/stackless/Python-2.4.3/dev/Lib/pydoc.py" rel="nofollow">sources of pydoc</a>, if I'm not mistaken the stanza that produces the '...' is:</p>
<pre><code>if inspect.isfunction(object):
    args, varargs, varkw, defaults = inspect.getargspec(object)
    argspec = inspect.formatargspec(
        args, varargs, varkw, defaults, formatvalue=self.formatvalue)
    if realname == '&lt;lambda&gt;':
        title = '&lt;strong&gt;%s&lt;/strong&gt; &lt;em&gt;lambda&lt;/em&gt; ' % name
        argspec = argspec[1:-1] # remove parentheses
else:
    argspec = '(...)'
</code></pre>
<p>So, <code>inspect.isfunction(object)</code> is returning False in the case of CPython extensions.
Since inspect.isfunction() checks that the object is a <em>Python function</em>, while C extension functions are considered <em>builtins</em>, then the above will return False and we get <code>(...)</code> in the output.</p>
</div>
<span class="comment-copy">OK, no hope :( Thanks for your answer!</span>
