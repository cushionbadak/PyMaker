<div class="post-text" itemprop="text">
<p>I am trying to calculate the sum of size of various files. This is my script:</p>
<pre><code>import os
date = raw_input('Enter date in format YYYYMMDD ')
file1 = 'p_poupe_' + date + '.tar.gz.done'
file2 = 'p_poupw_' + date + '.tar.gz.done'
file3 = 'p_pojk_' + date + '.tar.gz.done'

a1 = os.system('zcat ' + file1 + '|wc --bytes')
a2 = os.system('zcat ' + file2 + '|wc --bytes')
a3 = os.system('zcat ' + file3 + '|wc --bytes')

print a1,a2,a3
sum = a1 + a2 + a3

print sum
</code></pre>
<p>But the values are not storing in variable. Can any one tell me what I am doing wrong. How can I modify script so that values are stored in variable and not as a output. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can capture the output of a command using <code>getoutput</code> function from <code>commands</code> as: </p>
<pre><code>import commands as cm
.
.
.
a1 = cm.getoutput('zcat ' + file1 + '|wc --bytes')
a2 = cm.getoutput('zcat ' + file2 + '|wc --bytes')
a3 = cm.getoutput('zcat ' + file3 + '|wc --bytes')

# Note that the outputs are in string format so you need to convert them to integers or floats 
a1, a2, a3 = float(a1), float(a2), float(a3) 

print a1,a2,a3
sum = a1 + a2 + a3

print sum
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>On Unix, the return value is the <strong>exit status</strong> of the process encoded in
  the format specified for wait(). Note that POSIX does not specify the
  meaning of the return value of the C system() function, so the return
  value of the Python function is system-dependent.</p>
<p>On Windows, the return value is that returned by the system shell
  after running command, given by the Windows environment variable
  COMSPEC: on command.com systems (Windows 95, 98 and ME) this is always
  0; on cmd.exe systems (Windows NT, 2000 and XP) this is the exit
  status of the command run; on systems using a non-native shell,
  consult your shell documentation.</p>
</blockquote>
<p><a href="https://docs.python.org/2/library/os.html#os.system" rel="nofollow">https://docs.python.org/2/library/os.html#os.system</a></p>
<p>The problem is that you're using exit-codes rather than stdout data as your "values".
You're probably looking to use <code>subprocess.Popen</code> for instance. Or just simply code the solution manually by opening the files.</p>
<p>Try using <a href="https://docs.python.org/3/library/gzip.html" rel="nofollow">https://docs.python.org/3/library/gzip.html</a></p>
<pre><code>import gzip
def get_fcont_len(fname):
    with gzip.open(fname) as f:
        return len(f.read())
total = 0
date = raw_input('Enter date in format YYYYMMDD ')
total += get_fcont_len('p_poupe_' + date + '.tar.gz.done')
total += get_fcont_len('p_poupw_' + date + '.tar.gz.done')
total += get_fcont_len('p_pojk_' + date + '.tar.gz.done')
print(total)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>os.system</code> return the exit status of the command not the output of the command. To capture the output of a command you should look into the <a href="https://docs.python.org/2/library/subprocess.html" rel="nofollow"><code>subprocess</code> module</a>.</p>
<pre><code>subprocess.check_output("zcat " + file1 + " | wc --bytes", shell=True)
# Output the size in bytes of file1 with a trailing new line character
</code></pre>
<p>However it is probably better to use other python modules/methods to do that as suggested by other as it is preferable to do things directly in Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>The uncompressed file size is stored in the last 4 bytes of the gzip file. This function will return the size of the uncompressed file, i.e. the "gunzipped" size:</p>
<pre><code>import os
import gzip
import struct

def get_gunzipped_size(filename):
    with gzip.open(filename) as f:
        _ = f.read(1)    # elicit IOError if file is not a gzip file
        f.fileobj.seek(-4, os.SEEK_END)
        return struct.unpack('&lt;i', f.fileobj.read(4))[0]
</code></pre>
<p>On large files this is much faster than reading all of the uncompressed data and counting it's length because the whole file does not need to be decompressed.</p>
<p>Fitting this into your code:</p>
<pre><code>import os

date = raw_input('Enter date in format YYYYMMDD ')
prefixes = ('p_poupe_', 'p_poupw_', 'p_pojk_')
files = ['{}{}.tar.gz.done'.format(prefix, date) for prefix in prefixes]

total_uncompressed = sum(get_gunzipped_size(f) for f in files)
print total_uncompressed
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the os module to get the file size. Try this:</p>
<pre><code>import os
import tarfile

tar = tarfile.open("yourFile.tar.gz")
tar.extractall("folderWithExtractedFiles")
print os.path.getsize("folderWithExtractedFiles/yourFileInsideTarGz")
</code></pre>
</div>
<span class="comment-copy"><code>os.system</code> will be returning the return code of <code>wc</code> not the output to <code>stdout</code></span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/6466711/what-is-the-return-value-of-os-system-in-python">What is the return value of os.system() in Python?</a></span>
<span class="comment-copy"><a href="https://docs.python.org/2/library/os.path.html#os.path.getsize" rel="nofollow noreferrer">os.path.getsize</a> should get the work done... <code>os.system</code> return value is not stdout of created process.</span>
<span class="comment-copy">also note that <code>sum()</code> is a built in function, naming your variables to anything defined in the language itself is considered bad. you could use <code>print(sum(a1+a2+a3))</code> assuming a1, a2 and a3 had the correct values you were looking for.</span>
<span class="comment-copy"><code>a1, a2, a3 = map(float, (a1, a2, a3))</code></span>
<span class="comment-copy">"with gzip.open(filename) as f" is showing syntax error, don't know why.</span>
<span class="comment-copy">There should be a colon at the end of the <code>with</code> statement, i.e. <code>with gzip.open(filename) as f:</code></span>
<span class="comment-copy">@user2922822 : I have just made a minor change to the code that reads the file size so that this code will also work in Python 3 (it's mandatory to pass the number of bytes to be read).</span>
<span class="comment-copy">Semi Colon is already there. Still showing syntax error.</span>
<span class="comment-copy"><i>Colon</i> (<code>:</code>), not semi-colon (<code>;</code>). Other than that, I don't know what else could be wrong - it works for me in Python 2 and Python 3. What version of Python are you using? The <code>with</code> statement has been available as a "future" import since 2.5 (requires <code>from __future__ import with_statement</code> before use), and is enabled by default in 2.6.</span>
<span class="comment-copy">This doesn't unzip them</span>
<span class="comment-copy">Note <code>.gz</code>, the actual file size is way beyond the physical space of the file on disk.</span>
<span class="comment-copy">my bad, I am editing with the code to untar the file before</span>
