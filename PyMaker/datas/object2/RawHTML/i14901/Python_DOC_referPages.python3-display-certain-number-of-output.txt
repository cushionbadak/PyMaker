<div class="post-text" itemprop="text">
<p>I have a list a numbers, I want to display 10 per line, and they have to format really nice</p>
<pre><code>start: 1
End: 1000
   2    3    5    7   11   13   17   19   23   29 
  31   37   41   43   47   53   59   61   67   71 
  73   79   83   89   97  101  103  107  109  113 
 127  131  137  139  149  151  157  163  167  173 
 179  181  191  193  197  199  211  223  227  229 
 233  239  241  251  257  263  269  271  277  281 
 283  293  307  311  313  317  331  337  347  349 
 353  359  367  373  379  383  389  397  401  409 
 419  421  431  433  439  443  449  457  461  463 
 467  479  487  491  499  503  509  521  523  541 
 547  557  563  569  571  577  587  593  599  601 
 607  613  617  619  631  641  643  647  653  659 
 661  673  677  683  691  701  709  719  727  733 
 739  743  751  757  761  769  773  787  797  809 
 811  821  823  827  829  839  853  857  859  863 
 877  881  883  887  907  911  919  929  937  941 
 947  953  967  971  977  983  991  997 
</code></pre>
<p>The format has to be like this, the "2" in the beginning has to be at the top of "1" in "31" and so on.</p>
<p>So I tried some solution</p>
<pre><code>gen = ('%-5s\n' % x if i%10==0 else '%-5s' %x for i,x in enumerate(prime_list,1))
</code></pre>
<p>This will give me something like this</p>
<pre><code>1    2    3    5    7    11   13   17   19   23
29   31   37   41   43   47   53   59   61   67
71   73   79   83   89   97   101  103  107  109
113  127  131  137  139  149  151  157  163  167
173  179  181  191  193  197  199  211  223  227
229  233  239  241  251  257  263  269  271  277
281  283  293  307  311  313  317  331  337  347
349  353  359  367  373  379  383  389  397  401
409  419  421  431  433  439  443  449  457  461
463  467  479  487  491  499  503  509  521  523
541  547  557  563  569  571  577  587  593  599
601  607  613  617  619  631  641  643  647  653
659  661  673  677  683  691  701  709  719  727
733  739  743  751  757  761  769  773  787  797
809  811  821  823  827  829  839  853  857  859
863  877  881  883  887  907  911  919  929  937
941  947  953  967  971  977  983  991  997
</code></pre>
<p>Exactly the opposite I want. Anyone have any idea?</p>
<p>Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>Try <code>gen = ('%+5s\n' % x if i%10==0 else '%+5s' %x for i,x in enumerate(prime_list,1))</code>, instead of <code>gen = ('%-5s\n' % x if i%10==0 else '%-5s' %x for i,x in enumerate(prime_list,1))</code></p>
<pre><code>&gt;&gt;&gt; nums = [2,32,34,3,54,5,436,45,6,45,674,57,56,87,567,2]
&gt;&gt;&gt; gen = ('%+5s\n' % x if i%10==0 else '%+5s' %x for i,x in enumerate(nums,1))
&gt;&gt;&gt; for i in nums:
...     print(next(gen))
...
    2
   32
   34
    3
   54
    5
  436
   45
    6
   45
  674
   57
   56
   87
  567
    2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://mathforum.org/library/drmath/view/57036.html" rel="nofollow">1 is not a prime</a>.
Therefore, <code>prime_list</code> should not contain 1. Ideally, <code>prime_list</code> should be generated without 1 in it. If you have to correct the mistake after-the-fact, then use</p>
<pre><code>prime_list = prime_list[1:]
</code></pre>
<p>Once that is corrected, your code works fine:</p>
<pre><code>print(''.join('%-5s\n' % x if i%10==0 else '%-5s' %x for i,x in enumerate(prime_list,1)))
</code></pre>
<p>yields</p>
<pre><code>2    3    5    7    11   13   17   19   23   29   
31   37   41   43   47   53   59   61   67   71   
...
947  953  967  971  977  983  991  997  
</code></pre>
<hr/>
<p>Alternatively, you could split the problem into smaller parts:</p>
<ol>
<li><a href="https://docs.python.org/3.4/library/string.html#format-string-syntax" rel="nofollow">format</a> each int as a left-justified string of length 5</li>
<li><a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow">use the grouper recipe, <code>zip(*[iterator]*n)</code></a> to collect the items into groups of 10</li>
<li>print the groups in a table-like format</li>
</ol>
<hr/>
<pre><code>import itertools as IT

prime_list = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,
61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139,
149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229,
233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317,
331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421,
431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521,
523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619,
631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733,
739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839,
853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953,
967, 971, 977, 983, 991, 997]

prime_strs = ('{:&lt;5d}'.format(val) for val in prime_list) # 1
grouped = IT.zip_longest(*[prime_strs]*10, fillvalue='')  # 2
print('\n'.join(''.join(row) for row in grouped))         # 3
</code></pre>
<p>yields</p>
<pre><code>2    3    5    7    11   13   17   19   23   29   
31   37   41   43   47   53   59   61   67   71   
73   79   83   89   97   101  103  107  109  113  
127  131  137  139  149  151  157  163  167  173  
179  181  191  193  197  199  211  223  227  229  
233  239  241  251  257  263  269  271  277  281  
283  293  307  311  313  317  331  337  347  349  
353  359  367  373  379  383  389  397  401  409  
419  421  431  433  439  443  449  457  461  463  
467  479  487  491  499  503  509  521  523  541  
547  557  563  569  571  577  587  593  599  601  
607  613  617  619  631  641  643  647  653  659  
661  673  677  683  691  701  709  719  727  733  
739  743  751  757  761  769  773  787  797  809  
811  821  823  827  829  839  853  857  859  863  
877  881  883  887  907  911  919  929  937  941  
947  953  967  971  977  983  991  997  
</code></pre>
<hr/>
</div>
<span class="comment-copy">If <code>prime_list</code> is a list of primes, it <a href="http://mathforum.org/library/drmath/view/57036.html" rel="nofollow noreferrer">should not contain 1</a>.</span>
<span class="comment-copy">@unutbu Thank you, I already fix that. but I am still stack on the format</span>
<span class="comment-copy">There is a comma missing with the <code>print</code> statement so that it will print a newline on every item. Use</span>
<span class="comment-copy">There is a comma missing with the <code>print</code> statement so that it will print a newline on every item. Use <code>print(next(gen)),</code> instead and it will line up nicely.</span>
<span class="comment-copy">@user1016274 I did not try to fully print. OP has already done it, as he said "So I tried some solution and it gave ...". I was just demonstrating how the generator looks like. OP can replace the lines in his code and it should work.</span>
<span class="comment-copy">@khajvah Thank you! it worked! I just use print("".join(gen)) to print the format!</span>
