<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; d2 = json.loads(open("t.json").read())
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib64/python2.6/json/__init__.py", line 307, in loads
    return _default_decoder.decode(s)
  File "/usr/lib64/python2.6/json/decoder.py", line 319, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/usr/lib64/python2.6/json/decoder.py", line 336, in raw_decode
    obj, end = self._scanner.iterscan(s, **kw).next()
  File "/usr/lib64/python2.6/json/scanner.py", line 55, in iterscan
    rval, next_pos = action(m, context)
  File "/usr/lib64/python2.6/json/decoder.py", line 185, in JSONObject
    raise ValueError(errmsg("Expecting object", s, end))
ValueError: Expecting object: line 1 column 11 (char 11)
[ RHEL - ~/testing ]$ cat t.json
{"us": u"OFF", "val": u"5"}
</code></pre>
<p>Here is what I have in my JSON file and when I try to read it using <code>open</code> and <code>json.load</code> and json.loads it fails.</p>
<p>After using json.load</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; d2 = json.load(open("t.json"))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib64/python2.6/json/__init__.py", line 267, in load
    parse_constant=parse_constant, **kw)
  File "/usr/lib64/python2.6/json/__init__.py", line 307, in loads
    return _default_decoder.decode(s)
  File "/usr/lib64/python2.6/json/decoder.py", line 319, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/usr/lib64/python2.6/json/decoder.py", line 336, in raw_decode
    obj, end = self._scanner.iterscan(s, **kw).next()
  File "/usr/lib64/python2.6/json/scanner.py", line 55, in iterscan
    rval, next_pos = action(m, context)
  File "/usr/lib64/python2.6/json/decoder.py", line 185, in JSONObject
    raise ValueError(errmsg("Expecting object", s, end))
ValueError: Expecting object: line 1 column 11 (char 11)
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are using the wrong function. Use <code>json.load()</code> (no <code>s</code>!) to load data from an open file object:</p>
<pre><code>d2 = json.load(open("t.json"))
</code></pre>
<p>The <code>json.loads()</code> function expects you to pass in a <em>string</em>, not a file object. You'd have to read your file in that case, returning the read data:</p>
<pre><code>d2 = json.loads(open("t.json").read())
</code></pre>
<p>Next, you have invalid JSON in that file:</p>
<pre><code>{"us": u"OFF", "val": u"5"}
#      ^              ^
</code></pre>
<p>JSON is not Python; those <code>u</code> prefixes are not supported nor needed. You'll need to remove those from the file before it'll load. </p>
<p>If you have an API producing that format, it is not giving you JSON. It could be that it is producing a (strange form of) Python syntax instead; Python itself would produce <code>{'us': u'OFF', 'val': u'5'}</code> (single quotes). You can have Python interpret that as Python literals with <a href="https://docs.python.org/2/library/ast.html#ast.literal_eval" rel="nofollow"><code>ast.literal_eval()</code></a>:</p>
<pre><code>import ast

with open('t.json') as fileobj:
    d2 = ast.literal_eval(fileobj.read())
</code></pre>
<p>but it could be that the format is broken in other ways we cannot determine from a single isolated sample. It could be using <code>true</code> and <code>false</code> for boolean values, like in JSON, for example.</p>
<p>Better to have the <em>API</em> fixed rather that try and work around this broken-ness.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are using the <code>json.loads</code> method. More documentation <a href="https://docs.python.org/3/library/json.html#json.loads" rel="nofollow">here</a>. This method is used for string arguments only. Luckily, there is a similarly named <code>json.load</code> method documented here. This one can be used directly on a file object.</p>
<pre><code>d2 = json.load(open("t.json"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your issue is that the JSON is not valid.</p>
<p>It looks like it is a python dictionnary. <code>u'string'</code> is a python 2 unicode string.</p>
<p>If you remove the <code>u</code> from your strings, it works fine.</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; json.load(open('i.json'))
{u'val': u'5', u'us': u'OFF'}
</code></pre>
<p>Here is the json file:</p>
<pre><code>$ cat i.json
{"us": "OFF", "val": "5"}
</code></pre>
</div>
<span class="comment-copy">you have the answer in your own question: <code>TypeError: expected string or buffer</code>. try to read error message first.</span>
<span class="comment-copy">@HuStmpHrrr i have updated the output for json.load , sorry for missing it earlier</span>
<span class="comment-copy">You don't have valid JSON data; remove the <code>u</code> prefixes.</span>
<span class="comment-copy">this is what i have got as return value from api call , anyway to parse it</span>
<span class="comment-copy">i have updated the output for json.load , sorry for missing it earlier</span>
<span class="comment-copy">You don't have valid JSON in your file, however.</span>
<span class="comment-copy">this is what i have got as return value from api call , anyway to parse it</span>
<span class="comment-copy">@mkp: any way to fix the API instead? You can try and interpret it as Python literals instead: <code>import ast</code> then <code>d2 = ast.literal_eval(open('t.json').read())</code> but that's slower and may break if there are nulls or booleans.</span>
<span class="comment-copy">will it work if the data have much  more than simple two  element , like having multiple layered dict type format of data</span>
<span class="comment-copy">i have updated the output for json.load , sorry for missing it earlier</span>
<span class="comment-copy">this is what i have got as return value from api call , anyway to parse it</span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/988228/converting-a-string-to-dictionary" title="converting a string to dictionary">stackoverflow.com/questions/988228/â€¦</a></span>
