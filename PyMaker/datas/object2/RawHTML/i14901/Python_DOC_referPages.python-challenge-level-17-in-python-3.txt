<div class="post-text" itemprop="text">
<p>I recently started playing with <a href="http://www.pythonchallenge.com/" rel="nofollow">The Python Challenge</a>. While fairly convoluted, the required coding isn't very hard, which makes leaning many useful modules quite interesting.</p>
<p>My question is about level 17. I understand the idea of following the clues as was needed in level 4, while collecting the cookies, which is what I did. However, I cannot BZ2-decompress the string that I get.</p>
<p>I tried Googling, and I found a nice blog with the solutions in Python 2. Specifically, the one for the level 17 is <a href="http://intelligentgeek.blogspot.co.uk/2007/03/python-challenge-17-uggggg.html" rel="nofollow">here</a>. Analysing that one, I realized that I indeed get the compressed string (from the cookies) right and it decompresses properly in Python 2:</p>
<pre><code>bz2.decompress(urllib.unquote_plus(compressed))
</code></pre>
<p>However, <code>bz2.decompress</code> in Python 3 requires a byte array instead of a string, but the obvious Python 3 counterpart of the above line:</p>
<pre><code>bz2.decompress(urllib.parse.unquote_plus(message).encode("utf8"))
</code></pre>
<p>fails with <code>OSError: Invalid data stream</code>. I tried all the <a href="https://docs.python.org/3/library/codecs.html#standard-encodings" rel="nofollow">standard encodings</a> and some variants of the above, but to no avail.</p>
<p>Here is my (non-working) solution so far:</p>
<pre><code>#!/usr/bin/env python3

"""
The Python Challenge #17: http://www.pythonchallenge.com/pc/return/romance.html

This is similar to #4 and it actually uses its solution. However, the key is in
the cookies. The page's cookie says: "you+should+have+followed+busynothing..."

So, we follow the chain from #4, using the word "busynothing" and
reading the cookies.
"""

import urllib.request, urllib.parse
import re
import bz2

nothing = "12345"
last_cookie = None
message = ""
while True:
    headers = dict()
    if last_cookie:
        headers["Cookie"] = last_cookie
    r = urllib.request.Request("http://www.pythonchallenge.com/pc/def/linkedlist.php?busynothing=" + nothing, headers=headers)
    with urllib.request.urlopen(r) as u:
        last_cookie = u.getheader("Set-Cookie")
        m = re.match(r"info=(.*?);", last_cookie)
        if m:
            message += m.group(1)
        text = u.read().decode("utf8")
        print("{} &gt;&gt;&gt; {}".format(nothing, text))
        m = re.search(r"\d+$", text)
        try:
            nothing = str(int(m.group(0)))
        except Exception as e:
            print(e)
            break

print("Cookies message:", message)
print("Decoded:", bz2.decompress(urllib.parse.unquote_plus(message).encode("utf8")))
</code></pre>
<p>So, my question is: what would a Python 3 solution to the above problem look like and why doesn't mine work as expected?</p>
<p>I am well aware that parts of this can be done more nicely. I was going for a quick and dirty solution, so my interest here is only that it works (and why not the way I did it above).</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to use the <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.unquote_to_bytes" rel="nofollow noreferrer"><code>urllib.parse.unquote_to_bytes()</code> function</a> here. It does not support the <code>+</code> to space mapping, but that is trivially worked around with <code>str.replace()</code>:</p>
<pre><code>urllib.parse.unquote_to_bytes(message.replace('+', '%20'))
</code></pre>
<p>This then decompresses nicely. You can decode the resulting uncompressed string as ASCII:</p>
<pre><code>print("Decoded:", bz2.decompress(urllib.parse.unquote_to_bytes(message.replace('+', '%20'))).decode('ascii'))
</code></pre>
<p>Demo using a <em>different</em> message I prepared to not give away the puzzle:</p>
<pre><code>&gt;&gt;&gt; import bz2
&gt;&gt;&gt; import urllib.parse
&gt;&gt;&gt; another_message = 'BZh91AY%26SY%80%F4C%E8%00%00%02%13%80%40%00%04%00%22%E3%8C%00+%00%22%004%D0%40%D04%0C%B7%3B%E6h%B1AIM%3D%5E.%E4%8Ap%A1%21%01%E8%87%D0'
&gt;&gt;&gt; bz2.decompress(urllib.parse.unquote_to_bytes(another_message.replace('+', '%20'))).decode('ascii')
'This is not the message'
</code></pre>
<p>Alternatively, tell <code>urllib.unquote_plus()</code> to use the Latin-1 encoding instead of UTF-8. The default error handler for <code>unquote_plus()</code> is set to <code>'replace'</code>, so you never notice that the original data can't be decoded as UTF-8 and thus has bytes replaced with the U+FFFD REPLACEMENT CHARACTER, which is what causes decompression to fail. Latin-1 maps all bytes one-on-oe directly to the first 256 Unicode characters, so you can encode back to the original bytes:</p>
<pre><code>&gt;&gt;&gt; '\ufffd' in urllib.parse.unquote_plus(another_message)
True
&gt;&gt;&gt; bz2.decompress(urllib.parse.unquote_plus(another_message, 'latin1').encode('latin1')).decode('ascii')
'This is not the message'
</code></pre>
</div>
<span class="comment-copy">Downvoted because of "play the earlier Python Challenge levels to unlock it", you should include problem definition in your post.</span>
<span class="comment-copy">@Nsh: that's my edit. I am a contributor to the Python Challenge and would like to keep some things a surprise. Note that the code can be used to <i>fully reproduce the problem</i> already.</span>
<span class="comment-copy">@Nsh: did you actually try to reproduce the issue? The link to the level is <b>not needed</b> for that.</span>
<span class="comment-copy">@Nsh: The link is here to provide the context of the problem and make the question easier to find for anyone looking for something similar. The problem itself is contained in the question itself: I get the string <code>message</code> which is correct (compared with the working Python 2 solution), but it doesn't decompress the way it does in the equivalent Python 2 code (provided in the question).</span>
<span class="comment-copy">@MartijnPieters I apologize if this is seen as a <i>spoiler</i>. I figured that it's not a problem, given that the solutions already exist (I've linked only one, but there are others as well). If there is a better way to provide the context, feel free to suggest or edit.</span>
<span class="comment-copy">Thank you. Just to make certain: once I unquoted the message to a string, there was no way to convert to bytes properly?</span>
<span class="comment-copy">@Vedran≈†ego: you could also have used <code>unquote_plus()</code> with the Latin 1 codec, then encode again back to Latin-1. That'd have mapped bytes one-on-one to Unicode codepoints: <code>urllib.parse.unquote_plus(message, 'latin1').encode('latin1')</code></span>
<span class="comment-copy">I like this one better. Thank you!</span>
<span class="comment-copy">So this raises the question... how on earth is one supposed to know to do this?!</span>
<span class="comment-copy">@rschwieb: the Python Challenge was created long before Python 3 was commonplace; Python 2's <code>unquote_plus()</code> never decodes to Unicode text.</span>
