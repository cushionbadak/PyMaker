<div class="post-text" itemprop="text">
<p>I'd like to create a <code>__str__</code> method that creates the string in various formats according to user choice.</p>
<p>The best I have come up with is to make a <code>__str__(**kwargs)</code> method, and this seems to work ok, but it isn't compatible with <code>str(obj)</code> or <code>print(obj)</code>. In other words I have to use <code>print(obj.__str__(style='pretty'))</code> rather than <code>print(obj, style='pretty')</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Implement the <a href="https://docs.python.org/3/reference/datamodel.html#object.__format__" rel="nofollow"><code>object.__format__()</code> method</a> instead, and a user can then specify the formatting required with the <a href="https://docs.python.org/3/library/functions.html#format" rel="nofollow"><code>format()</code> function</a> and <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow"><code>str.format()</code> method</a>:</p>
<pre><code>print(format(obj, 'pretty'))
</code></pre>
<p>or</p>
<pre><code>print('This object is pretty: {:pretty}'.format(obj))
</code></pre>
<p>You probably want to delegate most of the handling of the format on to <code>str.__format__</code>:</p>
<pre><code>def __format__(self, spec):
    if spec.endswith('pretty'):
        prettified = self.pretty_version()
        return prettified.__format__(spec[:-6])
    return str(self).__format__(spec)
</code></pre>
<p>That way you can still support all the field width and padding alignment options that the default <code>str.__format__</code> method supports.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; class Foo():
...     def __str__(self):
...         return 'plain foo'
...     def pretty_version(self):
...         return 'pretty foo'
...     def __format__(self, spec):
...         if spec.endswith('pretty'):
...             prettified = self.pretty_version()
...             return prettified.__format__(spec[:-6])
...         return str(self).__format__(spec)
... 
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; print(f)
plain foo
&gt;&gt;&gt; print(format(f))
plain foo
&gt;&gt;&gt; print(format(f, 'pretty'))
pretty foo
&gt;&gt;&gt; print(format(f, '&gt;20pretty'))
          pretty foo
&gt;&gt;&gt; print('This object is pretty: {:^20pretty}!'.format(f))
This object is pretty:      pretty foo     !
</code></pre>
</div>
<span class="comment-copy">Take <code>**kwargs</code> in the constructor rather than the function itself.</span>
<span class="comment-copy">Awesome, exactly what I needed, thanks!</span>
<span class="comment-copy">This works great, but it behaves unexpectedly when my pretty string is multi line. If one line, then &gt;20 tabs the string over like your example... but if multi line, it has no effect. Do you have a possible solution?</span>
<span class="comment-copy">@KeithLucas: You'd have to apply the formatting manually to each line then; <code>str.__format__</code> doesn't support applying field widths to separate lines.</span>
