<div class="post-text" itemprop="text">
<p>There are many questions related to lambda and printing, but I could not find anything about this exact question. </p>
<p>I'd like to print the results of my lambda function within a print statement. However, I am getting the wrong output. I am using Python 3</p>
<pre><code>from __future__ import print_function
file_name = "tester"
target = "blue"
prediction = "red"

print(file_name,target,prediction, str(lambda x: print('+') if target==prediction else print('-')))
</code></pre>
<p>This returns:</p>
<pre><code>tester blue red &lt;function &lt;lambda&gt; at 0x10918c2f0&gt;
</code></pre>
<p>How do I get the actual results of the lambda function?</p>
</div>
<div class="post-text" itemprop="text">
<p>just call lambda</p>
<pre><code>print(file_name,target,prediction, (lambda: '+' if target==prediction else '-')())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>lambda</code>s are actually functions only. So, unless you invoke them you will not get any result from them. When you do</p>
<pre><code>str(lambda x: print('+') if target==prediction else print('-'))
</code></pre>
<p>you are not actually invoking the <code>lambda</code> function, but trying to get the string representation of the function itself. As you can see, the string representation has the information about what the object is and where it is stored in memory.</p>
<pre><code>&lt;function &lt;lambda&gt; at 0x10918c2f0&gt;
</code></pre>
<p>Apart from that, the other problem in your <code>lambda</code> is, you are actually invoking <code>print</code> function in it. It will actually print the result but return <code>None</code>. So, even if you invoke the lambda expression, you will get <code>None</code> printed. For example,</p>
<pre><code>&gt;&gt;&gt; print(print("1"))
1
None
</code></pre>
<p>But, the good news is, in your case, you don't need <code>lamda</code> at all.</p>
<pre><code>print(file_name, target, prediction, '+' if target == prediction else '-')
</code></pre>
<p>The expression,</p>
<pre><code>'+' if target == prediction else '-'
</code></pre>
<p>is called <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow">conditional expression</a> and will make sure that you will get <code>+</code> if <code>target</code> is equal to <code>prediction</code>, <code>-</code> otherwise.</p>
<pre><code>&gt;&gt;&gt; file_name, target, prediction = "tester", "blue", "red"
&gt;&gt;&gt; print(file_name, target, prediction, '+' if target == prediction else '-')
tester blue red -
</code></pre>
<p><strong>Note:</strong> If you are using Python 3.x, you don't need to import <code>print_function</code> from the <code>__future__</code>. It already is a function, in Python 3.x.</p>
<pre><code>Python 3.4.0 (default, Apr 11 2014, 13:05:11) 
[GCC 4.8.2] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; type(print)
&lt;class 'builtin_function_or_method'&gt;
</code></pre>
</div>
<span class="comment-copy">no need for a lambda, just do <code>print(file_name,target,prediction,'+' if target == prediction else '-')</code></span>
<span class="comment-copy">What's the point of having the lambda? Why but just use the inline if directly?</span>
<span class="comment-copy">If you are using python 3.x, then why are you doing <code>from __future__ import print_function</code>?</span>
<span class="comment-copy">Thanks! This is actually a more appropriate answer</span>
<span class="comment-copy">This is actually a pretty terrible answer; all your lambda is doing is wasting cycles and making the code harder to read than e.g. <code>print(file_name,target,prediction, '+' if target==prediction else '-')</code></span>
<span class="comment-copy">Can you clarify? It seemed like it was more appropriate...?</span>
<span class="comment-copy">in this example lambda not necessary, but you can use it, also you can use u"{}{}{}".format(fillename, target, predoction), this is pep solution.</span>
<span class="comment-copy">Python is amazing. Thank you</span>
<span class="comment-copy">I actually chose to accept the other answer, even though this is simpler. The other answer is really more appropriate to the overall problem.</span>
