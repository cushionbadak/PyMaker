<div class="post-text" itemprop="text">
<p>This should be an easy one for experienced coders out there... I am writing a program that outputs anagrams (from a given list) from a jumbled input. I believe my code includes all the necessary functions to produce the desired result, but I cannot figure out how to make the program run the respective functions in order. A sample output is:</p>
<pre><code>Please enter a jumbled word: lsitNe
Your words are:
silent
listen
enlist
tinsel
</code></pre>
<p>This is my output, currently:</p>
<pre><code>  Please enter a jumbled word: dff
Traceback (most recent call last):
  File "/Users/edinnerman/Desktop/poop.py", line 53, in &lt;module&gt;
    main()
  File "/Users/edinnerman/Desktop/poop.py", line 5, in main
    yay_anagrams = anagramlist(lword)
NameError: name 'lword' is not defined
</code></pre>
<p>How do I reformat my code to output all anagrams listed in a text file given a user input?
Here is my code:</p>
<pre><code> #0: Create a main function to bring all functions together for the output.
def main():
    textfile = open('words.txt', 'r').read()
    dictionary_of_words = filename(textfile)
    yay_anagrams = anagramlist(lword)
    double_whammy = binary_search(fresh_list, ltextfile)
    answer = output()

#1, 2: Take a filename as a parameter and ask user for word to unjumble. Lowercase all.
def filename(textfile):
    ltextfile = textfile.lower()
    scrambled_eggs = input("Please enter a jumbled word: ")
    lword = scrambled_eggs.lower()

#3: Create an anagram list (already lowercase) for the jumbled word.
def anagramlist(lword):
    if lword == "":
        return([lword])
    else:
        yay_word = lword[1:]
        first_letter = lword[0]
        fresh_list = []
        for mixed_word in filename(yay_word):
            for pos in range(len(mixed_word) + 1):
                fresh_list.append(mixed_word[:pos] + first_letter[0] + mixed_word[pos:])
            return fresh_list

#4: Check if any words in anagram list match dictionary list.
def binary_search(fresh_list, ltextfile):
    for eachword in fresh_list:
        low = 0
        high = len(list) - 1 
    while low &lt;= high:
        mid = (low + high)//2
        item = list[mid]
    if fresh_list == item:
        return True
    elif fresh_list &lt; item:
        high = mid - 1
    elif fresh_list &gt; item:
        low = mid + 1
    return False

#5: Print appropriate statements.
def output():
    if fresh_list == True:
        newlist = set()
        for item in fresh_list:
            newlist.add(item)
        print("Your words are:/n", newlist)
    if fresh_list == False:
        print("Your word cannot be unjumbled.")       
main()
</code></pre>
<p>Please excuse some of the minor coding errors I might have in this code. </p>
</div>
<div class="post-text" itemprop="text">
<p>Your most major problem here is that you have not got the flow right in terms of assigning your results to variables.  As recommended in comments - you might want to take a look at <a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions" rel="nofollow">the python function definition tutorial section</a>.  I've put some particular things you need to address below.</p>
<h3>Problem 1</h3>
<p>In particular - you need to consider the <a href="https://docs.python.org/3/reference/simple_stmts.html#the-return-statement" rel="nofollow"><code>return</code></a> statement.  If your function definition does not have a <code>return</code> statement, then assigning a variable to its result is meaningless.  Try an example:</p>
<pre><code>def main():
    x = 1+1

y = main()
print(y)
</code></pre>
<p>You might be expecting <code>2</code> - in fact you'll see <code>None</code>, because the function doesn't return anything.  If you alter it, so that it reads:</p>
<pre><code>def main():
    x = 1+1
    return x

y = main()
print(y)
</code></pre>
<p>you'll now get output <code>2</code>.  Your functions <code>filename()</code> and <code>output()</code> suffer from this.</p>
<h3>Problem 2</h3>
<p>You can only use the values of variables in a code block if they have already been assigned.</p>
<p>For example - consider the following very simple program</p>
<pre><code>def message(x):
    return 'You input the string ' + x

def main():
    first_in = input('Please give me some input')
    result = message(in_from_above)
    print(result)

main()
</code></pre>
<p>This will fail in a similar way to your program, because <code>in_from_above</code> is not a variable that has been defined in your program.  If you change it to:</p>
<pre><code>def message(x):
    return 'You input the string ' + x

def main():
    first_in = input('Please give me some input')
    result = message(first_in)
    print(result)

main()
</code></pre>
<p>it will output the message returned.  This problem affects your sequence in <code>main()</code>, beginning with trying to send <code>lword</code> to the <code>anagramlist()</code> function when you haven't assigned any value to <code>lword</code> <em>within the <code>main()</code> function</em>.  </p>
<p><strong><em>Note</em></strong> I can see you have assigned a value to <code>lword</code> in the <code>filename()</code> function.  You might be expecting that assignment to be available to the <code>main()</code> function.  It will not.  This is to do with something called variable scoping.  In general in Python, variables are <em>local</em>, or available only in the block of code where they are defined and assigned.  The other type of variable is a <em>global</em> variable - where variables are available to code program wide.  You can explicitly make an assigment from within a function <code>global</code>, but I can say with some certainty that you don't need to do that for this assignment and would recommend you didn't.  Scoping is discussed very briefly <a href="https://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python" rel="nofollow">in the Python docs here</a>.  Scoping is a pretty fundamental programming concept and worth spending some time getting your head around. Play around with some simple examples - use the same variable names inside and outside functions, see what you get etc.</p>
<h3>General comment</h3>
<p>When stuff goes wrong, to help with debugging, simplify your cases and understand where they're going wrong.  You can see I've demonstrated the main problems you have with very simple cases.  You can do the same.  The logic in your functions may or may not work exactly as you like, but until you get these fundamentals sorted, it will be impossible to debug more complicated cases.</p>
<p><strong>Edit - recommendation</strong></p>
<p>Just took another look over your code and I would also recommend splitting up functions for #1 and #2 - i.e. one function to lower case your dictionary and another to get the lower case user input.  It's not essential, but it will make your code easier to understand and your life easier.</p>
</div>
<span class="comment-copy">Please <a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions" rel="nofollow noreferrer">go through the tutorial section on function definition first</a> to get some examples about function definitions. You use variables that are not defined all over the place, assign variables to the return values of functions that don't return anything, and then never use those assigned values again. I assume this is some sort of homework/assignment. Couldn't you start with something simpler? Or, if not, try to implement one of the functions so it works, and then move on to the next?</span>
<span class="comment-copy">You're not far off, but there are some fundamental concepts that you are missing (see the @Carsten comment).  In terms of question asking here (and debugging for yourself) " the shell exits the program after the input is made" is not very informative.  What actually happends, I think, is that you get an error: <code>NameError: global name 'lword' is not defined</code> and a line number.  For a question here - best to copy that entire message (including the <code>Traceback</code>). Also - for your debugging - it gives you your first clue - Python doesn't know what <code>lword</code> is at line 5...</span>
<span class="comment-copy">Sure - have a look at the answer below.  If it helps and gets you past these errors - feel free to accept. If it leads on to new errors - I'd recommend asking a new question about those, rather than trying to sort it all out in this thread (errors in the logic within the function are quite a different problem to the errors in the program flow which we're addressing here).</span>
<span class="comment-copy">By the way - very unlikely you need decorators and more advanced constructs with this type of code.  I'll reiterate the general comment in my answer - start simple!  Good luck!</span>
<span class="comment-copy">@Emily: There are some fundamental problems with your Python code and your program's logic. Richard's answer discusses some of these fundamentals, but even if you fix those things up in your program it won't find all anagrams for an input word, since your <code>anagramlist()</code> function only generates a small fraction of all the possible permutations of the input word. OTOH, if you changed that function so it <i>did</i> generate all the permutations, your program would be <i>very</i> inefficient - there's a <i>much</i> better strategy for finding anagrams.</span>
<span class="comment-copy">@J Richard Snape, other than defining the dictionary and user input under the main function, I'm confused on how to address calling in the functions. I've tried to define it separately, but am having trouble calling them into the main function without getting the NameError.</span>
<span class="comment-copy">@Emily Every time you follow the function name with <code>(</code> - you are calling it.  When you write <code>var_name = function_name(parameter)</code> You are calling the function <code>function_name</code>, sending it the variable <code>parameter</code> and storing its result (whatever is after its <code>return</code> statement) in <code>var_name</code>.  If either <code>function_name</code> doesn't exist as a function in your file, or <code>parameter</code> hasn't been assigned a value <i>in your <code>main</code> function</i>, you will get a <code>NameError</code></span>
<span class="comment-copy">I am a little confused - the code you've written is fairly sophisticated, although it has problems as PM2Ring highlighted.  The question you're asking is very simple.  Are you trying to use code from somewhere else and understand it, rather than writing your own?  That will cost you a lot of time in the long run at this level. Did you understand my explanation of Problem 1 and Problem 2? Until you've got that (try out the simple examples), it's going to be impossible to help you further.</span>
<span class="comment-copy">P.S. That's not a criticism - just trying to understand where you're coming from so can maybe get you over the misunderstanding to a point where you can employ the logic you're attempting within your function definitions.  Another thought occurs to me - have you maybe had experience in a different language with very different syntax?</span>
<span class="comment-copy">I understand your examples--you are very clear in the explanation. This is a code I worked on during office hours a week ago with a TA for my Python course, and I created it on my own. However, I am revisiting it now to finish it up, but am struggling to understand some parts. I guess my poorly-worded questions are a result of fatigue and forgetfulness. I'm realizing the coding process is best performed in one sitting and under less stressful circumstances (deadline). Sorry for my misunderstanding!</span>
