<div class="post-text" itemprop="text">
<p>I wonder if print function can be made work (without changing the syntax all over the place) like in python 2 and earlier.</p>
<p>So I have the statement like:</p>
<pre><code>print "hello world"
</code></pre>
<p>And I like that syntax to work in python 3. I've tried importing the library <code>six</code> but that didn't do the trick (still a syntax error).</p>
</div>
<div class="post-text" itemprop="text">
<p>No, you cannot. The <code>print</code> statement is gone in Python 3; the compiler doesn't support it anymore.</p>
<p>You <em>can</em> make <code>print()</code> work like a function <em>in Python 2</em>; put this at the top of every module that uses <code>print</code>:</p>
<pre><code>from __future__ import print_function
</code></pre>
<p>This will remove support for the <code>print</code> statement in Python 2 just like it is gone in Python 3, and you can use the <a href="https://docs.python.org/2/library/functions.html#print" rel="noreferrer"><code>print()</code> function that ships with Python 2</a>.</p>
<p><code>six</code> can only help bridge code written with both Python 2 and 3 in mind; that includes replacing <code>print</code> statements with <code>print()</code> functions <em>first</em>.</p>
<p>You probably want to read the <a href="https://docs.python.org/3/howto/pyporting.html" rel="noreferrer"><em>Porting Python 2 Code to Python 3</em> howto</a>; it'll tell you about more such <code>from __future__</code> imports as well, as well as introduce tools such as <a href="http://python-modernize.readthedocs.org/en/latest/" rel="noreferrer">Modernize</a> and <a href="http://python-future.org/automatic_conversion.html" rel="noreferrer">Futurize</a> that can help automate fixing Python 2 code to work on both Python 2 and 3.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the tool <strong>2to3</strong> is an <a href="https://docs.python.org/2/library/2to3.html" rel="nofollow noreferrer">Automated Python 2 to 3 code translation</a>, as @Martijn Pietersâ™¦ told :), you can get over a ride throw the old python and making the changes work into python 3, I make a simple example like this:</p>
<p>I created this file, python2.py:</p>
<pre><code>#!python3

print 5
</code></pre>
<p>when I run it with python it obviously shows:</p>
<pre><code>line 3
    print 5          ^
SyntaxError: Missing parentheses in call to 'print'
</code></pre>
<p>so, you can transform it via terminal like this:</p>
<blockquote>
<p><strong>This is the important comand</strong></p>
</blockquote>
<pre><code>$ 2to3 -w home/path_to_file/python2.py
</code></pre>
<p>-w parameter will write the file, if you want only see the future changes without apply them, just run it without -w.
 after run it it will show something like</p>
<pre><code>root: Generating grammar tables from /usr/lib/python2.7/lib2to3/PatternGrammar.txt
RefactoringTool: Refactored Desktop/stackoverflow/goto.py
--- Desktop/stackoverflow/goto.py   (original)
+++ Desktop/stackoverflow/goto.py   (refactored)
@@ -1,3 +1,3 @@
 #!python3

-print 5
+print(5)
RefactoringTool: Files that were modified:
</code></pre>
<p>And the file will look like:</p>
<pre><code>#!python3

print(5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are okay with overriding <code>builtins.__import__</code> and a simple regex to convert the print statements that don't have paren then you can do the following. Note that this doesn't actually change any file, just when you import them it'll read the code into a string, tweak that string, then send the fixed code to the compiler/importer</p>
<pre><code>import re
import sys
if sys.version_info &gt;= (3, 0):
  import lib2to3
  from lib2to3 import main, refactor
  import os
  import types
  import builtins
  import sys
  import importlib

  cache = {}

  prevImport = builtins.__import__

  def customImport(path, *args, **kwargs):
    #print (path, args, kwargs)
    try:
      return fimport(path + ".py")
    except:
      return prevImport(path, *args, **kwargs)

  def reload(filename):
    fimport(filename.__file__, forceReload=True)

  def fimport(filename, forceReload=False):
    filename = os.path.abspath(filename)
    modulePath = os.path.splitext(os.path.basename(filename))[0]
    if filename in cache and not forceReload:
      execval, modifyTime, module = cache[filename]
      if modifyTime == os.path.getmtime(filename):
        return module
    f = open(filename)
    text = f.read() + "\n"
    p = re.compile("print")
    res = []
    curI = 0
    for m in p.finditer(text):
      i = m.start()
      res.append(text[curI:i])
      curI = i
      pieceTmp = text[i:].split("\n")[0]
      piece = text[i:].split("\n")[0].split("#")[0]
      pieceAfter = piece[len('print'):].strip()
      if pieceAfter[0] != '(':
        resLine = "print" + "(" + pieceAfter + ")" + "\n"
        res.append(resLine)
      else:
        res.append(pieceTmp)
      curI += len(pieceTmp)+1
    text = "".join(res)
    f.close()
    '''
    # this code can run lib2to3 if you want but just for replacing prints that is not needed
    #fixes = sorted(lib2to3.refactor.get_fixers_from_package('lib2to3.fixes'))
    fixes = ['lib2to3.fixes.fix_print']
    rt = lib2to3.main.StdoutRefactoringTool(fixes, {}, [], False, False)
    res = str(rt.refactor_string(text, name=modulePath))
    '''
    res = text
    res = compile(res, '&lt;string&gt;', 'exec')
    module = types.ModuleType(modulePath)
    module.__file__ = filename
    cache[filename] = (res, os.path.getmtime(filename), module)
    exec(res, module.__dict__)
    return module


  builtins.__import__ = customImport
  importlib.reload = reload
</code></pre>
<p>If you save this code to, say, pastimport.py, then lets say I have some file named juniper.py:</p>
<pre><code>def wow(a):
  print a
</code></pre>
<p>Now if I want to call juniper.py from python3, I can just do</p>
<pre><code>import pastimport
import juniper

juniper.wow("bean")
</code></pre>
<p>And it'll run :)</p>
<p>This could probably be faster and be more like the typical imports with caching and logging and stuff but I don't understand exactly how and when the pyc files are generated yet. There might also be edge cases with c plugins and such I'm not sure. So feel free to suggest improvements, but at least this is a proof of concept. I think you should be able to actually tweak the interpreter inputs and the values of the current file but I'm fiddling with that right now.</p>
<p>Also technically this lets you import any python2 file (2to3 fixes xrange, print, etc.) and if those files import other python2 files they'll be converted too since this overrides the import everyone uses. You can also implement arbitrary operator overloading, require static typing, actually require braces, and technically even import code from other languages or change python altogether with this single import. But I digress</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use regex to replace print code of python2 with python3:</p>
<pre><code>find:
(print) (.*)(\n)

replace with:
$1($2)$3
</code></pre>
</div>
<span class="comment-copy">Lol, I want the exact same thing. I like everything about python 3 except the print statement</span>
<span class="comment-copy">That's a shame - I need to execute code provided by a third party and I really do not like going over all the code changing all those prints :/. (What you describe here is the opposite of my problem: I DO work in python 3, but I need to run code written by people who work in python 2)</span>
<span class="comment-copy">@paul23: sorry, wrong tool. You should try to use the <a href="https://docs.python.org/2/library/2to3.html" rel="nofollow noreferrer"><code>2to3</code> utility</a> to fix up the Python 2 code automatically.</span>
<span class="comment-copy">@paul23 if you're <b>really</b> interested in python's statements and keyword mechanics, you might enjoy reading <a href="http://mathamy.com/import-accio-bootstrapping-python-grammar.html" rel="nofollow noreferrer">this</a> article.</span>
<span class="comment-copy">My case is worse...I have some preprocessed data, which contains objects with print statements...  A code translator cannot translate member functions of the objects I suppose.</span>
<span class="comment-copy">@ymeng: code translation can handle member functions just fine.</span>
<span class="comment-copy">This is going to try to run 2to3 on everything, whether or not it's actually Python 2 code.</span>
<span class="comment-copy">Well 2to3 works fine with python3 code (it just makes no changes), but yes I agree there are lots of edge cases (such as .pyd) this needs to account for. That's pretty easy to do because you can just call the original import function, but I just haven't added the checks here. Ideally it should generate .pyc files as well. Feel free to suggest modifications.</span>
<span class="comment-copy">Try running 2to3 on <code>print(1, 2)</code>, and you'll see that it's not safe to run 2to3 on Python 3 code.</span>
<span class="comment-copy">I get <code>(1, 2)</code> (in the same file that has <code>print a</code>) which is exactly what python3 does? Also something like <code>print(1,2)\nprint('games', end='')</code> works fine as well</span>
<span class="comment-copy">Hmm nevermind it doesn't (I must have done something wrong in thinking it did work). So you are right, I'm sure some casewise analysis could fix that but it would certainly be much more gross</span>
