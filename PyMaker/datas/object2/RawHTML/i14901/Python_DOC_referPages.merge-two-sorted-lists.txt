<div class="post-text" itemprop="text">
<p>Hello I want to ask why when I run this code below the <code>arr</code> didn't change it's value</p>
<pre><code>def merge(arr, left, middle, right):
    newArr = []
    leftCounter = 0
    rightCounter = middle + 1
    while leftCounter &lt;= middle and rightCounter &lt;= right:
        if arr[leftCounter] &lt; arr[rightCounter]:
            newArr.append(arr[leftCounter])
            leftCounter += 1
        else:
            newArr.append(arr[rightCounter])
            rightCounter += 1
    while leftCounter &lt;= middle:
        newArr.append(arr[leftCounter])
        leftCounter += 1
    while rightCounter &lt;= right:
        newArrCounter.append(arr[rightCounter])
        rightCounter += 1
    arr = newArr



def main():
    arr = [1, 5, 7, 2, 4, 6]
    merge(arr, 0, 2, 5)
    print(arr)
</code></pre>
<p>result of this is [1, 5, 7, 2, 4, 6]</p>
<p>thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Simply, when you pass <code>arr</code> to the function, it is referencing a list in memory, but its <em>not the same reference</em> as <code>arr</code> outside the function (even though they refer to the same object). In the function, when you have</p>
<pre><code>arr = newArr
</code></pre>
<p>Essentially you have the function scope reference point to the new object, but not the reference outside of the function.</p>
<p><a href="http://robertheaton.com/2014/02/09/pythons-pass-by-object-reference-as-explained-by-philip-k-dick/" rel="nofollow">http://robertheaton.com/2014/02/09/pythons-pass-by-object-reference-as-explained-by-philip-k-dick/</a></p>
<p>if you <em>mutate</em> <code>arr</code> within the function, since they refer to the same object, the reference outside the function will still refer to the mutated object.</p>
</div>
<div class="post-text" itemprop="text">
<p>Because of variables inside the functions has local scope.you can return <code>arr</code> in your function and assign the function result to a variable, add <code>return arr</code> at the trailing of your function:</p>
<pre><code>def main():
    arr = [1, 5, 7, 2, 4, 6]
    new=merge(arr, 0, 2, 5)
    print(new)
</code></pre>
<p>But <em>note</em> that changing a mutable object inside the function may impact the caller! but in this case you have assign <code>newArr</code> to <code>arr</code> at the end <code>arr = newArr</code> and then you do not change the arr,for example see the following example :</p>
<pre><code>&gt;&gt;&gt; def a(arr):
...   arr = [3,4]
&gt;&gt;&gt; x=[5]
&gt;&gt;&gt; a(x)
&gt;&gt;&gt; x
[5]
&gt;&gt;&gt; def a(arr):
...   arr+= [3,4]
... 
&gt;&gt;&gt; a(x)
&gt;&gt;&gt; x
[5, 3, 4]
</code></pre>
<p>On first state we have assigned a new object to name <code>arr</code> so python will crate an local variable in the local namespace of function <code>a</code>! but in second case we have changed the name <code>arr</code> and as <code>arr</code> is a mutable object python doesn't create a new object, instead it change the name <code>arr</code> globally! </p>
<p>Or you can initial <code>newArr</code> as global and then you can print it in main function :</p>
<pre><code>def merge(arr, left, middle, right):
    global newArr
    newArr = []
    leftCounter = 0
    rightCounter = middle + 1
    while leftCounter &lt;= middle and rightCounter &lt;= right:
        if arr[leftCounter] &lt; arr[rightCounter]:
            newArr.append(arr[leftCounter])
            leftCounter += 1
        else:
            newArr.append(arr[rightCounter])
            rightCounter += 1
    while leftCounter &lt;= middle:
        newArr.append(arr[leftCounter])
        leftCounter += 1
    while rightCounter &lt;= right:
        newArrCounter.append(arr[rightCounter])
        rightCounter += 1
    arr = newArr

def main():
    arr = [1, 5, 7, 2, 4, 6]
    merge(arr, 0, 2, 5)
    print(newArr)
</code></pre>
</div>
<span class="comment-copy">For the record, this function is part of the standard library, as <a href="https://docs.python.org/3/library/heapq.html#heapq.merge" rel="nofollow noreferrer"><code>heapq.merge()</code></a>.</span>
<span class="comment-copy">but when I try to do this arr[3] = 5 inside merge function the arr get changed globally why? your code is wrong function didn't return anything !</span>
<span class="comment-copy">@user3216932 its difference its because that <code>arr</code> is a mutable object and changing a mutable object inside the function may impact the caller!</span>
<span class="comment-copy">than cant i mutate it to be = newArr ?</span>
<span class="comment-copy">@user3216932 you can use <code>global</code> key word! or <code>return</code> it</span>
