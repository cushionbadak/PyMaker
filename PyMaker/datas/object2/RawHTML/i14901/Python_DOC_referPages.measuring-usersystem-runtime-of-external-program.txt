<div class="post-text" itemprop="text">
<p>As part of an evaluation, I want to measure and compare the user+system runtime of different diff-tools.
As a first approach, I thought about calling the particular tools with <code>time - f</code> (GNU <code>time</code>). Since the rest of the evaluation is done by a bunch of Python scripts I want to realise it in Python.</p>
<p>The time output is formatted as follows:</p>
<pre><code>&lt;some error message&gt;
user 0.4
sys 0.2
</code></pre>
<p>The output of the diff tool is redirected to <code>sed</code> to get rid of unneeded output and the output of <code>sed</code> is then further processed. <strong>(use of <code>sed</code> deprecated for my example. See Edit 2)</strong></p>
<p>A call from within a shell would look like this (removes lines starting with "Binary"):</p>
<pre><code>$ time -f "user %U\nsys %S\n" diff -r -u0 dirA dirB | sed -e '/^Binary.*/d'
</code></pre>
<p>Here is my approach so far:</p>
<pre class="lang-py prettyprint-override"><code>import subprocess

diffcommand=["time","-f","user %U\nsys %S\n","diff","-r","-u0","testrepo_1/A/rev","testrepo_1/B/rev"]
sedcommand = ["sed","-e","/^Binary.*/d"]

# Execute command as subprocess
diff = subprocess.Popen(diffcommand, stderr=subprocess.PIPE, stdout=subprocess.PIPE)

# Calculate runtime
runtime = 0.0
for line in diff.stderr.readlines():
    current = line.split()
    if current:
        if current[0] == "user" or current[0] == "sys":
            runtime = runtime + float(current[1])
print "Runtime: "+str(runtime)

# Pipe to "sed"
sedresult = subprocess.check_output(sedcommand, stdin=diff.stdout)

 # Wait for the subprocesses to terminate
diff.wait()
</code></pre>
<p>However it feels like that this is not clean (especially from an OS point of view). It also leads to the script being stuck in the <code>readlines</code> part under certain circumstances I couldn't figure out yet.</p>
<p>Is there a cleaner (or better) way to achieve what I want?</p>
<p><strong>Edit 1</strong>
Changed head line and gave a more detailed explanation </p>
<p><strong>Edit 2</strong>
Thanks to  J.F. Sebastian, I had a look at <code>os.wait4(...)</code> (information taken from <a href="https://stackoverflow.com/a/28521323/3722347">his answer</a>. But since I AM interested in the output, I had to implement it a bit different.</p>
<p>My code now looks like this:</p>
<pre class="lang-py prettyprint-override"><code>diffprocess = subprocess.Popen(diffcommand,stdout=subprocess.PIPE)
runtimes = os.wait4(diffprocess.pid,0)[2]
runtime = runtimes.ru_utime + runtimes.ru_stime
diffresult = diffprocess.communicate()[0]
</code></pre>
<p>Note that I do not pipe the result to <code>sed</code> any more (decided to trim within python)</p>
<p>The runtime measurement works fine for some test cases, but the execution gets stuck sometimes. Removing the runtime measurement then helps the program to terminate and so does sending <code>stdout</code> to <code>DEVNULL</code> (as demanded <a href="https://stackoverflow.com/q/28520489/3722347">here</a>). Could I have a deadlock? (<code>valgrind --tool=helgrind</code> did not find anything) Is there something fundamentally wrong in my approach?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>but the execution gets stuck sometimes. </p>
</blockquote>
<p>If you use <code>stdout=PIPE</code> then <em>something</em> should read the output <em>while the process is still running</em> otherwise the child process will hang if its stdout OS pipe buffer fills up (~65K on my machine).</p>
<pre><code>from subprocess import Popen, PIPE

p = Popen(diffcommand, stdout=PIPE, bufsize=-1)
with p.stdout:
    output = p.stdout.read()
ru = os.wait4(p.pid, 0)[2]
</code></pre>
</div>
<span class="comment-copy">Try <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer"><code>timeit</code></a>.</span>
<span class="comment-copy">Are you aware of <a href="https://docs.python.org/2/library/difflib.html" rel="nofollow noreferrer"><code>difflib</code></a> and <a href="https://docs.python.org/2/library/filecmp.html#module-filecmp" rel="nofollow noreferrer"><code>filecmp</code></a>?</span>
<span class="comment-copy">@LutzHorn: Since I am interested in the "real" runtime (without waiting for time slots etc.) I think this might not be accurate enough.</span>
<span class="comment-copy">@PeterWood: Yes, but I am measuring the runtime of different diff-tools under specific circumstances. The above is part of a whole evaluation framework I have written</span>
<span class="comment-copy">Your evaulatio framework is using GNU time called from Python?</span>
<span class="comment-copy">I thought about the same problem, but didn't know how to solve it. Works perfect for me :-)....but could you please explain what the <code>bufsize</code> parameter does?</span>
<span class="comment-copy">@Paddre: <code>bufsize</code> is  passed as <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer">the <code>buffering</code> parameter while creating file objects</a> for the pipes. On Python 2, <code>bufsize=0</code> that may negatively affect performance. On Python 3 (recent versions) the default is equivalent to <code>bufsize=-1</code>. There were intermediate Python 3 versions with <code>bufsize=0</code> by default that may lead to <i>short reads</i> on Python 3 (wrong result).</span>
