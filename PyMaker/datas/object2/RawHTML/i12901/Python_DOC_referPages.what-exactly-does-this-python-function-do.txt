<div class="post-text" itemprop="text">
<p>I am unable to understand what is the purpose of this method (taken from Python Brain Teaser Question bank). I figured out that the input seems to be a collection of dictionaries. But, what is the method trying to do?</p>
<pre><code>def g(items):
    d = defaultdict(list)
    for i in items:
        d[i['type']].append(i)
    return d
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is taking a bunch of items that are indexable by string, and grouping them by the value at the <code>"type"</code> key. The result is a dictionary where the key is the value of <code>"type"</code>, and the value is a list of all the items having said key as their <code>"type"</code>. </p>
<p>It does seem to be a bit broken though, because it is returning the function. I think the expected behavior is to have <code>return d</code> at the end. With the following implementation:</p>
<pre><code>def g(items):
    d = defaultdict(list)
    for i in items:
        d[i['type']].append(i)
    return d # Fixed this
</code></pre>
<p>You provide the following input:</p>
<pre><code>items = [ 
    {'type': 'foo', 'val': 1}, 
    {'type': 'bar', 'val': 2}, 
    {'type': 'foo', 'val': 3}
]
</code></pre>
<p>And you get the following output:</p>
<pre><code>{'foo': [{'type': 'foo', 'val': 1}, {'type': 'foo', 'val': 3}], 'bar': [{'type': 'bar', 'val': 2}]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The input is a <a href="https://docs.python.org/3/reference/datamodel.html#index-15" rel="nofollow">sequence</a> of <a href="https://docs.python.org/3/reference/datamodel.html#index-29" rel="nofollow">mappings</a>, each of which have a "type" entry. The code <a href="https://en.wikipedia.org/wiki/Bin_%28computational_geometry%29" rel="nofollow">bins</a> each mapping by the value of its "type" entry.</p>
<p>Returning <code>g</code> instead of <code>d</code> is likely just a thinko.</p>
</div>
<span class="comment-copy">Possibly is it raising an <code>IndentationError</code> exception due to the invalid indentation?</span>
<span class="comment-copy">No, there is no indentation problem with this method. This is a Python question that I am trying to solve.</span>
<span class="comment-copy">Now.... there is no indentation problem :)</span>
<span class="comment-copy">Now the function returns <code>d</code>, but your question states that it returns <code>g()</code> (as did the code previously)????? Please edit your question for consistency.</span>
<span class="comment-copy">I'm voting to close this question as off-topic because it is asking other people to guess what some code (not written by the OP) will do with the code to be guessed about changing during the process. Such questions are not likely to be helpful to anybody (else).</span>
<span class="comment-copy">Thanks! It has started making some sense. However, can you come up with a real world use case where it might be useful?</span>
<span class="comment-copy">@Sankalp Sure. Imagine a list of animals, for whatever reason implemented so that the properties have to be accessed as string indices rather than normal Python attributes. Let's say you want to group them by their <code>["species"]</code>. If the implementation of <code>g</code> had <code>'species'</code> instead of <code>'type'</code> (or accepted this string as an argument), it could be used to group the animals by species.</span>
<span class="comment-copy">I think it returns the collection of dictionaries based on their 'type' key.</span>
<span class="comment-copy">@Sankalp Yes, that's right.</span>
<span class="comment-copy">I think, returning d makes more sense here. I am updating the question.</span>
