<div class="post-text" itemprop="text">
<p>I'm new in asynchronus programming. I'm triyng to write script that is used to check statuses of web pages.
And ofcourse I'd like doint thath asynchronus.
My snippet:</p>
<pre><code>import aiohttp
import asyncio

url_site = 'http://anysite.com'
fuzz_file = 'fuzz.txt'


def generate_links(file):
    with open(file) as f:
        return [str(url_site) + str(line.strip()) for line in f]

async def fetch_page(client, url):
    async with client.get(url) as response:
        return response.status

async def run():
    links = generate_links(fuzz_file)
    for f,link in asyncio.as_completed([fetch_page(client,link) for link in links]):
        print("[INFO] [{}] {}".format(f, link))


loop = asyncio.get_event_loop()
conn = aiohttp.ProxyConnector(proxy="http://10.7.0.35:8080")
client = aiohttp.ClientSession(loop=loop, connector=conn)
loop.run_until_complete(run())
client.close()
</code></pre>
<p>But I'm getting the next errors:<code>Task was destroyed but it is pending!</code>
Could someone to point me where I made mistake?</p>
</div>
<div class="post-text" itemprop="text">
<p>From the documentation for <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.as_completed" rel="nofollow"><code>as_completed</code></a>:</p>
<blockquote>
<p>Return an iterator whose values, when waited for, are Future instances.</p>
</blockquote>
<p>So you must <code>await</code> every object returned by <code>as_completed</code>:</p>
<pre><code>for f in asyncio.as_completed([fetch_page(client,link) for link in links]):
    status = await f
</code></pre>
<p>You might also want to look into <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.wait" rel="nofollow">wait</a> for more fine grained control.</p>
</div>
<span class="comment-copy">Unfortunately I'm getting the same error.</span>
<span class="comment-copy">I'm not getting those errors. What version are using?</span>
<span class="comment-copy">I use python 3.5, asyncio 3.4.3, aiohttp 0.19</span>
<span class="comment-copy">So am I, but I'm not getting any errors; however, I'm not running a <code>ProxyConnector</code>, so maybe that's causing the issue? Also, close the event loop explicitly: <code>loop.close()</code></span>
