<div class="post-text" itemprop="text">
<p>I am trying to maintain a list a names and times, sorted by increasing time.</p>
<pre><code>def listfile (name, time):

    players = []
    strtime = str(time)
    players.append((name, strtime))
    with open("playersScores.txt", "r") as f:
        for line in f:
            if line != '\n':
                name, strtime = line.split(',')
                players.append((name, strtime))
    f.close()  

    players.sort(key=lambda tup: tup[1])

    with open("playersScores.txt", "w") as f:
        for (name, strtime) in players:
            f.write("%s\n" % (name + "," + strtime))
    f.close() 
</code></pre>
<p>This essentially works but it leaves a blank line below every line, except the newly added line.</p>
<p>I would like something like:</p>
<pre><code>Bob,32.82
Bill,34.22
Joe,39.09
Bob,45.23
George,46.08
</code></pre>
<p>but I am getting:</p>
<pre><code>Bob,32.82

Bill,34.22
Joe,39.09

Bob,45.23

George,46.08
</code></pre>
<p><code>Bill,34.22</code> being the last entry.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that when reading the file there is a <code>\n</code> at the end of each line that does not automatically get stripped off. In your code shown here the variable <code>strtime</code> still contains a <code>\n</code> character at the end.</p>
<pre><code>name, strtime = line.split(',')
players.append((name, strtime))
</code></pre>
<p>The <code>\n</code> in the call to <code>f.write()</code> is fine. You just need to strip off the <code>\n</code> when you read. <code>rstrip()</code> will remove whitespace characters from the right side of the string.</p>
<p>Do this:</p>
<pre><code>name, strtime = line.split(',')
players.append((name, strtime.rstrip()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since what you're creating is technically a .csv file, you could also look into the <code>csv</code> module</p>
<pre><code>import csv
import itertools

with open('path/to/file.txt', 'r+') as f:
    reader = csv.reader(f)
    new_lines = sorted(itertools.chain(reader, (name, strtime)),
                       key=lambda x: float(x[1]))
    f.seek(0)  # rewind to the beginning of the file
    writer = csv.writer(f, lineterminator="\n")
    # you must specify the lineterminator on Windows, or else open in binary mode
    # however csv.readers don't work in binary mode on Windows.
    writer.writerows(new_lines)
</code></pre>
<p>Note that this will give you some weird errors if you're deleting lines. This doesn't truncate the file before writing to it -- you're overwriting data, so replacing</p>
<pre><code>1
3
5
7
</code></pre>
<p>with</p>
<pre><code>2
4
8
</code></pre>
<p>Will give you</p>
<pre><code>2
4
8
7  # oops!
</code></pre>
</div>
<span class="comment-copy">take out the <code>\n</code> in your <code>f.write</code>\</span>
<span class="comment-copy">Unless it's important that the file itself be readable in plain text, you could look into using the Pickle module instead</span>
<span class="comment-copy">Does the file have to be human-readable? This seems like a job for <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer"><code>pickle</code></a>!</span>
<span class="comment-copy">That would leave everything on a single line.</span>
<span class="comment-copy">A .txt file was specifically requested.</span>
<span class="comment-copy">Exactly so. <code>line.strip().split(...)</code> is a common idiom for a reason! :)</span>
<span class="comment-copy">Dang, beat my comment by a little bit. This should be the correct answer.</span>
