<div class="post-text" itemprop="text">
<p>Occasionally people refer to "X-like" objects in Python. <a href="http://patsy.readthedocs.org/en/latest/API-reference.html">Example:</a></p>
<blockquote>
<p>data_iter_maker – A zero-argument callable which returns an iterator over dict-like data objects.</p>
</blockquote>
<p>Does "dict-like" have a precise definition, and if so, what is it? Would it be an object <code>x</code> that can be indexed like a dictionary can: <code>x[a]</code>, where <code>a</code> is a hashable? In that case, a namedtuple might not be considered dict-like, since you can't index using an expression like <code>x['a']</code> (last I checked you have to write <code>x.a</code>). But on the other hand, namedtuples are functionally so similar to dicts that I'm not sure what to think. </p>
<p>Cynically, I'm tempted to guess that "dict-like" means "an object similar enough to dict that my code will produce the same answer as if you had submitted a semantically equivalent dict object". In other words, "run the function and find out for yourself if your argument is dict-like!"</p>
<p>More generally, is an X-like object one which implements the same interface as X?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python uses '<a href="https://docs.python.org/3/glossary.html#term-duck-typing">duck-typing</a>':</p>
<blockquote>
<p>“If it looks like a duck and quacks like a duck, it must be a duck.”</p>
</blockquote>
<p>Or perhaps, "If it looks like a duck and quacks like a duck, it is sufficiently close to a duck to treat it like one."  Obviously the first sounds better.  This is closely related to the python doctrine of <a href="https://docs.python.org/2/glossary.html#term-eafp">"Easier to Ask for Forgiveness than to ask for Permission"</a>.</p>
<p>A <strong>dict-like</strong> object is <a href="https://docs.python.org/3/reference/datamodel.html?emulating-container-types#emulating-container-types">one which implements (or emulates) the dictionary interface.</a>  The <a href="https://docs.python.org/2/glossary.html#term-iterable">same concept often comes up for iterables</a>, and often in <a href="http://docs.scipy.org/doc/numpy/user/basics.creation.html#converting-python-array-like-objects-to-numpy-arrays">numpy for 'array-like' (or 'array_like') objects</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Practical duck typing:</p>
<pre><code>dict_meths = set(dir({}))

# Python3
class A:
    pass

default_meths = set(dir(A()))

diff = dict_meths - default_meths
</code></pre>
<p>Now <code>diff</code> is:</p>
<pre><code>{'__contains__',
 '__delitem__',
 '__getitem__',
 '__iter__',
 '__len__',
 '__setitem__',
 'clear',
 'copy',
 'fromkeys',
 'get',
 'items',
 'keys',
 'pop',
 'popitem',
 'setdefault',
 'update',
 'values'}
</code></pre>
<p>When you implement all these methods in your class, you certainly have a dict-like object. If some of the less common ones such as <code>update</code> are missing you may still talk about a dict-like object. Compare <a href="https://docs.python.org/3/glossary.html#term-file-object">file-like objects</a>.</p>
</div>
<span class="comment-copy"><i>"More generally, is an X-like object one which implements the same interface as X?"</i> - yep! Python generally uses <a href="https://docs.python.org/3/glossary.html#term-duck-typing" rel="nofollow noreferrer">duck typing</a>.</span>
<span class="comment-copy"><i>"In other words, "run the function and find out for yourself if your argument is dict-like!""</i> - I would expect <i>"dict-like"</i> to be equivalent to <i>"implements the <a href="https://docs.python.org/2/library/collections.html#collections-abstract-base-classes" rel="nofollow noreferrer"><code>MutableMapping</code> interface</a>"</i>.</span>
<span class="comment-copy">Nothing cynical about that! There's a whole module dedicated to fooling python programs, check out <a href="https://docs.python.org/3.5/library/abc.html" rel="nofollow noreferrer">abstract base classes</a>.</span>
<span class="comment-copy">There is no exact definition (and I believe this is a deliberate decision to avoid language lawyers). In the same way <i>file-like</i> often means something that has a <code>read</code> and <code>write</code> methods.</span>
<span class="comment-copy">@jonrsharpe As long as one doesn't think that means it needs to inherit from that interface. And people probably use the term more loosely than that. Anyone asking for or providing a dict-like probably should explain what parts of the interface they use or provide.</span>
<span class="comment-copy">TIL: In the <a href="https://docs.python.org/3/reference/datamodel.html#emulating-container-types" rel="nofollow noreferrer">docs.python.org/3/reference/…</a> link referenced in this answer, it is said that a <i>dict-like</i> in the complete sense is referred to as a <i>mapping</i>.</span>
<span class="comment-copy">This might seem like an academic excercise. Why would anyone use a dict-like that does not inherit from dict? E.g. <code>defaultdict</code> inherits from dict, as does <code>Counter</code>. But if we look at e.g. <a href="https://docs.python.org/3.3/library/collections.html#chainmap-objects" rel="nofollow noreferrer">ChainMap</a>, it inherits from <a href="https://docs.python.org/3.3/library/collections.abc.html#collections.abc.Mapping" rel="nofollow noreferrer">Mapping</a>, it's not an instance of <code>dict</code> and it would be perfectly reasonable to send a ChainMap where a dict is expected.</span>
