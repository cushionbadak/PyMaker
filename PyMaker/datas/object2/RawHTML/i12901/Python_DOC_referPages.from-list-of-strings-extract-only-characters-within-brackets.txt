<div class="post-text" itemprop="text">
<p>I have a list of strings that have variable construction but have a character sequence enclosed in square brackets. I want to extract only the sequence enclosed by the square brackets. There is only one instance of square brackets per string, which simplifies the process. </p>
<p>I am struggling to do so in an elegant manner, and this is clearly a simple problem with Python's large string library. </p>
<p>What is a simple expression to do this? </p>
</div>
<div class="post-text" itemprop="text">
<p>Check regular expression, "re"</p>
<p>Something like this should do the trick</p>
<pre><code>import re

s = "hello_from_adele[this_is_the_string_i_am_looking_for]this_is_not_it"
match = re.search(r"\[([A-Za-z0-9_]+)\]", s)
print match.group(1)
</code></pre>
<p>If you provide an example, we can be more specific</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't even need <code>re</code> to do this:</p>
<pre><code>In [11]: strng = "This is some text [that has brackets] followed by more text"

In [12]: strng[strng.index("[")+1:strng.index("]")]
Out[12]: 'that has brackets'
</code></pre>
<p>This uses <a href="https://docs.python.org/3/glossary.html#term-slice" rel="nofollow">string slicing</a> to return the characters inside the brackets. <a href="https://docs.python.org/3/library/stdtypes.html#str.index" rel="nofollow"><code>index()</code></a> returns the 0-based position of its argument. Since we don't want to include the <code>[</code> at the beginning, we add 1. The second argument of the slice is the stop position, but it is <em>not included</em> in the returned substring, so we don't need to add anything to it.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you prefer not to use regex for whatever reason, it should be easy to do with string splitting since you're guaranteed to have one and only one instance of <code>[</code> and <code>]</code>.</p>
<pre><code>s = "some[string]to check"

_, midright = s.split("[")
target, _ = midright.split("]")
</code></pre>
<p>or</p>
<pre><code>target = s.split("[")[1].split("]")[0]  # ewww
</code></pre>
</div>
<span class="comment-copy">You need to provide an example</span>
<span class="comment-copy"><a href="https://docs.python.org/2/library/re.html" rel="nofollow noreferrer"><code>import re</code></a></span>
<span class="comment-copy">Wouldn't be more generic saying: <code>"\[[^]]+\]"</code></span>
<span class="comment-copy">No need for an example, this works fine. Thanks.</span>
<span class="comment-copy">Yes, the inside depends on the strings, if we get examples, i can get more specific :)</span>
<span class="comment-copy">@GáborErdős simpel's is actually <i>less</i> specific. Match everything inside <code>[]</code> except a <code>]</code></span>
<span class="comment-copy">Why bother with regex? Just use string slicing...</span>
