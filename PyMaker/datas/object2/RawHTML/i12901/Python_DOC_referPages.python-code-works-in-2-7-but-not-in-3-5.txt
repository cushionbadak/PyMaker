<div class="post-text" itemprop="text">
<p>My coursework is to create Tic Tac Toe in Python, my tutor helped me get it working in 2.7 however It needs to be in 3.5.</p>
<p>Firstly in 2.7 the code below prints a 3x3 list, however in 3.5 it just prints the list downwards not 3x3. my tutor said maybe put <code>end = ' '</code> at the end but that also doesn't work.</p>
<pre><code>def printBoard( board ):
    counter = 0   
    for y in range(3):    
        for x in range(3):    
            print (board[counter]),    
            counter += 1    
        print    
    print
</code></pre>
<p>second problem is on 2.7 it allows me to continue to input numbers till the board is filled with X or O, on 3.5 it only allows to input once and then the program ends? </p>
<pre><code>value = input("input number between 1 and 9")    
value = int(value)        
if value == 1:    
    alist[0] = player1    
    printBoard( alist )    
    value = input("input number between 1 and 9")    
if value == 2:    
    alist[1] = player1    
    printBoard( alist )    
    value = input("input number between 1 and 9")
</code></pre>
<p>etc.</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p><code>print</code> changed from <a href="https://docs.python.org/2/reference/simple_stmts.html#the-print-statement" rel="nofollow">statement</a> to <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow">a function</a> in Python 3.x. To print a statement without newline, you need to pass <code>end=' '</code> parameter (You can use the <code>print</code> as a function in Python 2.7 if you put <code>from __future__ import print_function</code> at the beginning of the code):</p>
<pre><code>print(board[counter], end=' ')
</code></pre></li>
<li><p><code>input</code> returns a string in Python 3.x. (does not evaluate the input string). You need to convert the value into <code>int</code> every where you used <code>input</code>:</p>
<pre><code>value = input("input number between 1 and 9")
value = int(value)
</code></pre>
<p>Alternatively, instead of comparing the input with integer literal <code>1</code> or <code>2</code>, compare the input string with strings: <code>'1'</code>, <code>'2'</code> without converting the string into integer. (But this requires you to use <code>raw_input</code> in Python 2.7 instead of <code>input</code>)</p></li>
<li><p><code>print</code> should be called: <code>print()</code>. Otherwise, nothing is printed.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>I assume <code>board</code> is something like <code>[['*', '*', '*'], ['*', '*', '*'], ['*', '*', '*']]</code>. That means you have an easy way of printing this with a single <code>print()</code> call.</p>
<pre><code>print(*(''.join(row) for row in board), sep='\n')
</code></pre>
<p>This joins each row into a new string, producing each row as part of a generator. This generator is unpacked with <code>*</code> and sent to <code>print()</code>, where each row is separated by a newline.</p>
<p>For your second issue, the problem is simple: you cast <code>int()</code> for the first <code>value</code>, but not for the subsequent ones. However, this is the sort of thing you should be doing with a loop. It'll prevent exactly this kind of bug. If you find yourself writing lots of code with <kbd>Ctrl</kbd>+<kbd>V</kbd>, you're doing something wrong. If each block is slightly different, with an incremented number, you would do that with something like <code>for i in range(n):</code>, which allows you to execute the same code with an incremented number on each iteration.</p>
<p>However, I'd recommend a simple <code>while</code> loop that checks if the game is complete:</p>
<pre><code>while True:
    move = request_move()
    do_move('X', move)
    if game_complete():
        break
    request_move()
    do_move('O', move)
    if game_complete():
        break
</code></pre>
<p>You would then write appropriate functions to request move coordinates, input moves into the board, and check if the game is complete yet.</p>
</div>
<span class="comment-copy">You have used <code>value = int(value)</code> only once, you should use it everytime when you want to take input as <code>int</code>.</span>
<span class="comment-copy">changing 1 to '1' worked thanks a lot man, however the print(board[counter], end = '') only prints the list across rather then downwards now.</span>
<span class="comment-copy">def printBoard( board ):     counter = 0     for y in range(3):         for x in range(3):             print( board[counter], end='')             counter += 1         print      this is how the list printed, im working in 3.5,                                         1 2 3 4 5 6 7 8 9 input number between 1 and 9</span>
<span class="comment-copy">use <code>print()</code> in place of <code>print</code> to move text to new line.</span>
<span class="comment-copy">"thanks for your answer, but it's still not producing the right result" - "you should accept this answer." Uh...</span>
<span class="comment-copy">I also recently posted <a href="http://codereview.stackexchange.com/questions/111386/text-based-tic-tac-toe-with-dry-and-pep-8">my own implementation of TTT</a> on CR if you want to take a look.</span>
