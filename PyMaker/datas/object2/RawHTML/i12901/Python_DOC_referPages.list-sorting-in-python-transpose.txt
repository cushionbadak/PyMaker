<div class="post-text" itemprop="text">
<p>I have arbitrary lists, for instance here are three lists:</p>
<pre><code>a = [1,1,1,1]
b = [2,2,2,2]
c = [3,3,3,3]
</code></pre>
<p>And I want transpose them together in order to get the output like this:</p>
<pre><code>f_out = [1,2,3]
g_out = [1,2,3]
...
n_out = [1,2,3]
</code></pre>
<p>As, you can see, I just converted "columns" to "rows".</p>
<p>The issue is a solution has to be independent of the lists length.</p>
<p>For example:</p>
<pre><code>a = [1,1]
b = [2]
c = [3,3,3]
# output
f_out = [1,2,3]
g_out = [1,3]
n_out = [3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer">zip_longest</a></p>
<pre><code>&gt;&gt;&gt; from itertools import zip_longest
&gt;&gt;&gt; a = [1,1]
&gt;&gt;&gt; b = [2]
&gt;&gt;&gt; c = [3,3,3]
&gt;&gt;&gt; f,g,h=[[e for e in li if e is not None] for li in zip_longest(a,b,c)]
&gt;&gt;&gt; f
[1, 2, 3]
&gt;&gt;&gt; g
[1, 3]
&gt;&gt;&gt; h
[3]
</code></pre>
<p>If <code>None</code> is a potential valid value in the lists, use a sentinel <a href="https://docs.python.org/3/library/functions.html#object" rel="nofollow noreferrer">object</a> instead of the default <code>None</code>:</p>
<pre><code>&gt;&gt;&gt; b = [None]
&gt;&gt;&gt; sentinel = object()
&gt;&gt;&gt; [[e for e in li if e is not sentinel] for li in zip_longest(a,b,c, fillvalue=sentinel)]
[[1, None, 3], [1, 3], [3]]
</code></pre>
</div>
<span class="comment-copy">You might want to look into <code>itertools.zip_longest</code> -- That's <i>almost</i> what you want, you'd just have to filter out the extra padding.</span>
<span class="comment-copy">@mgilson Thank you! I think it can help me :)</span>
<span class="comment-copy">For anyone else just staring at this question and wondering what the relationship between the input and output is, it's treating it almost like a transpose matrix. IOW, <code>f</code>, <code>g</code>, and <code>h</code> result from lining <code>a</code>, <code>b</code>, and <code>c</code> up horizontally and reading top to bottom.</span>
<span class="comment-copy">It is zip_longest for python3</span>
<span class="comment-copy">@PadraicCunningham: Good catch -- fixed</span>
