<div class="post-text" itemprop="text">
<p>This is a bit of a (very basic) language-lawyer kind of question. I understand what the code does, and why, so please no elementary explanations.</p>
<p>In an expression, <code>in</code> has <a href="https://docs.python.org/3.5/reference/expressions.html?highlight=precedence#operator-precedence" rel="nofollow noreferrer">higher precedence</a> than <code>and</code>. So if I write</p>
<pre><code>if n in "seq1" and "something":
    ...
</code></pre>
<p>it is interpreted just like</p>
<pre><code>if (n in "seq1") and "something":
    ...
</code></pre>
<p>However, the <code>in</code> of a <code>for</code> loop has lower precedence than <code>and</code> (in fact it has to, otherwise the following would be a syntax error). Hence if a Python beginner <a href="https://stackoverflow.com/a/33880344/699305">writes</a></p>
<pre><code>for n in "seq1" and "something":
    ...
</code></pre>
<p>..., it is equivalent to this:</p>
<pre><code>for n in ("seq1" and "something"):
    ...
</code></pre>
<p>(which, provided "seq1" is truthy, evaluates to <code>for n in "something"</code>).</p>
<p>So, the question: Where is the precedence of the for-loop's <code>in</code> keyword specified/documented? I understand that <code>n in ...</code> is not an expression in this context (it does not have  a value), but is part of the <code>for</code> statement's syntax. Still, I'm not sure how/where non-expression precedence is specified.</p>
</div>
<div class="post-text" itemprop="text">
<p>In the context of a <code>for</code> statement, the <code>in</code> is just part of the grammar that makes up that compound statement, and so it is distinct from the operator <code>in</code>. The Python grammar specification defines a <code>for</code> statement <a href="https://docs.python.org/3/reference/compound_stmts.html#for" rel="noreferrer">like this</a>:</p>
<pre><code>for_stmt ::=  "for" target_list "in" expression_list ":" suite
              ["else" ":" suite]
</code></pre>
<p>The point to make is that this particular <code>in</code> will not be interpreted as part of <em>target_list</em>, because a comparison operation (e.g. <code>x in [x]</code>) is not a valid <em>target</em>. Referring to the grammar specification again, <em>target_list</em> and <em>target</em> are <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="noreferrer">defined as follows</a>:</p>
<pre><code>target_list     ::=  target ("," target)* [","]
target          ::=  identifier
                     | "(" target_list ")"
                     | "[" target_list "]"
                     | attributeref
                     | subscription
                     | slicing
                     | "*" target
</code></pre>
<p>So the grammar ensures that the parser sees the first <code>in</code> token after a <em>target_list</em> as part of the <code>for ... in ...</code> statement, and not as a binary operator. This is why trying to write things very strange like <code>for (x in [x]) in range(5):</code> will raise a syntax error: Python's grammar does not permit comparisons like <code>(x in [x])</code> to be targets.</p>
<p>Therefore for a statement such as <code>for n in "seq1" and "something"</code> is unambiguous. The <em>target_list</em> part is the identifier <code>n</code> and the <em>expression_list</em> part is the iterable that <code>"seq1" and "something"</code> evaluates to. As the linked documentation goes on to say, each item from the iterable is assigned to <em>target_list</em> in turn.</p>
</div>
<div class="post-text" itemprop="text">
<p>The word <code>in</code> in a <code>for</code> loop is part of a <em>statement</em>. Statements have no precedence.</p>
<p><code>in</code> the operator, on the other hand, is always going to be part of an expression. Precedence governs the relative priority between operators in expressions.</p>
<p>In statements then, look for the <code>expression</code> parts in their documented grammar. For the <a href="https://docs.python.org/2/reference/compound_stmts.html#the-for-statement" rel="noreferrer"><code>for</code> statement</a>, the grammar is:</p>
<pre><code>for_stmt ::=  "for" target_list "in" expression_list ":" suite
              ["else" ":" suite]
</code></pre>
<p>The <code>and</code> operator in your example is part of the <code>expression_list</code> part, but the <code>"in"</code> part is <em>not part of the expression</em>.</p>
<p>The 'order' then is set in Python's grammar rules, which govern the parser. Statements are the top-level constructs, see the <a href="https://docs.python.org/2/reference/toplevel_components.html" rel="noreferrer"><em>Top-level components</em> documentation</a> (with stand-alone expressions being called <a href="https://docs.python.org/2/reference/simple_stmts.html#expression-statements" rel="noreferrer"><em>expression statements</em></a>). Expressions are always part of a statement, giving statements priority over anything contained in a statement.</p>
</div>
<span class="comment-copy">Precedence is only a concept for expressions. The "in" keyword there has no precendence, just like "for" and ":" don't.</span>
<span class="comment-copy"><code>in</code> in case of the loop is not an operator, it has no precedence in that case. It's simply how Python parses a for-loop syntax.</span>
<span class="comment-copy">Right, I understand that actually. But the parser has its own precedence rules for recognizing expressions, so there's still something to say.</span>
<span class="comment-copy">BTW, even if precedence was different in the <code>if</code> case, this would not work, because <code>n in ("seq1" and "something")</code> is evaluated as <code>f n in "something"</code>. You probably meant <code>n in "seq1" + "something"</code>, which works just fine, as <code>+</code> has higher precedence than <code>in</code></span>
<span class="comment-copy">@tobias_k, I didn't write anything like this; the question was inspired by a beginner's use of the <code>for</code> loop variant (see linked question), which had me scratching my head for a moment since I do know that <code>in</code> has higher precedence in expressions. I'm still not sure what that code really intended...</span>
<span class="comment-copy">Any insights on how this rule takes precedence over parsing <code>in</code> as part of the <code>expression_list</code>? Is it just left to right processing? Parser internals and "it would be a syntax error the other way around"? Something else yet?</span>
<span class="comment-copy">@alexis: there is no <code>"for" target_list expression_list:</code> syntax, so it'd be a syntax error if interpreted that way. And <code>in</code> is a <i>binary</i> operator, so you need a left-hand side operator. <code>target_list</code> can't be it, because there is no <code>for expression_list:</code> syntax either.</span>
<span class="comment-copy">@alexis: <code>in</code> is a keyword, so it can't be in <code>target_list</code>, and if there is an <code>in</code> in <code>expression_list</code> then it's completely independent of this syntax rule.</span>
<span class="comment-copy">@alexis: the parser goes at tokens from left to right; by this time a new statement is required, <code>for</code> is found so a <code>for</code> statement is assumed; so until <code>in</code> is found, the tokens following <code>for</code> must match the <code>target_list</code> grammar rule. And only once valid <code>target_list</code> tokens have been processed and <code>in</code> has been found is an <code>expression_list</code> rule allowed to come into play. At no point is the <code>in</code> token seen as part of an expression.</span>
<span class="comment-copy">Did you mean to say the <code>expression_list</code> is <code>"seq1" and "something"</code>, rather than just <code>"something"</code>? Sure, it evaluates to <code>"something"</code> because of the definition of <code>and</code>, but I wouldn't say that's what the expression "is".</span>
<span class="comment-copy">Well said. Treat the "in" in <code>for … in …:</code> as an homonym of the <code>x in [x]</code> expression: spelled the same, but not the same</span>
<span class="comment-copy">@sleblanc, that they are homonyms is the starting point of the question. The question was how they get disambiguated, given that this also affects grouping. I think it's been covered by now...</span>
