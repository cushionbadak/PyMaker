<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/6031584/importing-from-builtin-library-when-module-with-same-name-exists">Importing from builtin library when module with same name exists</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>I want to import logging <a href="https://docs.python.org/3/library/logging.html" rel="nofollow">https://docs.python.org/3/library/logging.html</a> into a document named logging.py .   When I try to import logging.handlers though, it fails because I believe it's searching the document for a handlers function, instead of importing from the module.  How can I fix this so it will look for the higher level logging instead of looking inside the file?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it by removing current directory (first in sys.path) from python path:</p>
<pre><code>import sys
sys.path = sys.path[1:]
import logging
print dir(logging)
</code></pre>
<p>test:</p>
<pre><code>$ python logging.py 
['BASIC_FORMAT', 'BufferingFormatter', 'CRITICAL', 'DEBUG', 'ERROR',
 'FATAL', 'FileHandler', 'Filter', 'Filterer', 'Formatter', 'Handler',
 'INFO', 'LogRecord', 'Logger', 'LoggerAdapter', 'Manager', 'NOTSET', 
 'NullHandler', 'PlaceHolder', 'RootLogger', 'StreamHandler', 'WARN',
 'WARNING', '__all__', '__author__', '__builtins__', '__date__',
 '__doc__', '__file__', '__name__', '__package__', '__path__',
 '__status__', '__version__', '_acquireLock', '_addHandlerRef',
 '_checkLevel', '_defaultFormatter', '_handlerList', '_handlers',
 '_levelNames', '_lock', '_loggerClass', '_releaseLock',
 '_removeHandlerRef', '_showwarning', '_srcfile', '_startTime',
 '_unicode', '_warnings_showwarning', 'addLevelName', 'atexit',
 'basicConfig', 'cStringIO', 'captureWarnings', 'codecs', 'critical',
 'currentframe', 'debug', 'disable', 'error', 'exception', 'fatal',
 'getLevelName', 'getLogger', 'getLoggerClass', 'info', 'log',
 'logMultiprocessing', 'logProcesses', 'logThreads', 'makeLogRecord',
 'os', 'raiseExceptions', 'root', 'setLoggerClass', 'shutdown', 'sys',
 'thread', 'threading', 'time', 'traceback', 'warn', 'warning',
 'warnings', 'weakref']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are using a module with the same name as a standard lib you could insert your standard lib packages directory first in your path using <code>distutils.sysconfig.get_python_lib</code> to locate the directory, that will still enable you to use the any packages in your scripts directory:</p>
<pre><code>import sys
import distutils.sysconfig as sysconfig
sys.path.insert(0, sysconfig.get_python_lib(standard_lib=1))

import logging
print(logging.__file__)
</code></pre>
<p>Output:</p>
<pre><code>$ python3 logging.py 
/usr/lib/python3.4/logging/__init__.py
$ python logging.py 
/usr/lib/python2.7/logging/__init__.pyc
</code></pre>
<p>If you want to set the path back to normal you can pop and the import will still work:</p>
<pre><code>import sys
import distutils.sysconfig as sysconfig
sys.path.insert(0, sysconfig.get_python_lib(standard_lib=1))
print(sys.path)
import logging
sys.path.pop(0)
print("")
print(logging.__file__)
print("")
print(sys.path)
</code></pre>
<p>Output:</p>
<pre><code>$ python3 logging.py 
['/usr/lib/python3.4', '/home/padraic', '/home/padraic/mymods', '/usr/lib/python3.4', '/usr/lib/python3.4/plat-x86_64-linux-gnu', '/usr/lib/python3.4/lib-dynload', '/home/padraic/.local/lib/python3.4/site-packages', '/usr/local/lib/python3.4/dist-packages', '/usr/lib/python3/dist-packages', '/usr/lib/python3.4/dist-packages']

/usr/lib/python3.4/logging/__init__.py

['/home/padraic', '/home/padraic/mymods', '/usr/lib/python3.4', '/usr/lib/python3.4/plat-x86_64-linux-gnu', '/usr/lib/python3.4/lib-dynload', '/home/padraic/.local/lib/python3.4/site-packages', '/usr/local/lib/python3.4/dist-packages', '/usr/lib/python3/dist-packages', '/usr/lib/python3.4/dist-packages']
</code></pre>
</div>
<span class="comment-copy">Are you using python 2 or 3?</span>
<span class="comment-copy">Any reason why you can't rename the locally made <code>logging.py</code>?</span>
<span class="comment-copy">python 3, working on a project so I wanted to find a solution rather than get everyone to rename the file</span>
<span class="comment-copy">I would totally go for changing the name to <code>logger.py</code> or whatever. Anyway, theoretically, in py3 or in py2 (with absolute import declaration), I guess it should work as long as the <code>logging.py</code> is not in the same path as the main script.</span>
<span class="comment-copy">@en_Knight, I tried it on my python 2.7 interpreter and <code>logging.py</code> imported itself again.</span>
<span class="comment-copy">This can lead to totally unexpected results...</span>
<span class="comment-copy">it's good enough for a proof of concept though, it's hacky i'm content</span>
