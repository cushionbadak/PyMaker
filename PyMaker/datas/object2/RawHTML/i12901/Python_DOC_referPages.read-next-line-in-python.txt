<div class="post-text" itemprop="text">
<p>I am trying to figure out how to search for a string in a text file, and if that string is found, output the next line.</p>
<p>I've looked at some similar questions on here but couldn't get anything from them to help me.</p>
<p>This is the program I have made. I have made it solely to solve this specific problem and so it's also probably not perfect in many other ways.</p>
<pre><code>def searcher():
    print("Please enter the term you would like the definition for")
    find = input()
    with open ('glossaryterms.txt', 'r') as file:
        for line in file:
            if find in line:
                print(line)
</code></pre>
<p>So the text file will be made up of the term and then the definition below it. </p>
<p>For example:</p>
<blockquote>
<p>Python<br/>
  A programming language I am using</p>
</blockquote>
<p>If the user searches for the term <code>Python</code>, the program should output the definition.</p>
<p>I have tried different combinations of print (line+1) etc. but no luck so far.</p>
</div>
<div class="post-text" itemprop="text">
<p>your code is handling each line as a term, in the code below f is an iterator so you can use next to move it to the next element: </p>
<pre><code>with open('test.txt') as f:
    for line in f:
        nextLine = next(f)
        if 'A' == line.strip():
            print nextLine
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your filesize is small, then you may simply read the file by using <a href="https://docs.python.org/3/library/io.html#io.IOBase.readlines" rel="nofollow"><code>readlines()</code></a> which returns a list of strings each delimited by <code>\n</code> character, and then find the index of the selected word, and the print the item at <em>position + 1</em> in the given list.</p>
<p>This can be done as:</p>
<pre><code>def searcher():
    print("Please enter the term you would like the definition for")
    find = input()

    with open("glossaryterms.txt", "r") as f:       
        words = list(map(str.strip, f.readlines()))
        try: 
            print(words[words.index(find) + 1])
        except:
            print("Sorry the word is not found.")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could try it Quick and dirty with a flag.</p>
<pre><code>with open ('glossaryterms.txt', 'r') as file:
  for line in file:
    if found:
        print (line)
        found = False
    if find in line:
        found = True
</code></pre>
<p>It's just important to have the "if found:" before setting the flag. So if you found your search term next iteration/line will be printed.</p>
</div>
<div class="post-text" itemprop="text">
<p>In my mind, the easiest way would be to cache the last line. This means that on any iteration you would have the previous line, and you'd check on that - keeping the loop relatively similar</p>
<p>For example:</p>
<pre><code>def searcher():
    last_line = ""
    print("Please enter the term you would like the definition for")
    find = input()
    with open ('glossaryterms.txt', 'r') as file:
        for line in file:
            if find in last_line:
                print(line)
            last_line = line
</code></pre>
</div>
<span class="comment-copy">It's preferable to use the <code>next()</code> function for this, rather than call the <code>iterator.next()</code> method.</span>
<span class="comment-copy">Doesn't work if the search string is not on a line that's a multiple of two - every odd line is skipped. Moving the next into the print statement resolves this but creates another issue that if it is again found in that line, the next line will not be printed</span>
<span class="comment-copy">@meiamsome : "So the text file will be made up of the term and then the definition below it."</span>
<span class="comment-copy">@Pawe≈ÇKordowski Ah, yep, probably fine then! hah</span>
<span class="comment-copy">It works, thanks. Not sure I understand why just yet but will try to dismantle it to help my understanding. Thanks again</span>
<span class="comment-copy">An example would be more better :)</span>
<span class="comment-copy">Thanks. Could you please give me an example of this in code as I can't really translate what you're saying in to working lines?</span>
<span class="comment-copy">@user1480135: Check <a href="https://docs.python.org/3/library/io.html#io.IOBase.readlines" rel="nofollow noreferrer">the document</a>. <code>file.readlines()</code> read all lines of the file and put the lines into a list.</span>
<span class="comment-copy">Thanks @KevinGuan for the link :) it's worth checking out.</span>
<span class="comment-copy">Not sure your example works per the original spec (i.e. that the find string has to be in the line, not that it is the line, e.g. searching for Py in the example), relatively simple to fix though, I guess!</span>
<span class="comment-copy">Theoretically I would have thought that this would work, but for some reason it just does nothing after the search term is entered</span>
<span class="comment-copy">@user1480135 Works fine for me, if you're using python 2 it should be raw_input, perhaps that's the issue?</span>
