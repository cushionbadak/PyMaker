<div class="post-text" itemprop="text">
<p>I'm a little bit confused by some <code>asyncio</code> functions. I see there is <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.BaseEventLoop.create_task"><code>BaseEventLoop.create_task(coro)</code></a> function to schedule a co-routine. The documentation for <code>create_task</code> says its a new function and for compatibility we should use <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.async"><code>asyncio.async(coro)</code></a> which by referring to docs again I see is an alias for <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.ensure_future"><code>asyncio.ensure_future(coro)</code></a> which again schedules the execution of a co-routine.</p>
<p>Meanwhile, I've been using <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.Task"><code>Task(coro)</code></a> for scheduling co-routine execution and that too seems to be working fine. so, what's the difference between all these?</p>
</div>
<div class="post-text" itemprop="text">
<p>As you've noticed, they all do the same thing.</p>
<p><code>asyncio.async</code> had to be replaced with <code>asyncio.ensure_future</code> because in Python &gt;= 3.5, <code>async</code> has been made a keyword<a href="https://www.python.org/dev/peps/pep-0492/#backwards-compatibility">[1]</a>.</p>
<p><code>create_task</code>'s raison d'etre<a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.BaseEventLoop.create_task">[2]</a>:</p>
<blockquote>
<p>Third-party event loops can use their own subclass of Task for interoperability. In this case, the result type is a subclass of Task.</p>
</blockquote>
<p>And this also means you <strong>should not</strong> create a <code>Task</code> directly, because different event loops might have different ways of creating a "Task".</p>
<p><strong>Edit</strong></p>
<p>Another <em>important</em> difference is that in addition to accepting coroutines, <code>ensure_future</code> also accepts any awaitable object; <code>create_task</code> on the other hand just accepts coroutines.</p>
</div>
<span class="comment-copy">Sounds like I'd better use <code>ensure_future</code> then. Thanks for clearing this up.</span>
<span class="comment-copy">Unless you're writing code for Python &lt; 3.4.4, of course ;)</span>
<span class="comment-copy">Ah, yes. I didn't pay attention! I <i>am</i> using Python &lt; 3.4.4 as it happens; 3.4.3 to be precise.</span>
<span class="comment-copy">This was counter-intuitive because it sounded like you said to use ensure_future and not create_task, so I made my research. In 2016, <a href="https://github.com/python/asyncio/issues/477#issuecomment-268709555" rel="nofollow noreferrer">Guido said the opposite</a>. If you know you have a coroutine and you want to schedule its execution, you should just call create_task directly. create_task exists so a third party loop can return a subclass so you shouldn't call the task constructor directly. Hope that clears things up for other asyncio neophytes.</span>
