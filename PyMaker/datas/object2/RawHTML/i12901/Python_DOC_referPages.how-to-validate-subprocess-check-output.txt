<div class="post-text" itemprop="text">
<p>I am executing commands through subprocess.check_output() because i want the o/p of it to be stored in a buffer.</p>
<p>Now, while doing this if command gets failed or if there is any error then it is causing problem for my whole application.</p>
<p>What i want is, even if command fails it should just print and go on for next instruction.</p>
<p>Can anybody help me to solve it?</p>
<p>Below is the sample code.</p>
<pre><code>from subprocess import check_output
buff=check_output(["command","argument"])
if buff=="condition":
    print "Do Some Task "
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way to do this would be to use the <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow"><code>Popen.communicate</code></a> method on a <code>Process</code> instance.</p>
<pre><code>from subprocess import Popen, PIPE
proc = Popen(["command", "argument"], stdout=PIPE, stderr=PIPE)
out, err = proc.communicate() # Blocks until finished
if proc.returncode != 0: # failed in some way
    pass # handle however you want
# continue here
</code></pre>
</div>
<span class="comment-copy">Why can't you just catch the exception <code>check_output()</code> raises?</span>
<span class="comment-copy">Not really a better way... <code>subprocess.check_output</code> will raise an exception for where the return value is non-zero itself and return the output from the subprocess as a string. No need to check the return code or manually raise an exception if you want to handle the normal case elsewhere in the program.</span>
<span class="comment-copy">Does <code>check_output</code> concatenate the output of <code>stderr</code> and <code>stdout</code>?</span>
<span class="comment-copy">If you pass <code>stderr=subprocess.STDOUT</code> to it, then yes</span>
<span class="comment-copy">Hmm, cool. As a compromise, I'll change my phrasing. :)</span>
<span class="comment-copy">@BrendanMolloy : i tried using Popen, it is working but i don't want that way, because i want to store the o/p of commands into a buffer. So i guess i will have to use subprocess.check_output() with try and exception method</span>
