<div class="post-text" itemprop="text">
<p>Consider the line from concurrent.futures example ( <a href="https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor-example" rel="nofollow">https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor-example</a> ):</p>
<pre><code>future_to_url = {executor.submit(load_url, url, 60): url for url in URLS}
</code></pre>
<p>Don't get the idea what's exactly going on her <strong>executor.submit(load_url, url, 60): url</strong>. Evidently, it is set comprehension and <strong>executor.submit</strong> is applied to every <strong>url</strong> in <strong>URLS</strong>. But what technique is used to fix <strong>load_url</strong> and <strong>60</strong> parameters?? That is some kind of curriyng or partial apply using column operator, but what language feature is it??</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Evidently, it is set comprehension</p>
</blockquote>
<p>No, it's a dict comprehension. The expression before the colon is each new key, and the expression after is the corresponding value.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>load_url</code> is a method defined just above (<code>load_url(url, timeout)</code>).</p>
<p>I guess <code>executor.submit(load_url,url,60)</code> calls at some point <code>load_url(url,60)</code>.
So 60 is the timeout (probably because 60s=1mn). </p>
<p>The dictionary comprehension applies <code>executor.submit</code> to every url with the same two parameters <code>load_url</code> and <code>60</code>, and one changing parameter <code>url</code>.</p>
</div>
<span class="comment-copy">It's a dictionary comprehension, not a set comprehension, thus the <code>:</code></span>
<span class="comment-copy">Little notice: this is a dictionary comprehension :)</span>
<span class="comment-copy">that's right )))</span>
<span class="comment-copy">yes, thanks )))))</span>
<span class="comment-copy">Yes, that is <b>dictionary</b> comprehension. Thanks )))</span>
<span class="comment-copy">Was <b>that</b> your question ? I thought it was "what technique is used to fix load_url and 60 parameters ?", and my answer is: there's not technique, they are just fixed.</span>
