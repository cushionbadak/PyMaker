<div class="post-text" itemprop="text">
<p>I'm trying to to sort through a file line by line, comparing the beginning with a string from a list, like so:</p>
<pre><code>for line in lines:
    skip_line = True
    for tag in tags:
        if line.startswith(tag) is False:
            continue
        else:
            skip_line = False
            break
    if skip_line is False:
        #do stuff
</code></pre>
<p>While the code works just fine, I'm wondering if there's a neater way to check for this condition. I have looked at <code>any()</code>, but it seems to just give me the possibility to check if any of my lines start with a fixed tag (not eliminating the <code>for</code> loop needed to loop through my list. </p>
<p><strong>So, essentially I'm asking this:</strong><br/>
Is there a better, sleeker option than using a for loop to iterate over my <code>tags</code> list to check if the current line starts with one of its elements?</p>
<p><strong>As Paradox pointed out in his answer:</strong>
Using a dictionary to lookup if the string exists has O(1) complexity and actually makes the entire code look a lot cleaner, while being faster than looping through a list. Like so:</p>
<pre><code>tags = {'ticker':0, 'orderBook':0, 'tradeHistory':0}
for line in lines:
    if line.split('\t')[0] in tags:
        #do stuff
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of iterating over your tags list, you can put all your tags inside a HashMap and do a simple lookup like myMap.exists("word"). This would be much faster that iterating through your tags list and works in O(1) complexity. In python its actually a dictionary data structure. <a href="http://progzoo.net/wiki/Python:Hash_Maps" rel="nofollow">http://progzoo.net/wiki/Python:Hash_Maps</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If you're determined to pull this down into a one-liner, you can use a generator:</p>
<pre><code>tagged_lines = (line for line in lines if any(line.startswith(tag) for tag in tags))
for line in tagged_lines:
    # Do something with line here 
</code></pre>
<p>Of course, how readable this is is a different question.</p>
<p>You've probably seen syntax like <code>[x*x for x in range(10)]</code> before, but by swapping the <code>[]</code> for <code>()</code>, we instead generate each item only when it's asked for.</p>
</div>
<div class="post-text" itemprop="text">
<p>This has been asked before. Take a look at this post for more solutions. I would flag this post as a duplicate but I still do not have the reputation. </p>
<p><a href="https://stackoverflow.com/a/10477481/5016492">https://stackoverflow.com/a/10477481/5016492</a></p>
<p>You'll need to modify the regular expression so that it looks at the start of the line. Something like this should work for you '^tag' .  </p>
</div>
<div class="post-text" itemprop="text">
<p>How about a combination off any() and filter() like in this example:</p>
<pre><code># use your data here ...
mytags = ('hello', 'world')
mylines = ('hello friend', 'you are great', 'world is cruel')

result = filter(lambda line: any(map(lambda tag: line.startswith(tag), mytags)), mylines)
print result
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In fact <code>any()</code> will do the job</p>
<p>Looping each line</p>
<pre><code>for line in lines:
     tagged = any(lambda: line.startswith(y), tags)
</code></pre>
<p>Any list start with any tag</p>
<pre><code>any(lambda x: any(lambda y: x.startswith(y), tags), lines)
</code></pre>
<p>Filter tagged lines</p>
<pre><code>filter(lambda x: any(lambda y: x.startswith(y), tags), lines)
</code></pre>
</div>
<span class="comment-copy">You're comparing each of multiple strings to each of multiple strings. You'll have to use loops, or call something that uses loops internally (like <code>any()</code>).</span>
<span class="comment-copy">By any chance, are all the tags the same length? Or are tags delimited from the rest of the line in some way, that would allow you to pick out the part of <code>line</code> that <i>might</i> correspond to a tag before going through the list of tags? Alternatively, is it practical to load all the lines into memory at once, or do you really want to iterate through the file line by line?</span>
<span class="comment-copy">They're seperated by tabs, the tags are not the same length and yes - I need to go over them line by line; I'm looking for json strings which are marked by one of three tags (ticker, orderBook, or transactionHistory), each json strin being then packed into separate files as they occur.</span>
<span class="comment-copy">You may find a set to be a more natural data structure than a dict; <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">docs.python.org/3/tutorial/datastructures.html#sets</a></span>
<span class="comment-copy">I've added an example of how I solved this to my question - this was exactly what I was looking for. If you could, add it to your answer, for readability purposes and such. Posting it under here doesn't read so well.</span>
<span class="comment-copy">Should be <code>taged = any(line.startswith(y) for y in tags)</code> and <code>filter(lambda x: not any(x.startswith(y) for y in tags), lines)</code> else your code doesn't work.</span>
