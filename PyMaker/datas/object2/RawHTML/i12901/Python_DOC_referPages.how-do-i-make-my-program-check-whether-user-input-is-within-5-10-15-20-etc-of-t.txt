<div class="post-text" itemprop="text">
<pre><code>import random

print("Pick a number from 1-50")

randomNumber = random.randint(1,50)
correct = False

while not correct:
    try:
        userInput = int(input("Insert your number here. "))
    except ValueError:
        print("That is not a Number!")
        continue
    if userInput &gt; randomNumber:
        print("Guess lower.")
    elif userInput &lt; randomNumber:
        print("Guess Higher.")
    else:
        print("You got it!")
        break
</code></pre>
<p>So this code currently takes the user input and says whether the user guessed the random integer, or if they should guess higher/lower. I want to edit the code to now say whether the user input is within 5,10,15, etc of the random integer. </p>
<p>So if the random integer was 30, and the user inputs 20, the program would say something like "You are within 10; guess higher."</p>
<p>Any advice? I'm extremely new to python, so please respond with more simple methods if possible.</p>
<p>Thanks.</p>
<p>PS: Oh, preferably without the use of modules, mainly because I'm still learning.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this does what you want, and it cuts down on the if chains a little:</p>
<pre><code>import random

print("Pick a number from 1-50")

randomNumber = random.randint(1,50)
correct = False

while not correct:
    try:
        userInput = int(input("Insert your number here. "))
    except ValueError:
        print("That is not a Number!")
        continue
    if randomNumber == userInput: # Let's check this first!
        print ("YOU WIN!!!")
        break # We use break b/c changing correct would still run rest of loop

    acceptable_ranges = [5, 10, 15, 20, 25, 30, 25, 40, 45, 50]
    guess_error = userInput - randomNumber
    i = 0
    while abs(guess_error) &gt; acceptable_ranges[i]: # see how close they are
        i += 1
    if guess_error &lt; 0: # let's figure out where they need to go
        next_guess_direction = "higher"
    else:
        next_guess_direction = "lower"

    print (("You are within %i: Please guess %s")
           %(acceptable_ranges[i], next_guess_direction))
</code></pre>
<p>Let's look. at the last <code>if</code> statement a little further and the final <code>print</code> line.  We are checking to see if <code>guess_error</code>, defined above (line 15) <code>guess_error = userInput - randomNumber</code> is less than 0 (negative).  If it is less than zero, then we make the variable <code>next_guess_direction</code> equal to the string "higher," because the next guess needs to be larger than the last one (<code>randomNumber</code> was larger than <code>userInput</code>.  If <code>guess_error</code> is not negative, then it is positive, because we already eliminated the we eliminate the possibility of 0 using:</p>
<pre><code>    if randomNumber == userInput: # Let's check this first!
        print ("YOU WIN!!!")
</code></pre>
<p>So, if guess_error is positive, we know that <code>userInput</code> was larger than <code>randomNumber</code> and we set <code>next_guess_direction</code> equal to the string "lower."  Finally, we print out everything that we have found:</p>
<pre><code>    print (("You are within %i: Please guess %s")
           %(acceptable_ranges[i], next_guess_direction))
</code></pre>
<p>I am using an older version of formatting where <code>%i</code> and <code>%s</code> are placeholders for integer and string, respectively.  I then define what should be formatted there using <code>%(acceptable_ranges[i], next_guess_direction)</code>, which simply means to put <code>acceptable_ranges[i]</code> in for the integer and <code>next_guess_direction</code> in for the string.  Keep in mind, we found <code>i</code> in <code>acceptable_ranges[i]</code> right above the if statement. </p>
<p>I know that is all long, but I did not know how much detail you needed!</p>
</div>
<div class="post-text" itemprop="text">
<p>Update: I see you ask to do it without modules.  Here's a solution:</p>
<pre><code>def ceil(xx):
    if int(xx) &lt; xx:
        return int(xx) + 1
    else:
        return int(xx)

def generate_response(actual, guess, interval=5):
    diff_interval_units = (guess - actual) / float(interval)
    within = ceil(abs(diff_interval_units)) * interval
    response = "You are within %d" % within
    if diff_interval_units &gt; 0:
        response += "; guess lower"
    elif diff_interval_units &lt; 0:
        response += "; guess higher"
    return response
</code></pre>
<p>-- original answer:
You can do this with numpy's <code>ceil</code> function.</p>
<p>For instance:</p>
<pre><code>import numpy as np

def generate_response(actual, guess, interval=5):
    diff_interval_units = (guess - actual) / np.float(interval)
    within = np.ceil(np.abs(diff_interval_units)) * interval
    response = "You are within %d" % within
    if diff_interval_units &gt; 0:
        response += "; guess lower"
    elif diff_interval_units &lt; 0:
        response += "; guess higher"
    return response
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A solution using the <a href="https://docs.python.org/3/reference/expressions.html#index-52" rel="nofollow">modulo operator</a>:</p>
<pre><code>import random
randomNumber = random.randint(0,100)

def guess(divisor = 5):
    while 1:
        try:
            print("Pick a number from 0-100")
            userInput = int(input("Insert your number here: "))
        except ValueError:
            print("That is not a Number!")
            continue

        delta = randomNumber - userInput

        if delta == 0:
            print("You got it!")
            return

        remainder = delta % divisor
        # this takes advantage of python truncating non-floating point numbers
        rounded_delta = (abs(delta) / divisor) * divisor + divisor * bool(remainder)

        high_or_low = 'higher' if delta &gt; 0 else 'lower'
        print("You are within %s. Guess %s." % (rounded_delta, high_or_low))
</code></pre>
</div>
<span class="comment-copy">By the way, it would be clearer to just write <code>while True:</code>.  You never reset the <code>correct</code> variable, and the way it's currently written it makes the reader think that <code>correct</code> will be reset during the <code>while</code> loop.</span>
<span class="comment-copy">do you mind explaining the last 5 lines? I don't think I've learned those yet..</span>
<span class="comment-copy">I have updated my answer with a fairly involved explanation.  Please let me know if you need more help with anything specifically.</span>
