<div class="post-text" itemprop="text">
<p>Say I have an array:</p>
<pre><code>array=[1,0,2,3,4,0,0,5,6,0]
</code></pre>
<p>I want a list that returns just the numbers and not zeros. So I did this and it works:</p>
<pre><code>print(list(y for y in array if y!=0)
</code></pre>
<p>I tried another way without list comprehension and it won't work, can someone explain why?</p>
<pre><code>for y in array:
    if y!=0:
        print(list(y))
</code></pre>
<p>What would be another way to print a list of just the numbers without the 0's?</p>
<p>Edit: I tried to solve this problem using a for loop, and it works if I make an empty list on top. It works, but I don't understand why! But why does this work and other one doesn't? What's more efficient, this or the list comprehension in terms of speed/memory?</p>
<pre><code>array=[1,0,2,3,4,0,0,5,6,0]
list=[]
for y in array:
    if y!=0:
        list.append(y)
print(list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Lets take a good look at what you thought was right:</p>
<pre><code>for y in array:
    if y!=0:
        print(list(y))
</code></pre>
<p>
So we go through every value in the array. If the value isn't zero, we print <code>list(y)</code>. The problem starts here. Because <code>y</code> is a integer, <code>list(y)</code> returns an error, because you can't convert an integer into a list. It would work if you did <code>print(y)</code>.</p>
<p>But then comes another problem. If we print every element of the list which isn't a zero, we get something like this, because that code would only print in order:</p>
<pre><code>1
2
3
4
5
6
</code></pre>
<p>You state in your question that you wanted a <em>list</em>. So this code wouldn't work either, because there would be no stored list. So we finally arrive to the <em>right</em> answer:</p>
<pre><code>array=[1,0,2,3,4,0,0,5,6,0]
list=[]
for y in array:
    if y!=0:
        list.append(y)
print(list)
</code></pre>
<p>This answer stores each <code>y</code> value which isn't zero in a list, then finally prints out the list.</p>
<p>EDIT:</p>
<p>This is how the list comprehension works:</p>
<p>First of all, I can't help but observe that you have made a syntax error. :P You forgot an ending parantheses! Here's the correct code:
<code>print(list(y for y in array if y != 0))</code>.</p>
<p>Second of all, I need to state that that is <em>NOT A LIST COMPREHENSION</em>. That is a generator. There is a tiny difference.</p>
<p>A list comprehension generates the list on the spot. A list comprehension looks like this: <code>[y for y in array if y != 0]</code></p>
<p>A generator, which is what you used above, is an expression is stored. It looks like this: <code>y for y in array if y != 0</code>.</p>
<p>So instead of using <code>list(y for y in array if y != 0</code>, you can directly go to <code>[y for y in array if y != 0]</code>.</p>
<p>So now I will explain how the "list comprehension" (generator expression) actually works. It starts out by looping through each value of <code>array</code>. It checks if the value is not a zero. If it isn't, it adds <code>y</code> to the output list. So basically, the generator expression is the same as the second working code with the for loop, except python creates the output list for you, adding some convenience.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to do it with a <code>for</code> loop you need to do something like this:</p>
<pre><code>nonzero = []
for y in array:
   if y != 0:
      nonzero.append(y)
print(nonzero)
</code></pre>
<p>but a list comprehension or a <code>filter</code> will be better, both in terms of readability and in terms of speed.</p>
</div>
<div class="post-text" itemprop="text">
<p>With your second attempt, you had <code>list(y)</code> where you should've had <code>y</code>. As <code>y</code> is a single int and not an iterable, <code>list(y)</code> fails. This is the output:</p>
<pre><code>&gt;&gt;&gt; array=[1,0,2,3,4,0,0,5,6,0]
&gt;&gt;&gt; print(list(y for y in array if y!=0))
[1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; for y in array:
    if y!=0:
        print(list(y))


Traceback (most recent call last):
  File "&lt;pyshell#49&gt;", line 3, in &lt;module&gt;
    print(list(y))
TypeError: 'int' object is not iterable
&gt;&gt;&gt; for y in array:
    if y!=0:
        print(y)


1
2
3
4
5
6
</code></pre>
<p>Another way is to use <code>filter</code>, like so:</p>
<pre><code>&gt;&gt;&gt; print(list(filter(bool,array)))
[1, 2, 3, 4, 5, 6]
</code></pre>
<p><code>filter</code> takes a function and iterable, applies the function to each item in the iterable, and returns only the ones where the function returned a truthy value. As <code>bool</code> is False if y is 0 (falsy) and True otherwise, it works perfectly for these purposes. Still, it may be useful to you to see that you can also do it this way:</p>
<pre><code>&gt;&gt;&gt; print(list(filter(lambda x:x != 0, array)))
[1, 2, 3, 4, 5, 6]
</code></pre>
<hr/>
<p>I see you were also wondering why the first version worked.</p>
<pre><code>&gt;&gt;&gt; print(list(y for y in array if y!=0))
</code></pre>
<p>Here, <code>for y in array</code> is a <em>generator</em>, a special kind of Python object that spits out one value every time you ask it for one, so to speak. So let me break it down this way:</p>
<pre><code>print(                              )    #Print
      list(                        )     #Convert iterable to list
             for y in array              #For each y in array...
                            if y!=0      #If y is not zero...
           y                             #Include y in the iterable for list()
</code></pre>
<p>Does that help?</p>
</div>
<div class="post-text" itemprop="text">
<p>When you create a <code>for</code> loop, everything in that loop - EVERYTHING - executes once for each time through the loop. So this line: </p>
<pre><code>print(list(y)) 
</code></pre>
<p>...prints a new <code>list</code> each trip through the loop. Whereas in the first version:</p>
<pre><code>print(list(y for y in array if y!=0)) 
</code></pre>
<p>...there is only ONE thing printed: the results of the <code>list()</code> comprehension. </p>
<p>EDIT: If you want to fix the <code>'int' object is not iterable</code> error in the second version, you can do it this way: </p>
<pre><code>for y in array:
    if y!=0:
        print([y])
</code></pre>
<p>The <code>list</code> function requires an iterable object as input. An integer is not iterable, so we surround it with brackets to put it inside a <code>list</code> instead, which essentially does the same thing. Use the version above and you'll see that a new <code>list</code> is created each time through the loop. </p>
</div>
<div class="post-text" itemprop="text">
<p>list() is a constructor that takes in zero parameters or an iterable, such as a list, str, or tuple. The problem is that an int is not an iterable, where as a list comprehension ([y for y in array if y!= 0]) returns an iterable and can be used to create a list <a href="https://docs.python.org/3/library/stdtypes.html#typesseq-list" rel="nofollow">Python documentation</a>.</p>
</div>
<span class="comment-copy">Can you explain why it is you believe the second version is the same as the first?</span>
<span class="comment-copy"><code>filter(lambda el: el != 0, array)</code> (but ew, just use <code>[el for el in array if el != 0]</code></span>
<span class="comment-copy">@RickTeachey Uh. Well in the first version I saw 'for y in array', so that's how I started the 2nd version. Then back to the first version, I saw ' if y!=0' so i wrote that in the second version. And then both of them printed out y! I do notice that in the first version, everything in converted into a list whereas the 2nd version, I attempt to only convert y into a list. But I still don't understand what's going on</span>
<span class="comment-copy">temp = (y for y in array if y!=0) is  type generator. list(temp) will return a list. but list(0) will give error, see here <a href="http://stackoverflow.com/questions/19523563/python-typeerror-int-object-is-not-iterable" title="python typeerror int object is not iterable">stackoverflow.com/questions/19523563/â€¦</a>.</span>
<span class="comment-copy">@RickTeachey In the 2nd version: If i just print(y), I get an iterable of all the numbers without the zeros, which is good. I just tried converting that to a list by doing list(y), but it doesn't work.</span>
<span class="comment-copy">Wow Now I get it! thanks a lot! Can you also explain how the first verion works step-by-step ( the list comprehension)</span>
<span class="comment-copy">@Angular Yep, edited.</span>
<span class="comment-copy">Oh, so y is a single int becuase the for loop goes through each single number in the array? So when I do list(y), it doesn't work because it's bascially doing list( a single number) which isn't suppose to work?</span>
<span class="comment-copy">That is correct!</span>
<span class="comment-copy">print (filter(lambda x:x != 0, array)) should be OK.</span>
<span class="comment-copy">@ChengchengPei: Nope, it'll print something like <code>&lt;filter object at 0x00000000032BFBA8&gt;</code>.</span>
<span class="comment-copy">@Angular: See my edit for explanation of the list comprehension version.</span>
<span class="comment-copy">I tried this, but the output I got was something like this : [[1], [2], [3], [4], [5], [6]]  So it put each number into it's own list=(</span>
<span class="comment-copy">That what it is supposed to do. Read my answer again: the line <code>print([y])</code> is run <i>every trip through the loop</i>. So you will get a new list, with one number in it (e.g., <code>[1]</code>, <code>[2]</code>, etc.), each time.</span>
<span class="comment-copy">True. Since we're on this topic, If i do something like [0]*4, I get [0,0,0,0]. what would I do to get [0],[0],[0],[0].</span>
<span class="comment-copy">@Angular What do you intend "[0],[0],[0],[0]" to represent? Do you mean a list of lists? If so, you can just do this: <code>[[0] for x in range(4)]</code>.</span>
