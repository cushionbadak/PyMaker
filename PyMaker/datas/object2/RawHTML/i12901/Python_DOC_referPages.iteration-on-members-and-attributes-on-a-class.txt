<div class="post-text" itemprop="text">
<p>I understand how to create an unsophisticated class  based on examples culled from the Web but I hit a wall when trying to access the members on it, to wit:</p>
<p>Let's say this is my class:</p>
<pre><code>class Fruit(object):
    def __init__(self, name, color, flavor):
        self.name = name
        self.color = color
        self.flavor = flavor
    def description(self):
        print('I am a %s %s and my taste is %s and I am %s' % self.color, self.name, self.flavor))
</code></pre>
<p>To create and object I use:</p>
<pre><code>lemon = Fruit('lemon', 'yellow', 'sour')
</code></pre>
<p>and to create a new attribute for lemon I use:</p>
<pre><code>lemon.peel = 'easy'
</code></pre>
<p>I would like to define a method inside (or outside) of the class that will be called <code>printall</code>  that will iterate though all the existing members of the class and print all of them with their attributes even if the attributes are variable (more than de ones initially defined). I think this is called "overloading"
but I am not sure of the proper terminology.</p>
</div>
<div class="post-text" itemprop="text">
<p>And if you're not sure then you can use the below loop to find details of all members</p>
<pre><code>import gc
#garbage collector should do the trick
#all the other code
for obj in gc.get_objects():
    if isinstance(obj, Fruit):
        print "object name :",obj.name
        printall(obj)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The term you are looking for is <a href="https://en.wikipedia.org/wiki/Type_introspection" rel="nofollow"><em>type introspection</em></a>.  <a href="https://en.wikipedia.org/wiki/Function_overloading" rel="nofollow">Overloading</a> is something entirely different, where you provide different implementations of a method.</p>
<p>You can access all instance attributes with the <a href="https://docs.python.org/3/library/functions.html#vars" rel="nofollow"><code>var()</code> function</a>; it returns a dictionary you can then iterate over to print your variables:</p>
<pre><code>def printall(self):
    for name, value in vars(self).items():
        print('self.{} = {!r}'.format(name, value))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>perhaps this is what you're looking for, though the printall method is not a part of the class, it is able to access the class when you pass an object to it and the following code should print the attribute name and value of the object lemon in Fruits class.</p>
<pre><code>def printall(lemon):
    for a in dir(lemon):
        if not a.startswith('__') :
            print a,":",getattr(lemon, a)


#rest of the code
lemon = Fruit('lemon', 'yellow', 'sour')
lemon.peel = 'easy'
printall(lemon)
</code></pre>
</div>
<span class="comment-copy">Your <code>Fruit.description()</code> method has a syntax error; there is a <code>(</code> missing before <code>self.color</code>.</span>
<span class="comment-copy">You could use <code>dir()</code> but I think it makes sense to use <code>__get__()</code> and <code>__set__()</code> here.</span>
<span class="comment-copy">Hopefully I understood your question correctly, but have you tried to put all the items you want to iterate in a list inside the class, and then iterate through the list via a for loop? edit: Oh, guess i didn't lol</span>
<span class="comment-copy">Thank you again @saamera sy ! I am working with both your code plus the one from Martijn Peters.</span>
<span class="comment-copy">The solutions proposed by Martijn Pieters and sameera.sy work but they assume that I know the name of the member I am calling, I wanted a "blind" call that will iterate all the members withou me knowing beforehand their names. If that is not possible it means that I will have to create a list with all the names I introduce in the class. Thank you both for your help!</span>
<span class="comment-copy">hi Albert, check the new answer, you can use garbage collectors for the blind call.</span>
