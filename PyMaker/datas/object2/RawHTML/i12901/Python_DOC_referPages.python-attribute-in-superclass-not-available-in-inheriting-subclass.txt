<div class="post-text" itemprop="text">
<p>I'm wondering why the below fails; basically that an inheriting subclass (<strong>SubClass</strong>) doesn't appear to have access to an attribute in the superclass (<strong>SuperClass</strong>) that it inherits from.</p>
<p>By the way, all three files below are in the same directory and, for completeness, I'm using Python3.</p>
<p>Any ideas? I think it's something stunningly simple. Thank you!</p>
<p>The super class (<strong>SuperClass</strong> in <strong>./super_class.py)</strong> ...</p>
<pre><code>class SuperClass(object):

   def __init__(self):
      self.varSuper = 'varSuper_value'
</code></pre>
<p>The inheriting sub class (<strong>SubClass</strong> in <strong>./sub_class.py)</strong> ...</p>
<pre><code>from super_class import SuperClass

class SubClass(SuperClass):

  def __init__(self):
     super(SuperClass, self).__init__()
     self.varSub = 'varSub_value'
</code></pre>
<p>The driver/tester script <strong>(./driver.py)</strong> ...</p>
<pre><code>#! /usr/bin/env python3

from sub_class import SubClass

print(SubClass().varSub)    # Works: "varSub_value"
print(SubClass().varSuper)  # Excepts: I expected "varSuper_value"
</code></pre>
<p>The exception ...</p>
<pre><code>user@linux$ ./driver.py
varSub_value                                  &lt;--- GOOD
Traceback (most recent call last):
  File "./driver.py", line 6, in &lt;module&gt;
    print(SubClass().varSuper)                &lt;--- NO GOOD
AttributeError: 'SubClass' object has no attribute 'varSuper'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are using the <a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow"><code>super()</code></a> function wrong. You should be using:</p>
<pre><code>super(SubClass, self).__init__()
</code></pre>
<p>Or in python3</p>
<pre><code>super().__init__()
</code></pre>
<p>The way you have it written you are starting the MRO just after the parent class, not just after your own class..</p>
</div>
<div class="post-text" itemprop="text">
<p>In the inheriting sub class (<strong>SubClass</strong> in <strong>./sub_class.py)</strong>, change this:</p>
<pre><code>from super_class import SuperClass

class SubClass(SuperClass):

  def __init__(self):
     super(SuperClass, self).__init__()   # &lt;---- INCORRECT. CHANGE THIS.
     self.varSub = 'varSub_value'
</code></pre>
<p>To this:</p>
<pre><code>from super_class import SuperClass

class SubClass(SuperClass):

  def __init__(self):
     super(SubClass, self).__init__()   # &lt;---- TO THIS in python-2 (also still valid in Python-3)
     super().__init__()                 # &lt;---- OR THIS for python-3 (New style in python-3)
     self.varSub = 'varSub_value'
</code></pre>
<p>Btw, the python-3 new incantation avoids the possible bug of typing the wrong class.</p>
</div>
<span class="comment-copy">You should call <code>super()</code> without arguments in python 3</span>
<span class="comment-copy">Or with the <i>correct</i> type - <code>super(</code> <b><code>SubClass</code></b> <code>, self)</code></span>
<span class="comment-copy">Thanks Sebastian for highlighting the distinction between Python2 and Python-3 usage of super().</span>
