<div class="post-text" itemprop="text">
<p>I have the following task:</p>
<p>Identify if the string has a valid IPv4 or IPv6 address using just the default modules. I've found an interesting method using socket module here it is:</p>
<pre><code>import socket

ip = '10.1.0.10'
try:
    # test for IPv4
    socket.inet_pton(socket.AF_INET, ip)
except socket.error:
    try:
        # test for IPv6 
        socket.inet_pton(socket.AF_INET6, ip)
    except socket.error:
        print(ip, " is not valid")
</code></pre>
<p>It seems ugly to have a try under a try in such case, is there a better way?
Is there a different module that could accomplish the same in a better way considering the fact that I have to check about 100 IP's.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the ipaddress module. Documentation can be found here: <a href="https://docs.python.org/3/library/ipaddress.html" rel="nofollow">https://docs.python.org/3/library/ipaddress.html</a></p>
<p>Sample code:</p>
<pre><code>&gt;&gt;&gt; ipaddress.ip_address('192.168.0.1')
IPv4Address('192.168.0.1')
&gt;&gt;&gt; ipaddress.ip_address('2001:db8::')
IPv6Address('2001:db8::')
&gt;&gt;&gt; ipaddress.ip_address('323.4.7.8')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python3.4/ipaddress.py", line 54, in ip_address
    address)
ValueError: '323.4.7.8' does not appear to be an IPv4 or IPv6 address
&gt;&gt;&gt; ipaddress.ip_address('ffff::4543:1f1f::134')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python3.4/ipaddress.py", line 54, in ip_address
    address)
ValueError: 'ffff::4543:1f1f::134' does not appear to be an IPv4 or IPv6 address
</code></pre>
</div>
<span class="comment-copy">It's not bad, though.</span>
<span class="comment-copy">Wouldn't a simple regex (<a href="http://www.regextester.com/22" rel="nofollow noreferrer">regextester.com/22</a>) suffice?</span>
<span class="comment-copy">With valid: do you mean that there exists a node with the ip address, or that you can set up a node with that address. After all only a subset of the allowed ip addresses is allocated.</span>
<span class="comment-copy">If it is valid, do you need to tell if it's V4 or V6? if not, it will suffice to have both <code>socket.inet_pton(socket.AF_INET, ip)</code> and <code>socket.inet_pton(socket.AF_INET6, ip)</code> under the same <code>try-except</code> clause. If either one fails it will get caught.</span>
<span class="comment-copy">I'm checking if what's in "ip" variable contains a valid IPv6 or IPv4, it doesn't matter if it's in use or not.  I can't put them under the same try-except as if one of the dose not fail it should be accepted as a valid IP but with your suggestion if ip contains ipv4 the it will still fail</span>
<span class="comment-copy">Not in Python 2.x I guess?</span>
<span class="comment-copy">It has actually been backported to 2.6</span>
<span class="comment-copy">that would be nice except is not part of the default modules. I have to use python2</span>
<span class="comment-copy">@KacperReutt I don't find a link to standard 2.x module? Even if so, including a test case would be helpful.</span>
<span class="comment-copy">there's also a IPy module but again, not available by default</span>
