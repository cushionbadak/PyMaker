<div class="post-text" itemprop="text">
<p>I have a list like this</p>
<pre><code>Test = [(3.0, 5.0), (1.0, 7.0), (3.0, 4.0)]
</code></pre>
<p>I want to append reversed elements in each tuple (I might be using wrong language)</p>
<p>Here is the example</p>
<p>I want to append this</p>
<pre><code>(5.0, 3.0), (7.0, 1.0), (4.0, 1.0)
</code></pre>
<p>If possible I don't want to append duplicates in the list</p>
<p>I tried this</p>
<pre><code>Test.append(Test[i][1]),(Test[i][0]) # (where i = 0 to 1)
</code></pre>
<p>but failed</p>
</div>
<div class="post-text" itemprop="text">
<p>To reverse the elements in the list, you can simply use <a href="https://docs.python.org/3/library/functions.html#reversed" rel="nofollow"><code>reversed</code></a> function, and recreate the list, like this</p>
<pre><code>&gt;&gt;&gt; test = [(3.0, 5.0), (1.0, 7.0), (3.0, 4.0)]
&gt;&gt;&gt; [tuple(reversed(item)) for item in test]
[(5.0, 3.0), (7.0, 1.0), (4.0, 3.0)]
</code></pre>
<hr/>
<blockquote>
<p>If possible I don't want to append duplicates in the list</p>
</blockquote>
<p>As you want to remove the duplicates as well, the best option would be to use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow"><code>collections.OrderedDict</code></a> like this</p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; list(OrderedDict.fromkeys(tuple(reversed(item)) for item in test).keys())
[(5.0, 3.0), (7.0, 1.0), (4.0, 3.0)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Didn't quite follow what you meant with <code>i</code> though. But a simple list comprehension will work</p>
<pre><code>myList = [(5.0, 3.0), (7.0, 1.0), (4.0, 3.0), (3.0, 5.0)]
myList.extend([(y, x) for x, y in myList if (y, x) not in myList])
</code></pre>
<p>Or just use a normal for-loop. You can either append to the same list, or add items to new list and then extend. I personally prefer new list and then extend as otherwise you will end up iterating over the newly appended items (which makes no difference aside from efficiency)</p>
<pre><code>myList = [(5.0, 3.0), (7.0, 1.0), (4.0, 3.0), (3.0, 4.0)]
res = []
for x, y in myList:
    if (y, x) not in myList and (y, x) not in res:
        res.append((y, x))
myList.extend(res)

#Output 
[(5.0, 3.0), (7.0, 1.0), (4.0, 3.0), (3.0, 5.0), (1.0, 7.0), (3.0, 4.0)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; Test = [(3.0, 5.0), (1.0, 7.0), (3.0, 4.0)]
&gt;&gt;&gt; T = [(i[1], i[0]) for i in Test]
&gt;&gt;&gt; T
[(5.0, 3.0), (7.0, 1.0), (4.0, 3.0)]
</code></pre>
</div>
<span class="comment-copy">Note: <code>Test.append(Test[i][1]),(Test[i][0]) # (where i = 0 to 1)</code> fails because <code>append()</code> takes only one argument. (on top of parenthesis mismatch) <code>Test.append((Test[i][1],Test[i][0])) # (where i = 0 to 1)</code> would work (you pass the whole tuple).</span>
<span class="comment-copy">Works for all items in test but I want to get the list item by item so that I can use it for loop</span>
<span class="comment-copy">@AamirKhan You can assign the result to a variable and you can iterate that.</span>
<span class="comment-copy">Works  Set.append(tuple(reversed(test [1])))</span>
<span class="comment-copy">@AamirKhan You can use <code>set</code> if you don't need to maintain the order of items.</span>
