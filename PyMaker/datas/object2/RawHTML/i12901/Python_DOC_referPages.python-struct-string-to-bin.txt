<div class="post-text" itemprop="text">
<p>I´m learning Python. 
Seeing the <em>module struct</em>, I found a doubt:</p>
<p>Is it possible to convert a "string" to "bin" without giving the length.</p>
<p>For the case (with chars length)</p>
<pre><code>F = open("data.bin", "wb")

import struct
data = struct.pack("24s",b"This is an unknown string")
print(data)

F.write(data)

F.close()
</code></pre>
<p>I´m trying to do the same but with unknown length.
Thanks a lot!</p>
</div>
<div class="post-text" itemprop="text">
<p>If you have the string, use <code>len</code> to determine the length of the string.</p>
<p>i.e</p>
<pre><code>data = struct.pack("{0}s".format(len(unknown_string)), unknown_string)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/stdtypes.html#bytearray-objects" rel="nofollow">Bytes</a> type is a binary data type, it just stores a bunch of 8bit characters. Note that the code with <code>struct.pack</code> ends up creating a bytes object:</p>
<pre><code>&gt;&gt;&gt; import struct
&gt;&gt;&gt; data = struct.pack("24s",b"This is an unknown string")
&gt;&gt;&gt; type(data)
&lt;class 'bytes'&gt;
&gt;&gt;&gt; len(data)
24
</code></pre>
<p>The length of this is 24 as per your format specifier. If you just want to place the bytes-string directly into the file without doing any length checking you don't even need to use the struct module, you can just write it directly to the file:</p>
<pre><code>F = open("data.bin", "wb")
F.write(b"This will work")
</code></pre>
<p>If however you wanted to keep the 24 bytes length you could keep using <code>struct.pack</code>:</p>
<pre><code>&gt;&gt;&gt; data = struct.pack("24s",b"This is an unknown st")
&gt;&gt;&gt; len(data)
24
&gt;&gt;&gt; print(data)
b'This is an unknown st\x00\x00\x00'
&gt;&gt;&gt; data = struct.pack("24s",b"This is an unknown string abcdef")
&gt;&gt;&gt; print(data)
b'This is an unknown strin'
</code></pre>
<p>In the case of supplying a bytes that is too short <code>struct.pack</code> pads the remainder with 0's and in the case where it's too long it truncates it. </p>
<p>If you don't mind getting the missing space padded out with zeros you can just pass in the bytes object directly to <code>struct.pack</code> and it will handle it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks to both...
My new code:</p>
<pre><code>F = open("data.bin", "wb")

strs = b"This is an unkown string"

import struct
data = struct.pack("{0}s".format(len(strs)),strs)
print(data)

F.write(data)

F.close()
</code></pre>
</div>
<span class="comment-copy">Bytes are already binary so just write them out directly.</span>
<span class="comment-copy">Does it need to be exactly 24 chars in length?</span>
<span class="comment-copy">Works great! Is it possible to define the "string" part with format...? To use strs = "This is an unkown string" and then struct.pack("{0}s".format(len(strs)),strs) where the second strs should be b"string_content"? Thanks a LOT!</span>
<span class="comment-copy">Yes, you could pass any variable to the <code>format</code> function, or the <code>len</code> of any string, etc. and then pass a different string as the second parameter to <code>struct.pack</code>. I'm not sure if I understand your comment though.</span>
