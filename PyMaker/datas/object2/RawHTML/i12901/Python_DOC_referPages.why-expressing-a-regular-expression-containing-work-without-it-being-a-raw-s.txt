<div class="post-text" itemprop="text">
<p>Please refer to this Regular Expression HOWTO for python3</p>
<p><a href="https://docs.python.org/3/howto/regex.html#performing-matches">https://docs.python.org/3/howto/regex.html#performing-matches</a></p>
<pre><code>&gt;&gt;&gt; p = re.compile('\d+')
&gt;&gt;&gt; p.findall('12 drummers drumming, 11 pipers piping, 10 lords a-leaping')
['12', '11', '10']
</code></pre>
<p>I have read that for regular expression containing <code>'\'</code>, the raw strings should be used like <code>r'\d+'</code> but in this code snippet <code>re.compile('\d+')</code> is used without using the <code>r</code> specifier. And it works fine. Why does it work in the first place? Why does this regular expression not need an 'r' preceding it?</p>
</div>
<div class="post-text" itemprop="text">
<p>It happens to work because <code>'\d'</code> doesn't correspond to a special character like <code>'\n'</code> or <code>'\t'</code> do. Sometimes a raw string turns out the same as the regular string version. Generally, though, raw strings will ensure that you don't get any surprises in your expression.</p>
</div>
<span class="comment-copy">Just <code>\d</code> is not a valid escape sequence and when Python finds it, it treats the <code>\</code> symbol as a literal <code>\</code>. <a href="https://docs.python.org/3.1/reference/lexical_analysis.html" rel="nofollow noreferrer"><i>Unlike Standard C, all unrecognized escape sequences are left in the string unchanged, i.e., the backslash is left in the string. (This behavior is useful when debugging: if an escape sequence is mistyped, the resulting output is more easily recognized as broken.) It is also important to note that the escape sequences only recognized in string literals fall into the category of unrecognized escapes for bytes literals.</i></a></span>
