<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1207406/how-to-remove-items-from-a-list-while-iterating">How to remove items from a list while iterating?</a>
<span class="question-originals-answer-count">
                    23 answers
                </span>
</li>
</ul>
</div>
<p>My current code uses a for loop and I'm trying to remove even numbers from list 3 and odd numbers from list 2.
However my problem is, that when the for loop iterates, the item in position 2, moves down to position one after an item is removed, therefore it skips an item and the code doesn't work as intended</p>
<pre><code>list1 = ["roll", "burger", "cheese", "ketchup", "mustard"]
list2 = []
list3 = []

for i in list1:
    print(i)
#code to add ten numbers to list2
a = 0
while a &lt; 10:
 a = a + 1
 userdata = input("Enter a whole number: ")
 usernum = int(userdata)
 list2.append(usernum)

list3[:0]=list2
print(list3)

for n in list2:
     if int(n) % 2 != 0:
         list2.remove(n)
print(list2)

for x in list3:
    if int(x) % 2 == 0:
        list3.remove(x)
print(list3)
</code></pre>
<p>How would I make this code remove even and odd using a for loop without skipping any numbers?</p>
</div>
<div class="post-text" itemprop="text">
<p>First, you shouldn't modify the list you are iterating over.</p>
<p>As for your problem of removing odd and even number from lists, there is a very simple way for this in Python: <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow">filter()</a></p>
<p>The filter generator combined with a simple lambda function will do the trick:</p>
<pre><code>list3 = filter(lambda x: x % 2, list3)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First of all, modifiying a list you are iterating over is an undefined behaviour and so a bad practice. 
For your problem I would suggest you to use <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow">filter</a>:</p>
<pre><code>even = filter(lambda x: x%2, list3)
odd = filter(lambda x: not x%2, list2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As an alternative to the list filtering, you can sort the values as the user inputs them. With a proper separation of concerns that could look like this:</p>
<pre><code>def get_numbers(num=10):
    for _ in xrange(10):
        yield int(input("Enter a whole number: "))

def populate_lists(size, evens, odds):
    for number in get_numbers(size):
        (odds if (size % 2) else evens).append(number)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Basically modifying your list while iterating is a bad practice. Since the list is being modifed while you are iterating over it. You can use list comprehension:</p>
<pre><code>list2 = [n for n in list2 if int(n) % 2 == 0]
print list2

list3 = [n for n in list3 if int(n) % 2 != 0]
print list3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can copy the list while iterating but do the removal on the actual list:</p>
<pre><code>list1 = ["roll", "burger", "cheese", "ketchup", "mustard"]
list2 = []
list3 = []

for i in list1:
    print(i)
#code to add ten numbers to list2
a = 0
while a &lt; 10:
 a = a + 1
 userdata = input("Enter a whole number: ")
 usernum = int(userdata)
 list2.append(usernum)

list3[:0]=list2
print(list3)

for n in list(list2):
     if int(n) % 2 != 0:
         list2.remove(n)
print(list2)

for x in list(list3):
    if int(x) % 2 == 0:
        list3.remove(x)
print(list3)
</code></pre>
</div>
<span class="comment-copy">Do you really want to make it in-place? How about a list comprehension instead?</span>
<span class="comment-copy">for example you can create a new list and push into it the desired values instead of remove them from the one that you are iterating</span>
<span class="comment-copy">Alternatively, you can append to the desired list already on the input phase.</span>
<span class="comment-copy">You can enclose your list in <code>list()</code> to make a copy when you iterate, but the removal will occur on the original list.</span>
<span class="comment-copy">Nice amount of rep you netted for the answerers, congrats!</span>
