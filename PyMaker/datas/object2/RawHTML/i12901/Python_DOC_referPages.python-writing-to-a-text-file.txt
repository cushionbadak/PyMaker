<div class="post-text" itemprop="text">
<p>I want my code to write certain errors to text file. It's copying files over, and I want to write the "un-copied" files to a text file for a record. I have my script appending an array with file paths every time it hits an error (like so):</p>
<pre><code>errors.append(srcfile)
</code></pre>
<p>After my loop, I have the following code, which I thought would write the paths to my text file:</p>
<pre><code>text_file = open("%s_copy_log.txt" % username, "a")
for line in errors:
    text_file.write(line)
text_file.close()
</code></pre>
<p>Am I missing something?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is an example of an <a href="https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">XY problem</a>: You want to do something, think of a solution, find a problem with that solution, and ask for help with that. I'm assuming that although you <strong>could</strong> do logging yourself (as you are trying), but using Python's built in logger will make more sense. They've already done most of what you need, all you need to do is import it, configure it, and use it.</p>
<pre><code>import logging
logging.basicConfig(filename='example.log',level=logging.DEBUG)
logging.debug('This message should go to the log file')
logging.info('So should this')
logging.warning('And this, too')
</code></pre>
<p>example.log:</p>
<pre><code>DEBUG:root:This message should go to the log file
INFO:root:So should this
WARNING:root:And this, too
</code></pre>
<p>This also supports things like command line logging level setting, and a bunch of other stuff.</p>
<p><a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">Docs</a> <a href="https://docs.python.org/3/howto/logging.html" rel="nofollow noreferrer">Tutorial</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Try changing <code>a</code> to <code>a+</code>, which tells python to create a file if it doesn't exist.</p>
<pre><code>text_file = open("%s_copy_log.txt" % username, "a+")
</code></pre>
<p>Further Reading on <a href="http://www.tutorialspoint.com/python/python_files_io.htm" rel="nofollow">Python File IO Types</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure what your application structure looks like, but if you have a number of users and want each username to have its own log (why?) when perhaps the best way would be something like:</p>
<pre><code>import logging

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
admin_handler = logging.FileHandler("app.log")
admin_handler.setLevel(logging.DEBUG)
logger.addHandler(admin_handler)
# this will write ALL events to one location
user_logger = logger.getChild("userlog")

def login(username, password):
    if verify(username, password):  # however you're doing this
        user_logger.addHandler(logging.FileHandler("%s.log" % username))
        user_logger.setLevel(logging.WARNING)  # or maybe logging.INFO?
        user_logger.info("%s logged in" % username)

        # authenticate the user as you currently do
    else:
        logger.warning("%s attempted login with bad password!" % username)

        # prompt the user as you currently do

def logout():
    user_logger.handlers = []  # remove previous user logger

    # de-authenticate as normal

def user_log_something(the_thing):
    if the_thing.is(something_critical):
        user_logger.critical(the_thing)
</code></pre>
</div>
<span class="comment-copy">you should use <code>logging</code> for things like this. Here's the <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">documentation</a> and here's a <a href="https://docs.python.org/3/howto/logging.html#logging-basic-tutorial" rel="nofollow noreferrer">brief tutorial</a></span>
<span class="comment-copy">What happens when you run that code? Does it run perfectly, exactly matching your expectations? If not, please describe what you expect it to do, and what it actually does.</span>
<span class="comment-copy">I tried implementing this code, but I got this error: "    logging.DEBUG("ERROR: File could not copy. %s" % srcfile) TypeError: 'int' object is not callable"</span>
<span class="comment-copy">@MasterModnar just tried that in a python console and it worked as expected. (<code>logging.basicConfig(filename="%s test" % 5, level=logging.DEBUG)</code> logs to '5 test')</span>
<span class="comment-copy">It turns out I was typing "logging.DEBUG" instead of "logging.debug". It works like a charm now. Also, I want to thank you for explaining logging to me in a simple way - everything else I've found has made it much more complicated than it has to be for my use.</span>
<span class="comment-copy">@MasterModnar lol - we all have those types of mistakes some time, very glad I could help!</span>
