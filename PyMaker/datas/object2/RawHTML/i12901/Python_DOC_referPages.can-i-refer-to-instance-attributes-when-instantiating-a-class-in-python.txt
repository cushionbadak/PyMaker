<div class="post-text" itemprop="text">
<p>I'm a new programmer, trying to make a simple multiplayer text adventure. I have a class called <code>Situation</code> that among other things has attributes for the player the situation is happening to (an object of a <code>Player</code> class, but for now let's pretend it's just a string representing the player's name) and the story of what's happening (a string).</p>
<p>When I write these situations, I want to be able to have the story text depend on the player, for example, I'm trying to do something like this:</p>
<pre><code>class Situation:
    def __init__(self, player, story):
        self.player = player
        self.story = story

my_story = Situation("Maggie", "once upon a time there was a kid named %s" % (my_story.player))
</code></pre>
<p>Trying that, I get an error message "local variable 'my_story' referenced before assignment" which makes sense. I tried self.player instead, but that also doesn't work.</p>
<p>Is there a way to make one instance attribute depend on another?</p>
</div>
<div class="post-text" itemprop="text">
<p>As Martijn said, you can't access attributes of the instance-to-be-created, because it doesn't exist yet.</p>
<p>However, the way to make an instance attribute depend on another instance attribute is to include logic which does just that - uses one instance attribute to compute another instance attribute.</p>
<p>In your case, instead of passing a story string, you can pass a format string which will turn <em>into</em> the story string using <a href="https://docs.python.org/3/library/functions.html#format" rel="nofollow"><code>str.format()</code></a>, to wit:</p>
<pre><code>class Situation:
    def __init__(self, player, story_fmt):
        self.player = player
        self.story = story_fmt.format(player=self.player)

situation = Situation("Maggie", "once upon a time there was a kid named {player}")
</code></pre>
<p>Now <code>situation.story</code> is:</p>
<pre><code>'once upon a time there was a kid named Maggie'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When Python evaluates the statement <code>my_story = Situation(...)</code>, it has to evaluate the arguments <em>first</em>, because otherwise there is nothing to pass to the <code>Situation()</code> class. <em>At this point there is no instance</em>, because the class hasn't been called yet. The assignment to <code>my_story</code> name only takes place once the instance is created, so you can't use that name either.</p>
<p>So no, you cannot refer to the instance yet, because it doesn't yet exist.</p>
<p>You can store the player in a separate variable first:</p>
<pre><code>player = 'Maggie'
my_story = Situation(player, "once upon a time there was a kid named %s" % (player,))
</code></pre>
<p>Alternatively, you can pass on responsibility of <em>filling</em> the template to the <code>__init__</code> method; you can just give it a string with a <code>%s</code> placeholder for example:</p>
<pre><code>class Situation:
    def __init__(self, player, story):
        self.player = player
        self.story = story % (self.player,)

my_story = Situation("Maggie", "once upon a time there was a kid named %s")
</code></pre>
<p>There are better ways of doing this, using <em>named</em> placeholders:</p>
<pre><code>class Situation:
    def __init__(self, player, story):
        self.player = player
        self.story = story % {'player': self.player}

my_story = Situation("Maggie", "once upon a time there was a kid named %(player)s")
</code></pre>
<p>I'd personally use the newer <a href="https://docs.python.org/2/library/stdtypes.html#str.format" rel="nofollow"><code>str.format()</code> method</a> here, because the format is clearer:</p>
<pre><code>class Situation:
    def __init__(self, player, story):
        self.player = player
        self.story = story.format(player=self.player)

my_story = Situation("Maggie", "once upon a time there was a kid named {player}")
</code></pre>
</div>
<span class="comment-copy">This doesn't make much sense, if you define things like this they can become recursive. Haskell could do something like this but it probably isn't what you want.</span>
<span class="comment-copy">For now str.format() will do the job for you, as Claudiu wrote. When this gets bigger you should look for a templating engine.</span>
