<div class="post-text" itemprop="text">
<p>I'm trying to create a sequence of lists with different variable names that correspond to different lines of a text file. My current code requires me to hard-code the number of lines in the file:</p>
<pre><code>with open('ProjectEuler11Data.txt') as numbers:
    data = numbers.readlines()
    for line in data:
        if line == 1:
            line1 = line.split()
        if line == 2:
            line2 = line.split()
        if line == 3:
            line3 = line.split()
        if line == 4:
            line4 = line.split()
</code></pre>
<p>In this case, I would have to continue up to 20, which isn't that bad, but I imagine that there's an easier way that I'm not aware of.
This is for a ProjectEuler problem, but there aren't any spoilers, and also I'm looking for advice on this specific task, rather than my strategy as a whole. Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>with open('ProjectEuler11Data.txt') as numbers:
    data = numbers.readlines()
lines = [line.split() for line in data]
</code></pre>
<p>I am not sure why you need different variable names for each line when you can have an array with all lines at the end.
You can now simply access the individual lines by line[0], line[1] and so on.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>globals()</code> or <code>locals()</code> to define <em>scope</em> pointers names. Also <code>enumerate()</code> builtin function allows you to iterate through both index and value of collection. Knowing this you can do something like:</p>
<pre><code>with open('ProjectEuler11Data.txt') as numbers:
    data = numbers.readlines()
    for i, line in enumerate(data):
        globals()['line%d' % i] = line.split()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why not use a dict and update the locals of the script?</p>
<pre><code>with open('ProjectEuler11Data.txt') as numbers:
    data = numbers.readlines()
    d = {}
    for i,line in enumerate(data):
        d["line"+str(i)] = line.split()
locals().update(d)
</code></pre>
<p>This way you will have <code>lineX</code> available within the scope of the script.
For explaining:
In python everything (almost) is an object, each object have a dict with the variables defining it, a class will have the <code>self</code> propertys in its dict, as well as functions for example. Even a module or script have its variables stored in a dictionary, you can access that dict by <code>globals()</code> for global variables that can be accesed by the outer scope or access by <code>locals()</code> for variables in the inner scope. As this are stored in a dictionary you can manage it just like it, calling any method available for any other dictionary object. So, for example:</p>
<pre><code>locals()["myVariable"] = 5
</code></pre>
<p>Is creating a variable <code>myVariable</code> wich stores a <code>5</code> in the scope of the module. </p>
</div>
<div class="post-text" itemprop="text">
<p>I assumed you want to read first 20 lines from the file-
Try, -It is just for 3 lines extend this for 20 lines</p>
<pre><code>f  = open(r"C:\New Text Document.txt",'rb')
lst =[]
for i in f.readlines()[0:2]:
    print i
    lst.append(i.split())

print lst
</code></pre>
<p>Output:</p>
<pre><code>[['1efu', 'ieo', 'ioew'], ['2ku', 'fa', 'foa']]
</code></pre>
<p>If you want just flattened list-</p>
<pre><code>lst.append(','.join(i.split()))
</code></pre>
<p>Output-</p>
<pre><code>['1efu,ieo,ioew', '2ku,fa,foa']
</code></pre>
<hr/>
<p>EDIT-
To refenence lines into the content use <code>Dictionary</code>.</p>
<pre><code>f  = open(r"C:\New Text Document.txt",'rb')
dic = {}

count = 1
for i in f.readlines()[0:2]:
    print i
    global count
    dic.update({'line%s'%count:i.split()})
    count+=1
print dic
</code></pre>
<p>Output-</p>
<pre><code>{'line2': ['2ku', 'fa', 'foa'], 'line1': ['1efu', 'ieo', 'ioew']}
</code></pre>
</div>
<span class="comment-copy"><code>if line == &lt;=20</code>  ??</span>
<span class="comment-copy">I don't understand... maybe my code is completely incorrect, but basically what I'm trying to do is create 20 different lists split by space that I can reference. Each line should have a new list with a variable name of line(line number) with its contents consisting of that line, split by spaces.</span>
<span class="comment-copy">you can check out this question - <a href="http://stackoverflow.com/questions/5036700/how-can-you-dynamically-create-variables-in-python-via-a-while-loop" title="how can you dynamically create variables in python via a while loop">stackoverflow.com/questions/5036700/â€¦</a></span>
<span class="comment-copy">This seems like pretty much what I was trying to do, but how do I access the individual numbers in the lines? Like if I were trying to access the fifth number in line[6]. Also, I thought Python didn't have arrays? What kind of structure is lines in that example?</span>
<span class="comment-copy">Sure Python has arrays. You get the individual entries in a line by e.g. line[2][1], which would be entry number 1 in line number 2 (zero-based, so second entry in third line actually...)</span>
<span class="comment-copy">@KyleWescott They are called lists Ref <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">docs</a></span>
<span class="comment-copy">Yes, you're right - I should've mentioned that :)</span>
<span class="comment-copy">Can you explain what you mean by update the locals? Sorry, I'm pretty new to Python and I've never used dict before. So if I used dict instead, would the values be split? Right now I have a 20 by 20 grid of numbers I need to categorize.</span>
<span class="comment-copy">@KyleWescott, updated my answer with a brief explanation and a simple example, also added the split line, and fixed the locals call</span>
<span class="comment-copy">How do I reference individual object in the list within a list? (I think that's what your solution is saying)</span>
