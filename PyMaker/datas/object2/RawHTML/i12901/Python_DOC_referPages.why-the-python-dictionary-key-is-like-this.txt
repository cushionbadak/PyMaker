<div class="post-text" itemprop="text">
<p>I have a dictionary:</p>
<pre><code>dict_a = dict(zip(('a','b','c','d','e'),(1,2,3,4,5)))
</code></pre>
<p>The output is:</p>
<pre><code>dict_a = {'a': 1, 'c': 3, 'b': 2, 'e': 5, 'd': 4}
</code></pre>
<p>I want to know why it is not: </p>
<pre><code>dict_a = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}
</code></pre>
<p>I do know dict_a is a <strong>not</strong> sorted object, but still want to know why the key order is a, c, b, e, d, not in the other orders.</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Dictionaries are not just sorted, they are unordered. Dictionaries are, in the deeper level, keys pointing to memory addresses.</p>
<p>Let's tackle this another way. In traditional languages you have arrays. Internally, arrays are contiguous memory, i.e. <code>x[0]</code> and <code>x[1]</code> are next to eachother in memory. Dictionaries meanwhile are loose collections of pointers. <code>y[a]</code> and <code>y[b]</code> have no physical relationship they have no order.</p>
</div>
<div class="post-text" itemprop="text">
<p>See longer discussions earlier:</p>
<p><a href="https://stackoverflow.com/questions/526125/why-is-python-ordering-my-dictionary-like-so">Why is python ordering my dictionary like so?</a></p>
<p><a href="https://stackoverflow.com/questions/15479928/why-is-the-order-in-python-dictionaries-and-sets-arbitrary">Why is the order in dictionaries and sets arbitrary?</a></p>
<p>(And this should rather have been a comment, but I don't have the reputation to write one...)</p>
</div>
<div class="post-text" itemprop="text">
<p>As you said, dictionaries are not ordered objects. So no matter what order you add items to it they will be jumbled up. Dictionary do not support indexing, so therefore it has no reason to be in the correct order. I guess it saves memory not having to know what position the items are supposed to be.</p>
<p>In a way you can say they have indexing using keys to obtain the associated value and not position as in lists. You can only have a distinct key point to a value as you can only have 1 value at position 0 in a list.</p>
<p>More info at <a href="https://docs.python.org/2/tutorial/datastructures.html#dictionaries" rel="nofollow">Python documentation</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Because the regular dictionay does not contains insertion order process. It use arbitrary order. So if you want to use a dictionary as ordered you should use <a href="https://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="nofollow">OrderedDict</a>, and it contains insertion order process. But you need to consider your sutition when you use ordered dictionary, because it slower then regular dictionary when you insert item and update it.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to maintain the order of the items in your dictionary, you can use an <code>OrderedDict</code>:</p>
<pre><code>from collections import OrderedDict
dict_a = ()
dict_a['a'] = 1
dict_a['b'] = 2
dict_a['c'] = 3
dict_a['d'] = 4
dict_a['e'] = 5
</code></pre>
<p>Then the order of the dictionary will be maintained:</p>
<pre><code>dict_a = OrderedDict([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So, first I thought it was zip that was causing it. However it is not zip since when I enter </p>
<pre><code>&gt;&gt;zip(('a','b','c','d','e'),(1,2,3,4,5)
</code></pre>
<p>The output is from left to right</p>
<pre><code>[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]
</code></pre>
<p>So I considered maybe it has to do with memory storage between our systems (I'm using windows10). I checked with the same input and got the same output</p>
<pre><code>&gt;&gt;dict_a = dict(zip(('a','b','c','d','e'),(1,2,3,4,5)))

{'a': 1, 'c': 3, 'b': 2, 'e': 5, 'd': 4}
</code></pre>
<p>Now, I checked the documentation at <a href="https://docs.python.org/3/library/stdtypes.html#dict" rel="nofollow">python built-in types</a>. Their code is more what you'd expect where </p>
<pre><code>&gt;&gt;c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))
</code></pre>
<p>has the output from right to left, (which I'm guessing after zipping the two lists the dictionary adds from popping values and using the update function).</p>
<pre><code>&gt;&gt;{'three': 3, 'two': 2, 'one': 1}
</code></pre>
<p>No matter how you put in the different dictionaries it still has the same output (dictionaries like sets as OP states order does not matter).</p>
<pre><code>&gt;&gt;d = dict([('two', 2), ('one', 1), ('three', 3)])
{'three': 3, 'two': 2, 'one': 1}
</code></pre>
<p>The python manual states for built in types </p>
<blockquote>
<p>If keyword arguments are given, the keyword arguments and their values are added to the dictionary created from the positional argument</p>
</blockquote>
<p>Given that the key arugments don't change even with or without changing zip I tried one last thing. I decided to switch the keys and items </p>
<pre><code>&gt;&gt;d = dict([(1,'a'), (2,'b'),(3,'c'),(4,'d'),(5,'e')])
</code></pre>
<p>Which outputted what we expected</p>
<pre><code>{1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e'}
</code></pre>
<p>Ordered by numbers. My only explanation is that during the actual compiling the letters 'a','b','c','d','e' are being stored as another form (e.g. hexadecimal not ascii) which would change the order of a,b,c,d,e in the list that is used for keys in the dictionary.</p>
</div>
<span class="comment-copy">it has to do with how the keys are hashed and how they are retrieved, you'd have to look into python source code to find any more of an explanation.</span>
<span class="comment-copy">This is going to be implementation dependent, and you haven't told us what version of Python you're using. CPython? Pypy? Jython?</span>
<span class="comment-copy">@jme I am using python2.7</span>
<span class="comment-copy">Look <a href="http://stackoverflow.com/questions/327311/how-are-pythons-built-in-dictionaries-implemented">here</a> if you're interested in the nitty-gritty details of how <code>dict</code> is implemented. But the reason you see things in this order is likely due to the fact that <code>hash('a') &lt; hash('c') &lt; hash('b') &lt; hash('e') ...</code>, for whatever reason. If you're interested in the technicalities, feel free to dive in. But as a user of the language, the order of the dict keys is simply an implementation detail that you should never, ever rely on.</span>
<span class="comment-copy">"Dictionaries, by their very definition, can never be ordered" Tell that to an <code>OrderedDict</code> ;). I'm assuming you meant something like "Python dictionaries, by definition, have arbitrary order". But there's nothing about hash tables which means that they cannot (or do not) have an order.</span>
<span class="comment-copy">@jme Well... yes technically, but a traditional, i.e. progenitor dictionary, is unorderable. I'll revise though.</span>
<span class="comment-copy">'not just <i>un</i>sorted'?</span>
<span class="comment-copy">@kwinkunks well fundamentally sorting a dictionary requires auxiliary structure, I removed the statement however to avoid confusion.</span>
<span class="comment-copy">So why it has to be a, c, b, e, d. I got such sequence everytime.</span>
<span class="comment-copy">Thx. I know how to add order to it. The question is: why this dict has to be  a, c, b, e, d</span>
<span class="comment-copy">I think it's somewhat random how the ordering works, in the way that Python implements the <code>dict</code> as a hash table.  Creating the <code>dict</code> in the same way a second time, or on a different computer, might return a different order than a, c, b, e, d.</span>
<span class="comment-copy">In fact, on my computer, I get  <code>{'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}</code></span>
<span class="comment-copy">what computer and os did you use? :)</span>
<span class="comment-copy">Mac OS X Mavericks on a MacBook Air, running Python 2.7.10 from Macports</span>
