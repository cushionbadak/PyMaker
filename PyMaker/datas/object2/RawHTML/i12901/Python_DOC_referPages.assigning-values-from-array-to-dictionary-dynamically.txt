<div class="post-text" itemprop="text">
<p>I have a problem. It looks quite simple but I'm stuck at it.</p>
<p>I have two vars; One is an array that looks like this:</p>
<pre><code>array = [["a@a.com", 1000], ["b@b.com", 2000], ["c@c.com", 3000]]
</code></pre>
<p>The other is a dictionary that looks like this:</p>
<pre><code>dictionary = {"email": None, "actions": None}
</code></pre>
<p>Now I'm trying to dynamically assign values from array to dictionary and wrap it in array.</p>
<p>My code looks like:</p>
<pre><code>result = {"email": None, "actions": None}
new_log = []
for values in sql_result:
    for position in result:
        for index in range(0, len(result)):
            result[position] = str(values[index])

        new_log.append(result)
</code></pre>
<p>But it does not work correctly as I planned, I'm getting weird results.  </p>
<p>When printed new_log looks like:</p>
<pre><code>print(str(position) + " : " + str(result[position]))
</code></pre>
<p>Looks like:</p>
<pre><code>actions : a@a.com
actions : 1000
email : a@a.com
email : 1000
actions : b@b.com
actions : 2000
email : b@b.com
email : 2000
actions : c@c.com
actions : 3000
email : c@c.com
email : 3000
</code></pre>
<p>Print new_log:</p>
<pre><code> [{'actions': '3000', 'email': '3000'}, {'actions': '3000', 'email': '3000'}, {'actions': '3000', 'email': '3000'}, {'actions': '3000', 'email': '3000'}, {'actions': '3000', 'email': '3000'}, {'actions': '3000', 'email': '3000'}]
</code></pre>
<p>My goal is for it to look like this:</p>
<pre><code>[{'email': 'a@a.com', 'actions': '1000'}, {'email': 'b@b.com', 'actions': '2000'}, {'email': 'c@c.com', 'actions': '3000'}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd do something like this</p>
<pre><code>{k:str(v) for k,v in array}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can simply store the keys in a tuple, like this</p>
<pre><code>&gt;&gt;&gt; keys = ('email', 'actions')
</code></pre>
<p>then <a href="https://docs.python.org/3/library/functions.html#func-zip" rel="nofollow"><code>zip</code></a> this with the elements of the list, and pass it to <a href="https://docs.python.org/3/library/functions.html#func-dict" rel="nofollow"><code>dict</code></a> function, like this</p>
<pre><code>&gt;&gt;&gt; [dict(zip(keys, item)) for item in array]
[{'actions': 1000, 'email': 'a@a.com'},
 {'actions': 2000, 'email': 'b@b.com'},
 {'actions': 3000, 'email': 'c@c.com'}]
</code></pre>
<hr/>
<p>Here, the <code>zip</code> function will combine the corresponding elements from <code>keys</code> and <code>item</code> and produce a new tuple. For example,</p>
<pre><code>&gt;&gt;&gt; list(zip(keys, array[0]))
[('email', 'a@a.com'), ('actions', 1000)]
</code></pre>
<p>we use <code>list</code> function to create a list because <code>zip</code> just returns an iterator. Now, we pass this iterator which returns tuples to <code>dict</code> function, which produces the dictionary.</p>
<pre><code>&gt;&gt;&gt; dict(zip(keys, array[0]))
{'actions': 1000, 'email': 'a@a.com'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What about this? </p>
<pre><code>&gt;&gt;&gt; [{"email": i, "actions": str(j)} for i, j in array]
[{'email': 'a@a.com', 'actions': '1000'}, {'email': 'b@b.com', 'actions': '2000'}, {'email': 'c@c.com', 'actions': '3000'}]
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First of all result is not required at all - you can just create dictionaries on the fly. Second I think you have the append in the wrong place, you're doing it after the two for loops which are identical to each other. What's the difference between:</p>
<pre><code>for position in result:
</code></pre>
<p>and:</p>
<pre><code>for index in range(0, len(result))
</code></pre>
<p>Well one gives you the item and the other gives you the index of it, but if you use the index to look up the item subsequently than it's basically the same thing. You normally don't use for index in range unless you need to know the index for some reason. If you're using that index just to look up the item, you're doing it wrong.</p>
<p>So in the end the two loops together give you this kind of pattern:</p>
<pre><code>// for position in result (1st iteration)
// for index in range (2 iterations)
actions : a@a.com
actions : 1000
// for position in result (2nd iteration)
// for index in range (2 iterations)
email : a@a.com
email : 1000
</code></pre>
<p>To cut to the chase, as others seem to have pointed out already, this could all be a <em>lot</em> simpler - as simple as:</p>
<pre><code>new_log = [{'email': item[0], 'actions': item[1]} for item in sql_result]  
</code></pre>
</div>
<span class="comment-copy"><code>[{'email': i[0], 'actions': i[1]} for i in array]</code>...!?</span>
<span class="comment-copy">Oh, why didn't I think about this :P. By the way, the keys are already there(I mean <code>dictionary.keys()</code>...or maybe <code>result.keys()</code>?).</span>
<span class="comment-copy">@KevinGuan You mean, <code>keys = result.keys()</code>?</span>
<span class="comment-copy">Yep, OP created a dict and use these keys already.</span>
<span class="comment-copy">@KevinGuan Yup, that also will work :-) But the dictionary is just a template here, only the key matters in it. That's why I extracted them and put them in a tuple.</span>
<span class="comment-copy">Ah...yeah, that dict is useless now :P</span>
