<div class="post-text" itemprop="text">
<p>I need to write data to a textfile as a table. Sort of like a database. The header has Drivers, Cars, Teams, Grids, Fastest Lap, Race Time and Points. When I try to write the data that goes under it the don't line up. As some drivers names are longer than others. </p>
<p>It looks a bit like this: </p>
<pre><code>|     Driver      |
|Sebastian William|
|Tom Hamilton  | 
</code></pre>
<p>Only 2 of the names actually align with the header. I am only trying to solve the issue with Drivers for now once I figure that out I should be able to gets all the other headers lined up. </p>
<p>Using a for loop through the array of dictionaries I set x to equal the len of the drivers name and 22 is the length of the longest name(18) plus a few spaces. </p>
<pre><code>TextFile.write((items['Driver']+'\t|').expandtabs(22-x))
</code></pre>
<p>Any way of making them line up?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="http://docs.python.org/3/library/string.html#formatstrings" rel="nofollow">format string syntax</a>:</p>
<pre><code>&gt;&gt;&gt; "|{:22}|".format("Niki Lauda")
'|Niki Lauda            |'
</code></pre>
<p>You can also change the alignment:</p>
<pre><code>&gt;&gt;&gt; "|{:&gt;22}|".format("Niki Lauda")
'|            Niki Lauda|'
&gt;&gt;&gt; "|{:^22}|".format("Niki Lauda")
'|      Niki Lauda      |'
</code></pre>
<p>and if you want more flexibility with your column size, you can parametrize that as well:</p>
<pre><code>&gt;&gt;&gt; "|{:^{}}|".format("Niki Lauda", 24)
'|       Niki Lauda       |'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>On top of the answer provided by Tim, you could opt to use <a href="https://pypi.python.org/pypi/tabulate" rel="nofollow">Tabulate</a> which is very easy to use and customise. </p>
<pre><code>table = [["spam",42],["eggs",451],["bacon",0]]
headers = ["item", "qty"]
print tabulate(table, headers, tablefmt="grid")

+--------+-------+
| item   |   qty |
+========+=======+
| spam   |    42 |
+--------+-------+
| eggs   |   451 |
+--------+-------+
| bacon  |     0 |
+--------+-------+
</code></pre>
<p>This provides support for multiple different database styles too. I prefer this to simply using format because it allows me to completely change the output style by configuring the <code>tablefmt</code> argument.</p>
</div>
<span class="comment-copy">Useful reference with examples: <a href="https://pyformat.info/" rel="nofollow noreferrer">pyformat.info</a></span>
<span class="comment-copy">I didn't know you could nest fields. It could get confusing with longer format strings. I think I would use field names in that case.</span>
<span class="comment-copy">Field nesting is mentioned at the end of <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow noreferrer">the Format String Syntax documentation</a> and at the end of <a href="https://docs.python.org/3/library/string.html#format-examples" rel="nofollow noreferrer">the examples</a>.</span>
