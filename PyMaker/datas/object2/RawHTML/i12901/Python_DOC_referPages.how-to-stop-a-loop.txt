<div class="post-text" itemprop="text">
<pre><code>def sum_div(x, y):
    for k in range(x,y+1):
        for z in range(x,y+1):
            sx = 0
            sy = 0
            for i in range(1, k+1):
                if k % i == 0:
                    sx += i
            for j in range(1, z+1):
                if z % j == 0:
                    sy += j
            if sx == sy and k!= z:
                 print "(", k ,",", z, ")"

x = input("Dati x : ")
y = input("Dati y : ")
sum_div(x, y)
</code></pre>
<p>How do I stop the looping if the value of <code>z == y</code>?</p>
<p>The loops print a pair of numbers in a range from <code>x</code> to <code>y</code>, but when it hit the <code>y</code> value the loop prints a reverse pair of numbers that I don't need it to.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you're think you are asking for is the <a href="https://docs.python.org/3.2/reference/simple_stmts.html#grammar-token-break_stmt" rel="nofollow"><code>break</code></a> command, but what you're actually looking for is removal of duplication.</p>
<p>Your program lacks some clarity. For instance:</p>
<pre><code>for i in range(1, k+1): 
    if k % i == 0:  
        sx += i
for j in range(1, z+1):
    if z % j == 0:
        sy += j
</code></pre>
<p>These two things are doing essentially the same thing, which can be written more cleanly with a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a> (in the REPL):</p>
<pre><code>&gt;&gt;&gt; def get_divisors(r: int) -&gt; list:
...     return [i if r % i == 0 else 0 for i in range(1, r+1)]
... 
... 
&gt;&gt;&gt; get_divisors(4)
&gt;&gt;&gt; [1, 2, 0, 4]

&gt;&gt;&gt; sum(get_divisors(4))
&gt;&gt;&gt; 7
</code></pre>
<p>Your line:</p>
<pre><code>while y:
</code></pre>
<p>... will infinitely loop if you find a match. You should just remove it. <code>while y</code> means "while y is true", and any value there will evaluate as true.</p>
<p>This reduces your program to the following:</p>
<pre><code>def get_divisors(r: int) -&gt; list:
    return [i if r % i == 0 else 0 for i in range(1, r+1)]

def sum_div(x, y):
    for k in range(x,y+1): 
        sum_of_x_divisors = sum(get_divisors(k))  # Note this is moved here to avoid repeating work.
        for z in range(x,y+1):
            sum_of_y_divisors = sum(get_divisors(z))
            if sum_of_x_divisors == sum_of_y_divisors and k!= z:
                print("({},{})".format(k, z))
</code></pre>
<p>Testing this in the REPL it seems correct based on the logic of the code:</p>
<pre><code>&gt;&gt;&gt; sum_div(9,15)
(14,15)
(15,14)
&gt;&gt;&gt; sum_div(21, 35)
(21,31)
(31,21)
(33,35)
(35,33)
</code></pre>
<p>But it's possible that for <code>sum_div(9,15)</code> you want only one of <code>(14,15)</code> and <code>(15,14)</code>. However, this has nothing to do with breaking your loop, but the fact that what you're attempting to do has two valid values when <code>k</code> and <code>z</code> don't equal each other. This is demonstrated by the second test case, where <code>(33,35)</code> is a repeated value, but if you broke the for loop on <code>(21,31)</code> you would not get that second set of values.</p>
<p>One way we can account for this is by reordering when work is done:</p>
<pre><code>def sum_div(x, y):
    result_set = set()  # Sets cannot have duplicate values
    for k in range(x,y+1): 
        sum_of_x_divisors = sum(get_divisors(k))
        for z in range(x,y+1):
            sum_of_y_divisors = sum(get_divisors(z))
            if sum_of_x_divisors == sum_of_y_divisors and k!= z:
                result_set.add(tuple(sorted((k,z))))  # compile the result set by sorting it and casting to a tuple, so duplicates are implicitly removed.
    for k, z in result_set:  # Print result set after it's been compiled
        print("({},{})".format(k, z))
</code></pre>
<p>And we see a correct result:</p>
<pre><code>&gt;&gt;&gt; sum_div(9,15)
(14,15)
&gt;&gt;&gt; sum_div(21,35)
(21,31)
(33,35)
</code></pre>
<p>Or, the test case you provided in comments. Note the lack of duplicates:</p>
<pre><code>&gt;&gt;&gt; sum_div(10,25)
(16,25)
(14,15)
(15,23)
(10,17)
(14,23)
</code></pre>
<p>Some takeaways:</p>
<ul>
<li>Break out functions that are doing the same thing so you can reason more easily about it.</li>
<li>Name your variables in a human-readable format so that we, the readers of your code (which includes you) understands what is going on.</li>
<li>Don't use loops unless you're actually looping over something. <code>for</code>, <code>while</code>, etc. only need to be used if you're planning on going over a list of things.</li>
<li>When asking questions, be sure to always include test input, expected output and what you're actually getting back.</li>
<li>The current best-practice for <code>print</code>ing strings is to use the <a href="https://docs.python.org/3.1/library/string.html#formatstrings" rel="nofollow"><code>.format()</code> function</a>, to make it really clear what you're printing.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>The <code>break</code> command will break out of the loop. So a line like this:</p>
<pre><code>if (z == y):
    break
</code></pre>
<p>should do what you want.</p>
</div>
<span class="comment-copy">Why does your for loop range specifically include y, and what do you expect <code>while y</code> to do?</span>
<span class="comment-copy"><code>if z == y: break</code>?</span>
<span class="comment-copy">Whereabouts and in which loop do you want to break?</span>
<span class="comment-copy">Perhaps it might be easier to explain what you are trying to do with the function as a whole. To me this seems like an  <a href="http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">xy problem</a> and there might be a better way to solve it.</span>
<span class="comment-copy">The code is working well, the only problem is when i'm printing the results ( 10 , 17 ) ( 14 , 15 ) ( 14 , 23 ) ( 15 , 14 ) ( 15 , 23 ) ( 16 , 25 ) I need to stop here, because this is going on reverse ( 17 , 10 ) ( 23 , 14 ) ( 23 , 15 ) ( 25 , 16 )</span>
<span class="comment-copy">Thank's for answer but the thing is that I don't need the reverse one (14,15) (15,14) I got the same output, what I need is to stop looping when it comes to print the reverse one's ...</span>
<span class="comment-copy">See my update. You do <i>not</i> need to stop looping, you need to somehow ignore that value: <code>sum_div(21,35)</code> will stop looping <i>too soon</i> if you simply break... unless you just are trying to find one solution. This is <i>why</i> you need to provide input values and expected outputs: the question you're asking above is not the solution you're actually looking for.</span>
<span class="comment-copy">@FrederickCastello Updated my answer again to account for your issue, which is really one of accumulation, not loop breaking.</span>
<span class="comment-copy">Here is my output all that is after (16, 25) is useless, why I can't stop there ? <code>Dati x : 10 Dati y : 25 ( 10 , 17 ) ( 14 , 15 ) ( 15 , 14 ) ( 16 , 25 ) ( 17 , 10 ) ( 23 , 14 ) ( 25 , 16 )</code>.</span>
<span class="comment-copy">Note the sequence <code>( 14 , 15 ) ( 15 , 14 ) ( 16 , 25 )</code>. If you stop after this last element, the previous two elements are <i>still</i> repeats. You're not looking to stop the loop, you're looking to prevent duplicates. Also note that <code>( 23, 14 )</code> comes <i>after</i> <code>( 16 , 25 )</code>, so breaking your loop before then means you miss out on that valid result. I encourage you to refresh and look at how I account for this in my solution, @FrederickCastello</span>
<span class="comment-copy">Nope I tried and this doesn't working ...</span>
<span class="comment-copy">It will depend where you put it, as it will only break out of the inner-most loop.</span>
<span class="comment-copy">The only place where loop brake can be is before print "(", k ,",", z, ")"</span>
