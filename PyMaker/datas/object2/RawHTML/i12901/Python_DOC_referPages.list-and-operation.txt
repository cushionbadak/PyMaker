<div class="post-text" itemprop="text">
<p>I'm using the <code>list</code> object by declaring</p>
<pre><code>data = []
</code></pre>
<p>in my code, and without initializing it, I wrote</p>
<pre><code>data += data2
</code></pre>
<p>Where <code>data2</code> is another <code>list</code> that contains lots of numbers.</p>
<p>An error happened at this line:</p>
<pre><code>local variable 'data' referenced before assignment
</code></pre>
<p>How do I fix this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You may want to try using <code>data.extend (data2)</code> instead of using the operator.</p>
<p>See this question for an extended discussion about adding two lists together: <a href="https://stackoverflow.com/questions/8177079/python-take-the-content-of-a-list-and-append-it-to-another-list">Python: take the content of a list and append it to another list</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Getting 'referenced before assignment' after you initializing data can't happen if you are in the same scope.</p>
<p>The possibility is that you are creating a function (creating a new scope) so when you say <code>data+=data2</code> it means</p>
<pre><code>data = data + data2 # so what is data in the right hand side?
</code></pre>
<p>So if you want to refer the global variable use already available (global) data you have to explicitly say <code>global data</code> or pass that as a parameter to the funciton.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have to initialize your array first. Here is a working example of how to fix this problem. </p>
<pre><code>data = [0]
data2 = [1,2,3,4,5]
print data
data += data2
print data
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you use <code>data += data2</code> in function you need <code>global data</code></p>
<pre><code>data = []
data2 = [1,2,3,4]

def add():
    globla data

    data += data2

add()
print data
</code></pre>
<p>or send <code>data</code> as argument</p>
<pre><code>data = []
data2 = [1,2,3,4]

def add(some_data):
    some_data += data2

add(data)
print data
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is covered in the docs here</p>
<p><a href="https://docs.python.org/3/reference/datamodel.html#object.__iadd__" rel="nofollow">https://docs.python.org/3/reference/datamodel.html#object.<strong>iadd</strong></a></p>
<blockquote>
<p>For instance, if <code>x</code> is an instance of a class with an <code>__iadd__()</code>
  method, <code>x += y</code> is equivalent to <code>x = x.__iadd__(y)</code> .</p>
</blockquote>
<p>So you see <code>data</code> is being rebound (to itself in this case), but it still counts as an assignment.</p>
<p>Since <code>data += data2</code> appears inside a function scope where <code>data</code> has not been declared to be <code>global</code>, a local variable called <code>data</code> is assumed.</p>
<pre><code>def foo():
    data.extend(data2)           # ok -- global data variable here

def bar():
    data = data.__iadd__(data2)  # not ok -- local data variable here

def baz():
    data += data2                # not ok -- equivalent to bar()
</code></pre>
</div>
<span class="comment-copy">is there a way to declare data to be NULL like C/C++?</span>
<span class="comment-copy">show more code. it seems you use ` data += data2` in function but you forgot to use <code>global data</code></span>
<span class="comment-copy">Thanks, extend() works perfectly!</span>
<span class="comment-copy">this answer doesn't address the question.  it makes no sense that using <code>extend</code> instead of <code>+=</code> would prevent the error.  @CHEN has left out important information about where these lines of code have been placed in his script or module.</span>
<span class="comment-copy">@dbliss It seems the asker disagrees ;)</span>
<span class="comment-copy">@dbliss I did misread the question though, however I left the answer because I thought it might point to a more flexible way to merge lists.</span>
<span class="comment-copy">what's "more flexible" about <code>extend</code>?  all it does is add overhead.  i'd be interested to know of any case where using <code>extend</code> makes more sense than using <code>+=</code>.</span>
<span class="comment-copy">I accurately did create a new function! So that's where goes wrong. Thanks a lot!</span>
<span class="comment-copy">you can use <code>data = []</code> in place of  <code>data=[0]</code> and still works</span>
