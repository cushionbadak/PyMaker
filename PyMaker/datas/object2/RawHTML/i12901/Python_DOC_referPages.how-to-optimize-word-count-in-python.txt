<div class="post-text" itemprop="text">
<p>I am given n words <strong>(1≤n≤10^5)</strong>. Some words may repeat. For each word, I have to output its number of occurences. But the output order should correspond with the order of the first appearance of the word.</p>
<p>I have a working program of the problem, but for large inputs I am getting timeout. Here is my solution for the problem:</p>
<pre><code>n=int(input())
l=[]
ll=[]

for x in range(n):
    l.append(raw_input())
    if l[x] not in ll:
        ll.append(l[x])

result = [ l.count(ll[x]) for x in range(len(ll)) ]

for x in range(len(result)):
    print result[x],
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use an ordered counter by subclassing <code>OrderedDict</code> and <code>Counter</code>:</p>
<pre><code>from collections import Counter, OrderedDict

class OrderedCounter(Counter, OrderedDict):
    pass

counts = OrderedCounter(['b', 'c', 'b', 'b', 'a', 'c'])
for k, c in counts.items():
    print(k, c)
</code></pre>
<p>Which prints:</p>
<pre><code>b 3
c 2
a 1
</code></pre>
<p>See the <a href="https://docs.python.org/2/library/collections.html#ordereddict-examples-and-recipes">documentation</a> for the <code>collections</code> module for a more complete recipe which includes a <code>__repr__</code> for <code>OrderedCounter</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The easiest way to count items in python is to use a <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow">Counter</a> from the <a href="https://docs.python.org/2/library/collections.html" rel="nofollow">collections</a> module.</p>
<p>Assuming you have a list of items in the order that you expect, passing it to a <code>Counter</code> should suffice:</p>
<pre><code>c = collections.Counter(['foo', 'bar', 'bar'])
print(c['bar'])  # Will print 2
</code></pre>
<p>If <code>words</code> is the list of words you retrieved from the user, you can iterate over it to print the values:</p>
<pre><code>seen = set()
for elem in words:
    if elem not in seen:
        print(counter[elem])
        seen.add(elem)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow"><code>collections.OrderedDict</code></a>. It can handle this for you, and it removes the linear membership test expense using a <code>list</code> is imposing:</p>
<pre><code>import collections

n = int(input())
l = []
ll = collections.OrderedDict()

for x in range(n):
    v = raw_input()
    l.append(v)
    ll[v] = None  # If v already in OrderedDict, does nothing, otherwise, appends

ll = list(ll)  # Can convert back to list when you're done if you like
</code></pre>
<p>If you need the count, you can make a custom class based on OrderedDict that both handles counts and remains ordered.</p>
<pre><code>class OrderedCounter(collections.OrderedDict):
    def __missing__(self, key):
        return 0
</code></pre>
<p>Then change <code>ll</code> to an <code>OrderedCounter</code>, and <code>ll[v] = None</code> to <code>ll[v] += 1</code>. At the end, <code>ll</code> will have the ordered words with their counts; <code>l</code> isn't even needed:</p>
<pre><code>for word, count in ll.items():
    print(word, count)
</code></pre>
<p>The final code would simplify to just (omitting imports and class definition):</p>
<pre><code>n = int(input())
word_counts = OrderedCounter()

for x in range(n):
    word_counts[raw_input()] += 1

for cnt in word_counts.values():
    print cnt,
</code></pre>
<p>Much simpler, right?</p>
</div>
<span class="comment-copy">I would have suggested it, but I never remember the proper inheritance order to get the desired behavior, so using <code>__missing__</code> (which adds almost no complexity) worked equally well.</span>
<span class="comment-copy">I love the conciseness, but this won't work with Python 2 (which seems like the one OP is using)</span>
<span class="comment-copy">@RicardoCárdenes It works fine in Python 2 -- the only difference is that <code>print(k, c)</code> prints a tuple (and counts.items() returns a list).</span>
<span class="comment-copy">Sorry, tried to import <code>Counter</code> from Python 2.6. It is defined in 3.3+ (and 2.7), so you're right (bloody old Centos...)</span>
<span class="comment-copy">Thank you, it worked, I did not yet try other answers but I think theirs are also workable</span>
