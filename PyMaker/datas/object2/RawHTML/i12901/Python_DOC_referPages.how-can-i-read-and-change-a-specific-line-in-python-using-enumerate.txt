<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/4719438/editing-specific-line-in-text-file-in-python">Editing specific line in text file in python</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<p>I can go in to the file and read the line using <code>enumerate</code> but I can't figure out how to change the line. </p>
<p>The <code>fileinput</code> method overwrites the file and the append method in <code>open()</code> will only append to the end of the file. </p>
<p>I want to append and overwrite to only a certain line in the file while keeping the rest of the file intact.</p>
<pre><code>with open('test2.py', 'r+') as f:
    for i, line in enumerate(f):
        if i == 4:
            if line != '2':
                line = '2'
                f.write(line)
            print line
</code></pre>
<p>I don't get any errors in the code above it just prints <code>'2'</code> in the terminal but it doesn't change the line of text in <code>test2.py</code> to <code>'2'</code>.</p>
<p>test2.py will be</p>
<pre><code>#
#
#
'''
4
'''
#
</code></pre>
<p>I need to change 4 to 2</p>
</div>
<div class="post-text" itemprop="text">
<p>The "line = '2'" only means to change the variable in memory to '2'. The file content remains untouched. Then, you write the '2' to test2.py. It just appends '2' to test2.py.</p>
<p>I thought it would throw an error when writing to a file opened with "r+", but it didn't. It just appended.</p>
<p>Possible solution (though not so efficient):</p>
<pre><code>lines = []
with open('test2.py', 'r+') as f:
   for i, line in enumerate(f):
      if i == 4:
         if line != '2':
            line = '2'
      lines.append(line)

with open('test2.py', 'w') as f:
   for line in lines:
      f.write(line)
</code></pre>
<p>Before:</p>
<pre><code>12312312
123123123


1231231231
</code></pre>
<p>After:</p>
<pre><code>12312312
123123123


2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>The fileinput method overwrites the file </p>
</blockquote>
<p>Therefore:</p>
<p>1) For lines you don't want changed, write the original line.<br/>
2) For lines you want changed, write something else.</p>
<pre><code>import fileinput as fi

with fi.input(
        files = 'data.txt', 
        inplace = True,
        backup = '.bak') as f:

    for line in f:
        if fi.lineno() == 4:
            print('hello')
        else:
            print(line, end='')
</code></pre>
<hr/>
<pre><code>~/python_programs$ cat data.txt
line 1
line 2
line 3
line 4
line 5
line 6
~/python_programs$ p34 1.py
~/python_programs$ cat data.txt
line 1
line 2
line 3
hello
line 5
line 6
</code></pre>
<p>Or maybe you want to do this:</p>
<pre><code>~/python_programs$ cat data.txt
line 1
line 2
line 3
line 4
line 5
line 6
~/python_programs$ p34 1.py 
~/python_programs$ cat data.txt
line 1
line 2
line 3
line 4
extra line
line 5
line 6
</code></pre>
<hr/>
<pre><code>import fileinput as fi

with fi.input(
        files = 'data.txt', 
        inplace = True,
        backup = '.bak') as f:

    for line in f:
        if fi.lineno() == 4:
            print(line, end='')
            print('extra line')
        else:
            print(line, end='')
</code></pre>
<p><strong>Edit:</strong></p>
<pre><code>~/python_programs$ cat data.txt
#
#
#
'''
4
'''
#
~/python_programs$ p 1.py 
~/python_programs$ cat data.txt
#
#
#
'''
2
'''
#
</code></pre>
<hr/>
<pre><code>import fileinput as fi

f = fi.input(
        files = 'data.txt', 
        inplace = True,
        backup = '.bak'
) 

for line in f:
    newline_removed = line.rstrip()

    if newline_removed == '4':
        print '2'
    else:
        print(newline_removed) #print() adds a newline to end of text

f.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can't change a line directly in a file. You should open file for reading , read all lines, make all the changes. close the file and re-open it for writing than write your changed data. </p>
<pre><code>with open('test2.py', 'r') as f:
    mylines = f.readlines()

## changes here

with open('test2.py', 'w') as f:
    f.write(newdata)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd suggest use <a href="https://docs.python.org/3/library/io.html#io.IOBase.readlines" rel="nofollow"><code>file.readlines()</code></a>, <a href="https://docs.python.org/3/library/io.html#io.IOBase.writelines" rel="nofollow"><code>file.writelines</code></a> and slice like this:</p>
<pre><code>&gt;&gt;&gt; with open('file') as f:
...     a = f.readlines()

&gt;&gt;&gt; a
['1\n', '2\n', '3\n', '4\n', '5\n', '6\n', '7\n', '8\n', '9\n']

&gt;&gt;&gt; if a[4] != '2'+'\n':
...     a[4] = '2'+'\n'

&gt;&gt;&gt; a
['1\n', '2\n', '3\n', '4\n', '2\n', '6\n', '7\n', '8\n', '9\n']

&gt;&gt;&gt; with open('file', 'w') as f:
...         f.writelines(i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First, you open it in read (<code>r+</code>) mode. Use write(<code>w+</code>) instead.
Second(and more important) here you overrides file contents with <code>2</code>.</p>
<p>So I'd do:</p>
<pre><code>with open('test2.py', 'w') as f:
    lines = f.readlines()
    if lines[4] != '2':
        lines[4] = 2
    f.writelines(lines)
</code></pre>
</div>
<span class="comment-copy"><i>I want to append and overwrite</i> -- I doubt anyone knows that that means.  Post 3 lines of an example original file, and post an example of what you want the new file to look like.</span>
<span class="comment-copy">@7stud I've added an example, thanks for the input.</span>
<span class="comment-copy">And why do you think that my answer fails to accomplish that for you?  And that is still a terrible example because it is not clear why an enumerator is relevant.  If you are looking for the text '4' on a line, then you just have to write: <code>if line.rstrip() == '4':  print(whatever) else: print(line)</code>  -- instead of <code>if fi.lineno() == 4:</code></span>
<span class="comment-copy">I added another example to the bottom of my answer.</span>
<span class="comment-copy">@7stud How on earth is that a terrible example; it couldn't be more clearer.</span>
<span class="comment-copy">Thankyou for the code and the explanation it answered the question how it was asked.</span>
<span class="comment-copy">If the new content is shorter than the old content, parts of the old content will remain, as <code>w+</code> does not truncate.</span>
<span class="comment-copy">This just deletes everything in test2.py</span>
