<div class="post-text" itemprop="text">
<p>I'm currently working on <a href="https://github.com/JaggedVerge/mmap_backed_array" rel="nofollow noreferrer">some code</a> that shares some state between processes using a <a href="https://docs.python.org/3/library/mmap.html" rel="nofollow noreferrer"><code>mmap</code></a> object. The use case is a bunch of processes that have access to some read-only data in a shared mmap backed array. Part of this involves doing some arithmetic on the underlying memory representation, I'm using ctypes much like in <a href="https://stackoverflow.com/questions/32364876/how-to-get-the-address-of-mmap-ed-memory-in-python">this question</a> to get a the underlying memory address.</p>
<p>I have a situation where want to be able to open this mmap file as read only by the processes that only read data. However when I do that I'm not sure how to get the pointer address in that case. The following is as close to a minimal example of this problem as I can make:</p>
<pre><code>import mmap
import ctypes

filename = "test"

with open(filename, 'rb+') as fd:
    buf = mmap.mmap(fd.fileno(), 0)
    int_pointer = ctypes.c_int.from_buffer(buf)

with open(filename, 'rb') as fd:
    test_mmap_ro = mmap.mmap(
        fd.fileno(), 0, access=mmap.ACCESS_READ,
        )
    int_pointer2 = ctypes.c_int.from_buffer(test_mmap_ro) #fails here
</code></pre>
<p>Running on Python3 this fails with this:</p>
<pre><code>TypeError: must be read-write buffer, not mmap.mmap
</code></pre>
<p>While Python2 gives this:</p>
<pre><code>TypeError: mmap can't modify a readonly memory map.
</code></pre>
<p>Given that I actually want to use a read only memory map how can I do this? I'll change to a writeable mmap if I have to, but I would rather not if there's another way to do this, so any suggestions or workarounds would be appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>ctypes</code> I ended up with this:</p>
<pre><code>obj = ctypes.py_object(buf)
address = ctypes.c_void_p()
length = ctypes.c_ssize_t()
ctypes.pythonapi.PyObject_AsReadBuffer(obj, ctypes.byref(address), ctypes.byref(length))
int_pointer = address.value
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To obtain a <code>char*</code> pointer to your read-only memory map (<code>mmap.mmap</code> instance), which you can then pass to your C functions, the key is CFFI's <code>ffi.from_buffer()</code> <a href="https://cffi.readthedocs.io/en/latest/ref.html#ffi-buffer-ffi-from-buffer" rel="nofollow noreferrer">(docs)</a>.</p>
<p>So, if you already have:</p>
<pre><code>import mmap
with open("my_huge_file.bin", "rb") as stream:
    buf = mmap.mmap(stream.fileno(), 0, access=mmap.ACCESS_READ)
</code></pre>
<p>To call a C function through CFFI, passing a pointer to the mapped memory, do like so:</p>
<pre><code>from ._my_cffi_module import lib as my_cffi_module, ffi
cbuf = ffi.from_buffer(buf)
my_cffi_module.my_c_function(cbuf, 1, 2, 3)  # Whatever your parameters may be
</code></pre>
<p>Your C function can now freely read from the buffer, using whatever pointer arithmetic you need, but of course not write to it.</p>
</div>
<span class="comment-copy">I think it's worth mentioning that because I'm already using <a href="http://cffi.readthedocs.org/en/latest/overview.html" rel="nofollow noreferrer">CFFI</a> in this project I'm open to some sort of solution that leverages that.</span>
<span class="comment-copy"><code>"Part of this involves doing some arithmetic on the underlying memory representation"</code> -- Why do you need the absolute address? Could you give an example?</span>
<span class="comment-copy">Say you have some code in c that opens the mmap and writes some structs to it. In order to get access to that data in python you might need to be able to find offsets into that struct at the level of individual bytes.</span>
<span class="comment-copy">Couldn't you just slice the mmap object? -- When I'm parsing binary data with Python, I usually just call <code>from_buffer_copy()</code> method of a <code>ctypes.Structure</code> subclass on a sub region of the mmap.</span>
