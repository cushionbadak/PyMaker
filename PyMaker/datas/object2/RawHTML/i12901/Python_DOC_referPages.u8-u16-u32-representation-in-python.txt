<div class="post-text" itemprop="text">
<p>I have two questions and they both are inter-related.</p>
<p>My first question is:
As for example, I have to declare few U8 variables, U16 and U48 and then have to pass the values to them. After passing the values, I have to covert them into a binary (one binary-all of them combined). I don't know how to perform this task
How to define U8, U16 and U32 in python(in binary). I know <code>struct</code> as a module. But when I write</p>
<pre><code>ex=binascii.hexlify(struct.pack("I",1))
</code></pre>
<p>it returns <code>b'01000000'</code> instead of returning <code>01000000</code>. Is there any other way to do it(I need it in U8 format)</p>
<p>My second question is:</p>
<p>How can disintegrate <strong>U8</strong> into <strong>2MSbits</strong> and <strong>6LSbits</strong></p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I have to declare few U8 variables, U16 and U48 and then have to pass the values to them. </p>
</blockquote>
<p>Python is a dynamic-typed language to a variable doesn't have a fixed type, the type of your value will depend on the value it holds. That said, in python there is a single integer type (<code>int</code>), and it can hold any signed integer number, if your number is to big it will be automatically converted to a bigint.</p>
<p>E.g.</p>
<pre><code>var1 = 256  # A plain integer
var2 = 4294967296L # Bigger than 2**31, it has to be prefixed with an L
</code></pre>
<p>Since there is a single integer type, if you want to limit your variable to hold a given binary width, you should mask the LSBits.</p>
<p>E.g.</p>
<pre><code>bignum = 2**50 - 1
only_8_lsb = bignum &amp; 0xFF
only_16_lsb = bignum &amp; 0xFFFF
only_48_lsb = bignum &amp; (2**49 - 1)
</code></pre>
<blockquote>
<p>After passing the values, I have to covert them into a binary (one binary-all of them combined).</p>
</blockquote>
<p>Technically, the numbers are already stored as binary. If you want to show the binary representation of a number, you'll have to hold it in a string, and you can use formatting</p>
<p>E.g. Converting a number to a zero-paded 8-digits binary representation</p>
<pre><code>&gt; "{0:08b}".format(0b11000011)
'11000011'
</code></pre>
<p>E.g. Converting a number to a zero-paded 16-digits binary representation</p>
<pre><code>&gt; "{0:016b}".format(0xCAFE)
'1100101011111110'
</code></pre>
<p>Hopefully, you noticed that a you can specify an integer in different ways.</p>
<blockquote>
<p>How can disintegrate U8 into 2MSbits and 6LSbits</p>
</blockquote>
<p>Unless you need other representation, use bit operators as noted in the other answer.</p>
<p><code>struct</code> has other purpose, it allows you to convert some python values to a string of bytes, as would other languages will see them in memory. And you are getting a <code>b</code> prefixed string, because in Python 3 <code>str</code> is meant to store unicode code points while <a href="https://docs.python.org/3/library/stdtypes.html#bytes" rel="nofollow"><code>bytes</code></a> are meant to store raw bytes (sequences of "numbers" in the range <code>0 &lt;= chr &gt; 256</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>It's unclear what you want, but you can extract the MSB and LSB using bit operations.</p>
<p>For a byte:</p>
<ul>
<li>2 MSBs: <code>x &gt;&gt; 6</code></li>
<li>6 LSBs: <code>x &amp; ((1 &lt;&lt; 6) - 1)</code></li>
</ul>
</div>
<span class="comment-copy">This is the correct output. <code>b</code> stands for bytes. It's not a part of the string.</span>
<span class="comment-copy">What do mean by defining U8 in python? Python natively doesn't have a <code>byte</code> type like c/java, there is <code>array</code> <code>ctypes</code> and <code>numpy</code> but it helps to know what your goal is.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/385572/need-help-typecasting-in-python">Need help-typecasting in Python</a>  is this the same thing too</span>
<span class="comment-copy">@simonzack   Can I disintegrate U8 into MSB and LSB. is it possible?</span>
<span class="comment-copy">Could you please elaborate more about your goal? I don't think anyone else except you knows what you're asking about.</span>
<span class="comment-copy">Thanks a lot for such a good explanation</span>
<span class="comment-copy">So that means I don't have to use <code>struct</code></span>
<span class="comment-copy">Using <code>struct</code> to convert a number to binary will be a two process step. <code>struct</code> will only give you a raw string of bytes (e.g. <code>struct.pack("I", 0xA1B2C3D4)</code> =&gt; <code>'\xd4\xc3\xb2\xa1'</code>) and you'll need to post-process it to be a binary representation. The only benefit of <code>struct</code> I can think of is to get the bytes in a specifc <a href="https://en.wikipedia.org/wiki/Endianness" rel="nofollow noreferrer">endianess</a>.</span>
