<div class="post-text" itemprop="text">
<p>I'm trying to get a function to take a string dec, representing a decimal number, for example "11" and I want said function to return a string, which contains the corresponding binary format, in this case "1011".
So this is what I have so far:</p>
<pre><code>def dec2bin(dec):

    dec = str("11")

    if dec &gt; 1:
        binary(dec//2)
    return (dec % 2,end = "")
</code></pre>
<p>I'm very new to Python, so I'm not sure how to turn a number into a string (using str()) in the first place and how to make it return the corresponding binary value. Can anyone point me in the right direction?</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you can use <code>int</code> to convert the string to an integer:</p>
<pre><code>def dec2bin(snum):
    n = int(snum)
    bin_s = ['1' if (n &gt;&gt; b) &amp; 1 else '0' for b in range(n.bit_length())]
    return ''.join(reversed(bin_s))
</code></pre>
<p>let's test it</p>
<pre><code>&gt;&gt;&gt; dec2bin('11')
'1011'
</code></pre>
<p>Basically, it scans the integer obtained from the string and checks every bit in it.</p>
<p>It shifts the number to the right and checks the least significant bit and-ing it with the value <code>1</code> (alternatively we could shift the mask to the left and leave the number unchanged).</p>
<p>The result of each bit-check is used to populate a list, which is then reversed and joined to form a string.</p>
<p>If using list comprehensions would make you look too cool to be true, use a <code>for</code> loop:</p>
<pre><code>def dec2bin(snum):
    n = int(snum)
    bin_s = []
    for b in range(n.bit_length()):
        cur_bit = (n &gt;&gt; b) &amp; 1
        sbit = chr(ord('0') + cur_bit)
        bin_s.append(sbit)
    return ''.join(reversed(bin_s))
</code></pre>
<p>Another solution, in case you can use python's builtin <code>format</code> function, would be:</p>
<pre><code>def dec2bin(snum):
    return format(int(snum),"b")
</code></pre>
<p>Further note to clarify the algorithm (the main assumption is that we are only talking about unsigned integers):</p>
<p>Computers use binary representation of data (i.e. bits, zero and ones). Put one after the other, from right to left, they form a number in ascending powers of two, just like decimal digits do.</p>
<p>For example the number thirteen (13 is its representation in base ten: 1*10^1+3*10^0) is written as 1101 in binary (1*2^3+1*2^2+0*2^1+1*2^0) and stored in memory as bits within bytes (8-bits).</p>
<p>The LSB (Least Significant Bit) is the least powerful bit (binary digit), i.e. the rightmost one in 1101, because it weighs the least in terms of power of two.</p>
<p>Python allows a variable size for integers, that is why I use the <code>bit_length</code> method to find out how many bits are necessary to store that number. Other languages (e.g. C) allocate a predefined size to numbers, normally the same (or less) as the width of the registers the CPU provides.</p>
</div>
<div class="post-text" itemprop="text">
<p>This should work:</p>
<pre><code>def dec2bin(num):
    return bin(int(num))[2:]
</code></pre>
<p><code>int</code> converts the string <code>num</code> into an integer. <code>bin</code> converts it into its binary representation (a string again). The <code>[2:]</code> drops the first two characters, which are only an indicator for the binary representation.</p>
</div>
<div class="post-text" itemprop="text">
<p>The following will work:</p>
<pre><code>def dec2bin(dec):
    return format(int(dec), "b")
</code></pre>
<p>You can test it like this:</p>
<pre><code>print dec2bin("11")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a function that also allows you to choose the number of digits in the output.  </p>
<pre><code>def int2bin(n, count=24):
    """returns the binary of integer n, using count number of digits"""
    return "".join([str((n &gt;&gt; y) &amp; 1) for y in range(count-1, -1, -1)])  
</code></pre>
<p>It normally takes an int:  </p>
<pre><code>print int2bin(44)  
'000000000000000000101100'  
</code></pre>
<p>but you can use a string by converting it to int first:</p>
<pre><code>print int2bin(int("44"))  
'000000000000000000101100'
</code></pre>
</div>
<span class="comment-copy">Do you have to write the function as an exercise? Otherwise use <code>bin</code>.</span>
<span class="comment-copy">@juanchopanza yup, I have to write a function unfortunately</span>
<span class="comment-copy">Think about how you represent a number using base 10, i.e. decimal - the rightmost digit (let's call this digit number 0) is the remainder after dividing by 10. The next digit (digit number 1) is the remainder after dividing (number/10) by 10. The next digit (digit number 2) is the remainder after dividing (number/100) by 10. Note that 100 is 10^2, i.e. 10^digitnumber. The nth digit is the remainder after dividing (number/10^digitnumber) by 10. Replace 10 by 2 and you will get binary representation. Now ignore the people providing answers for you and go code it.</span>
<span class="comment-copy">@barny I thought that was what I was doing with "dec % 2". Could you give me another hint?</span>
<span class="comment-copy">Yes, dec%2 is possibly part of the answer, as long as dec is an integer. In your code, is dec an integer? Try writing code to add 1 to it, does that work? BTW I'm not going to write the code for you - you have that job.</span>
<span class="comment-copy">What does the "b" specify exactly?</span>
<span class="comment-copy"><code>b</code> stands for binary, of course. Please see the <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language" rel="nofollow noreferrer">official docs</a> for more info on the format spec</span>
<span class="comment-copy">ah okay got it - Thank you!</span>
<span class="comment-copy">@Tom Karzes Is there a way, which doesn't use format or "b"? I'd like to use something along the lines of the if statement I tried...</span>
<span class="comment-copy">ohhhh, this helped a lot! :)</span>
<span class="comment-copy">Ok, since you're supposed to write the function yourself, this solution won't help much. But I'll leave it here for reference.</span>
<span class="comment-copy">It's definitely nice to see something work haha. Any suggestions regarding the function?</span>
<span class="comment-copy">nice, but late ;)</span>
