<div class="post-text" itemprop="text">
<p>Currently I have a Python file that contains dozons of classes, and each class takes 5-10 parameters in its constructor function.</p>
<p>Every time when I want to change the default values for those parameters, I need to go through the whole file to look for those constructor functions, and modify them manually, that is not too complicated, but would be a little bit messy sometimes.  </p>
<p>I am wondering are there any ways to write a human-readable configuration file for it such that I could directly modify some entries in this config file to change the corresponding default parameters? How should I do that?</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>You could write a configuration file in any format.</p>
<p>Python ships ready with support for <a href="https://docs.python.org/3/library/json.html" rel="nofollow">JSON</a>, <a href="https://docs.python.org/3/library/xml.html" rel="nofollow">XML</a> and a format similar to traditional sectioned config files (<a href="https://docs.python.org/3/library/configparser.html" rel="nofollow"><code>configparser</code></a>). All these formats have support for nested structures (the last one in a slightly less useful way).</p>
<p>Another option chosen by many Python projects is to write the config file in Python itself. Indeed, a Python dictionary almost looks like JSON so it should be easy to read and write even for people who don't know Python very well. The file can then be loaded and dynamically evaluated which means you can also use fancy stuff like retrieving environment variables, recursively loading other files or using handy functions like <code>os.path.whatever</code>.  If you'd rather not execute such “untrusted” code, have a look at <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow"><code>ast.literal_eval</code></a>.</p>
<p>Whatever format you chose, you should write a little <code>config</code> module that provides a function to retrieve a configuration value given a key. The key could be a string like <code>module.submodule.class.parameter</code> that is broken into parts by the function and used to look up the entry in the hierarchical structure of the config file. It will probably be best to load the configuration once into an in-memory data structure and then serve all requests from that structure. You can do the loading lazily the first time the function is called.</p>
</div>
<div class="post-text" itemprop="text">
<p>My suggestion should be taken as an opinion rather than knowledge (which makes me question how suitable this post is for SO).</p>
<p>If you already have an application in place, the simplest and my preferred aproach would be to store a config file in plain-text in a <code>KEY=VALUE</code> format. This is, in my opinion, the simplest and cleanest approach. Plain-text is understandable everywhere (not some qwerky format) and <code>KEY=VALUE</code> is very easy to read and understand individually.</p>
<p>Take an example:</p>
<pre><code>port=443
host=localhost
proxy=127.0.0.1
</code></pre>
<p>You can keep this stored in the current working directory with a specific name (<code>.NAME</code> format to keep it hidden on certain OS)</p>
<p>At this point, parsing the contents is fairly straight forward, depending on how your application is structured.(1)</p>
<pre><code>with open('filename') as config_file:
    config_entries = config_file.readlines()
    for line in config_entries:
        pair = line.split('=')
        key = pair[0]
        val = pair[1]
</code></pre>
<hr/>
<p>Essentially, most of the metadata is de-coupled from the rest of your code, keeping this nice and easy for maintenance and updates in the future.</p>
<p>Ofcourse, this is a simplistic approach, you can opt for (as suggested by @Mark) to use <a href="https://docs.python.org/3.5/library/configparser.html" rel="nofollow">configparser</a> but I think it adds an extra layer of complexity which you can avoid easily in most cases.</p>
<hr/>
<p>(1) <em>Didn't test below code.</em></p>
</div>
<div class="post-text" itemprop="text">
<p>You could define some constants at the start of your file to have all the default values in one place:</p>
<pre><code>A_PARAM1_DEFAULT = 42
class A:
    def __init__(param1=A_PARAM1_DEFAULT):
        # do something
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3.5/library/configparser.html" rel="nofollow noreferrer">configparser</a>?</span>
<span class="comment-copy">If you don't want to use configParser then just use one .py file where you declare the default values and import that then you only have to change in one place</span>
<span class="comment-copy">@PadraicCunningham Great idea! I can write one configuration file for multiple Python files in this way, thanks!</span>
<span class="comment-copy">@WeiChen - If any of the answers are sufficient, please mark the respective answer as correct :-)</span>
<span class="comment-copy">I wouldn't recommend this approach, as it can be repetitive as two of every default variable will exist - the default constant (<code>A_PARAM1_DEFAULT</code>) and the actual variable used (<code>param1</code>). This may be fine for small programs, but large programs with many variables this may cause a few issues, the obvious being that the amount of variables being doubled will increase the programs file size, and the second being that the local variables namespace will be significantly crowded.</span>
