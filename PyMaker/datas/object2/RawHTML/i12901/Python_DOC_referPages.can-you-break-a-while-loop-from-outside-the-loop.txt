<div class="post-text" itemprop="text">
<p>Can you break a while loop from outside the loop? Here's a (very simple) example of what I'm trying to do: I want to ask for continuous inside a While loop, but when the input is 'exit', I want the while loop to break!</p>
<pre><code>active = True

def inputHandler(value):
    if value == 'exit':
        active = False

while active is True:
    userInput = input("Input here: ")
    inputHandler(userInput)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In your case, in <code>inputHandler</code>, you are creating a new variable called <code>active</code> and storing <code>False</code> in it. This will not affect the module level  <code>active</code>.</p>
<p>To fix this, you need to explicitly say that <code>active</code> is not a new variable, but the one declared at the top of the module, with the <code>global</code> keyword, like this</p>
<pre><code>def inputHandler(value):
    global active

    if value == 'exit':
        active = False
</code></pre>
<hr/>
<p>But, please note that the proper way to do this would be to return the result of <code>inputHandler</code> and store it back in <code>active</code>.</p>
<pre><code>def inputHandler(value):
    return value != 'exit'

while active:
    userInput = input("Input here: ")
    active = inputHandler(userInput)
</code></pre>
<p>If you look at the <code>while</code> loop, we used <code>while active:</code>. In Python you either have to use <code>==</code> to compare the values, or simply rely on the truthiness of the value. <code>is</code> operator should be used only when you need to check if the values are one and the same.</p>
<hr/>
<p>But, if you totally want to avoid this, you can simply use <a href="https://docs.python.org/3/library/functions.html#iter" rel="noreferrer"><code>iter</code></a> function which breaks out automatically when the sentinel value is met.</p>
<pre><code>for value in iter(lambda: input("Input here: "), 'exit'):
    inputHandler(value)
</code></pre>
<p>Now, <code>iter</code> will keep executing the function passed to it, till the function returns the sentinel value (second parameter) passed to it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Others have already stated why your code fails. Alternatively you break it down to some very simple logic.</p>
<pre><code>while True:
    userInput = input("Input here: ")
    if userInput == 'exit':
        break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, you can indeed do it that way, with a tweak: make <code>active</code> global.</p>
<pre><code>global active
active = True

def inputHandler(value):
    global active
    if value == 'exit':
        active = False

while active:
    userInput = input("Input here: ")
    inputHandler(userInput)
</code></pre>
<p>(I also changed <code>while active is True</code> to just <code>while active</code> because the former is redundant.)</p>
</div>
<span class="comment-copy"><code>while active:</code> or if you insist <code>while active == True:</code> but not <code>is True</code></span>
<span class="comment-copy">Better ways to do this: <code>raise</code> some exception, call <code>sys.exit</code>, have the <code>while</code>condition itself check the input (possibly with another function)</span>
<span class="comment-copy">when you don't have <code>global active</code> python creates a local variable <code>active</code> that only exists inside of the <code>inputHandler</code> function.</span>
