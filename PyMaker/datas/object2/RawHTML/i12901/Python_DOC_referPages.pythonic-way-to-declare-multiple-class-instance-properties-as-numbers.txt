<div class="post-text" itemprop="text">
<p>I have a class with several properties, each of which has to be a number.  After repeating the same code over and over again I think there is a more pythonic way to declare multiple class instance properties as numbers.</p>
<p>Right now I set each property value to None and raise a type error if the value is set to a non number type.  I'd prefer to set the property type to a number when the property is initialized.</p>
<p>Thanks!</p>
<p>Example:</p>
<pre><code>import numbers

class classWithNumbers(object):

    def __init__(self):
        self._numProp1 = None
        self._numProp2 = None

    @property
    def numProp1(self):
        return self._numProp1
    @numProp1.setter
    def numProp1(self,value):
        if not isinstance(value, numbers.Number): #repeated test for number
            raise TypeError("Must be number")

        self._numProp1 = value

    @property
    def numProp2(self):
        return self._numProp2
    @numProp2.setter
    def numProp(self,value):
        if not isinstance(value, numbers.Number):
            raise TypeError("Must be number")

        self._numProp2 = value
</code></pre>
<p>Also, I actually have this wrapped into a method that is repeated at each property setter:</p>
<pre><code>def isNumber(value):
if not isinstance(value, numbers.Number):
    raise TypeError("Must be number")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If <strong>every</strong> property of this class should be a number you can implement custom <code>__setattr__</code> method:</p>
<pre><code>class ClassWithNumbers(object):

    def __init__(self):
        self.num_prop1 = 0
        self.num_prop2 = 0

    def __setattr__(self, name, value):
        if not isinstance(value, numbers.Number):
            raise TypeError("Must be number")
        super(ClassWithNumbers, self).__setattr__(name, value)
</code></pre>
<p>From documentation: <code>__setattr__</code> (is) called when an attribute assignment is attempted. This is called instead of the normal mechanism (i.e. store the value in the instance dictionary). name is the attribute name, value is the value to be assigned to it.</p>
<p>More general approach would be to not allow type of once assigned attribute to change:</p>
<pre><code>class ClassWithUnchangeableTypes(object):
    def __init__(self):
        self.num_prop1 = 0
        self.num_prop2 = 0

    def __setattr__(self, name, value):
        if hasattr(self, name):  # this means that we assigned value in the past
            previous_value_type = type(getattr(self, name))
            if not isinstance(value, previous_value_type):
                raise TypeError("Must be {}".format(previous_value_type))
        super(ClassWithUnchangeableTypes, self).__setattr__(name, value)
</code></pre>
<hr/>
<p>Speaking of pythonic, from pep8:</p>
<blockquote>
<p>Class names should normally use the CapWords convention.</p>
<p>Use the function naming rules: lowercase with words separated by underscores as necessary to improve readability.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>A fairly modern (python 3.5+) and pythonic way is using <a href="https://docs.python.org/3/library/typing.html" rel="nofollow">type hints</a></p>
<pre><code>@property
def numProp1(self):
    return self._numProp1
@numProp1.setter
def numProp1(self,value: int):
    self._numProp1 = value
</code></pre>
<p>A more compatible way is to try to convert to int, which will then throw an exception for you if that fails. It might also have unwanted behaviour like accepting floats:</p>
<pre><code>@property
def numProp1(self):
    return self._numProp1
@numProp1.setter
def numProp1(self,value):
    self._numProp1 = int(value)
</code></pre>
<p>But there's already nothing wrong with your implementation in general.
If you do not want to explicitly declare getters and setters, you could check their type when used, not when assigned.</p>
</div>
<div class="post-text" itemprop="text">
<p>The most Pythonic way is probably to call the <code>int</code> constructor and let it throw an exception:</p>
<pre><code>class ClassWithNumbers(object):
    def __init__(self, v1, v2):
        self.numprop1 = int(v1)
        self.numprop2 = int(v2)
</code></pre>
<p>if the <code>numprop</code>s are part of your interface then creating <code>@property</code> accessors would be appropriate.  You can also implement your own descriptor:</p>
<pre><code>class Number(object):
    def __init__(self, val=0):
        self.__set__(self, val)

    def __get__(self, obj, cls=None):
        return self.val

    def __set__(self, obj, val):
        try:
            self.val = int(val)
        except ValueError as e:
            raise TypeError(str(e))

class ClassWithNumbers(object):
    numprop1 = Number(42)
    numprop2 = Number(-1)
</code></pre>
<p>usage:</p>
<pre><code>c = ClassWithNumbers()
print c.numprop1
c.numprop1 += 1
print c.numprop1
c.numprop1 = 'hello'
</code></pre>
</div>
<span class="comment-copy">This is promising, I'm not sure EVERY property is a number just yet, but I may be able to abstract non-number properties out to implement this.  Also, thanks for the naming convention reference!</span>
<span class="comment-copy">Thank you for the "hint"!  I'm on python 2.7.9.  I had thought of conversion but liked my type error better.  I'll play with it a bit more.  THANKS!</span>
