<div class="post-text" itemprop="text">
<p>I have a python file <code>input.py</code>. There are comments and a mix of spaces and tabs, just for good measure. </p>
<pre><code># comment1 or header
name    =   "project1"
length  = 100.0 # comment2
width   = 20.0
area = length * width
circumference = 2*length + 2*width
        # orphaned comment
</code></pre>
<p>I want to read the variables, some of which are evaluated from others, into my class structure so that they can be accessed like <code>self.area</code>:</p>
<pre><code>import importlib
class Project:     
    def __init__(self, inFile):
        self.inFile = inFile
        ## from self.inFile import * # definitely not gonna work! 
        importlib.import_module(inFile) # doesn't work either! 
p1 = Project(r"/home/feedme/input.py")
print p1.area
</code></pre>
<p>Desired example output:</p>
<pre><code>2000.0 
</code></pre>
<p>Aside from the fact that <code>from something import *</code> is generally not a good idea, what can I use to bring the variables into the class in this way? </p>
<p><strong>Edit:</strong> removed the side question about importing a module where the name is a string, since I found the answer already myself; <code>importlib</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>I'd suggest using the <a href="https://docs.python.org/3/library/runpy.html" rel="nofollow"><code>runpy</code></a> module. The following will execute the python script at the path passed to the class initializer and load all of the non-dunder variables into the instance dictionary:</p>
<pre><code>import runpy

class Project(object):

    def __init__(self, path):
        module = runpy.run_path(path)
        for k, v in module.items():
            if not k.startswith('__'):
                self.__dict__[k] = v
</code></pre>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; project = Project('conf.py')
&gt;&gt;&gt; project.area
2000.0
</code></pre>
</div>
<span class="comment-copy">Do you need a python 2 solution here?</span>
<span class="comment-copy">@shuttle87 Yes I am using Python 2.7</span>
