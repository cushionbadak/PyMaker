<div class="post-text" itemprop="text">
<p>I have a function in python that can either return a <code>bool</code> or a <code>list</code>. Is there a way to specify the return types using type hints.</p>
<p>For example, Is this the correct way to do it?</p>
<pre><code>def foo(id) -&gt; list or bool:
      ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/library/typing.html#typing.Union" rel="noreferrer">documentation</a></p>
<blockquote>
<p>class <code>typing.Union</code></p>
<p>Union type; <strong><em>Union[X, Y] means either X or Y.</em></strong></p>
</blockquote>
<p>Hence the proper way to represent more than one return data type is </p>
<pre><code>from typing import Union


def foo(client_id: str) -&gt; Union[list,bool]
</code></pre>
<hr/>
<p>But do note that typing is not enforced.  Python continues to remain a dynamically-typed language.  The annotation syntax has been developed to help during the development of the code prior to being released into production.  As PEP 484 states, "no type checking happens at runtime."</p>
<pre><code>&gt;&gt;&gt; def foo(a:str) -&gt; list:
...     return("Works")
... 
&gt;&gt;&gt; foo(1)
'Works'
</code></pre>
<p>As you can see I am passing a int value and returning a str. However the <code>__annotations__</code> will be set to the respective values. </p>
<pre><code>&gt;&gt;&gt; foo.__annotations__ 
{'return': &lt;class 'list'&gt;, 'a': &lt;class 'str'&gt;}
</code></pre>
<hr/>
<p>Please Go through <a href="https://www.python.org/dev/peps/pep-0483/" rel="noreferrer">PEP 483</a> for more about Type hints. Also see <a href="https://stackoverflow.com/questions/32557920/what-are-type-hints-in-python-3-5">What are Type hints in Python 3.5</a>?</p>
<p>Kindly note that this is available only for <strong><em>Python 3.5</em></strong> and upwards. This is mentioned clearly in <a href="https://www.python.org/dev/peps/pep-0484/" rel="noreferrer">PEP 484</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The statement <code>def foo(client_id: str) -&gt; list or bool:</code> when evaluated is equivalent to
<code>def foo(client_id: str) -&gt; list:</code> and will therefore not do what you want.</p>
<p>The native way to describe a "either A or B" type hint is <a href="https://docs.python.org/3/library/typing.html#typing.Union" rel="nofollow noreferrer">Union</a> (thanks to Bhargav Rao):</p>
<pre><code>def foo(client_id: str) -&gt; Union[list, bool]:
</code></pre>
<p>I do not want to be the "Why do you want to do this anyway" guy, but maybe having 2 return types isn't what you want:</p>
<p>If you want to return a bool to indicate some type of special error-case, consider using Exceptions instead. If you want to return a bool as some special value, maybe an empty list would be a good representation.
You can also indicate that <code>None</code> could be returned with <code>Optional[list]</code></p>
</div>
<span class="comment-copy">how do you end up with either a list or a boolean?</span>
<span class="comment-copy">@PadraicCunningham Perhaps the implementation is <i>I'll send you my Id, you send me either a list or a boolean</i> :D</span>
<span class="comment-copy">Is there an equivalent in Python 3.4</span>
<span class="comment-copy">@YahyaUddin Nope - <a href="https://www.python.org/dev/peps/pep-0484/" rel="nofollow noreferrer">PEP 484</a> :'( .... It's only for Python3.5 upwards.</span>
<span class="comment-copy">@YahyaUddin Quite surprising. Did you mean <a href="https://docs.python.org/3/tutorial/controlflow.html#function-annotations" rel="nofollow noreferrer">Function Annotations</a> by any chance?</span>
<span class="comment-copy">So let me see if I got this. Python 3.4 has function annotations that dosen't do anything other than annotate that is NOT enforced. But in Python 3.5 this is actual type checking.</span>
<span class="comment-copy">@BhargavRao, sorry about that!  I just felt it was too important to leave in the comments section.</span>
<span class="comment-copy">There are uses where returning multiple types may be what you want: for instance if you need to return one of some set of subtypes, but not other subtypes, or if you are attempting to process data and want to return the raw form if processing isn't available. Also, if you are wrapping legacy code it can be quite useful, because it helps the upgrade process and/or see awkward places.</span>
<span class="comment-copy">The exceptions and empty list idea was helpful as well. thanks</span>
