<div class="post-text" itemprop="text">
<p>I'm using Python to compare my flickr photos to my local harddrive photo directories. </p>
<p>In order to do this, I'm using OAuth in Python and getting an etree listing of each folder/album I have in flickr. The folder/album contents on flickr 'should' match my local copy directory. </p>
<p>I'd like my script to tell me when there are items not in my photo listing on my local drive and flickr (and vice versa). </p>
<p>The 'title' field of the flickr photos should be the same as the filename on Linux and directory names on Linux will/should match the album names on flickr. That is currently how I have it set up.</p>
<p>I'm wondering what would be the best and most efficient way to compare these item lists in Python (etree node items vs <code>os.listdir()</code> items)? </p>
<p>I'd rather not get into using <code>sort()</code> in bash to sort any piped output to filenames unless necessary. I'd like to keep everything in Python if possible as I'm just learning it. </p>
<p>I could use <code>os.listdir()</code> and compare that to the <code>XML.Etree</code> nodes returned to flickr, but what would be the best approach to do this comparison? </p>
<p>Keep in mind that the lists may not be the same and may not be sorted when comparing items from flickr and Linux.</p>
<p>I have the following snippet of code written to get results from flickr:</p>
<pre><code>...oauth code above...
sets = flickr.photosets.getList(user_id=user_id)
print ("Total sets: " + sets.find('photosets').attrib['total'])
all_sets = sets.find('photosets').findall('photoset')

for each_set in all_sets:
   for node in each_set.findall('title'):
      print ("photoset: " + each_set.get('id') + ", " + node.text + ", photos: ", each_set.get('photos'))
      all_photos = flickr.photosets.getPhotos(user_id=user_id, photoset_id=each_set.get('id'))
      photos = all_photos.find('photoset')
      for photo in photos:
         print (photo.get('title'))
</code></pre>
<p>An example of the output from the above code would be:</p>
<pre><code>photoset: 72157659163323894, Birthday Party - Nov 21, 2015, photos:  131
...
2015:11:21-16:11:14-IMG_20151121_161114372
2015:11:21-16:11:10-IMG_20151121_161109739
2015:11:21-16:10:36-IMG_20151121_161035497
2015:11:21-15:47:14-IMG_20151121_154713671
2015:11:21-15:43:17-IMG_20151121_154317180
2015:11:21-15:43:15-IMG_20151121_154315539
2015:11:21-15:23:42-IMG_20151121_152342348
2015:11:21-15:23:11-IMG_20151121_152311411
...
2015:11:21-16:21:19-DSC_0603
2015:11:21-16:21:13-DSC_0602
2015:11:21-16:21:11-DSC_0601
2015:11:21-16:21:09-DSC_0600
2015:11:21-16:21:07-DSC_0599
2015:11:21-16:21:05-DSC_0598
2015:11:21-16:20:13-DSC_0597
2015:11:21-16:20:09-DSC_0596
2015:11:21-16:19:59-DSC_0595
2015:11:21-16:19:56-DSC_0594
2015:11:21-16:19:55-DSC_0593
...
</code></pre>
<p>The API for getPhotos is here: <a href="https://www.flickr.com/services/api/flickr.photosets.getPhotos.htm" rel="nofollow">https://www.flickr.com/services/api/flickr.photosets.getPhotos.htm</a> which shows some of the example xtree/XML output.</p>
<p>Etree API: <a href="https://docs.python.org/2/library/xml.etree.elementtree.html" rel="nofollow">https://docs.python.org/2/library/xml.etree.elementtree.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>To check if the file from your flickr exist on your hd:</p>
<pre><code>not_on_hd = []
for file in flickr_photos:
    if os.path.exists("path/to/"+file):
        continue
    else:
        not_on_hd.append(file)
print(not_on_hd)
</code></pre>
<p>To do it the other way around I'd use a simple <code>if file_on_drive is in flickr_photos</code>, and append the ones that return false to a list, just like above.  </p>
<pre><code>not_on_flickr = []
for file_on_drive in files_on_drive:
    if file_on_drive in flickr_photos:
        continue
    else:
        not_on_flickr.append(file_on_drive)
print(not_on_flickr)
</code></pre>
<p>Since you asked for efficiency: pop() any files that have been found in the first run from the list, making the second run shorter.</p>
<pre><code>not_on_hd = []
for i,file in enumerate(flickr_photos):
    if os.path.exists("/path/to/"+file):
        continue
    else:
        not_on_hd.append(file)
        flickr_photos.pop(i)
print(not_on_hd)
</code></pre>
<p>Here's some docs on what I did up there:<br/>
<code>enumerate()</code> - python3 <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow">docs</a><br/>
<code>is in</code> - Python3 <a href="https://docs.python.org/3/reference/expressions.html" rel="nofollow">Docs</a>(Section 6.10.2) (And the difference between <code>is</code> and <code>==</code> <a href="http://blog.lerner.co.il/why-you-should-almost-never-use-is-in-python/" rel="nofollow">here</a>)</p>
</div>
<div class="post-text" itemprop="text">
<p>Birds eye view:</p>
<ol>
<li>Create a set (datatype <code>set</code>!) of full path names from the XML.</li>
<li>Create another set of full path names from your local file system.</li>
<li>Use <code>set</code> operations to get the paths missing on either side.</li>
</ol>
</div>
