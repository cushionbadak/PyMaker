<div class="post-text" itemprop="text">
<p>I have a binary test file found at <a href="http://jmp.sh/VpTZxgQ" rel="nofollow">http://jmp.sh/VpTZxgQ</a> and I am trying to rewrite some matlab code in python which reads this file.</p>
<p>What I have realised is that matlab's <code>fread</code> remembers what has already been read so that it skips the number of bytes that have already been read. How do I ensure I get the same behaviour in python?</p>
<h1>Matlab Code:</h1>
<pre><code>clear all; close all;

path = pwd;
ext = 'bin';
stem = 'test';
filename = [stem,'.',ext];
filename = fullfile(path,filename);
fid = fopen(filename,'r');

fread(fid,2,'int16')
fread(fid,32,'char')
fread(fid,2,'int16')
</code></pre>
<h1>Python Code:</h1>
<pre><code>import numpy as np  

def fread(filename, n, precision):
     with open(filename, 'rb') as fid:
         data_array = np.fromfile(fid, precision).reshape((-1, 1)).T

     return data_array[0,0:n]

print fread('test.bin', 2, np.int16)                                                                                                                         
print fread('test.bin', 32, np.str)
print fread('test.bin', 2, np.int16) 
</code></pre>
<p>Ideally I would want the output of these formulations to be the same, but they are not. In fact python gives a <code>value error</code> when I try to set <code>precision</code> to <code>np.str</code>...</p>
<p>As a bonus question - I'm assuming that reading a binary file and making sense of the data requires that the user has an understanding of how the data was formatted in order to make any sensible information of the data. Is this true?</p>
</div>
<div class="post-text" itemprop="text">
<p>As the comments suggest, you need to use a file descriptor, which is what the Matlab code is doing:</p>
<pre><code>import numpy as np

def fread(fid, nelements, dtype):
     if dtype is np.str:
         dt = np.uint8  # WARNING: assuming 8-bit ASCII for np.str!
     else:
         dt = dtype

     data_array = np.fromfile(fid, dt, nelements)
     data_array.shape = (nelements, 1)

     return data_array

fid = open('test.bin', 'rb');

print fread(fid, 2, np.int16)
print fread(fid, 32, np.str)
print fread(fid, 2, np.int16)
</code></pre>
<p>Reading &amp; Writing data to a file in binary requires the reader and writer to agree on a specified format.  As the commenters suggest, endianess may become an issue if you save the binary on one computer and try to read it on another.  If the data is always written and read on the same CPU, then you won't run into the issue.</p>
<p>Output for the test.bin:</p>
<pre><code>MATLAB Output             Python+Numpy Output
------------------------------------------------------
ans =                     

    32                    [[32]
     0                     [ 0]]

ans =                   

    35                    [[ 35]
    32                     [ 32]
    97                     [ 97]
   102                     [102]
    48                     [ 48]
    52                     [ 52]
    50                     [ 50]
    95                     [ 95]
    53                     [ 53]
    48                     [ 48]
   112                     [112]
   101                     [101]
   114                     [114]
    99                     [ 99]
    95                     [ 95]
   115                     [115]
   112                     [112]
    97                     [ 97]
   110                     [110]
    32                     [ 32]
    32                     [ 32]
    32                     [ 32]
    32                     [ 32]
    32                     [ 32]
    32                     [ 32]
    32                     [ 32]
    32                     [ 32]
    32                     [ 32]
    32                     [ 32]
    32                     [ 32]
    32                     [ 32]
    32                     [ 32]]

ans =

    32                     [[32]
     0                      [ 0]]
</code></pre>
</div>
<span class="comment-copy">Side note: you are not using <code>precision</code> in your <code>fread</code> definition.</span>
<span class="comment-copy">@excaza thanks - updated that.</span>
<span class="comment-copy">As for your bonus question: correct. A binary file is just a stream of bits, you have to make sense of it by reading into the appropriate number and type of variables. What's worse: you have to consider things like endianness, even if you get the size and type of variables right.</span>
<span class="comment-copy">You can use <a href="https://docs.python.org/3/tutorial/inputoutput.html" rel="nofollow noreferrer"><code>fid.seek</code></a> to navigate to the correct position in your file. <a href="http://stackoverflow.com/a/30763450/2748311">This answer</a> may be useful.</span>
<span class="comment-copy">Jack, I wouldn't be surprised if the python version did the same. Any reasonable file-processing function should continue where it left off by default, and resetting/relocating should be the non-trivial task. So I'd first try it with subsequent <code>fromfile</code> calls (with proper input) without any tricks, and if by any chance it gives you the same result for 3 calls, then start worrying about relocation after each call:)</span>
<span class="comment-copy">As I <i>also</i> commented, passing that <code>precision</code> to <code>fromfile</code> in that way will <i>not</i> work.</span>
<span class="comment-copy">I see that now, I'll fix it ..</span>
<span class="comment-copy">I think passing it to <code>fromfile</code> as <code>fromfile(fid,count=n,dtype=precision)</code> should work.</span>
<span class="comment-copy">Yes, that worked, but i ran into trouble for np.str which has an element size = 0, so the code assumes ASCII 8-bit characters (np.uint8).</span>
<span class="comment-copy">Yeah I can see how you'd have to treat that separately. But anyway: a string is not a portable data type. Is it?</span>
