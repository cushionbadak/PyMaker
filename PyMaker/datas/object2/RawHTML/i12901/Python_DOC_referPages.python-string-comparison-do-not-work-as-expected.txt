<div class="post-text" itemprop="text">
<p>My program is like this:</p>
<pre><code>filename=sys.argv[1]
print "filename is default?", (filename is "default")
if (filename is "default"):
  filename="..."
readfile(filename)
</code></pre>
<p>I type python ....py default in the command line. Then the output is:</p>
<p>filename is default? False</p>
<pre><code>IOError:...No such file or directory 'default'.
</code></pre>
<p>I use <code>pdb</code>, and before the if statement excutes, <code>p filename</code> returns: <code>'default'</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Short answer:</strong></p>
<p><code>if filename == "default" :</code></p>
<p><strong>Long answer:</strong></p>
<p><code>is</code> checks for object identity. To check for equality, use <code>==</code>. Check the <a href="https://docs.python.org/3/library/stdtypes.html#comparisons" rel="nofollow">Python documentation on comparisons</a>. In your case:</p>
<p>Note that comparing two string <em>constants</em> with <code>is</code> will actually return true.</p>
<pre><code>def f():
    a = "foo"
    b = "foo"
    print(a is b)   # True, because a and b refer to the same constant
    x = "f" + "oo"
    print(a is x)   # True, because the addition is optimized away
    y = "f"
    z = y + "oo"    #
    print(a is z)   # False, because z is actually a different object
</code></pre>
<p>You can see what happens under the hood by disassembling the CPython byte code:</p>
<pre><code>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(f)
2         0 LOAD_CONST               1 ('foo')
          3 STORE_FAST               0 (a)

3         6 LOAD_CONST               1 ('foo')
          9 STORE_FAST               1 (b)

4        ...

5        28 LOAD_CONST               4 ('foo')
         31 STORE_FAST               2 (x)

6        ...

7        50 LOAD_CONST               2 ('f')
         53 STORE_FAST               3 (y)

8        56 LOAD_FAST                3 (y)
         59 LOAD_CONST               3 ('oo')
         62 BINARY_ADD
         63 STORE_FAST               4 (z)

9        ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>==</code> two compare whether two strings are equal.</p>
<p>Use <code>is</code> to test whether it is <em>the same</em> string.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is what you're looking for:</p>
<p><code>if filename == "default" :</code></p>
<p>The <code>==</code> operator is used for comparison, whilst the <code>is</code> operator tests if two variables point to the <strong>same object</strong>, not if two variables have the same value.</p>
</div>
<span class="comment-copy">see <a href="http://stackoverflow.com/questions/2988017/string-comparison-in-python-is-vs" title="string comparison in python is vs">stackoverflow.com/questions/2988017/â€¦</a></span>
<span class="comment-copy">BTW, I doubt you will <i>ever</i> want to compare string identities using <code>is</code>.</span>
<span class="comment-copy">Hmm, if I try <code>a = "foo"; b = "foo"; print (a is b), (a == b)</code> I get two times <code>True</code>, any ideas why?</span>
<span class="comment-copy">@adrianus to the interpreter, <code>"foo"</code> is a constant. Check out my answer for a more detailed explanation.</span>
<span class="comment-copy">@DanielHepper Aah, cool, thanks! I also just noticed that <code>a = "foo"; b = "foo"; print id(a), id(b)</code> returns the same value two times...</span>
<span class="comment-copy">@adrianus That is an optimization trick. Interpreter is using the same variable for a and b because it "knows" that they are the same. On the other hand, when you say <code>filename=sys.argv[1]</code>, interpreter does not optimize that, because it does not know beforehand what <code>sys.argv[1]</code> would be.</span>
