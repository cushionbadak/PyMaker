<div class="post-text" itemprop="text">
<p>I'm currently writing a little script in python (2.x), and there's a portion of the code that I'd like to improve without knowing how to do so.</p>
<p>I have a <code>list</code> of <code>list</code>s that looks like the following:</p>
<pre><code>my_list = [["abc",1,2,"def"],["ghi",4,5,"klm"],["nop",6,7,"qrs"]]
</code></pre>
<p>I need to get the sum of all the integers at the index <code>1</code> and the sum of all the integers at the index <code>2</code>. To do so, I currently have:</p>
<pre><code>sum1, sum2 = 0, 0
for i in my_list:
  sum1 += i[1]
  sum2 += i[2]
</code></pre>
<p>What could be a more pythonic way to do that? Maybe using <code>reduce</code> and a <code>lambda</code> function or something?</p>
</div>
<div class="post-text" itemprop="text">
<p>A more pythonic way to do that would be using the <code>sum</code> function along with the <code>for ... in ...</code> generator and do all the work in a single line, like this:</p>
<pre><code>sum1, sum2 = sum(x[1] for x in my_list), sum(x[2] for x in my_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The most Pythonic would probably be list comprehensions:</p>
<pre><code>my_list = [["abc",1,2,"def"],["ghi",4,5,"klm"],["nop",6,7,"qrs"]]
</code></pre>
<p>Summations:</p>
<pre><code>sum1 = sum(l[1] for l in my_list)
sum2 = sum(l[2] for l in my_list)
</code></pre>
<p>Which returns:</p>
<pre><code>sum1 = 11
sum2 = 14
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could do <code>sum(x[1] for x in in my_list), sum(x[2] for x in my_list)</code> if you don't mind looping twice.</p>
<p>or <code>reduce(lambda acc, l: (acc[0] + l[1], acc[1] + l[2]), my_list, (0, 0))</code> if you want to do it both at once. This will return a tuple with the sum of [1] on the first element, and [2] on the second</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>zip</code> and list comprehension </p>
<pre><code>&gt;&gt;&gt; lst = [["abc",1,2,"def"],["ghi",4,5,"klm"],["nop",6,7,"qrs"]]
&gt;&gt;&gt; [sum(i) for i in list(zip(*lst))[1:3]]
[11, 14]
</code></pre>
<p>Or use <code>zip</code> and <code>islice</code> class from <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow"><code>itertools</code></a> </p>
<pre><code>&gt;&gt;&gt; from itertools import islice
&gt;&gt;&gt; [sum(i) for i in islice(zip(*lst), 1, 3)]
[11, 14]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a one liner that doesn't use a generator expression. Use <code>zip</code> plus unpacking to transpose the list, then run <code>sum</code> on all the numeric columns using <code>map</code>.</p>
<pre><code>&gt;&gt;&gt; map(sum, zip(*my_list)[1:-1])
[11, 14]
</code></pre>
<p>Unfortunately it's a little wordier in 3.X since you can't slice a <code>zip</code> object.</p>
<pre><code>a,b = map(sum, list(zip(*my_list))[1:-1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>reduce</code> but, since the elements in your sequence are lists, you'll need to set an initial value of <code>0</code>. In Example:</p>
<pre><code>reduce(lambda total, list: total+list[1], my_list, 0)  # integers at index 1
reduce(lambda total, list: total+list[2], my_list, 0)  # integers at index 2
</code></pre>
</div>
<span class="comment-copy">I think your current approach is fine. Readability matters, what you have here is really easy to read.</span>
<span class="comment-copy">This actually is using 2 loops now</span>
