<div class="post-text" itemprop="text">
<p>I have been looking at this code for a while and can not find the problem. Can anyone help?
This is my code:</p>
<pre><code>from tkinter import *
import random
import time

class Game:
    def __init__(self):
        self.tk = Tk()
        self.tk.title("Mr stick man adventures")
        self.tk.resizable(0,0)
        self.tk.wm_attributes("-topmost", 1)
        self.canvas = Canvas(self.tk, width=500, height=500, highlightthickness=0)
        self.canvas.pack()
        self.tk.update()
        self.canvas_height = 500
        self.canvas_width = 500
        self.bg = PhotoImage(file="Background.png")
        w = self.bg.width()
        h = self.bg.height()
        for x in range(0,5):
            for y in range(0,5):
                self.canvas.create_image(x * w, y * h,image=self.bg, anchor='nw')
        self.sprites = []
        self.running = True

    def mainloop(self):
        while 1:
            if self.running == True:
                for sprite in self.sprites:
                    sprite.move()
            self.tk.update_idletasks()
            self.tk.update()
            time.sleep(0.01)

class Coords:
    def __init__(self,x1=0, y1=0, x2=0, y2=0):
        self.x1 = x1
        self.y1 = y1
        self.x2 = x2
        self.y2 = y2

def within_x(co1,co2):
    if co1.x1 &gt; co2.x1 and co1.x1 &lt; co2.x2:
        return True
    elif co1.x2 &gt; co2.x1 and co1.x2 &lt; co2.x2:
        return True
    elif co2.x1 &gt; co1.x1 and co2.x1 &lt; co1.x2:
        return True
    elif co2.x2 &gt; co1.x1 and co2.x2 &lt; co1.x2:
        return True
    else:
        return False

def within_y(co1,co2):
    if (co1.y1 &gt; co2.y1 and co1.y1 &lt; co2.y2) \
            or(co1.y2 &gt; co2.y1 and co1.y2 &lt; co2.y2) \
            or(co2.y1 &gt; co1.y1 and co2.y1 &lt; co1.y2) \
            or(co2.y2 &gt; co1.y1 and co2.y2 &lt; co1.y2):
        return True
    else:
        return False

def collided_left(co1,co2):
    if within_y(co1,co2):
        if co1.x1 &lt;= co2.x2 and co1.x1 &gt;= co2.x1:
            return True
    return False

def collided_right(co1,co2):
    if within_y(co1,co2):
        if co1.x2 &gt;= co2.x1 and co1.x2 &lt;= co2.x2:
            return True
    return False

def collided_top(co1,co2):
    if within_x(co1,co2):
        if co1.y1 &lt;= co2.y2 and co1.y1 &gt;= co2.y1:
            return True
    return False

def collided_bottom(y,co1,co2):
    if within_x(co1,co2):
        y_calc = co1.y2 + y
        if y_calc &gt;= co2.y1 and y_calc &lt;= co2.y2:
            return True
    return False

class Sprite:
    def __init__(self,game):
        self.game = game
        self.endgame = False
        self.coordinates = None

    def move(self):
        pass

    def coords(self):
        return self.coordinates

class PlatformSprite(Sprite):
    def __init__(self, game, photo_image, x, y, width, height):
        Sprite.__init__(self,game)
        self.photo_image = photo_image
        self.image = game.canvas.create_image(x,y,image=self.photo_image,anchor='nw')
        self.coords = Coords(x,y,x + width,y + height)

class StickFigureSprite(Sprite):
    def __init__(self,game):
        Sprite.__init__(self,game)
        self.images_left = [
            PhotoImage(file="l_r.gif"),
            PhotoImage(file="l_r2.gif"),
            PhotoImage(file="l_j.gif")
        ]
        self.images_right = [
            PhotoImage(file="r_r.gif"),
            PhotoImage(file="r_r2.gif"),
            PhotoImage(file="r_j.gif")
        ]
        self.image = game.canvas.create_image(200,470,image=self.images_left[0],anchor='nw')
        self.x = -2
        self.y = 0
        self.current_image = 0
        self.current_image_add = 1
        self.jump_count = 0
        self.last_time = time.time()
        self.coordinates = Coords()
        game.canvas.bind_all("&lt;KeyPress-Left&gt;", self.turn_left)
        game.canvas.bind_all("&lt;KeyPress-Right&gt;", self.turn_right)
        game.canvas.bind_all("&lt;space&gt;", self.jump)

    def turn_left(self, evt):
        if self.y == 0:
            self.x = -2

    def turn_right(self,evt):
        if self.y == 0:
            self.x = 2

    def jump(self, evt):
        if self.y == 0:
            self.y = -4
            self.jump_count = 0

    def animate(self):
        if self.x != 0 and self.y == 0:
            if time.time() - self.last_time &gt; 0.1:
                self.last_time = time.time()
                self.current_image += self.current_image_add
                if self.current_image &gt;= 2:
                    self.current_image_add = -1
                if self.current_image &lt;= 0:
                    self.current_image_add = 1
        if self.x &lt; 0:
            if self.y != 0:
                self.game.canvas.itemconfig(self.image,image=self.images_left[2])
            else:
                self.game.canvas.itemconfig(self.image,image=self.images_left[self.current_image])
        elif self.x &gt; 0:
            if self.y != 0:
                self.game.canvas.itemconfig(self.image,image=self.images_right[2])
            else:
                self.game.canvas.itemconfig(self.image,image=self.images_right[self.current_image])

    def coords(self):
        xy = self.game.canvas.coords(self.image)
        self.coordinates.x1 = xy[0]
        self.coordinates.y1 = xy[1]
        self.coordinates.x2 = xy[0] + 27
        self.coordinates.y2 = xy[1] + 30
        return self.coordinates

    def move(self):
        self.animate()
        if self.y &lt; 0:
            self.jump_count += 1
            if self.jump_count &gt; 20:
                self.y = 4
        if self.y &gt; 0:
            self.jump_count -= 1
        co = self.coords()
        left = True
        right = True
        top = True
        bottom = True
        falling = True
        if self.y &gt; 0 and co.y2 &gt;= self.game.canvas_height:
            self.y = 0
            bottom = False
        elif self.y &lt; 0 and co.y1 &lt;= 0:
            self.y = 0
            top = False
        if self.x &gt; 0 and co.x2 &gt;= self.game.canvas_width:
            self.x = 0
            right = False
        elif self.x &lt; 0 and co.x1 &lt;= 0:
            self.x = 0
            left = False
        for sprite in self.game.sprites:
            if sprite == self:
                continue
            sprite_co = sprite.coords
            if top and self.y &lt; 0 and collided_top(co,sprite_co):
                self.y = -self.y
                top = False
            if bottom and self.y &gt; 0 and collided_bottom(self.y,co,sprite_co):
                self.y = sprite_co.y1 - co.y2
                if self.y &lt; 0:
                    self.y = 0
                bottom = False
                top = False
            if bottom and falling and self.y == 0 and co.y2 &lt; self.game.canvas_height and collided_bottom(1,co,sprite_co):
                falling = False
            if left and self.x &lt; 0 and collided_left(co,sprite_co):
                self.x = 0
                left = False
                if sprite.endgame:
                    self.game.running = False
            if right and self.x &gt; 0 and collided_right(co,sprite_co):
                self.x = 0
                right = False
                if sprite.endgame:
                    self.game.running = False
        if falling and bottom and self.y == 0 and co.y2 &lt; self.game.canvas_height:
            self.y = 4
        self.game.canvas.move(self.image,self.x,self.y)

class DoorSprite(Sprite):
    def __init__(self,game,photo_image,x,y,width,height):
        Sprite.__init__(self,game)
        self.photo_image = photo_image
        self.image = game.canvas.create_image(x,y,image=self.photo_image,anchor='nw')
        self.coordinates = Coords(x,y, x + (width/2), y + height)
        self.endgame=True

g = Game()
platform1 = PlatformSprite(g, PhotoImage(file="platform1.png"),0,480,100,10)
platform2 = PlatformSprite(g, PhotoImage(file="platform1.png"),150,440,100,10)
platform3 = PlatformSprite(g, PhotoImage(file="platform1.png"),300, 400, 100, 10)
platform4 = PlatformSprite(g, PhotoImage(file="platform1.png"),300, 160, 100, 10)
platform5 = PlatformSprite(g, PhotoImage(file="platform2.png"),175, 350, 66, 10)
platform6 = PlatformSprite(g, PhotoImage(file="platform2.png"),50, 300, 66, 10)
platform7 = PlatformSprite(g, PhotoImage(file="platform2.png"),170, 120, 66, 10)
platform8 = PlatformSprite(g, PhotoImage(file="platform2.png"),45, 60, 66, 10)
platform9 = PlatformSprite(g, PhotoImage(file="platform1.png"),170, 250, 37, 10)
platform10 = PlatformSprite(g, PhotoImage(file="platform1.png"),230, 200, 37, 10)
g.sprites.append(platform1)
g.sprites.append(platform2)
g.sprites.append(platform3)
g.sprites.append(platform4)
g.sprites.append(platform5)
g.sprites.append(platform6)
g.sprites.append(platform7)
g.sprites.append(platform8)
g.sprites.append(platform9)
g.sprites.append(platform10)
door = DoorSprite(g,PhotoImage(file="door1.gif"),45,30,40,35)
g.sprites.append(door)
sf = StickFigureSprite(g)
g.sprites.append(sf)
g.mainloop()
</code></pre>
<p>When I run this i this error:</p>
<pre><code>Traceback (most recent call last):
  File "C:\Users\OWNER\AppData\Local\Programs\Python\Python36-32\Mr_stick_man_adventures.py", line 260, in &lt;module&gt;
    g.mainloop()
  File "C:\Users\OWNER\AppData\Local\Programs\Python\Python36-32\Mr_stick_man_adventures.py", line 29, in mainloop
    sprite.move()
  File "C:\Users\OWNER\AppData\Local\Programs\Python\Python36-32\Mr_stick_man_adventures.py", line 213, in move
    if left and self.x &lt; 0 and collided_left(co,sprite_co):
  File "C:\Users\OWNER\AppData\Local\Programs\Python\Python36-32\Mr_stick_man_adventures.py", line 63, in collided_left
    if within_y(co1,co2):
  File "C:\Users\OWNER\AppData\Local\Programs\Python\Python36-32\Mr_stick_man_adventures.py", line 54, in within_y
    if (co1.y1 &gt; co2.y1 and co1.y1 &lt; co2.y2) \
AttributeError: 'function' object has no attribute 'y1'
</code></pre>
<p>Please help</p>
</div>
<div class="post-text" itemprop="text">
<p>Its because you have</p>
<p><code>sprite_co = sprite.coords</code></p>
<p>which means <code>sprite_co</code> references a function rather than the function's return value. In subsequent function calls you try to access attribute <code>y1</code> but since <code>sprite_co</code> is a function (rather than the return of function call as I believe was intended) it has no <code>y1</code> attribute. Replace this line with </p>
<p><code>sprite_co = sprite.coords()</code></p>
</div>
<span class="comment-copy">Why are you looping over the sprites in both in <code>mainloop()</code> and <code>move()</code>?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">Catch the error</a> and print relevant things/data in the except suite - work backwards from there.</span>
<span class="comment-copy">Did you write all that?</span>
<span class="comment-copy">You should go back and add <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">docstrings</a> to all your functions and methods - it might help you be able to navigate all that when there is a probllem.  I did notice that you have a Sprite class that defines a <code>coords</code> attribute and then you have two classes that inherit from Sprite that both override  <code>coords</code> and define a <code>coordinates</code> attribute- maybe you should revisit that and clean it up a bit.</span>
<span class="comment-copy">Sometimes the process of making a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> helps you find the problem.</span>
<span class="comment-copy">If I do that if gives me another error:</span>
<span class="comment-copy">A different error? or the same one?</span>
<span class="comment-copy">@That_one_guy well, what's the error?</span>
<span class="comment-copy">It was: TypeError: 'Coords' object is not callable</span>
<span class="comment-copy">Could it also be then because you're loading a <code>Coords</code> object into the <code>coords</code> field with <code>self.coords = Coords(x,y,x + width,y + height)</code>? This could be a second error since it seems that <code>sprite.coords</code> should be a function not an object?</span>
