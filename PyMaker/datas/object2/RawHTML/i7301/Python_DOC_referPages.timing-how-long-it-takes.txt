<div class="post-text" itemprop="text">
<p>i'm making a simple code about divisors and I'd like to have a feedback on how long it takes for the computer to give me an answer.</p>
<p>Here's my code:</p>
<pre><code>num=int(input('Give me a number'))
listRange=list(range(1,num+1))
divisorList=[]
for number in listRange:
    if num%number==0:
        divisorList.append(number)
print(divisorList)
</code></pre>
<p>As you can see, the bigger the number, more time the computer takes to process all the divisors, so I wanna know how much time it spends whilst doing that.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the time module to a timestamp before the loop and another after and print the difference.</p>
<pre><code>import time

num=int(input('Give me a number'))
listRange=list(range(1,num+1))
divisorList=[]
start = time.time() # use time.clock() if on Windows
for number in listRange:
        if num%number==0:
            divisorList.append(number)
end = time.time() # use time.clock() if on Windows
print(divisorList)
print("Time taken: {:06.5f}secs".format(end-start)) # Seconds
print("Time taken: {:10.5f}ms".format((end-start)*1000) # Miliseconds
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to find the time in seconds:</p>
<pre><code>from time import time
start = time()
... # code
print(time() - start)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use the <code>timeit</code> module:</p>
<pre><code>import timeit

num=100000
listRange=list(range(1,num+1))

def function():
    divisorList=[]
    for number in listRange:
        if num%number==0:
            divisorList.append(number)

print(timeit.timeit(function, number=1))
# 0.01269146570884061
</code></pre>
</div>
<span class="comment-copy"><i>O(n)</i> with <i>n</i> the value entered. But you can do this better: in <i>O(sqrt n)</i>.</span>
<span class="comment-copy">Look at <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer">timeit.py</a> or the time module.</span>
<span class="comment-copy">You could do a prime factorization of the number then generate all combinations of factors.</span>
<span class="comment-copy">@KindStranger It's far fewer than half; it's sqrt(n).</span>
<span class="comment-copy">And what if i'm looking for the time in miliseconds(ms)?</span>
<span class="comment-copy">@LFSS <code>time.time()</code> returns a <code>float</code> so simply multiply the answer by 1000</span>
