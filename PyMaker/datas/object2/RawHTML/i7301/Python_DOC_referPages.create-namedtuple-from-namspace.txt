<div class="post-text" itemprop="text">
<p>How do I initialize a <a href="https://docs.python.org/2/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>namedtuple</code></a> from a <a href="https://docs.python.org/2/library/argparse.html#argparse.Namespace" rel="nofollow noreferrer"><code>Namespace</code></a>?</p>
<pre><code>import collections
import argparse

nt=collections.namedtuple("nt",["foo","bar"]) # _NOT_ "baz"!
parser = argparse.ArgumentParser()
parser.add_argument('--foo')
parser.add_argument('--bar')
parser.add_argument('--baz')
args = parser.parse_args(...)
</code></pre>
<p><strong>What do I do if only <em>some</em> script arguments go into the namedtuple?</strong></p>
<p>Here is what I came up with:</p>
<pre><code>nt_param=nt(**{f:getattr(args,f,None) for f in nt._fields})
</code></pre>
<p>is there a more pythonic approach?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you don't care about the actual type of the namedtuple, you can create an "anonymous" namedtuple representing your <code>Namespace</code>.</p>
<p>Here's an approach I've used before:</p>
<pre><code>def auto_namedtuple(classname='auto_namedtuple', **kwargs):
    return collections.namedtuple(classname, tuple(kwargs))(**kwargs)
</code></pre>
<p>Usage in your case:</p>
<pre><code>nt = auto_namedtuple(**vars(args))
</code></pre>
</div>
<span class="comment-copy">"If all arguments of the program were in nt, I could have passed namespace=nt() to parser.parse_args()." except you couldn't because namedtuples are <b>immutable</b></span>
<span class="comment-copy">@AnthonySottile: thanks, removed.</span>
<span class="comment-copy">A small improvement is to remove the <code>None</code> in your call to <code>getattr</code>. Since the <code>Namespace</code> object already sets any undefined command-line arguments to <code>None</code>, you don't have to explicitly return <code>None</code> yourself.</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/34348568/can-i-convert-a-namespace-object-from-mutable-to-immutable" title="can i convert a namespace object from mutable to immutable">stackoverflow.com/questions/34348568/…</a> - asks about converting a namespace to immutable.  Besides copying to a <code>namedtuple</code> I suggest a custom <code>Namespace</code> class.  I also discuss <code>namedtuple</code> in <a href="https://stackoverflow.com/questions/42279063/python-typehints-for-argparse-namespace-objects" title="python typehints for argparse namespace objects">stackoverflow.com/questions/42279063/…</a></span>
<span class="comment-copy"><a href="https://pypi.python.org/pypi/recordtype" rel="nofollow noreferrer">pypi.python.org/pypi/recordtype</a> is a mutable alternative to <code>namedtype</code>.</span>
<span class="comment-copy">It is important that the <code>namedtuple</code> contains only the specific fields.</span>
<span class="comment-copy">What you're doing seems fine, are you have a specific <i>problem</i>?</span>
<span class="comment-copy">Not really, I am just trying to see if I am doing something stupid. Thanks for your help!</span>
<span class="comment-copy">Note that while <code>_fields</code> has a leading underscore, it is not actually a "private" attribute, the stdlib does this <a href="https://docs.python.org/3/library/collections.html#namedtuple-factory-function-for-tuples-with-named-fields" rel="nofollow noreferrer">to avoid conflicting with user namespaces</a></span>
