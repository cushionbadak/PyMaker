<div class="post-text" itemprop="text">
<p>I found this practice today:</p>
<p>Detect whether a check number is valid or not. The check number must have 10 digits, can not have 2 or more zeros followed, nor three or more digits other than zero followed</p>
<p>I've able to complete the first part with this code:</p>
<pre><code>num_chk=input('Enter chk number: ')

if (len(num_chk) == 10):
    print('valid')
else:
    print('not valid')
</code></pre>
<p>any thoughts on how to create the logic to check if the check number has 2 consecutive 0.</p>
<p>thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You can check if the number has two or more zeroes, or three or more digits by using built-in function <code>any()</code>, for example:</p>
<pre><code>if len(num) == 10:
    if any((x in num) for x in [str(i) + str(i) + str(i) for i in range(1, 10)]):
        print('invalid')

    elif '00' in num:
        print('invalid')

    else:
        print('valid')
else:
    print('invalid')
</code></pre>
<p><code>any()</code> returns <code>True</code> if any of the supplied expressions is <code>True</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Let's say your check number is the variable <code>check_number</code> and it is 12300.</p>
<pre><code>check_number = 12300

convert it to a string:

str_check_num = str(check_number)
# str_check_num now equals "12300" a a string
has_00 = "00" in str_check_num
# Returns True if "00" is in str_check_num. in this case it is.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>num_chk</code> is type <code>str</code>, which gives you access to:</p>
<p><code>a in b</code> - return True if string a is in string b, e.g. <code>'00' in num_chk</code></p>
<p>To check whether the trailing part is some number of zeroes, you can try <code>endswith</code> or look into regular expressions (<code>re</code> package in Python) if you don't know how many zeroes it might be.</p>
</div>
<div class="post-text" itemprop="text">
<p>A solution with <strong><a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer"><code>regex</code></a></strong> for detecting the others condition, as suggested by @Riaz, should be definitely better than what I'm about to suggest, but for the sake of completeness, one can also do the following using <strong><a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a></strong>, <code>grouped_L</code> returns a list of tuples with a number followed by it's number of consecutive duplicates <a href="https://stackoverflow.com/a/6352456/5103802">(Reference)</a>:</p>
<pre><code>from itertools import groupby

num = 1234567890  # Using input as an int
L = [int(x) for x in str(num)]
grouped_L = [(k, sum(1 for i in g)) for k,g in groupby(L)]

validity = True
if len(str(num)) == 10:
    for i in grouped_L:
        if (i[0]!=0 and i[1]&gt;2):
            validity = False
            break
        elif (i[0]==0 and i[1]&gt;1):
            validity = False
            break
        else:
            validity = True
else:
    validity = False

if validity:
    print('valid')
else:
    print('not valid')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>something like :</p>
<pre><code>&gt;&gt;&gt; def check(num):
...     l=[str(i)+str(i) for i in range(10)]
...     l[0]='000'
...     if len(num)!=10: 
...             return "not valid"
...     else:
...             for i in l:
...                     if i in num:
...                             return "not valid"
...     return "valid"
... 
&gt;&gt;&gt; n="1234567890"
&gt;&gt;&gt; check(n)
'valid'
&gt;&gt;&gt; n="1234500090"
&gt;&gt;&gt; check(n)
'not valid'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I understand the question ("two or more zeroes followed" means "two or more consecutive zeroes"?), the number must have exactly 10 digits.  It must not have two (or more) consecutive zeroes.  It must not have three (or more) consecutive digits other than zero.  (Three consecutive zeroes implies two consecutive zeroes, so that does constitute an invalid number because of the 2nd rule--we do not <em>need</em> to exclude zero from the last test).</p>
<p>That gives that code</p>
<pre><code>def validate(s):
  # 10 characters
  if len(s) != 10:
    return False
  # all digits
  for c in s:
    if not c.isdigit():
      return False
  # no two or more consecutive '0'
  for a,b in zip(s[0:9],s[1:10]):
    if a == b == '0':
      return False
  # no three or more consecutive digits
  for a,b,c in zip(s[0:8],s[1:9],s[2:10]):
    if (a == b == c) and a.isdigit():
      return False
  #
  return True

TESTS = (
  '12345678x0',  # one character not digit
  '123456789',   # not 10 characters
  '1234567890',  # valid
  '1230067890',  # two consecutive zeroes
  '1224567890',  # valid
  '1114567890',  # three consecutive digits (other than zero)
)
for t in TESTS:
  print( t, 'valid' if validate(t) else 'not valid' )

n = raw_input("Enter number: ")
print( n, 'valid' if validate(n) else 'not valid' )
</code></pre>
</div>
<span class="comment-copy">You can use the <code>in</code> keyword to see if a substring is in a string. Alternatively, see the documentation for <code>str.find</code>.</span>
<span class="comment-copy">User is asking for two or more zeroes anywhere in the number, not only ending with</span>
<span class="comment-copy">@Vin√≠ciusAguiar Thanks, edited.</span>
<span class="comment-copy">Oh, nice, just a <code>(x in num)</code> and the answer now suits the question, I thought it would need a lot more, otherwise I wouldn't even post my solution hahah</span>
<span class="comment-copy">thanks for helping me with this one</span>
<span class="comment-copy">If you read his question, it is already in a string.</span>
<span class="comment-copy">I agree that his code appears to have it as a string(<code>len()</code>) but it doesn't say that. My answer still works.</span>
<span class="comment-copy"><code>input()</code> returns a string.</span>
<span class="comment-copy">haha, somehow I managed to completely gloss over that. Still, hardly relevant to the answer.</span>
