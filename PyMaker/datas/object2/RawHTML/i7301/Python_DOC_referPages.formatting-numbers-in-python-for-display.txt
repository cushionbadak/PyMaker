<div class="post-text" itemprop="text">
<p>I am trying to output a longer integer in a more readable manner. How can I format it as a string with spaces after a certain number of digits?</p>
<p>For example, I would like <code>12345678</code> to be output as <code>1234 56 78</code></p>
</div>
<div class="post-text" itemprop="text">
<p>One option is use <code>re</code> module, match the number with regex and reformat it:</p>
<pre><code>import re
re.sub(r"(\d{4})(\d{2})(\d{2})", r"\1 \2 \3", "12345678")
# '1234 56 78'
</code></pre>
<p>Or for readability you might want to format it with a thousand separator:</p>
<pre><code>"{:,d}".format(12345678)
# '12,345,678'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also do this using a combination of <code>itertools</code> and <code>str.join()</code>:</p>
<pre><code>&gt;&gt;&gt; from itertools import zip_longest
&gt;&gt;&gt; 
&gt;&gt;&gt; def grouper(iterable, n, fillvalue=None):
    args = [iter(iterable)] * n
    return zip_longest(*args, fillvalue=fillvalue)

&gt;&gt;&gt; def pretty_print(start, number, delim=' '):
    number = str(number)
    end = delim.join(''.join(g) for g in grouper(number[start:], 2, ''))
    return number[:start] + delim  + end

&gt;&gt;&gt; number = 12345678
&gt;&gt;&gt; pretty_print(4, number, ' ')
'1234 56 78'
&gt;&gt;&gt; pretty_print(4, number, ',')
'1234,56,78'
&gt;&gt;&gt; pretty_print(4, number, '|')
'1234|56|78'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could do something like this:</p>
<pre><code>&gt;&gt;&gt; from itertools import islice

&gt;&gt;&gt; def solve(num, n=4):
...     s = str(num)
...     fmt = [n] + [2] * ((len(s) - n) // 2);
...     it = iter(s)
...     return ' '.join(''.join(islice(it, x)) for x in fmt)

&gt;&gt;&gt; solve(12345678)
'1234 56 78'

&gt;&gt;&gt; solve(1234567890)
'1234 56 78 90'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the number is always going to be 8 digits, you need do nothing more complicated than use a simple <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow noreferrer">string formatting spec</a>: </p>
<pre><code>&gt;&gt;&gt; '{}{}{}{} {}{} {}{}'.format(*str(12345678))
1234 56 78
</code></pre>
<p>If you could have, say, any even number of digits of length 2 or greater, and you want to have the first up-to 4 digits grouped, and then the following digit pairs grouped after that, you can still make this work pretty easily:</p>
<pre><code>&gt;&gt;&gt; digits8 = str(12345678)
&gt;&gt;&gt; ('{}{}' + ' '.join('{}{}' for _ in range(len(digits)//2-1))).format(*digits)
1234 56 78
&gt;&gt;&gt; digits6 = str(123456)
&gt;&gt;&gt; ('{}{}' + ' '.join('{}{}' for _ in range(len(digits)//2-1))).format(*digits)
1234 56
&gt;&gt;&gt; digits4 = str(1234)
&gt;&gt;&gt; ('{}{}' + ' '.join('{}{}' for _ in range(len(digits)//2-1))).format(*digits)
1234
&gt;&gt;&gt; digits2 = str(12)
&gt;&gt;&gt; ('{}{}' + ' '.join('{}{}' for _ in range(len(digits)//2-1))).format(*digits)
12
</code></pre>
<p>As a function:</p>
<pre><code>def special_format(number):
    digits = str(int(number))
    if len(digits)%2 != 0:
        raise ValueError('Number must have an even number of digits.')
    return ('{}{}' + ' '.join('{}{}' for _ in range(len(digits)//2-1))).format(*digits)
</code></pre>
<p>Now you can just do this: </p>
<pre><code>&gt;&gt;&gt; special_format(12345678)
'1234 56 78'
&gt;&gt;&gt; special_format(123456)
'1234 56'
&gt;&gt;&gt; special_format(12345678123456)
'1234 56 78 12 34 56'
&gt;&gt;&gt; special_format(12)
'12'
</code></pre>
</div>
<span class="comment-copy">How is <code>1234 56 78</code> more readable than <code>12345678</code>?</span>
<span class="comment-copy">do you mean 12 34 56 78?</span>
<span class="comment-copy">Not sure what would be OP's expected output for <code>1234567</code> will be but this return <code>1234567</code> instead of <code>1234 56 7</code>.</span>
<span class="comment-copy">@AshwiniChaudhary The regex option is pretty restricted, and I can't come up with one that is general without knowing the number of digits and format requirement beforehand. So I guess this is just an option at the moment.</span>
<span class="comment-copy">This answer does exactly what the OP asks in an uncomplicated way. I am mystified as to why someone would downvote it.</span>
