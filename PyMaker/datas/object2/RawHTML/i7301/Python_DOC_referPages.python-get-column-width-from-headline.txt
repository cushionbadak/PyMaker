<div class="post-text" itemprop="text">
<p>I have a table like output and I would like to get the input from each line separated by column.
Unfortunately the column does not always have the same width and there can be whitespaces inside the column.
But the column always starts at the position of the description in the headline and ends 1 field before the next headline.
My idea was to get the position of the words in the headline and then split the line with something like</p>
<p>var = line[firstword:secondword-1]
var2 = line[secodword:thirdword-1]</p>
<pre><code>Port      Name           Status    Vlan      Duplex  Speed   Type
Eth1/1    Server1        connected 1         full    10G     10Gbase-SR 
Eth1/2    Server 2       notconnec 1234      full    10G     SFP-1000BAS
Eth1/3    That is poss   err-disab trunk     full    10G     10Gbase-SR
</code></pre>
<p>How can I get this positions?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you know the column headers, you can do something like this (assuming variable <code>lines</code> contains the table:</p>
<pre><code>indices = [lines[0].index(header) for header in ["Port", "Name", "Status", "Vlan", "Duplex", "Speed", "Type"]]
</code></pre>
<p>If you don't, then assuming the headers don't contain whitespace (similarly to as Karmanya Aggarwal already suggested):</p>
<pre><code>indices = [lines[0].index(header) for header in [w for w in lines[0].split(" ") if w != ""]]
</code></pre>
<p>Or using a regex: <code>indices = [lines[0].index(header) for header in [w for w in re.split(r"\s+", lines[0])]]</code></p>
<p>Now you can get the column values using the indices:</p>
<pre><code>lines[1][indices[1]:indices[2]].strip()
# -&gt; Server1
</code></pre>
<p>Of course, if the table is  actually tab-separated, you'll want to use the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">csv module</a> instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are many ways to do this.  Note that this becomes difficult in general when the header words have spaces (you begin to have to look for double-spaces as splits, or even at the contents of the rows rather than just the header).  For the example you gave, a simple regular expression can give you the results:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; header = 'Port      Name           Status    Vlan      Duplex  Speed   Type'
&gt;&gt;&gt; for x in re.finditer('\w+', header): print x.start(), x.group()
... 
0 Port
10 Name
25 Status
35 Vlan
45 Duplex
53 Speed
61 Type
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Are the column titles constant? If so, why not just read the first line and figure out the starting position of each field from it?</p>
<p>Something like this?</p>
<pre><code>with open("testfile.txt","r") as f:
 foo = f.readline()
 if foo:
    titles = [foo.index(x[0]) for x in foo.split(" ") if x != ""]
    print(titles)
    print(foo)
</code></pre>
</div>
<span class="comment-copy">I would like to use the code even for output with different column headers as this is a reoccurring style of output on cisco switches.</span>
<span class="comment-copy">Can we assume that there is no whitespace in the column names?</span>
<span class="comment-copy">yes that will be the case</span>
<span class="comment-copy">Thanks it works. The header words don't have spaces. At least I found no output where this is the case.</span>
<span class="comment-copy">Is there a chance to mark two answers as the solution? As you and evsheino gave me both a working answer.</span>
<span class="comment-copy">Stackoverflow doesn't allow multiple accepted answers, though on popular questions there may be several high-rated answers, which is functionally the same thing</span>
<span class="comment-copy">That's exactly what I want to do but how do I get the starting position of each word of the column titles.</span>
<span class="comment-copy">Edited to give you a code sample, does this work?</span>
<span class="comment-copy">This won't do what you want.  The use of <code>index</code> is incorrect here, as you can see if you run it against the example: <code>[0, 10, 25, 35, 45, 25, 61]</code>.  You search for the first letter anywhere in the string, and iterate through many times</span>
<span class="comment-copy">I tried it with a different example and get a bit error output as well. [0, 17, 36, 46, 56, 36, 72]</span>
