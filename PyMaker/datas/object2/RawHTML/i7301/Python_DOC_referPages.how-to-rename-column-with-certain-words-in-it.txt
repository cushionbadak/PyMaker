<div class="post-text" itemprop="text">
<p>Noob in python here. Forgive me if I'm asking stupid questions (which I hope I'm not). </p>
<p>I have a dataframe 1 that look like this:</p>
<pre><code>Running rate ($/hour)        Eating rate (lb/hour)     Age
50                          20                         50 
30                          10                         40
</code></pre>
<p>and another dataframe 2 that look like this:</p>
<pre><code>Running rate (km/hour)     Eating rate (kg/hour)      Age
5                          23                         50 
3                          18                         40
</code></pre>
<p>Now I want to:</p>
<ol>
<li>Loop through all the dataframes (which i have achieved so)

<ol start="2">
<li>replace all the "(XX/hour)" to 'per hour'. </li>
</ol></li>
</ol>
<p>So basically, regardless whether it's "lb/hour" or "km/hour" or "kg/hour", I want them to be changed to "per hour", so the two dataframes should look like the following:</p>
<p>dataframe 1 desired output:</p>
<pre><code>Running rate per hour       Eating rate per hour       Age
50                          20                         50 
30                          10                         40
</code></pre>
<p>dataframe 2 desired output:</p>
<pre><code>Running rate per hour      Eating rate per hour       Age
5                          23                         50 
3                          18                         40
</code></pre>
<p>I've looked into many posts and tried using </p>
<pre><code>&gt; df.rename(columns={'a':'b'})
</code></pre>
<p>, but this method only changes column named 'a' to name 'b', and I don't know how to incorporate the Regex version into it. </p>
<p>Any help is appreciated! </p>
</div>
<div class="post-text" itemprop="text">
<p>This should work:</p>
<pre><code>df.columns = [re.sub('\(.+/(.+)\)', r'per \1', c) for c in df.columns]
</code></pre>
<p>Here <code>df</code> is a <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html" rel="nofollow noreferrer">DataFrame</a>, and <code>re</code> is the <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">regular expression module</a>.</p>
<hr/>
<p><strong>Update:</strong> Clarification on the <a href="https://docs.python.org/3/howto/regex.html#regex-howto" rel="nofollow noreferrer">regular expression</a> used.</p>
<p>I actually did a more general form than needed here. The simplest regex for the OP would actually be</p>
<pre><code>[re.sub('\(.+/hour\)', 'per hour', c) for c in ['A (a/hour)', 'B (b/hour)', 'Age']]
</code></pre>
<p>The regex I used was to allow for a general denominator. For example, the simpler regex</p>
<pre><code>[re.sub('\(.+/hour\)', 'per hour', c) for c in ['A (a/hour)', 'B (b/day)', 'Age']]
</code></pre>
<p>gives</p>
<pre><code>['A per hour', 'B (b/day)', 'Age']
</code></pre>
<p>But the more general regex</p>
<pre><code>[re.sub('\(.+/(.+)\)', r'per \1', c) for c in ['A (a/hour)', 'B (b/day)', 'Age']]
</code></pre>
<p>gives</p>
<pre><code>['A per hour', 'B per day', 'Age']
</code></pre>
<p>The change from <code>hour</code> to <code>(.+)</code> in the pattern <a href="https://docs.python.org/3/howto/regex.html#grouping" rel="nofollow noreferrer"><em>captures</em></a> an arbitrary word, rather than just recognizing <code>hour</code>. The change from <code>per hour</code> to <code>per \1</code> in the substitution puts that captured word (group 1 in the pattern), rather than just <code>hour</code>. (The <a href="https://docs.python.org/3/reference/lexical_analysis.html#literals" rel="nofollow noreferrer"><code>r</code></a> prefacing the string just means the <code>\</code> is interpreted literally, rather than as an escape.)</p>
</div>
<span class="comment-copy">You can get all the column names with <code>df.columns</code>.  You can then loop through all the names and modify them.  You might try the <code>split</code> method to split on the <code>/</code>, and keep only the first term.  After you have new versions of all the columns, you can use df.rename(dict(zip(columns, newColumns)), inplace=True)</span>
<span class="comment-copy">hi thank you! can you be a bit more specific on what '(.+/(.+))' is doing? and why use 'per \1'?</span>
<span class="comment-copy">I misread, and so made a more general regex: It takes "(a/b)" to "per b". The ".+" recognizes a word of 1 or more characters (until the "/" for a, or the ")" for b). The first one (a) is discarded, and the second (b) is captured as group 1, then put back in after the "per".</span>
<span class="comment-copy">doesnt work :( the error keeps occuring: TypeError: Could not compare ['\(.+/(.+)\)'] with block values</span>
<span class="comment-copy">So it will work also for "per day" or "per mile" or whatever denominator. Symbols are not a problem.</span>
<span class="comment-copy">I tried it, it doesnt work :(  what could be the problem?</span>
