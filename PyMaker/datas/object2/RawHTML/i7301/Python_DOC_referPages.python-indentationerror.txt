<div class="post-text" itemprop="text">
<p>I need help in my code, I don't know why I'm getting <em>'IndentationError:unexpected unindent'</em> in the line 10 (def plus(self, v):), someone could help me?</p>
<pre><code>class Vector(object):

def __init__(self, coordinates):
    try:
        if not coordinates:
            raise ValueError
        self.coordinates = tuple(coordinates)
        self.dimension = len(coordinates)

def plus(self, v):
    new_coordinates = [x + y for x, y in zip(self.coordinates, v.coordinates)]
    return Vector(new_coordinates)

def __str__(self):
    return 'Vector: {}'.format(self.coordinates)


def __eq__(self, v):
    return self.coordinates == v.coordinates

v = Vector([8.218, -9.341])
w = Vector([-1,129, 2.111])
print (v.plus(w))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>class Vector(object):

    def __init__(self, coordinates):
        try:
            if not coordinates:
                raise ValueError
            self.coordinates = tuple(coordinates)
            self.dimension = len(coordinates)
        except:
            pass #TODO domething here

    def plus(self, v):
        new_coordinates = [x + y for x, y in zip(self.coordinates, v.coordinates)]
        return Vector(new_coordinates)

    def __str__(self):
        return 'Vector: {}'.format(self.coordinates)


    def __eq__(self, v):
        return self.coordinates == v.coordinates

v = Vector([8.218, -9.341])
w = Vector([-1,129, 2.111])
print (v.plus(w))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In your <code>__init__</code> function, you are missing an <code>except</code> block. If you do not include this, your <code>try</code> statement is essentially useless. Make sure to add the <code>except</code> block to handle your <code>ValueError</code>!</p>
</div>
<div class="post-text" itemprop="text">
<p>The error is coming from when you are calling <code>try</code> what you need to do is add and <code>except</code> to it like such:</p>
<pre><code>try:
    if not coordinates:
            raise ValueError
        self.coordinates = tuple(coordinates)
        self.dimension = len(coordinates)
except:
    # do something here to handle error
</code></pre>
<blockquote>
<p>The try and except concept means that you are trying to perform an action in python but if an error occurs within the <code>try</code> scope then whatever is in the <code>except</code> scope will run.</p>
</blockquote>
<p>Hope this helps :)</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm gonna take a guess and say the code should look like this:</p>
<pre><code>class Vector(object):
    def __init__(self, coordinates):
        try:
            if not coordinates:
                raise ValueError
            self.coordinates = tuple(coordinates)
            self.dimension = len(coordinates)
        except ValueError as e:
            pass
            # Code here?#

    def plus(self, v):
        new_coordinates = [x + y for x, y in zip(self.coordinates, v.coordinates)]
        return Vector(new_coordinates)

    def __str__(self):
        return 'Vector: {}'.format(self.coordinates)


    def __eq__(self, v):
        return self.coordinates == v.coordinates

if __name__ == '__main__':
    v = Vector([8.218, -9.341])
    w = Vector([-1,129, 2.111])
    print (v.plus(w))
</code></pre>
<p>The indentation in the code you provided was indeed wrong but i think the interpreter was expecting an 'except' statement(here just shown to pass but you should make it do something)</p>
</div>
<div class="post-text" itemprop="text">
<p>See the <a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">documentation on exceptions</a>.</p>
<pre><code>class Vector(object):
    def __init__(self, coordinates):
        # try: # every try must be paired with an 'except'
        if not coordinates:
            raise ValueError
        self.coordinates = tuple(coordinates)
        self.dimension = len(coordinates)

    def plus(self, v):
        new_coordinates = [x + y for x, y in zip(self.coordinates, v.coordinates)]
        return Vector(new_coordinates)

    def __str__(self):
        return 'Vector: {}'.format(self.coordinates)


    def __eq__(self, v):
        return self.coordinates == v.coordinates

v = Vector([8.218, -9.341])
w = Vector([-1,129, 2.111])
print (v.plus(w))
</code></pre>
</div>
<span class="comment-copy">it'd help if you had copy/pasted it with the same indentation you have</span>
<span class="comment-copy">Your <code>try</code> has no <code>except</code>. Why does it exist?</span>
<span class="comment-copy">Are those methods supposed to be in the class body?</span>
<span class="comment-copy">And why are you excluding 0-dimensional vectors?</span>
<span class="comment-copy">Thanks the help, It worked.</span>
<span class="comment-copy">Thanks the help</span>
<span class="comment-copy">Thanks the help.</span>
<span class="comment-copy">Thanks the help.</span>
