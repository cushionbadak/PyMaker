<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/8701500/python-class-instance-variables-and-class-variables">python class instance variables and class variables</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/1680528/how-to-avoid-having-class-data-shared-among-instances">How to avoid having class data shared among instances?</a>
<span class="question-originals-answer-count">
                    8 answers
                </span>
</li>
</ul>
</div>
<p>The following code troubles me:-</p>
<pre><code>class mytest:
    name="test1"
    tricks=list()
    def __init__(self,name):
        self.name=name
        #self.tricks=[name]
        self.tricks.append(name)

t1=mytest("hello world")
t2=mytest("bye world")
print t1.name,t2.name
print t1.tricks,t2.tricks
</code></pre>
<p>The output is:- </p>
<pre><code>hello world bye world
['hello world', 'bye world'] ['hello world', 'bye world']
</code></pre>
<p>meaning that the list <code>tricks</code> is shared by the two instances t1 and t2, which has been explained in the section 9.3.5 of <a href="https://docs.python.org/3/tutorial/classes.html" rel="noreferrer">https://docs.python.org/3/tutorial/classes.html</a> </p>
<p>However, if I execute the following code:-</p>
<pre><code>class mytest:
    name="test1"
    tricks=list()
    def __init__(self,name):
        self.name=name
        self.tricks=[name]
        self.tricks.append(name)

t1=mytest("hello world")
t2=mytest("bye world")
x=t1.tricks
if type(x) is list:
    print 'a list'
elif type(x) is tuple:
    print 'a tuple'
else:
    print 'neither a tuple or a list'
print t1.name,t2.name
print t1.tricks,t2.tricks
</code></pre>
<p>The output is the following:-</p>
<pre><code>a list
hello world bye world
['hello world', 'hello world'] ['bye world', 'bye world']
</code></pre>
<p>Now it seems that the list <code>tricks</code> is no longer shared by those two instances t1 and t2. 
My question is, what are the mechanics here? </p>
</div>
<div class="post-text" itemprop="text">
<p>The difference is that in your second example you are creating a new list, self.tricks, as an attribute of the object:</p>
<pre><code>def __init__(self,name):
    self.name=name
    self.tricks=[name]    # &lt;-- this is creating the new attribute for the object
    self.tricks.append(name)
</code></pre>
<p>The first example works because of Python's way of resolving the names: If self.tricks cannot be found in the object (because it hasn't been created), then it tries to find it as a member of the class. Since <em>tricks</em> is there, then you can access it.</p>
<p>It may become clear to you if you try to use mytest.tricks in your second example:</p>
<pre><code>def __init__(self,name):
    self.name=name
    mytest.tricks=[name]    # &lt;-- this is accesing the class attribute instead
    self.tricks.append(name)
</code></pre>
<p>That will output what you are actually expecting.</p>
</div>
<div class="post-text" itemprop="text">
<p>In the first case, you didn't create a <code>tricks</code> attribute on the object scope, so Python used the one from the class; in the second case, you created a new list and associated it with the object itself, so Python used that.</p>
<p>For a way more thorough explanation, please, take a look at: <a href="https://www.toptal.com/python/python-class-attributes-an-overly-thorough-guide" rel="nofollow noreferrer">Python Class Attributes: An Overly Thorough Guide</a></p>
</div>
<div class="post-text" itemprop="text">
<p>In your first example, the class <code>mytest</code> has a <code>tricks</code> member, shared by all its instances:</p>
<pre><code>class mytest:
    name = "test1"
    tricks = list()
    def __init__(self,name):
        ...
        self.tricks.append(name)
</code></pre>
<p>In your second example, however, <code>mytest</code> instances additionnally have a <code>tricks</code> member:</p>
<pre><code>class mytest:
    name = "test1"
    tricks = list()
    def __init__(self,name):
        ...
        self.tricks = [name]
        ...
</code></pre>
<p>The <code>self.tricks = [name]</code> statement gives an attribute named <code>tricks</code> to <code>self</code>, that is, the <code>mytest</code> instance.
The class still has a common <code>tricks</code> member.</p>
<p>When calling <code>instance.tricks</code>, Python first looks for a <code>tricks</code> member in <code>instance.__dict__</code>. If it does not find any, it looks for a <code>tricks</code> member in <code>type(instance).__dict__</code>.</p>
<p>Therefore, instances of your first example have no <code>tricks</code> attribute, but Python will give you the <code>mytest.tricks</code> they all share.
On the other hand, instances of your second example do have their own <code>tricks</code> attribute, and Python will return this one.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your first case creates a class variable, and the second creates an instance variable.</p>
<p>When you do refer <code>self.foo</code>, Python first checks for a  <code>foo</code> element in the instance's namespace dictionary, and then checks for a <code>foo</code> element in the class's namespace dictionary.</p>
<p>In the first case, since you created a class variable named <code>tricks</code> with a mutable type (a list), and didn't re-assign it specifically on the method, modifications to that list are available to every instance of the class.</p>
<p>In your second case, things are identical except that you hid the class variable with an instance variable of the same name, so from that point on, all references to <code>self.tricks</code> refer to the instance variable instead of the class variable.</p>
<p>The second case illustrated:</p>
<pre><code>mytest.__dict__ = {
    'name': 'test1',
    'tricks': [],  # this doesn't get updated
}

t1.__dict__ = {
    'name': 'some_passed_name'
    'tricks': ['some_passed_name'],
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's a little thing to note here in this problem.</p>
<p>When you pass in the name and append it to the existing shared <code>tricks</code> list, it is, as you saw, shared by all the values, because it is that list.</p>
<p>However, when you do <code>self.tricks=[name]</code> in your second example, you are erasing that objects instance of <code>self.tricks</code> and are replacing it with the list <code>[name]</code></p>
<p>This is similar to having a parent and child class; when the child class doesn't give a different definition for an existing function, calling it calls the parent's function. But if you do, it calls the child's function.</p>
</div>
<div class="post-text" itemprop="text">
<p>In the both case, you replacing the <code>self.name</code> to a new value.</p>
<p>In the first case you're mutating the <code>self.tricks</code> list, mutating a list don't replace it. so during the whole execution you have a single list, being mutated.</p>
<p>In the second case, the line <code>self.tricks=[name]</code> is changing the list, creating a new list object.</p>
<p>You can easily introspect this like:</p>
<pre><code>class mytest:
    name = "test1"
    tricks = list()
    print("tricks id during class definition is: {}".format(id(tricks)))

    def __init__(self, name):
        self.name = name
        print("self.tricks id at the beginning of __init__ is: {}".format(id(self.tricks)))
        self.tricks = [name]
        print("self.tricks id after being replaced is: {}".format(id(self.tricks)))
        print("but mytest.tricks id is still: {}".format(id(mytest.tricks)))
        self.tricks.append(name)

t1=mytest("hello world")
t2=mytest("bye world")
</code></pre>
<p>Giving:</p>
<pre><code>tricks id during class definition is: 140547174832328
self.tricks id at the beginning of __init__ is: 140547174832328
self.tricks id after being replaced is: 140547174831432
but mytest.tricks id is still: 140547174832328
self.tricks id at the beginning of __init__ is: 140547174832328
self.tricks id after being replaced is: 140547174830600
but mytest.tricks id is still: 140547174832328
</code></pre>
</div>
<span class="comment-copy">It isn't really about the class attribute in the second case. It's the underlying object. Every call to <code>__init__</code> creates a new list object: <code>[name]</code>. Therefore, the list referenced by the attribute <code>tricks</code> of each instance is independent.</span>
<span class="comment-copy">@MosesKoledoye And the newly created list <code>[name]</code> covers the old list <code>tricks</code> ? Is the old object <code>tricks</code> deleted then?</span>
<span class="comment-copy">If you write <code>self.tricks = [name]</code>, then <code>self</code> receives an attribute <code>tricks</code> which will shadow the class member <code>myclass.tricks</code>.</span>
<span class="comment-copy">The second code creates an instance attribute <code>self.tricks</code> that shadows the class attribute <code>mytest.tricks</code>. So if you want to access <code>mytest.tricks</code> in the second code you need to use the <code>mytest.tricks</code> name.</span>
<span class="comment-copy">You might want to conform to <a href="https://www.python.org/dev/peps/pep-0008/#class-names" rel="nofollow noreferrer">class naming conventions</a>, even for toy examples, just to stay in practice.</span>
