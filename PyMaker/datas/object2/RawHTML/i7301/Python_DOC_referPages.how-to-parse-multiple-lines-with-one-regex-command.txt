<div class="post-text" itemprop="text">
<p>I have two line that looks something like</p>
<pre><code>Content-Type: text/plain
Content-Type: text/plain; charset=UTF-8
</code></pre>
<p>To parse, I used a command like <code>("^Content-Type:\s(.*)")</code> to capture the <code>(text/plain)</code> portion. On the other hand, I used regex like <code>("^Content-Type:\s(.*)[;]")</code> to capture the same string <code>(text/plain)</code>. Is there any way that I can use one that will work in both cases? I am using python and I am new to regex. thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You can just modify your Regex a bit:</p>
<pre><code>Content-Type:\s([^;\s]*)
</code></pre>
<p>Here is a working link:  <a href="https://regex101.com/r/XdmIMV/2" rel="nofollow noreferrer">Regex101</a></p>
</div>
<div class="post-text" itemprop="text">
<p>It looks like you are looking for the <code>?</code> quantifier (6th down in the <a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="nofollow noreferrer">list in the docs</a>). It will allow the trailing portion to appear once or not at all, covering both cases:</p>
<pre>
^Content-Type:\s<b>+</b>(<b>[^;]+</b>)<b>(?:;.*)?</b>
</pre>
<p>Here are the changes I would recommend:</p>
<ul>
<li>Do not capture <code>.</code> in your capture group. <code>*</code> is greedy, so you <em>will</em> get undesirable characters sometimes: e.g. if you have two semicolons in the string, the first one will get captured. Instead, capture <code>[^;]</code>, which means "anything but semicolons".</li>
<li>Change the quantifier in the main catpure group from <code>*</code> to <code>+</code>. You want at least one character to match, which is what <code>+</code> expresses.</li>
<li>I would also add the <code>+</code> quantifier to the preceding <code>\s</code> just to be safe. It will allow you to match multiple spaces, should that ever happen.</li>
<li>Make the part that matches the <code>;</code> into a non-capturing group (a group starting with <code>(?:</code>. This allows you to apply the <code>?</code> quantifier to it.</li>
</ul>
<p>As @RudyTheHunter indirectly points out, if you use plain <a href="https://docs.python.org/3/library/re.html#re.match" rel="nofollow noreferrer"><code>re.match</code></a>, you don't need the leading <code>^</code> or the trailing portion after the semicolon at all since <code>match</code> looks in the beginning of the string.</p>
<p>You can therefore use just</p>
<pre><code>Content-Type:\s+([^;]+)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As I've stated in the comment, regex is an overkill for such a simple match, so for the sake of completeness:</p>
<pre><code>def parse_content_type(data):
    if data.lower()[:13] == "content-type:":  # HTTP headers are case-insensitive by spec.
        index = data.find(";")  # find the position of `;`
        return data[13:index if index &gt; -1 else len(data)].strip()  # slice and strip

print(parse_content_type("Content-Type: text/plain"))  # text/plain
print(parse_content_type("Content-Type: text/plain; charset=UTF-8"))  # text/plain
</code></pre>
<p>It's more verbose but, in theory, it should be faster.</p>
</div>
<span class="comment-copy">Tags should inform users about your language. I edited that in for you this time.</span>
<span class="comment-copy"><code>^Content-Type:\s+(.*?)(?=&gt;;|$)</code> although you don't need regex at all for such a simple case.</span>
<span class="comment-copy">OP is trying to capture the content type string, not the whole header line: <code>text/plain</code>, not <code>Content-Type: text/plain</code>.</span>
<span class="comment-copy">thank you. this is what I need</span>
