<div class="post-text" itemprop="text">
<p>I've read about <a href="https://mail.python.org/pipermail/python-dev/2012-December/123028.html" rel="nofollow noreferrer">Raymond Hettinger's new method</a> of implementing <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-compactdict" rel="nofollow noreferrer">compact dicts</a>. This explains why dicts in Python 3.6 use less memory than dicts in Python 2.7-3.5. However there seems to be a difference between the memory used in Python 2.7 and 3.3-3.5 dicts. Test code:</p>
<pre><code>import sys

d = {i: i for i in range(n)}
print(sys.getsizeof(d))
</code></pre>
<ul>
<li>Python 2.7: 12568</li>
<li>Python 3.5: 6240</li>
<li>Python 3.6: 4704</li>
</ul>
<p>As mentioned I understand the savings between 3.5 and 3.6 but am curious about the cause of the savings between 2.7 and 3.5.</p>
</div>
<div class="post-text" itemprop="text">
<p>Turns out this is a red herring. The rules for increasing the size of dicts changed between cPython 2.7 - 3.2 and cPython 3.3 and again at cPython 3.4 (though this change only applies when deletions occur). We can see this using the following code to determine when the dict expands:</p>
<pre><code>import sys

size_old = 0
for n in range(512):
    d = {i: i for i in range(n)}
    size = sys.getsizeof(d)
    if size != size_old:
        print(n, size_old, size)
    size_old = size
</code></pre>
<p>Python 2.7:</p>
<pre><code>(0, 0, 280)
(6, 280, 1048)
(22, 1048, 3352)
(86, 3352, 12568)
</code></pre>
<p>Python 3.5</p>
<pre><code>0 0 288
6 288 480
12 480 864
22 864 1632
44 1632 3168
86 3168 6240
</code></pre>
<p>Python 3.6:</p>
<pre><code>0 0 240
6 240 368
11 368 648
22 648 1184
43 1184 2280
86 2280 4704
</code></pre>
<p>Keeping in mind that dicts resize when they get to be 2/3 full, we can see that the cPython 2.7 dict implementation quadruples in size when it expands while the cPython 3.5/3.6 dict implementations only double in size.</p>
<p>This is explained in a comment in the <a href="https://github.com/python/cpython/blob/master/Objects/dictobject.c#L401" rel="nofollow noreferrer">dict source code</a>:</p>
<pre><code>/* GROWTH_RATE. Growth rate upon hitting maximum load.
 * Currently set to used*2 + capacity/2.
 * This means that dicts double in size when growing without deletions,
 * but have more head room when the number of deletions is on a par with the
 * number of insertions.
 * Raising this to used*4 doubles memory consumption depending on the size of
 * the dictionary, but results in half the number of resizes, less effort to
 * resize.
 * GROWTH_RATE was set to used*4 up to version 3.2.
 * GROWTH_RATE was set to used*2 in version 3.3.0
 */
</code></pre>
</div>
<span class="comment-copy">Hm, never noticed this, nice find. I'm not sure if a change was made so plain dictionaries can benefit from the combined table form (see a Q&amp;A I did <a href="https://stackoverflow.com/questions/42419011/why-is-the-dict-of-instances-so-small-in-python-3">here</a> on instance dicts) but it might be worth investigating it. I doubt it though :-)</span>
<span class="comment-copy">It'd be nice if Raymond Hettinger sees this question and tells us why they made that change...</span>
<span class="comment-copy">@PM2Ring I've got the <a href="https://www.youtube.com/watch?v=p33CVV29OG8&amp;feature=youtu.be&amp;t=21m57s" rel="nofollow noreferrer">next best thing</a></span>
