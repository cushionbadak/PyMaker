<div class="post-text" itemprop="text">
<p>I have a string that looks like below:</p>
<pre><code>string1 = "47482M4I14M7I7M1I26M8D25M4I20M2I11M7I17M7I7M22I14M3I35M3I30M1D15M2I16M17D4M5D15M7D37M1D24M5D5M6D27M4I35M11I10M3I5M3I24M15I175M3D13M236792H"
</code></pre>
<p>I want to separate by alphabets(i.e. A-Z or a-z) and put the associated value with in a dictionary of lists.
Each set of number is associated with alphabets. for example,</p>
<p>'M' is associated with 47482, 14, 7I7 etc.</p>
<p>'I' is associated with  4, 1 etc</p>
<p>'H' is associated with 236792</p>
<p>My final data structure will be like </p>
<pre><code>    dict = { 
      M:[47482, 14, 717],
      I:[4, 1],
      H:[236792]

    }
</code></pre>
<p>My try:</p>
<pre><code>import re
string1 = "47482M4I14M7I7M1I26M8D25M4I20M2I11M7I17M7I7M22I14M3I35M3I30M1D15M2I16M17D4M5D15M7D37M1D24M5D5M6D27M4I35M11I10M3I5M3I24M15I175M3D13M236792H"
tmp = re.split('[a-zA-Z]', string1)
print(tmp)
</code></pre>
<p>I am unable to get those alphabets as separators. Need help to create the data structure. </p>
</div>
<div class="post-text" itemprop="text">
<p>You're on the right track, but you should use a slightly different regular expression and use <a href="https://docs.python.org/3/library/re.html#re.findall" rel="noreferrer"><code>re.findall</code></a>. Like this:</p>
<pre><code>In [1]: string1 = "47482M4I14M7I7M1I26M8D25M4I20M2I11M7I17M7I7M22I14M3I35M3I30M1D15M2I16M17D4M5D15M7D37M1D24M5D5M6D27M4I35M11I10M3I5M3I24M15I175M3D13M236792H"

In [2]: import re, collections

In [3]: p = re.compile("([0-9]+)([A-Za-z])")

In [4]: dct = collections.defaultdict(list)

In [5]: for number, letter in p.findall(string1):
    ...:     dct[letter].append(number)
    ...:      

In [6]: dct
Out[6]: 
defaultdict(list,
            {'D': ['8', '1', '17', '5', '7', '1', '5', '6', '3'],
             'H': ['236792'],
             'I': ['4', '7', '1', '4', '2', '7', '7', '22', '3', '3', '2', '4', '11', '3', '3', '15'],
             'M': ['47482', '14', '7', '26', '25', '20', '11', '17', '7', '14', '35', '30', '15', '16', '4', '15', '37', '24', '5', '27', '35', '10', '5', '24', '175', '13']})
</code></pre>
<p>This locates all pairs of numbers followed by a letter in the string and puts all those pairs into a dictionary with the letter as key, duplicate numbers are allowed.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another solution, without need to user regex:</p>
<pre><code>import string
string1 = "47482M4I14M7I7M1I26M8D25M4I20M2I11M7I17M7I7M22I14M3I35M3I30M1D15M2I16M17D4M5D15M7D37M1D24M5D5M6D27M4I35M11I10M3I5M3I24M15I175M3D13M236792H"

result = dict()
tempValue = ''
for char in string1:

    if char not in string.ascii_letters:
        tempValue += char

    else:

        if char not in result:
            result[char] = []

        result[char].append(int(tempValue))
        tempValue = ''

print(result)
</code></pre>
<p>Result:</p>
<pre><code>{
  'M': [47482, 14, 7, 26, 25, 20, 11, 17, 7, 14, 35, 30, 15, 16, 4, 15, 37, 24, 5, 27, 35, 10, 5, 24, 175, 13],
  'I': [4, 7, 1, 4, 2, 7, 7, 22, 3, 3, 2, 4, 11, 3, 3, 15],
  'D': [8, 1, 17, 5, 7, 1, 5, 6, 3],
  'H': [236792]
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want to use regex, you could write your own method.</p>
<pre><code>myDict = {}
num_string = ''

for char in string1:
    if char.isalpha():
        myDict.setdefault(char,[]).append(int(num_string))
        num_string = ''
    else if char.isdigit():
        num_string += char
</code></pre>
<p><em>Note: Don't use the keyword <code>dict</code> to refer to a variable.</em></p>
</div>
<div class="post-text" itemprop="text">
<p>Without using regex:</p>
<pre><code>string1 = "47482M4I14M7I7M1I26M8D25M4I20M2I11M7I17M7I7M22I14M3I35M3I30M1D15M2I16M17D4M5D15M7D37M1D24M5D5M6D27M4I35M11I10M3I5M3I24M15I175M3D13M236792H"


d = {}
str_num = ''
for c in string1:
    if c.isdigit():
        str_num += c
    else:
        if not c in d:
            d[c] = []
        d[c].append(int(str_num))
        str_num = ''

print(d)
&gt;&gt;&gt;  {'I': ['4', '7', '1', '4', '2', '7', '7', '22', '3', '3', '2', '4', '11', '3', '3', '15'], 'H': ['236792'], 'M': ['47482', '14', '7', '26', '25', '20', '11', '17', '7', '14', '35', '30', '15', '16', '4', '15', '37', '24', '5', '27', '35', '10', '5', '24', '175', '13'], 'D': ['8', '1', '17', '5', '7', '1', '5', '6', '3']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Also without rexexp:</p>
<pre><code>string1 = "47482M4I14M7I7M1I26M8D25M4I20M2I11M7I17M7I7M22I14M3I35M3I30M1D15M2I16M17D4M5D15M7D37M1D24M5D5M6D27M4I35M11I10M3I5M3I24M15I175M3D13M236792H"
abc = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'

s = ''
for k in string1:
    if k.isalpha():
        print('found', k, 'value', s)
        #add to dict here
        s = ''
    else:
        s += k
</code></pre>
</div>
<span class="comment-copy">You are losing the letter value <code>M</code> at your regex stage, adjust your regex to include it at the end of your string, so you will return <code>47482M</code> for the first one.</span>
<span class="comment-copy">Your string doesn't say <code>717M</code>, but <code>7I7M</code> - i.e. 717 isn't associated with M but 7 is associated with both I and M.</span>
