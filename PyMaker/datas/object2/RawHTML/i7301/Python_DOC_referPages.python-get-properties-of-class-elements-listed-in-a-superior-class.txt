<div class="post-text" itemprop="text">
<p>i have the following problem in python. I declare a class <em>element</em> with some property and a class <em>network</em> with a list <em>population</em>. </p>
<p>Now I populate the network with objects of class <em>element</em>: e1,e2 and e3. When I try to get the properties of the elements populating the network, I get an error.</p>
<p>Can you pls help me understanding the issues?</p>
<pre><code>import sys

class element:
    def __init__(self):
        self.property = 1

    def getProperty(self):
        return(self.property)

class network:
    def __init__(self):
        self.population = []

    def addElement(self, element):
        self.population.append([element])

    def getElementProp(self):
        for i in range(0, len(self.population)):
            #print(self.population[i])
            print(self.population[i].getProperty())

print(sys.version_info)

e1 = element()
e2 = element()
e3 = element()

net = network()
net.addElement(e1)
net.addElement(e2)
net.addElement(e3)

net.getElementProp()

**Output:**

line 20, in getElementProp
    print((self.population[i]).getProperty())
AttributeError: 'list' object has no attribute 'getProperty
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are appending a list object containing an <code>element</code> instance while you should be appending the instance directly to your <code>population</code> list:</p>
<pre><code>def addElement(self, element):
    self.population.append(element)
</code></pre>
<p>You could also <code>expand</code> your method to take one or more elements at the same time, without the need to make repeated calls:</p>
<pre><code>def addElements(self, *elements):
    self.population.extend(elements)

...

net = network()
net.addElements(e1, e2, e3)
</code></pre>
<p>More so, in your <code>getElementProp</code> method, it is more <a href="https://docs.python.org/3/glossary.html#term-pythonic" rel="nofollow noreferrer"><strong>Pythonic</strong></a> to iterate on the elements directly rather than use <code>range(len(...))</code> with a later list indexing:</p>
<pre><code>def getElementProp(self):
    for e in self.population:
        print(e.getProperty())
</code></pre>
</div>
<span class="comment-copy">Why the brackets in <code>self.population.append([element])</code>?</span>
<span class="comment-copy">Learn to use a debugger ... you may find it better in the long run ...</span>
