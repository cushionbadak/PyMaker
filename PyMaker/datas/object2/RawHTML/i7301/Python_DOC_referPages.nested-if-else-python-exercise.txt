<div class="post-text" itemprop="text">
<p>I'm trying to build a function that checks which of a,b,c is less then returns the lesser value.</p>
<pre><code>def minimal_three(a,b,c):
    if a &lt; b:
        if a &lt; c:
            return (a)
    elif b &lt; a:
        if b &lt; c:
            return (b)
    elif c &lt; a:
        if c &lt; b:
            return (c)
    else:
        return 'none'
</code></pre>
<p>So far the code runs fine until it gets to check 'c', then it doesnt return anything, nested if else statements already get really confusing to me.</p>
</div>
<div class="post-text" itemprop="text">
<p>You shouldn't use <code>if-else</code> as the 3 conditions are not exclusive.</p>
<p>For example, <code>[3, 4, 1]</code> should return in the 3rd condition but is also suitable in the 1st condition, so it returns nothing.</p>
<p>If you don't want to change your code a lot. You can use:</p>
<pre><code>def minimal_three(a,b,c):
    if a &lt; b:
        if a &lt; c:
            return (a)
    if b &lt; a:
        if b &lt; c:
            return (b)
    if c &lt; a:
        if c &lt; b:
            return (c)
    return 'none'
</code></pre>
<p>For simple, you can try:</p>
<pre><code>def minimal_three(a,b,c):
    return min(a, b, c)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>why that code doesn't work:</p>
<pre><code>def minimal_three(a,b,c):
    if a &lt; b:
        if a &lt; c:
            return (a)
        else:
            # what if a &gt;= c and a &lt; b ?
            return "i returned nothing"
    elif b &lt; a:
        if b &lt; c:
            return (b)
        else:
            # what if b &gt;= c and a &gt; b ?
            return "i returned nothing"
    elif c &lt; a:
        if c &lt; b:
            return (c)
        else:
            # what if b &lt;= c and a &lt; c ?
            return "i returned nothing"
    else:
        return 'none'
</code></pre>
<p>Alternative:</p>
<pre><code>def min_of_two(a, b):
    if a &gt; b:
        return b
    return a

def min_of_three(a, b, c):
    min_ab = min_of_two(a, b)
    min_abc = min_of_two(min_ab, c)
    return min_abc

def min_of_three_v2(a, b, c):
    min_ab = a
    if a &gt; b:
        min_ab = b
    min_abc = min_ab
    if min_ab &gt; c:
        min_abc = c
    return min_abc

def min_of_three_v3(a, b, c):
    min_abc = a
    if min_abc &gt; b:
        min_abc = b
    if min_abc &gt; c:
        min_abc = c
    return min_abc
</code></pre>
<p>if you really want to use nested if/else (this code is so long):</p>
<pre><code># if-elif-else is ok.
# nested if is hard to read
# if-elif-elif-elif-elif...-else is hard to read.
# hard to read == easy to have bugs, which is bad.

def min_abc_slower(a, b, c):
    if a &gt; b:
        # a &gt; b. This means min(a, b) == b
        if b &gt; c:
            # b &gt; c. This means min(c, min(a, b)) == c
            return c
        else:
            # b &gt; c is False. This means b &lt;= c.
            # So, min(c, min(a, b)) == b
            return b
    else:
        # a &gt; b is False. This means a &lt;= b.
        # So, min(a, b) = a
        if a &gt; c:
            # a &gt; c. This means min(c, min(a, b)) == c
            return c
        else:
            # a &gt; c is False. This means a &lt;= c
            # So, min(c, min(a, b)) == a
            return a
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the power of if...elif...else over if...if...if or if...else...if...else. The way you have written your code, depreciates the power of <strong>elif</strong>. The correct way should be as this:</p>
<pre><code>def minimal_three(a,b,c):
if a &lt; b and a &lt; c:
        return (a)
elif b &lt; c:
        return (b)
else
        return (c)
</code></pre>
<p>This code will always return the <strong>min</strong> no matter what numbers you give.</p>
<p><strong>Explaination:</strong></p>
<p>In your code, the line <code>if a &lt; b</code> already tells you the comparison between a and b that which one is greater. So checking for this condition again in the second if <code>if b &lt; a</code> is useless. if a is not lesser than b, then obviously it is either greater than b or equal to b. So now you must just check if b is lesser than c to prove that b is smallest or even a or b both but the returned value is always minimum. I hope you get that.</p>
<p>Also I don't understand whyt do you want to return None. If you provide three numbers to a function to find the minimum number, it should always and always return a number. Tell me a case where you can expect a None.</p>
</div>
<div class="post-text" itemprop="text">
<p>Easily be done using <a href="https://docs.python.org/3/library/functions.html#min" rel="nofollow noreferrer"><code>min</code></a> inbuilt function:</p>
<pre><code>def min_value(a,b,c):
    return (min(a,min(b,c)))
</code></pre>
<p>also the number of steps in your code can be reduced with some tweaking.</p>
</div>
<div class="post-text" itemprop="text">
<p>It works - Finding two greatest in three int:</p>
<pre><code>def Biggest(a, b, c):
    if a &gt;= b &gt;= c:
        print a, b, 'are the biggest two'
    elif b &gt;= c &gt;= a:
        print b, c, 'are the biggest two'
    else:
        print c, a, 'are the biggest two'
</code></pre>
<p>Find greatest in three integer:</p>
<pre><code>def Biggest(a, y, z):
    Max = a
    if y &gt; Max:
        Max = y    
    if z &gt; Max:
        Max = z
        if y &gt; z:
            Max = y
    return Max
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could probably get away with using a for loop to minimise lines of code!
It would look something like this:</p>
<pre><code>c = 3
b = 2
a = 1
list = [a,b,c]
def minimal_three(a,b,c):
    for y in list:
        n = y
    for x in list:
        if x &lt; n:
           print(n)
</code></pre>
</div>
<span class="comment-copy">You've forgotten the cases where 1/ a &lt; b and a &gt; c, 2/ b &lt; a and b &gt; c, 3/ c &lt;a and c &gt; b.</span>
<span class="comment-copy">either a &lt; b, or a &gt; b, or a == b. There is no fourth possibility. So, after the if a &lt; b, and elif b &lt; a. the program can reach the remaining two branches only if a == b.</span>
<span class="comment-copy">Practically, your function should always return variable (even if all 3 values are equal: you just return one of them); it should thus never return 'none' (or, more appropriate for Python, None).</span>
<span class="comment-copy">Try writing down all six possible orders of the variables' sizes, and checking whether your code covers each possibility.</span>
<span class="comment-copy">Try to make a function for min of two. Then try min(min(a, b), c)?</span>
<span class="comment-copy">but there is definitley a way to build a function that finds the least with nested if else statements . i got this exercise off a website and it said you can use the nested. so if other people have solved it then it must be done without using pythons built in min() function.</span>
<span class="comment-copy">@Anon Of course, but is somewhat complicated.</span>
<span class="comment-copy">Umm... You do realize that your control flow is deeply flawed from the return statements, right?</span>
<span class="comment-copy">@Zizouz212 it's an explanation, this way the OP can see why his code doesn't work</span>
<span class="comment-copy">@alfasin Yes, because if <code>a</code> is smaller than <code>b</code>, but bigger than <code>c</code>, then the function just stops... It's not exactly helpful. A helpful answer would seek to explain the behaviour using words, not using code that isn't clear.</span>
<span class="comment-copy">@Zizouz212 if it's not clear to you by reading the code than it'll become clear by executing it.</span>
<span class="comment-copy">@alfasin It's better. My issue becomes that in cases where the asker is trying to learn, a simple code example isn't always enough, even if the problem appears to be simplistic in our eyes. DV retracted and now +1</span>
<span class="comment-copy">Why do you think that <code>max</code> has anything to do with the question ?</span>
<span class="comment-copy">Yes, but we're not trying to find the maximum</span>
<span class="comment-copy">sorry abt that. min,max logic is same</span>
<span class="comment-copy">I'll take away my down vote, but the premise is that the question is a learning exercise to figure out <code>if</code> statements. While technically an answer, it's just a poor quality answer that doesn't seek to help the OP with their current problem.</span>
<span class="comment-copy">How does this have 2 up votes? You're finding the minimum, not anything else.</span>
<span class="comment-copy">chained comparison is nice, but need to return min of three.</span>
<span class="comment-copy">but what about the least ?</span>
<span class="comment-copy">might be a good idea if it is min of a dozen number. global variable is ugly. not sure if that function actually works.</span>
<span class="comment-copy">If you really wanted to minimize code, you'd just do <code>min(list)</code> Also, this doesn't exactly work - your first loop just goes through the entire list, and the last one just prints when it discovers a "lower" value, but doesn't output a single, <i>minimum</i> value.</span>
<span class="comment-copy">You should look into <code>*args</code> as your function definition, e.g. <code>def minimal(n, *args):</code> vs a global variable. You should not use <code>list</code> as a variable name as it hides python's builtin <code>list</code> type. Your first loop is unnecessary, just assign <code>n</code> to the first item.</span>
<span class="comment-copy">oops sorry the code doesn't work it was more of a representation of what it would be like.</span>
