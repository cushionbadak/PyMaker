<div class="post-text" itemprop="text">
<p>My Python virtual environments use <code>python3.6</code> when I create them using <code>virtualenv</code></p>
<blockquote>
<p><code>~ $ virtualenv my_env</code></p>
</blockquote>
<p>but I need to use <code>python3.5</code> as 3.6 is <a href="https://github.com/menpo/conda-opencv3/issues/21" rel="noreferrer">not currently supported by <code>Opencv3</code>.</a></p>
<p>I've tried using the <code>--python=&lt;py_version&gt;</code> flag when creating a virtual environment but this doesn't work.</p>
<h1>How do I specify the python (3.x) version to install using <code>virtualenv</code> for Mac and/or Linux?</h1>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that you have installed <code>python3</code> or any desired version of Python (2.6, 2.7, 3.5, 3.6), Now while creating the virtual environment directly pass the python executable path. Hence here are few valid example</p>
<pre><code>$ virtualenv new_p2_env # Creates a new default python environment (usually python 2)

$ virtualenv -p python3 new_p3_env # Creates a new default python3 (python3 must be a valid command i.e found in the PATH) 
</code></pre>
<p>And last</p>
<pre><code># Directly point to any version of python binary, this can be even another virtualenv's bin/python. 
$ virtualenv -p /path/to/any/python/executable new_env 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Alternatively, I think you could use the specific version of Python itself to create the virtual environment. That way, you'll know for sure it's the correct version:</p>
<pre><code>$ python3.5 -m venv test35
$ ./test35/bin/python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 26 2016, 10:47:25)
[GCC 4.2.1 (Apple Inc. build ) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;
</code></pre>
<p>Reference at <a href="https://docs.python.org/3.5/library/venv.html" rel="noreferrer">https://docs.python.org/3.5/library/venv.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>As of version 3.3, python includes a package named <code>venv</code>. However that package doesn't provide the same functionalities as the traditional <code>virtualenv</code> package.</p>
<p><code>venv</code> allows creating virtual environments only for the version of python it's installed for.
<code>virtualenv</code> allows creating virtual environments for different versions of python by providing the path to the binary.</p>
<h1>Creating virtual envs for different versions of python:</h1>
<p>So assuming one has python 2.7 and python 3.6 installed in <code>/path/to/</code> and wants to create the virtual env named respectively <code>env-py36</code> with python 3.6 and <code>env-py27</code> with python 2.7</p>
<pre><code># create a virtual env with python3's venv :
/path/to/python36/bin/python3 -m venv /my/python-venvs/env-py36
. /my/python-venvs/env-py36/bin/activate
# we're now running python 3's "env-py36" virtual env, we want to install the "virtualenv" package
pip install virtualenv
deactivate
# now use virtualenv to create a virtual environment for python 2.7
/my/python-venvs/env-py36/bin/virtualenv --python=/path/to/python27/bin/python /my/python-venvs/env-py27
</code></pre>
<h1>Using python 3.3+ venv</h1>
<p>Python 3.3+ :</p>
<pre><code>/path/to/python3/bin/python3 -m venv ENV_DIR
</code></pre>
<p>Python 3.3 to 3.5 (deprecated in 3.6+) :</p>
<pre><code>/path/to/python3/bin/pyvenv ENV_DIR
</code></pre>
<h1>Sources:</h1>
<ul>
<li><a href="https://packaging.python.org/tutorials/installing-packages/#creating-virtual-environments" rel="nofollow noreferrer">Creating Virtual Environments</a></li>
<li><a href="https://docs.python.org/3/library/venv.html" rel="nofollow noreferrer">Python 3.3 venv</a></li>
<li><a href="https://pypi.python.org/pypi/virtualenv" rel="nofollow noreferrer">Python virtualenv package</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>I working on all ubuntu and MacOS</p>
<blockquote>
<p>Ubuntu : <code>virtualenv -p python3.6 environment_file</code></p>
<p>Mac OS : <code>virtualenv -p python3.6 environment_file</code></p>
</blockquote>
<p>I think it be same</p>
</div>
<span class="comment-copy">Have you installed Python 3.5 on your computer? You're right in passing the <code>--python</code> flag, so something else about your environment or invocation is wrong here. Can you give the error message?</span>
<span class="comment-copy">Yesterday I tried running <code>conda install python=3.5</code> inside of my activated virtual environment thinking that this would change the python dist inside my env but instead it changed the local version. I changed back to 3.6 but now I run into <a href="https://stackoverflow.com/questions/42190984/dyld-library-not-loaded-error-preventing-virtualenv-from-loading">this problem</a> but the answer there does not work for me. oh god what did I do</span>
<span class="comment-copy">@CodyPiersall It seems that installing <code>miniconda</code> changed the path var to <code>/Users/.../miniconda3/bin:</code> which is incompatible with the python version <code>virtualenv</code> was using. Removing <code>/Users/.../miniconda3/bin</code> from the path fixes the issue but then I can't use <code>conda</code>... I know this is now a separate issue but any ideas how I can add it back to the path without messing up virtualenv?</span>
<span class="comment-copy">I just want to give an hint for those using Windows(and using Powershell). In this case make sure to explicitly write the .exe, that is what I mean: virtualenv -p C:\PythonVersionFolder\Python.exe EnvName. Otherwise you could get the PermissionError: [WinError 5] denied Access</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv">Use different Python version with virtualenv</a></span>
<span class="comment-copy">this just creates a virtual environment with <code>python3.6</code>. I want <code>python3.5</code></span>
<span class="comment-copy">You can easily find a way to uninstall <code>python3.6</code> and install <code>python3.5</code>. If you do have to keep multiple versions of python on the same machine, use tools like <code>pyenv</code> or <code>pythonbrew</code></span>
<span class="comment-copy">hey @itsneo thanks for the suggestions! Reading further into your comment would I be right in understanding that when you create a virtual env that <code>virtualenv</code> uses the local python version (2.x/3.x) specified in the <code>$PATH</code> and that there is no way to change the specific python version through the <code>virtualenv</code> command itself?</span>
<span class="comment-copy">You can still create one directly mentioning the python executable path like this <code>virtualenv -p /usr/local/bin/python35 env_name</code></span>
<span class="comment-copy">If you edit that into your answer I'll accept it</span>
<span class="comment-copy">nice. yeah I ended up creating the venv with <code>conda</code>. Huge relief to have it all working now</span>
<span class="comment-copy">quality answer. cheers.</span>
