<div class="post-text" itemprop="text">
<p>I am having difficulty in understanding as for how this piece of code works.</p>
<pre><code>def get_title(name):
    if '.' in name:
        return name.split(',')[1].split('.')[0].strip()
    else:
        return 'Unknown'

ans=get_title('Braund, Mr. Owen Harris')
print (ans)
</code></pre>
<p>As I know the split is used for splitting characters but this does not make much sense to me.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's easy to understand what happens if you play a little with with Python REPL. The most interesting part happens in line 3 of the code you've shown:</p>
<pre><code>return name.split(',')[1].split('.')[0].strip()
</code></pre>
<p>Let's run it step by step in REPL to understand what happens:</p>
<pre><code>&gt;&gt;&gt; 'Braund, Mr. Owen Harris'.split(',')
['Braund', ' Mr. Owen Harris']
&gt;&gt;&gt; 'Braund, Mr. Owen Harris'.split(',')[1]
' Mr. Owen Harris'
&gt;&gt;&gt; 'Braund, Mr. Owen Harris'.split(',')[1].split('.')
[' Mr', ' Owen Harris']
&gt;&gt;&gt; 'Braund, Mr. Owen Harris'.split(',')[1].split('.')[0]
' Mr'
&gt;&gt;&gt; 'Braund, Mr. Owen Harris'.split(',')[1].split('.')[0].strip()
'Mr'
</code></pre>
<p>As you can see this function is meant to extract titles like <code>Mr</code>, <code>Ms</code> etc. This implementation is error prone if specific characters like <code>,</code> or <code>.</code> are not found in the input string, for example:</p>
<pre><code>&gt;&gt;&gt; 'Braund Mr. Owen Harris'.split(',')[1].split('.')[0].strip()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IndexError: list index out of range
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should do the splits one by one and see how its going, for example:</p>
<pre><code>name = 'Braund, Mr. Owen Harris'
name = name.split(',')[1] # this split will give ['Braund', ' Mr. Owen Harris']
                          # then it takes element 1 which is ' Mr. Owen Harris'
name = name.split('.')[0] # here the split is [' Mr', ' Owen Harris']
                          # then it takes elemet 0 which is ' Mr'
name = name.strip()       # strip removes white spaces from the string (the leading space for this case)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You start with:</p>
<pre><code>'Braund, Mr. Owen Harris'
</code></pre>
<p>The first <code>split</code> will find all ',' and split the string at those positions. So you get:  </p>
<pre><code>['Braund', ' Mr. Owen Harris']
</code></pre>
<p>Then you take the second element so you are left with:</p>
<pre><code>' Mr. Owen Harris'
</code></pre>
<p>You then split this string by '.' and get:  </p>
<pre><code>[' Mr', ' Owen Harris']
</code></pre>
<p>After that you take the first element:</p>
<pre><code>' Mr'
</code></pre>
<p>And strip it:</p>
<pre><code>'Mr'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What happens here is called <a href="https://en.m.wikipedia.org/wiki/Method_chaining" rel="nofollow noreferrer">Method chaining</a>. This means that if a method returns an object, you can append a method on the returned object directly on the calling method. </p>
<p>Let's break down that return line of code:</p>
<ul>
<li><code>name.split(',')</code> returns a list of items, where each ',' in the string is treated as a separator between list items. On <code>'Braund, Mr. Owen Harris')</code>, this returns the following list: <code>['Braund', ' Mr. Owen Harris']</code></li>
<li>The following <code>[1]</code> selects the second item in the list, which is a string object (<code>'Mr. Owen Harris'</code>)</li>
<li>Next, <code>split('.')</code> splits that string again into a list, returning <code>['Mr', 'Owen Harris']</code>. </li>
<li>Then, the first item is selected by <code>[0]</code>, returning the string <code>'Mr'</code>.</li>
<li>Finally, <code>strip()</code> removes all whitespaces from the beginning and the end of the string. </li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>I will explain based on your example:</p>
<pre><code>name = 'Braund, Mr. Owen Harris'

if '.' in name:
</code></pre>
<p>Does name contain <code>.</code>? Yes, then you split name using <code>,</code>, which returns:</p>
<pre><code>['Braund', ' Mr. Owen Harris']
</code></pre>
<p>Now, you retrieve the second element (<code>name.split(',')[1]</code>), and you split it using <code>.</code>, which returns:</p>
<pre><code>[' Mr', ' Owen Harris']
</code></pre>
<p>Then, you retrieve the first element (<code>name.split(',')[1].split('.')[0]</code>), which returns:</p>
<pre><code>' Mr'
</code></pre>
<p><a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow noreferrer"><code>strip()</code></a>is used to remove extra leading and trailing spaces.</p>
<p>Then the final result:</p>
<pre><code>'Mr'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Does this help?</p>
<pre><code>    def get_title(name):
        print type(name), name 
        if '.' in name:
            print  type(name.split(',')), name.split(',') 
            print  type(name.split(',')[1]) , name.split(',')[1]  
            print  type(name.split(',')[1].split('.')  ), name.split(',')[1].split('.')        
            print  type(name.split(',')[1].split('.')[0])  , name.split(',')[1].split('.')[0]                  
            print  type(name.split(',')[1].split('.')[0].strip() ), name.split(',')[1].split('.')[0].strip()    
            return name.split(',')[1].split('.')[0].strip()
        else:
            return 'Unknown'

    ans=get_title('Braund, Mr. Owen Harris')
    print (ans)
</code></pre>
<p>Returns:</p>
<pre><code>&lt;type 'str'&gt; Braund, Mr. Owen Harris
&lt;type 'list'&gt; ['Braund', ' Mr. Owen Harris']
&lt;type 'str'&gt;  Mr. Owen Harris
&lt;type 'list'&gt; [' Mr', ' Owen Harris']
&lt;type 'str'&gt;  Mr
&lt;type 'str'&gt; Mr
Mr
</code></pre>
</div>
<span class="comment-copy">Please post your desired output.</span>
