<div class="post-text" itemprop="text">
<p>Consider the following code:</p>
<pre><code>print([a for a in [0] if eval("a in [0]")])
b = 0
print([b if eval("True in (x == b for x in [0])") else ''])
print([a for a in [0] if eval("True in (x == a for x in [0])")])
</code></pre>
<p>The output of this is:</p>
<pre><code>[0]
[0]
Traceback (most recent call last):
  File "…", line 4, in &lt;module&gt;
    print([a for a in [0] if eval("False in (x == a for x in [0])")])
  File "…", line 4, in &lt;listcomp&gt;
    print([a for a in [0] if eval("False in (x == a for x in [0])")])
  File "&lt;string&gt;", line 1, in &lt;module&gt;
  File "&lt;string&gt;", line 1, in &lt;genexpr&gt;
NameError: name 'a' is not defined
</code></pre>
<p>The first eval uses the iterator <code>a</code> in a plain eval, and it works.</p>
<p>The second eval uses a static variable <code>b</code> when evaluating a generator, and it works. </p>
<p>The third eval combines the two ideas - it uses an iterator variable when evaluating a generator, and it fails to detect the variable and raises an error. Why does this happen?</p>
</div>
<div class="post-text" itemprop="text">
<ul>
<li>A genexp, like <code>(x == a for x in [0])</code>, creates its own scope.</li>
<li>So do list comprehensions, at least in Python 3.</li>
<li>Nested scopes inside an <code>eval</code> don't see variables from the locals used for the <code>eval</code>.</li>
</ul>
<p>That means that in this line:</p>
<pre><code>print([a for a in [0] if eval("True in (x == a for x in [0])")])
</code></pre>
<p>The <code>a</code> lookup inside the <code>eval</code> happens in a nested scope, so it doesn't see the <code>a</code> variable from the local variables of the scope where the <code>eval</code> occurred.</p>
</div>
<span class="comment-copy">This works in Python so your tag should be Python 3.x instead.</span>
<span class="comment-copy">And in Python 3, if you supply the <code>locals()</code> dict for the list comp, it works: <code>[a for a in [0] if eval("True in (x == a for x in [0])", locals())]</code>. Though I still can't wrap my head around why this works for others and fails here.</span>
<span class="comment-copy">@MosesKoledoye: That's treating <code>locals()</code> as the global scope for the <code>eval</code>uated code, so variable lookup inside the genexp's nested scope looks there instead of skipping it.</span>
<span class="comment-copy">"Nested scopes inside an eval don't see variables from the locals used for the eval" Is this documented somewhere? I can't glean that fact from the docs.</span>
<span class="comment-copy">@juanpa.arrivillaga: I'm not seeing it in the <code>eval</code> docs, but it's kind of documented for <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer"><code>exec</code></a>: "If exec gets two separate objects as globals and locals, the code will be executed as if it were embedded in a class definition."</span>
