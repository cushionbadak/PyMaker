<div class="post-text" itemprop="text">
<p>I'm trying to combine <a href="http://asyncio.readthedocs.io/en/latest/tcp_echo.html" rel="nofollow noreferrer">TCP echo client and server</a> for testing automation into single module using ProcessPoolExecutor() and it works as expected. </p>
<p>The only issue is I can't finish event loop. I can see debug output of last line of executor's target run_client(), but looks like executor itself still blocks.</p>
<p>The code:
</p>
<pre><code>import asyncio
import concurrent.futures
from concurrent.futures import ProcessPoolExecutor

async def server_handle_echo(reader, writer):
    data = await reader.read(100)
    message = data.decode()
    addr = writer.get_extra_info('peername')
    print("Received %r from %r" % (message, addr))

    print("Send: %r" % message)
    writer.write(data)
    await writer.drain()

    print("Close the client socket")
    writer.close()


async def echo_client_handler(message, loop):
    reader, writer = await asyncio.open_connection('127.0.0.1', 8888,
                                                   loop=loop)

    print('Send: %r' % message)
    writer.write(message.encode())

    data = await reader.read(100)
    print('Received: %r' % data.decode())

    print('Close the socket')
    writer.close()



def run_client():
    message = 'Hello World!'
    loop = asyncio.get_event_loop()
    loop.run_until_complete(echo_client_handler(message, loop))
    loop.close()
    print('run_client last line')

executor = ProcessPoolExecutor(1)
loop = asyncio.get_event_loop()

coro = asyncio.start_server(server_handle_echo, '127.0.0.1', 8888, loop=loop)
server = loop.run_until_complete(coro)

# Serve requests until Ctrl+C is pressed
print('Serving on {}'.format(server.sockets[0].getsockname()))
try:
    #loop.run_forever()
    client = asyncio.ensure_future(loop.run_in_executor(executor, run_client))
    loop.run_until_complete(client)

except KeyboardInterrupt:
    pass

# Close the server
server.close()
loop.run_until_complete(server.wait_closed())
loop.close()
</code></pre>
<p>Output:</p>
<pre><code>Serving on ('127.0.0.1', 8888)
Send: 'Hello World!'
Received 'Hello World!' from ('127.0.0.1', 51157)
Send: 'Hello World!'
Close the client socket
Received: 'Hello World!'
Close the socket
run_client last line
</code></pre>
<p>After this output it hands in msg loop waiting for IO.</p>
<p>Looking forward for your help. Sorry, I'm one-day-asyncioist :)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't use the same event loop for your client running in a subprocess, you need a <a href="https://docs.python.org/3/library/asyncio-eventloops.html#asyncio.new_event_loop" rel="nofollow noreferrer">new loop</a>:</p>
<pre><code>def run_client():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    [...]
</code></pre>
</div>
<span class="comment-copy">Thank you, Vincent, for quick answer. This is exact solution. Now it works like a charm with your extra lines!</span>
