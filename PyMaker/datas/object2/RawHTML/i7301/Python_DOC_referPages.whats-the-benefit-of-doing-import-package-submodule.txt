<div class="post-text" itemprop="text">
<p>Using <code>numpy</code> as an example, I can't seem to realize what the benefit of doing an import like this would accomplish:</p>
<pre><code>import numpy.lib
</code></pre>
<p>after the import finishes, <code>numpy</code> is available as a name, equivalent to if you imported it directly:</p>
<pre><code>import numpy
</code></pre>
<p>in <em>both</em> cases, you can access the submodule <code>lib</code> only with dotted access:</p>
<pre><code>&gt;&gt;&gt; numpy.lib
&lt;module 'numpy.lib' from ....&gt;
</code></pre>
<p>is there a case where doing <code>import numpy.lib</code> would be beneficial?</p>
</div>
<div class="post-text" itemprop="text">
<h2>Summary</h2>
<p>The actual effect depends on how the module is implemented.  The outer module  might or might not import sub-packages.  See the <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow noreferrer">tutorial section</a> on packages for details.</p>
<h2>Example Directory Structure</h2>
<p>For example, here is a possible directory structure</p>
<pre><code>outer
├── outer/__init__.py
└── outer/inner
    └── outer/inner/__init__.py
</code></pre>
<h2>Case where outer/__init__.py is empty</h2>
<pre><code>&gt;&gt;&gt; import outer               # only loads outer
&gt;&gt;&gt; import outer.inner         # loads both outer and inner 
</code></pre>
<h2>Case where outer/__init__.py loads the submodule</h2>
<p>If the <code>outer/__init__.py</code> file contains <code>from . import inner</code>, then you get:</p>
<pre><code>&gt;&gt;&gt; import outer               # loads both outer and inner
&gt;&gt;&gt; import outer.inner         # loads both outer and inner 
</code></pre>
<h2>Specific case from NumPy</h2>
<p>The <em>numpy</em> module matches the second case, so <code>import numpy</code> and <code>import numpy.lib</code> have the same effect.  Here is an except from numpy's __init__.py file:</p>
<pre><code>from . import core
from .core import *
from . import compat
from . import lib
from .lib import *
from . import linalg
from . import fft
from . import polynomial
from . import random
from . import ctypeslib
from . import ma
from . import matrixlib as _mat
from .matrixlib import *
from .compat import long
</code></pre>
<h2>Conclusion</h2>
<p>In the specific case of <em>numpy</em>, <strong><code>import numpy</code> and <code>import numpy.lib</code> have the exactly the same effect.</strong></p>
<p>Hope that clears it up for you :-)</p>
</div>
<span class="comment-copy"><code>import numpy</code> imports all numpy submodules, including those you do not use. <code>import numpy.lib</code> imports only <code>numpy.lib</code>.</span>
<span class="comment-copy">Ah, so the difference is that <code>import numpy.lib</code> would execute both <code>numpy/__init__.py</code> if it exists and <code>numpy/lib/__init__.py</code> if that exists?</span>
