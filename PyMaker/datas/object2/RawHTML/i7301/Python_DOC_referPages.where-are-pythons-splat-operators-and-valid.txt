<div class="post-text" itemprop="text">
<p>The unpacking/splat operators <code>*</code> and <code>**</code> differ widely in their applicability across python versions (2.7, 3.x &lt; 3.5 and 3.x &gt;= 3.5).</p>
<p>For example:</p>
<pre><code>                                   |   2.7    |   3.1-3.4  |   3.5   
----------------------------------------------------------------------
function(*args)                         ✓            ✓          ✓    

x, *y, z = [1, 2, 3, 4, 5]              x            ✓          ✓    

{**x, **y}                              x            x          ✓    
</code></pre>
<p>Are there any more discrepancies between the various versions that I've missed?  I'm looking through PEP and Readmes but the docs aren't detailed with this. </p>
</div>
<div class="post-text" itemprop="text">
<p>Around 1992 (not sure about Python version). This is from the Grammar file of <a href="http://legacy.python.org/download/releases/src/" rel="noreferrer">Python 1.0.1</a>.</p>
<pre><code># 06-Apr-92:
#   Use only '*' for varargs list

# 31-Mar-92:
#   Tighten syntax for try statements

# 27-Feb-92:
#   Allow NEWLINE* after eval input

# 16-Jan-92:
#   Added '*' as alternative for '+' in varargs syntax
#   (Not sure which alternative is better yet.)

# 11-Jan-92:
#   Variable length argument list syntax added: def f(a, b, +rest): ...
</code></pre>
<p><a href="https://docs.python.org/release/1.4/tut/node105.html#SECTION001310000000000000000" rel="noreferrer">Python 1.4+</a>:</p>
<blockquote>
<p><strong>Keyword Arguments</strong>: Functions and methods written in Python can now be
  called using keyword arguments of the form <code>keyword = value</code>.</p>
</blockquote>
<p><a href="https://www.python.org/download/releases/1.6/" rel="noreferrer">Python 1.6+</a></p>
<blockquote>
<p>There's now special syntax that you can use instead of the <a href="https://docs.python.org/2/library/functions.html#apply" rel="noreferrer"><code>apply()</code></a>
  function. <code>f(*args, **kwds)</code> is equivalent to <code>apply(f, args, kwds)</code>. You
  can also use variations <code>f(a1, a2, *args, **kwds)</code> and you can leave one
  or the other out: <code>f(*args)</code>, <code>f(**kwds)</code>.</p>
</blockquote>
<p><a href="https://docs.python.org/3.0/whatsnew/3.0.html" rel="noreferrer">Python &lt;= 2.7</a>:</p>
<p>Tuple parameter unpacking was removed in Python 3.0.</p>
<blockquote>
<p><a href="http://www.python.org/dev/peps/pep-3113" rel="noreferrer">PEP 3113</a>: <strong>Tuple parameter
  unpacking removed.</strong> You can no longer write <code>def foo(a, (b, c)): ...</code>.
  Use <code>def foo(a, b_c): b, c = b_c</code> instead.</p>
</blockquote>
<p><a href="https://docs.python.org/3.0/whatsnew/3.0.html" rel="noreferrer">Python 3.0+</a> </p>
<blockquote>
<p><a href="http://www.python.org/dev/peps/pep-3132" rel="noreferrer">PEP 3132</a>: <strong>Extended Iterable
  Unpacking</strong>. You can now write things like <code>a, b, *rest =
  some_sequence</code>. And even <code>*rest, a = stuff</code>. The rest object is always
  a (possibly empty) list; the right-hand side may be any iterable.</p>
<p><a href="http://www.python.org/dev/peps/pep-3102" rel="noreferrer">PEP 3102</a>: <strong>Keyword-only arguments.</strong> Named parameters occurring after
  <code>*args</code> in the parameter list must be specified using keyword syntax in the call. You can also use a bare <code>*</code> in the parameter list to indicate
  that you don’t accept a variable-length argument list, but you do have
  keyword-only arguments</p>
</blockquote>
<p><a href="https://docs.python.org/3/whatsnew/3.5.html#pep-448-additional-unpacking-generalizations" rel="noreferrer">Python 3.5+</a></p>
<blockquote>
<p><a href="https://www.python.org/dev/peps/pep-0448/" rel="noreferrer">PEP 448</a>, additional
  unpacking generalizations.</p>
</blockquote>
<hr/>
<p>As far as I know there's no single page that lists all the syntax changes. Per version syntax changes are listed in the <a href="https://docs.python.org/3/whatsnew/index.html" rel="noreferrer">What's new in Python</a> section or you could check the Grammar specification of each release to see the differences.</p>
</div>
<span class="comment-copy">Nice research; when was the 'varargs' syntax ( *name ) introduced? This pre-dates Python 3 (or was possibly backported)</span>
<span class="comment-copy">@Chris_Rands Did you mean the one used in assignment?</span>
<span class="comment-copy">I meant like <code>max(*(1,2,3))</code></span>
<span class="comment-copy">@Chris_Rands This was added in Python 1.6. Updated in answer.</span>
<span class="comment-copy">@kmario23 Yes, <code>max()</code> and <code>min()</code> work with both iterable and individual arguments, but that was just an example from Chris.</span>
