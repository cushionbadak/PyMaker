<div class="post-text" itemprop="text">
<p>I have a pandas dataframe (100x10), where each column represents some quantity and I would like to pair-wise test all columns using t-test. Instead of looping over the columns:</p>
<pre><code>stats.ttest_rel(df.iloc[:,i], df.iloc[:,j])
</code></pre>
<p>where <code>i!=j</code>, is there a cleaner way to do it? Something similar to correlations:</p>
<pre><code>df.corr()
</code></pre>
<p>where it computes all pair-wise correlations.</p>
</div>
<div class="post-text" itemprop="text">
<p>No need to do a double for-loop yourself. You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer"><code>itertools.combinations</code></a></p>
<pre><code>results = pd.DataFrame(columns=df.columns, index=df.columns)
for (label1, column1), (label2, column2) in itertools.combinations(df.items(), 2):
    results.loc[label1, label2] = results.loc[label2, label1] = stats.ttest_rel(column1, column2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think there is no direct method to create pair-wise t-test, you can try this one</p>
<pre><code>from scipy.stats import ttest_ind
import pandas as pd
import csv
df=pd.read_csv('input.csv')


fo = open('result.csv','wb+')
outfile = csv.writer(fo, delimiter=',')
outfile.writerow((df.columns).insert(0,''))

for i in df.columns:
    t=[]
    for j in df.columns:

        t.append(ttest_ind(df[i], df[j]))
    (t).insert(0,i)
    outfile.writerow(t)
</code></pre>
<p>this script will give you output file as result.csv that tells your pair-wise t-test calculation</p>
</div>
