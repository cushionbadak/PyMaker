<div class="post-text" itemprop="text">
<p>Is there a way to overload the built-in function sum() so that it works on a user defined iterable? Assume the elements in the iterable can be added using +. For instance strings. </p>
<p>Specifically I want to be able to do the following</p>
<pre><code>S = StrListIterable([&lt;list of strings&gt;])
concatedList = sum(S) # returns a concatenated string of all strings in S
</code></pre>
<p>I can obviously achieve this using a simple join statement on elements of S but I was wondering if Python offers support to overload some of the standard built-ins.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>start</code> argument provides an initial value to add to. But:</p>
<pre><code>&gt;&gt;&gt; L = ['foo', 'bar', 'baz']
&gt;&gt;&gt; sum(L, '')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: sum() can't sum strings [use ''.join(seq) instead]
&gt;&gt;&gt; ''.join(L)
'foobarbaz'
</code></pre>
</div>
<span class="comment-copy">You should be able to check which method <code>sum</code> uses and have a class which implements it</span>
<span class="comment-copy">You can already use it on iterables of things besides integers.  It just has a specific block to prevent you from using it on strings.</span>
<span class="comment-copy"><code>sum</code> can certainly work with non-numeric types, you just have to give it a suitable starting value. However, as <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer">the <code>sum</code> docs</a> and several people here have mentioned it will complain if you try to use it to join strings. But you can do, eg,  <code>sum(list_of_lists, [])</code> to concatenate a bunch of lists.</span>
<span class="comment-copy">The reason that <code>sum</code> won't concatenate strings is that it would be inefficient compared to using <code>.join</code>. Similar remarks apply to string concatenation via <code>reduce</code>, although using <code>reduce</code> (or <code>+=</code> in a <code>for</code> loop) isn't as bad as it was before Python 2.5 because <code>str</code> has had some optimizations to handle this type of concatenation because so many people were using <code>+</code> concatenation instead of <code>.join</code>. Some people are <i>not</i> happy about this, eg Python core dev <a href="https://stackoverflow.com/a/1350289/4014959">Alex Martelli</a>.</span>
