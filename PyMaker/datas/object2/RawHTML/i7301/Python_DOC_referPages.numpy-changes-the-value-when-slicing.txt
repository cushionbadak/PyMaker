<div class="post-text" itemprop="text">
<p>I am using simple formula</p>
<pre><code>beta = covariance[0,1]/covariance[1,1]
</code></pre>
<p>where covariance is </p>
<pre><code>[[  1.96330748e-05   2.39329295e-05]
 [  2.39329295e-05   1.05846999e-04]]
</code></pre>
<p>when I print</p>
<pre><code>covariance[1,1]
</code></pre>
<p>NumPy returns 0.000105846998912 instead of 1.05846999e-04, changing the value of original item in array, and i am experiencing this problem only when I run this covariance[1,1] statement in my terminal. If I run the same stuff in Jupiter it works just fine. Can you help me?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>0.000105846998912</code> is equal to <code>1.05846999e-04</code>. </p>
<p>One is scientific notation and the other isn't.</p>
</div>
<div class="post-text" itemprop="text">
<p>Most of the "floating point" are wrong questions relate to the difference between the formatting and internal representation of a floating point. The computer can't represent the "formatted" floating point exactly. </p>
<p>Things to be aware of are what kind of floating point am I using, for example here you could check if you are using a <a href="https://docs.scipy.org/doc/numpy/user/basics.types.html" rel="nofollow noreferrer">float32</a> or <code>float64</code> type array. You can check this by typing:</p>
<pre><code>covariance.dtype
</code></pre>
<p>You can set the details of how values are printed using the <code>set_printoptions</code> <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.set_printoptions.html" rel="nofollow noreferrer">function</a> from numpy. Also make sure you are aware of how floating point values are <a href="https://docs.python.org/3/tutorial/floatingpoint.html#floating-point-arithmetic-issues-and-limitations" rel="nofollow noreferrer">printed</a>, in different python versions. </p>
<p>This is what you would call a "reproducible" example:</p>
<pre><code>import numpy as np
covariance = np.array(
    [
        [1.96330748e-05, 2.39329295e-05],
        [2.39329295e-05, 1.05846999e-04]
    ],
    dtype="double"
)
print(covariance[1, 1])
print(repr(covariance[1, 1]))
print("{:.20f}".format(covariance[1, 1]))

beta = covariance[0, 1] / covariance[1, 1]
print("{:.20f}".format(beta))

# this generates the "wrong" answer you mention in the comments under your answer.
wrong_beta = covariance[0, 1] / covariance[0, 0]
print("{:.20f}".format(wrong_beta))
</code></pre>
<p>If I run it under jupyter with python3.5 I get:</p>
<pre><code>0.000105846999
0.000105846999
0.00010584699900000000
0.22610872038044271815
1.21901076340828695699
</code></pre>
<p>If I run it under python console I get the same answer. </p>
</div>
<span class="comment-copy">The two are the same. The only difference is <i>how</i> numpy and Python repesent floating points.</span>
<span class="comment-copy">yes, but why when i do covariance[0,1] I am getting 2.39329295e-05 and can not get 1.05846999e-04 with covariance[1,1]?</span>
<span class="comment-copy">If the problem is that you get different results, you might want to make a simple reproducible example where you show how to get different results. The above example does not allow me to paste the code and confirm your "wrong" answer.</span>
<span class="comment-copy">"scientific" is not a data type. It is simply the <i>way a float is being printed to the screen</i>. This is almost <i>certainly</i> not the source of the discrepancy. Again, it would be great if you could provide a reproducible example, or, at least an example of your jupyter output vs your terminal output.</span>
<span class="comment-copy">@ArtYudin Also, are you sure you aren't doing <code>covariance[1,0] / covariance[0,0]</code> accidentally? That would explain the result of <code>1.219811444283643</code></span>
<span class="comment-copy">yes, but why when i do covariance[0,1] I am getting 2.39329295e-05   and can not get 1.05846999e-04 with covariance[1,1]?</span>
<span class="comment-copy">Checked, float64, problem not with printing, problem with the formula where the same array yields different results with the same syntax beta = covariance[0,1]/covariance[1,1]</span>
<span class="comment-copy">@ArtYudin you haven't actually demonstrated this...</span>
