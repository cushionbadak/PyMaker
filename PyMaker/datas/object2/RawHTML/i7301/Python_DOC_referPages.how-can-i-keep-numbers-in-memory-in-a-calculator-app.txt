<div class="post-text" itemprop="text">
<p>I am making a calculator with a GUI but I don't know how to keep track of a number so that I can use it later on with a second number to perform an operation.</p>
<p>My code is as follows:</p>
<pre><code>def Sum():
    Plus = pygame.image.load(os.path.abspath("plus.png"))
    screen.blit(Plus,(555,34))
    c=a+b
    return c

def Sustraction():
    Minus = pygame.image.load(os.path.abspath("minus.png"))
    screen.blit(Minus,(555,34))
    c=a-b
    return c

def Multiplication():
    Times = pygame.image.load(os.path.abspath("Times.png"))
    screen.blit(Times,(555,34))
    c=a*b
    return c

def Division():
    Division = pygame.image.load(os.path.abspath("Division.png"))
    screen.blit(Division,(555,34))
    c=a/b
    return c

def button (msg, x, y, w, h, ic, ac, action=None ):
    mouse = pygame.mouse.get_pos()
    click = pygame.mouse.get_pressed()

if (x+w &gt; mouse[0] &gt; x) and (y+h &gt; mouse[1] &gt; y):
    pygame.draw.rect(CALCULATOR, WHITE, (x, y, w, h))
    if (click[0] == 1 and action != None):
        if (action == "Sum"):
            Sum()
        elif  (action == "Substraction"):
            Substraction()
        elif  (action == "Multiplication"):
            Multiplication()
        elif  (action == "Division"):
            Division()

        if  (action == "One"):
            One()
            a=1
            return a

        elif  (action == "Two"):
            Two()
            a=2
            return a

        elif  (action == "Three"):
            Three()
            a=3
            return a
</code></pre>
<p>So as you can see in my functions definition, when I call <code>Sum</code> I use <code>c=a+b</code>. The problem is I don't know how to keep <code>a</code> in memory to use it for the sum operation with <code>b</code>, because of this I don't know how to input a new value and save it in <code>b</code>.</p>
<p>How can I store the value of <code>a</code> while having the user input a new value into <code>b</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, you should try to use  <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">class</a>.</p>
<p>If its about your question. Simply use functions parameters.
Example with sum function:</p>
<pre><code>def Sum(a, b):
    Plus = pygame.image.load(os.path.abspath("plus.png"))
    screen.blit(Plus,(555,34))
    c=a+b
    return c
</code></pre>
<p>If you want to do it in "real time" you can use only 1 parameter and keep result as class member.</p>
<pre><code>def Sum(a):
    Plus = pygame.image.load(os.path.abspath("plus.png"))
    screen.blit(Plus,(555,34))
    self.result += a
</code></pre>
<p>If it does not suffice read about <a href="https://en.wikipedia.org/wiki/Reverse_Polish_notation" rel="nofollow noreferrer">Reverse Polish notation</a></p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>In Python, variables that are only referenced inside a function are
  implicitly global. If a variable is assigned a value anywhere within
  the function’s body, it’s assumed to be a local unless explicitly
  declared as global.
  - <a href="https://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python" rel="nofollow noreferrer">What are the rules for local and global variables in Python?</a></p>
</blockquote>
<p>Therefore when you assign a variable <code>a</code> and <code>c</code> in the function, it is created as a local variable. If you would try to use it before assignment, as example:</p>
<pre><code>def increment():
    c += 1
    return c
</code></pre>
<p>you would get <code>UnboundLocalError: local variable 'c' referenced before assignment</code> exception.</p>
<p>I think in your example you would also get a <code>NameError: name 'a' is not defined</code> exception if you would call <code>Sum()</code> before <code>button()</code> callback is executed, as <code>a</code> is not yet defined. That is because <code>a</code> is referenced in the function, but not assigned - therefore is not created as a local variable, however it is also not to be found anywhere in global namespace.</p>
<p>The easiest solution would be to use <em>global</em> variables. Not that whenever you want to use global variable instead of creating a local one, you need to show it in the local context with the <code>global</code> keyword:</p>
<pre><code>a = 0
b = 0
c = 0

def sum():
    global a, b
    Plus = pygame.image.load(os.path.abspath("plus.png"))
    screen.blit(Plus,(555,34))
    c = a + b
    return c

def button(msg, x, y, w, h, ic, ac, action=None):
    mouse = pygame.mouse.get_pos()
    click = pygame.mouse.get_pressed()
    global a

    if ....
</code></pre>
<p>However I would suggest using class and store values as a properties, as example:</p>
<pre><code>class Calculator:
    def __init__(self) -&gt; None:
        self.x = 0
        self.result = 0

        self.screen = ...  # Your initialization

        self.actions = {
            "Sum": self.sum,
            "Substraction": self.subtract,
            "Multiplication": self.multiply,
            "Division": self.divide
        }
        self.numbers = {
            "One": 1,
            "Two": 2,
            "Three": 3
        }

    def sum(self, x):
        plus = pygame.image.load(os.path.abspath("plus.png"))
        self.screen.blit(plus, (555, 34))
        self.result += x

    def subtract(self, x):
        minus = pygame.image.load(os.path.abspath("minus.png"))
        self.screen.blit(minus, (555, 34))
        self.result -= x

    def multiply(self, x):
        times = pygame.image.load(os.path.abspath("Times.png"))
        self.screen.blit(times, (555, 34))
        self.result *= x

    def divide(self, x):
        division = pygame.image.load(os.path.abspath("Times.png"))
        self.screen.blit(division, (555, 34))
        if x != 0:
            self.result /= x
        else:
            print("I refuse to divide by 0.")

    def button(self, msg, x, y, w, h, ic, ac, action=None):
        mouse = pygame.mouse.get_pos()
        click = pygame.mouse.get_pressed()

        if ((x + w) &gt; mouse[0] &gt; x) and ((y + h) &gt; mouse[1] &gt; y):
            pygame.draw.rect(CALCULATOR, WHITE, (x, y, w, h))

            if (click[0] == 1) and (action is not None):
                if action in self.actions:
                    self.actions[action]()
                elif action in self.numbers:
                    self.x = self.numbers[action]
</code></pre>
<p>In this example I also used <a href="https://docs.python.org/3.4/library/stdtypes.html#dict" rel="nofollow noreferrer"><code>in</code></a> keyword and dictionary of values, which simplify selection instead of using bunch of <code>if</code>-<code>elif</code> cases.</p>
</div>
<span class="comment-copy">First of all, all your operation functions should be parametrized e.g. <code>def Sum(a,b): .... ; c= a+b; return a+b</code>. This way you can then use multiple values of a, b variables. Also in your code you should first define action to do, then set variables a,b etc. and <b>after that</b> call <code>Sum(a,b)</code> or <code>Substraction(a,b)</code> or  <code>Multiplication(a,b)</code> or any other operation basing on action.</span>
<span class="comment-copy">I don't see how the postfix notation is related.</span>
<span class="comment-copy">Well what I mean is reversing infix expression and store it as postfix so u dont do any operations before pressing "=" button.</span>
