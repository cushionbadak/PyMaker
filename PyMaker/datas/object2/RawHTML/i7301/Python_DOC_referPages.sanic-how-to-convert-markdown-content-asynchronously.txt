<div class="post-text" itemprop="text">
<p>I have the following Sanic route:</p>
<pre><code>md = Markdown()

@app.route('/md_file')
async def md_file(request):
    async with aiofiles.open('./file.md')) as f:
        content = await f.read()

    content = md.convert(content)
    return html(content)
</code></pre>
<p>This works just fine but the conversion takes a very long time and blocks the endpoint. When benchmarking, the endpoint can only handle 4 requests per second.</p>
<p>Since there is no asyncio markdown library, I figured I would offload the conversion into a separate thread to free up the blocking code:</p>
<pre><code>loop = asyncio.get_event_loop()
content = await loop.run_in_executor(ThreadPoolExecutor(), md.convert(content))
</code></pre>
<p>However, this throws a traceback:</p>
<pre><code>2017-07-22 12:02:24 - (sanic)[ERROR]: Traceback (most recent call last):
  File "/home/user/app/venv/lib64/python3.5/site-packages/sanic/app.py", line 471, in handle_request
    response = await response
  File "app.py", line 127, in blog_posts
    content = await loop.run_in_executor(ThreadPoolExecutor(), md.convert(content))
  File "uvloop/future.pyx", line 241, in __await__ (uvloop/loop.c:110786)
  File "uvloop/future.pyx", line 432, in uvloop.loop.BaseTask._fast_wakeup (uvloop/loop.c:113980)
  File "uvloop/future.pyx", line 101, in uvloop.loop.BaseFuture._result_impl (uvloop/loop.c:108900)
  File "/opt/rh/rh-python35/root/usr/lib64/python3.5/concurrent/futures/thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
TypeError: 'str' object is not callable
</code></pre>
<p>Is it not possible to use the event loop from within Sanic? Are there any other options to make the conversion non-blocking?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>md.convert(content)</code> <em>actually runs</em> the function. This:</p>
<pre><code>content = await loop.run_in_executor(ThreadPoolExecutor(), md.convert(content))
</code></pre>
<p>is the same as this:</p>
<pre><code>content = await loop.run_in_executor(ThreadPoolExecutor(), "some HTML")
</code></pre>
<p>And that is quite obviously wrong. You don't want to run the function. You want to <em>pass</em> the function; the executor will handle running it. The <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.run_in_executor" rel="nofollow noreferrer">signature of <code>run_in_executor</code></a> is</p>
<blockquote>
<pre><code>coroutine AbstractEventLoop.run_in_executor(executor, func, *args)
</code></pre>
</blockquote>
<p>So use this instead</p>
<pre><code>content = await loop.run_in_executor(ThreadPoolExecutor(), md.convert, content)
</code></pre>
</div>
<span class="comment-copy">Ahhh, duh! Thank you, that worked perfectly of course. Side note: it's still fairly slow, only 20 requests per second. I guess that's the extra overhead of the separate thread.</span>
<span class="comment-copy">I can't say anything about that. When converting the markdown takes a while then it takes a while, multi-threading it will only do so much. Maybe there is a faster library around. Or a faster non-Python tool.</span>
<span class="comment-copy">Understood, thank you again!</span>
