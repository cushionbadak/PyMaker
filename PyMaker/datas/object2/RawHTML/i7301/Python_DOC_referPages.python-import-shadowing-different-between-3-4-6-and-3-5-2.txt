<div class="post-text" itemprop="text">
<p>Python import shadowing seems to be different between version 3.4.6 and 3.5.2 :</p>
<pre><code>$ cat time.py
from time import time
$ pyenv global 3.4.6
$ python -V
Python 3.4.6
$ python time.py 
Traceback (most recent call last):
  File "time.py", line 1, in &lt;module&gt;
    from time import time
  File "/home/vagrant/tmp/time.py", line 1, in &lt;module&gt;
    from time import time
ImportError: cannot import name 'time'
$ pyenv global 3.5.2 
$ python -V
Python 3.5.2
$ python time.py
$ echo no error
no error
</code></pre>
<p>Question 1: Why is... those things ?</p>
<p>Question 2: Is it there something in a changelog about that ? I can't find anything...</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/tutorial/modules.html#the-module-search-path" rel="noreferrer">The documentation</a> states that</p>
<blockquote>
<p>When a module named <code>spam</code> is imported, <strong>the interpreter first searches
  for a built-in module with that name</strong>. If not found, it then searches
  for a file named <code>spam.py</code> in a list of directories given by the
  variable <code>sys.path</code>.</p>
</blockquote>
<p>(emphasis mine)</p>
<p><code>time</code> wasn't a built-in module module in Python 3.4, but that changed in Python 3.5:</p>
<pre><code>me@temp:~$ python3.4 -c 'import sys; print("time" in sys.builtin_module_names)'
False
me@temp:~$ python3.5 -c 'import sys; print("time" in sys.builtin_module_names)'
True
</code></pre>
<p>You can see the patch that introduced the change <a href="https://github.com/python/cpython/commit/2c0a91606105e1606d886c198ea7ed1b195c692f#diff-d298ad39cf8496884678269f23f24682" rel="noreferrer">here</a> (related to <a href="https://bugs.python.org/issue5309" rel="noreferrer">issue 5309</a>). Considering that the changelog <a href="https://docs.python.org/3/whatsnew/3.5.html#distutils" rel="noreferrer">mentions the issue 5309</a>, but doesn't say anything re. the <code>time</code> module, it's safe to say that the change was a side-effect and is an implementation detail of CPython.</p>
<p>Since <code>time</code> isn't a built-in module in CPython 3.4, and the first directory in <a href="https://docs.python.org/3/library/sys.html#sys.path" rel="noreferrer"><code>sys.path</code></a> is the current script directory, <code>from time import time</code> attempts to import the <code>time</code> attribute from your <code>time.py</code> file, but fails and throws the <code>ImportError</code>.</p>
<p>In CPython 3.5 <code>time</code> <em>is</em> a built-in module. As per the quote above, running <code>from time import time</code> successfully imports the built-in module, without searching for modules on <code>sys.path</code>.</p>
<p>Both CPython versions will raise the same error if you shadow a non-builtin module from the standard library, such as <code>inspect</code>:</p>
<pre><code>me@temp:~$ cat inspect.py 
from inspect import signature
me@temp:~$ python3.4 -c 'import inspect'
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
  File "/home/me/inspect.py", line 1, in &lt;module&gt;
    from inspect import signature
ImportError: cannot import name 'signature'
me@temp:~$ python3.5 -c 'import inspect'
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
  File "/home/me/inspect.py", line 1, in &lt;module&gt;
    from inspect import signature
ImportError: cannot import name 'signature'
</code></pre>
</div>
<span class="comment-copy">What is the output of <code>python -c 'import sys; print(sys.path)'</code> for both interpreters?</span>
<span class="comment-copy">In both cases, the first path is an empty string. Impossible to paste, too much characters.</span>
