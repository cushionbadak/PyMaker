<div class="post-text" itemprop="text">
<p>Trying to make an encode process but have an error line:</p>
<p>Look at my whole fuction ,please, for the whole getting it. I think it isn't big enough.</p>
<p>Trying to add the header to the file data:</p>
<pre><code>#Add the header to the file data
    headerdata = struct.pack("4s"+\
                             "I"+\
                             str(Header.MAX_FORMAT_LENGTH)+"s",header.magicnum, header.size, header.fformat)
    filebytes = headerdata + data
</code></pre>
<p><strong>Have an error:</strong></p>
<blockquote>
<p>str(Header.MAX_FORMAT_LENGTH)+"s",header.magicnum, header.size, header.fformat)
  struct.error: argument for 's' must be a bytes object</p>
</blockquote>
<p>I was trying to change it:(this line, addin 'b')</p>
<pre><code>str(Header.MAX_FORMAT_LENGTH)+b"s",header.magicnum, header.size, header.fformat)
</code></pre>
<p><strong>Have another error:</strong></p>
<blockquote>
<p>str(Header.MAX_FORMAT_LENGTH)+b's',header.magicnum, header.size, header.fformat) TypeError: must be str, not bytes </p>
</blockquote>
<p><strong>the whole fucnton:</strong></p>
<pre><code>def encode(image, data, filename, encryption=False, password=""):
    im = Image.open(image)
    px = im.load()

    #Create a header
    header = Header()
    header.size = len(data)
    header.fformat = "" if (len(filename.split(os.extsep))&lt;2)\
                     else filename.split(os.extsep)[1]

    #Add the header to the file data
    headerdata = struct.pack("4s"+\
                             "I"+\
                             str(Header.MAX_FORMAT_LENGTH)+"s",header.magicnum, header.size, header.fformat)
    filebytes = headerdata + data

    #Optional encryption step
    if encrypt:
        if password:
            filebytes = encrypt(filebytes, password,\
                                padding=im.width*im.height - len(filebytes))
        else:
            print ("Password is empty, encryption skipped")

    #Ensure the image is large enough to hide the data
    if len(filebytes) &gt; im.width*im.height:
        print ("Image too small to encode the file. \
You can store 1 byte per pixel.")
        exit()

    for i in range(len(filebytes)):
        coords = (i%im.width, i/im.width)

        byte = ord(filebytes[i])

        px[coords[0], coords[1]] = encode_in_pixel(byte, px[coords[0],\
                                                            coords[1]])

    im.save("output.png", "PNG")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>Code</h1>
<p>since you said they are all strings, here you go</p>
<pre><code>headerdata = struct.pack("4s"+\
                             "I"+\
                             str(Header.MAX_FORMAT_LENGTH)+"s",header.magicnum.encode(), int(header.size), header.fformat.encode())
</code></pre>
<p>This should work for the formats and types you want</p>
<h1>Explanation</h1>
<p>According to <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer">this</a>, and specifically section 7.1.2.2, we can find the types needed as arguments for the following format characters:</p>
<pre><code>-----------------------------------------
|Formatting Character | Type (in python)|
-----------------------------------------
|s                    | integer         |
-----------------------------------------
|I                    | bytes           |
-----------------------------------------
</code></pre>
<p>and since the data you want to format is of type <code>str</code>, we need to change it.</p>
<p>Lets start with making a <code>str</code> to and <code>integer</code> since it's the simplest.</p>
<pre><code>&gt;&gt;&gt; x = '123'
&gt;&gt;&gt; type(x)
str
&gt;&gt;&gt; y = int(x)
&gt;&gt;&gt; type(y)
int
</code></pre>
<p>Easy, all we need to do is call <code>int()</code> on our string.</p>
<p>Next up is turning a string into bytes. We use strings <code>encode()</code> method to do this <a href="https://docs.python.org/2/library/codecs.html" rel="nofollow noreferrer">(documentation)</a></p>
<pre><code>&gt;&gt;&gt; x = '123'
&gt;&gt;&gt; type(x)
str
&gt;&gt;&gt; y = e.encode()
&gt;&gt;&gt; type(y)
bytes
&gt;&gt;&gt; print(y)
b'123'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your original code was correct, except that the type of <code>header.magicnum</code> was unexpected.  Your code snippet should read</p>
<pre><code>#Add the header to the file data
    headerdata = struct.pack("4s"+\
                             "I"+\
                             str(Header.MAX_FORMAT_LENGTH)+"s","{:04d}".format(header.magicnum).encode('UTF-8'), header.size, header.fformat)
    filebytes = headerdata + data
</code></pre>
<p>or some other suitable format code and encoding that turns <code>header.magicnum</code> into your expected result.</p>
</div>
<span class="comment-copy">Your error has to do with the other arguments, not the format string. It's saying that where in the format string there is an "s", it is expecting a bytes object. check <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer">this</a> out, look at section 7.1.2.2</span>
<span class="comment-copy">what are the types for header.magicnum, header.size, header.fformat</span>
<span class="comment-copy">@jacoblaw      it should be <code>str</code>...</span>
<span class="comment-copy">Yeah, thank you a lot, that was I really needed! Can you explain, how it goes...</span>
<span class="comment-copy">@x20 added the explanation</span>
<span class="comment-copy">Can't get. Is there some missing of ` "  `  in your answer?</span>
<span class="comment-copy">Yes there is, fixed.</span>
<span class="comment-copy">have another error, urghhhhhhh ;((((  It writes: <code>ValueError: Unknown format code 'd' for object of type 'str'</code></span>
<span class="comment-copy">If header.magicnum is already a string, then just use <code>header.magicnum.encode('UTF-8')</code>; this will convert the string into a <code>bytes</code> object (and get rid of the <code>"{:04d}".format()</code> part).</span>
<span class="comment-copy">Doing smth like this <code>str(Header.MAX_FORMAT_LENGTH)+"s",header.magicnum.encode('UTF-8'), header.size, header.fformat) struct.error: argument for 's' must be a bytes object</code>  walking around one place.. if it's <code>str</code>, trying to <code>encode</code> , why does it want bytes object?</span>
