<div class="post-text" itemprop="text">
<p>I am new to programming and I am trying to write a function that would accept filename as a parameter. This function should open the file, read it and return True if the file contains "?" in every line of the text file.
The input file may have the designated character one or more time.
This is what I have so far:</p>
<pre><code>def char_finder(filename):
    inputFile = open(filename, "r")
    for line in inputFile:
        if '?' in line:
            return True
        else:
            return False
    inputFile.close

print(char_finder("inputfile.txt"))
</code></pre>
<p>I have spent several hours looking for every possible similar solution but no results.</p>
</div>
<div class="post-text" itemprop="text">
<p>The main problem you are facing is that you are returning inside your first iteration. The <code>return</code> will end execution of your function. </p>
<p>If you are looking to check if all lines contain that '?', then the check should simply be something that will return once it does not find a '?'. If you manage to exhaust your iteration, then all lines have the '?' and you simply return True. </p>
<pre><code>def char_finder(filename):
    with open(filename, "r") as inputFile:
        for line in inputFile:
            if '?' not in line: 
                return False
    return True
</code></pre>
<p>Furthermore, notice the reading of the file is now using a context manager, which is a cleaner approach here. </p>
<p>Finally, to refactor this completely, we can make use of the <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer">all</a> function, which will iterate through the each line, and will short circuit once it finds an unmatching condition. It is pretty much exactly what was shown above, but all the work is done for us: </p>
<pre><code>def char_finder(filename):
    with open(filename, "r") as inputFile:
        return all('?' in line for line in inputFile)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>all()</code> to ensure that all lines passed your condition. For example:</p>
<pre><code>def char_finder(filename, char):  # lets make it a bit more universal
    with open(filename, "r") as f:
        return all(char in line for line in f)

print(char_finder("inputfile.txt", "?"))
</code></pre>
</div>
<span class="comment-copy">Loop through all lines: if one does <i>not</i> contain a <code>?</code> (your actual code suggests a <code>!</code>), return <code>False</code>. Then, at the end of the function, simply return <code>True</code>.</span>
<span class="comment-copy">Use the <code>with</code> statement to open the file and automatically close it. Note: <code>inputFile.close</code> does <i>not</i> call the <code>close</code> method, hence it doesn't actually close the file.</span>
<span class="comment-copy">And even if it were <code>inputFile.close()</code> with the parentheses to actually call the function, it would only be called if the code actually gets to that line. <code>with</code> is definitely your friend here. All in all, this is a nice first attempt for a beginning programmer.</span>
<span class="comment-copy">One very important thing: Do you have a Python debugger and know how to use it? You would be able to step through your code line by line and see what it actually does and what the variables contain. It's one of the best learning tools there is. Try <a href="https://code.visualstudio.com/" rel="nofollow noreferrer">Visual Studio Code</a> with a <a href="https://code.visualstudio.com/docs/languages/python" rel="nofollow noreferrer">Python extension</a>, or <a href="http://winpdb.org/" rel="nofollow noreferrer">Winpdb</a>.</span>
<span class="comment-copy">@MichaelGeary: Thank you for the suggestion. Just started looking at Visual Studio Code with Python extension and its debugging option. It appears that it can be very handy and I think that I will have to learn it though it may take quite some time. Any suggestions how to learn debugging?</span>
<span class="comment-copy">Awesome. Thank you so much.</span>
