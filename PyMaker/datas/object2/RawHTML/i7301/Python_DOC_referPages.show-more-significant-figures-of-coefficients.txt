<div class="post-text" itemprop="text">
<p>I'm running a number of regressions I want to superficially compare with Stata, to ensure my code works as I migrate from Stata to Python.</p>
<p>i.e <code>statsmodels.formula.api('x ~ y')</code> outputs</p>
<pre><code>                coef    std err          t      P&gt;|t|      [0.025      0.975]
------------------------------------------------------------------------------
Intercept      2.9420      0.287     10.265      0.000       2.380       3.504
</code></pre>
<p>Whereas Stata provides</p>
<pre><code>------------------------------------------------------------------------------
         med |      Coef.   Std. Err.      t    P&gt;|t|     [95% Conf. Interval]
-------------+----------------------------------------------------------------
       _cons |    2.94203   .2866093    10.26   0.000     2.380268    3.503792
</code></pre>
<p>I'd essentially like the output to match exactly. I know this can probably done under the hood by saving the coefficients, but it's far easier at a glance.</p>
</div>
<div class="post-text" itemprop="text">
<p>The (hacky) way I have achieved this is by editing the statsmodels library file <code>iolib\summary.py</code>, and including Stata-like rounding. It's not perfect, but it will do the job for the moment.</p>
<pre><code>def forg(x, prec=3):
    if prec == 3:
    #for 3 decimals
        if (abs(x) &gt;= 1e4) or (abs(x) &lt; 1e-4):
            return '%9.3g' % x
        else:
            return '%9.3f' % x
    elif prec == 4:
        if (abs(x) &gt;= 1e4) or (abs(x) &lt; 1e-4):
            return '%10.4g' % x
        else:
            return '%10.4f' % x
    elif prec == 10: #stata like coefficient rounding
        return round(x,2)
    elif prec == 11: #stata like t-stat rounding
        return round(x,7)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're just looking to increase the number of decimal places so that you can visually compare the values, you can use </p>
<blockquote>
<p>pd.set_option('display.float_format', lambda x: '%.2f' % x)</p>
</blockquote>
<p>replacing "2" with the number of decimal places you would like to display.</p>
<p>Note: this changes the number of decimal places for <strong>all</strong> floats in your dataframes.</p>
</div>
<span class="comment-copy">Thanks, but this doesn't appear to do for the statsmodels output. I think it's going to be a matter of editing the codebase directly.</span>
<span class="comment-copy">is the output text? I suppose there is a method to get the raw numbers (as DataFrame/Series?), and then use <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow noreferrer">String formatting</a></span>
