<div class="post-text" itemprop="text">
<p>I am importing a module with a few functions which connect to a database. I call functions from that module like so:</p>
<p><code>main.py:</code></p>
<pre><code>import data_source as DS

DS.get_data(type_of_data)
DS.get_some_other_data(type_of_data)
</code></pre>
<p><code>data_source.py:</code></p>
<pre><code>def get_data(type_of_data):
  # connect to db and return a dictionary

def get_some_other_data(type_of_data):
  # connect to db and return a dictionary
</code></pre>
<p>Every function established a database connection. I am trying to reduce code duplication so I can have a function which connects to the DB like so:</p>
<p>in <code>data_source.py</code>:</p>
<pre><code>def connect_to_db():   
 # connect to bd and return connection to caller
</code></pre>
<p>but i would have to call <code>connect_to_db()</code> from every <code>function</code>. Is there a way to ensure if a function from an imported module is called another function runs by default? so I dont have to have <code>connect_to_db</code> as the top like in every function within <code>data_source.py</code>? and so the connection isn't made for every single call? </p>
<p>I know it wouldnt hurt the performance for my purposes but I am just curious. I know I can pass the connection back to the caller after the first call and then for the subsequent call(s) I can pass the connection to the function in the imported module but that is something I want to avoid doing.</p>
<p>like when you do <code>python main.py</code> everything under <code>if __name__ == "main":</code> is run is there perhaps something like</p>
<p><code>if __function_is_being_called__:</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/glossary.html#term-decorator" rel="nofollow noreferrer">decorator</a> to first call <code>connect_to_db</code>, then call the function as normal:</p>
<pre><code>import functools

def with_db_connection(f):
    @functools.wraps(f)
    def wrapper(*args, **kwargs):
        connect_to_db()
        return f(*args, **kwargs)
    return wrapper

@with_db_connection
def get_data(type_of_data):
    ...
</code></pre>
<p>You can also make it pass a database argument to avoid global variables:</p>
<pre><code>import functools

def with_db_connection(f):
    @functools.wraps(f)
    def wrapper(*args, **kwargs):
        db = connect_to_db()
        return f(db, *args, **kwargs)
    return wrapper

@with_db_connection
def get_data(db, type_of_data):
    ...

get_data('string')  # db argument is passed in through the decorator
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't know how you define your <code>data_source.py</code>, but its globals are more than enough as long as you immediately execute your function that sets up the stage for all the other functions, e.g.:</p>
<pre><code># data_source.py
connection_status = 0  # initial status is set to 0

def connect_to_db():
    global connection_status
    connection_status = 1  # this can be your dependent variable
connect_to_db()  # call it immediately, this will execute on first import

def get_data():
    print("Current connection status: {}".format(connection_status))

def get_some_other_data():
    print("Current connection status: {}".format(connection_status))
</code></pre>
<p>And now if you import it anywhere:</p>
<pre><code>import data_source as DS

# even at this point DS.connection_status is already 1

DS.get_data()  # Current connection status: 1
DS.get_some_other_data()  # Current connection status: 1
</code></pre>
<p>Here's a simple setup with an in-memory SQLite instance:</p>
<pre><code># data_source.py
import sqlite3

connection = None  # holds connection to the database

def connect_to_db():
    global connection
    connection = sqlite3.connect(":memory:")  # create an in-memory DB
    cursor = connection.cursor()  # create a local cursor
    # let's create a simple squares table from 1 to 100
    cursor.execute("CREATE TABLE squares (num INTEGER PRIMARY KEY, square INTEGER)")
    for i in range(1, 101):  # fill the table
        cursor.execute("INSERT INTO squares (num, square) VALUES ({}, {})".format(i, i**2))
connect_to_db()

def get_square(num):
    cursor = connection.cursor()  # create a local cursor
    cursor.execute("SELECT square FROM squares WHERE num={}".format(num))
    data = cursor.fetchone()
    return data[0] if data else None

def get_square_root(num):
    cursor = connection.cursor()  # create a local cursor
    cursor.execute("SELECT num FROM squares WHERE square={}".format(num))
    data = cursor.fetchone()
    return data[0] if data else None
</code></pre>
<p>And when you want to use it:</p>
<pre><code>import data_source as DS

print("43 squared: {}".format(DS.get_square(43)))  # 43 squared: 1849
print("sqrt of 4489: {}".format(DS.get_square_root(4489)))  # sqrt of 4489: 67
</code></pre>
</div>
<span class="comment-copy">Why not just call <code>connect_to_db()</code> as soon as you define it, and before any other function in your module. It will be called immediately on the first import and it will keep its state until you reload the module.</span>
<span class="comment-copy">when i do that, if i try to set a global variable in <code>connect_to_db</code>, on subsequent calls to other funcs in the module, the value of the variable is not the changed value, it retains the initial value.</span>
<span class="comment-copy">Then you're setting your global variables wrong - make sure you're pointing to the right global namespace. i.e. do it from a module, not from your currently running script because even if they come from the same script, say 'test.py', if you run <code>test.py</code> as a standalone script and then somewhere down the line you <code>import test</code> those will be different module namespaces <code>__main__</code> and <code>test</code>.</span>
<span class="comment-copy">I have my global defined in the module with the functions. in <code>connect_to_db()</code> i change the value to it and <code>connect_to_db()</code> is called right after it is defined(verified by using print statement, also verified that value of global changes). When I call another function in the module from main, the value of global is the initial value. What am i doing wrong here?</span>
<span class="comment-copy">Without showing the function itself we cannot tell you what's wrong, but aren't you forgetting to declare your global variables as, well <code>global</code> in your <code>connect_to_db()</code> function?</span>
<span class="comment-copy">This seems promising, will try and let you know how it works. Thanks</span>
<span class="comment-copy">may I ask why the <code>@functools.wraps(f)</code> line is needed? would it be okay to omit that line?</span>
<span class="comment-copy">@pyjg <a href="https://docs.python.org/3/library/functools.html#functools.wraps" rel="nofollow noreferrer">functools.wraps</a> is another decorator that basically updates the attributes of the function. Otherwise, all the functions would be called "wrapper". This updates things like the name of the function to match the original.</span>
<span class="comment-copy">got it, so it shouldnt be left out, correct?</span>
<span class="comment-copy">@pyjg Correct. It shouldn't be left out.</span>
<span class="comment-copy">I see what my issue was, i was using the <code>global</code> keyword incorrectly. Thank you so much for this detailed explanation.</span>
