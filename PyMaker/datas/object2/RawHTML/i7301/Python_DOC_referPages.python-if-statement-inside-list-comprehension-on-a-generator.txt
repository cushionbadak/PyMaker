<div class="post-text" itemprop="text">
<p>Python 3.6</p>
<p>Consider this code:</p>
<pre><code>from itertools import groupby

result = [list(group) for key, group in groupby(range(5,15), key= lambda x: str(x)[0])]

print(result)
</code></pre>
<p>outputs:</p>
<pre><code>[[5], [6], [7], [8], [9], [10, 11, 12, 13, 14]]
</code></pre>
<p>Can I filter out the lists with <code>len &lt; 2</code> inside the list comprehension?  </p>
<p><strong>Update:</strong></p>
<p>Due to the two excellent answers given. I felt it might be worth a bench mark</p>
<pre><code>import timeit

t1 = timeit.timeit('''
from itertools import groupby
result = [group_list for group_list in (list(group) for key, group in groupby(range(5,15), key= lambda x: str(x)[0])) if len(group_list) &gt;= 2]
''', number=1000000)
print(t1)

t2 = timeit.timeit('''
from itertools import groupby
list(filter(lambda group: len(group) &gt;= 2, map(lambda key_group: list(key_group[1]),groupby(range(5,15), key=lambda x: str(x)[0]))))
''', number=1000000)
print(t2) 
</code></pre>
<p><strong>Results:</strong></p>
<pre><code>8.74591397369441
9.647086477861325
</code></pre>
<p>Looks like the list comprehension has an edge. </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">Yes</a></p>
<blockquote>
<p>A list comprehension consists of brackets containing an expression followed by a for clause, then zero or more for or if clauses. The result will be a new list resulting from evaluating the expression in the context of the for and if clauses which follow it. For example, this listcomp combines the elements of two lists if they are not equal:</p>
<pre><code>&gt;&gt;&gt; [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]
[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]
</code></pre>
<p>and itâ€™s equivalent to:</p>
<pre><code>&gt;&gt;&gt; combs = []
&gt;&gt;&gt; for x in [1,2,3]:
...     for y in [3,1,4]:
...         if x != y:
...             combs.append((x, y))
...
&gt;&gt;&gt; combs
[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]
</code></pre>
<p>Note how the order of the for and if statements is the same in both these snippets.</p>
</blockquote>
<p>Since calling <code>list(group)</code> twice doesn't work in your particular example (as it consumes the generator yielded by <code>groupby</code>), you can introduce a temporary variable in your list comprehension by using a generator expression:</p>
<pre><code>&gt;&gt;&gt; [group_list for group_list in (list(group) for key, group in groupby(range(5,15), key= lambda x: str(x)[0])) if len(group_list) &gt;= 2]
[[10, 11, 12, 13, 14]]
</code></pre>
<p>Alternately, using <code>filter</code>, <code>map</code>, and <code>list</code>:</p>
<pre><code>&gt;&gt;&gt; list(\
...   filter(lambda group: len(group) &gt;= 2,\
...     map(lambda key_group: list(key_group[1]),\
...       groupby(range(5,15), key=lambda x: str(x)[0])\
...     )\
...   )\
... )
[[10, 11, 12, 13, 14]]
</code></pre>
</div>
<span class="comment-copy">That's awesome! I knew there must be a way!</span>
