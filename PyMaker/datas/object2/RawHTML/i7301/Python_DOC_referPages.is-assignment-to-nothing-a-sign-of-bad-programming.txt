<div class="post-text" itemprop="text">
<p>I wrote a program that works perfectly, except I get feedback that says "you assigned the expression to nothing". Here is the code:</p>
<pre><code>l = input('Please insert the numbers: ')

numbers = [int(i) for i in l.split(',')]

lower_limit = int(input('Please insert the lower limit: '))
upper_limit = int(input('Please insert the uppper limit: '))

boolean_list = []

for i in numbers:
       boolean_list.append(True) if (i &gt;= lower_limit and i &lt;= upper_limit ) else  
       boolean_list.append(False)    

print(boolean_list)
</code></pre>
<p>I can first initialize <code>boolean_list</code> and then assign logical values to it, but I believe it would be much slower than my first approach (given above). I'm completely new to programming so it isn't clear to me what I'm doing wrong.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your best option to avoid this problem is to get rid off your for loop, by using a list comprehension : </p>
<pre><code>boolean_list = [i &gt;= lower_limit and i &lt;= upper_limit  for i in numbers]
</code></pre>
<p>This will use <a href="http://treyhunner.com/2015/12/python-list-comprehensions-now-in-color/" rel="nofollow noreferrer">list comprehensions</a> that are a much more efficient way to build iterators.</p>
</div>
<span class="comment-copy">There is more wrong here than assigning to nothing. You certainly shouldn't use an inline if like that.</span>
<span class="comment-copy">can you please indent the code correctly?</span>
<span class="comment-copy">And <code>i &gt;= lower_limit and i &lt;= upper_limit</code> produces a <code>True</code> or <code>False</code> result already, so why not just append <i>that</i> rather than use such a huge expression? <code>boolean_list.append(i &gt;= lower_limit and i &lt;= upper_limit)</code> would suffice. Then replace the <code>for</code> loop with <code>append</code> calls with a list comprehension: <code>boolean_list = [i &gt;= lower_limit and i &lt;= upper_limit for i in numbers]</code>.</span>
<span class="comment-copy">Oh, and you can use a chained comparison: <code>boolean_list = [lower_limit &lt;= i &lt;= upper_limit for i in numbers].</code></span>
<span class="comment-copy">Better fit on <a href="https://codereview.stackexchange.com">codereview.stackexchange.com</a></span>
<span class="comment-copy">also this is much more readable and... pythonic ;)</span>
<span class="comment-copy">It's not using a generator, it's a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>.</span>
