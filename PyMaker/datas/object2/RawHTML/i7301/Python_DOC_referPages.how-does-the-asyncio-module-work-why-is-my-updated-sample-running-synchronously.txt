<div class="post-text" itemprop="text">
<p>I have tried the following code in Python 3.6 for asyncio:
Example 1:</p>
<pre><code>import asyncio
import time

async def hello():

    print('hello')
    await asyncio.sleep(1)
    print('hello again')

tasks=[hello(),hello()]    
loop=asyncio.get_event_loop()
loop.run_until_complete(asyncio.wait(tasks))
</code></pre>
<p>Output is as expected:</p>
<pre><code>hello
hello
hello again
hello again
</code></pre>
<p>Then I want to change the asyncio.sleep into another def:</p>
<pre><code>async def sleep():
    time.sleep(1)

async def hello():

    print('hello')
    await sleep()
    print('hello again')


tasks=[hello(),hello()]    
loop=asyncio.get_event_loop()
loop.run_until_complete(asyncio.wait(tasks))
</code></pre>
<p>Output:</p>
<pre><code>hello
hello again
hello
hello again
</code></pre>
<p>It seems it is not running in an asynchronous mode, but a normal sync mode.</p>
<p>The question is: Why is it not running in an asynchronous mode and how can I change the old sync module into an 'async' one?</p>
</div>
<div class="post-text" itemprop="text">
<p>Asyncio uses an <em>event loop</em>, which selects what <em>task</em> (an independent call chain of coroutines) in the queue to activate next. The event loop can make intelligent decisions as to what task is ready to do actual work. This is why the event loop also is responsible for <a href="https://docs.python.org/3/library/asyncio-eventloop.html#creating-connections" rel="nofollow noreferrer">creating connections</a> and <a href="https://docs.python.org/3/library/asyncio-eventloop.html#watch-file-descriptors" rel="nofollow noreferrer">watching file descriptors</a> and other I/O primitives; it gives the event loop insight into when there are I/O operations in progress or when results are available to process.</p>
<p>Whenever you use <code>await</code>, there is an opportunity to return control to the loop which can then pass control to another task. Which task then is picked for execution depends on the exact implementation; the <code>asyncio</code> reference implementation <a href="https://docs.python.org/3/library/asyncio-eventloops.html#available-event-loops" rel="nofollow noreferrer">offers multiple choices</a>, but there are other implementations, such as the very, very efficient <a href="http://uvloop.readthedocs.io/" rel="nofollow noreferrer">uvloop implementation</a>.</p>
<p>Your sample is <em>still asynchronous</em>. It just so happens that by replacing  the <code>await.sleep()</code> with a synchronous <code>time.sleep()</code> call, inside a new coroutine function, you introduced 2 coroutines into the task callchain that don't yield, and thus influenced in what order they are executed. That they are executed in what appears to be synchronous order is a <em>coincidence</em>. If you switched event loops, or introduced more coroutines (especially some that use I/O), the order can easily be different again.</p>
<p>Moreover, your new coroutines use <code>time.sleep()</code>; this makes your coroutines <em>uncooperative</em>. The event loop is not notified that your code is waiting (<code>time.sleep()</code> will not yield!), so <em>no other coroutine can be executed</em> while <code>time.sleep()</code> is running. <code>time.sleep()</code> simply <em>doesn't return or lets any other code run</em> until the requested amount of time has passed. Contrast this with the <a href="https://github.com/python/cpython/blob/v3.6.1/Lib/asyncio/tasks.py#L462-L478" rel="nofollow noreferrer"><code>asyncio.sleep()</code> implementation</a>, which simply yields to the event loop with a <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.call_later" rel="nofollow noreferrer"><code>call_later()</code> hook</a>; the event loop now knows that that task won't need any attention until a later time.</p>
<p>Also see <a href="https://stackoverflow.com/questions/53264314/asyncio-why-isnt-it-non-blocking-by-default">asyncio: why isn't it non-blocking by default</a> for a more in-depth discussion of how tasks and the event loop interact. And if you must run <em>blocking, synchronous code</em> that can't be made to cooperate, then use an <a href="https://docs.python.org/3/library/asyncio-eventloop.html#executing-code-in-thread-or-process-pools" rel="nofollow noreferrer">executor pool</a> to have the blocking code executed in a separate tread or child process to free up the event loop for other, better behaved tasks.</p>
</div>
<span class="comment-copy">Hi Martijn, Thanks a lot for the answer. then if I have an old sync def or method, how can I change them into an asynchronous one?</span>
<span class="comment-copy">You must either rewrite the function in async manner (there are many ready libs e.g. for pg, redis, http...  mainly some io stuff) or use executors (mainly for use with cpu-intensive stuff) like <code>ThreadPoolExecutro</code> and <code>ProcessPoolExecutor</code> (<a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a>). More examples can be found at <a href="https://pymotw.com/3/asyncio/executors.html" rel="nofollow noreferrer">pymotw.com/3/asyncio/executors.html</a></span>
<span class="comment-copy">@user7936694: exactly what kwarunek said; put code you can't make async in an executor, which then pretends your code is async by executing it under a different thread or in a separate process.</span>
<span class="comment-copy">Hi Martijn, thank a lot, seems it will take a while to change my old code into an asynchronous one :)</span>
