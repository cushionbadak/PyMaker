<div class="post-text" itemprop="text">
<p>I have a list of numerical values, for example <code>my_list = [1,34,56,2,7,89,12,13,10,56,43,12,78,98,5,105,1,2]</code> and a set of predefined groups:</p>
<pre><code>group1 - values between 0 and 5,
group2 - values between 6 and 12,
group3 - values between 13 and 25,
group4 - values between 26 and 60,
group5 - values between 61 and inf,
</code></pre>
<p>I would like to obtain the following:</p>
<pre><code>{1: [1,2,1,2,5],
2: [7,12,10,12],
3: [13],
4: [34,56,56,43],
5: [89,78,98,105]} 
</code></pre>
<p>One way of doing it is to make a for loop and check the if-elif-else condition for each element, as below:</p>
<pre><code>for element in my_list:
    if 0 &lt;= element &lt;= 5:
       groups[1].append(element)
    elif 6 &lt;= element &lt;= 12:
       groups[2].append(element)
    elif ...
</code></pre>
<p>Is there any way to group the elements of the list which is faster and a little bit more elegant? The real my_list which I'm using is large, so any way to optimize would be great!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/bisect.html" rel="noreferrer">bisect</a> module for this.</p>
<p>Here for each item in <code>my_list</code> we will find the index where it can fit in <code>groups</code> list and that index will act as the group number.</p>
<pre><code>&gt;&gt;&gt; import bisect

&gt;&gt;&gt; groups = [0, 6, 13, 26, 61]
&gt;&gt;&gt; output = {}
&gt;&gt;&gt; for x in my_list:
...     index = bisect.bisect_right(groups, x)
...     output.setdefault(index, []).append(x)
...

&gt;&gt;&gt;
&gt;&gt;&gt; output
{1: [1, 2, 5, 1, 2],
 4: [34, 56, 56, 43],
 2: [7, 12, 10, 12],
 5: [89, 78, 98, 105],
 3: [13]}
</code></pre>
</div>
<span class="comment-copy">This helped, thanks!</span>
