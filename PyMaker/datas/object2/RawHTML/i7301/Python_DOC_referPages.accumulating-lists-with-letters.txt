<div class="post-text" itemprop="text">
<p>I'm trying to right a code that accumulates a list.
The code I've figured out so far does that but I want to make it work with letters e.g. 
accumulate("a", "b", "c")
would come out to be a, ab, abc.</p>
<pre><code>def accumulate(L):
    theSum = 0
    for i in L:
        theSum = theSum + i
        print(theSum)
    return theSum

accumulate([1, 2, 3])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While @WillemVanOnsem has provided you with the method that would work, to shorten your code you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer"><code>itertools.accumulate</code></a> from the standard library:</p>
<pre><code>&gt;&gt;&gt; from itertools import accumulate
&gt;&gt;&gt; 
&gt;&gt;&gt; for step in accumulate(['a', 'b', 'c']):
    print(step)


a
ab
abc
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>import string

l = string.ascii_lowercase

the_list = []

letter = ""

for i in l:
    letter += i
    the_list.append(letter)
</code></pre>
<p>Even better in a function with a generator:</p>
<pre><code>def accumulation():
     l = string.ascii_lowercase
     letter = ""
     for i in l:
        letter += i
        yield letter

the_letters = list(accumulation())
print(the_letters)
</code></pre>
<p>Output:</p>
<pre><code>['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk', ...]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to let it work with strings, you have to <strong>initialize it with an empty string</strong>:</p>
<pre><code>def accumulate(<b>*args</b>):
    <b>theSum = ''</b>
    for i in <b>args</b>:
        theSum += i  # we can here shorten it to += (kudos to @ChristianDean)
        print(theSum)
    return theSum</code></pre>
<p>Furthermore if you want to use an arbitrary number of arguments, you should use <code>*args</code> (or <code>*L</code>).</p>
<p>Now of course this will no longer work with numbers. The <code>theSum += i</code> is <em>here</em> short for <code>theSum = theSum + i</code> (since strings are immutable). Note however that this is <em>not</em> always the case: for lists there is a difference for instance.</p>
<p>Now it prints:</p>
<pre><code>&gt;&gt;&gt; accumulate("a", "b", "c")
a
ab
abc
'abc'
</code></pre>
<p>The last <code>'abc'</code> is not a result of a <code>print(..)</code> statement, but it is the <code>return</code> of the <code>accumulate</code> function.</p>
</div>
<span class="comment-copy">Just declare <code>theSum</code> as an empty string: <code>theSum = ""</code></span>
<span class="comment-copy">@zwer pedantic nitpick, but that isn't a declaration - Python doesn't <i>have</i> variable declarations.</span>
<span class="comment-copy">@juanpa.arrivillaga - fair point, but too late to edit... <code>s/declare/initialize/</code>.</span>
<span class="comment-copy">Also note that <code>theSum = theSum + i</code> could be shortened to <code>theSum += i</code>.</span>
<span class="comment-copy">@ChristianDean: yes. Added to the answer :).</span>
