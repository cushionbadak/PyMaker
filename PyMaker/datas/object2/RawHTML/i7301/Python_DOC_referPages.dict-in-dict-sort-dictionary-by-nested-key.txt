<div class="post-text" itemprop="text">
<p>I wanted to sort my dictionary in reverse order, order by nested dict key 0: </p>
<pre><code>mydict = {
          'key1': {0: 3, 1: ["doc1.txt", "doc2.txt"], 2: ["text1", "text2"]},
          'key2': {0: 8, 1: ["doc6.txt", "doc7.txt"], 2: ["text3", "text4"]},
          'key3': {0: 1, 1: ["doc8.txt", "doc9.txt"], 2: ["text7", "text8"]},
}
</code></pre>
<p>to have this order:</p>
<pre><code>'key3': {0: 1, 1: ['doc8.txt', 'doc9.txt'], 2: ['text7', 'text8']}
'key1': {0: 3, 1: ['doc1.txt', 'doc2.txt'], 2: ['text1', 'text2']}
'key2': {0: 8, 1: ['doc6.txt', 'doc7.txt'], 2: ['text3', 'text4']}
</code></pre>
<p>I've tried:</p>
<pre><code>import operator

sorted_dict = sorted(mydict.items(), key=operator.itemgetter(0), reverse=True)
</code></pre>
<p>But no success.</p>
</div>
<div class="post-text" itemprop="text">
<p>You were close, but I'd suggest using a <code>lambda</code> function, which pulls the relevant value out of the dictionary in index one for each item;</p>
<pre><code>sorted_dict = sorted(mydict.items(), key=lambda x: x[1][0])
</code></pre>
<p>Printing the output into a format where we can easily observe the order outputs;</p>
<pre><code>for item in sorted_dict:
    print(item)
</code></pre>
<p>Which outputs;</p>
<pre><code>('key3', {0: 1, 1: ['doc8.txt', 'doc9.txt'], 2: ['text7', 'text8']})
('key1', {0: 3, 1: ['doc1.txt', 'doc2.txt'], 2: ['text1', 'text2']})
('key2', {0: 8, 1: ['doc6.txt', 'doc7.txt'], 2: ['text3', 'text4']})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of :</p>
<pre><code>sorted_dict = sorted(mydict.items(), key=operator.itemgetter(0), reverse=True)
</code></pre>
<p>you should use:</p>
<pre><code>sorted_dict = sorted(mydict.items(), key=operator.itemgetter(1))
</code></pre>
<p>It will sort the dictionary to your satisfaction!</p>
</div>
<div class="post-text" itemprop="text">
<p>Dictionaries are unordered in Python, and unless you use <code>collections.OrderedDict</code>, you will have to convert your structure to tuples and apply the <code>sorted</code> function</p>
<pre><code>my_dict = mydict.items()

final = sorted([(a, b.items()) for a, b in my_dict], key=lambda x:x[1][0][1])
</code></pre>
<p>Output:</p>
<pre><code>[('key3', [(0, 1), (1, ['doc8.txt', 'doc9.txt']), (2, ['text7', 'text8'])]), 
 ('key1', [(0, 3), (1, ['doc1.txt', 'doc2.txt']), (2, ['text1', 'text2'])]), 
 ('key2', [(0, 8), (1, ['doc6.txt', 'doc7.txt']), (2, ['text3', 'text4'])])]
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/613183/sort-a-python-dictionary-by-value">Sort a Python dictionary by value</a></span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer"><code>sorted()</code></a> creates a new sorted list – in your case a list of tuples representing the dictionary items. Dicts are still unordered in Python. <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-compactdict" rel="nofollow noreferrer">The new order preserving representation in 3.6 and newer</a> is considered an implementation detail and should not be relied upon. If you need an ordered dict, use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">collections.OrderedDict</a>.</span>
<span class="comment-copy">This isn't clear does the OP want to sort the items in his dictionary, or does he want to sort the items in is dictionary <i>and keep them in a dictionary structure</i>. If the former then @IljaEverilä's advice is the most pertinent, if the latter, then my answer is.</span>
<span class="comment-copy">Thank you for the quick answer, this sorted method kept the order of the dictionary and  the dict type. It was perfectly working with my Jinja2 templates cycling through the results. Cheers!</span>
<span class="comment-copy">@JozsefTuri No problem :)</span>
