<div class="post-text" itemprop="text">
<p>I've been trying to complete the below task in Python:</p>
<p><a href="http://codeforces.com/problemset/problem/4/C" rel="nofollow noreferrer">http://codeforces.com/problemset/problem/4/C</a></p>
<p>I created a simple script for it as can be seen below, but it returns a runtime error for the 7th test. I believe this is due to perhaps the code is taking too long, so I require assistance optimising it. I have looked at map and filter commands and tried implementing them, without success.</p>
<pre><code>a=int(input())
entered_usernames=[]
n=0
while n&lt;a:
    y=input()
    entered_usernames.append(y)
    n+=1

valid_usernames=[]
for i in entered_usernames:
    if i not in valid_usernames:
        valid_usernames.append(i)
        print('OK')
    else:
        count=1
        while i+str(count) in valid_usernames:
            count+=1
        valid_usernames.append(i+str(count))
        print(i+str(count))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try changing <code>valid_usernames</code> to a <code>set</code> instead of a <code>list</code>. </p>
<p>For a list <code>list_a</code> operation <code>x in list_a</code> takes (on average) <strong>linear time</strong>. </p>
<p>For a set <code>set_a</code> operation <code>x in set_a</code> takes (on average) <strong>constant time</strong>. </p>
<p>(source: <a href="https://wiki.python.org/moin/TimeComplexity" rel="nofollow noreferrer">https://wiki.python.org/moin/TimeComplexity</a>)</p>
<p>This simple change could improve runtime a bit.  </p>
<p>What also strikes me as potentially very slow is this fragment:</p>
<pre><code>while i+str(count) in valid_usernames:
        count+=1
</code></pre>
<p>However, if you want to improve this, you need to think about using a completely different data structure.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why don't you use a lookup <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer"><code>dict</code></a> with a counter and solve this in O(N) time?</p>
<pre><code>total = int(input())  # get the first input (total usernames)
database = {}  # our 'database' / lookup dict
candidates = [input() for _ in range(total)]  # pick usernames from the input
for candidate in candidates:  # loop through each candidate
    if candidate in database:  # already used, print with a counter
        print(candidate + str(database[candidate]))
        database[candidate] += 1  # increase the counter
    else:  # the candidate doesn't exist in the 'database'...
        print("OK")
        database[candidate] = 1  # initialize counter for the next time
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why don't you try </p>
<pre><code>valid_usernames.append(i+str(valid_usernames.count(i)))
print(i+str(valid_usernames.count(i))
</code></pre>
</div>
<span class="comment-copy">What is the error? post the entire error</span>
<span class="comment-copy">while i in valid_usernames than print  i+count</span>
<span class="comment-copy">This type of exercises is usually for students to use hash tables, called dictionnaries in python. see @zwer response.</span>
<span class="comment-copy">this is probably the best solution, storing the number of occurrences instead of the names themselves</span>
