<div class="post-text" itemprop="text">
<p>I have a list of temperatures, and I need to find <em>n</em> values before and after the desired temperature, preferably in separate lists.The values in my list are not necessarily unique, but I need the <strong>index</strong> of the original list. I need these indices to find other parameters in other lists.</p>
<p>Example:</p>
<pre><code>TestArray = np.array([12,42,19,32,41,14,17,23,12,18,32,19])
Value = 20
n = 2
TestArray = np.append(TestArray, Value) 
Sort = np.argsort(TestArray)
Index = np.where(Sort == (len(TestArray)-1))[0][0]
Lower = Sort[Index-n:Index]
Upper = Sort[Index+1:Index+n+1]
print(Upper, TestArray[Upper])
print(Lower, TestArray[Lower])
</code></pre>
<p>My code gives the wanted output, but it looks really messy and I was wondering if there was a better way.</p>
<p>Explanation:
I append the wanted value to the end, so I know its index. Then I use <em>argsort</em> find the indices from low to high, and then use np.where to locate where my wanted value is. Then use indexing to find upper and lower values.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can filter the array and then use <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.partition.html" rel="nofollow noreferrer"><code>np.partition</code></a>:</p>
<pre><code>mask = TestArray &lt; Value
Lower, Upper = -np.partition(-TestArray[mask], 2)[:2], np.partition(TestArray[~mask], 2)[:2]

Lower
#array([19, 19])

Upper
#array([23, 32])
</code></pre>
<p>To get the indices back:</p>
<pre><code>TestArray = np.array([12,42,19,32,41,14,17,23,12,18,32,19])    ​
​
mask = TestArray &lt; Value
arrInd = np.column_stack((np.arange(len(TestArray)), TestArray))
Lower, Upper = arrInd[mask,:], arrInd[~mask,:]
LowerInd, UpperInd = np.argpartition(-Lower[:, 1], 2)[:2], np.argpartition(Upper[:,1], 2)[:2]
​
print(Lower[LowerInd])
​#[[ 2 19]
# [11 19]]

print(Upper[UpperInd])
#[[ 7 23]
# [ 3 32]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think <code>np.searchsorted</code> may be of use to you.</p>
<p>Here is an example from the <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.searchsorted.html" rel="nofollow noreferrer">documentation</a></p>
<pre><code>&gt;&gt;&gt; np.searchsorted([1,2,3,4,5], 3)
2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <em>numpy</em> solutions are likely the best way to go.  For comparison, here is a somewhat efficient solution using <a href="https://docs.python.org/3/library/heapq.html#heapq.nsmallest" rel="nofollow noreferrer"><em>heapq.nsmallest()</em></a>:</p>
<pre><code>&gt;&gt;&gt; from heapq import nsmallest
&gt;&gt;&gt; data = [12,42,19,32,41,14,17,23,12,18,32,19]
&gt;&gt;&gt; nsmallest(2, data, key=lambda x: (x-20 if x &gt;= 20 else float('inf')))
[23, 32]
&gt;&gt;&gt; nsmallest(2, data, key=lambda x: (20-x if x &lt;= 20 else float('inf')))
[19, 19]
</code></pre>
</div>
<span class="comment-copy">Would it also be possible to get the indices of these elements? I believe np.partition only returns True or False (in this setup) Maybe I should make this more clear in the question as well.</span>
<span class="comment-copy">Thanks! This gives me the much desired indices.</span>
