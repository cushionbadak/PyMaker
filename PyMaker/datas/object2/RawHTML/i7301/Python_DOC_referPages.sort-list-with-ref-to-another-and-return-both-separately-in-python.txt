<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/6618515/sorting-list-based-on-values-from-another-list">Sorting list based on values from another list?</a>
<span class="question-originals-answer-count">
                    14 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/11601961/sorting-multiple-lists-based-on-a-single-list-in-python">sorting multiple lists based on a single list in python</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I have 3 lists:</p>
<p>say,</p>
<pre><code>st = ['B', 'D', 'C', 'A']
freq = [2, 3, 2, 4]
pos = [[1, 19], [3, 18, 21], [2, 20], [0, 17, 22, 23]]
</code></pre>
<p>Basically, <code>st</code> is the different letters from a string , <code>freq</code> is their corresponding frequencies and <code>pos</code> is the positions of those letters.
Now I want to sort all the 3 lists in decreasing order of <code>freq</code>.
<code>zip</code> is not helpful as I need to store those sorted lists separately!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can calculate your new indices and then apply them:</p>
<pre><code>from operator import itemgetter

# sort enumerated freq values
sorted_freq = sorted(enumerate(freq), key=itemgetter(1), reverse=True)

# construct itemgetter object using first values from sorted_freq
# gives operator.itemgetter(3, 1, 0, 2)
order = itemgetter(*map(itemgetter(0), sorted_freq))

st = order(st)      # ('A', 'D', 'B', 'C')
freq = order(freq)  # (4, 3, 2, 2)
pos = order(pos)    # ([0, 17, 22, 23], [3, 18, 21], [1, 19], [2, 20])
</code></pre>
<p>This gives tuples, but list conversion is trivial: <code>list(order(st))</code>, <code>list(order(freq))</code>, etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using NumPy:</p>
<pre><code>import numpy as np

st = np.array(['B', 'D', 'C', 'A'])
freq = np.array([2, 3, 2, 4])
pos = np.array([[1, 19], [3, 18, 21], [2, 20], [0, 17, 22, 23]])

indices = np.argsort(freq)[::-1]  # indices that sort freq in decreasing order

st = st[indices]
freq = freq[indices]
pos = pos[indices]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would change my data structure to this:</p>
<pre><code>d = [{'st': 'B', 'freq': 2, 'pos': [1, 19]}, {'st': 'D', 'freq': 3, 'pos': [3, 18, 21]}, {'st': 'C', 'freq': 2, 'pos': [2, 20]}, {'st': 'A', 'freq': 4, 'pos': [0, 17, 22, 23]}]
</code></pre>
<p>Then sort based on the criteria, in this case</p>
<pre><code>import operator
sorted(d, key=operator.itemgetter('freq'), reverse=True)
</code></pre>
<p>Result</p>
<pre><code>[{'freq': 4, 'pos': [0, 17, 22, 23], 'st': 'A'},
 {'freq': 3, 'pos': [3, 18, 21], 'st': 'D'},
 {'freq': 2, 'pos': [1, 19], 'st': 'B'},
 {'freq': 2, 'pos': [2, 20], 'st': 'C'}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If data belongs together it really shouldn't be separate (as in separate lists), at least I would use a <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>namedtuple</code></a> (or if you have Python 3.7 one could also use a <a href="https://docs.python.org/3.7/library/dataclasses.html" rel="nofollow noreferrer"><code>dataclass</code></a>), one can easily unpack them again (for storage or further operations).</p>
<p>To demonstrate the <code>namedtuple</code> approach:</p>
<pre><code>from collections import namedtuple

string_info = namedtuple("string_info", "string,frequency,positions")

st = ['B', 'D', 'C', 'A']
freq = [2, 3, 2, 4]
pos = [[1, 19], [3, 18, 21], [2, 20], [0, 17, 22, 23]]

infos = [string_info(s, f, p) for s, f, p in zip(st, freq, pos)]
</code></pre>
<p>Now you have a list where the related data is also stored together. Sorting it is now very easy (almost trivial):</p>
<pre><code>&gt;&gt;&gt; sorted_infos_by_frequency = sorted(infos, key=lambda info: info.frequency, reverse=True)
&gt;&gt;&gt; sorted_infos_by_frequency
[string_info(string='A', frequency=4, positions=[0, 17, 22, 23]),
 string_info(string='D', frequency=3, positions=[3, 18, 21]),
 string_info(string='B', frequency=2, positions=[1, 19]),
 string_info(string='C', frequency=2, positions=[2, 20])]
</code></pre>
<p>And if you need to unpack it again:</p>
<pre><code>&gt;&gt;&gt; [i.string for i in sorted_infos_by_frequency]
['A', 'D', 'B', 'C']
&gt;&gt;&gt; [i.frequency for i in sorted_infos_by_frequency]
[4, 3, 2, 2]
&gt;&gt;&gt; [i.positions for i in sorted_infos_by_frequency]
[[0, 17, 22, 23], [3, 18, 21], [1, 19], [2, 20]]
</code></pre>
<hr/>
<p>By the way you have some redundancy here, because the length of the positions actually contains the frequency. In such cases it's often preferable (although that may be subjective) not to store the calculated property directly if one can compute them efficiently (and <code>len</code> is efficient):</p>
<pre><code>string_info = namedtuple("string_info", "string,positions")

st = ['B', 'D', 'C', 'A']
pos = [[1, 19], [3, 18, 21], [2, 20], [0, 17, 22, 23]]

infos = [string_info(s, p) for s, p in zip(st, pos)]
</code></pre>
<p>With the following operations to sort (and unpack them):</p>
<pre><code>&gt;&gt;&gt; sorted_infos_by_frequency = sorted(infos, key=lambda info: len(info.positions), reverse=True)
&gt;&gt;&gt; sorted_infos_by_frequency
[string_info(string='A', positions=[0, 17, 22, 23]),
 string_info(string='D', positions=[3, 18, 21]),
 string_info(string='B', positions=[1, 19]),
 string_info(string='C', positions=[2, 20])]
&gt;&gt;&gt; [i.string for i in sorted_infos_by_frequency]
['A', 'D', 'B', 'C']
&gt;&gt;&gt; [i.positions for i in sorted_infos_by_frequency]
[[0, 17, 22, 23], [3, 18, 21], [1, 19], [2, 20]]
&gt;&gt;&gt; [len(i.positions) for i in sorted_infos_by_frequency]  # if you need the frequencies
[4, 3, 2, 2]
</code></pre>
</div>
<span class="comment-copy">Thanks, but i dont want to use <code>numpy</code> at first place.</span>
