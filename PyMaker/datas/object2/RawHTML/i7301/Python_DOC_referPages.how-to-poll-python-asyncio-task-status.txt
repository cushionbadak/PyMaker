<div class="post-text" itemprop="text">
<p>With gevent, i can monitor a long running function like so:</p>
<pre><code>    greenlet = gevent.Greenlet(long_running_task, *args, **kwargs)
    greenlet.start()
    while not greenlet.ready():
        send_heartbeat()
        gevent.sleep(heartbeat_interval)
    if greenlet.successful():
        send_success(greenlet.value)
    else:
        send_failure(exception=greenlet.exception)
</code></pre>
<p>How would I do this with asyncio? I've tried the following but I'm stuck:</p>
<pre><code>    loop = asyncio.get_event_loop()
    async def send_heartbeat(heartbeat_interval=15):
        send_heartbeat()
        asyncio.sleep(heartbeat_interval)

    await asyncio.sleep(1)
    loop.run_until_complete(asyncio.wait([long_running_task(*args, **kwargs), send_heartbeat()]))
    loop.close()
</code></pre>
<p>How would I change this to get the intended behavior?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can schedule the long running task with <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.ensure_future" rel="nofollow noreferrer"><code>ensure_future</code></a> (but not awaiting it). In return you'll get a <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.ensure_future" rel="nofollow noreferrer">Future</a> object that have <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.Future.done" rel="nofollow noreferrer"><code>done</code></a> method that is similar to <code>ready</code></p>
<pre><code>async def some_job():
    future = asyncio.ensure_future(long_running_task(*args, **kwargs))
    while not future.done():
        await send_heartbeat(heartbeat_interval=15)

    try:
        result = future.result()
    except asyncio.CancelledError:
        # the task has been cancelled
    except Exception:
        # some exception was raised in long running task

loop = asyncio.get_event_loop()
loop.run_until_complete(some_job())
loop.close()
</code></pre>
</div>
