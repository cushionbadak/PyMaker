<div class="post-text" itemprop="text">
<p>In the <a href="https://docs.python.org/3/reference/toplevel_components.html#complete-python-programs" rel="nofollow noreferrer">reference manual</a> it is stated that:</p>
<blockquote>
<p>A complete Python program is executed in a minimally initialized environment: all built-in and standard modules are available, but none have been initialized, except for <code>sys</code> (various system services), <code>builtins</code> (built-in functions, exceptions and None) and <code>__main__</code>.</p>
</blockquote>
<p>I am uncertain about what "initialized" is supposed to mean here. I always thought that a module was initialized if it was loaded and present in <a href="https://docs.python.org/3/library/sys.html#sys.modules" rel="nofollow noreferrer"><code>sys.modules</code></a>:</p>
<blockquote>
<p>This is a dictionary that maps module names to modules which have already been loaded.</p>
</blockquote>
<p>Apparently, I was wrong because <code>sys.modules</code> contains many other modules:</p>
<pre><code>python -c "import sys; print(sys.modules.keys() - {'sys', 'builtins', '__main__'})"
{'_stat', 'encodings.aliases', '_sitebuiltins', '_thread', 'io', '_weakrefset', 'genericpath', 'encodings.utf_8', 'codecs', 'os', '_weakref', '_codecs', '_frozen_importlib', '_io', '_frozen_importlib_external', 'os.path', '_warnings', '_bootlocale', '_signal', 'errno', '_imp', 'encodings.latin_1', 'sysconfig', 'marshal', 'encodings', 'usercustomize', 'site', 'posixpath', '_collections_abc', 'posix', '_sysconfigdata_m_linux_x86_64-linux-gnu', 'encodings.cp437', 'abc', 'zipimport', 'stat', '_locale'}
</code></pre>
<p>What is the difference between an initialized and a loaded module? I'm on Python 3.</p>
</div>
<div class="post-text" itemprop="text">
<p>The language initialization has gotten a lot more complicated since that documentation was written. (It's been mostly unchanged since at least <a href="https://docs.python.org/release/1.4/ref/ref8.html#HDR0" rel="nofollow noreferrer">Python 1.4</a>.) All those modules in <code>sys.modules</code> are fully loaded and initialized.</p>
</div>
<div class="post-text" itemprop="text">
<p>Putting it simply:</p>
<p><code>import</code> loads the module into memory.</p>
<p>when you call a class in the module and use <code>.__init__()</code> funtion such a way that some of the attributes within the class belonging to this module get updates, then this module becomes an initialized module.</p>
<p>Do note that, when you use the module, this process happens implicitly.</p>
<p>TL;DR</p>
<p><code>import some_module</code> loads the module,
<code>some_module.some_attribute/function</code> initializes it.</p>
</div>
<span class="comment-copy">Looks like it, quite odd that it hasn't gotten any attention considering it is explicitly linked in the docs for <code>import</code>, <a href="https://docs.python.org/3/reference/import.html#__spec__" rel="nofollow noreferrer">specifically for <code>module.__spec__</code></a>, which has been updated quite recently.</span>
<span class="comment-copy">Mind expanding on the "difference between an initialized and a loaded module" per the question? AFAIK an initialized module has had its <a href="https://docs.python.org/3.6/tutorial/modules.html#more-on-modules" rel="nofollow noreferrer">statements executed</a> while a loaded module is just available to in the symbol table.</span>
<span class="comment-copy">@Alex: The <a href="https://docs.python.org/3/reference/import.html#loading" rel="nofollow noreferrer">import system reference</a> describes the loading process as encompassing initialization, in such a way that "loaded" and "initialized" are equivalent. I wouldn't expect complete consistency out of the Python documentation, though; these terms, especially "loaded", should be considered in context to determine what the docs are trying to say. For example, <code>sys.modules</code> contains modules that haven't been fully loaded in the sense in which the import system docs use the term.</span>
<span class="comment-copy">Ah gotcha... Also a relevant quote from those docs: "When a module is first imported, Python searches for the module and if found, it creates a module object, initializing it."</span>
<span class="comment-copy">This doesn't make much sense. What if the module doesn't have a class, would it then never be initialized? I am afraid that without sources this is just your interpretation of words that were most likely used for a very specific reason.</span>
<span class="comment-copy">every module has a built in class. To prove this, try dir(module) and you'll always get a dictionary. Well, there is no official definition for 'loaded' and 'initialized'. It is just a lingo.</span>
<span class="comment-copy">You are talking about a class <i>inside</i> a module, not the module object. Even if you are talking about module objects, the modules inside <code>sys.modules</code> are all initialized but that isn't stated in the reference manual. In the reference manual an explicit reference to <code>sys</code>, <code>builtins</code> and <code>__main__</code> is made.</span>
<span class="comment-copy">The module object is an instance of the parent class within the module. Unlike in user created modules, there is no explicit definition of this class but that's how the object is obtained as Python is built upon the OOPS philosophy which uses classes and objects. Depending on the module, you can refer to the entire module as a class cause if there is only one, it automatically becomes a parent class. As for the other part, those three are automatically loaded and initialized when you run a script.</span>
