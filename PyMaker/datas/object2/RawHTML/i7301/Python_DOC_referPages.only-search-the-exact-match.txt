<div class="post-text" itemprop="text">
<p>So, I have a really long list (example truncated) with values that look something like this:</p>
<pre><code>derp = [[('interface_name', 'interface-1'), ('ip_address', '10.1.1.1'), ('mac_address', 'xx:xx:xx:xx:xx:xx')], [('interface_name', 'interface 2'), ('ip_address', '10.1.1.2'), ('mac_address', 'xx:xx:xx:xx:xx:xx')], [('interface_name', 'interface 3'), ('ip_address', '10.1.1.11'), ('mac_address', 'xx:xx:xx:xx:xx:xx')]]
</code></pre>
<p>I have function that goes through that massive list and just pulls out a match based on the IP but the problem is, it seems to match on anything in that last octet and not just the exact match.</p>
<pre><code>findIP = sys.argv[1]

def arpInt(arp_info):
   for val in arp_info:
       if re.search(findIP, str(val)):
           interface = val.pop(0)
           string = val
           print string, interface[1]

arpInt(derp)
</code></pre>
<p>So in the above case, if findIP = '10.1.1.1' it would come back with 10.1.1.1 and 10.1.1.11.  I'd imagine there has to be a way to just force it back to exactly what my input is...</p>
</div>
<div class="post-text" itemprop="text">
<p>Don't use a regular expression.  Just look for the string itself.</p>
<pre><code>data = [[('interface_name', 'interface-1'),
         ('ip_address', '10.1.1.1'),
         ('mac_address', 'xx:xx:xx:xx:xx:xx')],
        [('interface_name', 'interface-1a'),
         ('ip_address', '010.001.001.001'),
         ('mac_address', 'xx:xx:xx:xx:xx:xx')],
        [('interface_name', 'interface 2'),
         ('ip_address', '10.1.1.2'),
         ('mac_address', 'xx:xx:xx:xx:xx:xx')],
        [('interface_name', 'interface 3'),
         ('ip_address', '10.1.1.11'),
         ('mac_address', 'xx:xx:xx:xx:xx:xx')]]


key = '10.1.1.1'
for interface, ip, mac in data:
    if key in ip:
        #print(interface, ip)
        print([interface, ip, mac], interface[1])
</code></pre>
<p>Of course it only works if the ip addresses in the data conform to your example ... no leading zeroes.</p>
<hr/>
<p>If your addresses might have leading zeros you could compare the integer equivalents of the addresses</p>
<pre><code>key = '10.1.1.1'
key = map(int, key.split('.'))
for interface, ip, mac in data:
    ip_address = ip[1]
    ip_address = map(int, ip_address.split('.'))
    if ip_address == key:
        #print(interface, ip)
        print([interface, ip, mac], interface[1])
</code></pre>
<p>I don't have Python 3.x on this computer so I don't really know if map objects can be compared like that.  If not, use <code>all(a == b for a, b in zip(ip_address, key))</code> for the condition.</p>
</div>
<span class="comment-copy">An IPv4 address is really a 32-bit integer; the dotted-decimal text representation is simply for human readability. If you convert the text representation to an integer, you can properly order and compare.</span>
<span class="comment-copy">Apologies for my beginner-ness @RonMaupin, but could you give a bit more detail on what you mean?</span>
<span class="comment-copy">Add the results: the first octet multiplied by <code>16,777,216</code> (<code>2^24</code>), the second octet multiplied by <code>65,536</code> (<code>2^16</code>), the third octet multiplied by <code>256</code> (<code>2^8</code>) and the fourth octet. This results in the binary representation of the IPv4 address as a 32-bit integer. To properly sort, use unsigned integers. You can easily compare integer values for an exact match. IP addresses are placed in the IP header and used by network devices as integers. The  text representation of the IPv4 address is used for human readability, but it is not the real way IPv4 addresses are represented and used.</span>
<span class="comment-copy">Try using an online <a href="https://regex101.com/" rel="nofollow noreferrer">regular expression tester</a> to fine tune the pattern you are using.  In particular a dot, <code>.</code> in the pattern will match <b>any</b> character.</span>
<span class="comment-copy">Additionally, you can print variables at different points of the loop to see what your code is doing - sometimes it helps.</span>
<span class="comment-copy">This worked out really well!  I was able to get the same info and it cleaned up the second part of my script (which I didn't put in here) that actually strips some info from the interface and uses it do verify some switch / router configuration.  Quick question - in the 'for interface, ip, mac in data:' is that just assigning a name to each of the tuples?</span>
<span class="comment-copy">@DangerZone - yes, it will throw an exception if the number of names on the left-hand-side is different than the length of the iterable.  see here; <a href="https://www.python.org/dev/peps/pep-3132/" rel="nofollow noreferrer">python.org/dev/peps/pep-3132</a>.  And <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer">Assignment Statements</a> .</span>
