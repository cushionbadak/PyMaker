<div class="post-text" itemprop="text">
<p>I was required to install anaconda for a CS course and used spyder and Rstudio. 
Then, for a different class I used pycharm. 
When I type on the command line "python -V" I get:</p>
<p>Python 3.6.1 :: Anaconda 4.4.0 (x86_64)</p>
<p>and I have no idea why it relates the python version I have installed with Anaconda (and why not pycharm?). I understand that the OS runs python 2.7 (shouldn't I get that instead? and when I type python3 -V get which version of python 3 I have?) and when I use something like Pycharm or Spyder I can choose which version I want from the ones I have installed and use it within the program, not for the terminal.</p>
<p>I just want to have everything in order and under control. I don't think I understand what Anaconda really is (to me is like a program that has more programs in it...). How do I keep anaconda to itself ? 1313</p>
<p>Also, should the packages I installed through Terminal work on both pycharm and spyder/anaconda even though when I used pycharm I used python 3.5 and anaconda 3.6? </p>
<p>I think I need definitions and help to get everything in order in my head and the computer. </p>
</div>
<div class="post-text" itemprop="text">
<p>Pycharm is just an application to help you write code. Pycharm itself does not run python code. This is why in PyCharm, you need to set the <em>interpreter</em> for a project, which could be any python binary. In PyCharm, go to <code>Preferences &gt; Project &gt; Project Interpreter</code> to see where you would set the python environment being used for a given project. This could point to any python installation on your machine, whether that is the python 2.7 located at <code>/usr/bin/python</code> or a virtual environment in your project dir.</p>
<p>The industry standard way to "keep things in order" is to use what are called <em>virtual environments</em>. See here: <a href="https://docs.python.org/3/library/venv.html" rel="nofollow noreferrer">https://docs.python.org/3/library/venv.html</a>. A virtual environment is literally just a copy of a python environment (binaries and everything) so whatever directory you specify. This allows you to configure your environment to however you need in your project without interfering with other projects you might have. For example, say project A requires django 1.9.2 but project b requires 1.5.3. By having a virtual environment for each project, dependencies won't conflict. </p>
<p>Since you have python3.6, I would recommend going to you project directory in a terminal window. Running <code>python -m venv .venv</code> to create a hidden directory which contains a local python environment of whatever your 3.6 python installation. You could then set your project interpret to use that environment. to connect to it on the command line, run <code>source .venv/bin/activate</code> from where you created your virtual environment. run <code>which python</code> again and see that <code>python</code> is now referencing your virtual environment :)</p>
<p>If you are using a mac (which I believe you are from what you said about python2.7), what likely happened is that your anaconda installer put the Python bin directory on your PATH environment variable. Type in <code>which python</code> to see what the <code>python</code> alias is referencing. You can undo this if you want by editing your <code>~/.bash_profile</code> file if you really want.</p>
<p>You are more or less correct about anaconda. It is itself another distribution of python and contains a load of common libraries/dependencies that tend to make life easier. For a lot of data analysis, you likely won't even need to install another dependency with pip after downloading anaconda.</p>
<p>I suspect this won't be all too helpful at first as it is a lot to learn, but hopefully this points you in the right direction. </p>
</div>
