<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/6410971/python-datetime-object-show-wrong-timezone-offset">Python datetime object show wrong timezone offset</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>Converting a timezone naive date time to a specific timezone gives a completely incorrect result.</p>
<pre><code>import dateutil as du
import pytz    
du.parser.parse('2017-05-31T15:00:00').replace(tzinfo=pytz.timezone('Europe/London')).isoformat()
</code></pre>
<p>returns a one minute not one hour offset vs UTC</p>
<pre><code>'2017-05-31T15:00:00-00:01'
</code></pre>
<p>I've seen a few datetime peculiarities before but this one is breathtaking.</p>
</div>
<div class="post-text" itemprop="text">
<p>The main problem here is that you are using a <code>pytz</code> time zone. <code>pytz</code> zones do not follow the <code>tzinfo</code> interface and cannot be simply attached to <code>datetime</code> objects (either through the constructor or through <code>replace</code>). If you would like to use <code>pytz</code> time zones, you should use <a href="http://pytz.sourceforge.net/#localized-times-and-date-arithmetic" rel="nofollow noreferrer"><code>pytz.timezone.localize</code></a> with a naive <code>datetime</code>. If the <code>datetime</code> is already timezone-aware, you can use <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.astimezone" rel="nofollow noreferrer"><code>datetime.astimezone</code></a> to convert it between zones.</p>
<pre><code>from dateutil import parser
import pytz

LON = pytz.timezone('Europe/London')
dt = parser.parse('2017-05-31T15:00:00')
dt = LON.localize(dt) 

print(dt)   # 2017-05-31 15:00:00+01:00
</code></pre>
<p>This is because <code>pytz</code>'s interface uses <code>localize</code> to attach a static time zone to a <code>datetime</code>. For the same reason, if you do arithmetic on the now-localized <code>datetime</code> object, it may give similar improper results and you'll have to use <code>pytz.timezone.normalize</code> to fix it. The reason this is done this way is that, historically, it has not been possible to handle ambiguous datetimes using a Pythonic <code>tzinfo</code> interface, which changed with <a href="https://www.python.org/dev/peps/pep-0495/" rel="nofollow noreferrer">PEP 495</a> in Python 3.6, making <code>pytz</code>'s workaround less necessary.</p>
<p>If you would like to pass a <code>tzinfo</code> to a <code>datetime</code> using <code>replace</code> or the constructor, or you would prefer to use the pythonic interface, <code>dateutil</code>'s time zone suite implements a PEP 495-compliant <code>tzinfo</code> interface. The equivalent using a <a href="https://dateutil.readthedocs.io/en/stable/tz.html" rel="nofollow noreferrer"><code>dateutil</code></a> zone is:</p>
<pre><code>from dateutil import parser
from dateutil import tz

LON = tz.gettz('Europe/London')
dt = parser.parse('2017-05-31T15:00:00').replace(tzinfo=LON)

print(dt)   # 2017-05-31 15:00:00+01:00
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have often had bad luck using <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.replace" rel="nofollow noreferrer"><code>replace()</code></a> with <a href="https://docs.python.org/3/library/datetime.html#tzinfo-objects" rel="nofollow noreferrer"><code>tzinfo</code></a> objects.  I have however found this construct to be reliable:</p>
<h3>Code:</h3>
<pre><code>def naive_to_aware(ts, tz):
    return tz.localize(ts)
</code></pre>
<h3>Update from Comments:</h3>
<p>From the (<a href="http://pythonhosted.org/pytz/" rel="nofollow noreferrer">pytz DOCS</a>)</p>
<blockquote>
<p>Unfortunately using the tzinfo argument of the standard datetime constructors ‘’does not work’’ with pytz for many timezones.</p>
<p>It is safe for timezones without daylight saving transitions though, such as UTC</p>
</blockquote>
<p>So it is not just <em>bad luck</em>, it is problematic for pytz objects with timezones having DST.</p>
<h3>Test Code:</h3>
<pre><code>import dateutil as du
import pytz

print(naive_to_aware(du.parser.parse('2017-05-31T15:00:00'),
                     pytz.timezone('Europe/London')).isoformat())
</code></pre>
<h3>Results:</h3>
<pre><code>2017-05-31T15:00:00+01:00
</code></pre>
</div>
<span class="comment-copy">Not quite sure why that warranted an immediate down vote with no comment.</span>
<span class="comment-copy">what's dateutil (3rd party library, not in standard lib like datetime)? what's the result after <code>parse</code>?</span>
<span class="comment-copy">Its a fairly well know <a href="https://dateutil.readthedocs.io/en/stable/" rel="nofollow noreferrer">package</a>.  Parse produces a standard datetime object.</span>
<span class="comment-copy">Can you add the output of <code>parse</code> to the question? It will be helpful to see where the problem is.</span>
<span class="comment-copy">Either use a tzinfo compliant time zone interface like <code>dateutil.tz</code> or use <code>pytz.timezone("Europe/London").localize(my_datetime)</code>.</span>
<span class="comment-copy">It's not "bad luck". The pytz documentation states, close to the beginning: <i>This library differs from the documented Python API for tzinfo implementations</i>. It goes on to state that one way to use pytz time zones is with the <code>astimezone</code> method, and that you should specifically avoid using it as the <code>tzinfo</code> argument if it has daylight saving transitions. It explicitly says UTC is safe for <code>tzinfo</code>. So, it seems you have basically discovered for yourself what the pytz documentation recommends. ;)</span>
<span class="comment-copy">@JohnY, thank you so much for that info.  An incompatible API would certainly explain why I just thought it was luck...  Updated to reflect the <i>why</i>.</span>
<span class="comment-copy">@StephenRauch Your first bit of code does something completely different than <code>.replace(tzinfo=tz)</code>. <code>replace</code> just attaches the <code>tzinfo</code> without modifying the time. Your code assumes that the code is already in UTC. This will give the wrong answer if you have a naive <code>datetime</code> representing, e.g. Eastern Time and you simply want to attach a zone to it.</span>
<span class="comment-copy">Note, I downvoted because this is wrong and misleading. I'm happy to retract if/when it's edited.</span>
