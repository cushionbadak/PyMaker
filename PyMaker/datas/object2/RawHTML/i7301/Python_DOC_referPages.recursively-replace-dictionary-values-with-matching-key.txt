<div class="post-text" itemprop="text">
<p>I'm trying to take a dictionary and find all of the keys that match <code>key</code> and replace their value with <code>replace_value</code>. The dictionaries can in theory be infinitely deep, so it must be done recursively. </p>
<p>My current solution replaces values correctly, but raises an exception saying "maximum recursion depth exceeded while calling a Python object" (not to mention the fact that it's poor use of recursion with no return values).</p>
<pre><code>def replace_item(obj, key, replace_value):
    """
    Replaces the dictionary value of key with replace_value in the obj dictionary.
    """
    if key in obj:
        obj[key] = replace_value

    for k, v in obj.items():
        if isinstance(v, dict):
            item = replace_item(v, key, replace_value)

            if item is not None:
                item = replace_value

     return obj
</code></pre>
<p>An example of an operation it would perform would be the following:</p>
<p><strong>Original Dictionary</strong></p>
<pre><code>person_dict = {
    "name": "Alex",
    "sex": "M",
    "title": "Engineer",
    "misc": {
        "mailbox": "3A",
        "work_type": "remote"
    }
}
</code></pre>
<p>Then I'd make a call to <code>replace_item(person_dict, "work_type", "office")</code>, which I'd preferably like to change over to returning the updated dictionary (<code>person_dict = replace_item(person_dict, "work_type", "office")</code>).</p>
<p><strong>Replaced Value Dictionary</strong></p>
<pre><code>person_dict = {
    "name": "Alex",
    "sex": "M",
    "title": "Engineer"
    "misc": {
        "mailbox": "3A",
        "work_type": "office"
    }
}
</code></pre>
<p>How can I go about fixing my recursion? Thank you in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have some strange behavior where you are expecting a <code>return</code> but you don't have one.  Also your description implies it should replace nested keys, but your code you will miss when a dictionary at the top level does not have the key but at a lower level does.  I believe the below code accomplishes what you described:</p>
<pre><code>def replace_item(obj, key, replace_value):
    for k, v in obj.items():
        if isinstance(v, dict):
            obj[k] = replace_item(v, key, replace_value)
    if key in obj:
        obj[key] = replace_value
    return obj
</code></pre>
<p><strong>EDIT</strong>: As @dashiell suggested, moving the top level reassignment after the recursive search/replace avoids the infinite recursion trap of having <code>key</code> exist in the <code>replace_value</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a functional-style take:</p>
<pre><code>def replace(obj, key, val):
    return {k: replace(val if k == key else v, key, val) 
        for k,v in obj.items()} if isinstance(obj, dict) else obj
</code></pre>
<p>It's not efficient in Python (since all values/subdicts are re-created), but demonstrates how to solve your problem without side-effects and without mutating objects.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def replace_item(obj, key, replace_value):
    """
    Replaces the dictionary value of key with replace_value in the obj dictionary.
    """
    if key in obj:
        obj[key] = replace_value

    for k, v in obj.items():
        if isinstance(v, dict):
            replace_item(v, key, replace_value)
</code></pre>
<p>I think this is enough.. no need of extra variables,
and in most of the systems, default recursion depth is around 1000, you can change it <a href="https://docs.python.org/3/library/sys.html#sys.setrecursionlimit" rel="nofollow noreferrer">https://docs.python.org/3/library/sys.html#sys.setrecursionlimit</a></p>
</div>
<span class="comment-copy">I think you want to have <code>obj[k] = replace....</code> rather than <code>obj[key][k] = repla....</code> otherwise if <code>replace_value</code> is a dict containing the key <code>key</code>, you get an infinite loop that will always result in a recursion depth exception.</span>
<span class="comment-copy">@Aaron yes, you're right.</span>
<span class="comment-copy">It might also be a good idea to to put the replacement below the recursion. For example, someone could get a max recursion depth error by setting <code>key=some_key,replace_value={some_key:some_value}</code></span>
<span class="comment-copy">@dashiell good call</span>
