<div class="post-text" itemprop="text">
<p>The following behaviour seems rather counterintuitive to me (Python 3.4):</p>
<pre><code>&gt;&gt;&gt; [(yield i) for i in range(3)]
&lt;generator object &lt;listcomp&gt; at 0x0245C148&gt;
&gt;&gt;&gt; list([(yield i) for i in range(3)])
[0, 1, 2]
&gt;&gt;&gt; list((yield i) for i in range(3))
[0, None, 1, None, 2, None]
</code></pre>
<p>The intermediate values of the last line are actually not always <code>None</code>, they are whatever we <code>send</code> into the generator, equivalent (I guess) to the following generator:</p>
<pre><code>def f():
   for i in range(3):
      yield (yield i)
</code></pre>
<p>It strikes me as funny that those three lines work at all. The <a href="https://docs.python.org/3/reference/expressions.html#yield-expressions">Reference</a> says that <code>yield</code> is only allowed in a function definition (though I may be reading it wrong and/or it may simply have been copied from the older version). The first two lines produce a <code>SyntaxError</code> in Python 2.7, but the third line doesn't.</p>
<p>Also, it seems odd</p>
<ul>
<li>that a list comprehension returns a generator and not a list</li>
<li>and that the generator expression converted to a list and the corresponding list comprehension contain different values.</li>
</ul>
<p>Could someone provide more information?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><strong>Note</strong>: this was a bug in the CPython's handling of <code>yield</code> in comprehensions and generator expressions, fixed in Python 3.8, with a deprecation warning in Python 3.7. See the <a href="http://bugs.python.org/issue10544" rel="noreferrer">Python bug report</a> and the <em>What's New</em> entries for <a href="https://docs.python.org/dev/whatsnew/3.7.html#deprecated" rel="noreferrer">Python 3.7</a> and <a href="https://docs.python.org/dev/whatsnew/3.8.html#changes-in-python-behavior" rel="noreferrer">Python 3.8</a>.</p>
</blockquote>
<p>Generator expressions, and set and dict comprehensions are compiled to (generator) function objects. In Python 3, list comprehensions get the same treatment; they are all, in essence, a new nested scope.</p>
<p>You can see this if you try to disassemble a generator expression:</p>
<pre><code>&gt;&gt;&gt; dis.dis(compile("(i for i in range(3))", '', 'exec'))
  1           0 LOAD_CONST               0 (&lt;code object &lt;genexpr&gt; at 0x10f7530c0, file "", line 1&gt;)
              3 LOAD_CONST               1 ('&lt;genexpr&gt;')
              6 MAKE_FUNCTION            0
              9 LOAD_NAME                0 (range)
             12 LOAD_CONST               2 (3)
             15 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             18 GET_ITER
             19 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             22 POP_TOP
             23 LOAD_CONST               3 (None)
             26 RETURN_VALUE
&gt;&gt;&gt; dis.dis(compile("(i for i in range(3))", '', 'exec').co_consts[0])
  1           0 LOAD_FAST                0 (.0)
        &gt;&gt;    3 FOR_ITER                11 (to 17)
              6 STORE_FAST               1 (i)
              9 LOAD_FAST                1 (i)
             12 YIELD_VALUE
             13 POP_TOP
             14 JUMP_ABSOLUTE            3
        &gt;&gt;   17 LOAD_CONST               0 (None)
             20 RETURN_VALUE
</code></pre>
<p>The above shows that a generator expression is compiled to a code object, loaded as a function (<code>MAKE_FUNCTION</code> creates the function object from the code object). The <code>.co_consts[0]</code> reference lets us see the code object generated for the expression, and it uses <code>YIELD_VALUE</code> just like a generator function would.</p>
<p>As such, the <code>yield</code> expression works in that context, as the compiler sees these as functions-in-disguise.</p>
<p>This is a bug; <code>yield</code> has no place in these expressions. The Python <em>grammar</em> before Python 3.7 allows it (which is why the code is compilable), but the <a href="https://docs.python.org/3/reference/expressions.html#yield-expressions" rel="noreferrer"><code>yield</code> expression specification</a> shows that using <code>yield</code> here should not actually work:</p>
<blockquote>
<p>The yield expression is only used when defining a <em>generator</em> function and thus can only be used in the body of a function definition.</p>
</blockquote>
<p>This has been confirmed to be a bug in <a href="http://bugs.python.org/issue10544" rel="noreferrer">issue 10544</a>. The resolution of the bug is that using <code>yield</code> and <code>yield from</code> will <a href="https://docs.python.org/3.8/whatsnew/3.8.html#changes-in-python-behavior" rel="noreferrer">raise a <code>SyntaxError</code> in Python 3.8</a>; in Python 3.7 <a href="https://docs.python.org/3.7/whatsnew/3.7.html#deprecated" rel="noreferrer">it raises a <code>DeprecationWarning</code></a> to ensure code stops using this construct. You'll see the same warning in Python 2.7.15 and up if you use the <a href="https://docs.python.org/2/using/cmdline.html#cmdoption-3" rel="noreferrer"><code>-3</code> command line switch</a> enabling Python 3 compatibility warnings.</p>
<p>The 3.7.0b1 warning looks like this; turning warnings into errors gives you a <code>SyntaxError</code> exception, like you would in 3.8:</p>
<pre><code>&gt;&gt;&gt; [(yield i) for i in range(3)]
&lt;stdin&gt;:1: DeprecationWarning: 'yield' inside list comprehension
&lt;generator object &lt;listcomp&gt; at 0x1092ec7c8&gt;
&gt;&gt;&gt; import warnings
&gt;&gt;&gt; warnings.simplefilter('error')
&gt;&gt;&gt; [(yield i) for i in range(3)]
  File "&lt;stdin&gt;", line 1
SyntaxError: 'yield' inside list comprehension
</code></pre>
<p>The differences between how <code>yield</code> in a list comprehension and <code>yield</code> in a generator expression operate stem from the differences in how these two expressions are implemented. In Python 3 a list comprehension uses <code>LIST_APPEND</code> calls to add the top of the stack to the list being built, while a generator expression instead yields that value. Adding in <code>(yield &lt;expr&gt;)</code> just adds another <code>YIELD_VALUE</code> opcode to either:</p>
<pre><code>&gt;&gt;&gt; dis.dis(compile("[(yield i) for i in range(3)]", '', 'exec').co_consts[0])
  1           0 BUILD_LIST               0
              3 LOAD_FAST                0 (.0)
        &gt;&gt;    6 FOR_ITER                13 (to 22)
              9 STORE_FAST               1 (i)
             12 LOAD_FAST                1 (i)
             15 YIELD_VALUE
             16 LIST_APPEND              2
             19 JUMP_ABSOLUTE            6
        &gt;&gt;   22 RETURN_VALUE
&gt;&gt;&gt; dis.dis(compile("((yield i) for i in range(3))", '', 'exec').co_consts[0])
  1           0 LOAD_FAST                0 (.0)
        &gt;&gt;    3 FOR_ITER                12 (to 18)
              6 STORE_FAST               1 (i)
              9 LOAD_FAST                1 (i)
             12 YIELD_VALUE
             13 YIELD_VALUE
             14 POP_TOP
             15 JUMP_ABSOLUTE            3
        &gt;&gt;   18 LOAD_CONST               0 (None)
             21 RETURN_VALUE
</code></pre>
<p>The <code>YIELD_VALUE</code> opcode at bytecode indexes 15 and 12 respectively is extra, a cuckoo in the nest. So for the list-comprehension-turned-generator you have 1 yield producing the top of the stack each time (replacing the top of the stack with the <code>yield</code> return value), and for the generator expression variant you yield the top of the stack (the integer) and then yield <em>again</em>, but now the stack contains the return value of the <code>yield</code> and you get <code>None</code> that second time.</p>
<p>For the list comprehension then, the intended <code>list</code> object output is still returned, but Python 3 sees this as a generator so the return value is instead attached to the <a href="https://docs.python.org/3/library/exceptions.html#StopIteration" rel="noreferrer"><code>StopIteration</code> exception</a> as the <code>value</code> attribute:</p>
<pre><code>&gt;&gt;&gt; from itertools import islice
&gt;&gt;&gt; listgen = [(yield i) for i in range(3)]
&gt;&gt;&gt; list(islice(listgen, 3))  # avoid exhausting the generator
[0, 1, 2]
&gt;&gt;&gt; try:
...     next(listgen)
... except StopIteration as si:
...     print(si.value)
... 
[None, None, None]
</code></pre>
<p>Those <code>None</code> objects are the return values from the <code>yield</code> expressions.</p>
<p>And to reiterate this again; this same issue applies to dictionary and set comprehension in Python 2 and Python 3 as well; in Python 2 the <code>yield</code> return values are still added to the intended dictionary or set object, and the return value is 'yielded' last instead of attached to the <code>StopIteration</code> exception:</p>
<pre><code>&gt;&gt;&gt; list({(yield k): (yield v) for k, v in {'foo': 'bar', 'spam': 'eggs'}.items()})
['bar', 'foo', 'eggs', 'spam', {None: None}]
&gt;&gt;&gt; list({(yield i) for i in range(3)})
[0, 1, 2, set([None])]
</code></pre>
</div>
<span class="comment-copy">Note that according to the language specification the <code>yield-atom</code> is allowed inside an expression (inside a generator function). This could be even more problematic if the <code>yield-atom</code> is somehow misimplemented.</span>
<span class="comment-copy">@skyking: that's what I'm saying; the grammar allows it. The bug I refer to is trying to use a <code>yield</code> <i>as part of a generator expression inside a generator function</i>, where the expectation is that the <code>yield</code> applies to the generator function, not the generator expression nested scope.</span>
<span class="comment-copy">Wow. Very informative indeed. So, if I understood correctly, the following happened: a function that contains both <code>yield</code> and <code>return</code> should, as is documented, become a generator function whose <code>return</code>ed value should land in the <code>StopIteration</code> exception, and the bytecode for a list comprehension with <code>yield</code> inside looks (although it was not intended) just like the bytecode of such a function.</span>
<span class="comment-copy">@zabolekar: something like that; the steps are something like: the compiler comes across a list comprehension so builds a code object; the compiler comes across a <code>yield</code> expression so marks the current code object as a generator. Voila, we have a generator function.</span>
<span class="comment-copy">@Chris_Rands the 2.7 changes are there for when you use the <code>-3</code> compatibility warnings.</span>
