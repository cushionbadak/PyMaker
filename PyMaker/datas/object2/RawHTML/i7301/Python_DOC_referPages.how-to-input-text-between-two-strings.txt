<div class="post-text" itemprop="text">
<p>When I have this code</p>
<pre><code>input('Write your name: ')
</code></pre>
<p>You can write your name after that string. </p>
<pre><code>&gt;&gt;&gt;Write your name: My name
</code></pre>
<p>But, how to have something display at the end of the input?</p>
<pre><code>&gt;&gt;&gt;Write your name: (Name)
&gt;&gt;&gt;Write your name: (Name Name)
&gt;&gt;&gt;Write your name: (Name Name Name)
</code></pre>
<p>So no matter what you write, the ')' character appears as you are writing?</p>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest the following implementation, which uses <code>msvcrt</code> to read a single char every time and act upon it (treating <code>Enter</code> and <code>Backspace</code> if encountered):</p>
<pre><code>import msvcrt

def input_between_strings (s, t):
    res = ''
    while True:
        print(s, res, t, sep = '', end = ' \r')
        curr = msvcrt.getch()[0]
        if curr == 13:
            print()
            return res
        elif curr == 8:
            res = res[:-1]
        else:
            res += chr(curr)
</code></pre>
<p>With your case, you can call it like</p>
<pre><code>result = input_between_strings('&gt;&gt;&gt; Write your name: (', ')')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In general you don't get to do that.
The problem is that the user commits the input to your program by hitting <code>Enter</code>, which adds a newline to the display.  If you have vertical spacing control on the display, you could back up a line, move to the end, and continue with your output.  Otherwise, you're going to be out of luck ... or worse, you'll have to write your own handlers for <code>stdin</code> and <code>stdout</code>.</p>
</div>
<span class="comment-copy">just curious, why do you want that functionality?</span>
<span class="comment-copy">You need to write a specialized equivalent of <code>input</code> using the input and output streams. It will probably involve <code>sys.stdin</code> and <code>sys.stdout</code>.</span>
<span class="comment-copy">Or you can mess around with <a href="https://docs.python.org/3/library/curses.html" rel="nofollow noreferrer">docs.python.org/3/library/curses.html</a></span>
<span class="comment-copy">@Prith I am just curious how would I do such thing.</span>
<span class="comment-copy"><code>msvcrt</code> module is only available on Windows.</span>
<span class="comment-copy">@zwer Whatever the solution ends up being here, it's going to be terminal specific.  The above works basically for a dos/command window.  Linux and Mac would have a similar solution but with a different library (curses).</span>
