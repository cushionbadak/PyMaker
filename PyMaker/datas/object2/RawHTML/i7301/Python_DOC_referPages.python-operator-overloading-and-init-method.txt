<div class="post-text" itemprop="text">
<p>I am learning python from Mark Lutz Books 5th Edition right now i am working out OOP in python. There is a concept of Operator Overloading. Okay i now very well what operator overloading and and how you use it to process your objects using e.g. arithmetic operators etc. But what is really driving me nuts is he is mentioning <strong>__init__</strong> method which is basically a <strong>constructor</strong> in python as the <strong>representative of operator overloading class</strong> saying it as one of the methods belonging to the operator overloading family methods. Is it really something like this or is my perception wrong considering his lines and just how it is an <strong>Operator Overloading Method!</strong>?.<a href="https://books.google.com.pk/books?id=4pgQfXQvekcC&amp;pg=PT1244&amp;lpg=PT1244&amp;dq=__init__%20as%20a%20representative%20of%20operator%20overloading%20class&amp;source=bl&amp;ots=As0ukfIZOn&amp;sig=nlRWpe_KbJiQH8dZnhzK2jyPvqM&amp;hl=en&amp;sa=X&amp;ved=0ahUKEwi59Ir35aXVAhUDVBQKHffED_QQ6AEIJTAA#v=onepage&amp;q=__init__%20as%20a%20representative%20of%20operator%20overloading%20class&amp;f=false" rel="nofollow noreferrer">Here is the reference to the topic.</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I think that <code>__init__</code> is mentioned alongside the operator methods because it's a double-underscored special method like they are. But I think it's very misleading to call them all "operator overloading methods", since many special methods have nothing to do with operators.</p>
<p>I'd suggest reading the <a href="https://docs.python.org/3/reference/datamodel.html#special-method-names" rel="nofollow noreferrer">official Python documentation</a> on this topic, where <code>__foo__</code> type methods are just call "special methods". Some of them are indeed related to operators, but many others are related to converting between types (<code>__str__</code>, <code>__bool__</code>, <code>__int__</code>, etc.) or implementing some builtin functions (<code>__len__</code>, <code>__iter__</code>, <code>__format__</code>, <code>__hash__</code>, etc.). Others are usually only run indirectly, like the <code>__get__</code>, <code>__set__</code> and <code>__delete__</code> methods that implement the descriptor protocol. I'd group <code>__init__</code> and <code>__new__</code> in with those indirectly run methods, rather than with the ones that implement operators.</p>
</div>
<div class="post-text" itemprop="text">
<p>My understanding of "Operator Overloading" is effectively that when you make a class, you can define the way that standard things work. For example, you could create a class where the addition operator (<code>+</code>) is used to concatenate items instead of finding their sum (i.e. <code>5+5==55</code> instead of <code>5+5==10</code>).
In this same way, when you define <code>__init__</code>, you're redefining, or 'overloading' the standard 'constructor' to make your own for that particular class.</p>
</div>
<span class="comment-copy">You're overloading the constructor, when you define <code>__init__</code> for a new class. Given your definition of operator, a constructor can be seen as an operator.</span>
<span class="comment-copy"><code>__init__</code> is a component of <code>__call__</code>, which is the <code>()</code> operator.</span>
