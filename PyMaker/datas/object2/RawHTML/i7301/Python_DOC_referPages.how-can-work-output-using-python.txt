<div class="post-text" itemprop="text">
<p>I made some script for modify text.</p>
<p>But I can't make result.
below is my script.
i just begin study python.</p>
<p>I think my script didn't work because <code>f = open('find_c_volume_show.txt', 'w')</code></p>
<p>please help me.</p>
<pre><code>import sys
from itertools import islice

def next_n_lines(file_opened, N):
        return [x.strip() for x in islice(file_opened, N)]

field_line = 1
num = 0
N = 9
split_line = field_line / N

strings = ("Vserver", "Volume Name", "Used Size", "Available Size", "Volume Size", "Aggregate Name", "Space Saved by Storage Efficiency")
f = open('find_c_volume_show.txt', 'w')
for line in open("c_volume_show.txt"):
        if any(s in line for s in strings):
                field1,field2 = line.strip().split(':')
                field_line += 1
                f.write(field2 + '\n')
f.close()

f = open('find_c_volume_show.txt', 'w')
f.write("Vserver,Volume Name,Aggregate Name,Volume Size,Available Size,Used Size,Space Saved\n")
with open('find_c_volume_show.txt', 'w') as result:
        while num &lt; split_line:
                num += 1
                lines = next_n_lines(result, N)
                f.write('{}'.format(','.join(lines)) +'\n' )
f.close()
</code></pre>
<p>below is my text file. text file has data multi data.</p>
<pre><code>                                   Vserver Name: FAS8040-ZZZZ
                                    Volume Name: vol0
                                 Aggregate Name: Node1_aggr0
                                    Volume Size: 466.6GB
                                 Available Size: 436.2GB
                                Filesystem Size: 466.6GB
                        Total User-Visible Size: 466.6GB
                                      Used Size: 30.40GB
                                Used Percentage: 6%
                                      Node name: FAS8040-ZZZZ
              Space Saved by Storage Efficiency: 0B
         Percentage Saved by Storage Efficiency: 0%
                   Space Saved by Deduplication: 0B
                     Space Saved by Compression: 0B
          Percentage Space Saved by Compression: 0%
                       Total Physical Used Size: 22.37GB
</code></pre>
<p>I want result like below.</p>
<pre><code>Vserver,Volume Name,Aggregate Name,Volume Size,Available Size,Used Size,Space Saved
FAS8040-ZZZZ,vol0,Node1_aggr0,466.6GB,435.7GB,30.92GB,0B
FAS8040-YYYY,vol0,Node2_aggr0,466.6GB,428.7GB,37.91GB,0B
FAS8040-XXXX,vol0,Node2_aggr0,466.6GB,428.7GB,37.91GB,0B
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that each time you open file with <code>open(filename,'w')</code>, it gets erased. You can use "temporal" file with different name to store results of your first <code>for</code> loop, or I would suggest to aggregate content of each line to list, and then write it straight away. </p>
<p>Additionally, you have problems with your "split_line" value, it is always 0. I guess what you mean is <code>len(strings)</code>.</p>
<p>Here is a code:</p>
<pre><code>import sys

strings = ("Vserver", "Volume Name", "Used Size", "Available Size", "Volume Size", "Aggregate Name", "Space Saved by Storage Efficiency")

with open('find_c_volume_show.txt', 'w') as f:
    f.write("Vserver,Volume Name,Aggregate Name,Volume Size,Available Size,Used Size,Space Saved,Snapshot,Total Used Size\n")
    row = []
    for line in open("c_volume_show.txt"):
        if any(s in line for s in strings):
            field1,field2 = line.strip().split(':')
            row.append(field2)
            print(row)
        if len(row) == len(strings):
            f.write('{}'.format(','.join(row)) +'\n' )
            print(row)
            row = []
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The new-ish <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code> module</a> (available in Python &gt;= 3.4) is a much, much easier way for reading and writing files than the traditional <code>open()</code> function. It is also great for working with path-like objects (both in Windows and for other OSes). </p>
<pre><code>from pathlib import Path
afile = Path(r'c:\temp\foo.bar') # absolute path to file
</code></pre>
<p>To read a file located at a path, you can just grab the text directly from the <code>Path</code> object! </p>
<pre><code>contents = afile.read_text()
content_lines = contents.split('\n')
</code></pre>
<p>...and WRITE text directly!</p>
<pre><code>data = '\n'.join(content_lines)
afile.write_text(data) # overwrites existing file
</code></pre>
<p>You can also use its <code>open</code> method rather than the <code>open</code> function: </p>
<pre><code>with afile.open() as f:
    dostuff(f)
</code></pre>
<p>The <code>with</code> statement is a context manager. It automatically "cleans up" by closing the file when you are done (no matter what happens- even if there is an error). </p>
<h2><a href="https://xkcd.com/1416/" rel="nofollow noreferrer">It's Paths - Paths all the way down</a></h2>
<p>Here is more about the <code>Path</code> library copied from another of my answers. </p>
<p>To simplify: you can build up any path (directory and file path objects are treated exactly the same) as an object, which can be an <em>absolute path object</em> or a <em>relative path object</em>. You can use raw strings to make complex paths (i.e., <code>r'string'</code>) and <code>pathlib</code> will be very forgiving. However, note that there are better ways to build up paths than raw strings (see further down). </p>
<p>Here are examples:</p>
<pre><code>from pathlib import Path

Path(r'c:\temp\foo.bar') # absolute path
Path(r'c:/temp/foo.bar') # same absolute path
Path('foo.bar') # different path, RELATIVE to current directory
Path('foo.bar').resolve() # resolve converts to absolute path
Path('foo.bar').exists() # check to see if path exists
</code></pre>
<p>Note that if you're on Windows <code>pathlib</code> forgives you for using the "wrong slash" in the second example. See discussion at the end about why you should probably <em>always</em> use the forward slash. </p>
<p>Simple displaying of some useful paths- such as the current working directory and the user home- works like this: </p>
<pre><code># Current directory (relative):
cwd = Path() # or Path('.')
print(cwd)

# Current directory (absolute):
cwd = Path.cwd()
print(cwd)

# User home directory:
home = Path.home()
print(home)

# Something inside the current directory
file_path = Path('some_file.txt') # relative path; or 
file_path = Path()/'some_file.txt' # also relative path
file_path = Path().resolve()/Path('some_file.txt') # absolute path
print(file_path)
</code></pre>
<p>To navigate down the file tree, you can do things like this. Note that the first object, <code>home</code>, is a <code>Path</code> and the rest are just strings: </p>
<pre><code>afile = home/'Documents'/'Project Documentation'/'file.txt' # or
afile = home.join('Documents','Project Documentation','file.txt')
</code></pre>
<p>Check to see if it is a file or a directory (and exists) this way: </p>
<pre><code>afile.is_dir()
afile.is_file()
</code></pre>
<p>Make a new, empty file without opening it like this (silently replaces any existing file): </p>
<pre><code>afile.touch()
</code></pre>
<p>To make the file <em>only if it doesn't exist</em>, use <code>exist_ok=False</code>:</p>
<pre><code>try:
    afile.touch(exist_ok=False)
except FileExistsError:
    # file exists
</code></pre>
<p>Make a new directory (under the current directory, <code>Path()</code>) like this: </p>
<pre><code>Path().mkdir('new/dir') # get errors if Path()/`new` doesn't exist
Path().mkdir('new/dir', parents=True) # will make Path()/`new` if it doesn't exist
Path().mkdir('new/dir', exist_ok=True) # errors ignored if `dir` already exists
</code></pre>
<p>Get the file extension or filename of a path this way:</p>
<pre><code>afile.suffix # empty string if no extension
afile.stem # note: works on directories too
</code></pre>
<p>Use <code>name</code> for the entire last part of the path (stem and extension if they are there):</p>
<pre><code>afile.name # note: works on directories too
</code></pre>
<p>Rename a file using the <code>with_name</code> method (which returns the same path object but with a new filename):</p>
<pre><code>new_file = afile.with_name('file_new.txt')
</code></pre>
<p>You can iterate through all the "stuff' in a directory like so using <code>iterdir</code>: </p>
<pre><code>all_the_things = list(Path().iterdir()) # returns a list of Path objects
</code></pre>
<h2>Sidebar: backslashes (<code>\</code>)</h2>
<p>Be careful when using backslashes in a path string, especially <em>ending</em> a path with a backslash. As with <strong>any</strong> string, Python will read that <em>terminating backslash</em> as an escape character <em>even in raw input mode</em>. Observe:</p>
<pre><code>&gt;&gt;&gt; r'\'
  File "&lt;stdin&gt;", line 1
    r'\'
       ^
SyntaxError: EOL while scanning string literal
</code></pre>
<p>So this will give a pretty cryptic error message if you are not aware of this issue: </p>
<pre><code>&gt;&gt;&gt; Path(r'C:\')
  File "&lt;stdin&gt;", line 1
    Path(r'\')
             ^
SyntaxError: EOL while scanning string literal
</code></pre>
<p>The reason for this error is that <code>\'</code> is assumed to be a single quotation <em>in the string</em>. This works fine: <code>'\''</code> (the second single quotation ends the string).</p>
<p>If you insist on using backslashes, be sure to use raw input mode or you will run into problems. For example, the <code>'\t'</code> character represents a tab. So when you do this (without raw input): </p>
<pre><code>&gt;&gt;&gt; Path('C:\temp')
</code></pre>
<p>You are putting a tab character into your path. This is perfectly legal and Python won't complain until you do something that causes Windows to try turning it into a real Windows path: </p>
<pre><code>&gt;&gt;&gt; Path('C:\temp').resolve()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
OSError: [WinError 123] The filename, directory name, or volume label syntax is incorrect: 'C:\temp'
</code></pre>
<p>This is also a very cryptic error if you do not know what is going on! Best to avoid the backslash characters altogether when messing about with paths. </p>
</div>
<div class="post-text" itemprop="text">
<p>It's work.
I change strings content.</p>
<p>Thank you so much.</p>
<pre><code>strings = ("Vserver Name:", "Volume Name:", "Aggregate Name:", "Volume Size:", "Available Size:", "  Used Size:", "  Used Percentage:", "Node name:", "Space Saved by Storage Efficiency:")

with open('find_c_volume_show.txt', 'w') as f:
        f.write("Vserver,Volume,Aggregate,Total,Avail,Used,UsedP,Node,Saved\n")
        row = []
        for line in open("c_volume_show.txt"):
                if any(s in line for s in strings):
                        field1,field2 = line.strip().split(':')
                        row.append(field2.strip())
                if len(row) == len(strings):
                        f.write('{}'.format(','.join(row)) +'\n' )
                        row = []
f.close()
</code></pre>
</div>
<span class="comment-copy">Your input text file can contain multiple volume informations? So the <code>FAS8040-ZZZZ</code> content is just an extract right?</span>
<span class="comment-copy">what is the error message you are getting when executing the script? are you getting one ? [You open the file at the top, this should either work or result in an Exception.]</span>
<span class="comment-copy">Thank you so much. your code very help. by the way, find result has wrong result. because text file has same content <code>Used Size :  30.40GB Total Physical Used Size :  22.37GB</code>. I want see Used Size content.</span>
<span class="comment-copy">I tried using <code>re</code> for my code. But I didn't success yet.</span>
<span class="comment-copy"><code>import sys import re  strings = ['Vserver Name', 'Volume Name', 'Aggregate Name', 'Volume Size', 'Available Size', '^Used Size', 'Node name', 'Space Saved by Storage Efficiency'] with open('find_c_volume_show.txt', 'w') as f:         f.write("Vserver Name,Volume Name,Aggregate Name,Volume Size,Available Size,Used Size,Node name,Space Saved\n")         for line in open("c_volume_show.txt"):                 for regex in strings:                         s = re.search(regex,line)                         print(s)</code></span>
<span class="comment-copy">I tried upper code for show only 'Used Size'. But result not correct. please help.</span>
