<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/16926130/convert-to-binary-and-keep-leading-zeros-in-python">Convert to binary and keep leading zeros in Python</a>
<span class="question-originals-answer-count">
                    8 answers
                </span>
</li>
</ul>
</div>
<p>I want to convert some input ASCII characters into bytes. Such as from 'a' to 01100001.<br/>
I have read answers like <a href="https://stackoverflow.com/questions/4523551/python-ascii-to-binary">this</a>. But sometimes it gives out 0b10000110 like 9 digits values. I am not sure if that's an error or that's the way it supposes to work. 
 I have made something like this:</p>
<pre><code>text = list(input("text: "))

for character in text:
    if character == ' ':
        byt = '00000000'
    else:
        byt = bin(ord(character))
    byt = byt.replace('b', '') #delete the 'b' in the output
    if len(byt) != 8:
        byt = '0' + byt
    print(byt)
</code></pre>
<p>It worked pretty well with normal characters. But when I entered weird characters like: 'B<br/>
It outputs very strangely:</p>
<pre><code>001110
00100111
0010000000
01000010
</code></pre>
<p>I am not very experienced with Python, so I don't know if there is a way that you can write a function or other methods to do this.<br/>
I am using Python 3.6<br/>
Many thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>The insight you are looking for is:</p>
<pre><code>&gt;&gt;&gt; '{:08b}'.format(121)
'01111001'
&gt;&gt;&gt; '{:08b}'.format(7)
'00000111'
</code></pre>
<p><strong>UPDATE</strong></p>
<p>As suggested by Martijn Pieters, the builtin <code>format</code> function is far superior:</p>
<pre><code>&gt;&gt;&gt; format(121, '08b')
'01111001'
&gt;&gt;&gt; format(7, '08b')
'00000111'
</code></pre>
<p><strong>UPDATE 2</strong></p>
<p>Just realized this question was marked as a duplicate. Pieters gave the format answer <a href="https://stackoverflow.com/a/16926357/831878">here</a>, and explains how it works in detail.</p>
</div>
<span class="comment-copy">You don't want <i>bytes</i>, you want a <i>binary representation</i>. A string consisting of only 0 and 1 characters. The same way that <code>"42"</code>is not an integer, it is a string representation of the number.</span>
<span class="comment-copy">binary representation is what I mean. Thanks</span>
<span class="comment-copy"><code>format(ord(character), '08b')</code> would produce an 8-character binary representation.</span>
<span class="comment-copy">Don't use <code>str.format()</code> where you can use the <a href="https://docs.python.org/3/library/functions.html#format" rel="nofollow noreferrer"><code>format()</code> function</a>. Why add the parsing overhead? <code>format(121, '08b')</code> produces the same output without Python having to find the placeholder and pulling the formatting instruction out. You have just <i>one</i> placeholder and no other text in that template string.</span>
<span class="comment-copy">How did I not know about this builtin function? I thought I knew them all. Wow, thanks!</span>
