<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2600191/how-can-i-count-the-occurrences-of-a-list-item">How can I count the occurrences of a list item?</a>
<span class="question-originals-answer-count">
                    22 answers
                </span>
</li>
</ul>
</div>
<p>In short, I am making a function that takes 2 arguments 'sequence' and 'item'. The 'sequence' can be anything - an integer, a string, or a list containing integers or strings. I am trying to make a function that counts the amount of times 'item' occurs in the 'sequence'. Please take into account, I am still a newbie at Python. A simple answer would be very much appreciated.
This is what I have so far</p>
<pre><code>def count(sequence, item):
    found = 0
    if sequence == item:
        found += 1
        return found
    else:
        for num in sequence:
            if num == sequence:
                found += 1
                return found
            else:
                return False


print count([4,'foo',5,'hi'], 5)
</code></pre>
<p>The <code>else</code> part of the code is meant to be enabled if the <code>sequence</code> is something like a list. I was thinking I should loop through the list using <code>for</code> and do the same thing - but it's not working as it keeps returning <code>False</code> which follows the second 'else' statement. Any idea how I can do this? For clarification, the output in the example above should be <code>1</code> because '5' occurs once in the list.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>EDIT:</strong> </p>
<p>Changed <code>return</code> to return the number of occurrences instead of <code>True/False</code></p>
<hr/>
<p>You are checking each item in sequence and evaluating, if it doesn't equal <code>item</code> it will return <code>False</code> right away, that is why you're getting False always.</p>
<p>You need to have your <code>loop</code> increment <code>found</code> and once the <code>loop</code> is done then use <code>if/else</code> to check whether <code>found == 0</code> or not. A <em>simple</em> example:</p>
<pre><code>def count(sequence, item):
    found = 0
    if sequence == item:
        return 1

    for num in sequence:
        if num == item:
            found += 1

    return found
</code></pre>
<hr/>
<p>If you learned list-comprehension already, you can use it as the following:</p>
<pre><code>def count(sequence, item):
    if sequence == item:
        return 1
    return sum(1 for x in sequence if x == item)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>len([i for i in sequence if item in i])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If we use your code as a basis, we get the following if we want it to work.
You told it to loop over sequence, asking when <em>num</em> is equal to <em>sequence</em>, but one part of the list is not equal to the whole list. To fix this, we use an index. So we say, if <em>item</em> is equal to <em>sequence[i]</em>, where is is an index, then we do <em>found +=1</em>. You also had the return statement in the <em>for</em>-loop, while you should get it outside of the <em>for</em>-loop, because it because breaks the loop. I hope this helps.</p>
<pre><code>    def count(sequence, item):
        found = 0
        if sequence == item:
            found += 1
            return found
        else:
            for num in range(len(sequence)):
                if item == sequence[num]:
                    found += 1
            if found &gt; 0:
                return found
            else:
                return False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a recursive function to repeat calls on the count function when the first argument is a list, or use a simple <code>==</code> when it is not. This can equally handle nested lists by walking through the nesting recursively:</p>
<pre><code>def count(sequence, item):
    found = 0
    if isinstance(sequence, list):
        for x in sequence:
            found += count(x, item)
    else:
        return int(item == sequence)
    return found


print count([4,'foo',5,'hi', [5]], 5)
# 2
print count(5, 5)
# 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd use <a href="https://docs.python.org/2/library/collections.html#collections.Sequence" rel="nofollow noreferrer"><code>collections.Sequence</code></a> (or <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence" rel="nofollow noreferrer"><code>collections.abc.Sequence</code></a> in Python 3) to determine if the items are sequences (lists, tuples, etc). If you just want to know if the item is in the list, which is what your code seems to be doing in spite of the name <code>count</code>:</p>
<pre><code>from collections import Sequence
# In Python 3 it would be
# from collections.abc import Sequence

def count(sequence, item):
    for i in sequence:
        if item == i or (isinstance(i, Sequence) and item in i):
            return True
    return False
</code></pre>
<p>If you want to actually count the number of appearances of <code>item</code> in <code>sequence</code>:</p>
<pre><code>from collections import Sequence
# In Python 3 it would be
# from collections.abc import Sequence

def count(sequence, item):
    found = 0
    for i in sequence:
        if item == i or (isinstance(i, Sequence) and item in i):
            found += 1
    return found
</code></pre>
<p>There could be the possibility that a list within <code>sequence</code> contains in turn deeper sublists, and so on, in which case you may want a recursive algorithm. For finding if the element is contained you could go with:</p>
<pre><code>from collections import Sequence
# In Python 3 it would be
# from collections.abc import Sequence

def count(sequence, item):
    for i in sequence:
        if item == i or (isinstance(i, Sequence) and count(i, item)):
            return True
    return False
</code></pre>
<p>For actually counting:</p>
<pre><code>from collections import Sequence
# In Python 3 it would be
# from collections.abc import Sequence

def count(sequence, item):
    found = 0
    for i in sequence:
        if item == i:
            found += 1
        elif isinstance(i, Sequence) and item in i:
            found += count(i, item)
    return found
</code></pre>
<p>PD: Note that strings are considered sequences, and therefore <code>"b" in "abc"</code> and <code>"b" in ["a", "b", "c"]</code> are both true. If you don't want <code>"b"</code> being considered an element of <code>"abc"</code> (i.e. you want to consider strings atomically, like numbers), you'd have to tune the code a bit. You could replace <code>isinstance(i, Sequence)</code> with <code>isinstance(i, (list, tuple))</code>, or with <code>isinstance(i, Sequence) and not isinstance(i, basestring)</code> (or, in Python 3, <code>isinstance(i, Sequence) and not isinstance(i, (str, bytes))</code>).</p>
</div>
<span class="comment-copy">What do you want your function to return? If - as the name suggests - you want it to return the count, then <i>do it</i>. As it is, your function returns either <code>False</code> or <code>True</code>, <i>not</i> a number.</span>
<span class="comment-copy">That should be <code>num == item</code>, not <code>num == sequence</code></span>
<span class="comment-copy">@Błotosmętek Thanks</span>
<span class="comment-copy">I would +1 your answer for simplicity, but I won't because you didn't explain anything to OP</span>
<span class="comment-copy">I think is very straightforward answer</span>
<span class="comment-copy">you should change if part to : if item==i</span>
