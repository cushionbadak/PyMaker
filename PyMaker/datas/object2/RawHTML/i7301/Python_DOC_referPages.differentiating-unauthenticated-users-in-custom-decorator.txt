<div class="post-text" itemprop="text">
<p>Django beginner here. </p>
<p>I have been using the inbuilt <code>login_required</code> decorator. I want to override it for certain users who's referral urls match a certain pattern (e.g. all users originating from <code>/buy_and_sell/</code>). </p>
<p>My purpose is to show a special login page to just these users, and a generic one to everyone else.</p>
<p>I've been looking at various examples of writing custom decorators (e.g. <a href="https://wiki.python.org/moin/PythonDecorators" rel="nofollow noreferrer">here</a>, <a href="https://stackoverflow.com/questions/739654/how-to-make-a-chain-of-function-decorators">here</a>, <a href="http://operatorerror.org/2012/07/create-a-custom-authentication-decorator-in-django/" rel="nofollow noreferrer">here</a> and <a href="https://docs.python.org/3/reference/compound_stmts.html#function" rel="nofollow noreferrer">here</a>). But I find the definitions hard to grasp for a beginner. Can someone give me a layman's understanding (and preferably illustrative example) of how I can solve my problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>There is <a href="https://docs.djangoproject.com/en/1.11/topics/auth/default/#limiting-access-to-logged-in-users-that-pass-a-test" rel="nofollow noreferrer">user_passes_test</a> decorator included in Django.You do not have to make your own decorator.</p>
<pre><code>from django.contrib.auth.decorators import user_passes_test

def check_special_user(user):
    return user.filter(is_special=True)

# if not the special user it will redirect to another login url , otherwise process the view
@user_passes_test(check_special_user,login_url='/login/') 
def my_view(request):
   pass
    ...
</code></pre>
<p><strong>Need Request in decorator</strong> </p>
<p>To do that make a clone version of <a href="https://docs.djangoproject.com/en/1.11/_modules/django/contrib/auth/decorators/#user_passes_test" rel="nofollow noreferrer">user_passes_test</a> in your project or app and make change as follow,</p>
<pre><code>def user_passes_test(test_func, login_url=None, redirect_field_name=REDIRECT_FIELD_NAME):
    """
    Decorator for views that checks that the user passes the given test,
    redirecting to the log-in page if necessary. The test should be a callable
    that takes the user object and returns True if the user passes.
    """

    def decorator(view_func):
        @wraps(view_func, assigned=available_attrs(view_func))
        def _wrapped_view(request, *args, **kwargs):
            if test_func(request.user):  # change this line to request instead of request.user
                return view_func(request, *args, **kwargs)
            path = request.build_absolute_uri()
            resolved_login_url = resolve_url(login_url or settings.LOGIN_URL)
            # If the login url is the same scheme and net location then just
            # use the path as the "next" url.
            login_scheme, login_netloc = urlparse(resolved_login_url)[:2]
            current_scheme, current_netloc = urlparse(path)[:2]
            if ((not login_scheme or login_scheme == current_scheme) and
                    (not login_netloc or login_netloc == current_netloc)):
                path = request.get_full_path()
            from django.contrib.auth.views import redirect_to_login
            return redirect_to_login(
                path, resolved_login_url, redirect_field_name)
        return _wrapped_view
    return decorator
</code></pre>
<blockquote>
<p>change test_func(request.user) to test_func(request) and you will get
  whole request in your decorator function.</p>
</blockquote>
<p><strong>Edit</strong>: In url.py ,</p>
<pre><code>url (
    r'^your-url$',
    user_passes_test(check_special_user, login_url='/login/')(
        my_view
    ),
    name='my_view'
)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here the best answer to understand python decorators : <a href="https://stackoverflow.com/questions/739654/how-to-make-a-chain-of-function-decorators/1594484#1594484">How to make a chain of function decorators?</a></p>
<p>You can use <code>login_url</code> argument of <a href="https://github.com/django/django/blob/master/django/contrib/auth/decorators.py#L38" rel="nofollow noreferrer"><code>login_required</code></a> : </p>
<pre><code>@login_required(login_url='some_url)
</code></pre>
<p>Another way is to create a custom decorator, an example from the <a href="https://docs.djangoproject.com/en/1.11/topics/auth/default/#django.contrib.auth.decorators.user_passes_test" rel="nofollow noreferrer">documentation of Django</a> :</p>
<pre><code>from django.contrib.auth.decorators import user_passes_test

def email_check(user):
    return user.email.endswith('@example.com')

@user_passes_test(email_check)
def my_view(request):
    ...
</code></pre>
</div>
<span class="comment-copy">Question: how would I get the referral url in <code>check_special_user</code>? i dont have <code>request</code> there.</span>
<span class="comment-copy">No request can not be used in user_passes_test method decorator. What you exactly trying to do?</span>
<span class="comment-copy">Like I mentioned in my question, I'm trying to show a special login page to <b>unauth users</b> who originated from certain urls in my app (e.g. <code>/buy_and_sell/</code>). All other unauth users would be shown a generic login page. I need to look at the contents of <code>request.META.get('HTTP_REFERER')</code> for that.</span>
<span class="comment-copy">'trying to show a special login page to users who originated from certain urls' - Are you making any changes in user table for this ? like the user is originated now.</span>
<span class="comment-copy">No, users are unauthenticated during this flow, I change nothing in user table. Just want to show special login page to this special set of unauth users, and a generic login page to all other unauth users.</span>
<span class="comment-copy">did you see any reason to downvote on my answer ?</span>
<span class="comment-copy">Anyways i am giving you +1 for your answer.</span>
