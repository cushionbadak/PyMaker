<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/20510768/count-frequency-of-words-in-a-list-and-sort-by-frequency">Count frequency of words in a list and sort by frequency</a>
<span class="question-originals-answer-count">
                    12 answers
                </span>
</li>
</ul>
</div>
<p>I'm just studying Python and found some place even not as convenient as Java8, e.g. word count</p>
<p>At first I thought it may be very easy to implement just like</p>
<pre><code>&gt;&gt;&gt; {x : x**2 for x in range(10)}
{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}
</code></pre>
<p>But actually I found it is a little cumbersome</p>
<pre><code>&gt;&gt;&gt; sent3
['In', 'the', 'beginning', 'God', 'created', 'the', 'heaven', 'and', 'the', 'earth', '.']
&gt;&gt;&gt; for w in sent3:
...     if w in word_count:
...         word_count[w] += 1
...     else:
...         word_count[w] = 1
...
</code></pre>
<p>But in Java8 it's very convenience to implement it,</p>
<pre><code>    List&lt;String&gt; strings = asList("In", "the", "beginning", "God", "created", "the", "heaven", "and", "the", "earth");
    Map&lt;String, Long&gt; word2CountMap = strings.stream().collect(groupingBy(s -&gt; s, counting()));
</code></pre>
<p>or</p>
<pre><code>    word2CountMap = new HashMap&lt;&gt;();
    for (String word : strings) {
        word2CountMap.compute(word, (k, v) -&gt; v == null ? 1 : v + 1);
    }
</code></pre>
<p>I want to know if exist some advanced usage of Python <code>dict</code> could implement it more easily that I do not know?   </p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a faster way of counting the words using <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a> from <code>collections</code> module.</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; sent3 = ['In', 'the', 'beginning', 'God', 'created', 'the', 'heaven', 'and', 'the', 'earth', '.']
&gt;&gt;&gt; Counter(sent3) 
Counter({'the': 3, 'In': 1, 'beginning': 1, 'God': 1, 'created': 1, 'heaven': 1, 'and': 1, 'earth': 1, '.': 1})
</code></pre>
<p>And if you want a <code>dict</code> object and not that of <code>Counter</code> type:</p>
<pre><code>&gt;&gt;&gt; dict(Counter(sent3))
{'In': 1, 'the': 3, 'beginning': 1, 'God': 1, 'created': 1, 'heaven': 1, 'and': 1, 'earth': 1, '.': 1}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While you can use <code>collections.Counter()</code> - and I recommend you use it - you can easily accomplish what your asking using a <em>dictionary comprehension</em> - a concept closely tied into the Python idiom:</p>
<pre><code>&gt;&gt;&gt; sent3 = ['In',
...  'the',
...  'beginning',
...  'God',
...  'created',
...  'the',
...  'heaven',
...  'and',
...  'the',
...  'earth',
...  '.']
&gt;&gt;&gt; {word : sent3.count(word) for word in sent3}
{'.': 1,
 'God': 1,
 'In': 1,
 'and': 1,
 'beginning': 1,
 'created': 1,
 'earth': 1,
 'heaven': 1,
 'the': 3}
&gt;&gt;&gt; 
</code></pre>
<p>You see, the problem is rarely that one programming language is less functional than the other. It simply seems that way because when learning a new language, you don't yet have the experience necessary to know of the specific language features that are suited to certain tasks, as is the case here.</p>
<p>However, that's not to say that all languages are the same. There are differences in each language, and each language has a different philosophy and different idioms. When learning a new language, it's better to ask <em>"I can do X in Java this way. What is the idiomatic way to this in Python?"</em> rather than <em>"I can X in Java this way. In Python, it's not as convenient."</em></p>
</div>
<div class="post-text" itemprop="text">
<p>You should check out <code>collections.Counter</code></p>
<pre><code>In [1]: from collections import Counter

In [2]: c = Counter(['In', 'the', 'beginning', 'God', 'created', 'the', 'heaven', 'and', 'the', 'earth', '.'])

In [3]: c
Out[3]:
Counter({'.': 1,
         'God': 1,
         'In': 1,
         'and': 1,
         'beginning': 1,
         'created': 1,
         'earth': 1,
         'heaven': 1,
         'the': 3})
</code></pre>
</div>
<span class="comment-copy">This post is beyond confusing. What are you trying to do? Count the number of words in the list...?</span>
<span class="comment-copy">How do you quantify <code>convenient</code>? And what's the end goal?</span>
