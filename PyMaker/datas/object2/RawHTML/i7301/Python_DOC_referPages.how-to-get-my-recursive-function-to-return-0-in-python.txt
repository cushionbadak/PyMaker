<div class="post-text" itemprop="text">
<p>For my recursion assignment, the only built in function we are allowed to use is <code>len()</code> and 'print()'. So, not even <code>int()</code> is allowed to be used. The function I am supposed to make is supposed to break apart a number and print out each digit in the number.
So,</p>
<pre><code>&gt;&gt;breakApart(757890)

7
5
7
8
9
0
</code></pre>
<p>This is what I have come up with so far,</p>
<pre><code>def breakApart(number):
    c=0
    while number//10**c&gt;=10:
        c+=1
    integer_part=((number-(number%10**c))//(10**c))
    if number//10**c==0:
        return
    elif number//10**c&gt;0:
        print(integer_part)
        return breakApart(number%10**c)
</code></pre>
<p>This works for all numbers, except it will not print out 0s. I was thinking of writing something along the lines of,</p>
<pre><code>if (number%10**c)&gt;+10 and (number%10**c)//(10**(c-1))&lt;1:
    print(0)
    return breakApart(number%10**c)
</code></pre>
<p>But if there are consecutive 0s, it will not print all of them. I guess I could use another counter like I did at the beginning, but if anyone could think of less convoluted ways for me to approach this, please let me know.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use recursion to your advantage here, making the <code>print</code> call come after your recursive call:</p>
<pre><code>In [1]: def tell_digits(n):
   ...:     rest, first = n // 10, n % 10
   ...:     if rest:
   ...:         tell_digits(rest)
   ...:     print(first)
   ...:

In [2]: tell_digits(757890)
7
5
7
8
9
0
</code></pre>
<p>Note what happens if I put the <code>print</code> call <em>before</em> the recursive call:</p>
<pre><code>In [3]: def tell_digits(n):
   ...:     rest, first = n // 10, n % 10
   ...:     print(first)
   ...:     if rest:
   ...:         tell_digits(rest)
   ...:

In [4]: tell_digits(757890)
0
9
8
7
5
7
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If number can be a string:</p>
<pre><code>def breakApart(number):
    if len(number) == 0:
        return
    else:
        print(number[0])
        breakApart(number[1:])
</code></pre>
<p>Or reverse it:</p>
<pre><code>def breakApart(number):
    if len(number) == 0:
        return
    else:
        breakApart(number[:-1])
        print (number[-1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Something to keep you up at night:</p>
<pre><code>&gt;&gt;&gt; def breakApart(number):
...     return number &gt; 9 and breakApart(number // 10) or print(number % 10)
... 
&gt;&gt;&gt; breakApart(757890)
7
5
7
8
9
0
&gt;&gt;&gt; 
</code></pre>
<p>Python 3 specific, of course.</p>
</div>
<span class="comment-copy">Is recursion a requirement?</span>
<span class="comment-copy">@juanpa.arrivillaga "For my recursion assignment..." - sounds like it.</span>
<span class="comment-copy">@TomWyllie didn't read carefully enough :)</span>
<span class="comment-copy">@sneakysnake I'm assuming using <code>print</code> is also allowed, given that you've used it?</span>
<span class="comment-copy">What do you mean? It does print 0s.</span>
<span class="comment-copy">Thank you very much! I don't want to steal this answer, however, since it deviates quite a bit from my code, but I'll use it as an example</span>
<span class="comment-copy">Also, I'm a bit of a beginner, so I am trying to understand your code. What does "if rest" mean? If rest is what?</span>
<span class="comment-copy">@sneakysnake <code>if rest:</code> checks if <code>rest</code> is <a href="https://stackoverflow.com/questions/39983695/what-is-truthy-and-falsy-in-python-how-is-it-different-from-true-and-false"><i>falsey</i></a>. Also, see the <a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow noreferrer">docs</a>. In this case, it is the same as <code>if rest != 0:</code></span>
<span class="comment-copy">No, we were given an example of the input being an integer type, not string type.</span>
<span class="comment-copy">This might take me a little while to understand, but thank you for another interesting answer :)</span>
