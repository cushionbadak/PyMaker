<div class="post-text" itemprop="text">
<p>I've got a file that look like this:</p>
<pre><code>   TOTO   TATA   
TUTU   TITI  PAPA
         AAA BBB   CCCC
</code></pre>
<p>And I'd like to be able to substitute only the spaces starting a line with something else.</p>
<p>eg:</p>
<pre><code>eeeTOTO   TATA   
TUTU   TITI  PAPA
eeeeeeeeeAAA BBB   CCCC
</code></pre>
<p>It looks simple, but it does not work for me.</p>
<p>this is what I tried wrongly:</p>
<pre><code>#!/usr/bin/python

#open the file
fs = open("./Tst.tst", 'r')
fd = open("./Out.tst", 'w')

print fs.read()
print fd.read()

for line in fs:
    fd.write(line)
    for char in line:
        if (" ") in char:
            char = char.replace(" ", "e" )
            fd.write(char)
        else:
            print char

fd.close()
fs.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>re.sub</code> with a callback:</p>
<pre><code>In [979]: import re

In [980]: for x in lines.splitlines():
     ...:     print(re.sub('^ +', lambda k: 'e' * len(k.group(0)), x))
     ...:     
eeeTOTO   TATA   
TUTU   TITI  PAPA
eeeeeeeeeAAA BBB   CCCC
</code></pre>
<hr/>
<p>As a complete example, consider:</p>
<pre><code>def foo(k):
    'e' * len(k.group(0))

with open("./In.txt", 'r') as fs, open("./Out.txt", 'w') as fd:
    lines = fs.read()
    for x in lines.splitlines():
        print(re.sub('^ +', foo, file=fd)
</code></pre>
<p>When a match is encountered, the match object is passed to the callback, which returns another string as the replacement.</p>
</div>
<div class="post-text" itemprop="text">
<p>For a non-regex solution, this is what I could come up with.</p>
<p><strong>Disclaimer</strong></p>
<p>It works fine for the sample input but you'd have to run more tests on it to clear out bugs; if any.</p>
<pre><code># text = '   TOTO   TATA   '
# text = 'TUTU   TITI  PAPA'
text = '         AAA BBB   CCCC'

character_spot = False
num_empty_spots = 0
unwanted_text = ' '
replacement_text = 'e'

# this loop counts the number of empty spots in your string
for char in text:
  if char != unwanted_text and not character_spot:
    character_spot = True
    print 'Character exists'
  else:
    if not character_spot:
      num_empty_spots += 1
      print 'Empty spot'

# this replaces the first 'num_empty_spots' occurences of the unwanted_text
text = text.replace(unwanted_text, replacement_text, num_empty_spots)  
print text
</code></pre>
</div>
<span class="comment-copy">What "does not work"? what have you tried?</span>
<span class="comment-copy">You are looking for a strip function and most possibly the lstrip. But I really think you should show us what you tried :) <a href="https://docs.python.org/2/library/string.html#string.lstrip" rel="nofollow noreferrer">docs.python.org/2/library/string.html#string.lstrip</a></span>
<span class="comment-copy">@AntonvBR: strip won't <i>replace</i> characters, only remove them.</span>
<span class="comment-copy">@MartijnPieters True, I got ahead of myself.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/stdtypes.html#str.replace" rel="nofollow noreferrer"><code>replace()</code></a> is a great place to start exploring</span>
<span class="comment-copy">thanks a lot for your help</span>
<span class="comment-copy">Anytime.Was it helpful? Or did u opt for the regex option?</span>
<span class="comment-copy">both are good. Using the number is smart, I did not think of it. :)</span>
