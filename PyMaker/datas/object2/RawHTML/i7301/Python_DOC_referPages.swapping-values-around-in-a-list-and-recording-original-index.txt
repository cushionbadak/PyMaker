<div class="post-text" itemprop="text">
<p>Preface: This is a homework assignment and I am not looking for a complete answer, just a little nudge in the right direction.  I am writing a simple encryption program, that will take the name of an file as input, open it and rewrite it with the lines randomly shifted around.  I have done this, but I need to somehow keep track of the line numbers that were shifted around.  I know I need to write a new list and append the indexes+1 when they changed, but I can't quite figure out where to put it.  </p>
<pre><code>from random import *
seed(123)

text_file = input("Enter a name of a text file to mix: ")
f = open(text_file, 'r')
encrypted = open('encrypted.txt', 'w')
index = open('index.txt', 'w')
lines = []
for line in f:
    line = line.strip('\n')
    lines.append(line) 
ll=len(lines)
new_dict = {}
for line in lines:
    new_dict[lines.index(line)+1] = line
for i in range (0,ll*3):
    random_one = randint(0,ll-1)
    random_two = randint(0,ll-1)
    temp1 = lines[random_one]
    temp2 = lines[random_two]
    lines[random_one] = temp2
    lines[random_two] = temp1
for line in lines:
    encrypted.write(line + "\n")
encrypted.close()
</code></pre>
<p>As you can see I have also made a dictionary that would contain the contents of the .txt file as 1:lineone 2:linetwo.  But I am not sure if it would be easier to use this, or just use a list to keep track of it.  </p>
<p>Edit: I have changed my code to include:</p>
<pre><code>new_dict[random_one] = temp2
new_dict[random_two] = temp1
</code></pre>
<p>new_dict now prints the correct order of the shifted list, but at the wrong indexes.  For example, 1:line7 2:line11, but I want the indexes to match the line number so I can just print off the keys into an index file to use for decrypting. ex: 7:line7 11:line11 Any tips?</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't actually need to save the order of the shuffled lines. You can simply re-create it when you need it by using the same random seed that you originally used. The code below should give you a few ideas.</p>
<pre><code>import random

random.seed(123)

# Create a simple list of strings
a = list('abcdefgh')
print(a)

# Generate a shuffled list of indices
indices = list(range(len(a)))
random.shuffle(indices)

# Shuffle a into b
b = []
for i in indices:
    b.append(a[i])
print(b)

# Unshuffle b into c
c = [None] * len(b)
for i, v in zip(indices, b):
    c[i] = v
print(c)
</code></pre>
<p><strong>output</strong></p>
<pre><code>['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
['b', 'e', 'f', 'g', 'd', 'h', 'c', 'a']
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just shuffle an numpy array with indeces and shuffle them. So you can save the indices for later.</p>
<pre><code>import numpy as np

indices = np.arange(5)
np.random.shuffle(indices)
print(indices)
</code></pre>
<p>Version without numpy:</p>
<pre><code>from random import shuffle
indices = list(range(5))
shuffle(indices)
</code></pre>
</div>
<span class="comment-copy">You may be interested in using a shuffling algorithm to reduce the amount of bookkeeping you're currently doing. You will find that the <a href="https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm" rel="nofollow noreferrer">Knuth implementation of the Fisher-Yates algorithm</a> probably suits your needs.</span>
<span class="comment-copy">If <code>new_dict</code> contains the information you need to reconstruct the file and  you have implemented it correctly (it works) then at this point it is the easiest because it is done.</span>
<span class="comment-copy">You might find <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer">enumerate</a> useful for constructing <code>new_dict</code> : <code>for i, line in enumerate(lines): ...</code></span>
<span class="comment-copy">What wwii said. Doing <code>for line in lines: new_dict[lines.index(line)+1] = line</code> is <i>very</i> inefficient. For each line it has to do a linear scan through the <code>lines</code> list to find the index of the first line that matches the current <code>line</code>.</span>
<span class="comment-copy">You can do that with a plain list. Why bring Numpy into this? Besides, this is a homework assignment, and the OP probably isn't permitted to use Numpy.</span>
<span class="comment-copy">numpy and pandas have become the overkill solution of choice it seems. Why is numpy needed here?</span>
<span class="comment-copy">I added the list solution. Thank you guys.</span>
<span class="comment-copy">You should just do <code>list(range(10))</code>. <code>range(10)</code> gives you an iterator that <i>is</i> a list of items from 0 - 9. So, to put the <i>list</i> in memory, just call <code>list</code> on it.</span>
