<div class="post-text" itemprop="text">
<p>Consider this example where the <code>__dict__</code> of all instances of a class <code>A</code> will point to a global dict <code>shared</code>.</p>
<pre><code>shared = {'a': 1, 'b': 2}

class A(object):
    def __init__(self):
        self.__dict__ = shared
</code></pre>
<p>Now let's test a few things:</p>
<pre><code>&gt;&gt;&gt; a = A()
&gt;&gt;&gt; b = A()
&gt;&gt;&gt; a.a, a.b, b.a, b.b
(1, 2, 1, 2)
&gt;&gt;&gt; b.x = 100
&gt;&gt;&gt; shared
{'a': 1, 'x': 100, 'b': 2}
&gt;&gt;&gt; a.x
100
&gt;&gt;&gt; c = A()
&gt;&gt;&gt; c.a, c.b, c.x
(1, 2, 100)
&gt;&gt;&gt; shared['foo'] = 'bar'
&gt;&gt;&gt; a.foo, b.foo, c.foo
('bar', 'bar', 'bar')
&gt;&gt;&gt; a.__dict__, b.__dict__, c.__dict__
({'a': 1, 'x': 100, 'b': 2, 'foo': 'bar'},
 {'a': 1, 'x': 100, 'b': 2, 'foo': 'bar'},
 {'a': 1, 'x': 100, 'b': 2, 'foo': 'bar'}
)
</code></pre>
<p>All works as expected.</p>
<hr/>
<p>Now let's tweak class <code>A</code> a little by adding an attribute named <code>__dict__</code>.</p>
<pre><code>shared = {'a': 1, 'b': 2}

class A(object):
    __dict__ = None
    def __init__(self):
        self.__dict__ = shared
</code></pre>
<p>Let's run the same set of steps again:</p>
<pre><code>&gt;&gt;&gt; a = A()
&gt;&gt;&gt; b = A()
&gt;&gt;&gt; a.a, a.b, b.a, b.b
AttributeError: 'A' object has no attribute 'a'
&gt;&gt;&gt; b.x = 100
&gt;&gt;&gt; shared
{'a': 1, 'b': 2}
&gt;&gt;&gt; b.__dict__  # What happened to x?
{'a': 1, 'b': 2}
&gt;&gt;&gt; a.x
AttributeError: 'A' object has no attribute 'x'
&gt;&gt;&gt; c = A()
&gt;&gt;&gt; c.a, c.b, c.x
AttributeError: 'A' object has no attribute 'a'
&gt;&gt;&gt; shared['foo'] = 'bar'
&gt;&gt;&gt; a.foo, b.foo, c.foo
AttributeError: 'A' object has no attribute 'foo'
&gt;&gt;&gt; a.__dict__, b.__dict__, c.__dict__
({'a': 1, 'b': 2, 'foo': 'bar'},
 {'a': 1, 'b': 2, 'foo': 'bar'},
 {'a': 1, 'b': 2, 'foo': 'bar'}
)
&gt;&gt;&gt; b.x  # Where did this come from?
100
</code></pre>
<hr/>
<p>Based on the above information the first case worked as expected but the second one didn't and hence I would like to know what changed after the adding class level <code>__dict__</code> attribute. And can we access the instance dictionary being used now in any way?</p>
</div>
<div class="post-text" itemprop="text">
<p>In the first case the <code>self.__dict__</code> has access to the <code>__dict__</code> descriptor provided by its type. This descriptor allows it to get the underlying instance dictionary and also set it to a new one using <a href="https://github.com/python/cpython/blob/a66f9c6bb134561a24374f10e8c35417d356ce14/Objects/dictobject.c#L4312" rel="nofollow noreferrer"><code>PyObject_GenericGetDict</code></a> and <a href="https://github.com/python/cpython/blob/a66f9c6bb134561a24374f10e8c35417d356ce14/Objects/object.c#L1286" rel="nofollow noreferrer"><code>PyObject_GenericSetDict</code></a> respectively. </p>
<pre><code>&gt;&gt;&gt; A.__dict__
mappingproxy(
{'__module__': '__main__',
 '__init__': &lt;function A.__init__ at 0x1041fb598&gt;,
 '__dict__': &lt;attribute '__dict__' of 'A' objects&gt;,
 '__weakref__': &lt;attribute '__weakref__' of 'A' objects&gt;, '__doc__': None
})
&gt;&gt;&gt; A.__dict__['__dict__'].__get__(a)
{'a': 1, 'b': 2}
</code></pre>
<p>And of course we can set a new dictionary from here as well:</p>
<pre><code>&gt;&gt;&gt; new_dict = {}
&gt;&gt;&gt; A.__dict__['__dict__'].__set__(a, new_dict)  # a.__dict__ = new_dict
&gt;&gt;&gt; a.spam = 'eggs'
&gt;&gt;&gt; a.__dict__
{'spam': 'eggs'}
&gt;&gt;&gt; new_dict
{'spam': 'eggs'}
&gt;&gt;&gt; b = A()  # Points to `shared`
&gt;&gt;&gt; b.__dict__
{'a': 1, 'b': 2}
</code></pre>
<hr/>
<p>In the second case our class itself contains an attribute named <code>__dict__</code>, but still the <code>__dict__</code> attribute points to <code>mappingproxy</code>.</p>
<pre><code>&gt;&gt;&gt; A.__dict__
mappingproxy(
{'__module__': '__main__',
 '__dict__': None,
 '__init__': &lt;function A.__init__ at 0x1041cfae8&gt;,
 '__weakref__': &lt;attribute '__weakref__' of 'A' objects&gt;,
 '__doc__': None}
)
</code></pre>
<p><code>__dict__</code> attribute for classes in this way is a <a href="https://stackoverflow.com/questions/4877290/what-is-the-dict-dict-attribute-of-a-python-class">special attribute</a>.</p>
<pre><code>&gt;&gt;&gt; A.__weakref__ is A.__dict__['__weakref__']
True    
&gt;&gt;&gt; A.__weakref__ = 1    
&gt;&gt;&gt; A.__weakref__, A.__dict__['__weakref__']
(1, 1)

&gt;&gt;&gt; A.__dict__ = {}    
AttributeError: attribute '__dict__' of 'type' objects is not writable
</code></pre>
<p>The attribute we had set can be accessed like this:</p>
<pre><code>&gt;&gt;&gt; repr(A.__dict__['__dict__'])
'None'
</code></pre>
<hr/>
<p>A Python level we have now lost access to the instance dictionary but internally a class can find it using <a href="https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_dictoffset" rel="nofollow noreferrer"><code>tp_dictoffset</code></a>. As done in <a href="https://github.com/python/cpython/blob/a66f9c6bb134561a24374f10e8c35417d356ce14/Objects/object.c#L966" rel="nofollow noreferrer"><code>_PyObject_GetDictPtr</code></a>.</p>
<p>Both <a href="https://github.com/python/cpython/blob/master/Objects/object.c#L1207" rel="nofollow noreferrer"><code>__getattribute__</code></a> and <a href="https://github.com/python/cpython/blob/a66f9c6bb134561a24374f10e8c35417d356ce14/Objects/object.c#L1280" rel="nofollow noreferrer"><code>__setattr__</code></a> also access the underlying instance dictionary using <code>_PyObject_GetDictPtr</code>.</p>
<p>To access the instance dictionary being used we can actually implement <code>_PyObject_GetDictPtr</code> in Python using ctypes. This is pretty eloquently done by @user4815162342 <a href="https://stackoverflow.com/a/24498525/846892">here</a>.</p>
<pre><code>import ctypes

def magic_get_dict(o):
    # find address of dict whose offset is stored in the type
    dict_addr = id(o) + type(o).__dictoffset__

    # retrieve the dict object itself
    dict_ptr = ctypes.cast(dict_addr, ctypes.POINTER(ctypes.py_object))
    return dict_ptr.contents.value
</code></pre>
<p>Continuing the second case:</p>
<pre><code>&gt;&gt;&gt; magic_get_dict(a)
{'__dict__': {'a': 1, 'b': 2, 'foo': 'bar'}}  # `a` has only one attribute i.e. __dict__
&gt;&gt;&gt; magic_get_dict(b)
{'__dict__': {'a': 1, 'b': 2, 'foo': 'bar'}, 'x': 100}  # `x` found
&gt;&gt;&gt; magic_get_dict(b).update(shared)
&gt;&gt;&gt; b.a, b.b, b.foo, b.x
(1, 2, 'bar', 100)
</code></pre>
</div>
<span class="comment-copy">You shouldn't be adding attributes with leading and trailing double underscore characters which is reserved for system-defined names. See <a href="https://docs.python.org/3/reference/lexical_analysis.html#reserved-classes-of-identifiers" rel="nofollow noreferrer"><b>Reserved classes of identifiers</b></a>.</span>
<span class="comment-copy">@martineau I am aware of that. But that's not the point of this question.</span>
<span class="comment-copy">So you're wanting to know a workaround for something that was broken because you're not following the guidelines (which exist for a reason).</span>
<span class="comment-copy">@martineau Yes. But only for learning purpose. I won't be doing something similar in actual code.</span>
<span class="comment-copy">Can't you just access an instance's dictionary explicitly via something like <code>a.__dict__['foo']</code>?</span>
<span class="comment-copy">Alternatively, you could access <code>_PyObject_GetDictPtr</code> directly through <code>ctypes.pythonapi._PyObject_GetDictPtr</code>. You'd need to set the argtypes and restype manually, though.</span>
