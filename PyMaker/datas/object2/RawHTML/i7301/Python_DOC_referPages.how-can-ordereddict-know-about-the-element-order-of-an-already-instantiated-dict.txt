<div class="post-text" itemprop="text">
<p>I was playing around with the <code>OrderedDict</code> type in Python 3.6 and was surprised by its behaviour. When I create a simple <code>dict</code> like this in IPython:</p>
<pre><code>d = dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])
</code></pre>
<p>I get:</p>
<pre><code>{'guido': 4127, 'jack': 4098, 'sape': 4139}
</code></pre>
<p>as an output, which doesn't preserve the order of elements at instantiation for some reason. Now, when I create an <code>OrderedDict</code> from <code>d</code> like this:</p>
<pre><code>od = OrderedDict(d)
</code></pre>
<p>the output is:</p>
<pre><code>OrderedDict([('sape', 4139), ('guido', 4127), ('jack', 4098)])
</code></pre>
<p>Now I ask myself, how can the <code>OrderedDict</code>-constructor know about the order of elements at instantiation of <code>d</code>? And does it always behave the same, such that I can rely on the order of elements in the <code>OrderedDict</code>?</p>
<p>I was already reading the Python docs about dictionaries and <code>OrderedDict</code>s but I didn't find an answer to my question.</p>
<p>The output from (<code>sys.version</code>):</p>
<pre><code>In[22]: sys.version
Out[22]: '3.6.1 (default, Apr  4 2017, 09:40:21) \n[GCC 4.2.1 Compatible Apple LLVM 8.1.0 (clang-802.0.38)]'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's now obvious that the custom hook (<a href="https://docs.python.org/3/library/sys.html#sys.displayhook" rel="nofollow noreferrer"><code>sys.displayhook</code></a>) that IPython uses to display output is pretty printing things (<a href="http://ipython.readthedocs.io/en/stable/api/generated/IPython.lib.pretty.html" rel="nofollow noreferrer">using it's own pretty printer</a>). </p>
<p>By directly calling <code>displayhook</code> you can see how it ruins the insertion order:</p>
<pre><code>In [1]: from sys import displayhook
   ...: displayhook({'1': 0, '0': 1})
Out[1]: {'0': 1, '1': 0}
</code></pre>
<p>In addition, if you grabbed the dictionary <code>str</code> instead (sending a string to be displayed instead of a dict object) you'd get the correct and expected order:</p>
<pre><code>In [2]: d = dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])
   ...: d
Out[2]: {'guido': 4127, 'jack': 4098, 'sape': 4139}

In [3]: str(dict(t))
Out[3]: "{'sape': 4139, 'guido': 4127, 'jack': 4098}"
</code></pre>
<p>similarly by <code>print</code>ing it.</p>
<p>I'm not sure why IPython does this with <code>3.6</code>, it was quite confusing (edit: see relevant <a href="https://github.com/ipython/ipython/issues/10110" rel="nofollow noreferrer">issue on GitHub</a>). In your standard Python REPL, this behavior won't manifest since <code>sys.displayhook</code> isn't implemented to do any pretty printing.</p>
<hr/>
<p>The dict <code>d</code> you've created <em>does</em> maintain insertion order, that's why the <code>OrderedDict</code> is maintaining that same order.</p>
<p>The fact that it does is, of course, an implementation detail. Until that is changed (and it does appear that it will) you should stick to using <code>OrderedDict</code> to reliably maintain order across implementations.</p>
<hr/>
<p>By the way, if you want this disabled, you could start IPython with the <code>--no-pprint</code> option which disables its pretty printer:</p>
<pre><code>➜ ipython --no-banner --no-pprint 

In [1]: dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])
Out[1]: {'sape': 4139, 'guido': 4127, 'jack': 4098}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In 3.6, as an implementation detail, all <code>dict</code>s are ordered. You're being fooled by IPython: Before 3.6, the order of keys was arbitrary, so for user-friendliness, IPython's interactive output for <code>dict</code> and <code>set</code> (where normal Python would just print the <code>repr</code>) sorts the keys. That's why your <code>dict</code> appears to be in alphabetical order. It's possible IPython might eventually drop that behavior when running on 3.6+, since as you've noticed, it is quite confusing.</p>
<p>If you explicitly <code>print</code>, rather than relying on <code>ipython</code> to output the results of the previous expression for you, you'll bypass <code>ipython</code>'s REPL magic and see the "natural" order. Same goes for just about any other means of interacting with the <code>dict</code>, since iteration will proceed in the expected order.</p>
</div>
<div class="post-text" itemprop="text">
<p>As you probably know, dictionaries in Python are not ordered according to the language specification. They do have an inherent order but that order is arbitrary.</p>
<p>So when you pass a standard dictionary to the constructor of an <code>OrderedDict</code>, the new <code>OrderedDict</code> will be filled from the values of the original dictionary by iterating its values. That way, the inherent order of the dictionary will be used, and that will be what you will be seeing in the final <code>OrderedDict</code>.</p>
<p>Now, with Python 3.6, there was a change in the implementation of the default dictionary. As discussed and explained on <a href="https://stackoverflow.com/q/39980323/216074">this question</a>, standard dictionaries now preserve the insertion order. That’s why when you created the <code>OrderedDict</code> from the Python 3.6 dict, the original order is preserved as well.</p>
<p>Does this mean that <code>OrderedDict</code> becomes obsolete in Python 3.6+? No, as the order preserving of standard dictionaries is an <em>implementation detail</em>. Instead of the arbitrary order of previous implementations, the new dictionary just happens to have the “correct” order. But this is in no way guaranteed by the language specification, and may or may not be the case for other implementations. As such you cannot and should not rely on it.</p>
<p>Btw. note that Python 3.6 (the language, not just the implementation) does guarantee that the order of keyword arguments to <code>OrderedDict</code> is preserved. E.g. this preserves the order:</p>
<pre><code>&gt;&gt;&gt; OrderedDict(sape=4139, guido=4127, jack=4098)
OrderedDict([('sape', 4139), ('guido', 4127), ('jack', 4098)])
</code></pre>
</div>
<span class="comment-copy">See <a href="https://stackoverflow.com/questions/39980323/dictionaries-are-ordered-in-python-3-6" title="dictionaries are ordered in python 3 6">stackoverflow.com/questions/39980323/…</a></span>
<span class="comment-copy">There is something odd going on here. <code>dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])</code> shouldn't result in that output on Python <code>3.6</code>.</span>
<span class="comment-copy">@PM2Ring I get the same on <code>3.6.1</code>. Oddly enough, if I <code>print(dict([...]))</code> in a loop, I get the correct output. I'm under the impression I'm missing something but I can't see what. Maybe IPython is doing something weird because in the normal Python REPL, it's good.</span>
<span class="comment-copy">You're on IPython too, apparently. There's something wacky going on there. Try it out in the REPL and see if you could repro it.</span>
<span class="comment-copy">@JimFasarakisHilliard I guess this just emphasizes that an implementation detail should not be relied on. Maybe the question should be edited and re-opened</span>
<span class="comment-copy">Here's the relevant IPython bug report: <a href="https://github.com/ipython/ipython/issues/10110" rel="nofollow noreferrer">github.com/ipython/ipython/issues/10110</a>. Basically they argue that the fact that Python 3.6 maintains dictionary order is an implementation detail and should not be relied upon, which makes at least some amount of sense.</span>
<span class="comment-copy">Does the IPython interactive output sort <code>set</code> s as you state? <code>pprint</code> doesn't in Python 3 <a href="https://stackoverflow.com/questions/45016455/pprint-sorting-dicts-but-not-sets/" title="pprint sorting dicts but not sets">stackoverflow.com/questions/45016455/…</a></span>
<span class="comment-copy">@Chris_Rands: It does. <code>repr({'a', 'bbb', 'cde', 'ffe'})</code> on my current run (Linux x64 Py3.5.2, IPython 5.1.0) is <code>"{'cde', 'a', 'bbb', 'ffe'}"</code>, but the REPL output is <code>{'a', 'bbb', 'cde', 'ffe'}</code>.</span>
<span class="comment-copy">Ok thanks, Jim's answer suggested that the underlying cause of this behavior for <code>dict</code>s in IPython was <code>pprint</code>, so I just thought <code>set</code>s might work the same way, but apparently not</span>
<span class="comment-copy">@Chris_Rands Jim's answer isn't talking about the standard library's <code>pprint.pprint</code>, it's talking about ipython's <code>pprint</code> option.</span>
<span class="comment-copy">@Chris_Rands I know almost nothing about IPython, but I assume that they use <a href="https://ipython.org/ipython-doc/3/api/generated/IPython.lib.pretty.html" rel="nofollow noreferrer">their own pretty-printer</a> for pretty-printing in the REPL rather than the virtually unconfigurable <code>pprint.pprint</code>.</span>
<span class="comment-copy">"As such you cannot and should not rely on it." -- hence the well-known Python slogan, "Use the <i>freaking documentation</i>, Luke" ;-)</span>
