<div class="post-text" itemprop="text">
<p>I am trying to find the path to the MATLAB executable using Python when it is not in PATH. I am using subprocess.Popen to execute locate and grepping the result, however this creates a Resource Unavailable error:</p>
<pre><code>locate = subprocess.Popen(['locate', 'matlab'], stdout=subprocess.PIPE)
grep = subprocess.Popen(['grep', '/bin/matlab$'], stdin=locate.stdout, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
result, err = grep.communicate()
MATLAB_PATH = result.decode('UTF-8').split()
</code></pre>
<p>The <em>result</em> variable is empty and <em>err</em> variable is :</p>
<pre><code>b'grep: (standard input): Resource temporarily unavailable\n'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have tried your code on linux with python 3.5.2 and 3.6.1 and it does work:</p>
<pre><code>locate = subprocess.Popen(['locate', 'find'], stdout=subprocess.PIPE)
grep = subprocess.Popen(['grep', '/bin/find$'], stdin=locate.stdout, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
grep.communicate()
(b'/usr/bin/find\n', b'')
</code></pre>
<p>For the records: <code>locate find</code> gives 1619 lines.
For completeness I have also tried <code>locate fdafad</code> (gibberish) and it also works.</p>
<p>It does also work when the code is in a script.</p>
<p><strong>edit:</strong></p>
<p>Try to use communicate to interact between to two processess:</p>
<pre><code>locate = subprocess.Popen(['locate', 'find'], stdout=subprocess.PIPE)
stdout, stderr = locate.communicate()
grep = subprocess.Popen(['grep', '/bin/find$'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
print(grep.communicate(input=stdout))
</code></pre>
<hr/>
<p><strong>NOTE</strong>: the second part of the answer has been written <em>before</em> the asker updated the question with information about the <code>PATH</code></p>
<p>However there is a much better ways to find executables using python:</p>
<pre><code>from distutils.spawn import find_executable
find_executable('find')

'/usr/bin/find'
</code></pre>
<p>If you insist in using shell functions, why don't use something like <code>which</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Adding just a little bit more information on why this error occurred. </p>
<p>This looks to be a problem with <code>eventlet</code> using "green" threads and non-blocking IO and locate <strong>not</strong> generating output fast enough. That is, eventlet assumes that the stdout is to be used by python. Eventlet uses non-blocking IO to assist in cooperative threading. This means the file descriptor behind <code>locate.stdout</code> that you pass to <code>grep</code> has already been set to non-blocking. If <code>grep</code> tries to read from stdin when it is empty then you will get that error.</p>
<p>An easy solution would be to do both commands in a single shell (so Python doesn't get to mess with the pipe between the two sub-processes).</p>
<p>eg.</p>
<pre><code>result = subprocess.check_output('locate matlab | grep /bin/matlab$', shell=True).strip()
</code></pre>
</div>
<span class="comment-copy">My original code works for me too in the interpreter but not when I run it in a script.   I am using Python3.6.1 and I can't use which  or find_executable because I do not know if the executable will be in the path of the machine/user running the code.</span>
<span class="comment-copy">I see. Thank you for updating the question. I have tested again with python 3.6.1 and it does work there too.</span>
<span class="comment-copy">Thank you for testing it. Do you have any idea why I might be getting this error? I am running the file using pytest, if that is relevant. There is also an exception that is produced: Exception ignored in: &lt;bound method Popen.__del__ of &lt;eventlet.green.subprocess.Popen object at 0x104093cf8&gt;&gt; Traceback (most recent call last):   File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/subprocess.py", line 760, in <b>del</b> AttributeError: 'NoneType' object has no attribute 'warn'</span>
<span class="comment-copy">I did search your error on google and gave a quick read to the results. I think that it can be due to locate generating too much output. Some of the older subprocess interface had <a href="https://docs.python.org/3/library/subprocess.html#subprocess.call" rel="nofollow noreferrer">warnings about this</a></span>
<span class="comment-copy">@Haris: I have tried to add a communication between the two Popen. If the problem was due stdin/stdout lock this might work. The modified version also works on my computer, however I have no way to test if it fix your issue.</span>
