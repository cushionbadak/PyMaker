<div class="post-text" itemprop="text">
<p>Looking to find a list of keywords inside a <code>for</code> loop, I'm getting this error:</p>
<blockquote>
<p>TypeError: unhashable type: 'list'</p>
</blockquote>
<p>An excerpt of my code is as follows:</p>
<pre><code>key = ['lorem', 'ipsum', 'dolor']

for item in stringloop:
    matcher = re.compile(key, re.IGNORECASE)
    if filter(matcher.match, item):
       # Some code
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Starting with this:</p>
<pre><code>stringloop = ['lorem 123', 'testfoo', 'dolor 456']
key = ['lorem', 'ipsum', 'dolor']
</code></pre>
<p>First, you need to match <em>any one key</em>. Use the <code>|</code> joining operator. <code>x|y|z</code> looks for <code>x</code> or <code>y</code> or <code>z</code>. Create the object outside the loop:</p>
<pre><code>matcher = re.compile('|'.join(map(re.escape, key)), re.I) # escaping possible metacharacters
</code></pre>
<p>Here, I use <a href="https://docs.python.org/3/library/re.html#re.escape" rel="nofollow noreferrer"><code>re.escape</code></a> to escape any possible regex metacharacters. <em>May not work</em> if your existing pattern has any meta characters. Now loop through <code>stringloop</code>, calling <code>matcher.match</code> on each item. Don't use <code>filter</code>, call it directly:</p>
<pre><code>for item in stringloop:
    if matcher.match(item):
        print(item)
</code></pre>
<p>This gives:</p>
<pre><code>lorem 123
dolor 456
</code></pre>
<hr/>
<p>For complicated patterns with their own meta characters, you should probably compile each pattern separately in a pattern list:</p>
<pre><code>matchers = [re.compile(pat, re.I) for pat in key]
</code></pre>
<p>You'll then modify your loop slightly:</p>
<pre><code>for item in stringloop:
    for m in matchers:    
        if m.match(item):
            print(item)
            break
</code></pre>
<p>This also works, giving:</p>
<pre><code>lorem 123
dolor 456
</code></pre>
<p>But it is slower, because of the nested loop.</p>
<hr/>
<p>As a closing comment, if your keys are simple strings, I would just go with <code>str.startswith</code>, because that also does the same thing, checking if a string begins with a certain sub string:</p>
<pre><code>for item in stringloop:
    if item.lower().startswith(tuple(key)):
        print(item)
</code></pre>
<p>Magically, this also gives:</p>
<pre><code>lorem 123
dolor 456
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think what you're trying to do is the following:</p>
<pre><code>key = ['lorem', 'ipsum', 'dolor']
finallist = []

for item in stringloop:
    for regex in key:
        if re.match(regex, item):
            finallist.append(item)
            # Some code
</code></pre>
<p>This uses each element of <code>key</code> as the regex to match against each string element in <code>stringloop</code>. As COLDSPEED noted, compiling in a loop for a single use defeats the purpose of compiling it at all, so just use them directly in match instead. Then, instead of <code>filter</code>, just build a finalized list in the loop itself.</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/2/library/re.html#re.compile" rel="nofollow noreferrer"><code>re.compile</code></a> needs a valid regular expression. A list isn't one.</span>
<span class="comment-copy">It's not a list the loop type is &lt;class 'str'&gt;</span>
<span class="comment-copy">What is stringloop? Also, key is a list, not a string.</span>
<span class="comment-copy">Unless you turned <code>key</code> into something else outside of this snippet, it's most definitely a list</span>
<span class="comment-copy">It's a loop that fetch headlines &lt;class 'str'&gt;</span>
<span class="comment-copy">@NullUserException Good catch. Fixed.</span>
<span class="comment-copy">I personally would not use regex for this, but this works</span>
<span class="comment-copy">As a warning, I'm not 100% sure this would affect you, but there has been reports of other regex engines failing strangely with long sets of "or" operators. Not sure how many the OP may eventually have in his code, but you can see the SO article <a href="https://stackoverflow.com/questions/44778723/performance-issue-with-grep-f">here</a> and another one <a href="https://github.com/BurntSushi/ripgrep/issues/497#issuecomment-311719249" rel="nofollow noreferrer">here</a></span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ Thanks but your code ain't functional <a href="https://codeshare.io/aV3dDb" rel="nofollow noreferrer">codeshare.io/aV3dDb</a></span>
<span class="comment-copy">@Blacksun Simple. <code>matcher.match</code> looks only at the beginning. You need <code>matcher.search</code> for your code.</span>
