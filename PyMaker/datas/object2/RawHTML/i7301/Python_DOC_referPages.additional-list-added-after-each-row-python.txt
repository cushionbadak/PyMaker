<div class="post-text" itemprop="text">
<p>There is a discrepancy in execution of code in repl.it (which works fine, presumably because the bugs in Python have been fixed/updated), and IDLE, in which the code does not work correctly. </p>
<p>I have consulted the documentation, and previous stack overflow answers to add the "newline", but the problem persists. </p>
<p><strong>You'll notice the repl it</strong>, here: (works perfectly)</p>
<p><a href="https://repl.it/Jbv6/0" rel="nofollow noreferrer">https://repl.it/Jbv6/0</a></p>
<p><strong>However, in IDLE</strong> on pasting the file contents (without a line break) it works fine </p>
<pre><code>001,Joe,Bloggs,Test1:99,Test2:100,Test3:1002,Ash,Smith,Test1:20,Test2:20,Test3:100003003,Jonathan,Peter,Test1:99,Test2:33,Test3:44
</code></pre>
<p>but on pasting the file contents into the txt file as it should be (with each record on a new line) as so:</p>
<pre><code>001,Joe,Bloggs,Test1:99,Test2:100,Test3:1
002,Ash,Smith,Test1:20,Test2:20,Test3:100003
003,Jonathan,Peter,Test1:99,Test2:33,Test3:44
</code></pre>
<p><strong>the error on output</strong> is as follows (produces a new list after each line):</p>
<pre><code>[['001', 'Joe', 'Bloggs', 'Test1:99', 'Test2:100', 'Test3:1'], [], ['002', 'Ash', 'Smith', 'Test1:20', 'Test2:20', 'Test3:100'], ['003'], ['', 'Jonathan', 'Peter', 'Test1:99', 'Test2:33', 'Test3:44']]
</code></pre>
<p>The code is here:</p>
<pre><code>import csv

    #==========1. Open the File, Read it into a list, and Print Contents 
    print("1==============Open File, Read into List, Print Contents")
    #open the file, read it into a list (each line is a list within a list, and the end of line spaces are stripped as well as the individual elements split at the comma)
    with open("studentinfo.txt","rb",newline="") as f:
      studentlist=list(csv.reader(f))

      print(studentlist)
</code></pre>
<p>I have tried, as the documentation, and previous answers on stackoverflow suggests, <strong>adding this: (the newline)</strong></p>
<pre><code>with open("studentinfo.txt","r",newline="") as f:
</code></pre>
<p><strong>Unfortunately the error persists.</strong> </p>
<p>Any suggestions/solutions with an explanation would be appreciated.</p>
<p><strong>Update</strong>, I also tried this:</p>
<pre><code>with open("studentinfo.txt",newline="") as f:
  reader=csv.reader(f)
  for row in reader:
    print(row)
</code></pre>
<p><strong>again, it works perfectly in replit</strong></p>
<p><a href="https://repl.it/Jbv6/2" rel="nofollow noreferrer">https://repl.it/Jbv6/2</a></p>
<p><strong>but this error in IDLE</strong></p>
<pre><code>1==============Open File, Read into List, Print Contents
['001', 'Joe', 'Bloggs', 'Test1:99', 'Test2:100', 'Test3:1']
[]
['002', 'Ash', 'Smith', 'Test1:20', 'Test2:20', 'Test3:100']
['003']
['', 'Jonathan', 'Peter', 'Test1:99', 'Test2:33', 'Test3:44']
&gt;&gt;&gt; 
</code></pre>
<p>This is a huge issue for students who need to be able to have consistency across both repl.it and IDLE which is what they are working on between their school and home environments.</p>
<p>Any answer that shows code that allows it to work on both is what I'm after.</p>
</div>
<div class="post-text" itemprop="text">
<p>The answer that is easiest is the following:</p>
<pre><code>import csv

# ==========1. Open the File, Read it into a list, and Print Contents 
print("1==============Open File, Read into List, Print Contents")
# open the file, read it into a list (each line is a list within a list,
# and the end of line spaces are stripped as well as the individual
# elements split at the comma)
studentlist = []
with open("studentinfo.txt", "r", newline="") as f:
    for row in csv.reader(f):
        if len(row) &gt; 0:
            studentlist.append(row)
print(studentlist)
</code></pre>
<p>But your original code should work - I've run it, but on linux rather than windows. If I could ask you to do more work:</p>
<pre><code>with open("studentinfo.txt", "r", newline="") as f:
    ascii_ch = list(map(ord,f.read()))
    eol_delims = list(map(str,(ch if ch &lt; 32 else '' for ch in ascii_ch)))
    print(",".join(eol_delims))
</code></pre>
<p>This will produce a list of <code>,</code>s but interspersed with either <code>13,10</code> or <code>10</code>, but possibly even something like <code>10,13,10</code>. These are the <code>\r\n</code> and <code>\n</code> that were talked about, but I'm wondering if you've managed to get that third option somehow?
If so, I think you'll need to rewrite that text file to get normal line endings.</p>
<p>-- (update in response to comment)<br/>
The only advice I have regarding the <code>10,13,10</code> is to only edit the text file in one application (say, notepad), and never edit it in another.</p>
<p>The actual problem comes from editing the file in two applications, which each have a different interpretation of what the line endings should be (windows applications should be <code>\r\n</code>, "repl.it" is <code>\n</code>. I've come across it before, but never worked out the sequence of actions required.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try use codecs and explicitly specify the encoding of file to UTF-8.</p>
<pre><code>import csv
import codecs

print("1==============Open File, Read into List, Print Contents")
with codecs.open("studentinfo.txt",encoding='utf-8') as f:
  studentlist=list(csv.reader(f))

  print(studentlist)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using a filter may help:</p>
<pre><code>with open('studentinfo.txt', 'rU') as f:
    filtered = (line.replace('\r', '') for line in f)
    for row in csv.reader(filtered):
        print(row)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Pasting strings into a text editor and saving the file will not produce byte-identical files on different platforms. (Even different editors on the same platform are inconsistent!)</p>
<p>However, the CSV format accepted by the <code>csv</code> module is specified in terms of a byte-exact representation. The behavior can be customized by using a dialect (either a built-in dialect or implementing a new one) -- see the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">Python documentation</a> for details. The default dialect is <code>excel</code> which requires Windows-style line endings (CR/LF). If you save the file in a different format it will not be parsed correctly.</p>
</div>
<span class="comment-copy">someone? anyone?</span>
<span class="comment-copy">You need to show the actual bytes of the "as it should be" file. I believe the CSV format parsed by the <code>csv</code> module requires CRLF line endings, regardless of platform.</span>
<span class="comment-copy">Can you please post a solution - I have no idea what that means! Thanks</span>
<span class="comment-copy">@pythoncarrot: Is that comment directed at me? My "solution" is that the code in the question is actually correct. Rather, it's the bytes in the file that are wrong. (Or at least wrong for the <code>excel</code> dialect, which is the default for the <code>csv</code> module.)</span>
<span class="comment-copy">Thanks - could you explain further. If it is the bytes in the file that are wrong, what does that mean and how can it be corrected?</span>
<span class="comment-copy">Thanks so much Glenn! The first, and easiest, suggestion (I thought) worked...but actually it produces a 7 in between the lists. More mystery! [['001', 'Joe', 'Bloggs', 'Test1:99', 'Test2:100', 'Test3:1'], ['7'], ['002', 'Ash', 'Smith', 'Test1:20', 'Test2:20', 'Test3:100']]</span>
<span class="comment-copy">Your second code produces this: ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,10,13,10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, &gt;&gt;&gt;</span>
<span class="comment-copy">I can see the 7 is basically the last character of the first line (that it adds to it's own list between the other lines. So the text file contains: 001,Joe,Bloggs,Test1:99,Test2:100,Test3:17 002,Ash,Smith,Test1:20,Test2:20,Test3:100  but for some reason it is formatted (invisibly) as                      001,Joe,Bloggs,Test1:99,Test2:100,Test3:1 7 002,Ash,Smith,Test1:20,Test2:20,Test3:100</span>
<span class="comment-copy">Completely bizarre. I just re-wrote the text file with the same input: 001,Joe,Bloggs,Test1:99,Test2:100,Test3:9 002,Ash,Smith,Test1:20,Test2:20,Test3:100    and the first original code worked fine! I will accept your answer, as it provides the most insight, thank you. Wonder if you could shed any light on how to format textfiles and ensure that they do not contain erroneous extra lines that are invisible</span>
<span class="comment-copy">Tried this - thanks - but unfortunately produces the same result</span>
<span class="comment-copy">This is helpful to know (filters)...but still does not work</span>
<span class="comment-copy">This is wrong: you shouldn't need to instantiate a new <code>csv.reader</code> object for each line of the file!</span>
<span class="comment-copy">Someone has suggested it is the "bytes in the file that are wrong". What does this mean exactly, and more to the point, how can it be fixed!</span>
<span class="comment-copy">I do not wish to downvote this...but without pasting a simple solution to the problem and the code that works, this is not at all helpful</span>
<span class="comment-copy">I'd agree with the OP - see Python documentation for details isn't helpful! You may be right, but can you post a solution that can be used?</span>
<span class="comment-copy">@MissComputing: I'm not going to write your code for you. I'm answering your question. I already feel like I've bent over backward here to help you. Remember that I'm helping you out of the kindness of my heart, on my own time.</span>
<span class="comment-copy">As mentioned, I appreciate the gesture, but your solution/suggestion is unverifiable. Thanks though! I'll await any other answers that come through.</span>
<span class="comment-copy">I'm afraid your solution does not provide knowledge. Refer to other answers and their clarity/verifiability. Others would agree that the question is specific, shows research, and does not simply ask "write my code".</span>
