<div class="post-text" itemprop="text">
<p>I'm trying to get something that seems simple to work in python logging.  During debug logging, I'd like to log the entire stack of module-&gt;function, but I'm having trouble getting the imported classes to appropriately inherit that information.</p>
<p>Example of what I'm trying to get:</p>
<pre><code>module.imported_module.function - message
module.imported_module2.function - message
module.imported_module3.imported_module.function - message
</code></pre>
<p>I've been able to use logging.getLogger(<strong>file</strong>) to populate the base module name properly, but when I try to think of ways to pass that to submodules appropriately, I get myself into trouble, because logging.getLogger() requires the parent name in the logging.getLogger() call like:</p>
<p><code>logging.getLogger('module.submodule')</code></p>
<p>I feel like there's got to be a simple way to pass this information to imported modules and classes, but I can't seem to figure out a way that doesn't involve making a tempfile for the logging module to reference as I'm running it, and that's not ideal.</p>
<p>Any help appreciated - even if it's just "Shut up and look harder" - because I can't seem to find the right keywords to get something similar.</p>
<p>Here's my code for module.py:</p>
<pre><code>#!/usr/bin/python

import logging
import aux
import sys
from autologging import logged

logging.basicConfig(
    level=logging.DEBUG, stream=sys.stdout,
    format="%(levelname)s:%(name)s:%(funcName)s:%(message)s")
logger = logging.getLogger(__name__)


def print_names():
    logger.info('test info')
    logger.debug('test debug')
    logger.error('test error')
    aux.printme()


if __name__ == '__main__':
    print_names()
</code></pre>
<p>and for aux.py:</p>
<pre><code>#!/usr/bin/python
import logging
from autologging import logged


logger = logging.getLogger(__name__)
def printme():
    logger.info('test info')
    logger.debug('test debug')
    logger.error('test error')
</code></pre>
<p>Output I get currently:</p>
<pre><code>bub@bubdev:~/tools/$ ./module.py 
INFO:__main__:print_names:test info
DEBUG:__main__:print_names:test debug
ERROR:__main__:print_names:test error
INFO:aux:printme:test info
DEBUG:aux:printme:test debug
ERROR:aux:printme:test error
</code></pre>
<p>What I'm trying to get:</p>
<pre><code>bub@bubdev:~/tools/$ ./module.py 
INFO:__main__:print_names:test info
DEBUG:__main__:print_names:test debug
ERROR:__main__:print_names:test error
INFO:__main__:print_names:aux:printme:test info
DEBUG:__main__:print_names:aux:printme:test debug
ERROR:__main__:print_names:aux:printme:test error
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why don't you just use <code>logging.getLogger(__name__)</code> as described in <a href="https://docs.python.org/3/library/logging.html#logger-objects" rel="nofollow noreferrer">the documentation</a>?</p>
</div>
<span class="comment-copy">This only works for one level, but not for the modules imported by it.  I'll clarify what I'm trying to do in the question.</span>
<span class="comment-copy">I used autologging to make it easier, but I'm still having the same problem where it doesn't show information about the module that imported another module (Like in aux.py, it only shows aux.py, and not the module that called it as well).  Am I just misunderstanding the logging.getLogger(<b>name</b>) usage?</span>
<span class="comment-copy">After using logging a lot more, I understand why what I was doing was stupid as hell.  Thanks for answering anyway. :)</span>
