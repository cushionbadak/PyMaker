<div class="post-text" itemprop="text">
<p>I have two classes <code>Foo</code> and <code>Bar</code>:</p>
<pre><code>class Foo(str):
    def __add__(self, other):
        return 'Foo.__add__ called'


class Bar(str):
    def __radd__(self, other):
        return 'Bar.__radd__ called'
</code></pre>
<p>As you can see, I have <code>Foo</code> implementing <code>__add__</code> and <code>Bar</code> implementing <code>__radd__</code>. </p>
<p>I can create objects of these classes and add them, because the magic methods are defined.</p>
<pre><code>f = Foo('foo')
b = Bar('bar')
</code></pre>
<p>However, adding them produces this:</p>
<pre><code>In [390]: f + b
Out[390]: 'Foo.__add__ called'
</code></pre>
<p>How can I set it so that <code>Bar.__radd__</code> method is called in preference to <code>Foo.__add__</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>There are two ways you can do this.</p>
<ol>
<li>Add an explicit check in <code>Foo</code> related to <code>Bar</code>.</li>
</ol>
<p></p>
<pre><code>class Foo(str):
    def __add__(self, other):
        if isinstance(other, Bar):
            return NotImplemented
        return 'Foo.__add__ called'


class Bar(str):
    def __radd__(self, other):
        return 'Bar.__radd__ called'
</code></pre>
<ol start="2">
<li>Make <code>Bar</code> a subclass of <code>Foo</code>.</li>
</ol>
<p><a href="https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types" rel="nofollow noreferrer">From docs:</a></p>
<blockquote>
<p><strong>Note:</strong> If the right operand’s type is a subclass of the left operand’s
  type and that subclass provides the reflected method for the
  operation, this method will be called before the left operand’s
  non-reflected method. This behavior allows subclasses to override
  their ancestors’ operations.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Quote from the <a href="https://docs.python.org/3/reference/datamodel.html#object.__radd__" rel="nofollow noreferrer">docs</a> about the <code>__rstuff__</code> methods :</p>
<blockquote>
<p>These functions are only called <em>if the left operand does not support the corresponding operation</em> and the operands are of different types. For instance, to evaluate the expression <code>x - y</code>, where y is an instance of a class that has an <code>__rsub__()</code> method, <code>y.__rsub__(x)</code> is called if <code>x.__sub__(y)</code> returns <code>NotImplemented</code>.</p>
</blockquote>
<p>So, in your case, <code>Foo</code>, the left operand, does have the <code>__add__</code> method, thus, it's called immediately. To avoid that, you can <code>return NotImplemented</code> from <code>Foo.__add__</code> if the other argument is of type <code>Bar</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>As explain in the Python reference documentation in <a href="https://docs.python.org/3/reference/datamodel.html#object.__radd__" rel="nofollow noreferrer">Datamodel</a> section, that the order use by Python to resolve this case:</p>
<ol>
<li>check for <code>__add__</code> on the first operand</li>
<li>and only if not implemented check for <code>__radd__</code> on the second one.</li>
</ol>
<p>A possibility to resolve your problem (not really beautiful / pythonic) is to check in your <code>__add__</code> implementation if <code>other</code> implement the <code>__radd__</code> method.</p>
<p>For example with:</p>
<pre><code>class Foo(str):
    def __add__(self, other):
        try:
            return other.__radd__(self)
        except NotImplemented:
            pass
        # __radd__ not implement so return __add__ behavior 
        return 'Foo.__add__ called'
</code></pre>
<p>With result:</p>
<pre><code>In [5]: f + b
Out[5]: 'Bar.__radd__ called'
</code></pre>
</div>
<span class="comment-copy">Make <code>Bar</code> a subclass of <code>Foo</code>.</span>
<span class="comment-copy">@AshwiniChaudhary Hey, what do you know. That worked. Nice one. Turn it into an answer? :) (also a little explanation on how that worked would help...)</span>
