<div class="post-text" itemprop="text">
<p>In a list like the one below:</p>
<pre><code>biglist = ['X', '1498393178', '1|Y', '15496686585007',
           '-82', '-80', '-80', '3', '3', '2', '|Y', '145292534176372',
           '-87', '-85', '-85', '3', '3', '2', '|Y', '11098646289856',
           '-91', '-88', '-89', '3', '3', '2', '|Y', '35521515162112',
           '-82', '-74', '-79', '3', '3', '2', '|Z',
           '0.0', '0.0', '0', '0', '0', '0', '0', '4', '0', '154']
</code></pre>
<p>There could be some numerical elements preceded by a character. I would like to break this into sub-lists like below:</p>
<pre><code>smallerlist = [
 ['X', '1498393', '1'],
 ['Y', '1549668', '-82', '-80', '-80', '3', '3', '2', ''],
 ['Y', '1452925', '-87', '-85', '-85', '3', '3', '2', ''],
 ['Y', '3552151', '-82', '-74', '-79', '3', '3', '2', ''],
 ['Z', '0.0', '0.0', '0', '0', '0', '0', '0', '4', '0', '154']
]
</code></pre>
<p>As you can tell, depending upon the character, the lists could look similar. Otherwise they could have a different number of elements, or dissimilar elements altogether. The main separator is the <code>"|"</code> character. I have tried to run the following code to split up the list, but all I get is the same, larger, list within a list. I.e., list of <code>len(list) == 1</code>.</p>
<pre><code>import itertools

delim = '|'
smallerlist = [list(y) for x, y in itertools.groupby(biglist, lambda z: z == delim)
                if not x]
</code></pre>
<p>Any ideas how to split it up successfully?</p>
</div>
<div class="post-text" itemprop="text">
<p>First, a quick <strong>oneliner</strong>, which is not an optimal solution in terms of space requirements, but it's short and sweet:</p>
<pre><code>&gt;&gt;&gt; smallerlist = [l.split(',') for l in ','.join(biglist).split('|')]
&gt;&gt;&gt; smallerlist
[['X', '1498393178', '1'],
 ['Y', '15496686585007', '-82', '-80', '-80', '3', '3', '2', ''],
 ['Y', '145292534176372', '-87', '-85', '-85', '3', '3', '2', ''],
 ['Y', '11098646289856', '-91', '-88', '-89', '3', '3', '2', ''],
 ['Y', '35521515162112', '-82', '-74', '-79', '3', '3', '2', ''],
 ['Z', '0.0', '0.0', '0', '0', '0', '0', '0', '4', '0', '154']]
</code></pre>
<p>Here we join all elements of the big list by a unique non-appearing separator, for example <code>,</code>, then split by <code>|</code>, and then split again each list into a sublist of the original elements.</p>
<p>But if you're looking for a bit more <strong>efficient solution</strong>, you can do it with <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> that will operate on an intermediate list, generated on fly with the <code>breakby()</code> generator, in which elements without <code>|</code> separator are returned as is, and those with separator are split into 3 elements: first part, a list-delimiter (e.g. <code>None</code>), and the second part.</p>
<pre><code>from itertools import groupby

def breakby(biglist, sep, delim=None):
    for item in biglist:
        p = item.split(sep)
        yield p[0]
        if len(p) &gt; 1:
            yield delim
            yield p[1]

smallerlist = [list(g) for k,g in groupby(breakby(biglist, '|', None),
                                          lambda x: x is not None) if k]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It would be easier to join the elements of the list into a single string, split the string on the <code>'|'</code> character, then split each of those elements on the what you used to join the list.  Probably a comma <code>,</code></p>
<pre><code>bigstr = ','.join(biglist)

[line.split(',') for line in bigstr.split('|')]

# returns
[['X', '1498393178', '1'],
 ['Y', '15496686585007', '-82', '-80', '-80', '3', '3', '2', ''],
 ['Y', '145292534176372', '-87', '-85', '-85', '3', '3', '2', ''],
 ['Y', '11098646289856', '-91', '-88', '-89', '3', '3', '2', ''],
 ['Y', '35521515162112', '-82', '-74', '-79', '3', '3', '2', ''],
 ['Z', '0.0', '0.0', '0', '0', '0', '0', '0', '4', '0', '154']]
</code></pre>
<p>If the list is very long, you can also iterate over the items in the list, creating a new sublists on when you encounter a pipe character <code>|</code></p>
<pre><code>new_biglist = []
sub_list = []
for item in biglist:
    if '|' in item:
        end, start = item.split('|')
        sub_list.append(end)
        new_biglist.append(sub_list)
        sub_list = [start]
    else:
        sub_list.append(item)

new_biglist
# return:
[['X', '1498393178', '1'],
 ['Y', '15496686585007', '-82', '-80', '-80', '3', '3', '2', ''],
 ['Y', '145292534176372', '-87', '-85', '-85', '3', '3', '2', ''],
 ['Y', '11098646289856', '-91', '-88', '-89', '3', '3', '2', ''],
 ['Y', '35521515162112', '-82', '-74', '-79', '3', '3', '2', '']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need regex or anything of the sort - a simple loop and <code>str.split()</code> should be more than enough, at least if you're after an actual efficient solution:</p>
<pre><code>biglist = ['X', '1498393178', '1|Y', '15496686585007', '-82', '-80', '-80', '3', '3', '2',
           '|Y', '145292534176372', '-87', '-85', '-85', '3', '3', '2', '|Y',
           '11098646289856', '-91', '-88', '-89', '3', '3', '2', '|Y', '35521515162112',
           '-82', '-74', '-79', '3', '3', '2', '|Z', '0.0', '0.0', '0', '0', '0', '0',
           '0', '4', '0', '154']

delimiter = "|"
smaller_list = [[]]
for x in biglist:
    if delimiter in x:
        a, b = x.split(delimiter)
        if a:  # remove the check if you also want the empty elements
            smaller_list[-1].append(a)
        smaller_list.append([])
        if b:  # remove the check if you also want the empty elements
            smaller_list[-1].append(b)
    else:
        smaller_list[-1].append(x)

print(smaller_list)
# [['X', '1498393178', '1'],
#  ['Y', '15496686585007', '-82', '-80', '-80', '3', '3', '2'],
#  ['Y', '145292534176372', '-87', '-85', '-85', '3', '3', '2'],
#  ['Y', '11098646289856', '-91', '-88', '-89', '3', '3', '2'],
#  ['Y', '35521515162112', '-82', '-74', '-79', '3', '3', '2'],
#  ['Z', '0.0', '0.0', '0', '0', '0', '0', '0', '4', '0', '154']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a solution to a similar problem I didn't find an answer to.  How to split a list into sublists delimited by a member, e.g. character:</p>
<pre><code>l = ['r', 'g', 'b', ':',
     'D', 'E', 'A', 'D', '/',
     'B', 'E', 'E', 'F', '/',
     'C', 'A', 'F', 'E']

def split_list(thelist, delimiters):
    ''' Split a list into sub lists, depending on a delimiter.

        delimiters - item or tuple of item
    '''
    results = []
    sublist = []

    for item in thelist:
        if item in delimiters:
            results.append(sublist) # old one
            sublist = []            # new one
        else:
            sublist.append(item)

    if sublist:  # last bit
        results.append(sublist)

    return results


print(
    split_list(l, (':', '/'))
)
# =&gt; [['r', 'g', 'b'], ['D', 'E', 'A', 'D'], 
#     ['B', 'E', 'E', 'F'], 
#     ['C', 'A', 'F', 'E']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>delim = '|'
newlist = oldlist.split(delim)
</code></pre>
</div>
<span class="comment-copy">This is a very good solution as well, I tried and it works. For your edited part, it does raise a <code>NameError</code> for <code>start</code></span>
