<div class="post-text" itemprop="text">
<p>I'd like to have some python code running and communicating with a nodejs express server. So far, I can get my nodejs server to call python functions via one of two mechanisms, either to spawn a python task or to have it talk to a zerorpc python server.</p>
<p>For the first, a la <a href="http://www.sohamkamani.com/blog/2015/08/21/python-nodejs-comm/" rel="noreferrer">http://www.sohamkamani.com/blog/2015/08/21/python-nodejs-comm/</a>, this works:</p>
<pre><code>var express = require( "express" );
var http = require( "http" );
var app = express();
var server = http.createServer( app ).listen( 3000 );
var io = require( "socket.io" )( server );

app.use( express.static( "./public" ) );

io.on( "connection", function( socket ) {

    // Repeat interval is in milliseconds
    setInterval( function() {

        var spawn = require( 'child_process' ).spawn,
        py    = spawn( 'python', [ 'mytime.py' ] ),
        message = '';

        py.stdout.on( 'data', function( data ) {
            message += data.toString();
        });

        py.stdout.on( 'end', function() {
            socket.emit( "message", message );
        });

    }, 50 );
});
</code></pre>
<p>Where mytime.py is</p>
<pre><code>from datetime import datetime
import sys

def main():
    now = datetime.now()
    sys.stdout.write( now.strftime( "%-d %b %Y %H:%M:%S.%f" ) )
</code></pre>
<p>And with zerorpc <a href="http://www.zerorpc.io/" rel="noreferrer">http://www.zerorpc.io/</a>, if this python code is running:</p>
<pre><code>from datetime import datetime
import sys
import zerorpc

class MyTime( object ):
    def gettime( self ):
        now = datetime.now()
        return now.strftime( "%-d %b %Y %H:%M:%S.%f" )

s = zerorpc.Server( MyTime() )
s.bind( "tcp://0.0.0.0:4242" )
s.run()
</code></pre>
<p>This nodejs code works:</p>
<pre><code>var express = require( "express" );
var http = require( "http" );
var app = express();
var server = http.createServer( app ).listen( 3000 );
var io = require( "socket.io" )( server );
var zerorpc = require( "zerorpc" );
var client = new zerorpc.Client();
client.connect( "tcp://127.0.0.1:4242" );

app.use( express.static( "./public" ) );

io.on( "connection", function( socket ) {

    // Repeat interval is in milliseconds
    setInterval( function() {

        client.invoke( "gettime", function( error, res, more ) {
            socket.emit( "message", res.toString( 'utf8' ) );
        } );

    }, 50 );
});
</code></pre>
<p>But what I'd like to be able to do is instead of just having python functions called, I'd like a separate python process running and sending messages to the nodejs server which listens for them and then handles them. I've experimented with middleware socketio-wildcard, but if I try to set up a python server with zerorpc on the same port as the nodejs express server, it gives a <em>zmq.error.ZMQError: Address already in use</em> error.</p>
<p>I know that I'm not thinking about this right--I know that I'm missing some logic around interprocess communication due to my naïveté here--so if there is a better way to do message sending from a python process with a nodejs server listening, I'm all ears.</p>
<p>Any ideas?</p>
<p>Many thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>For those trying to figure this out, here's a solution thanks to <a href="https://stackoverflow.com/users/1268044/zeke-alexandre-nierenberg">Zeke Alexandre Nierenberg</a> </p>
<p>For the node.js server code:</p>
<pre><code>var express = require( "express" );
var app = express();
var http = require( "http" );
app.use( express.static( "./public" ) ); // where the web page code goes
var http_server = http.createServer( app ).listen( 3000 );
var http_io = require( "socket.io" )( http_server );

http_io.on( "connection", function( httpsocket ) {
    httpsocket.on( 'python-message', function( fromPython ) {
        httpsocket.broadcast.emit( 'message', fromPython );
    });
});
</code></pre>
<p>and the python code that sends it messages:</p>
<pre><code>from datetime import datetime
from socketIO_client import SocketIO, LoggingNamespace
import sys

while True:
    with SocketIO( 'localhost', 3000, LoggingNamespace ) as socketIO:
        now = datetime.now()
        socketIO.emit( 'python-message', now.strftime( "%-d %b %Y %H:%M:%S.%f" ) )
        socketIO.wait( seconds=1 )
</code></pre>
<p>Voilà!</p>
</div>
<div class="post-text" itemprop="text">
<p>I had some problems with socketIO version...</p>
<p>so, this is my Solution: </p>
<p>NodeJS:</p>
<pre><code>   var app = require("express")();
   var http = require('http').Server(app);
   var bodyParser = require('body-parser');

    app.use(bodyParser.json())
    app.post('/',function(req,res){
            var msg=req.body.msg;
            console.log("python: " + msg);
    });

     http.listen(3000, function(){
     console.log('listening...');
     });
</code></pre>
<p>on Python: </p>
<pre><code>  import requests
  import json

  url = "http://localhost:3000"
  data = {'msg': 'Hi!!!'}
  headers = {'Content-type': 'application/json', 'Accept': 'text/plain'}
  r = requests.post(url, data=json.dumps(data), headers=headers)
</code></pre>
</div>
<span class="comment-copy">Why not build something similar in nature to how you built your node app? You ultimately have set up your node app to have some "endpoint" a client can hit. So, do the same in Python. Check out something like <a href="http://flask.pocoo.org/" rel="nofollow noreferrer">Flask</a>. It's very well documented, and guides you well to bring up the application as a listening service.</span>
<span class="comment-copy">Which, also probably means you don't need a messaging queue like ZeroMQ. Maybe you <i>might</i> need it for the type of data you are sending around. But for simple communication between these two services, I think setting up a simple app with Flask, will do just fine.</span>
<span class="comment-copy">I'm not <i>too</i> sure what the usage of <code>var io = require( "socket.io" )( server );</code> is here either. If you are simply looking to run your node app, and provide the ability for other clients to hit a particular endpoint on your service running node, I don't <i>think</i> you need to do that? I think there is a more idiomatic way to get a node app running. But, don't hold me to that one. I just don't remember doing <i>that</i> with some of the node stuff I've dealt with.</span>
<span class="comment-copy">So, the language itself supports async as you can see <a href="https://docs.python.org/3/library/asyncio-task.html" rel="nofollow noreferrer">here</a>. Furthermore, in order to integrate async behaviour with web services, there have been implementations made to facilitate all this. This answer <a href="https://stackoverflow.com/questions/31866796/making-an-asynchronous-task-in-flask">here</a> provides a simple example of one of the tools used. Furthermore, take a look <a href="http://python-guide-pt-br.readthedocs.io/en/latest/scenarios/web/" rel="nofollow noreferrer">here</a> for a nice breakdown of web frameworks in Python land. There is a mention of Tornado for async.</span>
<span class="comment-copy">I hope this information helps and isn't further complicating matters.</span>
<span class="comment-copy">Worth noting socket.io 1.7.4 is probably required for node.</span>
