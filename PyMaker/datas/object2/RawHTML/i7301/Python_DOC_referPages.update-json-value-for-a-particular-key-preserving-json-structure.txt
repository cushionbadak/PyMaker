<div class="post-text" itemprop="text">
<p>I need to update the value for key (<code>id</code>) in the JSON file. Value is stored in the variable <code>ids</code>. I am able to update the key <code>id</code> with <code>ids</code> (updated value), but the structure of the JSON file gets messed up. Can anyone suggest me a way to doing it without messing up the JSON structure?</p>
<p>Code:</p>
<pre><code>ids=10
filename='update_test.json'
with open(filename,'r') as f:
    data=json.load(f)
    data['id'] = ids
os.remove(filename)
with open(filename,'w') as f:
    json.dump(data,f,indent=4)
</code></pre>
<p>Input JSON:</p>
<pre><code>{
    "accountableExecutiveTech": "string",
    "api": true,
    "arrivalFrequency": "string",
    "bucketName": "string",
    "businessDataset": "string",
    "columns": [{
        "businessColumnName": "string",
        "childColumns": [{}],
        "columnOrder": 0,
        "description": "string",
        "descriptiveName": "string",
        "format": "string",
        "hierarchicalName": "string",
        "id": 0,
        "isArray": true,
        "length": 0,
        "name": "string",
        "parentColumnName": "string",
        "partitionColumn": true,
        "technicalDatasetId": 0,
        "technicalDatasetName": "string",
        "technicalNamespace": "string",
        "technicalPlatformName": "string",
        "type": "string",
        "validValues": {}
    }],
    "controlMJobName": "string",
    "credit": true,
    "delimiter": "string",
    "delimiterFlag": true,
    "description": "string",
    "dqPrioritized": true,
    "fileFormat": "string",
    "id": "",
    "name": "string",
    "namespace": "string",
    "npi": true,
    "objectKey": "string",
    "pci": true,
    "performingDataSteward": "string",
    "platformName": "string",
    "retentionPlan": "string",
    "selectAdGroup": "string",
    "sourceDatasets": [{
        "id": 4534,
        "name": "string",
        "namespace": "string",
        "platformName": "string"
    }],
    "tags": ["string"]
}
</code></pre>
<p>Output JSON:</p>
<pre><code>{
    "accountableExecutiveTech": "string",
    "delimiterFlag": true,
    "performingDataSteward": "string",
    "api": true,
    "dqPrioritized": true,
    "id": 14044,
    "namespace": "string",
    "fileFormat": "string",
    "selectAdGroup": "string",
    "pci": true,
    "platformName": "string",
    "columns": [
        {
            "isArray": true,
            "partitionColumn": true,
            "description": "string",
            "technicalDatasetId": 0,
            "format": "string",
            "technicalPlatformName": "string",
            "parentColumnName": "string",
            "columnOrder": 0,
            "length": 0,
            "childColumns": [
                {}
            ],
            "descriptiveName": "string",
            "validValues": {},
            "technicalDatasetName": "string",
            "technicalNamespace": "string",
            "hierarchicalName": "string",
            "businessColumnName": "string",
            "type": "string",
            "id": 0,
            "name": "string"
        }
    ],
    "businessDataset": "string",
    "npi": true,
    "description": "string",
    "tags": [
        "string"
    ],
    "arrivalFrequency": "string",
    "objectKey": "string",
    "bucketName": "string",
    "controlMJobName": "string",
    "name": "string",
    "retentionPlan": "string",
    "credit": true,
    "delimiter": "string",
    "sourceDatasets": [
        {
            "platformName": "string",
            "namespace": "string",
            "id": 4534,
            "name": "string"
        }
    ]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm guessing you're referring to the order of keys in you dictionary (later in serialized JSON) that gets changed. That's because by default <code>json.load()</code> uses <code>dict</code> as an underlaying mapping type.</p>
<p>But you can change that to a dictionary type that preserves order, called <code>collections.OrderedDict</code>:</p>
<pre><code>from collections import OrderedDict

ids = 10
filename = 'update_test.json'

with open(filename, 'r') as f:
    data = json.load(f, object_pairs_hook=OrderedDict)
    data['id'] = ids

with open(filename, 'w') as f:
    json.dump(data, f, indent=4)
</code></pre>
<p>Note the use of <code>object_pairs_hook=OrderedDict</code> in <a href="https://docs.python.org/3/library/json.html#json.load" rel="nofollow noreferrer"><code>json.load()</code></a>. From the docs:</p>
<blockquote>
<p><code>object_pairs_hook</code> is an optional function that will be called with the result of any object literal decoded with an ordered list of pairs. The return value of object_pairs_hook will be used instead of the <code>dict</code>. This feature can be used to implement custom decoders that rely on the order that the key and value pairs are decoded (for example, <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">collections.OrderedDict()</a> will remember the order of insertion).</p>
</blockquote>
</div>
<span class="comment-copy">what gets 'messed up'? paste the output json also</span>
<span class="comment-copy">Probably safer to move or rename the file with a temporary name before blowing away the original. What if something happens during the write?</span>
<span class="comment-copy">You're right, I just c/p OP's code. I've removed the call to <code>remove</code>.</span>
<span class="comment-copy">Tried with orderedDict it still gives me the same result.</span>
<span class="comment-copy">@Shrikant, just to make it clear, is the order of the keys bothering you, or the formatting of braces, like <code>"childColumns": [{}],</code> which is printed in 3 lines instead of one?</span>
<span class="comment-copy">@randomir, i was worried about the order of the structure but it doesn't really matter for posting the json file to API...thanks for the help.</span>
