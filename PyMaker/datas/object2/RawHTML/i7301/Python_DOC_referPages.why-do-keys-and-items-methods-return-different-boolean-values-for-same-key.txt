<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; spam = {'name': 'Zophie', 'age': 7}
&gt;&gt;&gt; 'name' in spam.keys()
True
&gt;&gt;&gt; 'name' in spam.items()
False
&gt;&gt;&gt; 
</code></pre>
<p>In python 3.6, when checking whether a key exists in a dictionary the <code>keys()</code> method returns <code>True</code>, while the <code>items()</code> method returns <code>False</code> for the same key. Why is that the case?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>items()</code> contains <strong>tuples</strong>, key-value pairs:</p>
<pre><code>&gt;&gt;&gt; spam.items()
dict_items([('name', 'Zophie'), ('age', 7)])
</code></pre>
<p>Your key is not such a tuple. It may be <em>contained</em> in one of the tuples, but <code>in</code> does not test for containment recursively.</p>
<p>Either test for the correct key-value tuple:</p>
<pre><code>&gt;&gt;&gt; ('name', 'Zophie') in spam.items()
True
</code></pre>
<p>or if you can't get access to just the <code>keys()</code> dictionary view, use the <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any()</code> function</a> to test each pair individually (iteration is halted early when a match is found):</p>
<pre><code>&gt;&gt;&gt; any('name' in pair for pair in spam.items())
True
</code></pre>
<p>or</p>
<pre><code>&gt;&gt;&gt; any(key == 'name' for key, value in spam.items())
True
</code></pre>
<p>On a separate note, if all you are doing is testing for a key, then just use <code>key in dictionary</code>. There is <em>no need</em> to create a separate dictionary view over the keys for that case; it's just a waste of Python cycles and memory as containment testing against the dictionary achieves the exact same result.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is because items() returns a list of key and value pairs.</p>
<pre><code>&gt;&gt;&gt; spam = {'name': 'Zophie', 'age': 7}
&gt;&gt;&gt; spam.keys()
dict_keys(['name', 'age'])
&gt;&gt;&gt; spam.items()
dict_items([('name', 'Zophie'), ('age', 7)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>dict.keys()</code> will return a list but <code>dict.items()</code> will return you list of tuples in <code>key,value</code> pair so it would not match. </p>
<p>for example :</p>
<p><code>name is not equal to ('name': 'Zophie')</code></p>
<p>Hope you get the point.</p>
</div>
<div class="post-text" itemprop="text">
<p>Of course they are different.</p>
<p>In your spam variable --&gt; <code>spam = {'name': 'Zophie', 'age': 7}</code>:</p>
<p><code>name</code>, and <code>age</code> are the <strong>Keys</strong>.
<code>'name': 'Zophie'</code> and <code>'age': 7</code>, the <strong>items</strong>.</p>
</div>
<span class="comment-copy"><code>items()</code> returns items (keys and values in pairs of tuples). You can print the result of the <code>items()</code> method to see the content by yourself.</span>
<span class="comment-copy">Did you see the output difference in <code>spam.keys()</code> and <code>spam.items()</code></span>
<span class="comment-copy">just use <code>'name' in spam</code> BTW.</span>
<span class="comment-copy">The OP is using Python 3, not Python 2, and the calls return <i>dictionary views</i>. That doesn't matter that much to the technical merits of your answer, but the output looks somewhat different.</span>
<span class="comment-copy">Neither of these methods return a <code>list</code> in Python 3, rather, they return a view.</span>
