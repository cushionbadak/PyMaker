<div class="post-text" itemprop="text">
<p>Suppose I have two dataframes <code>d1</code> and <code>d2</code></p>
<pre><code>d1 = pd.DataFrame(np.ones((3, 3), dtype=int), list('abc'), [0, 1, 2])
d2 = pd.DataFrame(np.zeros((3, 2), dtype=int), list('abc'), [3, 4])
</code></pre>
<hr/>
<pre><code>d1

   0  1  2
a  1  1  1
b  1  1  1
c  1  1  1
</code></pre>
<hr/>
<pre><code>d2

   3  4
a  0  0
b  0  0
c  0  0
</code></pre>
<hr/>
<p>What is an easy and generalized way to interweave two dataframes' columns.  We can assume that the number of columns in <code>d2</code> is always one less than the number of columns in <code>d1</code>.  And, the indices are the same.</p>
<p>I want this:</p>
<pre><code>pd.concat([d1[0], d2[3], d1[1], d2[4], d1[2]], axis=1)

   0  3  1  4  2
a  1  0  1  0  1
b  1  0  1  0  1
c  1  0  1  0  1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.concat.html" rel="noreferrer"><code>pd.concat</code></a> to combine the DataFrames, and <a href="http://toolz.readthedocs.io/en/latest/api.html#toolz.itertoolz.interleave" rel="noreferrer"><code>toolz.interleave</code></a> reorder the columns:</p>
<pre><code>from toolz import interleave

pd.concat([d1, d2], axis=1)[list(interleave([d1, d2]))]
</code></pre>
<p>The resulting output is as expected:</p>
<pre><code>   0  3  1  4  2
a  1  0  1  0  1
b  1  0  1  0  1
c  1  0  1  0  1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's one NumPy approach -</p>
<pre><code>def numpy_interweave(d1, d2):
    c1 = list(d1.columns)
    c2 = list(d2.columns)
    N = (len(c1)+len(c2))
    cols = [None]*N
    cols[::2] = c1
    cols[1::2] = c2

    out_dtype = np.result_type(d1.values.dtype, d2.values.dtype)
    out = np.empty((d1.shape[0],N),dtype=out_dtype)
    out[:,::2] = d1.values
    out[:,1::2] = d2.values

    df_out = pd.DataFrame(out, columns=cols, index=d1.index)
    return df_out
</code></pre>
<p>Sample run -</p>
<pre><code>In [346]: d1
Out[346]: 
   x  y  z
a  6  7  4
b  3  5  6
c  4  6  2

In [347]: d2
Out[347]: 
   p  q
a  4  2
b  7  7
c  7  2

In [348]: numpy_interweave(d1, d2)
Out[348]: 
   x  p  y  q  z
a  6  4  7  2  4
b  3  7  5  7  6
c  4  7  6  2  2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Interweave the columns:</p>
<pre><code>c = np.empty((d1.columns.size + d2.columns.size,), dtype=object)
c[0::2], c[1::2] = d1.columns, d2.columns
</code></pre>
<p>Now, do a join and re-order with boolean indexing:</p>
<pre><code>d1.join(d2)[c]

   0  3  1  4  2
a  1  0  1  0  1
b  1  0  1  0  1
c  1  0  1  0  1
</code></pre>
<p>You may prefer <code>pd.concat</code> when dealing with multiple dataframes.</p>
</div>
<div class="post-text" itemprop="text">
<p>we can use <a href="https://docs.python.org/3.6/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer">itertools.zip_longest</a>:</p>
<pre><code>In [75]: from itertools import zip_longest

In [76]: cols = pd.Series(np.concatenate(list(zip_longest(d1.columns, d2.columns)))).dropna()

In [77]: cols
Out[77]:
0    0
1    3
2    1
3    4
4    2
dtype: object

In [78]: df = pd.concat([d1, d2], axis=1)[cols]

In [79]: df
Out[79]:
   0  3  1  4  2
a  1  0  1  0  1
b  1  0  1  0  1
c  1  0  1  0  1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>write a function to abstract away the generic merge-reorder</p>
<pre><code>from itertools import zip_longest
def weave(df1, df2):
  col1 = df1.columns
  col2 = df2.columns
  weaved =  [col for zipped in zip_longest(col1,col2) 
                 for col in zipped
                 if col is not None]
  return pd.concat([df1, df2], axis=1)[weaved]

weave(d1, d2)
# Output:
   0  3  1  4  2
a  1  0  1  0  1
b  1  0  1  0  1
c  1  0  1  0  1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My solution was to use <code>pd.DataFrame.insert</code> making sure to insert from the back first</p>
<pre><code>df = d1.copy()
for i in range(d2.shape[1], 0, -1):
    df.insert(i, d2.columns[i - 1], d2.iloc[:, i - 1])

df

   0  3  1  4  2
a  1  0  1  0  1
b  1  0  1  0  1
c  1  0  1  0  1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>roundrobin</code> itertools recipe has an interleaving characteristic.  This option offers the choice between directly implementing the recipe from the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">Python docs</a>, or importing a third-party package such as <a href="https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.roundrobin" rel="nofollow noreferrer"><code>more_itertools</code></a> that implements the recipe for you:</p>
<pre><code>from more_itertools import roundrobin

pd.concat([d1, d2], axis=1)[list(roundrobin(d1, d2))]

# Output
   0  3  1  4  2
a  1  0  1  0  1
b  1  0  1  0  1
c  1  0  1  0  1
</code></pre>
<p>Inspired by @root's answer, the column indices are interleaved and used to slice a concatenated DataFrame.</p>
</div>
<span class="comment-copy">Brilliant as always... I already started using <code>cytoolz</code> on your recommendation (-:</span>
<span class="comment-copy">This answer almost felt like cheating, since the <code>interleave</code> function is tailor-made for the operation in question.  Yeah, I'm a big fan <code>toolz</code>/<code>cytoolz</code>.  I remember being happy seeing you use <code>cytoolz</code> in one of your questions a little while back!</span>
<span class="comment-copy">Used it already <a href="https://stackoverflow.com/a/45453058/2336654">stackoverflow.com/a/45453058/2336654</a></span>
