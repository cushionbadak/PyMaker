<div class="post-text" itemprop="text">
<p>I was using a <code>lambda</code> statement to perform math, and happened to repeatedly use one certain value. Therefore I was wondering if it was possible to assign and use a variable within a <code>lambda</code> statement. </p>
<p>I have tried things like:</p>
<pre><code>a = lambda n:(b=3+2*n) #[my math here]
</code></pre>
<p>However this just raises errors, and I was wondering if there was a way to do this.</p>
</div>
<div class="post-text" itemprop="text">
<p>Nope, you can't. Only expressions allowed in <a href="https://docs.python.org/3/reference/expressions.html#lambda" rel="nofollow noreferrer"><code>lambda</code></a>:</p>
<blockquote>
<pre><code>lambda_expr        ::=  "lambda" [parameter_list]: expression
lambda_expr_nocond ::=  "lambda" [parameter_list]: expression_nocond
</code></pre>
</blockquote>
<p>You could, however, define a <em>second</em> <code>lambda</code> <em>inside</em> the <code>lambda</code> and immediately call it with the parameter you want. (Whether that's really better might be another question.)</p>
<pre><code>&gt;&gt;&gt; a = lambda n: ((3+2*n), n*(3+2*n))  # for reference, with repetition
&gt;&gt;&gt; a(42)
(87, 3654)
&gt;&gt;&gt; a2 = lambda n: (lambda b: (b, n*b))(3+2*n)  # lambda inside lambda
&gt;&gt;&gt; a2(42)
(87, 3654)
&gt;&gt;&gt; a3 = lambda n: (lambda b=3+2*n: (b, n*b))()  # using default parameter
&gt;&gt;&gt; a3(42)
(87, 3654)
</code></pre>
<p>Of course, both the outer and the inner lambda can have more than one parameter, i.e. you can define multiple "variables" at once. The benefit of this approach over, e.g., defining a second lambda <em>outside</em> of the first is, that you can still also use the original parameters (not possible if you invoked <code>a</code> with <code>b</code> pre-calculated) and you have to do the calculation for <code>b</code> only once (other than repeatedly invoking a function for the calculation of <code>b</code> within <code>a</code>).</p>
<hr/>
<p>Also, inspired by the <a href="https://stackoverflow.com/a/14617232/1639625">top answer to the linked question</a>, you could also define one or more variables as part of a list comprehension or generator within the lambda, and then get the <code>next</code> (first and only) result from that generator or list:</p>
<pre><code>&gt;&gt;&gt; a3 = lambda n: next((b, n*b) for b in [3+2*n])
&gt;&gt;&gt; a3(42)
(87, 3654)
</code></pre>
<p>However, I think the intent behind the lambda-in-a-lambda is a bit clearer. Finally, keep in mind that instead of a one-line <code>lambda</code>, you could also just use a much clearer three-line <code>def</code> statement...</p>
</div>
<div class="post-text" itemprop="text">
<p>You can assign variables in lambda functions is you use exec:</p>
<pre><code>&gt;&gt;&gt; a = lambda: exec('global x; x = 1')
&gt;&gt;&gt;a()
&gt;&gt;&gt;x
1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can create 2 different lambda functions and pass one to the other. For example,</p>
<pre><code>b = lambda x: 3+2*x
a = lambda y: [my math here using variable b(y)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can just pass your lambda an argument which passes it along to another argument if you wish:</p>
<pre><code>&gt;&gt;&gt; b = lambda x: 3 + 2*x
&gt;&gt;&gt; a = lambda y: y * b(y)
&gt;&gt;&gt; a(1)
5
&gt;&gt;&gt; a(2)
14
</code></pre>
</div>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/6282042/assignment-inside-lambda-expression-in-python" title="assignment inside lambda expression in python">stackoverflow.com/questions/6282042/â€¦</a></span>
<span class="comment-copy">I don't think this really is a duplicate of that question. While the title is very similar, the actual problem seems to be a bit different. (Actually just wanted to vote for re-open, forgot about anti-dupe-hammer...)</span>
<span class="comment-copy">Yes you can do that.  But why would you ever do that!</span>
<span class="comment-copy">No what I was trying to do is use the argument passed to the lambda to do calculations, but I repeatedly performed the operation <code>3+2*n</code> to the argument so I wanted to assign that to a variable.</span>
