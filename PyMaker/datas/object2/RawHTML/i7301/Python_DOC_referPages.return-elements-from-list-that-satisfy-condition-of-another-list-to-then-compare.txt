<div class="post-text" itemprop="text">
<p>I have two lists:</p>
<pre><code>listA = [230, 232, 230, 229, 237, 212, 245, 233, 220, 230]
listB = [232, 231, 234, 230, 234, 228, 244, 236, 227, 229]
</code></pre>
<p>How do I compare the lists and only return the points at which <code>listA</code> was greater than <code>listB</code> into a third list <code>listC</code> while preserving the indices so that the result looks like:</p>
<pre><code>listC = [   , 232,    ,    , 237,    , 245,    ,    , 230]
</code></pre>
<p>After all that, there is a fourth list <code>listD</code>:</p>
<pre><code>listD = [1,2,3,4,5,6,7,8,9,10]
</code></pre>
<p>and I am trying to collate it with <code>listC</code> so that I end up with list C &amp; D matching in terms of indices:</p>
<h3>Final Result:</h3>
<pre><code>listD = [ 2 , 5 , 7 , 10]
listC = [233,237,245,230]
</code></pre>
<p>I was looking into list comprehension as I was told it would help, but I'm not really sure how to apply what I've read.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a perfect use-case for <a href="https://docs.python.org/3/library/itertools.html#itertools.compress" rel="nofollow noreferrer"><code>itertools.compress</code></a>:</p>
<pre><code>&gt;&gt;&gt; from itertools import compress, starmap
&gt;&gt;&gt; from operator import gt
</code></pre>
<p>Get a new list of booleans where <code>True</code> means item in <code>listA</code> was greater than corresponding item in <code>listB</code>.</p>
<pre><code>&gt;&gt;&gt; bools = list(starmap(gt, zip(listA, listB)))
&gt;&gt;&gt; bools
[False, True, False, False, True, False, True, False, False, True]
</code></pre>
<p>Now we filter <code>listA</code> and <code>listD</code> based on <code>bools</code> using <code>compress</code>.</p>
<pre><code>&gt;&gt;&gt; list(compress(listA, bools))
[232, 237, 245, 230]
&gt;&gt;&gt; list(compress(listD, bools))
[2, 5, 7, 10]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd not use a list comprehension here; you are building <em>two</em> lists, not one, and that's just easier with a regular <code>for</code> loop:</p>
<pre><code>listC = []
listD_filtered = []
for a, b, d in zip(listA, listB, listD):
    if a &gt; b:
        listC.append(a)
        listD_filtered.append(d)
</code></pre>
<p>Using <code>zip()</code> you can iterate over lists in parallel, removing the need to track indices altogether.</p>
<p>You can still use a comprehension here, but then you'd build a sequence with <code>(a, d)</code> values, and then use <code>zip()</code> again to split that result into two separate lists:</p>
<pre><code>listC, listD = zip(*((a, d) for a, b, d in zip(listA, listB, listD) if a &gt; b))
</code></pre>
<p>This however becomes harder to follow and explain, and you actually have <em>tuples</em>, not lists, in that case (depending on your usecase you'd have to convert those to lists again).</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; listA = [230, 232, 230, 229, 237, 212, 245, 233, 220, 230]
&gt;&gt;&gt; listB = [232, 231, 234, 230, 234, 228, 244, 236, 227, 229]
&gt;&gt;&gt; listD = [1,2,3,4,5,6,7,8,9,10]
&gt;&gt;&gt; listC = []
&gt;&gt;&gt; listD_filtered = []
&gt;&gt;&gt; for a, b, d in zip(listA, listB, listD):
...     if a &gt; b:
...         listC.append(a)
...         listD_filtered.append(d)
...
&gt;&gt;&gt; listC
[232, 237, 245, 230]
&gt;&gt;&gt; listD_filtered
[2, 5, 7, 10]
&gt;&gt;&gt;
&gt;&gt;&gt; listC, listD = zip(*((a, d) for a, b, d in zip(listA, listB, listD) if a &gt; b))
&gt;&gt;&gt; listC
(232, 237, 245, 230)
&gt;&gt;&gt; listD
(2, 5, 7, 10)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Get the result by list comprehension:</p>
<pre><code>In [6]: listC = [i for i, j in zip(listA, listB) if i&gt;j]                                                                                                                                            
In [7]: listC                                                                                     
Out[7]: [232, 237, 245, 230]

In [9]: listD = [i for i, (a, b) in enumerate(zip(listA, listB), 1) if a&gt;b]                                                                                                                         
In [10]: listD                                                                                    
Out[10]: [2, 5, 7, 10] 
</code></pre>
</div>
<span class="comment-copy">What should be in the indices where there is nothing? A <code>None</code>?</span>
<span class="comment-copy">@WillemVanOnsem, I was originally trying to assign it as <code>null</code> to see if it would be easier to just parse through all non-null values after, but I kept getting "ValueError", so I'm not sure if <code>None</code> works differently or not</span>
