<div class="post-text" itemprop="text">
<p>So waiting for server can bring pain:</p>
<pre><code>    import asyncio 
    #...
    greeting = await websocket.recv() # newer ends
</code></pre>
<p>I want to have something like</p>
<pre><code>    greeting = await websocket.recv() for seconds(10)
</code></pre>
<p>So how to await only for a limited amount of time in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/reference/expressions.html#await" rel="nofollow noreferrer">await expressions</a> don't have a timeout parameter, but the <a href="https://docs.python.org/3/library/asyncio-task.html?highlight=wait_for#asyncio.wait_for" rel="nofollow noreferrer">asyncio.wait_for</a> (thanks to AChampion) function does. My guess is that this is so that the await expression, tied to coroutine definition in the language itself, does not rely on having clocks or a specific event loop. That functionality is left to the asyncio module of the standard library. </p>
</div>
<span class="comment-copy">Check the documentation. Does this method take a timeout parameter?</span>
<span class="comment-copy">I wonder about await sintax, not a particular method</span>
<span class="comment-copy">What is <code>websocket</code>? You can do <code>greeting = yield from asyncio.wait_for(websocket.recv(), timeout=10)</code></span>
