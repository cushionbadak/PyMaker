<div class="post-text" itemprop="text">
<p>I was testing with something and I wrote this code for example purposes.I felt the output I got was weird.I expected that function calls are executed one after the other but according to this code both the print statements are getting executed after each other and then the return values are printed together.What does this mean and what is the flow of the code in this case? </p>
<pre><code>global num
num=5

def demo(num):
    num+=1
    print("hi")
    return(num)



print(demo(num),demo(num))
</code></pre>
<p>output-</p>
<pre><code>hi
hi
6 6
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I expected that function calls are executed one after the other</p>
</blockquote>
<p>That's exactly what happens.</p>
<p>But there's no way the <code>print</code> can happen before the <code>demo</code> calls, because it's trying to print out the values returned by those calls. (You can loosely think of this as a special case of anywhere you see parentheses: <code>2 * (3+4)</code> can't multiply by <code>2</code> until it's added <code>3+4</code>, and <code>print(demo(num), demo(num))</code> can't print the results of <code>demo(num)</code> and <code>demo(num)</code> until it's called them. But don't take that <em>too</em> literally.)</p>
<p>So, those <code>demo</code> calls happen left to right, then the <code>print</code> call happens.</p>
<hr/>
<p>In more detail, let's step through how it evaluates this line:</p>
<pre><code>print(demo(num),demo(num))
</code></pre>
<p>… Python has to do this:</p>
<ul>
<li>Evaluate <code>print</code> by looking it up as a builtin name, which finds the builtin <code>print</code> function.</li>
<li>Evaluate the first argument.

<ul>
<li>Evaluate <code>demo</code> by looking it up as a global name, which finds the global <code>demo</code> function that you defined.</li>
<li>Evaluate <code>num</code> by looking it up as a global name, which finds the global <code>5</code> value.</li>
<li>Call the function on the argument.</li>
<li>The parameter <code>num</code> gets the value passed in, <code>5</code>.</li>
<li><code>num += 1</code> updates the local variable (parameters are local variables) <code>num</code> to <code>6</code>.</li>
<li><code>print("hi")</code> prints out <code>hi</code>.</li>
<li><code>return(num)</code> returns the value of the local variable, <code>6</code>.</li>
</ul></li>
<li>Evaluate the second argument.

<ul>
<li>… same as above, it prints out <code>hi</code> and returns <code>6</code>.</li>
</ul></li>
<li>Call the function returned by evaluating <code>print</code> on the two arguments returned by the two calls, so it prints out <code>6 6</code>.</li>
</ul>
<hr/>
<p>If you want the rigorous definition, he details are covered in <a href="https://docs.python.org/3/reference/expressions.html#calls" rel="nofollow noreferrer">Calls</a> in the reference documentation. In particular (stripping out irrelevant bits)</p>
<blockquote>
<p><code>call ::= primary "(" [argument_list] ")"</code></p>
<p> …</p>
<p>The primary must evaluate to a callable object…. All argument expressions are evaluated before the call is attempted.</p>
</blockquote>
<hr/>
<blockquote>
<p>according to this code both the print statements are getting executed after each other and then the return values are printed together</p>
</blockquote>
<p>Yes. The two function calls have to be executed in order, so that it can get the values to pass to the <code>print</code> function. Executing them prints out <code>Hi</code> twice. Then it has all the values, so it can <code>print</code> them, which prints out <code>6 6</code>, since both values are <code>6</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Program evaluation has an order of operations just like arithmetic does. And similarly, it's not always intuitive, especially when we "consume" things left to right, up to down while reading.</p>
<p>So, what gives? <strong>Lets become the python interpreter and see why order of operations is important.</strong></p>
<pre><code># A wild statement appears. Time to compute!
print(demo(num),demo(num))
# I cant't print yet! i'm missing info! 
</code></pre>
<p>I need to evaluate this first <code>demo(num)</code>, and by default im going to do it a closed room away from globals</p>
<pre><code># evaluating demo(num=5) - num here is a new local variable, it has no relation to the global one defined above
num+=1 # num = 6
print("hi") # [[[PRINT hi]]] ~&gt; to console
return 6 # returns the value 6 filling in another piece of the puzzle
</code></pre>
<p>Where are we at now? Almost ready to call this print, just need to do this demo thing again</p>
<pre><code>print(6, demo(num))
# What is num though? 
# Well, the only num I know of out here in global space is 5
print(6, demo(5))
# evaluate: demo(5)
</code></pre>
<p>This seems familiar!</p>
<pre><code># evaluating: demo(num=5) - again, a NEW local variable is created just for this function call
num+=1 # num = 6
print("hi") # [[[PRINT hi]]] ~&gt; to console
return 6
</code></pre>
<p><em>Finally, print has all its arguments it needs</em></p>
<pre><code>print(6, 6) # [[[PRINT 6 6]]] ~&gt; to console
</code></pre>
<p><strong><code>print</code> is not magic, it's just another function!</strong>  Same as the <code>demo</code> you wrote.</p>
<p><strong>And functions will not evaluate until all their parameters are supplied.</strong> </p>
<p><code>print(a, b)</code> needs the values of <code>a</code> &amp; <code>b</code> before it can do its thing.</p>
</div>
<span class="comment-copy">@Patrick Haugh This is not a duplicate of the question you marked. In this question, it's simply because the last <code>print</code> function needs to have all of its arguments evaluated before it can output anything, so both calls to <code>demo()</code> have to finish first and therefore both <code>hi</code>s are printed before the numbers.</span>
<span class="comment-copy">@blhsing do the  function calls evaluate from left to right?</span>
<span class="comment-copy">The <code>num</code> in your function is not the <code>global num</code>. It is the local parameter with the same name. You are modifying the local copy of the global <code>num</code>. To see what you want to see, remove the formal parameter from the function definition whatsoever and move <code>global num</code> into the function definition.</span>
<span class="comment-copy">What output were you expecting? I <i>think</i> I've guessed where you confusion is, and written an answer to explain it, but I could be wrong.</span>
<span class="comment-copy">Wish I had more time to edit down and make a nice tree diagram showing this with much less words, but gotta sign off for now! Hope this "ELI5" version is helpful for someone.</span>
