<div class="post-text" itemprop="text">
<p>After using <code>get</code> to extract information from an <code>API</code> in <code>JSON</code> format, I'm now attempting to calculate an average of <code>price</code> in an <strong><em>efficient</em></strong> way.</p>
<p><code>data</code> (Example response from API Call):</p>
<pre><code>...
{u'status': u'success', u'data': {u'context_id': u'2', u'app_id': u'123', u'sales': [{u'sold_at': 133, u'price': u'1.8500', u'hash_name': u'Xuan881', u'value': u'-1.00000'}, {u'sold_at': 139, u'price': u'2.6100', u'hash_name': u'Xuan881', u'value': u'-1.00000'},
... etc.
</code></pre>
<p>I have managed to do so with the following code:</p>
<pre><code>len_sales = len(data["data"]["sales"])
total_p = 0 
for i in range(0,len_sales):
    total_p += float(data["data"]["sales"][i]["price"])
average = total_p/len_sales
print average
</code></pre>
<p>However, since the <code>data</code> dictionary retrieved is large in size, there seems to be quite a bit of waiting time before the output is shown.</p>
<p>Therefore, I was wondering whether there is a more efficient and/or pythonic way of achieving the same result, but in a shorter time.</p>
</div>
<div class="post-text" itemprop="text">
<p>First, you're not looping through a dict, you're looping through a list that happens to be inside a dict.</p>
<p>Second, doing something for every value in a list inherently requires visiting every value in the list; there's no way around the linear cost.</p>
<p>So, the only thing available is micro-optimizations, which probably won't make much difference—if your code is way too slow, 10% faster doesn't help, and if your code is already fast enough, you don't need it—but occasionally they are needed.</p>
<p>And in this case, almost all of the micro-optimizations also make your code more readable and Pythonic, so there's no good reason <em>not</em> to do them:</p>
<hr/>
<p>First, you're accessing <code>data["data"]["sales"]</code> twice. The performance cost of that is probably negligible, but it also makes your code less readable, so let's fix that:</p>
<pre><code>sales = data["data"]["sales"]
</code></pre>
<p>Next, instead of looping <code>for i in range(0, len_sales):</code> just to use <code>sales[i]</code>, it's faster—and, again, more readable—to just loop over <code>sales</code>:</p>
<pre><code>for sale in sales:
    total_p += float(sale["price"])
</code></pre>
<p>And now we can turn this loop into a comprehension, which is slightly more efficient (although that's partly canceled by the cost of adding a generator—you might actually want to test this one):</p>
<pre><code>prices = (float(sale["price"]) for sale in sales)
</code></pre>
<p>… and pass that directly to <code>sum</code>:</p>
<pre><code>total_p = sum(float(sale["price"]) for sale in sales)
</code></pre>
<p>We can also use the <a href="https://docs.python.org/3/library/statistics.html#statistics.mean" rel="nofollow noreferrer"><code>mean</code></a> function that comes with Python instead of doing it manually:</p>
<pre><code>average = statistics.mean(float(sale["price"]) for sale in sales)
</code></pre>
<p>… except that you're apparently using Python 2, so you'd need to install the <a href="https://pypi.org/project/statistics/" rel="nofollow noreferrer">unofficial backport</a> off PyPI (the official <a href="https://pypi.org/project/stats/" rel="nofollow noreferrer"><code>stats</code></a> backport only goes back to 3.1; the 2.x version was abandoned), so let's skip that part.</p>
<p>Putting it all together:</p>
<pre><code>sales = data["data"]["sales"]
total = sum(float(sale["price"]) for sale in sales)
average = total / len(sales)
</code></pre>
<hr/>
<p>A couple things that <em>might</em> help—if it matters, you definitely are going to want to test with <code>timeit</code>:</p>
<p>You can use <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>operator.itemgetter</code></a> to get the <code>price</code> item. Which means your expression is now just chaining two function calls, which means you can chain two <code>map</code> calls:</p>
<pre><code>total = sum(map(float, map(operator.itemgetter("price"), sales)))
</code></pre>
<p>That's probably less readable than the comprehension to anyone who isn't coming from a Lisp background, but it's certainly not terrible, and it might be a little faster.</p>
<hr/>
<p>Alternatively, for moderately-sized input, building a temporary list is sometimes worth it. Sure, you waste time allocating memory and copying data around, but iterating a list is faster than iterating a generator, so the only way to really be sure is to test.</p>
<hr/>
<p>One more thing that might make a difference is to move this whole thing into a function. Code at the top level doesn't have local variables, only global, and they're slower to look up.</p>
<p>If you really need to squeeze out the last few percentage points, it's sometimes even worth copying global and builtin functions like <code>float</code> into locals. Of course that isn't going to help with <code>map</code> (since we're only accessing them once), but with a comprehension it might, so I'll show how to do it anyway:</p>
<pre><code>def total_price(sales):
    _float = float
    pricegetter = operator.itemgetter("price")
    return sum(map(_float, map(pricegetter, sales)))
</code></pre>
<hr/>
<p>The best way to benchmark code is to use the <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer"><code>timeit</code></a> module—or, if you're using IPython, the <code>%timeit</code> magic. Which works like this:</p>
<pre><code>In [3]: %%timeit
... total_p = 0 
... for i in range(0,len_sales):
...     total_p += float(data["data"]["sales"][i]["price"])
10000 loops, best of 3: 28.4 µs per loop
In [4]: %timeit sum(float(sale["price"]) for sale in sales)
10000 loops, best of 3: 18.4 µs per loop
In [5]: %timeit sum(map(float, map(operator.itemgetter("price"), sales)))
100000 loops, best of 3: 16.9 µs per loop
In [6]: %timeit sum([float(sale["price"]) for sale in sales])
100000 loops, best of 3: 18.2 µs per loop
In [7]: %timeit total_price(sales)
100000 loops, best of 3: 17.2 µs per loop
</code></pre>
<p>So, on my laptop, with your sample data:</p>
<ul>
<li>Looping directly over <code>sales</code> and using a generator expression instead of a statement is about 35% faster.</li>
<li>Using a list comprehension instead of a genexpr is about 1% faster than that.</li>
<li>Using <code>map</code> and <code>itemgetter</code> instead of a genexpr is about 10% faster.</li>
<li>Wrapping it in a function and caching the locals made things slightly slower. (Not surprising—as mentioned above, we only had a single lookup for each name anyway, thanks to <code>map</code>, so we're just adding a tiny overhead for probably 0 benefit.)</li>
</ul>
<p>Overall, <code>sum(map(…map(…)))</code> turned out to be the fasted for this particular input, on my laptop.</p>
<p>But of course you'll want to repeat this test on your real environment with your real input. When differences as small as 10% matter, you can't just assume that the details will transfer.</p>
<hr/>
<p>One more thing: If you really need to speed things up, often the simplest thing to do is take the exact same code and run it in <a href="https://pypy.org/" rel="nofollow noreferrer">PyPy</a> instead of the usual CPython interpreter. Repeating some of the above tests:</p>
<pre><code>In [4]: %timeit sum(float(sale["price"]) for sale in sales)
680 ns ± 19.8 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
In [5]: %timeit sum(map(float, map(operator.itemgetter("price"), sales)))
800 ns ± 24.5 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
In [6]: %timeit sum([float(sale["price"]) for sale in sales])
694 ns ± 24.4 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
</code></pre>
<p>Now the generator expression version is the fastest—but, more importantly, all three versions are roughly 20x as fast as they were in CPython. A 2000% improvement is a lot better than a 35% improvement.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a library called <a href="https://docs.python.org/3/library/statistics.html" rel="nofollow noreferrer">statistics</a> and find the mean of the list of sales. To get the list of sales, you could do a list comprehension -</p>
<pre><code>prices = [float(v) for k, v in i.iteritems() for i in data["data"]["sales"] if k == "price"]
</code></pre>
<p>This will give you a list of prices. Now all you need to do with above library is </p>
<pre><code>mean(prices)
</code></pre>
<p>Or, you could just do something like -</p>
<pre><code>mean_price = sum(prices) / len(prices)
</code></pre>
<p>And you will have the average of prices. Using list comprehension, you have already optimised your code. See <a href="https://stackoverflow.com/questions/22108488/are-list-comprehensions-and-functional-functions-faster-than-for-loops">this</a> and read the last paragraph of the answer too</p>
</div>
<span class="comment-copy">Can you post valid data?</span>
<span class="comment-copy">Thanks a lot for your help! I really appreciate the detail and time you've put in to this answer :) Have a good day.</span>
<span class="comment-copy">Regarding you latest edit, any chance you can edit the post to show the 'fastest' solution? Thanks :)</span>
<span class="comment-copy">@LearningToPython OK, done.</span>
<span class="comment-copy">Perfect! Thanks.</span>
<span class="comment-copy">This is brilliant !</span>
