<div class="post-text" itemprop="text">
<p>I have an imaginary class:</p>
<pre><code>class Foo:
    def __init__(self, **values):
        self._value_tuple = tuple(values.items())
</code></pre>
<p>And I would like to be able to convert it to <code>tuple</code> using built-in constructor:</p>
<pre><code>&gt;&gt;&gt; foo = Foo(ham=1, eggs=2, spam=3)
&gt;&gt;&gt; tuple(foo)
(('ham', 1), ('eggs', 2), ('spam', 3))
</code></pre>
<p>*I know I can to it manually, by implementing a method like <code>astuple()</code>. I would like to, if possible, achieve it by calling <code>tuple</code> constructor.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can achieve desired functionality by defining <code>__iter__()</code> method in your class:</p>
<pre><code>class Foo:
    def __init__(self, **values):
        self._value_tuple = tuple(values)

    def __iter__(self):
        return self._value_tuple.__iter__()
        # or return iter(self._value_tuple)


foo = Foo(ham=1, eggs=2, spam=3)
print(tuple(foo))
</code></pre>
<p>Output:</p>
<pre><code>('ham', 'eggs', 'spam')
</code></pre>
<p>If you want <code>(keys, values)</code>, you can store your items in dict:</p>
<pre><code>class Foo:
    def __init__(self, **values):
        self._value_dict = values

    def __iter__(self):
        return iter(self._value_dict.items())


foo = Foo(ham=1, eggs=2, spam=3)
print(tuple(foo))
</code></pre>
<p>Prints:</p>
<pre><code>(('ham', 1), ('eggs', 2), ('spam', 3))
</code></pre>
<p><code>__iter__()</code> is part of <a href="https://docs.python.org/3/reference/datamodel.html#object.__iter__" rel="nofollow noreferrer">Python Datamodel</a>. When you implement this method in your class, all functions and syntax constructs that expect something iterable will work with your class without change, that includes parameters in <code>tuple()</code>.</p>
</div>
<span class="comment-copy">Cool, this works. (<code>values.items()</code> instead of <code>values</code> though, I've updated my answer). Can you please explain why <code>__iter__</code> gives me this functionality? It seems pretty magical right now. (Why <code>__iter__</code> of all the dunder methods)</span>
<span class="comment-copy">@AnriofAstora <a href="https://dbader.org/blog/python-iterators" rel="nofollow noreferrer">dbader.org/blog/python-iterators</a></span>
<span class="comment-copy">@AnriofAstora <a href="https://docs.python.org/3/library/functions.html#func-tuple" rel="nofollow noreferrer">tuple()</a> consumes an iterable object.</span>
<span class="comment-copy">Oh, ok, I get it. Thank you for the responses.</span>
