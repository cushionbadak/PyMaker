<div class="post-text" itemprop="text">
<p>I have a list of data in which the numbers are between 1000 and 20 000.</p>
<pre><code>data = [1000, 1000, 5000, 3000, 4000, 16000, 2000]
</code></pre>
<p>When I plot a histogram using the <code>hist()</code> function, the y-axis represents the number of occurrences of the values within a bin. Instead of the number of occurrences, I would like to have the percentage of occurrences. </p>
<p><a href="https://i.stack.imgur.com/2o2GU.png" rel="nofollow noreferrer"><img alt="Histogram of the data list above" src="https://i.stack.imgur.com/2o2GU.png"/></a></p>
<p>Code for the above plot:</p>
<pre><code>f, ax = plt.subplots(1, 1, figsize=(10,5))
ax.hist(data, bins = len(list(set(data))))
</code></pre>
<p>I've been looking at this <a href="https://matplotlib.org/examples/pylab_examples/histogram_percent_demo.html" rel="nofollow noreferrer">post</a> which describes an example using <code>FuncFormatter</code> but I can't figure out how to adapt it to my problem. Some help and guidance would be welcome :)</p>
<p><strong>EDIT:</strong> Main issue with the <code>to_percent(y, position)</code> function used by the <code>FuncFormatter</code>. The y corresponds to one given value on the y-axis I guess. I need to divide this value by the total number of elements which I apparently can' t pass to the function...</p>
<p><strong>EDIT 2:</strong> Current solution I dislike because of the use of a global variable:</p>
<pre><code>def to_percent(y, position):
    # Ignore the passed in position. This has the effect of scaling the default
    # tick locations.
    global n

    s = str(round(100 * y / n, 3))
    print (y)

    # The percent symbol needs escaping in latex
    if matplotlib.rcParams['text.usetex'] is True:
        return s + r'$\%$'
    else:
        return s + '%'

def plotting_hist(folder, output):
    global n

    data = list()
    # Do stuff to create data from folder

    n = len(data)
    f, ax = plt.subplots(1, 1, figsize=(10,5))
    ax.hist(data, bins = len(list(set(data))), rwidth = 1)

    formatter = FuncFormatter(to_percent)
    plt.gca().yaxis.set_major_formatter(formatter)

    plt.savefig("{}.png".format(output), dpi=500)
</code></pre>
<p><strong>EDIT 3:</strong> Method with <code>density = True</code></p>
<p><a href="https://i.stack.imgur.com/pXY2W.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/pXY2W.png"/></a></p>
<p>Actual desired output (method with global variable):</p>
<p><a href="https://i.stack.imgur.com/W8lMR.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/W8lMR.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>Other answers seem utterly complicated. A histogram which shows the proportion instead of the absolute amount can easily produced by weighting the data with <code>1/n</code>, where <code>n</code> is the number of datapoints.</p>
<p>Then a <a href="https://matplotlib.org/api/ticker_api.html#matplotlib.ticker.PercentFormatter" rel="noreferrer"><code>PercentFormatter</code></a> can be used to show the proportion (e.g. <code>0.45</code>) as percentage (<code>45%</code>).</p>
<pre><code>import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import PercentFormatter

data = [1000, 1000, 5000, 3000, 4000, 16000, 2000]

plt.hist(data, weights=np.ones(len(data)) / len(data))

plt.gca().yaxis.set_major_formatter(PercentFormatter(1))
plt.show()
</code></pre>
<p><a href="https://i.stack.imgur.com/jCCIC.png" rel="noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/jCCIC.png"/></a></p>
<p>Here we see that three of the 7 values are in the first bin, i.e. 3/7=43%.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can calculate the percentages yourself, then plot them as a bar chart. This requires you to use <code>numpy.histogram</code> (which matplotlib uses "under the hood" anyway). You can then adjust the y tick labels:</p>
<pre><code>import matplotlib.pyplot as plt
import numpy as np

f, ax = plt.subplots(1, 1, figsize=(10,5))
data = [1000, 1000, 5000, 3000, 4000, 16000, 2000]

heights, bins = np.histogram(data, bins = len(list(set(data))))

percent = [i/sum(heights)*100 for i in heights]

ax.bar(bins[:-1], percent, width=2500, align="edge")
vals = ax.get_yticks()
ax.set_yticklabels(['%1.2f%%' %i for i in vals])

plt.show()
</code></pre>
<p><a href="https://i.stack.imgur.com/LQerQ.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/LQerQ.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>functools.partial</code></a> to avoid using <code>global</code>s in your example.  </p>
<p>Just add <code>n</code> to function parameters:  </p>
<pre><code>def to_percent(y, position, n):
    s = str(round(100 * y / n, 3))

    if matplotlib.rcParams['text.usetex']:
        return s + r'$\%$'

    return s + '%'
</code></pre>
<p>and then create a partial function of two arguments that you can pass to <code>FuncFormatter</code>:  </p>
<pre><code>percent_formatter = partial(to_percent,
                            n=len(data))
formatter = FuncFormatter(percent_formatter)
</code></pre>
<hr/>
<p>Full code:  </p>
<pre><code>from functools import partial

import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter

data = [1000, 1000, 5000, 3000, 4000, 16000, 2000]


def to_percent(y, position, n):
    s = str(round(100 * y / n, 3))

    if matplotlib.rcParams['text.usetex']:
        return s + r'$\%$'

    return s + '%'


def plotting_hist(data):    
    f, ax = plt.subplots(figsize=(10, 5))
    ax.hist(data, 
            bins=len(set(data)), 
            rwidth=1)

    percent_formatter = partial(to_percent,
                                n=len(data))
    formatter = FuncFormatter(percent_formatter)
    plt.gca().yaxis.set_major_formatter(formatter)

    plt.show()


plotting_hist(data)
</code></pre>
<p>gives: </p>
<p><a href="https://i.stack.imgur.com/RFXse.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/RFXse.png"/></a></p>
</div>
<span class="comment-copy">@ImportanceOfBeingErnest Could you explain why this output is incorrect and the one from DavidG is correct? I really don't see the difference. They also don't have 43% in the first bin.</span>
<span class="comment-copy">Sorry, it seems correct. But I don't think it's useful to have arbitrarily complicated numbers on the axes, like 42.857 instead of 40.</span>
<span class="comment-copy">Both of yours are correct, but the one from @ImportanceOfBeingErnest is simpler.</span>
