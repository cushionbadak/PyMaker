<div class="post-text" itemprop="text">
<p>In my project i have code that return strings like these ones:</p>
<p><code>&lt;Thread(Thread-11, started daemon 123145310715904)&gt;</code></p>
<p><code>&lt;Thread(Thread-12, started daemon 177145310715904)&gt;</code></p>
<p><code>&lt;Thread(Thread-12, started daemon 129145310715904)&gt;</code></p>
<p>I would to extract just "Thread-11" or "Thread-12" (in practice from first ( to first , char) part but i don't know how i can achieve this in python.
I tried with Split like this:</p>
<blockquote>
<p>tsplit = mystring.split('Thread-")</p>
</blockquote>
<p>but i can return just what i wont.</p>
<p>Some help?</p>
<p>Thanks in advance
Luca</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/re.html" rel="nofollow noreferrer">regular expressions</a> for this.</p>
<p>For you example what you could do is: </p>
<pre><code>import re
pattern = "(Thread-\d+)"
text = "&lt;Thread(Thread-12, started daemon 129145310715904)&gt;"
match= re.search(pattern, text)
print(match.group(0))
</code></pre>
<p>output:</p>
<pre><code>Thread-12
</code></pre>
<p>What this does is specifying something like "Search for a string that matches the pattern <code>Thread-&lt;one or multiple numbers&gt;</code>, in the <code>text</code> string".</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to use <code>split</code>, a way can be this:</p>
<pre><code>a = '&lt;Thread(Thread-11, started daemon 123145310715904)&gt;'
p = a.split('(')[1].split(',')[0]
</code></pre>
<p>Output:</p>
<pre><code>Thread-11
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>inp = '&lt;Thread(Thread-11, started daemon 123145310715904)&gt;'
m = re.search('^.*\((.*),.*$', inp)
if m:
    print (m.group(1))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using Regex positive lookbehind:</p>
<pre><code>In [144]: s = '&lt;Thread(Thread-11, started daemon 123145310715904)&gt;'

In [145]: re.search(r'(?&lt;=\()[^,]+', s).group()
Out[145]: 'Thread-11'
</code></pre>
<ul>
<li><p><code>(?&lt;=\()</code> is zero-width positive lookbehind pattern that makes sure the match is preceded by <code>(</code></p></li>
<li><p><code>[^,]+</code> matches one or more characters that are not <code>,</code></p></li>
</ul>
<p>Same thing with grouping (without lookbehind):</p>
<pre><code>In [146]: re.search(r'\(([^,]+)', s).group(1)
Out[146]: 'Thread-11'
</code></pre>
<p>here we need to take the first captured group i.e. <code>group(1)</code> from the match object.</p>
</div>
<div class="post-text" itemprop="text">
<p>@santi there are two ways you can extract what you want.</p>
<ul>
<li>using simple split </li>
<li>using regex (the <code>re</code> module in python)</li>
</ul>
<h3>Example 1 using <code>str.split()</code></h3>
<pre><code>string = '&lt;Thread(Thread-11, started daemon 123145310715904)&gt;'
out = string.split(',')[0].split('Thread(')[1]
print(out)
</code></pre>
<h3>Example 2 using <code>re</code></h3>
<pre><code>import re
string = '&lt;Thread(Thread-11, started daemon 123145310715904)&gt;'
out = re.search(r'(Thread-\d+)', string)
print(out.group())
</code></pre>
<p>if using threads then thread name can also be printed / returned using <code>.name</code> ro <code>.getName()</code></p>
<h3>Example.</h3>
<pre><code>&gt;&gt;&gt; from threading import Thread
&gt;&gt;&gt; def somefunc():
        print('hello')
&gt;&gt;&gt; thread = Thread(target=somefunc)
&gt;&gt;&gt; thread.daemon= True
&gt;&gt;&gt; thread.start()
&gt;&gt;&gt; thread.name, thread.getName() # gives thread names directly
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use a simple regex -</p>
<pre><code>import re
word = re.search(u"[(][a-zA-Z]{6}[-]\d+[,]", "&lt;Thread(Thread-11, started daemon 123145310715904)&gt;").group(0).replace("(", "").replace(",", "")
# OP 'Thread-11'
</code></pre>
<p>Explanation of this pattern -</p>
<pre><code>[(][a-zA-Z]{6}[-]\d+[,]
[(] - match a parentheses 
[a-zA-Z]{6} - match strings, 6 occurrences 
[-] - match a hyphen
\d+[,] - match digits and then match a hyphen 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>if you know in advance the position of your element in the character string, you can use the slices:</p>
<pre><code>&gt;&gt;&gt; result = "&lt;Thread(Thread-12, started daemon 129145310715904)&gt;"
&gt;&gt;&gt; result = result[8:17]
&gt;&gt;&gt; result
'Thread-12'
</code></pre>
<p>This solution is more rigid than the others, but can be much simpler to apply depending on the need.</p>
</div>
<div class="post-text" itemprop="text">
<p>One of the way is </p>
<pre><code>str1 = '&lt;Thread(Thread-11, started daemon 123145310715904)&gt;'
import re
m = re.search('Thread-\d\d', str1)
m.group(0)
</code></pre>
</div>
<span class="comment-copy">Regular expressions could be worth looking into. <a href="https://docs.python.org/3/howto/regex.html" rel="nofollow noreferrer">docs.python.org/3/howto/regex.html</a>.  Regular expressions will help you extract a string that matches a certain pattern, for example Thread-(number) or text between specific characters.</span>
<span class="comment-copy">Looks like <a href="https://docs.python.org/3/library/functions.html#repr" rel="nofollow noreferrer">repr</a> of an object. Is <code>Thread</code> a class in your code? There might be cleaner ways to access <code>Thread-XX</code> instead of trying regex.</span>
<span class="comment-copy">Maybe clarify that this extracts anything between an opening round parenthesis and a comma.</span>
