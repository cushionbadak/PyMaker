<div class="post-text" itemprop="text">
<p>In this code:</p>
<pre><code>import concurrent.futures
import time

def pafter(t):
    time.sleep(t)
    print('Hi')

with concurrent.futures.ThreadPoolExecutor(5) as e:
    e.submit(pafter, 2)

print('With returned')
</code></pre>
<p>I expect to see:</p>
<pre><code>With returned
Hi
</code></pre>
<p>but I see:</p>
<pre><code>Hi
With returned
</code></pre>
<p>Why doesn't <code>submit</code> return immediately? What do I change to make it do so?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using the <code>with</code> statement is equivalent to calling <code>executor.shutdown()</code>, <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor.shutdown" rel="nofollow noreferrer">which is documented like this</a>:</p>
<blockquote>
<p><strong><code>shutdown(wait=True)</code></strong></p>
<p>Signal the executor that it should free any resources that it is using when the currently pending futures are done executing. Calls to Executor.submit() and Executor.map() made after shutdown will raise RuntimeError.</p>
<p><strong>If wait is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed</strong>. If wait is False then this method will return immediately and the resources associated with the executor will be freed when all pending futures are done executing. Regardless of the value of wait, the entire Python program will not exit until all pending futures are done executing.</p>
<p><strong>You can avoid having to call this method explicitly if you use the with statement, which will shutdown the Executor (waiting as if Executor.shutdown() were called with wait set to True)</strong></p>
</blockquote>
<p>The bold sections explain the behavior you're seeing; the <code>submit()</code> call does return immediately, but the <code>with</code> statement will block until all submitted work is done. To change it, you need to not use the <code>with</code> statement, and instead explicitly call <code>shutdown(wait=False)</code>.</p>
</div>
