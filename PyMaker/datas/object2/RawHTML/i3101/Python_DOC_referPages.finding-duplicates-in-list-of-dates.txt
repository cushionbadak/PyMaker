<div class="post-text" itemprop="text">
<p>I have two lists:</p>
<pre><code>x = ['2018-07-22 21:59:12.211654', '2018-07-22 22:00:12.211654', 
     '2018-07-22 22:01:12.211654', '2018-07-22 22:00:12.211654', 
     '2018-07-22 22:01:12.211654']

y = [36.37, 38.19, 40.01, 2.50, 8.99]
</code></pre>
<p>and I am trying to find duplicates in list x and if there are any, then sum values with the found duplicates index in list y. Then erase. I figured out following code:</p>
<pre><code>for i in range(len(x)):
    for j in range(i + 1, len(x)):
        if y[i] == y[j]:
            try:
                x[i] += x[j]
                x[j] = None
                y[j] = None
            except:
                pass
x = [a for a in x if a != None]
y = [a for a in y if a != None]
</code></pre>
<p>the problem is with datetime values in list x, they are being deformed. Is there a way to avoid this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can combine both lists into a list of tuples with <code>zip</code>, sort the list and group it by the first element (time), and apply the <code>sum</code> to the second elements:</p>
<pre><code>from itertools import groupby
grouped_list = groupby(sorted(zip(x,y)), key=lambda x:x[0])
new_list = [(date, sum(val for _,val in vals)) 
            for date,vals in grouped_list]
</code></pre>
<p>The result is a summed list of tuples:</p>
<pre><code>#[('2018-07-22 21:59:12.211654', 36.37), 
# ('2018-07-22 22:00:12.211654', 40.69), 
# ('2018-07-22 22:01:12.211654', 49.0)]
</code></pre>
<p>You can split this new list into x and y again:</p>
<pre><code>x_new, y_new = zip(*new_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can simply use a dict.</p>
<p>Input:    </p>
<pre><code>x = ['2018-07-22 21:59:12.211654', '2018-07-22 22:00:12.211654', 
 '2018-07-22 22:01:12.211654', '2018-07-22 22:00:12.211654', 
 '2018-07-22 22:01:12.211654']
y = [36.37, 38.19, 40.01, 2.50, 8.99]

D = {}
for index,date in enumerate(x):
    if date in D.keys():
        D[date] += y[index]
    else:
        D[date] = y[index]
</code></pre>
<p>Result:</p>
<pre><code>&gt;&gt;&gt; list(D.items())
[('2018-07-22 21:59:12.211654', 36.37), 
('2018-07-22 22:00:12.211654', 40.69), ('2018-07-22 22:01:12.211654', 49.0)]
&gt;&gt;&gt; x_new,y_new = zip(*list(D.items()))
&gt;&gt;&gt; x_new
('2018-07-22 21:59:12.211654', '2018-07-22 22:00:12.211654', '2018-07-22 22:01:12.211654')
&gt;&gt;&gt; y_new
(36.37, 40.69, 49.0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a> for an O(n) solution:</p>
<pre><code>from collections import defaultdict

d = defaultdict(float)

for date, num in zip(x, y):
    d[date] += num
</code></pre>
<p>Result:</p>
<pre><code>print(d)

defaultdict(float,
            {'2018-07-22 21:59:12.211654': 36.37,
             '2018-07-22 22:00:12.211654': 40.69,
             '2018-07-22 22:01:12.211654': 49.0})
</code></pre>
<p>If you require lists, you can use <code>zip</code> with unpacking (omit <code>map(list, ...)</code> if tuples are sufficient):</p>
<pre><code>dates, values = map(list, zip(*d.items()))

print(dates, values, sep='\n')

['2018-07-22 21:59:12.211654', '2018-07-22 22:00:12.211654', '2018-07-22 22:01:12.211654']
[36.37, 40.69, 49.0]
</code></pre>
</div>
<span class="comment-copy"><i>duplicates in list x</i> but then in your code <code>if y[i] == y[j]:</code></span>
<span class="comment-copy">I must be tired that I didnÂ´t notice, now it works! thanks</span>
<span class="comment-copy">What is your desired output?</span>
<span class="comment-copy">lists like this <code>x = ['2018-07-22 21:59:12.211654', '2018-07-22 22:00:12.211654', '2018-07-22 22:01:12.211654'] y = [36.37, 40.69, 49.0]</code></span>
<span class="comment-copy">seems pretty elegant to me, but the if statement is missing here</span>
<span class="comment-copy">There is no missing <code>if</code> statement. What do you mean?</span>
<span class="comment-copy">So how do the values <code>sum(x for _,x in v)</code> know when to sum? Because they dont when I try.</span>
<span class="comment-copy">I forgot to sort the list before grouping. See the updated answer.</span>
