<div class="post-text" itemprop="text">
<p>I'm looking for a way to create a virtual file system in Python for creating directories and files, before writing these directories and files to disk.</p>
<p>Using <a href="https://github.com/PyFilesystem/pyfilesystem" rel="nofollow noreferrer">PyFilesystem</a> I can construct a memory filesystem using the following:</p>
<pre><code>&gt;&gt;&gt; import fs
&gt;&gt;&gt; dir = fs.open_fs('mem://')
&gt;&gt;&gt; dir.makedirs('fruit')
SubFS(MemoryFS(), '/fruit')
&gt;&gt;&gt; dir.makedirs('vegetables')
SubFS(MemoryFS(), '/vegetables')
&gt;&gt;&gt; with dir.open('fruit/apple.txt', 'w') as apple: apple.write('braeburn')
... 
8
&gt;&gt;&gt; dir.tree()
├── fruit
│   └── apple.txt
└── vegetables
</code></pre>
<p>Ideally, I want to be able to do something like:</p>
<pre><code>dir.write_to_disk('&lt;base path&gt;')
</code></pre>
<p>To write this structure to disk, where <code>&lt;base path&gt;</code> is the parent directory in which this structure will be created.</p>
<p>As far as I can tell, PyFilesystem has no way of achieving this. Is there anything else I could use instead or would I have to implement this myself?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.pyfilesystem.org/en/latest/reference/copy.html#fs.copy.copy_fs" rel="nofollow noreferrer"><code>fs.copy.copy_fs()</code></a> to copy from one filesystem to another, or <a href="https://docs.pyfilesystem.org/en/latest/reference/move.html#fs.move.move_fs" rel="nofollow noreferrer"><code>fs.move.move_fs()</code></a> to move the filesystem altogether.</p>
<p>Given that PyFilesystem also abstracts around the underlying system filesystem - <a href="https://docs.pyfilesystem.org/en/latest/reference/osfs.html" rel="nofollow noreferrer"><code>OSFS</code></a> - in fact, it's the default protocol, all you need is to copy your in-memory filesystem (<a href="https://docs.pyfilesystem.org/en/latest/reference/memoryfs.html" rel="nofollow noreferrer"><code>MemoryFS</code></a>) to it and, in effect, you'll have it written to the disk:</p>
<pre><code>import fs
import fs.copy

mem_fs = fs.open_fs('mem://')
mem_fs.makedirs('fruit')
mem_fs.makedirs('vegetables')
with mem_fs.open('fruit/apple.txt', 'w') as apple:
    apple.write('braeburn')

# write to the CWD for testing...
with fs.open_fs(".") as os_fs:  # use a custom path if you want, i.e. osfs://&lt;base_path&gt;
    fs.copy.copy_fs(mem_fs, os_fs)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you just want to stage a file system tree in memory, look at the (<code>tarfile</code> module)[<a href="https://docs.python.org/3/library/tarfile.html]" rel="nofollow noreferrer">https://docs.python.org/3/library/tarfile.html]</a>.</p>
<p>Creating files and directories is a bit involved:</p>
<pre><code>tarblob = io.BytesIO()
tar = tarfile.TarFile(mode="w", fileobj=tarblob)
dirinfo = tarfile.TarInfo("directory")
dirinfo.mode = 0o755
dirinfo.type = tarfile.DIRTYPE
tar.addfile(dirinfo, None)

filedata = io.BytesIO(b"Hello, world!\n")
fileinfo = tarfile.TarInfo("directory/file")
fileinfo.size = len(filedata.getbuffer())
tar.addfile(fileinfo, filedata)
tar.close()
</code></pre>
<p>But then you can create the file system hierarchy using <code>TarFile.extractall</code>:</p>
<pre><code>tarblob.seek(0) # Rewind to the beginning of the buffer.
tar = tarfile.TarFile(mode="r", fileobj=tarblob)
tar.extractall()
</code></pre>
</div>
<span class="comment-copy">Woah I didn't expect something so simple! Thanks</span>
<span class="comment-copy">Good answer. <code>copy_fs</code> accepts FS objects and FS URLs, so the following would also work: <code>fs.copy.copy_fs(mem_fs, '.')</code></span>
