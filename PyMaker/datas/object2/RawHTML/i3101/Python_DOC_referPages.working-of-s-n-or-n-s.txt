<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/240178/list-of-lists-changes-reflected-across-sublists-unexpectedly">List of lists changes reflected across sublists unexpectedly</a>
<span class="question-originals-answer-count">
                    12 answers
                </span>
</li>
</ul>
</div>
<p>In <a href="https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range" rel="nofollow noreferrer">the Python documentation</a> it is explained that <code>s * n</code> or <code>n * s</code> means items in the sequence s are not copied; they are referenced multiple times. I am able to get that theoretically but unable to understand the example they have given:</p>
<pre><code>&gt;&gt;&gt; lists = [[]] * 3
&gt;&gt;&gt; lists
[[], [], []] # Output
&gt;&gt;&gt; lists[0].append(3) 
&gt;&gt;&gt; lists
[[3], [3], [3]] # Output
</code></pre>
<p>I am confused because if we do the similar thing with strings, it behaves differently as:</p>
<pre><code>list_of_str = (["str"] * 3)
print(list_of_str)
list_of_str[0] = "str_1"
print(list_of_str)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your example is not doing the same thing as theirs, because <code>list_of_str[0] = anything</code> would just replace the first entry in the list altogether. It does not matter whether that is a copy or a unique instance.</p>
<p>For a better example, you'd need something like <code>list_of_str[0][0] = 'S'</code> to modify the string itself. But you can't do that, because strings in Python are immutable.</p>
<p>If you want to show conclusively that the entries are referring to the same string, use the <code>id</code> function:</p>
<pre><code>&gt;&gt;&gt; list_of_str = (["str"] * 3)
&gt;&gt;&gt; print(list(map(id, list_of_str)))
[140243211229088, 140243211229088, 140243211229088]
</code></pre>
</div>
<span class="comment-copy">You're not doing the same thing in the two code snippets.</span>
<span class="comment-copy">You aren't doing a similar thing with strings. They're <i>immutable</i>, you're replacing a single item within the outer list. If you did <code>lists[0] = [3]</code> you'd see similar behaviour.</span>
<span class="comment-copy">Lists are mutable. Strings are not. <code>lists[0] = ...</code> is not the same thing as <code>lists[0].append(...)</code>; the latter mutates the object on which you call the method, the former <b>replaces the reference</b>.</span>
<span class="comment-copy">You may find this article helpful: <a href="http://nedbatchelder.com/text/names.html" rel="nofollow noreferrer">Facts and myths about Python names and values</a>, which was written by SO veteran Ned Batchelder.</span>
<span class="comment-copy">See <a href="https://nedbatchelder.com/text/names.html" rel="nofollow noreferrer">nedbatchelder.com/text/names.html</a>, and <a href="http://www.pythontutor.com/visualize.html#code=lists%20%3D%20%5B%5B%5D%5D%20%2A%203%0Alists%5B0%5D.append%283%29%20%0A%0Alist_of_str%20%3D%20%5B%22str%22%5D%20%2A%203%0Alist_of_str%5B0%5D%20%3D%20%22str_1%22&amp;cumulative=false&amp;curInstr=0&amp;heapPrimitives=true&amp;mode=display&amp;origin=opt-frontend.js&amp;py=3&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" rel="nofollow noreferrer">this visualisation</a>.</span>
<span class="comment-copy">This is also explained in the duplicate. I would appreciate if you pinged me when just un-hammering? I've re-closed this post; feel free to ping me in the <a href="https://chat.stackoverflow.com/rooms/info/6/python">Python chat room</a> if you want to discuss this further.</span>
<span class="comment-copy">@MartijnPieters Sorry, I thought I was merely voting and forgot about my Python superpowers. I don't see this exact question or answer on the duplicate, but never mind.</span>
<span class="comment-copy"><a href="//stackoverflow.com/a/43246520">List of lists changes reflected across sublists unexpectedly</a> covers this situation pretty well.</span>
<span class="comment-copy">Thanks alot Martijin</span>
