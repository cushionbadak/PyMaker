<div class="post-text" itemprop="text">
<pre><code>import typing
type(typing.cast(int, '11'))
</code></pre>
<p>still returns <code>&lt;class 'str'&gt;</code> instead of <code>int</code>. Then, what does <code>typing.cast</code> do here? </p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/library/typing.html#typing.cast" rel="nofollow noreferrer">the documentation</a> (emphasis mine):</p>
<blockquote>
<p>Cast a value to a type.</p>
<p><strong>This returns the value unchanged.</strong> To the type checker this signals that the return value has the designated type, but at runtime we intentionally donâ€™t check anything (we want this to be as fast as possible).</p>
</blockquote>
<p>The "casting" only takes place in the type-checking system, not in reality.</p>
</div>
<span class="comment-copy">What it says it does: <a href="https://docs.python.org/3/library/typing.html#typing.cast" rel="nofollow noreferrer">docs.python.org/3/library/typing.html#typing.cast</a></span>
<span class="comment-copy">To actually convert the string <code>"11"</code> to an int, use <code>int('11')</code> or <code>int('11', 2)</code> if you want to use a non-decimal base ( '11' in base 2 is the same as '3' in base 10).</span>
<span class="comment-copy">Thanks for the pointer! What changes are made if this doesn't change the actual value?</span>
<span class="comment-copy">@Craig: <a href="https://www.python.org/dev/peps/pep-0484/#casts" rel="nofollow noreferrer">This part</a> of PEP 484 may be helpful. <code>Casts differ from type comments (see the previous section). When using a type comment, the type checker should still verify that the inferred type is consistent with the stated type. When using a cast, the type checker should blindly believe the programmer. Also, casts can be used in expressions, while type comments only apply to assignments.</code></span>
