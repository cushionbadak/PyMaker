<div class="post-text" itemprop="text">
<p>I have a tuple like</p>
<pre><code>a = (1,2,3,4). 
</code></pre>
<p>Is it possible to change the tuple to </p>
<pre><code>a = [('roll', 1),('roll',2),('roll', 3),('roll', 4)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simple list comprehension here -</p>
<pre><code>a = [("roll", i) for i in a]
</code></pre>
<p>OP </p>
<pre><code>[('roll', 1), ('roll', 2), ('roll', 3), ('roll', 4)]
</code></pre>
<p>More about list comprehension <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Yes</strong> - simply do a <a href="https://www.pythonforbeginners.com/lists/list-comprehensions-in-python/" rel="nofollow noreferrer">list comprehension</a>: </p>
<pre><code>a = [('roll', i) for i in a]
</code></pre>
<p>Note that doing this will <em>rebind</em> <code>a</code>! (See the note by @ShadowRanger.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Easily. With <a href="https://docs.python.org/3/howto/functional.html#generator-expressions-and-list-comprehensions" rel="nofollow noreferrer">a list comprehension</a>:</p>
<pre><code>a = [("roll", x) for x in a]
</code></pre>
<p>or <a href="https://docs.python.org/3/library/itertools.html#itertools.repeat" rel="nofollow noreferrer">with <code>itertools</code> stuff</a>:</p>
<pre><code>import itertools

a = list(zip(itertools.repeat('roll'), a))  # No need to wrap in list if you'll iterate the result and discard it
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also use <code>map</code> function:</p>
<pre><code>i = (1,2,3,4)
list(map(lambda x: ('roll',x), i))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Or another alternative using list()</p>
<pre><code> list(zip(["roll"]*4, a))
</code></pre>
</div>
<span class="comment-copy">One does not simply "change the tuple." You can change the value of the name <code>a</code> to be the appropriate tuple, but tuples are immutable and cannot themselves be changed. In other words, you change <code>a</code>, not the tuple.</span>
<span class="comment-copy">@nikolas your welcome, do see the edited answer</span>
<span class="comment-copy">Technically, it <i>rebinds</i> <code>a</code>; if <code>a</code> is aliased elsewhere under a different name, that alias is unchanged (e.g. <code>b = a; a = [('roll', i) for i in a]</code> will preserve the original value of <code>a</code>, accessible through the <code>b</code> alias). Subtle distinction, but important in some cases. Since <code>a</code> is initially bound to a <code>tuple</code>, it's not possible to mutate the <code>tuple</code> itself.</span>
<span class="comment-copy">Thanks, @ShadowRanger! That's very informative - I've edited my answer to reflect that. Thanks again!</span>
<span class="comment-copy">Note: Any use of <code>map</code> that requires a <code>lambda</code> to work is more efficiently and more clearly expressed as a list comprehension or generator expression, since the listcomp/genexpr can inline the work done in the <code>lambda</code>, avoiding (relatively expensive) function call overhead for trivial work.</span>
