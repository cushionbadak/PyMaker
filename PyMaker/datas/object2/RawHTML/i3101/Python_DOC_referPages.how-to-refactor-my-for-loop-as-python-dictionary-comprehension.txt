<div class="post-text" itemprop="text">
<p>I am using Python 3.6. I wrote following code, it's a for loop:</p>
<p><strong>Edit</strong>: I made a mistake when I wrote var l down, so I re-type it here. Thanks for @Ender Look ！！</p>
<pre><code>l = [['a','1'], ['a','2'], ['a','3']]
d = {}
for i in l:
    d[i[0]] = d.get(i[0], '') + '\t' + i[1]
print (d)
</code></pre>
<p>So, the result is what I want:
<strong>{'a': '\t1\t2\t3'}</strong></p>
<p>Then I refactor above code as comprehension:</p>
<p><code>
dict2 = {}
dict2 = {i[0]: dict2.get(i[0], '') + '\t' + i[1] for i in l}
print(dict2)
</code></p>
<p>I though they should return same output. But the dict2 is:</p>
<p><strong>{'a': '\t3'}</strong></p>
<p>I want to know what's the matter with my dict comprehension? Thanks a lot!</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't necessarily <em>need</em> to use a comprehension here. You can make use of <code>defaultdict</code> from <a href="https://docs.python.org/3/library/collections.html#defaultdict-examples" rel="noreferrer">collections</a>:</p>
<pre><code>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(str)
&gt;&gt;&gt; for li in l:
...  d[li[0]] += f'\t{li[1]}'
...
&gt;&gt;&gt; d
defaultdict(&lt;class 'str'&gt;, {'a': '\t1\t2'})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your dictionary comprehension doesn't work because it's use <code>.get</code> on itself.</p>
<pre><code>dict2 = {i[0]: dict2.get(i[0], '') + '\t' + i[1] for i in l}
</code></pre>
<p>Until the end of the whole dictionary comprehension, this new dictionary isn't assigned to your actual <code>dict2</code> variable. So all the times your comprehension tries to retrieve the value from <code>dict2.get(...)</code> it always executes that function from the empty dictionary <code>dict2 = {}</code>.</p>
<p>Sadly, I don't know (and I don't think it exists) a way to use <code>.get</code> on a dictionary comprehension about itself, because the variable <code>dict2</code> isn't updated on "real time" (it wait until the end the comprehension). Or at least that I have understood, my humble knowledge isn't perfect.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, you can do it as a single dict comprehension.</p>
<pre><code>{k: v
 for d in [{}]
 for k, v in [d.__setitem__(k, d.get(k, '') + '\t' + v) or d 
              for k, v in [['a','1'], ['a','2'], ['a','3']]][-1].items()}
</code></pre>
<p>You shouldn't.</p>
<p>Note how we had to create a reference to an inner dict <code>d</code> anyway, since your algorithm has to look things up in the dict <em>as it's being constructed</em>. What is the outer comprehension even <em>for</em>? And we're throwing away all but the last element of the inner list comp.</p>
<p>It's much clearer to use a normal for loop like this,</p>
<pre><code>d = {}
for k, v in [['a','1'], ['a','2'], ['a','3']]:
    d[k] = d.get(k, '') + '\t' + v
</code></pre>
<p>Use the right tool for the job.</p>
</div>
<span class="comment-copy">Your first code produce as output: <code>{'a': '\t1\t2'}</code> not <code>{'a': '\t1\t2\t3'}</code> as you said.</span>
<span class="comment-copy">No. In your second example <code>dict2</code> is always the empty dict.</span>
<span class="comment-copy">@Ender Look Opps! When I wrote my code here, I made some mistakes. I will edit it! Thanks!</span>
<span class="comment-copy">@juanpa.arrivillaga I tried again, the output is still {'a': '\t3'}.</span>
<span class="comment-copy">Did I misunderstand the question? Why the downvote?</span>
<span class="comment-copy">@U9-Forward I disagree with that being a reason do downvote someone. Providing a different solution is perfectly acceptable. Especially when there is a perfectly fine alternative.</span>
<span class="comment-copy">Yeah that's why i didn't downvote</span>
<span class="comment-copy">Wonderful elusidation! Thanks a lot!</span>
<span class="comment-copy">Very helpful! I learn much from you. I appreciate it. But I want to know if my list l is a very large object. Would the loop reduce the efficiency?</span>
<span class="comment-copy">@ywan would which loop reduce the efficiency compared to what?</span>
