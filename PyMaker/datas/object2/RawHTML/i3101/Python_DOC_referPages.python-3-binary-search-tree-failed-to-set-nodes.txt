<div class="post-text" itemprop="text">
<p>so I have been working on this class project implementing a binary search tree. The professor wants us to make the private recursive while make the public one simple. (like when to insert_element(50), it calls a private function recursive_insert(50, self.__root) to solve).</p>
<p>My insertion function runs for no error yet the test case always return empty, and here are my codes for the private functions:</p>
<pre><code>class Binary_Search_Tree:


 class __BST_Node:

 def __init__(self, value):
  self.value = value
  self.left=None   
  self.right=None

def __init__(self):
  self.__root = None
  self.__height=0
  self.__size=0

def _in_order_str(self, root):
  if root is None:
    outcome= "[ ]"
  elif self.__size==1:
    outcome = "[ " + str(root.value) + " ]"
  else:
    outcome = "[ "
    self._in_order_str(root.left)
    outcome += str(root.value) +", "
    self._in_order_str(root.right)
    outcome+= " ]"
  return outcome

def _recur_ins(self, val,root):
  if root is None:
    root=Binary_Search_Tree.__BST_Node(val)
  elif root.value&gt;val:
    root.left = _recur_ins(val,root.left) #do I need self here?
  elif root.value &lt;val:
    root.right = _recur_ins(val,root.right)
  return root
</code></pre>
<p>And this one is for the public:</p>
<pre><code>def insert_element(self, value):
  self._recur_ins(value,self.__root)
  self.__size+=1 
</code></pre>
<p>My Test Case:</p>
<pre><code>  def test_insertion_from_empty(self):
    root=None
    self.__bst.insert_element(50)
    self.__bst.insert_element(30)
    self.__bst.insert_element(70)
    self.assertEqual('[ 30, 50, 70 ]', self.__bst.in_order())
</code></pre>
<p>UPDATE: I think the problem comes from my <code>_in_order_str(self, root):</code> method. The general case I found online is:</p>
<pre><code>def inorder(root):
    if root is not None:
        inorder(root.left)
        print root.key
        inorder(root.right)
</code></pre>
<p>I know this could be a very silly question, but I really failed to figure it our by myself. Any help will be appreciated so thank you so much!!!</p>
</div>
<div class="post-text" itemprop="text">
<p>After changing your code as little as possible, I think I have managed to get it working.</p>
<pre><code>from pprint import pprint  # For debugging

class Binary_Search_Tree:
    class __BST_Node:
        def __init__(self, value):
            self.value = value
            self.left = None
            self.right = None

    def __init__(self):
        self.__root = None
        self.__height = 0
        self.__size = 0

    def __in_order_str(self, root):
        if root is None:
            outcome = "[ ]"
        elif self.__size == 1:
            outcome = "[ " + str(root.value) + " ]"
        else:
            outcome = "[ "
            self.__in_order_str(root.left)
            outcome += str(root.value) + ", "
            self.__in_order_str(root.right)
            outcome += " ]"
        return outcome

    def __recur_ins(self, val, root):
        if root is None:
            root = Binary_Search_Tree.__BST_Node(val)
        elif root.value &gt; val:
            root.left = self.__recur_ins(val, root.left)
        elif root.value &lt; val:
            root.right = self.__recur_ins(val, root.right)
        return root

    def insert_element(self, value):
        self.__root = self.__recur_ins(value, self.__root)
        self.__size += 1

    def test_insertion_from_empty(self):
        self.insert_element(50)
        self.insert_element(60)
        self.insert_element(70)
        # self.assertEqual('[ 30, 50, 70 ]', self.__bst.in_order())


test = Binary_Search_Tree()
test.test_insertion_from_empty()
pprint(vars(test))
</code></pre>
<p>Notes on the changes:</p>
<ul>
<li><p>changed some functions(_recur_ins, _in_order_str) from using '_' to '__' to make them private functions. I did it based on <a href="https://docs.python.org/3/tutorial/classes.html#tut-private" rel="nofollow noreferrer">Python Official Documentation</a>, private functions use at least two leading underscores and at most one trailing underscore.</p></li>
<li><p>First line in insert_element, added 'self.__root= ' so that the returned root value will be stored as the new root</p></li>
<li>Added 'self.' in front of '__recur_ins', since as far as I know, you must use self whenever you need to call a function which is located at the same class.</li>
<li>I did not modify anything much in __in_order_str, since I think the author only asked for the insertion (?)</li>
<li>commented assertEqual, since no function is provided in the question (?)</li>
<li>Modified the spaces so that it can be more readable</li>
</ul>
<p>If I put the debug mode right before I dumped the variable, this is what I get:
<a href="https://i.stack.imgur.com/Tx911.png" rel="nofollow noreferrer"><img alt="Debug Result" src="https://i.stack.imgur.com/Tx911.png"/></a></p>
<p>Which I think should be correct. 50 is inserted first, thus it is used as the root, then 60 is inserted on the right child of 50, and 70 is put on the right child of 60.</p>
<p>Note: I'm also just a novice, please tell me any mistakes that I have done and I will rectify it :)</p>
</div>
<span class="comment-copy">Your <code>_in_order_str()</code> method recursively calls itself for the subtrees - and completely ignores their return values.  How were you expecting that to work?</span>
<span class="comment-copy">Remarks on your Python style: please use 4 spaces to indent. Python is almost unreadable with only 1 or 2 spaces; it becomes very difficult to tell what blocks are where. Additionally, spaces between operators and function arguments are important for readability.</span>
<span class="comment-copy">@jasonharper Can you specify on how I ignore the return values? Thank you so much! ( I saw the general implementation in-order str online, so I tried to modify it to fit my professor's requirement: "[ ]" for empty tree, "[ 1 ]" for one value and "[ 1, 2, 3 ]" for the others</span>
<span class="comment-copy">@ggorlen Thank you for the notice! This assignment's indention style is restricted by the professor but i will definitely watch out on that and spacing when I'm writing my own code!</span>
<span class="comment-copy">@jasonharper I have figured it out! Thank you so much!</span>
<span class="comment-copy">Thank you so much for the debug! I think you are right!  Since the insertion method supposes to be correct, I think the problem actually comes from the <code>in_order_str</code>.</span>
<span class="comment-copy">I mean to say your correction (especially 2 and 3) got my root updated! Now I just need to work on the <code>__in_order_str()</code> to print it correctly. Thank you so much!</span>
