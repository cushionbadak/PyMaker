<div class="post-text" itemprop="text">
<p>I'm new to python. Please anyone help me to understand this statement of python. How it will work ?</p>
<pre><code>  {x: {y: 0. for y in myClass.features} for x in myClass.items}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Basically what it do is to create a nested dictionary with all values equal to 0.0</p>
<pre><code>class myClassrino:
    def __init__(self):
        self.features=[1,2,3,4,5]
        self.items=[3,4,5,6]

myClass=myClassrino()
output={x: {y: 0. for y in myClass.features} for x in myClass.items}
print(output)
</code></pre>
<p>Output is:</p>
<pre><code>{3: {1: 0.0, 2: 0.0, 3: 0.0, 4: 0.0, 5: 0.0}, 4: {1: 0.0, 2: 0.0, 3: 0.0, 4: 0.0, 5: 0.0}, 5: {1: 0.0, 2: 0.0, 3: 0.0, 4: 0.0, 5: 0.0}, 6: {1: 0.0, 2: 0.0, 3: 0.0, 4: 0.0, 5: 0.0}}
</code></pre>
<p>Feel free to post anything you are still unclear..</p>
</div>
<div class="post-text" itemprop="text">
<p>Just give it a try.</p>
<pre><code>{x: {y: 0. for y in [1,2,3]} for x in ['a','b','c']}
</code></pre>
<p>=</p>
<pre><code>{'a': {1: 0.0, 2: 0.0, 3: 0.0}, 'b': {1: 0.0, 2: 0.0, 3: 0.0}, 'c': {1: 0.0, 2: 0.0, 3: 0.0}}
</code></pre>
<p>Then ones can have some feeling about it from the output.</p>
<hr/>
<p>To be easier, you can decompose it:</p>
<pre><code>{y: 0. for y in [1,2,3]}
</code></pre>
<p>=</p>
<pre><code>{1: 0.0, 2: 0.0, 3: 0.0}
</code></pre>
<p>after substitution, we have</p>
<pre><code>{x: {1: 0.0, 2: 0.0, 3: 0.0} for x in ['a','b','c']}
</code></pre>
<p>final answer =</p>
<pre><code>{'a': {1: 0.0, 2: 0.0, 3: 0.0}, 'b': {1: 0.0, 2: 0.0, 3: 0.0}, 'c': {1: 0.0, 2: 0.0, 3: 0.0}}
</code></pre>
<hr/>
<p>Now you only need to replace</p>
<pre><code>[1,2,3] and ['a','b','c']
</code></pre>
<p>to</p>
<pre><code>myClass.features and myClass.items
</code></pre>
<p>Both are implicitly declared by defining them.</p>
<hr/>
<p>Sorry for my poor expression.</p>
</div>
<span class="comment-copy">Can you please post some code preceding this line of code</span>
<span class="comment-copy">It's not a for-loop, but a (nested) dict comprehension. See e.g.: <a href="https://www.python.org/dev/peps/pep-0274/" rel="nofollow noreferrer">python.org/dev/peps/pep-0274</a> or <a href="https://stackoverflow.com/questions/14507591/python-dictionary-comprehension" title="python dictionary comprehension">stackoverflow.com/questions/14507591/â€¦</a></span>
<span class="comment-copy">thank you. y : 0 here : is equal to assignment operator  or what ?</span>
<span class="comment-copy">@y : 0 equal to d[y]=0, you can check it out here. <a href="https://docs.python.org/3/library/stdtypes.html#mapping-types-dict" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#mapping-types-dict</a></span>
<span class="comment-copy">okay. now got it. Thank you very much</span>
<span class="comment-copy">Consider accept the answer by clicking the check on the left of question, it will remove the this from review queue, save other moderators time and distribute the points around.</span>
<span class="comment-copy">Thank you. You explained very well</span>
