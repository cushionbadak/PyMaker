<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/9284350/why-does-1-in-1-0-true-evaluate-to-false">Why does (1 in [1,0] == True) evaluate to False? [duplicate]</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>I noticed the following strange behavior:</p>
<pre><code>'a' in 'a' == True # Returns False
('a' in 'a') == True # Returns True
'a' in ('a' == True) # throws TypeError
</code></pre>
<p>How is the first expression parsed? Both placements of parentheses yield different results.
(Python 3.6)</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">the docs</a>:</p>
<blockquote>
<p>Note that comparisons, membership tests, and identity tests, all have the same precedence and have a left-to-right chaining feature as described in the <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow noreferrer">Comparisons</a> section.</p>
</blockquote>
<p><code>in</code> and <code>==</code> are membership and comparison operators respectively.</p>
<p>From Comparisons:</p>
<blockquote>
<p>... expressions like <code>a &lt; b &lt; c</code> have the interpretation that is conventional in mathematics:</p>
<p>[...]</p>
<p>Comparisons can be chained arbitrarily, e.g., <code>x &lt; y &lt;= z</code> is equivalent to <code>x &lt; y and y &lt;= z</code>, except that <code>y</code> is evaluated only once (but in both cases <code>z</code> is not evaluated at all when <code>x &lt; y</code> is found to be false).</p>
</blockquote>
</div>
<span class="comment-copy">The relevant phrase is "chained comparison"; there are lots of Q/A pairs already on the site, but it's hard to know what phrase to google first.</span>
<span class="comment-copy">@BradSolomon: the first <i>does</i> return True.  But it's a chained comparison, so <code>'a' in 'a' == True</code> is exactly the same as <code>('a' in 'a') and ('a' == True)</code>, which is <code>True and False</code>, which is False.  This is covered in the relevant section of the docs.</span>
<span class="comment-copy">Why <code>'a' in 'a' == True</code> is false?</span>
<span class="comment-copy">@RafaelC: Because <code>'a' == True</code> is false.</span>
<span class="comment-copy">@RafaelC Because you can't evaluate a String to a Boolean</span>
<span class="comment-copy">If it only has to do with operator precedence, shouldn't two of the three statements (either 1 and 2 or 1 and 3)  evaluate to the same answer?</span>
<span class="comment-copy">@RafaelC: It's no different than <code>a &lt; b &lt; c</code> except that it uses different operators.</span>
