<div class="post-text" itemprop="text">
<p>my function return a dict <code>{1: 10.0, 2: 9.0, 3: 2.5}</code></p>
<p>so i did try <code>a = {1: 10.0, 2: 9.0, 3: 2.5}</code></p>
<pre><code>for i in a.keys()
    prin min(i)
</code></pre>
<p>but getting</p>
<pre><code>TypeError: 'int' object is not iterable
</code></pre>
<p>can someone explain me how can I get a value that is minimal in this dict?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are getting this -</p>
<pre><code>TypeError: 'int' object is not iterable
</code></pre>
<p>Because <code>min</code> expects an iterable. Look at the <a href="https://docs.python.org/3/library/functions.html#min" rel="nofollow noreferrer">docs</a></p>
<p>But <code>for i in a.keys()</code> gives you <code>int</code> and you can not iterate over an <code>int</code> object. Pass a list like -</p>
<pre><code>min(a) or min(a.values()) # depending on your requirement
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One of these should do it</p>
<pre><code>def min_value(d):
    return min(d.values())

def min_key(d):
    return min(d)

def key_of_min_value(d):
    return min(d.items(), key=lambda pair: pair[1])[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sure, you are trying to get the min value of an int.</p>
<p>In fact in your code you're doing:</p>
<pre><code>for 1 in a:
    print min(1)
</code></pre>
<p>you must insert the dictionary and not its value in the <code>min</code> function (which takes an iterable argument)</p>
<p>so you can do:</p>
<pre><code>&gt;&gt;&gt; a = {1: 10.0, 2: 9.0, 3: 2.5}
&gt;&gt;&gt; min(a)
1
</code></pre>
<p>But in fact you pass the keys arguments.</p>
<p>If you want the <code>min</code> value of the dict values, you should do:</p>
<pre><code>&gt;&gt;&gt; a = {1: 10.0, 2: 9.0, 3: 2.5}
&gt;&gt;&gt; min(a.values())
2.5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want the key for the minimum value, <code>min</code> takes a <code>key</code> function which is used for the comparison. You can pass a lambda which will compare values instead of keys:</p>
<pre><code>key_for_minimum_value = min(key for key, value in a.items(),
                            key=lambda (key, value): value)
</code></pre>
<p>Or, more tersely, and using a dictionary lookup instead (which may be slightly less efficient):</p>
<pre><code>key_for_minimum_value = min(a, key=a.get)
</code></pre>
</div>
<span class="comment-copy"><code>print(min(a.values()))</code> ?</span>
<span class="comment-copy">The minimum key or the minimum value?</span>
<span class="comment-copy">What does <a href="https://docs.python.org/3/library/functions.html#min" rel="nofollow noreferrer"><b><code>min</code></b></a> expect as a parameter?</span>
<span class="comment-copy">Stop to thinking about what the code is doing. You are iterating over the keys, so <code>i</code> will have a starting value of, say, <code>1</code>. Then, you are doing <code>min(i)</code> which translates to <code>min(1)</code>. What do you expect <code>min(1)</code> to return?</span>
<span class="comment-copy">@PeterWood, right, edited</span>
