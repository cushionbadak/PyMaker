<div class="post-text" itemprop="text">
<p>How can I set the option <code>expire_on_commit=False</code> only for the current session in Flask-SQLAlchemy?</p>
<p>I can set the option at the inizialization of the <code>SQLAlchemy</code> object with:</p>
<pre><code>db = SQLAlchemy(app, session_options={"expire_on_commit": False})
</code></pre>
<p>but in this way all sessions created by Flask-SQLAlchemy will have the option set to False, instead i want to set it only for one session.</p>
<p>I tried <code>db.session.expire_on_commit = False</code> but it does not seem to have any effect.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>expire_on_commit</code> is a parameter to the <a href="http://docs.sqlalchemy.org/en/latest/orm/session_api.html?highlight=expire_on_commit#sqlalchemy.orm.session.Session" rel="nofollow noreferrer"><code>sqlalchemy.orm.session.Session</code></a> class.</p>
<p>The preferred method of acquiring a <code>Session</code> instance, is through the <a href="http://docs.sqlalchemy.org/en/latest/orm/session_api.html?highlight=expire_on_commit#sqlalchemy.orm.session.sessionmaker" rel="nofollow noreferrer"><code>sqlalchemy.orm.session.sessionmaker</code></a> class. Instances of <code>sessionmaker</code> are configured with settings that will be used to create <code>Session</code> instances. E.g.:</p>
<pre><code>&gt;&gt;&gt; from sqlalchemy import create_engine
&gt;&gt;&gt; from sqlalchemy.orm import sessionmaker
&gt;&gt;&gt; engine = create_engine('sqlite:///:memory:')
&gt;&gt;&gt; Session = sessionmaker(bind=engine)
&gt;&gt;&gt; type(Session)
&lt;class 'sqlalchemy.orm.session.sessionmaker'&gt;
&gt;&gt;&gt; session = Session()
&gt;&gt;&gt; type(session)
&lt;class 'sqlalchemy.orm.session.Session'&gt;
</code></pre>
<p>So, calling a <code>sessionmaker</code> instance returns a <code>Session</code> instance.</p>
<p>With this configuration, each time we call our <code>sessionmaker</code> instance, we get a <em>new</em> <code>Session</code> instance back each time.</p>
<pre><code>&gt;&gt;&gt; session1 = Session()
&gt;&gt;&gt; session2 = Session()
&gt;&gt;&gt; session1 is session2
False
</code></pre>
<p>A <a href="http://docs.sqlalchemy.org/en/latest/orm/contextual.html#sqlalchemy.orm.scoping.scoped_session" rel="nofollow noreferrer"><code>scoped_session</code></a> changes the above behaviour:</p>
<pre><code>&gt;&gt;&gt; from sqlalchemy.orm import scoped_session
&gt;&gt;&gt; Session = scoped_session(sessionmaker(bind=engine))
&gt;&gt;&gt; type(Session)
&lt;class 'sqlalchemy.orm.scoping.scoped_session'&gt;
&gt;&gt;&gt; session1 = Session()
&gt;&gt;&gt; session2 = Session()
&gt;&gt;&gt; session1 is session2
True
</code></pre>
<p>This is what Flask-SQLAlchemy uses 'under the hood' (and why @CodeLikeBeaker's comment directing you to the Session API was valid). It means that every time you call <code>db.session</code> when handling a <code>request</code> you are using the <em>same</em> underlying session. Here's the same example as above but using the <code>Flask-SQLAlchemy</code> extension.</p>
<pre><code>&gt;&gt;&gt; type(db.session)
&lt;class 'sqlalchemy.orm.scoping.scoped_session'&gt;
&gt;&gt;&gt; session1 = db.session()
&gt;&gt;&gt; session2 = db.session()
&gt;&gt;&gt; session1 is session2
True
</code></pre>
<p>Notice that <code>type(db.session)</code> in this example yields the exact same result as <code>type(Session)</code> in the previous example.</p>
<blockquote>
<p>all sessions created by Flask-SQLAlchemy will have the option set to
  False, instead i want to set it only for one session.</p>
</blockquote>
<p>Given the fact that Flask-SQLAlchemy only creates one session per request, I take this to mean that you sometimes want a session to <code>expire_on_commit</code> and sometimes not, when handling a request.</p>
<p>One way that you can achieve that is by using a <a href="https://docs.python.org/3/reference/datamodel.html#with-statement-context-managers" rel="nofollow noreferrer">context manager</a> to temporarily turn <code>expire_on_commit</code> off:</p>
<pre><code>@contextmanager
def no_expire():
    s = db.session()
    s.expire_on_commit = False
    yield
    s.expire_on_commit = True
</code></pre>
<p>And here is my test model:</p>
<pre><code>class Person(db.Model):

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(16))
</code></pre>
<p>Configure logging to see what <code>SQLAlchemy</code> is doing:</p>
<pre><code>import logging
logging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)
logging.basicConfig(level=logging.INFO)
</code></pre>
<p>Create some test data:</p>
<pre><code>db.drop_all()
db.create_all()
names = ('Jane', 'Tarzan')
db.session.add_all([Person(name=n) for n in names])
db.session.commit()
</code></pre>
<p>This is the function I've used for testing:</p>
<pre><code>def test_func():
    # query the db
    people = Person.query.all()
    # commit the session
    db.session.commit()
    # iterate through people accessing name to see if sql is emitted
    for person in people:
        print(f'Person is {person.name}')
    db.session.rollback()
</code></pre>
<p>The I run the test function once without the context manager:</p>
<pre><code>test_func()
</code></pre>
<p>Here is the stdout:</p>
<pre><code>INFO:sqlalchemy.engine.base.Engine:BEGIN (implicit)
INFO:sqlalchemy.engine.base.Engine:SELECT person.id AS person_id, person.name AS person_name
FROM person
INFO:sqlalchemy.engine.base.Engine:{}
INFO:sqlalchemy.engine.base.Engine:COMMIT
INFO:sqlalchemy.engine.base.Engine:BEGIN (implicit)
INFO:sqlalchemy.engine.base.Engine:SELECT person.id AS person_id, person.name AS person_name
FROM person
WHERE person.id = %(param_1)s
INFO:sqlalchemy.engine.base.Engine:{'param_1': 1}
*****Person is Jane*****
INFO:sqlalchemy.engine.base.Engine:SELECT person.id AS person_id, person.name AS person_name
FROM person
WHERE person.id = %(param_1)s
INFO:sqlalchemy.engine.base.Engine:{'param_1': 2}
*****Person is Tarzan*****
</code></pre>
<p>It can be seen that after the commit, sql is reissued to refresh the object attributes. </p>
<p>And once using the context manager:</p>
<pre><code>db.session.rollback()
with no_expire():
    test_func()
</code></pre>
<p>And here is stdout with the context manager:</p>
<pre><code>INFO:sqlalchemy.engine.base.Engine:ROLLBACK
INFO:sqlalchemy.engine.base.Engine:BEGIN (implicit)
INFO:sqlalchemy.engine.base.Engine:SELECT person.id AS person_id, person.name AS person_name
FROM person
INFO:sqlalchemy.engine.base.Engine:{}
INFO:sqlalchemy.engine.base.Engine:COMMIT
*****Person is Jane*****
*****Person is Tarzan*****
</code></pre>
</div>
<span class="comment-copy">Have you tried the Session API? <a href="http://docs.sqlalchemy.org/en/latest/orm/session_api.html" rel="nofollow noreferrer">docs.sqlalchemy.org/en/latest/orm/session_api.html</a></span>
<span class="comment-copy">I'm using the <code>Flask-SQLAlchemy</code> module that creates the session automatically at the request start, not vanilla <code>SQLAlchemy</code></span>
