<div class="post-text" itemprop="text">
<p>I am trying to write a function which takes the file and split it with the new line and then again split it using comma delimiter(,) after that I want to convert each string inside that list to integers using only list comprehension</p>
<pre><code># My code but it's not converting the splitted list into integers.
def read_csv(filename):
    string_list = open(filename, "r").read().split('\n')
    string_list = string_list[1:len(string_list)]
    splitted = [i.split(",") for i in string_list]
    final_list = [int(i) for i in splitted]
    return final_list

read_csv("US_births_1994-2003_CDC_NCHS.csv")

Output:
TypeError: int() argument must be a string, a bytes-like object or a number, not 'list' 
</code></pre>
<blockquote>
<p>How the data looks after splitting with comma delimiter(,)</p>
</blockquote>
<pre><code>us = open("US_births_1994-2003_CDC_NCHS.csv", "r").read().split('\n')
splitted = [i.split(",") for i in us]
print(splitted)

Output:
 [['year', 'month', 'date_of_month', 'day_of_week', 'births'],
 ['1994', '1', '1', '6', '8096'],
 ['1994', '1', '2', '7', '7772'],
 ['1994', '1', '3', '1', '10142'],
 ['1994', '1', '4', '2', '11248'],
 ['1994', '1', '5', '3', '11053'],
 ['1994', '1', '6', '4', '11406'],
 ['1994', '1', '7', '5', '11251'],
 ['1994', '1', '8', '6', '8653'],
 ['1994', '1', '9', '7', '7910'],
 ['1994', '1', '10', '1', '10498']]
</code></pre>
<p>How do I convert each string inside this output as integers and assign it to a single list using <strong>list comprehension</strong>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>str.split()</code> produces a new list; so <code>splitted</code> is a list of lists. You'd want to convert the contents of each contained list:</p>
<pre><code>[[int(v) for v in row] for row in splitted]
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; csvdata = '''\
... year,month,date_of_month,day_of_week,births
... 1994,1,1,6,8096
... 1994,1,2,7,7772
... '''
&gt;&gt;&gt; string_list = csvdata.splitlines()  # better way to split lines
&gt;&gt;&gt; string_list = string_list[1:]  # you don't have to specify the second value
&gt;&gt;&gt; splitted = [i.split(",") for i in string_list]
&gt;&gt;&gt; splitted
[['1994', '1', '1', '6', '8096'], ['1994', '1', '2', '7', '7772']]
&gt;&gt;&gt; splitted[0]
['1994', '1', '1', '6', '8096']
&gt;&gt;&gt; final_list = [[int(v) for v in row] for row in splitted]
&gt;&gt;&gt; final_list
[[1994, 1, 1, 6, 8096], [1994, 1, 2, 7, 7772]]
&gt;&gt;&gt; final_list[0]
[1994, 1, 1, 6, 8096]
</code></pre>
<p>Note that you could just loop directly over the file to get separate lines too:</p>
<pre><code>string_list = [line.strip().split(',') for line in openfileobject]
</code></pre>
<p>and skipping an entry in such an object could be done with <code>next(iterableobject, None)</code>.</p>
<p>Rather than read the whole file into memory and manually split the data, you could just use the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><code>csv</code> module</a>:</p>
<pre><code>import csv

def read_csv(filename):
    with open(filename, 'r', newline='') as csvfile:
        reader = csv.reader(csvfile)
        next(reader, None)  # skip first row
        for row in reader:
            yield [int(c) for c in row]
</code></pre>
<p>The above is a generator function, producing one row at a time as you loop over it:</p>
<pre><code>for row in read_csv("US_births_1994-2003_CDC_NCHS.csv"):
    print(row)
</code></pre>
<p>You can still get a list with all rows with <code>list(read_csv("US_births_1994-2003_CDC_NCHS.csv"))</code>.</p>
</div>
<span class="comment-copy">Start with using the <code>csv</code> module, don't re-invent splitting files on delimiters.. <code>splitted</code> is a list of lists, you want to convert each list contained within.</span>
<span class="comment-copy">Is it possible to do without csv module because I am new to python and I prefer doing it using list comprehension and I don't know much about csv module</span>
<span class="comment-copy">Sure it is; my answer shows you both options.</span>
<span class="comment-copy">can you explain it a bit?</span>
<span class="comment-copy">@Saikumar: not sure what part is not clear? The nested list comprehension applying a list comprehension to each list in <code>splitted</code>?</span>
<span class="comment-copy">[int(v) for v in row] so this is iterating the list within the outer list right?</span>
<span class="comment-copy">Exactly, so a list comprehension lets you do something to each element in an iteration: <code>[something for object in iterable]</code>; here the <code>something</code> is another list comprehension, and each object in the iterable is itself a list of strings. So <code>[[int(v) for v in row] for row in splitted]</code> takes each list in <code>splitted</code>, assigns that to <code>row</code>, then takes each value in the list assigned to <code>row</code> and converts that value (assigned to <code>v</code>) to an integer. The resulting list is one object in the new list output.</span>
