<div class="post-text" itemprop="text">
<p>Sometimes inside one function we need to use the <code>return</code> statement several times.</p>
<p>When developer changes a function with multiple returns inside, it's easy to oversee some parts of code where yet another return was "hidden".
If unit tests do not cover all possible paths, disaster is guaranteed - it's only a question of time.</p>
<pre><code>def my_function():
    '''Multiple "return" inside'''

    if condition 1:
        return 1, 2, 3
    if condition 2:
        return 2, 3, 4

    return 5  # this is wrong: only 1 value returned, while 3-tuple expected
</code></pre>
<p>Let's assume here: last return is wrong, because other callers expect tuple of 3 items.</p>
<p>I wonder if you know an easy way how to catch such parts of code automatically? I thought I could use AST, but I could not find any useful example of this.</p>
<p>This question is about <strong>automatic code analysis</strong> and listing such cases found - could be with running a separate script. </p>
<p>Of course I could write a try-to-guess parser (with e.g. regex) and then 'manually' check all unclear cases, but maybe there is a simpler way...</p>
</div>
<div class="post-text" itemprop="text">
<p>Depending on what version of Python you're using and what you really want to achieve, there are several ways to refactor the code.</p>
<p>One way, as has been already suggested, is to use <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">Type Hints</a> in Python 3.</p>
<p>Another way is refactor your code such that instead of using multiple <code>return</code> statements, you call other more atomic methods that handle those conditions and return the appropriate values. You use exception handling in those atomic methods to make sure the output is as desired, or raise an exception if final return type is unexpected.</p>
<pre><code>def my_function():
    '''Multiple "return" inside'''

    if condition 1:
        output = func_handle_condition_one()
    if condition 2:
        output = func_handle_condition_two()

    output = some_other_value

    if type(output) is not tuple:
        raise TypeError("Invalid type for output")
    return output
</code></pre>
<p>Additionally, ensure that you're using the right constructs for your conditions (such as whether you want to use multiple <code>if</code> or the <code>if-elif-else</code> construct). You could even re-factor your calling code to call the right function instead of calling one that has so many conditional statements.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why not set a variable that gets returned at the end and check for its length</p>
<pre><code>def my_function():
    '''Multiple "return" inside'''

    return_value=(0,0,0)

    if condition 1:
        return_value=(1, 2, 3)
    elif condition 2:
        return_value=(2, 3, 4)
    else:
        return_value=5  # this is wrong: only 1 value returned, while 3-tuple expected

    try:
        if len(return_value)==3:
            return return_value
        else:
            print("Error: must return tuple of length 3")
    except:
        print("Error: must return tuple")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My proposal for the final type check of the result would be:</p>
<pre><code>assert isinstance(return_value, tuple) and len(return_value) == 3
</code></pre>
<p>Advantage: as assert is easily switched off after debugging phase; still succinct statement for formulating the expectation.</p>
</div>
<span class="comment-copy">Perhaps you want to use <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">docs.python.org/3/library/typing.html</a> and static type checking. Or if your concern is insufficient test coverage, use coverage tools and TDD to ensure the important things <i>are</i> covered.</span>
<span class="comment-copy">I don't think this can be checked at design-time. After all, you could return something from a different function, or a different module. Besides, this is not really "wrong" but merely bad style.</span>
<span class="comment-copy">I don't agree, that the last return statement is wrong. Sometimes a tuple of length 3 is returned, sometimes an <code>int</code>. This is legal and not necessarily bad. (The identifier <i>my_function</i> does not provide sufficient context to decide).</span>
<span class="comment-copy">Mypy may be an option, see <a href="https://www.caktusgroup.com/blog/2017/02/22/python-type-annotations/" rel="nofollow noreferrer">here</a>.</span>
<span class="comment-copy">Thanks. Maybe a <code>try/except</code> then. I'll edit my answer.</span>
<span class="comment-copy">Perhaps even better. Why not add it as an answer?</span>
