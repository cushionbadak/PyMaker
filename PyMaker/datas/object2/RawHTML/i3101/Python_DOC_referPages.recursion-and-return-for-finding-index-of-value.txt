<div class="post-text" itemprop="text">
<p>So I came across an exercise problem in one of my CSE 101 slides and the problem asked to find a value in a list or a string using recursion. If the value was inside the list or the string, return the first index position that matches the value. I was able to solve it but I don't understand why it works. Here is my code: </p>
<pre><code>def rindex(a, pos):
    if pos not in a:
        return None
    elif pos in a:
        if a[0] != pos:
            return rindex(a[1:], pos) + 1
    return 0
</code></pre>
<p>Specifically, I don't understand why </p>
<blockquote>
<p>return 0 </p>
</blockquote>
<p>makes my function work. Why does it return the correct value rather than 0? </p>
</div>
<div class="post-text" itemprop="text">
<p>Every time a <code>return</code> is encountered in your function the result is returned and the function execution stops. This means that <code>return 0</code> will never be encountered in the event of <code>pos</code> existing in the current <code>a</code> slice except when the first element of the current slice equals to <code>pos</code> - at that point you return <code>0</code> to indicate that the index should not be increased. If you were not to return it, <code>rindex()</code> would return <code>None</code> by default causing an error when you try to sum it with <code>+ 1</code> up the recursion chain.</p>
<p>That being said, whenever you do <code>if pos not in a:</code> you're iterating over the list <code>a</code> in search of <code>pos</code> so your code will be immensely inefficient (especially since you're then doing the exact same search again in the <code>elif</code> block whereas simple <code>else</code> would more than suffice). You can reformulate your code as:</p>
<pre><code>def rindex(a, pos):
    if a[0] == pos:  # element found, do not increase the index
        return 0
    return rindex(a[1:], pos) + 1
</code></pre>
<p>So you're only doing slices instead of two iterations on each recursion. The biggest issue here is that it will raise an <code>IndexError</code> if <code>pos</code> is not found as the list recursion reaches the end. You can capture that and return any sort of value if you prefer value returns over exceptions, so in your case:</p>
<pre><code>def rindex(a, pos):
    if a[0] == pos:  # element found, do not increase the index
        return 0
    try:
        return rindex(a[1:], pos) + 1
    except (IndexError, TypeError):  # capture both to propagate
        return None
</code></pre>
<p>However, keep in mind that even doing list slices is not the most perfomant solution, especially when memory is concerned. Since Python passes names to references you can recurse over your whole list instead with little to no penalty and use indexes to traverse over the list recursively, i.e.:</p>
<pre><code>def rindex(a, pos, loc=0):
    if a[loc] == pos:
        return loc
    return rindex(a, pos, loc+1)
</code></pre>
<p>And you don't even have to do a recursive <code>try .. except</code> choreography to capture the errors - you can do it directly in the function either preemptive (<a href="https://docs.python.org/3/glossary.html#term-lbyl" rel="nofollow noreferrer">LBYL</a> style):</p>
<pre><code>def rindex(a, pos, loc=0):
    if len(a) &gt;= loc:
        return None
    if a[loc] == pos:
        return loc
    return rindex(a, pos, loc + 1)
</code></pre>
<p>Or after the fact (<a href="https://docs.python.org/3.4/glossary.html#term-eafp" rel="nofollow noreferrer">EAFP</a> style):</p>
<pre><code>def rindex(a, pos, loc=0):
    try:
        if a[loc] == pos:
            return loc
    except IndexError:
        return None
    return rindex(a, pos, loc + 1)
</code></pre>
<p>These also allow you to pass an arbitrary index as well (i.e. <code>-1</code>) when element is not-found as the validation is separated from the actual index search so it wont affect the index sum.</p>
</div>
<span class="comment-copy">It's the stop condition of your recursion. You could try stepping through your code manually. And/or experiment by giving it different values and try to understand the results.</span>
<span class="comment-copy">Imagine each <code>if</code> without an <code>else</code> has an <code>else: pass</code> and figure out under what conditions you end up taking this code path.</span>
