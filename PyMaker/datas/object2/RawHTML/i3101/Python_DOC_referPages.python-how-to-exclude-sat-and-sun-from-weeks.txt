<div class="post-text" itemprop="text">
<p>I was hoping that someone could give me some examples of ways in which I can return calendar data that does the following. </p>
<hr/>
<ol>
<li>Returns the number of days in any given month (past/present/future),
but after excluding Saturdays and Sundays. </li>
</ol>
<p><strong><em>Example:</em></strong> </p>
<p>input('Year: ') — <strong>2018</strong></p>
<p>input('Month: ') — <strong>7</strong></p>
<p><strong>End Result:</strong> The number of weekdays in (July) of (2018) is (<strong><em>22</em></strong>).</p>
<hr/>
<ol start="2">
<li>Assign an iterator to each weekday after excluding Sat. and Sun.</li>
</ol>
<p><strong><em>Example:</em></strong> </p>
<p>input('Year: ') — <strong>2018</strong></p>
<p>input('Month: ') — <strong>7</strong></p>
<p>input('date: ') — <strong>20</strong></p>
<p><strong>End Result:</strong> The (20) is a (<strong>Friday</strong>) and is the (<strong><em>15</em></strong>) <strong>weekday</strong> of (July), (2018).</p>
<p>This is the code that I've been able to create so far...</p>
<pre><code>import calendar

year = float(input('Year: '))
month = float(input('Month: '))
input_year = []
input_month = []

if year &gt;= 1000 and year &lt;=3000:
    input_year.append(year)
if month &gt;= 1 and month &lt;=12:
    input_month.append(month)

cal_format = calendar.TextCalendar(calendar.MONDAY)
result_cal = cal_format.formatmonth(int(input_year[0]), int(input_month[0]))
print(result_cal)

THE END RESULT IS...

Year: 1978
Month: 3
     March 1978
Mo Tu We Th Fr Sa Su
       1  2  3  4  5
 6  7  8  9 10 11 12
13 14 15 16 17 18 19
20 21 22 23 24 25 26
27 28 29 30 31
</code></pre>
<p>This only prints out a Text Calendar with Sat. and Sun at the end of each week, so I can at least visually exclude them. But I would really like to be able to programmatically exclude them and be able to input the above variables to calculate weekdays in a month, and which weekday each day is within that month. </p>
</div>
<div class="post-text" itemprop="text">
<p>To get the number of weekdays in a month:</p>
<pre><code>import calendar

weekdays = 0
cal = calendar.Calendar()

for week in cal.monthdayscalendar(2018, 7):
    for i, day in enumerate(week):
        # Check if is a weekday and the day is from this month
        if i &lt; 5 and day != 0:
            weekdays += 1

print weekdays
</code></pre>
<p>To get the weekday number of a specific day, you can modify the above code to return the weekday count when the input day is reached. </p>
</div>
<div class="post-text" itemprop="text">
<p>Here's one way to find the number of previous weekdays:</p>
<p>Note that the type conversions for year, month, day are <code>int</code>.</p>
<pre><code>import calendar

year = int(input('Year: '))
month = int(input('Month: '))
day = int(input('Day: '))

full_wks = day / 7
extra_days = day % 7

first_day = calendar.weekday(year, month, 1)
if first_day &gt;= 5:              # if month begins on a weekend
    weekend = 7 - first_day     # yields 1 if Sunday, 2 if Saturday
    extra_days -= weekend

weekdays = full_wks * 5 + extra_days

ordinal = lambda n: "{}{}".format(n, 'tsnrhtdd'[n%5*(n%100^15&gt;4&gt;n%10)::4])

print "{}/{} is the {} weekday in the month.".format(month, day, ordinal(weekdays))
</code></pre>
<p>Output:</p>
<pre><code>Year: 2018
Month: 7
Day: 20
7/20 is the 15th weekday in the month.
</code></pre>
<p>Ordinal number conversion from xsot on <a href="https://codegolf.stackexchange.com/questions/4707/outputting-ordinal-numbers-1st-2nd-3rd">Code Golf</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>One way to check the weekday of a date is to use the <code>date</code> object's <a href="https://docs.python.org/3/library/datetime.html#datetime.date.weekday" rel="nofollow noreferrer"><code>weekday()</code></a> method. It is in python standard library <code>datetime</code> module. </p>
<blockquote>
<p>date.weekday()</p>
<p>Return the day of the week as an integer, where Monday is 0 and Sunday is 6. For example, <code>date(2002, 12, 4).weekday() == 2</code>, a Wednesday. See also <a href="https://docs.python.org/3/library/datetime.html#datetime.date.isoweekday" rel="nofollow noreferrer"><code>isoweekday()</code></a>.</p>
</blockquote>
<pre><code>import datetime

num_of_weekdays = 0
weekday_list = []

start_date = datetime.date(int(input_year[0]), int(input_month[0]), 1)
cur_date = start_date
while cur_date.month == start_date.month:
    if 0 &lt;= cur_date.weekday() &lt;= 4:  # if it is a weekday
        num_of_weekdays += 1
        weekday_list.append(cur_date.day)
    cur_date += datetime.timedelta(days=1)

print("The number of weekdays in ({}) of ({}) is ({}).".format(
    input_month[0], input_year[0], num_of_weekdays))

date_ = datetime.date(int(input_year[0]), int(input_month[0]), int(input_date[0]))
index = weekday_list.index(int(input_date[0])) + 1
print("The ({}) is a ({}) and is the ({}) weekday of ({}), ({}).".format(
    date_.day, date_.strftime('%A'), index, date_.month, date_.year)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I made a simple solution in around 10 minutes. My approach relies heavily on list comprehensions and string methods such as join and split, so I recommend you look those up if your not familiar with them already. First split the result into lines, the tittle needs to be recentred, and the other lines needed the last characters removing.</p>
<p>Recenter the first line by using the strip() method to removing the whitespace at the begging of the line, then adding two space beforehand.</p>
<p>Take of the weekends by only including the first 15 characters of each line using list comprehensions.</p>
<p>The last part was the hardest. The idea was to count how many day numbers there were in my formatted calendar. First put all the lines with day numbers into one big line, then split the line by spaces to get a list of all day numbers, and finally use the size of the list.</p>
<pre><code>import calendar

year = float(input('Year: '))
month = float(input('Month: '))
input_year = []
input_month = []

if year &gt;= 1000 and year &lt;=3000:
    input_year.append(year)
if month &gt;= 1 and month &lt;=12:
    input_month.append(month)

cal_format = calendar.TextCalendar(calendar.MONDAY)
result_cal = cal_format.formatmonth(int(input_year[0]), int(input_month[0]))

lines = result_cal.split("\n") # Split result_cal into a list of lines
title_line = lines[0] # Save first line, we want to edit this differently
title_line = "  " + title_line.strip() # Change the indentation of the title line


lines = lines[1:] # Now select lines below the first 
lines = [line[:3*5] for line in lines] # Only Keep first 15 characters or each
                                       # line to exclude weekends. (5 weekdays *
                                       # 3 chars per day)

lines = [line for line in lines if len(line.strip())] # Don't include empty lines
                                                      # happens if month starts
                                                      # on a weekend.

# prints out the result
print(title_line)
for line in lines:
    print(line)

# Next work out how many working days in month.
nums = "".join(lines[1:]).split(" ") # Three parts: first lines[1:] means this
                                     # only looks at the portion of the calendar
                                     # with numbers written on then. 2nd "".join()
                                     # joins the lines into a single string on 1 line
                                     # 3rd the .split(" ") splits the string based on spaces
                                     # unfortunatly 2 consecutive spaces result in an empty
                                     # string.

nums = [num for num in nums if len(num)] # Filters the empty string.
print(f"There are {len(nums)} working days in the month you selected") # Prints result
#(uses f-string, you may want to look them up, I find them to be very useful)
</code></pre>
</div>
