<div class="post-text" itemprop="text">
<p>Why <code>get_score</code> would cause such <code>Error</code> but <code>fx</code> don't  </p>
<pre><code>from operator import getitem
from functools import partial
# getitem(a, b) -- Same as a[b]

d = dict(name='foo', score=100)
get_score = partial(getitem, b='score')
get_score(d)
# expect 100 but 
# TypeError: getitem() takes no keyword arguments

def f(x, y):
    return x+y
fx = partial(f, y=2)
fx(5) == 7 # True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>getitem()</code> is probably implemented in C and not Python, and does not support keyword arguments.  Implementation of Python functions using the C API is considerably different to implementation using Python itself.  In particular the argument parsing is more explicit when using the C API.</p>
</div>
<span class="comment-copy">This is documented in <a href="https://docs.python.org/3/reference/expressions.html#calls" rel="nofollow noreferrer">Calls</a>: "<b>CPython implementation detail:</b> An implementation may provide built-in functions whose positional parameters do not have names, even if they are ‘named’ for the purpose of documentation, and which therefore cannot be supplied by keyword. In CPython, this is the case for functions implemented in C that use <code>PyArg_ParseTuple()</code> to parse their arguments."</span>
<span class="comment-copy">A trivial workaround is to define your own function: <code>def getitem_custom(a, b='score'): return getitem(a, b)</code>.</span>
<span class="comment-copy">@jpp yes,I know this way to fix the problem</span>
<span class="comment-copy">@Marcus.Aurelianus: that's actually a perfectly legit way to construct <code>dict(**kwargs)</code> with name=value pairs e.g. <code>dict(one=1, two=2)</code></span>
<span class="comment-copy">@smci, run it in IDLE just now, it is my bad..</span>
