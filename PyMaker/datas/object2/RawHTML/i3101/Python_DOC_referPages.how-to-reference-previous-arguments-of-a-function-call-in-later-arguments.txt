<div class="post-text" itemprop="text">
<p><em>This is in micropython</em></p>
<p>I'm creating an API to control some hardware. The API will be implemented in C with an interface in micropython.</p>
<p>One example of my API is:</p>
<pre><code>device.set(curr_chan.BipolarRange, curr_chan.BipolarRange.state.ON)
</code></pre>
<p>I'd like to be able to achieve the same functionality but shorten the second path by <em>somehow</em> implicitly referencing the first argument:</p>
<pre><code>device.set(curr_chan.BipolarRange, &lt;first arg?&gt;.state.ON)
</code></pre>
<p><strong>Is there anyway to do this?</strong></p>
<p>The only way to do <em>something</em> like this now would be </p>
<pre><code>device.set(curr_chan.BipolarRange.state.ON)
</code></pre>
<p>and then put an upward pointing C-pointer on both the <code>ON</code> C-object and <code>state</code> C-object so that I know which entry in <code>curr_chan</code> is being referenced.</p>
<p>The micropython runtime - and I assume CPython one - doesn't keep the entire object "tree" available to the developer in memory.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could have special values for the second (state) argument which tell the function implementation to derive the state from the first argument.  You could also introduce a completely separate function which has this behavior.</p>
<p>Or you could have a helper function which determines the state and passes it down to the <code>set</code> function, something like this:</p>
<pre><code>device.set(*state_ON(curr_chan.BipolarRange))
</code></pre>
<p>Here, <code>state_ON</code> would return a tuple <code>(curr_chan.BipolarRange, curr_chan.BipolarRange.state.ON)</code>.</p>
<p>In any case, there is no direct support for what you are trying to do in Python itself.</p>
</div>
<div class="post-text" itemprop="text">
<p>Pass the <em>name</em> of the attribute you want as the second argument. Call <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow noreferrer"><code>getattr</code></a> (or <a href="https://docs.python.org/3/c-api/object.html#c.PyObject_GetAttr" rel="nofollow noreferrer"><code>PObject_GetAttr</code></a> repeatedly to get each element of the <code>.</code>-separated string:</p>
<pre><code>device.set(curr_chan.BipolarRange, 'state.ON')
</code></pre>
</div>
<span class="comment-copy">You might only have to put something referencing the <code>BipolarRange</code> on <code>ON</code> and not on <code>state</code>, but yeah, that works if you need the API to look like that.</span>
<span class="comment-copy">@Ry- Could I use a decorator to implicitly pre-pend <code>arg1</code> to <code>argN</code>?</span>
<span class="comment-copy">If you could find some satisfying way to represent <code>.state.ON</code>, sure. Strings are messy and inefficient, lambdas aren’t fantastic, I don’t know what works in micropython…</span>
<span class="comment-copy">What about decorator?</span>
<span class="comment-copy">That's just a special case of having a second function with the deriving behavior.</span>
<span class="comment-copy">And that's an acceptable answer. I'm making this API for NON-programmers. I want it to be simple for them.</span>
