<div class="post-text" itemprop="text">
<p>I want to find any pair of elements in a list that have the same attribute. For example,</p>
<pre><code>class X:
    def __init__(self, param):
        self.param = param

my_list = [X(1), X(2), X(3), X(2), X(3), X(3)]
</code></pre>
<p>So if comparing on <code>x.param</code>, I'd be looking for <code>my_list[1], my_list[3]</code> or <code>my_list[2], my_list[4]</code> or <code>my_list[2], my_list[5]</code> or <code>my_list[4], my_list[5]</code>. However, there's no guarantee that the list would necessary have any elements with the same property, e.g.</p>
<pre><code>my_list = [X(1), X(2), X(3)]
</code></pre>
<p>might also be a valid parameter to this function.</p>
<p>The obvious way to do this seems to be:</p>
<pre><code>def find_dupe(my_list, my_lambda):
    attrs = dict()
    for item in my_list:
        if my_lambda(item) in attrs:
             return [attrs[my_lambda(item)], item]
        attrs[my_lambda(item)] = item
    return []
</code></pre>
<p>But it seems a bit inelegant and I'm wondering if there's a nicer way to do this.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="noreferrer"><code>collections.defaultdict</code></a> offers an O(n) solution to group objects by attribute:</p>
<pre><code>from collections import defaultdict

class X:
    def __init__(self, param):
        self.param = param

my_list = [X(1), X(2), X(3), X(2), X(3), X(3)]

d = defaultdict(list)

for i in my_list:
    d[i.param].append(i)
</code></pre>
<p>The result indicates one object with <code>param == 1</code>, two objects with <code>param == 2</code> and three objects with <code>param == 3</code>:</p>
<pre><code>print(d)

defaultdict(list,
            {1: [&lt;__main__.X at 0x855eb70&gt;],
             2: [&lt;__main__.X at 0x855e588&gt;, &lt;__main__.X at 0x856ae48&gt;],
             3: [&lt;__main__.X at 0x856af60&gt;, &lt;__main__.X at 0x856ad68&gt;, &lt;__main__.X at 0x856acf8&gt;]})
</code></pre>
<p>To extract <em>pairs</em> of objects with the same attribute, you need only to filter items in the dictionary with a value with length greater than 1. Then use <code>itertools.combinations</code> to extract all combinations for these keys.</p>
</div>
<span class="comment-copy">sounds like a job for <a href="https://stackoverflow.com/questions/773/how-do-i-use-pythons-itertools-groupby">itertools.groupby()</a> - get all groups with &gt; 1 element</span>
<span class="comment-copy">grouping by attribute.. Ingenious</span>
