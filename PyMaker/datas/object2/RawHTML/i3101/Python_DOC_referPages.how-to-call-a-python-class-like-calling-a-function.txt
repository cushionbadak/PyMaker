<div class="post-text" itemprop="text">
<p>Searching to build up my personal style of programming i want to be able to call a python class the same way i'd call a python function.
Here's what i mean:
consider this function:</p>
<pre><code>def Factorial(n):
    if n == 0:
        return 1
    else:
        return n * Factorial(n - 1)
</code></pre>
<p>This is a function that outputs 24 when you call Factorial(4).</p>
<p>Now let's consider a class instead:</p>
<pre><code>class Factorial:
    def __call__(n):
        if n == 0:
            return 1
        else:
            return n * Factorial()(n - 1)
</code></pre>
<p>This code works the same way as the previous code except at call time where you instead write:</p>
<pre><code>Factorial()(4) # which outputs 24
</code></pre>
<p>Now my question is how could you do this instead:</p>
<pre><code>Factorial(4) # just that, and output 24, from THE object.
</code></pre>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>self</code>.</p>
<pre><code>class Factorial:
    def __call__(self, n):
        if n == 0:
            return 1
        else:
            return n * self(n - 1)

f = Factorial()

f(3)
# 6
f(5)
# 120
</code></pre>
<p>From there you can easily add a starting value in your <code>__new__</code> constructor.</p>
<pre><code>class Factorial:

    def __new__(cls, value=None):
        instance = super().__new__(cls)
        if value is None:
            return instance
        else:
            return instance(value)

    def __call__(self, n):
        if n == 0:
            return 1
        else:
            return n * self(n - 1)
</code></pre>
<p>Now you can</p>
<pre><code>Factorial(5)
# 120
f = Factorial()
f(5)
# 120
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a constructor (which is __init__ in Python) like so:</p>
<p><code>class Factorial:
    def __init__(self, n):
        // code here</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can override <a href="https://docs.python.org/3/reference/datamodel.html#object.__new__" rel="nofollow noreferrer"><code>__new__</code></a> method:</p>
<pre><code>class Factorial:
    def __new__(cls, n):
        if n == 0:
            return 1
        else:
            return n * Factorial(n - 1)
</code></pre>
<p>Although the above solution works, I prefer a decorator-based solution which is less magical and is more intuitive and explicit:</p>
<pre><code>def function_factory(cls):
    return cls()

@function_factory
class Factorial:
    def __call__(self, n):
        if n == 0:
            return 1
        else:
            return n * Factorial(n - 1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A short &amp; simple change in your existing code:</p>
<pre><code>&gt;&gt;&gt; class Factorial:
...     def __call__(self,n):
...             if n == 0:
...                     return 1
...             else:
...                     return n * self.__call__(n - 1)
... 
&gt;&gt;&gt; Factorial = Factorial()
&gt;&gt;&gt; Factorial(4)
24
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">Why?  Calling the <code>Factorial</code> class should return an object with type <code>Factorial</code>.  You <i>can</i> do this, using metaclasses to give the <code>Factorial</code> class a different <code>__call__</code>, but you really shouldn't.</span>
<span class="comment-copy">OP, I think you need to understand the purpose of a Class and the purpose of its inherent encapsulation.  A Class is not the same as a function.  That being said, to make use of the constructor of a class, you should define <code>__init__</code> so you can pass the appropriate information into it in order to process, and could then kick off the processing in that function.</span>
<span class="comment-copy">Have a look at my <a href="https://stackoverflow.com/a/51448410/820410">answer</a>  . If it solves your purpose, please accept/up vote it :)</span>
<span class="comment-copy">Very nice work. You made sure that the normal functionality of a class doesn't break, and added the functionality i asked for. Very nice!</span>
<span class="comment-copy">This works and is the most elegant solution that feels natural. I take this one. Thanks.</span>
