<div class="post-text" itemprop="text">
<p>I am trying to add command line options to program. The program should accept both a list of numbers, and parse options. For instance a call to the program could look like:</p>
<pre><code>python3 ./parsetest.py 4 3 v=100
</code></pre>
<p>The 4 and the 3 will be processed in one way whereas the v=100 command will set the internal variable v to 100. I found the getopt library is supposed to have this functionality: <a href="http://stackabuse.com/command-line-arguments-in-python/" rel="nofollow noreferrer">http://stackabuse.com/command-line-arguments-in-python/</a> Is there a better/simpler way to do this?</p>
<p>When I try to parse the input like the above, I believe getopt should place arguments which trigger its keywords into a special list, and those which do not trigger are placed elsewhere. However, when I try to use getopt following the example above, no matter what I do, the v=100 option does not appear to trigger the special arguments list. When passed to getopt, I expected the 'v=100' string to be split up into argument v and value 100. For instance, the print(arguments,values) command below results in: [] ['4', '3', 'v=100']. There are values, but there are no arguments.</p>
<p>Here is my code:</p>
<pre><code>import sys,getopt
v = 1e100
fullCmdArguments = sys.argv
argumentList = fullCmdArguments[1:]
unixOptions = "v:"  
gnuOptions = ["v="]
print(argumentList)
try:  
  arguments, values = getopt.getopt(argumentList, unixOptions, gnuOptions)
except getopt.error as err:  
  # output error, and return with an error code
  print (str(err))
  sys.exit(2)

print(arguments, values)
for currentArgument, currentValue in arguments:  
  print (currentArgument, currentValue)
  if currentArgument in ("-v", "v"):
    v = currentValue
  else:
    #Its an integer then, do something with it
    print()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you can use <code>argparse</code> the following will work:</p>
<h2>Example</h2>
<pre><code>import argparse

parser = argparse.ArgumentParser()
parser.add_argument('numbers', type=int, nargs='+')
parser.add_argument('-v', type=int, default=-1)
args = parser.parse_args()

print(args.numbers)
print(args.v)

# due to the default set above, `args.v` will always have an int value
v = args.v
</code></pre>
<p>Using the <code>nargs</code> keyword argument you can set it to '+' requiring one or more numbers. The <code>v</code> with a hyphen is by default optional. If this is not wanted, you can add the <code>required=True</code> option.</p>
<h2>Usage</h2>
<pre><code>python my_file.py 1 2 3 5 -v=12
[1, 2, 3, 5]
12

python my_file.py 1 2 3 5
[1, 2, 3, 5]
-1
</code></pre>
<h2>Further reading</h2>
<p>For more information about the argparse module you can have a look at:</p>
<ul>
<li>The official tutorial: <a href="https://docs.python.org/3/howto/argparse.html" rel="nofollow noreferrer">https://docs.python.org/3/howto/argparse.html</a></li>
<li>The module doc: <a href="https://docs.python.org/3/library/argparse.html#module-argparse" rel="nofollow noreferrer">https://docs.python.org/3/library/argparse.html#module-argparse</a></li>
</ul>
</div>
<span class="comment-copy">In regards to your question: "Is there a better/simpler way to do this?" <code>argparse</code> (also a built-in module) is pretty popular for command line argument parsing.</span>
<span class="comment-copy">Is <code>getopt</code> a requirement, or could you also use <code>argparse</code>?</span>
<span class="comment-copy">Note that your command line usage for options is non-standard: <code>v</code> is not an option, but <code>v=100</code> will be interpreted as a third argument. Perhaps you mean <code>python3 ./parsetest.py 4 3 -v=100</code>.</span>
