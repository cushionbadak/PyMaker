<div class="post-text" itemprop="text">
<p>So I have a class with the following method: </p>
<pre><code>def Add(self,new_name):
        self.new_name=.... 
</code></pre>
<p>I want to add an attribute with the title "new_name" that will be passed from somewhere else. Obviously, in the above program I simply created an attribute with the string "new_name" instead of the actual argument input. </p>
<p>How should I go about making sure the attribute's name is the actual parameter? I believe in C++ it's easy to use <code>c_str()</code> here, but with Python I'm not sure. </p>
<p>ex. <code>Add('hello')</code> should create a new attribute <code>self.hello</code> which I can then store with information. Thank you. </p>
<p>EDIT: Ok I see I should use setattr() now. However, I seem to not be getting the expected results. Is this how I would use it where the initialization is a list comprehension? I tried the two ways and neither worked as shown below: </p>
<pre><code>def Add(self,new_name):  #also doesn't work

        setattr(self, new_name,[API(self.var1,str(new_name),i) for i
        in range(self._NumRows)])  

def Add(self,new_name):  #also doesn't work
        setattr(self, new_name,[]) 
        self.new_name=[API(self.var1,str(new_name),i) for i
        in range(self._NumRows)])  
</code></pre>
<p>where API takes 3 arguments (I know this isn't the problem because this works fine as long as I don't use setattr() and the name is already known so it's nothing with the API. </p>
<p>EDIT: For those suggesting dictionary, I'm not storing data with these attributes. I'm creating a method which creates a new attribute for users who are creating derived classes of my base class. It's to abstract away the creation of additional attributes because I was told my code would likely be adopted in the future when I leave (I'm an intern) and to make it as easy as possible to create derived classes. </p>
<p>EDIT: Nevermind, I mislabeled a variable. It works! Thank you. </p>
</div>
<div class="post-text" itemprop="text">
<p>This is exactly <a href="https://docs.python.org/3/library/functions.html#setattr" rel="nofollow noreferrer"><code>setattr</code></a>:</p>
<pre><code>def add(self, attr_name):
    val = ...
    setattr(self, attr_name, val)
</code></pre>
<p>The caveat is that you need to use <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow noreferrer"><code>getattr</code></a> to retrieve <code>val</code> (and <a href="https://docs.python.org/3/library/functions.html#delattr" rel="nofollow noreferrer"><code>delattr</code></a> to delete it), and any code that gets/deletes also needs to know the <code>attr_name</code> in order to do that.</p>
<p>Make your life easier and use a <code>dict</code> for data, not attributes.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you know what you are doing (and a normal dictionary is not an option), you can use <code>setattr</code>:</p>
<pre><code>def Add(self, new_name, value):
    setattr(self, new_name, value)
</code></pre>
<p>This should be one of your last resorts.</p>
<p>Also if the using code knows <code>new_name</code> at write time (so it is not create by the program), instead of this :</p>
<pre><code>self.Add('hello', 'test')
</code></pre>
<p>You could just write</p>
<pre><code>self.hello = 'test'
</code></pre>
<p>This depends on how you are using this function.</p>
</div>
<span class="comment-copy">"I believe in C++ it's easy to use c_str() here, but with Python I'm not sure." - <code>c_str()</code> would do nothing helpful. It is not actually possible to add new dynamically-named members to C++ objects.</span>
<span class="comment-copy">Does it have to be an attribute or you just need a way to map the "new_name" strings to some values for each of objects?</span>
<span class="comment-copy">You're right. I'm thinking of using it with an array or vector.   Is there a way to do this in Python?</span>
<span class="comment-copy">@AndrejKesely But why the format string? Just <code>new_name</code> or <code>str(new_name)</code> should be enough.</span>
<span class="comment-copy">How would you use it once you'd created it? Are you planning on generating code?</span>
<span class="comment-copy">I'm not storing data really. I'm creating a method which creates a new attribute for users who are creating derived classes of my  base class. It's to abstract away the creation of additional attributes. I'm about to update post.</span>
<span class="comment-copy">@masque I see. I hope your update clearly explains why the derived classes can't create those new attributes in the usual way. ;)</span>
<span class="comment-copy">@PM2Ring They can, but I'll be leaving this project I'm working on starting soon (I'm an intern), and I was told to make it as easy as possible to create derived classes from this base class because it's going to be adopted I'm told. One of the inherent differences in these derived classes is additional attributes so I want to make a method to create a new attribute which can then be used with an existing API. It would take the programmer 20 lines for each derived class to redo what I did in base class and only 1 if I did this.</span>
<span class="comment-copy">Normal dictionary is not an option because I'm not storing data really. I'm creating a method which creates a new attribute for users who are creating derived classes of my base class. It's to abstract away the creation of additional attributes. I'm about to update post</span>
