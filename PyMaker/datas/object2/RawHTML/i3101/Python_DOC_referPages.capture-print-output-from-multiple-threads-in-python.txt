<div class="post-text" itemprop="text">
<p>I have a function which inside lauches multiple threads running in parallel. Threads print something and I want to capture this output from external function. I tried the next code to capture the output:</p>
<pre><code>import sys, io
stdout = sys.stdout
sys.stdout = io.StringIO()
threads_conn(connect, devices) #- here many threads starts with many print inside
output = sys.stdout.getvalue()
sys.stdout = stdout

print(output)
</code></pre>
<p>This code works. But the problem is that output is printed only when all theads complete. So I have a freeze. Once all threads are done - whole output is printed. What I would like to have - have output once it is generated inside - in other words in real-time. Now I have the whole outout buffer printed at once.
<strong>How get all of the threads to output in real-time?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>What you want to do is write your own <code>TextIOBase</code> class (or, if you want binary data, write your own <code>RawIOBase</code> and then wrap a stock <code>TextIOWrapper</code> around it), where you can put whatever behavior you want.</p>
<p>As you can see from <a href="https://docs.python.org/3/library/io.html#class-hierarchy" rel="nofollow noreferrer">the docs</a>. all you need to implement for <code>TextIOBase</code> is <code>detach</code>, <code>read</code>, <code>readline</code>, and <code>write</code>. And the first three aren't relevant for what you're doing.</p>
<hr/>
<p>So, what should your <code>write</code> look like? Well, it depends on what you want to do. </p>
<p>it sounds like your goal is to tee everything to both real stdout and to a <code>StringIO</code>. If so, this is pretty trivial. </p>
<p>The only question is what you want to do if one of the targets raises an exception, or writes fewer bytes than the other, etc. Since an <code>IOString</code> is never going to do either of those, we can write something really dumb that just assumes that whatever real stdout did was the right thing to do.</p>
<pre><code>class TeeTextIO(io.TextIOBase):
    def __init__(self, target):
        self.target = target
        self.stringio = io.StringIO()
    def write(self, s):
        writecount = self.target.write(s)
        self.stringio.write(s[:writecount])
        return writecount
</code></pre>
<p>And now:</p>
<pre><code>stdout = sys.stdout
sys.stdout = TeeTextIO(sys.stdout)
threads_conn(connect, devices) #- here many threads starts with many print inside
output = sys.stdout.stringio.getvalue()
sys.stdout = stdout
</code></pre>
<p>Now, the output has gone to the real <code>stdout</code> as it came in, but it's also been stored in the <code>StringIO</code> for whatever you want to do with it later.</p>
<p>(Notice that this class will work with <em>any</em> <code>TextIOBase</code>, like a file you <code>open</code>, not just with <code>stdout</code>. It didn't cost us anything to make it general, so why not?)</p>
<hr/>
<p>What if you wanted to do something totally different, like spread each <code>write</code> randomly among 10 different files? It should be obvious:</p>
<pre><code>class SpreadTextWriter(io.TextIOBase):
    def __init__(self, *files):
        self.files = files
    def write(self, s):
        return random.choice(self.files).write(s)
</code></pre>
</div>
<span class="comment-copy">Are you asking how to capture all the output into a string <i>and</i> also have it printed in real-time?</span>
<span class="comment-copy">I guess you don't care that the output from the different threads gets all mixed together. Or would you prefer it if there is a way to identify the output of each thread?</span>
<span class="comment-copy">Yes, I dont care. All I need to capture all output as it is generated. I need it to show    it in my GUI in real time. Now GUI shows nothing when threads are working.</span>
<span class="comment-copy">I suspect that printing to the terminal in real-time is a red herring, and the OP really wants the redirected stdout to appear in his GUI in real-time.</span>
<span class="comment-copy">@PM2Ring I couldn't figure out what the OP wants, so I wrote two different things to show how easy it is to write whatever he actually does want. Of course if he just copies and pastes either one without reading anything, the odds that it happens to do what he wants are a million to one, but I'm not too concerned with that.</span>
<span class="comment-copy">@abarnert you suggestion works fine!</span>
