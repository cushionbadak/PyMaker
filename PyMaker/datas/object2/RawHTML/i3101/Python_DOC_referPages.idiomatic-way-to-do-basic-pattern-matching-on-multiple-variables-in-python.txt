<div class="post-text" itemprop="text">
<p>I want to achieve what this code (written in Crystal) does:</p>
<pre><code>enum PieceKind
    Pawn, Rook, Bishop, Knight, King, Queen
end

def piece_kind_at_init(x, y)
    case y
    when 2, 7 then PieceKind::Pawn
    when 1, 8
        case x
        when 1, 8 then PieceKind::Rook
        when 2, 7 then PieceKind::Bishop
        when 3, 6 then PieceKind::Knight
        when 4 then PieceKind::King
        when 5 then PieceKind::Queen
        end
    end
end
</code></pre>
<p>This is the "nicest" version I was able to come up with in Python:</p>
<pre><code>class PieceKind(Enum):
    Pawn = auto()
    Rook = auto()
    Bishop = auto()
    Knight = auto()
    King = auto()
    Queen = auto()

def piece_kind_at_init(x, y):
    if y in [2, 7]:     
        return PieceKind.Pawn
    elif y in [1, 8]:
        if x in [1, 8]:     
            return PieceKind.Rook
        elif x in [2, 7]:   
            return PieceKind.Bishop
        elif x in [3, 6]:   
            return PieceKind.Knight
        elif x == 4:        
            return PieceKind.King
        elif x == 5:        
            return PieceKind.Queen
</code></pre>
<p>It's fine, but it's definitely less readable the version with proper pattern matching. What's the most idiomatic way to write the code?</p>
</div>
<div class="post-text" itemprop="text">
<p>One way to get rid of lengthy <code>elif</code> chain is to create a translation table.</p>
<pre><code>outer_row_pieces = [PieceKind.Rook,
                    PieceKind.Knight,
                    PieceKind.Bishop,
                    PieceKind.King,
                    PieceKind.Queen,
                    PieceKind.Bishop,
                    Piecekind.Knight,
                    PieceKind.Rook]

def piece_kind_at_init(x, y):
    if y == 2 or y == 7:
        return PieceKind.Pawn
    if y == 1 or y == 8:
        return outer_row_pieces[x]
    return None
</code></pre>
</div>
<span class="comment-copy">If you're looking for a <code>switch</code> statement, python doesn't have those - <code>elif</code> chains as you've written them are the way to go.</span>
<span class="comment-copy">Alternantively, you might just define all your y = 1 pieces in a <code>list</code> as so:  <code>[Piecekind.Rook, Piecekind.Knight, Piecekind.Bishop, ...]</code></span>
<span class="comment-copy">Since this question is about style/Pythonic idioms, you may be interested in the reasoning behind this: <a href="https://docs.python.org/3/faq/design.html#why-isn-t-there-a-switch-or-case-statement-in-python" rel="nofollow noreferrer">docs.python.org/3/faq/â€¦</a></span>
