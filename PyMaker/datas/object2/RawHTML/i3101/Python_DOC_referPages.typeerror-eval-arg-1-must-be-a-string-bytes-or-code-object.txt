<div class="post-text" itemprop="text">
<p>I'm trying to evaluate a function at x0</p>
<pre><code>f = lambda x:mu*div2d(grad2d(x))+x-b
</code></pre>
<p>I tried this:</p>
<pre><code>def feval(f, *args):
    return eval(f)(*args)
feval(f,x0)
</code></pre>
<p>but it throws up a traceback:</p>
<pre><code>Traceback (most recent call last):

  File "&lt;ipython-input-128-6be96feb06d6&gt;", line 1, in &lt;module&gt;
    feval(f,x0)

  File "&lt;ipython-input-126-67b053764219&gt;", line 2, in feval
    return eval(f)(*args)

TypeError: eval() arg 1 must be a string, bytes or code object
</code></pre>
<p>I also read that using eval() is bad practice. What'd be a good way to do this then? Thanks. </p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow noreferrer"><code>eval</code></a> function evaluates a string as if it were source code.<sup>1</sup> For example, <code>eval("f(*args)")</code> would do the same thing as calling <code>f(*args)</code> directly.</p>
<p>But you don't have source code, you have a function. To call a function, all you have to do is:</p>
<pre><code>return f(*args)
</code></pre>
<p>It doesn't matter that you got the function as a parameter, <code>f</code>, instead of directly from a <code>def</code> statement or <code>lambda</code> expression. Function values are just objects, like anything else in Python, and you can pass them around the same as any other values, and then call them whenever you want.</p>
<hr/>
<p>But really, there's no need for this function at all. Instead of this:</p>
<pre><code>feval(f, x0)
</code></pre>
<p>… you could just call it directly:</p>
<pre><code>f(x0)
</code></pre>
<p>The only reason you'd ever need something like your <code>feval</code> is if someone else has passed you a function and a bunch of arguments separately, and you need to put them together into a function call. Python used to have a function for this, <a href="https://docs.python.org/2/library/functions.html#apply" rel="nofollow noreferrer"><code>apply</code></a>, but it was removed long ago because it's almost never necessary, and a one-liner if it ever is necessary.</p>
<hr/>
<blockquote>
<p>I also read that using eval() is bad practice.</p>
</blockquote>
<p>It usually is. That's because it's about treating strings as code:</p>
<ul>
<li>If the string comes out of your source code, you probably didn't need <code>eval</code> and could just run the code. That's why you don't want to use it here.</li>
<li>If, on the other hand, the string comes from user input or the internet or something, it can be dangerous—something like <code>"__import__('os').system('mr -rf /')"</code> is just one typo away from being a really bad idea to evaluate.</li>
</ul>
<hr/>
<p><sub>1. It can also evaluate compiled code objects, which is why the error message is a bit more complicated than you might expect, but don't worry about that.</sub></p>
</div>
<span class="comment-copy">If you want to call a function, just call it: <code>return f(*args)</code>.</span>
<span class="comment-copy">In fact, you've just reproduced a less powerful version of the ancient <a href="https://docs.python.org/2/library/functions.html#apply" rel="nofollow noreferrer"><code>apply</code></a> function, which was deprecated in Python 2.3 and removed in 3.0 because it really isn't useful. Instead of <code>feval(f, x0)</code> you can just call <code>f(x0)</code>.</span>
<span class="comment-copy"><code>eval</code> is only used to convert strings into python expressions. E.g., <code>eval('f(*args)')</code> is same as <code>f(*args)</code>, but using the former makes no sense in this case.</span>
<span class="comment-copy">Never thought I'd have to search for a duplicate for the question "How do I call a function?"...</span>
<span class="comment-copy">@Aran-Fey I couldn't find one. There are a few questions about <code>apply</code> which are relevant, but I think explaining why they're relevant to the OP would take as much writing as answering directly. Hopefully you can find something better?</span>
