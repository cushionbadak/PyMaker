<div class="post-text" itemprop="text">
<p>I am trying to make a function in python that creates dictionaries with custom names. The code I am using so far looks like this:</p>
<pre><code>def PCreate(P):
    P = {}
    print('Blank Party Created')
</code></pre>
<p>The problem that I am having is that whenever I use the function, no matter what I put down for P, for example:</p>
<pre><code>PCreate('Party1')
</code></pre>
<p>It creates a blank dictionary with the name 'P'. is there a way to make it create a dictionary with the name Party1?</p>
</div>
<div class="post-text" itemprop="text">
<p>It looks like you're confused with how variable names, and strings, and objects interact withing Python. When you have the function <code>PCreate(P)</code> you are saying that when the function is called, it will take on parameter, and within the function that parameter will be called P. This means that if you have the function,</p>
<pre><code>def func(P):
    print(P)
</code></pre>
<p>and call it three times,</p>
<pre><code>func('two words')
func(4)
func([3, 'word'])
</code></pre>
<p>you will get the output:</p>
<pre><code>two words
4
[3, 'word']
</code></pre>
<p>This is because the parameter <code>P</code> has no explicit type in Python. So, when you called your function with the argument <code>'Party1'</code> the values looked like this</p>
<pre><code>def PCreate(P):
    # P is currently 'Party1'
    P = {}
    # P no longer is Party1, and now references {}
    ...
</code></pre>
<p>So you didn't assign <code>{}</code> to the variable with the name <code>Party1</code>, you overwrote the local variable P with a new empty dict.</p>
<p>I think you probably do not want to be doing what you're doing, but see <a href="https://stackoverflow.com/questions/11553721/using-a-string-variable-as-a-variable-name">this answer</a> for more information on setting a variable using a string variable as its name.</p>
<hr/>
<p>What I recommend you do is create a function that returns your custom dictionaries, and assign the returned value to your custom name.</p>
<pre><code>def new_custom_dict():
    my_dict = {} # Pretend this is somehow custom
    return my_dict 

Party1 = my_custom_dict()
</code></pre>
<p>If you need the reference key to your new dictionary to be stored in a string, then you're in luck because that's what dictionaries are for!</p>
<p>You can first create a dictionary that will be used to store your custom named dictionaries:</p>
<pre><code>dictionaries = {}
</code></pre>
<p>and when you want to add a new dictionary with a custom name, call this function</p>
<pre><code>def insert_new_dictionary(dictionaries, dictionary_name):
    dictionaries[dictionary_name] = {}
</code></pre>
<p>e.g.</p>
<pre><code>insert_new_dictionary(dictionaries, 'Party1')
insert_new_dictionary(dictionaries, 'Party2')
</code></pre>
<p>would leave you with two dictionaries accessible by <code>dictionaries['Party1']</code> and <code>dictionaries['Party2']</code></p>
</div>
<span class="comment-copy">In the first line of your function you are overwriting your argument <code>P</code>. So what else did you expect to happen?</span>
<span class="comment-copy">I'm sorry.  I'm very new to python, and I'm still trying to figure out how things work. Could you please explain how someone would go about fixing this?</span>
<span class="comment-copy">Read this, <a href="https://docs.python.org/3/library/stdtypes.html#mapping-types-dict" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#mapping-types-dict</a></span>
<span class="comment-copy">I think he is asking for how to get a variable name from the user and assign a value to it.</span>
<span class="comment-copy">@abhikrishnan That is what the second of half of my answer addresses</span>
<span class="comment-copy">exactly that's what he is looking for</span>
