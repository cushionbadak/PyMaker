<div class="post-text" itemprop="text">
<p>I wanted to grab a argument from a string in python...</p>
<p>I wanted to grab the city of this string: <code>weather in &lt;city&gt;</code></p>
<p>How do I get the city? Into a new variable?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you have constant spaces in your string and your strings are not going to change, it's relatively easy. Just use <code>split</code> on your string.</p>
<pre><code>x = "weather in &lt;city&gt;"
split_x = x.split(" ")
# will return you
["weather", "in", "&lt;city&gt;"]
city = split_x[2]
</code></pre>
<p>Look at <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer">split's</a> docs. But suppose your city is something like "New York", then you'll have to look for some alternative because in that case, the list will be -</p>
<pre><code>x = "weather in New York"
# O/P 
["weather", "in", "New", "York"]
</code></pre>
<p>And then if you do this-</p>
<pre><code>city = split_x[2]
</code></pre>
<p>You will have wrong city name</p>
</div>
<div class="post-text" itemprop="text">
<p>Use Regular Expressions!</p>
<p>If you haven't heard of them, it's quite simple. Simply import the <code>re</code> module, and away you go!</p>
<pre><code>&gt;&gt;&gt; import re
</code></pre>
<p>Ok, maybe that wasn't so exciting. But now you can use pattern matching. Simply define your pattern:</p>
<pre><code>&gt;&gt;&gt; pattern = r"^(?P&lt;thing&gt;.*?) in (?P&lt;city&gt;.*?)$"
</code></pre>
<p>and away you go!</p>
<pre><code>&gt;&gt;&gt; re.match(pattern, "weather in my city")
&lt;_sre.SRE_Match object; span=(0, 18), match='weather in my city'&gt;
</code></pre>
<p>Don't worry! This is actually something useful. Let's store this in a variable so we can use it:</p>
<pre><code>&gt;&gt;&gt; match = re.match(pattern, "weather in my city")
&gt;&gt;&gt; match.group("city")
'my city'
</code></pre>
<p>Hooray!</p>
<p>Now, what was that crazy <code>pattern</code> thing about? It worked, but it just seems like magic. Let me explain:</p>
<ul>
<li><code>r""</code> just makes Python treat (most) <code>\</code>s as literal <code>\</code>s. So, <code>r"\n"</code> will be an actual <code>\</code> followed by an actual <code>n</code>, as opposed to a new-line character. This is because regular expressions have special meanings for <code>\</code> characters, and it's awkward to have to write <code>\\</code> all the time.</li>
<li><code>^</code> means "start of the string".</li>
<li><code>(?P&lt;name&gt;...)</code> is a named group. Normal groups are represented by <code>(...)</code>, and can be referenced by their number (e.g. <code>match.group(0)</code>). Named groups can also be referenced by number, but they can also be referenced by their name. The <code>P</code> stands for Python, because that's where the syntax originally came from. Neat!</li>
<li><code>.</code> means "any character".</li>
<li><code>*</code> means "repeated 0 or more times".</li>
<li><code>?</code> means a few things, but when it's after a <code>*</code> or <code>+</code> it means "match as little as possible". This means that it will make the <code>thing</code> group have as few "any character"s as possible.</li>
<li><code>in</code> means exactly what it looks like. A <code></code> followed by an <code>i</code> followed by a <code>n</code> followed by a <code></code>.</li>
<li><code>.*?</code> again means "match as few of any character as possible", but... I'm not really sure why I wrote that, considering that</li>
<li><code>$</code> means "end of the string".</li>
</ul>
<p>And yeah, they never really stop seeming like magic. (Unless you use Perl.) If you want to make your own regular expression or learn some more, have a look at <a href="https://docs.python.org/library/re.html" rel="nofollow noreferrer">the documentation for the <code>re</code> module</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>With <code>str.lstrip()</code>:</p>
<pre><code>s = "weather in Las Vegas"

city_name = s.lstrip('weather in ')
print(city_name)
</code></pre>
<p>Prints:</p>
<pre><code>Las Vegas
</code></pre>
</div>
<span class="comment-copy">Can you update your post to include more code context? Are you saying that you have a string that reads "weather in New York" or that you're iterating over a list called &lt;city&gt; that contains strings: <code>for weather in city</code>?</span>
<span class="comment-copy">It will be better if you provide some more details regarding your string</span>
<span class="comment-copy">What happens when the city is "San Francisco," or "Stratford upon Avon?" Might be better off judging the consistency of the preceding characters and slicing them off the front of the string instead?</span>
<span class="comment-copy">@JohnStark agreed, then we'll have to look for some alternative</span>
<span class="comment-copy">@ThatBird Regular expressions? I posted an answer on that.</span>
<span class="comment-copy">@wizzwizz4 upvoting for great explanation. But if text follows no pattern, regex also fails</span>
<span class="comment-copy">@wizzwizz4 why don't you also put a regex resource for O/P to go through it as well</span>
<span class="comment-copy">The weather has to be something, like sunny, hot etc, in that case, this will also come out</span>
