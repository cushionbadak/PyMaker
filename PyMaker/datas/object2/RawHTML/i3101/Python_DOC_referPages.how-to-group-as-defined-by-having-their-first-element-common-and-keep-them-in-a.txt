<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/51505744/how-to-group-sublists-with-matching-values">How to group sublist's with matching values</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I have a list as</p>
<pre><code>list1 = [(4356, 'OPIL', 2), (4356, 'OILY', 3), (5986, 'UISL', 1), (6985, 'LIBK', 3), (6985, 'LIBK', 1)]
</code></pre>
<p>I want output to be like this:
Output:</p>
<pre><code>result = [[(4356, 'OPIL', 2),(4356, 'OILY', 3)],[(5986, 'UISL', 1)], [(6985, 'LIBK', 3), (6985, 'LIBK', 1)]]
</code></pre>
<p>How do we do it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>groupby</code> from <code>itertools</code>:</p>
<pre><code>from itertools import groupby

list1 = [(4356, 'OPIL', 2), (4356, 'OILY', 3), (5986, 'UISL', 1), (6985, 'LIBK', 3), (6985, 'LIBK', 1)]

l = [list(v) for g, v in groupby(list1, key=lambda v: v[0])]
print(l)
</code></pre>
<p>Output:</p>
<pre><code>[[(4356, 'OPIL', 2), (4356, 'OILY', 3)], [(5986, 'UISL', 1)], [(6985, 'LIBK', 3), (6985, 'LIBK', 1)]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming the <em>items inside the list are sorted</em>, you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby()</code></a>:</p>
<pre><code>In [1]: list1 = [(4356, 'OPIL', 2), (4356, 'OILY', 3), (5986, 'UISL', 1), (6985, 'LIBK', 3), (6985, 'LIBK', 1)]

In [2]: from itertools import groupby

In [3]: from operator import itemgetter

In [4]: [list(g) for _, g in groupby(list1, key=itemgetter(0))]
Out[4]: 
[[(4356, 'OPIL', 2), (4356, 'OILY', 3)],
 [(5986, 'UISL', 1)],
 [(6985, 'LIBK', 3), (6985, 'LIBK', 1)]]
</code></pre>
<hr/>
<p>If there are not sorted, you can either pre-sort the list before using <code>groupby()</code>, or use a different strategy - for instance, using <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict()</code></a> to group "similar" items:</p>
<pre><code>In [5]: from collections import defaultdict

In [6]: grouped = defaultdict(list)

In [7]: for item in list1:
            grouped[item[0]].append(item)   

In [8]: [grouped[key] for key in sorted(grouped)] 
Out[8]: 
[[(4356, 'OPIL', 2), (4356, 'OILY', 3)],
 [(5986, 'UISL', 1)],
 [(6985, 'LIBK', 3), (6985, 'LIBK', 1)]]
</code></pre>
</div>
<span class="comment-copy">What do you want to happen for items that share a first element, but are not adjacent?  Should <code>[(1, 2), ('a', 'b'), (1, 3)]</code> be <code>[[(1, 2), (1, 3)], [('a', 'b')]]</code> or remain unchanged?</span>
<span class="comment-copy">I already covered this in the question itself if you look into it @PatrickHaugh</span>
