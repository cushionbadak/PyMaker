<div class="post-text" itemprop="text">
<p>I need to iterate through all <code>.asm</code> files inside a given directory and do some actions on them. </p>
<p>How can this be done in a efficient way?</p>
</div>
<div class="post-text" itemprop="text">
<p>Original answer:</p>
<pre class="lang-py prettyprint-override"><code>import os

for filename in os.listdir(directory):
    if filename.endswith(".asm") or filename.endswith(".py"): 
         # print(os.path.join(directory, filename))
        continue
    else:
        continue
</code></pre>
<p>Python 3.6 version of the above answer, using <a href="https://docs.python.org/3.6/library/os.html" rel="noreferrer"><code>os</code></a> - assuming that you have the directory path as a <code>str</code> object in a variable called <code>directory_in_str</code>:</p>
<pre class="lang-py prettyprint-override"><code>import os

directory = os.fsencode(directory_in_str)

for file in os.listdir(directory):
     filename = os.fsdecode(file)
     if filename.endswith(".asm") or filename.endswith(".py"): 
         # print(os.path.join(directory, filename))
         continue
     else:
         continue
</code></pre>
<p>Or recursively, using <a href="https://docs.python.org/3.6/library/pathlib.html" rel="noreferrer"><code>pathlib</code></a>:</p>
<pre class="lang-py prettyprint-override"><code>from pathlib import Path

pathlist = Path(directory_in_str).glob('**/*.asm')
for path in pathlist:
     # because path is object not string
     path_in_str = str(path)
     # print(path_in_str)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will iterate over all descendant files, not just the immediate children of the directory:</p>
<pre><code>import os

for subdir, dirs, files in os.walk(rootdir):
    for file in files:
        #print os.path.join(subdir, file)
        filepath = subdir + os.sep + file

        if filepath.endswith(".asm"):
            print (filepath)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try using <a href="https://docs.python.org/3/library/glob.html" rel="nofollow noreferrer">glob</a> module:</p>
<pre><code>import glob

for filepath in glob.iglob('my_dir/*.asm'):
    print(filepath)
</code></pre>
<p>and since Python 3.5 you can search subdirectories as well:</p>
<pre><code>glob.glob('**/*.txt', recursive=True) # =&gt; ['2.txt', 'sub/3.txt']
</code></pre>
<p>From the docs:</p>
<blockquote>
<p>The glob module finds all the pathnames matching a specified pattern according to the rules used by the Unix shell, although results are returned in arbitrary order. No tilde expansion is done, but *, ?, and character ranges expressed with [] will be correctly matched. </p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Python 3.4 and later offer <a href="https://docs.python.org/3/library/pathlib.html" rel="noreferrer">pathlib</a> in the standard library. You could do:</p>
<pre><code>from pathlib import Path

asm_pths = [pth for pth in Path.cwd().iterdir()
            if pth.suffix == '.asm']
</code></pre>
<p>Or if you don't like list comprehensions:</p>
<pre><code>asm_paths = []
for pth in Path.cwd().iterdir():
    if pth.suffix == '.asm':
        asm_pths.append(pth)
</code></pre>
<p><code>Path</code> objects can easily be converted to strings.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's how I iterate through files in Python: </p>
<pre><code>import os

path = 'the/name/of/your/path'

folder = os.fsencode(path)

filenames = []

for file in os.listdir(folder):
    filename = os.fsdecode(file)
    if filename.endswith( ('.jpeg', '.png', '.gif') ): # whatever file types you're using...
        filenames.append(filename)

filenames.sort() # now you have the filenames and can do something with them
</code></pre>
<p><strong><em>NONE OF THESE TECHNIQUES GUARANTEE ANY ITERATION ORDERING</em></strong> </p>
<p>Yup, super unpredictable. Notice that I sort the filenames, which is important if the order of the files matters, i.e. for video frames or time dependent data collection. Be sure to put indices in your filenames though!</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not quite happy with this implementation yet, I wanted to have a custom constructor that does <code>DirectoryIndex._make(next(os.walk(input_path)))</code> such that you can just pass the path you want a file listing for. Edits welcome!</p>
<pre><code>import collections
import os

DirectoryIndex = collections.namedtuple('DirectoryIndex', ['root', 'dirs', 'files'])

for file_name in DirectoryIndex(*next(os.walk('.'))).files:
    file_path = os.path.join(path, file_name)
</code></pre>
</div>
<span class="comment-copy">Good answer!  I can add that you need to import the Python "os" module with: - import os</span>
<span class="comment-copy">Please note that in Python 3.6 directory is expected to be in bytes and then listdir will spit out a list of filenames also in bytes data type so you cannot run endswith directly on it.  This code block should be changed to <code>directory = os.fsencode(directory_in_str)          for file in os.listdir(directory):         filename = os.fsdecode(file)         if filename.endswith(".asm") or filename.endswith(".py"):              # print(os.path.join(directory, filename))             continue         else:             continue</code></span>
<span class="comment-copy"><code>print(os.path.join(directory, filename))</code> need to be changed to <code>print(os.path.join(directory_in_str, filename))</code> to get it to work in python 3.6</span>
<span class="comment-copy">If you're seeing this in 2017 or beyond, os.scandir(dir_str) is now available and much cleaner to use. No need for fsencode. <code>for entry in os.scandir(path):       print(entry.path)</code></span>
<span class="comment-copy">Prefer <code>if filename.endswith((".asm", ".py")):</code> to <code>if filename.endswith(".asm") or filename.endswith(".py"):</code></span>
<span class="comment-copy">A reference for the os.walk function is found at the following: <a href="https://docs.python.org/2/library/os.path.html#os.path.walk" rel="nofollow noreferrer">docs.python.org/2/library/os.path.html#os.path.walk</a></span>
