<div class="post-text" itemprop="text">
<p>In Python3 i can use <code>*</code> to accept any number of positional arguments.</p>
<p>A sample demonstrating this:</p>
<pre><code>def a(*args):
    for argument in args:
        print(argument)
a(1,2,3,4)
</code></pre>
<p>Would thus print:</p>
<pre><code>1
2
3
4
</code></pre>
<p>What I'm uncertain is, if the order of positional arguments stored in <code>args</code> is actually guaranteed to be preserved? </p>
<p>Can I trust that if I call <code>a(1,2,3,4)</code> then <code>args</code> is <strong>always</strong> <code>(1,2,3,4)</code> or is this just a side effect of an implementation detail?</p>
<hr/>
<p>While trying to look into this, I saw that order in <code>**kwargs</code> is preserved since <code>Python 3.6</code> and this is specified in <a href="https://www.python.org/dev/peps/pep-0468/" rel="nofollow noreferrer">PEP-468</a> how ever I didn't find any mention of <code>*args</code> in this regard.</p>
</div>
<div class="post-text" itemprop="text">
<p>definitely, it preserves Order because *args take/consider the argument as a tuple data type.</p>
<p>in Python tuple have its Order, always.</p>
<p>Only dictionary is the one data type which will not follow the order in python</p>
</div>
<span class="comment-copy">Yes, it preserves order.</span>
<span class="comment-copy">Sure, it works as you expect.</span>
<span class="comment-copy">Is this documented somewhere?  I couldn't find anything written of it while I was looking into it, though could be I just don't know where to look</span>
<span class="comment-copy"><a href="https://docs.python.org/3/tutorial/controlflow.html#arbitrary-argument-lists" rel="nofollow noreferrer">docs.python.org/3/tutorial/â€¦</a>, These arguments will be wrapped up in a tuple, and tuple preserves order.</span>
<span class="comment-copy">And even dicts will with Python 3.6/3.7+</span>
<span class="comment-copy">While the order of <code>**kwargs</code> is documented and specified in PEP-468, <code>*args</code> is only mentioned to be wrapped into a tuple. While I know tuple will keep its order once made I'm concerned whether its specified that when said tuple is formed, it is done with intention to retain order of the undefined positional arguments. I'm not too familiar with how python maps the given arguments for the function into that tuple, thus the question is more specifically if the resulting tuple is specified to be formed in order of inserted parameters. Or just happens to be due to way it is implemented in CPython</span>
