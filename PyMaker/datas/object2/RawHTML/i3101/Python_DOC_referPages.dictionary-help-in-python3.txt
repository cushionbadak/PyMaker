<div class="post-text" itemprop="text">
<p>I'm trying to print a formatted layout of a list. I've got the main part down but I can't seem to get the numbering right.</p>
<p>Here's the code:</p>
<pre><code>shopping_list = {"eggs": "$2", "milk": "$3.50", "cereal": "$3"}

my_shopping_list = "".join(**n**+". "+item+" "+shopping_list[item]+"\n" for item in shopping_list)

print(my_shopping_list)
</code></pre>
<p>Basically I want to print the items and price in the format:</p>
<p>{number}. {item} {price}\n</p>
<p>So the results should be:</p>
<pre><code>1. eggs $2
2. milk $3.50
3. cereal $3
</code></pre>
<p>It should work if I add more items into the dictionary</p>
<p>But I do not know what to replace <strong>n</strong> with: </p>
<pre><code>**n**+". "+item+" "+shopping_list[item]+"\n" for item in shopping_list
</code></pre>
<p>I've tried using lists to do this</p>
<pre><code>shopping_list = [["eggs", "$2"], ["milk", "$3.50"], ["cereal", "$3"]]

my_shopping_list = "".join(str(n+1)+". "+shopping_list[n][0]+" "+shopping_list[n][1]+"\n" for n in range(len(shopping_list)))

print(my_shopping_list)
</code></pre>
<p>And it works just fine but I need it to work for dictionary so do I find a way to index a dictionary like a list or is there a better way to do it?</p>
<p>Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>You almost have it right. You can adapt your code to use <code>dict.items()</code></p>
<pre><code>my_shopping_list = "".join(str(i+1)+". "+ k + " "+ v +"\n" for i, (k,v) in enumerate(shopping_list.items()))
</code></pre>
<p>But I would recomend using <code>str</code> format, and joining using <code>\n</code></p>
<pre><code>print("\n".join('{}. {} {}'.format(i, k, v) \
      for i, (k,v) in enumerate(shopping_list.items())))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is one approach</p>
<pre><code>shopping_list = {"eggs": "$2", "milk": "$3.50", "cereal": "$3"}
my_shopping_list = "\n".join(("{0} {1} {2}".format(i, v[0], v[1]) for i, v in enumerate(shopping_list.items(), 1)))
print(my_shopping_list)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>1 eggs $2
2 milk $3.50
3 cereal $3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Make it readable using <a href="https://docs.python.org/3/library/itertools.html#itertools.count" rel="nofollow noreferrer"><code>itertools.count</code></a>.</p>
<pre><code>from itertools import count

shopping_list = {"eggs": "$2", "milk": "$3.50", "cereal": "$3"}

c = count(1)
for k, v in shopping_list.items():
    print(f'{next(c)}. {k} {v}')

# 1. eggs $2
# 2. milk $3.50                                               
# 3. cereal $3
</code></pre>
</div>
<span class="comment-copy">Note, you're not using a dictionary comprehension in this code</span>
<span class="comment-copy">Oh, thanks. May I know what is it called then?</span>
<span class="comment-copy">What does enumerate() do?</span>
<span class="comment-copy">@vluke <code>enumerate</code> will generate for you automatically an index for each item for a iterable. So for example, if you have <code>l = ['a', 'b', 'c']</code> , enumerate(l) will yield <code>[(0, 'a'), (1, 'b'), (2, 'c')]</code>. Can also check <a href="https://docs.python.org/2.3/whatsnew/section-enumerate.html" rel="nofollow noreferrer">here</a></span>
<span class="comment-copy">This is perfect, I never knew that function existed. Thanks for your help</span>
<span class="comment-copy">@vluke consider <a href="https://meta.stackexchange.com/questions/5234/how-does-accepting-an-answer-work">accepting the answer</a> if helped :)</span>
<span class="comment-copy">Could you explain why you changed what you changed? Im sorta new</span>
<span class="comment-copy">I just converted the comprehension to a generator....better approach</span>
<span class="comment-copy">May I know why you added "f" Infront of the string and what count from itertools does?</span>
<span class="comment-copy">IMO, that's an unnecessary use of <code>itertools</code> once <code>enumerate</code> is a built-in function that gives you just that</span>
<span class="comment-copy"><code>f</code> before string does formatting a string. Read about it <a href="https://realpython.com/python-f-strings/" rel="nofollow noreferrer">here</a>. Regarding <code>count</code>, please refer link in my answer.</span>
<span class="comment-copy">@RafaelC I agree; there are different ways of doing stuffs. :)</span>
<span class="comment-copy">@Austin agreed :) I appreciate showing the use of <code>f''</code> and itertools, but for this problem, I believe that'd be unnecessary dependencies added to project for something as simple as a counter</span>
