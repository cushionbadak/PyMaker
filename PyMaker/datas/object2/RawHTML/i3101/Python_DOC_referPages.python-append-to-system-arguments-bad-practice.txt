<div class="post-text" itemprop="text">
<p>I'm parsing system arguments in my Python project using <code>sys.argv</code>. At some point i had to modify the script after having written the logic that parses system args. I added a line the basically appends a string to <code>sys.argv</code> so the logic that parses it won't be changed - </p>
<p><code>sys.argv.append('some string here')</code></p>
<p>Is it a bad practice to modify the system arguments after they have been created for the program ?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>It is bad  practice</strong> to modify <code>sys.argv</code> in Python and it's equivalent in other languages.</p>
<p>In these situations I recommend a <code>parsed_args</code> variable which has all your parsed data from <code>sys.argv</code>, any default values that you would like to set, and any modifications that "middleware" would make.</p>
</div>
<div class="post-text" itemprop="text">
<p>In my opinion in such case it would be better to first parse those arguments using <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">argparse</a>. </p>
<p>That way you can get <code>Namespace</code> object, that can be modified and much easier to maintain than hardcoding<code>sys.argv</code>.</p>
<p>After that you can modify <code>Namespace</code> any way you want</p>
<p>Small example:</p>
<pre><code>def parse_args():
    parser = argparse.ArgumentParser(description="Description")
    parser.add_argument('--file_path')
    parsed_args = parser.parse_args()
    return parsed_args

if __name__ == '__main__':
    args = parse_args()
    print(args.file_path) # the argument passed while running script
    args.another_value = "value"
    print(args.another_value) # value added within code
    setattr(args, 'yet_another', 'value') # another way to set attributes
</code></pre>
</div>
<span class="comment-copy">I don't quite understand why you want to do this to begin with, but one reason I can come up with to <i>not</i> do this would be creating a headache for future maintainers of your code. If someone later writes code to use the contents of <code>sys.argv</code> and the arguments actually passed do not match those, it may have unintended effects.</span>
<span class="comment-copy">Maybe obvious, but beware of <code>parsed_args = sys.argv</code> because modifying <code>parsed_args</code> then changes <code>sys.argv</code> as well.</span>
<span class="comment-copy">@clemisch, I think @dotancohen means <code>parsed_args = sys.argv[:]</code> and not <code>parsed_args = sys.argv</code>. This way the list is duplicated and not aliased.</span>
<span class="comment-copy">@clemisch, et al: In fact I personally set each <code>parsed_args</code> element explicitly, but you are correct in mentioning the warning.</span>
