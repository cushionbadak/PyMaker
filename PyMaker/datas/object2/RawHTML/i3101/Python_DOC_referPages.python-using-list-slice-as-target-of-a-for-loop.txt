<div class="post-text" itemprop="text">
<p>I found this code snippet to be very interesting.</p>
<pre><code>a = [0, 1, 2, 3]

for a[-1] in a:
    print(a)
</code></pre>
<p>Output is as follows:</p>
<pre><code>[0, 1, 2, 0]
[0, 1, 2, 1]
[0, 1, 2, 2]
[0, 1, 2, 2]
</code></pre>
<p>I am trying to understand why python does that. Is it because python is trying to re-use the index? For loop somehow slices the list?</p>
<p>We can add or delete an element while iterating the list, but when we are trying to access the variable using index, it gives bizarre output.</p>
<p>Can someone help me understand the interaction between for loop and index in the list? Or simply explain this output?</p>
</div>
<div class="post-text" itemprop="text">
<p>It works as expected. (For some interpretation of "expected", at least.)</p>
<p>Re-writing your code to this, to prevent any misinterpretation of what <code>a[-1]</code> is at any point:</p>
<pre><code>a = [a for a in range(0,4)]
for b in a:
    print (b)
    a[-1] = b
    print (a)
</code></pre>
<p>shows us</p>
<pre><code>0
[0, 1, 2, 0]
1
[0, 1, 2, 1]
2
[0, 1, 2, 2]
2
[0, 1, 2, 2]
</code></pre>
<p>which makes it clear that the <code>b</code> <em>assignment</em> to <code>a[-1]</code> is done immediately, changing the list while iterating.</p>
<p>The four loops do the following:</p>
<ol>
<li><code>a[-1]</code> gets set to the first value of the list, <code>0</code>. The result is now <code>[0,1,2,0]</code>.</li>
<li><code>a[-1]</code> gets set to the second value, <code>1</code>. The result is (quite obviously) <code>[0,1,2,1]</code>.</li>
<li><code>a[-1]</code> gets set to <code>2</code> and so the result is <code>[0,1,2,2]</code> – again, only <code>a[-1]</code> gets changed.</li>
<li>Finally, <code>a[-1]</code> gets set to the last value in <code>a</code>, so effectively it does not change and the final result is <code>[0,1,2,2]</code>.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>a[-1] prints the same value in a[3], the last index in the list. Edit: see comment below for the explanation for this.</p>
<p>The result reads as follows:</p>
<pre><code>[0, 1, 2, 0] -&gt; same as [0, 1, 2, 3], but with a[i] (in this case, a[-1] == a[3]) is replaced with the value at a[0]
[0, 1, 2, 1] -&gt; [0, 1, 2, 3] but a[i] is replaced with the value at a[1]
[0, 1, 2, 2] -&gt; [0, 1, 2, 3] but a[i] is replaced with the value at a[2]
[0, 1, 2, 2] -&gt; [0, 1, 2, 3] but a[i] is replaced with the value at a[3] from the previous iteration.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What happens is</p>
<pre><code>         0 SETUP_LOOP              24 (to 26)
          2 LOAD_GLOBAL              0 (a)
          4 GET_ITER
    &gt;&gt;    6 FOR_ITER                16 (to 24)
          8 LOAD_GLOBAL              0 (a)     //ARRAY (TOS1)
         10 LOAD_CONST               2 (-1)    //DEST (TOS)
         12 STORE_SUBSCR                       //ARRAY[DEST] = TOS2*
        14 LOAD_GLOBAL              1 (print)
         16 LOAD_GLOBAL              0 (a)
         18 CALL_FUNCTION            1
         20 POP_TOP
         22 JUMP_ABSOLUTE            6
    &gt;&gt;   24 POP_BLOCK
    &gt;&gt;   26 LOAD_CONST               0 (None)
         28 RETURN_VALUE
</code></pre>
<p>*So if someone could clarify that TOS2 is actually the 'visited' value of the ARRAY?</p>
</div>
<span class="comment-copy">Interesting question. I'd try to find a better title though. It's very generic, and would you actually consider it an "issue"?</span>
<span class="comment-copy">Imagine <code>for x in a: a[-1] = x</code></span>
<span class="comment-copy">At first I thought the code couldn't work, then I thought that the last output should have a three on the back. Softening. Thanks for asking.</span>
<span class="comment-copy">It's only the <code>a[-1]</code> that makes this moderately interesting. The equivalent <code>for a[0] in a</code> makes it perfectly clear there are no slices, no unexpected interaction, and no bizarre output. It's also more clear that only one element ever changes.</span>
<span class="comment-copy">"It probably has an index out of bounds in the negative direction": no, this is <a href="https://stackoverflow.com/q/11367902/2564301">perfectly ordinary Python syntax</a>. It is mentioned in <a href="https://docs.python.org/3/library/stdtypes.html?highlight=negative#common-sequence-operations" rel="nofollow noreferrer">the official documentation</a> under #3.</span>
