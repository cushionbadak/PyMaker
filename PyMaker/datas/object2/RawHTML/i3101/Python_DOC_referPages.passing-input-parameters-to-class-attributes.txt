<div class="post-text" itemprop="text">
<p>I'm devloping a module that works with another module. The other module requires class attributes to be set before the <code>__init__</code> method (let's work under the assumption that the behavior of this other module cannot be changed). These class attributes (<code>Signal</code> in the example below) are derived partially from an object that comes from my code. </p>
<p>The method shown below is a disaster for many reasons. For example, </p>
<ol>
<li><code>my_obj1</code> and <code>my_obj2</code> are not guaranteed to exist; the 
import in the other module will fail in this case. </li>
<li>There could be a need to create 2 different instances of 
<code>OtherModuleVodoo1</code> using 2 different instances from my code 
(<code>my_obj</code>).</li>
</ol>
<p>This is a skeleton of the code to explain:</p>
<pre><code>import Signal, Device
from my_module.setup import my_obj1, my_obj2

class OtherModuleVodoo1(Device):
    # The class signal attributes must be defined before the __init__ 
    # and rely upon an object from my module

    x = Signal(my_obj1.cmds['thing_x'], 'thing_x')
    y = Signal(my_obj1.cmds['thing_y'], 'thing_y')

    # ...
    # ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class OtherModuleVodoo2(Device):
    x = Signal(my_obj2, 'thing1')
    y = Signal(my_obj2, 'thing2')

    # ...
    # ...

    def __init__(self, *args, **kwargs):
       super().__init__(*args, **kwargs)


# now in my file I do this
dev1 = OtherModuleVodoo1()
dev2 = OtherModuleVodoo2()

# but would much prefer to do this 
dev1 = OtherModuleVodoo(my_object_input = my_obj1)
# where I don't need ```Vodoo1, Vodoo2``` but can have a generic 
solution. 
</code></pre>
<h2>Question:</h2>
<p>Is there a way to "input" parameters to the construction of a class (not to the initialization of a class instance)?</p>
<h2>What I tried and why each did not work.</h2>
<ol>
<li>Metaclasses. These feel close to the right approach but I wasn't able to get it to work. </li>
<li><code>__new__</code> but this doesn't populate the namespace within the class definition (before the <code>__init__</code>)</li>
<li>Setting <code>my_obj1 = None</code> until an <code>OtherModuleVodoo1</code> instance is needed and then modifying the class attribute before instantiating an object:</li>
</ol>
<p>An example of attempt 3:</p>
<pre><code>xyq = None
class Test2():
    print(xyq)
    def __init__(self):
        print(self.xyq)

Test2.xyq = 55
t2 = Test2()
</code></pre>
<p>However, here the output is:</p>
<pre><code>None
55
</code></pre>
<p>I anticipate responses that focus completely on changing the approach. That is warranted. However, my immediate question is how to best band-aid what I have. </p>
</div>
<div class="post-text" itemprop="text">
<p>This may need some massaging to make it work with your code, but you can use <a href="https://docs.python.org/3/reference/datamodel.html#object.__init_subclass__" rel="nofollow noreferrer"><code>__init_subclass__</code> </a> in a parent class to accept arguments to class creation.  This was introduced in Python 3.6</p>
<pre><code>class Voodoo:
    def __init_subclass__(cls, myobj, **kwargs):
        super().__init_subclass__(**kwargs)
        cls.x = Signal(my_obj1.cmds['thing_x'], 'thing_x')
        cls.y = Signal(my_obj1.cmds['thing_y'], 'thing_y')

class Voodoo1(Voodoo, Device, myobj=myobj1):
    pass
</code></pre>
<p>You could also make <code>Voodoo</code> a <code>Device</code> subclass to clean up the signatures of your subclasses.</p>
</div>
<div class="post-text" itemprop="text">
<p>Example with a metaclass in Python 3:</p>
<pre><code>class Meta(type):
    def __new__(cls, name, bases, dct):
        dct['xyq'] = 55

        return super().__new__(cls, name, bases, dct)

class A(metaclass=Meta):
    ... # A.xyq == 55

class B(A):
    ... # B.xyq == A.xyq == 55
</code></pre>
<p>The metaclass takes action when the classes A and B are <em>created</em> (not <em>instantiated</em>).</p>
</div>
<span class="comment-copy">Metaclasses can modify the class before its creation, but only once per class definition and only on code startup. Is that OK?</span>
<span class="comment-copy">That would be OK and would get me much closer to a reasonable solution!</span>
