<div class="post-text" itemprop="text">
<p>I need to make sequence of random strings, which increase(decrease) for alphabetic oder. For example: "ajikfk45kJDk", "bFJIPH7CDd", "c".</p>
</div>
<div class="post-text" itemprop="text">
<p>The simplest way I can think of is</p>
<pre><code>from random import randint
a = ''.join(sorted([chr(randint(33,127)) for i in range(randint(1,20))], reverse = False))
print(a)
</code></pre>
<p><code>reverse = True</code> makes it descending</p>
</div>
<div class="post-text" itemprop="text">
<p>The simplest thing to do is to create N random strings and then sort them.</p>
<p>So, how do you create a random string? Well, you haven't specified what your rule is, but your three examples are strings of 1 to 12 characters taken from the set of ASCII lowercase, uppercase, and digits, so let's do that.</p>
<pre><code>length = random.randrange(1, 13)
letters = random.choices(string.ascii_letters + string.digits, k=length)
string = ''.join(letters)
</code></pre>
<p>So, just do this N times, then sort it.</p>
<p>Putting it together:</p>
<pre><code>chars = string.ascii_letters + string.digits
def make_string():
    return ''.join(random.choices(chars, k=random.randrange(1, 13)))
def make_n_strings(n):
    return sorted(make_string() for _ in range(n))
</code></pre>
<p>This should be simple enough that you can customize it however you want. Want case-insensitive sorting? Just add <code>key=str.upper</code> to the <code>sorted</code>. Want some other distribution of lengths? Just replace the <code>randrange</code>. And so on.</p>
</div>
<div class="post-text" itemprop="text">
<p>There's a lot of ways to do that, and this an easy and simple example to do that in <strong>Python 3</strong> using Ascii char codes:-</p>
<pre><code>from random import randint

def generateString(minLength, maxLength):
    result = "";
    resultLength = randint(minLength, maxLength)
    for i in range(resultLength):
        charType = randint(1,3)

        if(charType == 1):
            #number
            result += chr(randint(48, 57))
        elif(charType == 2):
            #upper letter
            result += chr(randint(65, 90))
        elif(charType == 3):
            #lower letter
            result += chr(randint(97, 122))

    return result;

#Example
print(generateString(1,20))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <strong>chr()</strong> Python 3 function in a loop while generating random number in the ASCII category range you want.</p>
<p>You can find all the <a href="http://www.ascii-reference.org/ascii-categories.html" rel="nofollow noreferrer">ASCII categories</a> here or on Wikipedia.</p>
<p>For exemple :</p>
<pre><code>chr(99)
-&gt; equals c
</code></pre>
<p>More information about the chr() function on <a href="https://docs.python.org/3/library/functions.html#chr" rel="nofollow noreferrer">Python 3 official documentation</a>.</p>
</div>
<span class="comment-copy">Your example strings do not strictly increase or decrease in any collating sequence or alphabetical order I know.  Please clarify.</span>
<span class="comment-copy">You need to have 26 strings where the first character is the letter of the alphabet respective to its position in the generated sequence, and the remaining characters are random? Why not just generate 26 random strings of <code>required_length - 1</code> and prepend the letters of the alphabets to them?</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/2257441/random-string-generation-with-upper-case-letters-and-digits-in-python">Random string generation with upper case letters and digits in Python</a></span>
<span class="comment-copy">or you can use <code>random.choices(string.ascii_letters + string.digits, k=N)</code> for a random length N string, from <a href="https://stackoverflow.com/a/2257449/5986907">stackoverflow.com/a/2257449/5986907</a></span>
