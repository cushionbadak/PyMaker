<div class="post-text" itemprop="text">
<p>I have a python script which runs another python script as a subprocess. The original script communicates with the subprocess using stdin and stdout. I cannot get the subprocess to reply to messages from the original process.</p>
<p>As a minimal example, say I have a script asker.py that wants to get an answer from answerer.py. Asker sends a message to stdin of answerer, and answerer has to send a message back, which asker will print.</p>
<p>asker.py looks like this:</p>
<pre><code>import sys
import subprocess as sub

answerer = sub.Popen(["python", "answerer.py"], stdin=sub.PIPE, stdout=sub.PIPE)
answerer.stdin.write("Are you listening?\n")
answerer.stdin.flush()
reply = answerer.stdout.readline()
print reply
</code></pre>
<p>answerer.py looks like this:</p>
<pre><code>while (True):
   line = raw_input()
   print "Yes!"
</code></pre>
<p>I'm not seeing anything get printed by asker.py. Instead, it just hangs on the <code>readline()</code> call. If I run answerer.py directly from the command line, it replies to input that I type in just fine, so how do I get it to reply to asker?</p>
</div>
<div class="post-text" itemprop="text">
<p>The subprocess isn't actually writing anything to its own stdout, so nothing is reaching the parent.</p>
<p>The <a href="https://docs.python.org/3/library/sys.html#sys.stdout" rel="nofollow noreferrer">documentation for sys.stdout</a> notes</p>
<blockquote>
<p>When interactive, stdout and stderr streams are line-buffered. Otherwise, they are block-buffered like regular text files.</p>
</blockquote>
<p>That means that when you <code>print "Yes!"</code>, it goes into an in-memory buffer, and sits there until it's explicitly flushed, some amount of output data is produced (I think 4 KB is typical), or the program exits normally.</p>
<p>The best fix would be to update your subprocess script to something like</p>
<pre><code>#!/usr/bin/env python3
import sys
while True:
  line = input()
  sys.stdout.write("Yes!\n")
  sys.stdout.flush()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Flush <code>stdout</code> not <code>stdin</code>:</p>
<pre><code>answerer.stdout.flush()  # line 6
</code></pre>
<p>Or test without <code>while True:</code> so the answerer.py gets terminated and <code>Yes!</code> gets flushed automatically.</p>
<p>Tested on</p>
<pre><code>Python 2.7.13 (default, Apr  4 2017, 08:47:57) 
[GCC 4.2.1 Compatible Apple LLVM 8.1.0 (clang-802.0.38)] on darwin
</code></pre>
</div>
