<div class="post-text" itemprop="text">
<p>So I have the following example of code; simultaneously iterates over multiple sequences combined with enumerate, assigning the values to tuple variable after which outputs it.</p>
<pre><code>def PairValuesWithIndexToTuples(self,val1,val2):
  t =()
  for i, (a,b) in enumerate(zip(val1,val2)):
    t += (i,a,b)
  return t
</code></pre>
<p>What I want to achieve is something like this if it is possible: 
I have been searching around but I could not find yet a solution which achieves my results from the method written above: </p>
<pre><code>def PairValuesWithIndexToTuples(self,val1,val2):
  t =()
  t += for i, (a,b) in enumerate(zip(val1,val2))
  return t
</code></pre>
<p>or </p>
<pre><code>return t+= for i, (a,b) in enumerate(zip(val1,val2))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps you're looking for a flattened list or a flattened tuple? Not clear from your question, so I'll just include everything.</p>
<pre><code>In [79]: val1 = [1,2,3]

In [80]: val2=[4,5,6]

In [81]: [(i, a, b) for i, (a,b) in enumerate(zip(val1,val2))]
Out[81]: [(0, 1, 4), (1, 2, 5), (2, 3, 6)]

In [82]: [k for j in [(i, a, b) for i, (a,b) in enumerate(zip(val1,val2))] for k in j]
Out[82]: [0, 1, 4, 1, 2, 5, 2, 3, 6]

In [84]: tuple(k for j in [(i, a, b) for i, (a,b) in enumerate(zip(val1,val2))] for k in j)
Out[84]: (0, 1, 4, 1, 2, 5, 2, 3, 6)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can make a generator expression to create the tuples, then <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>chain.from_iterable</code></a> from that expression to get the flattened result</p>
<pre><code>from itertools import chain

tuple(chain.from_iterable((i, a, b) for i, (a,b) in enumerate(zip(val1,val2))))
</code></pre>
<p>This looks much nicer as a multiline function</p>
<pre><code>def pair_with_index(*its):
    e = enumerate(zip(*its))
    flattened = ((i, *t) for i, t in e)
    c = chain.from_iterable(flattened)
    return tuple(c)

pair_with_index([1, 2, 3], [4, 5, 6])
# (0, 1, 4, 1, 2, 5, 2, 3, 6)
</code></pre>
<p>Edit:</p>
<p>My original code (for a tuple of tuples) was </p>
<pre><code>def pair_with_index(val1, val2):
    return tuple((i, a, b) for i, (a,b) in enumerate(zip(val1,val2)))

pair_with_index([1, 2, 3], [4, 5, 6])
# ((0, 1, 4), (1, 2, 5), (2, 3, 6))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because this is so much clearer...</p>
<pre><code>sum(((i, a, b) for i, (a,b) in enumerate(zip(val1, val2))), ())
</code></pre>
<p>example:</p>
<pre><code>val1 = 'hello'

val2 = range(5)

sum(((i, a, b) for i, (a,b) in enumerate(zip(val1, val2))), ())
# -&gt; (0, 'h', 0, 1, 'e', 1, 2, 'l', 2, 3, 'l', 3, 4, 'o', 4)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While I don't advocate abusing <code>sum</code>, it is possible to do this in order to concatenate tuples together</p>
<pre><code>sum(tuples, ())
</code></pre>
<p>Or in your case</p>
<pre><code>sum(((i, a, b) for i, (a, b) in enumerate(zip(val1, val2))), ())
</code></pre>
<p>It is important to note that this can be inefficient, given the behaviors of sum. And it is not quite as clear in this instance.</p>
<p><strong>Note</strong>: I do not advocate using this in production code. It is merely to show that it is possible.</p>
</div>
<span class="comment-copy"><b>Never</b> ask for one-liner. Instead, ask for short and clean code. Otherwise you should use <code>exec('for i,(a,b) in enumerate(zip(val1,val2)):\nt+=(i,a,b);')</code>.</span>
<span class="comment-copy">Thnaks for the comment @Acharya. Its good to know I can also achieve that. I was though looking to get a tuples of tuples return. But I just wanted to optimise my code in shorter amount of code possible. You can have a look at the comment I posted to Patrick</span>
<span class="comment-copy">That's a different result - You have a tuple of tuples rather than a tuple of values.</span>
<span class="comment-copy">@FHTMitchell Fixed.</span>
<span class="comment-copy">Thanks for the comment @PatrickHaugh. I was actually looking for obtaining a tuple of tuples but I wanted to know if i could rewrite my code in a more optimised way. So instead of having 5 lines of code I could only have 2 or 3.</span>
<span class="comment-copy">Looking at my first code snipped I wanted to know if I can achieve something like: def PairValuesWithIndexToTuples(self,val1,val2): return t+= for i, (a,b) in enumerate(zip(val1,val2))  or def PairValuesWithIndexToTuples(self,val1,val2):  t =()   t += for i, (a,b) in enumerate(zip(val1,val2))   return t</span>
<span class="comment-copy">@nclaudiuf Is the output of my edit more what you're looking for?  The problem with posting examples with made-up syntax is that I'm not sure which result you're looking for.  Could you provide sample inputs/outputs?</span>
<span class="comment-copy"><a href="https://stackoverflow.com/a/952946/5267751">Append on tuples forms a monoid too</a></span>
<span class="comment-copy"><code>functools.reduce(lambda a,b: a+b, ((i, a, b) for i, (a,b) in enumerate(zip(val1, val2))))</code> is faster here -- I think <code>sum(x, [])</code> is O(n^2)</span>
<span class="comment-copy">@MoxieBall <a href="https://stackoverflow.com/questions/952914/making-a-flat-list-out-of-list-of-lists-in-python#comment77806270_952946">Yes it is</a></span>
<span class="comment-copy">I am wrong, functools.reduce is not faster. itertools.chain is the way to go.</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/952914/making-a-flat-list-out-of-list-of-lists-in-python#comment77806270_952946">Quadratic</a>...</span>
<span class="comment-copy">you just copied my answer</span>
<span class="comment-copy">@FHTMitchell <a href="https://meta.stackexchange.com/questions/1096/how-should-we-deal-with-duplicate-answers" title="how should we deal with duplicate answers">meta.stackexchange.com/questions/1096/â€¦</a></span>
<span class="comment-copy">@FHTMitchell no, we just answered within 30 seconds of each other. Yours popped up as "new answer" right as I hit submit :)</span>
<span class="comment-copy">@FHTMitchell I'd be willing to retract my answer, but I did not copy yours. And I resent the accusation given they were submitted within a few seconds of each other</span>
