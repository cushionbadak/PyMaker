<div class="post-text" itemprop="text">
<p>I have a file structure like the following:</p>
<pre><code>root/
    v1/
    __init__.py
    example_1.py
    script/
        __init__.py
        classification.py
        prediction.py
        example2.py
</code></pre>
<p>classification looks like this:</p>
<pre><code>#classification.py    
print(__name__)
from .prediction import predict_func
def func1():
    predict_func()
</code></pre>
<p>This works fine for example1.py that looks like this</p>
<pre><code>#example1.py
from script.classification import func1
func1()
</code></pre>
<p>but import classification from example2.py like the following will fail</p>
<pre><code>#example2.py
from classification import func1
func1()    
</code></pre>
<p>because in the example2.py scenario <code>__name__</code> in classification would simply be <code>classification</code> rather than <code>script.classification</code> as example1.py, therefore there's no parent node here, hence the import module failed.</p>
<p>I know one of the solution is to add the script directory to sys.path in both example1.py and exaple2.py, and use <code>from prediction import predict_func</code> in classificationo. This will work in both example1.py and example2.py, but is this a good method, and is there any other alternatives?</p>
</div>
<div class="post-text" itemprop="text">
<p>Since <code>example_1.py</code> is in the <code>root</code> directory, this make me think that <code>root</code> is the source root of your project. So, this directory must appear in the Python path, ie: <code>sys.path</code>.</p>
<p>And, each directory which is under <code>root</code> should be a Python package. So, <code>script</code> must have a <code>__init__.py</code> file (usually empty).</p>
<p>You should take a look in the official Python tutorial about <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">Modules</a>. </p>
<p><strong>Edit</strong></p>
<p>In your second example (below) you try to import classification as if it is a root package but it is not.</p>
<pre><code># example2.py
from classification import func1
func1()
</code></pre>
<p>To fix that, you need to use relative import or a full package name:</p>
<pre><code># example2.py
from script.classification import func1
func1()
</code></pre>
<p>Of course, to run your example, you need to do:</p>
<pre><code>python -m script.example2
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/49129300/python-submodule-importing-madness">Python Submodule Importing Madness</a></span>
<span class="comment-copy">Isn't it <code>from ..classification import func</code> in <code>example2.py</code>?</span>
<span class="comment-copy">I do have <code>__init__.py</code> in script and v1. I updated the structure. But this still doesn't solve the relative path problem.</span>
<span class="comment-copy">@I-PINGOu. I edited my answer. Do you need clarifications? If not, you can <a href="https://stackoverflow.com/help/someone-answers">Vote on it and accept it</a>.</span>
<span class="comment-copy">thank you for your answer. I just tested it and it works fine with <code>python -m script.example2</code> if I run the command from v1. But it does not work if I run the interpreter from root. I think that because -m option add current working directory to sys.path so script.classification works when cwd is v1</span>
