<div class="post-text" itemprop="text">
<p>In python, How can we calculate the first day of the week when given a year and the particular week number of the year?</p>
<p>Note that date should be in format <code>YYYY-MM-DD</code>. Year and the week number is given in <code>int</code> format..</p>
</div>
<div class="post-text" itemprop="text">
<p>to get the beginning date of the week , try this</p>
<pre><code>datetime.today() - timedelta(days=datetime.today().isoweekday() % 7)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I am making the following assumptions about what your question means. If they are off, it should not be hard to adjust the code.
1) The first day of the week is Sunday. (so the answer is always a Sunday)
2) The week in which January 1 falls is week 1 (not 0).
Then the work breaks down into two parts.
a) Figure out the first day of the first week.
b) Add the right number of days onto that.
In Python, it looks as follows:</p>
<pre><code>import datetime
def firstDayOfWeek1(y):
    #takes a year and says the date of the first Sunday in the week in which January 1 falls
    janDay = datetime.date(y,1,1)
    while (janDay.weekday()!=6):#back up until Sunday, change if you hold Sunday is not the first day of the week
        janDay=janDay-datetime.timedelta(days=1)
    return janDay
def firstDayOfWeekN(y, n):#takes a year and a week number and gives the date of the first Sunday that week
    return firstDayOfWeek1(y)+datetime.timedelta(weeks=(n-1))
def formattedFirstDayOfWeekN(y, n):#takes a year and a week number and gives the date of the first Sunday that week
    return firstDayOfWeekN(y, n).isoformat()
#example
print formattedFirstDayOfWeekN(2018,2)#2018-01-07, first day of second week of January this year
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I am using an algorithm which starts with a close-by date and then simply loops down till it finds the desired result. I am sacrificing some CPU cycles for ease of readability since the cost is not significant. I have done some limited testing but I hope the general idea is clear. Let me know your thoughts. </p>
<pre><code>#This is the input in integer format
input_year = 2018
input_week = 29

#The general idea is that we will go down day by day from a reference date    
#till we get the desired result.
#The loop is not computationally intensive since it will 
#loop at max around 365 times.
#The program uses Python's ISO standard functions which considers Monday as 
#the start of week.

ref_date = date(input_year+1,1,7) #approximation for starting point
#Reasoning behind arguments: Move to next year, January. Using 7 as day    
#ensures that the calendar year has moved to the next year
#because as per ISO standard the first week starts in the week with Thursday

isoyear,isoweek,isoday = ref_date.isocalendar()
output_date = ref_date #initialize for loop
while True:
    outisoyear,outisoweek,outisoday = output_date.isocalendar()
    if outisoyear == input_year and outisoweek == input_week and outisoday == 1:
        break
    output_date = output_date + timedelta(days=-1)

print(output_date)
</code></pre>
</div>
<span class="comment-copy">Welcome to SO! Please take the <a href="https://stackoverflow.com/tour">tour</a> and be sure to read <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>. What have you tried so far with the <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer">datetime</a> documentation?</span>
<span class="comment-copy">So if January 1 was a Wednesday, and you tell me week 1, am I supposed to say December something of the previous year? And is Sunday the first day of the week?</span>
<span class="comment-copy">That would be a Monday. Every week starts on a Monday (ISO 8601)</span>
<span class="comment-copy">but notice he wants us to not necessarily work with this week. This could be a start, though.</span>
<span class="comment-copy">ISO 8601 defines Monday as the first day of the week, not Sunday. <a href="https://en.wikipedia.org/wiki/ISO_week_date" rel="nofollow noreferrer">en.wikipedia.org/wiki/ISO_week_date</a></span>
<span class="comment-copy">and yet today somebody wanted Sunday <a href="https://stackoverflow.com/questions/51419767/equivalent-of-excels-weeknum-function-in-python/51426521#51426521" title="equivalent of excels weeknum function in python">stackoverflow.com/questions/51419767/â€¦</a> . In any case changing !=6 to !=0 would handle that. I tried to write it so it would be just one change.</span>
<span class="comment-copy">Also, if we go there, the above would need to be adapted to make the week containing the first Thursday of the year the first week of the year, and numbered as week 1. I took my best guess at what the person asking the question meant.</span>
<span class="comment-copy">I believe that it is more common in the US and Canada to use Sunday but the ISO standard is Monday and your right, it's a simple adjustment.</span>
<span class="comment-copy">@RolfofSaxony Then to clinch making it pure ISO aside from changing that !=6 to !=0 I would say janDay = datetime.date(y,1,4), and leave everything else alone? [assuming one valued some efficiency; otherwise there is a simple but gross approach that would start on January 1 or late December and keep adding days until all 3 parts of isocalendar match]</span>
<span class="comment-copy">at least once outisoday==1 you could go by weeks=-1? I guess like you say, what you are doing is not especially expensive, though.</span>
