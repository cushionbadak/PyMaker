<div class="post-text" itemprop="text">
<p>Suppose I have a string:</p>
<pre><code>temp = "0.1"
</code></pre>
<p>When I run <code>int(temp)</code>:</p>
<p>I get the following error:</p>
<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: invalid literal for int() with base 10: '0.1'
</code></pre>
<p>But when I run <code>int(float(temp))</code>:</p>
<p>I get the correct output i.e. <code>0</code></p>
<hr/>
<p><strong>Why does converting to <code>float</code> and then converting to <code>int</code> work but directly converting to <code>int</code> not work ?</strong></p>
<p>Thanks and regards</p>
</div>
<div class="post-text" itemprop="text">
<p>It is because your string has float format. So when you directly cast "0.1" to int, it returns a error. But if you cast to float and after to int, it is able to truncate your number.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is <a href="https://docs.python.org/2/library/functions.html#int" rel="nofollow noreferrer">documented</a> behaviour (emphasis mine):</p>
<blockquote>
<p>If <code>x</code> is a number, it can be a plain integer, a long integer, or a floating point number. If <code>x</code> is floating point, the conversion <strong><em>truncates towards zero</em></strong>.</p>
<p>If <code>x</code> is not a number or if <code>base</code> is given, then <code>x</code> must be a string or Unicode object <strong><em>representing an integer literal</em></strong> in radix <code>base</code></p>
</blockquote>
<p>So as to your question <em>why</em>, the only answer is: because it is like that by design.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the python <a href="https://docs.python.org/3.6/library/functions.html#int" rel="nofollow noreferrer">docs</a></p>
<blockquote>
<p>If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in radix base. Optionally, the literal can be preceded by + or - (with no space in between) and surrounded by whitespace. A base-n literal consists of the digits 0 to n-1, with a to z (or A to Z) having values 10 to 35. The default base is 10. The allowed values are 0 and 2â€“36. Base-2, -8, and -16 literals can be optionally prefixed with 0b/0B, 0o/0O, or 0x/0X, as with integer literals in code. </p>
</blockquote>
<p><strong>then x must be a string, bytes, or bytearray instance representing an integer</strong>
So if you add a <code>.</code> to the string it won't represent an integer anymore</p>
</div>
<div class="post-text" itemprop="text">
<p>If you pass a string to <code>int</code>, it only works if the string directly represents an integer.  It doesn't work if the string represents a non-integer number.  But if you pass a float to <code>int</code>, it always works, by truncating the float.  <code>int</code> just doesn't accept "strings that could be made into ints by first making them into floats and then truncating them"; it only accepts strings that directly represent integers.  That's just how <code>int</code> works.</p>
</div>
<div class="post-text" itemprop="text">
<p>The difference is that numeric objects like floats have a special <code>__int__</code> or <code>__trunc__</code> method which computes their integer value while strings are parsed. See <a href="https://docs.python.org/3/library/functions.html#int" rel="nofollow noreferrer">int()</a> in the docs.</p>
<p>Thus the result of <code>int(0.1)</code> comes from the <code>O.1</code> object and the result of <code>int("0.1")</code> comes from the <code>int()</code> function.</p>
</div>
<span class="comment-copy">Because the value in the string <b>is not</b> an integer variable, it's a <code>floating-point</code> variable.</span>
<span class="comment-copy">@Azhy But the value in float(temp) is also a floating-point variable</span>
<span class="comment-copy">Yes but it's in a string not currently floating-point var.</span>
<span class="comment-copy">@Azhy Ahhh... now I get it</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/1841565/valueerror-invalid-literal-for-int-with-base-10">ValueError: invalid literal for int() with base 10: ''</a></span>
<span class="comment-copy">But why can't it truncate a string directly</span>
<span class="comment-copy">Because, int() doesn't recognize "0.1" as a number.</span>
<span class="comment-copy">But, in this case, float() recognizes.</span>
<span class="comment-copy">But int can recognize float("0.1") as a number ?</span>
<span class="comment-copy">Yes, because float() transforms this string to a number, and after int() truncates it get only the integer part.</span>
