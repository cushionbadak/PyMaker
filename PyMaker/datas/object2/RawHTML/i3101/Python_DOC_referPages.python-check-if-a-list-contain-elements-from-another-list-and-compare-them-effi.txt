<div class="post-text" itemprop="text">
<p>I have created 2 lists, which contain log files coming from different machines.</p>
<p>So I have <code>machine1</code> folder that contains <code>perf_log.txt</code>, <code>stress_log.txt</code> and so on.
Then I have <code>machine2</code> folder, that contains the same file names as above. In some cases, I may have logs from one machine but not from the other.</p>
<p>What I did so far, to compare their content, is to parse all the files in one folder, and add the full path to a list, and then do the same with the second folder. Then I would like to compare the correspondent logs (like perf_log.txt), between the 2 machines.</p>
<p>But I end up parsing the first list once, but I have to check every time if the second list contain the entry, and if it does, I have to go and retrieve the index, before I can compare the files. This seems pretty expensive, in the case of many files in a folder</p>
<pre><code>list1 = []
list2 = []

path1 = "~/Desktop/machine1/"
path2 = "~/Desktop/machine2/"

os.chdir(path1)
for entry in glob.glob("*.txt"):
    list1.append(entry)

os.chdir(path2)
for entry in glob.glob("*.txt"):
    list2.append(entry)

for logfile in list1:
    if logfile in list2:
        # Retrieve the index of the common file
        item_index = list2.index(logfile)
        # parse files and compare them
        comparefiles(path1 + logfile, path2 + list2[index])
</code></pre>
<p>How can I simplify this, and try to get to a O(n) complexity?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a dictionary instead of using a list.
So instead of     <code>list1.append(entry)</code> you can do <code>dict[entry] = entry</code>
This will help in the later part of code where you are doing <code>if logfile in list2:</code> which traverses the whole list to find it. Instead you can do <code>if dict.get(logfile,-1) != -1</code> to check if the file exists in 2nd path in O(1). You can just pass in the path to your <code>comparefiles()</code> method then. <br/></p>
<p>I hope it makes sense.</p>
<p>Here is the code that should work. (I havent tested it though)</p>
<pre><code>dict1 = {}
dict2 = {}

path1 = "~/Desktop/machine1/"
path2 = "~/Desktop/machine2/"

os.chdir(path1)
for entry in glob.glob("*.txt"):
    dict1[entry] = entry

os.chdir(path2)
for entry in glob.glob("*.txt"):
    dict2[entry] = entry
for key in dict1:
    if dict2.get(key,-1) != -1:
        comparefiles(path1+key,path2+key)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since order doesn't matter. </p>
<pre><code>list(set(list1) &amp; set(list2))
</code></pre>
<p>You are performing an intersection operation between the two lists, which are first made to sets. Now you have a list of entries that are in <code>list1</code> <b>AND</b> in <code>list2</code>. After you have a common list of entries you can perform comparisons between these two files. </p>
<p>This is not an O(n) solution, probably a O(nlogn) solution. Still better performing than the code given in the question. </p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure if <code>sets</code> provide O(n) complexity but they would certainly make finding the differences between the two lists easier as you can perform subtraction: <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/datastructures.html#sets</a></p>
<pre><code>logfiles1 = {}
logfiles2 = {}
in_1_but_not_in_2 = logfiles1 - logfiles2
</code></pre>
<p>I'm assuming the file names/paths are unique.</p>
</div>
<div class="post-text" itemprop="text">
<p>You might be able to get some good improvements if you use numpy and pandas' series.</p>
<p>Before starting, import numpy and pandas.</p>
<pre><code>import numpy as np
import pandas as pd
</code></pre>
<p>Now transform your lists into numpy arrays.</p>
<pre><code>list1 = np.array(list1)
list2 = np.array(list2)
</code></pre>
<p>Now you can make use of indexing to find out which files from one group are also in the other.</p>
<pre><code>items_in_both = list1[pd.Series(list1).isin(list2)]
</code></pre>
<p>Now, <code>items_in_both</code> contains all items that appear in both lists. With this, you can call your <code>comparefiles</code> function once for each element in <code>items_in_both</code>.</p>
</div>
