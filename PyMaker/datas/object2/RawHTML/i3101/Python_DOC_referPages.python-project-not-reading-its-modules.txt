<div class="post-text" itemprop="text">
<p>I know i feel like an idiot asking this. But it looks like my virtual environment might have some issue or maybe i am missing something very basic.</p>
<p>I am creating a new python project and unable to import any packages within the project.</p>
<p>I have used following commands:</p>
<pre><code>(env) :~/Development]$ mkdir test_proj/
(env) :~/Development]$ cd test_proj/
(env) :~/Development/test_proj]$ mkdir test_package
(env) :~/Development/test_proj]$ cd test_package
(env) :~/Development/test_proj/test_package]$ touch __ini__.py
(env) :~/Development/test_proj/test_package]$ vi test.py
(env) :~/Development/test_proj/test_package]$ cat test.py 
test = "test"
(env) :~/Development/test_proj/test_package]$ cd ../
(env) :~/Development/test_proj]$ mkdir test_package2
(env) :~/Development/test_proj]$ cd test_package2
(env) :~/Development/test_proj/test_package2]$ touch __ini__.py
(env) :~/Development/test_proj/test_package2]$ vi test2.py
(env) :~/Development/test_proj/test_package2]$ cat test2.py 
from test_package.test import test
print test
(env) :~/Development/test_proj/test_package2]$ python test2.py 
Traceback (most recent call last):
  File "test2.py", line 1, in &lt;module&gt;
    from test_package.test import test
ImportError: No module named test_package.test
</code></pre>
<p>This gives me following project structure. I don't think i have missed anything. </p>
<pre><code>test_proj
|
|__test_package
|  |__ __init__.py
|  |__ test.py
|
|__test_package2
   |__ __init__.py
   |__ test2.py
</code></pre>
<p>I do have other projects in the same virtual environment and they are working fine.</p>
<p>I have tried to append this path to PYTHONPATH sys.path as well. Neither did that work and i don't think i should be added the path at all.</p>
<p>I have tried to do the same using pycharm as well and am getting same error.
Am i missing something.</p>
<p>If i use relative import then i get 
<code>ValueError: Attempted relative import in non-package</code></p>
<p>I would be grateful for any help. Sorry i know it must be something stupid, its just i have spent alot of time without any success.</p>
<p>Update: I am using Python 2.7</p>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is that you're trying to run code from the middle of a package, while still trying to use it as part of a package. You can't do that.</p>
<hr/>
<p>In Python, when you start the interpreter, the path to the script you're running, or the current working directory, gets added to <a href="https://docs.python.org/3/library/sys.html#sys.path" rel="nofollow noreferrer"><code>sys.path</code></a>.</p>
<p>This means <code>~/Development/test_proj/test_package2/</code> is on your path, but <code>~/Development/test_proj/</code> is not. And of course there is nothing named <code>test_package</code> in <code>~/Development/test_proj/test_package2/</code>, therefore there is no package named <code>test_package</code> and no module named <code>test_package.test</code>.</p>
<hr/>
<p>If you really need to run a file out of a package, run it as a module, not as a script:</p>
<pre><code>(env) :~/Development/test_proj/]$ python -m test_package2.test2
</code></pre>
<p>Now, <code>~/Development/test_proj/</code> is on your path, and it contains a directory <code>test_package</code>, so you have a package named <code>test_package</code> and a package named <code>test_package.test</code>.</p>
<hr/>
<p>If you want a script that's runnable as a script, write a wrapper script at the top level, which will <code>from test_package2 import test2</code> and then call some function like <code>test_package2.main()</code> on it.</p>
<p>Then you just run that wrapper script:</p>
<pre><code>(env) :~/Development/test_proj/]$ python test2wrapper.py
</code></pre>
<p>Because it's in <code>test_proj</code>, not <code>test_proj/test_package2</code>, again, your path is exactly what you want.</p>
<p>If you're building your package around <code>setuptools</code> so it can be distributable with <code>pip</code>, etc., you may want to specify entry points in <code>setup.py</code> and let it generate the entry-point scripts for you, instead of doing it manually. This way it can do the same thing at install time, and make sure the scripts end up placed somewhere accessible, rather than possibly in the middle of a <code>.zip</code> or <code>.egg</code> archive, and that they have a proper shbang line for the system they're installed on, and so on.</p>
<hr/>
<blockquote>
<p>I have tried to append this path to PYTHONPATH sys.path as well. </p>
</blockquote>
<p>If you add <code>~/Development/test_proj/</code> to <code>PYTHONPATH</code>, or manually add it to <code>sys.path</code>, it will work. My guess is that you either added the wrong thing, or forgot to tilde-expand it, but without seeing what you tried, that's just a guess; all I can say for sure is that you did something wrong.</p>
<p>But at any rate, that's not the solution you want here. Because now the same file <code>test2.py</code> is (in addition to being the top-level script <code>__main__</code>) both the top-level module <code>test2</code> and the packaged module <code>test_package2.test2</code>.</p>
<p>It is illegal to put a package directory and its parent directory on <code>sys.path</code>. Practically speaking, no Python implementation actually tests for thatâ€”but it causes a whole world of confusion for no benefits, so you still don't want to do it.</p>
<hr/>
<blockquote>
<p>If i use relative import then i get  <code>ValueError: Attempted relative import in non-package</code></p>
</blockquote>
<p>Yes, because the way you're running things, <code>test2.py</code> is the top-level script <code>__main__</code>, not the packaged module <code>test_package2.test2</code>. It's not in a package, so <code>..</code> is illegal.</p>
<p>But, after either of the fixes above, a relative path will work.</p>
</div>
<span class="comment-copy">if test_package is a python script then you might not need to type the extension. By the way, what is the test part you are trying to print? Also, make sure they are in the same directory.</span>
<span class="comment-copy">are you using python 3 or 2?</span>
<span class="comment-copy">test_package is a python package or a folder with <b>init</b>.py and i am using python 2.7</span>
<span class="comment-copy">You are right. I totally missed that.  Thanks, will use either setuptools or setup.py as suggested.</span>
