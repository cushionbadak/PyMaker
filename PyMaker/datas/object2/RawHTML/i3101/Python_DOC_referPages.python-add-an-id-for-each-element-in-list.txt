<div class="post-text" itemprop="text">
<p>I want to add an id for each element, if the elements occur multiple times, it should be added with the id when it occurs the first time, I have no idea for this problem, could anyone help me </p>
<p>input:</p>
<pre><code>omg = ['a', 'b', 'c', 'a', 'b', 1]
</code></pre>
<p>output:</p>
<pre><code>omg_id = [0, 1, 2, 0, 1, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Little tricky solution to obtain ids in order of occurrence, using a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="noreferrer"><code>defaultdict</code></a>:</p>
<pre><code>from collections import defaultdict

omg = ['a', 'b', 'c', 'a', 'b', 1]
d = defaultdict(lambda: len(d))  # late binding allows d not to be defined yet
omg_id = [d[x] for x in omg]
# [0, 1, 2, 0, 1, 3]
</code></pre>
<p>The default factory assigns the current number of known keys to every new key. Since key access not only returns but also assigns the value, the <code>defaultdict</code> "grows" during the comprehension.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use iteration with a dictionary to construct a mapping. Then apply this mapping to your original list.</p>
<pre><code>omg = ['a', 'b', 'c', 'a', 'b', 1]

d = {}
for i in omg:
    if i not in d:
        d[i] = len(d)

omg_id = list(map(d.get, omg))

print(omg_id)

[0, 1, 2, 0, 1, 3]
</code></pre>
<p>Here's an alternative solution using <code>toolz.unique</code> [equivalent to the <code>unique_everseen</code> recipe in the <code>itertools</code> docs]:</p>
<pre><code>from toolz import unique

d = {v: k for k, v in enumerate(unique(omg))}
omg_id = list(map(d.get, omg))
</code></pre>
<p>Both solutions have the following features:</p>
<ul>
<li>O(n) complexity.</li>
<li>Require elements of <code>omg</code> to be hashable.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Create a set with items from the list. Enumerate the set and create a dictionary with key to enumeration values. Then use the list and the dictionary to produce the desired output.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could try this:</p>
<pre><code>from more_itertools import unique_everseen
t=dict([(e,c) for c,e in enumerate(unique_everseen(omg))])
print([t.get(e) for e in omg])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Order dict will remove duplicate and remain the order. You can also do it in one shot with following:</p>
<pre><code>from collections import OrderedDict

omg_id=[{v:k for k,v in enumerate(OrderedDict.fromkeys(omg))}[num] for num in omg]
</code></pre>
<p>result:</p>
<pre><code>[0, 1, 2, 0, 1, 3]
</code></pre>
</div>
<span class="comment-copy">Interesting use of <code>defaultdict</code> +1 !</span>
<span class="comment-copy">@jpp Yes, I was quite delighted when I first found out that the factory function could self-reference the (not yet existing) instance. That makes all kind of concise magic possible :)</span>
<span class="comment-copy">Sets don't preserve order so this won't work</span>
