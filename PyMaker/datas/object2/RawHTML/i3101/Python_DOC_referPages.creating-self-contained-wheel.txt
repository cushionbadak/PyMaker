<div class="post-text" itemprop="text">
<p>I try to create a self contained wheel for pyRFC: <a href="http://sap.github.io/PyRFC/install.html" rel="nofollow noreferrer">http://sap.github.io/PyRFC/install.html</a></p>
<p>I have the needed (closed sourced) libraries and header files.</p>
<p>Installing pyRFC works, if I copy the libraries and headers to $VIRTUAL_ENV/lib and $VIRTUAL_ENV/include.</p>
<p>Now I try to create a wheel which contains the closed source library files.</p>
<p>But I am failing.</p>
<p>If I unzip the wheel it only contains this:</p>
<pre><code>(pypi)pypi@pypiserver:~&gt; unzip -l packages/pyrfc-1.9.91-cp27-cp27mu-linux_x86_64.whl
Archive:  packages/pyrfc-1.9.91-cp27-cp27mu-linux_x86_64.whl
  Length      Date    Time    Name
---------  ---------- -----   ----
     5366  2018-07-23 13:38   pyrfc/_exception.py
     1045  2018-07-23 13:38   pyrfc/__init__.py
  1610216  2018-07-23 14:10   pyrfc/_pyrfc.so
     3835  2018-07-23 14:10   pyrfc-1.9.91.dist-info/DESCRIPTION.rst
      990  2018-07-23 14:10   pyrfc-1.9.91.dist-info/metadata.json
        6  2018-07-23 14:10   pyrfc-1.9.91.dist-info/top_level.txt
      105  2018-07-23 14:10   pyrfc-1.9.91.dist-info/WHEEL
     4666  2018-07-23 14:10   pyrfc-1.9.91.dist-info/METADATA
      715  2018-07-23 14:10   pyrfc-1.9.91.dist-info/RECORD
---------                     -------
  1626944                     9 files
</code></pre>
<p>The extra_objects (see below) are missing.</p>
<p>How can I modify the setup.py of pyRFC to make the wheel contain the libraries from $VIRTUAL_ENV/lib?</p>
<p>Here is the setup.py: <a href="https://github.com/SAP/PyRFC/blob/master/setup.py" rel="nofollow noreferrer">https://github.com/SAP/PyRFC/blob/master/setup.py</a></p>
<p>I tried this patch for setup.py</p>
<pre><code>@@ -48,7 +49,9 @@ PYRFC_EXT = Extension(
     , libraries=LIBS
     , define_macros=MACROS
     , extra_compile_args=COMPILE_ARGS
-    , extra_link_args=LINK_ARGS
+    , extra_link_args=LINK_ARGS,
+      library_dirs=['lib'],
+      extra_objects = ['lib/libicudata.so.50', 'lib/libsapnwrfc.so', 'lib/libicui18n.so.50', 'lib/libicuuc.so.50', 'lib/libicudecnumber.so', 'lib/libsapucum.so'],
 )
</code></pre>
<p>If I install and run the library without <code>libsapnwrfc.so</code> I get this error: </p>
<pre><code>Traceback (most recent call last):
  File "test-pyrfc.py", line 1, in &lt;module&gt;
    from pyrfc import Connection
  File "/home/other/lib/python2.7/site-packages/pyrfc/__init__.py", line 22, in &lt;module&gt;
    from pyrfc._pyrfc import get_nwrfclib_version, Connection, TypeDescription, FunctionDescription, Server
ImportError: libsapnwrfc.so: cannot open shared object file: No such file or directory
</code></pre>
<p>If I trace the open calls, I see that it only looks at root-level for the library. The library does not get search in the virtualenv (which is /home/other):</p>
<pre><code>strace python test-pyrfc.py 2&gt;&amp;1 | grep libsapnwrfc.so
open("/lib64/tls/x86_64/libsapnwrfc.so", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
open("/lib64/tls/libsapnwrfc.so", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
open("/lib64/x86_64/libsapnwrfc.so", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
open("/lib64/libsapnwrfc.so", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
open("/usr/lib64/tls/x86_64/libsapnwrfc.so", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
open("/usr/lib64/tls/libsapnwrfc.so", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
open("/usr/lib64/x86_64/libsapnwrfc.so", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
open("/usr/lib64/libsapnwrfc.so", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
write(2, "libsapnwrfc.so: cannot open shar"..., 73libsapnwrfc.so: cannot open shared object file: No such file or directory) = 73
</code></pre>
<p>I would like to install "libsapnwrfc.so" via wheel into a virtualenv because this gives me the power to have several independent environments. I could install it via RPM or config-management, but I would like to avoid it.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>extra_objects</code> are used only when linking the extension lib and are not bundled in the wheel. <a href="https://docs.python.org/3/distutils/apiref.html#distutils.core.Extension" rel="nofollow noreferrer">From the docs</a>:</p>
<blockquote>
<p><code>extra_objects</code>: list of extra files to link with (eg. object files not implied by ‘sources’, static library that must be explicitly specified, binary resource files, etc.)</p>
</blockquote>
<p>For bundling the libs into wheel, use <code>auditwheel</code> for Linux wheels, or <code>delocate</code> for MacOS wheels. SO already has an excellent question: <a href="https://stackoverflow.com/questions/47042483">How to build and distribute a Python/Cython package that depends on third party libFoo.so</a> which covers the whole wheel repairing process using both <code>auditwheel</code> and <code>delocate</code>. Here, I will only summarize the necessary commands. The process is pretty similar with both tools:</p>
<pre><code>$ pip install auditwheel  # you may also need to install patchelf
$ python setup.py bdist_wheel
$ auditwheel show dist/*_linux_x86_64.whl  # will show the libs to be bundled
$ auditwheel repair dist/*_linux_x86_64.whl
</code></pre>
<p>This will create a new dir <code>dist/wheelhouse</code>, containing the new wheel with the bundled libs.</p>
</div>
<span class="comment-copy">what happens if you use absolute paths?</span>
<span class="comment-copy">@AzatIbrakov you mean absolute paths for extra_objects? I read the docs. This kwarg gets used for linking. That's not the problem. I was on the wrong track here. I will look at this again tomorrow.</span>
<span class="comment-copy">I'd suggest to use <code>audtiwheel</code> for including all the necessary libs in the wheel. Check out the question <a href="https://stackoverflow.com/questions/47042483/how-to-build-and-distribute-a-python-cython-package-that-depends-on-third-party">How to build and distribute a Python/Cython package that depends on third party libFoo.so</a>; it has an excellent answer on repairing the wheel with <code>auditwheel</code>.</span>
<span class="comment-copy">@hoefling auditwheel looks good. If you write your comment as answer, I will upvote it.</span>
