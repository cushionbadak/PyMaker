<div class="post-text" itemprop="text">
<p><em>TL;DR:</em> How can I spawn a different python interpreter (from within python) and create a communication channel between the parent and child when stdin/stdout are unavailable?</p>
<hr/>
<p>I would like my python script to execute a <em>modified python interpreter</em> and through some kind of IPC such as <code>multiprocessing.Pipe</code> communicate with the script <em>that</em> interpreter runs.</p>
<p>Lets say I've got something similar to the following:</p>
<pre><code>subprocess.Popen(args=["/my_modified_python_interpreter.exe",
                       "--my_additional_flag",
                       "my_python_script.py"])
</code></pre>
<p>Which works fine and well, executes my python script and all.</p>
<p>I would now like to set up some kind of <em>interprocess communication</em> with that modified python interpreter.</p>
<p>Ideally, I would like to share something similar to one of the returned values from <code>multiprocessing.Pipe()</code>, however I will need to <em>share</em> that object with the modified python process (and I suspect <code>multiprocessing.Pipe</code> won't handle that well even if I do that).</p>
<p>Although sending text and binary will be sufficient (I don't need to share python objects or anything), I do need this to be functional on all major OSes (windows, Linux, Mac).</p>
<h3>Some more use-case/business explanation</h3>
<p>More specifically, the modified interpreter is the <a href="https://github.com/idapython/src" rel="nofollow noreferrer">IDAPython</a> interpreter that is shipped with <a href="https://www.hex-rays.com/products/ida/" rel="nofollow noreferrer">IDA</a> to allow scripting within the IDA tool.</p>
<p>Unfortunately, since stdio is already heavily used for the existing user interface functionalities (provided by IDA), I cannot use <code>stdin/stdout</code> for the communication.</p>
<hr/>
<p>I'm searching for possibilities that are better than the one's I thought of:</p>
<ol>
<li>Use two (rx and tx channels) hard-disk files and pass paths to both as the arguments.</li>
<li>Use a local socket and pass a path as an argument.</li>
<li>Use a memory mapped file and the <code>tagname</code> on windows and some other sync method on other OSes.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>After some tinkering with the <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Pipe" rel="nofollow noreferrer"><code>multiprocessing.Pipe</code></a> function and the <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.connection.Connection" rel="nofollow noreferrer"><code>multiprocesing.Connection</code></a> objects it returns, I realized that serialization of <code>Connection</code> objects is far simpler that I originally thought.</p>
<p>A <code>Connection</code> object has three descripting properties:</p>
<ol>
<li><code>fileno</code> - A handle. An arbitrary file descriptor on Unix and a socket on  windows. </li>
<li><code>readable</code> - A boolean controlling whether Connection object can be read.</li>
<li><code>writable</code> - A boolean controlling whether Connection object can be written.</li>
</ol>
<p>All three properties are accessible as object attributes and are controllable through the <code>Connection</code> class constructor.</p>
<p>It appears that if:</p>
<ol>
<li>The process calling <code>Pipe</code> spawns a child process and shares the <code>connection.fileno()</code> number.</li>
<li>The child process creates a <code>Connection</code> object using that file descriptor as the handle.</li>
<li>Both interpreters implement the <code>Connection</code> object roughly the same (And this is the risky part, I guess).</li>
</ol>
<p>It is possible to <code>Connection.send</code> and <code>Connection.recv</code> between those two processes although they do not share the same interpreter build and the multiprocessing module was not actually used to instantiate the child process.</p>
<p><em>EDIT:</em></p>
<p>Please note the <code>Connection</code> class is available as <code>multiprocessing.connection.Connection</code> in python3 and as <code>_multiprocessing.Connection</code> in python2 (which <em>might</em> suggest it's usage is discouraged. YMMV)</p>
</div>
<div class="post-text" itemprop="text">
<p>Going with <a href="https://stackoverflow.com/a/51550389/1146713">the other answer of mine</a> turned out to be a mistake. Because of how handles are inherited in python2 on Windows I couldn't get the same solution to work on Windows machines. I ended up using the far superior <a href="https://docs.python.org/2/library/multiprocessing.html#multiprocessing-listeners-clients" rel="nofollow noreferrer"><code>Listener</code> and <code>Client</code> interfaces</a> also found in the multiprocessing module.</p>
<p><a href="https://stackoverflow.com/questions/51678991/why-cannot-i-poll-on-a-multiprocessing-connection-object-on-windows/51681951#51681951">This</a> question of mine discusses that mistake.</p>
</div>
<span class="comment-copy">Unless you explain the exact nature of the modifications and show the script you are running, it's hard to help you. The simplest this to do is probably to just write a script that reads the stdin you pipe into it and outputs appropriate stdout.</span>
<span class="comment-copy">@MadPhysicist I agree <i>specific modifications</i> may make this task more difficult, but I honestly think the question stands for the general case of different python interpreters. Can I kindly ask you to be a little more specific about the missing information? Please note I mentioned (and now explained) stdio is unavailable to me.</span>
<span class="comment-copy">I didn't read carefully. This is actually a pretty good question. I was thrown off by the business about a modified interpreter.</span>
<span class="comment-copy">Thanks. I'll try editing that away. I can see how this makes the question more difficult than might be necessary.</span>
<span class="comment-copy">You're likely not to run into any problems as long as the connection is just a wrapper for underlying system methods.</span>
