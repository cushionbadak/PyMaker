<div class="post-text" itemprop="text">
<p>I have the following code</p>
<pre><code>from contextlib import contextmanager

@contextmanager
def simple_context_manager():
    print("starting context manager")
    yield
    print("finished context manager")

try:
    with simple_context_manager():
        raise RuntimeError
except RuntimeError:
    print("Caught the error")
print("Moving on")
</code></pre>
<p>Right now it prints out</p>
<pre><code>starting context manager
Caught the error
Moving on
</code></pre>
<p>which tells me that the context manager isn't closing.
How can I get it to close and print the "finished context manager" line?</p>
<p>Since I'm using the decorator, I don't have a dedicated <code>__exit__</code> function that I think should be called according to <a href="https://stackoverflow.com/questions/28157929/python-how-to-safely-handle-an-exception-inside-a-context-manager">this</a>.</p>
<p>So I'm not sure how to get my context manager to exit in the case of an error occurring inside of its context.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need a try-finally:</p>
<pre><code>@contextmanager
def simple_context_manager():
    print("starting context manager")
    try:
        yield
    finally:
        print("finished context manager")
</code></pre>
<p>If an exception propagates out of the <code>with</code> statement, the <code>@contextmanager</code> decorator will <a href="https://docs.python.org/3/reference/expressions.html#generator.throw" rel="nofollow noreferrer">throw</a> the exception into the decorated generator at the point of the <code>yield</code>. <code>finally</code> lets us execute a cleanup block regardless of whether an exception occurs, so we use that.</p>
</div>
