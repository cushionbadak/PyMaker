<div class="post-text" itemprop="text">
<p>I try to understand how to split up python files belonging to the same project in different directories. If I understood it right I need to use packages as described <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow noreferrer">here in the documentation</a>.</p>
<p>So my structure looks like this:</p>
<pre><code>.
├── A
│   ├── fileA.py
│   └── __init__.py
├── B
│   ├── fileB.py
│   └── __init__.py
└── __init__.py
</code></pre>
<p>with empty <code>__init__.py</code> files and </p>
<pre><code>$ cat A/fileA.py 
def funA():
    print("hello from A")

$ cat B/fileB.py 
from A.fileA import funA

if __name__ == "__main__":
    funA()
</code></pre>
<p>Now I expect that when I execute <code>B/fileB.py</code> I get <code>"Hello from A"</code>, but instead I get the following error:</p>
<pre><code>ModuleNotFoundError: No module named 'A'
</code></pre>
<p>What am I doing wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is the same as: <a href="https://stackoverflow.com/questions/14132789/relative-imports-for-the-billionth-time">Relative imports for the billionth time</a></p>
<blockquote>
<p>TL;DR: you can't do relative imports from the file you execute since
  <strong>main</strong> module is not a part of a package.</p>
</blockquote>
<p><strong>As main:</strong></p>
<pre><code>python B/fileB.py
</code></pre>
<p><em>Output:</em></p>
<pre><code>Traceback (most recent call last):
  File "p2/m2.py", line 1, in &lt;module&gt;
    from p1.m1 import funA
ImportError: No module named p1.m1
</code></pre>
<p><strong>As a module (not main):</strong> </p>
<pre><code>python -m B.fileB
</code></pre>
<p><em>Output:</em></p>
<pre><code>hello from A
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way to solve this is to add module <code>A</code> into the path of fileB.py by adding</p>
<pre><code>import sys
sys.path.insert(0, 'absolute/path/to/A/')
</code></pre>
<p>to the top of fileB.py.</p>
</div>
<span class="comment-copy">Is this <a href="https://stackoverflow.com/questions/43728431/modulenotfounderror-no-module-named-x" title="modulenotfounderror no module named x">stackoverflow.com/questions/43728431/…</a> similar to your problem ?</span>
<span class="comment-copy">@madjaoue thank you, but the question you linked refers to two files in the same directory</span>
<span class="comment-copy">Please check my answer.</span>
<span class="comment-copy">I'm not sure if I exactly understand what you mean with <i>main</i> module. But when I run python with the <code>-m</code> parameter I get this error: <code>/usr/bin/python: Error while finding module specification for 'B/fileB.py' (ModuleNotFoundError: No module named 'B/fileB')</code></span>
<span class="comment-copy">My bad, it's a typo. You can run it as <code>python -m B.fileB</code>.</span>
<span class="comment-copy">Thank you, that works. Only if you have the time, could you add some details about how (and why) this works? Or just some links to a helpful documentation? I didn't read much about this when I was looking through the official documentation.</span>
<span class="comment-copy">ok sorry, I didn't notice you have already added another link. Thank you!</span>
<span class="comment-copy">I just edited my post to a very detailed explanation.  Hope it's clearer ;)</span>
<span class="comment-copy">Then I would have to add this line to every file that references to code in other directories? Is this the standard way in python?</span>
<span class="comment-copy">But yes, your approach works :) But doesn't seem like a good solution for bigger projects</span>
<span class="comment-copy">In bigger projects, you would have both <code>A</code> and <code>B</code> being submodules of some module <code>module</code>, and then change the import statement to <code>from module.A.fileA import funA</code>. Then you only need to add <code>module</code> into the path of any script you want to run (so only in <code>fileB.py</code>, in your example). You do not need to add it in any other files, as long as you don't execute them as the <code>__main__</code> script.</span>
