<div class="post-text" itemprop="text">
<p>I'm building an RPC Server in golang that uses msgpack. 
The client is built in python using the mprpc library (msgpack over TCP with gevent). </p>
<p>My issue is, being an absolute noob in networking, I discovered that I can't use the same address/port with multiple clients running at once on the same computer (socket already bound i guess, it just stalls and timeouts).</p>
<p>I have looked around quite a bit but I'm not sure what I should be doing to be able to have multiple clients on the same machine talk to a server (msgpack back and forth). Is this a case where I need to use ZeroMQ ? Or requests over HTTP ?</p>
<p>Thanks !</p>
</div>
<div class="post-text" itemprop="text">
<p>TCP is a connection-oriented protocol. This means that only the server needs to have a fixed, known port. The client can use any port it wants, because nobody is making a connection to the client. </p>
<p>So, how does the server know how to talk to the client? Whenever it accepts a connection, it's told who the connection is from. But usually, you don't even need that, because the socket keeps track of who the connection is from. Just recv and send on that socket, and you're talking to the right client.</p>
<hr/>
<p>You should probably read the <a href="https://docs.python.org/3/howto/sockets.html" rel="nofollow noreferrer">Socket Programming HOWTO</a> in the Python docs, or some other tutorial, but briefly…</p>
<p>A server starts like this:</p>
<pre><code>sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
sock.bind(('', 12345))
sock.listen(5)
while True:
    csock, addr = sock.accept()
</code></pre>
<p>It <code>bind</code>s a port and <code>listen</code>s and loops around <code>accept</code>ing connections and doing something with them.</p>
<p>A client, on the other hand, just does this:</p>
<pre><code>sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect(('localhost', 12345))
</code></pre>
<p>… or, equivalently:</p>
<pre><code>sock = socket.create_connection(('localhost', 12345))
</code></pre>
<p>It doesn't call <code>bind</code>, it just creates a connection, letting the sockets library pick an arbitrary port on the appropriate interface for that connection. Unless you've got thousands of sockets already open, it should always be able to find a free port for you.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to have two way connection, then HTTP is not suitable for this. Because HTTP is designed in a way that the server only responds to a request, which prevents server to issue a request itself. There are other solutions that provide two way connection(server to client and client to server in same time).</p>
<p><code>WebSocket</code> is the first thing that comes to my mind. Of course <code>ZeroMQ</code> also can do this. </p>
</div>
<span class="comment-copy">Thank you very much for your answer ! So does this mean, on the same computer, i should be able to call socket.create_connection(('localhost', 12345)) multiple times from different processes ?</span>
<span class="comment-copy">@Tuft Yes, you should be able to run hundreds of programs (or the same program run hundreds of times in parallel) that all call <code>socket.create_connection(('localhost', 12345))</code>, and they'll all work (each one automatically getting a unique ports to connect from).</span>
<span class="comment-copy">Thanks you ! I'm only looking to send a request to the server, and then get back the response, not really two-way i guess ?</span>
