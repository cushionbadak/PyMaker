<div class="post-text" itemprop="text">
<p>Given an array <code>a = [1,2,3,[4,5]]</code> using Python 3, how can I add all the elements in the array?</p>
<pre><code>sum(a[0])
sun(a[0][1])
</code></pre>
<p>The above code did not work. Also in the case, if you're given an array with an unknown amount of arrays inside arrays, How can those numbers be calculated?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def xsum(x):
    if not x:
        return 0

    head, *tail = x

    if isinstance(head, list):
        return xsum(head) + xsum(tail)
    elif tail:
        return head + xsum(tail)
    else:
        return head
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need a flatten function. Here is one:</p>
<pre><code>def flatten(a):
    """generator of flattened n-deep iterable (excluding str) a."""
    for elem in a:
        if not isinstance(elem, str):
            try:
                yield from flatten(elem)
            except TypeError:
                yield elem
        else:
            yield elem
</code></pre>
<p>which you can then use in <code>sum</code>, for example:</p>
<pre><code>a = [1, 2, 3, [4, [5, 6]]
print(list(flatten(a)))  # --&gt; [1, 2, 3, 4, 5, 6]
print(sum(flatten(a)))  # --&gt; 21
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>functools.reduce</code> to sum this nested list</p>
<pre><code>&gt;&gt;&gt; from functools import reduce
&gt;&gt;&gt; a = [1,2,3,[4,5]] 
&gt;&gt;&gt; reduce(lambda x,y: x + (sum(y) if type(y)==list else y), [0]+a)
15
</code></pre>
<p>If the list can be more than one level nested, you have to use a recursive approach</p>
<pre><code>&gt;&gt;&gt; f = lambda x,y: x + (reduce(f, y) if type(y)==list else y)
&gt;&gt;&gt; reduce(f, [0]+a)
15
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the closure property for finding sum of infinite nested list.</p>
<pre><code>def nested_list_sum(x):
c = []

def l_sum(x):
    for i in x:
        if isinstance(i, list):
            l_sum(i)
        else:
            c.append(i)
l_sum(x)
return sum(c)
</code></pre>
<p>like
<code>a = [1,2,3,[4,5]] ----&gt; 15</code></p>
<p><code>a = [1,2,3,[4,5, [6,7, [8, 9]]], [10, 11, 12, [13, 14, 5]]] -- &gt; 110</code></p>
</div>
<span class="comment-copy">You can use <code>len(array)</code> to find the number of elements inside.</span>
<span class="comment-copy">What output do you expect? <code>15</code>?</span>
<span class="comment-copy">Flatten it, <i>then</i> sum it.</span>
<span class="comment-copy">Terminology nitpick: arrays and lists are different things. <a href="https://docs.python.org/3/library/array.html" rel="nofollow noreferrer">arrays</a> can only contain certain types of objects, and they can't contain other arrays.</span>
