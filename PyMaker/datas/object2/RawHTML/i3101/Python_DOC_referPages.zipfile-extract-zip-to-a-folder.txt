<div class="post-text" itemprop="text">
<p><strong>Below is what file structure looks like</strong></p>
<pre><code>music_folder
    album1.zip (below are contents inside of zip)
        song1.mp3
        song2.mp3
        song3.mp3
    album2.zip (below are contents inside of zip)
        song12.mp3
        song14.mp3
        song16.mp3
</code></pre>
<p>I want to extract both zipped albums into a directory called <code>cache</code> and I want the same structure. <strong>This is what I want it to look like:</strong></p>
<pre><code>cache
    album1 (this is a normal unzipped folder)
        song1.mp3
        song2.mp3
        song3.mp3
    album2 (this is a normal unzipped folder)
        song12.mp3
        song14.mp3
        song16.mp3
</code></pre>
<p>But for some reason, for <code>album1</code> the files are extracted directly in <code>cache</code> directory instead of <code>cache/album1</code>. </p>
<p><strong>This is what it looks like and I don't want this</strong>:</p>
<pre><code>cache
    song1.mp3
    song2.mp3
    song3.mp3
    album2 (this is a normal unzipped folder)
        song12.mp3
        song14.mp3
        song16.mp3
</code></pre>
<p><strong>Below is my code:</strong></p>
<pre><code>for zipped_album in os.listdir('music_folder'):
    zip_ref = ZipFile('music_folder/' + zipped_album, 'r')
    zip_ref.extractall('cache')
    zip_ref.close()
</code></pre>
<p>Any ideas why the files are not extracted in a folder inside <code>chache</code> for <code>album1</code>? It works for <code>album2</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Zip files can contain (relative) pathnames, not just filenames.</p>
<p>So, the contents of <code>album2.zip</code> are most likely actually:</p>
<ul>
<li>album2/song1.mp3</li>
<li>album2/song2.mp3</li>
<li>album2/song3.mp3</li>
</ul>
<p>â€¦ but <code>album1.zip</code> is just:</p>
<ul>
<li>song1.mp3</li>
<li>song2.mp3</li>
<li>song3.mp3</li>
</ul>
<p>To test this, you can do <code>unzip -l album1.zip</code> and <code>unzip -l album2.zip</code> from your shell.</p>
<hr/>
<p>This is actually a problem that people have been having as long as they've been sharing zipfiles. You usually want to include that <code>album2</code> in the paths, but sometimes it's missing. You don't want to forcibly add it and end up with <code>album2/album2/song1.mp3</code>, but you don't want to not add it and end up with just <code>song1.mp3</code> in the top directory.</p>
<p>The solution that most GUI tools use nowadays (I think it dates back to the ancient Stuffit Expander) is this:</p>
<ul>
<li><a href="https://docs.python.org/3/library/zipfile.html#zipfile.ZipFile.infolist" rel="nofollow noreferrer">Iterate all of the zip entries</a> and see if the pathnames all start with the same directory.</li>
<li>If so, unzip them as-is.</li>
<li>If not, create a directory with the same name as the zipfile (minus the <code>.zip</code>), then unzip them into that directory.</li>
</ul>
<hr/>
<p>The one tricky bit is that zipfile paths can be Windows or POSIX format, and they can be absolute paths or UNC paths or even paths starting with <code>..</code>, and the logic for transforming those to usable paths is, while not exactly <em>difficult</em>, more than just a one-liner. So, you have to decide how far you want to go with making your code fully general.</p>
</div>
<span class="comment-copy">The zip file doesn't have that structure, and your code doesn't create it. What else would you expect?</span>
<span class="comment-copy">Thank you for the great explanation and solution</span>
