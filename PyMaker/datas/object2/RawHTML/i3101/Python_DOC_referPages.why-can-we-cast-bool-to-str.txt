<div class="post-text" itemprop="text">
<p>We know how <code>bool()</code> acts on various python objects such as <code>str</code>, <code>int</code>, <code>list</code>.</p>
<p>This is a question about the reverse.</p>
<p>You can cast bool to int as</p>
<pre><code>&gt;&gt;&gt; int(True)
1
&gt;&gt;&gt; int(False)
0
</code></pre>
<p>which I think kinda makes sense, but with string we get</p>
<pre><code>&gt;&gt;&gt; str(False)
'False'
&gt;&gt;&gt; str(True)
'True'
</code></pre>
<p>which I don't get, as firstly it seems to imply some relation between <code>False</code> and <code>'False'</code>, which only seems relevant at the code level. If what is written in code is to be treated this way, how does this work ...</p>
<pre><code>&gt;&gt;&gt; str(not True)
'False'
</code></pre>
<p>Second, it's not obvious it's for consistency, as</p>
<pre><code>&gt;&gt;&gt; bool(str(False))
True
</code></pre>
<p>My question is ... is there a reason we're allowed to cast <code>bool</code> to <code>str</code> in this way? <code>list</code> for example won't allow it ... </p>
<pre><code>&gt;&gt;&gt; list()
[]
&gt;&gt;&gt; bool()
False
&gt;&gt;&gt; bool(list())
False
&gt;&gt;&gt; list(bool())
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'bool' object is not iterable
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For debugging. If you can't cast a thing to a string, you can't print it. If you want to print a data structure for debugging, you need to be able to cast each element to a string. <a href="https://docs.python.org/2.7/library/functions.html#str" rel="nofollow noreferrer">That's what <code>str</code> is documented to do</a>...</p>
<blockquote>
<p>Return a string containing a nicely printable representation of an object.</p>
</blockquote>
<hr/>
<blockquote>
<p><em>If what is written in code is to be treated this way, how does this work ...</em></p>
<pre><code>&gt;&gt;&gt; str(not True)
'False'
</code></pre>
</blockquote>
<p><code>not True</code> resolves to <code>False</code> which is then passed to <code>str</code>. It's similar to how with <code>foo(1 + 1)</code> <code>foo</code> receives 2.</p>
<hr/>
<blockquote>
<p><em>Second, it's not obvious it's for consistency, as</em></p>
<pre><code>&gt;&gt;&gt; bool(str(False))
True
</code></pre>
</blockquote>
<p>Casting is not guaranteed to round trip. Examples are <code>int(float(2.34))</code> or <code>int(unichr(97))</code>.</p>
<p>There's an important difference between converting something to a string for humans, which is what <code>str</code> does, and converting something to a string for <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" rel="nofollow noreferrer">marshalling</a> which must round trip. There are specialized packages like <a href="https://docs.python.org/2/library/marshal.html" rel="nofollow noreferrer"><code>marshal</code></a> or <a href="https://docs.python.org/2/library/json.html?highlight=json" rel="nofollow noreferrer"><code>json</code></a> for marshalling.</p>
<p>But casting is the wrong way to think about <code>bool</code> and <code>str</code> in Python. As above, <code>str</code> returns a printable representation, not a machine-readable one. <code>bool</code> is for asking "what is the truthiness of this expression"? <a href="https://docs.python.org/2.7/library/functions.html#bool" rel="nofollow noreferrer">From the docs...</a></p>
<blockquote>
<p>x is converted using the standard truth testing procedure.</p>
</blockquote>
<p><code>"True"</code> and <code>"False"</code> are both true. If they added a special case just for <code>bool</code> that would be very inconsistent.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>str()</code> and <code>bool()</code> are not "casts", they're constructors (type objects). Calling <code>str(x)</code> for any value <code>x</code> will construct a new <code>str</code> object with its value initialized (somehow) from <code>x</code>. There is no implied relationship between the two objects; <code>str(x)</code> could return anything as long as it is a <code>str</code> object.</p>
<p>Basically: stop thinking of Python as having "casts" like other languages you may be used to. Constructors are just another kind of callable, and the general rule is for each type to do something sensible with the argument(s) passed to the constructor. In the case of <code>str()</code>, it delegates to the <code>__str__</code> special method if present, which means that <code>bool</code> objects return the strings <code>'True'</code> and <code>'False'</code> because that's what the <code>bool</code> type decided to do.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, what is the problem with <code>str(True)</code> being <code>'True'</code>? That's quite the expected.</p>
<p>Now, if you convert boolean to integer, it's obvious that the result must be a number. </p>
<p>And, naturally, <code>not True</code> evaluates to <code>False</code>. That is <code>str(False)</code>, then: <code>'False'</code>.</p>
<p>About the <code>bool()</code> function, it's supposed to return <code>True</code> for anything that is not empty, zero, None or False. </p>
<p>So any string that is not <code>''</code> fits this and returns <code>True</code>. See more: <a href="https://docs.python.org/3/library/stdtypes.html#truth" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#truth</a></p>
</div>
<div class="post-text" itemprop="text">
<p>There is a very limited set of things considered <code>False</code> in Python:</p>
<ul>
<li>None</li>
<li>False</li>
<li>zero of any numeric type, for example, 0, 0L, 0.0, 0j.</li>
<li>any empty sequence, for example, '', (), [].</li>
<li>any empty mapping, for example, {}.</li>
<li>instances of user-defined classes, if the class defines a <strong>nonzero</strong>() or <strong>len</strong>() method, when that method returns the integer zero or bool value False</li>
</ul>
<p>So if you do <code>bool(something)</code> it will only return <code>False</code> for those items. Everything else in Python is <code>True</code> including string representations of falsy things: <code>'0'</code> <code>'False'</code>, <code>'None'</code> etc because the string itself is <code>True</code>.</p>
</div>
<span class="comment-copy">You can't print it if it isn't a string. By the way, <code>print</code> automatically converts items to their string representation by calling the <code>__str__</code> method, which is also what an str call delegates to.</span>
<span class="comment-copy">I'm a bit confused as to what the <code>list(bool())</code> is supposed to represent.  The list constructor explicitly states it takes an iterable, which <code>bool()</code> is not.  It doesn't seem related to the other examples.</span>
<span class="comment-copy">Why would <code>str(not True)</code> not work? <code>not True</code> is <code>False</code>, and converting that to a printable string results in <code>False</code>. It's nothing different than <code>str(1+1)</code> yielding <code>2</code> and not <code>1+1</code>.</span>
<span class="comment-copy"><code>print(str(not True))</code> works the same way as <code>print(2 * 4)</code>: the expression is evaluated, then <code>str(result)</code> is printed</span>
<span class="comment-copy">You can do <code>str(True)</code> because <code>True</code> has a <a href="https://docs.python.org/3/reference/datamodel.html#object.__str__" rel="nofollow noreferrer"><code>__str__</code> method</a>. <code>bool(str(False))</code> is <code>True</code> because non-empty strings are <a href="https://stackoverflow.com/questions/39983695/what-is-truthy-and-falsy-in-python-how-is-it-different-from-true-and-false/39984051#39984051">truthy</a></span>
<span class="comment-copy">On round-tripping: I was searching for another example that would make it obvious, but <code>float(str(-0.0))</code> yields ... <code>-0.0</code>. So much for that.</span>
<span class="comment-copy">i get the round trip thing, e.g. <code>int(bool(5))</code> is 1. <code>bool</code> maps to two values so it can't be round-trip</span>
<span class="comment-copy"><code>bool</code> is not casting, read what it's supposed to do: <a href="https://docs.python.org/3/library/functions.html#bool" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#bool</a></span>
<span class="comment-copy">@usr2564301 <code>list(str([1,2]))</code> is <code>['[', '1', ',', ' ', ']']</code>. <code>bytes(str(b'abc'))</code> is an exception. Plenty of things don't round-trip.</span>
<span class="comment-copy">@Schwern <code>"True"</code> and <code>"False"</code> are both  f̶a̶l̶s̶e̶ <b>true</b>. (Edit submitted)</span>
<span class="comment-copy">I wish I could upvote this a thousand times.</span>
<span class="comment-copy">"About the bool() function, it's supposed to return True for anything that is not empty or undefined or False." is wrong. First, you can't call it on something undefined (doing anything with something undefined is an exception). Second, the rule is that it returns true for anything that is not empty, false, <i>or <code>None</code>, or zero</i>.</span>
