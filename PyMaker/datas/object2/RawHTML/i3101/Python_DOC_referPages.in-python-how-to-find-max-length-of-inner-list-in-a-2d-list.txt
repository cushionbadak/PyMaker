<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/13400876/python-length-of-longest-sublist">Python: Length of longest sublist? [duplicate]</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/38619143/convert-python-sequence-to-numpy-array-filling-missing-values">Convert Python sequence to NumPy array, filling missing values</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>I often create a list of lists with varying length of inner list, for e.g. to represent a bunch of sentences of varying length</p>
<pre><code>[['Hello', 'world'], ['how','are','you'], ['have','a','good','day']]
</code></pre>
<p>I need these to be converted to numpy matrix. To make all inner lists of same length I pad a dummy element at the end and make all inner lists equal the maximum length.</p>
<p>Is there any compact way of finding the max length of inner list?</p>
<p>I usually do it by writing a for loop and keeping track of the max length but I do it so often that I feel the need for a better way.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer"><code>max</code></a> function:</p>
<pre><code>max(your_list, key=len)
</code></pre>
<p>You will get the longest list, if you need the actual length just use <code>len</code> again:</p>
<pre><code>len(max(your_list, key=len))
</code></pre>
<p>Here you have the <a href="https://repl.it/repls/SuddenSingleSuperuser" rel="nofollow noreferrer">live example</a></p>
</div>
<div class="post-text" itemprop="text">
<p>And order it:</p>
<pre><code>&gt;&gt;&gt; A=[['Hello', 'world'], ['how','are','you'], ['have','a','good','day']]
&gt;&gt;&gt; sorted(A,key=len)
[['Hello', 'world'], ['how', 'are', 'you'], ['have', 'a', 'good', 'day']]
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can do it like the following:</p>
<pre><code>max([len(item) for item in A])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>map</code> and <code>max</code>, you find the max length of the sub lists easily</p>
<pre><code>&gt;&gt;&gt; max(map(len, lst))
4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To convert your list of lists in a numpy array, you can try the following snippet. The fourth line pads your data and the fifth line creates the numpy array.</p>
<pre><code>import numpy as np
data=[['Hello', 'world'], ['how','are','you'], ['have','a','good','day']]
max_length = max(map(len, data))
[e1.extend(['']*(max_length - len(e1))) for e1 in data]
np_data=np.array(data)
</code></pre>
</div>
<span class="comment-copy">What about writing a function?</span>
<span class="comment-copy">How is this <code>numpy</code>? the list contains strings, not interger</span>
<span class="comment-copy">Pad without explicitly calculating longest: <code>np.array(list(itertools.zip_longest(*alist, fillvalue='dummy'))).T</code></span>
<span class="comment-copy">@U9-Forward sorry I forgot to mention I use word embedding like GloVe to replace each word with a vector, that's where I use numpy.</span>
<span class="comment-copy">better as a generator than using an intermediate list</span>
<span class="comment-copy">don't use list-comprehensions for side-effects.</span>
