<div class="post-text" itemprop="text">
<p>So I was going through the source code for the <code>copy</code> library and I found this:</p>
<pre><code>cls = type(x)

copier = _copy_dispatch.get(cls)
if copier:
    return copier(x)

try:
    issc = issubclass(cls, type)
except TypeError: # cls is not a class
    issc = False
</code></pre>
<p>The important lines being <code>cls = type(x)</code> and <code>except TypeError: # cls is not a class</code>. (I left in the lines inbetween in case they help). The <code>except</code> clause leads me to believe that there is some <code>x</code> for which <code>type(x)</code> would not return a class, however I can not think of an example where this would be the case. (I tried adding a <code>print</code> statement to the clause and seeing if I could trigger it to no avail). Could you give me an example where <code>type()</code> does not return a class?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're asking about the check in <code>copy.copy</code>, that's actually not necessary. It's a longstanding bug, but a trivially unimportant one that nobody bothered to fix for years. But, coincidentally, it was <a href="https://github.com/python/cpython/commit/2708578736d1aa15685495e9b94b827a8e185a8c" rel="nofollow noreferrer">fixed just 11 days ago</a> as part of <a href="https://bugs.python.org/issue11572" rel="nofollow noreferrer">issue 11572</a>, an umbrella bug that aims to finish code coverage of the <code>copy.py</code> module for 3.8.</p>
<p>The root cause here goes back to a real issue that existed in Python 2.2 until somewhere later in the 2.x branch (I'm guessing until 2.5, inclusive, but that's a guess)—but the fix wasn't added until 3.4, long after the problem had ceased to exist.</p>
<hr/>
<p>This check does not exist in Python 2.x. As hunted down by user2357112, it was added as part of a fix for <a href="https://bugs.python.org/issue11480" rel="nofollow noreferrer">issue 11480</a> in Python 3.4. <code>copy.copy</code> on a class with a custom metaclass <em>was</em> broken, and a fix was necessary, which was copied from <code>copy.deepcopy</code>, but included a change that wasn't needed anymore. Which was later removed from <code>deepcopy</code>, but sat around in <code>copy</code> until this month.</p>
<hr/>
<p>As found by tripleee, the original bug was <a href="https://bugs.python.org/issue502085" rel="nofollow noreferrer">#502085</a>.</p>
<p>In fact, in 2.2, it was not only <em>possible</em> to have <code>issubclass(type(x), type)</code> raise a <code>TypeError</code>, it was actually happening in the wild. </p>
<p>In Python 2.1 and earlier (before <a href="https://www.python.org/dev/peps/pep-0252/" rel="nofollow noreferrer">PEP 252</a>, extension types could basically stick anything they wanted in their type slot. In 2.2+, this would break <code>isinstance</code> and <code>issubclass</code>. They were made to raise a <code>TypeError</code> instead of segfaulting, and that was good enough, because who's ever going to stick a non-type in a type slot, right? Well, the original version of <code>boost::python</code> did exactly that for you.</p>
<p>The next version didn't cause that problem, presumably not everyone upgraded right away (it required rewriting part of your code, it couldn't generate modules compatible with Python 2.1, and a 2MB download, seriously? do you think I'm on 224Kbps dual-ISDN or something?), so those exceptions were a real thing to worry about for a while.</p>
<p>(This is only tangentially related to old- vs. new-style classes—extension types were effectively always "new-style" even before that was a thing, and I'm pretty sure the check for their type being a type was added before 3.0.)</p>
<hr/>
<p>While we're at it, technically, the word <code>class</code> is ambiguous in the Python docs. Sometimes a <code>class</code> is something created by executing a <code>class</code> statement or by calling the <code>type</code> constructor (or calling a subclass of <code>type</code>). Sometimes a <code>class</code> is an instance of <code>type</code> or a subclass of <code>type</code>, in which case builtin types <em>are</em> classes. </p>
<p>By the former definition, <code>x = 1</code> is an example where <code>type(x)</code> is not a class. But by the latter definition, it is—and that's clearly the definition used by <a href="https://docs.python.org/3/library/functions.html#issubclass" rel="nofollow noreferrer"><code>issubclass</code></a>. So, this is mostly irrelevant, unless you're looking for a gotcha question to annoy someone.</p>
</div>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/865911/is-everything-an-object-in-python-like-ruby">Everything is an object in Python</a>. Therefore, everything's type is a class.</span>
<span class="comment-copy">Even seeing the <a href="https://bugs.python.org/issue11480" rel="nofollow noreferrer">bug report</a> that lead to this change and the <a href="https://github.com/python/cpython/commit/5c1c3b4f197c57952760be37d77d73669284a607" rel="nofollow noreferrer">commit</a> that introduced this code, it still doesn't make sense.</span>
<span class="comment-copy">Answered my question perfectly, thanks.</span>
<span class="comment-copy"><code>type(x)</code> won't return a <code>classobj</code> on Python 2; <code>x.__class__</code> would do that, but <code>type(x)</code> will return <code>types.InstanceType</code> for old-style instances.</span>
<span class="comment-copy">@user2357112 No, it will return <code>types.InstanceType</code> (aka <code>instance</code>) for an <i>instance</i> of a class, but <code>classobj</code> (aka <code>types.ClassType</code>) for a class. Also, for an instance, <code>x.__class__</code> is the class itself, not <code>classobj</code> (and <code>x.__class__</code> on a class is just an AttributeError). <a href="https://repl.it/repls/TrimNervousQuadrants" rel="nofollow noreferrer">repl.it demo</a></span>
<span class="comment-copy">I think we're getting <code>classobj</code> and "a <code>classobj</code>" mixed up here.</span>
<span class="comment-copy">FWIW "SF 502085" appears to refer to <a href="https://bugs.python.org/issue502085" rel="nofollow noreferrer">bugs.python.org/issue502085</a> ... Maybe this bug tracker was hosted on Source Forge at the time?</span>
