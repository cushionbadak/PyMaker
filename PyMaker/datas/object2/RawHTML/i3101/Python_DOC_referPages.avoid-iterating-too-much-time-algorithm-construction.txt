<div class="post-text" itemprop="text">
<p>I have a list - <code>memory_per_instance</code> -  which looks like the following: </p>
<pre><code>[
  {
    'mem_used': '14868480', 
    'rsrc_name': 'node-5b5cf484-g582f'
  },
  {
    'mem_used': '106618880',
    'rsrc_name': 'infrastructure-656cf59bbb-xc6bb'
  },
  {
    'mem_used': '27566080', 
    'rsrc_name': 'infrastructuret-l6fl'
  },
  {  
    'mem_used': '215556096',
    'rsrc_name': 'node-62lnc'
  }
]
</code></pre>
<p>Now, here we can see that there is 2 resources groups <code>node</code> and <code>infrastructure</code>. </p>
<p>I would like to create a array of which the final product contains the name of the resource (<code>node</code> or <code>infrastructure</code>) and the <code>mem_used</code> would be the sum of the <code>mem_used</code>. </p>
<p>I was already already able to differentiate the two groups from it, with regex. </p>
<p>From now, how can I create an array - <code>memory_per_group</code> -  with a result such has</p>
<pre><code>[
  {
    'mem_used': '230424576', 
    'rsrc_name': 'node'
  },
  {
    'mem_used': '134184960',
    'rsrc_name': 'infrastructure'
  },
]
</code></pre>
<p>I could store the name of the <code>rsrc</code> in a tmp variable, so something like: </p>
<pre><code>memory_per_pod_group = []
for item in memory_per_pod_instance:
    tmp_rsrc = item['rsrc_name']
    if(item['rsrc_name'] == tmp_rsrc):
        memory_per_pod_group.append({'rsrc_name':get_group(tmp_rsrc, pod_hash_map), 'mem_used':mem_used})
        memory_per_pod_instance.remove(item)
pprint.pprint(memory_per_pod_group)
</code></pre>
<p>But then, I would iterate through the list a non-negligeable amount of time. </p>
<p>Would there be a way to be more efficient ? </p>
</div>
<div class="post-text" itemprop="text">
<p>Well, sure. You only need one iteration:</p>
<pre><code>      data = [
    {
        'mem_used': '14868480', 
        'rsrc_name': 'node-5b5cf484-g582f'
    },
    {
        'mem_used': '106618880',
        'rsrc_name': 'infrastructure-656cf59bbb-xc6bb'
    },
    {
        'mem_used': '27566080',
        'rsrc_name': 'infrastructuret-l6fl'
    },
    {  
        'mem_used': '215556096',
        'rsrc_name': 'node-62lnc'
    }
]

def get_group(item):
    rsrc_name = item['rsrc_name']
    index = rsrc_name.index('-');
    return rsrc_name[0:index]

def summary(list):
    data = {};
    for item in list:
        group = get_group(item)

        if not (group in data):
            data[group] = 0

        data[group] += int(item['mem_used'])

    result = []
    for rsrc_name, mem_used in data.items():
        result.append({ 'rsrc_name': rsrc_name, 'mem_used': str(mem_used) })

    return result

if __name__ == '__main__':
    print(summary(data))
</code></pre>
<hr/>
<p><strong>Result:</strong></p>
<pre><code>[{'mem_used': 230424576, 'rsrc_name': 'node'}, {'mem_used': 106618880, 'rsrc_name': 'infrastructure'}, {'mem_used': 27566080, 'rsrc_name': 'infrastructuret'}]
</code></pre>
<p>Note, that <code>get_group</code> might be too simple for your use case. The result has three groups since one of the resources has key <code>'infrastructuret'</code> with a "t" at the end.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could just iterate trough it a single time and checking with a simple <a href="https://docs.python.org/3/library/stdtypes.html#str.startswith" rel="nofollow noreferrer">startswith</a> and then appending directly to the dictionary key that you want with a simple increment.</p>
<p>Something like</p>
<pre><code>memory_total = { 'node': 0, 'instance': 0 };

for item in memory_per_instance:
    if item['rsrc_name'].startsWith('node'):
        memory_total['node'] += item['mem_used']
    if item['rsrc_name'].startsWith('infrastructure'):
        memory_total['instance'] += item['mem_used']
</code></pre>
</div>
<span class="comment-copy">isn't condition <code>if(item['rsrc_name'] == tmp_rsrc):</code> always going to be <code>True</code> since you are assigning <code>tmp_rsrc = item['rsrc_name']</code> just above?</span>
<span class="comment-copy">Thanks a lot for your help ! :) The <code>get_group()</code> method is already implemented on my side.</span>
<span class="comment-copy">Sure! Very welcome!</span>
<span class="comment-copy">That would implies that <code>node</code> and <code>instance</code> (I guess you meant <code>infrastructure</code>) are static. Or they are dynamically discovered.</span>
