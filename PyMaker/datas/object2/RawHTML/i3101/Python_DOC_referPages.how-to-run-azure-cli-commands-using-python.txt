<div class="post-text" itemprop="text">
<p>I want to use Azure CLI to get the list of all the VMs in my resource group. But I want to implement the same using a python script. </p>
<p>For example, I will use the following command in Azure CLI to list the VMs in my resource group:</p>
<p>" az vm list -g MyResourceGroup "</p>
<p>But, I want the python script to do the same, where I just have to incorporate the CLI command in the python program.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>How to run Azure CLI commands using python?</p>
</blockquote>
<p>According to this <a href="https://github.com/Azure/azure-cli/blob/dev/src/azure-cli/azure/cli/__main__.py" rel="nofollow noreferrer">file</a>. we could invoke the Azure CLI with following way:</p>
<pre><code>from azure.cli.core import get_default_cli
get_default_cli().invoke(['vm', 'list', '-g', 'groupname'])
</code></pre>
<p><strong>Note :</strong> If you get <code>No module named 'azure.cli.command_modules'</code> error, please install <code>azure-cli</code></p>
<p><a href="https://i.stack.imgur.com/Qgfft.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/Qgfft.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>Using the subprocess solution is problematic as subprocess doesn't check the PATH where Azure CLI is found e.g. on Windows. To use "cmd -c" would be a Windows-specific solution and needs a fork if/else for additional Linux support. </p>
<p>@tom-sun's answer is almost correct, as you can reuse the Azure CLI python modules, as the CLI is also written in Python. Problem is, that the return of the .invoke() instruction is always returning the error code. To get the full body response, you must pass a file like object on the argument list of the underlying Knack Code to get the response. By default, this redirects to StdOut, that is why you can see it e.g. in your terminal but you always get a zero for success.</p>
<p>I wrote a little helper function that accepts the Azure CLI instructions in one string (I don't like many arguments as list, it doesn't read nicely - but that is just a personal preference, don't blame me). It uses a temporary file as output target and then it is read back in memory - this is required afaik from the underlying Knack CLI code; by default StdOut is the standard pipe.</p>
<p>It requires you to have azure-cli installed for Python: <code>pip install azure-cli</code></p>
<p>File <code>azhelper.py</code>:</p>
<pre><code>from azure.cli.core import get_default_cli
import tempfile

def az_cli (args_str):
    temp = tempfile.TemporaryFile()
    args = args_str.split()
    code = get_default_cli().invoke(args, None, temp)
    temp.seek(0)
    data = temp.read().strip()
    temp.close()
    return [code, data]
</code></pre>
<p>You can then invoke like this:</p>
<pre><code>from azhelper import *

code, response = az_cli("vm list")
print("vm's: %s" % (response))
</code></pre>
<p>Of course you need to be logged in, see @4c74356b41 answer.</p>
<p>If somebody finds a better way to deal with the response instead with a temporary file, this would be much appreciated! I tried with an in memory StringIO object but this somehow doesn't comply with the underlying Knack CLI code.</p>
</div>
<div class="post-text" itemprop="text">
<p>since you still didnt delete this I assume you still looking for a way.</p>
<pre><code>from subprocess import call   
call(["az", "vm", "list", "-g", "rgName"])
</code></pre>
<p>you will also need to silently auth first with something like:</p>
<pre><code>az login --service-principal -u http://sample-cli-login -p Test1234 --tenant 54826b22-38d6-4fb2-bad9-b7b93a3e9c5a
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you can use the subprocess and call the az cli to get the output instead using get_default_cli. Reference <a href="https://github.com/yiuc/azure-audit" rel="nofollow noreferrer">Git Repo</a></p>
<pre><code>import subprocess
import json

process = subprocess.Popen(['az','network', 'ddos-protection', 'list'], stdout=subprocess.PIPE)
out, err = process.communicate()
d = json.loads(out)
print(d)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>subprocess.run</code> instead of using <code>subprocess.Popen</code></p>
<p>It will by default cause python script to wait until the program run from subprocess (in this case azure cli command) is completed.</p>
<p>For example, let's create an Azure AD application.</p>
<pre><code>import subprocess
import json

# create command you want to run on az cli as a string
create_app_command = "az ad sp create-for-rbac --skip-assignment --years 20 --name dummy_app"

# use 'shell = True' as Azure CLI installed on system is accessible from native shell
# using 'subprocess.PIPE' will return stderr and stdout to create_app object
create_app = subprocess.run(create_app_command, shell = True, stdout=sbuprocess.PIPE, stderr = sbuprocess.PIPE)

# reading output and error
create_app_stdout =  create_app.stdout.decode("utf-8")
create_app_stderr = create_app.stderr.decode("utf-8")

# now you can log error to a file 'logging.error(create_app_stderr)

# you can use stdout for further logic in code
# let's get you need to get appID and password for authentication somewhere later in code
ad_app_details = json.loads(create_app_stdout)
ad_app_appId = ad_app_details['appId']
ad_app_password = ad_app_details['password']
</code></pre>
<p>For more information on using subprocess module see <a href="https://docs.python.org/3/library/subprocess.html#security-considerations" rel="nofollow noreferrer">this</a> link</p>
</div>
<span class="comment-copy">Just curious: Why attempt to call the CLI commands, when you already have the management REST API available to you, wrapped in a python SDK? The CLI and the various SDKs (including python) are built upon the same REST API.</span>
<span class="comment-copy">its a lot easier to use cli, like a LOT. we were using some sdk calls and some cli calls in our python solution. mostly because of that</span>
<span class="comment-copy">well, just do a standard shell command, thats it</span>
<span class="comment-copy">If you want to do this, you want the <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer"><code>subprocess</code></a> module. Read the introduction, go through the examples in the "Replacing Older Functions", then use the rest as a reference to help you as needed to flesh out the details.</span>
<span class="comment-copy">@4c74356b41 - there is a function defined in the python sdk ( <code>list_resources()</code> ) for enumerating items in a resource group. Unless the OP is doing something esoteric, this is all built-in and has no dependency on running shell processes.</span>
<span class="comment-copy">Use supprocess.Popen() and the az binary instead. pipe json directly. My major reason for not using pypi azure-cli is that it is 335MB of modules that needs to be installed while the az binary (apt install azure-cli) just takes a few seconds.</span>
