<div class="post-text" itemprop="text">
<p>I have a text file as follows</p>
<pre><code> 99                     0                   42
 98                     0                    4
 97                     0                    5
 96                     0                   32
 95                     0                   115
 94                     0                   10
 93                     0                   16
 92                     0                    6
 91                     0                    121
 90                     0                    9
</code></pre>
<p>I want to read <code>col[0]</code> and <code>col[2]</code> and report <code>col[0]</code> values <code>if col[2] &gt; 100</code></p>
<p>Any help ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your columns are separated by arbitrary runs of whitespace.</p>
<p>While this is sort of a CSV dialect, and could be parsed with the <code>csv</code> module with a bit of work, it may be easier to just call <code>split</code> on each line:</p>
<pre><code>with open('textfile.txt') as f:
    rows = (line.split() for line in f)
</code></pre>
<p>Now, each row in <code>rows</code> will be a list of three strings. But you also need to convert those strings to numbers:</p>
<pre><code>    numbers = ([int(col) for col in row] for row in rows)
</code></pre>
<p>And now, you want just the rows where column 2 is <code>&gt; 100</code>, so:</p>
<pre><code>    bignumbers = (row for row in numbers if row[2] &gt; 100)
</code></pre>
<p>And you want just the first column in each of those rows:</p>
<pre><code>    values = (row[0] for row in bignumbers)
</code></pre>
<p>And now you want to print them out, one per line:</p>
<pre><code>    print(*values, sep='\n')
</code></pre>
<hr/>
<p>If you don't understand these generator expressions, we can unravel the whole thing into a loop instead:</p>
<pre><code>with open('textfile.txt') as f:
    for line in f:
        row = line.split()
        numbers = []
        for col in row:
            numbers.append(int(col))
        if numbers[2] &gt; 100:
            value = numbers[0]
            print(value)
</code></pre>
<hr/>
<p>You can of course condense either version to make it a lot more concise. For example:</p>
<pre><code>with open('textfile.txt') as f:
    bignumbers = (row for row in map(str.split, f) if int(row[2]) &gt; 100)
    print(*(int(row[0]) for row in bignumbers), sep='\n')

with open('textfile.txt') as f:
    for line in f:
        row = line.split()
        if int(row[2]) &gt; 100:
            print(int(row[0]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming your text file looks the way you have posted it, here's one way that could work:</p>
<p>First, we access the text file from within your python script. By opening it in <code>read</code> mode, we iterate through it, line-by-line. For each line, we use the string method <code>string.split()</code> to partition it at the default whitespace or tab-separation, as you show in your file. We then check to see if the condition you mention holds true, and if so, we report it.
Bonus: we handle errors, so that one faulty line with some missing data will not halt your entire program (although, then, if you're planning to use this code in a function, you should still wrap it in a try-except block).</p>
<pre><code>with open("text-file.txt", 'r') as infile:
    for line in infile:
        parts = line.split()
        try:
            if int(parts[2]) &gt; 100:
            print(parts[0])
        except IndexError as err:
            print(err)
</code></pre>
<p><strong>Python &gt;= 3.8</strong>: in this version, we can make use of the <code>:=</code> assignment operator to make the loop more concise</p>
<pre><code>with open("text-file.txt", 'r') as infile:
    for line in infile:
        try:
            if int((parts := line.split())[2]) &gt; 100:
            print(parts[0])
        except IndexError as err:
            print(err)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can read each line, and only print column 1 if column 3 is bigger than 100:</p>
<pre><code>threshold = 100

with open('file.txt') as in_file:
    for line in in_file:
        col1, _, col3 = line.split()

        if int(col3) &gt; threshold:
            print(col1)
</code></pre>
<p>Which gives:</p>
<pre><code>95
91
</code></pre>
<p>As commented by <a href="https://stackoverflow.com/users/908494/abarnert">@abarnert</a> in the comments, you can also be extra safe and include <code>str.strip()</code> when splitting the items on each line:</p>
<pre><code>col1, _, col3 = line.strip().split()
</code></pre>
<p><a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow noreferrer"><code>str.strip()</code></a> removes all whitespace at the start and end, including spaces, tabs, newlines and carriage returns. Leaving it in doesn't do any harm, and allows your program to deal with unexpected extra whitespace inserted into the file. </p>
<p>In your case, this doesn't affect anything, but it certainly doesnt hurt to include it in. If anyone can suggest a case where it is needed, I will happily add it to this answer. </p>
</div>
<span class="comment-copy">what's the separator between the columns in the text file?</span>
<span class="comment-copy">Assignment expressions are coming in 3.8, they aren't in 3.7.</span>
<span class="comment-copy">Right, I'll incorporate that as an edit</span>
<span class="comment-copy">More concise isn't automatically better. This use of assignment expressions hurts readability without enabling simpler control flow or decreasing indentation or doing anything worthwhile.</span>
<span class="comment-copy">You don't really need the <code>strip</code> here. <code>' 99                     0                   42  '</code>.split()` gives <code>['99', '0', '42']</code>.</span>
<span class="comment-copy">@abarnert True, I've always just done that for safe measure. I've removed it in any case.</span>
<span class="comment-copy">Yeah, it certainly doesn't hurt, and it's worth teaching people about <code>strip</code>, but I think to do it well you'd have to explain what it does and then explain that it isn't needed here and then give an example where it <i>is</i> needed, at which point it would probably be too verbose even for meâ€¦</span>
