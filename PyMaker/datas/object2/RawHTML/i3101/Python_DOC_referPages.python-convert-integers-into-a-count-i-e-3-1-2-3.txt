<div class="post-text" itemprop="text">
<p>This might be more information than necessary to explain my question, but I am trying to combine 2 scripts (I wrote for other uses) together to do the following.</p>
<p>TargetString (input_file) <code>4FOO</code> <code>2BAR</code></p>
<p>Result (output_file) <code>1FOO</code> <code>2FOO</code> <code>3FOO</code> <code>4FOO</code> <code>1BAR</code> <code>2BAR</code></p>
<p>My first script finds the pattern and copies to file_2</p>
<pre><code>pattern = "\d[A-Za-z]{3}"
matches = re.findall(pattern, input_file.read())
f1.write('\n'.join(matches))
</code></pre>
<p>My second script opens the output_file and, using re.sub, replaces and alters the target string(s) using capturing groups and back-references. But I am stuck here on how to turn i.e. <code>3</code> into <code>1</code> <code>2</code> <code>3</code>.</p>
<p>Any ideas?</p>
</div>
<div class="post-text" itemprop="text">
<p>This simple example doesn't need to use regular expression, but if you want to use <code>re</code> anyway, here's example (note: you have minor error in your pattern, should be <code>A-Z</code>, not <code>A-A</code>):</p>
<pre><code>text_input = '4FOO 2BAR'

import re

matches = re.findall(r"(\d)([A-Za-z]{3})", text_input)

for (count, what) in matches:
    for i in range(1, int(count)+1):
        print(f'{i}{what}', end=' ')

print()
</code></pre>
<p>Prints:</p>
<pre><code>1FOO 2FOO 3FOO 4FOO 1BAR 2BAR 
</code></pre>
<p>Note: If you want to support multiple digits, you can use <code>(\d+)</code> - note the <code>+</code> sign.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming your numbers are between 1 and 9, without regex, you can use a list comprehension with f-strings (Python 3.6+):</p>
<pre><code>L = ['4FOO', '2BAR']
res = [f'{j}{i[1:]}' for i in L for j in range(1, int(i[0])+1)]

['1FOO', '2FOO', '3FOO', '4FOO', '1BAR', '2BAR']
</code></pre>
<p>Reading and writing to CSV files are covered elsewhere: <a href="https://stackoverflow.com/questions/24662571/python-import-csv-to-list">read</a>, <a href="https://stackoverflow.com/questions/2084069/create-a-csv-file-with-values-from-a-python-list">write</a>.</p>
<p>More generalised, to account for numbers greater than 9, you can use <code>itertools.groupby</code>:</p>
<pre><code>from itertools import groupby

L = ['4FOO', '10BAR']

def make_var(x, int_flag):
    return int(''.join(x)) if int_flag else ''.join(x)

vals = ((make_var(b, a) for a, b in groupby(i, str.isdigit)) for i in L)

res = [f'{j}{k}' for num, k in vals for j in range(1, num+1)]

print(res)

['1FOO', '2FOO', '3FOO', '4FOO', '1BAR', '2BAR', '3BAR', '4BAR',
 '5BAR', '6BAR', '7BAR', '8BAR', '9BAR', '10BAR']
</code></pre>
</div>
<span class="comment-copy">check <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer">python range</a></span>
<span class="comment-copy"><code>for</code> and <code>range</code> will do this nicely.  Where are you stuck in writing a loop?</span>
<span class="comment-copy">You could generalise this to <code>(\d)+</code> to support multi-digit numbers.</span>
<span class="comment-copy">@tobias_k Yes, you have right. I put a note to my answer.</span>
<span class="comment-copy">What about <code>10Foo</code>? (Update: Did not see the clarification in last line)</span>
<span class="comment-copy"><code>Assumes your numbers are between 1 and 9.</code>. I'd like more clarity from OP to see whether this is actually a problem.</span>
<span class="comment-copy">Granted, given OP's examples this is perfectly fine. However, the first line could be understood as "you do not need regex, but only if you have Python 3.6+".</span>
<span class="comment-copy">@jpp thank you! this gives me an idea on how to approach, i was getting tunneled into what I already had.. the integers go into double digits so I would need to adjust to go beyond 1-9</span>
<span class="comment-copy">@physlexic, I've updated for a more generalized solution.</span>
