<div class="post-text" itemprop="text">
<p>I learned today that in python on windows, doing <code>os.chdir('f:\\')</code> is very different than doing <code>os.chdir('f:')</code>. The command with the trailing backslash actually changes the current directory. Without the backslash, the command is like typing <code>f:</code> in the command prompt, and changes the current directory to the last current directory on the <code>f</code> drive.</p>
<p>Here's an example:</p>
<pre><code>import time
import os
if __name__ == '__main__':
    os.chdir('f:\\directory')
    print 'cwd is {}'.format(os.getcwd())
    os.chdir('d:\\directory')
    print 'cwd is {}'.format(os.getcwd())
    os.chdir('f:')
    print 'cwd is {}'.format(os.getcwd())
    os.chdir('f:\\')
    print 'cwd is {}'.format(os.getcwd())
</code></pre>
<p>prints</p>
<pre><code>cwd is f:\directory
cwd is d:\directory
cwd is f:\directory
cwd is f:\
</code></pre>
<p>I can understand why this difference is useful, but couldn't find anything documenting this behavior. I'd gotten used to leaving trailing slashes off my directories as I usually use here strings...</p>
<p>Is this behavior documented anywhere? Can I rely on it not changing?</p>
</div>
<div class="post-text" itemprop="text">
<p>The documentation mentions this behavior for another function in the same module. Its probably safe to assume that they will be handled the same way:</p>
<blockquote>
<p>Note that since there is a current directory for each drive, <code>os.path.join("c:", "foo")</code> represents a path relative to the current directory on drive <code>C:</code> (<code>c:foo</code>), not <code>c:\foo</code>.</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/os.path.html" rel="nofollow noreferrer">https://docs.python.org/3/library/os.path.html</a></p>
<p>However, <a href="https://stackoverflow.com/questions/51432825/documentation-describing-this-python-windows-os-chdir-behavior#comment89836542_51432825">the comment by abarnert</a> is correct. The behavior is caused by how Windows interprets paths.</p>
</div>
<div class="post-text" itemprop="text">
<p>This isn't a Python feature, it's a general Windows feature.</p>
<p>On Windows, every drive keeps track of its own current working directory. So really, "the current working directory" is the current working directory of the current drive.</p>
<ul>
<li><p><code>chdir('F:')</code> changes the drive to <code>F</code>, but doesn't change F's working directory, so you end up changing to the current directory of the <code>F</code> drive.</p></li>
<li><p><code>chdir('F:\\')</code> changes the drive to <code>F</code>, and changes <code>F</code>'s working directory to its root, so you end up changing to the root directory of the <code>F</code> drive.</p></li>
</ul>
<p>It's also not specific to <code>chdir</code>. Any function that deals with pathnames, even <code>open</code>, will act this way.</p>
<p>*<code>open('F:spam.txt')</code> opens the file <code>spam.txt</code> in the F drive's current working directory (even if your current drive is, say, C). (This is consistent with the way DOS-style tools work.)</p>
<p>*<code>open('F:\\spam.txt')</code> opens the file <code>spam.txt</code> in the F drive's root directory.</p>
<hr/>
<p>Some cross-platform tools try to instead pretend the drives are top-level mount points, so <code>cd F:</code> is like <code>cd /f/</code>, and <em>does</em> go to the root of <code>F</code>. This has the advantage of making native Windows and Cygwin builds of your program work very similarly, but the disadvantage of making your program not work like traditional DOS-style programs. In general, more tools do things the way Python does—it gives you more flexibility, and is usually less confusing.</p>
<hr/>
<p>As you added in a comment:</p>
<blockquote>
<p>Apart from the "Can I rely on it not changing", I mean who can tell what Microsoft will break in their newly announced 'improved' console.</p>
</blockquote>
<p>Well, this behavior goes back to… I think PC-DOS 2.0, or whenever they first added directories. And if they ever were going to improve this, they'd presumably do it by getting rid of the drive-and-path for something either more flexible, or more POSIX-like. (Although UNC paths and <code>\\.\…</code> "raw" paths are already arguably both more flexible and more POSIX-like, and they didn't get rid of the drive-and-dir system when they added those in NT…)</p>
</div>
<span class="comment-copy">This isn't a Python feature, it's a Windows feature. On Windows, each drive has its own working directory, so <code>F:</code> means the current working directory of the F drive, while `F:\` means the root directory of the F drive.</span>
<span class="comment-copy">Also, it's not specific to <code>chdir</code>. If you <code>open('F:spam.txt')</code>, you get <code>spam.txt</code> on F's current working directory, but <code>open('F:\\spam.txt')</code> you get <code>spam.txt</code> on F's root directory.</span>
<span class="comment-copy">That is a Windows feature. And Python's documentation is meant to be cross-platform, so most details about the operating systems that it may run on are not discussed.</span>
<span class="comment-copy">@abarnert: those 2 comments make a fine answer – especially the first one. (Apart from the "Can I rely on it not changing", I mean who can tell what Microsoft will break in their newly announced 'improved' console.)</span>
<span class="comment-copy">Awesome - the link to the documentation is great.</span>
<span class="comment-copy">@aggieNick02 Great. Glad I could help.</span>
<span class="comment-copy">The cd f: comment is spot on. It did not occur to me to try, in a command prompt, cd f: to see that it does not change the cwd. I'm glad that os.chdir behaves differently than cd in the case that the argument is not for the current drive, because that would be incredibly frustrating...</span>
