<div class="post-text" itemprop="text">
<p>I am trying to write a ValueError message in a nice compact, and clean looking way: </p>
<pre><code>    raise ValueError("Model Architecture Not Recognized. Please ensure that your model's filename contains either"
    """ "vgg" and "16" for a 16 layer VGG model, "vgg" and "19" for a 19 layer VGG model, or "nin" for a Network"""
    " In Network model. Note that filenames are not case sensitive.")   
</code></pre>
<p>Will this work for both Python 2.7 and Python 3? Is there a better way to have a multi-line error message? Are there any issues with not using a <code>+</code> in between the strings used for the error message? </p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Will this work for both Python 2.7 and Python 3?</p>
</blockquote>
<p>Yes, string literal concatenation works the same way in <a href="https://docs.python.org/2/reference/lexical_analysis.html#string-literal-concatenation" rel="nofollow noreferrer">Python 2</a> and <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-literal-concatenation" rel="nofollow noreferrer">Python 3</a>.</p>
<blockquote>
<p>Is there a better way to have a multi-line error message? </p>
</blockquote>
<p>Yes. Especially since this isn't actually a multi-line error message in the first place. See below.</p>
<blockquote>
<p>Are there any issues with not using a + in between the strings used for the error message?</p>
</blockquote>
<p>Semantically, no. Adjacent string literals are concatenated into a single string value. String literals separated by <code>+</code> define a bunch of separate string values, then ask Python to concatenate them at runtime. But, because the compiler knows that the expression is made up of nothing but immutable constants, it will fold them together into a single value.<sup>1, 2</sup></p>
<p>But pragmatically, it can be hard to read code like this (especially when you're trying to read it on an 80-column display like a typical terminal-mode editor, or Stack Overflow). As a reader, how do I know whether you intended three string literals to be concatenated into one value, or three string literals with commas between them to be passed as three separate values to the <code>ValueError</code> constructor? Well, if I look carefully, and think about it, there's not much point to passing those two other strings as extra arguments to a <code>ValueError</code> (even though it's legal), and those spaces make it look like the strings are meant to go together, and so on… but it would be better if I could understand you code without looking carefully, scrolling the window to the right, and thinking about it. So, sometimes it's worth using a <code>+</code>, or even something ugly like backslash continuation, to avoid that confusion.</p>
<hr/>
<p>As mentioned above, you haven't produced a multi-line string. The strings get concatenated into one giant line. And it seems like you already know this, or you wouldn't have prepended a space to the start of the second and third literals.</p>
<p>If you actually want a multiline string, you <em>could</em> do that by adding <code>\n</code> characters in appropriate places.</p>
<p>But it's a lot easier to just write a multiline string:</p>
<pre><code>raise ValueError("""Model Architecture Not Recognized. Please ensure that your model's filename contains either
    "vgg" and "16" for a 16 layer VGG model, "vgg" and "19" for a 19 layer VGG model, or "nin" for a Network
    In Network model. Note that filenames are not case sensitive.""")
</code></pre>
<p>Or, even better, use <a href="https://docs.python.org/3/library/textwrap.html" rel="nofollow noreferrer"><code>textwrap</code></a>, so you can write something that looks nice in your source but also looks nice on output:</p>
<pre><code>raise ValueError(textwrap.fill(textwrap.dedent("""
    Model Architecture Not Recognized. Please ensure that your model's
    filename contains either "vgg" and "16" for a 16 layer VGG model, 
    "vgg" and "19" for a 19 layer VGG model, or "nin" for a Network
    In Network model. Note that filenames are not case sensitive.
"""))
</code></pre>
<p>But if you're expecting this to be printed as part of a traceback, rather than, say, <code>except Exception as e: print(e)</code>, it's still going to look funky:</p>
<pre><code>ValueError:  Model Architecture Not Recognized. Please ensure that your model's
filename contains either "vgg" and "16" for a 16 layer VGG model,
"vgg" and "19" for a 19 layer VGG model, or "nin" for a Network In
Network model. Note that filenames are not case sensitive.
</code></pre>
<p>A better solution is probably to write a short error string plus a separate long (multi-line, if you want) description string. You can even make your own <code>ValueError</code> subclass that represents itself by dumping the long string. You can even throw the <code>textwrap</code> stuff into the subclass. So then, you'd write, say:</p>
<pre><code>raise ModelArchitectureError(
    "Model Architecture Not Recognized.",
    """Please ensure that your model's
        filename contains either "vgg" and "16" for a 16 layer VGG model, 
        "vgg" and "19" for a 19 layer VGG model, or "nin" for a Network
        In Network model. Note that filenames are not case sensitive.
    """))
</code></pre>
<p>Or, even better, make those default values for the <code>ModelArchitectureError</code>'s constructor, so you can just do this:</p>
<pre><code>raise ModelArchitectureError()
</code></pre>
<hr/>
<p><sub>1. Of course Python doesn't <em>require</em> this constant evaluation, it just allows it. CPython 2.7 and 3.7, PyPy 6 2.7 and 3.5, and Jython 2.7 all do it, but some other implementation might not. In that case, the <code>+</code> version would have the same end-user-visible effect, but it would take more time and temporary memory (and possibly cache space and string-intern-table space) to do it.</sub></p>
<p><sub>2. If you write an import hook that transforms the code at the source, token, or AST level before passing it to the compiler, the two could conceivably be different, because they don't become the same until the compiler/optimizer gets to it.</sub></p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/10660435/pythonic-way-to-create-a-long-multi-line-string">Pythonic way to create a long multi-line string</a></span>
<span class="comment-copy">This is not multiline. Also I would like error messages to be short and precises so I could look them up in the documentation.</span>
<span class="comment-copy">So I should try to simplify the message farther? I figured that including how to correct the issue, was simpler than telling the user to go look it up.</span>
<span class="comment-copy">If you want it to be multiline, why not just write it as a multiline string, inside a single pair of <code>"""</code>? (You might also want to consider <code>textwrap</code>ping it, though…)</span>
