<div class="post-text" itemprop="text">
<p>I have a line of code like this:</p>
<pre><code>pool.map(functools.partial(method_to_run, self), data)
</code></pre>
<p><code>method_to_run</code> takes the data item and then uses an object attached to self to make a request to a server, using an instance variable of that object containing an authentication token, set earlier. </p>
<p>The issue I have is that each process seems to get a new instance of that object (or <code>self</code>), and therefore that instance has not had the token set and therefore the request fails.</p>
<p>Is there a way to share self between pooled processes?</p>
</div>
<div class="post-text" itemprop="text">
<p>TLDR: the way you describe it - no - it is not possible.</p>
<p>Whenever you fork a process (i.e. via creating a pool of those) all data from the memory is copied into a fork (i.e. not referenced).</p>
<p>As a result any mutation that you make to the original payload does not affect the fork's replica.</p>
<p>You have three options here:</p>
<ol>
<li>Use a thread pool (threads share memory): <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">https://docs.python.org/3/library/threading.html</a></li>
<li>Employ IPC structures: <a href="https://pymotw.com/2/multiprocessing/communication.html" rel="nofollow noreferrer">https://pymotw.com/2/multiprocessing/communication.html</a></li>
<li>Assign the authentication token to self before you create a process pool. This will make sure that self's replica will contain the token.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>While you could do it using a manager, it means the object will be copied to all other processes every time it is modified.</p>
<p>I suggest passing the token itself to the process, instead of copying the entire object around. If you don't have the token available at the time you call <code>pool.map</code>, then the idiomatic idea is to create a <code>Queue</code> to send the token to your process later. Your process can sit at the other end of the <code>Queue</code> and wait for the token before issuing the request.</p>
</div>
