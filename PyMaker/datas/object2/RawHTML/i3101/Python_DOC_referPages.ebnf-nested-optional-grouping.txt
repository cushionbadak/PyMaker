<div class="post-text" itemprop="text">
<p>I'm observing the python grammar listed in the <a href="https://docs.python.org/3/reference/grammar.html" rel="nofollow noreferrer">manual</a> and considering the outputs of their form of EBNF, specifically with varargslist: </p>
<pre><code>varargslist: (vfpdef ['=' test] (',' vfpdef ['=' test])* [',' [
'*' [vfpdef] (',' vfpdef ['=' test])* [',' ['**' vfpdef [',']]]
| '**' vfpdef [',']]]
| '*' [vfpdef] (',' vfpdef ['=' test])* [',' ['**' vfpdef [',']]]
| '**' vfpdef [',']
</code></pre>
<p>Though I'm specifically interested in this section: </p>
<pre><code>['*' [vfpdef] (',' vfpdef ['=' test])* ]
</code></pre>
<p>Which I interpret as:</p>
<pre><code>[ [ non-terminal1 ] ( non-terminal2) ]
</code></pre>
<p>I realize that both</p>
<pre><code>non-terminal1 (non-terminal2)
(non-terminal2)
</code></pre>
<p>Are valid options in this form, but does this include:</p>
<pre><code>non-terminal1
</code></pre>
<p>as well? The <a href="https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form" rel="nofollow noreferrer">wiki</a> page for EBNF states</p>
<pre><code>That is, everything that is set within the square brackets may be 
present just once, or not at all
</code></pre>
<p>but does this group everything within the square brackets as one entity that may appear only once, or is the option selective, for example:</p>
<pre><code>[ [non-terminal1] [(non-terminal2)] ]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If</p>
<pre><code>['*' [vfpdef] (',' vfpdef ['=' test])* ]
</code></pre>
<p>is </p>
<pre><code>[ [ non-terminal1 ] non-terminal2 ]    -- parentheses deleted as redundant
</code></pre>
<p>then <code>non-terminal2</code> represents</p>
<pre><code>non-terminal3 *
</code></pre>
<p>which is nullable by definition. (That is, it might be empty.)</p>
<p>So, strictly speaking, once you've done the transform</p>
<pre><code>non-terminal1
</code></pre>
<p>is not a valid outcome. The parse must be</p>
<pre><code>non-terminal1 non-terminal2
</code></pre>
<p>where <code>non-terminal2</code> has matched an empty string.</p>
<p>But the actual parse logic is more likely to want to use the formulation</p>
<pre><code>[ [ non-terminal1 ] non-terminal3... ]   -- Not EBNF syntax, but I hope you get the idea
</code></pre>
<p>in which <code>non-terminal2</code> has been eliminated as a distraction from the resulting parse. In this case, since the 0-or-more repetition can be 0 repetitions, correct outcomes would include</p>
<pre><code>                                          -- nothing :-)
non-terminal1
              non-terminal3
non-terminal1 non-terminal3
              non-terminal3 non-terminal3
</code></pre>
<p>and so on.</p>
</div>
