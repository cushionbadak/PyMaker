<div class="post-text" itemprop="text">
<p>I came upon this code in a tutorial:</p>
<pre><code> for row in csv_reader:
        if not row:
            continue
        dataset.append(row)
</code></pre>
<p>Which I take to mean that if the code encounters something other than a row, just skip and continue. Is that correct? </p>
<p>What defines 'not row'?</p>
</div>
<div class="post-text" itemprop="text">
<p>This allows you to skip over empty lines in a CSV file.</p>
<hr/>
<p><code>not row</code> just means "<code>row</code> is falsey".</p>
<p>In Python, the following things are falsey:</p>
<ul>
<li><code>False</code></li>
<li><code>None</code></li>
<li>Numeric zeroes</li>
<li>Empty containers</li>
</ul>
<p>(Of course you can write your own class with a <code>__bool__</code> method that does anything you want—but by convention, it should follow the same rule.)</p>
<p>This is all explained in <a href="https://docs.python.org/3/reference/expressions.html#boolean-operations" rel="nofollow noreferrer">Boolean operations</a> in the docs.</p>
<p>--</p>
<p>The rows iterated by a <code>csv.reader</code> are lists. (And lists are containers, so they're falsey iff they're empty.)</p>
<p>An empty line produces an empty list; a line with text but no delimiters produces a list of one string; a line with delimiters produces a list of two or more strings.</p>
<p>This is covered in the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><code>csv</code></a> module docs… but not really all in one place.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>row</code> is just a variable name in this context. When you do <code>if row</code>, you actually checking if there is any content to the variable that python considers to be <code>True</code>.</p>
<p>Take a look at <a href="https://stackoverflow.com/a/39984051/2535611">this answer</a> from Patrick Haugh in which he highlights lots of examples of what is <code>Falsy</code> in python.</p>
<p>To illustrate in a minimal example:</p>
<pre><code>import csv
for row in csv.reader(['row1,foo','', 'row3,bar']):
    print(row)
</code></pre>
<p>yields</p>
<pre><code>['row1', 'foo']
[]
['row3', 'bar']
</code></pre>
<p>But if you do</p>
<pre><code>for row in csv.reader(['row1,foo','', 'row3,bar']):
    if row:
        print(row)
</code></pre>
<p>Then output is</p>
<pre><code>['row1', 'foo']
['row3', 'bar']
</code></pre>
<p>and thus basically the empty row is filtered out.</p>
</div>
<span class="comment-copy">An empty line. Maybe you have a blank line and you want to ignore it. This would give you all non-empty lines.</span>
<span class="comment-copy">not negates whatever is passed to it. not True is False.</span>
<span class="comment-copy">It's checking to see of the "truthiness" of <code>row</code> is <code>False</code> which would indicate the value returned was an empty sequence of elements.</span>
<span class="comment-copy">I thought it might be an empty row among other things, but I can't seem to find definitive literature. @ martineau, you sound pretty definitive so I'll go with that until something reveals that it is not. Thanks.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/39983695/what-is-truthy-and-falsy-in-python-how-is-it-different-from-true-and-false">What is Truthy and Falsy in python? How is it different from True and False?</a></span>
<span class="comment-copy">Surely you wanted to use the same list in your second example as in your first? Because that will just print out the line <code>['one', 'two', 'three', '']</code>.</span>
<span class="comment-copy">Perhaps it is more efficient to write: for row in csv_reader:                                                                if row:                                                                dataset.append(row)</span>
