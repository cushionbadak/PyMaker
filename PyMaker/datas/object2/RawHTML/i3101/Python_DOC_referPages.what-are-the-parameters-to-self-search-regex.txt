<div class="post-text" itemprop="text">
<p><code>youtube-dl</code> has in their <a href="https://github.com/rg3/youtube-dl/blob/master/CONTRIBUTING.md" rel="nofollow noreferrer">CONTRIBUTING documentation</a></p>
<pre><code>description = self._search_regex(
    r'&lt;span[^&gt;]+id="title"[^&gt;]*&gt;([^&lt;]+)&lt;',
    webpage, 'description', fatal=False)
</code></pre>
<p>What are the parameters to <code>_search_regex</code>? The documentation doesn't show what <code>'description'</code> is? Is that an HTML attribute?</p>
</div>
<div class="post-text" itemprop="text">
<p>As an internal function (it starts with an underscore), it is not well-documented, but you can find <a href="https://github.com/rg3/youtube-dl/blob/631f93ee2d5dfe5a90da38d293159670ada4d95e/youtube_dl/extractor/common.py#L943" rel="nofollow noreferrer">its definition in the source code</a>.</p>
<p><code>_search_regex</code> is a utility function that basically calls <a href="https://docs.python.org/3/library/re.html#re.search" rel="nofollow noreferrer"><code>re.search</code></a>, but unifies handling in the case the regular expression does not match. This is important as many extractors use regular expressions and it would be tiresome (not to mention a huge code duplication) to replicate the error handling all over the place.</p>
<p>Here are its parameters:</p>
<ul>
<li><code>pattern</code>: The regular expression being searched. For instance something like <code>r'(?:foo|href)\s*=\s*(http://[^"]*)"</code>. Usually, the first captured group (i.e. the stuff in parentheses, but not beginning with <code>?:</code>. For more information on regular expressions, consult the <a href="https://docs.python.org/dev/library/re.html#regular-expression-syntax" rel="nofollow noreferrer">Python standard library documentation</a>.</li>
<li><code>string</code>: The string to search in (i.e. the <a href="https://dictionary.cambridge.org/dictionary/english/a-needle-in-a-haystack" rel="nofollow noreferrer">haystack</a>), downloaded from the service you are connecting to.</li>
<li><code>name</code>: A name you chose; this is presented to the user if something fails. Should be unique withing your extractor. Examples are <code>'manifest URL'</code> or <code>'content section'</code>. That way, you know immediately where the problem lies if a user posts an error message without the stack trace.</li>
<li><code>default=NO_DEFAULT</code>: Default value. Sometimes, there is a default in case the regexp doesn't match. If so, pass it in here.</li>
<li><code>fatal=True</code>: If no default is given, this determines the behavior if the regular expression fails to match. <code>True</code>: abort extraction and throw a detailed error; for instance if extracting the video URL fails. <code>False</code>: Only omit a warning and go on; if searching for an optional field (e.g. description) fails.</li>
<li><code>flags=0</code> - Explicit regular expression flags. Rarely used; see the <a href="https://docs.python.org/dev/library/re.html#re.A" rel="nofollow noreferrer">Python standard library documentation</a> for more information.</li>
<li><code>group=None</code> - Match a different group but the first one. Rarely used, only sensible if your regular expression contains named groups. Refer to the <a href="https://docs.python.org/dev/library/re.html#regular-expression-syntax" rel="nofollow noreferrer">Python standard library documentation</a> (keyword <em>named groups</em>) for more details.</li>
</ul>
</div>
<span class="comment-copy">FWIW the actual definition of the function can be found here: <a href="https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/common.py" rel="nofollow noreferrer">github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/â€¦</a></span>
<span class="comment-copy">So that's just a name for error reporting? @AlexanderReynolds</span>
<span class="comment-copy">great answer, after finding the source code it was pretty clear what was happening. it's a rather bizarre parameter, and a rather bizarre project structure. hell, it's even pretty bizarre that they encourage parsing html with regex</span>
<span class="comment-copy">As the one I wrote that code, I'm of course interested in why you consider it bizarre. What specifically would you change? In your extractor, <a href="https://docs.python.org/2.7/library/markup.html" rel="nofollow noreferrer">you are welcome to to use a proper XML parser instead</a>, but not many websites consistently output well-formed XML, or even HTML. The only restriction is that you cannot use libraries outside of the Python 2.7+ standard library. This is an intentional trade-off of user convenience against developer convenience, and in my opinion <i>the</i> primary reason for the success of youtube-dl over "competing" projects.</span>
<span class="comment-copy">I would prefer something like jquery/css abstraction over HTML-regex (which I suppose is <code>pyquery</code>)?</span>
<span class="comment-copy">It seems like this kind of project would be best with node/rx.js where you have access to a dom and can run headless mode. The regex thing just seems brittle and more-work, <code>.attr('href')</code> could easily determine name for error reporting: <code>"[Extractor: %s] Asserts attribute %s be present, and it's not on line %s"</code>. It's also more what I'm used to when I'm parsing HTML, and chrome-dev-toolkit will generate the css-selectors for me. (though regex's are no problem, I just see no reason to do more work for a more brittle result).</span>
<span class="comment-copy">Line numbers are not really helpful, since they change from to time, and could be very misleading; many youtube-dl users only report a small fraction of the actual error message, despite instructions in the very error message to report the whole thing. But yes, I concur, having a HTML parser and CSS query selector engine would be great! Alas, we have to work with the available tools. If you are willing to contribute code for HTML parsing and CSS query selectors to youtube-dl - or the Python standard library - I'm sure everyone would be very happy.</span>
