<div class="post-text" itemprop="text">
<p>According to the <a href="https://docs.python.org/3.6/library/io.html#io.BufferedReader" rel="nofollow noreferrer">documentation</a> <code>io.BufferedReader</code> inherits <code>io.IOBase</code>: <code>io.IOBase</code> -&gt; <code>io.BufferedIOBase</code> -&gt; <code>io.BufferedReader</code>. Consequently, it is supposed to implement <code>readline</code> and <code>readinto</code>, but it doesn't seem to be the case, because I get an <code>AttributeError</code>. A minimal example:</p>
<p>Data sample:</p>
<pre><code>$ printf 'foo bar\nspam ham\n' | gzip -c &gt; compressed_file.gz
</code></pre>
<p>Test code:</p>
<pre><code>import gzip
import io

with io.BufferedReader(gzip.open('compressed_file.gz', 'rt')) as buffer:
    buffer.readline()
</code></pre>
<p>Exception: </p>
<pre><code>---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
&lt;ipython-input-2-215a0d9b4feb&gt; in &lt;module&gt;()
      3 
      4 with io.BufferedReader(gzip.open('compressed_file.gz', 'rt')) as buffer:
----&gt; 5     buffer.readline()

AttributeError: '_io.TextIOWrapper' object has no attribute 'readinto'
</code></pre>
<p>Am I missing something? </p>
<p><strong>Update</strong></p>
<p>The funny thing is that you can manually get an <code>io.TextIOWrapper</code> out of <code>io.BufferedReader</code> wrapping a byte stream and the <code>readline</code> method will work. </p>
<pre><code>import gzip
import io

with io.TextIOWrapper(io.BufferedReader(gzip.open('compressed_file.gz'))) as buffer:
    buffer.readline()
</code></pre>
<p>Seems like <code>_io.TextIOWrapper</code> instances returned by <code>io.BufferedReader</code> are not the same as <code>io.TextIOWrapper</code> instances, though the latter <a href="https://github.com/python/cpython/blob/1426daa4fe47d8f8be0d416f7cba7adae1d5839f/Lib/io.py#L57" rel="nofollow noreferrer">is directly imported from <code>_io</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, you are indeed missing a critical detail: <a href="https://docs.python.org/3/library/io.html#io.BufferedReader" rel="nofollow noreferrer"><code>BufferedReader</code></a> wraps around an existing <a href="https://docs.python.org/3/library/io.html#io.RawIOBase" rel="nofollow noreferrer"><code>RawIOBase</code></a> object:</p>
<blockquote>
<p><em>class io.BufferedReader(raw, buffer_size=DEFAULT_BUFFER_SIZE)</em></p>
<p>A buffer providing higher-level access to a readable, sequential <code>RawIOBase</code> object.</p>
</blockquote>
<p>And because you've opened your gzip file in <strong>text</strong> mode, it is not a <code>RawIOBase</code> instance:</p>
<pre><code>&gt;&gt;&gt; f = gzip.open('compressed_file.gz', 'rt')
&gt;&gt;&gt; isinstance(f, io.RawIOBase)
False
</code></pre>
<p>In other words, this is a user error.</p>
<p>If you wrap a <code>BufferedReader</code> around a <strong>binary</strong> file you'll see that the <code>readline</code> method works just fine:</p>
<pre><code>&gt;&gt;&gt; io.BufferedReader(io.BytesIO(b'foo\nbar')).readline()
b'foo\n'
</code></pre>
</div>
<span class="comment-copy">Why did you choose to open in text mode? <code>[t] -&gt;</code> text, <code>b -&gt;</code>binary</span>
<span class="comment-copy">@MosesKoledoye because I'm passing the handle into a 3-rd party function, that wants a TextIO instance.</span>
<span class="comment-copy">Does the code in the Update section now solve your issue?</span>
<span class="comment-copy">@JanneKarila technically speaking, it does (in the sense that the error goes away), but it works slower than unbuffered <code>gzip.open(..., 'rt')</code>. In Python 2, the buffering solution used to work well as a remedy for Python's appallingly slow <code>gzip</code> implementation, but no more.</span>
<span class="comment-copy">The problem is, the whole thing works fine without a <code>BufferedReader</code> wrapper. That is <code>gzip.open(..., 'rt')</code> returns a handle with a properly implemented <code>readline</code>.  Hence, if <code>BufferedReader</code> is supposed to return a wrapper around the underlying buffer, then this is not a user error.</span>
<span class="comment-copy">BTW: <code>io.TextIOWrapper</code> inherits <code>io.TextIOBase</code>, which in its turn inherits <code>io.IOBase</code> (the base class defining <code>readline</code> and <code>readinto</code>). Considering that <code>RawIOBase</code> itself inherits <code>io.IOBase</code>, there should be no difference between subclasses of  <code>RawIOBase</code> and  <code>io.IOBase</code> with respect to the <code>readline</code> protocol. Thus, there should either be another explanation or this is a good case for a documentation patch.</span>
<span class="comment-copy">I've updated the question. Seems like the <code>_io.TextIOWrapper</code> returned by  <code>BufferedReader</code> is not the same as <code>io.TextIOWrapper</code>, although the <code>io</code> module directly imports <code>TextIOWrapper</code> from the C-extension <code>_io</code>.</span>
