<div class="post-text" itemprop="text">
<p>If you have a list in Python 3.7:</p>
<pre><code>&gt;&gt;&gt; li
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
</code></pre>
<p>You can turn that into a list of chunks each of length <code>n</code> with one of two common Python idioms:</p>
<pre><code>&gt;&gt;&gt; n=3
&gt;&gt;&gt; list(zip(*[iter(li)]*n))
[(0, 1, 2), (3, 4, 5), (6, 7, 8)]
</code></pre>
<p>Which drops the last incomplete tuple since <code>(9,10)</code> is not length <code>n</code></p>
<p>You can also do:</p>
<pre><code>&gt;&gt;&gt; [li[i:i+n] for i in range(0,len(li),n)]
[[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10]]
</code></pre>
<p>if you want the last sub list even if it has less than <code>n</code> elements.</p>
<p>Suppose now I have a generator, <code>gen</code>, unknown length or termination (so calling <code>list(gen))</code> or <code>sum(1 for _ in gen)</code> would not be wise) where I want every chunk.</p>
<p>The best generator expression that I have been able to come up with is something along these lines:</p>
<pre><code>from itertools import zip_longest
sentinel=object()             # for use in filtering out ending chunks
gen=(e for e in range(22))    # fill in for the actual gen

g3=(t if sentinel not in t else tuple(filter(lambda x: x != sentinel, t)) for t in zip_longest(*[iter(gen)]*n,fillvalue=sentinel))
</code></pre>
<p>That works for the intended purpose:</p>
<pre><code>&gt;&gt;&gt; next(g3)
(0, 1, 2)
&gt;&gt;&gt; next(g3)
(3, 4, 5)
&gt;&gt;&gt; list(g3)
[(6, 7, 8), (9, 10)]
</code></pre>
<p>It just seems -- clumsy. I tried:</p>
<ol>
<li>using <code>islice</code> but the lack of length seems hard to surmount;</li>
<li>using a sentinel in <code>iter</code> but the sentinel version of <code>iter</code> requires a callable, not an iterable.</li>
</ol>
<p>Is there a more idiomatic <strong>Python 3</strong> technique for a generator of chunks of length <code>n</code> including the last chuck that might be less than <code>n</code>?</p>
<p>I am open to a generator function as well. I am looking for something idiomatic and mostly more readable. </p>
<hr/>
<p>Update:</p>
<p>DSM's method in his deleted answer is very good I think:</p>
<pre><code>&gt;&gt;&gt; g3=(iter(lambda it=iter(gen): tuple(islice(it, n)), ()))
&gt;&gt;&gt; next(g3)
(0, 1, 2)
&gt;&gt;&gt; list(g3)
[(3, 4, 5), (6, 7, 8), (9, 10)]
</code></pre>
<hr/>
<p>I am open to this question being a <a href="https://stackoverflow.com/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks/22045226#22045226">dup</a> but the linked question is almost 10 years old and focused on a list. There is no <em>new</em> method in Python 3 with generators where you don't know the length and don't want any more than a chunk at a time?  </p>
</div>
<div class="post-text" itemprop="text">
<p>I think this is always going to be messy as long as you're trying to fit this into a one liner.
I would just bite the bullet and go with a generator function here. Especially useful if you don't know the actual size (say, if <code>gen</code> is an infinite generator, etc).</p>
<pre><code>from itertools import islice

def chunk(gen, k):
    """Efficiently split `gen` into chunks of size `k`.

       Args:
           gen: Iterator to chunk.
           k: Number of elements per chunk.

       Yields:
           Chunks as a list.
    """ 
    while True:
        chunk = [*islice(gen, 0, k)]
        if chunk:
            yield chunk
        else:
            break
</code></pre>
<p></p>
<pre><code>&gt;&gt;&gt; gen = iter(list(range(11)))
&gt;&gt;&gt; list(chunk(gen))
[[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10]]
</code></pre>
<p>Someone may have a better suggestion, but this is how I'd do it.</p>
</div>
<div class="post-text" itemprop="text">
<p>This feels like a pretty reasonable approach that builds just on itertools.</p>
<pre><code>&gt;&gt;&gt; g = (i for i in range(10))
&gt;&gt;&gt; g3 = takewhile(lambda x: x, (list(islice(g,3)) for _ in count(0)))
&gt;&gt;&gt; list(g3)
[[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have put together some timings for the answers here.</p>
<p>The way I originally wrote it is actually the fastest on Python 3.7. For a one liner, that is likely the best. </p>
<p>A modified version of cold speed's <a href="https://stackoverflow.com/a/51446512/298607">answer</a> is both fast and Pythonic and readable. </p>
<p>The other answers are all similar speed.</p>
<p>The benchmark:</p>
<pre><code>from __future__ import print_function

try:
    from itertools import zip_longest, takewhile, islice, count 
except ImportError:
    from itertools import takewhile, islice, count  
    from itertools import izip_longest as zip_longest
from collections import deque 

def f1(it,k):
    sentinel=object()
    for t in (t if sentinel not in t else tuple(filter(lambda x: x != sentinel, t)) for t in zip_longest(*[iter(it)]*k, fillvalue=sentinel)):
        yield t

def f2(it,k): 
    for t in (iter(lambda it=iter(it): tuple(islice(it, k)), ())):
        yield t

def f3(it,k):
    while True:
        chunk = (*islice(it, 0, k),)   # tuple(islice(it, 0, k)) if Python &lt; 3.5
        if chunk:
            yield chunk
        else:
            break

def f4(it,k):
    for t in takewhile(lambda x: x, (tuple(islice(it,k)) for _ in count(0))):
        yield t

if __name__=='__main__':
    import timeit    
    def tf(f, k, x):
        data=(y for y in range(x))
        return deque(f(data, k), maxlen=3)

    k=3
    for f in (f1,f2,f3,f4):
        print(f.__name__, tf(f,k,100000))
    for case, x in (('small',10000),('med',100000),('large',1000000)):  
        print("Case {}, {:,} x {}".format(case,x,k))
        for f in (f1,f2,f3,f4):
            print("   {:^10s}{:.4f} secs".format(f.__name__, timeit.timeit("tf(f, k, x)", setup="from __main__ import f, tf, x, k", number=10)))    
</code></pre>
<p>And the results:</p>
<pre><code>f1 deque([(99993, 99994, 99995), (99996, 99997, 99998), (99999,)], maxlen=3)
f2 deque([(99993, 99994, 99995), (99996, 99997, 99998), (99999,)], maxlen=3)
f3 deque([(99993, 99994, 99995), (99996, 99997, 99998), (99999,)], maxlen=3)
f4 deque([(99993, 99994, 99995), (99996, 99997, 99998), (99999,)], maxlen=3)
Case small, 10,000 x 3
       f1    0.0125 secs
       f2    0.0231 secs
       f3    0.0185 secs
       f4    0.0250 secs
Case med, 100,000 x 3
       f1    0.1239 secs
       f2    0.2270 secs
       f3    0.1845 secs
       f4    0.2477 secs
Case large, 1,000,000 x 3
       f1    1.2140 secs
       f2    2.2431 secs
       f3    1.7967 secs
       f4    2.4697 secs
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This solution with a generator function is fairly explicit and short:</p>
<pre><code>def g3(seq):
    it = iter(seq)
    while True:
        head = list(itertools.islice(it, 3))
        if head:
            yield head
        else:
            break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>itertools recipe</code></a> section of the doc offers various generator helpers. </p>
<p>Here you can modify <code>take</code> with the second form of <a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow noreferrer"><code>iter</code></a> to create a chunk generator.</p>
<pre><code>from itertools import islice

def chunks(n, it):
    it = iter(it)
    return iter(lambda: tuple(islice(it, n)), ())
</code></pre>
<h3>Example</h3>
<pre><code>li = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

print(*chunks(3, li))
</code></pre>
<h3>Output</h3>
<pre><code>(0, 1, 2) (3, 4, 5) (6, 7, 8) (9, 10)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.chunked" rel="nofollow noreferrer"><code>more_itertools.chunked</code></a>:</p>
<pre><code>list(more_itertools.chunked(range(11), 3))
# [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10]]
</code></pre>
<p>See also the <a href="https://more-itertools.readthedocs.io/en/stable/_modules/more_itertools/more.html#chunked" rel="nofollow noreferrer">source</a>:</p>
<pre><code>iter(functools.partial(more_itertools.take, n, iter(iterable)), [])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My attempt using <code>groupby</code> and <code>cycle</code>. With <code>cycle</code> you can choose a pattern how to group your elements, so it's versatile:</p>
<pre><code>from itertools import groupby, cycle

gen=(e for e in range(11))
d = [list(g) for d, g in groupby(gen, key=lambda v, c=cycle('000111'): next(c))]
print([v for v in d])
</code></pre>
<p>Outputs:</p>
<pre><code>[[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>we can do this by using grouper function given in itertools documentation page.</p>
<pre><code>from itertools import zip_longest

def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx
    args = [iter(iterable)] * n
    return zip_longest(fillvalue=fillvalue, *args)

def out_iterator(lst):
    for each in grouper(lst,n):
        if None in each:
            yield each[:each.index(None)]
        else:
            yield each
a=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n=3
print(list(out_iterator(a)))
</code></pre>
<p>Output:</p>
<pre><code>[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10)]
</code></pre>
</div>
<span class="comment-copy">probably I misunderstand, but what is wrong with <code>islice</code> like <code>for item in gen: print(tuple(islice(gen,3)))</code> (replace <code>print</code> with <code>yield</code> for a generator function of course)</span>
<span class="comment-copy">Possible duplicates <a href="https://stackoverflow.com/questions/434287/what-is-the-most-pythonic-way-to-iterate-over-a-list-in-chunks" title="what is the most pythonic way to iterate over a list in chunks">stackoverflow.com/questions/434287/…</a> , <a href="https://stackoverflow.com/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks" title="how do you split a list into evenly sized chunks">stackoverflow.com/questions/312443/…</a>,  <a href="https://stackoverflow.com/questions/8991506/iterate-an-iterator-by-chunks-of-n-in-python" title="iterate an iterator by chunks of n in python">stackoverflow.com/questions/8991506/…</a></span>
<span class="comment-copy">@Kasramvd: ah, yep -- my answer is just <a href="https://stackoverflow.com/a/22045226/487339">senderle's</a> with a default value to one-line it,.</span>
<span class="comment-copy">@Kasramvd: I don't think those are quite duplicates since 1) mostly have to do with lists already in memory or 2) not taking newer features of Python 3.6+ and 3) have some variant of the two idioms I listed. The linked question is 10 years old. Are we concluding there is no new Python 3 only way to do this?</span>
<span class="comment-copy">This is both clear and fast. (I benchmarked them all...) Thanks</span>
<span class="comment-copy">See timings ;-)</span>
<span class="comment-copy">You can also do <code>chunk = (*islice(it, 0, k),)</code> if you want list of tuples vs a list of lists. On Python &lt; 3.5, <code>tuple(islice(it, 0, k))</code></span>
