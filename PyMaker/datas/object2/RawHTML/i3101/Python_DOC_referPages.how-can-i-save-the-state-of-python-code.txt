<div class="post-text" itemprop="text">
<pre><code>def function:
    x=100

var1=type("Myclass",(),{"fucntion":function})

print(var1)
</code></pre>
<p>The <code>type()</code> function will generate a class of name <code>Myclass</code> and now I can call it from a object but now I want to save the state of the program.To simply put <code>Myclass</code> is generated when type() function runs and I want somehow when I again run the program <code>Myclass</code> should already be declared without running type() function.Its like a code that changes itself and saves itself and when again launched runs from the last saved state. </p>
</div>
<div class="post-text" itemprop="text">
<p>You need to look into pickling. To save a variable:</p>
<pre><code>import pickle
def function():
    x=100

var1=type("Myclass",(),{"fucntion":function})
outfile = open(filename,'wb')
pickle.dump(var1,outfile)
outfile.close()
print(var1)
</code></pre>
<p>To get the variable:</p>
<pre><code>infile = open(filename,'rb')
Myclass = pickle.load(infile)
infile.close()
</code></pre>
</div>
<span class="comment-copy">you should investigate <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer">pickle</a></span>
<span class="comment-copy">if you want to do something like that you should better be prepared for hell, have a nice debugging</span>
<span class="comment-copy">How does pickling save the calling context?  I don't think you can examine the call stack, and if you can't return that, you can't stop/restart an arbitrary computation.  You can insist the computation state be saved at place where the call stack content is known, but that makes it much harder to stop/restore because it isn't easy to force that known call stack.</span>
<span class="comment-copy">Pickling is saving Myclass to a file, and after the program is run once, it can be loaded from a file.</span>
<span class="comment-copy">You didn't answer the question.</span>
<span class="comment-copy">It has been accepted so I assume it does</span>
<span class="comment-copy">Sorry.  I meant, you didn't the question I posed in my comment.</span>
