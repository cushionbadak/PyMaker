<div class="post-text" itemprop="text">
<p>I am using <code>cProfile</code> try to profile my codes:</p>
<pre><code>pr = cProfile.Profile()
pr.enable()
my_func()   # the code I want to profile
pr.disable()
pr.print_stats()
</code></pre>
<p>However, the results are too long and cannot be fully displayed in the Spyder terminal (the function calls which take the longest time to run cannot be seen...). I also tried saving the results using <code>cProfile.run('my_func()','profile_results')</code>, but the output file is not in human readable format (tried with and without <code>.txt</code> suffix).</p>
<p>So my question is how can I save the profiling results to an external file which is human readable (like in a .txt format with all the words properly displayed)?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Updated.</strong> You can get output of profiler using <a href="https://docs.python.org/3/library/io.html#io.StringIO.getvalue" rel="nofollow noreferrer">io.StringIO()</a> and save it into file.
Here is an example:</p>
<pre><code>import cProfile
import pstats
import io


def my_func():
    result = []
    for i in range(10000):
        result.append(i)

    return result

pr = cProfile.Profile()
pr.enable()

my_result = my_func()

pr.disable()
s = io.StringIO()
ps = pstats.Stats(pr, stream=s).sort_stats('tottime')
ps.print_stats()

with open('test.txt', 'w+') as f:
    f.write(s.getvalue())
</code></pre>
<p>Run our script and open <code>test.txt</code>. You will see readable result:</p>
<pre><code>   10002 function calls in 0.003 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.002    0.002    0.003    0.003 /path_to_script.py:26(my_func)
    10000    0.001    0.000    0.001    0.000 {method 'append' of 'list' objects}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
</code></pre>
<p>Also I can recommend to use <a href="https://docs.python.org/3/library/profile.html#profile.Profile.dump_stats" rel="nofollow noreferrer">dump_stats</a> + <a href="https://docs.python.org/3/library/profile.html#pstats.Stats" rel="nofollow noreferrer">pstats.Stats</a>. Here is an example how to use it. Structure of files:</p>
<pre><code># test_ex.py - just a small web app
import cProfile
import json
from functools import wraps
from flask import Flask

from example.mod1 import func1
from example.mod2 import func2

app = Flask(__name__)

# profiling decorator
def profiling():

    def _profiling(f):
        @wraps(f)
        def __profiling(*rgs, **kwargs):
            pr = cProfile.Profile()
            pr.enable()

            result = f(*rgs, **kwargs)

            pr.disable()
            # save stats into file
            pr.dump_stats('profile_dump')

            return result
        return __profiling
    return _profiling

# demonstration route with profiler
@app.route('/test')
@profiling()
def test():
    counter = func1()
    dict_data = func2()
    result = dict()

    for key, val in dict_data.items():
        result[key] = val + counter

    return json.dumps(result)


if __name__ == '__main__':
    app.run(debug=True, port=8083)
</code></pre>
<p><strong>example</strong> package - let's imagine that this is some kind of application logic. </p>
<pre><code># example.mod1
def func1():
    counter = 0

    for i in range(100000):
        counter += i

    return counter

# example.mod2
def func2():
    res = dict()

    for i in range(300000):
        res['key_' + str(i)] = i

    return res
</code></pre>
<p>Now let's run server(<code>python3 test_ex.py</code>) and open <code>http://localhost:8083/test</code>. After a few seconds you will see long json. After that you will see <strong>profile_dump</strong> file in project folder. Now run python live interpreter in project folder and print our dump using <strong>pstats</strong>:</p>
<pre><code>import pstats
p = pstats.Stats('profile_dump')
# skip strip_dirs() if you want to see full path's
p.strip_dirs().print_stats()
</code></pre>
<p><a href="https://i.stack.imgur.com/vIKV9.png" rel="nofollow noreferrer"><img alt="stats" src="https://i.stack.imgur.com/vIKV9.png"/></a></p>
<p>Also you can easy sorting results:</p>
<pre><code>p.strip_dirs().sort_stats('tottime').print_stats()
p.strip_dirs().sort_stats('cumulative').print_stats()
p.strip_dirs().sort_stats().print_stats('mod1')
</code></pre>
<p>Hope this helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>Expanding upon the previous answer, you can dump everything out to a .csv file to sort and play around with in your favorite spreadsheet application.</p>
<pre><code>import pstats,StringIO

# print stats to a string
result=StringIO.StringIO()
pstats.Stats(filename,stream=result).print_stats()
result=result.getvalue()

# chop the string into a csv-like buffer
result='ncalls'+result.split('ncalls')[-1]
result='\n'.join([','.join(line.rstrip().split(None,6)) for line in result.split('\n')])

# save it to disk
f=open(filename.rsplit('.')[0]+'.csv','w')
f.write(result)
f.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't really need StringIO, as a file qualifies as a stream.</p>
<pre><code>import pstats

with open("profilingStatsAsText.txt", "w") as f:
    ps = pstats.Stats("profilingResults.cprof", stream=f)
    ps.sort_stats('cumulative')
    ps.print_stats()
</code></pre>
</div>
<span class="comment-copy">Basically cProfile output is a binary file. Why you can't use <code>dump_stats</code> + <code>pstats.Stats</code>?</span>
<span class="comment-copy">@DanilaGanchar Do you mean just printing the results to the terminal? I have tried that, but the log is too long and usually the most important parts (e.g. function calls that take the longest time if I sort them using 'cumtime') are at the top and not shown. Also, I want to save the results so that it's easier for me to compare different versions of the code.</span>
<span class="comment-copy">ohh nice didn't know the stringio obj .getvalue() could just copy to .txt like that . Thnx</span>
<span class="comment-copy">@thomas.mac glad to help ;)</span>
