<div class="post-text" itemprop="text">
<p>Im trying to find out how <a href="https://docs.python.org/2/library/multiprocessing.html#" rel="nofollow noreferrer">multiprocessing</a> works in Python.
The following example is what I made:</p>
<pre><code>import requests
from multiprocessing import Process
import time

def f(name):
    print 'hello', name
    time.sleep(15)
    print 'ended', name


if __name__ == '__main__':
    urls = [
        'http://python-requests.org',
        'http://httpbin.org',
        'http://python-guide.org'
    ]

    for url in urls:
        p = Process(target=f, args=(url,))
        p.start()
        p.join()
    print("finished")
</code></pre>
<p>What I tried to simulate in f is a request to a URL that has a timeout of 15 seconds. What I expected to happen is that all the request would start at almost the same time and finish at the same time. But what actually happens is they all start one after each other and wait till the previous one is finished. So the result is:</p>
<blockquote>
<p>hello <a href="http://python-requests.org" rel="nofollow noreferrer">http://python-requests.org</a> </p>
<p>ended <a href="http://python-requests.org" rel="nofollow noreferrer">http://python-requests.org</a></p>
<p>hello <a href="http://httpbin.org" rel="nofollow noreferrer">http://httpbin.org</a> </p>
<p>ended <a href="http://httpbin.org" rel="nofollow noreferrer">http://httpbin.org</a> </p>
<p>hello <a href="http://python-guide.org" rel="nofollow noreferrer">http://python-guide.org</a> </p>
<p>ended <a href="http://python-guide.org" rel="nofollow noreferrer">http://python-guide.org</a></p>
</blockquote>
<p>So what actually happens? why would one use the code above instead of just doing:</p>
<pre><code>    for url in urls:
        f(url)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>the problem is your loop:</p>
<pre><code>for url in urls:
    p = Process(target=f, args=(url,))
    p.start()
    p.join()
</code></pre>
<p>you're starting the process then you wait for it to complete, then you start the next one ...</p>
<p>Instead, create your process list, start them, and wait for them:</p>
<pre><code>pl = [Process(target=f, args=(url,)) for url in urls]
for p in pl:
   p.start()
for p in pl:
   p.join()
</code></pre>
<p>note that in that case, using <code>Process</code> is probably overkill, since threads would do the job very well (no massive python computing involved, only system calls &amp; networking)</p>
<p>To switch to threads, just use <a href="https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.dummy" rel="nofollow noreferrer"><code>multiprocessing.dummy</code></a> instead so your program structure remains the same.</p>
<pre><code>import multiprocessing.dummy as multiprocessing
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You only spawn one process. Thus, the process (a unique worker) takes the first input, runs f, timeouts during 15 sec, quit f; and then takes the second input. c.f. <a href="https://docs.python.org/2/library/multiprocessing.html" rel="nofollow noreferrer">doc</a></p>
<p>You could try to map your function f with the inputs. In the example below, you spawn 2 processes (2 workers).</p>
<pre><code>import multiprocessing as mp

if __name__ == '__main__':
    with mp.Pool(processes = 2) as p:
        p.map(f, urls)
</code></pre>
</div>
<span class="comment-copy">you'd be better off with threads in that case.</span>
<span class="comment-copy">Thanks this helped, I tried It with threads but when I keep the f method as it is in my example my output is merged and I get sentences like: "(('ended'(, ''eended'nded''<a href="http://httpbin.org" rel="nofollow noreferrer">httpbin.org</a>', , )'<a href="http://python-requests.org''" rel="nofollow noreferrer">python-requests.org''</a>)"</span>
<span class="comment-copy">just store your inputs in a list and print the list afterwards (CPython guarantees non-concurrent execution). Or use a Threading.Lock() object when printing to the console so the lines aren't mixed.</span>
