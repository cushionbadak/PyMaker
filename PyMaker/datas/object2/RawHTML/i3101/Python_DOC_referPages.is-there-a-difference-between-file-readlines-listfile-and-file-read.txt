<div class="post-text" itemprop="text">
<p>What is the difference between :</p>
<pre><code>with open("file.txt", "r") as f:
    data = list(f)
</code></pre>
<p>Or :</p>
<pre><code>with open("file.txt", "r") as f:
    data = f.read().splitlines(True)
</code></pre>
<p>Or : </p>
<pre><code>with open("file.txt", "r") as f:
    data = f.readlines()
</code></pre>
<p>They seem to produce the exact same output.
Is one better (or more pythonic) than the other ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Explicit is better than implicit, so I prefer:</p>
<pre><code>with open("file.txt", "r") as f:
    data = f.readlines()
</code></pre>
<p>But, when it is possible, the most pythonic is to use the file iterator directly, without loading all the content to memory, e.g.:</p>
<pre><code>with open("file.txt", "r") as f:
    for line in f:
       my_function(line)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>TL;DR;</strong></p>
<p>Considering you need a list to manipulate them afterwards, your three proposed solutions are all syntactically valid. There is no <em>better (or more pythonic)</em> solution, especially since they all are recommended by the official Python <a href="https://docs.python.org/3.7/tutorial/inputoutput.html#methods-of-file-objects" rel="nofollow noreferrer">documentation</a>. So, choose the one you find the <strong>most readable</strong> and <strong>be consistent</strong> with it throughout your code. If performance is a deciding factor, see my <code>timeit</code> analysis below.</p>
<hr/>
<p>Here is the <code>timeit</code> (10000 loops, ~20 line in <code>test.txt</code>),</p>
<pre><code>import timeit

def foo():
    with open("test.txt", "r") as f:
        data = list(f)

def foo1():
    with open("test.txt", "r") as f:
        data = f.read().splitlines(True)

def foo2():
    with open("test.txt", "r") as f:
        data = f.readlines()

print(timeit.timeit(stmt=foo, number=10000))
print(timeit.timeit(stmt=foo1, number=10000))
print(timeit.timeit(stmt=foo2, number=10000))

&gt;&gt;&gt;&gt; 1.6370758459997887
&gt;&gt;&gt;&gt; 1.410844805999659
&gt;&gt;&gt;&gt; 1.8176437409965729
</code></pre>
<p>I tried it with multiple number of loops and lines, and <code>f.read().splitlines(True)</code> always seems to be performing a bit better than the two others. </p>
<p>Now, syntactically speaking, all of your examples seems to be valid. Refer to this <a href="https://docs.python.org/3.7/tutorial/inputoutput.html#methods-of-file-objects" rel="nofollow noreferrer">documentation</a> for more informations. </p>
<p>According to it, if your goal is to read lines form a file,</p>
<pre><code>for line in f:
    ...
</code></pre>
<p>where they states that it is <em>memory efficient, fast, and leads to simple code</em>. Which would be another good alternative in your case <strong>if you don't need to manipulate them in a list.</strong></p>
<p><strong>EDIT</strong></p>
<p>Note that you don't need to pass your <code>True</code> boolean to <code>splitlines</code>. It has your wanted behavior by default.</p>
<p><strong>My personal recommendation</strong></p>
<p>I don't want to make this answer too opinion-based, but I think it would be beneficial for you to know, that I don't think performance should be your deciding factor until it is actually a problem for you. Especially since all syntax are allowed and recommended in the official Python doc I linked. </p>
<p>So, my advice is,:</p>
<p>First, pick the <strong>most logical one</strong> for your particular case and then choose the one you find the <strong>most readable</strong> and <strong>be consistent</strong> with it throughout your code.</p>
</div>
<div class="post-text" itemprop="text">
<p>In the 3 cases, you're using a <code>context manager</code> to read a file. This file is a <code>file object</code>.</p>
<p><strong>File Object</strong></p>
<blockquote>
<p>An object exposing a file-oriented API (with methods such as read() or
  write()). Depending on the way it was created, a file object can mediate access to a real on-disk file or to another type of storage or communication device (for example standard input/output, in-memory buffers, sockets, pipes, etc.). File objects are also called file-like objects or streams.
  The canonical way to create a file object is by using the open() function.
  <a href="https://docs.python.org/3/glossary.html#term-file-object" rel="nofollow noreferrer">https://docs.python.org/3/glossary.html#term-file-object</a></p>
</blockquote>
<p><strong>list</strong></p>
<pre><code>with open("file.txt", "r") as f:
    data = list(f)
</code></pre>
<p>This works because your file object is a stream like object. converting to list works roughly like this : </p>
<p><code>[element for element in generator until I hit stopIteration]</code></p>
<p><strong>readlines method</strong></p>
<pre><code>with open("file.txt", "r") as f:
    data = f.readlines()
</code></pre>
<blockquote>
<p>The method readlines() reads until EOF using readline() and returns a
  list containing the lines.</p>
</blockquote>
<p>Difference with list :</p>
<ol>
<li><p>You can specify the number of elements you want to read : <code>fileObject.readlines( sizehint )</code></p></li>
<li><p>If the optional sizehint argument is present, instead of reading up to EOF, whole lines totalling approximately sizehint bytes (possibly after rounding up to an internal buffer size) are read.</p></li>
</ol>
<p><strong>read</strong></p>
<p><a href="https://stackoverflow.com/questions/38105507/when-should-i-ever-use-file-read-or-file-readlines">When should I ever use file.read() or file.readlines()?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>They're all achieving the same goal of returning a list of strings but using separate approaches. <code>f.readlines()</code> is the most Pythonic.</p>
<pre><code>with open("file.txt", "r") as f:
    data = list(f)
</code></pre>
<p><code>f</code> here is a file-like object, which is being iterated over through <code>list</code>, which returns lines in the file.</p>
<hr/>
<pre><code>with open("file.txt", "r") as f:
    data = f.read().splitlines(True)
</code></pre>
<p><code>f.read()</code> returns a string, which you split on newlines, returning a list of strings.</p>
<hr/>
<pre><code>with open("file.txt", "r") as f:
    data = f.readlines()
</code></pre>
<p><code>f.readlines()</code> does the same as above, it reads the entire file and splits on newlines.</p>
</div>
<span class="comment-copy">Ofc, I tried first. They produce the exact same output. That's why I ask if there is any difference... (added a small edit for clarity).</span>
<span class="comment-copy">The biggest question is why you need that list. If you're eventually going to iterate over it once the most pythonic thing to do is never build it and iterate over the lines of the file instead.</span>
<span class="comment-copy">I don't think I can use the iterator in this case. I need to read the first line from the file, use it and do some stuff with it. Than delete the first line from the file so that the second line become the first and so on. I was thinking using one of those than using data = data[1:] and writing back inside the file.</span>
<span class="comment-copy">@Bermuda: <code>firstline = next(f)</code>. Then do stuff with it. Then <code>with open("file.txt.temp", "r") as f2: f2.write(f.read())</code>. Then move <code>file.txt.temp</code> over <code>file.txt</code>.</span>
<span class="comment-copy">This works and this is exactly what I needed ! Which is very nice... but I don't understand how it works. According to the doc, next() retrieve the next item from the iterator. No problem. But how come when f2.write(f.read()) later, the first line has disappeared ? Does f.read() shares the same iterator with next() and therefore starts reading from that point ?</span>
<span class="comment-copy">@StevenRumbalski This is a really good way to accomplish what he wanted. I just think it deviates completely the purpose of his question. He should probably ask another question so you can post your proposed method. Personally, I wouldn't have known how to handle this. But I don't see how future users will find this answer considering how he formulated his question and the fact that it is a comment.</span>
<span class="comment-copy">@StevenRumbalski Here is an open thread for your answer <a href="https://stackoverflow.com/q/51481747/7692463">stackoverflow.com/q/51481747/7692463</a>. Don't hesitate giving me feedback if you think I can improve wording of the question.</span>
<span class="comment-copy">Thank you if the only differences are stylistic, yes better perf are always nice :)</span>
<span class="comment-copy">@Bermuda Indeed, but note that you should also try to use <code>timeit</code> on your specific computer to see what's seems to be the most efficient. Just out of curiosity,  try my code and get back to me on whats seems to be the best on your computer.</span>
<span class="comment-copy">Relevant to your analysis, how many lines did <code>test.txt</code> contain? How big was the file?</span>
<span class="comment-copy">@MichaelMior I edited the question by specifying the number of lines but as stated in the answer, I also tried multiple files size and number of loops. At least from what I was able to test,  <code>f.read().splitlines(True)</code> was performing better. You can maybe confirm you have similar behavior.</span>
<span class="comment-copy">@scharette Thanks for sharing. I would be hesitant to draw any conclusions from a test with only 20 lines in a file, but I agree it's probably true that there's not a huge difference.</span>
