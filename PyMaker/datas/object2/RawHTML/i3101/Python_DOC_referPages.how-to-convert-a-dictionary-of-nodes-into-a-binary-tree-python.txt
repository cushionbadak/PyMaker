<div class="post-text" itemprop="text">
<p>I have a dictionary of objects which consists of key [Node Value] and a list of its right and left nodes.
Sample Dict: </p>
<pre><code>{1: [2, 3], 2: [4, 0], 3: [None, 5], 4: [6, None], 5: [None, 7], 6: [8, None], 7: [None, 9], 8: [None, None], 9: [None, None]}
</code></pre>
<p>my sample node class:</p>
<pre><code>class Node:
    def __init__(self,key):
        self.left = None
        self.right = None
        self.val = key
</code></pre>
<p>How do I convert a dictionary into a binary tree?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use recursion:</p>
<pre><code>class Tree:
  def __init__(self, _val = None):
    self.val = _val
    self.right, self.left = None, None
  def __iter__(self):
    yield self.val
    yield from [[], self.left][bool(self.left)]
    yield from [[], self.right][bool(self.right)]
  def _insert_vals(self, _start, _d):
    self.val = _start
    for a, b in zip(['left', 'right'], _d.get(_start, [])):
      if b is not None:
        setattr(self, a, Tree())
        getattr(self, a)._insert_vals(b, _d)

d = {1: [2, 3], 2: [4, 0], 3: [None, 5], 4: [6, None], 5: [None, 7], 6: [8, None], 7: [None, 9], 8: [None, None], 9: [None, None]}
t = Tree()
t._insert_vals(1, d)
print([i for i in t])
</code></pre>
<p>Output:</p>
<pre><code>[1, 2, 4, 6, 8, 0, 3, 5, 7, 9]
</code></pre>
<p>Edit: even shorter:</p>
<pre><code>class Tree:
  def __init__(self, _val, _r, _d):
    self.v, self.right, self.left = _val, None, None
    if _r:
       l, r = _r
       self.left, self.right = Tree(l, _d.get(l, []), _d), Tree(r, _d.get(r, []), _d)
t = Tree(1, d[1], d)
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/tutorial/datastructures.html#looping-techniques" rel="nofollow noreferrer">Iterate over the dictionary items</a> and create Node instances using the key and values of each item.</span>
