<div class="post-text" itemprop="text">
<p>I have a list which contains numbers and I want to create a new list which contains separate lists of all numbers with the same 4 first digits.</p>
<p>Example: make l2 from l1</p>
<pre><code>l1 = [100023,100069,222236,22258,41415258,41413265,1214568...]

l2 = [[100023,100069],[222236,22258],[41415258,41413265],[1214568]...]
</code></pre>
<p>how can I create l2 from l1?</p>
<p>I tried iterating over the elements of l1 but w/o success!!</p>
<pre><code>def main():

    l1=[100023,100069,222236,22258,41415258,41413265,1214568]
    l2=[[100023,100069],[222236,22258],[41415258,41413265],[1214568]]
    x=0
    n=1
    for i in l2:
        if i[0:4] == l2[n][0:4]:
            l2[x].append(i)
        else:
            l2[x+1].append(i)
    print(l2)

if __name__ == '__main__':
    main()
</code></pre>
<p>Still not know how to proceed..</p>
</div>
<div class="post-text" itemprop="text">
<p>You could create a dict as intermediate result and then convert this dict back to a list.
You also need to convert your integers to strings first.</p>
<pre><code>l1 = [100023,100069,222236,22258,41415258,41413265,1214568]
l2 = []
l2dict = {}
for i in l1:
    prefix = str(i)[0:4]
    if prefix in l2dict.keys():
        l2dict[prefix].append(i)
    else:
        l2dict[prefix] = [i]
for item in l2dict.values():
    l2.append(item)
print(l2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> after converting the list elements to strings and using the first for digits as keys:</p>
<pre><code>import itertools
l2 = [list(value) for key, value
      in itertools.groupby(l1, lambda x: str(x)[:4])]
print(l2)
</code></pre>
<p>EDIT: <a href="https://stackoverflow.com/a/51444325/8316315">Frieder's solution</a> is pretty much how this is implemented behind the scenes.</p>
</div>
<span class="comment-copy">This code iterates over l2.</span>
<span class="comment-copy">Disclaimer: This is a naive solution and is in no way optimized for large datasets.</span>
<span class="comment-copy">Very nice solution, although harder to understand for a beginner. I would rather upvote this, than my solution.</span>
