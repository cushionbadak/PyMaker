<div class="post-text" itemprop="text">
<p>I have made two functions doing the same thing but differently. I want to compare the time each function takes to run so I have added a decorator @calcul_time. The script does work but i get the following error message:</p>
<pre><code>{1: 1, 2: 3, 3: 2, 4: 4, 5: 4, 6: 3, 7: 3, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 2, 17: 2, 18: 2, 19: 2, 20: 2, 21: 2, 22: 2, 23: 0, 24: 0}
0.0021219253540039062
{1: 1, 2: 3, 3: 2, 4: 4, 5: 4, 6: 3, 7: 3, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 2, 17: 2, 18: 2, 19: 2, 20: 2, 21: 2, 22: 2, 23: 0, 24: 0}
8.702278137207031e-05
Traceback (most recent call last):
  File "./03_PeakHours.py", line 51, in &lt;module&gt;
    horaires1()
TypeError: 'NoneType' object is not callable
</code></pre>
<p>I don't understand why I have this NoneType error message. If I comment my decorator, I don't have any errors. Hereunder my script. Does anyone know why I get this 'NoneType' error?</p>
<pre><code>#!/usr/local/bin/python3.5

import time

input='''5
1 8
2 3
4 23
4 6
2 23'''


def calcul_time(fonction):
    avant = time.time()
    fonction()
    apres = time.time()
    print(apres - avant)    


#@calcul_time
def horaires1():
    hours = {}
    for time in range(1,25):
        hours[time] = 0

    def inBetween(line):
        current = int(line.split(" ")[0])
        while current &lt; int(line.split(" ")[1]):
            hours[current] +=1
            current += 1
    list(map(inBetween, input.split("\n")[1:]))
    print(hours)
    return 0


#@calcul_time
def horaires2():
    lines = input.split("\n")
    hours={}
    for time in range(1,25):
        hours[time] = 0

    for i in range(1, int(lines[0])+1):
        start, stop = lines[i].split(" ")
        for heure in range(int(start), int(stop)):
            hours[heure] += 1
    print(hours)
    return 0


horaires1()
horaires2()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You haven't really built a decorator. A decorator has to return a <em>the original function or a suitable replacement</em>.</p>
<p>Your decorator returns nothing:</p>
<pre><code>def calcul_time(fonction):
    avant = time.time()
    fonction()
    apres = time.time()
    print(apres - avant)    
</code></pre>
<p>A decorator typically returns a <em>wrapper function</em>. You created the wrapper function, but not the decorator that returns it.</p>
<p>This would be a proper decorator:</p>
<pre><code>def calcul_time(fonction):
    def wrapper():
        avant = time.time()
        fonction()
        apres = time.time()
        print(apres - avant)    
    return wrapper
</code></pre>
<p>I renamed your <code>calcul_time</code> wrapper to <code>wrapper</code>, removed the <code>fonction</code> argument (that would be passed to the decorator, you can rely on it as a closure), and returned the <code>wrapper</code>. Now the decorator returns a replacement.</p>
<p>You probably want to make it a little more generic, and pass through arbitrary arguments with <code>*args</code> and <code>**kwargs</code>, and handle both the return value (pass it through to the caller of <code>wrapper()</code>) and exceptions correctly.</p>
<p>You also want to use the <a href="https://docs.python.org/3/library/functools.html#functools.wraps" rel="nofollow noreferrer"><code>@functools.wraps()</code> decorator</a> to copy things like the name and attributes from the wrapped function to the wrapper:</p>
<pre><code>from functools import wraps

def calcul_time(fonction):
    @wraps(fonction)
    def wrapper(*args, **kwargs):
        avant = time.time()
        try:
            return fonction(*args, **kwargs)
        finally:
            apres = time.time()
            print(apres - avant)
    return wrapper
</code></pre>
<p>The <code>try..finally</code> ensures that <code>print()</code> is executed regardless of what happens in <code>fonction</code>.</p>
</div>
<span class="comment-copy">Euh that's not how a decorator works...</span>
<span class="comment-copy"><code>calcul_time</code> never never returns anything, thus the <code>NoneType</code> error since a method without a return always returns <code>None</code>.  A decorator should return a callable</span>
