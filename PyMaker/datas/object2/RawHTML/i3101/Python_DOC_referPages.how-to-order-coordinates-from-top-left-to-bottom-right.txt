<div class="post-text" itemprop="text">
<p>I have a list of class objects my_rectangle:</p>
<pre><code>class my_rectangle:
    def __init__(self,text,x_start,y_start,x_end,y_end):
        self.text=text
        self.x_start=x_start
        self.y_start=y_start
        self.x_end=x_end
        self.y_end=y_end
        self.x_centroid=(self.x_start+self.x_end)/2
        self.y_centroid=(self.y_start+self.y_end)/2
</code></pre>
<p>Using the class attributes (<code>x_centroid</code> and <code>y_centroid</code>) which give the coordinates of the centroid, I wanted to order this list, using as an order left-to-right then top-to-bottom (normal English reading order)?</p>
<p>Say I have:</p>
<pre><code>A=my_rectangle('Hi,',1,3,2,4)
B=my_rectangle('Im',3,3,3,4)
C=my_rectangle('New',1,1,2,2)
my_list=[C,B,A]
</code></pre>
<p>And I want to order it to get:</p>
<pre><code>my_sorted_list=[A,B,C]
</code></pre>
<p>Which is a representation of the text:</p>
<pre class="lang-none prettyprint-override"><code>""" Hi, I'm
    New 
"""
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Generating a sorted list is the specialty of the builtin function <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer"><code>sorted()</code></a>.</p>
<p>Sorting using multiple values can be accomplished by providing a <code>key</code> function, which key function returns the values as a tuple. The resulting list is then sorted according to the lexicographical ordering of the tuple.</p>
<pre><code>#UNTESTED
my_sorted_list = sorted(my_list, key=lambda item: (item.x_centroid, item.y_centroid))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can make custom classes sortable by defining a <code>__lt__</code> method. This takes care of the <code>&lt;</code> operator which is used in default sorting.</p>
<pre><code>class Rectangle:
    def __init__(self,text,x_start,y_start,x_end,y_end):
        self.text=text
        self.x_start=x_start
        self.y_start=y_start
        self.x_end=x_end
        self.y_end=y_end

    @property
    def centroid(self):
        return (self.x_start+self.x_end)/2, (self.y_start+self.y_end)/2

    def __lt__(self, other):
        """Using "reading order" in a coordinate system where 0,0 is bottom left"""
        try:
            x0, y0 = self.centroid
            x1, y1 = other.centroid
            return (-y0, x0) &lt; (-y1, x1)
        except AttributeError:
            return NotImplemented

    def __repr__(self):
        return 'Rectangle: ' + self.text
</code></pre>
<p>I'm defining <code>centroid</code> as a property, so that it will update if you change any of the other coordinates after initializing a Rectangle. </p>
<p>You will get this output if you use the data from your question. </p>
<pre><code>&gt;&gt;&gt; rectangles = [
...     Rectangle('A',1,3,2,4),
...     Rectangle('B',3,3,3,4),
...     Rectangle('C',1,1,2,2), 
... ]
&gt;&gt;&gt; print(sorted(rectangles))
[Rectangle: A, Rectangle: B, Rectangle: C]
</code></pre>
</div>
<span class="comment-copy">Hi. But would this order from top left to bottom right?</span>
<span class="comment-copy">Thanks for your answer. Actually im looking for top left to bottom right order, as if reading. Your solution provides a bottom left to top right.</span>
<span class="comment-copy">That depends on the coordinate system. In computer graphics, the 0,0 point is conventionally in the top left corner. So if you want a different coordinate system, it's trivial to change the <code>__lt__</code> method. You didn't mention which coordinate system you are using.</span>
<span class="comment-copy">I've updated my answer, so that you will get reading order in a coordinate system where 0,0 is bottom left</span>
<span class="comment-copy">Worked great. One last question. Say there was an small difference (epsilon) in the y coordinates so that the algorithm calculates they are on a different line, whereas this difference is imperceptible enough for us to think the points lie on the same line. Given Rectangle('D',3,1.01,4,2.01) , the version currently outputs [A,B,D,C] whereas it should be [A,B,C,D] since rectangle D lies to the right of C, and same y coordinate (except possibly the small difference 0.01)</span>
<span class="comment-copy">Use <a href="https://docs.python.org/3/library/functions.html#round" rel="nofollow noreferrer">round()</a> on the centroid coordinates.</span>
