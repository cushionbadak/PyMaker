<div class="post-text" itemprop="text">
<p>I'm using python mocks to assert that a particular object was created with the right arguments. This is how my code looks:</p>
<pre><code>class Installer:
    def __init__(foo, bar, version):
        # Init stuff
        pass
    def __enter__(self):
        return self

    def __exit__(self, type, value, tb):
        # cleanup
        pass

    def install(self):
        # Install stuff
        pass

class Deployer:
    def deploy(self):
        with Installer('foo', 'bar', 1) as installer:
            installer.install()
</code></pre>
<p>Now, I want to assert that <code>installer</code> was created with the right arguments. This is the code I have so far:</p>
<pre><code>class DeployerTest(unittest.TestCase):
    @patch('Installer', autospec=True)
    def testInstaller(self, mock_installer):
        deployer = Deployer()
        deployer.deploy()

        # Can't do this :-(
        mock_installer.__init__.assert_called_once_with('foo', 'bar', 1)
</code></pre>
<p>This is the error I get:</p>
<pre><code>  File "test_deployment.py", line .., in testInstaller
    mock_installer.__init__.assert_called_once_with('foo', 'bar', 1)
AttributeError: 'function' object has no attribute 'assert_called_once_with'
</code></pre>
<hr/>
<p>Here is the fixed code (Call it <code>test.py</code>). Thanks, all!</p>
<pre><code>import unittest
from mock import patch

class Installer:
    def __init__(self, foo, bar, version):
        # Init stuff
        pass

    def __enter__(self):
        return self

    def __exit__(self, type, value, tb):
        # cleanup
        pass

    def install(self):
        # Install stuff
        pass

class Deployer:
    def deploy(self):
        with Installer('foo', 'bar', 1) as installer:
            installer.install()

class DeployerTest(unittest.TestCase):
    @patch('tests.test.Installer', autospec=True)
    def testInstaller(self, mock_installer):
        deployer = Deployer()
        deployer.deploy()

        # Can't do this :-(
        # mock_installer.__init__.assert_called_once_with('foo', 'bar', 1)

        # Try this instead
        mock_installer.assert_called_once_with('foo', 'bar', 1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So, the error message you are getting is actually because you are not checking your mock properly. What you have to understand here is that in your decorator you are ultimately saying that, the call to <code>Installer</code> will relturn a <code>Mock</code> object instead.</p>
<p>Therefore, for any call to <code>Installer()</code> with respect to where you are patching, the return value of that will call <code>Mock()</code> instead. </p>
<p>So, the assertion you actually want to check is simply at the <code>mock_installer</code>, and not the <code>mock_installer.__init__.</code>:</p>
<pre><code>mock_installer.assert_called_once_with('foo', 'bar', 1)
</code></pre>
<p>Here is the modification made to your code:</p>
<pre><code>class DeployerTest(unittest.TestCase):

    @patch('Installer', autospec=True)
    def testInstaller(self, mock_installer):
        deployer = Deployer()
        deployer.deploy()

        mock_installer.assert_called_once_with('foo', 'bar', 1)
</code></pre>
<p>A little extra information to provide some more explanation, if you were testing now if install was called within your context manager, you have to realize here that you actually have to check inside your <code>__enter__</code>, so a structure would be like this: </p>
<p>For clarity sake create a mock_obj in your test method and: </p>
<pre><code>mock_obj = mock_installer.return_value
</code></pre>
<p>Now, within your context manager, you will <em>need</em> to look inside the call to <code>__enter__()</code>. In case you don't know why this is, read up on context managers.</p>
<p>So, with that in mind, you simply perform your check as: </p>
<pre><code>mock_obj.__enter__().install.assert_called_once_with()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that <code>Installer(...)</code> doesn't call <code>Installer.__init__</code> directly; rather, because <code>Installer</code> is an instance of <code>type</code>, and <code>type.__call__</code> is defined, you get <code>Installer()</code> being equivalent to </p>
<pre><code>type.__call__(Installer, ...)
</code></pre>
<p>which results in a call to <code>Installer.__new__(Installer, ...)</code>, whose return value <code>x</code> is passed to <code>Installer.__init__</code> along with the original arguments.</p>
<p>All of which is to say that since the mock object you bind to <code>Installer</code> isn't an instance of <code>type</code>, none of the preceding applies. <code>Installer(...)</code> is simply a call to a mock object, so you check that that directly:</p>
<pre><code>mock_installer.assert_called_once_with('foo', 'bar', 1)
</code></pre>
</div>
<span class="comment-copy">How is <code>Installer</code> supposed to work as a context manager?</span>
<span class="comment-copy">Sorry, in my hurry to make a concise example, I left out the context-manager bits of <code>Installer</code>. Will fill in now</span>
<span class="comment-copy">It's not quite the same, but have you had a look at e.g. <a href="http://stackoverflow.com/a/6112456/3001761">stackoverflow.com/a/6112456/3001761</a>? Note that, as far as mocking is concerned, initialisation is just a call to <code>mock_installer</code> itself.</span>
<span class="comment-copy">Have you tried just <code>mock_installer.assert_called_once_with('foo', 'bar', 1)</code> as in the docs? <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_called_once_with" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
<span class="comment-copy">Thanks for the answer. And also for the helpful hint about how to assert that <code>install()</code> was called.</span>
<span class="comment-copy">@Srikanth very welcome!</span>
<span class="comment-copy">Actually, the <code>install</code> check doesn't work. Both <code>mock_installer.__enter__.install.assert_called_once_with()</code> as well as <code>mock_installer.install.assert_called_once_with()</code> result in <code>AssertionError: Expected 'install' to be called once. Called 0 times.</code>.</span>
<span class="comment-copy">@Srikanth Yes. You made a question about it and I answered it. It has to do with how you are running your tests. Also pay attention to <code>__enter__</code>. You wrote <code>__enter__</code> when it should be <code>__enter__()</code></span>
<span class="comment-copy">@Srikanth FWIW I tested this code before posting to make sure it ran successfully.</span>
<span class="comment-copy">Very nice explanation chepner!</span>
