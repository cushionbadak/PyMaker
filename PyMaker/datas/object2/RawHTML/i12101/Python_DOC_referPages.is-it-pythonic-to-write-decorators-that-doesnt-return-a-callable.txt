<div class="post-text" itemprop="text">
<p>I observed that python decorator need not return a callable.  Tried below example in a django queryset.  Is it some how a bad practice?</p>
<pre><code>class MyQuerySet(models.QuerySet):

    ...

    def each(self, save=False, func=None):
        if hasattr(save, '__call__'):
            func = save
            save = False
        for obj in self:
            func(obj)
            if save:
                obj.save()

MyModel.objects.each(lambda x: x.delete())  # Delete all the mymodels from database

@Person.objects.each(save=True):
def make_older(person):
    ''' Increase age of all people '''
    person.age += 1
</code></pre>
<p>PS:</p>
<p>Are there any situations where this technique can be used for more useful purpose?</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/glossary.html" rel="nofollow">Python Glossary</a>:</p>
<blockquote>
<p><strong>decorator</strong></p>
<p>A function returning another function, usually applied as a function transformation using the @wrapper syntax. Common examples for decorators are classmethod() and staticmethod().</p>
</blockquote>
<p><strong>Edit:</strong> A decorator that does not return a callable would not fall under this official defnition of the term 'decorator'. It would by unpythonic.</p>
</div>
<span class="comment-copy">Can you post some valid code: <a href="http://stackoverflow.com/help/mcve">How to create a Minimal, Complete, and Verifiable example</a> ?</span>
<span class="comment-copy">Decorators are only syntactic sugar, so the question is, why would you want to use decorator syntax for that?  Does it make the code simpler or easier to maintain?</span>
<span class="comment-copy">How does this answer the OP's question?</span>
<span class="comment-copy">Edited my answer.</span>
