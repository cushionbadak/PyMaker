<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/6146963/when-is-del-useful-in-python">When is del useful in python?</a>
<span class="question-originals-answer-count">
                    17 answers
                </span>
</li>
</ul>
</div>
<p>Learning Python at the moment. (coming from PHP)
In Python there's a delete(<code>del</code>) function to delete your variables.
This is new to me, </p>
<p><strong>What are the benefits of deleting a variable?</strong></p>
<p><strong>What are the drawbacks of not deleting a variable?</strong></p>
<p>In what situation would I most likely want to delete a variable?</p>
<p>EDIT:
<a href="https://stackoverflow.com/questions/6146963/when-is-del-useful-in-python">This question here</a> just compares the differences between <code>del var</code> and <code>var = none</code>.
I'm trying to understand why you would need to delete a variable in the first place. </p>
</div>
<div class="post-text" itemprop="text">
<p>Although your question seems to <em>point to same thought</em>. But I have tried to respond in a way you asked it. </p>
<p><strong>Benefits of deleting the variable</strong>
It frees the memory occupied by that variable in the memory. After deleting the variable, the RAM can be used for other heavy tasks (like reading a file, loading an image, etc.)</p>
<p><strong>Drawbacks of not deleting the variable</strong>
If you don't delete the variables (say 10) initialized each with an image/video file then you can guess yourself that you can run out of memory. Now guess what if the videos were 5K then you will most probably run out of memory. This's were <code>del</code> will come to rescue your program. </p>
<p><strong>Situation in which you might need to delete the variable</strong>
When you are sure that the <em>variable will never be required in future.</em> Or, again, when you might get into situations in which you <em>may run out of memory</em>. </p>
</div>
<span class="comment-copy">Do you know what it means to <code>del</code> something?</span>
<span class="comment-copy">You don't need to delete a name to assign something different.  Read the definition of <a href="https://docs.python.org/3/reference/simple_stmts.html#the-del-statement" rel="nofollow noreferrer">The del statement</a>, <a href="https://docs.python.org/3/tutorial/classes.html#a-word-about-names-and-objects" rel="nofollow noreferrer">Names and Objects</a>, <a href="https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces" rel="nofollow noreferrer">Scopes and Namespaces</a>, and <a href="https://docs.python.org/3/reference/executionmodel.html#naming-and-binding" rel="nofollow noreferrer">Naming and Binding</a> - I don't know PHP so I can't give you a contrast.  Those last three are pretty important to understand.</span>
<span class="comment-copy">@TrevorWood: Read the other answers. Several give reasons, though in practice, <code>del</code> of a plain name is rarely useful; unless you know no other references exist, it won't guarantee memory is even freed. Just because the question is more focused on <code>del x</code> vs. <code>x = None</code> doesn't mean the answers don't address your question.</span>
<span class="comment-copy"><a href="http://nedbatchelder.com/text/names.html" rel="nofollow noreferrer">Facts and myths about Python names and values</a>.  You <code>del</code> things to remove the reference to an object - garbage collection uses reference counting - there are a couple of good links in this <a href="http://stackoverflow.com/a/4484312/2823755">SO answer regarding garbage collection</a>.</span>
<span class="comment-copy">@TrevorWood: Yup. That's about it. Only real reason to do it is if you know you hold the only reference to something huge, and you need that huge thing released <i>now</i> (in CPython only; in other, non-reference counting interpreters, it's released "some time"). 99.9% of Python code has no reason to use <code>del</code> with plain names, the only serious use case is usually deleting entries in a <code>dict</code> (<code>del mydict['somekey']</code>) or removing elements from a sequence by index/slice (e.g. to delete even indices in <code>list</code> keeping odds only, <code>del mylist[::2]</code>).</span>
<span class="comment-copy">Thanks Rahul, So as a general rule of thumb, I should regularly delete variables?</span>
<span class="comment-copy">Not regularly. But only when required.</span>
<span class="comment-copy">@TrevorWood: Not at all. Variables are automatically cleaned up when a function exits. Unless you have some unusual reason they need to be cleaned up sooner, <i>never</i> use <code>del</code>, it's just wasting time on stuff Python does for you.</span>
<span class="comment-copy">@TrevorWood - its not quite that simple, names/references/bindings can <i>go away</i> when the name goes out of scope.</span>
<span class="comment-copy">Ah okay, I see, so if I should just leave it alone if I'm not using it anymore. (and if it's not a big variable) Thanks guys!</span>
