<div class="post-text" itemprop="text">
<p>I have a class which instances shall be presented as string if being used in the context of a string. To be precise, a attribute pointing to a string should be returned.</p>
<p>The class looks as the following and works so far:</p>
<pre><code>class Test:
    string = ""

    def __init__(self, value=""):
        self.string = value

    def __repr__(self):
        return str(self.string)

    def __str__(self):
        return self.__repr__()

    def __add__(self, other):
        return "%s%s" % (self.string, other)

    def __radd__(self, other):
        return "%s%s" % (other, self.string)
</code></pre>
<p>Unfortunately, I get a TypeError when I try doing something like this:</p>
<pre><code>&gt;&gt;&gt; "-".join([Test("test"), Test("test2")])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: sequence item 0: expected string, instance found
</code></pre>
<p>Doing the same with a string, I get the expected result:</p>
<pre><code>&gt;&gt;&gt; "-".join(["test", "test"])
'test-test'
&gt;&gt;&gt; 
</code></pre>
<p>I'm pretty sure I'm just missing the correct operator overload function.
Could somebody how to achieve this with class instances in the list?</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>join</code> requires elements to be strings, as documented here:
<a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow">https://docs.python.org/3/library/stdtypes.html#str.join</a></p>
<p>You need to explicitly convert your objects to strings, e.g.:</p>
<pre><code>"-".join(map(str, [Test("test"), Test("test2")]))
</code></pre>
</div>
<span class="comment-copy">Is your expected output "test-test2"?</span>
<span class="comment-copy">Python's <code>str.join()</code> does not implicitly convert elements of the joined sequence to strings. Use <code>map(str, seq)</code> to convert the elements to strings, then join that.</span>
<span class="comment-copy">Another question to the OP: Why do you define <code>string</code> as a class member of <code>Test</code>? You never use it in your code. Wouldn't the definition for the instance (which is done in <code>__init__</code>) be enough?</span>
<span class="comment-copy">Of course the above code is simplified just to demonstrate my problem. The above definition of string is of course redundant. The goal is in this simplified test scenario really to end up in "test-test2". I'm checking out your suggestions. Thanks.</span>
<span class="comment-copy">Thanks, this solution works as expected. I thought I could achieve this a bit more elegant by using the operator overloading. And the fact that the join methond treats the list elements as strings, I thought it would implicitely call the __str__() method. But your suggestion works perfectly though.</span>
