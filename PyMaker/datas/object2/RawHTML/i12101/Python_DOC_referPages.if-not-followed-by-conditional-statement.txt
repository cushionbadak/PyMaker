<div class="post-text" itemprop="text">
<p>I'm going through Zed's <a href="http://learnpythonthehardway.org/" rel="nofollow">"Learn Python The Hard Way"</a> and I'm on ex49. I'm quite confused by the following code he gives:</p>
<pre><code>def peek(word_list):
    if word_list: # this gives me trouble
        word = word_list[0]
        return word[0]
    else:
        return None
</code></pre>
<p>The condition of the <code>if</code> statement is giving me trouble, as commented. I'm not sure what this means as <code>word_list</code> is an object, not a conditional statement. How can <code>word_list</code>, just by itself, follow <code>if</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>if</code> statement applies the built-in <strong><a href="https://docs.python.org/2/library/functions.html#bool"><code>bool()</code></a></strong> function to the expression which follows. In your case, the code-block inside the <code>if</code> statement only runs if <code>bool(word_list)</code> is <code>True</code>.</p>
<p>Different objects in Python evaluate to either <code>True</code> or <code>False</code> in a Boolean context. These objects are considered to be 'Truthy' or 'Falsy'. For example:</p>
<pre><code>In [180]: bool('abc')
Out[180]: True

In [181]: bool('')
Out[181]: False

In [182]: bool([1, 2, 4])
Out[182]: True

In [183]: bool([])
Out[183]: False

In [184]: bool(None)
Out[184]: False
</code></pre>
<p>The above are examples of the fact that:</p>
<ul>
<li>strings of length <code>&gt;= 1</code> are Truthy.</li>
<li>empty strings are Falsy.</li>
<li>lists of length <code>&gt;= 1</code> are Truthy.</li>
<li>empty lists are Falsy.</li>
<li><code>None</code> is Falsy.</li>
</ul>
<p>So: <code>if word_list</code> will evaluate to <code>True</code> if it is a non-empty list. However, if it is an empty list or <code>None</code> it will evaluate to <code>False</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>He is checking if <code>word_list</code> is empty or not. If a list is empty and it is used in a conditional statement, it is evaluated to False. Otherwise, it is evaluated to True.</p>
<pre><code>word_list = ['some value']
if word_list:
    # list is not empty do some stuff
    print "I WILL PRINT"


word_list = []
if word_list:
    # list is empty
    print "I WILL NOT PRINT"
</code></pre>
<p>In the above code, only the first snippet will print.</p>
<p>See the following reference: <a href="https://docs.python.org/2/library/stdtypes.html#truth-value-testing">https://docs.python.org/2/library/stdtypes.html#truth-value-testing</a></p>
</div>
<div class="post-text" itemprop="text">
<p><code>word_list</code> is a <code>list</code> and when you use it for an if statement condition you check <code>word_list</code> is empty or not :</p>
<pre><code>word_list = []
bool(word_list)   #  False
if word_list :
    print "I'm not empty"  # would not printed
word_list = ['a']
bool(word_list)  # True
if word_list :
    print word_list[0] # 'a'
</code></pre>
<p>as Mad Physicist said even None elements in a list means that it's not empty:</p>
<pre><code>word_list = [None]
bool(word_list) # True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What is required for an <code>if</code> block is just something that can be evaluated either to True or to False.  A conditional evaluates directly to one of those, but there are other objects that can be converted.  To see what any given object is, you can use <code>bool</code>:</p>
<pre><code>&gt;&gt;&gt; mylist = []
&gt;&gt;&gt; bool(mylist)
False
&gt;&gt;&gt; mylist = [4, 3, 6]
&gt;&gt;&gt; bool(mylist)
True
</code></pre>
<p>You see, a list is False if it is empty, but True otherwise.  Therefore, the <code>if word_list:</code> block will be evaluated if <code>word_list</code> is nonempty.  Strings also are False if they are empty, but True otherwise.  Same thing with tuples, dictionaries, sets.  With numbers, 0 and 0.0 are False, but any other number is True.  A fairly common argument to give to indicate to the function to come up with its own value is <code>None</code> which evaluates to False, so the <code>if not mylist:</code> block will be executed if <code>mylist</code> is empty or if <code>mylist</code> is <code>None</code>.  (It would also be executed if <code>mylist</code> is <code>0</code>, <code>()</code>, <code>{}</code>, etc.; but it's unlikely that <code>mylist</code> would be given those)</p>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at this docs page for <a href="http://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow noreferrer">Truth Value Testing</a> in python. You should get clear idea about your situation after reading this. Here is the relevant part for easy access.</p>
<blockquote>
<h3>5.1. Truth Value Testing</h3>
<p><strong>Any object can be tested for truth value, for use in an <code>if</code> or <code>while</code>
  condition</strong> or as operand of the Boolean operations below. The following
  values are considered false:</p>
<ul>
<li><code>None</code></li>
<li><code>False</code></li>
<li>zero of any numeric type, for example, <code>0</code>, <code>0.0</code>, <code>0j</code>.</li>
<li><strong>any empty sequence</strong>, for example, <code>''</code>, <code>()</code>, <strong><code>[]</code></strong>.</li>
<li>any empty mapping, for example, <code>{}</code>.</li>
<li>instances of user-defined classes, if the class defines a <code>__bool__()</code>
  or <code>__len__()</code> method, when that method returns the integer zero or <code>bool</code>
  value <code>False</code>.</li>
</ul>
<p>All other values are considered true â€” so objects of many types are always true.</p>
</blockquote>
<p>Read the first sentence (<strong>bolded</strong>) again, and note the bolded parts in the fourth rule. This relates to your question.</p>
<p>So, according to the 4th rule, if your <code>word_list</code> is empty, the condition evaluates to <code>False</code>, otherwise it evaluates to <code>True</code>.</p>
<hr/>
<p>I know you trust in the docs, but here is a code snippet to <em>actually</em> test the truth values for yourself. (I know it is needless to do something like this, but I am always tempted to see things with my own eyes)</p>
<pre><code>def test_truth_value(arg):
    # ANY object can be evaluated for truth or false in python
    if arg: # or to be more verbose "if arg is True"
        print("'{}' is True".format(arg))
    else:
        print("'{}' is False".format(arg))

class dummy_length_zero():
    def __len__(self):
        return 0
    def __str__(self):
        return 'instance of class: "dummy_length_zero"'

class dummy_bool_False():
    def __bool__(self):
        return False
    def __str__(self):
        return 'instance of class: "dummy_bool_False"'

obj_dummy_0 = dummy_length_zero()
obj_dummy_false = dummy_bool_False()

args = [None, False, 0, 0.0, 0j, '', (), [], {}, obj_dummy_0, obj_dummy_false]

for arg in args:
    test_truth_value(arg)
</code></pre>
<p>And lastly, to test that last statement <em>so objects of many types are always true</em>, just remove the implementation of <code>__len__()</code> or <code>__bool__()</code> method from <code>dummy_length_zero</code> or <code>dummy_bool_False</code> class respectively, and check for truth.</p>
</div>
<div class="post-text" itemprop="text">
<p>In python, everything has an implicit boolean value. Putting any object in an <code>if</code> statement directly is equivalent (but more Pythonic than) doing <code>if bool(word_list):</code>. <code>None</code>, empty sequences, empty sets, empty dicts, <code>0</code>, <code>False</code>, <code>0.0</code> all evaluate to <code>False</code>. Most other objects evaluate to <code>True</code>. That makes <code>if word_list:</code> the most Pythonic way of ensuring that the list is not <code>None</code> or empty before accessing the first element. The long way of expressing the same thing would be <code>if word_list is not None and len(word_list) &gt; 0:</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, <strong><em>every</em></strong> expression can be evaluated to a boolean value (i.e. either True or False).</p>
<p>The following, basic, expressions evaluate to False</p>
<ol>
<li>The keyword False (obviously!)</li>
<li>The keyword None</li>
<li>The number 0 (0, 0.0 ... )</li>
<li>empty sequence (tuple, list, string)</li>
<li>empty mapping (dictionary)</li>
</ol>
<p>All other expressions evaluate to True.</p>
<p>So, what the if statement does is evaluating the expression that follows the if keyword to either <strong>True</strong> or <strong>False</strong>, then act accordingly.</p>
<p>So in your specific example, if <code>word_list</code> matches any of the above cases it will be considered False, otherwise, it will be considered True.</p>
<p>[#] <strong><a href="https://docs.python.org/2/library/stdtypes.html#truth-value-testing" rel="nofollow">reference</a></strong></p>
</div>
<span class="comment-copy">FWIW, you aren't the first person to be confused by  <i>Learn Python The Hard Way</i>;  the order that it presents information leaves a lot to be desired. See <a href="http://sopython.com/wiki/LPTHW_Complaints" rel="nofollow noreferrer">LPTHW Complaints</a>. I guess you may as well stay with it since you've gone so far already, but you may wish to check alternative tutorials.</span>
<span class="comment-copy">I too don't like the approach of the writer, the way he <i>attacks</i> any ideas he himself doesn't like. For instance, about using python version 2 and 3 in the beginning of the book. I don't mean to antagonize anyone with this comment of mine though!</span>
<span class="comment-copy">@Shadowfax you really aren't. It had to be said. :)</span>
<span class="comment-copy">For more on an empty list (or other container object) having a boolean value of <code>False</code>, please see <a href="http://stackoverflow.com/q/53513/4014959">Best way to check if a list is empty</a></span>
<span class="comment-copy">Don't forget <code>None</code></span>
<span class="comment-copy">Don't forget <code>None</code></span>
<span class="comment-copy">Don't forget <code>None</code></span>
<span class="comment-copy">@MadPhysicist Sure!</span>
<span class="comment-copy">I actually meant that the list itself being <code>None</code> would evaluate to <code>False</code>. The <code>if</code> is performing two checks. You're a step ahead of me.</span>
<span class="comment-copy">Don't forget <code>None</code></span>
<span class="comment-copy">@MadPhysicist: Okay; I added it.</span>
<span class="comment-copy">I meant that he's checking that the list is not <code>None</code>. That <code>if</code> is really performing two checks.</span>
<span class="comment-copy">@MadPhysicist: It's performing any number of checks.  It would also be evaluated for <code>0</code>, <code>()</code>, <code>{}</code>, etc.  I made it more clear that <code>None</code> is a possible argument, though.</span>
<span class="comment-copy">With a list argument, only two. Also, all objects can be converted.</span>
