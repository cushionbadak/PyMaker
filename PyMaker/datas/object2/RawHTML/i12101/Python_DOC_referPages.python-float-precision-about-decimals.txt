<div class="post-text" itemprop="text">
<p>for Python</p>
<pre><code>a = 1

for x in range(5):
    a += 0.1
    print(a)
</code></pre>
<p>This is the result:</p>
<p>1.1
1.2000000000000002
1.3000000000000003
1.4000000000000004
1.5000000000000004</p>
<p>how can i handle with this? Is the only way round() function? can i set the precision of a variable before setting the value?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>can i set the precision of a variable before setting the value?</p>
</blockquote>
<p>Use the <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow"><code>decimal</code></a> module which, unlike <a href="https://docs.python.org/3/library/functions.html?highlight=float#float" rel="nofollow"><code>float()</code></a>, offers arbitrary precision and can represent decimal numbers exactly:</p>
<pre><code>&gt;&gt;&gt; from decimal import Decimal, getcontext
&gt;&gt;&gt; 
&gt;&gt;&gt; getcontext().prec = 5
&gt;&gt;&gt; 
&gt;&gt;&gt; a = Decimal(1)
&gt;&gt;&gt; 
&gt;&gt;&gt; for x in range(5):
...     a += Decimal(0.1)
...     print(a)
... 
1.1000
1.2000
1.3000
1.4000
1.5000
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could format your output like this;</p>
<pre><code>a=1
for x in range(5):
    a += 0.1
    print("{:.9f}".format(a) )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that your problem is only displaying the number, @Jaco 's answer does the job. However if you're concern about using that variable and potentially make comparisons or assigning to dictionary keys, I'd say you have to stick to round(). For example this wouldn't work:</p>
<pre><code>a = 1
for x in range(5):
    a += 0.1
    print('%.1f' % a)
    if a == 1.3:
        break

1.1
1.2
1.3
1.4
1.5
</code></pre>
<p>You'd have to do:</p>
<pre><code>a = 1
for x in range(5):
    a += 0.1
    print('%.1f' % a)
    if round(a, 1) == 1.3:
        break

1.1
1.2
1.3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Formatted output has been duly suggested by @Jaco. However, if you want control of precision in your variable beyond pure output, you might want to look at the <code>decimal</code> module.</p>
<pre><code>from decimal import Decimal

a = 1
for x in range(3):
    a += Decimal('0.10')  # use string, not float as argument
    # a += Decimal('0.1000')
    print(a)  # a is now a Decimal, not a float

&gt; 1.10  # 1.1000
&gt; 1.20  # 1.2000
&gt; 1.30  # 1.3000
</code></pre>
</div>
<span class="comment-copy">Nice suggestion to use strings as input to <code>Decimal()</code>. Somehow I missed that useful functionality.</span>
<span class="comment-copy">@Chris Reading your answer, I have to admit, i didn't know you could set the general precision using get_context :D I had only used the context to set general rounding behaviour.</span>
