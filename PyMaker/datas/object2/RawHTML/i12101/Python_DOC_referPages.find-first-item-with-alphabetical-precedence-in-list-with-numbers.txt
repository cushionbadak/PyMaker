<div class="post-text" itemprop="text">
<p>Say I have a list object occupied with both numbers and strings. If I want to retrieve the first string item with the highest alphabetical precedence, how would I do so?</p>
<p>Here is an example attempt which is clearly incorrect, but corrections as to what needs to be changed in order for it to achieve the desired result would be greatly appreciated:</p>
<pre><code>lst = [12, 4, 2, 15, 3, 'ALLIGATOR', 'BEAR', 'ANTEATER', 'DOG', 'CAT']

lst.sort()
for i in lst:
   if i[0] == "A":
      answer = i
print(answer)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First use a <a href="https://docs.python.org/3/glossary.html#term-generator-expression">generator expression</a> to filter out non-strings, and then use <a href="https://docs.python.org/3/library/functions.html#min"><code>min()</code></a> to select the string with the highest alphabetical presence:</p>
<pre><code>&gt;&gt;&gt; min(x for x in lst if isinstance(x, str))
'ALLIGATOR
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>IIUC you could use <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="noreferrer"><code>isinstance</code></a> to get sublist of your original list with only strings, then with <code>sorted</code> get first element by alphabetical sorting:</p>
<pre><code>sub_lst = [i for i in lst if isinstance(i, str)]
result = sorted(sub_lst)[0]


print(sub_lst)
['ALLIGATOR', 'BEAR', 'ANTEATER', 'DOG', 'CAT']

print(result)
'ALLIGATOR'
</code></pre>
<p>Or you could use <code>min</code> as @TigerhawkT3 suggested in the comment:</p>
<pre><code>print(min(sub_lst))
'ALLIGATOR'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another way is to filter the main list <code>lst</code> from intergers using <code>filter</code> built-in method:</p>
<pre><code>&gt;&gt;&gt; min(filter(lambda s:isinstance(s, str), lst))
'ALLIGATOR'
</code></pre>
</div>
<span class="comment-copy">What about <code>sorted([i for i in lst if isinstance(i, str)])[0]</code>?</span>
<span class="comment-copy">You can't sort this list in Python3 without filtering, as you can no longer compare <code>int</code> and <code>str</code> types</span>
<span class="comment-copy">@AntonProtopopov, I don't know what you mean by "firstly converted to list"</span>
<span class="comment-copy">Or <code>min()</code> instead of <code>sorted()[0]</code>.</span>
<span class="comment-copy">Note: materializing the list (necessary for sorting) requires O(N) space and then sorting requires O((N log N) comparisons. On the other hand, using <code>min</code> on a generator expression only requires O(1) space and O(N) comparisons.</span>
