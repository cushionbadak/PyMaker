<div class="post-text" itemprop="text">
<p>I'm practicing coding on codingbat.com since I'm a complete beginner in python, and here is one of the exercises:</p>
<p>Given a string, return a new string made of every other char starting with the first, so "Hello" yields "Hlo".</p>
<p>Here is my attempt at defining the function string_bits(str):</p>
<pre><code>def string_bits(str):
  char = 0
  first = str[char]
  for char in range(len(str)):
    char += 2
    every_other = str[char]
return (first + every_other)
</code></pre>
<p>Running the code gives an error. What's wrong with my code?</p>
</div>
<div class="post-text" itemprop="text">
<p>A different approach, with an explanation: </p>
<p>If you need to handle a sentence, where spaces would be included, you can do this using slicing. On a string slicing works as: </p>
<pre><code>[start_of_string:end_of_string:jump_this_many_char_in_string]
</code></pre>
<p>So, you want to jump only every second letter, so you do: </p>
<pre><code>[::2]
</code></pre>
<p>The first two are empty, because you just want to step every second character.</p>
<p>So, you can do this in one line, like this: </p>
<pre><code>&gt;&gt;&gt; " ".join(i[::2] for i in "Hello World".split())
'Hlo Wrd'
</code></pre>
<p>What just happened above, is we take our string, use <code>split</code> to make it a list. The split by default will split on a space, so we will have: </p>
<pre><code>["Hello", "World"]
</code></pre>
<p>Then, what we will do from there, is using a comprehension, iterate through each item of the list, which will give us a word at a time, and from there we will perform the desired string manipulation per <code>i[::2]</code>.</p>
<p>The comprehension is: (<a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">documentation</a>)</p>
<pre><code>i[::2] for i in "Hello World".split()
</code></pre>
<p>Finally, we call <code>"".join</code> (<a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow">doc</a>), which will now change our list back to a string, to finally give us the output: </p>
<pre><code>"Hlo Wrd"
</code></pre>
<p>Check out the slicing section from the docs: <a href="https://docs.python.org/3/tutorial/introduction.html" rel="nofollow">https://docs.python.org/3/tutorial/introduction.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that the char += 2 returns a value greater than len(str) as len(str)-1 (the range) + 2 is longer than the string. You could do:</p>
<pre><code>def string_bits(string):

    if len(string) == 2:
        return string[0]

    result = ''
    for char in range(0,len(string),2):#range created value sin increments of two
        result += string[char]
    return result
</code></pre>
<p>A more succinct method would be:  </p>
<pre><code>def string_bits(string):
    return string[::2]
</code></pre>
<p>You should avoid using 'str' as a variable name as it is a reserved word by Python. </p>
</div>
<div class="post-text" itemprop="text">
<p>Ok, for me:</p>
<ol>
<li>You should not use str as a variable name as it is a python built-in function (replace str by my_str for example)</li>
<li>For example, 'Hello' length is 5, so 0 &lt;= index &lt;= 4. Here you are trying to access index 3+2=5 (when char = 3) in your for loop.</li>
</ol>
<p>You can achieve what you want with the following code:</p>
<pre><code>def string_bits(my_str):
  result = ""
  for char in range(0, len(my_str), 2):
    result += my_str[char]
  return result
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The error you are getting means that you are trying to get the nth letter of a string that has less than n characters.  </p>
</div>
<div class="post-text" itemprop="text">
<p>As another suggestion, strings are Sequence-types in Python, which means they have a lot of built-in functionalities for doing exactly what you're trying to do here. See <a href="https://docs.python.org/2/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange" rel="nofollow">Built-in Types - Python</a> for more information, but know that sequence types support slicing - that is, selection of elements from the sequence.</p>
<p>So, you could slice your string like this:</p>
<pre><code>def string_bits(input_string):
    return input_string[::2]
</code></pre>
<p>Meaning "take my input_string from the start (:) to the end (:) and select every second (2) element"</p>
</div>
<span class="comment-copy">...your string index is out of range. This shouldn't be surprising, given that you're iterating up to the last index <i>and adding two to it</i>.</span>
<span class="comment-copy">@jonrsharpe I think IndexError is raised when 'char' equals to the <i>penultimate</i> index (since we're adding 2).</span>
<span class="comment-copy">Very helpful and a clear explanation. Slicing makes the code a lot more simple</span>
<span class="comment-copy">@tupitupa Glad it helped. Good luck with your learning.</span>
