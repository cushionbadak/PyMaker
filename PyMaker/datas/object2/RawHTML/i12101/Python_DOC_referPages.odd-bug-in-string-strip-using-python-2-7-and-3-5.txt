<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/20306223/python-string-strip-stripping-too-many-characters">Python string.strip stripping too many characters [duplicate]</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I am getting some very odd result on a quite simple string manipulation using string.strip(). I am wondering whether it's a problem that affects only me (something is wrong with my python installations?) or it's a common bug?</p>
<p>The bug is very wired and here it goes:</p>
<pre><code>&gt;&gt;&gt; a = './omqbEXPT.pool'
&gt;&gt;&gt; a.strip('./').strip('.pool')
'mqbEXPT' #the first 'o' is missing!!!
</code></pre>
<p>It occurs only if an 'o' is following './' !</p>
<pre><code>&gt;&gt;&gt; a = './xmqbEXPT.pool'
&gt;&gt;&gt; a.strip('./').strip('.pool')
'xmqbEXPT'
</code></pre>
<p>What's going on here?!
I have tested this on both python 2.7 and 3.5 and the result doesn't change.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is how the <a href="https://docs.python.org/2/library/stdtypes.html#str.strip" rel="nofollow"><code>strip</code></a> method is actually designed to work.</p>
<blockquote>
<p>The chars argument is a string specifying the set of characters to be removed.</p>
<p>The chars argument is not a prefix or suffix; rather, all combinations of its values are stripped:</p>
</blockquote>
<p>So when you say <code>my_string.strip('.pools')</code>, it's going to remove all leading and trailing characters in that set (ie. <code>{'.', 'p', 'o', 'l', 's'}</code>).  </p>
<p>You probably want to use <a href="https://docs.python.org/2/library/stdtypes.html#str.replace" rel="nofollow"><code>str.replace</code></a> or <a href="https://docs.python.org/2/library/re.html#re.sub" rel="nofollow"><code>re.sub</code></a>.</p>
<pre><code>&gt;&gt;&gt; './omqbEXPT.pool'.replace('./', '').replace('.pool', '')
'omqbEXPT'

&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r'^\.\/|\.pool$', '', './omgbEXPT.pool')
'omqbEXPT'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>string.strip() will left-strip and right-strip <strong>per character</strong>. Meaning, when you ask it to strip <code>pool</code>, it will remove any <code>p</code>s or <code>o</code>s or <code>l</code>s it finds on the 2 ends of the string. This is why it's stripping off the <code>o</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is not a bug. <code>strip</code> strips <em>any</em> charater that is in a string passed as an argument to it. So first you strip all leading and trailing dots and slashes from string <code>a</code>, and then all characters that string <code>'.pool'</code> consists of.</p>
</div>
<span class="comment-copy">Not a bug, please read <a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow noreferrer">the documentation</a>.</span>
<span class="comment-copy">You are right.. my bad.. I have been using strip() for a long time without fully understand it. That was the first time I have noticed that behaviour.</span>
