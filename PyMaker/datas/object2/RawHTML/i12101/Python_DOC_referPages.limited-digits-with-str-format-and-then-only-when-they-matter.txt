<div class="post-text" itemprop="text">
<p>If we're printing a dollar amount, we usually want to always display two decimal digits.</p>
<pre><code>cost1, cost2 = 123.456890123456789, 357.000
print '{c1:.2f}  {c2:.2f}'.format(c1=cost1, c2=cost2)
</code></pre>
<p>shows</p>
<pre><code>123.46  357.00
</code></pre>
<p>But on other occasions we'd like to print the fractions only if they matter. If the two numbers above were volume, for instance, we may prefer to display</p>
<pre><code>123.45 gal. 357 gal.
</code></pre>
<p>Can this be obtained directly with <code>format</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>In <a href="https://docs.python.org/2/library/stdtypes.html#string-formatting-operations" rel="nofollow">String Formatting Operations</a> Python Docs describe the <code>%g</code> format which truncates trailing zeros.</p>
<pre><code>&gt;&gt;&gt; print "%g gallons" % (123.45)
123.45 gallons

&gt;&gt;&gt; print "%g gallons" % (357)
357 gallons

&gt;&gt;&gt; print "%g gallons" % (357.0)
357 gallons
</code></pre>
<p>Or using <a href="https://docs.python.org/3/tutorial/inputoutput.html" rel="nofollow">Python 3 string formatting</a>:</p>
<pre><code>&gt;&gt;&gt; print "{:g} gal {:g} gal".format(123.45, 357.0)
123.45 gal 357 gal
</code></pre>
<p>The <code>g</code> formatter is unintuitive but you can get some interesting results by setting the <a href="https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="nofollow">precision</a>:</p>
<pre><code>&gt;&gt;&gt; print "{:g} gal {:.3g} gal {:.4g} gal {:.5g} gal {:.6g} gal {:.7g} gal".format(*([123.456789] * 6))
123.457 gal 123 gal 123.5 gal 123.46 gal 123.457 gal 123.4568 gal
</code></pre>
<p>Note that in this case setting precision to <code>.5</code> achieves the desired result of 2 decimal places.</p>
<p>Of course you could combine this with <code>f</code> floating point formatter first to get whatever you wanted.</p>
</div>
<span class="comment-copy">Short answer: no.</span>
<span class="comment-copy">And what does "if they matter" mean? These are called significant digits - 123.46 has 5 significant digits, 2 after decimal point, so does 357.00. If they weren't significant, you wouldn't show 123.46 either ;)</span>
<span class="comment-copy">Was it intentionally truncated, rather than rounded, to <code>123.45</code> in the desired output? Or is <code>123.46</code> acceptable/intended there?</span>
<span class="comment-copy">Second @ jonrsharpe.  the answer is No for formatting. Not unless you put a checking logic on them.   This looks like "I can do this in Excel formatting macro and how I can do this in python".    You need to create a function to "round" the number when the trailing is zero.</span>
<span class="comment-copy">But this doesn't necessarily give 2dp; <code>'{:g}'.format(123.456890123456789)</code> is <code>'123.457'</code>. Also <code>str.format</code> isn't just for 3.x (and vice versa).</span>
<span class="comment-copy">The Python 3 string formatting has been available from Python 2.6 and above.</span>
