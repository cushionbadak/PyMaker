<div class="post-text" itemprop="text">
<p>I would like to extract all link targets from a piece of text. So for example, from the following</p>
<pre><code>data1 = '&lt;a href="a"&gt; a (d &lt;a href="b"&gt; f) b (&lt;a href="c"&gt;) d &lt;a href="d"&gt; d(&lt;a href="e"&gt;)'
</code></pre>
<p>I would like to get ['a', 'b', 'c', 'd', 'e'].</p>
<p>However, I would like to skip any links that are in parentheses and occur before a link that is not in parentheses. After the first link that is not in parentheses, parentheses become irrelevant and I would like to match all links. So, for the string</p>
<pre><code>data2 = 'a (d &lt;a href="b"&gt; f) b (&lt;a href="c"&gt;) d &lt;a href="d"&gt; d(&lt;a href="e"&gt;)'
</code></pre>
<p>I would like to get ['d', 'e'].</p>
<p>I have tried using the regex module. The following expression captures all links (with and without parentheses):</p>
<pre><code>regex.match('(?:.*?&lt;a href="([^&gt;])+"&gt;)*', data2).captures(1)
</code></pre>
<p>How can I skip initial links in parentheses?</p>
</div>
<div class="post-text" itemprop="text">
<p>So basically the task is to drop links while they are inside parentheses, and then return all the links in the remainder. You can use the (aptly named) <a href="https://docs.python.org/3/library/itertools.html#itertools.dropwhile" rel="nofollow"><code>itertools.dropwhile</code></a> in combination with regex.</p>
<p>Here's how I would do it:</p>
<pre><code>from itertools import dropwhile

def get_links(s):
    without_paren = r'&lt;a href="(?P&lt;WITHOUT_PAREN&gt;[^"]+)"&gt;'
    with_paren = r'\(.*?&lt;a href="(?P&lt;WITH_PAREN&gt;[^"]+)"&gt;.*?\)'
    master_pattern = with_paren + '|' + without_paren  # try with_paren first
    it = re.finditer(master_pattern, s)
    # Drop matches in `it` until we hit the first without_paren match
    # and yield every match from there onwards
    for mo in dropwhile(lambda mo: mo.lastgroup == 'WITH_PAREN', it):
        yield mo.group(mo.lastgroup)
</code></pre>
<p>Trying this on your data:</p>
<pre><code>&gt;&gt;&gt; print(list(get_links(data1)))
['a', 'b', 'c', 'd', 'e']
&gt;&gt;&gt; print(list(get_links(data2)))
['d', 'e']
</code></pre>
<p>People will usually tell you to parse HTML etc with specialized libraries and they are often right. HTML is not a regular language and regex can't really deal with it in its full complexity. But you seem to be dealing with a "regular" sort of data here, for which regex might just work.</p>
</div>
<div class="post-text" itemprop="text">
<p>Parsing HTML is not an easy task, and not easily done with regexp, you'd better use a real HTML parser like html5lib which is really great. Once the HTML parsed you can spot interesting values with a simple state machine or whatever pleases you:</p>
<pre><code>import html5lib

document = html5lib.parse('a (d &lt;a href="b"&gt; f) b (&lt;a href="c"&gt;) d &lt;a href="d"&gt; d(&lt;a href="e"&gt;)')
tokens = []
for element in document.getiterator():
    tokens.append((element.tag[element.tag.index('}')+1:], element))
    if element.text is not None:
        for char in element.text:
            tokens.append(('text', char))

state = 'OUT_OF_PARENTHESIS'
for token_type, value in tokens:
    if state == 'OUT_OF_PARENTHESIS':
        if token_type == 'a':
            state = 'GOT_AN_A_OUT_OF_PARENTHESIS'
            print(value.attrib)
            continue
    if state == 'OUT_OF_PARENTHESIS':
        if token_type == 'text' and '(' in value:
            state = 'IN_PARENTHESIS'
            continue
    if state == 'IN_PARENTHESIS':
        if token_type == 'text' and ')' in value:
            state = 'OUT_OF_PARENTHESIS'
            continue
    if state == 'GOT_AN_A_OUT_OF_PARENTHESIS':
        if token_type == 'a':
            print(value.attrib)
</code></pre>
</div>
<span class="comment-copy">Please clarify: in <code>data1</code>, <code>(&lt;a href="c"&gt;)</code> is a link in parentheses and occurs before a link not in parentheses. Why is <code>'c'</code> in the output? And in <code>data2</code>, <code>(d &lt;a href="b"&gt; f)</code> does not occur before a link not in parentheses (the link following it is also in parentheses), so why is it not in the output?</span>
<span class="comment-copy">I've tried to clarify it: I would like to ignore any links in parentheses before the first link that is not in parentheses. After that first link, parentheses don't matter anymore.</span>
