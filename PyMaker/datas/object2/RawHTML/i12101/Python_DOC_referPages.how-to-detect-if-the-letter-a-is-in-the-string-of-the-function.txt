<div class="post-text" itemprop="text">
<p>So here is the following Question:</p>
<p>Write a function that is given a list of strings and returns True if there is at least one string in the list that starts with "a", and False if there is no such string in the list. For example, if the list is ["bee","cat","ant"] the function returns True, while if the list is ["bee","cat","bat"] the function returns False. Use the header def isA(myList):</p>
<p>What I wrote for the code is:</p>
<pre><code>def isA(myList):
    String=[]
    for String in myList:
        if ('a' in String):
            return True
        elif:
            return False
</code></pre>
<p>I am not sure if I am right. Could someone tell me whether the codes are right for the question?</p>
<p>Can someone please give me the whole correction of the coding if my coding is wrong. Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>A much more simplified approach is making use of Python's <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow"><code>any</code></a> which will pretty much return True if any condition is met, when iterating over a list: </p>
<pre><code>def isA(myList):
    return any(x.startswith('a') for x in myList)


print(isA(["bee","cat","ant"])) # True
print(isA(["bee","cat","bat"])) # False
</code></pre>
<hr/>
<p>To give you some input on your own code, however. Here are the problems I saw: </p>
<p>In order: </p>
<p>You do not need to declare String=[]. That line does not serve any purpose in your code. </p>
<p>Next, you said you want to check for 'a' starting at the beginning of your word. You want to use the <a href="https://docs.python.org/3/library/stdtypes.html#str.startswith" rel="nofollow">startswith</a> string method.</p>
<p>The logic here is that, based on your requirements, if you find a single case where it starts with 'a', then you quit early with a <code>return True</code>. </p>
<p>Your <code>elif</code> alone is a syntax bug. So, that should go away. </p>
<p>Finally, if you managed to go through your entire loop without finding a single word that starts with 'a', then you simply return False. </p>
<p>So, with all that said and done, your code looks like this: </p>
<pre><code>def isA(myList):
    for String in myList:
        if String.startswith('a'):
            return True
    return False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try the following using the <a href="https://docs.python.org/2/library/functions.html#any" rel="nofollow"><strong><code>any</code></strong></a> function and a simple list comprehension:</p>
<pre><code>def isA(myList):
    return any([item[0].lower() == 'a' for item in myList])
</code></pre>
<hr/>
<pre><code>&gt;&gt;&gt; isA(['bee', 'ant', 'cat'])
True
&gt;&gt;&gt; isA(['bee', 'bat', 'cat'])
False
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Alternative solutions using functional programming</p>
<h2><code>map</code></h2>
<pre><code>&gt;&gt;&gt; myList = ['bee', 'ant', 'cat']
&gt;&gt;&gt; 
&gt;&gt;&gt; myList_bools = map(lambda s: s[0] == 'a', myList)
&gt;&gt;&gt; print(myList_bools)
[False, True, False]
&gt;&gt;&gt;
&gt;&gt;&gt; any(myList_bools)
True
</code></pre>
<p>One-Liner:</p>
<p><code>any(lambda s: s[0] == 'a', myList)</code></p>
<hr/>
<h2><code>filter</code></h2>
<pre><code>&gt;&gt;&gt; myList = ['bee', 'ant', 'cat']
&gt;&gt;&gt; 
&gt;&gt;&gt; myList_filtered = filter(lambda s: s[0] == 'a', myList)
&gt;&gt;&gt; print(myList_filtered)
&lt;filter object at 0x7fafbbdffa20&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; myList_filtered_list = list(myList_filtered)
&gt;&gt;&gt; print(myList_filtered_list)
['ant']
&gt;&gt;&gt;
&gt;&gt;&gt; len(myList_filtered_list) &gt; 0
True
</code></pre>
<p>One-Liner:</p>
<p><code>len(list(filter(lambda s: s[0] == 'a', myList))) &gt; 0</code></p>
</div>
<span class="comment-copy">Could just <code>return 'a' in String</code></span>
<span class="comment-copy">Use <code>if String.startswith('a'):</code>, not <code>if ('a' in String):</code>.  The latter just checks if <code>a</code> is in the string, but the former checks if the string <i>starts</i> with <code>a</code>.</span>
<span class="comment-copy">@cricket_007: What if the first string doesn't start with <code>a</code>?  The second string wouldn't even be checked.</span>
<span class="comment-copy">@zondo I didn't really read the question, just shortened the logic from the provided code</span>
<span class="comment-copy">Was just about to post the same basic answer. Side-note: Naming variables <code>l</code> is terrible form (too easy to confuse with capital <code>i</code> and <code>1</code>), and <code>i</code> is usually reserved for integer indices. <code>for x in mylist</code> perhaps?</span>
<span class="comment-copy">Don't use brackets to make <code>list</code> comprehensions with <code>any</code>; that prevents it from short-circuiting, creating a complete intermediate <code>list</code> for no reason. Generator expressions (without the brackets) will allow <code>any</code> to short-circuit and avoid storing temporaries.</span>
<span class="comment-copy">To be clear, generator expressions and <code>list</code> comprehensions <i>are</i> functional programming tools. <code>map</code> and <code>filter</code> are not any more functional, and they're usually considered less Pythonic. In addition, on CPython, aside from the occasional case where the callback function is a Python built-in implemented in C, <code>map</code> and <code>filter</code> are usually slower than an equivalent listcomp/genexpr, especially if the <code>map</code>/<code>filter</code> require a <code>lambda</code> that the listcomp/genexpr would inline directly without a function call; the function call overhead makes <code>map</code>/<code>filter</code> <i>much</i> slower in that case.</span>
<span class="comment-copy">Rule of thumb: Never use <code>map</code>/<code>filter</code> with a <code>lambda</code>, it's more verbose, slower, and it's not any more functional than listcomp/genexpr (which are borrowed from Haskell, a pure functional language, though slightly less powerful). Frankly, unless you really know what you're doing and profiling says you <i>need</i> the extra speed of using <code>map</code>/<code>filter</code> with a builtin implemented in C, never use <code>map</code>/<code>filter</code> at all, because they're probably a performance pessimization, for no benefit.</span>
