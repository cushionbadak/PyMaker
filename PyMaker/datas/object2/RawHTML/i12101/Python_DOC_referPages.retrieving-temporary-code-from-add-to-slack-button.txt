<div class="post-text" itemprop="text">
<p>I'm stalled midway through the Slack oauth process and could use some help. I have the Add to Slack button added to my website, and the next step according to the documentation is to retrieve a temporary code:</p>
<blockquote>
<p>If the user authorizes your app, Slack will redirect back to your specified redirect_uri with a temporary code in a code GET parameter</p>
</blockquote>
<p>This code is need for the call to oauth.access, which will return the token I need. The Add to Slack button works as intended and sends me to a URL containing the code, but I can't figure out how to programmatically retrieve it using Python 3.5. I've been experimenting with the urllib library (<a href="https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPRedirectHandler" rel="nofollow">https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPRedirectHandler</a>) as well as the requests library.  </p>
<p>The root of my problem is that I need to retrieve a code from an unknown URL. Here's a link to the documentation I'm reading: <a href="https://api.slack.com/docs/oauth" rel="nofollow">https://api.slack.com/docs/oauth</a></p>
<p>Any help or guidance is much appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://api.slack.com/docs/oauth" rel="nofollow">Slack Documentation</a>:</p>
<blockquote>
<p>Step 2 - Token Issuing<br/>
  If the user authorizes your app, Slack will redirect back to your specified <code>redirect_uri</code> with a temporary code in a <code>code</code> GET parameter</p>
</blockquote>
<p>Once you have authorized your app in the OAuth consent screen, Slack redirects you to the <code>redirect_uri</code> you passed to it in Step 1 or the one you set in the App configuration page.</p>
<p>On the server-side you will then need to read the <code>code</code> GET parameter to complete the OAuth Flow.</p>
<p>Here is a gist, which shows how to do basic Slack OAuth with Django: <a href="https://gist.github.com/xoneco/43cd18d5b991b8f5e288" rel="nofollow">https://gist.github.com/xoneco/43cd18d5b991b8f5e288</a></p>
<p><a href="https://gist.github.com/xoneco/43cd18d5b991b8f5e288#file-django-basic-slack-oauth-py-L27" rel="nofollow">Line 27</a> onwards shows how you can implement the <code>redirect_uri</code> endpoint and finish the OAuth Flow.</p>
</div>
<span class="comment-copy">Thanks for the response. In the code snippet you posted, do you know the origin of the <code>request</code> parameter passed to oauthcallback? I'm not sure how to find the proper URL to read its GET parameter, even though I can plainly see it through a browser.</span>
<span class="comment-copy">The <code>request</code> parameter is passed to the function from Django. It includes the <code>GET</code> dictionary, which is the reason why I can retrieve the value of the <code>code</code> parameter. All GET request parameters are included in this dictionary (<a href="https://docs.djangoproject.com/en/stable/ref/request-response/#httprequest-objects" rel="nofollow noreferrer">Link for more info</a>) What framework are you using for all of this at the moment?</span>
<span class="comment-copy">At the moment we have no framework - just plain Python code and a website hosted through Amazon EC2. Will I need a framework to get my code online? If so, do you recommend Django? The end product will be a bot servicing many Slack teams simultaneously.</span>
<span class="comment-copy">Well, technically you wouldn't need a framework, but I <b>highly</b> recommend having one. I would not know how to for example retrieve GET parameters from an incoming HTTP request without a framework such as Django. I do definitely recommend Django. It can easily serve many slack teams at the same time. In fact I am doing so with <a href="https://simplepoll.rocks" rel="nofollow noreferrer">Simple Poll</a> ;)</span>
<span class="comment-copy">I may split this off into a separate question, but perhaps you could point me to a resource or guide. I've got a Django project running through EC2 now, but I can't seem to figure out where the code for my bot should actually live. Models.py seems like a possibility, but most tutorials state that this should be used just for data models only. TL;DR: where should my code be so Amazon/Django actually runs it? Thanks for your help!</span>
