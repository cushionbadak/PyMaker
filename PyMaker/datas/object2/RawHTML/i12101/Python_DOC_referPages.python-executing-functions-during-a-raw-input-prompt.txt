<div class="post-text" itemprop="text">
<p>I'm trying to write a simple Python IRC client. So far I can read data, and I can send data back to the client if it automated. I'm getting the data in a <code>while True</code>, which means that I cannot enter text while at the same time reading data. How can I enter text in the console, that only gets sent when I press enter, while at the same time running an infinite loop?</p>
<p>Basic code structure:</p>
<pre><code>while True:
    read data
    #here is where I want to write data only if it contains '/r' in it
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another way to do it involves threads.</p>
<pre><code>import threading

# define a thread which takes input
class InputThread(threading.Thread):
    def run(self):
        self.daemon = True
        while True:
            self.last_user_input = input('input something: ')
            # do something based on the user input here
            # alternatively, let main do something with
            # self.last_user_input

# main
it = InputThread()
it.start()
while True:
    # do something  
    # do something with it.last_user_input if you feel like it
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you need is an event loop of some kind.</p>
<p>In Python you have a few options to do that, pick one you like:</p>
<ul>
<li>Twisted <a href="https://twistedmatrix.com/trac/" rel="nofollow">https://twistedmatrix.com/trac/</a></li>
<li>Asyncio <a href="https://docs.python.org/3/library/asyncio.html" rel="nofollow">https://docs.python.org/3/library/asyncio.html</a></li>
<li>gevent <a href="http://www.gevent.org/" rel="nofollow">http://www.gevent.org/</a></li>
</ul>
<p>and so on, there are hundreds of frameworks for this, you could also use any of the GUI frameworks like tkinter or PyQt to get a main event loop.</p>
<p>As comments have said above, you can use threads and a few queues to handle this, or an event based loop, or coroutines or a bunch of other architectures. Depending on your target platforms one or the other might be best. For example on windows the console API is totally different to unix ptys. Especially if you later need stuff like colour output and so on, you might want to ask more specific questions. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a async library (see answer of schlenk) or use <a href="https://docs.python.org/2/library/select.html" rel="nofollow">https://docs.python.org/2/library/select.html</a></p>
<blockquote>
<p>This module provides access to the select() and poll() functions
  available in most operating systems, epoll() available on Linux 2.5+
  and kqueue() available on most BSD. Note that on Windows, it only
  works for sockets; on other operating systems, it also works for other
  file types (in particular, on Unix, it works on pipes). It cannot be
  used on regular files to determine whether a file has grown since it
  was last read.</p>
</blockquote>
</div>
<span class="comment-copy">Not sure what you are trying to do, but <i>threading</i> could be useful.</span>
<span class="comment-copy">I basically want to be able to enter text into the console while also reading data from an infinite loop.</span>
<span class="comment-copy">One thread should wait for user input and copy it to a thread-safe object (probably a queue) when new data is available. Other thread polls the safe object and processes new data if available.</span>
<span class="comment-copy"><code>raw_input</code> would probably be correct. I think I can work with it. Thanks :)</span>
<span class="comment-copy">@Shef Ah yes, my example code is Python3, you are probably using an older version which uses raw_input.</span>
<span class="comment-copy">I should emphasize this specific limitation for Windows: <code>select()</code> doesn't work on the standard input unless the standard input is a socket (can be done, but highly unlikely).</span>
