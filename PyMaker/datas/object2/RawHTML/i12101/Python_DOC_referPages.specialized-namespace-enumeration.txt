<div class="post-text" itemprop="text">
<p>I'd like to make use of Python's <a href="https://docs.python.org/3/library/enum.html" rel="nofollow">enum</a> to create value in their own namespace.</p>
<p>Here is the basic idea:</p>
<pre class="lang-py prettyprint-override"><code>from enum import Enum
class MyBaseNs(Enum):
    __namespace__ = 'base'

    a = 'a'
    b = 'b'

class MyChildNs(MyBaseNs):
    __namespace__ = 'child'

    a = 'a'
    b = 'b'
</code></pre>
<p>Then each member should print the following:</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; MyBaseNs.a.value
'base.a'
&gt;&gt;&gt; MyBaseNs.b.value
'base.b'
&gt;&gt;&gt; MyChildNs.a.value
'base.child.a'
&gt;&gt;&gt; MyChildNs.a.value
'base.child.b'
</code></pre>
<p>Idealy, I'd like the value to be taken directly from the member name so I avoid repetition like for the <a href="https://docs.python.org/3/library/enum.html#autonumber" rel="nofollow">Autoumber class</a> given for an example.</p>
<p>And bonus would be to be able to do something like:</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; MyBaseNs.child.a.value
'base.child.a'
</code></pre>
<p>I started to play with the <a href="https://docs.python.org/3/reference/datamodel.html#object.__new__" rel="nofollow"><code>__new__()</code></a> method but having hard time to reach expected result.</p>
<p>For now I have the following:</p>
<pre class="lang-py prettyprint-override"><code>from enum import Enum

class MyNs(str, Enum):
    __sep__ = '.'

    def __new__(cls, value):
        obj = str.__new__(cls)
        obj._value_ = cls.__sep__.join(cls.__namespace__ + (str(value), ))
        return obj

class A(MyNs):
    __namespace__ = ('a', )

    a = 'a'
</code></pre>
<p>So this make an <code>str</code> specialized <code>Enum</code> and join the <code>__namespace__</code> tuple with each member value. So this is the basics of what I'm looking for.</p>
<p>The solution would imply to run over all the parents of the current namespace to create the final <code>__namespace__</code> tuple. I for now don't see how this can be done.</p>
<p>How to implement such a behavior? Is <code>Enum</code> really the good way to go?</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure what you are trying to accomplish, and here's why:</p>
<ul>
<li>every module is already its own namespace</li>
<li>every class is already its own namespace</li>
<li>lots of other things are also already namespaces</li>
</ul>
<p>One (big) difficulty in using <code>Enum</code> in the way you are trying is that <code>Enum</code> doesn't allow subclassing once members exist; in other words, once you have created <code>MyBaseNs</code> as an <code>Enum</code> you won't be allowed to create <code>MyChildNs</code> as an <code>Enum</code>.</p>
<hr/>
<p>As far as your code; when run I get this:</p>
<pre><code>&gt;&gt;&gt; A
&lt;enum 'A'&gt;
&gt;&gt;&gt; A.a
&lt;A.a: 'a.a'&gt;
</code></pre>
<p>Which seems to be exactly what you asked for.</p>
</div>
<span class="comment-copy"><i>"having hard time"</i> is not a useful problem description; please give a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>.</span>
<span class="comment-copy">Yes the code I have does the basic but it forces to enter the namespace hierarchy by hand. I would like to have this more dynamic to avoid forgetting some in case of refactorization. This namespace and the application's namespace are completely different. This is why module namespace is not an option.</span>
<span class="comment-copy">@Spack: Your <code>MyBaseNs</code> and <code>MyChildNs</code> both have the same members (<code>a</code> and <code>b</code>) -- is that intentional, or just a bad example?  If intentional, and the child namespaces will have the same member names but different values, what's the point of the hierarchy?</span>
