<div class="post-text" itemprop="text">
<p>Hello I'm learning to program in Python to manipulate data bases and I can't make this simple task. Please someone help me.
I have this list </p>
<pre><code>CIS=['4998200lp','2159140lp','02546or']
</code></pre>
<p>I want to get this result:</p>
<pre><code>CIS=['4998200lp','2159140lp','2546or']
</code></pre>
<p>I was trying something like:</p>
<pre><code>for x in CIS:
    izq= x[:1]
    if izq == 0:
        CIS=[x.replace(x[:1],'') for x in CIS]
    print (CIS)
</code></pre>
<p>I just want to delete the first element of every string for the condition <code>izq == 0</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your description doesn't match your example input/output which also differs from your code.</p>
<p>Based on the example input/output, I suspect what you're trying to do is strip a single leading <code>0</code> from any string that starts with <code>0</code>. And that's not too bad, but you can't do it in a <code>for</code> loop without having an index to assign back to. For that, you can use <code>enumerate</code>:</p>
<pre><code>for i, x in enumerate(CIS):
    if x.startswith('0'):  # or x[:1] == '0' if you really prefer
        CIS[i] = x[1:]
</code></pre>
<p>Alternatively, you can use a list comprehension to replace <code>CIS</code>:</p>
<pre><code>CIS = [x[1:] if x.startswith('0') else x for x in CIS]
</code></pre>
<p>and to mutate in place (rather than making a new <code>list</code>), use the same comprehension but assign to the full slice, which makes it behave like the spelled out loop in the first example:</p>
<pre><code>CIS[:] = [x[1:] if x.startswith('0') else x for x in CIS]
</code></pre>
<p>The difference between examples #1/#3 and example #2 occurs if <code>CIS</code> was passed as an argument to a function, or otherwise is referenced in multiple places. In #1/#3, it's mutating the <code>list</code> in place, so all references will see the updates, in #2, it's reassigning <code>CIS</code>, but leaving the original <code>list</code> unchanged; if other references exist, they won't appear changed.</p>
<p>Note: If the goal is to remove <em>all</em> leading <code>0</code>s, then use <code>str.lstrip</code>, e.g.:</p>
<pre><code>CIS = [x.lstrip('0') for x in CIS]
</code></pre>
<p>with similar adaptations for the other approaches. You don't even need to test for the presence of <code>0</code> in that case, as <code>lstrip</code> will return the <code>str</code> unmodified if it doesn't begin with <code>0</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are simply looking to remove the first zero of every string, utilize the <a href="https://docs.python.org/3/library/stdtypes.html#str.startswith" rel="nofollow">startswith</a> method. Also, don't look for an integer 0. Look for a string '0'.</p>
<p>Finally, you can simplify your implementation with doing this all in a comprehension, creating a new list with your new data:</p>
<pre><code>[w[1:] if w.startswith('0') else w for w in CIS]
</code></pre>
<p>Outputs:</p>
<pre><code>['4998200lp', '2159140lp', '2546or']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just try to delete first character of every elements that starts with <code>0</code>:</p>
<pre><code>CIS=['4998200lp','2159140lp','02546or']
for i,v in enumerate(CIS):
    if v.startswith('0'):
        CIS[i] = v[1:]

CIS  # ['4998200lp', '2159140lp', '2546or']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Actually your loop contained a very close approach to a working solution:</p>
<pre><code>CIS=['4998200lp','2159140lp','02546or']
CIS=[x.replace(x[:1],'') for x in CIS]
</code></pre>
<p>but this would strip all first elements. To only replace them if they are <code>'0'</code> (notice that's not the same as the <code>integer</code>: <code>0</code>) you need to incorporate you <code>if ... else ...</code> into the list-comprehension:</p>
<pre><code>CIS=['4998200lp','2159140lp','02546or']
CIS=[x.replace(x[:1],'',1) if x[:1] == '0' else x for x in CIS ]
</code></pre>
<p>The <code>if ... else ...</code> syntax might be a bit strange but just try to read the code aloud: "Insert the replaced x if the first character is a zero or if not insert x, for every x in CIS".</p>
<p>The other answers contain much more sophisticated approaches but I just wanted to add this answer to give you a heads-up that you were on the right track!</p>
<p>But it's generally a bad idea to use a list-comprehension inside a <code>for</code> loop if they iterate over the same <code>iterable</code>. Mostly you just want one of them.</p>
</div>
<span class="comment-copy">So you just want to strip leading <code>'0'</code> characters?  What if the item was <code>'002546or'</code>?</span>
<span class="comment-copy">Additionally, you're evaluating <code>izq == 0</code> with <code>0</code> as an integer. Changing it  to <code>izq == '0'</code> will help. Although the way you replace it is inefficient as well.</span>
<span class="comment-copy">And for a fun functional version using <code>itertools.starmap</code> and <code>itertools.repeat</code>: <code>list(starmap(str.lstrip, zip(CIS, repeat('0'))))</code>.</span>
<span class="comment-copy">And by "fun" I mean "a lot slower than <code>[x.lstrip('0') for x in CIS]</code>, so it shouldn't be used."</span>
<span class="comment-copy">@JaredGoguen: Actually, you can skip <code>starmap</code> and <code>zip</code> if you're using the Py3 version of <code>map</code> (in Py2, can be found on <code>future_builtins</code>), and just do: <code>list(map(str.lstrip, CIS, repeat('0')))</code> But yes, likely to be slower in most cases (if it ever gets faster, it would only be for huge inputs).</span>
<span class="comment-copy">Note: Unlike the OP's code (and other answers), this will raise an exception if any of the strings in the <code>list</code> are the empty string. Either use a slice <code>v[:1] == '0'</code> or use <code>v.startswith('0')</code> to avoid this problem without needing to introduce a special case for the empty string.</span>
