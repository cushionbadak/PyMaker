<div class="post-text" itemprop="text">
<p>So I'm writing a program in Python, and it's getting rather long. As I've expanded it, I've started to notice that some of my classes are getting many attributes, and I'm passing them into __init__ in a way that just feels suboptimal. As an example, here's what I'm talking about:</p>
<pre><code>class Enemy(Ship):

def __init__(self,m=20000,size=32,F=[0,0],X=[0,0],v=[0,0],a=[0,0],p=[0,0],
             tau=0,theta=0,omega=0,alpha=0,I=850000,rel_X_cm=[16,16],sprites=[pygame.image.load("core_off.png"),pygame.image.load("core_on.png")],
             health=0,module_type="Thruster",module_coordinates=[0,0],core_module=None,
             module_orientation=0,F_max=[4000000,0],tau_max=0,
             attached_modules=[],surrounding_points = [[1,0],[0,1],[-1,0],[0,-1]]):

    super(Enemy,self).__init__(m,size,F,X,v,a,p,tau,theta,
                                  omega,alpha,I,rel_X_cm,sprites,
                                  health,module_type,module_coordinates,
                                  core_module,module_orientation,F_max,tau_max,
                                  attached_modules,surrounding_points)
</code></pre>
<p>This is obviously pretty messy, and I'd prefer to simplify my code. So my question is, is there a better way to handle all of these variables than the way I'm doing it?</p>
</div>
<div class="post-text" itemprop="text">
<p>That's exactly what unpacking arguments are for. And in this case since you are passing <a href="https://docs.python.org/3/tutorial/controlflow.html#keyword-arguments" rel="nofollow"><em>keyword arguments</em></a> you can use <code>**kwargs</code>:</p>
<pre><code>def __init__(self,**kwargs):
    # do stuff with kwargs[X] which X is the name of your argument
</code></pre>
<p>And for your <a href="https://docs.python.org/3/tutorial/controlflow.html#arbitrary-argument-lists" rel="nofollow"><em>positional arguments</em></a> you can use one star prefix <code>*args</code> which lets you pass  arbitrary argument list to function:</p>
<pre><code>def __init__(self,*args):
      # then you can loop over the args in order to achieve to arguments
</code></pre>
</div>
<span class="comment-copy">This isn't a Python-specific problem, see e.g. <a href="https://sourcemaking.com/refactoring/smells/long-parameter-list" rel="nofollow noreferrer">sourcemaking.com/refactoring/smells/long-parameter-list</a></span>
<span class="comment-copy">Is there a way to define default values for unknown numbers of variables? Thanks!</span>
<span class="comment-copy">@AustinGarrett If they're unknown how do you know what the defaults should be?</span>
<span class="comment-copy">@AustinGarrett Can you describe your question with an example? you can update your question with new info.</span>
<span class="comment-copy">I came up with a solution; I just define a class dict called "default_params" and then within __init__ I use <code>for var in default_params:     self.var = kwargs.pop('var',default_params[var])</code></span>
