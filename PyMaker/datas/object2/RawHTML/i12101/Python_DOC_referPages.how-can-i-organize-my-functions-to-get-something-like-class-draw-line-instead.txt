<div class="post-text" itemprop="text">
<p>I often use functions that are nicely organized into calls such as <code>pygame.draw.circle</code>. I want to follow this structure in my class but do not know how do so. I tried using a nested class but it was limited to its own scope rather than its parent's, which was necessary for it to function.</p>
<ol>
<li><p>How do I properly implement this feature?</p></li>
<li><p>Alternatively, is it a bad idea to attempt to mimic this except for certain scenarios? What should I be doing instead?</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>| pygame/
|   __init__.py
|   draw/
|     __init__.py
|     circle.py
|     rectangle.py
</code></pre>
<p>Or, you could do it this way.</p>
<pre><code>| pygame/
|   __init__.py
|   draw.py
</code></pre>
<blockquote>
<p>draw.py</p>
</blockquote>
<pre><code>def circle(*args):
    """ Draws a circle using *args """
    pass

def rectangle(*args):
    #  and so on
    pass
</code></pre>
<blockquote>
<p>your_project.py</p>
</blockquote>
<pre><code>from pygame.draw import circle, rectangle
circle(args)
rectangle(args)

#  or
from pygame import draw
draw.circle(args)
draw.rectangle(args)

#  or
import pygame
pygame.draw.circle(args)
</code></pre>
<p>You may want to read <a href="https://docs.python.org/3/reference/import.html#regular-packages" rel="nofollow">https://docs.python.org/3/reference/import.html#regular-packages</a> as you're making your final decisions.</p>
</div>
<span class="comment-copy"><code>pygame.draw</code> is a submodule, not a subclass.</span>
