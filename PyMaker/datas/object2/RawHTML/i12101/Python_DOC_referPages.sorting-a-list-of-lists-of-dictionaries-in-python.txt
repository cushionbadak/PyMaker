<div class="post-text" itemprop="text">
<p>I have an object that is a list of lists of dictionaries:</p>
<pre><code>myObject =[[{ "play": 5.00, "id": 1, "uid": "abc" },  \
            { "play": 1.00, "id": 2, "uid": "def" }], \
           [{ "play": 6.00, "id": 3, "uid": "ghi" },  \
            { "play": 7.00, "id": 4, "uid": "jkl" }], \
           [{ "play": 3.00, "id": 5, "uid": "mno" },  \
            { "play": 1.00, "id": 6, "uid": "pqr" }]]
</code></pre>
<p>I want to sort the list by the sum of <code>play</code> values in the dictionaries of each nested list. The object would then be sorted like this:</p>
<pre><code>myObject =[[{ "play": 6.00, "id": 3, "uid": "ghi" },  \
            { "play": 7.00, "id": 4, "uid": "jkl" }], \
           [{ "play": 5.00, "id": 1, "uid": "abc" },  \
            { "play": 1.00, "id": 2, "uid": "def" }], \
           [{ "play": 3.00, "id": 5, "uid": "mno" },  \
            { "play": 1.00, "id": 6, "uid": "pqr" }]]
</code></pre>
<p>If it were just a list of dicts then: </p>
<p><code>sorted(myObject, key=sum(map(itemgetter(play))), reverse=True)</code></p>
<p>would work. I can't figure out how to do this without looping over the list, calculating the sum, then sorting. That is what I am doing now, but I'm trying to increase the efficiency of this code by removing loops because my list has 100's of millions of lists in it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your idea is already very good, to use a custom key function when sorting and using <code>sum</code>, <code>map</code> and an <code>itemgetter</code> on the <code>play</code> key:</p>
<pre><code>key=sum(map(itemgetter(play)))
</code></pre>
<p>You do have a problem there though: The <code>key</code> argument expects a function that takes an item of your list you are sorting. But neither <code>sum</code> nor <code>map</code> return a function, so you cannot use it as a key function. Instead, you could make a lambda function that executes this combination for each item.</p>
<p>The other problems are that <code>play</code> should be a string <code>'play'</code> instead, and that <code>map</code> should take the sublist as an argument. So your key function would look like this:</p>
<pre><code>key=lambda x: sum(map(itemgetter('play'), x))
</code></pre>
<p>This is btw. functionally equivalent to the following generator comprehension which might be more readable:</p>
<pre><code>key=lambda x: sum(y['play'] for y in x)
</code></pre>
<p>Using this with <code>sorted</code> should work but you should consider sorting your list directly using <code>list.sort</code> instead:</p>
<pre><code>&gt;&gt;&gt; myObject = [[{ "play": 5.00, "id": 1, "uid": "abc" },
                 { "play": 1.00, "id": 2, "uid": "def" }],
                [{ "play": 6.00, "id": 3, "uid": "ghi" },
                 { "play": 7.00, "id": 4, "uid": "jkl" }],
                [{ "play": 3.00, "id": 5, "uid": "mno" },
                 { "play": 1.00, "id": 6, "uid": "pqr" }]]

&gt;&gt;&gt; myObject.sort(key=lambda x: sum(y['play'] for y in x), reverse=True)

&gt;&gt;&gt; for x in myObject:
        print(x)

[{'play': 6.0, 'uid': 'ghi', 'id': 3}, {'play': 7.0, 'uid': 'jkl', 'id': 4}]
[{'play': 5.0, 'uid': 'abc', 'id': 1}, {'play': 1.0, 'uid': 'def', 'id': 2}]
[{'play': 3.0, 'uid': 'mno', 'id': 5}, {'play': 1.0, 'uid': 'pqr', 'id': 6}]
</code></pre>
<p>(Btw. <code>myObject</code> is kind of a bad name for a list of things.)</p>
<hr/>
<p>As far as the efficiency or complexity of your problem goes, you really cannot avoid having to loop through every sublist eventually. It’s impossible to determine the sum of those values without looking at the values, so obviously you cannot possibly avoid this.</p>
<p>However, you should ensure that every sum is only ever calculated once, to avoid having to look at the items in the sublists more than once. Luckily, the default sorting using <a href="https://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow"><code>list.sort</code></a> does exactly guarantee that:</p>
<blockquote>
<p>The key corresponding to each item in the list is calculated once and then used for the entire sorting process.</p>
</blockquote>
<p>So you will have a very efficient solution for this sorting problem.</p>
</div>
<span class="comment-copy">Just as a note: You do not need the trailing <code>\</code> line continuations in this case. Since the lines end with a comma and the list literals are still “open”, Python will automatically expect the next line to continue there.</span>
<span class="comment-copy">Should it not be <code>reverse=True</code> to get highest first</span>
<span class="comment-copy">@PaulRooney Oh yes, I missed that detail in the question (although it’s not really relevant to the sorting problem). Thank you!</span>
