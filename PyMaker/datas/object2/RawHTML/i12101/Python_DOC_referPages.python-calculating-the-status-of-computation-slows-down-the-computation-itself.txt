<div class="post-text" itemprop="text">
<p>This is a basic example of what I'm talking about:</p>
<p>Count from 0 to 10000000</p>
<pre><code>import time

k = 0

beginning = time.time()

while k &lt; 10000000:

    k = k+1

elapsed = round(time.time()-beginning, 5)

print (elapsed)
</code></pre>
<p>Now with a sort of "status" of the computation (displays percentage every 1 second):</p>
<pre><code>import time

k = 0

beginning = time.time()
interval = time.time()

while k &lt; 10000000:

    if time.time() - interval &gt; 1:
        print (round((k/100000), 5))
        interval = time.time()

    k = k+1

elapsed = round(time.time()-beginning, 5)

print (elapsed)
</code></pre>
<p>The first example takes 3.67188 seconds, the second example takes 12.62541 seconds. I guess that's because the scripts has to continuously check if 1 second has elapsed. Is there a way to solve this issue? I've found something about threads and multiprocess but i can't figure out how to implement it. Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Benchmarking</strong></p>
<p>I wrote different solutions and compare them. I needed to multiply your value by 10 to get measurable results. First without any progress measurement to see how fast it runs on my machine.</p>
<pre><code>def process_without_measuring(self):
    self._start = time.time()

    self._k = 0
    while self._k &lt; 100000000:
        self._k = self._k+1

    print (time.time() - self._start)
</code></pre>
<p>I get a duration of <strong>13.8 seconds</strong>.</p>
<p>Let's start with your implementation:</p>
<pre><code>def process_with_original_measuring(self):
    self._start = time.time()
    next = self._start
    self._k = 0
    while self._k &lt; 100000000:
        self._k = self._k+1
        if time.time() - next &gt; 1:
            print (round((self._k / 1000000), 5))
            next = time.time()

    print("duration:")
    print (time.time() - self._start)
</code></pre>
<p>If I run this, i get a duration of <strong>30.31 seconds</strong> and around 3 percents up per second. The problem is that it has to compare time every loop rund and do a arithmetic operation. You can reduce the time by changing the loop to:</p>
<pre><code>def process_with_manual_measuring(self):
    self._start = time.time()
    next = self._start + 1
    self._k = 0
    while self._k &lt; 100000000:
        self._k = self._k+1
        if time.time() &gt; next:
            print (round((self._k / 1000000), 5))
            next = time.time() + 1

    print("duration:")
    print (time.time() - self._start)
</code></pre>
<p>Instead of subtracting the timestamps every loop I calculate the next timestamp only once and compare to it. This is of course not really fast, but faster than before. It gets me to <strong>22.0 seconds</strong>, so saving 8 seconds only with removing this one operation.</p>
<p>With a timer object as thread you get a much better result and it is the preferable way:</p>
<pre><code>def show_progress(self):
    print (round((self._k / 1000000), 5))
    self._timer = Timer(1, self.show_progress)
    self._timer.start()

def process_with_timer(self):
    self._start = time.time()
    self._timer = Timer(1, self.show_progress)
    self._timer.start()
    self._k = 0
    while self._k &lt; 100000000:
        self._k = self._k+1
    self._timer.cancel()

    print("duration:")
    print (time.time() - self._start)
</code></pre>
<p>Running this I get a output of 7 percent more every second and it is done after <strong>13.8 seconds</strong>. As you can see, no difference. There are only few more calls to make and these are done in nearly no time.</p>
<p><strong>How to use timer class</strong></p>
<p>The constructor of <code>Timer</code> expects a time duration in seconds and a method to call after time elapsed. You can use class method, a function or a lambda expression. After construction you need to start the timer with <code>start()</code>.</p>
<p>The first timer is started by the process itself. After this with each timer call a new timer is started to get a interval of one second. When the process finishes remember to call <code>cancel()</code> on timer. Otherwise it will run endless because it will restart itself every second.</p>
<p><strong>How to run the examples</strong></p>
<p>Please notice that the above methods are class methods so watch indentation.</p>
<pre><code>import time
from threading import Timer

class ProgressMeter:
    def __init__(self):
        self._k = 0
        self._timer = 0

    # insert above methods with indentation as same level as __init__(self):
</code></pre>
<p>To run them you only need to create a instance of ProgressMeter and call the method you want.</p>
<pre><code>meter = ProgressMeter()
meter.process_with_timer()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're on a Unix-like system you can use <code>signal.alarm</code> from the <a href="https://docs.python.org/3/library/signal.html" rel="nofollow"><code>signal</code></a> module.</p>
<p>The following code is a little messy, but you could make it neater by encapsulating things in a class.</p>
<pre><code>import time
import signal

# Alarm delay in seconds. Must be an integer.
alarm_delay = 1

def handler(signum, frame):
    report()

    # Request a new SIGALRM signal
    signal.alarm(alarm_delay)

# Set a handler for the SIGALRM signal
signal.signal(signal.SIGALRM, handler)

# Request the initial SIGALRM signal
signal.alarm(alarm_delay)

# Report current progress
def report():
    print(round(k / 100000, 5))

k = 0
beginning = time.time()
while k &lt; 10000000:
    k = k + 1

elapsed = round(time.time() - beginning, 5)
print (elapsed)

# Cancel the pending alarm
signal.alarm(0)
</code></pre>
<p><strong>typical output</strong> on my 2GHz machine. </p>
<pre><code>18.90911
35.98427
50.17902
64.53358
83.42723
5.94397
</code></pre>
</div>
<span class="comment-copy">Not tried this implementation but would something like this work? <a href="https://docs.python.org/2/library/threading.html#timer-objects" rel="nofollow noreferrer">docs.python.org/2/library/threading.html#timer-objects</a></span>
<span class="comment-copy">Probably you could wrap the calculation into some sort of <code>Task</code> class and have another thread periodically check the status of that task. A bit vague, though.</span>
<span class="comment-copy">Depends on the processor. How many cores you have? i tried second example on an imac and it shows output <code>39.0 79.0 2.53144</code> I am thinking it took 2.53s</span>
<span class="comment-copy">Sorry, this may be a stupid question, but how do i run it?</span>
<span class="comment-copy">Nice, I will try later and provide feedback, Thanks</span>
<span class="comment-copy">I would appreciate some feedback.</span>
<span class="comment-copy">Sorry, I accepted the answer. The solution you provided is fine, I tested it with various algorithms and seems a big improvement. I calculated that is slows down by 15% (I tried 1 machine only however).</span>
