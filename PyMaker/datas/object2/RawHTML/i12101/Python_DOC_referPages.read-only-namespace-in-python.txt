<div class="post-text" itemprop="text">
<p>What does read-value mean in the context of names?</p>
<pre><code>In [1]: def outer():
   ...:     x=1
   ...:     def inner():
   ...:         print x
   ...:     inner()
   ...:

In [2]: outer()
1
</code></pre>
<p>Like in the above example x in not the namespace of <code>inner()</code>. Do variables in namespaces have types such as read-only/ writeable etc?</p>
<blockquote>
<p>Quoting official docs: "To rebind variables found outside of the innermost
  scope, the nonlocal statement can be used; if not declared nonlocal,
  those variable are read-only (an attempt to write to such a variable
  will simply create a new local variable in the innermost scope,
  leaving the identically named outer variable unchanged)."</p>
</blockquote>
<p>Reference: <a href="https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces" rel="nofollow">https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces</a> (5 th last paragraph)</p>
</div>
<div class="post-text" itemprop="text">
<p>No, variables don't have 'properties' like read-only or write. The <em>namespace implementation</em> may disallow direct manipulation, but that's something entirely different.</p>
<p>The <code>nonlocal</code> and <code>global</code> statements let you override the scope of a variable; without these Python will make a name <em>local</em> if it is being <em>bound</em> to.  Binding actions include assignment, <code>for</code> loop, <code>with .. as</code> and <code>except .. as</code> statement targets, function arguments and imports. Changing the scope doesn't alter if a variable is read-only or not, it merely changes the scope that manages the variable. <code>nonlocal</code> means it'll be stored in a parent scope and made a closure.</p>
<p>The term <em>read-only</em> used by the quote you found is <em>very misleading</em>; assignment clearly still alters the local variable. The presence of local doesn't make the same name in the parent scope not writable, it is simply <em>not visible</em> in the innermost scope. It's disappointing that this is from the official tutorials; I've <a href="http://bugs.python.org/issue26449" rel="nofollow">reported a bug</a> to see this corrected.</p>
</div>
<span class="comment-copy">I have trouble fitting together the namespace and read-only. Are you saying namespaces are only relevant for binding?</span>
<span class="comment-copy">@AbhishekBhatia: there is no such thing as read-only. The quote you found is very misleading. I'm disappointed that this is from the Python tutorial.</span>
<span class="comment-copy">Thanks! Are there good references to what happens what variable is read. What is the order of scope followed then. Check edit in question for cause of confusion.</span>
<span class="comment-copy">The warning is entirely unrelated. It is better to put the <code>global x</code> statement first in a function, so anyone reading the code sees it first. Because it affects the <i>whole</i> scope it doesn't really matter where you put it in the function.</span>
<span class="comment-copy">@AbhishekBhatia: that's because the <b>attribute</b> is read-only. You cannot replace it. You can't do <code>import module; module.__dict__ = something_else</code>. Attributes are not variables in the sense of scoping rules.</span>
