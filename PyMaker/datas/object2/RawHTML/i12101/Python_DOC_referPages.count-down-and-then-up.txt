<div class="post-text" itemprop="text">
<p>I need to write a code that counts down, decreasing with 2 steps until it reaches zero, where it then counts up again with 1 step between each integer.
As an example , if I define a function <code>updown(n)</code> and write <code>updown(7)</code>, it should give:</p>
<pre><code>6 4 2 0 1 2 3 4 5 6 7
</code></pre>
<p>Here is my attempt:</p>
<pre><code>def updown(n,m):
    while n&gt;=1:
        print(n-1)
        n=n-m

    while n&lt;=7:
        print(n)
        n=n+1
</code></pre>
<p>It takes m steps down, in my case <code>m=2</code>. When I run the code I get</p>
<pre><code> 6 4 2 0 -1 0 1 2 3 4 5 6 7
</code></pre>
<p>As you can see, a negative integer appear and that is wrong. Also, I have n&lt;=7 in the code, which I know is wrong. It should be valid for any n I insert and use that value as an upper limit.</p>
<p>I'm stuck and don't know what to do. It should be a recursive code and no built-in functions shall be used. The reason is that I want to understand the basics and continue from there, without any shortcuts.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think that by using <code>n-1</code>, you will make things more complicated than they should be.</p>
<p>Simply first calculate the largest even number that is smaller than the given number:</p>
<pre><code>n2 = n-(n%2)
</code></pre>
<p>or more general (for <code>m</code>):</p>
<pre><code>nm = n-(n%m)
</code></pre>
<p>Next use <a href="https://docs.python.org/2/library/functions.html#range" rel="nofollow"><code>range</code></a>:</p>
<pre><code>for i in range(nm,-1,-m):
    print(i)
</code></pre>
<p>and finally print all number from <code>0</code> and including <code>n</code>:</p>
<pre><code>for i in range(n+1):
    print(i)
</code></pre>
<p>or putting it all together:</p>
<pre><code>def updown(n,m):
    nm = n-(n%m)
    for i in range(nm,-1,-m):
        print(i)
    for i in range(n+1):
        print(i)
</code></pre>
<p>From my own experience, it is rather <em>un-pythonic</em> to modify variables. Python aims to be a bit declarative: you use <code>for</code> loops if a variable can have different values to iterate over it.</p>
</div>
<div class="post-text" itemprop="text">
<p>You dont need any while loop,</p>
<p>You can use <code>range</code> like this,</p>
<pre><code>&gt;&gt;&gt; range(6,-2,-2) + range(1,8)
[6, 4, 2, 0, 1, 2, 3, 4, 5, 6, 7]
</code></pre>
<p>Function:</p>
<pre><code>def updown(n, m):
    return range(n -1, -1 * m, -2) + range(1,n+1)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>[6, 4, 2, 0, 1, 2, 3, 4, 5, 6, 7]
</code></pre>
<blockquote>
<p>range(start, stop[, step])</p>
<p>This is a versatile function to create lists containing arithmetic
  progressions. It is most often used in for loops. The arguments must
  be plain integers. If the step argument is omitted, it defaults to 1.
  If the start argument is omitted, it defaults to 0. The full form
  returns a list of plain integers [start, start + step, start + 2 *
  step, ...]. If step is positive, the last element is the largest start
  + i * step less than stop; if step is negative, the last element is the smallest start + i * step greater than stop. step must not be zero
  (or else ValueError is raised).</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>A recursive way to do the same </p>
<pre><code>def updown(n,m = 2):
    if n % 2 == 0:
        updownhelper(-n,n,m)
    else:
        updownhelper(-(n-1),n,m)

def updownhelper(a ,n,b = 2):
    if a &lt; 0:
        print(str(-a))
        updownhelper(a+b,n,b)
    elif a == n:
        print(a)
    elif a &gt;= 0:
        b = 1
        print(str(a))
        updownhelper(a+b,n,b)

updown(6)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure why the first printed value should be 6 so the solution might be wrong but if you want your output try:</p>
<pre><code>def updown(n,m):
    start = n
    #n -= 1
    # or if you want the first number that is divisible by m:
    n = m * (n // m)  # Floor division ignores decimal places so this is the first number divisible by m

    while n &gt;= m:
        print(n)
        n -= m

    while n &lt;= start:
        print(n)
        n += 1


updown(7, 2)
</code></pre>
<p>The problem with your solution was that you printed before you subtracted so the value was actually smaller than the one printed, so you printed a negative value in the second while loop. You need to reconsider the termination condition if you print and then change the value (what I have done). Or change the order of print and operation.</p>
</div>
<div class="post-text" itemprop="text">
<p>That hardcoded <code>7</code> in your example is the same parameter <code>n</code>, so you should be using that instead. And you can <em>"reset"</em> or begin the second loop from <code>0</code> (hardcoded).</p>
<pre><code>def updown(n,m):

    aux = n # Don't modify n

    while aux &gt; 1: # Use aux instead of n
                   # Also, `&gt;=` changed for `&gt;`
                   # so `0` is not counted in this loop
        print(aux - 1)
        aux = aux - m

    aux = 0 # aux reseted

    while aux &lt;= n: # See how n take place for 7
        print(aux)
        aux = aux + 1
</code></pre>
<p>But, for that specific task is more common to use the <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow">range function</a> and the <a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements" rel="nofollow">for loop</a> instead of the <code>while</code> loop and the using of manual counter. To give you an idea (and let you redefine your function as <em>"homework"</em>),...</p>
<p>Here is a <code>for</code> loop using the <code>range</code> function to print the numbers from <code>0</code> to <code>7</code> one by one:</p>
<pre><code>for i in range(8):
    print(i)
</code></pre>
<p>And here is a <code>for</code> loop using the <code>range</code> function to print the numbers from <code>6</code> to <code>2</code> two by two:</p>
<pre><code>for i in range(6, 0, -2):
    print(i)
</code></pre>
<p>Finally, you could use the <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow">chain method from itertools</a> to do the same action for each iteration of many loops, as your case, where you want to simply <em>print</em> a number in each loop. This way, you have not to repeat that <em>print</em> statement (or in a future, repeat that <em>processing</em> block).</p>
<p>Here is an example chaining the two <code>for</code> loops exposed:</p>
<pre><code>from itertools import chain

for i in chain(range(6, 2, -2), range(8)):
    print(i) # Processor block
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First of all you call <code>updown(7, 2)</code> it decreases to 1: <code>7, 5, 3, 1</code> then it runs again because statement <code>while 1 &gt;= 1</code> is <code>True</code> so it decreases one more time.</p>
<p>The second problem it that when you decrease it output <code>print(n - 1)</code> not <code>print(n)</code></p>
<p>I believe your solution is that.</p>
<pre><code>def updown(n, m):
    while n &gt;= m:
        print(n)
        n = n - m

    while n &lt;= 7:
        print(n)
        n = n + 1
</code></pre>
<p>However if you want to start with even number the solution is that:</p>
<pre><code>def updown(n, m):
    if n % 2 != 0:
        n = n - 1
    while n &gt;= m:
        print(n)
        n = n - m

    while n &lt;= 7:
        print(n)
        n = n + 1
</code></pre>
</div>
<span class="comment-copy">why should the first printed value be a 6? Shouldn't it be 7?</span>
<span class="comment-copy">I forgot that It should give every even number and decrease with 2 steps. Sorry</span>
<span class="comment-copy">Your starting code isn't recursive.  A recursive function is one that calls itself.  If this is an assignment for a programming course, then you should rethink your implementation.  Something like <a href="http://pastebin.com/raw/dXiNwgVh" rel="nofollow noreferrer">this</a> would be recursive (also a bit convoluted, I just wrote that up quickly as an example).</span>
<span class="comment-copy">Thank you for taking your time to explain! Appreciate it!</span>
<span class="comment-copy">Perhaps it is worth adding a link to the range function since documentation improves/modifies over time. +1 anyway.</span>
<span class="comment-copy">If I read the comments correctly, counting should start at the first <i>even</i> number, it is however possible that <code>n=6</code>...</span>
<span class="comment-copy">@Newbie_01 No problem. Don't forget to upvote any useful answer.</span>
<span class="comment-copy">@MSeifert he/she cant upvote, there is not enough reputation.</span>
