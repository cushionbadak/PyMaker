<div class="post-text" itemprop="text">
<p>I do mostly scientific related programming, which usually ends being very sequential. I'm trying to improve my coding skills and use OOP when I need to replicate similar structures or when passing many parameters through functions. So far I've being doing fine but lately I found a problem.</p>
<p>Imagine a chunk of information that I get by executing a query to a SQL database. Then I want to have these values in memory (to avoid multiple querys) and share them with different objects of a class.</p>
<p>I tried something like this:</p>
<pre><code>Class Data:
    def __init__(self, query):
        self.df = read_sql(query)

Class Object(Data):
    def __init__(self, params):
        super().__init__()
        # some processes with params 
    def methods():
        # some methods which uses values from Class Data
</code></pre>
<p>But every time that an Object() is created calls Data and the query is executed.
Is there any way to share the data without passing it as an argument? </p>
<p>Maybe Class Object inside Data?</p>
</div>
<div class="post-text" itemprop="text">
<p>What you are doing is not sharing but subclassing. If you want to reuse the same instance of <code>Data</code> with several instances of <code>Object</code> then this might make sense:</p>
<pre><code>Class Data:
    def __init__(self, query):
        self.df = read_sql(query)

Class Object:
    def __init__(self, data, params):
        self.data = data
        # some processes with params

    def methods():
        # some methods which uses values from Class Data
</code></pre>
<p>This is how you'd use these classes:</p>
<pre><code>data = Data(query)
obj1 = Object(data, params1)
obj2 = Object(data, params2)
</code></pre>
</div>
<span class="comment-copy">What if different queries are used? Are you saying you want to cache calls or operate at a class level instead of an instance?</span>
<span class="comment-copy">If you want to keep the chance to pass in the query per instance you should cache the result of the query and the query itself at the class level  then check if it is in the cache before you run the query, otherwise why take a query parameter at all?</span>
<span class="comment-copy">@PadraicCunningham I have similar data structures which require different querys, hence the parameter. How can I cache the results of the query?</span>
<span class="comment-copy">At a very basic level use a dict as a class attribute and store the query as the key and the return as a value. You could also implement an lru cache <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow noreferrer">docs.python.org/3/library/functools.html#functools.lru_cache</a> which would allow you to set  a size limit</span>
<span class="comment-copy">Thanks, I'll give it a try.</span>
