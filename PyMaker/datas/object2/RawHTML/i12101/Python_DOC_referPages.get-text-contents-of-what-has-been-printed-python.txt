<div class="post-text" itemprop="text">
<p>Lets say I print the following code</p>
<pre><code>print("""
THE RUSSIAN PEASANT ALGORITHM
-----------------------------
times two values x and y together


""")

x=int(raw_input("raw_input x: "))
y=int(raw_input("raw_input y: "))

print("x"+" "*(10)+"y")

while x!=1:
      x=x/2
      y=y*2

      print(str(x)+" "*10+str(y))
</code></pre>
<p>This prints the results of an algorithm, appropiately to the numbers that the user enterred.Now if I wished to get a variable containing all that had been outputted to the python console, how would I go about that?</p>
<p>EDIT: To clarify the reason I want the output if so basically I can clear the screen with "CLS" and reprint everything I've already printed but with the even x values crossed out as you are supposed to do with the russian peasant algorithm.</p>
</div>
<div class="post-text" itemprop="text">
<p>Its all about redefine your <code>stdout</code> to some inmemory stream.</p>
<p>You can use printing to <code>string</code>. See <a href="https://docs.python.org/3/library/io.html#io.TextIOBase" rel="nofollow">python2 docs - Reading and writing strings as file</a>, <a href="https://docs.python.org/2/library/stringio.html" rel="nofollow">python3 docs - Core tools for working with streams</a>.</p>
<p>Do what you what with that string even print it with regular <code>print</code>.</p>
<hr/>
<h2>Code <strong>Python2</strong>:</h2>
<pre><code>import sys
import StringIO
old_stdout = sys.stdout # Memorize the default stdout stream
sys.stdout = buffer = StringIO.StringIO()

print('123')
a = 'HeLLo WorLd!'
print(a)
# Call your algorithm function.
# etc...

sys.stdout = old_stdout # Put the old stream back in place

whatWasPrinted = buffer.getvalue() # Return a str containing the entire contents of the   buffer.
print(whatWasPrinted) # Why not to print it?
buffer.close()
</code></pre>
<hr/>
<h2>Code Python3:</h2>
<pre><code>import sys
import io

old_stdout = sys.stdout # Memorize the default stdout stream
sys.stdout = buffer = io.StringIO()

print('123')
a = 'HeLLo WorLd!'
print(a)
# Call your algorithm function.
# etc...

sys.stdout = old_stdout # Put the old stream back in place

whatWasPrinted = buffer.getvalue() # Return a str containing the entire contents of the buffer.
print(whatWasPrinted) # Why not to print it?
print(123)
</code></pre>
<hr/>
<p><code>whatWasPrinted</code> then can be changed, printed to regular stdout, etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you seem to want is to tee the output, if we make a minor tweak to the Tee implementation <a href="https://stackoverflow.com/a/616686/2141635">here</a> using a tempfile you can write to a TemporaryFile then get the output from that:</p>
<pre><code>import sys
from tempfile import TemporaryFile

class Tee(object):
    def __init__(self):
        self.file = TemporaryFile()
        self.stdout = sys.stdout
        sys.stdout = self

    def __del__(self):
        sys.stdout = self.stdout
        self.file.close()

    def write(self, data):
        self.file.write(data)
        self.file.write(data.rstrip()+"\n")
        self.stdout.flush()
t = Tee()
print("""
THE RUSSIAN PEASANT ALGORITHM
-----------------------------
times two values x and y together


""")

x = int(raw_input("raw_input x: "))
y = int(raw_input("raw_input y: "))    
print("x" + " " * (10) + "y")   
while x != 1:
    x = x / 2
    y = y * 2  
    print(str(x) + " " * 10 + str(y))   
t.file.seek(0)
print(t.file.read())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure why you want to do this, so this might not help you, but it's possible to get all values printed in console by executing your script from another script.</p>
<p>in a new file : </p>
<pre><code>import subprocess
linetorun = ["python", "yourscript.py"]
proc= subprocess.Popen(linetorun,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
printedtoconsole,errormessage=proc.communicate()
with open("output.txt","w+") as outfile:
    f.write(x)
</code></pre>
<p>should do the trick. 
communicate() with the options set in Popen will give you the console output.
This might need some adaptation for unix.</p>
</div>
<span class="comment-copy">I don't know of a way to do that however a way I can think of would be to define your own print function that logs everything that was printed into a list.</span>
<span class="comment-copy">Yeah but then you have to make a function for the raw_input and recreate a lot of the print functionality it seems like a lot of hassle surely there must be an easy way to return what has been outputted on the screen?</span>
<span class="comment-copy">So you basically want tee?</span>
<span class="comment-copy">Well I want a complete python script that I can run not a separate program or file</span>
<span class="comment-copy">why do you want the output?</span>
<span class="comment-copy">The documentation hasnt really helped with my problem</span>
<span class="comment-copy">@user2592835, check the link again, I've found something more relevant. See code as well.</span>
<span class="comment-copy">This won't work, you are going to get an error using  StringIO which you could see by just running the code.</span>
<span class="comment-copy">@Padraic Cunningham, It was tested in python 3.4 on my machine. Also tested it on <a href="https://repl.it/languages/python3" rel="nofollow noreferrer">repl.it</a> and <a href="http://codeforces.com/problemset/customtest" rel="nofollow noreferrer">Codeforces</a>. No errors. Could you please clarify what exactly are you talking about?</span>
<span class="comment-copy">The OP is not using python3, try your code using python2</span>
<span class="comment-copy">Traceback (most recent call last):   File "C:/Python27/DECISION/Section 1/Russian_Peasant_Algorithm.py", line 59, in &lt;module&gt;     print(t.file.read())   File "C:/Python27/DECISION/Section 1/Russian_Peasant_Algorithm.py", line 20, in write     self.file.write(data) IOError: [Errno 0] Error &gt;&gt;&gt;</span>
<span class="comment-copy">this doesn't seem to work</span>
<span class="comment-copy">That would be because you are using windoze, try it now</span>
