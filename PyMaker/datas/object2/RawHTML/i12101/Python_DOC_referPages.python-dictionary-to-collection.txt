<div class="post-text" itemprop="text">
<p>I have a file with 2 columns: </p>
<pre><code>Anzegem             Anzegem
Gijzelbrechtegem    Anzegem
Ingooigem           Anzegem
Aalst               Sint-Truiden
Aalter              Aalter
</code></pre>
<p>The first column is a town and the second column is the district of that town. </p>
<p>I made a dictionary of that file like this: </p>
<pre><code>def readTowns(text): 
    input = open(text, 'r')
    file = input.readlines()
    dict = {}
    verzameling = set()
    for line in file:
        tmp = line.split()
        dict[tmp[0]] = tmp[1]
    return dict
</code></pre>
<p>If I set a variable <code>'writeTowns' equal to readTowns(text)</code> and do <code>writeTown['Anzegem']</code>, I want to get a <code>collection of {'Anzegem', 'Gijzelbrechtegem', 'Ingooigem'}</code>.</p>
<p>Does anybody know how to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you can just create another function that can create appropriate data structure for what you need. Because, at the end you will end up writing code which basically manipulates the dictionary returned by <code>readTowns</code> to generate data as per your requirement. Why not keep the code clean and create another function for that. You Just create a name to list dictionary and you are all set.</p>
<pre><code>def writeTowns(text):
    input = open(text, 'r')
    file = input.readlines()
    dict = {}
    for line in file:
        tmp = line.split()
        dict[tmp[1]]  = dict.get(tmp[1]) or [] 
        dict.get(tmp[1]).append(tmp[0])
    return dict


writeTown = writeTowns('file.txt')
print writeTown['Anzegem']
</code></pre>
<p>And if you are concerned about reading the same file twice, you can do something like this as well,</p>
<pre><code>def readTowns(text): 
    input = open(text, 'r')
    file = input.readlines()
    dict2town = {}
    town2dict = {}
    for line in file:
        tmp = line.split()
        dict2town[tmp[0]] = tmp[1]
        town2dict[tmp[1]]  = town2dict.get(tmp[1]) or [] 
        town2dict.get(tmp[1]).append(tmp[0])
    return dict2town, town2dict

dict2town, town2dict = readTowns('file.txt')
print town2dict['Anzegem']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could do something like this, although, please have a look at @ubadub's answer, there are better ways to organise your data.</p>
<pre><code> [town for town, region in dic.items() if region == 'Anzegem']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It sounds like you want to make a dictionary where the keys are the districts and the values are a list of towns. 
A basic way to do this is:</p>
<pre><code>def readTowns(text): 
    with open(text, 'r') as f:
        file = input.readlines()
        my_dict = {}
        for line in file:
            tmp = line.split()
            if tmp[1] in dict:
                my_dict[tmp[1]].append(tmp[0])
            else:
                my_dict[tmp[1]] = [tmp[0]]
    return dict
</code></pre>
<p>The if/else blocks can also be achieved using python's defaultdict subclass (<a href="https://docs.python.org/2/library/collections.html#collections.defaultdict" rel="nofollow">docs</a> here) but I've used the if/else statements here for readability.  </p>
<p>Also some other points: the variables <code>dict</code> and <code>file</code> are python types so it is bad practice to overwrite these with your own local variable (notice I've changed <code>dict</code> to <code>my_dict</code> in the code above.   </p>
</div>
<div class="post-text" itemprop="text">
<p>If you build your dictionary as <code>{town: district}</code>, so the town is the key and the district is the value, you can't do this easily*, because a dictionary is not meant to be used in that way. Dictionaries allow you to easily find the values associated with a given key. So if you want to find all the towns in a district, you are better of building your dictionary as:</p>
<p><code>{district: [list_of_towns]}</code></p>
<p>So for example the district Anzegem would appear as <code>{'Anzegem': ['Anzegem', 'Gijzelbrechtegem', 'Ingooigem']}</code></p>
<p>And of course the value is your collection. </p>
<p>*you could probably do it by iterating through the entire dict and checking where your matches occur, but this isn't very efficient.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/7657457/finding-key-from-value-in-python-dictionary" title="finding key from value in python dictionary">stackoverflow.com/questions/7657457/â€¦</a></span>
<span class="comment-copy">You can only have one value for a given key, but that value <i>can</i> be a collection...</span>
<span class="comment-copy">Why would <code>Aalst</code> and <code>Aalter</code> not be included? When you say "collection", do you mean "<a href="https://docs.python.org/3/library/stdtypes.html#set" rel="nofollow noreferrer">set</a>"?</span>
<span class="comment-copy">You have not understood the concept of dicts yet. <code>writeTown['Anzegem']</code>returns the <i>values</i> associated to the <i>key</i> <code>'Anzegem'</code>. You are looking for the <i>keys</i> associated with the <i>value</i> <code>'Anzegem'</code></span>
