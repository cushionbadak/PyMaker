<div class="post-text" itemprop="text">
<p>I don't know if this is just a newbie mistake, but Python is not recognizing all of my arguments. I am using bash, so maybe this is the problem. I have a working argument called -vs and I am trying to make it detect a necessary integer after it, so the appropriate syntax is <code>program.py -vs 5</code>, or some integer. However, it does not recognize the "5". It does when I put the dash (-) next to it and make it start with a letter. How can I get Python to see this?</p>
<p>Here's a fragment of the code:</p>
<pre><code>elif arg == "-vs" or "--vertical-spacing":
        if int(sys.argv[argnum + 1]) &gt;= 0:
            vspacing = int(sys.argv[argnum + 1])
        else:
            print "Invalid Spacing: Less than zero (Ya can't have negative spacing, silly!)"

            sys.exit()
</code></pre>
<p>By the way, the argnum variable increases by one every time as I loop through these arguments. (I'm using a <code>for arg in sys.argv[1:]</code>. Do not worry, I start argnum as 0 and incrementing it is the first thing I do when looping, so it does not see the program path and/or name, or <code>sys.argv[0]</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's an example with argparse instead:</p>
<pre><code>if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument("-vs", "--vertical-spacing", type=int, dest="vertical_spacing", help="vertical spacing. must be &gt; 0")

    args = parser.parse_args()
    if not args.vertical_spacing:
      print "Invalid Spacing: Less than zero (Ya can't have negative spacing, silly!)"
      sys.exit()

    some_function(args.vertical_spacing)
</code></pre>
</div>
<span class="comment-copy">Can you please post the part of your python code that parses the command line args?</span>
<span class="comment-copy">Sure, let me modify my post.</span>
<span class="comment-copy">Done, refresh the page, I added my code and a better explanation.</span>
<span class="comment-copy">Thanks. Also have you considered using a standard argument parsing library like <code>argparse</code>, which will handle many edge cases for you <a href="https://docs.python.org/3/howto/argparse.html" rel="nofollow noreferrer">docs.python.org/3/howto/argparse.html</a> ?</span>
<span class="comment-copy">I may consider this, it seems much easier, although the standard library is pretty easy to get the hang of. If it does hand this sort of thing, it won't be hard to replace the standard calls. I will review this, thanks!</span>
<span class="comment-copy">Thanks for the example, this will make it much easier to implement this, instead of reading a million manual pages.</span>
