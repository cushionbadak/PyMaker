<div class="post-text" itemprop="text">
<p>To lead out I am aware this is a bad idea. Dictionaries are looking like a cleaner way of doing what I need to do but I'm looking for a place holder to hold things in piece while I figure out how to use dictionaries properly for what I need.</p>
<p>In the meantime I have about a dozen lists and I'm trying to set the list name to use with a variable.</p>
<p>So normally I'd use:</p>
<pre><code>Listname.Append("Text")
</code></pre>
<p>But on different iterations of a loop I want to be able to use a different list which is being split from a larger string.</p>
<p>Something like:</p>
<pre><code>x1 = []
x2 = []
x3 = []

for y in 1 to 3:
    "x"+y.append("string")
</code></pre>
<p>Again, I know this is a bad idea and I'm trying to get my head around dictionaries but this would be the equivalent of duct tape to hold things together while I do that.</p>
<p>I can't figure out a way to get this to work. It tells me that .append doesn't work with that (which I expected). I tried converting the whole thing with str() on a long shot but it of course told me you don't append to a string.</p>
<p>I get this is probably not something you want to do commonly and if I do manage it by IDE is going to yell at me for doing stupid things but is it possible in the first place?</p>
</div>
<div class="post-text" itemprop="text">
<p>Any answer to your question will be more difficult to understand than dictionaries themselves. Anyway, here it goes.</p>
<p>If your lists are global, they are stored in a dictionary returned by built-in function <code>globals()</code>. So you can fetch those lists from that dictionary and then append to them.</p>
<p>So you can do:</p>
<pre><code>x1 = []
x2 = []
x3 = []

for y in range(1, 4):
    x = globals()['x' + str(y)]
    x.append("string")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Put the variables into a dictionary. Lists are one of those objects that are passed by reference, because a list is a reference to a complex object. Therefore, if you put it in a dictionary, you can still refer to it as <code>x1</code>, but you can also refer to it as <code>d["x1"]</code>, so long as you don't delete it or reinitialize it using <code>x1 = []</code>.</p>
<pre><code>my_lists = {}
my_lists["x1"] = x1
my_lists["x2"] = x2
my_lists["x3"] = x3

for y in range(1,4):
    listname = "x" + str(y)
    my_lists[listname].append("string")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Dictionaries are indeed the far superior solution. However, if you <em>desperately</em> need a work-around, you could leverage <a href="https://docs.python.org/2/library/functions.html#locals" rel="nofollow noreferrer"><code>locals</code></a>:</p>
<pre><code>x1 = []
x2 = []
x3 = []

for y in 1 to 3:
    locals()["x"+str(y)].append("string")
</code></pre>
<p>This has the side benefit of being easily replaceable with a <code>dict</code> later, since you are actually using something <code>dict</code>-like.</p>
<p>To be honest, though, replacing with <code>dict</code> just <a href="https://stackoverflow.com/a/35664523/1394393">isn't that hard</a> in this case.</p>
<p>I can imagine some situations that would complicate the matter, though:</p>
<p>There is also a similar <a href="https://docs.python.org/2/library/functions.html#globals" rel="nofollow noreferrer"><code>globals</code></a> if the variables are in module scope and this is in a function.</p>
<p>If these are attributes on a class or an object, you can use <a href="https://docs.python.org/2/library/functions.html#getattr" rel="nofollow noreferrer"><code>getattr</code></a>:</p>
<pre><code>class X(object):
    x1 = []
    x2 = []
    x3 = []

for y in 1 to 3:
    getattr(X, "x"+str(y)).append("string")

class Z(object):
    def __init__(self):
        self.x1 = []
        self.x2 = []
        self.x3 = []

z = Z()
for y in 1 to 3:
    getattr(z, "x"+str(y)).append("string")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Dictionaries associate objects to other objects. They're not the worst thing to learn in Python.</p>
<pre><code>x = {}

for y in range(1, 4):
    if y not in x:
        # create array for entry y in x if it does not exist
        x[y] = []

    x[y].append('string')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The correct way to do that, as you know, is a <a href="https://docs.python.org/2/tutorial/datastructures.html#dictionaries" rel="nofollow"><em>dictionary</em></a>.</p>
<p>However, to do what you want to do, you could use <strong><a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow"><code>exec()</code></a></strong></p>
<pre><code>x1 = []
x2 = []
x3 = []

for y in range(1,3):
    exec("x"+str(y)+".append('string')")
</code></pre>
<p>It is important to state that this is <strong><em>not recommended</em></strong> , but is the answer for your question.</p>
</div>
<div class="post-text" itemprop="text">
<p>Like everyone else has said, dictionaries are what you want.  I suppose if you really wanted to use lists only, you could do it like this:</p>
<pre><code>x_lst = [[], [], []]

for i in range(3):
    x_lst[i].append('string')

x1, x2, x3 = x_lst[0], x_lst[1], x_lst[2]

In [52]: x1, x2, x3
Out[52]: (['string'], ['string'], ['string'])
</code></pre>
<p>But, this is much more confusing than just learning to use dictionaries, which are pretty easy to grasp.</p>
</div>
<span class="comment-copy">It will be easier to understand dictionaries compared to all the answers that will be posted for your question.</span>
<span class="comment-copy">I knew this was ugly but cheers guys duct tape applied. Now I'll have to learn to do things properly before something catches fire.</span>
<span class="comment-copy">Missing a <code>)</code> at the end.</span>
<span class="comment-copy"><i>To lead out I am aware this is a bad idea. Dictionaries are looking like a cleaner way of doing what I need to do but...</i></span>
<span class="comment-copy">@zondo, so this makes a good transition, right? Use dictionary with some lists, then transition over to dictionary only, as modules get refactored.</span>
<span class="comment-copy">I would use <code>eval</code>.</span>
<span class="comment-copy">Avoid dynamic code execution whenever possible. It's just asking for trouble.</span>
<span class="comment-copy">@jpmc26 could you explain the downvote?</span>
<span class="comment-copy">@jpmc26: He did say that it is <i><b>not recommended</b></i>.  He was simply answering the question how it was asked.</span>
<span class="comment-copy">I downvote nearly every answer that contains execution of code contained in a string. It is a <i>massively</i> bad idea; having 2000 lines of code is a better idea. Executing strings of code is fraught with perils of creating security vulnerabilities (SQL injection being the most well known example). <i>Just don't do it.</i> @zondo That's like saying it's okay to answer, "How can I cook my meal without an oven?" with, "Set your house on fire," even though a toaster and a microwave are available.</span>
