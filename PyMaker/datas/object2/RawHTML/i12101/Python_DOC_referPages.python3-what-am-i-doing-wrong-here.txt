<div class="post-text" itemprop="text">
<p>Started programming today. Really interested in getting a head start in my degree next year.</p>
<p>I'm using newboston to teach myself and it's going OK so far.
struggling with a real simple snippet of code though.</p>
<p>I want a message to come up saying "What is 1+1."
The user inputs an anwser and IF it's 2, print a correct message. If not, print incorrect.</p>
<pre><code>input ("What is 1 + 1\n")
if input is 2:
    print ("correct")
else:
    print("incorrect")
</code></pre>
<hr/>
<pre><code>C:\Python31\python.exe "C:/Users/JoeNa/Desktop/Python Study/Experimenting.py"
What is 1 + 1

incorrect

Process finished with exit code 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Write it as follows:</p>
<pre><code>result = input ("What is 1 + 1\n")
if int(result) == 2:
    print("correct")
else:
    print("incorrect")
</code></pre>
<p>If you want to handle the result from input(), you have to store it in a new variable.  After that, if you expect it to always be an integer, cast it using the int keyword.</p>
<p>Also, try not to use a variable name that is the same as the input() keyword.</p>
<p>Also, as an additional note, use == instead of is in this case scenario.  I would suggest reading up on the usage of the is keyword vs the equals operator.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>my_val = int(input("What is 1 + 1\n"))

if my_val == 2:
    print ("correct")
else:
    print("incorrect")
</code></pre>
<p><code>input</code> returns a string so you have to cast it to an <code>int</code>.</p>
<p>Also, don't name your variables after built-in keywords or functions in Python as you could override them and lose access to them when you want to use them later on in your code. Consider this: </p>
<pre><code>&gt;&gt;&gt; input = 'hello'
&gt;&gt;&gt; s = input('enter your name')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'str' object is not callable
&gt;&gt;&gt; 
</code></pre>
<p>You can't call the <code>input</code> function again in your program because you have set <code>input</code> to a string, that's why the Python interpreter brings up that error.</p>
<p>The <a href="http://zetcode.com/lang/python/keywords" rel="nofollow">ZetCode Python website</a> has a list of keywords in Python. </p>
<p><code>is</code> is used to compare objects by their identity, while <code>==</code> compares two objects by their values. You have to understand these as it could lead to complex errors when you interchange them.</p>
<p>Consider this:</p>
<pre><code>&gt;&gt;&gt; a = [1,2]
&gt;&gt;&gt; b = [1,2]
&gt;&gt;&gt; a is b
False
&gt;&gt;&gt; a == b
True

&gt;&gt;&gt; id(a)
140109265441288
&gt;&gt;&gt; id(b)
140109265454472
&gt;&gt;&gt; 
</code></pre>
<p><code>a</code> and <code>b</code> are two different objects so they are not the same by their identity but are equal by their values.</p>
</div>
<div class="post-text" itemprop="text">
<p>Several things:</p>
<ol>
<li>input() is a function which reads user input from the keyboard as string</li>
<li>you call input() but never save the value it returns to a variable</li>
<li>you compare with "is" instead of "==" (although these may be equivalent in some cases check out the differences and learn when to use which)</li>
<li>when comparing make sure you don't compare apples with oranges (string with int)</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>When you use <code>input ("What is 1 + 1\n")</code>, the user's input is stored as a String (Text). Therefore, you need to convert the String into a integer in order to compare it to another integer.</p>
<p>try the following:</p>
<pre><code>userInput = input ("What is 1 + 1\n")
if int(userInput) == 2 
    print("correct")
else:
    print("incorrect")
</code></pre>
<p><code>int(userInput)</code> will convert string into an integer</p>
</div>
<div class="post-text" itemprop="text">
<p>Here are a few tips, some of which are a matter of opinion:</p>
<pre><code>input ("What is 1 + 1\n")
</code></pre>
<p>Becomes:</p>
<pre><code>user_input = input("What is 1 + 1? ")
</code></pre>
<p>Where did <code>user_input</code> come from? I just made it up.  It is just a name which now refers to the answer entered by the user.  The <code>input()</code> function <em>returns</em> a string, which you must give a name (otherwise its a bit of a waste of time).  Don't use the name <code>input</code> though, that will replace the built-in <code>input()</code> function!  Personally I don't put a newline (\n) at the end of the question, but I always put a space.</p>
<p>So, <code>user_input</code> is of class <code>str</code> (a text string) whereas <code>2</code> is of class <code>int</code> (an integer).  You are trying to compare objects of different classes - usually that is not allowed.  However, you are not comparing the values, <code>is</code> compares <em>references</em>.  Usually (9 times out of 10) you want to find if values are equal, so use <code>==</code> instead.</p>
<pre><code>if input is 2:
    print ("correct")
else:
    print("incorrect")
</code></pre>
<p>Becomes:</p>
<pre><code>if int(user_input) == 2:
    print("correct")
else:
    print("incorrect")
</code></pre>
<p>Notice as well that I have paid attention to being consistent with things like spacing before parentheses.  This is just style, but is worth noting.  At some point look at <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow">PEP008</a>, which is the style guide for Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have multiple points of confusion here. Let's look at the docs for <a href="https://docs.python.org/3.5/library/functions.html?highlight=input#input" rel="nofollow noreferrer">input</a>:</p>
<blockquote>
<p>The function then reads a line from input, converts it to a string (stripping a trailing newline), and returns that.</p>
</blockquote>
<p>So, <code>input()</code> returns a string. You're calling the function in your code, but you're not actually storing the return value anywhere. Good variables are descriptive names. In your code you're looking for an <code>answer</code>, so that's a good choice. That makes the start of your code look like this:</p>
<pre><code>answer = input('What is 1+1?\n')
</code></pre>
<p>Now if you remember from the documentation, <code>input()</code> returns a <strong>string</strong>.</p>
<pre><code>'2'
"2"
'''2'''
</code></pre>
<p>These are all representations of strings.</p>
<pre><code>2
</code></pre>
<p>As others have mentioned, you can check the type of a variable or value by using the <code>type()</code> function:</p>
<pre><code>&gt;&gt;&gt; type(2)
&lt;class 'int'&gt;
&gt;&gt;&gt; type('2')
&lt;class 'str'&gt;
</code></pre>
<p>That is a number. If you try to compare a number to a string, they're not equal:</p>
<pre><code>&gt;&gt;&gt; 2 == '2'
False
</code></pre>
<p>So if we want to get a proper comparison, we'll need to either compare strings or convert the <code>answer</code> to a number. While <em>technically</em> either option works, since <code>1+1</code> is math and math is about numbers, it's probably better to convert it to a number:</p>
<pre><code>&gt;&gt;&gt; int('2') == 2
True
</code></pre>
<h1>Aside</h1>
<p>Currently you're using <code>is</code>. If you check the python documentation on <a href="https://docs.python.org/3/library/stdtypes.html#comparisons" rel="nofollow noreferrer">comparisons</a>, you'll see that <code>is</code> compares object identity. But what does that <em>mean</em>? You can find the identity of an object in Python by using the <code>id()</code> function. You were checking <code>if input is 2:</code>-- which *does** make sense in English, but not in python --and what does that actually check? Well, first off:</p>
<pre><code>&gt;&gt;&gt; input
&lt;built-in function input&gt;
</code></pre>
<p><code>input</code> is a function. So what you're checking is if the input function <em>is</em> the number <code>2</code> (not the <em>value</em> two, but the actual object). The id is pretty accidental and will probably change between runs of Python. Here's what mine reports:</p>
<pre><code>&gt;&gt;&gt; id(input)
140714075530368
&gt;&gt;&gt; id(2)
140714073129184
</code></pre>
<p>An interesting note - <a href="https://stackoverflow.com/questions/306313/is-operator-behaves-unexpectedly-with-integers#306353">CPython does some interesting things with small numbers</a>, so it's <em>possible</em> that <code>2 is 2</code> returns True, but that's not necessarily guaranteed. But this is:</p>
<pre><code>val = 2
other_val = val
val is other_val  # Will be true
</code></pre>
<h1>Putting it all together</h1>
<p>Well, now that we know what to do, here is what your program looks like:</p>
<pre><code>answer = input('What is 1+1?\n')
if int(answer) == 2:
    print('Correct!')
else:
    print('Incorrect')
</code></pre>
<p>What if someone provides an input that isn't a number, though? Depending on how robust you want your program, you can approach it one of two ways. The first, ensuring that the string is just digits:</p>
<pre><code>if answer.isdigit() and int(answer) == 2:
    print('Correct!')
</code></pre>
<p>Or, you can catch the exception that's raised:</p>
<pre><code>try:
    if int(answer) == 2:
        print('Correct!')
    else:
        print('Incorrect!')
except ValueError:
    print('***ERROR*** {!r} is not a number!'.format(answer))
</code></pre>
</div>
<span class="comment-copy">You need to assign the input: <code>input = input("What's 1 +1\n")</code> - Also convert it to <code>int</code> and use <code>==</code> instead of <code>is</code>.</span>
<span class="comment-copy">hint1: <code>type(input)</code> vs. <code>type(2)</code>. Hint 2: <code>a is b</code> vs. <code>a == b</code>. Hint 3: <code>input("What is 1 + 1\n")</code> vs. <code>my_input = input("What is 1 + 1\n")</code>.</span>
<span class="comment-copy">@MarounMaroun: Encouraging a newbie to shadow the built-in <code>input</code> function is probably not very helpful. ;)</span>
<span class="comment-copy">@PM2Ring I totally agree :)</span>
<span class="comment-copy">Wrote the answer quickly to help.  I've expanded the answer for future reference.</span>
<span class="comment-copy">Alternatively, <code>my_val = input("What is 1 + 1\n")</code> <code>if my_val == "2"</code> etc, which saves performing a conversion.</span>
<span class="comment-copy">yeah...i just guessed that he wanted to compare two integers, that's a common pitfall for many beginners in python</span>
<span class="comment-copy">Sure! I just find it fascinating that all the answers advocate converting the input string to int, rather than doing a string comparison. Of course, in a more complicated program you almost always want to convert number strings to actual numbers. BTW, consider breaking up your text into separate sentences rather than one big sentence.</span>
<span class="comment-copy">Thanks....edited</span>
