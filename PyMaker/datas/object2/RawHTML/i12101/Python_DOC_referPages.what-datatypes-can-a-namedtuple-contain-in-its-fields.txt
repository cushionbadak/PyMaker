<div class="post-text" itemprop="text">
<p>I've looked at the Python documentation here on <a href="https://docs.python.org/3.5/library/collections.html#collections.namedtuple" rel="nofollow">namedtuples</a> and I can't seem to figure out what the legal data types are that it can take. Or perhaps it's not directly obvious to me. </p>
<p>Is it safe to say that it can take <em>any</em> datatypes (e.g. int, float, string, tuple, list, dict, etc)? Are there any data types that cannot be inserted into a namedtuple</p>
<p>This question arose from my need to have a namedtuple that has 2 lists. Essentially what i'm trying to do is is something like this:</p>
<pre><code>from Collections import namedtuple

list1 = [23,45,12,67]
list2 = [76,34,56,23]

TwoLists = namedtuple("TwoLists", ['x','y'])
tulist = TwoLists(x=list1, y=list2)

type(tulist)
&lt;class '__main__.TwoLists'&gt;

type(tulist.x)
&lt;class 'list'&gt;

print(tulist.x)
[23,45,12,67]

print(tulist.y)
[76,34,56,23]
</code></pre>
<p>And this seems to work with at least with lists.</p>
<p>Some quick Googling didn't result in any examples, that's why i've added a code excerpt (from python's interactive mode) for any one else who tries to insert lists into a namedtuple and needs an example.     </p>
</div>
<div class="post-text" itemprop="text">
<p>Here is my attempt to answer based upon the documentation:</p>
<p>"Named tuples assign meaning to each position in a tuple and allow for more readable, self-documenting code. They can be used wherever regular tuples are used, and they add the ability to access fields by name instead of position index." from <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow">https://docs.python.org/3/library/collections.html#collections.namedtuple</a></p>
<p>"The items of a tuple are <strong>arbitrary Python objects</strong>" from
<a href="https://docs.python.org/3/reference/datamodel.html#objects-values-and-types" rel="nofollow">https://docs.python.org/3/reference/datamodel.html#objects-values-and-types</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If not explicitly specified, <em>any</em> Python object is valid.</p>
</div>
<div class="post-text" itemprop="text">
<p>Any python object is valid.  If you want to force specific datatypes to the namedtuple, you can create a class that inherits from namedtuple with specified data types as follows (taken from <a href="https://alysivji.github.io/namedtuple-type-hints.html" rel="nofollow noreferrer">https://alysivji.github.io/namedtuple-type-hints.html</a>):</p>
<p>edit: note the below only works in python 3.6+</p>
<pre><code>from typing import List, NamedTuple
class EmployeeImproved(NamedTuple):
    name: str
    age: int
    title: str
    department: str
    job_description: List
emma = EmployeeImproved('Emma Johnson',
                        28,
                        'Front-end Developer',
                        'Technology',
                        ['build React components',
                         'test front-end using Selenium',
                         'mentor junior developers'])
</code></pre>
<p>edit: in 3.5, you can do this:</p>
<pre><code>import typing
EmployeeImproved = typing.NamedTuple("EmployeeImproved",[("name",str),("age",int),("title",str),("department",str),("job_description",List)])
</code></pre>
<p>.. and in 3.4 and earlier, I believe you are out of luck (someone correct me if I am wrong)</p>
</div>
<span class="comment-copy">How would one explicitly specify datatypes for <code>namedtuple</code> fields?</span>
