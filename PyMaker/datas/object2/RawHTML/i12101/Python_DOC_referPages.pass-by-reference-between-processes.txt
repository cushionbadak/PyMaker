<div class="post-text" itemprop="text">
<p>I have an object:</p>
<pre><code>from multiprocessing import Pool
import time

class ASYNC(object):
    def __init__(self, THREADS=[]):
        print('do')
        pool = Pool(processes=len(THREADS))
        self.THREAD_POOL = {}
        thread_index = 0
        for thread_ in THREADS:
            self.THREAD_POOL[thread_index] = {
                'thread': thread_['thread'],
                'args': thread_['args'],
                'callback': thread_['callback']
            }
            self.THREAD_POOL[thread_index]['running'] = True
            pool.apply_async(self.run, [thread_index], callback=thread_['callback'])
            thread_index += 1
    def run(self, thread_index):
        print('enter')
        while(self.THREAD_POOL[thread_index]['running']):
            print("loop")
            self.THREAD_POOL[thread_index]['thread'](self.THREAD_POOL[thread_index])#HERE
            time.sleep(1)
        self.THREAD_POOL[thread_index]['running'] = False
    def wait_for_finish(self):
        for pool in self.THREAD_POOL:
            while(self.THREAD_POOL[pool]['running']):
                print("sleep" + str(self.THREAD_POOL[pool]['running']))
                time.sleep(1)
def x(pool):#HERE
    print(str(pool))
    if(pool['args'][0] &gt;= 15):
        pool['running'] = False
    pool['args'][0] += 1


def y(str):
    print("done")

A = ASYNC([{'thread': x, 'args':[10], 'callback':y}])

print("start")
A.wait_for_finish()
</code></pre>
<p>I am having issues passing <code>self.THREAD_POOL[thread_index]</code> as reference to <code>def x(pool)</code></p>
<p>I need <code>x(pool)</code> to change the value of the variable in the object.</p>
<p>If i check the value in wait_for_finish then the object is not changed.</p>
<p>Passing object by reference: (tested and works properly)</p>
<pre><code>x = {"1":"one", "2","two"}
def test(a):
     a["1"] = "ONE"
print(x["1"])#outputs ONE as expected
</code></pre>
<p>this means that dictionaries in python are passed by reference; So, why in my code is it passing by value?</p>
<hr/>
<h2>SOLUTION</h2>
<p>@DevShark</p>
<pre><code>from multiprocessing import Process, Value, Array

def f(n, a):
    n.value = 3.1415927
    for i in range(len(a)):
        a[i] = -a[i]

if __name__ == '__main__':
    num = Value('d', 0.0)
    arr = Array('i', range(10))

    p = Process(target=f, args=(num, arr))
    p.start()
    p.join()

    print num.value
    print arr[:]
</code></pre>
<p>according to the documentation, you should not do this unless absolutely needed. I decided not to use this. <a href="https://docs.python.org/2/library/multiprocessing.html#multiprocessing.JoinableQueue" rel="nofollow">https://docs.python.org/2/library/multiprocessing.html#multiprocessing.JoinableQueue</a></p>
<h2>instead i will be doing:</h2>
<pre><code>from multiprocessing import Pool
import time

class ASYNC(object):
    def __init__(self, THREADS=[]):
        print('do')
        pool = Pool(processes=len(THREADS))
        self.THREAD_POOL = {}
        thread_index = 0
        for thread_ in THREADS:
            self.THREAD_POOL[thread_index] = {
                'thread': thread_['thread'],
                'args': thread_['args'],
                'callback': thread_['callback']
            }
            self.THREAD_POOL[thread_index]['running'] = True
            pool.apply_async(self.run, [thread_index], callback=thread_['callback'])
            thread_index += 1
    def run(self, thread_index):
        print('enter')
        while(self.THREAD_POOL[thread_index]['running']):
            print("loop")
            self.THREAD_POOL[thread_index]['thread'](thread_index)
            time.sleep(1)
        self.THREAD_POOL[thread_index]['running'] = False
    def wait_for_finish(self):
        for pool in self.THREAD_POOL:
            while(self.THREAD_POOL[pool]['running']):
                print("sleep" + str(self.THREAD_POOL[pool]['running']))
                time.sleep(1)
def x(index):
    global A
    A.THREAD_POOL[index]
    print(str(pool))
    if(pool['args'][0] &gt;= 15):
        pool['running'] = False
    pool['args'][0] += 1


def y(str):
    print("done")

A = ASYNC([{'thread': x, 'args':[10], 'callback':y}])

print("start")
A.wait_for_finish()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are running your function in a different process. That's the way multiprocessing works. Therefore it does not matter what you do with the object, modifications will not be seen in other processes.</p>
<p>To share data between process, see <a href="https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes" rel="nofollow">the doc</a> as someone noted in a comment.</p>
<blockquote>
<p>Data can be stored in a shared memory map using Value or Array.</p>
</blockquote>
</div>
<span class="comment-copy">Why the down vote? so i can update question.</span>
<span class="comment-copy">Could this be because i am using multiprocessing? Should i just make my A object a global and access the variable i need inside the method?</span>
<span class="comment-copy">Didn't downvote, but the code seems to be rather "complicated". Can you simplify the code so that it still shows the problematic behavior?</span>
<span class="comment-copy">I think this problem is specific to this code, and i don't know why.</span>
<span class="comment-copy">It's definitely because of multiprocessing. Your <code>x</code> function will be executed in a separate process, so changing <code>pool</code> there won't affect the parent process, you should have a look at the <a href="https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes" rel="nofollow noreferrer">docs about sharing state between processes</a>. Also, are you sure what you're trying to do isn't already provided by the <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer">concurrent.futures</a> module?</span>
<span class="comment-copy">your link is broken</span>
<span class="comment-copy">Thanks for highlighting this. @VincentSavard just fixed it.</span>
