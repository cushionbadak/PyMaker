<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2158395/flatten-an-irregular-list-of-lists">Flatten an irregular list of lists</a>
<span class="question-originals-answer-count">
                    42 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/952914/how-to-make-a-flat-list-out-of-list-of-lists">How to make a flat list out of list of lists?</a>
<span class="question-originals-answer-count">
                    38 answers
                </span>
</li>
</ul>
</div>
<p>Here is the code</p>
<pre><code>def list_all(obj):
    """
    Return a list of all non-list elements in obj or obj's sublists, if obj is a list. Otherwise, return a list containing obj.

    @param list|object obj: object to list
    @rtype: list

    &gt;&gt;&gt; obj = 17
    &gt;&gt;&gt; list_all(obj)
    [17]
    &gt;&gt;&gt; obj = [1, 2, 3, 4]
    &gt;&gt;&gt; list_all(obj)
    [1, 2, 3, 4]
    &gt;&gt;&gt; obj = [[1, 2, [3, 4], 5], 6]
    &gt;&gt;&gt; all([x in list_all(obj) for x in [1, 2, 3, 4, 5, 6]])
    True
    &gt;&gt;&gt; all ([x in [1, 2, 3, 4, 5, 6] for x in list_all(obj)])
    True
    """
    if not isinstance(obj, list):
        return obj
    else:
        return [list_all(x) for x in obj]
</code></pre>
<p>When I tried <code>print(list_all([[2,3],[4,5]]))</code>, it prints out the exactly same input, meaning the code does nothing at all. I think the problem is the <code>[]</code> bracket but I can't think of a way to eliminate. Could someone help?</p>
</div>
<div class="post-text" itemprop="text">
<p>This should help:</p>
<pre><code>def list_all(obj):
    if not isinstance(obj, list):
        return [obj]
    else:
        return [item for sublist in obj for item in list_all(sublist)]        

print(list_all(1))                   # Scalar
print(list_all([[2,3],[4,5]]))       # One level
print(list_all([[2,[3,2]],[4,5]]))   # Two levels
</code></pre>
<p>Output:</p>
<pre><code> [1]
 [2, 3, 4, 5]
 [2, 3, 2, 4, 5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Rather than constructing a bunch of intermediate <code>list</code>s, consider using a generator function. Particularly in Python 3.3+, the code is very simple:</p>
<pre><code>def flatten_lists(items):
    if isinstance(items, list):
        for x in items:
            yield from flatten_lists(x)
    else:
        yield items
</code></pre>
<p>If you need the ultimate result to be a <code>list</code>, either you let callers wrap in <code>list()</code> themselves, or you define a wrapper to call the generator and convert it to a <code>list</code> for them:</p>
<pre><code>def list_all(items):
    return list(flatten_lists(items))
</code></pre>
<p>It dramatically reduces the allocator churn involved in creating and disposing of all the intermediate <code>list</code>s compared to non-generator based solutions.</p>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; list_all([1, [2, [3, [4, 5], 6]]])
[1, 2, 3, 4, 5, 6]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Something like this, sorry not tested but is trivial ....</p>
<pre><code>def list_all(obj):

    result= []
    if not isinstance(obj, list):
        result.append(obj)
    else:
        for x in obj:
            result += list_all( x )
    return result
</code></pre>
</div>
<span class="comment-copy">I can't see your code doesn't work , Please be more specific!</span>
<span class="comment-copy">Just edited, sorry about the confusion</span>
<span class="comment-copy">What are you trying to do? To flatten the list of lists?</span>
<span class="comment-copy">Make a nested list into a single list. i.e. [[1, 2, [3, 4], 5], 6] -&gt; [1,2,3,4,5,6]</span>
<span class="comment-copy">@DavidZemens That only works for a single level, the OP needs a recursive solution</span>
<span class="comment-copy">That flattens one layer of nesting, and doesn't handle the case where the top level list has some scalar values and some sub-lists. It's not a meaningful improvement on the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>flatten</code> recipe from the <code>itertools</code> documentation</a>; the only difference is that it returns scalars unmodified.</span>
<span class="comment-copy">@ShadowRanger I disagree. The example already shows two levels of nesting.</span>
<span class="comment-copy">mtk99, I don't understand about the downvote. Looks fine for me, I going to vote up your solution. If it is wrong, people should explaing here.</span>
<span class="comment-copy">@mtk99: Your original post (not shown in edit history because no votes or comments had been made, but still cached in my browser on another tab) had the comprehension as <code>return [item for sublist in obj for item in sublist]</code>, with no recursive <code>list_all</code> call, and the only example was running on <code>[[2,3],[4,5]]</code> which didn't display non-uniform nesting. That's what I was objecting to; you changed it, so it now works, but you know as well as I do what I was commenting on.</span>
<span class="comment-copy">@ShadowRanger Your comment came several minutes after my final change. No worries this is not a competition</span>
