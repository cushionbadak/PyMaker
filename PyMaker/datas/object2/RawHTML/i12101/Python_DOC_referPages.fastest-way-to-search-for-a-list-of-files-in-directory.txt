<div class="post-text" itemprop="text">
<p>Given a list of file names, I want to create the full path for these files if they exist in a given directory or it's sub-directories. Right now I use this code</p>
<pre><code>def construct_path(file_list, directory):
    file_path_list = []
    for name in file_list:
        for dir, subdir, filenames in os.walk(directory):
            if name in filenames:
                file_path_list.append(os.path.join(dir, name))

    return file_path_list
</code></pre>
<p>So here the directory is being crawled for each file in the list. Is there a faster/better way to do it?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can remove the loop over the <code>file_list</code> and remove found files from this list, so you can return the results once you have found all your files:</p>
<pre><code>def construct_path(file_list, directory):
    file_path_list = []
    for dir, subdir, files in os.walk(directory):
        for name in files:
            if name in file_list:
                file_path_list.append(os.path.join(dir, name))
                file_list.remove(name)
            if (len(file_list)==0): return file_path_list
    return file_path_list
</code></pre>
</div>
<span class="comment-copy">Reversing the order of the loops would probably do it. And maybe removing found names from <code>file_list</code> might help. Early exit if you find them all, too.</span>
<span class="comment-copy">Look into this stuff, it uses native calls <a href="https://docs.python.org/3/library/os.html#os.scandir" rel="nofollow noreferrer">docs.python.org/3/library/os.html#os.scandir</a></span>
<span class="comment-copy">This still crawls directory for each file</span>
<span class="comment-copy">Yes, but it does it only once, and you should be able to return earlier if you have found all the files before crawling all files.</span>
<span class="comment-copy">Although it may seem just a swap of two loops, <code>os.walk</code> requires disk I/O, while <code>for name in files</code> occurs in memory, which is much faster.  That's why there's a speed gain in doing <code>os.walk</code> only once.</span>
