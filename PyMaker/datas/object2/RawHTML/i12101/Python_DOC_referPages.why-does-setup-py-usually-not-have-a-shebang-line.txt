<div class="post-text" itemprop="text">
<p>Looking at a random selection of well-known Python packages, why is there a general trend to not include a <code>#!/usr/bin/env python</code> line at the top of <code>setup.py</code>? I know that the usual recommended way of interacting with the file is something like:</p>
<pre><code>python setup.py install
</code></pre>
<p>rather than</p>
<pre><code>./setup.py install
</code></pre>
<p>but is there a good reason for this?</p>
<p>These packages do not include a shebang: <a href="https://github.com/pytest-dev/pytest/blob/master/setup.py" rel="noreferrer">pytest</a>, <a href="https://github.com/lxml/lxml/blob/master/setup.py" rel="noreferrer">lxml</a>, <a href="https://bitbucket.org/gutworth/six/src/default/setup.py" rel="noreferrer">six</a>, <a href="https://github.com/pypa/virtualenv/blob/develop/setup.py" rel="noreferrer">virtualenv</a>, <a href="https://github.com/pypa/pip/blob/develop/setup.py" rel="noreferrer">pip</a> </p>
<p>But these do: <a href="https://github.com/kennethreitz/requests/blob/master/setup.py" rel="noreferrer">requests</a>, <a href="https://github.com/simplejson/simplejson/blob/master/setup.py" rel="noreferrer">simplejson</a>, <a href="https://bitbucket.org/pypa/setuptools/src/default/setup.py" rel="noreferrer">setuptools</a></p>
</div>
<div class="post-text" itemprop="text">
<p><code>setup.py</code> is going to do the installation for the Python interpreter you are running it with and it's library path. A shebang would define that interpreter and that is not desired by the developer.</p>
<p>Even if you have a <code>setup.py</code> with a shebang, you should still run the file with the interpreter before it. It prevents you from questions like "Where the hack is the package gone!?"</p>
</div>
<div class="post-text" itemprop="text">
<p>In this setting, the shebang offers few benefits, and a big drawback:</p>
<ul>
<li><p>The shebang is useful for reasons that are irrelevant here:</p>
<ul>
<li>It eases using a script repeatedly (less typing)</li>
<li>It clarifies how/what a script will do when looking at the source.</li>
</ul></li>
<li><p>The shebang necessarily determines the interpreter used to run it. I've written <code>setup.py</code> scripts which I've tested as <code>python setup.py install</code> and <code>python3 setup.py install</code>; in these cases, I simply don't know what to put in the shebang.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Because python packages must work on Windows platform too.
<code>python setup.py install</code> is universal command</p>
</div>
<div class="post-text" itemprop="text">
<p>In my experience, <code>sh</code> in various distributions are almost always located in <code>/bin</code>, or at least in a folder symlinked to <code>/bin</code>. And they almost always follow a same standard. So using <code>#!/bin/sh</code> works in almost all cases, except for on Windows machine, of course. That's something totally different.</p>
<p>Python, on the other hand, is a bit messy on this department. First, not all distributions have python binary stored or symlinked to <code>/bin/python</code>, for example Ubuntu still only have binary of python in <code>/usr/bin/python</code>. On the other hand, even for those which have <code>python</code> in <code>/bin</code>, on some OS, like Fedora and OS X, <code>/bin/python</code> means Python2, while on others, like Arch linux, <code>/bin/python</code> means Python3. Considering Python2 and Python3 codes are not entirely compatible, if using <code>#!/bin/python</code> and run the script with</p>
<pre><code>./setup.py
</code></pre>
<p>it could cause issues if <code>python3</code> was used as interpreter on your machine but really <code>python2</code> was meant by the script author.</p>
</div>
<span class="comment-copy">The <code>#!</code> line does not hurt since it is a comment. People probably are lazy.</span>
<span class="comment-copy">Personally, I often forget about it (not just for <code>setup.py</code>, but for other scripts too)</span>
<span class="comment-copy">The shebang does not hurt on any platform. The argument that is has to run on Windows is valid, but it does not make any difference to have that line.</span>
<span class="comment-copy">The shebang won't avoid setup.py to work in windows so I don't see how this answer the question.</span>
<span class="comment-copy">After reading this, I looked at the <a href="https://docs.python.org/3/using/windows.html#shebang-lines" rel="nofollow noreferrer">docs</a> and found that actually <code>/usr/bin/env</code> is portable even to Windows.</span>
<span class="comment-copy">That would be great @erip. However, I think some people do not use the launcher - for example I read that it does not come with Anaconda installs.</span>
<span class="comment-copy">You shouldn't expect to find a <code>/bin/python</code> on Ubuntu.</span>
<span class="comment-copy">@KlausD. Changed accordingly, thanks.</span>
