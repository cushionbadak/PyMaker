<div class="post-text" itemprop="text">
<p>I'm teaching myself Python when I run into the <code>__rsub__</code> method. While I can find <a href="https://docs.python.org/3/reference/datamodel.html#object.__rsub__" rel="nofollow noreferrer">explanation on the method in the official documentation</a>:</p>
<blockquote>
<p>These methods are called to implement the binary arithmetic operations (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>, <code>divmod()</code>, <code>pow()</code>, <code>**</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&amp;</code>, <code>^</code>, <code>|</code>) with reflected (swapped) operands. These functions are only called if the left operand does not support the corresponding operation and the operands are of different types. For instance, to evaluate the expression <code>x - y</code>, where <code>y</code> is an instance of a class that has an <code>__rsub__()</code> method, <code>y.__rsub__(x)</code> is called if <code>x.__sub__(y)</code> returns <code>NotImplemented</code>.</p>
</blockquote>
<p>I can't picture why the method is necessary and how exactly it is used in reality.</p>
<p>Would you kindly give me a typical environment where the method is useful?</p>
</div>
<div class="post-text" itemprop="text">
<p>Basic example. You write your own <code>int</code>-like class:</p>
<pre><code>class FooInt:
    ... other stuff elided ...

    def __sub__(self, other):
        if isinstance(other, FooInt):
            return self.__class__(self.intvalue - other.intvalue)
        elif isinstance(other, int):
            return self.__class__(self.intvalue - other)
        else:
            return NotImplemented
</code></pre>
<p>Now you have code that does:</p>
<pre><code>FooInt(123) - 456
</code></pre>
<p>This works fine; Python sees <code>FooInt</code> on the left side, sees it has <code>__sub__</code>, and calls <code>FooInt.__sub__(FooInt(123), 456)</code> which returns without error, and we're good.</p>
<p>Next we see:</p>
<pre><code>123 - FooInt(456)
</code></pre>
<p>Python tries calling <code>int.__sub__(123, FooInt(456))</code>, but <code>int</code> has no idea how to handle a <code>FooInt</code>, and returns <code>NotImplemented</code>; it has no idea that <code>intvalue</code> has a value it can use for this purpose. At this point, Python can't just call <code>FooInt.__sub__(FooInt(456), 123)</code> because it can't assume subtraction is commutative (and in fact, as in most numerical systems, subtraction is not commutative in this case, you can't just swap the right and left sides of the operator and get the correct result). This is why <code>__rsub__</code> exists; it lets you check the other class for a means of handling the operation while telling it two things:</p>
<ol>
<li>It's on the right side of the binary operator (allowing it to handle commutativity correctly)</li>
<li>The item on the left side did not know how to handle the operation, so this is the last chance to get it right</li>
</ol>
<p>The second point is also very important. When implementing <code>__xxx__</code> (the left hand operator) you want to be very conservative on the types you recognize. If you don't know for a fact you're working with a known concrete type with a known correct handler, you shouldn't try to handle unknown types; the other type might know how to do the operation correctly, so you return <code>NotImplemented</code> and let the other side handle it. When you're implementing <code>__rxxx__</code>, you're the last chance; the other guy didn't know what to do, so you should be liberal in what you accept and do your best if you have any means of handling it. You can see this in action in the Python docs on <a href="https://docs.python.org/3/library/numbers.html#implementing-the-arithmetic-operations" rel="nofollow">Implementing the arithmetic operations</a>; the <code>__xxx__</code> operations check for concrete types (for <code>Fraction</code>, it checks for <code>Fraction</code>, <code>int</code>, <code>float</code>, and <code>complex</code>), while the <code>__rxxx__</code> operators check for general interfaces (<code>numbers.Integral</code>, <code>numbers.Rational</code>, <code>numbers.Real</code>, etc.).</p>
<p>I've glossed over one point that is relatively important: <a href="https://docs.python.org/3/reference/datamodel.html#object.__radd__" rel="nofollow">If the class on the right side is a subclass of the class on the left, it has its reflected <code>__rxxx__</code> method called <em>first</em></a>; the assumption is that the subclass will have more information to correctly determine what to do, so it's given the first stab at performing the operation.</p>
</div>
<span class="comment-copy">e.g. you want to implement a <code>-</code> for your type that works with integers, and you want it to work whether the int is on the left or right, and you can't change <code>-</code> implementation for int</span>
