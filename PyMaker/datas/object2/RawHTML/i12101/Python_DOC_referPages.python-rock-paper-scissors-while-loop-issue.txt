<div class="post-text" itemprop="text">
<p>I'm having an issue with my programming of Rock, Paper, Scissors for Python. My issue occurs when there is a tie. When there is a tie, my program is supposed to going into a while loop within the if statement of the tie and reask the player the same question, rock, paper or scissors again until it breaks out of the tie. I have attached the link to the image of the issue:</p>
<p><img alt="" src="https://i.imgur.com/GNKJiNY.png?2"/></p>
<p>In Round 5: you can see the issue.</p>
<p>I am taking an intro to programming class so I'm still a beginner and I do not know what I am doing wrong.</p>
<h1>A Python program for the Rock, Paper, Scissors game.</h1>
<pre><code>import random

def rock_paper_scissors():
playerscore = 0
computerscore = 0
rounds = input('\nHow many points does it take to win?: ')
count = 1
while playerscore or computerscore != int(rounds):
    print('\n********************* ROUND #',count,'*********************')
    player = input('\nPick your throw: [r]ock, [p]aper, or [s]cissors?: ')
    computerthrow = random.randint(0,2)
    if (computerthrow == 0):
        computer = "rock"
        computer = 'r'
    elif (computerthrow == 1):
        computer = "paper"
        computer = 'p'
    elif (computerthrow == 2):
        computer = "scissors"
        computer = 's'
    if (player == computer):
        print('Tie!')
        while (player == computer):
            player = input('\nPick your throw: [r]ock, [p]aper, or [s]cissors?: ')
            computerthrow = random.randint(0,2)
            if (computerthrow == 0):
                computer = "rock"
                computer = 'r'
            elif (computerthrow == 1):
                computer = "paper"
                computer = 'p'
            elif (computerthrow == 2):
                computer = "scissors"
                computer = 's'      
            print(computer)
    elif (player == 'r'):
        if (computer == "p"):
            print('Computer threw paper, you lose!')
            computerscore=computerscore+1
        else:
            print('Computer threw scissors, you win!')
            playerscore = playerscore+1
        #count = count + 1
    elif (player == 'p'):
        if (computer == "r"):
            print('Computer threw rock, you win!')
            playerscore = playerscore+1
        else:
            print('Computer threw scissors, you lose!')
            computerscore=computerscore+1
        #count = count + 1
    elif (player == 's'):
        if (computer == "p"):
            print('Computer threw paper, you win!')
            playerscore = playerscore+1
        else:
            print('Computer threw rock, you lose!')
            computerscore=computerscore+1
    count = count + 1
    print('\nYour score: ',playerscore)
    print('Computer''s score: ',computerscore,'\n')
print('********************* GAME OVER ********************')

def main(): 
print('ROCK PAPER SCISSORS in Python')
print()
print('Rules: 1) Rock wins over Scissors.')
print('       2) Scissors wins over Paper.')
print('       3) Paper wins over Rock.')

rock_paper_scissors()

main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your problem comes from the way you have structured your control statements (if, elif, else). When you enter your tie while loop, you are constantly running it until someone wins and that looks like it works no problem. The issue is that once you do that, the python interpreter skips all elif and else statements in that control block (if I say if x == 3: do this else: do that) I don't want python to follow through with the else condition if x does indeed == 3). Sorry if that is confusing, long story short you need to make sure that even when your tie block gets executed you still move on to scoring the round and starting a new one. The easy way to do that is just change the elif (player == "r") to an if statement. That way the interpreter treats the scoring control sequence as its own block and it will always be executed once you assign the throws each player makes.</p>
<h1>Example:</h1>
<pre><code>def f(x):
    if (x == 0):
        print("1")
        x += 1
    elif (x == 1):
        print("2")
    print("Done!")

def g(x):
   if (x == 0):
       print("1")
       x += 1
   if (x == 1):
       print("2")
   print("Done!")
</code></pre>
<p>if you call f(0):
Python will print out 1 and then Done!</p>
<p>if you call g(0):
Python will print out 1 then 2 then Done! </p>
</div>
<div class="post-text" itemprop="text">
<p>Your immediate problem is that you have the handling code for a tie in the same <code>if/elif</code> chain as the handling for the other scoring. </p>
<p>You say something like:</p>
<pre><code>if tied
    stuff
elif player == r
    ...
</code></pre>
<p>As a result, when there is a tie the game <em>correctly</em> loops until there is no tie. But then is <strong>skips over</strong> the code that updates the score, because that is how if/elif/else works!</p>
<p>An immediate fix would be to break that if/elif chain, and put the tie-handling into a separate if block:</p>
<pre><code>if tied:
    loop until not tied

# now do scoring
if player == 'r':
     ... etc
</code></pre>
<hr/>
<p>With that said, let me add a few more things:</p>
<ol>
<li><p>You are assigning two values to the same variable, in sequence:</p>
<pre><code>computer = 'rock'
computer = 'r'
</code></pre>
<p>This doesn't do anything, because the second overwrites the first. You should just delete the first line in each of those pairs.</p></li>
<li><p>You should probably write a function that repeatedly asks the user to pick one, until it gets either rock, paper, or scissors. Use a while loop.</p></li>
<li><p>There is a function in the <a href="https://docs.python.org/3/library/random.html?highlight=choice#module-random" rel="nofollow"><code>random</code> module</a> that will pick an item from a list, tuple, or string and return it. You can use that to make the computer pick r,p,s directly. </p></li>
<li><p>You can simplify your code by determining the outcome in advance. Say you have the computer pick first. Then if the computer picks 'r', you know 'p' is a win and 's' is a lose. Store the win/lose picks in a pair of variables, and all your testing can be boiled down to one test:</p>
<pre><code>computer = computer_pick()
if computer == 'r':
    winner = 'p'
    computer = 'rock'
elif computer == 'p':
...

player = player_pick()
if tied ...

if player == winner:
    print("Computer picked", computer, "- you win!")
else:
   ...
</code></pre></li>
</ol>
</div>
<span class="comment-copy"><a href="http://imgur.com/GNKJiNY" rel="nofollow noreferrer">imgur.com/GNKJiNY</a> sorry, here is the link to the issue</span>
<span class="comment-copy">So should I just get rid of my while loop inside the tie block as a whole? I'm only confused by what you said because I'm really new to programming and it's kind of confusing for me to comprehend. I understand that the issue lies in the fact that the while loop has no exit. Is there anyway I could salvage and edit the while loop within the tie block to make it stay? Thanks for your help already!</span>
<span class="comment-copy">JK LOL. You are so helpful with your explanation. I'm bad at reading.</span>
<span class="comment-copy">I have an issue with my while loop still. When I submit a response of r, s or p, it doesn't submit whether I lost, won or tied. It looks like round 5 in the picture in my original post. Do you see anything wrong with my loop?</span>
<span class="comment-copy">Did you edit your code? It looks the same.</span>
<span class="comment-copy">I got it! Thanks for your help. I didn't edit it. I'm fairly new here.  :D</span>
