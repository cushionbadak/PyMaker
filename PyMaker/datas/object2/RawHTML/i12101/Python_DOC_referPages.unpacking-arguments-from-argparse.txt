<div class="post-text" itemprop="text">
<p>I've been writing some command line python programs and using <code>argparse</code> to do it. I've been structuring my code somewhat as follows.</p>
<pre><code>def main(arg1, arg2):
    # magic
    pass

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('arg1')
    parser.add_argument('arg2')

    args = parser.parse_args()

    main(args.arg1, args.arg2)
</code></pre>
<p>It's really super irritating to have to call out <code>arg1</code> and <code>arg2</code> 3 times. I understand having to do it twice. </p>
<p>Is there some way to treat the namespace returned by the <code>parse_args</code> function as a tuple? Or better yet as a tuple and a dict for optional args and do unpacking? </p>
<pre><code>if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('arg1')
    parser.add_argument('arg2')
    parser.add_argument('--opt-arg', default='default_value')

    args, kwargs = parser.magic_method_call_that_would_make_my_life_amazing()

    # I get goosebumps just thinking about this
    main(*args, **kwargs)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/argparse.html#the-namespace-object" rel="noreferrer">https://docs.python.org/3/library/argparse.html#the-namespace-object</a></p>
<blockquote>
<p>This class is deliberately simple, just an object subclass with a readable string representation. If you prefer to have dict-like view of the attributes, you can use the <strong>standard Python idiom, vars()</strong>:</p>
</blockquote>
<pre><code>&gt;&gt;&gt;
&gt;&gt;&gt; parser = argparse.ArgumentParser()
&gt;&gt;&gt; parser.add_argument('--foo')
&gt;&gt;&gt; args = parser.parse_args(['--foo', 'BAR'])
&gt;&gt;&gt; vars(args)
{'foo': 'BAR'}
</code></pre>
<p>Note that one of the big advances, or changes at least, from <code>optparse</code> to  <code>argparse</code> is that positional arguments, such as yours, are treated the same as optionals.  They both appear in the <code>args</code> <code>Namespace</code> object.  In <code>optparse</code>, positionals are just the left overs from parsing defined options.  You could get the same effect in <code>argparse</code> by omiting your arguments and using <code>parse_known_args</code>:</p>
<pre><code>parser = argparse.ArgumentParser()
args, extras = parser.parse_known_args()
</code></pre>
<p><code>args</code> is now a Namespace, and <code>extras</code> a list.  You could then call your function as:</p>
<pre><code>myfoo(*extras, **vars(args))
</code></pre>
<p>For example:</p>
<pre><code>In [994]: import argparse
In [995]: def foo(*args, **kwargs):
   .....:     print(args)
   .....:     print(kwargs)
   .....:     
In [996]: parser=argparse.ArgumentParser()
In [997]: parser.add_argument('-f','--foo')
Out[997]: _StoreAction(option_strings=['-f', '--foo'], dest='foo', nargs=None, const=None, default=None, type=None, choices=None, help=None, metavar=None)
In [998]: args,extras = parser.parse_known_args(['-f','foobar','arg1','arg2'])
In [999]: args
Out[999]: Namespace(foo='foobar')
In [1000]: extras
Out[1000]: ['arg1', 'arg2']
In [1001]: foo(*extras, **vars(args))
('arg1', 'arg2')
{'foo': 'foobar'}
</code></pre>
<p>That same <code>argparse</code> paragraph shows that you can define your own <code>Namespace</code> class.  It wouldn't be hard to define one that behaves like a dictionary (for use as <code>**args</code>) and as namespace.  All <code>argparse</code> requires is that it works with <code>getattr</code> and <code>setattr</code>.</p>
<pre><code>In [1002]: getattr(args,'foo')
Out[1002]: 'foobar'
In [1004]: setattr(args,'bar','ugg')
In [1005]: args
Out[1005]: Namespace(bar='ugg', foo='foobar')
</code></pre>
<p>another standard Python feature lets me pass <code>vars(args)</code> as a tuple:</p>
<pre><code>In [1013]: foo(*vars(args).items())
(('foo', 'foobar'), ('bar', 'ugg'))
{}
</code></pre>
<p>For a similar answer from last January: <a href="https://stackoverflow.com/a/34932478/901925">https://stackoverflow.com/a/34932478/901925</a></p>
<p><a href="https://stackoverflow.com/questions/34932052/neatly-pass-positional-arguments-as-args-and-optional-arguments-as-kwargs-from-a">Neatly pass positional arguments as args and optional arguments as kwargs from argpase to a function</a></p>
<p>There I give ideas on how to separate out 'positionals' from 'optionals' after parsing.</p>
<hr/>
<p>Here's a custom namespace class that includes, in its API, a means of returning itself as a dictionary:</p>
<pre><code>In [1014]: class MyNameSpace(argparse.Namespace):
   ......:     def asdict(self):
   ......:         return vars(self)
   ......:     
In [1015]: args = parser.parse_args(['-f','foobar'], namespace=MyNameSpace())
In [1016]: args
Out[1016]: MyNameSpace(foo='foobar')
In [1017]: foo(**args.asdict())
()
{'foo': 'foobar'}
</code></pre>
<hr/>
<p>Another idea - use one of the multiple <code>nargs</code> (2,'*','+') for the positional argument.  Then you have only one name to type when passing it to your function.</p>
<pre><code>parser.add_argument('pos',nargs='+')
args = ...
args.pos # a list, possibly empty
foo(*args.pos, **vars(args))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can see a similar question asked <a href="https://stackoverflow.com/questions/15161269/using-argparse-arguments-as-keyword-arguments">here</a>.</p>
<p><strong>Edit</strong>: Looking for a way that would not use an internal method, I found <a href="https://stackoverflow.com/a/27181165/426790">this discussion</a> which suggested using <code>vars()</code>. This works quite well:</p>
<pre><code>import argparse

def main(arg1, arg2):
    print arg1, arg2

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('arg1')
    parser.add_argument('arg2')

    args = parser.parse_args()
    main(**vars(args))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What is wrong with doing </p>
<pre><code>if __name__ == '__main__':
    # do argparse stuff as above
    main(args)
</code></pre>
<p>That is, why are you so hung up about giving <code>main()</code> positional arguments?</p>
<p>To be honest, I usually do the argument parsing either a) [for small scripts etc.] at the beginning of the module, which provides me with a variable that's in the scope of all functions or b) [usually] inside <code>main()</code> if I use your idiom:</p>
<pre><code>def parse_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument('arg1')
    parser.add_argument('arg2')
    args = parser.parse_args()
    return args

def main():
    args = parse_arguments()
    # do stuff with args.arg1 and args.arg2 
</code></pre>
</div>
<span class="comment-copy">This is a GREAT answer.... I'd rather be troubled by the library design than rely on something that isn't part of the public api because I'm a weeny and I finish last in life.</span>
<span class="comment-copy">Cheers @BenHoff :-) You can <a href="http://stackoverflow.com/help/someone-answers">accept</a> my answer if it works for you.</span>
<span class="comment-copy">sorry I missing a <i>but</i> in there. This is a great answer.... <b>but</b> I'd rather be troubled by the library design than rely on something that isn't part of the public api because I'm a weeny and I finish last in life.</span>
<span class="comment-copy">@BenHoff Please see my updated version.</span>
<span class="comment-copy">You could also do <code>**args.__dict__</code></span>
<span class="comment-copy">I don't want to have to pack args into a tuple for my main function if I import/call it from another package. I do love that <code>parse_arguments</code> method call. I do love that indeed.</span>
