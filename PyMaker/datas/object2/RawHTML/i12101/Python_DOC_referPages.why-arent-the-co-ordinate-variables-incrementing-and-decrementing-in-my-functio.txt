<div class="post-text" itemprop="text">
<p>I'm programming a text based adventure game in Python, where the player moves on a 5x5 grid and picks up items, but I'm having trouble with changing the co-ordinates of the player.
coorx and coory are not incrementing and decrementing within their respective functions.</p>
<pre><code>coorx = 3 #The beginning x coordinate of the player
coory = 3 #The beginning y coordinate of the player

loop = True
#The dimensions of the map are 5x5.
# __ __ __ __ __
#|  |  |  |  |  |
#|__|__|__|__|__|
#|  |  |  |  |  |
#|__|__|__|__|__|
#|  |  |&gt;&lt;|  |  |
#|__|__|__|__|__|
#|  |  |  |  |  |
#|__|__|__|__|__|
#|  |  |  |  |  |
#|__|__|__|__|__|
#&gt;&lt; = The player's starting position on the map

def left(coorx):
    if coorx != 1: #This checks if the x co-ordinate is not less than 1 so the player does walk off the map.
        coorx -= 1 #This function moves the player left by decrementing the x co-ordinate.

def right(coorx):
    if coorx != 5: #This checks if the x co-ordinate is not more than 5 so the player does walk off the map.
        coorx += 1 #This function moves the player right by incrementing the x co-ordinate.

def back(coory):
    if coory != 1: #This checks if the y co-ordinate is not less than 1 so the player does walk off the map.
        coory -= 1 #This function moves the player left by decrementing the y co-ordinate.

def forward(coory):
    if coory != 5: #This checks if the y co-ordinate is not more than 5 so the player does walk off the map.
        coory += 1 #This function moves the player right by incrementing the y co-ordinate.


while loop: #This loops as long as the variable "loop" is True, and since "loop" never changes, this is an infinite loop.
    move = input().lower()

    if move == "l":
        left(coorx)
        print("You move left.")
        print(coorx, coory)
    elif move == "r":
        right(coorx)
        print("You move right.")
        print(coorx, coory)
    elif move == "f":
        forward(coory)
        print("You move forward.")
        print(coorx, coory)
    elif move == "b":
        back(coory)
        print("You move backwards.")
        print(coorx, coory)
</code></pre>
<p>This is what is output. </p>
<pre><code>&gt;f
&gt;You move forward.
&gt;3 3
&gt;f
&gt;You move forward.
&gt;3 3
&gt;l
&gt;You move left.
&gt;3 3
&gt;l
&gt;You move left.
&gt;3 3
&gt;b
&gt;You move backwards.
&gt;3 3
&gt;b
&gt;You move backwards.
&gt;3 3
&gt;r
&gt;You move right.
&gt;3 3
&gt;r
&gt;You move right.
&gt;3 3
</code></pre>
<p>As you can see, the co-ordinates do not change from "3 3" throughout. Any assistance with my problem would be greatly appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your coordinates are <code>global</code>, but you haven't declared them global so they are being shadowed by a local variable with the same name. You need to declare them <code>global</code> with your functions to be able to modify them.</p>
<p>Option one (without globals):</p>
<pre><code>def left(x_coord):
    if x_coord != 1: 
        x_coord -= 1
    return x_coord # Do something with this
</code></pre>
<p>Option two:</p>
<pre><code>def left():
    global coorx
    if coorx != 1:
        coorx -= 1
</code></pre>
<p>You can read more about globals <a href="https://stackoverflow.com/questions/423379/using-global-variables-in-a-function-other-than-the-one-that-created-them">here</a> and <a href="https://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python" rel="nofollow noreferrer">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Just read something that reminded me of this question. One way to change your co-ordinates without needing to <code>return</code> a value or use <code>global</code> is to use a mutable container type:</p>
<pre><code>&gt;&gt;&gt; coor = [3, 3]  # x, y
&gt;&gt;&gt;
&gt;&gt;&gt; def left():
...     if coor[0] != 1:
...         coor[0] -= 1
...
&gt;&gt;&gt;
&gt;&gt;&gt; left()
&gt;&gt;&gt; coor
[2, 3]
&gt;&gt;&gt;
</code></pre>
<p>What's happening here is that the variable <code>coor</code> is only <em>referenced</em>, not <em>assigned to</em>. What you're assigning to is <em>in</em> that container, not the variable <code>coor</code> itself. This uses the implicit existence of the global <code>coor</code> within <code>left()</code> when it's not assigned-to in the same function.</p>
<p>(I guess this is what I had in mind in the <a href="https://stackoverflow.com/revisions/35637804/1">first version of my previous answer</a>.)</p>
<p>This will also work with dictionaries, and is a bit more readable:</p>
<pre><code>&gt;&gt;&gt; coor = dict(x=3, y=3)
&gt;&gt;&gt;
&gt;&gt;&gt; def left():
...     if coor['x'] != 1:
...         coor['x'] -= 1
...
&gt;&gt;&gt;
&gt;&gt;&gt; left()
&gt;&gt;&gt; coor
{'x': 2, 'y': 3}
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your variables are changing locally. Use global to solve the problem. You can also solve the problem using arguments and returning coordiantes.</p>
</div>
<div class="post-text" itemprop="text">
<p>There a problem in your "move" functions: </p>
<ul>
<li>there are "coorx" and "coory" in the global scope (you set both to 3)</li>
<li>every "move" function has a parameter (coorx or coory) which is local to the function</li>
</ul>
<p>What your functions are doing is changing the local variable (parameter) which is discarded after the function returns. Global variables don't get changed.</p>
<p>Anyhow, using global variables and changing them this way is a bad programming practice. This task really "asks for" implementation as a class with relevant class properties (self.coorx) and methods that let you "move around":</p>
<p><a href="http://www.diveintopython3.net/iterators.html#defining-classes" rel="nofollow">http://www.diveintopython3.net/iterators.html#defining-classes</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You're passing <code>coorx</code> and <code>coory</code> as values to functions with the argument name as <code>coorx</code> and <code>coory</code>. That makes local references to <code>coorx</code> and <code>coory</code> instead of the global.</p>
<p>Edit: You need to specify <code>global coorx</code> and <code>global coory</code> at the top of each function.</p>
<p>Also, in your function defs for <code>left</code>, <code>right</code>, <code>back</code> and <code>forward</code>, you shouldn't use the same parameter names. Also, in your specific case, you don't need to pass these functions any arguments because left() is move left. It doesn't need an argument as per your functionality.</p>
<pre><code>def left():
    global coorx
    ...  # rest as per your code

def right():
    global coorx
    ...  # rest as per your code

def back():
    global coory
    ...  # rest as per your code

def forward():
    global coory
    ...  # rest as per your code
</code></pre>
</div>
<span class="comment-copy">they are, within the functions. You must return the new value to use it outside the function.</span>
<span class="comment-copy">This is wrong an will still fail because the function gets an argument <code>coorx</code> so the body of the function can never use <code>global coorx</code>.</span>
<span class="comment-copy">@aneroid, Good point! I missed that entirely</span>
<span class="comment-copy">Yeah, I missed something stupid during my answer as well :-/</span>
<span class="comment-copy">You can't use the <code>+=</code> or <code>-=</code> operators on a global variable without a <code>global</code> declaration. You'll get an <code>UnboundLocalError</code>. This is true even if in-place addition is supported (which it's not for integers).</span>
<span class="comment-copy">Have you tried it? I have, and I get an exception.</span>
<span class="comment-copy">@Blckknght My bad, don't know what I was thinking. I was mixing up "referencing-only" vs "referencing-and-assignment" in one function.</span>
