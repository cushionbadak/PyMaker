<div class="post-text" itemprop="text">
<p>This is my first day of learning python, with a decent amount of java background. This simple hangman program is working as intended, except for one frustrating problem. If your guess isn't the first letter in the word, you will automatically get a "strike", even if they letter was correct elsewhere in the word. I have pinpointed where and why the problem occurs, but I cannot seem to find a solution. If anyone has any tips they would be greatly appreciated.</p>
<pre><code> #hangman
# 0
#\|/
# |
#/ \
print('Welcome to hangman 2000!')
word=input('Enter your word: ')
lengthOfWord=len(word)
guessed=list('_'*lengthOfWord)
hangman=''
# o \n\\|/\n | \n/ \\
while True:
    wordActual=list(word)
    for i in range(0,lengthOfWord):
        print(guessed[i],end=' ')
    print('\n'+hangman)
    guess=input('Guess a letter: ')
    for i in range(0,lengthOfWord):
        if(wordActual[i]==guess):
            guessed[i]=guess


    for i in range(0,lengthOfWord):

        if((wordActual[i]!=guess)==False):
            print("test point")
            break

    #THE PROBLEM IS RIGHT HERE^, IF THE FIRST LETTER ISN'T YOUR FIRST GUESS IT WILL ALWAYS GO INTO THE HANGMAN MAKER\/

        if(hangman==' o \n\\|/\n | \n/ \\'):
            print('GAME OVER ')
            input('Press Any Key to accept your failure...')

            exit()
        elif(hangman==''):
            hangman+=' o \n'
            break
        elif(hangman==' o \n'):
            hangman+='\\'
            break
        elif(hangman==' o \n\\'):
            hangman+='|'
            break
        elif(hangman==' o \n\\|'):
            hangman+='/\n '
            break
        elif(hangman==' o \n\\|/\n '):
            hangman+='| \n'
            break
        elif(hangman==' o \n\\|/\n | \n'):
            hangman+='/ '
            break
        elif(hangman==' o \n\\|/\n | \n/ '):
            hangman+='\\'
            break


    if(wordActual==guessed):
        print('Congradulations!')
        input('Press Any Key to exit...')
        break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can check if a letter is in a word much easier with <code>if letter in word</code> ... I think you can refactor it </p>
<p>just apply the following fixes ...</p>
<p>get rid of  <code>for i in range(0,lengthOfWord):</code></p>
<p>and replace </p>
<pre><code> if((wordActual[i]!=guess)==False):
        print("test point")
        break
</code></pre>
<p>with </p>
<pre><code> if guess in wordActual:
     print("test point")
     break
</code></pre>
<p>the rest is fine</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd suggest making a bunch of changes. Let's take them in order of importance:</p>
<ol>
<li><p>It's not totally clear how you want to handle repeated letters. If the word is 'book' and I guess 'o', do I get one letter or two? Can I guess 'o' again?</p>
<p>This will have an effect on how you store things. If you're doing "Wheel of Fortune"-type rules, where all the matching letters are revealed, you can just store the word as a string. But if you are going to require a separate guess for each letter, it will be better to have the actual word be modifiable, so you can mark them off. That means a list. (Array, in java)</p></li>
<li><p>You're doing a bunch of repeated work. There are python idioms and operators for things like concatenating a bunch of letters:</p>
<pre><code>print(''.join(list-of-letters))
</code></pre>
<p>Also, iterating over a string or list checking to see if an item is contained:</p>
<pre><code>if letter in list-of-letters: 
</code></pre>
<p>Also, iterating over a string or list to find the index of an element:</p>
<pre><code>i = stringVariable.index(item)
</code></pre>
<p>There's also <a href="https://docs.python.org/3/library/stdtypes.html?highlight=str.find#str.find" rel="nofollow"><code>str.find()</code></a> for strings, which doesn't <code>raise</code> exceptions. </p></li>
<li><p>I'd recommend keeping score with an integer. You can create an array of possible hangman values and print the right one.</p></li>
<li><p>There's this pesky bug:</p>
<pre><code>    for i in range(0,lengthOfWord):

        if((wordActual[i]!=guess)==False):
            break

        if(hangman==' o \n\\|/\n | \n/ \\'):
        ... etc.
</code></pre>
<p>Take a hard look. The problem is indentation - you've got the second <code>if</code> statement inside the block of the <code>for</code>. It should be afterwards, with some kind of "found/not-found" variable falling out. Otherwise, it checks the first letter and if not guessed goes right into the "grow the hangman" code.</p></li>
</ol>
</div>
<span class="comment-copy">Just like in Java, Python uses the break keyword to break out of the current structure. In your case if the first letter doesn't match, then you break. You should be checking every character regardless. i.e. remove the break.</span>
<span class="comment-copy">removing that break does not fix the problem however, it is the same exact output.</span>
<span class="comment-copy">Sorry, I only glanced at the code the first time. Why are you using a for loop? You either break or exit no matter what, so there is no point in looping. You need to replace the loop with a check; if guess not in wordActual, then remove all of the breaks</span>
<span class="comment-copy">thanks, I'll try working with this stuff, was just trying to use some stuff I was familiar with, and for loops are still kind of weird. Also didn't know about the other functions lol.</span>
