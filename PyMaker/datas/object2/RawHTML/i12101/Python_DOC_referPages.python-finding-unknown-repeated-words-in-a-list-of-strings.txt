<div class="post-text" itemprop="text">
<p>I have a list of strings, which are subjects from different email conversations. I would like to see if there are words or word combinations which are being used frequently.</p>
<p>An example list would be:</p>
<pre><code>subjects = [
              'Proposal to cooperate - Company Name',
              'Company Name Introduction',
              'Into Other Firm / Company Name',
              'Request for Proposal'
           ]
</code></pre>
<p>The function would have to detect that "Company Name" as combination is used more than once, and that "Proposal" is being used more than once. These words won't be known in advance though, so I guess it would have to start trying all possible combinations.</p>
<p>The actual list is of course a lot longer than this example, so manually trying all combinations doesn't seem like the best way to go. What would be the best way to go about this?</p>
<p><strong>UPDATE</strong></p>
<p>I've used Tim Pietzcker's answer to start developing a function for this, but I get stuck on applying the Counter correctly. It keeps returning the length of the list as count for all phrases.</p>
<p>The phrases function, including punctuation filter and a check if this phrase has already been checked, and a max length per phrase of 3 words:</p>
<pre><code>def phrases(string, phrase_list):
  words = string.split()
  result = []
  punctuation = '\'\"-_,.:;!? '
  for number in range(len(words)):
      for start in range(len(words)-number):
        if number+1 &lt;= 3:
          phrase = " ".join(words[start:start+number+1])
          if phrase in phrase_list:
            pass
          else:
            phrase_list.append(phrase)
            phrase = phrase.strip(punctuation).lower()
            if phrase:
               result.append(phrase)
  return result, phrase_list
</code></pre>
<p>And then the loop through the list of subjects:</p>
<pre><code>phrase_list = []
ranking = {}
for s in subjects:
    result, phrase_list = phrases(s, phrase_list)
    all_phrases = collections.Counter(phrase.lower() for s in subjects for phrase in result)
</code></pre>
<p>"all_phrases" returns a list with tuples where each count value is 167, which is the length of the subject list I'm using. Not sure what I'm missing here...</p>
</div>
<div class="post-text" itemprop="text">
<p>You also want to find phrases that are composed of more than single words. No problem. This should even scale quite well.</p>
<pre><code>import collections

subjects = [
              'Proposal to cooperate - Company Name',
              'Company Name Introduction',
              'Into Other Firm / Company Name',
              'Request for Proposal',
              'Some more Firm / Company Names'
           ]

def phrases(string):
    words = string.split()
    result = []
    for number in range(len(words)):
        for start in range(len(words)-number):
             result.append(" ".join(words[start:start+number+1]))
    return result
</code></pre>
<p>The function <code>phrases()</code> splits the input string on whitespace and returns all possible substrings of any length:</p>
<pre><code>In [2]: phrases("A Day in the Life")
Out[2]:
['A',
 'Day',
 'in',
 'the',
 'Life',
 'A Day',
 'Day in',
 'in the',
 'the Life',
 'A Day in',
 'Day in the',
 'in the Life',
 'A Day in the',
 'Day in the Life',
 'A Day in the Life']
</code></pre>
<p>Now you can count how many times each of these phrases are found in all your subjects:</p>
<pre><code>all_phrases = collections.Counter(phrase for subject in subjects for phrase in phrases(subject))
</code></pre>
<p>Result:</p>
<pre><code>In [3]: print([(phrase, count) for phrase, count in all_phrases.items() if count &gt; 1])
Out [3]:
[('Company', 4), ('Proposal', 2), ('Firm', 2), ('Name', 3), ('Company Name', 3), 
 ('Firm /', 2), ('/', 2), ('/ Company', 2), ('Firm / Company', 2)]
</code></pre>
<p>Note that you might want to use other criteria than simply splitting on whitespace, maybe ignore punctuation and case etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest that you use space as a separator, otherwise there are too many possibilities if you don't specify how an allowed 'phrase' should look like.</p>
<p>To count word occurrences you can use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>Counter</code></a> from the <code>collections</code> module:</p>
<pre><code>import operator
from collections import Counter

d = Counter(' '.join(subjects).split())

# create a list of tuples, ordered by occurrence frequency
sorted_d = sorted(d.items(), key=operator.itemgetter(1), reverse=True)

# print all entries that occur more than once
for x in sorted_d:
    if x[1] &gt; 1:
        print(x[1], x[0])
</code></pre>
<p>Output:</p>
<pre><code>3 Name
3 Company
2 Proposal
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Similar to pp_'s answer. Using Split.  </p>
<pre><code>import operator

subjects = [
          'Proposal to cooperate - Company Name',
          'Company Name Introduction',
          'Into Other Firm / Company Name',
          'Request for Proposal'
       ]
flat_list = [item for i in subjects for item in i.split() ]
count_dict = {i:flat_list.count(i) for i in flat_list}
sorted_dict = sorted(count_dict.items(), reverse=True, key=operator.itemgetter(1))
</code></pre>
<p>Output:</p>
<pre><code>[('Name', 3),
('Company', 3),
('Proposal', 2),
('Other', 1),
('/', 1),
('for', 1),
('cooperate', 1),
('Request', 1),
('Introduction', 1),
('Into', 1),
('-', 1),
('to', 1),
('Firm', 1)]
</code></pre>
</div>
<span class="comment-copy">This is not a duplicate. At least not of that particular question. This is not about items in a list, it's about common phrases in a list of strings. Please read more than the title before closing.</span>
<span class="comment-copy">Just reopened it.</span>
<span class="comment-copy">@InbarRose: That's the whole point of the question. Don't close questions as duplicates if you're not sure beforehand they actually are duplicate. It's not a race.</span>
<span class="comment-copy">It's not strictly counting items in a list...  is this of any assistance? <a href="http://stackoverflow.com/questions/18715688/find-common-substring-between-two-strings" title="find common substring between two strings">stackoverflow.com/questions/18715688/â€¦</a></span>
<span class="comment-copy">@InbarRose: If you think the question is unclear, either vote to close it as unclear or ask for clarification in comments. A duplicate means that the question is <i>the same</i>. Just because you also have to count elements to achieve a solution for this problem doesn't mean it's the same question. In case of doubt, don't do anything.</span>
<span class="comment-copy">Thanks, this was a great start. I've implemented this in the loop but am having some troubles with the counter. I've updated the question with the latest status.</span>
<span class="comment-copy">Thanks, this is helpful. Probably by first getting the repeated words, I can then start looking for word combinations, using the words this function finds. I'll play around with this a bit and post my result here.</span>
<span class="comment-copy">A potential alternative to using <code>split()</code> to tokenize a sentence, you could also use the <code>work_tokenize()</code> function from the <code>nltk</code>. <a href="http://www.nltk.org/book/ch03.html" rel="nofollow noreferrer">nltk.org/book/ch03.html</a></span>
