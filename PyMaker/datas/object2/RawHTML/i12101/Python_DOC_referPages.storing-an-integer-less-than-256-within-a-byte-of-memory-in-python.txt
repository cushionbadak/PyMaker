<div class="post-text" itemprop="text">
<p>I have a huge array (of arrays) of integers in the range 0-255. Since I know the range of the integers, hence I want to optimize the space occupied by them by storing each integer within a single byte.</p>
<p>In C++, I would simply use <code>char</code> to store the integers, but I am not able to find a way out in Python.</p>
<pre><code>&gt;&gt;&gt; a = 10
&gt;&gt;&gt; sys.getsizeof(a)
24
&gt;&gt;&gt; b = chr(a)
&gt;&gt;&gt; sys.getsizeof(b)
38
&gt;&gt;&gt; c = bytearray(1)
&gt;&gt;&gt; c[0] = b
&gt;&gt;&gt; c[0]
10
&gt;&gt;&gt; sys.getsizeof(c[0])
24
&gt;&gt;&gt; c
bytearray(b'\n')
&gt;&gt;&gt; sys.getsizeof(c)
50
</code></pre>
<p>I have searched for data types available in Python, but I am not able to get any data type which can give me <code>sys.getsizeof()</code> equal to 1.
I want to know whether there exists a spatially optimal way of storing such integers.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are dealing with huge arrays then you will probably be best off using numpy which includes a lot of array tools for you.</p>
<p>There is some overhead but it is minimal:</p>
<pre><code>import numpy as np
import sys

a = np.array([0]*10000, np.uint8)    
len(a)
# 10000
sys.getsizeof(a)
# 10048
sys.getsizeof(a[0])
# 13
a = np.array([0]*1000000, np.uint8)
sys.getsizeof(a)
# 1000048
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>sys.getsizeof(c[0])</code> doesn't report the actual amount of memory used to store the first element of <code>c</code>. Accessing <code>c[0]</code> makes Python construct an integer object (or fetch one from the small integer cache) to represent the value, but the bytearray does store the value as one byte.</p>
<p>This is more obvious with a larger bytearray:</p>
<pre><code>&gt;&gt;&gt; sys.getsizeof(bytearray([5]*1000))
1168
</code></pre>
<p>You can see that this bytearray couldn't possibly be using more than 1 byte per element, or it would be at least 2000 bytes in size. (The excess space is due to overallocation to accommodate additional elements, and some object overhead.)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.scipy.org/doc/numpy/reference/" rel="nofollow">numpy</a> arrays for that. E.g.:</p>
<pre><code>import numpy as np

byte_array = np.empty(10, np.uint8) # an array of 10 uninitialized bytes
</code></pre>
<p>See other <a href="https://docs.scipy.org/doc/numpy/reference/routines.array-creation.html" rel="nofollow">numpy array constructors</a> for more details.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a <code>bytes</code> class for the purpose of storing a packed sequence of bytes.  I don't think there's an easy way of storing just a single number using one byte of memory.</p>
<p><a href="https://docs.python.org/3/library/stdtypes.html#binaryseq" rel="nofollow">Documentation for <code>bytes</code></a></p>
<pre><code>&gt;&gt;&gt; bytes.fromhex('2Ef0 F1f2  ')
b'.\xf0\xf1\xf2'

&gt;&gt;&gt; sys.getsizeof(bytes.fromhex(''))
33
&gt;&gt;&gt; sys.getsizeof(bytes.fromhex('dead'))
35
&gt;&gt;&gt; sys.getsizeof(bytes.fromhex('deadbeef'))
37
</code></pre>
</div>
<span class="comment-copy">There are compact arrays in the standard <code>array</code> module. But if you also want fast operations on your data, you might as well use Numpy.</span>
<span class="comment-copy">That's not an array of 10 bytes. It has a single (1 byte) element.</span>
<span class="comment-copy">with a value of 10</span>
<span class="comment-copy">@Alex Mistyped the constructor function.</span>
