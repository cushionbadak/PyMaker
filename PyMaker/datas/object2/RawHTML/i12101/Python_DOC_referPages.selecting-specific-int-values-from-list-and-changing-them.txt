<div class="post-text" itemprop="text">
<p>I have been playing with Python and came across a task from MIT, which is to create coded message (Julius Cesar code where for example you change ABCD letters in message to CDEF). This is what I came up with:</p>
<pre><code>Phrase = input('Type message to encrypt: ')
shiftValue = int(input('Enter shift value: '))

listPhrase = list(Phrase)
listLenght = len(listPhrase)

ascii = []
for ch in listPhrase:
  ascii.append(ord(ch))
print (ascii)

asciiCoded = []
for i in ascii:
    asciiCoded.append(i+shiftValue)
print (asciiCoded)

phraseCoded = []
for i in asciiCoded:
    phraseCoded.append(chr(i))
print (phraseCoded)

stringCoded = ''.join(phraseCoded)
print (stringCoded)
</code></pre>
<p>The code works but I have to implement not shifting the ascii value of spaces and special signs in message. </p>
<p>So my idea is to select values in list in range of range(65,90) and range(97,122) and change them while I do not change any others. But how do I do that? </p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to use that gigantic code :) to do something as simple as that, then you keep a check like so: </p>
<pre><code>asciiCoded = []
for i in ascii:
    if 65 &lt;= i &lt;= 90 or 97 &lt;= i &lt;= 122:  # only letters get changed
        asciiCoded.append(i+shiftValue)
    else:
        asciiCoded.append(i)
</code></pre>
<hr/>
<p>But you know what, python can do the whole of that in a single line, using <a href="http://treyhunner.com/2015/12/python-list-comprehensions-now-in-color/" rel="nofollow">list comprehension</a>. Watch this:</p>
<pre><code>Phrase = input('Type message to encrypt: ')
shiftValue = int(input('Enter shift value: '))

# encoding to cypher, in single line
stringCoded = ''.join(chr(ord(c)+shiftValue) if c.isalpha() else c for c in Phrase)

print(stringCoded)
</code></pre>
<p><strong>A little explanation:</strong> the list comprehension boils down to this for loop, which is easier to comprehend. Caught something? :)</p>
<pre><code>temp_list = []
for c in Phrase:
    if c.isalpha():
        # shift if the c is alphabet
        temp_list.append(chr(ord(c)+shiftValue))
    else:
        # no shift if c is no alphabet
        temp_list.append(c)

# join the list to form a string
stringCoded = ''.join(temp_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Much easier it is to use the maketrans method from the string module:</p>
<pre><code>&gt;&gt;import string
&gt;&gt;
&gt;&gt;caesar = string.maketrans('ABCD', 'CDEF')
&gt;&gt;
&gt;&gt;s = 'CAD BA'
&gt;&gt;
&gt;&gt;print s
&gt;&gt;print s.translate(caesar)
CAD BA
ECF DC
</code></pre>
<p>EDIT: This was for Python 2.7</p>
<p>With 3.5 just do</p>
<pre><code>caesar = str.maketrans('ABCD', 'CDEF')
</code></pre>
<p>And an easy function to return a mapping.</p>
<pre><code>&gt;&gt;&gt; def encrypt(shift):
...     alphabet = string.ascii_uppercase
...     move = (len(alphabet) + shift) % len(alphabet)
...     map_to = alphabet[move:] + alphabet[:move]
...     return str.maketrans(alphabet, map_to)
&gt;&gt;&gt; "ABC".translate(encrypt(4))
'EFG'
</code></pre>
<p>This function uses modulo addition to construct the encrypted caesar string. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>asciiCoded = []
final_ascii = ""
for i in ascii:
    final_ascii = i+shiftValue #add shiftValue to ascii value of character
    if final_ascii in range(65,91) or final_ascii in range(97,123): #Condition to skip the special characters
        asciiCoded.append(final_ascii)
    else: 
        asciiCoded.append(i)
print (asciiCoded)
</code></pre>
</div>
<span class="comment-copy">you can use <code>isalpha()</code> method <a href="http://stackoverflow.com/questions/15558392/how-to-check-if-character-in-string-is-a-word-character-python" title="how to check if character in string is a word character python">stackoverflow.com/questions/15558392/â€¦</a></span>
<span class="comment-copy">If you don't want to have "magic numbers" floating around, <code>65</code>, <code>90</code>, <code>97</code>, and <code>122</code> are <code>ord('A')</code>, <code>ord('Z')</code>, <code>ord('a')</code>, and <code>ord('z')</code> respectively.</span>
<span class="comment-copy">I know, but from OP it seems reasonable to guess that the OP knows it too. So no harm using those magic numbers. Take care, two OPs mean different. :)</span>
<span class="comment-copy">Shadowfax Could you tell me, or link me to explanation,  what does those double parenthesis do?  For egsample here: stringCoded = ''.join(temp_list)</span>
<span class="comment-copy">@RadekE take a look at this <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer">str.join</a>, and <a href="http://stackoverflow.com/questions/12453580/concatenate-item-in-list-to-strings-python">this</a>. Hope that will help.</span>
<span class="comment-copy">The OP is tagged with python 3.x. Yours is for python 2.x. And it does not take into account the shiftValue taken as input from the user. And it would be awfully clumsy if A-Z and a-z are to be handled.</span>
<span class="comment-copy">Thank you Shadowfax. Obviously I am a lazy reader ;-) I have updated my comment to reflect your comment.</span>
<span class="comment-copy">For each case, <code>Z</code> and <code>z</code> are missed. Go figure.</span>
<span class="comment-copy"><code>range()</code> excludes the endpoint. You want <code>range(65, 91)</code> and <code>range(97, 123)</code>.</span>
<span class="comment-copy">its just because if u try to add shift value for Z/z i.e its 90 + any shift  or 122+ any shift value will take it to other non-alphacharacters &gt; 91 or 122</span>
<span class="comment-copy">True Shadowfax it must b +1</span>
