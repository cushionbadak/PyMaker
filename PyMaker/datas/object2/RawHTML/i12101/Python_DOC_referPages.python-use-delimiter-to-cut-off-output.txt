<div class="post-text" itemprop="text">
<p>The solution to the below may seem pretty "basic" to some of you; I've tried tons of source code and tons of reading to accomplish this task and constantly receive output that's barely readable to me, which simply doesn't execute, or just doesn't let me out of the loop.</p>
<p><strong>I have tried using:</strong> <code>split()</code>, <code>splitlines()</code>, import re - <code>re.sub()</code>, <code>replace()</code>, etc. </p>
<p><strong>But I have only been able to make them succeed using basic strings, but not when it has come to using text files, which have delimiters, involve new lines.</strong> I'm not perfectly sure how to use for loops to iterate through text files although I have used them in Python to create batch files which rely on increments. I am very confused about the current task.</p>
<p>=========================================================================</p>
<p><strong>Problem:</strong></p>
<p>I've created a text file (<code>file.txt</code>) that features the following info:</p>
<pre><code>2847:784          3637354:
347263:9379       4648292:
63:38940          3547729:
</code></pre>
<p>I would like to use the first colon (<code>:</code>) as my delimiter and have my output print only the numbers that appear before it on each individual line. I want it to look like the following:</p>
<pre><code>2847
347263
63
</code></pre>
<p>I've read several topics and have tried to play around with the coded solutions but have not received the output I've desired, nor do I think I fully understand what many of these solutions are saying. I've read several books and websites on the topic to no avail so what i am resorting to now is asking in order to retrieve code that may help me, then I will attempt to play around with it to form my own understanding. I hope that does not make anyone feel as though they are working too hard on my behalf. What I have tried so far is:</p>
<pre><code>tt = open('file.txt', 'r').read()
[i for i in tt if ':' not in i]


vv = open('file.txt', 'r').read()
bb = vv.split(':')
print(bb)


vv = open('file.txt', 'r').read()
bb = vv.split(':')
for e in bb:
    print(e)


vv = open('file.txt', 'r').read()
bb = vv.split(':')
lines = [line.rstrip('\n') for line in bb]
print(lines)


io = open('file.txt', 'r').read()
for line in io.splitlines():
print(line.split(" ",1)[0]


with open('file.txt') as f:
lines = f.readlines()
print(lines)
</code></pre>
<p>The output from each of these doesn't give me what I desire, but I'm not sure what I'm doing wrong at all. Is there a source I can consult for guidance. I have been reading the forum along with, "Fluent Python," "Data Wrangling with Python," "Automate the Boring Stuff," and "Learn Python the Hard Way," and I have not been able to figure this problem out. Thanks in advance for the assistance.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>with open('file.txt') as myfile:
    for line in myfile:
        print(line.split(':')[0])
</code></pre>
</div>
<span class="comment-copy">What are you setting your first list comprehension to? (You are doing <code>[i for i in tt if ':' not in i]</code>, but not setting that value to anything.)</span>
<span class="comment-copy">Have you tried <code>print("".join(line.partition(":")[0] for line in open('file.txt')))</code>?</span>
<span class="comment-copy">@jsve To be honest, I don't fully understand the code. All I can say is that posting it in that way actually gave me output. When I edited it to reflect the following <b>(where I replace the final i with tt)</b> I received absolutely nothing: '[i for i in tt if ':' not in tt]'</span>
<span class="comment-copy">@zondo  - <b>MY WORD!!! Thank you!!</b> I tried your method, but replaced "" with "\n" and it worked perfectly!! Many thanks sir. I was wondering if you could recommend a bit of reading I could do to understand exactly how the "join" method works. My code at current is this by the way: <code>print("\n".join(line.partition(":")[0] for line in open('asdf.txt')))</code> And do you know of place I could read from where i can discover how to accomplish this via for loops alone, more similar to the other methods I tried out?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer">Here</a> is the documentation for it.  <code>"f".join(["this", "that", "there"])</code> results in <code>"thisfthatfthere"</code>.  I think you'll get the point.  What I put inside, however, is what is called a <a href="https://docs.python.org/3/reference/expressions.html#generator-expressions" rel="nofollow noreferrer">generator expression</a>.  It iterates through each line and takes <code>line.partition(":")[0]</code>.  <code>line.partition(":")</code> splits <code>line</code> into three things: that before <code>":"</code>, <code>":"</code>, and that after <code>":"</code>, so that <code>[0]</code> is what is before the <code>":"</code>.</span>
<span class="comment-copy"><b>This is GREAT!!!</b> It worked like a charm. Thanks willnx Looking at it, I think this will be easy for me to understand and decipher as well. Thanks a lot man!!</span>
