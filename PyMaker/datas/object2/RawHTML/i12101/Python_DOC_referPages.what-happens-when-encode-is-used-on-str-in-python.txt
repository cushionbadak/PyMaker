<div class="post-text" itemprop="text">
<p>I got the point about unicode, encoding and decoding. But I don't understand why the encode function works on str type. I expected it to work only on unicode type.
Therefore my question is : what is the behavior of encode when it's used on a str rather than unicode ?</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2 there are two types of codecs available; those that convert between <code>str</code> and <code>unicode</code>, and those that convert from <code>str</code> to <code>str</code>. Examples of the latter are the <code>base64</code> and <code>rot13</code> codecs.</p>
<p>The <code>str.encode()</code> method exists to support the latter:</p>
<pre><code>'binary data'.encode('base64')
</code></pre>
<p>But now that it exists, people are also using it for the <code>unicode</code> -&gt; <code>str</code> codecs; encoding can only go from <code>unicode</code> to <code>str</code> (and decoding the other way). To support these, Python will <em>implicitly</em> decode your <code>str</code> value to <code>unicode</code> first, using the ASCII codec, before finally encoding.</p>
<p>Incidentally, when using a <code>str</code> -&gt; <code>str</code> codec on a <code>unicode</code> object, Python first implicitly encodes to <code>str</code> using the same ASCII codec.</p>
<p>In Python 3, this has been solved by a) removing the <code>bytes.encode()</code> and <code>str.decode()</code> methods (remember that <code>bytes</code> is sorta the old <code>str</code> and <code>str</code> the new <code>unicode</code>), and b) by moving the <code>str</code> -&gt; <code>str</code> encodings to the <code>codecs</code> module <em>only</em>, using the <a href="https://docs.python.org/3/library/codecs.html#codecs.encode" rel="noreferrer"><code>codecs.encode()</code></a> and <a href="https://docs.python.org/3/library/codecs.html#codecs.decode" rel="noreferrer"><code>codecs.decode()</code></a> functions. What codecs transform between the same type has also been clarified and updated, see the <a href="https://docs.python.org/3/library/codecs.html#python-specific-encodings" rel="noreferrer"><em>Python Specific Encodings</em> section</a>; note that the 'text' encodings noted there, where available in Python 2, encode to <code>str</code> instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python realizes that it can't do an <code>encode</code> on a <code>str</code> type, so it tries to <code>decode</code> it first!  It uses the <code>'ascii'</code> codec, which will fail if you have any characters with a codepoint above 0x7f.</p>
<p>This is why you sometimes see a <code>decode</code> error raised when you were trying to do an <code>encode</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3, encoding a bytestring simply does not work.</p>
<pre><code>&gt;&gt;&gt; b'hi'.encode('utf-8')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'bytes' object has no attribute 'encode'
</code></pre>
<p>Python 2 <em>tries</em> to be helpful when you call <code>encode</code> on a <code>str</code> and first tries to <em>decode</em> the string with <code>sys.getdefaultencoding()</code> (usually ascii) and <em>afterwards</em> encode it. </p>
<p>That's why you get the the rather weird error message that decoding with ascii is not possible when you try to encode with utf-8.</p>
<pre><code>&gt;&gt;&gt; 'hi\xFF'.encode('utf-8')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xff in position 2: ordinal not in range(128)
</code></pre>
<p>Ned explains it better than I, watch <a href="https://www.youtube.com/watch?v=sgHbC6udIqc" rel="nofollow">this</a> from 16:20 onward.</p>
</div>
<span class="comment-copy">What do you think happens to unicode when it is encoded and decoded?</span>
<span class="comment-copy">Use Python 3 and most of the confusion will be gone.</span>
<span class="comment-copy">Thanks for your answer. Besides I didn't know about base64 and rot13 !</span>
<span class="comment-copy">nitpick:  it uses <code>sys.getdefaultencoding()</code> (which is almost always <code>'ascii'</code>)</span>
<span class="comment-copy">@wim thanks for that, I didn't know it - I've never seen <code>sys.getdefaultencoding</code> return anything other than <code>'ascii'</code>.</span>
<span class="comment-copy">@MarkRansom: that's because <code>sys.setdefaultencoding</code> is removed by <code>site.py</code>. <code>reload(sys)</code> will bring it back, but setting the default to anything but <code>ascii</code> is a <a href="https://stackoverflow.com/questions/28657010/dangers-of-sys-setdefaultencodingutf-8"><i>very bad idea</i></a>. You often see <code>import sys; reload(sys); sys.setdefaultencoding(...)</code> cargo-culted on questions about Unicode problems.</span>
