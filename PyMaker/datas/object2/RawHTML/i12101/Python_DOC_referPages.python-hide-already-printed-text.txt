<div class="post-text" itemprop="text">
<p>I'm creating a simple two-player board game where each player must place pieces on their own boards. What I would like to do is by either:</p>
<ul>
<li><p>opening a new terminal window (regardless which OS the program is run on) for both players so that the board is saved within a variable but the other player cannot scroll up to see where they placed their pieces.</p></li>
<li><p>clearing the current terminal completely so that neither player could scroll and see the other player's board. I am aware of the unix 'clear' command but it doesn't achieve the effect I'm after and doesn't work with all OS's (though this might be something that I'll have to sacrifice to get a working solution)</p></li>
</ul>
<p>I have tried clearing the screen but haven't been able to completely remove all the text. I don't have a preference; whichever method is easier. Also, if it would be easier to use a different method that I haven't thought of, all other suggestions are welcome. Thanks in advance!</p>
<p>EDIT: Other solutions give the appearance that text has been cleared but a user could still scroll up and see the text that was cleared. I'd like a way to remove any way that a user could see this text.</p>
<p>EDIT 2: Please read the other answers and the comments as they provide a lot of information about the topic as a whole. In particular, thanks to @zondo.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would recomend a simple ANSI escape code to move the cursor position, <a href="http://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/x361.html" rel="nofollow">Cursor Escape Codes</a>, to the start of the board everytime. There is also an ANSI escape code that completly clears the console though, so you can choose.</p>
<p>If you are on windows you must first import <code>colorama</code> a module that makes windows prompt be able to use the ANSI codes as such:</p>
<pre><code>import colorama   # OR: from colorama import init
colorama.init()   # AND THEN: init()
</code></pre>
<p>So if your board has <code>n</code> rows, after the user input for their turn, you move the cursor UP <code>n</code> rows + however many were required for user input, so if you wrote <code>Input row, col: ...</code> then you would go UP <code>n+1</code>, etc...</p>
<p>A simple example:</p>
<pre><code>numLines = 1
print("Hello world!")
print("\033[&lt;{0}&gt;A".format(numLines), "This came AFTER hello world line")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Consider using a portable terminal handling library. They abstract away the system specifica of common tasks like erasing the "screen" (i.e. terminal), or placing output at a specific position on the "screen" (again, meaning the text terminal). However, to use such a library effectively, you often have to switch to its style of generating output on the screen instead of naively <code>print</code>ing strings.</p>
<p><a href="https://docs.python.org/library/curses.html" rel="nofollow"><code>curses</code></a> is one such library (based on the C library <a href="https://en.wikipedia.org/wiki/Ncurses" rel="nofollow">ncurses</a>) and included in the Python standard library. To get started, be sure to have a look at the <a href="https://docs.python.org/howto/curses.html" rel="nofollow"><code>curses</code> tutorial</a> in the official Python documentation.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd personally just use this.</p>
<pre><code>import os
os.system("cls" if os.name == "nt" else "clear") #"cls" for Windows, otherwise "clear"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may not like this, it's a bit higher level than a basic two player board game, but there is always using some sort of GUI.
I personally like tkinter myself.</p>
<p>You don't want the option of people scrolling up to see printed text, but you can't remove what has been printed, that's like asking a printer to remove ink off a page. It's going to stay there.</p>
<p>Research a GUI interface, and try and make the game in that. Otherwise, you could let me take a stab at creating a explanatory piece of code that shows you how to use tkinter. If you do, link me the game you have so I can understand what you want.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/2084508/clear-terminal-in-python">clear terminal in python</a></span>
<span class="comment-copy">This still allows a user to scroll back up and see the supposedly cleared text. I'm looking for a solution where the user cannot see this text again if that is possible?</span>
<span class="comment-copy">Don't just read the top answer.  There are answers in there that will do what you want.  For example, <code>print('\033c')</code> works for me on Linux.</span>
<span class="comment-copy">Sorry, I didn't see that. It does work for me on linux but does it work on other OS's?</span>
<span class="comment-copy">I don't know.  I don't have any others to test it on.</span>
<span class="comment-copy">For me, I had to remove the &lt;&gt; from the ANSI code ("\033[{0}A".format(numLines)).</span>
<span class="comment-copy">ANSI escape codes behave somewhat differently from one OS to another sometimes, I find that the best methode with it most of the times is try and error</span>
<span class="comment-copy">I just saw in the documentation that the Windows version of Python doesn't include the <code>curses</code> module. <a href="https://docs.python.org/3/howto/curses.html#what-is-curses" rel="nofollow noreferrer">Newer versions of the tutorial</a> mention the <a href="https://pypi.python.org/pypi/UniCurses" rel="nofollow noreferrer"><code>UniCurses</code> package</a> as an alternative.</span>
<span class="comment-copy">Perhaps OP doesn't need <code>curses</code> (its Windows analog) and something lighter such as <code>colorama</code> + <code>blessings</code> would be enough.</span>
<span class="comment-copy">I have tried this but you can still scroll up and see anything printed beforehand. E.g. using a for loop to print some quantity of text and then using os.system('cls' if os.name == 'nt' else 'clear') would appear to clear the terminal but a user could still just scroll up and see the text anyway.</span>
<span class="comment-copy">@MichaelMorgan Interesting. I didn't realise that was the case.</span>
<span class="comment-copy">@MichaelMorgan: as <a href="http://stackoverflow.com/questions/35813667/python-hide-already-printed-text-solved#comment59299691_35813667">I said</a>, the answer works fine for me.</span>
<span class="comment-copy">I have plans to develop a GUI around it but I was curious if there was a way to achieve what would be simple(ish) in a graphical environment but within a text-based one instead.</span>
<span class="comment-copy">There is a difference between clearing the terminal screen and asking a printer to remove ink off a page: clearing the terminal screen has been done in many ways.</span>
<span class="comment-copy">Teach me your wondrous ways @zondo I know nothing of this. As far as I was aware there was no way of actually doing this with simplistic code.</span>
<span class="comment-copy">They aren't <i>my</i> wondrous ways :).  I gave a link below the question to a very similar one.  The accepted answer clears only what's visible, but there are other answers that clear everything.</span>
