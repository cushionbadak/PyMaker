<div class="post-text" itemprop="text">
<p>I need to take lines from a text file and use them as variables in a python function.</p>
<pre><code>def call(file):
        with open(file) as infile, open('output.txt', 'w') as outfile:
            do stuff in a for loop
</code></pre>
<p>file is the variable name and I plan to have a text file containing a list of text file names like so:</p>
<pre><code>hello.txt
world.txt
python.txt
</code></pre>
<p>I can call the function  with a single file name fine:</p>
<pre><code>call(hello.txt)
</code></pre>
<p>But I have a long list of files I need to go through. How can I read the file containing the file names line by line while calling the function once with each file name?</p>
</div>
<div class="post-text" itemprop="text">
<p><em>"How can I read the file containing the file names line by line while calling the function once with each file name?"</em> ... you just explained what to do. Supposing your text file containing other filenames is <code>"listoffiles.txt"</code>,</p>
<pre><code>with open('listoffiles.txt') as fp:
    for line in fp:
        filename = line.strip()
        if filename:
            call(filename)
</code></pre>
<p>Note that because <code>call</code> keeps overwriting <code>output.txt</code> you may have other issues.</p>
<p>Depending on other design goals of course, you could have <code>call</code> work on an open file object instead of a file name. This makes the function more generic and potentially useful for other cases such as using other file-like objects such as <code>StringIO</code>.</p>
<pre><code>def call(output, filename):
   with open(filename) as infile:
       # do some stuff directly with file

with open('output.txt', 'w') as output:
    with open('listoffiles.txt') as fp:
        for line in fp:
            filename = line.strip()
            if filename:
                call(output, filename)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>in the following example I assign a text file string to an arbitrary variable
I then eliminate the '.txt' so as to adhere to variable name convention
then I assign the string value of x to a number 2</p>
<pre><code>x='hello.txt' 
x = x.replace(".txt","")  
exec("%s = %d" % (x,2))
print(str(x) + ' is equal to: ' + str(hello))
</code></pre>
<p>if you try the code you should get </p>
<pre><code>hello is equal to: 2
</code></pre>
</div>
<span class="comment-copy">Can you just loop through the directory and call it on the files? And just so I am sure, you have a file that has the names of all the other files in it and you want to get read the names from that file?</span>
<span class="comment-copy">No I can't loop through all the files in a directory. Yes exactly. A file containing all the file names as strings</span>
<span class="comment-copy">Please <a href="https://stackoverflow.com/posts/35783033/edit">edit</a> your question so that, <i>as written</i>, it says something remotely like what you want to ask.  Jacobr365's questions and your response completely change what you're asking.  Your <i>real</i> question seems to boil down to, "How do I iterate over the lines of a text file?", which is in <a href="https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects" rel="nofollow noreferrer">The Python Tutorial</a>.</span>
<span class="comment-copy">Yes done. I asked the question using my understanding of the subject. I see the new title does now make more sense however and I'm glad it made enough sense for people to provide answers. Thanks!</span>
<span class="comment-copy">@KevinJ.Chase my apologies, I did not notice the tag. I am removing my comment as obsolete.</span>
<span class="comment-copy">That makes a lot of sense. Thanks! That could be resolved with a+ though?</span>
<span class="comment-copy">yes, ..., depending on what you want output to be. That will keep appending data to the single output file.</span>
<span class="comment-copy">@johnnydrama Why not also just pass in the output file object so you don't have to open and close it on each call. Just make it an input argument to the <code>call</code> function. Then only open the output once at the beginning and close once at the end when you've read through all your files.</span>
<span class="comment-copy">@zephyr - that's a reasonable solution also. I'll add it as an alternate.</span>
<span class="comment-copy">I don't see how this is related to the question.</span>
<span class="comment-copy">...and yet you never read the file. You simply created a variable name from the filename.</span>
<span class="comment-copy">I also thought the original poster wanted this when I read "...and use them as variables in a python function".  Both johnnydrama's title and his question itself say this in several places.  <i>But</i>, Jacobr365's comment and johnnydrama's response to it completely change the question, revealing that he wants to use the filename-strings as the <i>values</i> of variables (normal assignment), <i>not</i> use those strings as variable names.</span>
<span class="comment-copy">I interpreted the question originally as Kevin and Tyler did, so I don't think this answer was unreasonable.</span>
<span class="comment-copy">I'd flag this question as "unclear what you're asking"... but there's no way to add explanatory text to that flag.  It's perfectly clear what the question is asking... it's just not the question the OP <i>wanted</i> to ask.</span>
