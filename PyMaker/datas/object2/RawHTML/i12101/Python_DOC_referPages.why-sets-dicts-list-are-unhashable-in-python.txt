<div class="post-text" itemprop="text">
<p>What exactly is meant by unhashable?
<br/></p>
<pre><code>&gt;&gt;&gt; a={1,2,3}
&gt;&gt;&gt; b={4,5,6}
&gt;&gt;&gt; set([a,b])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'set'
&gt;&gt;&gt;
</code></pre>
<p>Can any one tell what the error is exactly? Also can i add set into another set in python?</p>
</div>
<div class="post-text" itemprop="text">
<p>Objects that doesn't have the <a href="https://docs.python.org/3/reference/datamodel.html#object.__hash__" rel="nofollow"><code>__hash__()</code></a> attribute called <code>unhashable</code>. Python documentation has described the reason very well:</p>
<blockquote>
<p>If a class defines mutable objects and implements an <code>__eq__()</code> method, it should not implement <code>__hash__()</code>, since the implementation of hashable collections requires that a key’s hash value is immutable (if the object’s hash value changes, it will be in the wrong hash bucket).</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>As Kasramvd explained, objects in python that are <code>mutable</code> and implement the <code>__eq__</code> function are unhashable.  </p>
<p>Since sets, lists and dicts are mutable (i.e. they can be changed; for instance you can add, remove items to all of them) , they cannot be hashed.  </p>
<p>Since a set of sets is not possible, perhaps a set of tuple might work, though you will need to do additional bookkeeping (e.g ensure unique values) in order to achieve exactly what you described.</p>
<pre><code>a = (1,2,3)
b = (4,5,6)
c = set([a,b])
</code></pre>
<p>Or even better, a set of <code>frozensets</code>.  Similar to sets, but immutable (you cannot add or remove elements from them).</p>
<pre><code>a = frozenset(a)
b = frozenset(b)
c = set([a,b])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>A hash function is any function that can be used to map data of
  arbitrary size to data of fixed size. The values returned by a hash
  function are called hash values, hash codes, hash sums, or simply
  hashes.</p>
</blockquote>
<p>The dictionary in python is just a hash map.</p>
<p>And sets could only contain strings or chars or numbers, but not dics or another sets.
You might wanna look at: <a href="https://docs.python.org/2/tutorial/datastructures.html#sets" rel="nofollow">https://docs.python.org/2/tutorial/datastructures.html#sets</a></p>
</div>
<span class="comment-copy">Hashable types have a hash that is guaranteed to be constant during it's lifetime. And if 2 objects compare <code>eq()</code> they must have the same hash. These conditions are a problem with mutable objects (sets, list, dicts, etc), equality changes as you change the object. Immutable types (strings, tuples, etc.) don't have this issue as they cannot be changed. Immutable types are hashable. Mutable types are not.</span>
<span class="comment-copy">But a <code>set</code> of <code>frozenset</code>s is.</span>
