<div class="post-text" itemprop="text">
<p>Using Python 2.7, and mock library</p>
<p>How can I test that certain patched object has been initialized with some specific arguments using mock?</p>
<p>Here some sample code and pseudo-code:</p>
<p>unittest.py :</p>
<pre><code>import mock
@mock.patch('mylib.SomeObject')
def test_mytest(self, mock_someobject):
  test1 = mock_someobject.return_value
  test1 = method_inside_someobject.side_effect = ['something']

  mylib.method_to_test()

  # How can I assert that method_to_test instanced SomeObject with certain arguments?
  # I further test things with that method_inside_someobject call, no problems there...
</code></pre>
<p>mylib.py :</p>
<pre><code>from someobjectmodule import SomeObject
def method_to_test():
  obj = SomeObject(arg1=val1, arg2=val2, arg3=val3)
  obj.method_inside_someobject()
</code></pre>
<p>So, how can I test SomeObject was instanced with arg1=val1, arg2=val2, arg3=val3?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you replaced a class with a mock, creating an instance is just another call. Assert that the right parameters have been passed to that call, for example, with <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_called_with" rel="nofollow"><code>mock.assert_called_with()</code></a>:</p>
<pre><code>mock_someobject.assert_called_with(arg1=val1, arg2=val2, arg3=val3)
</code></pre>
<p>To illustrate, I've updated your MCVE to a working example:</p>
<p><strong>test.py</strong>:</p>
<pre><code>import mock
import unittest

import mylib


class TestMyLib(unittest.TestCase):
    @mock.patch('mylib.SomeObject')
    def test_mytest(self, mock_someobject):
        mock_instance = mock_someobject.return_value
        mock_instance.method_inside_someobject.side_effect = ['something']

        retval = mylib.method_to_test()

        mock_someobject.assert_called_with(arg1='foo', arg2='bar', arg3='baz')
        self.assertEqual(retval, 'something')


if __name__ == '__main__':
    unittest.main()
</code></pre>
<p><strong>mylib.py</strong>:</p>
<pre><code>from someobjectmodule import SomeObject

def method_to_test():
    obj = SomeObject(arg1='foo', arg2='bar', arg3='baz')
    return obj.method_inside_someobject()
</code></pre>
<p><strong>someobjectmodule.py</strong>:</p>
<pre><code>class SomeObject(object):
    def method_inside_someobject(self):
        return 'The real thing'
</code></pre>
<p>and running the test:</p>
<pre><code>$ python test.py
.
----------------------------------------------------------------------
Ran 1 test in 0.001s

OK
</code></pre>
</div>
<span class="comment-copy">Wouldn't you just <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_called_with" rel="nofollow noreferrer"><code>assert_called_with</code></a>?</span>
<span class="comment-copy">let me edit the question to show some sample code.I have tried assert_called_with but get no results there</span>
<span class="comment-copy">there... @mgilson I added some sample code. Thanks!</span>
<span class="comment-copy">What is <code>method_inside_someobject</code>? Did you mean to use <code>test1</code> there instead? Why are you rebinding <code>test1</code>?</span>
<span class="comment-copy">Also, the way you patched <code>SomeObject</code> is correct, which means you <i>definitely</i> should see <code>SomeObject.assert_called_with()</code> work. Can you make sure your <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> correctly reflects your situation <i>and works</i>?</span>
<span class="comment-copy">totally right, thank you!</span>
