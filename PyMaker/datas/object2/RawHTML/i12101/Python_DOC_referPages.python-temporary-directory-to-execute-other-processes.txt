<div class="post-text" itemprop="text">
<p>I have a string of Java source code in Python that I want to compile, execute, and collect the output (stdout and stderr). Unfortunately, as far as I can tell, <code>javac</code> and <code>java</code> require real files, so I have to create a temporary directory.</p>
<p>What is the best way to do this? The tempfile module seems to be oriented towards creating files and directories that are only visible to the Python process. But in this case, I need Java to be able to see them too. However, I also want the other stuff to be handled intelligently if possible (such as deleting the folder when done or using the appropriate system temp folder)</p>
</div>
<div class="post-text" itemprop="text">
<p><code>tempfile.mkstemp</code> creates a file that is normally visible in the filesystem and returns you the path as well. You should be able to use this to create your input and output files - assuming <code>javac</code> will atomically overwrite the output file if it exists there should be no race condition if other processes on your system don't misbehave.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/tempfile.html#tempfile.NamedTemporaryFile" rel="noreferrer"><code>tempfile.NamedTemporaryFile</code></a> and <a href="https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryDirectory" rel="noreferrer"><code>tempfile.TemporaryDirectory</code></a> work perfectly fine for your purposes. The resulting objects have a <code>.name</code> attribute that provides a file system visible name that <code>java</code>/<code>javac</code> can handle just fine, just make sure to:</p>
<ol>
<li>Set the <code>suffix</code> appropriately if the compiler insists on files being named with a <code>.java</code> extension</li>
<li>Always call <code>.flush()</code> on the file handle before handing the <code>.name</code> of a <code>NamedTemporaryFile</code> to an external process or it may (usually will) see an incomplete file</li>
</ol>
<p>If you don't want Python cleaning up the files when you close the objects, either pass <code>delete=False</code> to <code>NamedTemporaryFile</code>'s constructor, or use the <code>mkstemp</code> and <code>mkdtemp</code> functions (which create the objects, but don't clean them up for you).</p>
<p>So for example, you might do:</p>
<pre><code># Create temporary directory for source and class files
with tempfile.TemporaryDirectory() as d:

    # Write source code
    srcpath = os.path.join(d.name, "myclass.java")
    with open(srcpath, "w") as srcfile:
        srcfile.write('source code goes here')

    # Compile source code
    subprocess.check_call(['javac', srcpath])

    # Run source code
    # Been a while since I've java-ed; you don't include .java or .class
    # when running, right?
    invokename = os.path.splitext(srcpath)[0]
    subprocess.check_call(['java', invokename])
... with block for TemporaryDirectory done, temp directory cleaned up ...
</code></pre>
</div>
<span class="comment-copy">Using <code>tempfile.mktemp()</code> just gives you a string.  That string is a path that you can use to create a file.  You can then pass that path to <code>javac</code> and <code>java</code>.</span>
<span class="comment-copy"><code>tempfile.mktemp</code> is deprecated because it doesn't create the file. This results in a race condition hazard because another process may claim the same randomly generated file name before you have the chance to create it.</span>
<span class="comment-copy">According to the documentation, it is marked non-executable. Will I still be able to execute the resulting classfile?</span>
<span class="comment-copy">I don't think the executable bit makes a difference for .class files. You can always change the bit though.</span>
<span class="comment-copy">Looks like mkstemp does work. Java runs just fine.</span>
<span class="comment-copy">tempfile.TemporaryDirectory doesn't exist in Python 2. I guess I have to use mkdtemp then?</span>
<span class="comment-copy">@Antimony: You could build your own <code>TemporaryDirectory</code> out of <code>mkdtemp</code>, <a href="https://docs.python.org/3/library/shutil.html#shutil.rmtree" rel="nofollow noreferrer"><code>shutil.rmtree</code></a>, and <a href="https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager" rel="nofollow noreferrer"><code>contextlib.contextmanager</code></a>; shouldn't take more than a dozen lines of code at the outside. Or, you know, move to Python 3. It's full of cool things! :-)</span>
<span class="comment-copy">And in fact, aside from not being lazy and using <code>contextmanager</code>, that's basically how it works in  the <a href="https://hg.python.org/cpython/file/3.5/Lib/tempfile.py#l777" rel="nofollow noreferrer">Python 3 implementation</a>.</span>
