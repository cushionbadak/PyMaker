<div class="post-text" itemprop="text">
<p>Is there a way in Python to convert characters as they are being entered by the user to asterisks, like it can be seen on many websites?</p>
<p>For example, if an email user was asked to sign in to their account, while typing in their password, it wouldn't appear as characters but rather as <code>*</code> after each individual stroke without any time lag.</p>
<p>If the actual password was <code>KermitTheFrog</code>, it would appear as <code>*************</code> when typed in.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is <a href="https://docs.python.org/3/library/getpass.html#getpass.getpass"><code>getpass()</code></a>, a function which <em>hides</em> the user input.</p>
<pre><code>import getpass

password = getpass.getpass()
print(password)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your using Tkinter:(this is Python 2.x. However, 3.x would be very similar)</p>
<pre><code>from Tkinter import *

master = Tk()

PassWord = Entry(master, bd=5, width=20, show="*")
PassWord.pack()

master.mainloop()
</code></pre>
<p>In the shell, this is not possible. You can however write a function to store the entered text and report only a string of *'s when called.
<a href="http://pythonfiddle.com/censor-replace-with-asterisks/" rel="noreferrer">Kinda like this</a>, which I did not write. I just Googled it.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do this:</p>
<pre><code># if getch module is available, then we implement our own getpass() with asterisks,
# otherwise we just use the plain boring getpass.getpass()
try:
    import getch
    def getpass(prompt):
        """Replacement for getpass.getpass() which prints asterisks for each character typed"""
        print(prompt, end='', flush=True)
        buf = ''
        while True:
           ch = getch.getch()
           if ch == '\n':
               print('')
               break
           else:
               buf += ch
               print('*', end='', flush=True)
        return buf
except ImportError:
     from getpass import getpass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may want to check <a href="https://docs.python.org/2/library/getpass.html#getpass.getpass" rel="nofollow"><code>getpass</code></a> function.</p>
<blockquote>
<p>Prompt the user for a password without echoing. The user is prompted
  using the string prompt, which defaults to 'Password: '. On Unix, the
  prompt is written to the file-like object stream. stream defaults to
  the controlling terminal (/dev/tty) or if that is unavailable to
  sys.stderr (this argument is ignored on Windows).</p>
</blockquote>
<p>Note: This module mimics unix password prompts and does not show asterisks.</p>
<p>Usage: </p>
<pre><code>import getuser
getuser.getpass()
</code></pre>
</div>
<span class="comment-copy">This is pretty vague, to me - what is your source of input? A web page? Terminal? A tkinter text area? Yes to all, but it's different for each</span>
<span class="comment-copy">I was actually doing this for a school project and i'm a very basic programmer.... but i'll try to use the tkinter text area so if u could help with that it'd be great</span>
<span class="comment-copy">@LeroyJD Glad I could help! If this has solved your question please consider <a href="https://meta.stackexchange.com/questions/5234/how-does-accepting-an-answer-work">accepting it</a> by clicking the checkmark.</span>
<span class="comment-copy">yes but do you know something that could display (*) instead of nothing while typing the password?</span>
<span class="comment-copy">This hides the password entirely. It does not display asterisks (*).</span>
<span class="comment-copy">Thank you very much :D... Even though it isn't in the shell it works like a charm and i think i might actually use the tk gui for that part of my program :D</span>
<span class="comment-copy">While the wildcard import seems to make code neater and more tidy, <a href="http://stackoverflow.com/questions/14626674/in-python-is-it-a-good-practice-to-import-all-attributes-with-a-wildcard">using it is considered a bad practice</a>.</span>
