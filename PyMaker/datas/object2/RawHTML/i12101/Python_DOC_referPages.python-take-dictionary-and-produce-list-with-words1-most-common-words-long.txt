<div class="post-text" itemprop="text">
<p>So i made a function</p>
<pre><code>def word_count(string):
    my_string = string.lower().split()
    my_dict = {}
    for item in my_string:
        if item in my_dict:
            my_dict[item] += 1
        else:
            my_dict[item] = 1
    print(my_dict)
</code></pre>
<p>so, what this does is that it takes a string, splits it, and produces a dictionary with the key being the word, and the value being how many times it appears.</p>
<p>Okay, so what im trying to do now, is to make a function that takes the output of that function, and produces a list in the following format-</p>
<p>((list of words longer than 1 letter),(list of most frequent words), (list of words with the longest length))</p>
<p>also, for example lets say two words have appeared 3 times, and both words are 6 letters long, it should include both words in both the (most frequent) and (longest length) lists.</p>
<p>So, this has been my attempt thus far at tackling this problem</p>
<pre><code>def analyze(x):
    longer_than_one= []
    most_frequent= []
    longest= []
    for key in x.item:
        if len(key) &gt;1:
            key.append(longer_than_one)
    print(longer_than_one)
</code></pre>
<p>so what i was trying to do here, is make a series of for and if loops, that append to the lists depending on whether or not the items meet the criteria, however i have run into the following problems:-</p>
<p>1- how do i iterate over a dictionary without getting an error?</p>
<p>2- I cant figure out a way to count the most frequent words (i was thinking to append the keys with the highest values)</p>
<p>3- I cant figure out a way to only append the words that are the longest in the dictionary (i was thinking of using len(key) but it said error)</p>
<p>If it's any help, im working in Anaconda's Spyder using Python 3.5.1 ,any tips would be appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>You really are trying to re-invent the wheel.</p>
<p>Imagine you have <code>list_of_words</code> which is, well, a list of strings.</p>
<p>To get the most frequent word, use <code>Counter</code>:</p>
<pre><code>from collections import Counter
my_counter = Counter(list_of_words)
</code></pre>
<p>To sort the list by the length:</p>
<pre><code>sorted_by_length = sorted(list_of_words, key=len)
</code></pre>
<p>To get the list of words longer than one letter you can simply use your sorted list, or create a new list with only these:</p>
<pre><code>longer_than_one_letter = [word for word in list_of_words if len(word) &gt; 1]
</code></pre>
<p>To get your output on your required format, simply use all of the above.</p>
</div>
<div class="post-text" itemprop="text">
<p>Most of your problems are solved or get easier when you use a <code>Counter</code>.</p>
<p>Writing <code>word_count</code> with a <code>Counter</code>:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; def word_count(string):
...     return Counter(string.split())
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; c = word_count('aa aa aa xxx xxx xxx b b ccccccc')
&gt;&gt;&gt; c
Counter({'aa': 3, 'xxx': 3, 'b': 2, 'ccccccc': 1})
&gt;&gt;&gt; c['aa']
3
</code></pre>
<p>The <code>most_common</code> method of a <code>Counter</code> helps with getting the most frequent words:</p>
<pre><code>&gt;&gt;&gt; c.most_common()
[('aa', 3), ('xxx', 3), ('b', 2), ('ccccccc', 1)]
&gt;&gt;&gt; c.most_common(1)
[('aa', 3)]
&gt;&gt;&gt; max_count = c.most_common(1)[0][1]
&gt;&gt;&gt; [word for word, count in c.items() if count == max_count]
['aa', 'xxx']
</code></pre>
<p>You can get the words themselves with <code>c.keys()</code></p>
<pre><code>&gt;&gt;&gt; c.keys()
['aa', 'xxx', 'b', 'ccccccc']
</code></pre>
<p>and a list of words with the longest length this way:</p>
<pre><code>&gt;&gt;&gt; max_len = len(max(c, key=len))
&gt;&gt;&gt; [word for word in c if len(word) == max_len]
['ccccccc']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>1)
To iterate over dictionary you can either use:</p>
<pre><code>for key in my_dict:
</code></pre>
<p>or if you want to get key and value at the same time use:</p>
<pre><code>for key, value in my_dict.iteritems():
</code></pre>
<p>2)
To find most frequent words you have to assume that first word is most frequent, then you look at next word used count and if it's the same you append it to your list, if it's less just skip it, if it's more - clear you list and assume that this one is most frequent</p>
<p>3) Pretty much the same as 2. Assume that your first is longest the compare if next one, if it's lenght equals to your current max just append to a list, if it's less skip it, if it's more clear your list and assume that this is your max.</p>
<p>I didn't add any code since it's better if you write it your own in order to learn something</p>
</div>
<div class="post-text" itemprop="text">
<p>There are other nice answers for your question, But I would like to help you in your attempt, I have done few modification in your code to make it working- </p>
<pre><code>def analyze(x):
        longer_than_one= []
        most_frequent= []
        longest= []
        for key in x:
            if len(key) &gt;1:
                longer_than_one.append(key)
        print(longer_than_one)
</code></pre>
<p>It seems you haven't attempted for 2nd and 3rd use case.</p>
</div>
<div class="post-text" itemprop="text">
<p>At first, check <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>collections.Counter</code></a>:</p>
<pre><code>import collections

word_counts = collections.Counter(your_text.split())
</code></pre>
<p>Given that, you can use its <code>.most_common</code> method for the most common words. It produces a list of (word, its_count) tuples.</p>
<p>To discover the longest words in the dictionary, you can do:</p>
<pre><code>import heapq

largest_words= heapq.nlargest(N, word_counts, key=len)
</code></pre>
<p><em>N</em> being the count of largest words you want. This works because by default the iteration over a <code>dict</code> produces only the keys, so it sorts them according to the word length (<code>key=len</code>) and returns only the <em>N</em> largest ones.</p>
<p>But you seem to have fallen deep into Python without going over the tutorial. Is it homework?</p>
</div>
<span class="comment-copy">Is this homework based on some assumptions or do you need ordinary dictionaries and especially want that kind of output for some own problem? I suspect some <a href="http://xyproblem.info/" rel="nofollow noreferrer">XY problem</a> here. Also you might want to have a look at the python library: <code>collections.Counter</code>.</span>
<span class="comment-copy">You need to fix your indentation. All lines of code should be offset by 4 spaces to be formatted correctly. Try using <code>ctrl-k</code> to auto format.</span>
<span class="comment-copy">To fix the indentation, accept the edit by AlokThakur.</span>
<span class="comment-copy">The first part where you create the dict and count items can be solved more elegantly with collections.defaultdict. You might want to look at that one :)</span>
