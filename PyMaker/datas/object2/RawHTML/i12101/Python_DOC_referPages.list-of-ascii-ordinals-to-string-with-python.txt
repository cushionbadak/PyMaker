<div class="post-text" itemprop="text">
<p>I've got a list of ascii ordinals like:</p>
<pre><code>[102, 114, 97, 110, 99, 101, 115, 99, 111, 0, 0, 0, 0, 0, 0, 0]
</code></pre>
<p>now I want to transform this to a string removing the null characters at the end.</p>
<p>I've tried with</p>
<pre><code>contenuto_tag = "".join(map(chr, backdata)) 
</code></pre>
<p>but when I pass it to a function like:</p>
<pre><code>enos.system("php ../trigger_RFID.php %s"%(contenuto_tag))
</code></pre>
<p>I've got this error:</p>
<pre><code>TypeError: must be string without null bytes, not str
</code></pre>
<p>maybe because there are the null characters at the end.</p>
</div>
<div class="post-text" itemprop="text">
<p>Filter out the null bytes first (Python 2 version):</p>
<pre><code>&gt;&gt;&gt; a = [102, 114, 97, 110, 99, 101, 115, 99, 111, 0, 0, 0, 0, 0, 0, 0]
&gt;&gt;&gt; str(bytearray(filter(None, a)))
'francesco'
</code></pre>
<p>Alternative way to do it:</p>
<pre><code>&gt;&gt;&gt; ''.join(map(chr, filter(None, a)))
'francesco'
</code></pre>
<p>Some timings:</p>
<pre><code>In [13]: a = a*1000    
In [14]: timeit ''.join(chr(i) for i in a if i)
1000 loops, best of 3: 1.44 ms per loop    
In [15]: timeit str(bytearray(filter(None, a)))
1000 loops, best of 3: 259 µs per loop    
In [16]: timeit ''.join(map(chr, filter(None, a)))
1000 loops, best of 3: 911 µs per loop
</code></pre>
<p>edit:</p>
<p>The <code>bytearray</code> approach that works on both Python 2/3 versions looks like this:</p>
<pre><code>&gt;&gt;&gt; bytearray(filter(None, a)).decode('ascii')
'francesco'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a comprehension instead and only do your <code>chr</code> on non 0:</p>
<pre><code>a = [102, 114, 97, 110, 99, 101, 115, 99, 111, 0, 0, 0, 0, 0, 0, 0]

b = ''.join(chr(i) for i in a if i)

print(b) # outputs francesco
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3, to convert a list of ascii ordinals to a bytestring, you could <a href="https://docs.python.org/3/library/functions.html#bytes" rel="nofollow noreferrer">use <code>bytes</code> constructor directly</a>:</p>
<pre><code>&gt;&gt;&gt; a = [102, 114, 97, 110, 99, 101, 115, 99, 111, 0, 0, 0, 0, 0, 0, 0]
&gt;&gt;&gt; bytes(a)
b'francesco\x00\x00\x00\x00\x00\x00\x00'
</code></pre>
<p>To remove trailing zero bytes, you could call <a href="https://docs.python.org/3/library/stdtypes.html#bytes.rstrip" rel="nofollow noreferrer"><code>.rstrip(b'\0')</code></a>:</p>
<pre><code>&gt;&gt;&gt; bytes(a).rstrip(b'\0')
b'francesco'
</code></pre>
<p>If the input should stop at the first zero byte (like C strings -- NUL terminated):</p>
<pre><code>&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; ctypes.create_string_buffer(bytes(b)).value
b'francesco'
</code></pre>
<p>To remove all zero bytes (wherever they are), call <a href="https://docs.python.org/3/library/stdtypes.html#bytes.replace" rel="nofollow noreferrer"><code>.replace()</code></a>:</p>
<pre><code>&gt;&gt;&gt; bytes(a).replace(b'\0', b'')
b'francesco'
</code></pre>
<p>To get a Unicode string, call <a href="https://docs.python.org/3/library/stdtypes.html#bytes.decode" rel="nofollow noreferrer"><code>.decode('ascii')</code></a>:</p>
<pre><code>&gt;&gt;&gt; bytes(a).rstrip(b'\0').decode('ascii')
'francesco'
</code></pre>
<p>To make it work on both Python 2 and 3, <a href="https://docs.python.org/3/library/stdtypes.html#binary-sequence-types-bytes-bytearray-memoryview" rel="nofollow noreferrer">use <code>bytearray()</code> instead <code>bytes()</code></a>:</p>
<pre><code>&gt;&gt;&gt; bytearray(a).rstrip(b'\0').decode('ascii')
'francesco'
</code></pre>
<p>The performance of these methods is comparable or better than <code>bytearray(filter(None, a))</code> solution from <a href="https://stackoverflow.com/a/35653306/4279">@timgeb's answer</a>.</p>
</div>
<span class="comment-copy">I've used your second solution. Thanks!</span>
<span class="comment-copy">@DomenicoCatino no problem. I've added some timings for the three solutions you got.</span>
<span class="comment-copy">@timgeb...is this Python2 or 3?</span>
<span class="comment-copy">@IronFist 2.7.6</span>
<span class="comment-copy">@IronFist In Python3, <code>bytearray(filter(None, a)).decode('ascii')</code> would work.</span>
