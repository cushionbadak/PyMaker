<div class="post-text" itemprop="text">
<p>Python has the <a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow">Truth Value Testing</a> feature for all the objects. Which enables the <a href="https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not" rel="nofollow">Boolean Operators</a> a more generic definition that suits for all objects:</p>
<ul>
<li><code>x or y</code>: if x is false, then y, else x</li>
<li><code>x and y</code>: if x is false, then x, else y</li>
</ul>
<p>I've seen practical use cases for the OR-operator, for example:</p>
<pre><code>ENV_VAR = os.environ.get(‘ENV_VAR’) or &lt;default_value&gt;
</code></pre>
<p>However, not have I seen any practical example of using the Python AND operator. Here I'm looking for examples of AND operator that takes advantage of the truth value testing like the OR operator example above.</p>
</div>
<div class="post-text" itemprop="text">
<p>By far the most common use of <code>and</code> in python is just to check multiple conditions:</p>
<pre><code>if 13 &lt;= age &lt;= 19 and gender == 'female':
    print "it's a teenage girl"
</code></pre>
<p>Use cases for <code>and</code> which take advantage of the arguably surprising fact that <code>x and y</code> returns one of the operands, rather than returning a boolean, are few and far between.  There is almost always a clearer and more readable way to implement the same logic.  </p>
<p>In older python code, you can often find the construct below, which is a buggy attempt to replicate the behaviour of C's ternary operator (<code>cond ? : x : y</code>).</p>
<pre><code>cond and x or y
</code></pre>
<p>It has a flaw: if <code>x</code> is <code>0</code>, <code>None</code>, <code>''</code>, or any kind of falsey value then <code>y</code> would be selected instead, so it is not quite equivalent to the C version.  </p>
<p>Below is a "fixed" version:</p>
<pre><code>(cond and [x] or [y])[0]
</code></pre>
<p>These kind of and/or hacks are mostly obsolete now since python introduced the <a href="https://www.python.org/dev/peps/pep-0308/" rel="nofollow">conditional expression</a>.</p>
<pre><code>x if cond else y
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The feature used in your example</p>
<pre><code>os.environ.get(‘ENV_VAR’) or &lt;default_value&gt;
</code></pre>
<p>is called <strong>short circuit evaluation</strong>. If this aspect of AND and OR is the subject of your question, you may find this Wikipedia article useful:</p>
<p><a href="https://en.wikipedia.org/wiki/Short-circuit_evaluation" rel="nofollow">https://en.wikipedia.org/wiki/Short-circuit_evaluation</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I found great examples for both <code>and</code> and <code>or</code> operator in this answer: <a href="https://stackoverflow.com/a/28321263/5050657">https://stackoverflow.com/a/28321263/5050657</a></p>
<p>Direct quote from the answer:</p>
<blockquote>
<p>Python's <code>or</code> operator returns the first Truth-y value, or the last value, and stops. This is very useful for common programming assignments that need <strong><em>fallback</em></strong> values.</p>
<p>Like this simple one:</p>
<pre><code>print my_list or "no values"
</code></pre>
<p>...</p>
<p>The compliment by using <code>and</code>, which returns the first False-y value, or the last value, and stops, is used when you want a <strong><em>guard</em></strong> rather than a fallback.</p>
<p>Like this one:</p>
<pre><code>my_list and my_list.pop()
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>I am sometimes using <code>and</code> when I need to get an attribute of an object if it's not <code>None</code>, otherwise get <code>None</code>:</p>
<pre><code>&gt;&gt;&gt; import re

&gt;&gt;&gt; match = re.search(r'\w(\d+)', 'test123')

&gt;&gt;&gt; number = match and match.group(1)

&gt;&gt;&gt; number
&gt;&gt;&gt; '123'

&gt;&gt;&gt; match = re.search(r'\w(\d+)', 'test')

&gt;&gt;&gt; number = match and match.group(1)

&gt;&gt;&gt; number
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Any time you need a statement where two things should be true. For example:</p>
<pre><code># you want to see only odd numbers that are in both lists
list1 = [1,5,7,6,4,9,13,519231]
list2 = [55,9,3,20,18,7,519231]
oddNumsInBothLists = [element for element in set(list1) if element in set(list2) and element % 2]
# =&gt; oddNumsInBothLists = [7, 9, 519231]
</code></pre>
<p>Boolean operators, particularly the and, can generally be omitted at the expense of readability. The builtin function <code>all()</code> will return true if, and only if, all of its members are true. Similarly, the function <code>any()</code> will return true if any of its members are true.</p>
<pre><code>shouldBeTrue = [foo() for foo in listOfFunctions]
if all(shouldBeTrue):
    print("Success")
else:
    print("Fail")
</code></pre>
<p>Perhaps an easier way of thinking about it is that <code>or</code> would be used in place of successive if-statements whereas <code>and</code> would be used in place of nested if-statements.</p>
<pre><code>def foobar(foo, bar):
    if(foo):
        return foo
    if(bar):
        return bar
    return False
</code></pre>
<p>is functionally identical to:</p>
<pre><code>def foobar(foo, bar):
    return foo or bar
</code></pre>
<p>And:</p>
<pre><code>def foobar(foo, bar):
    if(foo):
        if(bar):
            return bar
    return False
</code></pre>
<p>is functionally identical to:</p>
<pre><code>def foobar(foo, bar):
    return foo and bar
</code></pre>
<p>This can be demonstrated with a simple test.</p>
<pre><code>class Foo:
    def __init__(self, name):
        self.name = name

test1 = Foo("foo")
test2 = Foo("bar")

print((test1 or test2).name) # =&gt; foo
print((test1 and test2).name) # =&gt; bar
print((not test1 and not test2).name) # =&gt; AttributeError for 'bool' (False)
</code></pre>
</div>
<span class="comment-copy"><code>os.getenv('ENV_VAR', default=default_value)</code> is better</span>
<span class="comment-copy">Sounds more like JavaScript... Not sure anyone uses it in Python.</span>
<span class="comment-copy">You have not seen <code>if condition1 and condition2: do_something</code>?</span>
<span class="comment-copy">Thanks @wim, yes it does look more explicit than mine. I have another example in mind, which is <code>name = input('Enter your name: ') or 'Unknown'</code>. Do you think this is a better example here?</span>
<span class="comment-copy">@gill, yes yours is a absolutely right example. However, I failed to see its correlation to taking advantage of truth value testing. Could you be more specific? I should've been more specific that I'd like to see examples that won't be possible in Java.</span>
<span class="comment-copy">The examples you have given are not identical.</span>
<span class="comment-copy">@wim Functionally, I believe they are.</span>
<span class="comment-copy">Thanks @Goodies for your answer, I get your point. You are explaining the short-circuit evaluation of <code>and</code> and <code>or</code>. However, in your example functions, because they only returns the truth value based on <code>foo</code> and <code>bar</code>, you are omitting the fact that <code>and</code> and <code>or</code> can also return an object. That's why they aren't identical.</span>
<span class="comment-copy">@dawran6 Thanks! I knew that, but it didn't cross my mind as I wrote this. Updated.</span>
