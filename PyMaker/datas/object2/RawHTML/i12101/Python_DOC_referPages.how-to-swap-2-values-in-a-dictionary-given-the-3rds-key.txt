<div class="post-text" itemprop="text">
<p>Suppose that I have dictionary with 3 keys <code>'x'</code>, <code>'y'</code> and <code>'z'</code>. What I need to do is to write a function that, given <code>'x'</code> as argument, swaps the values stored in <code>'y'</code> and <code>'z'</code>.</p>
<pre><code>def swap(d, key):
    a, b = [_ for _ in d if _ != key]
    d[a], d[b] = d[b], d[a]
</code></pre>
<p>This is what I've came up with, but I'm looking for a more simple and concise way. Is there any, as far as you know?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a slightly more clever means of determining the keys to swap by doing:</p>
<pre><code>a, b = d.keys() - {key}  # On Py3; on Python 2.7, you'd use d.viewkeys()
</code></pre>
<p>but it's a pretty minor "improvement"; using <code>set</code> operations moves more work to the C layer, avoiding the Python layer iteration of a <code>list</code> comprehension, but the difference when you're talking about iterating three values is pretty trivial.</p>
<p>It's using a <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.KeysView" rel="nofollow"><code>KeysView</code></a> (a live, <code>set</code>-like view of the <code>dict</code>'s keys) to get <code>set</code> operations to preserve the two keys not passed.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd do this this way, to avoid using loop:</p>
<pre><code>def swap(dictS, key):
    keys = list(dictS.keys())
    keys.remove(key)
    dictS[keys[0]], dict[keys[1]] = dictS[keys[1]], dict[keys[0]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To solve this, we first need to find the two keys that are not same as the input key. We then just swap the values for those keys.</p>
<pre><code>def swap(d, key):
   keys_to_swap = []
   for k in d:
       if k != key:
           keys_to_swap.append(k)
   # keys_to_swap are the keys that need to be swapped
   # Swap now
   temp = d.get(keys_to_swap[0])
   d[keys_to_swap[0]] = d.get(keys_to_swap[1])
   d[keys_to_swap[1]] = temp
   return d
</code></pre>
<p>Your original answer is correct, but you are not returning d.
So to correct your solution:</p>
<pre><code>def swap2(d, key):
    a, b = [_ for _ in d if _ != key]
    d[a], d[b] = d[b], d[a]
    return d #Added this line
</code></pre>
</div>
<span class="comment-copy">Your existing code seems good to me. It could definitely use some better name choices, but other than that, it's simple and straightforward.</span>
<span class="comment-copy">Thanks for the hint. What names do you suggest?</span>
<span class="comment-copy"><code>_</code> is definitely a bad choice. It implies that you're discarding the value. I'd suggest changing it, but ShadowRanger's suggestion lets you get rid of the variable entirely. <code>swap</code> suggests a commutative operation that swaps its arguments, and <code>key</code> could be more informative about how it's the unaffected key, but the best replacement choices would depend heavily on the context in which you're using this function. It seems like your context probably has a meaningful name for this operation.</span>
<span class="comment-copy">This involves repeated lookups to get the values; sequence unpacking is a good thing, and should be used when appropriate to avoid repeated lookups of the same values; <a href="https://en.wikipedia.org/wiki/Don't_repeat_yourself" rel="nofollow noreferrer">DRY</a>.</span>
<span class="comment-copy">This isn't really an improvement over what the questioner already has.</span>
<span class="comment-copy">I don't want the function to return <code>d</code>. It just needs to swap the values.</span>
<span class="comment-copy">I misunderstood the question. Sorry!</span>
