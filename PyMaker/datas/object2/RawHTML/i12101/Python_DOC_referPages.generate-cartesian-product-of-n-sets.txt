<div class="post-text" itemprop="text">
<p>How to generate permutations of n variables given the domain of each variable. (in python)</p>
<p>I know about itertools, but that requires a fixed domain for the permutations so that won't work. Also is there a python library that does this? Thanks.</p>
<p>Basically:
Given 3 variables: 
A with Domain (2,3)
B with Domain (1)
C with Domain (1,2,3)</p>
<p>How do you generate all permutations of ABC?</p>
<pre><code>2,1,1
3,1,1
2,1,2
3,1,2
2,1,3
3,1,3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; list(itertools.product((2, 3), (1,), (1, 2, 3)))
[(2, 1, 1), (2, 1, 2), (2, 1, 3), (3, 1, 1), (3, 1, 2), (3, 1, 3)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>itertools.product</code> function does not require "fixed domain" as you state, nor do any functions.</p>
<p>For example this code does what you want:</p>
<pre><code>a = [2, 3]
b = [1]
c = [1, 2, 3]
print(itertools.product(a, b, c))
</code></pre>
<p>and would do the same for any set of sequences of any length.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>itertools.product</code> has been duly suggested and works fine for the problem at hand. If you are - if only for academic reasons - interested in a sample implementation, here's a generator function:</p>
<pre><code>def cartesian_product(*lists):  # lists can really be any sequences
    if any([not l for l in lists]):  # c.p. is empty if any list is empty
        return

    n = len(lists)
    indexes = [0] * n

    while True:
        yield tuple(lists[i][indexes[i]] for i in xrange(n))  # currently indexed element of each list
        # update indexes
        for i in xrange(n-1, -1, -1):  # loop through indexes from back
            if indexes[i] &lt; len(lists[i]) - 1:      # stop at first index that can be incremented ...
                indexes[i] += 1                     # ... increment it ...
                indexes[i+1:n] = [0] * (n - i - 1)  # ... reset all succeeding indexes to 0
                break
        else:  # no index could be incremented -&gt; end
            break
</code></pre>
</div>
<span class="comment-copy">You mean combinations, not permutations?</span>
<span class="comment-copy">I think OP meant the <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer">cartesian product</a></span>
