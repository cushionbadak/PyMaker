<div class="post-text" itemprop="text">
<p>I want to define a function that accepts and arbitrary number of dictionaries but at least two and I want to iterate over all of them. Currently I'm just creating a list of the first two and append the optional ones:</p>
<pre><code>def func(dict1, dict2, *dicts):
    dicts = [dict1, dict2] + list(dicts)
    for d in dicts:
        # Do stuff
</code></pre>
<p>But I feel that's a bit unnecessarily complicated. I wondered if one alternative with checking the length of the <code>*dicts</code> might be better because I don't need to create a new iterable:</p>
<pre><code>def func(*dicts):
    if len(dicts) &lt; 2:
        raise ValueError('Too few dictionaries, you must give this function at least 2.')
    for d in dicts:
        # Do stuff
</code></pre>
<p>But still I don't feel like that's very convenient since I need to explain this somewhere because the function signature looks like it would accept an arbitrary number of dicts (even 0 or 1). So is there any way to have the signature of the first option without having to create a complete <em>new</em> iterable in the function?</p>
</div>
<div class="post-text" itemprop="text">
<p>The first approach seems fine to me, you can simplify it a tiny bit by using a tuple instead of a list for the first pair so you don't need an extra <code>list</code> call:</p>
<pre><code>all_dicts = (dict1, dict2) + dicts
</code></pre>
<p>And if you're just iterating, you don't need to make a temporary variable:</p>
<pre><code>for d in (dict1, dict2) + dicts:
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>An option is to use <a href="https://docs.python.org/3/library/itertools.html?highlight=chain#itertools.chain" rel="nofollow"><code>itertools.chain()</code></a>:</p>
<pre><code>from itertools import chain

def func(dict1, dict2, *dicts):
    for d in chain((dict1, dict2), dicts):
        # Do stuff
</code></pre>
<p>I don't think that this is any simpler, nor more efficient, than the first of your proposed solutions. And it requires an import. @tzaman's answer seems good.</p>
</div>
