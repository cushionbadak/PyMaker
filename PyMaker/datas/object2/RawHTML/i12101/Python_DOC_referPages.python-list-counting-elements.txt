<div class="post-text" itemprop="text">
<p>I have a code as below</p>
<p>How can I find that abc is a list made up of lists?</p>
<p>Whats wrong with my map function?</p>
<p>I want my function to return count of each element in my input list divided by length of my list.</p>
<p>Something like </p>
<pre><code>{'brown': 0.16666666666666666, 'lazy': 0.16666666666666666, 'jumps': 0.16666666666666666, 'fox': 0.16666666666666666,  'dog': 0.16666666666666666, 'quick': 0.16666666666666666}
</code></pre>
<p>My code:</p>
<pre><code>quickbrownfox1=['quick', 'brown', 'fox', 'jumps', 'lazy', 'dog']
print quickbrownfox1


def tf(tokens):

    abc=([[x,(tokens.count(x))] for x in set(tokens)])
    print type(abc)#how to know that abc is made up of lists
    print type(abc[1])
    answer=abc.map(lambda input:(input(0)),input(1)/len(tokens)))

    return answer
    #return &lt;FILL IN&gt;

print tf((quickbrownfox1)) # Should give { 'quick': 0.1666 ... }
#print tf(tokenize(quickbrownfox)) # Should give { 'quick': 0.1666 ... }
</code></pre>
<h1>_______________________________________</h1>
<p>update 1</p>
<p>I updated my code as below. I get result <code>[('brown', 0), ('lazy', 0), ('jumps', 0), ('fox', 0), ('dog', 0), ('quick', 0)]</code> any idea why? If i do <code>return return list(map(lambda input: (input[0], input[1]), abc))</code>, it gives correct result - <code>[('brown', 1), ('lazy', 1), ('jumps', 1), ('fox', 1), ('dog', 1), ('quick', 1)]</code></p>
<pre><code>from __future__ import division
quickbrownfox1=['quick', 'brown', 'fox', 'jumps', 'lazy', 'dog']

def islistoflists(i):
    if isinstance(i, list):
        if len(i) &gt; 0 and all(isinstance(t, list) for t in i):
            return True
    return False


def tf(tokens):

    print(islistoflists(tokens))

    abc = ([[x,tokens.count(x)] for x in set(tokens)])
    return list(map(lambda input: (input[0], input[1] / len(tokens)), abc))

print tf(quickbrownfox1)
</code></pre>
<hr/>
<p>update 2</p>
<p>I am using pyspark/spark. Could that be a reason for issues that i am facing in update1?</p>
</div>
<div class="post-text" itemprop="text">
<p>The counter solution will definitely be better. Your use of <code>tokens.count</code> gives the code quadratic time complexity. Heres your code fixed up. You should note that <code>map</code> is a standalone function, not a member function of a list or any other type.</p>
<pre><code>from __future__ import division
quickbrownfox1=['quick', 'brown', 'fox', 'jumps', 'lazy', 'dog']

def islistoflists(i):
    if isinstance(i, list):
        if len(i) &gt; 0 and all(isinstance(t, list) for t in i):
            return True
    return False


def tf(tokens):

    print(islistoflists(tokens))

    abc = ([[x,tokens.count(x)] for x in set(tokens)])
    return list(map(lambda input: (input[0], input[1] / len(tokens)), abc))

print tf(quickbrownfox1)
</code></pre>
<p>To test if you have a list of lists, you can use <code>isinstance</code> to check the type of the parent object and if its a list and has at least one element in it, you can loop through them using <code>isinstance</code> to check if each child object is a list.</p>
<p>Note that I made your function return a list of tuples, implying that the items are read only, but you could make it return a list of lists by changing the line.</p>
<pre><code>return list(map(lambda input: [input[0], input[1] / len(tokens)], abc))
</code></pre>
<p>If you look at it closely you'll see that a set of parenthesis have been substituted for square brackets, making each element a list.</p>
<p>If you have a older version of python 2 that does not support the <code>from __future__ import division</code> import you can uses the following workaround to force float division to occur.</p>
<pre><code>return list(map(lambda input: (input[0], (input[1] * 1.0) / len(tokens)), abc))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Based on what I think you're asking you could do something like</p>
<pre><code>token_size = len(tokens)
word_counter_list = {}
for word in tokens:
    if word in word_counter_list:
        word_counter_list[word] += 1
    else:
        word_counter_list[word] = 1

for word, amount in word_counter_list:
    print("The word " + word + " was used " + str(amount/token_size)
</code></pre>
<p>That being said the question isn't very clear since you're mentioning list type() but showing percentage of word frequency in a list</p>
</div>
<div class="post-text" itemprop="text">
<p>You should be able to do this fairly easily with a <a href="https://docs.python.org/3.1/library/collections.html#counter-objects" rel="nofollow">Counter</a>:</p>
<pre><code>$ python3
Python 3.4.2 (default, Oct  8 2014, 10:45:20) 
[GCC 4.9.1] on linux
Type "help", "copyright", "credits" or "license" for more information.
@&gt;&gt;&gt; from collections import Counter
@&gt;&gt;&gt; c = Counter(['quick', 'brown', 'fox', 'jumps', 'lazy', 'dog'])
@&gt;&gt;&gt; total = sum(c.values())
@&gt;&gt;&gt; result = dict()
@&gt;&gt;&gt; for key, value in c.items():
@...   result[key] = value/total
@... 
@&gt;&gt;&gt; result
{'dog': 0.16666666666666666, 'quick': 0.16666666666666666, 'fox': 0.16666666666666666, 'brown': 0.16666666666666666, 'jumps': 0.16666666666666666, 'lazy': 0.16666666666666666}
</code></pre>
<p>or, to make it super pythonic:</p>
<pre><code>dict([ (key, value/total) for key,value in c.items() ])
</code></pre>
</div>
<span class="comment-copy"><code>is a list made up of lists</code> ? Make a for loop on abc then check every element with <code>type()</code>. If all of them lists, then you got what you want.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> is a build-in function, not a method, so <code>abc.map</code> it will not work, you have to use as <code>map(function, abc)</code></span>
<span class="comment-copy">I tried your approach. I get an answer <code>[('brown', 0), ('lazy', 0), ('jumps', 0), ('fox', 0), ('dog', 0), ('quick', 0)]</code> when i use <code>list(map(lambda input: (input[0], int(input[1])/len(tokens) ), abc))</code>. My abc is <code>[['brown', 1], ['lazy', 1], ['jumps', 1], ['fox', a], ['dog', 1], ['quick', 1]]</code></span>
<span class="comment-copy">i am follwoing a MOOC and pyspark. Not sure about the python version!</span>
<span class="comment-copy">Use <code>float(input[1])</code> to force float division.</span>
<span class="comment-copy">any idea why my map function is not working?</span>
<span class="comment-copy">any idea why my map function is not working?</span>
<span class="comment-copy">it probably doesn't help that <code>list.map</code> is not a function; you are presumably looking for the <a href="https://docs.python.org/2/library/functions.html#map" rel="nofollow noreferrer">built-in function map</a></span>
<span class="comment-copy">Alternatively, use a <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>; much, much more readable and pythonic than lambdas.</span>
