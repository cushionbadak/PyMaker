<div class="post-text" itemprop="text">
<p>This is the question:</p>
<blockquote>
<p>Write a function named test_for_anagrams that receives two strings as
  parameters, both of which consist of alphabetic characters and returns
  True if the two strings are anagrams, False otherwise. Two strings are
  anagrams if one string can be constructed by rearranging the
  characters in the other string using all the characters in the
  original string exactly once. For example, the strings "Orchestra" and
  "Carthorse" are anagrams because each one can be constructed by
  rearranging the characters in the other one using all the characters
  in one of them exactly once. Note that capitalization does not matter
  here i.e. a lower case character can be considered the same as an
  upper case character.</p>
</blockquote>
<p>My code:</p>
<pre><code>def test_for_anagrams (str_1, str_2):
    str_1 = str_1.lower()
    str_2 = str_2.lower()
    print(len(str_1), len(str_2))
    count = 0
    if (len(str_1) != len(str_2)):
        return (False)
    else:
        for i in range(0, len(str_1)):
            for j in range(0, len(str_2)):
                if(str_1[i] == str_2[j]):
                    count += 1
        if (count == len(str_1)):
            return (True)
        else:
            return (False)


#Main Program
str_1 = input("Enter a string 1: ")
str_2 = input("Enter a string 2: ")
result = test_for_anagrams (str_1, str_2)
print (result)
</code></pre>
<p>The problem here is when I enter strings as <code>Orchestra</code> and <code>Carthorse</code>, it gives me result as <code>False</code>. Same for the strings <code>The eyes</code> and <code>They see</code>. Any help would be appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm new to python, so excuse me if I'm wrong    </p>
<p>I believe this can be done in a different approach: sort the given strings and then compare them.  </p>
<pre><code>def anagram(a, b):
  # string to list
  str1 = list(a.lower())
  str2 = list(b.lower())

  #sort list
  str1.sort()
  str2.sort()

  #join list back to string
  str1 = ''.join(str1)
  str2 = ''.join(str2)

  return str1 == str2

print(anagram('Orchestra', 'Carthorse'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that you just check whether <em>any</em> character matches exist in the strings and increment the counter then. You do not account for characters you already matched with another one. Thatâ€™s why the following will also fail:</p>
<pre><code>&gt;&gt;&gt; test_for_anagrams('aa', 'aa')
False
</code></pre>
<p>Even if the string is <em>equal</em> (and as such also an anagram), you are matching the each <code>a</code> of the first string with each <code>a</code> of the other string, so you have a count of <code>4</code> resulting in a result of <code>False</code>.</p>
<p>What you should do in general is count every character occurrence and make sure that every character occurs as often in each string. You can count characters by using a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>collections.Counter</code></a> object. You then just need to check whether the counts for each string are the same, which you can easily do by comparing the counter objects (which are just dictionaries):</p>
<pre><code>from collections import Counter
def test_for_anagrams (str_1, str_2):
    c1 = Counter(str_1.lower())
    c2 = Counter(str_2.lower())
    return c1 == c2
</code></pre>
<pre><code>&gt;&gt;&gt; test_for_anagrams('Orchestra', 'Carthorse')
True
&gt;&gt;&gt; test_for_anagrams('aa', 'aa')
True
&gt;&gt;&gt; test_for_anagrams('bar', 'baz')
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For completeness: If just importing <code>Counter</code> and be done with the exercise is not in the spirit of the exercise, you can just use plain dictionaries to count the letters.</p>
<pre><code>def test_for_anagrams(str_1, str_2):
    counter1 = {}
    for c in str_1.lower():
        counter1[c] = counter1.get(c, 0) + 1
    counter2 = {}
    for c in str_2.lower():
        counter2[c] = counter2.get(c, 0) + 1

    # print statements so you can see what's going on,
    # comment out/remove at will
    print(counter1)
    print(counter2)

    return counter1 == counter2
</code></pre>
<p>Demo:</p>
<pre><code>print(test_for_anagrams('The eyes', 'They see'))
print(test_for_anagrams('orchestra', 'carthorse'))
print(test_for_anagrams('orchestr', 'carthorse'))
</code></pre>
<p>Output:</p>
<pre><code>{' ': 1, 'e': 3, 'h': 1, 's': 1, 't': 1, 'y': 1}
{' ': 1, 'e': 3, 'h': 1, 's': 1, 't': 1, 'y': 1}
True
{'a': 1, 'c': 1, 'e': 1, 'h': 1, 'o': 1, 's': 1, 'r': 2, 't': 1}
{'a': 1, 'c': 1, 'e': 1, 'h': 1, 'o': 1, 's': 1, 'r': 2, 't': 1}
True
{'c': 1, 'e': 1, 'h': 1, 'o': 1, 's': 1, 'r': 2, 't': 1}
{'a': 1, 'c': 1, 'e': 1, 'h': 1, 'o': 1, 's': 1, 'r': 2, 't': 1}
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Traverse through string test and validate weather character present in string test1 if present store the data in string value.
compare the length of value and length of test1 if equals return True Else False.   </p>
<pre><code>def anagram(test,test1):
    value =''
    for data in test:
        if data in test1:
            value +=  data
    if len(value) == len(test1):
        return True
    else:
        return False

anagram("abcd","adbc")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have done Anagram Program in basic way and easy to understandable .</p>
<pre><code>    def compare(str1,str2):
if((str1==None) or (str2==None)):
    print(" You don't enter string .")
elif(len(str1)!=len(str2)):
    print(" Strings entered is not Anagrams .")
elif(len(str1)==len(str2)):
    b=[]
    c=[]
    for i in str1:
        #print(i)
        b.append(i)
    b.sort()
    print(b)
    for j in str2:
        #print(j)
        c.append(j)
    c.sort()
    print(c)
    if (b==c and b!=[] ):
        print(" String entered is Anargama .")
    else:
        print(" String entered are not Anargama.")
else:
    print(" String entered is not Anargama .")
str1=input(" Enter the first String :")
str2=input(" Enter the second String :")

compare(str1,str2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A more concise and pythonic way to do it is using sorted &amp; lower/upper keys.</p>
<p><strong>You can first sort the strings and then use lower/ upper to make the case consistent for proper comparison</strong> as follows:</p>
<pre><code># Function definition
def test_for_anagrams (str_1, str_2):
    if sorted(str_1).lower() == sorted(str_2).lower():
        return True
    else:
        return False

#Main Program
str_1 = input("Enter a string 1: ")
str_2 = input("Enter a string 2: ")
result = test_for_anagrams (str_1, str_2)
print (result)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>def anagram(test,test1):
    test_value = []
    if len(test) == len(test1):
        for i in test:
            value = test.count(i) == test1.count(i)
            test_value.append(value)
    else:
        test_value.append(False)</p>
<pre><code>if False in test_value:
    return  False
else:
    return True
</code></pre>
<p>check for length of test and test1 , if length matches traverse through string test and compare the character count in both test and test1 strings if matches store the value in string.</p>
</div>
<span class="comment-copy">no time to debug your program right now, but here's the short solution: <code>return Counter(str_1.lower()) == Counter(str_2.lower())</code> with <code>Counter</code> from <code>collections</code>.</span>
<span class="comment-copy">just a note - Counter is a part of <code>collections</code> module.  I wanted to post it an answer but @timgeb was quicker :)</span>
<span class="comment-copy">Okay thank you.</span>
<span class="comment-copy">You can also sort and then compare.</span>
<span class="comment-copy">@pp_ yeah but this problem can and should be solved in O(n).</span>
<span class="comment-copy">Never thought of this. Awesome.</span>
<span class="comment-copy">And if imports are not in the spirit of the exercise, construct your own counter as a plain dictionary by looping over each string once, then compare them.</span>
<span class="comment-copy">Thank you for the solution but I am just learning python. I don't know what is collections or counter.</span>
<span class="comment-copy">@KaranThakkar A counter applied on a string is just a dictionary which keeps track of how often each character appears in the string. So <code>Counter('barbaz')</code> would give you a dictionary <code>{'b': 2, 'a': 2, 'r': 1, 'z': 1}</code>. <code>Counter</code> just takes care of counting for you; but as timgeb said, you can start with an empty dictionary and just loop over the string and count the characters yourself.</span>
<span class="comment-copy">Welcome to Stack Overflow! Please try to provide a nice description about how your solution works. See:  <a href="https://stackoverflow.com/help/how-to-answer">How do I write a good answer?</a>. Thanks.</span>
<span class="comment-copy">This doens't work <code>anagram("bab","bad") == True</code> whereas it should be <code>False</code></span>
<span class="comment-copy">i missed this test case: def anagram(test,test1):     value =''      for index,data in enumerate(test):         if data in test1:             value +=  data       if len(value) == len(test1) and sorted(value) == sorted(test1) :         return True     else:         return False</span>
