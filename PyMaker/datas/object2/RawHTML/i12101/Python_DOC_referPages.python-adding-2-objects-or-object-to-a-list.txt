<div class="post-text" itemprop="text">
<p>I have a vector class which gives a vector with a list and I need to be able to add vectors or vectors to lists, tuples, and strings.  If they are not of the same length, I need to throw a type error. Some examples of output:</p>
<pre><code>Vector([6,8,2])+Vector([4,-3,2])
Vector([10, 5, 4])
&gt;&gt;&gt; Vector([6,8,2])+[4,-3,2]
Vector([10, 5, 4])
&gt;&gt;&gt; (6,8,2)+Vector([4,-3,2])
Vector([10, 5, 4])
&gt;&gt;&gt; v=Vector(["f","b"])
&gt;&gt;&gt; v+=("oo","oo")
&gt;&gt;&gt; v
Vector(['foo', 'boo'])
</code></pre>
<p>I need to make a + function and a += function.</p>
<p>Which python methods do I use to override the + and += operations, also I need to make sure that my + operation works on an object and a sequence and the reverse</p>
</div>
<div class="post-text" itemprop="text">
<p>To fully implement concatenation in arbitrary order, <a href="https://docs.python.org/3/reference/datamodel.html#object.__add__" rel="nofollow">you need to implement three methods, <code>__add__</code>, <code>__radd__</code> and <code>__iadd__</code></a>. You didn't implement <code>__add__</code> at all (so <code>Vector + sequence</code> doesn't work, only <code>sequence + Vector</code> using <code>__radd__</code>) and you misspelled <code>__iadd__</code> as <code>__iadd</code> (so <code>Vector += anything</code> doesn't work).</p>
</div>
<span class="comment-copy">you can check the type of the <code>other</code> argument by with <code>isinstance</code>, e.g., <code>isinstance(other, Vector)</code></span>
<span class="comment-copy">I think the <code>__iadd__</code> method is what you're looking for (for the += case). <a href="http://stackoverflow.com/questions/1047021/overriding-in-python-iadd-method" title="overriding in python iadd method">stackoverflow.com/questions/1047021/â€¦</a></span>
<span class="comment-copy">I made iadd work for 2 vectors and Im not sure why it doesn work for a vector and a sequence                                                                          &gt;&gt;&gt; v=Vector(["f","b"]) &gt;&gt;&gt; v+=("oo","oo") Traceback (most recent call last):   File "&lt;stdin&gt;", line 1, in &lt;module&gt; TypeError: unsupported operand type(s) for +=: 'instance' and 'tuple' &gt;&gt;&gt;</span>
<span class="comment-copy">Oh I didnt notice that.  I kind of get it I put in add with the same exact implementation as radd and it worked.</span>
<span class="comment-copy">@AnatoliySokolov: The basic rule is that the plain <code>__xxx__</code> method for binary operators is called when the instance is on the left side of the operator, <code>__rxxx__</code> is called when it is on the right side and the object on the left side's <code>__xxx__</code> didn't exist (or returned <code>NotImplemented</code>), and <code>__ixxx__</code> is called when using the augmented assignment operator. <code>__ixxx__</code> is optional; for immutable types, Python uses <code>__xxx__</code> when <code>__ixxx__</code> is missing. You may want to look at the <a href="https://docs.python.org/3/library/collections.abc.html#module-collections.abc" rel="nofollow noreferrer"><code>collections.abc</code> interfaces</a></span>
<span class="comment-copy">@AnatoliySokolov: You may also want to look at <a href="https://docs.python.org/3/library/numbers.html#implementing-the-arithmetic-operations" rel="nofollow noreferrer">Implementing the arithmetic operations</a> for tips on using an operator fallback based approach to avoiding lots of repetitious code; it's focused mathematical operations, but the same techniques apply to sequence operations, and the example given from <code>fractions.Fraction</code> can shorten code a lot.</span>
