<div class="post-text" itemprop="text">
<p>Based on a <a href="https://stackoverflow.com/questions/34930630/grouping-an-unknown-number-of-arguments-with-argparse#34930706">previous post</a>, I implemented the following modified <code>argparse.Action</code> which produces key-value pairs.</p>
<p>I want to allow <code>nargs</code> to be dynamically set, as well as provide the option to use a <code>defaultdict(list)</code> for cases where keys may appear more than once.</p>
<p>Here is the implementation I have:</p>
<pre><code>import argparse
from collections import defaultdict

class NamespaceAction(argparse.Action):
    """
    This modified action allows me to group together key-value pairs passed to an argument.
    Extended to produce a defaultdict(list) if requested, so that a key can appear more than once.
    """
    def __init__(self, *args, **kwargs):
        self.nargs = kwargs.get('nargs', 1)
        self.mode = kwargs.get('mode', 'dict')  # default mode is dict
        super(NamespaceAction, self).__init__(*args, **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        # The default value is often set to None rather than an empty list.
        current_arg_vals = getattr(namespace, self.dest, []) or []
        setattr(namespace, self.dest, current_arg_vals)
        arg_vals = getattr(namespace, self.dest)
        try:
            if self.mode == 'dict':
                arg_vals.append(argparse.Namespace(**dict(v.split('=') for v in values)))
            elif self.mode == 'defaultdict':
                d = defaultdict(list)
                for v in values:
                    v = v.split('=')
                    d[v[0]].append(v[1])
                arg_vals.append(argparse.Namespace(**d))
            else:
                raise NotImplementedError("only dict or defaultdict")
        except TypeError:
            raise RuntimeError('Group {} appears to be incorrectly formatted'.format(values))
</code></pre>
<p>However, using this leads to <code>TypeError: __init__() got an unexpected keyword argument 'mode'</code>. However, if I delete <code>mode</code> and <code>dict</code> from args/kwargs, it still does not work:</p>
<pre><code>def __init__(self, *args, **kwargs):
    self.nargs = kwargs.get('nargs', 1)
    self.mode = kwargs.get('mode', 'dict')  # default mode is dict
    if 'mode' in kwargs:
        del kwargs['mode']
    if 'nargs' in kwargs:
        del kwargs['nargs']
    super(NamespaceAction, self).__init__(*args, **kwargs)
</code></pre>
<p>Leads to <code>TypeError: __init__() takes at least 3 arguments (1 given)</code>.</p>
<p>How can I go about having this class take arguments, and still properly have the parent initialized?</p>
</div>
<div class="post-text" itemprop="text">
<p>You're expecting <code>nargs</code> to be positional, but it's an optional argument to <a href="https://docs.python.org/3/library/argparse.html#argparse.Action" rel="nofollow"><code>argparse.Action</code></a>; per the docs:</p>
<blockquote>
<p>The Action class must accept the two positional arguments plus any keyword arguments passed to <code>ArgumentParser.add_argument()</code> except for the <code>action</code> itself.</p>
</blockquote>
<p>You might try:</p>
<pre><code>def __init__(self, *args, **kwargs):
    # To force nargs, look it up, but don't bother setting on self;
    # just let it pass to the parent, if you remove it from kwargs, the
    # parent __init__ overwrites self.nargs with None
    nargs = kwargs['nargs'] 
    assert isinstance(nargs, int) or nargs == "+"
    # dict.pop is like get, but removes the mapping if it exists
    self.mode = kwargs.pop('mode', 'dict')  # Will use 'dict' as default

    # Pass along remaining arguments
    super(NamespaceAction, self).__init__(*args, **kwargs)
</code></pre>
</div>
<span class="comment-copy">Given that <code>Action.__init__</code> takes two positional arguments, <code>option_strings</code> and <code>dest</code>, it seems like a bad idea, if not just wrong, to assume the first positional argument to <code>NamespaceAction</code> is the number of arguments.</span>
<span class="comment-copy">True, I can change that to be another keyword argument.</span>
<span class="comment-copy">That still leads to the error <code>TypeError: __init__() takes at least 3 arguments (1 given)</code>.</span>
<span class="comment-copy">Nevermind, I was using it wrong. I need to use kwargs in <code>add_argument</code>, and not do <code>action=NamespaceAction()</code></span>
<span class="comment-copy">@IanFiddes: Are you sure? I can't reproduce. I do see one flaw (you're intercepting the <code>nargs</code> argument, so the <code>repr</code> of the object says it's <code>None</code>, even when passed, because the default argument on parent <code>__init__</code> overrides it; you could just ignore <code>nargs</code> and let the parent class <code>__init__</code> handle it, then check to make sure <code>self.nargs</code> is non-<code>None</code> afterwards), but it otherwise works fine when I do <code>parser.add_argument('foo', action=NamespaceAction, nargs=12)</code>, which is where <code>NamespaceAction.__init__</code> is invoked. Is the traceback showing you a problem in <code>__init__</code> of your code?</span>
<span class="comment-copy">@IanFiddes: Yeah, it should be <code>action=NamespaceAction</code>, no parens. Glad you figured it out.</span>
