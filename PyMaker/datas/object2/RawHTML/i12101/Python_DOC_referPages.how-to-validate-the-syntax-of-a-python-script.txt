<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/4284313/how-can-i-check-the-syntax-of-python-script-without-executing-it">How can I check the syntax of Python script without executing it?</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>I just want the simplest possible way for my Python script to ask "is the Python code which I just generated syntactically valid Python?"</p>
<p>I tried: </p>
<pre><code>try:  
    import py_compile  
    x = py_compile.compile(generatedScriptPath, doraise=True)  
    pass  

except py_compile.PyCompileError, e:
    print str(e)
    pass
</code></pre>
<p>But even with a file containing invalid Python, the exception is not thrown and afterwards <code>x == None</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no need to use <a href="https://docs.python.org/3/library/py_compile.html" rel="nofollow"><code>py_compile</code></a>. It's intended use is to <em>write a bytecode file</em> from the given source file. In fact it will fail if you don't have the permissions to write in the directory, and thus you could end up with some false negatives.</p>
<p>To just parse, and thus validate the syntax, you can use the <a href="https://docs.python.org/2/library/ast.html" rel="nofollow"><code>ast</code></a> module to <a href="https://docs.python.org/2/library/ast.html#ast.parse" rel="nofollow"><code>parse</code></a> the contents of the file, or directly call the <a href="https://docs.python.org/2/library/functions.html#compile" rel="nofollow"><code>compile</code></a> built-in function.</p>
<pre><code>import ast

def is_valid_python_file(fname):
    with open(fname) as f:
        contents = f.read()
    try:
        ast.parse(contents)
        #or compile(contents, fname, 'exec', ast.PyCF_ONLY_AST)
        return True
    except SyntaxError:
        return False
</code></pre>
<p>Be sure to <em>not</em> execute the file, since if you cannot trust its contents (and if you don't even know whether the file contains valid syntax I doubt you can actually trust the contents even if you generated them) you could end up executing malicious code.</p>
</div>
<span class="comment-copy">Can you simply try to import generated module and catch ImportError (if module's missing) or SyntaxError (if module is invalid)? Alternativly, <code>ast.parse</code> would raise an exception during parsing an invalid Python code.</span>
<span class="comment-copy">What do you mean by invalid Python?</span>
<span class="comment-copy">If you simply want to parse the module you could use the <a href="https://docs.python.org/2/library/ast.html" rel="nofollow noreferrer"><code>ast</code></a> module's <a href="https://docs.python.org/2/library/ast.html#ast.parse" rel="nofollow noreferrer"><code>parse</code></a> function.   In fact there is a <a href="https://docs.python.org/2/library/functions.html#compile" rel="nofollow noreferrer"><code>compile</code></a> built-in function that can be used to do that.</span>
<span class="comment-copy">@Rogalski Yeah... and what if that file is user provided and contains malicious code?</span>
<span class="comment-copy">It gives an exception for me. What did you try for 'invalid Python code'?</span>
<span class="comment-copy">FYI: <code>py_compile</code> is also a <a href="https://docs.python.org/2/library/py_compile.html" rel="nofollow noreferrer">standard library</a>.</span>
