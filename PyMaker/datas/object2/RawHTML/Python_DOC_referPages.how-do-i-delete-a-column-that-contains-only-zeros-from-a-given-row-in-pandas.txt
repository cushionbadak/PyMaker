<div class="post-text" itemprop="text">
<p>I've found how to remove column with zeros for all the rows using the command <code>df.loc[:, (df != 0).any(axis=0)]</code>, and I need to do the same but given the row number.</p>
<p>For example, for the folowing df</p>
<pre><code>In [75]: df = pd.DataFrame([[1,1,0,0], [1,0,1,0]], columns=['a','b','c','d'])

In [76]: df                                                                                                                                                                            
Out[76]: 
   a  b  c  d
0  1  1  0  0
1  1  0  1  0
</code></pre>
<p>Give me the columns with non-zeros for the row 0 and I would expect the result:</p>
<pre><code>   a  b
0  1  1
</code></pre>
<p>And for the row 1 get:</p>
<pre><code>   a  c
1  1  1
</code></pre>
<p>I tried a lot of combinations of commands but I couldn't find a solution.</p>
<p><strong>UPDATE:</strong></p>
<p>I have a 300x300 matrix, I need to better visualize its result.</p>
<p>Below a pseudo-code trying to show what I need</p>
<pre><code>for i in range(len(df[rows])):
  _df = df.iloc[i]
  _df = _df.filter(remove_zeros_columns)
  print('Row: ', i)
  print(_df)
</code></pre>
<p>Result:</p>
<pre><code>Row: 0
   a  b
0  1  1

Row: 1
   a  c  f
1  1  5  10

Row: 2
   e
2  20
</code></pre>
<p>Best Regards.
Kleyson Rios.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can change data structure:</p>
<pre><code>df = df.reset_index().melt('index', var_name='columns').query('value != 0')
print (df)
   index columns  value
0      0       a      1
1      1       a      1
2      0       b      1
5      1       c      1
</code></pre>
<p>If need new column by values joined by <code>,</code> compare values for not equal by <a href="http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.ne.html" rel="nofollow noreferrer"><code>DataFrame.ne</code></a> and use matrix multiplication by <a href="http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.dot.html" rel="nofollow noreferrer"><code>DataFrame.dot</code></a>:</p>
<pre><code>df['new'] = df.ne(0).dot(df.columns + ', ').str.rstrip(', ')
print (df)
   a  b  c  d   new
0  1  1  0  0  a, b
1  1  0  1  0  a, c
</code></pre>
<p>EDIT:</p>
<pre><code>for i in df.index:
    row = df.loc[[i]]

    a = row.loc[:, (row != 0).any()]
    print ('Row {}'.format(i))
    print (a)
</code></pre>
<p>Or:</p>
<pre><code>def f(x):
    print ('Row {}'.format(x.name))
    print (x[x!=0].to_frame().T)

df.apply(f, axis=1)

Row 0
   a  b
0  1  1
Row 1
   a  c
1  1  1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>df = pd.DataFrame([[1, 1, 0, 0], [1, 0, 1, 0]], columns=['a', 'b', 'c', 'd'])


def get(row):

    return list(df.columns[row.ne(0)])


df['non zero column'] = df.apply(lambda x: get(x), axis=1)
print(df)
</code></pre>
<hr/>
<p>also if you want single liner use this</p>
<pre><code>df['non zero column'] = [list(df.columns[i]) for i in df.ne(0).values]
</code></pre>
<p>output</p>
<pre><code>   a  b  c  d non zero column
0  1  1  0  0          [a, b]
1  1  0  1  0          [a, c]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think this answers your question more strictly.
Just change the value of given_row as needed.</p>
<pre><code>given_row = 1
mask_all_rows = df.apply(lambda x: x!=0, axis=0)
mask_row = mask_all_rows.loc[given_row]
cols_to_keep = mask_row.index[mask_row == True].tolist()
df_filtered = df[cols_to_keep]

# And if you only want to keep the given row
df_filtered = df_filtered[df_filtered.index == given_row]
</code></pre>
</div>
<span class="comment-copy">So how looks final DataFrame? Both rows together? What are new columns names?</span>
<span class="comment-copy">@jezrael I have a very large dense matrix with a lot of zeros, I need to find a way to better see the values. I would like to loop the rows of the dataframe and write/append to a txt file the ith row with only the columns with values &gt; 0. So, I need to slice the df by each row keeping the column names for non-zeros values.</span>
<span class="comment-copy">To split this for one row you could use: (df.iloc[i] != 0), this might help you to iterate over all rows</span>
<span class="comment-copy">@KleysonRios  when you see the first and second row of the example you have posted, the columns are a,c and a,d so how do you want the final df like? what are the column names there? can you post  sample expected output too?</span>
<span class="comment-copy">@Nihal not possible to have a final dataframe for the whole df. That's why I need a loop to select individual rows, filter the zeros columns and save this df* to a file, and then move to the next row. For each row I will have different columns, so not possible to put all together.</span>
<span class="comment-copy">I dont need to see the original matrix. Is a matrix of 300x300. As just need to see the selected row with the non-zeros columns.</span>
<span class="comment-copy">@KleysonRios - yes, so how should looks final output?</span>
<span class="comment-copy">@KleysonRios - check you check edited answer?</span>
<span class="comment-copy">Great @jezreal thanks.</span>
<span class="comment-copy">Interesting but this solution is not a good solution for my case. I have almost 300 column. The visualization is not good and easy yet. Please see, my last comment in the question.</span>
<span class="comment-copy">Very good as well. Thanks @Reimar.</span>
