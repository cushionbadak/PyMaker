<div class="post-text" itemprop="text">
<p>In the following code, how do I return only those values as True, where order of elements in checklist is followed in routelist? </p>
<p>For eg:
<code>checklist(["BOMH","DELH","BRGH"])</code> should return as True <code>["BOMH","CCUH","DELH","BRGH"]</code> but not <code>["BOMH","BRGH","CCUH","DELH"]</code>.</p>
<pre><code>def checklhcost2(checklist):
    thcdataselect["shortlist"] = thcdataselect.apply(lambda x:\
                True if all((i in x["routelist"] for i in checklist)) else False)
    return thcdataselect.filter_by(1,"shortlist")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; chk = ["BOMH","DELH","BRGH"]
&gt;&gt;&gt; one = ["BOMH","CCUH","DELH","BRGH"]
&gt;&gt;&gt; two = ["BOMH","BRGH","CCUH","DELH"]
</code></pre>
<p>Make a set for membership testing</p>
<pre><code>&gt;&gt;&gt; set_chk = set(chk)
</code></pre>
<p>Generator expressions to filter AND maintain order</p>
<pre><code>&gt;&gt;&gt; one_a = (thing for thing in one if thing in set_chk)
&gt;&gt;&gt; two_a = (thing for thing in two if thing in set_chk)
</code></pre>
<p>Use zip to pair up items in <code>chk</code> and the target lists for comparison.</p>
<pre><code>&gt;&gt;&gt; all(a == b for a, b in zip(chk, one_a))
True
&gt;&gt;&gt; all(a == b for a, b in zip(chk, two_a))
False
</code></pre>
<p>To ensure all items are present as well as in the correct order, use <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer">itertools.zip_longest</a>.</p>
<pre><code>&gt;&gt;&gt; three = ['BOMH', 'CCUH', 'DELH']
&gt;&gt;&gt; three_a = (thing for thing in three if thing in set_chk)
&gt;&gt;&gt; 
&gt;&gt;&gt; from itertools import zip_longest
&gt;&gt;&gt; 
&gt;&gt;&gt; all(a == b for a,b in zip_longest(chk, three_a))
False
&gt;&gt;&gt; 
</code></pre>
<p>Using <code>zip</code> would have produced an incorrect result:</p>
<pre><code>&gt;&gt;&gt; all(a == b for a,b in zip(chk, three_a))
True
</code></pre>
<hr/>
<p>Or just make new, filtered lists and compare.</p>
<pre><code>&gt;&gt;&gt; one_a = [thing for thing in one if thing in set_chk]
&gt;&gt;&gt; two_a = [thing for thing in two if thing in set_chk]
&gt;&gt;&gt; three_a = [thing for thing in three if thing in set_chk]

&gt;&gt;&gt; one_a == chk
True
&gt;&gt;&gt; two_a == chk
False
&gt;&gt;&gt; three_a == chk
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a mapping to determine the weight of each value, filter out the ones that don't match, and check that it's ordered properly:</p>
<pre><code>master = ["BOMH","DELH","BRGH"]
ordering = {item:idx for idx,item in enumerate(master)}
check1 = ["BOMH","CCUH","DELH","BRGH"]
check2 = ["BOMH","BRGH","CCUH","DELH"]

def check(o, c):
    return all(o[i]==r for i,r in zip((i for i in c if i in o), range(len(o))))
</code></pre>
<p>Result:</p>
<pre><code>&gt;&gt;&gt; check(ordering, check1)
True
&gt;&gt;&gt; check(ordering, check2)
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def checklhcost2(values):
    expected_seq = ["BOMH","DELH","BRGH"]
    # for each element in expected_seq get index from values
    L = [values.index(v) if v in values else -1 for v in expected_seq]
    # if indexes are in increasing order and &gt;1 then return True
    return all(x&lt;y and x &gt; -1 for x, y in zip(L, L[1:]))

checklhcost2(["BOMH","CCUH","DELH","BRGH"])
#True
checklhcost2(["BOMH","BRGH","CCUH","DELH"])
#False
</code></pre>
<p>It also works on edge cases where expected_seq has values which the input parameter doesn't example </p>
<pre><code>expected_seq = ["BOMH","DELH","BRGH", "other"]

checklhcost2(["BOMH","CCUH","DELH","BRGH"])
#False
checklhcost2(["BOMH","BRGH","CCUH","DELH"])
#False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not sure this is a good solution, but it seems it works.</p>
<pre><code>&gt;&gt;&gt; checklhcost2 = lambda chl: reduce(lambda x,y: x and routelist.index(y[1]) == y[0], enumerate([ itm for itm in chl if itm in routelist]), True )
&gt;&gt;&gt; checklhcost2(["BOMH","CCUH","DELH","BRGH"])
True
&gt;&gt;&gt; checklhcost2(["BOMH","BRGH","CCUH","DELH"])
False
&gt;&gt;&gt; 
</code></pre>
<p>The main idea is quite simple: filter out everything which is not in routelist, then enumerate the rest and check indexes. Return logical and of match for all indexes (reduce function).</p>
</div>
<span class="comment-copy">As a side note, <code>True if all((i in x["routelist"] for i in checklist)) else False</code> is exactly equal to <code>all(i in x["routelist"] for i in checklist)</code>. Other than that, I do not understand your question.</span>
<span class="comment-copy">Thanks wwii! this makes the problem look so easy. What I finally did using your tips was: define a function which returns a list: def setthings(x,y):     z = [i for i in y if i in x]     return z  and check for exact match of the list:  thcdataselect.apply(lambda x:True if setthings(checklist,x['routelist'])==checklist else False)</span>
<span class="comment-copy">Thanks @TigerhawkT3! This was an intelligent way of doing it and worked like a charm. Small comment for the benefit of others:  The code checks the ordering but not whether all items of ordering are present in check1/check2 so you will need to also have the line from my original code: all((i in check1 for i in ordering))</span>
