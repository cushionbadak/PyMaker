<div class="post-text" itemprop="text">
<p>I am trying to build a iterable graph class with python 2.7. I want  to be able to iterate though a dictionary containing the vertexes.</p>
<p>Cutting and pasting from    <a href="https://github.com/joeyajames" rel="nofollow noreferrer">https://github.com/joeyajames</a>  has got me so far but  now  I am confused as to how  to make this work so that 
I can test vertices dict for  the presence of an vertice and  add if not present. This part is maybe unneeded.
"if (a not in gra ):" because the validation is done in the Graph class itself.</p>
<p>The expected output is a dictionary with the vertices as keys. Actualy im not even sure a list is not better object to use.</p>
<pre><code>class Vertex(object):
    def __init__(self, n):
        self.name = n
        self.neighbors = list()

        self.discovery = 0
        self.finish = 0
        self.color = 'black'

    def add_neighbor(self, v):
        if v not in self.neighbors:
            self.neighbors.append(v)
            self.neighbors.sort()


class Graph(object):
    def __init__(self,size):
        self.vertices = {}
        self.hops = 0
        self.count = 0
        self.limit = size

    def __iter__(self):
        return self

    def next(self):
        self.count += 1
        if self.count &gt; self.limit:
            raise StopIteration


    def add_vertex(self,vertex):
        if isinstance(vertex, Vertex) and vertex.name not in self.vertices:
            self.vertices[vertex.name] = vertex
            return True
        else:
            return False

    def add_edge(u,v):
        if u in self.vertices and v in self.vertices:
            for key, value in self.vertices.items():
                if key == u:
                    value.add_neighbor(v)
                if key == v:
                    value.add_neighbor(u)
                    return True
                else:
                    return False



    def _dfs(self, vertex):
            global hops
            vertex.color = 'red'
            vertex.discovery = hops
            hops += 1
            for v in vertex.neighbors:
                if self.vertices[v].color == 'black':
                    self._dfs(self.vertices[v])
            vertex.color = 'blue'
            vertex.finish = hops
            time += 1






input = ((5,3),(4 ,2),(0,1),(2 3),(0 4))

N,l = input[0]
print "N is " + str(N)
print "l is " + str(l)

gra = Graph(N)

for i in xrange(1,l):
    a,b = input[i]
    # Store a and b as vertices in graph object
    print "a is " + str(a) +  " b is " + str(b) 
    if (a not in gra ):
        print "adding a"
        gra.add_vertex(Vertex(chr(a)))
    if (b not in gra ):
        print "adding b"
        gra.add_vertex(Vertex(chr(b)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are trying to use <code>not in</code>, which tests for <em>containment</em>; implement the <a href="https://docs.python.org/2/reference/datamodel.html#object.__contains__" rel="nofollow noreferrer"><code>__contains__</code> hook</a> to facilitate that:</p>
<pre><code>def __contains__(self, vertex):
    return vertex.name in self.vertices
</code></pre>
<p>I've assumed you wanted to test for vertices, so create one before testing for containment:</p>
<pre><code>a = Vertex(chr(a))
if a not in gra:
    print "adding a"
    gra.add_vertex(a)
</code></pre>
<p>For iteration, I'd not make <code>Graph</code> itself the iterator; that limits you to iterating <em>just once</em>. Your <code>next()</code> method also lacks a <code>return</code> statement, so all you are doing is produce a sequence of <code>None</code> objects.</p>
<p>Make it an <em>iterable</em> instead, so return a new iterator object each time <code>__iter__</code> is called. You can most simply achieve this by making <code>__iter__</code> a <a href="https://docs.python.org/3/tutorial/classes.html#generators" rel="nofollow noreferrer">generator</a>:</p>
<pre><code>def __iter__(self):
    for vertex in self.vertices.itervalues():
        yield vertex
</code></pre>
<p>Note the <code>yield</code>. I've assumed you wanted to iterate over the vertices.</p>
</div>
<span class="comment-copy">Containment testing and iteration are <i>two separate things</i>. Your <code>next()</code> method also doesn't produce anything when iterating.</span>
<span class="comment-copy">thanks i didnt know about contains</span>
