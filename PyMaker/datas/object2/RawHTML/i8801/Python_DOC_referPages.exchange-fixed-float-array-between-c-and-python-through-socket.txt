<div class="post-text" itemprop="text">
<p>I am trying to use C++ sending a fixed length float array
and use python to get it</p>
<p>Here is my C++ client, where sConnect is a SOCKET object</p>
<pre><code>    float news[2];
    news[0] = 1.2;
    news[1] = 2.56;
    char const * p = reinterpret_cast&lt;char const *&gt;(news);
    std::string s(p, p + sizeof news);
    send(sConnect, &amp;s[0], sizeof(news), 0);
</code></pre>
<p>And at python server
my code is like</p>
<pre><code>import socketserver


class MyTCPHandler(socketserver.BaseRequestHandler):
    def handle(self):

    self.data = self.request.recv(8).strip()
    print (self.data)

if __name__ == "__main__":
   HOST, PORT = "127.0.0.1", 9999
   print("listening")
   server = socketserver.TCPServer((HOST, PORT), MyTCPHandler)
   server.serve_forever()
</code></pre>
<p>And the data I got at python is like</p>
<blockquote>
<p>b'\x9a\x99\x99?\n\xd7#@'</p>
</blockquote>
<p>How to recover this back to the original float data I sent?
Or is there a better way to send and receive the data?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the struct module to unpack the byte data.</p>
<pre><code>import struct
news = struct.unpack('ff', b'\x9a\x99\x99?\n\xd7#@')
print(news)
</code></pre>
<p>With your code:</p>
<pre><code>import struct
import socketserver

class MyTCPHandler(socketserver.BaseRequestHandler):
    def handle(self):
        self.data = self.request.recv(8).strip()
        news = struct.unpack('ff', self.data)
        print(news)
</code></pre>
<p>The first argument to struct.unpack, 'ff', is the format string specifying the expected layout of the data, in this case 2 floats. See <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer">https://docs.python.org/3/library/struct.html</a> for other format characters.</p>
</div>
<span class="comment-copy">Work well for me, thanks for the replying!</span>
