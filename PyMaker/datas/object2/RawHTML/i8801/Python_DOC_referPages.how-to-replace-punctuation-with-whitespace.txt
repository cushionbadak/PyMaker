<div class="post-text" itemprop="text">
<pre><code>punc_list = [".",";",":","!","?","/","\\",",","#","@","$","&amp;",")","(","'","\""]
new_s = ''
for i in s:
    if i not in punc_list:
        new_s += i
return new_s.lower()
</code></pre>
<p>If the input is</p>
<pre><code>s = ("Hey! M'y nam;e i's")
</code></pre>
<p>I would want the output to be: </p>
<pre><code>s = ('hey  m y name e i s') 
</code></pre>
<p>I am having trouble replacing punc with whitespace</p>
</div>
<div class="post-text" itemprop="text">
<p>Like @DYZ said, you just need another conditional statement that replaces the special characters with spaces:</p>
<pre><code>def func(s):
    punc_list = [".",";",":","!","?","/","\\",",","#","@","$","&amp;",")","(","'","\""]
    new_s = ''
    for i in s:
        if i not in punc_list:
            new_s += i
        else:
            new_s += ' '
    return new_s.lower()

s = ("Hey! M'y nam;e i's")
new_s = func(s)
print (new_s)
</code></pre>
<p>Output would look like what you wanted: <code>hey  m y nam e i s</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You forgot to add a space <code>' '</code> when the character is punctuation. Also, <code>punc_list</code> does not actually have to be a <code>list</code>; you can just make it one long string and iterate the characters, or as noted in comments, just use <code>string.punctuation</code>. And to improve lookup speed, you could also make it a <code>set</code>, but it really should not matter much in this case:</p>
<pre><code>punc_list = set('.;:!?/\\,#@$&amp;)(\'"')  # or use string.punctuation

def no_punc(s):
    new_s = ''
    for i in s:
        if i not in punc_list:
            new_s += i
        else:
            new_s += ' '
    return new_s.lower()
</code></pre>
<p>Or a bit shorter, using a ternary expression <a href="https://www.python.org/dev/peps/pep-0308/" rel="nofollow noreferrer"><code>... if ... else ...</code></a>:</p>
<pre><code>def no_punc(s):
    new_s = ''
    for i in s:
        new_s += i if i not in punc_list else ' '
    return new_s.lower()
</code></pre>
<p>Or even shorter, using <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join</code></a>:</p>
<pre><code>def no_punc(s):
    return ''.join(i if i not in punc_list else ' ' for i in s).lower()
</code></pre>
<p>Or <em>even</em> shorter, using regular expressions <a href="https://docs.python.org/3.5/library/re.html" rel="nofollow noreferrer"><code>re</code></a>:</p>
<pre><code>import re
def no_punc(s):
    return re.sub("\W", " ", s).lower()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Is the homework question supposed to help you learn about loops? Learning about dicts and translate is useful too i think.</p>
<pre><code>t = str.maketrans(dict.fromkeys(punc_list, " "))
new_s = s.lower().translate(t)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>str.translate</code>. To convert all the characters in the <code>punc_list</code> to spaces.</p>
<pre><code>&gt;&gt;&gt; punc_list = [".",";",":","!","?","/","\\",",","#","@","$","&amp;",")","(","'","\""]
&gt;&gt;&gt; s = "Hey! M'y nam;e i's"
&gt;&gt;&gt; s.translate({ord(p): " " for p in punc_list})
'Hey  M y nam e i s'
</code></pre>
<p>You can create a dictionary mapping on the fly using a dict comprehension, which maps all the punctuation character codes (uses <code>ord</code> function) to a space.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would just add an else statement to <code>if i not in punc_list:</code> so that the code looks like this:</p>
<pre><code>punc_list = [".",";",":","!","?","/","\\",",","#","@","$","&amp;",")","(","'","\""]
new_s = ''
for i in s:
    if i not in punc_list:
        new_s += i
    else:
        new_s += ' '

return new_s.lower()
</code></pre>
<p>All this does is say:
If the character isn't in the punctuation list add it to the new <code>string</code>.
If it is in the punctuation list add a whitespace to the new <code>string</code> instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>See this code , with using 2 loops :</p>
<pre><code>punc_list = [".",";",":","!","?","/","\\",",","#","@","$","&amp;",")","(","'","\""]
s = "Hey! M'y nam;e i's"
new_s = ''

for x in punc_list:
  for i in s:
    if i==x:
        s=s.replace(i,new_s)


print(s)
</code></pre>
</div>
<span class="comment-copy">Is this homework, or can you use regular expressions? Also, just <i>exactly those</i> punctuation, or <i>all</i> special characters?</span>
<span class="comment-copy">In the <code>else</code> branch, add a white space.</span>
<span class="comment-copy">@tobias_k yes it's homework. I'm considering all special characters</span>
<span class="comment-copy">@DYZ ohh okay it works! thank you!</span>
<span class="comment-copy">As a side note, I suggest that you use <code>string.punctuation</code> instead of your own <code>punct_list</code>.</span>
<span class="comment-copy">Why not just  <code>{ord(x): ' ' for x in punc_list}</code>?</span>
<span class="comment-copy">yep much simpler thanks</span>
