<div class="post-text" itemprop="text">
<p>Normally when I want to run a script from the command prompt or shell I navigate to the directory my script file is in and type <code>python &lt;name script&gt;.py</code> and press Enter</p>
<pre><code>D:\TestPython&gt;python run.py
here a demo run
</code></pre>
<p>However at the moment a script I want to run relies an a package in the virtual environment. In the <a href="https://docs.python.org/3/library/venv.html" rel="nofollow noreferrer">Python documentation</a> I found a way to solve this relying on the execution of an activate.bat file:</p>
<pre><code>D:\TestPython&gt;C:\Users\elmex\VENV\Scripts\activate.bat 
(VENV) D:\TestPython&gt;python run.py
here a demo run
</code></pre>
<p>Now I wonder if there is an alternative to this, something like <code>D:\TestPython&gt;python use all packages form virt env this &lt;dir&gt; run.py</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>so sorry @Elmex80s there are no way for that in the other way yes I meant from inside a virtualenv you can access to the packages installed in you global system but before install this virtual env you need to use the option system-site-packages and you would have the access I talking about it. You can see all this here:<a href="https://virtualenv.pypa.io/en/stable/reference/#cmdoption--system-site-packages" rel="nofollow noreferrer">https://virtualenv.pypa.io/en/stable/reference/#cmdoption--system-site-packages</a>
Regards</p>
</div>
<span class="comment-copy">For your first example, if your system is configured properly you can add <code>D:\TestPython</code> to the <code>PATH</code> environment variable and <code>.PY</code> to the <code>PATHEXT</code> environment variable. Then you can execute <code>run</code> from any working directory. The shell will find "run.py", get the associated command template (e.g. <code>py.exe "%1" %*</code>), expand the template, and execute the command.</span>
<span class="comment-copy">For running a script in a virtual environment, install Python 3 to get the py.exe launcher as the default association for .py files. Then in run.py add a shebang with the fully-qualified path to that interpreter, e.g. <code>#!C:\Users\elmex\VENV\Scripts\python.exe</code>.</span>
