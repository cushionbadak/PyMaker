<div class="post-text" itemprop="text">
<p>I need to read through lines in multiple files; the first value in each line is the runtime, the third is the job id, and the fourth is the status. I have created lists to store each of these values. Now I'm not understanding how to connect all of these lists and sort them based on the lines with the top 20 fastest runtimes. Does anybody have a suggestion for how I can do that? Thank you!</p>
<pre><code>for filePath in glob.glob(os.path.join(path1, '*.gz')):
    with gzip.open(filePath, 'rt', newline="") as file:
        reader = csv.reader(file)
        for line in file:
            for row in reader:
                runTime = row[0]
                ID = row[2]
                eventType = row[3]
                jobList.append(ID)
                timeList.append(runTime)
                eventList.append(eventType)

    jobList = sorted(set(jobList))
    counter = len(jobList)
    print ("There are %s unique jobs." % (counter))
    i = 1
    while i &lt; 21:
        print("#%s\t%s\t%s\t%s" % (i, timeList[i], jobList[i], eventList[i]))
        i = i + 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of using three different lists, you can use a single list and append tuples to the list..Like so</p>
<pre><code>combinedList.append((runTime, ID, eventType))
</code></pre>
<p>You can then sort the <code>combinedList</code> of tuples as shown here: <a href="https://stackoverflow.com/questions/3121979/how-to-sort-list-tuple-of-lists-tuples">How to sort (list/tuple) of lists/tuples?</a></p>
<p>You can make more improvements, such as use <code>namedtuples</code> in python etc. Look them up on SO or google</p>
<p>Note: there may be other "efficient" ways to do this. For example use python <code>heapq</code> library and create a heap of size 20 to sort by top 20 run times. You can learn more about them on python's website or Stack overflow but you may need some more algorithmic background</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of maintaining three lists <code>jobList</code>, <code>timeList</code>, <code>eventList</code>, you can store <code>(runTime, eventType)</code> tuples in a dictionary, using <code>ID</code> as key, by replacing</p>
<pre><code>jobList = []
timeList = []
eventList = []
…
jobList.append(ID)
timeList.append(runTime)
eventList.append(eventType)
</code></pre>
<p>by</p>
<pre><code>jobs = {}  # an empty dictionary
…
jobs[ID] = (runTime, eventType)
</code></pre>
<p>To loop over that dictionary sorted by increasing <code>runTime</code> values:</p>
<pre><code>for ID, (runTime, eventType) in sorted(jobs.items(), key=lambda item: item[1][0]):
    # do something with it
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using the python <code>sorted</code> built in would work better for you if you kept <code>runTime</code>, <code>ID</code>, and <code>eventType</code> together in a data structure. I would recommend using a <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer">namedtuple</a>, as it allows you to be clear about what you're doing. You can do the following:</p>
<pre><code>from collections import namedtuple
Job = namedtuple("Job", "runtime id event_type")
</code></pre>
<p>Then you're code could change to be:</p>
<pre><code>for filePath in glob.glob(os.path.join(path1, '*.gz')):
    with gzip.open(filePath, 'rt', newline="") as file:
        reader = csv.reader(file)
        for line in file:
            for row in reader:
                runTime = row[0]
                ID = row[2]
                eventType = row[3]
                job = Job(runTime, ID, eventType)
                jobs.append(job)

    jobs = sorted(jobs)
    n_jobs = len(jobs)
    print("There are %s unique jobs." % (n_jobs))
    for job in jobs[:20]:
        print("#%s\t%s\t%s\t%s" % (i, job.runtime, job.id, job.event_type))
</code></pre>
<p>It's worth noting, this sorting will work properly because by default, tuples are sorted by their first element. If there is a tie, your sort algorithm will move the comparison to the next elements of the tuple.</p>
</div>
<span class="comment-copy">Just a style note - it's more pythonic to use names like <code>run_time</code> and <code>event_type</code> instead of <code>runTime</code> and <code>eventType</code>.</span>
<span class="comment-copy">Okay, I understand that, but if I were to create a dictionary for this, how would I sort them so that I could print only the top 20 longest run time jobs? I guess what I'm asking is how to sort the dictionary by that one value</span>
<span class="comment-copy">Basically, you will store key as ID and value as (runTime, eventType)..then sort by longest runtime in a way as shown here: <a href="http://stackoverflow.com/questions/7349646/sorting-a-dictionary-of-tuples-in-python" title="sorting a dictionary of tuples in python">stackoverflow.com/questions/7349646/…</a></span>
