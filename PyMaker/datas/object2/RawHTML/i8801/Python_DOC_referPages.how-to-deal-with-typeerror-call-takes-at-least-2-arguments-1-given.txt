<div class="post-text" itemprop="text">
<p>the under part is the method :</p>
<pre><code>from enum import Enum
from selenium import webdriver
import  time
from selenium.webdriver.common.action_chains import ActionChains

class KeyMouseOperation(Enum):
    CONTEXT_CLICK = 1
    DOUBLE_CLICK = 2
    DRAG_AND_DROP = 3
    CLICK_AND_HOLD = 4

    def keymouse(url, operation_by , elementxpath):
        driver = webdriver.Chrome()
        driver.get(url)
        time.sleep(1)
        driver.maximize_window()
        time.sleep(1)

        if operation_by == KeyMouseOperation.CONTEXT_CLICK:
            result = ActionChains(driver).context_click(driver.find_element_by_xpath(elementxpath)).perform()
        if operation_by == KeyMouseOperation.DOUBLE_CLICK:
            result = ActionChains(driver).double_click(driver.find_element_by_xpath(elementxpath)).perform()
        if operation_by == KeyMouseOperation.DRAG_AND_DROP:
            result = ActionChains(driver).drag_and_drop(driver.find_element_by_xpath(elementxpath), driver.find_element_by_xpath(elementxpath)).perform()
        if operation_by == KeyMouseOperation.CLICK_AND_HOLD:
            result = ActionChains(driver).click_and_hold(driver.find_element_by_xpath(elementxpath)).perform()
        else:
            time.sleep(3)
</code></pre>
<p>this is the instance for the method :</p>
<pre><code>from method.key_Mouse import *
KM = KeyMouseOperation()
KM.keymouse("https://www.baidu.com", KeyMouseOperation.CONTEXT_CLICK, "//*[@id='kw']")
</code></pre>
<p>but the result is that:</p>
<pre><code>C:\Python27\python.exe C:/Users/chenjia/PycharmProjects/AutomationTestSuite/Case/practice.py
Traceback (most recent call last):
  File "C:/Users/chenjia/PycharmProjects/AutomationTestSuite/Case/practice.py", line 46, in &lt;module&gt;
    KM = KeyMouseOperation()
TypeError: __call__() takes at least 2 arguments (1 given)

Process finished with exit code 1
</code></pre>
<p>How to deal with <code>TypeError: __call__() takes at least 2 arguments (1 given)</code> ?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>KeyMouseOperation</code> is an enumeration class, you don't have to call it. Instead, make <code>keymouse</code> a <em>classmethod</em>:</p>
<pre><code>class KeyMouseOperation(Enum):
    CONTEXT_CLICK = 1
    DOUBLE_CLICK = 2
    DRAG_AND_DROP = 3
    CLICK_AND_HOLD = 4

    @classmethod
    def keymouse(cls, url, operation_by, elementxpath):
        driver = webdriver.Chrome()
        driver.get(url)
        time.sleep(1)
        driver.maximize_window()
        time.sleep(1)

        if operation_by == cls.CONTEXT_CLICK:
            result = ActionChains(driver).context_click(
                driver.find_element_by_xpath(elementxpath)).perform()
        if operation_by == cls.DOUBLE_CLICK:
            result = ActionChains(driver).double_click(
                driver.find_element_by_xpath(elementxpath)).perform()
        if operation_by == cls.DRAG_AND_DROP:
            result = ActionChains(driver).drag_and_drop(
                driver.find_element_by_xpath(elementxpath), driver.find_element_by_xpath(elementxpath)).perform()
        if operation_by == cls.CLICK_AND_HOLD:
            result = ActionChains(driver).click_and_hold(
                driver.find_element_by_xpath(elementxpath)).perform()
        else:
            time.sleep(3)
</code></pre>
<p>Then use it like this:</p>
<pre><code>KeyMouseOperation.keymouse(
    "https://www.baidu.com", KeyMouseOperation.CONTEXT_CLICK,
    "//*[@id='kw']")
</code></pre>
<p>See the <a href="https://docs.python.org/3/library/enum.html#allowed-members-and-attributes-of-enumerations" rel="nofollow noreferrer"><em>Allowed members and attributes of enumerations</em> section</a> of the <code>enum</code> documentation.</p>
<p>Personally, I'd make <code>keymouse</code> a <em>method</em> on the value, and track the correct method to use on the <code>ActionChains</code> class:</p>
<pre><code>class KeyMouseOperation(Enum):
    # each value is the method (unbound), and how many arguments
    # to pass in.
    CONTEXT_CLICK = (ActionChains.context_click, 1)
    DOUBLE_CLICK = (ActionChains.double_click, 1)
    DRAG_AND_DROP = (ActionChains.drag_and_drop, 2)
    CLICK_AND_HOLD = (ActionChains.click_and_hold, 1)

    def keymouse(self, url, elementxpath):
        driver = webdriver.Chrome()
        driver.get(url)
        time.sleep(1)
        driver.maximize_window()
        time.sleep(1)

        ac = ActionChains(driver)
        action, argcount = self.value
        method = action.__get__(ac)  # bind the action method
        element = driver.find_element_by_xpath(elementxpath)
        return method(*[element] * argcount).perform()
</code></pre>
<p>then use this as:</p>
<pre><code>KeyMouseOperation.CONTEXT_CLICK("https://www.baidu.com", "//*[@id='kw']") 
</code></pre>
</div>
