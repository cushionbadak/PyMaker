<div class="post-text" itemprop="text">
<p>How do I make a python regex like "(.*)" such that, given "a (b) c (d) e" python matches "b" instead of "b) c (d"?</p>
<p>I know that I can use "[^)]" instead of ".", but I'm looking for a more general solution that keeps my regex a little cleaner. Is there any way to tell python "hey, match this as soon as possible"?</p>
</div>
<div class="post-text" itemprop="text">
<p>You seek the all-powerful '*?'</p>
<p><a href="http://docs.python.org/3/howto/regex.html#greedy-versus-non-greedy" rel="noreferrer">http://docs.python.org/3/howto/regex.html#greedy-versus-non-greedy</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; x = "a (b) c (d) e"
&gt;&gt;&gt; re.search(r"\(.*\)", x).group()
'(b) c (d)'
&gt;&gt;&gt; re.search(r"\(.*?\)", x).group()
'(b)'
</code></pre>
<p><a href="http://docs.python.org/library/re.html#regular-expression-syntax" rel="noreferrer">According to the docs</a>:</p>
<blockquote>
<p>The '<code>*</code>', '<code>+</code>', and '<code>?</code>' qualifiers are all greedy; they match as much text as possible. Sometimes this behavior isnâ€™t desired; if the RE <code>&lt;.*&gt;</code> is matched against '<code>&lt;H1&gt;title&lt;/H1&gt;</code>', it will match the entire string, and not just '<code>&lt;H1&gt;</code>'. Adding '<code>?</code>' after the qualifier makes it perform the match in non-greedy or minimal fashion; as few characters as possible will be matched. Using <code>.*?</code> in the previous expression will match only '<code>&lt;H1&gt;</code>'.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Would not <code>\\(.*?\\)</code> work? That is the non-greedy syntax. </p>
</div>
<div class="post-text" itemprop="text">
<p>As the others have said using the ? modifier on the * quantifier will solve your immediate problem, but be careful, you are starting to stray into areas where regexes stop working and you need a parser instead.  For instance, the string "(foo (bar)) baz" will cause you problems.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using an ungreedy match is a good start, but I'd also suggest that you reconsider any use of <code>.*</code> -- what about this?</p>
<pre><code>groups = re.search(r"\([^)]*\)", x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Do you want it to match "(b)"?  Do as Zitrax and Paolo have suggested.  Do you want it to match "b"?  Do</p>
<pre><code>&gt;&gt;&gt; x = "a (b) c (d) e"
&gt;&gt;&gt; re.search(r"\((.*?)\)", x).group(1)
'b'
</code></pre>
</div>
<span class="comment-copy">According to the Internet Archive, all that link pointed to was a copy of the Python "re" module docs, so Trey's link works just as well.</span>
<span class="comment-copy">what is the common english name for this <code>*?</code> ?</span>
<span class="comment-copy">Wildcard characters @Trevor Boyd Smith</span>
<span class="comment-copy">This is called <b>"non greedy"</b> qualifier</span>
<span class="comment-copy"><a href="https://stackoverflow.com/a/1732454">Never parse HTML with regex</a></span>
