<div class="post-text" itemprop="text">
<p>I have a list A with values</p>
<pre><code>[43.4543, 23.45343, 76.55665, 33.4345, 5]
</code></pre>
<p>I need to zip it in the following way,</p>
<pre><code>[(43.4543,23.45343,5),(76.55665,33.4345,5)]
</code></pre>
<p>Could anyone guide me to solve this?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>zip</code> will return a list which's length is equal to length of the shortest input sequence. As the last one (<code>A[-1:]</code>) have only 1 element, you can't use zip. Try something different like that one below.</p>
<pre><code>a = [43.4543, 23.45343, 76.55665, 33.4345, 5]
map(lambda x: x + (a[-1],), zip(a[::2], a[1::2]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3.6/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> with <a href="https://docs.python.org/3/library/itertools.html#itertools.repeat" rel="nofollow noreferrer"><code>itertools.repeat</code></a>:</p>
<pre><code>&gt;&gt;&gt; from itertools import repeat
&gt;&gt;&gt; l = [43.4543, 23.45343, 76.55665, 33.4345, 5]
&gt;&gt;&gt; it = iter(l)
&gt;&gt;&gt; list(zip(it, it, repeat(l[-1])))
[(43.4543, 23.45343, 5), (76.55665, 33.4345, 5)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure why you want to use <code>zip</code> here. For the given data you can just assemble the desired output like this:</p>
<pre><code>p = [a[:2] + a[-1:], a[2:]]
</code></pre>
<p>or if the list items must be tuples:</p>
<pre><code>p = [tuple(u) for u in (a[:2] + a[-1:], a[2:])]
</code></pre>
<p>But you can do it with <code>zip</code> and <code>itertools.cycle</code></p>
<pre><code>from itertools import cycle

a = [43.4543, 23.45343, 76.55665, 33.4345, 5]
p = zip(a[::2], a[1::2], cycle(a[-1:]))
print(list(p))
</code></pre>
<p><strong>output</strong></p>
<pre><code>[(43.4543, 23.45343, 5), (76.55665, 33.4345, 5)]
</code></pre>
<p>This will work on any <code>a</code> of odd length.</p>
<p>Instead of using <code>itertools.cycle</code>, you can use <code>itertools.repeat</code>, as in niemmi's answer.</p>
<hr/>
<p>Another option is to zip with an iterator of the source list:</p>
<pre><code>from itertools import repeat

a = range(11)
head, tail = iter(a), a[-1]

p = zip(head, head, repeat(tail))
print(list(p))
</code></pre>
<p><strong>output</strong></p>
<pre><code>[(0, 1, 10), (2, 3, 10), (4, 5, 10), (6, 7, 10), (8, 9, 10)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>P = zip(A[::2], A[1::2], A[-1:]*2)</code> should give the expected output </p>
</div>
<span class="comment-copy">@PM2Ring Yes exactly. There was a typo</span>
<span class="comment-copy">Could you clarify what the <i>general</i> task you're trying to accomplish is? Based on the slice it seems you're trying to split up the evenly- and oddly-indexed elements, but that doesn't match the output example. And why does the last element end up in both halves of the output?</span>
<span class="comment-copy">Question is not clear. Please edit your question with expected output</span>
<span class="comment-copy">@jonrsharpe Actually I need to pair it and add the last element of the list to all the pairs present. For example 1st element and 2nd element as one pair and so on.</span>
<span class="comment-copy">What precisely do you mean by <i>"pair it"</i>? If you had a list with <i>seven</i> items what should happen? What if there were six? Please <a href="https://stackoverflow.com/posts/42667358/edit">edit</a> to describe the actual task you're trying to accomplish, a single example does not illustrate the required algorithm.</span>
<span class="comment-copy">Alternatively, as a list comprehension: <code>[x + (a[-1],) for x in zip(a[:-1:2], a[1:-1:2])]</code></span>
<span class="comment-copy"><code>repeat</code> is the more sensible choice than <code>cycle</code>. Why didn't I think of that? :)</span>
