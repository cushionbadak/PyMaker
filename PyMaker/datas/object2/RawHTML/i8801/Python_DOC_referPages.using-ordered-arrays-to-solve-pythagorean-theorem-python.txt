<div class="post-text" itemprop="text">
<p>Okay, in Pythagorean Theorem, you need the hypotenuse to be the longest length. I was able to sort my array that will automatically order my values from smallest to greatest. Now, the problem is what do I do with the values? The user in the program doesn't know what the longest length (user inputs coordinates) and the computer graphs the three points and uses distance formula to see the lengths between the three sides. </p>
<p>Here's the code that can sort the values.</p>
<pre><code>#result3, result2, result are leg measurements
brandonarray[result3,result2,result]
brandonarray.sort(key=int)
</code></pre>
<p>So, for example, if the user plot 3 random points (lets use (3,5),(10,10),(19,20))
I made the program print the array distance numbers.</p>
<pre><code>#result3 was 8, result2 was 13, result was 21
[8,13,21]
</code></pre>
<p>If I plug in these three numbers, I know it'll work. I made the program tell you these leg measurements would make it scalene, and its an obtuse triangle.</p>
<p>But what if the user made the points without paying attention to the side lengths?</p>
<pre><code>#all of these are strings b/c  in the beginning of program, user has input
joe=str(float(result3)**int(2))
sally=str(float(result2)**int(2))

print(str(float(result3)**int(2)),"+",float(result2)**int(2),"=",float(result)**int(2))
print("")
print(str(float(joe)+float(sally)),"=",str(float(result)**int(2)))

#this code no matter what, will take the number its assigned too, regardless if its bigger than the hypotenuse
if(str(float(joe)+float(sally))&gt;str(float(result)**int(2))):
    print("This is an acute triangle!")
elif(str(float(joe)+float(sally))&lt;str(float(result)**int(2))):
    print("This is an obtuse triangle!")
elif(str(float(joe)+float(sally))==str(float(result)**int(2))):
    print("This is an right triangle!")
</code></pre>
<p>What I'm really asking is how I can use the array as seen above and implement into the Pythagorean theorem, from smallest value to largest. Thanks so much for helping!!</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this might be a better approach, assuming your three lengths are currently numbers (ints or floats or even strings) in the variables <code>x</code>, <code>y</code>, and <code>z</code>:</p>
<pre><code>x = float(x)  # convert from int or string if necessary
y = float(y)
z = float(z)

x, y, z = sorted([x, y, z])
a = x * x + y * y
b = z * z
if a &lt; b:
    print("obtuse")
elif a &gt; b:
    print("acute")
else:             # a == b
    print("right")
</code></pre>
<p>Note, however, that due to inaccuracies in floating-point arithmetic, there will be some failures to detect right triangles, because, for example, 25.0 != 25.000000000001... If you want to get around that, you need to use something like <code>if abs(a - b) &lt; epsilon</code> for some suitably small <code>epsilon</code>.</p>
<p>Without the first three lines, the code should work correctly for all integer values, though, because then all calculated values will be integers (or <code>long</code>s), and the arithmetic should be exact.</p>
</div>
<span class="comment-copy">There are too many conversions float&lt;-&gt;int&lt;-&gt;str in your code. You should be able to remove most of them.</span>
<span class="comment-copy">In particular, <code>int(2)</code> is a no-op.</span>
<span class="comment-copy"><code>brandonarray[result3,result2,result]</code>? You mean <code>brandonarray = [result3,result2,result]</code>?</span>
<span class="comment-copy">Like @Elazar said: don't overuse the constructor conversions. In particular, imagine a case where <code>joe = 2</code> and <code>sally = 10</code>. Then <code>str(joe) &gt; str(sally)</code>. Oops!</span>
<span class="comment-copy">your description suggests that you start with integer coordinates. in that case do not perform the square root operation but keep the squared values instead and do integer math only. so you do not lose precision.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer">The Decimal class</a>. Know it, love it, never suffer inaccuracy from inexact representation again.</span>
<span class="comment-copy">@MatthewCole Yes, that too, if it's really necessary. Given the sample code and numbers in the question, I was a bit hesitant to bring that up, because, nice as that package is, it does introduce a little more complexity...</span>
