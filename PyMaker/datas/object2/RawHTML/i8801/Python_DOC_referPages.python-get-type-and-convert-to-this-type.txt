<div class="post-text" itemprop="text">
<p>I'm new at Python. I have an object with some fields and I have a list of field names and values, but all the values in this list are strings. I need to find an object field and assign the value. I already found out how to find the field. However, I have a problem with type conversion.</p>
<p>For example:</p>
<pre><code>class SomeEntity:

    def __init__(self):
        self.id = 0
        self.name = ""
        self.some_attr = {}


 def applyValues(entity, list_of_values):
     for key, value in list_of_values:
         if hasattr(entity, key):
             setattr(entity, key, value) # !!! here is the problem to convert to type
</code></pre>
<p>i need something like this :</p>
<pre><code>x = getattr(entity, key)
type_attr = type(x)
converted = type_attr(value)
setattr(entity, key, converted)
</code></pre>
<p>How I can do this? Or can I use some other way?</p>
</div>
<div class="post-text" itemprop="text">
<p>If the value strings are valid Python literals you can use <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a> to safely evaluate those strings into Python objects.</p>
<pre><code>import ast

class SomeEntity:
    def __init__(self):
        self.id = 0
        self.name = ""
        self.some_attr = {}

def apply_values(entity, list_of_values):
    for key, value in list_of_values:
        if hasattr(entity, key):
            converted = ast.literal_eval(value)
            setattr(entity, key, converted)

entity = SomeEntity()

attr_list = [
    ('id', '42'), 
    ('name', '"the entity"'), 
    ('some_attr', '{"one": 1, "two": 2}'),
]
apply_values(entity, attr_list)

x = entity.id
print(x, type(x))
x = entity.name
print(x, type(x))
x = entity.some_attr
print(x, type(x))
</code></pre>
<p><strong>output</strong></p>
<pre><code>42 &lt;class 'int'&gt;
the entity &lt;class 'str'&gt;
{'one': 1, 'two': 2} &lt;class 'dict'&gt;
</code></pre>
<hr/>
<p>Note that we can also put the attribute name &amp; value strings into a <code>dict</code>:</p>
<pre><code>attr_dict = {
    'id': '42', 
    'name': '"the entity"', 
    'some_attr': '{"one": 1, "two": 2}'
}

apply_values(entity, attr_dict.items())
</code></pre>
<hr/>
<p>As Alfe mentions in the comments, that code ignores the type of the entity's attributes. Here's a modified version that takes the existing attribute types into account.</p>
<pre><code>import ast

class SomeEntity:
    def __init__(self):
        self.id = 0
        self.name = ""
        self.some_attr = {}
        self.level = 0.0

def apply_values(entity, list_of_values):
    for key, value in list_of_values:
        if hasattr(entity, key):
            type_attr = type(getattr(entity, key))
            converted = type_attr(ast.literal_eval(value))
            setattr(entity, key, converted)

entity = SomeEntity()

attr_dict = {
    'id': '42', 
    'name': '"the entity"', 
    'some_attr': '{"one": 1, "two": 2}',
    'level': '5',
}

apply_values(entity, attr_dict.items())

for k, v in entity.__dict__.items():
    print(repr(k), repr(v), type(v))
</code></pre>
<p><strong>output</strong></p>
<pre><code>'id' 42 &lt;class 'int'&gt;
'name' 'the entity' &lt;class 'str'&gt;
'some_attr' {'one': 1, 'two': 2} &lt;class 'dict'&gt;
'level' 5.0 &lt;class 'float'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Fixing a lot of bugs in Garjy's solution:</p>
<pre><code>converted = eval(value)
</code></pre>
<p>Maybe you want to convert it explicitly afterwards to the correct type:</p>
<pre><code>converted type(getattr(entity, key))(eval(value))
</code></pre>
<p>So completely in one line:</p>
<pre><code>setattr(entity, key, type(getattr(entity, key))(eval(value)))
</code></pre>
</div>
<span class="comment-copy">This looks like a duplicate of one of the many, many questions for which the accepted answer is "use a dictionary instead".</span>
<span class="comment-copy">I cant use dictionary instead of class because I have this class generated from protobuf</span>
<span class="comment-copy">This will put an <code>int</code> for input <code>"5"</code> into a variable which is supposed to hold a <code>float</code>.  But I guess in most cases this does not pose any problem. ⁺¹ for using <code>ast.literal_eval()</code> even though it clearly is beyond OP's level.</span>
<span class="comment-copy">@Alfe Good point. I'll add some more code to my answer.</span>
<span class="comment-copy">Thanks a lot! it wokrs perfect for me</span>
