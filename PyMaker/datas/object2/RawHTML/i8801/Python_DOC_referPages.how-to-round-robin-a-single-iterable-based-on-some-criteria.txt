<div class="post-text" itemprop="text">
<p>I have a list of dictionaries, which I want to make round robin sorted.</p>
<pre><code>sample = [
    {'source': 'G', '"serial"': '0'},
    {'source': 'G', '"serial"': '1'},
    {'source': 'G', '"serial"': '2'},
    {'source': 'P', '"serial"': '30'},
    {'source': 'P', '"serial"': '0'},
    {'source': 'P', '"serial"': '1'},
    {'source': 'P', '"serial"': '2'},
    {'source': 'P', '"serial"': '3'},
    {'source': 'T', '"serial"': '2'},
    {'source': 'T', '"serial"': '3'}
]
</code></pre>
<p>I want this result:</p>
<pre><code>sample_solved = [
    {'source': 'G', '"serial"': '0'},
    {'source': 'P', '"serial"': '30'},
    {'source': 'T', '"serial"': '2'},
    {'source': 'G', '"serial"': '1'},
    {'source': 'P', '"serial"': '1'},
    {'source': 'T', '"serial"': '3'},
    {'source': 'G', '"serial"': '2'},
    {'source': 'P', '"serial"': '0'},
    {'source': 'P', '"serial"': '2'},
    {'source': 'P', '"serial"': '3'}
]
</code></pre>
<p>The way I solved it is as follows:</p>
<pre><code>def roundrobin(*iterables):
    # took from here https://docs.python.org/3/library/itertools.html#itertools-recipes

    "roundrobin('ABC', 'D', 'EF') --&gt; A D E B F C"
    # Recipe credited to George Sakkis

    pending = len(iterables)
    nexts = cycle(iter(it).__next__ for it in iterables)
    while pending:
        try:
            for next in nexts:
                yield next()
        except StopIteration:
            pending -= 1
            nexts = cycle(islice(nexts, pending))

def solve():
    items_by_sources = collections.defaultdict(list)

    for item in sample2:
         items_by_sources[item["source"]].append(item)

    t, p, g = items_by_sources.values()

    print(list(roundrobin(t, p, g)))
</code></pre>
<p>Using Python's <code>defaultdict</code> to separate the items by source and then using the roundrobin solution which I got from Python's docs.</p>
<p>But, the solution, does not cover all the cases, for example <code>t, p, g = items_by_sources.values()</code> will break when one source is missing or a new source has been added.</p>
<p>How can I make a solution to cover more edge cases and make the solution pythonic?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a solution using <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby()</code></a> to split your input into the appropriate groups:</p>
<pre><code>from itertools import groupby

def grouprobin(iterable, key):
    groups = [list(g) for k, g in groupby(iterable, key)]
    while groups:
        group = groups.pop(0)
        yield group.pop(0)
        if group:
            groups.append(group)
</code></pre>
<p>Because of the way <code>groupby()</code> works, the clever use of iterators in the version of <code>roundrobin()</code> you took from the docs isn't very helpful, so I've rewritten it in a way that's hopefully easier to follow:</p>
<ol>
<li><p>Group the iterable by <code>key</code></p></li>
<li><p>While you still have any groups left:</p>
<ol>
<li><p>Pop the first group from the front of the list of groups</p></li>
<li><p>Pop the first item from that group, and yield it.</p></li>
<li><p>If there are still items in the group, append it back to the end of the list.</p></li>
</ol></li>
</ol>
<p>Here it is in action:</p>
<pre><code>&gt;&gt;&gt; sample_solved = list(grouprobin(sample, key=lambda d: d['source']))
&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(sample_solved)
[{'"serial"': '0', 'source': 'G'},
 {'"serial"': '30', 'source': 'P'},
 {'"serial"': '2', 'source': 'T'},
 {'"serial"': '1', 'source': 'G'},
 {'"serial"': '0', 'source': 'P'},
 {'"serial"': '3', 'source': 'T'},
 {'"serial"': '2', 'source': 'G'},
 {'"serial"': '1', 'source': 'P'},
 {'"serial"': '2', 'source': 'P'},
 {'"serial"': '3', 'source': 'P'}]
</code></pre>
<p>The version of <code>grouprobin()</code> above assumes that your list is already sorted. If not, it'll need to be sorted before it's grouped:</p>
<pre><code>def grouprobin(iterable, key):
    groups = [list(g) for k, g in groupby(sorted(iterable, key=key), key)]
    while groups:
        group = groups.pop(0)
        yield group.pop(0)
        if group:
            groups.append(group)
</code></pre>
</div>
