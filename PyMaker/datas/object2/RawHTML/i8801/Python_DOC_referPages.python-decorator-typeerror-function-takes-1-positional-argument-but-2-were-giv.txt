<div class="post-text" itemprop="text">
<p>I am trying to test the utility of decorators in Python. When I write the following codes, there is an error:</p>
<pre><code>TypeError: fizz_buzz_or_number() takes 1 positional argument but 2 were given
</code></pre>
<p>I first define a function <code>log_calls(fn)</code> as</p>
<pre><code>def log_calls(fn):
    ''' Wraps fn in a function named "inner" that writes
    the arguments and return value to logfile.log '''
    def inner(*args, **kwargs):
        # Call the function with the received arguments and
        # keyword arguments, storing the return value
        out = fn(args, kwargs)

        # Write a line with the function name, its
        # arguments, and its return value to the log file
        with open('logfile.log', 'a') as logfile:
            logfile.write(
               '%s called with args %s and kwargs %s, returning %s\n' %
                (fn.__name__,  args, kwargs, out))

        # Return the return value
        return out
    return inner
</code></pre>
<p>After that, I use log_calls to decorate another function as:</p>
<pre><code>@log_calls
def fizz_buzz_or_number(i):
    ''' Return "fizz" if i is divisible by 3, "buzz" if by
        5, and "fizzbuzz" if both; otherwise, return i. '''
    if i % 15 == 0:
        return 'fizzbuzz'
    elif i % 3 == 0:
        return 'fizz'
    elif i % 5 == 0:
        return 'buzz'
    else:
        return i
</code></pre>
<p>When I run the following code</p>
<pre><code>for i in range(1, 31):
    print(fizz_buzz_or_number(i))
</code></pre>
<p>The error <code>TypeError: fizz_buzz_or_number() takes 1 positional argument but 2 were given</code> comes. </p>
<p>I don't know what is wrong with this decorator, and how to fix this.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are passing in 2 arguments to your decorated function here:</p>
<pre><code>out = fn(args, kwargs)
</code></pre>
<p>If you wanted to apply the <code>args</code> tuple and <code>kwargs</code> dictionary as variable arguments, echo the function signature syntax, so use <code>*</code> and <code>**</code> again:</p>
<pre><code>out = fn(*args, **kwargs)
</code></pre>
<p>See the <a href="https://docs.python.org/3/reference/expressions.html#calls" rel="nofollow noreferrer"><em>Call</em> expressions reference documentation</a>:</p>
<blockquote>
<p>If the syntax <code>*expression</code> appears in the function call, expression must evaluate to an iterable. Elements from these iterables are treated as if they were additional positional arguments.</p>
<p>[...]</p>
<p>If the syntax <code>**expression</code> appears in the function call, expression must evaluate to a mapping, the contents of which are treated as additional keyword arguments.</p>
</blockquote>
</div>
<span class="comment-copy">I see what you mean. I tried again according to your suggestion, it works now.  Thanks a lot.</span>
