<div class="post-text" itemprop="text">
<p>I have a python script which is supposed to loop through all files in a directory and set the date of each file to the current time. It seems to have no effect, i.e. the Date column in the file explorer shows no change. I see the code looping through all files, it just appears that the call to <code>utime</code> has no effect.</p>
<p>The problem is <a href="https://mail.python.org/pipermail/python-bugs-list/2004-November/025966.html" rel="nofollow noreferrer">not this</a> because most of the dates are months old.  </p>
<pre><code># set file access time to current time
#!/usr/bin/python

import os
import math

import datetime

def convertSize(size):
    if (size == 0):
        return '0B'
    size_name = ("B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB")
    i = int(math.floor(math.log(size,1024)))
    p = math.pow(1024,i)
    s = round(size/p,2)
    return '%s %s' % (s,size_name[i])

# see www.tutorialspoint.com/python/os_utime.htm
def touch(fname, times=None):
    fhandle = open(fname, 'a')
    try:
        os.utime(fname, times)
    finally:
        fhandle.close()

def main():

    print ("*** Touch Files ***");

    aml_root_directory_string  = "C:\\Documents"

    file_count = 0
    file_size = 0

    # traverse root directory, and list directories as dirs and files as files
    for root, dirs, files in os.walk(aml_root_directory_string):
        path = root.split('/')
        #print((len(path) - 1) * '---', os.path.basename(root))
        for file in files:
            filename, file_extension = os.path.splitext(file)
            print(len(path) * '---', file)
            touch(filename, )

#  
    print ("\n*** Total files: " + str(file_count) + "  Total file size: " + convertSize(file_size) + " ***");
    print ("*** Done: Time: " + str(datetime.datetime.now()) + "  - Touch Files ***");


# main ###############################################################################

if __name__ == "__main__":
    # stuff only to run when not called via 'import' here
    main()
</code></pre>
<p>Edit:<br/>
In case anyone reads this in the future, it is also important to note the the file explorer can <a href="https://superuser.com/questions/212542/how-can-i-make-windows-explorer-show-file-modified-date-instead-of-created-date">display more than 1 kind of date</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You've got three issues:</p>
<ol>
<li>You're using the file name, not the full path, when <code>touch</code>ing, so all the <code>touch</code>ing occurs in the working directory</li>
<li>You're stripping the file extension too, so the touched files lack extensions</li>
<li>You're touching files to which you have an open file handle, and on Windows, on Python 2.7, this is a problem, because <a href="https://hg.python.org/cpython/file/2.7/Modules/posixmodule.c#l2970" rel="nofollow noreferrer"><code>os.utime</code> opens the files with no sharing allowed</a>, which is incompatible with existing open file handles</li>
</ol>
<p>To fix #3, change your <code>touch</code> method to:</p>
<pre><code>def touch(fname, times=None):
    # Open and immediately close file to force existence
    with open(fname, 'ab') as f:
        pass
    # Only alter times when file is closed
    os.utime(fname, times)
</code></pre>
<p>To fix #1 and #2, change your main method to call <code>touch</code> like so:</p>
<pre><code>            touch(os.path.join(root, file))
</code></pre>
<p>which uses the original name and joins it with the root directory being traversed, where <code>touch(filename)</code> was touching a file without the extension, in the program's working directory (because you used an unqualified name). If you find your program's working directory (<code>print os.getcmd()</code> will tell you where to look), you'll find a bunch of random empty files there corresponding to the files found in the tree you were traversing, stripped of paths and file extensions.</p>
<p>Side-note: If you can move to Python 3 (it's been a while, and there are a lot of improvements), you can make a slightly safer (race-free) and faster <code>touch</code> thanks to file descriptor support in <code>os.utime</code>:</p>
<pre><code>def touch(fname, times=None):
    with open(fname, 'ab') as f:
        os.utime(f.fileno(), times)
</code></pre>
<p>Not all systems will support file descriptors, so if you need to handle such systems, define <code>touch</code> based on testing for <a href="https://docs.python.org/3/library/os.html#os.supports_fd" rel="nofollow noreferrer">file descriptor support via <code>os.supports_fd</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>os.utime does work on Windows but probably you are looking at the wrong date in explorer. os.utime does not modify the creation date (which it looks like is what is used in the date field in explorer). It does update the "Date modified" field. You can see this if you right click on the category bar and check the "date modified" box. Alternatively start a command line and type "dir". The date shown there should reflect the change.</p>
<p>I tested os.utime on python 2.7 where you have to give two arguments:</p>
<pre><code>os.utime("file.txt", None)
</code></pre>
<p>and on Python 3 where the second argument defaults to None:</p>
<pre><code>os.utime("file.txt")
</code></pre>
</div>
<span class="comment-copy">Why do you <code>open()</code> the file in <code>touch()</code>?  you don't need to do that surely</span>
<span class="comment-copy">Thanks for your reply. Perhaps it is not needed. I removed all but the call to <code>utime</code> and the behavior is no different.</span>
<span class="comment-copy">@Chris_Rands: It would be needed to act like *NIX command line <code>touch</code>, where the file is created if it does not already exist. Without it, it would act like a slightly broken <code>touch -c</code> (where it doesn't create non-existent files, and in fact, raises an exception when <code>os.utime</code> can't find the file).</span>
<span class="comment-copy">@ShadowRanger But the OP is looping through <i>existing</i> files I think? I'm pretty sure <code>os.utime</code> is not working for them because the file is open for appending</span>
<span class="comment-copy">Why do you split filename from extension and then only use filename? Don't you need the entire name including extension?</span>
<span class="comment-copy">I think you've cracked it, +1</span>
<span class="comment-copy">@Chris_Rands: You made me think of the final issue, when I realized they should be seeing a bunch of empty new files. That's when I noticed they forgot to <code>join</code> on the root path when they were <code>walk</code>ing. The files are there, but nowhere near where the files they're walking are found.</span>
<span class="comment-copy">@ShadowRanger do you mind explaining why you are opening fname before touching it? Im using Python 3 on win 10 and I can touch both files and folders without 'with open()'. Am I missing something here?</span>
<span class="comment-copy">@SujitJoshi: If the file doesn't exist, you can't modify the time, so <code>open</code>ing it guarantees existence (the OP's intended code will create non-existent files, as well as updating the timestamps). The Python 3 version is even safer, since it guarantees you modify the time on the specific file you (may) have just created; there is no risk of the file being created/opened, replaced outside your process, and you suddenly change the time stamps on whatever new file took its place.</span>
<span class="comment-copy">@ShadowRanger makes sense. thanks.</span>
<span class="comment-copy">Hmm... It's possible I modified my default view, but my folders all show the Modified time, not the Created time. When everything else is fixed, this might be one last problem though.</span>
