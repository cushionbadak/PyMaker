<div class="post-text" itemprop="text">
<p>I'm very new to programming and trying to combine a list and tuple into a new list:</p>
<ul>
<li><em>goods</em> is a tuple of commodities.</li>
<li>Each commodity has a corresponding price, generated at random and saved in the list <em>prices</em></li>
<li>I want a list called <em>offer</em> assigning the corresponding price value to each commodity from <em>goods</em></li>
</ul>
<p>I'd be very grateful for a simple solution and also a brief explanation why my attempt only returns a value for cloth (I entered range 0:5 but it seems just to return element 4, cloth and its price)</p>
<pre><code>import random

goods = ("Silk", "Gems", "Wool", "Hide", "Cloth", "Iron")

def set_prices ():

    price_s = random.randrange(180,300)
    price_g = random.randrange(250,800)
    price_w = random.randrange(1,5)
    price_h = random.randrange(5,18)
    price_c = random.randrange(20,50)
    price_i = random.randrange(50,150)

    prices = [price_s,price_g,price_w,price_h,price_c,price_i]

    for n in range (0,5):
        offer = [(goods[n],prices[n])] 
        print (offer)

set_prices() 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that <code>range(0,5)</code> will only produce <code>0,1,2,3,4</code>, as the <code>5</code> is excluded. An easy solution is to use <code>range(len(goods))</code>, to produce a range with the same number of values of goods:</p>
<pre><code>for n in range(len(goods)):
    ...
</code></pre>
<p>Alternatively, you could use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> to iterate through both lists simultaneously:</p>
<pre><code>for offer in zip(goods,prices):
    print(offer)
</code></pre>
<p>This produces output as a tuple:</p>
<pre><code>('Silk', 276)
('Gems', 486)
...
</code></pre>
<p>but can be converted to a list with <code>list(offer)</code>:</p>
<pre><code>['Silk', 188]
['Gems', 620]
['Wool', 2]
['Hide', 14]
['Cloth', 38]
['Iron', 130]
</code></pre>
</div>
<span class="comment-copy">I can't reproduce your problem.</span>
<span class="comment-copy">The right boundary of ranges and slices is excluded by convention in python. So range(0,5) runs from 0 to 4 inclusive.</span>
<span class="comment-copy">Do you really mean that you <i>only</i> see the entry for cloth? That is what I can't reproduce. What does happen is that it <i>stops</i> at cloth, for the reason that @PaulPanzer gives. Another issue - in your loop you are creating a new list in each pass. You would need to append to a growing list if you want <code>offer</code> to contain the list of all offers after the loop is done.</span>
<span class="comment-copy">If both <code>goods</code> and <code>prices</code> have the same number of elements, consider using <code>zip</code>: <code>for good, price in zip(goods, prices): offer = [(good, price)]</code></span>
<span class="comment-copy">A dict of <code>{'commodity':price}</code> is a much more Pythonic idiom than list-of-lists. Also easier to look up, and iterate over. <code>{commodity:price} for commodity in goods for price in prices}</code></span>
<span class="comment-copy"><code>zip(l1,l2)</code> is so much nicer and less clunky idiom than <code>range(len(...))</code></span>
<span class="comment-copy">Yes, it looks a lot cleaner.</span>
<span class="comment-copy">Actually a dict of <code>{'commodity':price}</code> is a much more Pythonic idiom than list-of-lists. Also easier to look up, and iterate over. <code>{commodity:price} for commodity in goods for price in prices}</code></span>
<span class="comment-copy">I think <code>{commodity:price for commodity,price in zip(goods,prices)}</code> is perhaps nicer.</span>
<span class="comment-copy">I was thinking of that, too. Depends on what the OP's familiar with. Non-Python people may prefer the former, it makes everything explicit. But, both are great.</span>
