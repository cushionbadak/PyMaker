<div class="post-text" itemprop="text">
<p>Which of the following cases is the best practice way of declaring an instance variable in python. Is there a typical preference, and what are the justifications for this? </p>
<p><strong>Option 1 - Declare within __init__</strong></p>
<pre><code>class MyObject:

    def __init__(self, arg):
        self.variable_1 = self.method_1(arg)

    def method_1(self, arg):
        return(arg)
</code></pre>
<p><strong>Option 2 - Declare in other methods</strong></p>
<pre><code>class MyObject:

    def __init__(self, arg):
        self.method_1(arg)

    def method_1(self, arg):
        self.variable_1 = arg
</code></pre>
<p>This is purely to understand if there is a best practice way of doing this that other developers would prefer to see when reviewing and extending code.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is obviously not exact science, but it generally makes more sense to set all attributes (as possible) in the constructor so that you can follow up on them.</p>
<p>You can, of course, change them later as necessary in other methods.</p>
<p>Setting constructor level variables everywhere in the class makes it very hard to understand where things are coming from.</p>
</div>
<div class="post-text" itemprop="text">
<p>Option 1 is best practice to declare instance variable in Python.
Instance variables are for data that is actually part of the instance so it would be better if you define in constructor.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your Option 2 is basically a Setter-/Getter-Paradigm. Python uses properties for these use-cases. There's a nice <a href="https://stackoverflow.com/a/6618176/1107807%20for%20a">SO-answer</a> for a similar question.</p>
<p>In general you initialize all your Instance-variables in the <code>__init__</code>-method, that's its reason to exist. If you need a getter-/setter use properties. And use the "least-astonishment" principle. Do not surprise another reader, or your later self with overly clever and/or complicated solutions. (aka KISS principle)</p>
</div>
<div class="post-text" itemprop="text">
<p>It depends. Defining all the attributes inside <code>__init__</code> itself generally makes the code more readable, but if the class has a lot of attributes and you can easily divide them into logical groups then it makes sense to initialise each group of attributes in its own initialising method. You may wish to indicate that such methods are <a href="https://docs.python.org/3/tutorial/classes.html#tut-private" rel="nofollow noreferrer">private</a> by giving them a name that commences with a single underscore.</p>
<p>Note that if the class is derived from one or more other classes (apart from <code>object</code>) then you will have to call <code>super.__init__</code> to initialise the attributes inherited from the parent class(es).</p>
<p>The bottom line is that all instance attributes should exist by the time that <code>__init__</code> finishes executing. If it's not possible to set a proper value for some attribute in <code>__init__</code> then it should be set to an appropriate default value, eg an empty string, list, etc, <code>None</code>, or a sentinel value like <code>object()</code>.</p>
<p>Of course, the above doesn't apply to <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer"><code>@property</code></a> attributes, but even those will generally have an underlying "private" attribute that should be set in <code>__init__</code>.</p>
<p>For more info about properties, please see <a href="https://stackoverflow.com/users/1001643/raymond-hettinger">Raymond Hettinger</a>'s excellent <a href="https://docs.python.org/3/howto/descriptor.html#properties" rel="nofollow noreferrer">Descriptor HowTo Guide</a> in the Python docs.</p>
<hr/>
<p>As juanpa.arrivillaga mentions in the question comments, we don't actually <em>declare</em> variables in Python. That's basically because the Python data model doesn't really have variables like C and many other languages do. For a succinct explanation with nice diagrams please see <a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#other-languages-have-variables" rel="nofollow noreferrer">Other languages have "variables", Python has "names"</a>. Also see <a href="http://nedbatchelder.com/text/names.html" rel="nofollow noreferrer">Facts and myths about Python names and values</a>, which was written by SO veteran Ned Batchelder.</p>
</div>
<span class="comment-copy">Option 1. You should declare all attributes in <code>__init__</code> because that it where someone will look for them.</span>
<span class="comment-copy">The general rule in OOP (irrespective of the programming language) is the constructor is like an assignment operator means in <b>init</b> we should assign the values of instance variables. So I think we should assign the values in <b>init</b> and getter and setter should be separated from it.</span>
<span class="comment-copy">I apologize for being pedantic, but instance variables are not declared in Python. They <a href="https://docs.python.org/3.3/tutorial/classes.html#instance-objects" rel="nofollow noreferrer">spring into existence</a> when they are first assigned to. Variable declaration exists in languages like C++ and Java, not in Python.</span>
<span class="comment-copy">Good point @juanpa.arrivillaga. You may note I carefully avoided using the word "declare" in my answer. :) I'm also trying to get out of the habit of using the word "variable" in Python, but it's just too convenient...</span>
