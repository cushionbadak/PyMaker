<div class="post-text" itemprop="text">
<p>I am using Django for my web development framework. And now I am writing unittest. How can  I assert that a function is not executed in my test code?</p>
<p>For example, this is the use case: <em>My test code is testing a user is typing a wrong password while signing in.</em> I want to make sure that reset password function is not executed in this use case.</p>
<p>Well, this doesn't really reflect the real situation but I hope you get my point.</p>
</div>
<div class="post-text" itemprop="text">
<p>What I would do is to use mock. Mock the function and assert that <code>mock_function.call_count==0</code>.</p>
<p>You can read more about mock here:<br/>
<a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer">https://docs.python.org/3/library/unittest.mock.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I'd like to answer my own question. So far my solution is using <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.called" rel="nofollow noreferrer"><code>Mock.call</code></a>. Example this is where reset password function located: <code>utils/password.py</code></p>
<pre><code>class Password(object):

    def reset(self):
        ...
</code></pre>
<p>So I need to mock this object at my test code <code>test/login.py</code></p>
<pre><code>@patch('utils.password.Password.reset')
def test_wrong_password(self, mocked_password_reset):
    ...
    assert mocked_password_reset.called == False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>use <code>mock.patch.object</code> and <code>assert_not_called</code> or <code>call_count</code> to do this.
assume you function define in <code>mymodule.py</code>:</p>
<pre><code>def function_can_not_be_called():
    pass

def func(call):
    if call:
        function_can_not_be_called()
</code></pre>
<p>test code in <code>test_mymodule.py</code></p>
<pre><code>import mymodule
import unittest
from mock import patch

class CTest(unittest.TestCase):

    @patch.object(mymodule, "function_can_not_be_called")
    def test_MockFunc(self, mock_func):
        mymodule.func(0)
        mock_func.assert_not_called()

        mymodule.func(1)
        mock_func.assert_called_once()

if __name__ == "__main__":
    unittest.main()
</code></pre>
</div>
<span class="comment-copy">how about adding a global counter to the function (e.g. for each execution of the function it is incremented by 1). test its value before and after the test - if it differs, it was called; if its the same it wasnt [workaround type of thing I guess....)</span>
<span class="comment-copy">Mock <code>reset</code> function so it does nothing.</span>
