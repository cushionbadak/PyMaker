<div class="post-text" itemprop="text">
<p>I want to make this code compatible with python2-3 : </p>
<pre><code>def normalize_text(text, ignore_characters=''):
    if type(ignore_characters) not in [list, str, unicode]:
        ignore_characters = ''
    if type(ignore_characters) == str:
        ignore_characters = ignore_characters.decode('utf-8')
    if type(ignore_characters) == list:
        new_ignore_characters = []
        for item in ignore_characters:
            if type(item) == str:
                new_ignore_characters.append(item.decode('utf-8'))
            elif type(item) == unicode:
                new_ignore_characters.append(item)
        ignore_characters = new_ignore_characters

    if type(text) == str:
        text = text.decode('utf-8')
</code></pre>
<p>There is no <code>unicode</code> or <code>decode</code> on <code>str</code> type in python 3. What is the best workaround to make this code python2-3 compatible?</p>
</div>
<div class="post-text" itemprop="text">
<p>I highly recommend using <a href="https://pythonhosted.org/six/" rel="nofollow noreferrer"><strong>six</strong></a> library for writing Python 2/3 compatible code.</p>
<p>Plus use <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="nofollow noreferrer"><code>isinstance()</code></a> for checking type instead of <code>type()</code>. <code>type()</code> won't work in case of multiple-inheritance:</p>
<pre><code>from six import text_type, binary_type

if isinstance(ignore_characters, binary_type):
   # do something with bytes
elif isinstance(ignore_characters, text_type):
   # do something with unicode.
</code></pre>
<hr/>
<pre><code># Python 2 
&gt;&gt;&gt; import six
&gt;&gt;&gt; six.binary_type, six.text_type
(&lt;type 'str'&gt;, &lt;type 'unicode'&gt;)

# Python 3
&gt;&gt;&gt; import six
&gt;&gt;&gt; six.binary_type, six.text_type
(&lt;class 'bytes'&gt;, &lt;class 'str'&gt;)
</code></pre>
<hr/>
<p>Other approach is to basically write your own aliases for compatibility based on Python version obtained using <code>sys.version_info</code>:</p>
<p>A good example of this is <a href="https://github.com/kennethreitz/requests/blob/master/requests/compat.py" rel="nofollow noreferrer"><code>compat.py</code></a> file from <a href="https://github.com/kennethreitz/requests" rel="nofollow noreferrer"><strong>requests</strong></a> library:</p>
<pre><code>_ver = sys.version_info

#: Python 2.x?
is_py2 = (_ver[0] == 2)

#: Python 3.x?
is_py3 = (_ver[0] == 3)

if is_py2:
    builtin_str = str
    bytes = str
    str = unicode
    basestring = basestring
    numeric_types = (int, long, float)
    integer_types = (int, long)

elif is_py3:
    builtin_str = str
    str = str
    bytes = bytes
    basestring = (str, bytes)
    numeric_types = (int, float)
    integer_types = (int,)
</code></pre>
<p>Now you can import these functions from this file instead of using the builtins directly.</p>
</div>
