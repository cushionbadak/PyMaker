<div class="post-text" itemprop="text">
<p>I am currently using the BioPython <code>Bio.PDB</code> module to parse and read protein structure files (PDB files). I have run into recursion issues when trying to create a deep copy of the <code>structure</code> object returned by the <code>PDBParser().get_structure(...)</code> method. </p>
<p>I was under the impression that the <code>copy.deepcopy</code> function was designed to deal with recursion? Strangely, this is only an issue using Python 3. Running equivalent code in Python 2.7 works fine (uses <code>urllib2</code> instead of <code>urllib</code>).</p>
<p>Is this a bug in <code>copy.deepcopy</code>? Or an issue with <code>Biopython</code>?</p>
<p>A minimal example (<em>Python 3.6, Biopython 1.68</em>) is:</p>
<pre><code>import urllib.request
from io import StringIO
from copy import deepcopy
import Bio.PDB

pdb_name = '1zro'
#Download file
pdb_url = "http://www.rcsb.org/pdb/files/" + pdb_name + ".pdb"
pdb_file = urllib.request.urlopen(pdb_url)
#Create string stream for Bio.PDB to read:
pdb_input_stream = StringIO(pdb_file.read().decode('utf-8'))

#Make Bio.PDB structure object
parser = Bio.PDB.PDBParser()
structure = parser.get_structure(pdb_name, pdb_input_stream)

#Attempt to perform a deepcopy on Bio.PDB Structure:
structure_copy = deepcopy(structure)
</code></pre>
<p>Full traceback:</p>
<pre><code>  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
  File "/home/andrew/Programs/anaconda3/envs/py36/lib/python3.6/copy.py", line 180, in deepcopy
    y = _reconstruct(x, memo, *rv)
  File "/home/andrew/Programs/anaconda3/envs/py36/lib/python3.6/copy.py", line 280, in _reconstruct
    state = deepcopy(state, memo)
  File "/home/andrew/Programs/anaconda3/envs/py36/lib/python3.6/copy.py", line 150, in deepcopy
    y = copier(x, memo)
  File "/home/andrew/Programs/anaconda3/envs/py36/lib/python3.6/copy.py", line 240, in _deepcopy_dict
    y[deepcopy(key, memo)] = deepcopy(value, memo)
  File "/home/andrew/Programs/anaconda3/envs/py36/lib/python3.6/copy.py", line 150, in deepcopy
    y = copier(x, memo)
  File "/home/andrew/Programs/anaconda3/envs/py36/lib/python3.6/copy.py", line 215, in _deepcopy_list
    append(deepcopy(a, memo))
  File "/home/andrew/Programs/anaconda3/envs/py36/lib/python3.6/copy.py", line 180, in deepcopy
    y = _reconstruct(x, memo, *rv)
  File "/home/andrew/Programs/anaconda3/envs/py36/lib/python3.6/copy.py", line 280, in _reconstruct
    state = deepcopy(state, memo)
  File "/home/andrew/Programs/anaconda3/envs/py36/lib/python3.6/copy.py", line 150, in deepcopy
    y = copier(x, memo)
  File "/home/andrew/Programs/anaconda3/envs/py36/lib/python3.6/copy.py", line 240, in _deepcopy_dict
    y[deepcopy(key, memo)] = deepcopy(value, memo)
  File "/home/andrew/Programs/anaconda3/envs/py36/lib/python3.6/copy.py", line 150, in deepcopy
    y = copier(x, memo)
  File "/home/andrew/Programs/anaconda3/envs/py36/lib/python3.6/copy.py", line 215, in _deepcopy_list
    append(deepcopy(a, memo))
  File "/home/andrew/Programs/anaconda3/envs/py36/lib/python3.6/copy.py", line 180, in deepcopy
    y = _reconstruct(x, memo, *rv)
  File "/home/andrew/Programs/anaconda3/envs/py36/lib/python3.6/copy.py", line 280, in _reconstruct
    state = deepcopy(state, memo)
  File "/home/andrew/Programs/anaconda3/envs/py36/lib/python3.6/copy.py", line 150, in deepcopy
    y = copier(x, memo)
  File "/home/andrew/Programs/anaconda3/envs/py36/lib/python3.6/copy.py", line 240, in _deepcopy_dict
    y[deepcopy(key, memo)] = deepcopy(value, memo)
  File "/home/andrew/Programs/anaconda3/envs/py36/lib/python3.6/copy.py", line 150, in deepcopy
    y = copier(x, memo)
  File "/home/andrew/Programs/anaconda3/envs/py36/lib/python3.6/copy.py", line 215, in _deepcopy_list
    append(deepcopy(a, memo))
  File "/home/andrew/Programs/anaconda3/envs/py36/lib/python3.6/copy.py", line 180, in deepcopy
    y = _reconstruct(x, memo, *rv)
  File "/home/andrew/Programs/anaconda3/envs/py36/lib/python3.6/copy.py", line 280, in _reconstruct
    state = deepcopy(state, memo)
  File "/home/andrew/Programs/anaconda3/envs/py36/lib/python3.6/copy.py", line 150, in deepcopy
    y = copier(x, memo)
  File "/home/andrew/Programs/anaconda3/envs/py36/lib/python3.6/copy.py", line 240, in _deepcopy_dict
    y[deepcopy(key, memo)] = deepcopy(value, memo)
  File "/home/andrew/Programs/anaconda3/envs/py36/lib/python3.6/copy.py", line 150, in deepcopy
    y = copier(x, memo)
  File "/home/andrew/Programs/anaconda3/envs/py36/lib/python3.6/copy.py", line 215, in _deepcopy_list
    append(deepcopy(a, memo))
  File "/home/andrew/Programs/anaconda3/envs/py36/lib/python3.6/copy.py", line 180, in deepcopy
    y = _reconstruct(x, memo, *rv)
  File "/home/andrew/Programs/anaconda3/envs/py36/lib/python3.6/copy.py", line 281, in _reconstruct
    if hasattr(y, '__setstate__'):
  File "/home/andrew/Programs/anaconda3/envs/py36/lib/python3.6/site-packages/Bio/PDB/Entity.py", line 207, in __getattr__
    if not hasattr(self, 'selected_child'):
  File "/home/andrew/Programs/anaconda3/envs/py36/lib/python3.6/site-packages/Bio/PDB/Entity.py", line 207, in __getattr__
    if not hasattr(self, 'selected_child'):
  File "/home/andrew/Programs/anaconda3/envs/py36/lib/python3.6/site-packages/Bio/PDB/Entity.py", line 207, in __getattr__
    if not hasattr(self, 'selected_child'):
  [Previous line repeated 318 more times]
RecursionError: maximum recursion depth exceeded
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Andrew kindly filed this as Biopython issue <a href="https://github.com/biopython/biopython/issues/787" rel="nofollow noreferrer">https://github.com/biopython/biopython/issues/787</a> - although we're still not sure what is going wrong under Python 3 here.</p>
</div>
<span class="comment-copy">You might be interesting about this: <a href="http://stackoverflow.com/questions/3323001/what-is-the-maximum-recursion-depth-in-python-and-how-to-increase-it" title="what is the maximum recursion depth in python and how to increase it">stackoverflow.com/questions/3323001/â€¦</a></span>
<span class="comment-copy">Thanks @sangheestyle, I have already tried increased the recursion limit to stupid levels, and have achieved nothing more than a segfault. But that was my first thought as well.</span>
<span class="comment-copy">I see. Hmm.. What else...</span>
<span class="comment-copy">Just googled <i>"python3.6 deepcopy issues"</i> and looking at some of the posts, namely <a href="https://github.com/cloudtools/troposphere/issues/648" rel="nofollow noreferrer">this</a> one. It could quite possibly be an issue with deepcopy for 3.6, see if python3.5 gives same issue since I've seen a couple problems arise due to 3.6</span>
<span class="comment-copy">Have a look at <a href="https://code.activestate.com/recipes/302535/" rel="nofollow noreferrer">this recipe</a>. I haven't tested it, but it might help. And, according the <a href="https://docs.python.org/3/library/copy.html" rel="nofollow noreferrer">documentation</a>, this is always something to watch out for when using deepcopy: "Recursive objects (compound objects that, directly or indirectly, contain a reference to themselves) may cause a recursive loop."</span>
<span class="comment-copy">Thanks for flagging that Peter. I'm more and more convinced that it's a <code>deepcopy</code> issue it its root, but haven't yet figured out what exactly is going on. Going to try and put together a minimal example that replicates the issues when I have time.</span>
