<div class="post-text" itemprop="text">
<p>When using <code>patch.object</code> in order to mock a method, is there a way to specify that for certain parameters values, the method will run as it was not mocked at all, and will return the "real" return_value, and for other parameters values to set a specific return_value?</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a solution (modified from where I've used it) that works reasonably well.  It involves setting <code>side_effect</code> of the patch to a function.</p>
<pre><code>import os.path
from unittest import mock

def different_return_values(dct):
     def f(*args):
         return dct[args]
     return f

with mock.patch.object(
    os.path,
    'exists',
    side_effect=different_return_values({
        # The "generic" version above makes the arguments in order
        # the keys to this map, you could write a specialized version
        # which has a single argument or *whatever* key combination you
        # like
        ('myfile',): True,
        ('wat',): 'not a real return value but hey, monkeypatch!',
        ('otherfile',): False,
    }),
):
    print(os.path.exists('myfile'))
    print(os.path.exists('wat'))
    print(os.path.exists('otherfile'))

OUTPUT = """\
True
not a real return value but hey, monkeypatch!
False
"""
</code></pre>
<p>The takeaway here is you can provide a <em>smarter</em> implementation of the function you are patching as <code>side_effect</code>: <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.side_effect" rel="nofollow noreferrer">https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.side_effect</a></p>
</div>
