<div class="post-text" itemprop="text">
<p>I want to write a decorator that does persistent memoization (memoizing to disk). Since I want to use this decorator for many functions, I have to decide where to save memoizing data for these functions. I googled around and found two solutions:</p>
<ol>
<li>let the functions decide where to store the memoizing data</li>
<li>automatically determine where to store the data by function names</li>
</ol>
<p>However, in these two solutions, it is necessary for every function to "know" each other in case of colliding of names (or destinations), which is a smell of bad design. </p>
<p>Thus, my question is, how to avoid such collidings?</p>
</div>
<div class="post-text" itemprop="text">
<p>Save it in something next to or related to <code>__file__</code>, which is the path to the file the module was loaded from.  I believe in some cases it can be a relative path, so you might want to store the memos in that path directly, or turn it into an absolute path or something.</p>
</div>
<span class="comment-copy">The <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer">pickle module</a> which has to solve a similar problem uses the "fully qualified name" for pickling functions.</span>
<span class="comment-copy">Interesting question, but I don't have an answer. I do however, have a couple of comments. :) 1. The functions that you decorate shouldn't know that they're decorated, so they shouldn't contain code or data relating to the memoization destination. OTOH, your decorator could choose a default destination based on the <code>__file__</code> and function's <code>.__name__</code>, but also accept an argument to choose a different destination path, or to modify the default one. 2. Take care to ensure that your program can handle being run more than once simultaneously.</span>
