<div class="post-text" itemprop="text">
<p>say I have a function:</p>
<pre><code>x=[]
i=5
while i&lt;=20:
     x.append(i)
     i=i+10
return x
</code></pre>
<p>Is there anyway to convert it to a list comprehension like this?</p>
<pre><code>newList = [i=05 while i&lt;=20 i=i+10]
</code></pre>
<p>I get a syntax error</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>No, you cannot use <code>while</code> in a list comprehension.</strong></p>
<p>From the <a href="https://docs.python.org/3/reference/grammar.html" rel="nofollow noreferrer">grammar specification of Python</a>, only the following atomic expressions are allowed:</p>
<pre><code>atom: ('(' [yield_expr|testlist_comp] ')' |    '[' [testlist_comp] ']' |    '{' [dictorsetmaker] '}' |    NAME | NUMBER | STRING+ | '...' | 'None' | 'True' | 'False')
</code></pre>
<p>The expression corresponding to a list comprehension - <code>testlist_comp</code> looks like the following in Python 3:</p>
<pre><code>testlist_comp: (test|star_expr) ( comp_for | (',' (test|star_expr))* [','] )
</code></pre>
<p>Here, the only statements allowed are</p>
<pre><code>test: or_test ['if' or_test 'else' test] | lambdef
star_expr: '*' expr
comp_for: [ASYNC] 'for' exprlist 'in' or_test [comp_iter]
</code></pre>
<p>where </p>
<pre><code>comp_if: 'if' test_nocond [comp_iter]
comp_iter: comp_for | comp_if
</code></pre>
<p>There is not a single <code>while</code> statement allowed anywhere. The only keywords you are allowed to use is a <code>for</code>, for a for loop.</p>
<h1>Solution</h1>
<p>Use a <code>for</code> loop, or take advantage of <a href="https://docs.python.org/2/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code></a></p>
</div>
<div class="post-text" itemprop="text">
<p>You don't need a list comprehension for that, range will just do:</p>
<pre><code>list(range(5, 21, 10)) # [5, 15]
</code></pre>
<p>A while loop is not possible inside of a list comprehension, instead you could do something like this:</p>
<pre><code>def your_while_generator():
    i = 5
    while i &lt;= 20:
        yield i
        i += 10

[i for i in your_while_generator()]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's no syntax for this, but you can use itertools. For example:</p>
<pre><code>In [11]: from itertools import accumulate, repeat, takewhile

In [12]: list(takewhile(lambda x: x &lt;= 20, accumulate(repeat(1), lambda x, _: x + 10)))
Out[12]: [1, 11]
</code></pre>
<p><em>(That's not pythonic though, the generator solution or explicit solution should be preferred.)</em></p>
</div>
<span class="comment-copy"><code>i</code> isn't changing in your <i>while</i> loop, so it'll simpy <i>whirl</i> forever.</span>
<span class="comment-copy"><code>i</code> is never modified, so <code>i &lt;= 5</code> is always true, and the <code>while</code> loop will never exit.</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/5505891/using-while-in-list-comprehension-or-generator-expressions">Using while in list comprehension or generator expressions</a></span>
<span class="comment-copy">I fixed it, in the real code it's incremented, just forgot to add it here. It still does not work</span>
<span class="comment-copy">The fundamental problem here is that initializing an integer and manually incrementing it within a <code>while</code> loop is the wrong way to iterate over a sequence of numbers in Python. Your first code block would more appropriately be <code>x = []; for i in range(5, 21, 10): x.append(i)</code>, which has a much clearer path for conversion into a comprehension.</span>
<span class="comment-copy">You don't need to cast it to <code>list</code>.</span>
<span class="comment-copy">My code is just an example, I know that that could get me my result, I'm wondering if it's possible to use a while loop inside a list comprehension</span>
<span class="comment-copy">@hashcode55 - Without the <code>list</code> call, it'll be a <code>range</code> object, not a list.</span>
<span class="comment-copy">@hashcode55 You don't need to <code>list</code> in 2.7, but Python 3 onwards, <code>xrange</code> has been renamed to <code>range</code> and the original <code>range</code> has been dropped. Since <code>xrange</code> is a generator and is now called <code>range</code> in Python 3, you can do the rest of the math.</span>
<span class="comment-copy">@AkshatMahajan - Python 2's <code>xrange</code> is simply a generator, while Python 3's <code>range</code> has additional logic in it (see <a href="http://stackoverflow.com/questions/30081275/why-is-1000000000000000-in-range1000000000000001-so-fast-in-python-3">here</a>).</span>
