<div class="post-text" itemprop="text">
<p>Thank you guys for seeing my post.</p>
<p>First, the following is my code:</p>
<pre><code>import os

print("You can create your own message for alarm.")
user_message = input("&gt;&gt; ")

print("\n&lt;&lt; Sample alarm sound &gt;&gt;")

for time in range(0, 3):
    os.system('say ' + user_message) # this code makes sound.

print("\nOkay, The alarm has been set.")

"""
##### My problem is here #####
##### THIS IS NOT STOPPED #####

while True:
    try:
        os.system('say ' + user_message)
    except KeyboardInterrupt:
        print("Alarm stopped")
        exit(0)
"""
</code></pre>
<p>My problem is that <strong>Ctrl + C does not work!</strong></p>
<p>I tried changing position of <code>try</code> block, and making signal(SIGINT) catching function.</p>
<p>But those also does not work.</p>
<p>I have seen <a href="https://stackoverflow.com/a/8335212/5247212">https://stackoverflow.com/a/8335212/5247212</a>, <a href="https://stackoverflow.com/a/32923070/5247212">https://stackoverflow.com/a/32923070/5247212</a>, and other several answers about this problem.</p>
<p>I am using MAC OS(10.12.3) and python 3.5.2.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is expected behaviour, as <code>os.system()</code> is a thin wrapper around the C function <code>system()</code>. As noted in the <a href="https://linux.die.net/man/3/system" rel="nofollow noreferrer">man page</a>, the parent process <strong>ignores</strong> SIGINT during the execution of the command. In order to exit the loop, you have to manually check the exit code of the child process (this is also mentioned in the man page):</p>
<pre><code>import os
import signal

while True:
    code = os.system('sleep 1000')
    if code == signal.SIGINT:
        print('Awakened')
        break
</code></pre>
<p>However, the preferred (and more pythonic) way to achieve the same result is to use the <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer"><code>subprocess</code></a> module:</p>
<pre><code>import subprocess

while True:
    try:
        subprocess.run(('sleep', '1000'))
    except KeyboardInterrupt:
        print('Awakened')
        break
</code></pre>
<p>Your code would then look like something like this:</p>
<pre><code>import subprocess

print("You can create your own message for alarm.")
user_message = input("&gt;&gt; ")

print("\n&lt;&lt; Sample alarm sound &gt;&gt;")

for time in range(0, 3):
    subprocess.run(['say', user_message]) # this code makes sound.

print("\nOkay, The alarm has been set.")

while True:
    try:
        subprocess.run(['say', user_message])
    except KeyBoardInterrupt:
        print("Alarm terminated")
        exit(0)
</code></pre>
<p>As an added note, <code>subprocess.run()</code> is only available in Python 3.5+. You can use <code>subprocess.call()</code> <a href="https://docs.python.org/3.5/library/subprocess.html?highlight=subprocess#subprocess.call" rel="nofollow noreferrer">to achieve the same effect</a> in older versions of Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>Also catch "SystemExit"</p>
<pre><code>except (KeyboardInterrupt, SystemExit):
    print("Alarm stopped")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem seems to be that Ctrl+C is captured by the subprocess you call via <code>os.system</code>. This subprocess reacts correspondingly, probably by terminating whatever it is doing. If so, the return value of <code>os.system()</code> will be not zero. You can use that to break the <code>while</code> loop.</p>
<p>Here's an example that works with me (substituting <code>say</code> by <code>sleep</code>):</p>
<pre class="lang-py prettyprint-override"><code>import os
import sys

while True:
    try:
        if os.system('sleep 1 '):
            raise KeyboardInterrupt
    except KeyboardInterrupt:
        print("Alarm stopped")
        sys.exit(0)
</code></pre>
</div>
<span class="comment-copy">Have you seen <a href="http://stackoverflow.com/questions/18047657/stop-python-in-terminal-on-mac">this question</a>?</span>
<span class="comment-copy">Seemed to work fine for me on windows 7 and Ubuntu 14.04  (though obviously had to replace the MACOS specific "say" command with a print. The point is that ctrl-C was correctly trapped, it printed alarm stopped and exited.</span>
<span class="comment-copy">No.. It doesn't work too. Did you try this code?</span>
