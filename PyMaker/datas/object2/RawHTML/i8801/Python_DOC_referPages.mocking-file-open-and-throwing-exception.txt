<div class="post-text" itemprop="text">
<p>I am new to python testing. I am using pytest and started learning about mocks and patches. I am trying to write a test case for one of my methods.</p>
<p><strong>helper.py</strong></p>
<pre><code>def validate_json_specifications(path_to_data_folder, json_file_path, json_data) -&gt; None:

    """ Validates the json data with a schema file.
    :param path_to_data_folder: Path to the root folder where all the JSON &amp; schema files are located.
    :param json_file_path: Path to the json file
    :param json_data: Contents of the json file
    :return: None
    """

    schema_file_path = os.path.join(path_to_data_folder, "schema", os.path.basename(json_file_path))
    resolver = RefResolver('file://' + schema_file_path, None)
    with open(schema_file_path) as schema_data:
        try:
            Draft4Validator(json.load(schema_data), resolver=resolver).validate(json_data)
        except ValidationError as e:
            print('ValidationError: Failed to validate {}: {}'.format(os.path.basename(json_file_path), str(e)))
            exit()
</code></pre>
<p>Things I want to test are:</p>
<ol>
<li>Is the Draft4Validator class instantiated and the validate method is invoked with the <code>json_data</code>?</li>
<li>Is <code>ValidationError</code> thrown and exit is called?</li>
</ol>
<p>Here is my attempt at writing a test case so far. I decided to patch <code>open</code> method &amp; <code>Draft4Validator</code> class.</p>
<pre><code>@patch('builtins.open', mock_open(read_data={}))
@patch('myproject.common.helper.jsonschema', Draft4Validator())
def test_validate_json_specifications(mock_file_open, draft_4_validator_mock):
    validate_json_specifications('foo_path_to_data', 'foo_json_file_path', {})
    mock_file_open.assert_called_with('foo_path_to_data/schema/foo_json_file_path')
    draft_4_validator_mock.assert_called()
</code></pre>
<p>I wanted to pass some fake data and paths to my method instead of trying to pass real data. I got this error message</p>
<p><strong>UPDATE:</strong></p>
<pre><code>    @patch('myproject.common.helper.jsonschema', Draft4Validator())
E   TypeError: __init__() missing 1 required positional argument: 'schema'
</code></pre>
<p>How do I go about creating patches for 2 methods specially <code>Draft4Validator</code> and how do I simulate <code>ValidationError</code> exception? </p>
</div>
<div class="post-text" itemprop="text">
<p>You were patching the <code>Draft4Validator</code> wrong. Basically what you were doing is creating a new Draft4Validator object without the required arguments and assigning it to the <code>myproject.common.helper.jsonschema</code> call everytime (had you created it with the required arguments).</p>
<p>Read more about it here: <a href="https://docs.python.org/3/library/unittest.mock-examples.html#patch-decorators" rel="nofollow noreferrer">https://docs.python.org/3/library/unittest.mock-examples.html#patch-decorators</a></p>
<p>For checking assertions about expected exceptions check: <a href="http://doc.pytest.org/en/latest/assert.html#assertions-about-expected-exceptions" rel="nofollow noreferrer">http://doc.pytest.org/en/latest/assert.html#assertions-about-expected-exceptions</a></p>
<p>I guess by your question and requirements that you want something along the lines of this:</p>
<pre><code>@patch('sys.exit')
@patch('myproject.common.helper.jsonschema.Draft4Validator')
@patch('builtins.open')
def test_validate_json_specifications(mock_file_open, draft_4_validator_mock, exit_mock):
    with pytest.raises(ValidationError):
        mock_file_open.return_value = {}
        draft_4_validator_mock = Mock()
        draft_4_validator_mock.side_effect = ValidationError

        validate_json_specifications('foo_path_to_data', 'foo_json_file_path', {}) 

        assert draft_4_validator_mock.call_count == 1
        assert draft_4_validator_mock.validate.assert_called_with({})        
        assert exit_mock.call_count == 1
</code></pre>
</div>
