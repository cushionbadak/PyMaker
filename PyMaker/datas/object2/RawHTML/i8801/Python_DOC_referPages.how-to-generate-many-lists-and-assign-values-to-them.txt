<div class="post-text" itemprop="text">
<p>I want to read a specific number of lines from a list and assign all those values to a new list. Then I want to read the next bunch from the last_value+1 line from before for the exact same number of lines and assign those to a new list. So far I have this:</p>
<p>Let's say <code>u = [1,2,3....,9,10,11,12,13...,19,20]</code> and I want to assign the first 10 values from <code>u</code> into my newly generated <code>list1 = [] =&gt; list1 = [1,2,..9,10]</code></p>
<p>then I want the next 10 values from <code>u</code> to be assigned to <code>list2</code> so <code>list2 = [11,12,13..,20]</code>. The code so far is:</p>
<pre><code>nLines = 10
nrepeats = 2
j=0
i=0

while (j&lt;nrepeats):
### Generating empty lists ###
mklist = "list" + str(j) + " = []"
### do the segmentation ###
for i, uline in enumerate(u):
    if i &gt;= i and i &lt; i+nLines:
       mklist.append(uline)
j=j+1
</code></pre>
<p>Now the problem is, that i cant append to mklist because it's a string:</p>
<pre><code>AttributeError: 'str' object has no attribute 'append'
</code></pre>
<p>How can I assign those values within that loop? </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> function to group elements from iterables into groups of the same size.  There are actually two ways, that differ in how you way to handle cases where you can't divide the source data cleanly</p>
<pre><code>u = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
</code></pre>
<p>The first way is with regular <code>zip</code> and discards the leftover fragment</p>
<pre><code>&gt;&gt;&gt;list(zip(*[iter(u)]*10))
[(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (11, 12, 13, 14, 15, 16, 17, 18, 19, 20)]
</code></pre>
<p>The second way uses <code>itertools.zip_longest</code> and pads out the last group with some <code>fillvalue</code> (default <code>None</code>)</p>
<pre><code>&gt;&gt;&gt;import itertools
&gt;&gt;&gt;list(itertools.zip_longest(*[iter(u)]*10, fillvalue=None))
[(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (11, 12, 13, 14, 15, 16, 17, 18, 19, 20), (21, None, None, None, None, None, None, None, None, None)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use a more suitable collection, for example, a dictionary:</p>
<pre><code>nLines = 10
nrepeats = 2
j=0
i=0

my_dict = {}

while (j&lt;nrepeats):
    ### Generating empty lists ###
    my_dict[str(j)] = []
    ### do the segmentation ###
    for i, uline in enumerate(u):
        if i &gt;= i and i &lt; i+nLines:
            my_dict[str(j)].append(uline)
j=j+1
</code></pre>
</div>
<span class="comment-copy">Do you really want everything to become a string? Don't you want to end up with a list of lists?</span>
<span class="comment-copy"><code>if i &gt;= i and i &lt; i+nLines:</code> should some of these <code>i</code>s be <code>j</code>s?  As is, this condition is always true.</span>
<span class="comment-copy">@PatrickHaugh I meant to do: <code>if i &gt;= 0 and i &lt; 10</code> read those lines and append them. However, i haven't yet figured it out how the condition looks in the next step of the loop when it should read the values 11 to 20.</span>
<span class="comment-copy">@Denziloe no I don't want strings. Just for every 10 lines a new list. like <code>list1=[1-10], list2=[11-20]</code></span>
<span class="comment-copy">Use list comprehension <code>mklist = [uline for i, uline in enumerate(u) if i &gt;= i and i &lt; i+nLines]</code>.</span>
<span class="comment-copy">awesome! how do I access for example the first ten values again? let's say i have u as defined above and x similar but different numbers. Now i want to plot the first 10 numbers of u versus the first ten numbers of x</span>
<span class="comment-copy">You would access them like you would any other list.  The first 10 values would be at the zero index of the resulting list.</span>
<span class="comment-copy">how can i acces the first entry in the first list? so if it's ((1,2,3),(4,5,6),....) how can i print 1 from the first list?</span>
<span class="comment-copy">Let's call the list <code>l</code>.  For example <code>l = [[1,2,3],[4,5,6]]</code> <code>l[0]</code> is <code>[1,2,3]</code>  and <code>[1,2,3][0]</code> is <code>1</code>.  Python has no problem with you chaining them together, so <code>l[0][0]</code> is <code>1</code></span>
<span class="comment-copy">that's a great idea. how do i access them? just my_dict[0]for the first 10 values?</span>
<span class="comment-copy">@Shaun Yes, that's right, but you will need to cast the accessor to a string: e.g. my_dict[str(0)] will return the first array.</span>
<span class="comment-copy">great answer thank you! Your way works as well as Patrick Haugh's :)</span>
