<div class="post-text" itemprop="text">
<p>I'm trying to pass some secrets to shell commands using environment variables. The Popen seems using "single quote concept" to escape the arguments so the commands cannot get the variable value. </p>
<pre><code>Python 2.7.1 (r271:86832, Mar  3 2017, 10:25:58) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-4)] on linux3
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; subprocess.Popen(['echo','$PATH'])
$PATH
</code></pre>
<p>Expected output is the real $PATH values like "/bin:/sbin:/usr/bin..."</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>You need a shell to evaluate your line:</p>
<pre><code>subprocess.Popen('echo $PATH', shell=True)
</code></pre>
<p>But if this is all you want then consider this:</p>
<pre><code>print os.getenv('PATH')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>shell=True</code>, but be careful <a href="https://docs.python.org/3/library/subprocess.html#security-considerations" rel="nofollow noreferrer">https://docs.python.org/3/library/subprocess.html#security-considerations</a></p>
<pre><code>subprocess.Popen('echo $PATH', shell=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using shell is dangerous if the command line is filed from external sources, so use it with caution.</p>
<p>Also, there is an optional parameter to decide where the shell should be when launching the command.</p>
<pre><code>command = 'echo $PATH'
p = subprocess.Popen(command, shell=True, cwd='./')
p.communicate() # it would wait until the subprocess is complete. 
</code></pre>
</div>
