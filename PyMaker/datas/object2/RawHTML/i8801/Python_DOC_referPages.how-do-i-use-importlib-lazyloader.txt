<div class="post-text" itemprop="text">
<p>In my module, I have a couple of functions that depend on an external module with a long startup time.  How do I use <a href="https://docs.python.org/3/library/importlib.html#importlib.util.LazyLoader" rel="nofollow noreferrer"><code>LazyLoader</code></a>?  If I have</p>
<pre><code>import veggies
</code></pre>
<p>or</p>
<pre><code>import veggies.brussels.sprouts
</code></pre>
<p>or</p>
<pre><code>from veggies.brussels import sprouts
</code></pre>
<p>how would I replace those statements to use <code>LazyLoader</code> such that the execution of the contents of the module are postponed until needed?</p>
<p>It is not immediately obvious from the documentation how to use it.  There is no example, and <a href="http://nullege.com/codes/search/importlib.util.LazyLoader" rel="nofollow noreferrer">nullege code search</a> only comes up with the unit test included with Python itself.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://bugs.python.org/issue17621" rel="nofollow noreferrer">original issue</a> has some code that seems to to a full import lazily:</p>
<p>The following files imports two modules lazily:</p>
<pre><code>import sys
import importlib.util

def lazy(fullname):
  try:
    return sys.modules[fullname]
  except KeyError:
    spec = importlib.util.find_spec(fullname)
    module = importlib.util.module_from_spec(spec)
    loader = importlib.util.LazyLoader(spec.loader)
    # Make module with proper locking and get it inserted into sys.modules.
    loader.exec_module(module)
    return module

os = lazy("os")
myown = lazy("myown")

print(os.name)
myown.test()
</code></pre>
<p>To test, I used the following in <code>myown.py</code>.</p>
<pre><code>print("Executed myown.")
def test():
  print("OK")
</code></pre>
<p>That worked nicely (Python 3.8a0).</p>
</div>
<span class="comment-copy">Can you show an example of how to actually use <code>LadyLoader</code>?</span>
<span class="comment-copy">The answer now contains a 100% complete working example.</span>
<span class="comment-copy">Right.  But, how did you use Python 3.8a1?  That one is not due to be released until 2019-01-27, current git master would be 3.8a0?</span>
<span class="comment-copy">I thought a1 was the first one.</span>
<span class="comment-copy">I would suggest using loader = importlib.util.LazyLoader.factory(spec.loader) which also checks for the exec_module attribute.</span>
