<div class="post-text" itemprop="text">
<p>I am creating a rock paper scissors lizard spock game in Python for my class and i am trying to figure out why whatever choice I make I am always winning even though I set up all my if statements correct. `</p>
<pre><code>import random

def instructions():
    play = input("Would you like to play Rock, Paper, Scissors, Lizard, Spock(y/n): ").lower()
    if play == "y":
        print("1.Rock")
        print("2.Paper")
        print("3.Scissors")
        print("4.Lizard")
        print("5.Spock")

    elif play != "n":
        print("error has accured please type y for yes or n for no:")
        instructions()




def getPlayerChoice():
    choice = int(input("What is your choice user?: "))
    if choice &gt; 5:
        print("Invalid number please try again....")
        getPlayerChoice()
    elif choice &lt; 1:
        print("Invalid number please try again....")
        getPlayerChoice()
    elif choice == 1:
        print("You picked Rock")
    elif choice == 2:
        print("You picked Paper")
    elif choice == 3:
        print("You picked Scissors")
    elif choice == 4:
        print("You picked Lizard")
    elif choice == 5:
        print("You picked Spock")
    return choice

def getCPUChoice():
    choice = random.randint(1,5)
    if choice == 1:
        print("CPU picked Rock")
    elif choice == 2:
        print("CPU picked Paper")
    elif choice == 3:
        print("CPU picked Scissors")
    elif choice == 4:
        print("CPU picked Lizard")
    elif choice == 5:
        print("CPU picked Spock")
    return choice

def winner(playerChoice, CPUChoice, playerWins, CPUWins, ties):
    if playerChoice == 1 and CPUChoice == 3 or CPUChoice == 4:
        print("Player wins.")
        playerWins = playerWins.append(1) 
    elif playerChoice == 2 and CPUChoice == 1 or CPUChoice == 5:
        print("Player wins.")
        playerWins = playerWins.append(1) 
    elif playerChoice == 3 and CPUChoice == 2 or CPUChoice == 4:
        print("Player wins.")
        playerWins = playerWins.append(1) 
    elif playerChoice == 4 and CPUChoice == 2 or CPUChoice == 5:
        print("Player wins.")
        playerWins = playerWins.append(1)
    elif playerChoice == 5 and CPUChoice == 1 or CPUChoice == 3:
        print("Player wins.")
        playerWins = playerWins.append(1)
    elif playerChoice == CPUChoice:
        print("Tie")
        ties = ties.append(1)
    else:
        print("CPU won")
        CPUWins = CPUWins.append(1) 
    return

def gameTotal(playerWins, CPUWins, ties):
    playerWins = sum(playerWins)
    CPUWins = sum(CPUWins)
    ties = sum(ties)
    print("Player final score: ", playerWins)
    print("CPU final Score: ", CPUWins)
    print("Total ties: ",ties)

def main():
    playerChoice = 0
    playerWins = []
    CPUChoice = 0
    CPUWins = []
    ties = []
    finalPlayerWins = 0
    finalCPUWins = 0
    finalTies = 0
    Continue = 'y'
    instructions()
    while Continue == 'y':
        playerChoice = getPlayerChoice()
        CPUChoice = getCPUChoice()
        winner(playerChoice,CPUChoice,playerWins, CPUWins, ties)
        Continue = input("Would you like to play again (y/n):").lower()
        if Continue == 'n':
            print("Printing final scores.")
            break
    gameTotal(playerWins, CPUWins, ties)


main()
</code></pre>
<p>`</p>
</div>
<div class="post-text" itemprop="text">
<p>To summarize all of the things you should pay attention to:</p>
<ol>
<li><p><strong>boolean conditions</strong> - the result changes with the parentheses that are inside the condition. </p>
<p><code>if True or (True and False)</code> --&gt; this basically calculates the <code>True and False</code> part first (like in regular math) and then you have <code>True or False</code> which evaluates to True. </p>
<p><code>if True or True and False</code> --&gt; this basically calculates the <code>True or True</code> part first (like in regular math) and then you have <code>True and False</code> which evaluates to False - <strong>because you don't use parentheses.</strong> </p></li>
<li><p><strong>Do not call a function within the same function</strong> - this is called <code>recursion</code>, and it's not for the what you need. Use a <code>while</code> loop, that runs as long as <strong>i.e.</strong> -  you didn't get a proper choice input (<code>while choice!='n' and choice!='y':</code>).</p></li>
<li><p><strong>Your instrcuions choice</strong> - the choice made by the user doesn't really change the flow of the game. the game starts also if the user entered <code>no</code>. You should Add an exit statement in the <code>instructions</code> function.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>The reason is you are missing parentheses on all of the "if" conditions.</p>
<pre><code>if False and True or True # =True
if False and (True or False) # =False 
</code></pre>
</div>
<span class="comment-copy">You may need parentheses to clarify the order of operations: <code>if playerChoice == 1 and (CPUChoice == 3 or CPUChoice == 4):</code></span>
<span class="comment-copy">What Max said. From a quick glance, it looks like the player will always win if the CPU picks 3, 4, or 5. The CPU should stand a chance if he picks 1 or 2.</span>
<span class="comment-copy">Don't have a function call itself to start it over, as you are doing in <code>instructions()</code> and <code>getPlayerChoice()</code>.  That's called recursion and isn't what you want here.  Instead, use a while loop until you get the response you want.</span>
<span class="comment-copy">The recursion in <code>getPlayerChoice()</code> looks flawed -- you try again, but end up returning the invalid value. IMHO solving this particular problem with recursion is not a good choice. A simple loop would work fine.</span>
<span class="comment-copy"><i>"if True or True and False --&gt; this basically calculates the True or True part first"</i>  That's incorrect. <code>and</code> has a higher <a href="https://docs.python.org/3/reference/expressions.html" rel="nofollow noreferrer">operator precedence</a> than <code>or</code>, so <code>True and False</code> is evaluated first and the final result is <code>True</code>.</span>
<span class="comment-copy">Thank you so much!!! I'm new to programming and kinda get messed up thanks for the advice!!</span>
