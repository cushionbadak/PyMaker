<div class="post-text" itemprop="text">
<p>There is no way to return <code>False</code> from issubclass when class is derived from class with <code>__subclashook__</code> implementation. I modified code from:
<a href="https://stackoverflow.com/questions/40764347/python-subclasscheck-subclasshook">python subclasscheck &amp; subclasshook</a>
I only added '(Sized)' to both class definitions:</p>
<pre><code>from abc import ABCMeta

class Sized(metaclass=ABCMeta):
    @classmethod
    def __subclasshook__(cls, C):
        if cls is Sized:
            if any("__len__" in B.__dict__ for B in C.__mro__):
                return True
        return NotImplemented

class A(Sized):
    pass

class B(Sized):
    def __len__(self):
        return 0

print(issubclass(A, Sized))  # True - should be False
print(issubclass(B, Sized))  # True
</code></pre>
<p>Is there any way to return <code>False</code> in this case? Or maybe I'm doing something wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that you <code>return NotImplemented</code> when the <code>__subclasshook__</code> doesn't exit early. And as stated in the <a href="https://docs.python.org/3/library/abc.html#abc.ABCMeta.__subclasshook__" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p>If it returns NotImplemented, the subclass check is continued with the usual mechanism.</p>
</blockquote>
<p>So it uses the normal subclass check and finds that you do, in fact, inherit from <code>Sized</code> so returns <code>True</code>.</p>
<p>There are two solutions:</p>
<ol>
<li><p><code>return False</code> instead of <code>return NotImplemented</code>. However, do you really want/need <code>issubclass</code> to return <code>False</code> for <strong>direct subclasses</strong>?</p></li>
<li><p>If you inherit from <code>object</code> for classes <code>A</code> and <code>B</code> it works as expected:</p>
<pre><code>class A(object):
    pass

class B(object):
    def __len__(self):
        return 0

print(issubclass(A, Sized))  # False
print(issubclass(B, Sized))  # True
</code></pre></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>I think the good way to implement this:</p>
<pre><code>from abc import ABCMeta

class Sized(metaclass=ABCMeta):
    @classmethod
    def __subclasshook__(cls, C):
        if cls is Sized:
            if any("__len__" in B.__dict__ for B in C.__mro__):
                return True
            else:
                return False
        return NotImplemented


class A(Sized):
    pass


class B(Sized):
    def __len__(self):
        return 0


print(issubclass(A, Sized))  # False
print(issubclass(B, Sized))  # True
</code></pre>
<p>I think that when we assume that <code>abc</code> is mechanism similar to compilation (or reflection) in other languages we should return False. If there is some doubt the class is correct subbclass then code shouldn't run or even compile (not in python). </p>
</div>
<span class="comment-copy">And of course i found code fragment (in abc) which starts with: <code>ok = cls.__subclasshook__(subclass)</code></span>
<span class="comment-copy">Excuse me if I'm missing something, but can you not just replace <code>return NotImplemented</code> with <code>return False</code>? Is there something in PEP8 your trying to adhere to?</span>
<span class="comment-copy">@leaf: Thank you, it was too obvious. But why all examples returns only <code>True</code> or <code>NotImplemented</code>.</span>
<span class="comment-copy">I believe that is because what the [Python]() standard calls for when implemented "magic methods".</span>
<span class="comment-copy">Ad 1. Yes, when assume that is mechanism similar to compilation (or reflection) in other languages. If there is some doubt the class is correct subbclass then code shouldn't run or even compile (not in python). Ad 2. I understand it, it is code from link.</span>
<span class="comment-copy">Please don't just dump code, explain why this solves the question. Otherwise you might also want to consider to <a href="http://stackoverflow.com/help/accepted-answer">accept</a> my answer which also contains the relevant informations + explanations.</span>
