<div class="post-text" itemprop="text">
<p>I've a list that can have mixed str and unicode strings:</p>
<pre><code>lst = ['string1', u'string2', 'string3', u'string4']
</code></pre>
<p>I need to convert every list item in unicode if the item is a str. To convert a str to unicode I use:</p>
<pre><code>s = s.decode('utf-8')
</code></pre>
<p>The problem is that if the string is already unicode and contains a non-ascii character, if I try to decode it I get UnicodeEncodeError: 'ascii' codec can't encode character ...</p>
<p>so I thought something like:</p>
<pre><code>lst = [i.decode('utf-8') for i in lst if isinstance(i, str)]
</code></pre>
<p>But this actually deletes from the list the unicode strings.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are filtering (removing non-matching elements); you need to use a <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow noreferrer">conditional expression</a> instead:</p>
<pre><code>lst = [i.decode('utf-8') if isinstance(i, str) else i for i in lst]
</code></pre>
<p>The <code>&lt;true&gt; if &lt;condition&gt; else &lt;false&gt;</code> expression here produces an output, always. Here that is the decoded string, or the original object unchanged if it is not a <code>str</code> object.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>lst = [i.decode('utf-8') if isinstance(i, str) else i for i in lst ]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While you could use a ternary expression in your list comprehension to correctly convert elements, in my opinion it would be cleaner to extract the logic to a separate helper function:</p>
<pre><code>def convert_to_unicode(s):
    """
    convert `s` to unicode. If `s` is already
    unicode, return `s` as is.
    """
    if isinstance(s, str):
        return s.decode('utf-8')
    else:
        return s
</code></pre>
<p>Then you can simply call the function on each element of your list:</p>
<pre><code>lst = [convert_to_unicode(i) for i in lst]
</code></pre>
</div>
<span class="comment-copy">You could just add an <code>else</code> to copy over the unicode strings.</span>
<span class="comment-copy">You probably should drop that business and move to Python 3.x which has built-in support for Unicode, and there is no <code>unicode</code> type as all strings are in Unicode by default.</span>
<span class="comment-copy">Do you actually need to decode UTF-8, or are your <code>str</code> strings really only ASCII?</span>
