<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/6159900/correct-way-to-write-line-to-file">Correct way to write line to file?</a>
<span class="question-originals-answer-count">
                    10 answers
                </span>
</li>
</ul>
</div>
<p>I have a script written in python which I am running on ubuntu. I would like the output of this command to be directed into the file. </p>
<p><code>print str(kFx) + ',' + str(kFy) + ',' + str(kFz)</code> </p>
<p>I would ideally use the python.py &gt; file.txt but the script has some interactive parts which I won't be able to use if I redirect the output to a file. </p>
<p>I tried changing the code to this but I get syntax errors. I literally use python for the first time so excuse my lack of knowledge. </p>
<pre><code>print (str(kFx) + ',' + str(kFy) + ',' + str(kFz) , file=open("output.txt", "a"))
</code></pre>
<p>Any ideas on how to do that? </p>
<p>Thank you,
Alex</p>
</div>
<div class="post-text" itemprop="text">
<p>you can open the file with <code>file=open("output.txt", "a"))</code> like you did. then instead of printing you would use </p>
<pre><code>file.write(str(kFx) + ',' + str(kFy) + ',' + str(kFz))
</code></pre>
<p>becasue you opened the file in append mode (denoted by the "a" in open) it would add this string to the end of the file. you might also need to add a new line after your string:</p>
<pre><code>file.write("\n")
</code></pre>
<p>when you are done writing:</p>
<pre><code>file.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>On Python 3, it could look like:</p>
<pre><code>with open("output.txt", "a") as file:  # append to the file
    print(*kF, sep=', ', file=file)
    # etc...
</code></pre>
<p>I've added space after the comma for readability. See <a href="https://stackoverflow.com/q/36901/4279">What does ** (double star) and * (star) do for parameters?</a></p>
<p>On Python 2, you could add <code>from __future__ import print_function</code> at the top of your script and convert to string manually <code>", ".join(map(str, kF))</code> or just:</p>
<pre><code>print(kFx, kFy, kFz, sep=', ', file=file)
</code></pre>
<p>You could use <code>kF</code> object instead of <code>kFx</code>, <code>kFy</code>, <code>kFz</code> e.g., a tuple/list:</p>
<pre><code>kF = "kFx value", "kFy value", "kFz value"
</code></pre>
<p>or for readability, you could <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer">use <code>collections.namedtuple</code></a> to create a custom class:</p>
<pre><code>from collections import namedtuple

Point3D = namedtuple("Point3D", "x y z") 

kF = Point3D("kFx value", "kFy value", "kFz value")
# -&gt; Point3D(x='kFx value', y='kFy value', z='kFz value')
</code></pre>
<p>It enables <code>kF.x</code>, <code>kF.y</code>, <code>kF.z</code> syntax. If you need a mutable object, you could <a href="https://docs.python.org/3/library/types.html#types.SimpleNamespace" rel="nofollow noreferrer">use <code>types.SimpleNamespace</code></a>:</p>
<pre><code>from types import SimpleNamespace

kF = SimpleNamespace(x="kFx value", y="kFy value", z="kFz value")
kF.x += " modified"
# -&gt; namespace(x='kFx value modified', y='kFy value', z='kFz value')
</code></pre>
<p>On Python 2, you could partially emulate it using <code>class Point3D: pass</code>.</p>
<p>For a richer functionality, you could <a href="https://pypi.python.org/pypi/attrs" rel="nofollow noreferrer">try <code>attrs</code> package</a>:</p>
<pre><code>#!/usr/bin/fades
import attr  # fades.pypi attrs

Point3D = attr.make_class("Point3D", ["x", "y", "z"])

kF = Point3D("kFx value", "kFy value", "kFz value")
kF.x += " modified"
# -&gt; Point3D(x='kFx value modified', y='kFy value', z='kFz value')
</code></pre>
<p>To run this and other code examples that require third-party Python packages from PyPI, you could <a href="https://fades.readthedocs.io/" rel="nofollow noreferrer">use <code>fades</code> for convenience</a> (to install, run: <code>sudo apt-get install fades</code>). Though it is not necessary, you could just install dependencies manually instead: <code>pip install attrs</code> (make sure to run your script with the same <code>python</code> executable as <code>pip</code>: <code>head -1 $(command -v pip)</code>).</p>
<p>To print <code>kF</code> to the file:</p>
<pre><code>print(*attr.astuple(kF), sep=', ', file=file)
# -&gt; kFx value modified, kFy value, kFz value
</code></pre>
<p>To save it in JSON format:</p>
<pre><code>import json

with open("kF.json", "w", encoding='utf-8') as json_file:  # overwrite the file
    json.dump(attr.asdict(kF), json_file)
    # -&gt; {"x": "kFx value modified", "y": "kFy value", "z": "kFz value"}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you use with-keyword; the file-stream will only stay open inside the block. Then you dont have to remember closing it when you are done.</p>
<pre><code>with open('test.output', 'w') as f:
    f.write('{0},{1},{2}\n'.format(kFx, kFy, kFz))
</code></pre>
<p>If you meant to append to file like echo "test" &gt;&gt; test.txt and not echo "test" &gt; test.txt
Then just change the open mode to 'a' instead of 'w'</p>
</div>
<span class="comment-copy">You are probably using Python 2. Either change the print to <a href="https://docs.python.org/2/reference/simple_stmts.html#the-print-statement" rel="nofollow noreferrer"><code>print &gt;&gt; open("output.txt", "a"), str(kFx) + ',' + str(kFy) + ',' + str(kFz)</code></a> or put a <a href="https://www.python.org/dev/peps/pep-3105/" rel="nofollow noreferrer"><code>from __future__ import print_function</code></a> at the top of your code file if you want to use the <code>print()</code> function (instead of the statement).</span>
<span class="comment-copy">To close the file even if an exception happens, you could use <code>with</code>-statement. Also, you could call print() function, to format the input, without calling <code>str()</code> and concatinating the strings manually.</span>
<span class="comment-copy">Followed your instruction worked perfectly . Thank you :)</span>
<span class="comment-copy"><code>'\n'</code> is missing. You don't need to call <code>str()</code> manually, <code>format()</code> does it for you. You may omit digits in the format: <code>'{},{},{}\n'.format(kFx, kFy, kFz)</code>.</span>
<span class="comment-copy">Good eye thanks for correcting me because I didn't know what 'a' option was in python. Thank you :)</span>
