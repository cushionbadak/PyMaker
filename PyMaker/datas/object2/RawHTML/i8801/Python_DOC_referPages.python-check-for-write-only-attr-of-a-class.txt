<div class="post-text" itemprop="text">
<p>I'm using a Class provided by a client (I have no access to the object code), and I'm trying to check if a object has a attribute. The attribute itself is write only, so the <code>hasattr</code> fails:</p>
<pre><code>&gt;&gt;&gt; driver.console.con.input = 'm'
&gt;&gt;&gt; hasattr(driver.console.con, 'input')
False
&gt;&gt;&gt; simics&gt; @driver.console.con.input
Traceback (most recent call last):
File "&lt;string&gt;", line 1, in &lt;module&gt;
Attribute: Failed converting 'input' attribute in object   
'driver.console.con' to Python: input attribute in driver.console.con 
object: not readable.
</code></pre>
<p>Is there a different way to check if an attribute exists?</p>
</div>
<div class="post-text" itemprop="text">
<p>You appear to have some kind of native code proxy that bridges Python to an extension, and it is rather breaking normal Python conventions</p>
<p>There are two possibilities:</p>
<ol>
<li><p>The <code>driver.console.con</code> object has a namespace that implements attributes as <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">descriptors</a>, and the <code>input</code> descriptor only has a <a href="https://docs.python.org/3/reference/datamodel.html#object.__set__" rel="nofollow noreferrer"><code>__set__</code> method</a> (and possibly a <a href="https://docs.python.org/3/reference/datamodel.html#object.__delete__" rel="nofollow noreferrer"><code>__delete__</code> method</a>). In that case, look for the descriptor:</p>
<pre><code>if 'input' in vars(type(driver.console.con)):
    # there is an `input` name in the namespace
    attr = vars(type(driver.console.con))['input']
    if hasattr(attr, '__set__'):
        # can be set
        ...
</code></pre>
<p>Here the <a href="https://docs.python.org/3/library/functions.html#vars" rel="nofollow noreferrer"><code>vars()</code> function</a> retrieves the namespace for the <em>class</em> used for <code>driver.console.con</code>.</p></li>
<li><p>The proxy uses <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattr__" rel="nofollow noreferrer"><code>__getattr__</code></a> (or even <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattribute__" rel="nofollow noreferrer"><code>__getattribute__</code></a>) and <a href="https://docs.python.org/3/reference/datamodel.html#object.__setattr__" rel="nofollow noreferrer"><code>__setattr__</code> hooks</a> to handle arbitrary attributes. You are out of luck here, you can't detect what attributes either method will support outside of <code>hasattr()</code> and trying to set the attribute directly. Use <code>try...except</code> guarding:</p>
<pre><code>try:
    driver.console.con.input = 'something'
except Attribute:   # exactly what exception object does this throw?
    # can't be set, not a writable attribute
    pass
</code></pre>
<p>You may have to use a debugger or <code>print()</code> statement to figure out exactly what exception is being thrown (use a <code>try...except Exception as ex:</code> block to capture all exceptions then inspect <code>ex</code>); in the traceback in your question the exception message at the end looks decidedly non-standard. That project really should raise an <code>AttributeError</code> at that point.</p></li>
</ol>
<p>Given the rather custom exception being thrown, my money is on option 2 (but option 1 is still a possibility if the <code>__get__</code> method on the descriptor throws the exception).</p>
</div>
<span class="comment-copy">thinking of EAFP, could you wrap it in a <code>try</code> block and except <code>AttributeError</code> if it doesn't exist?</span>
<span class="comment-copy">Does it say "not readable" if you try accessing an attribute that you haven't created? If it does, you could just check if the message of the exception object contains <code>not readable</code>.</span>
<span class="comment-copy">@RichSmith That's currently the way I was thinking of attacking the problem. I'm also wondering what's behind this.</span>
<span class="comment-copy">@Blender The object is full created at this point. I can write to it but not read.</span>
<span class="comment-copy">@ArikRinberg: you can't read from the object, but does the error message differ when accessing an attribute you've previously written and when accessing an attribute that you have not?</span>
<span class="comment-copy">Thanks! I was thinking of the try...except  approach but your answer supplied some additional details from under the hood. Thank you for the detailed answer!</span>
