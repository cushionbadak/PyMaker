<div class="post-text" itemprop="text">
<p>Given the directory structure:</p>
<pre><code>/home/user/python/mypacakge/src/foo.py
/home/user/python/mypacakge/tests
/home/user/python/mypacakge/tests/fixtures
/home/user/python/mypacakge/tests/fixtures/config.json.sample
/home/user/python/mypacakge/tests/foo_tests.py
/home/user/python/mypacakge/README.md
</code></pre>
<p>Where src contains the source code, and test contains the unit tests, how do I setup a "package" so that my relative imports that are used in the unit tests located in <code>test/</code> can load classes in <code>src/</code>?</p>
<p>Similar questions: <a href="https://stackoverflow.com/questions/27239643/python-relative-imports-and-packages">Python Relative Imports and Packages</a> and <a href="https://stackoverflow.com/questions/26859257/python-relative-imports-without-packages-or-modules">Python: relative imports without packages or modules</a>, but the first doesn't really answer my question (or I don't understand it) and the second relies on symlinks to hack it together (respectively).</p>
</div>
<div class="post-text" itemprop="text">
<p>I figured it out.</p>
<p>You have to have <code>__init__.py</code> in <em>each</em> of the folders like so:</p>
<pre><code>/home/user/python/mypackage/src/__init__.py
/home/user/python/mypackage/src/Foo.py
/home/user/python/mypackage/tests
/home/user/python/mypackage/tests/fixtures
/home/user/python/mypackage/tests/fixtures/config.json.sample
/home/user/python/mypackage/tests/foo_test.py
/home/user/python/mypackage/tests/__init__.py
/home/user/python/mypackage/README.md
/home/user/python/mypackage/__init__.py
</code></pre>
<p>This tells python that we have "<a href="https://docs.python.org/2/tutorial/modules.html#packages" rel="nofollow noreferrer">a package</a>" in each of the directories including the top level directory. So, at this point, I have the following packages:</p>
<pre><code>mypackage
mypackage.test
mypackage.src
</code></pre>
<p>So, because python will only go "down into" directories, we have to execute the unit tests from the root of the top-most package, which in this case is:</p>
<pre><code>/home/user/python/mypackage/
</code></pre>
<p>So, from here, I can execute python and tell it to execute the unittest module and then <em>specify</em> which tests I want it to perform by specifying the module using the <a href="https://docs.python.org/3/library/unittest.html#command-line-interface" rel="nofollow noreferrer">command line options</a></p>
<pre><code>python -m unittest tests.foo_test.TestFoo
</code></pre>
<p>This tells python:</p>
<ol>
<li>Execute python and load the module unittest</li>
<li>Tell unit test to run the tests contained in the class TestFoo, which is in the file foo_test.py, which is in the test directory.</li>
</ol>
<p>Python is able to find it because <code>__init__.py</code> in each of these directories promotes them to a package that python and unittest can work with.</p>
<p>Lastly, <code>foo_test.py</code> <em>must</em> contain an import statement like: </p>
<pre><code>from src import Foo
</code></pre>
<p>Because we are executing from the top level directory, AND we have packages setup for each of the subdirectories, the src package is available in the namespace, and can be loaded by a test.</p>
</div>
<span class="comment-copy">You mean simply import a file like this: <code>from .. import src.module</code> ? Any class in module is then loaded..</span>
<span class="comment-copy">Can also do <code>from ..src import module.class</code> btw</span>
<span class="comment-copy">a) it appears to not be a best practice to use relative imports, b) I get this: ValueError: Attempted relative import beyond toplevel package</span>
<span class="comment-copy">If you set a structure where you try to import from <code>repo_root/test</code> something in <code>repo_root/src</code>, <code>from .. import</code> will work. If you got a warning about a top level package that probably means that's not the structure of your repo. Regardless of that, Python imports packages that are part of the main package stated in setup.py. If you don't install the package, it's not available. I don't see how relative imports in tests are bad practice. Moreover, I don't even know of another way to do that that isn't ugly.</span>
