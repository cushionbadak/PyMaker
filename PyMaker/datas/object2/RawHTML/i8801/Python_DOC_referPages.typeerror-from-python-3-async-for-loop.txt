<div class="post-text" itemprop="text">
<p>I'm learning about Python's relatively new async features. I found this in <a href="https://www.python.org/dev/peps/pep-0492/#example-2" rel="nofollow noreferrer">PEP 492</a>:</p>
<blockquote>
<p>The following is a utility class that transforms a regular iterable to
  an asynchronous one. While this is not a very useful thing to do, the
  code illustrates the relationship between regular and asynchronous
  iterators.</p>
<pre><code>class AsyncIteratorWrapper:
    def __init__(self, obj):
        self._it = iter(obj)

    def __aiter__(self):
        return self

    async def __anext__(self):
        try:
            value = next(self._it)
        except StopIteration:
            raise StopAsyncIteration
        return value

async for letter in AsyncIteratorWrapper("abc"):
    print(letter)
</code></pre>
</blockquote>
<p>I attempted to run this code, by adding the given <code>async for</code> loop to a function, and then calling that using an event loop.</p>
<p>Full example code (run in the interpreter):</p>
<pre><code>class AsyncIteratorWrapper:
    def __init__(self, obj):
        self._it = iter(obj)
    def __aiter__(self):
        return self
    async def __anext__(self):
        try:
            value = next(self._it)
        except StopIteration:
            raise StopAsyncIteration
        return value

async def aprint(str):
  async for letter in AsyncIteratorWrapper(str):
    print(letter)

import asyncio
loop = asyncio.get_event_loop()
co = aprint("abcde")
loop.run_until_complete(co)
</code></pre>
<p>However, I'm getting an error:</p>
<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/opt/rh/rh-python35/root/usr/lib64/python3.5/asyncio/base_events.py", line 337, in run_until_complete
    return future.result()
  File "/opt/rh/rh-python35/root/usr/lib64/python3.5/asyncio/futures.py", line 274, in result
    raise self._exception
  File "/opt/rh/rh-python35/root/usr/lib64/python3.5/asyncio/tasks.py", line 239, in _step
    result = coro.send(None)
  File "&lt;stdin&gt;", line 2, in aprint
TypeError: 'async for' received an invalid object from __aiter__: AsyncIteratorWrapper
</code></pre>
<p>What am I doing wrong? How can this example be fixed? I'm a little surprised that code right out of the PEP is failing.</p>
<p>I'm using python version 3.5.1.</p>
</div>
<div class="post-text" itemprop="text">
<p>The code you are using works with python 3.5.2+.</p>
<p>From Python 3.5.2 <code>__aiter__</code>  can directly return asynchronous iterators. <a href="https://docs.python.org/3/whatsnew/3.5.html#pep-492-coroutines-with-async-and-await-syntax" rel="nofollow noreferrer">More here</a></p>
<p>The error you were receiving was because of the older python(3.5.1) and it was therefore returning the wrong type.</p>
</div>
<span class="comment-copy">It is working on <code>python3.6</code></span>
<span class="comment-copy">Working on 3.5 too - Taking a look at the change log I found "Changed in version 3.5.2: Starting with CPython 3.5.2, <b>aiter</b> can directly return asynchronous iterators. "</span>
<span class="comment-copy">for a few versions in 3.5 <code>__aiter__</code> was suppose to be async but then the symantics changed to directly return the async iterable, so just update to a more recent version of python and you should be fine.</span>
<span class="comment-copy">@Orange would you mind linking to that so I don't have to go through the trouble of finding it?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/whatsnew/3.5.html#pep-492-coroutines-with-async-and-await-syntax" rel="nofollow noreferrer">docs.python.org/3/whatsnew/â€¦</a></span>
