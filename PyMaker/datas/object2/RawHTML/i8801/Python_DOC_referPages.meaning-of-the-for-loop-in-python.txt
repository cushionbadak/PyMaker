<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/7619868/python-list-comprehension-simple">Python list comprehension - simple</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<pre><code>expanded_nodes = [node for node in expanded_nodes if node.state != None]
</code></pre>
<p>I know that it is list comprehension but how does this statement work, I am unable to understand the functioning of for loop in aforementioned python statement. Please help me to get the answer. 
Thanks in advance !!</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>expanded_nodes = [node for node in expanded_nodes if node.state != None]
</code></pre>
<p>here all the values of list expanded_nodes is checked one by one and after checking all the elements only those values  where "node.state != None" will be remaining in the list</p>
</div>
<div class="post-text" itemprop="text">
<p>That expression is called a <em>list comprehension</em>. To understand why it's useful, let's take a look at what the same code might look like without the comprehension. Functionally, this should be equivalent to the comprehension above:</p>
<pre class="lang-python prettyprint-override"><code># For clarity, let's assign the output to a differently named variable.
filtered_nodes = []
for node in expanded_nodes:
    if node.state != None:
        filtered_nodes.append(node)
</code></pre>
<p>That kind of filtering operation is pretty common. It comes up all the time. In fact, it's so common that you've probably seen functions whose sole purpose it is to filter or otherwise transform one list into another. Let's see what that looks like:</p>
<pre class="lang-python prettyprint-override"><code>def filter_nodes(nodes):
    filtered_nodes = []
    for node in nodes:
        if node.state != None:
            filtered_nodes.append(node)
    return filtered_nodes

filtered_nodes = filtered_nodes(nodes)
</code></pre>
<p>Notice how many times we have to reference the intermediate variable, <code>filtered_nodes</code>. Wouldn't it be great if we could make that function a bit less redundant? With comprehensions, you can!</p>
<pre class="lang-python prettyprint-override"><code>def filter_nodes(nodes):
    return [node for node in nodes if node.state != None]

filtered_nodes = filtered_nodes(nodes)
</code></pre>
<p>As you get used to this terse formulation, you'll notice that the function wrapper might not feel as useful anymore. So let's lose it:</p>
<pre class="lang-python prettyprint-override"><code>filtered_nodes = [node for node in nodes if node.state != None]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you are seeing is a <strong>list display</strong>, where the values are specified as a <strong>comprehension.</strong> This is considered to be good, idiomatic Python.</p>
<p>See <a href="https://docs.python.org/3/reference/expressions.html?highlight=generator#displays-for-lists-sets-and-dictionaries" rel="nofollow noreferrer">the docs</a> for more on comprehensions, etc.</p>
</div>
<span class="comment-copy">if the node.state in expanded_nodes is not equal None then node is been added to expanded_nodes. You will have all the node's in expanded_nodes whole state is not null</span>
<span class="comment-copy">Try to learn official documentation <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">docs.python.org/2/tutorial/â€¦</a></span>
