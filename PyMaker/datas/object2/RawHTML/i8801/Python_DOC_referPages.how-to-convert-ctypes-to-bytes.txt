<div class="post-text" itemprop="text">
<p>I want to access ctype.Structure with I have defined, as a bytes in Python (<code>b''</code>). </p>
<p>I don't know it is a correct way? I need to send a header (it should be architecture free) to other device. </p>
<p>So I defined it for example as:</p>
<pre><code>    class Header(ctypes.Structure):
    _pack_ = 2
    _fields_ = [
        ('version', c_uint8),
        ('additional_options', c_uint8),
        ('soft_version', c_uint16),
        ('compilation_time', c_uint8 * 6),
        ('crc', c_uint16)
    ]
</code></pre>
<p>Now I need to calculate CRC. Start from filed at <code>version</code> to <code>compilation_time</code> I have a function that work with bytes. </p>
<p>So for me it would be OK just convert ctypes.Structure to bytes (b'') or access directly memory and change last two bytes.</p>
<p><em>I have tried use <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer">struct</a> but I didn't found <strong>pragma</strong> option.</em></p>
</div>
<div class="post-text" itemprop="text">
<p><code>struct</code> is what you want:</p>
<pre><code>&gt;&gt;&gt; import struct
&gt;&gt;&gt; fmt = struct.Struct('&lt;BBH6s')
&gt;&gt;&gt; data = fmt.pack(1,2,3,b'170207')
&gt;&gt;&gt; data
b'\x01\x02\x03\x00170207'
&gt;&gt;&gt; crc = &lt;do your calculation&gt;
&gt;&gt;&gt; data += struct.pack('&lt;H',crc)
</code></pre>
<p><code>&lt;</code> means pack little-endian and will not add padding bytes like C would, so no <code>_pack_</code> is necessary.  If you need big-endian, use <code>&gt;</code> instead.</p>
<p>I used <code>6s</code> and passed a byte string of the correct length for your time.  If you want to pass raw bytes instead use <code>6B</code> and list the 6 bytes instead of the one string.</p>
<p>Here's a ctypes solution.  I used crc32 because one was available in the library for demo purposes.</p>
<pre><code>from ctypes import *
from binascii import crc32

class Header(Structure):
    _pack_ = 2
    _fields_ = [
        ('version', c_uint8),
        ('additional_options', c_uint8),
        ('soft_version', c_uint16),
        ('compilation_time', c_uint8 * 6),
        ('crc', c_uint32)
    ]

h = Header(1,2,3)
h.compilation_time = (c_uint8 * 6)(*b'ABCDEF')
b = string_at(addressof(h),sizeof(h)-Header.crc.size)
print(b)
h.crc = crc32(b)
b = string_at(addressof(h),sizeof(h))
print(b)
</code></pre>
<p>Output:</p>
<pre><code>b'\x01\x02\x03\x00ABCDEF'
b'\x01\x02\x03\x00ABCDEF\xe7s\x85\xa6'
</code></pre>
</div>
<span class="comment-copy">BIG disadvantage of this solution is readability. My header is 128bytes long so it will be really messed and unreadable (compare to ctypes).   Second what with machines where <code>H</code> = <code>unsigned short</code> <b>!=</b> 16-bits?</span>
<span class="comment-copy">@S.R You mentioned "tried use struct but I didn't found <b>pragma</b> option".  Be more specific if you don't want struct used at all.  Anyway, updated to show a ctypes solution.</span>
<span class="comment-copy">@MarekTolonen in my opinion both option aren't as readable as rest of python codes. But I finally used native <code>struct</code>.</span>
