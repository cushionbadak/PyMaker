<div class="post-text" itemprop="text">
<p>I am trying to send a numpy array over stdout from one process to another.</p>
<p>Sending it over the pipe requires me to convert it to a string.
On the other side, I receive a byte object. This byte object now has the original byte string encapsulated.</p>
<p>I find it now impossible to restore the original byte object as a byte object.
If I decode the byte object, I receive a string which is incompatible with all the restoring functions I tried (np.frombuffer, pickle.loads).</p>
<p>server.py</p>
<pre><code>import subprocess
import numpy as np
p = subprocess.Popen(['python3', 'writer.py'], stdout=subprocess.PIPE)

while 1:
    tmp = p.stdout.readline()    
    # doesn't fail but wrong size
    array = np.frombuffer(tmp, dtype=np.uint8)
    tmp = bytes.decode(tmp)
    # fails because byte object is necessary
    array = np.frombuffer(tmp, dtype=np.uint8)
    array = array.reshape([1, 3, 5, 5, 1])
    print(array.shape)
</code></pre>
<p>writer.py</p>
<pre><code>import numpy as np
import sys
while 1:
    array = np.zeros([1, 3, 5, 5, 1], dtype=np.int8)
    string = array.tobytes()
    sys.stdout.write(str(string))
    sys.stdout.flush()
</code></pre>
<p>Is there anyway to convert the string into a byteobject, without encoding it? 
How else could this work?
I want to use pipes instead of shared memory as proposed in some other solutions to keep it more simple. Furthermore, I need it to be parallel but blocking, so Pipes seemed ideal to me.</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>you can use <code>pickle</code> to marshal the data, and <code>sys.stdout.buffer</code> instead of <code>sys.stdout</code> to write bytes to stdout.</p>
<p>Reference: <a href="https://docs.python.org/3/library/sys.html#sys.stdout" rel="nofollow noreferrer">sys.stdout</a></p>
<p>server.py:</p>
<pre><code>import subprocess
import numpy as np
import pickle
p = subprocess.Popen(['python3', 'writer.py'], stdout=subprocess.PIPE)

while 1:
  array = pickle.load(p.stdout)
  array = array.reshape([1, 3, 5, 5, 1])
  print(array.shape)
</code></pre>
<p>writer.py:</p>
<pre><code>import numpy as np
import pickle
import sys
while 1:
  array = np.zeros([1, 3, 5, 5, 1], dtype=np.int8)
  pickle.dump(array, sys.stdout.buffer)
</code></pre>
</div>
<span class="comment-copy">how about you first send the size of the object to come, then read that size from the buffer in the server?</span>
<span class="comment-copy">@DanielSanchez I don't quite understand, there's no buffer on the server side? There's stdout from which I can read out everything that was sent. But reading the whole string is not the problem. I want to restore the original object.</span>
<span class="comment-copy">@Kilsen have you tried in the writer <code>sys.stdout.write(string)</code> without converting to <code>str</code>?</span>
<span class="comment-copy">@kazemakase Yes, this isn't possible because <code>stdout.write</code> requires a string</span>
<span class="comment-copy">@Kilsen <code>sys.stdout.write(b'abc')</code> works for me. Why does it not work for you?</span>
