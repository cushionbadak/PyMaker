<div class="post-text" itemprop="text">
<p>Looking for an optimal solution .The structure I have is </p>
<pre><code>Source a = {
        "key1": [
            [
                0
            ],
            [
                1
            ]
        ],
        "key2": [
            [
                2
            ],
            [
                3
            ]
        ]
    }
    Target=[0][1][2][3]
</code></pre>
<p>Is there any better solution than the following?</p>
<pre><code>    a_values=a.values()
    flatValues=[]
    for i in range(0,len(a_values)):
        flatValues=flatValues+a_values[i]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain</code></a>:</p>
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; a = {"key1": [[0],[1]], "key2": [[2],[3]]}
&gt;&gt;&gt; target_generator = chain(*a.values())
&gt;&gt;&gt; target_list = [v for v in target_generator]
&gt;&gt;&gt; print(target_list)
[[0], [1], [2], [3]]
</code></pre>
<p><strong><em>N.B.</em></strong> <code>target_list</code> could possibly also look like this:</p></div>
<div class="post-text" itemprop="text">
<p>I'd say <code>[v for l in a.values() for sl in l for v in sl]</code> (or <code>[[v] for...</code>, if you really want a bunch of single-element lists for some reason) would be tidier. Note that it might not be sorted in the order you had in mind, so if that's important you may need to sort manually at some point (depending on your Python version and implementation).</p>
</div>
<span class="comment-copy">How is this more performant?Can you explain?</span>
<span class="comment-copy">TigerhawkT3's answer [v for l in a.values() for v in l ] is also good.  Your code may raise error in Python3.</span>
<span class="comment-copy">Thanks..i am sorting it later though on other variables..the order is not priority...what i want to understand is ..apart from tider is this more performant?</span>
