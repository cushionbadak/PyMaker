<div class="post-text" itemprop="text">
<p>i have the following example. </p>
<pre><code>prefix = ['blue ','brown ']
suffix = [('dog','shoes','bike'), ('tree','cat','car')]
</code></pre>
<p>i would like to obtain a new list that looks like this:</p>
<pre><code>[('blue dog', 'blue shoes', 'blue bike'),
 ('blue tree', 'blue cat', 'blue car'),
 ('brown dog', 'brown shoes', 'brown bike'),
 ('brown tree', 'brown cat', 'brown car')]
</code></pre>
<p>that is, i want to distribute and concatenate each element of the first list with each item in each tuple in the second list. the second list can have more than 2 tuples, but each tuple will always have exactly 3 items. </p>
<p>any way to do this without having to write nested for loops?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a nested list comprehension:</p>
<pre><code>lst = [tuple(i+x for x in j) for i in prefix for j in suffix]
print(lst)
# [('blue dog', 'blue shoes', 'blue bike'), 
# ('blue tree', 'blue cat', 'blue car'), 
# ('brown dog', 'brown shoes', 'brown bike'), 
# ('brown tree', 'brown cat', 'brown car')]
</code></pre>
<hr/>
<p>You can unwrap the comprehension into a for loop to understand better how it all works:</p>
<pre><code>lst = []
for i in prefix:
   for j in suffix:
      lst.append(tuple(i+x for x in j))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Can't see any way of getting four separate tupels without nesting (explicit or otherwise).</p>
<p><a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer">itertools.product</a> will combine the lists.</p>
<pre><code>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; for thing in suffix:
    print(list(map(''.join, product(prefix, thing))))


['blue dog', 'blue shoes', 'blue bike', 'brown dog', 'brown shoes', 'brown bike']
['blue tree', 'blue cat', 'blue car', 'brown tree', 'brown cat', 'brown car']
&gt;&gt;&gt;
</code></pre>
<hr/>
<p>This looks interesting:</p>
<pre><code>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(list(product(prefix, suffix)))
[('blue ', ('dog', 'shoes', 'bike')),
 ('blue ', ('tree', 'cat', 'car')),
 ('brown ', ('dog', 'shoes', 'bike')),
 ('brown ', ('tree', 'cat', 'car'))]
</code></pre>
<p>Then map a function to the product of prefix and suffix.</p>
<pre><code>&gt;&gt;&gt; def f(t):
    p, s = t
    t = product([p], s)
    return map(''.join, t)

&gt;&gt;&gt; z = product(prefix, suffix)
&gt;&gt;&gt; y = map(f, z)
&gt;&gt;&gt; 
&gt;&gt;&gt; pprint(list(map(tuple, y)))
[('blue dog', 'blue shoes', 'blue bike'),
 ('blue tree', 'blue cat', 'blue car'),
 ('brown dog', 'brown shoes', 'brown bike'),
 ('brown tree', 'brown cat', 'brown car')]
&gt;&gt;&gt; 
</code></pre>
<p>Or</p>
<pre><code>&gt;&gt;&gt; x = [tuple(thing) for thing in y]
</code></pre>
<hr/>
<p>Or without <code>map</code></p>
<pre><code>&gt;&gt;&gt; def f(t):
    p, s = t
    t = product([p], s)
    return tuple(''.join(thing) for thing in t)

&gt;&gt;&gt; z = product(prefix, suffix)
&gt;&gt;&gt; y = [f(thing) for thing in z]
&gt;&gt;&gt; pprint(y)
[('blue dog', 'blue shoes', 'blue bike'),
 ('blue tree', 'blue cat', 'blue car'),
 ('brown dog', 'brown shoes', 'brown bike'),
 ('brown tree', 'brown cat', 'brown car')]
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Using Numpy Broadcasting:</strong></p>
<p>Here's a fully vectorized implementation that does not use any loops. This function works for any size of a prefix/suffix input.</p>
<pre><code>import numpy as np

def foo(prefix, suffix):

    '''
    input:
        prefix - list
        suffix - list of tuples

    output:
        numpy array
    '''

    # Converting the inputs to numpy arrays
    prefix = np.asarray(prefix)
    suffix = np.asarray(suffix)

    # Number of prefixes; to be used later
    numOfPrefixes = prefix.shape[0]
    # size of a suffix tuple size; to be used later
    tupleSize = suffix.shape[0]


    # Repeating the each prefix element "size of a suffix tuple size" times
    prefix = np.repeat(prefix, tupleSize)
    # Adding a new axis so that broadcasting is possible
    prefix = prefix[:, np.newaxis]

    # Repeating the original list of tuples(suffix) "number of prefixes" times 
    suffix = np.tile(suffix, (numOfPrefixes,1))

    return np.core.char.add(prefix, suffix)
</code></pre>
<p>for the given inputs, this returns: </p>
<pre><code>array([['blue dog', 'blue shoes', 'blue bike'],
   ['blue tree', 'blue cat', 'blue car'],
   ['brown dog', 'brown shoes', 'brown bike'],
   ['brown tree', 'brown cat', 'brown car']], 
  dtype='|S11')
</code></pre>
<p>Up to this point no loops were used. Since you asked the final output to be a list of tuples, <code>map</code> can be used to convert the above array to a list of tuples which runs a loop under the hood.</p>
<pre><code>list(map(tuple,foo(prefix, suffix)))

[('blue dog', 'blue shoes', 'blue bike'),
 ('blue tree', 'blue cat', 'blue car'),
 ('brown dog', 'brown shoes', 'brown bike'),
 ('brown tree', 'brown cat', 'brown car')]
</code></pre>
</div>
<span class="comment-copy">this looks great - im trying to understand this intuitively and how to read it left to right or right to left. do you have the equivalent for loop construction?</span>
<span class="comment-copy">@laszlopanaflex Updated!</span>
<span class="comment-copy">thanks- this is where i struggle a bit to understand how python interprets these nested statements - other examples suggest left to right, which in this case i would have expected there to be an issue as "j" is not defined as yet.</span>
