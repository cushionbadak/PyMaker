<div class="post-text" itemprop="text">
<p>So, I have a data file which has 3 columns. What I am trying to do is create a function that takes in start and end line number as input. Something like:</p>
<pre><code>def(start line number, end line number):
    with open("data.txt", 'r') as f:
        for line in f:
            splitted_line = line.strip().split(",")
            date1 = datetime.strptime(splitted_line[0],'%Y%m%d:%H:%M:%S.%f')
            price = float(splitted_line[1])
            volume = int(splitted_line[2])
            my_tuple=(date1,price,volume)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def func(start,end):
    with open("data.txt", 'r') as f:
        for idx,line in enumerate(f):
          if idx == end:
            break 
          if idx &lt; start:
            continue

          splitted_line = line.strip().split(",")
          date1 = datetime.strptime(splitted_line[0],'%Y%m%d:%H:%M:%S.%f')
          price = float(splitted_line[1])
          volume = int(splitted_line[2])
          my_tuple=(date1,price,volume)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I'm reading this correctly, this function should only read the rows which are numbered in the range <code>[start_line, end_line]</code> (I'm assuming this is an inclusive range, i.e. you want to read both the start and end lines as well). Why not <a href="https://stackoverflow.com/a/522578/6157047">write your for loop with enumeration</a> and simply skip rows that are out of the passed range?</p>
<pre class="lang-py prettyprint-override"><code>def read_line_range_inclusive(start_line, end_line):
    filename = "data.txt"
    with open(filename) as f:
        for i, line in enumerate(f):
            if i &lt; start_line: # will read the start line itself
                continue # keep going...
            if i &gt; end_line: # will read the end line itself
                break # we're done

            # ... perform operations on lines ...
</code></pre>
<p>Also, be careful when splitting by commas; this works fine for simple rows like <code>1,2,3</code> but what about <code>1,2,"a,b,c",3</code>, where <code>"abc"</code> shouldn't be split into separate columns? I recommend using the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">built-in csv module</a>, which handles these edge cases automatically:</p>
<pre><code>import csv

def read_line_range_inclusive(start_line, end_line):
    filename = "data.txt"
    with open(filename) as f:
        for i, row in enumerate(csv.reader(f)):
            # row will already be separated into list
            # ... proceed as before ...
</code></pre>
<p>Note that you can only use the <code>with</code> statement on the file object itself, <a href="https://stackoverflow.com/a/441446/6157047">not on the csv.reader parsed file</a>, so this wouldn't work: <code>with csv.reader(open(filename)) as f:</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you use CSV reader, you can access the line number:</p>
<pre><code>csvreader.line_num
</code></pre>
<blockquote>
<p>The number of lines read from the source iterator. This is not the
  same as the number of records returned, as records can span multiple
  lines.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>We can combine the <code>linecache</code> module and <code>csv</code> to get the job done:</p>
<pre><code>import csv
import linecache


def get_lines(filename, start_line_number, end_line_number):
    """
    Given a file name, start line and end line numbers,
    return those lines in the file
    """
    for line_number in range(start_line_number, end_line_number + 1):
        yield linecache.getline(filename, line_number)


if __name__ == '__main__':
    # Get lines 4-6 inclusive from the file
    lines = get_lines('data.txt', 4, 6)
    reader = csv.reader(lines)

    for row in reader:
        print(row)
</code></pre>
<p>Consider the data file, data.txt:</p>
<pre><code># this is line 1
# line 2

501,john
502,karen
503,alice

# skip this line
# and this, too
</code></pre>
<p>The above code will produce the following output:</p>
<pre><code>['501', 'john']
['502', 'karen']
['503', 'alice']
</code></pre>
<h1>Discussion</h1>
<ul>
<li><code>linecache</code> is a lesser-known library which allow the user to quickly retrieve lines from a text file</li>
<li><code>csv</code> is a library to deal with comma-separated values</li>
<li>By combining them, we can get the job done with little effort</li>
</ul>
</div>
<span class="comment-copy">@J Doe you should accept an answer if one worked for you.</span>
