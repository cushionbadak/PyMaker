<div class="post-text" itemprop="text">
<p>Just wanting to know how I can add colours to my outputs. Code below:
Using python tkinter gui. </p>
<pre><code>    if bmi &lt; 18.5:
        self.answer_label['text'] = "A person with a BMI of " + str(bmi) + " is underweight " 
    elif 18.5 &lt;= bmi &lt; 25:
        self.answer_label['text'] = "A person with a BMI of " + str(bmi) + " has a healthy weight"
    elif 25 &lt;= bmi &lt; 30:
        self.answer_label['text'] = "A person with a BMI of " + str(bmi) + " is overweight"
    elif bmi &gt;= 30:
        self.answer_label['text'] = "A person with a BMI of " + str(bmi) + " is obese"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So, the main problem is that in tkinter, the Label widget accepts a single color.</p>
<p>You might compose your text of various labels, side by side, if you pack each with <code>.pack(side="left")</code> - and assign a color to each widget. </p>
<p>That is not too practical.</p>
<p>The other ay of coloring text is using a <code>tkinter.Text</code> widget instead.  The problem is that on the opposite side of <code>Label</code>, the <code>Text</code> widget is too broad and allows a lot of options to format text inside it.  With a couple hundred lines, a program using a "Text" widget as its main component could become a Text Editor for rich text, in the way of Microsoft Word.</p>
<p>The downside is that documentation is hard to find, with few examples, and incomplete. (That is my main  motivation in getting you this answer - one more "real World" example won't be bad).</p>
<p>The most complete (but still lacking) documentation for the Text widget is here: <a href="http://effbot.org/tkinterbook/text.htm" rel="nofollow noreferrer">http://effbot.org/tkinterbook/text.htm</a></p>
<p>By reading it, you find out that to be able to enter colored text in a Text widget you have to pre-configure  "tags" with the text attribute, and then use its <code>insert</code> your text using an index as position, and marking up which tags you are using.</p>
<p>I made a subclass of the <code>Text</code> widget which hardcodes some style elements (and the "state" configuration), so that it behaves more like a Label - and added two new methods: <code>append</code> which allows you to add text to the end of the element, specifying a color and a background color, and <code>clear</code>, to clear all its contents and start over.</p>
<p>The idea is that you use the "ColoredLabel" class I list bellow in place of your "Label" widgets. As it inherits from a tkinter Widget, methods such as "configure", "pack", "grid", will work normally  - and then use its "append" method to create its contents:</p>
<pre><code># boilerplate to assert working under Python 2.7 as well as Python 3:
try:
    import tkinter
except ImportError:
    import Tkinter as tkinter

class ColoredLabel(tkinter.Text):
    def __init__(self, parent, text="", **kw):
        params = {"relief": "flat", "border": 0, "height": 1, "highlightthickness": 0}
        kw.update(params)
        super(ColoredLabel, self).__init__(parent, **kw)
        self.tags = set()
        self.length = 0
        self.append(text)

    def clear(self):
        self["state"] = "normal"
        self.length = 0
        self.delete("1.0", tkinter.END)
        self["state"] = "disabled"

    def append(self, text, color=None, background=None):
        """Inserts text at the end of the existing text.
        Colors passed in the parameter are used for inserted text
        """
        self.length += len(text)
        tagname = "{}_{}".format(color, background)
        if tagname not in self.tags:
            params = {}
            if color: 
                params["foreground"] = color
            if background:
                params["background"] = background
            self.tags.add(tagname)
            self.tag_config(tagname, **params)
        self["state"] = "normal"
        self["width"] = self.length
        self.insert(tkinter.END, text, (tagname,))
        self["state"] = "disabled"
</code></pre>
<p>And if yours "answer_label" attribute is defined as a "ColoredLabel", you just write your code as:</p>
<pre><code>self.answer_label.clear()
self.answer_label.append("A person with a BMI of ")
if bmi &lt; 18.5:
    self.answer_label.append(str(bmi), "yellow")
    self.answer_label.append(" is underweight ")
elif 18.5 &lt;= bmi &lt; 25:
    self.answer_label.append(str(bmi), "green")
    self.answer_label.append(" has a healthy weight")
elif bmi &gt;= 30:
   self.answer_label.append(str(bmi), "red")
   self.answer_label.append(" is obese")
</code></pre>
<p>(Of course, if you want the whole label to be the same color, <code>Label</code> has support to it - just do <code>self.answer_label['foreground'] = 'red'</code> on your original text)</p>
</div>
<span class="comment-copy">That will be a bit harder than it seems -- while there is not a full answer, I suggest you to learn to use the str.format method  - <a href="https://docs.python.org/3/library/stdtypes.html" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html</a>  - and also edit your question with an example of the colors you'd like to get.</span>
