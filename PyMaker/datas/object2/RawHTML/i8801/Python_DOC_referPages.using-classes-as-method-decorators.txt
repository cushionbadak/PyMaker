<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/30104047/how-can-i-decorate-an-instance-method-with-a-decorator-class">How can I decorate an instance method with a decorator class?</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>While there are <a href="https://stackoverflow.com/questions/666216/decorator-classes-in-python">plenty of resources about using classes as decorators</a>, I haven't been able to find any that deal with the problem of decorating <em>methods</em>. The goal of this question is to fix that. I will post my own solution, but of course everyone else is invited to post theirs as well.</p>
<hr/>
<h1>Why the "standard" implementation doesn't work</h1>
<p>The problem with the standard decorator class implementation is that python will not create a bound method of the decorated function:</p>
<pre><code>class Deco:
    def __init__(self, func):
        self.func= func

    def __call__(self, *args):
        self.func(*args)

class Class:
    @Deco
    def hello(self):
        print('hello world')

Class().hello() # throws TypeError: hello() missing 1 required positional argument: 'self'
</code></pre>
<p>A method decorator needs to overcome this hurdle.</p>
<hr/>
<h1>Requirements</h1>
<p>Taking the classes from the previous example, the following things are expected to work:</p>
<pre><code>&gt;&gt;&gt; i= Class()
&gt;&gt;&gt; i.hello()
hello world
&gt;&gt;&gt; i.hello
&lt;__main__.Deco object at 0x7f4ae8b518d0&gt;
&gt;&gt;&gt; Class.hello is Class().hello
False
&gt;&gt;&gt; Class().hello is Class().hello
False
&gt;&gt;&gt; i.hello is i.hello
True
</code></pre>
<p>Ideally, the function's <code>__doc__</code> and signature and similar attributes are preserved as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>Usually when a method is accessed as <code>some_instance.some_method()</code>, python's <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">descriptor protocol</a> kicks in and calls <code>some_method.__get__()</code>, which returns a bound method. However, because the method has been replaced with an instance of the <code>Deco</code> class, that does not happen - because <code>Deco</code> is not a descriptor. In order to make <code>Deco</code> work as expected, it must implement a <code>__get__</code> method that returns a bound copy of itself.</p>
<h2>Implementation</h2>
<p>Here's basic "do nothing" decorator class:</p>
<pre><code>import inspect
import functools
from copy import copy


class Deco(object):
    def __init__(self, func):
        self.__self__ = None # "__self__" is also used by bound methods

        self.__wrapped__ = func
        functools.update_wrapper(self, func)

    def __call__(self, *args, **kwargs):
        # if bound to an object, pass it as the first argument
        if self.__self__ is not None:
            args = (self.__self__,) + args

        #== change the following line to make the decorator do something ==
        return self.__wrapped__(*args, **kwargs)

    def __get__(self, instance, owner):
        if instance is None:
            return self

        # create a bound copy
        bound = copy(self)
        bound.__self__ = instance

        # update __doc__ and similar attributes
        functools.update_wrapper(bound, self.__wrapped__)

        # add the bound instance to the object's dict so that
        # __get__ won't be called a 2nd time
        setattr(instance, self.__wrapped__.__name__, bound)

        return bound
</code></pre>
<p>To make the decorator do something, add your code in the <code>__call__</code> method.</p>
<hr/>
<p>Here's one that takes parameters:</p>
<pre><code>class DecoWithArgs(object):
    #== change the constructor's parameters to fit your needs ==
    def __init__(self, *args):
        self.args = args

        self.__wrapped__ = None
        self.__self__ = None

    def __call__(self, *args, **kwargs):
        if self.__wrapped__ is None:
            return self.__wrap(*args, **kwargs)
        else:
            return self.__call_wrapped_function(*args, **kwargs)

    def __wrap(self, func):
        # update __doc__ and similar attributes
        functools.update_wrapper(self, func)

        return self

    def __call_wrapped_function(self, *args, **kwargs):
        # if bound to an object, pass it as the first argument
        if self.__self__ is not None:
            args = (self.__self__,) + args

        #== change the following line to make the decorator do something ==
        return self.__wrapped__(*args, **kwargs)

    def __get__(self, instance, owner):
        if instance is None:
            return self

        # create a bound copy of this object
        bound = copy(self)
        bound.__self__ = instance
        bound.__wrap(self.__wrapped__)

        # add the bound decorator to the object's dict so that
        # __get__ won't be called a 2nd time
        setattr(instance, self.__wrapped__.__name__, bound)
        return bound
</code></pre>
<p>An implementation like this lets us use the decorator on methods as well as functions, so I think it should be considered good practice.</p>
</div>
<span class="comment-copy">Also relevant: <a href="http://stackoverflow.com/questions/10294014/python-decorator-best-practice-using-a-class-vs-a-function">Python decorator best practice, using a class vs a function</a></span>
<span class="comment-copy">Why do you require it to be a class? What's wrong with the decorator just being a function?</span>
<span class="comment-copy">@PaulRooney In my particular case (I'm writing a GUI library), I want to store a bunch of attributes on the function (like keyboard hotkey, description, category, etc.) and also a bunch of functions (like <code>.start_in_new_thread()</code>, <code>.update_status()</code>). Instead of forcing all these attributes onto the function, I'd rather write a wrapper class and replace the function altogether.</span>
