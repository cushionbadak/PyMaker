<div class="post-text" itemprop="text">
<p>Let's say I have cassandra table define like this:</p>
<pre><code>CREATE TABLE IF NOT EXISTS {} (
            user_id bigint ,
            username text,
            age int,
            PRIMARY KEY (user_id)
        );
</code></pre>
<p>I have 3 list of same size let's <code>1 000 000</code> records in each list. Is it a good practice to insert data using a for loop like this:</p>
<pre><code>for index, user_id in enumerate(user_ids):
    query = "INSERT INTO TABLE (user_id, username, age) VALUES ({0}, '{1}', {1});".format(user_id, username[index] ,age[index])
    session.execute(query)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Prepared statements with concurrent execution will be your best bet. The driver provides utility functions for concurrent execution of statements with sequences of parameters, just as you have with your lists: <a href="http://datastax.github.io/python-driver/api/cassandra/concurrent.html#cassandra.concurrent.execute_concurrent_with_args" rel="nofollow noreferrer">execute_concurrent_with_args</a></p>
<p><a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">Zipping</a> your lists together will produce a sequence of parameter tuples suitable for input to that function.</p>
<p>Something like this:</p>
<pre><code>prepared = session.prepare("INSERT INTO table (user_id, username, age) VALUES (?, ?, ?)")
execute_concurrent_with_args(session, prepared, zip(user_ids, username, age))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Its probably a good idea to start by looking at the python driver getting <a href="https://datastax.github.io/python-driver/getting_started.html" rel="nofollow noreferrer">started guide</a>. If you have already seen that then apologies but I thought it worth mentioning.</p>
<p>Generally speaking you'd create your session object and then do your inserts inside your loop, probably using something like a prepared statement (talked about further down the getting started page) but also <a href="https://datastax.github.io/python-driver/api/cassandra/query.html#cassandra.query.PreparedStatement" rel="nofollow noreferrer">here</a> and <a href="https://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Session.prepare" rel="nofollow noreferrer">here</a></p>
<p>The example of the above page uses this as a good starting point</p>
<pre><code>user_lookup_stmt = session.prepare("SELECT * FROM users WHERE user_id=?")

users = []
for user_id in user_ids_to_query:
    user = session.execute(user_lookup_stmt, [user_id])
    users.append(user)
</code></pre>
<p>You may also find <a href="https://www.datastax.com/dev/blog/datastax-python-driver-multiprocessing-example-for-improved-bulk-data-throughput" rel="nofollow noreferrer">this blog</a> helps when talking about better throughput with the python driver</p>
<p>You might find the <a href="https://github.com/datastax/python-driver" rel="nofollow noreferrer">python driver github page</a> a useful resource, in particular I found this example using a prepared statement <a href="https://github.com/datastax/python-driver/blob/master/tests/stress_tests/test_multi_inserts.py" rel="nofollow noreferrer">here</a> that might help you too.</p>
</div>
