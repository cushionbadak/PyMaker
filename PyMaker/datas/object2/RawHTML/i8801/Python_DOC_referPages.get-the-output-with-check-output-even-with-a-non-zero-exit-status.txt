<div class="post-text" itemprop="text">
<p>I use <code>subprocess.check_output</code> a number of times in a script of mine, but I just ran into an issue with an external application. <code>OpenVPN</code> in this case.</p>
<p>When openvpn is called with the <code>--help</code> parameter, which I want to parse in my script, it returns <code>1</code> as its exit code. <code>check_ouput</code> chokes on the non-zero exit code and fails with the following message:</p>
<pre><code>subprocess.CalledProcessError: Command '['openvpn', '--help']' returned non-zero exit status 1
</code></pre>
<p><strong>Q:</strong> I don't understand why openvpn does this, but how can I have <code>check_output</code> give me the output, even with a non-zero return code?</p>
<p><em>edit:</em> I used the exact same code with <code>--show-digests</code> or other parameters and all seemed to work just fine.</p>
<pre><code>output = check_output(["openvpn", "--show-digests"])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>According to the <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow noreferrer">docs</a> the output is available in the <code>.output</code> attribute of the <code>CalledProcessError</code> exception.</p>
<p>So something like this should work:</p>
<pre><code>try:
    result = subprocess.check_output(...).stdout
except subprocess.CalledProcessError as exc:
    result = exc.output
</code></pre>
</div>
<span class="comment-copy">Python 3.5+ has <code>subprocess.run()</code> which is a more versatile overall design. It takes some getting used to, but it will produce an object which contains the output, the exit code, and a smattering of additional state information for the process you ran. In brief, you want <code>result = subprocess.run(['openvpn', '--help'], stdout=subprocess.PIPE, universal_newlines=True).stdout</code> (no <code>check=True</code> because you <i>expect</i> it to fail).</span>
<span class="comment-copy">With this I get the following error, when handling the exception: <code>NameError: name 'CalledProcessError' is not defined</code></span>
<span class="comment-copy">@boolean.is.null:  Updated answer. <code>CalledProcessError</code> lives in the <code>subprocess</code> module.</span>
<span class="comment-copy">I should have realised that on my own, thank you for the help!</span>
