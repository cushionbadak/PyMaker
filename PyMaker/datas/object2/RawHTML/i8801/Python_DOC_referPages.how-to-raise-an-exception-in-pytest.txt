<div class="post-text" itemprop="text">
<p>I have written a code in views.py </p>
<pre><code>def fun():
    try:
         --Do some operation--
    except OSError:
         --Do something else-- 
</code></pre>
<p>And I have written a test case to cover total functionality of the code. To test the "except" part I have written the following code where it will raise "OSError",</p>
<pre><code>with pytest.raises(OSError):
    response = client.post(reverse('my_views_funurl'), follow=True)
</code></pre>
<p>But, I am getting this error</p>
<pre><code>response = client.post(reverse('my_views_funurl'), follow=True)
E           Failed: DID NOT RAISE
</code></pre>
<p>How to raise "OSError" to cover the except part in test cases.
By the way I am using django-framework</p>
</div>
<div class="post-text" itemprop="text">
<p>Best thing would probably be to just mock the method to throw the exception you need, instead of going through all the trouble of actually creating conditions in which <code>OSError</code> would be thrown. A toy example:</p>
<pre><code>from unittest.mock import Mock

def something():
    ...

something = Mock(side_effect=OSError('Your error text'))

&gt;&gt;&gt; something()
&gt;&gt;&gt; Traceback (most recent call first):
&gt;&gt;&gt; ...
&gt;&gt;&gt; OSError: Your error text
</code></pre>
<p>Now as I said, it's only a toy example, so for your own project with different structure and all you will most likely need a bit different setup (given the information you provided it's hard to know how exactly it will look). For example, if you're expecting that some call will throw an <code>OSError</code> exception inside your <code>fun()</code>, then you will need to mock the call in the module <code>fun()</code> is located in. Good places to start reading up on mocks:</p>
<ol>
<li><a href="https://docs.python.org/3/library/unittest.mock.html#quick-guide" rel="nofollow noreferrer">Docks quick guide</a></li>
<li><a href="https://docs.python.org/3/library/unittest.mock.html#patch" rel="nofollow noreferrer">Patch documentation</a> (pay particularly close attention to <a href="https://docs.python.org/3/library/unittest.mock.html#id5" rel="nofollow noreferrer">'where to patch'</a> part)</li>
<li><a href="https://stackoverflow.com/questions/28305406/mocking-a-function-to-raise-an-exception-to-test-an-except-block">Useful in-depth example on stack-overflow</a>. As it is a bit more sophisticated than my proof-of-concept example, it will probably resemble what you're trying to achieve.</li>
</ol>
</div>
<span class="comment-copy">you can operate on a file that doesnt exist that will give you oserror ex: os.remove('file') but file doesnt exist.</span>
<span class="comment-copy">You mock the function that should raise the exception and give the exception as side effect. <a href="https://docs.python.org/3/library/unittest.mock.html#quick-guide" rel="nofollow noreferrer">docs.python.org/3/library/unittest.mock.html#quick-guide</a></span>
<span class="comment-copy">I am getting the following error:            with pytest.raises(OSError): &gt;           response = client.post(reverse('hard_delete_drive', kwargs = {'slug':doc.slug}), follow=True) E           Failed: DID NOT RAISE</span>
<span class="comment-copy">What method exactly should throw the exception you are expecting? Is it <code>hard_delete_drive()</code>, or something inside the view? What module is it in?</span>
<span class="comment-copy"><code>hard_delete_drive()</code>is a function in views.py and I used try-except method to catch the errors. I am catching <code>OSError</code> and <code>IOError</code> in this function. I want to write a test to cover the lines uner <code>OSError</code> and <code>IOError</code>. For that I am raising error using <code>with pytest.raises(IOError):</code> but I am getting <code>DID NOT RAISE</code>.</span>
<span class="comment-copy">Which method calls in <code>hard_delete_drive()</code> are susceptible to <code>OSError</code>/<code>IOError</code>? You will most likely need to mock them. Could you edit your original question to include them, so that I could attempt to reproduce what you're trying to achieve on my machine?</span>
