<div class="post-text" itemprop="text">
<p>I'm new to python and just trying a simple threading example. But I can't explain myself why this code is working synchronous:</p>
<pre><code>from concurrent.futures import ThreadPoolExecutor
import time

def return_after_3_secs():
    time.sleep(3)
    return

def callback_method(future):
    print ("Hello World.")

with ThreadPoolExecutor(2) as pool:
    future = pool.submit(return_after_3_secs)
    future.add_done_callback(callback_method)

print ("1")
time.sleep(1)
print ("2")
time.sleep(1)
print ("3")

print (future.result())
</code></pre>
<p>I'm basically from C# and thinking of a future as a <code>Task</code> in C#. So this is a handle or token for the new Thread.</p>
<p>I would expect following output:</p>
<blockquote>
<ol>
<li>1</li>
<li>2</li>
<li>3</li>
<li>Hello World.</li>
<li>None</li>
</ol>
</blockquote>
<p>But I'm getting:</p>
<blockquote>
<ol>
<li>Hello World.</li>
<li>1</li>
<li>2</li>
<li>3</li>
<li>None</li>
</ol>
</blockquote>
<p>Before something is printed the Console wait for 3 seconds. So this code is running synchron. Can someone help me up with the understanding of futures and tell me why the <code>time.sleep(3)</code> isn't running on second thread?</p>
</div>
<div class="post-text" itemprop="text">
<p>The statements after the <code>with ThreadPoolExecutor(..)</code> is executed after the statements inside the <code>with ..</code> statements done.</p>
<p>(because <code>with ThreadPoolExecutor(..)</code> internally calls <code>executor.shutdown(wait=True)</code> to wait the pending futures done, and related resources freed. See <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor.shutdown" rel="nofollow noreferrer"><code>concurrent.futures.Executor.shutdown</code></a>)</p>
<p>By indenting those statement (<code>print</code>, <code>time.sleep</code>) inside the <code>with</code> statement, you will get what you want.</p>
<pre><code>with ThreadPoolExecutor(2) as pool:
    future = pool.submit(return_after_3_secs)
    future.add_done_callback(callback_method)

    print ("1")
    time.sleep(1)
    print ("2")
    time.sleep(1)
    print ("3")
</code></pre>
</div>
<span class="comment-copy">Ahh thanks... I'm dump... :D</span>
<span class="comment-copy">@Sebi, No problem. Happy Python hacking!</span>
