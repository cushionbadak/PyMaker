<div class="post-text" itemprop="text">
<p>EDIT2: I have removed the rest of the code so I don't spoil the solution. Thank you for your help. </p>
<p>EDIT: I included my whole code. I didn't want to include it because I didn't want to spoil the solution for anyone trying this problem themselves. But I want help so here it is. </p>
<p>I manually am accomplishing this by doing the following but I want this to work on a bigger scale and I refuse to manually copy and paste it that many times. That's not the point of writing code. </p>
<pre><code>x = []
y = []

for i in range(len(x)-1):
products.append(x[0] * y[i])
products.append(x[1] * y[i])
products.append(x[2] * y[i])
products.append(x[3] * y[i])
products.append(x[4] * y[i])
products.append(x[5] * y[i])
products.append(x[6] * y[i])
products.append(x[7] * y[i])
products.append(x[8] * y[i])
products.append(x[9] * y[i])
products.append(x[10] * y[i])
products.append(x[11] * y[i])
products.append(x[12] * y[i])
products.append(x[13] * y[i])
products.append(x[14] * y[i])
products.append(x[15] * y[i])
products.append(x[16] * y[i])
products.append(x[17] * y[i])
products.append(x[18] * y[i])
products.append(x[19] * y[i])
products.append(x[20] * y[i])
products.append(x[21] * y[i])
products.append(x[22] * y[i])
products.append(x[23] * y[i])
products.append(x[24] * y[i])
products.append(x[25] * y[i])
products.append(x[26] * y[i])
products.append(x[27] * y[i])
products.append(x[28] * y[i])
products.append(x[29] * y[i])
products.append(x[30] * y[i])
products.append(x[31] * y[i])
products.append(x[32] * y[i])
products.append(x[33] * y[i])
products.append(x[34] * y[i])
products.append(x[35] * y[i])
products.append(x[36] * y[i])
products.append(x[37] * y[i])
products.append(x[38] * y[i])
products.append(x[39] * y[i])
products.append(x[40] * y[i])
products.append(x[41] * y[i])
products.append(x[42] * y[i])
products.append(x[43] * y[i])
products.append(x[44] * y[i])
products.append(x[45] * y[i])
products.append(x[46] * y[i])
products.append(x[47] * y[i])
products.append(x[48] * y[i])
products.append(x[49] * y[i])
products.append(x[50] * y[i])
products.append(x[51] * y[i])
products.append(x[52] * y[i])
products.append(x[53] * y[i])
products.append(x[54] * y[i])
products.append(x[55] * y[i])
products.append(x[56] * y[i])
products.append(x[57] * y[i])
products.append(x[58] * y[i])
products.append(x[59] * y[i])
products.append(x[60] * y[i])
products.append(x[61] * y[i])
products.append(x[62] * y[i])
products.append(x[63] * y[i])
products.append(x[64] * y[i])
products.append(x[65] * y[i])
products.append(x[66] * y[i])
products.append(x[67] * y[i])
products.append(x[68] * y[i])
products.append(x[69] * y[i])
products.append(x[70] * y[i])
products.append(x[71] * y[i])
products.append(x[72] * y[i])
products.append(x[73] * y[i])
products.append(x[74] * y[i])
products.append(x[75] * y[i])
products.append(x[76] * y[i])
products.append(x[77] * y[i])
products.append(x[78] * y[i])
products.append(x[79] * y[i])
products.append(x[80] * y[i])
products.append(x[81] * y[i])
products.append(x[82] * y[i])
products.append(x[83] * y[i])
products.append(x[84] * y[i])
products.append(x[85] * y[i])
products.append(x[86] * y[i])
products.append(x[87] * y[i])
products.append(x[88] * y[i])
products.append(x[89] * y[i])
</code></pre>
<p>I know that if you are repeating code you are doing it wrong. I can't figure out how to get this to work. </p>
<p>I tried x[i] * y[i] but that just takes the first value from each and multiplies them. </p>
<p>I tried putting another for loop inside but that didn't work either (same result). </p>
<p>I tried a while loop with j = 0 and having it increase j by 1 each time but that didn't work either (same result). </p>
<p>Please help me understand how I can do this. I know it's possible. I have been practicing in python for a week so please give me a break, I know this is a stupid question. </p>
</div>
<div class="post-text" itemprop="text">
<p>There's no need to do </p>
<pre><code>for i in range(10, 100):
    x.append(i)
</code></pre>
<p>You can make a list from a <code>range</code> object like this:</p>
<pre><code>x = list(range(10, 100))
</code></pre>
<p>However, there's no need to make those <code>x</code> and <code>y</code> lists. You can create a list of the products by iterating directly over the ranges. For example:</p>
<pre><code>products = []
for x in range(10, 100):
    for y in range(10, 100):
        products.append(x * y)
</code></pre>
<p>To make a list just containing the palindromes:</p>
<pre><code>def is_palindrome(n):
    s = str(n)
    return s == s[::-1]

products = []
for x in range(10, 100):
    for y in range(10, 100):
        n = x * y
        if is_palindrome(n):
            products.append(n)
</code></pre>
<p>You can then do <code>max(products)</code> to find the highest palindrome that is the product of two two-digit numbers.</p>
<p>Here's a more compact way, using a generator expression, so it doesn't need to build a list:</p>
<pre><code>r = range(10, 100)
print(max(filter(is_palindrome, (x * y for x in r for y in r))))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to use nested loop</p>
<pre><code>x = []
y = []
products = []
palindromes = []

for i in range(10, 100):
    x.append(i)
# print(x)

for i in range(10, 100):
    y.append(i)
# print(y)

for i in range(len(y)):
    for j in range(len(x)):
        products.append(x[j] * y[i])


for i in range((len(products)-1)):
    a = str(products[i])
    b = tuple(a)
    c = b[::-1]
    if b == c:
        print('palindrome found!', a)
        print('b value:', b)
        print('c value:', c)
        palindromes.append(a)

solutions = list(map(int, palindromes))
solutions.sort()
print(solutions)
</code></pre>
<p>This is called the nested loop. Variable i is iterating for length of y minus 1 and variable j is iterating for length of x minus 1.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your for loop is equivalent to this:</p>
<pre><code>products=[i*j for i in x[:-1] for j in y]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use Kaushal Kumar Singh's solution, or here are two other solutions. However, in programming there is no universal solution, a lot of solutions can co-exist.</p>
<p>Code 1:</p>
<pre><code>products = [i * j for i, j in zip(x, y)]
</code></pre>
<p>Code 2:</p>
<pre><code>from operator import mul

products = list(map(mul, x, y))
</code></pre>
</div>
<span class="comment-copy">Please tell us your input and expected output.</span>
<span class="comment-copy">ok I will edit with the whole code</span>
<span class="comment-copy">@McGrady I have edited with whole code. I didn't want to spoil the solution but here it is. I know this works for the test case and I want to expand it to work for the problem statement but there's no way I will copy and paste it that many times.</span>
<span class="comment-copy">Holy sht. You just condensed my entire code that has taken me 3 days on and off into two lines. Are you a wizard</span>
<span class="comment-copy">...and it ran instantly. I don't know who you are but to me what you have just done is legendary. My only question is why does is_palindrome not require the parameter 'n' when it is in your 'generator expression'?</span>
<span class="comment-copy">@vampiire Well, I <i>have</i> been using Python for over 10 years, and programming in various languages for several decades, so I've learned a few tricks. :) But that "one-liner" isn't really that advanced, once you know about <a href="https://docs.python.org/3/tutorial/classes.html#generator-expressions" rel="nofollow noreferrer">generator expressions</a> and the <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer">filter</a> function.</span>
<span class="comment-copy">I tried this and it didn't give me the same result. Let me try again maybe (more than likely) I messed up.</span>
<span class="comment-copy">no this does not work. does not produce the same result as the manual copy / paste way I had before. Any suggestion?</span>
<span class="comment-copy">@vampiire It should work, as I did the same thing and I see the same output. So I have integrated the solution with your actual code.</span>
<span class="comment-copy">try this code please. you will see you get the answer 8448 as the maximum palindrome. in my original (copy/paste) code I got the proper answer of 9009.</span>
<span class="comment-copy">@vampiire yes.. I added -1 by mistake. It will work now</span>
<span class="comment-copy">That just multiplies corresponding elements of the 2 lists together, i.e. <code>x[0]*y[0], x[1]*y[1]</code>, etc. That's not what the OP wants to do.</span>
<span class="comment-copy">Exactly. It comes down to nested for loops. My problem when I tried this was using len(x)-1 instead of just len(x) for the ranges.</span>
