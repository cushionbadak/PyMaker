<div class="post-text" itemprop="text">
<p>Say I have the following code in C++:</p>
<pre><code>union {
    int32_t i;
    uint32_t ui;
};

i = SomeFunc();
std::string test(std::to_string(ui));
std::ofstream outFile(test);
</code></pre>
<p>And say I had the value of <code>i</code> somehow in Python, how would I be able to get the name of the file?</p>
<p>For those of you that are unfamiliar with C++. What I am doing here is writing some value in <code>signed</code> 32-bit integer format to <code>i</code> and then interpreting the <em>bitwise</em> representation as an <code>unsigned</code> 32-bit integer in <code>ui</code>. I am taking the same 32 bits and interpreting them in two different ways.</p>
<p>How can I do this in Python? There does not seem to be any explicit type specification in Python, so how can I reinterpret some set of bits in a different way?</p>
<p>EDIT: I am using Python 2.7.12</p>
</div>
<div class="post-text" itemprop="text">
<p>I would use <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer">python struct</a> for interpreting bits in different ways.</p>
<p>something like following to print -12 as unsigned integer</p>
<pre><code>import struct
p = struct.pack("@i", -12)
print("{}".format(struct.unpack("@I",p)[0]))
</code></pre>
</div>
<span class="comment-copy">Python is dynamically typed. So variables have no type attached to them. You usually can define methods, that communicate a specific semantical interpretation of the data.</span>
<span class="comment-copy">@WillemVanOnsem But it must have an underlying bitwise representation of data (with a certain width), right? So are you saying that Python does not have 32-bit signed/unsigned integers or just that the type is unknowable from the perspective of the interpreted program?</span>
<span class="comment-copy">In Python-3.x all integers have arbitrary size. You can use a binary string and then interpret that string the way you want it. But afaik Python aims to shield the underlying representation as much as possible. Furthermore for instance memory management is (mostly) undefined: every interpreter can freely choose whether to push an object on the stack or the heap.</span>
<span class="comment-copy">@WillemVanOnsem Perhaps it's worth specifying I am using python 2.7.12! But effectively you are saying there does not exist a way to do what I want in Python? :)</span>
<span class="comment-copy">Python-2.x is different: in Python-2.x integers indeed have a specified number of bits.</span>
<span class="comment-copy">This seems to work for me, thanks very much!</span>
