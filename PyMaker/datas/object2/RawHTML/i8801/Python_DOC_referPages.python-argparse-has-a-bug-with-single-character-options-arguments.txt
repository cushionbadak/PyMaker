<div class="post-text" itemprop="text">
<p>I have this code parsing command line arguments:</p>
<pre><code>def handleCmdLineArgs(self):
    parser = argparse.ArgumentParser()
    parser.add_argument('-j','--juice', help='juice', default="")
    parser.add_argument('-bx','--box', help='box', default="")
    args,unknown = parser.parse_known_args()
</code></pre>
<p>When I run a command line with an argument that starts with j argparse AFTER the -j argument argparse will replace the -j argument with the remainder of the word:</p>
<p>Example:
program.py -j orange -jungle</p>
<p>argparse will return args.juice = "ungle" instead of the desired "orange"</p>
<p>I have created a workaround but I'm curious if anyone else has seen this or knows the reason why it is happening?  Or is this maybe a bug in argparse?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is expected behaviour. For single-dash options the space is optional. So these two are equivalent:</p>
<pre><code>program.py -jorange
program.py -j orange
</code></pre>
<p>See the <a href="https://docs.python.org/3/library/argparse.html#option-value-syntax" rel="nofollow noreferrer"><em>Option value syntax</em> section</a> of the documentation:</p>
<blockquote>
<p>For short options (options only one character long), the option and its value can be concatenated:</p>
<pre><code>&gt;&gt;&gt; parser.parse_args(['-xX'])
Namespace(foo=None, x='X')
</code></pre>
</blockquote>
<p>If you want to pass in <code>orange -jungle</code> as the value, you need to use quoting on the command line:</p>
<pre><code>program.py -j "orange -jungle"
</code></pre>
<p>If you want to pass in additional positional arguments that just happen to start with a <code>-</code>, use <code>--</code> to signal the end of the option flags:</p>
<pre><code>program.py -j orange -- -jungle
</code></pre>
<p>See the <a href="https://docs.python.org/3/library/argparse.html#arguments-containing" rel="nofollow noreferrer"><em>Arguments containing -</em> section</a>:</p>
<blockquote>
<p>If you have positional arguments that must begin with <code>-</code> and donâ€™t look like negative numbers, you can insert the pseudo-argument <code>'--'</code> which tells <code>parse_args()</code> that everything after that is a positional argument:</p>
<pre><code>&gt;&gt;&gt; parser.parse_args(['--', '-f'])
Namespace(foo='-f', one=None)
</code></pre>
</blockquote>
</div>
<span class="comment-copy">I don't want to pass in orange -jungle as the value, I want to pass in orange as the value of -j and I want -jungle to end up in unknown</span>
<span class="comment-copy">@Ken: that's not an available option. Command lines should either accept an option or raise an error if it can't. You could perhaps try out <a href="https://docs.python.org/3/library/argparse.html#partial-parsing" rel="nofollow noreferrer">partial parsing</a> to implement handling 'unknown' options, but for any value that starts with a known single-character short option, you'll have to accept that argparse will treat that as an option-value pair.</span>
<span class="comment-copy">@ Martijn Pieters, That is exactly what I'm doing.  Note the line: args,unknown = parser.parse_known_args()</span>
<span class="comment-copy">As I said, <i>but for any value that starts with a known single-character short option, you'll have to accept that argparse will treat that as an option-value pair</i>. You could try <a href="http://click.pocoo.org" rel="nofollow noreferrer"><code>click</code></a>, which apparently makes fewer assumptions about option parsing, to see if that doesn't treat <code>-j...</code> as a switch.</span>
