<div class="post-text" itemprop="text">
<p>I have a piece of code that takes in data from a LabJack and a proximity sensor. It runs on an infinite loop recording voltage values until the user stops it. </p>
<p>However, I have been noticing something weird where my list of x-axis time values seem to have a lot more numbers than the resolution of my plots is showing. Namely, my x-axis time values seem to plot a point only every 10 milliseconds, but my program is collecting 5000 data points every 3.8 seconds, which should equate to a data point less than every 1 millisecond.</p>
<p>Then I looked at my data and I saw the problem. Below are the first couple dozen numbers in my list of x-axis values.</p>
<p><code>[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00999999999999801, 0.00999999999999801, 0.00999999999999801, 0.00999999999999801, 0.00999999999999801, 0.00999999999999801, 0.00999999999999801, 0.00999999999999801, 0.00999999999999801, 0.00999999999999801, 0.00999999999999801, 0.020000000000003126, 0.020000000000003126, 0.020000000000003126, 0.020000000000003126, 0.020000000000003126, 0.020000000000003126, 0.020000000000003126, 0.020000000000003126, 0.020000000000003126, 0.020000000000003126, 0.020000000000003126, 0.020000000000003126, 0.020000000000003126, 0.030000000000001137, 0.030000000000001137, 0.030000000000001137, 0.030000000000001137, 0.030000000000001137, 0.030000000000001137, 0.030000000000001137, 0.030000000000001137, 0.030000000000001137, 0.030000000000001137, 0.030000000000001137, 0.030000000000001137, 0.030000000000001137, 0.03999999999999915, 0.03999999999999915, 0.03999999999999915, 0.03999999999999915, 0.03999999999999915, 0.03999999999999915, 0.03999999999999915, 0.03999999999999915, 0.03999999999999915, 0.03999999999999915, 0.03999999999999915, 0.03999999999999915, 0.03999999999999915, 0.04999999999999716, 0.04999999999999716,... etc.</code></p>
<p>For some reason, the code is repeating each time value 10 or more times before increasing the value by 10 milliseconds and doing the same thing. Below is the code loop that records the voltage and time. The relevant lines are the ones where I define <code>self.t0</code>, <code>tcurr</code> and <code>t</code>.</p>
<pre><code>def startData(self):
    print "Starting data collection"
    self.t0 = float(datetime.now().strftime('%S.%f')[:-3])
    while True:
        with self.data_lock:
            while not self.data_loop:
                ain0bits, = self.d.getFeedback(u3.AIN(0))
                tcurr = datetime.now()
                volts = self.d.binaryToCalibratedAnalogVoltage(ain0bits, isLowVoltage = False, channelNumber = 0)
                t = float(tcurr.strftime('%S.%f')[:-3]) - self.t0    #note, approximate - will be just after voltage was read.
                self.tdict.append(t)
                self.vdict.append(volts)
                self.i += 1
</code></pre>
<p>Any help is appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>It just looks like each of your loop is being completed in less than minimum resolution of datetime.datetime. I wrote simple script to see if sub-millisecond resolution is recorded. It looks like it is. Also, since you're only measuring time elapsed and don't need advanced formatting, timezones etc, using <code>time.time()</code> will give you better time resolution than <code>datetime</code> module.</p>
<p>TEST 1</p>
<pre><code>import time
lst1 = list()
BIG_NUM = 10000
for a in range(10):
    for a in range(BIG_NUM):
        pass
lst1.append(time.time())
</code></pre>
<p>TEST 2</p>
<pre><code>import datetime
lst2 = list()
BIG_NUM = 10000
for a in range(10):
    for a in range(BIG_NUM):
        pass
lst2.append(datetime.datetime.now().strftime('%S.%f')[:-3])
</code></pre>
<p>even with a very small BIG_NUM, the times recorded in lst1 were increasing but there were repeated entries in lst2. But if you remove the inner loop altogether, it was possible to have some repeated entries, simply because the operation completed in smaller than the resolution provided by the time.time()</p>
<p>TL;DR: Use <code>time.time()</code>. If there are still repeating entries, the operations inside are happening faster than highest resolution time available to you.</p>
</div>
<span class="comment-copy">Does your system actually have more than centisecond resolution for <code>datetime.now()</code>?</span>
<span class="comment-copy">Are you saying that you have different number of entries in <code>tdict</code> compared to <code>vdict</code>?</span>
<span class="comment-copy">@user2357112 How would I check that? Shouldn't all computers have at least millisecond resolution? Is there another Python package that can get me that kind of time resolution? I dont need precision absolute time, I need precision relative time, like a stopwatch rather than a clock.</span>
<span class="comment-copy">@Prophecies Yes, the <code>vdict</code> has voltage values coming from the LabJack data acquisition. Those values look fine, they don't repeat or anything.</span>
<span class="comment-copy">@RBuntu: If you were on Python 3, I would recommend <a href="https://docs.python.org/3/library/time.html#time.perf_counter" rel="nofollow noreferrer"><code>time.perf_counter()</code></a>. Since you're not, <a href="https://docs.python.org/2/library/timeit.html#timeit.default_timer" rel="nofollow noreferrer"><code>timeit.default_timer()</code></a> is probably your best option for timing.</span>
<span class="comment-copy">I tried this with <code>time.time()</code> and for some reason, it worked on the first try but then from the second build onward, it had the same issue as before. Were you getting sub-10ms resolution or do the values start repeating only below 1ms?</span>
<span class="comment-copy">Yes, repeating only below 1ms. In my second test, I was having similar issue as yours though</span>
<span class="comment-copy">I downloaded some third party software called "TimerToolV3" that sits in the notification area and increases system clock resolution up to 0.5ms. The code works now, I just wish there was a way to do it in Python 2.7.</span>
