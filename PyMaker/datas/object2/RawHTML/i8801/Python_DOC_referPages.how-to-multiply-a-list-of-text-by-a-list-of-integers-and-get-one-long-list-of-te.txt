<div class="post-text" itemprop="text">
<p>This is for Python 3. I have two lists:</p>
<pre><code>lista = ['foo', 'bar']
listb = [2, 3]
</code></pre>
<p>I'm trying to get:</p>
<pre><code>newlist = ['foo', 'foo', 'bar', 'bar', 'bar']
</code></pre>
<p>But I'm stuck. If I try:</p>
<pre><code>new_list = []
for i in zip(lista, listb):
    new_list.append([i[0]] * i[1])
</code></pre>
<p>I get:</p>
<pre><code>[['foo', 'foo'], ['bar', 'bar', 'bar']]
</code></pre>
<p>I know that this works, but I won't always know the contents of each list.</p>
<pre><code>new_list = ['foo'] * 2 + ['bar'] * 3
</code></pre>
<p>Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>You were pretty close yourself! All you needed to do was use <a href="https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types" rel="nofollow noreferrer"><code>list.extend</code></a> instead of <code>list.append</code>:</p>
<pre><code>new_list = []
for i in zip(lista, listb):
    new_list.extend([i[0]] * i[1])
</code></pre>
<p>this extends the list <code>new_list</code> with the elements you supply (appends each individual element) instead of appending the full list. </p>
<p>If you need to get fancy you could always use functions from <code>itertools</code> to achieve the same effect:</p>
<pre><code>from itertools import chain, repeat

new_list = list(chain(*map(repeat, lista, listb)))
</code></pre>
<p><code>.extend</code> in a loop, though slower, beats the previous in readability.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <em>list comprehension</em> with the following <em>one liner</em>:</p>
<pre><code>new_list = [x for n,x in zip(listb,lista) for _ in range(n)]
</code></pre>
<p>The code works as follows: first we generate a <code>zip(listb,lista)</code> which generates tuples of <code>(2,'foo'), (3,'bar'), ...</code> Now for each of these tuples we have a second <code>for</code> loop that iterates <code>n</code> times (<code>for _ in range(n)</code>) and thus we add <code>x</code> that many times to the list.</p>
<p>The <code>_</code> is a variable that is usually used to denote that the value <code>_</code> carries is not important: it is only used because we need a variable in the for loop to force iteration.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types" rel="nofollow noreferrer"><code>.extend()</code></a> rather than <code>.append()</code>.</p>
</div>
<span class="comment-copy">Baahh, I knew I was close. Thanks!</span>
<span class="comment-copy">Could you be more specific about what the "_" is used for in the for loop?</span>
<span class="comment-copy">The <code>_</code> is a variable one usually uses to say the variable itself does not matter. We do not use the loop counter. We only use it for the <code>for</code> loop that forces to add the element <code>n</code> times.</span>
