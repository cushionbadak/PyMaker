<div class="post-text" itemprop="text">
<p>Is it possible to do the following</p>
<p>This works</p>
<pre><code>usethismodule.LoginUsername="my value"
usethismodule.LoginPassword="another value"
</code></pre>
<p>But I don't know the second part of the object until the code is being run, I think what I want is this</p>
<pre><code>listofthings=[]
listofthings.append('usethismodule.LoginUsername')
listofthings.append('usethismodule.LoginPassword')

for value in listofthings:
    value="A value I set"
</code></pre>
<p>This would have the same outcome as the above. Does that make sense?</p>
</div>
<div class="post-text" itemprop="text">
<p>Indeed, <a href="https://docs.python.org/3/library/functions.html#setattr" rel="nofollow noreferrer"><code>setattr</code></a> and a dictionary would do the trick.</p>
<pre><code>dictofthings = {
    'usethismodule.LoginUsername': 'my value',
    'usethismodule.LoginPassword': 'my other value'
}

for k in dictofthings:
    setattr(eval(k.split('.')[0]), k.split('.')[1], dictofthings[k])
</code></pre>
<p>Hope this helps!</p>
</div>
<div class="post-text" itemprop="text">
<p>You keep saying <code>usethismodule.&lt;something&gt;</code>. So let's pretend you're right.</p>
<p>Python maintains a <code>dict</code> of currently imported modules in <code>sys.modules</code>. You can look up a module, by name, and get an "object". (A <code>module</code> object, in fact.)</p>
<p>If you have an object in hand, you can either hard-code an access to one of its attributes, or use <code>getattr</code> or <code>setattr</code> on it.</p>
<pre><code>import sys

module_name = "usethismodule"   # I don't know where this come from.

utm = sys.modules[module_name]

utm.LoginUsername = "xyzzy"
utm.LoginPassword = "secret123"

# or

pw_attr_name = "passWord"       # Maybe you read this from a config file?
setattr(utm, pw_attr_name, "secret123")
</code></pre>
</div>
<span class="comment-copy">You might want <code>setattr</code>, for example, <code>setattr(usethismodule, 'LoginUsename', "my value")</code></span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/q/11553721/953482">Using a string variable as a variable name</a>. Short answer: use a dict.</span>
<span class="comment-copy">But the module name is part of the data as well. You made it part of the code.</span>
<span class="comment-copy">OK, changed. Note that eval <i>may</i> be a security hole, but <code>ast.literal_eval</code> won't work. Is this better?</span>
<span class="comment-copy">I'd say it's better because that's what they apparently want, but worse because of that eval security issue :-). Maybe a mix of your answer and Austin's answer (which assumes a single module name) would be best.</span>
