<div class="post-text" itemprop="text">
<p>I am completely new to python and have never worked with it before now. I am stuck on this program that is suppose to be a command line program that asks for keywords and then searches for them in a list of available titles. I used json to load the information of the api into a dictionary and was able to search it. </p>
<p>My main problem is that I have no clue how to do the argparser that will allow me to make it a command line program. </p>
<p>Help?</p>
<p>Here's what I have for code so far:</p>
<pre><code>import requests
import argparse
import json
from urllib.request import urlopen


def create_json_file_from_api(url):
    request = urlopen(url)
    data = request.read().decode("utf-8")
    j_data = json.loads(data)
    return j_data


json_data = create_json_file_from_api("http://hn.algolia.com/api/v1/search_by_date?tags=story&amp;numericFilters=created_at_i&gt;1488196800,created_at_i&lt;1488715200")
print(json_data) #making sure the data pulled is correct

def _build_array_of_necessary_data(data, d=[]):
    if 'hits' in data:
        for t in data['hits']:
            d.append({'title' : t.get('title'), 'points': t.get('points'), 'url' : t.get('url')})
            _build_array_of_necessary_data(t,d)
    return d

j = _build_array_of_necessary_data(json_data)
print(j) #testing the function above
def _search_titles_for_keywords(data, word, s=[]):
    for c in data:
        if word in c['title']:
            s.append({'title' : c.get('title')})
    return s

word = "the" #needs to be input by user
word.upper() == word.lower()
k = _search_titles_for_keywords(j, word)
print(k) #testing the function above

def _search_links_for_point_value(data, points, s=[]):
    points = int(points)

    for c in data:
        if points &lt;= c['points']:
            s.append({'Title of article is' : c.get('title')})
    return s

points = "7" #needs to be input by user
l = _search_links_for_point_value(j, points)

print(l)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to run this as a python script with arguments, you need to have</p>
<pre><code>if __name__ == '__main__':
    ...
</code></pre>
<p>to tell python to run what follows.  The following can be run from the command line by passing the 'word' argument with the <code>-w</code> or <code>--word</code> flag, and the 'points' argument with the <code>-p</code> or <code>--points</code> flag.  Examples:</p>
<pre><code>C:\Users\username\Documents\&gt; python jsonparser.py -w xerox -p 2
or
C:\Users\username\Documents\&gt; python jsonparser.py --points 3 --word hello
</code></pre>
<p>Here is the refactored code:</p>
<pre><code>import argparse
from sys import argv
import json
from urllib.request import urlopen


def create_json_file_from_api(url):
    request = urlopen(url)
    data = request.read().decode("utf-8")
    j_data = json.loads(data)
    return j_data

def _build_array_of_necessary_data(data, d=[]):
    if 'hits' in data:
        for t in data['hits']:
            d.append({'title' : t.get('title'), 'points': t.get('points'), 'url' : t.get('url')})
            _build_array_of_necessary_data(t,d)
    return d

def _search_titles_for_keywords(data, word, s=[]):
    for c in data:
        if word in c['title'].lower():
            s.append({'title' : c.get('title')})
    return s

def _search_links_for_point_value(data, points, s=[]):
    points = int(points)

    for c in data:
        if points &lt;= c['points']:
            s.append({'Title of article is' : c.get('title')})
    return s


if __name__ == '__main__':
    # create an argument parser, add argument with flags
    parser = argparse.ArgumentParser(description='Search JSON data for `word` and `points`')
    parser.add_argument('-w', '--word', type=str, required=True, 
        help='The keyword to search for in the titles.')
    parser.add_argument('-p', '--points', type=int, required=True, 
        help='The points value to search for in the links.')
    # parse the argument line
    params = parser.parse_args(argv[1:])

    url = "http://hn.algolia.com/api/v1/search_by_date?tags=story&amp;numericFilters=created_at_i%3E1488196800,created_at_i%3C1488715200"
    json_data = create_json_file_from_api(url)
    print(json_data[:200]) #making sure the data pulled is correct

    j = _build_array_of_necessary_data(json_data)
    print(j) #testing the function above

    k = _search_titles_for_keywords(j, params.word.lower())
    print(k) #testing the function above

    l = _search_links_for_point_value(j, params.points)
    print(l)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just change the line where you are setting points to ask user for the input</p>
<pre><code>points = input("Enter points ")
</code></pre>
<p>Then your program will ask user for the points. This is not using the argparser though. When your scripts get complicated with more input options etc. you can take a look at argparser. 
<a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">https://docs.python.org/3/library/argparse.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>To use <code>argparse</code> you will first want to declare the <code>ArgumentParser</code> object, then you can add arguments to the object using the <code>add_argument()</code> method. After this you can use the <code>parse_args()</code> method to parse the command line arguments.</p>
<p>As an example using your program:</p>
<pre><code>import argparse

parser = argparse.ArgumentParser()
parser.add_argument("word", help="the string to be searched")
# you will want to set the type to int here as by default argparse parses all of the arguments as strings
parser.add_argument("point", type = int)
args = parser.parse_args()
word = args.word
point = args.point
</code></pre>
<p>You will invoke it from the command line in the same order the commands are added in this case, so in your case <code>python your_program.py the 7</code></p>
<p>For more information see: <a href="https://docs.python.org/3/howto/argparse.html" rel="nofollow noreferrer">https://docs.python.org/3/howto/argparse.html</a></p>
</div>
<span class="comment-copy">Thank you for that but how do I get a list with only the titles that match both the point search and keyword?  Would it be:     for a, b in zip(k, l):        print(a,b) at the end of the code?</span>
<span class="comment-copy">I would do that but I want it to run from the command line to make it easier to access</span>
<span class="comment-copy">I understand this much better than other explainations I have come across else where but how to I run this as an instance of <i>main</i> that combines the results of both point and word?</span>
