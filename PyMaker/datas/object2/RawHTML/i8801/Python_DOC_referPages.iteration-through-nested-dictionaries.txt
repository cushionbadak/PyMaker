<div class="post-text" itemprop="text">
<p>I'm trying to implement simple tree class which is inherited from dictionary. 
Here my code:</p>
<pre><code>class tree(dict):
    def __init__(self, hsymbol="/"):
        self.hsymbol = hsymbol
    def __setitem__(self, key, value):
        if key[0] == self.hsymbol : key = key[1:]
        parts = key.split(self.hsymbol, 1)
        if len(parts) == 2:
            if parts[0] not in self: self[parts[0]] = tree(hsymbol = self.hsymbol)
            self[parts[0]].__setitem__(parts[1], value)
        else:
            super(tree, self).__setitem__(key, value)

    def __getitem__(self, key):
        if key[0] == self.hsymbol : key = key[1:]
        parts = key.split(self.hsymbol, 1)
        if len(parts) == 2:
            if parts[0] not in self: raise KeyError(parts[0])
            return self[parts[0]][parts[1]]
        else:
            if key not in self: raise KeyError(parts[0])
            return super(tree, self).__getitem__(key)
    def __contains__(self,key):
        if key[0] == self.hsymbol : key = key[1:]
        parts = key.split(self.hsymbol, 1)
        if len(parts) == 2:
            if not super(tree, self).__contains__(parts[0]): return False
            return parts[1] in self[parts[0]]
        else:
            if not super(tree, self).__contains__(key): return False
            return True
    def __delitem__(self, key):
        if key[0] == self.hsymbol : key = key[1:]
        parts = key.split(self.hsymbol, 1)
        if len(parts) == 2:
            if parts[0] not in self: raise KeyError(parts[0])
            self[parts[0]].__delitem__(parts[1])
        else:
            if key not in list(self): raise KeyError(parts[0])
            super(tree,self).__delitem__(key)
    def keys(self,parent=""):
        #if parent is None: parent = self.hsymbol
        names = []
        for name in super(tree, self).keys():
            if isinstance(self[name], tree):
                names += self[name].keys(parent=parent+self.hsymbol+name)
            else:
                names.append(parent+self.hsymbol+name)
        return names
</code></pre>
<p>So everything works quite well, although I'm not sure about keys function realization:</p>
<pre><code>&gt;&gt;&gt; t=tree()
&gt;&gt;&gt; t['/user/Johnson/incoming'] = 2200
&gt;&gt;&gt; t['/user/Johnson/family'] = 4
&gt;&gt;&gt; t['/user/Johnson/play'] = False
&gt;&gt;&gt; t['/user/Smith/incoming'] = 12000
&gt;&gt;&gt; t['/user/Smith/family'] = 1
&gt;&gt;&gt; t['/user/Smith/play'] = True
&gt;&gt;&gt; t['user/Smith/incoming']
12000    
&gt;&gt;&gt; print t
{'user': {'Smith': {'play': True, 'incoming': 12000, 'family': 1}, 'Johnson': {'play': False, 'incoming': 2200, 'family': 4}}}
&gt;&gt;&gt; print t.keys()
['/user/Smith/play', '/user/Smith/incoming', '/user/Smith/family', '/user/Johnson/play', '/user/Johnson/incoming', '/user/Johnson/family']
&gt;&gt;&gt; t
{'user': {'Smith': {'play': True, 'incoming': 12000, 'family': 1}, 'Johnson': {'play': False, 'incoming': 2200, 'family': 4}}}
</code></pre>
<p>...but not an iteration through it:</p>
<pre><code>&gt;&gt;&gt; for k in t:
...  print k
... 
user
&gt;&gt;&gt; 
</code></pre>
<p>How can I get something like this?</p>
<pre><code>/user/Smith/play
/user/Smith/incoming
/user/Smith/family
/user/Johnson/play
/user/Johnson/incoming
/user/Johnson/family
</code></pre>
<p>Pretty sure that it must be <code>__iter__</code> and <code>next</code> attributes of tree class, but I haven't figured out how to write it yet.</p>
<p>I've searched over Stack Overflow with no luck:</p>
<ul>
<li><p>python recursive iteration nested dictionaries </p></li>
<li><p>python class inherited from dictionary iteration through nested dictionaries</p></li>
<li><p>python iteration through nested dictionaries</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Yes, you need <code>__iter__</code> (an iterator will have a <code>next()</code> automatically).</p>
<p>Following your existing logic:</p>
<pre><code>def __iter__(self, parent=""):
    for name in super(tree, self).keys():
        if isinstance(self[name], tree):
            for item in self[name].__iter__(parent=parent+self.hsymbol+name):
                yield item
        else:
            yield parent+self.hsymbol+name
</code></pre>
<p>Unlike your current <code>keys()</code> implementation, this only walks the tree on an as-needed basis: If a client only needs the first two keys, it only calls <code>next()</code> twice, and so the iterator only proceeds past two <code>yield</code>s.</p>
<p>(I might suggest implementing <code>keys</code> as simply <code>return list(iter(self))</code> -- that way you have the lazy approach available for those that want to avoid the inefficiency of unnecessarily walking a full tree, and the non-lazy approach otherwise).</p>
</div>
<span class="comment-copy">Complaining about dupehammer holders in the initial rev of a question isn't a good way to set up a... productive working relationship. Keep in mind that if your question <i>does</i> get closed, the folks who can reopen it without needing four other voters to agree? Also those with badges. So. <b>If</b> your question gets closed with something that you believe isn't a duplicate, argue the case for how it's distinguished at that time; don't set up a hostile position up-front.</span>
<span class="comment-copy">Because you inherit from <code>dict</code>, when you iterate over the instance you're calling <code>dict.__iter__</code>; your custom <code>keys</code> method is ignored. Rather than inheritance, consider <i>composition</i>; implement the <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableMapping" rel="nofollow noreferrer"><code>MutableMapping</code></a> ABC with the wrapped dictionary as an <i>attribute</i>. See e.g. <a href="http://stackoverflow.com/a/3387975/3001761">stackoverflow.com/a/3387975/3001761</a></span>
<span class="comment-copy">@CharlesDuffy but I'm just tired to ask for example to do something without function, and got that it is duplicate that everything done by functions.... Look a this <a href="http://stackoverflow.com/questions/42603914/is-any-way-to-expend-dictionary-notation">link</a>....</span>
<span class="comment-copy">Alternatively, implement <code>__iter__</code> as <code>return iter(self.keys())</code>.</span>
<span class="comment-copy"><b>If</b> this question gets closed as a duplicate, <b>and</b> if, <i>after you've actually tried the answers</i> on the duplicate with appropriate modifications for your specific use case and found they do not solve your problem, <b>then</b> edit the question to <i>clarify specifically how they don't</i>. There's no guarantee that your question isn't a dupe, and if the dupe has the answer you need why <i>wouldn't</i> you want to be shown it?</span>
<span class="comment-copy">Thank you! Excellent! It is exactly what I looked for!</span>
<span class="comment-copy">Note that if the OP did use <code>MutableMapping</code> it would generate <code>keys</code> for them.</span>
