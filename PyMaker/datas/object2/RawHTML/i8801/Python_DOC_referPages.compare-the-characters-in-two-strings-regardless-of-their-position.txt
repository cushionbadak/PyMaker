<div class="post-text" itemprop="text">
<p>I have a function <code>similarity(s, t)</code> that compares two strings and the elements of said strings, regardless of their position, and returns the number of identical elements. The code I have:</p>
<pre><code>def similarity(s, t):
   return sum(s == t for s, t in zip(s, t))
</code></pre>
<p>The only issue is that tests such as:</p>
<pre><code>similarity('ab','ba') == 2
</code></pre>
<p>fail. I guess because it's only checking the first elements, and returning that result. Is there anyway to get around this whilst using <code>zip()</code> or should I take the more arduous route?</p>
</div>
<div class="post-text" itemprop="text">
<p>The easiest solution would be to use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>:</p>
<pre><code>from collections import Counter

def similarity(a, b):
    cnts1 = Counter(a)
    cnts2 = Counter(b)
    diff = cnts1 - cnts2
    return len(a) - sum(diff.values())

    # or if you want it as one liner:
    # return len(a) - sum((Counter(a) - Counter(b)).values())
</code></pre>
<p>Which should work correct:</p>
<pre><code>&gt;&gt;&gt; similarity('ab', 'ba')
2
&gt;&gt;&gt; similarity('aba', 'bab')
2
</code></pre>
<p>The problem with <code>zip</code> is that it zips the elements by index, so you only compare items at the same position.</p>
</div>
<span class="comment-copy">You may want <code>return sum(s == t for s, t in zip(sorted(s), sorted(t)))</code>. Even then, I don't know if you are dealing with strings of the same length. If not, then <code>zip_longest</code> from the <code>itertools</code> module may come in handy, instead of <code>zip</code>. But it still would not be an all-encompassing solution.</span>
<span class="comment-copy">Thanks for the suggestion! The strings aren't of equal length, and it seems as though zip_longest isn't working for <code>similarity('aab','ba') == 2</code> that one's still returning 1 unfortunately..but doing <code>sorted(s), sorted(t)</code> did work for the ones of equal length, so thank you for that.</span>
