<div class="post-text" itemprop="text">
<p>All of the answers I have found say just to use a dictionary or a list.
I am making an application and the GUI is being design in QT creator. There is an array of checkboxes(21) and in Qt Creator are all labeled cb0....cb20. I have a 21 element list that represents if the checkbox should be checked or not. Is there a way to loop through variable names? Pseudo code:</p>
<pre><code>for i in range(21):
    if cbList[i]:
        cb'i'.setChecked=True
    else:
        cb'i'.setChecked=False
</code></pre>
<p>How can I have <code>cb'i'</code> translate the i into the variable name?</p>
<p>Added for clarity:
I don't want to create a dictionary and then set the dictionary value true or false. The variables already exist. They are checkboxes in the GUI. All the checkboxes are name cb0 ... cb20. They have the function setChecked that i wish to call for each instance of the checkbox. For example <code>cb0.setChecked(False)</code> will disable the checkbox. I have a list that corresponds to each checkbox. I am trying to avoid writing <code>cb1.setChecked(True)</code> for all 21 checkboxes.</p>
</div>
<div class="post-text" itemprop="text">
<p>If the checkboxes were created in Qt Designer, they will end up as attributes of the top-level window, or of a <code>ui</code> namespace.</p>
<p>Given this, the correct solution is to use <a href="https://docs.python.org/3/library/functions.html?highlight=getattr#getattr" rel="nofollow noreferrer">getattr</a>:</p>
<pre><code>class MainWindow(QtGui.QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        ...
        for i in range(21):
            checkbox = getattr(self.ui, 'cb%s' % i)
            if cbList[i]:
                checkbox.setChecked(True)
            else:
                checkbox.setChecked(False)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That's a terrible idea. And to find out why, read this <a href="http://stupidpythonideas.blogspot.com/2013/05/why-you-dont-want-to-dynamically-create.html" rel="nofollow noreferrer">article</a>. </p>
<p>Instead use the list or dictionary option. </p>
<pre><code>cb = defaultdict(dict)
for i in range(21):
    if cbList[i]:
        cb[i]['setChecked'] = True
    else:
        cb[i]['setChecked'] = False
</code></pre>
<p>Using a dictionary lets you call the variable using a “associative memory” or “associative array” instead of having to know the index of the object in the array. To achieve what you wanted to, give the dictionary keys as so: </p>
<pre><code>cb["cb%s"%(i)]
</code></pre>
<p>That way you can refer to specific variable 4 as: <code>cb['cb4']</code> if you need to. </p>
<p>Edit: 
I just realized you meant you were trying to call QT checkboxes. In that case, I suggest rather than having a list of checkboxes, you can have a dictionary where the key of the dictionary is the name of the checkbox ID, and the value is the QT object itself. </p>
<pre><code>cb = {}
for i in range(21):
    cb['cb%s'%i] = getattr(self.ui, 'cb%s'%i)
</code></pre>
<p>Now when you want to set a particular checkbox as true or false, you could simply call: </p>
<pre><code>cb['cb3'].setChecked(True)
</code></pre>
<p>Why this is a better coding practice: You would be iterating through getattr for each checkbox just once (when you set up the dictionary initially). Additionally, if you make a single change, you can directly obtain the object you want to manipulate. </p>
</div>
<div class="post-text" itemprop="text">
<p>You should use QT's builtin data strucures instead, where you are given an indexable and iterable data structure just like the above examples with lists and dictionaries.</p>
<p>Here is an example with <code>QListWidget</code></p>
<pre><code>import sys
from PyQt4.QtGui import *

app = QApplication(sys.argv)

listWidget = QListWidget()

for i in range(10):
    item = QListWidgetItem("Item %i" % i)
    listWidget.addItem(item)

listWidget.show()
sys.exit(app.exec_())
</code></pre>
<p>While variable name concatenation is possible in some languages, it mostly depends on having an extra terminal (like <code>$</code> in PHP) to denote variables. The syntax parser is made not to understand variable name concatenation on purpose. This is actually to help you avoid handcrafting spaghetti.</p>
</div>
<span class="comment-copy">You can use eval, but you should avoid that!</span>
<span class="comment-copy">I'll look that up, any other options?</span>
<span class="comment-copy">If one person tells you you're crazy, they're crazy. If two people tell you you're crazy, there's a conspiracy against you. If three people tell you you're crazy, time to pad your walls. This is a <b>terrible</b> idea that is a performance and maintenance nightmare. Just. Use. A. Hashtable (e.g. dictionary). That's what they're <i>for</i>. Explicit datastructures are better than implicit ones.</span>
<span class="comment-copy">No, this is not PHP.</span>
<span class="comment-copy">Of all the answers this one is the simplest and most intuitive. Tried this and it iterates through and functions exact how I hoped. Glad you were able to correctly interpret the question instead of just saying I'm crazy or giving me a solution that I explicitly say won't work such as in all the dictionary replies.</span>
<span class="comment-copy">I don't want to create a dictionary and then set the dictionary value true or false. The variables already exist. They are checkboxes in the GUI. All the checkboxes are name cb0 ... cb20. They have function setChecked that i wish to call.</span>
<span class="comment-copy">Save the checkbox object to the dictionary instead of the list. That saves you from iterating through the following: (a) the range(21) each time and (b) for each range value, having to iterate through the elements using getattr. I made the change in the code to reflect the same.</span>
<span class="comment-copy">@kaminsknator did the edited response answer your question? I recommend the dictionary approach to the list based one given your use case</span>
<span class="comment-copy">Yes that approach would work.</span>
<span class="comment-copy">Thats interesting my issues specifically is trying to interact with pre-existing checkboxes that are designed in Qt Creator.</span>
