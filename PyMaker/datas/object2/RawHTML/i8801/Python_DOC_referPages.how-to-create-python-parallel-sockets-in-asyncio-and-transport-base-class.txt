<div class="post-text" itemprop="text">
<p>I used asyncio for my non-stop server in python and implemented 
connection_made , connection_lost , data_received 
funtions in my ServerClientProtocol</p>
<p>I used this class first beacause of using multiple times repeatedly sending data to socket class socket 
got closed and program exited</p>
<p>and second becuase I thought its async and have parallel answering multiple coming sockets in same time,
but it's not.</p>
<p>how should I use that in one async thread and parallel answering socket?</p>
<p>this is my code:</p>
<pre><code>    class ServerClientProtocol(asyncio.Protocol):    
        def connection_made(self,transport):
            self.transport = transport

        def connection_lost(self,exc):
            pass

        def data_received(self, data):
            server.server(self,data)

    def main(*args):    
        loop = get_event_loop()        
        coro = loop.create_server(ServerClientProtocol, '127.0.0.1', 50008)    
        srv = loop.run_until_complete(coro)    
        loop.run_forever()    
    if __name__ == '__main__':
        main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>server.server()</code> might be blocking the other connections.  If this is a long-running call, try using <a href="https://docs.python.org/3/library/asyncio-stream.html#asyncio.start_server" rel="nofollow noreferrer"><code>asyncio.start_server</code></a> (example <a href="https://docs.python.org/3/library/asyncio-stream.html#tcp-echo-server-using-streams" rel="nofollow noreferrer">here</a>) instead, and call <code>server.server()</code> using <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.run_in_executor" rel="nofollow noreferrer"><code>await loop.run_in_executor(None, server.server, data)</code></a></p>
</div>
<span class="comment-copy">Still no answer???</span>
<span class="comment-copy">I wrote some code, but its still sequential, not async. <code>coro = asyncio.start_server(handle_echo, '127.0.0.1', 50008,loop=loop) srv = loop.run_until_complete(coro)             loop.run_forever() @asyncio.coroutine def handle_echo(reader, writer):     data = yield from reader.read(500)     message = data.decode(encoding='utf-8')                      </code></span>
<span class="comment-copy">`    nameindex=('name="calculator2"' in message)     if nameindex:         time.sleep(5)         writer.write("Content-Length: 1\r\n\r\n2".encode())         yield from writer.drain()     else:         writer.write("Content-Length: 1\r\n\r\n1".encode())         yield from writer.drain()              print("Close the client socket")     writer.close()`   @udi</span>
<span class="comment-copy">these 2 comments are my new code for testing async and syn. and saw that again its syn</span>
<span class="comment-copy">Please start a new question (or edit your question above) instead of adding code in comments.</span>
<span class="comment-copy">Thanks.I did that with this code and it worked: yield from asyncio.sleep(5)</span>
