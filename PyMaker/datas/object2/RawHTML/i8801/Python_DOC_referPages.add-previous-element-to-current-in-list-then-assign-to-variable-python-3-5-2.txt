<div class="post-text" itemprop="text">
<p>First post on here, I'm stoked!  Okay, so here is the question:  How do I add previous element to current element and then make a new list from those values to add them to matplotlib graph?  Here is an example of my code:</p>
<hr/>
<pre><code>example_list = [20, 5, 5, -10]

print(example_list) '''first output should be'''
[20, 5, 5, -10]

value1 = (example_list[0])
value2 = (example_list[0] + example_list[1])
value3 = (example_list[0] + example_list[1] + example_list[2])
value4 = (example_list[0] + example_list[1] + example_list[2] + example_list[3])
</code></pre>
<p>'''I think you can see the point I'm trying to make'''</p>
<p>del example_list[:]</p>
<pre><code>example_list.append(value1)
example_list.append(value2)
example_list.append(value3)
example_list.append(value4)

print(example_list)
'''output should be:'''

[20, 25, 30, 20]
</code></pre>
<hr/>
<p>'''This works for hard coding it in, but I want this to happen for hundreds of elements. (when people add to list from my "simple_finance_app" Python script)'''  Thanks for the help!  (P.S. I already have the matplotlib code so no need to add that, however, I it could help others who read this question/answer)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer"><code>itertools.accumulate</code></a> method for that:</p>
<pre><code><b>from itertools import accumulate
from operator import add</b>

result = list(<b>accumulate(</b>example_list<b>,add)</b>)</code></pre>
<p>This generates:</p>
<pre><code>&gt;&gt;&gt; list(accumulate(example_list,add))
[20, 25, 30, 20]
</code></pre>
<p>If the function (here <code>operator.add</code>) works in <em>O(n)</em>, then <code>accumulate</code> will work in <em>O(n)</em> whereas your hardcoded solution works in <em>O(n<sup>2</sup>)</em>.</p>
<p>Basically the <code>accumulate(iterable[,func])</code> function takes as input an iterable <code>[x1,x2,...,xn]</code> and a function <code>f</code>, and each iteration it calls <code>f</code> on the <em>accumulator</em> and the new element. In the first step it emits the first element, and then the accumulator becomes that element. So it basically generates <code>[x1,f(x1,x2),f(f(x1,x2),x3),...]</code>. But <em>without</em> calculating <code>f(x1.x2)</code> each time. It is thus semantically equivalent to:</p>
<pre><code>def accumulate(iterable,func): # semantical equivalent of itertools.accumulate
    iterer = iter(iterable)
    try:
        accum = next(iterer)
        while True:
            yield accum
            accum = func(accum,next(iterer))
    except StopIteration:
        pass
</code></pre>
<p>but probably less error prone and more efficient.</p>
</div>
<div class="post-text" itemprop="text">
<p>You mean <code>sum</code> combined with slicing?</p>
<pre><code>li = [1, 2, 3, 4]

a = sum(li[:1])
b = sum(li[:2])
c = sum(li[:3])
d = sum(li[:4])  # same as sum(li) in this case
</code></pre>
<p>Or in general:</p>
<pre><code>li = [1, 2, 3, 4, 5, 6, 7, 8, 9]

for i in range(len(li)):
    print(sum(li[:i + 1]))
# 1
# 3
# 6
# 10
# 15
# 21
# 28
# 36
# 45
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Vanilla <code>for</code> loop solution:</p>
<pre><code>&gt;&gt;&gt; example_list = [20, 5, 5, -10]
&gt;&gt;&gt; out = []
&gt;&gt;&gt; sum = 0
&gt;&gt;&gt; for x in example_list:
...     sum += x
...     out.append(sum)
... 
&gt;&gt;&gt; out
[20, 25, 30, 20]
</code></pre>
<p>Note that repeatedly calling <code>sum</code> in a <code>for</code> loop/comprehension will result in O(n^2) complexity.</p>
</div>
<span class="comment-copy">So your question is how to get cumulative sums up to a specific index, basically?</span>
<span class="comment-copy">Could you explain further what you mean by that? Heh, I don't understand what you're trying to ask.</span>
<span class="comment-copy">Nice! I guess you learn something new every day</span>
<span class="comment-copy">Very informative and very accurate to what I needed for my project, thank you Mr. Onsem!  That function seems to be a bit beyond me.  I'm still trying to wrap my head what you said about that specific function you created, but I'll learn it for sure!</span>
<span class="comment-copy">I don't like the complexity of this. You are summing up from the first element every time when you don't need to.</span>
<span class="comment-copy">@timgeb Indeed. Since <code>itertools</code> provides a builtin solution which I wasn't aware of (see another answer) I won't bother improving this :)</span>
<span class="comment-copy">Hmm, this one seems to work too.  But I want those values set into a variable that I can then use for matplotlib graphs.</span>
