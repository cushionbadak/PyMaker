<div class="post-text" itemprop="text">
<p>I have a very large dictionary with entries of the form <code>{(Tuple) : [int, int]}</code>. For example, <code>dict = {(1.0, 2.1):[2,3], (2.0, 3.1):[1,4],...}</code> that cannot fit in memory. </p>
<p>I'm only interested in the top K values in this dictionary sorted by the first element in each key's value. If there a data structure that would allow me to keep only the largest K key-value pairs? As an example, I only want 3 values in my dictionary. I can put in the following key-value pairs; <code>(1.0, 2.1):[2,3], (2.0, 3.1):[1,4], (3.1, 4.2):[8,0], (4.3, 4.1):[1,1]</code> and my dictionary would be: <code>(3.1, 4.2):[8,0], (1.0, 2.1):[2,3], (2.0, 3.1):[1,4]</code> (in case of key-value pairs with the same first element, the second element will be checked and the largest key-value pair based on the second element will be kept) </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import heapq


class OnlyKDict(object):

    def __init__(self,K,key=lambda x:x):
        self.data = []
        self.dictionary = {}
        self.key=key         # Lambda function for the comparator
        self.K = K           # How many values to keep in dictionary

    def push(self,item):
        heapq.heappush(self.data,(self.key(item),item))
        self.dictionary[item[0]]=item[1]
        if len(self.data)&gt;self.K:  #Size greater than k? pop minimum from heap and dict.
            item = self.pop()     #This ensure only k largest are there.
            self.dictionary.pop(item[0],None)

    def pop(self):
        return heapq.heappop(self.data)[1]

    def __getitem__(self,key):
        return self.dictionary[key]

    def __setitem__(self,key,value):
        if self.dictionary.has_key(key):
            self.dictionary[key] = value #If key present update value
        else:
            self.push((key,value))  ##Else push key and value as a tuple

h = OnlyKDict(8,lambda x:x[0][1] if x[0][1]==x[0][0] else x[0][0]) ##Compare 2nd value if both equal else compare 1st value only.

for i in xrange(10):
    h[(i,i)] = [i,i]

print h.dictionary
</code></pre>
<p>Output: {(5, 5): [5, 5], (6, 6): [6, 6], (4, 4): [4, 4], (7, 7): [7, 7],
(9, 9): [9, 9], (8, 8): [8, 8], (2, 2): [2, 2], (3, 3): [3, 3]}</p>
<p>You can see how only the top 8 values are stored here.</p>
<p>Major stuff taken from <a href="https://stackoverflow.com/questions/8875706/heapq-with-custom-compare-predicate">heapq with custom compare predicate</a>. </p>
<p>What we do is create our custom heap class which takes a key parameter where we specify on what value to sort.</p>
<p>The next is whenever this size is greater than 8 we pop the minimum item. This ensures we always have only the max 8 values.</p>
</div>
<div class="post-text" itemprop="text">
<p>If your data will not fit in memory, you need to be particularly mindful of how it's stored. Is it in a database, a flat file, a csv file, JSON, or what?</p>
<p>If it is in a "rectangular" file format, you might do well to simply use a standard *nix sorting utility, and then just read in the first <code>k</code> lines.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a customized OrderedDict which keeps the N largest keys for you :</p>
<pre><code>from collections import OrderedDict
from operator import itemgetter


class LimitedSizeOrderedDict(OrderedDict):
    def __init__(self, *args, **kwds):
        self.maxlen = kwds.pop("maxlen", None)
        if args:
            try:
                top_n = sorted(*args, key=itemgetter(0, 0))[-self.maxlen:]
                self.min_key = top_n[0][0]
            except TypeError:
                raise Exception("keys should be in tuple format")
        else:
            self.min_key = (float("inf"), 0)
        super(LimitedSizeOrderedDict, self).__init__(top_n, **kwds)

    def __setitem__(self, key, value):
        if self._check_size():
            OrderedDict.__setitem__(self, key, value)
            if key[0] &lt; self.min_key[0]:
                self.min_key = key
        elif key[0] &gt; self.min_key[0]:
            self.pop(self.min_key)
            OrderedDict.__setitem__(self, key, value)
            self.min_key = min(self, key=itemgetter(0))

    def _check_size(self):
        if self.maxlen is not None:
            if len(self) &lt; self.maxlen:
                return True
            return False
        return True
</code></pre>
<p>Demo:</p>
<pre><code>In [2]: a = LimitedSizeOrderedDict([((7,2),3), ((2, 5), 3), ((6, 0), 1)], maxlen= 2)

In [3]: a
Out[3]: LimitedSizeOrderedDict([((6, 0), 1), ((7, 2), 3)])

In [4]: a[(12, 5)] = 10

In [5]: a
Out[5]: LimitedSizeOrderedDict([((7, 2), 3), ((12, 5), 10)])

In [6]: a[(10, 5)] = 9

In [7]: a
Out[7]: LimitedSizeOrderedDict([((12, 5), 10), ((10, 5), 9)])

In [8]: a[(0, 5)] = 9

In [9]: a
Out[9]: LimitedSizeOrderedDict([((12, 5), 10), ((10, 5), 9)])
</code></pre>
</div>
<span class="comment-copy">How did you create this dictionary? you want to do this at creating time or after creating the dictionary?</span>
<span class="comment-copy">if you do not object to using <code>numpy</code> it has <code>partition</code> and <code>argpartition</code> which can find the top or bottom k in O(n).</span>
<span class="comment-copy">Sorry, I should explain that I cannot keep my dictionary in memory.</span>
<span class="comment-copy">You'd just need the keys and arrays are more memory efficient than dicts.</span>
<span class="comment-copy">@Kasramvd: I would like to do this at creating time.</span>
<span class="comment-copy">Why not just use <a href="https://docs.python.org/3/library/heapq.html#heapq.nlargest" rel="nofollow noreferrer"><code>heapq.nlargest</code></a> with <code>key=...</code>?</span>
<span class="comment-copy">No we only keep 8 values as that was the requirement.. Next he also wanted a dictionary to be returned. That's why the make_dict function..</span>
<span class="comment-copy">But yea what you've said is right as well</span>
<span class="comment-copy">We would need an Ordereddict in that case then..</span>
<span class="comment-copy">Not just that he can't store all of the keys in memory as well.. That's why just the top 8.. He's mentioned that somewhere in the comments I guess..</span>
<span class="comment-copy">Does <code>top_n = sorted(args, itemgetter(0))[:self.maxlen]</code> mean I have to read in all my data?</span>
<span class="comment-copy">@Black No, it will return the top N items at the initialization time if you've passed any item to your dictionary at creation time.</span>
<span class="comment-copy">@Black Checkout the update for a more comprehensive answer.</span>
