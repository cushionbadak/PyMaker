<div class="post-text" itemprop="text">
<p>With code:</p>
<pre><code>from lxml import html
import requests

tree = html.fromstring(requests.get('http://selectshop.pl/deskorolka-blaty-decki,40/1').content)
print [elem.encode('utf8').replace(',','.') for elem in    tree.xpath('//span[@class="price"]/text()')]
</code></pre>
<p>I'm getting list of strings like <code>'189.00 z\xc5\x82'</code>. 
I would like to remove <code>z\xc5\x82</code> part from every element of list. I can use <code>.strip(' z\xc5\x82')</code> but I rather would like to remove everything starting from first character (from left) that is not in list <code>['0','1','2','3','4','5','6','7','8','9','.']</code>
because string to remove may differ in some cases. How to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/stdtypes#str.isdigit" rel="nofollow noreferrer"><code>str.isdigit</code></a> with <a href="https://docs.python.org/3/tutorial/classes.html#generator-expressions" rel="nofollow noreferrer">generator expression</a> to filter only digits and dots, then <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join</code></a> to join filtered characters back to a string:</p>
<pre><code>&gt;&gt;&gt; ''.join(c for c in '189.00 z\xc5\x82' if c.isdigit() or c == '.')
'189.00'
</code></pre>
<hr/>
<pre><code>&gt;&gt;&gt; allowed_chars = set(['0','1','2','3','4','5','6','7','8','9','.'])
# OR   allowed_chars = set('0123456789.')
&gt;&gt;&gt; ''.join(c for c in '189.00 z\xc5\x82' if c in allowed_chars)
'189.00'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3.6/library/re.html" rel="nofollow noreferrer">regex</a> for that, something like:</p>
<pre><code>import re

s = "189.00 z\xc5\x82"
s = re.sub(r"[^\d.]", "", s)

print(s) # prints "189.00"
</code></pre>
<p>Thus you need to change this part:</p>
<pre><code>elem.encode('utf8').replace(',','.')
</code></pre>
<p>Into:</p>
<pre><code>re.sub(r"[^\d.]", "", elem.encode('utf8').replace(',','.'))
</code></pre>
</div>
<span class="comment-copy">How might the string differ in some cases? I had a look at the website and didn't see any exceptions.</span>
<span class="comment-copy">How can I incorporate this method into my line <code>print [elem.encode('utf8').replace(',','.') for elem in    tree.xpath('//span[@class="price"]/text()')]</code> to get a list of modified strings?</span>
<span class="comment-copy">@MichałRzepecki, Define a function: <code>def strip_non_number(s): return ''.join(c for c in s if c.isdigit() or c == '.')</code>, then call it inside the list comprehension: <code>print [strip_non_number(elem.encode('utf8').replace(',','.')) for elem in tree.xpath('//span[@class="price"]/text()')] </code></span>
<span class="comment-copy">Or define a function using the 2nd solution: <code>def strip_non_number(s, allowed_chars = set('0123456789.')): return ''.join(c for c in s if c in allowed_chars)</code></span>
<span class="comment-copy">it works for me</span>
<span class="comment-copy">You don't need to escape <code>.</code> inside <code>[....]</code> because special characters lose it's meaning inside <code>[...]</code>. (except <code>-</code>, <code>^</code>, ...)</span>
<span class="comment-copy">@falsetru Ahh, you're right. It's a habit of mine to always do so.</span>
<span class="comment-copy">Also <code>s = "189.00 z\\xc5\\x82"</code> should be <code>s = "189.00 z\xc5\x82"</code>. Otherwise, if you run the code in the answer,  <code>189.00582</code> will be printed.</span>
<span class="comment-copy">How can I incorporate this method into my line <code>print [elem.encode('utf8').replace(',','.') for elem in    tree.xpath('//span[@class="price"]/text()')]</code> to get a list of modified strings?</span>
<span class="comment-copy">@MichałRzepecki, <code>print [re.sub(r'[^\d.], '', elem.encode('utf8').replace(',','.')) for elem in tree.xpath('//span[@class="price"]/text()')]</code></span>
