<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/35315873/python-3-travel-directory-tree-with-limited-recursion-depth">Python 3 - travel directory tree with limited recursion depth</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I want to build a program that uses some basic code to read through a folder and tell me how many files are in the folder.
Here is how I do that currently: </p>
<pre><code>import os

folders = ['Y:\\path1', 'Y:\\path2', 'Y:\\path3']
for stuff in folders:
    for root, dirs, files in os.walk(stuff, topdown=True):
        print("there are", len(files), "files in", root)
</code></pre>
<p>This works great until there are multiple folders inside the "main" folder as it can return a long, junky list of files due to poor folder/file management. So I would like to go only to the second level at most. example:</p>
<pre><code>Main Folder
---file_i_want
---file_i_want
---Sub_Folder
------file_i_want &lt;--*
------file_i want &lt;--*
------Sub_Folder_2
---------file_i_dont_want
---------file_i_dont_want
</code></pre>
<p>I know how to go to only the first level with a <code>break</code> and with <code>del dirs[:]</code> taken from <a href="https://stackoverflow.com/questions/4117588/non-recursive-os-walk">this post</a> and <a href="https://stackoverflow.com/questions/229186/os-walk-without-digging-into-directories-below">also this post</a>. </p>
<pre><code>import os
import pandas as pd

folders = ['Y:\\path1', 'Y:\\path2', 'Y:\\path3']
for stuff in folders:
    for root, dirs, files in os.walk(stuff, topdown=True):
        print("there are", len(files), "files in", root)
        del dirs[:] # or a break here. does the same thing.
</code></pre>
<p>But no matter my searching I can't find out how to go two layers deep. I may just not be understanding the other posts on it or something? I was thinking something like <code>del dirs[:2]</code> but to no avail. Can someone guide me or explain to mehow to accomplish this?</p>
</div>
<div class="post-text" itemprop="text">
<p>you could do like this:</p>
<pre><code>for root,dirs,files in os.walk(stuff):
    if root[len(stuff)+1:].count(os.sep)&lt;2:
        for f in files:
            print(os.path.join(root,f))
</code></pre>
<p>key is: <code>if root[len(stuff)+1:].count(os.sep)&lt;2</code></p>
<p>It removes <code>stuff</code>+separator from <code>root</code>, so result is relative to <code>stuff</code>. Just count the number of files separators, and don't enter the condition unless you get 0 or 1 separators.</p>
<p>Of course, it still scans the full file structure, but unless it's very deep that'll work.</p>
<p>Another solution would be to only use <code>os.listdir</code> recursively (with directory check) with a maximum recursion level, but that's a little trickier if you don't need it. Since it's not that hard, here's one implementation:</p>
<pre><code>def scanrec(root):
    rval = []

    def do_scan(start_dir,output,depth=0):
        for f in os.listdir(start_dir):
            ff = os.path.join(start_dir,f)
            if os.path.isdir(ff):
                if depth&lt;2:
                    do_scan(ff,output,depth+1)
            else:
                output.append(ff)

    do_scan(root,rval,0)
    return rval

print(scanrec(stuff))  # prints the list of files not below 2 deep
</code></pre>
<p>Note: <code>os.listdir</code> and <code>os.path.isfile</code> perform 2 <code>stat</code> calls so not optimal. In Python 3.5, the use of <code>os.scandir</code> could avoid that double call.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can count the separators and if it's two levels deep delete the content of <code>dirs</code> so <code>walk</code> doesn't recurse deeper:</p>
<pre><code>import os

MAX_DEPTH = 2
folders = ['Y:\\path1', 'Y:\\path2', 'Y:\\path3']
for stuff in folders:
    for root, dirs, files in os.walk(stuff, topdown=True):
        print("there are", len(files), "files in", root)
        if root.count(os.sep) - stuff.count(os.sep) == MAX_DEPTH - 1:
            del dirs[:]
</code></pre>
<p><a href="https://docs.python.org/3/library/os.html#os.walk" rel="nofollow noreferrer">Python documentation</a> states following about the behavior:</p>
<blockquote>
<p>When topdown is True, the caller can modify the dirnames list in-place (perhaps using del or slice assignment), and walk() will only recurse into the subdirectories whose names remain in dirnames; this can be used to prune the search, impose a specific order of visiting, or even to inform walk() about directories the caller creates or renames before it resumes walk() again.</p>
</blockquote>
<p>Note that you need to take into account the the separators present in the <code>folders</code>. For example when <code>y:\path1</code> is walked root is <code>y:\path</code> but you don't want to stop recursion there.</p>
</div>
<span class="comment-copy"><code>dirs</code> is all the directories in the current directory, it's not the depth of the folder tree.</span>
<span class="comment-copy">@PeterWood, ah! that makes sense. So now i understand why <code>del dirs[:2]</code> is silly...</span>
<span class="comment-copy">It looks like you're using Python 3. Is that correct?</span>
<span class="comment-copy">@PM2Ring, that is correct.</span>
<span class="comment-copy">Note that the codes in the accepted answer of the linked question are suitable for Python 2 as well, despite the question's title. For Python 3 use, they can be cleaned up a little by using <code>yield from</code> instead of those <code>yield</code> statements in the <code>for</code> loops.</span>
<span class="comment-copy">This is what I wanted. and I really appreciate the "Key is" statement. if you could kindly explain or point me to some documentation on how you came to this answer? Im stuck on why the brackets in <code>root[len(stuff...]</code> and what <code>.count(os.sep)</code> does. Thank you very much.</span>
<span class="comment-copy">Why not <code>break</code> when <code>root[len(stuff) + 1:].count(os.sep) &gt;= 2</code>? When going top down, when that is true, it will be true for all other values of <code>root</code>.</span>
<span class="comment-copy">@DavidCullen good point. Didn't think about that. actually it doesn't work, it seems to only apply for directories.</span>
<span class="comment-copy">@MattR: I perform slicing on the string to remove the first chars (corresponding to the length of <code>stuff</code> in <code>root</code>, then I count the slashes/backslashes (os dependent: <code>os.sep</code>) on the relative path computed that way.</span>
<span class="comment-copy">@DavidCullen Thats not true, in the following setup: <code>x { a {1, 2}, b {1, 2} }</code>, the elements order would be: <code>x</code>, <code>x\a</code>, <code>x\a\1</code>, <code>x\a\2</code>, <code>x\b</code>, <code>x\b\1</code>, <code>x\b\2</code> so breaking when finding the first <code>&gt;2</code> would mean <code>x\b</code> would not be iterated over.</span>
<span class="comment-copy">Thank you for pointing me toward the documentation! is it correct that <code>root.count(os.sep)</code> is counting the <code>\\</code> in the root?</span>
<span class="comment-copy">@MattR: Yes, it's counting \ (or whatever is the os specific separator) in the root from where we need to subtract the separators present in the initial folder.</span>
