<div class="post-text" itemprop="text">
<p>Given a list:</p>
<pre><code>source = [{'A':123},{'B':234},{'C':345}]
</code></pre>
<p>I need a dict from this list in the format:</p>
<pre><code>newDict  = {'A':123,'B':234,'C':345}
</code></pre>
<p>What is the syntactically cleanest way to accomplish this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a dict-comprehension:</p>
<pre><code>&gt;&gt;&gt; l = [{'A':123},{'B':234},{'C':345}]
&gt;&gt;&gt; d = {k: v for dct in l for k, v in dct.items()}
&gt;&gt;&gt; d
{'A': 123, 'B': 234, 'C': 345}
</code></pre>
<p>However it's probably opinion-based if that's the "syntactically cleanest way" but I like it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's an additional approach, provided here to give you a flavor for how Python implements the functional programming technique called <a href="https://en.wikipedia.org/wiki/Fold_(higher-order_function)" rel="nofollow noreferrer">reduction</a>, via the <code>reduce()</code> function.  In Python 3, <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>reduce()</code> is in the functools package</a>.  In Python 2, <a href="https://docs.python.org/2/library/functions.html#reduce" rel="nofollow noreferrer"><code>reduce()</code> is a built-in function</a>.  I use Python 3 in the example below:</p>
<pre><code>from functools import reduce    # don't import if you are using Python 2

def updater(dict_orig, dict_add):
    dict_orig.update(dict_add)
    return dict_orig

new_dict = reduce(updater, l, dict())
</code></pre>
<p>The first argument to <code>reduce()</code> is the function to operate on the iterable, the second is the iterable itself (your list <code>l</code>), and the third is the optional initializer object to put at the beginning of the <code>list</code> to reduce.  </p>
<p>Each step of the reduction requires an object to be operated on: namely, the result of the previous step. But <a href="https://docs.python.org/3/library/stdtypes.html#dict.update" rel="nofollow noreferrer"><code>dict.update()</code></a> does not return anything, so we need the <code>updater()</code> function above, which performs the update and then returns the <code>dict</code> being updated, thus providing the required object for the next step.  Were it not for <code>dict.update()</code> not having a return value, this would all be a one-liner. </p>
<p>Because <code>dict.update()</code> operates directly on the original <code>dict</code>, we need that optional empty <code>dict()</code> initializer object to start out the reduction - without it, the first <code>dict</code> in your original <code>l</code> list would be modified. </p>
<p>For all these reasons, I like @MSeifert's dict-comprehension approach much better, but I posted this anyway just to illustrate Python reduction for you.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you use it often, you might want to define a <code>merge</code> function, which you can then pass to <code>reduce</code> :</p>
<pre><code>from functools import reduce # Needed for Python3
source = [{'A':123},{'B':234},{'C':345}]

def merge(a,b):
    d = a.copy()
    d.update(b)
    return d

print(reduce(merge, source))
#=&gt; {'A': 123, 'C': 345, 'B': 234}
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/4576115/convert-a-list-to-a-dictionary-in-python">Convert a list to a dictionary in Python</a></span>
<span class="comment-copy">Certainly not the most "syntactically clean" way, but somewhat fun: <code>reduce(lambda d, cur: d.update(cur) or d, source, {})</code></span>
<span class="comment-copy">What if you have a list <code>[{'A': 123}, {'A': 456}]</code>? Should the result be <code>{'A': 123}</code> or <code>{'A': 456}</code>?</span>
<span class="comment-copy">if source = [{'A':123},{'B':234},{'C':345},{'A':123}]  Then we have issues. Forming dict duplicate keys not possible. Complete data cannot be analyzed in that case</span>
<span class="comment-copy">I'd rename the question along the lines of "merging a list of dict entries into one dict"</span>
