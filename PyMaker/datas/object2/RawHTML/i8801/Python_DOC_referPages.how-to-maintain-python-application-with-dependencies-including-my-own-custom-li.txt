<div class="post-text" itemprop="text">
<p>I'm using Python to develop few company-specific applications. There is a custom shared module ("library") that describes some data and algorithms and there are dozens of Python scripts that work with this library. There's quite a lot of these files, so they are organized in subfolders</p>
<pre><code>myproject
    apps
        main_apps
            app1.py
            app2.py
            ...
        utils
            util1.py
            util2.py
            ...
    library
        __init__.py
        submodule1
            __init__.py
            file1.py
            ...
        submodule2
            ...
</code></pre>
<p>Users want to run these scripts by simply going, say, to myproject\utils and launching "py util2.py some_params". Many of these users are developers, so quite often they want to edit a library and immediately re-run scripts with updated code. There are also some 3rd party libraries used by this project and I want to make sure that everyone is using the same versions of these libs. </p>
<p>Now, there are two key problems I encountered:</p>
<ol><li>how to reference (library) from (apps)?</li>
<li>how to manage 3rd party dependencies?</li></ol>
<p>The first problem is well-familiar to many Python developers and was asked on SO for many times: it's quite difficult to instruct Python to import package from "....\library". I tested several different approaches, but it seems that python is reluctant to search for packages anywhere, but in standard libraries locations or the folder of the script itself.</p>
<ul><li>Relative import doesn't work since script is not a part of a library (and even if it was, this still doesn't work when script is executed directly unless it's placed in the "root" project folder which I'd like to avoid)</li>
<li>Placing .pth file (as one might think from reading <a href="https://docs.python.org/3/library/site.html" rel="nofollow noreferrer">this document</a>) to script folder apparently doesn't have any effect</li></ul>
<p>Of course direct meddling with sys.path work, but boilerplate code like this one in each and every one of the script files looks quite terrible</p>
<pre><code>import sys, os.path
here = os.path.dirname(os.path.realpath(__file__))
module_root = os.path.abspath(os.path.join(here, '../..'))
sys.path.append(python_root)
import my_library
</code></pre>
<p>I realize that this happens because Python wants my library to be properly "installed" and that's indeed would be the only right way to go had this library was developed separately from the scripts that use it. But unfortunately it's not the case and I think that re-doing "installation" of library each time it's changed is going to be quite inconvenient and prone to errors. </p>
<p>The second problem is straightforward. Someone adds a new 3rd party module to our app/lib and everyone else start seeing import problems once they update their apps. Several branches of development, different moments when user does pip install, few rollbacks - and everyone eventually ends using different versions of 3rd party modules. In my case things are additionally complicated by the fact that many devs work a lot with older Python 2.x code while I'd like to move on to Python 3.x</p>
<p>While looking for a possible solution for my problems, I found a truly excellent virtual environments feature in Python. Things looked quite bright:</p>
<ol><li>Create a venv for myproject</li>
<li>Distribute a Requirements.txt file as part of app and provide a script that populates venv accordingly</li>
<li>Symlink my own library to venv site_packages folder so it'll be always detected by Python</li></ol>
<p>This solution looked quite natural &amp; robust. I'm explicitly setting my own environment for my project and place whatever I need into this venv, including my own lib that I can still edit on the fly. And it indeed work. But calling <i>activate.bat</i> to make this python environment active and another batch file to deactivate it is a mess, especially on Windows platform. Boilerplate code that is editing sys.path looks terrible, but at least it doesn't interfere with UX like this potential fix do.</p>
<p>So there's a question that I want to ask. </p>
<ol><li>Is there a way to bind particular python venv to particular folders so python launcher will automatically use this venv for scripts from these folders?</li>
<li>Is there a better alternative way to handle this situation that I'm missing?</li></ol>
<p>Environment for my project is Python 3.6 running on Windows 10.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think that I finally found a reasonable answer. It's enough to just add shebang line pointing to python interpreter in venv, e.g.</p>
<pre><code>#!../../venv/Scripts/python
</code></pre>
<p>The full project structure will look like this</p>
<pre><code>myproject
    apps
        main_apps
            app1.py (with shebang)
            app2.py (with shebang)
            ...
        utils
            util1.py (with shebang)
            util2.py (with shebang)
            ...
    library
        __init__.py
        submodule1
            __init__.py
            file1.py
            ...
        submodule2
            ...
    venv
        (python interpreter, 3rd party modules)
        (symlink to library)
    requirements.txt
    init_environment.bat
</code></pre>
<p>and things work like this:</p>
<ol><li>venv is a virtual python environment with everything that project needs</li>
<li>init_environment.bat is a script that populates venv according to requirements.txt and places a symlink to my library into venv site-modules</li>
<li>all scripts start with shebang line pointing (with relative path) to venv interpreter</li></ol>
<p>There's a full custom environment with all the libs including my own and scripts that use it will all have very natural imports. Python launcher will also automatically pick Python 3.6 as interpreter &amp; load the relevant modules whenever any user-facing script in my project is launched from console or windows explorer. </p>
<p>Cons: </p>
<ol><li>Relative shebang won't work if a script is called from other folder</li>
<li> User will still have to manually run <b>init_environment.bat</b> to update virtual environment according to requirements.txt</li>
<li>init_environment scrip on Windows require elevated privileges to make a symlink (but hopefully that strange MS decision will be fixed with upcoming Win10 update in April'17)</li></ol>
<p>However I can live with these limitations. Hope that this will help others looking for similar problems.</p>
<p>Would be still nice to still hear other options (as answers) and critics (as comments) too.</p>
</div>
<span class="comment-copy">Are you using <code>setuptools.py</code> to "install"? If so, you can use the <code>develop</code> command line argument instead of <code>install</code>, see the discussion <a href="http://stackoverflow.com/questions/19048732/python-setup-py-develop-vs-install">here</a>. This allows you to work on your library and see the changes you make instantly.</span>
<span class="comment-copy">Unfortunately, as far as I know, the sort of tooling that would be helpful to you isn't really as available on Windows. For example, you might try looking for the equivalent of <a href="https://github.com/kennethreitz/autoenv" rel="nofollow noreferrer"><code>autoenv</code></a></span>
<span class="comment-copy">Thank you! That's a great option that I totally missed. Right now in my project there's no "installation" process and scrips just look for a module via modified sys.path. I prefer to use PIP rather than setuptools.py, but it has a similar option (<code>pip install -e</code>) and that's a much better way to initialize environment (virtual or not) with my custom lib versus symlink option. This way it's also probably would be OK in many cases to live without any virtual environment at all (although I prefer to keep one for easier control of dependencies)</span>
<span class="comment-copy">Unfortunately something looks to be broken with <code>develop</code> option on Windows platform. Setup is apparently successful, a 'library.egg-link' file appears in venv's site-packages, but Python fails to resolve it (see similar issue <a href="http://stackoverflow.com/questions/10569846/pip-installs-but-module-is-not-found" title="pip installs but module is not found">stackoverflow.com/questions/10569846/â€¦</a>). On the other hands manually created symlink at the same location just works.</span>
<span class="comment-copy">That is unfortunate. Like I said, my impression is that a lot of the tooling wasn't developed with Windows as a focus, but an afterthought.</span>
