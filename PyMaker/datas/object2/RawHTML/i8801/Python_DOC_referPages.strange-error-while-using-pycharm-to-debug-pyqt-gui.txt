<div class="post-text" itemprop="text">
<p>I've been using PyCharm to debug my gui in PyQt. This has been really successful thus far, until I've run into a strange error in trying to debug my gui just now. I've set a breakpoint at the beginning of the script as well as at various points but the program does not have a chance to get to this point. I've also tried removing all the breakpoints and running the debug but get the same result. The full traceback is:</p>
<pre><code>C:\Users\pbreach\Continuum\Anaconda3\python.exe "C:\Program Files (x86)\JetBrains\PyCharm Community Edition 2016.3\helpers\pydev\pydevd.py" --multiproc --qt-support --client 127.0.0.1 --port 53720 --file C:/Users/pbreach/Dropbox/FIDS/cci/bluebook/code/input.py
Traceback (most recent call last):
  File "C:\Program Files (x86)\JetBrains\PyCharm Community Edition 2016.3\helpers\pydev\_pydevd_bundle\pydevd_cython_wrapper.py", line 2, in &lt;module&gt;
    from _pydevd_bundle.pydevd_cython import trace_dispatch, PyDBAdditionalThreadInfo
ModuleNotFoundError: No module named '_pydevd_bundle.pydevd_cython'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Program Files (x86)\JetBrains\PyCharm Community Edition 2016.3\helpers\pydev\pydevconsole.py", line 8, in &lt;module&gt;
    from code import InteractiveConsole
ImportError: cannot import name 'InteractiveConsole'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Program Files (x86)\JetBrains\PyCharm Community Edition 2016.3\helpers\pydev\pydevd.py", line 26, in &lt;module&gt;
    from _pydevd_bundle.pydevd_additional_thread_info import PyDBAdditionalThreadInfo
  File "C:\Program Files (x86)\JetBrains\PyCharm Community Edition 2016.3\helpers\pydev\_pydevd_bundle\pydevd_additional_thread_info.py", line 17, in &lt;module&gt;
    from _pydevd_bundle.pydevd_cython_wrapper import PyDBAdditionalThreadInfo
  File "C:\Program Files (x86)\JetBrains\PyCharm Community Edition 2016.3\helpers\pydev\_pydevd_bundle\pydevd_cython_wrapper.py", line 26, in &lt;module&gt;
    mod = __import__(check_name)
  File "_pydevd_bundle\pydevd_cython_win32_36_64.pyx", line 9, in init _pydevd_bundle.pydevd_cython_win32_36_64 (_pydevd_bundle/pydevd_cython_win32_36_64.c:21388)
  File "C:\Program Files (x86)\JetBrains\PyCharm Community Edition 2016.3\helpers\pydev\_pydevd_bundle\pydevd_frame.py", line 10, in &lt;module&gt;
    from _pydevd_bundle.pydevd_breakpoints import get_exception_breakpoint
  File "C:\Program Files (x86)\JetBrains\PyCharm Community Edition 2016.3\helpers\pydev\_pydevd_bundle\pydevd_breakpoints.py", line 15, in &lt;module&gt;
    from _pydevd_bundle.pydevd_comm import get_global_debugger
  File "C:\Program Files (x86)\JetBrains\PyCharm Community Edition 2016.3\helpers\pydev\_pydevd_bundle\pydevd_comm.py", line 75, in &lt;module&gt;
    import pydevconsole
  File "C:\Program Files (x86)\JetBrains\PyCharm Community Edition 2016.3\helpers\pydev\pydevconsole.py", line 10, in &lt;module&gt;
    from _pydevd_bundle.pydevconsole_code_for_ironpython import InteractiveConsole
  File "C:\Program Files (x86)\JetBrains\PyCharm Community Edition 2016.3\helpers\pydev\_pydevd_bundle\pydevconsole_code_for_ironpython.py", line 105
    except SyntaxError, err:
                      ^
SyntaxError: invalid syntax

Process finished with exit code 1
</code></pre>
<p>Does anyone know what is causing this error and how it can be resolved? When I run the code normally (without debugging) I do not run into any of these errors.</p>
</div>
<div class="post-text" itemprop="text">
<p>I ran into the same issue, and it took me a while but I found a solution that works for me.  I believe what happens, is that the debugger is looking for the module <code>_pydevd_bundle.pydevd_cython</code> in a directory <code>code</code>.  However, because you are running the script out of your own <code>code</code> directory, the debugger checks your folder, sees their is no module, and throws the error.  That would explain why deleting the <code>__init__.py</code> works, because the debugger won't confuse the two directories anymore.</p>
<p>So, renaming your code directory to something else, should fix the issue and let you keep the init file.</p>
</div>
<div class="post-text" itemprop="text">
<p>You seem to be running Python 3 that does not recognize legacy Python 2 syntax.</p>
<p>Make sure you selected the right interpreter for your project.</p>
<p>I wonder why IronPython-oriented classes are even imported when you run Anaconda which is CPython.</p>
</div>
<div class="post-text" itemprop="text">
<p>I've recently hit this issue (while working on <a href="https://stackoverflow.com/questions/54532010/zipfile-badzipfile-bad-crc-32-when-extracting-a-password-protected-zip-zip/55063500#55063500">[SO]: zipfile.BadZipFile: Bad CRC-32 when extracting a password protected .zip &amp; .zip goes corrupt on extract (@CristiFati's answer)</a>). As a note, I name my code snippets <em>code.py</em>, unless otherwise constrained.</p>
<h2><em>Python</em></h2>
<p>According to <a href="https://docs.python.org/3/tutorial/modules.html#the-module-search-path" rel="nofollow noreferrer">[Python 3]: The Module Search Path</a> (<strong>emphasis</strong> is mine):</p>
<blockquote>
<p>When a module named <em>spam</em> is imported, the interpreter first searches for a built-in module with that name. If not found, it then searches for a file named <code>spam.py</code> in a list of directories given by the variable <a href="https://docs.python.org/3/library/sys.html#sys.path" rel="nofollow noreferrer">sys.path</a>. <a href="https://docs.python.org/3/library/sys.html#sys.path" rel="nofollow noreferrer">sys.path</a> is initialized from these locations:</p>
<ul>
<li><strong>The directory containing the input script (or the current directory when no file is specified)</strong>.</li>
<li><a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH" rel="nofollow noreferrer">PYTHONPATH</a> (a list of directory names, with the same syntax as the shell variable <em>PATH</em>).</li>
<li>The installation-dependent default.</li>
</ul>
</blockquote>
<p>Little demo:</p>
<blockquote>
<pre class="lang-bat prettyprint-override"><code>[cfati@CFATI-5510-0:e:\Work\Dev\StackOverflow\q042705279]&gt; set py
PYTHONPATH=E:\Work\Dev\Utils

[cfati@CFATI-5510-0:e:\Work\Dev\StackOverflow\q042705279]&gt; dir /b

[cfati@CFATI-5510-0:e:\Work\Dev\StackOverflow\q042705279]&gt; "e:\Work\Dev\VEnvs\py_064_03.06.08_test0\Scripts\python.exe"  -c "import code;print(code)"
&lt;module 'code' from 'c:\\Install\\x64\\Python\\Python\\03.06.08\\Lib\\code.py'&gt;

[cfati@CFATI-5510-0:e:\Work\Dev\StackOverflow\q042705279]&gt; echo. 2&gt;code.py


[cfati@CFATI-5510-0:e:\Work\Dev\StackOverflow\q042705279]&gt; dir /b
code.py

[cfati@CFATI-5510-0:e:\Work\Dev\StackOverflow\q042705279]&gt; "e:\Work\Dev\VEnvs\py_064_03.06.08_test0\Scripts\python.exe"  -c "import code;print(code)"
&lt;module 'code' from 'e:\\Work\\Dev\\StackOverflow\\q042705279\\code.py'&gt;
</code></pre>
</blockquote>
<p>As seen (under normal circumstances), if the module <strong><em>code</em></strong> (applies to packages as well) is found in <em>cwd</em>, it's loaded from there. <br/>The <em>code</em> module (<em>code.py</em>) is not randomly chosen (read the next section). Check <a href="https://docs.python.org/3/library/code.html" rel="nofollow noreferrer">[Python 3]: code - Interpreter base classes</a> for details about one part of the standard <em>Python</em> library.</p>
<h2><em>PyCharm</em></h2>
<p>When <strong>running</strong> a <em>PyCharm</em> configuration, <em>PyCharm</em> (simplified) launches project interpreter on the configured script. This works. In my case it's:</p>
<pre class="lang-bat prettyprint-override"><code>"E:\Work\Dev\VEnvs\py_064_03.06.08_test0\Scripts\python.exe" "E:/Work/Dev/StackOverflow/q042705279/code.py"
</code></pre>
<p>However when <strong>debugging</strong> the same configuration, things are a bit more complicated. The simplified version:</p>
<ul>
<li>A server is created (by <em>pydevd</em>) that executes the target script</li>
<li><em>PyCharm</em> <em>IDE</em> connects to that server in order to get output</li>
</ul>
<p>Again, in my case it's:</p>
<pre class="lang-bat prettyprint-override"><code>"E:\Work\Dev\VEnvs\py_064_03.06.08_test0\Scripts\python.exe" "C:\Install\x64\JetBrains\PyCharm Community Edition\AllVers\helpers\pydev\pydevd.py" --multiproc --qt-support=auto --client 127.0.0.1 --port 45931 --file "E:/Work/Dev/StackOverflow/q042705279/code.py"
</code></pre>
<p>The <strong>key point</strong> is somewhere at the beginning of <strong><em>pydevconsole.py</em></strong> (which is mentioned in the exception traceback):</p>
<pre class="lang-py prettyprint-override"><code>try:
    from code import InteractiveConsole
except ImportError:
    from _pydevd_bundle.pydevconsole_code_for_ironpython import InteractiveConsole
</code></pre>
<p>So, it tries to load the <em>InteractiveConsole</em>, which (obviously) fails. <br/>Apparently, the <em>code</em> module is specific to <strong><em>C</em></strong>Python</p></div>
<span class="comment-copy">Amazing that you figured that out! I went through the source but could not figure that out. Thanks!</span>
<span class="comment-copy">this works. In my case it was a file, code.py, probably created by jupyter/ipython notebook plugin</span>
<span class="comment-copy">Wonderful answer.</span>
<span class="comment-copy">Brilliant .. In fact my file name was <code>code</code> and got the same issue.</span>
<span class="comment-copy">Right, with the <code>except SyntaxError, err:</code> I'm assuming. My interpreter is Python 3.6 located at <code>~/Continuum/Anaconda3/python.exe</code>. I haven't changed any of the imports since this has been working either. Strange.</span>
<span class="comment-copy">Stranger yet, I deleted <code>__init__.py</code> in the directory that contained the script I was running and it worked.</span>
<span class="comment-copy">Deleting <code>__init__.py</code> makes this a plain directory and not a module. It may have something to do with what is imported and how. Still looks mysterious.</span>
<span class="comment-copy">Other than site-packages imports I'm importing 3 different functions from 3 modules in the same directory with the same name as the module ie. <code>from mod import mod</code>. The introspection says, <code>"Unresolved reference 'mod'"</code>. Changing to a relative import: <code>from .mod import mod</code> the introspection says everything is fine but then I get <a href="http://stackoverflow.com/questions/42575433/modulenotfounderror-no-module-named-main-models-main-is-not-a-pack">this</a>. Maybe related?</span>
