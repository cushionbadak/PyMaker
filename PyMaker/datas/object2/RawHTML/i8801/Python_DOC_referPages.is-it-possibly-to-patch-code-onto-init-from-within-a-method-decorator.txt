<div class="post-text" itemprop="text">
<p>I want to create a property decorator that computes the property value once upon object initialization, rather than every time the property is accessed. For example:</p>
<pre><code>class Foo:

  def __init__(self, value):
    self.value = value

  @cached_property  # How to implement this decorator?
  def foo(self):
    return self.value * some_heavy_computation()
</code></pre>
<p>I'd like this be equivalent to:</p>
<pre><code>class Foo:

  def __init__(self, value):
    self.value = value
    self._foo = self.value * some_heavy_computation()

  @property
  def foo(self):
    return self._foo
</code></pre>
<p>Is it possible to somehow add code to <code>__init__()</code> from within the method decorator?</p>
</div>
<div class="post-text" itemprop="text">
<p>We need to sub class <code>property</code> so that we can later find all the cached properties of the object and initialize them after <code>__init__</code>:</p>
<pre><code>class CachedProperty(property):

  pass
</code></pre>
<p>The actual decorator evaluates the method body when called for the first time, and remembers the result for later accesses:</p>
<pre><code>import functools

def cached_property(method):
  attribute = '_cached_' + method.__name__

  @CachedProperty
  @functools.wraps(method)
  def wrapper(self, *args, **kwargs):
    if not hasattr(self, attribute):
      setattr(self, attribute, method(self))
    return getattr(self, attribute)

  return wrapper
</code></pre>
<p>Now we can use a base class to access the cached properties after <code>__init__</code> so that the values will be available from the cache:</p>
<pre><code>class InitCachedProperties:

  def __init_subclass__(cls, **kwargs):
    super().__init_subclass__(**kwargs)
    orig_init = cls.__init__
    def init(self, *args, **kwargs):
      orig_init(self, *args, **kwargs)
      for prop in cls.__dict__.values():
        if isinstance(prop, CachedProperty):
          prop.__get__(self)
    cls.__init__ = init
</code></pre>
<p>To make the example from the question work, we need to let our class inherit from this property initializing base class:</p>
<pre><code>class Foo(InitCachedProperties):

    def __init__(self, value):
      self.value = value

    @cached_property
    def foo(self):
      return self.value + 21
</code></pre>
</div>
<span class="comment-copy">At the time a method decorator is evaluated, the class itself does not exist yet, so there's no way you could look up its <code>__init__</code> method to modify it, even if it had been defined already (which isn't something you could count on).  However, you could write a decorator that calls the wrapped function only the first time, saves the value in an instance variable, and afterwards just returns the cached value.</span>
<span class="comment-copy">Why do you think you need to add code to <code>__init__</code>? You should read up on the <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">descriptor protocol</a>.</span>
<span class="comment-copy">@jasonharper Couldn't I get <code>__init__</code> of the same <code>cls</code> and replace it with a patched <code>__init__</code>? Let's say I'm assuming <code>__init__</code> is always defined before the other methods.</span>
<span class="comment-copy">What class?  There is no class until the entire body of its definition (including all decorated methods) has completed execution.</span>
<span class="comment-copy">Your example does not explain why that would even be necessary; could you provide some more appropriate context? This seems like a <a href="http://xyproblem.info" rel="nofollow noreferrer">xyproblem.info</a></span>
