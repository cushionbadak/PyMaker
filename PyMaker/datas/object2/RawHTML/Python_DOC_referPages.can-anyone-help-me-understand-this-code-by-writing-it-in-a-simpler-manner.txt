<div class="post-text" itemprop="text">
<p>I have the following code:</p>
<pre><code>[x**2 for x in range(10)]
</code></pre>
<p>When I run it in the Python Shell, it returns:</p>
<pre><code>[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
</code></pre>
<p>I've searched and it seems this is called a <em>list comprehension</em>, but how does it work? </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="noreferrer">From <strong>the documentation</strong>:</a></p>
<blockquote>
<p>List comprehensions provide a concise way to create lists. Common applications are to make new lists where each element is the result of some operations applied to each member of another sequence or iterable, or to create a subsequence of those elements that satisfy a certain condition.</p>
</blockquote>
<hr/>
<p>About your question, the list comprehension does the same thing as the following "plain" Python code:</p>
<pre><code>&gt;&gt;&gt; l = [] 
&gt;&gt;&gt; for x in range(10):
...     l.append(x**2)
&gt;&gt;&gt; l
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
</code></pre>
<p>How do you write it in one line? Hmm...we can...probably...use <a href="https://docs.python.org/3/library/functions.html#map" rel="noreferrer"><code>map()</code></a> with <a href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions" rel="noreferrer"><code>lambda</code></a>:</p>
<pre><code>&gt;&gt;&gt; list(map(lambda x: x**2, range(10)))
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
</code></pre>
<p>But isn't it clearer and simpler to just use a list comprehension?</p>
<pre><code>&gt;&gt;&gt; [x**2 for x in range(10)]
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
</code></pre>
<hr/>
<p>Basically, we can do anything with <code>x</code>. Not only <code>x**2</code>. For example, run a method of <code>x</code>:</p>
<pre><code>&gt;&gt;&gt; [x.strip() for x in ('foo\n', 'bar\n', 'baz\n')]
['foo', 'bar', 'baz']
</code></pre>
<p>Or use <code>x</code> as another function's argument:</p>
<pre><code>&gt;&gt;&gt; [int(x) for x in ('1', '2', '3')]
[1, 2, 3]
</code></pre>
<p>We can also, for example, use <code>x</code> as the key of a <code>dict</code> object. Let's see:</p>
<pre><code>&gt;&gt;&gt; d = {'foo': '10', 'bar': '20', 'baz': '30'}
&gt;&gt;&gt; [d[x] for x in ['foo', 'baz']]
['10', '30']
</code></pre>
<p>How about a combination?  </p>
<pre><code>&gt;&gt;&gt; d = {'foo': '10', 'bar': '20', 'baz': '30'}
&gt;&gt;&gt; [int(d[x].rstrip('0')) for x in ['foo', 'baz']]
[1, 3]
</code></pre>
<p>And so on.</p>
<hr/>
<p>You can also use <code>if</code> or <code>if...else</code> in a list comprehension. For example, you only want odd numbers in <code>range(10)</code>. You can do:</p>
<pre><code>&gt;&gt;&gt; l = []
&gt;&gt;&gt; for x in range(10):
...     if x%2:
...         l.append(x)
&gt;&gt;&gt; l
[1, 3, 5, 7, 9]
</code></pre>
<p>Ah that's too complex. What about the following version?</p>
<pre><code>&gt;&gt;&gt; [x for x in range(10) if x%2]
[1, 3, 5, 7, 9]
</code></pre>
<p>To use an <code>if...else</code> ternary expression, you need put the <code>if ... else ...</code> after <code>x</code>, <strong>not</strong> after <code>range(10)</code>:</p>
<pre><code>&gt;&gt;&gt; [i if i%2 != 0 else None for i in range(10)]
[None, 1, None, 3, None, 5, None, 7, None, 9]
</code></pre>
<hr/>
<p>Have you heard about <a href="https://docs.python.org/3/tutorial/datastructures.html#nested-list-comprehensions" rel="noreferrer"><strong>nested list comprehension</strong></a>? You can put <em>two or more <code>for</code>s in one list comprehension</em>. For example:</p>
<pre><code>&gt;&gt;&gt; [i for x in [[1, 2, 3], [4, 5, 6]] for i in x]
[1, 2, 3, 4, 5, 6]

&gt;&gt;&gt; [j for x in [[[1, 2], [3]], [[4, 5], [6]]] for i in x for j in i]
[1, 2, 3, 4, 5, 6]
</code></pre>
<p>Let's talk about the first part, <code>for x in [[1, 2, 3], [4, 5, 6]]</code> which gives <code>[1, 2, 3]</code> and <code>[4, 5, 6]</code>. Then, <code>for i in x</code> gives <code>1</code>, <code>2</code>, <code>3</code> and <code>4</code>, <code>5</code>, <code>6</code>. </p>
<p><strong>Warning:</strong> You always need put <code>for x in [[1, 2, 3], [4, 5, 6]]</code> <strong>before</strong> <code>for i in x</code>:</p>
<pre><code>&gt;&gt;&gt; [j for j in x for x in [[1, 2, 3], [4, 5, 6]]]
Traceback (most recent call last):
  File "&lt;input&gt;", line 1, in &lt;module&gt;
NameError: name 'x' is not defined
</code></pre>
<hr/>
<p>We also have <em>set comprehensions</em>, <em>dict comprehensions</em>, and <em>generator expressions</em>.</p>
<p><strong>set comprehensions</strong> and list comprehensions are basically the same, but the former returns a <em>set</em> instead of a <em>list</em>:</p>
<pre><code>&gt;&gt;&gt; {x for x in [1, 1, 2, 3, 3, 1]}
{1, 2, 3}
</code></pre>
<p>It's the same as:</p>
<pre><code>&gt;&gt;&gt; set([i for i in [1, 1, 2, 3, 3, 1]])
{1, 2, 3}
</code></pre>
<p>A <a href="https://www.python.org/dev/peps/pep-0274/" rel="noreferrer"><strong>dict comprehension</strong></a> <em>looks like</em> a set comprehension, but it uses <code>{key: value for key, value in ...}</code> or <code>{i: i for i in ...}</code> instead of  <code>{i for i in ...}</code>.</p>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; {i: i**2 for i in range(5)}
{0: 0, 1: 1, 2: 4, 3: 9, 4: 16}
</code></pre>
<p>And it equals:</p>
<pre><code>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; for i in range(5):
...     d[i] = i**2
&gt;&gt;&gt; d
{0: 0, 1: 1, 2: 4, 3: 9, 4: 16}
</code></pre>
<p>Does <code>(i for i in range(5))</code> give a <em>tuple</em>? No!, it's a <a href="https://www.python.org/dev/peps/pep-0289/" rel="noreferrer"><strong>generator expression</strong></a>. Which returns a <strong>generator</strong>:</p>
<pre><code>&gt;&gt;&gt; (i for i in range(5))
&lt;generator object &lt;genexpr&gt; at 0x7f52703fbca8&gt;
</code></pre>
<p>It's the same as:</p>
<pre><code>&gt;&gt;&gt; def gen():
...     for i in range(5):
...         yield i
&gt;&gt;&gt; gen()
&lt;generator object gen at 0x7f5270380db0&gt;
</code></pre>
<p>And you can use it as a generator:</p>
<pre><code>&gt;&gt;&gt; gen = (i for i in range(5))
&gt;&gt;&gt; next(gen)
0
&gt;&gt;&gt; next(gen)
1
&gt;&gt;&gt; list(gen)
[2, 3, 4]
&gt;&gt;&gt; next(gen)
Traceback (most recent call last):
  File "&lt;input&gt;", line 1, in &lt;module&gt;
StopIteration
</code></pre>
<p><strong>Note:</strong> If you use a list comprehension <em>inside a function</em>, you don't need the <code>[]</code> if that function could loop over a generator. For example, <a href="https://docs.python.org/3/library/functions.html#sum" rel="noreferrer"><code>sum()</code></a>:</p>
<pre><code>&gt;&gt;&gt; sum(i**2 for i in range(5))
30
</code></pre>
<p><strong>Related</strong> (about generators): <a href="https://stackoverflow.com/questions/1756096/understanding-generators-in-python">Understanding Generators in Python</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are list, dictionary, and set comprehensions, but no tuple comprehensions (though do explore "generator expressions").</p>
<p>They address the problem that traditional loops in Python are statements (don't return anything) not expressions which return a value.</p>
<p>They are not the solution to every problem and can be rewritten as traditional loops. They become awkward when state needs to be maintained &amp; updated between iterations.</p>
<p>They typically consist of:</p>
<pre><code>[&lt;output expr&gt; &lt;loop expr &lt;input expr&gt;&gt; &lt;optional predicate expr&gt;]
</code></pre>
<p>but can be twisted in lots of interesting and bizarre ways.</p>
<p>They can be analogous to the traditional <code>map()</code> and <code>filter()</code> operations which still exist in Python and continue to be used.</p>
<p>When done well, they have a high satisfaction quotient.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you prefer a more visual way of figuring out what's going on then maybe this will help:</p>
<pre><code># for the example in the question...

y = []
for x in range(10):
    y += [x**2]

# is equivalent to...

y = [x**2 for x in range(10)]

# for a slightly more complex example, it is useful
# to visualize  where the various x's end up...

a = [1,2,3,4]
b = [3,4,5,6]
c = []

for x in a:
          if x in b:
                  c += [x]
#   \         \        /
#    \    _____\______/
#     \  /      \
#      \/        \
#      /\         \
#     /  \         \
#    /    \         \
c = [x for x in a if x in b]

print(c)
</code></pre>
<p>...produces the output <code>[3, 4]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>I've seen a lot of confusion lately (on other SO questions and from coworkers) about how list comprehensions work. A wee bit of math education can help with <em>why</em> the syntax is like this, and what list comprehensions really mean.</p>
<h2>The syntax</h2>
<p>It's best to think of list comprehensions as predicates over a set/collection, like we would in mathematics by using set builder notation. The notation actually feels pretty natural to me, because I hold an undergrad degree in Mathematics. But forget about me, Guido van Rossum (inventor of Python) holds a masters in Mathematics and has a math background.</p>
<h2>Set builder notation crash course</h2>
<p>Here's the (very basics) of how set builder notation works:</p>
<p><a href="https://i.stack.imgur.com/MRPIy.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/MRPIy.png"/></a></p>
<p>So, this set builder notation represents the set of numbers that are strictly positive (i.e. <code>[1,2,3,4,...]</code>).</p>
<h2>Points of confusion</h2>
<p>1) <strong>The predicate filter in set builder notation only specifies which items we want to keep, and list comprehension predicates do the same thing.</strong> You don't have to include special logic for omitting items, they are omitted unless included by the predicate. The empty predicate (i.e. no conditional at the end) includes all items in the given collection.</p>
<p>2) <strong>The predicate filter in set builder notation goes at the end, and similarly in list comprehensions.</strong> (some) Beginners think something like <code>[x &lt; 5 for x in range(10)]</code> will give them the list <code>[0,1,2,3,4]</code>, when in fact it outputs <code>[True, True, True, True, True, False, False, False, False, False]</code>. We get the output <code>[True, True, True, True, True, False, False, False, False, False]</code> because we asked Python to evaluate <code>x &lt; 5</code> for <em>all</em> items in <code>range(10)</code>. No predicate implies that we get everything from the set (just like in set builder notation).</p>
<p><strong>If you keep set builder notation in the back of your mind while using list comprehensions, they're a bit easier to swallow.</strong></p>
<p>HTH!</p>
</div>
<span class="comment-copy">The ternary expression <code>x if cond else y</code> really doesn't have anything specifically to do with list comprehensions - any valid expression can be used inside a list compression - the ternary expression is one of many python expressions.</span>
<span class="comment-copy">@AChampion: Yeah, I mentioned that in my answer because I tried <code>[i for i in x if i else y]</code> when I was learning list comprehensions and it doesn't work. After some research I understand that I must use <code>[i if i else y for i in x]</code> instead. So I think if I mention it here then others can avoid the issue which I had before.</span>
<span class="comment-copy">It is worth to mention that you only need to use the <code>list</code> constructor: <code>list(&lt;map object&gt;)</code> in Python 3.x</span>
<span class="comment-copy">it's a bad practise to put 2 or more for in on list comprehension</span>
<span class="comment-copy">it becomes less readable</span>
<span class="comment-copy">This made my day: <code>When done well, they have a high satisfaction quotient.</code></span>
