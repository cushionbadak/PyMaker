<div class="post-text" itemprop="text">
<p>I have a data frame with 20 columns and in each of them there is 0 or 1. I want to have a new column with 1 if in any of my 20 columns is 1 and with 0 otherwise. </p>
<p>I tried to do it like this:</p>
<pre><code>df['new_column'] = df.apply(lambda x: np.sign(sum(x[['s2', 's3', 's4', 's5', 
's6', 's7', 'k1', 'k2', 'k3', 'k4','k5', 'k6', 'k7', 'n1', 'n2', 'n3', 
'n4','n5', 'n6', 'n7']])), axis=1) 
</code></pre>
<p>but my df is quite big (~ 5 000 000 rows) and it lasts long time. Is there any faster solution?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, <code>apply</code> are loops under the hood, so select columns by list of columns, convert DataFrame to 2d numpy array by <a href="http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.values.html" rel="nofollow noreferrer"><code>DataFrame.values</code></a>, cast to <code>bool</code> and get <code>any</code> per rows for vectorized solution:</p>
<pre><code>L = ['s2', 's3', 's4', 's5','s6', 's7', 
     'k1', 'k2', 'k3', 'k4','k5', 'k6', 'k7', 
     'n1', 'n2', 'n3', 'n4','n5', 'n6', 'n7']

df['new_column'] = np.any(df[L].values.astype(bool), axis=1)
</code></pre>
<p>Or:</p>
<pre><code>df['new_column'] = df[L].values.sum(axis=1).astype(bool)
</code></pre>
<p><strong>Performance</strong>:</p>
<pre><code>np.random.seed(2019)

L = ['s2', 's3', 's4', 's5','s6', 's7', 
     'k1', 'k2', 'k3', 'k4','k5', 'k6', 'k7', 
     'n1', 'n2', 'n3', 'n4','n5', 'n6', 'n7']

N = 5000000 
df = pd.DataFrame(np.random.choice([0,1], p=(.8,.2), size=(N, len(L))), columns= L)
#print (df)

In [311]: %timeit df['new_column'] = np.any(df[L].values.astype(bool), axis=1)
544 ms ± 18.9 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)

In [312]: %timeit df['new_column'] = df[L].values.max(axis=1).astype(bool)
504 ms ± 16.9 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)

In [313]: %timeit df['new_column'] = np.any(df[L].values, axis=1)
546 ms ± 36.9 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)

In [315]: %timeit df['new_column'] = df[L].values.sum(axis=1).astype(bool)
428 ms ± 11 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another possible solution:</p>
<pre><code>df['new_column'] = df.apply(lambda x: 1 if sum(x) &gt; 0 else 0, axis =1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>given that there can only be 0 or 1 values </p>
<pre><code>import numpy as np

df['newcol'] = df.apply(lambda x: np.max(x), axis=1)
</code></pre>
</div>
