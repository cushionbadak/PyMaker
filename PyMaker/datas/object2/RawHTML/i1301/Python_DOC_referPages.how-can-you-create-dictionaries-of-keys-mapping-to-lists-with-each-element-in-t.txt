<div class="post-text" itemprop="text">
<p>For example:</p>
<pre><code>d = dict()

#Map "Parent" to a list of "children" values
d["Parent"] = []
d["Parent"].append("Child1")
d["Parent"].append("Child2")
d["Parent"].append("Child3")

#I know the following is wrong, but I want each list that "Parent" maps to, also to map to a list- how would I do this?
d["Parent"]["Child3"] = []
d["Parent"]["Child3"].append("GrandChild1")
</code></pre>
<p>This would basically look something like a tree (not binary) where there is a top level parent, pointing to its children (could be more than 2), and each can point to its multiple children. Are there other ways to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think, you're trying to do something like this:</p>
<pre><code>d = {}

d["Parent"] = {}

d["Parent"]["Child1"] = {}
d["Parent"]["Child2"] = {}
d["Parent"]["Child3"] = {}

d["Parent"]["Child3"]["GrandChild1"] = {}
d["Parent"]["Child3"]["GrandChild2"] = {}
</code></pre>
<p>However, where are you going with this? This might not the best way to do this with Python. :-) If you can get your current code to work, you can post it to <a href="https://codereview.stackexchange.com/">https://codereview.stackexchange.com/</a> afterwards. You will get valuable feedback on how to improve your code.</p>
<hr/>
<p>By the way, you can then look at the "branches" of the "tree" with <a href="https://docs.python.org/3/library/stdtypes.html#dict.keys" rel="nofollow noreferrer"><code>dict.keys</code></a>:</p>
<pre><code>print(d.keys())
print(d["Parent"].keys())
print(d["Parent"]["Child3"].keys())
</code></pre>
<p>Which prints</p>
<pre><code>dict_keys(['Parent'])
dict_keys(['Child3', 'Child2', 'Child1'])
dict_keys(['GrandChild2', 'GrandChild1'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Being interested in how to do trees in python, I searched around and came across some example code on GitHub for a <a href="https://gist.github.com/hrldcpr/2012250" rel="nofollow noreferrer">One-line Tree in Python</a>.</p>
<p>Create a tree from a <code>defaultdict</code>:</p>
<pre><code>from collections import defaultdict
def tree(): return defaultdict(tree)
</code></pre>
<p>Build your tree structure:</p>
<pre><code>t = tree()
t['San Francisco Bay Area']['San Francisco']
t['San Francisco Bay Area']['South Bay']['San Jose']
t['New York']['Manhattan']
</code></pre>
<p>And print it out;</p>
<pre><code>import json
print(json.dumps(t))
</code></pre>
<blockquote>
<p>{"New York": {"Manhattan": {}}, "San Francisco Bay Area": {"San Francisco": {}, "South Bay": {"San Jose": {}}}}</p>
</blockquote>
<p>There's further information on iteration and, in the comments, more useful code and suggestions on loading it from json and pretty printing the structure.</p>
</div>
<span class="comment-copy">Yes, you just need a dictionary instead of a list stored against each key. But how far are you planning to go? Soon enough I think it will become unwieldy</span>
<span class="comment-copy"><code>d["Child3"].append("GrandChild1")</code> If you just want to establish the mapping</span>
<span class="comment-copy">let's say it's at most 5 levels of depth</span>
<span class="comment-copy">But d["Child3"].append("GrandChild1") doesn't establish the mapping since it doesn't show the hierarchy of "Parent" to "Child3" to "GrandChild1" (which would look like d["Parent"]["Child3"].append("GrandChild1"), but that's not correct.</span>
<span class="comment-copy">It's basically a tree implementation with a node pointing to its children but I'm not sure how to implement it with dictionaries and lists.</span>
<span class="comment-copy">I'm trying to build a tree structure with this, on which I can do a depth-first traversal. Given a JSON list: locations = [   {"id": 1, "name": "San Francisco Bay Area", "parent_id": None},   {"id": 2, "name": "San Jose", "parent_id": 3},   {"id": 3, "name": "South Bay", "parent_id": 1},   {"id": 4, "name": "San Francisco", "parent_id": 1},   {"id": 5, "name": "Manhattan", "parent_id": 6},   {"id": 6, "name": "New York", "parent_id": None} ] I want to be able to print each parent with its children: New York -Manhattan San Francisco Bay Area -San Francisco -South Bay â€”San Jose</span>
<span class="comment-copy">Is there a cleaner way to do this in Python than with dicts mapping to lists?</span>
<span class="comment-copy">Not sure how your code solves it. If given a JSON list where each element tells you what its parent id is (for top level parent would be None), I want to be able to create a tree structure from it where each top level parent maps to its children and each of their children (at most depth of 5). With your solution, it's unclear how I would traverse the JSON list and create each mapping. For example, if I'm iterating through the JSON list and see that "GrandChild1" is a child of "Child3" given its parent_id, how would I then know that "Child3" is a child of "Parent" and assign it the way you did?</span>
<span class="comment-copy">Yes, it could be up to 5 levels. But basically the goal is to take that JSON list and output each parent with its children underneath it and add a "-" (hyphen) at each sublevel.</span>
<span class="comment-copy">Thanks @Jayjayyy, that's really helpful. And how would you keep track of each level? For instance I want to sort each level alphabetically and add a hyphen to each level (level 1 would have '-' before the child, level 2 would have '--' before each child, etc</span>
