<div class="post-text" itemprop="text">
<p>I need to clean a pandas dataframe, remove repeated information. For example:</p>
<pre><code>    name                                       strength
770 Vitamin B12 Tab 500mcg                     500 mcg
771 Vitamin B12 Tab 5mcg                       5 mcg
772 Vitamin B12 Tablets 250mcg                 250 mcg
773 Vitamin B12-folic Acid                     None
774 Vitamin B6 &amp; B12 With Folic Acid           None
775 Vitamin Deficiency Injectable System - B12 None
776 Vitamine 110 Liq                           None
777 Vitamine B-12 Tab 100mcg                   100 mcg
778 Vitamine B12 25 Mcg - Tablet               25 mcg
779 Vitamine B12 250mcg                        250 mcg
</code></pre>
<p>From the first <code>name</code> column I need to remove the information in <code>strength</code>, namely:</p>
<pre><code>    name                                       strength
770 Vitamin B12 Tab                            500 mcg
771 Vitamin B12 Tab                            5 mcg
772 Vitamin B12 Tablets                        250 mcg
773 Vitamin B12-folic Acid                     None
774 Vitamin B6 &amp; B12 With Folic Acid           None
775 Vitamin Deficiency Injectable System - B12 None
776 Vitamine 110 Liq                           None
777 Vitamine B-12 Tab                          100 mcg
778 Vitamine B12 - Tablet                      25 mcg
779 Vitamine B12                               250 mcg
</code></pre>
<p>Note, the presentation of strength in <code>name</code> may not exactly correspond to that in <code>strength</code> column up to blank space (500 mcg vs. 500mcg)</p>
<p>My straightforward solution was to loop over all possible combinations of <code>strength</code> and if there is a match in <code>name</code> column, replace with empty character:</p>
<pre><code>new_df = []

for i in df:
    for j in df.strength.dropna().drop_duplicates().tolist():
        for k in i.split():
            if j == k: 
                new_df.append((i, i.replace(j, '')))

print(new_df)
</code></pre>
<p>It does work, however, I have a lot fo data and this is the most non-pythonic and not-efficient way to implement.</p>
<p>Any suggestions?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>re</code> package to remove the undesired redundant string and <code>apply</code> function to rows in pandas <code>DataFrame</code> should do the work.</p>
<p>In below code you can see a possible solution:</p>
<pre><code>import pandas as pd
import re

def removeReduntantData(row):
    if row["strength"] is not None:
        string = row["strength"].replace(" ", "\s?")
        return re.sub(re.compile(string+"\s?", re.IGNORECASE), "", row["name"]).strip()
    else:
        return row["name"]

df = pd.DataFrame({"name":["Vitamin B12 Tab 500mcg","Vitamin B12 Tab 5mcg","Vitamin B12 Tablets 250mcg","Vitamin B12-folic Acid","Vitamin B6 &amp; B12 With Folic Acid","Vitamin Deficiency Injectable System - B12","Vitamine 110 Liq","Vitamine B-12 Tab 100mcg","Vitamine B12 25 Mcg - Tablet","Vitamine B12 250mcg"],\
"strength":["500 mcg","5 mcg","250 mcg",None,None,None,None,"100 mcg","25 mcg","250 mcg"]})

df["name"] = df.apply(removeReduntantData, axis=1)
</code></pre>
<p>The output <code>DataFrame</code> is then:</p>
<pre><code>&gt;&gt;&gt; df
                                         name strength
0                             Vitamin B12 Tab  500 mcg
1                             Vitamin B12 Tab    5 mcg
2                         Vitamin B12 Tablets  250 mcg
3                      Vitamin B12-folic Acid     None
4            Vitamin B6 &amp; B12 With Folic Acid     None
5  Vitamin Deficiency Injectable System - B12     None
6                            Vitamine 110 Liq     None
7                           Vitamine B-12 Tab  100 mcg
8                       Vitamine B12 - Tablet   25 mcg
9                                Vitamine B12  250 mcg
</code></pre>
<p>In this way you end up using the <code>strength</code> column to look for redundant string within the <code>name</code> column and remove them, taking into account the redundant string might not have a space in between.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would probably not match with all the possible combinations of strength. Since the the items seem to contain roughly the same characters for both columns, it would probably suffice to use the strength column to fuzzy search the name column.</p>
<p>You could search case-insensitive with and without whitespace and you would probably get most items done.</p>
<p>Case insensitive search can be done with regular expressions in python:</p>
<pre><code>import re

# case insensitive without whitespace
if re.search('5 mcg'.replace(" ",""), 'Vitamin B12 Tab 5mcg', re.IGNORECASE):
    # is True
elif re.search('25 mcg', 'Vitamine B12 25 Mcg - Tablet', re.IGNORECASE):
    # is True
</code></pre>
<p>Of course, replace the literals with your variables there.</p>
<p>EDIT: There might be a more efficient way to do this with regular expressions, so if someone is more proficient with them, I'd be delighted to learn it.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>new_df=[]  
df= df[df[strength]!=None]# Firstly select the column with Non None values.     
df['name']= df[name].str.split()   
for i in df[name]:  
   for j in df[strength]:    
        if j in i:   
            i.remove(j)   
        else:   
             pass   
   new_df.append(' '.join(i))
</code></pre>
<p>This might me a better way. Firstly, we are reducing you data and one of the for loops which will make the complexity of code o(n2) instead of o(n3)</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Assumption(s):</strong> the strength pattern is always "digit + space(optional) + mcg". There would be ways to generalize it more if needed.</p>
<p>You could use <code>regex</code> and <code>df.apply</code>.</p>
<p>First you would define the pattern you are looking for using <a href="https://docs.python.org/3/library/re.html#re.compile" rel="nofollow noreferrer"><code>re.compile()</code></a>. Then you use <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer"><code>re.sub()</code></a> on your <code>name</code> column as shown in the code below.</p>
<pre><code>import re
import pandas as pd

# Creates a DataFrame for testing
df = pd.DataFrame({"name":["Vitamin B12 500 MCG tab", "Vitamin Deficiency Injectable System - B12", 
"Vitamin Deficiency Injectable System - B12 25 mcg"],"strenght":["500 mcg", "None", "25 mcg"]})

# creates the pattern we are looking for
p = re.compile(r'[\d]+\s?mcg', re.IGNORECASE) 

# Replace our column name with the value we want
df["name"] = df["name"].apply(lambda x: re.sub(p,'',x))
print(df)
</code></pre>
<p>You can find more information regarding <code>df.apply</code> <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.apply.html" rel="nofollow noreferrer">here</a> and using regex with Python <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">here</a></p>
</div>
