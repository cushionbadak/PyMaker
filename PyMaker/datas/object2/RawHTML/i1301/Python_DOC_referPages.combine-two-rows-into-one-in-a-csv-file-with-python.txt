<div class="post-text" itemprop="text">
<p>I am trying to combine multiple rows in a csv file together. I could easily do it in Excel but I want to do this for hundreds of files so I need it to be as a code. I have tried to store rows in arrays but it doesn't seem to work. I am using Python to do it.</p>
<p>So lets say I have a csv file;</p>
<pre><code>1,2,3
4,5,6
7,8,9
</code></pre>
<p>All I want to do is to have a csv file as this;</p>
<pre><code>1,2,3,4,5,6,7,8,9
</code></pre>
<p>The code I have tried is this;</p>
<pre><code>fin = open("C:\\1.csv", 'r+')
fout = open("C:\\2.csv",'w')
for line in fin.xreadlines():
  new = line.replace(',', ' ', 1)
  fout.write (new)
fin.close()
fout.close()
</code></pre>
<p>Could you please help?</p>
</div>
<div class="post-text" itemprop="text">
<p>You should be using the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><code>csv</code></a> module for this as splitting CSV manually on commas is very error-prone (single columns can contain strings with commas, but you would incorrectly end up splitting this into multiple columns). The CSV module uses lists of values to represent single rows.</p>
<pre><code>import csv

def return_contents(file_name):
    with open(file_name) as infile:
        reader = csv.reader(infile)
        return list(reader)

data1 = return_contents('csv1.csv')
data2 = return_contents('csv2.csv')

print(data1)
print(data2)

combined = []
for row in data1:
    combined.extend(row)

for row in data2:
    combined.extend(row)

with open('csv_out.csv', 'w', newline='') as outfile:
    writer = csv.writer(outfile)
    writer.writerow(combined)
</code></pre>
<p>That code gives you the basis of the approach but it would be ugly to extend this for hundreds of files. Instead, you probably want <a href="https://docs.python.org/3/library/os.html#os.listdir" rel="nofollow noreferrer"><code>os.listdir</code></a> to pull all the files in a single directory, one by one, and add them to your output. This is the reason that I packed the reading code into the <code>return_contents</code> function; we can repeat the same process millions of times on different files with only one set of code to do the actual reading. Something like this:</p>
<pre><code>import csv
import os


def return_contents(file_name):
    with open(file_name) as infile:
        reader = csv.reader(infile)
        return list(reader)

all_files = os.listdir('my_csvs')

combined_output = []

for file in all_files:
    data = return_contents('my_csvs/{}'.format(file))
    for row in data:
        combined_output.extend(row)

with open('csv_out.csv', 'w', newline='') as outfile:
    writer = csv.writer(outfile)
    writer.writerow(combined_output)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are specially dealing with csv file format. I recommend you to use csv package for the file operations. If you also use <code>with</code>...<code>as</code> statement, you don't need to worry about closing the file etc. You just need to define the <code>PATH</code> then program will iterate all <code>.csv</code> files
Here is what you can do:</p>
<pre><code>PATH = "your folder path"
def order_list():
      data_list = []
      for filename in os.listdir(PATH):
          if filename.endswith(".csv"):
              with open("data.csv") as csvfile:
                  read_csv = csv.reader(csvfile, delimiter=',', quoting=csv.QUOTE_NONNUMERIC)
                  for row in read_csv:
                      data_list.extend(row)

  print(data_list)

if __name__ == '__main__':
    order_list()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Store your data in pandas df</p>
<pre><code>import pandas as pd    
df = pd.read_csv('file.csv')
</code></pre>
<p>Store the modified dataframe into new one</p>
<pre><code>df_2 = df.groupby('Column_Name').agg(lambda x: ' '.join(x)).reset_index() ## Write Name of your column
</code></pre>
<p>Write the df to new csv</p>
<pre><code>df2.to_csv("file_modified.csv")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could do it also like this:</p>
<pre><code>fIn = open("test.csv", "r")
fOut = open("output.csv", "w")

fOut.write(",".join([line for line in fIn]).replace("\n",""))

fIn.close()
fOut.close()
</code></pre>
<p>I've you want now to run it on multiple file you can run it as script with arguments:</p>
<pre><code>import sys
fIn = open(sys.argv[1], "r")
fOut = open(sys.argv[2], "w")

fOut.write(",".join([line for line in fIn]).replace("\n",""))

fIn.close()
fOut.close()
</code></pre>
<p>So now expect you use some Linux System and the script is called <code>csvOnliner.py</code> you could call it with:</p>
<pre><code>for i in *.csv; do python csvOnliner.py $i changed_$i; done
</code></pre>
<p>With windows you could do it in a way like this:</p>
<pre><code>FOR %i IN (*.csv) DO csvOnliner.py %i changed_%i
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to replace the newline characters when looping through the file</p>
<pre><code>INPUT_FILE_PATH = r'C:\Temp\csv_file.csv'
OUTPUT_FILE_PATH = r'C:\Temp\csv_file_modified.csv'

file_input = open(INPUT_FILE_PATH,'r')
file_output = open(OUTPUT_FILE_PATH,'w')

for row in file:
    file_output.write(row.replace('\n',','))

file_input.close()
file_output.close()
</code></pre>
<p>if I would use your code then like this</p>
<pre><code>fin = open("C:\\1.csv", 'r+')
fout = open("C:\\2.csv",'w')
for line in fin.xreadlines():
  new = line.replace(',', ' ', 1).replace('\n',' ')
  fout.write (new)
fin.close()
fout.close()
</code></pre>
</div>
<span class="comment-copy">Please show your attempt that didn't work so we can help you understand what went wrong</span>
<span class="comment-copy">So I have tried this but I don't think it is right  fin = open("C:\\1.csv", 'r+') fout = open("C:\\2.csv",'w') for line in fin.xreadlines():     new = line.replace(',', ' ', 1)     fout.write (new) fin.close() fout.close()</span>
<span class="comment-copy">It's really not possible to read code in comments, please edit it into your original question with code formatting.</span>
<span class="comment-copy">Sorry for this, I am new to here. I have edited my original question and added the code. Thanks</span>
<span class="comment-copy">No worries :) Working on an answer; you should be using the csv module</span>
<span class="comment-copy">This doesn't show how it can be done for multiple files. The OP mentions that they have hundreds.</span>
<span class="comment-copy">@roganjosh Hi, I have edited my answer. I would be glad if you can suggest or improve. Best Regards</span>
<span class="comment-copy">I extended mine to show how you could use <code>os.listdir</code> and package the CSV reading code into a function to avoid all of the nesting.</span>
<span class="comment-copy">Thanks for this! It works. However, for some reason the output I get is; 1,2,3 4,5,6 7,8,9  instead of 1,2,3, 4,5,6, 7,8,9.  So the numbers 3,4 and 6,7 are in the same cell</span>
<span class="comment-copy">@ToykanOzdeger this is really error-prone code for the reason I mentioned in my answer. It may work in this case, but it's not good practice</span>
<span class="comment-copy">Okay thank you very much for this answer it really helped!</span>
<span class="comment-copy">@ToykanOzdeger yes you are really asking for this by removing the delimiter. (csv stands for comma delimited values - you are removing commas)</span>
<span class="comment-copy">@ToykanOzdeger I see I take it back. I've edited my answer - just replace the newlines by space(' ') instead of by nothing('')</span>
