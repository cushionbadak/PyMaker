<div class="post-text" itemprop="text">
<p>Slicing is available for lists in python</p>
<pre><code>list1 =[1,2,3,4,5,6]
list1[:3]
[1, 2, 3]
</code></pre>
<p>Similarly, slicing or anything similar to that available for dictionary ?</p>
<pre><code>dict1 = {1":a",2:"b",3:"c",4:"d",5:"e"} 
</code></pre>
<p>I would like to get any 3 (can be random) elements of dictionary, just providing the number (as provided above for list <code>[:2]</code>), then i should be getting below dictionary</p>
<pre><code>dict1 = {1":a",2:"b"} # After slicing
</code></pre>
<p>How can this dictionary slicing or alternative be achieved in <code>python</code> &amp; <code>Robot-framework</code> ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe this is a solution you could consider, since a <code>dict</code> can not be accessed as a <code>list</code>:</p>
<pre><code>dict1 = {1:"a",2:"b",3:"c",4:"d",5:"e"}

def take(dct, high=None, low=None):
  return dict(list(dct.items())[low:high])

print(take(dict1, 3)) #=&gt; {1: 'a', 2: 'b', 3: 'c'}
print(take(dict1, 5, 2)) #=&gt; {3: 'c', 4: 'd', 5: 'e'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just to provide 2 alternatives using only Robot Framework keywords. In essence they follow a similar approach. Get the keys from the dictionary, then slice those and either modify or recreate the dictionary in the desired format.</p>
<p>Unless there is a specific reason to not want to use Python for this, I think this functionality should be provided by a Python keyword and not Robot Framework.</p>
<pre><code>*** Settings ***
Library    Collections

*** Variables ***
&amp;{dict1}    1=a    2=b    3=c    4=d    5=e
&amp;{dict2}    1=a    2=b    3=c    4=d    5=e
&amp;{result}   3=c    4=d    5=e 

*** Test Cases ***
TC - keep items 3, 4 &amp; 5
    # Keey
    Keep Slice In Dictionary    ${dict1}    ${5}    ${2}
    Log Many    ${dict1}
    Dictionaries Should Be Equal    ${dict1}    ${result}    

    ${slice}       Get Slice From Dictionary    ${dict2}    ${5}    ${2}
    Log Many    ${slice}
    Dictionaries Should Be Equal    ${dict1}    ${slice}

*** Keywords ***
Keep Slice In Dictionary
    [Documentation]
    ...    Modifies the dictionary to only leave the slice.
    ...    
    ...    The keys of the dictionary are converted into a list. Then
    ...    this list is spliced. This list is then used to filter out
    ...    the unwanted keys.
    ...    
    ...    Note: this keyword modifies the provided dictionary.
    ...    
    ...    Arguments:
    ...    - dict    (dictionary)    The dictionary that needs to be modified
    ...    - high    (integer)       The last item to be kept.
    ...    - low     (integer)       The first item of the slice. (defaults to 0)
    ...    
    ...    Returns:    None          Modifies the provided dictionary.
    ...    
    [Arguments]    ${dict}    ${high}    ${low}=${0}

    ${keys_list}        Get Dictionary Keys    ${dict}
    ${filtered_keys}    Get Slice From List    ${keys_list}    ${low}    ${high}
    Keep In Dictionary     ${dict}    @{filtered_keys}

Get Slice From Dictionary
    [Documentation]
    ...    Get a slice of sequential keys from a dictionary
    ...    
    ...    The keys of the dictionary are converted into a list. Then
    ...    this list is spliced. This list is then used to create a new
    ...    Dictionary with the filtered keys.
    ...    
    ...    Arguments:
    ...    - dict    (dictionary)    The source dictionary
    ...    - high    (integer)       The last item to be kept.
    ...    - low     (integer)       The first item of the slice. (defaults to 0)
    ...    
    ...    Returns:  (dictionary     A dictionary with the desired keys.
    ...    
    [Arguments]    ${dict}    ${high}    ${low}=${0}
    ${keys_list}        Get Dictionary Keys    ${dict}
    ${filtered_keys}    Get Slice From List    ${keys_list}    ${low}    ${high}

    ${return_dict}    Create Dictionary

    :FOR    ${item}    IN    @{filtered_keys}
    \        Set To Dictionary    ${return_dict}   ${item}    ${dict['${item}']}

    [Return]     ${return_dict}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I would like to get any 3 (can be random) elements of dictionary</p>
</blockquote>
<p>Constructing a list of all dictionary items is not necessary. You can use the <a href="https://docs.python.org/3/library/stdtypes.html#dict.items" rel="nofollow noreferrer"><code>dict.items</code></a> and <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>itertools.islice</code></a> to slice a fixed number of items:</p>
<pre><code>from itertools import islice

def get_n_items(d, n):
    return dict(islice(d.items(), 0, n))

dict1 = {1:"a", 2:"b", 3:"c", 4:"d", 5:"e"} 

get_n_items(dict1, 2)  # {1: 'a', 2: 'b'}
get_n_items(dict1, 3)  # {1: 'a', 2: 'b', 3: 'c'}
</code></pre>
<p>With Python 3.6+, as an implementation detail in CPython 3.6 and officially in 3.7+, this equates to taking the first <em>n</em> items by inseration order.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/29216889/slicing-a-dictionary">Slicing a dictionary</a></span>
<span class="comment-copy">@b-fg How do you slice it in robot framework ? Is this duplicate ?</span>
<span class="comment-copy">And in python, how do you limit dictionary size (slice it) by just providing the size as in list ? I don't see that in the link provided by you.</span>
<span class="comment-copy">Scroll down to the answer in the link provided by @b-fg that uses <code>itertools.islice()</code>, which may be what you are looking for.</span>
<span class="comment-copy">Keep in mind that in Python 2 and pre-3.6 the dictionaries are unordered collection, a slice would return different results on each run.</span>
<span class="comment-copy">Thank you very much. Indeed a simple best solution. Edited above answer as it returns "TypeError: 'dict_items' object is not subscriptable" ([low:high] need to be operated on list)</span>
