<div class="post-text" itemprop="text">
<p>I am trying to install lightgbm using conda. I successfully downloaded the only version I saw on the cloud(2.2.1) and saw that it forced me to downgrade my mkl. I thought this would be ok, however, when I did this, it broke some other essential functionality (a matplotlib function stopped working). </p>
<p>I was wondering how I might resolve this issue? Also is there a general strategy people tend to use when dealing with this whack-a-mole type dependency problem? Is there something simple that can be done to handle this? Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>The general strategy people use for this problem is working with different environments. When you use different environments for projects, you can install packages for each project you work on seperately, and you will not get into trouble with packages not working anymore for your other projects. It works pretty simple and avoids dependency problems. </p>
<p>To create a new environment use: <code>conda create --name env_name python=requiredpythonversion</code></p>
<p>Then you should activate your newly created environment: <code>activate env_name</code></p>
<p>After which you can install to it the packages your project requires: <code>conda install PACKAGENAME</code>, in your case that would be <code>conda install lightgbm</code></p>
<p>A great tutorial on how to work with python environments using conda (You could also use pip and venv's, but since you seem to be using conda already I assume you want to proceed with that), can be found <a href="https://medium.freecodecamp.org/why-you-need-python-environments-and-how-to-manage-them-with-conda-85f155f4353c" rel="nofollow noreferrer">Here</a>. I recommend you follow it, it will probably answer all the remaining questions you have about package management, and then you will be good to go =) </p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/tutorial/venv.html" rel="nofollow noreferrer">VirtualEnvironments</a> is usually a goto general strategy people tend to use for dependency problems, not sure if it's possible in your situation but it's worth a try</span>
<span class="comment-copy">Thanks! I will create python environments in the future and the tutorial link was great. In the environment I create, I think I should still have the same dependency problem as I would like to use both of these libraries in the same python script. I was wondering if there is a simple way to roll back all of the module versions until I get working set of dependencies? Or maybe another strategy to ensure that the libraries I have work together? Right now I only have the default Anaconda stuff and lightgbm.</span>
<span class="comment-copy">Ok, got it figured out now, made a new python environment and then just loaded an older version of python. Probably went farther back than I needed, but I used python version 3.4.5(?). Anyway, thanks!</span>
<span class="comment-copy">You're welcome! The strategy I mostly use is checking documentation to see whether the package you wish to use has any dependency requirements, for instance a python version &lt; some number. If there's no such thing available, it's mostly trial and error AFAIK. BTW, maybe you noticed that your question was put "on hold" as being to broad. Please check out the following link: <a href="https://stackoverflow.com/help/how-to-ask">stackoverflow.com/help/how-to-ask</a></span>
