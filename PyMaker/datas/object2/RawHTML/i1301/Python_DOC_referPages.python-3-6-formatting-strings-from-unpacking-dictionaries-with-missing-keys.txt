<div class="post-text" itemprop="text">
<p>In Python3.4 you could do the following thing:</p>
<pre><code>class MyDict(dict):
    def __missing__(self, key):
        return "{%s}" % key
</code></pre>
<p>And then something like:</p>
<pre><code>d = MyDict()
d['first_name'] = 'Richard'
print('I am {first_name} {last_name}'.format(**d))
</code></pre>
<p>Printing, as expected:</p>
<pre><code>I am Richard {last_name}
</code></pre>
<p>But this snippet won't work in Python3.6+, returning a <code>KeyError</code> while trying to get the <code>last_name</code> value from the dictionary, is there any workaround for that string formatting to work in the same way as in Python3.4?</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>I solved it using <a href="https://docs.python.org/3/library/stdtypes.html#str.format_map" rel="nofollow noreferrer"><code>format_map</code></a> instead of <code>format</code>, following my example:</p>
<pre><code>print('I am {first_name} {last_name}'.format_map(d))
</code></pre>
<p>Printed</p>
<pre><code>I am Richard {last_name}
</code></pre>
<p>As expected.</p>
</div>
<div class="post-text" itemprop="text">
<p>With Python 3.6+, you can use formatted string literals (<a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">PEP 498</a>):</p>
<pre><code>class MyDict(dict):
    def __missing__(self, key):
        return f'{{{key}}}'

d = MyDict()
d['first_name'] = 'Richard'

print(f"I am {d['first_name']} {d['last_name']}")

# I am Richard {last_name}
</code></pre>
</div>
<span class="comment-copy">Yeah, I also tried this solution, the problem was that I had several strings a couple of hundred lines long, so changing value by values was not an option (highly error prone), thanks for the alternative, though!</span>
