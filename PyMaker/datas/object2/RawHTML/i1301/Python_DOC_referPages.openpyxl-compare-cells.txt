<div class="post-text" itemprop="text">
<p>I have 2 sheets with some data (18k rows each) and need to check if value from source.xlsx exists in a target.xlsx file. The rows in the source file should be unique. If the cell from source file exists in the target file (in specific column) then in next column in target file need to fill value from some column which is in the source file. It is quite tricky so example would look like:</p>
<p><strong>target.xlsx</strong></p>
<p><div class="snippet" data-babel="false" data-console="true" data-hide="false" data-lang="js">
<div class="snippet-code">
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Data&lt;/th&gt;&lt;th&gt;price&lt;/th&gt;&lt;th&gt; &lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1234grt   &lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;7686tyug  &lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;9797tyu   &lt;/td&gt;&lt;td&gt;   &lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;9866yyy   &lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;98845r  &lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4567yut  &lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1234grt&lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;98845r &lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</code></pre>
</div>
</div>
</p>
<p><strong>source.xls</strong></p>
<p><div class="snippet" data-babel="false" data-console="true" data-hide="false" data-lang="js">
<div class="snippet-code">
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Data&lt;/th&gt;&lt;th&gt;price&lt;/th&gt;&lt;th&gt; &lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;98845r    &lt;/td&gt;&lt;td&gt;$50&lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;7686tyug  &lt;/td&gt;&lt;td&gt;$67&lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;9797tyu   &lt;/td&gt;&lt;td&gt;$56&lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4567yut   &lt;/td&gt;&lt;td&gt;$67&lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;9866yyy   &lt;/td&gt;&lt;td&gt;$76&lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;98845r    &lt;/td&gt;&lt;td&gt;$56&lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1234grt&lt;/td&gt;&lt;td&gt;$34&lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</code></pre>
</div>
</div>
</p>
<hr/>
<pre><code>for i in range(1, source_sheet_max_rows, 1):
print(i)
if source_wb[temp_sheet_name].cell(row=i, column=1).value in target_values:
    for j in range(1, target_sheet_max_rows, 1):
        if target_wb[temp_sheet_name].cell(row=j, column=1).value == source_wb[temp_sheet_name].cell(row=i,
                                                                                                           column=1).value:
            target_wb[temp_sheet_name].cell(row=j, column=2).value = source_wb[temp_sheet_name].cell(row=i,
                                                                                                             column=2).value
            target_wb.save(str(temp_sheet_name))
</code></pre>
<p>target_values - contains the values from col 1 in target sheet</p>
<p>The above code works, but is very heavy and I think there is some better way do it. The files contain more than 18k rows so it would take ages to compare data. The tricky part is that I need to know in which row in the target file my cell from source file is to fill column with corresponding value. I am using openpyxl but if it is easier I could use pandas.</p>
<p>Thx</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><strong>Question</strong>: check if value from source.xlsx exists in a target.xlsx file.</p>
</blockquote>
<p>Implement it like the following example:<br/>
Documentation: <a href="https://openpyxl.readthedocs.io/en/stable/tutorial.html#accessing-many-cells" rel="nofollow noreferrer">OpenPyXl - accessing-many-cells</a><br/>
<a href="https://docs.python.org/3/library/stdtypes.html#index-50" rel="nofollow noreferrer">Python - Mapping Types — dict</a>, <a href="https://docs.python.org/3/reference/datamodel.html#object.__init__" rel="nofollow noreferrer">Python - <strong>object.__init__</strong></a></p>
<pre><code>class SourceSheet:
    def __init__(self, ws):
        self.ws = ws

    def __iter__(self):
        """
        Implement iterRows or iterRange
        :return: yield a tuple (value_to_search, value_to_fill)
        """
        # Example iterRange
        for row in range(1, self.ws.max_rows + 1):
            yield (self.ws.cell(row=row, column=1).value, self.ws.cell(row=row, column=2).value)

class TargetSheet:
    def __init__(self, ws):
        self.ws = ws

        """
        Create a 'dict' from all Values in Column A
        This allows Random Access the Cell Value to get the Cell Row Index
        Dict.key == Cell Value
        Dict.value = Cell Row Index
        _columnA = {} # {cell.value:cell.row}
        """
        self._columnA = dict(((c.value, c.row) for c in ws['A']))

    def find(self, value):
        """
        Implement either linear Search using iterRows over one Column or
                         search in dict to find 'value'
        :param value: The value to find
        :return: The Cell, to write the 'value_to_fill'
        """
        # Example using dict
        if value in self._columnA:
            return self.ws.cell(row=self._columnA[value], column=2)


sourceSheet = SourceSheet(ws1)
targetSheet = TargetSheet(ws2)        

for value_to_search, value_to_fill in sourceSheet:
    print("SourceSheet:{}".format((value_to_search, value_to_fill)))
    targetCell = targetSheet.find(value_to_search)

    if targetCell:
        print("Match: Write value '{}' to TargetSheet:'{}'".format(value_to_fill, targetCell))
        targetCell.value = value_to_fill
    else:
        print("Value '{}' not fount in TargetSheet!".format(value_to_search))
</code></pre>
<blockquote>
<p><strong>Output</strong>:</p>
<pre><code>SourceSheet:('cell.A1.value', 'cell.B1.value')
Match: Write value 'cell.B1.value' to TargetSheet:'Cell.B1:'
SourceSheet:('cell.A2.value', 'cell.B2.value')
Match: Write value 'cell.B2.value' to TargetSheet:'Cell.B2:'
SourceSheet:('cell.A3.value', 'cell.B3.value')
Match: Write value 'cell.B3.value' to TargetSheet:'Cell.B3:'
</code></pre>
</blockquote>
<p><strong><em>Tested with Python: 3.5</em></strong></p>
</div>
<div class="post-text" itemprop="text">
<p>From my understanding of your question it seems like the rows in target file are not arranged in the same specific order as the source file.</p>
<pre><code>for i in range(1, souce_sheet_max_rows):
    for j in range(1, target_sheet_max_rows):
        if target_wb[temp_sheet_name].cell(row=j, column=1).value == source_wb[temp_sheet_name].cell(row=i, column=1).value:
            target_wb[temp_sheet_name].cell(row=j, column=2).value == source_wb[temp_sheet_name].cell(row=i, column=2).value
            break
target_wb.save(temp_sheet_name)
</code></pre>
</div>
<span class="comment-copy">Code isn't very readable. I suspect you will find it easier to use zip() over the two worksheets.</span>
<span class="comment-copy">sorry, edited hope looks better now</span>
<span class="comment-copy">I wasn't really referring to the shape of the worksheets but to the code itself which has very long lines. You can use <code>zip(ws1.rows, ws2.rows)</code> to loop over the rows of different worksheets in parallel.</span>
<span class="comment-copy">thx for the post, have one question what is the _columnA for and how to fill it?</span>
<span class="comment-copy"><i>"what is the _columnA"</i>: It's decribed in the source example: <code>_columnA = {} # {Column_A.value:Row}</code>. Read about <a href="https://docs.python.org/3/library/stdtypes.html#index-50" rel="nofollow noreferrer">Mapping Types — dict</a>. <i>"how to fill it"</i>: Read the given docu link <a href="https://openpyxl.readthedocs.io/en/stable/tutorial.html#accessing-many-cells" rel="nofollow noreferrer">accessing-many-cells</a>.</span>
<span class="comment-copy">so should I have sth like:  <code>column_c = {}</code> <code>for target_row in target_wb[temp_sheet_name].iter_rows('C{}:C{}'.format(1, </code>target_sheet_max_rows)):`     <code>for cell in target_row:</code>        ` column_ct[cell.value] = target_row`  and then in the class:  <code>targetSheet = TargetSheet(target_wb[temp_sheet_name], column_ct)</code> and  find method in the class     <code>def find(self, value):</code>        ` if value in self.col_C:`             <code>return self.ws.cell(row=self.col_C[value], column=3)</code></span>
<span class="comment-copy">You didn't get <a href="https://openpyxl.readthedocs.io/en/stable/tutorial.html#accessing-many-cells" rel="nofollow noreferrer">accessing-many-cells</a> correct. There is <b>no</b> pattern like <i><code>.iter_rows('C{}:C{}'.format(1, target_sheet_max_rows))</code></i>. Your big mistake are <code>column_ct[cell.value] = target_row</code>! You have to assign <b>only</b> the <b>Cells Row Index</b>. All the above should go into <code>.__init__(self, ws):</code> Second, OK, but only parameter <code>ws</code>. Third, that's  OK if you want to write to Column <code>C</code>.</span>
<span class="comment-copy">Thank you! Works fine and really fast. The first answer was also very helpful so thank you @Monu Yadav, however that one is much faster.</span>
<span class="comment-copy">no rows are not ordered, and cell in the source file might or might not exists in the target file, so. eg in source file in row 40 col 1 I might have value x which can be found in the target file but in row 9767 col1. If so then in that row 9767 col 2 I need to paste value which is in the source file row 40 but in col 2. So it is kind of matching some cells from 2 collections. Maybe I can use enumerate function?</span>
<span class="comment-copy">You don't need enumerate for this. You can simple use linear search and then break the inner loop once the value has been found. The above code does the same thing.</span>
