<div class="post-text" itemprop="text">
<p>Python does not restrict the names of parameters, however some parameter names are strongly governed by convention, such as <code>self</code>, <code>cls</code>, <code>args</code>, and <code>kwargs</code>. The names <code>self</code> and <code>cls</code> always represent the same concept, so in those cases it's hard for me to see a compelling reason for someone to veer from convention. With <code>args</code> and <code>kwargs</code>, however, I find this naming convention stifling.</p>
<p>Say I have a class that has various properties that can be set via passing kwargs to its constructor:</p>
<pre><code>class MyObj:
    def __init__(self, **kwargs):
        for propname in kwargs:
            self.set_property(propname, kwargs[propname])
</code></pre>
<p>In this case, the kwargs are only intended to be settable properties of an instance of that class, so to me it would make sense to write the definition as follows:</p>
<pre><code>class MyObj:
    def __init__(self, **properties):
        for propname in properties:
            self.set_property(propname, properties[propname])
</code></pre>
<p>That way, one only need look at the method's signature to get an idea of what the kwargs are for.</p>
<p>Generally, I believe convention is a good thing. However, it seems to me that always using <code>args</code> and <code>kwargs</code> is a missed opportunity to convey useful information to the user of an API about the nature of a function/method's args and kwargs. After all, the fact that they are unnamed or named arguments is already made clear by the presence of the single or double asterisk.</p>
<p>Does anyone have examples of alternate names for args and kwargs being used in real-world, multi-developer code or is it just too against the grain to use other variable names for these constructs?</p>
<p>If it really is just a horrible, horrible idea to not use these conventional names, what is the reason for that?</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't see any reason against using context specific names, such as ...</p>
<p><code>my_sum(*numbers)</code>, <code>my_parser(*strings, **flags)</code>, etc.</p>
<p>The <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer"><code>print</code></a> docs say <code>*objects</code>.</p>
<p>The <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> docs say <code>*iterables</code>.</p>
<p><a href="https://docs.python.org/3.7/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain</code></a> uses <code>*iterables</code> in the docs and in the docstring.</p>
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; chain.__doc__.splitlines()[0]
'chain(*iterables) --&gt; chain object'
</code></pre>
<p><a href="https://docs.python.org/3.7/library/collections.html#collections.ChainMap" rel="nofollow noreferrer"><code>collections.ChainMap</code></a> uses <code>*maps</code> in the docs and in <code>__init__</code>.</p>
<pre><code>&gt;&gt;&gt; from collections import ChainMap
&gt;&gt;&gt; from inspect import signature
&gt;&gt;&gt; signature(ChainMap.__init__)
&lt;Signature (self, *maps)&gt;
</code></pre>
<p>Feel free to hunt for more examples.</p>
</div>
