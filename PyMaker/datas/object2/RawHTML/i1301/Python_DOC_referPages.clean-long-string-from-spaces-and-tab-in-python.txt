<div class="post-text" itemprop="text">
<p>supposing to have a long string to create and this string is within a method of a class, what is the best way to write the code?</p>
<pre><code>def printString():

    mystring = '''title\n
    {{\\usepackage}}\n
    text continues {param}
    '''.format(param='myParameter')

    return mystring
</code></pre>
<p>this method is well formatted but the final string has unwanted spaces:</p>
<pre><code>a = printString()
print(a)
title

    {\usepackage}

    text continues myParameter
</code></pre>
<p>while this method gives the corrected results but the code can become messy if the string(s) is long:</p>
<pre><code>def printString():

    mystring = '''title\n
{{\\usepackage}}\n
text continues {param}
    '''.format(param='myParameter')

    return mystring

a = printString()
print(a)

title

{\usepackage}

text continues myParameter
</code></pre>
<p>some hints to have a good code quality and the results?</p>
</div>
<div class="post-text" itemprop="text">
<p>Try enclosing the string you want with brackets, like so:</p>
<pre><code>def printString():

    mystring = ('title\n'
                '{{\\usepackage}}\n'
                'text continues {param}').format(param='myParameter')

    return mystring
</code></pre>
<p>This would allow you to break the string to several lines while c=having control over the whitespace.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use brackets to maintain tidiness of long strings inside functions.</p>
<pre><code>def printString():
    mystring = ("title\n"
    "{{\\usepackage}}\n"
    "text continues {param}"
    ).format(param='myParameter')

    return (mystring)

print(printString())
</code></pre>
<p>Results in:</p>
<pre><code>title
{\usepackage}
text continues myParameter
</code></pre>
<p>You may also wish to explicitly use the <code>+</code> symbol to represent string concatenation, but that changes this from a compile time operation to a runtime operation. <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-literal-concatenation" rel="nofollow noreferrer">Source</a></p>
<pre><code>def printString():
    mystring = ("title\n" +
    "{{\\usepackage}}\n" +
    "text continues {param}"
    ).format(param='myParameter')

    return (mystring)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>re.sub</code> to cleanup any spaces and tabs at the beginning of each lines</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; def printString():
...     mystring = '''title\n
...     {{\\usepackage}}\n
...     text continues {param}
...     '''.format(param='myParameter')
...
...     return re.sub(r'\n[ \t]+', '\n', mystring)
... 
</code></pre>
<p>This gives the following o/p</p>
<pre><code>&gt;&gt;&gt; a = printString()
&gt;&gt;&gt; print (a)
title

{\usepackage}

text continues myParameter
</code></pre>
</div>
<span class="comment-copy">clean and straightforward, thanks!</span>
