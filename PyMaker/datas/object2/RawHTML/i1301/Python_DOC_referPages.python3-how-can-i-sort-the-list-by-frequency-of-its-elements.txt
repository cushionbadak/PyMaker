<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/25815377/sort-list-by-frequency-in-python">Sort list by frequency in python</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>I'm working on the code that can analyze the input text.
One of the functions I would like to ask for help is that making a list of words used in order of descending frequency.</p>
<p>By referring the similar topics in stack overflow, I was able to retain only alphanumeric characters (remove all quotation / punctuation etc) and put each words into the list.</p>
<p>Here is the list I have now. (variable called word_list)</p>
<blockquote>
<p>['Hi', 'beautiful', 'creature', 'Said', 'by', 'Rothchild', 'the',
  'biggest', 'enemy', 'of', 'Zun', 'Zun', 'started', 'get', 'afraid',
  'of', 'him', 'As', 'her', 'best', 'friend', 'Lia', 'can', 'feel',
  'her', 'fear', 'Why', 'the', 'the', 'hell', 'you', 'are', 'here']</p>
</blockquote>
<p>(FYI, text file is just random fanfiction I found from the web)</p>
<p>However, I'm having trouble to modify this list to the list in order of descending frequency - for example, there are 3 'the' in that list, so 'the' becomes the first element of the list. next element would be 'of', which occurring 2 times.</p>
<p>I tried several things similar to my case but keep displaying error (Counter, sorted). </p>
<p>Can someone teach me how can I sort the list?</p>
<p>In addition, after sorting the list, how can I retain only 1 copy for repeating ones? (my current idea is using for loop and indexing - compare with previous index, remove if it's same.) </p>
<p>Thank you. </p>
</div>
<div class="post-text" itemprop="text">
<p>You <em>can</em> use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>itertools.Counter</code></a> for your sorting in different ways:</p>
<pre><code>from collections import Counter

lst = ['Hi', 'beautiful', 'creature', 'Said', 'by', 'Rothchild', 'the', 'biggest', 'enemy', 'of', 'Zun', 'Zun', 'started', 'get', 'afraid', 'of', 'him', 'As', 'her', 'best', 'friend', 'Lia', 'can', 'feel', 'her', 'fear', 'Why', 'the', 'the', 'hell', 'you', 'are', 'here']

c = Counter(lst)  # mapping: {item: frequency}

# now you can use the counter directly via most_common (1.)
lst = [x for x, _ in c.most_common()]
# or as a sort key (2.)
lst = sorted(set(lst), key=c.get, reverse=True)

# ['the', 'Zun', 'of', 'her', 'Hi', 'hell', 'him', 'friend', 'Lia', 
#  'get', 'afraid', 'Rothchild', 'started', 'by', 'can', 'Why', 'fear', 
#  'you', 'are', 'biggest', 'enemy', 'Said', 'beautiful', 'here', 
#  'best', 'creature', 'As', 'feel']
</code></pre>
<p>These approaches use either the <code>Counter</code> keys (1.) or <code>set</code> for the removal of duplicates.</p>
<p>However, if you want the sort to be stable with regard to the original list (keep order of occurrence for equal frequency items), you might have to do this, following the <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>collections.OrderedDict</code></a> based recipe for duplicate removal:</p>
<pre><code>from collections import OrderedDict

lst = sorted(OrderedDict.fromkeys(lst), key=c.get, reverse=True)

# ['the', 'of', 'Zun', 'her', 'Hi', 'beautiful', 'creature', 'Said', 
# 'by', 'Rothchild', 'biggest', 'enemy', 'started', 'get', 'afraid', 
# 'him', 'As', 'best', 'friend', 'Lia', 'can', 'feel', 'fear', 'Why',  
# 'hell', 'you', 'are', 'here']
</code></pre>
</div>
<span class="comment-copy">Looks like I'm getting slow, +1 Although I would probably use <code>list.sort</code> since it seems that's what OP wanted.</span>
<span class="comment-copy">@coldspeed The OP writes his attempts included <code>sorted</code>. Also, which <code>list</code> are we calling <code>list.sort</code> on? The original list would cause more work than needed as the duplicates have not been removed yet. <code>sorted</code> has the advantage that it can deal with a <code>set</code> or <code>DictKeys</code> object turning it into a <code>list</code> in one go.</span>
<span class="comment-copy">Thank you so much for the answer. I think I understood clearly about Counter by going over the code you wrote and testing with mine.</span>
<span class="comment-copy">Also, thank you for ordereddict which was the thing that I didn't know!</span>
