<div class="post-text" itemprop="text">
<p>I have the following URL:</p>
<pre><code>https://ide50-username.cs50.io/search?q=New%20Haven+CT
</code></pre>
<p>When I use the Flask method:</p>
<p><code>q = request.args.get("q")</code> </p>
<p>it simply returns me the string "New Haven CT", essentially converting both <code>%20</code> &amp; <code>+</code> to a blank space   </p>
<p>I want to read the arguments "New Haven" &amp; "CT" from my URL separately as two items in a list. how do I do it?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you really want to separate arguments with <code>+</code>. You can parse the URL by yourself.(Warning: it's not as safe as <code>urllib.parse.parse_qs</code>.)</p>
<p><code>urllib.parse.unquote</code> function doesn't parse <code>+</code> to space, <code>urllib.parse.unquote_plus</code> does. <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.unquote_plus" rel="nofollow noreferrer">See the docs</a>.</p>
<p>An example:</p>
<pre><code>from urllib.parse import unquote


def parse_query_string(query_string):
    pairs = [s2 for s1 in query_string.split('&amp;') for s2 in s1.split(';')]
    parse_result = {}
    for pair in pairs:
        name_value = pair.split('=', 1)
        if len(name_value) != 2:
            continue
        if len(name_value[1]):
            name = unquote(name_value[0])
            _value = unquote(name_value[1])

            # separate value with +
            values = _value.split('+')
            if name in parse_result:
                parse_result[name].extend(values)
            else:
                parse_result[name] = values
    return parse_result


@app.route('/search')
def search():
    # Get raw query_string
    raw_query_string = request.query_string.decode()
    queries = parse_query_string(raw_query_string)
    q = queries.get('q')
    return ''
</code></pre>
<p>And there's a simple way, if you can make the url like <code>q=New%20Haven&amp;q=CT</code>, Flask can parse <code>q</code> to multi values.</p>
<pre><code>print(request.args)
# output: ImmutableMultiDict([('q', 'New Haven'), ('q', 'CT')])
</code></pre>
<p>Or parse it by yourself using <code>urllib.parse.parse_qs</code>.</p>
<pre><code>raw_query_string = request.query_string.decode()
print(parse_qs(raw_query_string))
# output: {'q': ['New Haven', 'CT']}
</code></pre>
</div>
<span class="comment-copy">%20 and + <i>do</i> both represent spaces in URLs; if that should be a literal character + it needs to be URL encoded.</span>
