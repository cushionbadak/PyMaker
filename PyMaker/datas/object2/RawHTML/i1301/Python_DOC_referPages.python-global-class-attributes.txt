<div class="post-text" itemprop="text">
<p>I want to create a baseclass that has an attribute which should not change. Any derived class from this baseclass should have this attribute aswell. My idea was:</p>
<pre><code>class baseclass(object):
    flag = "some attr for all classes"
    def __init__(self, baseattr):
        self.baseattr = baseattr


class child(baseclass):
    def __init__(self, baseattr, childattr):
        super(child, self).__init__(baseattr)
        self.childattr = childattr
</code></pre>
<p>My thinking was, if I know look at child.__dict__:</p>
<pre><code>print(child.__dict__["flag"])
</code></pre>
<p>it should return "special attribute ... baseclass" but instead I get a KeyError: </p>
<pre><code>Traceback (most recent call last):
  File "./test.py", line 14, in &lt;module&gt;
    print(child.__dict__["flag"])
KeyError: 'flag'
</code></pre>
<p>while when calling baseclass.__dict__['flag']
everything is fine. Is there a way to set flags for all derived class that inherit from baseclass?</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, I think it would be nice if you could review the concepts related to a <a href="https://docs.python.org/3/reference/compound_stmts.html#class-definitions" rel="nofollow noreferrer">Class definition</a> so you can understand the <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">difference between a class instance and a class object</a>.</p>
<p>Overall, the <code>__dict__</code> that you're trying to access implements the object namespace. It was not suppose to be accessed directly as you're trying to do. But for the sake of understanding I'll use it to illustrate the <code>class instance</code> vs <code>class object</code> difference.</p>
<p>Calling <code>__dict__</code> as you were will get you the dict containing the attributes of your <code>child</code> class object (the default ones and the ones you defined in your Class definition):</p>
<blockquote>
<p>&gt;&gt;&gt; child.<strong>dict</strong></p>
<p>dict_proxy({'<strong>module</strong>': '<strong>main</strong>', '<strong>doc</strong>': None, '<strong>init</strong>': })</p>
</blockquote>
<p>However, when you decided to put <code>flag</code> in your <code>baseclass</code> like you did, you were defining it as a part of your <code>baseclass</code> class object. It is not declared each time for instance, it was declared once you imported your class definition. Therefore, you can see <code>flag</code> if you do:</p>
<blockquote>
<p>&gt;&gt;&gt; baseclass.<strong>dict</strong></p>
<p>dict_proxy({'<strong>module</strong>': '<strong>main</strong>', 'flag': 'some attr for all classes', '<strong>dict</strong>': , '<strong>weakref</strong>': , '<strong>doc</strong>': None, '<strong>init</strong>': })</p>
</blockquote>
<p>Finally, if you access an object instance <code>__dict__</code> you'll see the attributes you declared with <code>self</code> (including <code>baseattr</code> that was declared when you called <code>super</code>):</p>
<blockquote>
<p>&gt;&gt;&gt; child('some base attr', 'some child attr').<strong>dict</strong></p>
<p>{'childattr': 'some child attr', 'baseattr': 'some base attr'}</p>
</blockquote>
<p>That being said, you already have to access to <code>flag</code> from any object instance. Being more specific, you have access to every attribute defined in the class definition, the inherit class definition and in your instance. So I really recommend you stop using <code>__dict__</code> and access things the way they were intended to:</p>
<blockquote>
<p>&gt;&gt;&gt; your_obj_instance = child('some base attr', 'some child attr')</p>
<p>&gt;&gt;&gt; your_obj_instance.childattr</p>
<p>'some child attr'</p>
<p>&gt;&gt;&gt; your_obj_instance.baseattr</p>
<p>'some base attr'</p>
<p>&gt;&gt;&gt; your_obj_instance.flag</p>
<p>'some attr for all classes'</p>
</blockquote>
</div>
<span class="comment-copy"><a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> please, I've tested and seems to work here. are you using flag or baseattr???</span>
<span class="comment-copy"><code>c</code> is a <code>child</code>: <code>&gt;&gt;&gt; c.__dict__ {'baseattr': 12, 'childattr': 14}</code></span>
<span class="comment-copy">but I do not want to access the attributes that are passed when the class gets instantiated, but I want to access the flag which is already defined when the baseclass gets defined.</span>
<span class="comment-copy">You should be able to get it by using <code>child.flag</code>.</span>
<span class="comment-copy">Thank you for your comment. I'm am an autodidact, as I have been "forced" to work with python without ever being educated about it. I am therefor sorry if I've made some arguably avoidable mistakes. The problem is, that I am forced to make decisions on how to treat the class object based on a flag that it has before it ever gets instantiated.</span>
