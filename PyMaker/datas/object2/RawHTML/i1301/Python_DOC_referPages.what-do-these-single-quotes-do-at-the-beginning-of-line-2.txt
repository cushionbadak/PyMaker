<div class="post-text" itemprop="text">
<p>I found the following code in some random website explaining concatenating:</p>
<pre><code>data_numb = input("Input Data, then press enter: ")
numb = ''.join(list(filter(str.isdigit, data_numb)))
print('(' + numb[:3] + ') ' + numb[3:6] + '-' + numb[6:])
</code></pre>
<p>and I was wondering what the single quotes do in the </p>
<pre><code>numb = ''.join(
</code></pre>
<p>Any help is appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3.7/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>join(iterable)</code></a> is a method from the <code>str</code> class.</p>
<blockquote>
<p>Return a string which is the concatenation of the strings in iterable.
  A TypeError will be raised if there are any non-string values in
  iterable, including bytes objects. The separator between elements is
  the string providing this method.</p>
</blockquote>
<p><code>''.join(("Hello", "World"))</code> will return <code>'HelloWorld'</code>.</p>
<p><code>';'.join(("Hello", "World", "how", "are", "you"))</code> will return <code>'Hello;World;how;are;you'</code>.</p>
<p><code>join</code> is very helpful if you need to add a delimiter between each element from a list (or any iterable) of strings.</p>
<p>It looks like nothing but if you do not use <code>join</code>, this kind of operation is often ugly to implement because of edge effects:</p>
<p>For a list or tuple of strings : </p>
<pre><code>def join(list_strings, delimiter):
    str_result = ''
    for e in list_strings[:-1]:
        str_result += e + delimiter

    if list_strings:
        str_result += list_strings[-1]

    return str_result
</code></pre>
<p>For any iterable : </p>
<pre><code>def join(iterable, delimiter):
    iterator = iter(iterable)
    str_result = ''
    try: 
        str_result += next(iterator)
        while True:
            str_result += delimiter + next(iterator)
    except StopIteration:
        return str_result
</code></pre>
<p>Because <code>join</code> works on any iterable, you don't need to create a list from the filter result.</p>
<pre><code>numb = ''.join(filter(str.isdigit, data_numb))
</code></pre>
<p>works as well</p>
</div>
<div class="post-text" itemprop="text">
<p>Join method is used to concatenate a string with any iterable object. In this example, the first string is an empty string, also represented by two single quotes, <code>''</code> (don't confuse the single quotes with a single double quote).</p>
<p>The <code>join()</code> method of a string object concatenates it with another iterable provided. So, if the first string is an empty string, the resultant string is the concatenated output of the elements in the iterable.</p>
<p><strong>What is its use:</strong> </p>
<ol>
<li><p>It can be used to concatenate a list of strings. For example:</p>
<pre><code>a = ['foo', 'bar']
b = ''.join(a)
print(b) # foobar
</code></pre></li>
<li><p>It can be used to concatenate strings. (Since a string is an iterable, as well)</p>
<pre><code>a = "foobar"
b = ''.join(a)
print(b) # foobar
</code></pre></li>
</ol>
<p>You can think of more use cases, but this is just a gist of it. You can also refer to the documentation <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer">here</a>.</p>
</div>
<span class="comment-copy">Have a look at <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join</code></a> in the documentation. In this case you have an empty string.</span>
<span class="comment-copy">They tell <code>join</code> the character with which to join a sequence</span>
<span class="comment-copy">Can someone fix the code marking? I cannot get it (the four spaces) to work. Maybe I am using it inside a list? Currently I have marked the codeblocks using backticks (`).</span>
<span class="comment-copy">You shouldn't use backticks for multi-line blocks of code. Since the list already puts 4 spaces of indentation into the editor, you need to indent your lines of code an extra 4 spaces (making 8 in total)</span>
<span class="comment-copy">You're right. I just used it as a work around. I forgot that the list has to be also given 4 spaces. :P Thanks, though. :D</span>
