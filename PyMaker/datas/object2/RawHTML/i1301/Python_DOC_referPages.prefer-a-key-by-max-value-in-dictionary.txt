<div class="post-text" itemprop="text">
<p>You can get the key with max value in dictionary this way max(d, key=d.get).
The question when two or more keys have the max how can you set a preferred key.</p>
<p>I found a way to do this by perpending the key with a number.</p>
<p>Is there a better way ? </p>
<pre><code>In [56]: d = {'1a' : 5, '2b' : 1, '3c' : 5 }

In [57]: max(d, key=d.get)
Out[57]: '1a'

In [58]: d = {'4a' : 5, '2b' : 1, '3c' : 5 }

In [59]: max(d, key=d.get)
Out[59]: '3c'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The function given in the  <code>key</code> argument can return a tuple. The second element of the tuple will be used if there are several maximums for the first element. With that, you can use the method you want, for example with two dictionnaries:</p>
<pre><code>d = {'a' : 5, 'b' : 1, 'c' : 5 }
d_preference = {'a': 1, 'b': 2, 'c': 3}
max(d, key=lambda key: (d[key], d_preference[key]))
# &gt;&gt; 'c'

d_preference = {'a': 3, 'b': 2, 'c': 1}
max(d, key=lambda key: (d[key], d_preference[key]))
# &gt;&gt; 'a'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a similar idea to <a href="https://stackoverflow.com/a/53661434/9209546">@AxelPuig's solution</a>. But, instead of relying on an auxiliary dictionary each time you wish to retrieve an item with <code>max</code> or <code>min</code> value, you can perform a single sort and utilise <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>collections.OrderedDict</code></a>:</p>
<pre><code>from collections import OrderedDict

d = {'a' : 5, 'b' : 1, 'c' : 5 }

d_preference1 = {'a': 1, 'b': 2, 'c': 3}
d_preference2 = {'a': 3, 'b': 2, 'c': 1}

d1 = OrderedDict(sorted(d.items(), key=lambda x: -d_preference1[x[0]]))
d2 = OrderedDict(sorted(d.items(), key=lambda x: -d_preference2[x[0]]))

max(d1, key=d.get)  # c
max(d2, key=d.get)  # a
</code></pre>
<p>Since <code>OrderedDict</code> is a subclass of <code>dict</code>, there's generally no need to convert to a regular <code>dict</code>. If you are using Python 3.7+, you can use the regular <code>dict</code> constructor, since <a href="https://stackoverflow.com/questions/39980323/are-dictionaries-ordered-in-python-3-6">dictionaries are insertion ordered</a>.</p>
<p>As noted on the <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer">docs for <code>max</code></a>:</p>
<blockquote>
<p>If multiple items are maximal, the function returns the first one
  encountered.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>A slight variation on @AxelPuig's answer. You fix an order of keys in a <code>priorities</code> list and take the max with <code>key=d.get</code>.</p>
<pre><code>d = {"1a": 5, "2b": 1, "3c": 5}
priorities = list(d.keys())

print(max(priorities, key=d.get))
</code></pre>
</div>
<span class="comment-copy">Have <code>key</code> (it accepts <i>a</i> function) return a value corresponding to a <i>valid</i> ordering, based on how 'max' is defined: the 'preferred max' is larger than 'all other would-be-duplicate max' values. It is unclear what makes some key 'preferred' here: maybe there is a lookup/weight table?</span>
