<div class="post-text" itemprop="text">
<p>Some hapless coworker saved some data into a file like this:</p>
<pre><code>s = b'The em dash: \xe2\x80\x94'
with open('foo.txt', 'w') as f:
    f.write(str(s))
</code></pre>
<p>when they should have used</p>
<pre><code>s = b'The em dash: \xe2\x80\x94'
with open('foo.txt', 'w') as f:
    f.write(s.decode())
</code></pre>
<p>Now <code>foo.txt</code> looks like</p>
<pre><code>b'The em-dash: \xe2\x80\x94'
</code></pre>
<p>Instead of</p>
<pre><code>The em dash: â€”
</code></pre>
<p>I already read this file as a string:</p>
<pre><code>with open('foo.txt') as f:
    bad_foo = f.read()
</code></pre>
<p>Now how can I convert <code>bad_foo</code> from the incorrectly-saved format to the correctly-saved string?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer">literal eval</a></p>
<pre><code>from ast import literal_eval
test = r"b'The em-dash: \xe2\x80\x94'"
print(test)
res = literal_eval(test)
print(res.decode())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong><em>If you trust that the input is not malicious</em></strong>, you can use <code>ast.literal_eval</code> on the broken string.</p>
<pre><code>import ast

# Create a sad broken string
s = "b'The em-dash: \xe2\x80\x94'"

# Parse and evaluate the string as raw Python source, creating a `bytes` object
s_bytes = ast.literal_eval(s)

# Now decode the `bytes` as normal
s_fixed = s_bytes.decode()
</code></pre>
<p>Otherwise you will have to manually parse and remove or replace the offending repr'ed escapes.</p>
</div>
<div class="post-text" itemprop="text">
<p>This code is working correct in my computer. But if you still get error, this may help you</p>
<pre><code>with open('foo.txt', 'r', encoding="utf-8") as f:
    print(f.read())
</code></pre>
</div>
<span class="comment-copy"><code>.decode</code> doesn't make sense without an encoding name. Why are you using byte strings in the first place, anyway? The idiomatic way to do this is to use a Unicode string and let Python encode it when writing to a file.</span>
<span class="comment-copy">@tripleee someone else did it, and I've been tasked with undoing it :)</span>
<span class="comment-copy">I suspect nothing much more useful than <code>eval</code> can be suggested for undoing this.</span>
<span class="comment-copy">@tripleee this was intended as a self-answer. See <a href="https://stackoverflow.com/a/53730411/2954547">stackoverflow.com/a/53730411/2954547</a></span>
<span class="comment-copy">@shadowtalker there's a "answer your own question" checkbox just below the "Post Your Question" button on the Ask Question page that let's you get your answer in before the competition ;-)</span>
<span class="comment-copy">No, the problemeis that the file contains the <code>repr()</code> of the byte string.</span>
