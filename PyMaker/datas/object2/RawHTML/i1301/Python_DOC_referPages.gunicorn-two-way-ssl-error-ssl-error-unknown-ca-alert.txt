<div class="post-text" itemprop="text">
<p>I am running a Python3 app via <a href="http://docs.gunicorn.org/en/latest/index.html" rel="nofollow noreferrer">Gunicorn</a> with two-way SSL configured. This requires a local cert/key to verify the app as well as a ca_certs file to verify the client. Gunicorn relies on the standard <code>ssl</code> module in Python, particularly the <code>wrap_socket</code> method.</p>
<p>The service starts and responds to curl requests fine when I use self-signed certificates for both server and client authentication. However when I use certificates signed by another CA, I get an error <code>SSL_ERROR_UNKNOWN_CA_ALERT</code>.</p>
<p><strong>A working setup, with self-signed certs:</strong></p>
<pre><code># Server cert
openssl req \
       -newkey rsa:2048 -nodes -keyout domain.key \
       -x509 -days 365 -out domain.crt

# Client (CA) cert    
openssl req \
       -newkey rsa:2048 -nodes -keyout twoway.key \
       -x509 -days 365 -out twoway.crt
</code></pre>
<p>With Gunicorn configured as follows:</p>
<pre><code>keyfile = domain.key
certfile = domain.crt
cert_reqs = ssl.CERT_REQUIRED
ca_certs=twoway.crt
</code></pre>
<p>And curling as follows:</p>
<pre><code>curl -vk --key twoway.key --cert twoway.crt https://my.service
</code></pre>
<p>Produces a successful response:</p>
<pre><code>*   Trying 127.0.0.1...
* TCP_NODELAY set
* Connected to localhost (127.0.0.1) port 5000 (#0)
* ALPN, offering h2
* ALPN, offering http/1.1
* successfully set certificate verify locations:
*   CAfile: /etc/ssl/certs/ca-certificates.crt
  CApath: /etc/ssl/certs
* TLSv1.2 (OUT), TLS handshake, Client hello (1):
* TLSv1.2 (IN), TLS handshake, Server hello (2):
* TLSv1.2 (IN), TLS handshake, Certificate (11):
* TLSv1.2 (IN), TLS handshake, Server key exchange (12):
* TLSv1.2 (IN), TLS handshake, Request CERT (13):
* TLSv1.2 (IN), TLS handshake, Server finished (14):
* TLSv1.2 (OUT), TLS handshake, Certificate (11):
* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):
* TLSv1.2 (OUT), TLS handshake, CERT verify (15):
* TLSv1.2 (OUT), TLS change cipher, Client hello (1):
* TLSv1.2 (OUT), TLS handshake, Finished (20):
* TLSv1.2 (IN), TLS handshake, Finished (20):
* SSL connection using TLSv1.2 / ECDHE-RSA-AES256-SHA
* ALPN, server did not agree to a protocol
* Server certificate:
*  subject: C=AU; ST=Some-State; O=Internet Widgits Pty Ltd
*  start date: Dec  7 18:35:54 2018 GMT
*  expire date: Dec  7 18:35:54 2019 GMT
*  issuer: C=AU; ST=Some-State; O=Internet Widgits Pty Ltd
*  SSL certificate verify result: self signed certificate (18), continuing anyway.
&gt; GET /manage/info HTTP/1.1
&gt; Host: localhost:5000
&gt; User-Agent: curl/7.58.0
&gt; Accept: */*
&gt; 
&lt; HTTP/1.1 200 OK
&lt; Server: gunicorn/19.9.0
&lt; Date: Tue, 11 Dec 2018 18:26:19 GMT
&lt; Connection: keep-alive
&lt; Content-Type: application/json
&lt; Content-Length: 73
</code></pre>
<p><strong>A failing setup, with a different series of certs:</strong></p>
<p>With Gunicorn configured as follows:</p>
<pre><code>keyfile = my_service_key.key
certfile = my_service_cert.crt
cert_reqs = ssl.CERT_REQUIRED
ca_certs = my_trusted_clients.crt
</code></pre>
<p>And curling as follows:</p>
<pre><code>curl -vk --key my_trusted_key.key --cert my_trusted_clients.crt https://my.service
</code></pre>
<p>Produces an error:</p>
<pre><code>About to connect() to localhost port 5000 (#0)
Initializing NSS with certpath: sql/etc/pki/nssdb
warning: ignoring value of ssl.verifyhost
skipping SSL peer certificate verification
NSS: client certificate from file
    subject: CN=mycn,OU=abc,O=def,...
NSS error -12195
Closing connection #0
SSL connect error
curl: (35) SSL connect error
</code></pre>
<p>Any thoughts on whether I am configuring this the wrong way? And why self-signed certs are working but other certs are not?</p>
<p>Note this config worked previously when using <a href="https://www.stunnel.org/static/stunnel.html#SERVICE-LEVEL-OPTIONS" rel="nofollow noreferrer">Stunnel</a>, where I set the <code>verify</code> level to 4 ("Ignore the chain and only verify the peer certificate."). If there is something similar in Python I believe that would get me in the right direction.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't think that this is be possible as of Gunicorn 19.9.</p>
<p>As well as having the complete certificate chain on the server, in order to validate the client/peer certificate, I believe you will need to be able to <a href="https://docs.python.org/3/library/ssl.html#verifying-certificates" rel="nofollow noreferrer">configure the <code>SSLContext</code></a>, and especially be able to set <a href="https://docs.python.org/3/library/ssl.html#ssl.CERT_REQUIRED" rel="nofollow noreferrer"><code>ssl.CERT_REQUIRED</code></a> when in server-mode.</p>
<p>Gunicorn 19.9 (and master at the time of writing) does not currently use the <code>SSLContext</code>-based wrapper on the connection, so this is not possible, see <a href="https://github.com/benoitc/gunicorn/issues/1140" rel="nofollow noreferrer">https://github.com/benoitc/gunicorn/issues/1140</a> .</p>
</div>
