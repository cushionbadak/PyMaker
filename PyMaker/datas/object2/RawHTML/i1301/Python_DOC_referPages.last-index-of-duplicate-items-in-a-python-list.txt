<div class="post-text" itemprop="text">
<p>Does anyone know how I can get the last index position of duplicate items in a python list containing duplicate and non-duplicate items? 
I have a list sorted in ascending order with <code>[1, 1, 1, 2, 2, 3, 3, 4, 5]</code> 
I want it to print the last index of duplicate items and index on non-duplicate items like this</p>
<pre><code>2
4
6
7
8
</code></pre>
<p>I tried doing this way but could only print the starting index of duplicate elements and misssed non-duplicate items.</p>
<blockquote>
<pre><code>id_list = [1, 1, 1, 2, 2, 3, 3, 4, 5]
for i in range(len(id_list)):
    for j in range(i+1,len(id_list)):
        if id_list[i]==id_list[j]:
            print(i)
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>enumerate</code> and check the next index in the list. If an element is not equal to the element in the next index, it is the last duplicate:</p>
<pre><code>lst = [1, 1, 1, 2, 2, 3, 3, 4, 5]
result = [i for i, x in enumerate(lst) if i == len(lst) - 1 or x != lst[i + 1]]

print(result)
# [2, 4, 6, 7, 8]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Loop on the list using <code>enumerate</code> to get indexes &amp; values, and use a dictionary and retain the last index (last index "wins" when there are duplicates). In the end, sort the indexes (as dictionaries aren't ordered, but you can use an <code>OrderedDict</code>):</p>
<pre><code>import collections

lst = [1, 1, 1, 2, 2, 3, 3, 4, 5]
d = collections.OrderedDict()

for i,v in enumerate(lst):
    d[v] = i

print(list(d.values()))
</code></pre>
<p>prints:</p>
<pre><code>[2, 4, 6, 7, 8]
</code></pre>
<p>The advantage of this solution is that it works even if the duplicates aren't consecutive.</p>
<p>Python 3.7 guarantees the order of the base dictionaries so a simple dict comprehension solves it:</p>
<pre><code>{v:i for i,v in enumerate(lst)}.values()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a list comprehension with <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> and <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a>. The last value will <em>always</em> be in scope, so we can include this at the end explicitly.</p>
<pre><code>L = [1, 1, 1, 2, 2, 3, 3, 4, 5]

res = [idx for idx, (i, j) in enumerate(zip(L, L[1:])) if i != j] + [len(L) - 1]

print(res)

# [2, 4, 6, 7, 8]
</code></pre>
</div>
<span class="comment-copy">Is the list always sorted?</span>
<span class="comment-copy">@slider  Yes the list is always sorted in ascending order</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/522372/finding-first-and-last-index-of-some-value-in-a-list-in-python">Finding first and last index of some value in a list in Python</a></span>
<span class="comment-copy">Or just <code>{x:i for i,x in enumerate(lst)}</code>, particularly in newer version of Python where <code>dict</code> retains insertion order.</span>
<span class="comment-copy">yes, I used <code>OrderedDict</code> but yes.</span>
