<div class="post-text" itemprop="text">
<p>I'm just too confused, and can't come up with proper way to do this:</p>
<p>I have this directed graph:
<a href="https://i.stack.imgur.com/SoeFv.jpg" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/SoeFv.jpg"/></a></p>
<p>and have two dictionaries, which show outgoing and incoming scores</p>
<pre><code>graph_to = {'a':{'b':2,'c':3},'b':{'a':1,'d':4}}
graph_from = {'a':{'b':1},'b':{'a':2},'c':{'a':3},'d':{'b':4}}
</code></pre>
<p>For example, in <code>graph_to</code>, node <code>a</code> goes to node <code>b</code> with score 2 and to node <code>c</code> with score 3; and in <code>graph_from</code> node <code>a</code> receives score 1 from node <code>b</code>.</p>
<p>I want to create <code>undirected graph</code> such that scores between two nodes are summed up. It should become this dictionary:</p>
<pre><code>graph = {
    'a':{'b':3,'c':3},
    'b':{'a':3,'d':4},
    'c':{'a':3},
    'd':{'b':4}
}
</code></pre>
<p><a href="https://i.stack.imgur.com/mgXeP.jpg" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/mgXeP.jpg"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>You could try to make a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict()</code></a> of <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter()</code></a> objects, and sum the edge counts as you iterate both graph dicts:</p>
<pre><code>from collections import defaultdict
from collections import Counter
from pprint import pprint

graph_to = {'a':{'b':2,'c':3},'b':{'a':1,'d':4}}
graph_from = {'a':{'b':1},'b':{'a':2},'c':{'a':3},'d':{'b':4}}

undirected_graph = defaultdict(Counter)

def sum_edges(graph, result):
    for node, edges in graph.items():
        for edge in edges:
            result[node][edge] += edges[edge]

sum_edges(graph_to, undirected_graph)
sum_edges(graph_from, undirected_graph)

pprint(undirected_graph)
</code></pre>
<p>Which gives:</p>
<pre><code>defaultdict(&lt;class 'collections.Counter'&gt;,
            {'a': Counter({'b': 3, 'c': 3}),
             'b': Counter({'d': 4, 'a': 3}),
             'c': Counter({'a': 3}),
             'd': Counter({'b': 4})})
</code></pre>
<p><strong>Note:</strong> <code>Counter</code> and <code>defaultdict</code> are subclasses of <code>dict</code>, so you can treat them the same as normal dictionaries. </p>
<p>If you really want normal dictionaries in the final undirected graph, you can use either of these dict comprehensions:</p>
<pre><code>dict((k, dict(v)) for k, v in undirected_graph.items())
# {'a': {'b': 3, 'c': 3}, 'b': {'a': 3, 'd': 4}, 'c': {'a': 3}, 'd': {'b': 4}}

{k: dict(v) for k, v in undirected_graph.items()}
# {'a': {'b': 3, 'c': 3}, 'b': {'a': 3, 'd': 4}, 'c': {'a': 3}, 'd': {'b': 4}}
</code></pre>
<p>Additionally, you can also use <a href="https://docs.python.org/3/library/stdtypes.html#dict.update" rel="nofollow noreferrer"><code>dict.update()</code></a> here to refactor <code>sum_edges()</code>:</p>
<pre><code>def sum_edges(graph, result):
    for node, edges in graph.items():
        result[node].update(edges)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I hope we appreciate taking things in own hand, here's with simple logic</p>
<pre><code>    out_dict = {}
    for key in graph_to : 
        for sub_key in graph_to[key]:
            if  key in graph_from and sub_key in graph_from[key]:
                    out_dict[key] = {sub_key: graph_to[key][sub_key] + graph_from[key][sub_key]}
            else:
                    out_dict[key].update({sub_key: graph_to[key][sub_key]})
    graph_from.update(out_dict)
    print(graph_from)
</code></pre>
<p>Output: </p>
<pre><code>{'a': {'b': 3, 'c': 3}, 'b': {'a': 3, 'd': 4}, 'c': {'a': 3}, 'd': {'b': 4}}
</code></pre>
</div>
