<div class="post-text" itemprop="text">
<p>Newbie here...Trying to write a function that takes a string and replaces all the characters with their respective dictionary values.
Here is what I have:</p>
<pre><code>def alphabet_position(text):

    dict = {'a':'1','b':'2','c':'3','d':'4','e':'5','f':'6','g':'7','h':'8':'i':'9','j':'10','k':'11','l':'12','m':'13','n':'14','o':'15','p':'16','q':'17','r':'18','s':'19','t':'20','u':'21','v':'22','w':'23','x':'24','y':'25','z':'26'}
    text = text.lower()
    for i in text:
        if i in dict:
            new_text = text.replace(i, dict[i])
    print (new_text)
</code></pre>
<p>But when I run:</p>
<pre><code>alphabet_position("The sunset sets at twelve o' clock.")
</code></pre>
<p>I get:</p>
<pre><code>the sunset sets at twelve o' cloc11.
</code></pre>
<p>meaning it only changes the last character in the string. Any ideas? Any input is greatly appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>Following your logic you need to create a <code>new_text</code> string and then iteratively replace its letters. With your code, you are only replacing one letter at a time, then start from scratch with your original string:</p>
<pre><code>def alphabet_position(text):

    dict = {'a':'1','b':'2','c':'3','d':'4','e':'5','f':'6','g':'7','h':'8','i':'9','j':'10','k':'11','l':'12','m':'13','n':'14','o':'15','p':'16','q':'17','r':'18','s':'19','t':'20','u':'21','v':'22','w':'23','x':'24','y':'25','z':'26'}
    new_text = text.lower()
    for i in new_text:
        if i in dict:
            new_text = new_text.replace(i, dict[i])
    print (new_text)
</code></pre>
<p>And as suggested by Kevin, you can optimize a bit using <code>set</code>. (adding his comment here since he deleted it: <code>for i in set(new_text):</code>) Note that this might be beneficial only for large inputs though...</p>
</div>
<div class="post-text" itemprop="text">
<p>As your question is generally asking about "Alphabet position in python", I thought I could complement the already accepted answer with a different approach. You can take advantage of <a href="https://docs.python.org/2/library/string.html" rel="nofollow noreferrer">Python's string lib</a>, <a href="https://stackoverflow.com/q/704152/10657880">char to int conversion</a> and <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> to do the following:</p>
<pre><code>import string


def alphabet_position(text):
    alphabet = string.ascii_lowercase
    return ''.join([str(ord(char)-96) if char in alphabet else char for char in text])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your approach is not very efficient. You are recreating the string for every character.</p>
<p>There are 5 <code>e</code> characters in your string. This means replace is called 5 times, even though it only actually needs to do anything the first time.</p>
<p>There is another approach that might be more efficient. We cant use <code>str.translate</code> unfortunately, as it's remit is <a href="https://stackoverflow.com/a/25202070/1540468">one to one replacements</a>.</p>
<p>We just iterate the input and produce a new string character by character.</p>
<pre><code>def alphabet_position2(text):

    d = {L: str(i) for i, L in enumerate('abcdefghijklmnopqrstuvwxyz', 1)}

    result = ''
    for t in text.lower():
        result += d.get(t, t)

    return result
</code></pre>
</div>
<span class="comment-copy"><code>new_text</code> keeps being replaced by the latest result.</span>
<span class="comment-copy">You create a new variable on each iteration, all but the final one are discarded by the time the loop completes.</span>
<span class="comment-copy">@KevinFang good spot, fixed.</span>
<span class="comment-copy">I didn't see this answer when I posted and edited. Just deleted mine and voted for yours</span>
