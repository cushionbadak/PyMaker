<div class="post-text" itemprop="text">
<p>I have a method that takes user inputs and validates them until they enter a correct value. I am not sure how to write a unit test for this method since it already validates the user input.</p>
<pre><code>def refreshtime_validation():
    while True:
        try:
            runtime_input = float(raw_input("Enter Refresh Time (in seconds): "))
        except ValueError:
            print "\n**Please enter a valid number (Must be an integer).**\n"
            continue
        if runtime_input &lt;= 0:
            print "\n**Please enter a valid number (Must be greater than 0).**\n"
            continue
        else:
            return runtime_input
</code></pre>
<p>How do I go about in writing a unit test for this method? The only one I have so far is</p>
<pre><code>self.assertEquals('1','1')    
self.assertEquals('100','100')
self.assertEquals('100000','100000')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer">mock</a> to <a href="https://stackoverflow.com/a/41274139/10657880">mock a raw_input in Python</a> and you can <a href="https://stackoverflow.com/a/34738440/10657880">capture standard output by redirecting <code>sys.stdout</code> to a <code>StringIO</code></a>. This way you can mock your function input and test both invalid and valid cases:</p>
<pre><code>import sys
import mock
import unittest
import StringIO
import __builtin__


# [..] your code


class Test(unittest.TestCase):
    @mock.patch.object(__builtin__, 'raw_input')
    def test_refreshtime_validation(self, mocked_raw_input):
        my_stdout = StringIO.StringIO()
        sys.stdout = my_stdout
        mocked_raw_input.side_effect = ['error', '0', '1']
        outputs = '\n**Please enter a valid number (Must be an integer).**\n'+\
            '\n\n**Please enter a valid number (Must be greater than 0).**\n\n'
        valid_value = refreshtime_validation()
        sys.stdout = sys.__stdout__
        self.assertEquals(my_stdout.getvalue(), outputs)
        self.assertEquals(valid_value, 1)


unittest.main()
</code></pre>
</div>
