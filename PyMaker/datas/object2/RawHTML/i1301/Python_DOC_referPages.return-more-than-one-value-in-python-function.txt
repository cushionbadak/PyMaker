<div class="post-text" itemprop="text">
<p>I was trying to use *args with a for loop in python, however I don't see how to return all the values passed to the function, which should return all the even numbers</p>
<pre><code>def f_even(*args):
    for item in args:
        if item%2 == 0:
            return item
</code></pre>
<p>The above code returns only the first value, as I guess after the return it goes out of the function. Indeed, if I use print instead, it works</p>
<p>I'm trying to find a way to return a tuple with all the even numbers when I pass let's say (1,2,3,4,5) to the function</p>
<p>Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>In python you can use list comprehension to do this. will make you code more readable and will shrink it too.   </p>
<pre><code>def f_even(*args):
   return [elem for elem in args if elem % 2 == 0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could slightly modify you function and make it a generator by using <code>yield</code>. This way your function wont end after returning first even number but will keep yielding them one by one.</p>
<pre><code>def f_even(*args):
    for item in args:
          if item%2 == 0:
             yield item

for i in f_even(1,2,3,4,5):
    print(i)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>2
4
</code></pre>
<hr/>
<p>Or if you want to store all yielded values:</p>
<pre><code>even_numbers = list(f_even(1,2,3,4,5))
print(even_numbers) # -&gt; [2, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Done, thank you all!!</p>
<p><code>def f_even(*args):
    mylist = []
    for item in args:
          if item%2 == 0:
            mylist.append(item)
    return mylist</code></p>
</div>
<span class="comment-copy">So, return a tuple? <code>return x, y</code> is perfectly valid. Having a <code>return</code> inside a <code>for</code> loop, though, probably isn't what you wanted. <code>return</code> will immediately break you out of the function.</span>
<span class="comment-copy">You should read <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/datastructures.html</a> and learn to use lists.</span>
<span class="comment-copy">You can, for example, store the values to be returned in a list, then return the list. If you're feeling adventurous, it may be time to learn about generators!</span>
<span class="comment-copy">Perhaps you should look into <a href="https://wiki.python.org/moin/Generators" rel="nofollow noreferrer">generators</a> and the <a href="https://docs.python.org/3/reference/simple_stmts.html#the-yield-statement" rel="nofollow noreferrer"><code>yield</code></a> statement?</span>
<span class="comment-copy">This is through list comprehension I guess, very useful as well. Thank you</span>
