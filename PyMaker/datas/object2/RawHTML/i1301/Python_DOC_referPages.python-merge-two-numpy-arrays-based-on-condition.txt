<div class="post-text" itemprop="text">
<p>How can I merge the following two arrays, by looking up a value from array A in array B?</p>
<p>Array A: </p>
<pre><code>array([['GG', 'AB', IPv4Network('1.2.3.41/26')],
       ['GG', 'AC', IPv4Network('1.2.3.42/25')],
       ['GG', 'AD', IPv4Network('1.2.3.43/24')],
       ['GG', 'AE', IPv4Network('1.2.3.47/23')],
       ['GG', 'AF', IPv4Network('1.2.3.5/24')]],
      dtype=object)
</code></pre>
<p>and Array B:</p>
<pre><code>array([['123456', 'A1', IPv4Address('1.2.3.5'), nan],
       ['987654', 'B1', IPv4Address('1.2.3.47'), nan]],
      dtype=object)  
</code></pre>
<p>The goal here is to create Array C, by looking up the IPv4Address from Array B in Array A and comparing them, and getting the corresponding array's second value and storing it:</p>
<p>Array C: </p>
<pre><code>array([['123456', 'A1', IPv4Address('1.2.3.5'), nan, 'AF'],
       ['987654', 'B1', IPv4Address('1.2.3.47'), nan, 'AE']],
      dtype=object) 
</code></pre>
<p>The ip addresses are of this type: <a href="https://docs.python.org/3/library/ipaddress.html#ipaddress.ip_network" rel="noreferrer">https://docs.python.org/3/library/ipaddress.html#ipaddress.ip_network</a></p>
<p>How can I achieve this?</p>
<h2>edit:</h2>
<p><em>Please note</em> that the merging is conditioned on the IPs matching, so the resulting array C will have the same number of arrays as the Array B, but it will have one more value. The suggested duplicate links are not answering the same question.</p>
</div>
<div class="post-text" itemprop="text">
<p>This should do what you asked for (at least the output is exactly what you wanted), I made some minor assumptions to deal with your #dummydata, but that should not matter too much.</p>
<blockquote>
<p>Code:</p>
</blockquote>
<pre><code>import numpy as np
import ipaddress as ip

array_A = np.array([['GG', 'AB', ip.ip_network('192.168.0.0/32')],
                    ['GG', 'AC', ip.ip_network('192.168.0.0/31')],
                    ['GG', 'AD', ip.ip_network('192.168.0.0/30')],
                    ['GG', 'AE', ip.ip_network('192.168.0.0/29')],
                    ['GG', 'AF', ip.ip_network('192.168.0.0/28')]],
                   dtype=object)

array_B = np.array([['123456', 'A1', ip.ip_network('192.168.0.0/28'), np.nan],
                    ['987654', 'B1', ip.ip_network('192.168.0.0/29'), np.nan]],
                   dtype=object)


def merge_by_ip(A, B):
    # initializing an empty array with len(B) rows and 5 columns for the values you want to save in it
    C = np.empty([len(B), 5],dtype=object)
    for n in range(len(B)):
        for a in A:
            # checking condition: if ip address in a is ip address in b
            if a[2] == B[n][2]:
                # add the entry of b with the second value of a to the new Array c
                C[n] = np.append(B[n], a[1])
    return C


print(merge_by_ip(array_A, array_B))
</code></pre>
<blockquote>
<p>Output:</p>
</blockquote>
<pre><code>[['123456' 'A1' IPv4Network('192.168.0.0/28') nan 'AF']
 ['987654' 'B1' IPv4Network('192.168.0.0/29') nan 'AE']]
</code></pre>
<blockquote>
<p><em>Note:</em></p>
</blockquote>
<p>This solution has <code>O(m * n)</code> complexity, which isn't necessary, there are many out-of-the box (<code>Pandas</code>) and custom (e.g. using <code>dict</code>) ways to merge with lower complexity.</p>
</div>
<div class="post-text" itemprop="text">
<p>There appears no reason you <em>can't</em> use Pandas. If your IP addresses align perfectly, you can <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.merge.html" rel="nofollow noreferrer"><code>merge</code></a> and then use <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.values.html" rel="nofollow noreferrer"><code>pd.DataFrame.values</code></a> to return a NumPy array:</p>
<pre><code>import pandas as pd

# data from @mk18
df_A = pd.DataFrame(array_A[:, 1:], columns=['', 'IP'])
df_B = pd.DataFrame(array_B, columns=['id', 'value', 'IP', 'na'])

res = df_B.merge(df_A, on='IP').values

print(res)

array([['123456', 'A1', IPv4Network('192.168.0.0/28'), nan, 'AF'],
       ['987654', 'B1', IPv4Network('192.168.0.0/29'), nan, 'AE']],
      dtype=object)
</code></pre>
<p>If you wish to ignore the network component and include only the <a href="https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network.network_address" rel="nofollow noreferrer"><code>network_address</code></a> when merging, i.e. use <code>'1.2.3.5'</code> instead of <code>'1.2.3.5/24'</code>, then you can create helper series before merging:</p>
<pre><code>import pandas as pd
from operator import attrgetter

df_A = pd.DataFrame(array_A[:, 1:], columns=['key', 'IP'])
df_B = pd.DataFrame(array_B, columns=['id', 'value', 'IP', 'na'])

df_A['IP_NoNetwork'] = df_A['IP'].map(attrgetter('network_address'))
df_B['IP_NoNetwork'] = df_B['IP'].map(attrgetter('network_address'))

res = df_B.merge(df_A.drop('IP', 1), on='IP_NoNetwork')\
          .loc[:, ['id', 'value', 'IP', 'na', 'key']].values
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are issues with your data and complications that prevent you from using <code>join_by</code> or <code>rec_join</code> as the question you linked suggested.</p>
<p>The main issue with your data, as pointed out by others, is that networks like <code>IPv4Network('1.2.3.4/24')</code> are not valid networks, since they have host bits set that are masked out by the <code>/24</code>. The <code>/24</code> means that the final <code>32 - 24 = 8</code> bits are your hosts bits and the constructor for <code>IPv4Network</code> requires that these are set to 0, for example <code>IPv4Network('1.2.3.0/24')</code> is valid.</p>
<p>The main complication is that you have <strong>networks</strong> in one array, but <strong>addresses</strong> in the other. Methods like <code>rec_join</code> and <code>join_by</code> use comparison (i.e. <code>==</code>) to decide what records go together. Some of the other proposed answers 'solve' this by replacing your networks with addresses, but that doesn't appear to be your problem.</p>
<p>Also, note that a single network address may fall into multiple different networks. For example, <code>IPv4Address('1.2.3.129')</code> falls within both <code>IPv4Network('1.2.3.0/24')</code> and <code>IPv4Network('1.2.3.128/25')</code>. So, I assume you'd expect both matches to show up in your results.</p>
<p>To join addresses from one array to networks that the address actually falls within, you'll have to iterate over the array yourself and construct a new one. The type of comparison that works is <code>IPv4Address('1.2.3.129') in IPv4Network('1.2.3.0/24')</code> (this is <code>True</code>).</p>
<p>A working code example bringing this together:</p>
<pre><code>from numpy import nan, asarray, concatenate
from ipaddress import IPv4Address, IPv4Network

a = asarray([
    ['GG', 'AA', IPv4Network('1.2.4.0/24')],
    ['GG', 'AB', IPv4Network('1.2.3.128/25')],
    ['GG', 'AC', IPv4Network('1.2.3.0/24')]
], dtype=object)

b = asarray([
    ['123456', 'A1', IPv4Address('1.2.3.4'), nan],
    ['987654', 'B1', IPv4Address('1.2.3.129'), nan],
    ['024680', 'C1', IPv4Address('1.2.4.0'), nan]
], dtype=object)


def join_addresses_networks(addresses, networks):
    for address in addresses:
        for network in networks:
            if address[2] in network[2]:
                yield concatenate((address, network[:-1]))


c = asarray(list(join_addresses_networks(b, a)))

print(c)
</code></pre>
</div>
<span class="comment-copy">Why would you do this with NumPy if you have Pandas? It is not really going to be any faster.</span>
<span class="comment-copy">I get this error when I try to create your A array: <code>ValueError: 1.2.3.41/26 has host bits set</code></span>
<span class="comment-copy">@coldspeed i am trying to do it in pandas, i posed the question <a href="https://stackoverflow.com/questions/53738799/python-improve-conditional-merge-of-big-pandas-dfs" title="python improve conditional merge of big pandas dfs">stackoverflow.com/questions/53738799/â€¦</a> but it is extremely slow</span>
<span class="comment-copy">Then please make an effort to ensure the data is valid, so it can <i>at least</i> be copy pasted and run.</span>
<span class="comment-copy">The only answer you need is that object-dtype numpy arrays are pointless, they don't offer you the speed or memory advantage why we use numpy in the first place. Just use a list and get it over with in native python.</span>
<span class="comment-copy">could you please comment some of the values? for example: what is 5 in <code>np.empty([len(B), 5]</code> and what is 3 in <code>a[2]</code>, <code>B[n][2]</code>, <code>a[1]</code> ?</span>
<span class="comment-copy">I added it within the code. I do not understand what you mean by 3 though.</span>
<span class="comment-copy">This solution has O(m * n) complexity, which isn't necessary here, there are many out-of-the box (Pandas) and custom (e.g. using <code>dict</code>) ways to merge with lower complexity.</span>
<span class="comment-copy">You are right @jpp but I figured a straightforward answer was the better answer, since the questions isn't so much about performance and more about a basic "how to". The answer could be amended for efficiency to O(m + n), left as an exercise for the reader.</span>
