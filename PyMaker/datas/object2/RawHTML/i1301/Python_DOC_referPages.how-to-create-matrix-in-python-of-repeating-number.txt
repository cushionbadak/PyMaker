<div class="post-text" itemprop="text">
<p>I want to:<br/>
Create a vector list from 0 to 4, i.e. [0, 1, 2, 3, 4] and from that<br/>
Create a matrix containing a "tiered list" from 0 to 4, 3 times over, once for each dimension.  The matrix has 4^3 = 64 rows, so for example  </p>
<pre><code>T = [0 0 0    
       0 0 1  
       0 0 2  
       0 0 3  
       0 0 4  
       0 1 0  
       0 1 1  
       0 1 2  
       0 1 3  
       0 1 4  
       0 2 0  
       ...  
       1 0 0  
       ...  
       1 1 0  
       ....  
       4 4 4]    
</code></pre>
<p>This is what I have so far:  </p>
<pre><code>n=5;
ind=list(range(0,n))
print(ind)
</code></pre>
<p>I am just getting started with Python so any help would be greatly appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>The python <a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow noreferrer">itertools module</a> <code>product()</code> function can do this:</p>
<pre><code>for code in itertools.product( range(5), repeat=3 ):
    print(code)
</code></pre>
<p>Giving the result:</p>
<pre><code>(0, 0, 0)
(0, 0, 1)
(0, 0, 2)
(0, 0, 3)
...
(4, 4, 2)
(4, 4, 3)
(4, 4, 4)
</code></pre>
<p>So to make this into a matrix:</p>
<pre><code>import itertools
matrix = []
for code in itertools.product( range(5), repeat=3 ):
     matrix.append( list(code) )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code> list_ = []
 for a in range(5):
     for b in range(5):
        for c in range(5):
              list_ += [a ,b ,c ]

 print(list_)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Note, you really want the matrix to have 5^3 = 125 rows. The basic answer is to just iterate in nested for loops:</p>
<pre><code>T = []
for a in range(5):
    for b in range(5):
        for c in range(5):
            T.append([a, b, c])
</code></pre>
<p>There are other, probably faster, ways of doing this, but for sheer get 'er done velocity, it's hard to beat this. </p>
</div>
<span class="comment-copy">Why not <code>matrix.append(list(code))</code>?</span>
<span class="comment-copy">@Tomothy32 - I had to go lookup the syntax, you beat me to it.  I don't like the "pythonic" way, it's unreadable, especially for a beginner.</span>
<span class="comment-copy">Also, <code>matrix = [list(code) for code in itertools.product(range(5), repeat=3)]</code> is easier and more Pythonic.</span>
<span class="comment-copy">This is incorrect. First, it makes a list that is one dimensional instead of having many rows of 3. Second, what would be the rows are backwards compared to what is asked for.</span>
<span class="comment-copy">The OP mentions matrix in their question but offers up a python list <code>T = [0 0 0</code> etc with no commas just newlines and spaces</span>
<span class="comment-copy">Wouldn't it be <code>T.append([a, b, c])</code>?</span>
<span class="comment-copy">That would make the order backwards compared to what OP is asking for.</span>
<span class="comment-copy">Are you sure? Running it on my machine: <code>[[0, 0, 0], [1, 0, 0], [2, 0, 0], [3, 0, 0], [4, 0, 0], [0, 1, 0], [1, 1, 0], [2, 1, 0], [3, 1, 0], [4, 1, 0], [0, 2, 0], [1, 2, 0], [2, 2, 0], [3, 2, 0], [4, 2, 0], [0, 3, 0], [1, 3, 0], [2, 3, 0], [3, 3, 0], [4, 3, 0], [0, 4, 0], [1, 4, 0], [2, 4, 0], [3, 4, 0], [4, 4, 0], [0, 0, 1], [1, 0, 1], [2, 0, 1], [3, 0, 1], [4, 0, 1], [0, 1, 1], [1, 1, 1], [2, 1, 1], [3, 1, 1], [4, 1, 1], [0, 2, 1], [1, 2, 1], [2, 2, 1], [3, 2, 1], [4, 2, 1], [0, 3, 1], [1, 3, 1], [2, 3, 1], [3, 3, 1], [4, 3, 1], [0, 4, 1], [1, 4, 1], [2, 4, 1], [3, 4, 1] ...</code></span>
<span class="comment-copy">Compare your result carefully with what OP asked for. It was [[0,0,0], [0,0,1], [0,0,2], ... ]</span>
<span class="comment-copy">Exactly, running your solution outputs the wrong result.</span>
