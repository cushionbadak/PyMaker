<div class="post-text" itemprop="text">
<p>I have 3 lvls deep list as follows: </p>
<pre><code>parent = [
   [
      {'x': 1, 'y': 2},
      {'x': 3, 'y': 8},
      .
      .
      .
   ],
   [
      {'x': 8, 'y': 5},
      {'x': 9, 'y': 6},
      .
      .
      .
   ]
]
</code></pre>
<p>I am trying to use list comprehension to get all the x into a list and all the y into another list</p>
<p>I tried something like this: 
[gc for gc in [c for c in [p.get('x') for p in parent]]] </p>
<p>but the get('x') is still hitting a list instead of an element, mainly because of the most inner [].  Any idea how to achieve this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't <em>need</em> list comprehensions here.</p>
<p>Here's a functional solution via <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>operator.itemgetter</code></a> and <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>itertools.chain</code></a>:</p>
<pre><code>from itertools import chain
from operator import itemgetter

parent = [[{'x': 1, 'y': 2},
           {'x': 3, 'y': 8}],
          [{'x': 8, 'y': 5},
           {'x': 9, 'y': 6}]]

x, y = zip(*map(itemgetter('x', 'y'), chain.from_iterable(parent)))

print(x)  # (1, 3, 8, 9)
print(y)  # (2, 8, 5, 6)
</code></pre>
<p>You can, alternatively, use <em>nested</em> list comprehensions:</p>
<pre><code>x = [i['x'] for L in parent for i in L]
y = [i['y'] for L in parent for i in L]
</code></pre>
<p>Notice the order of the nested comprehension is consistent with a regular <code>for</code> loop:</p>
<pre><code>x = []
for L in parent:
    for i in L:
        x.append(i['x'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The list comprehensions you are looking for could be:</p>
<pre><code>[ [c.get('x') for c in p] for p in parent]
</code></pre>
<p>But this should be flattened, so maybe you should do something like:</p>
<pre><code>print reduce(
    lambda curr, acc: curr + acc, 
    [ [c.get('x') for c in p] for p in parent],
    []
)
</code></pre>
<p>Hope this helps.</p>
</div>
<span class="comment-copy">what are these "00" and "01" in your list?</span>
<span class="comment-copy">What is your expected output, a flat or nested list?</span>
<span class="comment-copy">related: <a href="https://stackoverflow.com/q/18072759/27678">stackoverflow.com/q/18072759/27678</a></span>
<span class="comment-copy">Thanks a lot .. x = [i['x'] for L in parent for i in L] is what I needed.   I need to figure out why I struggled with this. ... Thanks again</span>
