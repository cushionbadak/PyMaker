<div class="post-text" itemprop="text">
<p>I'm trying to create a program that allows the user to input one of 4 operators (addition, subtraction, multiplication, or division) and then two numbers. The program then calculates the operation. I can't seem to validate the operators for the output, though. I'm trying with an <code>if</code> ... <code>else</code> statement now, but no luck. Any pointers here?</p>
<pre><code>operator = ""
numbers = []
inputNumbers = ["first number", "second number"]

def userInput():
    try:
        operator = input("Please choose a valid operation (+, -, *, /): ")
    except:
        print("Please enter a valid operator.")
    for inputNumber in inputNumbers:
        user_num_input = -1
        while user_num_input &lt; 0:
            try:
                user_num_input = int(input("Type in {}: ".format(inputNumber)))
            except:
                user_num_input = -1
                print("Please enter a whole number.")
            if user_num_input &gt; -1:
                numbers.append(user_num_input)
userInput()

def addNumbers():
    add = numbers[0] + numbers[1]
    return add(numbers)

def subNumbers():
    sub = numbers[0] - numbers[1]
    return sub(numbers)

def mulNumbers():
    mul = numbers[0] * numbers[1]
    return mul(numbers)

def divNumbers():
    div = numbers[0] / numbers[1]
    return div(numbers)

def userOutput():
    if operator == "+":
        print(numbers[0], "+", numbers[1], "=", addNumbers())
    elif operator == "-":
        print(numbers[0], "-", numbers[1], "=", subNumbers())
    elif operator == "*":
        print(numbers[0], "*", numbers[1], "=", mulNumbers())
    elif operator == "/":
        print(numbers[0], "/", numbers[1], "=", divNumbers())
userOutput()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should check if user entered valid operation, <code>try</code> <code>except</code> wont work here since <code>input()</code> won't throw any errors. Also here's more elegant way to get 2 valid integers from user, and calculate final equation (using <a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow noreferrer"><code>eval()</code></a>)</p>
<pre><code>inputNumbers = ["first number", "second number"]
operations = ['+', '-', '*', '/']

numbers = []
operator = ''

while not operator:
    operator = input('Please choose a valid operation (+, -, *, /): ')
    if operator not in operations:
        print("Please enter a valid operator.")

while len(numbers) &lt; len(inputNumbers):
    try:
        numbers.append(int(input("Type in {}: ".format(inputNumbers[len(numbers)]))))
    except:
        print("Please enter a whole number.")

result = eval(operator.join(map(str, numbers)))
print('{} {} {} = {}'.format(numbers[0], operator, numbers[1], result))
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>Please choose a valid operation (+, -, *, /): addition
Please enter a valid operator.
Please choose a valid operation (+, -, *, /): /
Type in first number: 123.321
Please enter a whole number.
Type in first number: 10 
Type in second number: hundred
Please enter a whole number.
Type in second number: 100
10 / 100 = 0.1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should use the builtin <code>operator</code> <a href="https://docs.python.org/3/library/operator.html" rel="nofollow noreferrer">module</a> of python. Then you can use a dict like this:</p>
<pre><code>import operator

operator_dict = {"+": operator.add, 
                 "-": operator.sub, 
                 "*": operator.mul,
                 "/": operator.truediv}
user_input = input("Please choose a valid operation (+, -, *, /): ")
operator_func = operator_dict.get(user_input, None)
# if operator_func is not None then the input was correct!
if operator_func is not None:
    ... get the numbers ...
    print("{}{}{}={}".format(num1, user_input, num2, operator_func(num1, num2))
</code></pre>
<p>This way you don't need to implement simple operator functionality yourself.</p>
</div>
<div class="post-text" itemprop="text">
<p>The easiest and cleanest way to do so, is to use the <code>operator</code> module in Python, so your <code>userOutput</code> method would become as follows. 
A few changes you should do on your code, though, would be to rename hour <code>operator</code> variable to <code>op</code>, as it would conflict with python module name, and update the <code>operator</code> as a return from the <code>userInput()</code>:</p>
<pre><code>import operator
op = ""
numbers = []
inputNumbers = ["first number", "second number"]
operators = {
        '+' : operator.add,
        '-' : operator.sub,
        '*' : operator.mul,
        '/' : operator.truediv,
        '%' : operator.mod,
        '^' : operator.xor,
}

def userInput(op):
    while not op:
        op = input("Please choose a valid operation (+, -, *, /): ")
        if op not in operators:
            print("Please enter a valid operator.")
            op = ""
    for inputNumber in inputNumbers:
        user_num_input = -1
        while user_num_input &lt; 0:
            try:
                user_num_input = int(input("Type in {}: ".format(inputNumber)))
            except:
                user_num_input = -1
                print("Please enter a whole number.")
            if user_num_input &gt; -1:
                numbers.append(user_num_input)
    return op

def userOutput(op, operators):
    result = operators[op](numbers[0], numbers[1])
    print("{} {} {} = {}". format(numbers[0], op, numbers[1], result))

op = userInput(op)
userOutput(op, operators)
</code></pre>
</div>
<span class="comment-copy">I wouldn't use the <code>eval</code> for such a mundane task, even more when you're evaluating the user input, so this is not recommended. Moreover we have the <code>operator</code> module ready to be used, as in my answer: <a href="https://stackoverflow.com/a/53686331/10642035">stackoverflow.com/a/53686331/10642035</a></span>
<span class="comment-copy">Why you you think it's not recommended when you're evaluating user input? It's more robust and elegant solution that doing it all manually.</span>
<span class="comment-copy">Elegant for sure it looks better.  The issue with using ` eval()` is the risk we should be aware that, when in production, some malicious code can be injected using this <code>input</code> field. Not something to be afraid of in the context of this problem, but something definitely important to mention.</span>
<span class="comment-copy">@FilipMłynarski you really think this solution is more elegant than the others with the builtin module?</span>
<span class="comment-copy">You are using the <code>operator</code> module as a key and your function doesn't have any arguments to get pass the user input!</span>
<span class="comment-copy">You're right @AttilaBognár, updated with the full code, now considering the whole aspects of make it function properly</span>
<span class="comment-copy">now it's better but there are still some problems with the fisrt try block. Consider what happens when the user enters an invalid operation...</span>
<span class="comment-copy">@AttilaBognár, the first part of the code was the exact one @KyleBarnes wrote. Since the problem faced was about dealing with the operator, this was the only thing I worked on. In any case, updated the first part, taking out the <code>try</code> / <code>except</code> in order to work properly until a valid <code>operator</code> is entered.</span>
