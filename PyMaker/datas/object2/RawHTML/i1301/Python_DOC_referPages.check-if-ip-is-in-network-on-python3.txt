<div class="post-text" itemprop="text">
<p>I am trying to run a routine on two lists, sourced from MySQL queries - one contains CIDR networks and the other contains IP addresses. I am trying to compare entries in the IP list to see whether they are in the networks described by the CIDR list, and act on those that are not.</p>
<p>I am trying to use the <code>netaddr</code> module but this doesn't appear to be implemented on Python3 yet?</p>
<p>I have also tried to use <code>ipaddress</code> but I can't seem to get them to compare correctly. Using ipaddress I have the following code:</p>
<pre><code>networks = (('1.1.6.0/20',), ('2.8.2.0/19',), ('7.2.2.0/19',), ('2.2.0.0/19',))

ips = ((8888, 'customer', b'2.8.4.64', '8888*200'),(8888, 'customer', b'1.1.6.3', '8888*201'), (8888, 'customer', b'122.223.159.3', '8888*202'))

straglers = list()

for ip in ips:
    exclude = 0
    for network in networks:
        subnet = ip_network(network[0])
        if ip_address(ip[2]) in subnet:
            exclude = 1
    if exclude == 0:
        straglers.append([ip[3],ip[2],ip[1]]) # extension, customer_ip, company
</code></pre>
<p>As things stand the code gives a value error as follows: <code>ValueError: b'82.148.47.64' does not appear to be an IPv4 or IPv6 address</code></p>
<p>I have tried converting <code>ip[2]</code> to an utf-8 string but this makes no difference.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you are describing as a list is actually a tuple.</p>
<p>First, when I ran your code I did not receive the error you are getting</p>
<blockquote>
<p>ValueError: b'82.148.47.64' does not appear to be an IPv4 or IPv6 address</p>
</blockquote>
<p>Instead I received the following</p>
<blockquote>
<p>raise ValueError('%s has host bits set' % self)
  ValueError: 1.1.6.0/20 has host bits set</p>
</blockquote>
<p>Is this the error your are actually receiving? If so, this is how to properly correct it.</p>
<p>Referenced from ipaddress module <a href="https://docs.python.org/3/howto/ipaddress.html#defining-networks" rel="nofollow noreferrer">Defining Networks</a>: </p>
<blockquote>
<p>By default, attempting to create a network object with host bits set will result in ValueError being raised. To request that the additional bits instead be coerced to zero, the flag strict=False can be passed to the constructor:</p>
</blockquote>
<p>This is because the host bits are set and will need to be coerced to zero, as the documentation states above. Pass the following flag <strong>strict=False</strong> to the constructor.</p>
<p>For example.</p>
<pre><code>subnet = ip_network(network[0], strict=False) 
</code></pre>
<p>Also, in your ips contained in your tuple need only to be formatted to a string. </p>
<p>For example.</p>
<pre><code>ips = ((8888, 'customer', '2.8.4.64', '8888*200')
</code></pre>
<p>OR the following will be presented to you. </p>
<blockquote>
<p>'ValueError: <strong>b'2.8.4.64'</strong> does not appear to be an IPv4 or IPv6 address' </p>
</blockquote>
<p>The full working code.</p>
<pre><code>from ipaddress import ip_network, ip_address
networks = (('1.1.6.0/20',), ('2.8.2.0/19',), ('7.2.2.0/19',), ('2.2.0.0/19',))

ips = ((8888, 'customer', b'2.8.4.64', '8888*200'),(8888, 'customer', b'1.1.6.3', '8888*201'), (8888, 'customer', b'122.223.159.3', '8888*202'))

straglers = list()

for ip in ips:
    exclude = 0
    for network in networks:
        subnet = ip_network(network[0], strict=False)  
        print(ip_address(ip[2].decode('utf-8')))
        print(subnet)
        if ip_address(ip[2].decode('utf-8')) in subnet:
            exclude = 1
    if exclude == 0:
        straglers.append([ip[3],ip[2],ip[1]]) # extension, customer_ip, company
print(straglers)  
</code></pre>
</div>
<span class="comment-copy">FWIW, I've used <a href="https://pypi.org/project/IPy/" rel="nofollow noreferrer">IPy</a> in the past and been most pleased.</span>
<span class="comment-copy">Thanks - you were right about the tuple, my bad :-/  How can I format the IPs to a string? They come from a DB, this is how the query returns them.</span>
<span class="comment-copy">The <code>b'</code> prefix says that however you are reading those from the database is getting the raw bytes rather than the string which <code>ipaddress</code> expects. You can call <code>.decode()</code> on them using the appropriate encoding â€“ presumably UTF-8 or ASCII. See <a href="https://docs.python.org/3/library/stdtypes.html#bytes.decode" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#bytes.decode</a>.</span>
<span class="comment-copy">I have updated the working example above using using the conversion that Chris Adams suggested. See line "if ip_address(ip[2].decode('utf-8')) in subnet:". I tried it and it seems to work with ips as b'2.8.4.64'.</span>
<span class="comment-copy">Thanks! This works like a charm</span>
