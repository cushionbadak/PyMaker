<div class="post-text" itemprop="text">
<p>Good evening, I want to create a list while reading a text file (historique.txt) which contains list of files associated to each taskid. Considering the following example: my text file contains these lines:</p>
<pre><code>4,file1
4,file2
5,file1
5,file3
5,file4
6,file3
6,file4
</code></pre>
<p>(to explain more the content of the text file: 4 is an idtask and file1 is a file used by idtask=4, so basically, task 4 used (file1,file2).
I want to obtain list Transactions=<code>[[file1,file2],[file1,file3,file4],[file3,file4]]</code>
Any help and thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>This will <strong>not</strong> work if the input file is <strong>not ordered</strong></p>
<p>Exactly the same idea as @mad_'s answer, just showing the benefit of turning <code>file_data_list</code> to be a list of lists instead of list of strings. We only need to <code>.split</code> each line once which is more readable and probably a bit faster as well.</p>
<p><strong>Note</strong> that this can also be done <strong>while</strong> reading the file instead of after-the-fact like I show below.</p>
<pre><code>from itertools import groupby

file_data_list = ['4,file1',
                  '4,file2',
                  '5,file1',
                  '5,file3',
                  '5,file4',
                  '6,file3',
                  '6,file4']

file_data_list = [line.split(',') for line in file_data_list]

for k, v in groupby(file_data_list, key=lambda x: x[0]):
    print([x[1] for x in v])  # also no need to convert v to list
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>After reading from the file e.g <code>f.readlines()</code> which will give a list similar to below</p>
<pre><code>file_data_list=['4,file1',
'4,file2',
'5,file1',
'5,file3',
'5,file4',
'6,file3',
'6,file4']
</code></pre>
<p>Apply <code>groupby</code></p>
<pre><code>from itertools import groupby
for k,v in groupby(file_data_list,key=lambda x:x.split(",")[0]):
    print([i.split(",")[1] for i in list(v)])
</code></pre>
<p><strong>Output</strong></p>
<pre><code>['file1', 'file2']
['file1', 'file3', 'file4']
['file3', 'file4']
</code></pre>
<p>you can also create a mapping <code>dict</code></p>
<pre><code>for k,v in groupby(file_data_list,key=lambda x:x.split(",")[0]):
    print({k:[i.split(",")[1] for i in list(v)]})
</code></pre>
<p><strong>Output</strong></p>
<pre><code>{'4': ['file1', 'file2']}
{'5': ['file1', 'file3', 'file4']}
{'6': ['file3', 'file4']}
</code></pre>
<p>As pointed out by @DeepSpace the above solution will work only if the ids are ordered. Modifying if it not ordered</p>
<pre><code>from collections import defaultdict
d=defaultdict(list)
file_data_list=['4,file1',
'4,file2',
'5,file1',
'5,file3',
'5,file4',
'6,file3',
'6,file4',
'4,file3']
for k,v in groupby(file_data_list,key=lambda x:x.split(",")[0]):
    for i in list(v):
        d[k].append(i.split(",")[1])

print(d)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>defaultdict(list,
            {'4': ['file1', 'file2', 'file3'],
             '5': ['file1', 'file3', 'file4'],
             '6': ['file3', 'file4']})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>We can use the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><strong><code>csv</code></strong></a> module to process the lines into lists of values.</p>
<p><code>csv</code> reads from a file-like object, which we can fake using <a href="https://docs.python.org/3/library/io.html#io.StringIO" rel="nofollow noreferrer"><strong><code>StringIO</code></strong></a> for an example:</p>
<pre><code>&gt;&gt;&gt; from io import StringIO
&gt;&gt;&gt; contents = StringIO('''4,file1
... 4,file2
... 5,file1
... 5,file3
... 5,file4
... 6,file3
... 6,file4''')
</code></pre>
<p>Just to note: depending upon the version of Python you are using you might need to import <code>StringIO</code> differently. The above code works for Python 3. For <a href="https://docs.python.org/2/library/stringio.html" rel="nofollow noreferrer">Python 2</a>, replace the import with <code>from StringIO import StringIO</code>.</p>
<p><a href="https://docs.python.org/3/library/csv.html#csv.reader" rel="nofollow noreferrer"><strong><code>csv.reader</code></strong></a> returns an iterable object. We can consume the whole thing into a <code>list</code>, just to see how it works. Later we will instead iterate over the <code>reader</code> object one line at a time.</p>
<p>We can use <a href="https://docs.python.org/3/library/pprint.html#pprint.pprint" rel="nofollow noreferrer"><strong><code>pprint</code></strong></a> to see the results nicely formatted:</p>
<pre><code>&gt;&gt;&gt; import csv
&gt;&gt;&gt; lines = list(csv.reader(contents))

&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(lines)
[['4', 'file1'],
 ['4', 'file2'],
 ['5', 'file1'],
 ['5', 'file3'],
 ['5', 'file4'],
 ['6', 'file3'],
 ['6', 'file4']]
</code></pre>
<p>These lists can then be unpacked into a task and filename:</p>
<pre><code>&gt;&gt;&gt; task, filename = ['4', 'file1']
&gt;&gt;&gt; task
'4'
&gt;&gt;&gt; filename
'file1'
</code></pre>
<p>We want to build lists of filenames having the same task as key.</p>
<p>To efficiently organise this we can use a dictionary. The efficiency is because we can ask the dictionary to find a list of values for a given key. It will store the keys in some sort of a tree and searching the tree is quicker than a linear search.</p>
<p>The first time we look to add a value to the dictionary for a particular key, we would need to check to see whether it already exists.
If not we would add an empty list and append the new value to it. Otherwise we would just add the value to the existing list for the given key.</p>
<p>This pattern is so common that Python's builtin dictionary has a method <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="nofollow noreferrer"><strong><code>dict.setdefault</code></strong></a> to help us achieve this.
However, I don't like the name, or the non-uniform syntax. You can read the linked documentation if you like, but I'd rather use
Python's <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><strong><code>defaultdict</code></strong></a> instead. This automatically creates a default value for a key if it doesn't already exist when you query it.</p>
<p>We create a <code>defaultdict</code> with a <code>list</code> as default:</p>
<pre><code>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(list)
</code></pre>
<p>Then for any new key it will create an empty <code>list</code> for us:</p>
<pre><code>&gt;&gt;&gt; d['5']
[]
</code></pre>
<p>We can append to the <code>list</code>:</p>
<pre><code>&gt;&gt;&gt; d['5'].append('file1')
&gt;&gt;&gt; d['7'].append('file2')
&gt;&gt;&gt; d['7'].append('file3')
</code></pre>
<p>I'll convert the <code>defaultdict</code> to a <code>dict</code> just to make it <code>pprint</code> more nicely:</p>
<pre><code>&gt;&gt;&gt; pprint(dict(d), width=30)
{'5': ['file1'],
 '7': ['file2', 'file3']}
</code></pre>
<p>So, putting all this together:</p>
<pre><code>import csv
from collections import defaultdict

from io import StringIO
from pprint import pprint

contents = StringIO('''4,file1
4,file2
5,file1
5,file3
5,file4
6,file3
6,file4''')

task_transactions = defaultdict(list)

for row in csv.reader(contents):
    task, filename = row
    task_transactions[task].append(filename)

pprint(dict(task_transactions))
</code></pre>
<p>Output:</p>
<pre><code>{'4': ['file1', 'file2'],
 '5': ['file1', 'file3', 'file4'],
 '6': ['file3', 'file4']}
</code></pre>
<p>Some final notes: In the example we've used <code>StringIO</code> to fake the file contents. You'll probably want to replace that in your actual code with something like:</p>
<pre><code>with open('historique.txt') as contents:
    for row in csv.reader(contents):
        ...  # etc
</code></pre>
<p>Also, where we take each row from the csv reader, and then unpack it into a task and filename, we could do that all in one go:</p>
<pre><code>for task, filename in csv.reader(contents):
</code></pre>
<p>So your whole code (without printing) would be quite simple:</p>
<pre><code>import csv
from collections import defaultdict

task_transactions = defaultdict(list)

with open('historique.txt') as contents:
    for task, filename in csv.reader(contents):
        task_transactions[task].append(filename)
</code></pre>
<p>If you want a list of transactions (as you asked in the question!):</p>
<pre><code>transactions = list(task_transactions.values())
</code></pre>
<p>However, this may not be in the same order of tasks as the original file. If that's important to you, clarify the question, and comment so I can help.</p>
</div>
<div class="post-text" itemprop="text">
<p>An alternate solution without using the groupby library </p>
<p>(This solution does exactly what @mad_'s does, however it is more readable, especially for someone who is a beginner):</p>
<p>As @mad_ said, the read list will be as follows:</p>
<pre><code>data=[
'4,file1',
'4,file2',
'5,file1',
'5,file3',
'5,file4',
'6,file3',
'6,file4']
</code></pre>
<p>You could loop over the data, and create a dict</p>
<pre><code>transactions = defaultdict(list)
for element in data:     #data[i] is the idtask, data[i+1] is the file
    id, file = element.split(',')
    transactions[id].append(file)
</code></pre>
<p>Transactions will now contain the dictionary:</p>
<pre><code>{'4': ['file1', 'file2']
'5': ['file1', 'file3', 'file4']
'6': ['file3', 'file4']}
</code></pre>
</div>
<span class="comment-copy">May we see what code you have done so far?</span>
<span class="comment-copy">Does it have to be a list? It would be easier to create a dictionary.</span>
<span class="comment-copy">It will probably be easier (and more readable) to get <code>file_data_list</code> to be a list of tuples. This way  you only need to split once.</span>
<span class="comment-copy">@DeepSpace I can but OP is actually reading from a file</span>
<span class="comment-copy">You can read the file then convert the list of strings to a list of tuples, at the cost of iterating over the file's content one more time. It can also be done <b>while</b> reading the file if not using <code>readlines()</code></span>
<span class="comment-copy">BTW, this approach will not work in case the input file is not ordered, as <code>groupby</code> expects the data to be ordered by the same <code>key</code>it is using</span>
<span class="comment-copy">@DeepSpace I was following the input data provided. If it is not ordered then still it will form the groups but this time have to be appended to the previous list value in defaultdict</span>
<span class="comment-copy">I don't know how to thank you really, you saved, that's exactly what I wanted, import csv from collections import defaultdict  task_transactions = defaultdict(list)  with open('historique.txt') as contents:     for task, filename in csv.reader(contents):         task_transactions[task].append(filename)</span>
<span class="comment-copy">Thank you very much</span>
<span class="comment-copy">You're welcome.</span>
<span class="comment-copy">You can use <code>defaultdict(list)</code> to get rid of the <code>if-else</code></span>
<span class="comment-copy">thank you I'll try to apply it now</span>
<span class="comment-copy">What is <code>range(0, len(data), 2)</code> meant to do? The <code>2</code> means a step of <code>2</code>. Why is that needed?</span>
<span class="comment-copy">@PeterWood the data in the format above needs to skip every two, as if you only go by a step of 1, data[i] would be the file name instead of the id number when i is odd</span>
<span class="comment-copy">Also, <code>[x[i]].append(x[i+1])</code> is wrong as <code>i</code> will be the index for the whole of <code>data</code> whereas <code>x</code> will only have two elements. Better to unpack the tuple and assign: <code>key, value = element.split(',')</code></span>
