<div class="post-text" itemprop="text">
<p>I have a pandas dataframe containing very long strings in the 'page' column that I am trying to extract a substring from: </p>
<p><em>Example string:</em> /ex/search/!tu/p/z1/zVJdb4IwFP0r88HH0Sp-hK/dz/d5/L2dBISEvZ0FBIS9nQSEh/?s&amp;<strong>search_query=example one</strong>&amp;y=0&amp;x=0</p>
<p>Using regex, I am having a hard time determining how to extract the string between the two ampersands and removing all other characters part of the greater string. </p>
<p>So far, my code looks like this:</p>
<pre><code>import pandas as pd
import re

dataset = pd.read_excel(r'C:\Users\example.xlsx')
dataframe = pd.DataFrame(dataset)

dataframe['Page'] = format = re.search(r'&amp;(.*)&amp;',str(dataframe['Page']))

dataframe.to_excel(r'C\Users\output.xlsx)
</code></pre>
<p>The code above runs but does not output anything to my new spreadsheet. </p>
<p>Thank you in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can extract the query string from the URL with <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlparse" rel="nofollow noreferrer"><code>urllib.parse.urlparse</code></a>, then parse it with <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.parse_qs" rel="nofollow noreferrer"><code>urllib.parse.parse_qs</code></a>:</p>
<pre><code>&gt;&gt;&gt; from urllib.parse import urlparse, parse_qs
&gt;&gt;&gt; path = '/ex/search/!tu/p/z1/zVJdb4IwFP0r88HH0Sp-hK/dz/d5/L2dBISEvZ0FBIS9nQSEh/?s&amp;search_query=example one&amp;y=0&amp;x=0'
&gt;&gt;&gt; query_string = urlparse(path).query  
&gt;&gt;&gt; parse_qs(query)
{'search_query': ['example one'], 'y': ['0'], 'x': ['0']}
</code></pre>
<p><strong>EDIT:</strong> To extract the <code>query_string</code> from all pages in the <code>Page</code> column:</p>
<pre><code>dataframe['Page'] = dataframe['Page'].apply(lambda page: parse_qs(urlparse(page).query)['search_query'][0])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>You can try this</strong></p>
<pre><code>(?&lt;=&amp;).*?(?=&amp;)
</code></pre>
<blockquote>
<p>Explanation</p>
</blockquote>
<ul>
<li><code>(?&lt;=&amp;)</code> - Positive lookbehind. Matches <code>&amp;</code>.</li>
<li><code>(.*?)</code> - Matches anything except newline. (Lazy method).</li>
<li><code>(?=&amp;)</code> - Positive lookahead matches <code>&amp;</code>.</li>
</ul>
<p><a href="https://regex101.com/r/ZjLs7l/3" rel="nofollow noreferrer">Demo</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Fast and efficient pandas method. </p>
<p>Example data:</p>
<pre><code>temp,page
1,  /ex/search/!tu/p/z1/zVJdb4IwFP0r88HH0Sp-hK/dz/d5/L2dBISEvZ0FBIS9nQSEh/?s&amp;search_query=example one&amp;y=0&amp;x=0
2,  /ex/search/!tu/p/z1/zVJdb4IwFP0r88HH0Sp-hK/dz/d5/L2dBISEvZ0FBIS9nQSEh/?s&amp;search_query=example one&amp;y=0&amp;x=0
3,  /ex/search/!tu/p/z1/zVJdb4IwFP0r88HH0Sp-hK/dz/d5/L2dBISEvZ0FBIS9nQSEh/?s&amp;search_query=example one&amp;y=0&amp;x=0
</code></pre>
<p>Code:</p>
<pre><code>df = example.data # from above
df["query"] = df['page'].str.split("&amp;", expand=True)[1].str.split("=", expand=True)[1]
print(df)
</code></pre>
<p>Example output:</p>
<pre><code>   temp  \
0  1          
1  2          
2  3          

                                                                                                          page  \
0    /ex/search/!tu/p/z1/zVJdb4IwFP0r88HH0Sp-hK/dz/d5/L2dBISEvZ0FBIS9nQSEh/?s&amp;search_query=example one&amp;y=0&amp;x=0   
1    /ex/search/!tu/p/z1/zVJdb4IwFP0r88HH0Sp-hK/dz/d5/L2dBISEvZ0FBIS9nQSEh/?s&amp;search_query=example one&amp;y=0&amp;x=0   
2    /ex/search/!tu/p/z1/zVJdb4IwFP0r88HH0Sp-hK/dz/d5/L2dBISEvZ0FBIS9nQSEh/?s&amp;search_query=example one&amp;y=0&amp;x=0   

         query  
0  example one  
1  example one  
2  example one  
</code></pre>
<p>If you would like to label your columns based on the key=value pair, that would be a different extract afterwords. </p>
</div>
<span class="comment-copy">Welcome to SO! It's always helpful to include some sample data as text. The easiest way to do this is paste the output of <code>df.head()</code> into a code block in your questions</span>
<span class="comment-copy">Something like <code>dataframe.Page.str.split("&amp;").str[1]</code>?</span>
<span class="comment-copy">Probably, <code>dataframe['Page'].str.extract(r'&amp;([^&amp;]+)&amp;')</code> will do.</span>
<span class="comment-copy">Also, parsing a string representation of the dataframe is just asking for trouble. Instead operate on the series of strings.</span>
<span class="comment-copy">Ahh, I understand. Thank you for clearing that up.</span>
<span class="comment-copy">You might want to add that this should be used like <code>dataframe.Page.apply(parse_qs)</code> or similar.</span>
<span class="comment-copy">Is there a better way to do this programmatically? I have a few thousands of rows of data with every cell being a unique string.</span>
<span class="comment-copy">So, you want to extract the value of <code>query_string</code> from each path?</span>
<span class="comment-copy">That is correct, Martin.</span>
<span class="comment-copy">Thank you so much for your help, sir. This is the solution I have had success with.</span>
