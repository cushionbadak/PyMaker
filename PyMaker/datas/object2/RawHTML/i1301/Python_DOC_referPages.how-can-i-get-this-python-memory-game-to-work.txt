<div class="post-text" itemprop="text">
<p>This is the code I have so far, my teacher wants the game to "flip the X's over" when you guess a number and when they match the numbers stay but when the numbers are different the numbers "flip back over" and become X's again. And he wants the game to say that "you win" when all the numbers have been exposed.</p>
<pre><code>import random

visual=[['X','X','X','X','X'],['X','X','X','X','X'],['X','X','X','X','X'],['X','X','X','X','X'],['X','X','X','X','X']]
data=[[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]


random.shuffle(data[0])
random.shuffle(data[1])
random.shuffle(data[2])
random.shuffle(data[3])
random.shuffle(data[4])


while True:


print(visual[0])
print(visual[1])
print(visual[2])
print(visual[3])
print(visual[4])


   user_input_1 = int(input('enter a number 0 thru 4 to pick your first X position: '))

    user_input_2 = int(input('enter a number 0 thru 4 to pick your first Y position: '))
    user_input_3 = int(input('enter a number 0 thru 4 to pick your second X position: '))


user_input_4 = int(input('enter a number 0 thru 4 to pick your second Y position: '))


if data[user_input_1][user_input_2] == data[user_input_3][user_input_4]:
    visual[user_input_1][user_input_2] = str(data[user_input_1][user_input_2])
    visual[user_input_3][user_input_4] = str(data[user_input_3][user_input_4])

    print(visual[0])
    print(visual[1])
    print(visual[2])
    print(visual[3])
    print(visual[4])
    print('Congratulations you won the game!')
    break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here are the discrete steps in the game as I understand it:</p>
<ol>
<li>Initialize the board and data.</li>
<li>Shuffle the data</li>
<li>Enter Loop</li>
<li>Print the board</li>
<li>Ask user for their first guess</li>
<li>Ask user for their second guess</li>
<li>Print the board with reveals</li>
<li>Cover them back up if user missed</li>
<li>Check win condition (everything revealed?)</li>
<li>Loop back or print win</li>
</ol>
<p>Your code successfully initializes the board (step 1), shuffles the data (2), enter loop (3), prints board (4), and asks for the guesses (5)(6).</p>
<p>Here is some guidance on the pieces you are missing:</p>
<ul>
<li><p>After you get the inputs, you always want to print the board with the reveals (7). To do this you need to update visuals first with the piece you have written: </p>
<pre><code>visual[user_input_1][user_input_2] = str(data[user_input_1][user_input_2])
visual[user_input_3][user_input_4] = str(data[user_input_3][user_input_4])
</code></pre>
<p>and then print your visuals. This does not need to happen with an if statement, because you always want to do a print of the revealed board.</p></li>
<li><p>Afterwards, you want to do the swap back to X's if the user misses (8). You have this condition already basically written. You need to check if it's a miss in the data board and swap those visuals back to X's if true:</p>
<pre><code>    if data[user_input_1][user_input_2] != data[user_input_3][user_input_4]:
        visual[user_input_1][user_input_2] = 'X'
        visual[user_input_3][user_input_4] = 'X'
</code></pre>
<p>Side Note: Ideally, you want to clear the previous board print of the reveals to test memory. This part is kind of tricky. There are no simple ways to clear the print of the reveals without using operating system commands which are almost certainly beyond the scope of your class. I would check with your teacher about expectations around flipping back over. </p>
<p>If you are <em>interested</em> in how this is achievable using operating system command in Python <a href="https://stackoverflow.com/questions/4810537/how-to-clear-the-screen-in-python">here</a> is a relevant StackOverflow post. You would need to import os and import time. After you print reveal, use <a href="https://docs.python.org/3/library/time.html#time.sleep" rel="nofollow noreferrer">time.sleep(number_of_seconds)</a> to give the user however many seconds to try to memorize placements and then use os.system('clear') for linux/mac os or os.system('CLS') for windows to clear the screen. <strong>Again, it's very unlikely that this is what your teacher is looking for.</strong></p></li>
<li><p>Now let's deal with the win condition (9). Currently you are using a "while True:" with a break. While this may be functional in this case, using "while True:" should be almost always avoided (there are many reasons why-- <a href="https://stackoverflow.com/questions/390481/is-while-true-with-break-bad-programming-practice">here</a> is a post that addresses one reason). Loop structures like "while", "do-while", and "for" have built-in stopping conditions which will be checked each time you loop. In this program, your stopping condition is that the board is completely revealed (that is how you know the game is over and user no longer needs to guess). So, until this happens you want your while loop to keep going. This looks like this:</p>
<pre><code>    while #win condition is not met#:
        #stuff you want to loop#
    #congrats, you have met your win condition# 
</code></pre></li>
<li><p>There are multiple ways to check your win condition is not yet met. One option is that you know you have not won yet if the visual board is still not the same as data board:</p>
<pre><code>    while visuals != data:
        #stuff you want to loop#
    print(congrats....)
</code></pre></li>
</ul>
<p>In summary, TLDR:</p>
<pre><code>import random
visuals = [...]
data = [...]
    #shuffle
    while visuals != data:
        #print visuals
        #get input
        #update the inputted visuals with reveals
        #print visuals with reveals
        if #not a match:
            #update the inputted visuals back to X's
    print("Congratulations you won the game!")
</code></pre>
<p>There are a handful of smaller points that could improve your code as well if you're interested: be very vigilant about indents, a do-while loops is more appropriate here (can you think of why?), you can write functions and loops that reduce a lot of the repeating code (like when you print the visuals). But this should be enough for you to grapple with.</p>
</div>
<div class="post-text" itemprop="text">
<p>Some suggestions for your code:</p>
<ol>
<li>Since you display the board so often, you may want to write a separate function that takes the variable <code>visual</code> as input and prints the content.  Then you can just call the function instead of writing all of those <code>print</code> statements.</li>
<li>In your current code, you only display the cards when there's a match.  One of the whole strategies for playing a memory game is that if you overturn two cards and see "5" and "2" for example, it's not a match, but if you overturn a new pair of cards and one of them is another "5", you might remember where that first "5" was you overturned in your previous turn and thus know how to make a match.  So perhaps you should do this: update and display <code>visual</code> after selecting the first card, then do the same with the second card.  If there's a match, then leave <code>visual</code> as is.  If they don't match, then replace the two spots back with 'X' and go back to the top of the loop. </li>
<li>Your code seems to consider a single match a "win".  Shouldn't it be considered won once all of the cards have been matched?  In this case, you can follow up the previous step by checking to see if 'X' shows up anywhere in <code>visual</code>.  If it doesn't, then that means all of the cards have been uncovered, thus the player has won.</li>
</ol>
</div>
<span class="comment-copy">so what doesn't work exactly?</span>
<span class="comment-copy">Your indentation is off, please edit your code again</span>
<span class="comment-copy">I'm not sure that "please help me debug my homework" is an on-topic question on Stack Overflow. Could you focus it more? At the very least, provide a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>. Debugging is an important skill that should be learned by practice rather than outsourced to Stack Overflow.</span>
<span class="comment-copy">what doesn't work is that the numbers don't appear and they don't stay when the user gets a match</span>
<span class="comment-copy">You break out of the loop when the user finds a single match. The game needs to keep going until they find all the matches.</span>
