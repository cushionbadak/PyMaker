<div class="post-text" itemprop="text">
<p>I have known the use of <code>setter</code> and <code>getter</code> for several properties, how could I trigger a same function when <strong>any property</strong> changes?</p>
<p>For example, the following codes add a setter to property <code>a</code>. </p>
<pre><code>class AAA(object):
    def __init__(self):
        ...
    @property
    def a(self):
        ...
    @a.setter
    def a(self, value):
        ...
</code></pre>
<p>If the class has a lot of properties like <code>a</code>, <code>b</code>, ... , <code>z</code>, and I want to print something like <code>property xxx is modified</code> when any property changes.</p>
<p>It is stupid to add the similar getter and setter one by one.</p>
<p>I have read some related questions and answers, but I do not find the solution for many properties.</p>
<ul>
<li><a href="https://stackoverflow.com/questions/6190468/how-to-trigger-function-on-value-change">How to trigger function on value change?</a></li>
<li><a href="https://stackoverflow.com/questions/6618002/using-property-versus-getters-and-setters">Using @property versus getters and setters</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Metaprogramming, using <code>__setattr__</code> to intercept modification:</p>
<pre><code>class AAA(object):
    def __setattr__(self, attr, value):
        print("set %s to %s" % (attr, value))
        super().__setattr__(attr, value)

aaa = AAA()
aaa.x = 17
# =&gt; set x to 17
print(aaa.x)
# =&gt; 17
</code></pre>
<p>You can do similarly with <code>__getattr__</code> for reading access.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer"><strong>descriptors</strong></a>. Descriptors are, in layman's terms, <em>reusable properties</em>. The advantage over the <code>__getattr__</code> and <code>__setattr__</code> hooks is that you have more fine-grained control over what attributes are managed by descriptors.</p>
<pre><code>class MyDescriptor:
    def __init__(self, default='default'):
        self.default = default

    def __set_name__(self, owner, name): # new in Python3.6
        self.name = name

    def __get__(self, instance, owner):
        print('getting {} on {}'.format(self.name, instance))
        # your getter logic here
        # dummy implementation:
        if instance is not None:
            try:
                return vars(instance)[self.name]
            except KeyError:
                return self.default
        return self

    def __set__(self, instance, value):
        print('setting {} on {}'.format(self.name, instance))
        # your getter logic here
        # dummy implementation:
        vars(instance)[self.name] = value

class MyClass:
    a = MyDescriptor()
    b = MyDescriptor()

    _id = 1

    # some logic for demo __repr__
    def __init__(self):
        self.c = 'non-descriptor-handled'
        self.id = MyClass._id
        MyClass._id += 1

    def __repr__(self):
        return 'MyClass #{}'.format(self.id)
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; m1 = MyClass()
&gt;&gt;&gt; m2 = MyClass()
&gt;&gt;&gt; m1.c
'non-descriptor-handled'
&gt;&gt;&gt; m1.a
getting a on MyClass #1
'default'
&gt;&gt;&gt; m1.b
getting b on MyClass #1
'default'
&gt;&gt;&gt; m1.b = 15 
setting b on MyClass #1
&gt;&gt;&gt; m1.b
getting b on MyClass #1
15
&gt;&gt;&gt; m2.b
getting b on MyClass #2
'default'
</code></pre>
</div>
<span class="comment-copy">Which Python version are you using?</span>
<span class="comment-copy">Do you anyways want to define getters, or do you really just want to know when something is <i>changed</i>?</span>
<span class="comment-copy">@timgeb Python 3.6+, and I think this may have nothing to do with the version.</span>
<span class="comment-copy">Any property or any attribute? If any attribute then it's probably easiest to override <code>__setattr__</code>?</span>
<span class="comment-copy">@L3viathan If one could know any property is changed, then he could do any things. The hard part is not <b>what to do when know any property is changed</b>, but <b>how to know if any property is changed</b>.</span>
<span class="comment-copy">This is what I want! Thanks a lot! BTW, I wonder why no answer refers to the <code>__setattr__</code> in the related questions I mentioned ...</span>
<span class="comment-copy">It's a bit of a chicken and an egg kind of problem. To find a relevant answer it really helps to know keywords to search for already (and if you know the keywords you might not need the answer in the first place). Reading the documentation for your programming language is a great way to expand your horisons. Specifically, for this, reading the <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">data model</a> page is super useful.</span>
<span class="comment-copy">Your words really inspire me a lot. The key point of many questions and problems is just <b>how to describe it</b>, while in most cases the description contains the answer. Your advice for reading documentation is very helpful. Thanks again!</span>
<span class="comment-copy">Although a little bit complicated, your answer still gives a useful method. In your solution, one just needs to register/handle the specified properties as <code>MyDescriptor</code> objects as he wants. There is an advantage that if one does not want to trigger the function for some properties, he can just let it be.</span>
<span class="comment-copy">@Hansimov In addition, you could write <i>other</i> descriptor classes and instantiate different attributes as different descriptors. If you want general, reusable, flexible properties it's going to be a little complicated, no way around that. :) Descriptors are very powerful, but you have to know when to use them. In simple use cases, <code>__getattr__</code>/<code>__setattr__</code> hooks or <code>property</code> decorated methods can do the job.</span>
