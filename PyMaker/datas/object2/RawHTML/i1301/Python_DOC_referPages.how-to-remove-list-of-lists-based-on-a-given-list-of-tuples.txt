<div class="post-text" itemprop="text">
<p>I have two lists like below.</p>
<pre><code>l=[['A', 'B', 'C'], ['A', 'C'], ['A', 'B', 'C'], ['A', 'B'],['B','C']]
x=[('A', 'B'), ('A', 'C')]
</code></pre>
<p>I want to remove the list from l ,which isn't present in list  of tuples in x.</p>
<p>for example <code>l ['B','c']</code> list is present but we don't <code>(B,C)</code> combination in x so we need to remove i.e B,C both elements not presented any single tuple in X.
 my expected output will be:</p>
<pre><code>[['A', 'B', 'C'], ['A', 'C'], ['A', 'B', 'C'], ['A', 'B']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a condtional <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> with <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer"><code>all</code></a> and <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any</code></a>:</p>
<pre><code>&gt;&gt;&gt; [l_ for l_ in l if any(all(e in l_ for e in x_) for x_ in x)]
[['A', 'B', 'C'], ['A', 'C'], ['A', 'B', 'C'], ['A', 'B']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Although all of the above work, One is considerably faster.
Below is the measured time in seconds of each solution for 100 000 runs.</p>
<ul>
<li>schwobaseggl:  0.80720812</li>
<li>long_for_loop:  0.7031608010000001</li>
<li>shlomiLan 0.24393211999999997</li>
<li>Miklos_Horvath 0.683809444 (has not been converted back to list)</li>
</ul>
<p>As seen above shlomiLan is almost 3 times as fast as any other solution.
code used to get the results can ben seen here:</p>
<pre><code>import timeit
setup = """
l = [['A', 'B', 'C'], ['A', 'C'], ['A', 'B', 'C'], ['A', 'B'],['B','C']]
x = [('A', 'B'), ('A', 'C')]"""

schwobaseggl = "[l_ for l_ in l if any(all(e in l_ for e in x_) for x_ in x)]"

long_for_loop = '''
c = []
for l_ in l:
    d = []
    for x_ in x:
        a = []
        for e in x_:
            if e in l_:
                a.append(True)
            else:
                a.append(False)
                break
        if all(a):
            d.append(True)
    if any(d):
        c.append(l_)
'''

shlomiLan = """new_list = []
for i in l:
    # Must use a flag, because we have 2 items that are the same in l (['A', 'B', 'C'])
    # so can't use append if i not new_list
    is_i_added = False
    for z in x:
        if is_i_added:
            continue

        j_not_in_i = False
        for j in z:
            if j not in i:
                j_not_in_i = True

        if not j_not_in_i:
            new_list.append(i)
            is_i_added = True"""

miklos_Horvath = "l = list(filter(lambda m: any(all(e in m for e in y) for y in x), l))"

a = timeit.timeit(setup=setup, stmt=schwobaseggl, number=100000)
b = timeit.timeit(setup=setup, stmt=long_for_loop, number=100000)
c = timeit.timeit(setup=setup, stmt=shlomiLan, number=100000)
d = timeit.timeit(setup=setup, stmt=miklos_Horvath, number=100000)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For me, this is to complex for a one-liner.</p>
<pre><code>new_list = []
for i in l:
    # Must use a flag, because we have 2 items that are the same in l (['A', 'B', 'C'])
    # so can't use append if i not new_list
    is_i_added = False
    for z in x:
        if is_i_added:
            continue

        j_not_in_i = False
        for j in z:
            if j not in i:
                j_not_in_i = True

        if not j_not_in_i:
            new_list.append(i)
            is_i_added = True

print(new_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a filter like this:</p>
<pre><code>l=[['A', 'B', 'C'], ['A', 'C'], ['A', 'B', 'C'], ['A', 'B'],['B','C']]
x=[('A', 'B'), ('A', 'C')]

l = list(filter(lambda m: any(all(e in m for e in y) for y in x), l))

print(l)
</code></pre>
</div>
<span class="comment-copy">Could you be more explicit about the rules? For instance, <code>x</code> does not contain either <code>('B', 'C')</code> or <code>('A', 'B', 'C')</code>, yet somehow you want to remove one and keep the other?</span>
<span class="comment-copy">Also, what have you tried so far?</span>
<span class="comment-copy">@MartinFrodl Maybe because both <code>'B'</code> and <code>'C'</code> are <i>related</i> to <code>'A'</code> through <code>('A', 'B')</code> &amp; <code>('A', 'C')</code> tuples respectively? Just guessing though..</span>
<span class="comment-copy">@Ev. Kounis ,ya your correct .@Martin Frodl  'B' and 'C' are related to 'A' through ('A', 'B') &amp; ('A', 'C'). the variable's  presented in x  tuples should present l. for example l is ['A', 'B', 'C']  .x is  ('A', 'B'), ('A', 'C') in our case (A,B ) presented in l and (a,c) presented .at lest  one is presented also fine. but in case of ['B','C'] no tuple in X all variable nothing so we need to remove ,['B','C'] from my final list .</span>
<span class="comment-copy">It is a little bit slower than the list comprehesion what schowbaseggl wrote but if you dont need to convert the filter back to list it will be faster :)</span>
