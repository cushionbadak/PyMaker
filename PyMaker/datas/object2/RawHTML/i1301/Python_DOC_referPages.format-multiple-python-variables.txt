<div class="post-text" itemprop="text">
<p>I'm early in the learning stages of python, and I've spent the last hour or so trying to find a more efficient way to format multiple integer variables to have thousands separators. This method works, but I can't shake the feeling that if you're doing the same thing 4 times, there is probably a better way to do it.</p>
<pre><code>if check &gt; 999:
 check = "{:,}".format(check)
if number &gt; 999:
 number = "{:,}".format(number)
if nmod &gt; 999:
 nmod = "{:,}".format(nmod)
if ndiv &gt; 999:
 ndiv = "{:,}".format(ndiv)
</code></pre>
<p>Thanks in advance!
-Rali</p>
</div>
<div class="post-text" itemprop="text">
<p>Basically what you want to do is perform the same operation on a group of elements. This will require for you to know about lists/tuples and the use/definition of functions. <br/>
One of the simplest way to solve this is to implement a function that does this for you for any amount of arguments you are going to pass to it by using (*args). <br/></p>
<pre><code>def format_check( *args):
    res = []
    for arg in args:
        res.append( '{:,}'.format(arg))

    return res

a = 123123
b = 153452
c = 567567
d = 1233
e = 12

a,b,c,d,e = format_check( a,b,c,d,e)

print( a,b,c,d,e, sep='\n')
</code></pre>
<p>which will output</p>
<pre><code>123,123
153,452
567,567
1,233
12
</code></pre>
<p>A more elaborated, but much more compact way would be:</p>
<pre><code>a,b,c,d,e = map( lambda x: '{:,}'.format(x), (a,b,c,d,e))
</code></pre>
<p>For this you will need to learn about the use of map, which applies a function to all element of an iterable object and lambda which lets you define a quick oneline nameless function. <br/></p>
<pre><code>lambda x: '{:,}'.format(x)
</code></pre>
<p>is kinda equivalent to</p>
<pre><code>def some_function( x):
    return '{:,}'.format(x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could also store your variables in a <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer"><code>list</code></a>, then <a href="http://book.pythontips.com/en/latest/map_filter.html#map" rel="nofollow noreferrer"><code>map()</code></a> them with a <a href="http://book.pythontips.com/en/latest/lambdas.html#lambdas" rel="nofollow noreferrer"><code>lambda</code></a>.</p>
<pre><code>change = lambda s: [s, '{:,}'.format(s)][s &gt; 999]
</code></pre>
<p>That lambda will act like a function (and you can define it using a function <code>def</code> as well) but lambdas are shorter. It can be passed one (positional) argument, and it returns <code>s</code> if <code>s &gt; 999</code> is false (i.e. <code>0</code>) or <code>'{:,}'.format(s)</code> when <code>s &gt; 999</code> is true (i.e. 1). You're basically accessing a list, indexing it whether or not <code>s &gt; 999</code>.</p>
<p>What's great about a lambda/function is that you can keep the repetitive code all in one place.</p>
<p>You can then use a <code>map()</code> like so</p>
<pre><code>vars = [check, number, nmod, ndiv]
vars[:] = map(change, vars)     # modifies the list in-place

newList = [*map(change, vars)]  # creates a new list
</code></pre>
<p>The <code>map()</code> will apply the <code>change</code> lambda (or function) onto each variable and return a <em>generator</em> with the results.</p>
<pre><code>check, number, nmod, ndiv = 2000, 3000, 400

# lambda
change = lambda s: [s, '{:,}'.format(s)][s &gt; 999]

# list
vars = [check, number, nmod, ndiv]

# before
print(vars)

# map in-place
vars[:] = map(change, vars)

# after
print(vars)
</code></pre>
<p>Output:</p>
<pre><code>[1000, 2000, 3000, 4000]
['1,000', '2,000', '3,000', '4,000']
</code></pre>
</div>
<span class="comment-copy">Thanks Crivella! I definitely need to learn more about lists, tuples, and functions. I very much appreciate the examples and explanations.</span>
<span class="comment-copy">Thank you TrebuchetMS! I really appreciate the explanation. I went through a tutorial that discussed lambda, but didn't quite understand it without a use case. This is the first I've heard of map, so I'll read up on it.</span>
<span class="comment-copy">I guess my answer might've been a bit of an overkill for your problem but hey, at least it introduces you to lambdas and maps. :-)</span>
<span class="comment-copy">Not at all an overkill in my opinion! I am a python information sponge right now and appreciate every bit of help I can get! Thanks again!</span>
