<div class="post-text" itemprop="text">
<p>I want to download files from an FTP server and archive them locally in a (zip) archive. </p>
<p>It is well known how to download files and save them individually:</p>
<pre><code>import ftplib
remote = ftplib.FTP(ftp_server) 
remote.login(username, password) 
for filename in file_list:
    remote.retrbinary("RETR " + filename, open(filename, 'wb').write)
remote.quit()
</code></pre>
<p>It is also well known how to add files to an archive:</p>
<pre><code>import zipfile
archive = zipfile.ZipFile(archive_file)
archive.write(filename)
archive.close()
</code></pre>
<p>But it seems not possible to use both at the same time:</p>
<pre><code>remote.retrbinary("RETR " + filename, archive.write(filename))
</code></pre>
<p>This leads to a FileNotFoundError, because <code>filename</code> has not been saved to a local (temporary) directory in between.</p>
<p>Is there a way to directly send the file stream from FTP into a zip archive? Or would it be more efficient to download all files straight, add them to the archive, and then delete the files? I would like to keep harddisk I/O as low as possible.</p>
</div>
<div class="post-text" itemprop="text">
<p>Download the file to memory and use <a href="https://docs.python.org/3/library/zipfile.html#zipfile.ZipFile.writestr" rel="nofollow noreferrer"><code>ZipFile.writestr</code></a>:</p>
<pre><code>import ftplib
import zipfile
from io import BytesIO

# ...

archive = zipfile.ZipFile(archive_file, "w")

for filename in file_list:
    flo = BytesIO()
    ftp.retrbinary('RETR ' + filename, flo.write)
    archive.writestr(filename, flo.getvalue())

archive.close()
</code></pre>
</div>
