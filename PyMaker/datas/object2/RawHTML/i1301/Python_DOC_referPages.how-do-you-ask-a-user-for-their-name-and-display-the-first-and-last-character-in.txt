<div class="post-text" itemprop="text">
<p>I tried using this piece of code:</p>
<pre><code>name = input("What is your full name? ")
print(name[0:-1])
</code></pre>
<p>but it didn't work. Instead of displaying the first and last character, it would delete the last letter and display the rest.
Any help would be appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to do it without declaring any variables you could use <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>itemgetter()</code></a> and then join first and last returned value.</p>
<pre><code>from operator import itemgetter

print(''.join(itemgetter(0,-1)(input("What is your full name? "))))
</code></pre>
<p>Without importing libraries</p>
<pre><code>print(''.join(map(input("What is your full name? ").__getitem__, (0,-1))))
</code></pre>
<p>or as @Graipher suggested:</p>
<pre><code>print((lambda s: s[0] + s[-1])(input("What is your full name? ")))
</code></pre>
<hr/>
<p><strong>Output:</strong></p>
<pre><code>What is your full name? hello
ho
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could just do:</p>
<pre><code>name = input("What is your full name? ")
print(name[0] + name[len(name)-1])
</code></pre>
<p>Putting 0 would display the first letter and because "len" counts the number of letters and the variable (name) already has stored information, subtracting 1 would give you the last character. </p>
</div>
<span class="comment-copy">So, why do you not want to use a variable? Without it this is going to be very hacky.</span>
<span class="comment-copy">Why is it wrapped in <code>len()</code>? That will give you the length of the input. <code>[0:-1]</code> will slice the list too, not give you the first and last letter.</span>
<span class="comment-copy"><code>print((lambda s: s[0] + s[-1])(input("What is your full name? ")))</code> would work, but does that count as using no intermediate variable? It is basically the same as using <code>itemgetter</code>, though.</span>
<span class="comment-copy">There are already better ways provided, but here is another way as you asked. <code>import numpy</code> and <code>print(''.join(numpy.roll(list(input()), -1)[:-3:-1]))</code>. I had wanted to use <code>collections.deque(data).rotate(-1)</code> but it doesn't return a value so you'd need to use a variable. Numpy roll does the same sort of thing.</span>
