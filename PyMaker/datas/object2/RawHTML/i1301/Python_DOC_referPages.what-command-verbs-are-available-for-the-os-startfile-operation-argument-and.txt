<div class="post-text" itemprop="text">
<p>According to the <a href="https://docs.python.org/3/library/os.html#os.startfile" rel="nofollow noreferrer">Python documentation</a>, <code>os.startfile</code> takes two arguments: <code>path</code> and <code>operation</code>. Path is fairly well described and self-explanatory, but for <code>operation</code>, all that is said is:</p>
<blockquote>
<p>When another <em>operation</em> [(not <code>'open'</code>)] is given, it must be a “command verb” that specifies what should be done with the file. Common verbs documented by Microsoft are <code>'print'</code> and <code>'edit'</code> (to be used on files) as well as <code>'explore'</code> and <code>'find'</code> (to be used on directories).</p>
</blockquote>
<p>This implies that other command verbs exist. Are there any other available command verbs? If so, what are they and what do they do? </p>
<p>Specifically, I would like to know the command verb associated with the "Open file location" operation.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since all <code>startfile</code> does is basically a <a href="https://github.com/python/cpython/blob/4c49da0cb7434c676d70b9ccf38aca82ac0d64a9/Modules/posixmodule.c#L11237" rel="nofollow noreferrer">call to ShellExecuteW</a> from shell32, this is not really Python-specific.</p>
<p><a href="https://docs.microsoft.com/en-us/windows/desktop/shell/launch#object-verbs" rel="nofollow noreferrer">Microsoft docs indicate</a> that the operations (“verbs”) available in the ShellExecute family of functions depend on the exact system (registry). As per that page, “commonly available verbs” are:</p>
<ul>
<li>edit — Launches an editor and opens the document for editing.</li>
<li>find — Initiates a search starting from the specified directory.</li>
<li>open — Launches an application. If this file is not an executable file, its associated application is launched.</li>
<li>print — Prints the document file.</li>
<li>properties — Displays the object's properties.</li>
</ul>
</div>
<span class="comment-copy">You can probably find the valid verbose in some Windows documentation document. FYI if you want to open the location of the file you can simply use <code>os.dirname</code> to get the name of the parent directory and open that one...</span>
<span class="comment-copy">@GiacomoAlzetta I did look but I couldn't find that doc. The behavior with that is actually slightly different --  "Open file location" automatically highlights the file in question, allowing it to be easily found and opened by just pressing "Enter".</span>
<span class="comment-copy">It depends on the file type's associated ProgId in the registry, among other things. For example, for .py scripts the default is "Python.File", which defines the standard "open" command but also multiple "Edit with IDLE" commands that display in a submenu of a .py file's right-click context menu. Running these commands requires the relative subkey path, e.g. <code>os.startfile('test.py', r'editwithidle\shell\edit37')</code>. Note that registry paths only use backslash as a path separator, not forward slash.</span>
<span class="comment-copy">A useful command defined for many file types is "runas", which is like "open" except it sends the request to the Application Information service to run the file elevated (i.e. run as administrator, with a UAC consent dialog). Python's installer doesn't define "runas" for "Python.File", but you can create it by copying the "open" command. Then you can use <code>os.startfile</code> to run a script elevated, as long as it doesn't require command-line arguments. If you need command-line arguments, then you'll have to use PyWin32 or ctypes to call <code>ShellExecute[Ex]</code> directly.</span>
