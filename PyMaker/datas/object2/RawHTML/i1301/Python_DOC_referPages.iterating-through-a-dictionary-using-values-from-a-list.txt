<div class="post-text" itemprop="text">
<p>I'm working with some data that has ever-changing keys for each record. I've collected a master list of keys from every record and stored them in a list. I'd like to then iterate through the list to pull the appropriate values using a <code>try catch</code> but I'm getting an error due to the item in the list item being a <code>str</code> and the dictionary being a <code>dict</code>.</p>
<p>An example, notice the possibility of nested keys. Otherwise my approach would be much simpler:</p>
<pre><code>records = [{
  "id": 2017215,
  "name": "foo bar"
  "campaign": {
    "id": 161,
    "name": "Historical Data Campaign"
  }
},
{
  "id": 2017215,
  "name": "foo bar",
  "last_updated": "2018-01-01",
  "campaign": {
    "id": 161,
    "name": "Historical Data Campaign"
  }
}]

keys = [ ['id'], ['name'], ['campaign'], ['campaign']['id'], ['campaign']['name'], ['last_updated'] ]

for record in records:
  for key in keys:
    print (record + key) # assumption was this would generate "record['id']" but errors due to mismatched types.
</code></pre>
<p>Am I making this harder than it needs to be? The biggest issue is the keys can change from record to record, and in some cases there are nested keys in the data. </p>
</div>
<div class="post-text" itemprop="text">
<p>First, you can make the above snippet work if you did something along the lines of</p>
<pre><code>records = # ...
keys = [ ('id',), ('name',), ('campaign',), ('campaign', 'id'), ('campaign', 'name'), ('last_updated',) ]

for record in records:
    for key_tuple in keys:
        obj = record
        for key in key_tuple:
            obj = record[key]
        print(obj)
</code></pre>
<p>One issue from your snippet is the occurrence of elements like <code>['campaign']['id']</code>. Python assumes the <code>['campaign']</code> part is a literal list definition, and then the <code>['id']</code> is indexing that list (but can't because it's not an integer).</p>
<p>More generally, I would suggest looking into the <a href="https://docs.python.org/3/library/stdtypes.html?highlight=set#dict.items" rel="nofollow noreferrer"><code>.items()</code></a> method for dictionaries. You could turn the above snippet into</p>
<pre><code>for record in records:
    for key, value in record.items():

        # to handle nested dictionaries
        if isinstance(value, dict):
            for subkey, subval in value.items():
                print(subkey, subval)
        else:
            print(key, val)
</code></pre>
<p>That will handle any keys, but if you have deeper than two levels of nested dictionaries, you may want to re-implement it as a recursive function.</p>
</div>
<span class="comment-copy">For a hacky solution you could try <a href="https://docs.python.org/3.5/library/functions.html#exec" rel="nofollow noreferrer"><code>exec</code></a></span>
<span class="comment-copy">your "keys" is syntactically incorrect.</span>
<span class="comment-copy">why not take the <code>.keys()</code>view of the dictionary?</span>
<span class="comment-copy">if you want nested key structure, use tuples. Immutable, no lists</span>
<span class="comment-copy">Thank you. I will experiment with this. I have seen instances of 3 and 4 levels.</span>
