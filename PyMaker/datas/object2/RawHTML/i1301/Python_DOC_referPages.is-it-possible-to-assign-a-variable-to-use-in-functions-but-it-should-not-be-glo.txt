<div class="post-text" itemprop="text">
<p>So what I'm trying to do is I need to assign a variable to use in several functions. But that variable should not be a global variable. How can I do that if it is possible?</p>
<p>Edit: I did forgot one thing. This is for my project and most of it is finished but this. <strong>My code needs to be non-repeated as much as it can.</strong> I have 5 variables and 15 functions to use some or all of that variables. </p>
<p>Edit2: Let me just post a function here.</p>
<pre><code>def draw_stairs(top_stair_wide, stair_height, stair_count, character):
for o in range(stair_count):
    for b in range(stair_height):
        draw_straight_line(top_stair_wide, character)
        print("")
    top_stair_wide += 3
</code></pre>
<p>What I need to do is when I use that function, I need to fill "top_stair_wide", "stair_height", "stair_count" with <strong>a variable that is not global</strong>. I can't just put numbers because I will use those variables in 14 different functions again with maths.</p>
<p>I have a function that draws straight line and before, it inputs and returns character so those are not the problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using a main function as you told me in a comment, you could write it like this:</p>
<pre><code>def main():
    # Here are your NOT GLOBAL variables:
    top_stair_wide = 1
    stair_height = 2
    stair_count = 3
    character = "O"

    def draw_stairs(top_stair_wide, stair_height, stair_count, character):
        for o in range(stair_count):
            for b in range(stair_height):
                draw_straight_line(top_stair_wide, character)
                print("")
            top_stair_wide += 3

    # ... more definitions follow 

    # Then call the functions...

# Job done when you execute the program:
main()
</code></pre>
<p>Alternatively: </p>
<pre><code>def main(top_stair_wide, stair_height, stair_count, character): # &lt;-- cram all the expected arguments there

    def draw_stairs(top_stair_wide, stair_height, stair_count, character):
        for o in range(stair_count):
            for b in range(stair_height):
                draw_straight_line(top_stair_wide, character)
                print("")
            top_stair_wide += 3

    # ... more definitions follow 

    # Then call the functions...

# Job done when you execute the program:
main(1, 2, 3, "O")
</code></pre>
<p>It's also possible using kwargs, because then you have to know the arguments when you call main() and not when you define it:</p>
<pre><code>def main(**kwargs):

    def draw_stairs(**kwargs):
        for o in range(kwargs["stair_count"]):
            for b in range(kwargs["stair_height"]):
                draw_straight_line(kwargs["top_stair_wide"], kwargs["character"])
                print("")
            kwargs["top_stair_wide"] += 3

    # ... more definitions follow 

    # Then call the functions...
    function1(**kwargs)
    function2(**kwargs)
    function3(**kwargs)


# Job done when you execute the program:
main(top_stair_wide = 1,
     stair_height = 2,
     stair_count = 3,
     character = "O")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Create a class, make the variables instance variables and turn the functions into methods. Then you can access the instance variables in each method without the explicit need to pass them around.</p>
<pre><code>class C:
    def __init__(self, var1, var2, var3):
        self.var1 = var1
        self.var2 = var2
        self.var3 = var3

    def add_them(self):
        return self.var1 + self.var2 + self.var3

    def multiply_them(self):
        return self.var1 * self.var2 * self.var3
</code></pre>
<p>And so on.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need <a href="https://docs.python.org/3.3/glossary.html#term-parameter" rel="nofollow noreferrer">parameter(s)</a> in your function definition and then pass your variable(s) as <a href="https://docs.python.org/3.3/glossary.html#argument" rel="nofollow noreferrer">argument(s)</a> when you call it.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can pass it to your functions like:</p>
<pre><code>def func1(variable):
    # your logic here with variable
    return 'something'

def func2(variable):
    # your logic here with variable
    return 'something'
</code></pre>
<p>Or you can set it as constant in current file as:</p>
<pre><code>VARIABLE = 'variable'

def func1():
    # your logic here with VARIABLE
    return 'something'

def func2():
    # your logic here with VARIABLE
    return 'something'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another option is using a dictionary storing the shared parameters and only passing this dictionary (rather than all variables separately) as an argument:</p>
<pre><code>def add_params(params):
   return params['var1'] + params['var2'] + params['var3']

def multiply_params(params):
   return params['var1'] * params['var2'] * params['var3']

&gt;&gt;&gt; params = {'var1': 1, 'var2', 2, 'var3': 3}
&gt;&gt;&gt; add_params(params)
6
&gt;&gt;&gt; multiply_params(params)
6
</code></pre>
</div>
<span class="comment-copy">just use <b>parameters</b> in your functions</span>
<span class="comment-copy">It's recommended to show your code when post question</span>
<span class="comment-copy">@Netwave as I understand, that would do but it would be too much repeated as I need to use same variables in different functions.</span>
<span class="comment-copy">@buran I didn't post it because it's just a bunch of triangle-square, bow tie etc. drawing functions.</span>
<span class="comment-copy">@OgulcanBozkurt to be honest I understand the question and its constraints but not why they are needed. You'll at least need one global variable somewhere (a dictionary), or maybe each function can return its result <b>and its input parameters</b> but then that makes every function cumbersome and unclear.</span>
<span class="comment-copy">alright i finally got it, thanks for 3 different methods :)</span>
<span class="comment-copy">Glad it helped :)</span>
<span class="comment-copy">it's good that I learned that but I am not allowed to use classes as we didn't learn them in school (I did myself).</span>
<span class="comment-copy">as I understand, I need to use parameters in every function that I defined right? if so, that would be so many repeats and I need non-repeated code.</span>
<span class="comment-copy">@OgulcanBozkurt: You cam pass a container, like a dictionary, that has many parameter values in it. That way you only have to pass one argument.</span>
<span class="comment-copy">@martineau wouldn't that whole dictionary called as one global variable?</span>
<span class="comment-copy">No, in the function you will need to reference the argument passed. For example: with <code>def func(parms):</code> within the function's body you will need to used <code>parms['arg1']</code>, <code>parms['arg2']</code>, etc. A possibly better choice would be to use a <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>collections.nametuple</code></a> (or <a href="https://docs.python.org/3/library/typing.html#typing.NamedTuple" rel="nofollow noreferrer"><code>typing.NamedTuple</code></a>) which would allow you to then write <code>parms.arg1</code> and <code>parms.arg2</code> which would be a little more concise.</span>
<span class="comment-copy"><code>globals()['VARIABLE']</code> is <code>variable</code> so the second example doesn't fit. For the first example, the <code>'something'</code> should probably depend on <code>variable</code>.</span>
<span class="comment-copy">Why is the second example not fitting? I did not understand what you wrote.</span>
<span class="comment-copy">@Guimoute: Because <code>VARIABLE</code> is a constant defined in the global namespace. Which is specifically what OgulcanBozkurt doesn't want.</span>
