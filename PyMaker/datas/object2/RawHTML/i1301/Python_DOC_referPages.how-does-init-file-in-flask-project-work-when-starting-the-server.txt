<div class="post-text" itemprop="text">
<p>I'm reading the <a href="http://flask.pocoo.org/docs/1.0/tutorial/factory/" rel="nofollow noreferrer">Flask tutorial</a> and learned that in large application structure the code is moved from single <code>app.py</code> file to 'application factory function' <code>create_app</code> in <code>_init_.py</code> file, then the server can be started like this:</p>
<pre><code>export FLASK_APP=flaskr
export FLASK_ENV=development
flask run
</code></pre>
<p>I wonder how does the last command work behind the scene, because there's no explicit call to this factory function anywhere in the code hence no app returned?</p>
<p>Another <a href="http://flask.pocoo.org/docs/1.0/patterns/packages/" rel="nofollow noreferrer">Flask doc</a> tries to explain why such project structure is used but in that case code in <code>_init_.py</code> creates <code>app</code> explicitly:</p>
<pre><code>from flask import Flask
app = Flask(__name__)

import yourapplication.views
</code></pre>
<p><a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow noreferrer">python doc</a> says:</p>
<blockquote>
<p>The <strong>init</strong>.py files are required to make Python treat the
  directories as containing packages; this is done to prevent
  directories with a common name, such as string, from unintentionally
  hiding valid modules that occur later (deeper) on the module search
  path. In the simplest case, <strong>init</strong>.py can just be an empty file, but
  it can also execute initialization code for the package or set the
  <strong>all</strong> variable, described later.</p>
</blockquote>
<p>The last sentence mentions about 'initialization code' which can be applied in the second case(and simple project structure with <code>app.py</code> file) but I failed to apply it to the first case.</p>
</div>
<div class="post-text" itemprop="text">
<p>In the <a href="https://github.com/pallets/flask/blob/master/flask/cli.py#L71" rel="nofollow noreferrer">flask source code</a>, they check if a function called <code>create_app</code> exists.</p>
<pre><code># Search for app factory functions.
for attr_name in ('create_app', 'make_app'):
    app_factory = getattr(module, attr_name, None)

    if inspect.isfunction(app_factory):
        try:
            app = call_factory(script_info, app_factory)

            if isinstance(app, Flask):
                return 
</code></pre>
<p>It evens says so in the <a href="http://flask.pocoo.org/docs/1.0/patterns/appfactories/#using-applications" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p>Flask will automatically detect the factory (create_app or make_app) in myapp.</p>
</blockquote>
</div>
<span class="comment-copy">Thank you so much sir!</span>
