<div class="post-text" itemprop="text">
<p>I'm running multiple floats through a function to generate a scientific notation. However, not all floats are put in at all times (it is randomised) therefore generating an error.</p>
<p>Input:</p>
<pre><code>a0,hvt,at,lambd = signify(a0,hvt,at,lambd)
</code></pre>
<p>Function:</p>
<pre><code>def signify(*args):
    rst = []

    for arg in args:
        if arg &gt;= 100.0 or arg &lt;= 0.01:
            arg = '{:.2e}'.format(arg)
            rst.append(arg)
    return rst
</code></pre>
<p>In other words, 'rst' does not always consist of four elements (thanks for pointing it out Singh).</p>
<p>Is someone willing to point me in the right direction?</p>
</div>
<div class="post-text" itemprop="text">
<p>i don't think you quite understand what the error is. Can you post the error message?</p>
<p>I suspect you trying to assign <code>a0,hvt,at,lambd = signify(a0,hvt,at,lambd)</code> is the real culprit, what if "rst" returning from the function does not have 4 elements? That syntax on the left hand side forces the list on the right hand side to be unpacked exactly into 4 elements, and raises a <code>ValueError: too many values to unpack (expected 4)</code> in a mismatch.</p>
<p>try <code>result = signify(a0,hvt,at,lambd)</code> and check output.</p>
<p>Update:</p>
<p>If you want to only modify only some of the 4 terms but allow the rest to pass as-is, you Just need an else portion. Here is how you can think of the entire process.</p>
<pre><code>def signify(*args):
    rst = []
    print(args)
    for arg in args:
        if arg &gt;= 100.0 or arg &lt;= 0.01:
            arg = '{:.2e}'.format(arg) #returns a string
            rst.append(arg)
        else:
            rst.append(arg) #take note that this else statement is the same as the last statement of if block
            #also note that args going through else block are not "strings" unlike the if block, which gives a string during ".format()"
    return rst
</code></pre>
<p>We can improve on this.</p>
<pre><code>def signify(*args):
    rst = []
    print(args)
    for arg in args:
        if arg &gt;= 100.0 or arg &lt;= 0.01:
            arg = '{:.2e}'.format(arg)
        rst.append(arg) #note that you may want to typecast to string to maintain uniformity.
        #rst.append(str(arg))
    return rst
</code></pre>
<p>However, This essentially is the same as applying a function on all args. We can create a function that emphasizes this "working on 1 term" approach.</p>
<pre><code>def signify_single(single_arg):
    if single_arg &gt;= 100 or single_arg &lt;= 0.01:
        return '{:.2e}'.format(single_arg)
    return single_arg #or str(single_arg)
a,b,c,d = (signify_single(x) for x in (101,202,303,40))
</code></pre>
<p>But that makes us realise this is just an if-else statement. They do not have to be ugly necessarily. (PS. That last line is a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension.</a>)</p>
<pre><code>a,b,c,d = ('{:.2e}'.format(x)
          if (x &gt;= 100 or x &lt;= 0.01)
          else x #or str (x)
          for x in (101,202,303,40))
</code></pre>
<p>The condition can be tweaked around a little to give us a cleaner comprehension.
Note that these can be written in a single line as well if you prefer.</p>
<pre><code>a,b,c,d = (x if (0.01 &lt; x &lt; 100) else '{:.2e}'.format(x) for x in (101,202,303,40))
</code></pre>
<p>You can use any of the styles which looks the cleanest to you, Or explore and find something even better. Just apply it to your case like this.</p>
<pre><code>a0,hvt,at,lambd = (x if (0.01 &lt; x &lt; 100) else '{:.2e}'.format(x) for x in (a0,hvt,at,lambd))
</code></pre>
</div>
<span class="comment-copy">Please add example input, output, and the error. And in general - You could either use dummy variable of you insist on receiving the whole 4, or just return a dict. its varias with your usecase</span>
<span class="comment-copy">You are correct, rst does not always consists of 4 elements. (will add this to the post) But with my limited experience I'm having trouble coming to the right solution (without going all-out with if statements:))</span>
<span class="comment-copy">ok. What is your goal? You want all 4 terms all the time but some of them modified if they match the condition? then you just are missing an <code>else</code> statement that passes the terms as-is.</span>
<span class="comment-copy">@Sumerechny Updated, is this what you're looking for?</span>
<span class="comment-copy">amazing! Thanks, especially for the additional explanation.</span>
