<div class="post-text" itemprop="text">
<p>In Python 3.7, </p>
<pre><code>from facebookads.adobjects.adlabel import AdLabel 
</code></pre>
<p>results in </p>
<pre><code>Traceback (most recent call last):
  File "/Users/mohan/growth-tools/facebook-experiment/main.py", line 4, in &lt;module&gt;
    from facebookads.adobjects.adlabel import AdLabel
  File "/Users/mohan/growth-tools/facebook-experiment/venv/lib/python3.7/site-packages/facebookads/adobjects/adlabel.py", line 22, in &lt;module&gt;
    from facebookads.adobjects.abstractcrudobject import AbstractCrudObject
  File "/Users/mohan/growth-tools/facebook-experiment/venv/lib/python3.7/site-packages/facebookads/adobjects/abstractcrudobject.py", line 564
    params=None, async=False, include_summary=True,
                     ^
SyntaxError: invalid syntax
</code></pre>
<p>The issue is, I think, that async has become a reserved keyword as of Python 3.7. Is there any workaround that would let me keep using this SDK?</p>
</div>
<div class="post-text" itemprop="text">
<p>Clearly, this module doesn't support 3.7. So you do as always where the vendor doesn't provide support: edit it and/or fork it.</p>
<p>E.g. replace <code>async</code> -&gt; <code>async_</code> across the module's codebase as in <a href="https://stackoverflow.com/questions/48559337/error-when-building-tcltk-in-visual-studio-2017/52662439#52662439">Error when building TclTk in Visual Studio 2017</a>:</p>
<pre><code>$ find /Users/mohan/growth-tools/facebook-experiment/venv/lib/python3.7/site-packages/facebookads \
! -type d -a -name '*.py' -print0 |\
xargs -0 python -c '
import sys,re
for fname in sys.argv[1:]:
 with open(fname,"rb") as f: l=f.read()
 (r,n)=re.subn(r"\b(async)\b",r"\1_",l)
 if n&gt;0:
  with open(fname,"wb") as f: f.write(r)
'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you think there is a genuine problem with the SDK, can't you just <code>sudo cd</code> there and then edit it? </p>
<p>If you can then the easiest option is to just go through every instance of <code>async</code> and check if it is the variable async, then replace it if it is.</p>
</div>
<div class="post-text" itemprop="text">
<p>I ended up just looping through all the files and replacing any instances of "async" with "async_", my solution below:</p>
<pre><code>import os, re
path = r"path\to\facebookads"

python_files = []

for dirpath, dirnames, filenames in os.walk(path):
    for filename in filenames:
        if filename.endswith(".py"):
            python_files.append(os.path.join(dirpath, filename))

for python_file in python_files:

    with open(python_file, "r") as f:
        text = f.read()
        revised_text = re.sub("async", "async_", text)

    with open(python_file, "w") as f:
        f.write(revised_text)
</code></pre>
</div>
<span class="comment-copy">Your surmise of the issue is correct. Use 3.6 until they patch it. Or edit the source. Note that 3.7 isn't stable yet. If you want to live on the bleeding edge, you might get cut.</span>
<span class="comment-copy">@PedroLobito the <a href="https://docs.python.org/3/whatsnew/3.7.html" rel="nofollow noreferrer">3.7rc2 change log</a> says otherwise.</span>
<span class="comment-copy">You're right, but the documentation page doesn't show that, only the change log.Thank you for pointing that.</span>
<span class="comment-copy">@PedroLobito No worries. As I said to the OP, it's pretty murky since we aren't actually talking about a stable release,</span>
