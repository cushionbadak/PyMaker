<div class="post-text" itemprop="text">
<p>Topple is most likely the wrong name for the operation I want, but I cannot think of a better one. </p>
<p>I have N dataframes of shape (100,3), Each row of the original dataframe is the name of a test and the two results it produces. I want to reshape a single dataframe to a (1,200) shape, with all of the values of the tests as a single row. After that I'll append all of the N dataframes into a single one, ending with a (N,200) dataframe. </p>
<p>Here's an example with dummy data:</p>
<pre><code>import pandas as pd
import numpy as np
import random
import string

np.random.seed(42)
tests = np.random.choice(list(string.ascii_letters),size=(100,1))
results = np.random.randint(0,100,size=(100, 2))
df = pd.DataFrame(np.concatenate([tests, results], axis=1), columns=["Test Name", "ValueA", "ValueB"])
toppled_df = pd.DataFrame(np.random.randint(0,100,size=(1,5)),columns=["Z Value A", "Z ValueB", "t ValueA", "t ValueB", "..."])
toppled_df = pd.DataFrame([[44,64,88,70,"..."]],columns=["M Value A", "M ValueB", "Z ValueA", "Z ValueB", "..."])
toppled_df.head()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A more <a href="https://docs.python.org/3/glossary.html#term-pythonic" rel="nofollow noreferrer">pythonic</a> way</p>
<pre><code>df_out = df.set_index('Test Name').stack().to_frame().T
df_out.columns = df_out.columns.map(' '.join).str.strip()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can melt <code>df</code> to a long format, join the test name and value type columns, then transpose it.</p>
<pre><code>tests = np.random.choice(list(string.ascii_letters),size=(100,1))
results = np.random.randint(0,100,size=(100, 2))
df = pd.DataFrame(np.concatenate([tests, results], axis=1), 
                  columns=["Test Name", "ValueA", "ValueB"])

df2['key'] = df['Test Name'] + ' ' + df['variable']
df2['key'] = df2['Test Name'] + ' ' + df2['variable']
df2[['key', 'value']].set_index('key').T
</code></pre>
<p>Loop through each dataframe to create the melted dataframe and then concatenate.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>df2 = df.set_index('Test Name').unstack()
result = pd.DataFrame(data=df2.values.reshape(1,-1), columns=df2.index)
</code></pre>
<p>Output:</p>
<pre><code>&gt;&gt;&gt; result
          ValueA                                                 ... ValueB                                                 
Test Name      M   Z  C  o   Q   h  u   M  s   w   k   k   x   J ...      w   N   u  p   S  r   U   x   z   y   S  O   C   o
0             44  88  8  0  87  10  7  34  4  27  72  11  32  22 ...     49  30  41  6  89  1  47  68  31  98  47  2  23  32
</code></pre>
<p>You can access individual results like this:</p>
<pre><code>result['ValueA', 'M']
# or
result['ValueA']['M']
</code></pre>
</div>
