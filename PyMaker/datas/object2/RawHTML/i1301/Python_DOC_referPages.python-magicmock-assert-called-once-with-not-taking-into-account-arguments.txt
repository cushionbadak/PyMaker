<div class="post-text" itemprop="text">
<p>I am setting up a MagicMock instance, calling the same method twice with different arguments, and setting my assertion to only validate for one set of arguments.</p>
<p>Python: 3.5.2</p>
<pre><code>from unittest.mock import MagicMock

my_mock = MagicMock()
my_mock.some_method()
my_mock.some_method(123)

my_mock.some_method.assert_called_once_with(123)

AssertionError: Expected 'some_method' to be called once. Called 2 times.
</code></pre>
<p>I would expect this to pass. Why does it ignore the arguments?</p>
</div>
<div class="post-text" itemprop="text">
<p>We have discovered that assert_called_with is actually what we want.</p>
<p>It seems confusing and I think it should be called assert_called_only_once_with.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <code>unittest.mock</code> <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_called_once_with" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p><strong>assert_called_once_with(*args, **kwargs)</strong></p>
<p>Assert that the mock was called exactly once and that that call was with the specified arguments.</p>
</blockquote>
<p>Since you are calling the method twice, this should fail.</p>
<p>In this specific case, you might use:</p>
<pre><code>expected_calls = [call(), call(123)]
my_mock.some_method.assert_has_calls(expected_calls, any_order=False)
</code></pre>
<p>Which will assert the expected calls have been used in the order specified in <code>expected_calls</code></p>
</div>
<span class="comment-copy">Also tested with Python 3.6 and 3.7</span>
