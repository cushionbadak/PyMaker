<div class="post-text" itemprop="text">
<p>What I want to understand is why does the following code</p>
<pre><code>for x, y in [1,2], [3,4]:
    print(x, y, x + y)
</code></pre>
<p>prints</p>
<pre><code>1 2 3
3 4 7
</code></pre>
<p>instead of</p>
<pre><code>1 3 4
2 4 6
</code></pre>
<p>Now, I know zip does this work and <a href="https://docs.quantifiedcode.com/python-anti-patterns/readability/not_using_zip_to_iterate_over_a_pair_of_lists.html" rel="nofollow noreferrer">not using zip to iterate over a pair of lists could be considered an anti-pattern</a>, but I still need an explanation for this default behavior.</p>
<p>From my point of view, the code above should intuitively work just like the builtin zip function</p>
<pre><code>for (x, y) in zip([1,2], [3,4]):
    print(x, y, x + y)
</code></pre>
<p>which prints</p>
<pre><code>1 3 4
2 4 6
</code></pre>
<p>From memory I remember seeing the explanation for this technique a long time ago (and I guess that's why this solution comes to mind first), but I've done searches now, including on the whole section 5 of Python 3 documentation but I couldn't find any explanations for this behavior, not even on <a href="https://docs.python.org/3/tutorial/datastructures.html#looping-techniques" rel="nofollow noreferrer">section 5.6. (Looping Techniques)</a>.</p>
<p>Is this a 4th <a href="https://opensource.com/article/18/3/loop-better-deeper-look-iteration-python" rel="nofollow noreferrer">Gotcha</a>?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this is the expected behavior!<br/>
Consider that <code>[1,2], [3,4]</code> is a tuple literal, equivalent to the tuple <code>([1,2], [3,4])</code>. (You might be using this without even noticing, for instance when assigning multiple values with <code>a, b, c = 10, 20, 30</code> disregarding the <code>()</code>...).  </p>
<p>So in your example, the loop iterates through this list as follows:  </p>
<pre><code># First iteration we get:
x, y = [1, 2]  
# Which is the same as:
x = 1
y = 2
# Which would print:
print(x, y, x+y)
&gt;&gt; 1, 2, 3

# Second iteration we get:
x, y = [3, 4]  
# Which is the same as:
x = 3
y = 4
# Which would print:
print(x, y, x+y)
&gt;&gt; 3, 4, 7  
</code></pre>
<p>Does that make more sense now?</p>
<hr/>
<p>Considering zip: If zip would do the same thing, <em>then</em> I'd be suspicious! How is there this very common and considered-useful but completely redundant thing lying around? Hasn't anyone <em>noticed</em>? So you <em>shouldn't</em> expect them to do the same! ;-)  </p>
<hr/>
<p>Edit due to a request for a pointer to documentation.<br/>
From <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow noreferrer">5.3 Tuples and Sequences</a>:  </p>
<blockquote>
<p>A tuple consists of a number of values separated by commas, for
  instance: ...<br/>
  As you see, on output tuples are always enclosed in
  parentheses, so that nested tuples are interpreted correctly; they may
  be input with or without surrounding parentheses, although often
  parentheses are necessary anyway (if the tuple is part of a larger
  expression).</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Look at this:</p>
<pre><code>&gt;&gt;&gt; [1,2],[3,4]
([1, 2], [3, 4])
&gt;&gt;&gt; list(zip([1,2],[3,4]))
[(1, 3), (2, 4)]
&gt;&gt;&gt; 
</code></pre>
<p>The results are different, so when you iterate like:</p>
<pre><code>for x,y in [1,2],[3,4]:
    ...
</code></pre>
<p>it's gonna be like:</p>
<pre><code>x=1
y=2
# next loop
x=3
y=4
</code></pre>
<p>And when the loop is:</p>
<pre><code>for x,y in zip([1,2],[3,4]):
    ...
</code></pre>
<p>It's iterating like:</p>
<pre><code>x=1
y=3
# next loop
x=2
y=4
</code></pre>
<p>That's why Python created a <code>zip</code> method.</p>
</div>
<div class="post-text" itemprop="text">
<p>An intuitive way to understand the first behaviour is to think about </p>
<pre><code>for x, y in [1,2], [3,4]:
</code></pre>
<p>as a decomposition of </p>
<pre><code>for z in [[1,2],[3,4]]:
</code></pre>
<p>where</p>
<pre><code>z[0] = [1,2]
z[1] = [3,4]
</code></pre>
</div>
<span class="comment-copy"><code>zip</code> would be pointless if they were the same.</span>
<span class="comment-copy">The expression <code>[1,2], [3,4]</code> is a <i>tuple literal</i>, which results in a <code>tuple</code> with two elements, each of which is a list with two integers.</span>
<span class="comment-copy">@schwobaseggl not if zip worked were this syntax wouldn't, as in list comprehensions for example</span>
<span class="comment-copy">It does make sense, I must say. But I find it odd that it is the tuple packing we're talking about. It's odd how it goes unnoticed that that's what's happening behind, because when you try to use that syntax in list comprehensions, python gives us back a "SyntaxError: invalid syntax" in STDERR.</span>
<span class="comment-copy">Also, is there any link from the docs which says that the expected behavior in this case is the tuple unpacking?</span>
<span class="comment-copy">Can you give an example for such a fail-case? I added a link regarding parentheses-less defined tuples, which is all this is really about...</span>
<span class="comment-copy"><code>l = [x + y for x, y in a, b]</code> doesn't run while <code>l = [x + y for x, y in (a, b)]</code> runs with no problems</span>
<span class="comment-copy">That makes complete sense, due to ambiguity. Let's mark <code>x + y for x, y in a</code> as <code>ambiguous</code>, then you realize that a valid interpretation would be that <code>l</code> is a list <code>[ambiguous, b]</code>? not using parentheses only works in unambiguous situations.  (On a more general note - if my answer helped, please accept or something <a href="https://stackoverflow.com/help/someone-answers">as one should on SO</a>).</span>
<span class="comment-copy">Is there any link from the docs which says that the expected behavior in this case is the tuple unpacking? Also, it would be nice if you could provide some link which tells us about the creation of the zip function in python.</span>
<span class="comment-copy">@Mrioddo <a href="https://docs.python.org/3.3/library/functions.html#zip" rel="nofollow noreferrer">docs.python.org/3.3/library/functions.html#zip</a> for <code>zip</code> method on docs, but no explanation on the expected behavior</span>
<span class="comment-copy">I understand this is more intuitive for people who doesn't know/understand tuples very much, but to me it looks like the tuple unpacking is more accurately what really happens, don't you agree?</span>
