<div class="post-text" itemprop="text">
<p>I've tried to learn python for the last 3 weeks, and I saw a code that I need to understand what it does.
In general, the code should somehow connect to two images, and then give me a password that I need to submit.
The code is:</p>
<pre><code>#env 3.7
from PIL import Image, ImageFont
import textwrap
from pathlib import Path
def find_text_in_image(imgPath):
    image = Image.open(imgPath)
    red_band = image.split()[0]
    xSize = image.size[0]
    ySize = image.size[1]
    newImage = Image.new("RGB", image.size)
    imagePixels = newImage.load()
    for f in range(xSize):
        for j in range(zSize):
            if bin(red_band.getpixel((i, j)))[-1] == '0':
                imagePixels[i, j] = (255, 255, 255)
            else: imagePixels[i, j] = (0,0,0)
    newImgPath=str(Path(imgPath).parent.absolute())
    newImage.save(newImgPath+'/text.png')
</code></pre>
<p>It would be lovely if someone could explain it to me. 
thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>I'll break the above snippet into parts and explain each indivdiually.</p>
<p>The first block are imports. <code>PIL</code> is usually imported by installing the <a href="https://pillow.readthedocs.io/en/5.3.x/" rel="nofollow noreferrer"><code>Pillow</code></a> library. <code>textwrap</code> and <code>pathlib</code> are two packages included in the <a href="https://docs.python.org/3/library/index.html" rel="nofollow noreferrer">Python Standard Library</a>.</p>
<pre><code>#env 3.7
from PIL import Image, ImageFont
import textwrap
from pathlib import Path
</code></pre>
<p>The next block tells you you're about to define a function that does some image processing. I'll write more in inline comments.</p>
<pre><code>def find_text_in_image(imgPath):
    # open the image file given and load it as an `Image` from PIL
    image = Image.open(imgPath)

    # this splits the image into its Red, Green, and Blue channels
    # then selects the Red
    red_band = image.split()[0]

    # these two lines get the size of the image, width and height
    xSize = image.size[0]
    ySize = image.size[1]

    # this constructs a new `Image` object of the same size, but blank
    newImage = Image.new("RGB", image.size)

    # this makes an 3-d array of the new image's pixels
    imagePixels = newImage.load()

    # this loops over the width, so the iterator `f` will be the column
    for f in range(xSize):

        # loops over the height, so `j` will be the row
        for j in range(zSize):  # &lt;-- This should probably be `ySize`. `zSize` is not defined. 

            # this is getting a pixel at a particular (column, row) in the red channel
            # and checking if it can be binarized as 0
            if bin(red_band.getpixel((i, j)))[-1] == '0':

                # if so, set the same spot in the new image as white
                imagePixels[i, j] = (255, 255, 255)

            # if not, make it black
            else: imagePixels[i, j] = (0,0,0)

    # now make a new path and save the image
    newImgPath=str(Path(imgPath).parent.absolute())
    newImage.save(newImgPath+'/text.png')
</code></pre>
<p>There are major problems with this code as well. In some places you refer to <code>zSize</code> and <code>i</code> despite not defining them. Also, as a matter of practice, you can create paths with <code>pathlib</code> objects in the idiomatic way</p>
<pre><code>    newPath = Path(oldPath).with_name('new_filename.ext')
</code></pre>
</div>
