<div class="post-text" itemprop="text">
<p>I have two text files, both of them having 150000+ lines of data. I need to shorten them to a range of lines. </p>
<p>Allow me to explain:</p>
<p>The line which starts with <strong>"BO_ "</strong> must be the first line and the last will be the one which does not start with <strong>"BO_"</strong>. How do I compare a set of characters since Python reads the file each byte at a time? </p>
<p>Is there any inbuilt function to trim the lines in the file. I thought of getting each byte and checking them consecutively with <strong>B</strong>, <strong>O</strong>, <strong>_</strong> and <strong>" "</strong>. But this would be hectic, I bet the memory will run out before it is even able to check the file, considering if the mentioned happens only at the end of the file. </p>
<p>I tried the following code:</p>
<pre><code>def character(f):
    c = f.read(1)
    while c:
         yield c
         c = f.read(1)
</code></pre>
<p>This code works perfectly fine, it returns each byte of the text. But, going by this approach, it will be difficult and time-consuming. The code would be very ugly.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>f.readline()</code> to read a line (up until a newline b"\n" character)
read  more <a href="https://docs.python.org/3/library/io.html" rel="nofollow noreferrer">here</a></p>
</div>
<span class="comment-copy">I could but how do I save that particular line since I would not be knowing the byte position of the starting of the line?</span>
<span class="comment-copy">you can know the byte position by calling <code>f.tell</code> before calling <code>f.readline()</code>  Like this  <code>pos = f.tell(); bites = f.readline(); yield pos, bites</code></span>
<span class="comment-copy">True, but I do not want to. You see the later part of this program is similar to this and the whole process has to be replicated to thousands of line. In that way, this would get ugly and highly time consuming.</span>
<span class="comment-copy">Okay why not just <code>f.read(2048)</code></span>
<span class="comment-copy">I can but the repeatability of this approach seems to be very low. Since I would have to extract the cursor position every time I need to save a line.</span>
