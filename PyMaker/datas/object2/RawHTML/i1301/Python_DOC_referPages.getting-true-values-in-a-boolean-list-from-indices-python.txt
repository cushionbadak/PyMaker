<div class="post-text" itemprop="text">
<p>How do I compute the inverse of what is described here: <a href="https://stackoverflow.com/questions/21448225/getting-indices-of-true-values-in-a-boolean-list">Getting indices of True values in a boolean list</a> ?
That above link always comes up when I try searching for "how to obtain the true values in a boolean list from integer indices," but it gives me the indices from the true values in a boolean list, which is the inverse of what I want...</p>
<p>For example, from:</p>
<pre><code>t = [4, 5, 7]
count = 16
</code></pre>
<p>I want to obtain:</p>
<pre><code>[False, False, False, False, True, True, False, True, False, False, False, False, False, False, False, False]
</code></pre>
<p>The values are all 0 indexed, as expected with Python. 
I'm guessing that my question is a duplicate, but it's so annoying to not be able to find what I'm looking for every time I try to remember how to do this operation, I decided to ask a new question so my Google search will hopefully bring up this post next time.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a list comprehension. I recommend you turn <code>t</code> into a <code>set</code> for O(1) lookup:</p>
<pre><code>t_set = set(t)
res = [i in t_set for i in range(count)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a list comprehension with conditions:</p>
<pre><code>print([True if i in t else False for i in range(count)])
</code></pre>
<p>Shorter:</p>
<pre><code>print([i in t else False for i in range(count)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about this:</p>
<pre><code>In [6]: holderplace =[False for i in range(count)]

In [7]: for i in t:
   ...:     holderplace[i-1]=True
   ...:     

In [8]: holderplace
Out[8]: 
[False,
 False,
 False,
 True,
 True,
 False,
 True,
 False,
 False,
 False,
 False,
 False,
 False,
 False,
 False,
 False]

In [9]: 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could also try using <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map()</code></a>:</p>
<pre><code>list(map(lambda x: x in t, range(count)))
# [False, False, False, False, True, True, False, True, False, False, False, False, False, False, False, False]
</code></pre>
<p>It might also be worth converting <code>t</code> to a set, since lookup is O(1) instead of O(N). </p>
<p>You could also use <a href="https://docs.python.org/3.7/reference/datamodel.html#object.__contains__" rel="nofollow noreferrer"><code>__contains__()</code></a>:</p>
<pre><code>list(map(t.__contains__, range(count)))
</code></pre>
</div>
<span class="comment-copy">A good solution.</span>
