<div class="post-text" itemprop="text">
<p>I'm working through <a href="https://docs.python.org/3/howto/logging.html" rel="nofollow noreferrer">Logging HOWTO</a>, <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">logging docs</a>, and <a href="https://www.tomordonez.com/python-logging-tutorial.html" rel="nofollow noreferrer">tomordonez/logging tutorial</a> to get a handle on the logging system. When I add logging to a Class, the logging info doesn't show up for <code>MyClass.__init__()</code> but it does show up for <code>MyClass.obj_name()</code>. Why is that? </p>
<p>How do I include the Class name with the <code>funcName</code> info in the logging output? The docs and other SO questions I read looked like I might need to write a custom formatter? Or something like that? Are there any non docs.python.org sites with detailed walk-throughs, something in between basics and advanced? Thank you!</p>
<pre><code>import logging

logger = logging.getLogger('application')
logger.setLevel(logging.DEBUG)
# # create file handler which logs debug messages
# fh = logging.FileHandler('output.log.txt')
# fh.setLevel(logging.DEBUG)
# # create console handler which logs debug messages
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(name)s %(funcName)s - %(levelname)s - %(message)s')
# fh.setFormatter(formatter)
ch.setFormatter(formatter)
# # add handlers to logger
# logger.addHandler(fh)
logger.addHandler(ch)


class MyClass():
    def init():
        logger.info('creating an instance of MyClass object')

    def obj_name(self):
        logger.info('declare name')


def main():
    myobj = MyClass()
    # print(dir(myobj))
    myobj.obj_name()

if __name__ == "__main__":
    main()
</code></pre>
<p>Complete output:</p>
<pre><code>PS D:\0_program_dev&gt;'C:\Python\Python37\python.exe' 'd:\0_program_dev\hands_of_ada_book_generator\logging_tools.py'
    application obj_name - INFO - declare name
PS D:\0_program_dev&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not sure if this will help:</p>
<pre><code>import logging
from functools import wraps
import sys
stdouthandler = logging.StreamHandler(sys.stdout)
logging.basicConfig(level=logging.DEBUG,
                    format="%(asctime)s %(levelname)s: %(message)s",
                    handlers=[stdouthandler])


def status(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        logging.debug(f"hello {func.__name__}")
        result = func(*args, **kwargs)
        return result
    return wrapper

class MyClass():
    @status
    def __init__(self):
        logging.debug(f"created instance of {self.__class__}")

    @status
    def my_function(self):
        logging.debug(f"here is a function {sys._getframe().f_code.co_name} of {self.__class__.__name__}")


my_obj = MyClass()
my_obj.my_function()
</code></pre>
<blockquote>
<p>2018-12-08 22:43:40,503 DEBUG: hello <strong>init</strong></p>
<p>2018-12-08 22:43:40,503 DEBUG: created instance of class '<strong>main</strong>.MyClass'</p>
<p>2018-12-08 22:43:40,503 DEBUG: hello my_function</p>
<p>2018-12-08 22:43:40,503 DEBUG: here is a function my_function of MyClass</p>
</blockquote>
</div>
<span class="comment-copy">Yes, thank you so much! The simple wrapper you provided is very helpful since wrappers are still very new to me. Your code works completely. Only question left is why the <code>init()</code> logging comment doesn't show up in my code.</span>
<span class="comment-copy">Nevermind on the <code>init()</code>. Question was answered. Thank you!</span>
<span class="comment-copy">The wrapper by JBB works, but is there a way to add the Class name to <i>every</i> debug statement? Adding <code>{sys._getframe().f_code.co_name}</code> to every debug call seems excessive but for debugging seeing the class_name.function_name would be really helpful.</span>
