<div class="post-text" itemprop="text">
<p>In Python 2.7 I have several functions that I cannot modify, just use.
Three of them are the "front" ones and three of them are the "rear" ones; lets call them  f1(), f2(), f3(), r1(), r2(), r3(). And I also have 17 functions with different numbers and types of parameters with different name keywords, e.g.:</p>
<pre><code>function01( par1='hello' , par2=847, par3=True , par4=17.821 , ........... )
function02( par43=(8.3+17.9i) , par21='august' )
</code></pre>
<p>and so on.</p>
<p>I need to call them all 17 this way:</p>
<pre><code>f1()
f2()
f3()
functionNN(............................)
r1()
r2()
r3()
</code></pre>
<p>That block of code 17 times (for NN=1 to 17) !</p>
<p>Is there a crafty way to do it without writing the 17 blocks ??</p>
<p>***ADDED INFO ... 
What I have now is an horrid code:</p>
<pre><code>#block1
f1()
f2()
f3()
function01( par1=..., par2=..., par3=..., par4=...................)
r1()
r2()
r3()

#block2
f1()
f2()
f3()
function02( par43=..., par21=...)
r1()
r2()
r3()

#block3
f1()
f2()
f3()
function03( par17=..., par37=..., par11=...)
r1()
r2()
r3()

#block4
.......
.......
.......
.......
.......
#block17
.......
</code></pre>
<p>And one the 17 functions has "nameless" parameters.
:-S</p>
</div>
<div class="post-text" itemprop="text">
<p>Make a list with the functions and their parameters:</p>
<pre><code>ff=[ [function01, [10,20,"something"],  dict(par1='hello', par2=847, par3=True, par4=17.821)],
     [function02, [],                   dict(par43=(8.3+17.9i), par21='august')],
     [function03, [1,2,"hello"],        {}],
     ...
    ]

for  i in range(17):
        f1()
        f2()
        f3()

        posargs=ff[i][1]        # positional args
        kw=ff[i][2]             # keyword args for function_i
        ff[i][0](*posargs,**kw) # calling function_i

        r1()
        r2()
        r3()
</code></pre>
<p>You can change the parameters later,too. For example:</p>
<pre><code>ff[1][2]["par21"]="december"

new_kw_func02= dict(par43=(1+2i), par21='december'])
ff[1][2]= new_kw_func02

new_pargs_func03=[10,20,"World"]
ff[2][1]= new_pargs_func03
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why not use a loop, like this:</p>
<pre><code>for i in range(17):
    f1()
    f2()
    ....
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Functions are just like objects, you could pack em all into a list and call them from it.</p>
<p>for example:</p>
<pre><code>def fun0():
    print(0)

def fun1():
    print(1)

def fun2():
    print(2)

def fun3():
    print(3)

funlist = [fun0, fun1, fun2, fun3]

for fun in funlist:
    fun()
</code></pre>
<p>In your case, you would also need to pack the parameters, so you will have to use some thing like this:</p>
<pre><code>N = 4 

funlist = [fun0, fun1, fun2, fun3]

paramlist = [[params0], [params1], [params2], [params3]]

for i in range(4):
    funlist[i](*paramlist[i])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since the functions are accepting different arguments, you will have to write them together once somewhere with their respective arguments once atleast. But you can do that somewhere outside that block for better readability, either in a wrapper function or as a list.</p>
<p>Ex:</p>
<pre><code>fn_list = [function01, function02...]
[fn() for fn in fn_list]
</code></pre>
<p>Or</p>
<pre><code>def wrapping_func(args_list): (or use *args, **kwargs syntax)
    function01(args_list[0])
    function02(args_list[1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also use <code>globlas()</code> like this:</p>
<pre><code>for i in range(1, 18):
    f1()
    f2()
    f3()
    globals()['function' + str(i).zfill(2)]() # pass the par here, but I dont know the rules
    r1()
    r2()
    r3()
</code></pre>
<p><code>globals()</code>  returns a dict that functions in globals scope will be an accessible form that dict. for more information about <code>globals()</code> read <a href="https://thepythonguru.com/python-builtin-functions/globals/" rel="nofollow noreferrer">Here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Have a look at <a href="https://docs.python.org/3/library/contextlib.html" rel="nofollow noreferrer">contextlib module</a>. Very basic example</p>
<pre><code>from contextlib import ContextDecorator

def front1():
    print('print from front1')

def front2():
    print('print from front2')

def front3():
    print('print from front3')


def rear1():
    print('print from rear1')

def rear2():
    print('print from rear2')

def rear3():
    print('print from rear3')

class mycontext(ContextDecorator):
    def __enter__(self):
        front1()
        front2()
        front3()
        return self

    def __exit__(self, *exc):
        rear1()
        rear2()
        rear3()
        return False

@mycontext()
def foo():
    print('print from foo')

@mycontext()
def bar():
    print('print from bar')

if __name__ == '__main__':
    foo()
    bar()

    # or as alternative
    # my_funcs = [foo, bar]
    # for func in my_funcs:
        # func()
</code></pre>
<p>output</p>
<pre><code>print from front1
print from front2
print from front3
print from foo
print from rear1
print from rear2
print from rear3
print from front1
print from front2
print from front3
print from bar
print from rear1
print from rear2
print from rear3
</code></pre>
</div>
<span class="comment-copy">what are the rules of <code>par</code> ?</span>
<span class="comment-copy">Sadly, there are no rules for par. Each function has its own set of parameters.</span>
<span class="comment-copy"><b>OMG!!! what an elegant solution</b> ... It is working "almost" perfectly ... one of the 17 functions has parameters without names, so, how could I put nameless parameters in the dict ???</span>
<span class="comment-copy">@Hermenegildo I've changed code above.</span>
<span class="comment-copy"><b>THNX!!</b> it is perfect.</span>
<span class="comment-copy">I thought something like that, but how could I manage the parameters?? Each 17 functions are different, with different parameters.</span>
<span class="comment-copy">You need to provide additional information. Are the parameters the same in each iteration? If not, how do you know in advance what are they going to be?</span>
