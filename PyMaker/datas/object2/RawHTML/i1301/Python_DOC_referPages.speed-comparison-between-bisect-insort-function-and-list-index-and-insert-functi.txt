<div class="post-text" itemprop="text">
<p>As Python doc says, I have thought that bisect module is much faster than list built-in method, index and insert to insert item to long ordered list. So, I simply measure the time expense for both functions, <code>bisect_func()</code> and <code>insert_func()</code> like below code.</p>
<p><code>bisect_func()</code> score 1.27s and <code>insert_func()</code> score 1.38s, which is not a dramatic time difference. My question is that do I miss something to test the efficiency of bisect in this example? Or is bisect not the only efficient approach to insert item into an ordered list?</p>
<pre><code>import bisect

HAYSTACK = [n for n in range(100000000)]
NEEDLES = [0, 10, 30, 400, 700, 1000, 1100, 2200, 3600, 32000, 999999]

def bisect_func():
    for needle in reversed(NEEDLES):
        bisect.insort(HAYSTACK, needle)

def insert_func():
    for needle in reversed(NEEDLES):
        position = HAYSTACK.index(needle)
        HAYSTACK.insert(position, needle)

if __name__ == '__main__':
    import time
    start = time.time()
    # bisect_func()
    insert_func()
    end = time.time()
    print(end - start)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Binary search only improves the performance of <em>finding</em> the insertion index. It does not improve the <em>insertion</em> into the list, which is <code>O(N)</code> in both cases and dominates the asymptotic complexity of both functions. Remember that inserting into an array based list needs to shift all elements after the insertion index.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the documentation of <a href="https://docs.python.org/3/library/bisect.html#bisect.insort_left" rel="nofollow noreferrer">insort</a>:</p>
<blockquote>
<p>Insert x in a in sorted order. This is equivalent to
  a.insert(bisect.bisect_left(a, x, lo, hi), x) assuming that a is
  already sorted. Keep in mind that the O(log n) search is dominated by
  the slow O(n) insertion step.</p>
</blockquote>
<p>The important part is:  <em>Keep in mind that the O(log n) search is dominated by the slow O(n) insertion step.</em> So both approaches are <em>O(n)</em> at the end, that is why their efficiency is <em>similar</em>, with <code>insort</code> being slightly better.</p>
</div>
<span class="comment-copy">This is not a fair test (I don't know whether it impacts the overall winner) but you should be using <code>timeit</code> and not relying on globals</span>
