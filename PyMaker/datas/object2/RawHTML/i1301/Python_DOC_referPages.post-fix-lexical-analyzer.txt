<div class="post-text" itemprop="text">
<p>my assigment was to write an very simple lexical analyzer, for postfix expresions:</p>
<pre><code>print ("enter each variable followed by a space" );
numbers = input("Enter the numbers: ") #ask for input

numbersArray = [] #array to store the input

for number in numbers:
    numbersArray.append(number)

numbersArray = numbersArray[::2]

print(numbersArray);

for x in numbersArray:

    if x == "_": print ( "     " , " delimeter" )
    elif x == "-": print ( "    ", " subtraction opp." )
    elif x == "/": print ( "    ", " divison opp." )
    elif x == "+": print ( "    ", " addition opp." )
    elif x == "*": print ( "    ", " multplication opp." )
    elif x == "0": print ( "    ", " Constant: 0 " )
    elif x == "1": print ( "    ", " Constant: 1" )
    elif x == "2": print ( "    ", " Constant: 2" )
    elif x == "3": print ( "    ", " Constant: 3" )
    elif x == "4": print ( "    ", " Constant: 4" )
    elif x == "5": print ( "    ", " Constant: 5" )
    elif x == "6": print ( "    ", " Constant: 6" )
    elif x == "7": print ( "    ", " Constant: 7" )
    elif x == "8": print ( "    ", " Constant: 8" )
    elif x == "9": print ( "    ", " Constant: 9" )
    elif x == "10": print ( "    ", " Constant: 10" )
    print(x) 
</code></pre>
<p>a sample input: 3 _ 4 _ 5 _ +</p>
<p>the above is what ive started, this is my first time using python and ive been struggling with this. i was wondering if there was a better way i could recgonize bigger numbers and letters as constants and variable respectively ?</p>
</div>
<div class="post-text" itemprop="text">
<p>I agree with the commenters that using a lexing library like <a href="https://github.com/dabeaz/ply" rel="nofollow noreferrer"><code>ply</code></a> is the easiest or best way to go. If you still want/are required to do it yourself, there are a couple things that need to change.</p>
<p>If you see something like <code>132</code>, you need to be able to skip to the of the number for the next loop iteration, so <code>for x in numbersArray:</code> doesn't work. You can just do a <code>while True</code>, track the loop index manually, and break out when you're done.</p>
<p>The most powerful to match your input to the lexeme is with <a href="https://docs.python.org/3.6/library/re.html" rel="nofollow noreferrer">regular expressions</a>. For example, you can match numbers with an optional decimal part using something like</p>
<pre><code>import re
...
re.match(r'\d+(\.\d*)?', numbersArray[current_index:])
</code></pre>
<p>(Most number specifications are rather more "interesting" than this, so definitely don't copy over my regex. It will probably be wrong for what you need.)</p>
<p>You can use <a href="https://regex101.com/" rel="nofollow noreferrer">regex101.com</a> to experiment and build your regex.</p>
<p>You could alternatively make use of Python's built in <a href="https://docs.python.org/3/library/stdtypes.html#string-methods" rel="nofollow noreferrer">string methods</a>, such as <code>isnumeric</code> and <code>isalpha</code>. With this, your number check might look like</p>
<pre><code>lexeme = ''
while numbersArray[current_index].isdigit():
    lexeme += numbersArray[current_index]
    current_index += 1
</code></pre>
</div>
<span class="comment-copy">Usual way for the lexer part would be regular expressions (<code>re</code> module).</span>
<span class="comment-copy">Take a look at <code>rply</code> or <code>ply</code> for python lex/parse libraries. If you are intent on writing your own, at least take a look at their source to get you on the right path.</span>
<span class="comment-copy">Thank you both. I will look into both of them and let you know what happens</span>
<span class="comment-copy">Nit-picks irrelevant to question/answer: strings are already iterable so copying everything over to <code>numbersArray</code> seems useless.  I believe your <code>x == "10"</code> check will fail.</span>
