<div class="post-text" itemprop="text">
<p>I have the following arrays, which represent ranges of numbers I wish to explore:</p>
<pre><code>cpx_var = np.linspace(0.20,0.80,61)
horn_var = np.linspace(0.20,0.80,61)
plag_var = np.linspace(0.2,0.7,6)
mag_var = np.linspace(0.2,0.6,5)
</code></pre>
<p>I would like to call one number from each array, such that the 4 numbers always sum to 1.0. I hope to output an array or dataframe that contains all of the possible combinations that sum to 1.0 given my ranges of interest (form 4 x n, where n is the number of different combinations).</p>
<p>I'm kind of lost as to what to do next. I looked at the 'permutations()' function, but I don't think it will work here. I hope this is a clear enough description of what I'm trying to accomplish.</p>
<p>Thanks!</p>
<p>Zack</p>
</div>
<div class="post-text" itemprop="text">
<p>This should be of help:</p>
<pre><code>import numpy as np

cpx_var = np.linspace(0.20,0.80,61)
horn_var = np.linspace(0.20,0.80,61)
plag_var = np.linspace(0.2,0.7,6)
mag_var = np.linspace(0.2,0.6,5)

a = [(i, j, k, w) for i in cpx_var for j in horn_var for k in plag_var for w in mag_var if i+j+k+w == 1.0]
</code></pre>
<p><code>a</code> is a list of 4-length tuple whose sum is 1. You can convert it to a numpy array. Each tuple has one element for each one of your array.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a>:</p>
<pre><code>from itertools import product

result = [p for p in product(cpx_var, horn_var, plag_var, mag_var) if sum(p) == 1.0]
</code></pre>
</div>
