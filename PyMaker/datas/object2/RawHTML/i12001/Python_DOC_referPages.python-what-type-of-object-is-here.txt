<div class="post-text" itemprop="text">
<p>I'm struggling with the book LPTHW <a href="http://learnpythonthehardway.org/book/ex39.html" rel="nofollow">http://learnpythonthehardway.org/book/ex39.html</a></p>
<p>Here is the code:    </p>
<pre><code>def new(num_buckets=256):
    """Initializes a Map with the given number of buckets."""
    aMap = []
    for i in range(0, num_buckets):
        aMap.append([])
    return aMap

def hash_key(aMap, key):
    """Given a key this will create a number and then convert it to
    an index for the aMap's buckets."""
    return hash(key) % len(aMap)

def get_bucket(aMap, key):
    """Given a key, find the bucket where it would go."""
    bucket_id = hash_key(aMap, key)
    return aMap[bucket_id]

def get_slot(aMap, key, default=None):
    bucket = get_bucket(aMap, key)
    for i, kv in enumerate(bucket):
        k, v = kv
        if key == k:
            return i, k, v
    return -1, key, default
</code></pre>
<p>What does <code>kv</code> means in <code>get_slot</code>? What type of object is this? Why the code below does not work? I get <code>TypeError: 'int' object is not iterable</code></p>
<pre><code>for i, kv in enumerate([1,2,3,4,5]):
    k, v = kv
    print(kv)
</code></pre>
<p>Update:
It was a good idea to check one more time how <code>enumerate</code> works
<a href="https://docs.python.org/2/library/functions.html#enumerate" rel="nofollow">https://docs.python.org/2/library/functions.html#enumerate</a> . Thank everyone for the answers.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>enumerate()</code> returns an <a href="https://docs.python.org/3/library/stdtypes.html#iterator-types" rel="nofollow">iterator</a> of tuples.  Each tuple is an index and a value.  For example, if you say <code>enumerate([2, 3, 4])</code>, you will get <code>(0, 2)</code>, <code>(1, 3)</code>, and <code>(2, 4)</code>.  Since you use <code>for i, kv in enumerate(...)</code>, the first iteration for example will have <code>i == 0</code> and <code>kv == 2</code>.  You then say <code>k, v = kv</code>, but <code>kv</code> is only one integer.  It is not a tuple or a list etc. so you can't split it into two variables.  If you were to say <code>enumerate([(2, 3), (4, 5), (6, 7])</code> instead, you could do that because <code>i</code> would be <code>0</code> when <code>kv</code> is <code>(2, 3)</code>.  <code>kv</code> could be split into two variables so that <code>k</code> is <code>2</code> and <code>v</code> is <code>3</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>kv</code> is assigned one of the values in the sequence that <code>get_bucket(aMap, key)</code> produces; each iteration over <code>enumerate()</code> produces another one of those values (together with an integer counter, assigned to <code>i</code> in the example code). Apparently each one of those objects it <em>itself</em> an iterable with two elements.</p>
<p>Your attempt produced a list with just integers, which are not themselves iterable, which is why the <code>k, v = kv</code> assignment fails. Try this instead:</p>
<pre><code>for i, kv in enumerate([('foo', 1), ('bar', 2), ('baz', 3)]):
    k, v = kv
</code></pre>
<p>This iterates over a sequence of <code>(str, int)</code> tuples, so the <code>k, v = kv</code> iterable unpacking works.</p>
<p>In general, all <code>enumerate()</code> does is add a sequence number; the default is to start at 0. So for each iteration in a <code>for</code> loop, <code>enumerate(something)</code> produces <code>(counter, value_from_something)</code>. That <code>value_from_something</code> is itself still just a Python object, which can support all sorts of operations.</p>
<p>You can see from the <code>new()</code> function in the same sample, that the code deals with a list of lists:</p>
<pre><code>def new(num_buckets=256):
    """Initializes a Map with the given number of buckets."""
    aMap = []
    for i in range(0, num_buckets):
        aMap.append([])
    return aMap
</code></pre>
<p>so <code>aMap</code> is a list containing other lists. The code refers to each of those lists as <em>buckets</em>. The <code>set()</code> function shows that those buckets contain <em>tuples</em> with two values, the key and the value:</p>
<pre><code>else:
    # the key does not, append to create it
    bucket.append((key, value))
</code></pre>
<p>The <code>get_slot()</code> function handles one of those buckets, which contains 0 or more <code>(key, value)</code> pairs (and all the keys have hashed to the same bucket).</p>
</div>
<span class="comment-copy">Do you understand what <code>enumerate</code> does? Do you understand why you have both <code>i</code> and <code>kv</code> in <code>for i, kv in ...</code>?</span>
<span class="comment-copy">Try <code>for i, kv in enumerate([('foo', 1),  ('bar', 2), ('baz', 3)]):</code> instead..</span>
<span class="comment-copy">kv stands for key, value pair, the constituent part of a dictionary (also called HashTable, map, associative array) in different languages. In your code on the bottom there is no such dictionary.</span>
<span class="comment-copy">@VincentSavard, Honestly, I didn't. Somehow I missed the notion that kv should be iterable. I'll add a link for that function and add some code for get_bucket() to the post, to make more evident that  kv should be iterable for those ones who might have the same question the in future.</span>
<span class="comment-copy">I'm glad you found both answers helpful! However, you can only mark one of them as accepted; pick the one that helped you most! Not marking either one accepted is a valid choice too.</span>
<span class="comment-copy"><code>enumerate()</code> returns an iterator, and yes that iterator generates tuples. It's misleading / confusing to say that "<code>enumerate()</code> returns a list of tuples".</span>
<span class="comment-copy">@PM2Ring: Okay; I edited.  I hope he doesn't get confused by the unknown word <code>iterator</code>, though.</span>
<span class="comment-copy">IT seems that the OP likes your answer. :) But feel free to explain what an iterator does, since that will make your answer more helpful for future readers. OTOH, Martijn kinda has that covered in his answer.</span>
