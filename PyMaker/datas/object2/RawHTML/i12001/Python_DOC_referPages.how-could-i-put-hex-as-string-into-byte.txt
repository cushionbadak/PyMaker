<div class="post-text" itemprop="text">
<p>I am trying manually build a byte from hexadecimal:</p>
<pre><code>&gt;&gt;&gt; '\x74'
't'
&gt;&gt;&gt; hex(116)
'0x74'
&gt;&gt;&gt; hex(116)[1:]
'x74'
&gt;&gt;&gt; '\\' + hex(116)[1:]
'\\x74'
&gt;&gt;&gt; 
</code></pre>
<p>Is it possible to create exactly <code>\x74</code> as byte?</p>
<p>Without using magic with <code>chr()</code>.</p>
<pre><code>&gt;&gt;&gt; chr(int(hex(116), 16))
't
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also do something like <code>'74'.decode('hex')</code>.</p>
<p>Output:</p>
<pre><code>&gt;&gt;&gt; '74'.decode('hex')
't'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps you are looking for <a href="https://docs.python.org/2/library/struct.html#struct.pack" rel="nofollow"><code>struct.pack</code></a>:</p>
<pre><code>In [210]: import struct

In [211]: struct.pack('1B', 0x74)
Out[211]: 't'
</code></pre>
</div>
<span class="comment-copy">What do you mean "as byte"?  There is no "byte" type in Python.  You can make a <a href="https://docs.python.org/2/library/functions.html#bytearray" rel="nofollow noreferrer">bytearray</a> of length one, or a bytestring (i.e., non-unicode string).  If you want to do the, <code>chr</code> is not "magic"; it is the function that does what you're trying to do.</span>
<span class="comment-copy">@BrenBarn as <code>'\x74'</code> which is <code>str</code>(actually byte in python2.7.)</span>
<span class="comment-copy">The string you already created is <code>\x74</code>.  It just shows two backslashes because of the way it's displayed.  If you do <code>print('\\' + hex(116)[1:])</code> you'll see it has only one backslash.  But that's not "a byte"; it's a string with four characters in it.</span>
<span class="comment-copy">@BrenBarn so there is no way how could I create <code>'\x74'</code> (as printable <code>t</code>) in code? the only one way to put it manually..</span>
<span class="comment-copy">You can, and you just did.  If you want a string that prints as <code>"t"</code>, that is the string <code>"t"</code>.  If you want a string that prints as <code>"\x74"</code>, that is the string <code>"\x74"</code>, which you can input as <code>r"\x74"</code> or <code>"\\x74"</code>.  There is no such thing as a string that prints as <code>"t"</code> but somehow secretly "is" <code>\x74</code>.</span>
<span class="comment-copy">Note: Using the "special" codecs with <code>str.decode</code>/<code>str.encode</code> is deprecated, and doesn't work in Py3. You have to use <a href="https://docs.python.org/3/library/codecs.html#binary-transforms" rel="nofollow noreferrer"><code>codecs</code> module methods to use binary-&gt;binary "decoding"/"encoding"</a>.</span>
