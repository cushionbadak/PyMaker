<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/7368789/convert-all-strings-in-a-list-to-int">Convert all strings in a list to int</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>Let's say I was given with this text <code>age_gender.txt</code></p>
<pre><code>Female:18,36,35,49,19
Male:23,22,26,26,26
</code></pre>
<p>Here's the code I have so far</p>
<pre><code>file = open("age_gender.txt")
   contents = file.read().splitlines()
   new_dictionary = dict(item.split(":") for item in contents)

return new_dictionary
</code></pre>
<p>When I call the function <code>readfile()</code> this is the output I get, however the list of value is still in quotation marks. How do you convert that each value into a list? </p>
<pre><code>{'Female': '18,36,35,49,19', 'Male': '23,22,26,26,26'}
</code></pre>
<p>The output I want to achieve is something like this</p>
<pre><code>{'Female': [18,36,35,49,19], 'Male': [23,22,26,26,26]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; a
'Female:18,36,35,49,19,19,40,23,22,22,23,18,36,35,49,19,19,18,36,18,36,35,12,19,19,18,23,22,22,23'
&gt;&gt;&gt; a.split(':')
['Female', '18,36,35,49,19,19,40,23,22,22,23,18,36,35,49,19,19,18,36,18,36,35,12,19,19,18,23,22,22,23']
&gt;&gt;&gt; a.split(':')[1].split(',')
['18', '36', '35', '49', '19', '19', '40', '23', '22', '22', '23', '18', '36', '35', '49', '19', '19', '18', '36', '18', '36', '35', '12', '19', '19', '18', '23', '22', '22', '23']
&gt;&gt;&gt; new_dictionary = dict({a.split(':')[0]:map(int,a.split(':')[1].split(','))}) 
&gt;&gt;&gt; new_dictionary
{'Female': [18, 36, 35, 49, 19, 19, 40, 23, 22, 22, 23, 18, 36, 35, 49, 19, 19, 18, 36, 18, 36, 35, 12, 19, 19, 18, 23, 22, 22, 23]}
</code></pre>
<p>Applying that to Your code:</p>
<pre><code>file = open("age_gender.txt")
   contents = file.read().splitlines()
   new_dictionary = dict()
   for item in contents:
       tmp = item.split(':')
       new_dictionary[tmp[0]] = list(map(int, tmp[1].split(',')))

return new_dictionary
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You've go the basics down, the remaining steps are:</p>
<ul>
<li>splitting the value on commas <code>split(',')</code></li>
<li>Converting the string into an integer <code>int(i)</code></li>
</ul>
<p>Wrap these steps in a <code>for</code> loop and do it for every key/value pair the dictionary.</p>
<pre><code>for key, value in new_dictionary.items():
    new_dictionary[key] = [int(i) for i in value.split(',')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is another way to do it using <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow"><code>ast.literal_eval</code></a> to convert the ages into a Python list. It has the advantage of supporting all basic data types, e.g. float, without explicit conversion:</p>
<pre><code>from ast import literal_eval

with open('age_gender.txt') as f:
    d = {gender: literal_eval(ages) for gender, ages in (line.split(':') for line in f)}
</code></pre>
<p>This will produce a dictionary with tuples as values:</p>
<pre>
{'Male': (23, 22, 26, 26, 26), 'Female': (18, 36, 35, 49, 19)}
</pre>
<p>If you really, really need lists, you can convert the tuples:</p>
<pre><code>with open('age_gender.txt') as f:
    d = {gender: list(literal_eval(ages)) for gender, ages in (line.split(':') for line in f)}
</code></pre>
<pre>
{'Male': [23, 22, 26, 26, 26], 'Female': [18, 36, 35, 49, 19]}
</pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to split this dictionary value by "," and then map it to int:</p>
<pre><code>s['Female'] = map(int, s['Female'].split(','))
</code></pre>
</div>
<span class="comment-copy">please fix indent</span>
<span class="comment-copy">Be aware that since this is Python3, <code>map</code> returns an iterator, not a list. If you want lists, you may want to wrap the <code>map</code> inside a <code>list</code> statement, i.e. <code>list(map(int, ..etc.))</code></span>
<span class="comment-copy">Good point, I've checked the code only in python2. Thanks for that, fixed the answer..</span>
<span class="comment-copy">Yes I do, @SvenMarnach thanks for the note.</span>
<span class="comment-copy">Very good. i like this approach.</span>
