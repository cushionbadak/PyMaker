<div class="post-text" itemprop="text">
<p>What does <code>'=' alignment</code> mean in the following error message, and why does this code cause it?</p>
<pre class="lang-python prettyprint-override"><code>&gt;&gt;&gt; "{num:03}".format(num="1")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: '=' alignment not allowed in string format specifier
</code></pre>
<p>The code has a subtle problem: the input value <code>"1"</code> is text, not a number. But the error message doesn't appear to have anything to do with that.</p>
<p>Nothing in the error message indicates why “'=' alignment” is relevant,
and it does not appear in the code. So what is the significance of emitting that error message?</p>
</div>
<div class="post-text" itemprop="text">
<p>The error message occurs because <code>'=' alignment</code> has been implied by the format specifier.</p>
<p>The <code>str.format</code> <a href="https://docs.python.org/3/library/string.html#formatspec" rel="noreferrer">format spec mini-language</a> parser has decided on the
alignment specifier “=” because:</p>
<blockquote>
<p>Preceding the width field by a zero ('0') character enables
  sign-aware zero-padding for numeric types. This is equivalent to a
  fill character of '0' with an alignment type of '='.</p>
</blockquote>
<p>So by specifying <code>0N</code> as the “zero-padding to N width”, you have implied both “the input is a numeric type”, and “the zeros should go between the sign and the digits”. That latter implication is what is meant by <code>'=' alignment</code>.</p>
<p>Since the value <code>"1"</code> is not numeric, the “=”-alignment handling code raises that exception. The message is written expecting you know what it's talking about because you requested (by implication) the “=” alignment.</p>
<p>Yes, I think that error message needs to be improved. I've <a href="http://bugs.python.org/issue27772" rel="noreferrer">raised an issue for that</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>A workaround is to use <code>'&gt;'</code> (right justify) padding, which is with the syntax:</p>
<pre><code>[[fill]align][width]
</code></pre>
<p>with  align being <code>&gt;</code>, fill being <code>0</code> and width being <code>3</code>.</p>
<pre><code>&gt;&gt;&gt; "{num:0&gt;3}".format(num="1")
'001'
</code></pre>
<p>The problem was that there is a different <code>0</code> in the format specification:</p>
<blockquote>
<pre><code>format_spec     ::=  [[fill]align][sign][#][0][width][grouping_option][.precision][type]
#                                          ^^^ This one
</code></pre>
</blockquote>
<p>That zero just makes <code>fill</code> default to <code>0</code> and <code>align</code> to <code>=</code>.</p>
<p><code>=</code> alignment is specified as:</p>
<blockquote>
<p>Forces the padding to be placed after the sign (if any) but before the digits. This is used for printing fields in the form ‘+000000120’. This alignment option is only valid for numeric types. It becomes the default when ‘0’ immediately precedes the field width.</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/string.html#grammar-token-align" rel="nofollow noreferrer">Source (Python 3 docs)</a></p>
<p>This expects the argument to be an <code>int</code>, as strings don't have signs. So we just manually set it to the normal default of <code>&gt;</code> (right justify).</p>
<p>Also note that <code>0</code> just specifies the default values for <code>fill</code> and <code>align</code>. You can change both or just the align.</p>
<pre><code>&gt;&gt;&gt; # fill defaults to '0', align is '&gt;', `0` is set, width is `3`
&gt;&gt;&gt; "{num:&gt;03}".format(num=-1)
'0-1'
&gt;&gt;&gt; # fill is `x`, align is '&gt;', `0` is set (but does nothing), width is `"3"`
&gt;&gt;&gt; "{num:x&gt;03}".format(num=-1)
'x-1'
&gt;&gt;&gt; # fill is `x`, align is '&gt;', `0` is set (but does nothing), width is `"03"` (3)
&gt;&gt;&gt; "{num:x&gt;003}".format(num=-1)
'x-1'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>str.__format__</code> doesn't know what to do with your <code>03</code> part. That only works with numbers:</p>
<pre><code>&gt;&gt;&gt; "{num:03}".format(num=1)
'001'
</code></pre>
<p>If you actually want to zero-pad a string, you can use <code>rjust</code>:</p>
<pre><code>&gt;&gt;&gt; "1".rjust(3, "0")
'001'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are trying to insert 'string-&gt;"1" where a float-&gt;3.44 is required. Remove the quotes "1", i.e. num=1, and it will work</p>
</div>
<div class="post-text" itemprop="text">
<p>This format would be acceptable</p>
<pre><code>"{num}:03".format(num="1")
</code></pre>
<p>but the way you have the placeholder specified <code>{num:03}</code> is not. That is an interesting ValueError though, if you remove the <code>:</code> the interesting error is replaced by a standard <code>KeyError</code>.</p>
</div>
<span class="comment-copy">This doesn't do what OP was intending. They want to left-align a padded string using <code>format</code>.</span>
<span class="comment-copy">Ah ok I see now. That makes more sense.</span>
