<div class="post-text" itemprop="text">
<p>Probably a mis-leading title, sorry, but I hope I can explain better below.</p>
<p>I'm part of a popular open-source project and we'd like to provide translations for the project for any language code that our audience would like. Our translations are all contributed by our user-base, and we'd like to support whatever is needed by this body of supporters/users.</p>
<p>The project is written in Python/Django and we use gettext and ultimately Transifex for their wonderful service for managing translation suggestions.</p>
<p>The problem for us comes when someone wants a locale-variant of a language. Let's assume French (fr) for this question.</p>
<p>We have a solid translation already for the language code <code>fr</code>. However, if a contributor from, say, Canada, comes along and wishes to contribute <code>fr_CA</code>, we suddenly have a maintenance headache due to these scenarios:</p>
<ol>
<li><p>The <code>fr_CA</code> translations are incomplete. In this case gettext falls back to "untranslated", which in our project means <code>en</code>.</p></li>
<li><p>If the <code>fr_CA</code> translations copies copious bits from the <code>fr</code>, then just changes some bits here and there to better match the locale, then, we discover that we need to change something in the base <code>fr</code> translation, suddenly, we'd have a synchronization issue that is not readily solve-able by non-<code>fr_CA</code>-speaking contributors.</p></li>
</ol>
<p>What seems to make more sense to me is that there is some form of "overlay" setting where we could "stack" the languages. <code>fr</code> at the base, then <code>fr_CA</code>, then any even more specific locale variants on top of that. What I would like is that once these are all defined, then the translator only needs to update <code>fr_CA</code> with the differences between that locale and the locale "beneath" it in the stack, in this case <code>fr</code>. By leaving things that aren't different compared to the more general locale below any layer, we're free to make corrections/updates as required without producing a synchronization issue.</p>
<p>I would think that this sort of "stacking" would be ultimately resolved during the process of producing the complied MO files.</p>
<p>Does anyone know how we could accomplish this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Django does support fallback of languages internally, which actually relies on <a href="https://docs.python.org/3/library/gettext.html?highlight=add_fallback#gettext.NullTranslations.add_fallback" rel="nofollow">gettext support</a>, but as far as I can tell, it doesn't expose a way for developers to tweak it. Check out the snippet below taken from <a href="https://github.com/django/django/blob/master/django/utils/translation/trans_real.py#L186" rel="nofollow">Django's code</a>.</p>
<pre><code>def _add_fallback(self, localedirs=None):
    """Sets the GNUTranslations() fallback with the default language."""
    # Don't set a fallback for the default language or any English variant
    # (as it's empty, so it'll ALWAYS fall back to the default language)
    if self.__language == settings.LANGUAGE_CODE or self.__language.startswith('en'):
        return
    if self.domain == 'django':
        # Get from cache
        default_translation = translation(settings.LANGUAGE_CODE)
    else:
        default_translation = DjangoTranslation(
            settings.LANGUAGE_CODE, domain=self.domain, localedirs=localedirs
        )
    self.add_fallback(default_translation)
</code></pre>
<p>It looks like the only possible solution for now, using the gettext's way of doing it, would be to monkey patch Django, tweaking <code>_add_fallback</code> to call <code>self.add_fallback</code> multiple times, depending on your needs.</p>
</div>
<span class="comment-copy">Thanks for this! Could be a start!</span>
