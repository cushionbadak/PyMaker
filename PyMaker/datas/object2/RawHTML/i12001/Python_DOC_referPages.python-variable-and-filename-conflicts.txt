<div class="post-text" itemprop="text">
<p>This is my project structure:</p>
<pre><code>a
├── b.py
└── __init__.py
</code></pre>
<ul>
<li><p>File <code>b.py</code> is empty.</p></li>
<li><p>File <code>__init__.py</code> is one line:</p>
<pre><code>b = 'this is a str'
</code></pre></li>
</ul>
<p>Then the following program gives inconsistent result of <code>a.b</code>:</p>
<pre><code>import a
print(a.b)    # str
import a.b
print(a.b)    # module
</code></pre>
<p>What is the best way of detecting this kind of name conflict between a variable and a filename?</p>
</div>
<div class="post-text" itemprop="text">
<h1>"The following program gives inconsistent result of <code>print(a.b)</code>"</h1>
<p>I'd like to point out that while the results may be different, in fact, Python isn't doing anything inconsistent here.  Without going into too much detail, here's what's happening at each step in your program.</p>
<h3><code>import a</code></h3>
<p>Python searches the directories on <code>sys.path</code> until it finds one of these: a file called "a.py", or a directory called "a" containing a file called <code>__init__.py</code>.  Python then <a href="https://docs.python.org/3/reference/import.html" rel="nofollow">imports</a> your <a href="https://docs.python.org/3/glossary.html#term-package" rel="nofollow">package</a>.  Notably, Python does not look through package "a" and automatically import all ".py" files from it (this saves memory and time).</p>
<h3><code>print (a.b)</code></h3>
<p>Python looks up the attribute <code>b</code> of <code>a</code>, which it finds in <code>a</code>'s <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow"><code>__dict__</code></a> attribute.  The value of <code>b</code> is <code>'this is a string'</code>, which is printed.</p>
<h3><code>import a.b</code></h3>
<p>Python imports your module.  With this statement, the value corresponding to key <code>b</code> within <code>a</code>'s <code>__dict__</code> becomes the module object <code>a.b</code>.</p>
<h3><code>print (a.b)</code></h3>
<p>Python looks up the attribute <code>b</code>.  The value of <code>b</code> is the module object <code>a.b</code>, which is printed.</p>
<h1>"What is the best way of detecting this kind of name conflict?"</h1>
<p>You could write a script to list the names of all the modules in your package, as well as all the variables (local and global), and determine if there are any conflicts.  However, IMHO, an ounce of prevention is worth a pound of cure in this case; good naming conventions in Python (a great resource - <a href="https://www.python.org/dev/peps/pep-0008/#prescriptive-naming-conventions" rel="nofollow">PEP8</a>) are the best ways to <em>prevent</em> errors like this in the first place.</p>
</div>
