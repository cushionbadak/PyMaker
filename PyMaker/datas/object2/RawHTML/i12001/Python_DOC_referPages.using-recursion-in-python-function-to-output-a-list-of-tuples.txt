<div class="post-text" itemprop="text">
<p>I'm very new to python and would kindly appreciate any help.Basically im inputting a string and returning the string "encoded" if you like. I'm having problems however with my function, i don't know where i'm going wrong.</p>
<pre><code>def encode_it(x):
    output = []
    counter = 1
    while x[0] != x[-1]:
        if x[0] == x[1]:
            counter += 1
            return encode_it(x[1:])
        else:
            output += (x[0],counter)
            counter = 1
            return encode_it(x[1:])

    return output
</code></pre>
<p>the result i want is this:</p>
<pre><code>&gt;&gt;&gt;encode_it("qqqqppttyl")
[("q",4),("p",2),("t",2),("y",1),("l",1)]
</code></pre>
<p>I would really appreciate any help, I'm just learning python and trying my hand at recursion, if there was even an easier way of doing this without recursion i'd be really grateful :)</p>
<p>Thanks guys!!
in response to L3viathan's code , i modified it so it would output the result but it doesnt add the last character to the list:</p>
<pre><code>def encode_it(x):
last_char = None
num = 0
result = []
for char in x:
    t = ( )
    if last_char == char:
        num += 1
    else:
        if last_char:
            t += last_char,num
            result += t
        last_char = char
        num = 1
return result 
</code></pre>
<p>if i was to call encode_it("qqqeerrw"), the result i would get is:</p>
<pre><code>['q', 3, 'e', 2, 'r', 2] #it's leaving out the w here?
</code></pre>
<p>also, the reason i have an empty tuple 't' and an empty list 'result' is because, i want each character to be in its own tuple with its count...like so:</p>
<pre><code>[("q",3),("e",2),("r",2),("w",1)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This task is easily done by <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow"><code>itertools.groupby</code></a>:</p>
<pre><code>def encode_it(txt):
    return ((c, len(tuple(grp))) for c, grp in itertools.groupby(txt))
</code></pre>
<p>Then:</p>
<pre><code>&gt;&gt;&gt; list(encode_it("qqqqppttyl"))
[('q', 4), ('p', 2), ('t', 2), ('y', 1)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One of the issues of your code is that <code>output</code> is reinitialized as an empty list on every recursive call. In the final case, when you're through the complete string, the newly created empty list is returned (and then also handed back through all of the recursive calls).</p>
<hr/>
<p>This is a solution without recursion, as a generator:</p>
<pre><code>def encode_it(x):
    last_char = None
    num = 0
    for char in x:
        if last_char == char:
            num += 1
        else:
            if last_char:
                yield (last_char, num)
            last_char = char
            num = 1
</code></pre>
<p>Usage:</p>
<pre><code>&gt;&gt;&gt; list(encode_it("qqqqppttyl"))
[('q', 4), ('p', 2), ('t', 2), ('y', 1)]
</code></pre>
<hr/>
<p>The way this works is by iterating over the string, and testing whether the current character is the same as the one saved in <code>last_char</code>. If so, we just increment a counter. If it isn't, we <code>yield</code> the tuple of the last character along with its count, and set new values for <code>last_char</code> and <code>num</code>.</p>
<p>A <a href="https://wiki.python.org/moin/Generators" rel="nofollow">generator</a> doesn't return a list, but instead a generator object, so to turn it into a list, you can call <code>list()</code> on it.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can easily without recursion using the <code>count</code> method and a single line <code>for</code> loop.</p>
<pre><code>def encode_it(x):
   return [(char,x.count(char)) for char in x]
</code></pre>
<p><code>list.count(x)</code> return the number of times x appears in the list.</p>
</div>
<div class="post-text" itemprop="text">
<p>A messy one-liner:</p>
<pre><code>def encode_it(x):
    return [(c,x.count(c,i,next((i for i, v in enumerate(x) if v != c), -1))) for i, c in enumerate(x) if x.index(c) == i]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A simple recursive (as it was asked) solution to the problem:</p>
<pre><code>def encode_it(x):
    if not x:  # base case: empty string
        return []
    i, c = 1, x[0] 
    while i &lt; len(x) and c == x[i]:
        i += 1
    return [(c, i)] + encode_it(x[i:])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Below solution will also work if same character are not in sequence also, without using recursion function.</p>
<p>For Example given string is something </p>
<pre><code>&gt;&gt;&gt;groupBy("qqqqqq1212")
[('q', 6), ('1', 2), ('2', 2)]
</code></pre>
<p>or </p>
<pre><code>&gt;&gt;&gt;groupBy("qqqqqq1212tytl")
[('y', 1), ('q', 6), ('1', 2), ('l', 1), ('t', 2), ('2', 2)]
</code></pre>
<p>Program without recursion function</p>
<pre><code>str = "qqqqqq1212tytl"

def groupBy(str):
   result = []
   count = {}
   for c in str:
      if c in count:
          count[c] += 1
      else:
          count[c] = 1

   for key in count:
      if count[key] &gt;= 1:
          result +=  [(key, count[key])]            

   return result           


print(groupBy(str))
</code></pre>
<p>Please let me know, how can it be better coded by use of recursive function? </p>
</div>
<span class="comment-copy">You should specify, if the characters will always be ordered like this in blocks; probably not, but then you should change your example.</span>
<span class="comment-copy">Also, your indentation is wrong, the block after the <code>def</code> should be indented</span>
<span class="comment-copy">At what point exactly does the code not behave as it should? BTW: Such things are best developed using Test Driven Development (TDD). Start with a test where you provide an empty string, then a string with one character, then one with multple, equal characters etc.</span>
