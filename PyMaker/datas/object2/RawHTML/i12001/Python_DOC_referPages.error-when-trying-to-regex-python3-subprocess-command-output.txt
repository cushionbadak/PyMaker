<div class="post-text" itemprop="text">
<p>I've been banging my head against a wall here...</p>
<p>I want to run a particular cli command from within a python script and then regex it's output. But I get the following error:</p>
<pre><code>"File "speedtestcork.py", line 18, in regex_speedtest
    for line in data.split("\n"):
TypeError: Type str doesn't support the buffer API"
</code></pre>
<p>Here's my short code:</p>
<pre><code>import time
import re
import speedtest_cli
import subprocess



def regex_speedtest(data):
        #output, errors = data.communicate()
        #output1 = str(output)
        Down_Regex = re.compile(r'(Download:).(\d+\.\d+).(Mbit/s)')
        Up_Regex = re.compile(r'(Upload:).(\d+\.\d+).(Mbit/s)')

        for line in data.split("\n"):          # code seems to break at this line.
                print(line)
                #Downmatch = Down_Regex.search(line)
                #Upmatch = Up_Regex.search(line)
        #return (Downmatch.group(2), Upmatch.group(2))



while True:
        now = time.strftime("%H:%M:%S %d %m %Y")
        process = subprocess.Popen(["speedtest-cli", "--server", "2432"], shell=True, stdout=subprocess.PIPE)
        output, errors = process.communicate()
        down, up = regex_speedtest(output)
</code></pre>
<p>This should be simple to debug but I cannot find the solution.</p>
<p>Used the following post but still cannot resolve:</p>
<p><a href="https://stackoverflow.com/questions/33013183/regex-woes-with-subprocess-output">Regex woes with Subprocess output</a></p>
<p>Thanks in advance,</p>
<p>Paul</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python3 <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow"><code>Popen.communicate</code></a> returns <code>bytes</code>, while <code>regex_speedtest</code> expects <code>str</code> input. </p>
<p>Here's an updated version:</p>
<pre><code>def regex_speedtest(data):
    Down_Regex = re.compile(rb'(Download:).(\d+\.\d+).(Mbit/s)')
    Up_Regex = re.compile(rb'(Upload:).(\d+\.\d+).(Mbit/s)')

    for line in data.splitlines():   
        print(line)
</code></pre>
<p>I've changed the <code>r</code> prefix to <code>rb</code>, which transforms string literals into byte literals and replaced <code>split("\n")</code> call with <code>splitlines</code>, since this works for both <code>str</code> and <code>bytes</code>.</p>
<p><strong>Update</strong>: as noted by Duncan in the comments, replacing <code>"\n"</code> with <code>b"\n"</code> in the <code>split</code> call would work just as well.</p>
</div>
<span class="comment-copy">or you could use <code>data.split(b'\n')</code> as the problem was simply the mixing of <code>str</code> and <code>bytes</code> in the <code>split</code> call.</span>
<span class="comment-copy">The regex matches would've failed as well, try <code>re.compile("foo").search(b"foo")</code>.</span>
<span class="comment-copy">Yes, I wasn't complaining about that part of your answer, just that you implied that <code>.split()</code> wouldn't work for bytes when in fact it does. (Not that there is anything wrong with using <code>.splitlines()</code> either).</span>
<span class="comment-copy">Thanks guys, my first ever post here, well impressed with the response time and knowledge :) Solving this has highlighted another issue: Traceback (most recent call last):   File "speedtestcork.py", line 37, in &lt;module&gt;     down, up = regex_speedtest(output) TypeError: 'NoneType' object is not iterable</span>
<span class="comment-copy">This might indicate that you don't return anything from <code>regex_speedtest</code>, which makes the unpacking fail.</span>
