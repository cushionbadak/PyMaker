<div class="post-text" itemprop="text">
<p>I wish to open a <code>.txt</code> file and enter all of the words within the file into a <code>dictionary</code>. After I would like to accumulate the total sum of words within the dictionary. </p>
<p>The <code>.txt</code> file contains 5 lines: </p>
<pre><code>elephant calculator fish
towel onion fish
nandos pigeon tiger
cheeky peg lion
dog cat fish
</code></pre>
<p>this is what I currently have:</p>
<pre><code>words = 0 
dictionary = []
with open('file.txt','r') as file:
    for x in inf:
        dictionary.split(x)
        words += 1
print(words)
</code></pre>
<p>Sorry about the awfully constructed question. </p>
</div>
<div class="post-text" itemprop="text">
<p>The simple way to get a count of unique words is to use a <a href="https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset" rel="nofollow">set</a>. I put your text into a file called 'qdata.txt'.</p>
<p>The file is very small, so there's no need to read it line by line: just read the whole thing into a single string, then split that string on whitespace and pass the resulting list into the <code>set</code> constructor:</p>
<pre><code>fname = 'qdata.txt'
with open(fname) as f:
    words = set(f.read().split())
print(words, len(words))
</code></pre>
<p><strong>output</strong></p>
<pre><code>set(['towel', 'onion', 'nandos', 'calculator', 'pigeon', 'dog', 'cat', 'tiger', 'lion', 'cheeky', 'elephant', 'peg', 'fish']) 13
</code></pre>
<p>This works because "a set object is an unordered collection of distinct hashable objects". If you try to add a duplicate item to a set it's simply ignored. Please see the docs for further details.</p>
<hr/>
<p>For larger files, it <em>is</em> a good idea to read and process them line by line to avoid loading the whole file into RAM, but with modern OSes the file needs to be rather large before you see any benefit, due to file caching.</p>
<pre><code>fname = 'qdata.txt'
words = set()
with open(fname) as f:
    for line in f:
        words.update(line.split())

print(words, len(words))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have several problems but the basic strategy is sound</p>
<ul>
<li><code>dictionary</code> is actually a list... which is what you want anyway. Rename it.</li>
<li>you opened the file as <code>file</code> which is fine in Python 3 but frowned upon in Python 2 because it masks the builtin <code>file</code> object. People are still sensitive about that, so best use a different name.</li>
<li>You didn't use the file variable, instead inventing something called <code>inf</code>.</li>
<li>You split the wrong thing. You want to split the <code>x</code> line you read from the file.</li>
<li>No need to count the words.... lists know how long they are.</li>
</ul>
<p>So, this would work better</p>
<pre><code>words = []
with open('file.txt') as fileobj:
    for x in fileobj:
        words += x.strip().split()
print(len(words))
</code></pre>
<p><code>collections.Counter</code> is often used to count occurances of words. Assuming you can use anything in the standard lib, this would work (notice I lower cased so that Elephant and elephant count the same):</p>
<pre><code>import collections
words = collections.Counter(int)
with open('file.txt') as fileobj:
    for x in fileobj:
        words.update(word.lower() for word in x.strip().split())
# words is a dict-like object with a count of each word
print(len(words))
print(words)
# lets pick one
print('elephant count', words['elephant'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This may be inefficient, and never used in a case like this, but being as I am new as well, I wonder why the following wouldn't work for removing duplicates.</p>
<pre><code>words = []
with open('file.txt') as fileobj:
    for x in fileobj:
        words += x.strip().split()
    for i in words:
        if words.count(i) &gt; 1:
            words.remove(i)
print (len(words))
print (words)
</code></pre>
<p>Majority of code thanks to tdelaney.</p>
</div>
<span class="comment-copy">Sorry but this is not a service that produces code. What have you done so far?</span>
<span class="comment-copy">Oh a newbie, quick everyone beat them down with passive aggressive comments so they learn not to ask again! Better not provide supportive and constructive feedback, that is below us gods of software.</span>
<span class="comment-copy">You need to post your best effort at solving the problem and then we can work with that code. That gives us specific code related problems to work with.</span>
<span class="comment-copy">@zondo I have edited the question with what I currently have, in the future I will provide more information</span>
<span class="comment-copy">Yeah code, that's what we needed. You created a list not a dict but that's good because a list is what you want.</span>
<span class="comment-copy">thanks, how would you modify this so that duplicate words are not included in the total? e.g. "fish",  "fish", "cow" word count = 2</span>
<span class="comment-copy">Updated to count the words.</span>
<span class="comment-copy">It's dangerous to remove items from a list that you're iterating over. It's a bit like sawing off a tree branch that you're sitting on. See <a href="http://stackoverflow.com/q/1207406/4014959">Remove items from a list while iterating in Python</a>. Also, <code>.count</code> isn't very efficient: it has to perform a linear scan over the entire list on each call.</span>
<span class="comment-copy">Yes, I was a bit hesitant about the removing items from a list that is being iterated over. The rest makes sense as well. Explanation much appreciated.</span>
