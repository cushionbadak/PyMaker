<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/35986285/returning-dictionary-length-of-words-in-string">Returning Dictionary-length of words in string [duplicate]</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<p>I have two lists</p>
<pre><code>a= ['and', 'people', 'them', 'become', 'treat', 'is', 'they', 'see', 'the', 'way', 'you', 'what']
b= [3, 6, 4, 6, 5, 2, 4, 3, 3, 3, 3, 4]
</code></pre>
<p>I need a dictionary where the keys are the numbers in <code>b</code> and values are the words in <code>a</code>. However, the keys' values must be unique. So, the output is like this:</p>
<pre><code>c= {2 : 'is', 3 : ['and', 'see', 'the', 'way', 'you'], 4: ['them', 'they', 'what'], 5 : 'treat', 6 : 'become'}
</code></pre>
<p>I've tried this:</p>
<pre><code>mydict = {key:value for key, value in zip(b, a)}
print (mydict)
</code></pre>
<p>This is the output:</p>
<pre><code>{2: 'is', 3: 'and', 4: 'them', 5: 'treat', 6: 'become'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>dict={}
for i in xrange(len(b)):
    if b[i] not in dict:
        dict[b[i]]=[a[i]]
    else:
        dict[b[i]].append(a[i])
print dict
</code></pre>
<p>you will get the result what you need.</p>
<pre><code>{2: ['is'], 3: ['and', 'see', 'the', 'way', 'you'], 4: ['them', 'they', 'what'],5: ['treat'], 6: ['people', 'become']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may use <a href="https://docs.python.org/3/library/collections.html#defaultdict-examples" rel="nofollow">defaultdict</a> class, which behaves as <code>dict</code> but can have default start values for missing keys. Try it in such a way:        </p>
<pre><code>    &gt;&gt;&gt; a= ['and', 'people', 'them', 'become', 'treat', 'is', 'they', 'see', 'the', 'way', 'you', 'what']
    &gt;&gt;&gt; from collections import defaultdict
    &gt;&gt;&gt; c=defaultdict(list)
    &gt;&gt;&gt; for x in a: c[len(x)].append(x)
    &gt;&gt;&gt; print(c)
    defaultdict(&lt;class 'list'&gt;, {2: ['is'], 3: ['and', 'see', 'the', 'way', 'you'], 4: ['them', 'they', 'what'], 5: ['treat'], 6: ['people', 'become']})
</code></pre>
<p>Then you may use it like usual <code>dict</code>:</p>
<pre><code>    &gt;&gt;&gt; for k,v in c.items():
    &gt;&gt;&gt;        print(k, ' : ', v)

    2  :  ['is']
    3  :  ['and', 'see', 'the', 'way', 'you']
    4  :  ['them', 'they', 'what']
    5  :  ['treat']
    6  :  ['people', 'become']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As I noted in <a href="https://stackoverflow.com/questions/36029423/create-a-dictionary-from-two-lists-in-python-matching-the-number-of-letters-in-e#comment59708806_36029423">my comment</a>, this means dealing with three cases:</p>
<ol>
<li>Key not yet present</li>
<li>Key present, value is string</li>
<li>Key present, value is list</li>
</ol>
<p>To do precisely what you want, therefore:</p>
<pre><code>mydict = {}
for key, value in zip(map(len, a), a):
    # 1. 
    if key not in mydict: 
        mydict[key] = value
    # 2. 
    elif isinstance(mydict[key], str):
        mydict[key] = [mydict[key], value]
    # 3. 
    else:
        mydict[key].append(value)
</code></pre>
<p>Note the use of <code>map</code> and <code>len</code> to get the lengths on the fly. </p>
<p>However, as you can see, this is pretty complex, and now you have a dictionary with heterogeneous value types, which further complicates additional processing. Instead, I would recommend always using a list as the value, even for only a single string:</p>
<pre><code>mydict = {}
for key, value in zip(map(len, a), a):
    if key not in mydict:
        mydict[key] = []
    mydict[key].append(value)
</code></pre>
<p>This is clearly neater and will probably simplify any additional steps you have. You can simplify this code further with the <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="nofollow noreferrer"><code>dict.setdefault</code></a> method or a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a> object, which is designed for this kind of thing. </p>
</div>
<span class="comment-copy">Wouldn't it be better to <i>always</i> use a list as the value? Then you can just use <code>mydict.setdefault(key, []).append(value)</code> or a <code>collections.defaultdict(list)</code>. Otherwise you have three cases: key not present, key present with string value, key present with list value.</span>
<span class="comment-copy">What is the output that you need?</span>
<span class="comment-copy">I need this output: c= {2 : 'is', 3 : ['and', 'see', 'the', 'way', 'you'], 4: ['them', 'they', 'what'], 5 : 'treat', 6 : 'become'}</span>
<span class="comment-copy">@DanielTiezzi again, why not <code>5: ['treat']</code>?</span>
<span class="comment-copy">So, words of the same length in a list of values assigned to the matched keys</span>
