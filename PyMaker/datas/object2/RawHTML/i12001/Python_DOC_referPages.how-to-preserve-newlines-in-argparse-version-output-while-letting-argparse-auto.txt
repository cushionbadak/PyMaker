<div class="post-text" itemprop="text">
<p>I wrote the following code.</p>
<pre><code>import argparse

parser = argparse.ArgumentParser()
parser.add_argument('-v', '--version', action='version',
                    version='%(prog)s 1.0\nCopyright (c) 2016 Lone Learner')
parser.parse_args()
</code></pre>
<p>This produces the following output.</p>
<pre><code>$ python foo.py --version
foo.py 1.0 Copyright (c) 2016 Lone Learner
</code></pre>
<p>You can see that the newline is lost. I wanted the copyright notice to appear on the next line.</p>
<p>How can I preserve the new lines in the version output message?</p>
<p>I still want argparse to compute how the output of <code>python foo.py -h</code> should be laid out with all the auto-wrapping it does. But I want the version output to be a multiline output with the newlines intact.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>RawTextHelpFormatter</code> will turn off the automatic wrapping, allowing your explicit <code>\n</code> to appear.  But it will affect all the <code>help</code> lines.  There's no way of picking and choosing.  Either accept the default wrapping, or put explicit newlines in all of your help lines.</p>
<p>You are getting to a level of pickiness about the help format that you need to study the <code>HelpFormatter</code> code for yourself.</p>
</div>
<div class="post-text" itemprop="text">
<p>You'd be best off using a custom <code>argparse.Action</code> for this.</p>
<pre><code>import argparse
import os
import sys

class MultilineVersionAction(argparse.Action):
    verbose_version = '1.0\nCopyright (c) 2016 Lone Learner'

    def __init__(self, option_strings, dest, nargs=None, **kwargs):
        if nargs is not None:
            raise ValueError('nargs not allowed')
        # this is how argparse initialises `prog` by default
        self.prog = os.path.basename(sys.argv[0])
        super(MultilineVersionAction, self).__init__(option_strings, dest, nargs=0, **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        parser.exit(message='{} {}\n'.format(self.prog, self.verbose_version))

# ...

    self.parser.add_argument('-v', '--version', action=MultilineVersionAction)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just don't use <code>action='version'</code>. The same pattern can be repeated for <code>-h</code>.</p>
<pre><code>import os
import sys
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('-v', '--version', action='store_true')
args = parser.parse_args()

if args.version:
    prog = os.path.basename(__file__)
    print('{} 1.0\nCopyright (c) 2016 Lone Learner'.format(prog))
    sys.exit()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's also <a href="https://docs.python.org/3/library/argparse.html#formatter-class" rel="nofollow noreferrer"><code>argparse.RawDescriptionHelpFormatter</code></a>.</p>
<pre><code>parser=argparse.ArgumentParser(add_help=True,
    formatter_class=argparse.RawDescriptionHelpFormatter,
    description="""an
already-wrapped
description
string""")
</code></pre>
<p>It leaves the <code>description</code> and <code>epilog</code> alone, and wraps only argument help strings.  The OP wanted the opposite.</p>
</div>
<span class="comment-copy">Thanks. I looked at <code>HelpFormatter</code> and found the following in its docstring: "Only the name of this class is considered a public API. All the methods provided by the class are considered an implementation detail." So I figured it is not a good idea to rely on the implementation of <code>HelpFormatter</code> if I want to guarantee that my code would continue to run well with future versions of Python. I guess I have to either accept the limitations of <code>argparse</code> and work within it, or handle <code>sys.argv</code> on my own.</span>
<span class="comment-copy">Don't worry too much about that disclaimer.  If you need/want to write your own formatter subclass, do so.  Five years from now when a rewrite of the main class enters production, you can tweak your subclass if needed.  In the mean time your code will perform as you want.</span>
