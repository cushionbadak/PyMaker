<div class="post-text" itemprop="text">
<p>I have a decorator function <code>my_fun(I,k)</code> and it is applied to a function <code>add(x,y)</code> as such</p>
<pre><code>@my_fun(4,5)
def add(x,y): return x+y
</code></pre>
<p>I am new to Python would like to know if I am writing the <code>my_fun</code> function </p>
<ol>
<li>How can I access <code>x,y</code> in the add method in <code>my_fun</code>?</li>
<li>How can I access the return value of add in the decorator function?</li>
</ol>
<p>I am a little confused on syntax and concepts any explanation would be help.</p>
</div>
<div class="post-text" itemprop="text">
<p>A decorator consists of the decorator function and a function wrapper (and if you want additional arguments for the decorator another outer layer of function around it):</p>
<pre><code># Takes the arguments for the decorator and makes them accessible inside
def my_fun(decorator_argument1, decorator_argument2):

     # Takes the function so that it can be wrapped.
     def wrapfunc(func):

         # Here we are actually going to wrap the function ... finally
         def wrapper(*args, **kwargs):

             # Call the function with the args and kwargs
             res = func(*args, **kwargs)

             # return this result
             return res

         # Replace the decorated function with the wrapper
         return wrapper
    # Return the wrapper for the function wrapper :-)
    return wrapfunc
</code></pre>
<p>In your case if you only want to use the decorator with your function you don't need to bother with the <code>*args, **kwargs</code> and replace it by:</p>
<pre><code>         def wrapper(x, y):

             # Here you can do stuff with x and y, i.e. print(x)

             # Call the function with x and y
             res = func(x, y)

             # Here you can do stuff with the result, i.e. res = res * decorator_argument1

             return res
</code></pre>
<p>I indicated the places where you can access <code>x</code> and <code>y</code> and the result.</p>
<p>If you want to predefine values for <code>x</code> and <code>y</code> a custom decorator is not the best way. You could use defaults:</p>
<pre><code>def add(x=4,y=5): return x+y

add() # returns 9
add(2) # returns 7
add(5, 10) # returns 15
</code></pre>
<p>or if you want to fix an argument you should use <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow"><code>functools.partial</code></a></p>
</div>
<div class="post-text" itemprop="text">
<p>If you're passing arguments to the decorator with <code>@my_fun(4, 5)</code>, you need three levels of nested functions to implement the decorator in the simplest way. The outer level is the "decorator factory". It returns the middle level function, the decorator. The decorator gets called with the function it's decorating as an argument and needs to return the inner most nested function, the wrapper. The wrapper function is the one that gets called by the user.</p>
<pre><code>def decorator_factory(deco_arg, deco_arg2): # name this whatever you want to use with @syntax
    def decorator(func):
        def wrapper(func_arg, func_arg2):
            # This is a closure!
            # In here you can write code using the arguments from the enclosing scpoes. e.g.:
            return func(func_arg*deco_arg, func_arg2*deco_arg2) # uses args from all levels
        return wrapper
    return decorator
</code></pre>
<p>The inner functions here are closures. They can see the variables in the scope surrounding the place they were defined in, even after the functions those scope belonged to have finished running.</p>
<p>(Note, if you want your decorator to be able to decorate many different functions, you may want the <code>wrapper</code> function to accept <code>*args</code> and <code>**kwargs</code> and pass them along to <code>func</code>. The example above only works for functions that accept exactly two arguments. A limitation like that may be perfectly reasonable for some uses, but not always.)</p>
</div>
<span class="comment-copy">If you want the decorator to take parameters like the <code>4,5</code> in OP's code then there needs to be an extra level of wrapping.</span>
<span class="comment-copy">Yes how can I add that extra wrapper to have arguments as well</span>
<span class="comment-copy">edited the answer for the optional arguments. I thought it was mostly about accessing <code>x</code> and <code>y</code> and the result of the function call and there another layer would be a bit obfuscating. Sorry.</span>
