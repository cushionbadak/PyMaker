<div class="post-text" itemprop="text">
<p>By debugging information I mean what TensorFlow shows in my terminal about loaded libraries and found devices etc. not Python errors.</p>
<pre><code>I tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcublas.so locally
I tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcudnn.so locally
I tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcufft.so locally
I tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcuda.so.1 locally
I tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcurand.so locally
I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:900] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
I tensorflow/core/common_runtime/gpu/gpu_init.cc:102] Found device 0 with properties: 
name: Graphics Device
major: 5 minor: 2 memoryClockRate (GHz) 1.0885
pciBusID 0000:04:00.0
Total memory: 12.00GiB
Free memory: 11.83GiB
I tensorflow/core/common_runtime/gpu/gpu_init.cc:126] DMA: 0 
I tensorflow/core/common_runtime/gpu/gpu_init.cc:136] 0:   Y 
I tensorflow/core/common_runtime/gpu/gpu_device.cc:717] Creating TensorFlow device (/gpu:0) -&gt; (device: 0, name: Graphics Device, pci bus id: 0000:04:00.0)
I tensorflow/core/common_runtime/gpu/gpu_bfc_allocator.cc:51] Creating bin of max chunk size 1.0KiB
...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can disable all debugging logs using <code>os.environ</code> :</p>
<pre><code>import os
import tensorflow as tf
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' 
</code></pre>
<p>Tested on tf 0.12 and 1.0</p>
<p>In details, </p>
<pre><code>0 = all messages are logged (default behavior)
1 = INFO messages are not printed
2 = INFO and WARNING messages are not printed
3 = INFO, WARNING, and ERROR messages are not printed
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>1.0+ Update (5/20/17):</strong></p>
<p>In TensorFlow 0.12+, per this <a href="https://github.com/tensorflow/tensorflow/issues/1258" rel="noreferrer">issue</a>, you can now control logging via the environmental variable called <code>TF_CPP_MIN_LOG_LEVEL</code>; it defaults to 0 (all logs shown), but can be set to 1 to filter out <code>INFO</code> logs, 2 to additionally filter out <code>WARNING</code> logs, and 3 to additionally filter out <code>ERROR</code> logs. See the following generic OS example using Python:</p>
<pre><code>import os
import tensorflow as tf

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'  # or any {'0', '1', '2'}
</code></pre>
<p><strong>For Prior Versions of TensorFlow or TF-Learn Logging, see the following:</strong></p>
<p>View the page below for information on TensorFlow logging; with the new update, you're able to set the logging verbosity to either <code>DEBUG</code>, <code>INFO</code>, <code>WARN</code>, <code>ERROR</code>, or <code>FATAL</code>. For example:</p>
<pre><code>tf.logging.set_verbosity(tf.logging.ERROR)
</code></pre>
<p>The page additionally goes over monitors which can be used with TF-Learn models. <a href="https://www.tensorflow.org/get_started/monitors" rel="noreferrer">Here is the page</a>.</p>
<p>This <strong>doesn't</strong> block all logging, though (only TF-Learn). I have two solutions; one is a 'technically correct' solution (Linux) and the other involves rebuilding TensorFlow.</p>
<pre><code>script -c 'python [FILENAME].py' | grep -v 'I tensorflow/'
</code></pre>
<p>For the other, please see <a href="https://stackoverflow.com/questions/36331419/tensorflow-how-to-measure-how-much-gpu-memory-each-tensor-takes/36505898#36505898">this answer</a> which involves modifying source and rebuilding TensorFlow.</p>
</div>
<div class="post-text" itemprop="text">
<p>I have had this problem as well (on <code>tensorflow-0.10.0rc0</code>), but could not fix the excessive nose tests logging problem via the suggested answers.</p>
<p>I managed to solve this by probing directly into the tensorflow logger. Not the most correct of fixes, but works great and only pollutes the test files which directly or indirectly import tensorflow:</p>
<pre><code># Place this before directly or indirectly importing tensorflow
import logging
logging.getLogger("tensorflow").setLevel(logging.WARNING)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As <code>TF_CPP_MIN_LOG_LEVEL</code> didn't work for me you can try:</p>
<pre><code>tf.logging.set_verbosity(tf.logging.WARN)
</code></pre>
<p>Worked for me in tensorflow v1.6.0</p>
</div>
<div class="post-text" itemprop="text">
<p>Usual python3 log manager works for me with tensorflow==1.11.0:</p>
<pre><code>import logging
logging.getLogger('tensorflow').setLevel(logging.INFO)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To add some flexibility here, you can achieve more fine-grained control over the level of logging by writing a function that filters out messages however you like:</p>
<pre><code>logging.getLogger('tensorflow').addFilter(my_filter_func)
</code></pre>
<p>where <code>my_filter_func</code> accepts a <code>LogRecord</code> object as input [<a href="https://docs.python.org/3/library/logging.html#logrecord-objects" rel="nofollow noreferrer"><code>LogRecord</code> docs</a>] and
returns zero if you want the message thrown out; nonzero otherwise.</p>
<p>Here's an example filter that only keeps every nth info message (Python 3 due
to the use of <code>nonlocal</code> here):</p>
<pre><code>def keep_every_nth_info(n):
    i = -1
    def filter_record(record):
        nonlocal i
        i += 1
        return int(record.levelname != 'INFO' or i % n == 0)
    return filter_record

# Example usage for TensorFlow:
logging.getLogger('tensorflow').addFilter(keep_every_nth_info(5))
</code></pre>
<p>All of the above has assumed that TensorFlow has set up its logging state already. You can ensure this without side effects by calling <code>tf.logging.get_verbosity()</code> before adding a filter.</p>
</div>
<div class="post-text" itemprop="text">
<p>You might be tempted to use <a href="https://www.tensorflow.org/versions/r2.0/api_docs/python/tf/get_logger" rel="nofollow noreferrer"><code>tf.get_logger</code></a> for <strong>compatibility with Tensorflow 2.0</strong></p>
<pre><code>import logging
tf.get_logger().setLevel(logging.ERROR)
</code></pre>
<p>but it did not work for me.</p>
</div>
<span class="comment-copy">tracking issue: <a href="https://github.com/tensorflow/tensorflow/issues/1258" rel="nofollow noreferrer">github.com/tensorflow/tensorflow/issues/1258</a></span>
<span class="comment-copy">This only worked if I put the os.environ before tensorflow was imported.</span>
<span class="comment-copy">This works, but it removes the timestamp in front of the logs -- how can this be turned on again?</span>
<span class="comment-copy">What are these levels (0, 1, 2, 3) mean?</span>
<span class="comment-copy">only thing that worked on tf 2.0 alpha</span>
<span class="comment-copy">didn't work for me on tf 1.6 at macos.</span>
<span class="comment-copy">the "I tensorflow" messages can be annoying, tf should  provide some way of silencing them using api instead of rebuilding</span>
<span class="comment-copy">This can also be done from command line: <code>export TF_CPP_MIN_LOG_LEVEL="3" &amp;&amp; python your_code.py</code></span>
<span class="comment-copy">It can also be run as <code>TF_CPP_MIN_LOG_LEVEL="3" python your_code.py</code></span>
<span class="comment-copy">Is there a way to turn tensorflow warnings/errors into errors?</span>
<span class="comment-copy">I apologize for the delayed response. AFAIK there is not (trivial) way of doing such, may I ask what you would like to accomplish by doing such @CMCDragonkai?</span>
<span class="comment-copy">This doesn't seem to work for TF 0.11</span>
<span class="comment-copy">Worked for me, while TF_CPP_MIN_LOG_LEVEL solution didn't. Good thinking!</span>
<span class="comment-copy">Only solution that worked for me with tensorflow 1.12.</span>
<span class="comment-copy">Worked for me with tensorflow 1.13.1</span>
