<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/15479928/why-is-the-order-in-dictionaries-and-sets-arbitrary">Why is the order in dictionaries and sets arbitrary?</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>I created a function that counts the number of times a string has appeared in a list and returns a dictionary. I got the program to work, but interestingly enough, when I changed the value of a key value, d[i], the order of the names changed . Why is python doing this?</p>
<p><strong>Before:</strong> </p>
<pre><code>def countlist(l):
    d = {}
    for i in l:
        if i not in d:
            d[i] = 0
        else:
            d[i] += 1
    return d
</code></pre>
<p>input: </p>
<pre><code>countlist(['helen','andrew','chris','chris','helen'])
</code></pre>
<p>result: </p>
<p><code>{'helen': 1, 'andrew': 0, 'chris': 1}</code></p>
<p><strong>After:</strong></p>
<pre><code>def countlist(l):
    d = {}
    for i in l:
        if i not in d:
            d[i] = 1
        else:
            d[i] += 1
    return d
</code></pre>
<p>input:  <code>countlist(['helen','andrew','chris','chris','helen'])</code></p>
<p>result: <code>{'andrew': 1, 'chris': 2, 'helen': 2}</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Did you execute this code in different sessions of Python? If so, the hash code for the string keys likely changed. To defend against denial of service attacks caused by intentionally submitting keys with colliding hashes, Python salts hashes for <code>str</code>, <code>bytes</code> and other "strings of data" types.</p>
<p><a href="https://docs.python.org/3/reference/datamodel.html#object.__hash__" rel="nofollow">Per the docs</a>:</p>
<blockquote>
<p>Note</p>
<p>By default, the <code>__hash__()</code> values of str, bytes and datetime objects are “salted” with an unpredictable random value. Although they remain constant within an individual Python process, they are not predictable between repeated invocations of Python.</p>
<p>This is intended to provide protection against a denial-of-service caused by carefully-chosen inputs that exploit the worst case performance of a dict insertion, O(n^2) complexity. See <a href="http://www.ocert.org/advisories/ocert-2011-003.html" rel="nofollow">http://www.ocert.org/advisories/ocert-2011-003.html</a> for details.</p>
<p>Changing hash values affects the iteration order of dicts, sets and other mappings. Python has never made guarantees about this ordering (and it typically varies between 32-bit and 64-bit builds).</p>
<p>See also <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONHASHSEED" rel="nofollow">PYTHONHASHSEED</a>.</p>
</blockquote>
<p>If you require repeatable ordering based on insertion order, use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow"><code>collections.OrderedDict</code></a>.</p>
</div>
<span class="comment-copy">Unfortunately the keys in Python dictionaries are not ordered.</span>
