<div class="post-text" itemprop="text">
<p>I have a possibly very easy question which I can't seem to figure out how. How to do something like this:</p>
<pre><code>race = goblin  #I change the race here


goblingrowth = 200  
humangrowth = 300  
orgegrowth = 400

print (race + "growth")  #In this case, it will print the string "goblingrowth" in 
python, but I want it to print the value of the variable (goblingrowth), 
which is 200, and i have to do it this way. 
</code></pre>
<p>Any help will be greatly appreciated, thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You could just store the values in a dictionary instead of as separate variables.</p>
<pre><code>growths = {'goblin': 200, 'humans': 300, 'ogre': 400}
print growths[race]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A better way to do this is to have a class to represent your different types of living entities.  You can then create an instance for each race, setting the properties.  You will then have convenient access to all of the properties of a given living.  For example:</p>
<pre><code>class Living(object):
    def __init__(self, name, growth):
        self.name = name
        self.growth = growth

goblin = Living("goblin", 200)
human  = Living("human", 300)
ogre   = Living("ogre", 400)

for living in (goblin, human, ogre):
    print(living.name + " growth is " + str(living.growth))
</code></pre>
<p>This outputs:</p>
<pre><code>goblin growth is 200
human growth is 300
ogre growth is 400
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simply add in <code>goblingrowth</code> to your print as I will show below. However, the way you are looking to do this, you will have to cast your variable to a string (since your <code>goblingrowth</code> is an int), which isn't very ideal. You can do this: </p>
<pre><code>print(race + " growth " + str(goblingrowth))
</code></pre>
<p>However, it would be more proper and strongly recommended to structure your output like this instead using string formatting: </p>
<pre><code>print("{0} growth: {1}".format(race, goblingrowth))
</code></pre>
<p>What happened above, is that you are setting the arguments in to each of those positions in the string, so <code>{0}</code> indicates the first argument you are providing to format and set at that position of the string, which is <code>race</code>, then <code>{1}</code> will indicate the second argument provided to format, which is <code>goblingrowth</code>. You actually <em>don't</em> need to provide those numbers but I suggest you read the documentation provided below to get more acquainted. </p>
<p>Read about string formatting <a href="https://docs.python.org/3/library/string.html#format-examples" rel="nofollow">here</a>. It will help greatly. </p>
</div>
<div class="post-text" itemprop="text">
<p>One way you could do this is to access the <code>locals()</code> dictionary which holds the local variables of your code and get the value of the variable from the string that you have. For example:</p>
<pre><code>race = 'goblin'  #I change the race here

goblingrowth = 200  
humangrowth = 300  
orgegrowth = 400

print(locals()[race + 'growth'])  # this accesses the variable goblingrowth in the locals dictionary
</code></pre>
<p>Would output <code>200</code>. Hope this helps!</p>
</div>
<span class="comment-copy">Consider using a dict.</span>
<span class="comment-copy">Thanks a lot for all the answers, i just started python and is weeb level, those techniques will come in handy!</span>
<span class="comment-copy">I think someone downvoted you because using <code>eval</code> is really not a good idea. I would suggest re-working your solution.</span>
<span class="comment-copy">What is wrong with <code>eval</code>?</span>
<span class="comment-copy">Read <a href="http://stackoverflow.com/a/1832957/1832539">this</a> and <a href="http://stackoverflow.com/a/9384005/1832539">this</a> to start you off. It's not the best practice, and is pretty dangerous to use.</span>
<span class="comment-copy">You might consider using <code>ast.literal_eval()</code></span>
