<div class="post-text" itemprop="text">
<p>I am trying to append small (<strong>num</strong>) lists to a final list (<strong>lst</strong>).
The small lists are modified in a loop and at each modification they are appended to the final list.
But the result is strange and I did not like the solution.
Here is the code.</p>
<pre><code>n   = 3
num = []
lst = []

for i in range(n) :
    num.append(0)

lst.append(num)

for j in range(n-1) :
    for i in range(n) :
        num[i] += 1
        lst.append(num)

for each in lst :
    print each
</code></pre>
<p>The result of this code is:</p>
<pre><code>[2, 2, 2]
[2, 2, 2]
[2, 2, 2]
[2, 2, 2]
[2, 2, 2]
[2, 2, 2]
[2, 2, 2]
</code></pre>
<p>However, if instead of using <code>lst.append(num)</code>, I use <code>lst.append(list(num))</code>, I get the expected result:</p>
<pre><code>[0, 0, 0]
[1, 0, 0]
[1, 1, 0]
[1, 1, 1]
[2, 1, 1]
[2, 2, 1]
[2, 2, 2]
</code></pre>
<p>Is this really the correct way for appending values of a list to another list?</p>
<p>UPDATE:
I see that when I do <code>lst.append(num)</code> this does not mean that the values of num are appended to <strong>lst</strong>. It is a reference and because I change the content of <strong>num</strong>, in the end, all entries of my list <strong>lst</strong> will reference to the final <strong>num</strong>. However, if I do this:</p>
<pre><code>lst = []

for i in range(3) :
    num = i
    lst.append(num)

for each in lst :
    print each
</code></pre>
<p>I get what is expected, i.e., a list <strong>lst</strong> with the values [0, 1 , 2]. And in this case, <strong>num</strong> is changed at every iteration and its final value is <strong>num</strong>=2.</p>
</div>
<div class="post-text" itemprop="text">
<p>Lets have a closer look at this loop.</p>
<pre><code>for i in range(n) :
     num[i] += 1
     lst.append(num)
</code></pre>
<p>You are appending same <code>num</code> multiple times. So, all elements of <code>lst</code> has the same reference to list <code>num</code> and you are updating it at each iteration. That is why you are getting same value at each element of <code>lst</code> after the loop has completed.</p>
<p>But, when you are doing <code>lst.append(list(num))</code>, you are generating a new list each time. So, each element of <code>lst</code> has different reference. And you are getting expected output.</p>
<p>So, to answer your question, the way you are adding a list to a list is fine. That is how you should do it. It has nothing to do with your expected outcome.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think the explanation for your result is that when you do <code>num[i] += 1</code> you are actually modifying the preceding copies of num that were appended in <code>lst</code> at previous stages of the loop. When you do <code>lst.append(list(num))</code> you are creating a unique version of <code>num</code>.</p>
</div>
<span class="comment-copy"><b>Hint:</b> Try <code>[id(x) for x in lst]</code></span>
<span class="comment-copy">If you want to extend (modify-in-place) a list with another list, you can use <code>a.extend(b)</code></span>
<span class="comment-copy">The issue you're seeing is because you're putting a reference to <code>num</code> into <code>lst</code>, rather than <i>a copy of num as it looks right now</i>. When you do <code>lst.append(list(num))</code>, you're making a <i>copy</i> of <code>num</code> and putting that into <code>lst</code>, and that copy then doesn't change when you modify <code>num</code>.</span>
<span class="comment-copy">Did not you notice the strange thing? For example, at line 8 I append 'num' to 'lst'. At this moment, the list 'num' is [0, 0, 0]. But at the end when I print, this value do not show up in the list 'lst'. UPDATE: @TomDalton that is what I was thinking.</span>
<span class="comment-copy">Ok. I understood. Thank you. But I now I have another question on top of that. If I later change completely the value of num and append to the list like: ` num = 'other thing' lst.append(num) ` Then the result is: ` [2, 2, 2] [2, 2, 2] [2, 2, 2] [2, 2, 2] [2, 2, 2] [2, 2, 2] [2, 2, 2] other thing `</span>
<span class="comment-copy">Also see "How do I copy an object in Python?" in the <a href="https://docs.python.org/3/faq/programming.html" rel="nofollow noreferrer">Programming FAQ</a>. list(num) is not the nice way to copy a list.</span>
<span class="comment-copy">@mkiever I see now that is best use num[:] than list(num) to copy the values of num as list to another list</span>
