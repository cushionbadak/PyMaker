<div class="post-text" itemprop="text">
<p>I need to sort a dictionary by numeric val like the following example:</p>
<pre class="lang-none prettyprint-override"><code>123ABC Example 1

514WE  Example2

192DF  Example 3
</code></pre>
<p><a href="https://stackoverflow.com/questions/1534542/can-i-sort-text-by-its-numeric-value-in-python">I found this</a> on SO:</p>
<pre><code>sorted(mydict.keys(), key=lambda a:map(int,a.split('.')))
</code></pre>
<p>But this splits on the '.' and I don't have that option - any ideas on what I would do to make this happen?</p>
<p>Sorted would look like this:</p>
<pre class="lang-none prettyprint-override"><code>123ABC Example 1

192DF  Example 3

514WE  Example2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the format of the key is alwys <code>NNNNWWWWW</code> where <code>NNNN</code> are digits and <code>WWW</code> are letters and you want to sort the items based on the numerical value of the <code>NNNNN</code> prefix, you could use:</p>
<pre><code>import string

sorted(mydict, key=lambda x: int(x.lower().rstrip(string.ascii_lowercase)))
</code></pre>
<p>The idea is to simply remove the right-portion of the string containing letters and then converting the remaining <code>NNNN</code> part into a number.</p>
<p>Alternatively you have to use a regex like:</p>
<pre><code>import re
num_regex = re.compile(r'\d+')

sorted(mydict, key=lambda x: int(num_regex.match(x).group(0)))
</code></pre>
<p>this should be more robust. It would sort <code>123A12</code> the same as <code>123A</code>, while the first solution would yield a <code>ValueError</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/library/re.html" rel="nofollow">regular expression</a> for getting the numeric part at the beginning of the string and use that for sorting. Note, however, that this does not do any error checking: In case the key does not start with a number, this will raise an exception.</p>
<pre><code>&gt;&gt;&gt; mydict = {"123ABC": "Example 1",
...           "514WE":  "Example2",
...           "192DF":  "Example 3"}
...     
&gt;&gt;&gt; [re.match(r"\d+", s).group() for s in mydict]
['192', '123', '514']
&gt;&gt;&gt; sorted(mydict, key=lambda s: int(re.match(r"\d+", s).group()))
['123ABC', '192DF', '514WE']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One option is you use an <a href="https://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="nofollow">OrderedDict()</a>. It works the same as normal python dictionary but it maintains the order of the objects that are inserted into it. Hence you don't need any sorting, just update the OrderedDict() in the order you need.</p>
</div>
<span class="comment-copy">I dont understand what your dictionary looks like :)</span>
<span class="comment-copy">You give input, but you don't give output.  What do you want the sorted version to look like?</span>
<span class="comment-copy">I've got a problem - Bakuriu and tobias_k are tied - which answer do I accept? I think they are literally seconds apart...</span>
<span class="comment-copy">Ty for responding so quickly :) - checking this out and studying it...</span>
<span class="comment-copy">Ty for responding so quickly :) - checking this out and studying it..</span>
