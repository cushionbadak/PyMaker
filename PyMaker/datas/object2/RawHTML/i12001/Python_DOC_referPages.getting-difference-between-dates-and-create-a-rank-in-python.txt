<div class="post-text" itemprop="text">
<p>I am building a user system, where each users has a profile page. I run a cron job every week to give points to users based on which ones updated their profile most recently. For this I have between 1-100 points to give. </p>
<p>The idea is for ex: if user <code>A</code> updated their profile today, user <code>A</code> would get <code>100 points</code>, if the profile was updated yesterday it would be <code>99 points</code> and the day before that would be <code>98 points</code> and so on </p>
<p>If any user updated their profile last 100 days ago or more, then the score would be <code>0</code>. </p>
<p>Now, the problem I have is changing the date of <code>updated_on</code> to number. </p>
<p>I have this code, which I am fetching from database, but I am stuck. </p>
<pre><code>updated_on = datetime.datetime.strptime(str(updated_on_date), '%Y-%m-%d %H:%M:%S').date()

if updated_on   .... ?:
    rank  = 100
elif
   ... 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's no need to do <code>str(updated_on_date)</code> since <code>updated_on_date</code> is already a string. I'll assume that these dates are in UTC, since using local times leads to madness. :)</p>
<p>You can get the current datetime in UTC using <code>current_date = datetime.utcnow()</code>. In the code below, I'll just hard-code today's date so that future readers will get the same output that I do.</p>
<p>The <code>datetime</code> module supplies a <code>datetime.timedelta</code> object, which allows you to perform arithmetic with <code>datetime.datetime</code> objects. You can add a <code>timedelta</code> to a <code>datetime</code> to get a new <code>datetime</code>, and if you subtract one <code>datetime</code> from another the result is a <code>timedelta</code>. So it's very easy to get the number of days between two dates.</p>
<pre><code>from datetime import datetime

dates = (
    '2016-03-08 00:00:00',
    '2016-03-07 00:00:00',
    '2016-03-01 00:00:00',
    '2015-11-30 00:00:00',
    '2015-11-29 00:00:00',
    '2015-11-20 00:00:00',
)

#current_date = datetime.utcnow()
current_date = datetime(2016, 3, 8)
print('current', current_date)

for datestr in dates:
    updated_on = datetime.strptime(datestr, '%Y-%m-%d %H:%M:%S')
    delta = (current_date - updated_on).days
    rank = max(0, 100 - delta)
    print('updated', updated_on, 'delta', delta, 'rank', rank) 
</code></pre>
<p><strong>output</strong></p>
<pre><code>current 2016-03-08 00:00:00
updated 2016-03-08 00:00:00 delta 0 rank 100
updated 2016-03-07 00:00:00 delta 1 rank 99
updated 2016-03-01 00:00:00 delta 7 rank 93
updated 2015-11-30 00:00:00 delta 99 rank 1
updated 2015-11-29 00:00:00 delta 100 rank 0
updated 2015-11-20 00:00:00 delta 109 rank 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; from datetime import date
&gt;&gt;&gt; today = date.today()
&gt;&gt;&gt; sample = [date(2015,5,27), date(2016,3,4), date(2015,12,31), today]
&gt;&gt;&gt; for updated_on in sample:
...     delta = today - updated_on
...     rank = max(0, 100 - delta.days)
...     print("updated on: {} -&gt; rank: {}".format(updated_on, rank))
...
updated on: 2015-05-27 -&gt; rank: 0
updated on: 2016-03-04 -&gt; rank: 96
updated on: 2015-12-31 -&gt; rank: 32
updated on: 2016-03-08 -&gt; rank: 100
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using this example you can calculate number of days between two dates:</p>
<pre><code>date1 = datetime.datetime.strptime(str('2016-01-01 23:00:00'), '%Y-%m-%d %H:%M:%S')
date2 = datetime.datetime.strptime(str('2016-03-08 23:00:00'), '%Y-%m-%d %H:%M:%S')
number_of_days = date2 -date1
print(number_of_days.days)
</code></pre>
<p>will print the total number of days between <code>date1</code> and <code>date2</code>.</p>
</div>
<span class="comment-copy">what is the "database"? If you are using a db it sounds like you want to update based on a select</span>
<span class="comment-copy">@PadraicCunningham I am using database (mariadb), I will submit the value of <code>rank</code> to a users table with the user id.</span>
<span class="comment-copy">What kind of object is <code>updated_on_date</code>? Also, is it in UTC?</span>
<span class="comment-copy">It is a date from the database, in this format <code>2014-02-14 12:30:56</code> @PM2Ring</span>
<span class="comment-copy">Can you not add this logic into the db itself?  Update using the timestamp?</span>
<span class="comment-copy">Thanks but, why do you have an array of <code>dates</code>? I have no such thing. I only wanted to give users ranks starting from today.</span>
<span class="comment-copy">Oops, never mind. Forget the above. just one quick question, if I wanted to measure by weeks/months, it would suffice to change <code>.days</code> to <code>.months</code> or <code>.weeks</code> right?</span>
<span class="comment-copy">No and yes. :) Take a look at the <a href="https://docs.python.org/3/library/datetime.html#timedelta-objects" rel="nofollow noreferrer"><code>timedelta</code></a> docs. It does have a <code>.weeks</code> attribute, but it doesn't have a months attribute because that would be impossible, due to month lengths not being constant. A <code>timedelta</code> is a datetime <i>difference</i> and a <code>timedelta</code> spanning several months has no idea of the actual lengths of the months it spans. You <i>can</i> get an approximation though, by dividing the days by 30.6.</span>
<span class="comment-copy">this still does not answer the question. I don't have a range of dates, I only have one date in mind, and that is today. How can I use your <code>for</code> loop with just one day?</span>
