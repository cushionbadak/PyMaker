<div class="post-text" itemprop="text">
<p>Can anyone tell me how i can get my code to  produces the desired outputs below. Cheers</p>
<pre><code>def dict_invert(d):
    inv = {}
    for k, v in d.iteritems():
        keys = inv.setdefault(v, [])
        keys.append(k)
    return inv
</code></pre>
<hr/>
<p>my input1: <code>&gt;&gt;&gt; dict_invert({30000: 30, 600: 30, 2: 10})</code></p>
<p>my output1: <code>&gt;&gt;&gt; {10: [2], 30: [30000, 600]}</code></p>
<h2>desired output1 <code>&gt;&gt;&gt; {10: [2], 30: [600, 30000]}</code></h2>
<p>my input2: <code>&gt;&gt;&gt; dict_invert({0: 9, 9: 9, 5: 9})</code></p>
<p>my output2: <code>&gt;&gt;&gt; {9: [0, 9, 5]}</code></p>
<p><strong>desired output2: <code>&gt;&gt;&gt; {9: [0, 5, 9]}</code></strong></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow"><code>collections.defaultdict</code></a> to group the keys of the input dictionary into lists by the values of the input dictionary:</p>
<pre><code>from collections import defaultdict

def dict_invert(d):
    dd = defaultdict(list)
    for k in d:
        dd[d[k]].append(k)
    return {k:sorted(dd[k]) for k in dd} 

&gt;&gt;&gt; dict_invert({30000: 30, 600: 30, 2: 10})
{10: [2], 30: [600, 30000]}
&gt;&gt;&gt; dict_invert({0: 9, 9: 9, 5: 9})
{9: [0, 5, 9]}
</code></pre>
<p>So, for these examples, this produces the output that you wanted. It's not clear whether you also want the resultant dictionary to be sorted by key. In the examples above, the keys appear sorted, but they are not really because a dictionary has no inherent order.</p>
<pre><code>&gt;&gt;&gt; dict_invert({30000: 30, 600: 30, 2: 10, 1234: -1})
{10: [2], 30: [600, 30000], -1: [1234]}
</code></pre>
<p>If you want the keys to be ordered take a look at <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow"><code>collections.OrderedDict</code></a>.</p>
<pre><code>def dict_invert(d):
    dd = defaultdict(list)
    for k in d:
        dd[d[k]].append(k)
    return OrderedDict(sorted((k, sorted(dd[k])) for k in dd))

&gt;&gt;&gt; dict_invert({30000: 30, 600: 30, 2: 10, 1234: -1})
OrderedDict([(-1, [1234]), (10, [2]), (30, [600, 30000])])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code> function dict_invert(obj){

        var objArr = {};
        for(var key in obj){
            if(!objArr[obj[key]]){
                objArr[obj[key]] = [];

            }
            objArr[obj[key]].push(key);        
        }

        return objArr;

    }
    var objArr = dict_invert({30000: 30, 600: 30, 2: 10});
</code></pre>
</div>
<span class="comment-copy">Please show us what have you tried</span>
<span class="comment-copy">Your question is tagged with <code>javascript</code>?</span>
<span class="comment-copy">Alternatively replace <code>dd[d[k]].append(k)</code> with <code>bisect.insort(dd[d[k]], k)</code> and remove the calls to <code>sorted</code>.</span>
<span class="comment-copy">@Bakuriu: yeah, I briefly thought about that but thought it might confuse. Plus I couldn't be bothered looking it up :)</span>
