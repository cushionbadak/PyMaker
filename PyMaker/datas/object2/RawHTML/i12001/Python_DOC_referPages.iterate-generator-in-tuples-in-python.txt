<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/5764782/iterate-through-pairs-of-items-in-a-python-list">Iterate through pairs of items in a Python list [duplicate]</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>Suppose I have a list</p>
<pre><code>xs = [0,1,2,3]
[some_function(current, next) for current, next in zip(xs, xs[1:])]
</code></pre>
<p>I want to iterate over pairs (current, next) of this list. To clarify zip creates list [(0,1), (1,2), (2,3)]</p>
<p>The problem is that if xs is a generator instead of list to achieve this with zip I would need to create a list from it and it is surely not the optimal solution.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.tee" rel="nofollow"><code>itertools.tee(iterable, n=2)</code></a> which creates multiple independent iterators from one iterator.</p>
<pre><code>my_iter, next_iter = tee(myiter)
next(nextiter)

[some_function(current, ne) for current, ne in zip(myiter, nextiter)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This would work in case of infinite iterators etc.</p>
<pre><code>def pairwise(iterator):
    """Iterate over pairs of an iterator."""
    last = next(iterator)
    while True:
        this = next(iterator)
        yield last, this
        last = this
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can first transform the iterator into a list (if you are sure iterator can't be infinite):</p>
<pre><code>xs = list(xs)
[some_function(current, next) for current, next in zip(xs, xs[1:])]
</code></pre>
</div>
<span class="comment-copy">Despite the fact the proposed dupe says its input is a list, and this says the input <i>isn't</i> a list, the answer using <code>itertools.tee</code> is the same.</span>
<span class="comment-copy">Neat, I didn't know that existed</span>
<span class="comment-copy">I thought about that, but this will be slightly more complicated if you need itertate in triples, tuple of size n etc.</span>
<span class="comment-copy">@user1685095 Then you could use a <code>deque</code> with <code>maxsize</code> set to n. But just use the other answer, I didn't know about <code>itertools.tee</code>.</span>
<span class="comment-copy">That might work in this case, but what about infinite iterators?</span>
<span class="comment-copy">He said that he knew that he could do that.  He said <i>it is surely not the optimal solution.</i></span>
<span class="comment-copy">@L3viathan right</span>
