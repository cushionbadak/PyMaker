<div class="post-text" itemprop="text">
<p>This currently works for what I'm trying to do (where 'i' is the number I'm checking to see if it is in the 'digit'):</p>
<pre><code>if str(digit) in str(i):
    count += 1
</code></pre>
<p>However, when I try to use an if comprehension I get an invalid syntax:</p>
<pre><code>count = [count + 1 if str(digit) in str(i)]
</code></pre>
<p>I've tried it several different ways using just [count +=1 if...] and count = [count + 1 if...]</p>
<p>Can anyone provide some insight into this issue?</p>
</div>
<div class="post-text" itemprop="text">
<p>List comprehension (with square brackets) is used to generate list. But, in your case, you are not really generating any list. However, if you are trying to write an inline if, try - </p>
<pre><code>count = count + 1 if str(digit) in str(i) else count
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There currently is nothing wrong with the way you are doing it now. Just want to point that out. If you are simply trying to do this in one line, maybe <a href="https://stackoverflow.com/a/35930946/1832539">this</a> solution is what you are looking for.  </p>
<p>But to answer your comprehension issue: </p>
<p>You have two problems going on here that I'd like to point out. </p>
<ol>
<li><p>You should not check if you have a digit in your string by trying to cast it to <code>str</code>. Simply use <a href="https://docs.python.org/3/library/stdtypes.html#str.isdigit" rel="nofollow noreferrer">isdigit</a> against the character you are checking.</p></li>
<li><p>You cannot use a comprehension the way you are trying to use it. What you have to understand about a comprehension, is that you are creating a new list and taking that new list and assigning it to a variable (in your case <code>count</code>). So doing this: </p>
<p>count = [count + 1....]</p></li>
</ol>
<p>Really does not make much sense to do. </p>
<p>What you should do instead if you are looking to do this in a comprehension,</p>
<p>Iterate over each character in <code>a</code>, for each character, check if it is a digit:</p>
<pre><code>[c.isdigit() for c in a]
</code></pre>
<p>Now, with that above part done. You will have a list of 1s for all digits in your word. The next step is to <code>sum</code> everything together. Now, the extra bit of information to pay attention to, is that when calling <code>sum</code> on this, we will <em>lose</em> the square brackets, because we will instead use what is called a <a href="https://www.python.org/dev/peps/pep-0289/" rel="nofollow noreferrer">generator expression</a>.</p>
<p>So, with all that said and done. Your final solution is:</p>
<pre><code>a = "fjf7jjjf77773jf3j"


print(sum(c.isdigit() for c in a))

# outputs 7
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can just sum the boolean value from <code>character.isdigit()</code> where character is each character in the string. </p>
<p>Consider:</p>
<pre><code>&gt;&gt;&gt; s='abc123def456'
&gt;&gt;&gt; [c.isdigit() for c in s]
[False, False, False, True, True, True, False, False, False, True, True, True]
&gt;&gt;&gt; sum(c.isdigit() for c in s)
6
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure why you would want to get a list in this case because in your first example, you simply incremented an integer variable called <code>count</code>. If you're looking for something more nuanced, you could try using a function like this:</p>
<pre><code>def count_letter_instance(string="", letter=""):
    return sum([1 for x in string if x == letter])

print(count_letter_instance("hello hello hello", "h"))
print(count_letter_instance("cat cat cat", "c"))
</code></pre>
<p>Output:</p>
<pre><code>3
3
</code></pre>
</div>
<span class="comment-copy">What do you want to do with the comprehension?  In the first case, <code>count</code> is an <code>int</code>.  In the second <code>count</code> would be a <code>list</code>.  They are not the same, so it's not clear what you want to do.</span>
<span class="comment-copy"><a href="http://python-3-patterns-idioms-test.readthedocs.org/en/latest/Comprehensions.html" rel="nofollow noreferrer">List comprehension syntax</a>. What are you actually trying to do?</span>
<span class="comment-copy">In the first example, you increment <code>count</code>, which is an integer, but in the second example, you try to return <code>count</code>, which is a list. Why do you want to use a list over an integer?</span>
<span class="comment-copy">Comprehensions create lists, I see where you're trying to go with this but it's not the way the syntax works. Read the article Kupiakos posted.</span>
<span class="comment-copy">I notice you write "use an if comprehension"... an "if comprehension" is not a thing in Python... are you referring to an inline if statement, like <code>count = count + 1 if str(digit) in str(i) else count</code>?</span>
<span class="comment-copy">That isn't really a list comprehension.  It's a generator expression.  Not that there's anything wrong with that, but you aren't giving <code>sum()</code> a list; you are giving it a generator.</span>
<span class="comment-copy">@zondo Yes I'm aware of that. I didn't mention it in my solution. But I put that detail in to reference documentation to read more in to it. Good with you?</span>
<span class="comment-copy">Excellent.  Now +1 ;)</span>
