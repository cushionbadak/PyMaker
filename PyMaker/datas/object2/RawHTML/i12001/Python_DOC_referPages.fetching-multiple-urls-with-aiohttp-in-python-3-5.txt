<div class="post-text" itemprop="text">
<p>Since Python 3.5 introduced <code>async with</code> the syntax recommended in the <a href="http://aiohttp.readthedocs.org/en/stable/" rel="noreferrer">docs</a> for <a href="https://pypi.python.org/pypi/aiohttp" rel="noreferrer"><code>aiohttp</code></a> has changed. Now to get a single url they suggest:</p>
<pre><code>import aiohttp
import asyncio

async def fetch(session, url):
    with aiohttp.Timeout(10):
        async with session.get(url) as response:
            return await response.text()

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    with aiohttp.ClientSession(loop=loop) as session:
        html = loop.run_until_complete(
            fetch(session, 'http://python.org'))
        print(html)
</code></pre>
<p>How can I modify this to fetch a collection of urls instead of just one url?</p>
<p>In the old <code>asyncio</code> examples you would set up a list of tasks such as</p>
<pre><code>    tasks = [
            fetch(session, 'http://cnn.com'),
            fetch(session, 'http://google.com'),
            fetch(session, 'http://twitter.com')
            ]
</code></pre>
<p>I tried to combine a list like this with the approach above but failed.</p>
</div>
<div class="post-text" itemprop="text">
<p>For parallel execution you need an <a href="https://docs.python.org/3/library/asyncio-task.html#task" rel="noreferrer">asyncio.Task</a></p>
<p>I've converted your example to concurrent data fetching from several sources:</p>
<pre><code>import aiohttp
import asyncio

async def fetch(session, url):
    async with session.get(url) as response:
        if response.status != 200:
            response.raise_for_status()
        return await response.text()

async def fetch_all(session, urls):
    results = await asyncio.gather(*[asyncio.create_task(fetch(session, url))
                                   for url in urls])
    return results

async def main():    
    urls = ['http://cnn.com',
            'http://google.com',
            'http://twitter.com']
    async with aiohttp.ClientSession() as session:
        htmls = await fetch_all(session, urls)
        print(htmls)

if __name__ == '__main__':
    asyncio.run(main())
</code></pre>
</div>
<span class="comment-copy">Could you explain what is your fail?</span>
<span class="comment-copy">@AndrewSvetlov Wonderful to hear from you. What I mean is I could not understand how to do it. When I define a list of tasks then use <code>results = loop.run_until_complete(tasks)</code> I get a runtime error. <code>async with</code> is such a new feature with so little literature that it would be super convenient for people learning to use it if the <code>aiohttp</code> doc showed an example of grabbing more than one url. The library looks terrific, just needing a bit of hand-holding to get started. Thank you!</span>
<span class="comment-copy">Thanks a million! Accepting your answer, but... 1. there's still a typo with the placement of the parenthesis. I'll edit it if you don't mind. 2. It looks to me like to print the actual result the line <code>print(html)</code> is deceiving and you actually need something like <code>print('\n'.join(list((str(some_task._result) for some_tuple in html for some_task in some_tuple))))</code>, maybe that could be added to the answer? 3. This seems really useful, I'd recommend adding something like this to readthedocs. Thanks again! :)</span>
<span class="comment-copy">Andrew, where can I put a test like <code>if response.status == 200</code>? If one url does not exist, the script breaks, and I am not understanding where to check the response within the <code>async with session.get(url) as response: return await response.text()</code></span>
<span class="comment-copy">Thank you to the other person who left a comment before. I have started a <a href="http://stackoverflow.com/questions/35926917/fetching-multiple-urls-with-aiohttp-handling-errors">new question</a> to clarify this.</span>
<span class="comment-copy">aiohttp.ClientSession(loop=loop)  is not valid syntax anymore I get error: <code>Use async with instead</code> could you please update the answer to reflect the changes</span>
<span class="comment-copy">Updated to aiohttp 3.x and python 3.7 usage</span>
