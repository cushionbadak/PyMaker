<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/588004/is-floating-point-math-broken">Is floating point math broken?</a>
<span class="question-originals-answer-count">
                    28 answers
                </span>
</li>
</ul>
</div>
<p>Python script seems to do incorrect arithmetics.</p>
<pre><code>import _thread
import time

def mult(pixel : int, multiplier : tuple) -&gt; float:
    "multiplies either r,g,b pixel by row vector (0.257, 0.504, 0.098),(-0.148,-0.291,0.439),(0.439,-0.368,-0.071))"

    sum=0
    for mul in multiplier:
        sum += (pixel * mul)
        print(sum)
    return sum

redMul = [0.257, 0.504,0.098]
greenMul = [-0.148, -0.291, 0.439]
blueMul = [0.439, -0.368,-0.071]

redAdd = 16
greenAdd = 128
blueAdd = 128

try:
   _thread.start_new_thread(mult,(1,blueMul))
except:
    print("Error: unable to start thread")
</code></pre>
<p>code outputs:</p>
<pre><code>0.439
0.07100000000000001
1.3877787807814457e-17
</code></pre>
<p>when expecting:</p>
<pre><code>0.439 
0.071
0
</code></pre>
<p>What is the cause of this error and how can i resolve it?</p>
</div>
<div class="post-text" itemprop="text">
<p>The Python script does not do incorrect arithmetic, it is just the way floating-point arithmetic is.</p>
<p>The main principle you need to be aware of when using <code>float</code> (double floating point precision in Python) is that it is an <em>approximation</em> of the actual value. Unless the value is having denominator of power 2 - like 1, 2, 4, 0.5, 0.25, etc, the value cannot be exactly represented by <code>float</code>. It is always <em>approximation</em>, up to the 15/16-th digit.</p>
<p>Thus all your results:</p>
<pre><code>0.439
0.07100000000000001
1.3877787807814457e-17
</code></pre>
<p>Are correct... up to the 15/16th significant digit, that is:</p>
<pre><code>0.439
0.0710000000000000
0.000000000000000 #(thus you have 1 e-17 as your 17-th digit)
</code></pre>
<p><code>float</code> does not guarantee precision beyond the 15-th/16-th digit</p>
<p>If you really need higher precision than 15-16-th digit, consider using <code>decimal</code></p>
</div>
<div class="post-text" itemprop="text">
<p><code>sum = round(sum, 3))</code></p>
<p>limit float to 3 decimal points, and then do the arithmetic </p>
<pre><code>def mult(pixel : int, multiplier : tuple) -&gt; float:
    "multiplies either r,g,b pixel by row vector (0.257, 0.504, 0.098),(-0.148,-0.291,0.439),(0.439,-0.368,-0.071))"

    sum=0
    for mul in multiplier:
        sum += (pixel * mul)
        sum = round(sum, 3)
        print(sum)
    return sum
</code></pre>
</div>
<span class="comment-copy">Floating point math: <a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/floatingpoint.html</a></span>
<span class="comment-copy">Adjust your expectations or use the function <code>round()</code> on the final results if you only want a few decimal places of accuracy.</span>
<span class="comment-copy">round(sum,3) rounds sum to 3dp, what does the rest of your solution add?</span>
<span class="comment-copy">that's all i added.</span>
<span class="comment-copy">im refering to the " float("{0:.3f}".format()) "</span>
<span class="comment-copy">@LouAnimashaun I modified the code. that's for string formatting. it is useless in this case</span>
