<div class="post-text" itemprop="text">
<p>I have a .csv that I need to make look like a specifically formatted dictionary and I cannot wrap my head around the loop necessary to do this the way I need. For an example, these three rows (row[0] is the header with my labels) that currently look like:</p>
<pre><code>0 outlook,temperature,humidity,windy,result
1 overcast,hot,high,FALSE,yes
2 overcast,cool,normal,TRUE,yes
...
</code></pre>
<p>Should look like:</p>
<pre><code> {"outlook":"overcast", "temperature":"hot", "humidity":"high","windy":"FALSE","result":"yes"},
 {"outlook":"overcast", "temperature":"cool", "humidity":"normal","windy":"TRUE","result":"yes"},
 ...
</code></pre>
<p>Once they've been processed and cleaned up. I have it close but not quite right using dictionaries. I've been messing with pandas and import csv and I'm starting to lose track of what the best way to do this in Py3 is.</p>
<p>Thanks for any help. It's much appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/csv.html#csv.DictReader" rel="nofollow"><code>DictReader</code></a>:</p>
<blockquote>
<p>Create an object which operates like a regular reader but maps the information read into a dict whose keys are given by the optional
  fieldnames parameter. The fieldnames parameter is a sequence whose
  elements are associated with the fields of the input data in order.
  These elements become the keys of the resulting dictionary. If the
  fieldnames parameter is omitted, the values in the first row of the
  csvfile will be used as the fieldnames.</p>
</blockquote>
<p>So a sample code would be:</p>
<pre><code>import csv
with open('temperature.csv') as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
        print(row)
        ...
</code></pre>
<p>that will print</p>
<pre><code>{"outlook":"overcast", "temperature":"hot", "humidity":"high","windy":"FALSE","result":"yes"},
...
</code></pre>
</div>
<span class="comment-copy">This was perfect, the thing I was looking for. I ran across it a million times too of course but it never clicked.   Any idea why it's showing the last row as the first attribute in the dictionary like so: {'result': 'yes', 'outlook': 'sunny', 'humidity': 'normal', 'temperature': 'mild', 'windy': 'TRUE'} ?</span>
<span class="comment-copy">That's because <code>dict</code>s are not sorted, you cannot guarantee the ordering of keys. It won't affect your use, though. You can convert your result into an <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>OrderedDict</code></a> and sort afterwards.</span>
<span class="comment-copy">Much appreciated, thank you.</span>
