<div class="post-text" itemprop="text">
<p>Let's say I have a long block of text (saved in notepad), 326 characters long.</p>
<blockquote>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam et nibh augue. Sed dignissim eu odio nec efficitur. Nulla aliquam imperdiet ipsum, eu mollis lacus cursus quis. Nulla dictum sem sem in auctor erat imperdiet sed suscipit elit ut lacus vestibulum  vitae consequat risus volutpat. Suspendisse suscipit velit id.</p>
</blockquote>
<p>I want it to say this:</p>
<pre><code>Lorem ipsum dolor sit amet,
consectetur adipiscing elit.
Nam et nibh augue.
Sed dignissim eu odio nec efficitur.
Nulla aliquam imperdiet ipsum,
eu mollis lacus cursus quis.
Nulla dictum sem sem in auctor erat imperdiet sed suscipit
elit ut lacus vestibulum vitae consequat risus volutpat.
Suspendisse suscipit velit id.
</code></pre>
<p>The steps I want it to take:</p>
<ul>
<li><p>If there is a period, add a new line.</p></li>
<li><p>If there is a comma, add a new line.</p></li>
<li><p>If the line is still too long (eg above 60 characters) add a new line at the next space.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>This will do:</p>
<pre><code>s = """Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam et nibh augue. Sed dignissim eu odio nec efficitur. Nulla aliquam imperdiet ipsum, eu mollis lacus cursus quis. Nulla dictum sem sem in auctor erat imperdiet sed suscipit elit ut lacus vestibulum vitae consequat risus volutpat. Suspendisse suscipit velit id."""
result = "\n".join(re.findall(r"(.{,59}?(?:,|\.)|.{58}\S*)\s*", s))
print(result)
</code></pre>
<p>result:</p>
<pre><code>Lorem ipsum dolor sit amet,
consectetur adipiscing elit.
Nam et nibh augue.
Sed dignissim eu odio nec efficitur.
Nulla aliquam imperdiet ipsum,
eu mollis lacus cursus quis.
Nulla dictum sem sem in auctor erat imperdiet sed suscipit
elit ut lacus vestibulum vitae consequat risus volutpat.
Suspendisse suscipit velit id.
</code></pre>
<p><a href="https://docs.python.org/3.5/library/re.html" rel="nofollow"><code>re</code></a> explanation:</p>
<p><code>.{,59}?(?:,|\.)</code> matches any <code>,</code> or <code>.</code> that has less than 59 characters before it. <code>.{58}\S*</code> matches anything that has more than 58 chars till the next word.
In the end, <code>\s*</code> matches any empty space in order to trim it off.</p>
</div>
<div class="post-text" itemprop="text">
<p>A solution using native Python code would be to use <code>replace</code> for the first case, and then word wrap after. Using regex through <code>re</code> is probably more efficient, but this is far more readable to anyone trying to understand your code. It's also much longer, I don't know if you care about that. Anyway, here's my solution:</p>
<pre><code>def wordwrap(text, limit=60):
    """Just a function to wrap words to line length 60."""
    words = text.split(" ")
    lines_out = [words[0]]
    for word in words[1:]:
        last_line = lines_out[-1]
        if len(last_line)+len(word) &gt; limit:
            lines_out.append(word)
        else:
            lines_out[-1] = last_line+" "+word
    return "\n".join(lines_out)


def process(int):
    """Process your input to follow all you rules"""
    # Add newlines after commas and periods
    inp = inp.replace(".", ".\n").replace(",", ",\n")

    lines = inp.split("\n")
    lines = [l.strip() for l in lines]  # Remove any spaces before lines

    # Wrap remaining lines
    lines = [wordwrap(l) for l in lines]
    return "\n".join(lines)

# A test.
if __name__ == "__main__":
    text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam et nibh augue. Sed dignissim eu odio nec efficitur. Nulla aliquam imperdiet ipsum, eu mollis lacus cursus quis. Nulla dictum sem sem in auctor erat imperdiet sed suscipit elit ut lacus vestibulum vitae consequat risus volutpat. Suspendisse suscipit velit id."
    print process(text)
</code></pre>
</div>
<span class="comment-copy">Have a look at the python module <a href="https://docs.python.org/2/library/re.html" rel="nofollow noreferrer"><code>re</code></a>, especially at <a href="https://docs.python.org/2/library/re.html#re.sub" rel="nofollow noreferrer"><code>re.sub</code></a>.</span>
<span class="comment-copy">Yes, also see <a href="http://stackoverflow.com/questions/4427542/how-to-do-sed-like-text-replace-with-python" title="how to do sed like text replace with python">stackoverflow.com/questions/4427542/â€¦</a></span>
<span class="comment-copy">If all you want to do is wrap a long string of text to a given width, the standard library's <a href="https://docs.python.org/3/library/textwrap.html" rel="nofollow noreferrer"><code>textwrap</code> module</a> will do it for you.  If you have to meet those <i>exact</i> requirements (for a homework assignment?), then you'll have to create your own function.</span>
