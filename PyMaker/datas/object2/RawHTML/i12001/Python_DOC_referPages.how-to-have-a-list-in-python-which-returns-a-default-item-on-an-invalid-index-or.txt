<div class="post-text" itemprop="text">
<p>I am trying to create a custom python shell where I initialize some objects on startup. Those objects could be individual items or list. the user of the shell could then call methods from those objects to perform some functions:</p>
<p>For Ex, this code is run on the start of the python shell:</p>
<pre><code># Init the objects on startup of shell
if NeedObjList:
    a = [ObjClass(x,y,z) ObjClass(p,q,r)]
else:
    a = ObjClass(x, y, z)
</code></pre>
<p>Now in the shell, user will have to know that the initialized variable 'a' is a list or a class object. There can be a message displayed on startup of the python shell. But in case it is not seen, user might try to access the variable as a list when it was an object and vice versa.</p>
<p>I was wondering if the list itself can be created as a smart list. i.e. if the user supplies an index to the list, the object at the index is returned. Otherwise in case of an invalid index or no index being given, the list returns the 0th element (or any fixed element for that matter) </p>
<p>An example of the use case:</p>
<pre><code>class example:
     def __init__(self):
             self.a=1
             self.b=2
     def cl_print(self):
             print "works : {0} {1}".format(self.a, self.b)

if NeedObjList:
    a = [example() example()]
else:
    a = example()
</code></pre>
<p>Now in the shell, this file is imported on start (using "python -i"):</p>
<p>Case 1: Object list was created</p>
<pre><code>&gt;&gt;&gt;a[0].cl_print()
works : 1 2
&gt;&gt;&gt; a.cl_print() # will fail
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'list' object has no attribute 'cl_print'
</code></pre>
<p>Case 2: Object was created</p>
<pre><code>&gt;&gt;&gt; a.cl_print()
works : 1 2
&gt;&gt;&gt; a[0].cl_print()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: hello instance has no attribute '__getitem__'
</code></pre>
<p>I wanted to try and see if I could make things work for user without them having to do a try-except.</p>
</div>
<div class="post-text" itemprop="text">
<p>Making <a href="https://docs.python.org/3/reference/datamodel.html?highlight=__getitem__#object.__getitem__" rel="nofollow"><code>__getitem__()</code></a> return the instance:</p>
<pre><code>class Example(object):
    def __init__(self):
        self.a=1
        self.b=2
    def cl_print(self):
        print("works : {0} {1}".format(self.a, self.b))
    def __getitem__(self, item):
        return self
</code></pre>
<p>and delegating attribute lookup of not found attributes to
the first list member with <a href="https://docs.python.org/3/reference/datamodel.html?highlight=__getattr__#object.__getattr__" rel="nofollow"><code>__getattr__()</code></a> would work:</p>
<pre><code>class MyList(list):
    def __getattr__(self, attr):
        return getattr(self[0], attr)
</code></pre>
<p>With a list:</p>
<pre><code>&gt;&gt;&gt; a = MyList([Example(), Example()])
&gt;&gt;&gt; a.cl_print()
works : 1 2
&gt;&gt;&gt; a[0].cl_print()
works : 1 2
</code></pre>
<p>With an instance:</p>
<pre><code>&gt;&gt;&gt; a = Example()
&gt;&gt;&gt; a.cl_print()
works : 1 2
&gt;&gt;&gt; a[0].cl_print()
works : 1 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can implement <code>__iter__</code>, <code>__len__</code>, and <code>__getitem__</code> on your <code>ObjClass</code> to make it act like a list of one item:</p>
<pre><code>class ObjClass(object):

    def __iter__(self):
        yield self

    def __len__(self):
        return 1    

    def __getitem__(self, i):
        if i == 0: return self
        raise IndexError("list index out of range")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use try ... except:</p>
<pre><code>    tokens=['aaaa', 'bbb', 'ccc', 'ddd', 'eee']
    try: 
        a = tokens[N]
    except IndexError: 
        a = tokens[0]
</code></pre>
<p>If N-th element exists in list, then it will be returned, otherwise 0 element (or some other) will be returned.</p>
</div>
<span class="comment-copy">Could you show what you imagine one of these shell interactions would look like? I think all you need is to try and catch what is called a 'KeyError' and if there is a 'KeyError' return the 0th element. If there is no 0th element than you still have to return a key error or default value.</span>
<span class="comment-copy">Added the shell commands by the user. The user may not realize that the initialized objects are a list or object.</span>
<span class="comment-copy">So just to understand better: <b>getitem</b> solves Case 2 and <b>getattr</b> solves case 1</span>
<span class="comment-copy">Yes, you can put it this way.</span>
