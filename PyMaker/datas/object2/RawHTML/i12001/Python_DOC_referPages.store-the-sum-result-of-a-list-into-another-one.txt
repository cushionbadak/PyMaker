<div class="post-text" itemprop="text">
<p>I'm trying to sum the elements of a list and then store the result of each sum in another list.</p>
<p>So far I have this:</p>
<pre><code>array1 = [1, 2, 3, 4]    
print(sum(int(i) for i in array1))
</code></pre>
<p>The output is 10.</p>
<p>But what I'm trying to do is something like this:</p>
<pre><code>input = [1, 2, 3, 4]    
output = [1, 3, 6, 10]
</code></pre>
<p>Do I need to store the value into the second list in each step?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're running Python 3.2 or higher, there is already a function for this, <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow"><code>itertools.accumulate</code></a>:</p>
<pre><code>import itertools

input = [1,2,3,4]  

output = list(itertools.accumulate(input))
</code></pre>
<p>If you're on a pre-3.2 version of Python, you can always borrow the equivalent code given in the <code>accumulate</code> documentation:</p>
<pre><code>def accumulate(iterable, func=operator.add):
    'Return running totals'
    # accumulate([1,2,3,4,5]) --&gt; 1 3 6 10 15
    # accumulate([1,2,3,4,5], operator.mul) --&gt; 1 2 6 24 120
    it = iter(iterable)
    try:
        total = next(it)
    except StopIteration:
        return
    yield total
    for element in it:
        total = func(total, element)
        yield total
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using a list comprehension is probably not the easiest way.  You could do this:</p>
<pre><code>input = [1, 2, 3, 4]
output = []
total = 0
for i in input:
    total += i
    output.append(total)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This does what you want, but is maybe not that good to understand...</p>
<pre><code>output = [sum(array1[:i+1]) for i in range(len(array1))]
</code></pre>
<p>You can also do it like this (which should be easier to understand):</p>
<pre><code>i = 0
output = []
for item in array1:
    i += item
    output.append(i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You might numpy useful if you are doing a lot if numeric operations, the <a href="http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.cumsum.html" rel="nofollow">cumsum</a> method would do what you want here:</p>
<pre><code>In [11]: import numpy as np

In [12]: array1 = np.array([1, 2, 3, 4])

In [13]: array1.cumsum()
Out[13]: array([ 1,  3,  6, 10])
</code></pre>
<p>It is easy to apply the same logic using python:</p>
<pre><code>def cumsum(l):
    it = iter(l)
    sm = next(it, 0)
    yield sm
    for i in it:
        sm += i
        yield sm
</code></pre>
<p>Demo:</p>
<pre><code>In [16]: array1 = [1, 2, 3, 4]

In [17]: list(cumsum(array1))
Out[17]: [1, 3, 6, 10]
</code></pre>
</div>
<span class="comment-copy">didn't know about that, thanks!</span>
<span class="comment-copy">Thanks, so the deal here is to append each result into a new array(total), It is very clear now.</span>
