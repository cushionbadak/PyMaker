<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/7546285/creating-lambda-inside-a-loop">Creating lambda inside a loop [duplicate]</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I'm encountering some strange behavior with lambda functions in a loop in python. When I try to assign lambda functions to dictionary entries in a list, and when other entries in the dictionary are used in the function, only the last time through the loop is the lambda operator evaluated.  So all of the functions end up having the same value!</p>
<p>Below is stripped-down code that captures just the parts of what I'm trying that is behaving oddly.  My actual code is more complex, not as trivial as this, so I'm looking for an explanation and, preferably, a workaround.</p>
<pre><code>n=4
numbers=range(n)
entries = [dict() for x in numbers]

for number, entry in zip(numbers,entries):
    n = number
    entry["number"] = n
    entry["number2"] = lambda x: n*1

for number in numbers:
    print(entries[number]["number"], entries[number]["number2"](2))
</code></pre>
<p>The output is:</p>
<pre><code>0 3
1 3
2 3
3 3
</code></pre>
<p>In other words, the dictionary entires that are just integers are fine, and were filled properly by the loop.  But the lambda functions — which are trivial and should just return the same value as the "number" entries — are <em>all</em> set to the last pass through.</p>
<p>What's going on?</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this</p>
<pre><code>N=4
numbers=range(N)
entries = [dict() for x in numbers]

for number, entry in zip(numbers,entries):
    entry["number"] = number
    entry["number2"] = lambda x,n=number: n*1

for number in numbers:
    print(entries[number]["number"], entries[number]["number2"](2))
</code></pre>
<p>It prints (python3)</p>
<pre><code>0 0
1 1
2 2
3 3
</code></pre>
<p>To avoid confusion, <code>n</code> referred to different things in your code.  I used it only at one place.</p>
<p>It is a closure problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>By the end of your <code>for</code> loop, the <code>n</code> variable - which, unlike in static languages such as C#, is set to <code>3</code>, which is then being accessed in the lambda expression. The variable value is not fixed; as <a href="https://stackoverflow.com/a/36025181/5402030">another answer</a> on the site points out, lambda expressions are fluid and will retain references to the variables involved instead of capturing the values at the time of creation. <a href="https://stackoverflow.com/questions/2295290/what-do-lambda-function-closures-capture-in-python">This question</a> also discusses your issue.</p>
<p>To fix it, you need to give the lambdas new, local variable via default parameters:</p>
<pre><code>entry["number2"] = lambda x, n=n: n*1
</code></pre>
<p>This creates a new variable in the lambda's scope, called n, which sets its default value to the "outside" value of n. Note that this is the solution endorsed by the <a href="https://docs.python.org/3/faq/programming.html#why-do-lambdas-defined-in-a-loop-with-different-values-all-return-the-same-result" rel="nofollow noreferrer">official FAQ</a>, as <a href="https://stackoverflow.com/a/2295372/5402030">this answer</a> by Adrien Plisson states.</p>
<p>Now, you can call your lambda like normal and ignore the optional parameter, with no ill effect.</p>
<p><strong>EDIT:</strong> As originally stated by Sci Prog, this solution makes <code>n = number</code> redundant. Your final code will look similar to this:</p>
<pre><code>lim = 4
numbers = range(lim)
entries = [dict() for x in numbers]

for number, entry in zip(numbers, entries):
    entry["number"] = number
    entry["number2"] = lambda x, n = number: n*1

for number in numbers:
    print(entries[number]["number"], entries[number]["number2"](2))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are probably reaching the problem that the method is created as referencing a variable <code>n</code>.  The function is only evaluated after the loop so you are going to call the function which references <code>n</code>.  If you're ok with having the function evaluated at the time of assignment you could put a function call around it:</p>
<pre><code> (lambda x: n*1)(2)
</code></pre>
<p>or if you want to have the functions to use, have them reference the specific value you want.  From your code you could use a default argument as a workaround:</p>
<pre><code>entry["number"] = n
entry["number2"] = lambda x, n=n: n*1
</code></pre>
<p>The difference comes down to a question of memory addressing.  I imagine it went something like this:</p>
<pre><code>You:     Python, please give me a variable called "n"
Python:  Ok!  Here it is, it is at memory slot 1
You:     Cool!  I will now create functions which say take that variable "n"
         value (at memory slot 1) and multiply it by 1 and return that to me.
Python:  Ok! Got it:
             1. Take the value at memory slot 1.
             2. Multiply by 1.
             3. Return it to you.
You:     Done with my looping, now evaluate those instructions!
Python:  Ok!  Now I will take the value of at memory slot 1 and multiply by 1 
         and give that to you.
You:     Hey, I wanted each function to reference different values!
Python:  I followed your instructions exactly!
</code></pre>
</div>
<span class="comment-copy">You also got an answer for BHustus while I was typing mine.  I upvoted his answer.</span>
<span class="comment-copy">+1 for pointing out the redundancy of still using n in this solution. Mind if I rework my answer to reflect it?</span>
<span class="comment-copy">No problem, go ahead.  It improves clarity.</span>
<span class="comment-copy">Thanks. If I infringed too much on you feel free to tell me and I'll scale it back. :)</span>
<span class="comment-copy">good answer, although I would remove the comment:  "# Optional: del lim unless it will be necessary later".  I don't see the need to unbind the <code>lim</code> reference from the global namespace here.  Except for some oddball cases, <code>del</code> is generally considered bad style and not used.  For a trivial script like this, unbinding a single reference to an integer would be unconventional and unpythonic.</span>
<span class="comment-copy">Not gonna pretend to know anything about the high-level python conventions. most of my python knowledge is as a hobbyist. Thanks.</span>
