<div class="post-text" itemprop="text">
<p>Does converting from the mutable <code>bytearray</code> type to the non-mutable <code>bytes</code> type incur a copy? Is there any cost associated with it, or does the interpreter just treat it as an immutable byte sequence, like casting a <code>char*</code> to a <code>const char* const</code> in C++?</p>
<pre><code>ba = bytearray()
ba.extend("some big long string".encode('utf-8'))

# Is this conversion free or expensive?
write_bytes(bytes(ba))
</code></pre>
<p>Does this differ between Python 3 where <code>bytes</code> is its own type and Python 2.7 where <code>bytes</code> is just an alias for <code>str</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>A new copy is created, the buffer is not shared between the <code>bytesarray</code> and the new <code>bytes</code> object, in either Python 2 or 3.</p>
<p>You couldn't share it, as the <code>bytesarray</code> object could still be referenced elsewhere and mutate the value.</p>
<p>For the details, see the <a href="https://hg.python.org/cpython/file/v3.5.1/Objects/bytesobject.c#l3257"><code>bytesobject.c</code> source code</a>, where the <a href="https://docs.python.org/3/c-api/buffer.html">buffer protocol</a> is used to create a straight up copy of the data (via <a href="https://hg.python.org/cpython/file/v3.5.1/Objects/memoryobject.c#l970"><code>PyBuffer_ToContiguous()</code></a>). </p>
</div>
<div class="post-text" itemprop="text">
<p>Martjin is right. I just wanted to back that answer up with the cpython source.</p>
<p>Looking at the source for bytes <a href="https://github.com/python/cpython/blob/master/Objects/bytesobject.c" rel="noreferrer">here</a>, first <code>bytes_new</code> is called, which will call <code>PyBytes_FromObject</code>, which will call <code>_PyBytes_FromBuffer</code>, which creates a new bytes object and calls <code>PyBuffer_ToContiguous</code> (defined <a href="https://github.com/python/cpython/blob/master/Objects/memoryobject.c" rel="noreferrer">here</a>). This calls <code>buffer_to_contiguous</code>, which is a memory copy function. The comment for the function reads:</p>
<blockquote>
<p>Copy src to a contiguous representation. order is one of 'C', 'F' (Fortran) or 'A' (Any). Assumptions: src has PyBUF_FULL information, src-&gt;ndim &gt;= 1, len(mem) == src-&gt;len.</p>
</blockquote>
<p>Thus, a call to bytes with a bytearray argument will copy the data.</p>
</div>
<span class="comment-copy">All operations involve <i>some</i> cost. You could look at the source, or you can use timing tests to see if the time increases linearly with the problem size (as would happen if a copy was made).</span>
<span class="comment-copy">I'm fairly sure that converting <code>bytearray</code> to <code>bytes</code> incurs a copy. This is because if the new <code>bytes</code> points to the same backing array as the <code>bytearray</code>, then it wouldn't be truly immutable.</span>
<span class="comment-copy">Note that if you want a view on the contents of a <code>bytearray</code> without making a copy, you <i>can</i> use a <code>memoryview</code> for the purpose. The caveat is that changes to the <code>bytearray</code> data will change the data in the <code>memoryview</code>, and that the <code>bytearray</code> cannot be resized (no <code>append</code>s, <code>pop</code>s, resizing slice assignments, etc.) for as long as any exported buffers (of which <code>memoryview</code> is the most common type created in Python level code) exist.</span>
