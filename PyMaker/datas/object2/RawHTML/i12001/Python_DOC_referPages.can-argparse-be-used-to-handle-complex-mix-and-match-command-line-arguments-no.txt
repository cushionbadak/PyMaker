<div class="post-text" itemprop="text">
<p>I am converting a shell script into Python. </p>
<p>The shell script supports arguments like this.</p>
<pre><code>Usage: foo [-h] [-v] [COMMAND] [COMMAND_ARG]...

One or more of the following commands may be specified in the same
command line invocation of this script.

Commands:
  print            Print lines in CSV.
  search PATTERN   Print only lines that match PATTERN.
  remove PATTERN   Remove all lines that match PATTERN.
  convert          Convert CSV file to XLS file.
  limit N          Show a maximum of N results (default 10).
  all              Do not limit lines.

Options:
  -h, --help       Show help.
  -v, --version    Show version.
</code></pre>
<p>One or more arguments listed in the 'Commands' section may be mixed and
matched but some of them are mutually exclusive.</p>
<p>For example, all of the following are valid command line invocations.</p>
<pre><code># Prints 10 lines from CSV
foo print

# Prints 3 lines from CSV
foo print limit 3
foo limit 3 print

# Prints all lines from CSV
foo print all
foo all print

# Converts 10 lines from CSV into XLS
foo convert

# Converts 3 lines from CSV into XLS
foo limit 3 convert
foo convert limit 3

# Search for the word "foo" in CSV and print 3 such lines
foo search "\&lt;foo\&gt;" limit 3
foo limit 3 search "\&lt;foo\&gt;"
</code></pre>
<p>However, <code>print</code>, <code>search</code>, <code>remove</code> and <code>convert</code> are mutually
exclusive. So the following are not valid.</p>
<pre><code>foo print convert
foo search "\&lt;foo\&gt;" remove "\&lt;foo\&gt;"
</code></pre>
<p>Is it possible to handle command line arguments like these using
<code>argparse</code>? Or am I better off looping over <code>sys.argv</code> myself,
handling these cases with my own code, which would also mean that I have
to take care of updating the help message and any necessary validation
whenever the list of supported arguments change?</p>
<p>Note: I don't want to rely on any internal implementation of <code>argparse</code> module to achieve this. I only want to rely on publicly documented API of <code>argparse</code>. If it is not possible to solve this problem with the publicly documented API of <code>argparse</code>, then that's fine and that would be the answer. In that case, I would handle the command line arguments myself by looping over <code>sys.argv</code> similar to how the shell script is handling the arguments by looping over <code>"$@"</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>A variation in which <code>--limit</code> and <code>--all</code> are optionals, and the rest are subparsers fits <code>argparse</code> nicely.</p>
<p>You can't run multiple subparsers (e.g. <code>print</code> and <code>limit</code>) without some serious convolutions.  Plus <code>limit</code> and <code>all</code> are conceptually very different arguments.  The others are commands - do thus-n-such.  <code>limit</code> and <code>all</code> are modifiers.</p>
<p>Do <code>limit</code> and <code>all</code> work with all the others, or just with <code>print</code> and <code>search</code>.  They might make more sense as optionals for those subparsers.</p>
<p>Also keep in mind that a big plus to <code>argparse</code> is that it generates usage, helps and error messages.  When you do something unusual, you need to think about those messages.  How do you clearly tell your users that they can use <code>limit</code> with <code>print</code> but not with <code>convert</code>?  Or that they can't use <code>limit</code> and <code>all</code> at the same time; or that one overrides the other.</p>
<p>But if you are stuck with these names/flags, and can't add <code>--</code>, then don't bother with <code>argparse</code>.  Don't bother changing something that already works.  </p>
<p>The underlying philosophy in <code>argparse</code> (and <code>optparse</code> and <code>getopt</code>) is to use flagged strings ('--') where you want to match content with action, and handle the rest by order.  <code>argparse</code> expects to parse your strings based on position, not content.</p>
</div>
<div class="post-text" itemprop="text">
<p>It can mostly handle this, just not quite the way you're doing it. You'd use <a href="https://docs.python.org/3/library/argparse.html#sub-commands" rel="nofollow">subcommands/subparsers</a> for print, search, remove and convert, and define the other "commands" (really options on the top level commands) as switches, either on the top level parser if they're common to all commands, or on the individual subparsers/subcommands if they're not common.</p>
<p>Now, in this particular case, it seems like you don't even have unique behaviors for each subcommand, so you might just get away with a single positional argument and two switches:</p>
<pre><code>parser = argparse.ArgumentParser()
parser.add_argument('action', choices=('print', 'search', 'remove', 'convert')
parsecount = parser.add_mutually_exclusive_group()
parsecount.add_argument('--all', dest='limit', action='store_const', const=None)
parsecount.add_argument('--limit', type=int)
parser.set_defaults(limit=10)
</code></pre>
<p>The positional <code>action</code> argument could be changed to individual subparsers if needed, but in this case, it seems like all of the possible commands would allow <code>all</code> or <code>limit</code>.</p>
</div>
<span class="comment-copy">You are changing the command line interface by converting <code>all</code> and <code>limit</code> to <code>--all</code> and <code>--limit</code> which I cannot do because the users are already relying on <code>all</code> and <code>limit</code> as arguments. The point of my question is that the command line interface must remain the same. Therefore, I need to decide if I should use <code>argparse</code> or if I should write my code to handle the command line arguments.</span>
<span class="comment-copy">Okay, then no, not something you can do with <code>argparse</code> directly. I did make it clear it was "mostly", not "completely".</span>
