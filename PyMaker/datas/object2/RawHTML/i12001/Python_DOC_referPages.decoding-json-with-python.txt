<div class="post-text" itemprop="text">
<p>I have a JSON output from a web request in Python, however I'm having a hard time transitioning this data into a Python dictionary. </p>
<p>If you look at the get properties model here:
<a href="https://docs.simplyrets.com/api/index.html#!/default/get_properties" rel="nofollow">https://docs.simplyrets.com/api/index.html#!/default/get_properties</a></p>
<p>My aim is to decode the JSON output and put it into a dictionary. Now I'm not exactly sure how to do this. Apparently inputting the JSON output into a website like <a href="http://jsonprettyprint.com/" rel="nofollow">http://jsonprettyprint.com/</a> should've made it easier to read however it didn't work. The output is just a mashup of JSON code and I don't know an easy way to view this on the eyes. To see this output nicely, it could help me build the for loops, which are what I think I need.</p>
<p>I think I need to create a for loop with all the relevant properties values extracted from the current property name based on the model above? Is there an easier way to do this. </p>
<pre><code>[{u'office': {u'contact': None, u'brokerid': None, u'name': None, u'servingName': None}, u'listDate': u'2011-05-23T18:50:30.184Z', u'sales': {u'contractDate': None, u'closeDate': u'1996-10-21T15:15:54.171Z', u'agent': {u'lastName': u'Long', u'contact': None, u'id': u'blong', u'firstName': u'Buffy'}, u'office': {u'contact': None, u'brokerid': u'ACME12', u'name': u'Acme Brokerage', u'servingName': u'Acme Brokerage'}, u'closePrice': 17946033}, u'agent': {u'lastName': u'Phelps', u'contact': None, u'id': u'sphelps', u'firstName': u'Shoshana'}, u'leaseTerm': None, u'listingId': u'49699701', u'privateRemarks': u'This property is a trial property to test the SimplyRETS. Private agent remarks will be included in this field for use in the SimplyRETS REST API. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.', u'showingInstructions': u'The showing instructions for this trial property are brought to you by the SimplyRETS team. This field will include any showing remarks for the given listing in your RETS feed. Enjoy!', u'terms': u'Conventional', u'tax': {u'id': u'593-723-781-8056'}, u'photos': [u'https://s3-us-west-2.amazonaws.com/cdn.simplyrets.com/properties/trial/home9.jpg', u'https://s3-us-west-2.amazonaws.com/cdn.simplyrets.com/properties/trial/home-inside-9.jpg'], u'address': {u'city': u'Houston', u'full': u'74434 East Sweet Bottom Br #18393', u'streetNumber': 74434, u'country': u'United States', u'state': u'Texas', u'unit': u'18393', u'crossStreet': u'Dunne Ave', u'postalCode': u'77096', u'streetName': u'East Sweet Bottom Br'}, u'remarks': u'This property is a trial property to test the SimplyRETS. This field will include remarks or descriptions from your RETS feed intended for public view. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.', u'geo': {u'county': u'North', u'lat': 29.689418, u'lng': -95.474464, u'directions': u'From 290 exit Barker Cypress to left on Tuckerton, right on Danbury Bridge, right on Bending Post, right on Driftwood Prairie', u'marketArea': u'Spring/Klein'}, u'school': {u'highSchool': u'Cy Creek', u'district': None, u'elementarySchool': u'HAYES', u'middleSchool': u'FALCON PASS'}, u'modified': u'2015-11-14T17:57:26.262Z', u'mls': {u'status': u'Active', u'daysOnMarket': 862, u'area': u'Spring/Klein'}, u'leaseType': u'FullServ', u'property': {u'bathrooms': None, u'laundryFeatures': u'Area,Electric Dryer Hookup,Individual Room,Washer Hookup', u'lotDescription': u'Private Backyard', u'subType': None, u'additionalRooms': u'Recreation,Master Bedroom,See Remarks', u'areaSource': u'Floorplans', u'style': u'Traditional', u'flooring': None, u'area': 1043, u'exteriorFeatures': u'Back Yard Fenced, Covered Patio/Deck, Patio/Deck', u'cooling': None, u'yearBuilt': 1998, u'lotSize': u'127X146', u'type': u'RES', u'foundation': u'Slab', u'fireplaces': 1, u'occupantType': None, u'bedrooms': 2, u'interiorFeatures': u'Drapes/Curtains/Window Cover, Fire/Smoke Alarm, High Ceiling, Island Kitchen', u'accessibility': u'Manned Gate', u'occupantName': None, u'construction': u'In Kitchen,Stackable,Washer Included', u'bathsHalf': 6, u'water': None, u'subdivision': u'Waterstone Springs', u'bathsFull': 5, u'heating': u'Radiant Heat', u'roof': u'Tile', u'stories': 3, u'view': u'Golf Course'}, u'mlsId': 1005192, u'listPrice': 20714261, u'disclaimer': u'This information is believed to be accurate, but without warranty.'}]
</code></pre>
<p>Edit: Hey guys,</p>
<p>Sorry but I already tried</p>
<pre><code>&gt;&gt;&gt; parsed_json = json.loads(data)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/__init__.py", line 338, in loads
    return _default_decoder.decode(s)
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py", line 365, in decode
obj, end = self.raw_decode(s, idx=_w(s, 0).end())
</code></pre>
<p>TypeError: expected string or buffer</p>
</div>
<div class="post-text" itemprop="text">
<p><code>json.loads</code> should turn a JSON string into a dictionary.</p>
<p>You'll need to <code>import json</code> first. See <a href="https://docs.python.org/2/library/json.html" rel="nofollow">https://docs.python.org/2/library/json.html</a> for more information about this.</p>
<pre><code>&gt;&gt;&gt; json.loads('{ "one": "two", "buckle": ["my", "shoe"] }')
{u'buckle': [u'my', u'shoe'], u'one': u'two'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So you need to look up <code>json</code> in the Python docs.</p>
<p><a href="https://docs.python.org/3/library/json.html" rel="nofollow">https://docs.python.org/3/library/json.html</a></p>
<p>If you have a string and want to convert it into a Python dict, you use <code>json.loads(string_variable)</code>. </p>
<p>To convert a Python dictionary into a string you use <code>json.dumps(dictionary)</code>.</p>
</div>
<span class="comment-copy">Try this instead of jsonprettyprint <a href="http://jsonlint.com/" rel="nofollow noreferrer">jsonlint.com</a></span>
<span class="comment-copy"><code>import json</code>, <code>data = json.loads(response)</code></span>
<span class="comment-copy">That is not JSON, it has already been converted into Python objects. You don't need to decode it or parse it any more.</span>
<span class="comment-copy">Ahh, I read somewhere that requests.get(website) outputs a JSON object though... that's why even though it looks like a python dicitonary I assumed it was JSON... The JSONlint website also converts it to soemthing that looks pretty...</span>
<span class="comment-copy">Not sure if this is relevant but if you want it to "look pretty" you can always use <code>json.dumps</code> to format your python object, e.g. <code>print(json.dumps(data, indent=2))</code></span>
<span class="comment-copy">Yeha I should've written this as well but I already tried:      &gt;&gt;&gt; import json     &gt;&gt;&gt; parsed_json = json.loads(data) Traceback (most recent call last):   File "&lt;stdin&gt;", line 1, in &lt;module&gt;   File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/__init__.py", line 338, in loads     return _default_decoder.decode(s)   File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py", line 365, in decode     obj, end = self.raw_decode(s, idx=_w(s, 0).end()) TypeError: expected string or buffer</span>
<span class="comment-copy">@user3042850 Please edit your question to include a sample JSON object.</span>
<span class="comment-copy">@user3042850 It looks like there's something wrong with the JSON you're putting into Python. Plug it into <a href="http://jsonlint.com/" rel="nofollow noreferrer">jsonlint.com</a> and post the output.</span>
<span class="comment-copy">Results  Error: Parse error on line 1: [{	u 'office': {		u 'c ---^ Expecting 'STRING', '}', got 'undefined'  Is what it says, but otherwise it definitely looks prettier from the website</span>
<span class="comment-copy">You already got a Python dictionary from the result. You might need to call <code>response[0]</code> since it looks like it's wrapped in a list.</span>
