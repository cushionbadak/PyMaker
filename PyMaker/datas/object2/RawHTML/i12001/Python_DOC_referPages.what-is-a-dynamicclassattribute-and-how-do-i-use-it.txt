<div class="post-text" itemprop="text">
<p>As of Python 3.4, there is a descriptor called <a href="https://docs.python.org/3/library/types.html#types.DynamicClassAttribute"><code>DynamicClassAttribute</code></a>.  The documentation states:</p>
<blockquote>
<p><code>types.DynamicClassAttribute(fget=None, fset=None, fdel=None, doc=None)</code></p>
<p>Route attribute access on a class to <code>__getattr__</code>.</p>
<p>This is a descriptor, used to define attributes that act differently when accessed through an instance and through a class. Instance access remains normal, but access to an attribute through a class will be routed to the classâ€™s <code>__getattr__</code> method; this is done by raising <code>AttributeError</code>.</p>
<p>This allows one to have properties active on an instance, and have virtual attributes on the class with the same name (see Enum for an example).</p>
<p><em>New in version 3.4.</em></p>
</blockquote>
<p>It is apparently used in the <a href="https://github.com/python/cpython/blob/71a4088f017c862b7e90abdbf905df38dfb55c21/Lib/enum.py#L515">enum module</a>:</p>
<pre><code># DynamicClassAttribute is used to provide access to the `name` and
# `value` properties of enum members while keeping some measure of
# protection from modification, while still allowing for an enumeration
# to have members named `name` and `value`.  This works because enumeration
# members are not set directly on the enum class -- __getattr__ is
# used to look them up.

@DynamicClassAttribute
def name(self):
    """The name of the Enum member."""
    return self._name_

@DynamicClassAttribute
def value(self):
    """The value of the Enum member."""
    return self._value_
</code></pre>
<p>I realise that <a href="https://docs.python.org/3/library/enum.html#how-are-enums-different">enums are a little special</a>, but I don't understand how this relates to the <code>DynamicClassAttribute</code>.  What does it mean that those attributes are <em>dynamic</em>, how is this different from a normal property, and how do I use a <code>DynamicClassAttribute</code> to my advantage?</p>
</div>
<div class="post-text" itemprop="text">
<h1>New Version:</h1>
<p>I was a bit disappointed with the previous answer so I decided to rewrite it a bit:</p>
<p>First have a look at <a href="https://github.com/python/cpython/blob/71a4088f017c862b7e90abdbf905df38dfb55c21/Lib/types.py#L108">the source code of <code>DynamicClassAttribute</code></a> and you'll probably notice, that it looks very much like the normal <a href="https://docs.python.org/3.5/howto/descriptor.html#properties"><code>property</code></a>. Except for the <code>__get__</code>-method:</p>
<pre><code>def __get__(self, instance, ownerclass=None):
    if instance is None:
        # Here is the difference, the normal property just does: return self
        if self.__isabstractmethod__:
            return self
        raise AttributeError()
    elif self.fget is None:
        raise AttributeError("unreadable attribute")
    return self.fget(instance)
</code></pre>
<p>So what this means is that if you want to access a <code>DynamicClassAttribute</code> (that isn't abstract) on the class it raises an <code>AttributeError</code> instead of returning <code>self</code>. For instances <code>if instance:</code> evaluates to <code>True</code> and the <code>__get__</code> is identical to <code>property.__get__</code>.</p>
<p>For normal classes that just resolves in a <em>visible</em> <code>AttributeError</code> when calling the attribute:</p>
<pre><code>from types import DynamicClassAttribute
class Fun():
    @DynamicClassAttribute
    def has_fun(self):
        return False
Fun.has_fun
</code></pre>
<blockquote>
<p>AttributeError - Traceback (most recent call last)</p>
</blockquote>
<p>that for itself is not very helpful until you take a look at the "Class attribute lookup" procedure <strong>when</strong> using <code>metaclass</code>es (I found a nice image of this in <a href="https://blog.ionelmc.ro/2015/02/09/understanding-python-metaclasses/#class-attribute-lookup">this blog</a>). 
Because in case that an attribute raises an <code>AttributeError</code> and that class has a metaclass python looks at the <code>metaclass.__getattr__</code> method and sees if that can resolve the attribute. To illustrate this with a minimal example:</p>
<pre><code>from types import DynamicClassAttribute

# Metaclass
class Funny(type):

    def __getattr__(self, value):
        print('search in meta')
        # Normally you would implement here some ifs/elifs or a lookup in a dictionary
        # but I'll just return the attribute
        return Funny.dynprop

    # Metaclasses dynprop:
    dynprop = 'Meta'

class Fun(metaclass=Funny):
    def __init__(self, value):
        self._dynprop = value

    @DynamicClassAttribute
    def dynprop(self):
        return self._dynprop
</code></pre>
<p>And here comes the "dynamic" part. If you call the <code>dynprop</code> on the class it will search in the meta and return the meta's <code>dynprop</code>:</p>
<pre><code>Fun.dynprop
</code></pre>
<p>which prints:</p>
<pre><code>search in meta
'Meta'
</code></pre>
<p>So we invoked the <code>metaclass.__getattr__</code> and returned the original attribute (which was defined with the same name as the new property).</p>
<p>While for instances the <code>dynprop</code> of the <code>Fun</code>-instance is returned:</p>
<pre><code>Fun('Not-Meta').dynprop
</code></pre>
<p>we get the overriden attribute:</p>
<pre><code>'Not-Meta'
</code></pre>
<p>My conclusion from this is, that <code>DynamicClassAttribute</code> is important if you want to allow subclasses to have an attribute with the same name as used in the metaclass. You'll shadow it on instances but it's still accessible if you call it on the class.</p>
<p>I did go into the behaviour of <code>Enum</code> in the old version so I left it in here:</p>
<h1>Old Version</h1>
<p>The <code>DynamicClassAttribute</code> is just useful (I'm not really sure on that point) if you suspect there could be naming conflicts between an attribute that is set on a subclass and a property on the base-class.</p>
<p>You'll need to know at least some basics about metaclasses, because this will not work without using metaclasses (a nice explanation on how class attributes are called can be found in <a href="https://blog.ionelmc.ro/2015/02/09/understanding-python-metaclasses/#class-attribute-lookup">this blog post</a>) because the attribute lookup is <em>slightly</em> different with metaclasses.</p>
<p>Suppose you have:</p>
<pre><code>class Funny(type):
    dynprop = 'Very important meta attribute, do not override'

class Fun(metaclass=Funny):
    def __init__(self, value):
        self._stub = value

    @property
    def dynprop(self):
        return 'Haha, overridden it with {}'.format(self._stub)
</code></pre>
<p>and then call:</p>
<pre><code>Fun.dynprop
</code></pre>
<blockquote>
<p>property at 0x1b3d9fd19a8</p>
</blockquote>
<p>and on the instance we get:</p>
<pre><code>Fun(2).dynprop
</code></pre>
<blockquote>
<p>'Haha, overridden it with 2'</p>
</blockquote>
<p>bad ... it's lost. But wait we can use the <code>metaclass</code> special lookup: Let's implement an <code>__getattr__</code> (fallback) and implement the <code>dynprop</code> as <code>DynamicClassAttribute</code>. Because according to it's <a href="https://docs.python.org/3/library/types.html#types.DynamicClassAttribute">documentation</a> that's its purpose - to fallback to the <code>__getattr__</code> if it's called on the class:</p>
<pre><code>from types import DynamicClassAttribute

class Funny(type):
    def __getattr__(self, value):
        print('search in meta')
        return Funny.dynprop

    dynprop = 'Meta'

class Fun(metaclass=Funny):
    def __init__(self, value):
        self._dynprop = value

    @DynamicClassAttribute
    def dynprop(self):
        return self._dynprop
</code></pre>
<p>now we access the class-attribute:</p>
<pre><code>Fun.dynprop
</code></pre>
<p>which prints:</p>
<pre><code>search in meta
'Meta'
</code></pre>
<p>So we invoked the <code>metaclass.__getattr__</code> and returned the original attribute (which was defined with the same name as the new property).</p>
<p>And for instances:</p>
<pre><code>Fun('Not-Meta').dynprop
</code></pre>
<p>we get the overriden attribute:</p>
<pre><code>'Not-Meta'
</code></pre>
<p>Well that's not too bad considering we can reroute using metaclasses to previously defined but overriden attributes without creating an instance. This example is the opposite that is done with <code>Enum</code>, where you define attributes on the subclass:</p>
<pre><code>from enum import Enum

class Fun(Enum):
    name = 'me'
    age = 28
    hair = 'brown'
</code></pre>
<p>and want to access these afterwards defined attributes by default.</p>
<pre><code>Fun.name
# &lt;Fun.name: 'me'&gt;
</code></pre>
<p>but you also want to allow accessing the <code>name</code> attribute that was defined as <code>DynamicClassAttribute</code> (which returns which name the variable actually has):</p>
<pre><code>Fun('me').name
# 'name'
</code></pre>
<p>because otherwise how could you access the name of <code>28</code>?</p>
<pre><code>Fun.hair.age
# &lt;Fun.age: 28&gt;
# BUT:
Fun.hair.name
# returns 'hair'
</code></pre>
<p>See the difference? Why does the second one don't return <code>&lt;Fun.name: 'me'&gt;</code>? That's because of this use of <code>DynamicClassAttribute</code>. So you can shadow the original property but "release" it again later. This behaviour is the reverse of that shown in my example and requires at least the usage of <code>__new__</code> and <code>__prepare__</code>. But for that you need to know how that exactly works and is explained in a lot of blogs and stackoverflow-answers that can explain it much better than I can so I'll skip going into that much depth (and I'm not sure if I could solve it in short order).</p>
<p>Actual use-cases might be sparse but given time one can propably think of some...</p>
<p>Very nice discussion on the documentation of <code>DynamicClassAttribute</code>: <a href="https://bugs.python.org/issue20773">"we added it because we needed it"</a></p>
</div>
