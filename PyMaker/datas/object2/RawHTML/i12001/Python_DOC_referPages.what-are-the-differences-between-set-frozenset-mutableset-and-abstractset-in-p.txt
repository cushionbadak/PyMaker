<div class="post-text" itemprop="text">
<p>I am trying to annotate my code with types but I am a little confused when it comes to sets. I read some points in <a href="https://www.python.org/dev/peps/pep-0484/" rel="nofollow">PEP 484</a>:</p>
<blockquote>
<p>Note: Dict , List , Set and FrozenSet are mainly useful for annotating return values. For arguments, prefer the abstract collection types defined below, e.g. Mapping , Sequence or AbstractSet . </p>
</blockquote>
<p>and</p>
<blockquote>
<p>Set, renamed to AbstractSet . This name change was required because Set in the typing module means set() with generics. </p>
</blockquote>
<p>but this does not help.</p>
<p>My first question is: what are the commonalities and differences between Set, FrozenSet, MutableSet and AbstractSet?</p>
<p>My second question is: why if I try</p>
<pre><code>from collections import FrozenSet
</code></pre>
<p>I get</p>
<pre><code>ImportError: cannot import name 'FrozenSet'
</code></pre>
<p>?</p>
<p>I am using Python 3.4 and I have installed mypy-lang via pip.</p>
</div>
<div class="post-text" itemprop="text">
<p>Be careful with annotations and typing.  The ideas discussed in 484 are brand new, and implemented in the <code>typing</code> module.  That module is only available in Python3.5  (the latest <code>typing</code> is also available from <code>pip</code> for both Py2 and Py3).</p>
<p><a href="https://docs.python.org/3/library/typing.html" rel="nofollow">https://docs.python.org/3/library/typing.html</a></p>
<p>That note that you quoted is from a section in 484 that starts:</p>
<blockquote>
<p>To open the usage of static type checking to Python 3.5 as well as older versions, a uniform namespace is required. For this purpose, a new module in the standard library is introduced called typing .</p>
</blockquote>
<p>The things that the note lists are annotation types, not actual object classes (builtin or from <code>collections</code>).  Don't confuse the two.</p>
<p>Note that <code>Dict</code> , <code>List</code> , <code>Set</code> and <code>FrozenSet</code> are all capitalized, where as the functions (and type names) are <code>dict</code>, <code>list</code>, <code>set</code>, <code>frozenset</code>.   In other words to make a dictionary you use <code>dict()</code> or <code>{}</code>, not <code>Dict</code>.</p>
<p>Annotations are new to 3.0 (not in 2.n at all).  In a regular interpreter all they do is populate the function's <code>__annotations__</code> dictionary.  There's nothing in the interpreter that uses or requires annotations.</p>
<p><a href="http://mypy-lang.org/" rel="nofollow">http://mypy-lang.org/</a>  describes itself as an experiemental typing checker.  You need to look at it's documentation to see how compatible it is with 484 etc.</p>
<p><a href="https://docs.python.org/3/library/collections.abc.html#module-collections.abc" rel="nofollow">https://docs.python.org/3/library/collections.abc.html#module-collections.abc</a>  has some abstract definitions, which I believe <code>typing</code> uses.  I've never used these.  They are mainly for people developing new classes of objects, not 'regular' users.</p>
<p>The <code>typing</code> tag for this question is probably not a good idea. It doesn't have many followers, and is too generic.  It does not refer to this Python module.</p>
<p>Search for <code>[python] 484</code> for other SO questions dealing with this style of annotations.</p>
<p><a href="https://github.com/python/typing" rel="nofollow">https://github.com/python/typing</a> - the <code>typing</code> development repository.</p>
<p>In this repository, there is a <code>FrozenSet</code> definition in the <code>python2/typing.py</code> file (the python2 backport), but not in <code>src/typing.py</code>.  I'm not sure of the significance of that.</p>
</div>
<div class="post-text" itemprop="text">
<p>The set type is mutable -- the contents can be changed using methods like add() and remove(). Since it is mutable, it has no hash value and cannot be used as either a dictionary key or as an element of another set. The frozenset type is immutable and hashable -- its contents cannot be altered after is created; however, it can be used as a dictionary key or as an element of another set.</p>
<p>from: <a href="https://docs.python.org/3/library/stdtypes.html#frozenset" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#frozenset</a></p>
<p>you don't need to include it, it's built in, you just do:</p>
<p><code>cities = frozenset(["Frankfurt", "Basel","Freiburg"])</code></p>
<p>tested in 3.4.2</p>
</div>
<div class="post-text" itemprop="text">
<p>Two years late to the party, but anyway...</p>
<p>You can think of <code>AbstractSet</code> and <code>MutableSet</code> as like an interface in Java or an abstract base class in Python.  Python's builtin <code>set()</code> and <code>frozenset()</code> are one implementation, but someone could create another implementation that doesn't use the builtins at all.</p>
<p><code>FrozenSet</code> and <code>Set</code>, on the other hand, represent the types of the concrete built in classes <code>frozenset</code> and <code>set</code>.</p>
<p>For example, the "interface" types don't have <code>union</code> methods, while the concrete types do.  So:</p>
<pre><code>def merge(a: Set[str], b: Iterable[str]) -&gt; Set[str]:
    return a.union(b)
</code></pre>
<p>will type check just fine, but if you change the type of <code>a</code> to <code>AbstractSet</code>, mypy says:</p>
<p><code>typetest.py:7: error: "AbstractSet[str]" has no attribute "union"</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Each of these are used for different things. </p>
<p>Sets are very similar to the mathematical concept of Sets: <a href="https://en.wikipedia.org/wiki/Set_(mathematics)" rel="nofollow">https://en.wikipedia.org/wiki/Set_(mathematics)</a> </p>
<p>A Set in Python is essentially a collection of unique objects. You can read more about sets, as well as see some examples, here: <a href="http://www.python-course.eu/python3_sets_frozensets.php" rel="nofollow">http://www.python-course.eu/python3_sets_frozensets.php</a></p>
<p>Sets in Python are a collection of unique objects (all immutable) but a FrozenSet is immutable. This means you can change a Set, but you cannot change a FrozenSet: you need to create a new FrozenSet.</p>
<p>In Python3, FrozenSet is a default argument called 'frozenset'</p>
</div>
<span class="comment-copy">Hi, thanks for your reply. I have clearer ideas now (I knew about the difference between annotation types and objects, but did not know about mypy's typing vs python3.5's typing modules). However, I looked into both documentations and could not find a reference to FrozenSet, which was mentioned in PEP 484. Am I missing something?</span>
<span class="comment-copy">Looks like they haven't added <code>FrozenSet</code> to <code>typing</code>.  Many of the classes in <code>typing</code> map on to <code>collections.abc</code>, which has things like <code>MutableSet</code> and <code>AbstractSet</code>, but not <code>FrozenSet</code>.  So at this point <code>FrozenSet</code> is just an idea in the PEP, nothing more.</span>
<span class="comment-copy">There's a github repository for the <code>typing</code> module.  Explore that to see what might be added in the future.</span>
<span class="comment-copy">Looks like <code>typing</code> and <code>mypy</code> have to be used together.  Use the features that both implement, and forget about extras in the PEP.  And expect things to change, since both are under development.</span>
<span class="comment-copy">Thanks for clarifying. I removed the tag typing - I agree it was not a good idea (python-typing would have been better, but does not exist).</span>
<span class="comment-copy">Thanks, I know these differences. The question was about how these types are mapped in the typing module. I am sorry if I was not clear.</span>
<span class="comment-copy">Hi, as I replied to lciamp, I know the difference between set and frozenset. My question was specific to the typing module, thus the uppercase letters. I am sorry if I was not clear.</span>
