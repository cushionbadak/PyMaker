<div class="post-text" itemprop="text">
<p>I have the following:</p>
<ol>
<li>I have directory with subdirectories which are filled with files. The structure is the following: <code>/periodic_table/{Element}_lj_dat/lj_dat_sim.dat</code>;</li>
<li>Each file consists of two rows (first one is the comment) and 12 columns of data.</li>
<li>What I would like to get is to go through all folders of elements (eg. Al, Cu etc.), open created file (for example named "mergedlj.dat" in <code>periodic_table</code> directory) and store all the data from each file in one adding Element name from parent directory as a first (or last) column of merged file.</li>
</ol>
<p>The best way is to ignore the first row in each file and save only data from second row.</p>
<p>I am very unexperienced in bash/shell scripting, but I think this is the best way to go (Python is acceptable too!). Unfortunately I had only experience with files which are in the same folder as the script, so this is some new experience for me.</p>
<p>Here is the code just to find this files, but actually it doesn't do anything what I need:</p>
<pre><code>find ../periodic_table/*_lj_dat/ -name lj_dat_sim.dat -print0 | while read -d $'\0' file; do 
    echo "Processing $file"
done
</code></pre>
<p>Any help will be highly appreciated!!</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a Python solution.</p>
<p>You can use <a href="https://docs.python.org/3/library/glob.html#glob.glob" rel="nofollow"><code>glob()</code></a> to get a list of the matching files and then iterate over them with <a href="https://docs.python.org/3/library/fileinput.html#fileinput.input" rel="nofollow"><code>fileinput.input()</code></a>. <code>fileinput.filename()</code> lets you get the name of the file that is currently being processed, and this can be used to determine the current element whenever processing begins on a new file, as determined by <code>fileinput.isfirstline()</code>.</p>
<p>The current element is added as the first column of the merge file. I've assumed that the field separator in the input files is a single space, but you can change that by altering <code>' '.join()</code> below.</p>
<pre><code>import re
import fileinput
from glob import glob

dir_prefix = '.'
glob_pattern = '{}/periodic_table/*_lj_dat/lj_dat_sim.dat'.format(dir_prefix)
element_pattern = re.compile(r'.*periodic_table/(.+)_lj_dat/lj_dat_sim.dat')

with open('mergedlj.dat', 'w') as outfile:
    element = ''
    for line in fileinput.input(glob(glob_pattern)):
        if fileinput.isfirstline():
            # extract the element name from the file name
            element = element_pattern.match(fileinput.filename()).groups()[0]
        else:
            print(' '.join([element, line]), end='', file=outfile)
</code></pre>
<p>You can use <code>os.path.join()</code> to construct the glob and element regex patterns, but I've omitted that above to avoid cluttering up the answer.</p>
</div>
<span class="comment-copy">Look at the <code>os</code> module of python. It can <code>walk</code> you through a directory tree nicely.</span>
<span class="comment-copy">Yeah, I have an idea about python realisation, but I thought that bash should be easy (shorter)... Anyway thanks, if I will do it in Python I will post it here.</span>
<span class="comment-copy">Thank you for your answer! It worked, but I changed the following: <code>glob_pattern =  '{}/*_lj_dat/lj_dat_sim.dat'.format(dir_prefix)</code> and <code>element_pattern = re.compile(r'(.+)_lj_dat/lj_dat_sim.dat'</code></span>
<span class="comment-copy">Because the code was looped as long as I put the code file in the "periodic_table" directory itself. Thanks again!</span>
