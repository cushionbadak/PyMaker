<div class="post-text" itemprop="text">
<pre><code>def convert_output (output):
    return (struct.pack('i', output))

while True:
    pygame.event.pump()
    joystick = pygame.joystick.Joystick(0)
    joystick.init()

    X_AX = int(joystick.get_axis(0) * 100)

    DATA = convert_output(X_AX)

    print("message:", (DATA), "----", hex(X_AX), "----", X_AX)
</code></pre>
<p>How can I get the same output in DATA as hex(X_AX)? 
I need X_AX as one byte HEX for UDP communication.</p>
<p>Current output looks like:</p>
<pre><code>message: b'\x00\x00\x00\x00' ---- 0x0 ---- 0
message: b'\x18\x00\x00\x00' ---- 0x18 ---- 24
</code></pre>
<p>X_AX range is -100 to 100</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want a single byte representation, call <code>struct.pack</code> with format code <code>b</code> instead of <code>i</code>, and it will output a single signed byte (which can represent all values from -128 to 127 inclusive, handling the -100 to 100 range you require). The <code>repr</code> of said byte in the example case would be <code>b'\x18'</code> when <code>print</code>-ed, but when you <code>write</code> it to a socket or file in binary mode, the raw byte itself would be written.</p>
<p>See the <a href="https://docs.python.org/3/library/struct.html#format-characters" rel="nofollow"><code>struct</code> module's format code documentation for other options by size</a>.</p>
</div>
<span class="comment-copy">thank you! sock.sendto((DATA), (HOST, PORT)) will send the raw byte?</span>
<span class="comment-copy">@user3603948: Well, you could omit the parentheses around <code>DATA</code>, but yes, <code>sock.sendto(DATA, (host, port))</code> would be the normal approach for IPv4 (and IPv6 supports it, though <a href="https://docs.python.org/3/library/socket.html#socket-families" rel="nofollow noreferrer">the <code>socket</code> docs indicate you should provide <code>flowinfo</code>, and <code>scopeid</code> for IPv6 addresses</a>).</span>
