<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/9209999/python-shift-elements-in-a-list-with-constant-length">Python: shift elements in a list with constant length</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>I would like to make a program that will take a list:</p>
<pre><code>myList = [a,b,c]
</code></pre>
<p>and be able to move all elements left or right, and drop anything that would be pushed out, replacing everything else with a 0:</p>
<pre><code>moveRight(mylist) = [0,a,b]
moveLeft(myList) = [b,c,0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could slice the list to remove the relevant elements and add <code>[0]</code> to it:</p>
<pre><code>def moveRight(mylist):
    return ['0'] + myList[:-1]

def moveLeft(mylist):
    return myList[1:] + ['0']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Slicing is very helpful:</p>
<pre><code>def moveRight(mylist, distance=1, pad=0):
    return ([pad] * distance) + mylist[:0 - distance]

def moveLeft(mylist, distance=1, pad=0):
    return mylist[distance:] + ([pad] * distance)
</code></pre>
<p>You could also do the change in-place:</p>
<pre><code>def moveRight(mylist, distance=1, pad=0):
    mylist[:] = ([pad] * distance) + mylist[:0 - distance]

def moveLeft(mylist, distance=1, pad=0):
    mylist[:] = mylist[distance:] + ([pad] * distance)
</code></pre>
<p>Both ways, the default is to shift by one, but you could shift by any positive integer.  You can also use something other than <code>0</code> to fill in the missing elements with.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want the size of the collection to be preserved, use a <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow">deque</a> from the collections module</p>
<pre><code>from collections import deque

&gt;&gt;&gt; d = deque(list(range(1, 6)), maxlen=5)
&gt;&gt;&gt; d.append(0)
&gt;&gt;&gt; d
deque([2, 3, 4, 5, 0], maxlen=5)
&gt;&gt;&gt; d.appendleft(0)
&gt;&gt;&gt; d
deque([0, 2, 3, 4, 5], maxlen=5)
</code></pre>
<p>deque also has extend and extendleft methods to add multiple elements at once.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can also make good use of <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow"><code>deque</code></a> from <code>collections</code> module in your case:</p>
<pre><code>&gt;&gt;&gt; from collections import deque
&gt;&gt;&gt; 
&gt;&gt;&gt; q = deque(maxlen=3)
&gt;&gt;&gt;
&gt;&gt;&gt; q.extend(['a','b','c'])
&gt;&gt;&gt; 
&gt;&gt;&gt; q
deque(['a', 'b', 'c'], maxlen=3)
&gt;&gt;&gt; q.appendleft(0)
&gt;&gt;&gt; q
deque([0, 'a', 'b'], maxlen=3)
&gt;&gt;&gt; q.append(0)
&gt;&gt;&gt; q
deque(['a', 'b', 0], maxlen=3)
</code></pre>
<p>The idea here is to keep the <code>queue</code> of fixed size so whenever you append an item from either right or left the item on the opposite end gets pushed out.</p>
<p>Quoting from <a href="http://shop.oreilly.com/product/0636920027072.do" rel="nofollow"><em>Python Cookbook 3rd Edition</em></a> :</p>
<blockquote>
<p>Adding or popping items from either end of a queue has O(1)
  complexity. This is unlike a list where inserting or removing items
  from the front of the list is O(N).</p>
</blockquote>
</div>
<span class="comment-copy">Maybe these functions could have a <code>pad_value=0</code> argument to make them even more generic.</span>
<span class="comment-copy">@ekhumoro: Excellent suggestion.  I have now implemented it.</span>
<span class="comment-copy">Great - but looks like you forgot to add the argument on all the functions in your examples.</span>
<span class="comment-copy">Hehe.  Thanks ;)</span>
