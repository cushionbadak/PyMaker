<div class="post-text" itemprop="text">
<p>I am working on mac OS X Yosemite, version 10.10.3.</p>
<p>I installed python2.7 and pip using macport as done in 
<a href="http://johnlaudun.org/20150512-installing-and-setting-pip-with-macports/" rel="noreferrer">http://johnlaudun.org/20150512-installing-and-setting-pip-with-macports/</a></p>
<p>I can successfully install packages and import them inside my python environment and python scripts. However any executable associated with a package that can be called from the command line in the terminal are not found.</p>
<p><strong>Does anyone know what might be wrong?</strong> (More details below)</p>
<p>For example while installing a package called "rosdep" as instructed in <a href="http://wiki.ros.org/jade/Installation/Source" rel="noreferrer">http://wiki.ros.org/jade/Installation/Source</a></p>
<p>I can run: <code>sudo pip install -U rosdep</code>
which installs without errors and corresponding files are located in <code>/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages</code></p>
<p>However if I try to run : <code>sudo rosdep init</code>,
it gives an error : <code>"sudo: rosdep: command not found"</code></p>
<p>This is not a package specific error. I get this for any package installed using pip on my computer. I even tried adding </p>
<pre><code>/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages
</code></pre>
<p>to my <code>$PATH</code>.
But the executables are not found on the command line, even though the packages work perfectly from within python.</p>
</div>
<div class="post-text" itemprop="text">
<p>check your $PATH</p>
<p><code>tox</code> has a command line mode:  </p>
<pre><code>audrey:tests jluc$ pip list | grep tox
tox (2.3.1)
</code></pre>
<p>where is it?</p>
<pre><code>audrey:tests jluc$ which tox
/opt/local/Library/Frameworks/Python.framework/Versions/2.7/bin/tox
</code></pre>
<p>and what's in my $PATH?  </p>
<pre><code>audrey:tests jluc$ echo $PATH
/opt/chefdk/bin:/opt/chefdk/embedded/bin:/opt/local/bin:..../opt/local/Library/Frameworks/Python.framework/Versions/2.7/bin...
</code></pre>
<p>Notice the <strong>/opt/local/Library/Frameworks/Python.framework/Versions/2.7/bin</strong>?  That's what allows finding my pip-installed stuff</p>
<p>Now, to see where things are from Python, try doing this (substitute <code>rosdep</code> for <code>tox</code>).</p>
<pre><code>$python
&gt;&gt;&gt; import tox
&gt;&gt;&gt; tox.__file__
</code></pre>
<p>that prints out:</p>
<pre><code>'/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tox/__init__.pyc'
</code></pre>
<p>Now, <strong>cd</strong> to the directory right above <code>lib</code> in the above.  Do you see a <strong>bin</strong> directory?  Do you see <code>rosdep</code> in that bin?  If so try adding the <code>bin</code> to your $PATH.</p>
<pre><code>audrey:2.7 jluc$ cd /opt/local/Library/Frameworks/Python.framework/Versions/2.7
audrey:2.7 jluc$ ls -1
</code></pre>
<p>output:</p>
<pre><code>Headers
Python
Resources
bin
include
lib
man
share
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>On macOS with the default python installation you need to add <code>/Users/&lt;you&gt;/Library/Python/2.7/bin/</code> to your $PATH.</p>
<p>Add this to your .bash_profile:</p>
<pre><code>export PATH="/Users/&lt;you&gt;/Library/Python/2.7/bin:$PATH"
</code></pre>
<p>That's where pip installs the executables.</p>
<p>Tip: For non-default python version <code>which python</code> to find the location of your python installation and replace that portion in the path above. (Thanks for the hint Sanket_Diwale)</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're installing using <code>--user</code> (e.g. <code>pip3.6 install --user tmuxp</code>), <a href="https://docs.python.org/3/library/site.html#cmdoption-site-user-base" rel="noreferrer">it is possible to get the platform-specific user install directory from Python itself using the <code>site</code> module</a>.  For example, on macOS:</p>
<pre class="lang-sh prettyprint-override"><code>$ python2.7 -m site --user-base
/Users/alexp/Library/Python/2.7
</code></pre>
<p>By appending <code>/bin</code> to this, we now have the path where package executables will be installed.  We can dynamically populate the PATH in your shell's rc file based on the output; I'm using bash, but with any luck this is portable:</p>
<pre class="lang-sh prettyprint-override"><code># Add Python bin directories to path
python3.6 -m site &amp;&gt; /dev/null &amp;&amp; PATH="$PATH:`python3.6 -m site --user-base`/bin"
python2.7 -m site &amp;&gt; /dev/null &amp;&amp; PATH="$PATH:`python2.7 -m site --user-base`/bin"
</code></pre>
<p>I use the precise Python versions to reduce the chance of the executables just "disappearing" when Python upgrades a minor version, e.g. from 3.5 to 3.6.  They'll disappear because, as can be seen above, the user installation path may include the Python version.  So while <code>python3</code> could point to 3.5 or 3.6, <code>python3.6</code> will always point to 3.6.  This needs to be kept in mind when installing further packages, e.g. use <code>pip3.6</code> over <code>pip3</code>.</p>
<p>If you don't mind the idea of packages disappearing, you can use <code>python2</code> and <code>python3</code> instead:</p>
<pre class="lang-sh prettyprint-override"><code># Add Python bin directories to path
# Note: When Python is upgraded, packages may need to be re-installed
#       or Python versions managed.
python3 -m site &amp;&gt; /dev/null &amp;&amp; PATH="$PATH:`python3 -m site --user-base`/bin"
python2 -m site &amp;&gt; /dev/null &amp;&amp; PATH="$PATH:`python2 -m site --user-base`/bin"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I stumbled upon this question because I created, successfully built and published a PyPI Package, but couldn't execute it after installation. The <code>$PATH</code>variable was correctly set.</p>
<p>In my case the problem was that I hadn't set the <code>entry_point</code>in the <code>setup.py</code> file:</p>
<pre><code>entry_points = {'console_scripts':

['YOUR_CONSOLE_COMMAND=MODULE_NAME.FILE_NAME:FUNCTION_NAME'],},
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>On Windows, you need to add the path <code>%USERPROFILE%\AppData\Roaming\Python\Scripts</code> to your path.</p>
</div>
<span class="comment-copy">any virtualenv involved?</span>
<span class="comment-copy">no, no virtualenv is involved.</span>
<span class="comment-copy">when you sudo, you switch to the $PATH of the root user, just make sure his PATH is updated, not your PATH</span>
<span class="comment-copy">Thanks JL for the answer, but this is mainly my problem. For my example app rosdep, when I do as you did, here is the output obtained:   pip list | grep rosdep rosdep (0.11.4) which rosdep (no output), command line doesn't return anything</span>
<span class="comment-copy"><b>which</b> not returning <code>rosdep</code> is consistent with your issue.  my point is that you need to find where the <code>rosdep</code> is installed and what $PATH looks like.</span>
<span class="comment-copy">Thanks, I had my binaries also being installed in /opt/local/Library/Frameworks/Python.framework/Versions/2.7/bin. Added that to the PATH and now its working. Thanks, I was having trouble locating the binaries since which wasn't providing any output.</span>
<span class="comment-copy">export PATH=/opt/local/Library/Frameworks/Python.framework/Versions/2.7/bin:$PATH was missing on my paths and did the trick for me on OSX</span>
<span class="comment-copy">This is the right and standard answer!</span>
<span class="comment-copy">The place where pip installs depends on how you installed python, MacOS has multiple ways of installing python, like macports, homebrew and system default. Depending on which version of python is being used, you will have different locations for pip. A easy way to figure out where pip and python are located would be to use "which python" in the terminal and then add the appropriate location to the $PATH.</span>
<span class="comment-copy">saved my day thanks!</span>
<span class="comment-copy">For macOS 10.14.3 installing Python 3.6 from python.org, <code>which python3</code> led me eventually (through a link) to <code>/Library/Frameworks/Python.framework/Versions/3.6/bin/</code>.</span>
