<div class="post-text" itemprop="text">
<p>I've built an app written on python, based on <strong><code>ZeroMQ</code></strong>, but now I'm facing perfomance issues. So I decided to rewrite some modules of my app using, let's say, Golang. But when I try to establish messaging between sockets, implemented by different languages, anything does not work.<br/><br/>I've searched so far, but I didn't find any info about compatibility problems of <code>ZeroMQ</code> using different languages. </p>
<p><strong>So the question is:</strong> Can I use golang for server implementation based on <code>ZeroMQ</code> and client written on python to connect to it?<br/>Or do I have to use only one language?</p>
<p><strong>EDIT</strong>: here are typical server and client that I'm trying to get working properly</p>
<p>server:</p>
<pre><code>import zmqctx = zmq.Context()
sock = ctx.socket(zmq.REP)
sock.bind("tcp://*:57000")
msg = sock.recv()
</code></pre>
<p>client:</p>
<pre><code>package main

import (
    zmq "github.com/pebbe/zmq4"
)

func main() {

    ctx, _ := zmq.NewContext()
    sock, _ := ctx.NewSocket(zmq.REQ)

    sock.Connect("tcp://localhost:57000")
    sock.Send("simple message", 0)
}
</code></pre>
<p>Server stucks at <code>sock.recv()</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Programming languages are able to communicate with each other -- yes, you can write a server in Go and a client in Python and have them communicate with each other.</p>
<p>If you're trying to communicate using raw sockets, look at the documentation for your desired languages and make sure that the serialized data match in structure.</p>
<p>e.g. You could decide on a struct and implement your payload in <a href="https://docs.python.org/3/library/struct.html#byte-order-size-and-alignment" rel="nofollow">Python</a> or code and then match that structure in <a href="https://godoc.org/github.com/joshlf/gopack" rel="nofollow">Go</a> (there may be a better/stdlib way in Go; I'm not very experienced in this language).  The potential maintenance and implementation headache in worrying about these details is why people use higher-level protocols -- exactly a good use case for ZeroMQ.</p>
<p>If you're using a message queue as the backbone of your operation, simply use that as the shared protocol.  If your Python code can speak with ZeroMQ, then it's doing its job correctly -- there's no need for your Go code to know it's speaking to Python.</p>
<p>In this case, your new <a href="http://zeromq.org/bindings:go" rel="nofollow">Go server would bind to ZeroMQ</a>, your <a href="http://zeromq.org/bindings:python" rel="nofollow">Python client would bind to ZeroMQ</a>, and your two heterogenous languages need to know nothing about each other.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a little bit late but I found this post while I am trying to find a golang-to-python 0mq implementation.</p>
<p>In my golang code, I have just changed <code>zmq</code> to <strong><code>zmq4</code></strong> and everything worked for me:</p>
<pre><code>import (
    zmq4 "github.com/pebbe/zmq4"
)

func main() {

    ctx, _ := zmq4.NewContext()
    sock, _ := ctx.NewSocket(zmq4.REQ)

    sock.Connect("tcp://localhost:57000")
    sock.Send("simple message", 0)
}
</code></pre>
</div>
<span class="comment-copy">I recently rewritten one of my slow python (celery) modules to Go. It was communicating with re rest of the system via RabbitMQ. I don't know ZeroMQ, but I guess it has a common protocol for all connecting clients, so it should work. Maybe You are doing something wrong? What kind of problems are You experiencing?</span>
<span class="comment-copy">when you say "rewrite in, let's say, Golang" do you mean this is hypethetical or have you actually done the rewrites? I'd recommend writing C extensions for python for performance if you have not already done the rewrites.</span>
<span class="comment-copy">@Tadhg McDonald-Jensen, to be honest, I'm using Golang as the second language</span>
<span class="comment-copy">Writing C via the FFI is a far harder task than just hacking along in Go -- the fact that @pupizoid is using ZeroMQ means that there's no need to be focused on interpreter-local objects.</span>
<span class="comment-copy">In reference to your example code, <code>zmq.REP</code> blocks on <code>recv</code> until it receives a request.  Are you sure there's messages available for the client?</span>
<span class="comment-copy">I thought so, but in practice that doesn't work even with simple examples, which I've added to my question.</span>
<span class="comment-copy">Well, I've tried to run everything conversely, and to my happiness, it finally worked out when python client connected to go server and delivered a message. It turns out that I did something wrong from the beginning, so that all thanks to your answer, which added me confidence in the obvious things :)</span>
<span class="comment-copy">@pupizoid Oh, glad to hear it -- that also means I can stop setting up a Go environment on this machine :)</span>
<span class="comment-copy">Hi, as far as I know the "shortcut" to imported module doesn't really matter. And as I found earlier there was something wrong with my system setup and in the end all worked out. But anyway thanks for reply!</span>
