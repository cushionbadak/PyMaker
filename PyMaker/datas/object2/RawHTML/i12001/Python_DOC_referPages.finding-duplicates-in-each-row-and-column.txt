<div class="post-text" itemprop="text">
<p>The function needs to be able to check a file for duplicates in each row and column.</p>
<p>Example of file with duplicates:</p>
<pre><code>A B C
A A B
B C A
</code></pre>
<p>As you can see, there is a duplicate in row 2 with 2 A's but also in Column 1 with two A's.
code:</p>
<pre><code>def duplication_char(dc):
    with open (dc,"r") as duplicatechars: 
        linecheck = duplicatechar.readlines()
    linecheck = [line.split() for line in linecheck]

    for row in linecheck:
        if len(set(row)) != len(row):
            print ("duplicates", " ".join(row))


    for column in zip(*checkLine):
        if len(set(column)) != len(column):
            print ("duplicates"," ".join(column))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well, here is how I would do it.</p>
<p>First, read your files and create a 2d numpy array with the content:</p>
<pre><code>import numpy
with open('test.txt', 'r') as fil:
    lines = fil.readlines()
lines = [line.strip().split() for line in lines]
arr = numpy.array(lines)
</code></pre>
<p>Then, check if each row has duplicates using sets (a set has no duplicates, so if the length of the set is different than the length of the array, the array has duplicates):</p>
<pre><code>for row in arr:
    if len(set(row)) != len(row):
        print 'Duplicates in row: ', row
</code></pre>
<p>Then, check if each column has duplicates using sets, by transposing your numpy array:</p>
<pre><code>for col in arr.T:
    if len(set(col)) != len(col):
        print 'Duplicates in column: ', col
</code></pre>
<p>If you wrap all of this in a function:</p>
<pre><code>def check_for_duplicates(filename):
    import numpy
    with open(filename, 'r') as fil:
        lines = fil.readlines()
    lines = [line.strip().split() for line in lines]
    arr = numpy.array(lines)

    for row in arr:
        if len(set(row)) != len(row):
            print 'Duplicates in row: ', row

    for col in arr.T:
        if len(set(col)) != len(col):
            print 'Duplicates in column: ', col
</code></pre>
<p>As suggested by Apero, you can also do this without numpy using zip (<a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow">https://docs.python.org/3/library/functions.html#zip</a>):</p>
<pre><code>def check_for_duplicates(filename):
    with open(filename, 'r') as fil:
        lines = fil.readlines()
    lines = [line.strip().split() for line in lines]

    for row in lines:
        if len(set(row)) != len(row):
            print 'Duplicates in row: ', row

    for col in zip(*lines):
        if len(set(col)) != len(col):
            print 'Duplicates in column: ', col
</code></pre>
<p>In your example, this code prints:</p>
<pre><code># Duplicates in row:  ['A' 'A' 'B']
# Duplicates in column:  ['A' 'A' 'B']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can have a List of Lists and use <code>zip</code> to transpose it.</p>
<p>Given your example, try:</p>
<pre><code>from collections import Counter

with open(fn) as fin:
    data=[line.split() for line in fin]

rowdups={}  
coldups={}
for d, m in ((rowdups, data), (coldups, zip(*data))):   
    for i, sl in enumerate(m):
        count=Counter(sl)
        for c in count.most_common():
            if c[1]&gt;1:
                d.setdefault(i, []).append(c)

&gt;&gt;&gt; rowdups 
{1: [('A', 2)]}
&gt;&gt;&gt; coldups 
{0: [('A', 2)]} 
</code></pre>
</div>
<span class="comment-copy">col = zip(*row) is enough, no need of numpy here</span>
<span class="comment-copy">@Apero you're absolutely right ... I edited my answer. Thanks.</span>
<span class="comment-copy">@JohnPal check the zip documentation (<a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#zip</a>). <code>zip</code> will aggregate the elements of some given iterators into tuples. For example, <code>x = [1, 2, 3]; y = [4, 5, 6]; zip(x, y)</code> returns <code>[(1, 4), (2, 5), (3, 6)]</code>. To understand the meaning of<code>*lines</code>, check this link (<a href="http://agiliq.com/blog/2012/06/understanding-args-and-kwargs/" rel="nofollow noreferrer">agiliq.com/blog/2012/06/understanding-args-and-kwargs</a>)</span>
<span class="comment-copy">@JulienSpronck so in this case zip(*lines) makes ([A,A,B],[B,A,C],[CBA])? (using the square from the OP)?</span>
<span class="comment-copy">@JohnPal Almost, zip returns a list of tuples, <code>[('A', 'A', 'B'), ('B', 'A', 'C'), ('C', 'B', 'A')]</code></span>
