<div class="post-text" itemprop="text">
<p>I am trying to disable a user from opening a file.
The purpose is that when a user will try to open a specific file, he would not be able to.</p>
<p>Also, I want to be able to return the permissions and letting the user open the file. </p>
<p>I only found ways to enable premissions: <code>os.chmod(path, 0444)</code>, but I can not understand how to disable permissions.</p>
</div>
<div class="post-text" itemprop="text">
<p>A Unix permission primer:</p>
<p>Every file has an <code>user</code>. This is a user on the system. Every file also has a <code>group</code>. This is a group on the system. A <code>user</code> can be in one or more <code>group</code>s. A file has exactly one <code>user</code> and one <code>group</code> that "own" the file.<sup>1</sup></p>
<p>So what does a number like <code>0444</code> mean?</p>
<p>The first number is used for some special flags such as <code>sticky</code>, <code>setuid</code>, <code>setgid</code>. We don't need to bother with that right now. Just remember to set it to <code>0</code></p>
<p>The next three numbers indicate the three permissions: one for the <code>user</code>, <code>group</code>, and <code>other</code> (everybody that is not <code>user</code> or <code>group</code>), in that order.</p>
<p>To set the permissions we use a number from zero to seven (an <em>octal</em> number). This is actually a <a href="https://en.wikipedia.org/wiki/Mask_%28computing%29"><em>bitmask</em></a>. <code>1</code> is for <code>execute</code>, <code>2</code> is for <code>write</code>, <code>4</code> is for <code>read</code>.</p>
<p>In a table it looks like:<sup>2</sup></p>
<pre><code>N   Description                    ls output

0   No read, no write, no execute    ---
1   No read, no write, execute       --x
2   No read, write, no execute       -w-
3   No read, write, execute          -wx
4   Read, no write, no execute       r--
5   Read, no write, execute          r-x
6   Read, write, no execute          rw-
7   Read, write, execute             rwx
</code></pre>
<p><code>read</code> and <code>write</code> should be self-explanatory. <code>execute</code> means that you can run a file with <code>./ls</code> (this is not a security measure, and can be circumvented by the way). Note that directories are <em>also</em> files on Unix systems such as Linux. A directory must have the <code>execute</code> bit set if you want to be able to <code>cd</code> into it.</p>
<p>The number you'll use most often are:</p>
<ul>
<li>7, for full access</li>
<li>6, for full access except execute</li>
<li>4, for read only.</li>
</ul>
<p>So, if you look at your command <code>os.chmod(path, 0444)</code> we see that you've set read-only access for <em>all</em> users. This is not what you want.</p>
<p>The correct permissions depend on which <code>user</code> and <code>group</code> own the file. If the file does <em>not</em> belong to the user you want to disallow access to, and is <em>not</em> in the group that the file belongs to, you can use:</p>
<pre><code>os.chmod(path, 0440)
</code></pre>
<p>If we look at the table above, we see that it means:</p>
<ul>
<li>Read, write, no execute for <code>user</code>.</li>
<li>Read, write, no execute for <code>group</code>.</li>
<li>NO permissions for <code>other</code>.</li>
</ul>
<p>If the file does <em>not</em> belong to the user you want to disallow access to, and <em>is</em> in the group that the file belongs to, you can use:</p>
<pre><code>os.chmod(path, 0400)
</code></pre>
<p>This will make it readable for the <code>user</code> <em>only</em>. Note that this <em>may</em> have side-effects, as everyone else in the group can't read it now either.</p>
<p>However, if the file belongs to the user, then you need to change the file <code>user</code>. This can be done with the <a href="https://docs.python.org/3/library/os.html#os.chown"><code>os.chown()</code></a> function. e.g.:</p>
<pre><code>os.chown(path, 'martin')
os.chmod(path, 0400)
</code></pre>
<hr/>
<p><sup>1</sup>: You can use ACLs if you want to assign more users or groups to a file, but in &gt;95% there is no need to, and it only adds complexity that may be difficult to manage. It's often disabled by default.</p>
<p><sup>2</sup>: Table lifted from the <a href="https://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/permissions.html">FreeBSD handbook</a></p>
</div>
<span class="comment-copy">Could you show us what you tried with <code>os.chmod</code>?</span>
<span class="comment-copy">Welcome to Stack Overflow! Can you please clarify what the problem is? "It doesn't work" is not very helpful. What exactly did you try? What happened? Do you get any errors? Please take a moment to read through <a href="http://stackoverflow.com/help/how-to-ask">How do I ask a good question?</a>.</span>
<span class="comment-copy">I only found ways to enable premissions: 'os.chmod(path, 0444)'</span>
<span class="comment-copy">thank you, but i guess i was not clear enoght. My target is to create a system that works this way: when anyone tries to open a specific folder, it will not open and a login GUI that i created will pop up. Can you please help me?</span>
<span class="comment-copy">@jonathan The way to do that is to disallow access to the file for the user wanting to access it, and run a background process (daemon) as a different user which <i>does</i> have access to these files which will create such dialogs and send the files when needed. You can monitor file access with inotify or gamin. This requires some amount of programming and a full answer to this is somewhat beyond the scope of an SO answer... Such programs probably already exist in one form or another by the way.</span>
