<div class="post-text" itemprop="text">
<p>I've attempted to create a Python interface class hierachy that looks something like:</p>
<pre><code>class Axis(object, metaclass=ABCMeta):
    def __init__(self):
        # Do stuff...

class LinearAxis(Axis, metaclass=ABCMeta):
    @abstractmethod
    def move_linear(self, move_um):
        pass

    def __init__(self):
        # Do stuff...
        Axis.__init__(self)

class RotationalAxis(Axis, metaclass=ABCMeta):
    @abstractmethod
    def move_rotate(self, move_degree):
        pass

    def __init__(self):
        # Do stuff...
        Axis.__init__(self)

class XAxis(LinearAxis, metaclass=ABCMeta):
    def __init__(self):
        # Do stuff...
        LinearAxis.__init__(self)
</code></pre>
<p>So basically an interface sort of like that with a bunch more functions everywhere and stuff in the constructors etc...</p>
<p>Then I go to derive off my interface:</p>
<pre><code>class AnAxis(Axis):
    def __init__(self):
        # Do stuff...
        Axis.__init__(self)

class AnLinearAxis(AnAxis, LinearAxis):
    def move_linear(self, move_um):
        pass

    def __init__(self):
        # Do stuff...
        AnAxis.__init__(self)
        LinearAxis.__init__(self)

class AnRotationalAxis(AnAxis, RotationalAxis):
    def move_rotate(self, move_degree):
        pass

    def __init__(self):
        # Do stuff...
        AnAxis.__init__(self)
        RotationalAxis.__init__(self)

class AnXAxis(AnLinearAxis, XAxis):
    def __init__(self):
        # Do stuff...
        AnLinearAxis.__init__(self)
        XAxis.__init__(self)
</code></pre>
<p>I'm trying to work out how to call the constructors properly.  The way I have it, I'm pretty sure I call the interface constructors many times...  So it's wrong...  Is there a preferred way to do it?  (Perhaps I don't call constructors in the interface classes, or I only call the interface constructor at the end up my implementation class.)</p>
<p>Also, I've never coded in this style and am open to better ways to code this.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're probably looking for the <a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow" title="super"><code>super()</code></a> function.
Calling <code>super().something()</code> calls the method <code>something()</code> of the parent class. It makes sure (using <a href="https://docs.python.org/3/library/stdtypes.html#class.__mro__" rel="nofollow"><code>__mro__</code></a>) to call the parent classes' method only once.</p>
<p>i.e. your code will look like this:</p>
<pre><code>class AnLinearAxis(AnAxis, LinearAxis):
    def move_linear(self, move_um):
        pass

    def __init__(self):
        # Do stuff...
        super().__init__()
</code></pre>
<p>Keep in mind you do not need to pass self or the metaclass. The metaclass passes by the inheritance. Also, you do not need to call super more than once. Super will call all of the parent classes' methods automatically.</p>
<p>Regarding the interface, it looks good but there's no need to pass <code>metaclass=ABCMeta</code> if the class you're inheriting from already has it. The metaclass is passed on by inheritance.</p>
</div>
<span class="comment-copy">Why are you passing <code>metaclass=ABCMeta</code> to your <code>__init__</code> method? Also you should consider using <code>super</code></span>
<span class="comment-copy">That was a typo!  Fixed, thanks.</span>
<span class="comment-copy">Essential reading: <a href="https://rhettinger.wordpress.com/2011/05/26/super-considered-super/" rel="nofollow noreferrer">Python's super() considered super</a></span>
