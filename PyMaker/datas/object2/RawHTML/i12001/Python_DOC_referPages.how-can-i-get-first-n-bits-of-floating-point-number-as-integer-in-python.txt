<div class="post-text" itemprop="text">
<p>Suppose I have <code>0.625</code> as a floating point is <code>0b.101</code>, so if I want the first two bits of that as an integer i.e. <code>0b10</code> = <code>2</code>, how can I achieve this in python?</p>
<p>I've tried taking the number to a power of 2 and casting to an int, so if I want <code>n</code> bits I do <code>int(0.625*(2**n))</code>. But that is not working for me.</p>
<p>The problem occurs when I have a number greater than <code>1</code> so <code>24.548838022726972</code> will give me <code>392</code> rather than <code>12</code> for the first four bits. (<code>24.548838022726972</code> = <code>0b11000.100011001...</code>)</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want the <code>n</code> most significant bits, one way to start is to use <a href="https://docs.python.org/3/library/math.html#math.frexp" rel="nofollow"><code>math.frexp</code></a> to normalise your number to lie in the range <code>[0.5, 1.0)</code>. Then multiplying by <code>2**n</code> and taking the integer part will give you what you need.</p>
<pre><code>&gt;&gt;&gt; import math
&gt;&gt;&gt; math.frexp(24.54883)  # significand and exponent
(0.7671509375, 5)
&gt;&gt;&gt; math.frexp(24.54883)[0]  # just the significand
0.7671509375
&gt;&gt;&gt; int(math.frexp(24.54883)[0] * 2**4)  # most significant 4 bits
12
</code></pre>
<p>Instead of explicitly computing a power of <code>2</code> to scale by, you could use the <a href="https://docs.python.org/3/library/math.html#math.ldexp" rel="nofollow"><code>math.ldexp</code></a> function to do the second part of the operation.</p>
<pre><code>&gt;&gt;&gt; int(math.ldexp(math.frexp(24.54883)[0], 4))
12
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/struct.html" rel="nofollow"><code>struct.pack()</code></a> to convert a floating point number to a list of bytes, and then extract the bits you're interested in from there.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>While the number is greater than or equal to 1, divide by 2.
Multiply by 2**n
Round or truncate to an integer.
</code></pre>
<p>Here is a simplified Java program for the test case:</p>
<pre><code>public class Test {
  public static void main(String[] args) {
    double in = 24.548838022726972;
    while (in &gt;= 1) {
      in /= 2;
      System.out.println(in);
    }
    in *= 16;
    System.out.println(in);
    System.out.println((int) in);
  }
}
</code></pre>
<p>Output:</p>
<pre><code>12.274419011363486
6.137209505681743
3.0686047528408715
1.5343023764204358
0.7671511882102179
12.274419011363486
12
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A direct way to obtain the significant bits of the mantissa in the <a href="https://en.wikipedia.org/wiki/IEEE_floating_point" rel="nofollow">IEEE 754 format</a> with builtin functions is: </p>
<pre><code>In [2]: u=24.54883

In [3]: bin(u.as_integer_ratio()[0])
Out[3]: '0b11000100011001000000000011111011101010001000001001101'

In [4]: u=.625

In [5]: bin(u.as_integer_ratio()[0])
Out[5]: '0b101'
</code></pre>
<p>You obtain   <code>0b1</code> + mantissa without non significant 0.</p>
</div>
<span class="comment-copy">The following example code you provide , outputs <code>2</code> for me , what's problem with yours?</span>
<span class="comment-copy">@Arman Edited, sorry, I didn't at first include the real issue</span>
<span class="comment-copy">why first two bit for 0.625 ant first four for 24.5488... ?</span>
<span class="comment-copy">@B.M. Just for examples, I want to be able to do this with any number of bits</span>
<span class="comment-copy">You can use <code>math.frexp</code> to normalise your number so that it lies between <code>0.5</code> and <code>1.0</code>. For example: <code>int(math.frexp(24.54883)[0] * 2**4)</code> gives your the first four bits of <code>24.54883</code>.</span>
<span class="comment-copy">The <code>as_integer_ratio</code> method always reduces to lowest terms, so the numerator could have anything from <code>1</code> bit to <code>53</code> bits. (i.e., <code>len(bits)</code> could be anything between <code>3</code> and <code>55</code>).</span>
<span class="comment-copy">Thanks, you are right. Edited.</span>
