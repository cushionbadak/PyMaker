<div class="post-text" itemprop="text">
<p>Is it possible to not assign a scientific/standard form number when doing calculations? </p>
<p>for example right now in one of the lines in my code has:
    number = 10**23 * 1.1</p>
<p>which is supposed to evaluate to 110000000000......0 or whatever, instead im assigned 1.1e+23 which is very annoying because im trying to convert IEEE754 to decimal and making specific things print out but it wont work because of the scientific notation of 1.1e+23</p>
<p>Ive tried looking around but no simple concise answers</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot change this by default. The default behavior when displaying a float is always to move to scientific notation if the exponent is larger than the float’s precision.</p>
<p>The only way to change this is by <em>explicitly</em> formatting it in another way. If you know what precision your displayed number should have, you can use <a href="https://docs.python.org/3/library/functions.html#format" rel="nofollow"><code>format</code></a>:</p>
<pre><code>&gt;&gt;&gt; number
1.1e+23
&gt;&gt;&gt; format(number, 'f')
'110000000000000004194304.000000'
&gt;&gt;&gt; format(number, '.0f')
'110000000000000004194304'
</code></pre>
<p>You can also use that with format strings:</p>
<pre><code>&gt;&gt;&gt; 'The number is {:.0f}'.format(number)
'The number is 110000000000000004194304'
</code></pre>
<p>If your goal is to conver the float into an integer, then you should just do that. Integers have infinite precision, so they are not displayed using scientific notation. You could for example <code>round</code> or cut off the digits after the decimal point:</p>
<pre><code>&gt;&gt;&gt; round(number)
110000000000000004194304
&gt;&gt;&gt; int(number)
110000000000000004194304
</code></pre>
<p>For high-precision decimals, you can use the <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow"><code>Decimal</code></a> type. It allows for decimals to have an arbitrary precision:</p>
<pre><code>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; d = 10**23 * Decimal('1.1')
&gt;&gt;&gt; d
Decimal('110000000000000000000000.0')
&gt;&gt;&gt; int(d)
110000000000000000000000
</code></pre>
</div>
<span class="comment-copy">Not sure it will answer, but have you tried .format(var, 'f') so that it formats as a float</span>
<span class="comment-copy">Maybe try <code>11 * 10**22</code>? When you use <code>1.1</code>, you're always going to get a float.</span>
<span class="comment-copy">@user6056648 format(var, 'f') seems to work... however I do get accuracy problems i.e I received "110000000000000004194304.000000", any way to make this disappear?</span>
<span class="comment-copy">I see, this poses a huge problem, basically what im trying to do is convert the fractional part of an IEEE754 (hence the 1.100000000. . .0 * 23) and converting it into an integer and float value. The problem I have is that I have the string 1.10000. . .0 , the exponent (23) but dont know how to manage to convert it into an integer which happens to be 3 and its float which is 3.0, any help?</span>
<span class="comment-copy">Well, you can’t represent the exact number <code>110000000000000000000000</code> with an IEEE754 double. That’s just not possible due to how the number is stored. If you need higher precision, you could use the <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer"><code>Decimal</code></a> type: <code>10**23 * Decimal('1.1')</code> gives you <code>Decimal('110000000000000000000000.0')</code></span>
