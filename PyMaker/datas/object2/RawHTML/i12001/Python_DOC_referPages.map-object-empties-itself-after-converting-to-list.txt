<div class="post-text" itemprop="text">
<p>I don't understand why the <code>map</code> object flushes itself(if that's what it is doing).</p>
<p>Here is what I tried.</p>
<pre><code>&gt;&gt;&gt; squares = map(lambda x: x**2, range(10))
&gt;&gt;&gt; squares
&lt;map object at 0x7f25a1cae2e8&gt;
&gt;&gt;&gt; square_list = list(squares)
&gt;&gt;&gt; square_list
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
&gt;&gt;&gt; list(squares)
[]
</code></pre>
<p>Why is it empty?
Same again for below</p>
<pre><code>&gt;&gt;&gt; squares = map(lambda x: x**2, range(10))
&gt;&gt;&gt; squares
&lt;map object at 0x7f25a1cae320&gt;
&gt;&gt;&gt; [x for x in list(squares)]
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
&gt;&gt;&gt; list(squares)
[]
&gt;&gt;&gt; squares
&lt;map object at 0x7f25a1cae320&gt;
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.x, <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow"><code>map</code></a> doesn't return a list object, instead it returns an iterator.</p>
<blockquote>
<p>Return an iterator that applies function to every item of iterable, yielding the results.</p>
</blockquote>
<p>Basically, it doesn't process all the elements of the iterable passed immediately. It just processes one at a time, whenever asked for it.</p>
<p>In your case, all the elements from the <code>range</code> objects are processed one by one and when all of them are processed, the iterator object returned by <code>map</code> is exhausted (there is nothing else left to be processed). That is why you are getting empty list, when you do <code>list(squares)</code> the second time.</p>
<p>For example,</p>
<pre><code>&gt;&gt;&gt; squares = map(lambda x: x**2, range(10))
&gt;&gt;&gt; next(squares)
0
&gt;&gt;&gt; next(squares)
1
&gt;&gt;&gt; next(squares)
4
&gt;&gt;&gt; next(squares)
9
</code></pre>
<p>here, we have just processed the first four items, on demand. The values were not calculated before-hand, but the <code>lambda</code> function is called with the next value from the iterator passed to squares (<code>range(10)</code>), when you actually did <code>next(squares)</code> and the value is returned.</p>
<pre><code>&gt;&gt;&gt; list(squares)
[16, 25, 36, 49, 64, 81]
</code></pre>
<p>now, only the rest of the items in the iterator are processed. If you try to get the next item,</p>
<pre><code>&gt;&gt;&gt; next(squares)
Traceback (most recent call last):
  File "&lt;input&gt;", line 1, in &lt;module&gt;
StopIteration
</code></pre>
<p>since the <code>squares</code> is exhausted, <code>StopIteration</code> is raised and that is why <code>list(squares)</code> is not getting any elements to process and returns an empty list.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's covered <a href="https://stackoverflow.com/questions/1303347/getting-a-map-to-return-a-list-in-python-3-x">here</a>, <a href="https://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python">here</a>, <a href="https://stackoverflow.com/questions/102535/what-can-you-use-python-generator-functions-for/23530101#23530101">here</a>, and <a href="https://stackoverflow.com/questions/245792/when-is-not-a-good-time-to-use-python-generators">here</a></p>
<p>"In Python 3+, many processes that iterate over iterables return iterators themselves. In most cases, this ends up saving memory, and should make things go faster. " - user Triptych</p>
</div>
<div class="post-text" itemprop="text">
<p>@thefourtheye and @jDo have explained it all.
if you dont want your "squares" object to be flushed ,make it a list by :</p>
<pre><code>squares = list(map(lambda x: x**2, range(10)))
</code></pre>
<p>So, now every time you want to use squares element,you can use it.</p>
</div>
<span class="comment-copy">But how does that explain the empty list being returned?</span>
<span class="comment-copy">Generator functions are efficient memory-wise precisely for this reason. They do not store all the values generated in memory. Instead, a single value/iteration is generated and returned each time you call next() or use it in an iterative loop. If you want to keep the list, you have to assign it to a variable during the first - and only - round of iterations like so <code>squares_list = list(squares)</code>. Makes sense?</span>
<span class="comment-copy">Yes. Thanks for explaining :)</span>
