<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/207000/what-is-the-difference-between-class-and-instance-attributes">What is the difference between class and instance attributes?</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>I just started learning Python and come from a Java/C++ background and find the following behavior a little confusing. After calling s.add_trick("Woof") and d.add_trick("Woof"), s.tricks and d.tricks both contain ["Woof", "Bark"]. However, calling party() doesn't have the same behavior. Can someone explain? </p>
<pre><code>class PartyAnimal:
    x = 0
    name = ''
    tricks = []

    def __init__(self, name):
        self.name = name

    def party(self):
        self.x += 1

    def add_trick(self, trick):
        self.tricks.append(trick)

s = PartyAnimal("Sally")
d = PartyAnimal("Danny")

s.party()
d.party()
s.add_trick("Woof")
d.add_trick("Bark")

print 's', s.name, s.x, s.tricks
print 'd', d.name, d.x, d.tricks
</code></pre>
<p>Output is this:</p>
<pre><code>s Sally 1 ['Woof', 'Bark']
d Danny 1 ['Woof', 'Bark']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're creating one <code>tricks</code> list that is shared by all instances of class. Create a new list in the <code>__init__</code> instead:</p>
<pre><code>def __init__(self, name):
    self.name = name
    self.tricks = []
</code></pre>
</div>
<span class="comment-copy"><code>tricks</code> is a class instance so there is only one copy shared by every instance of <code>PartyAnimal()</code>.</span>
<span class="comment-copy">In <code>C++</code> your variables <code>x</code>, <code>name</code> and <code>tricks</code> would be <code>static</code> i.e. there are shared by all instances of your class. To make them specific to an instance of your class, assign them to <code>self</code> only.</span>
<span class="comment-copy">This is covered in the dupe target, but an important difference is that <code>self.tricks.append(trick)</code> modifies the existing <code>tricks</code> class attribute, but <code>self.x += 1</code> does <i>not</i> modify the <code>x</code>  class attribute because you're performing an assignment. Instead, it creates an <code>x</code> instance attribute (which shadows the class attribute of the same name) to hold the new integer object.</span>
<span class="comment-copy">(cont) If you did <code>self.tricks = self.tricks + [trick]</code> that would also create a <code>tricks</code> instance attribute, although using <code>+=</code> wouldn't, it'd just mutate the class attribute, like the <code>.append</code> method does. <code>+=</code> on an integer <i>can't</i> mutate the integer because Python integers are immutable.</span>
<span class="comment-copy">@shahkalpesh No because that is semantically different than having each instance have its own list. Putting the list at the class level would be like making it <code>static</code> in C style languages.</span>
<span class="comment-copy">it is totally OK <b>if</b> it is supposed to be a class variable, akin to <code>static</code> member variable in Java/C#</span>
<span class="comment-copy">@DannyLiu because you're not mutating that integer or string, you're setting the <code>x</code> or <code>name</code> attribute to point to another object instead.</span>
<span class="comment-copy">@shahkalpesh never too much reputation to start <a href="https://docs.python.org/3/tutorial/classes.html#class-and-instance-variables" rel="nofollow noreferrer">reading Python 3 tutorials</a></span>
<span class="comment-copy">@AnttiHaapala got it. Coming from c# background, I thought <code>self</code> in python is <code>this</code> in c#/java. Hence, you can't do <code>this</code> to refer to a class level variable (<code>static</code> in c#/java). Thank you. I learned something new today.</span>
