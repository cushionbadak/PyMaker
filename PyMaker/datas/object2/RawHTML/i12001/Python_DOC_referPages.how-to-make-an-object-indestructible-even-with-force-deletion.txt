<div class="post-text" itemprop="text">
<p>How can I make an object such <strong>indestructible</strong> that even with using <code>del</code> reserved word (<em>I think it means force deletion</em>) it won't be deleted?</p>
<p>I'm storing the objects in a list, like this:</p>
<pre><code>list = [obj1, obj2, obj3, obj4 ....]
del list[0]
</code></pre>
<p>I think I have to do some tricks with <code>__del__()</code> within the class of object but how?</p>
</div>
<div class="post-text" itemprop="text">
<p>Objects in python have reference count which basically means the amount of places an object exist in. Using <code>del</code> removes one reference to the object (it does not force delete it). <a href="https://docs.python.org/3/reference/datamodel.html#object.__del__" rel="nofollow"><code>__del__</code></a> is then called when 0 references are left. You may create a new reference to the object and this way prevent it's deletion like so:</p>
<pre><code>class obj:
    def __del__(self):
         global _ref
         _ref = self
         return
</code></pre>
<p>This will prevent the deletion of the object by creating a global reference.
Keep in mind it is not suggested to do so as it will prevent the garbage collector from working correctly.</p>
<p><strong>UPDATE:</strong></p>
<p>In case you are using a list, you should convert it to an immutable object such as a <code>tuple</code> in order to prevent changes like deletion as so:</p>
<pre><code>mylist = [obj1, obj2, obj3, obj4 ....]
mylist = tuple(mylist)
</code></pre>
</div>
<span class="comment-copy">Objects are deleted only when there are no names that refer to them.  In that case, your object can't be used, so why do you want it to be around?</span>
<span class="comment-copy"><code>del</code> doesn't mean "force deletion".</span>
<span class="comment-copy"><code>del</code> deletes a <i>name</i>, not an object.  The object is deleted only if all names that point to it are removed.</span>
<span class="comment-copy">@mertyildiran: That question indicates a misunderstanding of <code>del</code> and object deletion.  The <i>answers</i> to the question show better ways of achieving what that question was trying to do with <code>del</code>.  What are <i>you</i> trying to do with <code>del</code>?  Basically, when an object gets deleted in Python is not under your control.  There is no such thing as "force deletion" in Python.</span>
<span class="comment-copy">@mertyildiran This is not C, you do not allocate memory blocks, instead you create objects and give names to them.</span>
<span class="comment-copy">I've just realized that I need to use an immutable object like <b>tuple</b> to store names that are referencing to my "protected" object. Please add this to your answer and I will make it correct answer.</span>
<span class="comment-copy">@mertyildiran Added, but keep in mind converting to tuple will not allow any modification to the tuple itself (It will however allow modification to the inner objects)</span>
