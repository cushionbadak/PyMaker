<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/15147751/how-to-check-if-all-items-in-a-list-are-there-in-another-list">How to check if all items in a list are there in another list?</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>I want to be able to find whether all elements in list1 exist in list2, both lists containing chars. The number of times the same element appears in each list is important.</p>
<p>I tried using subsets however that didn't take note of the number of times an item appeared in a list</p>
<p>e.g. </p>
<pre><code>list1 = [a, b, c]
list2 = [a, b, c, b]
</code></pre>
<p>It would find list2 a subset of list1, whereas I would only want my function to execute if:</p>
<pre><code>list1 = [a, b, c, b, i]
list2 = [a, c, b, b]
</code></pre>
<p>as this means <strong>all</strong> items in list2 appear in list1.</p>
<p>If anyone was interested, using a counter was inefficient for large strings so I ended up adding all elements of list1 to a dictionary, with the values being number of occurances of each element and subtracted all elements of list2. If any values ended up negative not all items in list2 appear in list1</p>
</div>
<div class="post-text" itemprop="text">
<p>You could count the items in both lists with <a href="https://docs.python.org/3.5/library/collections.html#collections.Counter" rel="nofollow"><code>collections.Counter</code></a> and check that the counts for the corresponding items in the first list are &gt;= than those in the second:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; c = Counter("abcbi")
&gt;&gt;&gt; d = Counter("acbb")
&gt;&gt;&gt; c.subtract(d)
&gt;&gt;&gt; if all(v &gt;= 0 for k, v in c.items()):
...     print("All items exist")
... 
All items exist
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>collections.Counter</code></a></p>
<pre><code>from collections import Counter
list1 = ['a', 'b', 'c']
list2 = ['a', 'b', 'c', 'b']    
c1 = Counter(list1)
c2 = Counter(list2)

for key, count in c1.iteritems():
    if c2[key] &lt; count:
        break
else:
    print 'list2 has all the chracters in list1'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For your problem, you'll need to</p>
<ol>
<li>Verify that all elements in <code>list2</code> appear in <code>list1</code> but</li>
<li>No element in <code>list2</code> appears more often than it does in <code>list2</code></li>
</ol>
<p>This can be done quite easily using <code>collections.Counter</code>:</p>
<pre><code>import collections

def f(list1, list2):
    d1 = collections.Counter(list1)
    d2 = collections.Counter(list2)
    return set(d1.keys()).issuperset(set(d2.keys())) \
       and all(d2[k] &lt;= d1[k] for k in d1.keys())
</code></pre>
<p>This first checks (using <code>set.issuperset</code>) that all the different elements of <code>list2</code> are contained in <code>list1</code>. If that's true, it checks how often each element occurs in <code>list2</code> and verifies that it appears less often (or equally often) in <code>list1</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://python-reference.readthedocs.org/en/latest/docs/sets/issuperset.html" rel="nofollow"><code>issuperset</code></a>:</p>
<pre><code>&gt;&gt;&gt; list1 = ['a', 'b', 'c', 'b', 'i']
&gt;&gt;&gt; list2 = ['a', 'c', 'b', 'b']
&gt;&gt;&gt; set(list1).issuperset(set(list2)) # all items of list2 exist in list1
True
&gt;&gt;&gt; set(list2).issuperset(set(list1)) # all items of list1 does not exist in list 2
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try to iterate over list2 and remove elements from list1, when found:</p>
<pre><code>list1 = ['a','b', 'c', 'b', 'i']
list2 = ['a', 'c', 'b', 'b']
for elem in list2:
    try:
        del list1[list1.index(elem)]
    except ValueError:
        return False
return True
</code></pre>
<p>If you need to keep list1, just copy it beforehand</p>
</div>
<span class="comment-copy">Get the count in both lists and then check if the count of all items in <code>list2</code> is exactly same in <code>list1</code>: <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">docs.python.org/3/library/collections.html#collections.Counter</a></span>
<span class="comment-copy">This is very unclear, please give a better example of input/output</span>
<span class="comment-copy">And this answer <a href="http://stackoverflow.com/a/16579133/2141635">stackoverflow.com/a/16579133/2141635</a></span>
<span class="comment-copy">This is very nice, I didn't know of <code>subtract</code> before! I think we have a winner.</span>
<span class="comment-copy">This works however is very inefficient if the counters have large strings</span>
<span class="comment-copy">This is a more verbose version of what "eugene y" wrote, if possible I'd rather go with his version than mine.</span>
<span class="comment-copy"><i>I tried using subsets however that didn't take note of the <b>number of times</b> an item appeared in a list</i></span>
<span class="comment-copy">From the question statement, this seems <i>to me</i> as the correct answer</span>
<span class="comment-copy">This does nothing different from what I can see. It doesn't acknowledge item frequency in the lists</span>
<span class="comment-copy">Again, from what you state in your question this is what you "want". If you would be more clear we could give you a better answer.</span>
