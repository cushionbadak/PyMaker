<div class="post-text" itemprop="text">
<p>What is the difference between iterators and generators? Some examples for when you would use each case would be helpful.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>iterator</code> is a more general concept: any object whose class has a <code>next</code> method (<code>__next__</code> in Python 3) and an <code>__iter__</code> method that does <code>return self</code>.</p>
<p>Every generator is an iterator, but not vice versa.  A generator is built by calling a function that has one or more <code>yield</code> expressions (<code>yield</code> statements, in Python 2.5 and earlier), and is an object that meets the previous paragraph's definition of an <code>iterator</code>.</p>
<p>You may want to use a custom iterator, rather than a generator, when you need a class with somewhat complex state-maintaining behavior, or want to expose other methods besides <code>next</code> (and <code>__iter__</code> and <code>__init__</code>).  Most often, a generator (sometimes, for sufficiently simple needs, a generator <em>expression</em>) is sufficient, and it's simpler to code because state maintenance (within reasonable limits) is basically "done for you" by the frame getting suspended and resumed.</p>
<p>For example, a generator such as:</p>
<pre><code>def squares(start, stop):
    for i in range(start, stop):
        yield i * i

generator = squares(a, b)
</code></pre>
<p>or the equivalent generator expression (genexp)</p>
<pre><code>generator = (i*i for i in range(a, b))
</code></pre>
<p>would take more code to build as a custom iterator:</p>
<pre><code>class Squares(object):
    def __init__(self, start, stop):
       self.start = start
       self.stop = stop
    def __iter__(self): return self
    def next(self):
       if self.start &gt;= self.stop:
           raise StopIteration
       current = self.start * self.start
       self.start += 1
       return current

iterator = Squares(a, b)
</code></pre>
<p>But, of course, with class <code>Squares</code> you could easily offer extra methods, i.e.</p>
<pre><code>    def current(self):
       return self.start
</code></pre>
<p>if you have any actual need for such extra functionality in your application.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<h1>What is the difference between iterators and generators? Some examples for when you would use each case would be helpful.</h1>
</blockquote>
<p>In summary: Iterators are objects that have an <code>__iter__</code> and a <code>__next__</code> (<code>next</code> in Python 2) method. Generators provide an easy, built-in way to create instances of Iterators.</p>
<p>A function with yield in it is still a function, that, when called, returns an instance of a generator object:</p>
<pre><code>def a_function():
    "when called, returns generator object"
    yield
</code></pre>
<p>A generator expression also returns a generator:</p>
<pre><code>a_generator = (i for i in range(0))
</code></pre>
<p>For a more in-depth exposition and examples, keep reading.</p>
<h2>A Generator <em>is</em> an Iterator</h2>
<p>Specifically, generator is a subtype of iterator.</p>
<pre><code>&gt;&gt;&gt; import collections, types
&gt;&gt;&gt; issubclass(types.GeneratorType, collections.Iterator)
True
</code></pre>
<p>We can create a generator several ways. A very common and simple way to do so is with a function.</p>
<p>Specifically, a function with yield in it is a function, that, when called, returns a generator:</p>
<pre><code>&gt;&gt;&gt; def a_function():
        "just a function definition with yield in it"
        yield
&gt;&gt;&gt; type(a_function)
&lt;class 'function'&gt;
&gt;&gt;&gt; a_generator = a_function()  # when called
&gt;&gt;&gt; type(a_generator)           # returns a generator
&lt;class 'generator'&gt;
</code></pre>
<p>And a generator, again, is an Iterator:</p>
<pre><code>&gt;&gt;&gt; isinstance(a_generator, collections.Iterator)
True
</code></pre>
<h2>An Iterator <em>is</em> an Iterable</h2>
<p>An Iterator is an Iterable, </p>
<pre><code>&gt;&gt;&gt; issubclass(collections.Iterator, collections.Iterable)
True
</code></pre>
<p>which requires an <code>__iter__</code> method that returns an Iterator:</p>
<pre><code>&gt;&gt;&gt; collections.Iterable()
Traceback (most recent call last):
  File "&lt;pyshell#79&gt;", line 1, in &lt;module&gt;
    collections.Iterable()
TypeError: Can't instantiate abstract class Iterable with abstract methods __iter__
</code></pre>
<p>Some examples of iterables are the built-in tuples, lists, dictionaries, sets, frozen sets, strings, byte strings, byte arrays, ranges and memoryviews:</p>
<pre><code>&gt;&gt;&gt; all(isinstance(element, collections.Iterable) for element in (
        (), [], {}, set(), frozenset(), '', b'', bytearray(), range(0), memoryview(b'')))
True
</code></pre>
<h2>Iterators <em>require</em> a <code>next</code> or <code>__next__</code> method</h2>
<p>In Python 2: </p>
<pre><code>&gt;&gt;&gt; collections.Iterator()
Traceback (most recent call last):
  File "&lt;pyshell#80&gt;", line 1, in &lt;module&gt;
    collections.Iterator()
TypeError: Can't instantiate abstract class Iterator with abstract methods next
</code></pre>
<p>And in Python 3:</p>
<pre><code>&gt;&gt;&gt; collections.Iterator()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: Can't instantiate abstract class Iterator with abstract methods __next__
</code></pre>
<p>We can get the iterators from the built-in objects (or custom objects) with the <code>iter</code> function:</p>
<pre><code>&gt;&gt;&gt; all(isinstance(iter(element), collections.Iterator) for element in (
        (), [], {}, set(), frozenset(), '', b'', bytearray(), range(0), memoryview(b'')))
True
</code></pre>
<p>The <code>__iter__</code> method is called when you attempt to use an object with a for-loop. Then the <code>__next__</code> method is called on the iterator object to get each item out for the loop. The iterator raises <code>StopIteration</code> when you have exhausted it, and it cannot be reused at that point.</p>
<h2>From the documentation</h2>
<p>From the Generator Types section of the Iterator Types section of the Built-in Types <a href="https://docs.python.org/library/stdtypes.html#iterator-types" rel="noreferrer">documentation</a>:</p>
<blockquote>
<p>Python’s <strong>generators provide a convenient way to implement the iterator protocol.</strong> If a container object’s <code>__iter__()</code> method is implemented as a generator, it will automatically return an iterator object (technically, a generator object) supplying the <code>__iter__()</code> and <code>next()</code> [<code>__next__()</code> in Python 3] methods. More information about generators can be found in the documentation for the yield expression.</p>
</blockquote>
<p>(Emphasis added.)</p>
<p>So from this we learn that Generators are a (convenient) type of Iterator. </p>
<h2>Example Iterator Objects</h2>
<p>You might create object that implements the Iterator protocol by creating or extending your own object.</p>
<pre><code>class Yes(collections.Iterator):

    def __init__(self, stop):
        self.x = 0
        self.stop = stop

    def __iter__(self):
        return self

    def next(self):
        if self.x &lt; self.stop:
            self.x += 1
            return 'yes'
        else:
            # Iterators must raise when done, else considered broken
            raise StopIteration

    __next__ = next # Python 3 compatibility
</code></pre>
<p>But it's easier to simply use a Generator to do this:</p>
<pre><code>def yes(stop):
    for _ in range(stop):
        yield 'yes'
</code></pre>
<p>Or perhaps simpler, a Generator Expression (works similarly to list comprehensions):</p>
<pre><code>yes_expr = ('yes' for _ in range(stop))
</code></pre>
<p>They can all be used in the same way:</p>
<pre><code>&gt;&gt;&gt; stop = 4             
&gt;&gt;&gt; for i, y1, y2, y3 in zip(range(stop), Yes(stop), yes(stop), 
                             ('yes' for _ in range(stop))):
...     print('{0}: {1} == {2} == {3}'.format(i, y1, y2, y3))
...     
0: yes == yes == yes
1: yes == yes == yes
2: yes == yes == yes
3: yes == yes == yes
</code></pre>
<h2>Conclusion</h2>
<p>You can use the Iterator protocol directly when you need to extend a Python object as an object that can be iterated over. </p>
<p>However, in the vast majority of cases, you are best suited to use <code>yield</code> to define a function that returns a Generator Iterator or consider Generator Expressions.</p>
<p>Finally, note that generators provide even more functionality as coroutines. <a href="https://stackoverflow.com/a/31042491/541136">I explain Generators, along with the <code>yield</code> statement, in depth on my answer to "What does the “yield” keyword do?".</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Iterators:</p>
<p>Iterator are objects which uses <code>next()</code> method to get next value of sequence.</p>
<p>Generators:</p>
<p>A generator is a function that produces or yields a sequence of values using <code>yield</code> method. </p>
<p>Every <code>next()</code> method call on generator object(for ex: <code>f</code> as in below example) returned by generator function(for ex: <code>foo()</code> function in below example), generates next value in sequence.</p>
<p>When a generator function is called, it returns an generator object without even beginning execution of the function. When <code>next()</code> method is called for the first time, the function starts executing until it reaches yield statement which returns the yielded value. The yield keeps track of i.e. remembers last execution. And second <code>next()</code> call continues from previous value.</p>
<p>The following example demonstrates the interplay between yield and call to next method on generator object.</p>
<pre><code>&gt;&gt;&gt; def foo():
...     print "begin"
...     for i in range(3):
...         print "before yield", i
...         yield i
...         print "after yield", i
...     print "end"
...
&gt;&gt;&gt; f = foo()
&gt;&gt;&gt; f.next()
begin
before yield 0            # Control is in for loop
0
&gt;&gt;&gt; f.next()
after yield 0             
before yield 1            # Continue for loop
1
&gt;&gt;&gt; f.next()
after yield 1
before yield 2
2
&gt;&gt;&gt; f.next()
after yield 2
end
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Adding an answer because none of the existing answers specifically address the confusion in the official literature.</p>
<p><strong><em>Generator functions</em></strong> are ordinary functions defined using <code>yield</code> instead of <code>return</code>. When called, a generator function returns a <strong><em>generator object</em></strong>, which is a kind of iterator - it has a <code>next()</code> method. When you call <code>next()</code>, the next value yielded by the generator function is returned.</p>
<p>Either the function or the object may be called the "generator" depending on which Python source document you read. The <a href="https://docs.python.org/2/glossary.html#term-generator" rel="noreferrer">Python glossary</a> says generator functions, while the <a href="https://wiki.python.org/moin/Generators" rel="noreferrer">Python wiki</a> implies generator objects. The <a href="https://docs.python.org/2/tutorial/classes.html#generators" rel="noreferrer">Python tutorial</a> remarkably manages to imply <em>both</em> usages in the space of three sentences:</p>
<blockquote>
<p>Generators are a simple and powerful tool for creating iterators. They are written like regular functions but use the yield statement whenever they want to return data. Each time next() is called on it, the generator resumes where it left off (it remembers all the data values and which statement was last executed). </p>
</blockquote>
<p>The first two sentences identify generators with generator functions, while the third sentence identifies them with generator objects.</p>
<p>Despite all this confusion, one can seek out the <a href="https://docs.python.org/2/reference/expressions.html#yield-expressions" rel="noreferrer">Python language reference</a> for the clear and final word:</p>
<blockquote>
<p>The yield expression is only used when defining a generator function, and can only be used in the body of a function definition. Using a yield expression in a function definition is sufficient to cause that definition to create a generator function instead of a normal function.</p>
<p>When a generator function is called, it returns an iterator known as a generator. That generator then controls the execution of a generator function. </p>
</blockquote>
<p>So, in formal and precise usage, <strong><em>"generator" unqualified means generator object, not generator function.</em></strong> </p>
<p>The above references are for Python 2 but <a href="https://docs.python.org/3/reference/expressions.html#yield-expressions" rel="noreferrer">Python 3 language reference</a> says the same thing. However, the <a href="https://docs.python.org/3/glossary.html" rel="noreferrer">Python 3 glossary</a> states that</p>
<blockquote>
<p><strong>generator</strong> ... Usually refers to a generator function, but may refer to a generator iterator in some contexts. In cases where the intended meaning isn’t clear, using the full terms avoids ambiguity.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><strong>Generator Function, Generator Object, Generator:</strong></p>
</blockquote>
<p>A <strong>Generator function</strong> is just like a regular function in Python but it contains one or more <code>yield</code> statements. Generator functions is a great tool to create  <strong>Iterator</strong> objects as easy as possible.  The <strong>Iterator</strong> object returend by generator function is also called <strong>Generator object</strong> or <strong>Generator</strong>. </p>
<p>In this example I have created a Generator function which returns a Generator object <code>&lt;generator object fib at 0x01342480&gt;</code>. Just like other iterators, Generator objects can be used in a  <code>for</code> loop  or with   the built-in function <code>next()</code> which returns the next value from generator. </p>
<pre><code>def fib(max):
    a, b = 0, 1
    for i in range(max):
        yield a
        a, b = b, a + b
print(fib(10))             #&lt;generator object fib at 0x01342480&gt;

for i in fib(10):
    print(i)               # 0 1 1 2 3 5 8 13 21 34


print(next(myfib))         #0
print(next(myfib))         #1
print(next(myfib))         #1
print(next(myfib))         #2
</code></pre>
<p><strong>So a generator function is the easiest way to create an Iterator object.</strong></p>
<blockquote>
<p><strong>Iterator</strong>:</p>
</blockquote>
<p>Every <strong>generator object</strong> is an <strong>iterator</strong> but not vice versa.  A custom  iterator object  can  be created if its class implements  <code>__iter__</code> and <code>__next__</code> method (also called iterator protocol). </p>
<p>However, it is  much easier to use generators function to create <strong>iterators</strong> because they simplify their creation,  but a custom Iterator gives you more freedom and you can also implement other methods according to your requirements as shown in the  below example. </p>
<pre><code>class Fib:
    def __init__(self,max):
        self.current=0
        self.next=1
        self.max=max
        self.count=0

    def __iter__(self):
        return self

    def __next__(self):
        if self.count&gt;self.max:
            raise StopIteration
        else:
            self.current,self.next=self.next,(self.current+self.next)
            self.count+=1
            return self.next-self.current

    def __str__(self):
        return "Generator object"

itobj=Fib(4)
print(itobj)               #Generator object

for i in Fib(4):  
    print(i)               #0 1 1 2

print(next(itobj))         #0
print(next(itobj))         #1
print(next(itobj))         #1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Everybody has a really nice and verbose answer with examples and I really appreciate it. I just wanted to give a short few lines answer for people who are still not quite clear conceptually:</p>
<p><em>If you create your own iterator, it is a little bit involved - you have 
to create a class and at least implement the iter and the next methods. But what if you don't want to go through this hassle and want to quickly create an iterator. Fortunately, Python provides a short-cut way to defining an iterator. All you need to do is define a function with at least 1 call to yield and now when you call that function it will return "<strong>something</strong>" which will act like an iterator (you can call next method and use it in a for loop). This <strong>something</strong> has a name in Python called Generator</em></p>
<p>Hope that clarifies a bit.</p>
</div>
<div class="post-text" itemprop="text">
<p>Previous answers missed this addition: a generator has a <code>close</code> method, while typical iterators don’t. The <code>close</code> method triggers a <code>StopIteration</code> exception in the generator, which may be caught in a <code>finally</code> clause in that iterator, to get a chance to run some clean‑up. This abstraction makes it most usable in the large than simple iterators. One can close a generator as one could close a file, without having to bother about what’s underneath.</p>
<p>That said, my personal answer to the first question would be: iteratable has an <code>__iter__</code> method only, typical iterators have a <code>__next__</code> method only, generators has both an <code>__iter__</code> and a <code>__next__</code> and an additional <code>close</code>.</p>
<p>For the second question, my personal answer would be: in a public interface, I tend to favor generators a lot, since it’s more resilient: the <code>close</code> method an a greater composability with <code>yield from</code>. Locally, I may use iterators, but only if it’s a flat and simple structure (iterators does not compose easily) and if there are reasons to believe the sequence is rather short especially if it may be stopped before it reach the end. I tend to look at iterators as a low level primitive, except as literals.</p>
<p>For control flow matters, generators are an as much important concept as promises: both are abstract and composable.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can compare both approaches for the same data:</p>
<pre><code>def myGeneratorList(n):
    for i in range(n):
        yield i

def myIterableList(n):
    ll = n*[None]
    for i in range(n):
        ll[i] = i
    return ll

# Same values
ll1 = myGeneratorList(10)
ll2 = myIterableList(10)
for i1, i2 in zip(ll1, ll2):
    print("{} {}".format(i1, i2))

# Generator can only be read once
ll1 = myGeneratorList(10)
ll2 = myIterableList(10)

print("{} {}".format(len(list(ll1)), len(ll2)))
print("{} {}".format(len(list(ll1)), len(ll2)))

# Generator can be read several times if converted into iterable
ll1 = list(myGeneratorList(10))
ll2 = myIterableList(10)

print("{} {}".format(len(list(ll1)), len(ll2)))
print("{} {}".format(len(list(ll1)), len(ll2)))
</code></pre>
<p>Besides, if you check the memory footprint, the generator takes much less memory as it doesn't need to store all the values in memory at the same time.</p>
</div>
<span class="comment-copy">Just FYI yield is not method, it's keyword</span>
<span class="comment-copy">I don't think there's much confusion between generator functions and generator objects, for the same reason there's usually no confusion between classes and their instances. In both cases, you call one to get the other, and in casual conversation (or quickly written documentation) you can use the class name or the word "generator" for either one. You only need to be explicit about "generator function" versus "generator object" in rare situations where which one you're talking about matters.</span>
<span class="comment-copy">1. Regardless of theoretical reasons for why there shouldn't be confusion, comments on other answers to this question deny and contradict one another without resolution, indicating actual confusion exists. 2. Casual imprecision is fine but a precise, authoritative source should at least be one of the options on SO. I use both generator functions and objects extensively in my current project, and the distinction is very important when designing and coding. It's good to know what terminology to use now, so I don't have to change dozens of variable names and comments later on.</span>
<span class="comment-copy">Imagine a mathematics literature where no distinction is made between a function and its return value. It is occasionally convenient to conflate them informally, but it increases the risk of a variety of mistakes. Advanced modern mathematics would be significantly and needlessly hampered if the distinction were not formalized in convention, language, and notation.</span>
<span class="comment-copy">Higher-order functions passing around generators or generator functions may sound weird, but for me they have been coming up. I'm working in Apache Spark and it enforces a very functional programming style. The functions have to create, pass in, and pass out all sorts of objects to get things done. I've had a number of situations where I lost track of what kind of "generator" I was working with. Hints in variable names and comments, using the consistent and correct terminology, helped clear up the confusion.  One Pythonist's obscurity can be the center of another's project design!</span>
<span class="comment-copy">@Paul, thanks for writing this answer. This confusion is important because the difference between a generator object and a generator function is the difference between getting the desired behavior and having to lookup generators.</span>
<span class="comment-copy">Could you give an example to illustrate you mean when talking about composition? Also, can you explain what you have in mind when talking about "<i>typical</i> iterators"?</span>
<span class="comment-copy">Another answer (<a href="https://stackoverflow.com/a/28353158/1878788">stackoverflow.com/a/28353158/1878788</a>) states that "an iterator is an iterable". Since an iterable has an <code>__iter__</code> method, how come an iterator can have <code>__next__</code> only? If they are supposed to be iterables, I would expect them to necessarily have <code>__iter__</code> too.</span>
