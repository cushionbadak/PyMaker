<div class="post-text" itemprop="text">
<p>I am a Python beginner. I need to do a group concatenate. I tried different ways but couldn't come up with anything final.</p>
<p>I have a dataset:</p>
<pre><code>A   Apple  
A   Orange  
A   Peach  
B   Apricot  
C   Banana  
B   Cherry  
C   Blueberry
</code></pre>
<p>I need to group it to the following format  </p>
<pre><code>A   Apple, Orange, Peach  
B   Apricot, Cherry  
C   Banana, Blueberry
</code></pre>
<p>Any Ideas. Your help is highly appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe this solves your problem:</p>
<pre><code>with open('list.txt', 'r') as f:
    file = f.read()
    f.close()
    words = {}
    for line in file.split('\n'):
        letter, word = line.split(' ')
        try:
            words[letter] = words[letter] + [word]
        except KeyError:
            words.update({letter: [word]})

# id = 'A' or 'B' Etc.
for id, word in sorted(words.items()):
    print('{0} {1}'.format(id, word))
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>A ['Apple', 'Orange', 'Peach']
B ['Apricot', 'Cherry']
C ['Banana', 'Blueberry']
</code></pre>
<p><strong>What it is doing:</strong></p>
<ol>
<li>Opens your <code>.txt</code> file and reads it. Once done it closes it.</li>
<li>Splits the file into each line, and iterates over each line.</li>
<li>Splits line into each letter and word. Then places those values into <code>letter</code> and <code>word</code>.</li>
<li>Tries to add <code>word</code> the list of values at the key of the letter in <code>words</code>.</li>
<li>If failed(Key doesn't exist), it adds it as a new key and value.</li>
<li>Loops over each one and prints out nicely :)</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Here's a solution using a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow"><code>collections.defaultdict</code></a>:</p>
<pre><code>from collections import defaultdict

with open('input') as f:
    d = defaultdict(list)
    for key, word in (line.split() for line in f):
        d[key].append(word)

    for k in sorted(d):
        print('{} {}'.format(k, ', '.join(sorted(d[k]))))
</code></pre>
<p><strong>Output</strong></p>
<pre>
A Apple, Orange, Peach
B Apricot, Cherry
C Banana, Blueberry
</pre>
<p>The <code>defaultdict</code> makes collecting items into lists much easier than managing a standard dictionary because you don't need to check whether a key is already in the dictionary before adding it.</p>
<p>Another option is to use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow"><code>itertools.groupby</code></a>, but that requires the data to be in order, and would therefore require that you sort the file before use.</p>
</div>
<span class="comment-copy">when you say dataset.. do you mean in a file or in a list or?</span>
<span class="comment-copy">Take a look at <code>itertools.groupby</code> <a href="https://docs.python.org/2/library/itertools.html#itertools.groupby" rel="nofollow noreferrer">docs.python.org/2/library/itertools.html#itertools.groupby</a></span>
<span class="comment-copy">Its an excel file. about 30000 line items</span>
<span class="comment-copy">What did you try? You should post your best effort.</span>
<span class="comment-copy">Also the file handling is not too good. You shouldn't read the entire file into memory; it's better to iterate over the file object.</span>
