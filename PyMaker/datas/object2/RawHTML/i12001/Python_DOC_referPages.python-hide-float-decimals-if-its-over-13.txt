<div class="post-text" itemprop="text">
<p>i was doing some calculation and i got something like this:</p>
<pre><code>newInteger = 200
newFloat = 200.0

if newInteger &gt;= newFloat:
    print "Something"
</code></pre>
<p>when i run my application it didn't print it out but when i test it on python shell, it print <code>Something</code>!!.</p>
<p>so i test this, </p>
<pre><code>&gt;&gt;&gt; number = 200.0000000000001
&gt;&gt;&gt; number
200.0000000000001
</code></pre>
<p>but when decimals goes over 13, like so:</p>
<pre><code>&gt;&gt;&gt; number = 200.00000000000001
&gt;&gt;&gt; number
200.0
</code></pre>
<p>does python hide the decimal numbers but showing as rounded? knowing the result is quite important when debugging.</p>
<p>is there any way that i can get the full decimals? (i did look up at python documentation, it didn't say anything about printing actual float number.)</p>
</div>
<div class="post-text" itemprop="text">
<p>It's called floating point round-off error. It has to do with how Python stores floats (in binary), which makes it impossible for floats to have 100% precision.</p>
<p>Here's more info in the <a href="https://docs.python.org/2/tutorial/floatingpoint.html" rel="nofollow">docs</a>.</p>
<p>See the <a href="https://docs.python.org/2/library/decimal.html#module-decimal" rel="nofollow"><code>decimal</code></a> module if you need more precision.</p>
<p>If you just want to quickly compare two numbers, there are a couple of tricks for floating point comparison. One of the most popular is comparing the relative error to the machine precision (epsilon):</p>
<pre><code>import sys

def float_equality(x, y, epsilon=sys.float_info.epsilon):
    return abs(x - y) &lt;= epsilon * max(abs(x), abs(y))
</code></pre>
<p>But this too, is not perfect. For a discussion of the imperfections of this method and some more accurate alternatives, see this <a href="http://floating-point-gui.de/errors/comparison/" rel="nofollow">article about comparing floats</a>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Python tends to round numbers:</p>
<pre><code>&gt;&gt;&gt; math.pi
3.141592653589793
&gt;&gt;&gt; "{0:.50f}".format(math.pi)
'3.14159265358979311599796346854418516159057617187500'
&gt;&gt;&gt; "{0:.2f}".format(math.pi)
'3.14'
</code></pre>
<p>However, floating point numbers have a specific precision and you can't go beyod it. You can't store arbitrary numbers in floating point:</p>
<pre><code>&gt;&gt;&gt; number = 200.00000000000001
&gt;&gt;&gt; "{:.25f}".format(number)
'200.0000000000000000000000000'
</code></pre>
<p>For integers the floating point limit is 2**53:</p>
<pre><code>&gt;&gt;&gt; 2.0**53
9007199254740992.0
&gt;&gt;&gt; 2.0**53 + 1
9007199254740992.0
&gt;&gt;&gt; 2.0**53 + 2
9007199254740994.0
</code></pre>
<p>If you want to store arbitrary decimal numbers you should use Decimal module:</p>
<pre><code>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; number = Decimal("200.0000000000000000000000000000000000000000001")
&gt;&gt;&gt; number
Decimal('200.0000000000000000000000000000000000000000001')
</code></pre>
</div>
<span class="comment-copy">It's called floating point round-off error. It has to do with how Python stores floats (in binary), which makes it impossible for floats to have 100% precision.</span>
<span class="comment-copy">More info here: <a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/floatingpoint.html</a></span>
<span class="comment-copy">i see... but is there any way that i can print it, if i want to see it?</span>
<span class="comment-copy">If I were you, I would use the decimal module that I linked to above.</span>
