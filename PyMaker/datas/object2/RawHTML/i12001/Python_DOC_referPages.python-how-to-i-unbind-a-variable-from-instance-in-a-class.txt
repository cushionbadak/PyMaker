<div class="post-text" itemprop="text">
<p>In class, let's say I have an instance</p>
<pre><code>self.my_instance=6
</code></pre>
<p>Then, in a method, say I have something like</p>
<pre><code>my_variable=self.my_instance
</code></pre>
<p>Every time I change <code>my_variable</code> to some other value, <code>self.my_instance</code> changes its value also, and this is not what I want. I want to modify <code>my_variable</code> without affecting <code>self.my_instance</code>. This can be quite frustrating and confusing in large programs too.</p>
<p>Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>When you say <code>my_variable = self.myinstance</code>, <code>my_variable</code> is now just an alias to the object that <code>self.myinstance</code> refers to.  To make it a separate object, you can use slicing:</p>
<pre><code>my_variable = self.myinstance[:]
</code></pre>
<p>Using <code>self.myinstance[:]</code> means to take all objects from the beginning to the end which means everything.  Since it is a slice, however, it returns a copy so this is a common way to get a copy of a list.</p>
<p>This works in your case because <code>my_variable</code> is a list, but if it is a dictionary, for instance, you can use the <code>copy</code> module:</p>
<pre><code>import copy

my_variable = copy.copy(self.myinstance) # Shallow copy
</code></pre>
<p>or</p>
<pre><code>my_variable = copy.deepcopy(self.myinstance) # Deep copy
</code></pre>
<p>Dictionaries also have the <code>.copy()</code> method for shallow copies.</p>
</div>
<span class="comment-copy">Can you give an example of that behavior?  Unless you are modifying the actual object such as <code>my_variable.append(4)</code> if <code>my_variable</code> is a list, <code>self.myinstance</code> shouldn't be changed.</span>
<span class="comment-copy">Yes! my_variable IS a list, and I am trying to append self.my_instance, which is a list also. Do you know how to go about it?</span>
<span class="comment-copy">Yes.  Say <code>my_variable = self.myinstance[:]</code> instead of <code>my_variable = self.myinstance</code>  That will create a copy of the list.</span>
<span class="comment-copy">Yes! That's exactly what I want! Thank you! I would like to vote your answer, but how do I do that? Sorry, I am quite new here :)</span>
<span class="comment-copy">It isn't really an answer yet, but I'll post it as an answer.  Once it is posted, you can click the grey check mark below the vote count.</span>
<span class="comment-copy">And if <code>self.myinstance</code> is some other mutable type that can't be sliced like that, you can use <a href="https://docs.python.org/3/library/copy.html" rel="nofollow noreferrer">the <code>copy</code> module's</a> <code>copy</code> or <code>deepcopy</code> functions, as appropriate.</span>
<span class="comment-copy">@ShadowRanger: Thanks for pointing that out.  I have added that.</span>
