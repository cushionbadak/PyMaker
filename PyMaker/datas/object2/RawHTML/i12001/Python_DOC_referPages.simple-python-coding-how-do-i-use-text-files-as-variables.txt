<div class="post-text" itemprop="text">
<p>How can I make changeable variables in other files via my primary Python file, then change them?</p>
<p>I want to be able to make a change in my main python file, and then have it carry over into the text file.</p>
<p>Here is an example:</p>
<pre><code>##this is inside the text file##
gold = 10
</code></pre>
<p>Then in my code.</p>
<pre><code>##this is inside the code##
money = gold
##I want that variable 'gold' to draw information from the txt file##
</code></pre>
<p>Then when I run my module.</p>
<pre><code>##this is what I see when in the module##
&gt;&gt;money
money = 10
&gt;&gt;add money
How much?
&gt;&gt;10
total money = 20
</code></pre>
<p>Then when I do that, it changes the text file</p>
<pre><code>##this is inside the text file##
gold = 20
</code></pre>
<p>Also, what is pickling?</p>
</div>
<div class="post-text" itemprop="text">
<p>Pickling is used for serializing and de-serializing a Python object structure. Any object in python can be pickled so that it can be saved on disk. What pickle does is that it “serialises” the object first before writing it to file. Pickling is a way to convert a python object (list, dict, etc.) into a character stream. The idea is that this character stream contains all the information necessary to reconstruct the object in another python script (<strong>More info</strong>: <a href="http://pythontips.com/2013/08/02/what-is-pickle-in-python/" rel="nofollow">http://pythontips.com/2013/08/02/what-is-pickle-in-python/</a>). You have to import pickle to use it. i.e., <code>import pickle</code>.</p>
<p>For your question, pickling is not exactly necessary. You can use simple file commands to achieve what you need. if text file is called "test.txt"</p>
<pre><code>f = open("test.txt", "r+") # Open your text file
content = f.readlines()    # Read the lines and make a list
var = content[0].split()   # Split the list into individual words
money = var[0]             # var[0] is the first letter in the text file
</code></pre>
<p>Do your necessary algorithm to change the values but this is how you would access "gold" from the text file. 
My code will only work if the text file is EXACTLY like you mentioned.
like gold = 10 or orange = 25</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><em>I'm trying to make changeable variables in text files that are separate from my code module thing. So like when I run the module and add to the variables it will change it in the text file.</em></p>
</blockquote>
<h2>① Using ConfigParser</h2>
<p>The simplest way to store a variable (or a value) is to use a <a href="https://docs.python.org/3/library/configparser.html"><code>.ini</code> file</a> for storing configuration values. To store values:</p>
<pre><code>&gt;&gt;&gt; import configparser
&gt;&gt;&gt; config = configparser.RawConfigParser()
&gt;&gt;&gt; config.add_section('default')
&gt;&gt;&gt; config.set('default', 'gold', '10')
</code></pre>
<p>To read values:</p>
<pre><code>&gt;&gt;&gt; with open('example.cfg', 'w') as configfile:
...     config.write(configfile)
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; config = configparser.RawConfigParser()
&gt;&gt;&gt; config.read('example.cfg')
['example.cfg']
&gt;&gt;&gt; gold = config.getint('default', 'gold')
&gt;&gt;&gt; print(gold)
10
</code></pre>
<p>But then you might not like the output:</p>
<pre><code>% cat example.cfg
[default]
gold = 10
</code></pre>
<h2>② Using JSON</h2>
<p>So then you might prefer to use JSON to do the same:</p>
<pre><code>&gt;&gt;&gt; config = dict(gold=10)
&gt;&gt;&gt; json.dump(config, open('example.json', 'w'))
&gt;&gt;&gt; import json
</code></pre>
<p>And to load it you do:</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; config = json.load(open('example.json'))
&gt;&gt;&gt; print(config)
{'gold': 10}
</code></pre>
<p>Now, you might be unhappy about it being a <code>dict</code>. But you can make it a variable within a function, using the <code>**</code> argument passing trick:</p>
<pre><code>&gt;&gt;&gt; def show_gold(gold):
...   print("I got {}g of gold!".format(gold))
... 
&gt;&gt;&gt; show_gold(**config)
I got 10g of gold!
</code></pre>
<p>Even though I recommend you to do the former solution, if you <em>really</em> want to load it as a variable within the global scope, you can do:</p>
<pre><code>&gt;&gt;&gt; globals().update(config)
&gt;&gt;&gt; print(gold)
10
</code></pre>
<h2>③ Using pickle</h2>
<p>Using pickle, you're having the same issue, you need to embed your data into something, or you won't have python remember the variable's name:</p>
<pre><code>&gt;&gt;&gt; import pickle
&gt;&gt;&gt; gold = 10
&gt;&gt;&gt; pickle.dump(gold, file=open('example.data', 'wb'))
&gt;&gt;&gt; pickle.load(open('example.data', 'rb'))
10
</code></pre>
<p>So you'd better do:</p>
<pre><code>&gt;&gt;&gt; config = dict(gold=10)
&gt;&gt;&gt; pickle.dump(config, file=open('example.data', 'wb'))
&gt;&gt;&gt; pickle.load(open('example.data', 'rb'))
{'gold': 10}
</code></pre>
<p>and you can use the same tricks as shown earlier. Though, the main difference with pickle, is that it's using a binary file format, making it more flexible and faster to store complex and/or big python instances:</p>
<pre><code>% od -cx example.data
0000000 200 003   }   q  \0   X 004  \0  \0  \0   g   o   l   d   q 001
           0380    717d    5800    0004    0000    6f67    646c    0171
0000020   K  \n   s   .
           0a4b    2e73
0000024
</code></pre>
<p>So if you want to dump and restore nicely a value using pickle you can use an object's instance:</p>
<pre><code>&gt;&gt;&gt; import pickle
&gt;&gt;&gt; class Foo:
...     def __init__(self):
...         self.gold = 10
... 
&gt;&gt;&gt; foo = Foo()
&gt;&gt;&gt; 
&gt;&gt;&gt; pickle.dump(foo, open('example.data', 'wb'))
&gt;&gt;&gt; bar = pickle.load(open('example.data', 'rb'))
&gt;&gt;&gt; bar.gold
10
</code></pre>
<p>so, basically, the <a href="https://docs.python.org/3.4/library/pickle.html"><code>pickle</code></a> module is nice, but not suited for your usage, as you want to be able to read and modify the file manually.</p>
<h2>Conclusion</h2>
<p>I'd advice you to use the <code>json</code> to serialise and deserialise data from your application, as the output is concise, elegant, thus easy to read. I have a preference over <a href="http://pyyaml.org/wiki/PyYAMLDocumentation">PyYaml</a>, which looks even better when you need to edit manually. And the more commonly used serialiser is <code>ConfigParser</code>, which is why this is the one I showed first. But you don't want to use <code>pickle</code> which is very nice, but uses a binary format that you cannot change with an editor.</p>
<p>HTH</p>
</div>
<span class="comment-copy">Well, <code>pickling</code> is exactly what you want to do. So your bonus question is actually the answer to your question. Read <a href="https://wiki.python.org/moin/UsingPickle" rel="nofollow noreferrer">this</a></span>
<span class="comment-copy">Here's another question about pickling multiple variables (which I assume you will want to do) Read <a href="http://stackoverflow.com/questions/6568007/how-do-i-save-and-restore-multiple-variables-in-python">this</a></span>
<span class="comment-copy">Even though your suggestion is technically fine, I wouldn't suggest anyone, and especially a newbie, to parse a file manually for configuration management. It's always better to use a lib and a known format that the editor can correctly syntax highlight.</span>
<span class="comment-copy">@zmo true, that makes sense!</span>
