<div class="post-text" itemprop="text">
<p>I'm trying to compare two lists and find the position and changed character at that position. For example, these are two lists:</p>
<pre><code>list1 = ['I', 'C', 'A', 'N', 'R', 'U', 'N']
list2 = ['I', 'K', 'A', 'N', 'R', 'U', 'T']
</code></pre>
<p>I want to be able to output the position and change for the differences in the two lists. As you can see, a letter can be repeated multiple times at a different index position. This is the code that I have tried, but I can't seem to print out the second location accurately.</p>
<pre><code>for indexing in range(0, len(list1)):
    if list1[indexing] != list2[indexing]:
        dontuseindex = indexing
        poschange = indexing + 1
        changecharacter = list2[indexing]
for indexingagain in range(dontuseindex + 1, len(list1)):
    if list1[indexingagain] != list2[indexingagain]:
        secondposchange = indexingagain + 1
        secondchangecharacter = list2[indexingagain]
</code></pre>
<p>Is there a better way to solve this problem or any suggestions to the code I have?</p>
<p>My expected output would be:</p>
<pre><code>2    K
7    T
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>for index, (first, second) in enumerate(zip(list1, list2)):
    if first != second:
        print(index, second)
</code></pre>
<p>Output:</p>
<pre><code>1 K
6 T
</code></pre>
<p>If you want the output you gave, we need to count from <code>1</code> instead of the usual <code>0</code>:</p>
<pre><code>for index, (first, second) in enumerate(zip(list1, list2), start=1):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another possibility to save all the not-equal elements with the index is with a list comprehensions:</p>
<pre><code>list1 = ['I', 'C', 'A', 'N', 'R', 'U', 'N']
list2 = ['I', 'K', 'A', 'N', 'R', 'U', 'T']

# Append index, element1 and element2 as tuple to the list if they are not equal
changes = [(i, list1[i], list2[i]) for i in range(len(list1)) if list1[i] != list2[i]]
print(changes)
#prints [(1, 'C', 'K'), (6, 'N', 'T')]
</code></pre>
<p>Not exactly what you specified as output but it's close.</p>
<p>You could print the specified output with a loop:</p>
<pre><code>for i in changes:
    print(i[0] + 1, i[1])
# 2 K
# 7 T
</code></pre>
<p>In the comments several alternative ways of designing the list comprehension were suggested:</p>
<ul>
<li><p>Using <code>enumerate</code> and <code>zip</code>:</p>
<pre><code>changes = [(i, e1, e2) for i, (e1, e2) in enumerate(zip(list1, list2)) if e1 != e2]
</code></pre></li>
<li><p>Using <code>enumerate</code> with start index and <code>zip</code>:</p>
<pre><code>changes = [(i, e1, e2) for i, (e1, e2) in enumerate(zip(list1, list2), 1)  if e1 != e2]
</code></pre></li>
<li><p>Using <code>zip</code> and <a href="https://docs.python.org/3/library/itertools.html#itertools.count" rel="nofollow"><code>itertools.count</code></a>:</p>
<pre><code>import itertools
changes = [(i, e1, e2) for i, e1, e2 in zip(itertools.count(), list1, list2)) if e1 != e2]
</code></pre></li>
<li><p>Using <code>zip</code> and <a href="https://docs.python.org/3/library/itertools.html#itertools.count" rel="nofollow"><code>itertools.count</code></a> with start-index:</p>
<pre><code>changes = [(i, e1, e2) for i, e1, e2 in zip(itertools.count(1), list1, list2)) if e1 != e2]
</code></pre></li>
</ul>
<p>All of them producing the same result as the original but using different (better) python features.</p>
</div>
<span class="comment-copy">Are you just concerned with replacements, or also insertions/deletions? In the first case: Just <code>zip</code>and compare; in the latter case, use a variant of <a href="https://en.wikipedia.org/wiki/Levenshtein_distance" rel="nofollow noreferrer">Levenshtein distance</a></span>
<span class="comment-copy">@PeterWood have listed my expected output</span>
<span class="comment-copy">@tobias_k I'm only concerned with replacements. The lists will always be the same length</span>
<span class="comment-copy">Obviously <code>[print(ix, *thing) for ix, thing in enumerate(map(set, zip(list1, list2))) if len(thing) == 2]</code> is the only good way to do it</span>
<span class="comment-copy">Just to note, the indices are <code>1</code> and <code>6</code>.</span>
<span class="comment-copy">I think this should work well and I should be able to implement it easily. Thank you!</span>
<span class="comment-copy">Is there an easy way to store both the changes and indices into two separate variables? For example, <code>position1</code>, <code>position2</code>, <code>change1</code>, <code>change2</code>?</span>
<span class="comment-copy">What if there are 3 changes? Maybe you should think about this a bit and ask it as a separate question, after searching.</span>
<span class="comment-copy">Note that OP's indices start with 1, so maybe <code>enumerate(zip(list1, list2), start=1)</code>?</span>
<span class="comment-copy">@tobias_k I must admit, I'm not sure what the original example is doing</span>
<span class="comment-copy">Why not <code>zip</code> and <code>enumerate</code>?</span>
<span class="comment-copy">This worked great! :) :)</span>
<span class="comment-copy">@PeterWood You raise an interesting question: If both lists have different lengths would that count as a difference? I know that the <code>zip</code> and <code>enumerate</code> are the better choices in this case, it was just presenting an alternative given that you provided that pythonic kind of iteration already. I think I'll leave it as the alternative in the answer. I didn't felt any peer-pressure that was just a remark about the two upvotes on your first comment. :-)</span>
<span class="comment-copy">I was thinking, <code>zip(count(), list1, list2)</code> would be more uniform as there wouldn't be the strange tuple unpacking syntax. Uses <a href="https://docs.python.org/2/library/itertools.html#itertools.count" rel="nofollow noreferrer"><b><code>itertools.count</code></b></a></span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> allows for setting the <code>start</code> index, as well. No need for <code>count</code>. That's exactly what  <code>enumerate</code> is there for!</span>
