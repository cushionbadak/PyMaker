<div class="post-text" itemprop="text">
<pre><code>try:
   import MySQLdb
   # some action
except ImportError as err:
   # fallback code
</code></pre>
<p>PyCharm gives a code inspection warning on that:</p>
<blockquote>
<p>'MySQLdb' in try block with 'except ImportError' should also be defined in except block</p>
<p>This inspection detects names that should resolve but don't. Due to dynamic dispatch and duck typing, this is possible in a limited but useful number of cases. Top-level and class-level items are supported better than instance items.</p>
</blockquote>
<p>Ok, I thought the warning is reasonable, because the <code>fallback code</code> assumes that 'MySQLdb' is not installed, while it could be some different error that just raised ImportError. So I used something like:  </p>
<pre><code>try:
   import MySQLdb
   # some action
except ImportError as err:
   if "MySQLdb" in repr(err):
       # fallback code
   else:
       raise
</code></pre>
<p>The PyCharm alert is still exists, but It could be just a PyCharm issue (google shows issues with such inspections)</p>
<p><strong><em>Questions:</em></strong></p>
<ol>
<li><p>Is it really worth checking for name when you "except ImportError"? Even in simple cases (no <code>some action</code> after <code>import MySQLdb</code>)? </p></li>
<li><p>If it worth checking, Is the above example the right way to do it? If no - what is the right way?</p></li>
</ol>
<p><strong>P.S.</strong> MySQLdb is just an example of a module that could be absent in the system.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you misunderstood the warning, if you do not define a variable called <code>MySQLdb</code> in the except block then later on when you try to use the module you would get a <code>NameError</code>:</p>
<pre><code>try:
    import foo
except ImportError:
    pass

foo.say_foo() #foo may or may not be defined at this point!
</code></pre>
<p>If the module is only used in the <code>try:</code> clause then this is no issue. But for the more general case the checker expects you to define the variable in the except block:</p>
<pre><code>try:
    import foo
except ImportError:
    foo = None  #now foo always exists

if foo: #if the module is present
    foo.say_foo()
else:
    print("foo") #backup use
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.3+, an <a href="https://docs.python.org/3/library/exceptions.html#ImportError" rel="nofollow"><code>ImportError</code></a> has the attribute <code>name</code> that tells the name of the module whose import failed. Then of course MySQLdb would hint that you're stuck with Python 2.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>try:
  import libname
except ImportError as e:
       e = e[0][16:]
       print("\n[!] Error: Please Install Module Name:[ {} ] And Try Again !!!".format(e))
       exit(1)
</code></pre>
<p>Output:</p>
<blockquote>
<p>[!] Error: Please Install Module Name:[ libname ] And Try Again !!!</p>
</blockquote>
</div>
<span class="comment-copy">This might be helpful: <a href="http://stackoverflow.com/questions/14050281/how-to-check-if-a-python-module-exists-without-importing-it" title="how to check if a python module exists without importing it">stackoverflow.com/questions/14050281/…</a> and this: <a href="http://stackoverflow.com/questions/5847934/how-to-check-if-python-module-exists-and-can-be-imported?lq=1" title="how to check if python module exists and can be imported">stackoverflow.com/questions/5847934/…</a></span>
<span class="comment-copy">Thank you! The questions you gave are close to the topic. Yet, I ask about slightly different context.</span>
<span class="comment-copy">So just set MySQLdb to None to silence warnings</span>
<span class="comment-copy">Probably you are right... In my context I just didn't thought the problem is in naming error, because what I actually do in fallback is <code>... connection_string.replace("mysql://", "mysql+mysqlconnector://")</code> so my mind was too far away from the naming error.</span>
<span class="comment-copy">if you don't use the module later then delete it from the name space to indicate to pycharm (and yourself so you don't run into a NameError) that it was only intended to be used for the one part</span>
<span class="comment-copy">In a couple of my functions with such features, if I cannot import the library, I simply <code>return</code>.  I would like to think that this acceptable behavior as well.</span>
<span class="comment-copy">Very helpful, thank you!</span>
<span class="comment-copy">What will happen when error message is changed with python version? (That happened before). And... Thank you for investing your time in this answer, but this answer is not for this question.</span>
