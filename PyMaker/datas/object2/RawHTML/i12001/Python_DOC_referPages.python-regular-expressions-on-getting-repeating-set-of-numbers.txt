<div class="post-text" itemprop="text">
<p>I'm working with a file, that is a Genbank entry (similar to <a href="http://www.ncbi.nlm.nih.gov/Sitemap/samplerecord.html" rel="nofollow">this</a>)</p>
<p>My goal is to extract the numbers in the CDS line, e.g.:</p>
<blockquote>
<pre><code>    CDS             join(1200..1401,3490..4302)
</code></pre>
</blockquote>
<p>but my regex should also be able to extract the numbers from multiple lines, like this:</p>
<blockquote>
<pre><code>     CDS            join(1200..1401,1550..1613,1900..2010,2200..2250,
                 2300..2660,2800..2999,3100..3333)
</code></pre>
</blockquote>
<p>I'm using this regular expression:</p>
<pre><code>     import re
     match=re.compile('\w+\D+\W*(\d+)\D*')
     result=match.findall(line)
     print(result)
</code></pre>
<p>This gives me the correct numbers but also numbers from the rest of the file, like </p>
<blockquote>
<pre><code> gene            complement(3300..4037)
</code></pre>
</blockquote>
<p>so how can I change my regex to get the numbers? 
I should only use regex on it..</p>
<p>I'm going to use the numbers to print the coding part of the base sequence.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use the heavily improved <a href="https://pypi.python.org/pypi/regex" rel="nofollow"><code>regex</code></a> module by <em>Matthew Barnett</em> (which provides the <code>\G</code> functionality). With this, you could come up with the following code:</p>
<pre><code>import regex as re
rx = re.compile("""
            (?:
                CDS\s+join\(    # look for CDS, followed by whitespace and join(
                |               # OR
                (?!\A)\G        # make sure it's not the start of the string and \G 
                [.,\s]+         # followed by ., or whitespace
            )
            (\d+)               # capture these digits
                """, re.VERBOSE)

string = """
         CDS            join(1200..1401,1550..1613,1900..2010,2200..2250,
                     2300..2660,2800..2999,3100..3333)
"""

numbers = rx.findall(string)
print numbers
# ['1200', '1401', '1550', '1613', '1900', '2010', '2200', '2250', '2300', '2660', '2800', '2999', '3100', '3333']
</code></pre>
<p><code>\G</code> makes sure the regex engine looks for the next match <em>at the end of the last match</em>.<br/>
See <a href="https://regex101.com/r/nM1fA4/1" rel="nofollow">a demo on regex101.com</a> (in <code>PHP</code> as the emulator does not provide the same functionality for <code>Python</code> [it uses the original <code>re</code> module]).</p>
<p>A <strong>far</strong> inferior solution (if you are only allowed to use the <code>re</code> module), would be to use lookarounds:</p>
<pre><code>(?&lt;=[(.,\s])(\d+)(?=[,.)])
</code></pre>
<p><code>(?&lt;=)</code> is a positive look<strong>behind</strong>, while <code>(?=)</code> is a positive look<strong>ahead</strong>, see <a href="https://regex101.com/r/mC0aQ8/1" rel="nofollow">a demo for this approach on regex101.com</a>. Be aware though there might be a couple of false positives.</p>
</div>
<div class="post-text" itemprop="text">
<p>The following <code>re</code> pattern might work:</p>
<pre><code>&gt;&gt;&gt; match = re.compile(\s+CDS\s+\w+\([^\)]*\))
</code></pre>
<p>But you'll need to call <code>findall</code> on the whole text body, not just a line at a time.</p>
<p>You can use parentheses just to grab out the numbers:</p>
<pre><code>&gt;&gt;&gt; match = re.compile(\s+CDS\s+\w+\(([^\)]*)\))
&gt;&gt;&gt; match.findall(stuff)
1200..1401,3490..4302       # Numbers only
</code></pre>
<p>Let me know if that achieves what you want!</p>
</div>
<span class="comment-copy">Is the join command part of the string? You could use the single line modifier, a lazy quantifier and a positive lookahead.</span>
<span class="comment-copy">You just want to extract the number of complete line ? if numbers then in what format?</span>
<span class="comment-copy">You would probably have a much much easier time parsing genbank files if you used <a href="http://biopython.org/DIST/docs/api/Bio.GenBank-module.html" rel="nofollow noreferrer">BioPython</a>.</span>
<span class="comment-copy">The join command is part of the string ,yes @Jan</span>
<span class="comment-copy">I want the numbers, so that I can use them for printing out the elements in a list containing the base sequence @noob</span>
<span class="comment-copy">This looks awesome, but I don't think I'm allowed to use the regex module in my course :(. Is there something similar in the re module?</span>
<span class="comment-copy">@Gilz, you must be kidding...</span>
<span class="comment-copy">@Gliz You're not allowed to use the <code>re</code> module at all? Then why are you using it in your OP?</span>
<span class="comment-copy">@HumphreyTriscuit I'm allowed to use the re library (<a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">this</a>..) I might be confused, but there is a difference between re and regex module, right?</span>
<span class="comment-copy">@Gliz Absolutely, I was being silly :)</span>
<span class="comment-copy">I'm looping through each line in my file, and if I do that I get this output: ['     CDS             join(2424..2610,3397..3542)']  I'm only interested in the numbers :)</span>
<span class="comment-copy">@Gliz If you want to match across multiple lines then looping through might not be the best idea. Obviously unavoidable though if your files are enormous! Are they too big to just read in one go? And even if you want just the numbers this is a good starting point, you can either continue to parse or use the <code>re</code> groups to pull them out (I'll add an example)</span>
<span class="comment-copy">My biggest file is 1225 lines, about 5kb.. which is not much :p @HumphreyTriscuit</span>
<span class="comment-copy">@Gliz In that case, just read it all at once rather than iterating through lines - does that work?</span>
