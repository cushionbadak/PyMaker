<div class="post-text" itemprop="text">
<p>The default <code>pickle</code> module from the Python standard library does not allow for the serialization of functions with closures, lambdas, or functions in <code>__main__</code> (see <a href="https://docs.python.org/3/library/pickle.html#what-can-be-pickled-and-unpickled" rel="nofollow">here</a>). </p>
<p>I need to pickle an object using some custom functions that will not be importable where they will be unpickled. There are a few other Python object serializers, including <code>dill</code> and <code>cloudpickle</code>, that are capable of doing this. </p>
<p>The <code>cloudpickle</code> <a href="https://github.com/cloudpipe/cloudpickle" rel="nofollow">documentation</a> seems to be saying that even when you pickle using <code>cloudpickle</code>, you can unpickle using the standard <code>pickle</code> module. This is extremely attractive, because I cannot even install packages in the environment where I need to unpickle. </p>
<p>Indeed, the example in the documentation does basically the following:</p>
<h3>Pickle:</h3>
<pre><code>&gt;&gt;&gt; import cloudpickle
&gt;&gt;&gt; squared = lambda x: x ** 2
&gt;&gt;&gt; pickled_lambda = cloudpickle.dump(squared, open('pickled_file', 'w'))
</code></pre>
<h3>Unpickle:</h3>
<pre><code>&gt;&gt;&gt; import pickle
&gt;&gt;&gt; new_squared = pickle.load(open('pickled_file', 'rb'))
&gt;&gt;&gt; new_squared(2)
</code></pre>
<p>But, running that second block in an environment where <code>cloudpickle</code> is not installed, even though it is never imported, yields the error:</p>
<pre><code>"ImportError: No module named cloudpickle.cloudpickle"
</code></pre>
<p>Probably the most easily reproducible example would be to install <code>cloudpickle</code> for Python2, run the first block, and then try to load in the pickled file with the second block using Python3 (where <code>cloudpickle</code> was not installed).</p>
<p>What is going on here? Why does <code>cloudpickle</code> need to be installed to run the standard <code>pickle</code> load if it is not even called?</p>
</div>
<div class="post-text" itemprop="text">
<p>In theory, <code>cloudpickle</code> should not need to be installed to <code>load</code> a pickled object.  In theory, what <code>cloudpickle</code> would do would be too include all functions necessary to unpickle an object within that object. However, that's in theory.</p>
<p>In the method registry (e.g. with <code>copyreg</code>), a serializer would need to register the method that enables the serializer to create a new object of the required type and imbue it with the saved state.  For a serializer to not be required to be installed on load, the serializer would need to include all of the required deserialization methods within the pickled object itself (this is possible because a pickle is recursive).</p>
<p><code>cloudpickle</code> assumes <code>cloudpickle</code> is installed, and therefore (to make the resulting pickled object smaller), does not include all of the required methods.  This is unlike <code>numpy</code>, as a counter-example, which the <code>dumps</code> method on the <code>numpy.array</code> does include the <code>reconstruct</code> method in the pickle (you can see this as <code>numpy.core.multiarray\n_reconstruct</code> appears in any pickle of an <code>array</code>).</p>
</div>
<span class="comment-copy">Do you know if <code>cloudpickle</code> can be made recursive to not require its installation to unpickle? Or is the answer 'it needs to be installed'.</span>
<span class="comment-copy">I'm the <code>dill</code> author, so I can only speak in theory for <code>cloudpickle</code>… however, if you wanted to do this w/o forking <code>cloudpickle</code>, I think the answer it "no", not easily at the very least -- you need to install <code>cloudpickle</code>.  The work-around is that you'd need to register every one of the methods used by <code>cloudpickle</code> into <code>pickle</code> with <code>copyreg</code> and then also save the resulting method table (it's a dict) as a pickle that would be first opened (so it could be referenced from <code>globals</code>) before the target object is unpickled.</span>
<span class="comment-copy">similar to this: <a href="http://stackoverflow.com/questions/27351980/how-to-add-a-custom-type-to-dills-pickleable-types" title="how to add a custom type to dills pickleable types">stackoverflow.com/questions/27351980/…</a></span>
