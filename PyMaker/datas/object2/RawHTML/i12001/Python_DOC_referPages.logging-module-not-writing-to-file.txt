<div class="post-text" itemprop="text">
<p>I'm using <code>logging</code> module, and I've passed in the same parameters that I have on other jobs that are currently working:</p>
<pre><code>import logging
from inst_config import config3

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] - %(message)s',
    filename=config3.GET_LOGFILE(config3.REQUESTS_USAGE_LOGFILE))
logging.warning('This should go in the file.')

if __name__ == '__main__':
    logging.info('Starting unload.')
</code></pre>
<p>Using this method to create the filename:</p>
<pre><code>REQUESTS_USAGE_LOGFILE = r'C:\RunLogs\Requests_Usage\requests_usage_runlog_{}.txt'.format(
        CUR_MONTH)
def GET_LOGFILE(logfile):
    """Truncates file and returns."""
    with open(logfile, 'w'):
        pass
    return logfile
</code></pre>
<p>When I run it, however, it is creating the file, and then still outputting the logging info to the console.  I'm running in <code>Powershell</code>.</p>
<p>Just tried putting it inside the main statement like this:</p>
<pre><code>if __name__ == '__main__':
    logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] - %(message)s',
    filename=config3.GET_LOGFILE(config3.REQUESTS_USAGE_LOGFILE))

    logging.warning('This should go in the file.')
</code></pre>
<p>Still no luck.</p>
</div>
<div class="post-text" itemprop="text">
<p>Can you try run this in your main file:</p>
<pre><code>import logging 
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s [%(levelname)s] - %(message)s',
    filename='filename.txt')  # pass explicit filename here 
logger = logging.get_logger()  # get the root logger
logger.warning('This should go in the file.')
print logger.handlers   # you should have one FileHandler object
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I add the following lines before the <code>logging.basicConfig()</code> and it worked for me.</p>
<pre><code>for handler in logging.root.handlers[:]:
    logging.root.removeHandler(handler)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are using 'root' logger which is by default has name "", than you can do this trick:</p>
<pre><code>logging.getLogger().setLevel(logging.INFO)    
logger = logging.getLogger('')
logger.handlers = []
</code></pre>
<p>In addition you may want to specify logging level as in code above, this level will persist for all descendant loggers.</p>
<p>If instead, you specified particular logger, than do</p>
<pre><code>logger = logging.getLogger('my_service')
logger.handlers = []
fh = logging.FileHandler(log_path)
fh.setLevel(logging.INFO)
# create console handler
ch = logging.StreamHandler()
ch.setLevel(logging.INFO)
logger.addHandler(fh)
logger.addHandler(ch)
logger.info('service started')
</code></pre>
<p>The above code will create new logger 'my_service'. In case that logger has been already created it clears all handles. That it adds handles for writing in specified file and console. <a href="https://docs.python.org/3/howto/logging-cookbook.html" rel="nofollow noreferrer">See official documentation as well</a>. </p>
<p>You can also use hierarchical loggers. It is done directly.</p>
<pre><code>logger = logging.getLogger('my_service.update')
logger.info('updated successfully')
</code></pre>
</div>
<span class="comment-copy">can you show us the code you're usign to write to the log file?</span>
<span class="comment-copy">@Dot_Py Ok, added.</span>
<span class="comment-copy">Have you created the log file before the <code>if __name__ == '__main__':</code> runs? I mean... if you run your program, it'll know where's the log file? Can you make a test by putting the  <code>logging.basicConfig()</code> and creating the log file inside the <code>if __name__ == '__main__':</code> block?</span>
<span class="comment-copy">Sure I'll try that.  EDIT:  I placed it inside the main statement, and still printing to the console:/</span>
<span class="comment-copy">I didn't include my imports, but it is indeed loaded at the top of the file.  I've added my imports to the OP.</span>
<span class="comment-copy">Still didn't work.  It's not creating the file since it's never writing to it.  Could the problem be powershell?  The weird thing is I have other jobs with the exact same configuration that run without a hitch.</span>
<span class="comment-copy">Okay, reformatted it.</span>
<span class="comment-copy">You say here that <i>it's not creating the file</i>, but in the main post you say <i>When I run it, however, it is creating the file</i>.  Which is it?</span>
<span class="comment-copy">That led me to the solution @Forge, for some reason it defaulted to a streaming handler this time around, so I added a <code>fileHandler</code>.</span>
<span class="comment-copy">This tip helped me immensely.</span>
