<div class="post-text" itemprop="text">
<p>I'm writing a Python script that needs to validate existence of a file. The file can be either a full path like <code>/home/xxx/file.txt</code> or a URL <code>http://company.com/xxx/file.txt</code>.</p>
<p>Is there a python method that can validate existence of various schema of path?</p>
</div>
<div class="post-text" itemprop="text">
<p>What do you plan to do with the file?</p>
<p>If you need to use the file you might be better off opening it, lest it disappear before you use it. There can be security issues if you test first and then open as the two operations can not be made atomic. It's possible that the file could be removed, created, or otherwise interfered with before your code opens it.</p>
<p>If you simply want to know whether a path exists at the time you test for it use <a href="https://docs.python.org/3/library/os.path.html#os.path.exists" rel="nofollow"><code>os.path.exists()</code></a>. Otherwise, if you want to actually do something with the file, call <code>open()</code> on it.</p>
<p>For URLs you need to access it... either GET it with <code>urlopen()</code> or use <code>requests</code>. You could also try sending a HEAD request to determine whether a resource exists without downloading it content. This is useful if you were checking a resource that returns a lot of data, like an image or music file. The <a href="http://docs.python-requests.org/en/latest/" rel="nofollow"><code>requests</code></a> module makes that easy:</p>
<pre><code>import requests

r = requests.head(url, allow_redirects=True)
if r.status_code == 200:
    # resource apparently exists
</code></pre>
<p>The <code>allow_redirects</code> is necessary for HEAD requests, e.g. </p>
<pre><code>import requests

url = 'http://www.google.com'
r = requests.head(url)
print(r.status_code)
# 302
r = requests.head(url, allow_redirects=True)
print(r.status_code)
# 200
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's what I've used in the past to handle checking  if a URL exists, but if you're just looking for a file then use the methods suggested in your comments.</p>
<pre><code>import requests
    request = requests.get('http://company.com/')
    if request.status_code == 200:
        print('We are dandy.')
    else:
        print('No existe.')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm answering the question you didn't ask, and telling you: Don't do this.</p>
<p>You rarely want to just validate existence, because usually, if it exists, you want to use it. Checking, then opening is a pattern open to race conditions (you check, the file exists, some other program deletes it, you try to open it for reading, kaboom). Typically, the correct way to check if a file (or any other resource you wish to use) is available is to try to open it, and handle the exception if it turns out not to exist.</p>
<p>The general pattern is called <a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow">EAFP (easier to ask forgiveness than seek permission)</a> and it's much safer for race-prone activities like this than the opposite pattern you're trying to use, <a href="https://docs.python.org/3/glossary.html#term-lbyl" rel="nofollow">LBYL (look before you leap)</a>.</p>
<p>So if you want to check if a file exists, call <code>open</code> on it. If you want to check if a URL exists, try to <code>urlopen</code> it. This does more than just validate existence, it also lets you know important stuff like "is it a file-like thing?", "do I have permission to read the contents?", etc. which otherwise requires checking multiple flags and can still tell you the wrong answer if you ask the question incorrectly (e.g. it rarely matters if it's a file, as long as you can read data from it, but checking <code>isfile</code> excludes stuff like, say, named pipes created by <code>bash</code> process substitution that mostly act like files).</p>
</div>
<span class="comment-copy">For the file: <code>os.path.exists(...)</code></span>
<span class="comment-copy">For the file, use <code>os.path.isfile()</code>.  For the URL, you will have to attempt the connection (since it not located on the local computer).</span>
<span class="comment-copy">What do you plan to do with the file? If you need to use the file you might be best off opening it, lest it disappear before you use it.</span>
<span class="comment-copy">This is OK, but I think that HEAD might be better for this, especially if the URL is for a large resource.</span>
<span class="comment-copy">Hmm, pretty much what I already said.</span>
