<div class="post-text" itemprop="text">
<p>I'm trying to write a simple program in which you paste the text of a certain email, and the program print a which dic has the most overlap with the email. </p>
<p>Here a quick overview of what I'm trying to achieve:</p>
<ol>
<li>User copies and pastes email into program</li>
<li>Text gets stored to variable</li>
<li>Variable gets appended to text file (to build a simple database of all emails)</li>
<li>Each word in variable gets compared to words in 4 different categories(dics)</li>
<li>Every time a word from the email matches with a word in a dic, some separate variables keep track of this. </li>
<li>In the end the programs shows the prediction. So all 4 categories with the number of times words of that dic where in the email. </li>
</ol>
<p>So far my program saves the input to a single, lowercase string and appends that to a text file. </p>
<p>So how can I iterate over each word in the newest entry to the text file and check which of the 4 dics has the most similar words. </p>
<p>This is what I have so far.</p>
<pre><code>content = ""
line = input("&gt;")

while line != "EOF":
    line = line.lower()
    content += line
    line = input("&gt;")

file = open('Email_file.txt','a')
file.write('-- START --' + '\n' + content + "\n" + '-- FINISH --')

list_1={
    'word1':1,
    'word2':1,
    'word4':1}

list_2={
    'word5':1,
    'word6':1,
    'word7':1}

list_3={
    'word8':1,
    'word9':1,
    'word10':1}

list_4={
    'word11':1,
    'word12':1,
    'word13':1}
</code></pre>
<p>To give a little background on how I want to use this: 
I get a lot of emails that usually are classifiable into 1 of 4 types. Instead of manually categorizing each mail, I want to write a program that predict's the likeliness of each category based on words in the email. I want to add a small machine learning part into it later by asking the user if the prediction was right, and if so increasing the number behind the word in the dics, so I can later translate this into how heavy each word weighs. But that's all for later. For now I just want it to compare the content of the email to 4 lists and print which list has the highest number of corresponding words.  </p>
<p>---- UPDATE --- 
When I try to run your code:
    from collections import Counter</p>
<pre><code>a = Counter({
    'hello':1,
    'bye':1,
    'see you':1,})

b = Counter({
    'tomorrow':1,
    'today':1,
    'last week':1,})

c = Counter({
    'walk':1,
    'bike':1,
    'swim':1,
    'run':1,})

with open("emailfile.txt") as f:
    # for every line
    for line in f:
        # split line into words
        spl = line.split()
        # update count for each word set
        # a.keys() &amp; spl finds any common words
        a.update(a.keys() &amp; spl) # .viewkeys() for python2
        b.update(b.keys() &amp; spl)
        c.update(c.keys() &amp; spl)

# find word set with most occurrences
print(max((a, b, c), key=lambda x: sum(x.values())))
</code></pre>
<p>and emailfile.txt contains:</p>
<ul>
<li>hello, last week i bought my bike and today i am using it bike. then
i walk.</li>
</ul>
<p>it prints:
    Counter({'bike': 2, 'walk': 1, 'swim': 1, 'run': 1})</p>
<p>I don't see what it does since it keeps 'walk' on 1 even though it is in the file. </p>
<p>I want it to print something like: 
    Highest nr. of corresponding: C with 3 similar words</p>
<p>Thanks!!</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a rough idea of how to count the words and find the most frequently occurring in the file using <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow">collections.Counter</a> dicts: </p>
<pre><code>from collections import Counter
from string import punctuation

# Counter dicts will count the occurrences for each word set
a = Counter({
    'word1': 0,
    'word2': 0,
    'word4': 0})

b = Counter({
    'word5': 0,
    'word6': 0,
    'word7': 0})

c = Counter({
    'word8': 0,
    'word9': 0,
    'word10': 0})

d = Counter({
    'word11': 0,
    'word12': 0,
    'word13': 0})

with open("emailfile.txt") as f:
    # for every line
    for line in f:
        # split line into words, remove punctuation and lower
        spl = [w.strip(punctuation).lower() for w in line.split()]
        # update count for each word set
        # a.keys() &amp; spl finds any common words
        a.update(a.keys() &amp; spl) # .viewkeys() for python2
        b.update(b.keys() &amp; spl)
        c.update(c.keys() &amp; spl)
        d.update(d.keys() &amp; spl)

# find word set with most occurrences
print(max((a, b, c, d), key=lambda x: sum(x.values())))
</code></pre>
<p>Or store the words in separate lists and use a single Counter dict:</p>
<pre><code>a = [..]
b = [...]
 # etc...
from itertools import chain
with open("emailfile.txt") as f:
    cn = Counter(chain(*(w.strip(punctuation).lower() for w in line.split()) for line in f))


print(max((a, b, c, d), key=lambda x: sum(cn[w] for w in x)))
</code></pre>
</div>
<span class="comment-copy">Loop over the words, increment a count for each wordset and return the max</span>
<span class="comment-copy">How do i loop over words in a text file? For i in text.txt doesn't work in this case i believe</span>
<span class="comment-copy">I added an example of how to approach the problem, there are other factors  but it should give you a general idea</span>
<span class="comment-copy">Hi Padraic, thanks for your help so far! I have a hard time figuring out what you code does.</span>
<span class="comment-copy">@NieldeVries, it gets all the words from the file, does a count of each for each set of words then returns the max based on the word set that had the most occurrences.</span>
<span class="comment-copy">I tried to clarify it more with an update in my original question. I don't understand how it counts.</span>
<span class="comment-copy">That is what  a <code>Counter</code> dict does,  ah, ok, you need to strip the punctuation, I will edit. Is your file ascii only?</span>
<span class="comment-copy">Yes it's ascii only. Thanks for helping out. I'm trying to grasp the logic behind it!</span>
