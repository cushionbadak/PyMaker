<div class="post-text" itemprop="text">
<p>I got a strange error while working with Python unittest.  I have two folders in my project:</p>
<pre><code>project
    code
        __init__.py        (empty)
        app.py             (defines my App class)
    test
        test.py            (contains my unit tests)
</code></pre>
<p>test.py is:</p>
<pre><code>import os, sys, unittest
sys.path.insert(1, os.path.join(sys.path[0],'..'))
from code.app import App

class test_func1(unittest.TestCase):
    ...
</code></pre>
<p>When I run test.py I get the message:</p>
<pre><code>Traceback (most recent call last):
    File "&lt;frozen importlib._bootstrap&gt;", line 2218, in _find_and_load_unlocked
AttributeError: 'module' object has no attribute '__path__'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "...test.py, line 5, in &lt;module&gt;
    from code.app import App
ImportError: No module named 'code.app': 'code' is not a package
</code></pre>
<p>After verifying that <code>__init__.py</code> was present and banging my head for a while, on a whim I changed the name of the app directory from code to prog:</p>
<pre><code>import os, sys, unittest
sys.path.insert(1, os.path.join(sys.path[0],'..'))
from prog.app import App
</code></pre>
<p>... and everything was suddenly fine.  Unittest imported my app properly and ran the tests.</p>
<p>I've searched through <a href="https://docs.python.org/3.5/reference/lexical_analysis.html#keywords" rel="nofollow">https://docs.python.org/3.5/reference/lexical_analysis.html#keywords</a> and <a href="https://docs.python.org/3/reference/import.html#path-entry-finders" rel="nofollow">https://docs.python.org/3/reference/import.html#path-entry-finders</a> and don't see any indication that <code>code</code> is an illegal directory name.   Where would this be documented, and what other directory names are reserved?</p>
<p>System: python 3.4.3 [MSC v1600 32 bit] on win32, Windows 7</p>
</div>
<div class="post-text" itemprop="text">
<p><code>code</code> isn't reserved, but it <em>is</em> already defined in the standard library, where is it a regular module and not package. To import from your package, you should use a relative import.</p>
<pre><code>from .code.app import App
</code></pre>
</div>
<span class="comment-copy"><code>code</code> isn't a reserved name, but there is an <a href="https://docs.python.org/3/library/code.html" rel="nofollow noreferrer">existing module</a> in the standard library by that name, so naming your module <code>code</code> is a bad idea, like naming your list <code>list</code>. I'd expect your module to shadow the built-in with the information you've provided, but there are a number of possibilities that would make it go the other way.</span>
<span class="comment-copy">Correct me if i'm wrong, but you're supposed to do <code>from code import app</code>, depending on what you've defined in <code>__init__.py</code>. Maybe you can do <code>from code.app ...</code> if <code>app</code> is defined in <code>__init__.py</code>, if so ignore my comment.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/12172791/changes-in-import-statement-python3" title="changes in import statement python3">stackoverflow.com/questions/12172791/â€¦</a></span>
<span class="comment-copy">@Torxed, it is more explicit to do <code>from prog import app</code> and then use the qualified <code>app.App</code> in the script.  That doesn't require anything in <code>__init__.py</code>, but it's only necessary if you want to import and use two different modules that both define <code>App</code>.</span>
<span class="comment-copy">Note, I wouldn't have even run across this but for the fact that I was having problems with user-defined Exceptions and needed to come up with a tiny example to post on SO.   The tiny example including Exceptions works fine (as long as it has a non-colliding package name), so now it's back to the main problem.</span>
<span class="comment-copy">According to the PEP-0404 question you should be correct. But when I try <code>from .code.app import App</code>, I get "SystemError: Parent module ' ' not loaded, cannot perform relative import". The only thing that works is the supposedly now-illegal <code>from prog.app import App</code> (without the leading dot)</span>
