<div class="post-text" itemprop="text">
<p>If I import a Python <a href="https://github.com/paulcalabro/api-kickstart/blob/master/examples/python/config.py" rel="nofollow">module</a> that is already using <strong>argparse</strong>, however, I would like to use <strong>argparse</strong> in my script as well ...how should I go about doing this?</p>
<p>I'm receiving a <em>unrecognized arguments</em> error when using the following code and invoking the script with a -t flag:</p>
<p><strong>Snippet:</strong></p>
<pre><code>#!/usr/bin/env python

....
import conflicting_module
import argparse
...

#################################
# Step 0: Configure settings... #
#################################
parser = argparse.ArgumentParser(description='Process command line options.')
parser.add_argument('--test', '-t')
</code></pre>
<p><strong>Error:</strong></p>
<pre><code> unrecognized arguments: -t foobar
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to guard your <strong>imported modules</strong> with</p>
<pre><code>if __name__ == '__main__':
    ...
</code></pre>
<p>against it running initialization code such as argument parsing on import. See  <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do">What does <code>if __name__ == "__main__":</code> do?</a>.</p>
<p>So, in your <code>conflicting_module</code> do</p>
<pre><code>if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Process command line options in conflicting_module.py.')
    parser.add_argument('--conflicting', '-c')
    ...
</code></pre>
<p>instead of just creating the parser globally.</p>
<p>If the parsing in <code>conflicting_module</code> is a mandatory part of application configuration, consider using</p>
<pre><code>args, rest = parser.parse_known_args()
</code></pre>
<p>in your main module and passing <code>rest</code> to <code>conflicting_module</code>, where you'd pass either <code>None</code> or <code>rest</code> to <code>parse_args</code>:</p>
<pre><code>args = parser.parse_args(rest)
</code></pre>
<p>That is still a bit bad style and actually the classes and functions in <code>conflicting_module</code> would ideally receive parsed configuration arguments from your main module, which would be responsible for parsing them.</p>
</div>
<span class="comment-copy">Please show the full code and the full command line arguments you are passing to your script. You may find this to be useful: <a href="http://stackoverflow.com/help/mcve">How to create a Minimal, Complete, and Verifiable example</a></span>
<span class="comment-copy">It looks like most the code is contained within the constructor.  Even if I move line 39 into the constructor, it still produces the same effect.  <a href="https://github.com/paulcalabro/api-kickstart/blob/master/examples/python/config.py" rel="nofollow noreferrer">github.com/paulcalabro/api-kickstart/blob/master/examples/…</a></span>
<span class="comment-copy">I'm guessing you use <code>EdgeGridConfig</code> then. It will still add those arguments, and on line <a href="https://github.com/paulcalabro/api-kickstart/blob/master/examples/python/config.py#L60" rel="nofollow noreferrer">github.com/paulcalabro/api-kickstart/blob/master/examples/…</a> attempt to parse them and fail.</span>
<span class="comment-copy">@PaulCalabro to put it in other words: you're out of luck with this one.</span>
<span class="comment-copy">Okay, I can workaround that. Just wanted to know if there was a Pythonic way to handle this kindof thing. Thanks!</span>
<span class="comment-copy">@PaulCalabro Remove the argument parsing from <code>__init__</code>, make it a separate method to be called. Call it in your module guarded with the <code>if __name__ == '__main__':</code>, if you must. Allow the method to receive <a href="https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.parse_known_args" rel="nofollow noreferrer">unknown arguments</a></span>
