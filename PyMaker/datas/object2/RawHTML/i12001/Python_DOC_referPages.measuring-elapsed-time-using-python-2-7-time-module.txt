<div class="post-text" itemprop="text">
<p>I am trying to find the difference between two times using time module and then convert it to datetime format using strftime but I get a strange output for elapsed time starting from 1970, what is the best way to find elapsed time using python?</p>
<pre><code>start_time = time()
info('My Start Time ' + datetime.fromtimestamp(start_time).strftime('%d-%m-%Y %H:%M:%S'))
sleep(5)
elapsed_time = time() - start_time
info('My Elapsed Time' + datetime.fromtimestamp(elapsed_time).strftime('%d-%m-%Y %H:%M:%S'))
</code></pre>
<p><strong>Output is</strong></p>
<pre><code> [2016-03-17 00:45:16.828277] INFO: Generic: My Start Time 17-03-2016 11:45:16 
 [2016-03-17 00:45:21.832503] INFO: Generic: My Elapsed Time 01-01-1970 10:00:05
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Time intervals are different to times. It doesn't really make sense to convert a time interval like <code>elapsed_time</code> to a <code>datetime</code>.</p>
<p>Your script can be simplified considerably by using the <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime" rel="nofollow noreferrer"><code>datetime</code></a> module's <code>datetime</code> and <code>timedelta</code> objects. When you subtract one <code>datetime</code> from another the result is a <code>timedelta</code>.</p>
<pre><code>from time import sleep
from datetime import datetime

start_time = datetime.now()
print('My Start Time', start_time)
sleep(5)

stop_time = datetime.now()
print('My Stop Time', stop_time)

elapsed_time = stop_time - start_time
print('My Elapsed Time', elapsed_time)    
</code></pre>
<p><strong>output</strong></p>
<pre><code>My Start Time 2016-03-17 12:28:01.262090
My Stop Time 2016-03-17 12:28:06.265964
My Elapsed Time 0:00:05.003874
</code></pre>
<p>Please see the docs for <a href="https://docs.python.org/3/library/datetime.html#timedelta-objects" rel="nofollow noreferrer"><code>timedelta</code></a> to see more examples of what you can do with these objects.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is one of my favourite things! Your problem is that, as far as the time module is concerned... time began on January 1st 1970!! See the docs <a href="https://docs.python.org/2/library/time.html" rel="nofollow">here</a>.<br/>
Time starts counting from this date so what you are basically saying when you convert your elapsed time to a date, is give me 01/01/1970 + my elapsed time.</p>
<p>Besides I'm not sure if taking the elapsed time as a date is really what you want.  Don't you want to measure this in hours, minutes, etc. ? If you really do want the date, you should just call <code>new_time = time.time()</code> and then convert <code>new_time</code> to the format you want (without bothering to calculate elapsed time as a date) </p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of making your final timestamp from "elapsed time", you might want to do "start time" + "elapsed time" :)</p>
<pre><code>start_time = time()
info('My Start Time ' + datetime.fromtimestamp(start_time).strftime('%d-%m-%Y %H:%M:%S'))
sleep(5)
elapsed_time = time() - start_time
info('My Elapsed Time' + datetime.fromtimestamp(elapsed_time + start_time).strftime('%d-%m-%Y %H:%M:%S'))
</code></pre>
<p>This is because Python's Time module's epoch is January 1, 1970. Calling <code>time()</code> measures the seconds since the epoch (<code>.strftime('%d-%m-%Y %H:%M:%S')</code> just reformats the seconds to a date we can understand)</p>
<p>So when you find <code>elapsed_time</code>, you end up with seconds between when you first started and the time you assigned the variable. Thus, it makes sense for <code>datetime.fromtimestamp(elapsed_time)</code> to output Jan 1, 1970 10:00:05. Where <code>elapsed_time</code> is 5, <code>start_time</code> is 1458177108.6...You want the result to be start_time PLUS elapsed_time (or, simply, why not just the current time?)</p>
<p>I hope this explanation made sense. Here's more explanation from the Python docs <a href="https://docs.python.org/2/library/time.html" rel="nofollow">https://docs.python.org/2/library/time.html</a></p>
</div>
<span class="comment-copy">PM 2Ring I tried that solution earlier and it work's great, my problem was to resume the time, and I could not achieve that with timedelta, therefore I thought time module would help. Would you know how can I add seconds, minutes and hours to a timedelta object?</span>
<span class="comment-copy">@AftabNaveed you can add/substract <code>timedelta</code> objects with each other.  Convoluted example: <code>timedelta(hours=1, seconds=2) + timedelta(minutes=9, seconds=51</code>) which gives you a <code>datetime.timedelta(0, 4193)</code> - you could then re-use that delta with a <code>datetime</code>, eg: <code>datetime(2000, 1, 1) + (timedelta(hours=1, seconds=2) + timedelta(minutes=9, seconds=51))</code> gives you: <code>datetime.datetime(2000, 1, 1, 1, 9, 53)</code></span>
<span class="comment-copy">I resolved the issue by using datetime which was exactly the same as your approach, but was struggling with timedelta. The returned elapsed date is of type time delta, and two timedeltas can be subtracted from each other.</span>
<span class="comment-copy">This makes more sense, I want to get elapsed hours and minutes after user presses Pause button in my application, and then resume it from where it was left, I think your solution is quite close to what I need.</span>
<span class="comment-copy">This just prints the <code>datetime</code> of the second <code>time()</code> call, <b>not</b>  the <code>elapsed_time</code> interval.</span>
<span class="comment-copy">Thanks for the answer, but wouldn't that make it equivalent to the current time :) ?</span>
