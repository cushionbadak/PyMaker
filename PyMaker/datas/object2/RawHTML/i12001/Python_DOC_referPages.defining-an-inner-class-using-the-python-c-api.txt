<div class="post-text" itemprop="text">
<p>In Python, it’s straightforward to define an inner class:</p>
<pre class="lang-py prettyprint-override"><code>class MyClass(object):

    class MyInnerClass(object):
        pass
</code></pre>
<p>… which the inner class can be accessed as one would expect, e.g. by doing <code>MyClass.MyInnerClass</code>.</p>
<p>I am trying to set up something similar with an extension module. Typically one adds the extension types one defines to the extension module object in the modules’ <code>&lt;modulename&gt;init()</code> function with code like this:</p>
<pre class="lang-cpp prettyprint-override"><code>/// …
if (PyType_Ready(&amp;BufferModel_Type) &lt; 0)      { return; }

/// Add the BufferModel type object to the module
Py_INCREF(&amp;BufferModel_Type);
PyModule_AddObject(module,
    "Buffer",
    (PyObject*)&amp;BufferModel_Type);

/// …
</code></pre>
<p>In order to set up the inner class, I varied this approach to try and add a <code>PyTypeObject*</code> as an attribute of another <code>PyTypeObject*</code>, like so:</p>
<pre class="lang-cpp prettyprint-override"><code>/// …
if (PyType_Ready(&amp;ImageBufferModel_Type) &lt; 0) { return; }
if (PyType_Ready(&amp;ImageModel_Type) &lt; 0)       { return; }

/// Add the ImageBufferModel type object to im.Image
Py_INCREF(&amp;ImageBufferModel_Type);
PyObject_SetAttrString((PyObject*)&amp;ImageModel_Type,
    "ImageBuffer",
    (PyObject*)&amp;ImageBufferModel_Type);
PyType_Modified((PyTypeObject*)&amp;ImageModel_Type);

/// Add the ImageModel type object to the module
Py_INCREF(&amp;ImageModel_Type);
PyModule_AddObject(module,
    "Image",
    (PyObject*)&amp;ImageModel_Type);

/// …
</code></pre>
<p>… I figured <code>PyObject_SetAttrString()</code> would work as the <a href="https://docs.python.org/2.7/c-api/typeobj.html" rel="nofollow">introduction to “Type Objects” in the C-API docs</a> specifically says:</p>
<blockquote>
<p>Type objects can be handled using any of the <code>PyObject_*()</code> or
  <code>PyType_*()</code> functions […]</p>
</blockquote>
<p>… and I added the call <code>PyType_Modified()</code> based on <a href="https://docs.python.org/2.7/c-api/type.html#c.PyType_Modified" rel="nofollow">its description in the docs</a>. But so: when I compile everything and try to load the extension, I get this error:</p>
<pre><code>&gt;&gt;&gt; import im
Traceback (most recent call last):
  File "&lt;input&gt;", line 1, in &lt;module&gt;
    import im
  File "im/__init__.py", line 2, in &lt;module&gt;
    from im import (
TypeError: can't set attributes of built-in/extension type 'im.Image'
</code></pre>
<p>… I presume I am going about this the wrong way; what should I try instead?</p>
</div>
<div class="post-text" itemprop="text">
<p>For this you need to use <a href="https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_dict" rel="nofollow"><code>tp_dict</code></a> directly:</p>
<blockquote>
<p>This field should normally be initialized to <em>NULL</em> before <code>PyType_Ready</code> is called; it may also be initialized to a dictionary containing initial attributes for the type. Once <code>PyType_Ready()</code> has initialized the type, extra attributes for the type may be added to this dictionary only if they don’t correspond to overloaded operations (like <code>__add__()</code>).</p>
</blockquote>
<p>Instead of using <code>PyObject_SetAttrString()</code> you could just do</p>
<pre><code>PyDict_SetItemString(ImageModel_Type.tp_dict, "ImageBuffer", (PyObject*) &amp;ImageModel_Type);
</code></pre>
<p>But in this case the warning from the documentation applies:</p>
<blockquote>
<p>It is not safe to use <code>PyDict_SetItem()</code> on or otherwise modify <code>tp_dict</code> with the dictionary C-API.</p>
</blockquote>
<p>So maybe initialize the <code>tp_dict</code> before calling <code>PyType_Ready</code> on <code>ImageModel_Type</code>:</p>
<pre class="lang-c prettyprint-override"><code>/// Initialize tp_dict with empty dictionary
ImageModel_Type.tp_dict = PyDict_New();
if (!ImageModel_Type.tp_dict) { return; }

/// Add the ImageBufferModel type object to im.Image
if (PyType_Ready(&amp;ImageBufferModel_Type) &lt; 0) { return; }
Py_INCREF(&amp;ImageBufferModel_Type);
PyDict_SetItemString(ImageModel_Type.tp_dict,
    "ImageBuffer",
    (PyObject*)&amp;ImageBufferModel_Type);

/// Add the ImageModel type object to the module
if (PyType_Ready(&amp;ImageModel_Type) &lt; 0) { return; }
Py_INCREF(&amp;ImageModel_Type);
PyModule_AddObject(module,
    "Image",
    (PyObject*)&amp;ImageModel_Type);
</code></pre>
</div>
<span class="comment-copy">Wow, thanks! The type object documentation is sometimes confusing and I appreciate this direct answer, this totally works.</span>
<span class="comment-copy">I should also add that making changes to a PyTypeObject’s <code>tp_dict</code> data member can be used to achieve many of the same ends often achieved with metaclasses, on the Python side (e.g. synthesizing class-based descriptors á la Django’s ORM, et cetera).</span>
