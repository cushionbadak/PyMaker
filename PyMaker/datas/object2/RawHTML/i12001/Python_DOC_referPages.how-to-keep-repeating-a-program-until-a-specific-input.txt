<div class="post-text" itemprop="text">
<p>I want to write a program to compute the average of a group of numbers entered (one at a time) by the user. Each group should end when the user enters the sentinel value '' (ENTER without input). Two consecutive sentinel values should quit the program. The number of each group should be displayed along side with their average:</p>
<p>This is my code :</p>
<pre><code>x = eval(input('Enter a number: '))
lis = []
while x != '':
    lis.append(x)
if x == '':
    avg = sum(lis) / len(lis)
print(avg)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just move the <code>input</code> into the loop:</p>
<pre><code>x = None
lis = []
while x != '':
    x = input('Enter a number: ')
    if x != '':
        lis.append(int(x))
avg = sum(lis) / len(lis)
print(avg)
</code></pre>
<p>Also you don't need the <code>if</code> statement as <code>x</code> must be equal to <code>''</code> anyway so that the <code>while</code> loop terminates.</p>
</div>
<span class="comment-copy">Please no <code>eval</code>. They made <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a> for you so you can allow people to input a ridiculous range of literal types without making <code>input</code> provide a Turing complete interface...</span>
<span class="comment-copy">Almost, but that won't work as <code>x</code> will be <code>''</code> before the loop. Also the <code>eval</code> (which should better be <code>int</code> or <code>float</code>) needs to be applied to <code>x</code> only if it is not <code>''</code>.</span>
<span class="comment-copy">@DanD. You are right, fixed now!</span>
<span class="comment-copy">Please for the love of all things holy, use ast.literal_eval on user input. Otherwise a user could input   <i>import shutil; shutil.rmtree('/')</i></span>
<span class="comment-copy">@Selcuk  It does not work but I almost got the Idea</span>
<span class="comment-copy">@willnx: Technically, <code>eval</code> defaults to only allowing expressions, but <code>__import__('shutil').rmtree('/')</code> satisfies that requirement. I agree with the sentiment 100%.</span>
