<div class="post-text" itemprop="text">
<p>I have a function with a string as an argument that returns two lists</p>
<p>e.g.</p>
<pre><code>def return_words(string):
    return list1, list2
</code></pre>
<p>Obviously there's code in between. I want to be able to time this function accurately for various strings as I need to improve efficiency when long strings are inputted.</p>
<p>Sorry if this is a trivial question as I am new to python.</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>timeit</code> module and pass the arguments in <code>timeit</code>'s <code>setup</code> argument:</p>
<pre><code>from timeit import timeit


inp = """
def return_words(string):
    return list1, list2
return_words(string)
   """

for s in list_of_inputs:
    print '{}'.format(s), '-&gt;', timeit(stmt=inp,
                                       number=1000000,
                                       setup="string = '{}'".format(s))
</code></pre>
<p>Demo :</p>
<pre><code>inp = """
def return_words(string):
    return [i for i in string if i.isdigit()]

return_words(string)
   """

list_of_inputs = ['inputstring1', 'inp2']

for s in list_of_inputs:
    print '{}'.format(s), '-&gt;', timeit(stmt=inp,
                                       number=1000000,
                                       setup="string = '{}'".format(s))
</code></pre>
<p>Output: </p>
<pre><code>inputstring1 -&gt; 0.986068964005
inp2 -&gt; 0.548749923706
</code></pre>
<p><em>Note</em> that <code>timeit</code> also accepts a function as the first argument which is defined in your code, but you can not pass argument to it. In that case it's better to create a wrapper which will call your function with relative arguments. Read <a href="http://pythoncentral.io/time-a-python-function/" rel="nofollow noreferrer">http://pythoncentral.io/time-a-python-function/</a> for more info.</p>
</div>
<div class="post-text" itemprop="text">
<p>With Python 3.7, there is a new <a href="https://docs.python.org/3/library/time.html#time.time_ns" rel="nofollow noreferrer">nanosecond timer</a>:</p>
<pre><code>&gt;&gt;&gt; st={time.time_ns() for e in range(10000000)}
&gt;&gt;&gt; (max(st)-min(st))/10**9
2.275888
</code></pre>
<p>So a range counter (and calling <code>time.time_ns()</code> that many times) to 10,000,000 takes 2.275888 seconds...</p>
<p>There is also a nanosecond precision performance timer (how long does the <code>range</code> part take?):</p>
<pre><code>&gt;&gt;&gt; t1=time.perf_counter_ns(); x={y for y in range(10000000)}; t2=time.perf_counter_ns()
&gt;&gt;&gt; (t2-t1)/10**9
0.860256448
</code></pre>
<p>Or the <a href="https://docs.python.org/3.7/library/timeit.html" rel="nofollow noreferrer">timeit</a> module:</p>
<pre><code>&gt;&gt;&gt; timeit.timeit("x={_ for _ in range(10000000)}",number=1)
0.7478707919999579
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another option is to use time and timedelta. You can modify the code below</p>
<pre><code>import time
from datetime import timedelta


start_time = time.time()
//do stuff
end_time = time.time()
time_slice = end_time - start_time
human_time = str(timedelta(seconds=int(time_slice)))
</code></pre>
</div>
<span class="comment-copy">You question is unclear and broad. What do you mean by <i>I want to be able to time this function accurately for various strings as I need to improve efficiency when long strings are inputted.</i>?</span>
<span class="comment-copy">Is it possible to use return_words(string) as a parameter of timeit instead of stmt=inp?</span>
<span class="comment-copy">@user2201609 Check out the edit.</span>
<span class="comment-copy">Thank you! Very helpful</span>
