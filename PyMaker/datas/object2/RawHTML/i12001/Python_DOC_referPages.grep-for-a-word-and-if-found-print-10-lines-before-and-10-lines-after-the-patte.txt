<div class="post-text" itemprop="text">
<p>I am processing a huge file. I want to search for a word in the line and when found I should print 10 lines before and 10 lines after the pattern match. How can I do it in Python?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import collections
import itertools
import sys

with open('huge-file') as f:
    before = collections.deque(maxlen=10)
    for line in f:
        if 'word' in line:
            sys.stdout.writelines(before)
            sys.stdout.write(line)
            sys.stdout.writelines(itertools.islice(f, 10))
            break
        before.append(line)
</code></pre>
<p>used <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow"><code>collections.deque</code></a> to save up to 10 lines before match, and <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow"><code>itertools.islice</code></a> to get next 10 lines after the match.</p>
<hr/>
<p><strong>UPDATE</strong> To exclude lines with ip/mac address:</p>
<pre><code>import collections
import itertools
import re  # &lt;---
import sys

addr_pattern = re.compile(
    r'\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b|'
    r'\b[\da-f]{2}:[\da-f]{2}:[\da-f]{2}:[\da-f]{2}:[\da-f]{2}:[\da-f]{2}\b',
    flags=re.IGNORECASE
)  # &lt;--

with open('huge-file') as f:
    before = collections.deque(maxlen=10)
    for line in f:
        if addr_pattern.search(line):  # &lt;---
            continue                   # &lt;---
        if 'word' in line:
            sys.stdout.writelines(before)
            sys.stdout.write(line)
            sys.stdout.writelines(itertools.islice(f, 10))
            break
        before.append(line)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>grep</code> with <code>-C</code> option, easiest solution:</p>
<pre><code>grep -C 10 'what_to_search' file.txt
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this</p>
<pre><code>#!/usr/bin/python
import commands

filename = "any filename"
string_to_search = "What you want to search"

extract  = (commands.getstatusoutput("grep -C 10 '%s' %s"%(string_to_search,filename)))[1]

print(extract)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about some short code like this in python to do context grepping:</p>
<pre><code>$ cat file2
abcd
xyz
print this 1
print this 2
line having pattern
print this 1
print this 2
abcd
fgg
$ cat p.py 
import re
num_lines_cnt=2
lines=open('file2').readlines()
print([lines[i-num_lines_cnt:i+num_lines_cnt+1] for i in range(len(lines)) if re.search('pattern', lines[i]) is not None])
$ python3 p.py 
[['print this 1\n', 'print this 2\n', 'line having pattern\n', 'print this 1\n', 'print this 2\n']]
$
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Without importing any package, we can achieve this.</p>
<pre><code>string_to_search=input("Enter the String: ")
before=int(input("How many lines to print before string match ? "))
after=int(input("How many lines to print after string match ? "))
file_to_search=input("Enter the file to search: ")

def search_string(string_to_search, before, after, file_to_search):
    with open(file_to_search) as f:
        all_lines = f.readlines()
        last_line_number=len(all_lines)
        for current_line_no, current_line in enumerate(all_lines):
            if string_to_search in current_line:
                start_line_no=max(current_line_no - before, 0)
                end_line_no=min(last_line_number, current_line_no+after+1)
                for i in range(start_line_no, current_line_no):print(all_lines[i])              
                for i in range(current_line_no, end_line_no):print(all_lines[i])
                break
search_string(string_to_search, before, after, file_to_search)
</code></pre>
<p><strong>Explanation:</strong></p>
<p><code>string_to_search</code>: word/pattern that you want to grep<br/>
<code>before</code>: number of lines that you want to print before the pattern match<br/>
<code>after</code>: number of lines that you want to print after the pattern match<br/>
<code>my_file.txt</code> is the file which contains the word/pattern/string    </p>
<p><code>current_lineno</code> will contain the line number which contains the pattern </p>
<p><strong>Sample File Content:</strong></p>
<pre><code>$cat my_file.txt
this is line 1
this is line 2
this is line 3
this is line 4
this is line 5 my pattern is here
this is line 6
this is line 7
this is line 8
this is line 9
this is line 10
</code></pre>
<p><strong>Sample Execution and Output:</strong></p>
<pre><code>$python grep_3.py
Enter the String: my pattern
How many lines to print before string match ? 2
How many lines to print after string match ? 1000
Enter the file to search: my_file.txt
this is line 3

this is line 4

this is line 5 my pattern is here

this is line 6

this is line 7

this is line 8

this is line 9

this is line 10
</code></pre>
<p><strong>The above code is equivalent to Unix `grep' command</strong></p>
<pre><code>$ grep -A 2000 -B 2 'my pattern' my_file.txt
this is line 3
this is line 4
this is line 5 my pattern is here
this is line 6
this is line 7
this is line 8
this is line 9
this is line 10
</code></pre>
</div>
<span class="comment-copy">Are you working on linux or windows.?</span>
<span class="comment-copy">@mkHun, Readhat Linux</span>
<span class="comment-copy">@ falsetru : I want to neglect the lines that contain IP addresses and then select 10 lines before and after. How could I do that? This is my regex: ("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$"). How do I neglect lines?</span>
<span class="comment-copy">@RowanaRavenclaw, I am not sure I understood your question, but try this: <code>if 'word' in line and not re.search(r'\b\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}\b', line):</code>.  You need to <code>import re</code></span>
<span class="comment-copy">I want to grep for a pattern, and if found print 10 lines above and below. But while printing these 10 lines above and below, I want to neglect those lines that contain MAC addresses. (I still want 10 lines each, but those lines without MAC addresses) ~Thanks!</span>
<span class="comment-copy">Could you elaborate please? How do I do it in Python?</span>
<span class="comment-copy">@RowanaRavenclaw Can't you just do it in <code>grep</code>? A Python solution would not be as fast as the <code>grep</code> one..</span>
<span class="comment-copy">@ heemayl, I am working on a tool and the results need to be displayed on a different file. Also, the file from when I read the input is dynamically created.</span>
<span class="comment-copy">You can run this grep command and collect the output with <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow noreferrer"><code>subprocess.check_output()</code></a>. Just remove <code>file.txt</code> and pass the file contents in <code>stdin</code>. <code>Popen()</code> with <code>communicate()</code> is also an option.</span>
<span class="comment-copy">How can I include a new line when I print it?  Thanks!</span>
<span class="comment-copy">@RowanaRavenclaw just print it normally or join using <code>\n</code>, you want to print a newline between each matches?</span>
