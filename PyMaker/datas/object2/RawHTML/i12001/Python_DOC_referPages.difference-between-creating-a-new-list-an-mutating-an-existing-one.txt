<div class="post-text" itemprop="text">
<p>I'm trying to calculate the shortest path from a node <code>start</code> to another <code>end</code> in a graph. I've been reading that the <code>+</code> operator, applied to a list, concatenates an element to the end of the former, creating a new list as a result. Whereas using <code>.extend()</code> not only does the same of adding the elements to the end of the list but also keeps the same list instance.</p>
<p>I can't see why if I use <code>path = path + [start]</code> my code works, and not if I use <code>path.extend(start)</code>. I don't see the need of creating a new list each time the function is called for it to return the right results.</p>
<p>Thanks in advanced.</p>
<pre><code>def shortest_path_edge_num(graph, start, end, path = None, shortest = None):
    if (graph or start or end) is None: return None
    if path is None: path = []
    if shortest is None: 
        shortest = []

    path = path + [start]
    # path.extend([start])
    # Base case:
    if start == end: return path

    for adj_node in graph[start]:
        if adj_node[0] not in path:
        new_path = shortest_path_edge_num(graph, adj_node[0], end, path, shortest)
            if new_path:
                if (not shortest) or (len(new_path) &lt; len(shortest)):
                    shortest = new_path
    return shortest

# Main routine
graph = {
    'A' : [('B',5),('F',10)],
    'B' : [('A',5),('E',2),('C',4)],
    'C' : [('B',4),('D',11)],
    'D' : [('C',11),('E',7)],
    'E' : [('B',2),('D',7),('F',1)],
    'F' : [('A',10),('E',1)]
}

print shortest_path_edge_num(graph,'A','C')

&gt;&gt;&gt; python graph.py
['A', 'B', 'C']
&gt;&gt;&gt; # But when changing to path.extend([start])
&gt;&gt;&gt; python graph.py
['A', 'B', 'E', 'D', 'C', 'F']
</code></pre>
<p><strong>EDIT</strong></p>
<p>Using <code>+</code> creates a new instance of <code>list</code>, thus all the other variables that depend in some way of it don't change each time I add a new element to <code>path</code>. Now the question should be <em>how should I remove that dependence?</em></p>
</div>
<div class="post-text" itemprop="text">
<p><code>path.extend()</code> is expecting another sequence as its argument.  The same as you said <code>path + [start]</code>, you need to say <code>path.extend([start])</code>.  The easier way, however, would be to use <code>.append()</code>: <code>path.append(start)</code>.  <a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists" rel="nofollow">Here</a> are the docs on <code>list</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I wasn't aware that applying operations to <code>path</code> will result in modifications in other variables such as <code>new_path</code>or <code>shortest</code>. When I saw that doing <code>path.append(start)</code> or <code>path.extend([start])</code> also added <code>start</code> to the other two lists I realized that I should not use <code>path</code> when calling the function recursively in <code>new_path = shortest_path_edge_num(graph, adj_node[0], end, path, shortest)</code> but instead use <code>path[:]</code> so as to send a copy of the list and not the reference.</p>
<p>So in the end I kept the line <code>path.append(start)</code> or <code>path.extend([start])</code> and modified the parameter <code>path[:]</code> in the recursive call. By doing that the program returned the shortest path as expected. </p>
<p>Thanks for the comments and the answers.</p>
</div>
<span class="comment-copy">Do you mean, you used path.extend([start])? Because extend() works only with 2 lists. Or are you using path.append(start) ?</span>
<span class="comment-copy">I misspelled the <code>.extend()</code>. Just corrected it.</span>
<span class="comment-copy">My first approach was using <code>path.append(start)</code>, but as it didn't work, in fact <code>path.extend([start])</code> doesn't either, I tried with <code>+</code>.</span>
<span class="comment-copy">Does <code>path = path + [start]</code> work?</span>
<span class="comment-copy">Yes, it's the only way I can make it work, but I can't get why it does.</span>
<span class="comment-copy"><code>path.append(start)</code> and <code>path.extend([start])</code> are equivalent to <code>path = path + [start]</code> (except that it effects other variables that refer to the same list).</span>
<span class="comment-copy">The difference is that if I use <code>.append()</code> and assign to <code>new_path</code> the result of a function that uses <code>path</code> each <code>path.append(...)</code> will modify all other lists that depend in some way of that instance of <code>path</code>. That's why it only works with <code>+</code>.</span>
