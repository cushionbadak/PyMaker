<div class="post-text" itemprop="text">
<p>I have a dictionary with two keys.</p>
<pre><code>my_dict = {"Hello": {'count': 2, 'distance': 6}, "Clear": {'count': 8, 'distance': 8}}
</code></pre>
<p>and I am using </p>
<pre><code>a = ''.join(''.join((k, str(v))) for k,v in my_dict.items())
</code></pre>
<p>to convert it to string to print:</p>
<pre><code>"Hello" {'count': 2, 'distance': 6L} "Clear" {'count': 8, 'distance': 9L} 
</code></pre>
<p>I was wondering how I would be able to just get the key and the count 
to print:</p>
<pre><code>"Hello" - count: 2
"Clear" - count: 8
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If <code>d</code> is</p>
<pre><code>&gt;&gt;&gt; d = {"Hello": {'count': 2, 'distance': 6}, "Clear": {'count': 8, 'distance': 8}}
</code></pre>
<p>Then</p>
<pre><code>&gt;&gt;&gt; x = '\n'.join('{k} - {n}: {v}'.format(k=k, n='count', v=v['count']) for k,v in d.items())
&gt;&gt;&gt; print(x)

Hello - count: 2
Clear - count: 8
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you have a nested dictionary, you can use <code>print</code> with an unpacked generator expression. <code>str.format</code> is one way to extract the relevant data from your dictionary:</p>
<pre><code>my_dict = {"Hello": {'count': 2, 'distance': 6},
           "Clear": {'count': 8, 'distance': 8}}

print(*('{} - count: {}'.format(i, d[i]['count']) for i in d), sep='\n')

Hello - count: 2
Clear - count: 8
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I am understanding you right, something like this would work,</p>
<pre><code>keys = list(my_dict.keys())

for key in keys:
    s = '"' + key
    s += '" - count: ' + str(my_dict[key]['count'])
    print(s)
</code></pre>
<p>This would print a list of what you described.</p>
</div>
<span class="comment-copy">Your code has syntax errors..</span>
<span class="comment-copy">Change the syntax of my_dict.</span>
<span class="comment-copy">It's difficult to understand your question, but it sounds like you want a Counter object from the <code>collections</code> module. <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">Here</a> is the documentation for the Counter object</span>
<span class="comment-copy">Sorry about that! I had a previous part of my code assigning the dictionary for me.</span>
<span class="comment-copy">Hello, I am trying to add distance too and using the code: a = '&lt;/br&gt;\n'.join('{k} - {n}: {v} {m}: {p}'.format(k=k, n='count', v=v['count'] , m='distance', p= p['distance']) for k,v in d.items())</span>
<span class="comment-copy">^that doesn't seem to work. Could you please explain how what you represented is adding count value so that I can add distance too?</span>
<span class="comment-copy">@girlwhocodes <code>v</code> is the <code>value</code> in your <code>key, value</code> tuple (which I called <code>k,v</code>). This k,v tuple is looping through <code>d.items()</code>, which is a sequence of <code>keu, value</code> tuples. Therefore, use <code>v['distance']</code> and not <code>p[distance]</code></span>
