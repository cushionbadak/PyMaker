<div class="post-text" itemprop="text">
<p>I am trying write a code which generates a series of responses: if the user enters 1 number, several numbers or a string instead in order to generate a list of Fibonacci numbers. The code is as follows:</p>
<pre><code>def fib (a, b):
    return a + b

number = int(input("Please write how many Fibonacci numbers you wish to have generated: "))

fibonacci_list = []
for n in range(number):
    if n in [0, 1]:
        fibonacci_list += [1]
        print("The first", number, "Fibonacci number is:", fibonacci_list)
    elif:
        fibonacci_list += [fib(fibonacci_list[n-2], fibonacci_list[n-1])]
        print("The first", number, "Fibonacci numbers are:", fibonacci_list)
    else:
        print('Sorry could not recognise the input')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should write a condition for <code>elif</code> too, for example:</p>
<pre><code>elif n in [1,2]:
</code></pre>
<p>In your case, i would write the code in this way:</p>
<pre><code>def fib (a, b):
    return a + b

try:
    number = int(input("Please write how many Fibonacci numbers you wish to have generated: "))

    fibonacci_list = []
    for n in range(number):

        if n in [0, 1]:
            fibonacci_list += [1]
            print("The first", number, "Fibonacci number is:", fibonacci_list)
        else:
            fibonacci_list += [fib(fibonacci_list[n-2], fibonacci_list[n-1])]
            print("The first", number, "Fibonacci numbers are:", fibonacci_list)
except:
    print('Sorry could not recognise the input')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The condition in your elif is missing.</p>
</div>
<div class="post-text" itemprop="text">
<p>As other said, you miss a condition in your <code>elif</code>, but I highly recommend using <code>sets</code> in this case</p>
<pre><code>if n in {0,1}:
    ...
elif n in {1,2}:
   ...
</code></pre>
<hr/>
<p><code>sets</code> have better lookup time than lists. Also, <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">this is what they were meant for</a>. </p>
<blockquote>
<p>Basic uses include membership testing and eliminating duplicate entries.</p>
</blockquote>
</div>
<span class="comment-copy">Else if <i>what</i>?</span>
<span class="comment-copy"><i>In general, I agree.</i> , <i>In this case - literally doesn't matter.</i> seems to me like contradictory statements. Why wouldn't someone learn how to do things the right way even if no <i>performance gain</i> is apparent ?</span>
