<div class="post-text" itemprop="text">
<p>I'm pretty new to django and came across something that confuses me in this views.py file I've created. I just played around with it a little and came up with something that works, but I don't get why it does.</p>
<p>The class Draft_Order (which I have in another file) requests the NBA stats page, performs some calculations on the backend, and spits out draft lottery odds (for the new draft). The methods initialize, sim draft, and get standings all do things on the backend (which works perfectly).</p>
<p>Now, my question is that I don't get why I can create an instance "f" of the class DraftOrder outside all of the functions, but yet still be able to reference it within most of my functions as they are getting called from my urls.py file, so it doesnt seem like they should be working at all. Also, for some reason, the update function can only reference "f" if I don't have an assignment to f in the function-e.g. if I add the line </p>
<pre><code>f = temp 
</code></pre>
<p>Then all of a sudden it gives me an "unboundlocalerror", and says that f is referenced before assignment.</p>
<p>I'd appreciate any help on this. Thanks.</p>
<pre><code>from django.shortcuts import render
from django.http.response import HttpResponse
from simulator.draft_simulator import Draft_Order
from simulator.models import Order

# Create your views here.
f = Draft_Order()
f.initialize()

def index(request):
    return HttpResponse('&lt;p&gt;Hello World&lt;/p&gt;')

def init(request):
    return HttpResponse(f.initalodds.to_html())

def table(request):
    f.sim_draft()
    return HttpResponse(f.finaltable.to_html())

def update(request):
    temp = Draft_Order()
    temp.get_standings()
    if temp == f:
        return HttpResponse('Same!')
    else:
        return HttpResponse('updated!')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>UnboundLocalError happens because presence of an assignment to <code>f</code> inside a function shadows the global <code>f</code> for the whole function. You need to explicitly state that <code>f</code> refers to the global variable:</p>
<pre><code>def update(r):
    global f
    if f == ...
    f = Draft_Order()  # new draft order
</code></pre>
<p>But really, you shouldn't rely on global values stored in RAM, because in production environment you'll have several processes with probably different <code>f</code>s and you won't be able to control time of life of the said processes. Better to rely on a persistent memory here (DBs, key-value stores, files, etc).</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to look into <a href="https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces" rel="nofollow noreferrer">python namespaces and scope</a></p>
<p>But here is how i like to think of it to avoid going crazy(everything in python is an object).</p>
<p>In simple terms python those <strong>.py</strong> files are modules, when python is running those modules are converted into objects, so you have a <strong>urls</strong> object, a <strong>views</strong> object ,etc.</p>
<p>so any variable you define on module level turns into an attribute and any function defined turns into a method.</p>
<p>I believe you do something like this on your <strong>url.py</strong></p>
<pre><code>from simulator import views
</code></pre>
<p>or</p>
<pre><code>from simulator.views import update
</code></pre>
<p>which basically means get the <strong>views</strong> object which represent the <strong>views.py</strong> file.
From the <strong>views</strong> object you are able to access your methods like <strong>update</strong>.</p>
<p>Your <strong>update</strong> method is able to access the <strong>f</strong> because here's an excerpt from <a href="https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces" rel="nofollow noreferrer">python namespaces and scope</a></p>
<blockquote>
<p>the global scope of a function defined in a module is that moduleâ€™s namespace, no matter from where or by what alias the function is called. </p>
</blockquote>
<ol>
<li><p>Basically your <strong>f</strong> is an attribute of the <strong>views</strong> object meaning any methods within <strong>views</strong> object can access it. </p></li>
<li><p>Reason why it works when on <strong>urls.py</strong> its because methods can access the attributes of objects the are defined in, so since <strong>update</strong> method is define inside <strong>views</strong> its able to access <strong>views</strong> attributes.</p></li>
</ol>
<p>Please read more on <a href="https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces" rel="nofollow noreferrer">python namespaces and scope</a> this a very simplified explanation.</p>
</div>
<span class="comment-copy">Thank you! This, combined with the response by Eddibert make a lot of sense-thank you. I did not know that when you called a function, the module is considered an object that the function is defined in-and therefore it can be used by the function call. Regarding what you said about persistent memory, I was looking for a way to store the Draft_Order object in memory with django (preferably through the database), but I couldnt find anything related to the topic. Is there any way to do this? Or do I have to save the output of the object as json/csv in order to save to the database? Thanks</span>
<span class="comment-copy">@kunal123 Take a look at sample projects tutorials at djangoproject.com. There they explain Django ORM, and you will be able to reimplement <code>Draft_Order</code> class as a database model and then work with DB using purely python code and objects.</span>
<span class="comment-copy">Thank you! This was very helpful- I was not aware that a module was treated like the object for the function call, that clears things up. I posted a question above to vovanrock, is there any way you would know of any ways to store an object in persistent memory?</span>
