<div class="post-text" itemprop="text">
<p>I have a function that receives a variable <code>x</code> and checks for it's "zeroness" or "emptiness".</p>
<p>Using <a href="https://www.python.org/dev/peps/pep-0484/" rel="nofollow noreferrer">PEP-484</a> type hinting syntax, what type hint would I use? </p>
<p>And how would I check if it is explicitly "<a href="https://docs.python.org/3/reference/datamodel.html#object.__bool__" rel="nofollow noreferrer">boolable</a>" by providing a custom <code>__bool__</code> or <code>__len__</code> method (so the outcome of <code>bool(object)</code> <em>could</em> be <code>False</code>), apart from checking if it actually has implemented a <code>__bool__</code> or <code>__len__</code> method? </p>
<p>example:</p>
<pre><code>def my_func(x: "what goes here?"):
    assert boolable(x)  # what to do in this line?
    if x:
        "some logic"
    else:
        "some other logic"
</code></pre>
<p>I don't want to accept just any object; all objects have a truth value but for types without <code>__bool__</code> or <code>__len__</code> that's always <code>True</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>So first, since the comments seem to be a little confused about this, I figure I should probably state my assumptions first. I'm assuming that you're trying to check whether something is 0 or empty, or is boolable <em>statically</em> -- that is, you annotate your code using PEP 484 types and run a typechecker like mypy to determine whether a variable is zero or not.</p>
<p>If that is <em>not</em> what you're trying to do, and you're trying to check if something is zero or empty or boolable at <em>runtime</em> (when actually running your code), you can just use isinstance checks -- e.g. stuff like <code>assert x == 0</code> or <code>assert len(x) == 0</code> or <code>assert hasattr(x, '__bool__') or hasattr(x, '__len__')</code>.</p>
<hr/>
<p>If you <em>are</em> trying statically check if something is zero or empty, there is unfortunately no way of doing this with PEP 484 types. Basically, PEP 484 doesn't let you associate "logical checks" with types -- you can't create a constraint mandating that some function accepts only positive ints, for example.</p>
<p>This is possible in more sophisticated type systems (see dependent type systems, refinement type systems, etc...) but implementing such type systems is very complex so it's extremely unlikely that PEP 484 will be modified to support features like this in the near future.</p>
<p>That said, there <em>are</em> some plans for at least mypy to add support for simple dependent types for <em>literals</em>. For example, while we might not be able to easily tell whether some arbitrary variable is zero or not, we <em>can</em> tell that the literal <code>0</code> is a zero. (This feature is particularly useful when trying to type the <code>open(...)</code> function, for example -- it returns a different type depending on the value of the second argument).</p>
<p>There's some <a href="https://github.com/python/mypy/issues/3062" rel="nofollow noreferrer">related discussion here</a> -- that said, I wouldn't hold your breath waiting for this to be implemented. It's a relatively complex feature.</p>
<p>For now, the only real alternatives are to fall back to using runtime checks or to just restructure your code so you don't need to check if something is zero or empty.</p>
<hr/>
<p>However, if you want to check if some type is "boolable" by checking for the presence of the <code>__bool__</code> or <code>__len__</code> methods, you can do so statically by <a href="https://www.python.org/dev/peps/pep-0544/" rel="nofollow noreferrer">using protocols</a>:</p>
<pre><code>from typing import Union
from typing_extensions import Protocol

class HasBool(Protocol):
    def __bool__(self) -&gt; bool: ...

class HasLen(Protocol):
    def __len__(self) -&gt; int: ...

Boolable = Union[HasBool, HasLen]

def accepts_boolable(x: Boolable) -&gt; None: pass

accepts_boolable(3)
accepts_boolable("asdf")

class NotBoolable: pass

accepts_boolable(NotBoolable())  # Mypy reports an error
</code></pre>
<p>You'll need to install the <code>typing_extensions</code> package using pip first. Protocols aren't yet a part of the standard library, but are expected to be standardized in the near future. I'm also not sure if other type checkers beyond mypy support protocols yet.</p>
<p><a href="https://mypy.readthedocs.io/en/latest/protocols.html" rel="nofollow noreferrer">More documentation about protocols</a>.</p>
</div>
<span class="comment-copy">Can <code>bool()</code> or <code>if ...</code> logic raise an exception for actual likely use cases? The assertion might not be necessary?</span>
<span class="comment-copy">What does "truly boolable" mean? True/False is quite literally 1 and 0. And what will <code>boolable(x)</code> do that <code>if x</code> wouldn't?</span>
<span class="comment-copy">Truthy and Falsy comes to mind.<a href="https://stackoverflow.com/questions/39983695/what-is-truthy-and-falsy-in-python-how-is-it-different-from-true-and-false" title="what is truthy and falsy in python how is it different from true and false">stackoverflow.com/questions/39983695/â€¦</a></span>
<span class="comment-copy">@DeepSpace if a variable doesn't  have  <code>__bool__</code> or <code>__len__</code> dunder methods it wiil allways be <code>True</code>, and this is not a desired outcome.</span>
