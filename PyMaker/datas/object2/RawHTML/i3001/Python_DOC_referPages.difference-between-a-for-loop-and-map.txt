<div class="post-text" itemprop="text">
<p>From the title, yes there is a difference. Now applied to my scenario: let's consider a class <code>Dummy</code>:</p>
<pre><code>class Dummy:
    def __init__(self):
        self.attached = []

    def attach_item(self, item):
        self.attached.append(item)
</code></pre>
<p>If I use this:</p>
<pre><code>D = Dummy()
items = [1, 2, 3, 4]
for item in items:
    D.attach_item(item)
</code></pre>
<p>I indeed get <code>D.attached = [1, 2, 3, 4]</code>. But if I map the function <code>attach_item</code> to the <code>items</code>, <code>D.attached</code> remains empty.</p>
<pre><code>map(D.attach_item, items)
</code></pre>
<p>What is it doing?</p>
</div>
<div class="post-text" itemprop="text">
<p>A very interesting question which has an interesting answer.</p>
<p>The <code>map</code> function returns a Map object which is iterable. <code>map</code> is performing its calculation lazily so the function wouldn't get called unless you iterate that object.</p>
<p>So if you do:</p>
<pre><code>x = map(D.attach_item, items)
for i in x:
    continue
</code></pre>
<p>The expected result will show up.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>map</code> only creates an iterator. You should iterate through it to add items into <code>D.attached</code>. Like this:</p>
<pre><code>D = Dummy()
items = [1, 2, 3, 4]
list(map(D.attach_item, items))
</code></pre>
<p>Yep, don't do it in your code:) But the example is just useful for understanding.</p>
</div>
<div class="post-text" itemprop="text">
<p>Quoting the <a href="https://docs.python.org/3/library/functions.html#map" rel="noreferrer">documentation</a></p>
<blockquote>
<p>Return an iterator that applies function to every item of iterable, yielding the results.</p>
</blockquote>
<p>which means you have to collect the iterator, e.g.</p>
<pre><code>list(map(D.attach_item, items))

&gt; [None, None, None, None]
</code></pre>
<p>Hmmm, strange. Why None, None, ...</p>
<p>Yes, you can convert any loop in a map statement, but it's not always useful.
Map takes a parameter and does something with it (in most cases) an returns it, without side effects! Here's an example:</p>
<pre><code>def add(a):
    return a + 3
list(map(add, items))

&gt; [4, 5, 6, 7]
</code></pre>
<p>The true power comes, when you combine it with other functions like <a href="https://docs.python.org/3/library/functions.html#filter" rel="noreferrer"><code>filter</code></a></p>
<pre><code>def add(a):
    return a + 3
def odd(a):
    return a % 2 == 1
list(map(add, filter(odd, items)))

&gt; [4, 6]
</code></pre>
</div>
<span class="comment-copy">See <a href="//stackoverflow.com/q/1975250">When should I use a Map instead of a For Loop?</a>.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/7731213/print-doesnt-print-when-its-in-map-python">Print doesn't print when it's in map, Python</a></span>
<span class="comment-copy">Another duplicates <a href="https://stackoverflow.com/questions/10973766/understanding-the-map-function" title="understanding the map function">stackoverflow.com/questions/10973766/…</a> and <a href="https://stackoverflow.com/questions/16750493/python-map-function-iteration" title="python map function iteration">stackoverflow.com/questions/16750493/…</a> and <a href="https://stackoverflow.com/questions/47998941/is-the-python-map-function-a-value-returning-function" title="is the python map function a value returning function">stackoverflow.com/questions/47998941/…</a> and related <a href="https://stackoverflow.com/questions/245792/when-is-not-a-good-time-to-use-python-generators" title="when is not a good time to use python generators">stackoverflow.com/questions/245792/…</a></span>
<span class="comment-copy">same if you list(x)</span>
<span class="comment-copy">@joaquin That's where I got tricked. In my mind, when doing <code>list(x)</code>, you want to convert <code>x</code> into a list.</span>
<span class="comment-copy">@Mathieu You do. The result will be a list full of None. But as a side effect the function will have modified the internal state of the Dummy object, which is what you want. In general, lazy evaluation is not very intuitive when you are more interested in the side effect than in the actual result</span>
<span class="comment-copy">@Ant And for that reason I'd argue using <code>map</code> for side effects is bad programming style. It's a confusing way to do it, and the OP's question shows this confusion.</span>
<span class="comment-copy">Should have just read the doc x') I thought I knew what map was doing, turn out I was wrong... Thanks!</span>
<span class="comment-copy">When I was using map previously it was always in scenarios where I needed to catch the return from the function (i.e. your example). Thus I was applying <code>list()</code>. I didn' t pay attention to the fact that map just returning an iterator :/</span>
