<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/8568233/print-float-to-n-decimal-places-including-trailing-0s">print float to n decimal places including trailing 0's</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>The following code prints decimals of various precisions, but reverts to scientific notation past 7 places. I need to display a string width of at least 8 places in my UI.  </p>
<p>How do I get a stringified decimal with 8 places of precision? </p>
<pre><code>from decimal import *
getcontext().prec = 8 # set precision to 8 decimal points. 
getcontext().rounding = "ROUND_DOWN" # alway round down 

# stringified zero of various precisions

zw = ['0', '0.0', '0.00', '0.000000', '.00000000', '0.00000000', '0.000000000000']

for n in range(0,len(zw)): 
    zstr = zw[n]                # stringified zero 
    zdec = Decimal(zstr)        # decimalized zero
    print (zstr, ":", zdec) # compare stringified and decimalized zero
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try:</p>
<pre><code>from decimal import *
getcontext().prec = 8 # set precision to 8 decimal points. 
getcontext().rounding = "ROUND_DOWN" # alway round down 

# stringified zero of various precisions

zw = ['0', '0.0', '0.00', '0.000000', '.00000000', '0.00000000', '0.000000000000']

for zstr in zw: 
    zdec = Decimal(zstr)        # decimalized zero
    print ('{} : {:.8f}'.format(zstr, zdec)) # compare stringified and decimalized zero
</code></pre>
<p>Prints:</p>
<pre><code>0 : 0.00000000
0.0 : 0.00000000
0.00 : 0.00000000
0.000000 : 0.00000000
.00000000 : 0.00000000
0.00000000 : 0.00000000
0.000000000000 : 0.00000000
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>format</code>/<code>f</code> and string formatting (<a href="https://docs.python.org/3.7/library/string.html#format-examples" rel="nofollow noreferrer">docs</a>):</p>
<pre><code>for zstr in zw:   
    zdec = Decimal(zstr)
    print (zstr, ":", f'{zdec:.8f}') 

0 : 0.00000000
0.0 : 0.00000000
0.00 : 0.00000000
0.000000 : 0.00000000
.00000000 : 0.00000000
0.00000000 : 0.00000000
0.000000000000 : 0.00000000
</code></pre>
</div>
<span class="comment-copy">Thanks! Is there a chart somewhere of the primitives and their respetive methods? I'm coming from perl and I'm having a hard time sanity checking data due to the difference in method availability.  In perl I used to test for len() of things all the time, but Python, None and False don't have a len() method. (in perl, either would be 0)</span>
<span class="comment-copy">The spec for the <a href="https://docs.python.org/3/library/string.html#formatspec" rel="nofollow noreferrer">.format mini language</a> which is a <code>.str</code> method. The Python docs on the main <a href="https://docs.python.org/3/library/stdtypes.html#built-in-types" rel="nofollow noreferrer">built-in types</a> has a list of their methods.</span>
<span class="comment-copy">One big thing to get over quickly in Python vs Perl (this will bite you) is the difference between what <a href="https://docs.python.org/2.4/lib/truth.html" rel="nofollow noreferrer">Python thinks is Truthy</a> and <a href="http://www.sthomas.net/roberts-perl-tutorial.htm/ch5/The_Truth_According_to_Perl" rel="nofollow noreferrer">Perl thinks is Thruthy</a>. It is easier in Python but the Perl idioms are hard to forget. :-)</span>
<span class="comment-copy">I'm still not really seeing a clean way of dealing with user input that may be a stringified zero. If I check len() thats fine, but then to do math I have to change the type. And if my function also returns zero, then I have to change it back to a string, and check len() again to determine whether the data is worth rendering back to the user. That is about 4 lines of code to do what len() or exists() does in perl.</span>
<span class="comment-copy">The Perly / Awky way of treating a string as a number waiting for arithmetic on it does not work in Python. The best way is to use <code>try / except</code> with a conversion to <code>int(user_input)</code> or a regex or Python string function to validate you have nothing but digits then use <code>int()</code> or <code>float()</code> on that string. To paraphrase the Camel Book: <i>You will be miserable until you learn the difference between different object types in Python.</i></span>
<span class="comment-copy">Why <code>float(zstr)</code> instead of <code>zdec</code>?</span>
<span class="comment-copy"><code>for zstr in zw:</code> is better and <code>format(Decimal(zstr))</code> would work as well.</span>
<span class="comment-copy">@Ilja Everilä <code>zdec</code> works too, just doesn't seem necessary here.</span>
<span class="comment-copy">Thanks for the suggestions (@AChampion, @Ilja Everilä) - updated!</span>
