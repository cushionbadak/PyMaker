<div class="post-text" itemprop="text">
<p>I've created a list which has 5 items, I've then created a <code>newlist</code> which is a path to a webpage using text and the item value from the list</p>
<p>I want to be able to loop through the items in <code>newlist</code> and create however many lists need creating based on the number of items in <code>newlist</code></p>
<p>So ultimately 10 new lists in this example would be created:</p>
<pre><code>buyers1
buyers2
buyers3
buyers4
buyers5
prices1
prices2
prices3
prices4
prices5
</code></pre>
<p>This works to loop through each webpage and print values but I can't refer to the lists outside (which are being overwritten each time anyway)</p>
<pre><code>from lxml import html
import requests

list = ['1','2','3','4','5']
newlist = []
for l in list:
    newlist.append('http://econpy.pythonanywhere.com/ex/00'+str(l)+'.html')

for n in newlist:
    page = requests.get(n)
    tree = html.fromstring(page.content)
    buyers = tree.xpath('//div[@title="buyer-name"]/text()')
    prices = tree.xpath('//span[@class="item-price"]/text()')   
    for b in buyers :print(b)
    for p in prices :print(p)
</code></pre>
<p>but I can't then refer to these new list outside the for loop by adding this after (even though they are being overwritten each time anyway)</p>
<pre><code>for b in buyers :print(b)
for p in prices :print(p)
</code></pre>
<p>so this is my attempt to create new lists but to no avail:</p>
<pre><code>list = ['1','2','3','4','5']
value = 1
newlist = []
for l in list:
    newlist.append('http://econpy.pythonanywhere.com/ex/00'+str(l)+'.html')

for n in newlist:
    page = requests.get(n)
    tree = html.fromstring(page.content)
    'buyers' + str(value) = tree.xpath('//div[@title="buyer-name"]/text()')
    'prices' + str(value) = tree.xpath('//span[@class="item-price"]/text()')   
    value = value + 1
</code></pre>
<p>So ultimately I can reference the list later</p>
<pre><code>for b in buyers1:
    print(b)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I'm not wrong, you want to create new lists from buyers and prices? This might work -</p>
<pre><code>newlist = ['http://econpy.pythonanywhere.com/ex/00'+str(i)+'.html' for i in range(1, 6)]
buyers, prices = [], []
for n in newlist:
    page = requests.get(n)
    tree = html.fromstring(page.content)
    buyers.append(tree.xpath('//div[@title="buyer-name"]/text()')
    prices.append(tree.xpath('//span[@class="item-price"]/text()')   
</code></pre>
<p>Now you can access <code>buyers</code> and <code>prices</code> outside the for loop. Let me know if I wrongly understood your question</p>
</div>
<div class="post-text" itemprop="text">
<p>Supposing I understood what the problem is, I Would suggest having a list of lists or a dictionary with values of type list, because not knowing the number of lists to expect, iterable objects are what you're looking for</p>
<p>Solution using a list :</p>
<pre><code>from lxml import html
import requests

list = ['1','2','3','4','5']
newlist = []
listOfBuyers = []
listOfPrices = []
for l in list:
    newlist.append('http://econpy.pythonanywhere.com/ex/00'+str(l)+'.html')

for n in newlist:
    page = requests.get(n)
    tree = html.fromstring(page.content)
    buyers = tree.xpath('//div[@title="buyer-name"]/text()')
    prices = tree.xpath('//span[@class="item-price"]/text()')   
    for b in buyers :print(b)
    for p in prices :print(p)
    listOfBuyers.append(buyers)
    listOfPrices.append(prices)
</code></pre>
<p>Solution using dictionaries :</p>
<pre><code>from lxml import html
import requests

list = ['1','2','3','4','5']
newlist = []
dictOfBuyers = {}
dictOfPrices = {}
for l in list:
    newlist.append('http://econpy.pythonanywhere.com/ex/00'+str(l)+'.html')
i = 1
for n in newlist:
    page = requests.get(n)
    tree = html.fromstring(page.content)
    buyers = tree.xpath('//div[@title="buyer-name"]/text()')
    prices = tree.xpath('//span[@class="item-price"]/text()')   
    for b in buyers :print(b)
    for p in prices :print(p)
    keyBuyers = "buyer" + str(i)
    keyPrices = "price" + str(i)
    dictOfBuyers[keyBuyers] = buyers
    dictOfPrices[keyPrices] = prices
    i += 1
</code></pre>
<p>For reading data from the dictionary, it is important to know that values in dictionaries are <strong>not</strong> indexed so we are going to need to read each value from its key like so :</p>
<pre><code>for key, val in dictOfBuyers.items() :
    listBuyers = val
    listPrices = dictOfPrices["price" + key[-1]]

    print(listBuyers,"is corresponds to the prices",listPrices)
</code></pre>
</div>
<span class="comment-copy">Have you read through the python docs on different data structures? <a href="https://docs.python.org/3/library/stdtypes.html" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html</a>  You would be better off using a more complex but flexible data structure, for example a list of dictionaries where each dictionary contains the buyer and price information.</span>
<span class="comment-copy">Thanks thatbird, but I'm looking to create new lists for each iteration of buyer. So I need a list for each (buyer1, buyer2 etc)</span>
<span class="comment-copy">In that case, a dict would be a good idea, but you can create lists for these too, but that will become list of list, is that okay? @Monkeydave</span>
<span class="comment-copy">Marc is providing a dict solution so I'll try go with that, thanks</span>
<span class="comment-copy">This dictionary solution looks to be on the lines of where I want to be, how do I refer to them going forward to call the contents of each list? Are dictionary values indexed so I can compare the nth value of buyers with the nth value in prices to ensure the right match?</span>
<span class="comment-copy">I'll edit the post</span>
<span class="comment-copy">Thanks Marc, that's great</span>
<span class="comment-copy">You're most welcome. Could you please accept my solution?</span>
