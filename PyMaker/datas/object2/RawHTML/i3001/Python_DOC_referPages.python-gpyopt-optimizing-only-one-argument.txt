<div class="post-text" itemprop="text">
<p>IÂ´m currently trying to find the minimum of some function <code>f(arg1, arg2, arg3, ...)</code> via Gaussian optimization using the <a href="https://github.com/SheffieldML/GPyOpt" rel="nofollow noreferrer">GPyOpt</a> module. While <code>f(...)</code> takes many input arguments, I only want to optimize a single one of them. How do you do that?</p>
<p>My current "solution" is to put <code>f(...)</code> in a dummy class and specify the not-to-be-optimized arguments while initializing it. While this is arguably the most pythonesque way of solving this problem, it`s also way more complicated than it has any right to be.</p>
<p>Short working example for a function <code>f(x, y, method)</code> with fixed <code>y</code> (a numeric) and <code>method</code> (a string) while optimizing <code>x</code>:</p>
<pre><code>import GPyOpt
import numpy as np

# dummy class
class TarFun(object):
    # fix y while initializing the object
    def __init__(self, y, method):
        self.y = y
        self.method = method
    # actual function to be minimized
    def f(self, x):
        if self.method == 'sin':
            return np.sin(x-self.y)
        elif self.method == 'cos':
            return np.cos(x-self.y)

# create TarFun object with y fixed to 2 and use 'sin' method
tarFunObj = TarFun(y=2, method='sin')
# describe properties of x
space = [{'name':'x', 'type': 'continuous', 'domain': (-5,5)}]
# create GPyOpt object that will only optimize x
optObj = GPyOpt.methods.BayesianOptimization(tarFunObj.f, space)
</code></pre>
<p>There definitely has to be a simpler way. But all the examples I found optimize all arguments and I couldn't figure it out reading the code on github (I though i would find the information in <a href="https://github.com/SheffieldML/GPyOpt/blob/master/GPyOpt/core/task/space.py" rel="nofollow noreferrer">GPyOpt.core.task.space</a> , but had no luck).</p>
</div>
<div class="post-text" itemprop="text">
<p>GPyOpt supports this natively with context. You describe the whole domain of your function, and then fix values of some of the variables with a context dictionary when calling optimization routine. API looks like that:</p>
<pre><code>myBopt.run_optimization(..., context={'var1': .3, 'var2': 0.4})
</code></pre>
<p>More details can be found in this <a href="http://nbviewer.jupyter.org/github/SheffieldML/GPyOpt/blob/master/manual/GPyOpt_context.ipynb" rel="nofollow noreferrer">tutorial notebook</a> about contextual optimization.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would check out the <code>partial</code> function from the <a href="https://docs.python.org/3/library/functools.html" rel="nofollow noreferrer">functools</a> standard library.  It allows you to partially specify a function, so for example:</p>
<pre><code>import GPyOpt
import numpy as np
from functools import partial


def f(x, y=0):
    return np.sin(x - y)


objective = partial(f, y=2)
space = [{'name': 'x', 'type': 'continuous', 'domain': (-5, 5)}]

opt = GPyOpt.methods.BayesianOptimization(
    objective, domain=space
)
</code></pre>
</div>
<span class="comment-copy">Definitely a cleaner workaround than what i was doing, but i still think there has to be a way to directly specify this in the <code>GPyOpt</code> object (fixing arguments seems way too important to require an external module)</span>
<span class="comment-copy">You could also simply add a variable of type <code>discrete</code> to your space, like so: <code>{'name': 'y', 'type': 'discrete', 'domain': (2,)}</code></span>
<span class="comment-copy">That would work in this specific example, but e.g. if a function takes a string as argument this won't work. Of course you could then encode the string as integer, but that's again very messy.</span>
