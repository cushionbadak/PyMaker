<div class="post-text" itemprop="text">
<p>This may seem a naive question but I did not find any answer so far in the web and I do not want to cause any inconsistent behavior in my code. </p>
<p>Can I name a variable <code>now</code> in my python code? there is a function named <code>now()</code> that's why I have doubts.</p>
<p>Example:</p>
<pre><code>now = datetime.datetime.now()
</code></pre>
<p>Can this be treated as any ordinary variable that stores the returned value by <code>datetime.datetime.now()</code> ? or can it behave differently at any point?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>now</code> is not a keyword in python, so you can use it as a variable name.</p>
<hr/>
<p>Is there any chance of interfering with <code>datetime.datetime.now()</code>? No.</p>
<p>To elaborate: there is no function named now() either; it is tied to the <code>datetime</code> object (it's a class method), and you'll always need <code>datetime.now()</code> to use it. So it's always distinguished from your variable named <code>now</code>.</p>
<p><em>Only</em> if you assign it as follows:</p>
<pre><code>now = datetime.datetime.now
</code></pre>
<p>Here, the new variable named <code>now</code> equals the <code>datetime.now()</code> <em>function</em> (not the result of the function). But in this case, you're completely responsible yourself for this assignment. Even then, changing <code>now</code> to something else will not change <code>datetime.now</code>.</p>
<p>Using, however</p>
<pre><code>now = datetime.datetime.now()
</code></pre>
<p>assigns the <em>results</em> of the function call to the variable <code>now</code> (not the function itself), and the function remains as is.</p>
<hr/>
<p>What is worth paying attention to, is whether you should overwrite built-in functions. <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">This is the list of built-in functions in Python 3.7</a>.</p>
<p>You can assign a value to each of these names, but then you effectively lose that function<sup>*</sup>, and you may get in trouble later on. For example:</p>
<pre><code>str = "Hello there"
a = 123
&lt;more code&gt;
value = str(a)  # causes a TypeError, because we re-assigned str
</code></pre>
<p>So try to avoid that (<code>list = [1,2,3]</code> is another common mistake that should be avoided).</p>
<p>But <code>now()</code> is not a built-in function, as explained above.</p>
<p><sup>*</sup> there are ways to retrieve the original built-in function, even after reassignment, but that's outside the scope of this topic.</p>
</div>
<div class="post-text" itemprop="text">
<p>Below are the keywords that are used in python, Apart from that you can use any keyword you want</p>
<pre><code>False      await      else       import     pass
None       break      except     in         raise
True       class      finally    is         return
and        continue   for        lambda     try
as         def        from       nonlocal   while
assert     del        global     not        with
async      elif       if         or         yield
</code></pre>
<p>I hope that answer your question</p>
</div>
<div class="post-text" itemprop="text">
<p><code>import this</code> says</p>
<blockquote>
<p>Namespaces are one honking great idea -- let's do more of those!</p>
</blockquote>
<p>You can use <code>now</code> as a variable even though there is a function called <code>datetime.datetime.now()</code> because that lives in a different namespace. Every module (like module <code>datetime</code>) is a namespace, and every class or type inside that module (like <code>datetime.datetime</code>) is a separate namespace. Even inside a function you can create a local variable that has the same name as one defined in the surrounding code:</p>
<pre><code>a = 1

def f(x):
    a = x + 2
    print (a)

f(4)                  # prints 6
print (a)             # prints 1
</code></pre>
<p>though doing that may confuse readers of your code, including yourself.</p>
</div>
<div class="post-text" itemprop="text">
<p>It will work as Varibale</p>
<pre><code>from datetime import datetime
now = datetime.now()
now
</code></pre>
<p>output:</p>
<pre><code>datetime.datetime(2018, 8, 3, 16, 36, 54, 182551)
</code></pre>
<p>type of "Now" variable is </p>
<pre><code>type(now)
</code></pre>
<p>datatype of Variable is</p>
<pre><code>datetime.datetime
</code></pre>
<p>from this we can say now will work as Simple Variable</p>
</div>
<span class="comment-copy">now is not a keyword in python. So you can use it without any problem.</span>
<span class="comment-copy">To elaborate: there is no function named now() either; it is tied to the <code>datetime</code> object (it's a class method), and you'll always need <code>datetime.now()</code> to use it. So it's always distinguished from your variable named <code>now</code>.</span>
<span class="comment-copy">I don't think this is the issue that's worrying the OP, because assignment to a keyword would result in a SyntaxError, making it ovious this can't be done. The OP is worried about overwriting existing functions (such as <code>list</code> or <code>map</code>), which is indeed possible, but not a good thing.</span>
<span class="comment-copy">@9769953 as per my understanding he is more concerned if he can use now keyword to which I have given him the list of all reserved keywords that can not be used and apart from that he can use any keyword he want.</span>
<span class="comment-copy">The sentence " there is a function named now() that's why I have doubts." suggests otherwise: it talks about a function, not a keyword.</span>
<span class="comment-copy">Note that your list is valid for Python 2, not for Python 3, since <code>False</code>, <code>None</code> and <code>True</code> are missing while <code>print</code> is there (and <code>async</code> and <code>await</code> for later Python 3 versions). It may be good to note the Python version you are referring to, and linking to the official documentation.</span>
<span class="comment-copy">@9769953 The sentence "Can I name a variable now in my python code?" makes me wonder if user is more concerned of the reserved keywords.</span>
