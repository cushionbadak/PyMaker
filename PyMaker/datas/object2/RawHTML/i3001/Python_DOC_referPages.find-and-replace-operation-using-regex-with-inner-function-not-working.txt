<div class="post-text" itemprop="text">
<p>I'm new on Stack Overflow and I am hoping someone can please help me with the following code.</p>
<p>I am trying to adapt a piece of code from the Ascher, Ravenscroft, and Martelli Python Cookbook. I would like to replace all words in <code>Text</code> containing a 'long-s' with the equivalent word spelled with a modern lowercase s using dictionary key:value pairs (all text is utf-8). I am able to build the dictionaries from existing tab-separated files without a problem (I am using a simple sample dictionary in the code for ease of editing), however I would like to complete all the changes in a single pass for speed and efficiency.  I have removed the <code>map</code> and <code>escape</code> parts of the code as I don't think the 'long-s' needs escaping (I could be wrong though!). The first section works fine, however the inner function <code>one_xlat</code> seems not to do anything.  It does not return/print <code>Text</code> at the end, and there is no error message. I have run the code in the command line and IDLE with the same result.  I have run the code with and without using <code>map</code> and <code>escape</code>, and I have renamed the variables just to be sure, but I cannot quite make it work. Would someone please be able to help?  Sorry if I'm missing something obvious and thank you very much in advance.</p>
<p>Original Code from Ascher, Ravenscroft, and Martelli:</p>
<pre><code>import re
def multiple_replace(text, adict):
    rx = re.compile('|'.join(map(re.escape, adict)))
    def one_xlat(match):
        return adict[match.group(0)]
    return rx.sub(one_xlat, text)
</code></pre>
<p>The adapted version:</p>
<pre><code>import re

adictCR = {"handſome":"handsome","ſeated":"seated","veſſels":"vessels","ſea-side":"sea-side","ſand":"sand","waſhed":"washed", "oſ":"of", "proſpect":"prospect"}
text = "The caſtle, which is very extenſive, contains a ſtrong building, formerly uſed by the late emperor as his principal treaſury, and a noble terrace, which commands an extensive proſpect oſ the town of Sallee, the ocean, and all the neighbouring country."

def word_replace(text, adictCR):
    regex_dict = re.compile('|'.join(adictCR))
    print(regex_dict)
    def one_xlat(match):
        return adictCR[match.group(0)]
    return regex_dict.sub(one_xlat, text)
    print(text)

word_replace(text, adictCR)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would rewrite your code this way:</p>
<pre><code># -*- coding: utf-8 -*-
import re

adictCR = {"handſome":"handsome","ſeated":"seated","veſſels":"vessels","ſea-side":"sea-side","ſand":"sand","waſhed":"washed", "oſ":"of", "proſpect":"prospect"}
text = "The caſtle, which is very extenſive, contains a ſtrong building, formerly uſed by the late emperor as his principal treaſury, and a noble terrace, which commands an extensive proſpect oſ the town of Sallee, the ocean, and all the neighbouring country."

new_s=[]        
for g in (m.group(0) for m in re.finditer(r'\w+|\W+', text)):
    if g in adictCR:
        g=adictCR[g]
    new_s.append(g)
</code></pre>
<p>Then you can get your new string with <code>''.join(new_s)</code>.</p>
<p>Note: the pattern <code>'\w+|\W+'</code> only works in recent versions (3.1+) of Python with non-ascii text. You can also do <code>split(r'(\W)', str)</code> as an alternate, but I don't think that will work on Python 2 with utf-8. </p>
</div>
<span class="comment-copy">Looks to me like you have changed the variable name from rx to regex_dict but then still used rx further on.</span>
<span class="comment-copy">It is likely easier also to just use the dict itself for the replacement. There is not advantage to a regex here.</span>
<span class="comment-copy">MandyShaw - thanks very much for pointing out the error. I have corrected this, but the problem remains.</span>
<span class="comment-copy">And dawg - thanks for the reply.  I wish to use a regex as I understand it will enable the replacement operation to happen in one pass, rather than using <code>replace</code> which would result in multiple copies of the text being created.  Do I have this correct?  Apologies if I do not!  Ultimately, the code will be used to process thousands of pages with very large dictionaries, so I am trying to keep efficiency a priority.  Hope that makes sense!  Thanks again.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/stdtypes.html#str.replace" rel="nofollow noreferrer">str.replace</a> takes an optional count for replacements. That would be monumentally faster if this is your goal. Do something like 1) Loop the text word for word; 2) check word in dict; 3) replace word if found in dict; 4) profit!</span>
<span class="comment-copy">Dawg - thanks very much for the help.  I'm using Python 3.7 so your suggestion works well.  I appreciate you taking the time to help.</span>
