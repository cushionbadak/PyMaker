<div class="post-text" itemprop="text">
<p>I have two lists named <code>extra</code> and <code>be</code> in my code.</p>
<p><code>extra</code> output is <code>[7,27]</code> and</p>
<p><code>be</code> output is </p>
<pre class="lang-python prettyprint-override"><code>'Feed Forage', '', '', '', 'Social Play', '', 'Feed Forage', 'Nonsocial Play', '', 'Nonsocial Play', '', '', '', '', 'Nonsocial Play', '', '', '', '', '', '', '', '', 'Social Play', '', '', '', '', '', '', '', '', 'Nonsocial Play', 'Groom', 'Feed Forage', '', '', 'Nonsocial Play', '', '', 'Feed Forage', '', 'Feed Forage', '', 'Feed Forage', '', 'Social Play', '', 'Social Play', '', '', 'Social Play', '', '', '', '', '', 'Feed Forage', '', '', '', '', 'Feed Forage', '', '', '', '', 'Feed Forage', '', '', 'Feed Forage', '', '', '', '', '', 'Feed Forage', '', '', '', 'Groom', 'Groom', '', '', '', '', 'Groom', 'Groom', 'Groom', '', 'Groom', '', '', '', 'Feed Forage', '', '', 'Feed Forage', 'Nonsocial Play', '', '', '', 'Pace', '', '', '', 'Feed Forage', '', 'Nonsocial Play', '', 'Feed Forage', '', 'Social Play', '', 'Feed Forage', '', 'Social Play', '', 'Social Play', '', '', '', '', '', 'Nonsocial Play', '', 'Social Play', '', '', '', '', 'Feed Forage', '', '', '', '', '', '', '', 'Nonsocial Play', '', 'Nonsocial Play', '', 'Feed Forage', 'Social Play', '', '', '', 'Feed Forage', '', 'Nonsocial Play', '', '', 'Feed Forage', '', '', '', '', 'Self Groom', '', '', 'Groom', '', '', 'Self Groom', '', '', '', '', '', 'Groom', '', '', 'Self Groom', '', '', 'Feed Forage', '', '', '', '', '', 'Pace', '', 'Self Groom', '', '', '', 'Self Groom', '', 'Self Groom', '', 'Social Play', '', 'Social Play', '', 'Self Groom', 'Groom', '', '', 'Groom', '', 'Groom', '', 'Groom', 'Groom', 'Groom', '', '', 'Self Groom', '', 'Groom', '', 'Groom', '', 'Feed Forage', '', 'Feed Forage', '', 'Feed Forage', '', '', '', '', '', '', '', 'Feed Forage', '', '', '', '', 'Feed Forage', 'Nonsocial Play', '', '', 'Self Groom', 'Nonsocial Play', '', '', '', 'Groom', '', '', 'Groom', '', 'Groom', '', '', 'Groom', '', '', 'Groom', '', '', 'Groom', '', '', '', '', '', '', 'Groom', 'Groom', '', 'Groom', '', '', 'Groom', '', '', '', 'Self Groom', '', '', '', '', '', '', 'Groom', '', 'Groom', '', 'Feed Forage', '']
</code></pre>
<p>I need to find the 7th and 27th word elements of <code>extra</code> (i.e. elements don't count if they are an empty string). It should be <code>Nonsocial Play</code> and <code>Groom</code> but the for-loop I have only prints <code>Nonsocial Play</code></p>
<p>These are the for-loops I am using:</p>
<pre><code>for x in extra:
count = 0
for y in be:
    if y != '':
        if x == count:
            print(be[x])
            count += 1
        elif x != count:
            count += 1
</code></pre>
<p>If you have any idea why it isn't working, please let me know!
EDIT: I want to print these statements but I also need to delete them</p>
</div>
<div class="post-text" itemprop="text">
<p>You can also just do </p>
<pre><code>extra = [7,27]
be = ['Feed Forage', '', '', '', 'Social Play', '', 'Feed Forage', 'Nonsocial Play', '', 'Nonsocial Play', '', '', '', '', 'Nonsocial Play', '', '', '', '', '', '', '', '', 'Social Play', '', '', '', '', '', '', '', '', 'Nonsocial Play', 'Groom', 'Feed Forage', '', '', 'Nonsocial Play', '', '', 'Feed Forage', '', 'Feed Forage', '', 'Feed Forage', '', 'Social Play', '', 'Social Play', '', '', 'Social Play', '', '', '', '', '', 'Feed Forage', '', '', '', '', 'Feed Forage', '', '', '', '', 'Feed Forage', '', '', 'Feed Forage', '', '', '', '', '', 'Feed Forage', '', '', '', 'Groom', 'Groom', '', '', '', '', 'Groom', 'Groom', 'Groom', '', 'Groom', '', '', '', 'Feed Forage', '', '', 'Feed Forage', 'Nonsocial Play', '', '', '', 'Pace', '', '', '', 'Feed Forage', '', 'Nonsocial Play', '', 'Feed Forage', '', 'Social Play', '', 'Feed Forage', '', 'Social Play', '', 'Social Play', '', '', '', '', '', 'Nonsocial Play', '', 'Social Play', '', '', '', '', 'Feed Forage', '', '', '', '', '', '', '', 'Nonsocial Play', '', 'Nonsocial Play', '', 'Feed Forage', 'Social Play', '', '', '', 'Feed Forage', '', 'Nonsocial Play', '', '', 'Feed Forage', '', '', '', '', 'Self Groom', '', '', 'Groom', '', '', 'Self Groom', '', '', '', '', '', 'Groom', '', '', 'Self Groom', '', '', 'Feed Forage', '', '', '', '', '', 'Pace', '', 'Self Groom', '', '', '', 'Self Groom', '', 'Self Groom', '', 'Social Play', '', 'Social Play', '', 'Self Groom', 'Groom', '', '', 'Groom', '', 'Groom', '', 'Groom', 'Groom', 'Groom', '', '', 'Self Groom', '', 'Groom', '', 'Groom', '', 'Feed Forage', '', 'Feed Forage', '', 'Feed Forage', '', '', '', '', '', '', '', 'Feed Forage', '', '', '', '', 'Feed Forage', 'Nonsocial Play', '', '', 'Self Groom', 'Nonsocial Play', '', '', '', 'Groom', '', '', 'Groom', '', 'Groom', '', '', 'Groom', '', '', 'Groom', '', '', 'Groom', '', '', '', '', '', '', 'Groom', 'Groom', '', 'Groom', '', '', 'Groom', '', '', '', 'Self Groom', '', '', '', '', '', '', 'Groom', '', 'Groom', '', 'Feed Forage', '']

&gt;&gt;&gt; [x for i, x in enumerate(s for s in be if s) if i in extra]
['Nonsocial Play', 'Groom']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I created simple function <code>filter_iter(itr)</code> that filters the iterable in argument <code>itr</code> from any empty values. Then you can access the resulting filtered list with values from list <code>extra</code>:</p>
<pre><code>extra = [7,27]
be = ['Feed Forage', '', '', '', 'Social Play', '', 'Feed Forage', 'Nonsocial Play', '', 'Nonsocial Play', '', '', '', '', 'Nonsocial Play', '', '', '', '', '', '', '', '', 'Social Play', '', '', '', '', '', '', '', '', 'Nonsocial Play', 'Groom', 'Feed Forage', '', '', 'Nonsocial Play', '', '', 'Feed Forage', '', 'Feed Forage', '', 'Feed Forage', '', 'Social Play', '', 'Social Play', '', '', 'Social Play', '', '', '', '', '', 'Feed Forage', '', '', '', '', 'Feed Forage', '', '', '', '', 'Feed Forage', '', '', 'Feed Forage', '', '', '', '', '', 'Feed Forage', '', '', '', 'Groom', 'Groom', '', '', '', '', 'Groom', 'Groom', 'Groom', '', 'Groom', '', '', '', 'Feed Forage', '', '', 'Feed Forage', 'Nonsocial Play', '', '', '', 'Pace', '', '', '', 'Feed Forage', '', 'Nonsocial Play', '', 'Feed Forage', '', 'Social Play', '', 'Feed Forage', '', 'Social Play', '', 'Social Play', '', '', '', '', '', 'Nonsocial Play', '', 'Social Play', '', '', '', '', 'Feed Forage', '', '', '', '', '', '', '', 'Nonsocial Play', '', 'Nonsocial Play', '', 'Feed Forage', 'Social Play', '', '', '', 'Feed Forage', '', 'Nonsocial Play', '', '', 'Feed Forage', '', '', '', '', 'Self Groom', '', '', 'Groom', '', '', 'Self Groom', '', '', '', '', '', 'Groom', '', '', 'Self Groom', '', '', 'Feed Forage', '', '', '', '', '', 'Pace', '', 'Self Groom', '', '', '', 'Self Groom', '', 'Self Groom', '', 'Social Play', '', 'Social Play', '', 'Self Groom', 'Groom', '', '', 'Groom', '', 'Groom', '', 'Groom', 'Groom', 'Groom', '', '', 'Self Groom', '', 'Groom', '', 'Groom', '', 'Feed Forage', '', 'Feed Forage', '', 'Feed Forage', '', '', '', '', '', '', '', 'Feed Forage', '', '', '', '', 'Feed Forage', 'Nonsocial Play', '', '', 'Self Groom', 'Nonsocial Play', '', '', '', 'Groom', '', '', 'Groom', '', 'Groom', '', '', 'Groom', '', '', 'Groom', '', '', 'Groom', '', '', '', '', '', '', 'Groom', 'Groom', '', 'Groom', '', '', 'Groom', '', '', '', 'Self Groom', '', '', '', '', '', '', 'Groom', '', 'Groom', '', 'Feed Forage', '']

def filter_iter(itr):
    return [i for i in itr if i]

be = filter_iter(be)
print([be[e] for e in extra])
</code></pre>
<p>Prints:</p>
<pre><code>['Nonsocial Play', 'Groom']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Single line of code using <code>list comprehension</code> with <code>enumerate</code> and <code>filter</code></p>
<pre><code>[j for i, j in enumerate(list(filter(lambda x: x != '', be))) if i in extra]
['Nonsocial Play', 'Groom']
</code></pre>
<p>Testing for speed:</p>
<pre><code>%timeit [j for i, j in enumerate(list(filter(lambda x: x != '', be))) if i in extra]
45.2 µs ± 5.48 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Python 2</strong></p>
<pre><code>new_be=filter(lambda a: a != '', be) #we delete from the list all the '' and we save the new list in new_be
world=[]
for i in extra:
    world.append(new_be[int(i)])

print (world)
</code></pre>
<p><strong>Python 3</strong></p>
<pre><code>    new_be=list(filter(("").__ne__, be)) #we delete from the list all the '' and we save the new list in new_be
    world=[]
    for i in extra:
        world.append(new_be[int(i)])

    print (world)
</code></pre>
<blockquote>
<p>['Nonsocial Play', 'Groom']</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Here is a solution using using <code>filter</code> the elements, <code>enumerate</code> to iterate over the resulting iterator along with its index, and <code>itertools.islice</code> to get only certain range of indexes from it</p>
<pre><code>&gt;&gt;&gt; from itertools import islice
&gt;&gt;&gt; extra = [7,27]
&gt;&gt;&gt; be = ['Feed Forage', '', '', '', 'Social Play', '', 'Feed Forage', 'Nonsocial Play', '', 'Nonsocial Play', '', '', '', '', 'Nonsocial Play', '', '', '', '', '', '', '', '', 'Social Play', '', '', '', '', '', '', '', '', 'Nonsocial Play', 'Groom', 'Feed Forage', '', '', 'Nonsocial Play', '', '', 'Feed Forage', '', 'Feed Forage', '', 'Feed Forage', '', 'Social Play', '', 'Social Play', '', '', 'Social Play', '', '', '', '', '', 'Feed Forage', '', '', '', '', 'Feed Forage', '', '', '', '', 'Feed Forage', '', '', 'Feed Forage', '', '', '', '', '', 'Feed Forage', '', '', '', 'Groom', 'Groom', '', '', '', '', 'Groom', 'Groom', 'Groom', '', 'Groom', '', '', '', 'Feed Forage', '', '', 'Feed Forage', 'Nonsocial Play', '', '', '', 'Pace', '', '', '', 'Feed Forage', '', 'Nonsocial Play', '', 'Feed Forage', '', 'Social Play', '', 'Feed Forage', '', 'Social Play', '', 'Social Play', '', '', '', '', '', 'Nonsocial Play', '', 'Social Play', '', '', '', '', 'Feed Forage', '', '', '', '', '', '', '', 'Nonsocial Play', '', 'Nonsocial Play', '', 'Feed Forage', 'Social Play', '', '', '', 'Feed Forage', '', 'Nonsocial Play', '', '', 'Feed Forage', '', '', '', '', 'Self Groom', '', '', 'Groom', '', '', 'Self Groom', '', '', '', '', '', 'Groom', '', '', 'Self Groom', '', '', 'Feed Forage', '', '', '', '', '', 'Pace', '', 'Self Groom', '', '', '', 'Self Groom', '', 'Self Groom', '', 'Social Play', '', 'Social Play', '', 'Self Groom', 'Groom', '', '', 'Groom', '', 'Groom', '', 'Groom', 'Groom', 'Groom', '', '', 'Self Groom', '', 'Groom', '', 'Groom', '', 'Feed Forage', '', 'Feed Forage', '', 'Feed Forage', '', '', '', '', '', '', '', 'Feed Forage', '', '', '', '', 'Feed Forage', 'Nonsocial Play', '', '', 'Self Groom', 'Nonsocial Play', '', '', '', 'Groom', '', '', 'Groom', '', 'Groom', '', '', 'Groom', '', '', 'Groom', '', '', 'Groom', '', '', '', '', '', '', 'Groom', 'Groom', '', 'Groom', '', '', 'Groom', '', '', '', 'Self Groom', '', '', '', '', '', '', 'Groom', '', 'Groom', '', 'Feed Forage', '']
&gt;&gt;&gt; [x for i,x in enumerate(islice(filter(bool, be), min(extra), max(extra)+1), min(extra)) if i in extra]
['Nonsocial Play', 'Groom']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When the <code>count</code> reaches <code>x</code>, print the <em>current</em> item from <code>be</code></p>
<pre><code>for x in extra:
    count = 0
    for y in be:
        if y != '':
            if x == count:
                print(y)
                #print(be[x])
                count += 1
            elif x != count:
                count += 1
</code></pre>
<hr/>
<p>Deleting items from a sequence while iterating over it doesn't work.<br/>
Make <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow noreferrer">deques</a> of <code>extra</code> and <code>be</code> and use the rotate method to <em>visit</em> the items in <code>be</code>.  Design the logic so that <code>be</code> items are popped off when they meet the criteria and <code>extra</code> items are popped off when a <code>be</code> item is found.  Keep track of rotations so the order can be reconstructed.</p>
<pre><code>extra.sort()
extraa = collections.deque(extra)
bee = collections.deque(be)
#print(len(bee))
rotation_count = 0
word_count = 0
while extraa:
    while bee[0] == '':
        bee.rotate(-1)
        rotation_count += 1
    if word_count == extraa[0]:
        print(bee.popleft())
        extraa.popleft()
    else:
        bee.rotate(-1)
        rotation_count += 1
    word_count += 1
#print(len(bee))

bee.rotate(rotation_count)
be = list(bee)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This:</p>
<pre><code>[[w for w in be if w != ''][k] for k in extra]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It isn't working because the indentation isn't correct.It would also be a good idea to include a break once the element is found since you are starting a new count after finding the first element. You are also printing be[x] which wrong. It should be y instead as y is the string you want to print.</p>
<pre><code>for x in extra:
    count = 0
    for y in be:
        if y != '':
            if x == count:
                print(y)
                count += 1
                break
            elif x != count:
                count += 1
</code></pre>
</div>
<span class="comment-copy">Please fix the indentation of the first for statement.</span>
<span class="comment-copy">All the answers are suggesting rewrites, but you're just printing the wrong thing: (<code>be[x]</code> is wrong)</span>
<span class="comment-copy">Do you want to delete the items from the list or replace them with an empty string - <code>''</code>?  After processing does the list order have to be the same.</span>
<span class="comment-copy">@wwii I want to delete those items from the list. The order of the list should be the same besides that</span>
<span class="comment-copy">Seems inefficient to filter the list every single time you want to lookup a single index?</span>
<span class="comment-copy">@G_M Yes, you have right. I will update my answer with another version, where I will cache the filtered list.</span>
<span class="comment-copy">is there any way to also delete those items?</span>
<span class="comment-copy">@katiedidkatie this method involves creating a new list. Do you want to delete from the original list?</span>
<span class="comment-copy">Yes I do want to delete them from the original</span>
<span class="comment-copy"><code>filter</code> doesn't return a list in Python 3</span>
<span class="comment-copy">I'm not sure which version is he using seeing that in the tag there is only python, but this is a fully working example in python 2</span>
<span class="comment-copy"><code>TypeError: 'filter' object is not subscriptable</code> in Python 3</span>
<span class="comment-copy">if you use python 3 you can use this other command instead list(filter(("").__ne__, be))</span>
<span class="comment-copy">Isn't this what <code>filter(None, ...)</code> is for?</span>
<span class="comment-copy">Again, seems inefficient to filter the list every single time you want to lookup a single index?</span>
<span class="comment-copy">@G_M Friendly one-liner. Performance is a concern? It can be reused: <code>beF = [w for w in be if w != '']</code></span>
<span class="comment-copy">What if there were millions of indexes in <code>extra</code>? As shown in your comment, it's such a simple fix in this case that "premature optimization" concerns seem odd.</span>
<span class="comment-copy">This still gives the incorrect behaviour</span>
<span class="comment-copy">Oops! I overlooked the fact that he was printing the wrong thing. Thanks!</span>
