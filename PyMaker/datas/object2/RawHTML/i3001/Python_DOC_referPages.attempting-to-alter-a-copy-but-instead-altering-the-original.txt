<div class="post-text" itemprop="text">
<p>I'm trying to make a 'smart' opponent in my Tic Tac Toe program. To do this I've created a 'possible win' function which will decide if there is a possible win in the next turn. My problem when running this code is that on every iteration of the for loop the variable board seems to be changed. </p>
<p>I want to reset potential board to the original board at the start of every iteration which is why I included potential_board = board[:] at the start of the loop. I then edit potential_board but every time the loop repeats this variable is not reset, and board is in fact changed as well. Why is this?</p>
<p>Many thanks!</p>
<pre><code>import random,copy

board = [['o','o',' '],[' ',' ',' '],[' ',' ',' ']]
cols = [['o',' ',' '],['o','',''],['o','','']]

def possible_win(board,player):
    """ This function should predict whether a winning move is possible in
    the next turn. This could be done by simulating every possible next move
    and running check_win() on those positions.

    :param board,player: checks a win for the specified player
    :return:
    """
    spaces = empty_spaces(board)
    print('Spaces',spaces)

    winning_moves = []

    for space in spaces:

        potential_board = board[:]

        print('PBoard',potential_board)

        print(space[0],space[1])
        potential_board[space[0]][space[1]] = 'o'

        if check_win(potential_board,'o'):
            winning_moves.append(space)




    return winning_moves


def choose_space(board):

    a = True
    while a:

        col = int(input('Choose your column of 1,2,3: ')) - 1
        row = int(input('Choose your row of 1,2,3: ')) - 1

        if board[row][col] == ' ':
            board[row][col] = 'o'
            a = False

        else: print('Sorry, try again')

    return board


def empty_spaces(board):
    empty_spaces = []
    ind = 0
    for row in board:
        ind1 = 0
        for space in row:
            if space == ' ':
                empty_spaces.append((ind, ind1))
            ind1 += 1
        ind += 1
    return empty_spaces


def comp_choose_space(board):
    choice = random.choice(empty_spaces(board))
    board[choice[0]][choice[1]] = 'x'
    return board


def check_win(board,player):

    rows = board
    columns = construct_cols(board)

    for row in board:
        # if player fills row win = True
        a = ind =  0
        for space in row:
            if rows[board.index(row)][ind] != player: break
            else: a += 1
            ind += 1
        if a == 3:
            return True

    for col in columns:
        a = ind = 0
        for space in col:
            if rows[columns.index(col)][ind] != player:
                break
            else:
                a += 1
            ind += 1
        if a == 3:
            return True

    if rows[0][0] == player and rows[1][1] == player and rows[2][2] == player \
        or rows[0][2] == player and rows[1][1] == player and rows[2][0] == player:
        return True

    return False


def construct_cols(board):
    cols = [['','',''],['','',''],['','','']]
    for row in range(len(board)):
        for col in range(row):
            cols[col][row] = board[row][col] # sounds like this should work

    return cols

def print_board(board):
    for row in board:

        print('| {} {} {} |'.format(row[0],row[1],row[2]))

def main():
    turns = 0
    board = [[' ',' ',' '],[' ',' ',' '],[' ',' ',' ']]
    print_board(board)
    win = False
    while win == False and turns &lt; 9:
        turns += 1
        board = choose_space(board)

        if check_win(board,'o'): win,winner = True,'won'

        board = comp_choose_space(board)


        if check_win(board,'x'): win,winner = True,'lost'

        print_board(board)

    if turns == 9: print('You drew!')
    else:
        print('{}, you {}'.format('Congratulations' if winner == 'won' else 'Sorry',winner))




print(possible_win(board,'o'))
# print(empty_spaces(board))

# print(check_win(board,'o'))
# print_board(board)
# print(comp_choose_space(board))

# main()

# Future project - make the computer smarter than just randomly choosing a space
# ie seeing how close i am to winning
</code></pre>
<p>EDIT:
By using copy.deepcopy() I managed to fix this, but I dont understand why this works and copy.copy() and board[:] did not work? Could somebody explain this?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is what <a href="https://docs.python.org/3/library/copy.html#copy.deepcopy" rel="nofollow noreferrer"><code>copy.deepcopy</code></a> is for. It will traverse the structure, creating copies of each mutable object within. Using a slice <code>[:]</code> or shallow <code>copy</code> duplicated only the top level, leaving the list for each row shared. </p>
<p>Basically, if we start out with a list:</p>
<pre><code>l = [a, b, c]

shallow = l[:]
shallow2 = copy(l)

deep = deepcopy(l)
</code></pre>
<p>The two <code>shallow</code> copies have operated only on <code>l</code>, not on <code>a</code>, <code>b</code> or <code>c</code>. They both have the value <code>[a, b, c]</code> but are distinct lists. All of them refer to the same <code>a</code>, <code>b</code> and <code>c</code> objects (the only change from their perspective is that there are more references). </p>
<p>The <code>deep</code> copy has gone deeper and copied each element; it is a new list with the shape <code>[deepcopy(a), deepcopy(b), deepcopy(c)]</code>, whatever those values turned into. </p>
</div>
<span class="comment-copy"><code>[:]</code> just copies the outside list. <code>potential_board = board[:]</code> =&gt; <code>potential_board[0]</code> is exactly the same list as <code>board[0]</code>.</span>
<span class="comment-copy">as other answers and comments said, you are working with a nested list. In this case, <code>[:]</code> only copies the reference to the nested lists. In addition to the list, you will observe similar behaviour for a list of dictionaries or the nested dictionary.</span>
<span class="comment-copy">Thank you, that's really helpful. It seems strange that python would allow you to alter the original list even when using the [:] and copy() methods to 'try' to create separate objects. Is that a useful feature in some cases?</span>
<span class="comment-copy">It isn't the "original list"; it's the same <i>inner</i> list. Your rows (such as <code>a</code> in my example) were not copied at all. And it's a useful feature any time you have more complex data structures, for instance it is what allows you to modify a row as a variable instead of only as <code>board[r][c]</code>.</span>
