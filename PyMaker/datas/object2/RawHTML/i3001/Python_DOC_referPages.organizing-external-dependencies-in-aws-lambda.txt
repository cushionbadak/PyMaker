<div class="post-text" itemprop="text">
<p>I am relatively new to python and even newer to Lambda. I have created a lambda function that requires some external dependencies (<code>elasticsearch</code> and <code>elasticsearch-curator</code>).</p>
<p>My root folder is called <code>index_curator</code>, in which I have one single python file <code>main.py</code>. I installed the dependencies via <code>pip</code> as per Amazon's <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-python-how-to-create-deployment-package.html" rel="nofollow noreferrer">instructions</a> e.g.</p>
<pre><code>pip install elasticsearch elasticsearch-curator -t /path/to/index_curator
</code></pre>
<p>There are now many other files in this root directory and many child directories, which is not a surprise as these dependencies are quite large. For someone else looking at this package it would be difficult to differentiate between files I wrote and external dependencies. For example:</p>
<pre><code>index_curator/
    dateutil/
    click/
    idna/
    main.py    &lt;-- the only file I wrote
    README
    LICENSE
    six.py
    ...
</code></pre>
<p>Is there any way of shifting all these external dependencies into a sub-folder, e.g.</p>
<pre><code>index_curator/
    /external/
        dateutil/
        click/
        idna/
        README
        LICENSE
        six.py
    main.py    &lt;-- the only file I wrote
</code></pre>
<p>For completeness the imports in <code>main.py</code> are:</p>
<pre><code>from elasticsearch import Elasticsearch, RequestsHttpConnection
import curator
</code></pre>
<p>Any pointers would be appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>Separating external dependencies from your code is definitely best practice. There are a number of ways you can achieve this in python. </p>
<p>By default, python searches for modules in the locations specified <a href="https://docs.python.org/3/tutorial/modules.html#the-module-search-path" rel="nofollow noreferrer">here</a>. To specify an additional location (i.e your <code>external</code> dependencies folder), this new location must be added to the python path. You can do this in your <code>main.py</code> as follows:</p>
<pre><code>import sys, os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), 'external')))
</code></pre>
<p>Then you will be able to import all your dependencies as usual, since the interpreter will check the additional folder during runtime:</p>
<pre><code>from elasticsearch import Elasticsearch, RequestsHttpConnection
import curator
</code></pre>
<p>For more detail, check the answers <a href="https://stackoverflow.com/questions/4383571/importing-files-from-different-folder">here</a></p>
<p>Since your code will be a lambda function, you will always have one handler. But for a more generalised case, or if you start to write multiple files, and need to manage external dependencies in those as well - you can choose to maintain a <code>context.py</code> file, which sets the dependency path and all imports like so:</p>
<pre><code>import sys, os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), 'external')))
import elasticsearch
import context
</code></pre>
<p>Then in your files, you can call them with:</p>
<pre><code>from context.elasticsearch import Elasticsearch, RequestsHttpConnection
import context.curator
</code></pre>
</div>
