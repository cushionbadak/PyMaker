<div class="post-text" itemprop="text">
<p>I have a method that sends a POST containing a JSON to an Elasticsearch instance. I am trying to write a unit test that verify the contents of the sent JSON, but I am not sure how to go about that. Should I create a local server in python and have it verify the contents of the POST or something else? I currently have this:</p>
<pre><code>class TestAnalytics(BaseTest):

    def test_post(self):
        info = {"test1": "value1", "test2": "value2"}
        resp = requests.post(config.tool_repo_urls['es_url'], data=json.dumps(info), headers={'Content-Type': 'application/json'})
        assert_equal(resp.status_code, 200)  # verify valid response code
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Creating a local server would be an overkill, what you can do is use unitest library to patch the <code>post()</code> method so it sends the data to your internal assertion method using patch method here  is the link <a href="https://docs.python.org/3/library/unittest.mock-examples.html" rel="nofollow noreferrer">https://docs.python.org/3/library/unittest.mock-examples.html</a>. You should look at  section <strong>27.6.2. Patch Decorators</strong></p>
<p>Example:</p>
<pre><code>class TestAnalytics(BaseTest):

    @patch('requests.post')
    def test_post(self,mock_post):
        info = {"test1": "value1", "test2": "value2"}
        resp = requests.post(config.tool_repo_urls['es_url'], data=json.dumps(info), headers={'Content-Type': 'application/json'})
        #Some checks done on mock_post object
</code></pre>
<p>Full working example below
<strong>EDIT:</strong></p>
<pre><code>import json

from unittest import TestCase
from unittest.mock import patch

import requests


class TestAnalytics(TestCase):

    @patch('requests.post')
    def test_post(self, mock_post):
        info = {"test1": "value1", "test2": "value2"}
        resp = requests.post("www.someurl.com", data=json.dumps(info), headers={'Content-Type': 'application/json'})
        mock_post.assert_called_with("www.someurl.com", data=json.dumps(info), headers={'Content-Type': 'application/json'})


TestAnalytics().test_post()
</code></pre>
<p>Method <code>assert_called_with</code> checks if the patched method was called exactly with the parameters specified in its invocation. In this case it is True</p>
<p>Changing it to for example:</p>
<pre><code>mock_post.assert_called_with("www.someurl.com", data=json.dumps(info))
</code></pre>
<p>Will give:</p>
<pre><code>AssertionError: Expected call: post('www.someurl.com', data='{"test1": "value1", "test2": "value2"}')
Actual call: post('www.someurl.com', data='{"test1": "value1", "test2": "value2"}', headers={'Content-Type': 'application/json'})
</code></pre>
<p>You can also use the <code>mock_post</code> object to check indvidiual parametrs please check the link above for the full specs of what <code>MagicMock</code> can do</p>
<p><strong>EDIT2</strong></p>
<p>Recently found out about this little library for unit testing <code>requests</code> </p>
<p><a href="https://github.com/getsentry/responses" rel="nofollow noreferrer">https://github.com/getsentry/responses</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to verify the sent JSON you should try <code>json.loads()</code>, which will throw a ValueError if the input you pass can't be decoded as JSON.</p>
</div>
<span class="comment-copy">Create a unit test to POST and check the result of the POST based on the returned value from the API and then run a GET to confirm the contents match what you POSTed?</span>
<span class="comment-copy">I created a full working example to test invocation param</span>
<span class="comment-copy">Did my answer solved your problem?</span>
<span class="comment-copy">Check edit2 of my answer maybe this will be better for you</span>
<span class="comment-copy">Could you clarify that commented out line? I'm not sure what you mean with <code>mock.assert_called_with, your_Expected_value</code></span>
