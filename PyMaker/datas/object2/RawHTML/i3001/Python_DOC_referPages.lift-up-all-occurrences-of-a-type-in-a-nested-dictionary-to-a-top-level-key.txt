<div class="post-text" itemprop="text">
<p>I have a need in a project to find all of a given type in a nested dictionary and move them all to a top level key in the same dictionary. </p>
<p>So far I have the below code, which seems to work. In the example I'm looking for all the items that are integers and moving them to a <code>'numbers'</code> key.</p>
<p>I'd prefer it if the <code>lift_numbers_to_top</code> function made and returned a copy of the dictionary rather than editing it in place, but I haven't been able to work out a nice way to pass the copy and the numbers back from the recursive function to itself, if that makes sense. </p>
<pre><code>a_dictionary = {
    "one": 1,
    "two": 2,
    "text": "Hello",
    "more_text": "Hi",
    "internal_dictionary": {
        "three": 3,
        "two": 2,
        "even_more_text": "Hey",
        "another_internal_dictionary": {
            "four": 4,
            "five": 5,
            "last_text": "howdy"
        }
    }
}


def extract_integers(dictionary, level_key=None):
    numbers = {}
    for key in dictionary:
        if type(dictionary[key]) == int:
            numbers[level_key + "__" + key if level_key else key] = dictionary[key]
    return numbers


def lift_numbers_to_top(dictionary, level_key=None):
    numbers = {}
    if type(dictionary) == dict:
        numbers = extract_integers(dictionary, level_key)
        for key in numbers:
            keyNumber = key.split('__')[-1]
            del dictionary[keyNumber]
        for key in dictionary:
            numbers = {**numbers, **lift_numbers_to_top(dictionary[key], key)}
    return numbers


a_dictionary['numbers'] = lift_numbers_to_top(a_dictionary)
print(a_dictionary)
</code></pre>
<p>Result:</p>
<pre><code>{
    'text': 'Hello',
    'more_text': 'Hi',
    'internal_dictionary': {
        'even_more_text': 'Hey',
        'another_internal_dictionary': {
            'last_text': 'howdy'
        },
    },
    'numbers': {
        'one': 1,
        'two': 2,
        'internal_dictionary__two': 2,
        'internal_dictionary__three': 3,
        'another_internal_dictionary__four': 4,
        'another_internal_dictionary__five': 5,
    }
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a match function to determine what to lift, and pass along the target object where you move key-value pairs to to recursive calls. If that target is missing, you know the current call is for the top-level. The match function should return the new key for the new dictionary.</p>
<p>To produce a new dictionary, just produce a new dictionary and put recursion results into that object.</p>
<p>I prefer to use <a href="https://docs.python.org/3/library/functools.html#functools.singledispatch" rel="nofollow noreferrer"><code>@singledispatch()</code></a> to handle different types when recursing:</p>
<pre><code>from functools import singledispatch

@singledispatch
def lift_values(obj, match, targetname=None, **kwargs):
    """Lift key-value pairs from a nested structure to the top

    For key-value pairs anywhere in the nested structure, if
    match(path, value) returns a value other than `None`, the 
    key-value pair is moved to the top-level dictionary when targetname
    is None, or to a new dictionary stored under targetname is not None,
    using the return value of the match function as the key. path
    is the tuple of all keys and indices leading to the value.

    For example, for an input 

        {'foo': True, 'bar': [{'spam': False, 'ham': 42}]}

    and the match function lambda p, v: p if isinstance(v, bool) else None
    and targetname "flags", this function returns

        {'flags': {('foo',): True, ('bar', 0, 'spam'): False}, 'bar': [{'ham': 42}]}

    """
    # leaf nodes, no match testing needed, no moving of values
    return obj

@lift_values.register(list)
def _handle_list(obj, match, _path=(), **kwargs):
    # list values, no lifting, just passing on the recursive call
    return [lift_values(v, match, _path=_path + (i,), **kwargs)
            for i, v in enumerate(obj)]

@lift_values.register(dict)
def _handle_list(obj, match, targetname=None, _path=(), _target=None):
    result = {}
    if _target is None:
        # this is the top-level object, key-value pairs are lifted to
        # a new dictionary stored at this level:
        if targetname is not None:
            _target = result[targetname] = {}
        else:
            # no target name? Lift key-value pairs into the top-level
            # object rather than a separate sub-object.
            _target = result

    for key, value in obj.items():
        new_path = _path + (key,)
        new_key = match(new_path, value)
        if new_key is not None:
            _target[new_key] = value
        else:
            result[key] = lift_values(
                value, match, _path=new_path, _target=_target)

    return result
</code></pre>
<p>I included a dispatch function for lists; your sample doesn't use lists, but these are common in JSON data structures so I anticipate you probably want it anyway.</p>
<p>The match function must accept two arguments, the path to the object this key-value pair was found in, and the value. It should return a new key to use or <code>None</code> if not to lift the value. </p>
<p>For your case, the match function would be:</p>
<pre><code>def lift_integers(path, value):
    if isinstance(value, int):
        return '__'.join(path[-2:])

result = lift_values(a_dictionary, lift_integers, 'numbers')
</code></pre>
<p>Demo on your sample input dictionary:</p>
<pre><code>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; def lift_integers(path, value):
...     if isinstance(value, int):
...         return '__'.join(path[-2:])
...
&gt;&gt;&gt; lift_values(a_dictionary, lift_integers, 'numbers')
{'numbers': {'one': 1, 'two': 2, 'internal_dictionary__three': 3, 'internal_dictionary__two': 2, 'another_internal_dictionary__four': 4, 'another_internal_dictionary__five': 5}, 'text': 'Hello', 'more_text': 'Hi', 'internal_dictionary': {'even_more_text': 'Hey', 'another_internal_dictionary': {'last_text': 'howdy'}}}
&gt;&gt;&gt; pprint(_)
{'internal_dictionary': {'another_internal_dictionary': {'last_text': 'howdy'},
                         'even_more_text': 'Hey'},
 'more_text': 'Hi',
 'numbers': {'another_internal_dictionary__five': 5,
             'another_internal_dictionary__four': 4,
             'internal_dictionary__three': 3,
             'internal_dictionary__two': 2,
             'one': 1,
             'two': 2},
 'text': 'Hello'}
</code></pre>
<p>Personally, I'd use the full path as the key in the lifted dictionary to avoid name clashes; either by joining the full <code>path</code> into a new string key with some unique delimiter, or just by making the <code>path</code> tuple itself the new key:</p>
<pre><code>&gt;&gt;&gt; lift_values(a_dictionary, lambda p, v: p if isinstance(v, int) else None, 'numbers')
{'numbers': {('one',): 1, ('two',): 2, ('internal_dictionary', 'three'): 3, ('internal_dictionary', 'two'): 2, ('internal_dictionary', 'another_internal_dictionary', 'four'): 4, ('internal_dictionary', 'another_internal_dictionary', 'five'): 5}, 'text': 'Hello', 'more_text': 'Hi', 'internal_dictionary': {'even_more_text': 'Hey', 'another_internal_dictionary': {'last_text': 'howdy'}}}
&gt;&gt;&gt; pprint(_)
{'internal_dictionary': {'another_internal_dictionary': {'last_text': 'howdy'},
                         'even_more_text': 'Hey'},
 'more_text': 'Hi',
 'numbers': {('internal_dictionary', 'another_internal_dictionary', 'five'): 5,
             ('internal_dictionary', 'another_internal_dictionary', 'four'): 4,
             ('internal_dictionary', 'three'): 3,
             ('internal_dictionary', 'two'): 2,
             ('one',): 1,
             ('two',): 2},
 'text': 'Hello'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use walk through the dict recursively and pop all elements with values as an <code>int</code> to create a new dict</p>
<pre><code>&gt;&gt;&gt; def extract(d):
...     new_d = {}
...     for k,v in d.items():
...         if type(v) == int:
...             new_d[k] = d[k]
...         elif type(v) == dict:
...             for k2,v2 in extract(v).items():
...                 new_d[k2 if '__' in k2 else k+'__'+k2] = v2
...     return new_d
... 
&gt;&gt;&gt; a_dictionary['numbers'] = extract(a_dictionary)
&gt;&gt;&gt; pprint(a_dictionary)
{'internal_dictionary': {'another_internal_dictionary': {'last_text': 'howdy'},
                         'even_more_text': 'Hey'},
 'more_text': 'Hi',
 'numbers': {'another_internal_dictionary__five': 5,
             'another_internal_dictionary__four': 4,
             'internal_dictionary__three': 3,
             'internal_dictionary__two': 2,
             'one': 1,
             'two': 2},
 'text': 'Hello'}
</code></pre>
</div>
<span class="comment-copy">Please post your desired output.</span>
<span class="comment-copy">@Sarcoma: it helps us determine if we are understanding the problem statement, <i>and</i> verify that our solution matches the expectations. Please add it to your post.</span>
<span class="comment-copy">Sure thing, there you go. Just reading through your answer, quite a few things I've not encountered a lot.</span>
<span class="comment-copy">Thanks for the answer, <code>@singledispatch</code> is super cool, I'm working with what you've provided to see what I can get working. I've added the desired results, which are a little different from your output.</span>
<span class="comment-copy">@Sarcoma: I've updated my answer to adjust for the target. <code>singledispatch</code> is not strictly needed here, but simplifies the implementation a little in that you don't have to do any type checks in the implementation.</span>
<span class="comment-copy">It looks like it gives you a way to switch the functions out based on the type of the first argument, is that right? Thanks for updating the code, however I'm handling duplicates that might turn up, there are two <code>'two'</code> keys. I'm prepending the parent key to the nested keys to avoid losing data. I'll see if I can suss it out.</span>
<span class="comment-copy">@Sarcoma: ah, of course, I missed that. Why not the full path, however? And I'd use a tuple for the keys in that case.</span>
<span class="comment-copy">@Sarcoma: I've updated my approach to handle your case and more.</span>
<span class="comment-copy">Thanks but I do not want the additional nesting. It's for an API to collect some useful data into a nice list.</span>
<span class="comment-copy">@Sarcoma. Sorry. Misread the question. Have updated the answer</span>
<span class="comment-copy">Nice and concise, I think this still mutates the original dictionary with <code>d.pop(k)</code>. That's the thing I'm trying to avoid, it's the problem I have in my own example.</span>
<span class="comment-copy"><code>for k,v in list(d.items()):</code> does this create a copy of the dictionary items as a list of tuples so that you can modify the dictionary in the loop?</span>
<span class="comment-copy">Changed the <code>d.pop(k)</code> to <code>d[k]</code>, That should avoid <code>d</code> getting modified. As we are not modifying <code>d</code>, we can just iterate over it as <code>for k,v in d.items():</code></span>
