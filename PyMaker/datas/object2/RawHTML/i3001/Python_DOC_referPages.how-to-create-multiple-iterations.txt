<div class="post-text" itemprop="text">
<p>I wanna know how do I create an iteration which would iter several or more than one parameters with different ranges
For example I wanna instantiate several object with iterations that all have different ranges
Like there is a triangle function which takes three parameters, how do I use iterations to give one parameter one value from a range e.g. 50 to 100 and another parameter a different one altogether
I know how to instantiate it over one parameter by:</p>
<pre><code>for i in range(100):
</code></pre>
<p>But what do I do to instantiate it if it takes more than one parameter</p>
</div>
<div class="post-text" itemprop="text">
<p>Looks like you will want to use <em>nested</em> for loops.  For example for your three parameter function:</p>
<pre><code># these are just example ranges, replace with what's meaningful for your problem
range_for_parameter_0 = range(100)
range_for_parameter_1 = range(150)
range_for_parameter_2 = range(75)

# start a nested for loop
for i in range_for_parameter_0:
    for j in range_for_parameter_1:
        for k in range_for_parameter_2:
            # you can print something out to see exactly what's happening
            # feel free to comment out the print statement
            print('Calling triangle_function with parameters {},{},{}'.format(i,j,k))

            # evaluate your triangle_function which takes 3 parameters
            triangle_function(i,j,k)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try iterating over a Cartesian <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>product</code></a>.</p>
<p><strong>Given</strong></p>
<pre><code>import itertools as it


def is_tri(a, b, c):
    """Return True if the sides make a triangle."""
    a, b, c = sorted([a, b, c])
    return (a + b) &gt; c

ranges = range(1, 2), range(1, 3), range(1, 5)
</code></pre>
<p><strong>Code</strong></p>
<pre><code>[sides for sides in it.product(*ranges) if is_tri(*sides)]
# [(1, 1, 1), (1, 2, 2)]
</code></pre>
<hr/>
<p><strong>Details</strong></p>
<p>If you are unfamiliar with list comprehensions, the latter is equivalent to the following code:</p>
<pre><code>results = []
for x, y, z in it.product(*ranges):
    if is_tri(x, y, z):
        results.append((x, y, z))

results
# [(1, 1, 1), (1, 2, 2)]
</code></pre>
<p>Per your comment, <code>is_tri()</code> pre-sorts arguments, so you interchange them:</p>
<pre><code>assert is_tri(13, 12, 5) == True 
assert is_tri(12, 5, 13) == True
assert is_tri(5, 13, 12) == True
</code></pre>
<p>If your ranges are the same, you can simplify the input with the <code>repeat</code> parameter, e.g. <code>it.product(range(1, 101), repeat=3)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't. You need three iterations.</p>
<pre><code>for i in range(x):
    ...

for j in range(y):
    ...

for k in range(z):
    ...
</code></pre>
<p>See <code>range()</code> definition <a href="https://docs.python.org/3/library/stdtypes.html#range" rel="nofollow noreferrer">here</a></p>
</div>
<span class="comment-copy">Do you mean these triangle functions <a href="http://mathworld.wolfram.com/TriangleFunction.html" rel="nofollow noreferrer">mathworld.wolfram.com/TriangleFunction.html</a>?  What kind of arguments does your function take?</span>
<span class="comment-copy">No sorry for the confusion, it's just a function that determines whether given three values can make a triangle or not</span>
<span class="comment-copy">takes x,y,z for each side of a triangle</span>
<span class="comment-copy">Why do you need a loop?  That's just computing Pythagoras no?  Actually, the rule is <code>(a + b) &gt; c</code> I think.  So <code>def is_tri(a, b, c): return (a + b) &gt; c</code></span>
<span class="comment-copy">I wanted to instantiate a large number of values to see how efficient the algorithm is, it just checks whether the sum of two sides apart from the largest is greater than the largest side, Pythagoras only applies on right angled triangles so</span>
<span class="comment-copy">seems pretty nice, where did u get this from? a book or something for ref cause I've been searching a lot of them which would give advanced techniques but can't find any good ones</span>
<span class="comment-copy">Hi Afzal, a good source of information when you're getting started is <a href="https://docs.python.org/3/tutorial/" rel="nofollow noreferrer">docs.python.org/3/tutorial</a> .  The page that discusses for loops is <a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements" rel="nofollow noreferrer">docs.python.org/3/tutorial/controlflow.html#for-statements</a> .  If you look at 4.4, they have an example that uses nested for loops.</span>
<span class="comment-copy">This is excellent!</span>
<span class="comment-copy">yes but I can't instantiate with giving only one parameter at a time</span>
<span class="comment-copy"><code>range(start, stop[, step])</code> function can only take one <code>stop</code> parameter, so you either go with a nested loop in a nested loop (really bad performance-wise) or you restructure your algorithm logic altogether and refactor your code accordingly.</span>
