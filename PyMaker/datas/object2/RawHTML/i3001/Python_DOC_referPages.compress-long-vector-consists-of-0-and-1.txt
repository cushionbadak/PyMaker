<div class="post-text" itemprop="text">
<p>Say I got a vector of size [1 x 300], in which each element consists of 0 or 1. I might need to store a bunch of these iteratively during the run time. How do I effectively represent it so that I can effeciently store them (<strong>python</strong>)?</p>
<hr/>
<p>I guess there are two ways to do it. The first method is to do something like a bitmap (do they even have this in python)?</p>
<p>The second approach 
I was thinking maybe is to store the 1's position. </p>
<p>eg. [0, 1, 1, 1]. I will store them as [1,2,3]. </p>
<p>Any ideas?</p>
</div>
<div class="post-text" itemprop="text">
<p>An alternative often used in raster filled shapes processing (where you typically have large uniform areas) is to store your data as spans, i.e. store just the length of each run of 0s or 1s (essentially, it's RLE with the item of each run implicit in the position). You can choose arbitrarily that the first value (and so, all even values) represents a run of 0s, while the second (and so, all odd values) a run of 1s. So, something like</p>
<pre><code>0 0 0 0 0 1 1 0 0 0 1 1 1 1
</code></pre>
<p>becomes</p>
<pre><code>5 2 3 4
</code></pre>
<p>Appending to such a structure is trivial:</p>
<pre><code>def append(l, value):
    cur = (len(l) + 1) % 2
    if value == cur:
        l[-1] += 1
    else:
        l.append(1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/zlib.html" rel="nofollow noreferrer">zlib</a> for data compression.</p>
<pre><code>&gt;&gt;&gt; import zlib
&gt;&gt;&gt; vector = [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1]  # small sample
&gt;&gt;&gt; compressed = zlib.compress(bytearray(vector))
&gt;&gt;&gt; compressed
b'x\x9ccd`ddd\x00\x02FF\x00\x001\x00\x07'
&gt;&gt;&gt; list(zlib.decompress(compressed))
[1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1]
</code></pre>
<p>Also python has support of <a href="https://docs.python.org/3/library/array.html" rel="nofollow noreferrer">efficient arrays of numeric values</a>, that might be useful in your case.</p>
</div>
<span class="comment-copy">"effectively" typically depends on what you plan to do with it...</span>
<span class="comment-copy">Is you vector dense (how much 1's)?</span>
<span class="comment-copy">lookup "run length encoding" - f.e. here (with side conditions): <a href="https://stackoverflow.com/questions/18948382/run-length-encoding-in-python">run-length-encoding-in-python</a> or here: <a href="https://en.wikipedia.org/wiki/Run-length_encoding" rel="nofollow noreferrer">en.wikipedia.org/wiki/Run-length_encoding</a></span>
<span class="comment-copy">Or use itertools <code>[len(list(b)) for a, b in itertools.groupby(l)]</code></span>
