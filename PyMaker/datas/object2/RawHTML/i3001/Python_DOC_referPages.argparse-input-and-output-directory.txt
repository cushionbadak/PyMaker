<div class="post-text" itemprop="text">
<p>So I am trying to use python's argparse to get images from a directory modify them and store them in a new directory but I'm having trouble. </p>
<p>For example say I have a directory named classes which has 50 different classes each having 100 different images.</p>
<pre><code>classes &gt; {A(50), B(50), ...N(50)}
</code></pre>
<p>Then I should so something with these images and save them into a new different directory classes_2 </p>
<pre><code>classes2 &gt; {A'(200), B'(200),...N'(200)}
</code></pre>
<p>I want to be able to specify something </p>
<pre><code>python filename.py --input classes/A --dest classes_2/A'
</code></pre>
<p>How can I use argparse in order to do this. Also I'm using scipy imsave however I have to change the path in my code every single time.</p>
<p>Edited:</p>
<p>Ok thank you @nosklo, Now the problem that I'm having is this I'm using imgaug library for image augmentation and my code is this:</p>
<p>suppose I have all the imports needed, cv2, imgaug, argparse, os, sys, etc. </p>
<pre><code>parser = argparse.ArgumentParser()
parser.add_argument('--input', help = 'input directory', required = True)
parser.add_argument('--dest', help = 'destination directory', required = True)
args = ap.parse_args()

for filename in files:
    images = []
    image = cv.imread(filename)
    image_rgb = cv.cvtColor(image, cv.COLOR_BRG2RGB)
    images.append(image_rgb)

    #imgaug built-in functions
    seq = iaa.Sequential([ ... ])

    num_augs_per_image = 10

    # save images in format 001_07 
    # where 001 is the second image in your original data set 
    # and 07 is the 8th version of the 2nd image
    for i, image in enumerate(images):
        image_augs = seq.augment_images([image] * n_augs_per_image)
        for j, image_aug in enumerate(image_augs):
            result = os.path.join(args.dest, "%03d_%02d.jpg" % (i, j))
            with open(result, 'wb') as f:
                f.write(image_aug)
</code></pre>
<p>I've also tried for the last part:</p>
<pre><code>for i, image in enumerate(images):
            image_augs = seq.augment_images([image] * n_augs_per_image)
                for j, image_aug in enumerate(image_augs):
                    misc.imsave(os.path.join("%03d_%02d.jpg" % (i, j)), image_aug)
</code></pre>
<p>However when I call the file python filename.py --input /path/classes/A --dest /path/classes/B I do not get any of images saved in the new directory. </p>
<p>Like for example if I had 5 images in directory A I was expecting to have 50 images in directory B since I have augmented each image 10 times and want to save all versions of my original images.</p>
</div>
<div class="post-text" itemprop="text">
<p>I will help with the argparse part, so you can focus on your "something" you must do to the images:</p>
<pre><code>import os
import argparse

parser = argparse.ArgumentParser(description='Process some images')
parser.add_argument('--input', help='the input directory', required=True)
parser.add_argument('--dest', help='the destination', required=True)

args = parser.parse_args()

for path, dirs, files in os.walk(args.input):
    for filename in files:
        fullname = os.path.join(path, filename)
        result, result_filename = do_something(fullname)
        result_fullname = os.path.join(args.dest, result_filename)
        with open(result_fullname, 'wb') as f:
            f.write(result)
</code></pre>
<p>This assumes your function <code>do_something</code> will be able to return a <code>result</code> and a new <code>result_filename</code> that will be used to write the file in the <code>--dest</code> directory - if you want to use the same filename just use the <code>filename</code> variable instead.</p>
</div>
<span class="comment-copy">All <code>argparse</code> can do for you is interpret the input, and give you 2 values, <code>args.input</code> and <code>args.dest</code> (both string values).  You have to write your own code to use those values.</span>
<span class="comment-copy">@hpaulj: <code>argparse</code> can do more than that.  Take a look at the documentation for <a href="https://docs.python.org/3/library/argparse.html#type" rel="nofollow noreferrer">the <code>type</code> argument</a> of the <code>add_argument()</code> method of <a href="https://docs.python.org/3/library/argparse.html#argumentparser-objects" rel="nofollow noreferrer"><code>ArgumentParser</code></a>.</span>
<span class="comment-copy">@WarrenWeckesser, true,  A lot can be done with <code>type</code>.  But a function that works well as a <code>type</code>, can be used just as easily after parsing to convert string values.  And I think, for a beginner, that will be less confusing.  I prefer to focus on <code>argparse</code> as a parser.  But there are extensions and alternative parsers that try to integrate parsing and execution (e.g. <code>plac</code>)</span>
<span class="comment-copy">Ok thank you @nosklo but I have problems saving my images using this.  I have added an "answer" explaining my code and what doesn't work. I hope you can check it out. I would really appreciate it.</span>
<span class="comment-copy">@JackConti I have seen your updated code, but I don't see where your <code>files</code> variable is coming from - do you have the <code>for path, dirs, files in os.walk(args.input):</code> part in your code? What about the <code>fullname = os.path.join(path, filename)</code> part?</span>
