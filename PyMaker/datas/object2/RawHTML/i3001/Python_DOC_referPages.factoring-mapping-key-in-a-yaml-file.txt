<div class="post-text" itemprop="text">
<p>I have this YAML file :</p>
<pre><code>pb:
  {EF:{16, 19}, EH:{16, 19}}
</code></pre>
<p>when I apply my <code>flattendict</code> Python function, I get this</p>
<pre><code>{('pb', 'EF', 16): None,
 ('pb', 'EF', 19): None,
 ('pb', 'EH', 16): None,
 ('pb', 'EH', 19): None}
</code></pre>
<p>I search the syntax of my YAML file as below, to get the same result (I want factoring my YAML node data)</p>
<pre><code>pb:
  {EF, EH}, {16, 19}}
</code></pre>
<p>Have you an idea?</p>
<p>Here my python flattendict function</p>
<pre><code>#!/usr/bin/env python
#encoding: UTF-8
import codecs
import sys
import yaml
import pprint

import collections

from collections import Mapping
from itertools import chain
from operator import add

_FLAG_FIRST = object()

def flattenDict(d, join=add, lift=lambda x:x):
    results = []
    def visit(subdict, results, partialKey):
        for k,v in subdict.items():
            newKey = lift(k) if partialKey==_FLAG_FIRST else join(partialKey,lift(k))
            if isinstance(v,Mapping):
                visit(v, results, newKey)
            else:
                results.append((newKey,v))
    visit(d, results, _FLAG_FIRST)
    return results

testdata = yaml.safe_load(open('data.yaml', 'r')) 
from pprint import pprint as pp
result = flattenDict(testdata, lift=lambda x:(x,))
pp(dict(result))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In YAML you can have a complex flow node, even in a simple key (i.e. without <code>?</code>, markup). This is so in both <a href="http://yaml.org/spec/1.1/#ns-block-simple-key(n)" rel="nofollow noreferrer">YAML 1.2</a> and <a href="http://yaml.org/spec/1.2/spec.html#ns-s-implicit-yaml-key(c)" rel="nofollow noreferrer">YAML 1.1</a>. That means that this:</p>
<pre><code>{a: 1, b: 2}: mapping
[1, 2, a]: sequence
</code></pre>
<p>is correct YAML. </p>
<p>The problem is that a mapping normally loads as a Python <code>dict</code> and a sequence as a Python <code>list</code>, both of which are mutable, cannot be hashed, and are not allowed as keys for a Python <code>dict</code> (try executing <code>python -c "{{'a': 1}: 2}"</code>).</p>
<p>PyYAML (which supports YAML 1.1) errors out on both of those lines. </p>
<p>Since Python has an immutable <code>list</code> in the form of <code>tuple</code>, I decided to implement loading of sequence keys in Python by constructing them as tuples in <code>ruamel.yaml</code> (which supports YAML 1.2 and YAML 1.1). So the following works:</p>
<pre><code>import sys
import ruamel.yaml
from pprint import pprint as pp

yaml_str = """\
[pb, EF, 16]: 
[pb, EF, 19]: 
[pb, EH, 16]: 
[pb, EH, 19]: 
"""


yaml = ruamel.yaml.YAML(typ='rt')
# yaml.indent(mapping=4, sequence=4, offset=2)
# yaml.preserve_quotes = True
data = yaml.load(yaml_str)

pp(data)
print('---------')
yaml.dump(data, sys.stdout)
</code></pre>
<p>printing:</p>
<pre><code>{('pb', 'EF', 16): None,
 ('pb', 'EF', 19): None,
 ('pb', 'EH', 16): None,
 ('pb', 'EH', 19): None}
---------
[pb, EF, 16]:
[pb, EF, 19]:
[pb, EH, 16]:
[pb, EH, 19]:
</code></pre>
<p>If you try to load the above YAML in PyYAML it throws an exception:</p>
<pre><code>found unhashable key
  in "&lt;unicode string&gt;", line 1, column 1:
    [pb, EF, 16]: 
</code></pre>
<hr/>
<p>Notes:</p>
<ul>
<li><p>If you don't want to round-trip, use <code>typ="safe"</code>, it uses the faster C-loader, that also handles keys-that-are-sequences, but it doesn't as smartly dump those back, resulting in <code>?</code> marked explicit keys.</p></li>
<li><p>A <a href="https://www.python.org/dev/peps/pep-0416/" rel="nofollow noreferrer">proposal for a <code>frozendict</code></a> for Python, did not get accepted, so there is no equivalent, not even in the standard library for a <code>dict</code> what <code>tuple</code> is for a <code>list</code>, and <code>ruamel.yaml</code> doesn't support mappings as keys out of the box. You can of course add this to <code>ruamel.yaml</code>'s Constructor if you have such a frozendict.</p></li>
<li><p>Although there is a <a href="https://docs.python.org/3/library/stdtypes.html#frozenset" rel="nofollow noreferrer"><code>frozenset</code></a> in Python, and a set in <a href="http://yaml.org/type/set.html" rel="nofollow noreferrer">YAML</a>, <code>ruamel.yaml</code> does <strong>not</strong> currently accept the following as input:</p>
<pre><code>!!set {a , b}: value
</code></pre></li>
<li><p>Probably needless to say: you cannot change the elements of such a key programmatically without deleting and re-adding the key-value pair.</p></li>
</ul>
</div>
