<div class="post-text" itemprop="text">
<p>I have multiple files with lines of the format:</p>
<pre><code>8 upchimy79 291160.8516853 345706.9991016
9 upchimy79 291160.8516853 345706.9991016
70 upchimy79 291178.7591454 345733.5179607
134 upchimy79 291391.9184244 345688.8950164
190 upchimy79 291511.4331200 345634.4573389
</code></pre>
<p>and:</p>
<pre><code>0 eapceou79 289109.1707774 345638.6043512
60 eapceou79 289091.8125863 345656.2855532
120 eapceou79 289041.8477906 345702.7290361
183 eapceou79 288993.3282226 345747.8902265
215 eapceou79 289074.9134241 345759.2455079
</code></pre>
<p>I want to merge all the files together so the first number would be in ascending order. So the output would be like this:</p>
<pre><code>0 eapceou79 289109.1707774 345638.6043512
8 upchimy79 291160.8516853 345706.9991016
9 upchimy79 291160.8516853 345706.9991016
60 eapceou79 289091.8125863 345656.2855532
70 upchimy79 291178.7591454 345733.5179607
120 eapceou79 289041.8477906 345702.7290361
134 upchimy79 291391.9184244 345688.8950164
</code></pre>
<p>I have quite a few files to do this for and each file has around 1400 lines each so am unsure of the best way to achieve this.  </p>
</div>
<div class="post-text" itemprop="text">
<p>When all files are sorted on their own (like in your example), you can use <code>heapq.merge</code> (<a href="https://docs.python.org/3/library/heapq.html#heapq.merge" rel="nofollow noreferrer">docs here</a>) with <code>key</code> argument to merge them. This example is with two files, but you can merge arbitrary number of files this way: </p>
<pre><code>from heapq import merge

with open('f1.txt', 'r', newline='') as f1_in, \
     open('f2.txt', 'r', newline='') as f2_in, \
     open('data_out.txt', 'w', newline='') as f_out:

     for line in merge(f1_in, f2_in, key=lambda l: int(l.split(' ')[0])):
        f_out.write(line)
</code></pre>
<p>Lines in output file will look like:</p>
<pre><code>0 eapceou79 289109.1707774 345638.6043512
8 upchimy79 291160.8516853 345706.9991016
9 upchimy79 291160.8516853 345706.9991016
60 eapceou79 289091.8125863 345656.2855532
70 upchimy79 291178.7591454 345733.5179607
120 eapceou79 289041.8477906 345702.7290361
134 upchimy79 291391.9184244 345688.8950164
183 eapceou79 288993.3282226 345747.8902265
190 upchimy79 291511.4331200 345634.4573389
215 eapceou79 289074.9134241 345759.2455079
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Pandas is pretty great for stuff like this:</p>
<pre><code>d1 = pd.read_csv(file1, delimiter=' ', index_col=0, header=None)
d2 = pd.read_csv(file2, delimiter=' ', index_col=0, header=None)

df = pd.concat([d1, d2], axis=0).sort_index()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import pandas as pd

all_your_files = ["filenames","filename2",...]

all_dfs = ( pd.read_csv(f, delimiter=' ', delim_whitespace=True, header=["nr","name","d2","d3"], ) \
            for f in all_your_files)

df = pd.concat(all_dfs)
df.sort_values(by='nr', inplace=true)
</code></pre>
<p>to get them all sorted at once. Then write cvs back out with pandas: </p>
<pre><code>df.to_csv("file_name", index=False, header=None, delimiter=" ")
</code></pre>
<p>By not using the first digit as index you will have dupes if they contain some...</p>
</div>
<span class="comment-copy">do you have duplicate line numbers? are they always sorted in both files? how many are "quite a few"? 5 ? 10? 50?</span>
<span class="comment-copy">No duplicate line numbers, but all files have already been sorted into ascending order. I have 100 files to do it with overall.</span>
<span class="comment-copy">This works great but is there anyway to have the output not have line spaces between each line?</span>
<span class="comment-copy">@TristanO'Keefe I updated my answer. Just open the output file with <code>newline=''</code>: <code>open('data_out.txt', 'w', newline='')</code></span>
<span class="comment-copy">That's perfect. Thankyou</span>
