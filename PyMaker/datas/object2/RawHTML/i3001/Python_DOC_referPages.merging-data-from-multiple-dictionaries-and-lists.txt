<div class="post-text" itemprop="text">
<p>Lets say I have a dictionary of state abbreviations and the corresponding names:</p>
<pre><code>stateDict = {'AL': 'Alabama', 'AK': 'Alaska', 'AZ': 'Arizona', ...}
</code></pre>
<p>I also have a list of dictionaries that has the state abbreviations, as well as other data, including county and county fips codes:</p>
<pre><code>stateList = [{'county': 'Los Angeles County', 'state': 'CA', 'fips': '06037', 'cid': '060655'}, {'county': 'Jasper County', 'state': 'AL', 'fips': '18073', 'cid': '180100'}, {'county': 'Lafayette Parish', 'state': 'LA', 'fips': '22055', 'cid': '220102'}, {'county': 'Carver County', 'state': 'AL', 'fips': '27019', 'cid': '275233'}, {'county': 'Bertie County', 'state': 'NC', 'fips': '37015', 'cid': '227344'}...]
</code></pre>
<p>As you can see above, we have more than one entry for <code>'state': 'AL'</code>. What I want to do here is using dictionary 1: stateDict, choose all the entries in list <code>stateList</code> for 'AL' and then place the state name in a new list with all of the county fips codes that are shown in stateList for 'AL' (or any other state that is in stateDict). So the outcome would look like this:</p>
<pre><code>stateInfo = ['Alabama': {'01003', '01004', '01017'}, 'Alaska': {'02030', '02113', '02014'}...]
</code></pre>
<p>Or perhaps like this (I'm not sure what would be appropriate exactly):</p>
<pre><code>stateInfo = {'Alabama': ['01003', '01004', '01017'], 'Alaska': ['02030', '02113', '02014']...}
</code></pre>
<p>Using previously mentioned methods, I would use something like this, but because I am pulling the data for stateInfo, I am somewhat confused. Suggestions?</p>
<pre><code>stateInfo = {}
for i in stateList:
    fips = []
    for j in stateDict:
        for k, v in stateDict:
            if 'state' in stateList[i] == k for stateDict[j]:
                stateInfo[stateDict[v]].append(stateList('fips'[v])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I used <code>defaultdict</code> from the <code>collections</code> module. Basically you provide a callable which will set the initial value to that if it's not found:</p>
<pre><code>from collections import defaultdict

state_dict = {'AL': 'Alabama', 'AK': 'Alaska', 'AZ': 'Arizona'}
county_list = [{'county': 'Los Angeles County', 'state': 'CA', 'fips': '06037', 'cid': '060655'}, {'county': 'Jasper County', 'state': 'AL', 'fips': '18073', 'cid': '180100'}, {'county': 'Lafayette Parish', 'state': 'LA', 'fips': '22055', 'cid': '220102'}, {'county': 'Carver County', 'state': 'AL', 'fips': '27019', 'cid': '275233'}, {'county': 'Bertie County', 'state': 'NC', 'fips': '37015', 'cid': '227344'}]


state_info = defaultdict(list)
for county in county_list:
    state_info[state_dict[county['state']]].append(county['fips'])
</code></pre>
<p>This assumes that every <code>state</code> value in <code>county_list</code> will have a corresponding key in <code>state_dict</code>. If they don't, you'll need to do some error checking.</p>
<p>Also, I changed the name of your variables to reflect the actual data.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="nofollow noreferrer">setdefault</a> method for dictionaries to simplify the task</p>
<pre><code>stateInfo = {}
for k in stateList:
    if 'state' in k:
        stateInfo.setdefault(stateDict[k['state']], []).append(v['fips'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Invert your state dictionary first</p>
<pre><code>stateDict = {v:k for k,v in stateDict.iteritems()}
</code></pre>
<p>Then for each state find the 'fips' and add to a dictionary:</p>
<pre><code>outDict = {}
for i in stateDict:
    outDict[i]=[j['fips'] for j in stateList if j['state'] == stateDict[i]]
</code></pre>
<p>Finally print it:</p>
<pre><code>print outDict
</code></pre>
</div>
<span class="comment-copy">For <code>state_info = defaultdict(list)</code> is <code>list</code> suppose to be <code>county_list</code>? It throws a <code>TypeError: first argument must be callable or None</code> error otherwise.</span>
<span class="comment-copy">No, it should be <code>list</code> as it is above. The <code>defaultdict</code> will call whatever that first arg is if the key doesn't exist, as in: <code>list()</code> and assign it as the value.</span>
<span class="comment-copy">See the first example: <a href="https://docs.python.org/3/library/collections.html#defaultdict-examples" rel="nofollow noreferrer">docs.python.org/3/library/collections.html#defaultdict-examples</a></span>
<span class="comment-copy">I eventually got this working in my larger code. Unbeknowest to me, I had a forgotten variable called <code>list</code> that kept causing the <code>TypeError</code>.</span>
<span class="comment-copy">There is something off with this solution. Just using the test data in my question, I tried to print (stateInfo) at the bottom and it just produced and empty dictionary.</span>
<span class="comment-copy">Apologies it should have been if 'state' in k</span>
<span class="comment-copy">Please edit your answer to add an explanation of how your code works and how it solves the OP's problem. Many SO posters are newbies and will not understand the code you have posted.</span>
