<div class="post-text" itemprop="text">
<p>I am learning pexpect and regular expressions.
I have two questions:
1. Does child.expect(some text here) actually have to be a regular expression?
2. If anyone could tell my why my script hangs on password entry, it would be greatly appreciated.</p>
<pre><code>import pexpect
import getpass
import sys

try:
    switch = raw_input("Host: ")
    un = raw_input("Username: ")
    pw = getpass.getpass("Password: ")

    child = pexpect.spawn("ssh %s@%s" % (un, switch))
    child.logfile = sys.stdout

    selection = child.expect(['Are you sure you want to continue connecting (yes/no)?','login as:'])

    if selection == 0:
        child.sendline("yes")

    elif selection == 1:
        i = child.expect(['login as:','user@10.0.0.65\'s password:'])
        if i == 0:
            child.sendline(un)
        elif i == 1:
            child.sendline(pw)

    child.expect('Switch#')
    child.sendline("show cdp nei")

except Exception as e:
    print("Failed on login")
    print(e)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://pexpect.readthedocs.io/en/stable/api/pexpect.html#pexpect.spawn.expect" rel="nofollow noreferrer">the docs</a>:</p>
<blockquote>
<p>… The pattern can be a StringType, EOF, a compiled re, or a list of any of those types. Strings will be compiled to re types. …</p>
</blockquote>
<p>So, if you pass a pattern like this:</p>
<pre><code>['Are you sure you want to continue connecting (yes/no)?','login as:']
</code></pre>
<p>… that's a list of two strings, which will both be compiled to regular expressions. So, e.g., you'll have a capturing group containing the single value <code>yes/no</code>, appearing 0 or 1 times, which probably isn't very useful.</p>
<p>If you want to match them as literal strings, the simplest thing to do is probably call <a href="https://docs.python.org/3/library/re.html#re.escape" rel="nofollow noreferrer"><code>re.escape</code></a> on them:</p>
<pre><code>[re.escape('Are you sure you want to continue connecting (yes/no)?'),
 re.escape('login as:')]
</code></pre>
</div>
<span class="comment-copy">You can call method <code>.expect_exact()</code> to pass strings that will not be interpreted as regex patterns. Type <code>pydoc pexpect</code> for all the doc.</span>
<span class="comment-copy">Abarnert, I appreciate the response. Worked like a charm!</span>
