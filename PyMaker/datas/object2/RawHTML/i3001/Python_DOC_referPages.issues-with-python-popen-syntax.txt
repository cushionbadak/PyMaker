<div class="post-text" itemprop="text">
<p>have a small issue with a program I am trying to launch from a Python script via Popen() (I understand Popen() may not be ideal, but I am working with somewhat of a template used in other instances, and want to follow convention).</p>
<p>I am a bit confused, as I can't seem to get the following to run:</p>
<pre><code>root = os.getcwd()

bin = 'my_executable.exe'

bin_fullpath = os.path.join(root,bin)

params = 'Option C -f Module -y -q'

p = subprocess.Popen([bin_fullpath,params])

out = p.communicate()
</code></pre>
<p>The program launches, but exits with error code 1 (I checked with check_call).</p>
<p>However, when I forgo the above method, and simply provide the entire string I need to run, as follows:</p>
<pre><code>subprocess.Popen(r'C:\Users\me\Desktop\path\to\tool\my_executable.exe Option C -f Module -y -q')
</code></pre>
<p>The program executes as expected. Obviously I have something wrong with the sytntax, but I can't figure out what . . .</p>
<p>Any insight would be greatly appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>When you use the "list of arguments" format, each one has to be its own string, as a separate member of the list, like this:</p>
<pre><code>params = ['Option', 'C', '-f', 'Module', '-y', '-q']
p = subprocess.Popen([bin_fullpath, *params])
</code></pre>
<hr/>
<p>When you put them all in a single string, you're telling <code>subprocess</code> they're all one big argument.<sup>1</sup> So, rather than being the rough equivalent of this command line:</p>
<pre><code>C:\Users\me\Desktop\path\to\tool\my_executable.exe Option C -f Module -y -q
</code></pre>
<p>… it's the rough equivalent of this one:</p>
<pre><code>C:\Users\me\Desktop\path\to\tool\my_executable.exe "Option C -f Module -y -q"
</code></pre>
<hr/>
<p>If it's not clear why those are different, consider these examples instead:</p>
<pre><code>fix.exe "My Pictures\picture1.jpg"
fix.exe My Pictures\picture1.jpg
</code></pre>
<p>The first one is fixing one picture, <code>My Pictures\picture1.jpg</code>. The second is fixing two pictures, <code>My</code>, and <code>Pictures\picture1.jpg</code>. </p>
<hr/>
<p>For more details on the <code>args</code> argument, see <a href="https://docs.python.org/3/library/subprocess.html#frequently-used-arguments" rel="nofollow noreferrer">Frequently Used Arguments</a>. Notice the "one big string" version is actually not valid without <code>shell=True</code>—even though it happens to usually work on Windows.</p>
<hr/>
<p><sub>1. Things are a little more complicated than this on Windows, because <code>subprocess</code> actually has to take all of the args and work out how to put them together in a string so that they can be parsed back into the actual separate values the way you asked for them. But never mind that.</sub></p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/11284147/how-to-do-multiple-arguments-with-python-popen">How to do multiple arguments with Python Popen?</a></span>
<span class="comment-copy">Awesome, thanks man. Knew it was something trivial like that. This is what late night coding gets you. Tyvm</span>
