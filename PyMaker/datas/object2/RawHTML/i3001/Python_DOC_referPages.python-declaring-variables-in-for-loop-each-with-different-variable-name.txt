<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/6181935/how-do-you-create-different-variable-names-while-in-a-loop">How do you create different variable names while in a loop?</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<p>I have a code that needs to declare several class attributes as shown below. However, what if I have 100 molecules, would I need to copy and paste the code and manually change the numbers accordingly 100 times? Or is there a way to declare variables with different names according to the for loop counter? For example</p>
<pre><code>For i in range(100):
    self.features_str(i+1)x_a= ...
</code></pre>
<p>A quick explanation on what each function does.
tensorise_smiles returns 3 tensors (in the form of ndarray) 
features_to_listedtuple takes in the tensor and another ndarray and returns one ndarray.</p>
<p>What I have to do is create an attribute for each molecule 3 times, for the atom, bond, and edge features. However, the problem is if there are many molecules, I have to copy and paste the code many times, changing 1x to 2x, 3x, ..., 100x,... and so on. Is there a better way to do this?</p>
<pre><code># Setting up features_d. Features containing SMILES for solvent, ligand, RA
    self.features_d_a = features_d
    # 1,2,3 represents the molecule for the solvent, ligand, RA. x,y,z for atom, bond, edge tensor
    self.features_1x_a, self.features_1y_a, self.features_1z_a = tensorise_smiles(features_d[:, 0])
    self.features_2x_a, self.features_2y_a, self.features_2z_a = tensorise_smiles(features_d[:, 1])
    self.features_3x_a, self.features_3y_a, self.features_3z_a = tensorise_smiles(features_d[:, 2])
    self.features_1x_a = features_to_listedtuple(self.features_1x_a, labels)
    self.features_1y_a = features_to_listedtuple(self.features_1y_a, labels)
    self.features_1z_a = features_to_listedtuple(self.features_1z_a, labels)
    self.features_2x_a = features_to_listedtuple(self.features_2x_a, labels)
    self.features_2y_a = features_to_listedtuple(self.features_2y_a, labels)
    self.features_2z_a = features_to_listedtuple(self.features_2z_a, labels)
    self.features_3x_a = features_to_listedtuple(self.features_3x_a, labels)
    self.features_3y_a = features_to_listedtuple(self.features_3y_a, labels)
    self.features_3z_a = features_to_listedtuple(self.features_3z_a, labels)
</code></pre>
<p>Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#setattr" rel="nofollow noreferrer">setattr</a>.</p>
<pre><code>for i in range(100):
    setattr(self, "features_str{}x_a".format(i), value)
</code></pre>
<p>However, I would consider using a dictionary to store all of the data.  For example:</p>
<pre><code>d = {}
for i in range(100):
    d["{}x_a".format(i)] = value
self.features = d
</code></pre>
<p>This permits you to iterate through all of the features, sort them etc.</p>
</div>
<span class="comment-copy">Are you familiar with dictionaries and collections.namedtuple?  The former is an indispensable part of python that you need to learn to succeed. The latter may help you clean up your code a little.</span>
<span class="comment-copy">Oh I see, thank you for your insights! By the way, if I have to declare variables as variables (and not attributes in a class), is there an analogous method to setattr that I can use)?</span>
