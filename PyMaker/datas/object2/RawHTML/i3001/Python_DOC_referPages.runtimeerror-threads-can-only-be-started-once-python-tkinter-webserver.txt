<div class="post-text" itemprop="text">
<p>I am trying to create a webserver in python which can be started and stopped using a tkinter GUI. In tkinter I have a button which will call start() and a button that will call stop().  Initially everything works fine, the server starts when I click the button and it also stops when I click the stop button. When I try to restart the server again using the start button, I get a runtime error</p>
<p>RuntimeError: threads can only be started once</p>
<p>I believe it has something to do with the fact that I have already initialized threading in my <strong>init</strong>, and I can not figure out how to get this to work.  </p>
<p>I have read through the threading docs multiple times, but I am struggling to understand it entirely.  Any assistance would be greatly appreciated.</p>
<p>Thank you!</p>
<pre><code>import threading
import socketserver
import http.server
import os


class WebServer(object):

    def __init__(self, host, port):
        self.host = host
        self.port = port
        self.handler = http.server.SimpleHTTPRequestHandler
        self.server = socketserver.TCPServer((self.host, self.port), self.handler)
        socketserver.TCPServer.allow_reuse_address = True
        self.server_thread = threading.Thread(target=self.server.serve_forever, name="Server_Thread")
        self.server_thread.setDaemon(True)

    def start(self):
        web_dir = os.path.join(os.path.dirname(__file__), 'www')
        os.chdir(web_dir)
        self.server_thread.start()

    def stop(self):
        os.chdir('..')
        self.server.shutdown()
        self.server.server_close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As the python documentation <a href="https://docs.python.org/3/library/threading.html#threading.Thread.start" rel="nofollow noreferrer">states</a>, the <code>start</code> method of the <code>Thread</code> object can only be called once.</p>
<p>In your case, you can create new instance of the Thread object in the <code>start</code> method:</p>
<pre><code>def start(self):
    web_dir = os.path.join(os.path.dirname(__file__), 'www')
    os.chdir(web_dir)
    self.server_thread = threading.Thread(target=self.server.serve_forever, name="Server_Thread")
    self.server_thread.start()
</code></pre>
<p>In addition you also may clean the reference to the thread in <code>stop</code> method:</p>
<pre><code>self.server_thread = None
</code></pre>
</div>
<span class="comment-copy">Thank you! That makes a lot of sense now.</span>
