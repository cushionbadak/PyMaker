<div class="post-text" itemprop="text">
<p>I am writing some scripts for a bigger machine learning application. To keep it nicely structured, I have some subdirectories for different steps, e.g.</p>
<pre><code>/
/preprocessing (containing preprocess.py)
/training (containing train.py)
/utils (config.py)
</code></pre>
<p>So what I would like to have, is a clean possibility to use code from utils in preprocessing and training modules. However, the problem is that I run the code directly in the subdirectories, e.g.</p>
<pre><code>cd preprocessing
python3 preprocess.py
</code></pre>
<p>So this means that preprocessing is my main module and this cannot see anything that is contained in a higher directory, thus I also cannot import modules form utils. </p>
<p>I know that there would be some possibilities that include changing the PYTHONPATH, but I find this somehow ugly. Everybody using my code would have to do this. So my question is if there is a clean and recommended way of importing code from parent or sibling directories.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use relative imports as it presented in <a href="https://docs.python.org/3/tutorial/modules.html#intra-package-references" rel="nofollow noreferrer">documentation</a>. So you can try something like this in your <code>preprocess</code> module:</p>
<pre><code>from ..utils import config
</code></pre>
</div>
<span class="comment-copy">Then I get: 'ValueError: attempted relative import beyond top-level package'</span>
<span class="comment-copy">The top answer here <a href="https://stackoverflow.com/questions/14132789/relative-imports-for-the-billionth-time" title="relative imports for the billionth time">stackoverflow.com/questions/14132789/â€¦</a> answers the question quite good. Short: When calling python modules as scripts, relative imports does not work because <b>name</b> = "<i>_main</i>". It only works when using python -m my.package.module. Thus, I will switch to deploying my scripts as a package using setuptools.</span>
<span class="comment-copy">Yes, you found a good explanation! If I were you, I would move the running scripts to the top of the project. And in the modules themselves, I would leave only their logic.</span>
<span class="comment-copy">Yes, but than I would have 1000 scripts in the root of the project. I think it is better to install my project using python setup.py install/develop and then just import everything as <code>from myproject.mymodule import bla</code></span>
