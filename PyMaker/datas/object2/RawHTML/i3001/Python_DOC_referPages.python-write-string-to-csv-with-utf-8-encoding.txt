<div class="post-text" itemprop="text">
<p>I have data in the database and I want to export it to CSV file.
The data is in Japanese and for further use, I need it to be encoded in UTF-8</p>
<p>This is my script to get the data and write in the CSV file</p>
<pre><code>import mysql.connector
from mysql.connector import errorcode

import sys
import csv

query = 'SELECT * FROM `images-data`'

try:
    cnx = mysql.connector.connect(user='root', password='1234',
                                 host='127.0.0.1',
                                 database='sotsuken-test-db')
    cur=cnx.cursor()
    cur.execute(query)
    result=cur.fetchall()

    c = csv.writer(open("db-data.csv","w"))
    for row in result:
        c.writerow(row)



except mysql.connector.Error as err:
    if err.errno == errorcode.ER_ACCESS_DENIED_ERROR:
        print("Something is wrong with your user name or password")
    elif err.errno == errorcode.ER_BAD_DB_ERROR:
        print("Database does not exist")
    else:
        print(err)
else:
    cnx.close()
</code></pre>
<p>I can create the CSV file, and the data is exported in UTF-8, but my CSV file's data was like this:</p>
<pre><code>1,b'\xe3\x83\x86\xe3\x82\xb9\xe3\x83\x88\xe3\x81\xa7\xe3\x81\x94\xe3\x81\x8a\xe3\x81\x96\xe3\x81\x84\xe3\x81\xbe\xe3\x81\x99'
</code></pre>
<p>In my research I found that my data was written in byte object (may be I'm wrong here). I need the data to be written in UTF-8 without <code>b''</code></p>
<p>I know that I can use <code>decode("UTF-8")</code> to make it into the string, but I cannot apply that to <code>csv.writerow</code></p>
<p>Can you give me any suggestions?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/csv.html#writer-objects" rel="nofollow noreferrer"><code>csv.writer.writerow</code></a> just takes a list of whatever you've got,<sup>1</sup> calls <code>str</code> on each element, and puts them together into a line of CSV.</p>
<p>So, if what you've got is <code>bytes</code> objects, then it's going to call <code>str</code> on them and get strings like <code>b'\xe3\x83\x86\xe3\x82\xb9\xe3\x83\x88\xe3\x81\xa7\xe3\x81\x94\xe3\x81\x8a\xe3\x81\x96\xe3\x81\x84\xe3\x81\xbe\xe3\x81\x99'</code>.</p>
<p>The solution is to give it strings.</p>
<hr/>
<p>The simplest way to do it is by decoding those <code>bytes</code>:</p>
<blockquote>
<p>I know that I can use <code>decode("UTF-8")</code> to make it into the string, but I cannot apply that to <code>csv.writerow</code></p>
</blockquote>
<p>Sure you can. I don't know what your columns are, so I'll make up my own example:</p>
<pre><code>for image_id, image_name in result:
    c.writerow([image_id, image_name.decode('UTF-8')])
</code></pre>
<p>That's really all there is to it.</p>
<hr/>
<p>What if your code has absolutely no idea what the columns in the database are? Well, in that case, you have to get a little bit clever. As long as we know that all of the <code>bytes</code> columns are really Unicode text in disguise as UTF-8, you can just switch on the type:</p>
<pre><code>for row in result:
    textrow = [col.decode('UTF-8') if isinstance(col, bytes) else col for col in row]
    csv.writerow(textrow)
</code></pre>
<p>That's a bit ugly, but reading <code>*</code> from a database where you have no idea what the columns are is inherently an ugly problem.</p>
<hr/>
<p>However, there's probably a much better solution.</p>
<p>MySQL Connector/Python turns all <code>CHAR</code>, <code>TEXT</code>, and similar columns into Unicode <code>str</code> values by default.<sup>2</sup> But <code>BINARY</code>, <code>BLOB</code>, and similar columns are always returned as <code>bytes</code>.</p>
<p>If this column is meant to represent Unicode text, set it to a text type instead of a binary one in the database. Then you won't have a problem in the first place—in this script, or in any other tools.</p>
<hr/>
<p><sub>1. Actually, it appears to be illegal to call it with a list of anything but strings and numbers, according to the docs. But practically, it takes anything at all; it just doesn't do anything very <em>useful</em> with any types besides strings and numbers…</sub></p>
<p><sub>2. That is, unless you explicitly pass it a <a href="https://dev.mysql.com/doc/connector-python/en/connector-python-connectargs.html" rel="nofollow noreferrer"><code>use_unicode=False</code></a> in the <code>connect</code> call or similarly set it elsewhere.</sub></p>
</div>
<span class="comment-copy">why not use csv.DictWriter command, you decode ('UTF-8') your individual cell values and using DictWriter you could write to specific columns in your csv file</span>
<span class="comment-copy">Thank you for a nice, consize, well written question following about all guidelines for new questions/on topic/mvce</span>
<span class="comment-copy">@SuryaTej How would <code>DictWriter</code> solve this any better than <code>writer</code>? Sure, it's nicer for <i>other</i> reasons, if you know what your columns are, but it doesn't change the fact that some of those columns are <code>bytes</code>.</span>
<span class="comment-copy">As a side note, you don't actually need to do <code>fetchall</code> here. You can just iterate <code>for row in cur:</code> and the cursor should give you one row at a time, buffering up as many rows in memory as it thinks would be most efficient, instead of reading them all into memory no matter what. Also, it's usually a bad idea to not close files you opened for writing, either with a <code>close()</code> call or a <code>with</code> statement.</span>
