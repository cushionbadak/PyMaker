<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/6976658/most-pythonic-way-of-assigning-keyword-arguments-using-a-variable-as-keyword">Most pythonic way of assigning keyword arguments using a variable as keyword?</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I spent some time to figure that out, so I post this Q&amp;A.
Let's say you have function <code>def my_func(group)</code> which takes an <strong>argument</strong> <em>group</em> which will be used as <strong>positional argument</strong> in next function: <strong><code>def set_permission(group_user=None, group_admin=None)</code></strong>. So:</p>
<pre><code>group = 'group_user'
my_func(group):
  if group == 'group_user':
    set_permission(group_user='write')
  if group == 'group_admin':
    set_permission(group_admin='write')
</code></pre>
<p>but what if <code>group</code> can be 20 combinations?</p>
<p>And more 'real' case from <em>Django</em>:</p>
<pre><code>from models import User, Project
import mommy

def create_instance_of_repetable_model(model, model_field):
  if model == User:
    mommy.make(User, user_perm='write')
  if model == Project:
    mommy.make(Project, project_perm='write')
  if model == Project
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As found in <a href="https://docs.python.org/3/glossary.html#term-argument" rel="nofollow noreferrer">official python docs</a>:</p>
<pre><code>group = 'group_user'
def my_func(group):
  set_permission(**{group: 'write'})  # it works like set_permission(group_user='write')
  print_permission(group)

my_func(group)  #  prints -&gt; 'group_user': 'write'

group = 'group_admin'
my_func(group)  # prints -&gt; 'group_admin': 'write'
</code></pre>
<p>and 'real life'</p>
<pre><code>from models import User, Project
import mommy

def create_instance_of_repetable_model(model, model_field):
  mommy.make(model, **{model_field: 'write'})
</code></pre>
</div>
<span class="comment-copy">That's not a positional argument, that's a keyword argumentâ€”the exact opposite kind.</span>
<span class="comment-copy">@abarnert Yes, you're right. I forgot it's more specific case, I'll edit in a moment.</span>
<span class="comment-copy">If you're writing the function yourself, you should give it the API that you actually want to call, not an API that's painful to call so you have to hack your way around it.</span>
<span class="comment-copy">This is a bad code smell.</span>
