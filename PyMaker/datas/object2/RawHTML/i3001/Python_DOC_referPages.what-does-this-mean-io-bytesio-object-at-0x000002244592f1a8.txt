<div class="post-text" itemprop="text">
<p>I have a url:</p>
<pre><code>https://enterpriseefiling.fcc.gov/dataentry/api/download/dbfile/Current_LMS_Dump.zip
</code></pre>
<p>Let </p>
<pre><code>u1 = ['https://enterpriseefiling.fcc.gov/dataentry/api/download/dbfile/Current_LMS_Dump.zip']
</code></pre>
<p>I run the following code in my python interpreter</p>
<pre><code>import requests, io
r = requests.get(u1, stream=True)
io.BytesIO(r.content)
</code></pre>
<p>I get the following response</p>
<pre><code>&lt;_io.BytesIO object at 0x000002244592F1A8&gt;
</code></pre>
<p>My question is: what does this mean? Where is 0x000002244592F1A8? What does 0x000002244592F1A8 refer to?</p>
</div>
<div class="post-text" itemprop="text">
<p>When python needs to print out an object, and the object doesn't otherwise have a built-in method that tells the interpreter <em>how</em> to print it out (for example, <code>requests.Response</code> and python's built-in <code>list</code> and <code>dict</code> types <em>do</em> have this sort of instruction), python uses this format:</p>
<pre><code>&lt;[objecttype] object at [pointer]&gt;
</code></pre>
<p>where <code>pointer</code> is literally a pointer to the object's location in memory. That's what you see here: when you do <code>io.BytesIO(r.content)</code> in your interpreter, you create an <code>io.BytesIO</code> object. </p>
<p>A different method tends to get called when, on the interpreter, you do</p>
<pre><code>&gt;&gt;&gt; print(&lt;object&gt;)
</code></pre>
<p>rather than just</p>
<pre><code>&gt;&gt;&gt; &lt;object&gt;
</code></pre>
<p>and the <code>io.BytesIO</code> class certainly has methods you can use for more useful output, if you look at its documentation. Try assigning it to a variable instead of printing it:</p>
<pre><code>b = io.BytesIO(r.content)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>What does 0x000002244592F1A8 refer to?</p>
</blockquote>
<p>It refers to the <em>identity</em> of the object. The number is an implementation detail (in CPython it happens to be the address of the object in memory, the same number returned by the <code>id</code> builtin), but what you can count on is that the number will be different for every <code>BytesIO</code> object currently extant in the process.</p>
<p>That kind of information is included in the <code>__repr__</code> of many objects because it can come useful when debugging, allowing one to distinguish different objects that might have identical content.</p>
</div>
<div class="post-text" itemprop="text">
<p>My understanding is that <code>0x000002244592F1A8</code> here is the formatted <a href="https://docs.python.org/3/library/functions.html#id" rel="nofollow noreferrer"><code>id</code></a> of the object in memory. I say "formatted", because, if you do <code>id()</code> on the same object, the representation will be a little different (it will be formatted as an <code>int</code> or a <code>long</code> instead of a pointer address:</p>
<pre><code>In [1]: import io

In [2]: obj = io.BytesIO()

In [3]: obj
Out[3]: &lt;_io.BytesIO at 0x10da1ca70&gt;

In [4]: id(obj)
Out[4]: 4523674224
</code></pre>
<p>To convert the <code>id()</code> to the format you see, you can do something like this (stolen from <a href="https://stackoverflow.com/a/26285749/3642398">this post</a>):</p>
<pre><code>In [5]: format(id(obj), '#010x' if sys.maxsize.bit_length() &lt;= 32 else '#18x')
Out[5]: '       0x10da1ca70'
</code></pre>
<p>This ^^ is not particularly useful, but it just shows you how <code>id()</code> lines up with what you are seeing. </p>
<p>The reason you are seeing it is just that it is displayed as part of the default <code>__repr__()</code> for the <code>BytesIO</code> object. </p>
</div>
<span class="comment-copy">It's the internal ID of the BytesIO object, which is automatically returned by the interpreter when you reference an object on the command line. Why are you doing that?</span>
<span class="comment-copy">@DanielRoseman I am just trying to understand what these functions return</span>
<span class="comment-copy">Thanks! So the pointer here is a pointer formatted as a hexidecimal and it identifies the actual physical memory register in the computer's hardware?</span>
<span class="comment-copy">@RafaelC please see the rest of the original post, plus the SO link I posted. I am currently editing the post to provide more detail.</span>
