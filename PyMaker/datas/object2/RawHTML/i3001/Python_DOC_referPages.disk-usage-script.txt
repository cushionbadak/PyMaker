<div class="post-text" itemprop="text">
<p>Somewhere things stopped working.  The intent was to show current disk usage if no argument given, show the directory's usage if provided as an argument, and show all subdirectories' disk usage if an argument called --all was given.  Here is what I got so far. For some reason it fails now when supplying the <code>"-d"</code> for directory.</p>
<pre><code>#!/usr/bin/env python

import os 
import sys 
import subprocess 
import getopt 
from humanize import naturalsize

def get_size(start_path = '.'):
    total_size = 0
    for dirpath, dirnames, filenames in os.walk(start_path):
        for f in filenames:
            fp = os.path.join(dirpath, f)
            total_size += os.path.getsize(fp)
    return total_size

def get_immediate_subdirectories(a_dir):
    return [name for name in os.listdir(a_dir)
            if os.path.isdir(os.path.join(a_dir, name))]

def version():
    print ("Version: 1.0")

def usage():
    print ("Usage: disk_usage.py [-a|--all][-n|--ncdu][-v|--version][directory name]")

def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], "adhnv", ["all","directory","help","ncdu","version",])
    except getopt.GetoptError as err:
        # print help information and exit:
        print(err)  # will print something like "option -a not recognized"
        usage()
        sys.exit(2)
    for o, a in opts:
        if o in ("-a", "--all"):
            for subdir in get_immediate_subdirectories('.'):
                print ("%s\t\t %s" % (naturalsize(get_size(subdir)),subdir))
                sys.exit()
        elif o in ("-d", "--directory"):
            print (naturalsize(get_size(start_path=sys.argv[1:])))
        elif o in ("-v", "--version"):
            print (version())
            sys.exit()
        elif o in ("-h", "--help"):
            usage()
            sys.exit()
        elif o in ("-n", "--ncdu"):
            os.system('ncdu')
            sys.exit()
        else:
            print (usage())


main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I see a couple of problems with your usage of <code>getopt</code>. One (which sounds like you've figured-out for yourself) is that you're giving the wrong thing to <code>get_size()</code> by passing it <code>start_path=sys.argv[1:]</code> which assign <code>start_path</code> to a <code>list</code> of all the command arguments after the first.</p>
<p>The second issue is you're not defining the second and third arguments passed to <code>getopt()</code> properly. Quoting from the <a href="https://pymotw.com/3/getopt/index.html" rel="nofollow noreferrer">PyMOTW3</a>:</p>
<blockquote>
<p>The second argument is the option definition string for single character options. <strong>If one of the options requires an argument, its letter is followed by a colon.</strong> </p>
</blockquote>
<p>(emphasis mine)</p>
<p>This means that in order to accept a value along with the <code>-d</code> option, you'd need to use <code>"ad:hnv"</code> instead of the <code>"adhnv"</code> you've got. </p>
<p>Similarly, for the <code>--directory</code> option in the list of long-style options:</p>
<blockquote>
<p>The third argument, if used, should be a sequence of the long-style option names. Long style options can be more than a single character, such as --noarg or --witharg. The option names in the sequence should not include the “--” prefix. <strong>If any long option requires an argument, its name should have a suffix of “=”.</strong></p>
</blockquote>
<p>To support it there too requires you to pass <code>["all", "directory=", "help", "ncdu", "version"]</code>.</p>
<p>Unfortunately <code>getopt</code> doesn't support having an optional option argument. The reason is likely because it makes parsing ambiguous: For example, if <code>-a</code> takes an optional argument and <code>-b</code> is another option entirely, it unclear how interpret <code>-ab</code>.</p>
<p>If you can live with that limitation, the following incorporates changes to address the above issues:</p>
<pre><code>import os
import sys
import subprocess
import getopt
from humanize import naturalsize

def get_size(start_path='.'):
    # Might was to check validity of path here...
    #if not (os.path.exists(start_path) and os.path.isdir(start_path)):
    #    raise ValueError('Invalid path argument: {!r}'.format(start_path))
    total_size = 0
    for dirpath, dirnames, filenames in os.walk(start_path):
        for f in filenames:
            fp = os.path.join(dirpath, f)
            total_size += os.path.getsize(fp)
    return total_size

def get_immediate_subdirectories(a_dir):
    return [name for name in os.listdir(a_dir)
            if os.path.isdir(os.path.join(a_dir, name))]

def version():
    print("Version: 1.0")

def usage():
    print("Usage: disk_usage.py [-a|--all][-n|--ncdu][-v|--version][directory name]")

def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], "ad:hnv",
                            ["all", "directory=", "help", "ncdu", "version",])
    except getopt.GetoptError as err:
        print(err)
        usage()
        if __name__ == '__main__':
            return 2  # Unit test.
        else:
            sys.exit(2)

    for opt, arg in opts:
        if opt in ("-a", "--all"):
            for subdir in get_immediate_subdirectories('.'):
                print("%s\t\t %s" % (naturalsize(get_size(subdir)), subdir))
                sys.exit()
        elif opt in ("-d", "--directory"):
            print(naturalsize(get_size(start_path=arg)))
        elif opt in ("-v", "--version"):
            print(version())
            sys.exit()
        elif opt in ("-h", "--help"):
            usage()
            sys.exit()
        elif opt in ("-n", "--ncdu"):
            os.system('ncdu')
            sys.exit()
        else:
            print(usage())
    else:
        print(usage())


if __name__ == '__main__':
    # Unit test.
    sys.argv = ['disk_usage.py']  # no option given
    main()
    sys.argv = 'disk_usage.py -d.'.split()  # short opt
    main()
    sys.argv = 'disk_usage.py -dsome_folder'.split()  # short opt
    main()
    sys.argv = 'disk_usage.py -d some_folder'.split()  # short opt
    main()
    sys.argv = 'disk_usage.py --directory some_folder'.split()  # long opt
    main()
    sys.argv = 'disk_usage.py -d'.split()  # Missing argument error
    main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think I got it now.  Line 42 included sys.argv[1:] which returned a list.  It should actually be sys.argv[2] to reference the directory after supplying the -d option.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are two problems here.</p>
<hr/>
<p>The first problem is that you're using <code>getopt</code> wrong:</p>
<pre><code>opts, args = getopt.getopt(sys.argv[1:], "adhnv", ["all","directory","help","ncdu","version",])
</code></pre>
<p>This returns a list of options <code>opts</code>, and a list of <code>args</code> with the options filtered out. But you're continuing to use <code>sys.argv</code> instead of <code>args</code>:</p>
<pre><code>print (naturalsize(get_size(start_path=sys.argv[1:])))
</code></pre>
<p>In an invocation like <code>myprogram -d spam</code>, <code>sys.argv[1:]</code> is going to be <code>['-d', 'spam']</code>. But you don't want the <code>-d</code>. That's the whole reason you called <code>getopts</code> in the first place. So, use <code>args</code> here, not <code>sys.argv</code>.</p>
<hr/>
<p>The second problem is that you're taking a slice, <code>sys.argv[1:]</code>, but treating it as if it were a single value, rather than a list of values.</p>
<p>If you want to allow multiple directories to be passed with <code>-d</code> and to work on all of them, you need a <code>for arg in …:</code> loop over the slice.</p>
<p>If you want just a single directory, then you need to just index the list, like <code>[1]</code>, not <code>[1:]</code>. Although, if you want that, you probably don't want <code>-d</code> to be a boolean flag and the directory to be an arg; you want <code>-d</code> to be a flag with the directory as its value.</p>
<hr/>
<p>More generally, you probably shouldn't be using <code>getopt</code> here in the first place. As <a href="https://docs.python.org/3/library/getopt.html" rel="nofollow noreferrer">the docs</a> say:</p>
<blockquote>
<p>Note The <code>getopt</code> module is a parser for command line options whose API is designed to be familiar to users of the C <code>getopt()</code> function. Users who are unfamiliar with the C <code>getopt()</code> function or who would like to write less code and get better help and error messages should consider using the <a href="https://docs.python.org/3/library/argparse.html#module-argparse" rel="nofollow noreferrer"><code>argparse</code></a> module instead.</p>
</blockquote>
<p>If you're a <code>getopt</code> wizard, then sure, use <code>getopt</code> for simple projects instead of learning something new, even if it's better. But for anyone else, there is really no good reason to learn <code>getopt</code> in the first place, much less to learn how to debug all the funky corners of it. <code>argparse</code> is just plain better in every way. And if you don't like <code>argparse</code>, there are half a dozen alternatives on PyPI.</p>
</div>
<span class="comment-copy"><code>For some reason it fails now</code> and how exactly does it fail? Error messages? Expected vs actual behavior? What changed? We arent just going to dig through your code and blindly fix an issue that we don't even know what is.</span>
<span class="comment-copy">As a side note: Are you writing this script for learning purposes, or because you need a tool that can do those things? Because tools like <code>df</code> and <code>du</code> already exist for what you want unless you're on Windows, and if you are… I'm pretty sure there's something even if I don't know what it is (maybe part of Mark Russinovich's sysinternals stuff?). But if you're doing this to learn how to use <code>walk</code> and <code>listdir</code> and <code>stat</code> and so on, then it's a perfectly reasonable project (although I'd suggest learning <code>scandir</code>—and also <code>argparse</code> instead of <code>getopt</code>).</span>
<span class="comment-copy">Yeah I'm learning to code.  I did like ncdu, so I included it in the options.  I wanted something to instantly tell me the recursive size of a directory with one command but also an option to do it for all subdirectories.  The error I get is: the option -d I get a TypeError coercing to Unicode need string or buffer list found.  With no option given, it returns nothing at all instead of the current directory's recursive size.</span>
<span class="comment-copy">The other options seem to work, i believe</span>
<span class="comment-copy">can anyone give me an example of using argparse instead?</span>
<span class="comment-copy">I'm pretty rusty on the Python <code>getopt</code> bindings, but I'm pretty sure his options as specified are all just boolean flags, and the directory name is going to end up in args, not as the arg to <code>-d</code>.</span>
<span class="comment-copy">@abarnert: You're right—I'm not very unfamiliar with <code>getopt</code> either—so after learning more about it, I have updated / expand my answer according.</span>
<span class="comment-copy">I'm not really sure what his intended design is. The OP's existing flags allow something like <code>mydu.py -d dir1 dir2 dir3</code> to scan multiple directories, which seems useful (he just needs to get them out of <code>args</code> instead of <code>sys.argv</code> or <code>opts</code>, and of course he needs to iterate the list rather than treat it like a string). Your change doesn't allow multiple directories like that, but does allow multiple operations, like <code>-ddir1 -a</code>. I'm not sure which one is more useful, or more in line with the OP's intentions. But now we've got an answer explaining each option, so I guess he can choose?</span>
<span class="comment-copy">Does anyone know why if an argument isn't given it doesn't display usage information?</span>
<span class="comment-copy">user192085: It's because the <code>for opt, arg in opts:</code> loop doesn't execute when there aren't any arguments. I've modified my answer by adding an <code>else:</code> clause to the loop so it will print the usage information when that's case (and added something to the unit testing portion for that case.</span>
<span class="comment-copy">No, that's still wrong. I mean, it'll work, by accident, sometimes, but it's not what you want to do. Don't use <code>sys.argv</code> after processing it with <code>getopt</code>, use the values returned by <code>getopt</code>.</span>
