<div class="post-text" itemprop="text">
<pre><code>import itertools,math
from functools import reduce
import operator
b=[(1, 2, 9), (1, 3, 8), (1, 4, 7), (1, 5, 6), (2, 3, 7), (2, 4, 6), (3, 4, 5)]
c= list(reduce(lambda x1,x2 : (float(x1)%math.sqrt(x1) and float(x2)%math.sqrt(x2)) , itertools.chain.from_iterable(b) ))
print(c)
</code></pre>
<p>In above code I am getting this error:</p>
<pre><code>ZeroDivisionError: float modulo
</code></pre>
<p>My Expected output is:</p>
<pre><code>[(1,2,9) ,(1,4,7)]
</code></pre>
<p>Here I want at least two perfect square elements from <code>b</code>. </p>
<p>In other words, I want <code>c</code> to be a list of each tuple in <code>b</code> that contains at least two perfect squares.</p>
</div>
<div class="post-text" itemprop="text">
<p>We can solve this task by testing each item in each tuple and counting how many of those items are perfect squares. To determine if a number is a perfect square we use a helper function, <code>is_square</code>. To count the perfect squares we can use the <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum</code></a> built-in.</p>
<pre><code>from math import sqrt

def is_square(n):
    r = int(sqrt(n))
    return r * r == n

b = [(1, 2, 9), (1, 3, 8), (1, 4, 7), (1, 5, 6), (2, 3, 7), (2, 4, 6), (3, 4, 5)]

c = [t for t in b if sum(is_square(u) for u in t) &gt; 1]
print(c)
</code></pre>
<p><strong>output</strong></p>
<pre><code>[(1, 2, 9), (1, 4, 7)]
</code></pre>
<p><code>is_square(u)</code> returns <code>True</code> if <code>u</code> is a perfect square, and <code>False</code> if it's not. But <code>True</code> has a numeric value of 1, and <code>False</code> has a numeric value of 0. So <code>sum(is_square(u) for u in t)</code> adds up how many numbers in each tuple <code>t</code> are perfect squares.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could count the perfect squares with a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter()</code></a>, and retrieve the tuples that have atleast 2 perfect squares:</p>
<pre><code>from math import sqrt
from collections import Counter

b = [(1, 2, 9), (1, 2, 9), (1, 3, 8), (1, 4, 7), (1, 5, 6), (2, 3, 7), (2, 4, 6), (3, 4, 5)]

def perfect_square(n):
    return round(sqrt(n)) ** 2 == n

counts = Counter()
for i, tup in enumerate(b):
    for number in tup:
        if perfect_square(number):
            counts[i, tup] += 1

print([k for (_, k), v in counts.items() if v &gt;= 2])
</code></pre>
<p>Which Outputs:</p>
<pre><code>[(1, 2, 9), (1, 4, 7)]
</code></pre>
<p><strong>Note:</strong> The above <code>Counter()</code> can also be written as:</p>
<pre><code>counts = Counter((i, tup) for i, tup in enumerate(b) for number in tup if perfect_square(number))
</code></pre>
<p>But this becomes hard to read. </p>
</div>
<span class="comment-copy">What are you trying to do?</span>
<span class="comment-copy">What is the expected output of that code?</span>
<span class="comment-copy">@NisheetPatel Why not put that in the question?</span>
<span class="comment-copy">@NisheetPatel What does (1,2,9) and (1,4,7) have to do with perfect squares? Correct me if I am wrong, but perfect squares are a product of two equal integers: 1x1=1, 2x2=4, 3x3=9,...</span>
<span class="comment-copy">Ok! Give me a minute or two...</span>
<span class="comment-copy">This might give surprising results if the input has repeated values, e.g. <code>b = [(1, 5, 6), (1, 5, 6)]</code>. I wonder if you could do something with <code>enumerate</code> so you could keep tuples distinct in the counter...</span>
<span class="comment-copy">@Kevin Well spotted, didnt consider that edge case.</span>
<span class="comment-copy">Looking good, now :-)</span>
