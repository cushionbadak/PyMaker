<div class="post-text" itemprop="text">
<p>I wrote some code to create a list of the first day of the month for every day between two date ranges. Can you think of a better way to do this? </p>
<pre><code>import datetime
end_date= datetime.datetime.strptime('2018-03-28', "%Y-%m-%d").date()
start_date= datetime.datetime.strptime('2017-10-25', "%Y-%m-%d").date()
print(start_date)
print(start_date + datetime.timedelta(days=1))
mylist = []
checking_date = start_date
print(checking_date + datetime.timedelta(days=1))
while str(checking_date) &lt; str(end_date):
    if checking_date != start_date:
        mylist.append(checking_date)
    month = str(checking_date).split('-')[1]
    new_date = checking_date + datetime.timedelta(days=20)
    possible_new_month = str(new_date).split('-')[1]
    if possible_new_month == month:
        new_date = new_date + datetime.timedelta(days=20)
    new_year = str(new_date).split('-')[0]
    new_month = str(new_date).split('-')[1]
    checking_date_format = "{0}-{1}-01".format(new_year,new_month)
    checking_date = datetime.datetime.strptime(checking_date_format, "%Y-%m-%d").date()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The calendar module provides you with the <a href="https://docs.python.org/3.7/library/calendar.html#calendar.monthrange" rel="nofollow noreferrer"><code>monthrange</code></a> method, which makes it easy and efficient to do this with <a href="https://docs.python.org/3/library/datetime.html#timedelta-objects" rel="nofollow noreferrer"><code>timedelta</code></a> objects</p>
<pre><code>import datetime
import calendar

end_date= datetime.date(2018, 03, 28)
start_date= datetime.date(2017, 10, 25)

# include start_date if it is the first
firsts = [start_date] if start_date.day == 1 else []

# normalize start and end date to be the first of the month
start_date = start_date.replace(day=1)
end_date = end_date.replace(day=1)

# inclusive to the last month 
while start_date &lt;= end_date:
    # add the number of days in the month for this month/year
    start_date += datetime.timedelta(calendar.monthrange(start_date.year, start_date.month)[1])
    firsts.append(start_date)
</code></pre>
<p>Which gives you the following list of firsts:</p>
<pre><code>[datetime.date(2017, 11, 1), datetime.date(2017, 12, 1), datetime.date(2018, 1, 1), datetime.date(2018, 2, 1), datetime.date(2018, 3, 1)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It would be easier to use <code>dateutil</code> modules <a href="https://dateutil.readthedocs.io/en/stable/examples.html#rrule-examples" rel="nofollow noreferrer"><code>rrule</code></a> submodule for any kind of recurrence of date/time. You can install it by doing <code>pip install python-dateutil</code></p>
<pre><code>&gt;&gt;&gt; from dateutil import rrule, parser
&gt;&gt;&gt; start = parser.parse('Jan 10 2017')
&gt;&gt;&gt; end   = parser.parse('Mar 5 2018')
&gt;&gt;&gt; list(rrule.rrule(rrule.MONTHLY, bymonthday=1, dtstart=start, until=end))
[datetime.datetime(2017, 2, 1, 0, 0), datetime.datetime(2017, 3, 1, 0, 0), datetime.datetime(2017, 4, 1, 0, 0), datetime.datetime(2017, 5, 1, 0, 0), datetime.datetime(2017, 6, 1, 0, 0), datetime.datetime(2017, 7, 1, 0, 0), datetime.datetime(2017, 8, 1, 0, 0), datetime.datetime(2017, 9, 1, 0, 0), datetime.datetime(2017, 10, 1, 0, 0), datetime.datetime(2017, 11, 1, 0, 0), datetime.datetime(2017, 12, 1, 0, 0), datetime.datetime(2018, 1, 1, 0, 0), datetime.datetime(2018, 2, 1, 0, 0), datetime.datetime(2018, 3, 1, 0, 0)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's much easier to reason about month-arithmetic if you convert the year and month to a single number, with <code>years * 12 + (month - 1)</code>; this can be converted back to a year and month pair by a floor division and modulus operation. For example, 2017-10 (October) is 24213 months since the year zero:</p>
<pre><code>&gt;&gt;&gt; 2017 * 12 + (10 - 1)
24213
</code></pre>
<p>You can trivially add to or remove a number of months from that figure. You can get the year out again by floor division, and the month is found with <code>%</code> modulus and adding back <code>1</code>:</p>
<pre><code>&gt;&gt;&gt; 24213 // 12  # year
2017
&gt;&gt;&gt; (24213 % 12) + 1  # month
10
</code></pre>
<p>With this in mind, you can then use a <code>range()</code> to generate any number of months:</p>
<pre><code>from datetime import date

def months(start_date, end_date, day=1):
    """Produce a date for every month from start until end"""
    start = start_date.year * 12 + (start_date.month - 1)
    if start_date.day &gt; day:
        # already in this month, so start counting at the next
        start += 1
    end = end_date.year * 12 + (end_date.month - 1)
    if end_date.day &gt; day:
        # end date is past the reference day, include the reference
        # date in the output
        end += 1
    # generate the months, just a range from start to end
    for ordinal in range(start, end):
        yield date(ordinal // 12, (ordinal % 12) + 1, day)
</code></pre>
<p>The above is a generator function that yields consecutive months; call <code>list()</code> on it if you need to have the complete sequence:</p>
<pre><code>&gt;&gt;&gt; start_date = date(2017, 10, 25)
&gt;&gt;&gt; end_date = date(2018, 3, 28)
&gt;&gt;&gt; list(months(start_date, end_date))
[datetime.date(2017, 11, 1), datetime.date(2017, 12, 1), datetime.date(2018, 1, 1), datetime.date(2018, 2, 1), datetime.date(2018, 3, 1)]
</code></pre>
<p>Note that at no point do you need to convert dates to strings! You can trivially get the month value from the instance by using the <code>.month</code> attribute.</p>
<p>To make a comparison, I've converted the other two solutions to be generators too:</p>
<pre><code>from calendar import monthrange
from datetime import timedelta
from dateutil import rrule

def andray_timedelta_one(start_date, end_date):
    delta = end_date - start_date
    first_days_of_month = []
    for i in range(delta.days + 1):
        d = start_date + timedelta(i)
        if d.day == 1:
            yield d

def matthew_timedelta_monthrange(start_date, end_date):
    if start_date.day == 1:
        yield start_date

    start_date = start_date.replace(day=1)

    while start_date &lt;= end_date:
        # add the number of days in the month for this month/year
        try:
            start_date += timedelta(monthrange(start_date.year, start_date.month)[1])
            yield start_date
        except OverflowError:
            # trying to add to close-to-date.max would raise this exception
            return

def sunitha_rrule(start_date, end_date):
    # already an iterable
    return rrule.rrule(rrule.MONTHLY, bymonthday=1, dtstart=start_date, until=end_date)

# for completion's sake, I renamed mine to martijn_months
</code></pre>
<p>That way their performance can be compared fairly, and we can use a <code>deque(..., maxlen=0)</code> trick to quickly consume their output without requiring huge amounts of memory. We can then run each of the functions over the range <code>date.min</code> through to <code>date.max</code>, the maximum possible range of dates; that's nearly 120 thousand date objects to produce:</p>
<pre><code>&gt;&gt;&gt; sum(1 for _ in months(datetime.date.min, datetime.date.max))
119988
</code></pre>
<p>These are the results:</p>
<pre><code>&gt;&gt;&gt; from timeit import Timer
&gt;&gt;&gt; from collections import deque
&gt;&gt;&gt; bootstrap = 'from __main__ import date, deque, {} as test'
&gt;&gt;&gt; test = 'deque(test(date.min, date.max), maxlen=0)'
&gt;&gt;&gt; for f in (
...         andray_timedelta_one,
...         sunitha_rrule,
...         matthew_timedelta_monthrange,
...         martijn_months):
...     loop_count, total_time = Timer(test, bootstrap.format(f.__name__)).autorange()
...     print(f'{f.__name__:&lt;30}: {total_time/loop_count*1000:.5f}ms')
...
andray_timedelta_one          : 2001.27048ms
sunitha_rrule                 : 1517.70081ms
matthew_timedelta_monthrange  : 154.68727ms
martijn_months                : 38.86803ms
</code></pre>
<p>As you can see, my approach is orders of magnitude faster.</p>
<ul>
<li>Andray's approach wastes a huge amount of time creating every date in the calendar, adding one day at a time. </li>
<li>The <code>rrule</code> approach Sunitha picked is nice and concise, but the function has to account for much more complex date arithmetic, and so this very simple case is not optimised. This makes <code>rrule()</code> <em>slow</em>!</li>
<li>Matthew is a lot more efficient, but the calculations that <code>calendar.monthrange()</code> executes are still overkill for a simple plus-one operation on a year-month combination. We don't need to know if the current month has 31, 30, 29 or 28 days to make this calculation!</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>The <code>datetime</code> class support arithmetic operations (you can do <code>+</code>, <code>-</code>, etc.). If you combine it with <code>timedelta</code>, you can <strong>get all days</strong> between <code>start_date</code> and <code>end_date</code>. Then searching for first day of month is easy:</p>
<pre><code>import datetime
start_date= datetime.datetime.strptime('2017-10-25', "%Y-%m-%d").date()
end_date= datetime.datetime.strptime('2018-03-28', "%Y-%m-%d").date()

delta = end_date - start_date

first_days_of_month = []
for i in range(delta.days + 1):
    d = start_date + datetime.timedelta(i)
    if d.day == 1:
        first_days_of_month.append(d)

print('start date =', start_date)
print('end date =', end_date)
for d in first_days_of_month:
    print(d, end=' ')
print()
</code></pre>
<p>Prints:</p>
<pre><code>start date = 2017-10-25
end date = 2018-03-28
2017-11-01 2017-12-01 2018-01-01 2018-02-01 2018-03-01 
</code></pre>
</div>
<span class="comment-copy">So what's the expected output? November 2017, December 2017, January 2018, February 2018, and March 2018?</span>
<span class="comment-copy">Nice effort, but not that efficient still. We don't need to calculate the number of days in a month just to increment the year-month counter. See my answer for comparative timings, this is about 3-4 times slower.</span>
<span class="comment-copy">Your solution is totally fine by me @Martijn. I think this alternative is acceptably fast and I find it easier to grok personally. I also posted this as an alternative to the unacceptably slow iterate every day approach.</span>
<span class="comment-copy">Small but perhaps important difference: you produce <code>datetime</code> objects, not <code>date</code>s.</span>
<span class="comment-copy">Also, while nice and compact, <code>rrule()</code> is slow for this case as it has to account for much more complex recurrence rules.</span>
<span class="comment-copy">I personally would prefer to reuse something from a existing well maintained module before writing my own code for maintainability reasons</span>
<span class="comment-copy">This is <i>hugely</i> inefficient, executing 30 times more work than is needed, just to add a month to a date.</span>
<span class="comment-copy">@MartijnPieters OPs question wasn't about efficiency, it was about getting an answer that he will understand. If this will be a bottleneck in his design, the problem will be somewhere else.</span>
<span class="comment-copy">Sorry, but answers here need to take into account that they'll be widely copied and pasted. My answer is no more difficult to understand but also doesn't create <code>date()</code> objects for every single day in the month. That's just a waste of computer cycles and memory.</span>
<span class="comment-copy">@MartijnPieters That's point of view...I think your answer is harder to understand, but I don't downvote you. What for? Lets op decide, what answer will chose. I could edit my answer and write that this will create every day between start_date and end_date, but that's just detail.</span>
<span class="comment-copy">@MatthewStory Yes, I see. I didn't know about <code>calendar.monthrange</code>, so today I learned new thing. thanks. I upvoted your answer :)</span>
