<div class="post-text" itemprop="text">
<p>I am trying to take air pressure readings and plot them with their last 2 digits showing. However, when I use modulo:  </p>
<pre><code>--&gt; x = 1004
--&gt; x % 100
--&gt; 4
</code></pre>
<p>This just generates 4.
How can I display this to show 04 instead of 4? </p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>If you need it as an int or a float, I don't think this is possible. If it's only for display purposes, convert it to a string and take the last 2 characters:</p>
<pre><code>x = 1004

&gt;&gt;&gt; str(x)[-2:]
'04'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try the following:
<code>str(x%100).zfill(2)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>The shortest way to do this is <code>'%02d' % (x % 100)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>If you just print out a number, it prints it out in its default format. For the number <code>2</code>, that's obviously going to be <code>2</code>, not <code>02</code>.</p>
<p>If you want to specify a custom format, you need to use some form of string formatting. Python has a few ways to do it.</p>
<h2>Format Strings</h2>
<p>The same <a href="https://docs.python.org/3/library/string.html#formatstrings" rel="nofollow noreferrer">Format String Syntax</a> is used by the <a href="https://docs.python.org/3/library/functions.html#format" rel="nofollow noreferrer"><code>format</code></a> function, the <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer"><code>str.format</code></a> method, <a href="https://docs.python.org/3/library/string.html#string.Formatter" rel="nofollow noreferrer"><code>Formatter</code></a> subclasses, and (with slight differences that aren't relevant here) <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer">f-string literals</a>. </p>
<p>You can specify a <code>width</code> of <code>2</code>, plus an <code>align</code> of <code>=</code> (meaning numeric alignment—padding is placed after any <code>+</code> or <code>-</code>) and a <code>fill</code> of <code>0</code>. But there's also a special shortcut, where placing a <code>0</code> right before the <code>width</code> means numeric-aligned zero-fill. So:</p>
<pre><code>&gt;&gt;&gt; f"{x % 100:02}"
'02'
&gt;&gt;&gt; format(x % 100, '02')
'02'
&gt;&gt;&gt; '{:02}'.format(x % 100)
'02'
</code></pre>
<h2><code>printf</code>-style String Formatting</h2>
<p>Python has an older, but still sometimes useful, way to do formatting,<sup>1</sup> which more closely matches that of C and similar languages, calling <a href="https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="nofollow noreferrer"><code>printf</code>-style</a> or <code>%</code>-formatting.</p>
<p>You specify a <code>width</code> of <code>2</code>, and a <code>flag</code> of <code>0</code>, which indicates numeric zero-padding, together with a <code>type</code> of <code>d</code> to specify that you want to format the number as a signed integer decimal:</p>
<pre><code>&gt;&gt;&gt; "%02d" % (x % 100,)
'02'
</code></pre>
<p>While <code>%</code>-formatting isn't as flexible and powerful as format strings, it can sometimes be simpler to understand (especially if you're used to C or another language), is often faster, and works with <code>bytes</code> as well as <code>str</code>.</p>
<h2>Manual string operations</h2>
<p>Finally, you can always convert the number to a string and then use string methods on it. For example, you can use the <a href="https://docs.python.org/3/library/stdtypes.html#str.zfill" rel="nofollow noreferrer"><code>zfill</code></a> method to zero-fill a string:</p>
<pre><code>&gt;&gt;&gt; str(x % 100).zfill(2)
'02'
</code></pre>
<p>… or you can use the <a href="https://docs.python.org/3/library/stdtypes.html#str.rjust" rel="nofollow noreferrer"><code>rjust</code></a> method to right-justify it with <code>'0'</code> as a fill character:</p>
<pre><code>&gt;&gt;&gt; str(x % 100).rjust(2, '0')
'02'
</code></pre>
<p>In fact, instead of calculating the remainder, you could just convert the whole thing to a string, truncate it, then zero-fill:</p>
<pre><code>&gt;&gt;&gt; str(x)[-2:].zfill(2)
</code></pre>
<p>… although this probably won't be what you want is <code>x</code> is, say, <code>-123</code> (you'll get <code>23</code> instead of <code>77</code>).</p>
<hr/>
<p><sub>1. In fact, it provides <em>two</em> older solutions, the other being <a href="https://docs.python.org/3/library/string.html#template-strings" rel="nofollow noreferrer">template strings</a>, but these aren't useful as often.</sub></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>x = 1004
x = x % 100

str(x)

y = len(x)

if y == 0:
   end

elif y == 2:
   print (x)

elif y == 1:
   print ('0'x)

else:
   x = str(x)[-2:]
   print (x)
</code></pre>
<p>In this, I've converted it into a string &amp; calculated the length of the value as '<strong>y</strong>'. Using a basic [<strong>if elif else</strong>] structure I have returned the values in your <em>format</em>, but as <strong>strings</strong>.</p>
<p>It is unclear what you wanted to use these values for because if you want them to represent figures you will probably need to edit the settings of whatever output application you are using. An alternative solution would be to use the value for 'x' as being different to the string so that the number value can still be used regardless of the way it is displayed when printing. <em>wink</em>, <em>wink</em>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use string formatting too.</p>
<pre><code>ans = 1004 % 100
format(ans, '03d')
</code></pre>
<p>More information about String formatting can be found here: <a href="https://pyformat.info/" rel="nofollow noreferrer">https://pyformat.info/</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Your first step to use the modulus operator to find the two-least significant digits is correct.</p>
<p>Then you'll want to use a format string to pad your result when printing it.  See: <a href="https://stackoverflow.com/questions/26446758/python-format-integer-into-fixed-length-strings">Python format Integer into fixed length strings</a></p>
</div>
<span class="comment-copy">It does that because <code>04</code> doesn't exist as a number- it translates it to 4. You need to convert it to a string to conserve the leading 0's.</span>
<span class="comment-copy">could also use <code>zfill</code></span>
<span class="comment-copy">this won't work for single-digit x</span>
<span class="comment-copy">@EdwardKhachatryan Agreed, <code>zfill</code> should be the accepted answer</span>
<span class="comment-copy">This should be the accepted answer as it works for single digit x</span>
<span class="comment-copy">Better to just do <code>format(ans, '03d')</code>. There's no reason to use <code>str.format</code> if the only thing in the format string is a format spec.</span>
<span class="comment-copy">Thanks for that @abarnert I didn't realise format did that.</span>
