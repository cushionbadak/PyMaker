<div class="post-text" itemprop="text">
<p>I am running a subprocess using 'Popen'. I need to block till this subprocess finishes and then read its output.</p>
<pre><code>p = Popen(command, stdin=PIPE, stdout=PIPE, stderr=PIPE, encoding="utf-8")
p.communicate():
output = p.stdout.readline()
print(output)
</code></pre>
<p>I get an error that </p>
<pre><code>ValueError: I/O operation on closed file.
</code></pre>
<p>How can I read the output after the subprocess finishes, I do not want to use poll() though as the subprocess takes time and I would need to wait for its completion anyway.</p>
</div>
<div class="post-text" itemprop="text">
<p>This should work:</p>
<pre><code>p = Popen(command, stdin=PIPE, stdout=PIPE, stderr=PIPE, encoding="utf-8")
output, error = p.communicate()

print(output)
if error:
    print('error:', error, file=sys.stderr)
</code></pre>
<p>However, <code>subprocess.run()</code> is preferred these days:</p>
<pre><code>p = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

print("output:", p.stdout)

if proc.stderr:
    print("error:", p.stderr, file=sys.stderr)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow noreferrer"><code>subprocess.check_output</code></a>.  It returns the output of the command.</p>
</div>
<span class="comment-copy"><code>p.communicate()</code> returns the output.</span>
<span class="comment-copy">Any particular reason you're not using <code>subprocess.run()</code> or the legacy <code>subprocess.check_output()</code>? You should avoid <code>Popen</code> if you can precisely because it's tricky to get right.</span>
<span class="comment-copy">@jasonharper, <code>p.communicate()</code> returns <code>bound method Popen.communicate of &lt;subprocess.Popen object at 0x105e84e10</code>, not the output of the subprocess code</span>
<span class="comment-copy"><code>output, error = p.communicate()</code> should work, that output looks like you are just printing <code>p.communicate</code> (without the parentheses).</span>
