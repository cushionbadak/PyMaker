<div class="post-text" itemprop="text">
<p>Currently we have a Python library that looks something like:</p>
<pre><code>Jupiter/
  __init__.py
  Ganymede.py
  Callisto.py
</code></pre>
<p><code>Ganymede.py</code> in turn contains functions <code>Foo()</code>, <code>Bar()</code>, and so forth. Our existing scripts use these functions via </p>
<pre><code>from Jupiter import Ganymede
# later in the program...
Ganymede.Foo()
</code></pre>
<p>I would like to reorganize things so that the directory looks more like</p>
<pre><code>Jupiter/
  __init__.py
  Ganymede/
    __init__.py
    functions.py
  Callisto/
    __init__.py
    functions.py
</code></pre>
<p><strong>without breaking or modifying</strong> any existing scripts that use Jupiter. </p>
<p>If <code>Ganymede/__init__.py</code> uses the import syntax described in <a href="https://docs.python.org/3/reference/import.html#submodules" rel="nofollow noreferrer">"The import system" documentation</a>:</p>
<pre><code>from .functions import *
</code></pre>
<p>then <code>Foo()</code> and <code>Bar()</code> end up in Ganymede's namespace, but the <code>help()</code> for Ganymede doesn't mention them.</p>
<pre><code>&gt;&gt;&gt; from Jupiter import Ganymede
&gt;&gt;&gt; dir(Ganymede)
['Bar', 'Foo', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', 'functions']
&gt;&gt;&gt; help(Ganymede)
Help on package Jupiter.Ganymede in Jupiter:

NAME
    Jupiter.Ganymede

PACKAGE CONTENTS
    functions

FILE
    x:\yadda\yadda\ganymede\__init__.py
</code></pre>
<p>I would really, really like <code>help(Ganymede)</code> to automatically list all the available functions and classes.</p>
<p>I suppose I could <code>execfile("functions.py")</code> from <code>Ganymede/__init__.py</code> but I feel like there must be some cleaner way to do this. Or is there not?</p>
<p>I need something that works in both Python 2.7.15 and 3.5.3. </p>
</div>
<div class="post-text" itemprop="text">
<p>Create an <code>__all__</code> in <code>__init__.py</code>.</p>
<hr/>
<p>If you've already got an <code>__all__</code> in <code>functions.py</code>, you can just import it:</p>
<pre><code>from .functions import *
from .functions import __all__
</code></pre>
<hr/>
<p>If you're merging multiple modules together, you have to get a bit more verbose</p>
<pre><code>from .functions import *
from .classes import *
from . import functions
from . import classes
__all__ = functions.__all__ + classes.__all__
</code></pre>
<hr/>
<p>Or, of course, you can always be explicit:</p>
<pre><code>from .functions import *
__all__ = ['spam', 'eggs']
</code></pre>
<hr/>
<p>Or, if you want to build it dynamically:</p>
<pre><code>from .functions import *
from . import functions
__all__ = [name for name in dir(functions) if not name.startswith('_')]
</code></pre>
<p>… or (pretty hacky—but sometimes useful if you have a <code>__init__.py</code> that gathers names from a lot of submodules and does nothing else) …</p>
<pre><code>from .functions import *
__all__ = [name for name in globals() if not name.startswith('_')]
</code></pre>
<p>… or you can get really clever and do things the way, e.g., <a href="https://github.com/python/cpython/blob/3/Lib/multiprocessing/__init__.py" rel="nofollow noreferrer"><code>multiprocessing</code></a> does:<sup>1</sup></p>
<pre><code>from . import functions
__all__ = [name for name in functions if not name.startswith('_')]
globals().update({name: getattr(functions, name) for name in __all__})
</code></pre>
<hr/>
<p>Keep in mind that <code>__all__</code> will also affect what happens when someone does a <code>from Ganymede import *</code> (in fact, <a href="https://docs.python.org/3/tutorial/modules.html?highlight=__all__#importing-from-a-package" rel="nofollow noreferrer">that's the main purpose of <code>__all__</code></a>), and what <code>inspect</code> and other tools report as the public members of your package.</p>
<p>I'm not sure the behavior of <code>help</code> in the absence of <code>__all__</code> is documented anywhere (interactive <code>help</code> works is only lightly documented in general…), and it's not quite the same as what <code>import</code> considers public.</p>
<hr/>
<p><sub>1. Well, <code>multiprocessing</code> is actually a lot more clever/hacky; it's pulling the attributes not out of a submodule, but out of a dynamic singleton attribute of that submodule that gets set differently on the main vs. child processes, and changes some of the top-level functions of the package accordingly…</sub></p>
</div>
<span class="comment-copy">Is there a way for me to achieve this without having to explictly list every member of <code>functions.py</code> in its <code>__all__</code> (ie, to get the find-everything-automatically behavior of <code>help()</code>)?</span>
<span class="comment-copy">@Crashworks Yes, if you don't mind getting a bit hacky. Give me a second and I'll edit it.</span>
<span class="comment-copy">wouldn't <code>vars</code> be better here? When would you ever want sometihing in <code>set(dir()) - set(vars)</code>?</span>
<span class="comment-copy">@juanpa.arrivillaga Oh, I think I've got what you're asking. If the module has a custom <code>__dir__</code> and <code>__getattr__</code> to export dynamic public members that aren't in its <code>__dict__</code>, why would you want to ignore them?</span>
<span class="comment-copy">Wow, thank you for all that research!  I'm grateful for your time on this, but it's convinced me that I ought to just put the contents of <code>functions.py</code> into <code>__init__.py</code> and be done with it.</span>
