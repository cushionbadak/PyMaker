<div class="post-text" itemprop="text">
<p>Let's consider given a list <code>[4, 5, 2, 19, 3, 8, 9]</code> and given number is <code>8</code>
then the output should be <code>[4, 5, 2]</code> because in output list there is no element greater than <code>8</code> and it is the only list with highest number of consecutive number. Please tell me the code in <code>python 3</code>
*NOTE: Please tell the logic without using import module.
Here is my code</p>
<pre><code>test_cases = int(input())
for test_case in range(test_cases):
    n_and_c = list(map(int, input().split()))
    no_of_plots = n_and_c[0]
    max_cost_of_each_plot = n_and_c[1]
    list_of_cost_of_each_plot = list(map(int, input().split()))

    def list_of_required_plots(l_plots, m_plot):
        r = []
        for i in l_plots:
            for j in range(len(l_plots)-1):
                if i &lt; m_plot:
                    r.append(i)        
        return r


    def list_of_eligible_plots(l_plots, r_plots):
        e = []
        e.append(r_plots[0])
        for i in range(len(r_plots) - 1):
            idx = l_plots.index(r_plots[i])
            lp = 0
            for j in range(len(r_plots)-1):
                if l_plots[idx+lp] == r_plots[i+lp] :
                        e.append(r_plots[i+lp])
                        lp+=1
                else:
                    break
            return e



    def max_profit_func(r_plots, m_plot):
        m = 0
        for i in r_plots:
            m+=(m_plot - i)
        return m


    required_plots = list_of_required_plots(list_of_cost_of_each_plot, max_cost_of_each_plot)

    eligible_plots = list_of_eligible_plots(list_of_cost_of_each_plot, required_plots)

    print(eligible_plots)
    if len(required_plots) == 0:
        print(0)
    else:
        max_profit = max_profit_func(eligible_plots, max_cost_of_each_plot)

        print(max_profit)
</code></pre>
<p>I am trying to get the explained output for <code>list_of_eligible_plots()</code> in my code. Please any one help or suggest any logic.</p>
<p>Thanks in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>Just keep a "max list" and update it as you go.</p>
<pre><code>maxList = []
currList = []
lst = [4,5,2,19,3,8,9]
n = 8
for x in lst:
   if x &lt; n:
       currList.append(x)
       if len(currList) &gt; len(maxList):
           maxList = currList
   else:
       currList = []
</code></pre>
<p>I'm pretty sure that will work</p>
</div>
<div class="post-text" itemprop="text">
<p>Time for  <a href="https://docs.python.org/3/library/itertools.html#itertools.takewhile" rel="nofollow noreferrer"><code>takewhile</code></a>:</p>
<pre><code>from itertools import takewhile

lst = [4, 5, 2, 19, 3, 8, 9] 
print(list(takewhile(lambda x: x &lt; 8, lst)))

# [4, 5, 2]
</code></pre>
<p><strong>How?</strong></p>
<p>Make an iterator that returns elements from the iterable as long as the predicate is true.</p>
</div>
<div class="post-text" itemprop="text">
<p>For grouping elements you can use <code>groupby</code> from <code>itertools</code> (<a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">docs here</a>). This code snippet will find sublist with maximal consecutive elements that each element &lt;= number (8 in this case): </p>
<pre><code>from itertools import groupby

l = [4, 5, 2, 19, 3, 8, 9]
number = 8

print(max([list(g) for v, g in groupby(l, key=lambda v: v &lt;= number) if v], key=len))
</code></pre>
<p>This will print:</p>
<pre><code>[4, 5, 2]
</code></pre>
<p>EDIT (to explain):</p>
<p><strong>1.step</strong> is to find groups where elements are &lt;= of selected number:</p>
<pre><code>for v, g in groupby(l, key=lambda v: v &lt;= number):
    print(v, list(g))
</code></pre>
<p>Prints:</p>
<pre><code>True [4, 5, 2]
False [19]
True [3, 8]
False [9]
</code></pre>
<p><strong>2.step</strong> is filter out <code>False</code> groups:</p>
<pre><code>print([list(g) for v, g in groupby(l, key=lambda v: v &lt;= number) if v])
</code></pre>
<p>Prints:</p>
<pre><code>[[4, 5, 2], [3, 8]]
</code></pre>
<p><strong>3.step</strong> is find sublist with maximum number of elements (<code>max()</code> function with <code>key</code> argument, as key we use <code>len()</code> function):</p>
<pre><code>print(max([list(g) for v, g in groupby(l, key=lambda v: v &lt;= number) if v], key=len))
</code></pre>
<p>Prints:</p>
<pre><code>[4, 5, 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>itertools.takewhile</code> for finding all sub lists that are less than 8 and then use <code>max</code> to find the biggest list</p>
<pre><code>&gt;&gt;&gt; from itertools import takewhile, chain
&gt;&gt;&gt; lst = [4, 5, 2, 19, 3, 8, 9] 
&gt;&gt;&gt; n = 8
&gt;&gt;&gt; itr = iter(lst)
&gt;&gt;&gt; max((list(chain([f], takewhile(lambda x: x&lt;n, itr))) for f in itr), key=len)
[4, 5, 2]
</code></pre>
<p>If you dont want to import <code>itertools</code> methods <code>chain</code> and <code>takewhile</code>, you can define it yourself</p>
<pre><code>def takewhile(predicate, iterable):
    # takewhile(lambda x: x&lt;5, [1,4,6,4,1]) --&gt; 1 4
    for x in iterable:
        if predicate(x):
            yield x
        else:
            break

def chain(*iterables):
    # chain('ABC', 'DEF') --&gt; A B C D E F
    for it in iterables:
        for element in it:
            yield element
</code></pre>
</div>
<span class="comment-copy"><code>[4, 5, 2]</code> is not consecutive, and neither is <code>[19, 3, 8, 9]</code> or <code>[19, 3, 9]</code>. Can you clarify?</span>
<span class="comment-copy">[4, 5, 2] are consecutive with their index values [4, 5, 2] their index is 0, 1, 2 if u need any clarity, please ask.</span>
<span class="comment-copy">What about <code>[4, 5, 2, 19, 3, 7, 8, 9]</code>? Why do you have this absurd restriction: "NOTE: Please tell the logic without using import module."?</span>
<span class="comment-copy">As i am submitting this in online assignments, it won't allow other modules.</span>
<span class="comment-copy">@shaikmoeed So you want us to fix your homework without you explaining exactly what the problem you're having is or narrowing down the code to only the relevant parts or giving an unrelated MCVE. This is very much frowned upon, and it's academically dishonest.</span>
<span class="comment-copy">Thanks you @JimNeedsCofee  this helps me.</span>
<span class="comment-copy">As i am submitting this in online challenges, i can't import modules. kindly suggest logic.</span>
<span class="comment-copy">@shaikmoeed I updated my answer.</span>
<span class="comment-copy">@shaikmoeed The <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>groupby</code> documentation</a> contains equivalent Python code that you can use to define <code>groupby</code> locally</span>
<span class="comment-copy">As i am submitting this code in online challenges, I can't use modules in my code. kindly suggest logic.</span>
<span class="comment-copy">@shaikmoeed. Updated with the definitions of <code>takewhile</code> and <code>chain</code> from <code>itertools</code>. So you dont have to import any module</span>
