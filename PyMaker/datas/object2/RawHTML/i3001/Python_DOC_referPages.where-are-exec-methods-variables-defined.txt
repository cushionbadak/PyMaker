<div class="post-text" itemprop="text">
<p>I was trying to run a little code that convert a string to a list, when I felt on this problem.
First of all here is an example code :</p>
<pre><code>def str_to_list(s):
    s = s.replace('\n', '')
    exec('res="{}"'.format(str(s)))
    print(res)

s = '[0. 1. 0. 0.\n 0. 2. 5.]'
l = str_to_list(s)
</code></pre>
<p>When I run this, I get a NameError about <code>res</code>, at first I thought that it can be a sort of local variables into the exec() method, but then i realised that i could run this code:</p>
<pre><code>s = '[0. 1. 0. 0.\n 0. 2. 5.]'
s = s.replace('\n', '')
exec('res="{}"'.format(str(s)))
print(res)
</code></pre>
<p>Since the fact that I'm not trying to call <code>res</code> from outside the function, and the fact that I can run this code alone, I can't figure out where is the problem.</p>
<p>I try some searches on the internet, but due to my lack of knowledge in low-level execution, I can't find keywords that define my specific problem.
Thanks for your help.</p>
</div>
<div class="post-text" itemprop="text">
<p>As explained in <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer">the <code>exec</code> docs</a> you need to give <code>exec</code> an appropriate <code>locals</code> dictionary. Eg,</p>
<pre><code>def str_to_list(s):
    s = s.replace('\n', '')
    d = {}
    exec('res="{}"'.format(s), None, d)
    return d['res']

s = '[0. 1. 0. 0.\n 0. 2. 5.]'
print(str_to_list(s))
</code></pre>
<p><em>output</em></p>
<pre><code>[0. 1. 0. 0. 0. 2. 5.]
</code></pre>
<p>However, it is generally advised that you avoid using <code>exec</code>, unless you <em>really</em> need it. For details, please see Ned Batchelder's <a href="http://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html" rel="nofollow noreferrer">Eval really is dangerous</a>. The info there also applies to <code>exec</code>.</p>
<hr/>
<p>If you simply want to create a list from a string, you can probably use <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer"><code>ast.literal_eval</code></a>. Eg,</p>
<pre><code>from ast import literal_eval

s = '[0, 1, 0, 0, 0, 2, 5]'
seq = literal_eval(s)
print(seq, type(seq))
</code></pre>
<p><strong>output</strong></p>
<pre><code>[0, 1, 0, 0, 0, 2, 5] &lt;class 'list'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In CPython, local variables in a function are (usually?) stored in a fixed-size array, in an optimization known as "fast locals". As a result, local variables cannot be dynamically added to a function.</p>
<p>The exec function will attempt to add the new local variable to the function, but it will not be read by the return statement because that fixed-size array did not change.</p>
</div>
<span class="comment-copy">Why do you think you need <code>exec</code> for this task? FWIW, your 2nd code block sets <code>res</code> to the string <code>'[0. 1. 0. 0. 0. 2. 5.]'</code>; it doesn't create a list.</span>
<span class="comment-copy">@PM2Ring It was just for the example, I simplified the code to be sure that the error is not caused by something else.</span>
