<div class="post-text" itemprop="text">
<p>I have small set of color data that I want to investigate. It is in the form of a list of RGB data. </p>
<p><code>[(255, 255, 255), (124, 144, 231), ...]</code></p>
<p>The image uses a restricted palette, and I would like to see how these colors are "distributed" by plotting them along the color wheel. As alternative, I tried histogram of individual channels, but this did not give me the insight I am interested in. </p>
<p>I googled and learned that HSL color more accurately maps to color wheel. However, after converting to HSL, I'm still confused. 3 pieces of data still make up the color: Hue, saturation, and luminosity. How do you map 3 piece of data onto a 2d plane? </p>
<p>I read about polar coordinates here: <a href="https://www.mathsisfun.com/polar-cartesian-coordinates.html" rel="nofollow noreferrer">https://www.mathsisfun.com/polar-cartesian-coordinates.html</a>. I try ignoring luminosity and plotting by treating HSL data as Polar coordinate (hue = angle, saturation = length of radius (scaled by some factor))</p>
<pre><code>def polar2cartesian(hsl):
    color_circle_radius = 100
    radius = hsl.saturation * color_circle_radius
    x = radius * math.cos(math.radians(hsl.hue))
    y = radius * math.sin(math.radians(hsl.hue))
    return x, y


...

for hsl in colors: 
    x, y = polar2cartesian(hsl)
    im.point(x, y, hsl.to_rgb())
</code></pre>
<p>This is not correct result. As it shows same red color hue in multiple places like this example: </p>
<p><a href="https://i.stack.imgur.com/qecAT.png" rel="nofollow noreferrer">bad chart</a></p>
<p>What is the correct way to translate from RGB to a position on color wheel? </p>
</div>
<div class="post-text" itemprop="text">
<p>The problem of mapping a 3D (H, S, V) colour onto a 2D plane is a tough one to solve objectively, so I thought I'd give a crack at it and come up with results that I find pleasing.</p>
<p><strong>My approach is as follows:</strong></p>
<ol>
<li>For every (R, G, B) pixel in the image, convert it to (H, S, V).</li>
<li>Convert the (H, S, V) colour to a 2D vector using the H value as the angle and the S value as the magnitude.</li>
<li>Find the position of that vector in our 2D output image, and only write the pixel if the value (V) is greater than the value of what was previously in that pixel. (My reasoning is that since an image is likely to have multiple pixels of similar enough colours that they appear in the same place on our colour wheel, since we are not plotting using the value, we should give higher value pixels precedence to be shown.)</li>
</ol>
<p><strong>Now, in code:</strong> (<a href="https://gist.github.com/tejedu/59da515132d5a743d2056620c8118de0" rel="noreferrer">Entire file</a>)</p>
<p>Create a table to store the largest value in every particular position</p>
<pre><code>highest_value = numpy.zeros((image_size, image_size))
</code></pre>
<p>Convert RGB to HSV</p>
<pre><code>def rgb_to_point(rgb):
hsv = colorsys.rgb_to_hsv(*rgb)
</code></pre>
<p>Convert that to a vector</p>
<pre><code>rads = math.tau * hsv[0] - math.pi
mag = hsv[1] * (image_size/2) - 1 
</code></pre>
<p>Convert that to a point on our image</p>
<pre><code>x = int(math.cos(rads) * mag + (image_size/2))
y = int(math.sin(rads) * mag + (image_size/2))
</code></pre>
<p>If the value is higher, return the point, otherwise <code>None</code></p>
<pre><code>if(hsv[2] &gt; highest_value[x][y]):
    highest_value[x][y] = hsv[2]
    return (x, y)
</code></pre>
<p>I called all that the <code>rgb_to_point</code> function, now we will use it for every pixel in our image:</p>
<pre><code>for pixel in img.getdata():
    c = rgb_to_point(pixel)
    if(c):
        imgo.putpixel(c, pixel)
</code></pre>
<p><code>if(c)</code> determines whether the value was higher, since c is <code>None</code> when it wasn't.</p>
<p>Here's the results:</p>
<p><img alt="mountain" src="https://i.stack.imgur.com/K8jPn.jpg"/>
<img alt="mountainwheel" src="https://i.stack.imgur.com/SjpGw.png"/>
<img alt="bird" src="https://i.stack.imgur.com/6pei8.jpg"/>
<img alt="birdywheel" src="https://i.stack.imgur.com/hzgY9.png"/></p>
<p>Note: Part of the reason I am dealing with value like this is because the alternatives I thought of were not as good. Ignoring value completely lead to darker pixels turning up on the output image, which usually lead to an ugly wheel. Turning the value up to 1 for every output pixel lead to very generic looking wheels that didn't really give a good idea of the original input image.</p>
</div>
<span class="comment-copy">Have you looked at the <a href="https://docs.python.org/3/library/colorsys.html#module-colorsys" rel="nofollow noreferrer"><code>colorsys</code></a> module?</span>
<span class="comment-copy">How did you convert to HSL? Some routines return a hue value in the range 0-100, it seems you expect it to be 0-360, did you verify that this is the case?</span>
<span class="comment-copy">Also, what does <code>im.point</code> do with negative <code>x</code>, <code>y</code> values?</span>
