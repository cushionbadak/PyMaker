<div class="post-text" itemprop="text">
<p>I'm practicing the basics of Python and I had a exercise of doing a function that asks for the user for a number and the function will return him all the divisors of that number so I done this</p>
<pre><code>def divisor_generator():
    integer = raw_input("Enter a number:")
    integer = int(integer)
    list = []
    for divisors in range(integer+1):
        if divisors%integer == 0:
            list.append(divisors)
    print list 
</code></pre>
<p>and for example the output for the integer 50 was</p>
<pre><code>[50, 0]
</code></pre>
<p>I really want to keep it simple and I don't understand what is not good about it, I searched for so many answers but none of them was on my level of understanding. Why is my function not working as expected?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your modulo is backwards.</p>
<p>Your example is evaluating to <code>i % 50</code> when you want <code>50 % i</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your division is backwards.</p>
<p>I think you meant:</p>
<pre><code># I took the s off of "divisors" since it's actually a single number
integer % divisor == 0
</code></pre>
<hr/>
<p>Think of it this way, if <code>integer</code> is 50, and <code>divisor</code> is 2, with the way you had it, it would be:</p>
<pre><code>2 % 50 == 0
</code></pre>
<p>If numerator is less than the denominator, that check will never be true, except for the when the numbers are the same. I always walk myself through this mental check just to make sure I didn't accidentally put the numbers backwards. </p>
<hr/>
<p>And, as mentioned in the comments, don't create variables called <code>list</code>. <code>list</code> is a built in function, and shadowing it has the potential to cause errors later. </p>
</div>
<div class="post-text" itemprop="text">
<p>Here is the correct version (I am using <code>python 3.6.1</code>). You need to switch the position of <code>integer</code> and <code>divisors</code>. And you need to start your range from <code>1</code> otherwise you get <code>division by zero</code> error</p>
<pre><code>def divisor_generator():
    integer = input("Enter a number:")
    integer = int(integer)
    list = []
    for divisors in range(1, integer+1):
        if integer%divisors == 0:
            list.append(divisors)
    print (list) 
</code></pre>
<p>By the way, in case you are also interested in a bit concise and different solution to your problem, here is another solution (you don't need it though necessarily):</p>
<pre><code>integer = int(input("Enter a number:"))
divisors = [i for i in range(1, integer+1) if integer%i == 0]
print (divisors)
</code></pre>
</div>
<span class="comment-copy">list is a keyword in python and you should not use it as variable name</span>
<span class="comment-copy">Use <code>range(1, integer+1)</code> to avoid the <code>Division by zero</code> error</span>
<span class="comment-copy">Thanks that answered my question! plsu thnx for second solution but i didnt understand how you did all the for loopls and the i before the for loop all in one line only</span>
<span class="comment-copy">Ok, let me explain: The second method is called <code>List comprehension</code>. Basically, you are looping over a <code>range</code> with a <code>for</code> loop using a variable <code>i</code> which is same as your <code>divisors</code> (you can use any name). Then you check if the <code>integer</code> is divisible by this number <code>i</code>. You put this <code>if</code> condition after the <code>for</code> loop. Now if the condition is True, you need that particular <code>i</code> as a divisor and you store it simply by writing <code>i</code> before the <code>for</code> loop. If the condition is False, the <code>i</code> doesn't get stored in the list. This way only those <code>i</code> values will be stored in list which are divisors.</span>
<span class="comment-copy">The following link provides more info: <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/datastructures.html</a></span>
<span class="comment-copy">Thank you very much i looked over List Comprehensions now i understand it better</span>
<span class="comment-copy">You are welcome!</span>
