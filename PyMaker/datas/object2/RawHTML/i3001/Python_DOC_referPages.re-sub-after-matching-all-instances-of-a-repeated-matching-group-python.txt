<div class="post-text" itemprop="text">
<p>I am matching digits in str using a regex in Python. My desire is to capture numbers that might have a thousands separator (for me, a comma or a space) or can just be a string of numbers. The following shows what my regex captures</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; test = '3,254,236,948,348.884423 cold things, ' + \
'123,242 falling birds, .84973 of a French pen , ' + \
'65 243 turtle gloves, 8 001 457.2328009 units, and ' + \
'8d523c.'
&gt;&gt;&gt; matches = re.finditer(ANY_NUMBER_SRCH, test, flags=re.MULTILINE)
&gt;&gt;&gt; for match in matches:
...   print (str(match))
...
&lt;_sre.SRE_Match object; span=(0, 24), match='3,254,236,948,348.884423'&gt;
&lt;_sre.SRE_Match object; span=(27, 34), match='123,242'&gt;
&lt;_sre.SRE_Match object; span=(37, 43), match='.84973'&gt;
&lt;_sre.SRE_Match object; span=(46, 52), match='65 243'&gt;
&lt;_sre.SRE_Match object; span=(55, 72), match='8 001 457.2328009'&gt;
&lt;_sre.SRE_Match object; span=(73, 74), match='8'&gt;
&lt;_sre.SRE_Match object; span=(75, 78), match='523'&gt;
</code></pre>
<p>This is the <em>matching</em> behavior I want. Now, I want to take each of the matched numbers and remove the thousands separators (<code>','</code> or <code>' '</code>) if they exist. This should leave me with</p>
<pre><code>'3254236948348.884423 cold things, ' + \
'123242 falling birds, .84973 of a French pen ,' + \
'65243 turtle gloves, 8001457.2328009 units, ' + \
'and 8d523c.'
</code></pre>
<p>Basically, I have one regex to capture the number. This regex is used in multiple places, e.g. to find dollar amounts, to get ordinal numbers, ... For this reason, I've named the regex, <code>ANY_NUMBER_SRCH</code>.</p>
<p>What I want to do is something like the following:</p>
<pre><code>matches = some_method_to_get_all_matches(ANY_NUMBER_SRCH)
for match in matches:
  corrected_match = re.sub(r"[, ]", "", match)
  change_match_to_corrected_match_in_the_test_string
</code></pre>
<p>As things are, I can not use substitution groups. If you just want to see the regex, you can check out <a href="https://regex101.com/r/AzChEE/3" rel="nofollow noreferrer">https://regex101.com/r/AzChEE/3</a> Basically, part of my regex is as follows</p>
<pre><code>r"(?P&lt;whole_number_w_thous_sep&gt;(?P&lt;first_group&gt;\d{1,3})(?P&lt;thousands_separator&gt;[ ,])(?P&lt;three_digits_w_sep&gt;(?P&lt;three_digits&gt;\d{3})(?P=thousands_separator))*(?P&lt;last_group_of_three&gt;\d{3})(?!\d)"
</code></pre>
<p>I'll represent that without the "scrolling line":</p>
<pre><code>(r"(?P&lt;whole_number_w_thous_sep&gt;(?P&lt;first_group&gt;\d{1,3})"
  "(?P&lt;thousands_separator&gt;[ ,])"
  "(?P&lt;three_digits_w_sep&gt;(?P&lt;three_digits&gt;\d{3})"
  "(?P=thousands_separator))*"
  "(?P&lt;last_group_of_three&gt;\d{3})(?!\d)")
</code></pre>
<p>The regex engine doesn't keep the repeated <code>three_digits_with_separator</code> because of the <code>*</code> for repeated capturing groups.</p>
<p>I'm sure there's a way to use the <code>span</code> parts of the <code>_sre.SRE_Match object</code>s. That would be quite involved, however, and I'm dealing with strings with thousands to hundreds-of-thousands of characters. <strong>Is there a simple way to do <code>re.sub</code> after the <code>re.match</code> or <code>re.iter</code> or whichever other method is used to find the number pattern?</strong></p>
<p>@abarnert got me the right answer - using a lambda function. My comment under <a href="https://stackoverflow.com/a/51640754/6505499">@abarnert's answer</a>, beginning with 'Verified!' shows all the steps.</p>
<hr/>
<h3>My Attempts</h3>
<p>By the way, I have looked at these questions on SO (<a href="https://stackoverflow.com/questions/39213585/python-regular-expression-replacing-a-portion-of-match">replace portion of match</a>, <a href="https://stackoverflow.com/questions/1327369/extract-part-of-a-regex-match">extract part of a match</a>, <a href="https://stackoverflow.com/questions/30487380/replace-with-re-sub-after-matching-pattern">replace after matching pattern</a>, <a href="https://stackoverflow.com/questions/39155242/regex-not-matching-due-to-repeated-capturing-group-rather-than-capturing-a-repea">repeated capturing group stuff</a>), but they simply show how to use substitution groups. I've also tried to use <code>re.finditer</code> as shown below with the following result.</p>
<pre><code>&gt;&gt;&gt; matches = re.finditer(lib_re.ANY_NUMBER_SRCH, test, flags=re.MULTILINE)     
&gt;&gt;&gt; for match in matches:
...   print ("match: " + str(match))
...   corrected_match = re.sub(r"[, ]", "", match)
...   print ("corrected_match: " + str(corrected_match))
...
match: &lt;_sre.SRE_Match object; span=(0, 24), match='3,254,236,948,348.884423'&gt;
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 3, in &lt;module&gt;
  File "/usr/lib/python3.6/re.py", line 191, in sub
    return _compile(pattern, flags).sub(repl, string, count)
TypeError: expected string or bytes-like object
&gt;&gt;&gt;   print ("corrected_match: " + str(corrected_match))
</code></pre>
<hr/>
<h3>The Big Regex</h3>
<p>In case something happens to the <a href="https://regex101.com/r/9vbHjn/1/" rel="nofollow noreferrer">regex101.com link</a>, here is the giant regex:</p>
<pre><code>ANY_NUMBER_SRCH = r"(?P&lt;number_capture&gt;(?P&lt;pre1&gt;(?&lt;![^0-9,.+-])|)(?P&lt;number&gt;(?P&lt;sign_symbol_opt1&gt;(?&lt;![0-9])[+-])?(?P&lt;whole_number_w_thous_sep&gt;(?P&lt;first_group&gt;\d{1,3})(?P&lt;thousands_separator&gt;[ ,])(?P&lt;three_digits_w_sep&gt;(?P&lt;three_digits&gt;\d{3})(?P=thousands_separator))*(?P&lt;last_group_of_three&gt;\d{3})(?!\d)|(?P&lt;whole_number_w_o_thous_sep&gt;\d+))(?P&lt;decimal_separator_1&gt;[.])?(?P&lt;fractional_w_whole_before&gt;(?&lt;=[.])(?P&lt;digits_after_decimal_sep_1&gt;\d+))?(?P&lt;post1&gt;(?&lt;![^0-9,.+-])|)|(?P&lt;pre2&gt;(?&lt;![^0-9,.+-])|)(?P&lt;fractional_without_whole_before&gt;(?P&lt;sign_symbol_opt2&gt;(?&lt;![0-9])[+-])?(?P&lt;decimal_separator_2&gt;[.])(?P&lt;digits_after_decimal_sep_2&gt;\d+)))(?P&lt;post2&gt;(?&lt;![^0-9,.+-])|))"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't see any reason you can't just use <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer"><code>re.sub</code></a> instead of <code>re.finditer</code> here. Your <code>repl</code> gets applied once for each match, and the result of substituting each <code>pattern</code> with <code>repl</code> in <code>string</code> is returned, which is exactly what you want.</p>
<p>I can't actually run your example, because copying and pasting <code>test</code> gives me a SyntaxError, and copying and pasting <code>ANY_NUMBER_SRCH</code> gives me an error compiling the regex, and I don't want to go down a rabbit hole trying to fix all of your bugs, most of which probably aren't even in your real code. So let me give a simpler example:</p>
<pre><code>&gt;&gt;&gt; test = '3,254,236,948,348.884423 cold things and 8d523c'
&gt;&gt;&gt; pattern = re.compile(r'[\d,]+')
&gt;&gt;&gt; pattern.findall(test) # just to verify that it works
['3,254,236,948,348', '884423', '8', '523']
&gt;&gt;&gt; pattern.sub(lambda match: match.group().replace(',', ''), test)
'3254236948348.884423 cold things and 8d523c'
</code></pre>
<p>Obviously your <code>repl</code> function will be a bit more complicated than just removing all of the commasâ€”and you'll probably want to <code>def</code> it out-of-line rather than try to cram it into a <code>lambda</code>. But whatever your rule is, if you an write it as a function that takes a <code>match</code> object and returns the string you want in place of that match object, you can just pass that function to <code>sub</code>.</p>
</div>
<span class="comment-copy">Meanwhile, what did you expect <code>re.sub(r"[, ]", "", match)</code> to do? You can only call that on a string, not a match object. And, even if you fix that, once you have <code>corrected_match</code>, what are you going to do with it? Obviously nothing you do to create a new string is going to affect <code>test</code> in any way.</span>
<span class="comment-copy">I wasn't expecting the <code>re.sub</code> to work on <code>match</code>. I wasn't sure how to do the substitution there--that was my question, @abarnert. I wasn't sure how to get the stuff from the matches. Your answer with the lambda functions does exactly what I want. Thanks so much for answering a question that was imperfect. What you did does affect test, which is what I wanted.</span>
<span class="comment-copy">Well, it allows me to affect test. @abarnert, I've accepted your answer. I'm now trying to implement it to also replace the spaces in a number like, '8 001 457.2328009', which should go to '8001457.2328009'.</span>
<span class="comment-copy">I apologize for not double-checking my question. I tried to make things look good in the <code>test</code> string, but it made it not copy/paste-able. I've made that so it works on my machine, and hopefully on others as well. I had missed a '<code>P</code>' before '<code>&lt;three_digits&gt;</code>' when I copy/pasted from regex101.com -- I added the named groups in an attempt to clarify things. Thanks for "reading through" these errors and giving me the answer I needed!</span>
<span class="comment-copy">Verified! <code>#ANY_NUMBER_SRCH as in question;</code> ; <code>#test as in question;</code> ; <code>&gt;&gt;&gt;pattern=re.compile(ANY_NUMBER_SRCH);</code> ; <code>test_corrected=pattern.sub(lambda match: match.group().replace(',', '').replace(' ', ''), test);</code> ; <code>&gt;&gt;&gt;test_corrected;</code> #result# <code>'3254236948348.884423 cold things, 123242 falling birds, .84973 of a French pen , 65243 turtle gloves, 8001457.2328009 units, and 8d523c.'</code> ; Just as required.</span>
