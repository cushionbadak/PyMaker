<div class="post-text" itemprop="text">
<p>I have a list that I need to sort</p>
<pre><code>list_of_sent = ['a5 abc xyz','w1 3 45 7','a6 abc deg','r4 2 7 9']
</code></pre>
<p>The rules are as follows.</p>
<ul>
<li>if the 2nd item is a number, that will always come later</li>
<li>others are in their lexicographically sorted order (without changing the ordering of the individual items)</li>
</ul>
<p>In the above example, the expected output is</p>
<pre><code>['a5 abc deg','a6 abc xyz','r4 2 7 9','w1 3 45 7']
</code></pre>
<p>I understand this is some form of indirect sorting but not sure how to approach that. So far, I have separated the list in terms of whether the 2nd and onward items have numbers or not. But not sure how to proceede after that.</p>
<pre><code>def reorderLines(logLines):
    numList = []
    letterList = []
    hashMap = {}

    for item in logLines:
        words = item.split()
        key= words[0]
        hashMap[key] = item
        if words[1].isdigit():
            numList.append(item)
        else:
            letterList.append(item)

    #sort each list individually
    print(numList)
    print(letterList)
</code></pre>
<p><strong>EDIT:</strong></p>
<p>This will output</p>
<pre><code>['a5 abc xyz','a6 abc deg']
['w1 3 45 7','r4 2 7 9']
</code></pre>
<p>How do I proceed afterwards to reach to the output of </p>
<pre><code>['a5 abc deg','a6 abc xyz','r4 2 7 9','w1 3 45 7']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The answer to your direct question is simple.</p>
<p>You've already worked out how to split the list into these two lists:</p>
<pre><code>['a5 abc xyz','a6 abc deg']
['w1 3 45 7','r4 2 7 9']
</code></pre>
<p>Now, you just need to <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer">sort each one</a>, and add them together.</p>
<hr/>
<p>But this really isn't the right approach in the first place. When looking at how to do a custom sort, the first thing you should do is ask yourself whether some other list, which you could easily transform this one into, would be trivial to sort.</p>
<p>For example, imagine you had this:</p>
<pre><code>list_of_sent = [
    (False, 'a5 abc xyz'), 
    (True, 'w1 3 45 7'),
    (False, 'a6 abc deg'),
    (True, 'r4 2 7 9')]
</code></pre>
<p>â€¦ where that first value in each tuple is <code>True</code> iff the second word in the string is a number.</p>
<p>If that were your list, you could just call <code>sort</code> or <code>sorted</code> on it, and you'd be done.</p>
<p>So, can you transform each of your strings into a tuple like that? Sure you can:</p>
<pre><code>def flagnumbers(words):
    isnumber = words.split()[1].isdigit()
    return isnumber, words
</code></pre>
<p>And how, you can just pass that as the <code>key</code> function to sort your list:</p>
<pre><code>list_of_sent = ['a5 abc xyz','w1 3 45 7','a6 abc deg','r4 2 7 9']
print(sorted(list_of_sent, key=flagnumbers))
</code></pre>
<p>That's it.</p>
<p>The <a href="https://docs.python.org/3/howto/sorting.html#sortinghowto" rel="nofollow noreferrer">Sorting HOWTO</a> in the docs covers key functions in more detail, with some nice examples.</p>
</div>
<div class="post-text" itemprop="text">
<p>We can write <a href="https://docs.python.org/3/howto/sorting.html#key-functions" rel="nofollow noreferrer">sorting key</a> as follows:</p>
<pre><code>def sorting_key(element):
    second_substring = element.split()[1]
    return second_substring.isdecimal(), element
</code></pre>
<p>then use it in <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer"><code>sorted</code> builtin</a> like</p>
<pre><code>&gt;&gt;&gt; list_of_sent = ['a5 abc xyz', 'w1 3 45 7', 'a6 abc deg', 'r4 2 7 9']
&gt;&gt;&gt; sorted(list_of_sent, key=sorting_key)
['a5 abc xyz', 'a6 abc deg', 'r4 2 7 9', 'w1 3 45 7']
</code></pre>
<p>or if we don't need old order we can sort <code>list_of_sent</code> in place (may be more efficient, at least will not occupy additional memory for a new <code>list</code>):</p>
<pre><code>&gt;&gt;&gt; list_of_sent = ['a5 abc xyz', 'w1 3 45 7', 'a6 abc deg', 'r4 2 7 9']
&gt;&gt;&gt; list_of_sent.sort(key=sorting_key)
&gt;&gt;&gt; list_of_sent
['a5 abc xyz', 'a6 abc deg', 'r4 2 7 9', 'w1 3 45 7']
</code></pre>
<p>More info about differences between <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer"><code>sorted</code></a> &amp; <a href="https://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow noreferrer"><code>list.sort</code></a> could be found in <a href="https://stackoverflow.com/questions/22442378/what-is-the-difference-between-sortedlist-vs-list-sort">this thread</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>After the comment do these:  </p>
<pre><code>newlist = []
numList.sort()
letterList.sort()
newlist = letterList + numList
print(numList)
print (letterList)
print (newlist)
</code></pre>
</div>
<span class="comment-copy">Do you know how to concatenate 2 lists together?</span>
<span class="comment-copy">@user202729 it is not about concatenating. See the edit.</span>
<span class="comment-copy">Then... do you know how to sort each list individually?</span>
<span class="comment-copy">Note that your expected input/output have some swapped elements (input has an element <code>'a5 abc xyz'</code> but output calls it <code>'a6 abc xyz'</code>)</span>
