<div class="post-text" itemprop="text">
<p>I'm trying to understand how I can to realize multiprocessing in my case.
I have two functions: <em>def all_url()</em> and <em>def new_file()</em>. The first one returns a list which contains a lot of elements. The second one uses this list for 'for' loop. I want to make multiprocessing for second function <em>new_file()</em> because list which returns from <em>all_url()</em> is too big.</p>
<p>Example of code:</p>
<pre><code>def all_url():
   #Here I append elements to urllist
    return urllist

def new_file():
    for each in all_url():
      #There's a lot of code. Each iteration of loop creates a new html file.

new_file()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You would need to do something like this:</p>
<pre><code>from multiprocessing.pool import Pool

def all_url():
    #Here I append elements to urllist
    return urllist

def new_file():
    with Pool() as pool:
        pool.map(new_file_process_url, all_url())

def new_file_process_url(each):
      # Creates html file.

if __name__ == '__main__':
    new_file()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not sure if you really need threading just because you have to wait for a huge list to get generated. Define the <code>all_url</code> function as a generator and call it in when needed. </p>
<pre><code>def all_url():
    yield url # not urllist

url = all_url()

def new_file():
    current_url = next(url)
    # Do the rest 
</code></pre>
</div>
<span class="comment-copy">Maybe you should look into the <a href="https://wiki.python.org/moin/Generators" rel="nofollow noreferrer">generator pattern in Python</a>. But the gist of it is implementing a __next__() function that returns the next element.</span>
<span class="comment-copy">I got an error: RuntimeError:          An attempt has been made to start a new process before the         current process has finished its bootstrapping phase.          This probably means that you are not using fork to start your         child processes and you have forgotten to use the proper idiom         in the main module:if <b>name</b> == '<b>main</b>':                 freeze_support()                 ...          The "freeze_support()" line can be omitted if the program         is not going to be frozen to produce an executable.</span>
<span class="comment-copy">@SBrain Ah yes, you have to wrap the entry point of your program in a <code>if __name__ == '__main__':</code> (see <a href="https://stackoverflow.com/questions/18204782/runtimeerror-on-windows-trying-python-multiprocessing">this question</a>). I've updated the answer.</span>
<span class="comment-copy">It works. Thank you. Tell me please can I change number of processes?</span>
<span class="comment-copy">@SBrain Yes, have a look at the documentation of <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool" rel="nofollow noreferrer"><code>multiprocessing.pool.Pool</code></a> to see all the options. You can pass the number of processes as the first parameter of the constructor (e.g. for 4 processes you would do <code>with Pool(4) as pool:</code>).</span>
