<div class="post-text" itemprop="text">
<p>To load a list into a queue in Python, I found this code snippet which failed to work. No items were added to the queue:</p>
<pre><code>from queue import Queue
my_list = [1,2,3,4,5,6,7,8,9,10]
q = Queue()

# This code doesn't work
map(q.put, my_list)
q.qsize() # Returns zero, which is unexpected
</code></pre>
<p>The more verbose solution:</p>
<pre><code>for num in my_list:
    q.put(num)
print(q.qsize())  # returns 10 as expected
</code></pre>
<p>works as expected. What am I missing here?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>map(q.put, my_list)</code> just returns an iterator. Unless you iterate through it, your queue <code>q</code> wont be populated</p>
<pre><code>&gt;&gt;&gt; q = Queue()
&gt;&gt;&gt; itr = map(q.put, my_list)
&gt;&gt;&gt; q.qsize()
0
&gt;&gt;&gt; _ = list(map(q.put, my_list))
&gt;&gt;&gt; q.qsize()
10
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I am not sure why that is not working for you. Maybe your version of python, I am on 2.7.6</p>
<pre><code>from queue import Queue
my_list = [1,2,3,4,5,6,7,8,9,10]
q = Queue()

# This code doesn't work
map(q.put, my_list)
q.qsize()

print q.qsize() # 10

while not q.empty():
    print q.get()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That is not how <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> works:</p>
<pre><code>from queue import Queue
l = [i for i in range(10)]
q = Queue()
x = map(q.put, l)
q.qsize()
# Output: 0
for _ in x:
    pass
q.qsize()
# Output: 10
</code></pre>
<p>You can get what you want using a <a href="https://stackoverflow.com/a/3386632/6741482"><code>ThreadPool</code></a>:</p>
<pre><code>from queue import Queue
from multiprocessing.pool import ThreadPool
l = [i for i in range(10)]
p = ThreadPool()
q = Queue()
_ = p.imap_unordered(q.put, l)
q.qsize()
# Output: 10
</code></pre>
<p>If you want other built-ins:</p>
<pre><code># list comprehension (essentially what map is equivalent to)
_ = [q.put(i) for i in l]

# the `any` method:
_ = any(q.put(i) for i in l)
</code></pre>
</div>
<span class="comment-copy">Using map like this is not idiomatic python. I would stick to the for-loop because you'll need to evaluate the map anyway.</span>
<span class="comment-copy">You can demonstrate this by doing <code>list(map(q.put, my_list))</code></span>
<span class="comment-copy">Is using a <code>for</code> loop the most pythonic way?</span>
<span class="comment-copy">I am on Python 3 - could it be a version issue?</span>
<span class="comment-copy">That's definitely the issue. This is a change for Python 3</span>
<span class="comment-copy">I see, it has to do with the fact that <code>map()</code> returns an iterator in Python3</span>
<span class="comment-copy">In other words, in Python 3.x <code>map()</code> returns a lazy iterator, rather than a list as in Python 2.x, so you have to explicitly iterate it to get it to do anything.  The "more verbose" version is a better idea anyway, as there's absolutely no point in creating this sequence of <code>None</code>s.</span>
