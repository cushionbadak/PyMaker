<div class="post-text" itemprop="text">
<p>I'm developing a python script for an embedded system that sends data to ThingSpeak.</p>
<p>To do this (and for studing python) I used the thread module and also the <a href="https://pypi.org/project/thingspeak/" rel="nofollow noreferrer">ThingSpeak</a> module is used.</p>
<p>Basically my script create 2 threads:</p>
<ul>
<li>One for sending data to ThingSpeak every 10 seconds.</li>
<li>One to toggle a LED.</li>
</ul>
<p>Everything work except the publish on ThingSpeak. Note: the publish on thingSpeak without the thread works.</p>
<p>I get this error: <strong>"TypeError: 'str' object does not support item assignment"</strong></p>
<pre><code>Traceback (most recent call last):
  File "/usr/lib/python2.7/threading.py", line 801, in __bootstrap_inner
    self.run()
  File "/usr/lib/python2.7/threading.py", line 754, in run
    self.__target(*self.__args, **self.__kwargs)
  File "thingSpeak.py", line 57, in ThingSpeak_Thread
    response = thingSpeakHandler.update(jsonMessage)
  File "/usr/lib/python2.7/site-packages/thingspeak/thingspeak.py", line 110, in update
    data['api_key'] = self.write_key
TypeError: 'str' object does not support item assignment
</code></pre>
<p>I think that this error is related to the addition of threads.</p>
<p>This is my code:</p>
<pre><code>import onionGpio
import time
import thingspeak
import sys
import threading
import random
import thread
import json

# Declare variables
heartBeatDelaySec   = 1.0
heartBeatLedStatus  = 0
heartBeatDisable    = False

thingSpeakDelaySec  = 10

thingSpeakChannel = 98765
thingSpeakWriteKey = '1234556'
thingSpeakReadKey = '123456'


def HeartBeatThread( name, delay, runEvent ):
  global heartBeatLedStatus

  print ("Task " + name + " started")

  while runEvent.is_set():
    blueLed.setValue( heartBeatLedStatus )

    if( heartBeatLedStatus == 0 ):
      heartBeatLedStatus = 1
    else:
      heartBeatLedStatus = 0

    time.sleep(delay)

  # Shut-down Led
  blueLed.setValue( 1 )


def ThingSpeak_Thread( name, delay, thingSpeakChannel, thingSpeakWriteKey, runEvent ):

  thingSpeakHandler = thingspeak.Channel( id=thingSpeakChannel, write_key=thingSpeakWriteKey, fmt='json' )

  while runEvent.is_set():
    temp = random.randint(12, 38)
    rH   = random.randint(30, 68)

    # Build JSON with data
    data = {}
    data['1'] = temp
    data['2'] = rH
    jsonMessage = json.dumps(data)

    print( "Publishing: " + jsonMessage )

    response = thingSpeakHandler.update(jsonMessage)

    time.sleep(delay)


# Led Initialize
blueLed   = onionGpio.OnionGpio(15)
greenLed  = onionGpio.OnionGpio(16)
redLed    = onionGpio.OnionGpio(17)

blueLed.setOutputDirection(1)
greenLed.setOutputDirection(1)
redLed.setOutputDirection(1)

blueLed.setValue(1)
greenLed.setValue(1)
redLed.setValue(1)
print ("GPIO configured")


# Initialize Threads
runEvent = threading.Event()
runEvent.set()

heartBeatThreadHandler = threading.Thread(target = HeartBeatThread, args = ("Heart Beat", heartBeatDelaySec, runEvent))

thingSpeakThreadHandler = threading.Thread(target = ThingSpeak_Thread, args = ("ThingSpeak", thingSpeakDelaySec, thingSpeakChannel, thingSpeakWriteKey, runEvent))

# Start Threads
heartBeatThreadHandler.start()
thingSpeakThreadHandler.start()

try:
  while( True ):
    time.sleep(.01)
except:
  print ("Attempting to close threads. Max wait = " + str(max(heartBeatDelaySec, thingSpeakDelaySec)) + "sec")
  runEvent.clear()
  heartBeatThreadHandler.join()
  thingSpeakThreadHandler.join()
  print ("Threads successfully closed")
</code></pre>
<p>Thanks for the help in advance.</p>
<p>Best Regards,
Federico</p>
</div>
<div class="post-text" itemprop="text">
<p><code>json.dumps()</code> in your function <code>ThingSpeak_Thread</code> returns string (see <a href="https://docs.python.org/3/library/json.html?highlight=dumps#json.dumps" rel="nofollow noreferrer">docs</a>). Then you pass this <strong>string</strong> to <code>thingSpeakHandler.update()</code> method, but it 
expects <code>dict</code>. So, remove <code>jsonMessage = json.dumps(data)</code> and pass <code>data</code> to <code>update()</code> instead.</p>
</div>
<span class="comment-copy">A wild guess, but perhaps you're not supposed to manually serialize to JSON, but pass <code>data</code> as dictionary to <code>update()</code>.</span>
<span class="comment-copy">@IljaEverilä the example provided is "channel.update({1:cpu_pc, 2:mem_avail})" starting from the exmple I think to build the data payload with the json library. I'll try. Thanks</span>
<span class="comment-copy">@IljaEverilä sorry I made an error. You are right now the script works! Thanks for your help!</span>
<span class="comment-copy">Thanks! It works!</span>
