<div class="post-text" itemprop="text">
<p>I have a csv file with  couple of thousand rows and 4-64 coumns( I have about 50 CSV files and the number of columns may vary from file to file but each file has fixed number of columns).
e.g</p>
<pre><code>0 0 0 0 0 0 0\n
0 0 0 0 0 0 0\n
1 2 3 4 5 6 7\n
0 0 0 0 0 0 1\n
</code></pre>
<p>So, I need to first sum each row then add the two consecutive rows using some maths equation. What is the best pythonic way to do it? I can write the new value in a new file. So, the new file will have less number of rows than original file since it is merging value of two rows.
e.g CSV1
after summing across different column the value in row 1 is 0 and row 2 is 0. So, new file row 1 will be 0+0 = 0
and third row in original file = 28 and row 4 =1
So, row 2 in new file = 28+1 = 29</p>
</div>
<div class="post-text" itemprop="text">
<p>Load the data first:</p>
<pre><code>import csv

with open("path/to/file.csv", "r") as f:
    reader = csv.reader(f)
    rows = [float(row) for row in reader]
</code></pre>
<p>Now you need to process the rows in pairs, so a normal <code>for</code> loop iterating over the list won't help too much.</p>
<pre><code>summed_rows = []
for i in range(0, len(rows), 2):
    first_row_sum = sum(rows[i])
    second_row_sum = sum(rows[i + 1])
    both_rows_sum = first_row_sum + second_row_sum
    summed_rows.append((both_rows_sum,)) # Each row must be iterable
</code></pre>
<p>(This assumes an even number of rows. The calculation of <code>second_row_sum</code> will fail at the end if the row count is odd.)</p>
<p>After that <code>for</code> loop executes, your <code>summed_rows</code> should be the output you need, and you just need to write it to a file.</p>
<pre><code>with open("path/to/output.csv", "w") as output:
    writer = csv.writer(output)
    for row in summed_rows:
        writer.writerow((row,))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I understand your problem, what you want to do is pretty easy with some help from the stdlib.</p>
<p>First, open the file:</p>
<pre><code>with open(path) as f:
</code></pre>
<p>Then attach a <code>csv.reader</code>, which turns it from an iterable of lines to an iterable of row lists:</p>
<pre><code>    rows = csv.reader(f, delimiter=' ')
</code></pre>
<p>Each of these rows is a list of columns as strings. You obviously need to convert them to <code>int</code> or <code>float</code> or something else to do math on them:</p>
<pre><code>    rows = (map(float, row) for row in rows)
</code></pre>
<p>Now you need to convert that into an iterable of adjacent pairs of rows. If you look at the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">Recipes in the <code>itertools</code> docs</a>, there's a <code>pairwise</code> function that does this for any iterable. But it's simple enough to just do manually:</p>
<pre><code>    it1, it2 = itertools.tee(rows)
    next(it2)
    pairs = zip(it1, it2)
</code></pre>
<p>Now, <code>pairs</code> is an iterable of pairs of rows. So we can loop over it:</p>
<pre><code>    for xrow, yrow in pairs:
</code></pre>
<p>I'm not sure what you wanted to do with these pairs of rows. Maybe you wanted, I don't know, the square root of the squares of the differences of the columns? Whatever you want should be pretty easy:</p>
<pre><code>        diffs = (x - y for x, y in zip(xrow, yrow))
        sumsquares = sum(diff*diff for diff in diffs)
        print(sumsquares**0.5)
</code></pre>
<p>This will print out:</p>
<pre><code>0.0
11.832159566199232
11.269427669584644
</code></pre>
<p>â€¦ which I'm sure isn't what you want, because you wanted to do some different math than the math I picked out of thin air, but hopefully it's obviously why this is the result, and how to use the same structure for your actual problem.</p>
</div>
<span class="comment-copy">Thanks everyone!</span>
