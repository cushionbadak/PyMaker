<div class="post-text" itemprop="text">
<p>kk is the number of lists present. l1 ,l2,l3 are the lists. In the following code, I have used 3 for loops to add elements in the 3 lists. Value of variable k could vary and so the lists. I want to know how do I use recursion to achieve this.</p>
<pre><code>kk = 3  
l1 = [8,5,4]
l2 = [3,11,9]
l3 = [5,9,15,8]
maxi = []

for i in l1:
  for j in l2:
    for k in l3:
        maxi.append(i+j+k)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sounds like you're looking for something along the lines of </p>
<pre><code>[sum(t) for t in itertools.product(l1, l2, l3)]
</code></pre>
<p>which results in </p>
<pre><code>[16, 20, 26, 19, 24, 28, 34, 27, 22, 26, 32, 25, 13, 17, 23, 16, 21, 25, 31, 24, 19, 23, 29,
 22, 12, 16, 22, 15, 20, 24, 30, 23, 18, 22, 28, 21]
</code></pre>
<p>Here <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> generates the <a href="https://en.wikipedia.org/wiki/Cartesian_product" rel="nofollow noreferrer">Cartesian product</a> of the input iterables.  If you had some unknown number of iterables in a list you could do</p>
<pre><code>iterables = [l1, l2, l3, ...]
[sum(t) for t in itertools.product(*iterables)]
</code></pre>
<p>to unpack them into arguments</p>
<p>A recursive solution would looks something like this.  Warning: it is going to be worse in every way compared to the <code>itertools</code> solution.</p>
<pre><code>def summations(*iterables, sums=()):
    if not iterables:
        return list(sums)
    head, *tail = iterables
    if not sums:
        return summations(*tail, sums=head)
    sums = (x+y for y in sums for x in head)
    return summations(*tail, sums=sums)

summations(l1, l2, 3)
# [16, 20, 26, 19, 24, 28, 34, 27, 22, 26, 32, 25, 13, 17, 23, 16, 21, 25, 31, 24, 19, 23, 29,
#  22, 12, 16, 22, 15, 20, 24, 30, 23, 18, 22, 28, 21]
</code></pre>
</div>
<span class="comment-copy">Related: <a href="https://stackoverflow.com/q/49059681/674039">stackoverflow.com/q/49059681/674039</a></span>
<span class="comment-copy">I couldn't find a good duplicate. I imagine you will mostly get - <code>don't do that, use itertools</code> aswers.  There is a recipe on activeState that might help <a href="http://code.activestate.com/recipes/577415-recursive-function-to-replace-nested-for-loops-car/" rel="nofollow noreferrer">http://code.activestate.com/recipes/577415-recursive-function-to-replace-nested-for-loops-car/</a></span>
<span class="comment-copy">Yes, but I would like to know how to do it with recursion logic</span>
<span class="comment-copy">@KinjalKachi I added a recursive approach, but there's really no point for this problem.  This isn't a recursive problem, so a recursive solution is naturally convoluted.</span>
