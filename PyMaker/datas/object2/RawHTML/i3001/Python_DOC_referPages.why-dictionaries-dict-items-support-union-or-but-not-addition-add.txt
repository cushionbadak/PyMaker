<div class="post-text" itemprop="text">
<p>Example to illustrate:</p>
<pre><code>&gt;&gt;&gt; a = dict(eggs='eggs', spam='spam')
&gt;&gt;&gt; b = dict(spam='spam', ham='ham')
&gt;&gt;&gt; dict(a.items() | b.items())
{'eggs': 'eggs', 'ham': 'ham', 'spam': 'spam'}
</code></pre>
<p>Meanwhile...</p>
<pre><code>&gt;&gt;&gt; dict(a.items() + b.items())
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unsupported operand type(s) for +: 'dict_items' and 'dict_items'
</code></pre>
<p>Is there a reason for this? Wouldn't it be reasonable to assume that addition and union should do the same for dictionaries?</p>
<p>In Python 2 this works perfectly fine:</p>
<pre><code>&gt;&gt;&gt; dict(a.items() + b.items())
{'eggs': 'eggs', 'ham': 'ham', 'spam': 'spam'}
</code></pre>
<p>Although in Python 2 <code>.items()</code> returns a regular list (in contrast to <code>dict_items</code>), so maybe it's by accident.</p>
<hr/>
<p>Finally, I don't think "what happens if keys have different values"-dilemma applies here as operator <code>|</code> doesn't seem to mind anyway (one of two values is selected seemingly at random).</p>
</div>
<div class="post-text" itemprop="text">
<p>Some <code>dict</code> views (<a href="https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects" rel="nofollow noreferrer">notably not <code>dict.values</code></a>) support <a href="https://docs.python.org/3/library/stdtypes.html#set" rel="nofollow noreferrer">set operations</a>.  <code>+</code> isn't a set operation, so there's no real reason it should be included.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just to add a bit to @Patrick's answer, the <code>dict_items</code> object is a subclass of <code>collections.Set</code></p>
<pre><code>from collections.abc import Set

isinstance(d.items(), Set) # True
</code></pre>
<p>and <code>Set</code> doesn't have the <code>+</code> operation:</p>
<pre><code>'__add__' in dir(Set) # False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let's fall back to the most basic Python mantra: the <a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">Zen of Python</a>.</p>
<blockquote>
<p>There should be one-- and preferably only one --obvious way to do it.</p>
</blockquote>
<p>So you're asking why <code>+</code> shouldn't be defined to do the same thing as <code>|</code>. Your answer is right there: there would be two equally correct ways to do the same thing, which would not be Pythonic.</p>
</div>
<span class="comment-copy">Btw, I'm only asking why it's not supported (or is there any reason at all). I dont have a concrete use-case I'm trying to solve - I'm just curious.</span>
<span class="comment-copy">Yes, it's not, however! <code>-</code> is supported. That's why it seemed inconsistent to me.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/stdtypes.html#frozenset.difference" rel="nofollow noreferrer">Because <code>set</code>s support <code>-</code> as difference</a>.  They do so because that's the existing mathematical notation.</span>
<span class="comment-copy">what would you expect <code>+</code> to do with a set? It's actually pretty problematic if you think about it, which is why <code>|</code>, <code>^</code> and <code>&amp;</code> exist for combining sets in ways that are clear.</span>
