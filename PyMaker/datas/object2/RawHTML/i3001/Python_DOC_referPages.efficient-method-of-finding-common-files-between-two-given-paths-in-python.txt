<div class="post-text" itemprop="text">
<p>I have written code to find out common files between two given folders (paths) accounting for all levels of sub folders if present.</p>
<p>Please suggest if there is a more efficient method. It's taking too long if folders with many levels of subfolders are given.</p>
<pre><code>def findCommonDeep(self,path1,path2):
    commonfiles = []

    for (dirpath1, dirname1, filenames1) in os.walk(path1):
        for file in filenames1:
            for (dirpath2, dirname2, filenames2) in os.walk(path2):
                if (file in filenames2 and isfile(join(dirpath2, file))):
                        commonfiles.append(file)

    print(commonfiles)
</code></pre>
<p>and calling this function with paths, like shown below:</p>
<pre><code>findCommonDeep("/home/naseer/Python", "/home/naseer/C")
</code></pre>
<p>I understand that if I store a list of all files for any given path the speed of execution can be reduced. but I guess that will run out of memory. Please guide me in approaching to this more efficiently. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use generator expression to transform the output of <code>os.walk</code> into two sets and use set intersection to efficiently identify the common paths.</p>
<pre><code>import os
def findCommonDeep(path1, path2):
    files1 = set(os.path.relpath(os.path.join(root, file), path1) for root, _, files in os.walk(path1) for file in files)
    files2 = set(os.path.relpath(os.path.join(root, file), path2) for root, _, files in os.walk(path2) for file in files)
    return files1 &amp; files2
</code></pre>
<p>To reduce code duplication in the code above, you can use another list comprehension:</p>
<pre><code>import os
def findCommonDeep(path1, path2):
    return set.intersection(*(set(os.path.relpath(os.path.join(root, file), path) for root, _, files in os.walk(path) for file in files) for path in (path1, path2)))
</code></pre>
<p>And if you're looking for just the common file names rather than common path names, you can make the generator expression output just the file names instead:</p>
<pre><code>def findCommonDeep(path1, path2):
    return set.intersection(*(set(file for _, _, files in os.walk(path) for file in files) for path in (path1, path2)))
</code></pre>
<p>This is more efficient because it takes advantage of Python's set intersection operation, which has an average <a href="https://wiki.python.org/moin/TimeComplexity" rel="nofollow noreferrer">time complexity</a> of <code>O(min(len(n), len(m))</code>, whereas your code with 2 nested loops always takes <code>O(n^2)</code>.</p>
</div>
<span class="comment-copy">What do you mean by <i>common files</i>?</span>
<span class="comment-copy">@RoadRunner files with same name and extension</span>
<span class="comment-copy">@NaseerMohammad then just create a dicitonary with the key of &lt;filename&gt;.&lt;extension&gt; and the value will be a tuple containing the frequency of the file present in two file paths. If the frequency is greather than in both case, the file is common.</span>
<span class="comment-copy">This will increase the complexity more I guess. To add each file to dictionary have to iterate over it!!!</span>
<span class="comment-copy">I think it is helpful to point out why @blhsing's solution is faster.  In your question, @NaseerMohammad, the code iterates over <code>dirpath2</code> for <i>every file</i> in <code>dirpath1</code> because of the nested <code>for</code> loops! So the code is doing the same work for every file in <code>dirpath1</code>. @blhsing's solution only iterates over each directory once.</span>
<span class="comment-copy">Added explanation as suggested. Thanks.</span>
<span class="comment-copy">@blhsing Thanks. It is working faster. Could you please elaborate your explanation about your answer</span>
<span class="comment-copy">@NaseerMohammad Not too sure which parts of my answer you need more elaboration on. If you are unsure of how Python's list comprehension/generator expression works, you can refer to <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension's documentation</a> for more details. I think I've explained the rest of the logic in my answer already though. Let me know which specific part you still need more explanations on.</span>
<span class="comment-copy">@NaseerMohammad I just updated my answer with a solution that outputs just the common file names. Hope that helps.</span>
