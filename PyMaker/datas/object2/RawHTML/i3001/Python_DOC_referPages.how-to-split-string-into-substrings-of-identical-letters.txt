<div class="post-text" itemprop="text">
<p>How do I split a string consisting of lowercase English alphabetical letters into substrings consisting of identical letters - so for an <strong>input</strong>:</p>
<pre><code>"aaaabbcccdd"
</code></pre>
<p>The function should <strong>output</strong> a list:</p>
<pre><code>["aaaa", "bb", "ccc", "dd"]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following list comprehension using <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> and <a href="https://docs.python.org/2/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join</code></a> will work:</p>
<pre><code>from itertools import groupby

s = "aaaabbcccdd"
[''.join(g) for _, g in groupby(s)]
# ["aaaa", "bb", "ccc", "dd"]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use regex with a back reference:</p>
<pre><code>import re
from operator import itemgetter
print(list(map(itemgetter(0), re.findall(r'((.)\2*)', "aaaabbcccdd"))))
</code></pre>
<p>This outputs:</p>
<pre><code>['aaaa', 'bb', 'ccc', 'dd']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A Counter solution -</p>
<pre><code>from collections import Counter

[i*j for i, j in Counter("aaaabbcccdd").iteritems()]
# OP ["aaaa", "bb", "ccc", "dd"]
</code></pre>
</div>
<span class="comment-copy">checkout <code>itertools.groupby</code></span>
<span class="comment-copy">Should Ã© and e be classed as identical? What have you tried?</span>
<span class="comment-copy">The string consists of only English alphabetical characters. I'll amend the post.</span>
<span class="comment-copy">Thanks, that's a great solution!</span>
<span class="comment-copy">Did you try this on less orderly input?</span>
<span class="comment-copy">IP <code>"aaaabbcccddasdffas"</code> OP <code>['aaaaaa', 'ccc', 'bb', 'ddd', 'ff', 'ss']</code> Order should not matter since counter is going to count the alphabets</span>
<span class="comment-copy">You do notice that <code>'aaaaaa'</code> is not a substring of the input in that case?</span>
<span class="comment-copy"><code>lowercase alphabetic letters into substrings consisting of identical letters</code> substrings consisting of identical letters tell me that all <code>a</code>s should be grouped together</span>
<span class="comment-copy">Well, I guess the OP could be clearer or provide a more general example :) Sounds to me like only keeping "substrings" (which your op is not!) together while maintaining order. Just wanted to point out the difference.</span>
