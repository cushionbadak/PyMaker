<div class="post-text" itemprop="text">
<p>I am new to python and implementing stack.
I am calling stack functions using dictionary.
However, push() requires me to pass a parameter.
How do I do that?</p>
<pre><code>class stack():

    def __init__(self):
        self.items = []

    def push(self,item):
        self.items.append(item)

    def pop(self):
        return self.items.pop()

    def isEmpty(self):
        return self.items == []

    def getStack(self):
        return print(self.items)

s = stack()
switcher = {
           '1' : s.push,
           '2' : s.pop,
           '3' : s.isEmpty,
           '4' : s.getStack,
        }

def dictionaryCall(key):
    switcher[key]()

while(1):
    key = input('enter choice 1.push 2. pop 3.isEmpty 4 getStack 5.exit: ')
    if key == '5':
        break
    dictionaryCall(key)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a version where the <code>push</code> parameter is supplied on the same line as the key. This makes the code a little more complicated, but it's a bit nicer to use. We use the <code>.strip</code> method to remove any leading or trailing whitespace from the input string. Then, after we check for the '5' exit key, we split the input line if its longer than 1 character. The first item on the line becomes the key, the following characters after the space become the parameter for the <code>push</code> function.   </p>
<p>This code also checks that a key is valid before attempting to use it. </p>
<p>I've added <a href="https://docs.python.org/3/library/readline.html" rel="nofollow noreferrer"><code>import readline</code></a>, which gives line editing and a history buffer to the input line, so you can hit the Up arrow key to get to previous lines. At least, it does that on GNU systems, it does nothing on Windows, although there's a 3rd-party pyreadline you could use instead. </p>
<pre><code>import readline

class Stack():
    def __init__(self):
        self.items = []

    def push(self, item):
        self.items.append(item)

    def pop(self):
        # Return None if the stack is empty
        if self.items:
            return self.items.pop()

    def isEmpty(self):
        return not self.items

    def getStack(self):
        return self.items

stack = Stack()
switcher = {
    '1' : stack.push,
    '2' : stack.pop,
    '3' : stack.isEmpty,
    '4' : stack.getStack,
}

def dictionaryCall(key, val=None):
    func = switcher[key]
    if val is None:
        return func()
    else:
        return func(val)

while True:
    key = input('Enter choice: 1.push item 2.pop 3.isEmpty 4.getStack 5.exit &gt; ').strip()
    if key == '5':
        break

    if len(key) &gt; 1:
        # There's a value after the key.
        key, val = key.split(maxsplit=1)
    else:
        val = None

    if key not in switcher:
        print('Invalid choice')
        continue

    if key == '1' and val is None:
        print('You must supply an item to push')
        continue

    result = dictionaryCall(key, val)
    if result is not None:
        print(result)
</code></pre>
<p>Here's a short demo</p>
<pre><code>Enter choice: 1.push item 2.pop 3.isEmpty 4.getStack 5.exit &gt; 3
True
Enter choice: 1.push item 2.pop 3.isEmpty 4.getStack 5.exit &gt; 4
[]
Enter choice: 1.push item 2.pop 3.isEmpty 4.getStack 5.exit &gt; 1
You must supply an item to push
Enter choice: 1.push item 2.pop 3.isEmpty 4.getStack 5.exit &gt; 1 Hello
Enter choice: 1.push item 2.pop 3.isEmpty 4.getStack 5.exit &gt; 1 This is a test
Enter choice: 1.push item 2.pop 3.isEmpty 4.getStack 5.exit &gt; 4
['Hello', 'This is a test']
Enter choice: 1.push item 2.pop 3.isEmpty 4.getStack 5.exit &gt; 3
False
Enter choice: 1.push item 2.pop 3.isEmpty 4.getStack 5.exit &gt; 2
This is a test
Enter choice: 1.push item 2.pop 3.isEmpty 4.getStack 5.exit &gt; 2
Hello
Enter choice: 1.push item 2.pop 3.isEmpty 4.getStack 5.exit &gt; 2
Enter choice: 1.push item 2.pop 3.isEmpty 4.getStack 5.exit &gt; 3
True
Enter choice: 1.push item 2.pop 3.isEmpty 4.getStack 5.exit &gt; 4
[]
Enter choice: 1.push item 2.pop 3.isEmpty 4.getStack 5.exit &gt; 1 bye
Enter choice: 1.push item 2.pop 3.isEmpty 4.getStack 5.exit &gt; 4
['bye']
Enter choice: 1.push item 2.pop 3.isEmpty 4.getStack 5.exit &gt; 5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So here's a working implementation. As you can see you will have to add an optional second parameter (called <code>element</code> here) to <code>dictionaryCall</code> and then pass it to the selected method. </p>
<pre><code>class stack():

    def __init__(self):
        self.items = []

    def push(self,item):
        self.items.append(item)

    def pop(self):
        print(self.items.pop())

    def isEmpty(self):
        # I dropped the `return` here due to syntax error
        print (self.items == [])

    def getStack(self):
        # I dropped the `return` here due to syntax error
        print (self.items)

s = stack()
switcher = {
            '1' : s.push,
            '2' : s.pop,
            '3' : s.isEmpty,
            '4' : s.getStack,
        }

# I added an optional parameter for the `push` method
def dictionaryCall(key, element = None):
    method = switcher[key]

    # call the method with element if it exists
    if element == None: method()
    else: method(element)

# call from command line
if __name__ == '__main__':
    while(1):
        key = input('enter choice 1.push 2. pop 3.isEmpty 4 getStack 5.exit: ')
        if key == '5':
            break

        print ('&gt; {0}'.format(key))

        if key == '1':
            element = input('enter an element to push onto the stack: ')
            dictionaryCall(key, element)
        else: dictionaryCall(key)
</code></pre>
<p><strong>EXAMPLE</strong>:</p>
<pre><code>enter choice 1.push 2. pop 3.isEmpty 4 getStack 5.exit: '1'
&gt; 1
enter an element to push onto the stack: 'foo'
enter choice 1.push 2. pop 3.isEmpty 4 getStack 5.exit: '3'
&gt; 3
False
enter choice 1.push 2. pop 3.isEmpty 4 getStack 5.exit: '4'
&gt; 4
['foo']
enter choice 1.push 2. pop 3.isEmpty 4 getStack 5.exit:
</code></pre>
<hr/>
<p>A couple of things you need to pay attention to:</p>
<ul>
<li><code>return print (...)</code> is not valid syntax (just write <code>print (...)</code>)</li>
<li>arguments read from the command line via <code>input</code> are evaluated (that means you have to enter e.g. <code>'1'</code> to push an element since your dictionary has string keys</li>
<li>to run a python program from the command line you need to wrap it in <code>if __name__ == '__main__': ...</code> otherwise the file will be parsed but not executed</li>
<li>as @Pm2Ring said in the comments, <code>pop</code> should print the popped element </li>
</ul>
</div>
<span class="comment-copy">Well, where do you want the value for that parameter to come from?</span>
<span class="comment-copy">I want the user to fill the stack @DanielRoseman</span>
<span class="comment-copy">yes, Thankyou @PM2Ring</span>
<span class="comment-copy">How do you want the user to supply the parameter for <code>push</code>? One option is to put it on the same input line as the key, so they enter <code>'1 42'</code> to push 42 onto the stack.  Or you could have an extra <code>input</code> call that gets the parameter from the next line.</span>
<span class="comment-copy">Normally, a stack <code>pop</code> method returns the popped item. Your code doesn't do that. And why are you doing <code>return print</code>? The <code>print</code> function always returns <code>None</code>.</span>
<span class="comment-copy">Thank you. Your code is really useful:)</span>
<span class="comment-copy">Thank you So much. I'll remember all your points</span>
<span class="comment-copy"><code>return print</code> is perfectly valid. It's just not very useful, since it always returns <code>None</code>. Also, reading from the command line (which can be done by accessing <code>sys.argv</code>) is not the same thing as reading from the  terminal  with <code>input</code>.</span>
<span class="comment-copy">@PM2Ring Is is though? Try the following program <code>if __name__ == '__main__':     return print('foo')</code>. I get "SyntaxError: invalid syntax". Also, what's the difference between reading from the terminal and reading from the command line?</span>
<span class="comment-copy">@Becky welcome! If you have any questions, let me know.</span>
<span class="comment-copy">@FK82 You can't have a <code>return</code> statement outside a function.</span>
