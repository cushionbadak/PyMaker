<div class="post-text" itemprop="text">
<p>I was going through the documentation on pickle <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer">(python pickle)</a> and in the comparison with marshal section I found out that in case of multiple references to an object, pickle serializes only one instance of the object and all the other references are pointed to the master copy of the serialized object.</p>
<p>But i want to know how pickle serializes object in case of recursive objects.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you already understand how it's replacing repeated references with pointers to the master, there's really nothing different happening for recursive objects, except for one minor twist.</p>
<hr/>
<p>Let's just step through some simple examples, using a simplified version of what pickle actually does.</p>
<p>To dump <code>[1, 1]</code>, you need to:</p>
<ul>
<li>step into the list

<ul>
<li>dump that 1</li>
<li>dump that second 1</li>
<li>dump a list-build(2) instruction</li>
</ul></li>
</ul>
<hr/>
<p>If you keep a memo dictionary of elements you've seen, you can:</p>
<ul>
<li>look for <code>id([1, 1])</code> in memo—not seen, so step into the list

<ul>
<li>look for <code>id(1)</code> in memo—not seen, so dump the 1, and add it to <code>memo</code></li>
<li>look for <code>id(1)</code> in memo—already there, so just dump a reference</li>
<li>dump a list-build(2) instruction</li>
<li>add the list to memo</li>
</ul></li>
</ul>
<hr/>
<p>Now, what if we have something like <code>lst = []; lst.append(lst)</code> and try to dump that?</p>
<ul>
<li>look for <code>id([...])</code> in memo—not seen, so step into the list

<ul>
<li>look for <code>id([...])</code> in memo—not seen, so step into the list</li>
</ul></li>
</ul>
<p>… oops, that will hit a <code>RecursionError</code>.</p>
<p>So, what you do instead is to add the target for <code>id([...])</code> to memo as soon as you see it—before you actually emit the code that builds the list. That's fine; references only need to know the position, not what's there. So:</p>
<ul>
<li>look for id([...]) in memo—not seen, so add it to memo, then step into the list

<ul>
<li>look for id([...]) in memo—seen, so just put a reference</li>
<li>put a list-build(1) instruction</li>
</ul></li>
</ul>
<hr/>
<p>This does make things slightly slower, and can generate larger pickles, so <code>pickle</code> has a <a href="https://docs.python.org/3/library/pickle.html#pickle.Pickler.fast" rel="nofollow noreferrer"><code>fast</code></a> option to not pass down a memo dict. If you use that option, you will get a <code>RecursionError</code>. And the option is deprecated anyway. As the docs say, the way to get smaller pickles is to build the pickle normally, then call <a href="https://docs.python.org/3/library/pickletools.html#pickletools.optimize" rel="nofollow noreferrer"><code>optimize</code></a> on it, which will filter out any unnecessary PUTs that got created.</p>
<hr/>
<p>Of course the real pickle doesn't dump things like <code>1</code> and <code>list-build(2)</code>—but it's actually not that different. You can use the <a href="https://docs.python.org/3/library/pickletools.html#pickletools.optimize" rel="nofollow noreferrer"><code>pickletools</code></a> module to see what it really <em>does</em> generate:</p>
<pre><code>    0: \x80 PROTO      3
    2: ]    EMPTY_LIST
    3: q    BINPUT     0
    5: (    MARK
    6: K        BININT1    1
    8: K        BININT1    1
   10: e        APPENDS    (MARK at 5)
   11: .    STOP
</code></pre>
<p>As you can see, the <code>1</code> is basically just <code>BININT1 1</code>, and it didn't bother making a shared reference because <code>1</code> is a simple object that's just as small as the reference would be. But, rather than a <code>build-list(2)</code> it actually creates an <code>EMPTY_LIST</code> and then calls and <code>APPENDS</code> to add the elements to the list.</p>
<p>And if you dump the recursively self-including list:</p>
<pre><code>    0: \x80 PROTO      3
    2: ]    EMPTY_LIST
    3: q    BINPUT     0
    5: h    BINGET     0
    7: a    APPEND
    8: .    STOP
</code></pre>
<p>… it's just appending the list to itself. The same way you build it in Python.</p>
</div>
