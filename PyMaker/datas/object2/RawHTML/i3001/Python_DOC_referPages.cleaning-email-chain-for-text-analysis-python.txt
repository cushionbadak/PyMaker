<div class="post-text" itemprop="text">
<p>I've got some text:</p>
<pre><code>text = """From: 'Mark Twain' &lt;mark.twain@gmail.com&gt;
To: 'Edgar Allen Poe' &lt;eap@gmail.com&gt;
Subject: RE:Hello!

Ed,

I just read the Tell Tale Heart. You\'ve got problems man.

Sincerely,
Marky Mark

From: 'Edgar Allen Poe' &lt;eap@gmail.com&gt;
To: 'Mark Twain' &lt;mark.twain@gmail.com&gt;
Subject: RE: Hello!

Mark,

The world is crushing my soul, and so are you.

Regards,
Edgar"""
</code></pre>
<p>Which looks like this:</p>
<pre><code>"From: 'Mark Twain' &lt;mark.twain@gmail.com&gt;\nTo: 'Edgar Allen Poe' &lt;eap@gmail.com&gt;\nSubject: RE:Hello!\n\nEd,\n\nI just read the Tell Tale Heart. You've got problems man.\n\nSincerely,\nMarky Mark\n\nFrom: 'Edgar Allen Poe' &lt;eap@gmail.com&gt;\nTo: 'Mark Twain' &lt;mark.twain@gmail.com&gt;\nSubject: RE: Hello!\n\nMark,\n\nThe world is crushing my soul, and so are you.\n\nRegards,\nEdgar"
</code></pre>
<p>I'm trying to parse out the messages within them. Ultimately I'd like to have a list or dictionary where I have the From and To, and then the message body with which to do some analysis on.</p>
<p>I've tried parsing it out by turning everything lower, and then string splitting.</p>
<pre><code>text = text.lower()
text = text.translate(string.punctuation)
text_list = text.split('+')
text_list = [x for x in text_list if len(x) != 0]
</code></pre>
<p>is there a better way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>That's not how <code>str.translate</code> works. Your <code>text.translate(string.punctuation)</code> uses the punctuation chars as a translation table, so it maps '\n', which is codepoint 10 to the 10th char in <code>string.punctuation</code>, which is '+'. The usual way to use <code>str.translate</code> is to first create a translation table using <a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="nofollow noreferrer"><code>str.maketrans</code></a>, which lets you specify chars to map from, the corresponding chars to map to, and (optionally) chars to delete. If you just want to use it for deletion you can create the table using <a href="https://docs.python.org/3/library/stdtypes.html#dict.fromkeys" rel="nofollow noreferrer"><code>dict.fromkeys</code></a>, eg</p>
<pre><code>table = dict.fromkeys([ord(c) for c in string.punctuation])
</code></pre>
<p>which makes a dict associating the codepoint of each char in <code>string.punctuation</code> to <code>None</code>.</p>
<p>Here's a repaired version of your code that uses <code>str.translate</code> to perform the case conversion and the punctuation deletion in a single step.</p>
<pre><code># Map upper case to lower case &amp; remove punctuation
table = str.maketrans(string.ascii_uppercase, 
    string.ascii_lowercase, string.punctuation)

text = text.translate(table)
text_list = text.split('\n')
for row in text_list:
    print(repr(row))
</code></pre>
<p><strong>output</strong></p>
<pre><code>'from mark twain marktwaingmailcom'
'to edgar allen poe eapgmailcom'
'subject rehello'
''
'ed'
''
'i just read the tell tale heart youve got problems man'
''
'sincerely'
'marky mark'
''
'from edgar allen poe eapgmailcom'
'to mark twain marktwaingmailcom'
'subject re hello'
''
'mark'
''
'the world is crushing my soul and so are you'
''
'regards'
'edgar'
</code></pre>
<hr/>
<p>However, simply deleting all the punctuation is a bit messy, since it joins some words that you may not want joined. Instead, we can translate each punctuation char to a space, and then split on whitespace:</p>
<pre><code># Map all punctuation to space
table = dict.fromkeys([ord(c) for c in string.punctuation], ' ')
text = text.translate(table).lower()
text_list = text.split()
print(text_list)
</code></pre>
<p><strong>output</strong></p>
<pre><code>['from', 'mark', 'twain', 'mark', 'twain', 'gmail', 'com', 'to', 'edgar', 'allen', 'poe', 'eap', 'gmail', 'com', 'subject', 're', 'hello', 'ed', 'i', 'just', 'read', 'the', 'tell', 'tale', 'heart', 'you', 've', 'got', 'problems', 'man', 'sincerely', 'marky', 'mark', 'from', 'edgar', 'allen', 'poe', 'eap', 'gmail', 'com', 'to', 'mark', 'twain', 'mark', 'twain', 'gmail', 'com', 'subject', 're', 'hello', 'mark', 'the', 'world', 'is', 'crushing', 'my', 'soul', 'and', 'so', 'are', 'you', 'regards', 'edgar']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If all you wanted to achieve was to parse a string containing a standard-format email, then use the <a href="https://docs.python.org/3/library/email.parser.html" rel="nofollow noreferrer"><code>email.parser</code> module</a>; it is part of the standard library.</p>
<p>You'll still need to separate the emails in the larger text, but the <code>From: ...</code> header can help there, using a regular expression:</p>
<pre><code>import re
from email import parser, policy

email_start = re.compile(r'(?&lt;=\n)\n(?=From:\s+)')

parser = parser.Parser(policy=policy.default)

for email_text in email_start.split(text):
    message = parser.parsestr(email_text)
    to, from_ = message['to'], message['from']
    body = message.get_payload()
    # do something with the email details
</code></pre>
<p>The regular expression matches any newline character that is directly preceded by another newline (so there is an empty line), followed by the text <code>From:</code> and at least one space (so the next line looks like an email <code>From:</code> header).</p>
<p>Trying to get those same parts by removing or replacing punctuation is not a very effective method of getting the same information, even when you use the tools correctly.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; from email import parser, policy
&gt;&gt;&gt; email_start = re.compile(r'(?&lt;=\n)\n(?=From:\s+)')
&gt;&gt;&gt; parser = parser.Parser(policy=policy.default)
&gt;&gt;&gt; for email_text in email_start.split(text):
...     message = parser.parsestr(email_text)
...     to, from_ = message['to'], message['from']
...     body = message.get_payload()
...     print('Email from:', from_)
...     print('Email to:', to)
...     print('Third line:', body.splitlines(True)[2])
...
Email from: 'Mark Twain' &lt;mark.twain@gmail.com&gt;
Email to: 'Edgar Allen Poe' &lt;eap@gmail.com&gt;
Third line: I just read the Tell Tale Heart. You've got problems man.

Email from: 'Edgar Allen Poe' &lt;eap@gmail.com&gt;
Email to: 'Mark Twain' &lt;mark.twain@gmail.com&gt;
Third line: The world is crushing my soul, and so are you.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>re</code> to split messages (<a href="https://regex101.com/r/QJDH0u/2" rel="nofollow noreferrer">explanation of this regexp on external site</a>). The result is list of dicts with keys <code>'from'</code>, <code>'to'</code>, <code>'subject'</code> and <code>'message'</code>: </p>
<pre><code>text = """From: 'Mark Twain' &lt;mark.twain@gmail.com&gt;
To: 'Edgar Allen Poe' &lt;eap@gmail.com&gt;
Subject: RE:Hello!

Ed,

I just read the Tell Tale Heart. You\'ve got problems man.

Sincerely,
Marky Mark

From: 'Edgar Allen Poe' &lt;eap@gmail.com&gt;
To: 'Mark Twain' &lt;mark.twain@gmail.com&gt;
Subject: RE: Hello!

Mark,

The world is crushing my soul, and so are you.

Regards,
Edgar"""

import re
from pprint import pprint

groups = re.findall(r'^From:(.*?)To:(.*?)Subject:(.*?)$(.*?)(?=^From:|\Z)', text, flags=re.DOTALL|re.M)
emails = []
for g in groups:
    d = {}
    d['from'] = g[0].strip()
    d['to'] = g[1].strip()
    d['subject'] = g[2].strip()
    d['message'] = g[3].strip()
    emails.append(d)

pprint(emails)
</code></pre>
<p>Prints:</p>
<pre><code>[{'from': "'Mark Twain' &lt;mark.twain@gmail.com&gt;",
  'message': 'Ed,\n'
             '\n'
             "I just read the Tell Tale Heart. You've got problems man.\n"
             '\n'
             'Sincerely,\n'
             'Marky Mark',
  'subject': 'RE:Hello!',
  'to': "'Edgar Allen Poe' &lt;eap@gmail.com&gt;"},
 {'from': "'Edgar Allen Poe' &lt;eap@gmail.com&gt;",
  'message': 'Mark,\n'
             '\n'
             'The world is crushing my soul, and so are you.\n'
             '\n'
             'Regards,\n'
             'Edgar',
  'subject': 'RE: Hello!',
  'to': "'Mark Twain' &lt;mark.twain@gmail.com&gt;"}]
</code></pre>
</div>
<span class="comment-copy">What is the purpose of <code>text.split('+')</code>? Your email does not have any + signs.</span>
<span class="comment-copy">After I use <code>text.translate(string.punctuation)</code> it seems to turn my <code>\n</code>s into <code>+</code>s</span>
<span class="comment-copy">Using <code>email.parser</code> to parse email? Genial!</span>
