<div class="post-text" itemprop="text">
<p>My goals is to locate IP address inside a text.</p>
<p>Using grep, I was able to do it with the regular expression <code>([0-9]+\.){3}[0-9]+</code>.</p>
<p>With <code>re</code> from Python, I don't understand why it doesn't work unless I precede the expression inside the parentheses with <code>?:</code></p>
<p>I understand that the use of <code>?:</code> will prevent the creation of a group, but I can't explain the result when this prefix is deleted.</p>
<pre><code>&gt;&gt;&gt; s
'64 bytes from 10.11.1.5: icmp_seq=2 ttl=128 time=215 ms'
&gt;&gt;&gt; p=re.compile(r"(?:[0-9]+\.){3}")
&gt;&gt;&gt; p.findall(s)
['10.11.1.']
&gt;&gt;&gt; p=re.compile(r"([0-9]+\.){3}")
&gt;&gt;&gt; p.findall(s)
['1.']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>See docs for <a href="https://docs.python.org/3/library/re.html#re.findall" rel="nofollow noreferrer">re.findall</a>:</p>
<blockquote>
<p>Return all non-overlapping matches of pattern in string, as a list of strings. The string is scanned left-to-right, and matches are returned in the order found. <strong>If one or more groups are present in the pattern, return a list of groups;</strong> this will be a list of tuples if the pattern has more than one group. Empty matches are included in the result.</p>
</blockquote>
<p>Emphasis mine. There are no capturing groups in your first pattern, so it returns the one full match in the input provided, as a string:</p>
<blockquote>
<p>['10.11.1.']</p>
</blockquote>
<p>But with <code>([0-9]+\.){3}</code>, you <em>do</em> have a capturing group, so rather than returning the full match as a string, it returns a list of groups. Remember that</p>
<blockquote>
<p>A repeated capturing group will only capture the last iteration. Put a capturing group around the repeated group to capture all iterations or use a non-capturing group instead if you're not interested in the data</p>
</blockquote>
<p>which is why only the <em>last</em> repitition of the group is seen in the result, as <code>['1.']</code>. (The full match is not included, only the <em>captured groups</em> are)</p>
</div>
<div class="post-text" itemprop="text">
<p>As per <a href="https://docs.python.org/3/library/re.html#re.findall" rel="nofollow noreferrer">the documentation</a> (emphasis mine):</p>
<blockquote>
<p><code>re.findall(pattern, string, flags=0)</code></p>
<p>Return all non-overlapping matches of <code>pattern</code> in <code>string</code>, as a list of strings. The <code>string</code> is scanned left-to-right, and matches are returned in the order found. <strong>If one or more groups are present in the pattern, return a list of groups;</strong> this will be a list of tuples if the pattern has more than one group. Empty matches are included in the result.</p>
</blockquote>
<p>Your first example uses a non-capturing group, as such, there is “no group” inside of the pattern for <code>findall</code> to return. So instead, it will return a list of all results where the full pattern matched. In your case this means the full IP.</p>
<p>In the second example, there is a capturing group, so the highlighted part of explanation applies: Instead of returning a list of all full matches, you only get a list of groups.</p>
<p>But there is only a single group inside of your pattern. That group is being captured <em>multiple times</em> but every group can only capture a single value; that is a limitation of regular expressions. So for your example, only the last captured value is being available in the <code>findall</code> result.</p>
<p>If you want to capture repeated groups, you will have to actively capture those in a separate group, e.g. using <code>((\d+\.){3})</code>. That will give you two groups. The first will capture <code>10.1.1.</code> and the second the last part <code>1.</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use the following, <a href="https://repl.it/@addohm/SO-51602700" rel="nofollow noreferrer">link to repl</a>: </p>
<pre><code>import re
s = '64 bytes from 10.11.1.5: icmp_seq=2 ttl=128 time=215 ms'
r = re.compile(r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}")
ip = r.findall(s)
print(ip)
</code></pre>
</div>
<span class="comment-copy">As a note, there are better regex's for IP addresses. Try <a href="https://www.regular-expressions.info/ip.html" rel="nofollow noreferrer">this</a></span>
