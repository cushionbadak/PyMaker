<div class="post-text" itemprop="text">
<p>Working with pandas, I have df1 indexed by time samples:</p>
<pre><code>data = '''\
time       flags    input                  
8228835.0  53153.0  32768.0
8228837.0  53153.0  32768.0
8228839.0  53153.0  32768.0
8228841.0  53153.0  32768.0
8228843.0  61345.0  32768.0'''

fileobj = pd.compat.StringIO(data)
df1 = pd.read_csv(fileobj, sep='\s+', index_col='time')
</code></pre>
<p>df2 indicates time ranges with start and end to define ranges where the state of 'check' is True:</p>
<pre><code>data = '''\
        check     start       end
20536   True   8228837   8228993
20576   True   8232747   8232869
20554   True   8230621   8230761
20520   True   8227351   8227507
20480   True   8223549   8223669
20471   True   8221391   8221553'''

fileobj = pd.compat.StringIO(data)
df2 = pd.read_csv(fileobj, sep='\s+')
</code></pre>
<p>What I need to do is add a column for 'check' to df1 and fill out the actual time ranges defined in df2 with the value of True. All others should be False. An example result would be:</p>
<pre><code>             flags    input    check
time                       
8228835.0  53153.0  32768.0    False
8228837.0  53153.0  32768.0    True
8228839.0  53153.0  32768.0    True
8228841.0  53153.0  32768.0    True
8228843.0  61345.0  32768.0    True
....
8228994.0. 12424.0. 32768.0.   False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can make a list or ranges, and then use <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Index.isin.html" rel="nofollow noreferrer"><code>pd.Index.isin</code></a> with <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>itertools.chain</code></a>:</p>
<pre><code>from itertools import chain

df2 = df2[df2['check'] == True]

ranges = [range(i, j) for i, j in zip(df2['start'], df2['end'])] #missing single quote

df.loc[df.index.isin(ranges), 'check'] = True

print(df1)

             flags    input  check
time                              
8228835.0  53153.0  32768.0  False
8228837.0  53153.0  32768.0   True
8228839.0  53153.0  32768.0   True
8228841.0  53153.0  32768.0   True
8228843.0  61345.0  32768.0   True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you can using <code>IntervalIndex</code> with <code>loc</code></p>
<pre><code>df2.index=pd.IntervalIndex.from_arrays(df2.start,df2.end,'both')
df2.loc[df.index]
Out[174]: 
        check  start  end
[1, 2]   True      1    2
[4, 5]   True      4    5
[7, 8]   True      7    8
df['newcol']=df2.loc[df.index].check.values.tolist()
df
Out[176]: 
       flags    input  newcol
flags                        
2          2  32768.0    True
4          4  32768.0    True
7          7  32768.0    True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A list comprehension using <code>any()</code>. No clue about the actual performance though, would be nice if you could run the %timings for us!</p>
<pre><code>df1['check'] = [any(start &lt;= i &lt;= end for start,end in 
                    zip(df2['start'], df2['end'])) for i in df1.index]

print(df1)
</code></pre>
<p>Returns:</p>
<pre><code>             flags    input  check
time                              
8228835.0  53153.0  32768.0  False
8228837.0  53153.0  32768.0   True
8228839.0  53153.0  32768.0   True
8228841.0  53153.0  32768.0   True
8228843.0  61345.0  32768.0   True
</code></pre>
</div>
<span class="comment-copy">Why is 8228835 <code>True</code>? I don't see any ranges in <code>df2</code> including this number.</span>
<span class="comment-copy">Probably just a type error.</span>
<span class="comment-copy">Correct - typo on my part.</span>
<span class="comment-copy">Never thought you can chain the range like this , nice one dude !!</span>
<span class="comment-copy">@Wen, It's news to me too. I can only assume <code>chain.from_iterable(ranges)</code> is called <i>each</i> time. Because it's an iterator you can't reuse it, so a new iterator is used each time. I hope someone times these solutions, your <code>IntervalIndex</code> looks neat!</span>
<span class="comment-copy">Or, more likely, there's some list conversion going on, which is inefficient :(.</span>
<span class="comment-copy">@jpp - this worked with a minor modification to the assignment. I edited your answer to match what worked for me. Wall time across ~1.8M rows on this sample data was 3.74 seconds. Thanks for pointing me in this direction!</span>
<span class="comment-copy">@schwim, Sure, I've improved your edit [because chained assignment is discouraged in the docs].</span>
<span class="comment-copy">I get <code>KeyError</code> at the <code>df2.loc[df.index]</code> part. Need to noodle on this one a bit more...</span>
<span class="comment-copy">Neat idea, and thank you! Unfortunately, df1 is upwards of 2 million rows. I shortened it down to 10k rows and this loop took 43 seconds to finish. The result was not a close match to the df2 ranges.</span>
