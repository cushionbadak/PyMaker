<div class="post-text" itemprop="text">
<p>I'm trying to implement in Python the builder pattern with some fail safes. This fail safes would normally be implemented in OOP using interfaces and would restrict the user of using some methods before others or at all, unless the current object can be manipulated using this methods. 
How can such fail safes be implemented in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>The Python <a href="https://docs.python.org/3/library/abc.html" rel="nofollow noreferrer">Abstract Base Class module (ABC)</a> allows for such restrictions. Using Python 3:</p>
<pre><code>from abc import ABC, abstractmethod


class AbstractFoo(ABC):

    @abstractmethod
    def foo(self):
        pass

class ConcreteFoo(AbstractFoo):
    pass

if __name__ == "__main__":
    c = ConcreteFoo()     
</code></pre>
<p>Executing this script will result in the following error:</p>
<pre><code>TypeError: Can't instantiate abstract class ConcreteFoo with abstract methods foo
</code></pre>
<p>This error can be resolved by providing an implementation of the <code>foo</code> method:</p>
<pre><code>from abc import ABC, abstractmethod


class AbstractFoo(ABC):

    @abstractmethod
    def foo(self):
        pass

class ConcreteFoo(AbstractFoo):

    def foo(self):
        print('Made it to foo')

if __name__ == "__main__":
    c = ConcreteFoo()
    c.foo()    
</code></pre>
<p>Executing this script results in the following:</p>
<pre><code>Made it to foo
</code></pre>
</div>
<span class="comment-copy">What I'm trying to say, is that I want to define some mandatory methods. A similar idea is found here: <a href="https://blog.jayway.com/2012/02/07/builder-pattern-with-a-twist/" rel="nofollow noreferrer">blog.jayway.com/2012/02/07/builder-pattern-with-a-twist</a> However, I'm having issues implementing this with Python.</span>
