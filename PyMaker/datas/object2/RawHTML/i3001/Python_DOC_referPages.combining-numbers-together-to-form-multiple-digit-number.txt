<div class="post-text" itemprop="text">
<p>I'm trying to combine multiple numbers together in python 3.7 but I'm having no luck.</p>
<p>I want it to be like such:</p>
<pre><code>1 + 4 + 5 = 145 
</code></pre>
<p>I know this is simple but I'm getting nowhere!</p>
</div>
<div class="post-text" itemprop="text">
<p>You could just write a function that concatenates numbers or any other object/datatype as a string</p>
<pre><code>concatenate = lambda *args : ''.join([str(arg) for arg in args])

a = 1

print(concatenate(4, 5, 6))

print(concatenate(a, MagicNumber(1), "3"))
</code></pre>
<p>But also in python you can make a class and write magic functions that control the way that objects of your class are added, subtracted etc. You could make a class to store a number and add it like you want to. You could save this code in a file and import it or paste it into your own script.</p>
<pre><code>class MagicNumber():
    value = 0

    def __init__(self, value):
        self.value = int(value)

    def __str__(self):
        return str(self.value)

    def __int__(self):
        return self.value

    def __repr__(self):
        return self.value

    def __add__(self, b):
        return MagicNumber(str(self)+str(b))

if __name__ == "__main__":
    a = MagicNumber(4)
    b = MagicNumber(5)
    c = MagicNumber(6)

    print(a+b+c)

    #You could even do this but I strongly advise against it
    print(a+5+6)
</code></pre>
<p>And heres a link to the documentation about these "magic methods"
<a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">https://docs.python.org/3/reference/datamodel.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>reduce</code> to do this in a mathematical way</p>
<pre><code>&gt;&gt;&gt; l = [1, 4, 5]
&gt;&gt;&gt; 
&gt;&gt;&gt; from functools import reduce
&gt;&gt;&gt; reduce(lambda x,y: 10*x+y, l)
145
</code></pre>
<p>Alternatively, you can use string concat</p>
<pre><code>&gt;&gt;&gt; int(''.join(map(str, l)))
145
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to do this numerically, consider what base-10 numerals means:</p>
<pre><code>145 = 1 * 10**2 + 4 * 10**1 + 5 * 10**0
</code></pre>
<p>So, you need to get N numbers that range from N-1 to 0, in lockstep with the digits. One way to do this is with <code>enumerate</code> plus a bit of extra arithmetic:</p>
<pre><code>def add_digits(*digits):
    total = 0
    for i, digit in enumerate(digits):
        total += digit * 10**(len(digits)-i-1)
    return total
</code></pre>
<p>Now:</p>
<pre><code>&gt;&gt;&gt; add_digits(1, 4, 5)
145
</code></pre>
<p>Of course this only works with sequences of digits—where you know how many digits you have in advance. What if you wanted to work with any iterable of digits, even an iterator coming for a generator expression or something? Then you can rethink the problem:</p>
<pre><code>1456 = ((1 * 10 + 4) * 10 + 5) * 10 + 6
</code></pre>
<p>So:</p>
<pre><code>def add_digits(digits):
    total = 0
    for digit in digits:
        total = total * 10 + digit
    return total

&gt;&gt;&gt; add_digits((1, 3, 5, 6))
1356
&gt;&gt;&gt; add_digits(n for n in range(10) if n%2)
13579
</code></pre>
<hr/>
<p>Notice that you can easily extend either version to other bases:</p>
<pre><code>def add_digits(*digits, base=10):
    total = 0
    for i, digit in enumerate(digits):
        total += digit * base**(len(digits)-i-1)
    return total

&gt;&gt;&gt; hex(add_digits(1, 0xF, 2, 0xA, base=16))
'0x1f2a'
</code></pre>
<p>… which isn't <em>quite</em> as easy to do with the stringy version; you can't just do <code>int(''.join(map(str, digits)), base)</code>, but instead need to replace that <code>str</code> with a function that converts to a string in a given base. Which there are <a href="https://stackoverflow.com/questions/2267362/">plenty of solutions for</a>, but no obvious and readable one-liner.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should try casting the numbers as strings! When you do something like this</p>
<pre><code>str(1)+str(4)+str(5)
</code></pre>
<p>You will get 145, but it will be a string. If you want it to be a number afterwards, then you can cast the whole thing as an integer.</p>
<pre><code>int(str(1)+str(4)+str(5))
</code></pre>
<p>or just set the answer to a new variable and cast that as an integer.</p>
</div>
<div class="post-text" itemprop="text">
<p>The easiest way to do this is to concat them as strings, and then parse it back into a number.</p>
<pre><code>x = str(1) + str(4) + str(5)
print(int(x))
</code></pre>
<p>or</p>
<pre><code>int(str(1) + str(4) + str(5))
</code></pre>
</div>
<span class="comment-copy"><code>int(str(1)+ str(4) + str(5))</code></span>
<span class="comment-copy">If you know the numbers are all one digit: <code>100*x + 10*y + z</code>.  Otherwise, <code>int(str(x) + str(y) + str(z))</code>.</span>
<span class="comment-copy">If you want to do this numerically rather than… stringeriffically (there must be a word for that…), you need to think about how base-10 numbers work: <code>digit * 10**i</code>, where <code>i</code> ranges from <code>n-1</code> to <code>0</code>.</span>
<span class="comment-copy">@abarnert: It's usually just called "string processing" or "string manipulation". <a href="https://en.wikipedia.org/wiki/SNOBOL" rel="nofollow noreferrer"><code>Snobol</code></a> is/was really good at it.</span>
<span class="comment-copy">@abarnert: Textually then — and it's a relatively short adverb.</span>
<span class="comment-copy">Approach is overkill IMO.</span>
<span class="comment-copy">I made the second solution more simplified. Thanks for the feedback @martineau</span>
<span class="comment-copy">West: I meant wrt creating a custom <code>class</code> to do this. Python has tons of built-in text processing features which, if used properly, would likely result in less code being needed and would also run significantly faster.</span>
<span class="comment-copy">This is the best way I can think of to make a line execute as similar as possible to the way the question's author wants it to. Also if the question's author wants to do similar things with subtract or other operators this would be a solution that covers that as well. @martineau</span>
<span class="comment-copy">Thank you very much</span>
<span class="comment-copy">Thank you very much</span>
<span class="comment-copy">Thank you very much</span>
<span class="comment-copy">Thank you very much</span>
