<div class="post-text" itemprop="text">
<p>I have <code>array2D = [[1,2,3],[4,5,6]]</code>. What I want is a function which takes an index and returns the elements in 1D array.</p>
<pre><code>Example: fn(0) -&gt; returns [1,4]
         fn{1) -&gt; returns [2,5]
</code></pre>
<p>I need a fast way to do this.</p>
</div>
<div class="post-text" itemprop="text">
<p>you can use <code>lambda</code> and <code>list comprehension</code>:</p>
<pre><code>array2D = [[1,2,3],[4,5,6]]

fn = lambda x: [item[x] for item in array2D]

print(fn(0)) # [1, 4]
print(fn(1)) # [2, 5]
print(fn(2)) # [3, 6]
</code></pre>
<p>as suggested in the comments, you may apply the <em>same</em> concept with a function definition:</p>
<pre><code>def fn(x): return [item[x] for item in array2D]

print(fn(0)) # [1, 4]
print(fn(1)) # [2, 5]
print(fn(2)) # [3, 6]
</code></pre>
<p>Lambda functions are <a href="https://stackoverflow.com/questions/890128/why-are-python-lambdas-useful">pretty useful</a>, and let you define operation in a really clear way.<br/>
In our example, our lambda accept a variable <code>x</code>, which represent the index we want of each <code>item</code> in <code>array2D</code></p>
<p>Then you have <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>, similarly to lambda function, they are a really powerful tool and a <em>must</em> in python</p>
<p><em>In this situation you should prefear the function definiton, as suggested by <a href="https://www.python.org/dev/peps/pep-0008/#programming-recommendations" rel="nofollow noreferrer">PEP-8</a>.</em></p>
</div>
<div class="post-text" itemprop="text">
<p>The following list comprehension will work:</p>
<pre><code>def fn(i, lst):
    return [sublst[i] for sublst in lst]

&gt;&gt;&gt; array2D = [[1, 2, 3], [4, 5, 6]]
&gt;&gt;&gt; fn(0, array2D)
[1, 4]
&gt;&gt;&gt; fn(1, array2D)
[2, 5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>operator.itemgetter</code>:</p>
<pre><code>array2D = [[1,2,3],[4,5,6]]

from operator import itemgetter

def fn(x, k):
    return list(map(itemgetter(k), x))

fn(array2D, 0)  # [1, 4]
</code></pre>
<p>If you want to define new functions for retrieving a specific index, you can do so via <code>functools.partial</code>:</p>
<pre><code>from functools import partial

def fn(x, k):
    return list(map(itemgetter(k), x))

get_zero_index = partial(fn, k=0)
get_zero_index(array2D)  # [1, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here are my two cents using slicing (I have to use additional <code>np.array()</code> for this because your original data was a <code>list</code>):</p>
<pre><code>array2D = np.array([[1,2,3],[4,5,6]])

def fn(n): return (list(array2D[:,n]))

print (fn(0), fn(1), fn(2))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about a generator?</p>
<p>We could use <code>zip</code> to pack them, then create a empty list to store the generated data:</p>
<pre><code>class myZip(object):
    __slots__ = ('zipData', 'interList')

    def __init__(self, *args):
        self.zipData = zip(*args)
        self.interList = []

    def __call__(self, index):
        try:
            return self.interList[index]
        except IndexError:
            try:
                if index == 0:
                    self.interList.append(next(self.zipData))
                    return self.interList[index]
                for i in range(index-(len(self.interList)-1)):
                    self.interList.append(next(self.zipData))
                return self.interList[index]
            except StopIteration:
                raise IndexError("index out of range")

    def __iter__(self):
        for i in self.interList:
            yield i

        for i in self.zipData:
            yield i

array2D = [[1,2,3],[4,5,6]]

a = myZip(*array2D)

print(a(2))
print(a(1))
print(a(0))
---
(3, 6)
(2, 5)
(1, 4)
</code></pre>
<p>The benefits of this is we do not need to produce all data at once.</p>
</div>
<span class="comment-copy">Can you explain why (if it all) lambda functions are clearer than regular functions? IMO, this is an unnecessary extra function call.</span>
<span class="comment-copy">@jpp I did not say that lambda function are clearer than regular functions. I said that lambda function are really clear: usually because the concision needed to define the operation in one line requires to have a clear understanding of the problem. Of course, we can complicate anything, if we want</span>
<span class="comment-copy">OK, it seems like <code>lambda</code> is, in fact, <i>complicating</i> matters. Why not <code>def fn(x): return [item[x] for item in array2D]</code>? Still one line. And less characters (if it matters).</span>
<span class="comment-copy">@jpp how it is complicating matters?</span>
<span class="comment-copy">If you <i>really</i> want a function to return a function for such a generic task, use <code>functools.partial</code>, see my update.</span>
