<div class="post-text" itemprop="text">
<p><strong>NOTE</strong>: This is about importing <em>modules</em> and not classes, functions from those modules, so I don't think it's a duplicate of the mane "ImportError: cannot import name" results in SO, at least I haven't found one that matches this.</p>
<p>I do understand that importing classes or functions from modules by name might cause a problem, since the module itself might not have been fully initialized yet if there's a circular dependency, but that's not the case here.</p>
<p>In order to reproduce this issue, create three modules that have a circular dependency on it.</p>
<p>First create a package:</p>
<pre><code>$ mkdir pkg
$ touch pkg/__init__.py
</code></pre>
<p>Then create pkg/a.py, with contents:</p>
<pre><code>from __future__ import print_function
from __future__ import absolute_import

from . import b

def A(x):
    print('I am A, x={}.'.format(x))
    b.B(x + 1)

def Z(x):
    print('I am Z, x={}. I\'m done now!'.format(x))
</code></pre>
<p>And pkg/b.py, with contents:</p>
<pre><code>from __future__ import print_function
from __future__ import absolute_import

from . import c

def B(x):
    print('I am B, x={}.'.format(x))
    c.C(x * 2)
</code></pre>
<p>And pkg/c.py, with contents:</p>
<pre><code>from __future__ import print_function
from __future__ import absolute_import

from . import a

def C(x):
    print('I am C, x={}.'.format(x))
    a.Z(x ** 2)
</code></pre>
<p>And a main.py (in the top directory) which calls into them:</p>
<pre><code>from __future__ import print_function
from __future__ import absolute_import

from pkg import a

if __name__ == '__main__':
    a.A(5)
</code></pre>
<p>I expected there would be no problems with the circular dependency, since there are no references to items within each of the modules during import time (i.e. no references to a.A from modules b or c, except for the call inside the body of c.C).</p>
<p>And, indeed, running this with python3 works just fine:</p>
<pre><code>$ python3 main.py 
I am A, x=5.
I am B, x=6.
I am C, x=12.
I am Z, x=144. I'm done now!
</code></pre>
<p>(This is Python 3.5.3 on Debian Stretch, for the record.)</p>
<p>But with python2 (Python 2.7.13), it doesn't really work, and it complains about the circular dependency...</p>
<pre><code>$ python main.py 
Traceback (most recent call last):
  File "main.py", line 5, in &lt;module&gt;
    from pkg import a
  File "/tmp/circular/pkg/a.py", line 5, in &lt;module&gt;
    from . import b
  File "/tmp/circular/pkg/b.py", line 5, in &lt;module&gt;
    from . import c
  File "/tmp/circular/pkg/c.py", line 5, in &lt;module&gt;
    from . import a
ImportError: cannot import name a
</code></pre>
<p>So my questions are:</p>
<ul>
<li><p>Why am I running into a circular dependency problem, if I'm not importing or referring to specific classes or functions from my modules, just the modules themselves?</p></li>
<li><p>Why does this only happen on Python 2? (References to PEP, code, release notes or articles about a fix for this in Python 3 would be appreciated.)</p></li>
<li><p>Is there any way to avoid this problem in Python 2, while still not breaking the circular dependency of the modules? I believe not all circular dependencies cause this issue (even in Python 2), so I'm wondering which cases are safe and which cases are not...</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>When Python starts loading the <code>pkg.a</code> module, it sets <code>sys.modules['pkg.a']</code> to the corresponding module object, but it only sets the <code>a</code> attribute of the <code>pkg</code> module object at the very end of loading the <code>pkg.a</code> module. This will be relevant later.</p>
<hr/>
<p>Relative imports are <code>from</code> imports, and they behave the same. After <code>from . import whatever</code> figures out that <code>.</code> refers to the <code>pkg</code> package, it goes ahead with the regular <code>from pkg import whatever</code> logic.</p>
<p>When <code>c.py</code> hits <code>from . import a</code>, first, it sees that <code>pkg.a</code> is already in <code>sys.modules</code>, indicating that <code>pkg.a</code> has already been loaded or is in the middle of being loaded. (It's in the middle of being loaded, but this code path doesn't care.) It skips to the second part of its job, retrieving <code>pkg.a</code> and assigning it to the <code>a</code> name in the local namespace, but it doesn't just retrieve <code>sys.modules['pkg.a']</code> to do this.</p>
<p>You know how you can do stuff like <code>from os import open</code>, even though <code>os.open</code> is a function, not a module? That kind of import can't go through <code>sys.modules['os.open']</code>, because <code>os.open</code> isn't a module and isn't in <code>sys.modules</code>. Instead, all <code>from</code> imports, <em>including all relative imports</em>, attempt an attribute lookup on the module they're importing names from. <code>from . import a</code> looks up the <code>a</code> attribute on the <code>pkg</code> module object, but it's not there, because that attribute only gets set when <code>pkg.a</code> finishes loading.</p>
<p>On Python 2, that's it. End of import. <code>ImportError</code> here. On Python 3 (specifically 3.5+), because they wanted to encourage relative imports and this behavior is really inconvenient, <code>from</code> imports try one more step. If the attribute lookup fails, <em>now</em> they try <code>sys.modules</code>. <code>pkg.a</code> is in <code>sys.modules</code>, so the import succeeds. You can see the discussion for this change in the CPython issue tracker at <a href="https://bugs.python.org/issue17636" rel="nofollow noreferrer">issue 17636</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I am not sure how Python 3 solved the issue but my experience tells Python 2 really can't make it work. The right way to solve the issue is to either:</p>
<ol>
<li>Be careful not to introduce this in your code</li>
<li>Do import inside functions, right at the place you need it</li>
</ol>
<p>Which personally I prefer the latter.</p>
<p>On why, the module system in Python will not mark a module successfully loaded until it is. So at your "import a", Python will not know it already loaded "a" until all dependent loads, "b" and "c" are done as it gone through the whole "a.py" file. So in processing "import c", it will try again to "import a" instead of finding that "a" is something it can skip.</p>
</div>
<span class="comment-copy">Very interesting and thanks for the thorough answer with all the detail! I just went back to my test case and updated the imports to use <code>import pkg.a</code>, <code>import pkg.b</code>, etc. and refer to the modules by the full name (so <code>pkg.a.A(...)</code> etc.) and that makes the Python 2 case work! And that confirms everything like you explained! Thanks for the reference to the issue tracker and patch, that's really helpful as well.</span>
<span class="comment-copy">Python 3 creates and registers the empty module object before running any of its code. Further imports just retrieve the registered module, which is why an import error will occur if you access attributes outside a function or method, or if you try to import individual attributes.</span>
<span class="comment-copy">@MadPhysicist do you have some evidence to back your claims? And some reference to Python 3 release notes or PEP that shows that this behavior has changed from Python 2?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/reference/import.html#loading" rel="nofollow noreferrer">docs.python.org/3/reference/import.html#loading</a>. Second bullet point under the code snippet</span>
