<div class="post-text" itemprop="text">
<p>Usually super works like the following in Python:</p>
<pre><code>class SubClass(MyParentClass):
    def __init__(self):
        super(**SubClass**, self).__init__()
</code></pre>
<p>But recently I found something like the following also works? No crash, behaviors as expected:</p>
<pre><code>class SubClass(MyParentClass):
    def __init__(self):
        super(**MyParentClass**, self).__init__()
</code></pre>
<p>How come? What does the second case mean?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>super(MyParentClass, self).__init__()</code> Will call grandparent class  (If it has one)</p>
<pre><code>class BaseClass:
    def __init__(self):
        print("BaseClass")


class MyParentClass(BaseClass):

    def __init__(self):
        print("MyParentClass")


class SubClass(MyParentClass):
    def __init__(self):
        super(SubClass, self).__init__()


class SubClassTwo(MyParentClass):
    def __init__(self):
        super(MyParentClass, self).__init__()


SubClass() # output: MyParentClass
SubClassTwo()  # output: BaseClass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Actually, the behaviour it's not the same.</p>
<p>From the documentation of <code>super()</code> (<a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow noreferrer">docs here</a>):</p>
<blockquote>
<p>Return a proxy object that delegates method calls to a parent or
  sibling class of type.</p>
</blockquote>
<p>So if you have:</p>
<pre><code>class MyParentClass:
    def __init__(self):
        print('MyParentClass.__init__ called!')

class SubClass(MyParentClass):
    def __init__(self):
        super(MyParentClass, self).__init__()
</code></pre>
<p>The call:</p>
<pre><code>super(MyParentClass, self).__init__()
</code></pre>
<p>has no effect, because <code>MyParentClass</code> has no parents but <code>object</code>.</p>
<p>If you call:</p>
<pre><code>super(SubClass, self).__init__()
</code></pre>
<p>It will print:</p>
<pre><code>MyParentClass.__init__ called!
</code></pre>
<p>Because <code>SubClass</code> has one parent, <code>MyParentClass</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow noreferrer">The documentation for <code>super</code> says (in part):</a></p>
<blockquote>
<p><code>super([type[, object-or-type]])</code></p>
<p>Return a proxy object that delegates method calls to a parent or
  sibling class of <code>type</code>. This is useful for accessing inherited methods
  that have been overridden in a class. The search order is same as that
  used by <code>getattr()</code> except that the type itself is skipped. </p>
</blockquote>
<p>So <code>super(MyParentClass, self)</code> resolves to a proxy object that will pass method calls through to the parents and siblings of <code>MyParentClass</code>.  It shouldn't be surprising that this works.  If your parent class is </p>
<pre><code>class MyParentClass:
    def __init__(self, **kwargs):
        ...
        super(MyParentClass, self).__init__(kwargs)
</code></pre>
<p>Then when you make a <code>SubClass</code> object, the <code>self</code> in the <code>MyParentClass</code> <code>super</code> call is a <code>SubClass</code> instance.</p>
</div>
<span class="comment-copy"><i>because MyParentClass has no parents</i> is not true, the parent is <code>object</code>.</span>
<span class="comment-copy">@heemayl that's true, every class has parent <code>object</code>. Edited my answer.</span>
