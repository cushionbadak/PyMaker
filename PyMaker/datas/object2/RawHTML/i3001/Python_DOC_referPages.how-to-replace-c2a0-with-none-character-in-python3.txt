<div class="post-text" itemprop="text">
<p>I want to convert <code>b'\xc2\xa0\x38'</code> into <code>b'x38'</code> in python3.</p>
<pre><code>b'\xc2\xa0\x38'.replace(u'\xc2\xa0',"")
b'\xc2\xa0\x38'.replace(u'\xc2a0',"")

TypeError: a bytes-like object is required, not 'str'  
</code></pre>
<p>In the webpage,the <code>c2 a0</code> means NO-BREAK SPACE whose unicode point is U+00A0       .     </p>
<pre><code>Unicode  code point character   UTF-8  (hex.)   name
U+00A0                          c2 a0           NO-BREAK SPACE
</code></pre>
<p>Notice: <code>c2a0</code> is unprintable , character column is blank here.    </p>
<p><a href="https://www.utf8-chartable.de/unicode-utf8-table.pl" rel="noreferrer">relationship on unicode point,character,utf-8 </a> </p>
<p>How to  convert <code>b'\xc2\xa0\x38'</code> into <code>b'\x38'</code> with replace method?   </p>
</div>
<div class="post-text" itemprop="text">
<p>You were already almost there:</p>
<pre><code>b'\xc2\xa0\x38'.replace(b'\xc2\xa0',b'')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>b'\xc2\xa0\x38'.replace(u'\xc2\xa0',"")
b'\xc2\xa0\x38'.replace(u'\xc2a0',"")
</code></pre>
<p>Since <code>b'\xc2\xa0\x38'</code> is a <a href="https://docs.python.org/3/library/stdtypes.html#bytes-objects" rel="noreferrer">bytes object</a>, you cannot use string methods on it. So when you call <code>.replace()</code> on it, you are not calling <code>str.replace</code> but <a href="https://docs.python.org/3/library/stdtypes.html#bytes.replace" rel="noreferrer"><code>bytes.replace</code></a>. While those two look and behave very similarly, they still operate on different types:</p>
<p><code>str.replace</code> replaces a <em>substring</em> inside of a <em>string</em> with another <em>string</em>. And <code>bytes.replace</code> replaces a <em>sub-bytestring</em> inside of a <em>bytestring</em> with another <em>bytestring</em>. So the types of all arguments always match:</p>
<pre><code>str.replace(str, str)
bytes.replace(bytes, bytes)
</code></pre>
<p>So in order to replace something inside of a bytes string, you need to pass bytes objects:</p>
<pre><code>&gt;&gt;&gt; b'\xc2\xa0\x38'.replace(b'\xc2\xa0', b'')
b'8'
&gt;&gt;&gt; b'\xc2\xa0\x38'.replace(b'\xc2a0', b'')
b'\xc2\xa08'
</code></pre>
<blockquote>
<p>How to make <code>b'8'</code> displayed as <code>b'\x38'</code>?</p>
</blockquote>
<p>You generall cannot do that. <code>b'8'</code> and <code>b'\x38'</code> are both equal to another:</p>
<pre><code>&gt;&gt;&gt; b'8' == b'\x38'
True
</code></pre>
<p>Both contain the same single byte value, a <code>0x38</code>. It’s just that there are multiple ways to represent that content as a bytes literal in Python. Just like you can write <code>10</code>, <code>0xA</code>, <code>0b1010</code> or <code>0o12</code> to refer to the <em>same</em> <code>int</code> object with the decimal value of 10, you can describe a bytes object in multiple ways.</p>
<p>Now, when you use the interactive Python REPL, when you just write <code>b'\x38'</code>, then Python will interpret that bytes literal, create a bytes object with the single byte 0x38, and then the REPL will print out the <code>repr()</code> of that bytes object. And the repr() of bytes objects just happen to attempt to use ASCII letters whenever possible.</p>
<p>There is no way to change this, but there’s also no <em>need</em> to change that. The <code>b'8'</code> that you see is just <em>one</em> representation of the same bytes object. And if you use that object and do something with it (e.g. write it to a file, transform it, or send over the network), then it’s the actual bytes that are sent, and not some string representation of the bytes object.</p>
<p>If you however want to actually <em>print</em> the bytes object, you can deliberately convert it into a string using your favorite representation. For example, if you want a hex representation of your bytes string, you could use <a href="https://stackoverflow.com/q/6624453/216074">one of the many ways</a> to do that:</p>
<pre><code>&gt;&gt;&gt; print(b'8'.hex())
38
&gt;&gt;&gt; print(b'\x38'.hex())
38
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Is that data being read from a file? Maybe you opened the file in binary mode:</p>
<pre><code>with open(fname, 'rb') as f:
</code></pre>
<p>This means that the data read from the file is returned as <code>bytes</code> object, not <code>str</code>.</p>
<p>If that is so, try to open the file as a textfile instead by replacing the <code>'rb'</code> mode with <code>'r'</code>.</p>
</div>
<span class="comment-copy">By passing bytes-like objects instead of strings?</span>
<span class="comment-copy">How to make <code>b'8'</code> displayed as <code>b'\x38'</code>?</span>
<span class="comment-copy"><code>print(''.join([r'\x'+hex(b)[2:] for b in b'\xc2\xa0\x38'.replace(b'\xc2\xa0',b'')]))</code></span>
