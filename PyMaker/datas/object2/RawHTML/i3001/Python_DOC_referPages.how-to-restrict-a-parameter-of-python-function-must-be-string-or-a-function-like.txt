<div class="post-text" itemprop="text">
<p>For example, the following, the first parameter should be restricted to a string, and the second parameter should be a function. However, this is wrong syntax for both. Anyone can help suggest the correct syntax to impose the type restriction?</p>
<pre><code>def GetArg(msg:String, converter:lambda, default):
    print("{}, the default is '{}':".format(msg, default))
    return converter(stdin.readline().strip())
</code></pre>
<p>It gives error</p>
<pre><code>Traceback (most recent call last):
  File "E:/stdin_ext.py", line 4, in &lt;module&gt;
    def GetArg(msg:String, converter, default:String):
NameError: name 'String' is not defined
</code></pre>
<p>and</p>
<pre><code>  File "E:/stdin_ext.py", line 4
    def GetArg(msg:String, converter:lambda, default:String):
                                       ^
SyntaxError: invalid syntax
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the typing module.</p>
<pre><code>from typing import Callable

def get_arg(msg: str, converter: Callable[[str], str], default) -&gt; str:
    print(f"{msg}, the default is '{default}':")
    return converter(stdin.readline().strip())
</code></pre>
<p>assuming your function <code>converter</code> takes a <code>string</code> a returns a <code>string</code>, and that <code>get_arg</code> returns a <code>string</code>. Note the code has also been modified to follow python's <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">naming convention</a> and uses <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer"><code>f strings</code></a> over older style format strings.</p>
<p>Also note that these <code>type hints</code> are just that, <em>hints</em>. They are not checked statically or at runtime. Although, certain IDE's will help you ensure they are correct.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should use <code>str</code> instead of <code>String</code> and <a href="https://docs.python.org/3/library/typing.html#typing.Callable" rel="nofollow noreferrer"><code>Callable</code></a> instead of lambda:</p>
<pre><code>from typing import Callable    

def GetArg(msg:str, converter:Callable, default):
    print("{}, the default is '{}':".format(msg, default))
    return converter(stdin.readline().strip())
</code></pre>
<p>That is, unless you have a specific class called <code>String</code> and you are expecting an argument of its type.</p>
<p>When you write <code>lambda</code> you are <strong>defining</strong> a new lambda, not specifying a type for a function, whence the error.</p>
<p>I believe it is also important to point out that types in python are only a useful notation but it does not raise any error by itself, for example I could still call <code>GetArg(1,2,3)</code> and don't get any error <strong>just by the type hinting</strong> (of course I would get an error trying to pass an argument to an int afterwards).</p>
</div>
<span class="comment-copy">Isn't a <a href="https://docs.python.org/3/library/typing.html#callable" rel="nofollow noreferrer">Callable</a> annotation, e.g. <code>get_next_item: Callable[[], str]</code> a better fit?</span>
<span class="comment-copy"><code>Callable[[], str]</code> implies that the function takes no arguments and returns a string. This is not the case, as the function clearly takes a string. @RachSharp was just giving an example.</span>
