<div class="post-text" itemprop="text">
<p>I want to use power series to approximate some PDEs. The first step I need to generate symbolic multivariate polynomials, given a numpy ndarray. </p>
<p>Consider the polynomial below:</p>
<p><a href="https://i.stack.imgur.com/eBQVK.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/eBQVK.png"/></a></p>
<p>I want to take a <code>m</code> dimensional <code>ndarray</code> of <code>D=[d1,...,dm]</code> where <code>dj</code>s are non-negative integers, and generate a symbolic multivariate polynomial in the form of symbolic expression. The symbolic expression consists of monomials of the form:</p>
<p><a href="https://i.stack.imgur.com/pvDDT.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/pvDDT.png"/></a></p>
<p>Fo example if <code>D=[2,3]</code> the output should be </p>
<p><a href="https://i.stack.imgur.com/nDhGD.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/nDhGD.png"/></a></p>
<p>For this specific case I could nest two <code>for loops</code> and add the expressions. But I don't know what to do for <code>D</code>s with arbitrary length. If I could generate the <code>D</code> dimensional ndarrays of <code>A</code> and <code>X</code> without using for loops, then I could use  <code>np.sum(np.multiply(A,X))</code> as <a href="https://en.wikipedia.org/wiki/Frobenius_inner_product" rel="nofollow noreferrer">Frobenius inner product</a> to get what I need. </p>
</div>
<div class="post-text" itemprop="text">
<p>I would use <a href="http://docs.sympy.org/latest/modules/matrices/matrices.html#sympy.matrices.dense.symarray" rel="nofollow noreferrer"><code>symarray</code></a> and <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> for this:</p>
<pre><code>from sympy import *
import itertools
D = (3, 4, 2, 3)
a = symarray("a", D)
x = symarray("x", len(D))
prod_iterator = itertools.product(*map(range, D))
result = Add(*[a[p]*Mul(*[v**d for v, d in zip(x, p)]) for p in prod_iterator])
</code></pre>
<p>The result being</p>
<pre><code>a_0_0_0_0 + a_0_0_0_1*x_3 + a_0_0_0_2*x_3**2 + a_0_0_1_0*x_2 + a_0_0_1_1*x_2*x_3 + a_0_0_1_2*x_2*x_3**2 + a_0_1_0_0*x_1 + a_0_1_0_1*x_1*x_3 + a_0_1_0_2*x_1*x_3**2 + a_0_1_1_0*x_1*x_2 + a_0_1_1_1*x_1*x_2*x_3 + a_0_1_1_2*x_1*x_2*x_3**2 + a_0_2_0_0*x_1**2 + a_0_2_0_1*x_1**2*x_3 + a_0_2_0_2*x_1**2*x_3**2 + a_0_2_1_0*x_1**2*x_2 + a_0_2_1_1*x_1**2*x_2*x_3 + a_0_2_1_2*x_1**2*x_2*x_3**2 + a_0_3_0_0*x_1**3 + a_0_3_0_1*x_1**3*x_3 + a_0_3_0_2*x_1**3*x_3**2 + a_0_3_1_0*x_1**3*x_2 + a_0_3_1_1*x_1**3*x_2*x_3 + a_0_3_1_2*x_1**3*x_2*x_3**2 + a_1_0_0_0*x_0 + a_1_0_0_1*x_0*x_3 + a_1_0_0_2*x_0*x_3**2 + a_1_0_1_0*x_0*x_2 + a_1_0_1_1*x_0*x_2*x_3 + a_1_0_1_2*x_0*x_2*x_3**2 + a_1_1_0_0*x_0*x_1 + a_1_1_0_1*x_0*x_1*x_3 + a_1_1_0_2*x_0*x_1*x_3**2 + a_1_1_1_0*x_0*x_1*x_2 + a_1_1_1_1*x_0*x_1*x_2*x_3 + a_1_1_1_2*x_0*x_1*x_2*x_3**2 + a_1_2_0_0*x_0*x_1**2 + a_1_2_0_1*x_0*x_1**2*x_3 + a_1_2_0_2*x_0*x_1**2*x_3**2 + a_1_2_1_0*x_0*x_1**2*x_2 + a_1_2_1_1*x_0*x_1**2*x_2*x_3 + a_1_2_1_2*x_0*x_1**2*x_2*x_3**2 + a_1_3_0_0*x_0*x_1**3 + a_1_3_0_1*x_0*x_1**3*x_3 + a_1_3_0_2*x_0*x_1**3*x_3**2 + a_1_3_1_0*x_0*x_1**3*x_2 + a_1_3_1_1*x_0*x_1**3*x_2*x_3 + a_1_3_1_2*x_0*x_1**3*x_2*x_3**2 + a_2_0_0_0*x_0**2 + a_2_0_0_1*x_0**2*x_3 + a_2_0_0_2*x_0**2*x_3**2 + a_2_0_1_0*x_0**2*x_2 + a_2_0_1_1*x_0**2*x_2*x_3 + a_2_0_1_2*x_0**2*x_2*x_3**2 + a_2_1_0_0*x_0**2*x_1 + a_2_1_0_1*x_0**2*x_1*x_3 + a_2_1_0_2*x_0**2*x_1*x_3**2 + a_2_1_1_0*x_0**2*x_1*x_2 + a_2_1_1_1*x_0**2*x_1*x_2*x_3 + a_2_1_1_2*x_0**2*x_1*x_2*x_3**2 + a_2_2_0_0*x_0**2*x_1**2 + a_2_2_0_1*x_0**2*x_1**2*x_3 + a_2_2_0_2*x_0**2*x_1**2*x_3**2 + a_2_2_1_0*x_0**2*x_1**2*x_2 + a_2_2_1_1*x_0**2*x_1**2*x_2*x_3 + a_2_2_1_2*x_0**2*x_1**2*x_2*x_3**2 + a_2_3_0_0*x_0**2*x_1**3 + a_2_3_0_1*x_0**2*x_1**3*x_3 + a_2_3_0_2*x_0**2*x_1**3*x_3**2 + a_2_3_1_0*x_0**2*x_1**3*x_2 + a_2_3_1_1*x_0**2*x_1**3*x_2*x_3 + a_2_3_1_2*x_0**2*x_1**3*x_2*x_3**2
</code></pre>
<p>Remarks: </p>
<ol>
<li><code>symarray</code> depends on <code>NumPy</code>, but this does not seem to be an issue for you. If it was, I would create symbols one by one using <code>itertools.product</code></li>
<li>The format <code>Add(*[...])</code> is more efficient than <code>sum([...])</code> for forming symbolic sums with a large number of terms, see <a href="https://github.com/sympy/sympy/issues/13945" rel="nofollow noreferrer">SymPy issue 13945</a>. </li>
</ol>
</div>
<span class="comment-copy"><a href="https://www.quora.com/How-does-one-generate-algorithmically-all-the-terms-of-a-multivariate-polynomial" rel="nofollow noreferrer">similar question here on Quora</a></span>
<span class="comment-copy">great. I'm gonna check it out and come back. in the meantime others are also offering solutions <a href="https://gist.github.com/celliern/c715151a247dbb3c8caec15aeb9af83d" rel="nofollow noreferrer">here</a> and <a href="https://groups.google.com/forum/#!topic/sympy/V4KRzA-3doI" rel="nofollow noreferrer">here</a>. you may like to see them too.</span>
<span class="comment-copy">From <a href="https://stackoverflow.com/a/51636453/4999991">here</a> I found the <code>product(*map(range, D))</code> which seems to be faster than <code>product(*[range(d) for d in D])</code>. How do you think?</span>
<span class="comment-copy">Sure, that's a nicer way. Won't make a noticeable difference for the overall thing, because the formation of <code>prod_iterator</code> is not the bottleneck here.</span>
<span class="comment-copy">I would appreciate if you could take a loo at my follow up question <a href="https://cs.stackexchange.com/questions/95886/algorithm-for-using-power-series-to-numerically-solve-a-partial-differential-equ">here</a></span>
