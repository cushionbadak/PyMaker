<div class="post-text" itemprop="text">
<p>I have the below code...</p>
<pre><code>class BankAccount:
    """ Simple BankAccount class """

    def __init__(self, balance=0):
        """Initialize account with balance"""
        self.balance = balance

    def deposit(self, amount):
        """Deposit amount to this account"""
        self.balance += amount

    def withdraw(self, amount):
        """Withdraw amount from this account"""
        self.balance -= amount

    def __str__(self):
        return 'Account with a balance of {}'.format(self.balance)

    def __repr__(self):
        return "BankAccount(balance={})".format(self.balance)

    def __bool__(self):
        if self.balance &gt; 0:
            return True
        else:
            return False
</code></pre>
<p>The code is basically a simple bank account simulator. I want to implement comparisons for BankAccount objects, such that instances can be compared based on their balance. I want to do this using functools.total_ordering. An expected output is below...</p>
<pre><code>    account1 = BankAccount(100)
    account2 = BankAccount()
    account3 = BankAccount(100)
    account1 == account2
False
    account1 == account3
True
    account1 != account3
False
    account1 &lt; account2
False
    account1 &gt;= account2
True
</code></pre>
<p>How would I do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You just need to define at least one of the functions:</p>
<p><code>__lt__(), __le__(), __gt__(), or __ge__()</code>
In addition, the class should supply an <code>__eq__()</code> method. </p>
<p>Then you use the decorator like so:</p>
<pre><code>from functools import total_ordering

@total_ordering
class BankAccount:
""" Simple BankAccount class """

   def __init__(self, balance=0):
    """Initialize account with balance"""
       self.balance = balance
   def __lt__(self, other):
       return self.balance  &lt; other.balance 
   def __eq__(self,other):
       return self.balance == other.balance
</code></pre>
</div>
<span class="comment-copy">Did you read the <a href="https://docs.python.org/3/library/functools.html#functools.total_ordering" rel="nofollow noreferrer"><code>@total_ordering</code> documentation</a>? Was there anything unclear, have you had trouble with a specific implementation?</span>
<span class="comment-copy">Side note: <code>self.balance &gt; 0</code> itself already produces <code>True</code> or <code>False</code>; the <code>if ...: return True</code>, <code>else: return False</code> is much more verbose than is needed. Just replace that all with <code>return self.balance &gt; 0</code>, although <code>return bool(self.balance)</code> would also do.</span>
<span class="comment-copy">I am confused about the  def _is_valid_operand portion of the code and whether my code above would need it.</span>
<span class="comment-copy">The documentation there links on to the <a href="https://docs.python.org/3/reference/datamodel.html#object.__lt__" rel="nofollow noreferrer">comparison hooks</a>, which explain when to return <code>NotImplemented</code>. The <code>_is_valid_operand</code> method implements a form of deciding when to return <code>NotImplemented</code>. It's optional, not absolutely required for your case.</span>
<span class="comment-copy">Your question would be much better received if you asked <i>in your question body itself</i> about this confusion.</span>
<span class="comment-copy">I'm a little confused. So would I need to define all of the functions above? Or could I just define one of them and <i>eq</i> and the code would be able to interpret the other functions on its own?</span>
<span class="comment-copy">As I wrote at least one. So one or if you want to more. In your case one will suffice as in my example :)</span>
<span class="comment-copy">Is there a reason there would be a name error for @total_ordering?</span>
<span class="comment-copy">You need to import it first. I edited my example check it out</span>
