<div class="post-text" itemprop="text">
<p>I'm having problems figuring out how to get the Censys Python API to export search queries into a CSV file. Apparently, it has an EXPORT API and I've tried importing it into my code, but it still gives me an undefined function call.</p>
<pre><code>#!/user/bin/python3

#import sys
#import requests
#import os

import censys.ipv4
import censys.websites
import censys.query
import censys.export
#import censys

UID = "xxxxxx"
SECRET = "xxxxxx"

#res = requests.post(API_URL, auth=(UID, SECRET))
#if res.status_code != 200:
    #print ("error occurred!:", res.status_code)
    #sys.exit(1)

c = censys.ipv4.CensysIPv4(api_id = UID, api_secret = SECRET)
d = censys.export.CensysExport(api_id = UID, api_secret = SECRET)

fields_IPv4 = ["ip", "location.city", "location.country", "location.country_code", "location.postal_code", "autonomous_system.name", "autonomous_system.organization"]

for ipv4 in c.search("bah.com or boozallen", fields = fields_IPv4):
    try:
        print (ipv4["ip"])
    except:
        print ("N/A IP")
    try:
        print (ipv4["location.city"]) 
    except:
        print ("N/A City")
    try:
        print (ipv4["location.country"])
    except:
        print ("N/A Country") 
    try:
        print (ipv4["location.country_code"]) 
    except:
        print ("N/A  Country Code")
    try:
        print (ipv4["location.postal_code"]) 
    except:
        print ("N/A Postal Code")
    try:
        print (ipv4["autonomous_system.name"]) 
    except:
        print ("N/A System Name")
    try:
        print (ipv4["autonomous_system.organization"])
    except:
        print ("N/A System Organization")
    print ()

#NewJob = d.new_job("select count(*) from certificates.certificates")
#JobID = NewJob["job_id"]

censys_start_export(d, format = c("csv"), flatten = TRUE, compress = FALSE, delimiter = ",", headers = TRUE)
</code></pre>
<p>I can get the search query information I specified to display in a terminal with Ubuntu 14.04, but I get this error after it finishes displaying them:</p>
<blockquote>
<p>Traceback (most recent call last):   File
  "CensysAccumulationScript.py", line 60, in 
      censys_start_export(d, format = c("csv"), flatten = TRUE, compress = FALSE, delimiter = ",", headers = TRUE)  NameError: name 'censys_start_export' is not defined</p>
</blockquote>
<p>I thought importing <code>censys.export</code> would allow me to use the <code>censys_start_export</code> function, but that's not how it works apparently. I tried importing the whole <code>censys</code> library, but that didn't work either.</p>
<p>Any insight would be greatly appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>Really here <code>censys.export.CensysExport</code> class isn't required. You can read at the end about how to use <code>censys.export.CensysExport</code>.</p>
<pre><code>import csv
from censys.ipv4 import CensysIPv4


UID = "&lt;your-uid&gt;"
SECRET = "&lt;your-secret&gt;"

ipv4 = CensysIPv4(api_id=UID, api_secret=SECRET)

fields_IPv4 = [
    "ip",
    "location.city",
    "location.country",
    "location.country_code",
    "location.postal_code",
    "autonomous_system.name",
    "autonomous_system.organization"
]

result = ipv4.search("bah.com or boozallen", fields=fields_IPv4)
</code></pre>
<p>The result returned from the <code>censys.ipv4.CensysIPv4.search</code> method call is a generator object.<br/>
You can consume values (dictionary objects whose keys are <code>fields_IPv4</code>) yielded from the generator and write them to a csv file this way.
This is possible since <a href="https://docs.python.org/3/library/csv.html#csv.csvwriter.writerows" rel="nofollow noreferrer"><code>csv.writer.writerows</code></a> accepts an iterator to be passed to it.</p>
<pre><code>with open('some.csv', 'w', newline='') as f:
    writer = csv.DictWriter(f, fields_IPv4)
    writer.writerows(result)
</code></pre>
<h2>Using <code>censys.export.CensysExport</code></h2>
<blockquote>
<p>Here is the source code for <code>censys.export.CensysExport</code></p>
</blockquote>
<pre><code>class CensysExport(CensysAPIBase):

    def new_job(self, query, format="json", flatten=False, compress=False,
                delimiter=None, headers=None):
        assert format in ("json", "csv")
        assert flatten in (True, False)
        assert compress in (True, False)
        data = {
            "query": query,
            "format": format,
            "flatten": flatten,
            "compress": compress,
            "delimiter": delimiter,
            "headers": headers
        }
        return self._post("export", data=data)

    def check_job(self, job_id):
        path = "/".join(("export", job_id))
        return self._get(path)

    def check_job_loop(self, job_id):
        while True:
            res = self.check_job(job_id)
            if res["status"] != "pending":
                return res
            time.sleep(1)
</code></pre>
<p>To use it you must pass a SQL query to run against the API. <em>e.g.</em></p>
<pre><code>import censys.export import CensysExport

query = 'select * from certificates.certificates limit 1000' # shamelessly plucked from tests ;)

exporter = CensysExport(api_id=UID, api_secret=SECRET)
job_id = exporter.new_job(query, format="csv", delimiter=",", headers=True)
csv = exporter.check_job_loop(job_id)

with open('some.csv', 'w') as f:
    f.writelines(csv)
</code></pre>
<p>Currently, this raises a <code>CensysNotFoundException</code> as there is no export endpoint and I confirmed this in the <a href="https://www.censys.io/api" rel="nofollow noreferrer">online API documentation</a>.</p>
</div>
<span class="comment-copy">Make sure to reset your SECRET if that's possible.</span>
<span class="comment-copy">I got it to work! It created the CSV with the info I wanted. Thank you! Also you were definitely right when you said you don't need the CensysExport class. Much less tedious.</span>
