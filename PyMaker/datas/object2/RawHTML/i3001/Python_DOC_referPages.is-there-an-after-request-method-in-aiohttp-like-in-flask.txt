<div class="post-text" itemprop="text">
<p>Flask provides this nice <code>@app.after_request</code> decorator which allows to execute a method after an http request has been handled. See documentation <a href="http://flask.pocoo.org/docs/1.0/api/#flask.Flask.after_request" rel="nofollow noreferrer">here</a>.</p>
<p>How would you achieve a similar pattern with <strong>aiohttp</strong>?
Typically to send logs after the request has been handled.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>aiohttp</code> web server supports <a href="https://aiohttp.readthedocs.io/en/stable/web_advanced.html#aiohttp-web-signals" rel="nofollow noreferrer"><em>signals</em></a>, which are hooks to be called at specific points.</p>
<p>The <a href="https://aiohttp.readthedocs.io/en/stable/web_reference.html#aiohttp.web.Application.on_response_prepare" rel="nofollow noreferrer"><code>Application.on_response_prepare</code> signal</a> is the moral equivalent of Flask's <code>after_request</code> handler. Use it to modify the response as it is being prepared to be returned to the client:</p>
<pre><code>async def on_prepare(request, response):
    response.headers['My-Header'] = 'value'

app.on_response_prepare.append(on_prepare)
</code></pre>
<p>The signal receives both the <code>request</code> and <code>response</code> objects. If you want to implement the <a href="http://flask.pocoo.org/snippets/53/" rel="nofollow noreferrer">Flask pattern for registering a callback <em>per request</em></a>, and are using Python 3.7, you can use a <a href="https://docs.python.org/3/library/contextvars.html" rel="nofollow noreferrer"><code>contextvars</code> context variable</a>:</p>
<pre><code>from contextvars import ContextVar
from typing import Iterable, Callable

from aiohttp import web


PrepareCallback = Callable[[web.Request, web.StreamResponse], None]
call_on_prepare: ContextVar[Iterable[PrepareCallback]] = ContextVar('call_on_prepare', ())


async def per_request_callbacks(request, response):
    # executed sequentially, in order of registration!
    for callback in call_on_prepare.get():
        await callback(request, response)


app.on_response_prepare.append(per_request_callbacks)


def responce_prepare_after_this_request(awaitable):
    call_on_prepare.set(call_on_prepare.get() + (awaitable,))
    return awaitable
</code></pre>
<p>then use it like this in a request:</p>
<pre><code>def invalidate_username_cache():
    @responce_prepare_after_this_request
    async def delete_username_cookie(request, response):
        response.del_cookie('username')
        return response
</code></pre>
<p>If you need to support Python versions &lt; 3.7, you'd have to store the list of callbacks on the <code>app</code>, <code>request</code> or <code>response</code> objects instead; see the <a href="https://aiohttp.readthedocs.io/en/stable/web_advanced.html#data-sharing-aka-no-singletons-please" rel="nofollow noreferrer">data sharing section</a> of the <code>aiohttp</code> FAQ.  Personally, I think that contextvars are the better pattern here, as this provides better encapsulation for utilities like <code>responce_prepare_after_this_request</code>, which now can be distributed separately without fear of clashing with other data set in the <code>aiohttp.web</code> object mappings. </p>
</div>
<span class="comment-copy">That's not really the best documentation link for <code>after_request</code>. Try <a href="http://flask.pocoo.org/docs/1.0/reqcontext/?highlight=after_request#callbacks-and-errors" rel="nofollow noreferrer">flask.pocoo.org/docs/1.0/reqcontext/â€¦</a> and <a href="http://flask.pocoo.org/docs/1.0/api/#flask.Flask.after_request" rel="nofollow noreferrer">flask.pocoo.org/docs/1.0/api/#flask.Flask.after_request</a> instead.</span>
<span class="comment-copy">The link you gave is for a specific recipe for setting up one-off <code>after_request</code> calls for a specific request <i>only</i>.</span>
<span class="comment-copy">@MartijnPieters done, thanks</span>
