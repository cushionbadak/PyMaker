<div class="post-text" itemprop="text">
<p>I've got a build generated with a pyinstaller.
I need to create .rpm package which will put the executable into the <code>/usr/bin/</code> and create a systemd service which will run that executable.</p>
<p>I found this 
<a href="https://docs.python.org/3/distutils/builtdist.html" rel="noreferrer">https://docs.python.org/3/distutils/builtdist.html</a> and <a href="https://docs.python.org/2.0/dist/creating-rpms.html" rel="noreferrer">https://docs.python.org/2.0/dist/creating-rpms.html</a></p>
<p>However it doesn't give me a full picture.</p>
<ol>
<li><p>Is it possible to make it?</p></li>
<li><p>What toolset do i need to use? (Basically, <code>how</code> to make it).</p></li>
<li><p>If possible - sample code</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>First of all, forget about <code>bdist_rpm</code>. It's for a <code>distutils</code>/<code>setuptools</code> project, so you would need a <code>setup.py</code> script that invokes <code>pyinstaller</code> under the hood to bundle the executable, somehow redefines the <code>install_scripts</code> command to be able to package binary executables and also handles the packaging of the <code>systemd</code> unit files. Instead, write a spec file which is the instruction manual for <code>rpm</code> to build and install your package.</p>
<h2>setup</h2>
<p>This is the example project to play with.</p>
<pre><code>so-51640995
├── bacon.service
├── bacon.spec
├── bacon.timer
└── spam.py
</code></pre>
<h3><code>spam.py</code></h3>
<p>No magic here - prints <code>eggs</code> once called. Will be bundled via <code>pyinstaller</code> to a binary named <code>bacon</code>. I didn't call the project <code>spam</code> to avoid ambiguity, because <code>pyinstaller</code> also creates a file with <code>.spec</code> extension, so that running it does not overwrite the rpm spec file.</p>
<pre><code>#!/usr/bin/env python3

def eggs():
    print('eggs!')


if __name__ == '__main__':
    eggs()
</code></pre>
<h3><code>bacon.service</code></h3>
<p>Simple service calling the binary <code>bacon</code>.</p>
<pre><code>[Unit]
Description=Bacon emitting eggs

[Service]
ExecStart=/usr/bin/bacon
Restart=always
</code></pre>
<h3><code>bacon.timer</code></h3>
<p>Will call <code>bacon</code> every ten seconds.</p>
<pre><code>[Unit]
Description=Timer for bacon to emit eggs from time to time

[Timer]
OnUnitInactiveSec=10s
OnBootSec=10s
Unit=bacon.service

[Install]
WantedBy=timers.target
</code></pre>
<h3><code>bacon.spec</code></h3>
<p>The instruction for the package. In <code>%build</code> section, we bundle <code>spam.py</code>, then install the bundled executable <code>dist/spam</code> to <code>/usr/bin/bacon</code> along with the <code>systemd</code> unit files.</p>
<pre><code>Name: bacon
Version: 1
Release: 1
Summary: bacon that shouts 'eggs!' from time to time
License: MIT
Requires: systemd

%description
bacon that shouts 'eggs!' from time to time

%build
pyinstaller --onefile %{_sourcedir}/spam.py

%install
mkdir -p %{buildroot}%{_bindir}
mkdir -p %{buildroot}%{_unitdir}
install -m 755 dist/spam %{buildroot}%{_bindir}/bacon
install -m 755 %{_sourcedir}/bacon.service %{buildroot}%{_unitdir}/bacon.service
install -m 755 %{_sourcedir}/bacon.timer %{buildroot}%{_unitdir}/bacon.timer

%files
%{_bindir}/bacon
%{_unitdir}/bacon.service
%{_unitdir}/bacon.timer
</code></pre>
<h2>build the package</h2>
<p>There are lots of tutorials out there that explain building <code>rpm</code> packages in-depth, for example <a href="https://docs.fedoraproject.org/en-US/quick-docs/creating-rpm-packages/index.html" rel="nofollow noreferrer">Fedora Packaging Guidelines</a>, so just listing the minimal sequence of commands here:</p>
<pre><code>$ # install the bare minimum of required packages
$ sudo dnf install rpm-build rpm-devel rpmdevtools
$ # first-time setup of build dirs
$ rpmdev-setuptree
$ # copy the source files
$ cp * $HOME/rpmbuild/SOURCES/
$ # invoke the build
$ rpmbuild -ba bacon.spec
</code></pre>
<h2>test the package</h2>
<pre><code><s>$ sudo rpm -ivp $HOME/rpmbuild/RPMS/x86_64/bacon-1-1.x86_64.rpm</s></code></pre>
<p><strong>Edit</strong>: as mentioned in the comments, use <code>-U</code> in favor of <code>-i</code>. Quote from the <code>rpm</code> mans:</p>
<blockquote>
<p>The general form of an rpm upgrade command is</p>
<pre><code> rpm {-U|--upgrade} [install-options] PACKAGE_FILE ...
</code></pre>
<p>This upgrades or installs the package currently installed to a newer version. This is the same as install, except all other version(s) of the package are removed after the new package is installed.</p>
</blockquote>
<p>So use</p>
<pre><code>$ sudo rpm -Uvp $HOME/rpmbuild/RPMS/x86_64/bacon-1-1.x86_64.rpm
</code></pre>
<p>for test installation.</p>
<p>Now <code>bacon</code> should be available from command line:</p>
<pre><code>$ bacon
eggs!
</code></pre>
<p>Start the timer:</p>
<pre><code>$ sudo systemctl start bacon.timer
$ systemctl status bacon.timer
● bacon.timer - Timer for bacon to emit eggs from time to time
   Loaded: loaded (/usr/lib/systemd/system/bacon.timer; disabled; vendor preset: disabled)
   Active: active (waiting) since Tue 2018-08-07 15:36:28 CEST; 29s ago
  Trigger: Tue 2018-08-07 15:36:58 CEST; 979ms left
</code></pre>
<p>Check the logs:</p>
<pre><code>$ sudo journalctl -u bacon
-- Logs begin at Mon 2017-07-03 12:49:51 CEST, end at Tue 2018-08-07 15:37:02 CEST. --
Aug 07 15:36:28 XXX systemd[1]: Started Bacon emitting eggs.
Aug 07 15:36:28 XXX bacon[128222]: eggs!
Aug 07 15:36:28 XXX systemd[1]: bacon.service: Service hold-off time over, scheduling restart.
Aug 07 15:36:28 XXX systemd[1]: Stopped Bacon emitting eggs.
Aug 07 15:36:28 XXX systemd[1]: Started Bacon emitting eggs.
Aug 07 15:36:28 XXX bacon[128224]: eggs!
Aug 07 15:36:28 XXX systemd[1]: bacon.service: Service hold-off time over, scheduling restart.
Aug 07 15:36:28 XXX systemd[1]: Stopped Bacon emitting eggs.
Aug 07 15:36:28 XXX systemd[1]: Started Bacon emitting eggs.
Aug 07 15:36:29 XXX bacon[128226]: eggs!
...
</code></pre>
<p>Once verified things work, stop the timer and uninstall <code>bacon</code>:</p>
<pre><code>$ sudo systemctl stop bacon.timer
$ sudo rpm -e bacon
$ sudo systemctl daemon-reload
$ sudo systemctl reset-failed
</code></pre>
</div>
<span class="comment-copy">A very minor nitpick: rpm -U, not rpm -i, should always be suggested. The only known usage case for rpm -i is the linux kernel package. Using rpm -I can/will lead to multiply installed packages.</span>
<span class="comment-copy">@JeffJohnson Good point, thanks! Updated the answer.</span>
