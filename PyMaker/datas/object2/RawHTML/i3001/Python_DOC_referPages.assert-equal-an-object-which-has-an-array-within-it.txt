<div class="post-text" itemprop="text">
<p>My goal is to check the similarity of an object using unittesting in python. I have this kind of object</p>
<pre><code>class ImageModel(object):

    def __init__(self):
        self.data = data #this an array
        self.name = name
        self.path = path
</code></pre>
<p>I have read that if you want to do test the similarity of an array <code>self.assertEqual(arr1,arr2)</code> you have to put <code>.all()</code> after each array. But I have to check the similarity of an object which has an array within it. For my case, it would be:</p>
<pre><code>self.assertEqual(ImageObj1, ImageObj2)
</code></pre>
<p>But it always show that those object isn't similar, i assume the problem is at the <code>ImageObj.data</code></p>
<p>so, is there any way to assert equal an array within an object?</p>
</div>
<div class="post-text" itemprop="text">
<p>One possibility is to override the <a href="https://docs.python.org/3/reference/datamodel.html#object.__eq__" rel="nofollow noreferrer"><code>__eq__</code></a> method of your class. Basically, this is the method that is called when you're using the <code>==</code> operator on an <code>ImageModel</code> instance.</p>
<p>Here is an example:</p>
<pre><code>def __eq__(self, other):
    return (
        # the two instances must be of the same class
        isinstance(other, self.__class__) and
        # compare name and path, that's straightforward
        self.name == other.name and
        self.path == other.path and
        # and compare data
        len(self.data) == len(other.data) and
        all(a == b for a, b in zip(self.data, other.data))
    )
</code></pre>
</div>
<span class="comment-copy">what kind of <code>array</code> - python has <code>list</code>s( and <code>(frozen)set</code>, <code>dict</code>, <code>tuple</code>, ...). "Array"s are from other packages like array or numpy or ... which might have convenience functions to compare value equality</span>
<span class="comment-copy">Unless you define <code>__eq__</code> in your class, equality is based on identity, that is, <code>ImageObj1 == ImageObj2</code> if and only if <code>id(ImageObj1) == id(ImageObj2)</code>. Python won't automatically compare two objects attribute by attribute.</span>
<span class="comment-copy">@PatrickArtner the array is from reading an image with OpenCV library</span>
