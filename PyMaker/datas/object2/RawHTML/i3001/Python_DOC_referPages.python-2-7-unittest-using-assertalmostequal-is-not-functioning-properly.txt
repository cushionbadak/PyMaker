<div class="post-text" itemprop="text">
<p>My python version is 2.7.13. </p>
<p>I need to test using the <code>unittest</code> module, and the data type I am testing with are floats. In the docs it says to use <code>assertAlmostEqual</code> for the small discrepancy when comparing floats for equality.</p>
<p>This is what I did:</p>
<p><code>self.assertAlmostEqual(41.7777777777776, 41.777, places=3)</code> </p>
<p>I run the above code and it yields a failed test result, like the following:</p>
<p><code>self.assertAlmostEqual(41.7777777777776, 41.777, places=3)
AssertionError: 41.7777777777776 != 41.777 within 3 places</code></p>
<p>What I am doing wrong, or is this a bug?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your numbers are not equal to 3 decimal places, <a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertAlmostEqual" rel="nofollow noreferrer">as defined by <code>assertAlmostEqual</code></a>:</p>
<blockquote>
<p>Test that first and second are approximately (or not approximately) equal by computing the difference, rounding to the given number of decimal places (default 7), and comparing to zero.</p>
</blockquote>
<p>The difference between your numbers, rounded to 3 decimal places, is <code>0.001</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/2.7/library/unittest.html#unittest.TestCase.assertAlmostEqual" rel="nofollow noreferrer">the docs</a>:</p>
<blockquote>
<p>Test that first and second are approximately (or not approximately) equal by computing the difference, rounding to the given number of decimal places (default 7), and comparing to zero. Note that these methods round the values to the given number of decimal places (i.e. like the round() function) and not significant digits.</p>
</blockquote>
<p>In your case, <code>round(41.7777777777776 - 41.777, 3) != 0.0</code>.</p>
</div>
<span class="comment-copy">To three places, <code>41.7777777777776</code> is <code>41.778</code>.</span>
<span class="comment-copy">So if would want to make that test pass I would have to write <code>assertAlmostEqual(41.77777777776, 41.777, 2)</code> am I correct?</span>
<span class="comment-copy">@MosheRabaev: Yes.</span>
<span class="comment-copy">It's taking the difference and then rounding, not rounding and then comparing.</span>
<span class="comment-copy">Ah yep, thanks.</span>
