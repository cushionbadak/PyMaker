<div class="post-text" itemprop="text">
<p>Some articles told me that making an new sub process, the operation system will almost copy all data from partent, including process's struct, stack, heap and so on. So, i think the global variables, static variables may be copied to sub process, whose contens are equal to the parent's values at the monment of invoking the fork(). But following python code's result make me confusion:</p>
<pre><code>from multiprocessing import Process
ids = []
ids.extend([1, 2, 3, 4])

def worker(sub_id):
    global ids
    print("sub_id=%s, the content of ids: [%s]" % (sub_id, ",".join(["%s" % x for x in ids])))

def init():
    global ids
    ids.append(-100)

def main():
    init()
    sub_process = list()
    for i in range(2):
        process = Process(target=worker, args=(i, ))
        process.start()
        sub_process.append(process)
    for p in sub_process:
        p.join()
    global ids
    ids.append(100)
    print("the main process, the content of ids: [%s]" % (",".join(["%s" % x for x in ids])))

if __name__ == "__main__":
    main()
</code></pre>
<p>the executing results of above codes:</p>
<pre><code>sub_id=0, the content of ids: [1,2,3,4]
sub_id=1, the content of ids: [1,2,3,4]
the main process, the content of ids: [1,2,3,4,-100,100]
</code></pre>
<p>The results i expected:</p>
<pre><code>sub_id=0, the content of ids: [1,2,3,4, -100]
sub_id=1, the content of ids: [1,2,3,4, -100]
the main process, the content of ids: [1,2,3,4,-100,100]
</code></pre>
<p>I don't know why the changes of <code>ids</code> in function <code>init()</code> are not copied to sub process, but the changes in global section <code>ids.extend([1, 2, 3, 4])</code> are visible to sub process.</p>
<p>thanks for every reponse.</p>
</div>
<div class="post-text" itemprop="text">
<p>As explained in the docs, <a href="https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods" rel="nofollow noreferrer"><code>multiprocessing</code></a> has three different ways of starting processes. The two main ones are <code>fork</code> and <code>spawn</code>.<sup>1</sup></p>
<ul>
<li><p><code>fork</code> copies your parent process. You were right on the nose about what this does:<sup>2</sup> the children start with copies of the parent's globals, and so on.</p></li>
<li><p><code>spawn</code> creates a brand new process, starts the Python interpreter, and <code>import</code>s your module.</p></li>
</ul>
<p>On Unix, <code>fork</code> is the default, but <code>spawn</code> and <code>forkserver</code> are available as options. On Windows, <code>spawn</code> is the default, and the only option, because Windows doesn't provide a <code>fork</code> API.</p>
<hr/>
<p>Since you're on Windows, the children don't get a copy of <code>ids</code> from the parent—but the <code>ids = []</code> and <code>ids.extend(…)</code> code gets run on <code>import</code>, so they all end up with equal values anyway. But any code protected by a <code>__main__</code> guard doesn't get run by <code>import</code>, so they don't call <code>main</code>, so no <code>init</code>, so no <code>ids.append(-100)</code>.</p>
<hr/>
<p>The <code>multiprocessing</code> library is designed so you can use it in a way that works the same on all platforms.<sup>3</sup> Most of the details are covered pretty well in the <a href="https://docs.python.org/3/library/multiprocessing.html#programming-guidelines" rel="nofollow noreferrer">Programming guidelines</a> section of the docs, but the basic idea is: Don't assume that globals are copied, or that they <em>aren't</em> copied. </p>
<p>This means you generally won't have any code outside a <code>__main__</code> guard at the top level, except for <code>import</code>, <code>def</code>, and <code>class</code> statements, and maybe a few simple global constant assignments.</p>
<p>Any complicated setup you need to do, you do in each child process.<sup>4</sup> Anything you want to share between processes (like a <code>Lock</code>, or a <code>Queue</code>), you create inside the <code>__main__</code> guard and pass to the children as arguments.</p>
<hr/>
<p><sub>1. For <code>forkserver</code>, see the docs for details; it's mainly there for programs that use libraries that expect to do fancy things with threads that don't work well with <code>fork</code>, which is a common thing on macOS—although it can be useful in some other cases.</sub></p>
<p><sub>2. There are some complexities about things like open files, but they're not important here.</sub></p>
<p><sub>3. You <em>could</em> just specify <code>spawn</code> and then treat every platform like Windows. But on some Unix platforms, it can be slow to <code>spawn</code> processes. Also, getting things like shared files to work can be painful on Unix, so it's sometimes easier to write code that works with <code>fork</code> or <code>spawn</code>, than to write code that works with <code>spawn</code> on Unix or <code>spawn</code> on Windows. Using <code>forkserver</code> on Unix and <code>spawn</code> on Windows can, however, be a good compromise/</sub></p>
<p><sub>4. If you're using <code>Pool</code>s, use an <code>initializer</code> function.</sub></p>
</div>
<span class="comment-copy">What platform are you on? And what Python version?</span>
<span class="comment-copy">My suspicion is that you’re on Windows, where there is no <code>fork</code>, so the default start method is <code>"spawn"</code>. What this does is launch a whole new Python interpreter and import your module—which means top-level code like that <code>ids = []</code> and <code>ids.extend(…)</code> gets run in the child process (but code protected by that <code>__main__</code> guard does not get run), so you end up with an equal list, but it’s not actually copied from the parent, it’s just created the same way.</span>
<span class="comment-copy">@abarnert  Many thanks for giving me so clear response. Yes,  i run it on windows 7 and python3.7. As you said, the is no <code>fork</code> on windows.So, i get the expected result on centos6.5.</span>
