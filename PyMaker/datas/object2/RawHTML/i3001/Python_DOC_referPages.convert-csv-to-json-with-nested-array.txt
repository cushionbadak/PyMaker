<div class="post-text" itemprop="text">
<p>I have a CSV file  </p>
<pre><code>group, first, last
fans, John, Smith
fans, Alice, White
students, Ben, Smith
students, Joan, Carpenter
...
</code></pre>
<p>The Output JSON file needs this format:</p>
<pre><code>[
{
  "group" : "fans",
  "user" : [
    {
      "first" : "John",
      "last" :  "Smith"
    },
    {
      "first" : "Alice",
      "last" :  "White"
    }
  ]
},
{
  "group" : "students",
  "user" : [
    {
      "first" : "Ben",
      "last" :  "Smith"
    },
    {
      "first" : "Joan",
      "last" :  "Carpenter"
    }
  ]
}
]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Short answer</strong><br/>
Use <code>itertools.groupby</code>, as described in the <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer">documentation</a>.</p>
<p><strong>Long answer</strong><br/>
This is a multi-step process. </p>
<p>Start by getting your CSV into a <code>list</code> of <code>dict</code>:</p>
<pre><code>from csv import DictReader
with open('data.csv') as csvfile:
    r = DictReader(csvfile, skipinitialspace=True)
    data = [dict(d) for d in r]
</code></pre>
<p><code>groupby</code> needs sorted data, so define a function to get the key, and pass it in like so:</p>
<pre><code>def keyfunc(x):
    return x['group']

data = sorted(data, key=keyfunc)
</code></pre>
<p>Last, call <code>groupby</code>, providing your sorted data and your key function:</p>
<pre><code>from itertools import groupby
groups = []
for k, g in groupby(data, keyfunc):
    groups.append({
        "group": k,
        "user": [{k:v for k, v in d.items() if k != 'group'} for d in list(g)]
    })
</code></pre>
<p>This will iterate over your data, and every time the key changes, it drops into the <code>for</code> block and executes that code, providing <code>k</code> (the key for that group) and <code>g</code> (the <code>dict</code> objects that belong to it). Here we just store those in a list for later.</p>
<p>In this example, the <code>user</code> key uses some pretty dense comprehensions to remove the <code>group</code> key from every row of <code>user</code>. If you can live with that little bit of extra data, that whole line can be simplified as:</p>
<pre><code>"user": list(g)
</code></pre>
<p>The result looks like this:</p>
<pre><code>[
  {
    "group": "fans",
    "user": [
      {
        "first": "John",
        "last": "Smith"
      },
      {
        "first": "Alice",
        "last": "White"
      }
    ]
  },
  {
    "group": "students",
    "user": [
      {
        "first": "Ben",
        "last": "Smith"
      },
      {
        "first": "Joan",
        "last": "Carpenter"
      }
    ]
  }
]
</code></pre>
</div>
<span class="comment-copy">Sorry, the csv file with 3 columns, group, first, last</span>
<span class="comment-copy">So, what is your problem?</span>
<span class="comment-copy">How to convert this csv to the json file with nested array</span>
<span class="comment-copy">I mean what is wrong with your code? What language do you use?</span>
<span class="comment-copy">Sorry, I am using python.  The problem for me is how to nest the array. Do I need to create a json file with first and last  and ...?  The strategy is kind of confuse. I can create a json file with three fields: group, first and last, but how to group first and last with group</span>
<span class="comment-copy">Thanks. And I got NameError: name 'groupby' is not defined. Do you have any idea what is wrong with it?</span>
<span class="comment-copy">I missed an import - <code>from itertools import groupby</code>. Fixed now.</span>
<span class="comment-copy">Works very well, thank you so much.</span>
<span class="comment-copy">If I have another column called group ID, how can I group users by both group and group ID?</span>
