<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/51227098/optional-positional-arguments-with-pythons-argparse">Optional positional arguments with Python's argparse</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
<li>
<a dir="ltr" href="/questions/50916124/allow-positional-command-line-arguments-with-nargs-to-be-seperated-by-a-flag">Allow positional command-line arguments with nargs to be seperated by a flag</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>I have some code to parse some arguments in a file called "blah.py":</p>
<pre><code>import argparse

parser = argparse.ArgumentParser()

parser.add_argument('opt', nargs='?')
parser.add_argument('--bool', action='store_true')
parser.add_argument('value')

args = parser.parse_args()
</code></pre>
<p>If I call this file like so:</p>
<pre><code>blah.py a b --bool
</code></pre>
<p>It works correctly (opt='a', value='b', bool=True).</p>
<p>However, if I call this in a different order:</p>
<pre><code>blah.py a --bool b
</code></pre>
<p>I would expect the same result, but the argparse module is printing an <code>error: unrecognized arguments: b</code> message.  Is this a bug with the argparse module?  Why does it work this way, and what can I do to avoid running into issues like these, as I define the CLI for my script?</p>
<p>As my interface is much more complex than the example (having subcommands and many more arguments), I have varying ways to call the interface which requires some arguments to be optional for some calls, but mandatory for others.  I plan to manually verify these cases, and on an error call parser.print_usage and exit.</p>
</div>
<div class="post-text" itemprop="text">
<p>You might want to look at the "intermixed" options of argparser</p>
<p><a href="https://docs.python.org/3/library/argparse.html#intermixed-parsing" rel="nofollow noreferrer">https://docs.python.org/3/library/argparse.html#intermixed-parsing</a></p>
<p>Otherwise, positional arguments always come before optional arguments.</p>
</div>
<span class="comment-copy">Historical aside: POSIX rules for command-line parsing specify that options <i>always</i> come before positional arguments (see Guideline 9 in <a href="http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html" rel="nofollow noreferrer">pubs.opengroup.org/onlinepubs/9699919799/basedefs/â€¦</a>), and thus that any value after a non-option (and non-option-argument) can be considered positional (an "operand" rather than an "option" or "option-argument"). Teaching users that they can mix options and positional arguments willy-nilly is largely the fault of the GNU project... but it's something optparse and argparse have perpetuated, so here we are. :-/</span>
<span class="comment-copy">And just FYI, if you run an argparse command without any args or with <code>-h</code> you will see a usage example as follows: <code>blah.py [-h] [--bool] [opt] value</code> thus showing you where it expects the options and arguments.</span>
<span class="comment-copy">Normally argparse allows arguments in any order.  But when one of positionals is <code>?</code>, mixing a flagged option in the middle causes problems.  So either keep the positionals together (at end or beginning), or use the new <code>intermixed</code> parser.</span>
<span class="comment-copy">@CharlesDuffy thanks for the history, if I need to change the suggested call, I supposed I'd best follow convention. :)</span>
<span class="comment-copy">I'm using 3.6, but have downloaded the <code>argparse</code> from the 3.7 for testing.  It's a self contained file so can used in earlier distributions.</span>
<span class="comment-copy">Good to know there's something coming in python 3.7, although I unfortunately can't upgrade at this point in time.  Thanks!</span>
<span class="comment-copy">Normally positionals can occur in any order relative to flagged ones.  <code>usage</code> shows them after.  It's this case of a <code>?</code> argument that has problems.</span>
