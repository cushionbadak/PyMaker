<div class="post-text" itemprop="text">
<p>I'm using <strong>init_subclass</strong> in a project, and I sort of balked when I ran into the built in method kicking off when the code first runs in the interpreter -- without being directly referenced via instantiation of the containing class or the sub-classes it enumerates.</p>
<p>Can someone tell me what's going on, and point me to any examples of its safe use?</p>
<pre><code>class Timer():

    def __init__(self):
        pass

    def __init_subclass__(cls):
        print('Runner.', cls)
        print('Timer Dictionary :', Timer.__dict__.keys())
        # print(Timer.__init_subclass__()) # Forbidden fruit...
        pass

class Event(Timer):
    print("I'll take my own bathroom selfies...thanks anyway.")

    def __init__(self):
        print('This is nice, meeting on a real date.')

if __name__ == '__main__': # a good place for a breakpoint
        date = Event()
        date
</code></pre>
<p>Edit --------------------------------------------------</p>
<p>Based on the explanations received, original code was retooled into something useful.</p>
<pre><code>class Timer():

    subclasses = {}

    def __init__(self):
        pass

    def __init_subclass__(cls, **kwargs):
        print('Runner.', cls)
        print('Timer Dictionary :', Timer.__dict__.keys())
        # print(Timer.__init_subclass__()) # Forbidden fruit...
        super().__init_subclass__(**kwargs)
        cls.subclasses[cls] = []


class Event(Timer):
    print("I'll take my own bathroom selfies...thanks anyway.")

    def __init__(self):
        print('This is nice, meeting on a real date.')
        if self.__class__ in super().subclasses:
            # get the index and link the two
            super().subclasses[self.__class__].append(self)

if __name__ == '__main__': # a good place for a breakpoint
    date = Event()
    date
    duty = Event()
    duty
    print(Timer.subclasses)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a minimal example:</p>
<pre><code>class Super():
    def __init_subclass__(cls):
        print(cls)

class Sub(Super):
    pass
</code></pre>
<p>Running this:</p>
<pre><code>$ python test.py
&lt;class '__main__.Sub'&gt;
</code></pre>
<p>Why is that? According to <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">Python's data model docs</a>:</p>
<blockquote>
<p>Whenever a class inherits from another class, <strong>init_subclass</strong> is called on that class.</p>
</blockquote>
<p><code>Sub</code> inherits from <code>Super</code>, so <code>Super.__init_subclass__()</code> gets called.</p>
<p>Specifically, <code>type_new()</code> <a href="https://github.com/python/cpython/blob/master/Objects/typeobject.c#L2818" rel="nofollow noreferrer">invokes init_subclass</a> in the <code>cpython</code> implementation.</p>
<p>The rationale is detailed in <a href="https://www.python.org/dev/peps/pep-0487/" rel="nofollow noreferrer">PEP 487</a>.</p>
</div>
<span class="comment-copy">In the first place, why is you <code>Timer.__init_subclass__()</code> infinitely recursive? (It calls itself forever.)</span>
<span class="comment-copy">Yup, fixed it. Thanks.</span>
<span class="comment-copy">The purpose of <code>__init_subclass__</code> is to run when a subclass is defined. It's meant to replace some uses of metaclasses, so it's tied to the creation of the class itself, not the instantiation of either the parent or child class.</span>
<span class="comment-copy">Unsafe in what way? What are you worried about happening?</span>
<span class="comment-copy">As an aside, the signature should be <code>__init_subclass__(cls, **kwargs)</code> and you should be calling <code>super().__init_subclass__(**kwargs)</code> at the end of your method.  This lets you subclass from multiple parents while respecting their <code>__init_subclass__</code> methods.</span>
<span class="comment-copy">Great answer. Thanks. I also found this while revisiting the docs following your post. <a href="https://docs.python.org/3.6/whatsnew/3.6.html#pep-487-simpler-customization-of-class-creation" rel="nofollow noreferrer">https://docs.python.org/3.6/whatsnew/3.6.html#pep-487-simpler-customization-of-class-creation</a>.</span>
