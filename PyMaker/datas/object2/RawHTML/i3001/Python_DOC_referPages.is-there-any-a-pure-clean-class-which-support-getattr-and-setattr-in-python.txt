<div class="post-text" itemprop="text">
<p>I use a Context class:</p>
<pre><code>class Context(object):
    ...
</code></pre>
<p>So I can use this class to define a object which support getattr and setattr. I want to use the object to communicate between some threads.</p>
<p>However I think it is stupid to let the user define such a class. So I want to find out is there any a primitive type or a class from the standard library which support getattr and setattr.</p>
<p>I have tried the <code>object</code> class, but the object of it can not set attribute:</p>
<pre><code>a = object()
a.b = 1

class C(object):
    ...

c = C()
c.d = 1
</code></pre>
<p>I can set <code>c.d = 1</code>, but <code>a.b</code> complains <code>'object' object has no attribute 'b'</code>。</p>
</div>
<div class="post-text" itemprop="text">
<p>Try <a href="https://docs.python.org/3/library/types.html#types.SimpleNamespace" rel="nofollow noreferrer">types.SimpleNamespace</a>:</p>
<blockquote>
<p>A simple object subclass that provides attribute access to its namespace, as well as a meaningful repr.</p>
<p>Unlike object, with SimpleNamespace you can add and remove attributes.</p>
</blockquote>
</div>
<span class="comment-copy">why not just use a dictionary? or really almost any mechanism you want (including this one (that does not make much sense))</span>
<span class="comment-copy">@JoranBeasley Sometime <code>a.b</code> is better than <code>a[b]</code> necessarily。</span>
<span class="comment-copy">Oh, it meet my need! Although I do not like its identifier...</span>
<span class="comment-copy">then keep doing the hacky thing you were doing before ... the great thing about programming is you can do whatever you want</span>
<span class="comment-copy">How is that different than <code>collections.namedtuple</code>?</span>
<span class="comment-copy">@cricket_007, If I understand correctly, <code>collections.namedtuple</code> instances don't let you add new attributes to them after the fact. You can do <code>x = types.SimpleNamespace(); x.foo = 23</code>, but you can't do <code>y = collections.namedtuple("thing", [])(); y.foo = 23</code>.</span>
<span class="comment-copy">It does say in the docs "However, for a structured record type use namedtuple() instead.", but they don't seem to make that distinction about immutable instances</span>
