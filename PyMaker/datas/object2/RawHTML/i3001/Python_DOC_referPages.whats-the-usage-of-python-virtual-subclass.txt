<div class="post-text" itemprop="text">
<pre><code>class AnimalMeta(type):
    def __instancecheck__(cls, instance):
        return cls.__subclasscheck__(type(instance))

    def __subclasscheck__(cls, sub):
        return hasattr(sub, 'eat') and callable(sub.eat) and hasattr(sub, 'sleep') and callable(sub.sleep)

class Animal(object):
    __metaclass__ = AnimalMeta
    pass

class Dog(object):
    def eat(self):
        print "eat"
    def sleep(self):
        print "sleep"


dog = Dog()
dog.eat()

print isinstance(dog, Animal)
print issubclass(dog, Animal)

eat
True
True
</code></pre>
<p>I am trying to understand python virtual subclass, example shows as above. instance a virtual subclass doesn't require implement abstract method at all. </p>
<p>What's the real use cases of virtual subclass? it seems to me the virtual subclass works like something in the middle of duck type and object inherit. </p>
<p>Duck type -- virtual subclass -- object inherit </p>
</div>
<div class="post-text" itemprop="text">
<h2>Why extend abstract classes with abstract classes</h2>
<p>Suppose your project were to be more complex. You could have abstract classes such as <code>Animal</code>, <code>LandAnimal</code> and <code>SeaAnimal</code> and then concrete classes such as <code>Dog</code>, <code>Wolf</code> and <code>Fish</code> (<em>now lets ignore that some dogs swim and some fish walk</em>):</p>
<p><a href="https://i.stack.imgur.com/JrJx6.png" rel="nofollow noreferrer"><img alt="Structure implementation" src="https://i.stack.imgur.com/JrJx6.png"/></a></p>
<p>In such an implementation, abstract classes "in the middle" are very useful as they consent to avoid repeating code, as in the <code>LandAnimal</code> example.</p>
<p>Surely this code could be also implemented using decorators instead of subclasses on an abstract method <code>move</code>, but generally one would prefer abstract subclasses when the code they wrap is significant or at least they lead to a semantical advantage.</p>
<h2>How they are implemented in python</h2>
<p>In python you can either create an abstract class by adding to it a method that raises an exception when not overridden, as in:</p>
<pre><code>class A:
    def my_abstract_method(self):
        raise NotImplementedError("You should override 'my_abstract_method'")
</code></pre>
<p>Or, in python "&gt;2.6" you can use <a href="https://docs.python.org/3/library/abc.html" rel="nofollow noreferrer"><code>ABC</code></a>, a package that offers basically all you need to create abstract classes, such as decorators and the <code>ABC</code> (Abstract Base Class):</p>
<pre><code>from abs import ABS, abstractmethod

class A(ABC):
    @abstractmethod
    def my_abstract_method(self):
        pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I read <a href="http://masnun.rocks/2017/04/15/interfaces-in-python-protocols-and-abcs/" rel="nofollow noreferrer">http://masnun.rocks/2017/04/15/interfaces-in-python-protocols-and-abcs/</a> and it gives me a better understanding. We have duck typing in Python:</p>
<blockquote>
<p>If it talks and walks like a duck, then it is a duck.</p>
</blockquote>
<p>However, a <code>Bird</code> and <code>Aeroplane</code> both can <code>fly()</code>. But they are not the same thing. Hence, we need to define an interface to distinguish them from each other. (Python does not have an <code>interface</code> keyword, so we are actually using abstract classes)</p>
<p>Let's me show an example:</p>
<p>We have <code>Duck</code> and <code>MyPlane</code> in our program. Both of them implemented <code>fly()</code> method. Now we want to choose a plane from the hangar, get some people on board, and fly to another city. Apparently, we cannot put people onto a <code>Duck</code>, so we define an interface called (actually, an abstract class) <code>Plane</code>. And we let <code>MyPlane</code> to subclass <code>Plane</code>.</p>
<p>Everything works fine. When we want to choose a plane, we check if it subclasses <code>Plane</code>. However, the Boeing company developed a package, which has a <code>Boeing747Plane</code>. We bought the plane (<code>from boeing-airplanes import Boeing747Plane</code>), but it is not recognized as a plane. It does have a <code>fly()</code> method, but it's not inherited from our <code>Plane</code> class so our Python interpreter won't recognize it as a plane.</p>
<p>The good news is that Python is a flexible language. Thanks for <code>register</code> method of <code>ABCMeta</code>, after we do <code>Plane.register(Boeing747Plane)</code>, <code>Boeing747Plane</code> is a subclass of <code>Plane</code> now. We can use third-party <code>Boeing747Plane</code> like our own built <code>Plane</code>. Hooray!</p>
<p>So you see, virtual classes are used when we want to make a class from a third-party package to be a subclass of our own abstract class. We want it to implement our interface, but we cannot change its code, so we tell the interpreter explicitly "it implemented our interface, please treat it as the subclass of our own class". I think normally we wouldn't want to use it, but when you need to, use it cautiously.
As Luca Cappelletti said, this is one of many flexibilities that Python allows for, following its philosophy of "we are adults here".</p>
</div>
<span class="comment-copy">thx, change to text</span>
<span class="comment-copy">The concept is similar to Java's interfaces, but more flexible, and is mainly designed to work with abstract base classes (cf the ABC module in the stdlib) and/or type hints annotations.</span>
<span class="comment-copy">Thanks for your comments.  I agree extend abstract class is useful.  However, python virtual subclass means it doesn't inherited from class, for example, in my case, I created a customize meta type and overwrite the <b>instancecheck</b> &amp; <b>subclasscheck</b>, even though Dog doesn't inherit from Animal, but issubclass(dog, Animal) still can be true.   my questions is when virtual class is used instead of using normal extend/inherit</span>
<span class="comment-copy">Well of course, when you override the control what else should it do?</span>
<span class="comment-copy">override the control is just one of the method to create virtual subclass, python also provide register method to do that too.  with virtual subclass, if issubclass(B, A) is True and issubclass(C, B) isTrue, that's doesn't means issubclass(C, A) is True.  why python introduce this flexibility.</span>
<span class="comment-copy">That is one of many flexibilities that python allows for, following its philosophy of "we are adults here", just like the fact that there is no real difference between private and public attributes.</span>
<span class="comment-copy">This is a completely different thing from what the question is asking about.</span>
