<div class="post-text" itemprop="text">
<p>Say I have two python lists as:</p>
<pre><code>ListA = ['Jan 2018', 'Feb 2018', 'Mar 2018']
ListB = ['Sales Jan 2018','Units sold Jan 2018','Sales Feb 2018','Units sold Feb 2018','Sales Mar 2018','Units sold Mar 2018']
</code></pre>
<p>I need to get an output as:</p>
<pre><code>List_op = ['Jan 2018 Sales Jan 2018 Units sold Jan 2018','Feb 2018 Sales Feb 2018 Units sold Feb 2018','Mar 2018 Sales Mar 2018 Units sold Mar 2018']
</code></pre>
<p>My approach so far:</p>
<pre><code>res=set()
for i in ListB:
    for j in ListA:
        if j in i:
            res.add(f'{i} {j}')

print (res)
</code></pre>
<p>this gives me result as:</p>
<pre><code>{'Units sold Jan 2018 Jan 2018', 'Sales Feb 2018 Feb 2018', 'Units sold Mar 2018 Mar 2018', 'Units sold Feb 2018 Feb 2018', 'Sales Jan 2018 Jan 2018', 'Sales Mar 2018 Mar 2018'}
</code></pre>
<p>which is definitely not the solution I'm looking for. </p>
<p>What I think is regular expression could be a handful here but I'm not sure how to approach. Any help in this regard is highly appreciated.</p>
<p>Thanks in advance.</p>
<p><strong>Edit:</strong></p>
<p>Values in ListA and ListB are not necessarily to be in order. Therefore for a particular month/year value in ListA, the same month/year value from ListB has to be matched and picked for both 'Sales' and 'Units sold' component and needs to be concatenated.</p>
<p>My main goal here is to get the list which I can use later to generate a statement that I'll be using to write Hive query.</p>
<p>Added more explanation as suggested by @andrew_reece</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming no additional edge cases that need taking care of, your original code is not bad, just needs a slight update:</p>
<pre><code>List_op = []
for a in ListA:
    combined = a
    for b in ListB:
        if a in b:
            combined += " " + b
    List_op.append(combined)

List_op
['Jan 2018 Sales Jan 2018 Units sold Jan 2018',
 'Feb 2018 Sales Feb 2018 Units sold Feb 2018',
 'Mar 2018 Sales Mar 2018 Units sold Mar 2018']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Supposing ListA and ListB are sorted:</p>
<pre><code>ListA = ['Jan 2018', 'Feb 2018', 'Mar 2018']
ListB = ['Sales Jan 2018','Units sold Jan 2018','Sales Feb 2018','Units sold Feb 2018','Sales Mar 2018','Units sold Mar 2018']

print([v1 + " " + v2 for v1, v2 in zip(ListA, [v1 + " " + v2 for v1, v2 in zip(ListB[::2], ListB[1::2])])])
</code></pre>
<p>This will print:</p>
<pre><code>['Jan 2018 Sales Jan 2018 Units sold Jan 2018', 'Feb 2018 Sales Feb 2018 Units sold Feb 2018', 'Mar 2018 Sales Mar 2018 Units sold Mar 2018']
</code></pre>
<p>In my example I firstly concatenate ListB variables together and then join ListA with this new list.</p>
</div>
<div class="post-text" itemprop="text">
<p>String concatenation can become expensive. In Python 3.6+, you can use more efficient <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">f-strings</a> within a list comprehension:</p>
<pre><code>res = [f'{i} {j} {k}' for i, j, k in zip(ListA, ListB[::2], ListB[1::2])]

print(res)

['Jan 2018 Sales Jan 2018 Units sold Jan 2018',
 'Feb 2018 Sales Feb 2018 Units sold Feb 2018',
 'Mar 2018 Sales Mar 2018 Units sold Mar 2018']
</code></pre>
<p>Using <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>itertools.islice</code></a>, you can avoid the expense of creating new lists:</p>
<pre><code>from itertools import islice

zipper = zip(ListA, islice(ListB, 0, None, 2), islice(ListB, 1, None, 2))
res = [f'{i} {j} {k}' for i, j, k in zipper]
</code></pre>
</div>
<span class="comment-copy">Can you be more specific about your partial matching requirements?  The example you've given is pretty simple to generate a solution for, but what about, say, a string that has "Jan Feb", or just "Feb", or just "2018"?  What are the edge cases in your data, and how do you expect to handle them?  Consider providing more robust example data to illustrate the full set of matching rules.  (Alternately, if you literally only have string data in this exact format, state that as well.)</span>
