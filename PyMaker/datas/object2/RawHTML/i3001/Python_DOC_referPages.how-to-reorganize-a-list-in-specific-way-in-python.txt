<div class="post-text" itemprop="text">
<p>So, what I am trying to do is if you have the following list:</p>
<pre><code>example_list=['This', 'is', 'QQQQQ', 'an', 'QQQQQ', 'example', 'list', 'QQQQQ', '.']
</code></pre>
<p>I want it to be reorganised as this:</p>
<pre><code>example_list=['This is', 'an', 'example list', '.']
</code></pre>
<p>Notice how QQQQQs are being used as placeholders. So, basically I want everything between the QQQQQs to be one list element. How do I do that?</p>
<p>I have seen other posts about the  join() function, but the problem I have is putting a space in between, if there is more than 1 word.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using a simple iteration.</p>
<p><strong>Ex:</strong></p>
<pre><code>example_list=['This', 'is', 'QQQQQ', 'an', 'QQQQQ', 'example', 'list', 'QQQQQ', '.']

res = [[]]
for i in example_list:
    if i == "QQQQQ":
        res.append([])
    else:
        res[-1].append(i)
print([" ".join(i) for i in res])
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>['This is', 'an', 'example list', '.']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try <code>join</code> together with <code>strip()</code> to get rid of white spaces</p>
<pre><code>answer = [s.strip() for s in ' '.join(map(str, example_list)).split('QQQQQ')]
print (answer)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>['This is', 'an', 'example list', '.']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby()</code></a>:</p>
<pre><code>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; example_list=['This', 'is', 'QQQQQ', 'an', 'QQQQQ', 'example', 'list', 'QQQQQ', '.']
&gt;&gt;&gt; [' '.join(g) for k, g in groupby(example_list, lambda x: x == 'QQQQQ') if not k]
['This is', 'an', 'example list', '.']
</code></pre>
<p>Or even with <a href="https://docs.python.org/3/reference/datamodel.html#object.__eq__" rel="nofollow noreferrer"><code>.__eq__</code></a> comparison, as suggested by <a href="https://stackoverflow.com/questions/51634279/how-to-reorganize-a-list-in-specific-way-in-python?noredirect=1#comment90233044_51634393">@tobias_k</a> in the comments:</p>
<pre><code>&gt;&gt;&gt; [' '.join(g) for k, g in groupby(example_list, key='QQQQQ'.__eq__) if not k]
['This is', 'an', 'example list', '.']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simple solution: Do a join with space and then just add the spaces to placeholder in a split function.</p>
<p><strong>Example:</strong></p>
<pre><code>example_list = ['This', 'is', 'QQQQQ', 'an', 'QQQQQ', 'example', 'list', 'QQQQQ', '.']

print(' '.join(example_list).split(' QQQQQ '))
</code></pre>
<p><strong>Result:</strong></p>
<pre><code>['This is', 'an', 'example list', '.']
</code></pre>
<p>or more generalized:</p>
<pre><code>split_arg = ' {} '.format(place_holder)
example_list = ' '.join(example_list).split(split_arg)
</code></pre>
<p><strong>edit after comment by tobias_k</strong></p>
<p>comment was: "Of course, this only works if the placeholder actually is a string, and if that stirng does not appear in any of the other words. I.e. it would not work if the placeholder was, e.g., None, 'Q', or '' – tobias_k"</p>
<p>Which is true, so I made an even more generalised solution so it should work for each placeholder.</p>
<pre><code>import random
import string

example_list = ['This', 'is', None, 'an', None, 'example', 'list', None, '.']
place_holder = None
# create a random string of length 10
random_place_holder = ''.join(random.choices(string.ascii_uppercase + string.digits, k=10))  
# Replace all old place holders with our new random string placeholder
example_list = [x if x != place_holder else random_place_holder for x in example_list ]
split_arg = ' {} '.format(random_place_holder)
example_list = ' '.join(example_list).split(split_arg)
print(example_list)
</code></pre>
<p>To be honest you might be better off using any of the other solutions if you have an inconvenient place holder such as mentioned by tobias_k.</p>
<p>Decided to time it:
used: </p>
<pre><code>example_list = ['This', 'is', None, 'an', None, 'example', 'list', None, '.'] * 10000
place_holder = None
</code></pre>
<p>I used a longer list so that the creation of the random-string isn't a significant time consuming part, and timing is silly when you aren't using big lists anyway.</p>
<p>This solution:
11.6 ms ± 153 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)</p>
<p>Rakesh' loop solution:
25.8 ms ± 819 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)</p>
<p>RoadRunner's groupby:
34.4 ms ± 1.21 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)</p>
</div>
<span class="comment-copy">@dfundako that doesn't solve the space issue.</span>
<span class="comment-copy">what is <code>res[-1]</code> for?</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/11367902/negative-list-index">stackoverflow.com/questions/11367902/negative-list-index</a></span>
<span class="comment-copy">@Rakesh Really not a big deal, I'm just wondering why linking the dupe ?</span>
<span class="comment-copy">Sorry, but I have problems understanding why <code>res[-1].append(i)</code> works the way it does.</span>
<span class="comment-copy">Try:  <code>a = [1,2,3,4,5]</code> and <code>print(a[-1])</code> it should print <code>5</code></span>
<span class="comment-copy">You could also use <code>key='QQQQQ'.__eq__</code> (not sure if that's better, though)</span>
<span class="comment-copy">@tobias_k That's a cool way to use <code>key</code>. Updated answer to also include it :).</span>
<span class="comment-copy">Of course, this only works if the placeholder actually is a string, and if that stirng does not appear in any of the other words. I.e. it would not work if the placeholder was, e.g., <code>None</code>, <code>'Q'</code>, or <code>''</code></span>
<span class="comment-copy">@tobias_k Fair nuff, fixed it for any random placeholder.</span>
