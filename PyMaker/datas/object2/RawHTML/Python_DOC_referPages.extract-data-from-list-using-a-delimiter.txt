<div class="post-text" itemprop="text">
<p>I have a set of 10 python lists in the below format:</p>
<pre><code>[ABC*DEF*123&gt;~123*999*HHH]
[PQR*RST*567&gt;~AWS*999*POI]
[XYZ*TGT*234&gt;~2352*245*HFT]
[STU*DEF*789&gt;~654*345*QQQ]
</code></pre>
<p>I am trying to extract data from the above list such that the final output is a Dataframe and <strong>expect the below output</strong>:</p>
<pre><code>123,999,HHH
AWS,999,POI
2352,245,HFT
654,345,QQQ
</code></pre>
<p>Given below is what I have done thus far:</p>
<pre><code>allFiles = Path where all the txt files are stored
list_ = []
for file_ in allFiles:
    with open(file_) as fp:
        lines1 = fp.read().split('\n')
        b = [i.split('~', 1)[1] for i in lines1]
        print(b)
</code></pre>
<p>The above gives me a list as below:</p>
<pre><code>[123*999*HHH]
[AWS*999*POI]
[2352*245*HFT]
[654*345*QQQ]
</code></pre>
<p>I am unable to extract the above data using a delimiter (*) and split them into different columns and have this saved to a Dataframe</p>
</div>
<div class="post-text" itemprop="text">
<p>You can start by creating a dataframe with the lists of strings as rows and split each string by <code>~</code> using <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.str.split.html" rel="nofollow noreferrer"><code>str.split</code></a>. You can then slice the result selecting only the second term followed by another split, this time by <code>*</code>, setting <code>expand=True</code>:</p>
<pre><code>l1 = ['ABC*DEF*123&gt;~123*999*HHH']
l2 = ['PQR*RST*567&gt;~AWS*999*POI']
l3 = ['XYZ*TGT*234&gt;~2352*245*HFT']
l4 = ['STU*DEF*789&gt;~654*345*QQQ']

df = pd.DataFrame([l1,l2,l3,l4], columns=['col1'])
df.col1.str.split('~').str[1].str.split('*', expand=True)

     0    1    2
0   123  999  HHH
1   AWS  999  POI
2  2352  245  HFT
3   654  345  QQQ
</code></pre>
<hr/>
<p><b>Update</b></p>
<p>For doing the above with lists from multiple files:</p>
<pre><code>l = []
for file_ in allFiles:
    f = open(file_, 'r')
    l.extend([line.rstrip('\n') for line in f.readlines()])
</code></pre>
<p>And then do the same as before:</p>
<pre><code>df = pd.DataFrame(l, columns=['col1'])
df.col1.str.split('~').str[1].str.split('*', expand=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since, you already have the lists, a simple function can split on delimiter(*).</p>
<pre><code>l1 = ["123*999*HHH"]
l2 = ["AWS*999*POI"]
l3 = ["2352*245*HFT"]
l4 = ["654*345*QQQ"]

def split_delim(l):
    for i in l:
        l = i.split('*')
    return l

l1 = split_delim(l1)
l2 = split_delim(l2)
l3 = split_delim(l3)
df = pd.DataFrame({'l1':l1, 'l2':l2, 'l3':l3})
df
    l1      l2      l3
0   123     AWS     2352
1   999     999     245
2   HHH     POI     HFT
</code></pre>
<p>A more generalized solution that is independent of the number of lists. This performs all the split operations before forming the dataframe.</p>
<pre><code>allFiles = Path where all the txt files are stored

def split_delim(Files):  
    list_ = []
    for file_ in Files:
        with open(file_) as fp:
            lines1 = fp.read().split('\n')
            b = [i.split('~', 1)[1] for i in lines1]
            for i in b:
                l = i.split('*')
                list_.append(l)                
    return list_

list_new = split_delim(allFiles)

df = pd.DataFrame(list_new, columns=['col1'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html" rel="nofollow noreferrer"><code>read_csv</code></a> with separator <code>~</code>, and parameter <code>name</code>s and then add <a href="http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.str.split.html" rel="nofollow noreferrer"><code>Series.str.split</code></a> for second column for <code>DataFrame</code>:</p>
<pre><code>import pandas as pd

temp=u"""ABC*DEF*123&gt;~123*999*HHH
PQR*RST*567&gt;~AWS*999*POI
XYZ*TGT*234&gt;~2352*245*HFT
STU*DEF*789&gt;~654*345*QQQ"""
#after testing replace 'pd.compat.StringIO(temp)' to 'filename.csv'
df = pd.read_csv(pd.compat.StringIO(temp), sep="~", names=['a','b'])

df = df['b'].str.split('*', expand=True)
print (df)
      0    1    2
0   123  999  HHH
1   AWS  999  POI
2  2352  245  HFT
3   654  345  QQQ
</code></pre>
<p>If want use your solution, add another <code>split</code>:</p>
<pre><code>list_ = []
for file_ in allFiles:
with open(file_) as fp:
    lines1 = fp.read().split('\n')
    b = [i.split('~', 1)[1].split('*') for i in lines1]
    list_.append(b)

df = pd.DataFrame([y for x in list_ for y in x])
print(df)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have to specify your delimiter explicitly, for example</p>
<pre><code>print('ABC*DEF*123&gt;~123*999*HHH'.split('~')[1].split('*'))
</code></pre>
<p>produces:</p>
<pre><code>['123', '999', 'HHH']
</code></pre>
</div>
<span class="comment-copy">thanks for the reply, however the number of lists is not fixed. It changes dynamically. How could I have the above work such that we don't have to define the number of lists.. Thanks.</span>
<span class="comment-copy">@scottmartin how are your lists saved? In a larger list?</span>
<span class="comment-copy">each file I read gets stored as a list. As shown in my initial post, I have 'n' lists as a result of my reading the files from a folder (where n is the number of files in the folder). Hope I have answered your question here.</span>
<span class="comment-copy">Okay yes @scottmartin, check the update</span>
<span class="comment-copy">thanks that helped..</span>
<span class="comment-copy">thank you . I added another line where in I saved the list to a Dataframe and see only the last list/ file gets saved.  <code>df = pd.DataFrame(b)</code>  Could you please assist. Thanks.</span>
<span class="comment-copy">@scottmartin - Can you check now?</span>
<span class="comment-copy">thank you that worked perfectly.</span>
<span class="comment-copy">just another help. I have a few rows that have values such as 0001~ABC after performing the split as mentioned above. Could you please advice as to how could I modify the above code such that I can apply this additional split('~') method on the latest updated code you shared above..</span>
<span class="comment-copy">@scottmartin - Better is create new question.</span>
