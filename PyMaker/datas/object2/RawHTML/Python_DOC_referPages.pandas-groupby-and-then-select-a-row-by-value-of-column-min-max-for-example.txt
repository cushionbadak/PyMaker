<div class="post-text" itemprop="text">
<p>Let's say I have a dataframe</p>
<pre><code>Category Data1 column1
A 'SOMEDATA' 10
A 'SOMEDATA' 2
A 'SOMEDATA' -10
B 'SOMEDATA' 10
B 'SOMEDATA' 1
B 'SOMEDATA' -10
</code></pre>
<p>and so on</p>
<p>I'd like to select a one row in each group by column value.  For example, ABS(column1)</p>
<p>So resulting data is</p>
<pre><code>Category Data1 column1
A 'SOMEDATA' 2
B 'SOMEDATA'  1
</code></pre>
<p>How can I do this in python?</p>
<p>I couldn't figure out how to return entire row.  For example,</p>
<pre><code>df.groupby('Category')['column1'].min();
</code></pre>
<p>this would only return 'Category' min(column1)  only.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>sort</code> then <code>.drop_duplicates</code>, if you want single minimum row based on absolute value. </p>
<pre><code>(df.assign(to_sort = df.column1.abs()).sort_values('to_sort')
     .drop_duplicates('Category').drop(columns='to_sort'))

  Category       Data1  column1
4        B  'SOMEDATA'        1
1        A  'SOMEDATA'        2
</code></pre>
<p>Sort can only sort on existing columns, so we need to create the column of absolute values (with <code>.assign</code>). Sorting then ensures the minumum absolute value appears first, and dropping duplicates keeps the first row for each category, which is now the minumum absolute value row. </p>
<p>Also possible with <code>groupby</code>, which is better if you need to return more than one row per group:</p>
<pre><code>df.assign(to_sort = df.column1.abs()).sort_values('to_sort').groupby(df.Category).head(1)
</code></pre>
<hr/>
<p>Alternatively, you can slice with the result of a <code>groupby</code>. This is useful in cases where you want to return <strong>all</strong> rows that match the minimum:</p>
<pre><code>df[df.groupby(df.Category, group_keys=False).apply(lambda x: x.column1 == x.column1.abs().min())]

  Category       Data1  column1
1        A  'SOMEDATA'        2
4        B  'SOMEDATA'        1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can create other column with the absolute values and then <code>loc</code> with the min values</p>
<pre><code>df['absValues'] = df.column1.abs()
df.loc[df['absValues'] == df.groupby('Category')['absValues'].transform('min')]
.drop_duplicates(['Category']).drop('absValues', 1)

out
    Category    Data1   column1
1   A   'SOMEDATA'  2
4   B   'SOMEDATA'  1
</code></pre>
<p>This way you will preserve all the other columns for each row in your DataFrame. <br/><br/>
If you need to return all the values equal to min in each group, remove the <code>.drop_duplicates()</code> from the code.</p>
</div>
<span class="comment-copy">Welcome to Stack Overflow!   Please familiarize with these FAQs and repost your question -- (1) How to create a Minimal, Complete, and Verifiable example - <a href="https://stackoverflow.com/help/mcve">stackoverflow.com/help/mcve</a> and (2) Why is voting important? - <a href="https://stackoverflow.com/help/why-vote">stackoverflow.com/help/why-vote</a>.  -- Happy Coding!!</span>
