<div class="post-text" itemprop="text">
<p>I have some existing code that I'm trying to profile. I can successfully line profile class methods by adding a <code>@profile</code> decorator using <a href="https://github.com/rkern/line_profiler" rel="nofollow noreferrer">kernprof</a>.</p>
<p>Is there a general way to profile class instantiation? I have a few classes that have a quite complex inheritance structure. When I try to profile their init functions I get something like this:</p>
<pre><code>Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   179                                               def __init__(self, data):
   180         1    8910739.0 8910739.0    100.0          super().__init__(data)
   181         1         10.0      10.0      0.0          self.mortgage_rate = 5.2  # rate in percentage
</code></pre>
<p>Which is a bit useless, because I don't know what actual parent <code>__init__</code> function (this class has 2 parents, each of which have one or more parents) is being called.</p>
<p>Is there any way to do this better? For example, is there a way to automatically dive into each line, and profile the lines that get called by it (with limited depth)?</p>
</div>
<div class="post-text" itemprop="text">
<p>There are many ways:</p>
<h2>The <code>trace</code> module</h2>
<p>The <a href="https://docs.python.org/3/library/trace.html#cmdoption-trace-trackcalls" rel="nofollow noreferrer">trace</a> module in the standard python libraries provides a handy function to track the execution of your program, line by line. Therefore it's pretty easy to figure out which function is called by your <code>__init__</code> method.</p>
<p>Try to run the following codes in a python shell</p>
<pre><code>from MyMod import MyClass
# Do necessary preparation for your module HERE

# --- Setup and start tracing ---
import sys, trace
tracer = trace.Trace( trace=0, count=0, timing=True,  countcallers=True)
tracer.run('MyClass()') # init your class and track the function calls
tracer.results().write_results(show_missing=False) # print result to the screen
</code></pre>
<p>The tracer will display the calling relationships exposed by running the program. </p>
<pre><code>MyDependency.Fourth.__init__ -&gt; MyDependency.Second.__init__
MyDependency.Second.__init__ -&gt; MyDependency.Third.__init__
MyDependency.Third.__init__ -&gt; MyDependency.First.__init__
MyClass.Child.__init__ -&gt; MyDependency.Fourth.__init__
</code></pre>
<p>The <code>trace</code> module has also a CLI. The above python codes are equivalent to this shell command:</p>
<pre><code>python -m trace -T test.py | grep __init__
</code></pre>
<p>where option <code>-T</code> is equivalent to <code>countcallers=True</code>.
The target script <code>test.py</code> should contain minimal codes to initialize your class.</p>
<h3>Add line-profiler to the invoked functions</h3>
<p>Now you know the names of modules, classes and methods which were invoked in your class initialization. Then you can  add <code>@profile</code> decorator to those functions. 
As a side note: It's not necessary to modify the source code of each module for adding the decorator. Simply import them in your main module and run 
<code>profile.add_function(MyDependency.Third.__init__)</code> 
will have the same effect.</p>
<p>If you want to get a chronological trace of all lines of python codes that were invoked, use the following options</p>
<pre><code>tracer = trace.Trace( ignoredirs=[sys.prefix, sys.exec_prefix ], trace=1, count=0, timing=True )
</code></pre>
<p>It will print out</p>
<pre><code> --- modulename: MyMod, funcname: __init__
0.00 MyMod.py(6):         super().__init__()
 --- modulename: MyDependency, funcname: __init__
0.00 MyDependency.py(17):         super().__init__()
...
</code></pre>
<p>where the first column is the walk clock time.</p>
<h2>The <code>sys.setprofile</code> method</h2>
<p>You can register a callback function via the <code>sys.setprofile</code> method. It will receive events of stack transition (when a function gets called or returns). Each event comes with a stack frame object, from which you can record the module, class and the function that is invoked. </p>
<p>This method will give you maximum flexibility. For example, you can filter out function calls with stack-depth or the length of execution time.
For an usage example, please see my older <a href="https://stackoverflow.com/a/37007520/6238076">post</a> for a similar question.</p>
<h1>File structure for the above examples</h1>
<p>The above results are based on the following module/class structure taken from <a href="https://stackoverflow.com/a/3277407/6238076">another post</a>.</p>
<p>File "MyDependency.py"</p>
<pre><code>class First:
    ...
class Second(First):
    ...
class Third(First):
    ...
class Fourth(Second, Third):
    ...
</code></pre>
<p>File "MyModel.py"</p>
<pre><code>from MyDependency import Fourth
class MyClass(Fourth):
    def __init__(self):
        super().__init__()
</code></pre>
</div>
<span class="comment-copy">It would be really helpful to know why this got down-voted.. If I can add something to the question, I'm happy to.</span>
<span class="comment-copy">parent class is easy to determine by <code>mro</code> and will be static at run time unless you are creating classes dynamically at run time.</span>
