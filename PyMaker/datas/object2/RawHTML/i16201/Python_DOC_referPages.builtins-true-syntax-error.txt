<div class="post-text" itemprop="text">
<p>Why does the following code generate a syntax error?</p>
<pre><code>&gt;&gt;&gt; import builtins

&gt;&gt;&gt; dir(builtins)
['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning', 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError', 'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning', 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FileExistsError', 'FileNotFoundError', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'InterruptedError', 'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'PermissionError', 'ProcessLookupError', 'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'ZeroDivisionError', '_', '__build_class__', '__debug__', '__doc__', '__import__', '__loader__', '__name__', '__package__', '__spec__', 'abs', 'all', 'any', 'ascii', 'bin', 'bool', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'exit', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'quit', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip']
&gt;&gt;&gt; builtins.True
  File "&lt;stdin&gt;", line 1
    builtins.True
            ^
SyntaxError: invalid syntax
</code></pre>
<p>I know in Python 3.X <code>True</code> and <code>False</code> are reserved words, but calling <code>builtins.True</code> am I just calling an attribute on the module object <code>builtins</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>True</code> is  a reserved keyword, and that means you cannot use it as an attribute name either. Like names, attributes must be valid Python identifiers.</p>
<p>You can still access the object as an attribute with <code>getattr()</code>:</p>
<pre><code>&gt;&gt;&gt; import builtins
&gt;&gt;&gt; getattr(builtins, 'True')
True
</code></pre>
<p>This can be found in the documentation under:</p>
<ul>
<li><p><a href="https://docs.python.org/3/reference/expressions.html#attribute-references" rel="noreferrer"><em>Attribute references</em></a> in the expression documentation:</p>
<pre><code>attributeref ::=  primary "." identifier
</code></pre></li>
<li><p><a href="https://docs.python.org/3/reference/lexical_analysis.html#identifiers" rel="noreferrer"><em>Identifiers and keywords</em></a> in the lexical analysis docs:</p>
<blockquote>
<p>The following identifiers are used as reserved words, or <em>keywords</em> of the language, and <strong>cannot be used as ordinary identifiers</strong>.</p>
<p><code>False</code> [...] <code>True</code></p>
</blockquote>
<p>Emphasis mine.</p></li>
</ul>
</div>
<span class="comment-copy">you can use <code>True</code> and <code>False</code> just as they are, no <code>builtins</code> module prefix is needed</span>
<span class="comment-copy">ok, so, being <code>True</code> and <code>False</code> now reserverd words they aren't lookedup in the builtins module, is it right?</span>
<span class="comment-copy">@antox: <code>True</code> and <code>False</code> are literals and loaded as constants with the bytecode. They are built-in singletons, just like <code>None</code> is.</span>
<span class="comment-copy">but are they taken from the builtins module?</span>
<span class="comment-copy">@antox: of course they are. The <code>builtins</code> module is just a series of names letting you address built-in objects. But because <code>None</code> and <code>True</code> and <code>False</code> are keywords the compiler can store them as constants because nothing can ever rebind those names to something else.</span>
<span class="comment-copy">@antox: the language definition is that these are singletons and the names are keywords, so they cannot be anything <i>but</i> built-in objects.</span>
