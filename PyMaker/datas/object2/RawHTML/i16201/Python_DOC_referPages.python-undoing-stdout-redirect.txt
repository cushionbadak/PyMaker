<div class="post-text" itemprop="text">
<p>So I know from </p>
<p><a href="https://stackoverflow.com/questions/6735917/redirecting-stdout-to-nothing-in-python">Redirecting stdout to "nothing" in python</a> </p>
<p>that you can suppress print statements. But is it possible to undo that command later on, so that after a certain points, print statements will indeed be printed again?</p>
<p>For example, let's say I want to print "b" but not "a".</p>
<p>I would do:</p>
<pre><code>import os
f = open(os.devnull, 'w')
sys.stdout = f

print("a")

# SOME COMMAND

print("b")
</code></pre>
<p>Could someone enlighten me as to what "SOME COMMAND" would be?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os
import sys

f = open(os.devnull, 'w')
x = sys.stdout # save sys.stdout
sys.stdout = f

print("a")


sys.stdout = x # re-assign sys.stdout
print("b") # print 'b'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The original <code>sys.stdout</code> is always preserved in <a href="https://docs.python.org/2/library/sys.html#sys.__stdin__" rel="nofollow"><code>sys.__stdout__</code></a>:</p>
<pre><code>sys.stdout = sys.__stdout__
</code></pre>
<p>However, the documentation does note that explictly saving the original <code>sys.stdout</code> is preferred:</p>
<blockquote>
<p>It can also be used to restore the actual files to known working file
  objects in case they have been overwritten with a broken object.
  However, the preferred way to do this is to explicitly save the
  previous stream before replacing it, and restore the saved object.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>starting from python 3.4 you can do this (see <a href="https://docs.python.org/3/library/contextlib.html?highlight=context#contextlib.redirect_stdout" rel="nofollow noreferrer"><code>contextlib.redirect_stdout</code></a>)</p>
<pre><code>from contextlib import redirect_stdout

with redirect_stdout(None):
    # stdout suppressed
# stdout restored
</code></pre>
<p><code>stdout</code> is suppressed within the with statement. outside the <code>with</code> context your <code>stdout</code> is restored.</p>
<p>and by the way: there is no need to <code>f = open(os.devnull, 'w')</code> in your original version - <code>sys.stdout = None</code> is enough as i recently learned: <a href="https://stackoverflow.com/questions/49757674/why-does-sys-stdout-none-work">why does sys.stdout = None work?</a> .</p>
</div>
<span class="comment-copy">use <a href="https://docs.python.org/3.4/library/contextlib.html#contextlib.redirect_stdout" rel="nofollow noreferrer"><code>contextlib.redirect_stdout</code></a> and don't worry about it.</span>
<span class="comment-copy">You could use a context manager as shown in <a href="http://stackoverflow.com/a/22434262/4279">Redirect stdout to a file in Python?</a>.</span>
<span class="comment-copy">Solved, thank you.</span>
<span class="comment-copy">Solved, thank you.</span>
