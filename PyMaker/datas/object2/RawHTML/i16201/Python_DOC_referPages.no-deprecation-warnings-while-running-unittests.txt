<div class="post-text" itemprop="text">
<p>When running unittests I would like to see deprecation warnings. It appears that <a href="https://docs.python.org/3.5/whatsnew/2.7.html" rel="nofollow">since Python 2.7 deprecation warnings are silenced</a>. I'll quote from the page:</p>
<blockquote>
<p>For Python 2.7, a policy decision was made to silence warnings only of interest to developers by default. DeprecationWarning and its descendants are now ignored unless otherwise requested, preventing users from seeing warnings triggered by an application. This change was also made in the branch that became Python 3.2. (Discussed on stdlib-sig and carried out in issue 7319.)</p>
</blockquote>
<p>Later it appears as though I should see deprecation warnings while running unittests:</p>
<blockquote>
<p>The unittest module also automatically reenables deprecation warnings when running tests.</p>
</blockquote>
<p>Well.. simply put, it doesn't work for me, so I must be doing something wrong. I've tested with the following code:</p>
<pre><code>import warnings
import unittest

def spam():
    warnings.warn('test', DeprecationWarning, stacklevel=2)
    return 'spam'

class Eggs(object):
    def __init__(self):
        self.spam = spam()

class Test(unittest.TestCase):
    def test_warn(self):
        eggs = Eggs()
        self.assertEqual('spam', eggs.spam)
</code></pre>
<p>Then I run the code (saved in <code>spam.py</code>):</p>
<pre><code>python -m 'unittest' spam
</code></pre>
<p>And this gives me the following output:</p>
<pre><code>.
----------------------------------------------------------------------
Ran 1 test in 0.001s

OK
</code></pre>
<p>No deprecation warning. So the question is; what am I doing wrong here?</p>
</div>
<div class="post-text" itemprop="text">
<p>It looks like the documentation is wrong - in 2.7 unittest does not reenable deprecation warnings.</p>
<pre><code>&gt;&gt;&gt; import warnings
&gt;&gt;&gt; from pprint import pprint

&gt;&gt;&gt; pprint(warnings.filters)
[('ignore', None, &lt;type 'exceptions.DeprecationWarning'&gt;, None, 0),
 ('ignore', None, &lt;type 'exceptions.PendingDeprecationWarning'&gt;, None, 0),
 ('ignore', None, &lt;type 'exceptions.ImportWarning'&gt;, None, 0),
 ('ignore', None, &lt;type 'exceptions.BytesWarning'&gt;, None, 0)]

&gt;&gt;&gt; import unittest
&gt;&gt;&gt; pprint(warnings.filters)
[('ignore', None, &lt;type 'exceptions.DeprecationWarning'&gt;, None, 0),
 ('ignore', None, &lt;type 'exceptions.PendingDeprecationWarning'&gt;, None, 0),
 ('ignore', None, &lt;type 'exceptions.ImportWarning'&gt;, None, 0),
 ('ignore', None, &lt;type 'exceptions.BytesWarning'&gt;, None, 0)]
</code></pre>
<p>... and there is nothing in <code>unittest.py</code> that I saw which reenables <code>DeprecationWarning</code>.</p>
<p>You can of course enable them yourself:</p>
<pre><code>warnings.simplefilter('always', DeprecationWarning)
</code></pre>
<p>Or on the command line:</p>
<pre><code>$ python -Wd -m 'unittest' spam
spam.py:10: DeprecationWarning: test
  self.spam = spam()
.
----------------------------------------------------------------------
Ran 1 test in 0.000s

OK
</code></pre>
<p>Or with a decorator applied to each of your <code>unittest.TestCase</code> functions so that <code>DeprecationWarning</code> is enabled only for testing:</p>
<pre><code>import warnings
import unittest

def enable_DeprecationWarning(fn):
    def _wrapped(*args, **kwargs):
        with warnings.catch_warnings():
            warnings.simplefilter('always', DeprecationWarning)
            return fn(*args, **kwargs)
    return _wrapped

def spam():
    warnings.warn('test', DeprecationWarning, stacklevel=2)
    return 'spam'

class Eggs(object):
    def __init__(self):
        self.spam = spam()

class Test(unittest.TestCase):
    @enable_DeprecationWarning
    def test_warn(self):
        eggs = Eggs()
        self.assertEqual('spam', eggs.spam)

if __name__ == '__main__':
        unittest.main()
</code></pre>
<p>The command line option is probably the best for unit testing as it requires no code changes.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since I use Eclipse for Python development I decided to use a different solution than suggested. It is also possible to enable warnings using an environment variable. If the environment variable <code>PYTHONWARNINGS</code> is set to <code>default</code> deprecation warnings are shown.</p>
<p>In Eclipse (PyDev) the interpreter can be modified to include the environment variable. This way it is only enabled for projects using that interpreter.</p>
<p><img alt="pydev interpreter config" src="https://i.stack.imgur.com/5BI1d.png"/></p>
</div>
<span class="comment-copy"><code>unittest</code> changes <code>warnings</code> filter at runtime, not at import time. See <a href="https://bitbucket.org/mirror/cpython/src/d2111109fd77c42d0e285fa09d5fcb5965a8bf5c/Lib/unittest/runner.py?at=3.5&amp;fileviewer=file-view-default#runner.py-161" rel="nofollow noreferrer">here</a>.</span>
<span class="comment-copy">@saaj: So why don't the warnings appear then? This question relates to Python 2.7; you appear to be referencing the source code for Python 3.5.</span>
<span class="comment-copy">You're right. I've missed the tag. This <a href="https://glot.io/snippets/eikfvnpeeb" rel="nofollow noreferrer">snippet</a> works as expected in <i>latest</i> (3.5) and doesn't in <i>2</i> (2.7). Likely that only the "What's new" page is wrong. <a href="https://docs.python.org/2.7/library/unittest.html#unittest" rel="nofollow noreferrer"><code>unittest</code></a> docs for 2.7 doesn't describe there's anything re-enabled, while docs for 3 <a href="https://docs.python.org/3/library/unittest.html#unittest.TextTestRunner" rel="nofollow noreferrer">does</a>.</span>
