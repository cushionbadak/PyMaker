<div class="post-text" itemprop="text">
<pre><code>fontName  = b"\xC8\xC1\x10" \
            # Representación del tipo de fuente en bytes.
          + fontNamesInBytes[fontName] \
            # Tipo de atributo: attr_ubyte | Atributo: FontName (Nº 168)
          + "\xF8\xA8"
</code></pre>
<hr/>
<pre><code>python3 test.py
  File "test.py", line 14
    + fontNamesInBytes[fontName] \
    ^
IndentationError: unexpected indent

python3 test.py
  File "test.py", line 13
    \# Representación del tipo de fuente en bytes.\
                                                   ^
SyntaxError: unexpected character after line continuation character

python3 test.py
  File "test.py", line 15
    """ Tipo de atributo: attr_ubyte | Atributo: FontName (Nº 168)"""\
                                                                     ^
SyntaxError: invalid syntax
</code></pre>
<p>Is there a way I can comment between the assignment? I've tried <code>""" """</code> but gives syntax error also.</p>
<p>Edit for Martin:</p>
<pre><code>fontName  = b"\xC8\xC1\x10" \
          """ Representación del tipo de fuente en bytes."""\
          + fontNamesInBytes[fontName] \
          """ Tipo de atributo: attr_ubyte | Atributo: FontName (Nº 168) """\
          + b"\xF8\xA8"
</code></pre>
<hr/>
<pre><code>    python3 test.py
  File "test.py", line 15
    """ Tipo de atributo: attr_ubyte | Atributo: FontName (Nº 168) """\
                                                                      ^
SyntaxError: invalid syntax
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You cannot put comments <em>between</em> statements like this, as the <code>\</code> effectively removes the newline. As such, all the text after the <code>#</code> is a comment and no longer part of the expression.</p>
<p>You can put your expression in parentheses instead:</p>
<pre><code>fontName = (
    b"\xC8\xC1\x10"
    # Representación del tipo de fuente en bytes.
    + fontNamesInBytes[fontName]
    # Tipo de atributo: attr_ubyte | Atributo: FontName (Nº 168)
    + b"\xF8\xA8")
</code></pre>
<p>Now the comments are seen as separate lines but the parser continues to expand the expression until the closing <code>)</code>. By using parentheses you get to still have your newlines, crucial in signalling when a comment ends and the expression continues.</p>
<p>To understand the difference, study the <a href="https://docs.python.org/3/reference/lexical_analysis.html#line-structure" rel="nofollow"><em>Line structure</em> documentation</a>; an expression should form one logical line, but normally only one <em>physical</em> line is permitted. But within parentheses, physical newline characters are ignored allowing for <a href="https://docs.python.org/3/reference/lexical_analysis.html#implicit-line-joining" rel="nofollow">implicit line joining</a>:</p>
<blockquote>
<p>Expressions in parentheses, square brackets or curly braces can be split over more than one physical line without using backslashes.</p>
<p>[...]</p>
<p>Implicitly continued lines can carry comments</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You can do </p>
<pre><code>In [5]: ('a'
   ...: # comment
   ...: 'b')
Out[5]: 'ab'
</code></pre>
<p>Your code would turn into</p>
<pre><code>fontName  = (b"\xC8\xC1\x10" 
             # Representación del tipo de fuente en bytes.
             + fontNamesInBytes[fontName] +
             # Tipo de atributo: attr_ubyte | Atributo: FontName (Nº 168)
             b"\xF8\xA8")
</code></pre>
<p>This works because <em>expressions in parentheses, square brackets or curly braces can be split over more than one physical line without using backslashes</em> and <em>implicitly continued lines can carry comments</em> (according to <a href="https://docs.python.org/dev/reference/lexical_analysis.html#implicit-line-joining" rel="nofollow">documentation</a>).</p>
</div>
<span class="comment-copy">This certainly is the answer, I've tried a lot of things and none worked. It is strange that if in the original form, you put `""" Comment """ \` only in the second comment it throws Invalid Syntax. Like if the first one went good, or maybe something else was happening.</span>
<span class="comment-copy">@Jorge: not sure I follow your comment; in your case the expression ended (as valid Python code) with the comment. The next line with <code>+ ...</code> is a new statement and that statement was invalid.</span>
<span class="comment-copy">@Jorge: <code>"""..."""</code> triple-quote strings are not comments; they are strings, with only the permissible syntax slightly different from regular strings.</span>
<span class="comment-copy">Oh then that was the problem, I thought they were comments, maybe I missread the tutorials. Thanks</span>
<span class="comment-copy">Would you mind explain how is called the () operator and what is it purpose? IE, why it works that way?</span>
<span class="comment-copy">Note that the <code>In[5]:</code> is not part of the code, but an <a href="http://ipython.org" rel="nofollow noreferrer">iPython</a> prompt.</span>
<span class="comment-copy">But OP's example contains a variable as well, and this will only work with literals.</span>
<span class="comment-copy">Thanks for the answer. Seems that you have deleted it previously that's why I chose Martijn answer (at that time it was the only one). Would you mind explain how is called the () operator and what is it purpose? IE, why it works that way?</span>
<span class="comment-copy">@Jorge I deleted the answer because it was misleading. Martijn's answer is better.</span>
