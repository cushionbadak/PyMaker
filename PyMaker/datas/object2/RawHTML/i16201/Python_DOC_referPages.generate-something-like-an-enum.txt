<div class="post-text" itemprop="text">
<p>I want to emulate something like an enum, but slightly different. There are 'N' different entities within a list. The 'N' changes depending on the data. I want to assign each one of those 'N' entities a value from 1 to N. For certain entities, I want to give it them the same value. </p>
<p>For example,
<code>things = ['one', 'two', 'three', 'first', 'five']</code></p>
<p>I want to assign:</p>
<pre><code>one = 1
two = 2
three = 3
first = 1
five = 5
</code></pre>
<p>How do I do this in a graceful manner? </p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://stackoverflow.com/questions/36932/how-can-i-represent-an-enum-in-python">How can I represent an 'Enum' in Python?</a></p>
<p>The way I'd go about it is as follows. Just define the typical enumeration using args and then put any of your special parameters in the keyword arguments.</p>
<pre><code>def enum(*args, **kwargs):
    enums = dict(zip(args, range(len(args))), **kwargs)
    return type('Enum', (), enums)
test = enum('a','b','c',first = 1, second = 2)
print test.a
print test.b
print test.c
print test.first
print test.second
</code></pre>
<p>Yields:</p>
<pre><code>0
1
2
1
2
</code></pre>
<p>Also, this will use 0 based indexing. If you want a base of 1, as in your example, use</p>
<pre><code>range(1,len(args)+1))
</code></pre>
<p>instead of</p>
<pre><code>range(len(args))
</code></pre>
<p>To me, it seems like quite a hassle if you have to skip values (like four) and have specially assigned values (like first) thrown in randomly. In that case, I don't think you could use this solution (or something like it). Instead, you'd probably have to find any specially assigned strings and give those values, which is going to be a lot less graceful.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the Python function <code>enumerate</code>. That is what it is there for. As in </p>
<pre><code> enumerate(things)
</code></pre>
<p>You can convert it to whatever you want. Like: </p>
<pre><code>dict(enumerate(things)) # =  {0: 'one', 1: 'two', 2: 'three', 3: 'first', 4: 'five'}
list(enumerate(things)) # = [(0, 'one'), (1, 'two'), (2, 'three'), (3, 'first'), (4, 'five')]
</code></pre>
<p>etc ... </p>
<p>The Pythonic way of going it is to create a generator by just using <code>enumerate</code> where you need it. This avoids generating extra data and consuming memory, especially when your original list is very long. </p>
</div>
<div class="post-text" itemprop="text">
<p>Do you mean a dict?</p>
<pre><code>things = ['one', 'two', 'three', 'first', 'five']
result = {}
for index, thing in enumerate(things, start=1):
    result[thing] = index
result['first'] = 1
print result
</code></pre>
<p>And then <code>result</code> is</p>
<pre><code>{'three': 3, 'five': 5, 'two': 2, 'first': 1, 'one': 1}
</code></pre>
</div>
<span class="comment-copy">If you are using python 3.4+ there is a new <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">enum module</a></span>
<span class="comment-copy">If you want to make many of these objects and on the fly then it sounds like you want an <a href="https://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">OrderedDict</a>.</span>
<span class="comment-copy">That's what I want to do, but I don't want to hard code it into my program. It needs to be something that dynamically adapts.</span>
<span class="comment-copy">@user3666471, how do you get the mapping between the two? You did not provide that information. You can dynamically generate a dictionary.</span>
<span class="comment-copy">I want the mapping to follow order, like if I give it a file which contains the order ['a', 'c', 'd', ....], it should map {'a':1, 'c':2, 'd':3, ...}. On certain elements, I would like it to break the pattern.</span>
