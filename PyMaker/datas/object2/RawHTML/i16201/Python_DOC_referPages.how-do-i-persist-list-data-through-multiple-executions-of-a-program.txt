<div class="post-text" itemprop="text">
<p>My program is simple. I loop for user input and add their input as an integer to a list until the user breaks the loop. Then I have some code written for analyzing the data. Next time I run the program however, the data that I added to the lists is gone. I am aware of a question nearly the same as this one, however, I couldn't make sense of the answers because I am very new to python. I'm aware of the pickle module, but I do not understand what it does. If using pickle is my best option, please explain how it works.</p>
</div>
<div class="post-text" itemprop="text">
<p>If all you have is a list of some simple type like integers, <code>pickle</code> is overkill. You can just write each integer to a line, like this:</p>
<pre><code>with open('myfile.txt', 'w') as f:
    for value in values:
        f.write('{}\n'.format(value))
</code></pre>
<p>Then, to read it back in:</p>
<pre><code>values = []
with open('myfile.txt') as f:
    for line in f:
        values.append(int(line))
</code></pre>
<p>Obviously this won't work if you're trying to save strings that might have newlines in them, or more complex data types that are harder to parse than just calling <code>int</code>. In that case, you may want to look at JSON, YAML, or Pickle formats.</p>
<p>The tutorial has a great chapter on <a href="https://docs.python.org/3/tutorial/inputoutput.html" rel="nofollow">Input and Output</a> that covers this, and a lot more (although it assumes you've read the previous chapters, or gotten the equivalent information elsewhere, or are willing to go back and read what you've missed if you get confused).</p>
</div>
<div class="post-text" itemprop="text">
<p><code>pickle</code> is actually pretty simple.  It converts python objects into a collection of unique characters that can be stored in a file. The characters are actually a mini-language of 'opcodes' that tell how to uniquely create your python object.  Anyway, before you shut down the interpreter, you save your list to a file with <code>dump</code>.</p>
<pre><code>&gt;&gt;&gt; l = range(100)  
&gt;&gt;&gt; import pickle
&gt;&gt;&gt; 
&gt;&gt;&gt; f = open('bar.txt', 'w')
&gt;&gt;&gt; pickle.dump(l, f)
</code></pre>
<p>Then when you start up python again, you use <code>load</code>.</p>
<pre><code>Python 2.7.8 (default, Jul 13 2014, 02:29:54) 
[GCC 4.2.1 Compatible Apple Clang 4.1 ((tags/Apple/clang-421.11.66))] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; f = open('bar.txt', 'r')
&gt;&gt;&gt; import pickle
&gt;&gt;&gt; l = pickle.load(f)
&gt;&gt;&gt; l
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
</code></pre>
<p>If you look at <code>dumps</code>, you can see how pickle is converting the list of ints to unique characters.  First using the "naive" pickle protocol, and secondly using a more compressed protocol (<code>'-1'</code>, which for python 2.7 is protocol <code>'2'</code>).</p>
<pre><code>&gt;&gt;&gt; pickle.dumps(l)
'(lp0\nI0\naI1\naI2\naI3\naI4\naI5\naI6\naI7\naI8\naI9\naI10\naI11\naI12\naI13\naI14\naI15\naI16\naI17\naI18\naI19\naI20\naI21\naI22\naI23\naI24\naI25\naI26\naI27\naI28\naI29\naI30\naI31\naI32\naI33\naI34\naI35\naI36\naI37\naI38\naI39\naI40\naI41\naI42\naI43\naI44\naI45\naI46\naI47\naI48\naI49\naI50\naI51\naI52\naI53\naI54\naI55\naI56\naI57\naI58\naI59\naI60\naI61\naI62\naI63\naI64\naI65\naI66\naI67\naI68\naI69\naI70\naI71\naI72\naI73\naI74\naI75\naI76\naI77\naI78\naI79\naI80\naI81\naI82\naI83\naI84\naI85\naI86\naI87\naI88\naI89\naI90\naI91\naI92\naI93\naI94\naI95\naI96\naI97\naI98\naI99\na.'
&gt;&gt;&gt; 
&gt;&gt;&gt; pickle.dumps(l, -1)
'\x80\x02]q\x00(K\x00K\x01K\x02K\x03K\x04K\x05K\x06K\x07K\x08K\tK\nK\x0bK\x0cK\rK\x0eK\x0fK\x10K\x11K\x12K\x13K\x14K\x15K\x16K\x17K\x18K\x19K\x1aK\x1bK\x1cK\x1dK\x1eK\x1fK K!K"K#K$K%K&amp;K\'K(K)K*K+K,K-K.K/K0K1K2K3K4K5K6K7K8K9K:K;K&lt;K=K&gt;K?K@KAKBKCKDKEKFKGKHKIKJKKKLKMKNKOKPKQKRKSKTKUKVKWKXKYKZK[K\\K]K^K_K`KaKbKce.'
&gt;&gt;&gt; pickle.dumps([1,2,3], -1)
'\x80\x02]q\x00(K\x01K\x02K\x03e.'
&gt;&gt;&gt; pickle.dumps([], -1)
'\x80\x02]q\x00.'
&gt;&gt;&gt; pickle.dumps((1,2,3), -1)
'\x80\x02K\x01K\x02K\x03\x87q\x00.'
&gt;&gt;&gt; pickle.dumps((), -1)
'\x80\x02).'
</code></pre>
<p>If you look closely at the last few, you can see that you always start with <code>\x80\x02</code>, which tells me that it is protocol <code>2</code>, and then <code>)</code> for tuple, or <code>]</code> for list…  <code>\x01K</code> is the integer <code>1</code>, and so on.  I wouldn't try to directly write these strings, unless you really really know what you are doing… best to let pickle do it for you.</p>
<p>You can see <code>pickle.py</code> itself for a list of many of the opcodes: <a href="https://github.com/python/cpython/blob/master/Lib/pickle.py#L97" rel="nofollow">https://github.com/python/cpython/blob/master/Lib/pickle.py#L97</a></p>
</div>
<span class="comment-copy">Have you skimmed <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer">the <code>pickle</code> documentation</a>, which has nice examples at the end? Or read the tutorial section on <a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">Input and Output</a>? If so, what part are you not getting? If not, go read them.</span>
<span class="comment-copy">Don't just say "I am aware of a question nearly the same as this one", link to it. And don't just say "I couldn't make sense of the answer", tell us where you got confused (including any code you managed to write before you got stuck).</span>
<span class="comment-copy">Thanks so much! This is exactly what I was looking for. I am going to read up on this "write" thing. As another thought, how does (int(line)) work?</span>
<span class="comment-copy">@BrianHotopp: It's a lot easier (and faster) to look these things up in the documentation, or the interactive interpreter's help. Type <code>help(int)</code>, and it'll tell you the same thing <a href="https://docs.python.org/3.4/library/functions.html#int" rel="nofollow noreferrer">the docs</a> say: "Convert a number or string x to an integer… x must be a string… epresenting an integer literal." So, if <code>line</code> is the string <code>'23\n'</code>, <code>int(line)</code> will be the integer <code>23</code>.</span>
