<div class="post-text" itemprop="text">
<p>I'm trying to write a program that converts two hex strings to bytes, and from bytes to binary. Once in binary, I want to perform an XOR transposition on them. This having been accomplished, I want to convert the binary strings back to bytes, and again into hex. I already know what the answer should be, it's just a question of getting from A to B. </p>
<p>The code I have so far is as follows: </p>
<pre><code>input1 = "1c0111001f010100061a024b53535009181c"
input2 = "686974207468652062756c6c277320657965"

target = "746865206b696420646f6e277420706c6179"

d = conversions.hexconvert(input1)
e = conversions.hexconvert(input2)

print(d)
print(e)

f = bitstring.BitArray(d)
g = bitstring.BitArray(e)

xor1 = f.bin
xor2 = g.bin

print("xor1 is", xor1)
print("xor2 is", xor2)

xor1, xor2 = xor2, xor1

print("xor1 is now:", xor1)
</code></pre>
<p>The function "hexconvert" is comprised of the following code: </p>
<pre><code>import codecs

def hexconvert(input):
    output = codecs.decode(input, 'hex')
    return(output)
</code></pre>
<p>My code is currently spitting out the following: </p>
<pre><code>b'\x1c\x01\x11\x00\x1f\x01\x01\x00\x06\x1a\x02KSSP\t\x18\x1c'
b"hit the bull's eye"
xor1 is    : 000111000000000100010001000000000001111100000001000000010000000000000110000110100000001001001011010100110101001101010000000010010001100000011100
xor2 is    : 011010000110100101110100001000000111010001101000011001010010000001100010011101010110110001101100001001110111001100100000011001010111100101100101
xor1 is now: 011010000110100101110100001000000111010001101000011001010010000001100010011101010110110001101100001001110111001100100000011001010111100101100101
</code></pre>
<p>All good so far. I'd like to know what I can add to the end of this code to convert xor1 to bytes then to hex so that I can compare it to the result it should be. I've been trying to figure out how to use struct, binascii, and even bitstring, but I'm getting nowhere. Any and all suggestions greatly appreciated. </p>
<p>It would also be great if anyone could suggest how to make the code more efficient. </p>
<p>Thanks very much in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't have to convert to bits here; you can XOR <code>bytes</code> just fine. When you iterate over a <code>bytes</code> object you get the individual values as integers in the range 0-255, and you can XOR <em>those</em>. Vice versa, you can create a new <code>bytes</code> object again from a sequence of integers.</p>
<p>Convert from hex to bytes with <a href="https://docs.python.org/3/library/binascii.html#binascii.unhexlify" rel="nofollow"><code>binascii.unhexlify()</code></a>, back again with <a href="https://docs.python.org/3/library/binascii.html#binascii.hexlify" rel="nofollow"><code>binascii.hexlify()</code></a>:</p>
<pre><code>from binascii import hexlify, unhexlify

bytes1, bytes2 = unhexlify(input1), unhexlify(input2)
xor_bytes = bytes([b1 ^ b2 for b1, b2 in zip(bytes1, bytes2)])

result = hexlify(xor_bytes).decode('ascii')
</code></pre>
<p>The decode is there to convert the <code>bytes</code> output of <code>hexlify</code> back to a string.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from binascii import hexlify, unhexlify
&gt;&gt;&gt; input1 = "1c0111001f010100061a024b53535009181c"
&gt;&gt;&gt; input2 = "686974207468652062756c6c277320657965"
&gt;&gt;&gt; bytes1, bytes2 = unhexlify(input1), unhexlify(input2)
&gt;&gt;&gt; xor_bytes = bytes([b1 ^ b2 for b1, b2 in zip(bytes1, bytes2)])
&gt;&gt;&gt; xor_bytes
b"the kid don't play"
&gt;&gt;&gt; hexlify(xor_bytes).decode('ascii')
'746865206b696420646f6e277420706c6179'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If all you need is to xor two hex strings:</p>
<pre><code>&gt;&gt;&gt; hex(int(input1, 16) ^ int(input2, 16))[2:]
'746865206b696420646f6e277420706c6179'
</code></pre>
</div>
<span class="comment-copy">Nowhere in your code are you applying an XOR operation; you are just swapping input 1 and input 2.</span>
<span class="comment-copy">Thanks a lot! I had a feeling I was going about it in an overly complicated manner.</span>
