<div class="post-text" itemprop="text">
<p>So let's say I have list 
    <strong>items</strong> = ['abc', 'def', 'tre']. </p>
<p>Now I want to insert a flag before each of list items. </p>
<p>E.g the new list <strong>items2</strong> should be ['-g', 'abc', '-g', 'def', '-g', 'tre']. </p>
<p>I could read the list and append each one after appended the flag but I want to start doing it the python way. </p>
<p>What I came up with is:</p>
<pre><code>items2.extend(['-g', i] for i in items )
</code></pre>
<p>What this gives me a list with smaller lists:</p>
<pre><code>items2 = [['-g', 'abc'], ['-g', 'def'], ['-g', 'tre']]
</code></pre>
<p>I understand that this is because it would be equivalent to saying </p>
<pre><code>items2.extend([ ... ] , [ ... ], [ ... ])
</code></pre>
<p>Any ideas about this? Thanks</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>[j for i in items for j in '-g', i]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One approach would be using <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a>:</p>
<pre><code>&gt;&gt;&gt; items = ['abc', 'def', 'tre']
&gt;&gt;&gt; zip(['-g', '-g', '-g'], items)
[('-g', 'abc'), ('-g', 'def'), ('-g', 'tre')]
</code></pre>
<p>After that, you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain</code></a> to flatten the list:</p>
<pre><code>&gt;&gt;&gt; list(itertools.chain(*zip(['-g', '-g', '-g'], items)))
['-g', 'abc', '-g', 'def', '-g', 'tre']
</code></pre>
<p>Note that due to function call overhead, this is quite slow, compared to a simple list comprehension:</p>
<pre><code>In [17]: %timeit [j for i in items for j in '-g', i]
1000000 loops, best of 3: 923 ns per loop

In [18]: %timeit list(itertools.chain(*zip(['-g', '-g', '-g'], items)))
100000 loops, best of 3: 2.67 µs per loop
</code></pre>
<p>So for performance and clarity, I suggest you use <a href="https://stackoverflow.com/a/25537130/89391">Robᵩ answer</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>As a complement to other excellent <code>zip</code> based answers, you might use <a href="https://docs.python.org/3/library/itertools.html#itertools.repeat" rel="nofollow"><code>itertools.repeat()</code></a> instead of "counting" items:</p>
<pre><code>&gt;&gt;&gt; items = ['abc', 'def', 'tre']
&gt;&gt;&gt; list(itertools.chain(*zip(itertools.repeat('-g'), items)))
#                             ^^^^^^^^^^^^^^^^^^^^^^
#                             repeat as much as needed
['-g', 'abc', '-g', 'def', '-g', 'tre']
</code></pre>
<p>And if you don't like <em>zip</em>, an alternative:</p>
<pre><code>&gt;&gt;&gt; list(itertools.chain(*[('-g', i) for i in items]))
['-g', 'abc', '-g', 'def', '-g', 'tre']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another simple way is to loop through your list and insert after every element.</p>
<pre><code>for i in range(len(items)):
   items.insert((i*2)+1,'-g')
</code></pre>
<p>As you insert your length up to the insertion point doubles, so you need to put your next element at (i*2)+1</p>
</div>
<span class="comment-copy">To flatten your list, just use <code>itertools.chain(*items2)</code></span>
<span class="comment-copy">Thanks, all the answers work but this one is the shortest :)</span>
<span class="comment-copy">I don't think this is the required output</span>
<span class="comment-copy">@PadraicCunningham, updated my post.</span>
<span class="comment-copy">Not sexy. Not very pythonic. But fast probably. I don't have the time to run a benchmark, but I'll bet this is the most <i>efficient</i> solution.</span>
