<div class="post-text" itemprop="text">
<p>Is this the only way to get a byte of binary data?</p>
<pre><code>index = 40
data = afile.read()
byte = data[index:index+1] # &lt;- here
</code></pre>
<p>If I use <code>byte = data[index]</code> it throws an error:</p>
<pre><code>TypeError: 'int' does not support the buffer interface
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From the <code>bytes</code> <a href="https://docs.python.org/3/library/stdtypes.html#bytes" rel="nofollow">documentation</a>:</p>
<blockquote>
<p>Since bytes objects are sequences of integers (akin to a tuple), for a bytes object <em>b</em>, <code>b[0]</code> will be an integer, while <code>b[0:1]</code> will be a bytes object of length 1. (This contrasts with text strings, where both indexing and slicing will produce a string of length 1).</p>
</blockquote>
<p>So <code>byte = data[index]</code> assigns an integer value to <code>byte</code> - which as your error message points out, does not support the buffer interface.</p>
<p>You <em>could</em>, instead of <code>byte = data[index:index+1]</code>, write this:</p>
<pre><code>byte = bytes([data[index]])
</code></pre>
<p>... relying on the fact that the <code>bytes</code> constructor, if passed a sequence (note the brackets around <code>data[index]</code>), will use it to create a <code>bytes</code> object  - but that's not really any more readable, and is significantly slower (by a factor of six on my machine with Python 3.4).</p>
</div>
