<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2064202/private-members-in-python">Private members in Python</a>
<span class="question-originals-answer-count">
                    8 answers
                </span>
</li>
</ul>
</div>
<p>I have the following Python-Code. I just can't get
the instance variable to be read only. Help appreciated.</p>
<pre><code>class Parrot(object):

    def __init__(self):
        self._voltage = '100000'

    @property
    def voltage(self):
        """Get the current voltage."""
        return self._voltage

a = Parrot()

print(a._voltage)

a._voltage = '500000'

print(a._voltage)
</code></pre>
<p><strong>Edit:</strong></p>
<p>The point of this question was to understand, how a property could replace the old 
variable. Somehow everybody just points out that Python is about being mature, and
that it is our responsibility not to use "private" variables, since they are 
visible in python. But nobody pointed out that you'd just turn the old variable in 
this case </p>
<pre><code>voltage
</code></pre>
<p>private </p>
<pre><code>_voltage
</code></pre>
<p>and replace the old variable (voltage) with the property</p>
<pre><code>@property
def voltage(self):
</code></pre>
<p>which would leave the way you access attributes in this class the same, so that nobody
who uses this class has to change their code. </p>
<p>-- like the way you access variables, since
you can still access the property like a variable -- e.g.:</p>
<p><code>a.voltage = 'over 9000'</code></p>
<p>But it gives more control to the developers of this class (turn voltage to read only). I just 
felt that nobody did actually explain the mechanics of properties in an understandable way...
-&gt; I was not able to understand properties although I googled first.
Anyways... kinda ridiculous, since it does not seem to pose any kind of difficulties now.</p>
<p>Cheers<br/>
Nimi</p>
</div>
<div class="post-text" itemprop="text">
<p>That's normal, since Python isn't a <em>bondage &amp; discipline</em> language.
There's no real equivalent to 'private', but sometimes attributes with two leading underscores are used, though these are inteded to avoid problems when inherating.
The one leading underscore is just to avoid importing this when using a <code>from xx import *</code> import.</p>
</div>
<span class="comment-copy">I don't see anything in your code that designates <code>_voltage</code> as read-only.  If you want read-only semantics, you have to use the <b>property</b>, not the backing variable.</span>
<span class="comment-copy">I think you should take a look at this question:  <a href="https://stackoverflow.com/questions/14594120/python-read-only-property" title="python read only property">stackoverflow.com/questions/14594120/python-read-only-property</a></span>
<span class="comment-copy">There's no way to do that in Python. Python is for consenting adults only. If you don't trust someone not to access your private attribute, don't give them your object.</span>
<span class="comment-copy">As a complement of the other comments, the property here is <code>voltage</code> not <code>_voltage</code>.</span>
<span class="comment-copy">Thx for the Comment. I didn't expect a backing variable to be their. I think I get the difference now.</span>
<span class="comment-copy">The documentation states that it is possible to create a read-only variable using the property decorator. <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#property</a> I was just trying to reproduce the results. There's no harm in having  a read-only variable.</span>
<span class="comment-copy">ooh i think i understand now. Thx for the help.</span>
