<div class="post-text" itemprop="text">
<p>Python has a confusing history of tools that can be used to package and describe projects: these include <code>distutils</code> in the Standard Library, <code>distribute</code>, <code>distutils2</code>, and <code>setuptools</code> (and maybe more). It appears that <code>distribute</code> and <code>distutils2</code> were discontinued in favor of <code>setuptools</code>, which leaves two competing standards.</p>
<p>To my understanding <code>setuptools</code> offers far more options (e.g. declaring dependencies, tests, etc.) than <code>distutils</code>, however it is not included in the Python standard library (yet?).</p>
<p>The <em>Python Packaging User Guide</em>[<a href="https://packaging.python.org/guides/tool-recommendations/" rel="noreferrer">1</a>] recommends now:</p>
<blockquote>
<p>Use <code>setuptools</code> to define projects and create Source Distributions.</p>
</blockquote>
<p>And explains:</p>
<blockquote>
<p>Although you can use pure <code>distutils</code> for many projects, it does not support defining dependencies      on other projects and is missing several convenience utilities for automatically populating package  metadata correctly that are provided by <code>setuptools</code>. Being outside the standard library, setuptools  also offers a more consistent feature set across different versions of Python, and (unlike <code>distutils</code>), <code>setuptools</code> will be updated to produce the upcoming “Metadata 2.0” standard formats on all supported versions.</p>
<p>Even for projects that do choose to use <code>distutils</code>, when pip installs such projects directly from source (rather than installing from a prebuilt wheel file), it will actually build your project using <code>setuptools</code> instead.</p>
</blockquote>
<p>However, looking into various project's <em>setup.py</em> files reveals that this does not seem to be an actual standard. Many packages still use <code>distutils</code> and those that support <code>setuptools</code> often mix <code>setuptools</code> with <code>distutils</code> e.g. by doing a fallback import:</p>
<pre><code>try:
    from setuptools import setup
except ImportError:
    from distutils.core import setup
</code></pre>
<p>Followed by an attempt to find a way to write a setup that can be installed by both <code>setuptools</code> and <code>distutils</code>. This often includes various ways of error-prone dependency checking, since <code>distutils</code> does not support dependencies in the setup function.</p>
<p>Why are people still making the extra effort to support <code>distutils</code> - is the fact that <code>setuptools</code> is not in the standard library the only reason? What are the advantages of <code>distutils</code> and are there any drawbacks of writing <em>setup.py</em> files that only support <code>setuptools</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Have a look at this SO question. It explains all the packaging methods very well, and might help answer your question to some extent: <a href="https://stackoverflow.com/questions/6344076/differences-between-distribute-distutils-setuptools-and-distutils2">Differences between distribute, distutils, setuptools and distutils2?</a></p>
<blockquote>
<p><strong>Distutils</strong> is still the standard tool for packaging in Python. It is included in the standard library (Python 2 and Python 3.0 to 3.3). It is useful for simple Python distributions, but lacks features. It introduces the distutils Python package that can be imported in your setup.py script.</p>
<p><strong>Setuptools</strong> was developed to overcome Distutils' limitations, and is not included in the standard library. It introduced a command-line utility called easy_install. It also introduced the setuptools Python package that can be imported in your setup.py script, and the pkg_resources Python package that can be imported in your code to locate data files installed with a distribution. One of its gotchas is that it monkey-patches the distutils Python package. It should work well with pip. The latest version was released in July 2013.</p>
</blockquote>
<p>So, as you can see setuptools should be preferred to distutils, and I see where your question comes from, however I don't see distutils losing support anytime soon, as, simply put, it is used in many cases with some popular legacy programs. And as you probably know changing these sorts of things in legacy programs can be quite a pain and come with quite a few problems, for example incompatibilities, which would then lead to the developer having to rewrite the source code. So there is that, and also the fact that distutils is a part of the standard python library whereas setuptools is not. So, if you are creating a python program, in this day and age, use setuptools, however keep in mind that without distutils, setuptools would have never existed.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>is the fact that setuptools is not in the standard library the only reason</p>
</blockquote>
<p>That's one reason. The following is straight from the <a href="https://github.com/numpy/numpy/blob/8957f23bd61623e0293df610dfe339e09fb0c653/setup.py#L222" rel="noreferrer">NumPy <code>setup.py</code></a>:</p>
<pre><code>if len(sys.argv) &gt;= 2 and ('--help' in sys.argv[1:] or
        sys.argv[1] in ('--help-commands', 'egg_info', '--version',
                        'clean')):
    # Use setuptools for these commands (they don't work well or at all
    # with distutils).  For normal builds use distutils.
    try:
        from setuptools import setup
    except ImportError:
        from distutils.core import setup
</code></pre>
<p>So NumPy prefers <code>setuptools</code> if it can find it. But then SciPy used to do this, until it was <a href="https://github.com/scipy/scipy/commit/a4e93fbd1c1e192b699e1ff545236dab7cffc579" rel="noreferrer">patched</a> to prefer <code>distutils</code> in some situations. Citing the commit log:</p>
<pre><code>Setuptools sets mode +x on the test scripts, so that Nose refuses to run
them. Better not do that.
</code></pre>
<p>Of course, a <a href="https://mail.python.org/pipermail/distutils-sig/2013-March/020126.html" rel="noreferrer">merger</a> between <code>setuptools</code> and <code>distribute</code> should resolve all this in due time, but many packages still need to support Python 2.6 installations.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are several reasons we still talk about and use distutils, even though setuptools is without a doubt the better tool set. </p>
<p>Firstly, distutils is available everywhere. If you are looking to build a module for sharing with others, and don't have any complicated requirements, it is guaranteed to be available on your work machine.  This is particularly important if you have to support older versions of python, or if you find yourself working in an unfamiliar environment.</p>
<p>Secondly, setuptools provides enhancements to distutils. It is therefore modeled after the distutils tool set and takes all of it's structure from there. The documentation for setuptools assumes the reader is familiar with distutils and only documents how it enhances the base tool set. You can think of it that distutils defines the dialect and setuptools enhances that dialect.</p>
<p>My personal approach for new projects is start with the assumption I'm going to use distutils. Only as the project grows to require a feature of setuptools do I make the upgrade. The setuptools is a drop-in-replacement for distutils, it's a one-line change to my setup.py.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Basically, it's due to the division of responsibilities.</strong></p>
<p><code>setuptools</code> is not a part of Python standard library because it's maintained by a 3rd party rather than Python core team. Which means, among other things:</p>
<ul>
<li>it isn't covered by the core test suite and isn't relied upon by core functionality</li>
<li>it doesn't <em>itself</em> set core standards for add-on modules (their location, means of import, C extensions' binary interface etc.).</li>
<li>it's updated and released independently from Python releases</li>
</ul>
<p><strong>Effectively, the core team has narrowed down the scope of distutils</strong>, reserving the "core standards" and "minimal necessary compilation" parts for themselves <strong>while leaving all the stuff beyond that</strong> (extended compiler/package format/whatever support) <strong>to 3rd parties. The code that was previously covering those "extended parts" was left stale</strong> for backwards compatibility.</p>
<p>From <a href="https://docs.python.org/2/distributing/index.html#key-terms" rel="noreferrer">Distributing Python Modules — Python 2.7.12 documentation</a>:</p>
<blockquote>
<p>While direct use of <code>distutils</code> is being phased out, it still laid the
  foundation for the current packaging and distribution infrastructure,
  and it not only remains part of the standard library, but its name
  lives on in other ways (such as the name of the mailing list used to
  coordinate Python packaging standards development).</p>
</blockquote>
<p>Packages for other OSes are likewise likely to provide <code>setuptools</code> and <code>pip</code> separately - for the aforementioned reasons</p>
<ul>
<li>and because they aren't necessary - or are even detrimental for maintainability - when there's already another package manager on the system.</li>
</ul>
</div>
<span class="comment-copy"><a href="https://mail.python.org/pipermail/distutils-sig/2013-March/020126.html" rel="nofollow noreferrer"><code>distutils</code> has been merged back into <code>setuptools</code></a>, but there are legacy apps that were written to use <code>distutils</code> and there are costs involved to migrate to correct standards.</span>
<span class="comment-copy">"It appears that distribute and distutils2 were discontinued in favor of setuptools", correct, <a href="https://pypi.python.org/pypi/distribute/0.7.3" rel="nofollow noreferrer">distribute</a> is only a wrapper for setuptools now, and <a href="https://pypi.python.org/pypi/Distutils2" rel="nofollow noreferrer">distutils2</a> is dead.</span>
<span class="comment-copy"><code>setuptools</code> is an enhanced alternative to <code>distutils</code> but note that "<i>The recommended <b>pip</b> installer runs all setup.py scripts with <code>setuptools</code>, even if the script itself only imports <code>distutils</code></i>" (<a href="https://docs.python.org/3/library/distutils.html" rel="nofollow noreferrer">source</a>)</span>
<span class="comment-copy">Related: <a href="https://stackoverflow.com/q/6344076/3357935">Differences between distribute, distutils, setuptools and distutils2?</a></span>
<span class="comment-copy">"Distutils is still the standard tool for packaging in Python." contradicts the Python Packaging User Guide.</span>
<span class="comment-copy">I don't believe so, does it explicitly say that <i>setuptools</i> is the standard. Also note that, that phrase was quoted from the website I provided, so, those are not my words. However it is an opinion which I, among many other people agree with.</span>
<span class="comment-copy">I awarded you the bounty since the community seems to agree with you. Unfortunately this question did not get as much attention as I wished it would get.</span>
<span class="comment-copy">The "merger" to which you refer is not between <code>setuptools</code> and <code>distutils</code>, but between <code>setuptools</code> and a THIRD system called <code>distribute</code>, which has now been abandoned.</span>
<span class="comment-copy">Thanks for your answer. I think the availability argument can't be that important, since the setuptools installation can be bootstrapped. I see that if distutils provides enough functionallity - it does make sense to use it. But mixing distutils and setuptools in my opinion is not a very clean way to achieve one's goals. Although, @larsmans showed in his answer some difficulties with setuptools which force to use distutils for some tasks.</span>
