<div class="post-text" itemprop="text">
<p>I have a program, which opens a lot of urls and downloads pictures .
I have a function of the program, which manages link's opening and pictures downloading, which contains a <code>for loop</code> and performs some operations on the priority queue. I want to run this function, but no longer than the set time period. For example if this function is running longer than 1 hour I want to terminate it and run the rest of the program (other functions).
I was trying to find some solutions, and I found two question here on stack.
The first solution use only <code>time</code> module <a href="https://stackoverflow.com/questions/13293269/how-would-i-stop-a-while-loop-after-some-amount-of-time">First solution</a></p>
<p>The second use also the <code>multiprocessing</code> module 
<a href="https://stackoverflow.com/questions/14920384/stop-code-after-time-period">Second solution</a>. Can some one suggest which one will be more appropriate to use in my program? I will write a pseudocode of my function:</p>
<pre><code>def fun():
 for link in linkList:
   if link not in queue:
     queue.push(link)
   else:
     queue.updatePriority(link)
 if queue:
   top = queue.pop()
   fun(top)
</code></pre>
<p>This function is called in other function:
def run(startLink):
 fun(startLink)</p>
<p>And the run() function is called in other module.
Which method is better to use with a program which contains a lot of modules and performs a lot of </p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/asyncio-task.html" rel="nofollow">asyncio</a> module is ideal for this task.</p>
<p>You can create a future, then use <code>asyncio.wait</code> which supports a timeout parameter.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>multiprocessing</code> here would be a little bit tricky, because <code>fun</code> is consuming a priority queue (I'm assuming a <a href="https://docs.python.org/2.7/library/queue.html#Queue.PriorityQueue" rel="nofollow"><code>Queue.PriorityQueue</code></a>) that is coming from some other part of the program. That <code>queue</code> cannot easily be passed between processes - you would need to create a custom <a href="https://docs.python.org/2.7/library/multiprocessing.html#customized-managers" rel="nofollow"><code>multiprocessing.BaseManager</code> subclass</a>, register the <code>Queue.PriorityQueue</code> class with it, and start up the <code>Manager</code> server, instantiate a <code>PriorityQueue</code> on the server, and use a <code>Proxy</code> to that instance everywhere you interact with the queue. That's a lot of overhead, and also hurts performance a bit.</p>
<p>Since it appears you don't actually want any concurrency here - you want the rest of the program to stop while <code>fun</code> is running - I don't think there's a compelling reason to use <code>multiprocessing</code>. Instead, I think using the <code>time</code>-based solution makes more sense.</p>
</div>
<span class="comment-copy">@But I want use the built-in modules</span>
<span class="comment-copy">The asyncio module is built-in.</span>
<span class="comment-copy">The OP is using 2.7 - see the tags.</span>
