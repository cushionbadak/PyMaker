<div class="post-text" itemprop="text">
<p>I've set up a Web2Py environment on a hosted server and inside <code>models\db.py</code> added the line:</p>
<pre><code> response.generic_patterns = ['*'] if request.is_local else []
</code></pre>
<p>but when I navigate to <em>serveraddress.com/testapp/default/testpage.json</em> I get:</p>
<blockquote>
<p>{"testlist": ["PolarBear", "Badger", "MonkeyFootball", "WonkyWilly"]}</p>
</blockquote>
<p>which is what I'm returning from the function.</p>
<p>Honestly, the line:</p>
<pre><code> response.generic_patterns = ['*'] if request.is_local else []
</code></pre>
<p>makes no sense to me. It looks like a list comprehension statement that should be inside <code>[ ]</code> to get turned into a list but I suppose that's another topic. Mainly I'm concerned with disabling the generic views at this point.</p>
<p>I got the line for disabling generic views from <a href="http://web2py.com/books/default/chapter/29/10/services#Generic-views" rel="nofollow">the Web2Py manual</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>First, generic views are disabled by default. The following code:</p>
<pre><code>response.generic_patterns = ['*'] if request.is_local else []
</code></pre>
<p>does not disable generic views but rather enables them for local requests only. To completely disable generic views, simply delete that line.</p>
<p>Second, if your <code>testpage</code> function is directly returning JSON (i.e., an actual string), then generic views are not the issue, as views are only called when a controller function returns a dictionary. If your function is returning a JSON string, then the string will be returned directly, regardless of the extension in the URL, and regardless of your <code>response.generic_patterns</code> setting.</p>
<p>However, if <code>testpage</code> is returning a dictionary and you are getting back a JSON response via the generic.json view, then likely you are behind a proxy, which will cause web2py to see all requests as local. In that case, do not rely on <code>request.is_local</code> to distinguish between local and external requests.</p>
<p>Finally, the <code>['*'] if request.is_local else []</code> syntax is simply a Python <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow">conditional expression</a> (also known as a <em>ternary</em> operator).</p>
</div>
<div class="post-text" itemprop="text">
<p>Trace / debug your way through the logic of <code>request.is_local</code>.  You may be initiating the request from a different machine, but if the request is somehow handled or repeated by a local component (proxy server? SSL daemon?) the request as seen by web2py could be local.</p>
<p>This is a common issue when using different kinds of proxies.  The usual solution is to use existing proxy-forwarding headers or add new HTTP headers and customize <code>is_local</code> a bit.</p>
</div>
<span class="comment-copy">Taking the line out fixed it. Must be through a proxy. I installed using the following script: <i><a href="https://wiki.webfaction.com/wiki/Web2py-LatestSource" rel="nofollow noreferrer">wiki.webfaction.com/wiki/Web2py-LatestSource</a></i> and while I see no reference to channeling through a proxy (just one used during the install itself) I could be missing how it works.</span>
<span class="comment-copy">I'm trying to get winpdb set up for remote debugging. Is debugging active Web2Py something you've done or is that the generic first step to catching any bug you know the general vicinity of. If you've debugged Web2Py remotely, what have you used?</span>
