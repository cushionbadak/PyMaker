<div class="post-text" itemprop="text">
<p>I want to replace the current process with a new process using the same Python interpreter, but with a new script. I have tried using <a href="https://docs.python.org/3/library/os.html#os.execl" rel="nofollow"><code>os.execl</code></a>, which seemed like the most intuitive approach:</p>
<pre><code>print(sys.executable, script_path, *args)
os.execl(sys.executable, script_path, *args)
</code></pre>
<p>The result is that this is printed to the screen (from the <code>print</code> function):</p>
<pre>/home/tomas/.pyenv/versions/3.4.1/bin/python script.py arg1 arg2 arg3</pre>
<p>And the Python interactive interpreter is launched. Entering this into the interpreter:</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; print(sys.argv)
['']
</code></pre>
<p>Shows that Python received no arguments.</p>
<p>If I copy the output of the <code>print</code> function and enter it into my terminal, it works as expected. I have also tried using <code>execv</code> and <code>execlp</code> with identical results.</p>
<hr/>
<p>Why doesn't the <code>execl</code> call pass the arguments to the Python executable?</p>
</div>
<div class="post-text" itemprop="text">
<p>The arg0, arg1, arg2, ... (arguments after the <code>sys.executable</code>) are passed to subprogram as <code>argv</code>. If you pass <code>script_path</code> as a the first argument the subprogram will interpret <code>script_path</code> as argv[0] instead of <code>sys.executable</code>.</p>
<p>Replace the <code>execl</code> line as following will solve your problem:</p>
<pre><code>os.execl(sys.executable, sys.executable, script_path, *args)
                         ^^^^^^^^^^^^^^
</code></pre>
</div>
<span class="comment-copy">You are right, that worked. It doesn't quite make sense to me though. I have two followup questions I'd be delighted if you could add to your answer. #1: Are there any cases where one would <i>not</i> add the executable as the first item in argv? If not, why isn't it added implicitly? #2: Why did the Python interpreter find <b>no</b> arguments in my example? I get that it interpreted <code>script_path</code> as <code>argv[0]</code>, but that doesn't explain why <code>sys.argv</code> was <code>['']</code> and not <code>["script.py", "arg1", "arg2", "arg3"]</code>.</span>
<span class="comment-copy">@Hubro, #1, Sometimes, you may don't want to expose the real path of the executable. (<code>ps aux</code> or <code>ps -efl</code> will show the name passed instead of real path)</span>
<span class="comment-copy">@Hubro, #2, <code>sys.argv</code> is different from <code>argv</code> in C. Python consumes the first item. <code>argv[0]</code>.</span>
<span class="comment-copy">@Hubro, #2, According to python man page: ... If  available,  the script name and additional arguments thereafter are passed to the script in the Python variable sys.argv, which is  a  list of  strings (you must first import sys to be able to access it).  If no script name is given, sys.argv[0] is an empty string; ....</span>
