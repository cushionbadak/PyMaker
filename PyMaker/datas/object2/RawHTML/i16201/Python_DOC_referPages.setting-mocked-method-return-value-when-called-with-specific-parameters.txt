<div class="post-text" itemprop="text">
<p>I have a test that works by mocking out the web service. I have it where it returns a specific return value when a specific method is called. I'm verifying that the wrapped function returns the value I expect. Issue is that the test seems almost useless.</p>
<p>Here is what I have - </p>
<pre><code>@patch('run.Client')
def test(self, mock_client):
    service = WebService()
    mock_client.return_value.service.GetMemberStatus.return_value = 'E'
    member_status = service.get_member_status(11)
    self.assertEqual('E', member_status)
</code></pre>
<p>What I'm looking to do is only return <code>E</code> if the <code>GetMemberStatus</code> method is called with specific parameters. I've tried to do - </p>
<pre><code>mock_client.return_value.service.GetMemberStatus(11, '', '').return_value = 'E'
</code></pre>
<p>however this doesn't seem to change anything.</p>
<p>Question - How can I set a mocked methods return value only if called with appropriate parameters?</p>
</div>
<div class="post-text" itemprop="text">
<p>Generally speaking, you don't. You instead assert that your mocked method has been called with the expected parameters as part of your test:</p>
<pre><code>gms_mock = mock_client.return_value.service.GetMemberStatus
gms_mock.return_value = 'E'

member_status = service.get_member_status(11)

self.assertEqual('E', member_status)
gms_mock.assert_called_with(11, '', '')
</code></pre>
<p>All your attempt did was record a mock call, as if the code-under-test had called <code>GetMemberStatus</code>, then assigned <code>'E'</code> on the <code>return_value</code> attribute of the <code>Mock</code> instance returned by that call.</p>
<p>You <em>could</em> set the <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.side_effect" rel="nofollow"><code>side_effect</code> attribute</a> to a function instead; it'll be passed the arguments and you could test there:</p>
<pre><code>def gms_mock_call(*args):
    assert args == (11, '', '')
    return 'E'

mock_client.return_value.service.GetMemberStatus.side_effect = gms_mock_call
</code></pre>
<p>but that really puts testing what arguments are passed in in the wrong location.</p>
</div>
<span class="comment-copy">Thank you for the answer as well as alternative ways. I poured over mocking documentations, but wasn't looking for the right terms. In addition, I found you can replace the <code>gms_mock_call</code> method with a lambda - <code>gms_mock.side_effect = lambda *args: 'E' if args == (11, '', '') else None</code>. Not sure how I feel about that, though. Will have to play with it.</span>
<span class="comment-copy">Turns out <code>pep8</code> throws error <code>E731</code> if you assign a lambda expression. Thanks again.</span>
