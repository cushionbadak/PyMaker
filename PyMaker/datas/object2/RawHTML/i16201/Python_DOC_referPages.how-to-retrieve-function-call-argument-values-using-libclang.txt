<div class="post-text" itemprop="text">
<p>Is it possible to retrieve the argument values of a <strong>clang.cindex.CursorKind.CALL_EXPR</strong> cursor?</p>
<p>When I dump the AST using the compiler (clang++ -ast-dump source.cpp) I get info about function calls (call expressions) and their arguments. But I'm not able to replicate it using the bindings for python (where the AST is retrieved using libclang's parser).</p>
<p>Here's the source code I'm using:</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;GL/glut.h&gt;
#include &lt;EGL/egl.h&gt;

#define MULTILINE(...) #__VA_ARGS__

void renderFunction()
{
    glClearColor(0.0, 0.0, 0.0, 0.0);
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(1.0, 0.0, 1.0);
    glOrtho(-1.0, 1.0, -1.0, 1.0, -1.0, 1.0);
    glBegin(GL_QUADS);
        glVertex2f(-0.5, -0.5);
        glVertex2f(-0.5, 0.5);
        glVertex2f(0.5, 0.5);
        glVertex2f(0.5, -0.5);
    glEnd();
    glFlush();
}

int main(int argc, char *argv[])
{          
    glutInit(&amp;argc, argv);       
    glutInitDisplayMode(GLUT_SINGLE);
    glutInitWindowSize(500,500);
    glutInitWindowPosition(100,100);
    glutCreateWindow("OpenGL - First window demo");
    glutDisplayFunc(renderFunction);
    glutMainLoop();    

    return 0;
}
</code></pre>
<p>Here's a part of its AST dump:</p>
<pre><code>|   |-CallExpr 0x430b540 &lt;line:10:5, col:32&gt; 'void'
|   | |-ImplicitCastExpr 0x430b528 &lt;col:5&gt; 'void (*)(GLbitfield)' &lt;FunctionToPointerDecay&gt;
|   | | `-DeclRefExpr 0x430b4d0 &lt;col:5&gt; 'void (GLbitfield)' lvalue Function 0x3d3b060 'glClear' 'void (GLbitfield)'
|   | `-ImplicitCastExpr 0x430b570 &lt;/usr/include/GL/gl.h:691:31&gt; 'GLbitfield':'unsigned int' &lt;IntegralCast&gt;
|   |   `-IntegerLiteral 0x430b4b0 &lt;col:31&gt; 'int' 16384
</code></pre>
<p>I'd like to retrieve the <strong>IntegerLiteral</strong> value part in the last line by evaluating the call expression cursor.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can get this information from the list of tokens, for IntegerLiteral the first token will be your number (not really that neat but better than nothing!).</p>
<p>Example cpp program:</p>
<pre><code>#define FOO 6

void foo(int x) {}

int main()
{
    foo(FOO);
    return 0;
}
</code></pre>
<p>Example python code to parse it and print out just the IntegerLiteral value (using lib clang):</p>
<pre><code>import clang.cindex
import sys

path = '/your/path/to/libclang.so'
clang.cindex.Config.set_library_file(path)

def get_ts(source_path):
    index = clang.cindex.Index.create()
    return index.parse(source_path)

def print_node(node):
    if node.kind == clang.cindex.CursorKind.INTEGER_LITERAL:
        print node.type.kind, node.get_tokens().next().spelling
    map(print_node, node.get_children())

ts = get_ts('test.cpp')
map(print_node, ts.cursor.get_children())
</code></pre>
<p>Output:</p>
<pre><code>TypeKind.INT 6
TypeKind.INT 0
</code></pre>
</div>
<span class="comment-copy">In Python 3, <a href="https://docs.python.org/3/howto/functional.html#iterators" rel="nofollow noreferrer"><code>.next()</code> has been renamed to <code>.__next__()</code> for consistency</a>. Use <code>next(node.get_tokens())</code> or <code>list(node.get_tokens())[0]</code> to get the first token.</span>
