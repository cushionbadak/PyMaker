<div class="post-text" itemprop="text">
<p>I have define a class in Python</p>
<pre><code>class node(object):
    def __init__(self, children = []):
        self.children = children
</code></pre>
<p>I would like to create a list or array of default objects of class <code>node</code>. For example, something like in C++</p>
<pre><code>node * nodes = node[100];
</code></pre>
<p>then <code>nodes</code> will point to an array of 100 default objects of class <code>node</code>. </p>
<p>How is it done similarly in Python? Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using a list comprehension:</p>
<pre><code>nodes = [node() for _ in range(100)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions">list comprehension</a>:</p>
<pre><code>nodes = [node() for _ in range(100)]
</code></pre>
<p>Python doesn't have a concept of "arrays" per se, but it has lists which are a higher-level structure. Lists can be indexed just like C arrays, and <a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists">support many more complex operations</a>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>[node() for _ in range(100)]
</code></pre>
<p>And as I said in my comment:</p>
<pre><code>class node(object):
    def __init__(self, children=None):
        if children is None: children = []
        self.children = children
</code></pre>
<p>If you used <code>def __init__(self, children= []):</code>, any changes you make to the list will change for all instances:</p>
<pre><code>In [18]: class node(object):
   ....:     def __init__(self, children = []):
   ....:            self.children = children
   ....:         

In [19]: n1= node()

In [20]: n2 = node()

In [21]: n1.children.append("foo") # add using n1 

In [22]: n1.children
Out[22]: ['foo']

In [23]: n2.children # also effects n2's children list
Out[23]: ['foo']
</code></pre>
<p>Correct way:</p>
<pre><code>In [24]: class node(object):
   ....:     def __init__(self, children=None):
   ....:            if children is None: children = []
   ....:            self.children = children
   ....:         

In [25]: n1= node()

In [26]: n2 = node()

In [27]: n1.children.append("foo")

In [28]: n1.children
Out[28]: ['foo']

In [29]: n2.children
Out[29]: []
</code></pre>
</div>
<span class="comment-copy">You might want to make <code>children = None and if not children: children = []</code></span>
<span class="comment-copy">@PadraicCunningham He definitely should do that, but I don't think you should use <code>if not children:</code>, in case you later want to initialize it as an empty list or something else that tests as <code>False</code>. Safer, more clear, and not much longer to use <code>if children is None:</code>.</span>
<span class="comment-copy">@PadraicCunningham: I don't quite understand why my class definition is not good and what you suggest me to do. can you modify my class definition in your post as well?</span>
<span class="comment-copy">The blog post <a href="http://pythonconquerstheuniverse.wordpress.com/2012/02/15/mutable-default-arguments/" rel="nofollow noreferrer">Gotcha - Mutable default arguments</a> explains why assigning an empty list as a default argument is likely to be an error.</span>
<span class="comment-copy">@Tim, I added a quick example</span>
<span class="comment-copy">why if using "def __init__(self, children= []):, any changes you make to the list will change for all instances"?</span>
<span class="comment-copy"><code>map(node, range(100))</code> will construct <code>node(0)</code>, <code>node(1)</code>, etc., which will lead to problems when you try to use the <code>children</code> attributes of those nodes as lists.</span>
<span class="comment-copy">@Tim:  Default arguments are evaluated at the time the function is created -- not when the function is called.  Another way of saying this is that <code>def</code> is an executable statement.</span>
<span class="comment-copy">@Tim, yes the list is created once, so if you have a mutable default argument then you will have one object created when the function is created.</span>
