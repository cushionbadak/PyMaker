<div class="post-text" itemprop="text">
<p>Sounds like I'm missing something extremely simple, I'm trying to set a breakpoint in my python code using:</p>
<pre><code>if(some condition):
        pdb.set_trace()
</code></pre>
<p>My error in the code comes after a large number of iterations..difficult to debug using print etc.
I am able to print stuff when the condition hits but I would like to set brk-pt.</p>
<p>--EDIT--</p>
<p>Actual code:</p>
<pre><code>import pdb
if (node_num == 16):
    print node_num
    pdb.set_trace()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I am not sure as to why your code isn't working, but what you can do is on your local machine, create a new file for your minimum example to see if you can do what you want to do</p>
<pre><code>import pdb

for node_num in range(50):
    if node_num == 16:
        print(node_num)
        pdb.set_trace()
</code></pre>
<p>Now running it:</p>
<pre><code>16
&gt; /tmp/tmp.py(3)&lt;module&gt;()
-&gt; for node_num in range(50):
(Pdb) p node_num
16
</code></pre>
<p>As you can see this worked as intended with this trivial example, it's up to you to figure out how to adapt this to your code, and/or figure out what else did you do to your code/environment that prevented that prompt from showing up.</p>
<p>Alternatively, if you have a function that is dying in an exception and you want to know the exact line that caused it, you should use <code>post_mortem</code> instead.  Wrap the problematic section of code with this</p>
<pre><code>try:
    problem_function()
except Exception:  # or the specific exception type thrown
    pdb.post_mortem()
    raise
</code></pre>
<p>What post_mortem would do is dump a break point right at the point where the exception happened (specifically in that stack frame), and so this allows all values to be inspected and then let you continue execution.  However I also put a raise at the end to allow the exception to continue as normal, and this is intended as execution doesn't normally from where it die but just pause at that exception handling block due to the <code>post_mortem</code> call.  Might as well just give up after inspecting what went wrong.  </p>
</div>
<div class="post-text" itemprop="text">
<p>I see you found your solution Sanjay.  But for those who arrived here looking for a means to set a conditional breakpoint with pdb read on: </p>
<p>Instead of hard coding conditions such as <code>if node_num == 16:</code>, run pdb in interactive mode.  Sample code:</p>
<pre><code>import pdb

for node_num in range(50):
  do_something(node_num)
...
</code></pre>
<p>In the shell start the script in debug mode using <code>-m pdb</code>:</p>
<pre><code>[rick@rolled ~]$ python -m pdb abc.py
&gt; /home/dcadm/abc.py(1)&lt;module&gt;()
-&gt; import pdb
(Pdb) l
  1  -&gt; import pdb
  2
  3     for node_num in range(50) :
  4       foo = 2**node_num
[EOF]
(Pdb) b 4, node_num &gt; 4
Breakpoint 1 at /home/dcadm/abc.py:4
(Pdb) c
&gt; /home/dcadm/abc.py(4)&lt;module&gt;()
-&gt; foo = 2**node_num
(Pdb) node_num 
5
(Pdb)
</code></pre>
<p>The pdb shell command <strong><code>b 4, node_num &gt; 4</code></strong> breaks at line 4 when node_num is greater than 4.  </p>
</div>
<div class="post-text" itemprop="text">
<p>To actually use conditional breakpoints <em>in pdb</em>, you can do the following:</p>
<blockquote>
<p>b(reak) [([filename:]lineno | function) [, condition]]</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/pdb.html#pdbcommand-break" rel="nofollow noreferrer">https://docs.python.org/3/library/pdb.html#pdbcommand-break</a></p>
<p>Eg I'm running some test code that iterates over django views. I want to break <em>only</em> when the particular view I'm interested in is reached:</p>
<blockquote>
<p>b C:\Users\powlo\project\tests\TestCase.py:350, view.view_name
  == 'app.views.export'</p>
</blockquote>
</div>
<span class="comment-copy">Yes what you do should work, if you have some sort of counter that you can access in that scope you can simply <code>if count &gt; limit:</code> and then execution will flow into the block, hit the <code>set_trace</code> and execution will pause there.</span>
<span class="comment-copy">I just tried something really easy: if(condition):       print ""       pdb.set_trace() ##########  print shows up but not the breakpoint!!</span>
<span class="comment-copy">Have you imported pdb?  Try <code>import pdb;pdb.set_trace()</code>.</span>
<span class="comment-copy">Yes, I'm able to use pdb.set_trace() outside of an if condition...yes, pdb imported</span>
<span class="comment-copy">Can you update your question with the complete code with the start of the loop, both the print statement and calling of <code>pdb.set_trace()</code>?</span>
<span class="comment-copy">@metatoaster..thanks a lot for your responses, I tried a lot of different ways to debug this issue but in the end it looks like I was exceeding the maximum recursion depth      This is solved by adding:      sys.setrecursionlimit(10000)  That was the reason I was not able to set a breakpoint..I initially thought it had something to do with my compiler but when I re-verified the compiler etc I found out that this was the problem    It just never occurred to me that I should google the max recursion thing</span>
<span class="comment-copy">Sorry about the delay, because of the suspected compiler fault, I moved my code to a different server where I had privileges</span>
<span class="comment-copy">I have started using python only since the last week (generally use perl, c++, c etc)...this is surely the strangest error I have seen...</span>
<span class="comment-copy">@sanjay Oh, yeah, if you told me about the actual exception I would have told you to do something else.  Just edited the answer here to reflect this.</span>
<span class="comment-copy">Oh yeah, also this is not strange as it seems.  Python does not have tail recursion by default hence this limit is to guard against stack overflows - <a href="http://stackoverflow.com/questions/3323001/maximum-recursion-depth" title="maximum recursion depth">stackoverflow.com/questions/3323001/maximum-recursion-depth</a></span>
