<div class="post-text" itemprop="text">
<p>I'm trying to scrape one site (about 7000 links, all in a list), and because of my method, it is taking a LONG time and I guess that I'm ok with that (since that implies staying undetected). But if I do get any kind of error in trying to retrieve a page, can I just skip it?? Right now, if there's an error, the code breaks and gives me a bunch of error messages. Here's my code:</p>
<p><code>Collection</code> is a list of lists and the resultant file. Basically, I'm trying to run a loop with <code>get_url_data()</code> (which I have a previous question to thank for) with all my url's in <code>urllist</code>. I have something called <code>HTTPError</code> but that doesn't seem to handle all the errors, hence this post. In a related side-quest, it would also be nice to get a list of the url's that couldn't process, but that's not my main concern (but it would be cool if someone could show me how).</p>
<pre><code>Collection=[]
def get_url_data(url):

    try:
        r = requests.get(url, timeout=10)
        r.raise_for_status()

    except HTTPError:
        return None

    site = bs4.BeautifulSoup(r.text)
    groups=site.select('div.filters')
    word=url.split("/")[-1]

    B=[]
    for x in groups:
        B.append(word)
        T=[a.get_text() for a in x.select('div.blahblah [class=txt]')]
        A1=[a.get_text() for a in site.select('div.blah [class=txt]')]
        if len(T)==1 and len(A1)&gt;0 and T[0]=='verb' and A1[0]!='as in':
            B.append(T)
            B.append([a.get_text() for a in x.select('div.blahblah [class=ttl]')])
            B.append([a.get_text() for a in x.select('div.blah [class=text]')])
            Collection.append(B)
        B=[]

for url in urllist:
    get_url_data(url)
</code></pre>
<p>I think the main error code was this, which triggered other ones Because there were a bunch of errors starting with <code>During handling of the above exception, another exception occurred</code>.</p>
<pre><code>Traceback (most recent call last):
  File "C:\Python34\lib\site-packages\requests\packages\urllib3\connectionpool.py", line 319, in _make_request
    httplib_response = conn.getresponse(buffering=True)
TypeError: getresponse() got an unexpected keyword argument 'buffering'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can make your <code>try-catch</code> block look like this,</p>
<pre><code>try:
    r = requests.get(url, timeout=10)
    r.raise_for_status()

except Exception:
    return
</code></pre>
<p>The <code>Exception</code> class will handle all the errors and exception.</p>
<p>If you want to get the exception message you can print this in your <code>except</code> block. You have then instantiate exception first before raising it.</p>
<pre><code>except Exception as e:
    print(e.message)
    return
</code></pre>
</div>
<span class="comment-copy">What sort of errors are you usually getting? Are they all related to web scraping or are some from something else?  Where are the errors being thrown?  If you just expand your <code>try</code> <code>except</code> blocks you can probably fix the issue</span>
<span class="comment-copy">@Dannnno I'll paste the error codes, but it's sort of long. I'll post what I think was the main one.</span>
<span class="comment-copy">If you look at that you see that there is only a <code>TypeError</code>, not an <code>HTTPError</code>.  If you expand your except block (such as <code>except Exception</code>) you should be able to catch all of those (although this is generally not great practice)</span>
<span class="comment-copy">@Dannnno Thanks, then what's the best practice? Also, I didn't write some of this code, so what does <code>return None</code> mean? Is it stopping everything, or just skipping? If it's skipping, can I somehow store the url that caused the skip? It also seems like if I get an HTTPError, it's still running the rest of the code even though that won't do any good?</span>
<span class="comment-copy">Best practice would be explicitly catching every exception you would expect to occur so anything unexpected is still noticed (<code>except HTTPError, TypeError</code>).  <code>return None</code> returns a value of <code>None</code> to where the function was called - the function is not evaluated past that point.  If you want to get the url in question you'd have to change your return statement to something like <code>return url</code> or you'd have to change the logic in your for loop</span>
<span class="comment-copy">Thanks, @Dannno pretty much said this too, but I like how you added the option to see the error message. When it prints the message, will it quit the program or will it continue?</span>
<span class="comment-copy">no it won't. it will print the error message in the console and the program will go on. you can also write it in a log file.</span>
<span class="comment-copy">@salmanwahed is there a direct way to write it into a log file?</span>
<span class="comment-copy">Of course. Chek this: <a href="https://docs.python.org/3/howto/logging.html#logging-to-a-file" rel="nofollow noreferrer">Logging to a file</a></span>
