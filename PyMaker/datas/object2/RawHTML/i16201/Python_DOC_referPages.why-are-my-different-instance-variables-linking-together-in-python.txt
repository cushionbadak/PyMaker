<div class="post-text" itemprop="text">
<p>I am new to python so I did some digging and from what I understand the member variable of a class will update in all instances of that class regardless of which instance you modified it with.  However, it doesn't seem that the same should happen with instance variables however when I run this block of code...</p>
<pre><code>class Game(object):

    def__init__(self, active_turn, board):
         self.active_turn = active_turn
         self.board = board


game = Game(1,[1,0,0,0,0,0,0,0,0])

move = 3

print(game.board, "\n")

possible_game = Game(game.active_turn*-1,game.board)

print(game.board)
print(possible_game.board, "\n")

possible_game.board[move] = possible_game.active_turn

print(game.board)
print(possible_game.board, "\n")

game.board[move+1] = game.active_turn

print(game.board)
print(possible_game.board)
</code></pre>
<p>I get this output...</p>
<pre><code>[1, 0, 0, 0, 0, 0, 0, 0, 0] 

[1, 0, 0, 0, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0, 0, 0, 0] 

[1, 0, 0, -1, 0, 0, 0, 0, 0]
[1, 0, 0, -1, 0, 0, 0, 0, 0] 

[1, 0, 0, -1, 1, 0, 0, 0, 0]
[1, 0, 0, -1, 1, 0, 0, 0, 0]
</code></pre>
<p>The board variable is updating in each instance of the Game class even though I am only changing it in one of them.  Does anyone know why this is happening and what I could do to avoid it?</p>
<p>Thanks,
Nick </p>
</div>
<div class="post-text" itemprop="text">
<p>use <a href="https://docs.python.org/3/library/copy.html#copy.copy" rel="nofollow"><code>copy</code></a></p>
<pre><code>&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; from copy import copy
&gt;&gt;&gt; b = copy(a)
&gt;&gt;&gt; b
[1, 2, 3]
&gt;&gt;&gt; b[1] = 5
&gt;&gt;&gt; b
[1, 5, 3]
&gt;&gt;&gt; a
[1, 2, 3]
&gt;&gt;&gt;
</code></pre>
<h2>EDIT</h2>
<p>To truely understand what's under the hood, you should learn about <a href="https://docs.python.org/3/reference/datamodel.html#objects-values-and-types" rel="nofollow">Python DataModel</a>. The official doc is easy to follow.  </p>
<p>To be short, <code>list</code> are <code>mutable</code> type in Python, which means that if you assign a list object to multiple variables, they are actually pointing to the same list object, thus changing one of them will affect others.   </p>
<p>On the other hand, <code>string</code>, <code>int</code>, <code>tuple</code>, ... are <code>immutable</code> data type.<br/>
if you assign <code>a=1</code> then <code>a=2</code>, <code>1</code> and <code>2</code> are different int objects, i.e. <code>1</code> does <strong>not</strong> become <code>2</code>, because <code>int</code> are immutable, they can't be modified.  </p>
</div>
<div class="post-text" itemprop="text">
<p>You're using the same <code>board</code> when you create both instances - so when one of them updates the board - the change is reflected in the other as well.</p>
<pre><code>game = Game(1,[1,0,0,0,0,0,0,0,0]) # first instance - you create the board here
...
possible_game = Game(game.active_turn*-1,game.board) # second instance - you pass the same board (game.board) to the constructor 
</code></pre>
</div>
<span class="comment-copy">Technically correct, but it would improve this answer greatly if you explained why <code>copy</code> is needed.</span>
<span class="comment-copy">@michaelb958 sure</span>
