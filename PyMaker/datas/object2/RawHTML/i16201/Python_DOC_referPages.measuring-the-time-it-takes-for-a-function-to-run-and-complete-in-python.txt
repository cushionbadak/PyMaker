<div class="post-text" itemprop="text">
<p>In Python 3.4.1, I'm trying to measure how long it takes for a function to run and complete then recording it. I'm currently doing it this like so:</p>
<pre><code>starttime = time.clock()
asyncio.wait_for((method()), 5)
endtime = time.clock()
print(endtime - starttime)
</code></pre>
<p>This usually results in Python spitting out something around 6.29989986222767E-06 (or 0.00000629989986222767E). Then I tried it with a time.sleep:</p>
<pre><code>starttime = time.clock()
asyncio.wait_for((time.sleep(3)), 5)
endtime = time.clock()
print(endtime - starttime)
</code></pre>
<p>This again resulted in 6.87261802845284E-06, even though (at least I think) it should take 3 seconds. I have tried this using threads, with the same result. What do you think? How can I measure how long it takes for a function to run and complete?</p>
</div>
<div class="post-text" itemprop="text">
<p>I generally use this decorator to time my functions:</p>
<pre><code>import time                                                
def timeit(method):
    def timed(*args, **kw):
        ts = time.time()
        result = method(*args, **kw)
        te = time.time()
        print '%r (%r, %r) %2.2f sec' % \
              (method.__name__, args, kw, te-ts)
        return result

    return timed

@timeit
def timeme():
    time.sleep(3)
</code></pre>
<p><code>time.time()</code> gives more precise time for benchmarks than <code>time.clock()</code> primarily because <code>time.clock()</code> measures CPU time. <code>time.time()</code> will return seconds passed since epoch (i.e. wall time), which is what you need.</p>
<p>Or you can also use <code>timeit</code> <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow">https://docs.python.org/3/library/timeit.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>For quick performance analyses I use the following two lines (plus imports):</p>
<pre class="lang-py prettyprint-override"><code>import time
import numpy as np

t = time.time()
# ...
print np.round_(time.time() - t, 3), 'sec elapsed'
</code></pre>
<p>It's short, simple and all I usually need.</p>
<p>(In most cases I've imported <code>numpy</code> anyway. So thats no overhead for me.)</p>
</div>
<div class="post-text" itemprop="text">
<p>I'll admit that I'm not very familiar with Python's asyncio, but I believe the issue is not in your timing, but in your useage of <code>asyncio</code>. </p>
<p>I think you are just creating a future with the value of method(), however that is all that you are timing: the actual creation of this promise.</p>
<p>You are not timing the actual evaluation of the future value. This is why timing sleep(3) and method() take roughly the same amount of time. </p>
<p>I suggest trying to change <code>asyncio.wait_for((method()), 5)</code> with <code>yield from asyncio.wait_for((method()), 3)</code> or just <code>timing method()</code> if you can. </p>
</div>
<span class="comment-copy">The <code>time</code> module will be inaccurate because it depends on the cpu (will go slower at higher cpu usage), use the <code>timeit</code> module instead</span>
<span class="comment-copy">use the timeit module <a href="https://docs.python.org/2/library/timeit.html" rel="nofollow noreferrer">docs.python.org/2/library/timeit.html</a></span>
<span class="comment-copy">What is your goal in using <code>asyncio.wait_for()</code> instead of calling <code>method()</code> directly?</span>
<span class="comment-copy">Attempt to try and measure the time taken for the method to finish. But it must be measuring the time taken to call the method, because a 3 second delay doesn't take 0.00000629989986222767E seconds to call and finish.</span>
