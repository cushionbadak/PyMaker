<div class="post-text" itemprop="text">
<p>How can python program know if it is being tested? For example:</p>
<pre><code>def foo():
    if foo_being_tested:
        pseudorandom()
    else:
        random()
</code></pre>
<p>When in test, program should use pseudorandom sequence to be able to compare with C code version of the program and in regular execution random from <code>numpy</code> should be used.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't, not without inspecting the call stack.</p>
<p><em>Generally</em> speaking, you should not do this at all; by altering your code when tested you are not correctly testing your code.</p>
<p>Instead, you'd use mocking to replace any parts your code uses (anything used by the code under test but not part of it). For your specific example, you'd mock out <code>random()</code>; on Python 3.3 and up you can use <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow"><code>unittest.mock</code></a>, available as <a href="https://pypi.python.org/pypi/mock" rel="nofollow"><code>mock</code> on PyPI</a> for other Python versions, or you can just manually swap out <code>module_under_test.random</code> for the duration of the test.</p>
<p>You could also set an environment variable in your unittests to make it explicit you are running a test, but ideally that should be avoided.</p>
</div>
<span class="comment-copy">Could you precise why you need such a behavior? I believe it is very dangerous: how can you test 'do_regular_stuff'?</span>
<span class="comment-copy">@Simpom I have added an explanation to the question.</span>
<span class="comment-copy">I have considered using mockup but wanted to explore this option also as it had a potential to be more elegant. Inspecting stack is definitely taking elegance out of this option :)</span>
<span class="comment-copy">Accepted, and in this special case the solution was to use the same random number generator from c and initalize it with the same seed in python and in c.</span>
