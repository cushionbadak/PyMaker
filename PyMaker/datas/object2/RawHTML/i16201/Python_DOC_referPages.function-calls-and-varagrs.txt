<div class="post-text" itemprop="text">
<p><code>def func(a, b, c, d): print(a, b, c, d)</code></p>
<pre><code>func(1, c=3, *(2,), **{'d':4})
func(1, c=3, 2, **{'d':4})
</code></pre>
<p>Why does the former call work but the latter not? I mean shouldn't the first return an error too? Doesn't * simply unpack an iterable?</p>
</div>
<div class="post-text" itemprop="text">
<p>As <a href="https://docs.python.org/3/reference/expressions.html#calls" rel="nofollow">the docs</a> say:</p>
<blockquote>
<p>If the syntax <code>*expression</code> appears in the function call, <code>expression</code> must evaluate to an iterable. Elements from this iterable are treated as if they were additional positional arguments; if there are positional arguments <em>x1, ..., xN</em>, and expression evaluates to a sequence <em>y1, ..., yM</em>, this is equivalent to a call with M+N positional arguments <em>x1, ..., xN, y1, ..., yM</em>.</p>
<p><strong>A consequence of this is that although the <code>*expression</code> syntax may appear after some keyword arguments, it is processed before the keyword argumentsâ€¦</strong></p>
</blockquote>
<hr/>
<p>At lot of people are confused by the fact that function definitions have a similar, sometimes misleadingly-similar, syntax.</p>
<p>In a function definition, a variable-argument parameter (like <code>*args</code>) comes before any the keyword-only parameters. Of course being keyword-only and having a default value are completely independent, but it's pretty common that the keyword-only parameters all have default values. So, the syntax often looks like <code>def func(a, *args, c=4, **kwargs):</code>. Which can lead you to expect <code>func(1, *(2,), c=3, **{'d': 4}</code> to be the matching call syntax, even though it isn't. Just remember that <code>def func(a=1, *args, c, **kwargs)</code> is perfectly legal, and it still makes <code>a</code> a positional-or-keyword parameter and <code>c</code> a keyword-only parameter.</p>
<hr/>
<p>If you're interested how this works specifically in CPython (although other implementations are probably all pretty similar):</p>
<p>The function call itself gets compiled to pass the value of the <code>expression</code> on the stack, still separate from the normal arguments. It's inside the interpreter, in the function-call evaluator, where the stack frame for the function body's execution gets built, where that value is exploded into extra arguments.</p>
<hr/>
<p>It may help to see how CPython parses and compiles this code:</p>
<pre><code>&gt;&gt;&gt; astpp(ast.parse("func(1, c=3, *(2,), **{'d':4})"))
Module(
  body=[
    Expr(
      value=Call(
        func=Name(id='func', ctx=Load()), 
        args=[Num(n=1)], 
        keywords=[keyword(arg='c', value=Num(n=3))], 
        starargs=Tuple(elts=[Num(n=2)], ctx=Load()), 
        kwargs=Dict(keys=[Str(s='d')], values=[Num(n=4)])))])"
</code></pre>
<p>Even if you don't understand ASTs, you should be able to see that the <code>(2,)</code> is still separate at parse time, stored in a field named <code>starargs</code>.</p>
<p>This gets compiled to this bytecode:</p>
<pre><code>  2           0 LOAD_GLOBAL              0 (func)
              3 LOAD_CONST               1 (1)
              6 LOAD_CONST               2 ('c')
              9 LOAD_CONST               3 (3)
             12 LOAD_CONST               7 ((2,))
             15 BUILD_MAP                1
             18 LOAD_CONST               5 (4)
             21 LOAD_CONST               6 ('d')
             24 STORE_MAP
             25 CALL_FUNCTION_VAR_KW   257
             28 POP_TOP
             29 LOAD_CONST               0 (None)
             32 RETURN_VALUE
</code></pre>
<p>You probably don't understand all that gibberish, but you can see that the tuple <code>(2,)</code> is being loaded onto the stack at offset 12, and it's still on the stack when the opcode <a href="https://docs.python.org/3/library/dis.html#opcode-CALL_FUNCTION_VAR_KW" rel="nofollow"><code>CALL_FUNCTION_VAR_KW</code></a> gets executed. And you can look that opcode up in the docs, where it says:</p>
<blockquote>
<p>Calls a function. <code>argc</code> is interpreted as in <code>CALL_FUNCTION</code>. The top element on the stack contains the keyword arguments dictionary, followed by the variable-arguments tuple, followed by explicit keyword and positional arguments.</p>
</blockquote>
<p>So, the "variable-arguments tuple" is still separate.</p>
</div>
<div class="post-text" itemprop="text">
<p>Positional parameters must always appear before named and unpacked parameters.</p>
<p>In the expression:</p>
<pre><code>func(1, c=3, 2, **{'d':4})
</code></pre>
<p>The <code>2</code> is a positional parameter while <code>c=3</code> is a named parameter.  It is invalid written this way.  You have to move the named parameter after <em>all</em> positional parameters.</p>
<pre><code>func(1, 2, c=3, **{'d':4})
</code></pre>
<hr/>
<p>On the other hand, the expression:</p>
<pre><code>func(1, c=3, *(2,), **{'d':4})
</code></pre>
<p>is valid.  <code>1</code> is the only positional parameter here.  <code>c=3</code> is a named parameter and <code>*(2,)</code> and <code>**{'d':4}</code> are unpacked.  It's all valid as long as the positional parameter comes first.</p>
</div>
<span class="comment-copy">That surprises me.  No positional arguments are allowed to appear after keyword arguments....</span>
<span class="comment-copy">In Python3.4, they both give me syntax errors.</span>
<span class="comment-copy">I tried in 3.2 abd 3.2</span>
<span class="comment-copy">Interetsingly, func(1, c=3, *(2,), **{'d':4}) does work, which shouldn't either.</span>
<span class="comment-copy">Sorry exactly, i edited the qeustion</span>
<span class="comment-copy">Sorry I made a typo in the code</span>
<span class="comment-copy">I agree with this, but I dont understand why the formet works...</span>
<span class="comment-copy">I added an explanation for why the first works. The positional parameters must always come first.</span>
<span class="comment-copy">But aren't objects in * assigned by position?</span>
<span class="comment-copy">Sure, but they are interpreted as following all positional parameters. So <code>foo(1, *(2, 3, 4))</code> is exactly the same as if you had done <code>foo(1, 2, 3, 4)</code> or even <code>foo(*(1, 2, 3, 4))</code>.</span>
