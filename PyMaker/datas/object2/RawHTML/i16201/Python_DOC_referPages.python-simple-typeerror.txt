<div class="post-text" itemprop="text">
<p>This is a module containing two class:</p>
<pre><code>import datetime

# Store the next available id for all new notes

last_id = 0

class Note:
    '''Represent a note in the notebook. Match against a string
    in searches and store tags for each note.'''

    def __init__(self, memo, tags=''):
        '''initialize a note with memo and optional
        space-sparated tags. Automatically set the note's
        creation date and a unique id.'''
        self.memo = memo
        self.tags = tags
        self.creation_date = datetime.date.today()
        global last_id
        last_id += 1
        self.id = last_id

    def match(self, filter):
        '''Determine if this note matches the filter
        text. Return True if it matches, False otherwise.

        Search is case sensitive and matches both text and tags.'''
        return filter in self.memo or filter in self.tags

class Notebook:
    '''Represent a collection of notes that can be tagged,
    modified, and searched.'''

    def __init__(self):
        '''Initialize a notebook with an empty list.'''
        self.notes = []

    def new_note(self, memo, tags = ''):
        '''Create a new note and add it to the list.'''
        self.notes.append(Note(memo, tags))

    def modify_memo(self, note_id, memo):
        '''Find the note with the given id and change its
        memo to the given value.'''
        for note in self.notes:
            if note.id == note_id:
                note.memo = memo
                break

    def modify_tags(self, note_id, tags):
        '''Find the note with the given id and change its
        tags to the given value.'''
        for note in self.notes:
            if note.id == note_id:
                note.tags = tags
                break

    def search(self, filer):
        '''Find all notes that match the given filter
        string.'''
        return [note for note in self.notes if note.match(filter)]
</code></pre>
<p>When I  create an instance of <code>Notebook()</code>, and perform a <code>search("hello")</code>, a <code>TypeError</code> happened. </p>
<pre><code>&gt;&gt;&gt; from notebook import Note, Notebook
&gt;&gt;&gt; n = Notebook()
&gt;&gt;&gt; n.new_note("hello world")
&gt;&gt;&gt; n.new_note("hello again")
&gt;&gt;&gt; n.notes
[&lt;notebook.Note object at 0x02A2F5F0&gt;, &lt;notebook.Note object at 0x02A51D90&gt;]
&gt;&gt;&gt; n.search("hello")
Traceback (most recent call last):
  File "&lt;pyshell#30&gt;", line 1, in &lt;module&gt;
    n.search("hello")
  File "C:/Users/James/Desktop/Python3OOP/Cahpter2Notebook\notebook.py", line 60, in search
    return [note for note in self.notes if note.match(filter)]
  File "C:/Users/James/Desktop/Python3OOP/Cahpter2Notebook\notebook.py", line 60, in &lt;listcomp&gt;
    return [note for note in self.notes if note.match(filter)]
  File "C:/Users/James/Desktop/Python3OOP/Cahpter2Notebook\notebook.py", line 27, in match
    return filter in self.memo or filter in self.tags
TypeError: 'in &lt;string&gt;' requires string as left operand, not type
</code></pre>
<p>The error tolds me the <code>filter</code> in <code>Note.match</code> must be a <code>string</code>, but when I perform <code>n.search("hello")</code>, <code>"hello"</code> is already a string.</p>
<p>Can someone tell me what's really wrong inside?
Thx!!!</p>
</div>
<div class="post-text" itemprop="text">
<p>You're using a <code>filter</code> but the variable is declared in the function's signature as <code>filer</code>:</p>
<pre><code>def search(self, filer):
</code></pre>
<p>so it probably takes a different <code>filter</code> from an outer scope (thanks to @grc - filter is a builtin function) that is not defined as a string.</p>
</div>
<span class="comment-copy">Avoid using <code>filter</code> as a variable name. It is the name of a python built-in</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer"><code>filter</code></a> is a built-in function.</span>
<span class="comment-copy">@grc which makes this crime even worse - most IDEs will highlight reserved words and the fact that you could (override a reserved keyword) doesn't mean you should...</span>
<span class="comment-copy">i'm using Python's built-in IDE for this practise. Can you tell me how come you guys can find this typing error so fast?</span>
<span class="comment-copy">@user2988464 just lookin' at the code amigo ;)</span>
