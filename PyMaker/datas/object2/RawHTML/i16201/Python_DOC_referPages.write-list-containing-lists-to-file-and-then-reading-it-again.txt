<div class="post-text" itemprop="text">
<p>I'm quite new to python, and as a little project, I am trying to make an interactive program where I can store recipes, each recipe will be stored as a list of the format: [Name, Servings, [List of ingredients], [List of steps in method]]</p>
<p>The first function, that creates the list works (i.e. I have created and stored in the file <code>[Scrambled eggs, 1, [2 eggs, milk.....], [Beat the eggs....]]</code></p>
<p>However when I then call the 'view_recipes' function, I get:</p>
<pre><code>Name:  [
Servings:  '
Ingredients:
S
Method:
c
</code></pre>
<p>so it is clearly iterating over characters in the string.</p>
<p>Is it a problem with how I write my list to my file? (I've looked this up before and everyone says you just need to have <code>f.write(str(list))</code> Else it must be a problem with the reading of a file: but how can I get python to import it as a list of lists?</p>
<p>My code so far:</p>
<pre><code>import re
#Input file
f = open("bank.txt", "r+")

def add_recipe():
    recipe = []
    ingredients = []
    method = []
    #recipe = [name, servings, ingredients(as list), method(as list)]
    recipe.append(raw_input("Please enter a name for the dish: "))
    recipe.append(raw_input("How many servings does this recipe make? "))
    print "Ingredients"
    ans = True
    while ans:
        i = raw_input("Enter amount and ingredient name i.e. '250g Flour' or 'x' to continue: ")
        if i.lower() == "x":
            ans = False
        else:
            ans = False
            ingredients.append(i)
            ans = True
    print "Ingredients entered: "
    for ing in ingredients:
        print ing
    recipe.append(ingredients)
    print "Method: "
    ans2 = True
    while ans2:
        j = raw_input("Type next step or 'x' to end: ")
        if j.lower() == "x":
            ans2 = False
        else:
            ans2 = False
            method.append(j)
            ans2 = True
    print "Method: "
    for step in method:
        print step
    recipe.append(method)
    print "Writing recipe information to file..."
    print recipe
    f.write(str(recipe))
    f.write("\n")

def view_recipes():
    for line in f:
        print "Name: ", list(line)[0]
        print "Servings: ", list(line)[1]
        print "Ingredients: "
        for k in list(line)[2]:
            print k
        print "Method: "
        for l in list(line)[3]:
            print l
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think your problem is that <code>list(line)</code> transform a string into a list of characters:</p>
<pre><code>&gt;&gt;&gt; l = "abc"
&gt;&gt;&gt; list(l)
['a', 'b', 'c']
</code></pre>
<p>You should use something like pickle to read/write data to a file.</p>
<p>See for example <a href="https://stackoverflow.com/a/23170136/3336968">this answer</a>.</p>
<p>Edit: In order to be able to add more recipes to your file, you can</p>
<ul>
<li>add all your recipes to some variable and read/write all at once</li>
</ul>
<p>For instance something like</p>
<pre><code>recipes = []
want_to_add_recipe = True
while want_to_add_recipe:
    recipes.append(add_recipe())
    ans = raw_input('more? ')
    want_to_add_recipe = True if ans == 'y' else False
with open("Recipe.txt", "wb") as fo:
    pickle.dump(recipe, fo)
</code></pre>
<p>And in <code>add_recipe</code>:</p>
<pre><code>with open("Recipe.txt", "rb") as fo:
    recipes = pickle.load(fo)
for name, serving, ingredients, method in recipes:
    #print things        
</code></pre>
<p>You will have to change <code>add_recipe</code> to <code>return recipe</code>.</p>
<ul>
<li>add recipe to your file each time you call <code>add_recipe</code>:

<ul>
<li>read your file</li>
<li>load <code>recipes</code> if they exist</li>
<li>add your recipe to <code>recipes</code></li>
<li>write the new <code>recipes</code> to the file</li>
</ul></li>
</ul>
<p>Also, check <a href="https://stackoverflow.com/questions/25381994/write-list-containing-lists-to-file-and-then-reading-it-again#comment39583634_25382164">@jonrsharpe</a> comment. You could easily use <a href="http://zetcode.com/db/sqlitepythontutorial/" rel="nofollow noreferrer">sqlite3</a> to avoid drawbacks of both my methods.</p>
</div>
<span class="comment-copy">If you have the representation of a list stored in the file (e.g. <code>"['eggs', 'milk']"</code>), you will need <a href="https://docs.python.org/2/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a> to get the object back. Alternatively, consider a proper <a href="https://docs.python.org/2/library/csv.html" rel="nofollow noreferrer">CSV</a> format</span>
<span class="comment-copy">If you are not interested in a particular format of the file, only in being able to get your data back, then the <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer">pickle module</a> is what you are looking for. It can serialize an arbitrary Python object (even if it involves objects of custom classes etc.) and reconstruct it exactly. It uses a custom format, even using compression. It works correctly even if several references to the same object exist in the data structure and will not create multiple separate copies of that object upon reconstruction.</span>
<span class="comment-copy">This seems like a good method, however when I put in two recipes, it just overwrites the file. Using "a+" as mode when performing with open("bank.txt", "a+") as fo: 		pickle.dump((name, servings, ingredients, method), fo) doesn't seem to have fixed it!</span>
<span class="comment-copy">@ACrazyChemist see <a href="http://stackoverflow.com/q/20716812/3001761">stackoverflow.com/q/20716812/3001761</a> (especially Tim Peters' comment on not reinventing the database...)</span>
<span class="comment-copy">@fredtantini Thanks for the update, however as far as I can tell, sqlite3 isn't particularly compatible with python lists as a datatype? it deals with int/float and txt types very well. If I decide to take this project further and, for example make a shopping list compiler, then I would need to be able to easily access specific items in the python list 'ingredients'. Regardless, SQL is still on my list of modules to have a look at.</span>
