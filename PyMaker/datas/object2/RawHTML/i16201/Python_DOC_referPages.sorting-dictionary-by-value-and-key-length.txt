<div class="post-text" itemprop="text">
<p>I've been googling and seaching and I just cant find an answer.</p>
<p>I have a dictionary which holds the people in the group, and the score the group has, <code>groups = {"john,alfred,willis":5, "james,connor":5}, ...</code>. People can be in 2 groups at once, however. What I want to do with this dictionary is sort it by the amount of people AND their score. For example:</p>
<pre><code>&gt;&gt;&gt; groups = {"a,b,c":5, "d,e":6, "f,g,h,i":5, "j,k,l":6, "m,n":10, "a,d,f":5}
</code></pre>
<p>I need to sort it by the score, then by the amount of people, and then by alphabetical order as a final tie breaker. There are no duplicates of groups, however one group may own <code>"a,b,c,d"</code> and another may own <code>"a,b,c,e"</code>. Higher score trumps lower score, more people trumps less people, and alphabetical order is ... alphabetical order.</p>
<pre><code>&gt;&gt;&gt; print(mySort(groups))
"m,n", 10
"j,k,l", 6
"d,e", 6
"f,g,h,i", 5
"a,b,c", 5
"a,d,f", 5
</code></pre>
<p>The output format doesn't have to be like that, but it is preferred that it is formatted in the way of a dictionary.</p>
<p>I have attempted a few different ways, including splitting the key by <code>,</code>'s because the names can be of any length, but because Python isn't my first language, I'm finding it difficult.</p>
<p><strong>How do you sort dictionaries by value and then key size?</strong></p>
<p><strong>EDIT:</strong> I have added another part to the question which I thought I could go without. Turns out it's needed though...</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>groups = {"a,b,c":5, "d,e":6, "f,g,h,i":5, "j,k,l":6, "m,n":10}
s = sorted(groups.items(),key=lambda x: (x[1],len(x[0])),reverse=True)

for k,v in s:
    print (k,v)
m,n 10
j,k,l 6
d,e 6
f,g,h,i 5
a,b,c 5
</code></pre>
<p>use <code>-max(map(ord,x[0])))</code> to sort by the  letter that comes latest  in the alphabet, i.e <code>a,b,c,y</code> beats <code>a,b,c,z</code>.</p>
<pre><code>In [37]: groups = {"a,b,c":5, "d,e":6, "f,g,h,i":5, "j,k,l":6, "m,n":10,"a,b,c,d":12,"a,b,c,e":12,"a,b,c,z":13,"a,b,c,y":13}

In [38]: sorted(groups.items(),key=lambda x: (x[1],len(x[0]),-max(map(ord,x[0].split(","))),reverse=True)
Out[38]: 
[('a,b,c,y', 13),
 ('a,b,c,z', 13),
 ('a,b,c,d', 12),
 ('a,b,c,e', 12),
 ('m,n', 10),
 ('j,k,l', 6),
 ('d,e', 6),
 ('f,g,h,i', 5),
 ('a,b,c', 5)]
</code></pre>
<p>We use the <code>lambda x: (x[1],len(x[0]),-max(map(ord,x[0].split(","))))</code> to sort the output above.</p>
<p>In that <code>x[1],len(x[0])</code> means we sort first on the values <code>x[1]</code> then on the  length of each key <code>len(x[0])</code>.</p>
<p>If we are tied on both of those, we go to <code>-max(map(ord,x[0].split(","))</code>, the following is an example of how that works:</p>
<p>If we take  <code>"a,b,c,z" and "a,b,c,y"</code> as an example and put them in a list <code>keys =["a,b,c,z","a,b,c,y"]</code>:</p>
<p>First get the ords of each char:</p>
<pre><code>In [54]: ords = [list(map(ord,x.split(","))) for x in keys] # get ord values from each char
In [55]: ords
Out[55]: [[97, 98, 99, 122], [97, 98, 99, 121]]
</code></pre>
<p>We are sorting  from highest to lowest so we use <code>reverse = True</code>.</p>
<pre><code>In [56]: sorted([max(x) for x in ords], reverse=True) # puts "z" first because of reversing
Out[56]: [122, 121]
</code></pre>
<p>So we use <code>-max(x)</code> to reverse that output:</p>
<pre><code>In [57]: sorted([-max(x) for x in ords], reverse=True) # now "y" comes first
Out[57]: [-121, -122]
</code></pre>
<p><code>x</code> in the <code>lambda</code> is each subitem in <code>groups.items()</code> which looks like:</p>
<pre><code>([('a,b,c', 5), ('a,b,c,d', 12), ('j,k,l', 6), ('d,e', 6), ('a,b,c,z', 13), ('m,n', 10), ('a,b,c,y', 13), ('a,b,c,e', 12), ('f,g,h,i', 5)])
</code></pre>
<p>So if we take <code>('a,b,c', 5)</code> <code>x[0] = "a,b,c"</code> and <code>x[1] = 5</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow"><code>sorted</code></a>: (Return value of the <code>key</code> function is used for comparison)</p>
<pre><code>&gt;&gt;&gt; groups = {"a,b,c":5, "d,e":6, "f,g,h,i":5, "j,k,l":6, "m,n":10}
&gt;&gt;&gt; sorted_keys = sorted(groups, key=lambda k: (groups[k], k), reverse=True)
&gt;&gt;&gt; sorted_keys
['m,n', 'j,k,l', 'd,e', 'f,g,h,i', 'a,b,c']
&gt;&gt;&gt; [(key, groups[key]) for key in sorted_keys]
[('m,n', 10), ('j,k,l', 6), ('d,e', 6), ('f,g,h,i', 5), ('a,b,c', 5)]
</code></pre>
<p><strong>UPDATE</strong></p>
<p><code>key</code> function should be changed as follow to correctly count people.</p>
<pre><code>lambda k: (groups[k], len(k.split(','))), reverse=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To sort by "amount of people" you rather need</p>
<pre><code>&gt;&gt;&gt; sorted(groups.items(), key=lambda p: (p[1], p[0].count(',')), reverse=True)

[('m,n', 10), ('j,k,l', 6), ('d,e', 6), ('f,g,h,i', 5), ('a,b,c', 5)]
</code></pre>
<p>As a side note, comma-separated strings is not the best way to represent groups of things. Consider making your dict tuple-indexed instead:</p>
<pre><code>&gt;&gt;&gt; good_groups = {tuple(k.split(',')):v for k, v in groups.items()}
</code></pre>
<p>and then</p>
<pre><code>&gt;&gt;&gt; sorted(good_groups.items(), key=lambda p: (p[1], len(p[0])), reverse=True)

[(('m', 'n'), 10), (('j', 'k', 'l'), 6), (('d', 'e'), 6), (('f', 'g', 'h', 'i'), 5), (('a', 'b', 'c'), 5)]
</code></pre>
<p>If your groups are going to be mutated and should be lists, not tuples, you cannot use them as dict keys. Consider a different data structure, for example, a list of dicts:</p>
<pre><code>groups = [
   { 'members': ['foo', 'bar'], 'score': 5 },
   { 'members': ['baz', 'spam'], 'score': 15 },
etc
</code></pre>
</div>
<span class="comment-copy">Possible duplicate: <a href="http://stackoverflow.com/questions/613183/">stackoverflow.com/questions/613183</a> essentially, you can't sort a dictionary, just display it in a sorted fashion.</span>
<span class="comment-copy">Downvoters, explain?. @iwin, how is this a duplicate?</span>
<span class="comment-copy">@iwin, Precision is key, I understand, but you did receive the general gist of what I was requesting, correct?</span>
<span class="comment-copy">I thought it was close enough to the other questions about sorting dictionaries in Python which have many very good answers; I didn't downvote you though.</span>
<span class="comment-copy">ok I added that condition, because we are reversing the sort, we need to negate the value with a <code>-</code></span>
<span class="comment-copy">what is the downvote for exactly?</span>
<span class="comment-copy">Tick: In[38] solved all 3 in one hit. You know your Python very well! Thank you. I'll be renaming things so it doesn't look all too obfuscated. I can learn and understand this. If I have questions, I'll be sure to comment. Thank you.</span>
<span class="comment-copy">I will add a bit more when I get back on the comp</span>
<span class="comment-copy">Pretty much everything after lambda. Because I know lambda is an anonymous function, and x is it's parameter.</span>
<span class="comment-copy">is that a question?</span>
<span class="comment-copy">I dislike tuples because they are immutable - it feels like I have no control over them and I would then have to keep creating new tuples if I want to change the contents...</span>
<span class="comment-copy">@mastercork889: hmm.... strings are just as immutable - do you hate them because of this?</span>
<span class="comment-copy">I guess I can't 'hate-on' tuples. I just haven't fully learnt how to use them. I have figured that if you turn a string into a list, it can be mutated, and then pushed back into a string.</span>
<span class="comment-copy">@mastercork889: I understand what you mean. See the update.</span>
<span class="comment-copy">Scary stuff, list/dictionary-inception is. How would I go about getting a value? groups[0][members][1] = bar?</span>
