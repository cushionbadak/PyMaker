<div class="post-text" itemprop="text">
<p>I have a bit of confusion about parameters' rules in funcion header and arguments' rules in function calls.</p>
<p>Here is my confusing point:</p>
<p>According to the documentation: </p>
<blockquote>
<p>If the syntax *expression appears in the function call, expression must evaluate to an iterable. Elements from this iterable are treated as if they were additional positional arguments; if there are positional arguments x1, ..., xN, and expression evaluates to a sequence y1, ..., yM, this is equivalent to a call with M+N positional arguments x1, ..., xN, y1, ..., yM.</p>
</blockquote>
<p>So if there is a function like this:</p>
<pre><code>def func(a, *b): ....
</code></pre>
<p>why can't I do something like this:</p>
<pre><code>func(1, *[2, 3], *[4, 5])
</code></pre>
<p>Isn't this equivalent to x1, ..., xN, y1, ..., yN, w1, ..., wN? 
Why doesn't this work?</p>
</div>
<div class="post-text" itemprop="text">
<p>First off, don't get confused by the fact that <code>*args</code> can be used both in function declarations and in function calls. Though the two are loosely related, they're not the same thing. You can call a function with <code>foo(*args)</code> without it being declared with a variable number of parameters and a function defined with <code>def foo(*args)</code> need not be called with an unpacked iterable.</p>
<p>The real issue you're seeing though is that only one <code>*args</code> unpacking is allowed in a function call. That's simply how Python's syntax has been specified. This may change in the future though, as <a href="http://legacy.python.org/dev/peps/pep-0448/" rel="nofollow">PEP 448</a> seeks generalize the unpacking syntax so it can be used in more situations. If the PEP gets approved and implemented, function calls like <code>foo(*args, *args2)</code> will become legal.</p>
</div>
<div class="post-text" itemprop="text">
<p>First of al, it <em>doesn't matter what the function signature is</em>. The <em>call syntax</em> and the <em>function definition</em> are two separate concepts that happen to use <code>*</code> to mean related things. The definition of <code>f()</code> doesn't matter here.</p>
<p>It is the very grammar defined in the <a href="https://docs.python.org/3/reference/expressions.html#calls" rel="nofollow"><em>Calls</em> expressions documentation</a> that doesn't allow multiple <code>*expression*</code> parts:</p>
<blockquote>
<pre><code>argument_list        ::=  positional_arguments ["," keyword_arguments]
                            ["," "*" expression] ["," keyword_arguments]
                            ["," "**" expression]
                          | keyword_arguments ["," "*" expression]
                            ["," keyword_arguments] ["," "**" expression]
                          | "*" expression ["," keyword_arguments] ["," "**" expression]
                          | "**" expression
</code></pre>
</blockquote>
<p>Each <code>|</code> is an alternative part, each <code>[...]</code> is optional. None of these allow for <code>*expression</code> to appear more than once.</p>
<p><strike>Note that there is a bug in the <a href="https://docs.python.org/2/reference/expressions.html#calls" rel="nofollow">Python 2 rendering of the documentation</a>, where</strike></p>
<pre><code>| "*" expression ["," keyword_arguments] ["," "**" expression]
</code></pre>
<p>has been replaced by the incorrect</p>
<pre><code>| "*" expression ["," "*" expression] ["," "**" expression]
</code></pre>
<p>See <a href="http://bugs.python.org/issue22288" rel="nofollow">issue #22288</a>.</p></div>
<div class="post-text" itemprop="text">
<p>Because the syntax doesn't allow it. </p>
<p>You can use the following instead to achieve the same effect:</p>
<pre><code>func(1, *([2, 3] + [4, 5])) 
</code></pre>
</div>
<span class="comment-copy">And the very same documentation you quote includes the syntax grammar. The official grammar only allows for <b>one</b> <code>*expression</code>.</span>
<span class="comment-copy">Is there a reason why allow just one <code>*</code> and not more? I don't know, readability, usability...</span>
<span class="comment-copy">@antox: simpler initial implementation, more likely. The PEP tries to focus discussion on what it can be expanded to. Guido seems to be positively inclined towards it (see his comments on a <a href="http://bugs.python.org/issue2292" rel="nofollow noreferrer">related Python issue</a>).</span>
<span class="comment-copy">The lazy iterator will be completely evaluated before the function gets called, so you don't gain anything.</span>
<span class="comment-copy">@jonrsharpe You're right; I stand corrected (editing the answer).</span>
