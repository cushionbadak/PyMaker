<div class="post-text" itemprop="text">
<p>I've been playing around with Python's magic methods, and I've come across an interesting behavior:</p>
<pre><code>In [1]: def foo(x):
...:     return x
...: 

In [3]: foo.a = 10

In [4]: foo.func_dict
Out[4]: {'a': 10}

In [6]: def getter(*x):
    return 5
...: 

In [7]: foo.__getattribute__ = getter

In [8]: foo.a
Out[8]: 10

In [9]: foo.func_dict
Out[9]: {'__getattribute__': &lt;function __main__.getter&gt;, 'a': 10}
</code></pre>
<p>Since I overrode foo's <code>__getattribute__</code>, shouldn't <code>foo.a</code> return <code>5</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/reference/datamodel.html#special-method-lookup" rel="nofollow">Special methods are looked for in the <em>class</em> of the object</a>, not amongst the instance's attributes. Thus, to affect <code>foo.a</code>, you would need to modify the <code>__getattribute__</code> method of <code>type(foo)</code> which is <code>function</code>. However, the built-in type <code>function</code> does not allow you to change its <code>__getattribute__</code> method:</p>
<pre><code>In [7]: type(foo).__getattribute__ = getter

TypeError: can't set attributes of built-in/extension type 'function'
</code></pre>
<p>I think that is true of all objects defined in C rather than Python.</p>
</div>
