<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/311775/python-create-a-list-with-initial-capacity">Python - Create a list with initial capacity</a>
<span class="question-originals-answer-count">
                    9 answers
                </span>
</li>
</ul>
</div>
<p>Is there any way to create many objects at once in Python? </p>
<p>Let say, that I want to populate a list with 1.000.000 object instances. Instead of initializing objects one-by-one in loop, is there any way to create them in one call?</p>
<p>Iterating one-by-one takes some time and I am looking for a way other than running many threads to reduce this time.</p>
<p>My adventure with Python started a month ago, so I am quite unaware of many Python specific tricks. Any hints how to deal with this problem? </p>
</div>
<div class="post-text" itemprop="text">
<p>You must iterate N times to make N objects, either in a for loop or list comp.</p>
<pre><code>objectList = [object() for _ in range(1000000)]
</code></pre>
<p>For example to instatiate a list of <code>int</code></p>
<pre><code>intList = [int() for _ in range(1000000)]
</code></pre>
<p>For a small list of 10 <code>int</code>:</p>
<pre><code>&gt;&gt;&gt; [int() for _ in range(10)]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would use a generator:</p>
<pre><code>&gt;&gt;&gt; def obj(x):
...    print 'obj called with', x
...    return x
... 
&gt;&gt;&gt; gen=(obj(x) for x in xrange(10))
</code></pre>
<p>Notice at this point, <code>obj</code> has not been called. Once you actually convert to a list (or much better still, iterate over it) the objects will be created in turn:</p>
<pre><code>&gt;&gt;&gt; list(gen)
obj called with 0
obj called with 1
obj called with 2
obj called with 3
obj called with 4
obj called with 5
obj called with 6
obj called with 7
obj called with 8
obj called with 9
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>objectList = [None] * 1000 # Make a list of 1000 None's</p>
<p>ADDED</p>
<p>If you are wanting to preallocate a list to avoid the overhead of reallocation the list as it continues to grow, this construct is appropriate as is will allocate the entire memory for the list and initialize each member of the list using the same object.</p>
<p>If you need the initialize each member to a different object, you have to initialize each list element separately via a loop, list comprehension, etc.</p>
<p>Memory reallocation under Windows tends to be a good bit slower than under Unix based systems, so this approach can be faster than simply initialing the loop as this construction runs at native speed.</p>
</div>
<span class="comment-copy">What about lazily creating objects as you use them instead of creating from the start? check <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer">defaultDict</a> for example.</span>
<span class="comment-copy">some packages such as numpy let you create a large array quickly, but generally, you have to create them one at a time. List comprehensions like <code>[MyClass(x) for x in range(1000000)]</code> tend to be faster than for loops because there are fewer name lookups.</span>
<span class="comment-copy">Is there enough memory for 1,000,000 objects? What kind of post processing? Can they be dealt with 1 by 1? Is random access to any of the objects needed? What kind of objects? Are they muteable or immutable? Do they depend on some value of X when created? Do you need to search them for a value? Do you need to be able to order them or save them? Do you need to insert values at X location? Are they to be kept unique (like a set)?</span>
<span class="comment-copy">There is an existing list of N objects that contain some data, that by creating an BLL object for each existing objects, is parsed to JSON and returned. Random access is not needed, I am looking for a solution to boost parsing process that is being carried out by creating N BLL's. Thought that something like mass object allocation could work.</span>
<span class="comment-copy">How would this be faster?</span>
<span class="comment-copy">@martineau: That is the right question, but the OP did not really specify information that would allow one to determine. See my questions on the post...</span>
<span class="comment-copy">What if all the objects aren't <code>None</code> or aren't all the same?</span>
<span class="comment-copy">See explanation that I was apparently typing when you asked this.</span>
