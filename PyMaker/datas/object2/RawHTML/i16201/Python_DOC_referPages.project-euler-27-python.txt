<div class="post-text" itemprop="text">
<p>Project Euler Problem #27 is as follows:</p>
<blockquote>
<p>Euler discovered the remarkable quadratic formula:</p>
<p>n² + n + 41</p>
<p>It turns out that the formula will produce 40 primes for the
  consecutive values n = 0 to 39. However, when n = 40, 402 + 40 + 41 =
  40(40 + 1) + 41 is divisible by 41, and certainly when n = 41, 41² +
  41 + 41 is clearly divisible by 41.</p>
<p>The incredible formula  n² − 79n + 1601 was discovered, which produces
  80 primes for the consecutive values n = 0 to 79. The product of the
  coefficients, −79 and 1601, is −126479.</p>
<p>Considering quadratics of the form:</p>
<p>n² + an + b, where |a| &lt; 1000 and |b| &lt; 1000</p>
<p>where |n| is the modulus/absolute value of n e.g. |11| = 11 and |−4| =
  4 Find the product of the coefficients, a and b, for the quadratic
  expression that produces the maximum number of primes for consecutive
  values of n, starting with n = 0.</p>
</blockquote>
<p>And this is my solution:</p>
<pre><code>from math import sqrt, fabs

def eSieve(rnge):
    rootedrange = int(sqrt(rnge))
    mydict = dict([(_, True) for _ in range(2, rootedrange)])
    for i in range(2, rootedrange):
        if mydict[i] == True:
            for j in range(i**2, rnge, i):
                mydict[j] = False
    mylist = []
    for key in mydict.keys():
        if mydict[key] is True:
            mylist.append(key)
    return mylist

primes = eSieve(87400)

def isPrime(n):
    i = 0
    while primes[i] &lt;= n:
        if primes[i] == n: return True
        i+=1
    return False

arange = 0
brange = 0
nrange = 0
for a in range(-1000, 1001):
    for b in range(-1000, 1001):
        n = 0
        formula = n*n + a*n + b
        print(formula)
        while(isPrime(fabs(formula))):
            n+=1

        if n &gt; nrange:
            arange = a
            brange = b
            crange = c

print(arange * brange)
</code></pre>
<p>I do not know why is it continuously throwing this error:</p>
<pre><code>Traceback (most recent call last):
  File "D:\Programming\ProjectEuler\p27.py", line 33, in &lt;module&gt;
    while(isPrime(fabs(formula))):
  File "D:\Programming\ProjectEuler\p27.py", line 20, in isPrime
    while primes[i] &lt;= n:
IndexError: list index out of range
</code></pre>
<p>Can anyone tell where and how is my program getting out of lists range? It's very abnormal. Why is this happening?</p>
</div>
<div class="post-text" itemprop="text">
<p>Let's see what happens if you want to see if 1000000 is a prime:</p>
<pre><code>i = 0
while primes[i] &lt;= n:
    if primes[i] == n: return True
    i+=1

return False
</code></pre>
<p>None of the sieved primes is larger than 1000000 so your <code>while</code> condition is never fulfilled. First rule of Python is to <strong>never use <code>while</code> loop</strong> (except when you cannot use any other loop). Here you can easily replace it with <code>for</code>:</p>
<pre><code>for i in primes:
    if i == n:
        return True

return False
</code></pre>
<p>But this is exactly what the <code>in</code> operator is set to replace:</p>
<pre><code>return n in primes
</code></pre>
<p>In addition for your <code>isPrime</code> reimplementing the Python core feature <code>n in primes</code>, the
<code>item in list</code>  gets slower than <code>item in set</code> as the number of items grows.</p>
<p>Thus for fastest code with almost least typing you can do:</p>
<pre><code>&gt;&gt;&gt; primes = eSieve(87400)
&gt;&gt;&gt; prime_set = set(primes)
&gt;&gt;&gt; 13 in prime_set
True
&gt;&gt;&gt; # or if you want a function:
&gt;&gt;&gt; is_prime = prime_set.__contains__
&gt;&gt;&gt; is_prime(13)
True
</code></pre>
<p><a href="https://docs.python.org/3/reference/datamodel.html#object.__contains__" rel="nofollow"><code>__contains__</code></a> magic method of the <code>set</code> returns true if the given value is in the <code>set</code> - this is much faster using it directly than wrapping <code>in</code> operator in a function.</p>
</div>
<div class="post-text" itemprop="text">
<p>If <code>isPrime(n)</code> should return whether <code>n</code> is in the previously created list <code>primes</code>, then you can easily write:</p>
<pre class="lang-py prettyprint-override"><code>def isPrime(n):
    return n in primes
</code></pre>
<p>(Your solution fails, because your prime list is too short for <code>n = 1000</code>. The largest prime is 293, thus the <code>while</code> condition is always fulfilled. But after a while you want to compare <code>primes[62]</code> with <code>n</code>, which is out of range.)</p>
</div>
<span class="comment-copy">For what <code>n</code> and what <code>i</code> do you get the error?</span>
<span class="comment-copy">The very first ones @hlt</span>
<span class="comment-copy">If <code>primes[0]</code> throws an <code>IndexError</code>, then <code>primes</code> is empty.</span>
<span class="comment-copy">@hlt not possible; checked it.</span>
<span class="comment-copy">Two close votes for lacking a minimal, complete, and verifiable example? Really now?</span>
