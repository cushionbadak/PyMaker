<div class="post-text" itemprop="text">
<p>I am trying to get it so that this code: </p>
<pre><code>from collections import Counter
a = input('Votes: ')
a = a.split(',')
count = Counter(a)
print (count)
</code></pre>
<p>When I input something like this:</p>
<pre><code>One,One,Two,Two,Three,Four,Five,Five
</code></pre>
<p>prints this:</p>
<pre><code>One: 2
Two: 2
Three: 1
Four: 1
Five:2
</code></pre>
<p>instead of this:</p>
<pre><code>Counter({'One': 2, 'Two': 2, 'Five': 2, 'Three': 1, 'Four': 1})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Loop over the <a href="https://docs.python.org/3/library/collections.html#collections.Counter.most_common" rel="nofollow"><code>Counter.most_common()</code></a> output:</p>
<pre><code>for key, c in count.most_common():
    print("{}: {}".format(key, c))
</code></pre>
<p>The <code>most_common()</code> method gives you the items in sorted order, from most to least common:</p>
<p>If you need to order them by their 'came first' ordering in <code>a</code> (so <code>One</code> before <code>Two</code> simply because <code>One</code> was mentioned first) then sort them by their string index with <code>str.index()</code>.</p>
<pre><code>for key, c in sorted(count.items(), key=lambda i: a.index(i[0])):
    print("{}: {}".format(key, c))
</code></pre>
<p>If you needed to order them by the ordinal interpretation of the numbers, use a dictionary translating words to digits:</p>
<pre><code>numbers = {'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5} # expand as needed
for key, c in sorted(count.items(), key=lambda i: numbers[i[0].lower()]):
    print("{}: {}".format(key, c))
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; a = 'One,One,Two,Two,Three,Four,Five,Five'.split(',')
&gt;&gt;&gt; count = Counter(a)
&gt;&gt;&gt; for key, c in count.most_common():
...     print("{}: {}".format(key, c))
... 
Five: 2
Two: 2
One: 2
Three: 1
Four: 1
&gt;&gt;&gt; for key, c in sorted(count.items(), key=lambda i: a.index(i[0])):
...     print("{}: {}".format(key, c))
... 
One: 2
Two: 2
Three: 1
Four: 1
Five: 2
&gt;&gt;&gt; numbers = {'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5}
&gt;&gt;&gt; for key, c in sorted(count.items(), key=lambda i: numbers[i[0].lower()]):
...     print("{}: {}".format(key, c))
... 
One: 2
Two: 2
Three: 1
Four: 1
Five: 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from collections import Counter
a = input('Votes: ')
a = a.split(',')
count = Counter(a)

for key in sorted(set(a),key=lambda x: a.index(x)):
     print ("{}: {}".format(key,count[key]))

In [13]: for key in sorted(set(a),key=lambda x: a.index(x)):
   ....:          print ("{}: {}".format(key,count[key]))
   ....:     

One: 2
Two: 2
Three: 1
Four: 1
Five: 2
</code></pre>
<p>Make a <code>set</code> to remove the duplicates and use <code>sorted</code> with a  <code>lambda</code> to sort based on the index of the corresponding value in the <code>a</code> list which matches the <code>input</code> order</p>
</div>
<div class="post-text" itemprop="text">
<p>One liner, sorted:</p>
<pre><code>a = ['One','One','Two','Two','Three','Four','Five','Five']
counts = Counter(a)
print('\n'.join('{}: {}'.format(*x) for x in sorted(counts.items(), key=lambda x: a.index(x[0]))))
</code></pre>
</div>
<span class="comment-copy">Do you need them ordered?</span>
