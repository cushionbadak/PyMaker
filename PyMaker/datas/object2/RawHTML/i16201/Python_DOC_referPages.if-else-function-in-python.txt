<div class="post-text" itemprop="text">
<p>If Python does not have a ternary conditional operator, is it possible to simulate one using other language constructs?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, it was <a href="https://mail.python.org/pipermail/python-dev/2005-September/056846.html" rel="noreferrer" title="[Python-Dev] Conditional Expression Resolution">added</a> in version 2.5. The expression syntax is:</p>
<pre><code>a if condition else b
</code></pre>
<p>First <code>condition</code> is evaluated, then exactly one of either <code>a</code> or <code>b</code> is evaluated and returned based on the <a href="https://en.wikipedia.org/wiki/Boolean_data_type" rel="noreferrer" title="Boolean data type">Boolean</a> value of <code>condition</code>. If <code>condition</code> evaluates to <code>True</code>, then <code>a</code> is evaluated and returned but <code>b</code> is ignored, or else when <code>b</code> is evaluated and returned but <code>a</code> is ignored.</p>
<p>This allows short-circuiting because when <code>condition</code> is true only <code>a</code> is evaluated and <code>b</code> is not evaluated at all, but when <code>condition</code> is false only <code>b</code> is evaluated and <code>a</code> is not evaluated at all.</p>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; 'true' if True else 'false'
'true'
&gt;&gt;&gt; 'true' if False else 'false'
'false'
</code></pre>
<p>Note that conditionals are an <em>expression</em>, not a <em>statement</em>. This means you can't use assignment statements or <code>pass</code> or other <strong>statements</strong> within a conditional <strong>expression</strong>:</p>
<pre><code>&gt;&gt;&gt; pass if False else x = 3
  File "&lt;stdin&gt;", line 1
    pass if False else x = 3
          ^
SyntaxError: invalid syntax
</code></pre>
<p>In such a case, you have to use a normal <code>if</code> <strong>statement</strong> instead of a conditional <strong>expression</strong>.</p>
<hr/>
<p>Keep in mind that it's frowned upon by some Pythonistas for several reasons:</p>
<ul>
<li>The order of the arguments is different from those of the classic <code>condition ? a : b</code> ternary operator from many other languages (such as C, C++, Go, Perl, Ruby, Java, Javascript, etc.), which may lead to bugs when people unfamiliar with Python's "surprising" behaviour use it (they may reverse the argument order).</li>
<li>Some find it "unwieldy", since it goes contrary to the normal flow of thought (thinking of the condition first and then the effects).</li>
<li>Stylistic reasons.</li>
</ul>
<p>If you're having trouble remembering the order, then remember that when read aloud, you (almost) say what you mean. For example, <code>x = 4 if b &gt; 8 else 9</code> is read aloud as <code>x will be 4 if b is greater than 8 otherwise 9</code>.</p>
<p>Official documentation:     </p>
<ul>
<li><a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="noreferrer" title="Conditional expressions">Conditional expressions</a></li>
<li><a href="https://docs.python.org/3.3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator" rel="noreferrer" title="Is there an equivalent of C’s ”?:” ternary operator?">Is there an equivalent of C’s ”?:” ternary operator?</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You can index into a tuple:</p>
<pre><code>(falseValue, trueValue)[test]
</code></pre>
<p><code>test</code> needs to return <em>True</em> or <em>False</em>.<br/>
It might be safer to always implement it as:</p>
<pre><code>(falseValue, trueValue)[test == True]
</code></pre>
<p>or you can use the built-in <a href="https://docs.python.org/3.3/library/functions.html#bool" rel="noreferrer" title="bool"><code>bool()</code></a> to assure a <a href="https://en.wikipedia.org/wiki/Boolean_data_type" rel="noreferrer" title="Boolean data type">Boolean</a> value:</p>
<pre><code>(falseValue, trueValue)[bool(&lt;expression&gt;)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For versions prior to 2.5, there's the trick:</p>
<pre><code>[expression] and [on_true] or [on_false]
</code></pre>
<p>It can give wrong results when <code>on_true</code> 
 has a false boolean value.<sup>1</sup><br/>
Although it does have the benefit of evaluating expressions left to right, which is clearer in my opinion.</p>
<p><sub>1. <a href="http://docs.python.org/3.3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator" rel="noreferrer">Is there an equivalent of C’s ”?:” ternary operator?</a></sub></p>
</div>
<div class="post-text" itemprop="text">
<p><em>expression1</em> if <em>condition</em> else <em>expression2</em></p>
<pre><code>&gt;&gt;&gt; a = 1
&gt;&gt;&gt; b = 2
&gt;&gt;&gt; 1 if a &gt; b else -1 
-1
&gt;&gt;&gt; 1 if a &gt; b else -1 if a &lt; b else 0
-1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="noreferrer" title="Conditional expressions">the documentation</a>:</p>
<blockquote>
<p>Conditional expressions (sometimes called a “ternary operator”) have the lowest priority of all Python operations.</p>
<p>The expression <code>x if C else y</code> first evaluates the condition, <em>C</em> (<em>not x</em>); if <em>C</em> is true, <em>x</em> is evaluated and its value is returned; otherwise, <em>y</em> is evaluated and its value is returned.</p>
<p>See <a href="https://www.python.org/dev/peps/pep-0308/" rel="noreferrer" title="PEP 308 -- Conditional Expressions">PEP 308</a> for more details about conditional expressions.</p>
</blockquote>
<p>New since version 2.5.</p>
</div>
<div class="post-text" itemprop="text">
<p>An operator for a conditional expression in Python was added in 2006 as part of <a href="https://www.python.org/dev/peps/pep-0308/" rel="noreferrer">Python Enhancement Proposal 308</a>. Its form differ from common <code>?:</code> operator and it's:</p>
<pre><code>&lt;expression1&gt; if &lt;condition&gt; else &lt;expression2&gt;
</code></pre>
<p>which is equivalent to:</p>
<pre><code>if &lt;condition&gt;: &lt;expression1&gt; else: &lt;expression2&gt;
</code></pre>
<p>Here is an example:</p>
<pre><code>result = x if a &gt; b else y
</code></pre>
<p>Another syntax which can be used (compatible with versions before 2.5):</p>
<pre><code>result = (lambda:y, lambda:x)[a &gt; b]()
</code></pre>
<p>where operands are <a href="https://en.wikipedia.org/wiki/Lazy_evaluation" rel="noreferrer">lazily evaluated</a>.</p>
<p>Another way is by indexing a tuple (which isn't consistent with the conditional operator of most other languages):</p>
<pre><code>result = (y, x)[a &gt; b]
</code></pre>
<p>or explicitly constructed dictionary:</p>
<pre><code>result = {True: x, False: y}[a &gt; b]
</code></pre>
<p>Another (less reliable), but simpler method is to use <code>and</code> and <code>or</code> operators:</p>
<pre><code>result = (a &gt; b) and x or y
</code></pre>
<p>however this won't work if <code>x</code> would be <code>False</code>.</p>
<p>A possible workaround is to make <code>x</code> and <code>y</code> lists or tuples as in the following:</p>
<pre><code>result = ((a &gt; b) and [x] or [y])[0]
</code></pre>
<p>or:</p>
<pre><code>result = ((a &gt; b) and (x,) or (y,))[0]
</code></pre>
<p>If you're working with dictionaries, instead of using a ternary conditional, you can take advantage of <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="noreferrer"><code>get(key, default)</code></a>, for example:</p>
<pre><code>shell = os.environ.get('SHELL', "/bin/sh")
</code></pre>
<p><sup>Source: <a href="https://en.wikipedia.org/wiki/%3F:#Python" rel="noreferrer">?: in Python at Wikipedia</a></sup></p>
</div>
<div class="post-text" itemprop="text">
<p>@up:</p>
<p>Unfortunately, the</p>
<pre><code>(falseValue, trueValue)[test]
</code></pre>
<p>solution doesn't have short-circuit behaviour; thus both falseValue and trueValue are evaluated regardless of the condition. This could be suboptimal or even buggy (i.e. both trueValue and falseValue could be methods and have side-effects).</p>
<p>One solution to this would be</p>
<pre><code>(lambda: falseValue, lambda: trueValue)[test]()
</code></pre>
<p>(execution delayed until the winner is known ;)), but it introduces inconsistency between callable and non-callable objects. In addition, it doesn't solve the case when using properties.</p>
<p>And so the story goes - choosing between 3 mentioned solutions is a trade-off between having the short-circuit feature, using at least python 2.5 (IMHO not a problem anymore) and not being prone to "trueValue-evaluates-to-false" errors.</p>
</div>
<div class="post-text" itemprop="text">
<p>For Python 2.5 and newer there is a specific syntax:</p>
<pre><code>[on_true] if [cond] else [on_false]
</code></pre>
<p>In older Pythons a ternary operator is not implemented but it's possible to simulate it.</p>
<pre><code>cond and on_true or on_false
</code></pre>
<p>Though, there is a potential problem, which if <code>cond</code> evaluates to <code>True</code> and <code>on_true</code> evaluates to <code>False</code> then <code>on_false</code> is returned instead of <code>on_true</code>. If you want this behavior the method is OK, otherwise use this:</p>
<pre><code>{True: on_true, False: on_false}[cond is True] # is True, not == True
</code></pre>
<p>which can be wrapped by:</p>
<pre><code>def q(cond, on_true, on_false)
    return {True: on_true, False: on_false}[cond is True]
</code></pre>
<p>and used this way:</p>
<pre><code>q(cond, on_true, on_false)
</code></pre>
<p>It is compatible with all Python versions.</p>
</div>
<div class="post-text" itemprop="text">
<h2><strong>Ternary Operator in different programming Languages</strong></h2>
<p>Here I just try to show some important difference in <code>ternary operator</code> between a couple of programming languages.</p>
<blockquote>
<p><em>Ternary Operator in Javascript</em></p>
</blockquote>
<pre><code>var a = true ? 1 : 0;
# 1
var b = false ? 1 : 0;
# 0
</code></pre>
<blockquote>
<p><em>Ternary Operator in Ruby</em></p>
</blockquote>
<pre><code>a = true ? 1 : 0
# 1
b = false ? 1 : 0
# 0
</code></pre>
<blockquote>
<p><em>Ternary operator in Scala</em></p>
</blockquote>
<pre><code>val a = true ? 1 | 0
# 1
val b = false ? 1 | 0
# 0
</code></pre>
<blockquote>
<p><em>Ternary operator in R programming</em></p>
</blockquote>
<pre><code>a &lt;- if (TRUE) 1 else 0
# 1
b &lt;- if (FALSE) 1 else 0
# 0
</code></pre>
<blockquote>
<p><em>Ternary operator in Python</em></p>
</blockquote>
<pre><code>a = 1 if True else 0
# 1
b = 1 if False else 0
# 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You might often find</p>
<pre><code>cond and on_true or on_false
</code></pre>
<p>but this lead to problem when on_true == 0</p>
<pre><code>&gt;&gt;&gt; x = 0
&gt;&gt;&gt; print x == 0 and 0 or 1 
1
&gt;&gt;&gt; x = 1
&gt;&gt;&gt; print x == 0 and 0 or 1 
1
</code></pre>
<p>where you would expect for a  normal ternary operator this result</p>
<pre><code>&gt;&gt;&gt; x = 0
&gt;&gt;&gt; print 0 if x == 0 else 1 
0
&gt;&gt;&gt; x = 1
&gt;&gt;&gt; print 0 if x == 0 else 1 
1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Absolutely, and it is incredibly easy to understand. </p>
<pre><code>general syntax : first_expression if bool_expression_is_true else second_expression

Example: x= 3 if 3 &gt; 2 else 4 
# assigns 3 to x if the boolean expression evaluates to true or 4 if it is false
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<h1>Does Python have a ternary conditional operator?</h1>
</blockquote>
<p>Yes. From the <a href="https://docs.python.org/reference/grammar.html" rel="noreferrer">grammar file</a>:</p>
<pre><code>test: or_test ['if' or_test 'else' test] | lambdef
</code></pre>
<p>The part of interest is:</p>
<pre><code>or_test ['if' or_test 'else' test]
</code></pre>
<p>So, a ternary conditional operation is of the form:</p>
<pre><code>expression1 if expression2 else expression3
</code></pre>
<p><code>expression3</code> will be lazily evaluated (that is, evaluated only if <code>expression2</code> is false in a boolean context). And because of the recursive definition, you can chain them indefinitely (though it may considered bad style.)</p>
<pre><code>expression1 if expression2 else expression3 if expression4 else expression5 # and so on
</code></pre>
<h3>A note on usage:</h3>
<p>Note that every <code>if</code> must be followed with an <code>else</code>. People learning list comprehensions and generator expressions may find this to be a difficult lesson to learn - the following will not work, as Python expects a third expression for an else:</p>
<pre><code>[expression1 if expression2 for element in iterable]
#                          ^-- need an else here
</code></pre>
<p>which raises a <code>SyntaxError: invalid syntax</code>.
So the above is either an incomplete piece of logic (perhaps the user expects a no-op in the false condition) or what may be intended is to use expression2 as a filter - notes that the following is legal Python:</p>
<pre><code>[expression1 for element in iterable if expression2]
</code></pre>
<p><code>expression2</code> works as a filter for the list comprehension, and is <em>not</em> a ternary conditional operator.</p>
<h3>Alternative syntax for a more narrow case:</h3>
<p>You may find it somewhat painful to write the following:</p>
<pre><code>expression1 if expression1 else expression2
</code></pre>
<p><code>expression1</code> will have to be evaluated twice with the above usage. It can limit redundancy if it is simply a local variable. However, a common and performant Pythonic idiom for this use-case is to use <code>or</code>'s shortcutting behavior:</p>
<pre><code>expression1 or expression2
</code></pre>
<p>which is equivalent in semantics. Note that some style-guides may limit this usage on the grounds of clarity - it does pack a lot of meaning into very little syntax.</p>
</div>
<div class="post-text" itemprop="text">
<p>Simulating the python ternary operator.</p>
<p>For example</p>
<pre><code>a, b, x, y = 1, 2, 'a greather than b', 'b greater than a'
result = (lambda:y, lambda:x)[a &gt; b]()
</code></pre>
<p>output:</p>
<pre><code>'b greater than a'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can do this :-</p>
<h3><strong><code>[condition] and [expression_1] or [expression_2] ;</code></strong></h3>
<p>Example:-</p>
<h3><code>print(number%2 and "odd" or "even")</code></h3>
<p>This would print "odd" if the number is odd or "even" if the number is even.</p>
<hr/>
<h3><strong>The result :-</strong>  If condition is true exp_1 is executed else exp_2 is executed.</h3>
<p><strong>Note :-</strong> 0 , None , False , emptylist , emptyString evaluates as False.
And any data other than 0 evaluates to True.</p>
<h2>Here's how it works:</h2>
<p>if the condition [condition] becomes "True" then , expression_1 will be evaluated but not expression_2 .
If we "and" something with 0 (zero) , the result will always to be fasle .So in the below statement ,</p>
<pre><code>0 and exp
</code></pre>
<p>The expression exp won't be evaluated at all since "and" with 0 will always evaluate to zero and there is no need to evaluate the expression . This is how the compiler itself works , in all languages.</p>
<p>In </p>
<pre><code>1 or exp
</code></pre>
<p>the expression exp won't be evaluated at all since "or" with 1 will always be 1. So it won't bother to evaluate the expression exp since the result will be 1 anyway . (compiler optimization methods). </p>
<p>But in case of </p>
<pre><code>True and exp1 or exp2
</code></pre>
<p>The second expression exp2 won't be evaluated since <code>True and exp1</code> would be True when exp1 isn't false .</p>
<p>Similarly in </p>
<pre><code>False and exp1 or exp2
</code></pre>
<p>The expression exp1 won't be evaluated since False is equivalent to writing 0 and doing "and" with 0 would be 0 itself but after exp1 since "or" is used, it will evaluate the expression exp2 after "or" .</p>
<hr/>
<p><strong>Note:-</strong> This kind of branching using "or" and "and" can only be used when the expression_1 doesn't have a Truth value of False (or 0 or None or emptylist [ ] or emptystring ' '.) since if expression_1 becomes False , then the expression_2 will be evaluated because of the presence "or" between exp_1 and exp_2.</p>
<p><strong>In case you still want to make it work for all the cases regardless of what exp_1 and exp_2 truth values are, do this :-</strong></p>
<h3><code>[condition] and ([expression_1] or 1) or [expression_2] ;</code></h3>
</div>
<div class="post-text" itemprop="text">
<p>Ternary conditional operator simply allows testing a condition in a single line replacing the multiline if-else making the code compact.</p>
<h3>Syntax :</h3>
<blockquote>
<p>[on_true] if [expression] else [on_false] </p>
</blockquote>
<h3>1- Simple Method to use ternary operator:</h3>
<pre><code># Program to demonstrate conditional operator
a, b = 10, 20
# Copy value of a in min if a &lt; b else copy b
min = a if a &lt; b else b
print(min)  # Output: 10
</code></pre>
<h3>2- Direct Method of using tuples, Dictionary, and lambda:</h3>
<pre><code># Python program to demonstrate ternary operator
a, b = 10, 20
# Use tuple for selecting an item
print( (b, a) [a &lt; b] )
# Use Dictionary for selecting an item
print({True: a, False: b} [a &lt; b])
# lamda is more efficient than above two methods
# because in lambda  we are assure that
# only one expression will be evaluated unlike in
# tuple and Dictionary
print((lambda: b, lambda: a)[a &lt; b]()) # in output you should see three 10
</code></pre>
<h3>3- Ternary operator can be written as nested if-else:</h3>
<pre><code># Python program to demonstrate nested ternary operator
a, b = 10, 20
print ("Both a and b are equal" if a == b else "a is greater than b"
        if a &gt; b else "b is greater than a")
</code></pre>
<p>Above approach can be written as:</p>
<pre><code># Python program to demonstrate nested ternary operator
a, b = 10, 20
if a != b:
    if a &gt; b:
        print("a is greater than b")
    else:
        print("b is greater than a")
else:
    print("Both a and b are equal") 
# Output: b is greater than a
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>More a tip than an answer (don't need to repeat the obvious for the hundreth time), but I sometimes use it as a oneliner shortcut in such constructs:</p>
<pre><code>if conditionX:
    print('yes')
else:
    print('nah')
</code></pre>
<p>, becomes:</p>
<pre><code>print('yes') if conditionX else print('nah')
</code></pre>
<p>Some (many :) may frown upon it as unpythonic (even, ruby-ish :), but I personally find it more natural - i.e. how you'd express it normally, plus a bit more visually appealing in large blocks of code.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>In [1]: a = 1 if False else 0

In [2]: a
Out[2]: 0

In [3]: b = 1 if True else 0

In [4]: b
Out[4]: 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, you can use it that way : </p>
<pre><code>is_fat = True
state = "fat" if is_fat else "not fat"
</code></pre>
<blockquote>
<p>Read more about <a href="http://pythoncentral.io/one-line-if-statement-in-python-ternary-conditional-operator/" rel="noreferrer">ternary conditional operator</a></p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<pre><code>a if condition else b
</code></pre>
<p>Just memorize this pyramid if you have trouble remembering:</p>
<pre><code>     condition
  if           else
a                   b 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>YES, python have a ternary operator, here is the syntax and an example code to demonstrate the same :)</p>
<pre><code>#[On true] if [expression] else[On false]
# if the expression evaluates to true then it will pass On true otherwise On false


a= input("Enter the First Number ")
b= input("Enter the Second Number ")

print("A is Bigger") if a&gt;b else print("B is Bigger")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes.</p>
<pre><code>&gt;&gt;&gt; b = (True if 5 &gt; 4 else False)
&gt;&gt;&gt; print b
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Syntax:
The Ternary operator will be given as:</p>
<pre><code>[on_true] if [expression] else [on_false]
</code></pre>
<p>e.g</p>
<pre><code>x, y = 25, 50
big = x if x &lt; y else y
print(big)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Many programming languages derived from <code>C</code> usually have the following syntax of ternary conditional operator:</p>
<pre><code>&lt;condition&gt; ? &lt;expression1&gt; : &lt;expression2&gt;
</code></pre>
<blockquote>
<p>At first, the <code>Python</code> <strong>B</strong>enevolent <strong>D</strong>ictator <strong>F</strong>or <strong>L</strong>ife (I mean Guido van Rossum, of course) rejected it (as non-Pythonic style), since it's quite hard to understand for people not used to <code>C</code> language. Also, the colon sign <strong><code>:</code></strong> already has many uses in <code>Python</code>. After <strong>PEP 308</strong> was approved, <code>Python</code> finally received its own shortcut conditional expression (what we use now):</p>
</blockquote>
<pre><code>&lt;expression1&gt; if &lt;condition&gt; else &lt;expression2&gt;
</code></pre>
<p>So, firstly it evaluates the condition. If it returns <code>True</code>, <strong>expression1</strong> will be evaluated to give the result, otherwise <strong>expression2</strong> will be evaluated. Due to <strong><em>Lazy Evaluation</em></strong> mechanics – only one expression will be executed.</p>
<p>Here are some examples (conditions will be evaluated from left to right):</p>
<pre><code>pressure = 10
print('High' if pressure &lt; 20 else 'Critical')

# Result is 'High'
</code></pre>
<p>Ternary operators can be chained in series:     </p>
<pre><code>pressure = 5
print('Normal' if pressure &lt; 10 else 'High' if pressure &lt; 20 else 'Critical')

# Result is 'Normal'
</code></pre>
<p>The following one is the same as previous one:</p>
<pre><code>pressure = 5

if pressure &lt; 20:
    if pressure &lt; 10:
        print('Normal')
    else:
        print('High')
else:
    print('Critical')

# Result is 'Normal'
</code></pre>
<p>Hope this helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>One of the alternatives to Python's <a href="https://mail.python.org/pipermail/python-dev/2005-September/056846.html" rel="nofollow noreferrer">conditional expression</a> is the following:</p>
<pre><code>{True:"yes", False:"no"}[boolean]
</code></pre>
<p>which has the following nice extension:</p>
<pre><code>{True:"yes", False:"no", None:"maybe"}[boolean_or_none]
</code></pre>
<p>The shortest alterative remains:</p>
<pre><code>("no", "yes")[boolean]
</code></pre>
<p>but there is no alternative if you want to avoid the evaluation of both <code>yes()</code> and <code>no()</code> in the following:</p>
<pre><code>yes() if [condition] else no()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The operator is "conditional". Ternary just means that it takes three operands. We don't call + the "binary" + operator. There is no reason to keep doing this with conditional. Whether it is faster or more compact than if-else is beside the point. What matters is that it is an expression, allowing it to be embedded in other expressions. Properly used, it reduces redundancy and opportunities for hard-to-spot differences.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes:</p>
<p>Let’s say you want to give variable x some value if some bool is true and likewise </p>
<p><code>x = 5 if something else x = 10</code></p>
<p><code>x = [some value] if [if this is true first value evaluates] else [other value evaluates]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>if variable is defined and you want to check if it has value you can just <code>a or b</code></p>
<pre><code>def test(myvar=None):
    # shorter than: print myvar if myvar else "no Input"
    print myvar or "no Input"

test()
test([])
test(False)
test('hello')
test(['Hello'])
test(True)
</code></pre>
<p>will output</p>
<pre><code>no Input
no Input
no Input
hello
['Hello']
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use expression syntax for ternary operator in python:</p>
<pre><code>a if condition else b
</code></pre>
<p>Where 'a' is first(default) result i.e when condtion is true, and 'b' is second result i.e when condition is false.</p>
<pre><code>x=10
result='even number' if x%2==0 else 'odd number'
print(result)
</code></pre>
<p>The output of above code will be:
'even number'</p>
</div>
<span class="comment-copy">Though Pythons older than 2.5 are slowly drifting to history, here is a list of old pre-2.5 ternary operator tricks: <a href="http://c2.com/cgi/wiki?PythonIdioms" rel="nofollow noreferrer">"Python Idioms", search for the text 'Conditional expression'</a> . <a href="http://en.wikipedia.org/wiki/Ternary_operation#Python" rel="nofollow noreferrer">Wikipedia</a> is also quite helpful Ж:-)</span>
<span class="comment-copy">In the Python 3.0 official documentation referenced in a comment above, this is referred to as "conditional_expressions" and is very cryptically defined.  That documentation doesn't even include the term "ternary", so you would be hard-pressed to find it via Google unless you knew exactly what to look for.  The <a href="http://docs.python.org/2/reference/expressions.html#conditional-expressions" rel="nofollow noreferrer">version 2 documentation</a> is somewhat more helpful and includes a link to <a href="http://www.python.org/dev/peps/pep-0308/" rel="nofollow noreferrer">"PEP 308"</a>, which includes a lot of interesting historical context related to this question.</span>
<span class="comment-copy">"ternary" (having three inputs) is a consequential property of this impelmentation, not a defining property of the concept. eg:  SQL has <code>case [...] { when ... then ...} [ else ... ] end</code> for a similar effect but not at all ternary.</span>
<span class="comment-copy">also ISO/IEC 9899 (the C programming language standard) section 6.5.15 calls it the "the condtitional operator"</span>
<span class="comment-copy">Wikipedia covers this thoroughly in the article "<a href="https://en.wikipedia.org/wiki/%3F:#Python" rel="nofollow noreferrer">?:</a>".</span>
<span class="comment-copy">The order may seems strange for coders however <code>f(x) = |x| = x if x &gt; 0 else -x</code> sounds very natural to mathematicians. You may also understand it as do A in most case, except when C then you should do B instead...</span>
<span class="comment-copy">Be careful with order of operations when using this. For example, the line <code>z = 3 + x if x &lt; y else y</code>. If <code>x=2</code> and <code>y=1</code>, you might expect that to yield 4, but it would actually yield 1. <code>z = 3 + (x if x &gt; y else y)</code> is the correct usage.</span>
<span class="comment-copy">The point was if you want to perform additional evaluations <i>after</i> the conditional is evaluated, like adding a value to the result, you'll either need to add the additional expression to both sides (<code>z = 3 + x if x &lt; y else 3 + y</code>), or group the conditional (<code>z = 3 + (x if x &lt; y else y)</code> or <code>z = (x if x &lt; y else y) + 3</code>)</span>
<span class="comment-copy">@Pred try <code>print("OK" if status else "NOT OK")</code></span>
<span class="comment-copy">I love the vague irony of this syntactic ordering being described as natural by someone called @yota.</span>
<span class="comment-copy">Note that this one always evaluates everything, whereas the if/else construct only evaluates the winning expression.</span>
<span class="comment-copy"><code>(lambda: print("a"), lambda: print("b"))[test==true]()</code></span>
<span class="comment-copy">It should be noted that what's within the <code>[]</code>s can be an arbitrary expression. Also, for safety you can explicitly test for truthiness by writing <code>[bool(&lt;expression&gt;)]</code>. The <code>bool()</code> function has been around since v2.2.1.</span>
<span class="comment-copy">This is great for code-golf, not so much for actual code. Although I have gotten so used to it that I do use it sometimes for conciseness when doing something obvious like picking between two string constants.</span>
<span class="comment-copy">I've done a similar trick -- only once or twice, but done it -- by indexing into a dictionary with <code>True</code> and <code>False</code> as the keys:  <code>{True:trueValue, False:falseValue}[test]</code>  I don't know whether this is any less efficient, but it does at least avoid the whole "elegant" vs. "ugly" debate.  There's no ambiguity that you're dealing with a boolean rather than an int.</span>
<span class="comment-copy">The remedy is to use (test and [true_value] or [false_value])[0], which avoids this trap.</span>
<span class="comment-copy">Ternary operator usually executes faster(sometimes by 10-25%).</span>
<span class="comment-copy">@volcano Do you have source for me?</span>
<span class="comment-copy">@OrangeTux <a href="https://tio.run/##bcoxCoAwEETRPqeY0kCwsPQ2kmR1QZOwWQtPH4OClQO/GV65dMtpao2PkkURuBoTIoEG76AOZGeDPol6SoKCCR5xrxH0yvVfeiwpdJ/lgVzH3kDWFOGk37Ha1m4" rel="nofollow noreferrer">Here's the disassembled code</a>. Using the method ThomasH suggested would be even slower.</span>
<span class="comment-copy">What's the difference between this and the top answer?</span>
<span class="comment-copy">This one emphasizes the primary intent of the ternary operator: value selection. It also shows that more than one ternary can be chained together into a single expression.</span>
<span class="comment-copy">@Craig , I agree, but it's also helpful to know what will happen when there are no parentheses. In real code, I too would tend to insert explicit parens.</span>
<span class="comment-copy">Somehow, I'm able to understand this better than the top answer.</span>
<span class="comment-copy"><code>result = {1: x, 0: y}[a &gt; b]</code> is another possible variant (<code>True</code> and <code>False</code> are actually integers with values <code>1</code> and <code>0</code>)</span>
<span class="comment-copy">While the tuple of lambdas trick works, it takes roughly 3x as long as the ternary operator.  It's only likely to be a reasonable idea if it can replace a long chain of <code>if else if</code>.</span>
<span class="comment-copy">The behaviour is not identical - <code>q("blob", on_true, on_false)</code> returns <code>on_false</code>, whereas <code>on_true if cond else on_false</code> returns <code>on_true</code>. A workaround is to replace <code>cond</code> with <code>cond is not None</code> in these cases, although that is not a perfect solution.</span>
<span class="comment-copy">Why not <code>bool(cond)</code> instead of <code>cond is True</code>?  The former checks the truthiness of <code>cond</code>, the latter checks for pointer-equality with the <code>True</code> object.  As highlighted by @AndrewCecil, <code>"blob"</code> is truthy but it <code>is not True</code>.</span>
<span class="comment-copy">Wow, that looks really hacky! :) Technically, you can even write <code>[on_false, on_True][cond is True]</code> so the expression becomes shorter.</span>
<span class="comment-copy">There is no short circuit in this answer.  If on_true and on_false are expensive to call this is a bad answer.</span>
<span class="comment-copy">This <a href="https://archive.is/yqwSh" rel="nofollow noreferrer">blogger found python's ternary operator to be unnecessarily different than most other languages</a>.</span>
<span class="comment-copy">Ruby works also with <code>a = true ? 1 : 0</code></span>
<span class="comment-copy">"Now you can see the beauty of python language. its highly readable and maintainable." I don't see the relevance of this sentence, nor how the ternary operator syntax demonstrates it.</span>
<span class="comment-copy">It may sound opinionated; but what it essentially says is that it the Python syntax is likely to be understood by a person who never saw a ternary operator, while very few people will understand the more usual syntax unless they have been told first what it means.</span>
<span class="comment-copy">Algol68:  a=.if. .true. .then. 1 .else. 0 .fi. This may be expressed also a=(.true.|1|0)  As usual Algol68 is an improvement over its successors.</span>
<span class="comment-copy">Just not easy to actually use if your project limits line width. :(</span>
<span class="comment-copy"><code>expression1 or expression2</code> being similar and with the same drawbacks/positives as <code>expression1 || expression2</code> in javascript</span>
<span class="comment-copy">Thanks, @selurvedu - it can be confusing until you get it straight. I learned the hard way, so your way might not be as hard. ;) Using if without the else, at the end of a generator expression or list comprehension will filter the iterable. In the front, it's a ternary conditional operation, and requires the else. Cheers!!</span>
<span class="comment-copy">@AaronHall Although your use of metasyntactic <code>expressionN</code> for all instances is consistent, it might be easier to understand with naming that distinguished the conditional test expression from the two result expressions; eg, <code>result1 if condition else result2</code>. This is especially evident when nesting (aka chaining): <code>result1 if condition1 else result2 if condition2 else result3</code>. See how much better that reads this way?</span>
<span class="comment-copy">@tchrist thanks for the review - if you look at the revision history, this post currently has two revisions. Most of my other answers, especially the top ones, have been revisited again and again. This answer never gets my attention because the community wiki status gives me no credit for the content, and so I never see any votes on it. As I don't really have time for an edit on this right now, frog knows when it will come to my attention again in the future. I can see you've edited the top answer, so feel free to borrow/quote my material from this post in that one (and cite me if apropos!)</span>
<span class="comment-copy">Why not simply <code>result = (y, x)[a &lt; b]</code> Why do you uses <code>lambda</code> function <b>?</b></span>
<span class="comment-copy">@GrijeshChauhan Because on "compliated" expressions, e. g. involving a function call etc., this would be executed in both cases. This might not be wanted.</span>
<span class="comment-copy">If you want to use that in the context of <code>x = [condition] and ([expression_1] or 1) or [expression_2]</code> and <code>expression_1</code> evaluates to false, <code>x</code> will be <code>1</code>, not <code>expression_1</code>. Use the accepted answer.</span>
<span class="comment-copy">Note that the ternary operator is smaller (in memory) and faster than the nested if.  Also, your nested <code>if-else</code> isn't actually a rewrite of the ternary operator, and will produce different output for select values of a and b (specifically if one is a type which implements a weird <code>__ne__</code> method).</span>
<span class="comment-copy">I prefer <code>print( 'yes' if conditionX else 'nah' )</code> over your answer. :-)</span>
<span class="comment-copy">That is if you want to <code>print()</code> in both cases - and it looks a bit more pythonic, I have to admit :) But what if the expressions/functions are not the same - like <code>print('yes') if conditionX else True</code> - to get the <code>print()</code> only in truthy <code>conditionX </code></span>
<span class="comment-copy">To add to Frederick99's remark, another reason to avoid <code>print('yes') if conditionX else print('nah')</code> is that it gives a SyntaxError in Python2.</span>
<span class="comment-copy">The only reason it gives a syntax error is because in Python 2 print is a statement - <code>print "yes"</code>, while in Python 3 it is a function - <code>print("yes")</code>. That can be resolved by either using it as a statement, or better - <code>from future import print_function</code>.</span>
<span class="comment-copy">I have added a one line statement example to check which number is big to elaborate it further</span>
<span class="comment-copy"><code>print</code> is really not a good choice, as this will give a SyntaxError in Python2.</span>
<span class="comment-copy">@Thierry Lathuille here I used print() function not print statement, print function is for Python 3 while print statement is for Python 2</span>
<span class="comment-copy">The question has already been asked on SO, just try it with Python 2 and you will see by yourself. 'print('hello') is a perfectly valid syntax in Python 2.7, but the way it is parsed makes your code above throw a SyntaxError.</span>
<span class="comment-copy">What is the correct one please tell</span>
<span class="comment-copy">the code here is incorrect, <code>big</code> will be assigned the smaller number</span>
<span class="comment-copy">While useful for similar problems, this is not a ternary conditional.  It works to replace <code>x if x else y</code>, but not <code>x if z else y</code>.</span>
