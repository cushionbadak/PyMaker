<div class="post-text" itemprop="text">
<p>I have a even length tuple having elements like <code>('a','b','c','d','e','f')</code> which I want to convert to dictionary having elements like <code>['a':'b', 'c':'d', 'e':'f']</code>.</p>
<p>I tried using <code>dict(tuple)</code> but that wasn't helping. I have just started learning Python and any help will be highly appreciable.</p>
</div>
<div class="post-text" itemprop="text">
<p>It looks like you're trying to group the tuple into pairs, and then make a dict out of those pairs. There are two ways to do this. </p>
<hr/>
<p>The first is zipping slices:</p>
<pre><code>zip(t[::2], t[1::2])
</code></pre>
<p>This is called an "extended slice", which is of the form <code>start:stop:step</code>. The first one is <code>::2</code>, so it has the default start (the beginning of the tuple) and stop (the end of the tuple), and a step of 2, so it gets elements 0, 2, and 4. The second one is <code>1::2</code>, so it's the same, but it starts at 1 instead of the default, so it gets elements 1, 3, and 5.</p>
<p>See the tutorial section on <a href="https://docs.python.org/3/tutorial/introduction.html#lists" rel="nofollow">Lists</a> for more details. (Of course you're using a tuple, not a list, but they both slice the same way.)</p>
<hr/>
<p>The second is zipping an iterator with itself:</p>
<pre><code>i = iter(t)
zip(i, i)
</code></pre>
<p>Since the two references to <code>i</code> are both the same iterator, whenever you advance one, it advances both. So, the first one gets #0, then the second gets #1, then the first gets #2, the second #3, and so on.</p>
<p>See the tutorial section on <a href="https://docs.python.org/3.4/tutorial/classes.html#iterators" rel="nofollow">Iterators</a> for more details. Also see <a href="http://stupidpythonideas.blogspot.com/2013/08/how-grouper-works.html" rel="nofollow">How grouper works</a>, which explains a more general version of this idea (or at least tries to).</p>
<hr/>
<p>Either way, you get <code>('a', 'b')</code>, then <code>('c', 'd')</code>, then <code>('e', 'f')</code>, so you can just pass that to <code>dict</code>:</p>
<pre><code>dict(zip(t[::2], t[1::2]))
</code></pre>
<hr/>
<p>So, which one is better?</p>
<p>Slicing is probably easier to understand. It's also usually faster.</p>
<p>However, slicing doesn't work on arbitrary iterables, just sequences, it wastes memory on big inputs (you're essentially making a complete extra copy of the sequence), and it's a little harder to generalize.</p>
<p>You should learn how both of them work so you can choose appropriately.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <em>dict comprehension</em>:</p>
<pre><code>t = ('a','b','c','d','e','f')
d = {t[i]:t[i+1] for i in range(0,len(t),2)}
</code></pre>
<hr/>
<p>Note that the part </p>
<pre><code>range(0,len(t),2)
</code></pre>
<p>will generate a list of the form</p>
<pre><code>[0, 2, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>t = ('a','b','c','d','e','f')
dict(t[i:i+2] for i in xrange(0, len(t), 2))
=&gt; {'a': 'b', 'c': 'd', 'e': 'f'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; tup = ('a','b','c','d','e','f')
&gt;&gt;&gt; dct = dict(zip(tup[::2], tup[1::2]))
{'a': 'b', 'c': 'd', 'e', 'f'}
</code></pre>
<p>This should do the trick</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def tup2dict():
    tup = ('a','b','c','d','e','f')
    print ({i:j for (i,j) in zip(tup,tup[1:])[::2]})
</code></pre>
<p>Thanks to <a href="https://stackoverflow.com/questions/5389507/iterating-over-every-two-elements-in-a-list">iterating-over-every-two-elements-in-a-list</a> and <a href="https://stackoverflow.com/questions/14507591/python-dictionary-comprehension">python-dictionary-comprehensionn</a>.</p>
</div>
<span class="comment-copy">The dict comprehension is just extra verbosity for no reason here; if you already have an iterable of 2-element iterables, you can just call <code>dict</code> on it.</span>
