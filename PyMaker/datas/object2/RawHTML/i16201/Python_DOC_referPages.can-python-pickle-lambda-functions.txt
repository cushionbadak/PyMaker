<div class="post-text" itemprop="text">
<p>I have read in a number of threads that Python <code>pickle</code>/<code>cPickle</code> cannot pickle lambda functions. However the following code works, using Python 2.7.6:</p>
<pre><code>import cPickle as pickle

if __name__ == "__main__":
    s = pickle.dumps(lambda x, y: x+y)
    f = pickle.loads(s)
    assert f(3,4) == 7
</code></pre>
<p>So what is going on? Or, rather, what is the limit of pickling lambdas?</p>
<p>[EDIT]
I think i know why this code runs. I forgot (sorry!) i am running stackless python, which has a form of micro-threads called tasklets executing a function. These tasklets can be halted, pickled, unpickled and continued, so i guess (asked on the stackless mailing list) that it also provides a way to pickle function bodies.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, python can pickle lambda functionsâ€¦ but only if you have something that uses <code>copy_reg</code> to register <strong>how</strong> to pickle lambda functions -- the package <code>dill</code> loads the <code>copy_reg</code> you need into the pickle registry for you, when you <code>import dill</code>.</p>
<pre><code>Python 2.7.8 (default, Jul 13 2014, 02:29:54) 
[GCC 4.2.1 Compatible Apple Clang 4.1 ((tags/Apple/clang-421.11.66))] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 
&gt;&gt;&gt; import dill  # the code below will fail without this line
&gt;&gt;&gt; 
&gt;&gt;&gt; import pickle
&gt;&gt;&gt; s = pickle.dumps(lambda x, y: x+y)
&gt;&gt;&gt; f = pickle.loads(s)
&gt;&gt;&gt; assert f(3,4) == 7
&gt;&gt;&gt; f
&lt;function &lt;lambda&gt; at 0x10aebdaa0&gt;
</code></pre>
<p>get dill here: <a href="https://github.com/uqfoundation">https://github.com/uqfoundation</a></p>
</div>
<div class="post-text" itemprop="text">
<p>No, Python can't pickle lambda functions:</p>
<pre><code>&gt;&gt;&gt; import cPickle as pickle
&gt;&gt;&gt; s = pickle.dumps(lambda x,y: x+y)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/copy_reg.py", line 70, in _reduce_ex
    raise TypeError, "can't pickle %s objects" % base.__name__
TypeError: can't pickle function objects
</code></pre>
<p>Not sure what you did that succeeded...</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Python can pickle lambdas.</strong> We will cover Python 2 and 3 separately as implementation of pickle are different in different Python versions.</p>
<ul>
<li><strong>Python 2.7</strong></li>
</ul>
<p><code>pickle</code> uses <strong>pickle registry</strong> which is nothing but a mapping from <code>type</code> to the function to use for serializing (pickling) objects of that type.
You can see <strong>pickle registry</strong> as:</p>
<pre><code>&gt;&gt; pickle.Pickler.dispatch

{bool: &lt;function pickle.save_bool&gt;,
 instance: &lt;function pickle.save_inst&gt;,
 classobj: &lt;function pickle.save_global&gt;,
 float: &lt;function pickle.save_float&gt;,
 function: &lt;function pickle.save_global&gt;,
 int: &lt;function pickle.save_int&gt;,
 list: &lt;function pickle.save_list&gt;,
 long: &lt;function pickle.save_long&gt;,
 dict: &lt;function pickle.save_dict&gt;,
 builtin_function_or_method: &lt;function pickle.save_global&gt;,
 NoneType: &lt;function pickle.save_none&gt;,
 str: &lt;function pickle.save_string&gt;,
 tuple: &lt;function pickle.save_tuple&gt;,
 type: &lt;function pickle.save_global&gt;,
 unicode: &lt;function pickle.save_unicode&gt;}
</code></pre>
<p>To pickle custom types, Python provides <code>copy_reg</code> module to register our functions. You can read more about it <a href="https://docs.python.org/3/library/copyreg.html" rel="noreferrer">here</a>. By default, <code>copy_reg</code>module supports pickling of the following additional types:</p>
<pre><code>&gt;&gt; import copy_reg
&gt;&gt; copy_reg.dispatch_table

{code: &lt;function ipykernel.codeutil.reduce_code&gt;,
 complex: &lt;function copy_reg.pickle_complex&gt;,
 _sre.SRE_Pattern: &lt;function re._pickle&gt;,
 posix.statvfs_result: &lt;function os._pickle_statvfs_result&gt;,
 posix.stat_result: &lt;function os._pickle_stat_result&gt;}
</code></pre>
<p>Now, type of <code>lambda</code> functions is <code>types.FunctionType</code>. However, the builtin function for this type <code>function: &lt;function pickle.save_global&gt;</code> is not able to serialize lambda functions. Therefore, all third party libraries like <code>dill</code>, <code>cloudpickle</code>, etc override the inbuilt method to serialize lambda functions with some additional logic. Let's import <code>dill</code> and see what it does.</p>
<pre><code>&gt;&gt; import dill
&gt;&gt; pickle.Pickler.dispatch

{_pyio.BufferedReader: &lt;function dill.dill.save_file&gt;,
 _pyio.TextIOWrapper: &lt;function dill.dill.save_file&gt;,
 _pyio.BufferedWriter: &lt;function dill.dill.save_file&gt;,
 _pyio.BufferedRandom: &lt;function dill.dill.save_file&gt;,
 functools.partial: &lt;function dill.dill.save_functor&gt;,
 operator.attrgetter: &lt;function dill.dill.save_attrgetter&gt;,
 operator.itemgetter: &lt;function dill.dill.save_itemgetter&gt;,
 cStringIO.StringI: &lt;function dill.dill.save_stringi&gt;,
 cStringIO.StringO: &lt;function dill.dill.save_stringo&gt;,
 bool: &lt;function pickle.save_bool&gt;,
 cell: &lt;function dill.dill.save_cell&gt;,
 instancemethod: &lt;function dill.dill.save_instancemethod0&gt;,
 instance: &lt;function pickle.save_inst&gt;,
 classobj: &lt;function dill.dill.save_classobj&gt;,
 code: &lt;function dill.dill.save_code&gt;,
 property: &lt;function dill.dill.save_property&gt;,
 method-wrapper: &lt;function dill.dill.save_instancemethod&gt;,
 dictproxy: &lt;function dill.dill.save_dictproxy&gt;,
 wrapper_descriptor: &lt;function dill.dill.save_wrapper_descriptor&gt;,
 getset_descriptor: &lt;function dill.dill.save_wrapper_descriptor&gt;,
 member_descriptor: &lt;function dill.dill.save_wrapper_descriptor&gt;,
 method_descriptor: &lt;function dill.dill.save_wrapper_descriptor&gt;,
 file: &lt;function dill.dill.save_file&gt;,
 float: &lt;function pickle.save_float&gt;,
 staticmethod: &lt;function dill.dill.save_classmethod&gt;,
 classmethod: &lt;function dill.dill.save_classmethod&gt;,
 function: &lt;function dill.dill.save_function&gt;,
 int: &lt;function pickle.save_int&gt;,
 list: &lt;function pickle.save_list&gt;,
 long: &lt;function pickle.save_long&gt;,
 dict: &lt;function dill.dill.save_module_dict&gt;,
 builtin_function_or_method: &lt;function dill.dill.save_builtin_method&gt;,
 module: &lt;function dill.dill.save_module&gt;,
 NotImplementedType: &lt;function dill.dill.save_singleton&gt;,
 NoneType: &lt;function pickle.save_none&gt;,
 xrange: &lt;function dill.dill.save_singleton&gt;,
 slice: &lt;function dill.dill.save_slice&gt;,
 ellipsis: &lt;function dill.dill.save_singleton&gt;,
 str: &lt;function pickle.save_string&gt;,
 tuple: &lt;function pickle.save_tuple&gt;,
 super: &lt;function dill.dill.save_functor&gt;,
 type: &lt;function dill.dill.save_type&gt;,
 weakcallableproxy: &lt;function dill.dill.save_weakproxy&gt;,
 weakproxy: &lt;function dill.dill.save_weakproxy&gt;,
 weakref: &lt;function dill.dill.save_weakref&gt;,
 unicode: &lt;function pickle.save_unicode&gt;,
 thread.lock: &lt;function dill.dill.save_lock&gt;}
</code></pre>
<p>Now, let's try to pickle lambda function.</p>
<pre><code>&gt;&gt; pickle.loads(pickle.dumps(lambda x:x))
&lt;function __main__.&lt;lambda&gt;&gt;
</code></pre>
<p>It WORKS!!  </p>
<p>In Python 2 we have two versions of <code>pickle</code> - </p>
<pre><code>import pickle # pure Python version
pickle.__file__ # &lt;install directory&gt;/python-2.7/lib64/python2.7/pickle.py

import cPickle # C extension
cPickle.__file__ # &lt;install directory&gt;/python-2.7/lib64/python2.7/lib-dynload/cPickle.so
</code></pre>
<p>Now, let's try to pickle lambda with C implementation <code>cPickle</code>.</p>
<pre><code>&gt;&gt; import cPickle
&gt;&gt; cPickle.loads(cPickle.dumps(lambda x:x))
TypeError: can't pickle function objects
</code></pre>
<p>What went wrong? Let's see the dispatch table of <code>cPickle</code>.</p>
<pre><code>&gt;&gt; cPickle.Pickler.dispatch_table
AttributeError: 'builtin_function_or_method' object has no attribute 'dispatch_table'
</code></pre>
<p>The implementation of <code>pickle</code> and <code>cPickle</code> is different. <code>Importing</code> dill makes only Python version of <code>pickle</code> work. The disadvantage of using <code>pickle</code> instead of <code>cPickle</code> is that it can be as much as <strong>1000 times</strong> slower than cPickle.</p>
<ul>
<li><strong>Python 3.6</strong></li>
</ul>
<p>In Python 3, there is no module named <code>cPickle</code>. We have <code>pickle</code> instead which also doesn't support pickling of <code>lambda</code> functions by default. Let's see it's dispatch table:</p>
<pre><code>&gt;&gt; import pickle
&gt;&gt; pickle.Pickler.dispatch_table
&lt;member 'dispatch_table' of '_pickle.Pickler' objects&gt;
</code></pre>
<p>Wait. I tried looking up <strong>dispatch_table</strong> of <code>pickle</code> not <code>_pickle</code>. <code>_pickle</code> is the alternative and faster C implementation of pickle. But we haven't imported it yet! This C implementation is imported automatically, if it is available, at the end of pure Python <code>pickle</code> module.</p>
<pre><code># Use the faster _pickle if possible
try:
    from _pickle import (
        PickleError,
        PicklingError,
        UnpicklingError,
        Pickler,
        Unpickler,
        dump,
        dumps,
        load,
        loads
    )
except ImportError:
    Pickler, Unpickler = _Pickler, _Unpickler
    dump, dumps, load, loads = _dump, _dumps, _load, _loads
</code></pre>
<p>We are still left with the question of pickling lambdas in Python 3. The answer is you <strong>CAN'T</strong> with the native <code>pickle</code> or <code>_pickle</code>. You will need to import <code>dill</code> or <a href="https://github.com/cloudpipe/cloudpickle" rel="noreferrer">cloudpickle</a> and use that instead of the native pickle module.</p>
<pre><code>&gt;&gt; import dill
&gt;&gt; dill.loads(dill.dumps(lambda x:x))
&lt;function __main__.&lt;lambda&gt;&gt;
</code></pre>
<p>I hope this clears all the doubts.</p>
</div>
<span class="comment-copy">Could not replicate - in 2.7.6 (on OS X 10.9.4) I get <code>TypeError: can't pickle function objects</code>.</span>
<span class="comment-copy">try pickle.loads from an other script; I think you pickle the reference to lambda wich, in the same scope, is preserved in memory and called.</span>
<span class="comment-copy">Just to know, which version of cPickle are you using?</span>
<span class="comment-copy">@Lars: <code>stackless</code> does exactly what <code>dill</code> does, in generalâ€¦ the major difference is that <code>stackless</code> replaces the call stack in C, while <code>dill</code> tries to register serialization functions using <code>ctypes</code> to work at the C layer as possible. <code>Stackless</code> can serialize all objects.</span>
<span class="comment-copy">I've tried on python3       In [1]: import dill      In [2]: import pickle     In [3]: pickle.dumps(lambda x: (x+1, x+2))     ---------------------------------------------------------------------------     PicklingError                             Traceback (most recent call last)     &lt;ipython-input-3-924e2f4cc7e0&gt; in &lt;module&gt;()     ----&gt; 1 pickle.dumps(lambda x: (x+1, x+2))      PicklingError: Can't pickle &lt;function &lt;lambda&gt; at 0x7f08ee40ca60&gt;: attribute lookup &lt;lambda&gt; on <b>main</b> failed.  It only works if you import dill as pickle</span>
<span class="comment-copy">@Ramast: you are correct -- in python3, you currently have to <code>import dill as pickle</code>.  In python2, what I have above works either way you do it.</span>
<span class="comment-copy">seems to not work for arbitrary functions</span>
<span class="comment-copy">@CharlieParker: Can you elaborate? The above should work for most "arbitrary" functions.</span>
<span class="comment-copy">The answer is incorrect for Python 3.6 as it is - use <code>dill.dumps()</code> and <code>dill.loads()</code> instead.</span>
<span class="comment-copy">I don't know why this comment is down voted. pickle can't serialize lambdas only dill package can</span>
<span class="comment-copy">Why can't python pickle lambdas?</span>
