<div class="post-text" itemprop="text">
<p>Lets say I have a 2 word combination:</p>
<pre><code>two flowers
</code></pre>
<p>I want to map possible combinations of these words programatically.  I have the following pseudocode combinations:</p>
<pre><code>{fw}{lw}  (firstword, last word)
{fw} {lw}  (firstword, space, last word)
......
</code></pre>
<p>What is the best way in python to build up a shorthand notation like above, what data structure should it be stored in, and finally how would one map:</p>
<pre><code> two flowers x [{fw}{lw},{fw} {lw}] -&gt; ['twoflowers','two flowers'] etc
</code></pre>
<p>I'm sorry this is kind of an open ended question. I'm pretty new to python and not sure how to approach this problem, so any advice would be appreciated. I put square brackets around the structures even though lists may not be the best data structure to use here.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you've described is already built into Python (unless you're somehow on a version before 2.6):</p>
<pre><code>&gt;&gt;&gt; '{fw} {lw}'.format(fw='hello', lw='world')
'hello world'
</code></pre>
<p>or equivalently</p>
<pre><code>&gt;&gt;&gt; inputs = {'fw': 'hello', 'lw': 'world'}
&gt;&gt;&gt; '{fw} {lw}'.format(**inputs)
'hello world'
</code></pre>
<p>(The <code>**</code> here takes a dict and uses it to set a function's keyword arguments.)  See the <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow">standard library documentation</a> for more.</p>
<p>To iterate over a number of formats, you can use a standard for loop, or to be slick a <em>list comprehension</em>:</p>
<pre><code>&gt;&gt;&gt; format_strings = ['{fw}{lw}', '{fw} {lw}']
&gt;&gt;&gt; [format_string.format(**inputs) for format_string in format_strings]
['helloworld', 'hello world']
</code></pre>
<p><strong>Update:</strong> upon rereading your question it sounds like you might prefer the positional version of the above, which looks like this:</p>
<pre><code>&gt;&gt;&gt; '{0} {1}'.format('hello', 'world')
'hello world'
&gt;&gt;&gt; inputs = ['hello', 'world']  # or 'hello world'.split()
&gt;&gt;&gt; '{0} {1}'.format(*inputs)
'hello world'
</code></pre>
<p>The <code>*</code> is a lot like the <code>**</code>: instead of using a dict to set keyword arguments, it is using a list (or tuple) to set positional arguments.</p>
</div>
<div class="post-text" itemprop="text">
<p>The first thing that comes to mind is a dictionary of tuples.</p>
<pre><code>yourdict = {'two flowers': ('twoflowers','two flowers')}
</code></pre>
<p>To get there, you could just regex out the space between. If it's only two words, and there should be only one space, it shouldn't be difficult to do.</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe you can try something like this:</p>
<pre><code>dict_combinations = {"{fw}{lw}":lambda x : x.replace(" ", ""), "{fw} {lw}": lambda x:" ".join(x.split())}

list_words = ["text flower", "hello friend"]
result =[map(method, list_words) for key,method in dict_combinations.iteritems()]
</code></pre>
</div>
<span class="comment-copy">thanks for such a detailed answer</span>
<span class="comment-copy">Thanks Tim, I was simplifying , but I'm going to have many2 -3 words and there could be a dozen or so permutations which I want to be able to write a shorthand notation for.</span>
<span class="comment-copy">thank you, that is very hepful</span>
