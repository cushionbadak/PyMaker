<div class="post-text" itemprop="text">
<p>So my assignment has been easy up to this point. Useing Python 3</p>
<p>GetSale - Finds the maximum expected value of selling a stock. The expected sale value of a stock is the current profit minus the future value of the stock:
Expected Sale value = ( ( Current Price - Buy Price ) - Risk * CurrentPrice ) * Shares
The GetSale function should calculate this value for each stock in the portfolio, and return the stock symbol with the highest expected sale value.</p>
<p>We are using 3 separate dictionaries: Names, Prices and Exposure.</p>
<p>For the GetSale I know I need to call the Prices and Exposure dictionaries to get the values for the equation; however, I have no idea how to get those values and run them. </p>
<p>so far this is the code:</p>
<pre><code>Names = {}
Prices = {}
Exposure = {}

def AddName():
    name = input('Please enter the company name: ')
    stock_symbol = input('Please enter the comapny stock symbol: ')
    Names[name] = stock_symbol

def AddPrices():
    stock_symbol = input('Please enter the company stock symbol: ')
    Buy_Price = float(input('Please enter the buy price: '))
    Current_Price = float(input('Please enter the current price: '))
    Prices[stock_symbol] = 'Buy_Price:', [Buy_Price], 'Current Price', [Current_Price]

def AddExposure():
    stock_symbol = input('Please enter the company stock symbol: ')
    Risk = float(input('Please enter the risk of the stock: '))
    Shares = float(input('Please enter the shares of the stock: '))
    Exposure[stock_symbol] = 'Risk:', [Risk], 'Shares:', [Shares]

def AddStock():
    AddName()
    AddPrices()
    AddExposure()
</code></pre>
<p>I know that it must somehow be done with a loop since it will have the run the equation over and over to find the greatest Expected Sale Value and then it will return the Stock Symbol of the greatest one.</p>
<pre><code>def GetSale():
    for stock_symbol, Buy_Price, Current_Price in Prices.items():
</code></pre>
<p>P.S. I'm sorry if it isn't very clear and specific I tried to make it to the point so please forgive me its only my second post.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>How do I get values from a dictionary</p>
</blockquote>
<pre><code>d.values()
</code></pre>
<blockquote>
<p>run them through an equation</p>
</blockquote>
<pre><code>(equation(value) for value in d.values())
</code></pre>
<blockquote>
<p>and return the key with the greatest value</p>
</blockquote>
<p>Here's where it gets interesting. You need the keys and values together for that. So let's start over.</p>
<blockquote>
<p>How do I get keys and values from a dictionary</p>
</blockquote>
<pre><code>d.items()
</code></pre>
<blockquote>
<p>run the values through an equation</p>
</blockquote>
<pre><code>((equation(v), k) for k, v in d.items())
</code></pre>
<blockquote>
<p>and return the key with the greatest value</p>
</blockquote>
<pre><code>max((equation(v), k) for k, v in d.items())
</code></pre>
<blockquote>
<p>no, the key, not the value and key</p>
</blockquote>
<pre><code>max((equation(v), k) for k, v in d.items())[1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def addName(names):
    names[input("Enter company name: ")] = input("Enter Stock Symbol: ")

def addPrices(prices):
    symbol = input("Enter stock symbol: ")
    prices[symbol] = {}
    prices[symbol]['buy'] = input("Enter buy price: ")
    prices[symbol]['current'] = input("Enter current price: ")

def addExposure(exposure):
    symbol = input("Enter stock symbol: ")
    exposure[symbol] = {}
    exposure[symbol]['risk'] = input("Enter stock risk: ")
    exposure[symbol]['shares'] = input("Enter stock shares: ")

def getSale(names, prices, exposure):
    return names[max(names, key=lambda name: ((prices[names[name]]['current'] - prices[names[name]]['buy']) - exposure[names[name]]['risk']*prices[names[name]]['current']) * exposure[names[name]]['shares'])]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So, you want to run the values through an equation and get the value of the greatest key? Here's a program:</p>
<pre><code># I'm just going to name your dictionary myDict
for i in myDict:
    myDict[i] = whatever_your_equation_is(myDict[i])
return myDict.keys[myDict.values().index(max(myDict.values()))]
</code></pre>
<p>I'm sorry if this didn't answer your question. This is your 2nd question and this is my third answer!</p>
</div>
<span class="comment-copy">which version of python are you using?</span>
<span class="comment-copy">is Prices dictionary containing company name and a list of prices?</span>
<span class="comment-copy">The Prices dictionary is only containing a company symbol and a list of the Buy Price and Current Price.  so its company symbol: Buy Price, Current Price</span>
<span class="comment-copy">Please simplify your example. What do YOU think <code>Names = {} Prices = {} Exposure = {}</code> will be, should be? Once those are what they should be, what is the expected output? 99% of the time, you answer your own question.</span>
<span class="comment-copy">@dawg well the user will end up adding information to the dictionary.</span>
<span class="comment-copy">I will be calling values from 2 separate dictionaries to run in the equation.  so could you do something like this      ((equation(V1, V2), K1, K2 for k1, k2, V1, V2 in d1,d2.items())</span>
<span class="comment-copy">@Code2200: No, you can't quite do that. But look at the <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> function; it's not much harder, you just need to <code>zip(d1.items(), d2.items())</code>, and deal with the fact that you get a 2-element tuple of 2-element tuples rather than a 4-element tuple.</span>
<span class="comment-copy">Could you explain a bit more on how the equation would fix in there?</span>
<span class="comment-copy">so what I have is       <code>max((((Current_Price - Buy_Price)-Risk*Current_Price)*Shares(Current_Price, Buy_Price, Risk, Shares), stock_symbol), Current_Price, Buy_Price, Risk, Shares in zip(Prices.items(), Exposure.items()))[1]</code></span>
<span class="comment-copy">If you can't figure out how to do it in a comprehension, it's generally easier to break it out into an explicit loop (possibly using a generator function, or building up a list and then looping over it afterward, if either of those feels more natural to you). You can always turn it back into a comprehension after it works. So, start with <code>for i1, i2 in zip(d1.items(), d2.items())</code>, then you can print out what each <code>i1</code> and <code>i2</code> is and figure out how you'd use that, and write the next line, and so on.</span>
