<div class="post-text" itemprop="text">
<p>When printing a floating point variable in Python 3 like this:</p>
<pre><code>str(1318516946165810000000000.123123123)
</code></pre>
<p>The output is:</p>
<pre><code>1.31851694616581e+24
</code></pre>
<p>Is there a simple way in the standard lib (not Numpy) to print the same thing with only 32 bit float precision? (or more general any precision)</p>
<p>Be aware precision != places, like in Decimal</p>
<p>EDIT</p>
<p>The result should should be a string like str does but with a limited precision for example:
32 bit representation of the above float: </p>
<pre><code>1.31851e+24
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I may have misunderstood, but is using <code>format</code> with a suitable precision modifier what you are asking for?</p>
<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; "{0:6g}".format(1.31851694616581e24)
'1.31852e+24'
</code></pre>
<p>Change the <code>6</code> to control the number of significant figures</p>
</div>
<span class="comment-copy">You mean you want to truncate the decimal representation of a float so that it doesn't give a false impression of accuracy?</span>
<span class="comment-copy">Yes, while still ensuring that the result would represent a valid 32 bit float (or any bit precision, like 24 bit), the goal is a string and not the actual python float. I hopend that there would be another way than to manually parse the string again and ensuring said restricitions</span>
<span class="comment-copy">So you want a lossless function that can turn a float into a string and back? Does it have to be human readable?</span>
<span class="comment-copy">I'm gonna edit the question to clarify</span>
<span class="comment-copy">-Done (filler text to make comment length long enough)</span>
<span class="comment-copy">'g' rounds the number to x significant digits (not bits), does not guarantee a valid representation for a 32-bit float, see <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a> for details, what could happen is that the float would have a higher or lower value with 6 digits than would be allowed for a x-bit float, none of the format string modifiers looks for bit length</span>
<span class="comment-copy">OK, thanks for the clarification, sorry my answer's not a lot of help to you.</span>
<span class="comment-copy">But it can be used in my use case when no further validation is required and a small loss of precision can be ignored, accepting as 'near enough' because there seems no sensible one-liner in the standard lib</span>
