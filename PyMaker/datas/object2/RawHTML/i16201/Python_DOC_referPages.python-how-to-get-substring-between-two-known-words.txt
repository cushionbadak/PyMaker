<div class="post-text" itemprop="text">
<p>The text is like:</p>
<pre><code>&lt;CUSTOMER_ID COL_ID&gt;="4000.01"&gt;79997/CUSTOMER_ID&gt;

&lt;CUSTOMER_ID COL_ID&gt;="4000.01"&gt;799/CUSTOMER_ID&gt; 
</code></pre>
<p>I want to get the number of "79997" and "799"</p>
<p>how to do it in Python?</p>
<p>I am doing PySpark to process XML file</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/2/library/re.html#re.findall" rel="nofollow">re.findall</a> using a positive lookbehind assertion:</p>
<pre><code>s  ='&lt;CUSTOMER_ID COL_ID="4000.01"&gt;79997&lt;/CUSTOMER_ID&gt;&lt;CUSTOMER_ID COL_ID="4000.01"&gt;799&lt;/CUSTOMER_ID&gt;'
data = re.findall(r"(?&lt;=&gt;)(\d+)&lt;",s)
print sum(map(int,data))
80796
</code></pre>
<p>Finds <code>d\+</code> one or more digits preceded by a <code>&gt;</code> and followed by a <code>&lt;</code></p>
</div>
<div class="post-text" itemprop="text">
<p>If you're parsing XML, you should be using <a href="https://docs.python.org/3/library/xml.dom.minidom.html" rel="nofollow">an XML parser</a>.</p>
<p>For example, you can read a file like this</p>
<pre><code>&lt;root&gt;
    &lt;CUSTOMER_ID COL_ID="4000.01"&gt;79997&lt;/CUSTOMER_ID&gt;
    &lt;CUSTOMER_ID COL_ID="4000.01"&gt;799&lt;/CUSTOMER_ID&gt; 
&lt;/root&gt;
</code></pre>
<p>by using</p>
<pre><code>import xml.dom.minidom
with open("test.xml") as f:
    doc=xml.dom.minidom.parse(f)
result = []
for item in doc.getElementsByTagName("CUSTOMER_ID"):
    result.append(item.firstChild.data)
</code></pre>
<p>which gives you</p>
<pre><code>&gt;&gt;&gt; result
['79997', '799']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the words are known you can use the string.replace() method:</p>
<pre><code>s2 = s1.replace("foo1", "foo2")
</code></pre>
<p>Will replace all occurrences of "foo1" in s1 with "foo2" and store the result in s2. </p>
<p>For your particular scenario, you can replace the known words with blank strings and then cast the result to an integer:</p>
<pre><code>#store string in s1
s1 = 'CUSTOMER_ID COL_ID="4000.01"&gt;79997&lt;/CUSTOMER_ID&gt;'
#replace known strings with blank strings and cast result to integer, store value in s2
s2 = int(s1.replace('CUSTOMER_ID COL_ID="4000.01"&gt;', '').replace('&lt;/CUSTOMER_ID&gt;', ''))
print s2

79997
</code></pre>
<p>I learned it's best to always use string methods when possible and to avoid diving into the re module unless necessary.</p>
</div>
<span class="comment-copy">Are you guaranteed to have this format? So you're looking to grab the number between the first <code>&gt;</code> and the second <code>&lt;</code>?</span>
<span class="comment-copy">That's not valid XML, by the way - I guess the <code>&gt;</code> after <code>COL_ID</code> isn't really there, is it? Also, there's a <code>&lt;</code> missing before <code>/</code>. @Cyber: Could it be that your edits are the cause?</span>
<span class="comment-copy">the edits changed the format</span>
<span class="comment-copy">It's really great! I runed as : re.findall(r"(?&lt;=&gt;)(\d+)&lt;",x)[0], However, does it restrict how many digits? I calculate the max number of ID. The result is "999999". Actually it should be "1722342"</span>
<span class="comment-copy">oh, I found the problem. My data actually is like "&lt;CUSTOMER_ID COL_ID="4000.01"&gt;79997&lt;/CUSTOMER_ID&gt;"</span>
