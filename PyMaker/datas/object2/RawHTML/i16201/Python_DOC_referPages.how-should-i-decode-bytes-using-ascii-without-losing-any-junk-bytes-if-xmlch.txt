<div class="post-text" itemprop="text">
<p>I have a network resource which returns me data that should (according to the specs) be an ASCII encoded string. But in some rare occasions, I get junk data.</p>
<p>One resource for example returns <code>b'\xd3PS-90AC'</code> whereas another resource, for the same key returns <code>b'PS-90AC'</code></p>
<p>The first value contains a non-ASCII string. Clearly a violation of the spec, but that's unfortunately out of my control. None of us are 100% certain that this really <em>is</em> junk or data which should be kept.</p>
<p>The application calling on the remote resources saves the data in a local database for daily use. I could simply do a <code>data.decode('ascii', 'replace')</code> or <code>..., 'ignore')</code> but then I would lose data which could turn out to be useful later on.</p>
<p>My immediate reflex was to use <code>'xmlcharrefreplace'</code> or <code>'backslashreplace'</code> as error handler. Simply because it would result in a displayable string. But then I get the following error: <code>TypeError: don't know how to handle UnicodeDecodeError in error callback</code></p>
<p>The only error-handler which worked was <code>surrogateescape</code>, but this seems to be intended for filenames. On the other hand, for <em>my</em> intent and purpose it would work.</p>
<p>Why are <code>'xmlcharrefreplace'</code> and <code>'backslashreplace'</code> not working? I don't understand the error.</p>
<p>For <em>example</em>, an expected execution would be:</p>
<pre><code>&gt;&gt;&gt; data = b'\xd3PS-90AC'
&gt;&gt;&gt; new_data = data.decode('ascii', 'xmlcharrefreplace')
&gt;&gt;&gt; print(repr(new_data))
'&amp;#d3;PS-90AC'
</code></pre>
<p>This is a <em>contrived</em> example. My aim is to <em>not lose</em> any data. If I would use the <code>ignore</code> or <code>replace</code> error-handler, the byte in question would essentially disappear, and information is lost.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; data = b'\xd3PS-90AC'
&gt;&gt;&gt; data.decode('ascii', 'surrogateescape')
'\udcd3PS-90AC'
</code></pre>
<p>It does not use <em>html entities</em> but it is a decent starting point. If not sufficient, you will have to register your own error handler using <a href="https://docs.python.org/3/library/codecs.html#codecs.register_error" rel="nofollow">codecs.register_error</a> I assume.</p>
<p>For Python3:</p>
<pre><code>def handler(err):
    start = err.start
    end = err.end
    return ("".join(["&amp;#{0};".format(err.object[i]) for i in range(start,end)]),end)

import codecs
codecs.register_error('xmlcharreffallback', handler)
data = b'\xd3PS-90AC'
data.decode('ascii', 'xmlcharreffallback')
</code></pre>
<p>For Python 2</p>
<pre><code>def handler(err):
    start = err.start
    end = err.end
    return (u"".join([u"&amp;#{0};".format(ord(err.object[i])) for i in range(start,end)]),end)

import codecs
codecs.register_error('xmlcharreffallback', handler)
data = b'\xd3PS-90AC'
data.decode('ascii', 'xmlcharreffallback')
</code></pre>
<p>Both producing:</p>
<pre><code>'&amp;#211;PS-90AC'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For completeness, wanted to add that as of python 3.5, <code>backslashreplace</code> works for decoding, so you no longer have to add a custom error handler.</p>
</div>
<span class="comment-copy">I don't clearly understand what is the expected "output". You want the "ASCII" string <i>and</i> the "junk" bytes together (say <code>u'\u00d3PS-90AC'</code>) ? Or something like the result of <code>data.decode('unicode_escape')</code> ?</span>
<span class="comment-copy">I added some example execution. Not that the example output comes a bit from the top of my head. If it uses a different syntax, that's okay.</span>
<span class="comment-copy">I add the tag Python3 as this is implied by your example. Or am I wrong?</span>
<span class="comment-copy">It's okayish ;) as <code>surrogateescape</code> and <code>backslashreplace</code> only exist in Python3. At the moment the library I am writing is still in use by <i>one</i> Python 2 application, so a Python2 solution would be preferred, but we are planning to port that one remaining app to Python3 eventually. So it's okay... Worst case, we have to port it <i>now</i> :)</span>
<span class="comment-copy">I have been reading up on the topic. And I'm not sure anymore if my original idea to use <code>xmlcharrefreplace</code> is such a good idea. The referenced value points to a "Unicode code point". And by looking up <code>211</code>, I found <code>È‘</code> (utf-8 byte value <code>c8 91</code>). So I'm not sure how you would get back from <code>211</code> to <code>\xd3</code>. And I think using <code>surrogateescape</code> might be less ambiguous... :\</span>
<span class="comment-copy">Maybe we are focusing too much on "how" without really knowing "what" you are trying to do. Wouldn't it time for an other question :) ?</span>
<span class="comment-copy">@exhuma BTW <code>211</code>(10) is <code>d3</code>(16). This would be not much more than a simple dec-&gt;hex conversion. That being said, I would personally push toward using Unicode code point. But once angin without clarification on your usage of that "junkie string", it is hard to tell.</span>
<span class="comment-copy">you're right. I think I've been looking too much at bytes the last two days. I probably should take a break.</span>
