<div class="post-text" itemprop="text">
<p>I'd like to convert numbers (int, float) into strings with Python 3.  If I sort the strings alphanumerically, the result should be correct also numerically.  This is the wishlist:</p>
<ul>
<li><code>1</code> =&gt; <code>"001"</code></li>
<li><code>10</code> =&gt; <code>"010"</code></li>
<li><code>100</code> =&gt; <code>"100"</code></li>
<li><code>5.6</code> =&gt; <code>"005.6"</code></li>
</ul>
<p>I can make sure that the numbers are smaller than 1000.  If it helps, I can also guarantee that there is at most one digit after the decimal point.</p>
<p>I can code a function that does this.  But can this also be achieved with <code>.format()</code> magic?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could also switch on the <code>type</code> intead, eg:</p>
<pre><code>for i in (1, 10, 100, 5.6): 
    print(format(i, {float: '05.1f', int: '03'}[type(i)]))
</code></pre>
<p>Result:</p>
<pre><code>001
010
100
005.6
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you need to handle floats, then you are better of with using the <a href="https://docs.python.org/3/library/stdtypes.html#str.zfill" rel="nofollow"><code>str.zfill()</code> method</a>, after partitioning of the decimal value first:</p>
<pre><code>def pad_number(num):
    num = str(num).partition('.')
    return ''.join((num[0].zfill(3),) + num[1:])
</code></pre>
<p>Here <a href="https://docs.python.org/3/library/stdtypes.html#str.partition" rel="nofollow"><code>str.partition()</code></a> gives us a tuple of 3 elements, with the latter two empty if there was no decimal point. This gives us the opportunity to zero-pad just the integer portion of the numbers.</p>
<p>If you don't need to handle floating point values, then <code>format()</code> would have been an excellent tool:</p>
<pre><code>format(intnum, '03d')
</code></pre>
<p>but that truncates the floating point value, and for floats you'd have to use a <em>different</em> format string, one that varies with the number of decimals you need to include.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; def pad_number(num):
...     num = str(num).partition('.')
...     return ''.join((num[0].zfill(3),) + num[1:])
... 
&gt;&gt;&gt; for i in (1, 10, 100, 5.6):
...     print(pad_number(i))
... 
001
010
100
005.6
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from math import trunc
from math import log10

def pad_number_sequence(seq, prec=1):
    """Convert a sequence of numbers to a list of zero-padded strings.

    The number of decimals in the converted floats is controlled by prec.

    Depending on the size of the numbers in the sequence the width
    will be dynamically calculated so that the resulting string
    representation will align.
    """
    digits_left_of_decimal = trunc(log10(max(abs(x) for x in seq))) + 1
    width = digits_left_of_decimal + prec + 2  # 1 decimal point, 1 sign
    num2str = { float: "{number:0= {width}.{prec}f}",
                int: "{number:0= {width}}", }
    return [num2str[type(n)].format(number=n, prec=prec, width=width) 
            for n in seq]


# Example use.
lnum = [0, 1, 3.1415, -3.1415, 10, 100, -1, 999.9, 234.32, -98.99, -999.9, -999.9]
print('Aligned numbers:')
for s in pad_number_sequence(lnum):
    print(s)

# Sorting is best done by adding a sorting key.
print(sorted(pad_number_sequence(lnum), key=lambda x: float(x)))
</code></pre>
<p>Running this will produce the output:</p>
<pre><code>Aligned numbers:
 00000
 00001
 003.1
-003.1
 00010
 00100
-00001
 999.9
 234.3
-099.0
-999.9
-999.9
['-999.9', '-999.9', '-099.0', '-003.1', '-00001', ' 00000', ' 00001', ' 003.1', ' 00010', ' 00100', ' 234.3', ' 999.9']
</code></pre>
</div>
<span class="comment-copy">Float numbers should be handled as such? That makes this all a bit.. trickier.</span>
<span class="comment-copy">What should happen with numbers that are longer? What should happen to floating point numbers with more digits after the decimal?</span>
<span class="comment-copy">Also... what's the reason you wish to have them as strings to sort them numerically... What you'd normally do is just right-align them in a field large enough to hold their <code>str</code>/<code>repr</code> values and sort that as text instead...</span>
<span class="comment-copy">What about negative numbers?  Or very large numbers like 6.023E23 ?</span>
<span class="comment-copy">I clarified the question concerning additional constraints for the numbers.  Somehow, this got lost in editing (it used to be there ...).</span>
<span class="comment-copy">The problem is mostly that you don't know how many decimals are going to be included. You could use <code>05g</code> instead of <code>05.1f</code> for example, but then what if you wanted to format <code>5.75</code> instead?</span>
<span class="comment-copy">By using <code>str()</code> instead, I can format the whole number part <i>independently</i>.</span>
<span class="comment-copy">@Martijn indeed... if that's needed... given the example input/output - that may or may not be required and this is what this answer is based on :)... Pondering what should happen with <code>123.456</code> or even <code>1234.567</code></span>
