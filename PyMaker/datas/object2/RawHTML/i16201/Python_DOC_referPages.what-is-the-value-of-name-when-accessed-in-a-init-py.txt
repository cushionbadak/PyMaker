<div class="post-text" itemprop="text">
<p>My current understanding is that, when one writes <code>from foo import bar</code>, <code>foo</code> which is a package and has <code>__init__.py</code>, will have its <code>__init__.py</code> automatically processed after which its resource <code>bar</code> will be imported. If from the command prompt, I write <code>python manage.py</code>, and in that module call <code>from foo import bar</code>, in the <code>__init__.py</code> which belongs to foo package, is the variable <code>__name__</code> then equal to the package name? foo in this case?</p>
</div>
<div class="post-text" itemprop="text">
<p>In the <code>__init__</code> module of a package, <code>__name__</code> is set to the name of the package; e.g. what the module is stored under in <code>sys.modules</code>.</p>
<p>For a package <code>foo</code>, <code>__name__</code> is set to <code>'foo'</code>:</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.mkdir('foo')
&gt;&gt;&gt; open('foo/__init__.py', 'w').write('print "__name__:", __name__')
&gt;&gt;&gt; open('foo/bar.py', 'w').write('# nothing done here')
&gt;&gt;&gt; from foo import bar
__name__: foo
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.modules['foo']
&lt;module 'foo' from 'foo/__init__.py'&gt;
&gt;&gt;&gt; sys.modules['foo'].__name__
'foo'
</code></pre>
<p>Note that <em>each Python module</em> has such a <code>__name__</code> variable; even the initial script. If you run <code>python manage.py</code> the initial script is loaded as the <code>__main__</code> module, so *in <code>manage.py</code> the name is set to <code>'__main__'</code>; this name does not change with what is imported by the script.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>__name__</code> belongs to the local scope (attribute) of the module that you call with python, ie: in this case <code>manage.py</code>.</p>
</div>
<span class="comment-copy">This wouldn't be difficult to determine with a simple experiment.  Try writing the value of <code>__name__</code> and see what it is!</span>
<span class="comment-copy">Is this documented anywhere? (I believe it, I just couldn't find it in writing anywhere to cite while I was writing an answer of my own.)</span>
<span class="comment-copy">@chepner: In Python 2, how packages are handled during importing is rather sparsely documented in different locations. Python 3 <a href="https://docs.python.org/3/reference/import.html#regular-packages" rel="nofollow noreferrer">does make it explicit</a>: <i>When a regular package is imported, this <code>__init__.py</code> file is implicitly executed, and the objects it defines are bound to names in the packageâ€™s namespace.</i>; and <a href="https://docs.python.org/3/reference/import.html#__name__" rel="nofollow noreferrer"><code>__name__</code> is defined as the fully qualified name of the module</a>.</span>
<span class="comment-copy">@chepner: Since <code>__init__.py</code> is implicitly loaded, and bound to the package's namespace (and not one of its own), the fully qualified name is that of the package.</span>
<span class="comment-copy">The question asks about <code>__name__</code> <b>in <code>foo/__init__.py</code></b>, not in <code>manage.py</code>. Because <code>manage.py</code> is the main entry script, <code>__name__</code> will be set to <code>'__main__'</code> instead.</span>
