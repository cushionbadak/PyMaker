<div class="post-text" itemprop="text">
<p>I have a list o tuples:</p>
<pre><code>list = [(element1, element2, element3), (elementelel4, element5, elementelement6), (el7, el8, elel9)]
</code></pre>
<p>I want to print it as a table (so the distance between elements should be the same):</p>
<pre><code>HEADER1       HEADER2    HEADER3
element1      element2   element3
elementelel4  element5   elementelement6
el7           el8        elel9
</code></pre>
<p>I was trying to use some examples which I found, but it was used to print a list of lists, and I have a list of tuples.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/2/library/string.html#format-specification-mini-language" rel="noreferrer">Format Specification Mini-Language</a> </p>
<pre><code>print "HEADER1       HEADER2    HEADER3"
for ele1,ele2,ele3 in l:
    print "{:&lt;14}{:&lt;11}{}".format(ele1,ele2,ele3)

HEADER1       HEADER2    HEADER3
element1      element2   element3
elementelel4  element5   elementelement6
el7           el8        elel9
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>ljust</code> for left-aligning the element within a fixed width</p>
<pre><code>column_width=20
for row in list:             
    for el in row:         
        print el.ljust(column_width), 
    print
</code></pre>
<p><strong>output</strong></p>
<pre><code>element1             element2             element3            
elementelel4         element5             elementelement6     
el7                  el8                  elel9  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assume that, all tuples in the list is of the same length, you can use this:</p>
<pre><code>l = [('element1', 'element2', 'element3'), ('elementelel4', 'element5', 'elementelement6'), ('el7', 'el8', 'elel9')]
width = max(len(e) for t in l for e in t[:-1]) + 1 
format=('%%-%ds' % width) * len(l[0])
print '\n'.join(format % tuple(t) for t in l)
</code></pre>
<p>Output:</p>
<pre><code>element1     element2     element3
elementelel4 element5     elementelement6
el7          el8          elel9
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python 3 solution:</p>
<pre><code>L = [('element1', 'element2', 'element3'),  
     ('elementelel4', 'element5', 'elementelement6'),  
     ('el7', 'el8', 'elel9')]

max_length_column = []
element_in_tuple = 3

for i in range(elements_in_tuple):
    max_length_column.append(max(len(e[i])+2 for e in L))    

for e in L:
    for i in range(element_in_tuple):
        print(e[i].ljust(max_length_column[i]), end='')
    print()
</code></pre>
<p>output:</p>
<pre><code>element1      element2  element3         

elementelel4  element5  elementelement6  

el7           el8       elel9  
</code></pre>
</div>
<span class="comment-copy"><i>"it was used to print a list of lists, and I have a list of tuples"</i> - I wouldn't expect that to make much difference. Where is your modification of these examples, and what exactly is wrong with it?</span>
<span class="comment-copy">Also available in python3 <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
<span class="comment-copy">you could set a fixed column_width, but I guess that's not what OP wants.</span>
<span class="comment-copy">this does not match the OP's code</span>
<span class="comment-copy">you shouldn't use a fixed <code>width</code>.</span>
<span class="comment-copy">@laike9m what do you mean by fixed width?</span>
<span class="comment-copy">see my answer..</span>
<span class="comment-copy">@laike9m Forgive me, it's too complex and I can't understand.</span>
<span class="comment-copy">Your final print should not have an '\n' in it since that leaves an empty line between your output rows</span>
<span class="comment-copy">Also, your code has a bug in it. The line:  for i in range(len(L)):  should be replaced by:  for i in range(elements_in_tuple):  The reason it works this way is because the length of L happens to be 3, which is also the number of elements in the tuple.  You can also calculate the elements_in_tuple by taking the len() of the first element in L</span>
<span class="comment-copy">edit welcome :)</span>
