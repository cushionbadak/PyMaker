<div class="post-text" itemprop="text">
<p>I am using Mock 1.0.1 python.
In the path function definition there are two optional arguments names spec and spec_set (also auto_spec)</p>
<pre><code>patch(target, new=DEFAULT, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs)
</code></pre>
<p>I have read through the documentation, but find no explanation of them. Maybe they are terms of testing? It will be nice if someone can give information, thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/unittest.mock.html" rel="noreferrer"><code>unittest.mock</code></a> in Python 3.x is basically same with <a href="http://pypi.python.org/pypi/mock" rel="noreferrer"><code>mock</code></a>.</p>
<p>According to the <code>unittest.mock</code> documentation:</p>
<blockquote>
<p><strong>spec</strong>: This can be either a list of strings or an existing object (a
  class or instance) that acts as the specification for the mock object.
  If you pass in an object then a list of strings is formed by calling
  dir on the object (excluding unsupported magic attributes and
  methods). Accessing any attribute not in this list will raise an
  AttributeError.</p>
<p>If spec is an object (rather than a list of strings) then __class__
  returns the class of the spec object. This allows mocks to pass
  isinstance tests.</p>
<p><strong>spec_set</strong>: A stricter variant of spec. If used, attempting to set or
  get an attribute on the mock that isn’t on the object passed as
  spec_set will raise an AttributeError.</p>
</blockquote>
<hr/>
<p><strong>Update</strong> Difference between <code>spec</code> and <code>spec_set</code>.</p>
<p>With <code>spec</code>, you can set attribute that is not specified, while with <code>spec_set</code>, it is not allowed to set unspecified attribute.</p>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; from unittest.mock import Mock
&gt;&gt;&gt; class A:
...     def __init__(self, a, b):
...         self.a = a
...         self.b = b
...
&gt;&gt;&gt; aobj = A(1, 2)



&gt;&gt;&gt; m = Mock(spec=aobj)   # spec
&gt;&gt;&gt; m.c   # get -&gt; fail
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/local/Cellar/python3/3.6.0b4_3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/unittest/mock.py", line 582, in __getattr__
    raise AttributeError("Mock object has no attribute %r" % name)
AttributeError: Mock object has no attribute 'c'
&gt;&gt;&gt; m.c = 9  # set -&gt; success
&gt;&gt;&gt;




&gt;&gt;&gt; m = Mock(spec_set=aobj)   # spec_set
&gt;&gt;&gt; m.a
&lt;Mock name='mock.a' id='4544967400'&gt;
&gt;&gt;&gt; m.b
&lt;Mock name='mock.b' id='4545493928'&gt;
&gt;&gt;&gt; m.c   # get -&gt; fail
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/local/Cellar/python3/3.6.0b4_3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/unittest/mock.py", line 582, in __getattr__
    raise AttributeError("Mock object has no attribute %r" % name)
AttributeError: Mock object has no attribute 'c'
&gt;&gt;&gt; m.c = 9  # set -&gt; fail
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/local/Cellar/python3/3.6.0b4_3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/unittest/mock.py", line 688, in __setattr__
    raise AttributeError("Mock object has no attribute '%s'" % name)
AttributeError: Mock object has no attribute 'c'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can find more info here: <a href="http://www.voidspace.org.uk/downloads/mock-1.0.1.pdf" rel="nofollow">http://www.voidspace.org.uk/downloads/mock-1.0.1.pdf</a></p>
<blockquote>
<p>• spec: This can be either a list of strings or an existing object (a class or instance) that acts as the specification for the mock object. If you pass in an object then a list of strings is formed by calling dir on the object (excluding unsupported magic attributes and methods). Accessing any attribute not in this list will raise an AttributeError. If spec is an object (rather than a list of strings) then <strong>class</strong> returns the class of the spec object. This allows mocks to pass isinstance tests.</p>
<p>• spec_set: A stricter variant of spec. If used, attempting to set or get an attribute on the mock that isn’t on the object passed as spec_set will raise an AttributeError.</p>
</blockquote>
</div>
<span class="comment-copy">How are they different then - since it says that using spec will raise an Attribute Error on any attribute which is set/get that isn't in the spec, and spec_set says the same thing.</span>
<span class="comment-copy">@falsetru The OP is asking for clarifications on the documentation, please provide them to answer the question. Note: the documentation is perfectly unclear to me as well, and examples are not really helping.</span>
<span class="comment-copy">@TonySuffolk66, with <code>spec</code>, you can set the missing attribute. But with <code>spec_set</code>, it is not allowed to set missing attribute.</span>
<span class="comment-copy">@lajarre, My bad. Please read above comment. or see this example: <a href="https://gist.github.com/falsetru/3ae96d2138f78b103b03daf99fd4d0d2" rel="nofollow noreferrer">gist.github.com/falsetru/3ae96d2138f78b103b03daf99fd4d0d2</a></span>
<span class="comment-copy">@lajarre, I updated the answer to address the issue. Thank you for your feedback.</span>
