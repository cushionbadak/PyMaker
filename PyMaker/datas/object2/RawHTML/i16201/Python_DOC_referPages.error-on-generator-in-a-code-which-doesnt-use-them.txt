<div class="post-text" itemprop="text">
<p>I'm not a pyton guru, so the question could be nobby as hell...</p>
<p>I'm trying to create a little rubiks cube simulator in python. And I got the following weird error.</p>
<pre><code>File "./cube.py", line 168, in &lt;module&gt;
    c.R()
  File "./cube.py", line 105, in R
    self.sync_temp()
  File "./cube.py", line 118, in sync_temp
    self.oBack = deepcopy(self.Back)
  File "/usr/lib/python3.2/copy.py", line 147, in deepcopy
    y = copier(x, memo)
  File "/usr/lib/python3.2/copy.py", line 209, in _deepcopy_list
    y.append(deepcopy(a, memo))
  File "/usr/lib/python3.2/copy.py", line 174, in deepcopy
    y = _reconstruct(x, rv, 1, memo)
  File "/usr/lib/python3.2/copy.py", line 285, in _reconstruct
    y = callable(*args)
  File "/usr/lib/python3.2/copyreg.py", line 88, in __newobj__
    return cls.__new__(cls, *args)
TypeError: object.__new__(generator) is not safe, use generator.__new__()
</code></pre>
<p>After some reading, I found out that error comes when trying to copy a generator but... I don't!</p>
<p>I made a lot of deepcopy in the project due to some issue with python's passing by ref</p>
<p>I noticed the error show up in really strange situation:</p>
<p>If I Remove two calls of rotate_clockwise function : the error disappear. And the error show ups only when those calls arme madre from function yinv. The error isn't caused directly when I make those calls, but when I try to make a deepcopy after.
If I call from R() function, I don't have any issues.</p>
<p>I give you the functions code:</p>
<pre><code>        def rotate_clockwise(self, face):
            c_face = deepcopy(face)
            temp_face = [(c_face[k][i] for k in reversed(range(0, self.size))) for i in range(0,self.size)]
            return temp_face


        def sync_temp(self):
            self.oUp = deepcopy(self.Up)
            self.oFront = deepcopy(self.Front)
            self.oBack = deepcopy(self.Back)
            self.oLeft = deepcopy(self.Left)
            self.oRight = deepcopy(self.Right)
            self.oDown = deepcopy(self.Down)

        def yinv(self):
            self.nFront = self.Left
            self.nLeft = self.Back
            self.nBack = self.Right
            self.nRight = self.Front
            self.nDown = self.rotate_clockwise(self.Down)
            self.nUp = self.rotate_clockwise(self.Up)
            self.remap()

        def R(self):
            self.sync_temp()
            self.nRight = self.rotate_clockwise(self.Right)
            self.nUp = self.set_col(self.Front, self.oUp, self.size-1)
            self.nBack = self.set_col(self.Up, self.oBack, self.size-1)
            self.nDown = self.set_col(self.Back, self.oDown, self.size-1)
            self.nFront = self.set_col(self.Down, self.oFront, self.size-1)
            self.nLeft = self.Left
            self.remap()


        def set_col(self, src, target, col_id):
            temp = deepcopy(target)
            for i in range(0,self.size):
                    temp[i][col_id] = src[i][col_id]
            return temp
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In this line:</p>
<pre><code>temp_face = [(c_face[k][i] for k in reversed(range(0, self.size))) for i in range(0,self.size)]
</code></pre>
<p>… you're creating a list of generators. Because this:</p>
<pre><code>(c_face[k][i] for k in reversed(range(0, self.size)))
</code></pre>
<p>… is a generator expression.</p>
<p>If you wanted this to be a list, use a list comprehension instead of a generator expression:</p>
<pre><code>[c_face[k][i] for k in reversed(range(0, self.size))]
</code></pre>
<p>If you wanted it to be lazy, then that means you wanted it to be a generator, which means you can't deepcopy it. You have to instead write a function that copies everything else, and recreates the generator (and maybe advances it to the same state) instead of copying it.</p>
</div>
<span class="comment-copy">Following the MVCE approach of taking away everything possible until you have only the minimum code necessary to cause your error would probably solve your problem. It would also make your question far less likely to be downvoted and closed.</span>
<span class="comment-copy">Similar problem: <a href="http://stackoverflow.com/questions/1401610/python-copy-deepcopy-produces-an-error" title="python copy deepcopy produces an error">stackoverflow.com/questions/1401610/…</a></span>
<span class="comment-copy">@Wiwiweb I've read it, that was how I undersood my problem was with generators</span>
<span class="comment-copy">I'll try that, even if I barely see how transform it in a list comprehension</span>
<span class="comment-copy">@CarlierRobin: The tutorial explains <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehensions</a> pretty nicely. If you don't understand the comprehension, rewrite it as an explicit loop around <code>append</code>. The tutorial also explains generator expressions in the three sections starting with <a href="https://docs.python.org/3/tutorial/classes.html#iterators" rel="nofollow noreferrer">iterators</a>, but loosely, you can think of a generator expression as a comprehension without the square brackets, which builds the list lazily on demand instead of all at once.</span>
