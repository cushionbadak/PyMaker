<div class="post-text" itemprop="text">
<p>I want to manipulate a string using .rsplit() so that anything after the last comma in a string of data is split using commas. As an example:</p>
<pre><code>,000
</code></pre>
<p>...should be changed to:</p>
<pre><code>,0,0,0,
</code></pre>
<p>In order to this I am using the code:</p>
<pre><code>var = string.rsplit(",",1)[1:]
var = "{}".format(",".join(string(var[0])))
</code></pre>
<p>Rather than producing data in the desired format, I am instead getting this:</p>
<pre><code>0,00 
</code></pre>
<p>This only seems to be happening if all three digits after the last comma are zeros. Other examples that seem to have worked ok are:</p>
<pre><code>,131 to ,1,3,1,
,311 to ,3,1,1,
,330 to 3,3,0,
</code></pre>
<p>Can anyone explain why this is?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>1) What do the values in the square brackets do?</p>
</blockquote>
<p>See <a href="https://docs.python.org/3/tutorial/introduction.html#lists" rel="nofollow">Lists</a> in the tutorial for a full explanation, but briefly:</p>
<p>A simple value in the square brackets is an <em>index</em>. If you have a list <code>a = ['a', 'b', 'c', 'd']</code>, then <code>a[0]</code> is <code>'a'</code>, <code>a[1]</code> is <code>'b'</code>, and so on.</p>
<p>A pair of values separated by a colon is a <em>slice</em>: it gives you not a single value from the list, but a smaller list consisting of all of the values. So, <code>a[1:3]</code> is <code>['b', 'c']</code>.</p>
<p>You can leave off the start or end of a slice, so <code>a[1:]</code> is <code>['b', 'c', 'd']</code>.</p>
<p>You can use negative numbers for both indices and slices, meaning to count from the end, so <code>a[-1]</code> is <code>'d'</code>, <code>a[-2]</code> is <code>'c'</code> and <code>a[-3:-1]</code> is <code>['b', 'c']</code>.</p>
<hr/>
<p>So, when you do this:</p>
<pre><code>line.rsplit(",",1)[1:]
</code></pre>
<p>If you look up <a href="https://docs.python.org/3/library/stdtypes.html#str.rsplit" rel="nofollow"><code>str.rsplit</code></a>, you can see that <code>line.rsplit(",", 1)</code> returns a list of 2 strings—everything up to the last comma, and everything after the last comma—unless there were no commas, in which case it returns a list of 1 string—the whole of <code>line</code>.</p>
<p>The <code>[1:]</code> means that you want everything from the second element on. So, if there was a comma, you get a list of 1 string—everything after the last comma; if there was no comma, you get an empty list.</p>
<hr/>
<p>Let's step through your edited code piece by piece.</p>
<pre><code>&gt;&gt;&gt; s = ',000'
&gt;&gt;&gt; split_s = s.rsplit(",", 1)
&gt;&gt;&gt; split_s
['000']
&gt;&gt;&gt; var = split_s[1:]
&gt;&gt;&gt; var
['000']
&gt;&gt;&gt; var0 = var[0]
&gt;&gt;&gt; var0
'000'
&gt;&gt;&gt; svar0 = string(var0)
TypeError: 'str' object is not callable
&gt;&gt;&gt; # ignore that part, I guess?
&gt;&gt;&gt; joined = ",".join(var0)
'0,0,0'
&gt;&gt;&gt; var = "{}".format(joined)
&gt;&gt;&gt; var
'0,0,0'
</code></pre>
<p>Notice that two of these steps do absolutely nothing, while one of them raises an exception, and I'm not sure what they were intended to do. And the final result (removing the part that raises an exception) doesn't demonstrate what you claimed you were trying to fix. So your question is completely unanswerable.</p>
<p>At any rate, if you don't understand how your code breaks down into these steps, you shouldn't be writing dense code. Write things as exactly one simple expression per line, make sure you understand exactly what each one is doing (e.g., by printing out the results, as I did), and get all of them working. After that, you can try to make it more concise again.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think what you are trying to do is something like this:</p>
<pre><code>input_string = '237363,237,2376,8273,0932'

last_value_on_the_input_string = input_string.split(',')[-1]

last_value_on_the_input_string_chopped = ','.join(last_value_on_the_input_string)
</code></pre>
<p>The verbose variable names should help you identify what's going on on each line,</p>
<p>Hope it helps!</p>
</div>
<span class="comment-copy">I think that if you can explain in a single and simple sentence what are you trying to do with split we will help you, otherwise it is going to be difficult since your question is rather confusing. TIP: don't paste too much data, just the relevant part of it.</span>
<span class="comment-copy">@SergioAyestarán split all digits before the first comma (if reading from the right) with a comma.</span>
<span class="comment-copy">Didn't understand. You are converting the last numbers after the third field ("Tolima", "Chico FC", etc) to a one caracter number?</span>
<span class="comment-copy">@EspartaPalma if reading from left, all digits after last comma...separate them with a comma...so ,000 would become ,0,0,0,. thanks</span>
<span class="comment-copy">In order to debug this, you should break it down into pieces and see which piece is doing the wrong thing. You can do this by running in the debugger, or in an interactive visualizer, or by just adding a <code>print</code> after each potentially-confusing line that shows what the inputs and outputs of that line's expression were. If that's not enough to solve your problem yourself, it should be enough for you to write an <a href="http://stackoverflow.com/help/mcve">MCVE</a> that will be easier for people to answer.</span>
<span class="comment-copy">hi, thanks for replying. what i dont understand is then, if you look at the last line, before processing the string after the last comma is '000'. After processing it should resolve to ',0,0,0,' but instead it is resolving to '00,0'. Can you explain why this is? Thanks</span>
<span class="comment-copy">@user3045351: As I explained, <code>[1:]</code> is giving you a list of 1 string. When you join that list of 1 string with <code>','.join</code>, the result is just that 1 string. If you instead used <code>[1]</code>, that would give you not a list, but just the string itself. If you <code>','.join</code> that, it will join up all of the characters of that string with <code>','</code> between them. I think that may be what you're after, although it's not entirely clear to me. I'll edit the answer to make this clearer.</span>
<span class="comment-copy">having broken it down into sections, i can see that my pre and post transformation variables are behaving as expected, however when I am substituting the old sub string with the new using 'upl2 = "{}".format(",".join(list(upl[0])))' for some lines in my data only the old substring is not being correctly being overwritten with the new one. i think i might be better asking a new question to be honest</span>
<span class="comment-copy">What is that list comprehension supposed to be demonstrating? It makes no sense unless you understand that strings are already iterables of single-character strings. And if you <i>do</i> understand that, you probably don't need the list, and if you do, you'd just write it as <code>list(last_value_on_the_input_string)</code>. Any list comprehension that starts off <code>value for value…</code> and has no <code>if</code> clauses is just obfuscating something simpler.</span>
<span class="comment-copy">It is not supposed to demonstrate anything it was meant to solve the problem, I can see now that all he wants is a string with that, let me correct it</span>
