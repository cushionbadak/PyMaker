<div class="post-text" itemprop="text">
<p>I have a class that I am trying to cover with tests in python.</p>
<p>I have a dependency that's being injected into the class. </p>
<pre><code>class UnderTest:
    def __init__(self, dependency):
        self.dependency = dependency
</code></pre>
<p>I don't really care about the internals of the dependency here, and want to mock it. </p>
<p>So I instantiate the class in my tests, injecting the dependency:</p>
<pre><code>dependency = MagicMock()
dependency.some_func = MagicMock(return_value='blue')
under_test = UnderTest(dependency)
</code></pre>
<p>Later when I want to test the class <code>UnderTest</code>, I want the dependency to return a different value based on what parameters were passed to it. So in the code under test, I might have something like</p>
<pre><code>value = dependency.some_func('a')
</code></pre>
<p>but I also want the dependency to return something else when called with a different value.</p>
<pre><code>value = dependency.some_func('b')
</code></pre>
<p>Ideally (and I have seen this in other frameworks), I would be able to configure the mock to return different values, for example (how I would like it to work)</p>
<pre><code>dependency.some_func = MagicMock([
    {'called_with': 'a', 'return_value': 'blue'}, 
    {'called_with': 'b', 'return_value': 'green'}
])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.side_effect" rel="nofollow noreferrer"><code>side_effect</code></a> attribute to set a callable that returns different values according to its arguments.</p>
<pre><code>results = {'a': 'blue', 'b': 'green'}
dependency.some_func = MagicMock(side_effect=lambda arg: results.get(arg, DEFAULT))
</code></pre>
<p>(The <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.DEFAULT" rel="nofollow noreferrer"><code>DEFAULT</code> singleton</a> is used to signal that the normal mock return value is used for arguments not in the dict.)</p>
</div>
<span class="comment-copy">Perfect. Thanks so much</span>
