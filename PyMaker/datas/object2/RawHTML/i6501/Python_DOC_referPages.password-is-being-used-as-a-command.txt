<div class="post-text" itemprop="text">
<p>I'm trying to run a command from a python file: </p>
<pre><code>p = subprocess.Popen("mysqldump -h" + hostname + " -u" + mysql_user + " --password=" + mysql_pw + " " + db + " &gt;   dump_" + hostname + "_" + timestamp + ".sql", shell=True)
</code></pre>
<p>But the <code>--password=</code> and even <code>-p</code> keep getting hanged up on my password string</p>
<p>The password is similar to this structure:</p>
<pre><code>Z@F&amp;sfeafxegwa
</code></pre>
<p>the command line error:</p>
<pre><code>'sfeafxegwa' is not recognized as an internal or external command,
operable program or batch file.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As already mentioned in the comments, don't use <code>shell=True</code>. See <a href="https://docs.python.org/3/library/subprocess.html#security-considerations" rel="nofollow noreferrer">https://docs.python.org/3/library/subprocess.html#security-considerations</a>.</p>
<p>Pass the list of arguments directly to the <code>Popen</code> constructor, instead of letting the shell do the splitting.</p>
<pre><code>with open('dump_{}_{}.sql'.format(hostname, timestamp), 'w') as dump_file:
    p = subprocess.Popen(
        [
            'mysqldump', '-h', hostname, '-u', mysql_user,
            '--password={}'.format(mysql_pw), db
        ],
        stdout=dump_file
    )
</code></pre>
<hr/>
<p>The issue with <code>shell=True</code> is better explained in the older version of the documentation: <a href="https://docs.python.org/2/library/subprocess.html#frequently-used-arguments" rel="nofollow noreferrer">https://docs.python.org/2/library/subprocess.html#frequently-used-arguments</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You need to quote the password to protect shell metacharacters (such as <code>&amp;</code>) from being treated specially by the shell, e.g.:</p>
<pre><code>cmd = "mysqldump -h {} -u {} -p'{}' {} &gt; dump_{}_{}.sql".format(
    hostname, mysql_user, mysql_pw, db, hostname, timestamp)
subprocess.run(cmd, shell=True, check=True)
</code></pre>
<p>However, this won't work if the password itself can contain quotes. A better alternative would be to pass the <em>list</em> of arguments to <code>subprocess</code> and do the redirection yourself:</p>
<pre><code>args = ["mysqldump", "-h", hostname, "-u", mysql_user, "-p{}".format(mysql_pw), db]
outfile = "dump_{}_{}.sql".format(hostname, timestamp)

with open(outfile, "w") as f:
    subprocess.run(args, check=True, stdout=f)
</code></pre>
</div>
<span class="comment-copy">Try using: <code>--password='" + mysql_pw + "' " + db</code> The single '&amp;' is being interpreted by bash, and forking the first half of the command as its own process, then failing on the second half. The above mentioned will add single quotes around the password string.</span>
<span class="comment-copy">Also, IMHO this would be much more readable using format strings.</span>
<span class="comment-copy">@MattClark that makes a lot of sense, but I'm still getting an error: <code>'sfeafxegwa' '</code>, this time with the extra <code>'</code> Very very true @tobias_k - thank you!</span>
<span class="comment-copy"><code>shell=True</code> is completely unsafe and unreliable in the presence of user-entered parameters.  You should split up the command into a list of individual flags and parameters, and call <code>subprocess.Popen()</code> with that list, and <code>shell=False</code>.  Redirecting the output to a file does become a bit more work this way, you'd have to read from Popen's stdout and write to the file yourself in Python code.</span>
<span class="comment-copy">Thank you, this is the solution that worked and seems to align best with the documentation.</span>
