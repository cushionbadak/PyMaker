<div class="post-text" itemprop="text">
<p>I have a file (in this example it is "test.csv"). I want to get all the fields of this csv and make a list containing all of them. For example I can do:</p>
<pre><code>import csv
def read_csv():
    dr = csv.DictReader(open('test.csv', 'r', encoding='utf-8'))
    result = []
    for r in dr:
        for n in r.values():
            result+=n
    return result
</code></pre>
<p>However it seems highly inefficient if the csv gets big.</p>
<p>I tried this:</p>
<pre><code>import csv
def read_csv():
    dr = csv.DictReader(open('test.csv', 'r', encoding='utf-8'))
    return [n for row in dr for n in row.values()]
</code></pre>
<p>But it returns a list of lists, each containing the contents of one line, and not one big list with the content of every line.</p>
<p>What is the best solution for that?</p>
<p>Exemple of csv file (note the blank first line):</p>
<pre><code>w1, w2, w3
w4, w5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you're only using the dictionaries' values, you could replace <a href="https://docs.python.org/3/library/csv.html#csv.DictReader" rel="nofollow noreferrer"><code>csv.DictReader()</code></a> with <a href="https://docs.python.org/3/library/csv.html#csv.reader" rel="nofollow noreferrer"><code>csv.reader()</code></a> and use a list comprehension:</p>
<pre><code>def read_csv():
    with open('test.csv') as f:
        reader = csv.reader(f)
        return [col for row in reader for col in row]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will yield row by row of the CSV as a list:</p>
<pre><code>import csv


def read_csv():
    file = open('test.csv', 'r', encoding='utf-8')
    reader = csv.reader(file)
    for row in reader:
        yield row
    file.close()
</code></pre>
<p>If you want a list with all CSV fields you can do:</p>
<h3>Python version &gt;= 3.3</h3>
<pre><code>import csv


def read_csv():
    file = open('test.csv', 'r', encoding='utf-8')
    reader = csv.reader(file)
    for row in reader:
        yield from row
    file.close()
</code></pre>
<h3>Python version &lt; 3.3</h3>
<pre><code>import csv


def read_csv():
    file = open('test.csv', 'r', encoding='utf-8')
    reader = csv.reader(file)
    for row in reader:
        for value in row:
            yield value
    file.close()
</code></pre>
<hr/>
<p>This return a generator, if you need the result to be a list you can do:</p>
<pre><code>list(read_csv())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To create a single list with all the data (i.e. not a list of lists), use <code>extend()</code> to add new elements to an existing list:</p>
<pre><code>import csv

def read_csv():
    data = []
    with open('test.csv', 'r', encoding='utf-8') as f_input:
        for row in csv.reader(f_input):
            data.extend(row)

    return data
</code></pre>
<p>If your csv file contained:</p>
<pre class="lang-none prettyprint-override"><code>1,2,3,4,5
6,7,8,9,10
</code></pre>
<p>The <code>data</code> returned would be:</p>
<pre class="lang-none prettyprint-override"><code>["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]
</code></pre>
</div>
<span class="comment-copy">Do you have an example for the csv file, and the list you'd like to get?</span>
<span class="comment-copy">I don't see why the second approach should return a list of lists. <code>n</code> represents an item from each of the nested rows.</span>
<span class="comment-copy">@MosesKoledoye: I don't either, but it does. I tested it.</span>
<span class="comment-copy">This solved the problem. I will let some time before accepting it though.</span>
