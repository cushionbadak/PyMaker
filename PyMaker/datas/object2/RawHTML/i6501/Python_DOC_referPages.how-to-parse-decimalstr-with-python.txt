<div class="post-text" itemprop="text">
<p>In my view I make a call to a stored procedure that return to me the ID of the entry it created.</p>
<p>I need to use this id as arguments for another stored procedure.</p>
<p>My problem is that the result of the first query is : (Decimal('1046'),) and of course wont fit as argument for the second procedure.</p>
<p>How can I parse it to only get the '1046' ?</p>
<p>Edit :</p>
<p>View.py :</p>
<pre><code>def dictfetchall(cursor):
    columns = [col[0] for col in cursor.description]
    return [
        dict(zip(columns, row))
        for row in cursor.fetchall()
    ]

def mouvementCreation(request):
    idMI = 0
    especes = TbEspece.objects.order_by('id')
    #Get Mouvement informations

    #Connection to 'erp-site' DB 
    cursor = connections['erp-site'].cursor()
    try:
        #Get Produits list from Espece
        query = "{CALL SP_webGET_PRODUIT_FROM_ESPECE(%s,%s,%s,%s,%s)}"
        arguments = (2016, 'C', 0, 10, 'A',)
        cursor.execute(query, arguments)
        produits = dictfetchall(cursor)

        #Get Transporters list
        cursor.execute("{CALL SP_webGET_TRANSPORT}")
        transporters = dictfetchall(cursor)

        #Get Livreur list
        cursor.execute("{CALL SP_webGET_LIVREUR}")
        livreurs = dictfetchall(cursor)
    finally:
        cursor.close()       

    cursor = connections['site'].cursor()
    try:
        #Get Circuit list
        cursor.execute("{CALL SP_webGET_CIRCUIT_FOR_MVT}")
        circuits = dictfetchall(cursor)

        #Get Source list
        cursor.execute("{CALL SP_webGET_SOURCE_FOR_MVT}")
        mvtsources = dictfetchall(cursor)

        #Get Dest list
        cursor.execute("{CALL SP_webGET_DEST_FOR_MVT}")
        destinations = dictfetchall(cursor)

        #Get PontBascule list
        cursor.execute("{CALL SP_webGET_PBASCULE}")
        pontBascules = dictfetchall(cursor)
    finally:
        cursor.close()

    reg_normes = TbRegauxnormes.objects.all()
    ordreexecs = TbOrdreexecution.objects.all()
    if request.method == 'POST':
        typemouvement = request.POST.get('typemouvement')
        soustype = request.POST.get('soustype')
        recolte = request.POST.get('recolte') 
        groupe = request.POST.get('groupe')
        categorie = request.POST.get('categorie')
        code = request.POST.get('code')
        collecte = request.POST.get('collecte')
        vente = request.POST.get('vente')
        stock = request.POST.get('stock')
        achat = request.POST.get('achat')
        transporteur = request.POST.get('transporteur')
        blLivreur = request.POST.get('blLivreur', '')
        contratClient = request.POST.get('contratClient')

        pont1 = request.POST.get('pont1')               # BIGINT
        numTicket = request.POST.get('numTicket')       # INT
        dateheure1 = request.POST.get('dateheure1')     # DATETIME
        poid1 = request.POST.get('poid1')               # INT
        dsd1 = request.POST.get('dsd1')                 # INT
        pont2 = request.POST.get('pont2')               # BIGINT
        dateheure2 = request.POST.get('dateheure2')     # DATETIME
        poid2 = request.POST.get('poid2')               # INT
        dsd2 = request.POST.get('dsd2')                 # INT
        p1p2 = request.POST.get('p1p2')                 # INT
        livreur = request.POST.get('idlivreur')         # BIGINT
        vehicule = request.POST.get('vehicule')         # VARCHAR
        comTicket = request.POST.get('comTicket')       # VARCHAR
        comLogiciel = request.POST.get('comLogiciel')   # VARCHAR
        espece = request.POST.get('espece')             # BIGINT
        produit = request.POST.get('produit')           # BIGINT
        #Connection to 'erp-site' DB 

        cursor = connections['pontbascule'].cursor()
        try:
            query = "{CALL SP_webADD_MANUAL_PESEE(%s,%s,%s,%s,%s, %s,%s,%s,%s,%s, %s,%s,%s,%s,%s,%s,%s)}"
            arguments = (pont1, numTicket, dateheure1, poid1, dsd1,pont2, numTicket, dateheure2, poid2, dsd2, p1p2,livreur, vehicule,comTicket, comLogiciel,espece, produit)
            cursor.execute(query, arguments)
            #Here i recieve the (Decimal('1046'),)
            s = cursor.fetchone()
            idCreatedPesee = s[0]
        finally:
            cursor.close()
        cursor = connections['site'].cursor()
        try:
           #Here im supposed to send it as argument to this procedure
            query = "{CALL SP_webCREATE_MVT_INIT(%s)}"
            arguments = (idCreatedPesee)
            cursor.execute(query, arguments)
            idCreatedMVT = dictfetchall(cursor)
        finally:
            cursor.close()
    return render(request, 'mouvementCreation.html', {'especes' : especes, 'produits' : produits, 'transporters' :  transporters, 'livreurs' : livreurs, 'circuits' : circuits, 'mvtsources' : mvtsources, 'destinations' : destinations, 'pontBascules' : pontBascules} )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>type casting in python is as simple as:</p>
<pre><code>my_decimal = Decimal('1046')
as_a_string = str(my_decimal) # '1046', a string
as_an_int = int(my_decimal) # 1046, an integer
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's an instance of the <code>decimal.Decimal</code> class, part of Python's standard library. It stores decimal fractions exactly, unlike normal floating point numbers. As the database does something similar, translating the database's numbers to Decimals is the most correct way of translating them to Python.</p>
<p>They're mostly just numbers in Python.</p>
<pre><code>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; Decimal('12.3') + 4
Decimal('16.3')
</code></pre>
<p>If you know it's an integer and you need to pass an integer to somewhere, pass <code>int(yourdecimal)</code>.</p>
<p>That you get <code>(Decimal('1046'),)</code> with the parens and the comma means you get the result as a <em>tuple</em> of length 1. You can access its first element by indexing it with <code>[0]</code>, like with all tuples.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since nothing worked i just used CONVERT on my query to be sure to get a string in the end.</p>
</div>
<span class="comment-copy">Can you give us your actual code? We have no idea what <code>Decimal</code> means</span>
<span class="comment-copy">@HyperNeutrino: it's in the standard library... <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer">docs.python.org/3/library/decimal.html</a></span>
<span class="comment-copy">@RemcoGerlich Oh whoops my bad xD</span>
<span class="comment-copy">it would be great if you could make an example based on your code or simply add a comment where the error is happening, all that code won't help you or us in finding a solution as it's not very expressive.</span>
<span class="comment-copy">Yeah my bad, just added comments, it's at the very bottom part of the view</span>
<span class="comment-copy">Tried and got "'str' object has no attribute 'items'" as error</span>
<span class="comment-copy">@Girardclément have you tried <code>str(s[0])</code>?</span>
<span class="comment-copy">just did and got the same error "'str' object has no attribute 'items'"</span>
<span class="comment-copy">@Girardclément if so, then it seems like your error is out of the scope of the example you posted.</span>
<span class="comment-copy">You are totaly right, i first thought of that but when i try to acces it using [0], it tells me "'Decimal' object has no attribute 'items'"</span>
<span class="comment-copy">@Girardclément: then you already have a Decimal object somehow, so forget the last paragraph. It's a bit hard to do guesswork from here without seeing actual code...</span>
<span class="comment-copy">I added my view.py so you can check hope it will help</span>
<span class="comment-copy">@Girardclément you may be confusing the <code>Decimal</code> object's <code>__repr__</code> output with an array or tuple. Casting is as straight forward as @fixmycode's answer.</span>
<span class="comment-copy">As i said in comments, i tried his Casting and it's not working either</span>
