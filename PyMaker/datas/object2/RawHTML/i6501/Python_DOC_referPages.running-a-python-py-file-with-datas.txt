<div class="post-text" itemprop="text">
<p>this code allows you to resize and view the file named "lena-gray.png" in the same folder.</p>
<pre><code>from PIL import Image

jpgfile = Image.open("lena-gray.png")

high = input("Genişliğini giriniz : ")
wid = input("Yüksekliğini giriniz : ");

out = jpgfile.resize((int(high), int(wid)))

out.show()
</code></pre>
<p>But instead of entering these values step by step, I want to enter </p>
<pre><code>$ python mywork.py lena-gray.png 50 100 
</code></pre>
<p>So I want to run it without opening the file and see the result. Can this be done on Phyton? Can you help me?</p>
<blockquote>
<p>----------------------------------------Edit----------------------------------</p>
</blockquote>
<pre><code>I updated my code like down. 

import sys
from PIL import Image

firstarg = str(sys.argv[1])
secondarg = int(sys.argv[2])
thirdarg = int(sys.argv[3])

jpgfile = Image.open(firstarg)

yuks = secondarg

gen = thirdarg

out = jpgfile.resize((int(yuks), int(gen)))

out.show()
</code></pre>
<p><a href="https://i.stack.imgur.com/bgVzR.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/bgVzR.png"/></a></p>
<p>And my codes work!</p>
<p><a href="https://i.stack.imgur.com/rbTV8.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/rbTV8.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>You want to look into <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">argparse</a>.</p>
<p>It's the standard Python way to handle command line arguments.</p>
<p>EDIT: And if you want to check if the file is actually there or allow giving a list of files, look into <a href="https://docs.python.org/3/library/glob.html" rel="nofollow noreferrer">glob</a>.</p>
<p>EDIT2: This should do:</p>
<pre><code>import argparse

parser = argparse.ArgumentParser()
parser.add_argument("filename", help="an image file", type=str)
parser.add_argument("width", help="display width", type=int)
parser.add_argument("height", help="display height", type=int)
clargs = parser.parse_args()


from PIL import Image

jpgfile = Image.open(clargs.filename)
out = jpgfile.resize(clargs.height, clargs.width)
out.show()
</code></pre>
<p>EDIT3: If you really want to do it according to the answer by @tendstoZero, this should be correct:</p>
<pre><code>import sys

filename = sys.argv[1]
height = int(sys.argv[2])
width = int(sys.argv[3])


from PIL import Image

jpgfile = Image.open(filename)
out = jpgfile.resize(height, width)
out.show()
</code></pre>
<p>You shouldn't cast to <code>int</code> twice, and you shouldn't use meaningless intermediate variables.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import sys
firstarg=sys.argv[1]
secondarg=sys.argv[2]
thirdarg=sys.argv[3]
sys.argv[0] should be the script name .
</code></pre>
<p>You should be using something like this above snippet in your script.</p>
</div>
<span class="comment-copy">You may want to update the question. The problem has nothing to do with image processing or algorithms...</span>
<span class="comment-copy">Well, the tags were only an example. The title is also completely off. You are asking about command line arguments in Python. What are "datas" supposed to be?</span>
<span class="comment-copy">I solved! I will edit my answer. That doesn't hardly.</span>
<span class="comment-copy">The problem with your question is that because tags and title were/are completely off, it's not obvious that this is a duplicate of many older questions (example: <a href="https://stackoverflow.com/questions/1009860/how-to-read-process-command-line-arguments" title="how to read process command line arguments">stackoverflow.com/questions/1009860/…</a>). If you/I/someone fixes that, it needed to be flagged as such right away. At first I thought pointers to the docs should be enough, since it seems you simple didn't know the terminology to ask the correct question. If you had known it, a Google search ("python command line arguments") would have been enough.</span>
<span class="comment-copy">I solve with Image and sys and I use sys.argv[]. thanks for your answer!</span>
<span class="comment-copy">Well, I already tried to explain why you should not use <code>sys.argv</code> ... For one final reason, try <code>python script.py -h</code> on my answer.</span>
<span class="comment-copy">Sure. That's possible too. But it has no built-in checks if the arguments are valid, etc. So, argparse is certainly the better choice.</span>
<span class="comment-copy">I want to find that answer, but my problem is so critical. So I must to find my answer quickly. Do you want to help edit my codes?</span>
<span class="comment-copy">I added a full solution to my answer. I'm still sure you want to read the docs about the two modules I mentioned.</span>
