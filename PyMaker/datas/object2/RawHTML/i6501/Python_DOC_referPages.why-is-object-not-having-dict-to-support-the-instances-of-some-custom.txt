<div class="post-text" itemprop="text">
<p>From <a href="https://stackoverflow.com/a/44880260">https://stackoverflow.com/a/44880260</a> </p>
<blockquote>
<p><code>object()</code> doesn't support instance attributes because it is the base for all custom Python classes, which must <a href="https://docs.python.org/3/reference/datamodel.html#slots" rel="nofollow noreferrer">support not having a <code>__dict__</code> attribute when defining slots instead</a>.</p>
</blockquote>
<p>Does "it" in "it is the base for all custom Python classes" mean class <code>object</code> or its instance <code>object()</code>? I guess class <code>object</code>?</p>
<p>Since it is <code>object</code> instead of <code>object()</code> which is the base for all custom Python classes, is it also <code>object</code> instead of <code>object()</code> which must support the instances of some custom Python classes not having a <code>__dict__</code> attribute when the classes defining <code>__slots__</code> instead?</p>
<p>So how shall I understand that <code>object()</code> not having <code>__dict__</code> is to support the instances of some custom Python classes not having a <code>__dict__</code> attribute when the classes defining <code>__slots__</code> instead?</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Per the <a href="https://docs.python.org/3/reference/datamodel.html?highlight=__slots__#notes-on-using-slots" rel="nofollow noreferrer">"Notes on using <code>__slots__</code>"</a>:</p>
<blockquote>
<p>When inheriting from a class without <code>__slots__</code>, the <code>__dict__</code> attribute of that class will always be accessible, so a <code>__slots__</code> definition in the subclass is meaningless.</p>
</blockquote>
<p>The wording is a little imprecise; technically, since all classes inherit from <code>object</code> (which lacks <code>__slots__</code>), that would imply that instances would all have <code>__dict__</code>, but what they really mean to say is that if <code>__dict__</code> is not suppressed on instances at every level of the inheritance tree (by failing to provide <code>__dict__</code> for built-in types like <code>object</code>, or suppressing it with <code>__slots__</code> on user-defined classes), then a <code>__dict__</code> will exist for instances of the first class in the tree that fails to suppress <code>__dict__</code>, and for all of its subclasses, even if they try to use <code>__slots__</code> to suppress <code>__dict__</code>.</p>
<p>Basically, if <code>object</code> instances had <code>__dict__</code>, all instances of all classes would have it as well; by suppressing it on <code>object</code>, the subclasses of <code>object</code> (read: All classes) retain the <em>option</em> to have <code>__dict__</code> or not.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, your understanding is correct. Subclasses of <code>object</code> may not want a <code>__dict__</code> for their instances, but if <code>object</code> instances had one, their subclass instances will have one too.</p>
<p>The issue is mostly that <code>object</code> is the parent class of all other classes in Python. If it was designed so that its instances had a <code>__dict__</code>, that <code>__dict__</code> would be inherited by all instances of all classes.</p>
</div>
