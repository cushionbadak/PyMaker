<div class="post-text" itemprop="text">
<p>What I'm trying to accomplish is to mock a the split inside a method like this</p>
<pre><code>def method_separator(s):
    try:
        a, b, c = s.split('-')
        print a, b, c
    except: ValueError:
        print "An error occurred or so"
</code></pre>
<p>In the test</p>
<pre><code>with self.assertRaises(ValueError):
    with mock.patch(What to put here?) as mock_patch:
    mock_patch.return_value = "TEXT" # To raise ValueError
    this = method_separator('Some-good-text') # The mock should not let this good test to pass
</code></pre>
<p>I've made the mock working with <strong>string.split</strong> </p>
<pre><code>def method_separator(s):
    try:
        a, b, c = split.string(s, '-')
        print a, b, c
    except: ValueError:
        print "An error occurred or so"

with self.assertRaises(ValueError):
    with mock.patch('string.split') as mock_patch:
    mock_patch.return_value = "TEXT" # To raise ValueError
    this = method_separator('Some-good-text') # The mock should not let this good test to pass
</code></pre>
<p>Even if that work, the question remains, it is posible to do? mock the result of <strong>"".split('-')</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>The string you want to split is passed into your method. You don't need to use <code>patch</code>, just pass a <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock" rel="nofollow noreferrer">Mock</a> into the method.</p>
<pre><code># Production Code
def method_separator(s):
try:
    a, b, c = s.split('-')
    print a, b, c
except: ValueError:
    print "An error occurred or so"

# Test Code
from unittest.mock import Mock

with self.assertRaises(ValueError):
    mock_string = Mock(spec=string)
    mock_string.side_effect = ValueError("Some message")
    this = method_separator(mock_string)
</code></pre>
<p><code>patch</code> is useful when you want your production to get a mock <em>through an import statement</em>. If you pass values directly to your production code, you have to make your own Mock objects.</p>
</div>
<span class="comment-copy">Why would you need to <i>mock</i> that?! Just pass in a string that splits to the appropriate values.</span>
<span class="comment-copy">That method there is just a fragment, the idea is to mock that specific part, that's why I'm putting it on a method to see how. In the main method that string comes from methods I can't manipulate.</span>
<span class="comment-copy">Then you mock those methods, to return an appropriate string. Without an actually representative example, itâ€™s hard to suggest further.</span>
