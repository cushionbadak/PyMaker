<div class="post-text" itemprop="text">
<p>I have an assignment where I'm supposed to create a class Fractions and all the function are "magic methods". The problem is my professor never taught us magic methods. I've used </p>
<pre><code>   __init__ 
</code></pre>
<p>but never used any other magic methods. I have two days to program this and I need some guidance on constructing this code. The closest to what I need to program I found here: <a href="https://gist.github.com/mustaa/2350807" rel="nofollow noreferrer">https://gist.github.com/mustaa/2350807</a>
But I can't understand what is going on in that code</p>
<p>The magic methods are:</p>
<pre><code>    class Fraction: #I need it in a form like the one on github, but easier to understand
    __init__  #construct a rational number with a given numerator and denominator
    __add__   #add two fractions
    __sub__   #subtract to fractions
    __eq__    #check if 2 fractions are equal
    __ne__    #check if 2 are not equal
    __lt__    #check if one fraction is less than the other
    __le__    #check if &lt;=
    __gt__    #check if one fraction is greater than the other
    __ge__    #check if &gt;=
    __float__ #gets float representation of fraction called by float()
    __repr__  #gets a string representation of the Fraction instance, called by str()
</code></pre>
<p>Once I get the skeleton code for: </p>
<pre><code>    class Fraction, __add__, __eq__ 
</code></pre>
<p>I will be able to finish the rest of the assignment myself.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is how to implement the magic <code>__add__</code> and <code>__eq__</code> methods for the useless <code>Integer</code> class. I'll leave it to you to adapt it to your <code>Fraction</code> class.</p>
<pre><code>class Integer:

    def __init__(self, value):
        self._value = value

    def __add__(self, other):
        return Integer(self._value + other._value)

    def __eq__(self, other):
        return self._value == other._value
</code></pre>
</div>
<span class="comment-copy">I have no idea what you're supposed to deliver for your assignment from your question.</span>
<span class="comment-copy">They are all explained in the <a href="https://docs.python.org/3/reference/datamodel.html#special-method-names" rel="nofollow noreferrer">official documentation</a></span>
<span class="comment-copy">The code for Python's official <code>Fraction</code> factory function is all open source and is reasonably well documented, including test cases... If you are using IPython/Jupyter, <code>from fractions import Fraction</code> and then executing <code>Fraction??</code> (with two question marks will show the source code).</span>
<span class="comment-copy">Thanks for the link. My professor never introduced these, I thought they were something that he just made up for the purpose of the assignment.</span>
<span class="comment-copy">Adding <code>isinstance(other, Integer)</code> is probably a good idea for <code>__eq__</code> but +1 for the simple example.</span>
<span class="comment-copy">@Shadow Yeah, the example is supposed to be as devoid of distractions as possible: the signal is about how to write magic methods in general, so anything else (such as type checking) would be noise.</span>
