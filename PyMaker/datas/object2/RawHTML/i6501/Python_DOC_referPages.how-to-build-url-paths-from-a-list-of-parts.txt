<div class="post-text" itemprop="text">
<p>Doing:</p>
<pre><code>from urllib.parse import urljoin
urljoin('https://site/folder', 'page')
</code></pre>
<p>Returns <code>https://site/page</code>. Then it is ok, I can append one <code>/</code>. But when my variable already has <code>/</code> and I append another, I got double bars:</p>
<pre><code>urljoin('https://site/folder//', 'page')
&gt;&gt;&gt; 'https://site/folder//page'
</code></pre>
<p>Would not be wrong urljoin allowing this double bars <code>//</code> when joining urls?</p>
<p>How can I join a list of URLs parts like this:</p>
<pre><code>urljoin('https://site/folder', 'page', 'otherpage' )
&gt; https://site/folder/page/otherpage

urljoin('https://site/folder', 'page', 'otherpage.jsf' )
&gt; https://site/folder/page/otherpage.jsf

urljoin('https://site/folder/' , 'page.htm', )
&gt; https://site/folder/page.htm

urljoin('https://site/folder//', '/page', '///otherpage' )
&gt; https://site/folder/page/otherpage

urljoin('https://site/folder//', '//page/',  '//otherpage.php'  )
&gt; https://site/folder/page/otherpage.php

urljoin('https://site/folder//', 'page', '/otherpage////' )
&gt; https://site/folder/page/otherpage
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm sure there are different ways to do it</p>
<pre><code>from urllib.parse import urljoin
from functools import reduce # python3

def clean_url(url):
    return url.strip('/') + '/'

def joinurllist(urls):
    return reduce(urljoin, map(clean_url, urls))

joinurllist(['https://site/folder//', 'page', '///otherpage/'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This behavior is mentioned in the <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urljoin" rel="nofollow noreferrer">python docs</a>.</p>
<p>Leaving a trailing slash is a reasonable method of appending the appropriate path component.</p>
</div>
<div class="post-text" itemprop="text">
<p>I wrote this URL join function which does it:</p>
<pre><code>def _clean_urljoin(url):

    if url.startswith( '/' ) or url.startswith( ' ' ):
        url = url[1:]
        url = _clean_urljoin( url )

    if url.endswith( '/' ) or url.endswith( ' ' ):
        url = url[0:-1]
        url = _clean_urljoin( url )

    return url


def clean_urljoin(*urls):
    fixed_urls = []

    for url in urls:
        fixed_urls.append( _clean_urljoin(url) )

    return "/".join( fixed_urls )


print( clean_urljoin( 'https://site/folder'   , 'page'     , 'otherpage'       ) )
print( clean_urljoin( 'https://site/folder'   , 'page'     , 'otherpage.jsf'   ) )
print( clean_urljoin( 'https://site/folder/'  , 'page.htm' ,                   ) )
print( clean_urljoin( 'https://site/folder//' , '/page'    , '///otherpage'    ) )
print( clean_urljoin( 'https://site/folder//' , '//page/'  , '//otherpage.php' ) )
print( clean_urljoin( 'https://site/folder//' , 'page'     , '/otherpage////'  ) )
</code></pre>
<p>Running this returns:</p>
<pre><code>$ python3 test.py
https://site/folder/page/otherpage
https://site/folder/page/otherpage.jsf
https://site/folder/page.htm
https://site/folder/page/otherpage
https://site/folder/page/otherpage.php
https://site/folder/page/otherpage
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>//</code>... is a legal URI path.</p>
<p><code>urljoin</code> checks to see if the previous element has a trailing <code>/</code>. If it does, it keeps it as a branch and not a leaf.</p>
<p>So:</p>
<pre><code>&gt;&gt;&gt; urljoin('/foo/bar/','page')
'/foo/bar/page'

&gt;&gt;&gt; urljoin('/foo/bar', 'page')
/foo/page
</code></pre>
<p>If you want to really avoid extra <code>/</code>, then <code>rstrip()</code> and append:</p>
<pre><code>&gt;&gt;&gt; urljoin('/foo/bar/'.rstrip('/'), 'page')
'/foo/page'

&gt;&gt;&gt; urljoin('/foo/bar///'.rstrip('/') + '/', 'page')
'/foo/bar/page'
</code></pre>
<p>What you might want to do is something like:</p>
<pre><code>L = ['root', 'part1','/part2/','//part3//']
urljoin([p.rstrip('/') + '/' for p in L])
</code></pre>
</div>
