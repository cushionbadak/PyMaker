<div class="post-text" itemprop="text">
<pre><code>from functools import reduce

def fn(x, y):
     return x * 10 + y

def char2num(s):
     return {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}[s]

a=reduce(fn, map(char2num, '13579'))
print(a)
</code></pre>
<p>Why can the attribute '13579' of map be a string, shouldn't it be a list?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>map</code> takes a <em>function</em> and a <em>sequence</em>. Strings are sequences as well. You can also iterate it:</p>
<blockquote>
<p>map(...):   map(function, sequence[, sequence, ...]) -&gt; list</p>
</blockquote>
<pre><code>&gt;&gt;&gt; s = 'string'
&gt;&gt;&gt; for i in s:
    print i

s
t
r
i
n
g
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python a string is a list of chars. Thats why you can loop (or use map) over a string and then work on every char separately inside the loop.</p>
<p>You can find more infos here <a href="http://www.openbookproject.net/books/bpp4awd/ch03.html" rel="nofollow noreferrer">http://www.openbookproject.net/books/bpp4awd/ch03.html</a></p>
</div>
<div class="post-text" itemprop="text">
<h2>From the <a href="https://docs.python.org/2/library/functions.html#map" rel="nofollow noreferrer"><code>documentation</code></a>:</h2>
<p>The documentation describes the <code>map()</code> <code>function</code> as taking a <code>function</code> which is applied to each <code>item</code> in an  <strong><code>iterable</code></strong>:</p>
<blockquote>
<p>map(function, iterable, â€¦)</p>
<p>Apply function to every item of iterable and return a list of the results.</p>
</blockquote>
<p>And since <code>Python</code> <code>strings</code> are <code>iterables</code>, just like <code>lists</code>, you can pass them into <code>map()</code> as you can <code>lists</code>. We can show that they are <code>iterables</code> by simply <code>iterating</code> over them in a <code>for-loop</code>:</p>
<pre><code>for i in "1234":
   print(i)
</code></pre>
<p>which will <code>print</code> out:</p>
<pre><code>1
2
3
4
</code></pre>
<p>Hopefully this helps you to see why <code>strings</code> can be passed into <code>map</code>.</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#map</a></span>
<span class="comment-copy">The same reason you can write <code>for x in '13579':</code></span>
<span class="comment-copy">Strings and lists are sequences.  The Python <code>map()</code> function (as well as <code>filter()</code> and <code>reduce()</code> and many others) operate on any sequence.  In fact they operate over any "iterable."  <i>Sequences</i> in Python are also "iterable" types.  (Generators are the other major type of iterable which are NOT sequences).</span>
<span class="comment-copy">Technically <code>map()</code> takes a function (callable) and an <i>iterable</i>.  Sequences happen to be iterable.</span>
<span class="comment-copy">Not sure if you're just being informal, but a string is not a list of chars where "list" is interpreted as a Python list.</span>
<span class="comment-copy">Informal, if needed I could cute the code where and how the itterator that map needs is implemented, but I didn't feel this amount of abstraction would benefit to answer the question.</span>
