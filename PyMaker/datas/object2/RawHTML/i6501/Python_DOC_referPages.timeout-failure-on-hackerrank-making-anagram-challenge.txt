<div class="post-text" itemprop="text">
<p>First question ever here on stack,
I'm on my first few challenges on hackerrank and am stuck on the "how many deletion to anagramize 2 words". I've seen some other solutions on the web but i can't figure out why mine is that much slower. I seem to have a "correct" algorithm since i computed some test cases and found the corresponding expected output</p>
<pre><code>def number_needed(a, b):
    count = 0
    isFound = False
    matchedBs = []

    for letterA in a:
        for j,letterB in enumerate(b):
            if letterA == letterB and (j not in matchedBs):
                isFound = True
                matchedBs.append(j)
                break
        if not isFound:
            count += 1
        isFound = False

    return count + (len(b)-len(matchedBs))      

a = input().strip()
b = input().strip()
print(number_needed(a, b))
</code></pre>
<p>So i'm trying to figure out if the general idea of my algorithm is the  bottleneck or if it's some error in it that is. 
Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://www.appneta.com/blog/line-profiler-python/" rel="nofollow noreferrer">line profiling</a> here.  You can use <code>conda install line_profiler</code>.</p>
<p>First incorporate your function in a script and decorate it with <code>@profile</code>.  Here's that script:</p>
<pre><code># number_needed.py

from string import ascii_letters
import numpy as np

@profile
def number_needed(a, b):
    count = 0
    isFound = False
    matchedBs = []

    for letterA in a:
        for j,letterB in enumerate(b):
            if letterA == letterB and (j not in matchedBs):
                isFound = True
                matchedBs.append(j)
                break
        if not isFound:
            count += 1
        isFound = False

    return count + (len(b)-len(matchedBs))

np.random.seed(123)
s1 = ''.join(np.random.choice(list(ascii_letters), size=500).tolist())
s2 = ''.join(np.random.choice(list(ascii_letters), size=500).tolist())

def main():
    return number_needed(s1, s2)

if __name__ == '__main__':
    main()
</code></pre>
<p>Then in IPython/JupyterQt call the command below.  You might need to change the path based on what you're directory looks like:</p>
<pre><code>%run C:/Users/YOURNAME/Anaconda3/pkgs/line_profiler-2.0-py36_0/Lib/site-packages/kernprof.py -l -v number_needed.py
</code></pre>
<p>The result shows you some useful stats line-for-line.  </p>
<pre><code>Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     5                                           @profile
     6                                           def number_needed(a, b):
     7         1            5      5.0      0.0      count = 0
     8         1            3      3.0      0.0      isFound = False
     9         1            2      2.0      0.0      matchedBs = []
    10                                           
    11       501          468      0.9      0.2      for letterA in a:
    12    136321       133965      1.0     46.4          for j,letterB in enumerate(b):
    13    136229       151929      1.1     52.6              if letterA == letterB and (j not in matchedBs):
    14       408          371      0.9      0.1                  isFound = True
    15       408          585      1.4      0.2                  matchedBs.append(j)
    16       408          425      1.0      0.1                  break
    17       500          472      0.9      0.2          if not isFound:
    18        92          105      1.1      0.0              count += 1
    19       500          459      0.9      0.2          isFound = False
    20                                           
    21         1            5      5.0      0.0      return count + (len(b)-len(matchedBs))
</code></pre>
<p>It looks like <code>for j,letterB in enumerate(b):</code> being nested is your culprit.  You're evaluating the line below 136,000 times.  That is, the operations you're running within the loops take just as long <em>per hit</em>, but they're hardly ever evaluated, so as a whole they're not what's eating up your time.</p>
<p>Still, the runtime doesn't seem too bad.  14.7 ms for <code>s1</code> and <code>s2</code> on my machine.</p>
</div>
<div class="post-text" itemprop="text">
<p>You code has O(n<sup>3</sup>) complexity (n being length of <code>a</code> and <code>b</code>): You loop every character in <code>a</code>, compare those with every character in <code>b</code>, and then check whether that index is in the list of already matched characters, which also has linear complexity.</p>
<p>As a quick fix, you could make <code>matchedBs</code> a <code>set</code>, thus reducing the complexity to to O(n²). But you can do better than that: Just count all the individual characters in <code>a</code> and <code>b</code>. Do not use <code>str.count</code> for this, or you will have O(n²) again; instead, use a <code>dict</code> mapping characters to their counts, loop <code>a</code> and <code>b</code> once, and update those counts accordingly. Finally, just sum the difference of those counts for <code>a</code> and <code>b</code>.</p>
<p>Or, using Python's libraries, you could just create two <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> for <code>a</code> and <code>b</code> and compare those.</p>
</div>
<span class="comment-copy">does each letter only occur once? since matchedBs only has each letter once.</span>
<span class="comment-copy">@BradSolomon the failed test cases use 400-500 char strings</span>
<span class="comment-copy">@inarilo no a letter can occur multiples times, i'm not sure to understand why it's a problem though.</span>
<span class="comment-copy">i don't know python so maybe I got it wrong, but you seem to be ignoring any letters that are already in matchedBs, so any repeated letter will not be counted, nor do you seem to be checking if a repeated letter matches a repeated letter in B rather than the same occurence that has already been matched..</span>
<span class="comment-copy">the second part of the if statement checks for that no? "letterA == letterB and (j not in matchedBs)"</span>
