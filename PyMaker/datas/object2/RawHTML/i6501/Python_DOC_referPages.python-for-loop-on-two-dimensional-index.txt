<div class="post-text" itemprop="text">
<p>This may be a simple task, but I am unsure of how to achieve this in Python.</p>
<p>I have a for loop executing on an index in Python. I have a unique value that is defined within each iteration that is cycled through the for loop.</p>
<p>I want to get the value of the NEXT or PREVIOUS for loop unique value. For example, I have:</p>
<pre><code>counter = 0

for rect in rects:
    randomnumber = random.randint(1,101)
    if counter &lt; len(rects)-1:
        if rects[counter] - rects[counter+1]
            pastrand = {get random value from PREVIOUS loop iteration}
            randsubtract = randomnumber - pastrand
</code></pre>
<p>So how do I get the random number from the previous (or next) iteration to use in the CURRENT iteration in Python? For example:</p>
<pre><code>  randomnumber in rects[0]
  randomnumber in rects[1]
</code></pre>
<p>How do I call specific values from iterations in for loops?</p>
</div>
<div class="post-text" itemprop="text">
<p>its late in the day, but this might do you..</p>
<pre><code>counter = 0
random =[]
for rect in rects:
    randomnumber = random.randint(1,101)
    random.append(randomnumber)
    if counter &lt; len(rects)-1:
        if rects[counter] - rects[counter+1]:
        pastrand = random[-1]
        randsubtract = randomnumber - pastrand
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Option 1</strong><br/>
Use <code>enumerate</code>. If you want the current and next, you'll need to iterate till <code>len(rect) - 1</code>. If you want the previous and current, you'll need to start iterating from 1.</p>
<pre><code>for i, r in enumerate(rects[:-1]):
    cur = r
    next = rects[i + 1]
</code></pre>
<p>Or, </p>
<pre><code>for i, r in enumerate(rects[1:]):
    prev = rects[-1]
    cur = r
</code></pre>
<hr/>
<p><strong>Option 2</strong><br/>
You can use <code>zip</code> to the same effect:</p>
<pre><code>for cur, next in zip(rect, rect[1:]):
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As written, you can save the value from the previous loop iteration before assigning a new one.</p>
<pre><code>for ...:
    pastrand = randomnumber
    randomnumber = ...
</code></pre>
<p>Of course you will have to assign something to <code>randomnumber</code> before the loop starts so that the assignment works the very first time through.</p>
<p>An alternative would be to loop over <em>pairs</em> of random numbers rather than computing one random number per loop iteration. For this you can use the <code>pairwise()</code> tool whose implementation is given in the <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code> documentation</a> or e.g. in the <a href="https://pypi.python.org/pypi/more-itertools" rel="nofollow noreferrer"><code>more-itertools</code> package</a>. Looping over pairs of random numbers could be done like this:</p>
<pre><code>for rand1, rand2 in pairwise(repeatfunc(random.randint, None, 1, 101)):
    ...
</code></pre>
<p>where I have used another itertool, <code>repeatfunc()</code>, to repeatedly call <code>randint()</code>. (You can do this without using <code>repeatfunc()</code> too.) At each iteration of this loop except the first, <code>rand1</code> will be equal to <code>rand2</code> from the previous iteration.</p>
<p>Now, you're going to want to pair each random number with a rectangle (assuming that's what is in <code>rects</code>), right? That you can do using <code>zip()</code>. Specifically, <code>zip(random_numbers, rects)</code> is an iterator over tuples of a random number and a rectangle. You could use it like so:</p>
<pre><code>for randomnumber, rect in zip(random_numbers, rects):
    ...
</code></pre>
<p>but you're going to want to iterate over pairs, so you combine <code>pairwise</code> with that:</p>
<pre><code>for r1, r2 in pairwise(zip(random_numbers, rects)):
    rand1, rect1 = r1
    rand2, rect2 = r2
    ...
</code></pre>
<p>Here <code>random_numbers</code> could be that thing I did earlier with <code>repeatfunc()</code>. This will associate one random number with each rectangle, and give you access to each set of two consecutive number/rectangle pairs.</p>
</div>
<span class="comment-copy">Ok I’ve definitely been staring at this way too long - it didn’t even occur that I can just index the current random number into a new index with [counter] as the iteration! Thank you. This works!</span>
<span class="comment-copy">he would have to error handle if it goes out of bounds right?</span>
<span class="comment-copy">@MikeTung The whole <code>If you want the current and next, you'll need to iterate till len(rect) - 1. If you want the previous and current, you'll need to start iterating from 1.</code> is to handle out of bounds.</span>
