<div class="post-text" itemprop="text">
<pre><code>def choose (x, y):
     if y &gt; x: 
        print ("False")
     elif y == 0 or y == x: 
        return 1
     elif y == 1:
        return x
     else:
        if (x-y) &gt; y:
            biggest = x-y
            smallest = y
        else:
            biggest = y
            smallest = x-y
       resultatet = x * choose (x-1, biggest) 
    res = resultatet // smallest
    return res
</code></pre>
<p>My function is working perfectly with whatever x input I insert but with bigger Y inputs like 8000 for example I'm getting </p>
<pre><code>  File "/home/nazel607/labb3b_2.py", line 20, in choose
resultatet = x * choose (x-1, biggest) 
  File "/home/nazel607/labb3b_2.py", line 3, in choose
if y &gt; x: 
RuntimeError: maximum recursion depth exceeded in comparison
</code></pre>
<p>Is there a way I can overcome this problem or is it impossible in python due to its limits? Is there another way than increasing the limit?</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems that you can get rid of the recursion:</p>
<pre><code>def choose2(x, y):
    if y &gt; x:
        raise ValueError()

    if y == 0 or y == x:
        return 1

    if y == 1:
        return x

    result = 1
    while y != x:
        big, small = max(x-y, y), min(x-y, y)
        result *= x // small
        x -= 1
        y = big
    return result
</code></pre>
<p>I've tested it over few examples:</p>
<pre><code>for x, y in [
    (4, 2),
    (17, 9),
    (125, 79),
    (8005, 13),
    (9005, 13),
    # (19005, 7004)  # exceeds max recursion depth on my machine
]:
    assert choose(x, y) == choose2(x, y)
</code></pre>
<p>and seems to work fine.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are not exiting the program ...</p>
<pre><code>def choose (x, y):
    if y &gt; x: 
        print ("False")
        return
    # ...rest of your program
</code></pre>
</div>
<span class="comment-copy">Hi. Are you interested in finding a different way to calculate this value? Or do you want to know how to implement this specific algorithm, without coming up against this limitation?</span>
<span class="comment-copy">@jwg Hi, I'm more interested in finding a way to use this specific algorithm and overcome the problem of limitation</span>
<span class="comment-copy">Have you seen <a href="https://stackoverflow.com/questions/8177073/python-maximum-recursion-depth-exceeded">this</a>?</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/3323001/what-is-the-maximum-recursion-depth-in-python-and-how-to-increase-it">What is the maximum recursion depth in Python, and how to increase it?</a></span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/8177073/python-maximum-recursion-depth-exceeded">Python: Maximum recursion depth exceeded</a></span>
<span class="comment-copy">You are right but i'm getting the exact same problem even after editing</span>
<span class="comment-copy">Python is preventing you from recursing too deep. Check out <code>https://docs.python.org/3/library/sys.html#sys.setrecursionlimit</code>. Python doesn't do tail recursion</span>
