<div class="post-text" itemprop="text">
<p>I know it's possible to do parameter studies by using python dymola interface. However this assume that there's already an existing model. What I'm specificly interested into is to write modelica equations in python. But I didn't find any documents about this. Does anyone has some feedbac? Thanks!!</p>
</div>
<div class="post-text" itemprop="text">
<p>The documentation for the Dymola Python interface is on your local computer, for Windows users it is here (just copy the URL to your webbrowser):</p>
<pre><code>file:///C:/Program Files (x86)/Dymola 2018/Modelica/Library/python_interface/doc/index.html
</code></pre>
<p>Scanning it quickly I could not see any function to e.g. create a model from a string. 
I thought I had seen such a function in the <a href="https://openmodelica.org/doc/OpenModelicaUsersGuide/latest/index.html" rel="nofollow noreferrer">OpenModelica scripting documentation</a>, but I cannot find it anymore.</p>
<p>But you can of course always write that string to a .mo file and then simulate that file.
Maybe using a templating engine like <a href="http://www.makotemplates.org/" rel="nofollow noreferrer">Mako</a> or <a href="http://jinja.pocoo.org/" rel="nofollow noreferrer">Jinja2</a> is an interesting option for you here? You would have to write a template of a model that just replaces few variables. Or use the <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498" rel="nofollow noreferrer">f-strings introduced with Python 3.6</a> to do the same.</p>
<p>Building on top of that, you could also write your own object-oriented Python classes for a model with parameters, attributes, methods, constructor and so on. And an abstraction layer so that the model can be simulated in Dymola, OpenModelica, SimulationX or as FMU.</p>
<p>Or maybe one of the <a href="https://pypi.org/search/?q=modelica" rel="nofollow noreferrer">Modelica-related packages on PyPI</a> can do what you need?</p>
</div>
<div class="post-text" itemprop="text">
<p>As <a href="https://stackoverflow.com/a/46641198/8725275">matth</a> has pointed out, the cleanest way would probably be to use a template engine.
But to get started, simple python string formatting will also do it.</p>
<p>However, the problem is more or less complex, depending if you want to update parts of existing models or just create new models from scratch.</p>
<h2>Creating new models</h2>
<p>Here is an example how a simple Modelica model can be created from your parameters, variables and equations if they are already available in Python:</p>
<pre><code>name = 'myModel'
parameters = ['Real x=3', 'Boolean a=false']
variables = ['Real y', 'Boolean b']
equations = ['der(y) = x*time', 'b=not a']

template = """
model {name}
    {parameters}
    {variables}
equation
    {equations}
end {name};"""

model = template.format(name=name,
                        parameters='parameter '+';\n  parameter '.join(parameters)+';' if parameters else '',
                        variables=';\n  '.join(variables)+';' if variables else '',
                        equations=';\n  '.join(equations)+';' if equations else '')
</code></pre>
<p>If needed, constants could be handled the same way as parameters.</p>
<h2>Updating existing models</h2>
<p>If parts of an existing model should be updated it gets more complex, since you have to parse the Modelica code and make sure that you correctly identify the parameters, variable, equations, etc.</p>
<p>If you only want to do that with certain models which were designed to have e.g. updated equations it gets simpler. You could mark the start and the end of the equation sections to easily identify them and insert the new equations. So you would e.g. have a model like this:</p>
<pre><code>model myModel

equation
  // #equationSectionStart
  ...
  // #equationSectionEnd
end myModel;
</code></pre>
<p>and then use regular expressions to replace the content between the tags.    </p>
<p>You also have to read and write the model somehow, so there are some hints below.</p>
<h3>Reading the model in Python</h3>
<p>You can either read the content of the .mo file or use the python interface and get the code of a loaded Modelica class from Dymola with</p>
<pre><code>getClassText(fullName, includeAnnotations=True, formatted=False)
</code></pre>
<p>where fullName is the full path to the Modelica class in Dymolas package browser.</p>
<h3>Writing models</h3>
<p>Dymola does not offer anything to update parts of a model, but there is a command which creates new classes or <em>overwrites</em> the entire class text if the class already exists:</p>
<pre><code>setClassText(parentName, fullText)
</code></pre>
<p><code>parentName</code> is the path to the parent class, which is usually a package (or an empty string if the class shall be on top level) and the new class text will be <code>fullText</code>. </p>
<p>As for reading, you can also operate on file basis and just create a .mo file and load that in Dymola.</p>
<h3>Note for non-python developers</h3>
<p>The functions <code>setClassText</code> and <code>getClassText</code> are also available for the java interface and inside Dymola in the <code>DymolaCommands</code> library.</p>
</div>
<span class="comment-copy">There are very detailed ways of doing it and they seem promising! Thanks a lot!</span>
<span class="comment-copy">Hey Matth, I've got some progresses on the .mo file which I import later to Modelica enviroment. But I'm not sure understand the role of templating engine mentionned in your anwser. Would you mind to explain a little bit more how to use the emplating engine? Thanks a lot!!</span>
<span class="comment-copy">A templating engine is a software that takes a file (the template), scans it and replaces some variables therein with a value taken e.g. from a database or json file or similar. You can start by writign your template from an existing and working mo file, then make some parts of it variable. That technique is used very frequently for generating HTML, but it works for any text file.</span>
<span class="comment-copy">I didn't know about DymolaCommands built-in functions. Thanks a lot this is really helpful. Although after reading the dymola documentation, I still can't see clearly how to use getClassText in Python. Besides, what I'm trying to do in python is build a model with parameters, variables and equation section. The information about variables, classes and such stuffs are already collected in a data base that is read into python. Would you give me some more hints if you could? Thanks!!</span>
<span class="comment-copy"><code>getClassText</code> takes the class path of an already loaded class as first argument (<i>fullName</i>). So if you want to get the code of e.g. Modelica.Blocks.Continuous.Integrator, just pass it as string to the function.</span>
<span class="comment-copy">Regarding your question about how to create a model from data base information: I have updated the answer with a minimal example for the creation of a new model.</span>
