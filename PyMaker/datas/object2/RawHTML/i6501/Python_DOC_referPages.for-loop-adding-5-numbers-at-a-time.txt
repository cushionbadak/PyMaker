<div class="post-text" itemprop="text">
<p>I have a file that contains a list of numbers ex:</p>
<pre><code>1
2
3
4
5
6
7
8
9
10
</code></pre>
<p>How would I be able to read the first five numbers, compute the sum, and then read in the next five numbers?  Could I use a for loop?  I want my answer to look like this:</p>
<pre><code>var1 = 15
var2 = 40
</code></pre>
<p>Is there an easier way than using a for loop?</p>
</div>
<div class="post-text" itemprop="text">
<p>you can use <code>next</code> on the file handle and convert to integer, pass to <code>sum</code> in a generator comprehension, then unpack to 2 variables, with a default <code>0</code> value just in case the file ends before 10 values (<a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer"><code>next(f,0)</code></a> does that)</p>
<pre><code>with open("input.txt") as f:
   var1,var2 = (sum(int(next(f,0)) for _ in range(5)) for _ in range(2))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the itertools <a href="https://docs.python.org/3/library/itertools.html?highlight=grouper#itertools-recipes" rel="nofollow noreferrer"><code>grouper</code></a> recipe, which is useful in lots of applications!</p>
<pre><code>import itertools

def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return itertools.zip_longest(*args, fillvalue=fillvalue)

sums = []

with open(filename) as f:
    groups = grouper(f)
    for group in groups:
        sum_ = sum(int(line) for line in group)
        sums.append(sum_)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Keep in mind <code>for</code> loop in python is equivalent to <code>for each</code> conceptually. It would be better to use a <code>while</code> statement with a condition to stop reading after you have gotten the inputs you want. </p>
</div>
<span class="comment-copy">Hi, can you show us your sample implementation?</span>
<span class="comment-copy">The easiest thing to do would probably be a for loop doing groups of 5 inside of a while loop going until there are no more integer values left to read.</span>
<span class="comment-copy">This is certainly a good solution, can you add a link to <code>next</code> please.</span>
<span class="comment-copy">@bhansa good idea. Done</span>
