<div class="post-text" itemprop="text">
<p>I have an <strong>ent</strong> file, compressed to <strong>.gz</strong>. I need to read it and put into Biopython parser. The problem is that the parser takes either file path or file object, but I get gzip file instead. Now I convert it like this:</p>
<pre><code>file_path = 'file.ent.gz' # path to current file

file = gzip.open(file_path, 'rb') 
content = file.read() # its content

write_path = 'temp.ent' # let's write it back but as ordinary file
write_file = open(write_path, 'w')
write_file.write(content)
write_file.close()

third_file = open(write_path, 'r') #open this ordinary noncompressed file

structure = parser.get_structure('', third_file) #and finally put it into the parser
</code></pre>
<p>As you can see, this solution is ugly af but most importantly it takes loads of time because it writes to a drive and reads it twice, which is a problem as long as I have to do millions of such operations.</p>
<p>Googling didn't help me at all, docs didn't too. Is it possible to make the convertion faster?</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to convert anything, just feed your parser with the stream returned by <code>gzip.open()</code>:</p>
<pre><code>file_path = 'file.ent.gz' # path to current file
with gzip.open(file_path, 'rb') as finput:
    structure = parser.get_structure('', finput)
</code></pre>
<p>Reason: <code>open()</code> returns a file stream of the file content. <code>gzip.open()</code> returns a file stream of the uncompressed file content. Which is exactly what you need. This is a good example of the old saying: </p>
<blockquote>
<p>if it looks like a duck and walks like a duck, it is a duck</p>
</blockquote>
</div>
<span class="comment-copy"><code>gzip.open</code> does return a file object, doesn't it? At least the documentation explicitly says so: <a href="https://docs.python.org/3/library/gzip.html#gzip.open" rel="nofollow noreferrer">docs.python.org/3/library/gzip.html#gzip.open</a></span>
<span class="comment-copy">This doesn't work for me. Type(finput) in your case returns <b>&lt;class 'gzip.GzipFile'&gt;</b>, but parser.get_structure, as documentation says, needs <i>file - name of the PDB file OR an open filehandle</i>  EDITED: oh, it really works, thank you!</span>
<span class="comment-copy">You parser should not rely on the type of object that is passed to it, but on only the presence of a <code>.read()</code> method to get the stream content. EDITED: and fortunately it looks like it is really what it does :)</span>
