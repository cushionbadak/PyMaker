<div class="post-text" itemprop="text">
<p>I have a strange text file that I am required to replace any social security number with XXX-XX-XXXX.  Great!  Simply suck the file in, regex that junk out, and write the file out.  Loving life, this will be easy as pie.  My acceptance criteria is that I can only change the SSNs the rest of the file must stay exactly the same since it has fixed width columns and even strange characters must be kept for debugging other processes.  OK, cool, I got this.</p>
<p>I read the file in:</p>
<p><code>filehandle = open("text.txt", "r", encoding="UTF-8")</code></p>
<p>And it gives me some encoding errors like this: </p>
<pre><code>'utf-8' codec can't decode byte 0xd1 in position 6919: invalid continuation byte
</code></pre>
<p>I can't figure out the encoding.  I've tried chardet and it thinks it's ASCII but I just get a different encoding error.  I just need a way to suck this file in, do a simple regex and put it back out.  I can put in:</p>
<pre><code>errors="ignore"
</code></pre>
<p>And it won't crash but ends up stripping out some of the strange characters which then throws the spacing of the columns off.  Here is an example of one of the characters I'm talking about with it's hex (need to use images since I can't copy/paste it here):</p>
<p><a href="https://i.stack.imgur.com/ZwzuS.png" rel="nofollow noreferrer"><img alt="text" src="https://i.stack.imgur.com/ZwzuS.png"/></a></p>
<p><a href="https://i.stack.imgur.com/Pm5FZ.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/Pm5FZ.png"/></a></p>
<ul>
<li>The 4E is the 'N' in CHILDREN</li>
<li>The EF BF BD make up the .. stuff</li>
<li>The 53 is the S in CHILDREN</li>
</ul>
<p>I'm sure this is part of the problem.  So, what should I do to simply:</p>
<p>Take the file in, use a regex to simply change \d{3}-\d{2}-\d{4} to XXX-XX-XXXX where the file has some weird characters in it without changing anything else in the file?  Thank you all!</p>
</div>
<div class="post-text" itemprop="text">
<p>You should open your file in binary mode and avoid processing Unicode decoding of UTF-8.</p>
<p>Then use a bytes regular expression to find the social security numbers and replace the found places with relevant bytes.</p>
</div>
<span class="comment-copy">Do you really have <code>filehandle = open("text.txt"), "r", encoding="UTF-8")</code> - that should cause a syntax error...</span>
<span class="comment-copy">whoops, copy paste error.  extra right paran removed :)</span>
<span class="comment-copy">Next question then - is the file actually utf-8 and have you worked through <a href="https://docs.python.org/3/howto/unicode.html" rel="nofollow noreferrer">docs.python.org/3/howto/unicode.html</a> ?</span>
<span class="comment-copy">I don't think it actually is.  I've tried latin-1, UTF-16, and ascii and I just keep getting different encoding errors.</span>
<span class="comment-copy"><code>EF BF BD</code> is UTF-8 for U+FFFD, which is the replacement character you get from <code>errors='replace'</code>. Your file was likely screwed up to begin with by reading/writing it with UTF-8 and that flag, when the file wasn't originally UTF-8. Open the file as binary to avoid any decoding errors.</span>
<span class="comment-copy">that sounds... like a really good idea.  Is there any real trick to that?  I see that I can use 'b' to open the file, will my regex look the same and do I write it back out with 'b'?</span>
<span class="comment-copy">Exactly. Don't forget you play with bytes, not with strings.</span>
<span class="comment-copy">alrighty, going to give this a spin</span>
<span class="comment-copy">I'm close:  line = re.sub(b"\x000", b"\x00X", line)  how do I range it?  Normal regex [0-9], so like \d{3}-\d{2}-\d{4}   I'm trying stuff, but doing something wrong</span>
<span class="comment-copy">actually, I wonder if I should make a new question.  The question is really answered, "do it in binary" and now I'm just trying to regex stuff in binary :)</span>
