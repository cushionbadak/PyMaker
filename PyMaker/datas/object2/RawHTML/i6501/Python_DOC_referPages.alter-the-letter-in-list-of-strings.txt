<div class="post-text" itemprop="text">
<p>An example:</p>
<pre><code>eword_list =  ["a", "is", "bus", "on", "the"]
alter_the_list("A bus station is where a bus stops  A train station is where a train stops  On my desk I have a work station", word_list)
print("1.", word_list)

word_list =  ["a", 'up', "you", "it", "on", "the", 'is']
alter_the_list("It is up to YOU", word_list)
print("2.", word_list)

word_list =  ["easy", "come", "go"]
alter_the_list("Easy come easy go go go", word_list)
print("3.", word_list)

word_list =  ["a", "is", "i", "on"]
alter_the_list("", word_list)
print("4.", word_list)

word_list =  ["a", "is", "i", "on", "the"]
alter_the_list("May your coffee be strong and your Monday be short", word_list)
print("5.", word_list)

def alter_the_list(text, word_list):
    return[text for text in word_list if text in word_list]
</code></pre>
<p>I'm trying to remove any word from the list of words which is a separate word in the string of text. The string of text should be converted to lower case before I check the elements of the list of words are all in lower case. There is no punctuation in the string of text and each word in the parameter list of word is unique. I don't know how to fix it.</p>
<p>output:</p>
<pre><code>1. ['a', 'is', 'bus', 'on', 'the']
2. ['a', 'up', 'you', 'it', 'on', 'the', 'is']
3. ['easy', 'come', 'go']
4. ['a', 'is', 'i', 'on']
5. ['a', 'is', 'i', 'on', 'the']
</code></pre>
<p>expected:</p>
<pre><code> 1. ['the']
 2. ['a', 'on', 'the']
 3. []
 4. ['a', 'is', 'i', 'on']
 5. ['a', 'is', 'i', 'on', 'the']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I've done it like this:</p>
<pre><code>def alter_the_list(text, word_list):
    for word in text.lower().split():
        if word in word_list:
            word_list.remove(word)
</code></pre>
<p><code>text.lower().split()</code> returns a list of all space-separated tokens in <code>text</code>.</p>
<p>The key is that you're required to <strong>alter</strong> <code>word_list</code>. It is not enough to return a new <code>list</code>; you have to use <a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists" rel="nofollow noreferrer">Python 3's list methods</a> to modify the list in-place.</p>
</div>
<div class="post-text" itemprop="text">
<p>If the order of the resulting list does not matter you can use sets:</p>
<pre><code>def alter_the_list(text, word_list):
    word_list[:] = set(word_list).difference(text.lower().split())
</code></pre>
<p>This function will update <code>word_list</code> in place due to the assignment to the list slice with <code>word_list[:] = ...</code></p>
</div>
<div class="post-text" itemprop="text">
<p><strong>1</strong>
Your main problem is that you return a value from your function, but then ignore it.  You have to save it in some way to print out, such as:</p>
<pre><code>word_list =  ["easy", "come", "go"]
word_out = alter_the_list("Easy come easy go go go", word_list)
print("3.", word_out)
</code></pre>
<p>What you printed is the original word list, not the function result.</p>
<p><strong>2</strong>
You ignore the <strong>text</strong> parameter to the function.  You reuse the variable name as a loop index in your list comprehension.  Get a different variable name, such as</p>
<pre><code>return[word for word in word_list if word in word_list]
</code></pre>
<p><strong>3</strong>
You still have to involve <strong>text</strong> in the logic of the list you build.  Remember that you're looking for words that are <em>not</em> in the given text.</p>
<p>Most of all, learn basic debugging.
See this lovely <a href="https://ericlippert.com/2014/03/05/how-to-debug-small-programs/" rel="nofollow noreferrer">debug</a> blog for help.</p>
<p>If nothing else, learn to use simple <strong>print</strong> statements to display the values of your variables, and to trace program execution.</p>
<p>Does that get you moving toward a solution?</p>
</div>
<div class="post-text" itemprop="text">
<p>I like <a href="https://stackoverflow.com/users/3040627/simon-kuang">@Simon</a>'s answer better, but if you want to do it in two list comprehensions:</p>
<pre><code>def alter_the_list(text, word_list):
    # Pull out all words found in the word list
    c = [w for w in word_list for t in text.split() if t == w]
    # Find the difference of the two lists
    return [w for w in word_list if w not in c]
</code></pre>
</div>
<span class="comment-copy"><code>list(set(word_list) - set(setence.lower().split())</code>.</span>
<span class="comment-copy">That's got to be the fastest edit and downvote I've ever seen.</span>
<span class="comment-copy">Well, I'm only responsible for <i><b>one</b></i> of those actions :-) I actually think this is a useful answer. +1</span>
<span class="comment-copy">@ChristianDean: thanks for the edit then :)</span>
<span class="comment-copy">This could be actually be done in one list comprehension: <code>[word for word in word_list if word not in setence.lower().split()]</code> and it's still fairly readable.</span>
