<div class="post-text" itemprop="text">
<p>Help! I'm fairly new to python and I was wondering can I use floating point values in my range? Here is what I am trying to do.</p>
<pre><code>x = float(input("Input number: "))
y = float(input("Input number 2: "))

for row in range(0, 5):
    for column in range(x, x*y):
        print(row, column)
</code></pre>
<p>but it tells me that expects int instead of float in the (x, x*y) spot. Is it possible to put floating points in my range? If so, how?</p>
<p>Edit: Thanks everyone for your help I got it working now!</p>
</div>
<div class="post-text" itemprop="text">
<p>No. The reason is that it raises too many questions on what to do with them; the simplest was demonstrated by user2357112's comment, where you didn't know the answer. Another is that there are floating point values where adding 1.0 doesn't produce a different number, because their magnitude exceeds their precision. </p>
<pre><code>&gt;&gt;&gt; 2.0**53
9007199254740992.0
&gt;&gt;&gt; 2.0**53+1
9007199254740992.0
</code></pre>
<p>And that's before we hit the denormalized values, including infinity and not a number. </p>
<p>Faced with restrictions like these, range() was implemented for int only rather than have a bunch of tricky to understand special cases for other types. The main guidelines for these decisions is documented as the Zen of Python, which you can see using <code>import this</code>. </p>
<p>Another subtle example is numbers that aren't quite what was entered, such as <code>0.1</code>. If you try to take a range from 0 to 1 (exclusive) in steps of 0.1, how many values do you get?</p>
<pre><code>&gt;&gt;&gt; sum(0.1 for n in range(10))
0.9999999999999999
&gt;&gt;&gt; i=0
&gt;&gt;&gt; while i&lt;1:
...   print(i)
...   i+=0.1
...
0
0.1
0.2
0.30000000000000004
0.4
0.5
0.6
0.7
0.7999999999999999
0.8999999999999999
0.9999999999999999
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No, the arguments to the range constructor <a href="https://docs.python.org/3/library/stdtypes.html#range" rel="nofollow noreferrer">must be integers</a>.</p>
<p>You can convert your range arguments from floats to ints using functions such as round(), int(), math.floor() and math.ceil().</p>
</div>
<div class="post-text" itemprop="text">
<p>There are a few ways we can go about this:</p>
<pre><code>x = float(input("Input number: "))
y = float(input("Input number 2: "))

# Just work with integers counting up by 1
for column in range(int(x), int(x * y)):
    print(row, column)

# Simulate, adjust 10 to whatever number of decimal places you need
for column in range(int(x * 10), int(x * y * 10)):
    print(row, column / 10)

# Use numpy to do a floating point range, with whatever step you need
from numpy import arange

for column in arange(x, x * y, 0.1):
    print(row, column)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The range argument expects int as far as I know but for your problem, you could come up with custom range like this </p>
<pre><code>import itertools

x = float(input("Input number: "))
y = float(input("Input number 2: "))

def seq(start, end, step):
    assert(step != 0)
    sample_count = abs(end - start) / step
    return itertools.islice(itertools.count(start, step), sample_count)


for row in range(0, 5):
    for column in seq(x,x*y,0.1):# 0.1 is the difference you want in between
        print(row, column)
</code></pre>
</div>
<span class="comment-copy">What would <code>range(1.1, 5.4)</code> even be?</span>
<span class="comment-copy">I don't know, it errors out saying: range() integer start argument expected, got float.</span>
<span class="comment-copy"><i>”I don’t know”</i> - then why are you doing it? What output were you hoping for? And why isn’t the type error enough of a “no” answer for you?</span>
<span class="comment-copy">It's valid for <code>int</code>. If <code>2.0**53</code> was insufficient to exhibit the behaviour on your system you might want to take a look at <code>sys.float_info.mant_dig</code>; it's 53 for IEEE double precision floats (which are stored in 64 bits). Note that there is significance to entering <code>2.0</code> and not <code>2</code>, as the question regards float vs int.</span>
<span class="comment-copy">This far, far below the upper limit of floats! It's a <i>precision</i> limit, not a magnitude limit, and it occurs for any value. Python 3's ints have merged with long, and can thus grow limited merely by available memory, but retain a precision of 1. The upper limit (where floats still have a finite value) is something like <code>sys.float_info.radix**(sys.float_info.max_exp-1)*(sys.float_info.radix-sys.float_info.epsilon)</code> or spelled more sanely <code>sys.float_info.max</code>.</span>
<span class="comment-copy">@YannVernier: That's a complicated way to spell <code>sys.float_info.max</code>. :-)</span>
<span class="comment-copy">Right, finally I understand. Of course, it's blatantly obvious. really not thinking clearly - sorry again.</span>
