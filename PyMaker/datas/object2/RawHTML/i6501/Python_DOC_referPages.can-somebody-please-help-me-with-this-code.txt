<div class="post-text" itemprop="text">
<p>This code is meant to give the person the options to give averages, median, mode or quit however I can't get option 1 - 4 to work properly for what will happen when they select that option.</p>
<pre><code>ans1=ans1
ans2=ans2

# define functions

def average(num1, num2, num3, num4, num5, num6, num7, num8, num9, num10):
   """This function adds two numbers"""
   return total== num1, + num2, + num3, + num4, + num5, + num6, + num7, + num8, + num9, + num10 == ans1
   total/ans1

def median(num1, num2, num3, num4, num5, num6, num7, num8, num9, num10):
   """This function subtracts two numbers"""
   return total == num1 - num2 - num3 - num4 -  num5 - num6 - num7 - num8 - num9 - num10 == ans2
   total/ans2

def mode(num1,  num2, num3, num4, num5, num6, num7, num8, num9, num10):
   """This function multiplies two numbers"""
   return num1 *  num2, num3, num4, num5, num6, num7, num8, num9, num10

def quit():
    quit()


# This gives the user the options in a menu format
print("Select operation.")
print("1.average")
print("2.median")
print("3.Mode")
print("4.quit")
#this is where the user enters the number for what the user wants done
choice = input("Enter choice 1,2,3,4: ")

#################################################################
#this then asks the user for the 10 numbers
num1 = int(input("Enter first number: "))
num2 = int(input("Enter second number: "))
num3 = int(input("enter third number: "))
num4 = int(input("enter fourth number: "))
num5 = int(input("enter fith number: "))
num6 = int(input("enter sixth number: "))
num7 = int(input("enter seventh number: "))
num8 = int(input("enter eights number: "))
num9 = int(input("enter ninth number: "))
num10 = int(input("enter tenth number: "))

print(num1)
print(num2)
print(num3)
print(num4)
print(num5)
print(num6)
print(num7)
print(num8)
print(num9)
print(num10)



if choice == '1':        
   print (ans1, num1, num2, num3, num4, num5, num6, num7, num8, num9, num10)
def adding (num1, num2, num3, num4, num5, num6, num7, num8, num9, num10):
    s = (num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10)/10
    print("this is what they add up to")
    print(s)
    return s

   elif choice == '2':
      print(ans2(num1, num2, num3, num4, num5, num6, num7, num8, num9, num10))

   elif choice == '3':
      print(num1,"*", num2, num3, num4, num5, num6, num7, num8, num9, num10,"=", multiply(num1, num2, num3, num4, num5, num6, num7, num8, num9, num10))
   elif choice == '4':
      quit()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because I don't think this is homework, but just someone trying to learn some Python I'm going to partially show how this can be done.</p>
<p>First of all we are going to separate the program in easy to understand functions, the basis of which is going to be the <code>showMenu()</code> function:</p>
<pre><code>def showMenu():
  while True:
    print("Select operation.")
    print("1.average")
    print("2.median")
    print("3.Mode")
    print("4.quit")

    userInput = input()
</code></pre>
<p>Notice that condition of this loop is always <code>True</code> and thus cannot be escaped. To add some logic we have to parse the user input:</p>
<pre><code>def showMenu():
  while True:
    ...
    userInput = input()
    if userInput == "1" or userInput == "2" or userInput == "3":
      # Do something
    elif userInput == "4":
      exit()
    else:
      print("Invalid input, try again")
</code></pre>
<p>Now the program can exit the loop if the user inputs <code>4</code> and if they enter any other invalid value, the program simply shows the menu again and asks the user the input a value. Now let's fill in the part for the case when the input is either 1, 2 or 3. We edit the if statement to separate the cases these cases and create a new function to handle them:</p>
<pre><code>if userInput == "1":
  showAverageMenu()
elif userInput == "2":
  showMedianMenu()
elif userInput == "3":
  showModeMenu()
elif userInput == "4":
  exit()
else:
  print("Invalid input, try again")
</code></pre>
<p>Alright, let's the next step would be to create the <code>showAverageMenu()</code> function. However we first have to discuss the way we are going to handle the user input. The way you did it was to manually ask for ten different input values, and stored them under ten different variable names. What if we want the user to input 15 values, or 30, or 100? That would require a lot of repetitive coding. Luckily, there's a better way: we are going to store the user input in a list. This list can be as large as the user wants. Because the way we are going to ask the user to input the numbers will be the same across the three different operations, we are going to create a function that we can call each time. This function will be called <code>getInput()</code>. The logic of this function will look something like this:</p>
<p>While not done:</p>
<ol>
<li>Ask the user for to input a number</li>
<li>Check if it's a valid input</li>
<li>Append the valid input to a list</li>
</ol>
<p>We have already seen how to ask the user for input, however, unlike last time where only the numbers 1 to 4 were valid, now all numbers are valid input. Furthermore, last time we handled the input as a string, but to calculate the average we are going to need integer (or float) values. To convert a string to an integer we can <em>cast</em> the input: <code>intValue = int(stringValue)</code>. However if the user doesn't enter a number but some non-numerical characters this function <em>raises</em> a <code>ValueError</code>. To handle this we have to <em>catch</em> the errors.</p>
<p>Enough words, let's show some code:</p>
<pre><code>def getInput():
  inputList = []
  print("Please enter an integer")
  while some_condition:
    userInput = input()
    try:
      intValue = int(userInput)
      inputList.append(intValue)
    except ValueError:
      print("'{}' is not an integer".format(userInput))
</code></pre>
<p>Here you can see that we <em>try</em> to cast the user input to an integer, but if it fails, the <code>ValueError</code> is caught and the user is promptly reminded that they should input a number. Also note that this function starts with an empty list called <code>inputList</code> that is getting filled with the integer value if the cast doesn't fail. Lastly, note the conditional of the while loop, as of yet it's set to just some undefined variable, but what is the desired behavior? Firstly the input list has to contain atleast one element and secondly the user has to signal that they are done inputting values. In code this could be done like this:</p>
<pre><code>def getInput():
  userInput = None
  inputList = []
  print("Please enter an integer")
  while userInput != "done" or len(inputList) == 0:
    userInput = input()
    ...
      print("'{}' is not an integer".format(userInput))
    print("Please enter an integer")
    if len(inputList) &gt; 0:
      print("Or type 'done' if you are finished")

  return inputList
</code></pre>
<p>Now we start by setting the <code>userInput</code> to <code>None</code> so that we can use the variable in the conditional. Also we continue the loop if the input list is empty. Lastly, if the input list does contain numbers, we tell the user that they can type 'done' to exit the loop, which is reflected in the conditional of the loop. If the user is done, we return the list.</p>
<p>Now we have created a generic solution to retrieving input from the user, we have to define the functions that implement the operations. Let's look at <code>showAverageMenu()</code>:</p>
<pre><code>def showAverageMenu():
  print("***Averaging***")
  inputList = getInput()
  avg = sum(inputList) / len(inputList))

  print("The Average of")
  print(inputList)
  print("is: {}\n".format(avg)
</code></pre>
<p>As you can see, the solution is really easy. All we had to do was to calculate the average and print it. To calculate the average we can use the built-in method to calculate the sum of a list and divide it by the length of the list.</p>
<p>Now the other two methods are a bit harder, but are left as an exercise for the reader ;)</p>
</div>
<div class="post-text" itemprop="text">
<p>I fixed several parts of your code for you, and put in comments explaining what I did.  There are several things that need fixing in this code, and I didn't fix them all. I explained what I did, so you should be able to go through and fix them, but if you have any questions leave a comment and I will explain as much as I can. As many people have said above, you should go through a python tutorial. <a href="https://www.codecademy.com/learn/learn-python" rel="nofollow noreferrer">Codecademy has a relatively good one.</a></p>
<pre><code>#You should declare these first to ensure that you have access to them throughout the program
num1 = int(input("Enter first number: "))
num2 = int(input("Enter second number: "))
num3 = int(input("enter third number: "))
num4 = int(input("enter fourth number: "))
num5 = int(input("enter fith number: "))
num6 = int(input("enter sixth number: "))
num7 = int(input("enter seventh number: "))
num8 = int(input("enter eights number: "))
num9 = int(input("enter ninth number: "))
num10 = int(input("enter tenth number: "))

print(num1)
print(num2)
print(num3)
print(num4)
print(num5)
print(num6)
print(num7)
print(num8)
print(num9)
print(num10)

#It looks like you are trying to use the variables above, so you don't need them as parameters.
#If you use them as parameters, the function will get confused and use the wrong ones.
def average():
   """This function adds two numbers"""
   #Set total before you try to return it.
   #When you create a variable, it's just 1 equal sign, it's 2 when you are checking if something is equal
   #Also, never use 2 equal signs such as total = x == y
   #When you are adding something, you don't need commas.
   total = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10
   #The return statement should be the last thing in a function
   return total


def median():
   """This function subtracts two numbers"""
   total = (num1 - num2 - num3 - num4 -  num5 - num6 - num7 - num8 - num9 - num10)/2
   return total

#I'll let you take it from here.
def mode(num1,  num2, num3, num4, num5, num6, num7, num8, num9, num10):
   """This function multiplies two numbers"""
   return num1 *  num2, num3, num4, num5, num6, num7, num8, num9, num10

def quit():
    quit()


# This gives the user the options in a menu format
print("Select operation.")
print("1.average")
print("2.median")
print("3.Mode")
print("4.quit")
#this is where the user enters the number for what the user wants done
choice = input("Enter choice 1,2,3,4: ")


if choice == '1':        
    print (ans1, num1, num2, num3, num4, num5, num6, num7, num8, num9, num10)
def adding (num1, num2, num3, num4, num5, num6, num7, num8, num9, num10):
    s = (num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10)/10
    print("this is what they add up to")
    print(s)
    return s

    #The first if statement should be an if statement, not an elif statement. Since this is a new function, it's a new if statement.
    if choice == '2':
        print(ans2(num1, num2, num3, num4, num5, num6, num7, num8, num9, num10))

    elif choice == '3':
        print(num1,"*", num2, num3, num4, num5, num6, num7, num8, num9, num10,"=", multiply(num1, num2, num3, num4, num5, num6, num7, num8, num9, num10))
        elif choice == '4':
        quit()
</code></pre>
</div>
<span class="comment-copy">You should clean up the code sample first. There is a function definition inside the if-elif-block (with wrong indentation).</span>
<span class="comment-copy">Lots of errors in your code. What <code>ans1=ans1</code> and <code>ans2=ans2</code> is supposed to do? what about <code>num1 *  num2, num3, num4, num5, num6, num7, num8, num9, num10</code>. It will multiply only the two first elements and return a tuple... And the errors go on</span>
<span class="comment-copy">We could help, but that would mean we have to start with the basics of Python. There is a <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">tutorial</a> for that.</span>
<span class="comment-copy">Pro-tip: you almost certainly got your -5 for the title, which is 100% begging and 0% problem description (I didn't vote, for what it's worth).</span>
<span class="comment-copy">hi Jurgy I tried your code however I have an error in line 15</span>
<span class="comment-copy">It would help if you tell me what your line 15 is since the code in my answer is not one blob. Furthermore the exact error would useful to know.</span>
<span class="comment-copy">thanks for the help I'm just wondering why it doesn't give me an average as it just prints the numbers</span>
