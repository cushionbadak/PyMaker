<div class="post-text" itemprop="text">
<p>Take in two numbers and a letter. If the letter is "a", the numbers will be added, if "s", subtracted, if "m", multiplied, and if "d", divided.</p>
<p>This is what I have:  </p>
<pre><code>num1 = int(input("please enter the first number"))
num2 = int(input("please enter the second number"))
lettler = input("please enter the operation")

a = int(num1 + num2)
s = int(num1 - num2)
m = int(num1 * num2)
d = int(num1 / num2)

if lettler + str(a):
    print(num1 + num2)
else:
    if lettler + str(s):
        print(num1 - num2)
    else:
        if lettler + str(m):
            print(num1 * num2)
        else:
            if lettler + str(d):
                print(float(num1) / num2)
</code></pre>
<p>But my professor is telling me it is wrong. What can I do to fix it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your real problem here is that you're thinking out of order. You read the problem, and then started writing a solution before you <em>really</em> understood what it was asking for. That's actually really common to do when you see a big blob of text, and it takes practice and skill to go from there to a correctly working program.</p>
<p>Let's take this step by step:</p>
<blockquote>
<p>Take in two numbers and a letter. If the letter is "a", the numbers will be added, if "s", subtracted, if "m", multiplied, and if "d", divided.</p>
</blockquote>
<p>Here's the assignment. Rather than leave it in this form, let's convert it to a form that's easier to think about piece by piece:</p>
<ul>
<li>Take in two numbers and a letter</li>
<li>if the letter is 'a', the numbers will be added</li>
<li>if the letter is 's', subtracted</li>
<li>if 'm', multiplied</li>
<li>and if 'd', divided</li>
</ul>
<p>You'll notice that I didn't change any of the text here, I just shifted the formatting around. If you read the two, you'll see that there's no difference between them.</p>
<p>Now we can think about turning <em>that</em> into code, because it's layed out like code. You may have heard the term "pseudocode", which means "something that is code-like". We could even do that here.</p>
<pre><code>#  Take in two numbers and a letter
num_one, num_two, letter = get_two_numbers_and_letter()

if letter is a:  # if the letter is 'a'
    print(num_one+num_two)   # the numbers will be added
if letter is s:  # if the letter is 's'
    print(num_one-num_two)   # the numbers will be subtracted
if letter is m:  # if 'm'
    print(num_one*num_two)   # multiplied
if letter is d:  # and if "d", divided
    print(num_one/num_two)
</code></pre>
<p>You'll notice that this already looks an awful lot like Python. We can clean it up a little:</p>
<pre><code># take in two numbers
num_one = int(input('First number: '))
num_two = int(input('Second number: '))
# and a letter
letter = input('(a)dd, (s)ubtract, (m)ultiply, or (d)ivide? ')

# if the letter is 'a', the numbers will be added
if letter == 'a':
    print(num_one + num_two)
# if the letter is 's', subtracted
if letter == 's':
    print(num_one - num_two)
# if 'm', multiplied
if letter == 'm':
    print(num_one * num_two)
# and if 'd', divided
if letter == 'd':
    print(num_one / num_two)
</code></pre>
<p>Of course <em>now</em> the comments are a bit superfluous - all they describe is exactly what the code is doing. We're also using <code>if</code> instead of <code>elif</code>, which is a bit ambiguous and less efficient (not that that really matters at this point, but it's still true). So let's clean up the code just a little bit more:</p>
<pre><code>num_one = int(input('First number: '))
num_two = int(input('Second number: '))
letter = input('(a)dd, (s)ubtract, (m)ultiply, or (d)ivide? ')

if letter == 'a':
    print(num_one+num_two)
elif letter == 's':
    print(num_one-num_two)
elif letter == 'm':
    print(num_one*num_two)
elif letter == 'd':
    print(num_one/num_two)
else:
    print("I'm sorry, I don't recognize letter", repr(letter))
</code></pre>
<h1>Bonus - On Debugging</h1>
<p>If your professor has not been teaching you about the REPL then they're doing you a disservice. The REPL is <em>great</em>, and especially for beginners. You can experiment and get feedback immediately. Let's consider part of your original code:</p>
<pre><code>num1 = int(input("please enter the first number"))
num2 = int(input("please enter the second number"))
lettler = input("please enter the operation")

a = num1+num2

if lettler + str(a):
    print(num1 + num2)
</code></pre>
<p>You could just copy and paste this into the REPL, or even better, skip out on the input part, and just assign the values you want:</p>
<pre><code>&gt;&gt;&gt; num1 = 3
&gt;&gt;&gt; num2 = 5
&gt;&gt;&gt; lettler = 'a'
&gt;&gt;&gt; a = num1 + num2
&gt;&gt;&gt; if lettler + str(a):
...  print(num1 + num2)
...
8
</code></pre>
<p>Great! We got what we expected! But... that's not actually how you verify an experiment. You have to design something that should <em>fail</em>. So what if we try <code>lettler = 's'</code>?</p>
<pre><code>&gt;&gt;&gt; if lettler + str(a):
...  print(num1+num2)
...
8
</code></pre>
<p>Huh. Well, <em>that's</em> not right. We should have just got nothing. Luckily, this is pretty simple, it's just an <code>if</code> statement and a call to the <code>print</code> function. We know it's not the <code>print</code> that's the problem, our code never should have made it to that point. So let's check on what's in the <code>if</code> statement:</p>
<pre><code>&gt;&gt;&gt; lettler + str(a)
's8'
</code></pre>
<p>Oh. That's a string. Hm. It's not an empty string, and it's true. Maybe you remember this from class, but maybe you don't. So let's go to google and type in 'python why is my non-empty string true?'</p>
<p>When I do that the first result I get is <a href="https://stackoverflow.com/a/9573259/344286">https://stackoverflow.com/a/9573259/344286</a> Which does a pretty good job of explaining it, and better yet, it even links us to the <a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow noreferrer">official documentation</a> that tells us:</p>
<blockquote>
<p>By default, an object is considered true... </p>
<p>Here are most of the built-in objects considered false:</p>
<p>...
  empty sequences and collections: <code>''</code>...</p>
</blockquote>
<p>Ahh! So because our string is not empty (<code>'s8'</code>) it's going to evaluate to <code>True</code>! Well, okay. So what do we <em>actually</em> want to do instead? We probably don't want to be adding strings together. Can we compare things instead? What if we try <code>==</code>?</p>
<pre><code>&gt;&gt;&gt; lettler = 'a'
&gt;&gt;&gt; lettler == str(a)
False
</code></pre>
<p>Hm. Well, that's not what we expected, was it? I guess let's see what the values are:</p>
<pre><code>&gt;&gt;&gt; lettler
'a'
&gt;&gt;&gt; a
8
</code></pre>
<p>Oh. Well yeah, those aren't equal! And <code>a</code> isn't the letter <code>'a'</code>. Oh that's right! We said that <code>a = num1 + num2</code>, so of course it's not a letter. Maybe in the future we shouldn't use letters for variable names. If we take a step back and think about what we <em>want</em> (<code>if the letter is "a" the numbers should be added</code>) then we have the answer. We want to compare <code>lettler</code> to <code>"a"</code>:</p>
<pre><code>&gt;&gt;&gt; if lettler == 'a':
...  print(num1 + num2)
...
8
&gt;&gt;&gt; lettler = 's'
&gt;&gt;&gt; if lettler == 'a':
...  print(num1 + num2)
...
&gt;&gt;&gt;
</code></pre>
<p>Ah. Perfect!</p>
</div>
<div class="post-text" itemprop="text">
<p>An if statement works by testing if the expression you put after the <code>if</code> keyword is true. What you’re doing is adding two strings. In python, a string with characters will always come out to true, thus, the first if is always executed. What I have done is modify your conditions to match what you want: </p>
<pre><code>num1 = int(input("please enter the first number: "))
num2 = int(input("please enter the second number: "))
lettler = input("please enter the operation: ")

if lettler == 'a':
    print(int(num1 + num2))
elif lettler == 's':
    print(int(num1 - num2))
elif lettler == 'm':
    print(int(num1 * num2))
elif lettler == 'd':
    try:
        print(float(num1 / num2))
    except ZeroDivisionError:
        print('You tried to divide by zero')
</code></pre>
<p>See how I test if <code>lettler</code> (your operation input) is equal to the corresponding letter? That’s what you want. I also added a try/except that makes sure your program doesn’t crash if you divide by zero. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>num1 = int(input("please enter the first number"))
num2 = int(input("please enter the second number"))
lettler = input("please enter the operation")

a = int(num1 + num2)
s = int(num1 - num2)
m = int(num1 * num2)
d = int(num1 / num2)

if lettler == "a":
    print(num1 + num2)
elif lettler == "s":
    print(num1 - num2)
elif lettler == "m":
    print(num1 * num2)
elif lettler == "d":
    print(float(num1) / num2)
</code></pre>
</div>
<span class="comment-copy">You shouldn't need your professor to tell you this is wrong; simply running it would have done so.</span>
<span class="comment-copy">What do you expect the <code>lettler + str(a)</code> in your <code>if</code> to become?</span>
<span class="comment-copy">@WilnnyAbreu: What do you expect <code>lettler + str(a)</code> to produce?  Under what circumstances would it ever be false?  If you were to <i>speak aloud</i> the condition you want to check in your <code>if</code> statements, what would that description be?  Do your <code>if</code> statements currently check that condition?</span>
<span class="comment-copy">@WilnnyAbreu: Why?  What would <code>str(a)</code> produce?  Put that exact operation in your code and output the result, observe what it produces.  Ask yourself <i>why</i> it would do that.  Ask yourself what the <code>a</code> variable is and where it comes from.  You have to think logically about this, you can't just type code-like things and expect the system to know what you mean.  Ask yourself, what is the difference between the variable <code>a</code> and the string <code>"a"</code>?</span>
<span class="comment-copy">Side note, unrelated to the specific problem being faced... Currently your code produces all possible calculations and <i>then</i> attempts to determine which calculation to output.  This will fail spectacularly if anybody ever tries to add a zero to another number, an operation which <i>shouldn't</i> fail.  Don't perform the calculation until you determine what calculation the user asked you to perform.</span>
<span class="comment-copy">I knew that would happen, in fact I tested for it. I just wanted to preserve his code. I’ll edit.</span>
<span class="comment-copy">That's almost correct, but you should get rid of that middle section from <code>a = int(num1 + num2)</code> to <code>d = int(num1 / num2)</code>. You don't need it, and you don't do anything with the values it calculates.</span>
<span class="comment-copy">BTW, in Python 3 you don't need to do <code>float(num1) / num2</code>, you can just do <code>num1 / num2</code> and it will give the correct result.</span>
<span class="comment-copy">@wilnnyadreu print a,b,c and d respectively not the operations they represent.</span>
