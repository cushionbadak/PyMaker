<div class="post-text" itemprop="text">
<p>I'm having trouble with this function. It doesn't work when I try to run it.
Can anyone help me fix it please?</p>
<pre><code>def string_avg_update(L):
    '''(list of str) -&gt; NoneType
    Given a list of strings where each string has the format:
    'name, grade, grade, grade, ...' update  the given
    list of strs to be a list of floats where each item
    is the average of the corresponding numbers in the
    string. Note this function does NOT RETURN the list.
    &gt;&gt;&gt; L = ['Anna, 50, 92, 80', 'Bill, 60, 70', 'Cal, 98.5, 100, 95.5, 98']
    &gt;&gt;&gt; string_avg_update(L)
    &gt;&gt;&gt; L
    [74.0, 65.0, 98.0]
    '''
    average = 0
    for item in L:
        if item.isdigit():
            average = sum(item)/len(item)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>We loop over the list using <code>enumerate</code>. This gives us the index of each list item (<code>idx</code>) and the string itself (<code>student</code>).</p>
<p>Then we call split on each string to extract its contents, saving the first item as <code>name</code>, and the rest as <code>data</code>. Then we convert the strings in <code>data</code> to floats. Then we compute the average of those floats. And then we save the average back into the appropriate list item.</p>
<pre><code>def string_avg_update(L):
    '''(list of str) -&gt; NoneType
    Given a list of strings where each string has the format:
    'name, grade, grade, grade, ...' update  the given
    list of strs to be a list of floats where each item
    is the average of the corresponding numbers in the
    string. Note this function does NOT RETURN the list.
    &gt;&gt;&gt; L = ['Anna, 50, 92, 80', 'Bill, 60, 70', 'Cal, 98.5, 100, 95.5, 98']
    &gt;&gt;&gt; string_avg_update(L)
    &gt;&gt;&gt; L
    [74.0, 65.0, 98.0]
    '''
    for idx, student in enumerate(L):
        name, *data = student.split(',')
        data = [float(u) for u in data]
        L[idx] = sum(data) / len(data)

L = ['Anna, 50, 92, 80', 'Bill, 60, 70', 'Cal, 98.5, 100, 95.5, 98']
print(L)

string_avg_update(L)
print(L)
</code></pre>
<p><strong>output</strong></p>
<pre><code>['Anna, 50, 92, 80', 'Bill, 60, 70', 'Cal, 98.5, 100, 95.5, 98']
[74.0, 65.0, 98.0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Update</strong></p>
<p>Now that I understand what you're trying to do (with @PM 2Ring's help), here's a completely different answer (the problem is actually <em>much</em> simpler than I original thought).  It would have helpful if you responded to either my original answer or various comments from myself and others, and explained what you were trying to do more clearly...</p>
<pre><code>def string_avg_update(L):
    '''(list of str) -&gt; NoneType

    Given a list of strings where each string has the format:
    'name, grade, grade, grade, ...' update  the given
    list of strs to be a list of floats where each row
    is the average of the corresponding numbers in the
    string. Note this function does NOT RETURN the list.

    &gt;&gt;&gt; L = ['Anna, 50, 92, 80', 'Bill, 60, 70', 'Cal, 98.5, 100, 95.5, 98']
    &gt;&gt;&gt; string_avg_update(L)
    &gt;&gt;&gt; L
    [74.0, 65.0, 98.0]
    '''
    # Replace contents of L with average of numeric values in each string elem.
    for i, record in enumerate(L):
        grades = [float(grade) for grade in record.split(',')[1:]]
        L[i] = sum(grades) / len(grades)

    # Function will implicitly return None since there's no return statement.

if __name__ == '__main__':

    L = ['Anna, 50, 92, 80', 'Bill, 60, 70', 'Cal, 98.5, 100, 95.5, 98']
    print(L)
    string_avg_update(L)
    print(L)  # -&gt; [74.0, 65.0, 98.0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def string_avg_update(L):
    for x in range(len(L)):
        split = L[x].split(',')
        for y in range(1, len(split)):
            split[y] = float(split[y])
        summation = sum(split[z] for z in range(1, len(split)))
        average = summation/(len(split)-1)
        L[x] = average

L = ['Anna, 50, 92, 80', 'Bill, 60, 70', 'Cal, 98.5, 100, 95.5, 98']

string_avg_update(L)

print(L)
</code></pre>
<p>Returns:</p>
<pre><code>[74.0, 65.0, 98.0]
</code></pre>
<p>After update:</p>
<p>Loop through L and create a new list, split, which splits the elements in L where there are commas. Then change the strings to floats where needed. Then run the summation and average on the floats. Set the element in L to the calculated average.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this.</p>
<pre><code>def string_avg_update(lst):

    for i in range(len(lst[:])):
        grades = lst[i].split(',')[1:]
        float_grades = [float(grade) for grade in grades]        
        average = sum(float_grades) / len(float_grades)        
        lst[i] = average



L = ['Anna, 50, 92, 80', 'Bill, 60, 70', 'Cal, 98.5, 100, 95.5, 98']
string_avg_update(L)    

&gt;&gt;&gt; print(L)
[74.0, 65.0, 98.0]
</code></pre>
<p>I know <code>enumerate()</code> works better for this.</p>
</div>
<span class="comment-copy">So what exactly is the problem?</span>
<span class="comment-copy">I'm not getting [74.0, 65.0, 98.0], which was what I want to get from the example in the docstring</span>
<span class="comment-copy">Firstly, you need to split each of those string so you can extract the data from them. Then you need to convert the stuff after the name to floats. Then you can do arithmetic on those floats. And then you can save the result back into the appropriate list item. Trying writing some code that does those things.</span>
<span class="comment-copy">BTW, you don't want <code>.isdigit()</code> for this. You know the format of those strings. There's no need to test if the grades are numbers, for the purpose of this assignment you can assume that they are.</span>
<span class="comment-copy">@kbball: There's no error description beyond "it doesn't work", and the question title demonstrates no understanding of what the task even is.</span>
<span class="comment-copy">What does enumerate mean</span>
<span class="comment-copy">@dg123 "<code>enumerate</code> ... gives us the index of each list item (<code>idx</code>) and the string itself (<code>student</code>)". Please see <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#enumerate</a> And in future, you should try to find the answer to such questions by searching the docs. If you don't understand what the docs are saying, <i>then</i> ask here, quoting  the docs in your question, so that people know you aren't just being lazy.</span>
<span class="comment-copy">Ya, I'll be sure to check that out next time, thanks</span>
<span class="comment-copy">What does  zip mean? like what does it do?</span>
<span class="comment-copy">It's <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">right here</a> in the  <a href="https://docs.python.org/3/index.html" rel="nofollow noreferrer">online documentation</a>. In a nutshell it takes two or more lists and generates (<code>yield</code>s) groups (tuples) of elements extracted from the same position in each of the items in each of its input argument sequences. i.e. <code>zip([1, 2, 3], [4, 5, 6])</code> returns an iterable the yields <code>(1, 4)</code>, <code>(2, 5)</code>, then <code>(3, 6)</code> sucessively. If you wrap it in a <code>list()</code> constructor call, you'll end up with a list containing <code>[(1, 4), (2, 5), (3, 6)]</code>.</span>
<span class="comment-copy">dg123: Does that answer your question about <code>zip()</code>? Is my answer producing the correct results? If not, please edit your question and describe how the values wanted are calculated from the input values.</span>
<span class="comment-copy">Why are you finding the means of the columns? You just need the mean of each row.</span>
<span class="comment-copy">@PM2Ring: Thanks. I finally figured out how the OP gets the values by reading your answer. Much simpler problem than doing what's currently in my own. Feel a little foolish for not realizing it myself, but they could have cleared things up earlier on by adding a single sentence to their question...</span>
<span class="comment-copy">Is the for z in range statement in a new line?</span>
<span class="comment-copy">I get the names for this one, when I run it , but I only want the averages</span>
<span class="comment-copy">No the for z can be written just like that... The code works for me. Does your actual data not match what you have shown in L?</span>
<span class="comment-copy">I want something like this &gt;&gt;&gt; L = ['Anna, 50, 92, 80', 'Bill, 60, 70', 'Cal, 98.5, 100, 95.5, 98']     &gt;&gt;&gt; string_avg_update(L)     &gt;&gt;&gt; L     [74.0, 65.0, 98.0] But it doesn't work for me. I mean the numbers after L</span>
<span class="comment-copy">It also says there's an error when trying to test L</span>
<span class="comment-copy">The function was supposed to mutate the input list, not make a new one.</span>
<span class="comment-copy">@user2357112, oh, sorry I didn't notice that :) Changed the code accordingly.</span>
