<div class="post-text" itemprop="text">
<p>I am working on a project, a simple lexical analyzer.</p>
<p>I must read lines and store tokens and what line they are on in a 'Symbol Table'. I'm having trouble about how to create such a table with python.</p>
<p>I have tried the following:</p>
<pre><code>class Table:
  def __init__(self):
    self.token = ""
    self.line = []
</code></pre>
<p>What would I need to do to make a sort of list of the class <code>Table()</code>?</p>
<p>For example, if I read in a token, <code>variable</code>, then another token, <code>variable2</code>, how could I create a list so I don't have to keep creating instances of <code>Table()</code>? </p>
<p>Sample output:</p>
<blockquote>
<p>variable is an Identifier on line 1.</p>
<p>variable2 is an Identifier on line 2.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<h1>Standard Python classes</h1>
<p>Before you define any new class, you could use the existing Python classes. If I understand your problem correctly, a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a> with variable names as key and a list of lines would work fine:</p>
<pre><code>from collections import defaultdict
table = defaultdict(list)

table['variable1'].append(1)
table['variable2'].append(2)
table['variable1'].append(2)

print(table)
# defaultdict(&lt;class 'list'&gt;, {'variable1': [1, 2], 'variable2': [2]})
</code></pre>
<p>For sentences, you could write:</p>
<pre><code>for variable, lines in table.items():
    lines_as_str = ' and '.join('line %d' % line for line in lines)
    print("%s is an identifier on %s" % (variable, lines_as_str))
</code></pre>
<p>It outputs:</p>
<pre><code>variable1 is an identifier on line 1 and line 2
variable2 is an identifier on line 2
</code></pre>
<h2>Custom objects</h2>
<p>Here's a way to define custom classes and objects:</p>
<pre><code>class Token:
    def __init__(self, name):
        self.name = name
        self.lines = []

    def add_line(self, line):
        self.lines.append(line)

    def __str__(self):
        lines_as_str = ' and '.join('line %d' % line for line in self.lines)
        return "%s is an identifier on %s" % (self.name, lines_as_str)

class Table(dict):
    def tokens(self):
        return self.values()

    def get_token(self, name):
        return self.get(name) or self.setdefault(name, Token(name))

    def add_token_on_line(self, name, line):
        self.get_token(name).add_line(line)

    def __str__(self):
        return "\n".join(str(token) for token in self.tokens())


table = Table()
table.add_token_on_line('variable1', 1)
table.add_token_on_line('variable2', 1)
table.add_token_on_line('variable1', 3)

print(table)
</code></pre>
<p>It outputs:</p>
<pre><code>variable1 is an identifier on line 1 and line 3
variable2 is an identifier on line 1
</code></pre>
</div>
<span class="comment-copy">Thank you! This will definitely get me on my way!!!</span>
