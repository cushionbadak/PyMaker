<div class="post-text" itemprop="text">
<p>I can achieve what I need using <code>sys.argv</code>, but am unable to find the argparse equivalents to allowing this functionality.<br/>
Currently with <code>sys.argv</code> I am conveniently able to allow the program to run commands in such a manner:  </p>
<pre><code>python program.py ls
python program.py del input
python program.py arg
python program.py input input2  
</code></pre>
<p><code>ls</code>--keyword argument that doesn't change--it reaches into a dictionary and lists its keys.<br/>
<code>del input</code>--<code>del</code> is a keyword which specifies that the user's <code>input</code> is the key that should be deleted from a dictionary.<br/>
<code>arg</code>--can be any one of a multitude of keys within a dict.<br/>
<code>input input2</code>--is a completely new key and value that is added to the dictionary.  </p>
<p>The dict-related information is provided only to illustrate what the arguments do.  </p>
<p>In addition to being dashless, multiple arguments are allowed to be in the first position. Furthermore, two of the first-position arguments(<code>input</code>, <code>del</code>) can take a completely new and unspecified second-position argument up to the user.   </p>
</div>
<div class="post-text" itemprop="text">
<p>At a first glance this looks like a subparsers case, with 'ls','del', etc as commands.  I just sketched out an example where the subparsers are defined in a class</p>
<p><a href="https://stackoverflow.com/questions/46595691/how-to-design-object-oriented-subparsers-for-argparse">How to design object oriented subparsers for argparse?</a></p>
<p>But these inputs complicate that:</p>
<pre><code>python program.py &lt;key&gt;
program.py &lt;key value&gt;
</code></pre>
<p>It's not clear whether the <code>key</code> values come from a programmer defined dictionary, or are just arbitrary values from the user.</p>
<p>Keys from a programmer defined dictionary could be added as subparsers, as shown in my example.</p>
<p>But arbitrary 'key value' entries require a different definition.  There have been a lot of questions were people ask to input some sort of <code>key:value</code> or <code>key=value</code> pairs.  <code>argparse</code> does not handle this gracefully.  It is better for cases where the programmer wants full control over the inputs.</p>
<p>Perhaps the simplest <code>argparse</code> approach is</p>
<pre><code>parser.add_argument('cmd')    # simple required 1 term positional
parser.add_argument('value', nargs='?')   # optional term
</code></pre>
<p>and you do your own testing of the <code>args.cmd</code> and <code>args.value</code> strings.  That doesn't add much to evaluating <code>sys.argv[1]</code> and <code>sys.argv[2:]</code>.</p>
<p><code>cmd</code> with <code>choices</code> behaves a lot like a subparser <code>cmd</code>, restricting the value to a defined set of strings.</p>
<p><code>optparse</code> handles the flagged (--) arguments, and passes all positional back as a list.  <code>argparse</code> seeks to enhance that by providing the <code>nargs</code> parameter and the ability to define some <code>positionals</code>.  But it is still better for handling lots of flagged arguments.  Content testing for positionals is limited.</p>
<p>In sum, porting to <code>argparse</code> might not buy you anything.  You are working against its standards rather than with them.</p>
<hr/>
<p>Script comparing argparse and sys.argv parsing</p>
<pre><code>import sys

key = None
if sys.argv[1:]:
    key = sys.argv[1]
value = sys.argv[2:]

print(key, value)

import argparse

parser = argparse.ArgumentParser()
parser.add_argument('key')
parser.add_argument('value', nargs='*')
args = parser.parse_args()
print(args)
</code></pre>
<p>Here I'm putting all strings except the first in a list.  Use '?' to optionally just accept one string.</p>
<p>Sample runs:</p>
<pre><code>1111:~/mypy$ python stack46631607.py 
(None, [])
usage: stack46631607.py [-h] key [value [value ...]]
stack46631607.py: error: too few arguments

1111:~/mypy$ python stack46631607.py ls
('ls', [])
Namespace(key='ls', value=[])

1112:~/mypy$ python stack46631607.py del input
('del', ['input'])
Namespace(key='del', value=['input'])

1112:~/mypy$ python stack46631607.py key 1 2 3
('key', ['1', '2', '3'])
Namespace(key='key', value=['1', '2', '3'])

1112:~/mypy$ python stack46631607.py -h
('-h', [])

usage: stack46631607.py [-h] key [value [value ...]]

positional arguments:
  key
  value

optional arguments:
  -h, --help  show this help message and exit
</code></pre>
<p><code>argparse</code> adds error checking (i.e. the missing first string), and a help.</p>
<p>Deciding what to do with the <code>args.key</code> value is up to you, as is deciding whether it requires/accepts a <code>value</code> list.  As best I can tell your handling of <code>ls</code> is the same as 'arg', and 'del' is like 'input'.</p>
</div>
<span class="comment-copy">Sounds like you want to use <a href="https://docs.python.org/3/library/argparse.html#partial-parsing" rel="nofollow noreferrer"><i>partial parsing</i></a>.</span>
<span class="comment-copy">Unfortunately, it appears that subparsers interfere with partial parsing, so I deleted my answer. It probably takes a custom action instead.</span>
<span class="comment-copy">@MartijnPieters right. <code>ls</code> with subparser works as intended but I was having trouble adding the second input to <code>del</code>. Have any other suggestions?</span>
<span class="comment-copy">Adding additional arguments to a subparser is easy enough (just use <code>subparser_for_del.add_argument('key')</code>); the issue is with adding what is essentially a wildcard subparser.</span>
<span class="comment-copy">@MartijnPieters am able to get <code>del input</code> to work with <code>parser_del = subparsers.add_parser("del")        parser_del.add_argument("input", choices=[acc for acc in account_dict])     args = vars(parser.parse_args())     if args["input"] in account_dict:         delete(args["input"])</code>    Now wondering if there's a hack thatll accept two wildcards for inputting a new {key:value}</span>
<span class="comment-copy">so argparse isn't the way to go.. What is?</span>
<span class="comment-copy">What's wrong with what you are already doing with <code>sys.argv</code>?</span>
<span class="comment-copy">I thought nothing--until i got it code-reviewed and people firmly suggested i don't handle my own arguments. Currently it's a bunch of if-statements that measure the len(sys.argv) and performs a function depending on the user-inputted string.</span>
<span class="comment-copy">@Simonsays, is the specification your choice, or given to you?  <code>argparse</code> generally follows the <code>POSIX</code> style of arguments, with a few simple positional arguments, and many optional ones (flagged).  But also keep in mind that the main purpose of the parser is to figure out what the user wants (parsing), not executing.  Usually you still need <code>if</code> statements to act on the parsed input.</span>
<span class="comment-copy">@Simonsays, I added a simple comparison of <code>sys.argv</code> and <code>argparse</code>.</span>
