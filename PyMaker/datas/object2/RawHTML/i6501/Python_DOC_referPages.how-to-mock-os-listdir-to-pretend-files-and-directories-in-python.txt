<div class="post-text" itemprop="text">
<p>I have a proprietary repository format and I'm trying to develop a Python module to process these repositories. Repo format goes as:</p>
<pre><code>/home/X/
       |
       + alpha/
       |
       + beta/
       |
       + project.conf
</code></pre>
<p>Here, <code>X</code> is a project. <code>alpha</code> and <code>beta</code> are folders inside this project and they represent <em>groups</em> in this project. A <em>group</em> is a container in this repo and what it represents is really not relevant for this question. The repo <code>X</code> also has files in its root level; <code>project.conf</code> is an example of such a file.</p>
<p>I have a class called <code>Project</code> that abstracts projects such as <code>X</code>. The <code>Project</code> class has a method <code>load()</code> that builds an in-memory representation.</p>
<pre><code>class Project(object):

    def load(self):
        for entry in os.listdir(self.root):
            path = os.path.join(self.root, entry)
            if os.path.isdir(path):
                group = Group(path)
                self.groups.append(group)
                group.load()
            else:
                # process files ...
</code></pre>
<p>To unit test the <code>load()</code> method by mocking the file system, I have:</p>
<pre><code>import unittest
from unittest import mock
import Project

class TestRepo(unittest.TestCase):

    def test_load_project(self):
        project = Project("X")

        with mock.patch('os.listdir') as mocked_listdir:
            mocked_listdir.return_value = ['alpha', 'beta', 'project.conf']
            project.load()
            self.assertEqual(len(project.groups), 2)
</code></pre>
<p>This does mock <code>os.listdir</code> successfully. But I can't trick Python to treat <code>mocked_listdir.return_value</code> as consisting of files and directories.</p>
<p>How do I mock either <code>os.listdir</code> or <code>os.path.isdir</code>, <strong>in the same test</strong>, such that the test will see <code>alpha</code> and <code>beta</code> as directories and <code>project.conf</code> as a file?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="http://jmcgeheeiv.github.io/pyfakefs/release/index.html" rel="noreferrer">pyfakefs</a>, it is a very handy lib to test operates on a fake file system.</p>
<p>if you use pytest, it has a plugin, all file system functions already got patched, you just need to use its <code>fs</code> fixture:</p>
<pre><code>import os

def test_foo(fs):
    fs.CreateFile('/home/x/alpha/1')
    fs.CreateFile('/home/x/beta/2')
    fs.CreateFile('/home/x/p.conf')    
    assert os.listdir('/home/x/')) == ['alpha', 'beta', 'p.conf']
</code></pre>
<p>or if you prefer <code>unittest</code>:</p>
<pre><code>import os
import unittest

from pyfakefs import fake_filesystem_unittest

class TestRepo(fake_filesystem_unittest.TestCase):

    def setUp(self):
        self.setUpPyfakefs()

    def test_foo(self):
        os.makedirs('/home/x/alpha')
        os.makedirs('/home/x/beta')
        with open('/home/x/p.conf', 'w') as f:
            f.write('foo')
        self.assertEqual(os.listdir('/home/x/'), ['alpha', 'beta', 'p.conf'])


if __name__ == "__main__":
    unittest.main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I managed to achieve the desired behavior by passing an iterable to the <code>side_effect</code> attribute of the mocked <code>isdir</code> object.</p>
<pre><code>import unittest
from unittest import mock
import Project

class TestRepo(unittest.TestCase):

  def test_load_project(self):
      project = Project("X")

      with mock.patch('os.listdir') as mocked_listdir:
        with mock.patch('os.path.isdir') as mocked_isdir:
          mocked_listdir.return_value = ['alpha', 'beta', 'project.conf']
          mocked_isdir.side_effect = [True, True, False]
          project.load()
          self.assertEqual(len(project.groups), 2)
</code></pre>
<p>The key is the <code>mocked_isdir.side_effect = [True, True, False]</code> line. The boolean values in the iterable should match the order of directory and file entries passed to the <code>mocked_listdir.return_value</code> attribute.</p>
</div>
<div class="post-text" itemprop="text">
<p>It will depend, of course, on exactly which <code>os</code> functions you use, but it looks like <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch.multiple" rel="nofollow noreferrer"><code>mock.patch.multiple</code></a> on <code>os</code> is just what you need.  (Note that you may not need to patch <code>path</code>; many of its functions are lexical-only and do not care about the actual filesytem.)</p>
</div>
<span class="comment-copy">Nothing you do to <code>os.listdir</code> is going to make other functions think those names name real files and directories. <code>os.listdir</code> just spits out a bunch of names.</span>
<span class="comment-copy">I agree with what @user2357112 said. Do you have alpha &amp; beta as directories in the project? If so you really don't need to mock <code>os.path.isdir</code>.</span>
<span class="comment-copy">alpha and beta are not part of the project. They are dummy directories to explain the structure of the repository processed by this project.</span>
