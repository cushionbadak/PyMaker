<div class="post-text" itemprop="text">
<p>I'm making a sort of history generation program in python heavily inspired by Dwarf Fortress. In the program, I want a list of events, in that list being smaller lists such as 'death_events' and 'war_events' etc.</p>
<p>The problem I am having is that I would like to be able to look through these lists to see events in the world, and I don't know what way to save that sort of information to a list. e.g:</p>
<pre><code>events = []
learning_events = []

print('The', i.race, i.name, 'has learned about', i.knowledge, 'from the god of', god_teacher.sphere + ',', god_teacher.name)

learning_events.append('In the year', world_age, 'the', i.race, i.name, 'learned about', i.knowledge, 'from the god', god_teacher.name, 'a god of', god_teacher.sphere)
events[0] = learning_events
</code></pre>
<p>I thought I would somehow be able to save that to a list, but I get:</p>
<pre><code>TypeError: append() takes exactly one argument (11 given)
</code></pre>
<p>I'm not sure if using a variable to put this information into a list as this "event" could happen many times with different information each time.</p>
</div>
<div class="post-text" itemprop="text">
<p>You'll have to use the dict otherwise you'll have multiple learning lists in the event list.</p>
<p>The best way to write the string would be to use <code>.format()</code> on the string:</p>
<pre><code># do this once, so you don't overwrite previous events
events = {}
events['learning'] = []

learn_skill_utterance = "The {i.race} {i.name} has learned about {i.knowledge} from the god of {god_teacher.sphere}".format(i=dwarf, god_teacher=god)

# add string to list of events
events['learning'].insert(0, learn_skill_utterance)
</code></pre>
<p>This way an object will fill the parameters in the string. This can allow you to write these utterances much quicker.</p>
<p>Here is a little OOP example:</p>
<pre><code>In [1]: class Dwarf:
   ...:     def __init__(self, name, size):
   ...:         self.name = name
   ...:         self.size = size
   ...:

In [2]: happy = Dwarf('Happy', 8)

In [3]: happy.size
Out[3]: 8

In [4]: "{dwarf.name} is size: {dwarf.size}".format(dwarf=happy)
Out[4]: 'Happy is size: 8'
</code></pre>
<p>I wouldn't make <code>knowledge</code> that is being learnt, as a dwarf attribute.</p>
<hr/>
<h3>Side note:</h3>
<p>If you append strings to the list containing <code>{dwarf.name}</code> without applying <code>.format()</code> on them, you can always apply <code>.format(dwarf=happy)</code> later when you need to use it.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are multiple ways of combining different <code>str</code>s into a single one, as you want to do. <code>print()</code> by default combines all its arguments into a <code>str</code> but this is not the case for most of the functions.</p>
<p>The most pythonic way to join <code>str</code>s is <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer"><code>str.format()</code></a>:</p>
<pre><code>"This is my sentence with {} placeholders that I can replace by whatever I like".format("bracket")
</code></pre>
<p>Basically it replaces {} with the first argument. You can use names for the variables:</p>
<pre><code>"This is {first} sentence with {second} placeholders".format(first="another", second="bracket")
</code></pre>
<p>Or you can change the order:</p>
<pre><code>"This is {1} sentence with {0} placeholders".format("bracket", "another")
</code></pre>
<p>There are multiple more formatting options such as choosing the amount of decimals for floats and so on.</p>
<p>In your case you could use:</p>
<pre><code>learning_events.append("In the year {} the {} {} learned about {} from the god {}, a god of {}.".format(world_age, i.race, i.name, i.knowledge, god_teacher.name, god_teacher.sphere))
</code></pre>
</div>
<span class="comment-copy">It seems like you want to combine all those pieces into one string and add that string to <code>learning_events</code>. See <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer"><code>.format</code></a></span>
<span class="comment-copy">Thank you for your help, I have heard of using that before but didn't know why it was useful or even necessary</span>
<span class="comment-copy">You should consider swapping from a <code>list</code> of <code>list</code> of <code>str</code> to a <code>dict</code> of <code>list</code> of <code>str</code> like so: <code>events = {'learning': ["X learned Y", "Z unlerned W"], "deaths": ["Z drowned", "X was burnt to death"]}</code></span>
