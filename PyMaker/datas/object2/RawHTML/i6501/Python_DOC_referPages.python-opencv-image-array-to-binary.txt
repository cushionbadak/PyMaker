<div class="post-text" itemprop="text">
<p>I have a large image , using cv2 module in python and some coordinates i cropped the image:</p>
<pre><code>  img = cv.imread(image_path)
  crop_img = img[y1:y2,x1:x2]
  cv.imwrite(cropPath, crop_img)
</code></pre>
<p>now the crop_img is a numpy.ndarray type. then I save this image to disk and read its contents in a binary format using an open() function</p>
<pre><code>  with open(cropPath, 'rb') as image_file:
    content = image_file.read()
</code></pre>
<p>and I get the binary representation.
Is there any way to do the above operations without saving the image to disk. Not saving to disk will save a lot of time, I am not able to find any method to do this. if anyone could point in the right direction, that would be helpful.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>found the answer on this thread:</strong>
<a href="https://stackoverflow.com/questions/17967320/python-opencv-convert-image-to-byte-string">Python OpenCV convert image to byte string?</a></p>
<p>converting a image represented through a numpy array into string can be done by using imencode and tostring functions in cv2</p>
<pre><code>&gt;&gt;&gt; img_str = cv.imencode('.jpg', img)[1].tostring()
&gt;&gt;&gt; type(img_str)
 'str'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you use <code>cv2.imwrite()</code>ï¼Œ then you will get an image in image format,such as <code>png, jpg, bmp</code> and so on. Now if you <code>open(xxx,"rb")</code>  as a normal binary file, it will go wrong, because it is <code>AN IMAGE in IMAGE FILE FORMAT</code>.</p>
<p>The simplest way is use <code>np.save()</code> to save the <code>np.ndarray</code> to the disk (<code>serialize</code>) in .npy format. The use <code>np.load()</code> to load from disk (<code>deserialize</code>).</p>
<p>An alternative is <code>pickle.dump()/pickle.load()</code>.</p>
<p>Here is an example:</p>
<pre><code>#!/usr/bin/python3
# 2017.10.04 21:39:35 CST

import pickle 
imgname = "Pictures/cat.jpg"

## use cv2.imread()/cv2.imwrite() 
img = cv2.imread(imgname)

## use np.save() / np.load()
np.save(open("another_cat1.npy","wb+"), img)
cat1 = np.load(open("another_cat1.npy","rb"))

## use pickle.dump() / pickle.load()
pickle.dump(img, open("another_cat2.npy","wb+"))
cat2 = pickle.load(open("another_cat2.npy", "rb"))

cv2.imshow("img", img);
cv2.imshow("cat1", cat1);
cv2.imshow("cat2", cat2);
cv2.waitKey();cv2.destroyAllWindows()
</code></pre>
<p>The result:</p>
<p><a href="https://i.stack.imgur.com/iwOBu.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/iwOBu.png"/></a></p>
</div>
<span class="comment-copy">You can use a <a href="https://docs.python.org/3/library/io.html#io.BytesIO" rel="nofollow noreferrer">io.BytesIO</a> to save the data to a fake file in RAM.</span>
<span class="comment-copy">Why do you need to write to a file?</span>
<span class="comment-copy">When you say <code>binary</code>,  do you mean binary string or numbers or something else?</span>
<span class="comment-copy">By binary i mean binarystring, the output from using 'rb' parameter for open() function</span>
<span class="comment-copy">posted the answer found on another thread, i got tangled in the encoding, thank you guys for help</span>
