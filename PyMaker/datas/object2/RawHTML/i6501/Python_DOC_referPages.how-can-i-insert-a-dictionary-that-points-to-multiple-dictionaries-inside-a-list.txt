<div class="post-text" itemprop="text">
<p>can anyone please help me with the following code:</p>
<pre><code>[{k: {x: y for x, y in b.items()} for b in arg for k in range(len(arg))}]
</code></pre>
<p>Where arg is:</p>
<pre><code>arg = [{"key1": "val1", "key2": "val2"}, {"key1": "val3", "key2": "val4"}]
</code></pre>
<p>The output Im looking for is:</p>
<pre><code>[0: {"key1": "val1", "key2": "val2"}, 1: {"key1": "val3", "key2": "val4"}]
</code></pre>
<p>When I run the above dict comprehension, I get </p>
<pre><code>[0: {"key1": "val3", "key2": "val4"}, 1: {"key1": "val3", "key2": "val4"}]
</code></pre>
<p>Why does the second dict that <code>1:</code> points to gets repeated at the <code>0:</code> spot as well? How can I stop this from happening and have both the nested dicts with their independent values. The keys are the same in both the nested dicts, but the values must differ.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are over-complicating matters. Just use the <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate()</code> function</a>, it produces your key-value pairs <em>out of the box</em>:</p>
<pre><code>dict(enumerate(arg))
</code></pre>
<p><code>dict()</code> takes an iterable of key-value pairs:</p>
<pre><code>&gt;&gt;&gt; arg = [{"key1": "val1", "key2": "val2"}, {"key1": "val3", "key2": "val4"}]
&gt;&gt;&gt; dict(enumerate(arg))
{0: {'key1': 'val1', 'key2': 'val2'}, 1: {'key1': 'val3', 'key2': 'val4'}}
</code></pre>
<p>The dictionaries in <code>arg</code> are not copied; if that's an issue, you can use a <code>map()</code> over <code>dict.copy</code>:</p>
<pre><code>dict(enumerate(map(dict.copy, arg)))
</code></pre>
<p>or use a single dictionary comprehension:</p>
<pre><code>{i: a.copy() for i, a in enumerate(arg)}
</code></pre>
<p>Your code created a double loop; you are essentially doing this:</p>
<pre><code>_dictionary = {}
for b in arg:
    for k in range(len(arg)):
        _dictionary[k] = {x: y for x, y in b.items()}
result = [_dictionary]
</code></pre>
<p>so for every dictionary in <code>arg</code> you create <em>another</em> loop and repeatedly create a dictionary for <code>b</code>. The last such dictionary for <code>k</code> will win, and as the last dictionary in <code>arg</code> is assigned to both <code>0</code> and <code>1</code> it replaces any other dictionary in <code>arg</code> (which where each also assigned to all integer keys before).</p>
<p>You didn't need to use <code>{x: y for x, y in b.items()}</code> either, just <code>b.copy()</code> would have sufficed. I'm also not sure why you put the final result into a list.</p>
</div>
<div class="post-text" itemprop="text">
<p>If I have interpreted this correctly you want a dictionary of dictionaries. This will do that:</p>
<pre><code>{index: val.copy() for index, val in enumerate(arg)}
</code></pre>
<p>Where <code>arg</code> is your predefined dictionary.</p>
<p>EDIT: What user <a href="https://stackoverflow.com/a/46662898/8745437">Martijn Pieters</a> put above is a neat way of doing this!</p>
</div>
<div class="post-text" itemprop="text">
<p>Your code is quite complex. How about:
<code>[{k: arg[k]} for k in range(len(arg))]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Small problem with the output you want. You want a <code>Dictionary</code> while your </p>
<blockquote>
<p>The output Im looking for is:</p>
<p>[0: {"key1": "val1", "key2": "val2"}, 1: {"key1": "val3", "key2":
  "val4"}]</p>
</blockquote>
<p>is a <code>list</code>. So, the valid output should be :</p>
<blockquote>
<p>{0: {'key1': 'val1', 'key2': 'val2'}, 1: {'key1': 'val3', 'key2':
  'val4'}}</p>
</blockquote>
<p>Obtain this with :</p>
<pre><code>{ i:l[i] for i in range(len(l)) }

# OR

{ i:key for i,key in enumerate(l) }
</code></pre>
<p>#driver values </p>
<pre><code>IN : l = [{"key1":"val1", "key2":"val2"}, {"key1":"val3", "key2":"val4"}]
OUT : {0: {'key1': 'val1', 'key2': 'val2'}, 1: {'key1': 'val3', 'key2': 'val4'}}
</code></pre>
<p>Edit: <a href="https://stackoverflow.com/a/46662898/7550472">Martijn Pieters</a> provides shorter method using <code>enumerate</code>. Check it out too.</p>
</div>
<span class="comment-copy">You have a double loop over <code>k</code> and <code>b</code>. Instead you need a single loop <code>for k,b in enumerate(arg)</code>.</span>
<span class="comment-copy">the output you are looking for is not a valid Python object though... And you have a typo in <code>arg</code> (comma needs to be semicolon)</span>
<span class="comment-copy">IMHO your logic is too complex to put into one comprehension. It is not readable anymore and: "Readability counts." â€”The Zen of Python</span>
<span class="comment-copy">@Klaus <code>{k:b for k,b in enumerate(arg)}</code> would be simpler ;)</span>
<span class="comment-copy"><code>dict(enumerate(arg))</code> would do what you want.</span>
<span class="comment-copy">Thanks for explaining that so well. I had not thought about the enumerate function. Thanks again!</span>
