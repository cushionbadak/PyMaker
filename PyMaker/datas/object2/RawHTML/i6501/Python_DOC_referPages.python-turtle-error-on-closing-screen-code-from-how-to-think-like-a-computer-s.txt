<div class="post-text" itemprop="text">
<p>when I run this code</p>
<pre><code>import turtle
import time

def show_poly():
    try:
        win = turtle.Screen()
        tess = turtle.Turtle()
        n = int(input("How many sides do you want in your polygon?"))
        angle = 360 / n
        for i in range(n):
            tess.forward(10)
            tess.left(angle)
        time.sleep(3)
    finally:
        win.bye()

show_poly()
show_poly()
show_poly()
</code></pre>
<p>I get the first call work properly than I get this error</p>
<blockquote>
<p>Traceback (most recent call last):
     File "/home/turte.py", line 19,
      in  show_poly()</p>
<p>File "/home/turte.py", line 8, in show_poly
      tess = turtle.Turtle()</p>
<p>File "/usr/lib/python3.5/turtle.py", line 3816, in <strong>init</strong>
      visible=visible)</p>
<p>File "/usr/lib/python3.5/turtle.py", line 2557, in <strong>init</strong>
      self._update()</p>
<p>File "/usr/lib/python3.5/turtle.py", line 2660, in _update
      self._update_data()</p>
<p>File "/usr/lib/python3.5/turtle.py", line 2646, in _update_data
      self.screen._incrementudc()</p>
<p>File "/usr/lib/python3.5/turtle.py", line 1292, in _incrementudc</p>
<p>raise Terminator turtle.Terminator</p>
</blockquote>
<p>If I understand the problem I cannot create a new screen even if I closed the last.
I run python 3.5</p>
</div>
<div class="post-text" itemprop="text">
<p>The object returned by <code>turtle.Screen()</code> is intended to be a singleton so your code is actively fighting the module design. Accourding to <a href="https://docs.python.org/3/library/turtle.html#module-turtle" rel="nofollow noreferrer">the docs</a> you should be using an instance of <code>RawTurtle</code> in applications.</p>
<pre><code>import turtle
import time
import tkinter as tk


def show_poly():
    try:
        n = int(input("How many sides do you want in your polygon?"))
        angle = 360 / n
        root = tk.Tk()
        canvas = turtle.ScrolledCanvas(root)
        canvas.pack(expand=True, fill='both')
        tess = turtle.RawTurtle(canvas)
        for i in range(n):
            tess.forward(10)
            tess.left(angle)
        time.sleep(3)
    finally:
        root.destroy()


show_poly()
show_poly()
show_poly()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another approach is to work within turtle and avoid tkinter when possible.  In the following solution, instead of destroying the window and making a new one, we simply clear it and draw anew:</p>
<pre><code>from turtle import Turtle, Screen
from time import sleep

def show_poly(turtle):
    n = 0

    while n &lt; 3:
        try:
            n = int(input("How many sides do you want in your polygon? "))
        except ValueError:
            pass

    angle = 360 / n

    for _ in range(n):
        turtle.forward(50)
        turtle.left(angle)

    sleep(3)
    turtle.clear()

window = Screen()

tess = Turtle()

show_poly(tess)
show_poly(tess)
show_poly(tess)

window.bye()
</code></pre>
<p>This should also be compatible with both Python 2.7 and Python 3</p>
</div>
<span class="comment-copy">Your code raises <code>SyntaxError</code> here.</span>
<span class="comment-copy">Sorry It was an indentation error. Moreover It works on Python3.4</span>
<span class="comment-copy">Thank you for the explanation. I read the singleton stuff from the doc but since I found this code on "How to Think Like a Computer Scientist: Learning with Python 3" I didn't understand where really was the problem.  Moreover It works on python 3.4 but not on 3.5 or 2.7.</span>
<span class="comment-copy">That was a poor choice by the author. If the return value of <code>Screen()</code> is a singleton I would consider its behavior after <code>.bye()</code> undefined. It might work by chance but you should not rely on that. I have found <code>tkinter</code> being a bit sctricter in recent releases, there are some other undocumented tricks that do not work anymore.</span>
