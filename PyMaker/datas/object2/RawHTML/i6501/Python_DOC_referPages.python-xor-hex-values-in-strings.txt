<div class="post-text" itemprop="text">
<p>Im new to python and I have (maybe) a dumb question.</p>
<p>I have to XOR two value. currently my values look like this:</p>
<p>v1 = </p>
<pre><code>&lt;class 'str'&gt;
2dbdd2157b5a10ba61838a462fc7754f7cb712d6
</code></pre>
<p>v2 = </p>
<pre><code>&lt;class 'str'&gt;
5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8
</code></pre>
<p>but the thing is, i need to XOR the actual HEX value instead of the ascii value of the given character in the string.</p>
<p>so for example:</p>
<p>the first byte in the first string is <code>s1 = 2d</code>, in the second string <code>s2 = 5b</code></p>
<pre><code>def sxor(s1,s2):
    return ''.join(chr(ord(a) ^ ord(b)) for a,b in zip(s1,s2))
</code></pre>
<p>this will not work, because it gives back the ASCII value of each character (then XOR them), which is obviously differs from the actual hex value.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your mistake is converting the characters to their <em>ASCII codepoints</em>, not to integer values.</p>
<p>You can convert them using <a href="https://docs.python.org/3/library/functions.html#int" rel="nofollow noreferrer"><code>int()</code></a> and <a href="https://docs.python.org/3/library/functions.html#format" rel="nofollow noreferrer"><code>format()</code></a> instead:</p>
<pre><code>return ''.join(format(int(a, 16) ^ int(b, 16), 'x') for a,b in zip(s1,s2))
</code></pre>
<p><code>int(string, 16)</code> interprets the input string as a hexadecimal value. <code>format(integer, 'x')</code> outputs a hexadecimal string for the given integer.</p>
<p>You can do this without <code>zip()</code> by just taking the whole strings as one big integer number:</p>
<pre><code>return '{1:0{0}x}'.format(len(s1), int(s1, 16) ^ int(s2, 16))
</code></pre>
<p>To make sure leading <code>0</code> characters are not lost, the above uses <code>str.format()</code> to format the resulting integer to the right length of zero-padded hexadecimal.</p>
</div>
<div class="post-text" itemprop="text">
<p>Parse the strings into int's then xor the ints:</p>
<pre><code>def sxor(s1,s2):
    i1 = int(s1, 16)
    i2 = int(s2, 16)
    # do you want the result as an int or as another string?
    return hex(i1 ^ i2) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Works with python3:</p>
<pre><code>_HAS_NUMPY = False
try:
    import numpy
    _HAS_NUMPY = True
except:
    pass

def my_xor(s1, s2):
    if _HAS_NUMPY:
        b1 = numpy.fromstring(s1, dtype="uint8")
        b2 = numpy.fromstring(s2, dtype="uint8")
        return (b1 ^ b2).tostring()

    result = bytearray(s1)
    for i, b in enumerate(s2):
        result[i] ^= b
    return result
</code></pre>
</div>
<span class="comment-copy">Convert the hex to integers, xor the integers.</span>
<span class="comment-copy">This produces a <code>0x</code> at the start and can actually produce a <i>shorter hex value</i> as leading <code>0</code> characters are lost.</span>
<span class="comment-copy">Good point, I like your much better use of the format() function</span>
