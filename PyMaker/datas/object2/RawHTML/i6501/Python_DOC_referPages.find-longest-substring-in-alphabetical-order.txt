<div class="post-text" itemprop="text">
<p>I want to write a program that prints the longest substring in alphabetical order.</p>
<p>And in case of ties, it prints the first substring.</p>
<p>Here is what I wrote</p>
<pre><code>import sys
s1 = str(sys.argv[1])
alpha = "abcdefghijklmnopqrstuvwxyz"

def longest_substring(s1):
    for i in range(len(alpha)):
        for k in range(len(alpha)):
            if alpha[i:k] in s1:
                return alpha[i:k]

print("Longest substring in alphabetical order:", longest_substring(s1))
</code></pre>
<p>However, it does not work and I do not know how to do the second part.</p>
<p>Can you help me, please?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is what your code should look like to achieve what you want:</p>
<pre><code>#!/usr/bin/env python3.6
import sys
s1 = str(sys.argv[1])
alpha = "abcdefghijklmnopqrstuvwxyz"
subs = []


def longest_substring(s1):
    for i in range(len(alpha)):
        for k in range(len(alpha)):
            if alpha[i:k] in s1:
                subs.append(alpha[i:k])
    return max(subs, key=len)


print("Longest substring in alphabetical order:", longest_substring(s1))
</code></pre>
<p>You were returning right out of the function on the first alphabetically ordered substring you found. In my code, we add them to a list then print out the longest one.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assume that substring contains 2 or more characters in alphabetical order. So that you should not only return the first occurrence but collect all and find longest. I try to keep your idea the same, but this is not the most efficient way:</p>
<pre><code>def longest_substring(s1):
    res = []
    for i in range(len(alpha) - 2):
        for k in range(i + 2, len(alpha)):
            if alpha[i:k] in s1:
                res.append(alpha[i:k])
    return max(res, key=len)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You re-write a version of <code>itertools.takewhile</code> to take a binary compare function instead of the unary one.</p>
<pre><code>def my_takewhile(predicate, starting_value, iterable):
    last = starting_value
    for cur in iterable:
        if predicate(last, cur):
            yield cur
            last = cur
        else:
            break
</code></pre>
<p>Then you can lowercase the word (since <code>"Za"</code> isn't in alphabetical order, but any <code>[A-Z]</code> compares lexicographically before any <code>[a-z]</code>) and get all the substrings.</p>
<pre><code>i = 0
substrings = []
while i &lt; len(alpha):
    it = iter(alpha[i:])
    substring = str(my_takewhile(lambda x,y: x&lt;y, chr(0), it))
    i += len(substring)
    substrings.append(substring)
</code></pre>
<p>Then just find the longest substring in <code>substrings</code>.</p>
<pre><code>result = max(substrings, key=len)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of building a list of all possible substring slices and then checking which one exists in the string, you can build a list of all consecutive substrings, and then take the one with the maximum length. </p>
<p>This is easily done by grouping the characters using the difference between the <code>ord</code> of that character and an increasing counter; successive characters will have a constant difference. <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> is used to perform the grouping:</p>
<pre><code>from itertools import groupby, count

alpha = "abcdefghijklmnopqrstuvwxyz"
c = count()

lst_substrs = [''.join(g) for _, g in groupby(alpha, lambda x: ord(x)-next(c))]
substr = max(lst_substrs, key=len)
print(substr)
# abcdefghijklmnopqrstuvwxyz
</code></pre>
<p>As @AdamSmith commented, the above assumes the characters are always in alphabetical order. In the case they may not be, one can enforce the order by checking that items in the group are alphabetical:</p>
<pre><code>from itertools import groupby, count, tee

lst = []
c = count()
for _, g in groupby(alpha, lambda x: ord(x)-next(c)):
    a, b = tee(g)
    try:
        if ord(next(a)) - ord(next(a)) == -1:
            lst.append(''.join(b)) 
    except StopIteration:
        pass
    lst.extend(b) # add each chr from non-alphabetic iterator (could be empty)

substr = max(lst, key=len) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>back up and look at this problem again.
1. you are looking for a maximum and should basically (pseudo code):</p>
<pre><code>set a max to ""
loop through sequences
    if new sequence is bigger the max, then replace max
</code></pre>
<ol start="2">
<li>find the sequences you can be more efficient if you only step though the input characters once.</li>
</ol>
<p>Here is a version of this:</p>
<pre><code>def longest_substring(s1):
    max_index, max_len = 0, 0 # keep track of the longest sequence here
    last_c = s1[0]  # previous char
    start, seq_len = 0, 1  # tracking current seqence

    for i, c in enumerate(s1[1:]):
        if c &gt;= last_c: # can we extend sequence in alpha order
            seq_len += 1
            if seq_len &gt; max_len: # found longer
                max_index, max_len = start, seq_len
        else: # this char starts new sequence
            seq_len = 0
            start = i + 1
        last_c = c
    return s1[max_index:max_index+max_len]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>s = 'azcbobobegghakl'
def max_alpha_subStr(s):
    '''
    INPUT: s, a string of lowercase letters 
    OUTPUT: longest substing of s in which the 
            letters occur in alphabetical order
    '''
    longest = s[0]  # set variables 'longest' and 'current' as 1st letter in s
    current = s[0]
    for i in s[1:]:  # begin iteration from 2nd letter to the end of s
        if i &gt;= current[-1]: # if the 'current' letter is bigger 
                             # than the letter before it 
            current += i     # add that letter to the 'current' letter(s) and 
            if len(current) &gt; len(longest): # check if the 'current' length of
                              # letters are longer than the letters in'longest'
                longest = current # if 'current' is the longest, make 'longest'
                                  # now equal 'current'
        else: # otherwise the current letter is lesser 
              # than the letter before it and 
            current = i # restart evaluating from the point of iteration 
    return print("Longest substring in alphabetical order is: ", longest)
max_alpha_subStr(s)
</code></pre>
</div>
<span class="comment-copy"><code>return</code> immediately breaks out of the function, so nothing else will be tested. As soon as <code>if alpha[i:k] in s1:</code> is <code>True</code>, your <code>for</code> loops end.</span>
<span class="comment-copy">do you only want to accept one argument from the command line? do you want accept file input?</span>
<span class="comment-copy">Does the substring need to be in sequential alphabetical order with no gaps (abcdefg) or just in order (afgjkmpz)? Must the alphabetical order be increasing, or just non-decreasing (aaaabbbbbwwxyz)?</span>
<span class="comment-copy">Note that this (very clever!) grouping only works if the string is strictly alphabetical. I assume that a substring <code>"aceg"</code> would also be considered in alphabetical order.</span>
<span class="comment-copy">@AdamSmith You're right. I've added a version that enforces alphabetical order.</span>
<span class="comment-copy">You should format the code and add a description of how it works.</span>
