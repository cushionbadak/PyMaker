<div class="post-text" itemprop="text">
<p>I have the following string I want to clean:</p>
<pre><code>&gt;&gt;&gt; re.sub(r'[^\d]', '', '$14.99')
'1499'
</code></pre>
<p>How would I get it to <code>14.99</code> with the <code>.</code> in there?</p>
</div>
<div class="post-text" itemprop="text">
<p>Just escape the dot (or any other special regex symbol):</p>
<p><code>&gt;&gt;&gt; re.sub(r'[^\d\.]', '', '$14.99')
'14.99'
</code></p>
</div>
<span class="comment-copy">why isn't it <code>[^\d|\.]</code> adding in an "or" ?</span>
<span class="comment-copy">Because this is the purpose and behaviour of <code>[]</code>, as per the regex documentation: any single char, char class, char range, char pattern in the brackets is accepted, no special regex syntax needed. Note that <code>[\d\.]</code> is equivalent to <code>(\d|\.)</code> -- the round braces are the regex syntax for grouping. E.g., here: <a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="nofollow noreferrer">docs.python.org/3/library/re.html#regular-expression-syntax</a> (scroll down to <code>[]</code>).</span>
<span class="comment-copy">You actually don't need to escape <code>.</code> when it's inside square brackets. It is treated as a literal character in this case. <code>[^\d.]</code> is exactly the same as <code>[^\d\.]</code></span>
<span class="comment-copy">However I should also add that <code>[^.]</code> is identical to <code>[^\d.]</code>, since <code>.</code> contains <code>\d</code>.</span>
