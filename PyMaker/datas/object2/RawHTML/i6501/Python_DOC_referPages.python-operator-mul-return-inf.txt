<div class="post-text" itemprop="text">
<p>i have list:</p>
<pre><code>[75.82, 48.88, 56.05, 37.4, 24.88, 71.37, 50.69, 68.12, 99.32, 72.55, 52.62, 40.91, 34.4, 29.75, 96.46, 71.0, 51.7, 40.35, 33.72, 29.39, 29.19, 77.67, 56.1, 43.1, 34.3, 28.49, 103.35, 73.63, 53.04, 40.9, 34.23, 29.53, 114.6, 88.33, 73.62, 60.88, 51.19, 44.62, 39.3, 35.79, 31.87, 29.03, 101.63, 80.56, 68.28, 96.44, 74.88, 62.23, 136.52, 106.22, 88.27, 76.43, 66.62, 58.61, 51.2, 46.32, 41.79, 38.26, 34.85, 31.74, 29.7, 276.63, 195.5, 137.44, 106.73, 88.14, 74.11, 65.49, 57.94, 51.67, 47.24, 43.17, 39.3, 36.46, 33.74, 31.63, 29.75, 27.79, 26.37, 25.19, 23.95, 22.56, 21.5, 20.65, 19.85, 19.08, 18.24, 17.62, 17.06, 16.43, 15.79, 15.35, 14.88, 107.18, 78.63, 57.28, 44.48, 37.79, 32.85, 28.77, 119.63, 93.31, 79.56, 66.49, 56.76, 50.05, 43.82, 39.01, 35.64, 32.36, 29.16, 300.19, 224.14, 158.77, 121.52, 99.91, 82.87, 73.49, 64.39, 58.21, 52.77, 48.09, 44.48, 41.04, 38.0, 35.41, 33.22, 31.43, 29.67, 28.1, 26.77, 25.3, 24.33, 23.27, 22.44, 21.4, 20.65, 19.85, 19.18, 18.52, 17.9, 17.31, 16.75, 16.3, 15.75, 15.33, 14.88, 68.12, 57.01, 49.22, 41.83, 35.49, 31.46, 27.87, 36.13, 26.13, 63.63, 43.11, 27.93, 90.64, 66.72, 50.51, 39.79, 33.12, 28.72, 116.34, 71.64, 49.21, 37.78, 31.48, 26.96, 120.3, 75.12, 51.0, 39.22, 32.34, 27.71, 149.1, 117.34, 87.34, 66.79, 56.37, 48.21, 42.07, 37.64, 34.5, 31.68, 29.52, 146.57, 119.44, 93.46, 71.57, 58.84, 162.76, 122.14, 106.72, 89.18, 76.95, 66.7, 58.64, 53.43, 48.27, 43.97, 40.78, 38.16, 35.35, 32.82, 30.84, 28.99]
</code></pre>
<p>and i try to get common value via operator.mul:</p>
<pre><code>reduce(operator.mul, list)
</code></pre>
<p>also i try to use lambda:</p>
<pre><code>reduce(lambda x, y: x * y, list)
</code></pre>
<p>and when i print it - i get <code>'inf'</code> - what this? and what happened? </p>
</div>
<div class="post-text" itemprop="text">
<p>Your multiplication result can't be performed this way because it overflows <code>float</code>. Try to do the same with <code>numpy.float128</code> or <code>decimal</code>:</p>
<pre><code>&gt;&gt;&gt; from decimal import Decimal

&gt;&gt;&gt; a = [75.82, 48.88, 56.05, 37.4, 24.88, 71.37, 50.69, 68.12, 99.32, 72.55, 52.62, 40.91, 34.4, 29.75, 96.46, 71.0, 51.7, 40.35, 33.72, 29.39, 29.19, 77.67, 56.1, 43.1, 34.3, 28.49, 103.35, 73.63, 53.04, 40.9, 34.23, 29.53, 114.6, 88.33, 73.62, 60.88, 51.19, 44.62, 39.3, 35.79, 31.87, 29.03, 101.63, 80.56, 68.28, 96.44, 74.88, 62.23, 136.52, 106.22, 88.27, 76.43, 66.62, 58.61, 51.2, 46.32, 41.79, 38.26, 34.85, 31.74, 29.7, 276.63, 195.5, 137.44, 106.73, 88.14, 74.11, 65.49, 57.94, 51.67, 47.24, 43.17, 39.3, 36.46, 33.74, 31.63, 29.75, 27.79, 26.37, 25.19, 23.95, 22.56, 21.5, 20.65, 19.85, 19.08, 18.24, 17.62, 17.06, 16.43, 15.79, 15.35, 14.88, 107.18, 78.63, 57.28, 44.48, 37.79, 32.85, 28.77, 119.63, 93.31, 79.56, 66.49, 56.76, 50.05, 43.82, 39.01, 35.64, 32.36, 29.16, 300.19, 224.14, 158.77, 121.52, 99.91, 82.87, 73.49, 64.39, 58.21, 52.77, 48.09, 44.48, 41.04, 38.0, 35.41, 33.22, 31.43, 29.67, 28.1, 26.77, 25.3, 24.33, 23.27, 22.44, 21.4, 20.65, 19.85, 19.18, 18.52, 17.9, 17.31, 16.75, 16.3, 15.75, 15.33, 14.88, 68.12, 57.01, 49.22, 41.83, 35.49, 31.46, 27.87, 36.13, 26.13, 63.63, 43.11, 27.93, 90.64, 66.72, 50.51, 39.79, 33.12, 28.72, 116.34, 71.64, 49.21, 37.78, 31.48, 26.96, 120.3, 75.12, 51.0, 39.22, 32.34, 27.71, 149.1, 117.34, 87.34, 66.79, 56.37, 48.21, 42.07, 37.64, 34.5, 31.68, 29.52, 146.57, 119.44, 93.46, 71.57, 58.84, 162.76, 122.14, 106.72, 89.18, 76.95, 66.7, 58.64, 53.43, 48.27, 43.97, 40.78, 38.16, 35.35, 32.82, 30.84, 28.99]

&gt;&gt;&gt; reduce(operator.mul, [Decimal(i) for i in a])
Decimal('3.460278987987417665359929071E+348')
</code></pre>
<p>Use <code>sys.float_info.max</code> to check maximum float value (it depends on implementation):</p>
<pre><code>import sys
sys.float_info.max 
</code></pre>
<p>If result of multiplication overflows this limit, Python represents it as <code>float('inf')</code></p>
</div>
<div class="post-text" itemprop="text">
<p>As the comments pointed out, the problem is that the resulting number is too big. To give you a hint how big it is you can use the equivalence <code>AÂ·B = x^(log_x A + log_x B)</code>:</p>
<pre><code>&gt; import operator, math, sys

&gt; l = [...]
&gt; reduce(operator.add, map(math.log10, l))
348.53911111557284
</code></pre>
<p>That is a decimal number with 348 digits.</p>
<p>Let's see what the biggest number is that your implementation supports:</p>
<pre><code>&gt; sys.float_info.max
1.7976931348623157e+308
</code></pre>
<p>10<sup>348</sup> &gt; 10<sup>308</sup>. That is bigger than the biggest supported number, so Python uses <code>float('Infinity')</code> instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your list only contains <a href="https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex" rel="nofollow noreferrer">float numbers</a>, so naturally, the multiplication operations are done using floating point arithmetic. Python uses <a href="https://en.wikipedia.org/wiki/Double-precision_floating-point_format" rel="nofollow noreferrer">IEEE-754 double-precision floating point numbers</a> as the underlying structure for floats. This means that the number is bound to the limitations of that data type, which means that there is a maximum number it can represent.</p>
<p>You can see that maximum number using <a href="https://docs.python.org/3/library/sys.html#sys.float_info" rel="nofollow noreferrer"><code>sys.float_info</code></a>:</p>
<pre><code>&gt;&gt;&gt; sys.float_info
sys.float_info(max=1.7976931348623157e+308, max_exp=1024, max_10_exp=308, min=2.2250738585072014e-308, min_exp=-1021, min_10_exp=-307, dig=15, mant_dig=53, epsilon=2.220446049250313e-16, radix=2, rounds=1)

&gt;&gt;&gt; sys.float_info.max
1.7976931348623157e+308
</code></pre>
<p>So <code>1.7976931348623157e+308</code> is the biggest number a float in Python can represent. Above that, you will reach <code>inf</code> which is a special constant for <em>infinity</em>.</p>
<p>Unfortunately, the result of the multiplication of the items in your list is approximately <code>3.46027898e+348</code> which is larger by 40 orders of magnitude. So you simply cannot represent that value using <code>float</code>.</p>
<p>You can however use the <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer"><code>decimal</code> library</a> to represent the numbers using infinite precision decimals. This will allow you to get a result:</p>
<pre><code>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; reduce(lambda a, b: a * Decimal(b), lst, Decimal(1))
Decimal('3.460278987987417665359929071E+348')
</code></pre>
</div>
<span class="comment-copy">What do you mean by 'common value'?</span>
<span class="comment-copy">Your list is too large, multiplication will overflow quickly.</span>
<span class="comment-copy">inf is infinity, see <a href="https://stackoverflow.com/questions/17628613/what-is-inf-and-nan">stackoverflow.com/questions/17628613/what-is-inf-and-nan</a></span>
<span class="comment-copy">There's a maximum <code>float</code> value, numbers above this are represented as <code>inf</code>.  To find this value you can look at <a href="https://docs.python.org/2/library/sys.html#sys.float_info" rel="nofollow noreferrer"><code>sys.float_info</code></a> on your machine</span>
