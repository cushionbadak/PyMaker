<div class="post-text" itemprop="text">
<p>So, I have multiple TSV files with the following format:</p>
<pre><code>a    b    c    d    e    f    g    h
a_1  b_1  c_1  d_1  e_1  f_1  g_1  h_1
a_2  b_2  c_2  d_2  e_2  f_2  g_2  h_2
.    .    .    .    .    .    .    .
.    .    .    .    .    .    .    .
.    .    .    .    .    .    .    .
a_n  b_n  c_n  d_n  e_n  f_n  g_n  h_n
</code></pre>
<p>(First line (a, b, ...) is titles)</p>
<p>I want to read them all and if, for each line, the one of the columns has the attribute I want (let's say it's equal to 1), I want to save that line in a different TSV file with the same format as the one above but the data would be filtered.</p>
<p>I have the code to extract the line I want and write it to a TSV file but I am not sure how to read multiple TSV files and write to a single TSV file.</p>
<p>Here's what I have so far:</p>
<pre><code>with open("./someDirectory/file.tsv") as in_file, 
open("newFile.tsv","w") as out_file:
first_line = True
for line in in_file:
    if first_line: #to print the titles
        print(line, file=out_file)
        first_line = False
    columns = line.split("\t")
    columnToLookAt = columns[7]
    if columnToLookAt == "1":
        print(line, file=out_file)
</code></pre>
<p>So say that someDirectory has like 80 tsv files. What's the best way to go about iterating through all those and writing the needed lines to out_file?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/glob.html#glob.glob" rel="nofollow noreferrer"><code>glob.glob</code></a> from the standard library to get the list of filenames according to some pattern:</p>
<pre><code>&gt;&gt;&gt; import glob
&gt;&gt;&gt; glob.glob('/tmp/*.tsv')
['/tmp/file1.tsv', '/tmp/file2.tsv', ...]
</code></pre>
<p>and then iterate over all those as input files. For example:</p>
<pre><code>import glob

first_line = True
with open("newFile.tsv","w") as out_file:
    for in_path in glob.glob("./someDirectory/*.tsv"):
        with open(in_path) as in_file:
            for line in in_file:
                if first_line: #to print the titles
                    print(line, file=out_file)
                    first_line = False
                columns = line.split("\t")
                columnToLookAt = columns[7]
                if columnToLookAt == "1":
                    print(line, file=out_file)
</code></pre>
<p>As a side note, you can also use <a href="https://docs.python.org/3/library/csv.html#csv.reader" rel="nofollow noreferrer"><code>csv.reader</code></a> module to read tab-separated-value files, by setting <code>dialect='excel-tab'</code>.</p>
</div>
<span class="comment-copy">What about using <code>pandas</code> and reading all the files as dataframes and concatinating all of them in to single dataframe and saving it to tsv.?</span>
<span class="comment-copy">@SreeramTP Never used it. How would I go about doing that?</span>
<span class="comment-copy">That did it. Thanks!</span>
<span class="comment-copy">You're welcome, glad to help!</span>
