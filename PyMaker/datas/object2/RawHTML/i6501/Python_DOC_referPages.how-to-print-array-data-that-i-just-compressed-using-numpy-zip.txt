<div class="post-text" itemprop="text">
<p>I am trying to figure out how to see the the data from the zipped content.
The scenario is as follows in the code:</p>
<pre><code>import numpy as np
x=[1,2,3]
y=[4,5,6]
z=[7,8,9]
data=np.array(zip(x,y,z))
print (data)
</code></pre>
<p>output</p>
<pre><code>array(&lt;zip object at 0x00000166568AE648&gt;, dtype=object)
</code></pre>
<p>but i want to see the data inside the zip so when i say </p>
<pre><code>print(data)
</code></pre>
<p>it shows</p>
<pre><code>&lt;zip object at 0x00000166568AE648&gt;
</code></pre>
<hr/>
<p>now people are discussing in similar posts about <strong>D_stacking</strong> like..</p>
<pre><code>np.dstack(data)
</code></pre>
<p>but it shows the output as a error</p>
<pre><code>---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-20-2126862e2c70&gt; in &lt;module&gt;()
----&gt; 1 np.dstack(data)

C:\ProgramData\Anaconda3\lib\site-packages\numpy\lib\shape_base.py in dstack(tup)
    407 
    408     """
--&gt; 409     return _nx.concatenate([atleast_3d(_m) for _m in tup], 2)
    410 
    411 def _replace_zero_by_x_arrays(sub_arys):

TypeError: iteration over a 0-d array
</code></pre>
<p>0 dimension..?
what does this mean..?
it says the same for other possible solution i found as <strong>Decompressing zip</strong></p>
<pre><code>a,b,c=zip(*data)
print('x=',a)
print('y=',b)
print('z=',c)
</code></pre>
<p><strong>error</strong></p>
<pre><code>---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-41-6ad67a911952&gt; in &lt;module&gt;()
----&gt; 1 a,b,c=zip(*data)
      2 print('x=',a)
      3 print('y=',b)
      4 print('z=',c)

TypeError: iteration over a 0-d array
</code></pre>
<p>then i went thrugh <code>zip()</code> function in programiz.com there i found <code>set()</code> function..</p>
<pre><code>result = set(data)
print (result)
</code></pre>
<p><strong>error</strong></p>
<pre><code>---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-39-2e1af52686b4&gt; in &lt;module&gt;()
----&gt; 1 result = set(data)
      2 print (result)

TypeError: iteration over a 0-d array
</code></pre>
<hr/>
<p>i believe I'm doing something bad in basic x,y,z data.. but my knowledge is limited to the level of whatever you think about me.. </p>
<p>could you please help me with things I'm missing and also explain that lil important point i missed.</p>
<hr/>
<p>When I search for <code>TypeError: iteration over a 0-d array</code></p>
<p>people talk about <code>json</code> which I have <strong>0</strong> idea other then FC3, sorry for that.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>zip</code> of a tuple of lists is a kind of list transpose:</p>
<pre><code>In [83]: x=[1,2,3]
    ...: y=[4,5,6]
    ...: z=[7,8,9]
    ...: 
In [84]: zip(x,y,z)
Out[84]: &lt;zip at 0xaf79f84c&gt;
</code></pre>
<p>But in Py3, <code>zip</code> is generator like; you have to wrap the result in <code>list</code> (or iterate on it) to get a list:</p>
<pre><code>In [85]: list(zip(x,y,z))
Out[85]: [(1, 4, 7), (2, 5, 8), (3, 6, 9)]
</code></pre>
<p>So far I'm not using <code>numpy</code>, just plain Python.  <code>zip</code> documentation: <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#zip</a></p>
<p>You can make an array from such a list</p>
<pre><code>In [86]: np.array(list(zip(x,y,z)))
Out[86]: 
array([[1, 4, 7],
       [2, 5, 8],
       [3, 6, 9]])
</code></pre>
<p>Trying to make an array from the <code>zip</code> produces a single element array,  0d, that contains a pointer to this <code>zip object</code>.  There's little point doing anything more with this.</p>
<pre><code>In [87]: np.array(zip(x,y,z))
Out[87]: array(&lt;zip object at 0xaf75d8cc&gt;, dtype=object)
</code></pre>
<hr/>
<p>But to get a 2d matrix from these lists it is easier, or at least more direct, to use some version of <code>concatenate</code>, which takes a list of arrays or lists.  <code>stack</code> for example lets you specify a new axis to join things:</p>
<pre><code>In [88]: np.stack((x,y,z))   # same as np.array((x,y,z))
Out[88]: 
array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
In [89]: np.stack((x,y,z),axis=1)
Out[89]: 
array([[1, 4, 7],
       [2, 5, 8],
       [3, 6, 9]])
</code></pre>
<hr/>
<p>A common use of zip is to iterate on several lists at once:</p>
<pre><code>In [92]: for i,j,k in zip(x,y,z):
    ...:     print(i,j,k,i+j+k)
    ...:     
1 4 7 12
2 5 8 15
3 6 9 18
</code></pre>
<hr/>
<p>From the comments you seem to be focused on fetching values from this array:</p>
<pre><code>In [97]: data = np.array(zip(x,y,z))
In [98]: data
Out[98]: array(&lt;zip object at 0xabee412c&gt;, dtype=object)
</code></pre>
<p>You can pull an item out of a 0d array with a <code>[()]</code> index.  <code>data.item()</code> also works:</p>
<pre><code>In [99]: data[()]
Out[99]: &lt;zip at 0xabee412c&gt;
</code></pre>
<p>Now you can apply list and see the items:</p>
<pre><code>In [100]: list(data[()])
Out[100]: [(1, 4, 7), (2, 5, 8), (3, 6, 9)]
</code></pre>
<p><code>zip</code> doesn't actually contain its arguments.  Rather it has references to the original lists.  That's true of the <code>data</code> arrays as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>Do you <em>need</em> to zip the data? You can pass NumPy a list of lists, e.g.:</p>
<pre><code>import numpy as np
x=[1,2,3]
y=[4,5,6]
z=[7,8,9]
data=np.array([x,y,z])
print (data)
</code></pre>
<p>output:</p>
<pre><code>[[1 2 3]
 [4 5 6]
 [7 8 9]]
</code></pre>
</div>
<span class="comment-copy">The <code>zip</code> function in Python has nothing whatsoever to do with compression.</span>
<span class="comment-copy">What were you actually trying to do? Did you <i>want</i> to compress something? Why were you calling <code>zip</code> at all? What's your desired output?</span>
<span class="comment-copy">You seem to be under the misapprehension that <code>zip</code> is compressing your data. It is <i>not</i>. It is performing the <a href="https://stackoverflow.com/questions/1115563/what-is-zip-functional-programming">functional programming operation</a> "zip". This takes two sequences and returns a pair of each of their elements at the same position. Like a "zipper". It has nothing to do with the .zip archive file format.</span>
<span class="comment-copy">now that helped me a lot @juanpa.arrivillaga,</span>
<span class="comment-copy">@AhmedAbdulSalam yes, generally, you need to <i>materialize</i> the objects into something that numpy will understand, ideally, a sequence of sequences, like a <code>list</code> of <code>lists</code> if you are passing the <code>np.array</code> constructor something. A <code>zip</code> object is not something it will understand, and indeed, a <code>zip</code> object is potentially an infinite iterator.</span>
<span class="comment-copy">point here is i executed the code  data=np.array(zip(x,y,z))  now i want to see the data that is stored in that 'data'  how can i see..?</span>
<span class="comment-copy">@AhmedAbdulSalam there <b>is no data stored there</b>. You've made a <code>numpy</code> array with <code>dtype=object</code> that contains a <code>zip</code> object. That <i>is the data in the array</i>.</span>
<span class="comment-copy">you have cleared my confusion by far to a level.. could you please consider giving me a reference link through which i can understand the terms you are talking about..? YT link would be helpful.  Ty.</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/31683959/the-zip-function-in-python-3" title="the zip function in python 3">stackoverflow.com/questions/31683959/â€¦</a>  That may be a helpful intro to zip().</span>
<span class="comment-copy">If only you could guide me.. I only have the above main code.. can u please tell me what knowledge am I supposed to be achieving?  A goal?</span>
