<div class="post-text" itemprop="text">
<p>I want to translate code from Matlab to Python, but I can't find a Python equivalent for <code>nchoosek</code>. This is the code:</p>
<pre><code>ber_c = nchoosek(n,e+1)*p.^(e+1)
</code></pre>
<p>and I've made this:</p>
<pre><code>ber_c = comb(n, e + 1)*p**(e+1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For the actual combinations, see the function <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer"><code>itertools.combinations</code></a>.</p>
<p>Calculating the number of combinations is straightforward from the definition, you can use <code>math.factorial</code> to help.</p>
</div>
<div class="post-text" itemprop="text">
<p>Check this out.</p>
<pre><code>def nchoosek(n, k):
    if k == 0:
        r = 1
    else:
        r = n/k * nchoosek(n-1, k-1)
    return round(r)
</code></pre>
</div>
<span class="comment-copy">Do you have the <code>scipy</code> library available? If so, <a href="https://docs.scipy.org/doc/scipy-0.19.1/reference/generated/scipy.misc.comb.html" rel="nofollow noreferrer"><code>scipy.misc.comb</code></a> may be what you need.</span>
<span class="comment-copy">Are you using <code>nchoosek</code> to get the number of combinations, or the array of the actual combinations? (I'm guessing the former, but it would be good to be sure.)</span>
<span class="comment-copy">i call scipy.misc but i have 4 options:  common, doccer, pilutil and setup</span>
<span class="comment-copy">So <code>scipy.misc.comb</code> should be a good match for <code>nchoosek</code>, though if you want exact integers, you'll want to use <code>comb(n, e+1, exact=True)</code>. It sounds as though you already have an answer to your question. What's the problem that you're encountering? E.g., if you're getting a particular Python exception, please show the traceback. If you're getting wrong results, show the results you got and those you expected.</span>
<span class="comment-copy">Also, if you need exact results and performance is the issue, a home-built <code>nchoosek</code> using <code>math.factorial</code> (as suggested by @blue_note) would likely be more efficient than the version from <code>SciPy</code>.</span>
<span class="comment-copy">I think the OP wants the count of the number of combinations, rather than the combinations themselves.</span>
<span class="comment-copy">@MarkDickinson: <code>nchoosek</code> seems to returns both, depending on the type of the arguments. I edited the answer.</span>
<span class="comment-copy">Ah, interesting; guess that makes it a question for the OP, then ...</span>
