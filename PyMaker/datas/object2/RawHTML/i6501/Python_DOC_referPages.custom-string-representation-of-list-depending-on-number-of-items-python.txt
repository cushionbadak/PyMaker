<div class="post-text" itemprop="text">
<p>I need to print out a list differently depending on how many items it has:</p>
<p>For example: </p>
<ul>
<li>For no items i.e. <code>[]</code> should output <code>{}</code> </li>
<li>For 1 item i.e. <code>["Cat"]</code> should output <code>{Cat}</code></li>
<li>For 2 items i.e. <code>["Cat", "Dog"]</code> should output <code>{Cat and Dog}</code></li>
<li>For 3 or more items i.e. <code>["Cat", "Dog", "Rabbit", "Lion"]</code> should output <code>{Cat, Dog, Rabbit and Lion}</code></li>
</ul>
<p>I currently am doing something like this with a bunch of if statements:</p>
<pre><code>def customRepresentation(arr):
  if len(arr) == 0:
    return "{}"
  elif len(arr) == 1:
    return "{" + arr[0] + "}"
  elif len(arr) == 2:
    return "{" + arr[0] + " and " + arr[0] + "}"
  else:  
    # Not sure how to deal with the case of 3 or more items
</code></pre>
<p>Is there a more pythonic way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming the words will never contain commas themselves. You could instead use <strong><a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer">join</a></strong> and <strong><a href="https://docs.python.org/2/library/string.html#string.replace" rel="nofollow noreferrer">replace</a></strong> to deal with all your cases in just one line:</p>
<pre><code>&gt;&gt;&gt; def custom_representation(l):
...   return "{%s}" % " and ".join(l).replace(" and ", ", ", len(l) - 2)
... 
&gt;&gt;&gt; for case in [], ["Cat"], ["Cat", "Dog"], ["Cat", "Dog", "Rabbit", "Lion"]:
...   print(custom_representation(case))
... 
{}
{Cat}
{Cat and Dog}
{Cat, Dog, Rabbit and Lion} 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's how I'd go about this:</p>
<pre><code>class CustomList(list):

    def __repr__(self):

        if len(self) == 0:
            return '{}'
        elif len(self) == 1:
            return '{%s}' % self[0]
        elif len(self) == 2:
            return '{%s and %s}' % (self[0], self[1])
        else:
            return '{' + ', '.join(str(x) for x in self[:-1]) + ' and %s}' % self[-1]
</code></pre>
<hr/>
<pre><code>&gt;&gt;&gt; my_list = CustomList()
&gt;&gt;&gt; my_list
{}
&gt;&gt;&gt; my_list.append(1)
&gt;&gt;&gt; print(my_list)
{1}
&gt;&gt;&gt; my_list.append('spam')
&gt;&gt;&gt; print(my_list)
{1 and spam}
&gt;&gt;&gt; my_list.append('eggs')
&gt;&gt;&gt; my_list.append('ham')
&gt;&gt;&gt; print(my_list)
{1, spam, eggs and ham}
&gt;&gt;&gt; my_list
{1, spam, eggs and ham}
</code></pre>
<p>This way you have a fully functional <code>list</code>, only the representation is customised.</p>
</div>
<span class="comment-copy">Beware with cases where the words themselves contain commas.</span>
<span class="comment-copy">Might it be more efficient to join on <code>, </code> and replace only the final one with <code>and</code>?</span>
<span class="comment-copy">The words will never contain commas themselves.</span>
