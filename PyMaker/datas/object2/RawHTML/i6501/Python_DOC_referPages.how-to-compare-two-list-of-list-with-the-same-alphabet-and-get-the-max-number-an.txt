<div class="post-text" itemprop="text">
<p>I got this two list of list:</p>
<pre><code>A=[[12, 'a'], [0, 'c'], [2, 'w'], [3, 'Q'], [0, 'a'], [0, 'c'], [0, 'w'], [5, 'Q']]
B=[[12, 'a'], [0, 'c'], [15, 'w'], [3, 'Q']]
</code></pre>
<p>and I want to compare these two lists by alphabet and append the list with the max number into a new list C?</p>
<pre><code>C=[[12, 'a'], [0, 'c'], [15, 'w'], [3, 'Q'],[12, 'a'], [0, 'c'], [15, 'w'], [5, 'Q']]
</code></pre>
<p>EDIT:I got this code but it only outputs</p>
<pre><code>C=[[12, 'a'], [0, 'c'], [15, 'w'], [3, 'Q']]?

C = []
for g1, g2 in zip(a,b):
    line = []
    for e1, e2 in zip(g1, g2):
        line.append(max(e1, e2))
    C.append(line)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> cannot work in this case, because elements of <code>B</code> can be used anywhere in <code>C</code>. The iterable returned by <code>zip</code> only has as many elements as the shortest list.</p>
<p>You need to keep <code>A</code>'s order in <code>C</code>, so <code>A</code> should stay a list but <code>B</code> should be a dict:</p>
<pre><code>&gt;&gt;&gt; A=[[12, 'a'], [0, 'c'], [2, 'w'], [3, 'Q'], [0, 'a'], [0, 'c'], [0, 'w'], [5, 'Q']]
&gt;&gt;&gt; B=[[12, 'a'], [0, 'c'], [15, 'w'], [3, 'Q']]
&gt;&gt;&gt; B = {l[1]:l for l in B}
&gt;&gt;&gt; B
{'a': [12, 'a'], 'c': [0, 'c'], 'w': [15, 'w'], 'Q': [3, 'Q']}
</code></pre>
<p>You can then use a list comprehension to get the max values:</p>
<pre><code>&gt;&gt;&gt; [max(l, B[l[1]]) for l in A]
[[12, 'a'], [0, 'c'], [15, 'w'], [3, 'Q'], [12, 'a'], [0, 'c'], [15, 'w'], [5, 'Q']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First create a dictionary holding the max values in <code>B</code> taking care to ensure to deal with any possible duplicates in the list. Then create <code>C</code> using a list comprehension based on the the largest value found in <code>B</code> and the current value:</p>
<pre><code>A = [[12, 'a'], [0, 'c'], [2, 'w'], [3, 'Q'], [0, 'a'], [0, 'c'], [0, 'w'], [5, 'Q']]
B = [[12, 'a'], [0, 'c'], [15, 'w'], [3, 'Q']]

max_values = {}

for count, value in B:
    try:
        max_values[value] = max(max_values[value], count)
    except KeyError:
        max_values[value] = count

C = [[max(count, max_values[value]), value] for count, value in A]

print C
</code></pre>
<p>Giving you:</p>
<pre><code>[[12, 'a'], [0, 'c'], [15, 'w'], [3, 'Q'], [12, 'a'], [0, 'c'], [15, 'w'], [5, 'Q']]
</code></pre>
<p>In the example you gave, <code>B</code> contains unique values, but if there happened to be multiple entries for the same letter, this solution will ensure the maximum is used.</p>
</div>
<span class="comment-copy">Good for you... Then what is holding you back to write the program?</span>
<span class="comment-copy">BTW, both of those lists use the same alphabet, the <a href="https://en.wikipedia.org/wiki/ISO_basic_Latin_alphabet" rel="nofollow noreferrer">ISO basic Latin alphabet</a>.</span>
<span class="comment-copy">Small tip : <code>B</code> should be a dict.</span>
<span class="comment-copy">Will B ever contain duplicate keys? IOW, will there ever be 2 or more sublists in B that have the same letter?</span>
<span class="comment-copy">No each letter is unique.</span>
