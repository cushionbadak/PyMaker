<div class="post-text" itemprop="text">
<p>I have a few questions regarding to the path in Python using <code>os</code> module:</p>
<p>(1) If using <code>os</code> module, is there any difference between <code>\</code> and <code>/</code> in regards to the absolute path of a file? </p>
<p>For examples:</p>
<pre><code>import os 
example_path_1 = "C:\abc\def"
example_path_2 = "C:/abc/def"
</code></pre>
<p>a. Can <code>os.system(example_path_1)</code> and <code>os.system(example_path_2)</code> both work?  </p>
<p>b. Can <code>os.mkdir(example_path_1)</code> and <code>os.mkdir(example_path_2)</code> both work?</p>
<p>(2) When using the <code>os</code> module in Python, if I'm getting this right, it seems in some situations we have to use <code>/</code>, and the other situations we have to use <code>\</code>. How to tell the difference?</p>
</div>
<div class="post-text" itemprop="text">
<p>You would be safe with always sticking to forward slashes</p>
<pre><code>example_path = "/c/abc/def"
</code></pre>
<p>If you use windows style, you need to escape them or use a raw string</p>
<pre><code>example_path = "C:\\abc\\def"
example_path = r"C:\abc\def"
</code></pre>
<p>In general, stick to doing as much as you can in the <a href="https://docs.python.org/3/library/os.path.html#module-os.path" rel="nofollow noreferrer"><code>os.path</code></a> module, it will handle these OS-specific issues fairly robustly. For example you can pass a path to <a href="https://docs.python.org/3/library/os.path.html#os.path.normpath" rel="nofollow noreferrer"><code>os.path.normpath</code></a> and it will normalize your slashes to whatever platform you're on. Similarly building up paths with <a href="https://docs.python.org/3/library/os.path.html#os.path.join" rel="nofollow noreferrer"><code>os.path.join</code></a> will insert the correct slashes for your system.</p>
</div>
<span class="comment-copy">No. In all situations you should use /. On Windows, \ also works, but you will run into trouble as that is also the escape character.</span>
<span class="comment-copy">You can use <code>os.path.sep</code> which will give you the right character for the current platform.</span>
<span class="comment-copy">What happened when you tried?</span>
<span class="comment-copy">@Goyo  Sometimes it successes but sometimes it doesn't. Thats why I'm really confused of what to use... Also sometimes I saw some codes with a <code>r</code> in front of the path, but I don't really understand why to put that?</span>
<span class="comment-copy">@ryan9025 Use the path separator as defined in your operating system (but use it properly). Use <code>os.path.sep</code> for cross platform code.</span>
<span class="comment-copy">Im new to this so sorry that I kinda don't get why your example_path missing the <code>C:</code>?  Could you please provide a example that if I want to change directory/make new directory to <code>C:\abc\def</code> (or in even much more complicated case) in Windows, what is the safest way to do so? Thanks!</span>
<span class="comment-copy">@ryan9025 The first version is a "unix style" path, the second is a "windows style" path, but python will work with a unix style path on a windows system.</span>
<span class="comment-copy">Thanks! So that means in both cases that <code>os.path</code> will always work?</span>
