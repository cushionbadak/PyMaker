<div class="post-text" itemprop="text">
<p>I have a large list called <code>indexes</code>.  Each item in the list is a tuple that contains 2 integers. The integers denote the starting and ending indexes for a series of substrings that I want to concatenate into one larger string.  </p>
<p>For example, if the <code>indexes</code> list only had 2 entries that looked like: <code>[(1, 5), (10,15)]</code> I want to have an output string that consists of the characters between index position 1 and 5, and the characters between index position 10-15.... I.E concatenating those two slices together.</p>
<p>To be a little more specific - my main string is actually the string version of a large number of hexidecimal values.  I will be ultimately be converting my final string back to the binary version and then writing that to a file.  Currently my process is REALLY slow on large data sets and looks like this:</p>
<pre><code>def combineFrames(indexes, largeString):
    '''
    input1 = list of all indexes for start/end of substring
    input2 = the larger String from which the substrings are being pulled

    returns a single string that consists of all substrings concatenated together...

    function also generates a new file that consists of the binary version of the concatenated substrings
    '''

    final_string = ""

    for seq in indexes:
        final_string += hexString[seq[0]:seq[1]]

    fullFile = binascii.unhexlify(final_string)

    with open("d:\\output_File", 'wb') as f:
        f.write(fullFile)

    return fullFile
</code></pre>
<p>Currently the above is really slow and I suspect there is a way to speed it up.  Thoughts?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>join</code></a> is usually a pretty good way to concat strings like that. Could looks something like this:</p>
<pre><code>final_string = "".join(hexString[seq[0]:seq[1]] for seq in indexes)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You <code>"".join</code> method because :</p>
<blockquote>
<p>' '.join is usually better than using +, because something like
  "a"+"b"+"c" would also create the intermediary string "ab", and only
  then "abc", while ''.join(['a', 'b', 'c']) would directly create
  'abc'. Using less memory, and being faster.</p>
</blockquote>
</div>
<span class="comment-copy">How slow is 'really slow'? For what sized inputs? How fast would be fast enough? Have you profiled any of this?</span>
<span class="comment-copy">I'm a total noob at coding - only been at this for a couple months, so I'm not sure of any other options or how to profile this...  The question is posted because of an assumption that iterating through each of the indexes is probably not the best way to handle it, and I couldn't find other ways during my search.  Is there a better way I could have asked the question (just for future reference)</span>
<span class="comment-copy">Mostly by trying to answer some of these questions yourself - how fast does it run now? What's the size/type of inputs? What's the goal? Profiling can help identify the parts of the code taking up the time (a longer topic that you can google up) but initially, just measuring elapsed time is a good start. Another good practice is to briefly describe the general problem you are solving as there are sometimes entirely different overall optimization approaches. Generally, for any performance-related work, whether a <a href="https://stackoverflow.com">Stack Overflow</a> question or not, the more concrete measurements and goals, the better.</span>
<span class="comment-copy">This is EXTREMELY faster than the way I was iterating through each of the slices.  Thank you very much.  Time for me to go do some reading about the join method now :)</span>
