<div class="post-text" itemprop="text">
<p>The documentation for the <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.frombuffer.html" rel="nofollow noreferrer"><code>numpy.frombuffer</code></a> function specifically says that the generated array will be one dimensional:</p>
<blockquote>
<p>Interpret a buffer as a 1-dimensional array.</p>
</blockquote>
<p>I'm not sure about the consequences of this quote. The documentation just tells me that the generated array will be one dimensional, but never says that the input buffer has to describe a one-dimensional object.</p>
<p>I have a (2D) <a href="http://eigen.tuxfamily.org/" rel="nofollow noreferrer">Eigen matrix</a> in C++. I would like to create a <a href="https://docs.python.org/3/c-api/buffer.html" rel="nofollow noreferrer">Python buffer</a> which describes the content of the matrix. Then, I would like to use this buffer to somehow initialize my NumPy array and make it available to my python scripts. The goal is both to pass information to Python without copying data and to allow python modify the matrix (e.g. to initialize the matrix).</p>
<p>The C-API equivalent of <code>numpy.frombuffer</code> is <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/c-api.array.html#c.PyArray_FromBuffer" rel="nofollow noreferrer"><code>PyArray_FromBuffer</code></a>, and it also shares the single-dimension phrase, but it has more documentation (emphasis mine):</p>
<blockquote>
<p><code>PyObject* PyArray_FromBuffer(PyObject* buf, PyArray_Descr* dtype, npy_intp count, npy_intp offset)</code></p>
<p>Construct a one-dimensional ndarray of a single type from an object, buf, that exports the (<strong>single-segment</strong>) buffer protocol (or has an attribute __buffer__ that returns an object that exports the buffer protocol). A writeable buffer will be tried first followed by a read- only buffer. The NPY_ARRAY_WRITEABLE flag of the returned array will reflect which one was successful. The data is assumed to start at offset bytes from the start of the memory location for the object. The type of the data in the buffer will be interpreted depending on the data- type descriptor, dtype. If count is negative then it will be determined from the size of the buffer and the requested itemsize, otherwise, count represents how many elements should be converted from the buffer.</p>
</blockquote>
<p>Does "single-segment" mean that it cannot contain padding used, e.g., to align the rows of the matrix? In that case I'm screwed, because my matrix could very well use an alignment strategy that requires padding.</p>
<p>Back to the original question:</p>
<p><strong>Is there a way for me to create a NumPy array which shares the memory with an pre-existing buffer?</strong></p>
<hr/>
<p>Remark: there is a project on github called <a href="https://github.com/jrl-umi3218/Eigen3ToPython" rel="nofollow noreferrer">Eigen3ToPython</a>, which aims at connecting eigen with python, but it does not allow for memory sharing (emphasis mine):</p>
<blockquote>
<p>This library allows to: [...] Convert to/from Numpy arrays (<code>np.array</code>) in a transparent manner (however, <strong>memory is not shared between both representations</strong>)</p>
</blockquote>
<hr/>
<p><strong>EDIT</strong>
Somebody might point out the similarly-titled question <a href="https://stackoverflow.com/q/39092664/1900563">Numpy 2D- Array from Buffer?</a>. Unfortunately, the solution given there does not seem to be a valid one for my case, because the generated 2D array does not share the memory with the original buffer.</p>
<hr/>
<p><strong>EDIT: how is data organized in Eigen</strong></p>
<p>Eigen maps 2D matrices in a 1D memory buffer by using strided access. A double precision 3x2 matrix, for instance, needs 6 double, i.e., 48 bytes. A 48-bytes buffer is allocated. The first element in this buffer represents the <code>[0, 0]</code> entry in the matrix.</p>
<p>In order to access the element <code>[i, j]</code>, the following formula is used:</p>
<pre><code>double* v = matrix.data() + i*matrix.rowStride() + j*matrix.colStride()
</code></pre>
<p>, where <code>matrix</code> is the matrix object and its member functions <code>data()</code>, <code>rowStride()</code> and <code>colStride()</code> return, respectively, the start address of the buffer, the distance between two consecutive rows and the distance between two consecutive columns (in multiples of the floating point format size).</p>
<p>By default Eigen uses a column-major format, thus <code>rowStride() == 1</code>, but it can also be configured to use a row-major format, with <code>colStride() == 1</code>.</p>
<p>Another important configuration option is the alignment. The data buffer could very well include some unneeded values (i.e., values which are not part of the matrix) so to make the columns or rows start at aligned addresses. This makes the operations on the matrix vectorizable. In the example above, assuming column-major format and 16-byte alignment, the following matrix</p>
<pre><code>3   7
1  -2
4   5
</code></pre>
<p>could be stored win the following buffer:</p>
<pre><code>0  0  3  1  4  0  7 -2  5  0
</code></pre>
<p>The 0 values are called padding. The two 0's at the beginning could be necessary to ensure that the start of the actual data is aligned to the same boundary. (Notice that the <code>data()</code> member function will return the address of the 3.) In this case the strides for rows and columns are</p>
<pre><code>rowStride: 1
colStride: 4
</code></pre>
<p>(while in the unaligned case they would be 1 and 3 respectively.)</p>
<p>Numpy expects a C-contiguous buffer, i.e., a row-major structure with no padding. If no padding is inserted by Eigen, then the problem of the row-major requirement can be worked around for a column-major Eigen matrix pretty easily: one passes the buffer to a numpy array, and the resulting <code>ndarray</code> is reshaped and transposed. I managed to make this work perfectly.</p>
<p>But in case Eigen does insert padding, the problem can not be solved using this technique because the <code>ndarray</code> will still see the zeroes in the data and think they are part of the matrix, at the same time discarding some values at the end of the array. And <strong>this</strong> is the problem I'm asking a solution for.</p>
<p>Now, as a side remark, since we have the luck of having @ggael in the loop, who can probably shed some light, I have to admit that I never had Eigen inserting any padding in my matrices. And I don't seem to find any mention of padding in the Eigen documentation. However, I would expect the alignment strategy to align every column (or row), and not just the first one. Am I wrong with my expectations? If I am, then the whole problem does not apply to Eigen. But it would apply to other libraries I'm using which apply the alignment strategy I described above, so please don't consider this last paragraph when answering the question.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm answering my own question here. Thanks to @user2357112 for pointing in the right direction: what I need is <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/c-api.array.html#c.PyArray_NewFromDescr" rel="nofollow noreferrer"><code>PyArray_NewFromDescr</code></a>.</p>
<p>The following Python object is a wrapper around an Eigen matrix:</p>
<pre><code>struct PyEigenMatrix {
    PyObject_HEAD
    Eigen::Matrix&lt;RealT, Eigen::Dynamic, Eigen::Dynamic&gt; matrix;
};
</code></pre>
<p><code>RealT</code> is the floating-point type I'm using (<code>float</code> in my case).</p>
<p>In order to return an <code>np.ndarray</code> object, I add a member function to the class:</p>
<pre><code>static PyObject*
PyEigenMatrix_as_ndarray(PyEigenMatrix* self, PyObject* args, PyObject* kwds)
{
    // Extract number of rows and columns from Eigen matrix
    npy_intp dims[] = { self-&gt;matrix.rows(), self-&gt;matrix.cols() };

    // Extract strides from Eigen Matrix (multiply by type size to get bytes)
    npy_intp strides[] = {
        self-&gt;matrix.rowStride() * (npy_intp)sizeof(RealT),
        self-&gt;matrix.colStride() * (npy_intp)sizeof(RealT)
    };

    // Create and return the ndarray
    return PyArray_NewFromDescr(
            &amp;PyArray_Type,                  // Standard type
            PyArray_DescrFromType(typenum), // Numpy type id
            2,                              // Number of dimensions
            dims,                           // Dimension array
            strides,                        // Strides array
            self-&gt;matrix.data(),            // Pointer to data
            NPY_ARRAY_WRITEABLE,            // Flags
            (PyObject*)self                 // obj (?)
        );
}
</code></pre>
<p><code>typenum</code> is the <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/c-api.dtype.html#enumerated-types" rel="nofollow noreferrer">numpy type id number</a>.</p>
<p>This call creates a new numpy array, gives it a buffer (through the <code>data</code> parameters), describes the buffer using the <code>dims</code> and <code>strides</code> parameters (the former also sets the shape of the returned array), describes the data dype, sets the matrix as read-write (through the <code>flags</code> parameter.</p>
<p>I'm not sure what the last parameter <code>obj</code> means though. The documentation mentions it only for cases where the type is different from <code>PyArray_Type</code>.</p>
<hr/>
<p>In order to illustrate how this works in practice, let me show some python code.</p>
<pre><code>In [3]: m = Matrix(7, 3)

In [4]: m
Out[4]: 
  0.680375  -0.211234   0.566198
   0.59688   0.823295  -0.604897
 -0.329554   0.536459  -0.444451
   0.10794 -0.0452059   0.257742
 -0.270431  0.0268018   0.904459
   0.83239   0.271423   0.434594
 -0.716795   0.213938  -0.967399

In [5]: a = m.as_ndarray()

In [6]: a
Out[6]: 
array([[ 0.68 , -0.211,  0.566],
       [ 0.597,  0.823, -0.605],
       [-0.33 ,  0.536, -0.444],
       [ 0.108, -0.045,  0.258],
       [-0.27 ,  0.027,  0.904],
       [ 0.832,  0.271,  0.435],
       [-0.717,  0.214, -0.967]], dtype=float32)

In [7]: a[2, 1] += 4

In [8]: a
Out[8]: 
array([[ 0.68 , -0.211,  0.566],
       [ 0.597,  0.823, -0.605],
       [-0.33 ,  4.536, -0.444],
       [ 0.108, -0.045,  0.258],
       [-0.27 ,  0.027,  0.904],
       [ 0.832,  0.271,  0.435],
       [-0.717,  0.214, -0.967]], dtype=float32)

In [9]: m
Out[9]: 
  0.680375  -0.211234   0.566198
   0.59688   0.823295  -0.604897
 -0.329554    4.53646  -0.444451
   0.10794 -0.0452059   0.257742
 -0.270431  0.0268018   0.904459
   0.83239   0.271423   0.434594
 -0.716795   0.213938  -0.967399
</code></pre>
<p><code>Matrix</code> is my <code>PyEigenMatrix</code> type. I added a <code>__repr__</code> function which prints the matrix using Eigen's stream operators. I can had an <code>ndarray</code> <code>a</code> which corresponds exactly to the Eigen matrix. When I modify <code>a</code> (<code>In[7]</code>), not only does the numpy array get modified (<code>Out[8]</code>), but also the underlying Eigen array (<code>Out[9]</code>), showing that the two object share the same memory.</p>
<hr/>
<p><strong>EDIT</strong> @user2357112 was right twice. The second method he proposes in the comments works as well. If the type <code>PyEigenMatrix</code> exports the buffer interface (which my type does), then the solution is as easy as creating a <code>memoryview</code> object, either <a href="https://docs.python.org/3/library/stdtypes.html#memoryview" rel="nofollow noreferrer">in Python</a> or using the <a href="https://docs.python.org/3/c-api/memoryview.html" rel="nofollow noreferrer">C-API</a>, and pass this object to the <code>np.array</code> function, also specifying <code>copy=False</code>.</p>
<p>Here is how it works:</p>
<pre><code>In [2]: m = Matrix(7, 3)

In [3]: mv = memoryview(m)    

In [4]: a = np.array(mv, copy=False)

In [5]: m
Out[5]: 
  0.680375   0.536459   0.904459
 -0.211234  -0.444451    0.83239
  0.566198    0.10794   0.271423
   0.59688 -0.0452059   0.434594
  0.823295   0.257742  -0.716795
 -0.604897  -0.270431   0.213938
 -0.329554  0.0268018  -0.967399

In [6]: a
Out[6]: 
array([[ 0.68 ,  0.536,  0.904],
       [-0.211, -0.444,  0.832],
       [ 0.566,  0.108,  0.271],
       [ 0.597, -0.045,  0.435],
       [ 0.823,  0.258, -0.717],
       [-0.605, -0.27 ,  0.214],
       [-0.33 ,  0.027, -0.967]], dtype=float32)

In [7]: a [3, 1] += 2

In [8]: a
Out[8]: 
array([[ 0.68 ,  0.536,  0.904],
       [-0.211, -0.444,  0.832],
       [ 0.566,  0.108,  0.271],
       [ 0.597,  1.955,  0.435],
       [ 0.823,  0.258, -0.717],
       [-0.605, -0.27 ,  0.214],
       [-0.33 ,  0.027, -0.967]], dtype=float32)

In [9]: m
Out[9]: 
 0.680375  0.536459  0.904459
-0.211234 -0.444451   0.83239
 0.566198   0.10794  0.271423
  0.59688   1.95479  0.434594
 0.823295  0.257742 -0.716795
-0.604897 -0.270431  0.213938
-0.329554 0.0268018 -0.967399
</code></pre>
<p>This method has the advantage that it does not require the numpy C-API. The matrix type just has to support the buffer protocol, which is more general than a method directly relying on numpy.</p>
</div>
<span class="comment-copy">Have you tried creating the NumPy array directly using <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.ndarray.html" rel="nofollow noreferrer"><code>np.ndarray</code></a>? Per the docs, it has a <code>buffer</code> parameter.</span>
<span class="comment-copy">In <code>numpy</code> data is stored in one flat buffer.  So a buffer (a contiguous set of bytes) contains 4000 bytes, and we specify dtype <code>int32</code>, <code>frombuffer</code> should give a (1000,) shape array.  A subsequent <code>reshape</code> can make it 2d.  In numpy multidimensionality is produced by the shape and strides attributes, not the data.</span>
<span class="comment-copy">Explain how <code>Eigen</code> stores its data.  Is it a simple 1d buffer?  Or more like the <code>C</code> pointers to pointers?</span>
<span class="comment-copy">@hpaulj, entries in a Eigen::Matrix are sequentially stored in a single buffer.</span>
<span class="comment-copy">Then how is the buffer multidimensional?</span>
<span class="comment-copy">I think <code>np.asarray</code> can accept any buffer type without having to go through a memoryview first</span>
