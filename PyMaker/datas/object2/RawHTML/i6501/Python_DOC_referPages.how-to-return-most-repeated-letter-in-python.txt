<div class="post-text" itemprop="text">
<p>I've done some digging and most use arrays, but our class is not that far and we're to use mostly for loops to return the most repeated letter in a function.</p>
<p>Here was my code so far, but all I could get was to return the count of the first letter.</p>
<pre><code>def most_repeated_letters(word_1):
  x = 0
  z = 0
  for letter in word_1:
    y = word_1.count(letter[0:])
    if y &gt; z:
      z = y
    x += 1
    return z

print most_repeated_letters('jackaby')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Make use <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow noreferrer">collections.Counter</a></p>
<pre><code>from collections import Counter
c = Counter('jackaby').most_common(1)
print(c)
# [('a', 2)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are a few problems with your code:</p>
<ul>
<li>you calculate the count of the most common letter, but not the letter itself</li>
<li>you <code>return</code> <em>inside</em> the loop and thus after the very first letter</li>
<li>also, you never use <code>x</code>, and the slicing of <code>letter</code> is unneccesary</li>
</ul>
<p>Some suggestions to better spot those errors yourself:</p>
<ul>
<li>use more meaningful variable names</li>
<li>use more than two spaces for indentation</li>
</ul>
<p>Fixing those, your code might look something like this:</p>
<pre><code>def most_repeated_letters(word_1):
    most_common_count = 0
    most_common_letter = None
    for letter in word_1:
        count = word_1.count(letter)
        if count &gt; most_common_count:
            most_common_count = count
            most_common_letter = letter
    return most_common_letter
</code></pre>
<hr/>
<p>Once you are comfortable with Python's basic language features, you should have a closer look at the <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">builtin functions</a>. In fact, your entire function can be reduced to a single line using <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer"><code>max</code></a>, using the <code>word_1.count</code> as the <code>key</code> function for comparison.</p>
<pre><code>def most_repeated_letters(word_1):
    return max(word_1, key=word_1.count)
</code></pre>
<p>But while this is very short, it is not very efficient, as the <code>count</code> function is called for each letter in the word, giving the function quadratic complexity <em>O(n²)</em>. Instead, you can use a <code>dict</code> to store counts of individual letters and increase those counts in a single pass over the word in O(n).</p>
<pre><code>def most_repeated_letters(word_1):
    counts = {}
    for letter in word_1:
        if letter not in counts:
            counts[letter] = 1
        else:
            counts[letter] += 1
    return max(counts, key=counts.get)
</code></pre>
<p>And this is basically the same as what <code>collections.Counter</code> would do, as already described in another answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want to use Counter:</p>
<pre><code>def most_repeated_letters(word_1):
    lettersCount = {}
    for ch in word_1:
        if ch not in lettersCount:
            lettersCount[ch] = 1
        else:
            lettersCount[ch] += 1

    return max(lettersCount, key=lettersCount.get)


print(most_repeated_letters('jackabybb'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a code that works for multiple:</p>
<pre><code>def most_repeated_letters(word_1):

    d = {}

    for letter in word_1:      
        if not d.get(letter):
            d[letter] = 0
        d[letter] = d.get(letter) + 1

    ret = {}

    for k,v in d.iteritems():
        if d[k] == max(d.values()):
            ret[k] = v

    return ret

most_repeated_letters('jackaby')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don’t want to use the collections modue :</p>
<pre><code>def mostRepeatedLetter(text):
  counter = {}
  for letter in text:
    if letter in counter: 
      counter[letter]+=1
    else: 
      counter[letter]=1
  max = { letter: 0, quantity: 0 } 
  for key, value in counter.items(): 
    if value &gt; max.quantity: 
      max.letter, max.quantity = key, value
  return max
</code></pre>
</div>
<span class="comment-copy">put return statement one tab left. It ends for loop after first iteration.</span>
<span class="comment-copy">Also, is x really neccesary?</span>
<span class="comment-copy">I think it's clear that the person asking the question wants to do this with manual logic, not a predefined library.</span>
<span class="comment-copy">I made a similar one but it doesnt return two letters if there are two with same amount</span>
<span class="comment-copy">don't write code in one line</span>
