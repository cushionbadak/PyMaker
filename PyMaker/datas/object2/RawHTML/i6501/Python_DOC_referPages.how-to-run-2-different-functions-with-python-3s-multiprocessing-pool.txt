<div class="post-text" itemprop="text">
<p>Ok, say I have this code:</p>
<pre><code>import time

def helloworld(sleep_time):
    while True:
        time.sleep(sleep_time)
        print('Hello world!')

def hellocountry():
    while True:
        time.sleep(60)
        print('Hello country!')

if __name__ == '__main__':
    with Pool(3) as p:
        p.map(helloworld, [1, 5, 7])
</code></pre>
<p>How would I execute hellocountry, while helloworld is being executed? I guess I could write a wrapper function, but that seems rather clumsy and unpythonic.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just use the <a href="https://docs.python.org/3.6/library/multiprocessing.html#multiprocessing.pool.Pool.apply_async" rel="nofollow noreferrer"><code>apply_async</code></a> method.</p>
<pre><code>if __name__ == '__main__':
    with Pool(3) as p:
        p.apply_async(hellocountry)
        p.map(helloworld, [1, 5, 7])
</code></pre>
</div>
<span class="comment-copy">use <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor.submit" rel="nofollow noreferrer"><code>.submit()</code></a> (I suggest for the <code>helloworld()</code> calls too).</span>
<span class="comment-copy">So is Pool() just a wrapper around ThreadPoolExecutor?</span>
<span class="comment-copy">In your code, <code>Pool</code> is undefined. But no, I confused <code>Pool</code> and Executor.</span>
