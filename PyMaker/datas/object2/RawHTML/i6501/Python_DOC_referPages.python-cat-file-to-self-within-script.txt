<div class="post-text" itemprop="text">
<p>Suppose I have a python script that I would like to be able to process a file as an input: </p>
<pre><code>./script.py input_file.txt
</code></pre>
<p>However, I would also like to run bash commands like <code>sort</code> on the file before it gets parsed by the script.  </p>
<p>Is there a way to internally call bash commands and pass the output to stdin? </p>
<p>Basically, the only thing that is changing is: </p>
<pre><code>cat file | sort | ./script.py

# changes to: 

./script.py --input_file file
</code></pre>
<p>And within the <code>script.py</code> I might run: </p>
<pre><code>import some_lib as sl


sl.bash(cat args.input_file | sort | this script's stdin buffer)

...
    for line in stdin:
        ...
</code></pre>
<p>Is there a way to do this? </p>
</div>
<div class="post-text" itemprop="text">
<p>Try <a href="https://docs.python.org/2/library/subprocess.html" rel="nofollow noreferrer">popen</a>.
That's a python 2 link. If you're using 3, look <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">here</a>.</p>
</div>
<span class="comment-copy">Not just <code>./script.py &lt;(sort input_file.txt)</code>?</span>
<span class="comment-copy">(Note that letting <code>sort</code> directly access the input file can be significantly more efficient with large inputs than forcing it to read the output from <code>cat</code> through a FIFO; giving it a direct file handle means it can split into threads, each handling a subset of the file, and then use a merge sort to combine their outputs; by contrast, a FIFO can only be read once, front-to-back).</span>
<span class="comment-copy">...and btw, is there a reason you aren't using, say, <code>for line in sorted(sys.stdin):</code> and not bothering with shell tools at all?</span>
<span class="comment-copy">@CharlesDuffy the point is that I am dealing with, say, 250 gig files. I am trying to make the code super easy to use.  I want to be able to pipe things into the code.  The cat statement is just there for illustrative purposes.  In actuality, I might use parallel, zcat, and do some other things before I sort.</span>
<span class="comment-copy">I'm still not sold on needing a shell for any of that. Python has its own gzip library; Python has its own management tools for parallel processing (see the <code>multiprocessing</code> library); etc.</span>
