<div class="post-text" itemprop="text">
<p>I have a postman collection which has multiple folders containing around 100 requests with all methods like GET, POST, DELETE, PUT.</p>
<p>I need to parse the postman.json collection file in python and create requests and write to a txt file.
These request need to be passed to another tool. Can you help me with it. Any pointers would be helpful.
I am stuck in parsing collection JSON file, which is very difficult.</p>
</div>
<div class="post-text" itemprop="text">
<h2>HOW TO GUIDE</h2>
<p><strong>Read the doc about <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">JSON encoder/decoder</a></strong></p>
<p>To parse a JSON string <em>json_str</em>:</p>
<pre><code>import json

obj = json.loads(json_str)
</code></pre>
<p>To parse a JSON file:</p>
<pre><code>import json
import io

with io.open("path/to/file.json", mode-"rb") as fd:
    obj = json.load(fd)
</code></pre>
<p><strong>Read the doc about <a href="http://docs.python-requests.org/en/master/" rel="nofollow noreferrer">Requests</a></strong></p>
<p>There is a <code>requests.request()</code> function, where you can pass the <em>method</em> (GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD) in parameter. Usage:</p>
<pre><code>import requests

response = requests.request('GET', 'http://httpbin.org/get')
</code></pre>
<p><strong>Write into a <a href="https://docs.python.org/3/library/io.html" rel="nofollow noreferrer">binary file</a></strong></p>
<p>You can write the result of your request into a binary file. You can also use a text file but some response may be binary, for instance if you download an image.</p>
<pre><code>with io.open("path/to/file.dat", mode="wb") as fd:
    fd.write(response.content)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The code below will help you understand how to parse the Collection JSON file so that you can recursively accumulate all the requests in that collection. I have used the <a href="http://www.postmanlabs.com/postman-collection/" rel="nofollow noreferrer">Postman Collection SDK</a> along with a helper utility called <a href="https://lodash.com/docs/4.17.4" rel="nofollow noreferrer">Lodash</a>.</p>
<p>You can either use this snippet below to get the request information you want to be consumed by using Python requests. Or to keep things simple, just use Javascript if you can.</p>
<pre><code>var fs = require('fs'), // needed to read JSON file from disk
  sdk = require('postman-collection'),
  Collection = sdk.Collection,
  Request = sdk.Request,
  Item = sdk.Item,
  ItemGroup = sdk.ItemGroup,
  _ = require('lodash'),
  myCollection,
  requests = [],
  dfs = function (item, requests) { // fn -&gt; Depth first search
    // Check if this is a request
    if (Item.isItem(item)) {
      if (item.request &amp;&amp; Request.isRequest(item.request)) {
        requests.push(item.request);
      }
    }
    // Check if this is a nested folder
    else if (ItemGroup.isItemGroup(item)) {
      // Check if this is an empty folder
      if (item.items &amp;&amp; (item.items.count() === 0)) {
        return requests;
      }
      // Do a depth first search for requests on the nested folder
      item.each(function (item) {
        requests.push(dfs(item, []));
      })
    }

    return requests;
  };

// Load a collection to memory from a JSON file on disk 
myCollection = new Collection(JSON.parse(
  fs.readFileSync('&lt;path_to_your_collection_json_file&gt;').toString()));

myCollection.items.each(function (item) {
  // Check if this is a request at the top level
  if (Item.isItem(item)) {
    if (item.request &amp;&amp; Request.isRequest(item.request)) {
      requests.push(item.request);
    }
  }
  // Check if this is a folder at the top level
  else if (ItemGroup.isItemGroup(item)) {
    item.items.each(function (item) {
      requests.push(dfs(item, []));
    })
  }
});

// Flatten. After flattening requests will an array of PostmanRequest objects
requests = _.flattenDeep(requests)

// Serialize each PostmanRequest to it's JSON representation
requests = _.map(requests, (r) =&gt; { return r.toJSON(); })

_.each(requests, (request) =&gt; {
  console.log(request.url); // The request URL
  console.log(request.method); // The HTTP Verb of your request Eg. GET, POST
  _.each(request.header, (header) =&gt; {
    console.log(header.key, header.value); // Eg. key -&gt; 'Content-Type', value -&gt; 'application/json'
  });
  // You can also access the request body and the auth, certificate and proxy used by the request
  // Your PostmanRequest description is also available
});
</code></pre>
</div>
<span class="comment-copy">have you tried json.loads()?? then access as a dictionary</span>
