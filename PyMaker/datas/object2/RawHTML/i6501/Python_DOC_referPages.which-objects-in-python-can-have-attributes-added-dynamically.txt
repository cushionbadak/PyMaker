<div class="post-text" itemprop="text">
<p>In Python, I can add an attribute to a class <code>C</code> which I have previously defined. However, I cannot add an attribute to <code>list</code> - the resulting error message explains that this is because <code>list</code> is a built-in type:</p>
<pre><code>&gt;&gt;&gt; class C: pass
...
&gt;&gt;&gt; C.foo = 1
&gt;&gt;&gt; C.foo
1

&gt;&gt;&gt; list.foo = 1
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: can't set attributes of built-in/extension type 'list'
</code></pre>
<p>Similarly, it is possible to add an attribute to an instance of <code>C</code>, but not to an instance of <code>list</code>. In this case, however, the error message is much more vague:</p>
<pre><code>&gt;&gt;&gt; o = C()
&gt;&gt;&gt; o.bar = 2
&gt;&gt;&gt; o.bar
2

&gt;&gt;&gt; o = []
&gt;&gt;&gt; o.bar = 2
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'list' object has no attribute 'bar'
</code></pre>
<p>Why can't I add members to instances of <code>list</code>? Is it, again, because <code>list</code> is a built-in type?</p>
<p>More generally, which objects in Python can have attributes added dynamically?</p>
</div>
<div class="post-text" itemprop="text">
<p>When setting arbitrary properties on an object, this effectively mutates the object’s <code>__dict__</code>. The <code>__dict__</code> is a dictionary that stores all members of the object. So in order to add members to an object, there are two conditions:</p>
<ol>
<li>The object needs to have a <code>__dict__</code>.</li>
<li>The object’s <code>__dict__</code> needs to be mutable.</li>
</ol>
<p>There are multiple reasons why one of these conditions may not be true. The following categories of types will <em>usually</em> do not allow object modifications:</p>
<ul>
<li>Built-in <em>native</em> types are implemented in native code and have a fixed set of members, baked into their native object definition. Examples include <code>int</code>, <code>str</code>, <code>list</code>, <code>bytes</code>, … probably most (but not all) <a href="https://docs.python.org/3/library/stdtypes.html" rel="nofollow noreferrer">built-in types</a></li>
<li><em>Native</em> types from external libraries, for example numpy stuff.</li>
<li>Any Python class that is using <a href="https://docs.python.org/3/reference/datamodel.html#slots" rel="nofollow noreferrer"><code>__slots__</code></a>. Slots is an explicit way to turn of the <code>__dict__</code> and replace it by a fixed set of members instead. So obviously, this will prevent later additions to the object (per design).</li>
</ul>
<p>What are good ways to detect whether you can modify an object? Well, check conditions from above. Whether the object has a <code>__dict__</code>:</p>
<pre><code>&gt;&gt;&gt; class Example:
        pass
&gt;&gt;&gt; class SlotsExample:
        __slots__ = ['x']

&gt;&gt;&gt; hasattr(Example(), '__dict__')
True
&gt;&gt;&gt; hasattr(SlotsExample(), '__dict__')
False
&gt;&gt;&gt; hasattr(list, '__dict__')
True
&gt;&gt;&gt; hasattr([], '__dict__')
False
</code></pre>
<p>And whether the <code>__dict__</code> is a real dictionary:</p>
<pre><code>&gt;&gt;&gt; isinstance(Example().__dict__, dict)
True
&gt;&gt;&gt; isinstance(list.__dict__, dict)
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In short, it depends on <code>__setattr__</code> magic method.</p>
<p>Python attributes are retrieved via <code>__getattr__</code> and <code>__setattr__</code>. In case you have a class without them, the defaults apply. (Slots are a little different.)</p>
<p>For built-in/extension types (<code>HEAPTYPE</code> in CPython), you can't add any other attributes by default, but you can, however, override it by providing another function. (Impossible with pure Python.)</p>
</div>
<span class="comment-copy">I guess to anything that is not an inbuilt type</span>
<span class="comment-copy">Strongly related: <a href="https://stackoverflow.com/questions/6738987/extension-method-for-python-built-in-types" title="extension method for python built in types">stackoverflow.com/questions/6738987/…</a></span>
