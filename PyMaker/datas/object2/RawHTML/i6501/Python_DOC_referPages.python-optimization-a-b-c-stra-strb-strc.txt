<div class="post-text" itemprop="text">
<p>I need to turn a list of various entities into strings. So far I use:</p>
<pre><code>all_ents_dead=[] # converted to strings

for i in all_ents:
    all_ents_dead.append(str(i))
</code></pre>
<p>Is there an optimized way of doing that?</p>
<p>EDIT: I then need to find which of these contain certain string. So far I have:</p>
<pre><code>matching = [s for s in all_ents_dead if "GROUPS" in s]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Whenever you have a <code>name = []</code>, then <code>name.append()</code> in a loop pattern, consider using a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>. A list comprehension builds a list from a loop, without having to use <code>list.append()</code> lookups and calls, making it faster:</p>
<pre><code>all_ents_dead = [str(i) for i in all_ents]
</code></pre>
<p>This directly echoes the code you had, but with the expression inside <code>all_ents_dead.append(...)</code> moved to the front of the <code>for</code> loop.</p>
<p>If you don't actually need a list, but only need to iterate over the <code>str()</code> conversions you should consider lazy conversion options. You can turn the list comprehension in to a <a href="https://docs.python.org/3/tutorial/classes.html#generator-expressions" rel="nofollow noreferrer"><em>generator expression</em></a>:</p>
<pre><code>all_ents_dead = (str(i) for i in all_ents)
</code></pre>
<p>or, when only applying a function, the faster alternative in the <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map()</code> function</a>:</p>
<pre><code>all_ents_dead = map(str, all_ents)  # assuming Python 3
</code></pre>
<p>both of which lazily apply <code>str()</code> as you iterate over the resulting object. This helps avoid creating a new list object where you don't actually need one, saving on memory. Do note that a generator expression can be <em>slower</em> however; if performance is at stake consider all options based on input sizes, memory constraints and time trials. </p>
<p>For your specific search example, you could just embed the <code>map()</code> call:</p>
<pre><code>matching = [s for s in map(str, all_ents) if "GROUPS" in s]
</code></pre>
<p>which would produce a list of matching strings, without creating an intermediary list of string objects that you then don't use anywhere else.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/3.6/library/functions.html#map" rel="nofollow noreferrer"><code>map()</code></a> function. This will take your existing list, run a function on each item, and return a new list/iterator (see below) with the result of the function applied on each element.</p>
<pre><code>all_ends_dead = map(str, all_ents)
</code></pre>
<p>In Python 3+, <code>map()</code> will return an iterator, while in Python 2 it will return a list. An iterator can have optimisations you desire since it generates the values when demanded, and not all at once (as opposed to a list).</p>
</div>
<span class="comment-copy">Please update your question to explain what result you expect and explain what result you're getting.</span>
<span class="comment-copy">The result that I expected is quite clearly explained. And the one I was getting is the same that I am getting from what the nice people below adviced to me. This Q is about an optimization of an already existing solution...</span>
<span class="comment-copy">Please explain why they should use a map.</span>
<span class="comment-copy">@Soviut I really don't appreciate you editing my answers like that. You're very welcome to include your own answer</span>
<span class="comment-copy">Hi and thanks! This (under Py3) returns <code>&lt;map object at 0x7f6a978feb10&gt;</code> instead of a list... .</span>
<span class="comment-copy">@Jewenile Yep, so that returns a <code>map</code> object - an iterator - which the docs explains. If you want it back to a list, you can call <code>list()</code> around the map object, but depending on what you want to do in the long run, it may be beneficial to keep it as a map object</span>
