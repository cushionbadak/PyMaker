<div class="post-text" itemprop="text">
<p>I have template strings for formating with names substitution variables, like</p>
<pre><code>mystr = "Some {title} text {body}"
mystr_ready = mystr.format(title='abc', body='bcd')
</code></pre>
<p>There can be many different substitution variables names in {} there, we don't know their names each time, so before I will take them from data base for substitution, I need to know their names first (taking all variants from huge table in data base is too slow).</p>
<p>So I need to realize this logic:</p>
<pre><code>mystr = "Some {title} text {body}"
subs = SOMETHING(mystr)  # title, body
</code></pre>
<p>I know this can be solved with regular expressions, but I suppose there can be more elegant and pythonic solution.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/3/library/string.html#string.Formatter" rel="nofollow noreferrer">string.Formatter</a>:</p>
<pre><code>import string

parser = string.Formatter().parse

def fmt_fields(fmt):
    return [f[1] for f in parser(fmt) if f[1] is not None]

print(fmt_fields("Some {title} text {body}"))
</code></pre>
</div>
<span class="comment-copy">I think the best solution would be using regex. You might be able to write it without regex, but it would basically be python code to do the same thing as regex, but a lot harder,</span>
<span class="comment-copy">You might want to remove the <code>None</code> which would show up at the end if the last thing in the format were not a replacement.</span>
<span class="comment-copy">@rici Thank you! I have updated the code.</span>
<span class="comment-copy">Thanks a lot, I knew that Python might have some such easy and nice solution! :-)</span>
