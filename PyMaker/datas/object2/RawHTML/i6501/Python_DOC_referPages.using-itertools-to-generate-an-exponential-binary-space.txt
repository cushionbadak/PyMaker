<div class="post-text" itemprop="text">
<p>I am interested in generating all binary combination of <code>N</code> variables without having to implement a manual loop of iterating N times over N and each time looping over <code>N/2</code> and so on. </p>
<p>Do we have such functionality in python?</p>
<p>E.g:</p>
<p>I have <code>N</code> binary variables: </p>
<pre><code>pool=['A','B','C',...,'I','J']
len(pool)=10
</code></pre>
<p>I would like to generate <code>2^10=1024</code> space out of these such as:</p>
<pre><code>          [A B C ... I J]
iter0    = 0 0 0 ... 0 0
iter1    = 0 0 0 ... 0 1
iter2    = 0 0 0 ... 1 1
...
iter1022 = 1 1 1 ... 1 0
iter1023 = 1 1 1 ... 1 1
</code></pre>
<p>You see that I don't have repetitions here, each variable is enabled once per each of these iter's sequences. How can I do that using Python's <code>itertools</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code> with the <code>repeat</code> parameter</a> is the simplest answer:</p>
<pre><code>for A, B, C, D, E, F, G, H, I, J in itertools.product((0, 1), repeat=10):
</code></pre>
<p>The values of each variable will cycle fastest on the right, and slowest on the left, so you'll get:</p>
<pre><code>0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 1
0 0 0 0 0 0 0 0 1 0
0 0 0 0 0 0 0 0 1 1
0 0 0 0 0 0 0 1 0 0
</code></pre>
<p>etc. This may be recognizable to you: It's just the binary representation of an incrementing 10 bit number. Depending on your needs, you may actually want to just do:</p>
<pre><code>for i in range(1 &lt;&lt; 10):
</code></pre>
<p>then mask <code>i</code> with <code>1 &lt;&lt; 9</code> to get the value of <code>A</code>, <code>1 &lt;&lt; 8</code> for <code>B</code>, and so on down to <code>1 &lt;&lt; 0</code> (that is, <code>1</code>) for <code>J</code>. If the goal is just to print them, you can even get more clever, by binary stringifying and then using <code>join</code> to insert the separator:</p>
<pre><code>for i in range(1 &lt;&lt; 10):
    print(' '.join('{:010b}'.format(i)))
    # Or letting print insert the separator:
    print(*'{:010b}'.format(i)) # If separator isn't space, pass sep='sepstring'
</code></pre>
</div>
<span class="comment-copy">Use <a href="https://docs.python.org/2.7/library/itertools.html#itertools.product" rel="nofollow noreferrer">itertools.product</a> with the <code>repeat</code> parameter</span>
<span class="comment-copy">@lazydog. That won't work, tried that already. btw, I don't have repetition here. E.g., variable <code>A</code> should be enabled once per each sequence.</span>
<span class="comment-copy">Then what are examples of your <i>actual</i> expected output here? Be clear. For example, does <code>iter1</code> in your table translate to <code>'J'</code>? Is <code>iter2</code> supposed to represent <code>'IJ'</code>? Will just <code>'I'</code> be part of the output?</span>
<span class="comment-copy">my expected output is in the question. Yes. but for completeness, I would like to have the 0s and 1s to make sure it went fine.</span>
<span class="comment-copy">I see. I'm sorry, I should have been more explicit in my initial comment</span>
<span class="comment-copy">Thanks @ShadowRanger. Then I should print(A,...,J) to have to have the complete sequence. right?</span>
<span class="comment-copy">@Amir: Yeah. You don't <i>have</i> to unpack them by name if you don't need them individually; <code>for bits in itertools.product((0, 1), repeat=10):</code> followed by <code>print(*bits)</code> would produce the same output as unpacking and explicitly naming them all in the <code>print</code> call.</span>
<span class="comment-copy">@ShahowRanger, Could you explain what does <code>:010b</code> represent here?</span>
<span class="comment-copy">@Amir: It's from the <a href="https://docs.python.org/3/library/string.html#formatspec" rel="nofollow noreferrer">format specification mini-language</a>. The <code>:</code> is necessary to introduce the format spec (you could put a <code>0</code> before it to explicitly say you want the 0th positional arg, but it's not needed on 2.7+). The <code>0</code> says pad with zeroes, the <code>10</code> says it must pad to a 10 character width (so <code>0</code> produces 10 zeroes, not one), and the <code>b</code> says to expect an integer and format it as its bit representation (aka the base 2 representation).</span>
<span class="comment-copy">@Amir: So what would all the other values in <code>A</code> be under this scenario? I strongly suspect you're asking a question sufficiently complex to warrant a separate question, but it's a little unclear what your goal is. I suggest trying to make it work on your own, and if it fails, asking a new question including a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>; you can't expect people to write all the code for you.</span>
