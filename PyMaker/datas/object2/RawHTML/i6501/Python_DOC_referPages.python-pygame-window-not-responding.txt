<div class="post-text" itemprop="text">
<p>I am attempting to write a program in Python 3.6, with the help of pygame (A Python module) which is supposed to flash Red, Green, and Blue quickly on the screen. The program runs as intended for approximately ten to fifteen seconds before it stops responding. (I have noticed that only 3 events are printed to the console, when there should be A LOT more.)</p>
<pre><code>import pygame
import threading
import time

'''
IMPORTS ARE ABOVE THIS LINE
'''


class EventHandler(threading.Thread):

    def run(self):
        for event in pygame.event.get():
            print(event)
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()


'''
CLASSES ARE ABOVE THIS LINE
'''


# Initializer
gameInit = pygame.init()

# Colors
white = (255, 255, 255)
black = (0, 0, 0)
red = (255, 0, 0)
green = (0, 255, 0)
blue = (0, 0, 255)

# Setup Crap
gameDisplay = pygame.display.set_mode((800, 600))
pygame.display.set_caption("Pygame Colors")

# Event Handler
handler = EventHandler()
handler.start()

 # Game Loop
while True:
    gameDisplay.fill(red)
    pygame.display.update()
    time.sleep(0.1)
    gameDisplay.fill(green)
    pygame.display.update()
    time.sleep(0.1)
    gameDisplay.fill(blue)
    pygame.display.update()
    time.sleep(0.1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need a while loop in the <code>run</code> method and also put the main loop into a function.</p>
<pre><code>import pygame
import threading
import time


class EventHandler(threading.Thread):

    def run(self):
        while True:
            for event in pygame.event.get():
                print(event)
                if event.type == pygame.QUIT:
                    pygame.quit()
                    quit()

gameInit = pygame.init()

red = (255, 0, 0)
green = (0, 255, 0)
blue = (0, 0, 255)

gameDisplay = pygame.display.set_mode((800, 600))

def main_loop():
    while True:
        gameDisplay.fill(red)
        pygame.display.update()
        time.sleep(0.4)
        gameDisplay.fill(green)
        pygame.display.update()
        time.sleep(0.4)
        gameDisplay.fill(blue)
        pygame.display.update()
        time.sleep(0.4)

handler = EventHandler()
handler.start()
t = threading.Thread(target=main_loop)
t.start()
</code></pre>
<p>However, there's really no need for <code>threading</code> in this case and the code looks rather strange to me. You can just use <code>pygame.time.get_ticks()</code> to calculate the passed time and then change the color when it's above your time limit. <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools.cycle</code></a> is pretty handy if you want to cycle through several values infinitely.</p>
<pre><code>import itertools

import pygame


pygame.init()

red = (255, 0, 0)
green = (0, 255, 0)
blue = (0, 0, 255)
# An infinite iterator that cycles through these colors.
colors = itertools.cycle((red, green, blue))
color = next(colors)

gameDisplay = pygame.display.set_mode((800, 600))
clock = pygame.time.Clock()
start_time = 0

done = False

while not done:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            done = True

    current_time = pygame.time.get_ticks()
    if current_time - start_time &gt; 500:  # 500 milliseconds.
        color = next(colors)
        start_time = current_time

    gameDisplay.fill(color)
    pygame.display.flip()
    clock.tick(60)

pygame.quit()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest that your code was running too fast, and to increase the <code>time.sleep</code> value. </p>
</div>
<span class="comment-copy">You need to call one of the event functions <a href="https://stackoverflow.com/a/44398034/6486738">regularly in the thread that initialize the video system</a>. If you don't handle events regularly the OS <a href="https://stackoverflow.com/a/44256668/6486738">thinks the program has become unresponsive/crashed</a>.</span>
<span class="comment-copy">I changed all the time.sleep(0.1) to time.sleep(10), but the same thing happens.</span>
<span class="comment-copy">I could only assume then that your crashes are caused by the <code>while True</code> loop, which is overloading your system.</span>
<span class="comment-copy">After deleting the while True loop, and just simply doing pygame.display.fill(green) and pygame.dispaly.update() right after that, the program still crashes. @josh-dinsdale</span>
