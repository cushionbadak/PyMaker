<div class="post-text" itemprop="text">
<p>How do I generate all possible Newick Tree permutations for a set of species given an outgroup?</p>
<p>For those who don't know what Newick tree format is, a good description is available at:
<a href="https://en.wikipedia.org/wiki/Newick_format" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Newick_format</a></p>
<p>I want to create all possible Newick Tree permutations for a set of species given an outgroup. The number of leaf nodes I expect to process are most likely 4, 5, or 6 leaf nodes.</p>
<p>Both "Soft" and "hard" polytomies are allowed.
<a href="https://en.wikipedia.org/wiki/Polytomy#Soft_polytomies_vs._hard_polytomies" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Polytomy#Soft_polytomies_vs._hard_polytomies</a>
<a href="https://biology.stackexchange.com/questions/23667/evidence-discussions-of-hard-polytomy">https://biology.stackexchange.com/questions/23667/evidence-discussions-of-hard-polytomy</a></p>
<p>Shown below is the ideal output, with "E" set as the outgroup</p>
<p>Ideal Output:</p>
<pre><code>((("A","B","C"),("D"),("E"));
((("A","B","D"),("C"),("E"));
((("A","C","D"),("B"),("E"));
((("B","C","D"),("A"),("E"));
((("A","B")("C","D"),("E"));
((("A","C")("B","D"),("E"));
((("B","C")("A","D"),("E"));
(("A","B","C","D"),("E"));
(((("A","B"),"C"),"D"),("E"));
</code></pre>
<p>However, any possible solutions that I've come with using itertools, specifically itertools.permutations, have come across the problem of equivalent output. The last idea I came up with involved the equivalent output that is shown below.</p>
<p>Equivalent output:</p>
<pre><code>((("C","B","A"),("D"),("E"));
((("C","A","B"),("D"),("E"));
((("A","C","B"),("D"),("E"));
</code></pre>
<p>Here is the start of my idea for a solution. However, I'm not really sure what to about this problem besides itertools for now.</p>
<pre><code>import itertools

def Newick_Permutation_Generator(list_of_species, name_of_outgroup)
    permutations_list =(list(itertools.permutations(["A","B","C","D","E"])))

    for given_permutation in permutations_list:
        process(given_permutation)

Newick_Permutation_Generator(["A","B","C","D","E"], "E")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>A tree as a recursive set of sets of leaves</h2>
<p>Let's set aside the newick representation for the moment, and think of a possible python representation of the problem.</p>
<p>A rooted tree can be viewed as a <strong>recursive hierarchy of sets</strong> of (sets of (sets of ...)) leaves. Sets are unordered, which is quite adapted to describe clades in a tree: <code>{{{"A", "B"}, {"C", "D"}}, "E"}</code> should be the same thing as <code>{{{"C", "D"}, {"B", "A"}}, "E"}</code>.</p>
<p>If we consider the initial set of leaves <code>{"A", "B", "C", "D", "E"}</code>, the trees with "E" as outgroup are the set of sets in the form <code>{tree, "E"}</code> where <code>tree</code>s are taken from the set of trees that can be built from the set of leaves <code>{"A", "B", "C", "D"}</code>. We could try to write a recursive <code>trees</code> function to generate this set of trees, and our total set of trees would be expressed as follows:</p>
<pre><code>{{tree, "E"} for tree in trees({"A", "B", "C", "D"})}
</code></pre>
<p>(Here, I use the <a href="https://en.wikipedia.org/wiki/List_comprehension#Set_comprehension" rel="nofollow noreferrer">set comprehension</a> notation.)</p>
<p>Actually, python doesn't allow sets of sets, because the elements of a set must be "hashable" (that is, python must be able to compute some "hash" values of objects to be able to check whether they belong or not to the set). It happens that python sets do not have this property. Fortunately, we can use a similar data structure named <a href="https://docs.python.org/3/library/stdtypes.html#frozenset" rel="nofollow noreferrer"><code>frozenset</code></a>, which behaves quite like a set, but cannot be modified and is "hashable". Therefore, our set of trees would be:</p>
<pre><code>all_trees = frozenset(
    {frozenset({tree, "E"}) for tree in trees({"A", "B", "C", "D"})})
</code></pre>
<h2>Implementing the <code>trees</code> function</h2>
<p>Now let's focus on the <code>trees</code> function.</p>
<p>For each possible <strong>partition</strong> (decomposition into a set of disjoint subsets, including all elements) of the set of leaves, we need to find all possible trees (through a recursive call) for each part of the partition. For a given partition, we will then make a tree for each possible combination of subtrees taken across its parts.</p>
<p>For instance, if a partition is <code>{"A", {"B", "C", "D"}}</code>, we will consider all possible trees that can be made from part <code>"A"</code> (actually, just the leaf <code>"A"</code> itself), and all possible trees that can be made from part <code>{"B", "C", "D"}</code> (that is, <code>trees({"B", "C", "D"})</code>). Then, the possible trees for this partition will be obtained by taking all possible pairs where one element comes from just <code>"A"</code>, and the other from <code>trees({"B", "C", "D"})</code>.</p>
<p>This can be generalized for partitions with more than two parts, and the <code>product</code> function from <code>itertools</code> seems to be useful here.</p>
<p>Therefore, we need a way to generate the possible partitions of a set of leaves.</p>
<h3>Generating partitions of a set</h3>
<p>Here I made a <code>partitions_of_set</code> function adapted from <a href="https://stackoverflow.com/a/30134039/1878788">this solution</a>:</p>
<pre><code># According to https://stackoverflow.com/a/30134039/1878788:
# The problem is solved recursively:
# If you already have a partition of n-1 elements, how do you use it to partition n elements?
# Either place the n'th element in one of the existing subsets, or add it as a new, singleton subset.
def partitions_of_set(s):
    if len(s) == 1:
        yield frozenset(s)
        return
    # Extract one element from the set
    # https://stackoverflow.com/a/43804050/1878788
    elem, *_ = s
    rest = frozenset(s - {elem})
    for partition in partitions_of_set(rest):
        for subset in partition:
            # Insert the element in the subset
            try:
                augmented_subset = frozenset(subset | frozenset({elem}))
            except TypeError:
                # subset is actually an atomic element
                augmented_subset = frozenset({subset} | frozenset({elem}))
            yield frozenset({augmented_subset}) | (partition - {subset})
        # Case with the element in its own extra subset
        yield frozenset({elem}) | partition
</code></pre>
<p>To check the obtained partitions, we make a function to make them easier to display (that will also be useful to make a newick representation of the trees later):</p>
<pre><code>def print_set(f):
    if type(f) not in (set, frozenset):
        return str(f)
    return "(" + ",".join(sorted(map(print_set, f))) + ")"
</code></pre>
<p>We test that the partitioning works:</p>
<pre><code>for partition in partitions_of_set({"A", "B", "C", "D"}):
    print(len(partition), print_set(partition))
</code></pre>
<p>Output:</p>
<pre><code>1 ((A,B,C,D))
2 ((A,B,D),C)
2 ((A,C),(B,D))
2 ((B,C,D),A)
3 ((B,D),A,C)
2 ((A,B,C),D)
2 ((A,B),(C,D))
3 ((A,B),C,D)
2 ((A,D),(B,C))
2 ((A,C,D),B)
3 ((A,D),B,C)
3 ((A,C),B,D)
3 ((B,C),A,D)
3 ((C,D),A,B)
4 (A,B,C,D)
</code></pre>
<h3>Actual code of the <code>trees</code> function</h3>
<p>Now we can write the <code>tree</code> function:</p>
<pre><code>from itertools import product
def trees(leaves):
    if type(leaves) not in (set, frozenset):
        # It actually is a single leaf
        yield leaves
        # Don't try to yield any more trees
        return
    # Otherwise, we will have to consider all the possible
    # partitions of the set of leaves, and for each partition,
    # construct the possible trees for each part
    for partition in partitions_of_set(leaves):
        # We need to skip the case where the partition
        # has only one subset (the initial set itself),
        # otherwise we will try to build an infinite
        # succession of nodes with just one subtree
        if len(partition) == 1:
            part, *_ = partition
            # Just to be sure the assumption is correct
            assert part == leaves
            continue
        # We recursively apply *tree* to each part
        # and obtain the possible trees by making
        # the product of the sets of possible subtrees.
        for subtree in product(*map(trees, partition)):
            # Using a frozenset guarantees
            # that there will be no duplicates
            yield frozenset(subtree)
</code></pre>
<p>Testing it:</p>
<pre><code>all_trees = frozenset(
    {frozenset({tree, "E"}) for tree in trees({"A", "B", "C", "D"})})

for tree in all_trees:
    print(print_set(tree) + ";")
</code></pre>
<p>Output:</p>
<pre><code>(((B,C),A,D),E);
((((A,B),D),C),E);
((((B,D),A),C),E);
((((C,D),A),B),E);
(((A,D),B,C),E);
((A,B,C,D),E);
((((B,D),C),A),E);
(((A,B,C),D),E);
((((A,C),B),D),E);
((((C,D),B),A),E);
((((B,C),A),D),E);
(((A,B),C,D),E);
(((A,C),(B,D)),E);
(((B,D),A,C),E);
(((C,D),A,B),E);
((((A,B),C),D),E);
((((A,C),D),B),E);
(((A,C,D),B),E);
(((A,D),(B,C)),E);
((((A,D),C),B),E);
((((B,C),D),A),E);
(((A,B),(C,D)),E);
(((A,B,D),C),E);
((((A,D),B),C),E);
(((A,C),B,D),E);
(((B,C,D),A),E);
</code></pre>
<p>I hope the result is correct.</p>
<p>This approach was a bit tricky to get right. It took me some time to figure out how to avoid the infinite recursion (This happens when the partition is <code>{{"A", "B", "C", "D"}}</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>This was a hard question! Here is the journey I took.</p>
<p>First observation is that the outgroup is always a single node tacked onto the end of the newick string. Let's call the rest of the species the ingroup and try to generate all the permutations of these. Then simply add the outgroup.</p>
<pre><code>from itertools import permutations

def ingroup_generator(species, n):
    for perm in permutations(species, n):
        yield tuple([tuple(perm), tuple(s for s in species if s not in perm)])

def format_newick(s, outgroup=''):
    return '(' + ', '.join('({})'.format(', '.join(p)) for p in s) + ',({}));'.format(outgroup)

species = ["A","B","C","D","E"]
outgroup = "E"
ingroup = [s for s in species if s != outgroup]

itertools_newicks= []
for n in range(1, len(ingroup)):
    for p in ingroup_generator(ingroup, n):
        itertools_newicks.append(format_newick(p, outgroup))

for newick in itertools_newicks:
    print newick
</code></pre>
<p>This returns 40 newick strings:</p>
<pre><code>((A), (B, C, D),(E));
((B), (A, C, D),(E));
((C), (A, B, D),(E));
((D), (A, B, C),(E));
((A, B), (C, D),(E));
((A, C), (B, D),(E));
((A, D), (B, C),(E));
((B, A), (C, D),(E));
((B, C), (A, D),(E));
((B, D), (A, C),(E));
((C, A), (B, D),(E));
((C, B), (A, D),(E));
((C, D), (A, B),(E));
((D, A), (B, C),(E));
((D, B), (A, C),(E));
((D, C), (A, B),(E));
((A, B, C), (D),(E));
((A, B, D), (C),(E));
((A, C, B), (D),(E));
((A, C, D), (B),(E));
((A, D, B), (C),(E));
((A, D, C), (B),(E));
((B, A, C), (D),(E));
((B, A, D), (C),(E));
((B, C, A), (D),(E));
((B, C, D), (A),(E));
((B, D, A), (C),(E));
((B, D, C), (A),(E));
((C, A, B), (D),(E));
((C, A, D), (B),(E));
((C, B, A), (D),(E));
((C, B, D), (A),(E));
((C, D, A), (B),(E));
((C, D, B), (A),(E));
((D, A, B), (C),(E));
((D, A, C), (B),(E));
((D, B, A), (C),(E));
((D, B, C), (A),(E));
((D, C, A), (B),(E));
((D, C, B), (A),(E));
</code></pre>
<p>Some of these are duplicates, but we will get to removing the duplicates later.</p>
<p>As <a href="https://stackoverflow.com/questions/46626414/how-do-i-generate-all-possible-newick-tree-permutations-for-a-set-of-species-giv#comment80236938_46626414">bli noted in the comments</a>, <code>(((("A","B"),"C"),"D"),("E"));</code> and its variants should also be considered valid solutions. 
The <a href="https://www.biostars.org/p/276858/#277061" rel="nofollow noreferrer">comments on BioStar</a> pointed me in the right direction that this is the same as generating all the possible groupings of a binary tree. I found a nice <a href="https://stackoverflow.com/a/14901512/50065">Python implementation in this StackOverflow answer by rici</a>:</p>
<pre><code># A very simple representation for Nodes. Leaves are anything which is not a Node.
class Node(object):
  def __init__(self, left, right):
    self.left = left
    self.right = right

  def __repr__(self):
    return '(%s, %s)' % (self.left, self.right)

# Given a tree and a label, yields every possible augmentation of the tree by
# adding a new node with the label as a child "above" some existing Node or Leaf.
def add_leaf(tree, label):
  yield Node(label, tree)
  if isinstance(tree, Node):
    for left in add_leaf(tree.left, label):
      yield Node(left, tree.right)
    for right in add_leaf(tree.right, label):
      yield Node(tree.left, right)

# Given a list of labels, yield each rooted, unordered full binary tree with
# the specified labels.
def enum_unordered(labels):
  if len(labels) == 1:
    yield labels[0]
  else:
    for tree in enum_unordered(labels[1:]):
      for new_tree in add_leaf(tree, labels[0]):
        yield new_tree
</code></pre>
<p>Then,</p>
<pre><code>enum_newicks= []
for t in enum_unordered(ingroup):
    enum_newicks.append('({},({}));'.format(t, outgroup))

for newick in enum_newicks:
    print newick
</code></pre>
<p>produces the following 15 newicks:</p>
<pre><code>((A, (B, (C, D))),(E));
(((A, B), (C, D)),(E));
((B, (A, (C, D))),(E));
((B, ((A, C), D)),(E));
((B, (C, (A, D))),(E));
((A, ((B, C), D)),(E));
(((A, (B, C)), D),(E));
((((A, B), C), D),(E));
(((B, (A, C)), D),(E));
(((B, C), (A, D)),(E));
((A, (C, (B, D))),(E));
(((A, C), (B, D)),(E));
((C, (A, (B, D))),(E));
((C, ((A, B), D)),(E));
((C, (B, (A, D))),(E));
</code></pre>
<p>So now we already have 40 + 15 = 55 possible newick strings and we have to remove the duplicates.</p>
<p>I first dead end that I tried was to create a canonical representation of each newick string so that I could use these as keys in a dictionary. The idea was to recursively sort the strings in all the nodes. But first I had to capture all the (nested) nodes. I couldn't use regular expressions, because <a href="https://stackoverflow.com/a/1101030/50065">nested structures are by definition not regular</a>. </p>
<p>So I used the <code>pyparsing</code> package and come up with this:</p>
<pre><code>from pyparsing import nestedExpr 

def sort_newick(t):
    if isinstance(t, str):
        return sorted(t)
    else:
        if all(isinstance(c, str) for c in t):
            return sorted(t)
        if all(isinstance(l, list) for l in t):
            return [sort_newick(l) for l in sorted(t, key=lambda k: sorted(k))]
        else:
            return [sort_newick(l) for l in t]


def canonical_newick(n):
    n = n.replace(',', '')
    p = nestedExpr().parseString(n).asList()
    s = sort_newick(p)
    return str(s)
</code></pre>
<p>This gave for</p>
<pre><code>from collections import defaultdict

all_newicks = itertools_newicks + enum_newicks

d = defaultdict(list)
for newick in all_newicks:
    d[canonical_newick(newick)].append(newick)

for canonical, newicks in d.items():
    print canonical
    for newick in newicks:
        print '\t', newick
    print
</code></pre>
<p>A dictionary with 22 keys:</p>
<pre><code>[[[['A'], [['C'], ['B', 'D']]], ['E']]]
    ((A, (C, (B, D))),(E));

[[[['B'], [['A'], ['C', 'D']]], ['E']]]
    ((B, (A, (C, D))),(E));

[[[['B'], [['A', 'C'], ['D']]], ['E']]]
    ((B, ((A, C), D)),(E));

[[['A', 'C', 'D'], ['B'], ['E']]]
    ((B), (A, C, D),(E));
    ((A, C, D), (B),(E));
    ((A, D, C), (B),(E));
    ((C, A, D), (B),(E));
    ((C, D, A), (B),(E));
    ((D, A, C), (B),(E));
    ((D, C, A), (B),(E));

[[['A', 'B'], ['C', 'D'], ['E']]]
    ((A, B), (C, D),(E));
    ((B, A), (C, D),(E));
    ((C, D), (A, B),(E));
    ((D, C), (A, B),(E));

[[[[['A'], ['B', 'C']], ['D']], ['E']]]
    (((A, (B, C)), D),(E));

[[[['A', 'C'], ['B', 'D']], ['E']]]
    (((A, C), (B, D)),(E));

[[['A'], ['B', 'C', 'D'], ['E']]]
    ((A), (B, C, D),(E));
    ((B, C, D), (A),(E));
    ((B, D, C), (A),(E));
    ((C, B, D), (A),(E));
    ((C, D, B), (A),(E));
    ((D, B, C), (A),(E));
    ((D, C, B), (A),(E));

[[[['A', 'D'], ['B', 'C']], ['E']]]
    (((B, C), (A, D)),(E));

[[['A', 'B', 'C'], ['D'], ['E']]]
    ((D), (A, B, C),(E));
    ((A, B, C), (D),(E));
    ((A, C, B), (D),(E));
    ((B, A, C), (D),(E));
    ((B, C, A), (D),(E));
    ((C, A, B), (D),(E));
    ((C, B, A), (D),(E));

[[['A', 'C'], ['B', 'D'], ['E']]]
    ((A, C), (B, D),(E));
    ((B, D), (A, C),(E));
    ((C, A), (B, D),(E));
    ((D, B), (A, C),(E));

[[['A', 'B', 'D'], ['C'], ['E']]]
    ((C), (A, B, D),(E));
    ((A, B, D), (C),(E));
    ((A, D, B), (C),(E));
    ((B, A, D), (C),(E));
    ((B, D, A), (C),(E));
    ((D, A, B), (C),(E));
    ((D, B, A), (C),(E));

[[[['A'], [['B'], ['C', 'D']]], ['E']]]
    ((A, (B, (C, D))),(E));

[[[[['A', 'B'], ['C']], ['D']], ['E']]]
    ((((A, B), C), D),(E));

[[[[['B'], ['A', 'C']], ['D']], ['E']]]
    (((B, (A, C)), D),(E));

[[[['C'], [['B'], ['A', 'D']]], ['E']]]
    ((C, (B, (A, D))),(E));

[[[['C'], [['A', 'B'], ['D']]], ['E']]]
    ((C, ((A, B), D)),(E));

[[[['A'], [['B', 'C'], ['D']]], ['E']]]
    ((A, ((B, C), D)),(E));

[[[['A', 'B'], ['C', 'D']], ['E']]]
    (((A, B), (C, D)),(E));

[[[['B'], [['C'], ['A', 'D']]], ['E']]]
    ((B, (C, (A, D))),(E));

[[[['C'], [['A'], ['B', 'D']]], ['E']]]
    ((C, (A, (B, D))),(E));

[[['A', 'D'], ['B', 'C'], ['E']]]
    ((A, D), (B, C),(E));
    ((B, C), (A, D),(E));
    ((C, B), (A, D),(E));
    ((D, A), (B, C),(E));
</code></pre>
<p>But closer inspection revealed some problems. Let's look for example at the newicks <code>'(((A, B), (C, D)),(E));</code> and <code>((D, C), (A, B),(E));</code>. In our dictionary <code>d</code> they have a different canonical key, respectively <code>[[[['A', 'B'], ['C', 'D']], ['E']]]</code> and <code>[[['A', 'B'], ['C', 'D'], ['E']]]</code>. But in fact, these are duplicate trees. We can confirm this by looking at the <a href="https://en.wikipedia.org/wiki/Robinson%E2%80%93Foulds_metric" rel="nofollow noreferrer">Robinson-Foulds distance</a> between two trees. If it is zero, the trees are identical.</p>
<p>We use the <code>robinson_foulds</code> function from the <a href="http://etetoolkit.org" rel="nofollow noreferrer">ete3 toolkit package</a></p>
<pre><code>from ete3 import Tree

tree1 = Tree('(((A, B), (C, D)),(E));')
tree2 = Tree('((D, C), (A, B),(E));')

rf, max_parts, common_attrs, edges1, edges2, discard_t1, discard_t2 = tree1.robinson_foulds(tree2, unrooted_trees=True)
    print rf # returns 0
</code></pre>
<p>OK, so Robinson-Foulds is a better way of checking for newick tree equality then my canonical tree approach. Let's wrap all newick strings in a custom <code>MyTree</code> object where equality is defined as having a Robinson-Foulds distance of zero:</p>
<pre><code>class MyTree(Tree):

    def __init__(self, *args, **kwargs):
        super(MyTree, self).__init__(*args, **kwargs)

    def __eq__(self, other):
        rf = self.robinson_foulds(other, unrooted_trees=True)
        return not bool(rf[0])

trees = [MyTree(newick) for newick in all_newicks]
</code></pre>
<p>It would have been ideal if we could also define a <code>__hash__()</code> function that returns the same value for duplicate trees, then <code>set(trees)</code> would automatically remove all the duplicates.</p>
<p>Unfortunately, <a href="https://stackoverflow.com/questions/46664363/how-to-remove-duplicates-in-list-of-objects-without-hash">I haven't been able to find a good way to define <code>__hash__()</code></a>, but with <code>__eq__</code> in place, I could <a href="https://stackoverflow.com/a/38505004/50065">make use of <code>index()</code></a>:</p>
<pre><code>unique_trees = [trees[i] for i in range(len(trees)) if i == trees.index(trees[i])]
unique_newicks = [tree.write(format=9) for tree in unique_trees]
for unique_newick in unique_newicks:
    print unique_newick
</code></pre>
<p>So, here we are at the end of our journey. I can't fully provide proof that this is the correct solution, but I am pretty confident that the following 19 newicks are all the possible distinct permutations:</p>
<pre><code>((A),(B,C,D),(E));
((B),(A,C,D),(E));
((C),(A,B,D),(E));
((D),(A,B,C),(E));
((A,B),(C,D),(E));
((A,C),(B,D),(E));
((A,D),(B,C),(E));
((A,(B,(C,D))),(E));
((B,(A,(C,D))),(E));
((B,((A,C),D)),(E));
((B,(C,(A,D))),(E));
((A,((B,C),D)),(E));
(((A,(B,C)),D),(E));
((((A,B),C),D),(E));
(((B,(A,C)),D),(E));
((A,(C,(B,D))),(E));
((C,(A,(B,D))),(E));
((C,((A,B),D)),(E));
((C,(B,(A,D))),(E));
</code></pre>
<p>If we pairwise compare every newick to all other newicks, we get confirmation that there are no more duplicates in this list</p>
<pre><code>from itertools import product

for n1, n2 in product(unique_newicks, repeat=2):
    if n1 != n2:
        mt1 = MyTree(n1)
        mt2 = MyTree(n2)
        assert mt1 != mt2
</code></pre>
</div>
<span class="comment-copy">Why don't you list topologies such as <code>(("A","B","C","D"),("E"));</code> in your desired output? You allow "trifurcations", so why not "quadrifurcations"?</span>
<span class="comment-copy">If you use sets (<a href="https://docs.python.org/3.6/library/stdtypes.html#set-types-set-frozenset" rel="nofollow noreferrer">docs.python.org/3.6/library/…</a>) instead of tuples of lists, you can eliminate the "equivalent output" problem.</span>
<span class="comment-copy"><code>(((("A","B"),"C"),"D"),("E"));</code> could also be considered a valid solution, yet you do not list it in your desired output. I think you need to define more accurately what you mean by "all possible permutations".</span>
<span class="comment-copy">I think that the trees you give are actually not valid newick: check that the opening parentheses all have a matching closed parenthesis.</span>
<span class="comment-copy">@bli Yes, (("A","B","C","D"),("E")); and (((("A","B"),"C"),"D"),("E")); should be considered desired output.</span>
<span class="comment-copy">Very nice approach, I think we have a winner here!</span>
<span class="comment-copy">Recursion FTW here. Only way to handle these graph problems.</span>
<span class="comment-copy">Thank you for the answer. It is the most comprehensive answer.</span>
<span class="comment-copy">Wow! That is a well-thought answer. I need to take a look at it myself more in depth tomorrow but it looks like it should work.</span>
<span class="comment-copy">Did you take both types of polytomies into account? I realize after speaking with others on Biostars that both types of polytomies are present in my question. See here at <a href="https://www.biostars.org/p/276858/#277116" rel="nofollow noreferrer">biostars.org/p/276858/#277116</a> I have noted that in my question but you don't have to redo your answer. I just wanted to know that for when I check your answer. Thank you for the fantastic answer!</span>
<span class="comment-copy">It seems that your solution misses some of the multifurcation cases, like <code>((A,B,C,D),E);</code> or <code>(((C,D),A,B),E);</code>. I'm not sure why.</span>
