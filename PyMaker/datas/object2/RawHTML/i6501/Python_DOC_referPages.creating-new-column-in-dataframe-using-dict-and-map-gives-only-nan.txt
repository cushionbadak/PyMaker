<div class="post-text" itemprop="text">
<p>I have a Pandas Dataframe as such,</p>
<pre><code>       Rank % Renewable
Country     
China   1   19.754910
Japan   3   10.232820
Canada  6   61.945430
Germany 7   17.901530
India   8   14.969080
France  9   17.020280
Italy   11  33.667230
Spain   12  37.968590
Iran    13  5.707721
Brazil  15  69.648030
</code></pre>
<p>I use a dictionary to map values into a new column called continent using the following code I found in an similar answer,</p>
<pre><code>df['continent'] = pd.Series(df.index.values).map(ContinentDict)
</code></pre>
<p>being <code>ContinentDict</code>,</p>
<pre><code>ContinentDict  = {'China':'Asia', 
              'United States':'North America', 
              'Japan':'Asia', 
              'United Kingdom':'Europe', 
              'Russian Federation':'Europe', 
              'Canada':'North America', 
              'Germany':'Europe', 
              'India':'Asia',
              'France':'Europe', 
              'South Korea':'Asia', 
              'Italy':'Europe', 
              'Spain':'Europe', 
              'Iran':'Asia',
              'Australia':'Australia', 
              'Brazil':'South America'}
</code></pre>
<p>All the new items in column <code>continent</code> are NaNs, can anyone help me here?</p>
</div>
<div class="post-text" itemprop="text">
<p>You want</p>
<pre><code>In[90]:
df['continent'] = df.index.to_series().map(ContinentDict)
df

Out[90]: 
         Rank  % Renewable      continent
Country                                  
China       1    19.754910           Asia
Japan       3    10.232820           Asia
Canada      6    61.945430  North America
Germany     7    17.901530         Europe
India       8    14.969080           Asia
France      9    17.020280         Europe
Italy      11    33.667230         Europe
Spain      12    37.968590         Europe
Iran       13     5.707721           Asia
Brazil     15    69.648030  South America
</code></pre>
<p>What you tried:</p>
<pre><code>In[91]:
pd.Series(df.index.values).map(ContinentDict)

Out[91]: 
0             Asia
1             Asia
2    North America
3           Europe
4             Asia
5           Europe
6           Europe
7           Europe
8             Asia
9    South America
dtype: object
</code></pre>
<p>generates <code>NaN</code> because you're constructing a <code>Series</code> from the numpy values so the index returned is the auto-generated <code>RangeIndex</code> so when it tries to align against your df, it fails so all rows become <code>NaN</code></p>
</div>
<div class="post-text" itemprop="text">
<p><strong>For completeness:</strong> </p>
<p><code>pd.Index</code> definitely has a <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Index.map.html" rel="nofollow noreferrer"><strong><code>map</code></strong></a> method.  However, as of pandas 0.20.3, it only takes a callable.  That means it does not work with a dictionary.  We can change that by passing a callable to it.  In fact, a dictionary already has the appropriate method for us.  Namely, <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow noreferrer"><strong><code>dict.get</code></strong></a></p>
<pre><code>df['continent'] = df.index.map(ContinentDict.get)

df

         Rank  % Renewable      continent
Country                                  
China       1    19.754910           Asia
Japan       3    10.232820           Asia
Canada      6    61.945430  North America
Germany     7    17.901530         Europe
India       8    14.969080           Asia
France      9    17.020280         Europe
Italy      11    33.667230         Europe
Spain      12    37.968590         Europe
Iran       13     5.707721           Asia
Brazil     15    69.648030  South America
</code></pre>
</div>
<span class="comment-copy">@MaxU I don't think there is a <code>map</code> method for <code>index</code> objects you need a <code>Series</code></span>
<span class="comment-copy">@EdChum, yes, you are right! We can do something like: <code>df.index.map(lambda x: ContinentDict.get(x))</code>, but your solution should be faster...</span>
<span class="comment-copy">@MaxU I didn't see this comment.  Yes, your concept works.  But no need to pass the lambda, just pass <code>ContinentDict.get</code>, see below.</span>
<span class="comment-copy">It works, you are fast, 'You can accept the answer in 3 minutes" :)</span>
<span class="comment-copy">Now I understand difference. +1. To make OP's method work need to assign index manually i.e <code>pd.Series(df.index.values,index=df.index).map(ContinentDict)</code></span>
<span class="comment-copy">@Bharathshetty thanks for that clarification.</span>
<span class="comment-copy">@Bharathshetty true but it seems redundant to create a new <code>Series</code> object when <code>Index</code> objects already have a <code>to_series</code> which will take the existing index</span>
<span class="comment-copy">I totally agree. It was just to make the approach work. Votes say that <code>to_series</code> still the best.</span>
<span class="comment-copy">Nice really nice. I had what MaxU posted in comment.  Didn't know this was possible</span>
<span class="comment-copy">This isn't listed in the docs so I assumed this wouldn't work +1</span>
