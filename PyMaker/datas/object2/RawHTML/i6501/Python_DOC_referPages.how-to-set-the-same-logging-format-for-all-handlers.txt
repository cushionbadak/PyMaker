<div class="post-text" itemprop="text">
<p>I am using <a href="https://docs.python.org/3/library/logging.html#logging.Handler.setFormatter" rel="nofollow noreferrer"><code>.setFormatter()</code></a> to set the same <code>logging.Formatter()</code>  on each of my handlers.</p>
<p>Is there a way to set a global default format?</p>
<p>Alternatively - is it possible to iterate though the handlers already added via <code>.addHandler()</code> to a logger ?</p>
<p><a href="https://stackoverflow.com/questions/16757578/what-is-the-default-python-logging-formatter">Another question</a> mentions <em>what</em> the format is, but not how to <em>set</em> it.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>The intended way is to attach the formatter to each handler as you're creating them.</strong></p>
<p>Since you're supposed to set up logging destinations in one, central place at the start of the main program, this isn't so taxing to do.</p>
<p>E.g. this is the stock logging set-up code that I use in my scripts that are to be run autonomously:</p>
<pre><code># set up logging #####################################
import sys,logging,logging.handlers,os.path
log_file=os.path.splitext(__file__)[0]+".log"
l = logging.getLogger()
l.setLevel(logging.DEBUG)
f = logging.Formatter('%(asctime)s %(process)d:%(thread)d %(name)s %(levelname)-8s %(message)s')
h=logging.StreamHandler(sys.stdout)
h.setLevel(logging.NOTSET)
h.setFormatter(f)
l.addHandler(h)
h=logging.handlers.RotatingFileHandler(log_file,maxBytes=1024**2,backupCount=1)
h.setLevel(logging.NOTSET)
h.setFormatter(f)
l.addHandler(h)
del h,f
#hook to log unhandled exceptions
def excepthook(type,value,traceback):
    logging.error("Unhandled exception occured",exc_info=(type,value,traceback))
    #Don't need another copy of traceback on stderr
    if old_excepthook!=sys.__excepthook__:
        old_excepthook(type,value,traceback)
old_excepthook = sys.excepthook
sys.excepthook = excepthook
del excepthook,log_file
# ####################################################
</code></pre>
<p>There <em>are</em> other methods but each has a downside:</p>
<ul>
<li>Each logger has an undocumented <code>&lt;logger&gt;.handlers</code> list, but it only lists handlers connected to that logger directly. So, you need to iterate over this list for all loggers you have if you have multiple.</li>
<li>There is a global undocumented <code>logging._handlerList</code> (references to all handlers are kept there to shut them down at exit). Likewise, that is an implementation detail.</li>
<li><p>Finally, you can override a handler's init logic by</p>
<ul>
<li>replacing <code>__init__</code> methods of <code>Handler</code> and/or subclass (that will affect everything else that uses <code>logging</code>), or by</li>
<li>subclassing/<a href="https://stackoverflow.com/questions/6098970/are-mixin-class-init-functions-not-automatically-called">addin a mixin</a> to the required classes.</li>
</ul>
<p>That is probably an overkill.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>If you have a number of handlers, you're advised to configure logging using the <code>logging.config.dictConfig()</code> API. This <a href="https://stackoverflow.com/a/33186558/118903">other answer</a> shows how to configure formatters for handlers; you may be able to adapt it to your needs.</p>
</div>
<span class="comment-copy">Set the format on the global logger and nowhere else.</span>
<span class="comment-copy">You can iterate through the list in the <code>handlers</code> attribute of a logger.</span>
<span class="comment-copy">@MadPhysicist: thanks. I managed to iterate over the <code>handlers</code> in my logger. If you would not mind to turn the comment into an answer I would gladly accept it. I did not understand the first comment, though (about a "global logger" -- what is that? Do you mean the logger received via <code>getLogger()</code>? it does not have a <code>setFormatter()</code> method)</span>
<span class="comment-copy">Yes, when you call it without a name. I guess it's technically called root logger, not global logger.</span>
