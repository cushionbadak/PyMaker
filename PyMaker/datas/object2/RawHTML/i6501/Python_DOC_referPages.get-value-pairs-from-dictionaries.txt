<div class="post-text" itemprop="text">
<p>Re-edited to make more clear and simple</p>
<p>For below data</p>
<pre><code>[
{
    "name": "name1",
    "a_id": "12345",
    "b_id": "0d687c94c5f4"
},
{
    "name": "name2",
    "a_id": "67890",
    "b_id": "0d687c94c5f4"
},
{
    "name": "name3",
    "a_id": "23857",
    "b_id": "9ec34be3d535"
},
{
    "name": "name4",
    "a_id": "84596",
    "b_id": "9ec34be3d535"
},
{
    "name": "name5",
    "a_id": "d82ebe9815cc",
    "b_id": null
}
]
</code></pre>
<p>How to get </p>
<p>based on "b_id" "0d687c94c5f4":</p>
<pre><code>id1 = 12345
id2 = 67890
</code></pre>
<p>based on "b_id" "9ec34be3d535":</p>
<pre><code>id3 = 23857
id4 = 84596
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>result = collections.defaultdict(list)

for res in response:
    result[res['b_id']].append(res['a_id'])
</code></pre>
<blockquote>
<p>result:</p>
<pre><code>defaultdict(list,
            {'0d687c94c5f4': ['12345', '67890'],
             '9ec34be3d535': ['23857', '84596'],
             None: ['d82ebe9815cc']})
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<pre><code>result = {
    item['b_id']: [
        subitem['a_id']
        for subitem in response
        if subitem['b_id'] == item['b_id']
    ]
    for item in response
}

print(result)

&gt;&gt;&gt; {'9ec34be3d535': ['23857', '84596'], '0d687c94c5f4': ['12345', '67890'], None: ['d82ebe9815cc']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your request is not very clear.. but I think you mean you want to regroup the list of json with a different key... you can use itertools for that</p>
<p>try this:</p>
<pre><code>import itertools
for key, group in itertools.groupby(r, lambda item: item['b_id']):
       print 'b_id', key, [x['a_id'] for x in group]

b_id 0d687c94c5f4 ['12345', '67890']
b_id 9ec34be3d535 ['23857', '84596']
b_id None ['d82ebe9815cc']
</code></pre>
<p>or in dictionary form</p>
<pre><code>for key, group in itertools.groupby(r, lambda item: item['b_id']):
    print {key: [x['a_id'] for x in group]}

{'0d687c94c5f4': ['12345', '67890']}
{'9ec34be3d535': ['23857', '84596']}
{None: ['d82ebe9815cc']}
</code></pre>
</div>
<span class="comment-copy">post the final expected result</span>
<span class="comment-copy">@RomanPerekhrest, I need values for all "a_id"s 12345, 67890, 23857, 84596 but based on "b_id"s . Challenge I am facing is the "b_id"s are same for  some "a_id"s</span>
<span class="comment-copy">this iterates <code>len(response)</code> times over <code>response</code></span>
<span class="comment-copy">this only works if the response is already ordered on <code>b_id</code>. If it is, this is indeed an elegant solution</span>
<span class="comment-copy">How can I get the data to a variable. If I tried "data = {key: [x['a_id'] for x in group]}" it stores only last value in loop  &gt;&gt;data  &gt;&gt;{None: ['d82ebe9815cc']}</span>
<span class="comment-copy">data = {key: [x['a_id'] for x in group]} overwrites data everytime.. if you want to store a dictionary in the end - use a dictionary comprehension</span>
<span class="comment-copy">@MaartenFabr√©, it still works even if the response in not ordered as all (like the json in the expamle here..), it reorders the given list of dictionaries (not grouped or in any order..) and regroups it according to the given groupby(r, lambda item: item['b_id']) clause..</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer">docs.python.org/3/library/itertools.html#itertools.groupby</a> mentions it makes a new group every time the <code>key</code> changes, so this might or might not work, depending on the data</span>
