<div class="post-text" itemprop="text">
<p>Hi everyone and thanks to help me.</p>
<p>I have a function called factorial like this:</p>
<pre><code>def fact(n):
if n == 0:
    return 1
else:
    return n * fact(n-1)
</code></pre>
<p>How i transform this function in a character like '!'?</p>
<p>for example:</p>
<pre><code>&gt;&gt; fact(3)
6
&gt;&gt; 3!
6 
</code></pre>
<p>use fact function when i put a number before '!', thanks for all! </p>
</div>
<div class="post-text" itemprop="text">
<p>considering "3!" is a string, you can always manipulate it. I'd recommend using a more sophisticated system, to check if the input is legit etc. </p>
<pre><code>def fact(n):
    return fact_number(int(n[:-1]))


def fact_number(n):

    if n == 0:
        return 1
    else:
        return n * fact_number(n-1)


print(fact("3!"))


output:
6
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can't do that in python, as suggested by @sheldonzy, you could parse a string somehow to give mathematical meaning to the <code>!</code> operator. </p>
<p>When it comes to python operator overriding, <a href="https://docs.python.org/3/library/operator.html" rel="nofollow noreferrer">these are the ones</a> python provides you and you can override. So for instance, you could have your own int class and using the unary invert operator <code>~</code>, like this:</p>
<pre><code>class DontUseMe(int):

    def __new__(cls, a, *args, **kwargs):
        return super().__new__(cls, a)

    def __invert__(self):
        x = 1
        for v in list(range(2, self + 1)):
            x = x * v
        return x

for i in range(10):
    print(~DontUseMe(i))
</code></pre>
<p>In any case, I don't suggest overriding the builtin types for something like this, better continue using the method <code>fact</code> or parsing strings as mathematical expressions.</p>
<p>I recommend you to take a look at <a href="http://www.sympy.org/en/index.html" rel="nofollow noreferrer">sympy</a>, it's really handy to make mathematical operations on python.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python allows you to define new meanings for two kinds of things:</p>
<ol>
<li>names: sequences of characters starting with a letter or <code>_</code> followed by any number of characters belonging to the 3 categories (digits, letters, digits).</li>
<li>existing operators, including but not limited to <code>+</code>, <code>-</code>, <code>*</code>, <code>[]</code>, <code>==</code>, <code>in</code> etc.</li>
</ol>
<p>In order to define factorial as a trailing exclamation mark, as you desire, <code>!</code> would have to be an existing postfix operator in Python. This is not the case.</p>
<p>The summary of all of that is: what you want cannot be done in Python.</p>
</div>
<span class="comment-copy">Sorry, you can't do that in Python.</span>
<span class="comment-copy">mh.. because i'm doing a calculator in python, and it's works very well with a basic operation like + - * and /, but i wanna to extend my calculator with factorial operation.  i'm going to use try and except to transform 3! string to fact(3), if i can, i will post it</span>
<span class="comment-copy">Hmm. You aren't using <code>eval</code> in this calculator are you? That's <i>not</i> a good idea. You should be using proper parsing techniques for this. <code>eval</code> and <code>exec</code> should generally be avoided because they can be a security risk. For details, please see <a href="http://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html" rel="nofollow noreferrer">Eval really is dangerous</a> by SO veteran Ned Batchelder.</span>
<span class="comment-copy">There are a couple of standard libraries (eg <code>shlex</code>) that can be used for parsing expressions, and it's certainly possible to build a calculator using them (<code>readline</code> is handy for things like this). But if you want something more powerful you might like to take a look at <a href="http://pyparsing.wikispaces.com" rel="nofollow noreferrer"><code>pyparsing</code></a>.</span>
<span class="comment-copy">@PM2Ring oh :( ok, i will have to change the code of my calculator haha, really thanks for the recommendation!</span>
<span class="comment-copy"><code>fact("3!")</code> looks pretty silly. <i>Worse</i> than <code>fact(3)</code>.</span>
<span class="comment-copy">Well yeah, but he wanted with '!'</span>
<span class="comment-copy">@StefanPochmann You're right. Although I guess the main point of this answer is one possible option would be parsing strings as mathematical expressions and give some meaning to the postfix operator <code>!</code> in the parsing stage.</span>
<span class="comment-copy">@BPL Yeah!, because if that is possible, the coding that i'm making can be more easy.. but no :'(</span>
<span class="comment-copy">Thanks for you answer @sheldonzy i will use that, logical steps of my coding are:  take the expresion in a raw_input.- convert this in a list.- check is a valid operation (for example: if the user puts 'hahah' i return 'Invalid argument, please put a valid math operation').- if is a valid operation i check if the user puts spaces, then obviously removed that and convert the list in a str, then i use eval(string)</span>
<span class="comment-copy">I will do, thanks!</span>
<span class="comment-copy">Very thanks for the aclaration !!</span>
<span class="comment-copy">@KevinPinochetHernandez I see that you are new to the site. This site relies on users <i>upvoting</i> good answers (and downvoting bad ones) to help guide other users find good answers to similar problems they might have. Please upvote those answers (by pressing the up arrow) which you think are good answers to your question. You can even pick one as <i>the</i> answer to your question by <i>accepting</i> it with the green tick.</span>
<span class="comment-copy">Thanks, but this site requires a minimum number of points to vote, so i can't in this moment upvoting people! anyway i gave a green tick !</span>
