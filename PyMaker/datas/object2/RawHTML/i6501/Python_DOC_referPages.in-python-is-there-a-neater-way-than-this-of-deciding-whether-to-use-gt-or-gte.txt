<div class="post-text" itemprop="text">
<p>I am writing a Python function to pick out objects from a sorted list which have a date stamp within a certain range. The user provides a start and end date. They can leave either of them blank if they want to use the beginning/end of the list as the start/end dates, respectively. If the user provides date(s), they are able to choose whether to include or exclude them. Currently, my function looks like this:</p>
<pre><code>def get_items_in_date_range(all_items, start_date=None, end_date=None,
                            include_start_date=True, include_end_date=True):
    items_in_date = []
    for item in all_items:
        if start_date and end_date:
            if include_start_date and include_end_date:
                if start_date &lt;= item.date_stamp &lt;= end_date: #
                    items_in_date.append(item)
            elif include_start_date:
                if start_date &lt;= item.date_stamp &lt; end_date: #
                    items_in_date.append(item)
            elif include_end_date:
                if start_date &lt; item.date_stamp &lt;= end_date: #
                    items_in_date.append(item)
            else:
                if start_date &lt; item.date_stamp &lt; end_date: #
                    items_in_date.append(item)
        ...
</code></pre>
<p>(I can post the rest of the function if it will help, but it's the same few <code>if</code> statements, tweaked for the absence of <code>start_date</code> and <code>end_date</code>).</p>
<p>My question is: Is there a way of preparing the <code>if</code> statements marked with the <code>#</code> symbol so that the code can be condensed a little? Perhaps in a way analogous to Python string formatting, e.g.</p>
<pre><code>if start_date %op item.date_stamp %op end_date % (op1, op2):
</code></pre>
<p>where I can assign <code>op1</code> and <code>op2</code> to be <code>&lt;</code> or <code>&lt;=</code> at the beginning of the function.</p>
<p><em>This is the first question I've ever submitted, so please let me know if there's any other information I can provide to help/clarify. Thank you!</em></p>
</div>
<div class="post-text" itemprop="text">
<p>One way to remove the need for all the different comparisons is to setup the start and end date in the beginning of your function, and then do only one comparison.</p>
<p>You can leave the start and end date as a special case, or tweak them to fit in the comparison as nutmeg64 did.</p>
<pre><code>def get_items_in_date_range(all_items, start_date=None, end_date=None,
                        include_start_date=True, include_end_date=True):
    if start_date is None:
        start_date = MIN_DATE
    if end_date is None:
        end_date = MAX_DATE
    items_in_date = []
    for item in all_items:
        is_in_range = start_date &lt; item &lt; end_date
        is_start = include_start_date and item == start_date
        is_end = include_end_date and item == end_date
        if is_in_range or is_start or is_end:
            item_in_date.append(item)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python operators are available as methods in the built-in <a href="https://docs.python.org/3/library/operator.html#operator.xor" rel="nofollow noreferrer"><code>operator</code></a> package.</p>
<p>You may also reduce the complexity of you code by first filtering all items &lt; start_date then all items &gt; end_date.</p>
<p>That gives something like this (untested):</p>
<pre><code>import operator
def get_items_in_date_range(all_items, start_date=None, end_date=None,
                            include_start_date=True, include_end_date=True):
    start_op = operator.ge if include_start_date else operator.gt
    end_op = operator.le if include_end_date else operator.lt

    filtered_items = all_items
    if start_date:
        filtered_items = [item for item in filtered_items if start_op(item, start_date)]
    if end_date:
        filtered_items = [item for item in filtered_items if end_op(item, end_date)]
    return filtered_items
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is no way to generally generate a Python code (unless a different Python script writes it to a file and that is a bit complicated).</p>
<p>In this case you could do something like:</p>
<pre><code>if include_start_date:
    start_date - 1 # assuming you know how to subtract a day from the date
if include_end_date:
    end_date + 1 # assuming you know how to add a day to the date
for item in all_items:
    if start_date &lt; item.date_stamp &lt; end_date:
        items_in_date.append(item)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can solve this problem using the operator module:</p>
<pre><code>import operator


def get_items_in_date_range(all_items, start_date=None, end_date=None,
                            include_start_date=True, include_end_date=True):
    lower_op = operator.lte if include_start_date else operator.lt
    upper_op = operator.lte if include_end_date else operator.lt
    if start_date is None:
        start_date = &lt;something-really-in-the-past&gt;
    if end_date is None:
        end_date = &lt;something-nearing-the-universe-entropy-death&gt;

    ...
</code></pre>
</div>
<span class="comment-copy">Could you just default the <code>_date</code> variables to something if they're not present? <code>start_date = start_date or some_default</code>.</span>
<span class="comment-copy">And re: trying to plug the functions in, you can just store functions in variables. Your case seems complicated enough already though. I can't see that helping.</span>
<span class="comment-copy">@Carcigenicate yes, default dates would definitely help, thank you! That should get rid of a level of indenting at least.</span>
<span class="comment-copy">I'd try to write an answer, but honestly, I'm quite tired. You could try something like: <code>end_date = end_date or (today's date); start_date = start_date or end_date</code>. Good luck.</span>
<span class="comment-copy">And if you want to try plugging the operators in, look at Python's <code>operator.ge</code> and <code>operator.gt</code>. They're operators than can be called and stored like normal functions.</span>
<span class="comment-copy">Thank you! This really helped.</span>
<span class="comment-copy">Thank you! I combined your idea with the one @Atn gave.</span>
