<div class="post-text" itemprop="text">
<p>I am new to python. I am trying to execute a bash script in python to extract the count of different file extensions.
I tried the following command</p>
<pre><code>import subprocess
output = subprocess.check_output("sudo find . -type f -name '*.*' -exec sh -c 'echo ${0##*.}' {} \; | sort | uniq -c | sort -nr | awk '{print $2 ":" $1}'", shell=True)
</code></pre>
<p>But it throws a syntax error.
On executing find command in bash shell </p>
<pre><code>sudo find . -type f -name '*.*' -exec sh -c 'echo ${0##*.}' {} \; | sort | uniq -c | sort -nr | awk '{print $2 ":" $1}'
</code></pre>
<p>output will be as follows</p>
<pre><code>png:3156
json:333
c:282
svg:241
zsh:233
js:192
gz:169
zsh-theme:143
ttf:107
cache:103
md:93
</code></pre>
<p>So how can i get the same output in python code? what is the correction required in my current approach?
Thanks in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>By the way, you could try to do the same thing in pure Python.
Here is a minimal code that does it:</p>
<pre><code>import os

def count_all_ext ( path ):
    res = {}
    for root,dirs,files in os.walk( path ):
        for f in files :
            if '.' in f :
                e = f.rsplit('.',1)[1]
                res[e] = res.setdefault(e,0)+1
    return res.items()


print '\n'.join( '%s:%d'%i for i in count_all_ext('.'))
</code></pre>
<p>OK, it's very long compared to the Bash snippet, but it's Python...</p>
</div>
<div class="post-text" itemprop="text">
<p>As mentioned in the comments any double quote in a string quoted with double quotes needs to be escaped with a backslash:</p>
<pre><code>import subprocess
output = subprocess.check_output("sudo find . -type f -name '*.*' -exec sh -c 'echo ${0##*.}' {} \; | sort | uniq -c | sort -nr | awk '{print $2 \":\" $1}'", shell=True)
</code></pre>
<p>Single quotes inside a double quoted string do not have any special meaning (except directly at the beginning), so that doesn't allow you to avoid escaping.</p>
<p>The fine details are explained under the header <a href="https://docs.python.org/3/reference/lexical_analysis.html#literals" rel="nofollow noreferrer">String and Bytes literals from the Python language reference</a>.</p>
<p>As mentioned in the comments another option, which is probably easier to read, is to use triple double quotes:</p>
<pre><code>import subprocess
output = subprocess.check_output("""sudo find . -type f -name '*.*' -exec sh -c 'echo ${0##*.}' {} \; | sort | uniq -c | sort -nr | awk '{print $2 ":" $1}'""", shell=True)
</code></pre>
<p>While this answers the question, for ease of reading and maintainability I suggest to replace it instead completely with Python, as suggested in another answer.</p>
</div>
<span class="comment-copy">use triple quotes on the outside like <code>"""sudo..."""</code>?</span>
<span class="comment-copy">The <code>awk</code> part should be something like <code>awk '{print \"{\" $2 \":\" $1 \"}\"}'</code>. It seems like you got unescaped double quotes inside double quotes.</span>
<span class="comment-copy">File "&lt;stdin&gt;", line 1     direct_output = subprocess.check_output("sudo find . -type f -name '<i>.</i>' -exec sh -c 'echo ${0##*.}' {} \; | sort | uniq -c | sort -nr | awk '{print "{" $2 ":" $1 "}"}'", shell=True)                                                                                                                                                           ^ SyntaxError: invalid syntax</span>
<span class="comment-copy">does the error still occurs without "sudo" ?</span>
<span class="comment-copy">@GuillaumePaniagua: yes no difference by removing 'sudo'</span>
<span class="comment-copy">Thanks @Captain'Falm ..... Was expecting bash script to run in python!!</span>
<span class="comment-copy">Yep, sorry... it's strong than me, I always try to script in python (instead of platform dependant shell)</span>
<span class="comment-copy">I'd certainly consider this a better approach than the amalgam of tools glued together badly. (Clarifying "badly" -- properly used, <code>awk</code> could do the job of <code>sort</code> <i>and</i> <code>uniq</code> <i>and</i> the shells running the parameter expansion, etc; using 5 independent pieces instead of one is a sign of not knowing how to use the one well).</span>
<span class="comment-copy">@CharlesDuffy Thanks for helping in deciding proper approach !!</span>
<span class="comment-copy">@Captain'Flam: since bash asking super user privilege python approach is working fine!! As i am new to python i was unable to understand the line: <code>print '\n'.join( '%s:%d'%i for i in count_all_ext('.'))</code> please explain join method here!,Thanks in advance</span>
<span class="comment-copy">You are awesome!!</span>
