<div class="post-text" itemprop="text">
<p>I am wanting to take a list of various variable names, and assign all of them as instance variables to a class.</p>
<p>Furthermore I would also like to assign attributes to these instance variables from a database.</p>
<p>For Example: I have a dataframe with headers, ('col1', 'col2', 'col3', 'col4'). each row should be a class instance, and each column should be an instance variable of that class. Then the values in each row, should be assigned to each instance variables as attributes for every class instance.</p>
<p>how can i accomplish this?</p>
<p>here is a list of variables:</p>
<pre><code>Index(['Id', 'MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street',
       'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',
       'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType',
       'HouseStyle', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd',
       'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',
       'MasVnrArea', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',
       'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1',
       'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating',
       'HeatingQC', 'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF',
       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',
       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',
       'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType',
       'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual',
       'GarageCond', 'PavedDrive', 'WoodDeckSF', 'OpenPorchSF',
       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC',
       'Fence', 'MiscFeature', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',
       'SaleCondition', 'SalePrice'],
      dtype='object')
</code></pre>
<p>Here is an example dataframe:</p>
<pre><code>import pandas as pd
from numpy import nan
d = {'name' : pd.Series(['steve', 'jeff', 'bob'], index=['1', '2', '3']),
       ....:      'salary' : pd.Series([34, 85, 213], index=['1', '2', '3']), 'male' : pd.Series([1, nan, 0], index=['1', '2', '3']), 'score' : pd.Series([1.46, 0.8, 3.], index=['1', '2', '3'])}

df = pd.DataFrame(d)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a natural fit for <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer">namedtuple</a>s.</p>
<pre><code>#! /usr/bin/env python3


import collections
import pandas as pd


if __name__ == '__main__':

    Person = collections.namedtuple('Person', 'male name salary score')

    d = {'name': pd.Series(['steve', 'jeff', 'bob'], index=['1', '2', '3']),
         'salary': pd.Series([34, 85, 213], index=['1', '2', '3']),
         'male': pd.Series([1, float('NaN'), 0], index=['1', '2', '3']),
         'score': pd.Series([1.46, 0.8, 3.], index=['1', '2', '3'])}
    df = pd.DataFrame(d, columns=sorted(d.keys()))
    print(df)

    for row in df.values:
        print(Person(*row.tolist()))
</code></pre>
<p>Output:</p>
<pre><code>   male   name  salary  score
1   1.0  steve      34   1.46
2   NaN   jeff      85   0.80
3   0.0    bob     213   3.00
Person(male=1.0, name='steve', salary=34, score=1.46)
Person(male=nan, name='jeff', salary=85, score=0.8)
Person(male=0.0, name='bob', salary=213, score=3.0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>df.to_dict('records')</code> to generate a list of dictionaries,</p>
<pre><code>[{'male': 1.0, 'name': 'steve', 'salary': 34, 'score': 1.46},
 {'male': nan, 'name': 'jeff', 'salary': 85, 'score': 0.8},
 {'male': 0.0, 'name': 'bob', 'salary': 213, 'score': 3.0}]
</code></pre>
<p>Then you can do something like this to create your list,</p>
<pre><code>class Person(object):    
    def __init__(self, **kwargs):
        self.__dict__.update(kwargs)

people = [Person(**x) for x in df.to_dict('records')]
</code></pre>
</div>
<span class="comment-copy">Is this pretty much a duplicate of this question-answer: <a href="https://stackoverflow.com/questions/1639174/creating-class-instance-properties-from-a-dictionary" title="creating class instance properties from a dictionary">stackoverflow.com/questions/1639174/â€¦</a></span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/1639174/creating-class-instance-properties-from-a-dictionary">Creating class instance properties from a dictionary?</a></span>
<span class="comment-copy">in this post, the "objects" are automatically created from the dataframe. rather than having to define each object individually. for example:        <code>&gt;&gt;&gt; class AllMyFields: ...     def __init__(self, dictionary): ...         for k, v in dictionary.items(): ...             setattr(self, k, v) ...  &gt;&gt;&gt; o = AllMyFields({'a': 1, 'b': 2}) &gt;&gt;&gt; o.a 1</code> has to name the object as "0" i want these objects to be the index that i can call at will</span>
<span class="comment-copy">when you do, <code>people = [Person(**x) for x in df.to_dict('df')]</code> what does **x mean? is that saying "all class instances". when i run this i receive the following error. TypeError: type object argument after ** must be a mapping, not str</span>
<span class="comment-copy">@ClayChester, should be <code>df.to_dict('records')</code>, not <code>df.to_dict('df')</code>. Take a look at the documentation for <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_dict.html" rel="nofollow noreferrer">DataFrame.to_dict()</a></span>
