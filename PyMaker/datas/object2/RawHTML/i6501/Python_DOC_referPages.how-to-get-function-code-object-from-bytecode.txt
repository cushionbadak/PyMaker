<div class="post-text" itemprop="text">
<p>I need to create a call graph of python function and then modify bytecode of some functions.</p>
<p>I started to play with disassembly and found that function is make by <code>MAKE_FUNCTION</code> opcode and the code object somehow passed to it</p>
<pre><code> 32          96 LOAD_CONST              25 ((None, None, True, 'off', None, False))
             98 LOAD_CONST              15 (&lt;code object foobar at 0x7fc46bff6d20, file "foo.py", line 25&gt;)
            100 LOAD_CONST              16 ('foo')
            102 MAKE_FUNCTION            1
            104 STORE_NAME              15 ('fun')
</code></pre>
<p>Okay, I found roots of the callgraph in this file, but what to do next? How do I actually get this code object?</p>
</div>
<div class="post-text" itemprop="text">
<p>The function type is what you want. You can get it from the <code>types</code> module (where it is <code>types.FunctionType</code>) or just <code>type(lambda:0)</code>. Do a <code>help()</code> on the type to see the arguments required to create a function object.</p>
<p>The primary thing you need to construct the function is the code object. You can get that from an existing function <code>f</code> using <code>f.func_code</code>. If you are modifying the bytecode you will need to create a new code object to contain it. Its type can be obtained using <code>type()</code> as with the function and doing a <code>help()</code> on the type will tell you what you need to pass in.</p>
<p>If you are basing the new function on an existing one, then you can dig most of what you need out of the existing function. See <a href="https://docs.python.org/3/library/inspect.html#types-and-members" rel="nofollow noreferrer">this table</a> in the <code>inspect</code> module documentation to see what attributes of functions and code objects contain things of interest to you.</p>
</div>
<span class="comment-copy">Um... I don't see how this answers my question. I have a pyc file, I've disassembled it with <code>dis.dis</code>. Then what?</span>
<span class="comment-copy">So you have the function, or you couldn't have disassembled it with <code>dis</code>. So the code object of function <code>f</code> is <code>f.func_code</code> and the bytecode string is <code>f.func_code.co_code</code>. You say you want to modify the bytecode, and once you do that you will need to build a new function from it, which you can do using the code and function types.</span>
<span class="comment-copy">What if I don't have source files and have only compiled files?</span>
<span class="comment-copy">Okay, it's in <code>co_consts</code></span>
