<div class="post-text" itemprop="text">
<p>Let's say I have a list:</p>
<pre><code>list = ['foo', 'bar', 'bak']
</code></pre>
<p>I want to split these strings into their characters so I can assign values to each character (I.E. f = 5, o = 15, and so on).</p>
<p>How might I decompose these lists? 
I was thinking of turning each element into its own list, and referring to each element as an item of that list, but I am not sure how to go about doing that. </p>
</div>
<div class="post-text" itemprop="text">
<p>Strings are iterable in Python, so you can just loop through them like this:</p>
<pre><code>list = ['foo', 'bar', 'bak']

for item in list:
    for character in item:
        print(character)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try doing for range function for each words</p>
<pre><code>list = ['foo','bar','bak']

for i in range (len(list)):
    for t in range(len(list[i])):
        print(list[i][t])
</code></pre>
<p>it will print each items.
if you want to create the list of each letters,
try</p>
<pre><code>list = ['foo','bar','bak']
letters = []

for i in range (len(list)):
    for t in range(len(list[i])):
        letters.append(list[i][t])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If This Is What Your Looking For Here You Go:</p>
<pre><code>listItems = ['foo', 'bar', 'bak']
listLetter = []
myDictionary = {}

for item in listItems:
    for letter in item:
        listLetter.append(letter)

myDictionary['f'] = 5

print myDictionary
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Maybe that's what you want to convert into list of characters:</p>
<pre><code>l = ['foo', 'bar', 'bak']

list(''.join(l))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use one line solution :</p>
<pre><code>list1 = ['foo', 'bar', 'bak']
print([j for i in list1 for j in i])
</code></pre>
<p>result :</p>
<pre><code>['f', 'o', 'o', 'b', 'a', 'r', 'b', 'a', 'k']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Join the entire list to each character</p>
<p>my_list = ['foo', 'bar', 'bak']</p>
<p>result = list(''.join(my_list))</p>
<p>result</p>
<p>['f', 'o', 'o', 'b', 'a', 'r', 'b', 'a', 'k']</p>
<p>now you can iterate through result to assign value to each character</p>
</div>
<span class="comment-copy"><code>newlist = [list(item) for item in list]</code></span>
<span class="comment-copy">@Sraw ... since the questioner has overwritten the definition of the <code>list</code> type with a variable also foolishly called <code>list</code>, your suggestion might not quite work as intended.</span>
<span class="comment-copy">@donkopotamus Yea, you are right...</span>
<span class="comment-copy"><code>reduce(str.__add__, list)</code></span>
<span class="comment-copy">N.B. that @Zefick 's <code>reduce</code> function is <code>functools.reduce</code> in Py3, and <code>''.join(mylist)</code> is much better optimized :)</span>
<span class="comment-copy">That's not actually true in Python, but you can usually <i>pretend</i> they are and use them anyway (as in your example code). If a string were a list, you could do <code>"hello".extend(" world!")</code>. Contrast with some languages like Haskell where it's literally just a type alias <code>type String = [Char]</code></span>
<span class="comment-copy">This works! Thanks! Do you have a recommendation for distinguishing different strings from one another?</span>
<span class="comment-copy">Strings are <b>not</b> "technically lists".  They're <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterable" rel="nofollow noreferrer">iterable</a>, that's different.</span>
<span class="comment-copy">@donkopotamus I updated my answer to reflect what you and said; thanks for pointing it out to me.</span>
<span class="comment-copy">@Sam I'm not entirely sure what you mean by distinguishing strings from one another, but if you mean in the <code>for character in item</code> loop, you can just use <code>item</code> inside of it to find what string you're looping over.</span>
<span class="comment-copy">eww. Don't do this in Python, this is very much an anti-pattern. Anytime you do <code>for i in range(len(foo)): foo[i]</code>: rewrite as <code>for subfoo in foo: subfoo</code></span>
<span class="comment-copy">use <code>itertools.chain</code> !</span>
<span class="comment-copy">(or in this case <code>chain.from_iterable</code>)</span>
<span class="comment-copy">Yea that is true... Thank you for the advice:)</span>
