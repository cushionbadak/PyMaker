<div class="post-text" itemprop="text">
<p>I was writing a calculator in Python and was working with handling exponentiation. I came across something very strange when dealing with exponents that are decimals, so I tried reproducing the problem in the console. This is what I got:</p>
<pre><code>Python 3.5.2 (default, Oct 11 2016, 04:59:56) 
[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.38)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; num1 = -3.0
&gt;&gt;&gt; num2 = 2.5
&gt;&gt;&gt; opr = '^'
&gt;&gt;&gt; if opr == '^':
...     print(num1**num2)
... 
(4.772588574262081e-15+15.588457268119896j)
&gt;&gt;&gt; -3.0**2.5
-15.588457268119896
</code></pre>
<p>Any pointers on how to avoid the first output and get the second one? I'm not entirely sure what the first output even represents.</p>
</div>
<div class="post-text" itemprop="text">
<p>The first output correct. It is an complex number, since you have decimal power of a negative number.</p>
<p>You can't reproduce it because, in the last line, you should write <code>(-3.0)**2.5</code>. What you have written is equivalent to <code>-(3.0**2.5)</code>, since exponentiation has higher priority than the unary operator <code>-</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The different output is simply due to the different order of the operations due to <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="noreferrer">operator precedence</a>, use parantheses <code>()</code> to ensure the correct order is applied:</p>
<pre><code>&gt;&gt;&gt; -3.0**2.5
-15.588457268119896
&gt;&gt;&gt; -(3.0**2.5)
-15.588457268119896
&gt;&gt;&gt; (-3.0)**2.5
(4.772588574262081e-15+15.588457268119896j)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is not Python but maths:</p>
<pre><code>(-3.0) ^ 2.5 = (-3) ^ (5/2) = sqrt((-3)^5) = sqrt(-243) = -15.588...j
</code></pre>
<p>As you may know, negative numbers don't have real squareroots. They have complex squareroots represented by the <code>j</code>.</p>
<p>When you are writting it directly to the console he is understanding another thing:</p>
<pre><code>-3.0**2.5 = -(3^2.5) = -( 3 ^ (5/2) ) = - sqrt(3^5) = - sqrt(243) = -15.588...
</code></pre>
<p>The correct form to write it directly to the console would be:</p>
<pre><code>&lt;&lt; (-3.0)**2.5
&gt;&gt; (4.772588574262081e-15+15.588457268119896j)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this can see if it work.</p>
<pre><code>num1 = -3.0
num2 = 2.5
opr = '^'
if opr == '^':
     if num1 &lt; 0:
        num1  *= -1;
        print ('-',num1**num2)
        num1 *= -1;
     else:
        print(num1**num2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your second example:</p>
<pre><code>-3.0**2.5
</code></pre>
<p>actually has higher precedence on the <code>**</code> operation, calculating something different:</p>
<pre><code>-(3.0 ** 2.5)
</code></pre>
<p>What you are trying to calculate however is:</p>
<pre><code>(-3.0) ** 2.5
</code></pre>
<p>which indeed results in <code>(4.772588574262081e-15+15.588457268119896j)</code>. That's a complex number, which looks like this after some rounding and simplification: <code>0 + 15.6j</code>.</p>
<p>If you don't understand why the result is a complex number, let's do it manually:</p>
<p>First, you can split <code>-3^2.5</code> into two parts: <code>-1^2.5 * 3^2.5</code>. The right side is roughly <code>15.6</code>, the number you saw above. <code>-1^2.5</code> can be expanded to <code>(-1^0.5)^5</code>. This is the same as <code>sqrt(-1)^5</code>. Simplify some more:</p>
<pre><code>sqrt(-1)^5 = i^5 = i*i*i*i*i = -1 * -1 * i = 1*i = i
</code></pre>
<p>Hence the whole thing is <code>15.6i</code>. Note that in mathematics <code>i</code> is used for the imaginary part of a complex number, but in programming it's usually substituted with <code>j</code>, but they mean the same thing.</p>
</div>
<span class="comment-copy">All the answers point in the right direction: you're dealing with a square root of a negative number (a pocket calculator will simply throw an error if you try this operation). If you're trying to "emulate" a pocket calculator, then you should check that your results are not complex (and throw an appropriate error); otherwise, you can create a much more complete (and powerful) calculator that supports complex numbers</span>
