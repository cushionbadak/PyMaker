<div class="post-text" itemprop="text">
<p>In the python <a href="https://docs.python.org/3/reference/import.html" rel="nofollow noreferrer">documentation</a> describing the import system, there is the following (emphasis done by me):</p>
<blockquote>
<p>[...] You can think of packages as the directories on a file system and modules as files within directories, but donâ€™t take this analogy too literally since <strong>packages and modules need not originate from the file system</strong>. [...]</p>
</blockquote>
<p>What options are there for storing modules and packages that do not correspond to files and folders, respectively, in the filesystem?</p>
<p>I <a href="https://docs.python.org/2/library/zipimport.html" rel="nofollow noreferrer">read</a> about the possibility of loading modules and packages from zip archives. Is this one of the possible options that the quoted paragraph refers to?
Are there any other such options?</p>
</div>
<div class="post-text" itemprop="text">
<p>That is the way you can think about packages and modules but <strong>it is not mandatory that a package/module is a directory/file in file system.</strong></p>
<p>You can store a package/module in a zip file and load it with zipimport.</p>
<p>You can load a module from a string variable:</p>
<pre><code>import imp

code = """
def test():
    print "function inside module!"
    """

# give module a name
name = "mymodule"
mymodule = imp.new_module(name)
exec code in mymodule.__dict__

&gt;&gt;&gt; mymodule.test()
function inside module!
</code></pre>
</div>
<span class="comment-copy">If the answer gave you a solution, you may accept it. Other peers may find this question/answer useful.</span>
<span class="comment-copy">Yes, I read about importing a package from a zip file. I guess custom module loaders can be created that could load modules regardless of their origin. Is this right?</span>
<span class="comment-copy">Yes! They do not need to exist in file system.</span>
