<div class="post-text" itemprop="text">
<p>The program im writing is taking a list of strings as the input and is trying to remove the Chapter numbers. I have the function written but it currenly does not work. I have provided my function and a sample of the output! Thank you!</p>
<pre><code>def remove_chapter(chapter_header):
    for i in range(101):
        chapters="Chapter " + str(i)
        chapter_text=[my_string.replace(chapters,"") for my_string in chapter_header]
    return chapter_text
</code></pre>
<p>Here is the current output with the not working function:
<a href="https://i.stack.imgur.com/avT2C.png" rel="nofollow noreferrer">Output</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Since your <code>strings</code> have a similar patter that you need to remove, with a few variations (<code>chapter number</code>), its better to use <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer"><code>python.re</code></a>. With it, you have lot of flexibility in your <code>pattern matching</code>.</p>
<p>So, all you need to do :</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; [ re.sub('Chapter \d+ ', '', string) for string in chapter_header ]
</code></pre>
<p>#driver values :</p>
<pre><code>IN : chapter_header = ['Chapter 1 It is ...','However little ...','Chapter 12 Lorem Ipsum']

OUT : ['It is ...', 'However little ...', 'Lorem Ipsum']
</code></pre>
<p><em>Breaking it down, you pattern looks like :</em> </p>
<pre><code>'Chapter'&lt;whitespace&gt;[number/s]&lt;whitespace&gt;
</code></pre>
<p>So, whenever this pattern is found, the string is substituted, or if not found, just ignored.</p>
</div>
<div class="post-text" itemprop="text">
<p>Given a list of chapters, we can drop the chapter and numbers up to the first word in each chapter.</p>
<p><strong>Given</strong></p>
<pre><code>import itertools as it


chapters = [
    "Chapter 1  It is a truth universally acknowledged ...",
    "Chapter 2  Mr. Bennet was among the earliest ...",
    "Chapter 3  Not all that Mrs. Bennet, however, with ...",
]
</code></pre>
<p><strong>Code</strong></p>
<pre><code>pred = lambda x: (x == "Chapter") or x.isdigit() 
results = [list(it.dropwhile(pred, [word for word in chapter.split()])) for chapter in chapters]
results 
</code></pre>
<p>Output</p>
<pre><code>[['It', 'is', 'a', 'truth', 'universally', 'acknowledged', '...'],
 ['Mr.', 'Bennet', 'was', 'among', 'the', 'earliest', '...'],
 ['Not', 'all', 'that', 'Mrs.', 'Bennet,', 'however,', 'with', '...']]
</code></pre>
<hr/>
<p><strong>Details</strong></p>
<p>The list comprehension splits the chapters into lists and the words within the lists.  Equivalently:</p>
<pre><code>for chapter in chapters:
    print([word for word in chapter.split()])

# ['Chapter', '1', 'It', 'is', 'a', 'truth', 'universally', 'acknowledged', '...']
# ['Chapter', '2', 'Mr.', 'Bennet', 'was', 'among', 'the', 'earliest', '...']
# ['Chapter', '3', 'Not', 'all', 'that', 'Mrs.', 'Bennet,', 'however,', 'with', '...']
</code></pre>
<p>Finally, <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools.dropwhile</code></a> iterates each list and removes items until the predicate is not longer true.  In other words, keep dropping items up to the first that is neither <code>"Chapter"</code> nor a digit.</p>
<p>The resulting chapters can be rejoined as strings if desired.</p>
<pre><code>[" ".join(chapter) for chapter in results]
# ['It is a truth universally acknowledged ...',
#  'Mr. Bennet was among the earliest ...',
#  'Not all that Mrs. Bennet, however, with ...']
</code></pre>
</div>
<span class="comment-copy">You have an unconditional <code>return</code> statement inside a <code>for</code> loop. That's generally a bad sign, since it will exit the loop after the 1st iteration, i.e., after it has done the replacement for <code>"Chapter 0"</code>.</span>
<span class="comment-copy">I have made the edits but it still does not read through correctly.</span>
<span class="comment-copy">Before the for-loop <code>chapter_text = chapter_header[:]</code>.  Then inside your list comprehension iterate over <code>chapter_text</code>, not <code>chapter_header</code>.  And move <code>return</code> out of loop.</span>
<span class="comment-copy">Or just replace the entire function with <code>[re.sub(r'Chapter \d+\s*', '', s) for s in chapter_header]</code>. Don't forget to <code>import re</code>.</span>
