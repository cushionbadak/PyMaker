<div class="post-text" itemprop="text">
<p>I have a list of boolean arrays constructed using the numpy where function, e.g.:</p>
<pre><code>A[0] = [False, False, True, True, True, False, False,False,False,False]
A[1] = [False, False, False, False,False,False, True, True, True,False]
A[2] = [False,True, True, True, False, False, False, False,False,False]
...
</code></pre>
<p>A few notes:</p>
<ul>
<li>the real arrays have something like 10 000 elements</li>
<li>there are several "true" windows on each array</li>
<li>the "true" windows might overlap from array to array</li>
<li>all arrays have the same length <em>L</em></li>
</ul>
<p>I need to:</p>
<p>1) combine all arrays into one single array with length <em>L</em> that will contain all "True" values</p>
<p>2) recover for each "True" window the inicial and final index</p>
<p>any ideas?</p>
<p>Thanks!</p>
<p><strong>EDIT</strong></p>
<p>The expected result is:
    R = [False,True, True, True, True, False, True, True, True, False]</p>
<p>In terms of code:</p>
<pre><code>import numpy as np

data = np.arange(1,100)

list_of_lists = [[5,10], [15,25], [45,85]]

A = [np.where((data &lt; list[1]) &amp; (data &gt; list[0]))[0] for list in list_of_lists]
</code></pre>
<p>Output:</p>
<pre><code> &gt;&gt;&gt; print A
 [array([5, 6, 7, 8]), array([15, 16, 17, 18, 19, 20, 21, 22, 23]), array([45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
   62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
   79, 80, 81, 82, 83])]
</code></pre>
<p>the desired result:</p>
<pre><code> R = [[5,8],[15,23],[45,83]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I am not sure what you mean when you say "Combine all arrays into one single array with length L that will contain all "True" values".  However, the the second item, recovering the initial and final indices for all true windows was kinda fun:</p>
<pre><code>A = []
A.append([False,False,True, True, True, False,False,False,False,False])
A.append([False,False,False,False,True, True, True, False,False,False])
A.append([False,True, True, True, False,False,False,False,False,False])

r =      [False,True, True, True, True, True, True, False,False,False]
# r is the desired result, with start index of 1 and end index of 6

L = len(A[0])
W = []

start = True
w = set()
for i in range(L):
    if start: # beginning of window
        for a in A:  
            if a[i] is True:  # found the start of the window
                w.add(i)      # mark it
                start = False # start looking for the end of the window
                break
    else:
        end = True # until proven otherwise
        for a in A:
            if a[i] is True:  # nope, not the end, keep looking
                end = False   # proof
                break
        if end is True:  # all false, this is the end
            w.add(i-1)   # mark it
            W.append(w)  # save it
            w = set()    # start over
            start = True

print (W) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let us first simplify your example to a case where there is an overlap between two <code>sub-arrays</code>.</p>
<pre><code>a = np.array([[False, False, True, True], [True, False, False, False]])
</code></pre>
<p>so from what I gathered from the question, the expected <code>output</code> would be:</p>
<pre><code>[array([1, 4])]
</code></pre>
<p>as that is where the <code>"True"</code> window's start and finish is (<code>indexes</code> <code>1</code> and <code>4</code>).</p>
<p>To achieve this result, we need to first <code>flatten</code> <code>a</code> in order to gt a <code>1-dimensional</code> <code>array</code> of the <code>concatenated</code> <code>sub-arrays</code>. This is done with <code>a.flatten()</code>. Which gives:</p>
<pre><code>array([False, False,  True,  True,  True, False, False, False], dtype=bool)
</code></pre>
<p>Now, we need to find the <code>indexes</code> where the <code>value</code> flips <code>state</code> (i.e. <code>True --&gt; False</code> or <code>False --&gt; True</code>). To do this with, we can compare the <code>array</code> of <code>a.flatten()</code> without the <code>first</code> <code>element</code> to the <code>array</code> of <code>a.flatten()</code> without the <code>last</code> <code>element</code>. Then use <code>np.where</code> on this <code>boolean array</code> to get the <code>indexes</code> of <code>state</code> change. </p>
<p><em>N.B. the above technique was originally from <a href="https://stackoverflow.com/a/14406661/7434365">this answer`</a> by @Kith.</em></p>
<p>So to implement that, we can do the following:</p>
<pre><code>np.where(a.flatten()[:-1] != a.flatten()[1:])[0]
</code></pre>
<p>which gives us the <code>indexes</code> of <code>state</code> change:</p>
<pre><code>(array([1, 4], dtype=int32),)
</code></pre>
<p>which is actually one off as it is where the <code>state</code> changes, so before the start of the first <code>window</code>.</p>
<p>We then need to chunk this <code>array</code> into <code>2s</code>. This is done with <code>np.split()</code>:</p>
<pre><code>indexes = np.where(a.flatten()[:-1] != a.flatten()[1:])[0] 
windows = np.split(indexes, len(indexes) / 2)
</code></pre>
<p>which gives us a <code>list</code> of <code>arrays</code> of <code>length</code> <code>2</code> indicating the start and finish of a <code>window</code>:</p>
<pre><code>[array([1, 4], dtype=int32)]
</code></pre>
</div>
<span class="comment-copy">Do <i>you</i> have any ideas about how to do this? Have <i>you</i> written any code for this? We don't write code for people from scratch, no.</span>
<span class="comment-copy">It is hard to understand what's the desired output</span>
<span class="comment-copy">Let us know the required output</span>
<span class="comment-copy">Welcome to SO. Unfortunately this isn't a discussion forum, tutorial, or a code writing service. Please take the time to read <a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a> and the links it contains.  You should spend some time working your way through <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">the Tutorial</a>, practicing the examples. It will give you an introduction to the tools Python has to offer and you may even start to get ideas for solving your problem.  The Numpy docs should help too.</span>
<span class="comment-copy"><code>True or False</code> --&gt; <code>True</code>.</span>
<span class="comment-copy">Hi @bigmacd, thank you for the answer, I updated the question to better explain what I want, but after a quick read, your answer seems to do the trick. thanks!</span>
<span class="comment-copy">hi @Joe Iddon, thanks for the answer, I will look into it.</span>
<span class="comment-copy">@jorgehumberto please up-vote if it helps and accept if it works when you test it (hopefully it does as it did for me) <b>:)</b> thank you</span>
