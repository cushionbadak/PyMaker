<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/10763820/difference-between-and-regex">Difference between * and + regex</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>I just learnt that [^ab] will catch any character other than a or b.
So [^ab]* should match 0 or more characters none of which are a or b.</p>
<p>Yet python somehow matches [^ab]* to a.</p>
<pre><code>pattern = '[^ab]*'
str = 'a'
r = re.compile(pattern)
m = r.match(str)
if m is None:
    print 'No match'
else:
    print 'match'
</code></pre>
<p>This code snippet prints a match. I believe either I am wrong in understanding the usage of ^ or made some error in the code</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>[]*</code> means <strong>zero</strong> or more instances of what is in the brackets. In this case the empty string is matched since it is part of your string.</p>
<p>See <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">the doc</a>, section <strong>match</strong>.</p>
<blockquote>
<p>If <strong>zero</strong> or more characters <strong>at the beginning</strong> of string match the regular expression pattern...</p>
</blockquote>
<p>The string <code>'a'</code> has the empty string <code>''</code> at the beginning if you will. You could say the reg ex is seeing it as <code>''+'a'</code> where the beginning matches your pattern.</p>
<p>Maybe you want to try fullmatch instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>"a"</code> isn't the one being matched, it's an empty string (<code>""</code>) that's being matched.</p>
<p>As you know, the <code>*</code> in regex signifies that the previous group matches 0 or more times - your regex is matching <code>[^ab]</code> 0 times, which is an empty string. Because of this, <code>m</code> is not <code>None</code>, but contains the empty string, which is different from no match.</p>
<p>I wrote the assignments into a REPL:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; pattern = '[^ab]*'
&gt;&gt;&gt; str = 'a'
&gt;&gt;&gt; r = re.compile(pattern)
&gt;&gt;&gt; m = r.match(str)
&gt;&gt;&gt; m.groups()
=&gt; ()
&gt;&gt;&gt; m.group(0)
=&gt; ''
&gt;&gt;&gt; m.group(1)
Traceback (most recent call last):
  File "python", line 1, in &lt;module&gt;
IndexError: no such group
</code></pre>
<p>You can see that <code>m.groups()</code> is an empty tuple (and therefore not None), and <code>m.group(0)</code> returns an empty string, which means <code>pattern</code> matched <code>1</code> item (since <code>m.group(1)</code> doesn't work), which is an empty string.</p>
<p>Try using <code>[^ab]+</code> to not match anything - the <code>+</code> is like <code>*</code>, but it matches at least once.</p>
</div>
<div class="post-text" itemprop="text">
<p>As the previous answers states, using <code>*</code> regex expression matches <strong>0</strong> or more matches. <em>That's the tricky part.</em></p>
<p>You can do some testing, and better understand how Python treats <code>*</code>. The <em>match object</em> has the groups() method which returns the matches in groups:</p>
<pre><code>&gt;&gt;&gt; r.match(str_).groups()
()
</code></pre>
<p>This seems odd. How come this returns an empty group? This is even more strange: the findall method returns a list of matched items</p>
<pre><code>&gt;&gt;&gt; r.findall(str_)
['', '']
</code></pre>
<p>Two empty strings. This means even when there is no match, you'll get an empty item (list / tuple). If you change the <code>*</code> to <code>+</code> (match one or more) the results are different:</p>
<pre><code>&gt;&gt;&gt; pattern = '[^ab]+'
&gt;&gt;&gt; re.match(pattern, 'a').groups()

Traceback (most recent call last):
  File "&lt;pyshell#135&gt;", line 1, in &lt;module&gt;
    re.match(pattern, 'a').groups()
AttributeError: 'NoneType' object has no attribute 'groups'
</code></pre>
<p>This returns <code>None</code>.</p>
<p>So, to sum it up, Python treats <code>*</code> with additional <em>empty string</em> at the beginning of the searched string when used in pattern such <code>[]*</code>. However, when the pattern <code>[]+</code> is used it doesn't do that.</p>
</div>
<span class="comment-copy">It matches 0 characters, none of which are a or b.</span>
<span class="comment-copy">It's <code>*</code> that's confusing you, not <code>^</code>.</span>
<span class="comment-copy">You may be thinking of the semantics of <code>fullmatch</code> rather than <code>match</code>.</span>
<span class="comment-copy">@user3828311: It's <i>not</i> matching the <code>a</code>. It's matching the empty leading substring of your string.</span>
<span class="comment-copy">OP, perhaps you mean to use <code>[^ab][^ab]*</code> or maybe <code>^[^ab]*$</code> (no doubt there are other possibilities as well). For some regex implementations you can say <code>[^ab]+</code> to mean 1 or more; I don't remember if Python regex recognizes that.</span>
<span class="comment-copy">Okay I understand what [^ab]* matches an empty string from str. What is being matched with 'a' from str</span>
<span class="comment-copy">Okay, I think I misunderstood the difference between match and full match. so match will match any part of str, full match makes sure the entire str matches the pattern right ?</span>
<span class="comment-copy">No, <code>match</code> will match the <b>start</b> of a string, see the quote from the docs in the answer.</span>
