<div class="post-text" itemprop="text">
<p>I am trying to create a dictionary from a list of lists. I have a list of name and marks like: </p>
<pre><code>str=[
["Amit", 23],
["Amit", 127],
["Rahul", 3],
["Rahul", 71],
["Deepak", 31],
["Rahul", 22],
["Amit", 81]
]
</code></pre>
<p>to a dictionary with key as name and value as average marks like:</p>
<pre><code>{"Amit":77, "Rahul":32, "Deepak":31}
</code></pre>
<p>I was trying to get each list and then convert it to dictionary value. But I am getting error.</p>
<pre><code>def highest_avg(str):
mydict={}
for each in str:
    my_dict=dict.fromkeys(each[0],each[1])
    print(my_dict)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd use an <code>OrderedDict</code> of lists, since it appears you'd like to maintain order.</p>
<pre><code>from collections import OrderedDict

o = collections.OrderedDict()
for i in data:
     o.setdefault(i[0], []).append(i[1])
</code></pre>
<p>Now that you're done appending data to the dictionary, calculate the mean key-wise. </p>
<pre><code>for k in o:
     o[k] = sum(o[k]) / len(o[k])
</code></pre>
<p>If order is not paramount here, a vanilla <code>{}</code> dictionary would work just as well.</p>
<hr/>
<pre><code>print(o)
OrderedDict([('Amit', 77.0), ('Rahul', 32.0), ('Deepak', 31.0)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using list comprehension :</p>
<pre><code>{x[0]:x[1] for x in str}
</code></pre>
<p>Or devide the data into two lists keys and values :</p>
<pre><code>keys = [x[0] for x in str]
values = [x[1] for x in str]
dict(zip(keys, values))
</code></pre>
<p>Output :</p>
<pre><code>{'Deepak': 31, 'Amit': 81, 'Rahul': 22}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using standard Python methods:</p>
<pre><code>myList=[
["Amit", 23],
["Amit", 127],
["Rahul", 3],
["Rahul", 71],
["Deepak", 31],
["Rahul", 22],
["Amit", 81]
]

myDict = dict()
for key, value in myList:
    if key not in myDict:
        myDict[key] = list()
    myDict[key].append(value)

for key, values in myDict.items():
    myDict[key] = sum(values) / len(values)

print(myDict)
</code></pre>
<p>First I get all values belonging to a certain key and then I calculate the mean value. Also note that str is a built-in variable, so I replaced it with myList.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; from statistics import mean
</code></pre>
<p>1 . Store the <code>list</code> of <code>numbers</code> by its <code>key</code> using <a href="https://docs.python.org/2/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a></p>
<pre><code>&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; for key,val in s: 
         d[key].append(val)       
&gt;&gt;&gt; d
=&gt; defaultdict(&lt;class 'list'&gt;, {'Amit': [23, 127, 81], 'Rahul': [3, 71, 22], 'Deepak': [31]})
</code></pre>
<p>2 . Calculate the <code>mean</code> using <a href="https://docs.python.org/3/library/statistics.html#statistics.mean" rel="nofollow noreferrer"><code>statistics.mean</code></a></p>
<pre><code>&gt;&gt;&gt; out = {key: mean(val) for key, val in d.items()}

&gt;&gt;&gt; out
=&gt; {'Amit': 77, 'Rahul': 32, 'Deepak': 31}
</code></pre>
<p>#driver values :</p>
<pre><code>IN :s = [['Amit', 23], ['Amit', 127], ['Rahul', 3], ['Rahul', 71],
         ['Deepak', 31], ['Rahul', 22], ['Amit', 81]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could do this using <code>itertools.groupby</code>:</p>
<pre><code>from itertools import groupby

k = lambda x: x[0]
{k: sum(l)//len(l) for k, l in ((k, [x[1] for x in g]) for k, g in groupby(sorted(str, key=k), key=k))}
# {'Amit': 77, 'Deepak': 31, 'Rahul': 32}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>    data =[
["Amit", 23],
["Amit", 127],
["Rahul", 3],
["Rahul", 71],
["Deepak", 31],
["Rahul", 22],
["Amit", 81]
]

import numpy as np
import pandas as pd

data_df = pd.DataFrame(data) #convert your list into a Pandas DataFrame

data_df

       0    1
0    Amit   23
1    Amit  127
2   Rahul    3
3   Rahul   71
4  Deepak   31
5   Rahul   22
6    Amit   81

agg_data = data_df.groupby(data_df[0]).agg(np.mean) #Group data on names &amp; aggregate using mean of scores(values)

agg_data
         1
0         
Amit    77
Deepak  31
Rahul   32

agg_data.to_dict()[1] #Convert your Pandas DataFrame into dict using 'dict' orientation
#the [1] is the key that represents your column. Dict is created like this: {column -&gt; {index -&gt; value}}

{'Amit': 77, 'Deepak': 31, 'Rahul': 32} #This is the output
</code></pre>
<p>Hope this helps</p>
</div>
<span class="comment-copy">This is not the OP's requirement. Even the desired outputs do not match. Pls go through the question once again.</span>
<span class="comment-copy">@KaushikNP, edited</span>
<span class="comment-copy">Still doesn't work.</span>
