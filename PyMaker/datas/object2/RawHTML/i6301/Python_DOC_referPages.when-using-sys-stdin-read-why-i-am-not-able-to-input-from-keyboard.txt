<div class="post-text" itemprop="text">
<p>My code is as follows:</p>
<pre><code>def function(a, b):
    while a != 0 and b != 0:
      ...

    return x

if __name__ == "__main__":
    input = sys.stdin.read()
    a, b = map(int, input.split())
    print(function(a, b))
</code></pre>
<p>When I try to run it, the program doesn't give me a chance to input.</p>
<p>I get the following traceback message:</p>
<pre><code>ValueError: not enough values to unpack (expected 2, got 0)
</code></pre>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/6j5Ye.png"/></p>
<p>Can someone tell me the reason and how I can make input to test my program.</p>
<p>Thanks a lot.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>sys.stdin.read()</code> will read <code>stdin</code> until it hits EOF. Normally, this happens when that stream is closed by the other end (i.e. by whatever provides input).</p>
<p>This works if you run your program like <code>cat inputfile.txt | your_program</code>. But it will just keep reading endlessly in interactive mode when <code>stdin</code> is connected to your terminal, so the only way to close it from the other end is to close the terminal.</p>
<p>Strictly speaking, you can make <code>read()</code> stop by inputting a EOF character on a line by itself which is <code>Ctrl-D</code> in Unix and <code>Ctrl-Z</code> in Windows -- and this works in a regular Python console. But in IPython, this technique doesn't work: here in Windows, I see <code>Ctrl-D</code> as <code>\x04</code> and <code>Ctrl-Z</code> as a blank line and neither stops the read (whether this is a bug or by design is another question).</p>
<p>So,</p>
<ul>
<li>Use <a href="https://docs.python.org/3/library/functions.html#input" rel="nofollow noreferrer"><code>input()</code></a> instead to input a single line, or</li>
<li><p>if you require multiple lines of input, use something that puts a limit on how much is read from <code>stdin</code>:</p>
<pre><code>ll=[]        
while True:
    l = input()    # or sys.stdin.readline().rstrip()
    if not l: break
    ll.append(l)
</code></pre>
<p>This way, you're able to stop the program from asking for more input by entering a blank line.</p></li>
<li><p>finally, there's <a href="https://docs.python.org/2/library/stdtypes.html?highlight=isatty#file.isatty" rel="nofollow noreferrer"><code>sys.stdin.isatty()</code></a> which allows you do invoke different code depending on whether the input is interactive (but for your task, this is probably an overkill).</p></li>
</ul>
</div>
<span class="comment-copy">Is there any particular reason you aren't using <code>input</code>??</span>
<span class="comment-copy">How did you run your program?</span>
<span class="comment-copy">What do you mean "I need to keep the <code>input</code> method intact"??? <code>input</code> is a built-in function, that does what you need it to do. I'm not talking about your variable, <code>input</code>, which is <i>shadowing the built-in function</i>. Why in the world are you using <code>sys.stdin</code>? Anyway, <code>sys.stdin.read</code> keeps reading from <code>stdin</code> until it encounters an EOF. What system are you on? What exactly are you doing when you run this?</span>
<span class="comment-copy">You never get a chance to provide an input? It just errors out immediately? I'm on a Mac, and I can get this to work. It's needlessly annoying because you have to press enter <i>and then</i> ctrl-D, which is why you <i>should be using the <code>input</code> function</i>, but it works.</span>
<span class="comment-copy">... How does the online grader <i>enforce</i> you to <i>only</i> use <code>sys.stdin.read</code>??? Does it actually look for you calling that function?! You realize, the <code>input</code> function <i>already reads from standard in</i></span>
<span class="comment-copy">Um, this isn't true. You can use <code>sys.stdin.read()</code>, which will read until an EOF. You can give it an EOF, on OSX for example, by pressing enter then cltr-d. I think most Linux/Unix flavors will interpret just a CTRL-d as EOF.</span>
<span class="comment-copy">@juanpa.arrivillaga I was getting to that. Yes, you can, but not in IPython.</span>
<span class="comment-copy">I've been testing this in Ipython shells the entire time.</span>
<span class="comment-copy">The Windows console has no pre-determined control character to end a cooked read normally (i.e. not Ctrl+C). For <code>ReadFile</code>, the ConDrv device hacks this feature in to return 0 bytes read if a line starts with Ctrl+Z (0x1A). But that's not a function of the console itself, and any program that calls <code>ReadConsole</code> or low-level <code>ReadConsoleInput</code> has to manually implement this behavior. This was implemented for the new console I/O in Python 3.6, but maybe in the future it can use the <code>pInputControl</code> parameter of <code>ReadConsole</code> to have the console itself handle this for both Ctrl+Z and Ctrl+D.</span>
