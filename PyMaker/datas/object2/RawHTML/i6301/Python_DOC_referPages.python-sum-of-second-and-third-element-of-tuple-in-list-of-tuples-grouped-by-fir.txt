<div class="post-text" itemprop="text">
<p>How do you get the sum of second and third values in a list of tuples grouped by the first value?</p>
<p>I.e:</p>
<p><code>list_of_tuples = [(1, 3, 1), (1, 2, 4), (2, 1, 0), (2, 2, 0)]</code></p>
<p><code>expected_output = [(1, 5, 5), (2, 3, 0)]</code></p>
<p>I found several <a href="https://stackoverflow.com/questions/2249036/grouping-python-tuple-list">great answers</a> on StackOverflow doing this found tuples with two values, but couldn't figure out how to adjust them for summing both second and third values.</p>
<p>One of the good answers for just the second value was this:</p>
<pre><code>def sum_pairs(pairs):
sums = {}
for pair in pairs:
    sums.setdefault(pair[0], 0)
    sums[pair[0]] += pair[1]
return sums.items()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could also do it like this:</p>
<pre><code>list_of_tuples = [(1, 3, 1), (1, 2, 4), (2, 1, 0), (2, 2, 0)]

# create empty dictionary to store data
sums = {}

# iterate over list of typles
for pair in list_of_tuples:

  # create new item in dictionary if it didnt exist
  if pair[0] not in sums: sums[pair[0]] = [pair[0], 0 ,0]

  # sum the values
  sums[pair[0]][1] += pair[1]
  sums[pair[0]][2] += pair[2]

#print resulting tuple   
print(tuple(sums.values()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a <code>defaultdict</code> as a grouper:</p>
<pre><code>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; grouper = defaultdict(lambda: (0,0))
&gt;&gt;&gt; list_of_tuples = [(1, 3, 1), (1, 2, 4), (2, 1, 0), (2, 2, 0)]
&gt;&gt;&gt; for a, b, c in list_of_tuples:
...     x, y = grouper[a]
...     grouper[a] = (x + b, y + c)
...
&gt;&gt;&gt; grouper
defaultdict(&lt;function &lt;lambda&gt; at 0x102b240d0&gt;, {1: (5, 5), 2: (3, 0)})
</code></pre>
<p>Now, you can always get a list of tuples back like this:</p>
<pre><code>&gt;&gt;&gt; [(k, a, b) for k, (a, b) in grouper.items()]
[(1, 5, 5), (2, 3, 0)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> to group based on the first item, and then take the cumulative sums of all the last two items in each group:</p>
<pre><code>from itertools import groupby

list_of_tuples = [(1, 3, 1), (1, 2, 4), (2, 1, 0), (2, 2, 0)]
lst = [(k,)+tuple(sum(x) for x in zip(*g))[1:] 
                         for k, g in groupby(list_of_tuples, lambda x: x[0])]
print(lst)
# [(1, 5, 5), (2, 3, 0)]
</code></pre>
</div>
<span class="comment-copy">No guarantee that the initial ordering will be preserved (at least in Python &lt; 3.6)</span>
<span class="comment-copy">Note, the tuples need to be grouped already by the first element, so you'd have to sort first, for example, unless you can make that assumption.</span>
<span class="comment-copy">@juanpa.arrivillaga No assumptions: <i>in a list of tuples grouped by the first value</i></span>
<span class="comment-copy">Aha! Missed that.</span>
