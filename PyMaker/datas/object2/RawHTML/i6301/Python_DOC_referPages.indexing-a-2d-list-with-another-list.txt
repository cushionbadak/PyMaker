<div class="post-text" itemprop="text">
<p>If I have a <code>list</code> such as:</p>
<pre><code>lst = [[1,2,3], [4,5,6], [7,8,9]]
</code></pre>
<p>and another <code>list</code> which contains a <code>[row, column]</code> <code>index</code> for an element in the <code>list</code>, so for example:</p>
<pre><code>index = [2, 1]
</code></pre>
<p>Obviously I can get the <code>element</code> at <code>index</code> with:</p>
<pre><code>lst[index[0]][index[1]]
</code></pre>
<p>However,  I find that this <code>syntax</code> is quite clunky and doesn't sit well in a big block of code. It would also become worse with a higher dimensional <code>list</code>.</p>
<p>My question: <strong>is there an easier way to do this <code>index</code>?</strong></p>
<p>It would seem that something like:</p>
<pre><code>lst[index]
</code></pre>
<p>would be more readable but this isn't how Python works so isn't an option.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you're working with a 2D-list, it might be a good idea to use <a href="http://www.numpy.org/" rel="nofollow noreferrer"><code>numpy</code></a>. You'll then simply need to define <a href="https://docs.scipy.org/doc/numpy-1.13.0/user/basics.indexing.html#dealing-with-variable-numbers-of-indices-within-programs" rel="nofollow noreferrer"><code>index</code> as a tuple</a>. Index <code>3</code> would be out of range, though:</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([[1,2,3], [4,5,6], [7,8,9]])
&gt;&gt;&gt; index = (1, 2)
&gt;&gt;&gt; a[index]
6
</code></pre>
<p>The method you're looking for is called <a href="http://ruby-doc.org/core-2.3.0_preview1/Array.html#method-i-dig" rel="nofollow noreferrer"><code>Array#dig</code></a> in Ruby:</p>
<pre><code>[[1,2,3], [4,5,6], [7,8,9]].dig(1, 2)
# 6
</code></pre>
<p>but I couldn't find any plain Python equivalent.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could just create a simple function that iterates over the index. For every element in index just fetch item from object and assign that as a new object. Once you have iterated over the whole index return current object. As @EricDuminil noted it works with dicts and all other objects that support <a href="https://docs.python.org/3/reference/datamodel.html#object.__getitem__" rel="nofollow noreferrer"><code>__getitem__</code></a>:</p>
<pre><code>def index(obj, idx):
    for i in idx:
        obj = obj[i]

    return obj

LST = [[1,2,3], [4,[5],6], [{'foo': {'bar': 'foobar'}},8,9]]
INDEXES = [[2, 2], [1, 1, 0], [2, 0, 'foo', 'bar']]

for i in INDEXES:
    print('{0} -&gt; {1}'.format(i, index(LST, i)))
</code></pre>
<p>Output:</p>
<pre><code>[2, 2] -&gt; 9
[1, 1, 0] -&gt; 5
[2, 0, 'foo', 'bar'] -&gt; foobar
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The method you used is probably the simplest way, but for better readability you could go for something like </p>
<pre><code>i = index[0]
j = index[1]
x = lst[i][j]
</code></pre>
<p>One way or another, you need to split your index list into the 2 values. If you want to declutter your main block of code, you can write a function to handle this, but that would hardly be "easier".</p>
<p>EDIT: As suggested below, tuple unpacking is an even better option </p>
<pre><code>i, j = index
x = lst[i][j]
</code></pre>
</div>
<span class="comment-copy">you can do <code>i, j = index</code> then <code>lst[i][j]</code></span>
<span class="comment-copy">+1 Nice neat function - especially for being able to work for <code>n</code> dimensions. However, I find the <code>numpy</code> solution is neater in my opinion!</span>
<span class="comment-copy">Nice. As a bonus, it also works (if you're careful) with dicts. <code>[[1,2,3], [4,[5],6], [7,8,9, {'a':'b'}]]</code> and <code>index(lst, [2, 3, 'a'])</code>.</span>
<span class="comment-copy">Or, using tuple unpacking, <code>i, j = index</code> /  <code>x = lst[i][j]</code>.</span>
