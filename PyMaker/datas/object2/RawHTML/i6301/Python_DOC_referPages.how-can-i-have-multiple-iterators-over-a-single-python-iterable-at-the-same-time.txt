<div class="post-text" itemprop="text">
<p>I would like to compare all elements in my iterable object combinatorically with each other. The following reproducible example just mimics the functionality of a plain list, but demonstrates my problem. In this example with a list of ["A","B","C","D"], I would like to get the following 16 lines of output, every combination of each item with each other. A list of 100 items should generate 100*100=10,000 lines.</p>
<pre><code>A A True
A B False
A C False
... 10 more lines ...
D B False
D C False
D D True
</code></pre>
<p>The following code seemed like it should do the job.</p>
<pre><code>class C():
    def __init__(self):
        self.stuff = ["A","B","C","D"]
    def __iter__(self):
        self.idx = 0
        return self
    def __next__(self):
        self.idx += 1
        if self.idx &gt; len(self.stuff):
            raise StopIteration
        else:
            return self.stuff[self.idx - 1]

thing = C()
for x in thing:
    for y in thing:
        print(x, y, x==y)
</code></pre>
<p>But after finishing the y-loop, the x-loop seems done, too, even though it's only used the first item in the iterable.</p>
<pre><code>A A True
A B False
A C False
A D False
</code></pre>
<p>After much searching, I eventually tried the following code, hoping that itertools.tee would allow me two independent iterators over the same data:</p>
<pre><code>import itertools
thing = C()
thing_one, thing_two = itertools.tee(thing)
for x in thing_one:
    for y in thing_two:
        print(x, y, x==y)
</code></pre>
<p>But I got the same output as before.</p>
<p>The real-world object this represents is a model of a directory and file structure with varying numbers of files and subdirectories, at varying depths into the tree. It has nested links to thousands of members and iterates correctly over them once, just like this example. But it also does expensive processing within its many internal objects on-the-fly as needed for comparisons, which would end up doubling the workload if I had to make a complete copy of it prior to iterating. I would really like to use multiple iterators, pointing into a single object with all the data, if possible.</p>
<hr/>
<p>Edit on answers: The critical flaw in the question code, pointed out in all answers, is the single internal self.idx variable being unable to handle multiple callers independently. The accepted answer is the best for my real class (oversimplified in this reproducible example), another answer presents a simple, elegant solution for simpler data structures like the list presented here.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's actually impossible to make a container class that is it's own iterator. The container shouldn't know about the state of the iterator and the iterator doesn't need to know the contents of the container, it just needs to know which object is the corresponding container and "where" it is. If you mix iterator and container different iterators will share state with each other (in your case the <code>self.idx</code>) which will not give the correct results (they read and modify the same variable).</p>
<p>That's the reason why all built-in types have a seperate iterator class (and even some have an reverse-iterator class):</p>
<pre><code>&gt;&gt;&gt; l = [1, 2, 3]
&gt;&gt;&gt; iter(l)
&lt;list_iterator at 0x15e360c86d8&gt;
&gt;&gt;&gt; reversed(l)
&lt;list_reverseiterator at 0x15e360a5940&gt;

&gt;&gt;&gt; t = (1, 2, 3)
&gt;&gt;&gt; iter(t)
&lt;tuple_iterator at 0x15e363fb320&gt;

&gt;&gt;&gt; s = '123'
&gt;&gt;&gt; iter(s)
&lt;str_iterator at 0x15e363fb438&gt;
</code></pre>
<p>So, basically you could just return <code>iter(self.stuff)</code> in <code>__iter__</code> and drop the <code>__next__</code> altogether because <code>list_iterator</code> knows how to iterate over the list:</p>
<pre><code>class C:
    def __init__(self):
        self.stuff = ["A","B","C","D"]
    def __iter__(self):
        return iter(self.stuff)

thing = C()
for x in thing:
    for y in thing:
        print(x, y, x==y)
</code></pre>
<p>prints 16 lines, like expected.</p>
<p>If your goal is to make your own iterator class, you need two classes (or 3 if you want to implement the reversed-iterator yourself).</p>
<pre><code>class C:
    def __init__(self):
        self.stuff = ["A","B","C","D"]
    def __iter__(self):
        return C_iterator(self)
    def __reversed__(self):
        return C_reversed_iterator(self)

class C_iterator:
    def __init__(self, parent):
        self.idx = 0
        self.parent = parent
    def __iter__(self):
        return self
    def __next__(self):
        self.idx += 1
        if self.idx &gt; len(self.parent.stuff):
            raise StopIteration
        else:
            return self.parent.stuff[self.idx - 1]

thing = C()
for x in thing:
    for y in thing:
        print(x, y, x==y)
</code></pre>
<p>works as well. </p>
<p>For completeness, here's one possible implementation of the reversed-iterator:</p>
<pre><code>class C_reversed_iterator:
    def __init__(self, parent):
        self.parent = parent
        self.idx = len(parent.stuff) + 1
    def __iter__(self):
        return self
    def __next__(self):
        self.idx -= 1
        if self.idx &lt;= 0:
            raise StopIteration
        else:
            return self.parent.stuff[self.idx - 1]

thing = C()
for x in reversed(thing):
    for y in reversed(thing):
        print(x, y, x==y)
</code></pre>
<p>Instead of defining your own iterators you could use generators. One way was already shown in the other answer:</p>
<pre><code>class C:
    def __init__(self):
        self.stuff = ["A","B","C","D"]
    def __iter__(self):
        yield from self.stuff
    def __reversed__(self):
        yield from self.stuff[::-1]
</code></pre>
<p>or explicitly delegate to a generator function (that's actually equivalent to the above but maybe more clear that it's a new object that is produced):</p>
<pre><code>def C_iterator(obj):
    for item in obj.stuff:
        yield item

def C_reverse_iterator(obj):
    for item in obj.stuff[::-1]:
        yield item

class C:
    def __init__(self):
        self.stuff = ["A","B","C","D"]
    def __iter__(self):
        return C_iterator(self)
    def __reversed__(self):
        return C_reverse_iterator(self)
</code></pre>
<p>Note: You don't have to implement the <code>__reversed__</code> iterator. That was just meant as additional "feature" of the answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>__iter__</code> is completely broken. Instead of actually making a fresh iterator on every call, it just resets some state on <code>self</code> and returns <code>self</code>. That means you can't actually have more than one iterator at a time over your object, and any call to <code>__iter__</code> while another loop over the object is active will interfere with the existing loop.</p>
<p>You need to actually make a new object. The simplest way to do that is to use <code>yield</code> syntax to write a generator function. The generator function will automatically return a new iterator object every time:</p>
<pre><code>class C(object):
    def __init__(self):
        self.stuff = ['A', 'B', 'C', 'D']
    def __iter__(self):
        for thing in self.stuff:
            yield thing
</code></pre>
</div>
<span class="comment-copy">Whatever source taught you to write iterables like that, stop using it.</span>
<span class="comment-copy">Is your object indexable? Does it have a <code>__len__</code> method?</span>
<span class="comment-copy">It's essentially a representation of a nested directory and file structure, so with the multiple levels, I don't have a single index into it all. I do have an overall count of nodes, however, so I could write a <b>len</b> easily.</span>
<span class="comment-copy">How deeply is it nested? Are there always only two levels?</span>
<span class="comment-copy">Are the number of children always consistent to each parent or does it vary? or can that number be found dynamically?</span>
<span class="comment-copy">I'm almost certain I'll need to implement my own iterator, as my real-world class needs to iterate over multiple lists one after the other, opaque to the caller. I'm still learning, but I'll be surprised if a generator like yield will handle my case. This answer covers a lot of ground in getting me where I need to be. Cheers!</span>
<span class="comment-copy">@mightypile: Iterate over multiple lists one after the other you say? <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer">Hmm...</a></span>
<span class="comment-copy">General rule: If you define <code>__next__</code>, then <code>__iter__</code> <i>must</i> be the identity function (doing <i>nothing</i> but <code>return self</code>). If it isn't, the code is <i>wrong</i>. And usually, you don't really want to hand-implement an iterator class, so you'd just make <code>__iter__</code> a generator function as demonstrated here and avoid implementing <code>__next__</code> entirely. The generator function approach is faster (letting Python manage generator state lets it do it much more efficiently) and simpler than defining a separate iterator class for your type.</span>
<span class="comment-copy">The yield direction is helpful, as is the general rule. I need to figure out if they'll work for my use-case of iterating through multiple levels of a hierarchy within the object.Thanks!</span>
