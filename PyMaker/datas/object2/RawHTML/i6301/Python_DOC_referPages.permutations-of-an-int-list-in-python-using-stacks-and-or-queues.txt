<div class="post-text" itemprop="text">
<p>I am trying to write a method <code>def permutations(lst)</code> that takes in a list of integers (such as [1,2,3]) and prints all the possible permutations of it, <em>without</em> using recursion. I also have to use a stacks and/or queue in this method. </p>
<p>So far I have:</p>
<pre><code>class Queue:

    def __init__(self):
        self.items = []

    def isEmpty(self):
        return self.items == []

    def enqueue(self, item):
        self.items.insert(0,item)

    def dequeue(self):
        return self.items.pop()

    def size(self):
        return len(self.items)

    def __rep__(self):
        return str(self.items)


def permutation(lst):
    temp = [0] * len(lst)
    q = Queue()
    q.enqueue(lst)
    i = 1
    while i &lt; len(lst):
        if temp[i] &lt; i:
            j = temp[i] if i % 2 else 0
            lst[j], lst[i] = lst[i], lst[j]
            q.enqueue(lst)
            temp[i] += 1
            i = 1
        else:
            temp[i] = 0
            i += 1

    return q.__rep__()


l = [1,2,3]
print(permutation(l))
</code></pre>
<p>But the output I get is: [[3, 2, 1], [3, 2, 1], [3, 2, 1], [3, 2, 1], [3, 2, 1], [3, 2, 1]].</p>
<p>However, when I print the lst instead of enqueueing it (replacing the enqueue lines with just print), I get the correct output. [[1, 2, 3],
[2, 1, 3],[3, 1, 2],[1, 3, 2],[2, 3, 1],[3, 2, 1]].</p>
<p>How do I modify my code to use enqueue? Any suggestions appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p><em>PROBLEM</em></p>
<p>The problem is in your list reference in <code>enqueue</code>: you got six references to the same list. Every time you change one element, you are changing all of them. Print <code>q</code> at intermediate points, and you'll see the effect:</p>
<pre><code>    else:
        temp[i] = 0
        i += 1
    print ("temp", temp)
    print ("lst", lst)
    print("q", q.__rep__())
</code></pre>
<p>Output:</p>
<pre><code>temp [0, 1, 0]
lst [2, 1, 3]
q [[2, 1, 3], [2, 1, 3]]
temp [0, 0, 0]
lst [2, 1, 3]
q [[2, 1, 3], [2, 1, 3]]
...
temp [0, 0, 2]
lst [3, 2, 1]
q [[3, 2, 1], [3, 2, 1], [3, 2, 1], [3, 2, 1], [3, 2, 1], [3, 2, 1]]
temp [0, 0, 0]
lst [3, 2, 1]
q [[3, 2, 1], [3, 2, 1], [3, 2, 1], [3, 2, 1], [3, 2, 1], [3, 2, 1]]
[[3, 2, 1], [3, 2, 1], [3, 2, 1], [3, 2, 1], [3, 2, 1], [3, 2, 1]]
</code></pre>
<p>Instead, make a <em>copy</em> of the list when you enqueue:</p>
<pre><code>def enqueue(self, item):
    self.items.insert(0, item[:])
</code></pre>
<p>This will give you the desired output.</p>
</div>
<span class="comment-copy">Presumably this is an asignment that doesn't allow you to use the built-in permutation functionality?</span>
<span class="comment-copy">You can use the standard <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow noreferrer">collections.dqueue</a> class.</span>
