<div class="post-text" itemprop="text">
<p>I just want to print a file that is returned from a separate function:</p>
<pre><code>def open_file():
    while True:
        try:
            filename = input("Input a file name: ")
            file=open(filename,'r')
            return file
        except FileNotFoundError:
            print("Error: Enter a valid file.")
            continue
        else:
            break
open_file()
for line in file:
    print(line)
</code></pre>
<p>It's prompting for the file, and gives the error and re-promts when an invalid file is entered, but when a valid file is entered, it says that "file" is not defined. It's defined in the open_file function though, and is the returned value... So why doesn't it print?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>file</code> is the name of class object. You should use something else;
The problem in your code is that you don't save the return code from your function.</p>
<pre><code>def open_file():
    while True:
            filename = input("Input a file name: ")
            try:
                f = open(filename,'r')
                return f
            except FileNotFoundError:
                print("Error: Enter a valid file.")
                continue

f = open_file()
for line in f:
    print(line)
</code></pre>
<p>You don't need to <code>else</code> clause, because you never reach it. You return from the function if there is no exception, and if there is - the else clause doesn't get executed anyway. </p>
<p>The <strong>try â€¦ except</strong> statement has an optional <strong>else</strong> clause, which, when present, must follow all except clauses. It is <em>useful for code that must be executed if the try clause</em> <strong>does not raise an exception.</strong></p>
<p>You can do the same with more elegant way;</p>
<pre><code>for line in open_file():
    print line
</code></pre>
<p>The behavior of iterating with a for loop on a <strong>file</strong> object iterates the file line-by-line.</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, don't use <code>file</code> as a variable. It is a builtin type, like <code>int</code> or <code>str</code>. To print the file returned from <code>open_file</code>, you need to use the <code>file.readlines()</code> function:</p>
<pre><code>f = open_file()
for line in f.readlines():
    print(line)
</code></pre>
<p>And an improvement for your <code>open_file</code> function:</p>
<pre><code>def open_file():
    while True:
        try:
            return open(raw_input("Enter a file name: "), 'r')
        except FileNotFoundError:
            print("Error: Enter a valid file name.")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>file</code> is a <strong>local</strong> variable of your <code>open_file</code> function. It is therefore not available outside of the function. You should assign asign the return value:</p>
<pre><code>def open_file():
    while True:
        try:
            # ...
            return file
        except FileNotFoundError:
            # ...
        # no break needed; the return statement ends the function


file = open_file()
for line in file:
    print(line)
</code></pre>
</div>
<span class="comment-copy">You need to use your <code>return</code> statement to assign to a variable <code>file = open_file()</code></span>
<span class="comment-copy">In Python 3.x <code>file</code> was removed so there's no issue with shadowing there...</span>
<span class="comment-copy">Oh, so what is the class object of <code>file</code> in python 3? I still thinks its a bad idea to use this name, since it can be confusing.</span>
<span class="comment-copy">In Python 3, files are derived from <a href="https://docs.python.org/3/library/io.html#io.IOBase" rel="nofollow noreferrer"><code>io.IOBase</code></a>. Eg, a text file is <code>&lt;class '_io.TextIOWrapper'&gt;</code>, a binary file is <code>&lt;class '_io.BufferedReader'&gt;</code> or <code>&lt;class '_io.BufferedWriter'&gt;</code>. Also see <code>io.RawIOBase</code>.</span>
