<div class="post-text" itemprop="text">
<p>Writing to the 16x2 LCD display on the raspberryp pi can take some time to finish, especially with the module I wrote that automatically scrolls text that exceeds the length of the display.</p>
<p>I need to use multithreading, or something similar, to send the output to the display and continue with the rest of the program. I've tried a couple things with multithreading, but haven't quite got it.</p>
<p>This is the working code without any multithreading. The method I want to be multithreaded is "TextToLCD.ProcessFrameBuffer".</p>
<h1>piBell.py</h1>
<pre><code>#!/usr/bin/env python3

import time
import rekognition
import TextToLCD
import PiPhoto
import json
import logging
import re
import threading
from queue import Queue

logFormatter = logging.Formatter("%(asctime)s [%(name)-8.8s]/[%(funcName)-12.12s] [%(levelname)-5.5s]  %(message)s")
rootLogger = logging.getLogger('piBell')

fileHandler = logging.FileHandler("{0}/{1}.log".format("./", "piBell"), 'a')
fileHandler.setFormatter(logFormatter)
rootLogger.addHandler(fileHandler)

consoleHandler = logging.StreamHandler()
consoleHandler.setFormatter(logFormatter)
rootLogger.addHandler(consoleHandler)

reFace = re.compile('face|head|selfie|portrait|person', re.IGNORECASE)

def main(debugMode='INFO'):
    TextToLCD.Clear()
    rootLogger.setLevel(debugMode)
    imgRotation = 270
    imgPath = './'
    imgName = 'image.jpg'

    TextToLCD.ProcessFrameBuffer(["Scanning:", "................."], debugMode)
    PiPhoto.GetPhoto(imgPath + imgName, imgRotation, "INFO")

    rootLogger.info("Sending image to rekognition.")
    TextToLCD.ProcessFrameBuffer(["Processing","................."], debugMode)

    jsonLabels = rekognition.get_labels(imgPath + imgName)
    rootLogger.info("Obtained JSON payload from rekognition.")
    rootLogger.debug(json.dumps(jsonLabels))

    if len(json.dumps(jsonLabels)) &gt; 0:
        if IsFace(jsonLabels):
            if TestFace(imgPath + imgName):
                TextToLCD.ProcessFrameBuffer(['Hello', '      :)'], debugMode)

                celeb = IsCelebrity(imgPath + imgName)
                if celeb:
                    TextToLCD.ProcessFrameBuffer(["You look like:", celeb], debugMode)
            else:
                rootLogger.info("No face detected.")
                TextToLCD.ProcessFrameBuffer(['No face detected', '       :('], debugMode)

        else:
            rootLogger.info("No face detected.")
            TextToLCD.ProcessFrameBuffer(['No face detected', '       :('], debugMode)
    else:
        rootLogger.error("JSON payload from rekognition was empty.")

def IsFace(jsonPayload):
    for value in jsonPayload:
        rootLogger.info("Label: " + value['Name'] + ", Confidence: " +  str(round(value['Confidence'])))
        rootLogger.debug(json.dumps(jsonPayload))

        if reFace.match(value['Name']) and round(value['Confidence']) &gt; 75:
            rootLogger.info("Possible face match.")
            return True
    return False

def TestFace(img):
    jsonFaces = rekognition.get_faces(img)
    rootLogger.debug(json.dumps(jsonFaces))

    if len(json.dumps(jsonFaces)) &gt; 2:
        for item in jsonFaces:
            if item['Confidence']:
                if item['Confidence'] &gt; 75:
                    rootLogger.info("Face detected. Confidence: " + str(round(item['Confidence'])))
                    return True
    else:
        rootLogger.info("No facial data obtained.")

    return False

def IsCelebrity(img):
    celebMatchAccuracy = 25
    jsonCelbFaces = rekognition.get_celebrities(img)
    rootLogger.debug(json.dumps(jsonCelbFaces))

    if len(json.dumps(jsonCelbFaces)) &gt; 2:
        for item in jsonCelbFaces:
            if item['MatchConfidence']:
                if item['MatchConfidence'] &gt; celebMatchAccuracy and item['Name']:
                    rootLogger.info("Celebirity match detected: " + item['Name'] + ", Confidence: " + str(round(item['MatchConfidence'])))

                    return item['Name']
    else:
        rootLogger.info("No celebirity match found.")

    return False


if __name__ == "__main__":
    main('INFO')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First of all, it would be nice to see your LCD functions.
You are using hardware, so hardware is a limited resource. 
For this you will need some kind of access control, this could be implemented with a <a href="https://docs.python.org/3/library/threading.html#lock-objects" rel="nofollow noreferrer">Lock</a> Object or <a href="https://docs.python.org/3/library/threading.html#event-objects" rel="nofollow noreferrer">Event</a> Object.</p>
<p>You have two choices when you used the display:</p>
<ol>
<li>Run the current writing to the end</li>
<li><p>Interrupt the current writing</p>
<pre><code>import threading

import time
def parallelWithLock(lock:threading.Lock, name:str):

    with lock:
         for i in range(5):
         print(f"{name}: {i}")
         time.sleep(0.5)
         # doWantYouWant(...)

def parallelWithInterrupt(event:threading.Event,lock:threading.Lock,name:str):


    event.set()
    i = 0
    with lock:
        event.clear()
        while True:# or writing
             if event.isSet():
                  print(f"{name} Interrupted!")
                  break
             print(f"{name}: {i}")
             time.sleep(1)
             i += 1
             #doWantYouWant(...)

 if __name__ == '__main__':
      lock = threading.Lock()

      t1 = threading.Thread(target=parallelWithLock,args=(lock,"Thread_1"))
      t2 = threading.Thread(target=parallelWithLock,args=(lock,"Thread_2"))
      t1.start()
      t2.start()
      t1.join()
      t2.join()
      event = threading.Event()
      lock = threading.Lock()
      t3 = threading.Thread(target=parallelWithInterrupt,args=(event,lock,"Thread_3"))
      t4 = threading.Thread(target=parallelWithInterrupt,args=(event,lock,"Thread_4"))
      t5 = threading.Thread(target=parallelWithInterrupt, args=(event,lock, "Thread_4"))
      t3.start()
      time.sleep(5)
      t4.start()
      time.sleep(3)
      t5.start()
      t3.join()
      t4.join()
      time.sleep(2)
      event.set()
      t5.join()
</code></pre></li>
</ol>
</div>
<span class="comment-copy">At a minimum, you'd need to include the code for <code>TextToLCD.ProcessFrameBuffer</code>â€”and maybe that of the entire <code>TextToLCD</code> module...but don't bother because stackoverflow isn't a code writing service. Suggest you try writing the code yourself, and if you can't get it to work, <i>then</i> ask a specific question.</span>
<span class="comment-copy">I did write the TextToLCD module myself. I can post it if you wish. I didn't include it at first as I didn't think it would be necessary.</span>
<span class="comment-copy">As I said, don't bother (just doing that).</span>
<span class="comment-copy">Might be easier to use <a href="https://docs.python.org/3/library/asyncio.html" rel="nofollow noreferrer"><code>asyncio</code></a> instead of <code>threading</code>.</span>
