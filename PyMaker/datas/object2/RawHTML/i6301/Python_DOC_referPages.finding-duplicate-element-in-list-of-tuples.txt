<div class="post-text" itemprop="text">
<p>In the List of tuples, add the 2nd element if the first and last element matches with the other tuples.</p>
<pre><code>    p =[(u'basic', 7698, '01-2017'),
    (u'basic', 7685, '01-2017'),
    (u'Gross', 4875.0, u'01-2017'),
    (u'Gross', 4875.0, u'01-2017')]
</code></pre>
<p>And the output should be like </p>
<pre><code>    [(u'basic',15383,'01-2017'),(u'Gross', 9750.0, u'01-2017')]
</code></pre>
<p>I'm trying to do this way</p>
<pre><code>   o=[]        
   for i in p:
     if i[2] not in o:
        o.append(i[2])
     if i[0] not in o:
        o.append(i[0])
   count +=i[1]
   o.append(count)
</code></pre>
<p>my o/p:</p>
<pre><code>   ['01-2017', 'basic', u'Gross', 53050.0, 4875.0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a> to handle this. Use the first and last elements of the tuple as a key and the second as the value, which is accumulated by addition:</p>
<pre><code>from collections import defaultdict

l = [(u'basic', 7698, '01-2017'),
     (u'basic', 7685, '01-2017'),
     (u'Gross', 4875.0, u'01-2017'),
     (u'Gross', 4875.0, u'01-2017')]

d = defaultdict(int)
for t in l:
    d[(t[0], t[-1])] += t[1]

# create list of tuples from the defaultdict values
result = [(k[0], d[k], k[1]) for k in d]

&gt;&gt;&gt; print(result)
[(u'basic', 15383, '01-2017'), (u'Gross', 9750.0, u'01-2017')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from collections import defaultdict

l = [(u'basic', 7698, '01-2017'),
     (u'basic', 7685, '01-2017'),
     (u'Gross', 4875.0, u'01-2017'),
     (u'Gross', 4875.0, u'01-2017'),
     (u'basic', 7685, '01-2017'),]

# make a list of tuples of 1st and 3rd elements
r = [(x, z) for x, y, z in l]

# this is based on
# https://stackoverflow.com/questions/6618515/sorting-list-based-on-values-from-another-list
r_sorted = [(y,x[1]) for (y, x) in sorted(zip(r, l), key=lambda pair: pair[0])]

# this is based on
# https://stackoverflow.com/questions/18194712/how-do-i-sum-tuples-in-a-list-where-the-first-value-is-the-same
# as per @Idles dublication alert
testDict = defaultdict(int)
for key, val in r_sorted:
    testDict[key] += val

print(testDict.items())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also use <a href="https://docs.python.org/3.6/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> for this :</p>
<pre><code>from itertools import groupby

p =[(u'basic', 7698, '01-2017'),
    (u'basic', 7685, '01-2017'),
    (u'Gross', 4875.0, u'01-2017'),
    (u'Gross', 4875.0, u'01-2017')]

[(grp[0], sum(val[1] for val in vals), grp[1]) 
    for grp, vals in groupby(p, key=lambda x: (x[0], x[2]))]

# [('basic', 15383, '01-2017'), ('Gross', 9750.0, '01-2017')]
</code></pre>
</div>
<span class="comment-copy">I've not used it, but this sounds like a job for pandas.</span>
<span class="comment-copy">Describe your problem in the question, not the headline.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/18194712/how-do-i-sum-tuples-in-a-list-where-the-first-value-is-the-same">How do I sum tuples in a list where the first value is the same?</a></span>
<span class="comment-copy">What have you tried so far? We will not think for you. Please try yourself, and if you have problems, post your code and we can help.</span>
