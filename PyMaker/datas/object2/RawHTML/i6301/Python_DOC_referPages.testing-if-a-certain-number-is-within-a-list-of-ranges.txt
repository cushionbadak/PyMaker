<div class="post-text" itemprop="text">
<p>How do I test how many times a certain number is outside my list of ranges?</p>
<p>Example: </p>
<pre><code>value = 1
Ranges_array = [[0, 2], [2, 4], [0, 3]]
output = 1
</code></pre>
<p>So, the output generated will be 1 because there is only one range where the value of 1 does not lie within.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, those aren't actually Ranges, but two-element lists. You could use manual comparison, as in the other answers, but in my answer I turn them into actual Range objects.</p>
<p>Since Python's <code>range(a,b)</code> constructor is inclusive at <code>a</code> (that is, <code>a</code> is inside the range) and exclusive at <code>b</code> (<code>b</code> is outside the range), you have to add 1 to one of the endpoints if you want them both to be inclusive or exclusive. I assumed you wanted inclusive, so added 1 to the high end point:</p>
<pre><code>sum(1 for a,b in Ranges_array if value not in range(a,b+1))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>sum</code> and a generator expression:</p>
<pre><code>&gt;&gt;&gt; sum(not a &lt;= value &lt;= b for a, b in ranges_array)
1
</code></pre>
<p><code>a</code> and <code>b</code> are lower and upper range bounds, respectively. <code>a &lt;= value &lt;= b</code> is a <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow noreferrer"><em>chained comparison</em></a>, equivalent to <code>a &lt;= value and value &lt;= b</code>. The final return value is the number of times the <code>not a &lt;= value &lt;= b</code> expression evaluated to <code>True</code>.</p>
<p>We can get a slightly longer but more readable solution if we apply De Morgan's laws:</p>
<pre><code>&gt;&gt;&gt; sum(value &lt; a or value &gt; b for a, b in ranges_array)
1
</code></pre>
<hr/>
<p>Technically, you <em>can</em> use <code>range</code> as shown in other answers, but they will be slower in Python 3 (due to the creation of the <code>range</code> object) and <em>much</em> slower in Python 2 (because Python 2's <code>range</code> creates an actual list, and containment checks on lists are <em>O(n)</em>):</p>
<pre class="lang-bash prettyprint-override"><code>$ python3.6 -m timeit -s "a, b, value = 0, 1000, 500" "a &lt;= value &lt;= b"
10000000 loops, best of 3: 0.0343 usec per loop
$ python3.6 -m timeit -s "a, b, value = 0, 1000, 500" "value in range(a, b + 1)"
1000000 loops, best of 3: 0.28 usec per loop
$ python2.7 -m timeit -s "a, b, value = 0, 1000, 500" "value in range(a, b + 1)"
100000 loops, best of 3: 7.97 usec per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>list comprehension should be enough. </p>
<pre><code>output=len([k for k in Ranges_array if k[0]&gt;value or k[1]&lt;value])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could try:</p>
<pre><code>value = 1
Ranges_array= [[0,2],
          [2,4],
          [0,3]]
output = 0
for r in Ranges_array:
    if value not in range(r[0], r[1]):
        output +=1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>list comprehension</code> :</p>
<pre><code>&gt;&gt;&gt; sum([1 for x,y in ranges if not x&lt;=value&lt;=y])
=&gt; 1

#OR

&gt;&gt;&gt; len([1 for x,y in ranges if not x&lt;=value&lt;=y])
=&gt; 1
</code></pre>
<p>Using <code>generators</code> <em>(recommended as it will be faster)</em> :</p>
<pre><code>&gt;&gt;&gt; sum(1 for x,y in ranges if not x&lt;=value&lt;=y)
=&gt; 1
</code></pre>
<p>#driver value :</p>
<pre><code>IN : ranges = [[0,2], [2,4], [0,3]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just a parellel solution: </p>
<pre><code>my_value = 1
Ranges_array = [[0,2],[2,4],[0,3]]
output = 1

count = 0
for listt in Ranges_array:
    if not my_value in range(listt[0],listt[-1]):
        count+= 1

print count
</code></pre>
</div>
<span class="comment-copy">May I suggest generator expression, instead of list comprehension? Btw. very nice!</span>
<span class="comment-copy">Btw. it's "very nice", because this <code>in range</code> is O(1), as seen <a href="https://github.com/python/cpython/blob/master/Objects/rangeobject.c#L338" rel="nofollow noreferrer">here</a>.</span>
<span class="comment-copy">@EcirHana only in Python 3, though.</span>
<span class="comment-copy">Note: <code>x&lt;value&lt;y</code> does not include <code>x</code> and <code>y</code></span>
<span class="comment-copy">@vaultah: thanks. Missed that. Edited.</span>
