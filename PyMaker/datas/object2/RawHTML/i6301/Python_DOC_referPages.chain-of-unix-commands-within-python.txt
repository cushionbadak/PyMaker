<div class="post-text" itemprop="text">
<p>I'd like to execute the following UNIX command in Python: </p>
<p><code>cd 2017-02-10; pwd; echo missing &gt; 123.txt</code> </p>
<p>The date directory <code>DATE = 2017-02-10</code> and <code>OUT = 123.txt</code> are already variables in Python so I have tried variations of </p>
<p><code>call("cd", DATE, "; pwd; echo missing &gt; ", OUT)</code> </p>
<p>using the <code>subprocess.call</code> function, but I’m struggling to find documentation for multiple UNIX commands at once, which are normally separated by <code>;</code> or piping with <code>&gt;</code></p>
<p>Doing the commands on separate lines in Python doesn’t work either because it “forgets” what was executed on the previous line and essentiality resets.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can pass a shell script as a single argument, with strings to be substituted as out-of-band arguments, as follows:</p>
<pre><code>date='2017-02-10'
out='123.txt'

subprocess.call(
  ['cd "$1"; pwd; echo missing &gt;"$2"',  # shell script to run
   '_',                                 # $0 for that script
   date,                                # $1 for that script
   out,                                 # $2 for that script
  ], shell=True)
</code></pre>
<p>This is much more secure than substituting your <code>date</code> and <code>out</code> values into a string which is evaluated by the shell as code, because these values are treated as literals: A <code>date</code> of <code>$(rm -rf ~)</code> will not in fact try to delete your home directory. :)</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Doing the commands on separate lines in Python doesn’t work either
  because it “forgets” what was executed on the previous line and
  essentiality resets.</p>
</blockquote>
<p>This is because if you have separate calls to <code>subprocess.call</code> it will run each command in its own shell, and the <code>cd</code> call has no effect on the later shells.</p>
<p>One way around that would be to change the directory in the Python script itself before doing the rest. Whether or not this is a good idea depends on what the rest of the script does. Do you really need to change directory? Why not just write "missing" to <code>2017-02-10/123.txt</code> from Python directly? Why do you need the <code>pwd</code> call?</p>
<p>Assuming you're looping through a list of directories and want to output the full path of each and also create files with "missing" in them, you could perhaps do this instead:</p>
<pre><code>import os

base = "/path/to/parent"
for DATE, OUT in [["2017-02-10", "123.txt"], ["2017-02-11", "456.txt"]]:
    date_dir = os.path.join(base, DATE)
    print(date_dir)
    out_path = os.path.join(date_dir, OUT)
    out = open(out_path, "w")
    out.write("missing\n")
    out.flush()
    out.close()
</code></pre>
<p>The above could use some error handling in case you don't have permission to write to the file or the directory doesn't exist, but your shell commands don't have any error handling either.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; date = "2017-02-10"
&gt;&gt;&gt; command = "cd " + date + "; pwd; echo missing &gt; 123.txt"
&gt;&gt;&gt; import os
&gt;&gt;&gt; os.system(command)
</code></pre>
</div>
<span class="comment-copy">you could try opening a shell using popen, and then communicating with it to feed it each new line?</span>
<span class="comment-copy">See <a href="https://docs.python.org/2/library/subprocess.html#replacing-shell-pipeline" rel="nofollow noreferrer">replacing shell pipeline</a> in the docs.</span>
<span class="comment-copy">Note, however, that generally you don't need to / shouldn't do this. <code>subprocess.Popen()</code> can be passed a directory to run in, for example, so there's no reason to use <code>cd</code>. And the <code>&gt;OUT</code> could be replaced with the argument <code>stdout=open(OUT, 'w')</code>.</span>
<span class="comment-copy">Why is this tagged [embedded]?  Even if it is on an embedded system, the question nor answer do not depend on it.</span>
<span class="comment-copy">@Clifford I was referencing embedded code i.e. using multiple languages</span>
<span class="comment-copy">Works great, thanks. Just out of curiosity, what is the <code>'_'</code> for <code>$0</code> doing?</span>
<span class="comment-copy">@BenPickering, being a placeholder, so we can fill out <code>$1</code>. :)</span>
<span class="comment-copy">String concatenation risks shell injection attacks -- consider if <code>date='$(rm -rf ~)'</code></span>
<span class="comment-copy">Consider using <a href="https://docs.python.org/2/library/pipes.html#pipes.quote" rel="nofollow noreferrer"><code>pipes.quote()</code></a> or its successor <a href="https://docs.python.org/3/library/shlex.html#shlex.quote" rel="nofollow noreferrer"><code>shlex.quote()</code></a> to generate an escaped version of the variable which <i>can</i> be safely concatenated in this way.</span>
