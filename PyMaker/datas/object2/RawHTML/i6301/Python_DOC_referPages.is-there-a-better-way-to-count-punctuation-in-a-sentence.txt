<div class="post-text" itemprop="text">
<p>I want to count 'end sentences' e.g. full stops, exclamation marks, and question marks. </p>
<p>I have written a little loop to do this, but I was wondering if there is a better way. Not allowed to use built-in functions.</p>
<pre><code>for line in textContent:
    numberOfFullStops += line.count(".")
    numberOfQuestionMarks += line.count("?")
    numberOfQuestionMarks += line.count("!")

numberOfSentences = numberOfFullStops + numberOfQuestionMarks + numberOfExclamationMarks
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><em>Assuming you want to count terminal punctuation in one sentence</em>, we can produce a dictionary of (character, count) pairs by looping over the characters of each string and filtering the punctuations.</p>
<p><strong>Demo</strong></p>
<p>Here are three options presented top-down with intermediate- to beginner-level data structures:</p>
<pre><code>import collections as ct


sentence = "Here is a sentence, and it has some exclamations!!"
terminals = ".?!"

# Option 1 - Counter and Dictionary Comprehension
cd = {c:val for c, val in ct.Counter(sentence).items() if c in terminals}
cd
# Out: {'!': 2}


# Option 2 - Default Dictionary
dd = ct.defaultdict(int)
for c in sentence:
    if c in terminals:
        dd[c] += 1
dd
# Out: defaultdict(int, {'!': 2})


# Option 3 - Regular Dictionary
d = {}
for c in sentence:
    if c in terminals:
        if c not in d:
            d[c] = 0
        d[c] += 1
d
# Out: {'!': 2}
</code></pre>
<p>To extend further, for a list of separate <code>sentences</code>, loop around one of the latter options.</p>
<pre><code>for sentence in sentences:
    # add option here
</code></pre>
<p>Note: to sum the total punctuations per sentence, total the <code>dict.values()</code>, e.g. <code>sum(cd.values())</code>.</p>
<hr/>
<p><strong>Update</strong>: <em>assuming you want to split a sentence by terminal punctutation</em>, use regular expressions:</p>
<pre><code>import re


line = "Here is a string of sentences.  How do we split them up?  Try regular expressions!!!"


# Option - Regular Expression and List Comprehension
pattern = r"[.?!]"
sentences = [sentence for sentence in re.split(pattern, line) if sentence]
sentences
# Out: ['Here is a string of sentences', '  How do we split them up', '  Try regular expressions']

len(sentences)
# Out: 3
</code></pre>
<p>Notice <code>line</code> has 5 terminals, but only 3 sentences.  Thus regex is a more reliable approach.</p>
<p><strong>References</strong></p>
<ul>
<li><a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a></li>
<li><a href="https://docs.python.org/3/library/collections.html#defaultdict-examples" rel="nofollow noreferrer"><code>collections.defaultdict</code></a></li>
<li><a href="https://docs.python.org/3/library/re.html#re.split" rel="nofollow noreferrer"><code>re.split</code></a></li>
<li><a href="http://treyhunner.com/2015/12/python-list-comprehensions-now-in-color/" rel="nofollow noreferrer">List comprehension</a></li>
</ul>
</div>
<span class="comment-copy">Do you need separate counts for them? What's the purpose here - to count the punctuation or to count the number of sentences? "Because this is not 5 sentences!!!!!"</span>
<span class="comment-copy">What counts as a "built in function" here? Can you use standard library modules?</span>
<span class="comment-copy">sorry. I meant methods. As an example, if there is something which could strip it automatically then we are not allowed to use it e.g if we were sorting we are not allowed to use variable.sort()</span>
<span class="comment-copy">But you're allowed to use <code>.count</code>?</span>
<span class="comment-copy">@JonClements I need to see how many sentences have been found.</span>
<span class="comment-copy">Thank you for this. :-)  Big help.</span>
<span class="comment-copy">No problem.  I've updated the post based on your comments, hopefully closer to what you are looking for. Also, as answers continue to be posted, don't forget to upvote ones you find helpful and accept a final solution.</span>
