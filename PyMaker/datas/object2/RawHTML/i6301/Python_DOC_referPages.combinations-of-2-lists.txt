<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/44831077/python-how-to-pair-two-list-by-lambda-and-map">Python How to pair two list by lambda and map</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<pre><code>Input: [1, 2, 3] [a, b]

Expected Output: [(1,a),(1,b),(2,a),(2,b),(3,a),(3,b)]
</code></pre>
<p>This works, but is there a better way without an if statement?</p>
<pre><code>[(x,y) for (x,y) in list(combinations(chain(a,b), 2)) if x in a and y in b]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/2/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a>, your handy library tool  for a cartesian product:</p>
<pre><code>from itertools import product

l1, l2 = [1, 2, 3], ['a', 'b']
output = list(product(l1, l2))
# [(1, 'a'), (1, 'b'), (2, 'a'), (2, 'b'), (3, 'a'), (3, 'b')]
</code></pre>
</div>
<span class="comment-copy"><code>[(x,y) for x in a for y in b]</code>?</span>
<span class="comment-copy">You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer">itertools.product()</a>: <code>list(x for x in itertools.product([1, 2, 3], ['a', 'b']))</code></span>
<span class="comment-copy">@jszakmeister Or just <code>list(itertools.product([1, 2, 3], ['a', 'b']))</code>, ;)</span>
<span class="comment-copy">Thanks Wondercricket, that's what I was looking for. @schwobaseggl does product work for n lists? Like (a,b,c) for [a][b][c], (a,b,c,d) for [a][b][c][d], etc?</span>
<span class="comment-copy">Sigh.  I don't think the referenced question is actually similar enough to this one. :-(  <code>zip()</code> is the wrong solution here and <code>map()</code> isn't necessarily a better solution either.</span>
