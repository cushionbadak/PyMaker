<div class="post-text" itemprop="text">
<p>Consider the following logging example.  There are two python files, myapp.py and mylib.py.</p>
<pre><code># myapp.py
import logging
import mylib

class customAdapter(logging.LoggerAdapter):
    def process(self, msg, kwargs):
        return '[%s] %s' % (self.extra['connid'], msg), kwargs

def main():
    logging.basicConfig(filename='myapp.log', level=logging.INFO)
    logger = logging.getLogger('test')
    adapter = customAdapter(logger,{'connid': 123})
    adapter.info('Started')
    mylib.do_something()
    adapter.info('Finished')

if __name__ == '__main__':
    main()
</code></pre>
<hr/>
<pre><code># mylib.py
import logging

def do_something():
    lgr = logging.getLogger('test')
    lgr.info('Doing something')
</code></pre>
<p>When you execute myapp.py, you get the following output to the log file:</p>
<pre><code>INFO:test:[123] Started
INFO:test:Doing something
INFO:test:[123] Finished
</code></pre>
<p>I'm trying to get the log in inherit the contextual information acquired from the parent code.  Desired output:</p>
<pre><code>INFO:test:[123] Started
INFO:test:[123] Doing something
INFO:test:[123] Finished
</code></pre>
<p>Is this possible?  (notice that "[123]" is included in line 2 of the log)</p>
<p>Here are a few other relevant pieces of information:</p>
<ul>
<li>I'm using python 3.5</li>
<li>I'm trying to avoid passing any arguments to the "do_something" function.</li>
<li>In actual use, the value for "connid" will be dynamic.</li>
<li>This will be used in a django view.  Replace main() for the django view.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You can't easily do this for third-party libraries (as they won't use adapters, even if you do in your code). However, you can do this using filters, as described in the documentation <a href="https://docs.python.org/3/howto/logging-cookbook.html#using-filters-to-impart-contextual-information" rel="nofollow noreferrer">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I took Vinay Sajip's answer and applied it and got the following.  It appears to be working the way I want it to.  Hopefully this will help someone else as well.  Thanks <a href="https://stackoverflow.com/users/118903/vinay-sajip">Vinay</a>!</p>
<blockquote>
<p>You can't easily do this for third-party libraries (as they won't use adapters, even if you do in your code). However, you can do this using filters, as described in the documentation <a href="https://docs.python.org/3/howto/logging-cookbook.html#using-filters-to-impart-contextual-information" rel="nofollow noreferrer">here</a>.</p>
</blockquote>
<pre><code># myapp.py
import logging
import mylib


class ContextFilter(logging.Filter):
    def __init__(self, filter_name, extra):
        super(ContextFilter, self).__init__(filter_name)
        self.connid = extra

    def filter(self, record):
        record.connid = self.connid
        return True


def main():
    logging.basicConfig(filename='myapp.log',level=logging.INFO,
                        format='%(levelname)s:%(name)s:[%(connid)s] %(message)s')
    logger = logging.getLogger('test')
    cf = ContextFilter(filter_name='add_conn_id', extra='123')
    logger.addFilter(cf)
    logger.info('Started')
    mylib.do_something()
    logger.info('Finished')

if __name__ == '__main__':
    main()
</code></pre>
<p>My log output now looks like this:</p>
<pre><code>INFO:test:[123] Started
INFO:test:[123] Doing something
INFO:test:[123] Finished
</code></pre>
<p>The formatting change </p>
</div>
