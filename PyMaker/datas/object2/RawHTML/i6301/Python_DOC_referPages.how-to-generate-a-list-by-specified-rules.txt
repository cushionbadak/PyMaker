<div class="post-text" itemprop="text">
<p>How to efficiently generate a list by the specified rules?</p>
<h3>Rules:</h3>
<ul>
<li>num 20 occurs with step 2 in the list </li>
<li>num 40 occurs with step 4 in the list </li>
<li>num 60 occurs with step 8 in the list</li>
<li>num 80 occurs with step 16 in the list</li>
</ul>
<p>The end result of a list of length 15 should look like this:</p>
<pre><code>[20,40,20,60,20,40,20,80,20,40,20,60,20,40,20]
</code></pre>
<p>The "step" rules are always a power of something. In this example is power of 2.</p>
<p>So, let's say we have it written as:</p>
<pre><code>rules_power = 2
n1 = 20
n1_step = 2

n2 = 40
n2_step = 4

n3 = 60
n3_step = 8

n4 = 80
n4_step = 16
</code></pre>
<p>How do we efficiently generate such a list?</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you mentioned step rules are always powers, there is a rule to find where each element starts (appears the first time).</p>
<pre><code>[20,40,20,60,20,40,20,80,20,40,20,60,20,40,20]
 0  1     3           7
</code></pre>
<p>As you see each new element<code>(20, 40, 60, 80)</code> appears first where <code>(2 ** i - 1)</code>. Knowing this, one could easily fill the empty list using indices and steps.</p>
<pre><code>length = 15
lst = [0] * length # better use comprehension

for i in xrange(2 ** 0 - 1, length, n1_step):
    lst[i] = n1

for i in xrange(2 ** 1 - 1, length, n2_step):
    lst[i] = n2

for i in xrange(2 ** 2 - 1, length, n3_step):
    lst[i] = n3

for i in xrange(2 ** 3 - 1, length, n4_step):
    lst[i] = n4

print lst
</code></pre>
<p>Replace the power with your other cases, and the <code>print</code>, <code>xrange</code> for python 3 usage.</p>
<p>If you store the values and the steps inside a list, you can do this process with two nested for loops, no matter how many rules are there.</p>
<p>The complexity of this is <code>O(2n), therefore n</code>, should be enough, however because I don't know the original problem, I cannot give more.</p>
</div>
<span class="comment-copy">Welcome to SO. Unfortunately this isn't a discussion forum or a code writing service. Please take the time to read <a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a> and the links it contains.  You should spend some time working your way through <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">the Tutorial</a>, practicing the examples. It will give you an introduction to the tools Python has to offer and you may even start to get ideas for solving your problem.</span>
<span class="comment-copy">I don't think there's an easy way to generalize this kind of list for arbitrary rules the way you seem to want. For the specific rules you give (i.e. power of two steps), it would not be hard to write code to generate a valid list, but other kids of rule combinations can be impossible to support. For instance, if you have two rules that specify step 2, any third rule will be impossible to satisfy (since you need to alternate the two values forever). Similarly, you'll have a problem if you ever have rules that specify steps that are relatively prime, since they'll eventually conflict.</span>
<span class="comment-copy">If you show us what you tried so far, we would be happy to help you. Other than that, I suggest making an empty list first, then fill it using these step values.</span>
<span class="comment-copy">@Blckknght you're right. But what if the "step" rules are not random, but always a power of something? Like in this example is power of 2. I just cannot came up with an efficient generator</span>
<span class="comment-copy">@Un1 There is an efficient way of solving this problem, if you show your effort, I will share it with you. I already gave you a clue.</span>
<span class="comment-copy">Thanks that's a good solution, I couldn't see that the only thing generator need to know is the index of the first occurrence, that's should've been obvious. Nice. Thank you</span>
<span class="comment-copy">Your welcome, please don't forget to follow the questing asking guides next time, for the benefit of the website and therefore yourself.</span>
