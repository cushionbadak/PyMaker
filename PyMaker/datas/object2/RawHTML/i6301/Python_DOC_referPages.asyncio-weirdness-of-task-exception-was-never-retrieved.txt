<div class="post-text" itemprop="text">
<p>Lets assume I have a simple code:</p>
<pre><code>import asyncio


async def exc():
    print(1 / 0)


loop = asyncio.get_event_loop()

loop.create_task(exc())

try:
    loop.run_forever()
except KeyboardInterrupt:
    loop.stop()
    loop.close()
</code></pre>
<p>If I run it, I get error message immediately </p>
<pre><code>Task exception was never retrieved
future: &lt;Task finished coro=&lt;exc() done, defined at qq.py:4&gt; exception=ZeroDivisionError('division by zero',)&gt;
Traceback (most recent call last):
  File "qq.py", line 5, in exc
    print(1 / 0)
ZeroDivisionError: division by zero
</code></pre>
<p>But, if I change <code>loop.create_task(exc())</code> to <code>task = loop.create_task(exc())</code> </p>
<p>I'll get the same error message after click ctrl+c</p>
<p>Why does task assignment change the time of output of error?</p>
</div>
<div class="post-text" itemprop="text">
<p>A Exception in the Task (of underlying <code>asyncio.Future</code> to be precise) can be retrieved with <code>Future.exception()</code>. If it's not retrieved, the exception will be handled at release of the <code>Future</code> object with eventloop's <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.call_exception_handler" rel="noreferrer"><code>call_exception_handler</code></a>. </p>
<p>So, as @dim pointed, while the Task has reference (assigned to variable in your case) it's not going be freed, therefore <code>del task_future</code> won't be called, loop's handler won't be executed either.</p>
</div>
<span class="comment-copy">I believe the exception is raised when there are no references left to the task.</span>
<span class="comment-copy">By the way (although not the question), as pointed out by <a href="https://stackoverflow.com/a/30364143/4138912">this answer</a> to another question, using <code>loop.run_until_complete(asyncio.gather(exc()))</code> is probably the simplest solution.</span>
