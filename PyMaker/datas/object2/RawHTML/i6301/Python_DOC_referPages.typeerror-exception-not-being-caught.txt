<div class="post-text" itemprop="text">
<p>Why is this <code>TypeError</code> not being caught by exception ?</p>
<pre><code>&gt;&gt;&gt; op=None
&gt;&gt;&gt; try:
...     val = op['one']
... except KeyError, TypeError:
...     val = "one"
... 
Traceback (most recent call last):
File "&lt;stdin&gt;", line 2, in &lt;module&gt;
TypeError: 'NoneType' object has no attribute '__getitem__'
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have to enclose the list of exceptions in parens/brackets:</p>
<pre><code>except (KeyError, TypeError):
    #  ^                   ^
    val = "one"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python 2 does not allow specifying multiple exceptions in the same <code>except</code> clause this way. You might expect the <code>,</code> to create a tuple of Exceptions (which would be valid, as <a href="https://stackoverflow.com/a/46939179/712526">bernie demonstrates</a>), but that's not what happens.</p>
<p>Looking at the <a href="https://docs.python.org/2/reference/compound_stmts.html#except" rel="nofollow noreferrer">language spec</a>, we have</p>
<pre><code>"except" [expression [("as" | ",") identifier]] ":"
</code></pre>
<p>where the comma is interchangeable with <code>as</code>.</p>
<p>In other words, the following two except clauses are equivalent</p>
<pre><code>except KeyError, e:
    print "We got a key error!"
except KeyError as e:
    print "We got a key error!"
</code></pre>
<p>This catches a <code>KeyError</code>, and gives it a name of <code>e</code>. So, in your code, you're catching a <code>KeyError</code> and giving it a <em>name</em> of <code>TypeError</code>.</p>
<hr/>
<p>To overcome this ambiguity in Python's grammar, and specify multiple exceptions (kudos to Artyr and Downshift for explaining this), you must use parentheses to force it to be interpreted as a single <em>expression</em> (to be interpreted as a tuple of exceptions), rather than AS <em>expression COMMA identifier</em>.</p>
<pre><code>except (KeyError, TypeError), e:
    pass
except (KeyError, TypeError) as e:
    pass
</code></pre>
<p>Again, the above two expressions are equivalent, and assign the caught exception to the variable <code>e</code>. Notably, the form with a comma <a href="https://docs.python.org/3/reference/compound_stmts.html#except" rel="nofollow noreferrer">was removed in Python 3</a>, making the language grammar a bit less confusing!</p>
<pre><code>"except" [expression ["as" identifier]] ":"
</code></pre>
</div>
<span class="comment-copy">I tried, it didn't help</span>
<span class="comment-copy">@Krish This is definitely the solution to the error, so could you elaborate more on <i>it didn't help</i>?</span>
<span class="comment-copy"><code>&gt;&gt;&gt; op=None &gt;&gt;&gt; try: ...     val = op['one'] ... except (KeyError, TypeError): ...    val = "one" ...  Traceback (most recent call last):   File "&lt;stdin&gt;", line 2, in &lt;module&gt; TypeError: 'NoneType' object has no attribute '__getitem__' &gt;&gt;&gt; </code></span>
<span class="comment-copy">Interesting, the solution works for me. Did you save your file?</span>
<span class="comment-copy">no, I am trying it in the console, just like I pasted above, mnie is Python 2.7.6</span>
<span class="comment-copy">&gt; For an except clause with an expression, that expression is evaluated, and the clause matches the exception if the resulting object is “compatible” with the exception. An object is compatible with an exception if it is the class or a base class of the exception object, <i>or a tuple containing an item compatible with the exception.</i></span>
<span class="comment-copy">but python2 <i>does</i> allow for multiple exceptions "An except clause may name multiple exceptions as a parenthesized tuple" <code>except (RuntimeError, TypeError, NameError):</code> <a href="https://docs.python.org/2.7/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">docs.python.org/2.7/tutorial/errors.html#handling-exceptions</a> In the language spec that's what the comma allows for. You can test it here: <a href="https://repl.it/NOBd" rel="nofollow noreferrer">repl.it/NOBd</a></span>
<span class="comment-copy">@Artyer thanks for explaining that. I was loosing my sanity a bit.</span>
<span class="comment-copy">@downshift Thank you, too! Although, now that I'm seeing double, I'm starting to feel a little loopy, again. ;-)</span>
