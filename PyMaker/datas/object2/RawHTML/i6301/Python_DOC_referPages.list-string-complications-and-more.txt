<div class="post-text" itemprop="text">
<p>What it's supposed to do: take as input an int n, then output a list(or string) of all numbers from 1 to n. </p>
<p>After that, I don't know how to explain this in simple words, so I'll just show you.</p>
<p>All legal moves(12345)=21345,32145.43215,54321</p>
<p>I want a function that when given a list (or string) outputs all the legal moves I can play. I also want to do this again for each of the outputs.</p>
<p>So, it should look like this:</p>
<p>All legal moves(21345)=...</p>
<p>All legal moves(32145)=...</p>
<p>All legal moves(43215)=...</p>
<p>All legal moves(54321)=...</p>
<p>Up to a depth k. I haven't figured out the depth thing yet. And a lot of other things actually.</p>
<p>Here is the code:</p>
<pre><code>    #make the original list
    n = int(input("Size of series: "))
    s=[]
    for i in range(n+1):
    s.append(str(i))

    del s[0]
    print(s)


   #take that and output all legal moves
    print('\n' + 'All legal moves(' + ''.join(s) + '):')

    b=[]
    for i in range (n):
    b.append(str(s[:i+1][::-1]+s[i+1:]))

   del b[0]
   b = ''.join(b)
   print (b)


   #i wanted to do the same thing here but something went wrong
   print('\n' + 'All legal moves:')

   a=[]
   for i in range (n):
   a.append(b[:i+1][::-1]+b[i+1:])

   del a[0]
   b = ','.join(b)
   print(a)
</code></pre>
<p>this is the output for n=5:</p>
<pre><code>  Size of series: 5
  ['1', '2', '3', '4', '5']

  All legal moves(12345):
  ['2', '1', '3', '4', '5'],['3', '2', '1', '4', '5'],['4', '3', '2', '1', 
  '5'],['5', '4', '3', '2', '1']

  All legal moves:
  ["'[2', '1', '3', '4', '5'],['3', '2', '1', '4', '5'],['4', '3', '2', '1', 
  '5'],['5', '4', '3', '2', '1']", "2'[', '1', '3', '4', '5'],['3', '2', 
  '1', '4', '5'],['4', '3', '2', '1', '5'],['5', '4', '3', '2', '1']", 
  "'2'[, '1', '3', '4', '5'],['3', '2', '1', '4', '5'],['4', '3', '2', '1', 
  '5'],['5', '4', '3', '2', '1']", ",'2'[ '1', '3', '4', '5'],['3', '2', 
  '1', '4', '5'],['4', '3', '2', '1', '5'],['5', '4', '3', '2', '1']"]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way to systematically generate all the legal moves is to use a queue. To do the processing, we pop a game state string from the front of the queue, make a list of the legal moves from that state, and append those new states to the end of the queue. The standard library provides <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow noreferrer"><code>collections.deque</code></a> which is ideal for this task.</p>
<p>We also need a set to keep track of states that we've already processed so that we don't needlessly process them again.</p>
<p>In this code, I've chosen 4 for the size to keep the output small. Because <code>maxsize == size</code> it produces all 4! == 24 possible strings.</p>
<pre><code>from collections import deque

def legal_moves(s):
    return [s[i-1::-1] + s[i:] for i in range(2, len(s) + 1)]

size = 4
maxdepth = size

# Game states that we've already generated the moves for
seen = set()

# A queue of states that we haven't generated the moves for
states = deque()

# Build the starting state
start = ''.join([str(i) for i in range(1, size + 1)])

# and put it and its depth on the queue
states.append((start, 0))

# Process the states in the queue
print('current depth legal_moves')
while states:
    # Get a state &amp; depth from the queue
    current_state, current_depth = states.popleft()
    if current_state in seen:
        continue

    # Generate the legal moves for this state
    moves = legal_moves(current_state)
    print(current_state, current_depth, *moves)
    seen.add(current_state)

    # Put each of these states into the queue 
    # if it hasn't already been seen
    next_depth = current_depth + 1
    if next_depth &gt; maxdepth:
        continue

    for state in moves:
        if state not in seen:
            states.append((state, next_depth))
</code></pre>
<p><strong>output</strong></p>
<pre><code>current depth legal_moves
1234 0 2134 3214 4321
2134 1 1234 3124 4312
3214 1 2314 1234 4123
4321 1 3421 2341 1234
3124 2 1324 2134 4213
4312 2 3412 1342 2134
2314 2 3214 1324 4132
4123 2 1423 2143 3214
3421 2 4321 2431 1243
2341 2 3241 4321 1432
1324 3 3124 2314 4231
4213 3 2413 1243 3124
3412 3 4312 1432 2143
1342 3 3142 4312 2431
4132 3 1432 3142 2314
1423 3 4123 2413 3241
2143 3 1243 4123 3412
2431 3 4231 3421 1342
1243 3 2143 4213 3421
3241 3 2341 4231 1423
1432 3 4132 3412 2341
4231 4 2431 3241 1324
2413 4 4213 1423 3142
3142 4 1342 4132 2413
</code></pre>
</div>
<span class="comment-copy">Don't confuse how something is printed with how it is stored.</span>
<span class="comment-copy">You don't need to do that <code>del</code> stuff. You can pass <code>range</code> a <code>start</code> and a <code>stop</code> argument (it also takes a <code>step</code> argument), eg <code>range(1, n+1)</code>. See the docs for details.</span>
