<div class="post-text" itemprop="text">
<p>I have a recursive function that I'm looking to test, however I'm having difficulty limiting the recursive call during testing. For example, below is a simple example of a recursive function that calls a bool_function(n) to check if it should break the recursive loop. </p>
<pre><code>def factorial(n):
  if bool_function(n):
      return 1
  else:
      return n * factorial(n-1)
</code></pre>
<p>What would be the best way to test or mock bool_function(n) so that it is true for the first iteration and false for any call after? </p>
</div>
<div class="post-text" itemprop="text">
<p>You could always implement a class to encapsulate the state and give you more flexibility, here's a sketch:</p>
<pre><code>&gt;&gt;&gt; class MockBoolCheck:
...     def __init__(self, fail_after=0):
...         self.count = 0
...         self.fail_after = fail_after
...     def __call__(self, n):
...         called = self.count
...         self.count += 1
...         return called &lt;= self.fail_after
...
&gt;&gt;&gt; bool_function = MockBoolCheck()
&gt;&gt;&gt; bool_function(42)
True
&gt;&gt;&gt; bool_function(42)
False
&gt;&gt;&gt; bool_function(42)
False
&gt;&gt;&gt; bool_function(42)
False
&gt;&gt;&gt; bool_function(42)
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If, beside other suggested solutions, you really want to mock it, and want to do it yourself (without the mocking libraries) by just replacing the mocked function.</p>
<pre><code># Your code (or module):

def bool_function(n):
    print('REAL bool-function {}'.format(n))
    return n &lt;= 0

def factorial(n):
    print('FACT {}'.format(n))
    if bool_function(n):
        return 1
    else:
        return n * factorial(n-1)

# Mocking code (or module):

def mock_function(n):
    print('MOCK bool-function {}'.format(n))
    global bool_function
    bool_function = bool_func_orig  # restore on the first use
    return False
bool_func_orig = bool_function
bool_function = mock_function  # mock it

# Go run it!
factorial(10)
</code></pre>
<p>If these are two separate modules, then instead of <code>global bool_function</code> &amp; <code>bool_function=...</code> just use the <code>somemodule.bool_function=...</code>.</p>
<p>If you want to use the mocking library, then it depends on which library you use. If that is <code>unittest.mock</code>, then you should play with <code>side_effect=...</code> &amp; <code>wraps=...</code> (see the <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock" rel="nofollow noreferrer">manual</a>). The same approach: mock it, and un-mock it from inside the side effect on the first use.</p>
</div>
<div class="post-text" itemprop="text">
<p>I generally try not to leave debug code around unless I expect to use it regularly, but you could just include a default argument for the sake of debugging to force the execution to follow a particular path.</p>
<pre><code>def factorial(n, debug=False):
  if bool_function(n) or debug:
      return 1
  else:
      return n * factorial(n-1)
</code></pre>
<p>This naturally implies that you're also externally testing <code>bool_function()</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Just pass the function as an argument. If function is None you can apply some default behavior if that is desired. </p>
<p>This is a common approach used in <code>queries to iterables</code> (e.g. Django queries or Peewee queries) in most of languages. </p>
<p>A function that returns boolean is usually called a <a href="https://en.wikipedia.org/wiki/Predicate_(mathematical_logic)" rel="nofollow noreferrer">predicate</a></p>
<pre><code>def factorial(n, predicate=None):
  if not predicate:
     predicate = lambda x: x &gt; 2

  if predicate(n):
      return 1
  else:
      return n * factorial(n-1)
</code></pre>
</div>
<span class="comment-copy">Are you using unittest?</span>
<span class="comment-copy">Unless <code>bool_function</code> has side effects why bother. Can't you just test with <code>n</code> that you know hits a <code>True</code>?</span>
<span class="comment-copy">I strongly recommend not to pass any <code>debug</code> arguments. If function cannot be tested - it means that design is bad, adding one more workaround does not guarantee that function itself works.</span>
<span class="comment-copy">@TarasMatsyk perhaps this is the result of an over-simplified example, but I believe the greater simplicity and readability outweighs the modularity in this case. Particularly if the predicate will otherwise only ever be a single function, this approach both simplifies the reading of the code as well as the execution.</span>
<span class="comment-copy">agree from this perspective</span>
