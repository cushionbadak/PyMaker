<div class="post-text" itemprop="text">
<blockquote>
<p>I want to check multiple conditions in an if-statement</p>
</blockquote>
<pre><code>if a:
    # do something
</code></pre>
<p>a in this case is true for multiple cases a==1, a==2, a==3</p>
<p>instead of writing </p>
<pre><code>if a == 1 or a == 2 or a == 3:
    # do something
</code></pre>
<p>I am trying something like this</p>
<pre><code>if a == condition for condition in [1, 2, 3]:
    # do something
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just to add to other answers, your best bet would definately be this logic:</p>
<pre><code>if a in set([1, 2, 3]):
    #do something
</code></pre>
<p>or even better</p>
<pre><code> if a in {1, 2, 3}:
    #do something
</code></pre>
<p>The thing I want to underline here is the fact that you should use a <code>set</code> for that kind of situation. Lookups will be more efficient.</p>
<p>Also, python <a href="https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset" rel="nofollow noreferrer">documentation</a> recommend that.</p>
<blockquote>
<p>Common uses include membership testing, removing duplicates from a
  sequence, and computing mathematical operations such as intersection,
  union, difference, and symmetric difference</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You are kind of on the right path. What was required is :</p>
<pre><code>if a in [1,2,3]:
   do something
</code></pre>
<p>As a substitution for</p>
<pre><code>if a == 1 or a == 2 or a ==3:
</code></pre>
<p>As <strong>jonrsharpe</strong> rightly pointed out, maybe you were trying </p>
<pre><code>if any( a==condition for condition in [1,2,3] ):
</code></pre>
<p>which too works the same way.</p>
</div>
<div class="post-text" itemprop="text">
<p>The simplest thing to write is <code>if a in (1, 2, 3)</code></p>
<p>What your are trying to write could be written as</p>
<pre><code>if any(a == condition for condition in [1, 2, 3])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>The truth value of an array with more than one element is ambiguous</code> looks like a numpy error message.  If <code>a</code> is a numpy ndarray and b contains the values you are testing for, you can do it like this.</p>
<pre><code>import numpy as np
a = np.arange(6)
b = np.array([6,2,9])
if np.any(a == b[:, None]):
    ...
</code></pre>
<p>or </p>
<pre><code>np.any(a[:,None] == b)
</code></pre>
<p>Which makes use of <a href="https://docs.scipy.org/doc/numpy-1.13.0/user/basics.broadcasting.html" rel="nofollow noreferrer">broadcasting</a>.</p>
<hr/>
<p>Your exception can be reproduced using <em>my</em> arrays ...</p>
<pre><code>&gt;&gt;&gt; if a == b[:, None]:
    pass

Traceback (most recent call last):
  File "&lt;pyshell#281&gt;", line 1, in &lt;module&gt;
    if a == b[:, None]:
ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy"><code>if any(a == condition for condition in [1, 2, 3]):</code>? But your error doesn't come from that code alone.</span>
<span class="comment-copy"><code>The truth value of an array with more than one element is ambiguous</code> sounds like a numpy error message.  Have you represented your data correctly?</span>
<span class="comment-copy">@jonrsharpe: that should be <code>if a in [1, 2, 3]:</code></span>
<span class="comment-copy">If your problem is solved by an answer, please accept it. But if you had a different problem, this is unlikely to be very useful to others.</span>
<span class="comment-copy">I disagree. Neither the question nor the accepted answer mention the correct way to solve the problem in the title. Could be misleading to beginners.</span>
<span class="comment-copy">Your first construction would surely be <i>significantly</i> slower: <code>set([1, 2, 3])</code> than simply checking for membership in <code>[1,2,3]</code> because it has to <i>build the set</i> every time. Use the set-literal! Then the compiler can optimize! Indeed, the difference between <code>x in [1,2,3]</code> and <code>x in set([1,2,3])</code> is <i>much</i> larger than the difference between <code>x in [1,2,3]</code> and <code>x in {1,2,3}</code></span>
<span class="comment-copy">This is why I proposed a second solution. As I said, my goal was to give him an insight on how to easily optimize the solution. But you have a good point, I will update .</span>
<span class="comment-copy">Certainly not standard python as <code>if a == condition for condition in [1, 2, 3]</code> is invalid syntax</span>
<span class="comment-copy">Indeed my Problem was, that my "a" had multiple values, which I wasn't aware of</span>
<span class="comment-copy">@vanilla - when something unexpected like that happens it often helps to inspect the operands.  One way to do that is to <a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">catch the exception</a> and print stuff in the <code>except</code> suite. Another strategy might be to <a href="https://stackoverflow.com/search?q=ValueError%3A+The+truth+value+of+an+array+with+more+than+one+element+is+ambiguous.+Use+a.any()+or+a.all()">search using the error message</a>.</span>
<span class="comment-copy">@NickA - can you explain?</span>
<span class="comment-copy">@wwii you said the error message looks like a numpy error, I was merely saying that it couldnt be standard python error as the code provided by OP just gives a syntax error</span>
