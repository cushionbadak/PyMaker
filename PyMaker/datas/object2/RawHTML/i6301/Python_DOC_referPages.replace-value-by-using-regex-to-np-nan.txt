<div class="post-text" itemprop="text">
<p>I have a dataframe as below : </p>
<pre><code>data1 = {"first":["alice", "bob", "carol"],
         "last_huge":["foo", "bar", "baz"]}
df = pd.DataFrame(data1)
</code></pre>
<p>For example , I want to replace all character 'o' to 'a':</p>
<p>Then I do </p>
<pre><code>df.replace({"o":"a"},regex=True)
Out[668]: 
   first last
0  alice  faa
1    bab  bar
2  caral  baz
</code></pre>
<p>It give back what I need .</p>
<p><strong>However</strong>, when I want to replace 'o' to <code>np.nan</code> , It will change entire string to <code>np.nan</code>. <strong><em>Is there any explanation from pandas' document?</em></strong> I can find some information through the <a href="https://github.com/pandas-dev/pandas/blob/v0.20.3/pandas/core/generic.py#L3678-L3926" rel="nofollow noreferrer">source code</a> .</p>
<p>More Information:(It will change whole string to <code>np.nan</code>) </p>
<pre><code>df.replace({"o":np.nan},regex=True)
Out[669]: 
   first last
0  alice  NaN
1    NaN  bar
2    NaN  baz
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/a/17534682/1240268">NaN is consistently used as a placeholder for missing</a>, when replacing part of a string with "missing" it can only mean the entire entry is compromised. I've heard this called NaN pollution (or similar, will see if I can find some references), in that if NaN touches the data is compromised.</p>
<p>That said, that's not always the case:</p>
<pre><code>In [11]: s = pd.Series([1, 2, np.nan, 4])

In [12]: s.sum()
Out[12]: 7.0

In [13]: s.sum(skipna=False)
Out[13]: nan
</code></pre>
<p>In some languages you'll see skipna=False as the default behaviour, some vehemently argue that NaN should <em>always</em> pollute all data. Pandas takes a somewhat more pragmatic approach...</p>
<p>The real question is what do you expect it to do in the case of NaN?</p>
</div>
<div class="post-text" itemprop="text">
<p>In python there are <a href="https://docs.python.org/3/library/cmath.html?highlight=nan#cmath.nan" rel="nofollow noreferrer">cmath.nan</a> and <a href="https://docs.python.org/3/library/math.html?highlight=nan#math.nan" rel="nofollow noreferrer">math.nan</a>.</p>
<blockquote>
<p>CPython implementation detail: The math module consists mostly of thin wrappers around the platform C math library functions. Behavior in exceptional cases follows Annex F of the C99 standard where appropriate. The current implementation will raise ValueError for invalid operations like sqrt(-1.0) or log(0.0) (where C99 Annex F recommends signaling invalid operation or divide-by-zero), and OverflowError for results that overflow (for example, exp(1000.0)). A NaN will not be returned from any of the functions above unless one
  or more of the input arguments was a NaN; in that case, most functions
  will return a NaN, but (again following C99 Annex F) there are some
  exceptions to this rule, for example pow(float('nan'), 0.0) or
  hypot(float('nan'), float('inf')).</p>
</blockquote>
<p>In short word, when your input arguments have <code>NaN</code> it would return <code>NaN</code></p>
<p><a href="https://docs.python.org/3/library/math.html?highlight=nan#math.nan" rel="nofollow noreferrer">And also:</a></p>
<blockquote>
<p>Note that Python makes no effort to distinguish signaling NaNs from
  quiet NaNs, and behavior for signaling NaNs remains unspecified.
  Typical behavior is to treat all NaNs as though they were quiet.</p>
</blockquote>
</div>
<span class="comment-copy">What's you desire result?</span>
<span class="comment-copy">@ShiheZhang there is no desire result , just why replace + regex have this kind of behavior, I can not find any document related to this , only way is to reading thru the source code.</span>
<span class="comment-copy">What version of <code>pandas</code> are you on? This actually happens with any non-string object, as far as I can tell, try passing it <code>object()</code></span>
<span class="comment-copy">@juanpa.arrivillaga my pandas pd.__version__ Out[692]: '0.20.3'</span>
<span class="comment-copy">you will need to use <code>for index, row in df.iterrows():</code> to loop through the df and something like` if(s.contains("0"))` to check if it does. then update the whole value rather than the character</span>
<span class="comment-copy">Just like what I am doing with R <code>sum(.,na.rm=T)</code></span>
<span class="comment-copy">For me , I just do not know why they do not give back any error, just replace entire string to <code>np.nan</code> ,at least should give back some warning right ...</span>
<span class="comment-copy">Because in python, it's the rightful result, don't need to raise a warning.</span>
<span class="comment-copy">thank you learn it</span>
