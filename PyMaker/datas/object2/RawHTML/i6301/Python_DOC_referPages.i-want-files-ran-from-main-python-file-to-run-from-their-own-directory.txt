<div class="post-text" itemprop="text">
<p>Example:</p>
<p>I have my main file, main.py with this code:</p>
<pre><code>import os
os.popen("start folder/subfile.py")
</code></pre>
<p>Then i have my other file, subfile.py with this code:</p>
<pre><code>file = open("test.txt", "w")
file.close()
</code></pre>
<p>I want my subfile.py to create the test.txt file in its own folder, but it creates it in the main.py's folder.</p>
<p>So my question is, how do i make the subfile.py run from it own folder even though it's started from main.py</p>
<p>main.py folder : C:/users/user/Desktop</p>
<p>subfile.py folder: C:/users/user/Desktop/folder</p>
</div>
<div class="post-text" itemprop="text">
<p>In <code>subfile.py</code>, change the working directory (<a href="https://docs.python.org/3/library/os.html#os.chdir" rel="nofollow noreferrer"><code>os.chdir</code></a>) to the directory that contains the <code>subfile.py</code> <strong>file</strong>:</p>
<pre><code>import os
os.chdir(os.path.dirname(__file__))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use subprocess instead which has that built in:</p>
<pre><code>subprocess.Popen(sys.executable + ' subfile.py', cwd=os.path.dirname(__file__) + '/folder')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try This :</p>
<pre><code>import os
import inspect

your_current_folder_path = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
your_current_file_path = os.path.join(your_current_folder_path, "test.txt")

print(your_current_folder_path)
print(your_current_file_path)


with open(your_current_file_path, "w") as make_file:
    make_file.write("")

print("Done.")
</code></pre>
<p>Another way: you can change your working directory by os.chdir("your_folder_directory") function.</p>
<pre><code>os.chdir(r"C:/users/user/Desktop/folder")
</code></pre>
</div>
<span class="comment-copy">What is the purpose of spawning a new process rather than importing your second py file as a module and calling its functions directly?</span>
<span class="comment-copy">In general the working directory will not be the directory of main.py. It's whatever the parent process set as the working directory, and no properly written program should rely on the initial working directory to find any of its private resources, such as finding your subfile.py script. Also, don't use <code>os.popen</code>. There's no reason to run this command via the shell. Use <code>subprocess.Popen</code>.</span>
<span class="comment-copy">@Code-Apprentice Beceuase in the real code the subfile is located in another directory and temporarily deletes the folder with "main.py", and it cant delete itself as far as i know.</span>
<span class="comment-copy">@Lojas why do you delete the folder with main.py?</span>
<span class="comment-copy">@Code-Apprentice Because in my real situation, the main.py is in the folder  and the subfile.py is outside of it, it was just easier to explain it like this.</span>
<span class="comment-copy">The main script could be run with any working directory. You absolutely must get the path of main.py via <code>__file__</code>. Also, what if the py.exe launcher isn't installed? It's safer to run this via <code>sys.executable</code>.</span>
