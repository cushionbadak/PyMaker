<div class="post-text" itemprop="text">
<p>Let us Assume, I have a key value pair in python, such as the following.</p>
<pre><code>a = {'44': [0, 0, 1, 0, 1], '43': [0, 0, 1, 0, 0]}
</code></pre>
<p>now I want to combine these values with:</p>
<pre><code>b = {'44': ['test1'], '43': ['test2']}
</code></pre>
<p>How can I do the output below in python?</p>
<pre><code>c = {'44': [0, 0, 1, 0, 1, 'test1], '43': [0, 0, 1, 0, 0,'test2']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a dictionary comprehension like this (as of Python 2.7+):</p>
<pre><code>c = {k: a[k] + b[k] for k in a}
</code></pre>
<p>This assumes that the same keys exist in both <code>a</code> and <code>b</code>.
If that's not the case, it's possible to work around that if necessary.</p>
</div>
<div class="post-text" itemprop="text">
<p>The other answers are based on the assumption that all dictionaries involved have all the same keys. If you aren't sure that this is the case, I recommend using <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a>:</p>
<pre><code>from collections import defaultdict

result = defaultdict(list)

for d in (a,b):
    for key, value in d.items():
        result[key].append(value)
</code></pre>
<p>Additionally, this solution works for any number of dictionaries. Simply add all dictionaries you want to merge, to the tuple <code>(a,b)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip()</code></a> with dictionary comprehension to achieve that in one-line code like below:</p>
<pre><code>c = {k: v for k, v in zip(a.keys(), (v1 + v2 for v1, v2 in zip(a.values(), b.values())))}
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>&gt;&gt;&gt; c
{'44': [0, 0, 1, 0, 1, 'test1'], '43': [0, 0, 1, 0, 0, 'test2']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First thing coming to my mind is :</p>
<pre><code>c = {k: a.get(k, []) + b.get(k, []) for k in {*a.keys(), *b.keys()}}
</code></pre>
<p>This should work even if some keys are missing in one dict. I think this only works on the newer versions of python 3 though.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>a = {'44': [0, 0, 1, 0, 1], '43': [0, 0, 1, 0, 0]}
b = {'44': ['test1'], '43': ['test2']}
final_data = {c:a[c]+b[c] for c, d in a.items()}
</code></pre>
<p>Output:</p>
<pre><code>{'44': [0, 0, 1, 0, 1, 'test1'], '43': [0, 0, 1, 0, 0, 'test2']}
</code></pre>
<p>If you need to generate the "test1", "test2" values, etc, you can try this:</p>
<pre><code>l1 = {}
for c, d in a.items():
   if d not in l1.values(): 
       l1["test{}".format(len(l1)+1)] = d

print(l1)
</code></pre>
<p>Output:</p>
<pre><code>{'test1': [0, 0, 1, 0, 1], 'test2': [0, 0, 1, 0, 0]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = {'44': [0, 0, 1, 0, 1], '43': [0, 0, 1, 0, 0]}
b = {'44': ['test1'], '43': ['test2']}

c = {}

for v in a:
    c[v] = a[v]+b[v]
</code></pre>
<p>Output:</p>
<pre><code>{'44': [0, 0, 1, 0, 1, 'test1'], '43': [0, 0, 1, 0, 0, 'test2']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I am assuming here that <code>a</code> and <code>b</code> contain the same keys. Then you can simply use the dict comprehension (<a href="https://stackoverflow.com/questions/1747817/create-a-dictionary-with-list-comprehension-in-python">Create a dictionary with list comprehension in Python</a>):</p>
<pre><code>c = {x: a[x] + b[x] for x in a}
</code></pre>
<p>If you don't know whether <code>b</code> has the same keys, you can also test for that:</p>
<pre><code>c = {x: a[x] + b[x] for x in a if x in b}
</code></pre>
</div>
<span class="comment-copy">Possible repetition of this <a href="https://stackoverflow.com/questions/38987/how-to-merge-two-dictionaries-in-a-single-expression" title="how to merge two dictionaries in a single expression">stackoverflow.com/questions/38987/â€¦</a></span>
