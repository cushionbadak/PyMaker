<div class="post-text" itemprop="text">
<p>The problem:
There is a string with conditions and I want to replace an operator with other operator at random.</p>
<p>The possible solution:</p>
<pre><code>import re
import random

s = 'operand1 &gt; 273 and operand2 &lt; 459 or operand3 == 42 and operand4 &lt; 100'

# create list of operators with random replacement
repl = random.choice(['&lt;','&gt;','==','!='])
operators = re.findall(r'[&lt;&gt;]|==|!=', s)
operators[random.choice(range(len(operators)))] = repl

# create list of other parts of the string
the_rest = re.split(r'[&lt;&gt;]|==|!=', s)

# recombine a string
s_new = the_rest[0]
for operator, operand in zip(operators, the_rest[1:]):
    s_new += operator + operand
print(s_new)
</code></pre>
<p>It seems a little vague. Could you offer a better way to do it?</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's much simpler with <code>re.sub()</code> function (with callback <em>replacement</em> function called for every non-overlapping occurrence of <em>pattern</em>):</p>
<pre><code>import random, re

s = 'operand1 &gt; 273 and operand2 &lt; 459 or operand3 == 42 and operand4 &lt; 100'
operators = ['&lt;','&gt;','==','!=']
s_new = re.sub(r'[&lt;&gt;]|==|!=', lambda op: random.choice(operators), s)

print(s_new)
</code></pre>
<p>An exemplary output:</p>
<pre><code>operand1 != 273 and operand2 == 459 or operand3 &gt; 42 and operand4 == 100
</code></pre>
<p><a href="https://docs.python.org/3/library/re.html?highlight=re#re.sub" rel="nofollow noreferrer">https://docs.python.org/3/library/re.html?highlight=re#re.sub</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import random
s = 'operand1 &gt; 273 and operand2 &lt; 459 or operand3 == 42 and operand4 &lt; 100'
operators = ['&lt;', '&gt;', '==', '!=']

print(" ".join([random.choice(operators) if x in operators else x for x in s.split()]))
</code></pre>
<p>Edit 1. Well the assumption I made that the OP wanted all the operators replaced was wrong.</p>
<p><code>s.split()</code> makes a list out of the string words, excludes spaces.</p>
<p>A list is created from the original string with an operator chosen at random to replace any given operator in it.</p>
<p><code>" ".join</code> turns the list to a new string including spaces in between the lists elements.</p>
<p>Edit 2. I came back to it during my coffee break. This changes one operator.</p>
<pre><code>import random

s = 'operand1 &gt; 273 and operand2 &lt; 459 or operand3 == 42 and operand4 &lt; 100'
print(s)
operators = ['&lt;', '&gt;', '==', '!=']

# make a list out of the string words
s_split = s.split()

# make a list of tuples (position, operator) form the list containg the string words
occurances = [(idx, x) for idx, x in enumerate(s_split) if x in operators]

# pick a random operator form the list to change
occurance_to_change = random.choice(occurances)

# pick a random operator to replace the one in the sentence and make sure they are different
operator_to_place = random.choice(operators)
while operator_to_place == occurance_to_change[1]:
    operator_to_place = random.choice(operators)

# replace the operator
s_split[occurance_to_change[0]] = operator_to_place

# put the resulting list back together to form a string
s_result = " ".join(s_split)
print(s_result)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Replace random occurrence of an operator chosen randomly with a different operator chosen at random</p>
<pre><code>import random

# returns a random operator
def ran(): 
    repl = random.choice(['&lt;','&gt;','==','!='])
    return repl

# replaces cth occurrence of a with b in str
def ran_repl(str, a, b, c): 
    ls = [i for i in range(len(str) - len(a)+1) if str[i:i+len(a)]==a]
    str = list(str)
    str[ls[c-1]:ls[c-1]+len(a)] = b
    return ''.join(str)

s = 'operand1 &gt; 273 and operand2 &lt; 459 or operand3 == 42 and operand4 &lt; 100'
print(s)

x = ran()
while x not in s:
    x = ran()

y = ran()
while y == x:
    y = ran()

l = s.count(x)
# if multiple occurrence of x in s, replace a random occurrence
if l &gt; 1:
    n = random.randint(1,l)
    s = ran_repl(s,x,y,n)
else:
    s = s.replace(x,y)
print(s)
</code></pre>
<p>Output</p>
<pre><code>operand1 &gt; 273 and operand2 &lt; 459 or operand3 == 42 and operand4 &lt; 100
operand1 &gt; 273 and operand2 &lt; 459 or operand3 == 42 and operand4 == 100 
</code></pre>
</div>
<span class="comment-copy">It doesn't matter, we could easily change the list and patterns.</span>
<span class="comment-copy">you want all occurrences of the operator to be replaced? also, you want the replacement to be an operator which is not present in <code>s</code>?</span>
<span class="comment-copy">No, just only one operator in 's' at random. In my example I need to replace ('&gt;' or '&lt;' or '==' or '&lt;'). The 's' could contain random set of operators, but all possible operators are defined a priory. So yes, replacement could be any operator.</span>
<span class="comment-copy">Good! But I want to replace only one of the operators, not all. It seems that we need adjust a little bit lambda: lambda op: op.group() if random.random() &lt; X else random.choice(operators), where X is a probability of change exactly one of the operators. Many thanks for this solution!</span>
<span class="comment-copy">@Roman I think this is not what OP is looking for. &lt;br/&gt; ip: <code>operand1 &gt; 273 and operand2 &lt; 459 or operand3 == 42 and operand4 &lt; 100</code>   op: <code>operand1 == 273 and operand2 == 459 or operand3 &gt; 42 and operand4 &lt; 100</code>  in this example, it replaced <code>&gt;</code> with <code>==</code> and <code>==</code> with <code>&gt;</code>.</span>
