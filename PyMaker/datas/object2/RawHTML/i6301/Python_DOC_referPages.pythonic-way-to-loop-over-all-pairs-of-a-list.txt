<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/942543/operation-on-every-pair-of-element-in-a-list">Operation on every pair of element in a list</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I was really surprised that I couldn't find this anywhere. 
In most languages, going through all possible pairs in a list looks something like this:</p>
<pre><code>for (i = 0; i &lt; length; i++) 
    for (j = i + 1; j &lt; length; j++)
         do stuff
</code></pre>
<p>But in python, you would have to do:</p>
<pre><code>for i in range (len(clusters)):
    for j in range (i+1, len(clusters)):
        do stuff
</code></pre>
<p>I feel like that isn't very pythonic. What's the best way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">combinations()</a>:</p>
<pre><code>from itertools import combinations
combinations('ABCD', 2) --&gt; AB AC AD BC BD CD
</code></pre>
<p>Python discourages "C-style" loops, because you actually hardly need them if you adapt to it. You can do it quite easily using <code>emumerate()</code> to still get the index, and some slicing, using pure python:</p>
<pre><code>lst = 'ABCD'
for index, first in enumerate(lst):
    for second in lst[index+1:]:
        print(first, second)
</code></pre>
</div>
<span class="comment-copy">I'd do it this way: <code>[(i,j) for i in xrange(1,len(mylist)) for j in xrange(i,len(mylist))]</code> You could also call some function <code>foo(i,j)</code> of course.</span>
