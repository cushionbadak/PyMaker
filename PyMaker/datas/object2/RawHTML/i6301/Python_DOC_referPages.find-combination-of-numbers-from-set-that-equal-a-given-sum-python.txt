<div class="post-text" itemprop="text">
<p><strong>Edit:</strong>
I know this question has been asked a million times, but I can't seem to find anything that works for my specific scenario.  For context purposes, I'm running Python 3.6 on a Windows OS.</p>
<p>I've tried the following code:</p>
<pre><code>def subset_sum(numbers, target, partial=[]):
    s = sum(partial)

    # check if the partial sum is equals to target
    if s == target:
        print(f"sum({partial})={target}")
        #print("sum({})={}".format(partial, target))
    if s == target:
        return  # if we reach the number why bother to continue

    for i in range(len(numbers)):
        n = numbers[i]
        #remaining = numbers[:i] + numbers[i+1:]
        remaining = numbers[i+1:]
        subset_sum(remaining, target, partial + [n])

s= [-765143.910000006, -14522903.45, -185360.52, -161161.559999994, -31947.78, 167450, 47715.46, -1725.24, -1532.91, 338381.23, -40962.19, -321.869999999997, -28215.17, -66345.71, 13063.28, -389.37, 6215992.30000001, 2193804.53000001, -458374.52, 106792.609999979, -335194.01, 203687.94, 91147.0500000003, -18.9500000000004, -19.1200000000016, -2.31494823310641]

k= [-2191.62999999806, 5481451.91, -17941.98, 166.719999999996, -2.72848410531878, -3.42659234320308, -13109322.84, -5320290.35000001, -977974.9, 2224562.69999999, 404360.300000002, 579934.88, 1131275.75, 3889264.3, 3364573.99000001, 5225874.59, 2191.62999999806, 176248.27, 19925.25, 2090.84, 11461.32, 3457.83, 4655.76, -17929.46, 449.48, 2187.61, 3084.35, 176274, 48909.78, 55.43]

x= [14795.41, 6497.05, 324.6, 5589.19, 2224.45, 5571.92, 3575.24, 3041.33, 4658.22, 6244.92, 433.59, 2146.55, 1489, 28686.93, 205, 2267.76, 1532.91, -12539.19, 46221.03, 9959.25, 20175.14, 735, 9449, 26880, 426.12, 1355.18, 220.48, 695.88, -389.99, -1.12, -37.56]

v= [-1.96999999999248, 1.58761892521397, -2.1600499167107, -2791.41999999999, 606814.85, -19.1200000000016, -1.49999999999995, -54.3300000000086, 34608.19, -661601.97, 3149949.45, 32247.78, 350.64, 328574.84, 42461.52, 1273, 6635.21, 504, -3100.27, 9868.07, 148179.28, 29205.46, -206.65, -552]

y = [s+k+x+v]

if __name__ == "__main__":
    subset_sum(y, -765143.910000006)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This line</p>
<pre><code>print(sum(%s)=%s) % (partial, target)
</code></pre>
<p>is wrong because you are using patterns of string formatting for things that are not strings. You probably wanted to do</p>
<pre><code>print("sum(%s)=%s" % (partial, target))
</code></pre>
<p>and still this is old syntax, you'd prefer <a href="https://docs.python.org/3/library/string.html#format-examples" rel="nofollow noreferrer">the new syntax</a></p>
<pre><code>print("sum({})={}".format(partial, target))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Concerning SyntaxError: you used formatting in incorrect way. More on that on <a href="https://pyformat.info" rel="nofollow noreferrer">PyFormat</a> site, just quick solution:</p>
<pre><code>print("sum(%s) =%s" % (partial, target)) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your code doesn't work because </p>
<pre><code>print(sum(%s)=%s) % (partial, target)
</code></pre>
<p>Should be</p>
<pre><code>print "sum(%s)=%s" %(partial, target)
</code></pre>
<p>Furthermore you need to indent the line after your main declaration</p>
<pre><code>if __name__ == "__main__":
subset_sum([3,9,8,4,5,7,10],15)
</code></pre>
<p>Should be this</p>
<pre><code>if __name__ == "__main__":
  subset_sum([3,9,8,4,5,7,10],15)
</code></pre>
<p>Also your code does not work completely as subset_sum([3,9,8,4,5,7,10,-9],1) does not return a result even though it should return [10,-9]=1.</p>
<p>Furthermore, to improve on your code I'd recommend using memoization to avoid having to calculate the same subset more than once if you are doing this over large sets of numbers.</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe this code works:</p>
<pre><code>def subset_sum(numbers, target, partial=[]):
    s = sum(partial)
    if len(numbers) == 0:
        return
    elif s == target:
        print("sum({})={}".format(partial, target))
        return
    else:
        for i in range(len(numbers)):
            n = numbers[i]
            remaining = numbers[:i] + numbers[i+1:]
            subset_sum(remaining, target, partial + [n])

y = [-15, 5, 10, -10, 3, 7, -4, -2]

if __name__ == "__main__":
    subset_sum(y, 6)
</code></pre>
<p>It can be extremely slow as the number of possible <a href="https://en.wikipedia.org/wiki/Combination" rel="nofollow noreferrer">combinations</a> increases, which you can count mathematically and grows astronomically, so you feel like it is never going to end.</p>
<p>N.B. I don't have Python 3.6 so the formatting will remain old-school here.</p>
<p>Edit: Another note is that you should <a href="https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html" rel="nofollow noreferrer">never use equality between floats</a>, like in your termination condition with the new input you propose. You can have a look at <a href="https://stackoverflow.com/questions/5595425/what-is-the-best-way-to-compare-floats-for-almost-equality-in-python">this answer</a> for inspiration for a <code>if isclose(s, target)</code> condition.</p>
</div>
<span class="comment-copy">Replace source line 5 with <code>print("(sum(%s)=%s)" % (partial, target))</code></span>
<span class="comment-copy">@L3viathan This is Python3, so that should be <code>print("sum(%s)=%s" % (partial, target))</code></span>
<span class="comment-copy">@PatrickHaugh Oh, I didn't see the comment at the top.</span>
<span class="comment-copy">For the second question, the best for you would be to use this occasion to write a unit test! <a href="https://docs.python.org/3/library/unittest.html" rel="nofollow noreferrer">docs.python.org/3/library/unittest.html</a></span>
<span class="comment-copy"><code>y = [s+k+x+v]</code> is a list of lists, you want instead <code>y = s+k+x+v</code>. To cast it to int, use <code>y = [int(x) for x in s+k+x+v]</code>.</span>
<span class="comment-copy">And since the OP is using Python 3.6, they can make it even more modern &amp; more compact (and faster), using an f-string: <code>print(f"sum({partial})={target}")</code></span>
<span class="comment-copy">Oh, nice, I did not know that!</span>
<span class="comment-copy">Thanks, guys - it worked!  I do have a follow up question, though:  it seems when I try including negative numbers in the set, the script fails.  How would I be able to include negative numbers in the set to also be tested in combination with positive and/or negative numbers also in the set to equal a certain sum?  For example, if I have (10, -5, -9, 8, -2) and I want the combinations that equal 5, one of the solutions would be 10, -5.  Thank you!</span>
<span class="comment-copy">Shouldn't <code>remaining</code> be instead <code>numbers[:i] + numbers[i+1:]</code> ? It seems to me that you are missing combinations. Also <code>partial</code> could be just an int, you don't need to concatenate to a list, just accumulate the result of the sum.</span>
<span class="comment-copy">The end condition (<code>if s &gt;= target</code>) is also not suiting well as a condition to reach a negative target. In particular, the first sum (of <code>partial = []</code>, so 0), will terminate your algorithm with any negative target.</span>
<span class="comment-copy">Hi Ranger,  Thanks for the input!  Do you know what changes I could make to make the script work with negative numbers as well (like the example you provided above)?</span>
<span class="comment-copy">It looks like your logic is working now. That being said you have to change  y = [s+k+x+v] to y = s+k+x+v</span>
<span class="comment-copy">@KevinA626 You tried to edit my question to ask yours, SO does not work like that. Add a comment instead. Your mistake is <code>y = int[s+k+x+v]</code>, which has 2 errors: first <code>[s+k+x+v]</code> is a list of lists, not a list; second, this is not how you cast to int in Python. use <code>map(int, somelist)</code> instead, or <code>[int(x) for x in somelist]</code>.</span>
<span class="comment-copy">My apologies!  New to this.</span>
