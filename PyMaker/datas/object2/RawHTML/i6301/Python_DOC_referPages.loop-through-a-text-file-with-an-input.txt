<div class="post-text" itemprop="text">
<p>I have a text file set out in this layout:</p>
<blockquote>
<p>Greg,Computer Science,Hard,5    </p>
<p>Alex,Computer Science,Medium,2</p>
<p>Fiona,Maths,Easy,0</p>
<p>Cassie,Maths,Medium,5 </p>
<p>Alex,Maths,Medium,1</p>
</blockquote>
<p>In my program I want the user to be able to choose a certain name and see their results. My code for this looks like this:</p>
<pre><code>name = input("Enter name: ")
for each in file:
    each = each.split(",")
    realName = each[0]
    subject = each[1]
    difficulty = each[2]
    score = each[3]
    if name == realName:
        print(subject, difficulty, score)
        break
else:
    print()
    print("Invalid name.")
    name = input("Re-enter your name: ")
</code></pre>
<p>A few things are wrong with it though and I can't figure out what to do:</p>
<ol>
<li>If the user entered "Alex", only one of his results will be displayed.</li>
<li>If a wrong name is inputted once, every other name inputted will return as "Invalid".</li>
<li>If the correct name is inputted and the results are displayed, the program will continue to ask for a name.</li>
</ol>
<p>Does anybody have any solutions to these problems?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're going to query your file repeatedly, I'd recommend pre-loading your data once into a dictionary, and printing data as and when needed. Something like this:</p>
<pre><code>data = {}
with open('file.txt', 'r') as file:
    for line in file:
        realName, subject, difficulty, score = each.split(',') 
        data.setdefault(realName, []).append((subject, difficulty, score))

while True:
    name = input('&gt;&gt;&gt; ')
    data.get(name, 'Invalid Name')
</code></pre>
<p>This solves problems one and two. If you just want to break after the first valid name is input, you can query the return value of <code>dict.get</code>:</p>
<pre><code>while True:
    name = input('&gt;&gt;&gt; ')
    result = data.get(name)
    if result:
        print(result)
        break

    print('Invalid name')
</code></pre>
<p>This solves problem three.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're better off using the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><code>csv</code> module</a> since your file syntax is simple CSV.</p>
<p>Then you can loop through the rows (each row will be an array of values).</p>
<pre><code>import csv

def parse_csv_file(csv_file, operation, value, index):
    with open(csv_file, newline='') as file:
        reader = csv.reader(file, delimiter=',',
                            quotechar='|')
        return operation(reader,
                        value, index)


def find_first_row(csv_reader, value, index):
    for row in csv_reader:
        if row[index] == value:
            return row
    return None


def main():

    query = input('Enter a name: ')

    result = parse_csv_file('file.csv',
                            find_first_row,
                            query, 0)

    if result:
        print(result)
    else:
        print('Nothing found!')

main()
</code></pre>
</div>
<span class="comment-copy">I'm quite new to python so I'm not sure what line 5 is saying. Also when I copied that into my program and ran it, it gave <code>AttributeError: 'list' object has no attribute 'setdefault'</code>.</span>
<span class="comment-copy">@GregD'Silva Ah, shucks. It should've been <code>{}</code>, not <code>[]</code>. See edit.</span>
<span class="comment-copy">@GregD'Silva If your question was answered, please <a href="https://stackoverflow.com/help/someone-answers">accept an answer</a>. Thanks.</span>
<span class="comment-copy">The details of Alex now return as <code>[('Computer Science', 'Medium', '2\n'), ('Maths', 'Medium', '1')]</code> rather than on separate lines without all of the brackets.</span>
<span class="comment-copy">@GregD'Silva So? Isn't that a step in the right direction? I've got you this far. Surely you can figure out the rest yourself. Your question isn't even concerned about output representation.</span>
<span class="comment-copy">Switching to CSV to parse OP's file does not solve their immediate problem.</span>
<span class="comment-copy">Added example code that shows how to parse the CSV.</span>
