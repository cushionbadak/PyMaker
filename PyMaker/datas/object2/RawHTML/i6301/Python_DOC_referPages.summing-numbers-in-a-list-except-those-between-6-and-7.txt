<div class="post-text" itemprop="text">
<p>I'm attempting to write a function which takes a list and sums all the numbers in the list, except it ignores sections of the list starting with a list and extending to a 7, but continues to sum after the 7. Here is my code:</p>
<pre><code>def sum67(nums):
   i = 0
   sum = 0
   while i &lt; len(nums):
      k = 0
      if nums[i] != 0:
         sum += nums[i]
         i += 1
      if nums[i] == 6:
         for j in range(i + 1, len(nums)):
            if nums[j] != 7:
               k += 1
            if nums[j] == 7:
               k += 2
               i += k
</code></pre>
<p>Test cases show that 6 and proceeding numbers up until and including 7 are ignored while other numbers are added to the sum, and numbers after the 7 are also added to the sum (as was intended), but for some reason any 7 after the first 7 after a 6 is not summed - this is not what I want and I'm not sure why it's happening. Any suggestions?</p>
<p>Test case results:</p>
<pre><code>[1, 2, 2 Expected: 5. My result: 5 (OK)

[1, 2, 2, 6, 99, 99, 7] Expected: 5. My result: 5 (OK)  
[1, 1, 6, 7, 2] Expected: 4 My result: 4 (Chill)    
[1, 6, 2, 2, 7, 1, 6, 99, 99, 7] Expected: 2    My result: 1 (Not chill)    
[1, 6, 2, 6, 2, 7, 1, 6, 99, 99, 7] Expected: 2 My result: 1    (Not chill) 
[2, 7, 6, 2, 6, 7, 2, 7] Expected: 18 My result: 9 (Not chill)
</code></pre>
<p>`</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def sum67(nums):
    # flag to know if we are summing
    active = True
    tot = 0
    for n in nums:
        # if we hit a 6 -&gt; deactivate summing
        if n == 6:
             active = False
        if active:
             tot += n
        # if we hit a seven -&gt; reactivate summing
        if n == 7 and not active: 
             active = True
    return tot
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The posted code is completely broken.
For example for a list without any 6,
<code>i</code> will be out of bounds of the list when reaching the <code>nums[i] == 6</code> condition on the last element.</p>
<p>You need to completely rethink the conditions inside the loop.
Here's one approach that will work.
If the current number is 6,
then skip until you see a 7, without adding to the sum.
Otherwise add to the sum.
After performing either of these two actions (skipping numbers or adding to the sum),
increment <code>i</code>.</p>
<pre><code>def sum67(nums):
    i = 0
    total = 0
    while i &lt; len(nums):
        if nums[i] == 6:
            for i in range(i + 1, len(nums)):
                if nums[i] == 7:
                    break
        else:
            total += nums[i]

        i += 1

    return total
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is an intermediate alternative for learning new Python techniques:</p>
<pre><code>import itertools as it


def span_sum(iterable, start=6, end=7):
    """Return the sum of values found between start and end integers."""
    iterable = iter(iterable)
    flag = [True]
    result = []

    while flag:
        result.extend(list(it.takewhile(lambda x: x!=start, iterable)))
        flag = list(it.dropwhile(lambda x: x!=end, iterable))
        iterable = iter(flag)
        next(iterable, [])
    return sum(result)

# Tests
f = span_sum
assert f([1, 2, 2]) == 5
assert f([1, 2, 2, 6, 99, 99, 7] ) == 5
assert f([1, 6, 2, 2, 7, 1, 6, 99, 99, 7]) == 2
assert f([1, 6, 2, 6, 2, 7, 1, 6, 99, 99, 7]) == 2
assert f([2, 7, 6, 2, 6, 7, 2, 7]) == 18
</code></pre>
<p>In principle, this function filters the input, collecting values into a <code>result</code> that meet your condition and drops the rest, then the sum is returned.  In particular you can observe the following techniques:</p>
<ul>
<li><a href="https://www.tutorialspoint.com/python/list_extend.htm" rel="nofollow noreferrer">extending</a> a list</li>
<li><a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">itertools</a>, e.g. <code>itertools.takewhile</code>, <code>itertools.dropwhile</code></li>
<li><a href="http://nvie.com/posts/iterators-vs-generators/" rel="nofollow noreferrer">iterators and generators</a></li>
<li><a href="https://www.programiz.com/python-programming/methods/built-in/next" rel="nofollow noreferrer"><code>next()</code></a> function and default values</li>
<li><a href="https://www.programiz.com/python-programming/methods/built-in/sum" rel="nofollow noreferrer"><code>sum()</code></a> function </li>
<li><a href="https://www.tutorialspoint.com/python/assertions_in_python.htm" rel="nofollow noreferrer">assertion testing</a></li>
</ul>
</div>
<span class="comment-copy">The correct test is <code>n == 6</code> and not <code>n is 6</code>. It is an implementation dependend detail that it works for small integers.</span>
<span class="comment-copy">Thanks, changed</span>
