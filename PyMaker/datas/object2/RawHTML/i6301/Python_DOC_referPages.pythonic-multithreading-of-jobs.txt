<div class="post-text" itemprop="text">
<p>I have an application that needs to make a set 30-40 API calls, each of which kick off query "jobs" that will need polled for status, and then retrieved from the API.  Each job will take an unknown amount of time -anywhere from immediate to 3-4 minutes.  </p>
<p>This seems like a great place to apply a multithreading model wherein I "dispatch" these jobs and then wait for all of them to be completed before processing the results.  I am confused by all the options available for this in Python, and it's unclear to me whether I should use <code>concurrent.futures</code> or <code>asyncio</code> or <code>greenlets</code>. </p>
<p>How do I evaluate the options and make a choice that results in readable, Pythonic code?  Which of these libraries is the most prevalent and reusable(in other words, which one is a good investment for my time)? 
Which is best suited for my task?  </p>
<p>Any advice or guidance on how to translate my problem into Python 3.6+ would be appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not really sure what you are asking. However, multiprocessing is really easy with Python and if you simply need to trigger jobs, then the following might help:</p>
<pre><code>import multiprocessing as mp

def print_index(x):
    print(x)

jobs = []
for i in range(3):  
    p = mp.Process(target=print_index, args=(i,))
    jobs.append(p)
    p.start()

for job in jobs: #wait for the 3 jobs to finish...
    job.join()
</code></pre>
<p>You can find out more about multiprocessing via the documentation: <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer">https://docs.python.org/3/library/multiprocessing.html</a></p>
</div>
<span class="comment-copy">Thanks!  I'm mostly just looking for help understand the "best" or most prevalent way to accomplish multithreading or multiprocessing.  There's a wide range of tools available for this and it's unclear which ones are still relevant since the addition of <code>asyncio</code> to the standard library around 3.5!</span>
<span class="comment-copy">Don't use asyncio. It's not worth the extra time to understand it. Also, I would recommend threads here as you're not cpu bound.</span>
<span class="comment-copy">Yes, multithreading is more suitable. Not sure why I had MP on the mind.</span>
