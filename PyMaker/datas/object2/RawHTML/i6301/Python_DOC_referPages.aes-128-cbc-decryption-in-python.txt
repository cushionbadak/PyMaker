<div class="post-text" itemprop="text">
<p>I'm trying to implement this code in python (I'm new to python) and it gives me the following error:</p>
<blockquote>
<p>AttributeError: 'str' object has no attribute 'decode'</p>
</blockquote>
<p>If we remove <code>.decode ('hex')</code> only to avoid such error:</p>
<pre><code>from itertools import product
from Crypto.Cipher import AES
import Crypto.Cipher.AES

key = ('2b7e151628aed2a6abf7158809cf4f3c').decode('hex')
IV = ('000102030405060708090a0b0c0d0e0f').decode('hex')
plaintext1 = ('6bc1bee22e409f96e93d7e117393172a').decode('hex')
plaintext2 = ('ae2d8a571e03ac9c9eb76fac45af8e51').decode('hex')
plaintext3 = ('30c81c46a35ce411e5fbc1191a0a52ef').decode('hex')
cipher = AES.new(key, AES.MODE_CBC, IV)
ciphertext = cipher.encrypt(plaintext1 + plaintext2 + plaintext3)
(ciphertext).encode('hex')
decipher = AES.new(key, AES.MODE_CBC, IV)
plaintext = decipher.decrypt(ciphertext)
(plaintext).encode('hex')
</code></pre>
<p>but it gives me the following error:</p>
<blockquote>
<p>ValueError: IV must be 16 bytes long</p>
</blockquote>
<p>since the algorithm would need the <code>.decode ('hex')</code> that I had to remove</p>
<pre><code>from itertools import product
from Crypto.Cipher import AES
import Crypto.Cipher.AES

key = ('2b7e151628aed2a6abf7158809cf4f3c')
IV = ('000102030405060708090a0b0c0d0e0f')
plaintext1 = ('6bc1bee22e409f96e93d7e117393172a')
plaintext2 = ('ae2d8a571e03ac9c9eb76fac45af8e51')
plaintext3 = ('30c81c46a35ce411e5fbc1191a0a52ef')
cipher = AES.new(key,AES.MODE_CBC,IV)
ciphertext = cipher.encrypt(plaintext1 + plaintext2 + plaintext3)
(ciphertext).encode('hex')
decipher = AES.new(key,AES.MODE_CBC,IV)
plaintext = decipher.decrypt(ciphertext)
(plaintext).encode('hex')
</code></pre>
<p>Does anyone have any idea how I could do to make this code work?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are using Python 3, not Python 2. You can't use <code>decode()</code> on strings in Python 3, they are already text, so bytes-to-bytes codecs such as <code>'hex'</code> can't be applied that way.</p>
<p>Use the <code>binascii</code> module instead:</p>
<pre><code>from binascii import hexlify, unhexlify

key = unhexlify('2b7e151628aed2a6abf7158809cf4f3c')
IV = unhexlify('000102030405060708090a0b0c0d0e0f')
plaintext1 = unhexlify('6bc1bee22e409f96e93d7e117393172a')
plaintext2 = unhexlify('ae2d8a571e03ac9c9eb76fac45af8e51')
plaintext3 = unhexlify('30c81c46a35ce411e5fbc1191a0a52ef')
</code></pre>
<p>and</p>
<pre><code>ciphertext_hex = hexlify(ciphertext)
# ...
plaintext_hex = hexlify(plaintext)
</code></pre>
<p>So to decode from a hex string to bytes, use <a href="https://docs.python.org/3/library/binascii.html#binascii.unhexlify" rel="noreferrer"><code>binascii.unhexlify()</code></a>, and to encode back to hex, use <a href="https://docs.python.org/3/library/binascii.html#binascii.hexlify" rel="noreferrer"><code>binascii.hexlify()</code></a>. Note that you you can't convert data in-place, you do have to store the result back in a variable (or print out the value, etc.).</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from Crypto.Cipher import AES
&gt;&gt;&gt; import Crypto.Cipher.AES
&gt;&gt;&gt; from binascii import hexlify, unhexlify
&gt;&gt;&gt; key = unhexlify('2b7e151628aed2a6abf7158809cf4f3c')
&gt;&gt;&gt; IV = unhexlify('000102030405060708090a0b0c0d0e0f')
&gt;&gt;&gt; plaintext1 = unhexlify('6bc1bee22e409f96e93d7e117393172a')
&gt;&gt;&gt; plaintext2 = unhexlify('ae2d8a571e03ac9c9eb76fac45af8e51')
&gt;&gt;&gt; plaintext3 = unhexlify('30c81c46a35ce411e5fbc1191a0a52ef')
&gt;&gt;&gt; cipher = AES.new(key,AES.MODE_CBC,IV)
&gt;&gt;&gt; ciphertext = cipher.encrypt(plaintext1 + plaintext2 + plaintext3)
&gt;&gt;&gt; hexlify(ciphertext)
b'7649abac8119b246cee98e9b12e9197d5086cb9b507219ee95db113a917678b273bed6b8e3c1743b7116e69e22229516'
&gt;&gt;&gt; decipher = AES.new(key,AES.MODE_CBC,IV)
&gt;&gt;&gt; plaintext = decipher.decrypt(ciphertext)
&gt;&gt;&gt; plaintext == plaintext1 + plaintext2 + plaintext3  # test if decryption was successful
True
&gt;&gt;&gt; hexlify(plaintext)
b'6bc1bee22e409f96e93d7e117393172aae2d8a571e03ac9c9eb76fac45af8e5130c81c46a35ce411e5fbc1191a0a52ef'
</code></pre>
</div>
<span class="comment-copy">This would work (for python2) because your data is 3 blocks of 16 bytes, otherwise you'd have to pad.</span>
<span class="comment-copy">I'd love to hear what is not helpful or wrong about my answer, to deserve a downvote. That way I can improve my answer!</span>
<span class="comment-copy">Requesting comments on down votes only gets you more down votes ... have another one ... wait ... no ... scrap that ....</span>
<span class="comment-copy">@rene I clean these comments up periodically; sometimes, just <i>sometimes</i>, I do actually get helpful feedback when I ask for it after a dv. I am known to make mistakes from time to time, after all!</span>
<span class="comment-copy">Fair enough, I'm allowed one joke a day, right? (I admit it is my poor Dutch humor)</span>
<span class="comment-copy">@rene: Dutch humour is underrated, in my personal opinion.</span>
