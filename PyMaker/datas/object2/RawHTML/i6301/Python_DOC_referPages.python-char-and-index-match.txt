<div class="post-text" itemprop="text">
<p>I can't figure out what I'm doing wrong.  I want a simple way of matching the char and position in two strings. The error is that it's not recognizing what I'm intending as an index.</p>
<p>I'm new at this. :)  I think experts can understand what I'm starting to try to do here.  I don't want to copy a complicated bulls and cows code, I'm just trying to do this early part.  Please advise:</p>
<pre><code>def bulls_and_cows(real, guess):
    bulls = 0
    cows = 0
    for i in guess:
        if i == i in real:
            if i[x] == i[x]
            bulls = bulls + 1
            print ("Bullseye!")
            print(bulls)
    else:
        print("No")

bulls_and_cows("like", "brig")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In the line</p>
<pre><code>for i in guess:
</code></pre>
<p>the variable i will be each char in the string guess, instead of index. If you intend to get both indices and chars, you need to use <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer">enumerate()</a>.</p>
<p>Next I'm not sure what you intend to compare in</p>
<pre><code>if i == i in real:
</code></pre>
<p>Also, x is not initialized anywhere before this line:</p>
<pre><code>if i[x] == i[x]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Hopefully the code below isn't too advanced for you. It uses the very handy <code>enumerate</code> function which lets us loop over a string and get both the index and the character. Actually, <code>enumerate</code> is a general function that can be used on any <code>for</code> loop when we need to get the item and its index.</p>
<pre><code>def bulls_and_cows(real, guess):
    bulls = cows = 0
    for i, c in enumerate(guess):
        if c in real:
            # We have a match!
            if real[i] == c:
                # And it's in the correct position
                bulls += 1
            else:
                cows += 1

    print('Bulls', bulls, 'Cows', cows)

bulls_and_cows("like", "brig")
</code></pre>
<p><strong>output</strong></p>
<pre><code>Bulls 0 Cows 1
</code></pre>
<p>My code doesn't produce the exact output you want, but I'm sure you can figure that out. ;)</p>
<hr/>
<p>If you can't quite understand how my code works, try putting </p>
<pre><code>print(i, c)
</code></pre>
<p>as the first line in the <code>for i, c in enumerate(guess):</code> block, before the <code>if c in real:</code> line.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a lot of handy utils, most of all <code>zip</code>:</p>
<pre><code>from collections import Counter
def bulls_and_cows(real, guess):
    # count bulls
    bulls = sum(x == y for x, y in zip(real, guess))

    # get letter counts separately for each string
    c1, c2 = map(Counter, (real, guess))

    # cows: sum min count for any letter, subtract bulls
    cows = sum(min(c1[x], c2[x]) for x in set(real) | set(guess)) - bulls

    print(bulls, cows)
</code></pre>
<p>For pure explicit iterative bulls counting:</p>
<pre><code>def bulls_and_cows(real, guess):
    bulls = 0
    for r, g in zip(real, guess):
        if r == g:
            bulls += 1
    print(bulls)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I guess you are trying to do this:</p>
<pre><code>def bulls_and_cows(real, guess):
    bulls = 0
    cows = 0
    for i in range(len(guess)):
        if guess[i] == real[i]:
            bulls = bulls + 1
            print ("Bullseye!")
        else:
            cows += 1

    if bulls == 0:
        print("No")
    else:
        print("Bulls: " , bulls, " Cows: ", cows)

bulls_and_cows("like", "brig")
</code></pre>
<p>Please let me know if it is not what you intend so I can help you more. This code Prints "Bullseye!" for every time a char in guess matches the char in real in the same place. and prints "No" if they do not match. I couldn't understand why you needed a cows = 0 at first because you never used it in your code.</p>
<p>Also please notice that indention is very important in python. So in your code at least one of the lines after the if should be indented. Also, in this code, I assumed that the length of the two input strings is the same. If not you may encounter out of bound error. To prevent such errors it is better to compare the length of the two strings at the start of the function:</p>
<pre><code>if len(real) != len(guess):
    print("The strings Length does not match!")
    return
</code></pre>
<p>If you insist to compare the strings even though they are of different lengths, another option to prevent this error is to change the code like this:</p>
<pre><code>def bulls_and_cows(real, guess):
    bulls = 0
    cows = 0
    real_len = len(real)
    guess_len = len(guess)
    for i in range(real_len):
        if i &lt; guess_len and guess[i] == real[i]:
            bulls = bulls + 1
            print ("Bullseye!")
        else:
            cows += 1

    if bulls == 0:
        print("No")
    else:
        print("Bulls: " , bulls, " Cows: ", cows)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My teacher pointed out I should start with the "cows" section, and then for those results, narrow it to bulls. This is the working answer i put together.  I appreciate the suggestions!</p>
<pre><code>def bulls_and_cows(real, guess):
    bulls = 0
    cows = 0
    for i in guess:
        if i == i in real:
            cows = cows+1
            if guess.index(i) == real.index(i):
                cows = cows -1
                bulls = bulls +1
    print("Bulls: " + str(bulls))
    print("Cows: " + str(cows))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also go with a 1 liner for each of the cases:</p>
<pre><code>real = "like"
guess = "brig"
print("Bulls", sum(1 for x in zip(real, guess) if x[0] == x[1])) # Bulls 0
print("Cows", sum(1 for x in real if x in guess and real.index(x) != guess.index(x))) # Cows 1
</code></pre>
<p>The first one "zips" the word and counts the tuples with similar characters. The second, looks for characters that are in both words but positioned in different indexes.</p>
</div>
<span class="comment-copy">instead of <code>if i == i in real:</code> did you mean: <code>if guess.index(i) == real.index(i):</code> ? comparing <code>i == i</code> and <code>i[x] == i[x]</code> will <i>always</i> be true (tautology).</span>
<span class="comment-copy">yes.  thank you.  It's mostly working now, but I have strange errors:   "File "C:/ line 5, in bulls_and_cows     if guess.index(i) == real.index(i): ValueError: substring not found"</span>
<span class="comment-copy">For future reference, you should also post the full error message when your code doesn't work. In this particular case, we can see what's wrong, but generally it's much better if you can just give us that info rather than making us figure it out.</span>
<span class="comment-copy">If one of the answers below fixes your issue, you should accept it (click the check mark next to the appropriate answer). That does two things. It lets everyone know your issue has been resolved to your satisfaction, and it gives the person that helps you credit for the assist. See <a href="http://meta.stackexchange.com/a/5235">here</a> for a full explanation.</span>
<span class="comment-copy">@ReallyRosie that means that you're looking for an index of a character that doesn't appear in the string.</span>
<span class="comment-copy">This is great. Thank you so much!</span>
<span class="comment-copy">This code is probably <i>way</i> beyond Rosie's skills at this stage.</span>
<span class="comment-copy">Probably ;) lots to read up on</span>
<span class="comment-copy">Definitely lots to read up on.  My teacher also walked back in the room.  ;)  But I really appreciate seeing all of this, I hope one day I'll get these skills.</span>
<span class="comment-copy">This won't do what you want. <code>i == i</code> always equals the special <code>True</code> object, but <code>True</code> isn't in <code>real</code>, since <code>real</code> is a string of characters. Instead, you should simply have <code>if i  in real:</code></span>
<span class="comment-copy">@PM2Ring sorry I have no idea what you're talking about... :))))) (just kidding of course, thanks for the comment!)</span>
