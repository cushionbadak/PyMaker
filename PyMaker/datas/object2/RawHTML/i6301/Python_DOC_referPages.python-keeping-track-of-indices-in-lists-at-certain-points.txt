<div class="post-text" itemprop="text">
<p>I'm having some trouble with iteration and keeping track of various indices and values at different points in my list (I'm new to Python).</p>
<p>I am running a series of cycles, but want to determine their starts and end times. Experiments starts at around 0 and end at around 50.</p>
<p>Here is what a list of cycles look like:</p>
<pre><code>c = [0, 10, 11, 48, 50.5, 0.48, 17, 18, 23, 29, 33, 34.67, 50.1, 0.09, 7, 41, 45, 50]
</code></pre>
<p>Here is an example of what the output should look like:</p>
<pre><code>C 1:
Start: (0, 0) # starts at index 0, value 0
End: (4, 50.5) #ends at index 4, value 50.5

C 2:
Start: (5, 0.48)
End: (12, 50.1)

C 3:
Start: (13, 0.09)
End: (17, 50)
</code></pre>
<p>One approach I can think of is to sort the c.</p>
<pre><code>c.sort()
</code></pre>
<p>This will at least put all the start values at the beginning of the list and the end values at the end of the list. However, then I would lose track of their original indices. Anyone know of another approach?</p>
<p>EDIT:</p>
<p>This is what I have so far, if anyone can help modify, it would be great:</p>
<pre><code>min = []
max = []
for i, (first,second) in enumerate(zip(c, c[1:])):
    print(i, first, second)
    if first &lt; second:
        min.append(first)
        continue
    if first &gt; second:
        max.append(first)
        continue
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I divide up the task, build a <code>dictionary</code>, <code>D</code> of the increasing sequences </p>
<pre><code>c = [0, 10, 11, 48, 50.5, 0.48, 17, 18, 23, 29, 33, 34.67, 50.1, 0.09, 7, 41, 45, 50]

D, k = {0: []}, 0

for i, (first, second) in enumerate(zip(c, [0] + c)):
    if first &gt;= second:
        D[k].append((i, first))  # adding increasing to value list in current D[k]
    else:
        k += 1
        D[k] = [(i, first)]  # initializing new D[k] for next sequence
</code></pre>
<p>then print in the desired format </p>
<pre><code>for k in D:  # sorted(D) safer, dict doesn't guarantee ordering, works here  
    print('C {0}:'.format(k))
    print('Start {0}'.format(D[k][0]))
    print('End   {0}'.format(D[k][-1]), '\n')

C 0:
Start (0, 0)
End   (4, 50.5) 

C 1:
Start (5, 0.48)
End   (12, 50.1) 

C 2:
Start (13, 0.09)
End   (17, 50) 
</code></pre>
<p>to print the dict <code>D</code> nicely in my IDE I needed wider line limit </p>
<pre><code>import pprint

pp = pprint.PrettyPrinter(width=100)
pp.pprint(D)

{0: [(0, 0), (1, 10), (2, 11), (3, 48), (4, 50.5)],
 1: [(5, 0.48), (6, 17), (7, 18), (8, 23), (9, 29), (10, 33), (11, 34.67), (12, 50.1)],
 2: [(13, 0.09), (14, 7), (15, 41), (16, 45), (17, 50)]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming your start value is the minimum value of the list and the end value is the maximum value of the list here's one way to do it:</p>
<pre><code>(start_val,end_val) = (min(c),max(c))
(start_ind,end_ind) = (c.index(start_val),c.index(end_val))
</code></pre>
<p>This also assumes that the min and max values don't have duplicates or if they have, you are ok with getting the index of the first, since the <code>index()</code> function only returns the index of the first element it finds equal to the argument. For more info: <a href="https://docs.python.org/3.6/library/stdtypes.html#typesseq" rel="nofollow noreferrer">https://docs.python.org/3.6/library/stdtypes.html#typesseq</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Your list has increasing sequences so changes are located where a number is greater than its next. To compare all consecutive pairs of a list, you could use <code>zip</code> like here: <a href="https://stackoverflow.com/questions/21303224/iterate-over-all-pairs-of-consecutive-items-from-a-given-list">Iterate over all pairs of consecutive items from a given list</a></p>
<p>Also to keep track of the list index, you can use <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a></p>
<p>So here is a way to get index/value for all the start/end positions.</p>
<pre><code>circle=0
for i, (first,second) in enumerate(zip(c, c[1:])):
    if i==0:
        circle +=1
        print("\nC", circle, "\nStart:", i, first)
    elif i==len(c)-2:
        print("End:", i+1, second)
    elif first &gt; second:
        print("End:", i, first)
        circle +=1
        print("\nC", circle, "\nStart:", i+1, second)
</code></pre>
<p>output:</p>
<pre><code>C 1 
Start: 0 0
End: 4 50.5

C 2 
Start: 5 0.48
End: 12 50.1

C 3 
Start: 13 0.09
End: 17 50
</code></pre>
</div>
<span class="comment-copy">Welcome to SO. Unfortunately this isn't a discussion forum or a code writing service. Please take the time to read <a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a> and the links it contains.  You should spend some time working your way through <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">the Tutorial</a>, practicing the examples. It will give you an introduction to the tools Python has to offer and you may even start to get ideas for solving your problem.</span>
<span class="comment-copy">Use <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a></span>
<span class="comment-copy">I truly apologize, I will take a look at that tutorial now!</span>
<span class="comment-copy">thanks patrick, i'll take a look!</span>
<span class="comment-copy">So, I've discovered that using enumerate will help me obtain the indices of the list, but it's still a little hard to wrap my head around slicing the lists at the points I need to...any guidance would be really helpful.</span>
<span class="comment-copy">this looks like a really nice output, thank you!</span>
<span class="comment-copy">thanks, but my list has multiple start and end values as described in the question above! Starts values are close to 0, while end values are close to 50.</span>
<span class="comment-copy">thank you, this was a good visualization. still having trouble visualizing my exact outputs though. i really need those.</span>
<span class="comment-copy">You can format output of print, <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#print</a>, and if you want to count the circles you print, just use an increasing variable whenever you print a start.</span>
<span class="comment-copy">The trick is deciding how NOT to print values beyond those listen in c1, c2, and c3...</span>
<span class="comment-copy">which trick do you mean?</span>
<span class="comment-copy">your output works perfectly for my example here, but does not generalize to my large set of data which contains more than a couple elements in the list, so I'm still struggling with printing there. I accepted your answer because I appreciate your time, but these print statements don't generalize to larger data.</span>
