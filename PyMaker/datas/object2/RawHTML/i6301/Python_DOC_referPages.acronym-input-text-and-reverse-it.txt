<div class="post-text" itemprop="text">
<p>My task is to turn the input text to acronym and reverse it. The word should be more than 3 characters long and do not contain symbols such as <code>,!'?.</code> For example if I have this sentence <code>"That was quite easy?"</code> the function should return <code>EQT</code></p>
<p>I have done so far:</p>
<pre><code>def acr(message):

    words = message.split()
    if check_length(words) is False:
        return "the input long!"
    else:
        first_letters = []
        for word in words:
            first_letters.append(word[0])
        result = "".join(first_letters)
        return reverse(result.upper())


def check(word):
    if len(word) &gt; 3:
        return False


def check_length(words):
    if len(words) &gt; 50:
        return False


def rev(message):
    reversed_message = message[::-1]
    return reversed_message
</code></pre>
<p>I have problems with <code>check</code> function. How to correctly control the length of words and symbols?</p>
</div>
<div class="post-text" itemprop="text">
<p>A bit hacky in the sense that a comma is technically a special character (but you want the 'e' from easy), but this works perfectly for your example. Set up the "if" statement in the "for word in words" section.</p>
<pre><code>def acronymize(message):
"""Turn the input text into the acronym and reverse it, if the text is not too long."""
words = message.split()
if check_message_length(words) is False:
    return "Sorry, the input's just too long!"
else:
    first_letters = []
    for word in words:
        if len(word) &gt; 3 and word.isalnum()== True or (len(word) &gt; 4 and ',' in word): #satisfies all conditions. Allows commas, but no other special characters.
            first_letters.append(word[0])
            result = "".join(first_letters)
    return reverse(result.upper())
</code></pre>
<p>Basically the 'if' condition became if you have word of length &gt; 3 characters AND the word is alphanumeric (then that satisfies all conditions) OTHERWISE (OR) if there is a comma next to the word (there will be len(word)+1 characters) and it will have a comma (,), that still satisfies the previous conditions, then populate the first_letters list. </p>
<p>Otherwise, ignore the word.</p>
<p>This way you don't even have to set up a check_word function.</p>
<p>This spits out the answer</p>
<blockquote>
<p>'EQT'</p>
</blockquote>
<p>A couple more examples from my code:</p>
<pre><code>Input: Holy cow, does this really work??
Output: 'RTDH'
</code></pre>
<p>** Note that it did NOT include the word 'cow' because it did not have more than 3 letters. </p>
<pre><code>Input: Holy cows, this DOES work!!
Output: 'DTCH'
</code></pre>
<p>** Note, now the term 'cows' gets counted because it has more than 3 letters.</p>
<p>You can similarly add any exceptions that you want (!, ? and .) using the 'or' format:</p>
<p>Ex: or (len(word) &gt; 4 and '!' in word) or (len(word) &gt; 4 and '?' in word)</p>
<p>The only assumption made for this is that the sentence is grammatically correct (as in, it won't have exclamation marks followed by commas). </p>
<p>It can be further cleaned up by making a list of the special characters that you would allow and passing that list into the or clause.</p>
<p>Hope that helps!</p>
</div>
<div class="post-text" itemprop="text">
<p><code>re.findall(r'(\w)\w{3,}', sentence)</code> finds first letter of every at least four letter word</p>
<pre><code>''.join(reversed(re.findall(r'(\w)\w{3,}', sentence))).upper()
</code></pre>
<p><a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">re docs</a></p>
<hr/>
<p>If you want to ignore words preceding non-word characters, use <code>(\w)\w{3,},?(?:$|\s)</code> â€“ this also allows a comma explicitly.</p>
<pre><code>''.join(reversed(re.findall(r'(\w)\w{3,},?(?:$|\s)', sentence))).upper()
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/stdtypes.html#str.isalpha" rel="nofollow noreferrer"><code>str.isalpha</code></a> sounds like what you 're looking for</span>
<span class="comment-copy">where do you use the checkword function?</span>
<span class="comment-copy">None of your <code>check</code> functions ever returns a truthy value (but just either <code>False</code> or <code>None</code>), also they do not do what the docstring says.</span>
<span class="comment-copy">Also, do you want to "reverse" the acronym as in "reverse the order of characters in the string", or "reverse it to the original sentence it is an acronym of"?</span>
<span class="comment-copy">@tobias_k The firs one. At the moment function returns reversed acronym using all words. "That was quite easy, huh?" --&gt; "HEQWT" But the result should be "EQT" cuz the length of some words is less than 3. What about "False" and "None". It is one of the task conditions. "check_word" and "check_length_message" should return bol values</span>
<span class="comment-copy">That doesn't handle non-word characters. E.g., it would match "hello!".</span>
<span class="comment-copy">@Wyatt It would match <code>hello</code> in <code>hello!</code>.</span>
<span class="comment-copy">Right, but it should ignore "hello!" altogether.</span>
