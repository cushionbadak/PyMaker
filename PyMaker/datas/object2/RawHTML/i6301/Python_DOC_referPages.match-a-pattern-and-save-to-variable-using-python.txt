<div class="post-text" itemprop="text">
<p>I have an <code>output</code> file containing thousands of lines of information. Every so often I find in the output file information of the following formÂ¨</p>
<pre><code>Input Orientation:
...
content
...
Distance matrix (angstroms):
</code></pre>
<p>I now want to save the <code>content</code> to a variable for subsequent formatting. Another thing is that I am only interested in the <em>last</em> pattern in my file. I have a solution for doing this with <code>sed</code> and <code>awk</code>, but that leads me to maving multiple files for carrying out one job. This job should be doable with python, but I have no idea where to start reading and to learn this.</p>
<hr/>
<p>EDIT
I have been reading up on regular expressions, and believe it or not I have made some progress! I first read in the file line by line, then reverse the list, and then join all strings that make up that list. I now end up with just one big, multiline string. Next I use the <code>re</code> module to make my regex <code>r'Distance matrix(.*?)Input orientation'</code>, which I think means the following: my first pattern is "Distance matrix", then a subpattern where zero or more of all characters are matched, but in a lazy way (stop after first match), and then my last pattern "Input orientation". </p>
<pre><code>with open(inputfile,"r") as input_file:
        input_file_lines = input_file.readlines()
        reverse_lines = input_lines[::-1]
        string = ''.join(reverse_lines)

        match = re.search('Distance matrix(.*?)Input orientation', string, re.DOTALL).group(1)
</code></pre>
<p>Sample data file for testing:</p>
<pre><code>Item               Value     Threshold  Converged?
             Maximum Force            0.005032     0.000450     NO
             RMS     Force            0.001066     0.000300     NO
             Maximum Displacement     0.027438     0.001800     NO
             RMS     Displacement     0.007282     0.001200     NO
             Predicted change in Energy=-8.909077D-05
             GradGradGradGradGradGradGradGradGradGradGradGradGradGradGradGradGradGrad

                                      Input orientation:
             ---------------------------------------------------------------------
             Center     Atomic      Atomic             Coordinates (Angstroms)
             Number     Number       Type             X           Y           Z
             ---------------------------------------------------------------------
                  1          6           0        Incorrect    Incorrect    Incorrect
                  2          1           0        Incorrect    Incorrect    Incorrect
                  3          1           0        Incorrect    Incorrect    Incorrect
                  4          1           0        Incorrect    Incorrect    Incorrect
                  5         17           0        Incorrect    Incorrect    Incorrect
                  6          9           0        Incorrect    Incorrect    Incorrect
             ---------------------------------------------------------------------
                                Distance matrix (angstroms):
                                1          2          3          4          5
                 1  C    0.000000
                 2  H    1.080163   0.000000
                 3  H    1.080326   1.809416   0.000000
                 4  H    1.080621   1.810236   1.810685   0.000000
                 5  Cl   1.962171   2.470702   2.468769   2.465270   0.000000
                 6  F    2.390537   2.343910   2.357275   2.380515   4.352568
                                6
                 6  F    0.000000

                                          Input orientation:
                 ---------------------------------------------------------------------
                 Center     Atomic      Atomic             Coordinates (Angstroms)
                 Number     Number       Type             X           Y           Z
                 ---------------------------------------------------------------------
                      1          6           0        Correct    Correct     Correct
                      2          1           0        Correct    Correct     Correct
                      3          1           0        Correct    Correct     Correct
                      4          1           0        Correct    Correct     Correct
                      5         17           0        Correct    Correct     Correct
                      6          9           0        Correct    Correct     Correct
                 ---------------------------------------------------------------------
                                    Distance matrix (angstroms):
                                    1          2          3          4          5
                     1  C    0.000000
                     2  H    1.080516   0.000000
                     3  H    1.080587   1.801890   0.000000
                     4  H    1.080473   1.801427   1.801478   0.000000
                     5  Cl   1.936014   2.458132   2.459437   2.460630   0.000000
                     6  F    2.414588   2.368281   2.365651   2.355690   4.350586
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Regex isn't necessary here. All you need is good ol' indexing. Python strings have <a href="https://docs.python.org/3/library/stdtypes.html#str.rindex" rel="nofollow noreferrer"><code>index</code> and <code>rindex</code> methods</a> that take a substring, finds it in the text, and returns the index of the first character in the substring. Reading <a href="https://docs.python.org/3/tutorial/introduction.html#strings" rel="nofollow noreferrer">this doc</a> should get you familiar with slicing strings. The program could look something like this:</p>
<pre><code>with open(input_file) as f:
    s = f.read()  # reads the file as one big string

last_block = s[s.rindex('Input'):s.rindex('Distance')]
</code></pre>
<p>The last line of that code finds the first occurrence of <code>'Input'</code> starting from the <em>end</em> of the file, since we used <code>rindex</code>, and moving towards the front and marks that position as an integer. It then does the same with <code>'Distance'</code>. It then uses those integers to return only the portion of the string that rests between them. in the case of your example file it would return:</p>
<pre><code>                                      Input orientation:
             ---------------------------------------------------------------------
             Center     Atomic      Atomic             Coordinates (Angstroms)
             Number     Number       Type             X           Y           Z
             ---------------------------------------------------------------------
                  1          6           0        Correct    Correct     Correct
                  2          1           0        Correct    Correct     Correct
                  3          1           0        Correct    Correct     Correct
                  4          1           0        Correct    Correct     Correct
                  5         17           0        Correct    Correct     Correct
                  6          9           0        Correct    Correct     Correct
             ---------------------------------------------------------------------
</code></pre>
<p>If you don't want the <code>'Input orientation'</code> header, you can simply add to the result of <code>rindex('Input')</code> until you get the desired result. That could look like <code>s[s.rindex('Input') + 19:s.rindex('Distance')]</code>, for instance.</p>
<p>It is also important to note that <code>index</code> and <code>rindex</code> throw errors if the substring is not found. If that is not desired, you can use <code>find</code> and <code>rfind</code>.</p>
</div>
<span class="comment-copy">What have you tried in Python so far? This shouldn't be overly complicated.</span>
<span class="comment-copy">You mean what I've tried that is relevant to this problem? If so, nothing.</span>
<span class="comment-copy">You should put some effort in yourself first. Do you know how to read text files in Python, for example? That is your first step.</span>
<span class="comment-copy">Updated. Yes, I can read in the file.</span>
<span class="comment-copy">I'd appreciate removing the downvotes, as I don't think they are fair any longer (but then definitely were fair earlier!).</span>
