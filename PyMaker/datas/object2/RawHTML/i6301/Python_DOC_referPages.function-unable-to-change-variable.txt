<div class="post-text" itemprop="text">
<p>I am trying to make a full-on guessing game with a shop that you can buy stuff with coins. but I had a function that was supposed to give the user a certain amount of coins depending on how many attempts it took them to guess the number. However, when I have a variable called 'coins' and when a player gets the number, I add coins to 'coins' it doesn't actually add coins. When I print 'coins' it still tells me 0. It's very confusing I know but I just want to fix this. I am using a mac with python 3, and am using two files, one for the main code, and the other for the functions. Do you see where I'm going wrong?</p>
<p>Main Code:</p>
<pre><code>from guessing_functions import guess_game, guess_home

home = False
attempt = 0
coins = 0
print ("Atemps:Coins, 10:5, 7:10, 5:20, 3:40, 1:100 ")

guess_game(coins, attempt)

while not home:
    guess_home(coins)
</code></pre>
<p>Functions:</p>
<pre><code>import random
def guess_game(coins, attempt):
    print ("This is a guessing game. ")
    found = False
    num = random.randint(1, 100)
    while not found:
        userGuess = input('Your Guess: ') ; userGuess = int(userGuess)
        if userGuess == num:
            print ("You got it!")
            found = True
        elif userGuess &gt; num:
            print ("Guess Lower!")
        else:
            print ("Guess Higher")

        attempt += 1

        if attempt == 1 and found == True:
            print ("You won 100 coins!")
            coins += 100
        elif attempt == 2 and found == True:
            print ("You won 40 coins")
            coins += 40
        elif attempt == 3 and found == True:
            print ("You won 40 coins")
        elif attempt == 4 and found == True:
            print ("You won 20 coins")
            coins += 20
        elif attempt == 5 and found == True:
            print ("You won 20 coins")
            coins += 20
        elif attempt == 6 and found == True:
            print ("You won 10 coins")
            coins += 10
        elif attempt == 7 and found == True:
            print ("You won 10 coins")
            coins += 10
        elif attempt == 8 and found == True:
            print ("You won 5 coins")
            coins += 5
        elif attempt == 9 and found == True:
            print ("You won 5 coins")
            coins += 5
        elif attempt == 10 and found == True:
            print ("You won 5 coins")
            coins += 5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To get it to work, you need only add <code>return coins</code> to the end of the <code>guess_game</code> function and collect the returned value in your main code as <code>coins = guess_game(coins, attempt)</code>. However, if you'd like, you can simplify your code a little bit like so:</p>
<pre><code>import random

def guessing_game(coins):

    print("This is a guessing game. ")
    attempts   = 0
    number     = random.randint(1, 100)
    user_guess = -number

    while user_guess != number:

        user_guess = int(input("Your Guess: "))

        if user_guess &gt; number:

            print("Guess Lower!")

        elif user_guess &lt; number:

            print("Guess Higher")

        else:

            print("You got it!")

            if attempts == 1:

                winnings = 100

            elif attempts in [2, 3]:

                winnings = 40

            elif attempts in [4, 5]:

                winnings = 20

            elif attempts in [6, 7]:

                winnings = 10

            elif attempts in [8, 9, 10]:

                winnings = 5

            else:

                winnings = 0

            print("You won {} coins!".format(winnings))

            return coins + winnings

        attempts += 1
</code></pre>
<p>With your main code as:</p>
<pre><code>from guessing_functions import guessing_game

coins = 0
print("Starting balance: {} coins".format(coins))

print ("Winnings vs. Attempts: 10:5, 7:10, 5:20, 3:40, 1:100")
coins = guessing_game(coins)

print("Current balance: {} coins".format(coins))
</code></pre>
<p>Where the output from a sample run is as follows:</p>
<pre><code>Starting balance: 0 coins
Winnings vs. Attempts: 10:5, 7:10, 5:20, 3:40, 1:100
This is a guessing game.
Your Guess: 50
Guess Lower!
Your Guess: 25
Guess Higher
Your Guess: 37
Guess Higher
Your Guess: 44
Guess Higher
Your Guess: 47
Guess Lower!
Your Guess: 46
You got it!
You won 20 coins!
Current balance: 20 coins
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your function uses <code>coins</code> in it's <em>local scope.</em> In order for the function to change the value of the <strong>outter scope (global)</strong> <code>coins</code> variable you need to explicity state that.</p>
<p>Add <code>global coins</code> inside your function before changing <code>coins</code> value.</p>
<pre><code>coins = 0

def f():
    global coins
    coins = 5

f()
print coins
# 5
</code></pre>
<p>Or, an alternative way is to <strong>return coins</strong> value from the function, and call your function <code>coins = guess_game(attempt)</code> </p>
<p>Here is some useful <a href="https://www.python-course.eu/global_vs_local_variables.php" rel="nofollow noreferrer">resource for this subject</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You should return the number of coins from the function and assign it to <code>coins</code>: </p>
<pre><code>def guess_game(coins, attempt):
    ... # code to determine coin amount
    return coins

coins = guess_game(coins, attempt)
</code></pre>
<hr/>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions" rel="nofollow noreferrer">Defining Functions</a></p>
</div>
<span class="comment-copy">What type of exception are you getting?</span>
<span class="comment-copy">When I print 'coins' it tells me 0 even after I changed the value in the function</span>
<span class="comment-copy">define coins as global in your function</span>
<span class="comment-copy">why did you use 'winnings', how does that match up with coins?</span>
<span class="comment-copy">@Logster Because when playing games of chance, if you walk away with a positive sum, it's called your "winnings". I replaced the incrementation of <code>coins</code> with <code>winnings</code> so that <code>winnings</code> could be printed without having to type ten different <code>print</code> strings. The new value of <code>coins</code> is the starting value plus the <code>winnings</code>, thus <code>return coins + winnings</code>.</span>
<span class="comment-copy">oh okay, that really smart, thanks!</span>
<span class="comment-copy">@Logster No problem! If this answered your question, don't forget to tap the "accept answer" button.</span>
<span class="comment-copy">when I do this it tells me 'coins' is not defined.</span>
<span class="comment-copy">@Logster - in your post it looked like you defined coins, <code>coins = 0</code>, before calling the function.  I assumed you would still do that.</span>
