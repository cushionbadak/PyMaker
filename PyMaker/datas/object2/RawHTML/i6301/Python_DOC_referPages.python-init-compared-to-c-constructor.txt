<div class="post-text" itemprop="text">
<p>I have worked with Python for about 4 years and have recently started learning C++. In C++ you create a constructor method for each class I I was wondering if it is correct to think that this is equivalent to the <code>__init__(self)</code> function in Python? Are there any notable differences? Same question for a C++ destructor method vs. Python <code>_exit__(self)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, Python's <code>__init__</code> is analogous to C++'s constructor. Both are typically where non-static data members are initialized. In both languages, these functions take the in-creation object as the first argument, explicit and by convention named <code>self</code> in Python and implicit and by language named <code>this</code> in C++. In both languages, these functions can return nothing. One notable difference between the languages is that in Python base-class <code>__init__</code> must be called explicitly from an inherited class <code>__init__</code> and in C++ it is implicit and automatic. C++ also has ways to declare data member initializers outside the body of the constructor, both by member initializer lists and non-static data member initializers. C++ will also generate a default constructor for you in some circumstances.</p>
<p>Python's <code>__new__</code> is analogous to C++'s class-level <code>operator new</code>. Both are static class functions which must return a value for the creation to proceed. In C++, that something is a pointer to memory and in Python it is an <em>uninitialized</em> value of the class type being created.</p>
<p>Python's <code>__del__</code> has no direct analogue in C++. It is an object finalizer, which exist also in other garbage collected languages like Java. It is not called at a lexically predetermined time, but the runtime calls it when it is time to deallocate the object.</p>
<p><code>__exit__</code> plays a role similar to C++'s destructor, in that it can provide for deterministic cleanup and a lexically predetermined point. In C++, this tends to be done through the C++ destructor of an RAII type. In Python, the same object can have <code>__enter__</code> and <code>__exit__</code> called multiple times. In C++, that would be accomplished with the constructor and destructor of a separate RAII resource holding type. For example, in Python given an instance <code>lock</code> of a mutual exclusion lock type, one can say  <code>with lock:</code> to introduce a critical section. In C++, we create an instance of a different type taking the lock as a parameter <code>std::lock_guard g{lock}</code> to accomplish the same thing. The Python <code>__enter__</code> and <code>__exit__</code> calls map to the constructor and destructor of the C++ RAII type.</p>
</div>
<div class="post-text" itemprop="text">
<p>The best you can say is that <code>__init__</code> and a C++ constructor are called at roughly the same point in the lifetime of a new object, and that <code>__del__</code> and a C++ destructor are also called near the end of the lifetime of an object. The <em>semantics</em>, however, are markedly different, and the execution model of each language makes further comparison more difficult.</p>
<p>Suffice it to say that <code>__init__</code> is used to <em>initialize</em> an object <em>after</em> it has been created. <code>__del__</code> is <em>like</em> a destructor that <em>may</em> be called at some unspecified point in time after the last reference to an object goes away, and <code>__exit__</code> is more like a callback invoked at the end of a <code>with</code> statement, whether or not the object's reference count reaches zero.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><em>I was wondering if it is correct to think that this is equivalent to
  the <code>init(self)</code> function in Python?</em></p>
</blockquote>
<p>No. Just by looking at the structure of the statement you can understand. Indeed, <code>self</code> is a reference to the instance. Therefore, the instance must be constructed before <code>__init__</code> is called. </p>
<p>See <a href="https://docs.python.org/3/reference/datamodel.html#object.__new__" rel="nofollow noreferrer">this</a> for more information (<code>__new__</code> is actually what you're looking for) </p>
<blockquote>
<p><em>Same question for a C++ destructor method vs. Python <code>_exit__(self)</code></em></p>
</blockquote>
<p>No. <code>__exit__</code> only exit the Runtime context related to the object. In this case, what you are really looking for is <code>__del__</code>.</p>
<p>See <a href="https://docs.python.org/3/reference/datamodel.html#object.__del__" rel="nofollow noreferrer">this</a>, which clearly state:</p>
<blockquote>
<p>Called when the instance is about to be destroyed. This is also called
  a destructor.</p>
</blockquote>
</div>
<span class="comment-copy">Did you made any research?</span>
<span class="comment-copy">the init function is what is executed first when you call the class. the constructors in C++ however can be called separately. there's barely any similarity between constructors and the <b>init</b> function in python except for belonging to a class.</span>
<span class="comment-copy">I recommend you get <a href="http://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list">a good beginners book or two</a> to read. It should give you all information you need about constructors and destructors.</span>
<span class="comment-copy">In Python, the object constructor is <code>__new__</code>, but you don't often see it since it's rarely necessary to override the  <code>__new__</code> inherited from <code>object</code>. Strictly speaking, <code>__init__</code> initializes the new instance created by <code>__new__</code>, but it's fairly common in casual discussions to call <code>__init__</code> the constructor.</span>
<span class="comment-copy">He's asking if <code>__init__</code> and a constructor are the same; they are not.</span>
<span class="comment-copy"><code>__del__</code> is also not <i>guaranteed</i> to be called; it is only called if the running interpreter needs to garbage-collect the instance. If the reference count goes to zero as a result of the interpreter exiting, it will not bother calling <code>__del__</code>.</span>
<span class="comment-copy">Yes you are totally right, but this is still the equivalent in Python. Am I wrong ?</span>
<span class="comment-copy">It's the closest thing Python provides, but it is not equivalent. Code that would often be put in a constructor is instead put in the <code>__exit__</code> method of a context manager. The fact that <code>__exit__</code> is called, though, does not imply the object is going away. You could easily define an object that can be used with multiple sequential <code>with</code> statements, its <code>__enter__</code> and <code>__exit__</code> methods being called when appropriate.</span>
<span class="comment-copy">As I said in my answer <code>__exit__</code> is not a deconstructor. But, <code>__del__</code> on the other hand, can be called one. Anyway, follow my link the doc says it.</span>
<span class="comment-copy"><code>__init__</code> is more like the constructor in C++. And like self, the constructor in c++ also implicitly passed with "this" pointer as the first parameter.  Some basic initialization may happen in the passed memory pointed to by "this" also.</span>
