<div class="post-text" itemprop="text">
<p>How to append '\t' to all prints in function?</p>
<p>Example:</p>
<pre><code>def func():
   print('this print with tab')
   print('and this print with tab')

print('some text:')
func()
</code></pre>
<p>Output of the code should be:</p>
<pre><code>some text:
   this print with tab
   and this print with tab
</code></pre>
<p>Output of the code <code>func()</code> should be without tabs:</p>
<pre><code>this print with tab
and this print with tab
</code></pre>
<p>So, I think It should be something like decorator over func.</p>
</div>
<div class="post-text" itemprop="text">
<p>Redirect STDOUT to a file-like object temporarily and call your function. Then read the entire contents of the buffer and call <a href="https://docs.python.org/3/library/textwrap.html#textwrap.indent" rel="nofollow noreferrer"><code>textwrap.indent</code></a> to indent every line:</p>
<pre><code>import io, textwrap
from contextlib import redirect_stdout

output = io.StringIO()
with redirect_stdout(output):
    func()

print(textwrap.indent(output.getvalue(), '\t'), end='')
</code></pre>
<p>outputs</p>
<pre class="lang-none prettyprint-override"><code>some text:
    this print with tab
    and this print with tab
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Option 1: Use a separate method</strong></p>
<p>Define a method:</p>
<pre><code>def tprint(*args, **kwargs):
  print('\t', *args, **kwargs)
</code></pre>
<p>and just call it instead of <code>print</code></p>
<p><strong>Option 2: Use decorator</strong></p>
<p>Inspired by vaultah`s answer:</p>
<pre><code>def maketabbed(func):
    def tabbed():
      output = io.StringIO()
      with contextlib.redirect_stdout(output):
        func()
      for line in output.getvalue().splitlines():
        print('\t' + line)
    return tabbed

@maketabbed
def func():
  print('this print with tab')
  print('and this print with tab')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just define a function that prepend a tab.</p>
<pre><code>def myPrintTab(*msg):
    print("\t",*msg)
</code></pre>
<p>Then use it instead of print where you need.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can introduce an optional argument that would trigger the <code>'\t'</code>:</p>
<pre><code>def func(t=False):
   t = '\t' if t else ''
   print(t + 'this print with tab')
   print(t + 'and this print with tab')

print('some text:')
func(True)
</code></pre>
</div>
<span class="comment-copy"><code>print('\tStuff')</code>. What's the problem here?</span>
<span class="comment-copy">No, because there are cases when i call func without additional print above. In these cases a want all prints in the function to be without tabs.</span>
<span class="comment-copy">Then you should add an argument to <code>func</code> that would determine whether to print <code>'\t'</code> or not.</span>
<span class="comment-copy">Yes, this is the solution, but I'm looking for a more elegant solution. Maybe this task is solved using decorators.</span>
<span class="comment-copy">No, decorators cannot alter the body of the function.</span>
<span class="comment-copy">This limits the print to a single string</span>
<span class="comment-copy">yes but this is the basic idea, it can be refined by using varargs</span>
