<div class="post-text" itemprop="text">
<p>I have a scheduling function and a scheduler with a queue of future events ordered by time. I'm using UNIX timestamps and the regular <code>time.time()</code>. One fragment of the scheduler is roughly equivalent to this:</p>
<pre><code># select the nearest event (eventfunc at eventime)
sleeptime = eventtime - time.time()
# if the sleep gets interrupted,
# the whole block will be restarted
interruptible_sleep(sleeptime)
eventfunc()
</code></pre>
<p>where the <code>eventtime</code> could be computed either based on a delay:</p>
<pre><code>eventtime = time.time() + delay_seconds
</code></pre>
<p>or based on an exact date and time, e.g.:</p>
<pre><code>eventtime = datetime(year,month,day,hour,min).timestamp()
</code></pre>
<hr/>
<p>Now we have the monotonic time in Python. I'm considering to modify the scheduler to use the monotonic time. Schedulers are supposed to use the monotonic time they say.</p>
<p>No problem with delays:</p>
<pre><code>sleeptime = eventtime - time.monotonic()
</code></pre>
<p>where:</p>
<pre><code>eventtime = time.monotonic() + delay_seconds
</code></pre>
<p>But with the exact time I think the best way is to leave the code as it is. Is that correct?</p>
<p>If yes, I would need two event queues, one based on monotonic time and one based on regular time. I don't like that idea much.</p>
</div>
<div class="post-text" itemprop="text">
<p>As I said in the comment, your code duplicates the functionality of the <a href="https://docs.python.org/3/library/sched.html" rel="nofollow noreferrer"><code>sched</code> standard module</a> - so you can as well use solving this problem as a convenient excuse to migrate to it.</p>
<p>That said,</p>
<ul>
<li><strong>what you're supposed to do if system time jumps forward or backward is task-specific.</strong></li>
<li><code>time.monotonic()</code> is designed for cases when you need to do things with set intervals between them regardless of anything</li>
<li>So, <strong>if your solution is expected to instead react to time jumps by running scheduled tasks sooner or later than it otherwise would, in accordance with the new system time, you have no reason to use monotonic time.</strong></li>
</ul>
<p>If you wish to do <em>both</em>, then you either need two schedulers, or tasks with timestamps of the two kinds.</p>
<p>In the latter case, the scheduler will need to convert one type to the other (every time it calculates how much to wait/whether to run the next task) - for which <code>time</code> provides no means.</p>
</div>
<span class="comment-copy">You may wish to look at the <a href="https://docs.python.org/3/library/sched.html" rel="nofollow noreferrer"><code>sched</code> standard module</a>. It's designed to be independent from time manipulation backend and uses <code>time.monotonic</code> by default.</span>
<span class="comment-copy">My program only assumes that NTP is well configured, i.e. the server has the exact time without jumps. However it's always good to have a more robust solution just for the case. That's why I'm investigating the pros and cons of the monotonic clock. You did not directly answer my question. Are two event queues required to take advantage of the monotonic clock in a scheduler? One queue - for delays, intervals, etc. -  working with <code>time.monotonic</code> and another queue - for scheduling at exact date/times - working with <code>time.time</code>?</span>
<span class="comment-copy">see the update.</span>
