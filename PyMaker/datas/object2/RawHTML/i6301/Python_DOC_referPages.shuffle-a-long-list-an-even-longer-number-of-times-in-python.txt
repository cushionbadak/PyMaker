<div class="post-text" itemprop="text">
<p>I want to shuffle a long sequence (say it is has more than 10000 elements)a lot of times (say 10000). When reading <a href="https://docs.python.org/3/library/random.html" rel="noreferrer">Python Random documentation</a>, I found the following: </p>
<blockquote>
<p>Note that even for small len(x), the total number of permutations of x can quickly grow larger than the period of most random number generators. This implies that most permutations of a long sequence can never be generated. For example, a sequence of length 2080 is the largest that can fit within the period of the Mersenne Twister random number generator</p>
</blockquote>
<p>I have two groups (could be more) and each has many values. The sequence I want to shuffle is the list of all values available regardless of the group. My concern is that the note implies that the shuffle I need may not be provided by the random.shuffle() function.</p>
<p>I have thought about some workarounds:</p>
<ul>
<li>Initialize the random number generator (with random.seed()) several in certain iterations. That way, it does not matter if the permutations are more than the period because different seeds will get different results.</li>
<li>Use sample(range(length of sequence), k=size of a group) to get random indices an then use those to index within each group. That way I may not run out of permutations due to the period of the random number generator.</li>
</ul>
<p>Would any of my alternatives help?</p>
<p>Thanks a lot!</p>
</div>
<div class="post-text" itemprop="text">
<p>Well <code>10,000! ~= 10^36,000</code> That is a lot of possible permutations. The best you could do is to delve into how your operating system or hardware accumulates "truly random" bits. You could then wait for ~120,000 bits of randomness that you are OK with then use the algorithm that generates the n'th permutation of your input list given that random n.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.random.shuffle.html" rel="nofollow noreferrer">numpy shuffle function</a> to shuffle the list elements in-place</p>
<pre><code>import numpy as np

L = range(0, 10000)
np.random.shuffle(L)
</code></pre>
<p>Timing the shuffle call (in Jupyter)</p>
<pre><code>%timeit np.random.shuffle(L)
</code></pre>
<p>you get</p>
<pre><code>10000 loops, best of 3: 182 Âµs per loop
</code></pre>
</div>
<span class="comment-copy">I disagree @sasha: if not all permutations can be reached with equal probability, the shuffle won't be fully random - there will be a measure of predictability that could be exploited.</span>
<span class="comment-copy">@OP, you may want to look into the <code>crypto</code> module to see if it offers an alternative that you could use?</span>
<span class="comment-copy"><a href="https://cs.stackexchange.com/questions/9199/best-random-permutation-employing-only-one-random-number">Valuable read</a>.</span>
<span class="comment-copy">I have seen the shuffle function in the Random package. I am now even more confused. I do not know if I should be concerned at al <a href="https://github.com/python/cpython/blob/3.6/Lib/random.py" rel="nofollow noreferrer">github.com/python/cpython/blob/3.6/Lib/random.py</a></span>
<span class="comment-copy">the problem here would be the order in which permutations occur and its amount. To select as you say, I think I would need to store all possible permutations, which is impossible.</span>
<span class="comment-copy">No, there is a distinct algorithm where you give it a list, and the "index" of the permutation needed and it spits it out without generating anywhere like all the permutations .  I have used it and posted it before but It would take ten minutes to find again...</span>
<span class="comment-copy">...Ah, <a href="http://rosettacode.org/wiki/Permutations/Rank_of_a_permutation" rel="nofollow noreferrer">here</a> is the Rosetta Code task I started; and <a href="https://stackoverflow.com/a/13056801/10562">here</a> I answer a similar task on SO.</span>
<span class="comment-copy">And does that fix OP's issue?</span>
<span class="comment-copy">This does not fix the problem Juan Ardave: you can see <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/routines.random.html" rel="nofollow noreferrer">here</a> that numpy random uses the mersene twister generator too.</span>
<span class="comment-copy">It indeed does not solve it</span>
