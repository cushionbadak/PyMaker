<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/16571150/how-to-capture-stdout-output-from-a-python-function-call">How to capture stdout output from a Python function call?</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I have a <code>python</code> script which runs succesfully from the Linux terminal. I am able to collect the terminal output to a file using a <code>shell script</code> when I run my <code>python</code> script.</p>
<p>Now I want to collect the terminal output from the <code>python script</code> itself. But unable to do so.</p>
<blockquote>
<p>I want to do this using <code>python</code> only not using any <code>shell</code> or <code>unix</code> scripting</p>
</blockquote>
<p>I have done like below in my <code>python file</code>:</p>
<pre><code>class Tee(object):
    def __init__(self, f1, f2):
        self.f1, self.f2 = f1, f2
    def write(self, msg):
        self.f1.write(msg)
        self.f2.write(msg)

outfile = open('outfile', 'w')

sys.stdout = outfile
sys.stderr = Tee(sys.stderr, outfile)
</code></pre>
<p>This part of code in the <code>python file</code> prints both <code>stderr</code> and <code>stdout</code> to a outfile.</p>
<p>How can I capture the whole terminal output to a single file.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're okay with the requirement of having <code>python</code> in your <code>PATH</code>, then I'd call another python process to run your main script. </p>
<p>In your top-level script, use the <code>subprocess.Popen</code> to start your desired script in a child process. Then use <code>subprocess.Popen.communicate()</code> to get the output streams from the process (and probably pass any command-line arguments into the process).</p>
<p>You might even be able to redirect all std* output to files just with Popen, but this really depends on your needs and whatnot. <code>communicate()</code> seems pretty useful for what you might want to do.</p>
<ul>
<li><a href="https://docs.python.org/3.6/library/subprocess.html#subprocess.Popen" rel="nofollow noreferrer">subprocess.Popen</a></li>
<li><a href="https://docs.python.org/3.6/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow noreferrer">subprocess.Popen.communicate</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You can use something like this in your code:        <code>os.system('pdv -t %s &gt; 123.txt' % epoch_name)</code>
You could also look into this: <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">Subprocess</a></p>
</div>
<span class="comment-copy">What do you mean by "capture the whole terminal output"? The code above does already write everything to <code>outfile</code>. Although using <code>contextlib.redirect_(stdout|stderr)</code> would be easier.</span>
<span class="comment-copy">@YSelf My code prints only <code>print</code> statements into the file, I want all the logging that shows up on the <code>terminal</code> to be included as well</span>
