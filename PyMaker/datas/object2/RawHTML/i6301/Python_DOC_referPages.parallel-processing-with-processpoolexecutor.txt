<div class="post-text" itemprop="text">
<p>I have a huge list of elements which somehow must be processed. 
I know that it can be done with Process from multiprocessing by:</p>
<pre><code>pr1 = Process(calculation_function, (args, ))
pr1.start()
pr1.join()
</code></pre>
<p>and so I can create lets say 10 processes and pass arguments split by 10 to args. And then job is done.</p>
<p>But I do not want to create it manually and calculate it manually. Instead I want to use <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer">ProcessPoolExecutor</a> and I am doing it like this:</p>
<pre><code>executor = ProcessPoolExecutor(max_workers=10)
executor.map(calculation, (list_to_process,))
</code></pre>
<p>calculation is my function which do the job. </p>
<pre><code>def calculation(list_to_process):
    for element in list_to_process:
        # .... doing the job
</code></pre>
<p>list_to_process is my list to be processed. </p>
<p>But instead after running this code, iteration on loop goes just one time. 
I thought that </p>
<pre><code>executor = ProcessPoolExecutor(max_workers=10)
executor.map(calculation, (list_to_process,))
</code></pre>
<p>is the same as this 10 times:</p>
<pre><code>pr1 = Process(calculation, (list_to_process, ))
pr1.start()
pr1.join()
</code></pre>
<p>But it seems to be wrong. </p>
<p>How to achieve real multiprocessing by ProcessPoolExecutor?</p>
</div>
<div class="post-text" itemprop="text">
<p>Remove the <code>for</code> loop from your <code>calculation</code> function.  Now that you're using <code>ProcessPoolExecutor.map</code>, that <code>map()</code> call <em>is</em> your loop, the difference being that each element in the list is sent to a different process.  E.g.</p>
<pre><code>def calculation(item):
    print('[pid:%s] performing calculation on %s' % (os.getpid(), item))
    time.sleep(5)
    print('[pid:%s] done!' % os.getpid())
    return item ** 2

executor = ProcessPoolExecutor(max_workers=5)
list_to_process = range(10)
result = executor.map(calculation, list_to_process)
</code></pre>
<p>You'll see something in the terminal like:</p>
<pre><code>[pid:23988] performing calculation on 0
[pid:10360] performing calculation on 1
[pid:13348] performing calculation on 2
[pid:24032] performing calculation on 3
[pid:18028] performing calculation on 4
[pid:23988] done!
[pid:23988] performing calculation on 5
[pid:10360] done!
[pid:13348] done!
[pid:10360] performing calculation on 6
[pid:13348] performing calculation on 7
[pid:18028] done!
[pid:24032] done!
[pid:18028] performing calculation on 8
[pid:24032] performing calculation on 9
[pid:23988] done!
[pid:10360] done!
[pid:13348] done!
[pid:18028] done!
[pid:24032] done!
</code></pre>
<p>Though the order of events will be effectively random.  The return value (at least in my Python version), is actually an <a href="https://docs.python.org/3.6/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain</code></a> object for some reason.  But that's an implementation detail.  You can return the result as a list like:</p>
<pre><code>&gt;&gt;&gt; list(result)
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
</code></pre>
<p>In your example code you've instead passed a single-element tuple <code>(list_to_process,</code>) so that's just going to pass your full list to one process.</p>
</div>
<span class="comment-copy">Thank you for your reply! I do not fully understand.. Where iteration over list_to_process should be? So I must use one element from my list in for-loop</span>
<span class="comment-copy">@John nowhere, <code>executor.map</code> allready iterates over each element in list and applies it as argument to calculation function</span>
<span class="comment-copy">As I explained, the iteration is being performed by <code>ProcessPoolExecutor.map()</code>.  This is basically equivalent to:  <code>for item in list_to_process: calculation(item)</code>, except that <code>calculation</code> may be called in a difference process for each item.</span>
<span class="comment-copy">Play around with the <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> built-in function and make sure you understand how that works.  <code>ProcessPoolExecutor.map</code> is doing the same thing, but with each calculation being farmed out to a different process, and then the results gathered up in the correct order.</span>
<span class="comment-copy">What do you mean by "no iteration appears"?  If your processes are all running then they're all producing results.  If you want the final result your need to assign the return value of <code>executor.map</code> to a variable. I think the return value itself is an iterable type so you may have to wrap it in <code>list()</code> to get an actual <code>list</code> object.</span>
