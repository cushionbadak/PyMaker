<div class="post-text" itemprop="text">
<p>I'm using python logging with the following format string:</p>
<pre><code>'format': '%(asctime)s %(levelname)s %(name)s - %(message)s'
</code></pre>
<p>The <code>%(name)s</code> part prints the logger name:</p>
<pre>
2017-10-26 13:17:58,019 INFO device_gps.comm.<b>protocol</b> - GPSProtocol(port=COM13) - Starting GPS serial communications (port: COM13)
2017-10-26 13:17:58,022 INFO scs_control.<b>context</b> - Starting component: DeviceGPS
2017-10-26 13:17:58,033 INFO scs_elevation.<b>elevation</b> - Initializing ElevationModel engine instance.
</pre>
<p>Like with other logging facilities (like <em>log4j</em>) I'd like to print only the last part of the logger name for brevity (shown in bold in the example above).</p>
<p>This <a href="https://stackoverflow.com/questions/25671409/python-logger-print-child-logger-name-without-parent-name">other answer</a> suggests to change the logger name, but doing so would destroy the parent-child logger relationship, which is really useful to configure logging for a group of loggers. </p>
<p>How can I have python logging print the last part of a logger name?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can set a filter to set a <code>LogRecord</code> attribute to the last part of the logger name, and use that in your format string. For example, running this script:</p>
<pre><code>import logging

class LastPartFilter(logging.Filter):
    def filter(self, record):
        record.name_last = record.name.rsplit('.', 1)[-1]
        return True

logger = logging.getLogger()
handler = logging.StreamHandler()
formatter = logging.Formatter('%(name_last)s %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)
handler.addFilter(LastPartFilter())

logging.getLogger('foo').warning('Watch out - foo!')
logging.getLogger('foo.bar').warning('Watch out - foo.bar!')
logging.getLogger('foo.bar.baz').warning('Watch out - foo.bar.baz!')
</code></pre>
<p>produces this:</p>
<blockquote>
<p>foo Watch out - foo!<br/>
  bar Watch out - foo.bar!<br/>
  baz Watch out - foo.bar.baz!</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The attributes available for use in logging are listed <a href="https://docs.python.org/2/library/logging.html#logrecord-attributes" rel="nofollow noreferrer">here</a></p>
<p>You probably want your format to be <code>'%(asctime)s %(levelname)s %(module)s - %(message)s'</code>.</p>
</div>
<span class="comment-copy">Awesome. Didn't know or realize filters could add fields (rather, formatting strings use the log record as data object for string interpolation). Thanks a lot, you rock!</span>
<span class="comment-copy">@jjmontes Using filters to add fields is documented here: <a href="https://docs.python.org/3/howto/logging-cookbook.html#using-filters-to-impart-contextual-information" rel="nofollow noreferrer">docs.python.org/3/howto/â€¦</a></span>
<span class="comment-copy">Thanks for the answer. Unfortunately some of my loggers belong to third party libraries with not-so-meaningful module names. I can set the logger name but not the module name, hence I'm looking to use the last part of the name instead of the module.</span>
