<div class="post-text" itemprop="text">
<p>I'm a little confused at some behavior of the <code>time.time()</code> function, and am curious as to whether I'm just being ignorant.</p>
<p>Alright, so I know I can unpack and assign two function calls like this:</p>
<pre><code>&gt;&gt;&gt; import time
&gt;&gt;&gt; beg, end = time.time(), time.time()
&gt;&gt;&gt; beg == end
True
</code></pre>
<p><s>This equality makes sense, as at the time of execution, the first <code>time.time()</code> and the second <code>time.time()</code> are the same -- they're evaluated at the same point in time.</s></p>
<p>What's more confusing is this:</p>
<pre><code>&gt;&gt;&gt; beg = time.time(); end = time.time()
&gt;&gt;&gt; beg == end
True
</code></pre>
<p>This equality I find weird. I guess <code>time.time()</code> only rounds to 7 decimal places, and maybe Python's quick enough to execute both of these commands in less than 0.0000001 seconds (my gut tells me this is the case). I thought this equality was maybe just Python being really quick one time, so I tried it lots of times:</p>
<pre><code>for _ in range(10000):
    beg = time.time(); end = time.time()
    assert beg == end
</code></pre>
<p>For me, this raises no <code>AssertionError</code>. What's the deal, here? Is Python quicker than I'm giving it credit for? My assumption is that <code>;</code>-separated statements evaluate consecutively, but not simultaneously (thus my astonishment that <code>beg</code> never didn't equal <code>end</code>).</p>
<p>Edit:</p>
<p>Here's what <code>time.time()</code> returns for me, along with the specs of my machine:</p>
<pre><code>Python 3.6.0 (v3.6.0:41df79263a11, Dec 23 2016, 07:18:10) [MSC v.1900 32 bit (Intel)] on win32
Type "copyright", "credits" or "license()" for more information.
&gt;&gt;&gt; import time
&gt;&gt;&gt; time.time()
1508532204.5873115
&gt;&gt;&gt; time.time()
1508532250.9893117
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First, the assumption about unfolding the list is just wrong. <code>beg, end = time.time(), time.time()</code> can provide different values of time, since the <code>time()</code> function is calculated twice, and can return separate results.</p>
<p>Specifically, Python builds a tuple of two time values first <code>(time.time(), time.time())</code>. And then unpacks that tuple into the variables <code>beg, end</code>.</p>
<p>There is no special magic with paralellisation or values caching or even var-by-var assignment (consider: <code>a,b = b,a</code> value-swapping pattern: it literally does <code>t = (b,a); (a,b) = t</code>).</p>
<hr/>
<p>Second, the timestamps comparison highly depends on your system (OS mostly).</p>
<p>For <code>time.time()</code>, the fine-grained resolution is just not guaranteed:</p>
<blockquote>
<p>Note that even though the time is always returned as a floating point
  number, not all systems provide time with a better precision than 1
  second.</p>
</blockquote>
<p>On the unix systems (not MacOSX), you can try using <a href="https://docs.python.org/3/library/time.html#time.clock_getres" rel="nofollow noreferrer"><code>time.clock_getres(clk_id)</code></a> to get the clock resolution.</p>
<p>On Windows, as it seems to be your case, you can probably find the information from the Win32 calls to <code>QueryPerformanceCounter()</code> mentioned in the manual for <a href="https://docs.python.org/3/library/time.html#time.clock" rel="nofollow noreferrer"><code>time.clock()</code></a> (I do not have enough knowledge to comment on the Windows APIs).</p>
<p>You should also google for the time precision on your OS to answer this question, as it is not much python-related.</p>
<p>If the resolution is not enough for such measurements, and the CPU is very fast (typical for nowadays), then the time measurements will be too close to distinguish them. They will be different and far apart if measured in the CPU tacts, of course. But not different in the minimum available time units.</p>
<p>To notice that, try executing your code on the much slower machine or when the CPU is highly overloaded with some computational tasks (i.e. 99-100% CPU used), and cannot spend too much time on your process. It is better if the CPU is not just busy with one process, but switches the context very often between multiple processes â€” e.g. by having few hundreds of CPU-intensive processes or maybe 1-2 thousands of just idling CPUs (as in the fork bomb).</p>
<hr/>
<p>UPD: TO the added details on the question: the number of the digits after the comma says nothing about the time resolution on your machine, except that it is not 1 sec.</p>
<p>The OS just measures something within the 1-second frames. The result depends not only on the clock resolution, but also at which time the time request was made, and it can vary.</p>
<p>Not to mention the problems with the floating precision, where the fractions can be improperly rounded to the nearest "fitting" float. Compare the precision of the floats depending on how big is the part before the comma:</p>
<pre><code>&gt;&gt;&gt; 2/3
0.6666666666666666

&gt;&gt;&gt; 2000000/3
666666.6666666666

&gt;&gt;&gt; 200000000000/3
66666666666.666664   # &lt;== Surprise! ;-)
</code></pre>
</div>
<span class="comment-copy">It's False every time for me. What do you actually get out of <code>time.time()</code>? What is your system time set to, and is it actually ticking?</span>
<span class="comment-copy">Also, "at the time of execution, the first time.time() and the second time.time() are the same -- they're evaluated at the same point in time" - that's not how it works.</span>
<span class="comment-copy">@user2357112 how "does it work," then? In the tuple-unpacking example, are they evaluated consecutively, too?</span>
