<div class="post-text" itemprop="text">
<p>I have a list </p>
<pre><code>lst = []
</code></pre>
<p>I have dict entries</p>
<pre><code>a= {'a':1,'b':2}
</code></pre>
<p>I wish to write a for loop in a comprehension manner filling the list. 
What I have tried is </p>
<pre><code>lst.append(k,v) for (k,v) in a.items()
</code></pre>
<p>I need to then update the dict as</p>
<pre><code>a = {'c':3, 'd':4}
</code></pre>
<p>Then again update the list <code>lst</code>.</p>
<p>Which adds the tuples as <code>[('a',1)('b',2)('c',3)('d',4)]</code>
What is the right way to iterate through a dict and fill the list? </p>
</div>
<div class="post-text" itemprop="text">
<p>This is what the syntax for a list comprehension is and should do what you're looking for:</p>
<pre><code>lst = [(k,v) for k,v in a.items()]
</code></pre>
<p>In general <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> works like this:</p>
<pre><code>someList = [doSomething(x) for x in somethingYouCanIterate]
</code></pre>
<p><strong>OUTPUT</strong></p>
<pre><code>&gt;&gt;&gt; lst
[('a', 1), ('b', 2)]
</code></pre>
<p><strong>P.S.</strong> Apart from the question asked, you can also get what you're trying to do without list comprehension by simply calling :</p>
<pre><code>lst = a.items()
</code></pre>
<p>this will again give you a list of tuples of <code>(key, value)</code> pairs of the dictionary items.</p>
<p><strong>EDIT</strong></p>
<p>After your updated question, since you're updating the dictionary and want the key value pairs in a list, you should do it like:</p>
<pre><code>a= {'a':1,'b':2}
oldA = a.copy()
#after performing some operation
a = {'c':3, 'd':4}
oldA.update(a)
# when all your updates on a is done
lst = oldA.items() #or [(k,v) for k,v in oldA.items()]
# or instead of updating a and maintaining a copy
# you can simply update it like : a.update({'c':3, 'd':4}) instead of a = {'c':3, 'd':4}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One approach is:</p>
<pre><code>a = {"a" : 1, "b" : 2}

lst = [(k, a[k]) for k in a]

a = {"c" : 3, "d" : 4}

lst += [(k, a[k]) for k in a]
</code></pre>
<p>Where the contents of <code>lst</code> are <code>[('a', 1), ('b', 2), ('c', 3), ('d', 4)]</code>.</p>
<p>Alternatively, using the <code>dict</code> class' <code>.items()</code> function to accomplish the same:</p>
<pre><code>a = {"a" : 1, "b" : 2}

lst = [b for b in a.items()]

a = {"c" : 3, "d" : 4}

lst += [b for b in a.items()]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are many valid ways to achieve this. The most easy route is using</p>
<pre><code>a = {"a" : 1, "b" : 2}
lst = list(a.items())
</code></pre>
<p>Alternatives include using the <code>zip</code> function, list comprehension etc.</p>
</div>
<span class="comment-copy">What do you want the list to be filled up with ? <code>keys</code>, <code>values</code> or both ?</span>
<span class="comment-copy">Both. As in this example like lst = [('a',1)('b',2)]</span>
<span class="comment-copy">append will take only one arguement</span>
<span class="comment-copy">Try <code>lst  = a.items()</code></span>
<span class="comment-copy">@ZdaR see the updated answer, is this what you're trying to do?</span>
<span class="comment-copy">Thank you Ashish. This gives me <code>dict_items([('a', 1), ('b', 2), ('c', 3), ('d', 4)])</code>. If I need to convert it to a list of tuples. What would be the procedure?</span>
<span class="comment-copy">simply use <code>list()</code> for that</span>
<span class="comment-copy">Use a.items() instead of iterating over keys. items() will give a you tuple.</span>
<span class="comment-copy">@FujiClado Nice! I just edited the answer to incorporate that.</span>
<span class="comment-copy">why your using zip()? it can be done using a.items() , it's more readable.</span>
<span class="comment-copy"><code>zip</code> was intended to demonstrate alternative ways. You are, however, correct in that this reduces readability, so I updated the answer accordingly, while still mentioning the <code>zip</code> function.</span>
