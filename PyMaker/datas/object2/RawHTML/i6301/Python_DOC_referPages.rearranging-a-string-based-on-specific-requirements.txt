<div class="post-text" itemprop="text">
<p>Hi there so I am looking to build this python function with simple things like def, find etc. so far I know how to get the first part of the code.</p>
<p>Given a string such as "HELLODOGMEMEDOGPAPA", I will need to return a list that gives me three things:</p>
<p>Everything before the word dog which i will denote as before_dog
The word dog until dog appears again dog_todog
Everything after the second time dog appears will be denoted by after_todog
The list will be in the form [before_dog,dog_todog,after_todog].</p>
<p>so for example given ("HELLODOGMEMEDOGPAPADD") this will return the list
("HELLO","DOGMEME","DOGPAPADD") </p>
<p>another example would be ("HEYHELLOMANDOGYDOGDADDY") this would return the list
("HEYHELLOMAN","DOGY","DOGDADDY")</p>
<p>but if I have ("HEYHELLODOGDADDY")
the output will be ("HEYHELLO","DOGDADDY","")</p>
<p>also if dog never appears ("HEYHELLOYO") then the output will be ("HEYHELLOYO,"","")</p>
<p>This is what I have so far:</p>
<pre><code>def split_list(words):
    # declare the list
    lst = []
    # find the first position
    first_pos=words.find("DOG")
    # find the first_pos
    before_dog = words [0:first_pos]
    lst.append(before_dog)
    return lst
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Funny function <code>split_2_dogs()</code> with <code>re.findall()</code> function:</p>
<pre><code>import re

def split_2_dogs(s):
    if s.count('DOG') == 2:   # assuring 2 dogs are "walking" there
        return list(re.findall(r'^(.*)(DOG.*)(DOG.*)$', s)[0])

print(split_2_dogs("HELLODOGMEMEDOGPAPADD"))
print(split_2_dogs("HEYHELLOMANDOGYDOGDADDY"))
</code></pre>
<p>The output:</p>
<pre><code>['HELLO', 'DOGMEME', 'DOGPAPADD']
['HEYHELLOMAN', 'DOGY', 'DOGDADDY']
</code></pre>
<hr/>
<p>Alternative solution with <code>str.index()</code> and <code>str.rfind()</code> functions:</p>
<pre><code>def split_2_dogs(s):
    if 'DOG' not in s: return [s,'']
    pos1, pos2 = s.index('DOG'), s.rfind('DOG')
    return [s[0:pos1], s[pos1:pos2], s[pos2:]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is pretty easy to do using the <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>split</code></a> function. For example, you can split any string by a delimiter, like dog, as so:</p>
<pre><code>&gt;&gt;&gt; chunks = 'HELLODOGMEMEDOGPAPA'.split('DOG')
&gt;&gt;&gt; print(chunks)
['HELLO', 'MEME', 'PAPA']
</code></pre>
<p>You could then use the output of that in a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>, like so:</p>
<pre><code>&gt;&gt;&gt; dog_chunks = chunks[:1] + ["DOG" + chunk for chunk in chunks[1:]]
&gt;&gt;&gt; print(dog_chunks)
['HELLO', 'DOGMEME', 'DOGPAPA']
</code></pre>
<p>The only slightly tricky bit is making sure you don't prepend dog to the first string in the list, hence the little bits of <a href="https://stackoverflow.com/questions/509211/understanding-pythons-slice-notation">slicing</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>Split</code> the string at 'DOG' and use conditions to get the desired result</p>
<pre><code>s = 'HELLODOGMEMEDOGPAPADD'
l = s.split('DOG')
dl = ['DOG'+i for i in l[1:]]
[l[0]]+dl if l[0] else dl
</code></pre>
<p>Output:</p>
<pre><code>['HELLO', 'DOGMEME', 'DOGPAPADD']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Splitting at <code>DOG</code> is the key!! This code will for all the cases that you have mentioned.</p>
<pre><code>from itertools import izip_longest

words = 'HEYHELLODOGDADDY'
words = words.split("DOG")
words = ['DOG'+j if i&gt;0 else j for i,j in enumerate(words)]
# words = ['HEYHELLO', 'DOGDADDY']
ans = ['','','']
# stitch words and ans together
ans = [m+n for m,n in izip_longest(words,ans,fillvalue='')]

print ans
</code></pre>
<p>Output :</p>
<pre><code>['HEYHELLO', 'DOGDADDY', '']
</code></pre>
</div>
<span class="comment-copy">should it be case-sensitive?</span>
<span class="comment-copy">no does not have to be case sensitive</span>
<span class="comment-copy">upvote for doggos n puppers</span>
<span class="comment-copy">What is wrong with what you have so far? What does it return? How does this differ from what you expect it to return?</span>
<span class="comment-copy">It will help if you write the steps to solve this problem <i>in words</i>. If you do this, you will see that you have already implemented some of those steps in the code you gave here. You will also see that you are missing a few steps to finish this.</span>
<span class="comment-copy">is it possible to do this without any ifs and just slicing or import</span>
<span class="comment-copy">@KirusanS, yes, see my update</span>
<span class="comment-copy">hey roman so how would I go about doing it if I wanted the first time dog appeared to always be in the second part of the list even if there is only one time that dog appears in the given string?</span>
<span class="comment-copy">@KirusanS, see my <b>last</b> update in the second approach</span>
<span class="comment-copy">what would I do if the dog does not appear the second time? then I just get an error</span>
<span class="comment-copy">@KirusanS So you are saying that for <code>HELLODOGPAPA</code> answer should be <code>('HELLO','DOGPAPA','')</code></span>
<span class="comment-copy">yes that is what it should be and if there is a second occurence of the string DOG then everything after including the second occurrence of dog will be the third part of the list</span>
<span class="comment-copy">do you know if this would be possible just by using the find and slicing functions with strings?</span>
<span class="comment-copy">@KirusanS First tell me, do you want to use the <code>split()</code> or not?</span>
