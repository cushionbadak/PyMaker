<div class="post-text" itemprop="text">
<p>i have a sequence of numbers like:</p>
<pre><code>1234
5678
778899
</code></pre>
<p>I want to convert them into a form where they start from the lowest number possible</p>
<p>Example:</p>
<pre><code>5678 would be 1234
778899 would be 112233
2452 would be 1231
</code></pre>
<p>I tried to do:</p>
<pre><code>index = 0
digit = 1
newCode = []
newCode.append(digit)

while index != len(codice)-1:
    index += 1

    if code[index] == code[index-1]:
        newCode.append(digit)

    else:
        digit += 1
        newCode.append(digit) 
</code></pre>
<p>But it converts numbers like 5675 to 1234, so it doesn't work.
Is there a better way to do this and what am i doing wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>This can be done with dictionaries:</p>
<p>Edit: So I might have misinterpreted the question. From the example cases I presumed it meant convert the first digit appearing to a 1, the second to a 2, etc..</p>
<pre><code>x = "5512"
function = {}
count = 1
output = ""

for digit in x:
     if digit in function:
         output += function[digit]
     else:
         function[digit] = str(count)
         count += 1
         output += function[digit]

print(output)
#Outputs 1123 (5-&gt;1, 1-&gt;2, 2-&gt;3)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>t = {}
int(''.join(t.setdefault(d, str(len(t) + 1)) for d in str(n)))
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; for n in 5678, 778899, 2452:
        t = {}
        print(n, '-&gt;', int(''.join(t.setdefault(d, str(len(t) + 1)) for d in str(n))))

5678 -&gt; 1234
778899 -&gt; 112233
2452 -&gt; 1231
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You only check whether the digit is equal to the last digit, but that does not work for, e.g., <code>2452</code>. You have to keep track of <em>all</em> the past digits, using e.g. a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">dictionary</a>, as in <a href="https://stackoverflow.com/a/47003522/1639625">@wjmccann answer</a>.</p>
<p>You can make this a bit shorter, though, by combining a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a> with a <a href="https://docs.python.org/3.5/library/itertools.html#itertools.count" rel="nofollow noreferrer"><code>count</code></a>. The <code>defaultdict</code> will memorize already seen digits, and the <code>count</code> provides values for new ones.</p>
<pre><code>import itertools, collections, functools

def convert(n):
    d = collections.defaultdict(functools.partial(next, itertools.count(1)))
    return int(''.join(str(d[x]) for x in str(n)))

print(convert(5678))   # 1234
print(convert(778899)) # 112233
print(convert(2452))   # 1231
</code></pre>
<p>Or even shorter, as suggested <a href="https://stackoverflow.com/questions/47003398/convert-a-number-into-another-according-to-a-rule/47003601?noredirect=1#comment80955524_47003601">in comments</a>:</p>
<pre><code>def convert(n):
    d = collections.defaultdict(list("987654321").pop)
    return int(''.join(d[x] for x in str(n)))
</code></pre>
<p>This again uses <code>defaultdict</code>, but uses <code>pop</code> from a list of digits as the factory function, removing elements from the end of the list as new digits are needed.</p>
</div>
<div class="post-text" itemprop="text">
<h3>One line solution using <code>.index()</code>:</h3>
<p><em>After being misled about what was trying to be achieved, this is my second answer which I think meets the requirements rather succinctly.</em></p>
<pre><code>from collections import OrderedDict
def transform(n):
    s = str(n)
    return int(''.join(str(list(OrderedDict.fromkeys(s)).index(e)+1) for e in s))
</code></pre>
<p>and some examples:</p>
<pre><code>&gt;&gt;&gt; transform(5678)
1234
&gt;&gt;&gt; transform(778899)
112233
&gt;&gt;&gt; transform(2452)
1231
</code></pre>
<hr/>
<p>The <code>code</code> takes advantage of the fact that <code>index</code> will essentially give you the <code>value</code> of a <code>digit</code> directly - without the need for a <code>dictionary</code>.</p>
<p>First, we remove the <code>duplicates</code> from the <code>string</code> using <code>OrderedDict.fromkeys()</code>. Then from this, we can check the <code>index</code> of each <code>digit</code> in that to get its <code>value</code>. We need to add <code>1</code> to the <code>index</code> as the first one should be <code>1</code> (not <code>0</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>TL;DR</strong></p>
<p>The following code works for your requirements, making use of <code>dictionary</code>.</p>
<pre><code>out = []
for n in num:
    digits = {}
    last_digit = 1

    new_num = ''

    #assign new values
    for s in str(n):                       #go through digits of number
        if digits.get(s, None) == None :    #if new digit not assigned
                digits[s] = str(last_digit)   #assign
                new_num += str(last_digit)
                last_digit += 1
        else :
                new_num += digits[s]         #get the val

    out.append(int(new_num))


print(out)
</code></pre>
<p>#driver values : </p>
<pre><code>IN : num = [1234, 5678, 778899, 2452]
OUT : [1234, 1234, 112233, 1231]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>if code[index] == code[index-1]:</p>
<p>newCode.append(1)           </p>
<pre><code>    you using digit variable in both place..
</code></pre>
<p>else: </p>
<p>digit += 1<br/>
   newCode.append(digit) </p>
</div>
<span class="comment-copy">"I want to convert them into a form where they start from the lowest number possible" ????????!!! I don't understand anything here. Where do these numbers come from??</span>
<span class="comment-copy">Do you mean you want to subtract the same value from each decimal digit in the input number, and result in an output number where one of the decimal digits is <code>1</code> (so no larger number could have been subtracted from each digit)?</span>
<span class="comment-copy">I think he means that he wants to map the digits of the input number to a new set of digits such that the resulting number is minimal.</span>
<span class="comment-copy">Aren't you mapping from a set of 10 digits onto 9 digits?  Otherwise <code>5678</code> would be <code>0123</code></span>
<span class="comment-copy">@glibdud what do you mean by a <code>"minimal number"</code>?</span>
<span class="comment-copy">I understood the question the same as you. I think this is what the OP is looking for.</span>
<span class="comment-copy">Nice answer. As the OP is probably fairly new to python, it might benefit from some explanation.</span>
<span class="comment-copy">And I thought <i>mine</i> was short...</span>
<span class="comment-copy">For anyone (like me) who hasn't seen <a href="https://www.tutorialspoint.com/python/dictionary_setdefault.htm" rel="nofollow noreferrer"><code>dict.setdefault</code></a> before.</span>
<span class="comment-copy">@glibdud Hmm, not sure what to write. I now started a few explanation attempts but didn't like any. Code is much easier to write. And much more fun. (In other words, I guess I prefer talking to computers over talking to people? :-)</span>
<span class="comment-copy">How about <code>d = collections.defaultdict(itertools.count(1).__next__)</code>?</span>
<span class="comment-copy">@StefanPochmann Yes, that's how I had it in my first version, but while requiring another import, I found this version a bit cleaner.</span>
<span class="comment-copy">Or <code>defaultdict(list('987654321').pop)</code>. Also has the advantage that you already get strings :-)</span>
<span class="comment-copy">@StefanPochmann Nice one. Also, makes me wonder what happens if the number actually has 10 different digits...</span>
<span class="comment-copy">Haha, yeah, it made me wonder about that as well :-). But I ended up deciding that that's not allowed. Because it would require "0" to be allowed in the output as well, and then the given examples would all be wrong. For example, 5678 should then become 0123 or 1023.</span>
<span class="comment-copy">Nice one. Slight variation, more efficient for really long strings: <code>d = dict(zip(OrderedDict.fromkeys(s), count(1))); return int(''.join(str(d[e]) for e in s))</code></span>
<span class="comment-copy">Yes this looks good</span>
<span class="comment-copy">@tobias_k What is <code>count(1)</code> here? This is my first time using <code>OrderedDict</code> so if its specific to <code>collections</code> or something I have no clue!</span>
<span class="comment-copy">@JoeIddon I mean't <a href="https://docs.python.org/3.5/library/itertools.html#itertools.count" rel="nofollow noreferrer"><code>itertools.count</code></a> that I used in my answer, sorry, should have been more specific.</span>
