<div class="post-text" itemprop="text">
<p>Let's say I have two lists <code>list1</code> and <code>list2</code> as:</p>
<pre><code>list1 = [ 3, 4, 7 ]
list2 = [ 5, 2, 3, 5, 3, 4, 4, 9 ]
</code></pre>
<p>I want to find the count of the elements of <code>list1</code> which are present in <code>list2</code>.</p>
<p><strong>Expected output is 4</strong> because 3 and 4 from <code>list1</code> are appearing twice in <code>list2</code>. Hence, total count is as 4. </p>
</div>
<div class="post-text" itemprop="text">
<p>Use list comprehension and check if element exists </p>
<pre><code>c =  len([i for i in list2 if i in list1 ])
</code></pre>
<p>Better one from @Jon i.e </p>
<pre><code>c = sum(el in list1 for el in list2)
</code></pre>
<p>Output : <code>4</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can iterate <code>first</code> list and <code>add</code> <strong>occurences</strong> of a given number to a <code>sum</code> using <code>count</code> method.</p>
<pre><code>for number in list1: 
   s += list2.count(number);
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use collections.Counter here, so a naive and rather ugly implementation first (mine). </p>
<pre><code>list1 = [ 3, 4, 7 ]
list2 = [ 5, 2, 3, 5, 3, 4, 4, 9 ]
from collections import Counter
total = 0 
c = Counter(list2)
for i in list1: 
  if c[i]: 
    total += c[i]
</code></pre>
<p>This doesn't take into account what happens if you've got duplicates in the first list (HT Jon), and a much more elegant version of this would be:</p>
<pre><code>counter = Counter(list2)
occurrences = sum(counter[v] for v in set(list1))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may use <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum(...)</code></a> to achieve this with the generator expression as:</p>
<pre><code>&gt;&gt;&gt; list1 = [ 3, 4, 7 ]
&gt;&gt;&gt; list2 = [ 5, 2, 3, 5, 3, 4, 4, 9 ]

#         v returns `True`/`False` and Python considers Boolean value as `0`/`1`
&gt;&gt;&gt; sum(x in list1 for x in list2)
4 
</code></pre>
<p>As an alternative, you may also use Python's <code>__contains__</code>'s magic function to check whether element exists in the list and use <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer"><code>filter(..)</code></a> to filter out the elements in the list not satisfying the <em>"in"</em> condition. For example:</p>
<pre><code>&gt;&gt;&gt; len(list(filter(list1.__contains__, list2)))
4

# Here "filter(list(list1.__contains__, list2))" will return the 
# list as: [3, 3, 4, 4]
</code></pre>
<p>For more details about <code>__contains__</code>, read: <a href="https://stackoverflow.com/questions/1964934/what-does-contains-do-what-can-call-contains-function">What does <code>__contains__</code> do, what can call <code>__contains__</code> function?</a>.</p>
</div>
<span class="comment-copy">Why build a list here... while the check isn't effficient because of lists, you may as well write this as <code>sum(el in list1 for el in list2)</code></span>
<span class="comment-copy">Nevermind that using dunder methods isn't great practice - this will only work on Python 2</span>
