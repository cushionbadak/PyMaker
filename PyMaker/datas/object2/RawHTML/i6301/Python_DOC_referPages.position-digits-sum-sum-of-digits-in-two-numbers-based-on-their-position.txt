<div class="post-text" itemprop="text">
<p>I was working on a practice problem in a website and got stuck at a point.</p>
<p>The question is:</p>
<blockquote>
<p><strong>Position Digits Sum</strong></p>
<p>The program must accept two positive integers as the input and then
  print the sum of their unit digits, tenth digits and so on.</p>
<p>Input Format: The first line will contain A and B separated by a
  space.</p>
<p>Output Format: The first line will contain the sum of unit digits,
  tenth digits and so on with the values separated by a space.</p>
<p>Boundary Conditions: 1 &lt;= A,B &lt;= 9999999</p>
<p>Example Input/Output 1: Input: 23 49</p>
<p>Output: 12 6</p>
<p>Example Input/Output 2: Input: 12456 687</p>
<p>Output: 13 13 10 2 1</p>
</blockquote>
<p>Well I solved the problem but out of 6 test cases (which are hidden) 5 cases passed and 1 didn't.</p>
<p>This is my code:</p>
<pre><code>a,b = input().split()
assert 1&lt;=len(a)&lt;=7 and 1&lt;=len(b)&lt;=7
assert a.isdigit() == True and b.isdigit() == True
if len(a)&gt;1 and len(b)&gt;1:
    assert a[0] != '0' and b[0] != '0'
h = []
m = []
def pp(a,b):
    c = []
    for i in range(1,len(a)+1):
        x = int(a[-i])+int(b[-i])
        c.append(x)
    return c
if len(a)==len(b):
    g = pp(a,b)
    y = [str(i) for i in g]
    for i in range(0,len(y)-1):
        y[0] = y[0]+' '+y[1]
        y.remove(y[1])
    print(y[0])
if len(a)&gt;len(b):
    d = abs(len(a)-len(b))
    for i in range(0,d):
        h.append(a[i])
        r = a.replace(a[0:d],'')
    p = pp(r,b)
    p = p+h[::-1]
    t = [str(i) for i in p]
    for i in range(0,len(t)-1):
        t[0] = t[0]+' '+t[1]
        t.remove(t[1])
    print(t[0])
if len(a)&lt;len(b):
    d = abs(len(a)-len(b))
    for i in range(0,d):
        m.append(b[i])
        u = b.replace(b[0:d],'')
    q = pp(a,u)
    q = q + m[::-1]
    e = [str(i) for i in q]
    for i in range(0,len(e)-1):
        e[0] = e[0]+' '+e[1]
        e.remove(e[1])
    print(e[0])
</code></pre>
<p>I am a beginner, so I only used simple python code which made it to too long.
I checked but didn't get what is wrong in it. Any help?</p>
</div>
<div class="post-text" itemprop="text">
<p>It could be done in very simplified way using <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer"><code>itertools.zip_longest()</code></a> in Python 3.x ( equivalent of <a href="https://docs.python.org/3/library/itertools.html#itertools.izip_longest" rel="nofollow noreferrer"><code>itertools.izip_longest()</code></a> in Python 2.7) as:</p>
<pre><code>&gt;&gt;&gt; from itertools import zip_longest
&gt;&gt;&gt; a = 123
&gt;&gt;&gt; b = 67891

&gt;&gt;&gt; [sum(map(int, x))for x in zip_longest(str(a)[::-1], str(b)[::-1], fillvalue=0)]
[4, 11, 9, 7, 6]
</code></pre>
<hr/>
<p><strong>Explanation:</strong> with step to step intermediate results in the above <em>list comprehension</em> expression:</p>
<ol>
<li><p>Type-casted <code>int</code> values to <code>str</code> in order to make them iterable. Reversed both the iterables so that they could be iterated in parallel with the correct power of 10 (required in next step).</p>
<pre><code>&gt;&gt;&gt; str(a)[::-1]
'321'
</code></pre></li>
<li><p>Then used them with <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer"><code>zip_longest</code></a> in order to iterate both the iterables in parallel. For example: </p>
<pre><code>&gt;&gt;&gt; list(zip_longest(str(a)[::-1], str(b)[::-1], fillvalue=0))
[('3', '1'), ('2', '9'), ('1', '8'), (0, '7'), (0, '6')]
</code></pre></li>
<li><p>Using <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a>, type-casted each string value in the above sub-list back to <code>int</code> as:</p>
<pre><code>&gt;&gt;&gt; list(map(int, ('3', '1')))
[3, 1]
</code></pre></li>
<li><p>Then, using <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum</code></a>, added values in the above list:</p>
<pre><code>&gt;&gt;&gt; sum([3, 1])
4
</code></pre></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>I didn't analyse your code in depth, but it contains invalid constructs like here:</p>
<pre><code>for i in range(0,len(y)-1):
    y[0] = y[0]+' '+y[1]
    y.remove(y[1])
</code></pre>
<p>here you're changing <code>y</code> while iterating over it, for instance.</p>
<p>Me, I would split, then compute the longest integer first, to zero-fill value, then interleave digits together (but starting by the end, hence the reverse operation) sum and convert back to string to pass to <code>join</code></p>
<pre><code>import itertools

s = "12456 687"

numbers = s.split()
max_digit = max(len(x) for x in numbers)
numbers = [x.zfill(max_digit) for x in numbers]

# at this point: numbers = ['12456', '00687']

v = " ".join(reversed([str(int(a)+int(b)) for a,b in zip(*numbers)]))
print(v)
</code></pre>
<p>result:</p>
<pre><code>13 13 10 2 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>import java.util.*;</p>
<p>public class Hello
{
public static void main(String[] args) </p>
<p>{</p>
<p>//Your Code Here</p>
<pre><code>Scanner scan = new Scanner(System.in);
int a = scan.nextInt();
int b = scan.nextInt();
int d1,d2,digit;
while(a&gt;0 || b&gt;0)
{
    d1 = a%10;
    d2 = b%10;
    digit = d1+d2;
    a = a/10;
    b = b/10;
    System.out.print(digit + " ");
}
</code></pre>
<p>}</p>
<p>}</p>
<p>This is the correct code for Position Digits Sum</p>
</div>
<span class="comment-copy">I did the same mistake at first (when I <i>wanted</i> to use <code>zip_longest</code>, then switched to <code>zfill</code>). But <code>zip_longest</code> is still good, if you reverse the digits as you finally did.</span>
<span class="comment-copy">Thanks for the help. I guess i should learn a lot more</span>
<span class="comment-copy">@Jean-Fran√ßoisFabre My "+1" is already there. And thanks for correcting me at the first place.</span>
<span class="comment-copy">my "+1" is there for your answer too for making it a one-liner and using <code>itertools.zip_longest</code></span>
