<div class="post-text" itemprop="text">
<p>I have two  string arrays each with three columns.I want to compare first two columns of both 2-d arrays(having 3 cols and 4000 rows). if they match then i need those matching values.But my code is not working.Here is a sample.</p>
<pre><code>array1=["1stcolumn...", "2ndColumn...", "3rdColumn..."]
array2=[1stcolumn 2ndColumn 3rdColumn]
if (array1[0]==array2[0] and array1[1]==array2[1]):
       array3.append('matches: {!r}'.format(array1))
print(array3)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>EDIT</strong></p>
<p><code>if array1[:2] == array2[:2]:</code> compares all items from the index 0 to 2(2 is not included), and comes up with the same result as <code>if array1[0] == array2[0] and array1[1] == array2[1]:</code>. Also, it is simpler.(Thanks to <strong>Wyatt</strong> for comment)</p>
<p>If your arrays are 2-dimensional:</p>
<pre><code>def compare_columns(array1, array2):
    if len(array1) != len(array2):
        return False # If row numbers are not same, return false

    for row_number in range(len(array1)):
        if array1[row_number][:2] != array2[row_number][:2]:
            return False # If the content is not equal, return false

    return True # All of the content is equal, the return true

# For example, these are 2-dimensional arrays
array1 = [["1.1", "1.2", "Lord of the Day of Judgment!"],
          ["2.1", "2.2", "Lord of the Day of Judgment!"]]
array2 = [["1.1", "1.2", "مَالِكِ يَوْمِ الدِّينِ"],
          ["2.1", "2.2", "مَالِكِ يَوْمِ الدِّينِ"]]

array3 = []       
if compare_columns(array1, array2):
       array3.append('matches: {!r}'.format(array1))
print(array3)
</code></pre>
<p>Output:</p>
<pre><code>["matches: [['1.1', '1.2', 'Lord of the Day of Judgment!'], ['2.1', '2.2', 'Lord of the Day of Judgment!']]"]
</code></pre>
<p><strong>BEFORE EDIT:</strong></p>
<p>If your array is one dimensionel, you don't need to say column, it is just item.  Then your job is easy like you have done above. Just, you have a few syntax errors. Use this code:</p>
<pre><code>array1 = ["1stcolumn", "2ndColumn", "1-3rdColumn"]
array2 = ["1stcolumn", "2ndColumn", "2-3rdColumn"]
array3 = []
if array1[0] == array2[0] and array1[1] == array2[1]:
       array3.append('matches: {!r}'.format(array1))
print(array3)
</code></pre>
<p>Output:</p>
<pre><code>["matches: ['1stcolumn', '2ndColumn', '1-3rdColumn']"]
</code></pre>
<p>So, if you have any other problem, let us know.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are a number of errors in this code snippet which will prevent it from even running without errors.</p>
<ul>
<li><p>Python lists are declared with commas between elements. For example,
a declaration of a list of strings could be:</p>
<p>array1 = ["this", "is", "a", "list"]</p>
<p>Examples of using lists in Python (3) can be found <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">here</a>.</p></li>
<li><p>The Python logical 'and' operator is not &amp;. It is <code>and</code>. See
<a href="https://stackoverflow.com/questions/2485466/pythons-equivalent-of-logical-and-in-an-if-statement">this</a> question.</p></li>
<li><p>In Python, as in most languages, variables must be declared before
they can be referenced. In your code, <code>array3</code> is never declared. You
can always declare an empty list like this:</p>
<p>array3 = []</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>As always we need a sample data set</p>
<pre><code>In [1]: from random import randint

In [2]: a = [[randint(0, 1) for _ in range(3)] for __ in range(10)]

In [3]: b = [[randint(0, 1) for _ in range(3)] for __ in range(10)]
</code></pre>
<p>Have a look at it</p>
<pre><code>In [4]: for aa, bb in zip(a, b): print(aa, bb)
[1, 1, 0] [0, 1, 0]
[0, 0, 0] [1, 0, 0]
[1, 1, 0] [1, 1, 0]
[1, 1, 0] [0, 1, 0]
[0, 0, 0] [1, 0, 0]
[0, 0, 0] [1, 0, 1]
[1, 1, 1] [1, 1, 1]
[0, 1, 0] [1, 0, 0]
[1, 0, 1] [1, 0, 1]
[1, 1, 1] [1, 0, 0]
</code></pre>
<p>It seems that there are a few candidates... let's see if we can sort out the sub-lists of the first list where the first 2 elements are equal to the corresponding 
elements of the corresponding sub-list in the second list.</p>
<p>A possible solution involves a list comprehension, using <code>zip</code> to pair corresponding sub-lists and filtering according to our criterium: </p>
<pre><code>In [5]: c = [aa for (aa, bb) in zip(a, b) if aa[:2]==bb[:2]]
</code></pre>
<p>where the comparison is done on two <em>slices</em> of the sub-lists, avoiding the use of the logical operator <code>and</code>.</p>
<p>Comparing <code>c</code> with the dump of <code>a</code> and <code>b</code> (see input cell #4)</p>
<pre><code>In [6]: c
Out[6]: [[1, 1, 0], [1, 1, 1], [1, 0, 1]]

In [7]: 
</code></pre>
<p>it seems to me that the list comprehension procedure here proposed is correct.</p>
</div>
<span class="comment-copy"><code>...my code is not working</code> what is wrong with it? what does it print?</span>
<span class="comment-copy"><code>&amp;</code> would work if there were parenthesis around the equivalence tests.</span>
<span class="comment-copy">@Wyatt in Python, lists are called lists, and arrays are called arrays. lists are not arrays.</span>
<span class="comment-copy">it is printing complete array without matching.</span>
<span class="comment-copy">The comparison can also be done with <code>array1[:2] == array2[:2]</code>.</span>
<span class="comment-copy">My array is 2 dimensional.Both arrays have 3 columns and 4000 rows . So, how can we match with 2d array?</span>
<span class="comment-copy">Yes, actually, this is a better way. But, I didn't want to change the original code much.</span>
<span class="comment-copy">@Nisa I edited my answer for 2-dimesional arrays. If my answer doesn't work and your problem continue, share a part of your arrays, then let us know more details.</span>
<span class="comment-copy">Thank you..But your code is checking whether number of rows are equal or not..i need to compare contents of first 2 columns of both arrays and retrieve the matching indexes and i also need to loop through all the rows of array to compare.. Here are my sample arrays: array1=[''1","4","Lord of the Day of Judgment!'']    array2=["1","4","مَالِكِ يَوْمِ الدِّينِ"]</span>
