<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/40640674/differentiate-false-and-0">Differentiate False and 0</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>this line evaluates to True in python</p>
<pre><code>False in [0,1,2]
</code></pre>
<p>because <code>False</code> and <code>0</code> are equal after typecasting.
Is there any way to avoid this typecasting?
Something like <code>===</code> operator for list?</p>
<p>(I know that I can handle this case with a loop by explicitly checking for value types, but I am curious if there is some short and sweet trick to do this without a loop).</p>
</div>
<div class="post-text" itemprop="text">
<p>If you really feel the need to do the same you can as follows.</p>
<pre><code>False in filter(lambda x: isinstance(x, bool), [0, 1, 2])
</code></pre>
<p>Or as @JonClements suggested</p>
<pre><code>any(x is False for x in [0, 1, 3]) # Since immutable values (including 
                                   # boolean) are instantiated only once.
</code></pre>
<p>However, such use case seldom arises where you need to differentiate between 0 and False as both are <code>falsy</code> as far as Python is concerned. Perhaps, you need to re-think your use-case.</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, <em>there is no typecasting in Python</em>. <code>False == 0</code> is true because <code>bool</code> is a subclass of <code>int</code>, and the two objects <em>really are equal</em>.</p>
<p>And no, there is no <code>===</code> operator, you need to explicitly test for types if you don't want this to happen:</p>
<pre><code>lst = [....]
testvalue = False
if any(testvalue == elem and type(testvalue) is type(elem) for elem in lst):
    # lst contains testvalue and it is the same type
</code></pre>
<p>This explicitly asserts that the two objects are <em>the exact same type</em>, disallowing for subclasses.</p>
<p>Yes, this is a loop. But <code>in</code> for a list also uses a loop, only internally, and both the <code>in</code> containment check and <code>any()</code> <em>short circuit</em>, they return <code>True</code> as soon as the first match is found.</p>
<p>Note that this would <em>disallow <code>float</code> equality too</em>. <code>0.0 == 0</code> is true too, but by testing for exact types you disallow that as well. The same goes for complex numbers, and <code>Decimal()</code>:</p>
<pre><code>&gt;&gt;&gt; 0j == 0 == 0.0 == Decimal('0')
True
</code></pre>
<p><code>bool</code> is just another numeric type here, albeit one limited to the numeric values 0 and 1.</p>
<p>The better approach, going forward, is to use <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">type hinting</a> in your code; the type hints checker would catch issues like you using booleans where integers or numbers are expected.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use "is" keyword for this.</p>
<pre><code>&gt;&gt;&gt; False == 0
True
&gt;&gt;&gt; False is 0
False
</code></pre>
</div>
<span class="comment-copy">There is no typecasting in Python. <code>bool</code> is a <i>subclass of <code>int</code></i>.</span>
<span class="comment-copy">Yup, unfortunately this is the case because of how False and True are defined.</span>
<span class="comment-copy">Refer to this previous <a href="https://stackoverflow.com/questions/27431249/python-false-vs-0">post</a>. So this suggests that you would have to run a for loop / list comprehension.</span>
<span class="comment-copy">If by <code>===</code> operator, you mean something like the Javascript <code>===</code> operator, then that is the equivalent to the Python <code>==</code> operator. No implicit type conversions are going on, if that is what you mean by typecasting. Python is strongly typed, there is no need. It is just that <i>bools are ints</i>.</span>
<span class="comment-copy">@bouteillebleu there were quite some debates wrt/ adding a <code>bool</code> type in Python, with a large minority standing against this decision and IIRC not even a clear majority being explicitely in favor of this addition. The BDFL finally decided to add it nonetheless, with some design choices dictated by compatibilty issues (look at pep 285 for more on this). Given that Python never actually <i>needed</i> a boolean type (and still don't need it), I think the design choices were as good as possible.</span>
<span class="comment-copy">Seems a little complicated... Could just do <code>any(el is False for el in whatever)</code></span>
<span class="comment-copy">@JonClements Yeah, that makes perfect sense.</span>
<span class="comment-copy">OPs question is about finding it in a list</span>
<span class="comment-copy"><code>is</code> tests <i>identity</i>, and is of little use when you actually want to test <i>equality</i>. Case in point: <code>a = 'hello'; b = a.lower(); a == b, a is b</code> =&gt; <code>True, False</code>.</span>
