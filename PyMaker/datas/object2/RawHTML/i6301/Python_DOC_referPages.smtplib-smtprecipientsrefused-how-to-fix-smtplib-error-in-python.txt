<div class="post-text" itemprop="text">
<p>After much searching I couldn't find out how to use smtplib.sendmail to send to multiple recipients.  The problem was every time the mail would be sent the mail headers would appear to contain multiple addresses, but in fact only the first recipient would receive the email.</p>
<p>The problem seems to be that the <a href="http://docs.python.org/library/email.message.html#email.message.Message" rel="noreferrer"><code>email.Message</code></a> module expects something different than the <a href="http://docs.python.org/library/smtplib.html#smtplib.SMTP.sendmail" rel="noreferrer"><code>smtplib.sendmail()</code></a> function.</p>
<p>In short, to send to multiple recipients you should set the header to be a string of comma delimited email addresses.  The <code>sendmail()</code> parameter <code>to_addrs</code> however should be a list of email addresses.</p>
<pre><code>from email.MIMEMultipart import MIMEMultipart
from email.MIMEText import MIMEText
import smtplib

msg = MIMEMultipart()
msg["Subject"] = "Example"
msg["From"] = "me@example.com"
msg["To"] = "malcom@example.com,reynolds@example.com,firefly@example.com"
msg["Cc"] = "serenity@example.com,inara@example.com"
body = MIMEText("example email body")
msg.attach(body)
smtp = smtplib.SMTP("mailhost.example.com", 25)
smtp.sendmail(msg["From"], msg["To"].split(",") + msg["Cc"].split(","), msg.as_string())
smtp.quit()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This <strong>really works</strong>, I spent a lot of time trying multiple variants.</p>
<pre><code>import smtplib
from email.mime.text import MIMEText

s = smtplib.SMTP('smtp.uk.xensource.com')
s.set_debuglevel(1)
msg = MIMEText("""body""")
sender = 'me@example.com'
recipients = ['john.doe@example.com', 'john.smith@example.co.uk']
msg['Subject'] = "subject line"
msg['From'] = sender
msg['To'] = ", ".join(recipients)
s.sendmail(sender, recipients, msg.as_string())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>msg['To']</code> needs to be a string:</p>
<pre><code>msg['To'] = "a@b.com, b@b.com, c@b.com"
</code></pre>
<p>While the <code>recipients</code> in <code>sendmail(sender, recipients, message)</code> needs to be a list:</p>
<pre><code>sendmail("a@a.com", ["a@b.com", "b@b.com", "c@b.com"], "Howdy")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to understand the difference between the <em>visible</em> address of an email, and the <em>delivery</em>.</p>
<p><code>msg["To"]</code> is essentially what is printed on the letter. It doesn't actually have any effect. Except that your email client, just like the regular post officer, will assume that this is who you want to send the email to.</p>
<p>The actual delivery however can work quite different. So you <em>can</em> drop the email (or a copy) into the post box of someone completely different.</p>
<p>There are various reasons for this. For example <em>forwarding</em>. The <code>To:</code> header field doesn't change on forwarding, however the email is dropped into a different mailbox.</p>
<p>The <code>smtp.sendmail</code> command now takes care of the <em>actual</em> delivery. <code>email.Message</code> is the contents of the letter only, not the delivery.</p>
<p>In low-level <code>SMTP</code>, you need to give the receipients one-by-one, which is why a list of adresses (not including names!) is the sensible API.</p>
<p>For the header, it can also contain for example the name, e.g. <code>To: First Last &lt;email@addr.tld&gt;, Other User &lt;other@mail.tld&gt;</code>. <strong>Your code example therefore is not recommended</strong>, as it will fail delivering this mail, since just by splitting it on <code>,</code> you still not not have the valid adresses!</p>
</div>
<div class="post-text" itemprop="text">
<p>It works for me.</p>
<pre><code>import smtplib
from email.mime.text import MIMEText

s = smtplib.SMTP('smtp.uk.xensource.com')
s.set_debuglevel(1)
msg = MIMEText("""body""")
sender = 'me@example.com'
recipients = 'john.doe@example.com,john.smith@example.co.uk'
msg['Subject'] = "subject line"
msg['From'] = sender
msg['To'] = recipients
s.sendmail(sender, recipients.split(','), msg.as_string())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I tried the below and it worked like a charm :)</p>
<pre><code>rec_list =  ['first@example.com', 'second@example.com']
rec =  ', '.join(rec_list)

msg['To'] = rec

send_out = smtplib.SMTP('localhost')
send_out.sendmail(me, rec_list, msg.as_string())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I came up with this importable module function. It uses the gmail email server in this example. Its split into header and message so you can clearly see whats going on:</p>
<pre><code>import smtplib

def send_alert(subject=""):

    to = ['email@one.com', 'email2@another_email.com', 'a3rd@email.com']
    gmail_user = 'me@gmail.com'
    gmail_pwd = 'my_pass'
    smtpserver = smtplib.SMTP("smtp.gmail.com", 587)
    smtpserver.ehlo()
    smtpserver.starttls()
    smtpserver.ehlo
    smtpserver.login(gmail_user, gmail_pwd)
    header = 'To:' + ", ".join(to) + '\n' + 'From: ' + gmail_user + '\n' + 'Subject: ' + subject + '\n'
    msg = header + '\n' + subject + '\n\n'
    smtpserver.sendmail(gmail_user, to, msg)
    smtpserver.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I figured this out a few months back and <a href="http://www.jmcpdotcom.com/blog/2012/01/06/multiple-recipients-with-pythons-smtplib-sendmail-method" rel="nofollow noreferrer">blogged about it</a>. The summary is:</p>
<p>If you want to use smtplib to send email to multiple recipients, use <code>email.Message.add_header('To', eachRecipientAsString)</code> to add them, and then when you invoke the sendmail method, <code>use email.Message.get_all('To')</code> send the message to all of them. Ditto for Cc and Bcc recipients.</p>
</div>
<div class="post-text" itemprop="text">
<p>So actually the problem is that SMTP.sendmail and email.MIMEText need two different things.</p>
<p>email.MIMEText sets up the "To:" header for the body of the e-mail. It is ONLY used for displaying a result to the human being at the other end, and like all e-mail headers, must be a single string. (Note that it does not actually have to have anything to do with the people who actually receive the message.)</p>
<p>SMTP.sendmail, on the other hand, sets up the "envelope" of the message for the SMTP protocol. It needs a Python list of strings, each of which has a single address.</p>
<p>So, what you need to do is COMBINE the two replies you received. Set msg['To'] to a single string, but pass the raw list to sendmail:</p>
<pre><code>emails = ['a.com','b.com', 'c.com']
msg['To'] = ', '.join( emails ) 
....
s.sendmail( msg['From'], emails, msg.as_string())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well, the method in <a href="https://stackoverflow.com/a/12422921/2281318">this asnwer</a> method did not work for me. I don't know, maybe this is a Python3 (I am using the 3.4 version) or gmail related issue, but after some tries, the solution that worked for me, was the line</p>
<pre><code>s.send_message(msg)
</code></pre>
<p>instead of</p>
<pre><code>s.sendmail(sender, recipients, msg.as_string())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I use python 3.6 and the following code works for me</p>
<pre><code>email_send = 'xxxxx@xxx.xxx,xxxx@xxx.xxx'
server.sendmail(email_user,email_send.split(','),text)    
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>Below worked for me.
It sends email to multiple with attachment - "To", "Cc" &amp; "Bcc" successfully.


toaddr = ['mailid_1','mailid_2']
cc = ['mailid_3','mailid_4']
bcc = ['mailid_5','mailid_6']
subject = 'Email from Python Code'
fromaddr = 'sender_mailid'
message = "\n  !! Hello... !!"

msg['From'] = fromaddr
msg['To'] = ', '.join(toaddr)
msg['Cc'] = ', '.join(cc)
msg['Bcc'] = ', '.join(bcc)
msg['Subject'] = subject

s.sendmail(fromaddr, (toaddr+cc+bcc) , message)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can try this when you write the recpient emails on a text file</p>
<pre><code>from email.mime.text import MIMEText
from email.header import Header
import smtplib

f =  open('emails.txt', 'r').readlines()
for n in f:
     emails = n.rstrip()
server = smtplib.SMTP('smtp.uk.xensource.com')
server.ehlo()
server.starttls()
body = "Test Email"
subject = "Test"
from = "me@example.com"
to = emails
msg = MIMEText(body,'plain','utf-8')
msg['Subject'] = Header(subject, 'utf-8')
msg['From'] =  Header(from, 'utf-8')
msg['To'] = Header(to, 'utf-8')
text = msg.as_string()
try:
   server.send(from, emails, text)
   print('Message Sent Succesfully')
except:
   print('There Was An Error While Sending The Message')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

def sender(recipients): 

    body = 'Your email content here'
    msg = MIMEMultipart()

    msg['Subject'] = 'Email Subject'
    msg['From'] = 'your.email@gmail.com'
    msg['To'] = (', ').join(recipients.split(','))

    msg.attach(MIMEText(body,'plain'))

    server = smtplib.SMTP('smtp.gmail.com', 587)
    server.starttls()
    server.login('your.email@gmail.com', 'yourpassword')
    server.send_message(msg)
    server.quit()

if __name__ == '__main__':
    sender('email_1@domain.com,email_2@domain.com')
</code></pre>
<p>It only worked for me with send_message function and using the join function in the list whith recipients, python 3.6. </p>
</div>
<span class="comment-copy">It appears OP answered his own question: <code>sendmail</code> needs a list.</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/8729071/is-there-any-way-to-add-multiple-receivers-in-python-smtplib">Is there any way to add multiple receivers in Python SMTPlib?</a></span>
<span class="comment-copy">Using Python3 I had to loop through recipients;  <code>for addr in recipients: msg['To'] = addr</code> and then it worked. Multiple assignments actually appends a new 'To' header for each one. This is a very bizarre interface, I can't even explain how I thought to try it.  I was even considering using <code>subprocess</code> to call the unix <code>sendmail</code> package to save my sanity before I figured this out.</span>
<span class="comment-copy">the documentation does have the example: <code>tolist =["one@one.org","two@two.org","three@three.org","four@four.org"]</code></span>
<span class="comment-copy">thank you @sorin for this script. I was having a problem to send an email from a python script and with this piece of code, i can now send the email.</span>
<span class="comment-copy">This will not send to multiple recipients if you are using Python 3 you need <code>send_message</code> instead of <code>sendmail</code> as per Antoine's comment below and the Python docs <a href="https://docs.python.org/3/library/email-examples.html" rel="nofollow noreferrer">docs.python.org/3/library/email-examples.html</a></span>
<span class="comment-copy">You have to use for each traverse that recipients for sendmail, otherwise only first element will receive the mail.</span>
<span class="comment-copy">correction to the url mentioned above:   <a href="https://docs.python.org/3/library/email.examples.html" rel="nofollow noreferrer">docs.python.org/3/library/email.examples.html</a></span>
<span class="comment-copy">This is one strange design decision for <code>smtplib.</code></span>
<span class="comment-copy"><code>recipients</code> does not have to be a list - if a string is given, it is treated as a list with one element. The<code>msg['To']</code> string can simply be omitted.</span>
<span class="comment-copy">I don't really understand, how 'a@a.com, b@b.com' is parsed so only the first address gets the email. But, thanks! This is the answer, had to put list in there.</span>
<span class="comment-copy">worked for me, and it is consistent with documentation in <a href="https://docs.python.org/2/library/email-examples.html" rel="nofollow noreferrer">docs.python.org/2/library/email-examples.html</a></span>
<span class="comment-copy">RFC 2822 imposes a maximum width of 988 characters for a given header and a recommended width of 78 characters.  You will need to ensure you "fold" the header if you have too many addresses.</span>
<span class="comment-copy">This should be the accepted answer, as it actually explains the why and the how.</span>
<span class="comment-copy">Great answer. What about CC and BCC email fields? I assume we also have to include CC and BCC email in smtp.send. And only CC list (and not BCC list) in the msg fields?</span>
<span class="comment-copy">Yes, that is how it works. Mail servers will likely drop the BCC field (to prevent this from being visible, and I don't think they all do), but they won't parse it.</span>
<span class="comment-copy">what version of python are you using?  I get the same problem as the original poster and I am using python 2.7.9</span>
<span class="comment-copy">FYR whole simple code below:  <code>import smtplib from email.mime.multipart import MIMEMultipart from email.mime.text import MIMEText  sender = 'myEmailAddress@example.com' rec_list =  ['first@example.com', 'second@example.com'] rec =  ', '.join(rec_list)  msg = MIMEMultipart('alternative') msg['Subject'] = 'The required subject' msg['From'] = sender msg['To'] = rec  html = ('whatever html code')  htm_part = MIMEText(html, 'html')  msg.attach(htm_part)  send_out = smtplib.SMTP('localhost') send_out.sendmail(sender, rec_list, msg.as_string()) send_out.quit()</code></span>
<span class="comment-copy">Python 3.7 throws an exception with message: <b>Exception has occurred: ValueError</b> <i>There may be at most 1 To headers in a message</i></span>
