<div class="post-text" itemprop="text">
<p>In a python script running with Python 3.x, importing another python script running with Python 2.7, is it possible to tell the program to use Python 2.7 interpreter when importing that specific script?</p>
<p>In this "mainfile.py" running with Python 3.x</p>
<pre>
import anotherfile27
</pre>
<p>As soon as "anotherfile27.py" is importing, everything will automatically run, no functions in "anotherfile27.py" need to be reused in "mainfile.py". Only several .csv scripts will be generated in order to be used later.</p>
<p>Is it possible to write a line of code within "anotherfile27.py" or within "mainfile.py" to tell the program to change the interpreter from Python 3 to Python 2.7 only when running "anotherfile27.py"? </p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a basic example:</p>
<pre><code>import subprocess
import platform

print("Running ", platform.python_version())
old_version = subprocess.check_output("python2 --version", encoding="utf-8")
print("Old version", old_version)
</code></pre>
</div>
<span class="comment-copy">Can you run your other script as a subprocess?</span>
<span class="comment-copy">You can execute it using the <a href="https://docs.python.org/3/library/subprocess.html#module-subprocess" rel="nofollow noreferrer"><code>subprocess</code></a> module. Just specify the interpreter you want along with the 2.7 .py file name as an argument. You can't do it through <code>import</code>.</span>
<span class="comment-copy">Directly - the short answer is "no". <code>import</code> loads and compiles the module into the current interpreter... you'll have to find another way if you can't just easily port the other module.</span>
<span class="comment-copy">It <i>sounds</i> like you may just want to use a <code>subprocess</code>. You'll just need to use the right interpreter (easily by providing the full path to the binary).</span>
<span class="comment-copy">Although, while <code>subprocess</code> and picking up the files after is a very general and workable solution - depends what you're doing in the other script, it might well be wasteful. For instance, if you're generating large CSV files that haven't had to have complicated processing/grouping applied to them and you only need to read them row by row, writing them to just read them again seems a little wasteful.</span>
