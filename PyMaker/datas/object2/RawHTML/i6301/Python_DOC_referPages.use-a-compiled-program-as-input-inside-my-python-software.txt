<div class="post-text" itemprop="text">
<p>I've seen different softwares using compiled programs as a "module"; an example would be wifite which uses the aircrack suite.</p>
<p>Similarly, I need to implement tshark inside my python program but without having to work my way through the source code (mainly because I'd want the software to be modular and to leave tshark as a simple dependency).</p>
<p>What's the best way to do so? I'd avoid a simple call to the program as I don't feel it is very pythonic.</p>
</div>
<div class="post-text" itemprop="text">
<p>In a general sense, the generic API provided by standard UNIX programs consists of:</p>
<ul>
<li>The argument vector with which that program is started (an array of C strings, as generated by a shell or passed directly to the <code>subprocess</code> module).</li>
<li>The file descriptors passed as FD 0, 1 and 2 (stdin, stdout and stderr) when that process is started (others may be used, but only these three are part of the standard API).</li>
<li>The set of environment variables inherited by that program at startup.</li>
<li>Various other inherited process state, such as the program's current working directory.</li>
</ul>
<p>Traditionally, UNIX programs communicate with each other via these means -- reading input from stdin (unless otherwise specified on command line), writing to stdout, logging to stderr, etc.</p>
<p>Some programs may offer library interfaces, or socket-based interfaces, <em>but these are available only on a case-by-case basis</em>.</p>
<p>If you <em>are</em> trying to interface with software written in C that provides a library interface, see <a href="https://docs.python.org/3/library/ctypes.html" rel="nofollow noreferrer">the <code>ctypes</code> standard-library module</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>For your purpose, you can use one of existing wrappers around tshark, for example <a href="https://github.com/KimiNewt/pyshark" rel="nofollow noreferrer">KimiNewt/pyshark</a>.</p>
<p>In other case, you would probably need to recompile the tool as a library, and then provide bindings for it to be used in Python. More on that in the <a href="https://docs.python.org/3/extending/extending.html" rel="nofollow noreferrer">documentation</a>. </p>
</div>
<span class="comment-copy">This is <i>waaay</i> too vague to be actionable. "Implement tshark" can mean a wide variety of things, and using a compiled program as a module can mean anything from dynamically linking in library calls to a FIFO-based communication interface. Details matter -- the approach that works in one scenario (say, implementing a TTY screen-scraper to drive a 3rd-party program's UI) may not work in another (where you might be writing a parser/generator for a RPC mechanism or storage format) -- to the point that there's no single answer to this question that's going to be widely or broadly applicable.</span>
<span class="comment-copy">Sorry if my question is not that detailed, it is my first time doing something like that.  What I wanted to achieve is a simple interaction. I need to use the output from tshark as an input in my program, I just wanted to avoid calling tshark externally.  More precisely, for what it's worth, I need to take one field in every TCP packet coming from a specific source.</span>
<span class="comment-copy">@dec0de_d00dle, "possible", sometimes. "advisable", rarely. A command-line program's API <b>is</b> its command line (and set of environment variables, stdin, stdout and stderr handles, etc). This is how UNIX programs are expected to communicate with each other, except where something has an alternate explicit interface (via a library, via a socket, etc).</span>
<span class="comment-copy">@dec0de_d00dle, ...which is to say -- if something is designed as a Python program, there will be a Pythonic way to interface with it, but when in Rome, do as the Romans do -- if something is a UNIX program, you should expect to be interfacing through standard UNIX interfaces, <i>unless that specific software provides an intentional alternate API</i>.</span>
<span class="comment-copy">I'll write it up as an answer then.</span>
