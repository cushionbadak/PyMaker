<div class="post-text" itemprop="text">
<p>I'm trying to patch dependencies with my <a href="http://errbot.io" rel="nofollow noreferrer">errbot</a> tests. The problem I'm having is how errbot imports modules. It is not static and breaks my patch decorators as I add tests or they test in a different order.</p>
<p>I have plugin called EDB (edb.py). Inside of edb.py I import pyedb with <code>import pyedb</code>. This is located in my <code>site-packages</code>.</p>
<p>I have my test file test_edb.py and I try to patch my test methods like this</p>
<pre><code>pytest_plugins = ["errbot.backends.test"]
extra_plugin_dir = '.'

from unittest.mock import patch  # noqa: E402

@patch('yapsy_loaded_plugin_EDB_1.pyedb', autospec=True)
def test_edb_testlist(pyedb_mock, testbot):
    testbot.push_message('!edb testlist')

    assert "Okay, let me get..." == testbot.pop_message()
    assert "I don't see any..." == testbot.pop_message()
</code></pre>
<p>Errbot adds this <code>yapsy_loaded_plugin_EDB_&lt;xx&gt;</code> path for module import but the xx depends on the order the test is run. This doesn't work, I need some static import path <code>mypath.pyedb</code>.</p>
<p>I'm hoping there is a different way to approach this. Maybe I can change the how I import the module so it's not dependent on errbot imports? </p>
<p>Here is a link to <a href="http://errbot.io/en/latest/user_guide/plugin_development/testing.html" rel="nofollow noreferrer">Errbot testing</a> for reference.</p>
</div>
<div class="post-text" itemprop="text">
<p>My solution feels a bit hacky but it works. If anyone has a more elegant solution please share. I'll accept my own answer after awhile if there are no additional responses.</p>
<p>So I've come across this before but I guess I still wasn't familiar enough with how patching works in Python with knowing <em>where</em> to patch. After reading the "<a href="https://docs.python.org/3/library/unittest.mock.html#where-to-patch" rel="nofollow noreferrer">Where to patch</a>" documentation ( again :) ) I have a work-around given the dynamic imports with errbot.</p>
<p>An errbot project folder will look something</p>
<pre><code>errbot-project/
├── data/
│   ├── ...
├── plugins/
│   ├── plugin1/
|       ├── ...
|   ├── plugin2/
|       ├── ...
</code></pre>
<p>I noticed that when errbot runs both the project directory <code>../errbot-project</code> and all the plugin directories (e.g. <code>../errbot-project/plugins/plugin1</code>) are added to <code>sys.path</code>.</p>
<p>So I added a package to my project directory and I import that in my plugins. I then can patch my dependencies reliably from that package. Again read the <a href="https://docs.python.org/3/library/unittest.mock.html#where-to-patch" rel="nofollow noreferrer">Where to Patch</a> documentation for full explanation why. It looks something like this.</p>
<pre><code>errbot-project/
├── data/
│   ├── ...
├── plugins/
│   ├── plugin1/
|       ├── ...
|   ├── plugin2/
|       ├── ...
├── plugin_deps/
|       ├── __init__.py
</code></pre>
<p>Where my <code>../errbot-project/plugin_deps/__init__.py</code> looks like</p>
<pre><code>...
import dep1
import dep2
...
</code></pre>
<p>And then in my plugin I use</p>
<pre><code>...
import plugin_deps as pdep
...
def method():
    pdep.dep1.method()
...
# note, you cannot use 
# from plugin_deps import dep1
# this changes 'where' python looks up the module and
# and 'breaks' your patch 
</code></pre>
<p>And finally my test code looks like</p>
<pre><code>@patch('plugin_deps.dep1', autospec=True) 
def test_get_tl_tabulation(my_mock, testbot):
    # test code here
</code></pre>
</div>
<span class="comment-copy">Not sure if this is more elegant, but you may find some useful ideas at <a href="https://github.com/coala/corobo/blob/master/tests/labhub_test.py" rel="nofollow noreferrer">github.com/coala/corobo/blob/master/tests/labhub_test.py</a></span>
