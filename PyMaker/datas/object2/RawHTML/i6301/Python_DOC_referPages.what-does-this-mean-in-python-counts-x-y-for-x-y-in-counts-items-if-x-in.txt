<div class="post-text" itemprop="text">
<p>This is from <a href="https://github.com/kartikeya-shandilya/autogram/blob/master/autogram.py" rel="nofollow noreferrer">this</a> source code I am trying to understand. </p>
<p><code>counts = {x: y for x, y in counts.items() if x in self.symbols}</code></p>
<p>I am new to python and am trying to convert this whole application to .NET. Thanks a lot for any help.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your snippet filters a dictionary by key.</p>
<pre><code>{x: y   # create a key value pair from key and value (this basically copies the entry of counts
for x, y in counts.items()    # this iterates over all key value pairs in the counts dict (x is the key, y is the value)
if x in self.symbols   # only perform line 1 if they current key x is included in the list 'symbols'.
</code></pre>
<p>in C# this would look like:
</p>
<pre><code>counts = counts.Where(kv =&gt; symbols.Contains(kv.Key))  // this is the filter (line 3 from above)
               .ToDictinoary(kv =&gt; kv.Key, kv =&gt; kv.Value);  // this creates the dict (line 1 from above)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1><code>dict</code> comprehension</h1>
<p>It's a comprehension that returns a <code>dict</code>. Essentially, it iterates a pair of values through <code>counts.items()</code> and then creates a <code>dict</code> (key -&gt; value mapping) out of it.</p>
<p>Let's say <code>counts.items()</code> is <code>[(1, 2), (3, 4), (5, 6)]</code>. Then, <code>for x, y in counts.items()</code> will iterate with the following:</p>
<pre><code>x = 1, y = 2
x = 3, y = 4
x = 5, y = 6
</code></pre>
<p><code>if x in self.symbols</code> filters the comprehension. So if <code>self.symbols</code> were, say, <code>[1, 4, 5]</code>, it would only iterate through <code>x = 1, y = 2</code> and <code>x = 5, y = 6</code>.</p>
<p>Then, the final dict is:</p>
<pre><code>{
    1: 2,
    5: 6
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is dictionary comprehension. Some five lines of code can be written in a short form like this</p>
<pre><code>counts = {x: y for x, y in counts.items() if x in self.symbols}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From a high-level perspective, the one-liner you provided updates a dictionary  instance (i.e. <code>counts</code>) and removes the elements that are not in <code>self.symbols</code>, effectively filtering <code>counts</code>.</p>
<p>Basically there is a dictionary <code>counts</code>, and what is being done is that each key-value pair <code>(x, y)</code> in <code>counts</code> is checked and a new dictionary instance that only includes the key-value pairs for which the key <code>x</code> exists in <code>self.symbols</code> is created. Finally, that newly created dictionary instance is assigned to <code>counts</code>. The formal name of this technique is <strong>dictionary comprehension</strong>.</p>
<p>The following code, which may seem more familiar to you, is equivalent to what you have given in your question.</p>
<pre><code>filtered_counts = {}
for x, y in counts.items():
    if x in self.symbols:
        filtered_counts[x] = y
counts = filtered_counts
</code></pre>
</div>
<span class="comment-copy">Take a look at <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehensions</a> to get used to the syntax and the idea behind it</span>
<span class="comment-copy">It's dot net equivalent could be: <code>counts.Where(kvp=&gt;this.symbols.Contains(kvp.Key)).ToDictionary(kvp=&gt;kvp.Key, kvp=&gt;kvp.Value);</code></span>
