<div class="post-text" itemprop="text">
<p>I am a beginner just getting started with writing MapReduce programs in Python using MRJob library. </p>
<p>One of the example worked out in the video tutorial is to find a max temperature by location_id. Following on from that writing another program to find the min temperature by location_id is straightforward too.</p>
<p>I am wondering, is there a way to yield both max and min temperature by location_id in a single mapreduce program?. Below is my go at it:</p>
<pre><code>from mrjob.job import MRJob

'''Sample Data
ITE00100554,18000101,TMAX,-75,,,E,
ITE00100554,18000101,TMIN,-148,,,E,
GM000010962,18000101,PRCP,0,,,E,
EZE00100082,18000101,TMAX,-86,,,E,
EZE00100082,18000101,TMIN,-135,,,E,
ITE00100554,18000102,TMAX,-60,,I,E,
ITE00100554,18000102,TMIN,-125,,,E,
GM000010962,18000102,PRCP,0,,,E,
EZE00100082,18000102,TMAX,-44,,,E, 

Output I am expecting to see:
ITE00100554  32.3  20.2
EZE00100082  34.4  19.6
'''

class MaxMinTemperature(MRJob):
    def mapper(self, _, line):
        location, datetime, measure, temperature, w, x, y, z = line.split(',')
        temperature = float(temperature)/10
        if measure == 'TMAX' or measure == 'TMIN':
            yield location, temperature

    def reducer(self, location, temperatures):
        yield location, max(temperatures), min(temperatures)


if __name__ == '__main__':
    MaxMinTemperature.run()
</code></pre>
<p>I get the following error:</p>
<pre><code>File "MaxMinTemperature.py", line 12, in reducer
yield location, max(temperatures), min(temperatures)
ValueError: min() arg is an empty sequence
</code></pre>
<p>Is this possible?</p>
<p>Thank you for your assistance.</p>
<p>Shiv</p>
</div>
<div class="post-text" itemprop="text">
<p>You have two problems in reducer:</p>
<ol>
<li><p>If you check type of the temperature argument, you will see that it's a generator. A generator can be traversed only once so you cannot pass the same generator to both 'min' and 'max' functions. The right solution is to manually traverse it. A wrong solution - converting it to a list - may cause out of memory error on big enough input because a list holds all its elements in memory and a generator does not.</p></li>
<li><p>Result of reducer must be a two-elements tuple. So you need to combine your min and max temperature in another tuple.</p></li>
</ol>
<p>Complete working solution:</p>
<pre><code>class MaxMinTemperature(MRJob):
    def mapper(self, _, line):
        location, datetime, measure, temperature, w, x, y, z = line.split(',')
        temperature = float(temperature)/10
        if measure in ('TMAX', 'TMIN'):
            yield location, temperature

    def reducer(self, location, temperatures):
        min_temp = next(temperatures)
        max_temp = min_temp
        for item in temperatures:
            min_temp = min(item, min_temp)
            max_temp = max(item, max_temp)
        yield location, (min_temp, max_temp)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that <code>temperatures</code> in your <code>reducer</code> method is a <a href="https://docs.python.org/3/glossary.html#term-generator" rel="nofollow noreferrer">generator</a>.</p>
<hr/>
<p>For better understanding let's create a simple generator and look on its behavior: </p>
<pre><code>def my_gen(an_iterable):
    for item in an_iterable:
        yield item

my_generator = my_gen([1,2,3,4,5])
print(type(my_generator)) # &lt;class 'generator'&gt;
</code></pre>
<p>Ðžne of the features of such an object is that once exhausted, you can't reuse it:</p>
<pre><code>print(list(my_generator)) # [1, 2, 3, 4, 5]
print(list(my_generator)) # []
</code></pre>
<p>Therefore sequential execution of <code>max()</code> and <code>min()</code> leads to an error:</p>
<pre><code>my_generator = my_gen([1,2,3,4,5])

print(max(my_generator)) # 5
print(min(my_generator)) # ValueError: min() arg is an empty sequence
</code></pre>
<p>So, you <i>can't use the same generator with both <code>max()</code> and <code>min()</code> built-in functions</i> because in the second use the generator will be exhausted.</p>
<hr/>
<p>Instead you can:   </p>
<p>1) convert the generator to a list and work with it:</p>
<pre><code>my_generator = my_gen([1,2,3,4,5])
my_list = list(my_generator)

print(max(my_list)) # 5
print(min(my_list)) # 1 
</code></pre>
<p>2) or extract min and max values of the generator within 1 for-loop:</p>
<pre><code>my_generator = my_gen([1,2,3,4,5])

from functools import reduce
val_max, val_min = reduce(lambda x,y: (max(y, x[0]), min(y, x[1])), my_generator, (float('-inf'), float('inf'))) 

print(val_max, val_min) # 5 1
</code></pre>
<hr/>
<p>So, the following edit of <code>reducer</code>:</p>
<pre><code>def reducer(self, location, temperatures):
    tempr_list = list(temperatures)
    yield location, max(tempr_list), min(tempr_list)
</code></pre>
<p>should fix the error.</p>
</div>
<span class="comment-copy">Thank you @ AleksandrBorisov. Understood what your solution is doing!!</span>
<span class="comment-copy">Can't thank you enough</span>
<span class="comment-copy">Thank you very much @MaximTitarenko for explaining to me what a generator is. Much appreciated.</span>
