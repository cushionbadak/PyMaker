<div class="post-text" itemprop="text">
<p>I have a list of tuples that look like :</p>
<pre><code>CODES = (
    ('apple', 'reddelicious'),
    ('caramel', 'sweetsticky'),
    ('banana', 'yellowfruit'),
)
</code></pre>
<p>What's the best way to check if a value exists in that tuple? For example I want to be able to say:</p>
<pre><code>'apple' in CODES
</code></pre>
<p>and get True</p>
</div>
<div class="post-text" itemprop="text">
<p>You are looking for <a href="http://docs.python.org/3/library/functions.html#any"><code>any()</code></a>:</p>
<pre><code>if any('apple' in code for code in CODES):
    ...
</code></pre>
<p>Combined with a simple <a href="http://www.youtube.com/watch?v=pShL9DCSIUw">generator expression</a>, this does the task. The generator expression takes each tuple and yields <code>True</code> if it is contains <code>'apple'</code>. <code>any()</code> then returns <code>True</code> when the first item it requests returns <code>True</code> (otherwise, <code>False</code>). Hence this does what you want. It also reads nicely - <em>if any of the tuples contain <code>'apple'</code></em>.</p>
<p>If you are doing this a massive number of times and need performance, then it might be worth making a set of all of the values to allow you to do this very quickly:</p>
<pre><code>cache = set(itertools.chain.from_iterable(CODES)))
</code></pre>
<p>Naturally, constructing this will be slow and use memory, so it wouldn't be a good idea unless you need a lot of performance and will be doing a lot of membership checks.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.python.org/2/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain()</code></a>:</p>
<p>Using it with <code>in</code> will result in short-circuiting, similar to <code>any()</code>.</p>
<pre><code>In [30]: CODES = (
   ....:     ('apple', 'reddelicious'),
   ....:     ('caramel', 'sweetsticky'),
   ....:     ('banana', 'yellowfruit'),
   ....: )


In [31]: from itertools import chain

In [32]: 'apple' in chain(*CODES)
Out[32]: True

In [33]: 'foo' in chain(*CODES)
Out[33]: False
</code></pre>
<hr/>
<p>For <strong>performance comparisons</strong> you can check my <a href="https://stackoverflow.com/questions/26902359/best-way-to-check-if-an-item-is-present-in-a-list-of-lists">other answer</a>.</p>
</div>
<span class="comment-copy">what if instead of just checking for the existence - i wanted to get the second value? In this case "reddelicious"?</span>
<span class="comment-copy">In that case, you are using the wrong data structure, use a <code>dict</code>, then just do <code>CODES["apple"]</code> (and catch the <code>KeyError</code> if it isn't there).</span>
<span class="comment-copy">@9-bits just use <code>dic=dict(CODES)</code>, this will return a dictionary.And then <code>dic['apple']</code> will result in <code>'reddelicious'</code>.</span>
<span class="comment-copy">@AshwiniChaudhary Well, if the data exists in this format, then yes, but if you are making a literal as in your example, no need to take the extra step, just make a <code>dict</code> to begin with.</span>
<span class="comment-copy">For those of you still living in Py2.x <a href="https://docs.python.org/2/library/functions.html#any" rel="nofollow noreferrer">docs.python.org/2/library/functions.html#any</a> <code>any()</code> is there too!</span>
<span class="comment-copy">+1, This is a reasonable way to do this - I'm not sure how it compares performance-wise. Although you should use <code>chain.from_iterable()</code> over <code>chain(*)</code>.</span>
<span class="comment-copy">@Lattyware I think as both <code>any()</code> and my method are doing short-circuiting, so, the performance difference should be negligible for large data.</span>
