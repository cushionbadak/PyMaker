<div class="post-text" itemprop="text">
<p>I am tutoring a neighbour's child and we were exploring the <code>int()</code> function before using it with input()  - which returns a string. We tried the following:</p>
<pre><code>int(5)
int(5.5)
int('5')
int('5.5')
</code></pre>
<p>The first three returned <code>5</code> as expected; the last one threw the error </p>
<blockquote>
<p>ValueError: invalid literal for int() with base 10: '5.5'</p>
</blockquote>
<p>Given the behaviour of the first three lines how do I explain the error to a 14-year old (background = speaks 4 languages but maths is not so hot)?</p>
<p><strong>UPDATE</strong>
C# exhibits the same behaviour:
<code>Convert.ToInt32("5.5");</code> throws the error</p>
<blockquote>
<p>Input string was not in a correct format.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>In a nutshell: <em>because that's what the spec says.</em> That's kind of a useful mindset to get into anyway. ;-)</p>
<p>Now, why does the spec say so? There are only a finite number of types a function can accept as valid input. The <code>int</code> function tries to cover two different kinds of use cases:</p>
<ol>
<li>convert a string representation of an integer into an actual <code>int</code></li>
<li>cast a <code>float</code> value to an <code>int</code>, truncating it*</li>
</ol>
<p>The third use case, <em>"convert the string representation of a floating point number to an <code>int</code>"</em> is not covered by the spec, because the language designers decided not to cover it. Which seems like a reasonable decision to make, since they needed to draw the line somewhere on what types the function would and wouldn't accept. The string representation of a floating point number should be parsed by <code>float</code>, not <code>int</code>.</p>
<p><em>* Actually: any object that has an <code>__int__</code> method, but lets keep it simple.</em></p>
<hr/>
<p>As a counter example, in PHP you <em>can</em> try to cast any string to an <code>int</code>, and it will try to give you the best match:</p>
<pre><code>php &gt; echo (int)'3.14';
3
php &gt; echo (float)'3.14';
3.14
php &gt; echo (int)'3 little pigs';
3
php &gt; echo (int)'there are 3 little pigs';
0
</code></pre>
<p>Which, quite honestly, is rather insane behaviour, especially that last one. Python has a strict(er) type system; if you're trying to parse a string as an <code>int</code>, it must be a perfectly valid representation of an integer number, not merely something that somewhere contains something that can be interpreted as a number.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem with that line is that there are two conversions involved:</p>
<pre><code>"5.5" (string) -&gt; 5.5 (float) -&gt; 5 (int)
</code></pre>
<p>The conversion operators in Python will only apply one conversion at a time, never two chained, because that could become confusing in many cases.</p>
<p>The solution is to apply two nested conversions:</p>
<pre><code>int(float("5.5"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could refer to <a href="https://docs.python.org/3/library/functions.html#int" rel="noreferrer">docs</a>:</p>
<blockquote>
<pre><code>class int(x=0)
class int(x, base=10)
</code></pre>
<p>Return an integer object constructed from a number or string x, or return 0 if no arguments are given. If x is a number, return
  <code>x.__int__()</code>. <strong>For floating point numbers, this truncates towards zero</strong>.</p>
<p><strong>If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an <em>integer</em> literal in radix
  base.</strong> Optionally, the literal can be preceded by + or - (with no space
  in between) and surrounded by whitespace. A base-n literal consists of
  the digits 0 to n-1, with a to z (or A to Z) having values 10 to 35.
  The default base is 10. The allowed values are 0 and 2–36. Base-2, -8,
  and -16 literals can be optionally prefixed with 0b/0B, 0o/0O, or
  0x/0X, as with integer literals in code. Base 0 means to interpret
  exactly as a code literal, so that the actual base is 2, 8, 10, or 16,
  and so that int('010', 0) is not legal, while int('010') is, as well
  as int('010', 8).</p>
<p>The integer type is described in Numeric Types — int, float, complex.</p>
</blockquote>
<p>(emphasis mine)</p>
<p>Referring to docs teaches that in programming nothing is really arbitrary, and compilers/interpreters are simply following rules.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think I would go about it by saying that both <code>int(5.5)</code> and <code>int('5.5')</code> are not what you are Supposed To Do. rodrigo's answer gives an explanation why one still works, but when explaining things to a child I would try to keep things as explicit as possible, and implicit conversions don't help with that.</p>
<p>So, while overly explicit, why not teach to go like this:</p>
<p><code>int(floor(float('5.5')))</code></p>
<p>At least then everything is perfectly clear and obvious.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would say that the problem behind this is <strong>operator overloading</strong>, because there are really two int() functions involved: one that converts a string (if possible), the other truncates floats. If the kid understands types, I think she/he will also understand what overloading is. </p>
</div>
<div class="post-text" itemprop="text">
<p>Try explaining strings containing digits as if it was written out as words.</p>
<pre><code>int(5)
int(5.5)
</code></pre>
<p>works since Python's int() function "sees" it as numbers and takes the whole-number-part, like another child, that doesn't know anything about floating point / decimal places -&gt; both would be interpreted as 5, the rest is ignored.</p>
<p>Now: using strings</p>
<pre><code>int('5')
int('5.5')
</code></pre>
<p>could be interpreted as either "five" which Python's int() function knows how to translate to 5, but a verbal "fivepointfive" is not what our child has ever heard, not knowing anything about floating point. (int() function being the child here)</p>
<p>A nice question and an usual challenge to try explain it this way.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your (imaginary) function takes a picture of a cat as a parameter and you tried to pass it an actual cat. There's a conversion that needs to happen first from cat to picture of cat before the function knows what to do with it.</p>
</div>
<span class="comment-copy">It can only take strings that are how you'd write <i>whole</i> numbers?</span>
<span class="comment-copy">Maybe relevant: <a href="https://stackoverflow.com/questions/15132352/python-int-of-a-string-that-is-a-float-number" title="python int of a string that is a float number">stackoverflow.com/questions/15132352/…</a></span>
<span class="comment-copy">This would be a good question for <a href="https://cseducators.stackexchange.com/">CS.ComputerScienceEducators</a>.</span>
<span class="comment-copy">@Nat Done, thanks for the suggestion</span>
<span class="comment-copy">@Jan <i>"Why not?"</i> – Because ಠ_ಠ</span>
<span class="comment-copy">also a good answer, int() does only 1 thing. String to int or float to int, but not string to float to int. I was more trying to answer it the "children" way, maybe more for like an 8 year old rather than 14. - nice challenge</span>
<span class="comment-copy">@PM2Ring The other way around… how <i>do</i> you convert a <code>float</code> to an <code>int</code> if not by using <code>int()</code>?</span>
<span class="comment-copy">Good point. I guess <code>float</code> <i>could</i> have a <code>.to_int</code> method, but it doesn't for historical reasons. And it makes sense to have a generic <code>int</code> type that invokes the <code>__int__</code> method of classes that define such a method, since that's consistent with other "magic" methods like <code>__len__</code>.</span>
<span class="comment-copy">@Arne Arguably casting a <code>float</code> to an <code>int</code> is a pretty common operation and should not require a separate module to be imported. In many C-like languages it's the built-in operation <code>(int)f</code>. The operation is also well defined: truncate towards zero. If you do need more specific behaviour, importing <code>math</code> is perfectly reasonable.</span>
<span class="comment-copy">Another PHP WTF: say $x is "5d8". After running $x++ you get "5d9". OK, that's pretty crazy, but not totally crazy yet. Increment again, you'll get "5e0". OK, that's pretty strange. But the best is yet to come. Increment once again, and you get... 6. "5e0" is interpreted as 5*10^0...</span>
<span class="comment-copy">This isn't what the OPs asking though?</span>
<span class="comment-copy">While this is absolutely the correct answer, I don't know if it is very useful to a child.</span>
<span class="comment-copy">@JonClements: Well, yes. The OP asks why the last line is different, and that is because it contains two conversions while the other lines contain just one. That's the perfectly reasonable reason...</span>
<span class="comment-copy">@JonClements: That would depend on the child and their background. For my 14 year old myself, saying: "you are writing one conversion but you expect to get two" should have been enough, I think.</span>
<span class="comment-copy">@Chris_Rands Maybe that is the design philosophy, because technically it is not really necessary. From a technical POV, <code>int()</code> is just an overloaded function, and reacts differently depending on the input-argument type. In case of a float, it floors the result. In case of a string, it doesn't.</span>
<span class="comment-copy">why is the call to <code>floor()</code> required here?</span>
<span class="comment-copy">@shea It isn't, it just makes the part where 5.5 gets rounded to 5 explicit. It's from the <code>math</code> package btw.</span>
<span class="comment-copy">wouldn't it be a clearer demonstration of how <code>int</code> works if it was just <code>int(float('5.5'))</code>?</span>
<span class="comment-copy">In the sense of how python works, I guess so. Then again, I personally would have been glad if the language was a bit more explicit in what it does when I picked it up, so it boils down to how the kid in question learns it best. I wanted to offer this 'be as explicit as possible' perspective.</span>
