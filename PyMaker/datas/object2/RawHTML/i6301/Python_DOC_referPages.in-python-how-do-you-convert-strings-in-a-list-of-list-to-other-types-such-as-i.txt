<div class="post-text" itemprop="text">
<p>When given a list of data, I'm being asked to convert strings within the list to a corresponding type, such as int if the string contains a whole number, or a float if it doesn't contain a whole number. But I'm running into this problem where it will convert the value but it doesn't change the original value in the list.</p>
<p>For example, if given:</p>
<pre><code>d = [['abc', '123', '45.6', 'True', 'False']]
</code></pre>
<p>It's supposed to look like this after the conversion:</p>
<pre><code>[['abc', 123, 45.6, True, False]]
</code></pre>
<p>So far I've tried to write a for loop and convert the values that way but as I mentioned it doesn't change the original list:</p>
<pre><code>for lst in data:
    for index in lst:
        if index.isdigit():
            index = int(index)
        elif not index.isdigit():
            index = float(index)
</code></pre>
<p>I'm not really sure how to fix the problem or if it's there's another way to go about it. Any help would be appreciated! Thank you :) </p>
</div>
<div class="post-text" itemprop="text">
<p>You need to update the items at the initial indices using list subscription i.e. assigning to each index after <em>casting</em> the item. You can do this using <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> which supplies each item in the list with a corresponding index:</p>
<pre><code>import ast

d = [['abc', '123', '45.6', 'True', 'False']]

for lst in d:
  for i, x in enumerate(lst):
    try:
        lst[i] = ast.literal_eval(x)
    except (ValueError, SyntaxError):
        lst[i] = x
print(d)
# [['abc', 123, 45.6, True, False]]
</code></pre>
<p><a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a> tries to parse each string item as a Python literal, if that fails (with error), revert to the original item (see <a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow noreferrer">EAFP</a>).</p>
<p>If you have a large number of these strings, it would be faster (although with less cleaner code and maybe prone to errors) to write your own parser, however, it's probably better to let <code>ast.literal_eval</code> do all the <em>dirty</em> work.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here without any libraries. Just slice the things and some try-except tricks. <code>isdigit()</code> checks if the <code>string</code> is <code>digit</code>, if it's not, then that means it is <code>float</code>. For <code>True</code> and <code>False</code>, just checking if they are in the list. </p>
<p>This can be done shorter, I just made it this way so you can see how it works.</p>
<pre><code>all = [['abc', '123', '45.6', 'True', 'False']]

for d in all:
    for x,y in enumerate(d):
        if y == "True":
            d[x] = True
        if y == "False":
            d[x] = False

for d in all:
    for x,y in enumerate(d):
        try:
            if y.isdigit() == True:
                d[x] = int(y)
            else:
                d[x] = float(y)
        except:
            pass
</code></pre>
<p>Output;</p>
<pre><code>['abc', 123, 45.6, True, False]

abc
&lt;class 'str'&gt;
123
&lt;class 'int'&gt;
45.6
&lt;class 'float'&gt;
True
&lt;class 'bool'&gt;
False
&lt;class 'bool'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try This ( No Library Needed ):</p>
<pre><code>data = [['abc', '123', '45.6', 'True', 'False']]


def isfloat(x):
    try:
        a = float(x)
    except ValueError:
        return False
    else:
        return True


def isint(x):
    try:
        a = float(x)
        b = int(a)
    except ValueError:
        return False
    else:
        return a == b


for counter1, box in enumerate(data):

    for counter2, items in enumerate(box):

        if isfloat(items) is True:
            data[counter1][counter2] = float(items)

        elif isint(items) is True:
            data[counter1][counter2] = float(items)

        elif items == "True":
            data[counter1][counter2] = True

        elif items == "False":
            data[counter1][counter2] = False

        else:
            pass

print(data)
</code></pre>
</div>
<span class="comment-copy">Good idea. It seems to be not documented, but <code>literal_eval</code> may raise also a <code>SyntaxError</code> (try e.g."123A"). Maybe other errors too, I don't know exactly. BTW, a simple <code>pass</code> would do in the <code>except</code> clause.</span>
<span class="comment-copy">@VPfB Thanks for noting. I'll just add that to the exceptions to watch for.</span>
