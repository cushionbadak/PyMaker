<div class="post-text" itemprop="text">
<p>I am new to python. I have a .csv dataset. There is a column called BasePay.</p>
<p>Most of the values in column is type int, but some values are "Not Provided".</p>
<p>I am trying to get mean value of BasePay as:</p>
<pre><code>sal['BasePay'].mean()
</code></pre>
<p>But it gives me error of :</p>
<p>TypeError: can only concatenate str (not "int") to str.</p>
<p>I want to omit that string columns. How can i do that?</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Because some non numeric values use <a href="http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.to_numeric.html" rel="nofollow noreferrer"><code>to_numeric</code></a> with <code>errors='coerce'</code> for convert them to <code>NaN</code>s, so <code>mean</code> working nice:</p>
<pre><code>out = pd.to_numeric(sal['BasePay'], errors='coerce').mean()
</code></pre>
<p><strong>Sample</strong>:</p>
<pre><code>sal = pd.DataFrame({'BasePay':[1, 'Not Provided', 2, 3, 'Not Provided']})
print (sal)
        BasePay
0             1
1  Not Provided
2             2
3             3
4  Not Provided

print (pd.to_numeric(sal['BasePay'], errors='coerce'))
0    1.0
1    NaN
2    2.0
3    3.0
4    NaN
Name: BasePay, dtype: float64

out = pd.to_numeric(sal['BasePay'], errors='coerce').mean()
print (out)
2.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This problem is because, when you import the dataset, the empty fields will be filled with NaN(pandas),  So you have two options 1.Either you convert pandas.nan to  0 or remove the NaN's,  by drop.nan</p>
<p>This can also be achieved by using np.nanmean() </p>
</div>
<div class="post-text" itemprop="text">
<p>If you store data from the BasePay column in a list, you can do as follows:</p>
<pre><code>for i in l:
if type(i) == int:
    x.append(i)

mean = sum(x) / len(x)
print(mean)
</code></pre>
</div>
<span class="comment-copy">...is this pandas?</span>
<span class="comment-copy">@Aran-Fey yes i am using pandas</span>
<span class="comment-copy">It is working thanks. Can you explain what does mean erorrs='coerce' parameter?</span>
<span class="comment-copy">@FurkanKaracan - If check link, there is <code>errors : {‘ignore’, ‘raise’, ‘coerce’}, default ‘raise’          If ‘coerce’, then invalid parsing will be set as NaN</code> - so invalid values are replaced to NaNs</span>
<span class="comment-copy">@FurkanKaracan - Added sample data for better understanding.</span>
<span class="comment-copy">Thank you. Everything is clear now.</span>
<span class="comment-copy">This is not true. <code>.mean()</code> will work fine with NaN values (ignore them by default). E.g. <code>pd.DataFrame([1,np.nan, 2]).mean()</code> will return <code>1.5</code></span>
<span class="comment-copy">How i can use mean after df['BasePay'].dropna</span>
<span class="comment-copy">And my case includes some string values other np.nan . i want to omit them</span>
