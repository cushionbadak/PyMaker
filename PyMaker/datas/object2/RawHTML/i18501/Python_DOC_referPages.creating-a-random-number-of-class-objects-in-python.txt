<div class="post-text" itemprop="text">
<p>Is there a correct way to loop through a for loop and create a number of objects, but not know how many time it loops? From what i've researched I can loop through a list of predetermined strings and create objects from those, but what if I don't have a predetermined number to loop through. </p>
<pre><code>class Item(object):
    def __init__(self, x, y, z):
        self.x
        self.y
        self.z

for x in range(random_number):
    x = Item(1,2,3)
</code></pre>
<p>How would I go about this, and know the difference between the first and last object created?</p>
</div>
<div class="post-text" itemprop="text">
<p>What are you going to do with these objects? If you just want to create a random amount with a for loop, do what you are doing. However, it looks to me like you want to put them in a <a href="http://docs.python.org/3/tutorial/datastructures.html" rel="nofollow">list</a>:</p>
<pre><code>mylist = []
for i in range(random_number):
    mylist.append(Item(1,2,3))
</code></pre>
<p>Alternatively, you could use a <a href="http://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>:</p>
<pre><code>mylist = [Item(1,2,3) for i in range(random_number)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could store the objects in a list. Then you can reference the first and last items using indexing.</p>
<pre><code>items = [Item(1,2,3) for x in range(random_number)]
first = items[0]
last = items[-1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you could use an array to keep track of objects created</p>
<pre><code>object_list = []
for x in range(random_number):
    object_list.append(Item(1, 2, 3))
</code></pre>
<p>the first object created would be <code>object_list[0]</code> and the last would be <code>object_list[-1]</code></p>
</div>
<span class="comment-copy">I'm using the objects in a game where the objects represent people. After a condition is met there will be more of these objects implemented into the game, so there could be 100+ objects created.</span>
<span class="comment-copy"><code>first, *rest, last = items</code> -- if on Python 3 IMO the unpacking is nicer than the index-based getting.</span>
