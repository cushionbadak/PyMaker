<div class="post-text" itemprop="text">
<p>I want to make an <code>@pure</code> decorator for Python, part of this is being able to selectively disallow access to the global scope of the function.</p>
<p>Is there a way to programmatically change which dictionary thing serves as a function's global/external scope?</p>
<p>So for instance in the following I want to be able to intercept the access to <code>f</code> in <code>h</code> and throw an error, but I want to allow access to <code>g</code> because it's a pure function.</p>
<pre><code>def f():
    print("Non-pure function")

@pure
def g(i):
    return i + 1

@pure
def h(i):
    f()
    return g(i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You would have to create a <em>new</em> function object from the old one:</p>
<pre><code>newfunc = type(h)(h.__code__, cleaned_globals, h.__name__, h.__defaults__, h.__closure__)
</code></pre>
<p>Here, <code>cleaned_globals</code> is a dictionary that is to be used as the global namespace for the newly created function object. All other arguments echo the original function's.</p>
<p><code>cleaned_globals</code> could be based on a copy of <code>h.__globals__</code>, of course.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; def h(i):
...     f()
...     return g(i)
... 
&gt;&gt;&gt; def g(i):
...     return i + 1
... 
&gt;&gt;&gt; def f():
...     print("Non-pure function")
... 
&gt;&gt;&gt; h(1)
Non-pure function
2
&gt;&gt;&gt; cleaned_globals = {'g': g}
&gt;&gt;&gt; newfunc = type(h)(h.__code__, cleaned_globals, h.__name__, h.__defaults__, h.__closure__)
&gt;&gt;&gt; newfunc(1)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in h
NameError: global name 'f' is not defined
&gt;&gt;&gt; cleaned_globals['f'] = lambda: print('Injected function')
&gt;&gt;&gt; newfunc(1)
Injected function
2
</code></pre>
</div>
<span class="comment-copy">Do you perhaps have a link to a resource where I can read up more on this?</span>
<span class="comment-copy">Creating new function objects is not officially documented; I used <code>help(type(f))</code> as a quick reference. The <a href="http://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">datamodel documentation</a> is my go-to guide for attributes on things like functions, a quick test showed me that <code>.__globals__</code> is, as expected, read-only.</span>
