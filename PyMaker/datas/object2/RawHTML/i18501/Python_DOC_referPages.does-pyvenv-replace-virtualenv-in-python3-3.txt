<div class="post-text" itemprop="text">
<p>Virtualenvwrapper is a user-friendly shell around Python's virtualenv.</p>
<p>Python 3.3 ships with pyvenv built into the standard library, which aims to supercede virtualenv.</p>
<p>But if I install Virtualenvwrapper on Python3.3, it still installs virtualenv, leading me to believe it doesn't use 'pyvenv' under the covers.</p>
<p>Presumably this doesn't really matter - if I wish to use virtualenvwrapper on Python3.3 I should happily let it use virtualenv instead of pyvenv, and will (for the moment) suffer no ill effects?</p>
</div>
<div class="post-text" itemprop="text">
<p>Sorry this answer is a bit delayed. pyvenv does <em>not</em> aim to supersede virtualenv, in fact virtualenv in Python 3 depends on the standard library venv module.</p>
<p>The <strong>pyvenv</strong> command creates an <strong>absolutely minimal</strong> virtual environment into which other packages can be installed.</p>
<p>The Python 3 version of <strong>virtualenv</strong> actually subclasses the standard library's implementation and provides hooks to automatically install setuptools and pip into the environment which pyvenv doesn't do on it's own.</p>
<p>As far as I know <strong>virtualenvwrapper</strong> depends on virtualenv only because the mkvirtualenv or mkproject commands allow you to specify packages to be installed into the new environment, this only works because virtualenv will have already installed setuptools and pip.</p>
<p>So to answer your question I believe you should be able to use virtualenvwrapper on environments created by pyvenv as long as you follow virtualenvwrapper's conventions for where to put things and you either manually install setuptools and pip into the environment or don't use any package management features of virtualenvwrapper.</p>
</div>
<span class="comment-copy">It seems feasible to use virtualenvwrapper with pyvenv, but with some gotchas - <a href="http://railslide.io/pyvenv-virtualenvwrapper.html" rel="nofollow noreferrer">railslide.io/pyvenv-virtualenvwrapper.html</a></span>
<span class="comment-copy">Wow. Not just clear and explicit, but also an answer no too far from the one I wanted to hear. Many thanks.</span>
<span class="comment-copy">In Python 3.4, pyenv does install pip.  <a href="https://docs.python.org/3/library/venv.html" rel="nofollow noreferrer">docs.python.org/3/library/venv.html</a></span>
<span class="comment-copy">Also, (in 3.3 if not earlier) pyvenv includes (links to) the system and user site-packages when the <code>--system-site-packages</code> option is used.</span>
<span class="comment-copy">Virtualenv DOES NOT subclass the standard library's implementation (venv module) at the time of this comment (virtualenv 1.11.x, and I imagine not 1.12.x).  pyvenv as of Python 3.4 should normally install pip &amp; setuptools (some linux distros' pythons have this disabled this currently).</span>
<span class="comment-copy">Good lord, this answer might as well be written in Chinese and I would understand basically the same amount. Not complaining about the answer itself, but on the state of virtual environments and Python (pyenv, pyenv-virtualenv, pyenv-virtualenvwrapper, pyvenv, virtualenv, virtualenvwrapper, venv, ....) Does it really need to be this difficult?</span>
