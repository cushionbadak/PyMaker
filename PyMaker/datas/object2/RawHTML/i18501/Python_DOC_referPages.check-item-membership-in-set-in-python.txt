<div class="post-text" itemprop="text">
<p>Hello I've been coding for a couple of months now and know the basics, but I'm having a set membership problem for which I can't find a solution. </p>
<p>I have a list of lists of pairs of integers, and I want to remove the list that have the "a" integer in them. I thought using sets was the easiest way. Bellow is the code:</p>
<pre><code>## This is the item to test against. 
a = set([3]) 
## This is the list to test.      
groups = [[3, 2], [3, 4], [1, 2], [5, 4], [4, 3]]     

## This is a list that will contain the lists present
## in groups which do not contain "a"
groups_no_a = []        

for group in groups:
    group = set(group)
    if a in group:
        groups_no_a.append(group)
    ## I thought the problem had something to do with
    ## clearing the variable so I put this in,   
    ## but to no remedy. 
    group.clear()  


print groups_no_a 
</code></pre>
<p>I had also tried using <strong><code>s.issubset(t)</code></strong> until I realized that this tested if <strong><em>every</em></strong> element in <em><code>s</code></em> in <em><code>t</code></em>. </p>
<p>Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>You want to test if there is no <a href="http://docs.python.org/2/library/stdtypes.html#set.intersection" rel="noreferrer"><em>intersection</em></a>:</p>
<pre><code>if not a &amp; group:
</code></pre>
<p>or</p>
<pre><code>if not a.intersection(group):
</code></pre>
<p>or, inversely, that the sets are <a href="http://docs.python.org/2/library/stdtypes.html#set.isdisjoint" rel="noreferrer"><em>disjoint</em></a>:</p>
<pre><code>if a.isdisjoint(group):
</code></pre>
<p>The method forms take <em>any</em> iterable, you don't even have to turn <code>group</code> into a set for that. The following one-liner would work too:</p>
<pre><code>groups_no_a = [group for group in groups if a.isdisjoint(group)]
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; a = set([3]) 
&gt;&gt;&gt; groups = [[3, 2], [3, 4], [1, 2], [5, 4], [4, 3]]     
&gt;&gt;&gt; [group for group in groups if a.isdisjoint(group)]
[[1, 2], [5, 4]]
</code></pre>
<p>If all you are testing for is <strong>one</strong> element, then it could be that creating sets is going to cost more in performance than what you gain in testing for membership, and just doing:</p>
<pre><code>3 not in group
</code></pre>
<p>where <code>group</code> is a short list.</p>
<p>You can use the <a href="http://docs.python.org/2/library/timeit.html" rel="noreferrer"><code>timeit</code> module</a> to compare pieces of Python code to see what works best for your specific typical list sizes.</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe you could use <a href="http://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow">List Comprehension</a>:</p>
<pre><code>a = 3
groups = [[3, 2], [3, 4], [1, 2], [5, 4], [4, 3]]
print [x for x in groups if a not in x]
</code></pre>
<p>Edit based on a comment:</p>
<blockquote>
<p>Well to those curious, what I want to do is; I have a list like the
  following: [ [error, [ [group_item_1, group_item_2], [...], [...],
  [...] ] ], [more like this previous], [...] ], and I want to get the
  item with least error and that doesn't have "a" in group_item_1 or
  group_item_2. The lists are already sorted by error. I sorta almost go
  it :D</p>
</blockquote>
<p>This should do the trick:</p>
<pre><code>from itertools import chain, iterfilter

def flatten(listOfLists):
    "Flatten one level of nesting"
    return chain.from_iterable(listOfLists)


errors_list =  [ ['error0', [ [30, 2], [3, 4], [1, 2], [5, 4], [4, 3] ] ], ['error1', [ [31, 2], [3, 4], [1, 2], [5, 4], [4, 3] ] ] ]

a = 30
result = next(ifilter(lambda err: a not in flatten(err[1]), reversed(errors_list)), None)

print result #finds error1 as it has no 30 on its list
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Rather than making a = set([3]), why not do the following?</p>
<pre><code>a = 3
groups = [[3, 2], [3, 4], [1, 2], [5, 4], [4, 3]]
groups_no_a = [group for group in groups if a not in group]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to use sets here, you can test for membership of elements in lists. You also seem to have <code>in</code>, where I think you should have <code>not in</code>.</p>
<p>This code is similar to yours, and should work:</p>
<pre><code>## This is the item to test against. 
a = 3
## This is the list to test.      
groups = [[3, 2], [3, 4], [1, 2], [5, 4], [4, 3]]     

## This is a list that will contain the lists present
## in groups which do not contain a
groups_no_a = []        

for group in groups:
    if a not in group:
        groups_no_a.append(group)

print groups_no_a
</code></pre>
<p>However, a shorter, more Pythonic way uses <a href="http://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehensions</a>:</p>
<pre><code>groups_no_a = [i for i in groups if a not in i]
</code></pre>
<p>If you are testing a whether an item is in a much longer list, you should use sets instead for performance.</p>
</div>
<span class="comment-copy">Unless I have misunderstood the question, for what he wants to do, he doesn't need sets. It looks like he just wants to find if an element is in a list, and decided that sets were the way to do this, even though they aren't.</span>
<span class="comment-copy">@user2387370: And sets are faster for that task; <code>one_element in somelist</code> has to scan the list.</span>
<span class="comment-copy">I wasn't even aware of the disjoint option as it's a bit hidden in  <a href="http://docs.python.org/2/library/sets.html" rel="nofollow noreferrer">link</a>.</span>
<span class="comment-copy">@grasshopper: that is the deprecated module, from before <code>set</code> was added as a type to the language.</span>
<span class="comment-copy">@MartijnPieters "Premature optimization is the root of all evil". I doubt using sets would have been suggested if the question had just been "how to check if an element is in a list". In any case, I doubt how great any increase in performance is, as you are only checking for membership in a list of 2 items.</span>
<span class="comment-copy">Works great, thank you! List comprehensions take a while to master...</span>
<span class="comment-copy">Oh man how could I miss that... (embarrassed)</span>
