<div class="post-text" itemprop="text">
<p>I need to choose some elements from the given list, knowing their index. Let say I would like to create a new list, which contains element with index 1, 2, 5, from given list [-2, 1, 5, 3, 8, 5, 6]. What I did is:</p>
<pre><code>a = [-2,1,5,3,8,5,6]
b = [1,2,5]
c = [ a[i] for i in b]
</code></pre>
<p>Is there any better way to do it? something like c = a[b] ?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="noreferrer"><code>operator.itemgetter</code></a>:</p>
<pre><code>from operator import itemgetter 
a = [-2, 1, 5, 3, 8, 5, 6]
b = [1, 2, 5]
print(itemgetter(*b)(a))
# Result:
(1, 5, 5)
</code></pre>
<p>Or you can use <a href="http://www.numpy.org/" rel="noreferrer">numpy</a>:</p>
<pre><code>import numpy as np
a = np.array([-2, 1, 5, 3, 8, 5, 6])
b = [1, 2, 5]
print(list(a[b]))
# Result:
[1, 5, 5]
</code></pre>
<hr/>
<p>But really, your current solution is fine. It's probably the neatest out of all of them.</p>
</div>
<div class="post-text" itemprop="text">
<p>Alternatives:</p>
<pre><code>&gt;&gt;&gt; map(a.__getitem__, b)
[1, 5, 5]
</code></pre>
<hr/>
<pre><code>&gt;&gt;&gt; import operator
&gt;&gt;&gt; operator.itemgetter(*b)(a)
(1, 5, 5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another solution could be via pandas Series:</p>
<pre><code>import pandas as pd

a = pd.Series([-2, 1, 5, 3, 8, 5, 6])
b = [1, 2, 5]
c = a[b]
</code></pre>
<p>You can then convert c back to a list if you want: </p>
<pre><code>c = list(c)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Basic and not very extensive testing comparing the execution time of the five supplied answers:</p>
<pre><code>def numpyIndexValues(a, b):
    na = np.array(a)
    nb = np.array(b)
    out = list(na[nb])
    return out

def mapIndexValues(a, b):
    out = map(a.__getitem__, b)
    return list(out)

def getIndexValues(a, b):
    out = operator.itemgetter(*b)(a)
    return out

def pythonLoopOverlap(a, b):
    c = [ a[i] for i in b]
    return c

multipleListItemValues = lambda searchList, ind: [searchList[i] for i in ind]
</code></pre>
<p>using the following input:</p>
<pre><code>a = range(0, 10000000)
b = range(500, 500000)
</code></pre>
<p>simple python loop was the quickest with lambda operation a close second, mapIndexValues and getIndexValues were consistently pretty similar with numpy method significantly slower after converting lists to numpy arrays.If data is already in numpy arrays the numpyIndexValues method with the numpy.array conversion removed is quickest.</p>
<pre><code>numpyIndexValues -&gt; time:1.38940598 (when converted the lists to numpy arrays)
numpyIndexValues -&gt; time:0.0193445 (using numpy array instead of python list as input, and conversion code removed)
mapIndexValues -&gt; time:0.06477512099999999
getIndexValues -&gt; time:0.06391049500000001
multipleListItemValues -&gt; time:0.043773591
pythonLoopOverlap -&gt; time:0.043021754999999995
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm sure this has already been considered: If the amount of indices in b is small and constant, one could just write the result like: </p>
<pre><code>c = [a[b[0]]] + [a[b[1]]] + [a[b[2]]]
</code></pre>
<p>Or even simpler if the indices itself are constants...</p>
<pre><code>c = [a[1]] + [a[2]] + [a[5]]
</code></pre>
<p>Or if there is a consecutive range of indices...</p>
<pre><code>c = a[1:3] + [a[5]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My answer does not use numpy or python collections.</p>
<p>One trivial way to find elements would be as follows:</p>
<pre><code>a = [-2, 1, 5, 3, 8, 5, 6]
b = [1, 2, 5]
c = [i for i in a if i in b]
</code></pre>
<p><em>Drawback: This method may not work for larger lists. Using numpy is recommended for larger lists.</em></p>
</div>
<span class="comment-copy">by the way, I found another solution here. I haven't test it yet, but I think I can post it here once you are interested in <a href="http://code.activestate.com/recipes/577953-get-multiple-elements-from-a-list/" rel="nofollow noreferrer">code.activestate.com/recipes/â€¦</a></span>
<span class="comment-copy">That is the same solution as mentioned in the question, but wrapped in a <code>lambda</code> function.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/2621674/how-to-extract-elements-from-a-list-in-python">how to extract elements from a list in python?</a></span>
<span class="comment-copy">+1 for mentioning that <code>c = [a[i] for i in b]</code> is perfectly fine.  Note that the <code>itemgetter</code> solution will not do the same thing if b has less than 2 elements.</span>
<span class="comment-copy"><b>Side</b> <b>Note</b>: Using <i>itemgetter</i> while working in multi-process doesn't work. Numpy works great in multi-process.</span>
<span class="comment-copy">Additional comment, <code>a[b]</code> works <b>only</b> when <code>a</code> is a <b>numpy</b> array, i.e. you create it with a numpy function.</span>
<span class="comment-copy">I have benchmarked the non numpy options and itemgetter appears to be the fastest, even slightly faster than simply typing out the desired indexes inside parentheses, using Python 3.44</span>
<span class="comment-copy">@citizen2077, can you give an example of the syntax you describe?</span>
<span class="comment-copy">the first one is nice because you use <code>build-in</code> functions</span>
<span class="comment-copy">The problem w/ the first one is that <code>__getitem__</code> doesn't seem to be compasable eg how to map the type of the item? <code>map(type(a.__getitem__), b) </code></span>
<span class="comment-copy">@alancalvitti, <code>lambda x: type(a.__getitem__(x)), b</code>. In this case using <code>[..]</code> is more compact: <code>lambda x: type(a[x]), b</code></span>
<span class="comment-copy">I do not know what Python interpreter you use but the first method <code>numpyIndexValues</code> does not work since <code>a</code>, <code>b</code> are of type <code>range</code>. I am guessing that you ment to convert <code>a</code>, <code>b</code> to <code>numpy.ndarrays</code> first?</span>
<span class="comment-copy">@strpeter Yes I was wasn't comparing apples with apples, I had created numpy arrays as input in the test case for the numpyIndexValues. I have fixed this now and all use the same lists as input.</span>
<span class="comment-copy">Thank you for reminding me that <code>[a] + [b] = [a, b]</code></span>
<span class="comment-copy">No need to iterate <code>a</code>. <code>[a[i] for i in b]</code></span>
<span class="comment-copy">This method doesn't even work in any other case. What if <code>a</code> had another 5 in it?</span>
<span class="comment-copy">IMO, faster to do this sort of intersection using <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">sets</a></span>
<span class="comment-copy">If you are worried about IndexErrors if b has numbers that exceed a's size, try <code>[a[i] if i&lt;len(a) else None for i in b]</code></span>
