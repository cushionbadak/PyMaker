<div class="post-text" itemprop="text">
<p>How would I create a list with values between two values I put in? 
For example, the following list is generated for values from 11 to 16:</p>
<pre><code>list = [11, 12, 13, 14, 15, 16]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://docs.python.org/2.7/library/functions.html#range" rel="noreferrer"><code>range</code></a>. In Python 2.x it returns a list so all you need is:</p>
<pre><code>&gt;&gt;&gt; range(11, 17)
[11, 12, 13, 14, 15, 16]
</code></pre>
<p>In Python 3.x <a href="https://docs.python.org/3/library/stdtypes.html#typesseq-range" rel="noreferrer"><code>range</code></a> is a iterator. So, you need to convert it to a list:</p>
<pre><code>&gt;&gt;&gt; list(range(11, 17))
[11, 12, 13, 14, 15, 16]
</code></pre>
<p><strong>Note</strong>: The second number is exclusive. So, here it needs to be <code>16+1</code> = <code>17</code></p>
<p>EDIT:</p>
<p>To respond to the question about incrementing by <code>0.5</code>, the easiest option would probably be to use <a href="https://pypi.python.org/pypi/numpy" rel="noreferrer"><code>numpy</code></a>'s <code>arange</code>,</p>
<pre><code>&gt;&gt;&gt; numpy.arange(11, 17, 0.5)
array([ 11. ,  11.5,  12. ,  12.5,  13. ,  13.5,  14. ,  14.5,  15. ,
        15.5,  16. ,  16.5])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You seem to be looking for <a href="http://docs.python.org/2/library/functions.html#range" rel="noreferrer"><code>range()</code></a>:</p>
<pre><code>&gt;&gt;&gt; x1=11
&gt;&gt;&gt; x2=16
&gt;&gt;&gt; range(x1, x2+1)
[11, 12, 13, 14, 15, 16]
&gt;&gt;&gt; list1 = range(x1, x2+1)
&gt;&gt;&gt; list1
[11, 12, 13, 14, 15, 16]
</code></pre>
<p>For incrementing by <code>0.5</code> instead of <code>1</code>, say:</p>
<pre><code>&gt;&gt;&gt; list2 = [x*0.5 for x in range(2*x1, 2*x2+1)]
&gt;&gt;&gt; list2
[11.0, 11.5, 12.0, 12.5, 13.0, 13.5, 14.0, 14.5, 15.0, 15.5, 16.0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try:</p>
<pre><code>range(x1,x2+1)  
</code></pre>
<p>That is a list in Python 2.x and behaves mostly like a list in Python 3.x.  If you are running Python 3 and need a list that you can modify, then use: </p>
<pre><code>list(range(x1,x2+1))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are looking for range like function which works for float type, then here is a very good <a href="http://pythoncentral.io/pythons-range-function-explained/" rel="nofollow noreferrer">article</a>.</p>
<pre><code>def frange(start, stop, step=1.0):
    ''' "range()" like function which accept float type''' 
    i = start
    while i &lt; stop:
        yield i
        i += step
# Generate one element at a time.
# Preferred when you don't need all generated elements at the same time. 
# This will save memory.
for i in frange(1.0, 2.0, 0.5):
    print i   # Use generated element.
# Generate all elements at once.
# Preferred when generated list ought to be small.
print list(frange(1.0, 10.0, 0.5))    
</code></pre>
<p>Output:</p>
<pre><code>1.0
1.5
[1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use list comprehension in python. Since you want 16 in the list too.. Use x2+1. Range function excludes the higher limit in the function.</p>
<blockquote>
<p>list=[x for x in range(x1,x2+1)]</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>assuming you want to have a range between x to y</p>
<pre><code>range(x,y+1)

&gt;&gt;&gt; range(11,17)
[11, 12, 13, 14, 15, 16]
&gt;&gt;&gt;
</code></pre>
<p>use list for 3.x support</p>
</div>
<div class="post-text" itemprop="text">
<p>Every answer above assumes range is of positive numbers only. Here is the solution to return list of consecutive numbers where arguments can be any (positive or negative), with the possibility to set optional step value (default = 1).</p>
<pre><code>def any_number_range(a,b,s=1):
""" Generate consecutive values list between two numbers with optional step (default=1)."""
if (a == b):
    return a
else:
    mx = max(a,b)
    mn = min(a,b)
    result = []
    # inclusive upper limit. If not needed, delete '+1' in the line below
    while(mn &lt; mx + 1):
        # if step is positive we go from min to max
        if s &gt; 0:
            result.append(mn)
            mn += s
        # if step is negative we go from max to min
        if s &lt; 0:
            result.append(mx)
            mx += s
    return result
</code></pre>
<p>For instance, standard command <code>list(range(1,-3))</code> returns empty list <code>[]</code>, while this function will return <code>[-3,-2,-1,0,1]</code></p>
<p><strong>Updated</strong>: now step may be negative. Thanks @Michael for his comment.</p>
</div>
<div class="post-text" itemprop="text">
<p>The most elegant way to do this is by using the <code>range</code> function however if you want to re-create this logic you can do something like this :</p>
<pre><code>def custom_range(*args):
    s = slice(*args)
    start, stop, step = s.start, s.stop, s.step
    if 0 == step:
        raise ValueError("range() arg 3 must not be zero")
    i = start
    while i &lt; stop if step &gt; 0 else i &gt; stop:
        yield i
        i += step

&gt;&gt;&gt; [x for x in custom_range(10, 3, -1)]
</code></pre>
<p>This produces the output:</p>
<pre><code>[10, 9, 8, 7, 6, 5, 4]
</code></pre>
<p>As expressed before by @Jared, the best way is to use the <code>range</code> or <code>numpy.arrange</code> however I find the code interesting to be shared.</p>
</div>
<span class="comment-copy">Awesome! Exactly what I was looking for! Is there also a way to increment by smaller values like 0.5 than just 1?   so [11.0, 11.5, 12.0 ...... 16.0]</span>
<span class="comment-copy">@lorde You can increment by more than 1 with a third <code>step</code> parameter but that's still an int -- not float. You can't do that exactly in the standard lib.</span>
<span class="comment-copy">@Jared can I make a list by dropping some value after some interval. like [1,2,3,5,6,7,9,10,11,13,14,15,17,18,19]</span>
<span class="comment-copy">Good for telling about Python 2.x and 3.x.</span>
<span class="comment-copy">If you're working in circumstances where numpy is unwanted, consider (where x=11, y=17, and step=0.5 as above): a_range = [x]+[x+(step*i) for i in range(int((y-x)/step))]</span>
<span class="comment-copy">Just a minor nitpick.  In the first code block you use <code>list</code> as a variable.</span>
<span class="comment-copy">In python <code>list</code> is a builtin class, so its usage as a variable is somewhat discouraged</span>
<span class="comment-copy">x*increment, but what do you mean by 2*startvalue, what for? would you explain please?</span>
<span class="comment-copy">What is the point of the list comprehension?</span>
<span class="comment-copy">If you use <code>range()</code> no need to use a list comprehension</span>
<span class="comment-copy">This assumes your step is positive.</span>
<span class="comment-copy">@Michael, good point. I've updated the code, so now you can have negative steps :)</span>
<span class="comment-copy">...but <code>list(range(-3,1))</code> already returns <code>[-3, -2, -1, 0]</code></span>
<span class="comment-copy">@tgikal, that's right. But what if you don't know what values will be assigned to the arguments of your function and you need sorted return?</span>
<span class="comment-copy">I don't see any additional features your custom function does that cannot be accomplished using the builtin range function, I guess an example of the improvement would be great, since your current example is basically <code>i_min = -3, i_max = 1</code> <code>any_number_range(i_max, i_min))</code> returns <code>[-3,-2,-1,0,1]</code>  But, builtin <code>list(range(i_min, i_max + 1))</code> will return the same values.</span>
<span class="comment-copy">list(custom_range(10,3,1)) returns empty list.</span>
<span class="comment-copy">indeed, like <code>[x for x in range(10, 3, 1)]</code> - the first argument is the start, the second the end and the last the step. ==&gt; stop &gt; start</span>
