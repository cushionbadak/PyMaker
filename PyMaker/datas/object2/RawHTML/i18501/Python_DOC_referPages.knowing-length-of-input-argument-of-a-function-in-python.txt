<div class="post-text" itemprop="text">
<p>Let's say now I have a function:</p>
<pre><code>def func(x, p): return p[0] * x ** 2 + p[1] * x + p[2]
</code></pre>
<p>And now, I can get the information about the function using inspect:</p>
<pre><code>import inspect
args, varargs, varkw, defaults = inspect.getargspec(func)
</code></pre>
<p>But I only know I have two arguments, instead of the information on each argument (whether it's a scalar or something else).</p>
<p>Just making sure - theoretically, is there any way that I can know the minimum length of the tuple p used in the function?</p>
<p>Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>The answer is no.</p>
<p>Firstly you can't assume the type (let alone the size of the argument).</p>
<p>Secondly, there is no way to tell the length, because it's supposed to be arbitrary and the function may do nothing about the input at all.</p>
<p>if you do want something similar, try to use *l for variable-length arguments. similarly there is **d for arbitrary map (named arguments).</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot enforce neither the type nor the value of the argument that is passed to your function.</p>
<p>The only thing you can do is annotate your functions in python 3: <a href="http://docs.python.org/3/tutorial/controlflow.html#function-annotations" rel="nofollow">annotations</a>, But even that doesn't prevent the user from passing in something invalid.</p>
<p><em>Note: actually you can enforce by checking directly in the function or with a decorator, but that doesn't help in your case.</em></p>
</div>
<span class="comment-copy">"is there any way that I can know the minimum length of the tuple p used in the function?". Yes: write it explicitly in the docstring of the function.</span>
<span class="comment-copy">Why is this post tagged with <code>numpy</code> and <code>scipy</code> tags? If you have something specific in mind you should state that in your question.</span>
<span class="comment-copy">@ViktorKerkez Thanks for noting! I removed those two tags.</span>
<span class="comment-copy">@Bakuriu Thanks! I meant to say "how to get it programmatically" though. :)</span>
<span class="comment-copy">Thanks Li! This really helped a lot for me to understand the problem.</span>
<span class="comment-copy">I see. Thank you Viktor! This is really helpful. I accepted Li's answer because that one helped me understand the issue better; however this one is more helpful in providing ways to work around it. Thanks again!</span>
