<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/16638639/why-does-pythons-itertools-cycle-need-to-create-a-copy-of-the-iterable">Why does Python's itertools.cycle need to create a copy of the iterable?</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>I'm curious about the warning in <a href="http://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow">itertools.cycle(iterable)</a> :</p>
<blockquote>
<p>Make an iterator returning elements from the
  iterable and saving a copy of each. When the iterable is exhausted,
  return elements from the saved copy. Repeats indefinitely. </p>
<p>Equivalent to: </p>
<pre><code>def cycle(iterable):
    # cycle('ABCD') --&gt; A B C D A B C D A B C D ...
    saved = []
    for element in iterable:
        yield element
        saved.append(element)
    while saved:
        for element in saved:
              yield element
</code></pre>
</blockquote>
<p>The entry also contains the warning, "Note, this member of the toolkit may require significant auxiliary storage (depending on the length of the iterable)."</p>
<p>Couldn't you avoid the additional storage requirement (and some complexity) with:</p>
<pre><code>def cycle(iterable):
    while True:
        for i in iterable:
            yield i
</code></pre>
<p>What's the advantage of storing used items in <code>saved</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Some iterables can only be iterated once. Thus cycle will store a copy so it can continue to read those items.
See <a href="https://stackoverflow.com/questions/16638639/why-does-pythons-itertools-cycle-need-to-create-a-copy-of-the-iterable">this related question</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The iterable could be some generator that does expensive calculations to generate the element.</p>
<p>By caching the results of the iterable, you don't have to repeat what could be a potentially expensive and time-consuming operation to cycle through the iterable.</p>
</div>
