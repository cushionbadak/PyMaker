<div class="post-text" itemprop="text">
<p>I would like to create an object then add attributes to the object on the fly. Here's some pseudocode EX1:</p>
<pre><code>a = object()
a.attr1 = 123
a.attr2 = '123'
a.attr3 = [1,2,3]
</code></pre>
<p>EX2: <a href="http://ocw.mit.edu/resources/res-18-002-introduction-to-matlab-spring-2008/other-matlab-resources-at-mit/tutorial07.pdf" rel="noreferrer">the first page of this PDF</a></p>
<p>In Python is it possible to add attributes to an object on the fly (similar to the two examples I gave)? If yes, how?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are using Python 3.3+, use <a href="http://docs.python.org/3/library/types.html" rel="noreferrer">types.SimpleNamespace</a>:</p>
<pre><code>&gt;&gt;&gt; import types
&gt;&gt;&gt; a = types.SimpleNamespace()
&gt;&gt;&gt; a.attr1 = 123
&gt;&gt;&gt; a.attr2 = '123'
&gt;&gt;&gt; a.attr3 = [1,2,3]
&gt;&gt;&gt; a.attr1
123
&gt;&gt;&gt; a.attr2
'123'
&gt;&gt;&gt; a.attr3
[1, 2, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>In Python is it possible to add attributes to an object on the fly
  (similar to the two examples I gave)?</p>
</blockquote>
<p>Yes.</p>
<blockquote>
<p>If yes, how?</p>
</blockquote>
<p>You could do:</p>
<pre><code>class AttrHolder:
    pass

a = AttrHolder()

a.attr1 = 123
a.attr2 = '123'
a.attr3 = [1,2,3]
</code></pre>
<p>Or even something truly awful like:</p>
<pre><code>import email #my choice of module is arbitrary

email.random_attribute = 'hello'
</code></pre>
<p>The unasked question: should you be doing this?  Probably not.  You're just using these things as stand-ins for a proper <code>dict</code>.  If you want named attributes, consider a <code>namedtuple</code>.</p>
<pre><code>A = namedtuple('Attribute_Holder',['attr1','attr2','attr3'])
a = A(123,'123',[1,2,3])
</code></pre>
<p>This provides a (loose) contract for <code>A</code>, and gives a nice <code>repr</code>:</p>
<pre><code>In [70]: print(a)
Attribute_Holder(attr1=123, attr2='123', attr3=[1, 2, 3])
</code></pre>
<p>Or just use a <code>dict</code>.  That's what they're for.  </p>
<p>In fact, that's what you're doing when you 'add attributes on the fly', just with an unnecessary layer of abstraction.  Consider, using the above <code>AttrHolder</code>:</p>
<pre><code>In [77]: a = AttrHolder()

In [78]: a.__dict__
Out[78]: {}

In [79]: a.hi = 'hello'

In [80]: a.__dict__
Out[80]: {'hi': 'hello'}
</code></pre>
<p>You're using a <code>dict</code> whether you like it or not!</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is an example:</p>
<pre><code>class Test:
    pass
for mark, name in enumerate(("attr1", "attr2", "attr3")):
    setattr(Test, name, mark)
print Test.attr1
print Test.attr2
print Test.attr3
</code></pre>
<p>output:</p>
<pre><code>0
1
2
</code></pre>
<p>So, the answer is "yes".  Although it might not be such a good idea (could lead to problems such as losing track of the attributes or something).</p>
</div>
<div class="post-text" itemprop="text">
<p>Um, am I missing something?  Take the following example:</p>
<pre><code>class C():
   def __init__(self, x):
       self.myX = x

c = C(42)
c.attr1 = 123
print c.myX
print c.attr1
</code></pre>
<p>What seems to be the problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you really want to add attributes to an <em>anonymous instances</em> of an <em>anonymous class</em>, you could write:</p>
<pre><code>&gt;&gt;&gt; obj = type('obj', (), {})()
&gt;&gt;&gt; obj.attr1 = 123
&gt;&gt;&gt; obj.attr2 = '123'
&gt;&gt;&gt; obj.attr3 = [1,2,3]
</code></pre>
<p>But, really, don't do this!</p>
</div>
<div class="post-text" itemprop="text">
<p>I use dictionaries for the exact purpose that you are describing (at least from my understanding of the question)...</p>
<pre><code>dict = {}
dict["attr1"] = 123
dict["attr2"] = '123'
dict["attr3"] = [1,2,3]

dict.get("attr1")
</code></pre>
</div>
<span class="comment-copy">You haven't created an object; you've simply created another name for the built-in type <code>object</code>.</span>
<span class="comment-copy">@chepner I never specified if the above EX1 is real python code or pseudocode. Given your comment I will clarify and state that the above code is pseudocode and therefore I was only trying to convey the idea. --- I also updated the pseudocode. Hopefully the edit is more clear.</span>
<span class="comment-copy">I like this answer because it solves the question without needing a custom class.</span>
<span class="comment-copy">For other readers I recommend @roippi 's <a href="http://stackoverflow.com/questions/18234753/can-you-add-attributes-to-an-object-dynamically/18235205#18235205">answer</a> because it has a good explanation on how Python language/objects behave with dictionaries.</span>
<span class="comment-copy">In the Matlab community, creating new attributes is common in code and is seen as a beneficial practice when used in certain situations (see Example 2 that I gave in the question). I'm not an expert on Python's language/library/community/etc and so I would be interested to hear from expert Python devs: which is better in Python creating attributes on the fly or using a dictionary? If it isn't clear which is better, which method is more common? Generally how much more common is one over the other?</span>
<span class="comment-copy">@TrevorBoydSmith using a <code>dict</code> is preferable, because that's what you're doing anyway.  See my edit.</span>
<span class="comment-copy">re - "You're using a dict whether you like it or not!" wow! that is really great demonstration/proof showing that you are using a dict anyway. I'll have to read more about the __dict__ in Python documentation.</span>
<span class="comment-copy">Strictly speaking, you can add attributes dynamically to objects which have a <code>__dict__</code> attribute, something lacking in instances of most (all?) built-in types such as <code>object</code>, <code>int</code>, etc.</span>
<span class="comment-copy">@chepner - I understand your point.  But are you sure he means the <code>object</code> built-in, or any object such as a class?  He wasn't very clear.</span>
<span class="comment-copy">I was trying <code>a = object()</code> and other built-in types because that was the most simple example code to come up with. If you are telling me that the limitation is present in most/all built-in types then I will know I can do this as long as I am not using a built-in type.</span>
<span class="comment-copy">@TrevorBoydSmith - Oh, I thought you meant an object like a class.  You can only do what I did on objects that have a <code>__dict__</code> method.  The <code>object</code> built-in does not.  One way to see if a specific object has a <code>__dict__</code> method is to do <code>dir(object)</code> where object is your object.</span>
<span class="comment-copy">I ran your example code. The class <code>Test</code> implicitly inherits from <code>object</code> which doesn't have <code>__dict__</code> but the class <code>Test</code> does have <code>__dict__</code> when you do <code>dir(Test)</code>. Why does <code>class Test</code> have <code>__dict__</code> but <code>class object</code> doesn't have <code>__dict__</code>?</span>
<span class="comment-copy">... or you could just use <code>dict.get()</code></span>
<span class="comment-copy">Wow, thank you. Fixed to use <code>dict.get()</code> instead. I actually didnt know <code>get()</code> would handle that for you.</span>
