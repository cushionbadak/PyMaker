<div class="post-text" itemprop="text">
<p>I'm interested in testing some code that uses the 'random' module, and I'd like to be able to patch/insert my own fake version of random when my tests are running, that returns a known value, and put it back to the normal random module afterwards. From the documentation I can only see that I can patch classes. Is there a way to patch functions? Something like this:</p>
<pre><code>def my_code_that_uses_random():
    return random.choice([0, 1, 2, 3])

with patch.function(random.choice, return_value=3) as mock_random:
    choice = my_code_that_uses_random()
    assert choice == 3
</code></pre>
<p>That code doesn't work, what do I need instead?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>patch.function</code> doesn't seem to exist. You can use <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch" rel="nofollow noreferrer"><code>patch</code></a> itself instead:</p>
<pre><code>with patch('random.choice', return_value=3) as mock_random:
    choice = my_code_that_uses_random()
    assert choice == 3
</code></pre>
</div>
<span class="comment-copy">If you need to replace it with a real function you can replace <code>return_value</code> with: <code>side_effect=lambda seq: seq[0]</code>.   This will let you actually test passing in sequences and getting elements out.  In this case, it will always "choose" the first element.</span>
