<div class="post-text" itemprop="text">
<p>I'm using a sqlite3 table to store python dicts (utf8 content) and serialization is done with JSON. It works fine in python2.7 but fails in 3.3.</p>
<p>Schema:</p>
<pre><code>CREATE TABLE mytable
  (id INTEGER, book TEXT NOT NULL, d JSON NOT NULL, priority INTEGER NOT NULL DEFAULT(3), 
   PRIMARY KEY (id, book))
</code></pre>
<p>When inserting values, the dict is serialized with <code>json.dumps(d)</code>.
The faulty part is retrieving the previously saved values.</p>
<pre><code>import sys
import sqlite3
import json

filename = 'mydb.db'
sqlite3.register_converter('JSON', json.loads)
conn = sqlite3.connect(filename, detect_types=sqlite3.PARSE_DECLTYPES|sqlite3.PARSE_COLNAMES)
c = conn.cursor()
c.execute('''SELECT book, id, d, priority FROM mytable''')
print(c.fetchall())
</code></pre>
<p>The above script works fine when executed with python2.7. However, using 3.3 a TypeError occures:</p>
<pre><code>Traceback (most recent call last):
  File "tests/py3error_debug.py", line 15, in &lt;module&gt;
    c.execute('''SELECT book, id, d, priority FROM mytable''')
  File "/usr/local/Cellar/python3/3.3.2/Frameworks/Python.framework/Versions/3.3/lib/python3.3/json/__init__.py", line 319, in loads
    return _default_decoder.decode(s)
  File "/usr/local/Cellar/python3/3.3.2/Frameworks/Python.framework/Versions/3.3/lib/python3.3/json/decoder.py", line 352, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
TypeError: can't use a string pattern on a bytes-like object
</code></pre>
<p>I can't spot an essential difference between the 2.7 and 3.3 JSON modules (especially regarding <code>json.loads</code>) and I'm running out of ideas. </p>
</div>
<div class="post-text" itemprop="text">
<p>According to <a href="http://docs.python.org/3/library/json#basic-usage" rel="nofollow">Python 3 json module documentation</a>:</p>
<blockquote>
<p>The json module always produces <strong>str</strong> objects, not bytes objects. ...</p>
</blockquote>
<p>According to <a href="http://docs.python.org/3/library/sqlite3#sqlite3.register_converter" rel="nofollow">Python 3 sqlite3.register_converter documentation</a>:</p>
<blockquote>
<p>Registers a callable to convert a <strong>bytestring</strong> from the database into a custom Python type. ...</p>
</blockquote>
<p>If you try to load bytesstring json, you get TypeError:</p>
<pre><code>&gt;&gt;&gt; json.loads('"0"')
'0'
&gt;&gt;&gt; json.loads(b'"0"')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python3.3/json/__init__.py", line 319, in loads
    return _default_decoder.decode(s)
  File "/usr/lib/python3.3/json/decoder.py", line 352, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
TypeError: can't use a string pattern on a bytes-like object
</code></pre>
<p>You should convert bytes to str before call <code>json.loads</code> using <a href="http://docs.python.org/3/library/stdtypes#bytes.decode" rel="nofollow">bytes.decode</a>.</p>
<pre><code>sqlite3.register_converter('JSON', lambda x: json.loads(x.decode('utf-8')))
</code></pre>
</div>
