<div class="post-text" itemprop="text">
<p>When I meet the situation I can do it in javascript, I always think if there's an <code>foreach</code> function it would be convenience. By foreach I mean the function which is described below:</p>
<pre><code>def foreach(fn,iterable):
    for x in iterable:
        fn(x)
</code></pre>
<p>they just do it on every element and didn't yield or return something,i think it should be a built-in function and should be more faster than writing it with pure Python, but I didn't found it on the list,or it just called another name?or I just miss some points here?</p>
<p>Maybe I got wrong, cause calling an function in Python cost high, definitely not a good practice for the example. Rather than an out loop, the function should do the loop in side its body looks like this below which already mentioned in many python's code suggestions:</p>
<pre><code>def fn(*args):
    for x in args:
       dosomething
</code></pre>
<p>but I thought foreach is still welcome base on the two facts:</p>
<ol>
<li>In normal cases, people just don't care about the performance</li>
<li>Sometime the API didn't accept iterable object and you can't rewrite its source.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Every occurence of "foreach" I've seen (PHP, C#, ...) does basically the same as pythons "for" statement.</p>
<p>These are more or less equivalent:</p>
<pre><code>// PHP:
foreach ($array as $val) {
    print($val);
}

// C#
foreach (String val in array) {
    console.writeline(val);
}

// Python
for val in array:
    print(val)
</code></pre>
<p>So, yes, there is a "foreach" in python. It's called "for".</p>
<p>What you're describing is an "array map" function. This could be done with <a href="http://docs.python.org/3/tutorial/datastructures.html#list-comprehensions">list comprehensions</a> in python:</p>
<pre><code>names = ['tom', 'john', 'simon']

namesCapitalized = [capitalize(n) for n in names]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python doesn't have a <code>foreach</code> statement <em>per se</em>. It has <code>for</code> loops built into the language.</p>
<pre><code>for element in iterable:
    operate(element)
</code></pre>
<p>If you really wanted to, you could define your own <code>foreach</code> function:</p>
<pre><code>def foreach(function, iterable):
    for element in iterable:
        function(element)
</code></pre>
<p>As a side note the <code>for element in iterable</code> syntax comes from <a href="http://en.wikipedia.org/wiki/ABC_(programming_language)" rel="noreferrer">the ABC</a> programming language, one of Python's influences.</p>
</div>
<div class="post-text" itemprop="text">
<p>Other examples:</p>
<p>Python Foreach Loop:</p>
<pre><code>for val in array:
    print(val)
</code></pre>
<p>Python For Loop:</p>
<pre><code>for index in range(len(array)):
    print(array[index])
    index+= 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/3.1/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> can be used for the situation mentioned in the question.</p>
<p>E.g.</p>
<pre><code>map(len, ['abcd','abc', 'a']) # 4 3 1
</code></pre>
<p>For functions that take multiple arguments, more arguments can be given to map:</p>
<pre><code>map(pow, [2, 3], [4,2]) # 16 9
</code></pre>
<p>It returns a list in python 2.x and an iterator in python 3</p>
<p>In case your function takes multiple arguments and the arguments are <strong>already</strong> in the form of tuples (or any iterable since python 2.6) you can use <a href="http://docs.python.org/3.1/library/itertools.html#itertools.starmap" rel="nofollow noreferrer"><code>itertools.starmap</code></a>. (which has a very similar syntax to what you were looking for). It returns an iterator.</p>
<p>E.g. </p>
<pre><code>for num in starmap(pow, [(2,3), (3,2)]):
    print(num)
</code></pre>
<p>gives us 8 and 9</p>
</div>
<div class="post-text" itemprop="text">
<p>If I understood you right, you mean that if you have a function 'func', you want to check for each item in list if func(item) returns true; if you get true for all, then do something.</p>
<p>You can use 'all'.</p>
<p>For example: I want to get all prime numbers in range 0-10 in a list:</p>
<pre><code>from math import sqrt
primes = [x for x in range(10) if x &gt; 2 and all(x % i !=0 for i in range(2, int(sqrt(x)) + 1))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Look at <a href="https://docs.scipy.org/doc/numpy-1.12.0/reference/arrays.nditer.html" rel="nofollow noreferrer">this article</a>. The iterator object <strong>nditer</strong> from <strong>numpy</strong> package, introduced in NumPy 1.6, provides many flexible ways to visit all the elements of one or more arrays in a systematic fashion.</p>
<p>Example:</p>
<pre><code>import random
import numpy as np

ptrs = np.int32([[0, 0], [400, 0], [0, 400], [400, 400]])

for ptr in np.nditer(ptrs, op_flags=['readwrite']):
    # apply random shift on 1 for each element of the matrix
    ptr += random.choice([-1, 1])

print(ptrs)

d:\&gt;python nditer.py
[[ -1   1]
 [399  -1]
 [  1 399]
 [399 401]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This does the foreach in python 3</p>
<p>test=[0,1,2,3,4,5,6,7,8,"test"]</p>
<pre><code>for fetch in test:
    print(fetch)
</code></pre>
</div>
<span class="comment-copy">What's wrong with just using a <code>for</code> loop?</span>
<span class="comment-copy">This is exactly what <code>for</code> is for.</span>
<span class="comment-copy">nothing wrong with for loop ,just for convenience</span>
<span class="comment-copy">@user2357112, it's desirable to have a shorthand for calling a function once per item of a list. <code>list.each(func)</code> is cleaner than <code>for item in  list: func(item)</code>, IMO. The problem is that Python's done a good job of replacing functional favorites like <code>map()</code> and <code>filter()</code> with list comprehensions which simply extend its built-in <code>for</code> and <code>if</code> (which are homogeneous and readable) and a specific <code>.each()</code> might go against that.</span>
<span class="comment-copy"><code>sum(0 for _ in map(f, seq))</code> is a readable workaround.</span>
<span class="comment-copy">It's not map(), because map() accumulates and returns a list, while foreach() doesn't. The difference could be quite expensive if you're iterating over a long list of items.  Agreed that for() does the trick.</span>
<span class="comment-copy">I've seen this referred to as a <b>for-in</b> loop.</span>
<span class="comment-copy">They asked about for function, but you answered with for statement.</span>
<span class="comment-copy">@JohannesSchaub-litb thing is that he is right... 'for' in python is literally 'foreach' known in other languages...in tcl for eg a 'for' loop would be something like for {stuff ran on beginning of loop} {condition here} {stuff that runs on each iteration} {commands here...} eg: for {set x 1} {$x &lt;= 10} {incr x} {puts $x} you can also add extra checks inside the iteration braces using ';'. To me would make more sense if he came here asking if python had a true 'for' loop</span>
<span class="comment-copy">@Francisco I'm also right in saying that earth isn't flat. But I won't add it as an answer.</span>
<span class="comment-copy">If you're doing this for side-effects, rather than for the result of the mapping, then using <code>map</code> in this way isn't really going to work in Python 3 where <code>map</code> is lazy. That is, it now returns an iterator, not an already computed list. The side-effects won't take place until you iterate through the resulting list.</span>
<span class="comment-copy">That's true and certainly a valid point, but the question suggests the OP is probably not concerned with such subtleties.</span>
<span class="comment-copy">@LaurenceGonsalves Thanks. I've edited to make the first example correct in Python 3.</span>
<span class="comment-copy">This is ugly, it's almost as long as the <code>for</code> loop, and if the iterable is long (perhaps infinite) or the function return values are large, it breaks with a <code>MemoryError</code>.</span>
<span class="comment-copy">What's ugly? The first example? Sure, but it answers the question. I also mentioned just using a plain <code>for</code> loop works, as well as list comprehensions.</span>
<span class="comment-copy"><code>map</code> and <code>foreach</code> have different meaning. <code>map</code> returns a list of result (which implies creating a list, or an enumerable structure, or a structure that will be consumed, and therefore not called right away), <code>foreach</code> calls the function on each item, ignoring the result.</span>
<span class="comment-copy"><code>Foreach</code> must return the result imediately. Saying that creating iterator instead of foreach is preferred is total crap.</span>
<span class="comment-copy">This does not answer the question.</span>
