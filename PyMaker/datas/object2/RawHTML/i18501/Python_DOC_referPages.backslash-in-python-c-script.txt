<div class="post-text" itemprop="text">
<p>Today I wrote a Python script to process data and print them in customized format. It worked as expected under interactive Python. Then I moved on to try in Terminal to redirect the output to a text file, and encountered something unexpected.</p>
<p>The particular example I tried was to arrange a list of data in columns, and print them in LaTeX tabular format. It works more or less like:</p>
<pre><code>foo(mylist, sep_col='\t', sep_row=r'\\ \hline')
</code></pre>
<p>When I tried to run the script in Terminal, I did this:</p>
<pre><code>$ python -c "from foo import foo; foo(mylist, col_sep=' &amp; ', row_sep=r' \\ \hline')" &gt; results.txt
</code></pre>
<p>But it turned out that the <code>\\ \hline</code> part was shown as <code>\ \hline</code>, which is not the same as under interactive Python.</p>
<p>As I looked into the problem (or maybe the principles behind) more, I found that the behavior of the Python script processed by <code>$ python -c</code> is not the same under interactive Python.</p>
<p>Under interactive Python: <code>&gt;&gt;&gt; print r'\\'</code> gives <code>\\</code></p>
<p>However, in Terminal, <code>$ python -c "print r'\\'"</code> raises a <code>SyntaxError</code>:</p>
<pre><code>  File "&lt;string&gt;", line 1
    print r'\'
             ^
SyntaxError: EOL while scanning string literal
</code></pre>
<p>Terminal seems to give <code>\\</code> when the number of backslash is 3 or 4. Number 5 or 6 raises an error. 7 backslashes give <code>\\\\</code>, which means there is no way to give <code>\\\</code> under this environment.</p>
<p>I've searched for this issue for quite a while, but it seems very few talks about <code>$ python -c</code>. Sorry in advance if I made a duplicate.</p>
</div>
<div class="post-text" itemprop="text">
<p>In terminal, saying:</p>
<pre><code>$ python -c "print r'\\'"
  File "&lt;string&gt;", line 1
    print r'\'
             ^
SyntaxError: EOL while scanning string literal
</code></pre>
<p>results in an error because the shell comes into play.  It <em>translates</em> <code>\\</code> into <code>\</code> (see the error message carefully).</p>
<p>Instead, say</p>
<pre><code>$ python -c 'print r"\\"'
\\
</code></pre>
<p>when running from the shell, i.e. supply the command in single quotes and arguments to <code>print</code> in double quotes.</p>
<p>The equivalent of the command that you were executing in interactive mode would be:</p>
<pre><code>$ python -c "print r'\\\\'"
\\
</code></pre>
<p>EDIT: <a href="https://stackoverflow.com/a/647787/2235132">This</a> answer explains why a raw string cannot have an odd number of backslashes.</p>
<p>Moreover, this is also explained in the official <a href="http://docs.python.org/3/faq/design.html#why-can-t-raw-strings-r-strings-end-with-a-backslash" rel="nofollow noreferrer">FAQ</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your shell interprets the backslashes inside the double quotes as well.  You can use single quotes to avoid this; then you will have to change your single quotes in the python script to double quotes instead:</p>
<pre><code>python -c 'from foo import foo; foo(mylist, col_sep=" &amp; ", row_sep=r" \\ \hline")'
</code></pre>
<p>You could have used <code>echo</code> debugging in this case:  Simply write <code>echo</code> before your shell command to see what is about to get executed:</p>
<pre><code>echo python -c "print r'\\'"
</code></pre>
<p>shows:</p>
<pre><code>python -c print r'\'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your terminal does not recognise raw or regex strings, i.e. <code>r'something'</code> as anything special and all backslashes need to be escaped by backslashes in the terminal, so:</p>
<pre><code>python -c "from foo import foo; foo(mylist, col_sep=' &amp; ', row_sep=r' \\ \hline')" &gt; results.tx
</code></pre>
<p>needs to be:</p>
<pre><code>python -c "from foo import foo; foo(mylist, col_sep=' &amp; ', row_sep=r' \\\\ \\hline');" &gt; results.tx
</code></pre>
<p>and</p>
<pre><code>foo(mylist, sep_col='\t', sep_row=r'\\ \hline')
</code></pre>
<p>would map to:</p>
<pre><code>python -c "from foo import foo; foo(mylist, sep_col='\\t', sep_row=r'\\\\ \\hline');"
</code></pre>
</div>
<span class="comment-copy">Thanks for you answer. But wait, why it still doesn't work for <code>$ python -c 'print r"\\\"'</code>?</span>
<span class="comment-copy"><a href="http://stackoverflow.com/a/647787/2235132">This</a> answer should make it clear.</span>
<span class="comment-copy">@kctong529 Also see <a href="http://bugs.python.org/issue1271" rel="nofollow noreferrer">this</a> <i>bug</i> report.</span>
<span class="comment-copy">@kctong529 The <a href="http://docs.python.org/3/faq/design.html#why-can-t-raw-strings-r-strings-end-with-a-backslash" rel="nofollow noreferrer">FAQ</a> also explains it.</span>
<span class="comment-copy">By the way, do you think passing raw strings involving backslashes to a Python script as some of the <code>argv</code> arguments is a good habit?</span>
<span class="comment-copy">Do you mean single quote means more to shell interpretation than double quote? The <code>echo</code> debugging helps. But <code>echo python -c 'print r"\\\"'</code>, which shows <code>python -c print r"\\\"</code>, still raises a <code>SyntaxError</code></span>
<span class="comment-copy">Yes, single quotes and double quotes have different meaning in shell (but that's not the topic here).  The <code>python -c print r"\\\"</code> in your example is a syntax error because it contains an unterminated string; it starts like this: backslash (denoted by two of them), double quote (denoted by a blackslash and a double quote) and then lacks a closing double quote.  Try it like this: <code>print "\\\""</code>  This should work.</span>
<span class="comment-copy">This makes sense, just that I didn't realize the fact (that Terminal does not recognise raw or regex strings). Do you think it is unwise to use raw strings as a habit?</span>
<span class="comment-copy">Not within python - without them when calling from terminal row_sep would be ' \\\\\\\\ \\\\hline' i.e. doubled for python and doubled again for terminal.</span>
