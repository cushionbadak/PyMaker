<div class="post-text" itemprop="text">
<p>Say I've just implemented some class in Python and want to overload say the '-' operator, but can't remember if I need to use <code>__subtract__</code>, <code>__minus__</code>, or in fact the correct answer <code>__sub__</code>. Is there a quick way to find this out via the interpreter? I tried simple things like <code>help(-)</code> but no success.</p>
<p>There's plenty of online resources to give the definitive list of available operators, but I'm looking for a quick offline method.</p>
<p>For common operators one quickly memorizes them, but some lesser used ones often need looking up.</p>
</div>
<div class="post-text" itemprop="text">
<h3>All standard operators</h3>
<pre><code>&gt;&gt;&gt; help('SPECIALMETHODS')
</code></pre>
<h3>Only basic ones</h3>
<pre><code>&gt;&gt;&gt; help('BASICMETHODS')
</code></pre>
<h3>Only numeric ones</h3>
<pre><code>&gt;&gt;&gt; help('NUMBERMETHODS')
</code></pre>
<h3>Other help subsections</h3>
<pre><code>&gt;&gt;&gt; help('ATTRIBUTEMETHODS')
&gt;&gt;&gt; help('CALLABLEMETHODS')
&gt;&gt;&gt; help('MAPPINGMETHODS')
&gt;&gt;&gt; help('SEQUENCEMETHODS1')
&gt;&gt;&gt; help('SEQUENCEMETHODS2')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>dir(obj)</code>, that will list all attributes of the object (or class) <code>obj</code>. For example you know that you can add integers so type</p>
<pre><code>&gt;&gt;&gt; dir(int) # using the class int (or type in this case) here
    ['__abs__',
 '__add__',
 '__and__',
 '__class__',
 '__cmp__',
 ...
</code></pre>
<p>or for formatted output</p>
<pre><code>&gt;&gt;&gt; print '\n'.join(dir(1)) # using an instance of int here
__abs__
__add__
__and__
__class__
__cmp__
...
</code></pre>
<p>then you can get more information via</p>
<pre><code>&gt;&gt;&gt; help(int.__add__)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a start.</p>
<pre><code>&gt;&gt;&gt; import operator
&gt;&gt;&gt; print("\n".join(dir(operator)))
__abs__
__add__
__and__
__concat__
__contains__
__delitem__
__doc__
__eq__
__floordiv__
__ge__
__getitem__
__gt__
__iadd__
__iand__
__iconcat__
__ifloordiv__
__ilshift__
__imod__
__imul__
__index__
__inv__
__invert__
__ior__
__ipow__
__irshift__
__isub__
__itruediv__
__ixor__
__le__
__loader__
__lshift__
__lt__
__mod__
__mul__
__name__
__ne__
__neg__
__not__
__or__
__package__
__pos__
__pow__
__rshift__
__setitem__
__sub__
__truediv__
__xor__
_compare_digest
abs
add
and_
attrgetter
concat
contains
countOf
delitem
eq
floordiv
ge
getitem
gt
iadd
iand
iconcat
ifloordiv
ilshift
imod
imul
index
indexOf
inv
invert
ior
ipow
irshift
is_
is_not
isub
itemgetter
itruediv
ixor
le
lshift
lt
methodcaller
mod
mul
ne
neg
not_
or_
pos
pow
rshift
setitem
sub
truediv
truth
xor
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>bpython</code> (or <code>bpython3</code> for python 3).</p>
<p>It's like the normal python repl, but with tab complete goodness.</p>
<p>So for example, I make the code:</p>
<pre><code>class a:
    def __
</code></pre>
<p>I'll get a menu with all of the built in functions.</p>
<p>You can get it via <a href="http://bpython-interpreter.org/" rel="nofollow">the bpython website</a></p>
<p>Or via doing a <code>sudo apt-get install bpython</code> in ubuntu. (or <code>sudo apt-get install bpython3</code> for python3.</p>
<p>Additionally, <a href="http://ipython.org/" rel="nofollow">ipython</a> has tab complete features, and is more widespread.</p>
<hr/>
<p>One nice trick is to use tab completion to make guesses. You can't remember whether it's <code>minus</code>, <code>sub</code>, <code>subtract</code>, or something else, right? So, first type <code>int.__m</code> and hit tab:</p>
<pre><code>In [470]: int.__m
int.__mod__     int.__module__  int.__mro__     int.__mul__
</code></pre>
<p>There's no <code>minus</code> there, so backspace, type <code>s</code>, and tab again:</p>
<pre><code>In [470]: int.__s
int.__setattr__        int.__sub__            int.__subclasshook__
int.__sizeof__         int.__subclasscheck__  
int.__str__            int.__subclasses__ 
</code></pre>
<p>And there it is.</p>
</div>
<span class="comment-copy">The advantage of destrobu's and Leif Anderson's solutions is that they even work for not-quite-special dunder methods. For example, if you can't remember what <code>pickle</code> uses, you can find <code>__reduce__</code> on any pickleable type, even though you can't find it in <code>SPECIALMETHODS</code>. But for actual special methods like <code>__sub__</code>, this is definitely the cleanest and simplest way to do it. (As long as you can figure out what to search for in the many pages of text, of course.)</span>
<span class="comment-copy">@abarnert <i>"As long as you can figure out what to search for"</i>: added shortcut to numeric ones only help.</span>
<span class="comment-copy">Yeah, that definitely helps. (And you get that list at the end of <code>help('SPECIALMETHODS')</code>, so you don't have to remember all of them.</span>
<span class="comment-copy">You can't do that until you've implemented the method, in which case you obviously know what it's called.</span>
<span class="comment-copy">Just do it for an object, where you know that it works. This helps if you cant remember if was <code>__minus__</code> or <code>__sub__</code>.</span>
<span class="comment-copy">Yup, <code>print '\n'.join(dir(1))</code> works nicely for listing the <a href="http://docs.python.org/3/reference/datamodel.html#emulating-numeric-types" rel="nofollow noreferrer">special methods</a> on an <code>int</code>.</span>
<span class="comment-copy">It's probably worth mentioning that ipython—which is a lot more popular and widespread—has the same tab-completion functionality, as do a number of fancier IDEs.</span>
<span class="comment-copy">Good point, added to answer.</span>
<span class="comment-copy">It may also be worth mentioning that tab completion can let you try out guesses. For example, type <code>int.__m</code>, then tab to see the completions, see there's no <code>minus</code>, backspace and try <code>s</code>, then tab to see the completions, and see there's a <code>sub</code>, and you're done. That's the way I actually do this myself most of the time… That's hard to explain; let me edit your answer and you can revert if you don't like it.</span>
<span class="comment-copy">Good point, thanks for adding that.</span>
