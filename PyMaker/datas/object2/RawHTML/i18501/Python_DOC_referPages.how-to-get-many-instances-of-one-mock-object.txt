<div class="post-text" itemprop="text">
<p>I have a System under test B that uses some A with some expensive function that I want to mock but B relies on getting multiple instances of A.</p>
<p><a href="http://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch" rel="nofollow">http://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch</a> says: "If the class is instantiated multiple times you could use side_effect to return a new mock each time." but I don't understand, how :(</p>
<p>How would I have to change this example:</p>
<pre><code>import time

class A:
    def say_hi(self):
        print("lets do something horribly expensive")
        time.sleep(2)

class B:
    def __init__(self):
        self.a_map = {}
    def get_a(self):
        a = A()
        a.say_hi()
        self.a_map[a] = True

with patch('__main__.A') as mockA:
    b = B()
    def side_effect():
        # return DEFAULT  # no success
        return mockA  # no success neither
        # return mockA.clone()  # :(
    mockA.side_effect = side_effect  # no help
    # mockA.side_effect = [DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT]  # nope
    # mockA.side_effect = [mockA, mockA, mockA, mockA, mockA]  # nope
    # mockA.side_effect = [DEFAULT, mockA, mockA, mockA, mockA]  # nope, but hey! I get 2 instances in my key set now!
    # mockA.side_effect = [DEFAULT, mockA, mockA.clone(), mockA.clone().clone(), mockA.clone().clone().clone()]  # would work, but hey, seriously?

    for _ in range(5):
        b.get_a()
    print(b.a_map)
    assert len(b.a_map) == 5
</code></pre>
<p>which produces this output:</p>
<pre><code>{&lt;MagicMock name='A' id='139998588645520'&gt;: True}
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 11, in &lt;module&gt;
AssertionError
</code></pre>
<p>(Without mocking the assertion succeeds but it takes 10s.)</p>
</div>
<div class="post-text" itemprop="text">
<p>You're mocking the wrong thing then. If say_hi is the expensive portion you want to mock away, then mock that.  Then you don't have to mess with side_effects.</p>
<pre><code>with patch('__main__.A.say_hi'):
    b = B()
    for _ in range(5):
        b.get_a()
    print(b.a_map)
    assert len(b.a_map) == 5
</code></pre>
<p>To explicitly answer your question of 'creating separate mock instances with side_effects', you would specify Mock as the object to be returned.</p>
<pre><code>from mock import Mock
with patch('__main__.A') as mockA:
    b = B()
    mockA.side_effect = Mock
    for _ in range(5):
        b.get_a()
    print(b.a_map)
    assert len(b.a_map) == 5
</code></pre>
</div>
<span class="comment-copy">Hmm, your hint #1 might help in my case but the one say_hi() are actually a bunch of methods that all access the database, so I tried hint #2 and heureka! It fixed my problem :) Thanx</span>
