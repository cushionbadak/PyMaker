<div class="post-text" itemprop="text">
<p>A Python HOMEWORK Assignment asks me to write a function “that takes as input a positive whole number, and prints out a multiplication, table showing all the whole number multiplications up to and including the input number.”(Also using the while loop)</p>
<pre><code> # This is an example of the output of the function
print_multiplication_table(3)
&gt;&gt;&gt; 1 * 1 = 1
&gt;&gt;&gt; 1 * 2 = 2
&gt;&gt;&gt; 1 * 3 = 3
&gt;&gt;&gt; 2 * 1 = 2
&gt;&gt;&gt; 2 * 2 = 4
&gt;&gt;&gt; 2 * 3 = 6
&gt;&gt;&gt; 3 * 1 = 3
&gt;&gt;&gt; 3 * 2 = 6
&gt;&gt;&gt; 3 * 3 = 9
</code></pre>
<p>I know how to start, but don’t know what to do next. I just need some help with the algorithm. <b>Please DO NOT WRITE THE CORRECT CODE</b>, because I want to learn. Instead tell me the logic and reasoning. 
<em>Here is my reasoning:</em><br/> </p>
<ol>
<li>The function should multiply all real numbers to the given value(n) times 1 less than n or (n-1)</li>
<li>The function should multiply all real numbers to n(including n) times two less than n or (n-2)</li>
<li>The function should multiply all real numbers to n(including n) times three less than n or (n-3) and so on... until we reach n</li>
<li>When the function reaches n, the function should also multiply all real numbers to n(including n) times n</li>
<li>The function should then stop or in the while loop "break"</li>
<li>Then the function has to print the results</li>
</ol>
<p>So this is what I have so far:</p>
<pre><code>def print_multiplication_table(n): # n for a number
    if n &gt;=0:
        while somehting:
            # The code rest of the code that I need help on

    else:
        return "The input is not a positive whole number.Try anohter input!"
</code></pre>
<p><b>Edit:</b> Here's what I have after all the wonderful answers from everyone<br/></p>
<pre><code>"""
i * j = answer
i is counting from 1 to n
for each i, j is counting from 1 to n 
"""


def print_multiplication_table(n): # n for a number
    if n &gt;=0:
        i = 0
        j = 0 
        while i &lt;n:
            i = i + 1
            while j &lt;i:
                j = j + 1
            answer = i * j
            print i, " * ",j,"=",answer

    else:
        return "The input is not a positive whole number.Try another input!"
</code></pre>
<p>It's still not completely done! 
For example:</p>
<pre><code>print_multiplication_table(2)
# The output 
&gt;&gt;&gt;1  *  1 = 1
&gt;&gt;&gt;2  *  2 = 4
</code></pre>
<p><b>And NOT </b></p>
<pre><code>&gt;&gt;&gt; 1 * 1 = 1
&gt;&gt;&gt; 1 * 2 = 2
&gt;&gt;&gt; 2 * 1 = 2
&gt;&gt;&gt; 2 * 2 = 4 
</code></pre>
<p>What am I doing wrong? </p>
</div>
<div class="post-text" itemprop="text">
<p>I'm a little mad about the <code>while</code> loop requirement, because <code>for</code> loops are better suited for this in Python. But learning is learning!</p>
<p>Let's think. Why do a <code>While True</code>? That will never terminate without a break statement, which I think is kind of lame. How about another condition?</p>
<p>What about variables? I think you might need two. One for each number you want to multiply. And make sure you add to them in the <code>while</code> loop.</p>
<p>I'm happy to add to this answer if you need more help.</p>
<p>Your logic is pretty good. But here's a summary of mine:</p>
<p>stop the loop when the product of the 2 numbers is <code>n * n</code>.</p>
<p>In the mean time, print each number and their product. If the first number isn't n, increment it. Once that's n, start incrementing the second one. (This could be done with if statements, but nested loops would be better.) If they're both n, the <code>while</code> block will break because the condition will be met.</p>
<p>As per your comment, here's a little piece of hint-y psuedocode:</p>
<pre><code>while something:
    while something else:
        do something fun
        j += 1
    i += 1
</code></pre>
<p>where should original assignment of i and j go? What is something, something else, and something fun?</p>
</div>
<div class="post-text" itemprop="text">
<p>This problem is better implemented using nested loops since you have two counters. First figure out the limits (start, end values) for the two counters. Initialize your counters to lower limits at the beginning of the function, and test the upper limits in the while loops.</p>
</div>
<div class="post-text" itemprop="text">
<p>The first step towards being able to produce a certain output is to recognize the pattern in that output.</p>
<pre><code>1 * 1 = 1
1 * 2 = 2
1 * 3 = 3
2 * 1 = 2
2 * 2 = 4
2 * 3 = 6
3 * 1 = 3
3 * 2 = 6
3 * 3 = 9
</code></pre>
<p>The number on the right of <code>=</code> should be trivial to determine, since we can calculate it by multiplying the other two numbers on each row; obtaining <em>those</em> is the core of the assignment. Think of the two operands of <code>*</code> as two counters, let's call them <code>i</code> and <code>j</code>. We can see that <code>i</code> is counting from <code>1</code> to <code>3</code>, but <em>for each</em> <code>i</code>, <code>j</code> is counting from <code>1</code> to <code>3</code> (resulting in a total of 9 rows; more generally there will be n<sup>2</sup> rows). Therefore, you might try using nested loops, one to loop <code>i</code> (from <code>1</code> to <code>n</code>) and another to loop <code>j</code> (from <code>1</code> to <code>n</code>) for each <code>i</code>. On each iteration of the nested loop, you can print the string containing <code>i</code>, <code>j</code> and <code>i*j</code> in the desired format.</p>
</div>
<span class="comment-copy">Instead of using a while condition that will loop forever, you should consider a while condition that ends when your multiplications achieve "up to and including the input number".</span>
<span class="comment-copy">I can only use while loops.</span>
<span class="comment-copy">Hint: One way of solving this is to use nested <code>for</code> loops. If you don't know about these, please <a href="http://docs.python.org/3/tutorial/controlflow.html#for-statements" rel="nofollow noreferrer"><b>read the Python tutorial</b></a>.</span>
<span class="comment-copy">Write a version with <code>for</code> and convert the loops into <code>while</code>s then.</span>
<span class="comment-copy">+1 I must say this is a refreshing post. You, sir or madam, are the antithesis of a help vampire. Just for your future learning, I would note that in real life where you're not limited to <code>while</code> loops, it would be more Pythonic to use something like <code>range</code> with some mix of generators, <code>product</code> from <code>itertools</code>, and/or <code>map</code> or similar. It would result in shorter, more readable code.</span>
<span class="comment-copy">FWIW, I think the pedagogical point here is to demonstrate that you can implement something semantically equivalent to a <code>for</code> loop with a <code>while</code> loop and that, therefore, <code>for</code> is really no more than syntactic sugar. It goes toward recognising iteration as an abstraction and a fundamental concept. I think it's a pretty good exercise for a beginning programming class.</span>
<span class="comment-copy">@Andy: nice try, but I think you're over-complicating it. Think about your table. What's happening in the first column? And the second? Does that suggest any “containment” relationship (one thing inside another thing) at all? Like, maybe, loops going from 1 to 3?</span>
<span class="comment-copy">@Andy: very close! Watch your indentation: what statements are under the control of what iteration constructs? Also, consider what values (i/j) you're initializing and where. I did a (pretty minor) rearrangement of your code that works perfectly.</span>
<span class="comment-copy">Maybe this will help. Ask yourself this: what is <code>j</code> when your innermost <code>while</code> loop ends and when it starts again? Emmet already pointed out you have an indentation error. Look over your code and ask yourself, "Which <code>while</code> loop does this part belong in?"</span>
<span class="comment-copy">Whoops. Forgot the @Andy</span>
