<div class="post-text" itemprop="text">
<p>Suppose I have a <code>function</code> with <code>10 args</code>:</p>
<pre><code>def foo(arg1,arg2,arg3,arg4.....):
</code></pre>
<p>Sometimes, I need to call it with only <code>arg1</code> and another time <code>arg1, arg4</code>, or <code>arg4 , arg7</code>. </p>
<p>My program doesn't specify the type of the function call. Does python have a way to help me?</p>
</div>
<div class="post-text" itemprop="text">
<p>One way to do it is to make the parameters optional:</p>
<pre><code>def foo(arg1=None,arg2=None,arg3=None...)
</code></pre>
<p>which can be called like this:</p>
<pre><code>foo(arg1=1,arg3=2)
</code></pre>
<p>or like this:</p>
<pre><code>a = {'arg1':1, 'arg3':2}
foo(**a)
</code></pre>
<p>If this list of parameters is spinning out of control you could simply use <a href="http://docs.python.org/2/tutorial/controlflow.html#keyword-arguments" rel="noreferrer"><code>**kwargs</code></a> to let your function take an optional number of (named) keyword arguments:</p>
<pre><code>def foo(**kwargs):
    print kwargs

params = {'arg1':1, 'arg2':2}

foo(**params)         # Version 1
foo(arg1=3,arg2=4)    # Version 2
</code></pre>
<p>Output:</p>
<pre><code>{'arg1': 1, 'arg2': 2}
{'arg1': 3, 'arg2': 4}
</code></pre>
<blockquote>
<p><strong>Note:</strong> You can use one asterisk (<code>*</code>) for an arbitrary number of arguments that will be <a href="http://docs.python.org/2/tutorial/controlflow.html#arbitrary-argument-lists" rel="noreferrer">wrapped up in a tuple</a>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Give your args a default value like <code>None</code>:</p>
<pre><code>def foo(arg1=None, arg2=None, ..., arg10=None):
</code></pre>
<p>Now, when calling the function pass a dictionary of keyword arguments:</p>
<pre><code>kwargs = {
    'arg1': 'test',
    'arg7': 'test2',
}

foo(**kwargs)
</code></pre>
<p>It's equivalent to:</p>
<pre><code>foo('test', None, None, None, ..., 'test2', None, None, None)
</code></pre>
<p>Or, to be more specific:</p>
<pre><code>foo(arg1='test', arg7='test2')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="http://docs.python.org/3/tutorial/controlflow.html#keyword-arguments" rel="nofollow">keyword arguments</a></p>
</div>
<span class="comment-copy">Use default argument parameters</span>
<span class="comment-copy"><code>def foo(arg1 = val, arg2 = val2, arg3 = val3,...):</code></span>
<span class="comment-copy">What if there is a variable named "arg1", identically named as the optional parameter in foo(), outside of foo()? Will it cause conflict?</span>
<span class="comment-copy">no, it won't cause conflict Sean. I think you're describing foo(arg1=arg1). Python interpreters know the token to the left of '=' refers to the name of the param.</span>
