<div class="post-text" itemprop="text">
<p>Given the following interpreter session: </p>
<pre><code>&gt;&gt;&gt; def func(depth,width):
...   if (depth!=0):
...     for i in range(width):
...       print(depth,i)
...       func(depth-1,width)
  File "&lt;stdin&gt;", line 5
    func(depth-1,width)
                  ^
TabError: inconsistent use of tabs and spaces in indentation
</code></pre>
<p>Can someone please tell me what is the <code>TabError</code> in my code?</p>
</div>
<div class="post-text" itemprop="text">
<p>TL;DR: never indent Python code with <kbd>TAB</kbd></p>
<hr/>
<p>In Python 2, <a href="https://stackoverflow.com/a/2034527/918959">the interpretation of <kbd>TAB</kbd> is as if it is converted to spaces using 8-space tab stops</a>; that is that each <kbd>TAB</kbd> furthers the indentation by 1 to 8 spaces so that the resulting indentation is divisible by 8.</p>
<p>However this does not apply to Python 3 anymore - in <a href="http://legacy.python.org/dev/peps/pep-0008/#tabs-or-spaces" rel="nofollow noreferrer">Python 3 mixing of spaces and tabs is - if not always a SyntaxError - not a good thing to do</a> - simplified [*], tabs only match tabs and spaces only match other spaces in indentation; that is a block indented with <kbd>TAB</kbd><kbd>SPACE</kbd><kbd>SPACE</kbd> might contain a block indented with <kbd>TAB</kbd><kbd>SPACE</kbd><kbd>SPACE</kbd><kbd>TAB</kbd>, but if it instead contained <kbd>TAB</kbd><kbd>TAB</kbd>, it would be considered an indentation error, even though the block would seemingly extend further. </p>
<p>This is why mixing tabs and spaces, or using tabs at all for indentation at is considered a very bad practice in Python.</p>
<hr/>
<p>[*] Well, I did lie there - it is not that simple. Python 3 actually does allow for a block indented with <kbd>TAB</kbd><kbd>TAB</kbd><kbd>TAB</kbd><kbd>TAB</kbd> inside a block indented with <kbd>TAB</kbd><kbd>SPACE</kbd><kbd>SPACE</kbd>. From the <a href="https://docs.python.org/3/reference/lexical_analysis.html#indentation" rel="nofollow noreferrer">Python documentation</a>:</p>
<blockquote>
<p>2.1.8. Indentation</p>
<p>Leading whitespace (spaces and tabs) at the beginning of a logical line is used to compute the indentation level of the line, which in turn is used to determine the grouping of statements.</p>
<p>Tabs are replaced (from left to right) by one to eight spaces such that the total number of characters up to and including the replacement is a multiple of eight (this is intended to be the same rule as used by Unix). The total number of spaces preceding the first non-blank character then determines the lineâ€™s indentation. Indentation cannot be split over multiple physical lines using backslashes; the whitespace up to the first backslash determines the indentation.</p>
<p>Indentation is rejected as inconsistent if <em>a source file mixes tabs and spaces <strong>in a way that makes the meaning dependent on the worth of a tab in spaces</strong></em></p></blockquote></div>
<span class="comment-copy">You're mixing tabs and space in your code, don't do that. Use just spaces.</span>
