<div class="post-text" itemprop="text">
<p>The following python script:</p>
<pre class="lang-py prettyprint-override"><code>#!/usr/bin/env python

import os
cmd = "echo Hello world | cut -d' ' -f1"
test=os.system(cmd)
print(test)
</code></pre>
<p>it runs ok (the output is <code>Hello</code>). But when I use <a href="http://docs.python.org/2/library/subprocess.html" rel="nofollow"><code>subprocess</code></a> module this one:</p>
<pre class="lang-py prettyprint-override"><code>#!/usr/bin/env python

import subprocess
cmd = "echo Hello world | cut -d' ' -f1"
process = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE)
test = process.communicate()[0]
print (test)
</code></pre>
<p>is not ok. The output is <code>Hello world | cut -d' ' -f1</code> and I expect to be only <code>Hello</code>. How can I correct it?</p>
<p>I saw that in general subprocess module will fail when I'm using a bash command like:</p>
<pre><code>&lt;cmd1&gt; | &lt;cmd2&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This:</p>
<pre><code>echo Hello world | cut -d' ' -f1
</code></pre>
<p>… is not actually a command, it's a fragment of shell script. So you need to have the shell execute it.</p>
<p>You can do this just by adding <code>shell=True</code> to the <code>Popen</code> constructor.</p>
<hr/>
<p><a href="http://docs.python.org/3/library/subprocess.html#frequently-used-arguments" rel="noreferrer">The documentation</a> explains how this works. It also explains <a href="http://docs.python.org/3/library/subprocess.html#replacing-shell-pipeline" rel="noreferrer">better ways to do the same thing without the shell</a>. For example:</p>
<pre><code>p1 = Popen(['echo', 'Hello', 'world'], stdout=PIPE)
p2 = Popen(['cut', "-d' '", '-f1'], stdin=p1.stdout, stdout=PIPE)
p1.stdout.close()
test = p2.communicate()[0]
</code></pre>
<hr/>
<p>Meanwhile, you almost never want to use <code>split</code> on a command line—and in fact, your example shows exactly <em>why</em> you don't want to:</p>
<pre><code>&gt;&gt;&gt; cmd = "echo Hello world | cut -d' ' -f1"
&gt;&gt;&gt; cmd.split()
['echo', 'Hello', 'world', '|', 'cut', "-d'", "'", '-f1']
</code></pre>
<p>Notice that it split <code>-d' '</code> into two arguments, <code>-d'</code> and <code>'</code>.</p>
<p>If you're using <code>shell=True</code>, don't try to split the arguments at all; just pass a string as your <code>cmd</code>:</p>
<pre><code>process = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True)
</code></pre>
<p>If you're <em>not</em> using the shell, the right way to do this is with the <a href="http://docs.python.org/3/library/shlex.html#shlex.split" rel="noreferrer"><code>shlex</code></a> module:</p>
<pre><code>&gt;&gt;&gt; shlex.split(cmd)
['echo', 'Hello', 'world', '|', 'cut', '-d ', '-f1']
</code></pre>
<p>Notice that the <code>"-d' '"</code> turned into <code>"-d "</code> this time. That may seem odd at first glance, but it's in fact exactly what the shell would do, and what you want; the <code>cut</code> program will get a space as its <code>d</code> option. (In other words, the quotes are for the shell, not for the program the shell runs.)</p>
<p>(The <code>shlex</code> module also has a handle <code>quote</code> function that you can use for the exact opposite purpose: building a command line from a list of arguments for <code>shell=True</code>.)</p>
<p>However, it's usually better to just create an list of arguments in the first place, instead of trying to figure out how to create a string that, when run through <code>shlex.split()</code>, will give you the list you wanted.</p>
</div>
<span class="comment-copy">I used <code>process = subprocess.Popen(cmd.split(), shell=True)</code>, but the output is <code>None</code>.</span>
<span class="comment-copy">@RaduRădeanu: That's because you took out the <code>stdout=subprocess.PIPE</code>. Why did you do that?</span>
<span class="comment-copy">Why I've done that? Because I just have a few days from when I start to learn python :) Many thanks for your answer!</span>
<span class="comment-copy">@RaduRădeanu: You really should read the documentation, to understand what these functions and their parameters do. Just copying and pasting code without knowing what it does isn't going to help you learn. It's not at all obvious (unless you already know how everything works under the covers, which you wouldn't after a couple days) just from looking at the code that <code>communicate</code> only works if you passed <code>stdout=PIPE</code>, but it is pretty clear is you skim the docs.</span>
