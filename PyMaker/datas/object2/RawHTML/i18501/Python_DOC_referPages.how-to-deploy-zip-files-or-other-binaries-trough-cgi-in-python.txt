<div class="post-text" itemprop="text">
<p>I'm coding a small website with Python and CGI where users can upload zip files and download files uploaded by other users. 
Currently I'm able to upload correctly the zip's, but I'm having some trouble to correctly send files to the user. My first approach was:</p>
<pre><code>file = open('../../data/code/' + filename + '.zip','rb')

print("Content-type: application/octet-stream")
print("Content-Disposition: filename=%s.zip" %(filename))
print(file.read())

file.close()
</code></pre>
<p>But soon I realized that I had to send the file as binary, so I tried:</p>
<pre><code>print("Content-type: application/octet-stream")
print("Content-Disposition: filename=%s.zip" %(filename))
print('Content-transfer-encoding: base64\r')
print( base64.b64encode(file.read()).decode(encoding='UTF-8') )
</code></pre>
<p>And different variants of it. It just doesn't works; Apache raises "malformed header from script" error, so I guess I should encode the file in some other way.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to print an <em>empty line</em> after the headers, and you Content-disposition header is missing the type (<code>attachment</code>):</p>
<pre><code>print("Content-type: application/octet-stream")
print("Content-Disposition: attachment; filename=%s.zip" %(filename))
print()
</code></pre>
<p>You may also want to use a more efficient method of uploading the resulting file; use <a href="http://docs.python.org/3/library/shutil.html#shutil.copyfileobj" rel="nofollow"><code>shutil.copyfileobj()</code></a> to copy the data to <code>sys.stdout.buffer</code>:</p>
<pre><code>from shutil import copyfileobj
import sys

print("Content-type: application/octet-stream")
print("Content-Disposition: attachment; filename=%s.zip" %(filename))
print()

with open('../../data/code/' + filename + '.zip','rb') as zipfile:
    copyfileobj(zipfile, sys.stdout.buffer)
</code></pre>
<p>You should not use <code>print()</code> for binary data in any case; all you get is <code>b'...'</code> byte literal  syntax. The <code>sys.stdout.buffer</code> object is the underlying binary I/O buffer, copy binary data directly to that.</p>
</div>
<div class="post-text" itemprop="text">
<p>The header is malformed because, for some reason, Python sends it after sending the file.</p>
<p>What you need to do is flush stdout right after the header:</p>
<pre><code>sys.stdout.flush()
</code></pre>
<p>Then put the file copy</p>
</div>
<div class="post-text" itemprop="text">
<p>This is what worked for me, I am running Apache2 and loading this script via cgi. Python 3 is my language.</p>
<p>You may have to replace first line with your python 3 bin path.</p>
<pre><code>#!/usr/bin/python3
import cgitb
import cgi
from zipfile import ZipFile
import sys

# Files to include in archive
source_file = ["/tmp/file1.txt", "/tmp/file2.txt"]

# Name and Path to our zip file.
zip_name = "zipfiles.zip"
zip_path = "/tmp/{}".format(zip_name)

with ZipFile( zip_path,'w' ) as zipFile:
    for f in source_file:
        zipFile.write(f);

# Closing File.
zipFile.close()

# Setting Proper Header.
print ( 'Content-Type:application/octet-stream; name="{}"'.format(zip_name) );
print ( 'Content-Disposition:attachment; filename="{}"\r\n'.format(zip_name) );

# Flushing Out stdout.
sys.stdout.flush()

bstdout = open(sys.stdout.fileno(), 'wb', closefd=False)
file = open(zip_path,'rb')
bstdout.write(file.read())
bstdout.flush()
</code></pre>
</div>
<span class="comment-copy">I'm already printing an empty line. Note the '\r' at the end of print('Content-transfer-encoding: base64\r'), and remember that 'print' automatically adds a '\n' at the end. I've just tried your code but Apache keeps complaining about malformed header. Anyway, it seems a much better approach.</span>
<span class="comment-copy">Right; it looks like your header is malformed as well; see <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html" rel="nofollow noreferrer">RFC 2616</a>.</span>
<span class="comment-copy">I can't see where the header is malformed. But I've just tested succesfully that if I create a link to the file, it is automatically sent without the need to use the previous code. Which is the correct way?</span>
<span class="comment-copy">Linking to the file; use a CGI only if you have to do more processing.</span>
<span class="comment-copy">I'm using Python 2.7, which may make a difference, but to get this code to work I had to change the final line <code>copyfileobj(zipfile, sys.stdout)</code>.</span>
<span class="comment-copy">Not sure if this is a good answer, but might be good to explain a bit more.</span>
