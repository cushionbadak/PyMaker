<div class="post-text" itemprop="text">
<p>I am working on a script to recursively go through subfolders in a mainfolder and build a list off a certain file type. I am having an issue with the script. Its currently set as follows</p>
<pre><code>for root, subFolder, files in os.walk(PATH):
    for item in files:
        if item.endswith(".txt") :
            fileNamePath = str(os.path.join(root,subFolder,item))
</code></pre>
<p>the problem is that the subFolder variable is pulling in a list of subfolders rather than the folder that the ITEM file is located.  I was thinking of running a for loop for the subfolder before and join the first part of the path but I figured Id double check to see if anyone has any suggestions before that. Thanks for your help!</p>
</div>
<div class="post-text" itemprop="text">
<p>You should be using the <code>dirpath</code> which you call <code>root</code>. The <code>dirnames</code> are supplied so you can prune it if there are folders that you don't wish <code>os.walk</code> to recurse into.</p>
<pre><code>import os
result = [os.path.join(dp, f) for dp, dn, filenames in os.walk(PATH) for f in filenames if os.path.splitext(f)[1] == '.txt']
</code></pre>
<p><strong>Edit:</strong></p>
<p>After the latest downvote, it occurred to me that <code>glob</code> is a better tool for selecting by extension.</p>
<pre><code>import os
from glob import glob
result = [y for x in os.walk(PATH) for y in glob(os.path.join(x[0], '*.txt'))]
</code></pre>
<p>Also a generator version</p>
<pre><code>from itertools import chain
result = (chain.from_iterable(glob(os.path.join(x[0], '*.txt')) for x in os.walk('.')))
</code></pre>
<p><strong>Edit2 for Python 3.4+</strong></p>
<pre><code>from pathlib import Path
result = list(Path(".").rglob("*.[tT][xX][tT]"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Changed in <strong>Python 3.5</strong>: Support for recursive globs using “**”.</p>
</blockquote>
<p><code>glob.glob()</code> got a new <a href="https://docs.python.org/3.5/library/glob.html?highlight=recursive#glob.glob" rel="noreferrer"><em>recursive parameter</em></a>.</p>
<p>If you want to get every <code>.txt</code> file under <code>my_path</code> (recursively including subdirs):</p>
<pre><code>import glob

files = glob.glob(my_path + '/**/*.txt', recursive=True)

# my_path/     the dir
# **/       every file and dir under my_path
# *.txt     every file that ends with '.txt'
</code></pre>
<p>If you need an iterator you can use <a href="https://docs.python.org/3/library/glob.html#glob.iglob" rel="noreferrer"><strong>iglob</strong></a> as an alternative:</p>
<pre><code>for file in glob.iglob(my_path, recursive=False):
    # ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I will translate <a href="https://stackoverflow.com/a/18394205/4518341">John La Rooy's list comprehension</a> to nested for's, just in case anyone else has trouble understanding it.</p>
<pre><code>result = [y for x in os.walk(PATH) for y in glob(os.path.join(x[0], '*.txt'))]
</code></pre>
<p>Should be equivalent to:</p>
<pre><code>result = []

for x in os.walk(PATH):
    for y in glob(os.path.join(x[0], '*.txt')):
        result.append(y)
</code></pre>
<p>Here's the documentation for <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> and the functions <a href="https://docs.python.org/2/library/os.html#os.walk" rel="nofollow noreferrer">os.walk</a> and <a href="https://docs.python.org/2/library/glob.html#module-glob" rel="nofollow noreferrer">glob.glob</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Its not the most pythonic answer, but I'll put it here for fun because it's a neat lesson in recursion</p>
<pre><code>def find_files( files, dirs=[], extensions=[]):
    new_dirs = []
    for d in dirs:
        try:
            new_dirs += [ os.path.join(d, f) for f in os.listdir(d) ]
        except OSError:
            if os.path.splitext(d)[1] in extensions:
                files.append(d)

    if new_dirs:
        find_files(files, new_dirs, extensions )
    else:
        return
</code></pre>
<p>On my machine I have two folders, <code>root</code> and <code>root2</code></p>
<pre><code>mender@multivax ]ls -R root root2
root:
temp1 temp2

root/temp1:
temp1.1 temp1.2

root/temp1/temp1.1:
f1.mid

root/temp1/temp1.2:
f.mi  f.mid

root/temp2:
tmp.mid

root2:
dummie.txt temp3

root2/temp3:
song.mid
</code></pre>
<p>Lets say I want to find all <code>.txt</code> and all <code>.mid</code> files in either of these directories, then I can just do </p>
<pre><code>files = []
find_files( files, dirs=['root','root2'], extensions=['.mid','.txt'] )
print(files)

#['root2/dummie.txt',
# 'root/temp2/tmp.mid',
# 'root2/temp3/song.mid',
# 'root/temp1/temp1.1/f1.mid',
# 'root/temp1/temp1.2/f.mid']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The new <code>pathlib</code> library simplifies this to one line:</p>
<pre><code>from pathlib import Path
result = list(Path(PATH).glob('**/*.txt'))
</code></pre>
<p>You can also use the generator version:</p>
<pre><code>from pathlib import Path
for file in Path(PATH).glob('**/*.txt'):
    pass
</code></pre>
<p>This returns <code>Path</code> objects, which you can use for pretty much anything, or get the file name as a string by <code>file.name</code>.</p>
</div>
<span class="comment-copy">This would be much more readable if it was not a list comprehension...</span>
<span class="comment-copy">'*.[Tt][Xx][Tt]' glob pattern will make the search case-insensitive.</span>
<span class="comment-copy">@SergiyKolesnikov, Thanks, I've used that in the edit at the bottom. Note that the <code>rglob</code> is insensitive on Windows platforms - but it's not portably insensitive.</span>
<span class="comment-copy">@JohnLaRooy It works with <code>glob</code> too (Python 3.6 here): <code>glob.iglob(os.path.join(real_source_path, '**', '*.[xX][mM][lL]')</code></span>
<span class="comment-copy">TypeError: glob() got an unexpected keyword argument 'recursive'</span>
<span class="comment-copy">It should be working. Make sure you use a version &gt;= 3.5. I added a link to the documentation in my answer for more detail.</span>
<span class="comment-copy">That would be why, I'm on 2.7</span>
<span class="comment-copy">Why the list comprehension and not just <code>files = glob.glob(PATH + '/*/**/*.txt', recursive=True)</code>?</span>
<span class="comment-copy">Whoops! :) It's totally redundant. No idea what made me write it like that. Thanks for mentioning it! I'll fix it.</span>
