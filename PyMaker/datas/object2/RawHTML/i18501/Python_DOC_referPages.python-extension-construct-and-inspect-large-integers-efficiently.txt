<div class="post-text" itemprop="text">
<p>I have a native library for which a natural interface would involve passing potentially large numbers. I anticipate about half being &lt; 32 bits; another quarter &lt; 64 bits; the next eighth &lt; 128 bits - and so on, without a fixed length limit.</p>
<p>PyLong_FromUnsignedLongLong() and PyLong_AsUnsignedLongLong() would be suitable if I could constrain values to fit in a single register.</p>
<p>PyLong_FromString() overcomes this - but at the undesirable expense of requiring an intermediate representation.  _PyLong_FromByteArray() and _PyLong_AsByteArray() mitigate this cost (by making this intermediate representation simple) but the leading underscore makes me wonder if this may lead to portability problems.</p>
<p>In longintrepr.h, I've found struct _longobject... which hints that it might be a way to interact directly with the internal representation... though an absence of detailed documentation about this structure remains a hurdle.</p>
<p>What approach will result in optimal throughput between Python and the library?  Is there documentation I've overlooked?</p>
</div>
<div class="post-text" itemprop="text">
<p>The underscore prefix largely means the same thing in the C API as in normal Python: "this function is an implementation detail subject to change, so watch yourself if you use it". You're not forbidden to use such functions, and if it's the only way to achieve a particular goal (e.g. significant efficiency gains in your case), then it's fine to use the API as long as you are aware of the hazard.</p>
<p>If the <code>_PyLong_FromByteArray</code> API was truly private, it would be a <code>static</code> function and wouldn't be fully documented and exported in <code>longobject.h</code>. In fact, Tim Peters (a well-known Python core developer) explicitly <a href="http://mail.python.org/pipermail/python-list/2006-August/372368.html" rel="noreferrer">blesses its use</a>:</p>
<blockquote>
<p>[Dan Christensen]</p>
<blockquote>
<p>My student and I are writing a C extension that produces a large
    integer in binary which we'd like to convert to a python long.  The
    number of bits can be a lot more than 32 or even 64.  My student found
    the function _PyLong_FromByteArray in longobject.h which is exactly
    what we need, but the leading underscore makes me wary.  Is it safe to
    use this function?</p>
</blockquote>
<p>Python uses it internally, so it better be ;-)</p>
<blockquote>
<p>Will it continue to exist in future versions of python?</p>
</blockquote>
<p>No guarantees, and that's why it has a leading underscore:  it's not
  an officially supported, externally documented, part of the advertised
  Python/C API.  It so happens that I added that function, because
  Python needed some form of its functionality internally across
  different C modules.  Making it an official part of the Python/C API
  would have been a lot more work (which I didn't have time for), and
  created an eternal new maintenance burden (which I'm not keen on
  regardless ;-)).</p>
<p>In practice, few people touch this part of Python's implementation, so
  I don't /expect/ it will go away, or even change, for years to come.
  The biggest insecurity I can think of offhand is that someone may
  launch a crusade to make some other byte-array &lt;-&gt; long interface
  "official" based on a different way of representing negative integers.
  But even then I expect the current unofficial functions to remain,
  since the 256's-complement representation remains necessary for the
  <code>struct</code> module's "q" format, and for the <code>pickle</code> module's protocol=2
  long serialization format.</p>
<blockquote>
<p>Or is there some other method we should use?</p>
</blockquote>
<p>No.  That's why these functions were invented to begin with ;-)</p>
</blockquote>
<p>Here's the documentation (from Python 3.2.1):</p>
<pre class="lang-c prettyprint-override"><code>/* _PyLong_FromByteArray:  View the n unsigned bytes as a binary integer in
   base 256, and return a Python long with the same numeric value.
   If n is 0, the integer is 0.  Else:
   If little_endian is 1/true, bytes[n-1] is the MSB and bytes[0] the LSB;
   else (little_endian is 0/false) bytes[0] is the MSB and bytes[n-1] the
   LSB.
   If is_signed is 0/false, view the bytes as a non-negative integer.
   If is_signed is 1/true, view the bytes as a 2's-complement integer,
   non-negative if bit 0x80 of the MSB is clear, negative if set.
   Error returns:
   + Return NULL with the appropriate exception set if there's not
     enough memory to create the Python long.
*/
PyAPI_FUNC(PyObject *) _PyLong_FromByteArray(
    const unsigned char* bytes, size_t n,
    int little_endian, int is_signed);
</code></pre>
<p>The main reason it's an "underscore-prefixed" API is because it depends on the implementation of the Python <code>long</code> as an array of words in a power-of-two base. This isn't likely to change, but since you're implementing an API on top of this, you can insulate your callers from changes in the Python API later on.</p>
</div>
<div class="post-text" itemprop="text">
<p>Sounds like you need <code>PyNumber_Long</code>.  Some doc hits are <a href="http://docs.python.org/3/search.html?q=PyNumber&amp;check_keywords=yes&amp;area=default" rel="nofollow">here</a>.</p>
</div>
<span class="comment-copy">Then apply the fast API to those numbers that are small enough and "PyLong_FromString" only to the big ones, or is that not fast enough?. (By the way, you should probably tag your question with <code>python-c-api</code>)</span>
<span class="comment-copy">Did you profile <i>and</i> found the conversion to be a bottleneck, or are you simply speculating? Before finding a complex solution to a simple problem be sure that there <i>is</i> a problem.</span>
<span class="comment-copy">My concerns are at the API design phase, not a result of profiling an implementation.  I am looking for the neatest method of (A) constructing PyLong objects in C - where I know their length and which bits are set; and (B) of comparing and testing bits in PyLong objects from C.  Involving strings at all seems very clunky, I'm hoping to find a neater solution.</span>
<span class="comment-copy">"though an absence of detailed documentation about this structure remains a hurdle". I'm not sure why this is a hurdle. I looked at <code>longintrepr.h</code>. It seems to be quite well documented for a private API. If you're confused about anything, you can always consult the <code>longobject.c</code> source code to see what's going on. If you're still confused about something, you should amend your question to add your specific problem.</span>
<span class="comment-copy">longobject.c is more illuminating than my longintrepr.h - but I'd love to see both a sample involving direct access to _longobject... and some documentation that addresses what criteria must be met to robustly interact at the low level.  (I do suspect I'm being over-demanding... and maybe a bit lazy... but, to justify that, it seems a use case that would benefit from explicit documentation.</span>
<span class="comment-copy">Very helpful information about the _PyLong_FromByteArray() approach.  Thanks.  I would still like to establish if there's a similarly viable approach that is even more direct.  I can go via a byte-array (in both directions) but I'd prefer to interact directly with an array of "limbs" - in a way analogous to when using GMP/MPIR - especially when reading large integers in C.</span>
<span class="comment-copy">@aSteve: Not without using an even more private API, I'm afraid. <code>longintrepr.h</code> defines <code>struct _longobject</code>, and there's a nice big documentation block right above it. The only part which might look strange is <code>PyObject_VAR_HEAD</code>, which is <a href="http://docs.python.org/release/3.0/c-api/structures.html#PyObject_VAR_HEAD" rel="nofollow noreferrer">well documented</a>. Of course, if you actually use <code>longintrepr.h</code>, you're responsible for keeping up with any and all API breakage that may result.</span>
<span class="comment-copy">I believe the OP wants to convert between native C types and python objects, hence he cannot use <code>PyNumber_Long</code>.</span>
<span class="comment-copy">I'd found the Python "Number Protocol" - providing numeric routines ranging over long python numbers... but I don't see any functions that help me efficiently construct/inspect these objects from C.</span>
