<div class="post-text" itemprop="text">
<p>I'm wanting to run the Linux word count utility wc to determine the number of lines currently in the /var/log/syslog, so I can detect that it's growing.  I've tried various test, and while I get the results back from wc, it includes both the line count as well as the command (e.g., var/log/syslog). </p>
<p>So it's returning:
   1338 /var/log/syslog
But I only want the line count, so I want to strip off the /var/log/syslog portion, and just keep 1338.</p>
<p>I have tried converting it to string from bytestring, and then stripping the result, but no joy.  Same story for converting to string and stripping, decoding, etc - all fail to produce the output I'm looking for.</p>
<p>These are some examples of what I get, with 1338 lines in syslog: </p>
<ul>
<li>b'1338 /var/log/syslog\n'</li>
<li>1338 /var/log/syslog</li>
</ul>
<p>Here's some test code I've written to try and crack this nut, but no solution:</p>
<pre><code>import subprocess

#check_output returns byte string
stdoutdata = subprocess.check_output("wc --lines /var/log/syslog", shell=True)
print("2A stdoutdata: " + str(stdoutdata))
stdoutdata = stdoutdata.decode("utf-8")
print("2B stdoutdata: " + str(stdoutdata))    
stdoutdata=stdoutdata.strip()
print("2C stdoutdata: " + str(stdoutdata))    
</code></pre>
<p>The output from this is:</p>
<ul>
<li><p>2A stdoutdata: b'1338 /var/log/syslog\n'</p></li>
<li><p>2B stdoutdata: 1338 /var/log/syslog</p></li>
<li><p>2C stdoutdata: 1338 /var/log/syslog</p></li>
<li><p>2D stdoutdata: 1338 /var/log/syslog</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>I suggest that you use <code>subprocess.getoutput()</code> as it does exactly what you want—run a command in a shell and get its <a href="http://docs.python.org/3.1/library/subprocess.html#subprocess.getoutput" rel="noreferrer">string output</a> (as opposed to <a href="http://docs.python.org/3.1/library/subprocess.html#subprocess.check_output" rel="noreferrer">byte string</a> output). Then you can <a href="http://docs.python.org/3.1/library/stdtypes.html#str.split" rel="noreferrer">split on whitespace</a> and grab the first element from the returned list of strings.</p>
<p>Try this:</p>
<pre><code>import subprocess
stdoutdata = subprocess.getoutput("wc --lines /var/log/syslog")
print("stdoutdata: " + stdoutdata.split()[0])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To avoid invoking a shell and decoding filenames that might be an arbitrary byte sequence (except <code>'\0'</code>) on *nix, you could pass the file as stdin:</p>
<pre><code>import subprocess

with open(b'/var/log/syslog', 'rb') as file:
    nlines = int(subprocess.check_output(['wc', '-l'], stdin=file))
print(nlines)
</code></pre>
<p>Or you could ignore any decoding errors:</p>
<pre><code>import subprocess

stdoutdata = subprocess.check_output(['wc', '-l', '/var/log/syslog'])
nlines = int(stdoutdata.decode('ascii', 'ignore').partition(' ')[0])
print(nlines)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since Python 3.6 you can make <code>check_output()</code> return a <code>str</code> instead of <code>bytes</code> by giving it an <em>encoding</em> parameter:</p>
<pre><code>check_output('wc --lines /var/log/syslog', encoding='UTF-8', shell=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Equivalent to Curt J. Sampson's answer is also this one (it's returning a string):</p>
<pre><code>subprocess.check_output('wc -l /path/to/your/file | cut -d " " -f1', universal_newlines=True, shell=True)
</code></pre>
<p>from docs:</p>
<blockquote>
<p>If encoding or errors are specified, or text is true, file objects for
  stdin, stdout and stderr are opened in text mode using the specified
  encoding and errors or the io.TextIOWrapper default. The
  universal_newlines argument is equivalent to text and is provided for
  backwards compatibility. By default, file objects are opened in binary
  mode.</p>
</blockquote>
<p>Something similar, but a bit more complex using subprocess.run():</p>
<pre><code>subprocess.run(command, shell=True, check=True, universal_newlines=True, stdout=subprocess.PIPE).stdout
</code></pre>
<p>as subprocess.check_output() could be equivalent to subprocess.run().</p>
</div>
<span class="comment-copy">You should be warned that the <code>subprocess.getoutput</code> belongs to the category of <i>Legacy Shell Invocation Functions</i> (<a href="http://docs.python.org/3/library/subprocess.html#subprocess.getoutput" rel="nofollow noreferrer">docs.python.org/3/library/subprocess.html#subprocess.getoutput</a>).</span>
<span class="comment-copy">@pepr But what does the 'legacy' designation mean, practically speaking?  I don't see a timeline for removal, as of 3.5.0a0 . (May be defined elsewhere?)</span>
<span class="comment-copy">@belacqua: As the paraghraph just below <i>17.5.6. Legacy Shell Invocation Functions</i> says (<a href="https://docs.python.org/3.5/library/subprocess.html#legacy-shell-invocation-functions" rel="nofollow noreferrer">docs.python.org/3.5/library/…</a>) -- cite (the emphasis added): <i>These operations <b>implicitly</b> invoke the <b>system shell</b> and <b>none of the guarantees</b> described above regarding <b>security and exception handling consistency</b> are valid for these functions.</i></span>
<span class="comment-copy">@belacqua: The <code>subprocess.check_function()</code> (<a href="https://docs.python.org/3.5/library/subprocess.html#subprocess.check_output" rel="nofollow noreferrer">docs.python.org/3.5/library/…</a>) is better replacement and also requries less work. See the J.F.Sebastian's <a href="http://stackoverflow.com/a/18270852/1346705">stackoverflow.com/a/18270852/1346705</a>. The argument also can be a string.</span>
<span class="comment-copy">@pepr I believe you meant to say <code>check_output</code>, not check_function..?</span>
<span class="comment-copy">Is there any way to get the <code>sys.stdout.encoding</code> in this case so we pass this to decode instead of <code>ascii</code> ? What if we <code>subprocess.PIPE</code> stdout ?</span>
<span class="comment-copy">@Mr_and_Mrs_D it would be a wrong thing to do: 1- it won't help in the general case (a filename may be a byte sequence that is undecodable by any character encoding as it is said explicitly in the answer. See PEP 383) 2- ascii works here (to decode digits printed by wc in any locale supported by Python)</span>
<span class="comment-copy">also, on python 3.7 there's capture_output=True <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">docs.python.org/3/library/subprocess.html</a></span>
