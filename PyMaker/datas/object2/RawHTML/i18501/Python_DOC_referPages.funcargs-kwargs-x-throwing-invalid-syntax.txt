<div class="post-text" itemprop="text">
<p>Studied myself into a corner again...</p>
<pre><code>def superfunction(*args, **kwargs, k):
                                 ^
SyntaxError: invalid syntax
</code></pre>
<p>Whats the rule Im breaking here? It seems that youre not supposed to mix 'regular' variables with * variables, but I cant find anyone to confirm or deny this. I read somewhere (and I cant find in now of course) that some types of arguments have to come first, I believe keyword arguments, which may or may not be part of my issue.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>def superfunction(k, *args, **kwargs):
</code></pre>
<p>The <code>**kwargs</code> variable keyword parameter must be the last part in the function declaration. Second-to-last, the <code>*args</code> variable position parameter. (In Python 3.x only, you can also have keyword-only parameters between <code>*args</code> and <code>**kwargs</code>.) And in the first places, the positional parameters - that's the correct way to declare function parameters. Take a look at this <a href="https://stackoverflow.com/questions/3394835/args-and-kwargs">post</a> for additional details.</p>
<p>For the full reference, see the Function definitions section in <a href="http://docs.python.org/3/reference/compound_stmts.html#function" rel="noreferrer">Python 3.x</a> or <a href="http://docs.python.org/2/reference/compound_stmts.html#function" rel="noreferrer">Python 2.x</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Syntax should be like this:</p>
<pre><code>def superfunction(k, *args, **kwargs):
</code></pre>
<p>First you give all the positional arguments, then non-keyword arguments, and then keyword arguments.</p>
</div>
<span class="comment-copy">The details of exactly why this is wrong are a bit different between Python 2.x and 3.x; see the tutorial section <a href="http://docs.python.org/2/tutorial/controlflow.html#keyword-arguments" rel="nofollow noreferrer">Keyword Arguments</a> and the reference section <a href="http://docs.python.org/2/reference/compound_stmts.html#function" rel="nofollow noreferrer">Function definitions</a> for your appropriate version have the details. But briefly, nothing can come after the <code>**</code> parameter.</span>
<span class="comment-copy">I've also got a <a href="http://stupidpythonideas.blogspot.com/2013/08/arguments-and-parameters.html" rel="nofollow noreferrer">blog post</a> that explains the full details; I don't think it's at all novice-friendly… but I hope it's at least a little easier than reading the reference docs. (It is Python 3-specific, however.)</span>
<span class="comment-copy">so its unnamed vars, named vars, *, **</span>
<span class="comment-copy">The only order I can get it to work in is def superfunction(k, n = 2 , *args, **kwargs): Thank you for putting me on the right track.</span>
<span class="comment-copy">followup : def superfunction(k, n = 2 , *args, *args2, **kwargs): Having multiple * type arguments throws a syntax error too. I guess youre only allowed one?</span>
<span class="comment-copy">This isn't quite right for Python 3.x, because you can also have keyword-only arguments between the <code>*args</code> and <code>**kwargs</code>. But either way, you can't have anything after the <code>**kwargs</code>, and you can't have more than one <code>*args</code> or more than one <code>**kwargs</code>.</span>
<span class="comment-copy">That's right, only one is allowed. I edited my answer with an useful link</span>
<span class="comment-copy">Besides getting arguments and parameters wrong… non-keyword arguments and positional arguments are the same thing, so this is confusing and wrong.</span>
<span class="comment-copy">The right order is: positional-or-keyword params, then optionally <code>*args</code> (or <code>*</code>, in Python 3.x only), then (in Python 3.x only) keyword-only params, then <code>**kwargs</code>.</span>
<span class="comment-copy">@abarnert Ah! Is it? I read it few months back, so I seem to forgot the technical term, and hence a mix-up. Thanks for pointing that out.</span>
