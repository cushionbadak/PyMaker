<div class="post-text" itemprop="text">
<p>How can I update class variable from dictionary?
I've came up with a dirty hack, but I'm looking (if there is) for something more neat.</p>
<p>Let's say I want a class C which parameters will be set based on given dictionary. As a result, c should have </p>
<pre><code>class C:
    def setVar(self, var):
        for key in var.keys():
            exec('self.{} = {}'.format(key, var[key]))

D = {'a':1, 'b':2, 'c':3}
c = C()
c.setVar(D)

# c.a = 1
# c.b = 2
# c.c = 3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is exactly what <a href="http://docs.python.org/3/library/functions.html#setattr" rel="noreferrer"><code>setattr</code></a> is for:</p>
<pre><code>def setVar(self, var):
    for key, value in var.items():
        setattr(self, key, value)
</code></pre>
<p>More generally, almost any time you find yourself looking at <code>eval</code> or <code>exec</code>, look for a reflective function like <code>setattr</code> first, and you'll almost always find one.</p>
<hr/>
<p>If you know your class is using a simple <code>__dict__</code> for instance attributes, and all of these are instance attributes (that's the standard case—and if you don't know what all of that means, it's true for your code), you can do this quick&amp;dirty hack:</p>
<pre><code>def setVar(self, var):
    self.__dict__.update(var)
</code></pre>
<p>However, <code>setattr</code> works in any case that makes sense, and fails appropriately in most cases that doesn't, and of course it says exactly what it's doing—it's setting an attribute on <code>self</code> named <code>key</code> to <code>value</code>, however that attribute is stored—makes it much cleaner.</p>
</div>
<div class="post-text" itemprop="text">
<p>How about this?</p>
<pre><code>def setVar(self, var):
    for key, value in var.iteritems():
        setattr(self, key, value)
</code></pre>
</div>
<span class="comment-copy">I know it's not what you're asking, but just in case you don't know, you can use the <code>__init__</code> method to set the initial values of those variables (the class would be instantiated as <code>c = C(**D)</code>)</span>
<span class="comment-copy">@PauloAlmeida: Passing <code>**D</code> to <code>__init__</code> won't automatically do anything; you'll need to write an <code>__init__</code> method that does basically the exact same thing <code>setVar</code> does (except taking <code>**kwargs</code> instead of <code>var</code>, and looping over <code>kwargs</code> instead of <code>var</code>).</span>
<span class="comment-copy">@abarnert, I know, I just wanted to make sure he is aware of that possibility. I wasn't thinking of looping through <code>**kwargs</code>, I would suggest setting each variable in the dictionary explicitly. As I said, I know that wasn't the question, just thought it was useful information in case he doesn't know.</span>
<span class="comment-copy">@PauloAlmeida Thanks a lot! I didn't know that and I guess it might be useful in future! :)</span>
