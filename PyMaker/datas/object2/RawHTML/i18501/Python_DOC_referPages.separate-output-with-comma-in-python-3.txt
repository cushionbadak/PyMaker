<div class="post-text" itemprop="text">
<p>I just need to separate my out with a comma so it will print like this 1,2,fizz ect</p>
<pre><code>for x in range (1, 21):
    if x%15==0:
        print("fizzbuzz",end=" ")
    elif x%5==0:
        print (("buzz"),end=" ") 
    elif x%3==0:
        print (("fizz"),end=" ")
    else:
        print (x,end=" ")
</code></pre>
<p>I can add a comma where " " is but my list will print with a comma at the end like 1,2,fizz,4,buzz,fizz,7,8,fizz,buzz,11,fizz,13,14,fizzbuzz,16,17,fizz,19,buzz,</p>
<p>I've gone over my notes and went on python tutorials but I am not sure how to get rid of the last comma or use a more effective method rather than just add that comma in instead of space.</p>
<p>I asked this before but I was confused by the wording so my question came out real confusing. I understand that this may be simple but this is my first time programming so I am a noob. My lecturer hasn't explained to me how I can do this. I could really use some help/ pointers. Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of printing them immediately, put everything is a list of strings. Then join the list with commas and print resulting string.</p>
</div>
<div class="post-text" itemprop="text">
<p>This could be a good example for learning generators. A generator looks like a normal function that uses <code>yield</code> instead of <code>return</code>. The difference is that when generator function is used, it behaves as an iterable object that produces a sequence of values. Try the following:</p>
<pre><code>#!python3

def gen():
    for x in range (1, 21):
        if x % 15 == 0:
            yield "fizzbuzz"
        elif x % 5 == 0:
            yield "buzz"
        elif x % 3 == 0:
            yield "fizz"
        else:
            yield str(x)


# Now the examples of using the generator.
for v in gen():
    print(v)

# Another example.
lst = list(gen())   # the list() iterates through the values and builds the list object
print(lst)

# And printing the join of the iterated elements.
print(','.join(gen()))  # the join iterates through the values and joins them by ','

# The above ','.join(gen()) produces a single string that is printed.
# The alternative approach is to use the fact the print function can accept more
# printed arguments, and it is possible to set a different separator than a space.
# The * in front of gen() means that the gen() will be evaluated as iterable.
# Simply said, print can see it as if all the values were explicitly writen as 
# the print arguments.
print(*gen(), sep=',')
</code></pre>
<p>See the doc for the <code>print</code> function arguments at <a href="http://docs.python.org/3/library/functions.html#print" rel="nofollow">http://docs.python.org/3/library/functions.html#print</a>, and <code>*expression</code> call argument at <a href="http://docs.python.org/3/reference/expressions.html#calls" rel="nofollow">http://docs.python.org/3/reference/expressions.html#calls</a>.</p>
<p>Another advantage of the last <code>print</code> approach is that the arguments need not to be of the string type. The reason why the <code>gen()</code> definition explicitly used <code>str(x)</code> instead of plain <code>x</code> was because <code>.join()</code> requires that all joined values have to be of the string type. The <code>print</code> converts all the pased arguments to strings internally. If the <code>gen()</code> used plain <code>yield x</code>, and you insisted to use the join, the <code>join</code> could use a <em>generator expression</em> to convert the arguments to strings on the fly:</p>
<pre><code>','.join(str(x) for x in gen())) 
</code></pre>
<p>It displays on my console:</p>
<pre><code>c:\tmp\___python\JessicaSmith\so18500305&gt;py a.py
1
2
fizz
4
buzz
fizz
7
8
fizz
buzz
11
fizz
13
14
fizzbuzz
16
17
fizz
19
buzz
['1', '2', 'fizz', '4', 'buzz', 'fizz', '7', '8', 'fizz', 'buzz', '11', 'fizz',
'13', '14', 'fizzbuzz', '16', '17', 'fizz', '19', 'buzz']
1,2,fizz,4,buzz,fizz,7,8,fizz,buzz,11,fizz,13,14,fizzbuzz,16,17,fizz,19,buzz
1,2,fizz,4,buzz,fizz,7,8,fizz,buzz,11,fizz,13,14,fizzbuzz,16,17,fizz,19,buzz
</code></pre>
</div>
<span class="comment-copy"><code>for x in range(21): print(x%3//2*'Fizz'+x%5//4*'Buzz' or x+1)</code></span>
<span class="comment-copy">+1. Also, the functionality like in the question often becomes a function body. When writing functions, it is almost always better not to use <code>print()</code> inside. In theory, a function with <code>print</code> like calls is named as a <i>function with side effects</i>. It means it produces some output other than returning a value. In practice, functions with side effects are less universal. <i>Although practicality beats purity.</i></span>
<span class="comment-copy">+1 for converting into a generator... but instead of using <code>','.join</code> make use of <code>print</code> and do <code>print(*gen(), sep=',')</code> instead</span>
<span class="comment-copy">@JonClements: Good idea. I am going to update the question.</span>
<span class="comment-copy">It also means your generator needn't bother having to <code>yield str(x)</code> and just yield the number as it stands...</span>
<span class="comment-copy">@JonClements: Another good point, indeed. ;)</span>
