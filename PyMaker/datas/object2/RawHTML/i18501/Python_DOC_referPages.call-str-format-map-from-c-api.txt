<div class="post-text" itemprop="text">
<p>Given a format string and a dictionary, both stored in <code>PyObject*</code> variables, how can I call <a href="http://docs.python.org/3/library/stdtypes.html#str.format_map" rel="nofollow">str.format_map</a> from the C API using these values?</p>
<p>My goal here is to do the equivalent of:</p>
<pre><code># Given the "dict" and "fmt" are already in PyObject*
dict = {'Foo': 54.23345}
fmt = "Foo = {Foo:.3f}"

# How do I get result?
result = fmt.format_map(dict)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Something like this snippet should suffice:</p>
<pre><code>PyObject *dict, *value, *result, *fmt;
dict = PyDict_New();
if (!dict)
     return NULL;
value = PyFloat_FromDouble(54.23345);
if (!value) {
     PY_DECREF(dict);
     return NULL;
}
if (PyDict_SetItemString(dict, "Foo", value) &lt; 0) {
     Py_DECREF(value);
     Py_DECREF(dict);
     return NULL;
}
Py_DECREF(value);
fmt = PyUnicode_FromString("Foo = {Foo:.3f}");
if (!fmt) {
     Py_DECREF(dict);
     return NULL;
}
result = PyObject_CallMethodObjArgs(fmt, "format_map", dict, NULL);
Py_DECREF(fmt);
Py_DECREF(dict);
return result;
</code></pre>
<p>As you can see, this is cumbersome, so it's best to do as much as possible in Python!</p>
</div>
<span class="comment-copy">Aside from the obvious sequence of <code>PyObject_GetAttr</code>, creation of a 1-tuple, <code>PyObject_Call</code>?</span>
<span class="comment-copy">@delnan Why is <code>PyObject_GetAttr</code> required here?</span>
<span class="comment-copy">I just assumed the <code>format_map</code> implementation is <code>static</code> or otherwise internal, so you'd have to get it from the <code>fmt</code> (or the str type object, if you have a reason to).</span>
<span class="comment-copy">Do you actually need <code>format_map</code>? If you know your mapping is a plain <code>dict</code>, you may be better served by using it as a keyword argument dictionary to <code>format</code>.</span>
<span class="comment-copy">@user2357112 That'd be fine, too, but I also don't know how to call format() with a dictionary from C...  My understanding was format_map was actually cleaner than format in this case, as I'm using a dictionary directly.</span>
<span class="comment-copy">In Python 3, the only change would be to build a <code>PyObject*</code> for <code>"format_map"</code>, right?</span>
<span class="comment-copy">No, in fact I intended this code to run on Python 3.</span>
<span class="comment-copy">In that case, this doesn't compile...  <code>PyObject_CallMethodObjArgs</code> takes a <code>PyObject*</code> for the 2nd arg, not a <code>const char*</code> - <a href="http://docs.python.org/3.3/c-api/object.html" rel="nofollow noreferrer">docs.python.org/3.3/c-api/object.html</a></span>
