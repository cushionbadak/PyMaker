<div class="post-text" itemprop="text">
<p>I have a list of bytes as integers, which is something like</p>
<pre><code>[120, 3, 255, 0, 100]
</code></pre>
<p>How can I write this list to a file as binary?</p>
<p>Would this work?</p>
<pre><code>newFileBytes = [123, 3, 255, 0, 100]
# make file
newFile = open("filename.txt", "wb")
# write to file
newFile.write(newFileBytes)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is exactly what <a href="http://docs.python.org/3.3/library/functions.html#bytearray"><code>bytearray</code></a> is for:</p>
<pre><code>newFileByteArray = bytearray(newFileBytes)
newFile.write(newFileByteArray)
</code></pre>
<p>If you're using Python 3.x, you can use <code>bytes</code> instead (and probably ought to, as it signals your intention better). But in Python 2.x, that won't work, because <code>bytes</code> is just an alias for <code>str</code>. As usual, showing with the interactive interpreter is easier than explaining with text, so let me just do that.</p>
<p>Python 3.x:</p>
<pre><code>&gt;&gt;&gt; bytearray(newFileBytes)
bytearray(b'{\x03\xff\x00d')
&gt;&gt;&gt; bytes(newFileBytes)
b'{\x03\xff\x00d'
</code></pre>
<p>Python 2.x:</p>
<pre><code>&gt;&gt;&gt; bytearray(newFileBytes)
bytearray(b'{\x03\xff\x00d')
&gt;&gt;&gt; bytes(newFileBytes)
'[123, 3, 255, 0, 100]'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3.5/library/struct.html#struct.pack" rel="noreferrer"><code>struct.pack</code></a> to convert the integer values into binary bytes, then write the bytes. E.g.</p>
<pre><code>newFile.write(struct.pack('5B', *newFileBytes))
</code></pre>
<p>However I would never give a binary file a <code>.txt</code> extension.</p>
<p>The benefit of this method is that it works for other types as well, for example if any of the values were greater than 255 you could use <code>'5i'</code> for the format instead to get full 32-bit integers.</p>
</div>
<div class="post-text" itemprop="text">
<p>To convert from integers &lt; 256 to binary, use the <code>chr</code> function.  So you're looking at doing the following.</p>
<pre><code>newFileBytes=[123,3,255,0,100]
newfile=open(path,'wb')
newfile.write((''.join(chr(i) for i in newFileBytes)).encode('charmap'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As of Python 3.2+, you can also accomplish this using the <a href="https://docs.python.org/3/library/stdtypes.html#int.to_bytes" rel="noreferrer"><code>to_bytes</code></a> native int method:</p>
<pre><code>newFileBytes = [123, 3, 255, 0, 100]
# make file
newFile = open("filename.txt", "wb")
# write to file
for byte in newFileBytes:
    newFile.write(byte.to_bytes(1, byteorder='big'))
</code></pre>
<p>I.e., each single call to <a href="https://docs.python.org/3/library/stdtypes.html#int.to_bytes" rel="noreferrer"><code>to_bytes</code></a> in this case creates a string of length 1, with its characters arranged in big-endian order (which is trivial for length-1 strings), which represents the integer value <code>byte</code>. You can also shorten the last two lines into a single one:</p>
<pre><code>newFile.write(''.join([byte.to_bytes(1, byteorder='big') for byte in newFileBytes]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the following code example using Python 3 syntax:</p>
<pre><code>from struct import pack
with open("foo.bin", "wb") as file:
  file.write(pack("&lt;IIIII", *bytearray([120, 3, 255, 0, 100])))
</code></pre>
<p>Here is shell one-liner:</p>
<pre><code>python -c $'from struct import pack\nwith open("foo.bin", "wb") as file: file.write(pack("&lt;IIIII", *bytearray([120, 3, 255, 0, 100])))'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use pickle, like this: import pickle</p>
<p>Your code would look like this:</p>
<pre><code>import pickle
mybytes = [120, 3, 255, 0, 100]
with open("bytesfile", "wb") as mypicklefile:
    pickle.dump(mybytes, mypicklefile)
</code></pre>
<p>To read the data back, use the pickle.load method</p>
</div>
<span class="comment-copy">You ask "Would this work?". Have you tried it?</span>
<span class="comment-copy">Should be <code>TypeError: argument 1 must be string or buffer, not list</code>.</span>
<span class="comment-copy">Nice use of builtin types. Just note that bytearray was added in 2.6, if you want to support legacy systems, it should be avoided.</span>
<span class="comment-copy">@Perkins: Sure, and you should avoid generator expressions if you need to work on 2.3, be careful with both <code>str.encode</code> and <code>struct.pack</code> if you need to work on 2.2. But 2.6 has been out for 5 years now; all three Ubuntu LTSs still in support, all three OS X versions in support, the previous major version of CentOS/RHEL, etc., all come with it built in. If you need to support 2.5 or 2.1 or 1.6 or whatever, you probably know…</span>
<span class="comment-copy">With Python 2 on Windows, I found that writing a <code>bytearray</code> still converts <code>\n</code> to <code>\r\n</code>, making it unsatisfactory for binary data, if the "b" flag is not passed when opening the file.</span>
<span class="comment-copy">@feersum: Of course; that's what binary vs. text mode <i>means</i> in 2.x. It doesn't matter what type your bytes come from. (In 3.x, of course, binary vs. text mode means that you write bytes vs. unicode, and the <code>\r\n</code> feature is part of the universal newlines options for text.)</span>
<span class="comment-copy">.txt is fine if you have some way to knowing that the data you are writing all falls inside the printable ascii range.  However, you are correct I think in this case, since the example data includes non printable characters.</span>
<span class="comment-copy">@Perkins I didn't make the assumption that the values would even be less than 256 much less in the ASCII range. Even if they are, .txt files should be reserved for those that make sense to a human which never applies to binary data.</span>
<span class="comment-copy">You're right, struct.pack is also the way to go if you are going to be writing data with values above 255, since neither bytearray nor chr can handle larger integer values.</span>
<span class="comment-copy">@MarkRansom: Well, this is still definitely a good solution to the more general problem of "I have a list of integers of some arbitrary but fixed size, how can I write them to a binary file?" and I can see people searching for that question and finding this one…</span>
<span class="comment-copy">struct.pack is the better answer; it is far more flexible than simply creating a bytearray.</span>
<span class="comment-copy">You must mean &lt; 128. As python3 complains: UnicodeEncodeError: 'ascii' codec can't encode character '\x89' in position 0: ordinal not in range(128)</span>
<span class="comment-copy">No, I mean &lt; 256, but the encoding should be <code>charmap</code> rather than <code>ascii</code>, and works in python2 as well as python3.  The <code>ascii</code> encoding only works in python2.</span>
<span class="comment-copy">This does not produce a binary file of 5 bytes length, where the only content is 120, 3, 255, 0, 100. In a closed system, this may be acceptable though.</span>
