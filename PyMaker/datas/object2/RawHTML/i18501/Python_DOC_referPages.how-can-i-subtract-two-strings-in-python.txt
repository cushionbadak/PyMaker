<div class="post-text" itemprop="text">
<p>I have a long string, which is basically a list like <code>str="lamp, bag, mirror,"</code> (and other items)</p>
<p>I was wondering if I can add or subtract some items, in other programming languages I can easily do: <code>str=str-"bag,"</code> and get <code>str="lamp, mirror,"</code> this doesnt work in python (I'm using 2.7 on a W8 pc)</p>
<p>Is there a way to split the string across say "bag," and somehow use that as a subtraction? Then I still need to figure out how to add.</p>
</div>
<div class="post-text" itemprop="text">
<p>you could also just do</p>
<pre><code>print "lamp, bag, mirror".replace("bag,","")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about this?:</p>
<pre><code>def substract(a, b):                              
    return "".join(a.rsplit(b))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do this as long as you use well-formed <em>lists</em>:</p>
<pre><code>s0 = "lamp, bag, mirror"
s = s0.split(", ") # s is a list: ["lamp", "bag", "mirror"]
</code></pre>
<p>If the list is not well-formed, you can do as follows, as suggested by @Lattyware:</p>
<pre><code>s = [item.strip() for item in s0.split(',')]
</code></pre>
<p>Now to delete the element:</p>
<pre><code>s.remove("bag")
s
=&gt; ["lamp", "mirror"]
</code></pre>
<p>Either way - to reconstruct the string, use <code>join()</code>:</p>
<pre><code>", ".join(s)
=&gt; "lamp, mirror"
</code></pre>
<p>A different approach would be to use <code>replace()</code> - but be careful with the string you want to replace, for example <code>"mirror"</code> doesn't have a trailing <code>,</code> at the end.</p>
<pre><code>s0 = "lamp, bag, mirror"
s0.replace("bag, ", "")
=&gt; "lamp, mirror"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you should convert your string to a list of string then do what you want. look</p>
<pre><code>my_list="lamp, bag, mirror".split(',')
my_list.remove('bag')
my_str = ",".join(my_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you have two strings like below:</p>
<pre><code>t1 = 'how are you'
t2 = 'How is he'
</code></pre>
<p>and you want to subtract these two strings then you can use the below code:</p>
<pre><code>l1 = t1.lower().split()
l2 = t2.lower().split()
s1 = ""
s2 = ""
for i in l1:
  if i not in l2:
    s1 = s1 + " " + i 
for j in l2:
  if j not in l1:
    s2 = s2 + " " + j 

new = s1 + " " + s2
print new
</code></pre>
<p>Output will be like:</p>
<blockquote>
<p>are you  is he</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<pre><code>from re import sub

def Str2MinusStr1 (str1, str2, n=1) :
    return sub(r'%s' % (str2), '', str1, n)

Str2MinusStr1 ('aabbaa', 'a')  
# result 'abbaa'

Str2MinusStr1 ('aabbaa', 'ab')  
# result 'abaa'

Str2MinusStr1 ('aabbaa', 'a', 0)  
# result 'bb'

# n = number of occurences. 
# 0 means all, else means n of occurences. 
# str2 can be any regular expression. 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using regular expression example:</p>
<pre><code>import re

text = "lamp, bag, mirror"
word = "bag"

pattern = re.compile("[^\w]+")
result = pattern.split(text)
result.remove(word)
print ", ".join(result)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using the following you can add more words to remove (<code>["bag", "mirror", ...]</code>)</p>
<pre><code>(s0, to_remove) = ("lamp, bag, mirror", ["bag"])
s0 = ", ".join([x for x in s0.split(", ") if x not in to_remove])
=&gt; "lamp, mirror"
</code></pre>
</div>
<span class="comment-copy">When you say 'subtract', do you mean remove an item from your list, or remove the last characters if they match (and if they don't, what should the behaviour be? What about duplicate values?</span>
<span class="comment-copy">Take a look at string replace: <a href="http://docs.python.org/2/library/string.html#string.replace" rel="nofollow noreferrer">docs.python.org/2/library/string.html#string.replace</a></span>
<span class="comment-copy"><code>in other programming languages i can easily do: str=str-"bag," and get str="lamp, mirror," </code> what languages?</span>
<span class="comment-copy">That was an assumption. I thaugh it was possible in VBS and Java no?</span>
<span class="comment-copy">Of course, this functions differently to other examples in the case of duplicates - the OP doesn't give any explanation of the required behaviour in that case, but it's worth a note.</span>
<span class="comment-copy">good point ... really the split is probably the "correct" answer, however I figured I would throw this out there.  not sure what languages support string subtraction or how it would behave in said languages</span>
<span class="comment-copy">This solution is quite elegant.</span>
<span class="comment-copy">It might be worth mentioning <code>str.split()</code>.</span>
<span class="comment-copy">Yep, I was about to do that :)</span>
<span class="comment-copy">Obviously, there is an assumption here that the list is well-formed with spaces after each item, if that is not the case, the <code>[item.strip() for item in s0.split(',')]</code> is more flexible (a simple <a href="http://www.youtube.com/watch?v=pShL9DCSIUw" rel="nofollow noreferrer">list comprehension</a> with the <a href="http://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow noreferrer"><code>str.strip()</code></a> method).</span>
<span class="comment-copy">@Lattyware got it!</span>
<span class="comment-copy">I just use his variable name</span>
<span class="comment-copy">Massive overkill for this task. Why use REs when <code>str.split()</code> does exactly what is wanted?</span>
<span class="comment-copy">It is just an example as i said.</span>
