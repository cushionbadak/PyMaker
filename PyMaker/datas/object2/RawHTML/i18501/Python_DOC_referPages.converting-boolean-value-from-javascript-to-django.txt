<div class="post-text" itemprop="text">
<p>I noticed that when Boolean data is sent from javascript to Django view, it is passed as "true"/"false" (lowercase) instead of "True"/"False"(uppercase). This causes an unexpected behavior in my application. For example:</p>
<p><strong>vote.js</strong></p>
<pre><code>    ....
    var xhr = {
        'isUpvote': isUpvote
    };

    $.post(location.href, xhr, function(data) {
        doSomething()
    });

    return false;
});
</code></pre>
<p><strong>views.py</strong></p>
<pre><code>def post(self, request, *args, **kwargs):
    isUpvote = request.POST.get('isUpvote')
    vote, created = Vote.objects.get_or_create(user_voted=user_voted)

    vote.isUp = isUpvote
    vote.save()
</code></pre>
<p>when I save this vote and check my Django admin page, "isUpvote" is ALWAYS set to True whether true or false is passed from javascript. So what is the best way to convert javascript's "true/false" boolean value to Django's "True/False" value??? </p>
<p>Thanks!!</p>
<p><strong>ADDED:::::</strong></p>
<p>Well, I added some 'print' lines to check whether I was doing something wrong in my view:</p>
<pre><code>    print(vote.isUp)
    vote.isUp = isUpvote
    print(vote.isUp)

    vote.save()
</code></pre>
<p>The result:</p>
<pre><code>    True
    false    //lowercase
</code></pre>
<p>And then when I check my Django admin, it is saved as "True"!!!
So I guess this means lowercaes "false" is saved as Django "True" value for some weird reason....</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this.</p>
<pre><code>from django.utils import simplejson

def post(self, request, *args, **kwargs):
    isUpvote = simplejson.loads(request.POST.get('isUpvote'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>probably it could be better to have 'isUpvote' value as string 'true' or 'false' and use json to distinguish its boolean value</p>
<pre><code>import json

isUpvote = json.loads(request.POST.get('isUpvote', 'false')) # python boolean
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I came accross the same issue (true/false by Javascript - True/False needed by Python), but have fixed it using a small function:</p>
<pre><code>def convert_trueTrue_falseFalse(input):
    if input.lower() == 'false':
        return False
    elif input.lower() == 'true':
        return True
    else:
        raise ValueError("...")
</code></pre>
<p>It might be useful to someone.</p>
</div>
<div class="post-text" itemprop="text">
<p>I encounter the same problem and I solved the problem with more clear way.</p>
<h2>Problem:</h2>
<p>If I send below JSON to server, boolean fields come as test("true", "false") and I must be access to <code>catalogues</code> as <code>request.POST.getlist("catalogues[]")</code>. Also I can't make form validation easly.</p>
<pre><code>var data = {
   "name": "foo",
   "catalogues": [1,2,3],
   "is_active": false
}

$.post(url, data, doSomething);
</code></pre>
<p>Django request handler:</p>
<pre><code>def post(self, request, **kwargs):
    catalogues = request.POST.getlist('catalogues[]')  # this is not so good
    is_active = json.loads(request.POST.get('is_active')) # this is not too
</code></pre>
<h2>Solution</h2>
<p>I get rid of this problems by sending json data as <strong>string</strong> and converting data to back to json at server side. </p>
<pre><code>var reqData = JSON.stringify({"data": data}) // Converting to string
$.post(url, reqData, doSomething);
</code></pre>
<p>Django request handler:</p>
<pre><code>def post(self, request, **kwargs):
    data = json.loads(request.POST.get('data'))  # Load from string

    catalogues = data['catalogues'] 
    is_active = data['is_active']
</code></pre>
<p>Now I can made form validation and code is more clean :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Javascript way of converting to a Boolean is </p>
<pre>//Your variable is the one you want to convert
var myBool = Boolean(yourVariable); 
</pre>
<p>However in your above code you seem to be passing a string instead of the variable here</p>
<pre>
isUpvote = request.POST.get('isUpvote')
</pre>
<p>Are you sure you are doing it correctly ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Since Django 1.5 dropped support for Python 2.5, <em>django.utils.simplejson</em> is no longer part of Django as you can use Python's built in json instead, which has the same API:</p>
<pre><code>import json

def view_function(request):
    json_boolean_to_python_boolean = json.loads(request.POST.get('json_field'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With Python's <a href="https://docs.python.org/3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator" rel="nofollow noreferrer">ternary operator</a>:</p>
<pre><code>isUpvote = True if request.POST.get("isUpvote") == "true" else False
</code></pre>
<p>Also I should mention that if you are working with Django's forms and are trying to pass compatible Boolean value to the <code>Form</code> or <code>ModelForm</code> class via Ajax, you need to use the precise values Django is expecting.</p>
<p>Assuming <code>null=True</code> on your model:</p>
<ol>
<li>Unknown</li>
<li>Yes (True)</li>
<li>No (False)</li>
</ol>
<p>So for example, the following would deliver Boolean data to Django's form properly:</p>
<pre><code>&lt;input type="radio" id="radio1" name="response" value="2"&gt;
&lt;label for="radio1"&gt;Yes&lt;/label&gt;
&lt;input type="radio" id="radio2" name="response" value="3"&gt;
&lt;label for="radio2"&gt;No&lt;/label&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I usually convert JavaScript Boolean value into number.</p>
<pre><code>var xhr = {
    'isUpvote': Number(isUpvote)
};
</code></pre>
<p>In python:</p>
<pre><code>try:
  is_upvote = bool(int(request.POST.get('isUpvote', 0)))
except ValueError:
  // handle exception here
</code></pre>
</div>
<span class="comment-copy">Are you sure you are doing a correct request ? Check answer below</span>
<span class="comment-copy">There are only strings in url encoded form data, you could use json to  transport boolean data. Or you could check if <code>isUpvote</code> is the string <code>"true"</code>(or <code>"false"</code>) and set the appropriate value.</span>
<span class="comment-copy">@user2492270, if isUpvote is saved as a string (as opposed to a Boolean), I would think then that Python would treat it as "not empty" (hence True), even if the string was "false".</span>
<span class="comment-copy">In Django 1.5 and above you should use native Python module json instead, see my answer below.</span>
<span class="comment-copy">Thanks for the response!! I added some additional information to my question :( still haven't figured out what is wrong</span>
<span class="comment-copy">@user2492270 check these 2 lines <code>isUpvote = request.POST.get('isUpvote')</code> and <code>vote, created = Vote.objects.get_or_create(user_voted=user_voted)</code> . I think you are treating isUpvote as a string when sending the request. Im not sure if thats the way its done in django. Also rememeber that you are sending an object <code>xhr</code> in your request. Try looking online at how to access object properties. Thats as much I can do ... feel free to accept the answer if it helps.</span>
<span class="comment-copy">This isn't a bad answer, but it uses the <a href="https://docs.python.org/3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator" rel="nofollow noreferrer">ternary operator</a>, not a list comprehension.</span>
<span class="comment-copy">Woops! Good catch. I've updated the answer.</span>
