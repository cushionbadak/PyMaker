<div class="post-text" itemprop="text">
<pre><code>if &lt;boolean&gt; :
   # do this
</code></pre>
<p>boolean has to be either True or False.</p>
<p>then why </p>
<pre><code>if "poi":
   print "yes"
</code></pre>
<p>output:
yes</p>
<p>i didn't get why yes is printing , since "poi" is nether True or False.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python will do its best to evaluate the "truthiness" of an expression when a boolean value is needed from that expression.</p>
<p>The rule for strings is that an empty string is considered <code>False</code>, a non-empty string is considered <code>True</code>.  The same rule is imposed on other containers, so an empty dictionary or list is considered <code>False</code>, a dictionary or list with one or more entries is considered <code>True</code>.</p>
<p>The <code>None</code> object is also considered false.</p>
<p>A numerical value of <code>0</code> is considered false (although a string value of <code>'0'</code> is considered true).</p>
<p>All other expressions are considered <code>True</code>. </p>
<p>Details (including how user-defined types can specify truthiness) can be found here: <a href="http://docs.python.org/release/2.5.2/lib/truth.html" rel="noreferrer">http://docs.python.org/release/2.5.2/lib/truth.html</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>In python, any string except an empty string defaults to <code>True</code></p>
<p>ie,</p>
<pre><code>if "MyString":
    # this will print foo
    print("foo")

if "":
    # this will NOT print foo
    print("foo")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What is happening here is Python' supplement of <strong>implicit <code>bool()</code> constructor</strong> after the <code>if</code>, Because anything followed by <code>if</code> should be resolved to be boolean. In this context your code is equivalent to</p>
<pre><code>if bool("hello"):
   print "yes"
</code></pre>
<p>According to Python <code>bool(x)</code> constructor accepts anything and decides the truthiness based on below cases</p>
<ul>
<li>If x is integer, Only <code>0</code> is <code>False</code> everything else is <code>True</code></li>
<li>If x is float, Only <code>0.0</code> is <code>False</code> everything else is True`</li>
<li>If x is list, Only <code>[]</code> is <code>False</code> everything else is <code>True</code></li>
<li>If x is set/dict, Only <code>{}</code> is <code>False</code> everything else is <code>True</code></li>
<li>If x is tuple, Only <code>()</code> is <code>False</code> everything else is <code>True</code></li>
<li>If x is string, Only <code>“"</code> is <code>False</code> everything else is <code>True</code>. Be aware that <code>bool(“False”)</code> will return to <code>True</code></li>
</ul>
<p>Here is the log for the cases I listed above</p>
<pre><code>Python 3.4.3 (default, Feb 25 2015, 21:28:45) 
[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.56)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; bool(0)
False
&gt;&gt;&gt; bool(1)
True
&gt;&gt;&gt; bool(-1)
True
&gt;&gt;&gt; bool(0.0)
False
&gt;&gt;&gt; bool(0.02)
True
&gt;&gt;&gt; bool(-0.10)
True
&gt;&gt;&gt; bool([])
False
&gt;&gt;&gt; bool([1,2])
True
&gt;&gt;&gt; bool(())
False
&gt;&gt;&gt; bool(("Hello","World"))
True
&gt;&gt;&gt; bool({})
False
&gt;&gt;&gt; bool({1,2,3})
True
&gt;&gt;&gt; bool({1:"One", 2:"Two"})
True
&gt;&gt;&gt; bool("")
False
&gt;&gt;&gt; bool("Hello")
True
&gt;&gt;&gt; bool("False")
True
</code></pre>
</div>
<span class="comment-copy">+1 for linking the docs</span>
<span class="comment-copy">I believe Python will always test __len__() of any class that has one, and consider a result of 0 to mean the object evaluates to <code>false</code> in a boolean context.  This is pretty close to the same thing as imposing the same rule even on user-defined classes (you'd have to deliberately return some non-intuitive value from your __len__() method, or leave it out entirely, to avoid following the same rule as built-ins).</span>
<span class="comment-copy">For anyone reading the above answer : make sure you actually read the doc (either the above link or here : <a href="http://docs.python.org/2/reference/datamodel.html#object.__nonzero__" rel="nofollow noreferrer">docs.python.org/2/reference/datamodel.html#object.__nonzero__</a>)</span>
<span class="comment-copy">Equivalent documentation for Python 3: <a href="http://docs.python.org/3/reference/datamodel.html#object.__bool__" rel="nofollow noreferrer">docs.python.org/3/reference/datamodel.html#object.__bool__</a></span>
<span class="comment-copy">Just in case anyone is confused by something like <code>'a' or 'b'</code> returning <code>'a'</code> instead of <code>True</code>, note that <code>and</code> and <code>or</code> are "short circuit operators", and "When used as a general value and not as a Boolean, the return value of a short-circuit operator is the last evaluated argument."  Since <code>'a'</code> evaluates as <code>True</code>, the whole expression must be true, and so the truth value of <code>'b'</code> is not even evaluated.  <a href="https://docs.python.org/3.6/tutorial/datastructures.html#more-on-conditions" rel="nofollow noreferrer">docs.python.org/3.6/tutorial/…</a></span>
<span class="comment-copy">same is true for list and other data types, isn't it ?</span>
<span class="comment-copy">"defaults to <code>True</code>" is not really correct. How about "evaluates to <code>True</code> in a Boolean context"?</span>
<span class="comment-copy">naveen yadav, yes, it is true for all built-in collection types. Empty collections are False, non-empty collections are True. A string is a sequence, which is a type of collection.</span>
