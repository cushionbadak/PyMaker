<div class="post-text" itemprop="text">
<p>I have e database as normal txt named DB.TXT ( delimiter Tab is applied only the numbers),like this:</p>
<pre><code>Date        Id  I   II  III IV  V
17-jan-13   aa  47  56  7   74  58
18-jan-13   ab  86  2   30  40  75
19-jan-13   ac  72  64  41  81  80
20-jan-13   ad  51  26  43  61  32
21-jan-13   ae  31  62  32  25  75
22-jan-13   af  60  83  18  35  5
23-jan-13   ag  29  8   47  12  69
</code></pre>
<p>I would like to know the code in Python for skip first line (Date, I, II, III, IV, V) and the first two columns ( Date and Id), while reading a text file. (With numbers residues should do sums and multiplications etc.)</p>
<p>After reading the txt file, it will appear like this:</p>
<p>47  56  7   74  58</p>
<p>86  2   30  40  75</p>
<p>72  64  41  81  80</p>
<p>51  26  43  61  32</p>
<p>31  62  32  25  75</p>
<p>60  83  18  35  5</p>
<p>29  8   47  12  69</p>
<p>The file is format txt, not CSV.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are only going to do calculations on the rows, you can simply do:</p>
<pre><code>with open("data.txt") as fh:
    fh.next()
    for line in fh:
        line = line.split()  # This split works equally well for tabs and other spaces
        do_something(line[2:])
</code></pre>
<p>If your needs are more complex, you're better off using a library like Pandas, which can take care of headers and label columns, as well as regex delimiters, and gives you easy access to columns:</p>
<pre><code>import pandas
data = pandas.read_csv("blah.txt", sep="\s+", index_col=[0,1])
data.values   # array of values as requested
data.sum()    # sum of each column
data.product(axis=1)    # product of each row
etc... 
</code></pre>
<p><code>sep</code> is a regex since you said it's not always <code>\t</code>, and <code>index_col</code> makes the first two columns column labels.</p>
</div>
<div class="post-text" itemprop="text">
<p>"the code in python" is pretty broad.  Using numpy, it's:</p>
<pre><code>In [21]: np.genfromtxt('db.txt',dtype=None,skip_header=1,usecols=range(2,6))
Out[21]: 
array([[47, 56,  7, 74],
       [86,  2, 30, 40],
       [72, 64, 41, 81],
       [51, 26, 43, 61],
       [31, 62, 32, 25],
       [60, 83, 18, 35],
       [29,  8, 47, 12]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using the <a href="http://docs.python.org/3/library/csv.html" rel="nofollow">csv module</a>, to skip the first line, just advance the file iterator by calling <code>next(f)</code>. To skip the first two rows you could use <code>row = row[2:]</code>:</p>
<pre><code>import csv
with open(filename, 'rb') as f:
    next(f)   # skip the first line
    for row in csv.reader(f, delimiter='\t'):
        row = row[2:]        # skip the first two columns
        row = map(int, row)  # map the strings to ints
</code></pre>
</div>
<span class="comment-copy">You have a tab-separated values file; a form of CSV.</span>
<span class="comment-copy">I have used this code:  import csv  def function(x,y,z,w,t):      return (x-y)  filename=("DB.txt")  with open(filename,'r') as f:       next(f)       for row in csv.reader(f,delimiter='\t'):           row = row[2:]           for line in f:               numbers_str = line.split()               numbers_int = [int(x) for x in numbers_str]               print   function(numbers_int[0],numbers_int[1],numbers_int[2],numbers_int[3]  ,numbers_int[4]))  Error= invalid literal for int() with base 10: '17-Jan-13'</span>
<span class="comment-copy">Print out <code>row</code>. You will see it is a list of items. It is essentially <code>numbers_str</code>. Don't use <code>for line in </code>f` -- the <code>csv.reader</code> is iterating through <code>f</code> for you already.</span>
<span class="comment-copy">Thanks, very much: It works.  The code for those who need is  (Sorry for the formatting):  import csv  def function(x,y,z,w,t):     return (x+y+z+w+t)  filename=('DB.TXT') with open(filename, 'r') as f:           next(f)           for row in csv.reader(f,delimiter='\t'):              row = row[2:]              numbers_int = [int(x) for x in row]              print (function(numbers_int[0],numbers_int[1],numbers_int[2],numbers_int[3],numbers_int[4]))</span>
