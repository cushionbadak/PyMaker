<div class="post-text" itemprop="text">
<p>Note: Python version is 2.7</p>
<h2>Problem</h2>
<p><strong>I want</strong> to have {hierarchy of descriptor classes} integrated within {hierarchy of widget classes}, and overriding descriptor behaviour must be as easy as defining nested derived class. Example:</p>
<pre><code>class A(object):
    class width(Attribute):
        def changed(self, obj, value, old):
            print 'A.width changed:', value

class B(A):
    class width(A.width):
        def changed(self, obj, value, old):
            super(B.width, self).changed(obj, value, old)
            print 'B.width changed:', value

B().width = 10
# must print:
#     A.width.changed: 10
#     B.width.changed: 10
</code></pre>
<p>Here is my custom descriptor class:</p>
<pre><code>class Attribute(object):

    def __init__(self):
        if not hasattr(self, '_name'):
            self._name = self.__class__.__name__

    def __get__(self, obj, cls):
        if obj is None:
            print 'Attribute getter (class):', cls
            return self

        print 'Attribute getter (class, inst):', (cls, obj)
        print 'Attribute getter returning:', self.get(obj)
        return self.get(obj)

    def __set__(self, obj, value):
        print 'Attribute setter (inst, value):', (obj, value)
        self.set(obj, value)

    def get(self, obj):
        try:
            return obj.__dict__[self._name]
        except KeyError:
            raise AttributeError("attribute '%s' referenced before assigment" % (self._name))

    def set(self, obj, value):
        try:
            old = obj.__dict__[self._name]
        except KeyError:
            obj.__dict__[self._name] = value
            self.changed(obj, value, None)
        else:
            obj.__dict__[self._name] = value
            if old != value:
                self.changed(obj, value, old)

    def changed(self, obj, value, old):
        pass
</code></pre>
<p><strong>Problem is</strong> that Python don't want to use <code>__get__</code> and <code>__set__</code>, while they are attributes of class. It may be seen from this test:</p>
<pre><code># `A` and `B` were defined above
A.width_ = A.width()
B.width_ = B.width()

to_test = (
    # good:
    'Aw_ = A.width_',
    'Bw_ = B.width_',
    'B().width_ = 10',
    # silent:
    'Aw = A.width',
    'Bw = B.width',
    'B().width = 10',
)

for expr in to_test:
    print "Testing:", expr
    exec expr
</code></pre>
<p>So, my <code>Attribute</code> works only when instantiated.</p>
<h2>What I have tried already</h2>
<ul>
<li><p>Decorating <code>__get__</code> and <code>__set__</code> with either <code>staticmethod</code> or <code>classmethod</code>. No changes in silent section. Good section fails: methods aren't callable. Wat.</p></li>
<li><p>Adding <code>__get__</code> and <code>__set__</code> to class <code>Attribute</code> from outside, as methods bound to <code>Attribute</code>. Nothing changed.</p></li>
</ul>
<p>Code:</p>
<pre><code># `__get__` was renamed to `_unbound__get__`
Attribute.__get__ = Attribute._unbound__get__.__get__(Attribute, Attribute.__class__)
# `__set__` was renamed to `_unbound__set__`
Attribute.__set__ = Attribute._unbound__set__.__get__(Attribute, Attribute.__class__)
</code></pre>
<ul>
<li>Using instantiated descriptors. This approach requires 2 symbols: one for descriptor (sub)class and one for descriptor. It also requires instantiating descriptor after subclassing it.</li>
</ul>
<p>Code:</p>
<pre><code>class B(A):
    class Width(A.width):
        def changed(self, obj, value, old):
            super(B.width, self).changed(obj, value, old)
            print 'B.width.changed:', value
B.width = B.Width()
</code></pre>
<h2>More background.</h2>
<p>I have growing hierarchy of widgets, where some propertries must be tracked for changes, and response to change may be extended in subclassses. So I am trying to create automated approach, with modular machinery. Because keeping relevant variables and methods per each propertry inside actual widgets is just horrible annoying mess.</p>
<h2>Question</h2>
<p>Are there workarounds to achieve my needs? Or may be I am doing something wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>Descriptors <em>require</em> instances, so you <em>cannot</em> achieve exactly what you want. In particular you want <code>A.width</code> to be, <em>at the same time</em>, both a class and an instance of that class, which is impossible. You <strong>must</strong> have a way to access the class and the instance separately.</p>
<p>It's pretty simple to automatically create the instances with a known naming scheme. For example using a class decorator:</p>
<pre><code>def track_attributes(cls):
    for attr in dir(cls):
        value = getattr(cls, attr)
        if isinstance(value, type) and issubclass(value, Attribute):
            # probably require more checks and/or different naming scheme
            setattr(cls, attr.lower(), value())
    return cls
</code></pre>
<p>Used as:</p>
<pre><code>@track_attributes
class A(object):
    class Width(Attribute):
        def changed(self, obj, value, old):
            print 'A.width changed:', value

@track_attributes
class B(A):
    class Width(A.Width):
        def changed(self, obj, value, old):
            super(B.Width, self).changed(obj, value, old)
            print 'B.width changed:', value
B().width = 10
</code></pre>
<p>output:</p>
<pre><code>$python test_attributes.py 
Attribute getter (class): &lt;class '__main__.B'&gt;
Attribute setter (inst, value): (&lt;__main__.B object at 0x7fc225cd7d50&gt;, 10)
A.width changed: 10
B.width changed: 10
</code></pre>
<p>An other way to achieve this without explicit decorators is to create a metaclass and have a <code>Widget</code> base class for all widgets.</p>
</div>
<div class="post-text" itemprop="text">
<p>As mata says, descriptors needs to be instances. One possible solution would be to use a class decorator or a custom metaclass (in your case more probably a custom metaclass) that would lookup the class namespace for <code>Attribute</code> subclasses and instanciate them. The whole thing smells a bit like overengineering to me but sometimes well you just need that level of complexity. </p>
</div>
<span class="comment-copy">Have you looked at how existing frameworks have addressed the design of this (and considered adopting their approaches?) eg: QT / WxWindows, in terms of events/attributes and inheritance models? Or, is this a "I want to do it this way - how can I make this way happen if it's possible?"</span>
<span class="comment-copy">Descripors need to be instantiated. Where's the problem in using an instance? Read <a href="http://docs.python.org/3/reference/datamodel.html?highlight=data%20model#invoking-descriptors" rel="nofollow noreferrer">how descriptors work</a></span>
<span class="comment-copy">@mata Because using instances involves 2 names: one for descriptor subclass and one for descriptor instance.</span>
<span class="comment-copy">I believe what you cannot achieve what you want. Basically you want <code>width</code> to be, at the same time, both a class and an instance. You cannot allow both <code>class width(A.width)</code> <i>and</i> doing <code>A().width = 10</code>. Choose one. The best you can achieve is automatically convert names(e.g. you create the <code>Width</code> class and then use <code>A().width = 10</code>.</span>
