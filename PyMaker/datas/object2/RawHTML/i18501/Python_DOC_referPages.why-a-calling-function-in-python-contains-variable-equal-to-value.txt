<div class="post-text" itemprop="text">
<p>I have started to learn python, and I would like to ask you about something which I considered a little magic in this language.</p>
<p>I would like to note that before learning python I worked with PHP and there I haven't noticed that.</p>
<p>What's going on - I have noticed that some call constructors or methods in Python are in this form. </p>
<pre><code>object.call(variable1 = value1, variable2 = value2)
</code></pre>
<p>For example, in FLask:</p>
<pre><code>app.run(debug=True, threaded=True)
</code></pre>
<p>Is any reason for this convention? Or is there some semantical reason outgoing from the language fundamentals? I haven't seen something like that in PHP as often as in Python and because I'm really surprised. I'm really curious if there is some magic or it's only convention to read code easier. </p>
</div>
<div class="post-text" itemprop="text">
<p>These are called <a href="http://docs.python.org/2/tutorial/controlflow.html#keyword-arguments">keyword arguments</a>, and they're usually used to make the call more readable. </p>
<p>They can also be used to pass the arguments in a different order from the declared parameters, or to skip over some default parameters but pass arguments to others, or because the function requires keyword arguments… but readability is the core reason for their existence.</p>
<p>Consider this:</p>
<pre><code>app.run(True, False)
</code></pre>
<p>Do you have any idea what those two arguments mean? Even if you can guess that the only two reasonable arguments are threading and debugging flags, how can you guess which one comes first? The only way you can do it is to figure out what type <code>app</code> is, and check the <code>app.run</code> method's docstring or definition.</p>
<p>But here:</p>
<pre><code>app.run(debug=True, threaded=False)
</code></pre>
<p>It's obvious what it means.</p>
<hr/>
<p>It's worth reading the FAQ <a href="http://docs.python.org/3/faq/programming.html#faq-argument-vs-parameter">What is the difference between arguments and parameters?</a>, and the other tutorial sections near the one linked above. Then you can read the reference on <a href="http://docs.python.org/3/reference/compound_stmts.html#function-definitions">Function definitions</a> for full details on parameters and <a href="http://docs.python.org/3/reference/expressions.html#calls">Calls</a> for full details on arguments, and finally the <a href="http://docs.python.org/3.3/library/inspect.html#inspect.Parameter"><code>inspect</code></a> module documentation on kinds of parameters.</p>
<p><a href="http://stupidpythonideas.blogspot.com/2013/08/arguments-and-parameters.html">This blog post</a> attempts to summarize everything in those references so you don't have to read your way through the whole mess. The examples at the end should also serve to show why mixing up arguments and parameters in general, keyword arguments and default parameters, argument unpacking and variable parameters, etc. will lead you astray.</p>
</div>
<div class="post-text" itemprop="text">
<p>Specifying arguments by keyword often creates less risk of error than specifying arguments solely by position. Consider this function to compute loan payments:</p>
<pre><code>def pmt(principal, interest, term):
    return **something**;
</code></pre>
<p>When one tries to compute the amortization of their house purchase, it might be invoked thus:</p>
<pre><code>payment = pmt(100000, 4.2, 360)
</code></pre>
<p>But it is difficult to see which of those values should be associated with which parameter. Without checking the documentation,  we might think it should have been:</p>
<pre><code>payment = pmt(360, 4.2, 100000)
</code></pre>
<p>Using keyword parameters, the call becomes self-documenting:</p>
<pre><code>payment = pmt(principal=100000, interest=4.2, term=360)
</code></pre>
<p>Additionally, keyword parameters allow you to change the order of the parameters at the call site, and everything still works correctly:</p>
<pre><code># Equivalent to previous example
payment = pmt(term=360, interest=4.2, principal=100000)
</code></pre>
<p>See <a href="http://docs.python.org/2/tutorial/controlflow.html#keyword-arguments" rel="nofollow">http://docs.python.org/2/tutorial/controlflow.html#keyword-arguments</a> for more information.</p>
</div>
<div class="post-text" itemprop="text">
<p>They are arguments passed by keywords. There is no semantical difference between <a href="http://docs.python.org/2/tutorial/controlflow.html#keyword-arguments" rel="nofollow">keyword arguments</a> and positional arguments.</p>
<p>They are often used like "options", and provide a much more readable syntax for this circumstance. Think of this:</p>
<pre><code>&gt;&gt;&gt; sorted([2,-1,3], key=lambda x: x**2, reverse=True)
[3, 2, -1]
</code></pre>
<p>Versus(python2):</p>
<pre><code>&gt;&gt;&gt; sorted([2,-1,3], None, lambda x: x**2, True)
[3, 2, -1]
</code></pre>
<p>In this second example can you tell what's the meaning of <code>None</code> or <code>True</code>?</p>
<p>Note that in keyword <em>only</em> arguments, i.e. arguments that you can <em>only</em> specify using this syntax, were introduced in python3. In python2 any argument can be specified by position(except when using <code>**kwargs</code> but that's another issue).</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no "magic".</p>
<p>A function can take:</p>
<ul>
<li><strong>Positional arguments</strong> (args)</li>
<li><strong>Keyworded arguments</strong> (kwargs)</li>
</ul>
<p><strong>Always is this order</strong>.</p>
<p>Try this:</p>
<pre><code>def foo(*args, **kwargs):
    print args
    print kwargs

foo(1,2,3,4,a=8,b=12)
</code></pre>
<p>Output:</p>
<pre><code>(1, 2, 3, 4)
{'a': 8, 'b': 12}
</code></pre>
<p>Python stores the positional arguments in a tuple, which has to be immutable, and the keyworded ones in a dictionary.</p>
</div>
<div class="post-text" itemprop="text">
<p>The main utility of the convention is that it allows for setting certain inputs when there may be some defaults in between. It's particularly useful when a function has many parameters, most of which work fine with their defaults, but a few need to be set to other values for the function to work as desired.</p>
<p>example:</p>
<pre><code>def foo(i1, i2=1, i3=3, i4=5):
   # does something


foo(1,2,3,4)

foo(1,2,i4=3)

foo(1,i2=3)

foo(0,i3=1,i2=3,i4=5)
</code></pre>
</div>
<span class="comment-copy"><a href="http://docs.python.org/2/tutorial/controlflow.html#keyword-arguments" rel="nofollow noreferrer">docs.python.org/2/tutorial/controlflow.html#keyword-arguments</a> explains it all fairly well.</span>
<span class="comment-copy">I had the exact opposite experience a few years ago, coming to PHP from Python and being confused when <code>f($a=true)</code> was accepted, but didn't do what I thought it did.</span>
<span class="comment-copy">It's worth pointing out that a function can accept keyword arguments that aren't explicitly defined via the <code>**kwargs</code> argument.</span>
<span class="comment-copy">@chepner: Well, maybe, but only if you also explain about keyword parameters, and about the *args parameter, and about passing variable arguments and keyword dicts, which makes things a lot more complicated. It's worth understanding the basics first, and then reading the rest of the tutorial…</span>
<span class="comment-copy">@chepner: I've tried to add sufficient links that someone can actually find the information they need to get to the point where <code>**kwargs</code> makes sense, and then learn exactly how it works. But probably there's a better way to include that information. Any suggestions?</span>
<span class="comment-copy">Misses out default values.</span>
<span class="comment-copy">@SteveBarnes - Precisely. I wrote this response because others were focused on default values ... which the OP never asked about.</span>
<span class="comment-copy">The last part of this is misleading. Keyword-only <i>parameters</i> were introduced in Python 3; there's no such thing as keyword-only arguments. But everything other than the final note is correct, and nicely explained.</span>
<span class="comment-copy">@abarnert I use the words <i>argument</i> and <i>parameter</i> as synonyms. I don't see why they should be distinguished. I have always lived with this ambiguity and it doesn't give any particular problem. In fact, the last paragraph <b>clearly</b> refers to what you call <i>parameters</i> since otherwise the sentence <i>"arguments that you can only specify using this syntax,"</i> does't have any meaning, hence there is no ambiguity.</span>
<span class="comment-copy">Python explicitly distinguishes the two terms. The Python FAQ has <a href="http://docs.python.org/3/faq/programming.html#faq-argument-vs-parameter" rel="nofollow noreferrer">an entry</a> that explains why. More generally, every language has such a distinction… but some of them use different terminology (like "actual parameter" vs. "formal parameter"). The fact that you can sometimes get away with mixing them up doesn't mean you should; it means you should be extra careful not to, because that will lead you astray when you deal with cases where you can't get away with it—and will often lead your readers astray even when you can.</span>
<span class="comment-copy">Python only stores positional arguments whose index doesn't match a keyword-or-positional parameter (or a positional-only parameter, but you don't have those in functions defined in Python) in the var-positional sequence, and it only stores keyword arguments whose name doesn't match a keyword-or-positional or keyword-only parameter in the var-keyword mapping. Since the OP is asking about a function that has two keyword-or-positional parameters, this isn't relevant here. No such dict is constructed or passed anywhere.</span>
<span class="comment-copy">I agree, but can't an answer try to show some additional things not already explained by other answers?</span>
<span class="comment-copy">Sure, an answer can be useful even though it's a digression… but a misleading answer doesn't become useful just because it's a digression.</span>
<span class="comment-copy">Setting default values when <i>defining</i> the function is a somewhat separate issue from using keyword arguments when <i>calling</i> the function.</span>
<span class="comment-copy">I don't think so.  If you are bypassing an input via keywords, then the bypassed inputs need/should have default values, no?</span>
<span class="comment-copy">@Jim: No. Read the FAQ <a href="http://docs.python.org/3/faq/programming.html#what-is-the-difference-between-arguments-and-parameters" rel="nofollow noreferrer">What is the difference between arguments and parameters</a>, and then look at how they're defined. You can pass keyword arguments for parameters that have no defaults. For example, <code>def f(a, b): pass</code>, then <code>f(b=1, a=2)</code> works just fine.</span>
<span class="comment-copy">@Jim Defaults have <i>nothing</i> to do with being keyword arguments. For example <code>def f(*, a): print(a)</code> is a function with a keyword argument without a default value(python3). You can also see a side effect of this when you use unpacking of positional arguments mixed with keyword arguments in python2.</span>
<span class="comment-copy">My point was that you can make use of default values without calling the function using keyword arguments, and you can use keyword arguments with a function that does not specify default parameter values.</span>
