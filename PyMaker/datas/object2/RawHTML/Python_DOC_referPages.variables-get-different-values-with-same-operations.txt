<div class="post-text" itemprop="text">
<p>This is a basic understanding problem.</p>
<p>I tried reordering some code, and though the operations are supposedly equivalent I get different values.
I started with this line:</p>
<pre><code>q, r, m = 10*q, 10*(r-m*t), (10*(3*q+r))//t - 10*m
</code></pre>
<p>and changed it to:</p>
<pre><code>q*=10;  r=10*(r-m*t);   m= (10*(3*q+r))//t - 10*m;
</code></pre>
<p>(With initial values being q= 1, r= 6, t= 3, m= 3).</p>
<p>When I run only the second line, m gets value -30 (which is accurate if I followed the order-of-operations correctly), while running the first yields m= 0, which is what the program calls for.</p>
<p>What am I missing here? Does the comma method assign the value after all other assignments are done?</p>
</div>
<div class="post-text" itemprop="text">
<p>The issue is that your first snippet of code evaluates each expression on the right before assigning the results to your <code>q</code>, <code>r</code>, and <code>m</code> variables. Your second snippet instead assigns:</p>
<pre><code>q*=10
r=10*(r-m*t)
</code></pre>
<p>-before evaluating:</p>
<pre><code>m= (10*(3*q+r))//t - 10*m
</code></pre>
<p>which changes the result. If you must use the latter snippet, you'll need to introduce a temporary variable to store the original <code>q</code> and <code>r</code> variable values for usage in the final expression.</p>
<p>In fact, since <code>q</code> does not depend on either of the other variables, you could in fact assign its value last, keeping the other two in tract, to slightly simplify the expression:</p>
<pre><code>r, m = 10*(r-m*t), (10*(3*q+r))//t - 10*m
q *= 10
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The assignments in <code>q, r, m = 10*q, 10*(r-m*t), (10*(3*q+r))//t - 10*m</code> are done independently by evaluating the right hand side of all the assignments without anyone affecting the others, meaning that when <code>(10*(3*q+r))//t - 10*m</code> is evaluated, the old value of <code>q</code> is used, not the new <code>10*q</code> (same with <code>r</code>). Notice that the only difference is in the value of <code>m</code>, which depends on the values of <code>r</code> and <code>q</code>, which aren't changing while <code>m</code> is being assigned.</p>
</div>
<div class="post-text" itemprop="text">
<p>In the first case, all the assignments use the values of the variables <em>before</em> any assignments are done.</p>
<p>In the second case, you're changing some variables before others (your later assignments are using the new values of the variables).</p>
<p>Compare <code>a, b = b, a</code> with <code>a = b; b = a</code>. This first will swap the values, the second will not.</p>
</div>
<span class="comment-copy">When using <code>x, y = foo, bar</code> syntax, all statements are executed before assigning the values to the variables. When using <code>x=foo; y=bar</code>, they are not.</span>
<span class="comment-copy">So it was that simple.. I guess it is better in every way for the code ðŸ˜…</span>
<span class="comment-copy">Note that you can safely extract the <code>q</code> assignment. See my answer for details</span>
