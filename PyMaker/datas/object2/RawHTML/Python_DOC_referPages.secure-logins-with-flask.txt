<div class="post-text" itemprop="text">
<p>I am developing a flask app that requires user logins. There are two users currently, one is admin and the other is normal. At the moment, I am using sessions to store the username of the user in then I check to see which username they have and then allow or disallow them access to pages based on their username. </p>
<p>Here is my code:</p>
<pre><code>from flask import Flask, session, redirect, render_template, request


app = Flask(__name__)
app.config["SECRET_KEY"] = &lt;byte string generated by os.urandom(24)&gt;
app.config["PERMANENT_SESSION_LIFETIME"] = timedelta(hours=1)


@app.route("/")
def login_redirect():
    if check_login(session, False):
        return redirect("/interface")
    return redirect("/login")


@app.route("/login", methods=["POST", "GET"])
def login():
    error = ""
    if request.method == "POST":
        username = request.form["username"]
        password = request.form["password"]
        if check_password(username, password):
            session["username"] = request.form["username"]
            return redirect("/register")
        error = "Invalid username or password"
    return render_template("login.html", theme_colour=theme_colour, error=error)


def check_password(username, password):
    ph = PasswordHasher()
    db_hash, salt = database.retrieve_pw_salt(username)  # returns hashed/salted password and salt from database
    if db_hash is None:
        return False  # invalid username
    try:
        ph.verify(db_hash, salt + password)
        return True  # valid username and password
    except exceptions.VerifyMismatchError:
        return False  # invalid password


def check_login(session, requires_elevated):
    if "username" not in session:
        return False
    elif session["username"] == "admin":
        return True
    elif session["username"] == "normal" and not requires_elevated:
        return True
    return False


@app.before_request
def setup():
    session.permanent = True  # will now abide by 1 hour timeout setting
</code></pre>
<p>However, it has recently come to my attention that this may not be very secure. To be honest I'm not really so sure myself, so I was wondering if someone would be able to explain any vulnerabilities to me if there are any, and how I might go about improving the security.</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using session data to authorize permissions isn't considered secure because sessions can be hijacked by stealing session cookies, which would then give the attacker undue influence over a given users account. Since you are using Flask, I suggest you use Flask-Login to manage your sessions. This will give you access to differentiating between fresh and non-fresh logins so that sensitive information can't be accessed and manipulated by a simple session hijacking. </p>
<p>You might also consider implementing third-party authentication through Google, Facebook, LinkedIn or some other major provider so that you can partially outsource some of the heavy lifting associated with providing password and username storage. Two-factor authentication is another way you can improve security on your app, sending texts with unique codes for individuals to log in with or some other second factor. I've linked out to the docs for flask-login at the bottom.</p>
<p>Note: I'd give you code samples, but you've asked an extremely general question about how one might improve security from session-based authorization. I suggest you check out these docs, try to write a better solution for your app's security and then if you have any issues, post another, more specific question about errors in logic or syntax you receive. Good luck!</p>
<p><a href="https://flask-login.readthedocs.io/en/latest/" rel="nofollow noreferrer">https://flask-login.readthedocs.io/en/latest/</a></p>
</div>
<span class="comment-copy">Thanks for your reply. I looked into Flask-Login but I could not figure it out for the life of me. The docs and the tutorials really don't explain much and I could not work out how to get it to even vaguely work with MYSQL. They all talk about this user object that is being stored in SQLAlchemy but none of them explained what it actually is, so I figured I wouldn't waste my time on such a package. Perhaps I was wrong but it was just very unclear.</span>
<span class="comment-copy">Oh I see. Well, the user object would just be an instance of a user class. Here's a decent tutorial on creating user databases - the link is to the database section. Going to the next article in the tutorial covers user logins and security. These would certainly help you get started with the functions in flask's security features.  <a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iv-database" rel="nofollow noreferrer">blog.miguelgrinberg.com/post/â€¦</a></span>
