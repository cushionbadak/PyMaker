<div class="post-text" itemprop="text">
<p>I would like to read data from the keyboard in python</p>
<p>I try this:</p>
<pre><code>nb = input('Choose a number')
print ('Number%s \n' % (nb))
</code></pre>
<p>But it doesn't work, neither with eclipse nor in the terminal, it's always stop of the question. I can type a number but after nothing happen.</p>
<p>Do you know why?</p>
</div>
<div class="post-text" itemprop="text">
<p>try </p>
<pre><code>raw_input('Enter your input:')  # If you use Python 2
input('Enter your input:')      # If you use Python 3
</code></pre>
<p>and if you want to have a numeric value 
just convert it: </p>
<pre><code>try:
    mode=int(raw_input('Input:'))
except ValueError:
    print "Not a number"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It seems that you are mixing different Pythons here (Python 2.x vs. Python 3.x)...
This is basically correct:</p>
<pre><code>nb = input('Choose a number: ')
</code></pre>
<p>The problem is that it is only supported in Python 3. As @sharpner answered, for older versions of Python (2.x), you have to use the function <code>raw_input</code>:</p>
<pre><code>nb = raw_input('Choose a number: ')
</code></pre>
<p>If you want to convert that to a number, then you should try:</p>
<pre><code>number = int(nb)
</code></pre>
<p>... though you need to take into account that this can raise an exception:</p>
<pre><code>try:
    number = int(nb)
except ValueError:
    print("Invalid number")
</code></pre>
<p>And if you want to print the number using formatting, in Python 3 <code>str.format()</code> is recommended:</p>
<pre><code>print("Number: {0}\n".format(number))
</code></pre>
<p>Instead of:</p>
<pre><code>print('Number %s \n' % (nb))
</code></pre>
<p>But both options (<code>str.format()</code> and <code>%</code>) do work in both Python 2.7 and Python 3.</p>
</div>
<div class="post-text" itemprop="text">
<h1>Non-blocking, multi-threaded example:</h1>
<p>As blocking on keyboard input (since the <code>input()</code> function blocks) is frequently <em>not</em> what we want to do (we'd frequently like to keep doing other stuff), here's a <strong>very-stripped-down multi-threaded example</strong> to demonstrate <strong>how to keep running your main application while still reading in keyboard inputs whenever they arrive</strong>.</p>
<p>This works by creating one thread to run in the background, continually calling <code>input()</code> and then passing any data it receives to a queue. </p>
<p>In this way, your main thread is left to do anything it wants, receiving the keyboard input data from the first thread whenever there is something in the queue. </p>
<h2>1. Bare Python 3 code example (no comments):</h2>
<pre><code>import threading
import queue
import time

def read_kbd_input(inputQueue):
    print('Ready for keyboard input:')
    while (True):
        input_str = input()
        inputQueue.put(input_str)

def main():
    EXIT_COMMAND = "exit"
    inputQueue = queue.Queue()

    inputThread = threading.Thread(target=read_kbd_input, args=(inputQueue,), daemon=True)
    inputThread.start()

    while (True):
        if (inputQueue.qsize() &gt; 0):
            input_str = inputQueue.get()
            print("input_str = {}".format(input_str))

            if (input_str == EXIT_COMMAND):
                print("Exiting serial terminal.")
                break

            # Insert your code here to do whatever you want with the input_str.

        # The rest of your program goes here.

        time.sleep(0.01) 
    print("End.")

if (__name__ == '__main__'): 
    main()
</code></pre>
<h2>2. Same Python 3 code as above, but with extensive explanatory comments:</h2>
<pre><code>"""
read_keyboard_input.py

Gabriel Staples
www.ElectricRCAircraftGuy.com
14 Nov. 2018

References:
- https://pyserial.readthedocs.io/en/latest/pyserial_api.html
- *****https://www.tutorialspoint.com/python/python_multithreading.htm
- *****https://en.wikibooks.org/wiki/Python_Programming/Threading
- https://stackoverflow.com/questions/1607612/python-how-do-i-make-a-subclass-from-a-superclass
- https://docs.python.org/3/library/queue.html
- https://docs.python.org/3.7/library/threading.html

To install PySerial: `sudo python3 -m pip install pyserial`

To run this program: `python3 this_filename.py`

"""

import threading
import queue
import time

def read_kbd_input(inputQueue):
    print('Ready for keyboard input:')
    while (True):
        # Receive keyboard input from user.
        input_str = input()

        # Enqueue this input string.
        # Note: Lock not required here since we are only calling a single Queue method, not a sequence of them 
        # which would otherwise need to be treated as one atomic operation.
        inputQueue.put(input_str)

def main():

    EXIT_COMMAND = "exit" # Command to exit this program

    # The following threading lock is required only if you need to enforce atomic access to a chunk of multiple queue
    # method calls in a row.  Use this if you have such a need, as follows:
    # 1. Pass queueLock as an input parameter to whichever function requires it.
    # 2. Call queueLock.acquire() to obtain the lock.
    # 3. Do your series of queue calls which need to be treated as one big atomic operation, such as calling
    # inputQueue.qsize(), followed by inputQueue.put(), for example.
    # 4. Call queueLock.release() to release the lock.
    # queueLock = threading.Lock() 

    #Keyboard input queue to pass data from the thread reading the keyboard inputs to the main thread.
    inputQueue = queue.Queue()

    # Create &amp; start a thread to read keyboard inputs.
    # Set daemon to True to auto-kill this thread when all other non-daemonic threads are exited. This is desired since
    # this thread has no cleanup to do, which would otherwise require a more graceful approach to clean up then exit.
    inputThread = threading.Thread(target=read_kbd_input, args=(inputQueue,), daemon=True)
    inputThread.start()

    # Main loop
    while (True):

        # Read keyboard inputs
        # Note: if this queue were being read in multiple places we would need to use the queueLock above to ensure
        # multi-method-call atomic access. Since this is the only place we are removing from the queue, however, in this
        # example program, no locks are required.
        if (inputQueue.qsize() &gt; 0):
            input_str = inputQueue.get()
            print("input_str = {}".format(input_str))

            if (input_str == EXIT_COMMAND):
                print("Exiting serial terminal.")
                break # exit the while loop

            # Insert your code here to do whatever you want with the input_str.

        # The rest of your program goes here.

        # Sleep for a short time to prevent this thread from sucking up all of your CPU resources on your PC.
        time.sleep(0.01) 

    print("End.")

# If you run this Python file directly (ex: via `python3 this_filename.py`), do the following:
if (__name__ == '__main__'): 
    main()
</code></pre>
<h2>Sample output:</h2>
<blockquote>
<p>$ python3 read_keyboard_input.py<br/>
  Ready for keyboard input:<br/>
  hey<br/>
  input_str = hey<br/>
  hello<br/>
  input_str = hello<br/>
  7000<br/>
  input_str = 7000<br/>
  exit<br/>
  input_str = exit<br/>
  Exiting serial terminal.<br/>
  End.  </p>
</blockquote>
<h2>References:</h2>
<ol>
<li><a href="https://pyserial.readthedocs.io/en/latest/pyserial_api.html" rel="noreferrer">https://pyserial.readthedocs.io/en/latest/pyserial_api.html</a></li>
<li>*****<a href="https://www.tutorialspoint.com/python/python_multithreading.htm" rel="noreferrer">https://www.tutorialspoint.com/python/python_multithreading.htm</a></li>
<li>*****<a href="https://en.wikibooks.org/wiki/Python_Programming/Threading" rel="noreferrer">https://en.wikibooks.org/wiki/Python_Programming/Threading</a></li>
<li><a href="https://stackoverflow.com/questions/1607612/python-how-do-i-make-a-subclass-from-a-superclass">Python: How do I make a subclass from a superclass?</a></li>
<li><a href="https://docs.python.org/3/library/queue.html" rel="noreferrer">https://docs.python.org/3/library/queue.html</a></li>
<li><a href="https://docs.python.org/3.7/library/threading.html" rel="noreferrer">https://docs.python.org/3.7/library/threading.html</a></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p><code>input([prompt])</code> is equivalent to <code>eval(raw_input(prompt))</code> and available since python 2.6</p>
<p>As it is unsafe (because of eval), raw_input should be preferred for critical applications.</p>
</div>
<div class="post-text" itemprop="text">
<p>This should work </p>
<pre><code>yourvar = input('Choose a number: ')
print('you entered: ' + yourvar)
</code></pre>
</div>
<span class="comment-copy">I'm pretty sure the OP just forgot to press Return after entering a number, and none of the answers actually answer the question.</span>
<span class="comment-copy">Non-blocking multi-threaded version, so you can keep doing stuff instead of blocking on keyboard input: <a href="https://stackoverflow.com/a/53344690/4561887">stackoverflow.com/a/53344690/4561887</a></span>
<span class="comment-copy">always put an <code>space</code> after your string for the user to enter his input if peace. <code>Enter Tel12340404</code> vs <code>Enter Tel: 12340404</code>. see! :P</span>
<span class="comment-copy">Done. Thanks for the suggestion.</span>
<span class="comment-copy">+1 for that interesting tidbit of information, although I'm flagging this because it really aught to be listed as a comment on the question or an answer because it's not really in-and-of-itself an answer.</span>
<span class="comment-copy">It is also only applicable to Python 2.x. In Python 3.x. <code>raw_input</code> was renamed to <code>input</code> and does NOT eval.</span>
<span class="comment-copy">This does not provide an answer to the question. To critique or request clarification from an author, leave a comment below their post.</span>
<span class="comment-copy">@EricStein - My flag was declined, and after some reflection, I agree that I flagged too hastily. See this: <a href="http://meta.stackexchange.com/questions/225370/your-answer-is-in-another-castle-when-is-an-answer-not-an-answer" title="your answer is in another castle when is an answer not an answer">meta.stackexchange.com/questions/225370/…</a></span>
<span class="comment-copy">How is this different from the other answers suggesting <code>input()</code>?</span>
