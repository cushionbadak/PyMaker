<div class="post-text" itemprop="text">
<p>There are several ways to write to stderr:</p>
<pre><code> # Note: this first one does not work in Python 3
 print &gt;&gt; sys.stderr, "spam"

 sys.stderr.write("spam\n")

 os.write(2, b"spam\n")

 from __future__ import print_function
 print("spam", file=sys.stderr)
</code></pre>
<p>That seems to contradict <em>zen of Python #13</em> <sup>†</sup>, so what's the difference here and are there any advantages or disadvantages to one way or the other? Which way should be used?</p>
<p><sup>†</sup> <sub>There should be one — and preferably only one — obvious way to do it.</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>I found this to be the only one short + flexible + portable + readable:</p>
<pre><code>from __future__ import print_function
import sys

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)
</code></pre>
<p>The function <code>eprint</code> can be used in the same way as the standard <code>print</code> function:</p>
<pre><code>&gt;&gt;&gt; print("Test")
Test
&gt;&gt;&gt; eprint("Test")
Test
&gt;&gt;&gt; eprint("foo", "bar", "baz", sep="---")
foo---bar---baz
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import sys
sys.stderr.write()
</code></pre>
<p>Is my choice, just more readable and saying exactly what you intend to do and portable across versions.  </p>
<p>Edit: being 'pythonic' is a third thought to me over readability and performance... with these two things in mind, with python 80% of your code will be pythonic. list comprehension being the 'big thing' that isn't used as often (readability).</p>
</div>
<div class="post-text" itemprop="text">
<p>For <strong>Python 2</strong> my choice is:
<code>print &gt;&gt; sys.stderr, 'spam'</code>
Because you can simply print lists/dicts etc. without convert it to string. 
<code>print &gt;&gt; sys.stderr, {'spam': 'spam'}</code>
instead of:
<code>sys.stderr.write(str({'spam': 'spam'}))</code></p>
</div>
<div class="post-text" itemprop="text">
<p><code>print &gt;&gt; sys.stderr</code> is gone in Python3.
<a href="http://docs.python.org/3.0/whatsnew/3.0.html" rel="noreferrer">http://docs.python.org/3.0/whatsnew/3.0.html</a> says:</p>
<pre><code>Old: print &gt;&gt;sys.stderr, "fatal error"
New: print("fatal error", file=sys.stderr)
</code></pre>
<p>Unfortunately, this is quite ugly. Alternatively, use</p>
<pre><code>sys.stderr.write("fatal error\n")
</code></pre>
<p>but note that <code>write</code> is not a 1:1 replacement for <code>print</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Nobody's mentioned <code>logging</code> yet, but logging was created specifically to communicate error messages. By default it is set up to write to stderr. This script:</p>
<pre><code># foo.py
import logging
logging.basicConfig(format='%(message)s')

logging.warning('I print to stderr by default')
logging.info('For this you must change the level and add a handler.')
print('hello world')
</code></pre>
<p>has the following result when run on the command line:</p>
<pre><code>$ python3 foo.py &gt; bar.txt
I print to stderr by default
</code></pre>
<p>(and <em>bar.txt</em> contains the 'hello world')</p>
<p>(Note, <code>logging.warn</code> has been <a href="https://docs.python.org/3/library/logging.html#logging.warning" rel="noreferrer">deprecated</a>, use <code>logging.warning</code> instead)</p>
</div>
<div class="post-text" itemprop="text">
<p>I would say that your first approach:</p>
<pre><code>print &gt;&gt; sys.stderr, 'spam' 
</code></pre>
<p>is the "One . . . <strong>obvious</strong> way to do it"  The others don't satisfy rule #1 ("Beautiful is better than ugly.")</p>
</div>
<div class="post-text" itemprop="text">
<p>I did the following using Python 3:</p>
<pre><code>from sys import stderr

def print_err(*args, **kwargs):
    print(*args, file=stderr, **kwargs)
</code></pre>
<p>So now I'm able to add keyword arguments, for example, to avoid carriage return:</p>
<pre><code>print_err("Error: end of the file reached. The word ", end='')
print_err(word, "was not found")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will mimic the standard print function but output on stderr</p>
<pre><code>def print_err(*args):
    sys.stderr.write(' '.join(map(str,args)) + '\n')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>EDIT</strong> In hind-sight, I think the potential confusion with changing sys.stderr and not seeing the behaviour updated makes this answer not as good as just using a simple function as others have pointed out.</p>
<p>Using partial only saves you 1 line of code. The potential confusion is not worth saving 1 line of code.</p>
<p><strong>original</strong></p>
<p>To make it even easier, here's a version that uses 'partial', which is a big help in wrapping functions.</p>
<pre><code>from __future__ import print_function
import sys
from functools import partial

error = partial(print, file=sys.stderr)
</code></pre>
<p>You then use it like so</p>
<pre><code>error('An error occured!')
</code></pre>
<p>You can check that it's printing to stderr and not stdout by doing the following (over-riding code from <a href="http://coreygoldberg.blogspot.com.au/2009/05/python-redirect-or-turn-off-stdout-and.html" rel="noreferrer">http://coreygoldberg.blogspot.com.au/2009/05/python-redirect-or-turn-off-stdout-and.html</a>):</p>
<pre><code># over-ride stderr to prove that this function works.
class NullDevice():
    def write(self, s):
        pass
sys.stderr = NullDevice()

# we must import print error AFTER we've removed the null device because
# it has been assigned and will not be re-evaluated.
# assume error function is in print_error.py
from print_error import error

# no message should be printed
error("You won't see this error!")
</code></pre>
<p>The downside to this is partial <strong>assigns</strong> the value of sys.stderr to the wrapped function at the time of creation. Which means, <strong>if you redirect stderr later it won't affect this function.</strong>
If you plan to redirect stderr, then use the **kwargs method mentioned by <a href="https://stackoverflow.com/a/20830343/1591957">aaguirre</a> on this page.</p>
</div>
<div class="post-text" itemprop="text">
<p>The same applies to stdout:</p>
<pre><code>print 'spam'
sys.stdout.write('spam\n')
</code></pre>
<p>As stated in the other answers, <em>print</em> offers a pretty interface that is often more convenient (e.g. for printing debug information), while <em>write</em> is faster and can also be more convenient when you have to format the output exactly in certain way. I would consider maintainability as well:</p>
<ol>
<li><p>You may later decide to switch between stdout/stderr and a regular file.</p></li>
<li><p><em>print()</em> syntax has changed in Python 3, so if you need to support both versions, <em>write()</em> might be better.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>I am working in python 3.4.3.  I am cutting out a little typing that shows how I got here:</p>
<pre><code>[18:19 jsilverman@JSILVERMAN-LT7 pexpect]$ python3
&gt;&gt;&gt; import sys
&gt;&gt;&gt; print("testing", file=sys.stderr)
testing
&gt;&gt;&gt;
[18:19 jsilverman@JSILVERMAN-LT7 pexpect]$ 
</code></pre>
<p>Did it work?  Try redirecting stderr to a file and see what happens:</p>
<pre><code>[18:22 jsilverman@JSILVERMAN-LT7 pexpect]$ python3 2&gt; /tmp/test.txt
&gt;&gt;&gt; import sys
&gt;&gt;&gt; print("testing", file=sys.stderr)
&gt;&gt;&gt; [18:22 jsilverman@JSILVERMAN-LT7 pexpect]$
[18:22 jsilverman@JSILVERMAN-LT7 pexpect]$ cat /tmp/test.txt
Python 3.4.3 (default, May  5 2015, 17:58:45)
[GCC 4.9.2] on cygwin
Type "help", "copyright", "credits" or "license" for more information.
testing

[18:22 jsilverman@JSILVERMAN-LT7 pexpect]$
</code></pre>
<p>Well, aside from the fact that the little introduction that python gives you has been slurped into stderr (where else would it go?), it works.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you do a simple test:</p>
<pre><code>import time
import sys

def run1(runs):
    x = 0
    cur = time.time()
    while x &lt; runs:
        x += 1
        print &gt;&gt; sys.stderr, 'X'
    elapsed = (time.time()-cur)
    return elapsed

def run2(runs):
    x = 0
    cur = time.time()
    while x &lt; runs:
        x += 1
        sys.stderr.write('X\n')
        sys.stderr.flush()
    elapsed = (time.time()-cur)
    return elapsed

def compare(runs):
    sum1, sum2 = 0, 0
    x = 0
    while x &lt; runs:
        x += 1
        sum1 += run1(runs)
        sum2 += run2(runs)
    return sum1, sum2

if __name__ == '__main__':
    s1, s2 = compare(1000)
    print "Using (print &gt;&gt; sys.stderr, 'X'): %s" %(s1)
    print "Using (sys.stderr.write('X'),sys.stderr.flush()):%s" %(s2)
    print "Ratio: %f" %(float(s1) / float(s2))
</code></pre>
<p>You will find that sys.stderr.write() is consistently <strong>1.81</strong> times faster!</p>
</div>
<div class="post-text" itemprop="text">
<p>Try: </p>
<pre><code>from sys import stderr


print &gt;&gt; sys.stderr, 'spam' 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Answer to the question is : There are different way to print stderr in python but that depends on
  1.) which python version we are using
  2.) what exact output we want.</p>
</blockquote>
<p>The differnce between print and stderr's write function:
<strong>stderr</strong> : stderr (standard error) is pipe that is built into every UNIX/Linux system, when your program crashes and prints out debugging information (like a traceback in Python), it goes to the stderr pipe.</p>
<p><strong>print</strong>: print is a wrapper that formats the inputs (the input is the space between argument and the newline at the end) and it then calls the write function of a given object, the given object by default is sys.stdout, but we can pass a file i.e we can print the input in a file also.</p>
<p>Python2:
If we are using python2 then</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; print "hi"
hi
&gt;&gt;&gt; print("hi")
hi
&gt;&gt;&gt; print &gt;&gt; sys.stderr.write("hi")
hi
</code></pre>
<blockquote>
<p>Python2 trailing comma has in Python3 become a parameter, so if we use
  trailing commas to avoid the newline after a print, this will in
  Python3 look like print('Text to print', end=' ') which is a syntax
  error under Python2.</p>
</blockquote>
<p><a href="http://python3porting.com/noconv.html" rel="nofollow noreferrer">http://python3porting.com/noconv.html</a></p>
<blockquote>
<p>If we check same above sceario in python3:</p>
</blockquote>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; print("hi")
hi
</code></pre>
<blockquote>
<p>Under Python 2.6 there is a <strong>future</strong> import to make print into a
  function. So to avoid any syntax errors and other differences we
  should start any file where we use print() with from <strong>future</strong> import
  print_function. The <strong>future</strong> import only works under Python 2.6 and
  later, so for Python 2.5 and earlier you have two options. You can
  either convert the more complex print to something simpler, or you can
  use a separate print function that works under both Python2 and
  Python3.</p>
</blockquote>
<pre><code>&gt;&gt;&gt; from __future__ import print_function
&gt;&gt;&gt; 
&gt;&gt;&gt; def printex(*args, **kwargs):
...     print(*args, file=sys.stderr, **kwargs)
... 
&gt;&gt;&gt; printex("hii")
hii
&gt;&gt;&gt;
</code></pre>
<blockquote>
<p>Case: Point to be noted that sys.stderr.write() or sys.stdout.write()
  ( stdout (standard output) is a pipe that is built into every
  UNIX/Linux system) is not a replacement for print, but yes we can use
  it as a alternative in some case. Print is a wrapper which wraps the
  input with space and newline at the end and uses the write function to
  write. This is the reason  sys.stderr.write() is faster.</p>
<p><strong>Note:</strong> we can also trace and debugg using Logging</p>
</blockquote>
<pre><code>#test.py
import logging
logging.info('This is the existing protocol.')
FORMAT = "%(asctime)-15s %(clientip)s %(user)-8s %(message)s"
logging.basicConfig(format=FORMAT)
d = {'clientip': '192.168.0.1', 'user': 'fbloggs'}
logging.warning("Protocol problem: %s", "connection reset", extra=d)
</code></pre>
<p><a href="https://docs.python.org/2/library/logging.html#logger-objects" rel="nofollow noreferrer">https://docs.python.org/2/library/logging.html#logger-objects</a></p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3, one can just use <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer">print():</a></p>
<pre class="lang-py prettyprint-override"><code>print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)
</code></pre>
<p>almost out of the box:</p>
<pre class="lang-py prettyprint-override"><code>import sys
print("Hello, world!", file=sys.stderr)
</code></pre>
<p>or:</p>
<pre class="lang-py prettyprint-override"><code>from sys import stderr
print("Hello, world!", file=stderr)
</code></pre>
<p>This is straightforward and does not need to include anything besides <code>sys.stderr</code>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import logging
logging.basicConfig(format='[%(levelname)s] %(message)s')

logging.error('is error, alarm!')
logging.warning('is simple waring')

print('hello')
</code></pre>
<p>pydoc logging</p>
</div>
<span class="comment-copy">The first way listed is one of the many things removed in Python 3. The consensus seems to be that the &gt;&gt; syntax was ugly anyway, and since print is now a function, the syntax would never work.</span>
<span class="comment-copy">I use: sys.exit('Error: &lt;error text&gt;')</span>
<span class="comment-copy">"That seems to contradict zen of Python #13" -- Python has tons of methods to do anything, #13 was never relevant</span>
<span class="comment-copy">@Hejazzman Well, it should be, otherwise why even mention it?</span>
<span class="comment-copy">Just one thought: since this will import the print function, every other "print" in the original script will now need to be "functionized" adding "(" and ")".  So that is a slight strike against this method, IMO.</span>
<span class="comment-copy">@DanH Yes this <i>forces</i> you to make your code Python3-ready. I guess this could be why many people actually like it!</span>
<span class="comment-copy">@MarkH... yes, it forces you to make your code Python3-ready... it also forces you to do it NOW, just to print some debugging info to the stderr... which I would find more of a hassle in most situations when I'm trying to debug something.  (I'd rather not introduce new syntax errors!)  :-)</span>
<span class="comment-copy">For the record, this is not working with python 2.4</span>
<span class="comment-copy">FWIW this code <b>doesn't</b> force you to use the function version of <code>print</code> in your entire program. Only in the module containing the definition of <code>eprint()</code>. Put it in a small file by itself, import <code>eprint</code> from it into your other files, and you can continue using statement <code>print</code> as long as you want.</span>
<span class="comment-copy">Isn't readability the same as being pythonic?</span>
<span class="comment-copy">Just don't forget to flush.</span>
<span class="comment-copy">Advantage of the <code>print</code> statement is easy printing of non-string values, without having to convert them first. If you need a print statement, I would therefore recommend using the 3rd option to be python 3 ready</span>
<span class="comment-copy"><code>sys.stderr.write()</code> is nothing like <code>print</code>. It doesn't add a newline.</span>
<span class="comment-copy">@temoto - stderr isn't buffered, so no need to flush.</span>
<span class="comment-copy">The more Pythonic way to print a dictionary would be with something like <code>"{0}".format({'spam': 'spam'})</code> anyway, wouldn't it? I would say you should avoid explicitly converting to string.  Edit: I accidentally a grammar</span>
<span class="comment-copy">@luketparkinson this all about debugging - so, I think, it's more preferable to use the simplest code as possible.</span>
<span class="comment-copy">This doesn't work on Python 3, so you should avoid it in new code.</span>
<span class="comment-copy">I suppose it's a matter of preference, but I don't see what's ugly about <code>print('spam', file=sys.stderr)</code>. If you're doing it over and over again, you can code the 'eprint' function like in the most popular answer, but in that case, I would ask, what's wrong with logging? <a href="https://stackoverflow.com/a/41304513/1450294">stackoverflow.com/a/41304513/1450294</a></span>
<span class="comment-copy">In my experience, more people use print to log messages than use logging. I think python4 should just remove print from the language and force you to use logging for that.</span>
<span class="comment-copy">@skia.heliou if there is only one way to accomplish a task, it will be obvious how to do it and that will be one fewer question on Stack Overflow.</span>
<span class="comment-copy">Opinions differ. This is the least <b>obvious</b> to me.</span>
<span class="comment-copy">@AliVeli There are no parentheses, this is an older Python &lt;=2 syntax, and therefore not Python 3 compatible.</span>
<span class="comment-copy">I would say that this is the ugliest version of all 3</span>
<span class="comment-copy">What does that <code>&gt;&gt;</code> mean syntactically? I understand that it's an effort to copy bash's <code>&gt;</code>, so is it some shoehorned syntax to do just that?</span>
<span class="comment-copy">@EarlGray It's a holdover from C++'s stream insertion operator: <code>std::cout &lt;&lt; "spam";</code></span>
<span class="comment-copy">I was going to suggest that you could use a partial too, but realised that partial assigns the stderr to the function at the creation time of the partial. This prevents you redirecting stderr later as the partial will still hold the original stderr object.</span>
<span class="comment-copy">I would add a sys.stderr.flush()</span>
<span class="comment-copy">@AMS - Why? <code>print</code> doesn't include a flush.</span>
<span class="comment-copy">Why mimic when you can actually do it?</span>
<span class="comment-copy">Is Corey Goldberg's code best run on a Rube Goldberg machine? :P</span>
<span class="comment-copy">BTW: "currying" is a (more) useful search keyword if you want to know more about "partial".</span>
<span class="comment-copy">Using <code>from __future__ import print_function</code> is a better way to support both Python 2.6+ and Python 3.</span>
<span class="comment-copy">If I run this I see a much smaller difference. It's interesting that most answers ignore the print function (python 3) way. I've never used it before (inertia), but thought I'd run this timing script and add the print function. Direct comparison of print statement and function isn't possible (import from <b>future</b> applies to the whole file and masks the print statement) but rewriting this code to use the print function instead of statement I see a bigger speed up (~1.6 though somewhat variable) in favour of the print function.</span>
<span class="comment-copy">The result of this test is somehow misleading. Print 'XXXXXXXXXXXXXXXXXXXX' instead of 'X' and the ratio drops to <b>1.05</b>. I assume most python programs need to print more than a single character.</span>
<span class="comment-copy">I don't care about performance, for something like printing warnings.</span>
<span class="comment-copy">I know it's been a while, but you replied equally long after my post... If you don't car about performance than I would suggest the more pythonic way would be to use sys.stderr.write and not the WTF?!? "&gt;&gt;" characters. If this sys.stdout namespace is too long you could rename it... (ie. from sys import stderr as stderr_fh). Then you can do stderr_fh.write("blah")</span>
<span class="comment-copy">[3/3] Even if this benchmark were more accurate, it's probably not worth worrying about.  As Knuth wrote: "Programmers waste enormous amounts of time thinking about, or worrying about, the speed of noncritical parts of their programs, and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are considered. We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil."</span>
<span class="comment-copy">logging was already mentioned <a href="https://stackoverflow.com/a/41304513/674039">here</a></span>
