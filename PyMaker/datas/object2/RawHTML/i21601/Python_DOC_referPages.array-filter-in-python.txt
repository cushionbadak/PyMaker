<div class="post-text" itemprop="text">
<p>For example, I have two lists  </p>
<pre><code> A           = [6, 7, 8, 9, 10, 11, 12]
subset_of_A  = [6, 9, 12]; # the subset of A


the result should be [7, 8, 10, 11]; the remaining elements 
</code></pre>
<p>Is there a built-in function in python to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>If the order is not important, you should use <code>set.difference</code>. However, if you want to retain order, a simple list comprehension is all it takes.</p>
<pre><code>result = [a for a in A if a not in subset_of_A]
</code></pre>
<p><strong>EDIT:</strong> As delnan says, performance will be substantially improved if <code>subset_of_A</code> is an actual <code>set</code>, since checking for membership in a <code>set</code> is O(1) as compared to O(n) for a list.</p>
<pre><code>A = [6, 7, 8, 9, 10, 11, 12]
subset_of_A = set([6, 9, 12]) # the subset of A

result = [a for a in A if a not in subset_of_A]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, the <a href="https://docs.python.org/3/library/functions.html#filter" rel="noreferrer"><code>filter</code></a> function:</p>
<pre><code>filter(lambda x: x not in subset_of_A, A)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>set(A)-set(subset_of_A)</code> gives your the intended result set, but it won't retain the original order. The following is order preserving:</p>
<pre><code>[a for a in A if not a in subset_of_A]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No, there is no build in function in python to do this, because simply:  </p>
<pre><code>set(A)- set(subset_of_A)
</code></pre>
<p>will provide you the answer.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>tuple(set([6, 7, 8, 9, 10, 11, 12]).difference([6, 9, 12]))</code></p>
</div>
<div class="post-text" itemprop="text">
<p>This was just asked a couple of days ago (but I cannot find it):</p>
<pre><code>&gt;&gt;&gt; A = [6, 7, 8, 9, 10, 11, 12]
&gt;&gt;&gt; subset_of_A = set([6, 9, 12])
&gt;&gt;&gt; [i for i in A if i not in subset_of_A]
[7, 8, 10, 11]
</code></pre>
<p>It might be better to use <code>set</code>s from the beginning, depending on the context. Then you can use <a href="http://docs.python.org/library/stdtypes.html#set" rel="nofollow">set operations</a> like other answers show. </p>
<p>However, converting lists to sets and back only for these operations is slower than list comprehension.</p>
</div>
<div class="post-text" itemprop="text">
<p>How about</p>
<pre><code>set(A).difference(subset_of_A)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the <code>Set</code> type:</p>
<pre><code>A_set = Set([6,7,8,9,10,11,12])
subset_of_A_set = Set([6,9,12])

result = A_set - subset_of_A_set
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; a = set([6, 7, 8, 9, 10, 11, 12])
&gt;&gt;&gt; sub_a = set([6, 9, 12])
&gt;&gt;&gt; a - sub_a
set([8, 10, 11, 7])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; A           = [6, 7, 8, 9, 10, 11, 12]
&gt;&gt;&gt; subset_of_A  = [6, 9, 12];
&gt;&gt;&gt; set(A) - set(subset_of_A)
set([8, 10, 11, 7])
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">And this can be improved vastly by making <code>subset_of_A</code> a real <code>set</code>, which gives <code>O(1)</code> membership test (instead of <code>O(n)</code> as with lists).</span>
<span class="comment-copy">Good point.....</span>
<span class="comment-copy">Note that in Python 2, <code>filter</code> returns the list itself, while in Python 3, it returns an iterator.</span>
<span class="comment-copy">@modulitos <code>list(filter(...))</code></span>
<span class="comment-copy">While this works for his example, there may be problems if elements are repeated in the list A.</span>
<span class="comment-copy">Oh man, this one gets a vote for being cool</span>
