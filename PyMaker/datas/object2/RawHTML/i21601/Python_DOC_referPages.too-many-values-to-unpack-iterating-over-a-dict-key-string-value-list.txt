<div class="post-text" itemprop="text">
<p>I am getting the <code>'too many values to unpack'</code> error. Any idea how I can fix this?</p>
<pre><code>first_names = ['foo', 'bar']
last_names = ['gravy', 'snowman']

fields = {
    'first_names': first_names,
    'last_name': last_names,
}        

for field, possible_values in fields:  # error happens on this line              
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to use something like <a href="http://docs.python.org/library/stdtypes.html#dict.iteritems" rel="noreferrer">iteritems</a>.</p>
<pre><code>for field, possible_values in fields.iteritems():
    print field, possible_values
</code></pre>
<p>See <a href="https://stackoverflow.com/a/3294899/1489538">this answer</a> for more information on iterating through dictionaries, such as using <code>items()</code>, across python versions.</p>
<p><b>EDIT</b><br/>
Since <b>Python 3</b> iteritems() is <a href="https://docs.python.org/3/whatsnew/3.0.html" rel="noreferrer">no longer supported</a>. Use items() instead.</p>
<pre><code>for field, possible_values in fields.items():
    print(field, possible_values)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For Python 3.x <code>iteritems</code> has been removed. Use <a href="https://docs.python.org/3.4/library/stdtypes.html#dict.items">items</a> instead.</p>
<pre><code>for field, possible_values in fields.items():
    print(field, possible_values)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You want to use <a href="http://docs.python.org/library/stdtypes.html#dict.iteritems" rel="noreferrer">iteritems</a>. This returns an iterator over the dictionary, which gives you a tuple(key, value)</p>
<pre><code>&gt;&gt;&gt; for field, values in fields.iteritems():
...     print field, values
... 
first_names ['foo', 'bar']
last_name ['gravy', 'snowman']
</code></pre>
<p>Your problem was that you were looping over fields, which returns the keys of the dictionary.</p>
<pre><code>&gt;&gt;&gt; for field in fields:
...     print field
... 
first_names
last_name
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For lists, use <code>enumerate</code></p>
<pre><code>for field, possible_values in enumerate(fields):
    print(field, possible_values)
</code></pre>
<p><code>iteritems</code> will not work for list objects</p>
</div>
<div class="post-text" itemprop="text">
<p>Can't be iterating directly in dictionary. So you can through <strong>converting into tuple</strong>.</p>
<pre><code>first_names = ['foo', 'bar']
last_names = ['gravy', 'snowman']

fields = {
    'first_names': first_names,
    'last_name': last_names,
         } 
tup_field=tuple(fields.items())
for names in fields.items():
     field,possible_values = names
     tup_possible_values=tuple(possible_values)
     for pvalue in tup_possible_values:
           print (field + "is" + pvalue)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you are missing <code>fields.iteritems()</code> in your code.</p>
<p>You could also do it other way, where you get values using keys in the dictionary.</p>
<pre><code>for key in fields:
    value = fields[key]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>data = (['President','George','Bush','is','.'],['O','B-PERSON','I-PERSON','O','O'])
corpus = []
for(doc,tags) in data:
    doc_tag = []
    for word,tag in zip(doc,tags):
        doc_tag.append((word,tag))
        corpus.append(doc_tag)
        print(corpus)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python3 <code>iteritems()</code> is no longer supported</p>
<p><strong>SOLUTION1</strong>:</p>
<p>Use <code>.items</code></p>
<pre><code>for field, possible_values in fields.items():
    print(field, possible_values)
</code></pre>
<p><strong>SOLUTION2</strong>:</p>
<p>You can use <code>enumerate()</code> as well</p>
<pre><code>for field, possible_values in enumerate(fields):
    print(field, possible_values)
</code></pre>
</div>
<span class="comment-copy">As for why you need to do this, iterating over a dictionary iterates through the keys, not the key/value pairs.</span>
<span class="comment-copy">@jeffm that's what confused me. i saw this as a PHP foreach.</span>
<span class="comment-copy">Please explain your answer.</span>
<span class="comment-copy">Can't be iterating directly in dictionary. So you can through converting into tuple.</span>
<span class="comment-copy">Welcome to Stack Overflow! Generally, answers are much more helpful if they include an explanation of what the code is intended to do, and why that solves the problem without introducing others.</span>
