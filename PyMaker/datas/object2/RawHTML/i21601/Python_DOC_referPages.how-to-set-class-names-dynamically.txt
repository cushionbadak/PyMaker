<div class="post-text" itemprop="text">
<p>I have a function that creates classes derived from it's arguments:</p>
<pre><code>def factory(BaseClass) :
    class NewClass(BaseClass) : pass
    return NewClass
</code></pre>
<p>Now when I use it to create new classes, the classes are all named the same, and the instances look like they have the same type:</p>
<pre><code>NewA = factory(ClassA)
NewB = factory(ClassB)
print type(NewA()) # &lt;class __main__.NewClass&gt;
print type(NewB()) # &lt;class __main__.NewClass&gt;
</code></pre>
<p>Is the proper fix to manually set the <code>__name__</code> attribute?</p>
<pre><code>NewA.__name__ = 'NewA'
print type(NewA()) # &lt;class __main__.NewA&gt;
</code></pre>
<p>Are there any other things I should be setting while I'm at it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, setting <code>__name__</code> is the correct thing to do; you don't need to set anything else to adjust the class name.</p>
<p>For example:</p>
<pre><code>def factory(BaseClass) :
    class NewClass(BaseClass): pass
    NewClass.__name__ = "factory_%s" % BaseClass.__name__
    return NewClass
</code></pre>
<p><code>type</code> is the <em>wrong</em> thing to use here. It doesn't let you define classes with <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">Python's normal class syntax</a>, instead making you set up every class attribute manually. It's used to create classes by hand, e.g. if you have an array of base classes and you want to create a class using it (which you can't do with Python's class syntax). Don't use it here.</p>
</div>
<div class="post-text" itemprop="text">
<p>Check out using the <a href="http://docs.python.org/library/functions.html#type" rel="noreferrer"><code>type()</code></a> function with three arguments. The following code creates a new class "NewA", with <code>object</code> as the base type, and no initial attributes.</p>
<pre><code>&gt;&gt;&gt; type('NewA', (object,), {})
&lt;class '__main__.NewA'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Updating the answer off Glenn Maynard: Nowadays there is the <code>__name__</code> attribute and the <code>__qualname__</code> attribute. The first is what you might think; the second is the dotted "path" for nested classes.</p>
<p>In case of "simple" classes both are equal. Just set <code>__name__</code> and <code>__qualname__</code> to your new name. You should set both attributes, since you cannot be sure at which one 3rd-party code will look. </p>
<p>Now for nested classes, the differences between the two attributes show:</p>
<pre><code>class Outer:
    class Inner:
        pass
print(Outer.__name__, Outer.__qualname__)
print(Outer.Inner.__name__, Outer.Inner.__qualname__)
</code></pre>
<p>prints:</p>
<pre><code>Outer Outer
Inner Outer.Inner
</code></pre>
<p>If you want to change <code>Outer</code>'s name, you need to patch three places, namely <code>Outer.__name__</code>, <code>Outer.__qualname__</code>, <code>Inner.__qualname__</code>. For the latter two you need to split and join at the dots correctly.</p>
<p>A final warning: Even if you did all that right, stuff like sphinx, pylint, etc... might still not work 100%. For example the fake name cannot be found in the module namespace as usual; the source cannot be <code>grep</code>ped for the class definition; and so on.</p>
</div>
<span class="comment-copy">Not correct anymore, nowadays you also need to change <b>qualname</b>. See <a href="https://www.python.org/dev/peps/pep-3155/" rel="nofollow noreferrer">python.org/dev/peps/pep-3155</a></span>
<span class="comment-copy">@TorbenKlein Is it that we need to set both <code>__qualname__</code> and <code>__name__</code> or just <code>__qualname__</code> now?</span>
<span class="comment-copy">Expanded my comment into a full answer: <a href="https://stackoverflow.com/a/54284495/221166">stackoverflow.com/a/54284495/221166</a></span>
<span class="comment-copy">Seems a bit clunky if the class definition in NewClass is very long.  I would have to accumulate all the methods into a dictionary (I assume the doc string goes there too, under key <code>'__doc__'</code>).</span>
<span class="comment-copy">Also what if the methods in NewClass have to dynamically refer to the methods of BaseClass?</span>
<span class="comment-copy"><code>type</code> is for things like creating classes with variable base lists; it's entirely the wrong tool for this.</span>
<span class="comment-copy">@kiyo: In your example code, NewClass had nothing defined other than it's name and base class, so this method would work perfectly well. If your NewClass is going to have actual attributes in it, then yes, changing <code>__name__</code> is fine and preferable. Both methods will function equally well, however.</span>
