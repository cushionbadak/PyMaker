<div class="post-text" itemprop="text">
<p>Assume the following arrays are given:</p>
<pre><code>a = array([1,3,5])
b = array([2,4,6])
</code></pre>
<p>How would one interweave them efficiently so that one gets a third array like this</p>
<pre><code>c = array([1,2,3,4,5,6])
</code></pre>
<p>It can be assumed that <code>length(a)==length(b)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I like Josh's answer.  I just wanted to add a more mundane, usual, and slightly more verbose solution.  I don't know which is more efficient.  I expect they will have similar performance.</p>
<pre><code>import numpy as np
a = np.array([1,3,5])
b = np.array([2,4,6])

c = np.empty((a.size + b.size,), dtype=a.dtype)
c[0::2] = a
c[1::2] = b
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a one-liner:</p>
<pre><code>c = numpy.vstack((a,b)).reshape((-1,),order='F')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I thought it might be worthwhile to check how the solutions performed in terms of performance. And this is the result:</p>
<p><a href="https://i.stack.imgur.com/CRawo.png" rel="noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/CRawo.png"/></a></p>
<p>This clearly shows that the <a href="https://stackoverflow.com/a/5347492/5393381">most upvoted and accepted answer (Pauls answer)</a> is also the fastest option.</p>
<p>The code was taken from the other answers and from <a href="https://stackoverflow.com/a/44468758/5393381">another Q&amp;A</a>:</p>
<pre><code># Setup
import numpy as np

def Paul(a, b):
    c = np.empty((a.size + b.size,), dtype=a.dtype)
    c[0::2] = a
    c[1::2] = b
    return c

def JoshAdel(a, b):
    return np.vstack((a,b)).reshape((-1,),order='F')

def xioxox(a, b):
    return np.ravel(np.column_stack((a,b)))

def Benjamin(a, b):
    return np.vstack((a,b)).ravel([-1])

def andersonvom(a, b):
    return np.hstack( zip(a,b) )

def bhanukiran(a, b):
    return np.dstack((a,b)).flatten()

def Tai(a, b):
    return np.insert(b, obj=range(a.shape[0]), values=a)

def Will(a, b):
    return np.ravel((a,b), order='F')

# Timing setup
timings = {Paul: [], JoshAdel: [], xioxox: [], Benjamin: [], andersonvom: [], bhanukiran: [], Tai: [], Will: []}
sizes = [2**i for i in range(1, 20, 2)]

# Timing
for size in sizes:
    func_input1 = np.random.random(size=size)
    func_input2 = np.random.random(size=size)
    for func in timings:
        res = %timeit -o func(func_input1, func_input2)
        timings[func].append(res)

%matplotlib notebook

import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure(1)
ax = plt.subplot(111)

for func in timings:
    ax.plot(sizes, 
            [time.best for time in timings[func]], 
            label=func.__name__)  # you could also use "func.__name__" here instead
ax.set_xscale('log')
ax.set_yscale('log')
ax.set_xlabel('size')
ax.set_ylabel('time [seconds]')
ax.grid(which='both')
ax.legend()
plt.tight_layout()
</code></pre>
<p>Just in case you have numba available you could also use that to create a function:</p>
<pre><code>import numba as nb

@nb.njit
def numba_interweave(arr1, arr2):
    res = np.empty(arr1.size + arr2.size, dtype=arr1.dtype)
    for idx, (item1, item2) in enumerate(zip(arr1, arr2)):
        res[idx*2] = item1
        res[idx*2+1] = item2
    return res
</code></pre>
<p>It could be slightly faster than the other alternatives:</p>
<p><a href="https://i.stack.imgur.com/xctSK.png" rel="noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/xctSK.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a simpler answer than some of the previous ones</p>
<pre><code>import numpy as np
a = np.array([1,3,5])
b = np.array([2,4,6])
inter = np.ravel(np.column_stack((a,b)))
</code></pre>
<p>After this <code>inter</code> contains:</p>
<pre><code>array([1, 2, 3, 4, 5, 6])
</code></pre>
<p>This answer also appears to be marginally faster:</p>
<pre><code>In [4]: %timeit np.ravel(np.column_stack((a,b)))
100000 loops, best of 3: 6.31 µs per loop

In [8]: %timeit np.ravel(np.dstack((a,b)))
100000 loops, best of 3: 7.14 µs per loop

In [11]: %timeit np.vstack((a,b)).ravel([-1])
100000 loops, best of 3: 7.08 µs per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Maybe this is more readable than @JoshAdel's solution:</p>
<pre><code>c = numpy.vstack((a,b)).ravel([-1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will interleave/interlace the two arrays and I believe it is quite readable:</p>
<pre><code>a = np.array([1,3,5])      #=&gt; array([1, 3, 5])
b = np.array([2,4,6])      #=&gt; array([2, 4, 6])
c = np.hstack( zip(a,b) )  #=&gt; array([1, 2, 3, 4, 5, 6])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Improving @xioxox's answer:</p>
<pre><code>import numpy as np
a = np.array([1,3,5])
b = np.array([2,4,6])
inter = np.ravel((a,b), order='F')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>vstack</code> sure is an option, but more straightforward solution for your case could be the <code>hstack</code></p>
<pre><code>&gt;&gt;&gt; a = array([1,3,5])
&gt;&gt;&gt; b = array([2,4,6])
&gt;&gt;&gt; hstack((a,b)) #remember it is a tuple of arrays that this function swallows in.
&gt;&gt;&gt; array([1, 3, 5, 2, 4, 6])
&gt;&gt;&gt; sort(hstack((a,b)))
&gt;&gt;&gt; array([1, 2, 3, 4, 5, 6])
</code></pre>
<p>and more importantly this works for arbitrary shapes of <code>a</code> and <code>b</code></p>
<p>Also you may want to try out <code>dstack</code> </p>
<pre><code>&gt;&gt;&gt; a = array([1,3,5])
&gt;&gt;&gt; b = array([2,4,6])
&gt;&gt;&gt; dstack((a,b)).flatten()
&gt;&gt;&gt; array([1, 2, 3, 4, 5, 6])
</code></pre>
<p>u've got options now!</p>
</div>
<div class="post-text" itemprop="text">
<p>One can also try <code>np.insert</code>. (Solution migrated from <a href="https://stackoverflow.com/questions/48487928/interleave-numpy-arrays/48488404?noredirect=1#comment83969837_48488404">Interleave numpy arrays</a>)</p>
<pre><code>import numpy as np
a = np.array([1,3,5])
b = np.array([2,4,6])
np.insert(b, obj=range(a.shape[0]), values=a)
</code></pre>
<p>Please see the <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.insert.html" rel="nofollow noreferrer"><code>documentation</code></a> and <a href="https://www.tutorialspoint.com/numpy/numpy_insert.htm" rel="nofollow noreferrer"><code>tutorial</code></a> for more information. </p>
</div>
<span class="comment-copy">How about, same question, but you are trying to interleave matrices. That is a and b are 3 dimensional, and not necessarily the same size in the first dimension. Note:Only the first dimension should be interleaved.</span>
<span class="comment-copy">Unless speed is really really important, I would go with this as it's much more comprehensible which is important if anyone is ever going to look at it again.</span>
<span class="comment-copy">+1 I played around with timings and your code surprisingly seems to be 2-5x faster depending on inputs. I still find the efficiency of these types of operations to be nonintuitive, so it's always worth it to use <code>timeit</code> to test things out if a particular operation is a bottleneck in your code. There are usually more than one way to do things in numpy, so definitely profile code snippets.</span>
<span class="comment-copy">@JoshAdel:  I guess if <code>.reshape</code> creates an additional copy of the array, then that would explain a 2x performance hit.  I don't think it always makes a copy, however.  I'm guessing the 5x difference is only for small arrays?</span>
<span class="comment-copy">looking at <code>.flags</code> and testing <code>.base</code> for my solution, it looks like the reshape to 'F' format creates a hidden copy of the vstacked data, so it's not a simple view as I thought it would be. And strangely the 5x is only for intermediate sized arrays for some reason.</span>
<span class="comment-copy">Wow, this is so unreadable :) This is one of the cases where if you don't write a proper comment in the code, it can drive somebody crazy.</span>
<span class="comment-copy">It's just two common numpy commands strung together. I wouldn't think it is that unreadable, although a comment never hurts.</span>
<span class="comment-copy">@JohnAdel, well, it's not <code>numpy.vstack((a,b)).interweave()</code> :)</span>
<span class="comment-copy">@Ilya: I would have called the function <code>.interleave()</code> personally :)</span>
<span class="comment-copy">What does <code>reshape</code> do?</span>
<span class="comment-copy">Also of note, the accepted answer is <i>way</i> faster than the a native Python solution with <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>roundrobin()</code></a> from the itertools recipes.</span>
<span class="comment-copy"><code>ravel</code>'s <code>order</code> argument in <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.ravel.html" rel="nofollow noreferrer">the documentation</a> is one of <code>C</code>, <code>F</code>, <code>A</code>, or <code>K</code>.  I think you really want <code>.ravel('F')</code>, for FORTRAN order (column first)</span>
<span class="comment-copy">-1 to first answer because question has nothing to do with sorting.  +1 to second answer, which is the best I've seen so far.  This is why multiple solutions should be posted as multiple answers.  Please split it into multiple answers.</span>
