<div class="post-text" itemprop="text">
<p>Might be a n00b question, but I currently have a class that implements an iterator so I can do something like </p>
<pre><code>for i in class():
</code></pre>
<p>but I want to be able to access the class by index as well like </p>
<pre><code>class()[1]
</code></pre>
<p>How can I do that?</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Implement both <a href="http://docs.python.org/reference/datamodel.html#object.__iter__" rel="noreferrer"><code>__iter__()</code></a> and <a href="http://docs.python.org/reference/datamodel.html#object.__getitem__" rel="noreferrer"><code>__getitem__()</code></a> et alia methods.</p>
</div>
<div class="post-text" itemprop="text">
<p>The current <a href="https://stackoverflow.com/a/5359693/2437514">accepted answer</a> from @Ignacio Vazquez-Abrams is sufficient. However, others interested in this question may want to consider inheriting their class from an <a href="https://www.python.org/dev/peps/pep-3119/" rel="nofollow noreferrer">abstract base class (<code>ABC</code>)</a> (such as those found in the <a href="https://docs.python.org/3/library/collections.abc.html" rel="nofollow noreferrer">standard module <code>collections.abc</code></a>). This does a number of things (<a href="https://stackoverflow.com/questions/3570796/why-use-abstract-base-classes-in-python">there are probably others as well</a>):</p>
<ul>
<li>ensures that all of the methods you need to treat your object "like a ____" are there</li>
<li>it is self-documenting, in that someone reading your code is able to instantly know that you intend your object to "act like a ____".</li>
<li>allows <code>isinstance(myobject,SomeABC)</code> to work correctly.</li>
<li>often provides methods auto-magically so we don't have to define them ourselves</li>
</ul>
<p>(Note that, in addition to the above, <em>creating your own <code>ABC</code></em> can allow you to test for the presence of a specific method or set of methods in any object, and based on this to declare that object to be a subclass of the <code>ABC</code>, <strong><em>even if the object does not inherit from the <code>ABC</code>directly</em></strong>. <a href="https://stackoverflow.com/a/19328146/2437514">See this answer for more information.</a>)</p>
<hr/>
<h2>Example: implement a read-only, <code>list</code>-like class using <code>ABC</code></h2>
<p>Now as an example, let's choose and implement an <code>ABC</code> for the class in the original question. There are two requirements:</p>
<ol>
<li>the class is iterable</li>
<li>access the class by index</li>
</ol>
<p>Obviously, this class is going to be some kind of collection. So what we will do is look at our <a href="https://docs.python.org/3/library/collections.abc.html#collections-abstract-base-classes" rel="nofollow noreferrer">menu of <code>collection</code> ABC's</a> to find the appropriate <code>ABC</code> (note that there are also <a href="https://docs.python.org/3/library/numbers.html" rel="nofollow noreferrer"><code>numeric</code> ABCs</a>). The appropriate <code>ABC</code> is dependent upon which abstract methods we wish to use in our class. </p>
<p>We see that an <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterable" rel="nofollow noreferrer"><code>Iterable</code></a> is what we are after if we want to use the method <code>__iter__()</code>, which is what we need in order to do things like <code>for o in myobject:</code>. However, an <code>Iterable</code> does not include  the method <code>__getitem__()</code>, which is what we need in order to do things like <code>myobject[i]</code>. So we'll need to use a different <code>ABC</code>. </p>
<p>On down the <code>collections.abc</code> menu of abstract base classes, we see that a <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence" rel="nofollow noreferrer"><code>Sequence</code></a> is the simplest <code>ABC</code> to offer the functionality we require. And - would you look at that - we get <code>Iterable</code> functionality as a mixin method - which means we don't have to define it ourselves - for free! We also get <code>__contains__</code>, <code>__reversed__</code>, <code>index</code>, and <code>count</code>. Which, if you think about it, are all things that <em>should</em> be included in any indexed object. If you had forgotten to include them, users of your code (including, potentially, yourself!) might get pretty annoyed (I know I would). </p>
<p>However, there is a second <code>ABC</code> that also offers this combination of functionality (iterable, and accessible by <code>[]</code>): a <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping" rel="nofollow noreferrer"><code>Mapping</code></a>. Which one do we want to use?</p>
<p>We recall that the requirement is to be able to access the object <em>by index</em> (like a <code>list</code> or a <code>tuple</code>), i.e. <strong>not</strong> <em>by key</em> (like a <code>dict</code>). Therefore, we select <code>Sequence</code> instead of <code>Mapping</code>.</p>
<hr/>
<p>Sidebar: It's important to note that a <code>Sequence</code> is read-only (as is a <code>Mapping</code>), so it will not allow us to do things like <code>myobject[i] = value</code>, or <code>random.shuffle(myobject)</code>. If we want to be able do things like that, we need to continue down the menu of <code>ABC</code>s and use a <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableSequence" rel="nofollow noreferrer"><code>MutableSequence</code></a> (or a <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableMapping" rel="nofollow noreferrer"><code>MutableMapping</code></a>), which will require implementing several additional methods.</p>
<hr/>
<h2>Example Code</h2>
<p>Now we are able to make our class. We define it, and have it inherit from <code>Sequence</code>. </p>
<pre><code>from collections.abc import Sequence

class MyClass(Sequence):
    pass
</code></pre>
<p>If we try to use it, the interpreter will tell us which methods we need to implement before it can be used (note that the methods are also listed on the Python docs page): </p>
<pre><code>&gt;&gt;&gt; myobject = MyClass()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: Can't instantiate abstract class MyClass with abstract methods __getitem__, __len__
</code></pre>
<p>This tells us that if we go ahead and implement <code>__getitem__</code> and <code>__len__</code>, we'll be able to use our new class. We might do it like this in Python 3:</p>
<pre><code>from collections.abc import Sequence

class MyClass(Sequence):
    def __init__(self,L):
        self.L = L
        super().__init__()
    def __getitem__(self, i):
        return self.L[i]
    def __len__(self):
        return len(self.L)

# Let's test it:
myobject = MyClass([1,2,3])
try:
    for idx,_ in enumerate(myobject):
        print(myobject[idx])
except Exception:
    print("Gah! No good!")
    raise
# No Errors!
</code></pre>
<p><a href="https://youtu.be/RYeItuUDy0c?t=17" rel="nofollow noreferrer">It works!</a></p>
</div>
<span class="comment-copy">p.s. the data contains a list attribute of course and I can do class().list[1] but can I do class()[1]?</span>
<span class="comment-copy">Irrelevant but if you are using <code>class</code> like that, you are bound to get errors.</span>
<span class="comment-copy">Very cool - I was not aware of the <code>collections.abc</code> module!</span>
<span class="comment-copy">You'll find that some Pythonistas on the Internetz don't seem to like the idea of including abstract classes and methods as part the language (to summarize/parody their reasoning a bit, Python is supposed to be "NOT Java!"). However, they seem to be extremely useful, so I'm glad they're there.</span>
<span class="comment-copy">Also: be sure to take a look at the <a href="https://docs.python.org/3/library/abc.html" rel="nofollow noreferrer"><code>abc</code> module as well</a>, which allows you to create your own ABCs.</span>
<span class="comment-copy">Thanks for pointing this out, I was just looking up to to implement indexing, but I guess I'll go ahead and use an ABC instead. Very handy!</span>
<span class="comment-copy">The Abstract Base classes were moved from collections to collections.abc in python 3. In python 2 just use <code>from collections import Sequence</code></span>
