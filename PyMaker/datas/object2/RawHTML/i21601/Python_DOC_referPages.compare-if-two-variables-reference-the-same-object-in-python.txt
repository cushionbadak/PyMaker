<div class="post-text" itemprop="text">
<p>How to check whether two variables reference the same object?</p>
<pre><code>x = ['a', 'b', 'c']
y = x                 # x and y reference the same object
z = ['a', 'b', 'c']   # x and z reference different objects
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That’s what <a href="https://docs.python.org/3/reference/expressions.html#is" rel="noreferrer"><code>is</code></a> is for: <code>x is y</code> returns <code>True</code> if <code>x</code> and <code>y</code> are the same object.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>y is x</code> will be True, <code>y is z</code> will be <code>False</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>While the two correct solutions <code>x is z</code> and <code>id(x) == id(z)</code> I want to point out an implementation detail of python. Python stores integers as objects, as an optimization it generates a bunch of small integers at its start (-5 to 256) and points EVERY variable holding an integer with a small value to these preinitialized objects. <a href="http://www.laurentluce.com/posts/python-integer-objects-implementation/" rel="noreferrer">More Info</a></p>
<p>This means that for integer objects initialized to the same small numbers (-5 to 256) checking if two objects are the same will return true (ON C-Pyhon, as far as I am aware this is an implementation detail), while for larger numbers this only returns true if one object is initialized form the other.</p>
<pre><code>&gt; i = 13
&gt; j = 13
&gt; i is j
True

&gt; a = 280
&gt; b = 280
&gt; a is b
False

&gt; a = b
&gt; a
280
&gt; a is b
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also use <a href="https://docs.python.org/3/library/functions.html#id" rel="nofollow noreferrer">id()</a> to check which unique object each variable name refers to.</p>
<pre><code>In [1]: x1, x2 = 'foo', 'foo'

In [2]: x1 == x2
Out[2]: True

In [3]: id(x1), id(x2)
Out[3]: (4509849040, 4509849040)

In [4]: x2 = 'foobar'[0:3]

In [5]: x2
Out[5]: 'foo'

In [6]: x1 == x2
Out[6]: True

In [7]: x1 is x2
Out[7]: False

In [8]: id(x1), id(x2)
Out[8]: (4509849040, 4526514944)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I really like to have a visual feedback, that's why I sometimes  just open up <a href="http://www.pythontutor.com/visualize.html#mode=edit" rel="nofollow noreferrer">http://www.pythontutor.com/visualize.html#mode=edit</a> to see how the memory is allocated and what is referencing what. </p>
<p><a href="https://i.stack.imgur.com/17GV8.gif" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/17GV8.gif"/></a></p>
<p>Added this awesome gif as this reply is about visualizing..</p>
</div>
<div class="post-text" itemprop="text">
<p>This is from docs.python.org: "Every object has an identity, a type and a value. An object’s identity never changes once it has been created; you may think of it as the object’s address in memory. The ‘is’ operator compares the identity of two objects; the id() function returns an integer representing its identity."</p>
<p>Apparently every time you change the value the object is recreated as indicated by the identity changing.  The line x=3 followed by the line x=3.14 gives no error &amp; gives different identities, types and values for x.</p>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/3647546/how-do-i-check-if-two-variables-reference-the-same-object-in-python">How do I check if two variables reference the same object in Python?</a></span>
<span class="comment-copy">In the example, <code>x is z</code> returns <code>False</code>.  But if x and z are assigned the same values instead of lists (for example <code>x, z = 13, 13</code>) then <code>x is z</code> returns <code>True</code>.  Why is that?</span>
<span class="comment-copy">@Bill: That is an artefact of how python handles ints. Python allocates integer objects to which <code>x</code> and <code>z</code> point. Since small integers are failry common (-1 as an error value, 0 any time you actually index something, small numbers are usually reasonable default values) Python optimizes by preallocating small numbers (-5 to 256) and reuses the same integer object. Thus your example only works for numbers in this range. Try assigning something larger, i.e. <code>270</code>. For more info look <a href="http://www.laurentluce.com/posts/python-integer-objects-implementation/" rel="nofollow noreferrer">here</a></span>
<span class="comment-copy">@Bill @ted For immutable objects, such as integers, floats, strings or tuples, <code>is</code> is equivalent to <code>==</code>. When the object is immutable, there are no more possible <i>versions</i> of the object, nor is it possible to modify it, so asking whether the object <i>is</i> the same is irrelevant, and there is only one such object that all variables reference.</span>
<span class="comment-copy">@AndresR No that is wrong. <code>is</code> checks if two names reference the same memory location. It has nothing to do with the object itself. It's easy to have immuteable objects like strings that are equal but not stored at the same location, for example <code>''a'*10000 is 'a' * 10000</code> is False.</span>
<span class="comment-copy">@AndreasR For literal strings/numbers in the code the compiler checks that they exist only once and reuses them. Special values such as (), None, True, False etc are defined to be singletons too. During execution the runtime also tries to reuse small numbers and strings, but in the end it's a tradeoff between speed and memory and what happends depends on how the Python runtime was implemented.</span>
<span class="comment-copy">python3.6: a = 98765; b = 98765; a is b =&gt; True. Something has changed apparently.</span>
<span class="comment-copy">@MikhailKalashnikov Nope. I tested on Python 3.6.2, this still exists.</span>
