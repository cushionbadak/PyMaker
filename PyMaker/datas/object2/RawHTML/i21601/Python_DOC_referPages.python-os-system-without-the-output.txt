<div class="post-text" itemprop="text">
<p>I'm running this:</p>
<pre><code>os.system("/etc/init.d/apache2 restart")
</code></pre>
<p>It restarts the webserver, as it should, and like it would if I had run the command directly from the terminal, it outputs this:</p>
<p><code>* Restarting web server apache2                                                 ...</code>
<code>waiting                                                             [ OK ]</code></p>
<p>However, I don't want it to actually output it in my app. How can I disable it?
Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Avoid <code>os.system()</code> by all means, and use subprocess instead:</p>
<pre><code>with open(os.devnull, 'wb') as devnull:
    subprocess.check_call(['/etc/init.d/apache2', 'restart'], stdout=devnull, stderr=subprocess.STDOUT)
</code></pre>
<p>This is the <code>subprocess</code> equivalent of the <code>/etc/init.d/apache2 restart &amp;&gt; /dev/null</code>.</p>
<p>There is <a href="https://docs.python.org/3/library/subprocess.html#subprocess.DEVNULL" rel="noreferrer"><code>subprocess.DEVNULL</code> on Python 3.3+</a>:</p>
<pre><code>#!/usr/bin/env python3
from subprocess import DEVNULL, STDOUT, check_call

check_call(['/etc/init.d/apache2', 'restart'], stdout=DEVNULL, stderr=STDOUT)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should use the <code>subprocess</code> module using which you can control the <code>stdout</code> and <code>stderr</code> in a flexible fashion. <code>os.system</code> is deprecated. </p>
<p>The <code>subprocess</code> module allows you to create an object which represents a running external process. You can read it from it's stdout/stderr, write to it's stdin, send it signals, terminate it etc. The main object in the module is <code>Popen</code>. There are a bunch of other convenience methods like call etc. The <a href="http://docs.python.org/library/subprocess.html">docs</a> are very comprehensive and include a <a href="http://docs.python.org/library/subprocess.html#replacing-older-functions-with-the-subprocess-module">section on replacing the older functions (including <code>os.system</code>)</a>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Depending on your OS (and that's why as Noufal said, you should use subprocess instead) you can try something like</p>
<pre><code> os.system("/etc/init.d/apache restart &gt; /dev/null")
</code></pre>
<p>or (to mute also the error)</p>
<pre><code>os.system("/etc/init.d/apache restart &gt; /dev/null 2&gt;&amp;1")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a system call function I pieced together several years ago and have used in various projects. If you don't want any output from the command at all you can just say <code>out = syscmd(command)</code> and then do nothing with <code>out</code>.</p>
<p>Tested and works in Python 2.7.12 and 3.5.2.</p>
<pre><code>def syscmd(cmd, encoding=''):
    """
    Runs a command on the system, waits for the command to finish, and then
    returns the text output of the command. If the command produces no text
    output, the command's return code will be returned instead.
    """
    p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=STDOUT,
        close_fds=True)
    p.wait()
    output = p.stdout.read()
    if len(output) &gt; 1:
        if encoding: return output.decode(encoding)
        else: return output
    return p.returncode
</code></pre>
</div>
<span class="comment-copy"><code>os.system("/etc/init.d/apache2 restart &gt;/dev/null")</code> will discard that output. As Noufal has said, <code>subprocess</code> is preferred. If you're wanting to make a quick adjustment to pre-existing code, though, redirecting to /dev/null might be an attractive option.</span>
<span class="comment-copy">@kirk: why a comment rather than a answer ?</span>
<span class="comment-copy">@mb14: I didn't think it was as "correct" as the recommendations to use subprocess. I thought of it as more of a side note, like "while I'm not exactly suggesting you do this, here's another idea."</span>
<span class="comment-copy">related: <a href="http://stackoverflow.com/q/11269575/4279">How to hide output of subprocess in Python 2.7</a></span>
<span class="comment-copy">this worked for me because i was looking for something which works in python 2 and 3.</span>
<span class="comment-copy">+1 for an actual example that shows how to solve the OPs problem using <code>subprocess</code>. :)</span>
<span class="comment-copy">+1 this is much clearer than the latter.</span>
<span class="comment-copy">Awesome. Thanks for answering. Which function would it be though? The docs confuse me. call? popen?</span>
<span class="comment-copy">+10 for an incomplete answer! This shows that voting and quality don't go hand in hand :-) . Noufal, you could mention the differences.</span>
<span class="comment-copy"><code>popen</code> but you should take some time and read through the docs. I imagine you've only skimmed through them. They're quite clear really.</span>
<span class="comment-copy">Do you have a source explicitly marking it as deprecated, as opposed to "not preferred"? Guido is on record as being opposed to its removal. I'm not disagreeing with your answer - subprocess is so much nicer! - just clarifying a point.</span>
<span class="comment-copy">Guido is generally against changing the standard library. The <a href="http://docs.python.org/library/os.html#os.system" rel="nofollow noreferrer">docs for <code>os.system</code></a> indicate that it's "preferable" to use subprocess.</span>
