<div class="post-text" itemprop="text">
<p>What is a classy way to way truncate a python datetime object? </p>
<p>In this particular case, to the day. So basically setting hour, minute, seconds, and microseconds to 0.</p>
<p>I would like the output to also be a datetime object, not a string.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this is what you're looking for...</p>
<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; dt = datetime.datetime.now()
&gt;&gt;&gt; dt = dt.replace(hour=0, minute=0, second=0, microsecond=0) # Returns a copy
&gt;&gt;&gt; dt
datetime.datetime(2011, 3, 29, 0, 0)
</code></pre>
<p>But if you really don't care about the time aspect of things, then you should really only be passing around <code>date</code> objects...</p>
<pre><code>&gt;&gt;&gt; d_truncated = datetime.date(dt.year, dt.month, dt.day)
&gt;&gt;&gt; d_truncated
datetime.date(2011, 3, 29)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a <code>date</code> not a <code>datetime</code> if you dont care about the time.</p>
<pre><code>&gt;&gt;&gt; now = datetime.now()
&gt;&gt;&gt; now.date()
datetime.date(2011, 3, 29)
</code></pre>
<p>You can update a datetime like this:</p>
<pre><code>&gt;&gt;&gt; now.replace(minute=0, hour=0, second=0, microsecond=0)
datetime.datetime(2011, 3, 29, 0, 0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>Four years later: another way, avoiding <code>replace</code></h2>
<p>I know the accepted answer from four years ago works, but this seems a tad lighter than using <code>replace</code>:</p>
<pre><code>dt = datetime.date.today()
dt = datetime.datetime(dt.year, dt.month, dt.day)
</code></pre>
<p><strong>Notes</strong></p>
<ul>
<li>When you create a <code>datetime</code> object without passing time properties to the constructor, you get midnight.</li>
<li>As others have noted, this assumes you want a datetime object for later use with timedeltas. </li>
<li>You can, of course, substitute this for the first line: <code>dt = datetime.datetime.now()</code></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You cannot truncate a datetime object because <a href="http://docs.python.org/library/datetime.html#available-types" rel="noreferrer">it is immutable</a>.</p>
<p>However, here is one way to construct a new datetime with 0 hour, minute, second, and microsecond fields, without throwing away the original date or tzinfo:</p>
<pre><code>newdatetime = now.replace(hour=0, minute=0, second=0, microsecond=0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To get a midnight corresponding to a given datetime object, you could use <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.combine" rel="nofollow noreferrer"><code>datetime.combine()</code> method</a>:</p>
<pre><code>&gt;&gt;&gt; from datetime import datetime, time
&gt;&gt;&gt; dt = datetime.utcnow()
&gt;&gt;&gt; dt.date()
datetime.date(2015, 2, 3)
&gt;&gt;&gt; datetime.combine(dt, time.min)
datetime.datetime(2015, 2, 3, 0, 0)
</code></pre>
<p>The advantage compared to <a href="https://stackoverflow.com/a/5476114/4279">the <code>.replace()</code> method</a> is that <code>datetime.combine()</code>-based solution will continue to work even if <a href="http://bugs.python.org/issue15443" rel="nofollow noreferrer"><code>datetime</code> module introduces the nanoseconds support</a>.</p>
<p><code>tzinfo</code> can be preserved if necessary but the utc offset may be different at midnight e.g., due to a DST transition and therefore a naive solution (setting <code>tzinfo</code> time attribute) may fail. See <a href="https://stackoverflow.com/a/11236372/4279">How do I get the UTC time of “midnight” for a given timezone?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://pandas.pydata.org/" rel="noreferrer">pandas</a> for that (although it could be overhead for that task). You could use <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Timestamp.round.html" rel="noreferrer">round</a>, <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Timestamp.floor.html" rel="noreferrer">floor</a> and <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Timestamp.ceil.html" rel="noreferrer">ceil</a> like for usual numbers and any pandas frequency from <a href="http://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases" rel="noreferrer">offset-aliases</a>:</p>
<pre><code>import pandas as pd
import datetime as dt

now = dt.datetime.now()
pd_now = pd.Timestamp(now)

freq = '1d'
pd_round = pd_now.round(freq)
dt_round = pd_round.to_pydatetime()

print(now)
print(dt_round)

"""
2018-06-15 09:33:44.102292
2018-06-15 00:00:00
"""
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use datetime.strftime to extract the day, the month, the year...</p>
<p>Example :</p>
<pre><code>from datetime import datetime
d = datetime.today()

# Retrieves the day and the year
print d.strftime("%d-%Y")
</code></pre>
<p>Output (for today):</p>
<pre><code>29-2011
</code></pre>
<p>If you just want to retrieve the day, you can use day attribute like :</p>
<pre><code>from datetime import datetime
d = datetime.today()

# Retrieves the day
print d.day
</code></pre>
<p>Ouput (for today):</p>
<pre><code>29
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is a great library used to manipulate dates: <a href="http://delorean.readthedocs.org/en/latest/quickstart.html" rel="nofollow">Delorean</a></p>
<pre><code>import datetime
from delorean import Delorean
now = datetime.datetime.now()
d = Delorean(now, timezone='US/Pacific)

&gt;&gt;&gt; now    
datetime.datetime(2015, 3, 26, 19, 46, 40, 525703)

&gt;&gt;&gt; d.truncate('second')
Delorean(datetime=2015-03-26 19:46:40-07:00, timezone=US/Pacific)

&gt;&gt;&gt; d.truncate('minute')
Delorean(datetime=2015-03-26 19:46:00-07:00, timezone=US/Pacific)

&gt;&gt;&gt; d.truncate('hour')
Delorean(datetime=2015-03-26 19:00:00-07:00, timezone=US/Pacific)

&gt;&gt;&gt; d.truncate('day')
Delorean(datetime=2015-03-26 00:00:00-07:00, timezone=US/Pacific)

&gt;&gt;&gt; d.truncate('month')
Delorean(datetime=2015-03-01 00:00:00-07:00, timezone=US/Pacific)

&gt;&gt;&gt; d.truncate('year')
Delorean(datetime=2015-01-01 00:00:00-07:00, timezone=US/Pacific)
</code></pre>
<p>and if you want to get datetime value back:</p>
<pre><code>&gt;&gt;&gt; d.truncate('year').datetime
datetime.datetime(2015, 1, 1, 0, 0, tzinfo=&lt;DstTzInfo 'US/Pacific' PDT-1 day, 17:00:00 DST&gt;)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is a module datetime_truncate which handlers this for you. It just calls datetime.replace.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use just datetime.date.today() it's light and return exaclty what you want</p>
</div>
<div class="post-text" itemprop="text">
<p>6 years later... I found this post and I liked more the numpy aproach:</p>
<pre><code>import numpy as np
dates_array = np.array(['2013-01-01', '2013-01-15', '2013-01-30']).astype('datetime64[ns]')
truncated_dates = dates_array.astype('datetime64[D]')
</code></pre>
<p>cheers</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are dealing with a Series of type DateTime there is a more efficient way to truncate them, specially when the Series object has a lot of rows. </p>
<p>You can use the <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.dt.floor.html" rel="nofollow noreferrer">floor</a> function </p>
<p>For example, if you want to truncate it to hours: </p>
<p>Generate a range of dates</p>
<pre><code>times = pd.Series(pd.date_range(start='1/1/2018 04:00:00', end='1/1/2018 22:00:00', freq='s'))
</code></pre>
<p>We can check it comparing the running time between the replace and the floor functions.</p>
<pre><code>%timeit times.apply(lambda x : x.replace(minute=0, second=0, microsecond=0))
&gt;&gt;&gt; 341 ms ± 18.2 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)

%timeit times.dt.floor('h')
&gt;&gt;&gt;&gt;2.26 ms ± 451 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; dt = datetime.datetime.now()
&gt;&gt;&gt; datetime.datetime.date(dt)
datetime.date(2019, 4, 2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What does truncate mean?</p>
<p>You have full control over the formatting by using the strftime() method and using an appropriate format string.</p>
<p><a href="http://docs.python.org/library/datetime.html#strftime-strptime-behavior" rel="nofollow">http://docs.python.org/library/datetime.html#strftime-strptime-behavior</a></p>
</div>
<span class="comment-copy">With a timezone-aware dt, datetime.datetime(dt.year, dt.month, dt.day) throws away the tzinfo information.</span>
<span class="comment-copy">if you're looking for just today, you can also do datetime.date.today()</span>
<span class="comment-copy">Note that python 2 and python 3 <a href="https://docs.python.org/3.4/library/datetime.html#datetime.datetime.replace" rel="nofollow noreferrer">docs</a> both state that the <code>replace()</code> method <i>returns</i> a datetime object, so the correct incantation would be: <code>dt = datetime.datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)</code></span>
<span class="comment-copy">OP wants <code>datetime</code>, not <code>date</code> object (that you could get using <code>dt.date()</code> call (no need to use the explicit constructor)). The <code>.replace()</code> method may fail if <a href="http://bugs.python.org/issue15443" rel="nofollow noreferrer"><code>datetime</code> adds nanosecond support</a>. You could <a href="http://stackoverflow.com/a/28311227/4279">use <code>datetime.combine()</code> instead</a>.</span>
<span class="comment-copy">@chrisw Why not just write it up in one line <code>datetime.datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)</code> ?</span>
<span class="comment-copy">With timezone-aware datetimes, now.date() throws away the tzinfo information.</span>
<span class="comment-copy">@ʇsәɹoɈ: here's how you could <a href="http://stackoverflow.com/a/11236372/4279">get the timezone-aware midnight</a></span>
<span class="comment-copy">+1: if you put the <code>replace</code> option first, since that's probably what they want.</span>
<span class="comment-copy">It is incorrect to use <code>tzinfo=now.tzinfo</code>. The <code>tzinfo</code> at midnight may be different e.g., utc offset at <code>2012-04-01 00:09:00</code> (9am) in Australia/Melbourne timezone is <code>AEST+10:00</code> but it is <code>AEDT+11:00</code> at <code>2012-04-01 00:00:00</code> (midnight) -- there is end-of-DST transition on that day. You could use <code>pytz</code> module to fix it, see my answer.</span>
<span class="comment-copy">Well the thing is I already do this once, so that might have more overhead then just setting the hour min etc fields in the datetime object.</span>
<span class="comment-copy">Heh, thats a weird way to do it, you can actually just do <code>d.day</code> etc.</span>
<span class="comment-copy">@Jochen Ritzel, yes ! I edited my answer ;-)</span>
<span class="comment-copy">it returns the wrong time (wrong utc offset) if the result time has a different utc offset e.g., due to a DST transition. See <a href="http://stackoverflow.com/a/11236372/4279">How do I get the UTC time of “midnight” for a given timezone?</a></span>
<span class="comment-copy">The same answer has been given before, there is nothing new.</span>
