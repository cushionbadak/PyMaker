<div class="post-text" itemprop="text">
<p>I have a class which expects a stream that contains an XML file.<br/>
I don't necessarily want a file stream and I might want to use other sources like a database, a socket etc.<br/>
What class do I need to subclass from the <a href="http://docs.python.org/library/io.html" rel="noreferrer">io module</a> in order to supply the stream interface from other sources?</p>
</div>
<div class="post-text" itemprop="text">
<p>Dynamic typing allows you not to subclass from any base class in this case. You should implement some methods with proper names. <a href="http://pysnippet.blogspot.com/2009/10/file-like-objects.html" rel="nofollow">Blog post on the subject</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The answer given by Andrey isn't entirely correct.</p>
<p>In Python, streams are "file-like" objects. You can read/write to them using tools defined in the <a href="https://docs.python.org/3/library/io.html" rel="nofollow noreferrer">io</a> module. The module also provides interfaces which you should implement if you want to define a stream object.</p>
<p>Note that the <code>io</code> module differentiates between three different types of streams, which require slightly different interfaces. (They differ mostly in terms of data types.)</p>
<ol>
<li>Text I/O - interface <a href="https://docs.python.org/3/library/io.html#io.TextIOBase" rel="nofollow noreferrer">TextIOBase</a></li>
<li>Binary I/O - interface <a href="https://docs.python.org/3/library/io.html#io.BufferedIOBase" rel="nofollow noreferrer">BufferedIOBase</a></li>
<li>Raw I/O - interface <a href="https://docs.python.org/3/library/io.html#io.RawIOBase" rel="nofollow noreferrer">RawIOBase</a></li>
</ol>
<p>StringIO for example is an in-memory implementation of the TextIOBase.</p>
<p>Note that these interfaces are available both on Python 2 and 3.</p>
</div>
<span class="comment-copy">A socket already has the same interface as another file.  A database connection usually provides a "blob" which can be turned into a file-line object using <code>StringIO</code>.  Why are you subclassing something when your "stream" interface (i.e., Python's <code>file</code>) already exists?  What's unique or different?</span>
<span class="comment-copy">Why deriving? Python is not C++. Are you sure that just passing something that has a proper <code>read()</code> method isn't enough?</span>
<span class="comment-copy">@6502: The XML file can be loaded from a database into a stream. I'm just encapsulating behavior.</span>
<span class="comment-copy">@S.Lott: I want an object that already turns the blob into a file-like object. This kind of object should have the same interface as the file object in order for it to work with my class which expects a stream.</span>
<span class="comment-copy">@the_drow.  That object is <code>StringIO.StringIO( blob )</code>.  What more do you need?</span>
<span class="comment-copy">What I don't get is why I shouldn't sub class. In any case my interface should be the stream's interface.</span>
<span class="comment-copy">I wrote only that you are able not to subclass using inheritance mechanism and may create your class and implement methods with needed signature is necessary and sufficient</span>
