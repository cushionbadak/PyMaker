<div class="post-text" itemprop="text">
<p>How do I retrieve the exit code when using Python's <code>subprocess</code> module and the <code>communicate()</code> method?</p>
<p>Relevant code:</p>
<pre><code>import subprocess as sp
data = sp.Popen(openRTSP + opts.split(), stdout=sp.PIPE).communicate()[0]
</code></pre>
<p>Should I be doing this another way?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>Popen.communicate</code> will set the <code>returncode</code> attribute when it's done(*). Here's the relevant documentation section:</p>
<pre><code>Popen.returncode 
  The child return code, set by poll() and wait() (and indirectly by communicate()). 
  A None value indicates that the process hasnâ€™t terminated yet.

  A negative value -N indicates that the child was terminated by signal N (Unix only).
</code></pre>
<p>So you can just do (I didn't test it but it should work):</p>
<pre><code>import subprocess as sp
child = sp.Popen(openRTSP + opts.split(), stdout=sp.PIPE)
streamdata = child.communicate()[0]
rc = child.returncode
</code></pre>
<hr/>
<p>(*) This happens because of the way it's implemented: after setting up threads to read the child's streams, it just calls <code>wait</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>You should first make sure that the process has completed running and the return code has been read out using the <code>.wait</code> method. This will return the code. If you want access to it later, it's stored as <code>.returncode</code> in the <code>Popen</code> object. </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/library/subprocess.html#subprocess.Popen.wait" rel="noreferrer"><code>exitcode = data.wait()</code></a>. The child process will be blocked If it writes to standard output/error, and/or reads from standard input, and there are no peers.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>.poll()</code> will update the return code.</p>
<p>Try</p>
<pre><code>child = sp.Popen(openRTSP + opts.split(), stdout=sp.PIPE)
returnCode = child.poll()
</code></pre>
<p>In addition, after <code>.poll()</code> is called the return code is available in the object as <code>child.returncode</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This worked for me. It also prints the output returned by the child process</p>
<pre><code>child = subprocess.Popen(serial_script_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    retValRunJobsSerialScript = 0
    for line in child.stdout.readlines()
        child.wait()
        print line           
    retValRunJobsSerialScript= child.returncode
</code></pre>
</div>
<span class="comment-copy">This example helped me, but it would be nice if examples didn't do the "import subprocess as sp" pattern of importing something standard as an obscure abbreviation. While this trims 8 characters off the code that follows it, it also makes it difficult to understand and reuse.</span>
<span class="comment-copy">@uglycoyote There's no rule that says you have to copy and paste. Just retype it however you want, it's like 4 like lines.</span>
<span class="comment-copy">@uglycoyote you could also edit it to be something like <code>from subprocess import Popen</code> and then just use <code>Popen</code> instead of <code>subprocess(or sp).Popen</code> which I'd say probably increases readability and shortens lines</span>
<span class="comment-copy">Yeah... must call <code>process.communicate()</code> and then assign <code>returncode</code> to some variable. If the assignment is done before calling <code>communicate</code>, is <code>None</code>.</span>
<span class="comment-copy">Is it possible to show the return code without redirecting the pipe? I am calling a bash code and I would like to see the output in real time in the terminal</span>
<span class="comment-copy"><code>.communicate()</code> already waits for the subprocess to terminate.</span>
<span class="comment-copy">when I did this .poll() was empty.  I had to run child.communicate() in the line above child.poll() for this to work.</span>
<span class="comment-copy">I think you meant to use .wait() instead of .poll(), as per documentation: <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">docs.python.org/3/library/subprocess.html</a>. Note that .wait() takes an optional timeout param which can be convenient.</span>
