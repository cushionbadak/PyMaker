<div class="post-text" itemprop="text">
<p>I have the following definition for an Identifier:</p>
<pre><code>Identifier --&gt; letter{ letter| digit}
</code></pre>
<p>Basically I have an identifier function  that  gets a string from a file and tests it to make sure that it's a valid identifier as defined above.</p>
<p>I've tried this:</p>
<pre><code>if re.match('\w+(\w\d)?', i):     
  return True
else:
  return False
</code></pre>
<p>but when I run my  program every time it meets an integer it  thinks that  it's a valid identifier.</p>
<p>For example </p>
<pre><code>c = 0 ;
</code></pre>
<p>it  prints <code>c</code> as a valid identifier which is fine, but it also prints <code>0</code> as a valid identifer.</p>
<p>What  am I doing  wrong here?</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="http://docs.python.org/reference/lexical_analysis.html#identifiers" rel="nofollow noreferrer">official reference</a>: <code>identifier ::=  (letter|"_") (letter | digit | "_")*</code></p>
<p>So the regular expression is:</p>
<pre><code>^[^\d\W]\w*\Z
</code></pre>
<p>Example (for Python 2 just omit <code>re.UNICODE</code>):</p>
<pre><code>import re
identifier = re.compile(r"^[^\d\W]\w*\Z", re.UNICODE)

tests = [ "a", "a1", "_a1", "1a", "aa$%@%", "aa bb", "aa_bb", "aa\n" ]
for test in tests:
    result = re.match(identifier, test)
    print("%r\t= %s" % (test, (result is not None)))
</code></pre>
<p>Result:</p>
<pre><code>'a' = True
'a1'    = True
'_a1'   = True
'1a'    = False
'aa$%@%'    = False
'aa bb' = False
'aa_bb' = True
'aa\n'  = False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For Python 3, you need to handle Unicode letters and digits. So if that's a concern, you should get along with this: </p>
<pre><code>re_ident = re.compile(r"^[^\d\W]\w*$", re.UNICODE)
</code></pre>
<p><code>[^\d\W]</code> matches a character that is not a digit and not "not alphanumeric" which translates to "a character that is a letter or underscore".</p>
</div>
<div class="post-text" itemprop="text">
<p>\w matches digits and characters. Try <code>^[_a-zA-Z]\w*$</code></p>
</div>
<div class="post-text" itemprop="text">
<p><strong><a href="https://docs.python.org/3.3/library/stdtypes.html#str.isidentifier" rel="nofollow noreferrer"><code>str.isidentifier()</code></a></strong> works. The regex answers incorrectly fail to match some valid python identifiers and incorrectly match some invalid ones.</p>
<blockquote>
<p>str.isidentifier() Return true if the string is a valid identifier
  according to the language definition, section Identifiers and
  keywords.</p>
<p>Use keyword.iskeyword() to test for reserved identifiers such as def
  and class.</p>
</blockquote>
<p>@martineau's comment gives the example of <code>'℘᧚'</code> where the regex solutions fail.</p>
<pre><code>&gt;&gt;&gt; '℘᧚'.isidentifier()
True
&gt;&gt;&gt; import re
&gt;&gt;&gt; bool(re.search(r'^[^\d\W]\w*\Z', '℘᧚'))
False
</code></pre>
<h3>Why does this happen?</h3>
<p>Lets define the sets of code points that match the given regular expression, and the set that match <code>str.isidentifier</code>.</p>
<pre><code>import re
import unicodedata

chars = {chr(i) for i in range(0x10ffff) if re.fullmatch(r'^[^\d\W]\w*\Z', chr(i))}
identifiers = {chr(i) for i in range(0x10ffff) if chr(i).isidentifier()}
</code></pre>
<p>How many regex matches are not identifiers?</p>
<pre><code>In [26]: len(chars - identifiers)                                                                                                               
Out[26]: 698
</code></pre>
<p>How many identifiers are not regex matches?</p>
<pre><code>In [27]: len(identifiers - chars)                                                                                                               
Out[27]: 4
</code></pre>
<p>Interesting -- which ones?</p>
<pre><code>In [37]: {(c, unicodedata.name(c), unicodedata.category(c)) for c in identifiers - chars}                                                       
Out[37]: 
set([
    ('\u1885', 'MONGOLIAN LETTER ALI GALI BALUDA', 'Mn'),
    ('\u1886', 'MONGOLIAN LETTER ALI GALI THREE BALUDA', 'Mn'),
    ('℘', 'SCRIPT CAPITAL P', 'Sm'),
    ('℮', 'ESTIMATED SYMBOL', 'So'),
])
</code></pre>
<h3>What's different about these two sets?</h3>
<p>They have different Unicode "General Category" values.</p>
<pre><code>In [31]: {unicodedata.category(c) for c in chars - identifiers}                                                                                 
Out[31]: set(['Lm', 'Lo', 'No'])
</code></pre>
<p>From <a href="https://en.wikipedia.org/wiki/Unicode_character_property#General_Category" rel="nofollow noreferrer">wikipedia</a>, that's <code>Letter, modifier</code>; <code>Letter, other</code>; <code>Number, other</code>. This is consistent with the <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">re docs</a>, since <code>\d</code> is only decimal digits:</p>
<blockquote>
<p><code>\d</code> Matches any Unicode decimal digit (that is, any character in Unicode character category [Nd])</p>
</blockquote>
<p>What about the other way?</p>
<pre><code>In [32]: {unicodedata.category(c) for c in identifiers - chars}                                                                                 
Out[32]: set(['Mn', 'Sm', 'So'])
</code></pre>
<p>That's <code>Mark, nonspacing</code>; <code>Symbol, math</code>; <code>Symbol, other</code>.</p>
<h3>Where is this all documented?</h3>
<ul>
<li>In the <a href="https://docs.python.org/3/reference/lexical_analysis.html#identifiers" rel="nofollow noreferrer">Python Language Reference</a></li>
<li>In <a href="https://www.python.org/dev/peps/pep-3131/" rel="nofollow noreferrer">PEP 3131 - Supporting non-ascii identifiers</a> </li>
</ul>
<h3>Where is it implemented?</h3>
<p><a href="https://github.com/python/cpython/commit/47383403a0a11259acb640406a8efc38981d2255" rel="nofollow noreferrer">https://github.com/python/cpython/commit/47383403a0a11259acb640406a8efc38981d2255</a></p>
<h3>I still want a regular expression</h3>
<p>Look at the <a href="https://pypi.org/project/regex/" rel="nofollow noreferrer">regex</a> module on PyPI.</p>
<blockquote>
<p>This regex implementation is backwards-compatible with the standard ‘re’ module, but offers additional functionality.</p>
</blockquote>
<p>It includes filters for "General Category".</p>
</div>
<div class="post-text" itemprop="text">
<p>Works like a charm: <code>r'[^\d\W][\w\d]+'</code></p>
</div>
<span class="comment-copy">You know your definition isn't the same as Python's, right? Python allows underscores too.</span>
<span class="comment-copy">All of the regex answers are not quite right, <a href="https://stackoverflow.com/a/54059733/3346095Z">see below</a>.</span>
<span class="comment-copy">I might be worth mentioning that this matches kewords such as <code>True</code>, <code>return</code> etc. I'm not suggesting a change to the regex but just that the OP might want to bear that in mind.</span>
<span class="comment-copy">@JoeCondron This is also very easy to do, since Python contains the <code>keyword.iskeyword</code> function, which is merely a wrapper around the keyword list frozenset.</span>
<span class="comment-copy">In Python 3.6 at least, this doesn't work for the Unicode string <code>'℘᧚'</code> even though that <b>is</b> a valid identifier in Python 3 (and isn't a keyword).</span>
<span class="comment-copy">Almost there... but not quite... it will fail for single-letter identifiers "a", and it also allows "aa@#$%" as a valid identifier</span>
<span class="comment-copy">@MestreLion: Thanks, you're right of course. I've edited my answer.</span>
<span class="comment-copy">Careful, Python 3 allows all Unicode letters and digits in its identifiers.</span>
<span class="comment-copy">Should it be "[_a-zA-Z]\w*" since you want to match 0 or more after the initial character?</span>
<span class="comment-copy">Updated it, your right</span>
<span class="comment-copy">That will match "a$%@#%" as a valid identifier</span>
<span class="comment-copy">Can you provide an example of when this works but the regex(es) fail?</span>
<span class="comment-copy">@martineau done</span>
<span class="comment-copy">Indeed, you're right — but that surprises me because the <code>re</code> documentation seems to indicate that it support Unicode strings (even without a <code>re.UNICODE</code> flag in Python 3.x).</span>
<span class="comment-copy">@martineau Out of curiosity, how did you run across that particular one?</span>
<span class="comment-copy">I was developing a regex to recognize Python "special" method names i.e those start and end with two underscore characters. <code>__</code> — aka "dunder" names, so was searching this site for a general one that recognized any valid identifier. Guess, I'll have to give-up on doing it with an <code>re</code> regex...in fact, I now suspect the module's limitation/bug may be why the string<code>isidentifier</code> method was added in Python 3.</span>
<span class="comment-copy">For isolated <code>_</code>, this may not work.</span>
