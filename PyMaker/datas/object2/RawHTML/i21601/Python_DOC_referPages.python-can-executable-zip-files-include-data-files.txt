<div class="post-text" itemprop="text">
<p>Being fairly new to python I only recently discovered the ability to directly execute a .zip file by placing a <code>__main__.py</code> file at the top of the file. This works great for python code, but can I bundle other types of files and access them with my scripts? If so, how?</p>
<p>My ultimate goal would be to bundle some image files along with the python code in a single .zip file, then be able to use those images within the app without having to extract them to disk. I also would like to bundle a copyright notice, release notes, etc so that the entire app and its data files is in a single zip that can be executed without having to extract it somewhere. </p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="http://packages.python.org/setuptools/pkg_resources.html#basic-resource-access" rel="noreferrer"><code>pkg_resources</code></a> functions to access files:</p>
<pre><code># __main__.py
import pkg_resources
from PIL import Image

print pkg_resources.resource_string(__name__, 'README.txt')

im = Image.open(pkg_resources.resource_stream('app', 'im.png'))
im.rotate(45).show()
</code></pre>
<p>Where zipfile contains:</p>
<pre>.
|-- app
|   |-- im.png
|   `-- __init__.py
|-- README.txt
`-- __main__.py</pre>
<p>To make zipfile executable, run:</p>
<pre><code>$ echo '#!/usr/bin/env python' | cat - zipfile &gt; program-name
$ chmod +x program-name
</code></pre>
<p>To test it:</p>
<pre><code>$ cp program-name /another-dir/
$ cd /another-dir &amp;&amp; ./program-name
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>simply use <a href="http://docs.python.org/library/pkgutil.html#pkgutil.get_data" rel="nofollow noreferrer">pkgutil.get_data()</a> as suggested in <a href="https://stackoverflow.com/questions/2859413/distributing-an-executable-zip-file-with-main-py-how-to-access-extra-data/2861524#2861524">this answer</a></p>
</div>
<div class="post-text" itemprop="text">
<p>At least on my Linux box there is no open filehandle or mapped memory by the process to its own zipfile, so presumably there is no way to "magically" access it.</p>
<p>However, creating your own access is not that hard. Create a <code>__main__.py</code> like so:</p>
<pre><code>import os, zipfile

me = zipfile.ZipFile(os.path.dirname(__file__), 'r')
f = me.open('other.txt')
print f.read()
f.close()
me.close()
</code></pre>
<p>Edit: Somewhat terse, that. For completeness:</p>
<pre class="lang-bash prettyprint-override"><code>$ echo "Hello ZIP" &gt; other.txt
$ zip testo.zip __main__.py other.txt
$ python testo.zip
Hello ZIP
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>pkgutil.get_data(package, resource)</code> takes the name of a package and a resource. That means you have to put your data files inside a package within the zip file.</p>
<p>So for example a zip file containing:</p>
<pre><code>__main__.py
zippeddata/__init__.py
zippeddata/data.txt
</code></pre>
<p>The <code>__init__.py</code> file can be empty or just a comment, but you need one to make <code>zippeddata</code> importable.</p>
<p>Then in <code>__main__.py</code> you just call:</p>
<pre><code>data = pkgutil.get_data('zippeddata', 'data.txt')
</code></pre>
</div>
<span class="comment-copy">this works only with pkg_resources module distributed with setuptools installed</span>
<span class="comment-copy">there is <a href="https://docs.python.org/3/library/zipapp.html" rel="nofollow noreferrer"><code>zipapp</code> module in Python 3.5</a> that automates the archive creation.</span>
<span class="comment-copy">this only works if I put my files in a package, which means it won't work for a README.txt or COPYRIGHT.txt file at the root of the zip file. That's not a critical issue, but I would like to be able to put some files alongside the <b>main</b>.py at the top of the zip file hierarchy.</span>
<span class="comment-copy">Normally your main module is accessibles via import <code>__main__</code> you can refer to it</span>
<span class="comment-copy">Combell: I wish that were true. At least with my test .zip file on OSX and python 2.6, <b>main</b> is undefined.</span>
<span class="comment-copy">@Bryan Oakley: the zipfile is added as the first item in <code>sys.path</code> therefore you should always be able to import <code>__main__</code>. I've test my answer and README.txt stored along-side <code>__main__.py</code> in the zip-file can be read just fine <a href="http://stackoverflow.com/questions/5355694/python-can-executable-zip-files-include-data-files/5356563#5356563" title="python can executable zip files include data files">stackoverflow.com/questions/5355694/â€¦</a></span>
<span class="comment-copy"><code>s/I've test/I've tested/</code> ^^</span>
<span class="comment-copy">It never occurred to me to re-open the currently executing zipfile. Cool. Unfortunately, when I run my script on OSX <code>__file__</code> is <code>None</code>. I think this is a step in the right direction though.</span>
<span class="comment-copy">@Bryan Oakley: <code>sys.argv[0]</code> contains the zipfile path if the first line in the zipfile is <code>#!/usr/bin/env python</code> or similar.</span>
