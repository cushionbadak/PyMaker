<div class="post-text" itemprop="text">
<p>my idea is to make context logging scheme as showed on the example below:</p>
<pre><code>[   DEBUG] Parsing dialogs files
[   DEBUG] ... [DialogGroup_001]
[   DEBUG] ...... Indexing dialog xml file [c:\001_dlg.xml]
[   DEBUG] ......... dialog [LobbyA]
[   DEBUG] ............ speech nodes [3]
[   DEBUG] ............... [LobbyA_01]
[   DEBUG] ............... [LobbyA_02]
[   DEBUG] ............... [LobbyA_03]
[   DEBUG] ............ sms nodes [0]
[   DEBUG] ......... dialog [LobbyB]
[   DEBUG] ............ speech nodes [3]
[   DEBUG] ............... [LobbyB_01]
[   DEBUG] ............... [LobbyB_02]
[   DEBUG] ............... [LobbyB_03]
[   DEBUG] ............ sms nodes [0]
[   DEBUG] ... [DialogGroup_002]
[   DEBUG] ...... Indexing dialog xml file [c:\002_dlg.xml]
[   DEBUG] ......... dialog [HighGroundsA]
[   DEBUG] ............ speech nodes [3]
[   DEBUG] ............... [HighGroundsA_01]
[   DEBUG] ............... [HighGroundsA_02]
[   DEBUG] ............... [HighGroundsA_03]
[   DEBUG] ............ sms nodes [0]
</code></pre>
<p>At this point, I'm using a Python's logging module with custom, hand-written prefixes when logging, for example:</p>
<pre><code>(...)

log.debug('')
log.debug('Parsing dialogs files')
for dlg in defDlgList:
    log.debug('... [{0}]'.format(dlg))

(...)
</code></pre>
<p>It's working quite ok, but there are some subtle problems, for example: when logging from inside functions - they may be called from various scopes and prefix length may vary for each call.</p>
<p>I'm looking for a elegant and invisible way to establish a length of a '...' prefix automatically for each log. I'd rather avoid passing prefix length as a parameter to each func or setting the lenght using explicit calls, for example:</p>
<pre><code>(...)

logWrapper.debug('')
logWrapper.debug('Parsing dialogs files')
for dlg in defDlgList:
    logWrapper.nextLogLevelBegin()
    logWrapper.debug('[{0}]'.format(dlg))
    logWrapper.nextLogLevelEnd()

(...)
</code></pre>
<p>Is there a way to get the current indentation level from Python's parser or construct a scope sensitive wrapper class for logging?</p>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps you can use <a href="http://docs.python.org/library/inspect.html#inspect.getouterframes" rel="noreferrer">inspect.getouterframes</a> to find the indentation level:</p>
<pre><code>import inspect
import logging

logger=logging.getLogger(__name__)

def debug(msg):
    frame,filename,line_number,function_name,lines,index=inspect.getouterframes(
        inspect.currentframe())[1]
    line=lines[0]
    indentation_level=line.find(line.lstrip())
    logger.debug('{i} [{m}]'.format(
        i='.'*indentation_level,
        m=msg            
        ))

def foo():    
    debug('Hi Mom')
    for i in range(1):
        debug("Now we're cookin")

if __name__=='__main__':
    logging.basicConfig(level=logging.DEBUG)
    foo()
</code></pre>
<p>yields</p>
<pre><code>DEBUG:__main__:.... [Hi Mom]
DEBUG:__main__:........ [Now we're cookin]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Searching through the docs, I don't really see a way to get current indentation level. The best you can do, is get the current function nesting level, like this:</p>
<pre><code>len(traceback.extract_stack());
</code></pre>
<p>Example:</p>
<pre><code>import traceback;

def test():
    print len(traceback.extract_stack()); 

print len(traceback.extract_stack()); # prints 1
test(); # prints 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Combining the previous answers with <a href="https://stackoverflow.com/questions/17558552/how-do-i-add-custom-field-to-python-log-format-string">How do I add custom field to Python log format string?</a> can achieve the same result without needing to provide a custom debug() method (since the same would need to be done for each level info(), error(), etc).</p>
<pre><code>import logging
import traceback
class CustomAdapter(logging.LoggerAdapter):
    @staticmethod
    def indent():
        indentation_level = len(traceback.extract_stack())
        return indentation_level-4  # Remove logging infrastructure frames

    def process(self, msg, kwargs):
        return '{i}{m}'.format(i='\t'*self.indent(), m=msg), kwargs

logger = CustomAdapter(logging.getLogger(__name__), {})
logger.debug('A debug message')
logger.error('An error message')
logger.info('An info message')
</code></pre>
</div>
<span class="comment-copy">This is what I needed to know! :D:D:D:D Thank You very much!</span>
<span class="comment-copy">Combine this with <a href="https://docs.python.org/3/library/textwrap.html#textwrap.indent" rel="nofollow noreferrer">textwrap.indent</a> for great success</span>
<span class="comment-copy">This is useful, thank You! I'll combine this with solutions from choosen answer to make nested functions log correct.</span>
<span class="comment-copy">This snipped does not work for me (using Python 2.7). In addition, "logger" is not defined. Can you adjust/add the corresponding lines?</span>
<span class="comment-copy">@Mr.EpicFail I updated to fix the missing logger argument.  As for python 2.7, I'm not sure what's going on there.</span>
<span class="comment-copy">@Mr.EpicFail works fine for me with python 2.7</span>
