<div class="post-text" itemprop="text">
<p>i have buf="\x00\xFF\xFF\xFF\xFF\x00"</p>
<p>how can i get the "\xFF\xFF\xFF\xFF" randomize</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; "\x00"+os.urandom(4)+"\x00"
'\x00!\xc0zK\x00'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>bytearray(random.getrandbits(8) for _ in xrange(size))
</code></pre>
<p>Faster than other solutions but not cryptographically secure.</p>
</div>
<div class="post-text" itemprop="text">
<p>An alternative way to obtaining a secure random sequence of bytes could be to use the standard library <code>secrets</code> module, available since Python 3.6.</p>
<p>Example, based on the given question:</p>
<pre><code>import secrets
b"\x00" + secrets.token_bytes(4) + b"\x00"
</code></pre>
<p>More information can be found at:
<a href="https://docs.python.org/3/library/secrets.html" rel="noreferrer">https://docs.python.org/3/library/secrets.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Do you want the middle 4 bytes to be set to a random value?</p>
<pre><code>buf = '\x00' + ''.join(chr(random.randint(0,255)) for _ in range(4)) + '\x00'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>On POSIX platforms:</p>
<pre><code>open("/dev/urandom","rb").read(4)
</code></pre>
<p>Use <code>/dev/random</code> for better randomization.</p>
</div>
<div class="post-text" itemprop="text">
<p>I like using numpy library for that.</p>
<pre><code>import numpy as np

X_1KB = 1024
X_256KB = 256 * X_1KB
X_1MB = 1024 * 1024
X_4MB = 4 * X_1MB
X_32MB = 32 * X_1MB
X_64MB = 2 * X_32MB
X_128MB = X_1MB * 128


np.random.bytes( X_1MB )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simple:</p>
<pre><code>import random, operator
reduce(operator.add, ('%c' % random.randint(0, 255) for i in range(4)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from random import randint 
rstr = ''.join( randint(0, 255) for i in range(4) )
</code></pre>
</div>
<span class="comment-copy">i just check the python doc.. whats different with ''.join(chr(random.randint(0,255)) for _ in range(4))</span>
<span class="comment-copy">@zack, apart from being more efficent, randint returns <b>pseudo-random</b> numbers. urandom returns random bytes that are suitable for <b>cryptographic use</b></span>
<span class="comment-copy">@JohnLaRooy Unless <code>/dev/urandom</code> is using some hardware random number generator, its numbers are also pseudo-random. A deterministic machine will always generate pseudo-random numbers.</span>
<span class="comment-copy">@NullUserException, see <code>urandom</code><a href="https://docs.python.org/2/library/os.html#miscellaneous-functions" rel="nofollow noreferrer">here</a> <code>/dev/random</code> is a more random source of randomness, but blocks whenever there is not enough entropy.</span>
<span class="comment-copy">@JohnLaRooy I don't know how this addresses my comment. I'm just saying <code>/dev/random</code> (and also <code>/dev/urandom</code>) are pseudorandom number generators, just like <code>randint</code>. A CSPRNG is still pseudo-random. See <a href="http://stackoverflow.com/questions/5635277/is-dev-random-considered-truly-random">this question</a>.</span>
<span class="comment-copy">in practice, this is about 2.5 times faster than os.urandom if you leave the file descriptor open between calls. useful for random guesses at nonces for cryptocurrency hashes.</span>
<span class="comment-copy">@jcomeau_ictx Why would you use os.urandom if you don't need it to be cryptographically secure - there are much faster <code>prng</code>'s than os.urandom.</span>
<span class="comment-copy">@user3467349 To be fair, urandom is potentially truly random and not only PRNG</span>
<span class="comment-copy">That will return a string representation of a list, not a string as the OP asked.</span>
<span class="comment-copy">@yan Whoops, good spot.</span>
<span class="comment-copy"><code>"".join(...)</code> is the preferred way to turn a sequence into a string</span>
<span class="comment-copy"><code>NameError: name 'buf' is not defined</code></span>
<span class="comment-copy">Comment by anonymous user: You can't join anything but a list of strings into a <code>string</code> so change the <code>int</code> to <code>string</code> character. Code: <code>rstr = "".join( chr(randint(0, 255)) for i in range(4))</code>.</span>
