<div class="post-text" itemprop="text">
<p>I have a huge memory leak problem involving a C-extension I'm developing. In C, I have an array of doubles called <code>A</code> and an int variable called <code>AnotherIntVariable</code>that I want to pass to Python. Well, in my C-extension module I do the following:</p>
<pre><code>int i;  
PyObject *lst = PyList_New(len_A);  
PyObject *num;  
if(!lst)  
   return NULL;  
for(i=0;i&lt;len_A;i++){  
   num=PyFloat_FromDouble(A[i]);  
   if(!num){  
      Py_DECREF(lst);  
      return NuLL;  
   }  
   PyList_SET_ITEM(lst,i,num);  
}  
free(A);  
return Py_BuildValue("Oi",lst,AnotherIntVariable)
</code></pre>
<p>So in Python i recieve this list and the int like this:</p>
<pre><code>Pyt_A,Pyt_int=MyCModule.MyCFunction(...)
</code></pre>
<p>Where Pyt_A and Pyt_int are the list and the integer I get from my C-extension "<code>MyCModule</code>", from the function "<code>MyCFunction</code>" that I described earlier.</p>
<p>The problem is that, in Python, I use this <code>Pyt_A</code> array (so that's why I use <code>Py_BuildValue</code> instead of a simple <code>return</code> statement, to do an INCREF in order to save this variable for a moment from the garbage collector) but then I need to dereference it somehow in order to free that allocated memory. The problem is that I use the <code>MyCFunction</code> function several times, and this produces a memory leakage because I don't know how to dereference the array that I get in python in order to get rid of it.</p>
<p>I tried just returning the array by doing a <code>return lst</code> in the C part of the code instead of the <code>Py_BuildValue("Oi",lst,AnotherIntVariable)</code>, but that only results in a Segmentation Fault when I try to use it in python (probably because the garbage collector did his work)...</p>
<p>...what am I missing here? Can anybody help me?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you look at the documentation for <code>Py_BuildValue</code> (<a href="http://docs.python.org/3/c-api/arg.html#c.Py_BuildValue" rel="nofollow noreferrer">http://docs.python.org/3/c-api/arg.html#c.Py_BuildValue</a>) you can see that under the <code>O</code> typecode, it says that the reference count of the passed in object is incremented by one (Note: an earlier section in that page describes the <code>O</code> typecode for <code>PyArg_ParseTuple</code>, which <em>doesn't</em> increment the reference count, but also isn't relevant here).</p>
<p>So, after the call to <code>Py_BuildValue</code>, the refcount for your list is <code>2</code>, but you only want it to be <code>1</code>.</p>
<p>Instead of returning the result of <code>Py_BuildValue</code> directly, save it to a <code>PyObject</code> pointer, decrement the <code>lst</code> reference count, then return your result.</p>
<p>You should be checking the result of the <code>Py_BuildValue</code> call anyway, since you also need to free <code>num</code> in the event that <code>Py_BuildValue</code> fails (i.e. returns <code>NULL</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks for clearing it up Ignacio, now it makes so much sense! Finally, the solution was to, instead of returning directly the Py_BuildValue, do:</p>
<pre><code>free(A);  
PyObject *MyResult = Py_BuildValue("Oi",lst,AnotherIntVariable);  
Py_DECREF(lst);  
return MyResult
</code></pre>
<p>It worked like a charm!</p>
</div>
<span class="comment-copy">doesn't del Pyt_A in python DECREF the array and delete it?</span>
<span class="comment-copy">I tried it but it doesn't seem to work. I still get this memory leakage I'm talking about.</span>
<span class="comment-copy">Also, you do have a return before Py_BuildValue("Oi",lst,AnotherIntVariable) right?</span>
<span class="comment-copy">Yup, I missed it on the post <i>editing</i></span>
<span class="comment-copy">what is sys.getrefcount(Pyt_A) in python?</span>
<span class="comment-copy">The documentation now says <i>"The objectâ€™s reference count is not increased"</i> - so which is it?</span>
<span class="comment-copy">The target link anchor for <code>Py_BuildValue</code> changed, so the link was going to the top of the page, which covers the <code>PyArg_ParseTuple</code> format codes. I fixed the link, and added a note about the potentially confusing entry.</span>
