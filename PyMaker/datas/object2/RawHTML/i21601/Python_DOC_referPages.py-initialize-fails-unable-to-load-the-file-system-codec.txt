<div class="post-text" itemprop="text">
<p>I am attempting to put together a simple c++ test project that uses python 3.2. The project builds fine but Py_Initialize raises a fatal error:</p>
<pre><code>Fatal Python error: Py_Initialize: unable to load the file system codec
LookupError: no codec search functions registered: can't find encoding
</code></pre>
<p><strong>Minimal code:</strong></p>
<pre><code>#include &lt;Python.h&gt;

int main (int, char**)
{
  Py_Initialize ();
  Py_Finalize ();
  return 0;
}
</code></pre>
<p>The OS is 32bit Vista.</p>
<p>The python version used is a python 3.2 debug build, built from sources using VC++ 10.</p>
<p>The python_d.exe file from the same build runs without any problems.</p>
<p>Could someone explain the problem and how to fix it? My own google-fu fails me.</p>
<p><strong>EDIT 1</strong></p>
<p>After going through the python source code I've found that, as the error says, no codec search functions have been registered. Both <code>codec_register</code> and <code>PyCodec_Register</code> are as they should be. It's just that nowhere in the code are any of these functions called.</p>
<p>I don't really know what this means as I still have no idea when and from where these functions should have been called. The code that raises the error is entirely missing from the source of my other python build (3.1.3).</p>
<p><strong>EDIT 2</strong></p>
<p>Answered my own question below.</p>
</div>
<div class="post-text" itemprop="text">
<p>Check the <code>PYTHONPATH</code> and <code>PYTHONHOME</code> environment variables and make sure they don't point to Python 2.x.</p>
<p><a href="http://bugs.python.org/issue11288" rel="nofollow noreferrer">http://bugs.python.org/issue11288</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Parts of this have been mentioned before, but in a nutshell this is what worked for my environment where I have multiple Python installs and my global OS environment set-up to point to a <em>different</em> install than the one I attempt to work with when encountering the problem.</p>
<p>Make sure your (local or global) environment is <em>fully</em> set-up to point to the install you aim to work with, e.g. you have two (or more) installs of, let's say a python27 and python33 (sorry these are windows paths but the following should be valid for equivalent UNIX-style paths just as well, please let me know about anything I'm missing here (probably the DLLs path might differ)):</p>
<p><code>C:\python27_x86</code></p>
<p><code>C:\python33_x64</code></p>
<p>Now, if you intend to work with your python33 install but your global environment is pointing to python27, make sure you update your environment as such (while <code>PATH</code> and <code>PYTHONHOME</code> <em>may</em> be optional (e.g. if you temporarily work in a local shell)):</p>
<p><code>PATH="C:\python33_x64;%PATH%"</code></p>
<p><code>PYTHONPATH="C:\python33_x64\DLLs;C:\python33_x64\Lib;C:\python33_x64\Lib\site-packages"</code></p>
<p><code>PYTHONHOME=C:\python33_x64</code></p>
<p>Note, that you might need/want to append any other library paths to your <code>PYTHONPATH</code> if required by your development environment, but having your <code>DLLs</code>, <code>Lib</code> and <code>site-packages</code> properly set-up is of prime importance.</p>
<p>Hope this helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>I just ran into the exact same problem (same Python version, OS, code, etc).</p>
<p>You just have to copy Python's Lib/ directory in your program's working directory ( on VC it's the directory where the .vcproj is )</p>
</div>
<div class="post-text" itemprop="text">
<p>The core reason is quite simple: Python does not find its modules directory, so it can of course not load <code>encodings</code>, too</p>
<p><a href="https://docs.python.org/3/c-api/intro.html#embedding-python" rel="noreferrer">Python doc on embedding</a> says "<code>Py_Initialize()</code> calculates the module search path based upon its best guess" ... "In particular, it looks for a directory named <code>lib/pythonX.Y</code>"</p>
<p>Yet, if the modules are installed in (just) <code>lib</code> - relative to the python binary - above guess is wrong.</p>
<p>Although docs says that <code>PYTHONHOME</code> and <code>PYTHONPATH</code> are regarded, we observed that this was not the case; their actual presence or content was completely irrelevant.</p>
<p>The only thing that had an effect was a call to <code>Py_SetPath()</code> with e.g. <code>[path-to]\lib</code> as argument <strong>before</strong> <code>Py_Initialize()</code>. </p>
<p>Sure this is only an option for an embedding scenario where one has direct access and control over the code; with a ready-made solution, special steps may be necessary to solve the issue.</p>
</div>
<div class="post-text" itemprop="text">
<p>From python3k, the startup need the encodings module, which can be found in PYTHONHOME\Lib directory. 
In fact, the <strong>API Py_Initialize ()</strong> do the init and import the encodings module.
Make sure PYTHONHOME\Lib is in sys.path and check the encodings module is there.</p>
</div>
<div class="post-text" itemprop="text">
<p>Ran into the same thing trying to install brew's python3 under Mac OS! The issue here is that in Mac OS, homebrew puts the "real" python a whole layer deeper than you think. You would think from the homebrew output that</p>
<pre><code>$ echo $PYTHONHOME
/usr/local/Cellar/python3/3.6.2/
$ echo $PYTHONPATH
/usr/local/Cellar/python3/3.6.2/bin
</code></pre>
<p>would be correct, but invoking $PYTHONPATH/python3 immediately crashes with the abort 6 "can't find encodings." This is because although that $PYTHONHOME looks like a complete installation, having a bin, lib etc, it is NOT the actual Python, which is in a Mac OS "Framework". Do this:</p>
<pre><code>PYTHONHOME=/usr/local/Cellar/python3/3.x.y/Frameworks/Python.framework/Versions/3.x
PYTHONPATH=$PYTHONHOME/bin
</code></pre>
<p>(substituting version numbers as appropriate) and it will work fine.</p>
</div>
<div class="post-text" itemprop="text">
<p>There appears to be something going wrong with the release build either failing to include the appropriate codecs or else misidentifying the codec to use for system APIs. Since the <code>python_d</code> executable is working, what does that return for <code>os.getfsencoding()</code>? (Use the C API to call that between your Initialize/Finalize calls)</p>
</div>
<div class="post-text" itemprop="text">
<p>So, for some reason the python dll fails to locate the encodings module. The python.exe executable apparently finds it because it has the expected relative path. Modifying the search path works.</p>
<p>The reason for all of this? Don't know but at least it works. I highly suspect a typo on my part somewhere, that's usually the reason for odd bugs it seems.</p>
</div>
<div class="post-text" itemprop="text">
<p>I had this issue with python 3.5, anaconda 3, windows 7 32 bit. I solved it by moving my pythonX.lib and pythonX.dll files into my working directory and calling </p>
<pre><code>Py_SetPythonHome(L"C:\\Path\\To\\My\\Python\\Installation");
</code></pre>
<p>before initialize so that it could find the headers that it needed, where my path was to "...\Anaconda3\". The extra step of calling Py_SetPythonHome was required for me or else I'd end up getting other strange errors where python import files.</p>
</div>
<div class="post-text" itemprop="text">
<p>I had the problem and was tinkering with different solutions mentioned here. Since I was running my project from Visual Studio, apparently, I needed to set the environment path inside Visual Studio and not the system path.</p>
<p>Adding a simple PYTHONHOME=PATH\TO\PYTHON\DIR in the project solution\properties\environment solved the problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>For me this happened when I updated <strong>Python 64 bit</strong> from <strong>3.6.4</strong> to <strong>3.6.5</strong>. It threw some error like <em>"unable to extract python.dll. Do you have permissions."</em> </p>
<p>Pycharm also failed to load interpreter, even though I reloaded it in settings. Running <code>python</code> command gave same error, with and without administrator mode. </p>
<h2>Reason</h2>
<p>There was error in installation of Python, <strong>include</strong> folder in python installation directory <strong>C:\Users\USERNAME\AppData\Local\Programs\Python\Python36</strong> was missing </p>
<p>Reinstalling Python also dint solve the issue.(Not removal and install)</p>
<h2>Solution</h2>
<p>Uninstall Python and Install of Python again. </p>
<p><em>Because running installer was just extracting same files excluding include folder</em></p>
</div>
<div class="post-text" itemprop="text">
<p>In my cases, for windows, if you have multiple python versions installed, if <code>PYTHONPATH</code> is pointing to one version the other ones didn't work. I found that if you just remove <code>PYTHONPATH</code>, they all work fine</p>
</div>
<span class="comment-copy">Where are PYTHONPATH and PYTHONHOME system variables? Are they supposed to be in Properties/Advanced system settings/Environment Variables/ System Variables? If yes, I had none of them, then I made myself putting my anaconda env's corresponding paths. But that time conda terminal didn't run.</span>
<span class="comment-copy">I was having this issue with pythonnet. Appending my <code>Lib</code> folder's path to <code>PythonEngine.PythonPath</code> did the trick. Thank you!</span>
<span class="comment-copy">Thanks. I was having this issue with the no module named encodings. Setting the PYTHONPATH per above worked for me.</span>
<span class="comment-copy">Glad to hear it was of help!</span>
<span class="comment-copy">@bossi When I did like you mentioned (but only with anaconda env), conda terminal didn't work.</span>
<span class="comment-copy">@voo_doo - I'm not familiar with anaconda env but as an environment manager, it possibly wraps these env vars and might require custom update/configuration of <code>PATH</code>, <code>PYTHONPATH</code>, <code>PYTHONHOME</code> etc.?</span>
<span class="comment-copy">That may work but I would say that's not a very good solution. It doesn't solve the problem of why the search path's wrong, just avoids it, and messes up the directory tree as well. I suggest putting a breakpoint in the <code>find_module</code> function in <code>Python/import.c</code> and/or the <code>calculate_path</code> function in <code>PC/getpathp.c</code> (IIRC) to find out where it's actually looking and why it's not what you expect. That said, I may be somewhat of a perfectionist when it comes to these things.</span>
<span class="comment-copy">I don't agree. It's a perfectly valid solution : you embed your own Python, you know where it is and what it contains. It's also more easily redistributable (remember in the old days of Blender, when you had to install the correct version of Python or it would crash at runtime ? Now it's bundled inside ProgramFiles/Blender/. ) I guess it depends on you usage.</span>
<span class="comment-copy">Oh wait... You meant (and wrote I see now) copy the directory didn't you? I read that as copying the contents of the directory, which would be messy... Sorry about that.</span>
<span class="comment-copy">I had this problem with python 3.5, Anaconda 4.0 distribution. This fixed it, thanks</span>
<span class="comment-copy">Best and most accurate answer, IMO. Voted!</span>
<span class="comment-copy">Thank You! The second example works flawlessly on my macOS :-)</span>
<span class="comment-copy">Debugging tells me that <code>sys.getfilesystemencoding</code> correctly returns 'mbcs'.</span>
<span class="comment-copy">What happens if you create a release build of 3.2 and link that from your release mode executable?</span>
<span class="comment-copy">What search path are you talking about here?</span>
<span class="comment-copy">The path where python looks for modules. This was a while ago so I don't remember exactly where or how.</span>
<span class="comment-copy">Could you show what you did to modify it in your solution?</span>
<span class="comment-copy">@Hack-R Sadly no. I've looked around but I can't find the project anymore and it's quite likely that is doesn't exist anymore since it's been a few years. I rather regret not giving a more detailed answer when I had the chance.</span>
<span class="comment-copy">Why is this an accepted answer? There is no solution in this answer.</span>
