<div class="post-text" itemprop="text">
<p>The question is quite clear, ... note however that I am NOT asking about a feature comparison (there are a lot of them already), nor am I asking about which one you prefer !</p>
<p>I have myself a clear preference for doctests, I use them for everything, even if those are not to be used for documentation. But what I am wondering is : is there anything you can do with unitests that you cannot do with doctests ???</p>
</div>
<div class="post-text" itemprop="text">
<p>There are some test scenarios doctests simply don't cover very well. That's OK since, as Lie pointed out, doctests aren't meant to be a comprehensive testing solution - they're meant to ensure that simple interactive-prompt style examples in your documentation (including docstrings) don't get out of date.</p>
<p>Writing actual unit tests, on the other hand, allows you to unlimber the full power of Python in deciding how to compose your test suite (e.g. using inheritance to share not only test set up and tear down operations, but also actual test methods).</p>
<p>doctests may be a part of that, but they aren't a complete testing solution (except for small, relatively self-contained operations).</p>
<p>It's probably worth browsing Python's own test suite (the <code>test</code> package) and taking a look at some of the tests in there. While doctests play their part, most of it is written using <code>unittest</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a widespread misconception that doctest is for testing your code. doctest is intended for <em>testing your documentation</em>. doctest is intended to test that your documentation matches what the function/class/module is actually doing, and alerts you if sample code in your documentation becomes obsolete as the module evolves.</p>
<p>While doctest might reveal bugs in the code, it is not its primary purpose (e.g. like a change in code might unravel bugs in a unittest's testcase code, but testing the testcase code is not unitetest's primary purpose)</p>
<blockquote>
<p>even if those are not to be used for documentation</p>
</blockquote>
<p>docstring are automatically extracted out by help() function to become documentation for your 
function/class/module; you cannot make a docstring not a documentation. Users of your module/function/class (or you in a few days) might try to do help() on your function/class/module and get a surprise that the documentation is a bunch of codes.</p>
</div>
<div class="post-text" itemprop="text">
<p>Doctests are limited to per function (or per class) tests. You cannot do things like taking the output of one function and trying it with another etc. It's best used for "example" type tests (i.e. how do I use this function?)</p>
<p>Unit tests can be larger and more involved than doctests.</p>
</div>
<div class="post-text" itemprop="text">
<p>Some tests will need things like databases set up and initialised. </p>
<p>This could make doctests:</p>
<ul>
<li><strong>very verbose</strong> (and therefore not good
documentation); and</li>
<li><strong>probably inefficient</strong> because in doctests you would typically set 
up the database for each function or class. In comparison, 
unit tests more easily could use the
same database to test many functions
or classes.</li>
</ul>
</div>
<span class="comment-copy">+1 "allows you to unlimber the full power of Python in deciding how to compose your test suite". That's very true ... I had never thought about that.</span>
<span class="comment-copy">Once you start doing scenario testing involving interactions between multiple modules, the benefits of the additional power provided by <code>unittest</code> certainly become much clearer. <code>doctest</code> can handle straightforward unit testing of a bottom level module without many dependencies, but it struggles with tests that need more than that (e.g. many of the networking tests in the stdlib actually start up a test server in another thread. The code to create and destroy the server can easily be shared between tests in <code>unittest</code>, but it is harder in <code>doctest</code>)</span>
<span class="comment-copy">It is harder, but not SO hard... you can basically write a module testutils.py that contains shared test utility code. In a project I am doing, I actually do exactly that ("starting up a test server in another thread"). What you said is a really good point, but forgetting about all this (and honestly) don't you think that it is way cooler, nicer and more natural to write doctests ?</span>
<span class="comment-copy">I think <code>doctest</code> is a cool module, and a useful part of a more comprehensive test suite, but I see it as far more feasible to use <code>unittest</code> without <code>doctest</code> for a test suite than the other way around.</span>
<span class="comment-copy">But actually, this whole talk, made me think that sometimes I also use doctests where it doesn't make much sense ... Maybe I should start using unitests again for some cases.</span>
<span class="comment-copy">The misconception is apparently so widespread that it extends to the official documentation, which states, "Doctest also makes an excellent tool for regression testing." <a href="https://docs.python.org/3/library/doctest.html" rel="nofollow noreferrer">docs.python.org/3/library/doctest.html</a></span>
<span class="comment-copy">That's not true, you can also write all your doctests in a separate file, and do whatever you want.</span>
<span class="comment-copy">You can also <a href="http://stackoverflow.com/a/35242443/1090455">have doctests of individual functions <i>share</i> their execution context (variables, results, ...)</a>.</span>
<span class="comment-copy">That's not true, you can control the context of execution for you doctests ... create some variables that are shared between all your tests in a same module for example. So no need to redo the same for all functions.</span>
<span class="comment-copy">Indeed, there's even an easy method for using a shared execution context for all callables in one module: <a href="http://stackoverflow.com/a/35242443/1090455">stackoverflow.com/a/35242443/1090455</a></span>
