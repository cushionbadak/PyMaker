<div class="post-text" itemprop="text">
<p>Can someone share the best practices for creating a nonce for an OAuth request in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's how <a href="https://github.com/simplegeo/python-oauth2/blob/81326a07d1936838d844690b468660452aafdea9/oauth2/__init__.py#L165" rel="noreferrer">python-oauth2</a> does it:</p>
<pre><code>def generate_nonce(length=8):
    """Generate pseudorandom number."""
    return ''.join([str(random.randint(0, 9)) for i in range(length)])
</code></pre>
<p>They also have:</p>
<pre><code>@classmethod
def make_nonce(cls):
    """Generate pseudorandom number."""
    return str(random.randint(0, 100000000))
</code></pre>
<p>Additionally there is this issue entitled: "<a href="https://github.com/simplegeo/python-oauth2/issues/9" rel="noreferrer">make_nonce is not random enough</a>", which proposes:</p>
<pre><code>def gen_nonce(length):
   """ Generates a random string of bytes, base64 encoded """
   if length &lt; 1:
      return ''
   string=base64.b64encode(os.urandom(length),altchars=b'-_')
   b64len=4*floor(length,3)
   if length%3 == 1:
      b64len+=2
   elif length%3 == 2:
      b64len+=3
   return string[0:b64len].decode()
</code></pre>
<p>And also references <a href="http://www.openwall.com/lists/oss-security/2013/09/12/7" rel="noreferrer">CVE-2013-4347</a>. TL;DR version, use <code>os.urandom</code> or the abstracted interface to it (<a href="https://docs.python.org/2/library/random.html#random.SystemRandom" rel="noreferrer">SystemRandom</a>).</p>
<p>I like my <code>lambda</code>s—and didn't want non-alphanumeric characters—so I used this:</p>
<pre><code>lambda length: filter(lambda s: s.isalpha(), b64encode(urandom(length * 2)))[:length]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Nonce should be both <strong>used only once</strong> and <strong>hard to predict</strong>:</p>
<pre><code>import uuid

uuid.uuid4().hex
# '12b90b6ffc0e46f788a26f1a6dc246fc'
</code></pre>
<p><code>uuid4()</code> uses <code>os.urandom()</code> which is best random you can get in python. </p>
<p>Note that <code>uuid4()</code> is harder to predict than <code>uuid1()</code> whereas later is more globally unique. You can concatenate the two to achieve both goals:</p>
<pre><code>uuid.uuid4().hex + uuid.uuid1().hex
# 'a6d68f4d81ec440fb3d5ef6416079305f7a44a0c9e9011e684e2c42c0319303d'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's what <a href="https://github.com/litl/rauth/blob/0cc0ad59d7a21ff7bee722f91c2e49db50fe80fb/rauth/session.py#L227" rel="nofollow">rauth</a> does. There's not really hard and fast rules here. The spec doesn't seem too opinionated. Your constraints are that the value, being a nonce, should be unique. Other than that, assuming the provider doesn't complain, you can use whatever method you like.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here are a few ideas I got for emailage. The generate_nonce comes from their code, but I use generate_nonce_timestamp which I used uuid for. It gives me a random alpha-numeric string and a time stamp in seconds:</p>
<pre><code>import random
import time
import uuid


def generate_nonce(length=8):
    """Generate pseudo-random number."""
    return ''.join([str(random.randint(0, 9)) for i in range(length)])


def generate_timestamp():
    """Get seconds since epoch (UTC)."""
    return str(int(time.time()))

def generate_nonce_timestamp():
    """Generate pseudo-random number and seconds since epoch (UTC)."""
    nonce = uuid.uuid1()
    oauth_timestamp, oauth_nonce = str(nonce.time), nonce.hex
    return oauth_nonce, oauth_timestamp
</code></pre>
<p>I like using uuid1, since it generates the uuid based on current host and time and has the time property that you can extract if you need both. For emailage, you need both the timestamp and the nonce.</p>
<p>Here is what you get:</p>
<pre><code>&gt;&gt;&gt; generate_nonce_timestamp()
('a89faa84-6c35-11e5-8a36-080027c336f0', '136634341422770820')
</code></pre>
<p>If you want to remove the <code>-</code>, use <code>nonce.get_hex()</code>.</p>
<p>uuid1 - Generate a UUID from a host ID, sequence number, and the current time.
More on <a href="https://docs.python.org/2/library/uuid.html" rel="nofollow">uuid</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>While this probably does not exist at the time of this question creation, Python 3.6 introduced the <a href="https://docs.python.org/3/library/secrets.html" rel="nofollow noreferrer">secrets</a> module which is meant <em>for generating cryptographically strong random numbers suitable for managing data such as passwords, account authentication, security tokens, and related secrets</em>.</p>
<p>In this case, generating a nonce can be generated easily (here a base64 encoded string):</p>
<pre><code>nonce = secrets.token_urlsafe()
</code></pre>
<p>Alternatives are <a href="https://docs.python.org/3/library/secrets.html#secrets.token_bytes" rel="nofollow noreferrer">token_bytes</a> to get a binary token or <a href="https://docs.python.org/3/library/secrets.html#secrets.token_hex" rel="nofollow noreferrer">token_hex</a> to get an hexadecimal string.</p>
</div>
<span class="comment-copy">BTW. uuid1 creates a unique key based on host and time: import uuid; uuid.uuid1(). It can be cast to a string &amp; used if an alphanumeric nonce is desired. It also has a epoch UTC time component i.e. uuid.uuid1().time will return a long integer.</span>
<span class="comment-copy">To get the string you can also just use <code>uuid1().get_hex()</code>. You probably want <code>uuid4</code> or <code>uuid5</code> though, more on the UUID standard that Python conforms with can be found in <a href="http://tools.ietf.org/html/rfc4122.html" rel="nofollow noreferrer">RFC4122</a></span>
<span class="comment-copy">Sure, unless you want the seed to be current host and time, you use uuid1 for that: <a href="https://docs.python.org/2/library/uuid.html" rel="nofollow noreferrer">docs.python.org/2/library/uuid.html</a>  . get_hex() is useful thanks!</span>
<span class="comment-copy">Note that if you're trying to generate anything with "nonce" in the name, it's IMPORTANT that you use <code>os.urandom()</code> and never, ever <code>random.random</code> or <code>random.randint</code>. Otherwise you might have serious security issues.</span>
<span class="comment-copy">"<a href="https://en.wikipedia.org/wiki/Cryptographic_nonce" rel="nofollow noreferrer">nonce</a>" is a word invented by cryptographers that needed a new word to unambiguously mean "a value nobody can guess" (practically, a big enough cryptographically-secure random integer).  They use them in many creative ways in their protocols, and always under the assumption that nobody can guess them. <code>random.randint</code> is easy for bad guys to guess, compromising security. <a href="https://www.cigital.com/papers/download/developer_gambling.php" rel="nofollow noreferrer">cigital.com/papers/download/developer_gambling.php</a></span>
<span class="comment-copy">Note that it now also calls <code>.encode('ascii')</code> before giving it to <code>sha1</code>. Probably for Python 3 compatibility?</span>
<span class="comment-copy">See my comment to @AT about nonces and <code>random.randint</code> (TL;DR: never ever)</span>
