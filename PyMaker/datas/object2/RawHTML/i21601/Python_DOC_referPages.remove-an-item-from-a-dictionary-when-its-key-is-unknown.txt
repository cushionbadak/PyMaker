<div class="post-text" itemprop="text">
<p>What is the best way to remove an item from a dictionary by value, i.e. when the item's key is unknown?  Here's a simple approach:</p>
<pre><code>for key, item in some_dict.items():
    if item is item_to_remove:
        del some_dict[key]
</code></pre>
<p>Are there better ways?  Is there anything wrong with mutating (deleting items) from the dictionary while iterating it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Be aware that you're currently testing for object identity (<code>is</code> only returns <code>True</code> if both operands are represented by the same object in memory - this is not always the case with two object that compare equal with <code>==</code>). If you are doing this on purpose, then you could rewrite your code as</p>
<pre><code>some_dict = {key: value for key, value in some_dict.items() 
             if value is not value_to_remove}
</code></pre>
<p>But this may not do what you want:</p>
<pre><code>&gt;&gt;&gt; some_dict = {1: "Hello", 2: "Goodbye", 3: "You say yes", 4: "I say no"}
&gt;&gt;&gt; value_to_remove = "You say yes"
&gt;&gt;&gt; some_dict = {key: value for key, value in some_dict.items() if value is not value_to_remove}
&gt;&gt;&gt; some_dict
{1: 'Hello', 2: 'Goodbye', 3: 'You say yes', 4: 'I say no'}
&gt;&gt;&gt; some_dict = {key: value for key, value in some_dict.items() if value != value_to_remove}
&gt;&gt;&gt; some_dict
{1: 'Hello', 2: 'Goodbye', 4: 'I say no'}
</code></pre>
<p>So you probably want <code>!=</code> instead of <code>is not</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>dict.pop(key[, default])</code> method allows you to remove items when you know the key. It returns the value at the key if it removes the item otherwise it returns what is passed as <code>default</code>. See <a href="https://docs.python.org/3/library/stdtypes.html#dict.pop" rel="nofollow noreferrer">the docs</a>.'</p>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; dic = {'a':1, 'b':2}
&gt;&gt;&gt; dic
{'a': 1, 'b': 2}
&gt;&gt;&gt; dic.pop('c', 0)
0
&gt;&gt;&gt; dic.pop('a', 0)
1
&gt;&gt;&gt; dic
{'b': 2}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = {'name': 'your_name','class': 4}
if 'name' in a: del a['name']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A simple comparison between <em>del</em> and <em>pop()</em>:</p>
<pre><code>import timeit
code = """
results = {'A': 1, 'B': 2, 'C': 3}
del results['A']
del results['B']
"""
print timeit.timeit(code, number=100000)
code = """
results = {'A': 1, 'B': 2, 'C': 3}
results.pop('A')
results.pop('B')
"""
print timeit.timeit(code, number=100000)
</code></pre>
<p>result: </p>
<pre><code>0.0329667857143
0.0451040902256
</code></pre>
<p>So, <em>del</em> is faster than <em>pop()</em>. </p>
</div>
<div class="post-text" itemprop="text">
<p><code>items()</code> returns a list, and it is that list you are iterating, so mutating the dict in the loop doesn't matter here. If you were using <code>iteritems()</code> instead, mutating the dict in the loop <a href="http://docs.python.org/library/stdtypes.html#dict.iteritems" rel="noreferrer">would be problematic</a>, and likewise for <code>viewitems()</code> in Python 2.7.</p>
<p>I can't think of a better way to remove items from a dict by value.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd build a list of keys that need removing, then remove them. It's simple, efficient and avoids any problem about simultaneously iterating over and mutating the dict.</p>
<pre><code>keys_to_remove = [key for key, value in some_dict.iteritems()
                  if value == value_to_remove]
for key in keys_to_remove:
    del some_dict[key]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>c is the new dictionary, and a is your original dictionary, {'z','w'}
are the keys you want to remove from a</p>
<pre><code>c = {key:a[key] for key in a.keys() - {'z', 'w'}}
</code></pre>
<p>Also check: <a href="https://www.safaribooksonline.com/library/view/python-cookbook-3rd/9781449357337/ch01.html" rel="nofollow noreferrer">https://www.safaribooksonline.com/library/view/python-cookbook-3rd/9781449357337/ch01.html</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>y={'username':'admin','machine':['a','b','c']}
if 'c' in y['machine'] : del y['machine'][y['machine'].index('c')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is nothing wrong with deleting items from the dictionary while iterating, as you've proposed.  Be careful about multiple threads using the same dictionary at the same time, which may result in a KeyError or other problems.</p>
<p>Of course, see the docs at <a href="http://docs.python.org/library/stdtypes.html#typesmapping" rel="nofollow">http://docs.python.org/library/stdtypes.html#typesmapping</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This is how I would do it.</p>
<pre><code>for key in some_dict.keys():
    if some_dict[key] == item_to_remove:
        some_dict.pop(key)
        break
</code></pre>
</div>
<span class="comment-copy">The underline reason for prohibiting mutating dict while iterating it is because internally there is an order for iteration, if you mutate the keys, the order would be undermined, which results unknown behavior.</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/11277432/how-to-remove-a-key-from-a-python-dictionary">How to remove a key from a python dictionary?</a></span>
<span class="comment-copy">Is that a dictionary compression?  When were they added?</span>
<span class="comment-copy">you could use <code>some_dict.iteritems()</code> here and put <code>for</code> and <code>if</code> statements on separate lines for readability</span>
<span class="comment-copy">I believe dictionary comprehensions were added in Python 2.7.</span>
<span class="comment-copy">@J.F. Sebastian: I'm on Python 3, and <code>iteritems</code> is now <code>items</code>. In Python 2.7, <code>iteritems()</code> is indeed better.</span>
<span class="comment-copy">@Buttons840 they are called <a href="http://legacy.python.org/dev/peps/pep-0274/" rel="nofollow noreferrer">dict comprehensions in PEP 274</a> or <a href="https://docs.python.org/2/reference/expressions.html#dictionary-displays" rel="nofollow noreferrer">dictionary displays</a>. as the PEP says they were <a href="https://docs.python.org/2/whatsnew/2.7.html#python-3-1-features" rel="nofollow noreferrer">added in 2.7</a> as backported 3.x feats. alternatively you can feed <code>dict()</code> with an appropriate generator expression, which is 2.4. meta: can <a href="http://legacy.python.org/dev/peps/" rel="nofollow noreferrer">browse the peps here</a> for finding stuff out.</span>
<span class="comment-copy">OP asked regarding when key is unknown</span>
<span class="comment-copy">OP asked regarding when key is unknown. This answer assumes the key is known.</span>
<span class="comment-copy">However, the performance difference is not great, and if you want to avoid raising an exception, you can provide a second argument to <code>pop()</code> (as @n-1-1 does above) - which is not an option for the <code>del</code> operator.</span>
<span class="comment-copy">Ancillary to the question, but I'd also been struggling to understand <code>timeit</code>. Thank you for this clear example.</span>
<span class="comment-copy">OP asked regarding when key is unknown. This answer assumes the key is known.</span>
<span class="comment-copy">OP asked regarding when key is unknown. This answer assumes the key is known.</span>
<span class="comment-copy"><code>for k,v in d.iteritems(): del d[k]</code> would give <code>RuntimeError: dictionary changed size during iteration</code>.  See mithrandi's explanation.</span>
<span class="comment-copy">Of course, d.iteritems() is not how the original poster is iterating, and not what I was referring to in my answer.</span>
