<div class="post-text" itemprop="text">
<p>I have some code in the form of a string and would like to make a module out of it without writing to disk.</p>
<p>When I try using imp and a StringIO object to do this, I get:</p>
<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; imp.load_source('my_module', '', StringIO('print "hello world"'))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: load_source() argument 3 must be file, not instance
&gt;&gt;&gt; imp.load_module('my_module', StringIO('print "hello world"'), '', ('', '', 0))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: load_module arg#2 should be a file or None
</code></pre>
<p>How can I create the module without having an actual file?  Alternatively, how can I wrap a StringIO in a file without writing to disk?</p>
<p><strong>UPDATE:</strong></p>
<p>NOTE: This issue is also a problem in python3.</p>
<p>The code I'm trying to load is only partially trusted.  I've gone through it with ast and determined that it doesn't import anything or do anything I don't like, but I don't trust it enough to run it when I have local variables running around that could get modified, and I don't trust my own code to stay out of the way of the code I'm trying to import.</p>
<p>I created an empty module that only contains the following:</p>
<pre><code>def load(code):
    # Delete all local variables
    globals()['code'] = code
    del locals()['code']

    # Run the code
    exec(globals()['code'])

    # Delete any global variables we've added
    del globals()['load']
    del globals()['code']

    # Copy k so we can use it
    if 'k' in locals():
        globals()['k'] = locals()['k']
        del locals()['k']

    # Copy the rest of the variables
    for k in locals().keys():
        globals()[k] = locals()[k]
</code></pre>
<p>Then you can import <code>mymodule</code> and call <code>mymodule.load(code)</code>.  This works for me because I've ensured that the code I'm loading does not use <code>globals</code>.  Also, the <code>global</code> keyword is only a parser directive and can't refer to anything outside of the exec.</p>
<p>This really is way too much work to <code>import</code> the module without writing to disk, but if you ever want to do this, I believe it's the best way.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is how to import a string as a module (<b>Python 2.x</b>): </p>
<pre><code>import sys,imp

my_code = 'a = 5'
mymodule = imp.new_module('mymodule')
exec my_code in mymodule.__dict__
</code></pre>
<p>In <b>Python 3</b>, exec is a function, so this should work: </p>
<pre><code>import sys,imp

my_code = 'a = 5'
mymodule = imp.new_module('mymodule')
exec(my_code, mymodule.__dict__)
</code></pre>
<p>Now access the module attributes (and functions, classes etc) as:</p>
<pre><code>print(mymodule.a)
&gt;&gt;&gt; 5
</code></pre>
<p>To ignore any next attempt to import, add the module to <code>sys</code>:</p>
<pre><code>sys.modules['mymodule'] = mymodule
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the code for the module is in a string, you can forgo using <code>StringIO</code> and use it directly with <code>exec</code>, as illustrated below with a file named <code>dynmodule.py</code>.
Works in Python 2 &amp; 3.</p>
<pre><code>from __future__ import print_function

class _DynamicModule(object):
    def load(self, code):
        execdict = {'__builtins__': None}  # optional, to increase safety
        exec(code, execdict)
        keys = execdict.get(
            '__all__',  # use __all__ attribute if defined
            # else all non-private attributes
            (key for key in execdict if not key.startswith('_')))
        for key in keys:
            setattr(self, key, execdict[key])

# replace this module object in sys.modules with empty _DynamicModule instance
# see Stack Overflow question:
# https://stackoverflow.com/questions/5365562/why-is-the-value-of-name-changing-after-assignment-to-sys-modules-name
import sys as _sys
_ref, _sys.modules[__name__] = _sys.modules[__name__], _DynamicModule()

if __name__ == '__main__':
    import dynmodule  # name of this module
    import textwrap  # for more readable code formatting in sample string

    # string to be loaded can come from anywhere or be generated on-the-fly
    module_code = textwrap.dedent("""\
        foo, bar, baz = 5, 8, 2

        def func():
            return foo*bar + baz

        __all__ = 'foo', 'bar', 'func'  # 'baz' not included
        """)

    dynmodule.load(module_code)  # defines module's contents

    print('dynmodule.foo:', dynmodule.foo)
    try:
        print('dynmodule.baz:', dynmodule.baz)
    except AttributeError:
        print('no dynmodule.baz attribute was defined')
    else:
        print('Error: there should be no dynmodule.baz module attribute')
    print('dynmodule.func() returned:', dynmodule.func())
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>dynmodule.foo: 5
no dynmodule.baz attribute was defined
dynmodule.func() returned: 42
</code></pre>
<p>Setting the <code>'__builtins__'</code> entry to <code>None</code> in the <code>execdict</code> dictionary prevents the code from directly executing <strong>any</strong> built-in functions, like <code>__import__</code>, and so makes running it safer. You can ease that restriction by selectively adding things to it you feel are OK and/or required.</p>
<p>It's also possible to add your own predefined utilities and attributes which you'd like made available to the code thereby creating a custom execution context for it to run in. That sort of thing can be useful for implementing a "plug-in" or other user-extensible architecture.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could simply create a Module object and stuff it into sys.modules and put your code inside.</p>
<p>Something like:</p>
<pre><code>import sys
from types import ModuleType
mod = ModuleType('mymodule')
sys.modules['mymodule'] = mod
exec(mycode, mod.__dict__)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you could use <code>exec</code> or <code>eval</code> to execute python code as a string. see <a href="https://stackoverflow.com/questions/701802/how-do-i-execute-a-string-containing-python-code-in-python">here</a>, <a href="http://docs.python.org/release/2.5.2/ref/exec.html" rel="nofollow noreferrer">here</a> and <a href="http://docs.python.org/library/functions.html#eval" rel="nofollow noreferrer">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://docs.python.org/library/imp.html#imp.load_source" rel="nofollow">documentation for <code>imp.load_source</code></a> says (my emphasis):</p>
<blockquote>
<p>The file argument is the source file, open for reading as text, from the beginning. <strong>It must currently be a real file object, not a user-defined class emulating a file.</strong></p>
</blockquote>
<p>... so you may be out of luck with this method, I'm afraid.</p>
<p>Perhaps <a href="http://docs.python.org/library/functions.html#eval" rel="nofollow"><code>eval</code></a> would be enough for you in this case?</p>
<p>This sounds like a rather surprising requirement, though - it might help if you add some more to your question about the problem you're really trying to solve.</p>
</div>
<div class="post-text" itemprop="text">
<p>imp.new_module is deprecated since python 3.4</p>
<p>but the <a href="https://stackoverflow.com/questions/5362771/how-to-load-a-module-from-code-in-a-string/5363237#5363237">short solution</a> from schlenk using <a href="https://docs.python.org/3/library/types.html#types.ModuleType" rel="nofollow noreferrer">types.ModuleType</a> is still working in python 3.7</p>
<p>imp.new_module was replaced with importlib.util.module_from_spec</p>
<blockquote>
<p><a href="https://docs.python.org/3/library/importlib.html#importlib.util.module_from_spec" rel="nofollow noreferrer">importlib.util.module_from_spec</a>
  is preferred over using types.ModuleType to create a new module as
  spec is used to set as many import-controlled <strong>attributes</strong> on the module
  as possible.</p>
<p><a href="https://docs.python.org/3/library/importlib.html#importlib.util.spec_from_loader" rel="nofollow noreferrer">importlib.util.spec_from_loader</a>
  uses available loader APIs, such as InspectLoader.is_package(), to
  fill in any missing <strong>information</strong> on the spec.</p>
</blockquote>
<p>but both, short and long version, will only set: <code>__builtins__, __doc__, __loader__, __name__, __package__, __spec__</code></p>
<pre><code>import sys, importlib

my_name = 'my_module'
my_spec = importlib.util.spec_from_loader(my_name, loader=None)

my_module = importlib.util.module_from_spec(my_spec)

my_code = '''
def f():
    print('f says hello')
'''
exec(my_code, my_module.__dict__)
sys.modules['my_module'] = my_module

my_module.f()
</code></pre>
</div>
<span class="comment-copy">If you don't trust the code, do not load it. Its terribly hard to make a python interpreter really safe (e.g. there are some ways to patch the bytecode of some different stack frame once you have access to a code object). So if this is just to prevent errors it might work, as a security thing it is probably a bad idea.</span>
<span class="comment-copy">I've used ast pretty extensively to ensure it can't do anything dangerous.  There may be holes, but I'm pretty sure that the holes can be patched if discovered.</span>
<span class="comment-copy"><code>del locals()['code']</code> does nothing, as the <code>locals()</code> dictionary is but a proxy, a reflection of the actual locals. Just use <code>del code</code> if you must delete a reference. Not that I am sure why you are doing this at all. Why the whole dance with <code>globals()</code> and <code>locals()</code> <i>in the first place</i>?</span>
<span class="comment-copy">@ConleyOwens: I'm pretty sure they can't be patched. Python's dynamic nature leaves you wide open. Execute untrusted code <i>in a virtual machine without network access</i> that you then wipe and restart from a trusted image.</span>
<span class="comment-copy">Great tip! Very small and nice code for <a href="http://en.wikipedia.org/wiki/Reflection_%28computer_programming%29" rel="nofollow noreferrer">Reflection</a></span>
<span class="comment-copy">This causes <code>import</code> statements in <code>my_code</code> to evaluate to <code>None</code>.</span>
<span class="comment-copy">@Kimvais: I can't reproduce that. Importing works <i>just fine</i>.</span>
<span class="comment-copy">Python 2 <code>exec</code> can be used like a function <i>too</i>. The Python 3 version works unchanged in Python 2.</span>
<span class="comment-copy">The <code>imp.new_module</code> function is marked as deprecated since at least Python 3.4.</span>
<span class="comment-copy"><code>mod</code> doesn't seem to be a mapping object and <code>eval</code> can only handle expressions (i.e., it can't handle <code>x = 1</code>) so that really limits it.</span>
<span class="comment-copy">It works with <code>exec(mycode, mod.__dict__)</code>.</span>
<span class="comment-copy">Thanks, updating the answer with the <code>exec</code>.</span>
