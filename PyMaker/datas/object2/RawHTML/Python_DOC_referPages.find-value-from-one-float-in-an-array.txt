<div class="post-text" itemprop="text">
<p>I have one array of value and I want to find what position it has in another array of values.  So for example if I have:</p>
<pre><code>array1 = [1,2,3,4,5,6]
array2 = [2,6,3,4,1,5,.....]
</code></pre>
<p>I want to find what position each element from array 1 has in array 2, so I want it to return something like</p>
<pre><code>what_position = [4,0,2,3,5,1]
</code></pre>
<p>I've tried something like this:</p>
<pre><code>for i in range(len(array1)):
      what_position = array1[i].index(array[2])

</code></pre>
<p>but i get an error that says</p>
<pre><code>'numpy.float64' object has no attribute 'index'
</code></pre>
<p>Which i guess means I can't use .index on a float.  Is there another way I can go about this.</p>
</div>
<div class="post-text" itemprop="text">
<p>An alternative solution is provided by <code>np.intersect1d</code>:</p>
<pre><code>import numpy as np

array1 = [1,2,3,4,5,6]
array2 = [2,6,3,4,1,5]

np.intersect1d(array1, array2, return_indices=True)[2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A list comprehension helps:</p>
<pre><code>positions = [array2.index(item) for item in array1]
</code></pre>
<p>A for loop with the same result:</p>
<pre><code>positions = []
for item in array1:
    positions.append(array2.index(item))
</code></pre>
<p>In other words, you call <code>index()</code> on a list, not on an individual item.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you donâ€™t have repeating elements in <code>array2</code> you can use the following solution. It should be faster than the list comprehension with <code>index()</code>:</p>
<pre><code>from operator import itemgetter
from itertools import count

array1 = [1, 2, 3, 4, 5, 6]
array2 = [2, 6, 3, 4, 1, 5, 7, 8]

itemgetter(*array1)(dict(zip(array2, count())))
# [4, 0, 2, 3, 5, 1]
</code></pre>
</div>
<span class="comment-copy">This has quadratic time, not very efficient</span>
