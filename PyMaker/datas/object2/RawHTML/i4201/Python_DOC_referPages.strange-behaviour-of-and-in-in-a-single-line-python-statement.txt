<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/48944267/why-1-in-range2-true-evaluates-to-false">Why 1 in range(2) == True evaluates to False? [duplicate]</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<pre><code>def foo1():
   return True == 3 in [1,2,3]

def foo2():
    return 3 in [1,2,3] == True

def foo3():
     return True == ( 3 in [1,2,3] )

def foo4():
   return ( 3 in [1,2,3] ) == True 
</code></pre>
<p><br/></p>
<pre><code>foo1() =&gt; False
foo2() =&gt; False
foo3() =&gt; True
foo4() =&gt; True
</code></pre>
<p><br/></p>
<pre><code>import dis

dis.dis(foo1)

  2           0 LOAD_CONST               1 (True)
              2 LOAD_CONST               2 (3)
              4 DUP_TOP
              6 ROT_THREE
              8 COMPARE_OP               2 (==)
             10 JUMP_IF_FALSE_OR_POP    18
             12 LOAD_CONST               5 ((1, 2, 3))
             14 COMPARE_OP               6 (in)
             16 RETURN_VALUE
        &gt;&gt;   18 ROT_TWO
             20 POP_TOP
             22 RETURN_VALUE
</code></pre>
<p><br/></p>
<pre><code>dis.dis( foo2 )
  2           0 LOAD_CONST               1 (3)
              2 LOAD_CONST               2 (1)
              4 LOAD_CONST               3 (2)
              6 LOAD_CONST               1 (3)
              8 BUILD_LIST               3
             10 DUP_TOP
             12 ROT_THREE
             14 COMPARE_OP               6 (in)
             16 JUMP_IF_FALSE_OR_POP    24
             18 LOAD_CONST               4 (True)
             20 COMPARE_OP               2 (==)
             22 RETURN_VALUE
        &gt;&gt;   24 ROT_TWO
             26 POP_TOP
             28 RETURN_VALUE
</code></pre>
<p><br/></p>
<pre><code>&gt;&gt;&gt; dis.dis( foo3 )
  2           0 LOAD_CONST               1 (True)
              2 LOAD_CONST               2 (3)
              4 LOAD_CONST               5 ((1, 2, 3))
              6 COMPARE_OP               6 (in)
              8 COMPARE_OP               2 (==)
             10 RETURN_VALUE
</code></pre>
<p><br/></p>
<pre><code>&gt;&gt;&gt; dis.dis( foo4 )
  2           0 LOAD_CONST               1 (3)
              2 LOAD_CONST               5 ((1, 2, 3))
              4 COMPARE_OP               6 (in)
              6 LOAD_CONST               4 (True)
              8 COMPARE_OP               2 (==)
             10 RETURN_VALUE
</code></pre>
<p>From the disassemble code I can see the <code>foo1()</code> should return <code>False</code> since it won't execute the <code>in</code> comparison and hence <code>False</code>.</p>
<p>But what happens to foo2(), why does this return False?</p>
<p>Whereas foo3() and foo4() works perfectly as we can be confirmed from the disassembled code.</p>
<p>Ref: <a href="https://docs.python.org/2/library/dis.html" rel="nofollow noreferrer">https://docs.python.org/2/library/dis.html</a> </p>
<p>Python2.7</p>
<p>I've seen similar behavior python3+; the disassembled code is different but logic seems to be same in the disassembled code.</p>
<p>Python operator precedence:
<a href="https://docs.python.org/2/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">https://docs.python.org/2/reference/expressions.html#operator-precedence</a> </p>
<p>Operator precedence for<code>==</code> and <code>in</code> is same but it doesn't match the expectation.</p>
</div>
<div class="post-text" itemprop="text">
<p>Both <code>in</code> and <code>==</code> are relation operators, and relational operators in Python chain. <code>3 in [1, 2, 3] == True</code> performs both <code>3 in [1, 2, 3]</code> and <code>[1, 2, 3] == True</code> simultaneously.</p>
<p>But you shouldn't be comparing against booleans regardless. Pass the result to <code>bool()</code> if you need to, but <code>in</code> already results in a boolean.</p>
</div>
<span class="comment-copy">Oh! So silly missed that :(</span>
<span class="comment-copy">just in case here is the link to the doc: <a href="https://docs.python.org/3/library/stdtypes.html#comparisons" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#comparisons</a></span>
