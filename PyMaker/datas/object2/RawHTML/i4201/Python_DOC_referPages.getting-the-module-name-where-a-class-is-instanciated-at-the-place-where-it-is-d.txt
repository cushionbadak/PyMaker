<div class="post-text" itemprop="text">
<p>Suppose <code>myapp/foo.py</code> contains:</p>
<pre><code>def info(msg):
    caller_name = ????
    print '[%s] %s' % (caller_name, msg)
</code></pre>
<p>And <code>myapp/bar.py</code> contains:</p>
<pre><code>import foo
foo.info('Hello') # =&gt; [myapp.bar] Hello
</code></pre>
<p>I want <code>caller_name</code> to be set to the <code>__name__</code> attribute of the calling functions' module (which is 'myapp.foo') in this case. How can this be done?</p>
</div>
<div class="post-text" itemprop="text">
<p>Check out the inspect module:</p>
<p><code>inspect.stack()</code> will return the stack information.</p>
<p>Inside a function, <code>inspect.stack()[1]</code> will return your caller's stack.  From there, you can get more information about the caller's function name, module, etc.</p>
<p>See the docs for details:</p>
<p><a href="http://docs.python.org/library/inspect.html" rel="noreferrer">http://docs.python.org/library/inspect.html</a></p>
<p>Also, Doug Hellmann has a nice writeup of the inspect module in his PyMOTW series:</p>
<p><a href="http://pymotw.com/2/inspect/index.html#module-inspect" rel="noreferrer">http://pymotw.com/2/inspect/index.html#module-inspect</a></p>
<p>EDIT: Here's some code which does what you want, I think:</p>
<pre><code>def info(msg):
    frm = inspect.stack()[1]
    mod = inspect.getmodule(frm[0])
    print '[%s] %s' % (mod.__name__, msg)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Confronted with a similar problem, I have found that <strong>sys._current_frames()</strong> from the sys module contains interesting information that can help you, without the need to import inspect, at least in specific use cases.</p>
<pre><code>&gt;&gt;&gt; sys._current_frames()
{4052: &lt;frame object at 0x03200C98&gt;}
</code></pre>
<p>You can then "move up" using f_back :</p>
<pre><code>&gt;&gt;&gt; f = sys._current_frames().values()[0]
&gt;&gt;&gt; # for python3: f = list(sys._current_frames().values())[0]

&gt;&gt;&gt; print f.f_back.f_globals['__file__']
'/base/data/home/apps/apricot/1.6456165165151/caller.py'

&gt;&gt;&gt; print f.f_back.f_globals['__name__']
'__main__'
</code></pre>
<p>For the filename you can also use f.f_back.f_code.co_filename, as suggested by Mark Roddy above. I am not sure of the limits and caveats of this method (multiple threads will most likely be a problem) but I intend to use it in my case.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't recommend do this, but you can accomplish your goal with the following method:</p>
<pre><code>def caller_name():
    frame=inspect.currentframe()
    frame=frame.f_back.f_back
    code=frame.f_code
    return code.co_filename
</code></pre>
<p>Then update your existing method as follows:</p>
<pre><code>def info(msg):
    caller = caller_name()
    print '[%s] %s' % (caller, msg)
</code></pre>
</div>
<span class="comment-copy">Assume that some other entry point script invokes bar.py .. and thus <code>caller_name</code> cannot be <code>__main__</code></span>
<span class="comment-copy">Are you sure your example code is correct? Shouldn't the body of myapp/bar.py be: import foo; foo.info('Hello') # =&gt; [myapp.bar] Hello</span>
<span class="comment-copy">Right, I fixed the code.</span>
<span class="comment-copy">So how do you get the <code>__name__</code> attribute of this module using the <code>inspect</code> module? For example, how do I get back <code>myapp.foo</code> (not <code>myapp/foo.py</code>) in my above example? I already tried using the inspect module before posting at SO.</span>
<span class="comment-copy">Just updated the answer.  Does that work on your end?</span>
<span class="comment-copy">Be aware that this will interact strangely with import hooks, won't work on ironpython, and may behave in surprising ways on jython.  It's best if you can avoid magic like this.</span>
<span class="comment-copy">Also note that keeping a reference to a stack frame can prevent Python's GC from working correctly. See warning here: <a href="http://docs.python.org/library/inspect.html#the-interpreter-stack" rel="nofollow noreferrer">docs.python.org/library/inspect.html#the-interpreter-stack</a></span>
<span class="comment-copy">Note that if the caller function is decorated (@...), you need to access <code>inspect.stack()[2]</code> for the real caller.</span>
<span class="comment-copy">note: the inspect.stack code FAILS after compile to exe using pyinstaller, but using sys._current_frames WORKS FINE... so this is the preferred technique for me.</span>
<span class="comment-copy">I think it's easier to get the previous frame by <a href="https://docs.python.org/3/library/sys.html#sys._getframe" rel="nofollow noreferrer"><code>sys._getframe(1)</code></a>, instead of calling <code>sys._current_frames()</code> (btw which returns a frame mapping for every thread).</span>
<span class="comment-copy">Thank you hooblei, I haven't tested it yet but seems very useful for multi-threaded situations.</span>
<span class="comment-copy">I prefer to use <a href="https://docs.python.org/3/library/inspect.html#inspect.currentframe" rel="nofollow noreferrer"><code>inspect.currentframe()</code></a> instead of <code>sys._current_frames().values()[0]</code>.</span>
<span class="comment-copy">Filename is not the same as <code>__name__</code></span>
