<div class="post-text" itemprop="text">
<p>I wrote a quick select algorithms as below:</p>
<pre><code>def partition(arr):
    pvt = 0
    for i in range(len(arr) - 1):
        if arr[i] &lt; arr[-1]:
            arr[i], arr[pvt] = arr[pvt], arr[i] # mv smaller elements before pvt
            pvt += 1
    arr[-1], arr[pvt] = arr[pvt], arr[-1]
    return pvt

def quickselect(k, arr):
    p = partition(arr)
    while k != p:
        p = partition(arr[:p]) if k &lt; p else partition(arr[p:])
    return arr[k]
</code></pre>
<p>What I intend to do is to find the kth element in an arr with O(n) complexity. But when I finished the coding, I found that arr[:p] actually pass a copy rather than a slice of original list, which will not make the recursive partition work properly. As far as I know, pandas Series slice actually did what I want. If I pass arr as pd.Series, it seems to work properly. But is there a more native way to pass an origin slice of python list arr[:p] ?  </p>
</div>
<div class="post-text" itemprop="text">
<p><code>arr[:p]</code> <em>is</em> a copy, so there's no way to pass it without copying.</p>
<hr/>
<p>As you already discovered, you can use a different type that does "view slicing"—<code>memoryview</code>, <code>np.array</code>, <code>pd.Series</code>, etc.</p>
<hr/>
<p>Or you can pass the whole list and the slice information around together, like this:</p>
<pre><code>def partition(arr, start, stop):
    pvt = 0
    for i in range(start, stop - 1):
        if arr[i] &lt; arr[stop-1]:
            arr[i], arr[pvt] = arr[pvt], arr[i] # mv smaller elements before pvt
            pvt += 1
    arr[stop-1], arr[pvt] = arr[pvt], arr[stop-1]
    return pvt

def quickselect(k, arr, start=None, stop=None):
    if start is None: start = 0
    if stop is None: stop = len(arr)
    p = partition(arr, start, stop)
    while k != p:
        p = partition(arr, start, p) if k &lt; p else partition(arr, p, stop)
    return arr[k]
</code></pre>
<hr/>
<p>Or you can write a simple wrapper that carries around the list, start, and stop values and implements <code>collections.abc.Sequence</code> (or <code>MutableSequence</code>) by forwarding appropriately. That's more work up-front, but it might make the other code you're writing more readable.</p>
<p>You can find a simple version of mutable and immutable slice views <a href="https://github.com/abarnert/slices" rel="nofollow noreferrer">here</a>. It's not as thoroughly tested as I'd hoped, but it seems to work for your <code>quickselect</code>. (Of course the cost for linear rather than quadratic work is probably swamped by the constant multiplier of building a wrapper object for each slice until you get to decent-sized lists…)</p>
</div>
<div class="post-text" itemprop="text">
<p>One possible solution is to use numpy or pandas as well as stated by Mr. abarnert. But importing package will not always work for pure algo questions. </p>
<pre><code>import numpy as np

def partition(arr):
    pvt = 0
    for i in range(len(arr) - 1):
        if arr[i] &lt; arr[-1]:
            arr[i], arr[pvt] = arr[pvt], arr[i] # mv smaller elements before pvt
            pvt += 1
    arr[-1], arr[pvt] = arr[pvt], arr[-1]
    return pvt

def quickselect(k, arr):
    arr = np.array(arr)
    p = partition(arr)
    while k != p:
        p = partition(arr[:p]) if k &lt; p else partition(arr[p:])
    return arr[k]
</code></pre>
</div>
<span class="comment-copy">Slicing a list <i>always</i> produces a new list</span>
<span class="comment-copy">Thank you for detail anwser, making more parameters will always work. Can you please share more about memoryview? Interesting one.</span>
<span class="comment-copy">@Pythoner <a href="https://docs.python.org/3/library/stdtypes.html#typememoryview" rel="nofollow noreferrer"><code>memoryview</code></a> gives you a way to view-slice bytes-like objects, or fancier objects that support the buffer protocol. It won't do you any good with lists (lists don't support the buffer protocol), but with huge buffers stored as <code>bytes</code> or <code>bytearray</code>, or giant <code>array.array</code>, <code>mmap</code>, etc., it can be handy. Usually you're better off with numpy or pandas than anything you can do with <code>memoryview</code>, but not always (e.g., sometimes you're on a machine where you can't install numpy…).</span>
<span class="comment-copy">Your SliceView handles slices of slices incorrectly; the <code>start</code>, <code>stop</code>, and <code>step</code> generated for a slice of a slice are relative to the first slice, not the original sequence. <a href="https://ideone.com/5yKfUP" rel="nofollow noreferrer">Here's an example</a> (adjusted a bit because Ideone doesn't have f-strings). The base SliceView and the first slice are correct, but slicing a slice selects the wrong elements.</span>
<span class="comment-copy">Maybe it would be simpler to use <code>range</code> objects which seem to know most of the slicing arithmetic necessary. To give a random example <code>range(2, 12, 3)[-2::-2]</code> -&gt; <code>range(8, -1, -6)</code></span>
<span class="comment-copy">@PaulPanzer As it turns out, my helper library did rely on ranges, which is pretty obvious now that I think about it (and obviously I <i>did</i> think about it however many years ago I wrote it…). Anyway, I've now separated it out into its own project and updated it a bit. Although the tests aren't nearly as complete as I'd hoped…</span>
