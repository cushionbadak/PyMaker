<div class="post-text" itemprop="text">
<p>I'm stuck with Python 2.7 for a project, and I have several <code>Enum</code>s for integrating a Python framework (OpenERP) with a legacy framework.  In Python 2, <a href="https://stackoverflow.com/a/18405365/208880"><code>Enum</code>s are not ordered</a> by default:</p>
<pre><code>&gt;&gt;&gt; from enum import Enum
&gt;&gt;&gt; class Color(Enum):
...   RED = 1
...   GREEN = 2
...   BLUE = 3
... 
&gt;&gt;&gt; list(Color)
[&lt;Color.BLUE: 3&gt;, &lt;Color.RED: 1&gt;, &lt;Color.GREEN: 2&gt;]
</code></pre>
<p>If order is important one has to manually add an <code>_order_ = 'member1, member2, member3'</code> attribute.</p>
<pre><code>&gt;&gt;&gt; class Color(Enum):
...   _order_ = 'RED GREEN BLUE'
...   RED = 1
...   GREEN = 2
...   BLUE = 3
... 
&gt;&gt;&gt; list(Color)
[&lt;Color.RED: 1&gt;, &lt;Color.GREEN: 2&gt;, &lt;Color.BLUE: 3&gt;]
</code></pre>
<p>This works fine for smaller <code>Enum</code>s, but I have several that have between 10 and 50 names, and that is simply too many to either type or read or keep in sequence when names are added/removed.</p>
<p>Are there any other options?</p>
</div>
<div class="post-text" itemprop="text">
<p>As of <code>aenum 2.1.2</code><sup>1</sup> the <code>_order_</code> attribute can be a function; this function will be used as the <code>key</code> to <code>sort()</code> to put the <code>Enum</code> members in the correct order:</p>
<pre><code>from aenum import Enum

class Pres(str, Enum):

    _init_ = 'value, precedence'        # footnote 2
    _order_ = lambda m: m.precedence    # footnote 3

    PRESIDENT = 'president', 1
    COUNSELOR_1 = 'first counselor', 2
    COUNSELOR_2 = 'second counselor', 3
    SECRETARY = 'secretary', 4

    def __repr__(self):
        "added so example below is clearer"
        return '&lt;%s.%s&gt;' % (self.__class__.__name__, self.name)
</code></pre>
<p>and in use:</p>
<pre><code>&gt;&gt;&gt; list(Pres)
[&lt;Pres.PRESIDENT&gt;, &lt;Pres.COUNSELOR_1&gt;, &lt;Pres.COUNSELOR_2&gt;, &lt;Pres.SECRETARY&gt;]
</code></pre>
<hr/>
<p>While I wouldn't call this next version easier, if you can't use <code>aenum</code>, and don't want to try and maintain a huge <code>_order_</code>, it is possible using the <a href="https://docs.python.org/3/library/enum.html#functional-api" rel="nofollow noreferrer">Functional API</a>:</p>
<pre><code>Pres = Enum('Pres', (
        ('PRESIDENT', 'president'),          # comment here
        ('COUNSELOR_1', 'first counselor'),  # more comments here
        ('COUNSELOR_2', 'second counselor'), # you get the idea ;)
        ('SECRETARY', 'secretary'),
        ),
        type=str,
        )

def pres_repr(self):
    "added so example below is clearer"
    return '&lt;%s.%s&gt;' % (self.__class__.__name__, self.name)

Pres.__repr__ = pres_repr
</code></pre>
<p>Ugly, but it works.  However, it would not work if the <code>precedence</code> field was needed.</p>
<hr/>
<p><sup>1</sup> Disclosure:  I am the author of the <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">Python stdlib <code>Enum</code></a>, the <a href="https://pypi.python.org/pypi/enum34" rel="nofollow noreferrer"><code>enum34</code> backport</a>, and the <a href="https://pypi.python.org/pypi/aenum" rel="nofollow noreferrer">Advanced Enumeration (<code>aenum</code>)</a>  library.</p>
<p><sup>2</sup> <code>_init_</code> is necessary in this case as I do not want the <code>precedence</code> value passed to the <code>str</code> constructor.</p>
<p><sup>3</sup> the key function will be given one argument:</p>
<ul>
<li>no <code>_init_</code> -&gt; a tuple of <code>(name, value)</code> where value may also be a tuple (it would have been in the example above)</li>
<li>with <code>_init_</code> -&gt; an <code>aenum.NamedTuple</code> with fields <code>name</code> plus whatever fields are in <code>_init_</code> (so <code>name</code>, <code>value</code>, and <code>precedence</code> in the example above)</li>
</ul>
</div>
<span class="comment-copy">Can you use the enum34 package? It has been backported to Python 2.7.</span>
<span class="comment-copy">@Sebastian:  The example above is using the <code>enum34</code> package.  It's not obvious because <code>enum34</code> installs as <code>enum</code>.</span>
