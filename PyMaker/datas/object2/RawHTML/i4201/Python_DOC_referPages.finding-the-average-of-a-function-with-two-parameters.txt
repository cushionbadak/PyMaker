<div class="post-text" itemprop="text">
<p>I'm relatively new to python and had a quick question about the code I'm trying to write...</p>
<p>I'm finding the average of the values of two lists: latitude and longitude. Here's my code:</p>
<pre><code>def ave_list(lat_list, long_list):
    sum = 0.0 
    for num in lat_list:
        sum = sum + num
    ave_lat = sum / len(lat_list)
    return ave

def main():
    print ave_list([47.7, 37.0, 32.9, 32.0, 40.0, 41.0, 41.4, 41.8, 0.2, 31.8, -6.3])
main()
</code></pre>
<p>So I understand how to find the average if I just had one parameter, but I don't know how to write the code with two parameters. If I run this function, it tells me that ave_list() takes exactly 2 arguments but I only gave one. I understand that, but again, I'm not sure how to get separate averages with the two parameters. Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>The simplest fix is to redefine <code>ave_list</code> to take a single list, and from main, call it once for latitude and once for longitude:</p>
<pre><code>def ave_list(mylist):
    sum = 0.0 
    for num in mylist:
        sum = sum + num
    ave = sum / len(mylist)
    return ave
</code></pre>
<p>Python allows a function to return two values as a tuple, so you could recode your original function to return (ave_lat, ave_lon).  But why add that complication?  Here it is for learning purposes, though:</p>
<pre><code>def ave_list(lat_list, long_list):
    sum = 0.0 
    for num in lat_list:
        sum = sum + num
    ave_lat = sum / len(lat_list)
    sum = 0.0 
    for num in lon_list:
        sum = sum + num
    ave_lon = sum / len(lon_list)
    return (ave_lat, ave_lon)

alat, alon = ave_list([1, 2, 3, 4], [5, 6, 7, 8])
print(alat, alon)
</code></pre>
<p>Of course, as @bla points out in a comment, better to use <code>statistics.mean</code>:</p>
<pre><code>import statistics
alat = statistics.mean([1,2,3,4])
alon = statistics.mean([5,6,7,8])
print(alat, alon)
</code></pre>
<p>It's in python3; not sure about python2.</p>
</div>
<div class="post-text" itemprop="text">
<p>To get rid of the error you should pass two values to your function. Instead of using it a better approach would be with <a href="https://docs.python.org/3/library/statistics.html#statistics.mean" rel="nofollow noreferrer"><code>statistics.mean</code></a>:</p>
<pre><code>from statistics import mean
&gt;&gt;&gt; mean([1, 2, 3])
2
&gt;&gt;&gt; mean([1, 2, 3.0])
2.0
</code></pre>
<p>If that module is not available you may use:</p>
<pre><code>&gt;&gt;&gt; data = [1, 2, 3]
&gt;&gt;&gt; sum(data) / len(data)
2
</code></pre>
<p>if you have only ints and want the result as float in python2 just convert one of the sides to float:</p>
<pre><code>&gt;&gt;&gt; data = [1, 2, 3, 7]
&gt;&gt;&gt; sum(data) / len(data)
3
&gt;&gt;&gt; sum(data) / float(len(data))
3.25
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should remove <code>long_list</code> from <code>ave_list</code> since it isn't even used. </p>
<p>If you want to calculate the <strong>separated</strong> mean of two lists you can either call <code>ave_list</code> twice, one call passing each list or making <code>ave_list</code> retur mutiple values (as a tuple, for an example)</p>
</div>
<div class="post-text" itemprop="text">
<p>The same thing that you do for a list, do for the other, and return 2 values as a <em>tuple</em>. (<a href="https://stackoverflow.com/questions/4873613/return-tuple-from-a-method">[SO]: return tuple from a method
</a>)</p>
<p>Here's an implementation that uses <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer">[Python]: <strong>sum</strong>(<em>iterable[, start]</em>)</a>. <br/>Note that it can be written in a much more compact manner, but I'm keeping all steps separate, so it's clearer:</p>
<pre><code>def ave_list(lat_list, long_list):
    lat_sum = sum(lat_list)  # Calculate the sum
    if len(lat_list):  # Test so we don't divide by 0
        lat_avg = lat_sum / len(lat_list)  # Calculate avg
    else:
        lat_avg = 0  # List empty, consider avg 0
    long_sum = sum(long_list)  # Same thing for longitude
    if len(long_list):
        long_avg = long_sum / len(long_list)
    else:
        long_avg = 0
    return lat_avg, long_avg
</code></pre>
<p>The results can be retrieved via <em>tuple unpacking</em> (check <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow noreferrer">[Python]: Tuples and Sequences</a>):</p>
<pre><code>lat_ave, long_ave = ave_list([1, 2, 3], [3, 4, 5])
</code></pre>
<p>and this should give you <strong><em>2.0</em></strong> for <code>lat_ave</code>, and <strong><em>4.0</em></strong> for <code>long_ave</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just to add to the other answers, you can have a two argument function to calculate the average latitude &amp; longitude as follows</p>
<p>Using <code>statistics.mean</code></p>
<pre><code>import statistics
def ave_lat_long(lat_list, long_list):
    return(statistics.mean(lat_list),statistics.mean(long_list))
</code></pre>
<p>Example of storing returned tuple of average latitude &amp; longitude in separate variables (tuple unpacking)</p>
<pre><code>ave_lat,ave_long= ave_lat_long([47.7, 37.0, 32.9],[40.0, 41.0, 41.4])
</code></pre>
<p>Printing average latitude &amp; longitude</p>
<pre><code>print ave_lat_long([47.7, 37.0, 32.9],[40.0, 41.0, 41.4])
</code></pre>
<p>Result (in console)</p>
<pre><code>(39.2, 40.8)
</code></pre>
<p>Or, defining your own mean function as <code>ave_list</code>:</p>
<pre><code>def ave_list(coordinate_list):
    sum = 0.0 
    for num in coordinate_list:
        sum = sum + num
    ave_list = sum / len(coordinate_list)
    return round(ave_list,1)
</code></pre>
<p>Then define the function for average latitude &amp; longitude </p>
<pre><code>def ave_lat_long(lat_list,long_list):
    return (ave_list(lat_list),ave_list(long_list))
</code></pre>
<p>Printing average latitude &amp; longitude</p>
<pre><code>print(ave_lat_long([47.7, 37.0, 32.9],[40.0, 41.0, 41.4]))
</code></pre>
<p>Result (in console)</p>
<pre><code>(39.2, 40.8)
</code></pre>
</div>
<span class="comment-copy">Check out <a href="https://docs.python.org/3/library/statistics.html#statistics.mean" rel="nofollow noreferrer"><code>statistcs.mean</code></a></span>
