<div class="post-text" itemprop="text">
<p>I'm using an API that sends a date in a wierd format "YYYY-MM-DDTHH:MM:SSZ".
So the date comes out as <code>2018-04-27T23:59:18Z</code>, I have never seen a date and time formatted like this. Its a string and I would like to format it as <code>MM-DD-YYYY HH:MM:SS</code>. I can't even wrap my head around removing the <code>T</code> and <code>Z</code>. Any help would be appreciated! Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>Create <code>datetime.datetime</code> object from your string via <code>datetime.strptime</code>, then turn it back into a string with its <code>strftime</code> method.</p>
<pre><code>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; s = "2018-04-27T23:59:18Z"
&gt;&gt;&gt; datetime.strptime(s, '%Y-%m-%dT%XZ').strftime('%m-%d-%Y %X')
&gt;&gt;&gt; '04-27-2018 23:59:18'
</code></pre>
<p><a href="https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">strptime and strftime behavior</a></p>
<p>(Depending on you locale you might have to use <code>%H</code>, <code>%M</code> and <code>%S</code> instead of <code>%X</code>.)</p>
</div>
<div class="post-text" itemprop="text">
<p>That looks like the ISO 8601 time format.</p>
<p>For reasons that I really don't understand, there's no standard library function that parses ISO 8601 correctly. The <code>dateutil</code> package that you can find on PyPI will parse it for you though.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use this pattern:</p>
<pre><code>import datetime

d = '2018-04-27T23:59:18Z'
myDate = datetime.datetime.strptime(d, '%Y-%m-%dT%H:%M:%SZ')
# datetime.datetime(2018, 4, 27, 23, 59, 18)
</code></pre>
<p>Then to get a datetime string use <code>strftime</code>:</p>
<pre><code>myDate_str = myDate.strftime('%Y-%m-%d %H:%M:%S')
# '2018-04-27 23:59:18'
</code></pre>
</div>
<span class="comment-copy">That's the <a href="https://en.wikipedia.org/wiki/ISO_8601" rel="nofollow noreferrer">international standard</a> for date and time representation...</span>
<span class="comment-copy">Take a look at <a href="https://docs.python.org/3/library/stdtypes.html#str.replace" rel="nofollow noreferrer"><code>str.replace</code></a></span>
<span class="comment-copy">See my comments to @ChihebNexus below - this will probably work for OP, but definitely isn't a generally correct solution.</span>
<span class="comment-copy">This worked for me, the source of my information is unlikely to change the date format from how it is now. Though Julian I will look into using the dateutil package in the future.</span>
<span class="comment-copy">There are a number of edge cases in ISO 8601 that this pattern won't parse correctly (I forget the details, but I've been bitten before). It might be good enough for OP, but it's worth noting that this can be problematic.</span>
<span class="comment-copy">Can you explain more ? I can't see your point. Thanks</span>
<span class="comment-copy">There are a number of issues. At the least in ISO 8601 the separators are optional, so you could format that same timestamp as <code>'20180427T23:59:18Z'</code>, and this format string wouldn't catch that. There are more edge cases too.  If OP happens to always get his strings in this particular variant of ISO (not even unlikely), then this is fine. But it's definitely a little brittle, and could break if whatever source is feeding him numbers changes format to an equally correct ISO option.</span>
<span class="comment-copy">The issue is now you've used two different patterns. Neither pattern matches both versions. A date in ISO format could arrive in <i>either</i> form though. In principle it could be totally random even, and would still be correct.  In practice, the format his datetimes arrive in is probably consistent, but the developer of whatever library or service he's using could perfectly reasonably change the behavior with the expectation that nothing should break (since both forms are valid according to the standard), and then OP's code would stop working.</span>
<span class="comment-copy"><code>dateutil</code> definitely does the right thing. If you look <a href="https://github.com/dateutil/dateutil/blob/master/dateutil/parser/isoparser.py#L217" rel="nofollow noreferrer">here</a> you'll see the logic where it checks if there's a date separator and skips over if if its there.</span>
