<div class="post-text" itemprop="text">
<p>Is there a builtin way to "convert" a bytestring to a unicode string?
I don't want to decode it, I want the string i see on print without the "b".</p>
<p>e.g.
Input:</p>
<pre><code>b'\xb5\xb5\xb5\xb5\r\n1'
</code></pre>
<p>output:</p>
<pre><code>'\xb5\xb5\xb5\xb5\r\n1'  
</code></pre>
<p>I've tried iterating over the byte string, but that gives me a list of integers:</p>
<pre><code>my_bytestring = b'%PDF-1.4\n%\x93\x8c\x8b\x9e'

my_string = ""
my_list = []
for char in my_bytestring:
    my_list.append(char)
    my_string += str(char)
print(my_list)   # -&gt; list of ints
print(my_string) # -&gt; string of converted ints
</code></pre>
<p>I get:</p>
<pre><code>[37, 80, 68, 70, 45, 49, 46, 52, 10, 37, 147, 140, 139, 158]
</code></pre>
<p>I want:</p>
<pre><code>['%', 'P', 'D', 'F', '-', '1', '.', '4', '\\', 'n', '%', '\\', 'x', '9', '3', '\\', 'x', '8', 'c', '\\', 'x', '8', 'b', '\\', 'x', '9', 'e']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/3/library/functions.html#chr" rel="nofollow noreferrer">[Python]: <strong>chr</strong>(<em>i</em>)</a> function:</p>
<blockquote>
<pre><code>&gt;&gt;&gt; b = b"\xb5\xb5\xb5\xb5\r\n1"
&gt;&gt;&gt; s = "".join([chr(i) for i in b])
&gt;&gt;&gt; s
'µµµµ\r\n1'
&gt;&gt;&gt; len(b), len(s)
(7, 7)
</code></pre>
</blockquote>
<p>As @hop mentioned, it would be better to use this method:</p>
<blockquote>
<pre><code>&gt;&gt;&gt; s0 = b.decode(encoding="unicode_escape")
&gt;&gt;&gt; s0
'µµµµ\r\n1'
&gt;&gt;&gt; len(s0)
7
</code></pre>
</blockquote>
<p>However, looking at your 2<sup>nd</sup> example, it seems you need <a href="https://docs.python.org/3/library/functions.html#repr" rel="nofollow noreferrer">[Python]: <strong>repr</strong>(<em>object</em>)</a>:</p>
<blockquote>
<pre><code>&gt;&gt;&gt; my_bytestring = b'%PDF-1.4\n%\x93\x8c\x8b\x9e'
&gt;&gt;&gt; l = [i for i in repr(my_bytestring)][2:-1]
&gt;&gt;&gt; l
['%', 'P', 'D', 'F', '-', '1', '.', '4', '\\', 'n', '%', '\\', 'x', '9', '3', '\\', 'x', '8', 'c', '\\', 'x', '8', 'b', '\\', 'x', '9', 'e']
&gt;&gt;&gt; len(my_bytestring), len(l)
(14, 27)
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Technically you cannot get from bytes to strings without decoding, but there is a codec that does what you want:</p>
<pre><code>&gt;&gt;&gt; b = b'\xb5\xb5\xb5\xb5\r\n1'
&gt;&gt;&gt; s = b.decode('unicode_escape')
&gt;&gt;&gt; s
'µµµµ\r\n1'
&gt;&gt;&gt; print(s)
µµµµ
1
</code></pre>
<p>There is also <code>raw_unicode_escape</code>. You can read about the differences in the <a href="https://docs.python.org/3/library/codecs.html?highlight=unicode_escape#text-encodings" rel="nofollow noreferrer">documentation</a></p>
<p>I very much doubt that there is a use case for having binary data in a unicode string.</p>
</div>
<span class="comment-copy">But they're both technically the same string... c.f: <a href="https://stackoverflow.com/questions/7262828/python-how-to-convert-string-literal-to-raw-string-literal" title="python how to convert string literal to raw string literal">stackoverflow.com/questions/7262828/…</a></span>
<span class="comment-copy">None of the answers there do what I want though. They all decode or start from a unicode string. I amended the question to show what i get vs what i need.</span>
<span class="comment-copy">Where is the bytestring coming from? I.E: Why can't you just do <code>r'...'</code> and not <code>b'...'</code></span>
<span class="comment-copy">Do you want the result to contain literal <code>\ </code>, <code>x</code>, <code>b</code>, etc.?</span>
<span class="comment-copy">You're asking two different questions here. The first string is treated like a normal string (i.e. <code>b'\xb5'</code> becomes <code>'\xb5'</code>), while the 2nd string is treated like a raw string (i.e. <code>b'\xb5'</code> becomes <code>r'\xb5'</code>).</span>
<span class="comment-copy">don't invent your own <code>.decode()</code> use the <code>unicode_escape</code> encoding</span>
<span class="comment-copy">Thanks. Just changing the str(char) to chr(char) in my code did the job!</span>
<span class="comment-copy">Thank you @hop, I'll add it.</span>
<span class="comment-copy">Your links look like they've been inserted by some kind of script. May I ask where I can find this script? It looks useful.</span>
<span class="comment-copy">@Aran-Fey: Unfortunately I didn't have the time to automate it yet, so it's all manual (monkey work) :) .</span>
<span class="comment-copy">Doesn't work for the second string. Gives: UnicodeEncodeError: 'charmap' codec can't encode characters in position 11-14: character maps to &lt;undefined&gt;</span>
<span class="comment-copy">@Yobmod I can't reproduce that. <code>b'%PDF-1.4\n%\x93\x8c\x8b\x9e'.decode('unicode_escape')</code> returns <code>'%PDF-1.4\n%\x93\x8c\x8b\x9e'</code>.</span>
<span class="comment-copy">ah, your right now, don't know how i got it then</span>
