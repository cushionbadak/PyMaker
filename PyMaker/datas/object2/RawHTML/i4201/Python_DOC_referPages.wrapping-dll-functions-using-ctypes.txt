<div class="post-text" itemprop="text">
<p>I'm now wrapping some functions in C++ dll whose original .h an .cpp file are not accessable. After learning the tutorial of ctypes, I still have the some questions. Let me show you some example:
This is from the description file of the dll functions, just telling functions' names, effects and parameters:</p>
<pre><code>#initialize network:
BOOL InitNetwork(char LocalIP[],char ServerIP[],int LocalDeviceID)

#judging if the server is online after network initialization:
BOOL GetOnlineStatus()

#get song name:
char* GetMusicSongName(int DirIndex,int SongIndex)

#making the device playing music:
int PlayServerMusic(int DirIndex,int MusicIndex,int DeviceCout,PUINT lpDeviceID,int UseListIndex,int UserMusicIndex,UINT TaskCode)
</code></pre>
<p>In order to wrap these functions in Python, what I'm tring to do is this:</p>
<pre><code>import ctypes
import os

#load dll
cppdll = ctypes.WinDLL("C:\\VS_projects\\MusicWebService\\MusicWebService\\NetServerInterface.dll")

#wrap dll functions：

#initialize network：
def InitNetwork(LocalIP, ServerIP, LocalDeviceID):
    return cppdll.InitNetwork(LocalIP, ServerIP, LocalDeviceID)
InitNetwork.argtypes = [c_char, c_char, c_int]

#judging if the server is online after network initialization：
def GetOnlineStatus():
    return cppdll.GetOnlineStatus()

#get song name:
def GetMusicSongName(DirIndex, SongIndex):
    return cppdll.GetMusicSongName(DirIndex, SongIndex)
GetMusicSongName.argtypes = [c_int, c_int]

#making the device playing music:
def PlayServerMusic(DirIndex, MusicIndex, DeviceCout, lpDeviceID, UseListIndex, UserMusicIndex, TaskCode):
    return cppdll.PlayServerMusic(DirIndex, MusicIndex, DeviceCout, lpDeviceID, UseListIndex, UserMusicIndex, TaskCode)
</code></pre>
<p>When I type and define the first function (after importing packages and loading the dll) in the VS2015 python interactice window, it gives me an error:</p>
<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'c_char' is not defined
</code></pre>
<p>Do I need to specify the type of input parameters? If so, how to do this? I can't recognize the type of some parameters in the forth function such as <code>PUINT lpDeviceID</code> and <code>UINT TaskCode</code>. How to specify them? 
Moreover, do I need to specify the functions' return value's type? If so, how to specify them?
Could somebody give me the correct wrapping code of the examples above? Thanks for your attention!</p>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is that you don't have the namespaces quite right. Its</p>
<pre><code>cppdll.InitNetwork.argtypes = [ctypes.c_char, ctypes.c_char, ctypes.c_int]
</code></pre>
<p>You can import the ctypes data you need directly into the module. And since <code>ctypes</code> creates function wrappers for you, you don't really need your own <code>def</code> to do the same thing. You can call them with <code>cppdll.Whatever</code> but if you like having the functions at the namespace level, you can just create variables for them.</p>
<pre><code>from ctypes import WinDLL, c_char, c_int
import os

#load dll
cppdll = ctypes.WinDLL("C:\\VS_projects\\MusicWebService\\MusicWebService\\NetServerInterface.dll")

#initialize network：
InitNetwork = cppdll.InitNetwork
InitNetwork.argtypes = [c_char, c_char, c_int]

#judging if the server is online after network initialization：
GetOnlineStatus = cppdll.GetOnlineStatus

#get song name:
GetMusicSongName = cppdll.GetMusicSongName
GetMusicSongName.argtypes = [c_int, c_int]

#making the device playing music:
PlayServerMusic = cppdll.PlayServerMusic
PlayServerMusic = ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a full set of definitions that should work.  Note how to pass an output parameter by creating an instance of the type and passing it by reference.  Many common Windows types are also defined in <code>ctypes.wintypes</code> as well.</p>
<p>Note for InitNetwork the first parameter types are <code>char*</code> in C, so you need <code>c_char_p</code> not <code>c_char</code> and you can directly pass Python byte strings as along as the C code doesn't write to pointers.  <code>ctypes.create_string_buffer()</code> can be used to generate a writable char array if needed.</p>
<pre><code>from ctypes import *
from ctypes import wintypes as w

dll = WinDLL('path/to/dll')

# BOOL InitNetwork(char LocalIP[],char ServerIP[],int LocalDeviceID)
dll.InitNetwork.argtypes = c_char_p,c_char_p,c_int
dll.InitNetwork.restype = w.BOOL

# BOOL GetOnlineStatus()
dll.GetOnlineStatus.argtypes = None
dll.GetOnlineStatus.restype = w.BOOL

# char* GetMusicSongName(int DirIndex,int SongIndex)
dll.GetMusicSongName.argtypes = c_int,c_int
dll.GetMusicSongName.restype = c_char_p

# int PlayServerMusic(int DirIndex,int MusicIndex,int DeviceCout,PUINT lpDeviceID,int UseListIndex,int UserMusicIndex,UINT TaskCode)
dll.PlayServerMusic.argtypes = c_int,c_int,w.PUINT,c_int,c_int,w.UINT
dll.PlayServerMusic.restype = c_int

dll.InitNetwork(b'1.1.1.1',b'2.2.2.2',7)
status = dll.GetOnlineStatus()
song = dll.GetMusicSongName(1,2)
DeviceCout = w.UINT()
result = dll.PlayServerMusic(1,2,3,byref(DeviceCout),4,5,6)
</code></pre>
</div>
<span class="comment-copy"><code>InitNetwork.argtypes = [c_char, c_char, c_int]</code> looks suspicious, as the original c-function accepts a pointer, not a character. <i>Possibly</i> you need <code>c_void_p</code> instead?</span>
<span class="comment-copy">@Aconcagua Yes, you are right.</span>
<span class="comment-copy">Thank you for the benificial answer. Do I need to specify the functions' return value's type? For example, if a function like <code>GetMusicSongName</code> returnes a pointer, does Python returnes a pointer automatically? Thanks again for your suggestion.</span>
<span class="comment-copy"><code>ctypes</code> assumes an integer is returned. If its something else, assign that type to <code>.restype</code>. Details here: <a href="https://docs.python.org/3/library/ctypes.html#return-types" rel="nofollow noreferrer">docs.python.org/3/library/ctypes.html#return-types</a></span>
<span class="comment-copy">Really thanks for the pointing out. Do I have to use <code>.restype</code> to specify the type of returned value?</span>
<span class="comment-copy">@YQ.Wang The default is <code>c_int</code>, so for anything else yes.  <code>BOOL</code> is defined as <code>c_int</code>, so it was not necessary in this case, but best to be specific.</span>
