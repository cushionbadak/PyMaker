<div class="post-text" itemprop="text">
<p>Is there a way of changing the <em>content</em> of <code>str</code> instance in python?</p>
<p>I don't want to just create a new string because i need to pass the string instance as a parameter to another class which will operate with it. Then I need to change the content of the string.</p>
<p>I can't just create new method of the class so it reassigns the string because it's a <code>Widget</code> class of module <code>tkinter</code>.</p>
<p>I need this to change the color of the widgets. I know that there are methods such as <code>config</code> method that will do that for me, but when I have about a hundred widgets and then I need to change the color of all of them and every color is different it's very non-elegant, inconvinient to write <em>config line</em> for each one of that widgets and it is very hard to maintain.</p>
<p>I thought in this case it would be great to use a pointer but unfortunately there are no pointers in python. I even thought about creating some kind of class that would somehow <code>return</code> the <code>self.string</code> content instead of the instance identifier such as <code>&lt;__main__.Spam object at 0x02F20390&gt;</code>.</p>
<pre><code>class String:
...     def __someprivatemethod__(self):
...             return "That returns string on call"
...
&gt;&gt;&gt; spam = String()
&gt;&gt;&gt; spam
&lt;__main__.String object at 0x02F203F0&gt;
&gt;&gt;&gt; # now it should return the "That returns string on call
</code></pre>
<p>I don't want to use the <code>__call__</code> method though, because of the brackets <code>()</code> at the end. In this example i simply want to return <code>"That returns string on call"</code> string. Is this even possible?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>No, you can't change string objects once they are created. String are</strong> <em>immutable</em></p>
<p>However, If I understand you right, what you want can be done with</p>
<pre><code>class StringClass:
    def __someprivatemethod__(self):
        return "That returns string on call"
    def __repr__(self):
        return self.__someprivatemethod__()
    def __str__(self):
        return repr(self)
    def __add__(self, s):
        return '{}{}'.format(repr(self), s)

&gt;&gt;&gt; a = StringClass()
&gt;&gt;&gt; a
That returns string on call
&gt;&gt;&gt; a + 'Strings'
&gt;&gt;&gt;
That returns string on callStrings
</code></pre>
</div>
<span class="comment-copy">I'm not sure exactly what you're trying to do, but a few things that might be what you need: (1) use a <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer"><code>@property</code></a> instead of a normal method; (2) use a <a href="https://docs.python.org/3/library/tkinter.html#coupling-widget-variables" rel="nofollow noreferrer"><code>tkinter.StringVar</code></a>; (3) use a list with one value in it as a sort of explicit "pointer".</span>
<span class="comment-copy">Also, that <code>&lt;__main__.Spam object at 0x02F20390&gt;</code> can be changed by overriding the <a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow noreferrer"><code>__repr__</code></a> special method. You can also separately override <code>__str__</code> to provide different "human-readable" and "programmer-readable" representations of same object (the way, e.g., the string <code>"abc"</code> looks like <code>abc</code> when you <code>print</code> it, but <code>'abc'</code> with quotes when you just evaluate it at the interpreter prompt).</span>
<span class="comment-copy">But still when you do type <code>a + "Somestring"</code> instead of the last line you get an <code>TypeError</code></span>
<span class="comment-copy">If that's what you need, you need to implement <code>__add__</code> magic method. I've updated my answer</span>
<span class="comment-copy">The <code>__repr__</code> method is called only in console, not in real code. I need in the <i>real code</i> to return the <code>str</code> when for example line <code>type(a)</code> line is executed. I need it to pass the "That returns some string" to the <code>type</code> function.</span>
<span class="comment-copy"><code>type(a)</code> returns totally something else. If you call <code>type('somestring')</code> you get its <code>type</code>, not the value. <code>__repr__</code> is printed to console and also when you call <code>print variable</code></span>
<span class="comment-copy">If you want to return a string when calling <code>type</code> on object, you should look into metaclasses. But I really think what you are trying to achieve can be done in a simpler way.</span>
