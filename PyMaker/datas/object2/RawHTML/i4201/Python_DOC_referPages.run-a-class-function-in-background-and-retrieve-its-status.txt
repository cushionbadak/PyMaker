<div class="post-text" itemprop="text">
<pre><code>import threading
from azure.storage.blob import BlockBlobService

def do_other_stuff():
    print("so much stuff to do")

class ABlob:
    def __init__(self, account_name, account_key, container_name, blob_name, file_path):
        self.account_name = account_name
        self.account_key = account_key
        self.container_name = container_name
        self.blob_name = blob_name
        self.file_path = file_path
        self.blob_service = BlockBlobService(account_name=self.account_name, account_key=self.account_key)

    def get_blob(self):
        download_thread = threading.Thread(
            target=self.blob_service.get_blob_to_path,
            args=(self.container_name, self.blob_name, self.file_path))
        download_thread.start()

    def get_blob_name(self):
        print(self.blob_name)


first_blob = ABlob(account_name='account_name',
                   account_key='key',
                   container_name='container', blob_name='something.csv',
                   file_path='path')


first_blob.get_blob()
first_blob.get_blob_name()
do_other_stuff()
</code></pre>
<p>I have Azure Blobs that need to download and upload(not shown). I do not want to wait for them to complete their process as I have other things that should be done. At some point though, I will need to confirm if they have successfully downloaded or uploaded.</p>
<p>With my current code, I have used the threading library. If an error happens in the upload or download process, the thread handling the transaction will exit with an error. I have no way to inform the main thread of completion and the status of the completion. </p>
<p>What do I need to do to be able to get the status of <code>get_blob</code>? Is there a another library that has a less dangerous way of handling this situation? I have referenced the following threads but cannot figure out how to combine their different approaches.</p>
<p><a href="https://stackoverflow.com/questions/2829329/catch-a-threads-exception-in-the-caller-thread-in-python">Catch a thread's exception in the caller thread in Python</a></p>
<p><a href="https://stackoverflow.com/questions/11533405/python-multiprocessing-pool-retries">python multiprocessing pool retries</a></p>
<p><a href="https://stackoverflow.com/questions/42009202/how-to-call-a-async-function-contained-in-a-class">How to call a async function contained in a class</a></p>
<p><a href="https://stackoverflow.com/questions/7168508/background-function-in-python">background function in Python</a></p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>What do I need to do to be able to get the status of <code>get_blob</code>?</p>
</blockquote>
<p>You can wrap <code>get_blob</code> in a function that will store information about whether it succeeded, and store the return value if any. Instead of <code>target=self.blob_service.get_blob_to_path</code>, you can write <code>target=self._get_blob_background</code>. The new <code>_get_blob_background</code> method can call <code>self.result = self.blob_service.get_blob_to_path</code> and use <code>try</code> and <code>except Exception as e</code> to catch all exceptions and, in case of exception, execute <code>self.result_exception = e</code>, so that the main thread can distinguish the result from the exception.</p>
<p>Even better, you can use the <code>concurrent.futures</code> library to do all that for you:</p>
<pre><code>pool = concurrent.futures.ThreadPoolExecutor()

def get_blob(self):
    return pool.submit(self.blob_service.get_blob_to_path,
                       self.container_name, self.blob_name, self.file_path)
</code></pre>
<p>Now <code>get_blob()</code> will run in the background, like in your code, but here it will return a <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future" rel="nofollow noreferrer"><code>Future</code></a> object that you can query to find out whether the job completed, and how it completed.</p>
</div>
<span class="comment-copy">I had considered your first approach but thought it may be too sloppy. The <code>concurrent_futures</code> library is definitely what I was looking for. Is there a consequence to having one pool object per instances of my class? Or should the pool be at a higher level than a per instance basis.</span>
<span class="comment-copy">@supertommy An executor maintains a pool of threads or processes, spawning and destroying them on-demand. If you create an executor for each instance, you will be responsible for calling <code>close()</code> on the executor to ensure that its threads are deleted. Also, a new thread will be spawned on each call, which a thread pool is normally designed to prevent to improve efficiency.</span>
