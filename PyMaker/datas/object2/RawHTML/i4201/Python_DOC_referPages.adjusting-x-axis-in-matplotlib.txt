<div class="post-text" itemprop="text">
<p>I have a range of values for every hour of year. Which means there are 24 x 365 = 8760 values. I want to plot this information neatly with matplotlib, with x-axis showing January, February...... 
Here is my current code:</p>
<pre><code>from matplotlib import pyplot as plt

plt.plot(x_data,y_data,label=str("Plot"))
plt.xticks(rotation=45)
plt.xlabel("Time")
plt.ylabel("Y axis values")
plt.title("Y axis values vs Time")
plt.legend(loc='upper right')
axes = plt.gca()
axes.set_ylim([0,some_value * 3])
plt.show() 
</code></pre>
<p>x_data is a list containing dates in <code>datetime</code> format. y_data contains values corresponding to the values in x_data. How can I get the plot neatly done with months on the X axis? An example:</p>
<p><a href="https://i.stack.imgur.com/KHGYw.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/KHGYw.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>You could create a <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.scatter.html#matplotlib.pyplot.scatter" rel="nofollow noreferrer">scatter plot</a> with horizontal lines as markers. The month is extracted by using the <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer"><code>datetime</code> module</a>. In case the dates are not ordered, the plot sorts both lists first according to the date:</p>
<pre><code>#creating a toy dataset for one year, random data points within month-specific limits
from datetime import date, timedelta
import random
x_data = [date(2017, 1, 1) + timedelta(days = i) for i in range(365)]
random.shuffle(x_data)
y_data = [random.randint(50 * (i.month - 1), 50 * i.month) for i in x_data]

#the actual plot starts here
from matplotlib import pyplot as plt
#get a scatter plot with horizontal markers for each data point
#in case the dates are not ordered, sort first the dates and the y values accordingly 
plt.scatter([day.strftime("%b") for day in sorted(x_data)], [y for _xsorted, y in  sorted(zip(x_data, y_data))], marker = "_", s = 900)
plt.show()
</code></pre>
<p>Output<br/>
<a href="https://i.stack.imgur.com/aavAX.jpg" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/aavAX.jpg"/></a></p>
<p>The disadvantage is obviously that the lines have a fixed length. Also, if a month doesn't have a data point, it will not appear in the graph. </p>
<p><strong>Edit 1:</strong><br/>
You could also use <a href="https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.hlines.html#matplotlib.axes.Axes.hlines" rel="nofollow noreferrer">Axes.hlines</a>, as seen <a href="https://stackoverflow.com/a/34009257/8881141">here</a>.<br/>
This has the advantage, that the line length changes with the window size. And you don't have to pre-sort the lists, because each start and end point is calculated separately. 
The toy dataset is created as above.</p>
<pre><code>from matplotlib import pyplot as plt
#prepare the axis with categories Jan to Dec
x_ax = [date(2017, 1, 1) + timedelta(days = 31 * i) for i in range(12)]
#create invisible bar chart to retrieve start and end points from automatically generated bars
Bars = plt.bar([month.strftime("%b") for month in x_ax], [month.month for month in x_ax], align = "center", alpha = 0)
start_1_12 = [plt.getp(item, "x") for item in Bars]
end_1_12   = [plt.getp(item, "x") + plt.getp(item, "width") for item in Bars]
#retrieve start and end point for each data point line according to its month
x_start = [start_1_12[day.month - 1] for day in x_data]
x_end = [end_1_12[day.month - 1] for day in x_data]

#plot hlines for all data points
plt.hlines(y_data, x_start, x_end, colors = "blue")
plt.show()
</code></pre>
<p>Output  <a href="https://i.stack.imgur.com/7TC1k.jpg" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/7TC1k.jpg"/></a></p>
<p><strong>Edit 2:</strong><br/>
Now your description of the problem is totally different from what you show in your question. You want a simple line plot with specific axis formatting. This can be found easily in the <code>matplotlib</code> documentation and all over <code>SO</code>. An example, how to achieve this with the above created toy dataset would be:</p>
<pre><code>import matplotlib.pyplot as plt
from matplotlib.dates import DateFormatter, MonthLocator

ax = plt.subplot(111)
ax.plot([day for day in sorted(x_data)], [y for _xsorted, y in  sorted(zip(x_data, y_data))], "r.-")
ax.xaxis.set_major_locator(MonthLocator(bymonthday=15))
ax.xaxis.set_minor_locator(MonthLocator())
ax.xaxis.set_major_formatter(DateFormatter("%B"))
plt.show()
</code></pre>
<p>Output 
<a href="https://i.stack.imgur.com/uFLrB.jpg" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/uFLrB.jpg"/></a></p>
</div>
<span class="comment-copy">I was able to achieve this by having repeated Januaries, Februaries.. in the x_data, but the graph is plotting only 12 points corresponding to each month.</span>
<span class="comment-copy">Its a list of <code>datetime</code> values</span>
<span class="comment-copy">Can you provide a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> of the issue and clearly explain in how far none of the numerous questions about plotting datetimes with matplotlib is not helping here?</span>
<span class="comment-copy">Thanks for the detailed reply. Let me check</span>
<span class="comment-copy">The first one does the job, but as you said, the plot changes when the graph is resized. The 2nd one generates bars, but I need line graph.</span>
<span class="comment-copy">I need a normal plot instead of a scatter plot, but the x axis have months.</span>
<span class="comment-copy">It is impossible that the second version generates bars. It uses <code>plt.hlines</code>, which, as the name implies, creates horizontal lines. And what exactly is "a normal plot"? This graph replicates, what you have shown in your question, so it is difficult to understand, how your desired output differs. Maybe part of the problem is that you haven't provided a sample input.</span>
<span class="comment-copy">I have a list of values for each hour of an year. So the plot will be a continuous line instead of bars.</span>
