<div class="post-text" itemprop="text">
<p>I've spent some time reading the documentation of the <a href="https://docs.python.org/3/library/email.html#module-email" rel="nofollow noreferrer">email</a> library module. We have got a new API. The old API is now marked legacy.</p>
<p>I have only one small email application and I expected it won't be difficult to rewrite it to use the new and better API only. However I am unable to find a simple replacement for the simple <code>email.utils.parseaddr()</code> function. They say:</p>
<blockquote>
<p>There is no need to directly use these with the new API, since the
  parsing and formatting they provide is done automatically by the
  header parsing machinery of the new API.</p>
</blockquote>
<p>It may be true regarding the <code>email</code> module alone, but I need to pass RFC821-style addresses to <code>smtplib</code> module functions expecting <code>from_addr</code> and <code>to_addrs</code>. Those SMTP Envelope addresses are basically stripped message header addresses and <code>parseaddr</code> can create them easily:</p>
<pre><code>smtp_addr = email.utils.parseaddr(email_addr)[1]
</code></pre>
<p>Is there a comparably simple alternative in the new API (I must have overseen it)? If not, should I expect that a "legacy" API will stay in the library or it will be rather deprecated in the future?</p>
<p>Note: I know <code>smtplib</code> can extract the addresses from the message headers. I still like to pass addresses explicitly.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Short answer</strong>: <strong>Yes</strong>, you can keep using it, as of now.</p>
<p><strong>Long answer</strong>:</p>
<p><a href="https://www.python.org/dev/peps/pep-0004/" rel="nofollow noreferrer">PEP 4</a> specifies that before supported APIs are removed, they must be deprecated; specifies a process for deprecation; and lists all deprecated modules, current and historical.</p>
<p>None of the "Legacy API" submodules currently documented under <code>email</code> are marked "deprecated" in PEP 4 or in their Python 3.6.5 documentation.  There is an <a href="https://bugs.python.org/issue28159" rel="nofollow noreferrer">open proposal</a> to deprecate support for the <code>isdst</code> option in <a href="https://docs.python.org/3/library/email.util.html" rel="nofollow noreferrer"><code>email.utils.localtime</code></a>, but that is the only proposed deprecation to the <code>email</code> module I was able to turn up in searching.</p>
<p>Documentation <a href="https://docs.python.org/3/library/email.mime.html" rel="nofollow noreferrer">elsewhere in the <code>email</code> package</a> indicates, to me anyway, that this is an API that receives a fair amount of attention and care, and is not neglected.  I see no obvious reason to fear that currently documented APIs there will be deprecated any time soon, even the ones in the "Legacy API" section.</p>
<p>For example, this remark in <a href="https://docs.python.org/3/library/email.mime.html" rel="nofollow noreferrer"><code>email.mime</code></a>:</p>
<blockquote>
<p>This module is part of the legacy (Compat32) email API. Its functionality is partially replaced by the contentmanager in the new API, but in certain applications these classes may still be useful, even in non-legacy code.</p>
</blockquote>
<p>tells me that the designation of "legacy" implies only that it is no longer considered the best, most preferred module to use for the most common purposes; there is no actual deprecation warning that the API will soon disappear.</p>
<p>Of course, seeing no proposal for deprecation today is no guarantee that it will not suddenly be deprecated tomorrow; and I suppose one might expect a "Legacy API" to be a more likely target for deprecation.  But until deprecation is formally proposed, if not approved, there is in theory no reason to fear using an API; and considering the amazing length of the Python 2 to 3 transition period (what is it, <a href="https://pythonclock.org/" rel="nofollow noreferrer">11 years now</a>?), I think you have little to worry about with this API.</p>
</div>
<span class="comment-copy">If 'can't means the physical possibility, then yes, you can, why not. If you ask whether you should continue using it, then the answer is opinion based, I am afraid.</span>
<span class="comment-copy">Yes you are right, based on the use case, one should take a call, eg. frequency of software updation.</span>
