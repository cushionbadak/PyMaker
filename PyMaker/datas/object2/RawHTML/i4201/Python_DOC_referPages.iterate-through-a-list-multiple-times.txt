<div class="post-text" itemprop="text">
<p>I'd like to iterate through a list multiple times. For example:</p>
<pre><code>mylist = [10,2,58]

for i in iterate_multiple_times(mylist, 3):
    print(i)
</code></pre>
<p>should print:</p>
<pre><code>10
2
58
10
2
58
10
2
58
</code></pre>
<p>The list is very long and I don't want to create nested <code>for</code> loops for indentation/style purposes.</p>
<p>Is there a better solution (e.g. from the point of view of auxiliary storage) than the following?</p>
<pre><code>from itertools import chain, repeat

for i in chain.from_iterable(repeat(mylist, 3)):
    print(i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No, what you have is about as good as it gets. Both <code>repeat</code> and <code>chain.from_iterable</code> are lazy, you aren't creating copies of the whole list. You may want to extract that into 
a separate function if you use it multiple times</p>
<p>See <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">Itertools Recipes</a></p>
<pre><code>def ncycles(iterable, n):
    "Returns the sequence elements n times"
    from itertools import chain, repeat
    return chain.from_iterable(repeat(iterable, n)) 
    # the general recipe wraps iterable in tuple()
    # to ensure you can walk it multiple times
    # here we know it is always a list

mylist = [10,2,58]

for i in ncycles(mylist, 3):
    print(i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use nested <code>for</code> loops in a generator expression:</p>
<pre><code>&gt;&gt;&gt; mylist = [10, 2, 58]
&gt;&gt;&gt; for i in (x for _ in range(3) for x in mylist):
...     print(i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Other than using <code>itertools</code> primitives, you can multiply the list:</p>
<pre><code>for i in mylist * 3: print(i)
</code></pre>
<p>Or create your own procedure:</p>
<pre><code>def mul(iterable, amount):
   while amount &gt; 0:
      for x in iterable: yield x
      amount -= 1
</code></pre>
<p>Not much in standard libs/builtins I'm afraid.</p>
</div>
<span class="comment-copy">why not nested <code>for</code> loops?</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/12235552/r-function-rep-in-python-replicates-elements-of-a-list-vector">R function rep() in Python (replicates elements of a list/vector)</a></span>
<span class="comment-copy">how about <code>while i in range(len(mylist)*3)</code> and <code>obj = mylist(i%3)</code>?</span>
<span class="comment-copy">both <code>repeat</code> and <code>chain.from_iterable</code> are lazy, you aren't creating copies of the whole list</span>
<span class="comment-copy">@Ev.Kounis You have a bunch of errors there... <code>mylist(i%3)</code>? <code>while i in range(...)</code>?</span>
<span class="comment-copy">OP already arrived at this solution.</span>
<span class="comment-copy">@mhawke yes, but didn't think about pulling it out into a function</span>
<span class="comment-copy">Wrapping OP's code in a function is not really an answer though.</span>
<span class="comment-copy">I think it's valid to repost the code from the question as an answer, because it's a very good solution - better than most other solutions that have been posted in other answers. But you should probably explain why it's a good solution. Maybe add a statement like "The code you have already uses the minimum amount of auxiliary storage. One way to improve it would be to wrap it in a function." or something like that.</span>
<span class="comment-copy">Although this uses nested for loops, which the OP for some unknown reason doesn't like, it's probably the best answer. It's simple and memory efficient.</span>
<span class="comment-copy">I think OP needs to clarify "why not nested <code>for</code> loops" before I can upvote this answer. Otherwise, this is a possible solution to a unclear problem.</span>
<span class="comment-copy">@jpp: "for indentation/style purposes". This answer shows a way to put nested loops on one line to avoid nesting.</span>
<span class="comment-copy">@vaultah. True, but this implies (in my opinion) an oxymoron. Indentation and style aren't exclusive. In fact, one can say <i>indentation is good style</i>!! Prefix this answer with indentation is good and I'll upvote !</span>
<span class="comment-copy">According to OP, the list is "very long", but here you build a 3 * "very long" list just to iterate over it</span>
<span class="comment-copy">Isn't that pythonic way? And naive generator (as well as any other naive reiterating solution) would break as soon as we substitute any other single-run iterable,</span>
<span class="comment-copy">Your code doesn't work with single-run iterables either... You can't use that as an argument.</span>
<span class="comment-copy">Yes, that is why I called it <i>naive</i> generator.</span>
