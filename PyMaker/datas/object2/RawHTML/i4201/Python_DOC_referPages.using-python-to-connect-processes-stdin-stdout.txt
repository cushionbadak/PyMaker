<div class="post-text" itemprop="text">
<p>I have a bash script (fifo1 and fifo2 are created with mkfifo):</p>
<pre><code>processor &lt;fifo1 &gt;fifo2 &amp;
source &gt;fifo1 &amp;
sink &lt;fifo2 &amp;
</code></pre>
<p>which realizes the graph:</p>
<pre><code>source -&gt; processor -&gt; sink
</code></pre>
<p>How would I go about doing this in a python script ?</p>
</div>
<div class="post-text" itemprop="text">
<p>To play with system processes you can use <a href="https://docs.python.org/3/library/asyncio-subprocess.html#" rel="nofollow noreferrer">Subprocess</a> and <a href="https://docs.python.org/3/library/subprocess.html#popen-constructor" rel="nofollow noreferrer">Popen</a>.</p>
<p>Then to share data between processes you can use <a href="https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.asyncio.subprocess.PIPE" rel="nofollow noreferrer">PIPE</a>.</p>
<p>Example codes are also provided <a href="https://docs.python.org/3/library/asyncio-subprocess.html#subprocess-examples" rel="nofollow noreferrer">here</a></p>
<p>Here is a simple implementation:</p>
<p>p1.py</p>
<pre><code>import subprocess

proc = subprocess.Popen(['python', 'temp2.py'], stdin=subprocess.PIPE ,stdout=subprocess.PIPE)

stdout_value, stderr_value = proc.communicate()

print('\nStdout value' + repr(stdout_value) + '\n')
print('\nStderr value' + repr(stderr_value) + '\n')
</code></pre>
<p>This code will call <strong>temp2.py</strong> program then
temp2.py</p>
<pre><code>import subprocess

proc = subprocess.Popen(['ls'], stdin=subprocess.PIPE ,stdout=subprocess.PIPE
                        , stderr=subprocess.PIPE)

stdin_value, stdout_value = proc.communicate()
print('\nStdin value' + repr(stdin_value) + '\n')
print('\nStdout value' + repr(stdout_value) + '\n')
</code></pre>
<p>The <strong>temp2.py</strong> will then execute <code>ls</code> command in your current directory and then save the result. </p>
<p>To get more details of how to use the stored value from pipes check <a href="https://pymotw.com/2/subprocess/index.html#connecting-segments-of-a-pipe" rel="nofollow noreferrer">this</a> there are many variation to use system input output and it depends on your implementation so check the above docs for further help.</p>
</div>
<span class="comment-copy">Is there anything special about your script that requires named pipes, instead of <code>source | processor | sink</code>?</span>
<span class="comment-copy">@chepner  This is an asynchronous system where source can yield data at any time (of indeterminate length). And the system should run until "killed". It strikes me as the <code>source | processor | sink</code> construction does not lend itself exactly to this, but I might be wrong. I'll investigate that.</span>
