<div class="post-text" itemprop="text">
<p>Here is a simple example of using <code>asyncio</code> to print out numbers from 0 to 9.</p>
<p><strong>Problem:</strong> Sometimes the code prints out the numbers from 0 to 7, then prints 9, then 8. Especially when you set <code>ThreadPoolExecutor</code> to a smaller number like 4 or 5.</p>
<pre><code>0
1
2
3
4
5
6
7
9
8
</code></pre>
<p>How do you get it to <strong>always</strong> print in sequence from 0 to 9? Why did it not print in sequence?</p>
<pre><code>0
1
2
3
4
5
6
7
8
9
</code></pre>
<p><strong>Code</strong></p>
<pre><code>import asyncio
from concurrent.futures import ThreadPoolExecutor


async def printThreaded(THREAD_POOL, length):   
    loop = asyncio.get_event_loop()
    futures = []
    for i in range(length):
        futures.append(loop.run_in_executor(THREAD_POOL, echo, i))
    await asyncio.wait(futures)


def echo(i):
    print(i)


THREAD_POOL = ThreadPoolExecutor(16)
with THREAD_POOL:
    loop = asyncio.get_event_loop()
    length = 10
    loop.run_until_complete(printThreaded(THREAD_POOL, length))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>What happens in your code now?</h2>
<p>You create list of coroutines (<code>futures</code>) that will each run <code>echo</code> in thread pool, than you start them all at once (<code>await asyncio.wait(futures)</code>). Since multiple <code>echo</code> running in same time and each prints on being run, all this prints can happen any time.</p>
<h2>What do you want to do?</h2>
<p>You probably don't really want to run coroutines in order (otherwise you can just call it in loop without <code>asyncio</code>), you want to <strong>run them in thread pool concurrently, but print their results in order coroutines were created</strong></p>
<p>In this case you should:</p>
<ol>
<li><p>split actual work that will happen in thread from
printing it</p></li>
<li><p>probably prefer to use <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.gather" rel="nofollow noreferrer">asyncio.gather</a> to get computed results in order</p></li>
<li><p>finally print ordered results you got in main thread</p></li>
</ol>
<h2>Summary</h2>
<p>Here's modified version of your code that does explained above:</p>
<pre><code>import time
from random import randint

import asyncio
from concurrent.futures import ThreadPoolExecutor


async def printThreaded(THREAD_POOL, length):   
    loop = asyncio.get_event_loop()

    # compute concurrently:
    coroutines = []
    for i in range(length):
        coroutine = loop.run_in_executor(THREAD_POOL, get_result, i)
        coroutines.append(coroutine)
    results = await asyncio.gather(*coroutines)

    # print ordered results:
    for res in results:
        print(res)



def get_result(i):

    time.sleep(randint(0, 2))  # actual work, reason you delegate 'get_result' function to threaed

    return i  # compute and return, but not print yet


THREAD_POOL = ThreadPoolExecutor(4)
with THREAD_POOL:
    loop = asyncio.get_event_loop()
    length = 10
    loop.run_until_complete(printThreaded(THREAD_POOL, length))
</code></pre>
</div>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/34377319/combine-awaitables-like-promise-all">Possible duplicate</a>?</span>
