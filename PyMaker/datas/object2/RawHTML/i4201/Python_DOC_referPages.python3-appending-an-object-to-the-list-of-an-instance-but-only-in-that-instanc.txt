<div class="post-text" itemprop="text">
<p>I have a list of objects called TerrainTile. 
Each of these instances have a list called resourceList. </p>
<pre><code>resourceList = []
</code></pre>
<p>I append an object called obj to this list within this method:</p>
<pre><code>def add_resource_object (self, obj):
    self.resourceList.append(obj)
    return
</code></pre>
<p>For some reason, instead of each individual instance having its own list called resourceList. It seems all instances are sharing the same resourceList list and when it is appended to all instances are appended to.</p>
<p>I have checked over and over but cant seem to figure out why the .append() is appending to all instances of TerrainTile</p>
<p>Thanks in advanced!</p>
<p>Edit: The solution was to declare the variables for the class within the <strong>init</strong> constructor rather than as a member of the class itself. Thank yall!</p>
</div>
<div class="post-text" itemprop="text">
<p>Based on your snippet above:</p>
<pre><code>resourceList = []
</code></pre>
<p>You're creating a class variable shared between all instances, rather than an instance variable that's local to a particular instance. Instead, initialize your instance variable like so:</p>
<pre><code>def __init__(self):
    self.resourceList = []
</code></pre>
<p>See here for details: <a href="https://docs.python.org/3/tutorial/classes.html#class-and-instance-variables" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/classes.html#class-and-instance-variables</a></p>
</div>
<div class="post-text" itemprop="text">
<p>As stated in the comments and other answers, you are passing around the same instance variable to each list. Depending on the type of your object, you may be able to make a copy of it before adding it to each list.</p>
<p>Import it like this</p>
<pre><code>from copy import deepcopy
</code></pre>
<p>Use it like this</p>
<pre><code>new_obj = deepcopy(obj)
</code></pre>
</div>
<span class="comment-copy">The problem is that from the start your <code>self.resourceList</code> probably all point to the same list. You need to show how your class / instances are constructed, specially <code>self.resouourceList</code>.</span>
<span class="comment-copy">Blind guess: you're defining <code>resourceList</code> in your class outside of your constructor. See <a href="https://stackoverflow.com/q/1680528/354577">stackoverflow.com/q/1680528/354577</a> (Side note: it would be more common to call this <code>resource_list</code> in Python code.)</span>
