<div class="post-text" itemprop="text">
<p>I'm looking to move a motorised slider using a Raspberry Pi. However, while debugging the system I was wondering if it is possible to use: </p>
<pre><code>target = int(raw_input(&lt;message&gt;))
</code></pre>
<p>In a way that message could dynamically change before the user inputs a value. For me, it would be great to see the current value that is read from the slider in this <code>&lt;message&gt;</code> for example.</p>
<p>And if that isn't possible, is it possible to have a line printed above or below the <code>raw_input</code> that remains changing while the system waits for the users' input?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can find that as a non-blocking input. </p>
<p><a href="https://stackoverflow.com/questions/30929661/non-blocking-raw-input-in-python">Here is a solution from stack overflow</a>, which uses threads</p>
<p>I did a little modified solution, it still needs some tweaking, but its more or less what you have to do.</p>
<pre><code>python
import threading
import time
import random

userInput = ""
finished = False
sensorValue = 100
previousValue = 0

def Listener():
    global userInput, finished, sensorValue
    userInput = raw_input(sensorValue)
    if len(userInput) &gt; 0:
        print(len(userInput))
        finished = True
    else:
        finished = False

while True:
    if sensorValue != previousValue:
        print("Received new slider info. SliderValue is {}".format(sensorValue))
        previousValue = sensorValue
    else:
        print("No new info from slider. Sleeping two seconds.")
    if not finished:
        listener = threading.Thread(target=Listener)
        listener.start()
    else:
        break
    if random.randint(0,1) == 1:
        sensorValue += 10 
    time.sleep(2) 
</code></pre>
<p>See if that answers your question! :)</p>
</div>
<span class="comment-copy">If you are working on the terminal, you might want to look at this: <a href="https://docs.python.org/3/howto/curses.html" rel="nofollow noreferrer">docs.python.org/3/howto/curses.html</a> ... You can create text based applications which allow updates to any part of the screen and have very powerful input capabilities.</span>
<span class="comment-copy">Alright, looking into them now! Thanks for that swift response!</span>
