<div class="post-text" itemprop="text">
<p>I am working on a scrapy crawler, and this issue really bothers me since I already been trapped by this for days.</p>
<p>This placeholders function works fine when I using "?" instead of "%s" for SQLite db. But while using "?" as the database switching to MySQL, it shows: </p>
<blockquote>
<p>"TypeError: not all arguments converted during string formatting
  "</p>
</blockquote>
<p>even I pay lots of effort modifying codes and changing the placeholder(supposedly?) it still shows :</p>
<blockquote>
<p>"  query = query % self._escape_args(args, conn) ValueError: unsupported format character ',' "</p>
</blockquote>
<p>more specifically :</p>
<pre><code>Traceback (most recent call last):

  File "/usr/lib64/python3.4/dist-packages/twisted/internet/defer.py", line 653, in _runCallbacks
    current.result = callback(current.result, *args, **kw)

File "/home/ec2-user/lulu_testing/get_download_file/hello_scrapy/hello/hello/pipelines.py", line 42, in process_item
    self.cur.execute(insert_query, insert_values)

File "/usr/lib/python3.4/dist-packages/pymysql/cursors.py", line 163, in execute
    query = self.mogrify(query, args)

File "/usr/lib/python3.4/dist-packages/pymysql/cursors.py", line 142, in mogrify
    query = query % self._escape_args(args, conn)

ValueError: unsupported format character ',' (0x2c) at index 94
</code></pre>
<blockquote>
<p>the pipline for mysql version </p>
</blockquote>
<pre><code>import pymysql
import scrapy
from hello.items import HelloItem

class HelloPipeline(object):

def __init__(self):#

    self.conn = pymysql.connect(host="localhost", port=3306, user="root", passwd="lulu", db="test", charset="utf8", use_unicode=True)
    self.cur = self.conn.cursor()


    self.cur.execute("drop table IF EXISTS test;")
    self.conn.commit()

    self.cur.execute("create table if not EXISTS table_test_4(test0 text, test1 text, test2 text, test3 text,test4 text, test5 text, test6 text, test7 text, test8 text, test9 text);")
    self.conn.commit()

    #pass


def process_item(self, item, spider):#

    col = ",".join(item.keys())
    placeholders = ",".join(len(item) * "%s")

    insert_query = "INSERT INTO test_table_4({0}) VALUES({1});".format(col,placeholders)

    insert_values = tuple(item.values())


    self.cur.execute(insert_query, insert_values)

    return item

def close_spider(self, spider):#
    self.cur.close()
    self.conn.close()
    #pass
</code></pre>
<blockquote>
<p>the SQLite version(what i was using b4)</p>
</blockquote>
<pre><code>import sqlite3
import scrapy
from hello.items import HelloItem

class HelloPipeline(object):

def open_spider(self, spider):#
    self.conn = sqlite3.connect("test_database_ver_2018_03_31.sqlite")
    self.cur = self.conn.cursor()
    self.cur.execute("create table if not exists test_table(test0 text, test1 text, test2 text, test3 text,test4 text, test5 text, test6 text, test7 text, test8 text, test9 text);")        
    #pass

def close_spider(self, spider):#
    self.conn.commit()
    self.conn.close()
    #pass

def process_item(self, item, spider):#

    col = ",".join(item.keys())       
    placeholders = ",".join(len(item) * "?")
    sql = "insert into test_table({}) values({})"


    self.cur.execute(sql.format(col, placeholders), tuple(item.values()))


    return item
</code></pre>
<blockquote>
<p>data settings of main scrapy crawler program</p>
</blockquote>
<pre><code>    testitem = HelloItem()

    testitem["test0"] = house_detail.select(".houseInfoTitle")[0].text        
    testitem["test1"] = house_detail.select(".pageView")[0].text 
    testitem["test2"] = house_detail.select(".detailInfo")[0].text
    testitem["test3"] = house_detail.select(".houseIntro")[0].text
    testitem["test4"] = house_detail.select(".lifeBox")[0].text
    testitem["test5"] = house_detail.select(".labelList")[0].text
    testitem["test6"] = house_detail.select(".facility")[0].text
    testitem["test7"] = str(house_detail.select(".userInfo"))
    testitem["test8"] = str(house_detail.select(".banner"))
    testitem["test9"] = str(house_detail.select("#show"))

    return testitem
</code></pre>
<blockquote>
<p>item setting</p>
</blockquote>
<pre><code>import scrapy


class HelloItem(scrapy.Item):

test0 = scrapy.Field()
test1 = scrapy.Field()
test2 = scrapy.Field()
test3 = scrapy.Field()
test4 = scrapy.Field()
test5 = scrapy.Field()
test6 = scrapy.Field()
test7 = scrapy.Field()
test8 = scrapy.Field()
test9 = scrapy.Field()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that this line:</p>
<p><code>placeholders = ",".join(len(item) * "%s")</code></p>
<p>isn't doing what you expect.</p>
<pre><code>&gt;&gt;&gt; item = {'a': 1, 'b': 2, 'c': 3}
&gt;&gt;&gt; placeholders = ",".join(len(item) * "%s")
&gt;&gt;&gt; print(placeholders)
%,s,%,s,%,s     
</code></pre>
<p><code>",".join(len(item) * "%s")</code> does two things - computes  <code>len(item) * "%s"</code>, then joins the result with <code>','</code>.</p>
<p>The result of <code>len(item) * '%s'</code> is the string (or <em>iterable</em>) <code>'%s%s%s'</code>.  <code>str.join(iterable)</code> returns a string consisting of all the elements of <em>iterable</em> <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer">separated by the string that provides the method</a>.  So the result of calling </p>
<p><code>','.join('%s%s%s')</code>
is</p>
<p><code>'%,s,%,s,%,s'</code>, not <code>'%s,%s,%s'</code></p>
<p>You want to do </p>
<pre><code>&gt;&gt;&gt; ",".join(len(item) * ["%s"])
'%s,%s,%s'
</code></pre>
<p>or </p>
<pre><code>&gt;&gt;&gt; ",".join('%s' for _ in item)
'%s,%s,%s'
</code></pre>
<p>so that <code>str.join</code> is operating on an iterable of <code>'%s'</code> strings rather than a single string like <code>'%s%s%s'</code>.
`</p>
</div>
<span class="comment-copy">Are you using MS SQL Server or MySQL?</span>
<span class="comment-copy">I am using mysqld  Ver 5.5.59 for Linux on x86_64 (MySQL Community Server (GPL))</span>
<span class="comment-copy">thank u really much I just find that out,  Your final solution is so cool how could u know the loop will work with the join function and create a fantastic process?</span>
<span class="comment-copy">The <code>join</code> method is usually passed a list of strings to join, so if you aren't passing it a list then you need to either create a list within the method - like <code>len(item) * ['%s']</code> - or generate a stream of items to be joined with a generator comprehension - like <code>'%s' for _ in item</code>.</span>
<span class="comment-copy">I never know this( _ for _ in _) kind of applying will work, what's the logic in this? and i found that the for loop will also work with the number of list entity like {",".join('%s' for _ in item)} as{",".join('%s' for _ in (x,x,x))}</span>
<span class="comment-copy">It's a conventional way to show that you are not really using the loop counter variable - see <a href="https://stackoverflow.com/q/5893163/5320906">stackoverflow.com/q/5893163/5320906</a></span>
