<div class="post-text" itemprop="text">
<p>I want to make a simple math function that takes user input, yet allows the user to not input an integer/float. I quickly learned Python does not identify type by default. Quick Google search shows using <code>literal_eval</code>, but it returns with <code>ValueError: malformed string</code> if a string is the input. This is what I have so far:</p>
<pre><code>from ast import literal_eval

def distance_from_zero(x):
  if type(x) == int or type(x) == float:
    return abs(x)
  else:
    return "Not possible"

x = literal_eval(raw_input("Please try to enter a number "))

print distance_from_zero(x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Like you mentioned you will get malformed string error (<code>ValueError</code>) if you get input like <code>ast.literal_eval('c1')</code>.  You will also get <code>SyntaxError</code> if you do something like <code>ast.literal_eval('1c')</code>.  You will want get the input data and then pass it to <code>literal_eval</code>.  You can then catch both of these exceptions, and then return your <code>'Not Possible'</code>.</p>
<pre><code>from ast import literal_eval

def distance_from_zero(x):
    try:
        return abs(literal_eval(x))
    except (SyntaxError, ValueError):
        return 'Not possible'

    x = raw_input("Please try to enter a number ")

    print distance_from_zero(x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just answer your query why <code>ValueError: malformed string</code> occurred if you read the literal_eval doc :</p>
<blockquote>
<p>Safely evaluate an expression node or a string containing a Python
  expression.  The string or node provided may only consist of the
  following Python literal structures: strings, numbers, tuples, lists,
  dicts, booleans, and None.</p>
</blockquote>
<p>so string should be inclosed by "" as used to write in editor like <code>s = "string"</code>
raw_input takes the input and convert to string data type so i have tried this and able to convert using <code>literal_eval</code></p>
<pre><code>&gt;&gt;&gt; x=raw_input()
string
&gt;&gt;&gt; x= "\""+x+"\"" # concatenating the "" to string
&gt;&gt;&gt; literal_eval(x)
'string'
&gt;&gt;&gt;
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow noreferrer">EAFP</a>.</span>
<span class="comment-copy">Note: <code>raw_input</code> is <i>Python2</i> specific.</span>
<span class="comment-copy">Thank you for the thorough explanation! I guess I needed to learn much more because I didn't even know <code>try</code> and <code>except</code> existed. Definitely didn't think of using errors as conditions!</span>
