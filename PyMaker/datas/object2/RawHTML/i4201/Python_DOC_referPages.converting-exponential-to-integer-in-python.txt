<div class="post-text" itemprop="text">
<p>When I execute this python code:</p>
<pre><code>integer = 18243150071292141317265306851
print(int(integer / 1))
</code></pre>
<p>The output I receive is: <code>18243150071292140668971909120</code> which does not equal to  <code>integer</code>.</p>
<p>Why does this happen and how can I make the output equal to <code>integer</code>? </p>
</div>
<div class="post-text" itemprop="text">
<p>That result can be achieved in Python3 (or Python2 with true division imported from <code>future</code>), but not Python2 in stock mode.</p>
<p>The operator <code>/</code> always generate "true" quotient (with fractional part), but first it converts both arguments to its <code>float</code> (which is the same as <code>double</code> in C). And this conversion is where precision is lost because this <code>float</code> has only 53 significant binary digits (guessing your platform is <code>IEEE754</code> based, as &gt;99% are). The argument divided by 1 is already rounded in that way and gets equal to 18243150071292140668971909120.</p>
<p>(It seems Python language documentation is not precise here in operatorʼs effects. It <a href="https://docs.python.org/3/reference/expressions.html#binary-arithmetic-operations" rel="nofollow noreferrer">notes</a> that "The numeric arguments are first converted to a common type" but forgets that, to get a <code>float</code> result, the simplest way is utilized - to rely on platformʼs floating division.)</p>
<p>Then, conversion back to <code>int</code> (that is exact and essentially unlimited) gives the same value and you see it printed.</p>
<p>To get what you expect, use <code>//</code> instead of <code>/</code>: the "floor division" (<code>//</code>) doesn't convert its arguments to <code>float</code>. (OTOH, if some of them is already <code>float</code>, it can convert another one to perform floating division and them truncate result to flooring integer value.)</p>
<p>This is essentially the same you are told by @PM2Ring but formed as answer.</p>
<p>If you want to make calculations with not-only-integer numbers with precision more than a usual <code>float</code> provides, you should get out of intrinsic types and consider using <code>decimal</code> from the standard library, <code>GMP</code> library <a href="https://pypi.org/project/gmpy/" rel="nofollow noreferrer">wrapper</a> or a similar solution.</p>
</div>
<span class="comment-copy">what is <code>checkInt</code>?</span>
<span class="comment-copy"><code>/</code> always does float division (in Python 3). If you want integer division, use the floor division operator <code>//</code>.</span>
<span class="comment-copy"><code>int(some_expression)</code> <i>doesn't</i> say "use integer arithmetic to evaluate <code>some_expression</code>". <code>int()</code> is the integer constructor, and if you pass it some expression, it will evaluate that expression, and then try to construct an integer from it.</span>
