<div class="post-text" itemprop="text">
<p>I'm trying to import a file but I can only get it to work from one context at a time.</p>
<p>This my project structure:</p>
<pre><code>.
├── module/
│   ├── __init__.py
│   ├── script.py
│   ├── utilities1.py
│   └── utilities2.py
└── test.py
</code></pre>
<p><code>script.py</code> is usually called externally directly it imports <code>utilities1.py</code></p>
<p><code>utilities1.py</code> imports <code>utilities2</code>.py</p>
<p><code>test.py</code> Is a file that contains tests and includes both <code>utilities1.py</code> and <code>utilities2.py</code></p>
<p>My question is how to do the import statement in <code>utilities1.py</code>
When I call it from <code>script.py</code> it needs to be</p>
<pre><code>import utilities2
</code></pre>
<p>But when I call it from <code>test.py</code> that results in an error requiring it to be</p>
<pre><code>import module.utilities2
</code></pre>
<p>Is there a way I can get the import statement right in both contexts?
Or do I need to change something structurally in my project?
Thank you :) </p>
</div>
<div class="post-text" itemprop="text">
<p>If what you want is being able to use <code>import utilities1</code> from test.py you could modify the search path of modules. <a href="https://docs.python.org/3/library/sys.html#sys.path" rel="nofollow noreferrer"><code>sys.path</code></a> is the list of paths where the interpreter will look for modules to import. Do <code>print(sys.path)</code> and you'll see. You can also modify it while running your script.</p>
<p>For example, keeping with the file structure you described</p>
<pre><code># script.py

import utilities1
import utilities2

utilities1.show_myself()
utilities2.show_myself()
</code></pre>
<p> </p>
<pre><code># utilities1.py

def show_myself():
    print("I'm utilities1")

def test_myself():
    print("Testing who I am... The answer: utilities1")
</code></pre>
<p> </p>
<pre><code># utilities2.py

def show_myself():
    print("I'm utilities2")

def test_myself():
    print("Testing who I am... The answer: utilities2")
</code></pre>
<p> </p>
<pre><code># test.py

import sys

sys.path.insert(1, "module")

import utilities1
import utilities2

utilities1.test_myself()
utilities2.test_myself()
</code></pre>
<p>In <code>test.py</code> I have inserted <code>module</code> in <code>sys.path</code> which is the relative path where the running script will to be looking into for modules <code>utilities1</code> or <code>utilities2</code>. That's why it is able to acess directly yo those two modules.</p>
<p>If that's not what you were trying to do, please explain further.</p>
</div>
<span class="comment-copy">Do you not need an <code>__init__.py</code> at the top level?</span>
<span class="comment-copy">Thank you very much for your detailed answer, I'll try this tomorrow, but I think it solves what I am trying to do :)</span>
