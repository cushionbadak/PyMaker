<div class="post-text" itemprop="text">
<p>I recently made a program in Python that calculates the prime numbers under 1,000,000 and puts them in a list, <code>primelist</code>. Here it is:</p>
<pre><code>import math

import time

max = 1000000

intlist = []

iflist = []

primelist = [2]

sqrt = round(math.sqrt(max))

counter = 3

start = time.clock()

while (counter &lt; max) :

  intlist.append(counter)

  iflist.append(0)

  counter += 2

counter = 0

counter2 = 0


while intlist[counter] &lt; sqrt:



  if (iflist[counter] == 0):


    current = intlist[counter]


    counter2 = counter + current

    while (counter2 &lt; len(iflist)):

        iflist[counter2] = 1

        counter2 += current

  counter += 1



counter = 0


while counter &lt; len(iflist):

  if iflist[counter] == 0:

        primelist.append(intlist[counter])

  counter += 1



print(time.clock() - start)
</code></pre>
<p>In no way is this program optimized; it's just a basic implementation of the sieve of eratosthenes. </p>
<p>Recently I decided to learn how to code in C++. I wrote a direct translation of my Python code into C++, here it is:</p>
<pre><code>#include "stdafx.h"

#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;math.h&gt;
#include &lt;time.h&gt;


using namespace std;

int main()
{

    auto start = clock();

    int max = 1000000;
    int squareroot = ceil(sqrt(max));

    int current = 0;

    vector&lt;int&gt; primelist = { 2 };

    vector&lt;int&gt; sieve;

    vector&lt;bool&gt; conditions;

    vector&lt;int&gt; primes;

    for (int n = 3; n &lt; max; n += 2) {

        sieve.push_back(n);

        conditions.push_back(0);

    }

    for (int n = 0; sieve[n] &lt; squareroot; n++) {

        if (conditions[n] == 0) {

            current = sieve[n];

            for (int x = n + current; x &lt; conditions.size(); x += current) {

                conditions[x] = 1;

            }


        }
    }

    for (int n = 0; n &lt; conditions.size(); n++) {

        if (conditions[n] == 0) {

            primes.push_back(sieve[n]);

        }
    }

    /*for (int n = 0; n &lt; primes.size(); n++) {

        cout &lt;&lt; primes[n] &lt;&lt; endl;

    }*/

    cout &lt;&lt; clock() - start &lt;&lt; endl;

}
</code></pre>
<p>From what I've heard, C++ is much faster at number crunching than Python. But, the Python script took 0.74 seconds to run and the C++ script took 13.29 seconds to run(according to the outputs of both)! Why is there such a big difference? Is there something wrong with my code?</p>
<p>I ran the python script with python itself and I compiled and ran the C++ script with Visual Studio 2017. Could Visual Studio be causing this delay? If so, how do I compile and run a C++ program without Visual Studio? I'm having trouble figuring this out.</p>
<p>Thanks for any help!</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/time.html" rel="nofollow noreferrer">https://docs.python.org/3/library/time.html</a> </p>
<p>time.clock in python is in floating point seconds</p>
<p><a href="http://www.cplusplus.com/reference/ctime/clock/" rel="nofollow noreferrer">http://www.cplusplus.com/reference/ctime/clock/</a></p>
<p>clock in c++ is in clicks, (this varies per machine, but every machine has &gt; CLOCKS_PER_SEC) </p>
<p>in c++ I corrected the output line to</p>
<p><div class="snippet" data-babel="false" data-console="true" data-hide="false" data-lang="js">
<div class="snippet-code">
<pre class="snippet-code-html lang-html prettyprint-override"><code>auto t = clock() - start;
cout &lt;&lt; ((float)t) / CLOCKS_PER_SEC;</code></pre>
</div>
</div>
</p>
<p>for second level output</p>
<p>on my machine the python output is 0.4045815671380151 s and the c++ output is .02s</p>
</div>
<span class="comment-copy">Are you testing a debug build or a release build? The debug build is designed for debugging logic and will be hilariously slow.</span>
<span class="comment-copy">And a warning about <code>vector&lt;bool&gt;</code>. <a href="http://en.cppreference.com/w/cpp/container/vector_bool" rel="nofollow noreferrer">it's a weird sucker</a> designed for space efficiency at a cost in many other places.</span>
<span class="comment-copy">... also, some improvement will result from calling <code>reserve(max)</code> on each of your vectors at the beginning.</span>
<span class="comment-copy">... What he said. <code>std::vector&lt;bool&gt;</code> is a snare.</span>
<span class="comment-copy">@user4581301 â€¢ should have had a bool_vector that was space-optimized.  :-/</span>
<span class="comment-copy">I think he understands that</span>
<span class="comment-copy">If he does the same program measures differently on my machine, I will append my times in seconds into this answer. I imagine it is misunderstood because the question mentioned judging by the output of the program, which is not seconds in the c program</span>
<span class="comment-copy">I got similar results in VS to what he was claiming under debug.  <code>std::</code> collections are ridiculously slow in debug builds under VS.</span>
<span class="comment-copy">I thought clock() outputs in milliseconds? How do I convert "clicks" to seconds?</span>
<span class="comment-copy">I will edit my answer to reflect conversion to s!</span>
