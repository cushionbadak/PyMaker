<div class="post-text" itemprop="text">
<p>I'm trying to work with:
<a href="https://github.com/softScheck/tplink-smartplug" rel="nofollow noreferrer">softScheck/tplink-smartplug</a></p>
<p>I'm stuck in a loop of errors.  The fix for the first, causes the other, and the fix for the other, causes the first.  The code is all found in tplink-smartplug.py at the git link.</p>
<pre><code>cmd = "{\"system\":{\"set_relay_state\":{\"state\":0}}}"

sock_tcp.send(encrypt(cmd))

def encrypt(string):
    key = 171
    result = "\0\0\0\0"
    for i in string: 
        a = key ^ ord(i)
        key = a
        result += chr(a)
    return result
</code></pre>
<p>As it is, result = 'Ðòøÿ÷Õï¶Å Ôùðè·Ä°Ñ¥ÀâØ£òçöÔîÞ£Þ' and I get the error (on line 92 in original file: sock_tcp.send(encrypt(cmd)):</p>
<blockquote>
<p>a bytes-like object is required, not 'str'</p>
</blockquote>
<p>so I change the function call too:</p>
<pre><code>sock_tcp.send(encrypt(cmd.encode('utf-8')))
</code></pre>
<p>and my error changes too: </p>
<blockquote>
<p>ord() expected string of length 1, but int found</p>
</blockquote>
<p>I understand what ord() is trying to do, and I understand the encoding.  But what I don't understand is...how am I supposed to send this encrypted message to my smart plugin, if I can't give the compiler what it wants?  Is there a work around?  I'm pretty sure the original git was written in Python 2 or earlier. So maybe I'm not converting to Python 3 correctly?</p>
<p>Thanks for reading, I appreciate any help.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2, the result of <code>encode</code> is a <code>str</code> byte-string, which is a sequence of 1-byte <code>str</code> values. So, when you do <code>for i in string:</code>, each <code>i</code> is a <code>str</code>, and you have to call <code>ord(i)</code> to turn it into a number from 0 to 255.</p>
<p>In Python 3, the result of <code>encode</code> is a <code>bytes</code> byte-string, which is a sequence of 1-byte integers. So when you do <code>for i in string:</code>, each <code>i</code> is already an <code>int</code> from 0 to 255, so you don't have to do anything to convert it. (And, if you try to do it anyway, you'll get the <code>TypeError</code> you're seeing.)</p>
<p>Meanwhile, you're building <code>result</code> up as a <code>str</code>. In Python 2, that's fine, but in Python 3, that means it's Unicode, not bytes. Hence the other <code>TypeError</code> you're seeing.</p>
<p>For more details on how to port Python 2 string-handling code to Python 3, you should read the Porting Guide, especially <a href="https://docs.python.org/3/howto/pyporting.html#text-versus-binary-data" rel="nofollow noreferrer">Text versus binary data</a>, and maybe the <a href="https://docs.python.org/3/howto/unicode.html" rel="nofollow noreferrer">Unicode HOWTO</a> if you need more background.</p>
<hr/>
<p>One way you can write the code to work the same way for both Python 2 and 3 is to use a <code>bytearray</code> for both values:</p>
<pre><code>def encrypt(string):
    key = 171
    result = bytearray(b"\0\0\0\0")
    for i in bytearray(string): 
        a = key ^ i
        key = a
        result.append(a)
    return result

cmd = u"{\"system\":{\"set_relay_state\":{\"state\":0}}}"

sock_tcp.send(encrypt(cmd.encode('utf-8')))
</code></pre>
<p>Notice the <code>u</code> prefix on <code>cmd</code>, which makes sure it's Unicode even in Python 2, and the <code>b</code> prefix on <code>result</code>, which makes sure it's bytes even in Python 3. Although since you know <code>cmd</code> is pure ASCII, it might be simpler to just do this:</p>
<pre><code>cmd = b"{\"system\":{\"set_relay_state\":{\"state\":0}}}"

sock_tcp.send(encrypt(cmd))
</code></pre>
<p>If you don't care about Python 2, you can just for <code>for i in string:</code> without converting it to a <code>bytearray</code>, but you still probably want to use one for <code>result</code>. (Being able to <code>append</code> an int directly to it makes for simpler code—and it's even more efficient, as a nice bonus.)</p>
</div>
<span class="comment-copy">Please give us the whole traceback, not just the message.</span>
<span class="comment-copy">You're supposed to encrypt bytes, not text.</span>
<span class="comment-copy">Why not encode the result of <code>encrypt</code> instead of passing <code>bytes</code> to it?</span>
<span class="comment-copy">@MadPhysicist His encryption algorithm wouldn't be as useful for encrypting Unicode code points instead of bytes, so I think it makes sense to do it in the order he's doing it.</span>
<span class="comment-copy">Pretty new here.  I wasn't sure how much of a document I could post.  That's why I posted the link to the git.</span>
<span class="comment-copy">Thanks a lot for the thorough response! Definitely helped.  However, I can't upvote because I don't have enough reputation.</span>
