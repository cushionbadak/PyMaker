<div class="post-text" itemprop="text">
<p>I have three functions that want to change a global variable and can't combine into one function, the way I know right now is keep define "global" keyword in each functions to be able to access global variable. Is there a better way to do the same thing with out keep redefining the global variable? for example:</p>
<pre><code>    def fn1(self):
        global NUM
        NUM = 1
        print "fn1 = ",  NUM

    def fn2(self):
        global NUM
        NUM = 2
        print "fn2 = ",  NUM

    def fn3(self):
        global NUM
        NUM = 3
        print "fn3 = ",  NUM

NUM = 0
fn1(NUM)
fn2(NUM)
fn3(NUM)
</code></pre>
<p>Thank you</p>
</div>
<div class="post-text" itemprop="text">
<p>Why don't you define another function, which changes the value of the global variable with the argument provided as parameter. And call this in rest of your function. For example :</p>
<pre><code>var=None

class A:

  def change(self,num):
     global var
     var = num

  def first(self,num):
    self.change(num)

  def second(self,num):
    self.change(num)

  def third(self,num):
    self.change(num)

a=A()

a.first(1)
print 'value of global variable',var

a.second(2)
print 'value of global variable',var

a.third(3)
print 'value of global variable',var
</code></pre>
<p>Otherwise, if the scope of your global variable is supposed to be confined within your class then declare it as a member of the class, and let the functions change it's value. For example :</p>
<pre><code>class A:

  def __init__(self):
     self.var=None
     print "default = ",  self.var

  def first(self,num):
    self.var=num
    print "fn1 = ",  self.var

  def second(self,num):
    self.var=num
    print "fn2 = ",  self.var

  def third(self,num):
    self.var=num
    print "fn3 = ",  self.var




a=A()

a.first(1)
print 'value of variable',a.var

a.second(2)
print 'value of variable',a.var

a.third(3)
print 'value of variable',a.va
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can make the global variable a mutable class and then mutate in place. </p>
<pre><code>global_dict = {"data": 1}
global_list = [1]

class MutableInt:
    def __init__(self, value=1):
        self.value = value

global_int = MutableInt()
</code></pre>
<p>This works, but personally I wouldn't call that any better. With the <code>global</code> it is at least 100% clear that you change a global variable. Best would be to change your architecture to not need any global variables.</p>
</div>
<div class="post-text" itemprop="text">
<p>it seems like the function are part of a class , based on the <code>self</code> keyword , if so they all can access class variable without the need of <code>global</code> keyword, if they are not part of a class you can:</p>
<p>define  each function with a given parameter to the function and make that function return a value.</p>
<pre><code> def func1(param_1):
     #work on param_1 
     return param_1
</code></pre>
</div>
<span class="comment-copy">Make your functions take a value and return a value. Then you don't need a global variable at all.</span>
<span class="comment-copy">Where is the rest of your class? Why not create a <code>self.num</code> (or <code>cls.num)</code> that all can access? Why not return the modified num aka <code>NUM = fn1(NUM)</code>? Where is the classinstance before <code>fn1</code>,<code>fn2</code>,<code>fn3</code>? Any "course of action" that we could suggest heavily depends on the code you have not yet shown. Please edit your question to a full <a href="https://stackoverflow.com/help/mcve">How to create a Minimal, Complete, and Verifiable example</a> to avoid multiple low-quality answers / guesstimates that - in the end - do not really fit.</span>
<span class="comment-copy">@Tom Dalton Yes, thanks.</span>
<span class="comment-copy">@PatrickArtner I just want to get the general idea and I'm new to python. So might not have enough knowledge about how to write a  complete class. But you suggestion is right. Thanks.</span>
<span class="comment-copy">Start with the tutorial: <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">Classes</a></span>
<span class="comment-copy">Thanks, this is what I need.</span>
<span class="comment-copy">@YHS if you are satisfied with the answer then you can accept the answer by clicking on the tick button</span>
<span class="comment-copy">I don't have enough reputation though. :P</span>
