<div class="post-text" itemprop="text">
<p>I have equations with multiple unknowns, and a number range:</p>
<pre><code>eq1 = (x + 5 + y) #
ans = 15
no_range = [1..5]
</code></pre>
<p>I know that I can solve the equation by checking all possible combinations:</p>
<pre><code>solved = False
for i in range(1, 5+1)  # for x
    for j in range(1, 5+1)  # for y
        if i + 5 + j == ans:
            solved = True
</code></pre>
<p>So, the problem is that I want a function to deal with <code>unknown_count</code> amount of unknowns. So that both the following equations, or any, can be solved in the same manner above:</p>
<pre><code>eq1 = (x + 5 + y) 
ans = 15

eq2 = (x + 5 + y + z * a + 5 * b / c) 
ans = 20
</code></pre>
<p>I just cannot think of a way, since for each unknown you need a <code>for</code> loop. </p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/2/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> to generate the Cartesian product for an
arbitrary number of variables:</p>
<pre><code>In [4]: import itertools
In [5]: list(itertools.product(range(1, 5+1), repeat=2))
Out[5]: 
[(1, 1),
 (1, 2),
 (1, 3),
 ...
 (5, 3),
 (5, 4),
 (5, 5)]
</code></pre>
<p>So you could modify your code like this:</p>
<pre><code>import itertools as IT
unknown_count = 6
ans = 20
solved = False
def func(*args):
    x, y, z, a, b, c = args
    return x + 5 + y + z * a + 5 * b / c
for args in IT.product(range(1, 5+1), repeat=unknown_count):
    if func(*args) == ans:
        solved = True
        print('{} + 5 + {} + {} * {} + 5 * {} / {} = {}'.format(*(args+(ans,))))
</code></pre>
<p>which yields a lot of solutions, such as </p>
<pre><code>1 + 5 + 1 + 1 * 3 + 5 * 2 / 1 = 20
1 + 5 + 1 + 1 * 3 + 5 * 4 / 2 = 20
1 + 5 + 1 + 2 * 4 + 5 * 1 / 1 = 20
...
5 + 5 + 5 + 2 * 2 + 5 * 1 / 5 = 20
5 + 5 + 5 + 3 * 1 + 5 * 2 / 5 = 20
5 + 5 + 5 + 4 * 1 + 5 * 1 / 5 = 20
</code></pre>
<hr/>
<p>The <a href="http://stackoverflow.com/q/287085/190597"><code>*</code> unpacking operator</a> was used
to create a function, <code>func</code>, which accepts an arbitrary number of arguments (i.e. <code>def func(*args)</code>), and also to
pass an arbitrary number of arguments to <code>func</code> (i.e. <code>func(*args)</code>).</p>
</div>
<span class="comment-copy">You can do the equivalent of multiple nested <code>for</code> loops quite neatly by using <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a>, but you do need to know how many loops you want. BTW, this brute force method of solving equations gets inefficient if there are lots of unknowns and the <code>no_range</code> gets large, because you may have to check <i>lots</i> of combinations before you hit a solution.</span>
<span class="comment-copy">Worked great! Thanks a lot</span>
