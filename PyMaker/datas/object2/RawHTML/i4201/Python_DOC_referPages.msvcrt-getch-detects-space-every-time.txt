<div class="post-text" itemprop="text">
<p>Im writting a simple python code that should detect the my keystrokes but for some reason in detects space after everysingle keystroke.</p>
<p>The code:</p>
<pre><code>import msvcrt

print("press 'escape' to quit...")
text=""
while 1:
    char = msvcrt.getch()
    print(ord(char))
</code></pre>
<p>Sample run:</p>
<pre class="lang-none prettyprint-override"><code>Input: aaaaa

Output:
97
0
97
0
97
0
97
0
97
0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's not detecting space. Space is <code>32</code>, not <code>0</code>.</p>
<p>What's happening is that you're using a wide-character terminal, but reading it as bytes, so you're seeing the UTF-16-LE bytes. In UTF-16-LE, an <code>a</code> is two bytes, <code>97</code> and <code>0</code>. If you read those as if they were two ASCII characters instead of one UTF-16-LE character, you'll get <code>a</code> followed by <code>\0</code>.</p>
<p>Notice that what you get back isn't actually <code>'a\0a\0a\0'</code>, but <code>b'a\0a\0a\0'</code>. So you <em>could</em> buffer these up into a <code>bytes</code> or <code>bytearray</code> and use <code>decode('utf-16-le')</code> on it. But that defeats the purpose of reading one character at a time.</p>
<p>The simplest fix is to use <a href="https://docs.python.org/3/library/msvcrt.html#msvcrt.getwch" rel="nofollow noreferrer"><code>getwch</code></a> instead of <code>getch</code>. This will mostly just do what you want—return a single-character <code>str</code> value like <code>'a'</code> rather than two separate single-byte <code>bytes</code> values.</p>
<p>There may still be some problems with astral characters (everything above <code>U+FFFF</code>) showing up as two separate surrogates instead of one single character, and "special keys" will still show up as a Unicode <code>U+0000</code> or <code>U+00E0</code> followed by a keycode (or, if you have an older Python, possibly as a broken <code>U+E0xx</code> with the keycode embedded in the character). But otherwise, it'll work the way you expected.</p>
</div>
<span class="comment-copy">So what is the problem? what is your code printing?</span>
<span class="comment-copy"><code>getch</code> calls <code>ReadConsoleInputA</code>, which returns keyboard input encoded according to the console's current input codepage, which defaults to OEM and cannot be set to UTF-16LE (codepage 1200). Either there is a bug in the OP's version of the C runtime, or there's a bug in the console itself (more frequent in Windows 10 since MS is actively updating the console code), or some misbehaving library or alternate terminal (e.g. ConEmu) has hooked <code>ReadConsoleInputA</code> in the current process.</span>
<span class="comment-copy">@eryksun ConEmu might be a possibility—but I honestly have no idea how to walk him through diagnosing how he's screwed up his console. And I think that's probably a question for Super User, not SO. Whatever he's done, he's getting UTF-16-LE from his console, and using <code>getwch</code> will solve his problem with Python, and he hasn't asked about other problems… But if you think you can diagnose the underlying issue, that would be even better.</span>
<span class="comment-copy">I don't think the Stack Exchange Q &amp; A format is best suited for working through bugs that could be due to a broad range of problems. I've been down that road before, and it basically turns into long chats that go on for pages, which also basically doubles as a tutorial on using a debugger and other tools.</span>
<span class="comment-copy">Many characters (e.g "∫") will be ignored when pasted in the console. If a pasted character isn't in the keyboard mapping (<code>VkKeyScan</code>) or isn't <code>C3_ALPHA</code> linguistic (<code>GetStringType</code> ) or isn't in a range that's East-Asian full width, then the console pastes it as an OEM Alt+Numpad sequence (or two sequences for non-BMP), i.e. encode as OEM (typically as the default "?"), convert to a decimal string, and insert a sequence of key events. The final key-up for the Alt key has the actual Unicode character value. The CRT <code>getwch</code> function does not support this pasted key event sequence.</span>
<span class="comment-copy">Note that this Alt+Numpad key-event sequence is only observed with a low-level <code>ReadConsoleInput</code> call, as used by <code>getwch</code>. For a high-level <code>ReadConsole</code> and <code>ReadFile</code> call, the console only includes the actual Unicode character (or surrogate pair for non-BMP).</span>
