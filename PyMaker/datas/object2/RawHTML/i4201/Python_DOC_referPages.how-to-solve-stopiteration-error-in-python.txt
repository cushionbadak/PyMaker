<div class="post-text" itemprop="text">
<p>I have just read a bunch of posts on how to handle the StopIteration error in Python, I had trouble solving my particular example.I just want to print out from 1 to 20 with my code but it prints out error StopIteration. My code is:(I am a completely newbie here so please don't block me.)</p>
<pre><code>def simpleGeneratorFun(n):

    while n&lt;20:
        yield (n)
        n=n+1
    # return [1,2,3]

x = simpleGeneratorFun(1)
while x.__next__() &lt;20:
    print(x.__next__())
    if x.__next__()==10:
        break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Any time you use <code>x.__next__()</code> it gets the next yielded number - you do not check every one yielded and 10 is skipped - so it continues to run after 20 and breaks.</p>
<p>Fix:</p>
<pre><code>def simpleGeneratorFun(n):

    while n&lt;20:
        yield (n)
        n=n+1
    # return [1,2,3]

x = simpleGeneratorFun(1)
while True:
    try:
        val = next(x) # x.__next__() is "private", see @Aran-Frey comment 
        print(val)
        if val == 10:  
            break
    except StopIteration as e:
        print(e)
        break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First, in each loop iteration, you're advancing the iterator 3 times by making 3 separate calls to <code>__next__()</code>, so the <code>if x.__next__()==10</code> might never be hit since the 10th element might have been consumed earlier. Same with missing your while condition.</p>
<p>Second, there are usually better patterns in python where you don't need to make calls to <code>next</code> directly. For example, if you have finite iterator, use a for loop to automatically break on StopIteration:</p>
<pre><code>x = simpleGeneratorFun(1)
for i in x:
    print i
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try, but here repetition is the problem.</p>
<pre><code>x = simpleGeneratorFun(1)
print (x.__next__())
print (x.__next__())
print (x.__next__())
print (x.__next__())
print (x.__next__())
print (x.__next__())
</code></pre>
</div>
<span class="comment-copy">Please use the <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer"><code>next</code></a> function instead of <code>__next__</code>.</span>
<span class="comment-copy">@Aran-Fey thanks for the pointer</span>
<span class="comment-copy">Thanks for the answer and the lesson. I try my best to learn.</span>
<span class="comment-copy">I tried next but it says: "AttributeError: 'generator' object has no attribute 'next'"</span>
<span class="comment-copy">@BarishAhsen Copy the code <i>exactly</i> into <a href="http://pyfiddle.io" rel="nofollow noreferrer">pyfiddle.io</a> - choose 2.7 or 3.x - it works for both. If it does not work for you, elaborate. You probably mis-copied something.</span>
<span class="comment-copy">Thanks for the answer and the lesson. I take note from your tutorial.</span>
<span class="comment-copy">Thanks, There seem to be better solutions.</span>
<span class="comment-copy">How is this an answer? <i>"You can try"</i> You can try <i>what</i>? <i>"repetition is the problem"</i> What are you even talking about? How does copy/pasting the code <code>print (x.__next__())</code> 6 times fix the StopIteration error?</span>
