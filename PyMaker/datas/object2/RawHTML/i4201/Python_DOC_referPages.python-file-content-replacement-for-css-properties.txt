<div class="post-text" itemprop="text">
<p>So I have 2 files: <code>config.txt</code> and a CSS file.</p>
<p>What I want to do is to read from the config file the color attribute and replace it on the CSS file.</p>
<p>Config file:</p>
<pre class="lang-css prettyprint-override"><code>color: #ffffff;
</code></pre>
<p>CSS file:</p>
<pre class="lang-css prettyprint-override"><code>body{ color: #000000;} h1{color:#000000;}
</code></pre>
<p>What I need to do is replace the CSS file <code>color</code> with the config file <code>color</code>, how can I do this using Python file operations replacing only the <code>color</code> of the <code>h1</code> tag and not the <code>body</code> tag?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a combination of the <a href="https://docs.python.org/3/library/fileinput.html" rel="nofollow noreferrer"><code>fileinput</code></a> module for in-place file editing and the <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer"><code>re</code></a> regex module for doing search-and-replace on that specific <code>h1</code> tag.</p>
<p>Here's the code first:<br/>
(Note that I used "config.txt" for the config file and "output.css" for the CSS file)</p>
<pre class="lang-py prettyprint-override"><code># read the color from the config file
color_config = ""
with open("config.txt", "r") as config_file:
    for line in config_file:
        if line.startswith("color"):
            color_config = "h1 {" + line.strip() + "}"
            break

# update the css file in-place
with fileinput.input(files=("output.css"), inplace=True) as css_file:
    for line in css_file:
        # the h1 tag could be on its own line or could be part of
        # a line with other styles, so we capture them in groups
        matches = re.match(r"(.*)(h1\s*\{color:.*\})(.*)", line)
        if matches:
            # group(0): entire matching line
            # group(1): everything before the h1 tag
            # group(2): the h1 tag
            # group(3): everything after the h1 tag
            print(line.replace(matches.group(2), color_config), end="")
        else:
            print(line, end="")
</code></pre>
<p>For some explanation:</p>
<ul>
<li>The first <code>with</code> block is where we read the config file to get the <code>color: #ffffff;</code> value. I am assuming here that it's placed on its own line (that's why I used <code>startswith</code>). I don't know what your config file looks like, so just tweak it based on what you need. </li>
<li>Then, we store <code>color: #ffffff;</code> into <code>color_config</code>, formatted as an <code>h1 { .. }</code> string. We format it now to make it easy to search and replace later.</li>
<li>The second <code>with</code> block does the in-place file search-and-replace. It uses <a href="https://docs.python.org/3/library/fileinput.html#fileinput.input" rel="nofollow noreferrer"><code>fileinput.input</code></a> with the <code>inplace</code> parameter set to <code>True</code>. From the docs:</li>
</ul>
<blockquote>
<p><strong>Optional in-place filtering</strong>: if the keyword argument <code>inplace=True</code> is
  passed to <code>fileinput.input()</code> or to the <code>FileInput</code> constructor, the file
  is moved to a backup file and standard output is directed to the input
  file (if a file of the same name as the backup file already exists, it
  will be replaced silently). This makes it possible to write a filter
  that rewrites its input file in place. If the <em>backup</em> parameter is
  given (typically as <code>backup='.&lt;some extension&gt;'</code>), it specifies the
  extension for the backup file, and the backup file remains around; by
  default, the extension is <code>'.bak'</code> and it is deleted when the output
  file is closed.</p>
</blockquote>
<ul>
<li>In this second <code>with</code> block, we read each line of the CSS file, replace parts of the string, then <code>print</code> it back to the same file (<code>fileinput</code> redirects the <code>print</code> output to the file). It's best that the CSS file is not opened anywhere else when doing the in-place file editing.  </li>
<li>Next step is to search for the <code>h1</code> tag from each line. We do this with <a href="https://docs.python.org/3/library/re.html#re.match" rel="nofollow noreferrer"><code>re.match</code></a>. I won't go into the <em>long</em> explanation on how to use regex (you'll have to read that on your own). I'll just describe the pattern used:</li>
</ul>
<blockquote>
<p><code>re.match(r"(.*)(h1\s*\{color:.*\})(.*)", line)</code> </p>
<p><code>(.*)     match and group everything before and after the</code>h1<code>tag</code><br/>
<code>\s*      match 0 or more spaces between h1 and {</code><br/>
<code>\{, \}   match the brackets (escaped, because {} are regex special chars)</code><br/>
<code>color:.* match any number of characters between color: and }</code> </p>
</blockquote>
<ul>
<li>As described in the code comments, we can then get the <code>h1</code> tag by using <a href="https://docs.python.org/3/library/re.html#re.match.group" rel="nofollow noreferrer"><code>match.group</code></a>. </li>
<li>The last step is to do the actual <a href="https://docs.python.org/3/library/stdtypes.html#str.replace" rel="nofollow noreferrer">string replacement</a> using the <code>color_config</code> read earlier and then printing it out to the file. Note that I optionally passed a <code>end=""</code> to <code>print</code>, because by default <code>print</code> outputs include a newline. Again, I don't know what your CSS file looks like, so tweak as needed.</li>
</ul>
</div>
<span class="comment-copy">Thank you for your detailed answer @Gino Mempin! Do you think I could use this approach for a SASS file instead? What about if the css file was formated as such?  h1{     color:#000000;     font-family: 'Verdana', sans-serif;     font-size: 18px; } (in a collumn as it does not display as a column in the comment box :)</span>
<span class="comment-copy">To be more clear, when I get a more complex CSS file I will only want to replace the "color: xxxxxx;" part and not the whole h1 tag. How can I accomplish that?</span>
<span class="comment-copy">@Maia Depending on your CSS/SASS file/format, you don't need to capture the entire <code>h1</code> tag, just the line with the <code>color</code>, something like just "<code>color:.*;</code>. I suggest you read about <b><a href="https://docs.python.org/3.6/howto/regex.html" rel="nofollow noreferrer">How to Use Regex</a></b>. It's a very useful skill.</span>
<span class="comment-copy">@Maia Since you'll be parsing the file line-by-line, you can either (1) look for lines with the specific start tags first (ex. "<code>h1 {</code>") then apply the regex matching and replace up to the closing "<code>}</code>" tag, or (2) you could collect all the multi-lines in between <code>{..}</code> first, apply regex matching, then replace the block in one go.</span>
