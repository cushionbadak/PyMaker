<div class="post-text" itemprop="text">
<p>I'm adding UTC time strings to Bitbucket API responses that currently only contain Amsterdam (!) time strings. For consistency with the UTC time strings returned elsewhere, the desired format is <code>2011-11-03 11:07:04</code> (followed by <code>+00:00</code>, but that's not germane).</p>
<p>What's the best way to create such a string (<em>without</em> a microsecond component) from a <code>datetime</code> instance <em>with</em> a microsecond component?</p>
<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; print unicode(datetime.datetime.now())
2011-11-03 11:13:39.278026
</code></pre>
<p>I'll add the best option that's occurred to me as a possible answer, but there may well be a more elegant solution.</p>
<p><strong>Edit:</strong> I should mention that I'm not <em>actually</em> printing the current time â€“ I used <code>datetime.now</code> to provide a quick example. So the solution should not assume that any <code>datetime</code> instances it receives will include microsecond components.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to format a <code>datetime</code> object in a specific format that is different from the standard format, it's best to explicitly specify that format:</p>
<pre><code>&gt;&gt;&gt; datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
'2011-11-03 18:21:26'
</code></pre>
<p>See <a href="https://docs.python.org/3/library/datetime.html?highlight=strftime#strftime-and-strptime-behavior" rel="noreferrer">the documentation of <code>datetime.strftime()</code></a> for an explanation of the <code>%</code> directives.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; now = datetime.datetime.now()
&gt;&gt;&gt; print unicode(now.replace(microsecond=0))
2011-11-03 11:19:07
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.6:</p>
<pre><code>from datetime import datetime
datetime.datetime.now().isoformat(' ', 'seconds')
'2017-01-11 14:41:33'
</code></pre>
<p><a href="https://docs.python.org/3.6/library/datetime.html#datetime.datetime.isoformat" rel="noreferrer">https://docs.python.org/3.6/library/datetime.html#datetime.datetime.isoformat</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This is the way I do it. ISO format:</p>
<pre><code>import datetime
datetime.datetime.now().replace(microsecond=0).isoformat()
# Returns: '2017-01-23T14:58:07'
</code></pre>
<p>You can replace the 'T' if you don't want ISO format:</p>
<pre><code>datetime.datetime.now().replace(microsecond=0).isoformat(' ')
# Returns: '2017-01-23 15:05:27'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yet another option:</p>
<pre><code>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.strftime("%Y-%m-%d %H:%M:%S")
'2011-11-03 11:31:28'
</code></pre>
<p>By default this uses local time, if you need UTC you can use the following:</p>
<pre><code>&gt;&gt;&gt; time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime())
'2011-11-03 18:32:20'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Keep the first 19 characters that you wanted via slicing:</p>
<pre><code>&gt;&gt;&gt; str(datetime.datetime.now())[:19]
'2011-11-03 14:37:50'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since not all <code>datetime.datetime</code> instances have a microsecond component (i.e. when it is zero), you can partition the string on a "." and take only the first item, which will always work:</p>
<pre><code>unicode(datetime.datetime.now()).partition('.')[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I usually do:</p>
<pre><code>import datetime
now = datetime.datetime.now()
now = now.replace(microsecond=0)  # To print now without microsecond.

# To print now:
print(now)
</code></pre>
<p>output:</p>
<pre><code>2019-01-13 14:40:28
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>We can try something like below</p>
<pre><code>import datetime

date_generated = datetime.datetime.now()
date_generated.replace(microsecond=0).isoformat(' ').partition('+')[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I found this to be the simplest way.</p>
<pre><code>&gt;&gt;&gt; t = datetime.datetime.now()
&gt;&gt;&gt; t
datetime.datetime(2018, 11, 30, 17, 21, 26, 606191)
&gt;&gt;&gt; t = str(t).split('.')
&gt;&gt;&gt; t
['2018-11-30 17:21:26', '606191']
&gt;&gt;&gt; t = t[0]
&gt;&gt;&gt; t
'2018-11-30 17:21:26'
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">Whoa, someone with my name</span>
<span class="comment-copy">A colleague just made a convincing case for this being the correct approach. Consider me convinced.</span>
<span class="comment-copy">What was that convincing case - putting this solution above your solution using datetime.replace?</span>
<span class="comment-copy">@matlehmann: Of course I don't know the arguments of davidchambers' colleague.  However, I think if your intention is to print a date in a very specific format, you should be explicit about this intention.  The code in this answer  says "take the current time and format it exactly like this".  The code in the other answer says "take the current time, set the microseconds to 0, and then convert it to a string somehow".</span>
<span class="comment-copy">+1, being explicit about the string format avoids problems if standard datetime-str conversion changes in a future Python version</span>
<span class="comment-copy">Is inventing your own format really the solution? Or even duplicating by hand an existing standardized format? Maybe if interoperability isn't a concern, but why not use ISO format? In which case, the other solution is more clear and more explicit (noting Bengt's comment). Manual format strings generally violate DRY, either on a project level (if you hardcode them as above) or on a community level (unless you're really inventing a new datetime format).</span>
<span class="comment-copy">I think, this is the right solution, because it is readable and documented and consistent behavior: <a href="http://docs.python.org/2/library/datetime.html#datetime.datetime.isoformat" rel="nofollow noreferrer">"<code>.isoformat([sep])</code> - Return a string representing the date and time in ISO 8601 format, YYYY-MM-DDTHH:MM:SS.mmmmmm or, if microsecond is 0, YYYY-MM-DDTHH:MM:SS"</a></span>
<span class="comment-copy">in my situation, the date has already been constructed and I needed to "floor" it to the second.  this is perfect, thanks.</span>
<span class="comment-copy">This is the best answer!</span>
<span class="comment-copy">Far better than formatting or parsing strings for the comparison, thank you.</span>
<span class="comment-copy">I think that now, 8 years later with the advent of Python 3.6 this should be the accepted, universal answer. This offers the better of both worlds argued about by @DylanYoung and AlexanderMP on this same thread <a href="https://stackoverflow.com/a/7999977/6118556">here</a></span>
<span class="comment-copy">This is similar to my answer. Is there a reason to favour <code>.isoformat()</code> over <code>unicode()</code>?</span>
<span class="comment-copy">Depends on what you want, if you want the python string representation use <code>unicode()</code>, and if you want ISO-8601, use <code>isoformat()</code></span>
<span class="comment-copy">I see. <code>unicode()</code> is more convenient than <code>.isoformat().replace('T', ' ')</code>, certainly. ;)</span>
<span class="comment-copy">I would just use Sven's solution for non-iso format, its more explicit: datetime.now().strftime("%Y-%m-%d %H:%M") , but replacing the 'T' is just another way. May be best solution if you need both ISO and unicode date.</span>
<span class="comment-copy"><code>isoformat</code> accepts the separator specifier, so no replace should be done. just do: <code>datetime.datetime.now().replace(microsecond=0).isoformat(' ')</code></span>
<span class="comment-copy">Downvote because the OP asked about datetime, not time.</span>
<span class="comment-copy">This is only incorrect because time strings can have timezone specification appended, e.g. <code>+05:30</code>. Correct would be <code>str(now())[:19]</code>.</span>
<span class="comment-copy">@K3---rnc:  Thanks.  Updated per your suggestion.</span>
<span class="comment-copy">This is inferior to <code>.isoformat(' ', 'seconds')</code>, proposed in an earlier answer.</span>
<span class="comment-copy">When I am trying above proposed earlier answer, I am getting below error  &gt;&gt;&gt; datetime.datetime.now().isoformat(' ', 'seconds') Traceback (most recent call last):   File "&lt;stdin&gt;", line 1, in &lt;module&gt; TypeError: isoformat() takes at most 1 argument (2 given)</span>
<span class="comment-copy">Ah, I see. It works for me in Python 3 but not in Python 2.</span>
<span class="comment-copy">I am using python 3.4.3 version, in that i see that error.  &gt;&gt;&gt; datetime.datetime.now().isoformat(' ', 'seconds') Traceback (most recent call last):   File "&lt;stdin&gt;", line 1, in &lt;module&gt; TypeError: isoformat() takes at most 1 argument (2 given)</span>
<span class="comment-copy">datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S") '2011-11-03 18:21:26' much easier imo. But easy is not alwast the best</span>
