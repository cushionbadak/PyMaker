<div class="post-text" itemprop="text">
<p>Multiprocessing's <em>Pipes</em> and <em>Queue</em> are based on anonymous pipes, does the <code>multiprocessing</code> of Python provide named pipes （FIFO）?</p>
</div>
<div class="post-text" itemprop="text">
<p>There's no built-in support for a cross-platform abstraction of named pipes in <code>multiprocessing</code>.</p>
<p>If you only care about Unix, or only about Windows, you can of course create named pipes manually. For Unix, <a href="https://docs.python.org/3/library/os.html#os.mkfifo" rel="nofollow noreferrer"><code>mkfifo</code></a> is in the stdlib. For Windows, you have to use <code>ctypes</code> or <code>cffi</code>, or a third-party library like <code>win32api</code> to call <code>CreateFile</code> with the right arguments.</p>
<p>Trying to abstract over the semantic differences between the two is pretty painful, which is probably why the stdlib doesn't attempt to do so. (For example, Windows named pipes are volatile; posix named pipes are permanent.)</p>
<p>Here's a trivial Unix example:</p>
<pre><code>import multiprocessing
import os

def child():
    with open('mypipe', 'rb') as p:
        print(p.read())

def main():
    try:
        os.mkfifo('mypipe')
    except FileExistsError:
        pass
    multiprocessing.Process(target=child).start()
    with open('mypipe', 'wb') as p:
        p.write(b'hi')
    os.remove('mypipe')

if __name__ == '__main__':
    main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>class multiprocessing.connection.Listener([address[, family[, backlog[, authkey]]]])</p>
<p>A wrapper for a bound socket or Windows named pipe which is ‘listening’ for connections.address is the address to be used by the bound socket or named pipe of the listener object.</p>
</blockquote>
</div>
<span class="comment-copy">By the way, the <code>pipe</code> tag is specifically about Unix anonymous pipes, and the <code>fifo</code> tag is about queues and pipes generally; the tag for named pipes is <code>named-pipes</code>.</span>
<span class="comment-copy">multiprocessing.connection.Listener supports Windows named pipes</span>
<span class="comment-copy">@QuantumEnergy AFAIK, it <i>uses</i> Windows named pipes (and UNIX sockets on Unix) to provide a much simpler abstraction than generic named pipes. Am I wrong? Can you actually access any of the features of named pipes with a <code>Listener</code>? Because if so, that would be pretty cool.</span>
<span class="comment-copy">@ abarnert You are right.  I have another question. Does multiprocessing.sharedctypes  support independent processes? I think it only supports father child process or brotherly process communication.</span>
<span class="comment-copy">@QuantumEnergy That still might provide all you’re actually looking for in a particular use case, so it’s definitely worth mentioning. But since you already wrote a good answer on that, I’ll just upvote yours instead of editing mine. As for <code>sharedctypes</code>, it’s only intended for the tree of processes created specifically by <code>multiprocessing</code>—but you may be able to either mildly abuse it, or fork the code (notice that the <code>multiprocessing</code> docs link to the source, and, while there’s a lot of it, most is pretty simple…). But that’s probably a separate question (and probably a good one to ask).</span>
<span class="comment-copy">thank you for your answer sincerely.</span>
