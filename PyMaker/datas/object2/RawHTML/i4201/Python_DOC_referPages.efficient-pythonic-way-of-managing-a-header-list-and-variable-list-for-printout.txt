<div class="post-text" itemprop="text">
<p>What would be an efficient/pythonic way of managing a header list and an associated variable list (changing one and automatically/easily changing the other)?</p>
<p>In the example here, I would have liked to define the list of variables next to the header list, and not far away in the middle of the code. (In my actual code of 20+fields, hundreds of lines of code, and several places where I wish to call add_row(), it is very burdening)</p>
<pre><code>import prettytable as prt 

my_header=["bar","foo","bla"]
#my_row=[var1, some_var,c] ## I WOULD HAVE LIKED DO DEFINE THE LIST OF VARIABLES HERE, NEXT TO THE LIST OF THIER NAMES    
output_table=prt.PrettyTable(my_header)

for i in range(10):
    var1,some_var,c=i,2*i,i**2
    my_row=[var1, some_var,c] ## I AM FORCED TO DEFINE THE LIST HERE, AFTER ASSIGNING THE VARIABLES, AND BEFORE CALLING add_row() 
    output_table.add_row(my_row)

print output_table
</code></pre>
<p>---Update---</p>
<p>i guess this does what i want the code to do, but it doesnt seem to be the "pythonic" way ...</p>
<pre><code>import prettytable as prt 


var1,some_var,c=[0],[0],[0]
my_row=[var1, some_var,c] 
my_header=["bar","foo","bla"]
output_table=prt.PrettyTable(my_header)

for i in range(10):
    var1[0],some_var[0],c[0]=i,2*i,i**2
    output_table.add_row([str(i[0]) for i in my_row])


print output_table
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are various ways to do this. The best way depends on the details of how the contents of the row are actually calculated. For the simple example given in your question you can create a function that computes the row contents. Eg,</p>
<pre><code>my_header = ["bar","foo","bla"]
def my_row(i):
    return [i, 2*i, i**2]

print(my_header)
for i in range(10):
    print(my_row(i))
</code></pre>
<p><strong>output</strong></p>
<pre><code>['bar', 'foo', 'bla']
[0, 0, 0]
[1, 2, 1]
[2, 4, 4]
[3, 6, 9]
[4, 8, 16]
[5, 10, 25]
[6, 12, 36]
[7, 14, 49]
[8, 16, 64]
[9, 18, 81]
</code></pre>
<p>But if the computations are more complex you may find it better to use a class to manage things. And you may wish to use <a href="https://docs.python.org/3/library/functions.html?property" rel="nofollow noreferrer"><code>@property</code></a> decorators to perform the calculations.</p>
</div>
<span class="comment-copy">The computations are too complex for being defined in a simple function.The whole code calculates many iterations of 20+ fields in complex ways and i would like to get a neat printout of them all.  Assuming the code does the calculations and i would just like to print out the fields in several points in the code while being able to easily choose which fields and their appropriate titles will be printed , how would classes help me do that?</span>
<span class="comment-copy">@Daniel Each field gets stored as an instance attribute of the class. And by using <code>@property</code> you can get fields to calculate and update their values automatically. Alternatively, you can store them into a dict, using the field name as the dict key. One problem with plain dicts in old versions of Python is that dicts are unordered collections, which can be annoying if you want the fields to be in a particular order. However, there's an OrderedDict in the <code>collections</code> module, and recent versions of Python 3 <i>do</i> retain the insertion order of dicts.</span>
<span class="comment-copy">@ PM2Ring   I dont want to, and dont know if its possible, to move the many calculations to @property.  I dont see how a dict can help. The variables arent defined yet near the header before the loop. (ps - im using python 2.7)</span>
<span class="comment-copy">@Daniel In that case, it's hard for me to give specific useful advice / code without seeing an example that's closer to your real program than what you've shown in the question. Maybe you should ask a new question that uses a more realistic example.</span>
