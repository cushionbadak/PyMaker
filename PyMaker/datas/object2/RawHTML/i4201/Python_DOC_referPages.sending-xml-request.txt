<div class="post-text" itemprop="text">
<p>I've spent a total of 30 minutes in python lol, so take that into consideration when you answer lol:</p>
<p>I'm trying to send an HTTP POST request with a body and reading the response. I'm using Python 3.6.5 on Windows 10. This is what I have so far:</p>
<p>import http.client
import xml.dom.minidom</p>
<pre><code>HOST = "www.mysite.com"
API_URL = "/service"

def do_request(xml_location):

request = open(xml_location, "r").read()

webservice = http.client.HTTPConnection(HOST)

webservice.request("POST", API_URL)

webservice.putheader("Host", HOST)
webservice.putheader("User-Agent", "Python Post")
webservice.putheader("Content-type", "text/xml; charset=\"UTF-8\"")
webservice.putheader("Content-length", "%d" % len(request))
webservice.endheaders()

webservice.send(request)

statuscode, statusmessage, header = webservice.getreply()

result = webservice.getfile().read()
resultxml = xml.dom.minidom.parseString(result)

print (statuscode, statusmessage, header)
print (resultxml.toprettyxml())

with open("output-%s" % xml_location, "w") as xmlfile:
    xmlfile.write(resultxml.toprettyxml())

do_request("test.xml")
</code></pre>
<p>test.xml contains the XML request. When I run, I get an error:</p>
<pre><code>Traceback (most recent call last):
  File "C:\Users\xxx\Documents\test.py", line 33, in &lt;module&gt;
    do_request("test.xml")
  File "C:\Users\xxx\Documents\test.py", line 14, in do_request
    webservice.putheader("Host", HOST)
  File "C:\Users\xxx\AppData\Local\Programs\Python\Python36\lib\http\client.py", line 1201, in putheader
    raise CannotSendHeader()
http.client.CannotSendHeader
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is that you mixed up the <a href="https://docs.python.org/3/library/http.client.html" rel="nofollow noreferrer"><code>request</code></a> and <a href="https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection.putrequest" rel="nofollow noreferrer"><code>putrequest</code></a> methods. (Not surprisingly, given the brevity and sparsity of the documentation… most modules in Python are documented a lot better than this, so don't let that worry you about the future.)</p>
<p>The <code>request</code> method is a convenience function that adds the request line, all the headers, and the data all in one go. After you've done that, it's way too late to add a header, hence the error message.</p>
<p>So, you can fix it either way.</p>
<hr/>
<p>(1) Change it to use <code>putrequest</code>. I realize there's no example using <code>putrequest</code> or <code>putheader</code> anywhere in the docs, but it looks like this:</p>
<pre><code>webservice.putrequest("POST", API_URL)

webservice.putheader("Host", HOST)
webservice.putheader("User-Agent", "Python Post")
webservice.putheader("Content-type", "text/xml; charset=\"UTF-8\"")
webservice.putheader("Content-length", "%d" % len(request))
webservice.endheaders()

webservice.send(request)
</code></pre>
<hr/>
<p>(2) Change it to use <code>request</code>. This is what all the examples in the docs do; you just need to build up a dict of headers to pass to it:</p>
<pre><code>headers = {
    "Host": HOST,
    "User-Agent": "Python Post",
    "Content-type", "text/xml; charset=\"UTF-8\"",
    "Content-length", "%d" % len(request)
}
webservice.request("POST", API_URL, headers=headers, body=request)
</code></pre>
<hr/>
<p>(3) Read this at the top of the docs:</p>
<blockquote>
<p>This module defines classes which implement the client side of the HTTP and HTTPS protocols. It is normally not used directly — the module <a href="https://docs.python.org/3/library/urllib.request.html#module-urllib.request" rel="nofollow noreferrer">urllib.request</a> uses it to handle URLs that use HTTP and HTTPS.</p>
<p>See also The <a href="http://docs.python-requests.org/" rel="nofollow noreferrer">Requests package</a> is recommended for a higher-level HTTP client interface.</p>
</blockquote>
<p>For most real-life cases, you want to use <code>requests</code> if you can use a third-party library, and <code>urllib.request</code> if you can't. They're both simpler, and better documented.</p>
</div>
<span class="comment-copy">Is there a reason you're using <code>http.client</code>? This is a pretty low-level module; it's usually simpler to use <code>urllib.request</code> if you need to stick with the stdlib, or the third-party module <code>requests</code> if you don't. (In fact, that's the very first thing the <a href="https://docs.python.org/3/library/http.client.html" rel="nofollow noreferrer"><code>http.client</code> docs</a> say…)</span>
<span class="comment-copy">@abarnert - no idea... like I said, I have about 5 minutes experience in python :). This is actually for integration into AppDynamics, so I'm not sure if there are any restrictions.</span>
<span class="comment-copy">Well, where did you discover <code>http.client</code> and how to use it? If you're extending a whole mess of someone else's legacy code that uses <code>http.client</code> all over the place, you may want to learn how to use it, but otherwise, you probably don't.</span>
<span class="comment-copy">I got it working with urllib. The requests lib wasn't working and I didn't want to mess with it anymore lol :).</span>
<span class="comment-copy">Extra Credit :) : On a related question, how do you recommend reading a node or two from the xml response string by xpath?</span>
<span class="comment-copy">@SledgeHammer <a href="http://lxml.de/tutorial.html" rel="nofollow noreferrer"><code>lxml.etree</code></a>, is usually the best choice for simple XML stuff, or <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#xpath-support" rel="nofollow noreferrer"><code>etree</code></a> if you can't use third-party libraries. Neither one has quite complete XPath support (and the stdlib one a bit more incomplete than lxml), but they're both usually enough for what you want, and a lot easier to get started with than the other options.</span>
<span class="comment-copy">@SledgeHammer The other popular option is <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/" rel="nofollow noreferrer"><code>BeautifulSoup</code></a>, a third-party library that can wrap up <code>lxml</code> in an even friendlier API, and one that can be used consistently for HTML and XML, and can handle various kinds of sloppy searches. But if you actually know the XPath queries you want to run, you're probably better off using lxml directly.</span>
<span class="comment-copy">Ok, thanks, I will check out etree. I don't need complicated xpaths, just simple stuff... this is just to verify the response was successful. Thanks for the pointers!</span>
