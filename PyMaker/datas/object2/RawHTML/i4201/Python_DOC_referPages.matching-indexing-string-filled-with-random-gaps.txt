<div class="post-text" itemprop="text">
<p>I'm trying to match/index a string filled with gaps. Can this be done with regex? Below is my current solution:</p>
<pre><code>test = 'abcd---efghi-j-k-l---mnopq-r--st-uvw-x-yz'

def match_gaps(match_string, match_target):
    ms = match_string.replace('-','').index(match_target)+1
    for c in range(len(match_string)):
        if match_string[c] != '-':
            ms -= 1
        if ms == 0:
            endp = ms
            while len(match_string[c:endp].replace('-','')) &lt; len(match_target):
                endp += 1
            return(match_string[c:endp])

print(match_gaps(test, 'klmno'))
output: k-l---mno
</code></pre>
<p>It just feels messy...</p>
</div>
<div class="post-text" itemprop="text">
<p>If I understand correctly what you're trying to do, you want to allow dashes everywhere in the match but preserve them in the output.</p>
<p>Let's do exactly that:</p>
<pre><code>import re

test = 'abcd---efghi-j-k-l---mnopq-r--st-uvw-x-yz'

def match_gaps(match_string, match_target):
    chars = [re.escape(c) for c in match_target]  # allow special-chars
    regex = re.compile('-*'.join(chars))  # allow dashes between chars
    return regex.findall(match_string)

print(match_gaps(test, 'klmno'))
</code></pre>
<blockquote>
<p>['k-l---mno']</p>
</blockquote>
<p>You may need to make some minor adjustments so the output is exactly how you want it but the idea is identical. The only somewhat tricky part is the <a href="https://docs.python.org/3/library/re.html#re.escape" rel="nofollow noreferrer"><code>re.escape</code></a> (which might not even be necessary for you).</p>
</div>
<div class="post-text" itemprop="text">
<p>I had a solution that didn't use REs.</p>
<p>The idea is to remove the hyphens but remember where to insert them and then to do a regular string search. And then insert the hyphens into the matches. </p>
<pre><code>'abcd---efghi-j-k-l---mnopq-r--st-uvw-x-yz'
</code></pre>
<p>would become:</p>
<pre><code>&gt;&gt;&gt; idx, ss = zip(*(p for p in enumerate('abcd---efghi-j-k-l---mnopq-r--st-uvw-x-yz') if p[1] != '-'))
&gt;&gt;&gt; idx
(0, 1, 2, 3, 7, 8, 9, 10, 11, 13, 15, 17, 21, 22, 23, 24, 25, 27, 30, 31, 33, 34, 35, 37, 39, 40)
&gt;&gt;&gt; ''.join(ss)
'abcdefghijklmnopqrstuvwxyz'
</code></pre>
<p>Then to find the substring:</p>
<pre><code>&gt;&gt;&gt; q = 'klmno'
&gt;&gt;&gt; off = ''.join(ss).find(q)
&gt;&gt;&gt; idx[off:off+len(q)]
(15, 17, 21, 22, 23)
</code></pre>
<p>The one would reconstruct it via:</p>
<pre><code>&gt;&gt;&gt; a = ['-']*(idx[off+len(q)]-idx[off])
&gt;&gt;&gt; a
['-', '-', '-', '-', '-', '-', '-', '-', '-']
&gt;&gt;&gt; for i, c in zip([i - idx[off] for i in idx[off:off+len(q)]], q):
...     a[i] = c
... 
&gt;&gt;&gt; ''.join(a)
'k-l---mno'
</code></pre>
<p>I'm sure that the above code could be improved but the idea is there.</p>
<p>Note that <code>idx</code> could be stored compactly gap encoded.</p>
</div>
<span class="comment-copy">Not only is your solution more elegant/concise, it has the added benefit of returning all matches instead of the first match found (my method).</span>
