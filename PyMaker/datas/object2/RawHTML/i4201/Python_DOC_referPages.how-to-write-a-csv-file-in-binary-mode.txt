<div class="post-text" itemprop="text">
<p>Does python's csv writer not support binary mode anymore?</p>
<p>I haven't had to write in 'b' mode until now and i'm getting very annoying errors like so:</p>
<pre><code>---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-2-030fb0c9dc9a&gt; in &lt;module&gt;()
  4 with open('test.csv', 'wb') as f:
  5     w = csv.writer(f)
----&gt; 6     w.writerows(rows)

TypeError: a bytes-like object is required, not 'str'
</code></pre>
<p>Code:</p>
<pre><code>import csv

rows = [b'1,2,3', b'4,5,6', b'7,8,9']
with open('test.csv', 'wb') as f:
    w = csv.writer(f)
    w.writerows(rows)
</code></pre>
<p>If anyone could explain the error that would be great. I'm passing in an iterable where every element is a byte sequence but I still get an error about the input not being 'bytes' but instead being 'str.' This behavior seems unexpected.</p>
<p>I know the above code snippet can write to a normal file if I turn off the binary mode. If anyone has a solution or suggestion that is constructive I would very much appreciate it. </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/csv.html#csv.writer" rel="nofollow noreferrer">The <code>csv</code> module in Python 3 always attempts to write strings, not bytes</a>:</p>
<blockquote>
<p>To make it as easy as possible to interface with modules which implement the DB API, the value None is written as the empty string. [...] All other non-string data are stringified with str() before being written.</p>
</blockquote>
<p>That means you have to pass it a file object that accepts strings, which usually means opening it in text mode.</p>
<p>If you are stuck with a file object that wants bytes, wrap it in an <a href="https://docs.python.org/3/library/io.html#io.TextIOWrapper" rel="nofollow noreferrer"><code>io.TextIOWrapper</code></a> to handle str-&gt;bytes encoding:</p>
<pre><code># assuming you want utf-8
with io.TextIOWrapper(binary_file, encoding='utf-8', newline='') as text_file:
    w = csv.writer(text_file)
</code></pre>
</div>
<span class="comment-copy">"Does python's csv writer not support binary mode anymore?" Correct. The <code>csv</code> module in Python 3 needs input &amp; output files to be opened in text mode.</span>
<span class="comment-copy">Can you <i>please</i> replace those images with actual text? Please see <a href="http://meta.stackoverflow.com/questions/285551/why-may-i-not-upload-images-of-code-on-so-when-asking-a-question">Why may I not upload images of code on SO when asking a question?</a></span>
<span class="comment-copy">@PM2Ring thanks for the comment. i'm well aware of the benefits of adding it as a text block. ill fix is as soon as i have 5 minutes to spare.</span>
<span class="comment-copy">Can you clarify why you <i>must</i> have a binary file? Are you writing data that's not compatible with 7 bit ASCII or UTF-8? If so, you may need to use another encoding, eg Latin1.</span>
<span class="comment-copy">@PM2Ring It's an api interface that only supports binary write modes. Not something I have any control over. Stuck with this interface. The answer below by user2357112 works well, especially with the write_through=True flag so it just sends everything to the buffer of the underlying binary file handle and just does the text-&gt;binary conversion.</span>
<span class="comment-copy">the io library seems pretty useful. thanks a lot.</span>
