<div class="post-text" itemprop="text">
<p>I've learned about Python multiprocess's Pipes/Queues/Shared ctypes Objects/Managers, and I want to compare them with Linux's anonymous pipes, named pipes, shared memory, socket, and so on. I now have the following questions</p>
<ul>
<li><p>The pipes and queue modules of Python's multiprocessing are based on anonymous pipes. Does it provide named pipes?</p></li>
<li><p>Does Python multiprocessing.sharedctypes support independent process
communication? I think it only supports father and child process or
brotherly process communication.</p></li>
<li><p>Which of them are only used in the process of paternity or
brotherhood, which can be communicated between independent processes
or different hosts?</p></li>
<li><p>What are their respective characteristics, how should I choose them?</p></li>
</ul>
<p>Thanks in advance. </p>
</div>
<div class="post-text" itemprop="text">
<p>Your question is quite broad and most of the answers can be found in the <code>multiprocessing</code> module documentation.</p>
<p>Here follows a somewhat short answer.</p>
<ol>
<li>The <a href="https://docs.python.org/3.4/library/multiprocessing.html?highlight=process#module-multiprocessing.connection" rel="nofollow noreferrer">multiprocessing Listeners and Clients</a> allow to choose named pipes as transport medium.</li>
<li><p>From the <a href="https://docs.python.org/3.4/library/multiprocessing.html?highlight=process#module-multiprocessing.sharedctypes" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p>The multiprocessing.sharedctypes module provides functions for allocating ctypes objects from shared memory which can be inherited by child processes.</p>
</blockquote>
<p>You cannot use <code>multiprocessing.sharedctypes</code> functionalities across processes which don't have parent/child relationship.</p></li>
<li><a href="https://docs.python.org/3/library/multiprocessing.html#managers" rel="nofollow noreferrer">Managers</a> and <a href="https://docs.python.org/3.4/library/multiprocessing.html?highlight=process#module-multiprocessing.connection" rel="nofollow noreferrer">Listeners and Clients</a> work across processes on different hosts or which do not have parent/child relationship. The <code>AF_INET</code> socket family can be used across different hosts. Nevertheless I'd recommend against it. Rather use network sockets or some other abstraction mechanism.</li>
<li>Differences and characteristics are well illustrated in the <a href="https://docs.python.org/3.4/library/multiprocessing.html" rel="nofollow noreferrer">documentation</a>. </li>
</ol>
<p>Python <code>multiprocessing</code> module was initially implemented over the <code>threading</code> APIs. By the time, it grew in features it supports but the core idea remains the same. The <code>multiprocessing</code> module is intended to deal with Python process families. For any other use, the <code>subprocess</code> module is a better option.</p>
<p>For distribution of tasks and jobs across multiple hosts, there are far better solutions abstracting the low level infrastructure. You can take a look at Python projects such as <a href="http://www.celeryproject.org/" rel="nofollow noreferrer">Celery</a> or <a href="https://github.com/spotify/luigi" rel="nofollow noreferrer">Luigi</a> or more complex infrastructures such as <a href="http://mesos.apache.org/" rel="nofollow noreferrer">Apache Mesos</a>.</p>
</div>
<span class="comment-copy">I have discussed the named pipe in another question, but I hope to have a more comprehensive conclusion. <a href="https://stackoverflow.com/questions/50074545/does-multiprocessing-support-named-pipes-fifo/50084044#50084044" title="does multiprocessing support named pipes fifo">stackoverflow.com/questions/50074545/…</a></span>
<span class="comment-copy">I think this may be too broad; focus on a single question at a time. And the last question really requires a discussion, or at least a detailed article or blog posting, not an answer at a Q&amp;A site.</span>
<span class="comment-copy">Also, in general, <i>everything</i> in multiprocessing is intended only to be used between the tree of processes created by <code>multiprocessing</code>. Some parts can be lifted and used independently, but if you’re asking what’s “supported” rather than what’s safe and functional with Python 3.7 on Linux (or with code forked from Python 3.7 into your own module), the answer will basically be “nothing”.</span>
<span class="comment-copy">Finally, if you want things to work across hosts, you generally need to be explicit about that from the start of your design; trying to pick pieces out of <code>multiprocessing</code> first and then figure out if they can be made magically distributed is usually the wrong answer. Also, you may want to look at third-party libs for complicated distributed processing (starting with either dill or cloudpickle in place of pickle, and their mechanisms for out-of-line buffer-shipping) instead of reinventing a complicated wheel.</span>
<span class="comment-copy">I have read the document of multiprocess carefully, and the conclusion is almost the same as yours. By the way, Listener only supports named pipes of windows.</span>
<span class="comment-copy">In addition, Managers provide a way to create data which can be shared between different processes, including sharing over a network between processes running on different machines. <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer">Managers</a></span>
<span class="comment-copy">Named pipes are Windows specific. Unix provides a similar implementation called <a href="https://en.wikipedia.org/wiki/Unix_domain_socket" rel="nofollow noreferrer"><code>domain sockets</code></a>. Listeners and Clients support both. I missed the <code>manager</code> object (never used honestly), I'll update the answer.</span>
