<div class="post-text" itemprop="text">
<p>I am a Windows user. I use <code>Python 3.6.5</code> and I import this version of OpenSSL <code>OpenSSL 1.0.2k</code>.</p>
<p>I need to write a script for a python TLS client that I can customize in terms of the supported TLS versions and ciphersuites and other configurations. The client should be able to make connections with self-signed certificates. Therefore, I believe I should use: <code>ssl.SSLContext()</code> to create my context and not <code>ssl.create_default_context()</code>. </p>
<p>However, with the following script, I can never get the peer's certificate. Please, provide clear answers with code as otherwise I tried many solutions and looked at previous posts with no hope. </p>
<pre><code>context = ssl.SSLContext() # ssl.create_default_context() 
#context.verify_mode = ssl.CERT_NONE
#context.check_hostname = True
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
domain="google.com"
ssl_sock = context.wrap_socket(s, server_hostname=domain)
ssl_sock.connect((domain, 443))

print("====== peer's certificate ======")
try:
    cert = ssl_sock.getpeercert()
    print ("issued to:", dict(itertools.chain(*cert["subject"]))["commonName"])
    print ("issued by:", dict(itertools.chain(*cert["issuer"]))["commonName"])
    print("issuance date:", cert["notBefore"])
    print("expairy date: ", cert["notAfter"])
    if (cert == None):
        print("no certificate")

except Exception as e:
    print("Error:",e)
ssl_sock.close()
</code></pre>
<p>The problem is that I do not receive the peer's certificate when I use <code>ssl.SSLContext()</code> but when I use <code>ssl.create_default_context()</code> it is received correctly. However, I need to be able to receive self-signed certificates (i.e. unverified certificates) that's why I have to use <code>ssl.SSLContext()</code>.</p>
<p>Thanks for the solution posted. But I need to parse the certificate even if it is not verified (self-signed). I trust this certificate and I need its info. I looked at several posts including <a href="https://stackoverflow.com/questions/27835619/urllib-and-ssl-certificate-verify-failed-error">this one</a>. I did these steps:</p>
<ol>
<li>I took the <code>.pem</code> content of my server's certificate.</li>
<li>I navigated to: <code>C:\Python36\Lib\site-packages\certifi</code></li>
<li>I opened <code>cacert.pem</code> which is placed in the directory (step 2)</li>
<li>I added my server's cert .pem content which starts with: <code>-----BEGIN CERTIFICATE-----</code> and ends with <code>-----END CERTIFICATE-----</code></li>
</ol>
<p>I get this error:</p>
<pre><code>ssl.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:833)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>After a number of attempts, some failed, some partial successful, I found a way that should work (didn't test it with self signed certificates, though). Also, I wiped out everything from the previous attempts.</p>
<p>There are 2 necessary steps:</p>
<ol>
<li><p>Get the server certificate using <a href="https://docs.python.org/3/library/ssl.html#ssl.get_server_certificate" rel="nofollow noreferrer">[Python 3]: (ssl.<strong>get_server_certificate</strong>(<em>addr, ssl_version=PROTOCOL_TLS, ca_certs=None</em>)</a>, which returns it as a <em>PEM</em> encoded string (e.g.: ours - <em>pretty printed</em>):</p>
<blockquote>
<pre><code>'-----BEGIN CERTIFICATE-----'
'MIIIPjCCByagAwIBAgIICG/ofYt2G48wDQYJKoZIhvcNAQELBQAwSTELMAkGA1UE`
'BhMCVVMxEzARBgNVBAoTCkdvb2dsZSBJbmMxJTAjBgNVBAMTHEdvb2dsZSBJbnRl'
...
'L2KuOvWZ40sTVCJdWPUMtT9VP7VHfLNTFft/IhR+bUPkr33xjOa0Idq6cL89oufn'
'-----END CERTIFICATE-----'
</code></pre>
</blockquote></li>
<li><p>Decode the certificate using (<strong>!!!undocumented!!!</strong>) <code>ssl._ssl._test_decode_cert</code> (present in <em>Python <strong>3</strong></em></p></li></ol></div>
<span class="comment-copy">Thanks. Unfortunately this is not what I want. I need my python script to be able to trust or (unverified) my server's self-signed cert. How to do this?</span>
<span class="comment-copy">I see. Are you targeting your server only or any server in the world?</span>
<span class="comment-copy">For now this server only.</span>
<span class="comment-copy">I have ithe server's certificate. But it will be helpful if you answer both cases. May be in future I need to consider any server's self-signed certificate.</span>
<span class="comment-copy">I posted a totally different solution. Hope it works for you.</span>
