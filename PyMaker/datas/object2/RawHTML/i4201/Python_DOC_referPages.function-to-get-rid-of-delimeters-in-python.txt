<div class="post-text" itemprop="text">
<p>I have a function where the user passes in a file and a String and the code should get rid of the specificed delimeters. I am having trouble finishing the part where I loop through my code and get rid of each of the <code>replacements</code>. I will post the code down below</p>
<pre><code>def forReader(filename):
try:
    # Opens up the file
    file = open(filename , "r")
    # Reads the lines in the file
    read = file.readlines()
    # closes the files
    file.close()
        # loops through the lines in the file
    for sentence in read:
            # will split each element by a spaace
            line = sentence.split()
    replacements = (',', '-', '!', '?' '(' ')' '&lt;' ' = ' ';')
    # will loop through the space delimited line and get rid of
    # of the replacements
    for sentences in line:




# Exception thrown if File does not exist
except FileExistsError:
    print('File is not created yet')


forReader("mo.txt")
</code></pre>
<p><code>mo.txt</code></p>
<pre><code>for ( int i;
</code></pre>
<p>After running the file<code>mo.txt</code> I would like for the output to look like this
<code>for int i</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a way to do this using regex. First, we create a pattern consisting of all the delimiter characters, being careful to escape them, since several of those characters have special meaning in a regex. Then we can use <code>re.sub</code> to replace each delimiter with an empty string. This process can leave us with two or more adjacent spaces, which we then need to replace with a single space.</p>
<p>The Python <code>re</code> module allows us to compile patterns that are used frequently. Theoretically, this can make them more efficient, but it's a good idea to test such patterns against real data to see if it does actually help. :)</p>
<pre><code>import re

delimiters = ',-!?()&lt;=;'

# Make a pattern consisting of all the delimiters
pat = re.compile('|'.join(re.escape(c) for c in delimiters))

s = 'for ( int i;'

# Remove the delimiters
z = pat.sub('', s)

#Clean up any runs of 2 or more spaces
z = re.sub(r'\s{2,}', ' ', z)
print(z)
</code></pre>
<p><strong>output</strong></p>
<pre><code>for int i
</code></pre>
</div>
<span class="comment-copy">I assume this is homework. Are you allowed to use Regular Expressions?</span>
<span class="comment-copy">haha no this isn't homework. Its actually a side project a friend and I are doing. Yes regular expressions are fine. I am not familiar with python which is why I am having a hard time with this.</span>
<span class="comment-copy">In that case, you can use <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer"><code>re.sub</code></a>.</span>
<span class="comment-copy">an example would be really helpful @PM2Ring</span>
<span class="comment-copy"><code>str.maketrans</code> ?</span>
<span class="comment-copy">You are a life saver. If I have any more questions on this matter can I DM you?</span>
<span class="comment-copy">@jsilva Glad to help. If you have further questions on this particular code you can post a comment here. But if you have a new question that's not directly related to the above code, then just ask a fresh question. :)</span>
<span class="comment-copy">Okay so now what I want to do is check if a particular word is in our new list after taking out the delimeters. How can I do that for example I tried to do a basic loop that goes through the new list and check for the word but no luck</span>
<span class="comment-copy">@jsilva That's a new question. :) But if you just want to test for a single word you can use the <code>in</code> operator to do that sort of thing. Eg, <code>s = 'this is a test sentence'; print('test' in s)</code>. However, that will also find partial words embedded inside other words, eg <code>'sent' in s</code> is True. And you may not want that.</span>
<span class="comment-copy">@jsilva The safe way is to split your cleaned-up string into a list of words, and then you can safely use <code>in</code> with it. Eg, <code>'test' in s.split()</code></span>
