<div class="post-text" itemprop="text">
<p>I want to define a class which does not inherit from <code>pandas.DataFrame</code> but sometimes acts like it. For example, I can do:</p>
<pre><code>import pandas
import numpy

class FalseDF(object):
    def __init__(self, df):
        self.df = df

    def __getitem__(self, item):
        return self.df.__getitem__(item)


df = pandas.DataFrame(numpy.reshape(numpy.arange(10), (2, 5)))
print(df)
</code></pre>
<p>which gives:</p>
<pre><code>   0  1  2  3  4
0  0  1  2  3  4
1  5  6  7  8  9
</code></pre>
<p>and now:</p>
<pre><code>fdf = FalseDF(df)
print(fdf[3])
</code></pre>
<p>gives:</p>
<pre><code>0    3
1    8
Name: 3, dtype: int64    
</code></pre>
<p>How can I now make the following syntax also work?</p>
<pre><code>    print(fdf.iloc[1])
</code></pre>
<p>or </p>
<pre><code>    print(fdf.loc[2])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It might not capture all the behavior of a <code>DataFrame</code>, but for starters you could implement <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattr__" rel="nofollow noreferrer"><code>__getattr__</code></a> or, much more risky, <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattribute__" rel="nofollow noreferrer"><code>__getattribute__</code></a> to pass on requests for attributes to the underlying dataframe:</p>
<pre><code>class FalseDF:
    def __getattr__(self, key):
        return getattr(self.df, key)
</code></pre>
</div>
