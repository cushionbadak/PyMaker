<div class="post-text" itemprop="text">
<p>I have tried to implement the first is_prime-function from this answer:
<a href="https://stackoverflow.com/a/17298131/6208280">https://stackoverflow.com/a/17298131/6208280</a></p>
<pre><code># for large numbers, xrange will throw an error.
# OverflowError: Python int too large to convert to C long
# to get over this:

def mrange(start, stop, step):
    while start &lt; stop:
        yield start
        start += step

# benchmarked on an old single-core system with 2GB RAM.

from math import sqrt

def is_prime(num):
    if num == 2:
        return True
    if (num &lt; 2) or (num % 2 == 0):
        return False
    return all(num % i for i in mrange(3, int(sqrt(num)) + 1, 2))
</code></pre>
<p>Yet I have a little probleme while testing high numbers.</p>
<p>For really high numbers, I get an overflow error: <code>long int too large to convert to float</code></p>
<p>I checked the max for float:</p>
<pre><code>sys.float_info.max
1.7976931348623157e+308
</code></pre>
<p>for <code>is_prime(10**308)</code> everything works fine... but for example with <code>is_prime(10**309)</code> there will be this overflow error (because of the float max?).</p>
<p>Does that mean 1.7976931348623157e+308 is the limit for this kind of is_prime()-function or is there any solution to check higher numbers with the is_prime()-function?</p>
<p>In my mind such solutions as "use decimal" will not really solve the problem, because of the lack of precision a prime number checking function will need?</p>
</div>
<div class="post-text" itemprop="text">
<p>If the only reason you need floats is to be able to do <code>int(sqrt(num))</code>, you can find a reasonably efficient <code>intsqrt</code> function and use that instead. See <a href="https://stackoverflow.com/questions/15390807">this question</a>, and the blog post linked from the accepted answer, for some ideas.</p>
<hr/>
<p>Or you can just change your code so that it doesn't need to <code>sqrt</code> at all. For example, instead of a range that ends with <code>int(sqrt(num))+1</code>, you can use a <a href="https://docs.python.org/3/library/itertools.html#itertools.takewhile" rel="nofollow noreferrer"><code>takewhile</code></a> that tests <code>lambda i: i*i &lt;= num</code>. Or, since you've already got that <code>mrange</code> function:</p>
<pre><code>def sqrmrange(start, sqrstop):
    while start*start &lt; sqrstop:
        yield start
        start += step
</code></pre>
<p>Or, if you don't need it to be a one-liner, you can probably write something less abstract (and maybe more efficient?) than either of those. (But really, any <code>intsqrt</code> could well be faster than the best possible <code>**2</code> test, because you only have to do the <code>intsqrt</code> once, at the start of the loop, rather than every time through the loop.)</p>
<hr/>
<p>Or, if you really want to keep things structured this way, you can just use <code>decimal</code>. You say:</p>
<blockquote>
<p>In my mind such solutions as "use decimal" will not really solve the problem, because of the lack of precision a prime number checking function will need?</p>
</blockquote>
<p>But that's not right. Using <code>float</code> means you're inherently limited to 52 bits of precision, which if a problem long before you get to overflowing. Using <code>decimal</code> means you get as many digits of precision as you ask for—and even the default 30 digits is already much more than 52 bits. For example:</p>
<pre><code>&gt;&gt;&gt; float(10**20) == float(10**20)+1
True
&gt;&gt;&gt; Decimal(10**20) == Decimal(10**20)+1
False
</code></pre>
<p>(In fact, since you're constructing that <code>Decimal</code> from a huge <code>int</code>, it's going to automatically expand to track as many digits as are needed for the <code>int</code>… but you do still need to set the precision before calling <code>sqrt</code> on it.)</p>
<p>It can be complicated to programmatically calculate and set the desired precision for an operation, but in this case, it's pretty simple. The bigger problem is that really big <code>Decimals</code> are a lot slower than really big ints.</p>
</div>
<span class="comment-copy">It means that <code>(sys.float_info.max - ϵ) ** 2</code> is the limit, as you're calling <code>sqrt(num)</code>.  There are "integer square root algorithms" that side step any use of floats, maybe like <a href="https://stackoverflow.com/a/15391420/736937">this one</a></span>
<span class="comment-copy">Have you thought about how many operations would be required to check that a 308-digit number is prime, and how long that would take? Your function is already going to be way too slow for 20-digit numbers, let alone 300-digit ones.</span>
