<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/25675943/how-can-i-concatenate-str-and-int-objects">How can I concatenate str and int objects?</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I get this error when trying to take an integer and prepend "b" to it, converting it into a string:</p>
<pre><code>  File "program.py", line 19, in getname
    name = "b" + num
TypeError: Can't convert 'int' object to str implicitly
</code></pre>
<p>That's related to this function:</p>
<pre><code>num = random.randint(1,25)
name = "b" + num
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>name = 'b' + str(num)
</code></pre>
<p>or</p>
<pre><code>name = 'b%s' % num
</code></pre>
<p>as S.Lott notes, the mingle operator '%' is deprecated for Python 3 and up. And I stole the name "mingle" from <a href="http://catb.org/~esr/intercal/stross.html" rel="noreferrer">INTERCAL</a> but that's how I talk about it and wanted to see it in print at least once before - like the dodo - it vanishes from the face of the earth.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python won't automatically convert types in the way that languages such as JavaScript or PHP do.</p>
<p>You have to convert it to a string, or use a formatting method.</p>
<pre><code>name="b"+str(num)
</code></pre>
<p>or printf style formatting...</p>
<pre><code>name="b%s" % (num,)
</code></pre>
<p>or the new .format string method</p>
<pre><code>name="b{0}".format(num)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yeah, python doesn't having implicit int to string conversions.</p>
<p>try <code>str(num)</code> instead</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 3.6 has <a href="https://docs.python.org/3/whatsnew/3.6.html#pep-498-formatted-string-literals" rel="nofollow noreferrer">f-strings</a> where you can directly put the variable names without the need to use <code>format</code>:</p>
<pre><code>&gt;&gt;&gt; num=12
&gt;&gt;&gt; f"b{num}"
'b12'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>name = "b{0:d}".format( num )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Correct answers have already been given but I want to chime in and say that you should <em>always</em> use str(var) every time you intend to use var as a string, regardless of whether you know it is a string or not.</p>
<p>Better safe than sorry.</p>
</div>
<span class="comment-copy"><a href="https://stackoverflow.com/a/6380529/2071807">This SO answer</a> addresses why Python doesn't just cast the RHS of <code>+</code> to a <code>str</code> like Javascript does. It was kind of surprising to me but that answer explains it well.</span>
<span class="comment-copy">The % is deprecated in Python 3. Might want to remove that one.</span>
<span class="comment-copy">@S.Lott I have to work on some systems using python &lt;2.6, namely Ubuntu 8.04. I didn't realize .format wasn't available, and after developing the code on Python 2.6, having to go and change all the .format commands to % was a bit of a pain. So, actually, while I prefer .format, if you need compatibility with every version, % is still your best bet - it IS present in Python 3, while .format is not present in python 2.5 and below.</span>
<span class="comment-copy">@S.Lott % is not deprecated in Python3. <a href="https://www.python.org/dev/peps/pep-3101/" rel="nofollow noreferrer">PEP 3101</a> clearly mentions that <i>The new system does not collide with any of the method names of the existing string formatting techniques, so both systems can co-exist until it comes time to deprecate the older system.</i></span>
<span class="comment-copy">The % is deprecated in Python 3.  Might want to remove that one.</span>
<span class="comment-copy">I can't edit it now it seems, so noted here that % is deprecated. Also worth mentioning is that .format isn't available before Python 2.6.</span>
<span class="comment-copy">But, what's the worst that can happen? A TypeError?</span>
