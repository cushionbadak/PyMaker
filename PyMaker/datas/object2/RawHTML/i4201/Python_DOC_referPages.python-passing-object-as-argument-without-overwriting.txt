<div class="post-text" itemprop="text">
<p>Consider this code:</p>
<pre><code>class MyClass:
    def __init__(self, x):
        self.x = x

def myfunct(arg):
    arg.x += 1
    return arg

a = MyClass(0)
print(a.x)

b = myfunct(a)
print(a.x)
print(b.x)
</code></pre>
<p>This returns:</p>
<pre><code>0
1
1
</code></pre>
<p>I would expect this code to behave in the same way as this one:</p>
<pre><code>def myfunct(arg):
    arg += 1
    return arg

c = 0
print(c)

d = myfunct(c)
print(c)
print(d)
</code></pre>
<p>However the latter returns:</p>
<pre><code>0
0
1
</code></pre>
<p>I understand this is due to Python's way of passing arguments by assignment, as explained in <a href="https://stackoverflow.com/questions/47724517/python-object-as-argument-of-a-function">this post</a>, or <a href="https://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference">this post</a>.</p>
<p>However, I can't figure out a way to work around the behavior exhibited in the first code, which is unwanted in the project I am working on. How can I pass an object as an argument to a function, return a madified object, and keep the original one untouched?</p>
</div>
<div class="post-text" itemprop="text">
<p>The simple solution is, just create or pass a copy. To do that you have to possibiltys. Either you create a <code>.copy()</code> method on the class or use the <code>copy</code> module.</p>
<p>A copy method could look like this:</p>
<pre><code>class MyClass:
    def __init__(self, x):
        self.x = x
    def copy(self):
        return self.__class__(self.x)
</code></pre>
<p>The <a href="https://docs.python.org/3.6/library/copy.html" rel="nofollow noreferrer">copy module</a> works like this:</p>
<pre><code>import copy
b = copy.copy(a)
</code></pre>
<p>You can use either way to create a function that simply returns a new copy of the argument:</p>
<pre><code>def myfunct(arg):
    arg = arg.copy() # Or copy.copy(arg)
    arg.x += 1
    return arg
</code></pre>
<p>Edit: As many other answers say, my approach shown above doesn't work if you have mutable objects in mutable objects (as example an object of your class, that has another object of your class in its <code>args</code> attribute). In that case use the <code>copy.deepcopy</code> function instead:</p>
<pre><code>def myfunct(arg):
    arg =  copy.deepcopy(arg)
    arg.x += 1
    return arg
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're explicitly modifying your object. Python supports this behavior by default, but if you want to prevent modification of your object you may want to update the <code>__setattr__</code> to manage attribute modification.</p>
<p>If you want to prevent the original object from modifying and you want to modify the object sent to the function you can <a href="https://stackoverflow.com/questions/1500718/what-is-the-right-way-to-override-the-copy-deepcopy-operations-on-an-object-in-p?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa">add a <code>__copy__</code> method to your object</a> to be copyable in a way you like, then pass a copy of your object to the function using <code>copy.copy()</code>.</p>
<pre><code>class MyClass:
    def __init__(self, x):
        self.x = x

    # default copy  
    def __copy__(self):
        cls = self.__class__
        result = cls.__new__(cls)
        result.__dict__.update(self.__dict__)
        return result
</code></pre>
<p>Demo: </p>
<pre><code>In [21]: a = MyClass(0)
    ...: print(a.x)
    ...: 
0
# import copy
In [22]: b = myfunct(copy.copy(a))

In [24]: a.x
Out[24]: 0

In [25]: b.x
Out[25]: 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from copy import deepcopy
def myfunct(arg):
    new_arg = deepcopy(arg)
    new_arg.x += 1
    return new_arg
</code></pre>
<p>I would recommend deepcopy over copy since you want to make sure that all references to the original object are cut.</p>
</div>
<span class="comment-copy">You're modifying one object. If you want two separate objects, you would have to <a href="https://docs.python.org/3/library/copy.html" rel="nofollow noreferrer">make a copy of it.</a></span>
<span class="comment-copy">Why do you define <code>__copy__</code> if you do exactly the same as the default method would to?</span>
<span class="comment-copy">@MegaIng Thanks for note. Just wanted to mention that you can manage the way your object is being copied.</span>
