<div class="post-text" itemprop="text">
<p>I am trying to write following dictionary into csv file:</p>
<pre><code>mydict = {'k1':[1,2,3], 'k2':[4,5,6], 'k3':[6,7,8]}
</code></pre>
<p>The result I want to achieve is to have dictionary keys as column headers is csv file and map corresponding key values to those columns:</p>
<pre class="lang-none prettyprint-override"><code>k1 k2 k3
1 4 6
2 5 7
3 6 8
</code></pre>
<p>I have tried following code but it's not working for me:</p>
<pre><code>import csv

def save_output(output_file_name):
    global output
    fields = list(mydict.keys())
    with open(output_file_name, 'w', newline='') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(mydict.items())
        for key,items in mydict.items():
            for item in items:
                writer.writerow(key,item)

save_output('test_output.csv')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I've modified your function so it doesn't use a global variable which generally should be avoid whenever possible. The "trick" here is to use the built-in <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip()</code></a> function to transpose the values in the dictionary so they're in column-major instead of row-major order.</p>
<p>To understand better what's going on in the code below, first consider that the <code>dictionary.values()</code> call is producing the following sequence from the sample data shown in the dictionary in your question:</p>
<pre><code>[1, 2, 3], [4, 5, 6], [6, 7, 8]
</code></pre>
<p>All of these are passed to the <code>zip()</code> function all-at-once by using the following shorthand Python notation (note the <code>*</code> prefix):</p>
<pre><code>zip(*dictionary.values())
</code></pre>
<p>Which is equivalent to calling it like this:</p>
<pre><code>zip([1, 2, 3], [4, 5, 6], [6, 7, 8])
</code></pre>
<p>So the <code>zip()</code> function rearranges them resulting it it producing this sequence:</p>
<pre><code>(1, 4, 6), (2, 5, 7), (3, 6, 8)
</code></pre>
<p>Another way to to think about is to consider the values as a 2D matrix:</p>
<pre><code>1, 2, 3
4, 5, 6
6, 7, 8
</code></pre>
<p>in which case <code>zip()</code> is doing to them:</p>
<pre><code>1, 4, 6
2, 5, 7
3, 6, 8
</code></pre>
<p>In other words, it's exchanging the rows and columns of the matrix, which is called "transposing" the matrix. As I said, it's being done here to put them into the order needed to write the column values row-by-row into csv file.</p>
<p>Anyway, here's the code:</p>
<pre><code>import csv

def save_output(dictionary, output_file_name):
    with open(output_file_name, 'w', newline='') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(dictionary)  # First row (the keys of the dictionary).
        for values in zip(*dictionary.values()):
            writer.writerow(values)

mydict = {'k1': [1, 2, 3], 'k2': [4, 5, 6], 'k3': [6, 7, 8]}

save_output(mydict, 'test_output.csv')
</code></pre>
<p>Contents of the <code>test_output.csv</code> file produced:</p>
<pre class="lang-none prettyprint-override"><code>k1,k2,k3
1,4,6
2,5,7
3,6,8
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're not opposed to <code>pandas</code>, this is very easy:</p>
<pre><code>import pandas as pd
pd.DataFrame(mydict).to_csv('filename.csv',index=None, sep=' ')
</code></pre>
<p>Note, the <code>sep=' '</code> is to have it as a space delimited csv. You can omit that (or use <code>sep=','</code>, which is the default) to have it as a regular comma separated csv</p>
</div>
<div class="post-text" itemprop="text">
<p>You could try the following:</p>
<pre><code>import csv

def save_output(mydict, output_file_name):
    keys = [list(mydict.keys())]
    values = [mydict[key] for key in mydict.keys()]
    final = keys + values
    with open(output_file_name, 'w', newline='') as csvfile:
        writer = csv.writer(csvfile, delimiter=' ')
        writer.writerows(final)

mydict = {'k1':[1,2,3], 'k2':[4,5,6], 'k3':[6,7,8]}

save_output(mydict, "output_file_name.csv")
</code></pre>
<p>The output when you open the <code>csv</code> file is this:</p>
<pre><code>k1 k2 k3
1 2 3
4 5 6
6 7 8
</code></pre>
</div>
<span class="comment-copy">Hi! What's not working? - error, unexpected output, etc.</span>
<span class="comment-copy">Thanks a lot Martin, this worked for me this time :) Would you be able to explain in more detail how the following code works as I am bit confused:  for values in zip(*dictionary.values()):             writer.writerow(values)</span>
<span class="comment-copy">Danny: OK sure, see if the update I just posted helps. Since you say the posted code solves your problem, please accept my answer. See <a href="https://stackoverflow.com/help/someone-answers">What should I do when someone answers my question?</a>.</span>
<span class="comment-copy">Thanks @sacul, was going to give it try but for some reason I can't import panda module.</span>
<span class="comment-copy">You might have to install it (but note that it is <code>pandas</code>, not <code>panda</code>)</span>
<span class="comment-copy">The data is not in the desired order in the output csv file produced.</span>
