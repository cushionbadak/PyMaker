<div class="post-text" itemprop="text">
<p>I am accessing an API and can't get the data returned. The two float pointers will point to an array of data. I must assume the API is working properly. A different function call provides a the length of the data I am retrieving. This values is <code>length</code> down below when attempted.</p>
<p>C Header for Function</p>
<pre><code>    int function(int, float * data1, float * data2)
</code></pre>
<p>ctypes setup</p>
<pre><code>    dll.function.argtypes = (c_int, POINTER(c_float), POINTER(c_float))
    dll.function.restypes = c_int
</code></pre>
<p>Failed Attempt 1:</p>
<pre><code>    x = c_float()
    y = c_float()
    status = dll.function(1, byref(x), byref(y))
</code></pre>
<p>Program crashes OR Access violation writing.</p>
<p>Failed Attempt 2:</p>
<pre><code>    x = POINTER(c_float)()
    y = POINTER(c_float)()
    status = dll.function(1, x, y)
</code></pre>
<p>Null Pointer Error</p>
<p>Failed Attempt 3:</p>
<pre><code>    dll.function.argtypes = (c_int, c_void_p, c_void_p)
    x = c_void_p()
    y = c_void_p()
    status = dll.function(1, x, y)
</code></pre>
<p>Null Pointer Error</p>
<p>Failed Attempt 4:</p>
<pre><code>    array = c_float * length
    x = array()
    y = array()
    status = dll.function(1, byref(x), byref(y))
</code></pre>
<p>Program crashes</p>
<p>Failed Attempt 5:</p>
<pre><code>    array = c_float * length
    x = POINTER(array)()
    y = POINTER(array)()
    status = dll.function(1, x, y)
</code></pre>
<p>Null Pointer Error OR ArgumentError: expected LP_c_float instance instead of LP_c_float_Array_[length]</p>
<p>Failed Attempt 6:</p>
<pre><code>    x = (c_float*length)()
    y = (c_float*length)()
    a = cast(x, POINTER(c_float))
    b = cast(y, POINTER(c_float))
    status = dll.function(1, a, b)
</code></pre>
<p>Program crashes</p>
<p>What am I missing and why?</p>
<p>I believe the argtypes are correct. I am attempting to meet them properly, but there continues to be an issues. Do I need to "malloc" the memory somehow? (I'm sure I need to free after I get the data).</p>
<p>This is on Windows 7 with Python 2.7 32-bit.</p>
<p>I have looked through other similar issues and am not finding a solution. I am wondering if, at this point, I can blame the API for this issue.</p>
</div>
<div class="post-text" itemprop="text">
<p>Dealing with pointers and arrays is explained in <a href="https://docs.python.org/3/library/ctypes.html#type-conversions" rel="nofollow noreferrer">[Python 3]: Type conversions</a>.</p>
<p>I prepared a dummy example for you.</p>
<p><em>main.c</em>:</p>
<pre class="lang-c prettyprint-override"><code>#if defined(_WIN32)
#  define DECLSPEC_DLLEXPORT __declspec(dllexport)
#else
#  define DECLSPEC_DLLEXPORT
#endif


static int kSize = 5;


DECLSPEC_DLLEXPORT int size() {
    return kSize;
}


DECLSPEC_DLLEXPORT int function(int dummy, float *data1, float *data2) {
    for (int i = 0; i &lt; kSize; i++) {
        data1[i] = dummy * i;
        data2[i] = -dummy * (i + 1);
    }
    return 0;
}
</code></pre>
<p><em>code.py</em>:</p>
<pre class="lang-py prettyprint-override"><code>#!/usr/bin/env python

import sys
import ctypes


c_float_p = ctypes.POINTER(ctypes.c_float)


def main():
    dll_dll = ctypes.CDLL("./dll.so")

    size_func = dll_dll.size
    size_func.argtypes = []
    size_func.restype = ctypes.c_int


    function_func = dll_dll.function
    function_func.argtypes = [ctypes.c_int, c_float_p, c_float_p]
    function_func.restype = ctypes.c_int

    size = size_func()
    print(size)

    data1 = (ctypes.c_float * size)()
    data2 = (ctypes.c_float * size)()

    res = function_func(1, ctypes.cast(data1, c_float_p), ctypes.cast(data2, c_float_p))
    for i in range(size):
        print(data1[i], data2[i])


if __name__ == "__main__":
    print("Python {:s} on {:s}\n".format(sys.version, sys.platform))
    main()
</code></pre>
<p><strong>Notes</strong>:</p>
<ul>
<li>The <em>C</em> part tries to mimic what your <em>.dll</em> does (or at least what I understood):

<ul>
<li><em>size</em> - gets the arrays sizes</li>
<li><em>function</em> - populates the arrays (till their size - assuming that they were properly allocated by the caller)</li>
</ul></li>
<li><em>Python</em> part is straightforward:

<ul>
<li>Load the <em>.dll</em></li>
<li>Define <em>argtypes</em> and <em>restype</em> (in your code it's <em>restype</em>'<strong>s</strong>) for the 2 functions (for <em>size_func</em> not necessary)</li>
<li>Get the lengths</li>
<li>Initialize the arrays</li>
<li>Pass them to <em>function_func</em> using <code>ctypes.cast</code></li>
</ul></li>
</ul>
<p><strong>Output</strong> (on <em>Lnx</em>, as building the <em>C</em> code is much simpler, but works on <em>Win</em> as well):</p>
<blockquote>
<pre><code>[cfati@cfati-ubtu16x64-0:~/Work/Dev/StackOverflow/q050043861]&gt; gcc -shared -o dll.so main.c
[cfati@cfati-ubtu16x64-0:~/Work/Dev/StackOverflow/q050043861]&gt; python3 code.py
Python 3.5.2 (default, Nov 23 2017, 16:37:01)
[GCC 5.4.0 20160609] on linux

5
0.0 -1.0
1.0 -2.0
2.0 -3.0
3.0 -4.0
4.0 -5.0
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>It really depends on what you are doing with these float pointers.</p>
<p>If you are trying to <em>traverse</em> it, i.e. </p>
<pre><code>for(int i = 0; i &lt; size; i++)
    printf("%f\n%, data1[i])
</code></pre>
<p>then for sure this is problematic as no array was allocated. You simply passed a pointer pointing to a float. That is all.</p>
<p>You need to first allocate that memory. To this end Attempt 4 looks like the more promising, but I suspect you have a problem inside your C function leading to the crash.</p>
<p>Difficult to say without seeing the implementation of that function.</p>
</div>
<span class="comment-copy">It is recommended to use cffi instead of ctypes. cffi is much more convenient.<a href="https://cffi.readthedocs.io/en/latest/overview.html" rel="nofollow noreferrer">cffi.readthedocs.io/en/latest/overview.html</a> A while ago I was also using ctypes, but people recommended to switch. And they were right, I would never tough ctypes again. :)</span>
<span class="comment-copy">Examples on how to use pointers can be found at <a href="https://cffi.readthedocs.io/en/latest/using.html#working-with-pointers-structures-and-arrays" rel="nofollow noreferrer">cffi.readthedocs.io/en/latest/â€¦</a></span>
<span class="comment-copy">Both <code>char*</code> have the same length? They are allocated inside <code>function</code> or should they be allocated by the caller (<i>Python</i>)?</span>
<span class="comment-copy">Both float* are pointers to arrays. They will need to be allocated by the caller.</span>
<span class="comment-copy">Did this answer your question?</span>
<span class="comment-copy">Just accepted. I got pulled away to something else for a week. Thank you.</span>
<span class="comment-copy">You're welcome! :)</span>
