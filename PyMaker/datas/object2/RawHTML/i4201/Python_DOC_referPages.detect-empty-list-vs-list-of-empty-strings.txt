<div class="post-text" itemprop="text">
<p>I am new to Python, and I have searched for solution for detecting empty list. Say we have an empty string, like: </p>
<pre><code>a = ''
if not a:
    print('a is empty')
</code></pre>
<p>This works fine. However, my problem arises when:</p>
<pre><code>a = ['','','']
if not a:
    print('a is empty')
</code></pre>
<p>This one does not work. What is the Pythonic way of detecting a which I guess is a list containing empty strings in the above case?</p>
<p>Thanks in advance for your comments and suggestions. </p>
</div>
<div class="post-text" itemprop="text">
<p>A list is only empty if it has no members. It has members, but they're empty, it still has members, <a href="https://docs.python.org/3/reference/expressions.html#boolean-operations" rel="nofollow noreferrer">so it's still truthy</a>.</p>
<hr/>
<p>If you want to test whether all of the members of a list are empty, you can write it like this:</p>
<pre><code>if all(not element for element in a):
    print('a is made of empty things')
</code></pre>
<p>The <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer"><code>all</code></a> function should be pretty obvious. The argument to it might not be. It's a generator expression—if you've never seen one, first read about <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehensions</a>, then <a href="https://docs.python.org/3/tutorial/classes.html#iterators" rel="nofollow noreferrer">iterators</a> and the following two sections.</p>
<hr/>
<p>Or you can turn it around and test whether not any of the members are not empty:</p>
<pre><code>if not any(a):
    print('a is made of empty things')
</code></pre>
<p>The double negative seems a bit harder to understand. But on the other hand, it means you don't need to understand a generator expression (because <code>(element for element in a)</code> is just the same thing as <code>a</code>, so we can keep it simple).</p>
<p>(And, as PM 2Ring points out, this one probably a little faster, although probably not enough to matter for most uses.)</p>
</div>
<span class="comment-copy">A list containing empty strings is not an empty list.</span>
<span class="comment-copy">BTW, "does not work" is <i>not</i> a good description. You need to tell us what happens when you run the code, eg "it doesn't print anything".</span>
<span class="comment-copy">I bet the <code>not any(a)</code> version runs faster, but I guess the speed difference will be minimal unless <code>a</code> is large.</span>
<span class="comment-copy">@PM2Ring Yeah, probably. Obviously there's more overhead from calling <code>not</code> N times instead of 1, plus the overhead of iterating N steps through a list through a generator instead of directly. I'd guess it's a constant multiplier (for large enough N, all empty) that's on the order of a few milliseconds difference for 1M, so if you had to do that for millions of lists, it would definitely be worth testing…</span>
<span class="comment-copy">@PM2Ring Oh, and of course those million lists would have to mostly be all empty, so you didn't just short-circuit out of all the loops quickly.</span>
<span class="comment-copy">For the OP (or anyone else with the same question), I was tempted to show how to extend this recursively, but YAGNI. But if you <i>do</i> need it, ask. (And I promise not to explain why you can just <code>if True:</code> unless you use a non-well-founded set theory or one with ur-elements.)</span>
