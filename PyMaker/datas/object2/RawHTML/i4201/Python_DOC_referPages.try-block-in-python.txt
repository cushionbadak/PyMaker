<div class="post-text" itemprop="text">
<p>am I using the try block correctly? </p>
<pre><code>try:
    def add(num1, num2):
        return(float(num1) + float(num2))
except ValueError:
    return(None)
else:
    return(add(num1, num2))
</code></pre>
<p>I am using treehouse and am getting the error that task 1 is no longer passing meaning something has gone wrong with my def add(num1, num2)
is my try in the right spot? it says "Add a try block before where you turn your arguments into floats."</p>
</div>
<div class="post-text" itemprop="text">
<p>Place the <code>try-except</code> block inside the function.</p>
<p><strong>Ex:</strong></p>
<pre><code>def add(num1, num2):
    try:
        return (float(num1) + float(num2))
    except ValueError:
        return None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try needs to be inside a function definition and does not need an else. Basically, the except functions as the try's else.</p>
<pre><code>def add(num1, num2):
    try:
        return(float(num1) + float(num2))
    except ValueError:
        return(None)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you should do:</p>
<pre><code>def add(num1, num2):
    try:
        return float(num1)+float(num2)
    except:
        return None
</code></pre>
<p>The problem is that you are trying to create a function but returning values outside that function, and for the case of your <strong>else</strong> statement, the function is not even defined at that point and you are calling it.</p>
</div>
<span class="comment-copy">No, <code>try</code> must be inside your <code>def</code></span>
<span class="comment-copy">Defining a function with <code>def</code> will never raise <code>ValueError</code>, no. So the <code>def ...: ...</code> lines succeed. The <code>float()</code> call inside <code>add()</code> is not covered by the <code>try .. except</code> here, such blocks don't extend into functions defined in the block.</span>
<span class="comment-copy">Here's a hint: A try-block attempts to do something, but if it raises the exception specified, then it does something else. In your snippet above, you want to add the numbers but only if they can be converted to floats, otherwise return <code>None</code>. This is a common dilemma, because often you will get strings, which concatenate when added (<i>eg</i>: <code>'12' + '34' == '1234'</code>) but only strings with numbers can be converted to float, so if you don't use the try-block, your method may raise an exception. Hope this helps, if not @Rakesh has already given you the answer below.</span>
<span class="comment-copy">Also elaborating on @MartijnPieters comment, to define a function is not the same as calling it. <i>eg</i>: <code>def blah(x): return x</code> is just an object. You have to call <code>blah(some_arg)</code> with some argument to get it to do something. Also elaborating on @GeekOverdose comment, <code>else</code> is only used in a try-block when you want an additional action only if your try-block does <i>not</i> raise an exception, so it's not needed in this case. For more information see <a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">the Python docs on handling exceptions</a>. IMO the Python docs are very helpful!</span>
<span class="comment-copy">you are so amazing thank you for the fast response it worked :D</span>
<span class="comment-copy">You are welcome :)</span>
