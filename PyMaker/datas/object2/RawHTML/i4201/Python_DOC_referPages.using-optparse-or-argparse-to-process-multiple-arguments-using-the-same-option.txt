<div class="post-text" itemprop="text">
<p>I'm trying to write a python script that can echo whatever a user types when running the script</p>
<p>Right now, the code I have is (version_msg and usage_msg don't matter right now)</p>
<pre><code>from optparse import OptionParser 

version_msg = ""
usage_msg = ""
parser = OptionParser(version=version_msg, usage=usage_msg)
parser.add_option("-e", "--echo", action="append", dest="input_lines", default=[])
</code></pre>
<p>But if I try to run the script (python options.py -e hello world), it echoes just ['hello']. How would I go about fixing this so it outputs ['hello', 'world']?</p>
</div>
<div class="post-text" itemprop="text">
<p>A slightly hacky way of doing it:</p>
<pre><code>from optparse import OptionParser

version_msg = ""
usage_msg = ""
parser = OptionParser(version=version_msg, usage=usage_msg)
parser.add_option("-e", "--echo", action="append", dest="input_lines", default=[])

options, arguments = parser.parse_args()

print(options.input_lines + arguments)
</code></pre>
<p>I then run</p>
<pre><code>python myscript.py -e hello world how are you
</code></pre>
<p>Output:</p>
<pre><code>['hello', 'world', 'how', 'are', 'you']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In <code>argparse</code> this is quite easy, with its <code>nargs</code> parameter:</p>
<pre><code>In [245]: parser = argparse.ArgumentParser()
In [246]: parser.add_argument('-e','--echo', nargs='+');
In [247]: parser.parse_args(['-e','hello','world'])
Out[247]: Namespace(echo=['hello', 'world'])
</code></pre>
<p><code>nargs</code> is used to specify how many strings the Action takes.  '+' means one or more.  The results are collected in a list.  It models the <code>nargs</code> values on the regex usage (e.g. '?' and '*' also work).</p>
<pre><code>In [248]: parser.print_help()
usage: ipython3 [-h] [-e ECHO [ECHO ...]]

optional arguments:
  -h, --help            show this help message and exit
  -e ECHO [ECHO ...], --echo ECHO [ECHO ...]
</code></pre>
<hr/>
<p>Looking at the <code>optparse</code> docs, I see a <code>nargs</code> parameter, but it must be a number.  For a variable number, we have to use a <code>callback</code> as described in:</p>
<p><a href="https://docs.python.org/2/library/optparse.html#callback-example-6-variable-arguments" rel="nofollow noreferrer">https://docs.python.org/2/library/optparse.html#callback-example-6-variable-arguments</a></p>
<p>Using the function defined in this section:</p>
<pre><code>In [266]: parser = optparse.OptionParser()
In [267]: parser.add_option('-e','--echo', dest='echo', action='callback', callback=vararg_callback);

In [268]: parser.parse_args(['-e','hello','world'])
Out[268]: (&lt;Values at 0x7f0ff208a5c0: {'echo': ['hello', 'world']}&gt;, [])
</code></pre>
<p>In <code>argparse</code>, <code>nargs='+'</code> collects values up to the next <code>--</code> or <code>-</code>, but that allocation is done topdown, by the main parsing routine, not a callback defined for the <code>option</code> itself.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this is best accomplished by quoting the argument ie hello world becomes 'hello world' this ensures that the -e option consumes the entire string. 
If you really need the string to be broken up into pieces ie ['hello', 'world'] instead of ['hello world'] you could easily call split() on options.e[0]</p>
<pre><code>strings = options.e[0].split()
</code></pre>
<p>For a more complex method, you can use a callback, below links to a relevant example for you. </p>
<p><a href="https://docs.python.org/3/library/optparse.html#callback-example-6-variable-arguments" rel="nofollow noreferrer">https://docs.python.org/3/library/optparse.html#callback-example-6-variable-arguments</a></p>
</div>
<span class="comment-copy">Please provide the complete code showing the values of version_msg and usage_msg</span>
<span class="comment-copy">@ShivamSingh fixed</span>
<span class="comment-copy">This works like a miracle! Thanks!</span>
<span class="comment-copy">So you are collecting <code>hello</code> as an argument to <code>-e</code>, and everything else as the extras, the <code>arguments</code>.  From an <code>argparse</code> perspective, that isn't very satisfying.</span>
<span class="comment-copy">Collecting a variable number of arguments is a bit more involved in <code>optparse</code> than in <code>argparse</code>.</span>
<span class="comment-copy">Hmm that looks almost what I want, but it just stores Hello World as a single element in the list rather than 2 distinct elements</span>
