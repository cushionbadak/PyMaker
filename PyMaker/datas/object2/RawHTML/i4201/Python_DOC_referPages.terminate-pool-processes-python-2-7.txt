<div class="post-text" itemprop="text">
<p>My goal is pretty simple:</p>
<p>Terminate all processes in the pool after n seconds. </p>
<pre><code>p = Pool(5)
def f(x):
  return x*x

p.map(f, [1,2,3]) 
</code></pre>
<p>I need to use Pool and not multiprocessing.Process</p>
<p>Is there a way to terminate the whole pool or all the processes in it?</p>
<p>Pool of threads is also an option.</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot do this with threads (no way to force a thread to exit from the outside). You can <code>terminate()</code> a process pool. </p>
<p>Something like this, but you need to use map_async. If you use the blocking map, then you are probably out of luck.</p>
<pre><code>from multiprocessing import Pool
from time import sleep

def worker(x):
    print(x)
    sleep(50)

tasks = [x for x in range(0,10)]

p = Pool()

q = p.map_async(worker, tasks)
q.wait(10)
try:
    p.terminate()
    p.join()
except:
    pass
print("done")
</code></pre>
<p>This submits tasks to a pool and after 10 seconds terminates the pool if it has not completed yet. This may or may not be suitable for your purposes. </p>
</div>
<span class="comment-copy">Are you talking about a pool of processes or a pool of threads? Your question talks about processes but you have tagged this as threadpool.</span>
<span class="comment-copy">@Hannu threads is also an option. I updated the question. Thanks</span>
<span class="comment-copy">Have you looked at <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.close" rel="nofollow noreferrer"><code>Pool.close()</code></a> and <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.terminate" rel="nofollow noreferrer"><code>Pool.terminate()</code></a> (<code>terminate()</code> should be a last resort).</span>
