<div class="post-text" itemprop="text">
<p>I am trying to use search and replace in Python 3 with file</p>
<p>but when i try my code it only works on the first line and don't go through each and every line and replace it.</p>
<p>What i am trying so far</p>
<pre><code>f1 = open('test.txt', 'r')
f2 = open('test2.txt', 'w')
for line in f1:
    f1.readlines()
    find = (input('Enter word to find: '))
    while find in line:
        print('Word Found')
        replace = input('Enter Word to replace with: ')
        replace_action = (input('Are you sure you want to replace Y or N:'))
        if replace_action.lower() == 'y':
            f2.write(line.replace(find.lower(), replace))
        else:
            print('You have cancelled this operation')
    else:
        print('Word not found in file')
f1.close()
f2.close()
</code></pre>
<p>This code is only reading the first line but doesnot work further.</p>
</div>
<div class="post-text" itemprop="text">
<p>The method <code>readlines()</code> reads until EOF using <code>readline()</code> and returns a list containing the lines.</p>
<pre><code>f1 = open('test.txt', 'r')
f2 = open('test2.txt', 'w')

f1_lines = f1.readlines()
f1.close()

for line in f1_lines:
    find = input('Enter word to find: ')
    if find in line:
        print('Word Found')
        replace = input('Enter Word to replace with: ')
        replace_action = input('Are you sure you want to replace Y or N:')
        if replace_action.lower() == 'y':
            f2.write(line.replace(find.lower(), replace))
        else:
            print('You have cancelled this operation')
    else:
        print('Word not found in file')
        f2.write(line)

f2.close()
</code></pre>
<p>I changed a few thinks based on what I understood of the question. <code>if find in line</code> checks if the input you look for is in the line. If it is, the line is written to f2 with the replace, else the line is written to f2 as it was.</p>
<p>EDIT: You got another issue I guess. Works for me.</p>
<pre><code>runfile('C:/Users/mathieu.scheltienne/Desktop/test/untitled0.py', wdir='C:/Users/mathieu.scheltienne/Desktop/test')

Enter word to find: hello
Word Found

Enter Word to replace with: good bye

Are you sure you want to replace Y or N:y

Enter word to find: hello
Word Found

Enter Word to replace with: good bye

Are you sure you want to replace Y or N:y

Enter word to find: hello
Word Found

Enter Word to replace with: good bye

Are you sure you want to replace Y or N:y
</code></pre>
<p>Input file was: test.txt</p>
<pre><code>hello world
hello galaxy
hello universe
</code></pre>
<p>Output file:</p>
<pre><code>good bye world
good bye galaxy
good bye universe
</code></pre>
<p>Version with only one word that is going to be replace by only one word on every line:</p>
<pre><code>f1 = open('test.txt', 'r')
f2 = open('test2.txt', 'w')

f1_lines = f1.readlines()
f1.close()

find = input('Enter word to find: ')
replace = input('Enter Word to replace with: ')
counter = 0

for line in f1_lines:
    if find in line:
        print('Word Found')
        f2.write(line.replace(find.lower(), replace))
        counter += 1
    else:
        f2.write(line)

if counter == 0:
    print('Word not found in file')
else:
    print('{} words replaced'.format(counter))

f2.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is happening because you are not reading the file properly.<br/></p>
<pre><code>for line in f1:
    f1.readlines()
</code></pre>
<p><strong>f1.readlines()</strong> consumes all the file lines returning a list of strings.<br/>
You just need to remove the f1.readlines() line.</p>
<p>Check the documentation if you would like to know the various ways of reading a file in python.
<a href="https://docs.python.org/2.7/tutorial/inputoutput.html" rel="nofollow noreferrer">https://docs.python.org/2.7/tutorial/inputoutput.html</a><br/>
<a href="https://docs.python.org/3/tutorial/inputoutput.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/inputoutput.html</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>f1 = open('test.txt', 'r')
f2 = open('test2.txt', 'w')

lines = f1.readlines()

find = (input('Enter word to find: '))
replace = input('Enter Word to replace with: ')
for line in lines:
    print('current line: {}'.format(line))

    if not find in line:
        print('world {} not found in this line. Moving to next line'.format(find))
        continue

    print('World {} found in this line'.format(find))

    replace_action = input('Are you sure you want to replace for this line y or n')

    if replace_action.lower() == 'y':
        line = line.replace(find.lower(), replace)
        f2.write(line)
        print("New line: {}".format(line))
    else:
        print('You have cancelled this operation')

    print("")

f1.close()
f2.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you already have a solution, however there are few places where it can be optimized. </p>
<ul>
<li>Use python contextmanager <strong><code>with</code></strong> for handling files, then you dont need to worry about closing it. In your case the file will not be closed in case there is an exception thrown during for loop.</li>
<li>Using <code>with</code> you dont need to call <code>readline()</code>.</li>
<li>Use <code>try/catch</code> block if you getting inputs from external source.</li>
</ul>
<p>Here is another way of doing it.</p>
<pre><code>def  readfile_and_replace(input_filename, output_filename):
     #using python context manager to open file. File will be closed even in case of exception
     with open(input_filename) as input_file:
        with open(output_filename,'w') as output_file:
            try:
                for line in input_file:
                    search_str = (input('Enter word to find: '))
                    new_line = line
                    if search_str in line:
                        replace_str = input('Enter Word to replace with: ')
                        if input('Are you sure you want to replace Y or N:').upper() == 'Y':
                            new_line = line.replace(search_str.lower(), replace_str)
                            #print(line.replace(search_str.lower(), replace_str))
                        else:
                            print('You have cancelled this operation')
                    else :
                        print('Word not found in current line')

                    output_file.write(new_line)
            except KeyboardInterrupt:
                print("user aborted the program")


readfile_and_replace(input_filename='logs.txt', output_filename='logs2.txt') 
</code></pre>
<p>I hope it helps.</p>
</div>
<span class="comment-copy">And one more thing: while / else statement is really not a good habit.</span>
<span class="comment-copy">Hi its still working for only one line</span>
<span class="comment-copy">@AirasKhanAK It works for me... Weird. The behavior line by line (asking the word to replace and the word to replace with and Y/N) comes from the fact that the input are placed inside the for loop. If you want to always replace the same word, then place the input outside the for loop.</span>
<span class="comment-copy">With the current algo, you can look for a different word at every line, and replace this word with a different word at every line.</span>
<span class="comment-copy">Thankyou guys you are great</span>
<span class="comment-copy">Hi the loop is never ending it keep on asking for words</span>
<span class="comment-copy">"while find in line": you should use "if" instead.</span>
<span class="comment-copy">still its reading only the first line not all lines</span>
<span class="comment-copy">Sorry didn't look at the rest of the code. You don't you write the modified line in the file but don't modified the line variable. I am editing my answer.</span>
<span class="comment-copy">Thankyou for your help. But can't we do anything like this. we enter find word one time and it replaces all over the file. Its asking for each line</span>
