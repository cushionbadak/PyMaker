<div class="post-text" itemprop="text">
<p>I'm trying to map a function that takes 2 arguments to a list:</p>
<pre><code>my_func = lambda index, value: value.upper() if index % 2 else value.lower()

import string
alphabet = string.ascii_lowercase

n = map(my_func, enumerate(alphabet))
for element in n:
    print(element)
</code></pre>
<p>This gives me a <code>TypeError: &lt;lambda&gt;() missing 1 required positional argument: 'value'</code>.</p>
<p>What is the correct way to map my lambda onto this input?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python cannot unpack lambda parameters automatically. <code>enumerate</code> returns a <code>tuple</code>, so <code>lambda</code> has to take that tuple as sole argument</p>
<p>You need:</p>
<pre><code>n = map(lambda t: t[1].upper() if t[0] % 2 else t[1], enumerate(alphabet))
</code></pre>
<p>Considering now the ugliness of <code>map</code> + <code>lambda</code> + manual unpacking, I'd advise the alternate generator comprehension instead:</p>
<pre><code>n = (value.upper() if index % 2 else value for index,value in enumerate(alphabet))
</code></pre>
<p>(I removed the <code>lower()</code> call since your input is <em>already</em> lowercase)</p>
</div>
<div class="post-text" itemprop="text">
<p><code>map</code> will pass each value from <code>enumerate</code> as a single parameter to the callback, i.e. the <code>lambda</code> will be called with a tuple as argument. It would be pretty surprising behaviour if <code>map</code> would unpack arguments which look unpackable, since then its behaviour would depend on the values it iterates over.</p>
<p>To expand iterable arguments, use <a href="https://docs.python.org/3/library/itertools.html#itertools.starmap" rel="nofollow noreferrer"><code>starmap</code></a> instead, which "applies a <code>*</code> (star)" when passing arguments:</p>
<pre><code>from itertools import starmap

n = starmap(lambda index, value: ..., enumerate(alphabet))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python can't unpack <code>lambda</code> parameters automatically.</p>
<p>But you can get round this by passing an extra <code>range</code> argument to <code>map</code>:</p>
<pre><code>import string

alphabet = string.ascii_lowercase

n = map(lambda i, v: v.upper() if i % 2 else v.lower(),
        range(len(alphabet)),
        alphabet)

for element in n:
    print(element)
</code></pre>
<p>As per the <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p><strong>map</strong>(<em>function</em>, <em>iterable</em>, ...)</p>
<p>Return an iterator that applies function
  to every item of iterable, yielding the results. <strong>If additional
  iterable arguments are passed, function must take that many arguments
  and is applied to the items from all iterables in parallel.</strong> With
  multiple iterables, the iterator stops when the shortest iterable is
  exhausted. For cases where the function inputs are already arranged
  into argument tuples, see itertools.starmap().</p>
</blockquote>
</div>
<span class="comment-copy">yep, python 3 cannot automatically unpack <code>lambda</code> arguments anymore.</span>
<span class="comment-copy">I stand corrected: it doesn't work on any python version...</span>
<span class="comment-copy">Did an answer below help? Feel free to accept an answer (green tick on left), or ask for clarification.</span>
<span class="comment-copy">Hi, Sorry for that bad formatting of my code, I just don't know hot ot do that. I'll do it correctly next time. Thank you Jean-François Fabre, I've already done this with comprehension, then I tried to do the same by map() to examine myself. Yor explanation is good, something new to me. Regards</span>
<span class="comment-copy">I <i>never</i> imagined that <code>map</code> could take more than 1 iterable!</span>
<span class="comment-copy">@Jean-FrançoisFabre, Yeh it's just one of those tricks you see once and are so surprised you cannot possibly forget.</span>
<span class="comment-copy">Also, this is what I love about SO.. 3 equally acceptable answers within 10 mins!</span>
<span class="comment-copy">and completely different as well!</span>
<span class="comment-copy">Please split that <code>n = map(...)</code> line into multiple shorter ones. Having to scroll just to see the solution isn't great for the readability of the answer. I'd assign the lambda to a variable. Or you can just refer to the lambda as <code>my_func</code>, like the code in the question does.</span>
