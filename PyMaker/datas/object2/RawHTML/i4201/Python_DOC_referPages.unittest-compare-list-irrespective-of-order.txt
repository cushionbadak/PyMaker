<div class="post-text" itemprop="text">
<p>I am doing a unit test on two list of list values:</p>
<pre><code>self.assertEqual(sale, [['1',14], ['2',5], ['3',7], ['4',1]])
</code></pre>
<p>But it gives the below error:</p>
<pre><code>AssertionError: Lists differ: [['1', 14], ['4', 1], ['2', 5], ['3', 7]] != [['1'
, 14], ['2', 5], ['3', 7], ['4', 1]]

First differing element 1:
['4', 1]
['2', 5]

- [['1', 14], ['4', 1], ['2', 5], ['3', 7]]
+ [['1', 14], ['2', 5], ['3', 7], ['4', 1]]
</code></pre>
<p>How can I make this scenario pass, Prevent the assertEqual function to avoid checking the order of the elements in the list.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since Python lists keep track of order, you'll need some way to make sure the items are in the same order. </p>
<p>A set might work, if all items are unique. If they aren't unique you'll lose information on the duplicates. </p>
<p>Sorting the lists before you compare them will probably be your best bet. It will keep all the data intact, and put them in the same order in each list. </p>
<p>Here is a link to the different built in sorting methods for lists in Python 3.
<a href="https://docs.python.org/3/howto/sorting.html" rel="nofollow noreferrer">https://docs.python.org/3/howto/sorting.html</a></p>
</div>
<span class="comment-copy">You could sort them, you could compare their lengths and compare them as sets, etc.</span>
<span class="comment-copy">@chrisz. Option 2 is no good: <code>1, 1, 2</code> vs <code>1, 2, 2</code></span>
<span class="comment-copy">Hmm, I think I answered the first part of your question; "how can I make this scenario pass" but not the second "prevent the assertEqual function to avoid checking the order of the elements in the list."</span>
<span class="comment-copy">I think your answer is perfectly fine. I don't know why you got a downvote. The second part makes no actual sense. If you don't want to modify the originals, just use <code>sorted</code> instead of in-place sort.</span>
