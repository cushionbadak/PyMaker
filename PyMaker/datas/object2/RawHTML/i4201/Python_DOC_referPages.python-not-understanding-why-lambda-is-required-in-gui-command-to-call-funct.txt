<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/5767228/why-is-button-parameter-command-executed-when-declared">Why is Button parameter “command” executed when declared?</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/6920302/how-to-pass-arguments-to-a-button-command-in-tkinter">How to pass arguments to a Button command in Tkinter?</a>
<span class="question-originals-answer-count">
                    12 answers
                </span>
</li>
</ul>
</div>
<p>in the process of learning Python.
I understand the use of lambda, here's an example and link(for others).</p>
<p><a href="https://stackoverflow.com/questions/890128/why-are-python-lambdas-useful">Why are Python lambdas useful?</a></p>
<pre><code>mult3 = filter(lambda x: x % 3 == 0, [1, 2, 3, 4, 5, 6, 7, 8, 9])
</code></pre>
<p>Would assign [3, 6, 9] to  mult3.</p>
<hr/>
<p>Here is the code I was required to do in the book's quiz:</p>
<pre><code>import tkinter

def counter(text):
    """Add 1 every time the button is pressed"""

    count = int(text.get())
    text.set(count + 1)


window = tkinter.Tk()
frame = tkinter.Frame(window)
frame.pack()

var = tkinter.IntVar()
var.set(0)

button = tkinter.Button(window, textvariable=var, command=lambda: counter(var))
button.pack()

tkinter.mainloop()
</code></pre>
<p>That is the verified solution. What I had come up with was the same except for the code in variable button.
Here's my line:</p>
<pre><code>button = tkinter.Button(window, textvariable=var, command=counter(var))
</code></pre>
<p>The absence of lambda prevents the counter from working. I don't understand why lambda is required? As I'm just calling a function I had made, I'm not requiring a new unnamed function..?</p>
<p>Thanks in advance for your time :)</p>
</div>
<div class="post-text" itemprop="text">
<p>There are a couple of things going on here. First, When python compiles <code>command=counter(var)</code>, it calls the function and assigns its result to <code>command</code>. You called <code>counter</code> and your callback is now <code>None</code> and that's obviously not what you want. </p>
<p>You can't just do <code>command=counter</code> which would simply make <code>counter</code> the function to use in the callback because the API doesn't have a way to include arguments for the callback. So you do</p>
<pre><code>command=lambda:counter(var)
</code></pre>
<p>This assigns an anonymous function that takes no parameters to <code>command</code> just like the API wants. The lambda contains a reference to <code>var</code> in the containing scope which it then uses to call <code>counter</code>. And that's how you created a parameter for the target callback you really wanted.</p>
<p>This reference is a bit strange. Its a reference to the <code>var</code> slot in the containing scope, not the object that happens to be in <code>var</code> at the time of assignment. If you change <code>var</code> before the callback is made (or the containing scope disappears as in locals disappearing on return from a function), that new object is used. So, put your code in a function so you don't drive yourself crazy!</p>
</div>
<span class="comment-copy">In your version of the code <code>counter(var)</code> is only executed once. In their version it is executed every time the button is clicked.</span>
<span class="comment-copy">Do you know why though? I'm trying to understand</span>
<span class="comment-copy">Think about it more generally.  When you pass a function arguments like <code>f(3 + 7)</code>, you're not passing <code>3 + 7</code> into the function, you're passing <code>10</code>.</span>
<span class="comment-copy">@Yabusa: what do you mean "why?" There is no deeper reason than that it is how the language works. In one case the argument to Button is a function, in the other case it is the result of a function call.</span>
<span class="comment-copy">You can also use <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer">functools.partial</a>  to bind <code>var</code> in a closure. <code>tkinter.Button(window, textvariable=var, command=partial(counter, var))</code></span>
