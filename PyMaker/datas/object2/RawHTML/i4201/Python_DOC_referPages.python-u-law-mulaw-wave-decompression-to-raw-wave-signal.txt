<div class="post-text" itemprop="text">
<p>I googled this issue for last 2 weeks and wasn't able to find an algorithm or solution. I have some short .wav file but it has MULAW compression and python doesn't seem to have function inside <code>wave.py</code> that can successfully decompresses it. So I've taken upon myself to build a decoder in python.  </p>
<p>I've found some info about MULAW in basic elements:  </p>
<ol>
<li><a href="https://en.wikipedia.org/wiki/%CE%9C-law_algorithm#Algorithm_types" rel="nofollow noreferrer">Wikipedia</a> </li>
<li><a href="http://www.ti.com/lit/an/spra349/spra349.pdf" rel="nofollow noreferrer">A-law u-Law comparison</a> </li>
<li><a href="http://www.jot.fm/issues/issue_2008_11/column2.pdf" rel="nofollow noreferrer">Some c-esc codec library</a> </li>
</ol>
<p>So I need some guidance, since I don't know how to approach getting from signed short integer to a full wave signal. This is my initial thought from what I've gathered so far:  </p>
<hr/>
<p>So from wiki I've got a equation for u-law compression and decompression :  </p>
<p>compression :  <a href="https://i.stack.imgur.com/pWJ6C.png" rel="nofollow noreferrer"><img alt="compression " src="https://i.stack.imgur.com/pWJ6C.png"/></a> </p>
<p>decompression :  <a href="https://i.stack.imgur.com/P3o5p.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/P3o5p.png"/></a> </p>
<p>So judging by compression equation, it looks like the output is limited to a <code>float</code> range of -1 to +1 , and with signed short integer from â€“32,768 to 32,767 so it looks like I would need to convert it from <strong><code>short int</code></strong> to <strong><code>float</code></strong> in specific range.   </p>
<p>Now, to be honest, I've heard of quantisation before, but I am not sure if I should first try and dequantize and then decompress or in the other way, or even if in this case it is the same thing... the tutorials/documentation can be a bit of tricky with terminology. </p>
<p>The wave file I am working with is supposed to contain 'A' sound like for speech synthesis, I could probably verify success by comparing 2 waveforms in some audio software and custom wave analyzer but I would really like to diminish trial and error section of this process. </p>
<p>So what I've had in mind:  </p>
<pre><code>u = 0xff
data_chunk = b'\xe7\xe7' # -6169
data_to_r1 = unpack('h',data_chunk)[0]/0xffff # I suspect this is wrong,
#                                             # but I don't know what else

u_law = ( -1 if data_chunk&lt;0 else 1 )*( pow( 1+u, abs(data_to_r1)) -1 )/u   
</code></pre>
<p>So is there some sort of algorithm or crucial steps I would need to take in form of <strong>first</strong>: <em>decompression</em>, <strong>second</strong>: <em>quantisation</em> : <strong>third</strong> ?<br/>
Since everything I find on google is how to read a <code>.wav</code> PCM-modulated file type, not how to manage it if wild compression arises. </p>
</div>
<div class="post-text" itemprop="text">
<p>So, after scouring the google the solution was found in github ( go figure ). I've searched for many many algorithms and found 1 that is within bounds of error for lossy compression. <strong>Which is for u law for positive values from 30 -&gt; 1 and for negative values from -32 -&gt; -1</strong> </p>
<p>To be honest i think this solution is adequate but not quite per equation per say, but it is best solution for now. This code is transcribed to python directly from <a href="https://github.com/gcc9108/Audio-Compression/blob/ab8958cc24dc8565d493c2753d917225b7703a92/Formula/mulaw.c" rel="nofollow noreferrer">gcc9108 audio codec</a></p>
<pre><code>def uLaw_d(i8bit):
    bias = 33
    sign = pos = 0
    decoded = 0

    i8bit = ~i8bit
    if i8bit&amp;0x80:
        i8bit &amp;= ~(1&lt;&lt;7)
        sign = -1

    pos = ( (i8bit&amp;0xf0) &gt;&gt; 4 ) + 5
    decoded = ((1 &lt;&lt; pos) | ((i8bit &amp; 0x0F) &lt;&lt; (pos - 4)) | (1 &lt;&lt; (pos - 5))) - bias
    return decoded if sign else ~decoded

def uLaw_e(i16bit):
    MAX = 0x1fff
    BIAS = 33
    mask = 0x1000
    sign = lsb = 0
    pos = 12 

    if i16bit &lt; 0:
        i16bit = -i16bit
        sign = 0x80

    i16bit += BIAS

    if ( i16bit&gt;MAX ): i16bit = MAX 

    for x in reversed(range(pos)):
        if i16bit&amp;mask != mask and pos&gt;=5:
            pos = x
            break

    lsb = ( i16bit&gt;&gt;(pos-4) )&amp;0xf
    return ( ~( sign | ( pos&lt;&lt;4 ) | lsb ) )
</code></pre>
<p>With test:  </p>
<pre><code>print( 'normal :\t{0}\t|\t{0:2X}\t:\t{0:016b}'.format(0xff) )
print( 'encoded:\t{0}\t|\t{0:2X}\t:\t{0:016b}'.format(uLaw_e(0xff)) )
print( 'decoded:\t{0}\t|\t{0:2X}\t:\t{0:016b}'.format(uLaw_d(uLaw_e(0xff))) )
</code></pre>
<p>and output:  </p>
<pre><code>normal :    255     |   FF  :   0000000011111111
encoded:    -179    |   -B3 :   -000000010110011
decoded:    263     |   107 :   0000000100000111
</code></pre>
<p>And as you can see 263-255 = 8 which is within bounds. When i tried to implement <code>seeemmmm</code> method described in <a href="https://en.wikipedia.org/wiki/G.711" rel="nofollow noreferrer">G.711</a> ,that kind user Oliver Charlesworth suggested that i look in to , the decoded value for maximum in data was -8036 which is close to the maximum of uLaw spec, but i couldn't reverse engineer decoding function to get binary equivalent of function from wikipedia.  </p>
<p>Lastly, i must say that i am currently disappointed that python library doesn't support all kind of compression algorithms since it is not just a tool that people use, it is also a resource python consumers learn from since most of data for further dive into code isn't readily available or understandable.  </p>
<hr/>
<p><strong>EDIT</strong> </p>
<p>After decoding the data and writing wav file via <code>wave.py</code> i've successfully succeeded to write a new raw linear PCM file. This works... even though i was sceptical at first. </p>
<hr/>
<p><strong><em>EDIT 2:</em></strong> ::&gt; you can find real solution on<a href="https://github.com/coderByNeed/BOB404/blob/master/audio/compressions.py" rel="nofollow noreferrer">compressions.py</a></p>
<hr/>
</div>
<div class="post-text" itemprop="text">
<p>Python actually supports decoding u-Law out of the box:</p>
<blockquote>
<p><code>audioop.ulaw2lin(fragment, width)</code></p>
<p>Convert sound fragments in u-LAW encoding to linearly encoded sound fragments. u-LAW encoding always uses 8 bits samples, so width
  refers only to the sample width of the output fragment here.</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/audioop.html#audioop.ulaw2lin" rel="nofollow noreferrer">https://docs.python.org/3/library/audioop.html#audioop.ulaw2lin</a></p>
</div>
<span class="comment-copy">Take a look at <a href="https://en.wikipedia.org/wiki/G.711" rel="nofollow noreferrer">G.711</a> for a practical example of a codec that's based on this.</span>
<span class="comment-copy">What are lseg, linbuf, logbuf ?</span>
