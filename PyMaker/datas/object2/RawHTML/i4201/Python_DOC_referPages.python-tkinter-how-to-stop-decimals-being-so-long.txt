<div class="post-text" itemprop="text">
<p>I’m creating a calculator right now and when I type in the entry or just even the shell, which uses eval like my calculator, 3-0.1 is not 2.9 like a normal calculator. It gives you very long numbers like 2.8999999999. How to fix this and make it rounded always?</p>
</div>
<div class="post-text" itemprop="text">
<p>You should use string formatting for output of your program:</p>
<p><a href="https://docs.python.org/3.6/library/string.html#format-string-syntax" rel="nofollow noreferrer">https://docs.python.org/3.6/library/string.html#format-string-syntax</a></p>
<p>I.e.</p>
<pre><code>float_result = 3 - 0.1
formatted_to_two_decimal_places = '{:.2f}'.format(float_result)
# or you can do ... = f'{float_result:.2f}' in python 3.6+
print(formatted_to_two_decimal_places)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can round your output using the <code>round()</code> function.</p>
<p>Usage: <code>round(number, no. of decimal places)</code></p>
<p>Eg:</p>
<pre><code>num1 = 1/3
num2 = round(num1, 2)  # num2 would be 0.33

num3 = 2/3
num4 = round(num3, 3)  # num4 would be 0.667
</code></pre>
</div>
<span class="comment-copy">How are you displaying the value? Are you explicitly setting the contents of an <code>Entry</code> or <code>Label</code>? Calling <code>var.set(str(n))</code> on a <code>StringVar</code>? Calling <code>var.set(n)</code> on a <code>DoubleVar</code>? …?</span>
<span class="comment-copy">If you're doing any of the things that explicitly convert to a string, you should use string formatting to specify exactly the format you want to display, as in <a href="https://stackoverflow.com/a/50124092/908494">Bob's answer</a>. If you're using a <code>DoubleVar</code> and letting Tcl/Tk do the formatting for you, it's a bit trickier.</span>
<span class="comment-copy">The reason why these numbers are not quite what you would expect is because of <a href="https://0.30000000000000004.com" rel="nofollow noreferrer">floating point error</a>. If you want to do "more correct" numerical computations, have a look at Python's <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer"><code>decimal</code></a> and <a href="https://docs.python.org/3/library/fractions.html" rel="nofollow noreferrer"><code>fractions</code></a> libraries.</span>
<span class="comment-copy">Why not just <code>format(float_result, '.2f')</code>?</span>
<span class="comment-copy">@abarnert Python used to pride itself on having only one obvious way of doing any particular thing. How many ways are there now of doing string formatting?</span>
<span class="comment-copy">@MarkRansom The <code>format</code> function is the one obvious way to format a single value. That's not the same thing as combine multiple formatted values and static text, so why should it be the same function?</span>
<span class="comment-copy">@MarkRansom Unless you're asking about f-strings vs. <code>str.format</code>. <code>str.format</code> is there for backward compatibility, because nobody thought of a good design back in 2006, but that doesn't make them a good choice for new code; f-strings are the one obvious way to do that.</span>
<span class="comment-copy">does not work:/</span>
<span class="comment-copy">Ahh thank you I’ll see if this works</span>
