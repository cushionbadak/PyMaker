<div class="post-text" itemprop="text">
<p>I'm having a little trouble understanding generators in python. Lets say I have the following simple generator:</p>
<pre><code>def test_gen():
    yield 1
    yield 2
    yield 5
    yield 8
    yield 12
</code></pre>
<p>That will just yield some numbers. Lets say I want to keep printing values from the generator until the value is more than 10. My first attempt was just</p>
<pre><code>gen = test_gen()
for i in gen:
    while i &gt; 10:
        print(i)
</code></pre>
<p>But this just prints <code>1</code> forever. I found that doing</p>
<pre><code>gen = test_gen()
for i in gen:
    if i &gt; 10:
        print(i)
</code></pre>
<p>works as expected because it just iterates through each value in the generator until <code>StopIteration</code> is raised. I then ran into the problem of an infinite generator such as this one that generates prime numbers:</p>
<pre><code>def prime_gen():
    D = dict()
    n = 2
    while True:
        if n not in D:
            yield n
            D[n*n] = [n]
        else:
            for p in D[n]:
                D.setdefault(p + n, []).append(p)
            del D[n]
        n += 1
</code></pre>
<p>Then if I do something like</p>
<pre><code>primes = prime_gen()
for p in primes:
    if p &lt; 100:
        print(p)
</code></pre>
<p>then it will print everything up to p, but then get hung up. I think it's getting hung up because it's trying to check every value that <code>primes</code> generates, which going on forever. What is the correct way to iterate through an infinite generator until a condition is met like this? The only way I have found is doing</p>
<pre><code>primes = prime_gen()
for p in primes:
    if p &lt; 100:
        print(p)
    else:
        break
</code></pre>
<p>but I feel like there's a more pythonic way of doing it.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/itertools.html#itertools.takewhile" rel="noreferrer"><code>itertools.takewhile()</code></a></p>
<pre><code>for i in itertools.takewhile(lambda x: x &lt; 100, primes):
  print i
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>break</code> method is quite Pythonic, but I would consider wrapping the generator:</p>
<pre><code>for p in (i if i &lt; 100 else StopIteration for i in primes):
    print(p)
</code></pre>
</div>
<span class="comment-copy"><code>while i &gt; 10:         print(i)</code> should it work in different way?</span>
<span class="comment-copy"><code>if &lt;something&gt;: do_something() else: break</code> is pretty pythonic and normal.</span>
<span class="comment-copy">Seems like your suggestion is the right answer to me</span>
<span class="comment-copy">never come across this before, it's cool :)</span>
<span class="comment-copy">It seems it's doing the same thing as in my suggestion in my question. Interestingly, <code>itertools.takewhile()</code> is a bit slower than the method in my question when I test it using <code>%timeit</code>. Maybe there isn't a better way.</span>
<span class="comment-copy">It gets hung up if you do it this way since it is still trying to check every value generated.</span>
<span class="comment-copy">@greenthumbtack Oops, try again please</span>
