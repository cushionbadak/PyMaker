<div class="post-text" itemprop="text">
<p>Why doesnt this give back '12'?<br/>
The '+' sign should concatenate two strings, not add them.</p>
<pre><code>def foo(a:str, b:str):
    print(a+b)
foo(1,2)
3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That's not what annotations are for. Annotations are <strong>metadata</strong>, not an instruction to Python to convert data. </p>
<p>From the <a href="https://docs.python.org/3/reference/compound_stmts.html#function-definitions" rel="nofollow noreferrer"><em>Function definitions</em> reference documentation</a>:</p>
<blockquote>
<p>Parameters may have annotations of the form “<code>: expression</code>” following the parameter name. Any parameter may have an annotation even those of the form <code>*identifier</code> or <code>**identifier</code>. Functions may have “return” annotation of the form “<code>-&gt; expression</code>” after the parameter list. These annotations can be any valid Python expression and are evaluated when the function definition is executed. Annotations may be evaluated in a different order than they appear in the source code. <strong>The presence of annotations does not change the semantics of a function.</strong></p>
</blockquote>
<p>(Bold emphisis mine).</p>
<p>For example, the <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">Python type hinting framework</a> uses annotations to attach type information to functions for static analysis, validating that code actually passes in the types that are expected to be passed in.</p>
<p>Just convert your values explicitly; in the call:</p>
<pre><code>foo(str(1), str(2))
</code></pre>
<p>or in the function itself:</p>
<pre><code>def foo(a, b):
    print(str(a) + str(b))
</code></pre>
<p>or in a decorator:</p>
<pre><code>import functools
import inspect

def typeconversion(f):
    """Converts arguments with a callable attached in the parameter annotation"""
    sig = inspect.signature(f)

    @functools.wraps(f)
    def wrapper(*args, **kwargs):
        # convert any argument (including defaults), for which there is a
        # callable annotation
        bound = sig.bind(*args, **kwargs)
        bound.apply_defaults()
        args = bound.arguments
        for param in sig.parameters.values():
            if param.annotation is not param.empty and callable(param.annotation):
                args[param.name] = param.annotation(args[param.name])

        # call the function with the converted arguments
        result = f(*bound.args, **bound.kwargs)

        # convert the return value
        if sig.return_annotation is not sig.empty and callable(sig.return_annotation):
            result = sig.return_annotation(result)

        return result
    return wrapper
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; @typeconversion
... def foo(a: str, b: str) -&gt; int:
...     return a + b
...
&gt;&gt;&gt; foo(42, 101)
42101
</code></pre>
</div>
<span class="comment-copy">What's a <code>dtype</code> here?</span>
<span class="comment-copy">I thought it's declaring the type to 'str', but it's only metadata it seems.</span>
<span class="comment-copy">Even if it were a type <i>decleration</i> (which python doesn't have), wouldn't you have expected it to error since you passed <code>int</code> objects?</span>
<span class="comment-copy"><code>dtype</code> in Python usually means the data type of the elements of a, numpy array or similar collection. It doesn't mean "static type annotation" or anything like that.</span>
