<div class="post-text" itemprop="text">
<p>In standalone <code>pytest</code> test cases I would like to use assertions like <code>unittest.TestCase.assertNotIn</code> (and <a href="https://docs.python.org/3/library/unittest.html#assert-methods" rel="nofollow noreferrer"><code>unittest</code>s other asserts</a>) without any dependency on the <code>uniittest</code> module. Is best practice to use libraries like <a href="https://github.com/srittau/python-asserts" rel="nofollow noreferrer">python-assert</a>?</p>
</div>
<div class="post-text" itemprop="text">
<p>The best practice is using the language <code>assert</code> statement, which yields the <code>unittest</code>'s <code>assert*</code> methods unnecessary. Compare</p>
<pre><code>self.assertNotIn(a, b, 'element a is not found in sequence b')
</code></pre>
<p>with</p>
<pre><code>assert a not in b, 'element a is not found in sequence b'
</code></pre>
<p>The latter is much more pythonic. It is also one of the key features that <code>pytest</code> names in the <a href="https://docs.pytest.org/en/latest/index.html" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>Detailed info on failing assert statements (no need to remember <code>self.assert*</code> names)</p>
</blockquote>
<p>Should you be missing any <code>unittest</code> methods, <code>pytest</code> aims to provide replacements for them: </p>
<pre><code>with self.assertRaises(Exception):
    spam()
</code></pre>
<p>becomes </p>
<pre><code>with pytest.raises(Exception):
    spam()
</code></pre>
<p>,</p>
<pre><code>self.assertAlmostEqual(a, b)
</code></pre>
<p>becomes </p>
<pre><code>assert a == pytest.approx(b)
</code></pre>
<p>etc.</p>
</div>
<span class="comment-copy">In what way dependency on an external library (python-assert) is better that dependency on a stdlib module (unittest)?</span>
<span class="comment-copy">Some pytest features which I want to use are not compatible with unittest.</span>
