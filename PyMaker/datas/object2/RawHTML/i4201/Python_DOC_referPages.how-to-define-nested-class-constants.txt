<div class="post-text" itemprop="text">
<p>I have these constants defined in <code>constants.py</code></p>
<pre><code>PERMISSION_USER_ADD = 'add_user'
PERMISSION_USER_VIEW = 'view_user'
PERMISSION_USER_EDIT = 'edit_user'
PERMISSION_TOOL_ADD = 'add_tool'
PERMISSION_TOOL_VIEW = 'view_tool'
PERMISSION_TOOL_EDIT = 'edit_tool'
</code></pre>
<p>But I do not want to have to type these full constant names out every time I need to add another one.  </p>
<p>Coming from Java I could do this.</p>
<pre><code>class Permission {
    class User {
        const ADD = 'add_user';
        const VIEW = 'view_user';
        const EDIT = 'edit_user';
    }
    class Tool {
        const ADD = 'add_tool';
        const VIEW = 'view_tool';
        const EDIT = 'edit_tool';
    }
}
</code></pre>
<p>But all python linters flag this as bad coding practice and searching for the python way to do it hasn't been fruitful so far.</p>
<p>So my question is: What's the pythonic way to define nested constants, in a way that supports easy refactoring?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/argparse.html#the-namespace-object" rel="nofollow noreferrer"><code>argparse.Namespace</code></a> which let's you access the members just as for your class example:</p>
<pre><code>&gt;&gt;&gt; permissions = Namespace(
...     user=Namespace(add='add_user', etc),
...     etc
... )
</code></pre>
<p>And then:</p>
<pre><code>&gt;&gt;&gt; permissions.user.add
'add_user' 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A dictionary is probably the easiest way to go.</p>
<pre><code>class Permission(object):
    user = {
        'add': 'add_user',
        'view': 'view_user',
        'edit': 'edit_user',
    }
    tool = {
        'add' : 'add_tool',
        'view' : 'view_tool',
        'edit' : 'edit_tool',
    }

print(Permission.user['view'])
print(Permission.tool['view'])
</code></pre>
<p>output:</p>
<pre><code>view_user
view_tool
</code></pre>
</div>
<span class="comment-copy">A simple dictionary won't cut it?</span>
<span class="comment-copy">Wouldn't you still have to do <code>Permission.User.ADD</code>? I don't see how you're saving any time.  If you're that worried about it, either give the constants shorter names or configure your editor to autocomplete.</span>
<span class="comment-copy">@palivek a dictionary would work but then I would have to use <code>['user']['add']</code> to access the values. Not sure if that's the best way</span>
<span class="comment-copy">@PatrickHaugh if I was adding a new permission, I would have to duplicate edit/type it out, whereas with nesting I could just add it in one place. I also lose the ability to nicely iterate over permissions. Then again this could just be my bias showing.</span>
