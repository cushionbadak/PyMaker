<div class="post-text" itemprop="text">
<p>I am trying to make a program in python that will take notes on a passage that I input. It will sort out the first and last sentence of the paragraph and the sentences with dates and numbers. It would then replace some words with synonyms, and get rid of useless adjectives. I am know the generic stuff with python, but I am new to nltk and WordNet. I've started a prototype program that will replace words in a sentence with all the random synonyms, however I keep getting an error that says there is something wrong with WordNet. I think I installed it right, but I might be wrong. Here is my code:</p>
<pre><code>import random
import sys
from nltk.corpus import wordnet

print('Enter your passage')
Passage = sys.stdin.readline()
PassageList = Passage.split(' ')
wordCounter = 0
syns = []

def maxInt(list):
    i = 0
    for x in list:
    i += 1
return i



for x in PassageList:
    syns = wordnet.synsets(PassageList[wordCounter])
    synLength = maxInt(syns)
    PassageList[wordCounter] == syns[0]
    print(PassageList[wordCounter])
    wordCounter += 1
</code></pre>
<p>Here is the error I keep getting:</p>
<pre><code>Traceback (most recent call last):
  File "C:\Users\shoob\Documents\Programs\Python\Programs\NoteTake.py",   line 22, in &lt;module&gt;
    PassageList[wordCounter] == syns[0]
  File "C:\Users\shoob\AppData\Local\Programs\Python\Python36-32\lib\site-packages\nltk\corpus\reader\wordnet.py", line 198, in __eq__
    return self._name == other._name
   AttributeError: 'str' object has no attribute '_name'
</code></pre>
<p>If you can help in anyway it would help me out a lot. :-D</p>
</div>
<div class="post-text" itemprop="text">
<h1>In Longer</h1>
<p>The other answer was more on the NLP side of things but here's a walkthrough on your code in the OP and see what's happening.</p>
<h1>Python Conventions</h1>
<p>Firstly, some conventions of Python code. Usually CamelCase variable names are not actual variables but class objects, so avoid using variables such as <code>Passage</code>.</p>
<p>Also, using better variable names help, instead of <code>PassageList</code>, you can call them words. </p>
<p>E.g.</p>
<pre><code>import random
import sys
from nltk.corpus import wordnet

print('Enter your passage')
passage = sys.stdin.readline()

# The passage.split() is aka word tokenization
# note you've skipped sentence tokenization, 
# so it doesn't fit the goal of getting first and last sentence 
# that you've described in the OP
words = passage.split(' ') 
</code></pre>
<h1>Collections is your friend</h1>
<p>Next, there are counter objects in native Python that you can make use of and that'll help you with some optimization and more readable code. E.g.</p>
<pre><code>from collections import Counter
word_counter = Counter()
</code></pre>
<p>Take a look at <a href="https://docs.python.org/3/library/collections.html" rel="nofollow noreferrer">https://docs.python.org/3/library/collections.html</a> </p>
<h1>Synsets are not Synonyms</h1>
<p>As explained in the other answer, WordNet is indexed by meanings (aka synsets) and they are not synonyms. To get the synonyms, you can use the <code>Synset.lemma_names()</code> function. But they are really limited and you would have to go through the process of WSD before knowing the lemma_names of which synset to choose from any ambiguous word.</p>
<p>Also, <code>explicit is better than implicit</code>, using humanly-understandable variable names helps a lot in understanding and improving the code, so instead of <code>syn = []</code>, use <code>synonyms = []</code>. </p>
<p>Otherwise, it's really unclear what <code>syn</code> is storing.</p>
<h1>Functions shouldn't be abused</h1>
<p>Disregarding the wrong indentation, it's unclear what function is trying to achieve here. You are simply adding 1 to each item in a list, which essentially is the length function, so you could simply use <code>len(x)</code>.</p>
<pre><code>def maxInt(list):
    i = 0
    for x in list:
        i += 1
    return i

x = [1,2,3,4,5]
maxInt(x) == len(x)
</code></pre>
<h1>To access an item from a list sequentially, simply loop</h1>
<p>Moving on, we see that you're looping through each word in the list of words of the passage in a strange way.</p>
<p>Simplifying your OP, </p>
<pre><code>Passage = sys.stdin.readline()
PassageList = Passage.split(' ')
wordCounter = 0

for x in PassageList:
    syns = wordnet.synsets(PassageList[wordCounter])
</code></pre>
<p>You could have easily done:</p>
<pre><code>from nltk.corpus import wordnet as wn

passage =sys.stdin.readline()
words = passage.split(' ')
for word in words:
    synsets_per_word = wn.synsets(word)
</code></pre>
<h1>Simply use len()</h1>
<p>To check the no. of synsets for the given word, instead of</p>
<pre><code>synLength = maxInt(syns)
</code></pre>
<p>you could just do:</p>
<pre><code>from nltk.corpus import wordnet as wn

passage =sys.stdin.readline()
words = passage.split(' ')
for word in words:
    synsets_per_word = wn.synsets(word)
    num_synsets_per_word = len(synsets_per_word)
</code></pre>
<h1>Now to the troubling line</h1>
<p>The line:</p>
<pre><code>PassageList[wordCounter] == syns[0]
</code></pre>
<p>Given the proper variable naming convention, we have:</p>
<pre><code>word == synsets_per_word[0]
</code></pre>
<p>Now that's the confusing part, the left hand side is <code>word</code> which is of <code>str</code> type. And you are trying to compare it to <code>synsets_per_word[0]</code> which is of <code>nltk.corpus.wordnet.Synset</code> type. </p>
<h1>Donc Voila</h1>
<p>Thus when comparing the two variables with different type, the <code>AttributeError</code> pops up...</p>
<p>The bigger question is what are you trying to achieve here? My assumption is that you're thinking the synset is a <code>str</code> object but as explained about it's a <code>Synset</code> object and not a string and even if you get the <code>lemma_names</code> from the <code>Synset</code> it's a list of strings and not a <code>str</code> that can be compared for equivalence with a <code>str</code>.</p>
<h1>So how you fix the problem</h1>
<p>First read up on NLP, Python and what the WordNet API can do in NLTK. </p>
<p>Then redefine the task since you're not going to get a lot of help from WordNet with ambiguous words. </p>
</div>
<div class="post-text" itemprop="text">
<h1>In Short</h1>
<p>Your project is a little overly ambitious. </p>
<p>Also, try to ask more specific questions on Stackoverflow. Focus on a finding out what is wrong and explain what help you would require. That'll help people to help you better. </p>
<h1>In Long</h1>
<p>Let's try and break down your requirements:</p>
<blockquote>
<p>I am trying to make a program in python that will take notes on a passage that I input. </p>
</blockquote>
<p>Not sure what that really means...</p>
<blockquote>
<p>It will sort out the first and last sentence of the paragraph ...</p>
</blockquote>
<p>The original code in the original post (OP) doesn't have any checks on the dates/numbers. </p>
<p>First, you need to define <strong>what is a sentence?</strong></p>
<ul>
<li>What counts as sentence boundary?</li>
<li>How are you going to detect sentences from a paragraph.</li>
</ul>
<p>Perhaps, <code>nltk.sent_tokenize</code> would help:</p>
<pre><code>from nltk import sent_tokenize

text = """Gwaha-ju (과하주; 過夏酒; literally "summer-passing wine") is a traditional Korean fortified rice wine. The refined rice wine cheongju (also called yakju) is fortified by adding the distilled spirit soju to produce gwaha-ju. Gwaha-baekju was first mentioned in Sanga Yorok, a mid-15th century cookbook, but the rice wine was made without fortification. The earliest recorded recipe for fortified gangha-ju appears in Eumsik dimibang, a 1670 cookbook.  Other Joseon books that mention the fortified rice wine include Jubangmun, Chisaeng yoram, Yeokjubangmun, Eumsikbo, Sallim gyeongje, Jeungbo sallim gyeongje, Gyuhap chongseo, and Imwon gyeongjeji."""

sent_tokenize(text)
</code></pre>
<blockquote>
<p>... and the sentences with dates and numbers. </p>
</blockquote>
<p>Hmmm.. that's how about checking for digits in the string of each sentence:</p>
<pre><code>from nltk import sent_tokenize

text = """Gwaha-ju (과하주; 過夏酒; literally "summer-passing wine") is a traditional Korean fortified rice wine. The refined rice wine cheongju (also called yakju) is fortified by adding the distilled spirit soju to produce gwaha-ju. Gwaha-baekju was first mentioned in Sanga Yorok, a mid-15th century cookbook, but the rice wine was made without fortification. The earliest recorded recipe for fortified gangha-ju appears in Eumsik dimibang, a 1670 cookbook.  Other Joseon books that mention the fortified rice wine include Jubangmun, Chisaeng yoram, Yeokjubangmun, Eumsikbo, Sallim gyeongje, Jeungbo sallim gyeongje, Gyuhap chongseo, and Imwon gyeongjeji."""

for sent in sent_tokenize(text):
    if any(ch for ch in sent if ch.isdigit()):
        print(sent)
</code></pre>
<blockquote>
<p>It would then replace some words ... </p>
</blockquote>
<p>Then you have to define <strong>what is a word?</strong></p>
<ul>
<li>How do you define word boundary? </li>
<li>It won't be the same for different languages</li>
</ul>
<p>Maybe with <code>nltk.word_tokenize</code>, e.g.</p>
<pre><code>from nltk import sent_tokenize, word_tokenize

text = """Gwaha-ju (과하주; 過夏酒; literally "summer-passing wine") is a traditional Korean fortified rice wine. The refined rice wine cheongju (also called yakju) is fortified by adding the distilled spirit soju to produce gwaha-ju. Gwaha-baekju was first mentioned in Sanga Yorok, a mid-15th century cookbook, but the rice wine was made without fortification. The earliest recorded recipe for fortified gangha-ju appears in Eumsik dimibang, a 1670 cookbook.  Other Joseon books that mention the fortified rice wine include Jubangmun, Chisaeng yoram, Yeokjubangmun, Eumsikbo, Sallim gyeongje, Jeungbo sallim gyeongje, Gyuhap chongseo, and Imwon gyeongjeji."""

for sent in sent_tokenize(text):
    if any(ch for ch in sent if ch.isdigit()):
        print(word_tokenize(sent))
</code></pre>
<blockquote>
<p>It would then replace some words with synonyms, </p>
</blockquote>
<p>Not sure which word you would like to replace with synonyms and which synonyms you're going to choose from. But do note that WordNet is not a exactly a good thesaurus.</p>
<p>Each word comes with different meanings and only meanings are linked in WordNet not words, see <a href="https://stackoverflow.com/a/19383914/610569">https://stackoverflow.com/a/19383914/610569</a></p>
<p>E.g. given the word "wine":</p>
<pre><code>from nltk.corpus import wordnet as wn

for synset in wn.synsets('wine'): # each meaning for the word, aka. synset
    print(synset)
    print('Words with same meaning:', synset.lemma_names(), '\n')
</code></pre>
<p><strong>How do you know which synset/meaning to use?</strong></p>
<p>That's is an open question. It's also known as the <a href="https://en.wikipedia.org/wiki/Word-sense_disambiguation" rel="nofollow noreferrer">Word Sense Disambiguation (WSD) task</a>. </p>
<p>If you just flatten and use the lemma names of all synset, the "synonyms" or replacement you want to make won't make sense. E.g. </p>
<pre><code>from itertools import chain

from nltk.corpus import wordnet as wn
from nltk import sent_tokenize, word_tokenize

text = """Gwaha-ju (과하주; 過夏酒; literally "summer-passing wine") is a traditional Korean fortified rice wine. The refined rice wine cheongju (also called yakju) is fortified by adding the distilled spirit soju to produce gwaha-ju. Gwaha-baekju was first mentioned in Sanga Yorok, a mid-15th century cookbook, but the rice wine was made without fortification. The earliest recorded recipe for fortified gangha-ju appears in Eumsik dimibang, a 1670 cookbook.  Other Joseon books that mention the fortified rice wine include Jubangmun, Chisaeng yoram, Yeokjubangmun, Eumsikbo, Sallim gyeongje, Jeungbo sallim gyeongje, Gyuhap chongseo, and Imwon gyeongjeji."""

for sent in sent_tokenize(text):
    if any(ch for ch in sent if ch.isdigit()):
        for word in word_tokenize(sent):
            lemma_names = set(chain(*[synset.lemma_names() for synset in wn.synsets(word)]))
            # If you just flatten and use the lemma names of all synset, 
            # the "synonyms" or replacement you want to make won't make sense.
            print(word, '\t', lemma_names)
</code></pre>
<blockquote>
<p>... and get rid of useless adjectives. </p>
</blockquote>
<p>Hmmm, that'll require yet another piece of NLP process call POS tagging and it's not perfect.</p>
<p>Perhaps you can try <code>nltk.pos_tag</code> but don't expect too much of it (in terms of accuracy), e.g.</p>
<pre><code>from itertools import chain

from nltk.corpus import wordnet as wn
from nltk import sent_tokenize, word_tokenize, pos_tag

text = """Gwaha-ju (과하주; 過夏酒; literally "summer-passing wine") is a traditional Korean fortified rice wine. The refined rice wine cheongju (also called yakju) is fortified by adding the distilled spirit soju to produce gwaha-ju. Gwaha-baekju was first mentioned in Sanga Yorok, a mid-15th century cookbook, but the rice wine was made without fortification. The earliest recorded recipe for fortified gangha-ju appears in Eumsik dimibang, a 1670 cookbook.  Other Joseon books that mention the fortified rice wine include Jubangmun, Chisaeng yoram, Yeokjubangmun, Eumsikbo, Sallim gyeongje, Jeungbo sallim gyeongje, Gyuhap chongseo, and Imwon gyeongjeji."""

for sent in sent_tokenize(text):
    if any(ch for ch in sent if ch.isdigit()):

        for word, tag in pos_tag(word_tokenize(sent)):
            if not tag.startswith('JJ'): # JJ* refers to adjective.
                print(word)
        print('-----')
</code></pre>
<blockquote>
<p>I am know the generic stuff with python, but I am new to nltk and WordNet. I've started a prototype program that will replace words in a sentence with all the random synonyms, </p>
</blockquote>
<p>Keep it up! Don't be discouraged and I think starting with the goal of building an application may not be the right place to start with NLP, try instead:</p>
<ul>
<li><a href="https://web.stanford.edu/~jurafsky/slp3/" rel="nofollow noreferrer">https://web.stanford.edu/~jurafsky/slp3/</a></li>
<li><a href="http://www.nltk.org/book/" rel="nofollow noreferrer">http://www.nltk.org/book/</a></li>
<li><a href="https://arxiv.org/abs/1510.00726" rel="nofollow noreferrer">https://arxiv.org/abs/1510.00726</a></li>
</ul>
<blockquote>
<p>however I keep getting an error that says there is something wrong with WordNet. I think I installed it right, but I might be wrong.</p>
</blockquote>
<p>Yes, there's nothing wrong with the installation. </p>
<p>Perhaps going through the WordNet API in NLTK would help you to understand how and what WordNet can do: <a href="http://www.nltk.org/howto/wordnet.html" rel="nofollow noreferrer">http://www.nltk.org/howto/wordnet.html</a> </p>
<p>Also, improving basic Python and understanding why the <code>AttributeError</code> is occurring would help a lot =)</p>
</div>
<span class="comment-copy">There is a lot wrong with that Python code, so it is hard to tell where the error might lie. What you want to do is quite ambitious, so I'd recommend spending more time learning Python first. It will be a good investment of time.  But if you want to persevere troubleshooting this specific error, add some print lines to show exactly what is in <code>syns</code> each time.  You might also get a better answer if you make your code fully reproducible (<a href="https://stackoverflow.com/help/mcve">stackoverflow.com/help/mcve</a>): so hard-code some test data in <code>PassageList</code>, rather than getting it from stdin.</span>
<span class="comment-copy">That is a very generous (two) answers Alvas.</span>
<span class="comment-copy">Hope it helped the questioner =)</span>
