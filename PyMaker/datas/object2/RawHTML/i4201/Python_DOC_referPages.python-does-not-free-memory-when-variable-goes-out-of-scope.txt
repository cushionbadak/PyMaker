<div class="post-text" itemprop="text">
<p>When I initialize a Numpy array inside a function, Python does not free the memory after the function returns as shown in the code example below. Is there any way I can free this memory? Using gc.collect() did not work and the same problem also occurs in Python2 and Python3.</p>
<pre><code>import numpy as np
import resource

def function():
    x = np.random.random([10000, 10000])

print('Memory usage: %s (kb)'% resource.getrusage(resource.RUSAGE_SELF).ru_maxrss)

function()

print('Memory usage: %s (kb)'% resource.getrusage(resource.RUSAGE_SELF).ru_maxrss)
</code></pre>
<p>Code output:<br/>
Memory usage: 20560 (kb)<br/>
Memory usage: 801832 (kb)</p>
</div>
<div class="post-text" itemprop="text">
<p>Python is actually freeing the memory as soon as the function is done. The problem here is that the value you're printing out, <a href="https://docs.python.org/3/library/resource.html#resource-usage" rel="nofollow noreferrer"><code>resource.getrusage(resource.RUSAGE_SELF).ru_maxrss</code></a>, tells you the peak or <em>max</em> memory usage. </p>
<p>To get the <em>current</em> memory usage, you might try the <a href="https://pypi.org/project/psutil/" rel="nofollow noreferrer"><code>psutil</code></a> package (<code>$ pip install psutil</code>). It's a cross platform utility for giving you info like the current memory usage.</p>
<p>Try this modified snippet:</p>
<pre><code>import numpy as np
import resource
import os
import psutil

process = psutil.Process(os.getpid())

def my_function():
    print('### Starting function ###')
    print('Max  Memory usage: %s (KB)' % resource.getrusage(resource.RUSAGE_SELF).ru_maxrss)
    print('Curr Memory usage: %s (KB)' % (process.memory_info().rss / 1024))
    print('doing stuff...')
    x = np.random.random([10000, 10000])
    print('Max  Memory usage: %s (KB)' % resource.getrusage(resource.RUSAGE_SELF).ru_maxrss)
    print('Curr Memory usage: %s (KB)' % (process.memory_info().rss / 1024))
    print('#### Ending function ####')

print('Max  Memory usage: %s (KB)'% resource.getrusage(resource.RUSAGE_SELF).ru_maxrss)
print('Curr Memory usage: %s (KB)'% (process.memory_info().rss/ 1024))

my_function()

print('Max  Memory usage: %s (KB)'% resource.getrusage(resource.RUSAGE_SELF).ru_maxrss)
print('Curr Memory usage: %s (KB)'% (process.memory_info().rss / 1024))
</code></pre>
<p>On my machine, here's the output:</p>
<pre><code>Max  Memory usage: 714588 (KB)
Curr Memory usage: 26884.0 (KB)
### Starting function ###
Max  Memory usage: 714588 (KB)
Curr Memory usage: 26884.0 (KB)
doing stuff...
Max  Memory usage: 808380 (KB)
Curr Memory usage: 808380.0 (KB)
#### Ending function ####
Max  Memory usage: 808380 (KB)
Curr Memory usage: 27132.0 (KB)
</code></pre>
<p>By the time we get to the first memory check, it's down to 26 MB, but it's already been as high as 714 MB at some point while starting up or importing libraries.</p>
<p>At the start of the function it's the same, but by the end of our function, we've hit a new high with help from numpy. At this point the current usage is the new max, so both values match.</p>
<p>After we leave the function, our current usage drops back down to roughly where it was before we entered the function.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python can choose not to release garbage collected memory to the OS. It may keep the already allocated memory for future use. It does not mean there is a memory leak.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/1316767/how-can-i-explicitly-free-memory-in-python">How can I explicitly free memory in Python?</a></span>
<span class="comment-copy">Do you need to use the numpy array after the function at all?</span>
<span class="comment-copy">I know there are duplicates somewhere. For now, read the following: <a href="http://effbot.org/pyfaq/why-doesnt-python-release-the-memory-when-i-delete-a-large-object.htm" rel="nofollow noreferrer">effbot.org/pyfaq/â€¦</a></span>
<span class="comment-copy">Also note <code>gc</code> would be totally irrelevant here, there aren't any reference cycles, thus the memory is being managed by simple reference counting (in CPython, of course)</span>
