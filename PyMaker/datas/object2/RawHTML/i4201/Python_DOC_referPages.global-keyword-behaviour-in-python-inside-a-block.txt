<div class="post-text" itemprop="text">
<p><strong>Case 1</strong></p>
<pre><code>x = 0
def set_x(n):
    global x
    if n%2==0:
        x=n
    else:
        x = -1

set_x(10)
print(x)
</code></pre>
<p>Expected Output: <code>10</code>
Actual Output: <code>10</code></p>
<p>This output is the very expected, and that is how <code>global</code> keyword behaves. </p>
<p><strong>Case 2</strong></p>
<pre><code>x = 0
def set_x(n):
    if n%2==0:
        global x
        x=n
    else:
        x = -1

set_x(10)
print(x)
</code></pre>
<p>Expected Output: <code>0</code>
Actual Output: <code>10</code></p>
<p>If my understanding of <code>global</code> is correct, how the <code>global</code> keyword for <code>global x</code> in if block affected the local keyword <code>x</code> in the else block. I believe those are two different blocks. </p>
<p>Is there an explanation for this behaviour.</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><blockquote>
<p>The <code>global</code> statement is a declaration which holds for the entire current code block. </p>
</blockquote>
<p><code>if</code> does not introduce a new <em>code block</em>.</p>
<blockquote>
<p>A <em>block</em> is a piece of Python program text that is executed as a unit. The following are blocks: a module, a function body, and a class definition.</p>
</blockquote></li>
<li><blockquote>
<p><code>global</code> is a directive to the parser.</p>
</blockquote>
<p><code>if</code> is being evaluated at runtime, but <code>global</code> is picked up by the parser. The parser doesn't care about and cannot evaluate <code>if</code> statements.</p></li>
</ol>
<p><sub>Excerpts from <a href="https://docs.python.org/3/reference/simple_stmts.html#the-global-statement" rel="nofollow noreferrer">https://docs.python.org/3/reference/simple_stmts.html#the-global-statement</a> and <a href="https://docs.python.org/3/reference/executionmodel.html" rel="nofollow noreferrer">https://docs.python.org/3/reference/executionmodel.html</a>.</sub></p>
<p>In other words, any <code>global</code> statement anywhere within a function definition always applies throughout the entire function.</p>
</div>
<span class="comment-copy">You have already explained the behavior. <code>if</code> statements don't have their own namespace.</span>
<span class="comment-copy">@BurhanKhalid Can you please elaborate?</span>
<span class="comment-copy">Why do you expect <code>0</code> here when <code>10%2 == 0</code> is true?  <code>x</code> is updated to <code>n</code>.</span>
<span class="comment-copy">@theausome It is just for a demo. I have different use case in here.</span>
