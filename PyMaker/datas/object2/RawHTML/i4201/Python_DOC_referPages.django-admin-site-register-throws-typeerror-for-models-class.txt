<div class="post-text" itemprop="text">
<p>This is a follow-on question to <a href="https://stackoverflow.com/questions/45232541/import-and-register-all-classes-from-models-in-admin-django">this</a> question.</p>
<p>I would like to automate the import of classes from a django <code>models.py</code> file and then register each with <code>admin.site.register()</code>.  Here is my code:</p>
<pre><code>from django.contrib import admin
import inspect
from . import models 

for name, obj in inspect.getmembers(models):
    if inspect.isclass(obj):
        admin.site.register(obj)
</code></pre>
<p>This code throws a <code>TypeError: 'type' object is not iterable</code>.  </p>
<p>The OP marked this question as answered and I've found several other examples where this code is presented.  I've also reviewed the documentation <a href="https://docs.python.org/3/library/inspect.html" rel="nofollow noreferrer">here</a> and didn't see anything that would indicate that this is wrong.</p>
<h1>Full Traceback:</h1>
<pre><code>Bills-MacBook-Pro:Pro billarmstrong$ python manage.py runserver/anaconda3/lib/python3.6/site-packages/django/db/models/base.py:309:RuntimeWarning: Model 'ProWP.p_item' was already registered. Reloading models is not advised as it can lead to inconsistencies, most notably with related models.  new_class._meta.apps.register_model(new_class._meta.app_label, new_class)/anaconda3/lib/python3.6/site-packages/django/db/models/base.py:309:RuntimeWarning: Model 'ProWP.p_item' was already registered. Reloading models is not advised as it can lead to inconsistencies, most notably with related models.
  new_class._meta.apps.register_model(new_class._meta.app_label, new_class)
Unhandled exception in thread started by &lt;function check_errors.&lt;locals&gt;.wrapper at 0x108f1dea0&gt;
Traceback (most recent call last):
  File "/anaconda3/lib/python3.6/site-packages/django/utils/autoreload.py", line 225, in wrapper
    fn(*args, **kwargs)
  File "/anaconda3/lib/python3.6/site-packages/django/core/management/commands/runserver.py", line 112, in inner_run
    autoreload.raise_last_exception()
  File "/anaconda3/lib/python3.6/site-packages/django/utils/autoreload.py", line 248, in raise_last_exception
    raise _exception[1]
  File "/anaconda3/lib/python3.6/site-packages/django/core/management/__init__.py", line 327, in execute
    autoreload.check_errors(django.setup)()
  File "/anaconda3/lib/python3.6/site-packages/django/utils/autoreload.py", line 225, in wrapper
    fn(*args, **kwargs)
  File "/anaconda3/lib/python3.6/site-packages/django/__init__.py", line 24, in setup
    apps.populate(settings.INSTALLED_APPS)
  File "/anaconda3/lib/python3.6/site-packages/django/apps/registry.py", line 120, in populate
    app_config.ready()
  File "/anaconda3/lib/python3.6/site-packages/django/contrib/admin/apps.py", line 23, in ready
    self.module.autodiscover()
  File "/anaconda3/lib/python3.6/site-packages/django/contrib/admin/__init__.py", line 26, in autodiscover
    autodiscover_modules('admin', register_to=site)
  File "/anaconda3/lib/python3.6/site-packages/django/utils/module_loading.py", line 47, in autodiscover_modules
    import_module('%s.%s' % (app_config.name, module_to_search))
  File "/anaconda3/lib/python3.6/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "&lt;frozen importlib._bootstrap&gt;", line 994, in _gcd_import
  File "&lt;frozen importlib._bootstrap&gt;", line 971, in _find_and_load
  File "&lt;frozen importlib._bootstrap&gt;", line 955, in _find_and_load_unlocked
  File "&lt;frozen importlib._bootstrap&gt;", line 665, in _load_unlocked
  File "&lt;frozen importlib._bootstrap_external&gt;", line 678, in exec_module
  File "&lt;frozen importlib._bootstrap&gt;", line 219, in _call_with_frames_removed
  File "/Users/billarmstrong/Documents/GitHub/Core/WebDataCollect/Pro/ProWP/admin.py", line 7, in &lt;module&gt;
    admin.site.register(obj)
  File "/anaconda3/lib/python3.6/site-packages/django/contrib/admin/sites.py", line 102, in register
    for model in model_or_iterable:
TypeError: 'type' object is not iterable
</code></pre>
<p>After <code>runserver</code> a second time there is a new warning - but that wasn't part of the original error.  I included everything for reference.  The <code>p_item</code> is a class object in <code>models.py</code></p>
<h1>Final Edit</h1>
<p>The warning noted above was a result of a sloppy cut/paste that duplicated a class.  It is irrelevant to the original question or the answer below.</p>
</div>
<div class="post-text" itemprop="text">
<p>At a guess, there are not only <code>django.db.models.Model</code> classes imported. Probably, your local <code>models</code> module contains a few more items, including other classes (which makes the <code>if inspect.isclass</code> pass). You may want to perform an additional <code>issubclass(obj, django.models.Model)</code> or similar check.</p>
<p>The fact that it works in the linked question, suggests you have additional code in your local <code>models.py</code> module, possibly through from imports (making it hard to notice). But an additional check to see that <code>obj</code> is an actual Django model (as mentioned above), is probably safer than trying to remove that extra code.</p>
<p>All in all, try the following (untested):</p>
<pre><code>from django.contrib import admin
from django.db.models import Model
import inspect
from . import models 

for name, obj in inspect.getmembers(models):
    if inspect.isclass(obj) and issubclass(obj, Model):
        admin.site.register(obj)
</code></pre>
</div>
<span class="comment-copy">Here is the reference that throws the error:    <code>File "/anaconda3/lib/python3.6/site-packages/django/contrib/admin/sites.py", line 102, in register     for model in model_or_iterable: TypeError: 'type' object is not iterable</code></span>
<span class="comment-copy">@Evert, thanks - fixed the title.</span>
<span class="comment-copy">Mind if I impress (even if pedantic) the value of a good traceback, and taking note of the actual offending code? Because that made answering and resolving this issue much more obvious than for the initial version of this question.</span>
<span class="comment-copy">This worked...  But I'm confused as to why.  The <code>models.py</code> module has four Class objects that all inherit from <code>models.Model</code>.  This should cause <code>inpsect.isclass(obj)</code> to be TRUE.  There is only one other complexity which must cause the <code>.isclass</code> to be True but still throw the type error.  Specifically, I've used several decorators from the Class property (<code>@property</code>) which must be true for <code>.isclass(obj)</code>, but is not iterable.  I take it from the code above that it is a class, but is not a subclass of Model and therefore not part of the admin structure.  Is that correct?</span>
<span class="comment-copy">Debug: print out your <code>obj</code> as you iterate through them. If you remove the <code>issubclass</code> test, it should print the offending object just before the crash.</span>
<span class="comment-copy">The offending object is <code>&lt;class 'django.core.validators.RegexValidator'&gt;</code>.  Which I now see is in reference to a one of the model class attributes.  I now see that the <code>.getmembers()</code> will retrieve all classes in the module regardless of where they are and that the <code>.issubclass()</code> will filter out only the Model members.  Thanks.</span>
