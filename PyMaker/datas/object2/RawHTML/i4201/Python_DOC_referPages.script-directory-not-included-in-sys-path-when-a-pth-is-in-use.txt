<div class="post-text" itemprop="text">
<p>I am attempting to solve a weird issue related to importing modules in a Python script I have written. The file that implements the module is in the same directory as the main Python script.</p>
<p>The Python script works perfectly when I use ActivePython. However, when I use the <a href="https://www.python.org/ftp/python/3.6.5/python-3.6.5-embed-amd64.zip" rel="nofollow noreferrer">Embedded Distribution</a> I get the following error.</p>
<pre><code>ModuleNotFoundError: No module named 'pyWhich'
</code></pre>
<p>I have traced the difference in behavior to the way the sys.path veritable is set in the Embedded Distribution.</p>
<p>In ActivePython, the environment in which my script works, the first entry in sys.path is the directory containing the script. In the Embedded Distribution, there is no entry for the directory containing the script.</p>
<p>The Embedded Distribution uses a _pth file to set the sys.path. I am using the default ._pth file, which I have included below for your convenience.</p>
<pre><code>python36.zip
.

# Uncomment to run site.main() automatically
#import site
</code></pre>
<p>My question is, what magical incantation do I need to add to my _pth file to tell Python to <strong>please</strong> put the directory containing any script I run in sys.path so my scripts will work with the Embedded Distribution. The documentation on <a href="https://docs.python.org/3/library/site.html" rel="nofollow noreferrer">path configuration files</a> does not seem to contain this information. </p>
</div>
<div class="post-text" itemprop="text">
<p>Have you tried sys.path.append('C:/documents/folder/blah...') 
(with the correct folder location ofc)</p>
</div>
<div class="post-text" itemprop="text">
<p>I am still hoping for a magical incantation I can add to my _pth file that says "please put the directory containing any script I run in sys.path" so I do not have to modify all my scripts. However, it is possible that no such magical incantation exists.</p>
<p>I have found that the following magical incantation, when added to a Python script, achieves the desired results. And, unlike other solutions you may find out there in the wild, this one will work in the context of cx_Freeze and IDLE and in any other context in which the simple <strong>file</strong> based solutions will not work.</p>
<pre><code>import inspect
import os
import sys

# Add script directory to sys.path.
# This is complicated due to the fact that __file__ is not always defined.

def GetScriptFile():
    """Obtains the full path and file name of the Python script."""
    if hasattr(GetScriptFile, "file"):
        return GetScriptFile.file
    ret = ""
    try:
        # The easy way. Just use __file__.
        # Unfortunately, __file__ is not available when cx_freeze is used or in IDLE.
        ret = os.path.realpath(__file__)
    except NameError:
        # The hard way.
        if len(sys.argv) &gt; 0 and len(sys.argv[0]) &gt; 0 and os.path.isabs(sys.argv[0]):
            ret = os.path.realpath(sys.argv[0])
        else:
            ret = os.path.realpath(inspect.getfile(GetScriptFile))
            if not os.path.exists(ret):
                # If cx_freeze is used the value of the ret variable at this point is in
                # the following format: {PathToExeFile}\{NameOfPythonSourceFile}. This
                # makes it necessary to strip off the file name to get the correct path.
                ret = os.path.dirname(ret)
    GetScriptFile.file = ret
    return GetScriptFile.file

def GetScriptDirectory():
    """Obtains the path to the directory containing the script."""
    if hasattr(GetScriptDirectory, "dir"):
        return GetScriptDirectory.dir
    module_path = GetScriptFile()
    GetScriptDirectory.dir = os.path.dirname(module_path)
    return GetScriptDirectory.dir

sys.path.insert(0, GetScriptDirectory())
</code></pre>
<p>By the way, if you wish to see this in action, I have implement it my my <a href="https://svn.sullivanandkey.com/SnKOpen/Python/pyWhich/trunk/" rel="nofollow noreferrer">Python Which project</a>.</p>
</div>
<span class="comment-copy">I assume you mean to ask if I attempted to modify the script itself? If so, I have not. I will do that if I must but I prefer to solve this problem with a one time change, to the _pth file.</span>
<span class="comment-copy">See my answer to <a href="https://stackoverflow.com/a/50025581/2532437">stackoverflow.com/a/50025581/2532437</a> for information on why I was hoping to avoid the "just modify the script to add the directory to sys.path" approach. I have more than one project and I do not want to be forced to add all that code to every project if I do not have to.</span>
<span class="comment-copy">Completely agree. I think I had this problem a while back and resorted to using this method as a bodge... But I needed the code to work and the bodge meant it worked in time - not ideal but good enough as last resort</span>
