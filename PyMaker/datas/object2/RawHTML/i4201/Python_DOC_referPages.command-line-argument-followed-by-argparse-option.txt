<div class="post-text" itemprop="text">
<p>I'm new to python and currently playing around with argpase. I'm trying to call a function using a directory path given as a command line argument followed by an argparse option(-name) and a regex that goes through all the files in the directory and spits out all the matches to the regex as so: </p>
<p><code>./find.py ../seek -name '[a-z]*\.txt'</code></p>
<p>However, I'm getting a error that looks like </p>
<p><code>usage: find.py [-h] [--path PATH] [-name] [--regex REGEX]
find.py: error: unrecognized arguments: . . / s e e k / p r o g r a m . c</code></p>
<p>And without the -name its just printing all the files inside the path.</p>
<p>Here is what I have so far:</p>
<pre><code>#!/usr/bin/python2.7

import os, sys, argparse,re 
from stat import *

def parse(argv=None):
   parser = argparse.ArgumentParser()
   parser.add_argument('--path', help='path of directory', action='store')
   parser.add_argument('-name', '--name', action='store_true')
   parser.add_argument('--regex', default=r"[a-z0-9A-Z]")
   args = parser.parse_args(argv)
   print(args)
   return args

def main(argv=None):

   direc = sys.argv[1]
   files = []

   for f in os.listdir(direc):
      pathname = os.path.join(direc, f)
      mode = os.stat(pathname).st_mode

      if S_ISREG(mode):  
         args = parse(pathname)      
         if args.name:  
            dirls = [re.match(args.regex, pathname)]
            print(dirls)
         else:
            print pathname

if __name__ == '__main__':main() 
</code></pre>
<p>Any thoughts?</p>
</div>
<div class="post-text" itemprop="text">
<p>In order for your program to operate, you need a path. So, the <code>--path</code> option must take an argument. Modify your <code>parse()</code> function to change the line</p>
<pre><code>parser.add_argument('--path', help='path of directory', action='store')
</code></pre>
<p>to</p>
<pre><code>parser.add_argument('--path', help='path of directory', action='store', required=True)
</code></pre>
<p>You need to call <code>parse_args()</code> only once. Remove the <code>parse()</code> invocation to the top of the loop.</p>
<p>And you needn't do</p>
<pre><code>direc = sys.argv[1]
</code></pre>
<p>if you are using <code>argparse</code>.</p>
<p><code>re.match()</code> returns a <a href="https://docs.python.org/3.5/library/re.html#match-objects" rel="nofollow noreferrer"><code>match</code> object</a>, which is probably not what you want to print.</p>
<p>You might want to take a look at <a href="https://docs.python.org/3/howto/regex.html#match-versus-search" rel="nofollow noreferrer"><code>match()</code> versus <code>search()</code></a>. </p>
<blockquote>
<p>The <code>match()</code> function only checks if the RE matches at the beginning of the string while <code>search()</code> will scan forward through the string for a match.</p>
</blockquote>
<p>If you wanted to print the file names matching the regex, you could do</p>
<pre><code>  if S_ISREG(mode):  
     #args = parse(pathname)      
     if args.name:  
        #dirls = re.match(args.regex, pathname)
        dirls = re.search(args.regex, pathname)
        if( dirls ):
           print(pathname)
     else:
        print pathname
</code></pre>
<p>So <code>main()</code> should be something like</p>
<pre><code>def main(argv=None):
    args = parse(sys.argv[1:])
    print(args)
    #direc = sys.argv[1]
    direc = args.path
    files = []

    for f in os.listdir(direc):
      pathname = os.path.join(direc, f)
      mode = os.stat(pathname).st_mode

    if S_ISREG(mode):  
       #args = parse(pathname)      
       if args.name:  
          #dirls = re.match(args.regex, pathname)
          dirls = re.search(args.regex, pathname)
          if( dirls ):
             print(pathname)
       else:
          print pathname
</code></pre>
<p>In order to specify the regex matching the file names, you must specify the regex using the <code>--regex</code> option. By default, you've made it to match names having only numbers and (English) letters.</p>
<pre><code>./find.py --path ../seek -name --regex [a-z]\*.txt
</code></pre>
<p>or</p>
<pre><code>./find.py --path ../seek -name --regex '[a-z]*.txt'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Argument Parser PATH Example</strong> : Different type of arguments with custom handlers added. For path here you can pass '-path' followed by path value as argument</p>
<pre><code>import os
import argparse
from datetime import datetime


def parse_arguments():
    parser = argparse.ArgumentParser(description='Process command line arguments.')
    parser.add_argument('-path', type=dir_path)
    parser.add_argument('-e', '--yearly', nargs = '*', help='yearly date', type=date_year)
    parser.add_argument('-a', '--monthly', nargs = '*',help='monthly date', type=date_month)

    return parser.parse_args()


def dir_path(path):
    if os.path.isdir(path):
    return path
    else:
    raise argparse.ArgumentTypeError(f"readable_dir:{path} is not a valid path")


def date_year(date):
    if not date:
    return

    try:
    return datetime.strptime(date, '%Y')
    except ValueError:
    raise argparse.ArgumentTypeError(f"Given Date({date}) not valid")


def date_month(date):
    if not date:
    return

    try:
    return datetime.strptime(date, '%Y/%m')
    except ValueError:
    raise argparse.ArgumentTypeError(f"Given Date({date}) not valid")


def main():
    parsed_args = parse_arguments()

if __name__ == "__main__":
main()
</code></pre>
</div>
<span class="comment-copy">This is a follow up on <a href="https://stackoverflow.com/questions/50072557/argparse-command-line-option-after-given-path" title="argparse command line option after given path">stackoverflow.com/questions/50072557/â€¦</a></span>
<span class="comment-copy">Normally <code>parse_args</code> uses <code>sys.argv[1:]</code>.  Here you replace it with <code>pathname</code> (via <code>argv</code>).  <code>pathname</code> is a string, which <code>parse_args</code> converts into a <code>list</code>, e.g. <code>list(pathname)</code>.  That's what the error message is complaining about.</span>
<span class="comment-copy"><code>parse</code> should be called once, outside of the <code>f</code> loop.</span>
<span class="comment-copy">The <code>argv</code> parameter in <code>parse</code> (copied from my previous answer), allows us to provide a test list of strings.  But if it is the default <code>None</code>, <code>sys.argv[1:]</code> is used.  This parser expects a directory to be provided as '--path &lt;dirname&gt;'.  We could change that to be a positional argument without the '--path' flag.</span>
