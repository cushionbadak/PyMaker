<div class="post-text" itemprop="text">
<p>Suppose I have a function and, depending on its inputs, it must "advise" the caller function that something went wrong:</p>
<pre class="lang-python3 prettyprint-override"><code>def get_task(msg, chat):
    task_id = int(msg)
    query = db.SESSION.query(Task).filter_by(id=task_id, chat=chat)
    try:
        task = query.one()
    except sqlalchemy.orm.exc.NoResultFound:
        return "_404_ error"
    return task
</code></pre>
<p>Notice at the except block I want to pass something that the caller function can handle and stop its execution if it's necessary, otherwise, it will return the right object.</p>
<pre><code>def something_with_the_task(msg, chat):
   task = get_task(msg, chat)
   if task == "_404_ error":
       return
   #do some stuff with task
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You already seem to know how exceptions work.</p>
<p>The best thing to do in case of an error is to <code>raise</code> an exception.</p>
<p>Returning some <em>magic</em> value is considered a bad practice, because it requires the caller to explicitly check for it, and a <a href="https://softwareengineering.stackexchange.com/questions/166039/why-are-exceptions-considered-better-than-explicit-error-testing">hundred of other reasons</a>.</p>
<p>You can simply let the <code>sqlalchemy.orm.exc.NoResultFound</code> exception escape (by removing the <code>try:</code> and the <code>except:</code> block in <code>get_task()</code>), and let the caller handle it with a <code>try: ... except: ...</code> block, or, if you prefer to do some <a href="https://en.wikipedia.org/wiki/Information_hiding" rel="nofollow noreferrer">hiding</a>, you can define a custom exception:</p>
<pre><code>class YourException(Exception):
    pass
</code></pre>
<p>and use it like this:</p>
<pre><code>def get_task(msg, chat):
    try:
        task = ...
    except sqlalchemy.orm.exc.NoResultFound:
        raise YourException('explanation')
    return task

def something_with_the_task(msg, chat):
    try:
        task = get_task(msg, chat)
        # do some stuff with task
    except YourException as e:
        # do something with e
        # e.args[0] will contain 'explanation'
</code></pre>
<p>Feel free to make the <code>YourException</code> class more informative by explicitly adding some attributes and a constructor to set those, if needed.</p>
<p>The default constructor makes a decent job however:</p>
<pre><code>&gt;&gt;&gt; e = YourException('Program made a boo boo', 42, 'FATAL')
&gt;&gt;&gt; e
YourException('Program made a boo boo', 42, 'FATAL')
&gt;&gt;&gt; e.args[0]
'Program made a boo boo'
&gt;&gt;&gt; e.args[1]
42
&gt;&gt;&gt; e.args[2]
'FATAL'
</code></pre>
</div>
<span class="comment-copy">You should <a href="https://docs.python.org/3/tutorial/errors.html#raising-exceptions" rel="nofollow noreferrer"><code>raise</code></a> an exception and catch it in the caller function.</span>
<span class="comment-copy">Define a higher-level more appropriate exception for your interface and <code>raise</code> it, given you have no way to recover from the lower-level failure.</span>
<span class="comment-copy">You could also use <code>except sqlalchemy.orm.exc.NoResultFound as err: raise YourException('explanation') from err</code> to include the original exception in the traceback.</span>
