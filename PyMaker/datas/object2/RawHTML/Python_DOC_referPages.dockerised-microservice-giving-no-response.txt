<div class="post-text" itemprop="text">
<p>I am getting no http answer when I browse to the app that should be serving in my computer on <code>http://localhost:8080</code>. What is going wrong here?</p>
<p>I have built a flask app to query a server and return back the result. The app runs fine locally when I run gunicorn using  <code>gunicorn app:app --config=config.py</code> but not when I run run the docker image by using the command <code>docker run IMAGE</code> even though the app seems to be running as I get the output: </p>
<pre><code>[2019-03-15 10:13:06 +0000] [1] [INFO] Starting gunicorn 19.9.0
[2019-03-15 10:13:06 +0000] [1] [INFO] Listening at: http://0.0.0.0:8080 (1)
[2019-03-15 10:13:06 +0000] [1] [INFO] Using worker: threads
[2019-03-15 10:13:06 +0000] [8] [INFO] Booting worker with pid: 8
[2019-03-15 10:13:06 +0000] [10] [INFO] Booting worker with pid: 10
[2019-03-15 10:13:06 +0000] [14] [INFO] Booting worker with pid: 14
[2019-03-15 10:13:06 +0000] [15] [INFO] Booting worker with pid: 15
[2019-03-15 10:13:06 +0000] [17] [INFO] Booting worker with pid: 17
[2019-03-15 10:13:06 +0000] [18] [INFO] Booting worker with pid: 18
[2019-03-15 10:13:07 +0000] [23] [INFO] Booting worker with pid: 23
[2019-03-15 10:13:07 +0000] [24] [INFO] Booting worker with pid: 24
[2019-03-15 10:13:07 +0000] [30] [INFO] Booting worker with pid: 30
</code></pre>
<p>The <strong>app.py</strong> file is:</p>
<pre><code>import logging

from flask import Flask, request, jsonify
from config import auth_secret_token, PORT, DEBUG_MODE
from helper import check_parameters
from object_detection_grpc_client import main


app = Flask(__name__)


def check_authorization(request):
    try:
        if not 'Auth-token' in request.headers:
            return jsonify({'error': 'unauthorized access'}), 401
        token = request.headers['Auth-token']
        if token != auth_secret_token:
            return jsonify({'error': 'unauthorized access'}), 401
        return "ok", 200
    except Exception as e:
        return jsonify({'error': 'unauthorized access'}), 401


@app.route("/", methods=['POST'])
def hello():
    info, status_code = check_authorization(request)

    if status_code != 200:
        return info, status_code
    else: 
        status, status_code = check_parameters(request.form)

    if status_code != 200:
        return status, status_code
    else:
        score = main()
        response = {"status": "success", "score": score, "customer_id":(request.form["cust_id"])}

        return jsonify(response), status_code


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=PORT, debug=DEBUG_MODE)
</code></pre>
<p>The <strong>config.py</strong> file is:</p>
<pre><code>from os import environ as env
import multiprocessing

PORT = int(env.get("PORT", 8080))
DEBUG_MODE = int(env.get("DEBUG_MODE", 1))

# Gunicorn config
bind = ":" + str(PORT)
workers = multiprocessing.cpu_count() * 2 + 1
threads = 2 * multiprocessing.cpu_count()

auth_secret_token = "token"
server='A.B.C.D:9000'
model_name="mymodel"
input_image='filename.jpg'
label_map="./data/object_detection.pbtxt"
</code></pre>
<p>The <strong>Dockerfile</strong> is:</p>
<pre><code>FROM python:3.5.2
RUN apt update
WORKDIR /app
ADD requirements.txt /app/requirements.txt
RUN pip install -r /app/requirements.txt
ADD . /app
ENV PORT 8080
CMD ["gunicorn", "app:app", "--config=config.py"]
</code></pre>
<p>The <strong>folder structure</strong> is :</p>
<pre><code>.
├── app.py
├── app.yaml
├── config.py
├── data
│   └── object_detection.pbtxt
├── Dockerfile
├── filename.jpg
├── helper.py
├── object_2.py
├── object_detection
│   ├── core
│   │   ├── anchor_generator.py

│       └── vrd_evaluation_test.py
├── object_detection_grpc_client.py

├── requirements.txt
└── tensorflow_serving
    ├── apis

       └── regression_pb2.py.
├── app.py
├── app.yaml
├── config.py
├── data
│   └── object_detection.pbtxt
├── Dockerfile
├── filename.jpg
├── helper.py
├── object_2.py
├── object_detection
│   ├── core
│   │   ├── anchor_generator.py

│       └── vrd_evaluation_test.py
├── object_detection_grpc_client.py

├── requirements.txt
└── tensorflow_serving
    ├── apis

       └── regression_pb2.py
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What I feel is happening here is that you are not binding the port to your computer <a href="https://docs.docker.com/v17.09/engine/reference/commandline/run" rel="nofollow noreferrer">from the docker documentation this is how you expose it</a>.</p>
<blockquote>
<p>--publish , -p        Publish a container’s port(s) to the host</p>
</blockquote>
<p>Try to run the docker container using the following command</p>
<p><code>docker run -p 8080:8080 IMAGE</code></p>
<p>And then query <code>http://localhost:8080</code></p>
</div>
<span class="comment-copy">Are you binding the docker port? I feel like that might be missing, what is your <code>docker run</code> command?</span>
<span class="comment-copy">@AlejandroVales I use <code>docker run 5909eedf6906</code> where 5909eedf6906 is the image ID</span>
<span class="comment-copy">Thank you! This solves the problem locally but I am facing another problem relating to gunicorn when I push the image on Google Kubernetes Engine, I get the error as shown in this stackoverflow question <a href="https://stackoverflow.com/questions/55178800/failed-to-find-application-object-app-in-app-gunicorn" title="failed to find application object app in app gunicorn">stackoverflow.com/questions/55178800/…</a>. Can you help?</span>
