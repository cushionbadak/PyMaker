<div class="post-text" itemprop="text">
<p>I tried to install the Python package <a href="https://pypi.python.org/pypi/dulwich" rel="noreferrer">dulwich</a>:</p>
<pre class="lang-none prettyprint-override"><code>pip install dulwich
</code></pre>
<p>But I get a cryptic error message:</p>
<pre class="lang-none prettyprint-override"><code>error: Unable to find vcvarsall.bat
</code></pre>
<p>The same happens if I try installing the package manually:</p>
<pre class="lang-none prettyprint-override"><code>&gt; python setup.py install
running build_ext
building 'dulwich._objects' extension
error: Unable to find vcvarsall.bat
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong><em>Update</em></strong>: Comments point out that the instructions here may be dangerous. Consider using the Visual C++ 2008 Express edition or the purpose-built <a href="http://www.microsoft.com/en-us/download/details.aspx?id=44266" rel="noreferrer">Microsoft Visual C++ Compiler for Python</a> (<a href="/a/26127562/2778484">details</a>) and <strong>NOT</strong> using the original answer below. Original error message means the required version of Visual C++ is not installed.</p></div>
<div class="post-text" itemprop="text">
<p>I found the solution. 
I had the exact same problem, and error, installing 'amara'. I had mingw32 installed, but distutils needed to be configured.</p>
<ol>
<li>I have Python 2.6 that was already installed.</li>
<li>I installed mingw32 to <code>C:\programs\mingw\</code></li>
<li>Add mingw32's bin directory to your environment variable: append <code>c:\programs\MinGW\bin;</code> to the <strong>PATH</strong></li>
<li><p>Edit (create if not existing) <strong>distutils.cfg</strong> file located at <code>C:\Python26\Lib\distutils\distutils.cfg</code> to be:  </p>
<pre><code>[build]
compiler=mingw32
</code></pre></li>
<li><p>Now run <code>easy_install.exe amara</code>.</p></li>
</ol>
<p>Make sure environment is set by opening a new <code>cmd.exe</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can install compiled version from <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" rel="noreferrer">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p>
</div>
<div class="post-text" itemprop="text">
<h2>If you want to compile with Visual Studio C++ instead of mingw...</h2>
<ol>
<li><p>Run <code>python.exe</code> to display which version of VC++ it was compiled with (example shown below).</p>
<blockquote>
<p>It is <strong>important</strong> to use the corresponding version of the Visual C++ compiler that Python was compiled with since <a href="http://svn.python.org/projects/python/branches/release27-maint/Lib/distutils/msvc9compiler.py" rel="nofollow noreferrer">distilutils</a>'s <code>get_build_version</code> prevents mixing versions (<a href="https://stackoverflow.com/questions/2817869/error-unable-to-find-vcvarsall-bat#comment-23311731">per Piotr's warning</a>).</p>
</blockquote>
<ul>
<li>Yellow (top) is Python 2.7, compiled with MSC v.1500 (Visual Studio C++ 2008)</li>
<li>Red (bottom) is Python 3.4.1, compiled with MSC v.1600 (Visual Studio C++ 2010)</li>
</ul>
<p><img alt="Example from the command line showing Python 2.7 compiled with MSC v.1500 and Python 3.4.1 compiled with MSC v.1600" src="https://i.stack.imgur.com/jzygw.png"/></p></li>
<li><p>Use the table below<sup><a href="https://stackoverflow.com/a/2676904/809572">[1]</a></sup> to match the internal VC++ version with the corresponding Visual Studio release:</p>
<pre><code>MSC v.1000 -&gt; Visual C++ 4.x        
MSC v.1100 -&gt; Visual C++ 5          
MSC v.1200 -&gt; Visual C++ 6          
MSC v.1300 -&gt; Visual C++ .NET       
MSC v.1310 -&gt; Visual C++ .NET 2003  
MSC v.1400 -&gt; Visual C++ 2005  (8.0)
MSC v.1500 -&gt; Visual C++ 2008  (9.0)
MSC v.1600 -&gt; Visual C++ 2010 (10.0)
MSC v.1700 -&gt; Visual C++ 2012 (11.0)
MSC v.1800 -&gt; Visual C++ 2013 (12.0)
MSC v.1900 -&gt; Visual C++ 2015 (14.0)
MSC v.1910 -&gt; Visual C++ 2017 (15.0)
MSC v.1911 -&gt; Visual C++ 2017 (15.3)
MSC v.1912 -&gt; Visual C++ 2017 (15.5)
MSC v.1913 -&gt; Visual C++ 2017 (15.6)
MSC v.1914 -&gt; Visual C++ 2017 (15.7)
MSC v.1915 -&gt; Visual C++ 2017 (15.8)
MSC v.1916 -&gt; Visual C++ 2017 (15.9)   
</code></pre></li>
<li><p>Download and install the corresponding version of Visual Studio C++ from the previous step.<br/>
Additional notes for specific versions of VC++ are listed below.  </p>
<h3>Notes for Visual Studio C++ 2008</h3>
<p>For <em>only</em> the 32-bit compilers, download <a href="http://download.microsoft.com/download/A/5/4/A54BADB6-9C3F-478D-8657-93B3FC9FE62D/vcsetup.exe" rel="nofollow noreferrer">Visual Studio C++ 2008 Express Edition</a>.</p>
<p>For the 64-bit compilers<sup><a href="http://blog.victorjabur.com/2011/06/05/compiling-python-2-7-modules-on-windows-32-and-64-using-msvc-2008-express/" rel="nofollow noreferrer">[2]</a></sup><sup><a href="http://smaudet.wordpress.com/2014/01/26/building-pyaudio-on-windows-7-x64-using-the-free-msvc-toolchains/" rel="nofollow noreferrer">[3]</a></sup>, download <a href="http://www.microsoft.com/en-us/download/details.aspx?id=3138" rel="nofollow noreferrer">Windows SDK for Windows 7 and .NET Framework 3.5 SP1</a>.    </p>
<blockquote>
<ul>
<li>Uncheck everything except <code>Developer Tools &gt;&gt; Visual C++ Compilers</code> to save time and disk space from installing SDK tools you otherwise don't need.  </li>
</ul>
</blockquote>
<h3>Notes for Visual Studio C++ 2010</h3>
<p>According to Microsoft, if you installed Visual Studio 2010 SP1, it may have removed the compilers and libraries for VC++.<br/>
If that is the case, download <a href="https://www.microsoft.com/en-us/download/details.aspx?id=4422" rel="nofollow noreferrer">Visual C++ 2010 SP1 Compiler Update</a>.</p>
<h3>Notes for Visual Studio C++ 2015</h3>
<p>If you don't need the Visual Studio IDE, download <a href="http://landinghub.visualstudio.com/visual-cpp-build-tools" rel="nofollow noreferrer">Visual Studio C++ 2015 Build Tools</a>.</p>
<h3>Notes for Visual Studio C++ 2017</h3>
<p>If you don't need the Visual Studio IDE, download <a href="https://www.visualstudio.com/downloads/#build-tools-for-visual-studio-2017" rel="nofollow noreferrer">Build Tools for Visual Studio 2017</a>.</p>
<p><strong>Suggestion</strong>: If you have both a 32- and 64-bit Python installation, you may also want to use <a href="http://www.virtualenv.org/en/latest/virtualenv.html" rel="nofollow noreferrer">virtualenv</a> to create separate Python environments so you can use one or the other at a time without messing with your path to choose which Python version to use.</p></li>
</ol>
<blockquote>
<p>According to <a href="https://stackoverflow.com/questions/2817869/error-unable-to-find-vcvarsall-bat#comment35207766_18045219">@srodriguex</a>, you may be able to skip manually loading the   batch file (Steps 4-6) by instead copying a few batch files to where Python is searching by following <a href="https://stackoverflow.com/questions/13596407/errors-while-building-installing-c-module-for-python-2-7/21898585#21898585">this answer</a>. If that doesn't work, here are the following steps that originally worked for me.</p>
</blockquote>
<ol start="4">
<li><p>Open up a <code>cmd.exe</code></p></li>
<li><p><em>Before</em> you try installing something which requires C extensions, run the following batch file to load the VC++ compiler's environment into the session (i.e. environment variables, the path to the compiler, etc).  </p>
<p><strong>Execute:</strong> </p>
<ul>
<li><p>32-bit Compilers:</p>
<p><em>Note</em>: 32-bit Windows installs will only have <code>C:\Program Files\</code> as expected</p>
<blockquote>
<p><code>"C:\Program Files (x86)\Microsoft Visual Studio 9.0\Common7\Tools\vsvars32.bat"</code></p>
</blockquote></li>
<li><p>64-bit Compilers:</p>
<blockquote>
<p><code>"C:\Program Files (x86)\Microsoft Visual Studio 9.0\Common7\Tools\vsvars64.bat"</code></p>
</blockquote>
<p><em>Note</em>: Yes, the native 64-bit compilers are in <code>Program Files (x86)</code>. Don't ask me why.<br/>
  Additionally, if you are wondering what the difference between <code>vcvars64.bat</code> and <code>vcvarsx86_amd64.bat</code> or more importantly the difference between <code>amd64</code> and <code>x86_amd64</code>, the former are for the native 64-bit compiler tools and the latter are the 64-bit cross compilers that can run on a 32-bit Windows installation.</p></li>
</ul>
<p><strong>Update:</strong><br/>
If for some reason you are getting <code>error: ... was unexpected at this time.</code> where the <code>...</code> is some series of characters, then you need to check that you path variable does not have any extraneous characters like extra quotations or stray characters. The batch file is not going to be able to update your session path if it can't make sense of it in the first place.</p></li>
<li><p>If that went well, you should get one of the following messages depending on which version of VC++ and which command you ran:  </p>
<p>For the 32-bit compiler tools:<br/>
<code>Setting environment for using Microsoft Visual Studio 20xx x86 tools.</code> </p>
<p>For the 64-bit compiler tools:<br/>
<code>Setting environment for using Microsoft Visual Studio 20xx x64 tools.</code></p></li>
<li><p><em>Now</em>, run the setup via <code>python setup.py install</code> or <code>pip install pkg-name</code></p></li>
<li><p>Hope and cross your fingers that the planets are aligned correctly for VC++ to cooperate.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>What's going on? Python modules can be <a href="https://docs.python.org/3/extending/extending.html" rel="noreferrer">part written in C or C++</a> (typically for speed). If you try to install such a package with Pip (or <code>setup.py</code>), it has to compile that C/C++ from source. Out the box, Pip will brazenly assume you the compiler Microsoft Visual C++ installed. If you don't have it, you'll see this cryptic error message "Error: Unable to find vcvarsall.bat".</p>
<p>The prescribed solution is to install a C/C++ compiler, either Microsoft Visual C++, or <a href="http://www.mingw.org/wiki/Getting_Started" rel="noreferrer">MinGW</a> (an open-source project). However, installing and configuring either is prohibitively difficult. (Edit 2014: Microsoft have published a special <a href="http://www.microsoft.com/en-us/download/details.aspx?id=44266" rel="noreferrer">C++ compiler</a> for Python 2.7)</p>
<p>The easiest solution is to use Christoph Gohlke's Windows installers (.msi) for popular Python packages. He builds installers for Python 2.x and 3.x, 32 bit and 64 bit. You can download them from <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" rel="noreferrer">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p>
<hr/>
<p>If you too think "Error: Unable to find vcvarsall.bat" is a ludicrously cryptic and unhelpful message, then please comment on the bug at <a href="http://bugs.python.org/issue2943" rel="noreferrer">http://bugs.python.org/issue2943</a> to replace it with a more helpful and user-friendly message. </p>
<p>For comparison, Ruby ships with a package manager Gem and offers a quasi-official C/C++ compiler, DevKit. If you try to install a package without it, you see this helpful friendly useful message:</p>
<blockquote>
<p>Please update your PATH to include build tools or download the DevKit from <a href="http://rubyinstaller.org/downloads" rel="noreferrer">http://rubyinstaller.org/downloads</a> and follow the instructions at <a href="http://github.com/oneclick/rubyinstaller/wiki/Development-Kit" rel="noreferrer">http://github.com/oneclick/rubyinstaller/wiki/Development-Kit</a></p>
</blockquote>
<p>You can read a longer rant about Python packaging at <a href="https://stackoverflow.com/a/13445719/284795">https://stackoverflow.com/a/13445719/284795</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You'll need to install a Microsoft compiler, compatible with the compiler used to build Python. This means you need Visual C++ 2008 (or newer, with <a href="/a/10558328">some tweaking</a>).</p>
<p>Microsoft now supplies a bundled compiler and headers <em>just</em> to be able to compile Python extensions, at the memorable URL: </p>
<blockquote>
<h3>Microsoft Visual C++ Compiler for Python 2.7</h3>
<p><a href="http://aka.ms/vcpython27">http://aka.ms/vcpython27</a></p>
</blockquote>
<p>This is a relatively small package; 85MB to download, installable without admin privileges, no reboot required. The name is a little misleading, the compiler will work for any Python version originally compiled with Visual C++ 2008, not just Python 2.7.</p>
<p>If you start a Python interactive prompt or print <code>sys.version</code>, look for the <code>MSC</code> version string; if it is <code>MSC v.1500</code> you can use this tool.</p>
<p>From the <a href="https://mail.python.org/pipermail/distutils-sig/2014-September/024885.html">original announcement to the distutils list</a>:</p>
<blockquote>
<p>Microsoft has released a compiler package for Python 2.7 to make it easier for people to build and distribute their C extension modules on Windows. The Microsoft Visual C++ Compiler for Python 2.7 (a.k.a. VC9) is available from: <a href="http://aka.ms/vcpython27">http://aka.ms/vcpython27</a> </p>
<p>This package contains all the tools and headers required to build C extension modules for Python 2.7 32-bit and 64-bit (note that some extension modules require 3rd party dependencies such as OpenSSL or libxml2 that are not included). Other versions of Python built with Visual C++ 2008 are also supported, so "Python 2.7" is just advertising - it'll work fine with 2.6 and 3.2.</p>
</blockquote>
<p>Note that you need to have <a href="https://pypi.python.org/pypi/setuptools"><code>setuptools</code> 6.0 or newer</a> installed (listed in the system requirements on the download page). The project you are installing must use <code>setuptools.setup()</code>, not <code>distutils</code> or the auto-detection won't work.</p>
<p>Microsoft has stated that they want to keep the URL stable, so that automated scripts can reference it easily.</p>
</div>
<div class="post-text" itemprop="text">
<p>I just had this same problem, so I'll tell my story here hoping it helps someone else with the same issues and save them the couple of hours I just spent:</p>
<p>I have mingw (g++ (GCC) 4.6.1) and python 2.7.3 in a windows 7 box and I'm trying to install PyCrypto.</p>
<p>It all started with this error when running setup.py install: </p>
<pre><code>error: Unable to find vcvarsall.bat
</code></pre>
<p>Easily solved after googling the error by specifying mingw as the compiler of choice: </p>
<pre><code>setup.py install build --compiler=mingw32
</code></pre>
<p>The problem is that then I got a different error: </p>
<pre><code>configure: error: cannot run C compiled programs.
</code></pre>
<p>It turns out that my anti-virus was blocking the execution of a freshly compiled .exe. I just disabled the anti-virus "resident shield" and went to the next error:</p>
<pre><code>cc1.exe: error: unrecognized command line option '-mno-cygwin' 
error: command 'gcc' failed with exit status 1
</code></pre>
<p>This solved it: "Either install a slightly older version of MinGW, or edit distutils\cygwinccompiler.py in your Python directory to remove all instances of -mno-cygwin." (from <a href="https://stackoverflow.com/questions/6034390/compiling-with-cython-and-mingw-produces-gcc-error-unrecognized-command-line-o">here</a>)</p>
<p>Now, I can finally start working.</p>
</div>
<div class="post-text" itemprop="text">
<p>Looks like its looking for VC compilers, so you could try to mention compiler type with <code>-c mingw32</code>, since you have msys</p>
<pre><code>python setup.py install -c mingw32
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have python 2.73 and windows 7 .The solution that worked for me was:</p>
<ol>
<li>Added mingw32's bin directory to environment variable: append <strong>PATH</strong> with <code>C:\programs\mingw\bin;</code></li>
<li><p>Created <strong>distutils.cfg</strong> located at <code>C:\Python27\Lib\distutils\distutils.cfg</code> containing:  </p>
<pre><code>[build]
compiler=mingw32
</code></pre></li>
</ol>
<p>To deal with MinGW not recognizing the -mno-cygwin flag anymore, remove the flag in C:\Python27\Lib\distutils\cygwincompiler.py line 322 to 326, so it looks like this:</p>
<pre><code>  self.set_executables(compiler='gcc -O -Wall',
                         compiler_so='gcc -mdll -O -Wall',
                         compiler_cxx='g++ -O -Wall',
                         linker_exe='gcc',
                         linker_so='%s %s %s'
                                    % (self.linker_dll, shared_option,
                                       entry_point))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Look in the <code>setup.py</code> file of the package you are trying to install. If it is an older package it may be importing <code>distutils.core.setup()</code> rather than <code>setuptools.setup()</code>.</p>
<p>I ran in to this (in 2015) with a combination of these factors:</p>
<ol>
<li><p>The Microsoft Visual C++ Compiler for Python 2.7 from <a href="http://aka.ms/vcpython27">http://aka.ms/vcpython27</a></p></li>
<li><p>An older package that uses <code>distutils.core.setup()</code></p></li>
<li><p>Trying to do <code>python setup.py build</code> rather than using <code>pip</code>.</p></li>
</ol>
<p>If you use a recent version of pip, it will force (monkeypatch) the package to use setuptools, even if its <code>setup.py</code> calls for distutils. However, if you are not using pip, and instead are just doing <code>python setup.py build</code>, the build process will use <code>distutils.core.setup()</code>, which does not know about the compiler install location.</p>
<hr/>
<h2>Solution</h2>
<p><strong>Step 1:</strong> Open the appropriate Visual C++ 2008 Command Prompt</p>
<p>Open the Start menu or Start screen, and search for "Visual C++ 2008 32-bit Command Prompt" (if your python is 32-bit) or "Visual C++ 2008 64-bit Command Prompt" (if your python is 64-bit). Run it. The command prompt should say Visual C++ 2008 ... in the title bar.</p>
<p><strong>Step 2:</strong> Set environment variables</p>
<p>Set these environment variables in the command prompt you just opened.</p>
<pre class="lang-none prettyprint-override"><code>SET DISTUTILS_USE_SDK=1
SET MSSdk=1
</code></pre>
<p>Reference <a href="http://bugs.python.org/issue23246">http://bugs.python.org/issue23246</a></p>
<p><strong>Step 3:</strong> Build and install</p>
<p><code>cd</code> to the package you want to build, and run <code>python setup.py build</code>, then <code>python setup.py install</code>. If you want to install in to a virtualenv, activate it before you build. </p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe somebody can be interested, the following worked for me for the py2exe package.
(I have windows 7 64 bit and portable python 2.7, Visual Studio 2005 Express with Windows SDK for Windows 7 and .NET Framework 4)</p>
<pre><code>set VS90COMNTOOLS=%VS80COMNTOOLS%
</code></pre>
<p>then:</p>
<pre><code>python.exe setup.py install
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I spent almost 2 days figuring out how to fix this problem in my python 3.4 64 bit version: Python 3.4.3 (v3.4.3:9b73f1c3e601, Feb 24 2015, 22:44:40) [MSC v.1600 64 bit (AMD64)] on win32</p>
<p><strong>Solution 1, hard:</strong> (before reading this, read first Solution 2 below)
Finally, this is what helped me:</p>
<ol>
<li>install <a href="http://go.microsoft.com/?linkid=9709949" rel="nofollow noreferrer">Visual C++ 2010 Express</a></li>
<li>install <a href="http://www.microsoft.com/en-us/download/details.aspx?id=8279" rel="nofollow noreferrer">Microsoft Windows SDK v7.1 for Windows 7</a></li>
<li>create manually file <code>vcvars64.bat</code> in <code>C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\amd64</code> which contains <code>CALL "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /x64</code> or other path depending on where you have yours installed</li>
<li>(this seems to be optional) install <a href="http://www.microsoft.com/en-us/download/details.aspx?id=23691" rel="nofollow noreferrer">Microsoft Visual Studio 2010 Service Pack 1</a> together with <a href="http://www.microsoft.com/en-us/download/details.aspx?id=4422" rel="nofollow noreferrer">Microsoft Visual C++ 2010 Service Pack 1 Compiler Update for the Windows SDK 7.1</a></li>
<li><p>after that I tried to <code>pip install numpy</code> but received the following error:</p>
<pre><code>File "numpy\core\setup.py", line 686, in get_mathlib_info
raise RuntimeError("Broken toolchain: cannot link a simple C program")
RuntimeError: Broken toolchain: cannot link a simple C program
</code></pre>
<p>I changed <code>mfinfo</code> to <code>None</code> in <code>C:\Python34\Lib\distutils\msvc9compiler.py</code> per this <a href="https://stackoverflow.com/a/23099820/4383472">https://stackoverflow.com/a/23099820/4383472</a></p></li>
<li>finally after <code>pip install numpy</code> command my avast antivirus tried to interfere into the installation process, but i quickly disabled it</li>
</ol>
<p>It took very long - several minutes for numpy to compile, I even thought that there was an error, but finally everything was ok.</p>
<p><strong>Solution 2, easy:</strong>
(I know this approach has already been mentioned in a highly voted <a href="https://stackoverflow.com/a/5983696/4383472">answer</a>, but let me repeat since it really is easier)
After going through all of this work I understood that the best way for me is just to use already precompiled binaries from <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" rel="nofollow noreferrer">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a> in future. There is very small chance that I will ever need some package (or a version of a package) which this site doesn't contain. The installation process is also much quicker this way. For example, to install <code>numpy</code>:</p>
<ol>
<li>donwload <code>numpy‑1.9.2+mkl‑cp34‑none‑win_amd64.whl</code> (if you have Python 3.4 64-bit) from that site</li>
<li>in command prompt or powershell install it with pip <code>pip install numpy‑1.9.2+mkl‑cp34‑none‑win_amd64.whl</code> (or full path to the file depending how command prompt is opened)</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>I wanted to run pysph on Windows 10 under Python 2.7 and got vcvarsall.bat was not found (from distutils)</p>
<p>My solution was the following:</p>
<p>Install Microsoft Visual C++ for Python 2.7 (like @Michael suggested)</p>
<p>On Windows 10 it was installed into (my username is Andreas):</p>
<pre><code>C:\Users\Andreas\AppData\Local\Programs\Common\Microsoft\Visual C++ for Python\9.0
</code></pre>
<p>Set environment variable <strong>VS90COMNTOOLS</strong> to the installation path of Visual C++ for Python 2.7 (see above path).</p>
<p>If it still doesn't work, then modifiy in the module</p>
<pre><code>C:/Python27/lib/distutils
</code></pre>
<p>the file <strong>msvc9compiler.py</strong>. Find in it the function <strong>find_vcvarsall</strong> and do following modification.</p>
<p>Replace the line:</p>
<pre><code>productdir = os.path.join(toolsdir, os.pardir, os.pardir, "VC")
</code></pre>
<p>with</p>
<pre><code>productdir = os.path.join(toolsdir)
</code></pre>
<p>This is where vcvarsall.bat resides in my case (check, where vcvarsall.bat is in your installation).</p>
</div>
<div class="post-text" itemprop="text">
<p>I encountered this issue when I tried to install numpy library on my python 3.5. The solution is to install VS2015. I had VS2008, 2012, 2013, none of which is compatible with python 3.5. Apparently newer version of python has dependency on newer versions of VS.</p>
<p>Also make sure C++ Common Tools are installed with Visual Studio.</p>
<p><a href="https://i.stack.imgur.com/EvXfE.png" rel="noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/EvXfE.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>I tried all the above answers, and found all of them not to work, this was perhaps I was using Windows 8 and had installed Visual Studio 2012. In this case, this is what you do.</p>
<p>The <code>vcvarsall.bat</code> file is located here:
<code>C:\Program Files (x86)\Microsoft Visual Studio 11.0\VC</code></p>
<p>Simply select the file, and copy it.</p>
<p>Then go to this directory:
<code>C:\Program Files (x86)\Microsoft Visual Studio 11.0\Common7\Tools</code></p>
<p>and paste the file. And then, all should be well.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can download the free Visual C++ 2008 Express Edition from <a href="http://go.microsoft.com/?linkid=7729279" rel="nofollow noreferrer">http://go.microsoft.com/?linkid=7729279</a>, which will set the VS90COMNTOOLS environment variable during installation and therefore build with a compatible compiler.</p>
<p>As @PiotrDobrogost mentioned in a comment, his answer to this other question goes into details about why Visual C++ 2008 is the right thing to build with, but this can change as the Windows build of Python moves to newer versions of Visual Studio: <a href="https://stackoverflow.com/questions/3047542/building-lxml-for-python-2-7-on-windows/5122521#5122521">Building lxml for Python 2.7 on Windows</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I had this problem using <strong>Python 3.4.1 on Windows 7 x64</strong>, and unfortunately the packages I needed didn't have suitable exe or wheels that I could use. This system requires a few 'workarounds', which are detailed below (and <strong>TLDR at bottom</strong>).</p>
<p>Using the info in <a href="https://stackoverflow.com/a/18045219/3800244">Jaxrtech's answer above</a>, I determined I needed Visual Studio C++ 2010 (sys.version return MSC v.1600), so I installed Visual C++ 2010 Express from the link in his answer, which is <a href="http://go.microsoft.com/?linkid=9709949" rel="nofollow noreferrer">http://go.microsoft.com/?linkid=9709949</a>. I installed everything with updates, but as you can read below, this was a mistake. Only the original version of Express should be installed at this time (no updated anything).</p>
<p>vcvarsall.bat was now present, but there was a new error when installing the package, <code>query_vcvarsall    raise ValueError(str(list(result.keys())))ValueError: [u'path']</code>. There are other stackoverflow questions with this error, such as <a href="https://stackoverflow.com/questions/13596407/errors-while-building-installing-c-module-for-python-2-7">Errors while building/installing C module for Python 2.7</a></p>
<p>I determined from that answer that 2010 Express only installs 32-bit compilers. To get 64-bit (and other) compilers, you need to install Windows 7.1 SDK. See <a href="http://msdn.microsoft.com/en-us/windowsserver/bb980924.aspx" rel="nofollow noreferrer">http://msdn.microsoft.com/en-us/windowsserver/bb980924.aspx</a></p>
<p>This would not install for me though, and the installer returned the error <code>installation failed with return code 5100</code>. I found the solution at the following link: <a href="http://support.microsoft.com/kb/2717426" rel="nofollow noreferrer">http://support.microsoft.com/kb/2717426</a>. In short, if newer versions of x86 and x64 Microsoft Visual C++ 2010 Redistributable's are installed, they conflict with the ones in SDK installer, and need uninstalling first.</p>
<p>The SDK then installed, but I noticed vcvars64.bat still did not exist in <code>C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin</code>, nor its subfolders. vcvarsall.bat runs the vcvars64 batch file, so without it, the python package still wouldn't install (I forgot the error that was shown at this time).</p>
<p>I then found some instructions here: <a href="http://www.cryptohaze.com/wiki/index.php/Windows_7_Build_Setup#Download_VS_2010_and_Windows_SDK_7.1" rel="nofollow noreferrer">http://www.cryptohaze.com/wiki/index.php/Windows_7_Build_Setup#Download_VS_2010_and_Windows_SDK_7.1</a>
Following the instructions, I had already installed Express and 7.1 SDK, so installed SDK 7.1 SP1, and did the missing header file fix. I then manually created vcvars64.bat with the content <code>CALL setenv /x64</code>. I will paste all those instructions here, so they don't get lost.</p>
<blockquote>
<p>Step 1 is to download Visual Studio Express 2010.</p>
<p><a href="http://www.microsoft.com/visualstudio/en-us/products/2010-editions/express" rel="nofollow noreferrer">http://www.microsoft.com/visualstudio/en-us/products/2010-editions/express</a>
  is a good place to start. Download the installer, and run it
  (vc_web.exe). You don't need the SQL 2008 additional download.</p>
<p>You'll also need the Windows SDK (currently 7.1) for the 64-bit
  compilers - unless you want to do 32-bit only builds, which are not
  fully supported...</p>
<p><a href="http://www.microsoft.com/en-us/download/details.aspx?id=8279" rel="nofollow noreferrer">http://www.microsoft.com/en-us/download/details.aspx?id=8279</a> is a good
  starting point to download this - you'll want to run winsdk_web.exe
  when downloaded!</p>
<p>The default install here is just fine.</p>
<p>Finally, download and install the Windows SDK 7.1 SP1 update:
  <a href="http://www.microsoft.com/en-us/download/details.aspx?id=4422" rel="nofollow noreferrer">http://www.microsoft.com/en-us/download/details.aspx?id=4422</a></p>
<p>And, to fix missing header file, VS2010 SP1.
  <a href="http://www.microsoft.com/downloads/en/confirmation.aspx?FamilyID=75568aa6-8107-475d-948a-ef22627e57a5" rel="nofollow noreferrer">http://www.microsoft.com/downloads/en/confirmation.aspx?FamilyID=75568aa6-8107-475d-948a-ef22627e57a5</a></p>
<p>And, bloody hell, fix the missing batch file for VS2010 Express. This
  is getting downright absurd.</p>
<p>In C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\amd64,
  create "vcvars64.bat" with the following (you will need to be running
  as administrator):</p>
<p>CALL setenv /x64</p>
</blockquote>
<p>My python package still did not install (can't recall error). I then found some instructions (copied below) to use the special SDK 7.1 Command Prompt, see: <a href="https://mail.python.org/pipermail/distutils-sig/2012-February/018300.html" rel="nofollow noreferrer">https://mail.python.org/pipermail/distutils-sig/2012-February/018300.html</a></p>
<blockquote>
<p>Never mind this question.  Somebody here noticed this item on the menu:  Start-&gt;All Programs-&gt;Microsoft Windows SDK v7.1 -&gt;Windows SDK 7.1 Command Prompt</p>
<p>This runs a batch job that appears to set up a working environment for the compiler.  From that prompt, you can type "setup.py build" or "setup.py install".</p>
</blockquote>
<p>I opened the Windows SDK 7.1 Command Prompt as instructed, and used it to run easy_install on the python package. And at last, success!</p>
<hr/>
<p><strong>TLDR</strong>;</p>
<ol>
<li>Install Visual Studio Express 2010 (preferably without updated redistributables or SQL server).</li>
<li>Install Windows 7.1 SDK</li>
<li>Instal SDK 7.1 SP1 update, and VS2010 SP1 header file fix (this step may not be required).</li>
<li>Manually create <code>C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\amd64\vcvars64.bat</code> with content <code>CALL setenv /x64</code></li>
<li>Start-&gt;All Programs-&gt;Microsoft Windows SDK v7.1 -&gt;Windows SDK 7.1 Command Prompt to open special x64 command prompt, which can then be used with python/easy_install/pip/etc (including those in virtual_envs).</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>I tried many solutions but only one worked for me, the install of Microsoft Visual Studio <strong>2008</strong> Express C++.</p>
<p>I got this issue with a Python 2.7 module written in C (yEnc, which has other issues with MS VS). Note that Python 2.7 is built with MS VS 2008 version, not 2010!</p>
<p>Despite the fact it's free, it is quite hard to find since MS is promoting VS 2010.
Still, the MSDN official very direct links are still working: check <a href="https://stackoverflow.com/a/15319069/2227298">https://stackoverflow.com/a/15319069/2227298</a> for download links.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you have mingw installed</p>
<pre><code>pip install --global-option build_ext --global-option --compiler=mingw32 packagename
</code></pre>
<p>works, forcing pip to build using the mingw compiler instead of Microsoft's. See here <a href="https://github.com/pypa/pip/issues/18" rel="nofollow">https://github.com/pypa/pip/issues/18</a> for details (last post).</p>
</div>
<div class="post-text" itemprop="text">
<p>Is Microsoft Visual C++ Compiler for Python 2.7 at <a href="http://www.microsoft.com/en-us/download/details.aspx?id=44266" rel="nofollow">http://www.microsoft.com/en-us/download/details.aspx?id=44266</a> not a solution? </p>
</div>
<div class="post-text" itemprop="text">
<p>The easiest way to solve this in 2016 is to install Chocolatey and then the  <code>vcpython27</code> package. Open Powershell:</p>
<pre><code>&gt; iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))
&gt; choco install python2 -y
&gt; choco install vcpython27 -y
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Below steps fixed this issue for me, I was trying to create setup with cython extension.</p>
<ol>
<li>Install Microsoft Visual C++ Compiler for Python 2.7 </li>
<li>The default install location would be @
C:\Users\PC-user\AppData\Local\Programs\Common\Microsoft\Visual C++
for Python This might actually fix the issue, test once before proceeding. </li>
<li>If it fails, Check where in VC++
for python vcvarsall.bat file is located</li>
<li>Open the msvc9compiler.py
file of distutils package in notepad. </li>
<li>In my box this was @
C:\Anaconda2\Lib\distutils\msvc9compiler.py find_vcvarsall function
in this file, determine the version of VC by printing out version
argument. For Python 2.7 it's likely to be 9.0</li>
<li>Now create an
environment variable VS90COMNTOOLS, Pointing to
C:\Users\PC-user\AppData\Local\Programs\Common\Microsoft\Visual C++
for Python\9.0\VC\bin</li>
<li><p>For some reason distutils expects the
vcvarsall.bat file to be within VC dir, but VC++ for python tools
has it in the root of 9.0 To fix this, remove "VC" from the
path.join (roughly around line 247)</p>
<p><code>
    #productdir = os.path.join(toolsdir, os.pardir, os.pardir, "VC")
    productdir = os.path.join(toolsdir, os.pardir, os.pardir)
</code></p></li>
</ol>
<p>The above steps fixed the issue for me.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know if it is too late, but I found <a href="http://www.microsoft.com/en-us/download/details.aspx?id=44266" rel="nofollow">Microsoft Visual C++ Compiler for Python 2.7</a> which reads</p>
<blockquote>
<p>The typical error message you will receive if you need this compiler package is <strong>Unable to find vcvarsall.bat</strong></p>
</blockquote>
<p>Hope this helps!</p>
</div>
<div class="post-text" itemprop="text">
<p>I got the same problem and have solved it at the moment.</p>
<p>"Google" told me that I need to install "Microsoft Visual C++ Compiler for Python 2.7". I install not only the tool, but also Visual C++ 2008 Reditributable, but it didn't help. I then tried to install Visual C++ 2008 Express Edition. And the problem has gone!</p>
<p>Just try to install Visual C++ 2008 Express Edition!</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're looking to install pyodbc on a Windows box that <em>doesn't</em> have Visual Studio installed another option is to manually install pyodbc using the binary distribution.</p>
<p>This is particularly useful if you do not have administrator privileges on the machine you're working with and are trying to set up a <a href="http://www.virtualenv.org/en/latest/" rel="nofollow">virtualenv</a>.</p>
<p>Steps:</p>
<ol>
<li>Download the latest Windows installer from <a href="https://code.google.com/p/pyodbc/downloads/list" rel="nofollow">here</a> (pyodbc-X.X.X.win-Y-py2.7.exe)</li>
<li>Open the installer executable using 7-Zip (or WinRAR or whatever)</li>
<li>Extract pyodbc.pyd and pyodbc-X.X.X-py2.7.egg-info and place them in <code>[python installation directory or virtualenv]\Lib\site-packages</code></li>
<li>There is no step 4 :)</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>With Python 3.4, the dependency is on Visual Studio 2010. Installing Visual C++ 2010 Express fixed the problem for me. </p>
<p>Tricking it into using the VS 2008 or 2013 installs that I happened to have didn't work.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use easy_install instead of pip it works for me.</p>
</div>
<div class="post-text" itemprop="text">
<p>The answer given by @monkey is one of the correct ones, but it is incomplete.</p>
<p>In case you'd like to use <a href="http://en.wikipedia.org/wiki/MinGW" rel="nofollow">MinGW</a>, you should select the C, C++ and also other development tools suggested during the MinGW installation process to also get "make.exe."</p>
<p>You must also have the path set to make.exe in the env.</p>
<p>To complete his answer, here are the steps:</p>
<ol>
<li>Add mingw32's bin directory to your environment variables</li>
<li>Append <code>C:\Programs\MinGW\bin;C:\Programs\MinGW\msys\1.0\bin;</code> to the PATH </li>
<li><p>Edit (create if it doesn't exist) the <code>distutils.cfg</code> file located at <code>C:\Python26\Lib\distutils\distutils.cfg</code> to be:</p>
<pre><code>[build]
compiler=mingw32
</code></pre></li>
</ol>
<p>Make sure the environment variables is set by opening a new cmd.exe.</p>
</div>
<div class="post-text" itemprop="text">
<p>I had the same error (which I find silly and not really helpful whatsoever as error messages go) and continued having problems, despite having a C compiler available. </p>
<p>Surprising, what ended up working for me was simply <strong>upgrading pip and setuptools to the most recent version</strong>. Hope this helps someone else out there.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>fastest solution</strong>:</p>
<p>If you have <strong>python 3.4.x</strong>, the solution is simply to install 
VC++ 2010 since it is used to compile itself into.</p>
<p><a href="https://www.visualstudio.com/en-us/downloads#d-2010-express" rel="nofollow">https://www.visualstudio.com/en-us/downloads#d-2010-express</a></p>
<p>my python version is
MSC v.1600 32 bit (intel)] on win32</p>
<p><em>worked fine on Windows8</em></p>
</div>
<span class="comment-copy">For future reference it would be nice to see on what platform do you use this.</span>
<span class="comment-copy">If you think this is a ludicrously cryptic and unhelpful error message, please vote for the bug at <a href="http://bugs.python.org/issue2943" rel="nofollow noreferrer">bugs.python.org/issue2943</a></span>
<span class="comment-copy">Microsoft now provides a solution: <a href="http://www.microsoft.com/en-us/download/details.aspx?id=44266" rel="nofollow noreferrer">microsoft.com/en-us/download/details.aspx?id=44266</a></span>
<span class="comment-copy">@MartijnPieters  I tried downloading and installing the link you provided with wheel and setuptools 7.0 but it doesn't work I get the message:  <code>C:\Users\User\libfreenect\wrappers\python&gt;python setup.py install</code> <code>running install running build running build_ext building 'freenect' extension error: Unable to find vcvarsall.bat</code></span>
<span class="comment-copy">Steve Dower (a guy on Microsoft's Python team) has written a blog post about this topic worth reading: <a href="https://blogs.msdn.microsoft.com/pythonengineering/2016/04/11/unable-to-find-vcvarsall-bat/" rel="nofollow noreferrer">blogs.msdn.microsoft.com/pythonengineering/2016/04/11/…</a></span>
<span class="comment-copy">It did for me :(</span>
<span class="comment-copy">@Gili: It looks like this problem is due to spaces in the variable, try wrapping it within quotes. For me %VS100COMNTOOLS%="C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\Tools"</span>
<span class="comment-copy">This won't work for many things, because Python relies on VS2008. Have a look at this answer: <a href="http://stackoverflow.com/questions/6551724/how-do-i-point-easy-install-to-vcvarsall-bat" title="how do i point easy install to vcvarsall bat">stackoverflow.com/questions/6551724/…</a></span>
<span class="comment-copy">WARNING!!! This is <b>WRONG</b> answer. You <b>should not</b> under any circumstances compile Python C extension using different (version of) compiler that the one used to compile Python itself as those two (versions of) compilers will probably have incompatible C runtime libraries. See <a href="http://stackoverflow.com/a/5122521/95735">this</a> answer for more details.</span>
<span class="comment-copy">You can download the free Visual C++ 2008 Express Edition from <a href="http://go.microsoft.com/?linkid=7729279" rel="nofollow noreferrer">go.microsoft.com/?linkid=7729279</a>, which will set the VS90COMNTOOLS environment variable during installation and therefore build with a compatible compiler.</span>
<span class="comment-copy">This works great for Python2.6, but for some reason I can't get it to work on Python2.7. It works if I downloading my package source and install using 'python setup.py install --compile=mingw32', but for some reason using easy_install or pip still tries to find vcvarsall.</span>
<span class="comment-copy">I finally got scikits.image to install in Python(x,y) 2.7 by adding <code>C:\msysgit\mingw\mingw32\bin</code> and <code>C:\msysgit\mingw\bin</code> to the user PATH and restarting Spyder before running <code>pip install</code> again</span>
<span class="comment-copy">There is no need <i>ever</i> to reboot because of an environment variable change. Opening a new cmd.exe process is enough.</span>
<span class="comment-copy">I still couldn't fix this. This is the error: <code>gcc: error: unrecognized command line option '-mno-cygwin' error: Setup script exited with error: command 'gcc' failed with exit status 1</code> after <code>easy_install.exe amara</code></span>
<span class="comment-copy">@user, you should open this file: <code>C:\Python27\Lib\distutils\cygwincompiler.py</code> and remove all occrrences of <code>–mno-cygwin</code> from it;  this is because recent versions of GCC has removed <code>–mno-cygwin</code> option and it shouldn’t be there.</span>
<span class="comment-copy">just a tip: you can install the package from this site in virtualenv by running <code>easy_install binary_installer_built_with_distutils.exe</code> in virtualenv, accoding to <a href="http://stackoverflow.com/questions/3271590/can-i-install-python-windows-packages-into-virtualenvs/5442340#5442340">this answer</a>.</span>
<span class="comment-copy">Every Python Windows dev should know about this</span>
<span class="comment-copy">You can also <code>wheel convert ....exe</code> these installers and then install them with pip whenever you like.</span>
<span class="comment-copy">To be more precise, <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python" rel="nofollow noreferrer">lfd.uci.edu/~gohlke/pythonlibs/#mysql-python</a> and once downloaded open a terminal as admin and run <code>python -m pip install &lt;filename&gt;</code></span>
<span class="comment-copy">Holly mother of God, this is right on the spot. Works like a charm, TY :)</span>
<span class="comment-copy">Cannot recommend enough that you <i>do</i> go through the pain of moving straight to 64 bit. It's just a matter of time before you'll need more than 4gb of address space. I speak from painful experience after having gone 32 bit because it was much easier, then having to uninstall everything including dependencies and going 64 bit. Almost a whole weekend.</span>
<span class="comment-copy">Then again, I forget how many people are going to have to use Python for much larger tasks like that. And @ThomasBrowne, I'm sure that was a painful and an unnecessary evil of an experience. I'm looking into it, and hopefully I can find something. The main issue was that Visual Studio C++ 2008 Express does not come with a 64-bit compiler, but I'm sure its around here somewhere.</span>
<span class="comment-copy">Just updated it with more information covering how to also get the 64-bit compilers if you need them.</span>
<span class="comment-copy">In my case, I follow step 1 above and skipped the rest following <a href="http://stackoverflow.com/a/21898585/2013448">this answer</a>. Now I'm able to install packages avoiding the annoyance of running .bat.</span>
<span class="comment-copy">@srodriguex well in that case, it looks like Python is assuming that the 64-bit compiler tools get loaded into the PATH using that it is looking for <code>...\VC\bin\vcvarsamd64.bat</code> and <code>...\VC\bin\amd64\vcvarsamd64.bat</code>.</span>
<span class="comment-copy">How can I use pip to install this pre-compiled executable in my virtual environment?</span>
<span class="comment-copy">@shailenTJ good question. I've never done it, but try  <a href="http://stackoverflow.com/a/5442340/284795">stackoverflow.com/a/5442340/284795</a></span>
<span class="comment-copy">This was the best/easiest solution that I am aware of.  Thanks.</span>
<span class="comment-copy">That <b>Edit 2014</b> is the best answer for me. Easy to miss instruction: ensure you update <code>setuptools</code> to version <code>6.0</code> or higher with <code>pip install setuptools --upgrade</code>.</span>
<span class="comment-copy">As per my other comment, you can ensure <code>setuptools</code> is up to date with <code>pip install setuptools --upgrade</code>.</span>
<span class="comment-copy">I looked into the matter why the relevant logic is in <code>setuptools</code> rather than <code>distutils</code> - after all, building modules is core functionality, and it does have the relevant code, but an older version of it. Looks like <code>distutils</code> maintainers just gave up on supporting all the possible MSSDK variations and dumped this work onto their <code>setuptools</code> colleagues who were more eager.</span>
<span class="comment-copy">@ivan_pozdeev: <code>setuptools</code> can also release far more often than <code>distutils</code>, included in the Python release cycle can. And <code>distitutils</code> has indeed gone into a maintenance mode of sorts, with work on new systems slated to replace it. That work stalled instead.</span>
<span class="comment-copy">cython uses distutils, you need to import setuptools which monkey-patches distutils: <a href="https://github.com/cython/cython/wiki/CythonExtensionsOnWindows" rel="nofollow noreferrer">github.com/cython/cython/wiki/CythonExtensionsOnWindows</a></span>
<span class="comment-copy">You will also need a MinGW-compatible version of the Python library. See <a href="http://eli.thegreenplace.net/2008/06/28/compiling-python-extensions-with-distutils-and-mingw/" rel="nofollow noreferrer">eli.thegreenplace.net/2008/06/28/…</a> for more information</span>
<span class="comment-copy">Just to clairify, the command that works is: <code>python setup.py build --compiler=mingw32</code> followed by <code>python setup.py install</code></span>
<span class="comment-copy">After running python setup.py build --compiler=mingw32 I recieve ImportError: No module named Cython.Distutils while Cython is installed under Anaconda. Any suggestions?</span>
<span class="comment-copy">you also can build your package using &lt;code&gt;pip&lt;/code&gt; instead of &lt;code&gt;python setup.py build&lt;/code&gt;</span>
<span class="comment-copy">Did the magic for me! Thank you for the clear answer.</span>
<span class="comment-copy">No, you're right, I'm not sure what happened, I'll delete the original comment.</span>
<span class="comment-copy">Very useful!! In my case, I've made 'set VS90COMNTOOLS=%VS110COMNTOOLS%'.</span>
<span class="comment-copy">Where do I type these commands at? command prompt?</span>
<span class="comment-copy">@Exzile: yes, you type these commands at the same command prompt session</span>
<span class="comment-copy">thanks for <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" rel="nofollow noreferrer">lfd.uci.edu/~gohlke/pythonlibs</a></span>
<span class="comment-copy">Interestingly enough <code>%userprofile%\Appdata\Local\Programs\Common</code> Is empty for me.</span>
<span class="comment-copy">Even after installing Microsoft Visual C++ for Python 2.7?</span>
<span class="comment-copy">No all is not well I followed your answer but still I get the same error.</span>
<span class="comment-copy">Also make sure there are no other versions installed. I had a hard time with this. I reformatted the computer, and installed just this version. Since removing multiple versions of VS would have taken me just as long.</span>
<span class="comment-copy">Yes, the best way is to install VS2008.</span>
<span class="comment-copy">Worked for me. Error message at the end of pip install pysftp had this solution <code>error: Microsoft Visual C++ 9.0 is required (Unable to find vcvarsall.bat). Get it from http://aka.ms/vcpython27</code></span>
<span class="comment-copy">I am getting linking error on following the above steps LINK : error LNK2001: unresolved external symbol init__init__ build\temp.win-amd64-2.7\Release_<i>init_</i>.lib : fatal error LNK1120: 1 unresolved externals error: command 'C:\\Users\\ma306477\\AppData\\Local\\Programs\\Common\\Microsoft\\Visual C++ for Python\\9.0\\VC\\Bin\\amd64\\link.exe' failed with exit status 1120</span>
<span class="comment-copy">Same error <code>error: Setup script exited with error: Unable to find vcvarsall.bat</code></span>
<span class="comment-copy">32 bit python modules should be compiled with 32 bit mingw, while 64 bit python modules should be compiled with 64 bit mingw. On Cygwin 64 bit, there are 2 mingw executables available: <code>x86_64-w64-mingw32-gcc</code> and <code>i686-w64-mingw32-gcc</code>. These executables are apparently the same as the ones you'd get from Mingw normally (just compiled inside a Cygwin environment).</span>
