<div class="post-text" itemprop="text">
<p>I would like gunicorn.error to use the following key-value based log format instead of the default defined in <a href="https://github.com/benoitc/gunicorn/blob/master/gunicorn/glogging.py#L48" rel="nofollow noreferrer" title="dwa">gunicorn/glogging.py</a>:</p>
<pre><code>'format': 'timestamp=%(asctime)s pid=%(process)d loglevel=%(levelname)s msg=%(message)s'`
</code></pre>
<p>In my gunicorn config file:</p>
<pre><code>import logging.config

workers = 2
bind = "127.0.0.1:8000"
loglevel = 'INFO'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'key_value': {
            'format': 'timestamp=%(asctime)s pid=%(process)d loglevel=%(levelname)s msg=%(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'key_value',
            'stream': 'ext://sys.stdout'
        }
    },
    'loggers': {
        'gunicorn.error': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'flask.app': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        }
    },
}

logging.config.dictConfig(LOGGING)
</code></pre>
<p>Gunicorn logs twice, in my custom format and in the default format:</p>
<pre><code>timestamp=2016-12-11 15:20:49,559 pid=22110 loglevel=INFO msg=Starting gunicorn 19.6.0
[2016-12-11 15:20:49 +0000] [22110] [INFO] Starting gunicorn 19.6.0
timestamp=2016-12-11 15:20:49,559 pid=22110 loglevel=INFO msg=Listening at: http://127.0.0.1:8000 (22110)
[2016-12-11 15:20:49 +0000] [22110] [INFO] Listening at: http://127.0.0.1:8000 (22110)
timestamp=2016-12-11 15:20:49,559 pid=22110 loglevel=INFO msg=Using worker: sync
[2016-12-11 15:20:49 +0000] [22110] [INFO] Using worker: sync
timestamp=2016-12-11 15:20:49,560 pid=22115 loglevel=INFO msg=Booting worker with pid: 22115
[2016-12-11 15:20:49 +0000] [22115] [INFO] Booting worker with pid: 22115
timestamp=2016-12-11 15:20:49,595 pid=22115 loglevel=INFO msg=Starting Flask application
timestamp=2016-12-11 15:20:49,659 pid=22120 loglevel=INFO msg=Booting worker with pid: 22120
[2016-12-11 15:20:49 +0000] [22120] [INFO] Booting worker with pid: 22120
timestamp=2016-12-11 15:20:49,693 pid=22120 loglevel=INFO msg=Starting Flask application
</code></pre>
<p>I used the <a href="http://rhodesmill.org/brandon/2012/logging_tree/" rel="nofollow noreferrer">logging_tree</a> library to take a look at the configured loggers and I'm seeing 2 gunicorn loggers emitting to the console:</p>
<pre><code>&lt;--""
   Level WARNING
   |
   o&lt;--"flask"
   |   Level NOTSET so inherits level WARNING
   |   |
   |   o   "flask.app"
   |       Level INFO
   |       Propagate OFF
   |       Handler Stream &lt;open file '&lt;stdout&gt;', mode 'w' at 0x7f86676b1150&gt;
   |         Level INFO
   |         Formatter fmt='timestamp=%(asctime)s pid=%(process)d loglevel=%(levelname)s msg=%(message)s' datefmt=None
   |
   o&lt;--"gunicorn"
       Level NOTSET so inherits level WARNING
       |
       o   "gunicorn.access"
       |   Level INFO
       |   Propagate OFF
       |
       o   "gunicorn.error"
       |   Level INFO
       |   Propagate OFF
       |   Handler Stream &lt;open file '&lt;stdout&gt;', mode 'w' at 0x7f86676b1150&gt;
       |     Level INFO
       |     Formatter fmt='timestamp=%(asctime)s pid=%(process)d loglevel=%(levelname)s msg=%(message)s' datefmt=None
       |   Handler Stream &lt;open file '&lt;stderr&gt;', mode 'w' at 0x7f86676b11e0&gt;
       |     Formatter fmt='%(asctime)s [%(process)d] [%(levelname)s] %(message)s' datefmt='[%Y-%m-%d %H:%M:%S %z]'
       |
       o&lt;--"gunicorn.http"
           Level NOTSET so inherits level WARNING
           |
           o&lt;--"gunicorn.http.wsgi"
               Level NOTSET so inherits level WARNING
</code></pre>
<p>Gunicorn's <a href="http://docs.gunicorn.org/en/stable/settings.html#logger-class" rel="nofollow noreferrer">docs</a> say it's possible to specify the logger class to use, but I don't know how to do this.</p>
</div>
<div class="post-text" itemprop="text">
<p>I have had very good luck by specifying my own custom logging class. You can do this by making a class that inherits from Gunicorn's <code>gunicorn.glogging.Logger</code> class, and then override the <code>setup(self, cfg)</code> method of this class.</p>
<p>For example:</p>
<pre><code>import logging
from gunicorn import glogging


class CustomLogger(glogging.Logger):
    """Custom logger for Gunicorn log messages."""

    def setup(self, cfg):
        """Configure Gunicorn application logging configuration."""
        super().setup(cfg)

        # Override Gunicorn's `error_log` configuration.
        self._set_handler(
            self.error_log, cfg.errorlog, logging.Formatter(
                fmt=('timestamp=%(asctime)s pid=%(process)d '
                     'loglevel=%(levelname)s msg=%(message)s'))
</code></pre>
<p>Now, depending upon how you launch Gunicorn, you can either provide the full path to this class; IE: <code>program.app.CustomLogger</code> via the <code>--logger-class</code> option, or you can directly pass it in via your own customer Gunicorn application class like so:</p>
<pre><code>from gunicorn.app import base
from program.app import app, CustomLogger


class WebServer(base.BaseApplication):
    """Gunicorn WSGI Web Server."""

    def __init__(self, app, options):
        """Initialize server object."""
        self.options = options or {}
        self.application = app
        super().__init__()

    def load():
        """Return WSGI application."""
        return self.application

    def load_config():
        """Load configuration into Gunicorn."""
        self.cfg.set('logger_class', CustomLogger)


if __name__ == '__main__':
    WebServer(app, {}).run()
</code></pre>
<p>This should accomplish your desired goal without any yucky INI files being required and it is a completely supported configuration style.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you only need to give the configuration file (<code>.ini</code> or <code>.conf</code>) with your own configuration. Make sure you override the default.</p>
<p>There is a <code>examples/logging.conf</code> in the <a href="https://github.com/benoitc/gunicorn/blob/dc7dc14229cce9c949399bb8a0c73863f9470932/examples/logging.conf" rel="nofollow noreferrer"><code>examples</code></a> directory.</p>
</div>
<div class="post-text" itemprop="text">
<p>I recently run into this myself, with <code>gunicorn</code>, as well as some other python packages that do not honor <strong>existing</strong> logging configuration when they are imported.</p>
<p>The following function resets all existing logging configuration and loads the new configuration from a dictionary. See <a href="https://docs.python.org/3/library/logging.config.html#logging.config.dictConfig" rel="nofollow noreferrer">logging.config.dictConfig</a> for more information on the configuration dictionary schema.</p>
<p>Just call <code>reset_logging_configuration()</code> after you have imported all offending modules.</p>
<pre><code>import logging
import logging.config

from my_logging_config import CONFIG  # see `logging.config.dictConfig`

def reset_logging_configuration():
    logging._acquireLock()
    for logger in logging.Logger.manager.loggerDict.values():
        if not isinstance(logger, logging.Logger):
            continue
        logger.handlers.clear()        # unset all logger handlers
        logger.filters.clear()         # unset all logger filters
        logger.level = logging.NOTSET  # unset logger level
        logger.propagate = True        # enable logger propagation
    logging._releaseLock()
    logging.config.dictConfig(CONFIG)  # load actual config
</code></pre>
<p><strong>Beaware</strong>: this method messes with <code>logging</code> internals and is more of a work-around than an actual solution. However, many modules blindly overwrite existing <code>logging</code> configuration when they are imported, leaving you with no choice but to overwrite their configuration after they are loaded. Use with caution!</p>
<p>This code is based on a code-snippet found in <a href="https://github.com/python/cpython/blob/3.7/Lib/logging/config.py#L253" rel="nofollow noreferrer">logging/config.py</a>.</p>
</div>
<span class="comment-copy">yes this method works, however only .ini (fileConfig) format is supported, but you cant use custom filters in the .ini.</span>
<span class="comment-copy">The only solution I know, is to implement your own <i>handler</i> which creates the filtering you need.</span>
