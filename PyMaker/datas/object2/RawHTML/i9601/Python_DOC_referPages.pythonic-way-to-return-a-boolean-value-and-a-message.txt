<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/354883/how-to-return-multiple-values-from-a-function">How to return multiple values from a function? [closed]</a>
<span class="question-originals-answer-count">
                    14 answers
                </span>
</li>
</ul>
</div>
<p>I have a simple script that checks various Linux processes and, finding one of them, logs a particular message ("particular" in terms of referencing the service's name).</p>
<p>My question: what is the proper, Pythonic way to have a multi-conditional function return a boolean <em>and</em> a string (for use in a printed message)?</p>
<p>Here's a stripped-down version of my current solution (using tuples):</p>
<pre><code>import subprocess
import time

def _isProcessRunning(cmd):
    return int(
            subprocess.check_output(
                '{} | grep -v grep | wc -l'.format(cmd),
                shell=True
                )
            ) &gt; 0

def processGroupFound():
    if _isProcessRunning('ps auwxx | grep duplicity'):
        return (True, 'Duplicity')
    elif _isProcessRunning('who | grep pts'):
        return (True, 'SSH')
    elif _isProcessRunning('netstat -na | grep ESTA | grep 5901'):
        return (True, 'VNC')
    else:
        return (False, '')

def worker():
    while True:
        process_found, service_string = processGroupFound()
        if process_found:
            print('{} found; skipping'.format(service_string))
        else:
            print('Continuing on')
        time.sleep(10)


if __name__ == "__main__":
    worker()
</code></pre>
<p>This works, but I care about doing it correctly (stylistically, in particular, but if you glean incorrect logic in this brief sample, please feel free to comment there, too. Appreciate your assistance!</p>
</div>
<div class="post-text" itemprop="text">
<p>An empty string in Python is "falsey", so it's somewhat redundant to return (False, ''). I might do this instead:</p>
<pre><code>def processGroupFound():
    if _isProcessRunning('ps auwxx | grep duplicity'):
        return 'Duplicity'
    elif _isProcessRunning('who | grep pts'):
        return 'SSH'
    elif _isProcessRunning('netstat -na | grep ESTA | grep 5901'):
        return 'VNC'
    else:
        return ''

def worker():
    while True:
        service_string = processGroupFound()
        if service_string:
            print('{} found; skipping'.format(service_string))
        else:
            print('Continuing on')
        time.sleep(10)
</code></pre>
<p>(See <a href="https://docs.python.org/3/library/stdtypes.html" rel="noreferrer">4.1 Truth Value Testing</a>)</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this would be pythonic too (but may be it's just me)</p>
<pre><code>class NoRunningService(RuntimeError): pass

def findService():
    if _isProcessRunning('ps auwxx | grep duplicity'):
        return 'Duplicity'
    elif _isProcessRunning('who | grep pts'):
        return 'SSH'
    elif _isProcessRunning('netstat -na | grep ESTA | grep 5901'):
        return 'VNC'
    else:
        raise NoRunningService

def worker():
    while True:
        try:
            service_string = findService()
        except NoRunningService:
            print('Continuing on')
        else:
            print('{} found; skipping'.format(service_string))
        time.sleep(10)
</code></pre>
</div>
<span class="comment-copy">This is fine. Perfectly idiomatic. I might omit the parens (<code>return True, 'Duplicity'</code>), but then again I might not in some cases.</span>
<span class="comment-copy">Lots of other options here too <a href="http://stackoverflow.com/questions/354883/how-do-you-return-multiple-values-in-python" title="how do you return multiple values in python">stackoverflow.com/questions/354883/…</a></span>
<span class="comment-copy">I wouldn't bother with the parentheses around the <code>return</code> statements, but otherwise, seems okay. I'm always suspicious of <code>shell=True</code>, and using external utilities for things Python can do (the <code>grep</code> and <code>wc</code> work), but that's separate from what you're asking about.</span>
<span class="comment-copy">Thanks, all, for your comments (especially yours, @ShadowRanger – I'm going to use shell processes for the bare minimum, then Python for the bulk of the work).</span>
<span class="comment-copy">Testing the returned value is C-ish instead of pythonic, that's why I prefer the exception solution.</span>
<span class="comment-copy">Thanks for your answer! I had forgotten about the "falsey-ness" of empty strings.</span>
<span class="comment-copy">The answer @Gribouillis gave wasn't there when I started writing mine. I agree that his is more pythonic - it gets points under "ask forgiveness, not permission" at the least.</span>
<span class="comment-copy">Thanks so much. Psychologically, I grapple with the idea of an "exception" as a "fatal error that needs correcting." I'll work on that. ;)</span>
<span class="comment-copy">It's much more than that. When a function does not handle a case, raise an exception!</span>
