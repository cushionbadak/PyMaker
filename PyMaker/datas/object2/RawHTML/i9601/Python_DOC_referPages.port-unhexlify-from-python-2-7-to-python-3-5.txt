<div class="post-text" itemprop="text">
<p>I'm unfamiliar to Python, and I need to port from 2.7 to 3.5.
In 2.7:</p>
<pre><code>&gt;&gt;&gt; unhexlify( '2FE2' )[0]
'/'
</code></pre>
<p>In 3.5:</p>
<pre><code>&gt;&gt;&gt; unhexlify( '2FE2' )[0]
47
</code></pre>
<p>I've tried using:</p>
<pre><code>&gt;&gt;&gt; str(unhexlify( '2FE2' ))[0]
'b'
</code></pre>
<p>or:</p>
<pre><code>&gt;&gt;&gt; bytes.fromhex('2FE2')[0]
47
&gt;&gt;&gt; decode_hex('2FE2')[0][0]
47
</code></pre>
<p>I just can't get the correct ascii. I bump into the representation Python uses: b'... or always getting an int</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p><code>unhexlify</code> returns a <code>bytes</code> object, and indexing into a <code>bytes</code> object produces an integer in Python 3 (a <code>bytes</code> object holds a sequence of integers in the range 0-255).</p>
<p>If you wanted to get another <code>bytes</code> object, use slicing instead:</p>
<pre><code>unhexlify('2FE')[:1]
</code></pre>
<p>This works in both Python 2 and 3.</p>
</div>
<span class="comment-copy">From what I see, Python 3 adds in the object the "type" on index 0, thus the "b" identifying a byte array. Is my understanding correct? If so, why, makes no sense to me. Slicing is just removing the "b"? I'm confused</span>
<span class="comment-copy">@TheSingularity_: you are getting confused with string literal notations. You can create a <code>bytes</code> object with the <code>b'...'</code> literal notation, so <code>bytes([102, 111, 111])</code> and <code>b'foo'</code> produce the same value. When you use <code>repr()</code> or <code>str()</code> on such an object (or echo it in the Python interactive interpreter or use <code>print()</code> on one, which use <code>repr()</code> and <code>str()</code> respectively), then Python produces the <code>b'....'</code> syntax again for you so you can easily reproduce that value. Just copy the output, paste it into Python code, and you have the same thing again.</span>
<span class="comment-copy">@TheSingularity_: all that is <i>syntax</i> however. Slicing works on the <i>value</i>, not the syntax. The <code>b</code> and the quotes are not part of the value. So <code>bytesobject[:1]</code> will create a new <code>bytes</code> object with the bytes indicated by the slice. For <code>b'foo'</code> that returns <code>b'f'</code>, that first byte.</span>
<span class="comment-copy">@TheSingularity_: there are a few other string literal notations that use different prefixes, see the <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">reference documentation on string and bytes literals</a>.</span>
