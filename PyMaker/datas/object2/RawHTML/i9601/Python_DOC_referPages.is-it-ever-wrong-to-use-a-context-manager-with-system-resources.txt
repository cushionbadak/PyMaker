<div class="post-text" itemprop="text">
<p>Trying to understand things at a deeper level.</p>
<p>If I am opening a file, or a web request, tensorflow session, or anything that can be handled with a <code>with</code> statement; is there <strong><em>ever</em></strong> a time when I shouldn't use a <code>with</code> statement?</p>
<p>E.g., is there ever a time when I should use the more generic / general <code>try</code> <code>except</code> structure?</p>
<p>My real question is, what is the underlying structure of what <code>with</code> really does?  I read some nice <a href="https://jeffknupp.com/blog/2016/03/07/python-with-context-managers/" rel="nofollow noreferrer">helpful hints</a> as well as <a href="https://docs.python.org/3/reference/compound_stmts.html#with" rel="nofollow noreferrer">the documentation itself</a>, but still some of the inner workings of <code>with</code> seem a bit like black magic to me.  I am trying to demystify the magical components.</p>
</div>
<div class="post-text" itemprop="text">
<p>I always go to the Python Enhancement Proposals (PEPs) to understand concepts in python since they focus more on the conceptual reasoning for things compared to the documentation and usually directly address:</p>
<ul>
<li>the reason for the new feature / change.</li>
<li>how it could be done with existing code / how it affects existing code.</li>
</ul>
<p>since you are interested in the implementation aspect here is a relevant exert from <a href="https://www.python.org/dev/peps/pep-0343/#specification-the-with-statement" rel="nofollow noreferrer">PEP 343 - the "with" statement</a>:</p>
<blockquote>
<h2>Specification: The 'with' Statement</h2>
<p>A new statement is proposed with the syntax:</p>
<pre><code>with EXPR as VAR:
    BLOCK
</code></pre>
<p><em>(paragraph omitted - not really relevent for this question)</em></p>
<p>The translation of the above statement is:</p>
<pre><code>mgr = (EXPR)
exit = type(mgr).__exit__  # Not calling it yet
value = type(mgr).__enter__(mgr)
exc = True
try:
    try:
        VAR = value  # Only if "as VAR" is present
        BLOCK
    except:
        # The exceptional case is handled here
        exc = False
        if not exit(mgr, *sys.exc_info()):
            raise
        # The exception is swallowed if exit() returns true
finally:
    # The normal and non-local-goto cases are handled here
    if exc:
        exit(mgr, None, None, None)
</code></pre>
</blockquote>
<p>So the internal workings of the with statement are exactly implemented like <code>try: finally</code> constructs, just with a cleaner syntax that makes it harder to forget to close files etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are reasons for not using a <code>with</code>-statement: If a failure/success requires custom cleanup.</p>
<p>Normally you shouldn't need to know what cleanups should be performed when you have finished with a file. The <code>with</code>-statement takes care of closing the file no matter what (except for cases where Python has no chance of entering the <code>__exit__</code> method of the contextmanager, for example an abrupt system shutdown or similar really exceptional stuff).</p>
<p>But if you need to perform some <em>local</em> and <em>important</em> cleanup then using a <code>try/except/finally</code> <em>might</em> make more sense. An important keyword in this context is: <a href="https://en.wikipedia.org/wiki/Separation_of_concerns" rel="nofollow noreferrer">separation of concerns</a>.</p>
<p>Say you call a function that hypothetically creates an object that isn't managed by Pythons GC and open a file and try to write it to a file. In this case you need to perform more cleanup than just opening and closing the file:</p>
<pre><code>def func():
    bad_object = create_object_that_cannot_be_cleaned_by_pythons_gc():
    try:
        with open(filename, 'w') as file:
            file.write(bad_object.to_string())
    finally:
        bad_object.delete()
</code></pre>
<p>I had a really hard time to think of an example where it's of advantage to use <code>try/finally</code> instead of just creating a contextmanager and I'm not sure I suceeded (Normally I would implement this example as contextmanager :-) ). The important part should be that contextmanagers perform a default cleanup operation not localized, custom cleanup.</p>
</div>
<span class="comment-copy"><code>with</code> has  <code>__enter__</code> and <code>__exit__</code> methods, which makes it good for opening and closing things.  You wouldn't use it for exception handling for example, which is where <code>try/except/...</code> blocks are more useful.</span>
<span class="comment-copy">I guess this is more about the <code>finally:</code> part.</span>
<span class="comment-copy">yes: if you are using a version of python that doesn't have <code>with</code> then you should use <code>try: finally</code> instead.</span>
<span class="comment-copy">It sounds like you're looking for <a href="https://www.python.org/dev/peps/pep-0343/" rel="nofollow noreferrer">PEP 343</a> which describes how the <code>with</code> statement works.</span>
<span class="comment-copy">If you are opening a file, AFAIK using <code>with</code> will potentially be <i>better</i> in terms of system resources, because your file will always be closed after the block, freeing up system resources that may not be freed up if you use <code>open()</code> on its own and forget to use <code>close()</code> on the file object.</span>
<span class="comment-copy">Awesome!  This is exactly what I was looking for, but couldn't seem to find it.  Thanks @Tadhg.</span>
<span class="comment-copy">I'm pretty sure that is what the <code>__del__</code> method is for, so when an object is garbage collected it runs a procedure to clean up it's resources.  I'd wonder if a better example would be where the cleanup isn't necessarily always the same, like if I wanted to write a certain string at the end of a file regardless of what else was written to it_ that would certainly make more sense in a <code>finally</code> block then it's own context manager. (unless I did that often, then I'd make the manager to handle it)</span>
<span class="comment-copy">Thanks, @MSeifert!  The fact that you had so much trouble finding an example helps to answer my question.  Sounds like the cases are so rare that I can safely ignore them, and re-think about it when I'm working with really odd objects.</span>
