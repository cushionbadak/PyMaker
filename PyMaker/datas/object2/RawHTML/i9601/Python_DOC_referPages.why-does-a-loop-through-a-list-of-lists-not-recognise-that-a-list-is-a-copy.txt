<div class="post-text" itemprop="text">
<p>I encountered a (in my opinion) extremely strange behavior, when looping through a list of lists. It is very difficult to explain, but here is an example code:</p>
<pre><code>k = [[0],[1],[2]]

for lis in k:
    lis_copy = lis
    lis_copy.append(0)
    print lis
</code></pre>
<p>When executing this, I get: </p>
<pre><code>[0, 0]
[1, 0]
[2, 0]
</code></pre>
<p>This is very strange for me, as the list which is appended is a copy of lis,
but lis is appended as well. I would assume this list to be untouched.
For example doing the same with a list of integers the following happens:</p>
<pre><code>k = [0,1,2]

for num in k:
    num_copy = num
    num_copy = 0
    print num
</code></pre>
<p>Output:</p>
<pre><code>0
1
2
</code></pre>
<p>Just as expected num is not touched by the manipulation of num_copy.</p>
<p>If somebody could explain why this is happening and how to avoid this, 
like how to disconnect the lis_copy from is, that would be great.</p>
<p>Wow, I am amazed I did not encounter mayor problems before, without knowing this. I think I should review quiet some of my code. Anyway I thought this is somehow connected to the loop, this seems not to be the case, therefore I think the best explanation can be found here: </p>
<p><a href="https://stackoverflow.com/questions/2612802/how-to-clone-or-copy-a-list">How to clone or copy a list?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>copy.copy()</code> or <code>copy.deepcopy()</code>to avoid this behavior:</p>
<pre><code>import copy

k = [[0],[1],[2]]

for lis in k:
    lis_copy = copy.copy(lis)
    lis_copy.append(0)
    print lis
</code></pre>
<p>Output:</p>
<pre><code>[0]
[1]
[2]
</code></pre>
<p>Source: <a href="https://docs.python.org/2/library/copy.html" rel="nofollow noreferrer">https://docs.python.org/2/library/copy.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This is because Python lists (and dicts) are not copied to a new list, but the new list becomes a reference to that list. if you truly want to copy the list, use deepcopy</p>
</div>
<div class="post-text" itemprop="text">
<p>Case a:</p>
<pre><code>k = [[0],[1],[2]]

for lis in k:
    lis_copy = lis
    lis_copy.append(0)
    print lis
</code></pre>
<p>We have a pointer to a list, and inside the loop we have another pointer made that points to the inner list objects. Then a zero is appended to each object.</p>
<p>Case b:</p>
<pre><code>k = [0,1,2]

for num in k:
    num_copy = num
    num_copy = 0
    print num
</code></pre>
<p>We have a pointer to a list, and inside the loop we have another pointer made that points to the inner integers. The difference is that in this case the pointer is changed to then point to a zero object rather than the list elements.</p>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/184710/what-is-the-difference-between-a-deep-copy-and-a-shallow-copy" title="what is the difference between a deep copy and a shallow copy">stackoverflow.com/questions/184710/â€¦</a></span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/copy.html" rel="nofollow noreferrer">docs.python.org/3/library/copy.html</a></span>
<span class="comment-copy">I think you're missing some key knowledge about Python here - read this for an overview of calling be reference and calling by name: <a href="http://www.python-course.eu/passing_arguments.php" rel="nofollow noreferrer">python-course.eu/passing_arguments.php</a></span>
<span class="comment-copy">lis_copy = lis does not create a new list, it simply points to the original list. Python3 has a copy method but I think you have to slice the list to copy in 2.7. Something like lis_copy = list[:]</span>
<span class="comment-copy">can you give an example, why a copy of the list with reference is needed, I just wondered where the advantage of that behavior is ?</span>
