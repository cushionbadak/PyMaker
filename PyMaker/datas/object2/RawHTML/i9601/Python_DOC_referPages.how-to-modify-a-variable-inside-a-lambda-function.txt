<div class="post-text" itemprop="text">
<p>I am trying to do something like this:</p>
<pre><code>def myFunc(y):
    aVariable = "a"
    bVariable = "b"
    y(aVariable,bVariable)

def main():
    myFunc(lambda a,b: a+=b)
</code></pre>
<p>and expecting the output to be <code>"ab"</code>. </p>
<p>Instead I get the following error: </p>
<pre><code>File "&lt;stdin&gt;", line 7
  myFunc(lambda x, y: x += y)
                        ^
SyntaxError: invalid syntax
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Only <a href="https://docs.python.org/3/reference/expressions.html" rel="nofollow noreferrer"><strong><em>expressions</em></strong></a> are allowed in the body of a <code>lambda</code> function; <code>a += b</code> is an <a href="https://docs.python.org/3/reference/simple_stmts.html#augmented-assignment-statements" rel="nofollow noreferrer">augmented assignment <strong><em>statement</em></strong></a>, when compiled, this will lead to a <code>SyntaxError</code> as the grammar doesn't allow it. </p>
<p>You can either change it to simply return the addition:</p>
<pre><code>lambda a,b: a+b
</code></pre>
<p>and then proceed to set the result of calling it to <code>a</code> appropriately:</p>
<pre><code>a = y(aVariable,bVariable)
</code></pre>
<p>You could of course resort to using the function that is used for that operation. Though you could directly do <code>lambda a, b: a.__iadd__(b)</code>, this is clunky and using dunders like this isn't the best practice. Instead, you should use the appropriate operation from the <code>operator</code> module. </p>
<p><a href="https://docs.python.org/3/library/operator.html#operator.iadd" rel="nofollow noreferrer">The <code>iadd</code> function from <code>operator</code></a> allows you to bypass this "restriction" if you truly need to. <em>Function calls are <strong>expressions</strong></em></p></div>
<span class="comment-copy">Why doesn't <code>myFunc</code> have a <code>return</code> statement? If you expect <code>y</code> to mutate <code>aVariable</code> &amp;/or <code>bVariable</code> that's not going to happen, no matter what <code>y</code> does, because both <code>aVariable</code> &amp; <code>bVariable</code> are strings, and Python strings are immutable.</span>
<span class="comment-copy">Right you are, i change my question.</span>
