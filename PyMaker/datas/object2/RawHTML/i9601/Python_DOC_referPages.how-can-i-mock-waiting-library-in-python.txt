<div class="post-text" itemprop="text">
<p>I'm using the <a href="https://github.com/vmalloc/waiting" rel="nofollow noreferrer"><code>waiting</code></a> library in some of my code to wait for a condition to become true. As a part of the library, <code>waiting.wait</code> returns <code>True</code> when the predicate is true; otherwise it throws and exception or waits forever depending on timeout values, etc.</p>
<p>I'd like to patch this in my tests to always return <code>True</code> without getting into the wait cycle. Here's my attempt:</p>
<pre><code>#!/usr/bin/env python3

from unittest.mock import Mock
import waiting
from waiting import wait

def test_waiting():
    waiting.wait.return_value = True
    # Below *should* wait forever because it can never be true.
    # Want to make it return true instead.
    return wait(lambda: False)

if __name__ == "__main__":
    assert(test_waiting())
</code></pre>
<p>What I find, though, is that it actually calls the library's code instead of short-circuiting the return.</p>
<p>How can I force this method to simply return a value (or raise a side-effect) without actually calling the code?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>waiting.wait.return_value = True</code> won't work, because <code>waiting.wait</code> is not a mock object. You only added an arbitrary attribute to the existing <code>wait</code> function, but that function won't use that attribute.</p>
<p>To mock out the <code>wait</code> function, just <em>mock it directly</em>:</p>
<pre><code>from unittest import mock

with mock.patch('__main__.wait'):
    wait.return_value = True
</code></pre>
<p>There is no need to mock the internals of the <code>waiting</code> library, all you want to happen in your code is that any use of the <code>wait()</code> callable immediately returns.</p>
<p>Note that I picked the <code>__main__</code> module to patch the name <code>wait()</code> in, see <a href="https://docs.python.org/3/library/unittest.mock.html#where-to-patch" rel="nofollow noreferrer"><em>Where to patch</em></a> in the <code>unittest.mock</code> documentation.</p>
<p>Your actual location may differ, and if you used <code>import waiting</code> everywhere, then you'd have to use <code>mock.patch('waiting.wait')</code>. Otherwise, you generally would apply it the same module you used <code>from waiting import wait</code> in.</p>
</div>
<span class="comment-copy">Well, that was silly of me. :) Works perfectly. Cheers!</span>
