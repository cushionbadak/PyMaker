<div class="post-text" itemprop="text">
<pre><code>local variable 'Document' referenced before assignment
</code></pre>
<p>I keep on getting this variable unbound error but i do not seem to understand why.</p>
<p>Importing it seems fine. I am using django 1-10</p>
<pre><code>from django.shortcuts import render

# Create your views here.
from forms import DocumentForm
from models import Document

def SaveDocument(request):
    saved = False
    if request.method == "POST":
        #Get the posted form
        MyDocumentForm = DocumentForm(request.POST, request.FILES)

        if MyDocumentForm.is_valid():
            print 'It enters here'
            Document = Document()
            Document.name = MyDocumentForm.cleaned_data["name"]
            Document.document = MyDocumentForm.cleaned_data["document"]
            Document.save()
            saved = True
        else:
            print 'Fails'
    else:
        MyDocumentForm = DocumentForm()

    return render(request, 'saved.html', locals())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that you just redefine Document inside SaveDocument() function.
Just rename local variable to <code>document</code> instead of <code>Document</code>:</p>
<pre><code>document = Document()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When Python parses the body of a function definition and encounters an assignment such as </p>
<pre><code>foo = ...
</code></pre>
<p>Python interprets <code>foo</code> as a local variable by default.</p>
<p>Hence, when you mentioned:</p>
<pre><code>Document = Document()
</code></pre>
<p>The <code>Document</code> you imported was no longer accessible within your <code>SaveDocument()</code> function. In order to make this work, change it to:</p>
<pre><code>document = Document()
</code></pre>
<p>and use the referrence of <code>document</code> in rest of your code.</p>
<p>You may verify this via telling Python to use the <code>global</code> reference of <code>Document</code> <em>(which will let you execute your current code)</em> as:</p>
<pre><code>global Document 
Document = Document()  
# NOTE: Do not use this in actual code. It is bad practice to 
# override the imported modules, class, function with the variable names
</code></pre>
<hr/>
<p>As per the Python's <a href="https://docs.python.org/3/reference/simple_stmts.html#the-global-statement" rel="nofollow noreferrer">The <code>global</code> statement</a> document:</p>
<blockquote>
<p>The global statement is a declaration which holds for the entire current code block. It means that the listed identifiers are to be interpreted as globals. It would be impossible to assign to a global variable without global, although free variables may refer to globals without being declared global.</p>
</blockquote>
</div>
<span class="comment-copy"><code>Document = Document()</code>... You just overwrote the import. Don't make your variables uppercase, anyways</span>
