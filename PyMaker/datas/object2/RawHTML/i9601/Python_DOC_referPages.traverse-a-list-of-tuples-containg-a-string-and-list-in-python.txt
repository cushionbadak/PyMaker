<div class="post-text" itemprop="text">
<p>I have a list of tuples which contains a string and another list. It is as follows:</p>
<pre><code>board = [('10S', []), ('3H', []), ('6C', ['KS', '9C']), ('6H', []), ('7D', []), ('9S', ['AS', 'KS'])]
</code></pre>
<p>I want to traverse such that comparison is done as follows:</p>
<pre><code>10S 3H
3H 6C
6C KS
6C 9C
6C 6H
6H 7D  
</code></pre>
<p>and so on...</p>
<p>That is the <code>get_mapping()</code> written below will call the values for <code>prev2</code> and <code>prev1</code>. </p>
<p>I have implemented the following code:</p>
<pre><code>for val in board:
    print "Val is: " + str(val)
    if cnt == 0:
        prev2 = val[0][0]
        prev1 = val[1][0]
        cnt += 1
        get_mapping(prev2,prev1,True)
    else:
        prev2 = prev1
        if len(val[1]) &gt; 0:
            for v in val[1]:
                prev1 = v
                cnt += 1
                get_mapping(prev2,prev1,False)
        else:
            prev1 = val[0]
            cnt += 1
            get_mapping(prev2,prev1,True)    
</code></pre>
<p>I know the first condition is wrong. I am stuck a little as to how to traverse to get above comparison. Any help will be appreciated.  </p>
</div>
<div class="post-text" itemprop="text">
<p>You could write a generator yielding pairs:</p>
<pre><code>from itertools import zip_longest

master_board_state = [('10S', []), ('3H', []), ('6C', ['KS', '9C']),
                      ('6H', []), ('7D', []), ('9S', ['AS', 'KS'])]

def pairs(state):
    for (key, lst), nxt in zip_longest(state, state[1:]):
        yield from ((key, x) for x in lst)
        if nxt is not None:
            yield key, nxt[0]

print('\n'.join(str(p) for p in pairs(master_board_state)))
</code></pre>
<p>Output:</p>
<pre><code>('10S', '3H')
('3H', '6C')
('6C', 'KS')
('6C', '9C')
('6C', '6H')
('6H', '7D')
('7D', '9S')
('9S', 'AS')
('9S', 'KS')
</code></pre>
<p>In above <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer"><code>zip_longest</code></a> will yield items from <code>state</code> as pairs. Since first parameter is longer than second one on last iteration <code>None</code> is used as fillvalue. Then the loop will first <code>yield from</code> generator that returns <code>(key, list item)</code> tuples and finally yields current and next key.</p>
<p><strong>Update</strong> For Python 2 minor modifications are required since it doesn't have <code>yield from</code> and <code>zip_longest</code> is known as <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer"><code>izip_longest</code></a>:</p>
<pre><code>from itertools import izip_longest

master_board_state = [('10S', []), ('3H', []), ('6C', ['KS', '9C']),
                      ('6H', []), ('7D', []), ('9S', ['AS', 'KS'])]

def pairs(state):
    for (key, lst), nxt in izip_longest(state, state[1:]):
        for x in lst:
            yield key, x
        if nxt is not None:
            yield key, nxt[0]

print '\n'.join(str(p) for p in pairs(master_board_state))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So this is very specific kind of traversal, which can be done through a generator.</p>
<p>Update: initially tried with a complex generator expression but missed the tail so had to end up with a generator function similar to @niemmi but with a slightly different approach.</p>
<pre><code>from itertools import tee

# from itertools recipes
def pairwise(iterable):
    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    return zip(a, b)

def pairs(d):
    for (a, x), (b, y) in pairwise(d):
        yield from ((a, n) for n in x)
        yield a, b
    yield from ((b, n) for n in y)

&gt;&gt;&gt; list(pairs(board))
[('10S', '3H'),
 ('3H', '6C'),
 ('6C', 'KS'),
 ('6C', '9C'),
 ('6C', '6H'),
 ('6H', '7D'),
 ('7D', '9S'),
 ('9S', 'AS'),
 ('9S', 'KS')]
</code></pre>
</div>
<span class="comment-copy">I am getting an error at this line "yield from ((key, x) for x in lst)" telling me it is an invalid syntax.</span>
<span class="comment-copy">@hshantanu You're probably using Python 2 which doesn't have <code>yield from</code> or <code>zip_longest</code>. See the updated answer for Python 2 version.</span>
<span class="comment-copy">Thanks for the help. It works.</span>
<span class="comment-copy">Nice answer, though it will need some minor modifications for Python 2. As 'yield from' won't work in Python 2.</span>
<span class="comment-copy">Indeed, turn the <code>yield from ...</code> into <code>for i in ...: yield i</code>.</span>
