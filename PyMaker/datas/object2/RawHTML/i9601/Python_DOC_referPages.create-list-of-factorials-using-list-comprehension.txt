<div class="post-text" itemprop="text">
<p>I'm trying to build a list of the first ten factorials </p>
<pre><code>[1,1,2,6,24,120,720,5040,40320,362880]
</code></pre>
<p>using only list comprehension. Is that possible?</p>
<p>I don't know generators or <code>lambda</code>.</p>
<p>Here's my attempt, but I absolutely know why it's wrong:</p>
<pre><code>lst = [1] + [i for i in range(1,10)]
lst[1:10] = [lst[i-1] * i for i in range(1,10)]
print(lst)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just for fun:</p>
<p>One-liner mega-hack using list comprehension and an auxililary accumulator to reuse previously computed value</p>
<pre><code>s=[];  s=[s[-1] for x in range(1,10) if not aux.append(x*s[-1] if aux else 1)]
</code></pre>
<p>result:</p>
<pre><code>[1, 2, 6, 24, 120, 720, 5040, 40320, 362880]
</code></pre>
<p>note: The <code>math.factorial</code> answer is the way when elements are random. Here it's faster because we can reuse previous results.</p>
<p>There's also another drawback: the need to store all elements in a <code>list</code> because python does not allow <code>if</code> and assignment like C does. So we have to append to a list and negate the <code>None</code> it returns so <code>if</code> test is <code>True</code></p>
<p>As I said: fun, but still a hack.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/math.html#math.factorial" rel="nofollow noreferrer"><code>math.factorial()</code></a>:</p>
<pre><code>import math

[math.factorial(n) for n in range(10)]
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>&gt;&gt;&gt; import math
&gt;&gt;&gt; 
&gt;&gt;&gt; [math.factorial(n) for n in range(10)]
[1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your attempt does not work because the list comprehension works element-wise, you cannot refer to <code>lst[i-1]</code> like that. There is a <code>factorial</code> function in <code>math</code> module, however, since you mentioned generators, you can use one like this</p>
<pre><code>def mygenerator():
    total = 1
    current = 1
    while True:
        total *= current
        yield total
        current += 1

factorial = mygenerator()
output = [next(factorial) for i in range(10)]
</code></pre>
</div>
<span class="comment-copy">I'd recommend showing some attempts</span>
<span class="comment-copy">write a function that calculates the factorial (<code>def fact(n):...return res</code>) for a number <code>n</code> and then use a list comprehension like: <code>[fact(x) for x in range(10)]</code></span>
<span class="comment-copy">@Ev.Kounis Maybe the OP is asking us to write him a list comprehension that does not use <i>any</i> function ;)</span>
<span class="comment-copy">this is what i had in mind too ☺. 3! is just 2! * 3 and 2! is the last element on the list so far when 3! is about to be computed.</span>
<span class="comment-copy">This doesn't really require both the <code>aux</code> and <code>s</code> variables—just write the second part this way: <code>aux = [aux[-1] for x in range(1,10) if no...</code></span>
<span class="comment-copy">or use just <code>s</code> :)</span>
<span class="comment-copy">Yes, Python comes with batteries included :)</span>
<span class="comment-copy">@LutzHorn, yes and thanks for your edit ;)</span>
<span class="comment-copy">Although this is very concise, it's likely much, much slower for calculating large values of <code>n</code> since each call to <code>math.factorial(n)</code> <b>recomputes</b> all the intermediate values for 0! to (n-1)! every time it's called.</span>
<span class="comment-copy">Is this time friendly?</span>
<span class="comment-copy">Yes, in contrast to the recursive solution. It does not recompute values. It gives the factorials up to 500! in less than a second. With a recursive solution, you can't get to 20!</span>
<span class="comment-copy">@AkinjideBankole This solution computes <code>n!</code> by using <code>(n-1)!</code> which is already computed and does not do it all over again. So, yes. It should be even faster that the built-in <code>math.factorial()</code> for big n values</span>
