<div class="post-text" itemprop="text">
<p>I am using gunicorn to run my Flask application, however when the Flask application exits because of an error, gunicorn will create a new worker and not exit.</p>
<p>sample Flask application:</p>
<pre><code>$ vim app.py

# main file
import sys
import os
import logging
from flask import Flask

from views import views

def create_app():

    app = Flask(__name__)

    app_name = os.environ.get('FLASK_APP_NAME', None)
    if app_name is None:
        logging.error("Failed to load configuration")
        sys.exit(2)

    app.config['APP_NAME'] = app_name

    console = logging.StreamHandler(sys.stdout)
    logging.getLogger().addHandler(console)
    logging.getLogger().setLevel(logging.INFO)

    logging.info("Starting Flask application")

    app.register_blueprint(views)

    return app

app = create_app()

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8000, debug=False, threaded=True)


$ vim views.py

# views
from flask import request, jsonify, Blueprint
from flask import current_app as app

views = Blueprint('views', __name__)

@views.route("/", methods=["GET"])
def indexz():
    return jsonify(app=app.config['APP_NAME'], msg='OK'), 200
</code></pre>
<p>I tried using gunicorn's worker_exit server hook:</p>
<pre><code>$ vim gunicorn-config.py

import sys

workers = 2

def worker_exit(server, worker):
    sys.exit(2)
    # server.halt()
</code></pre>
<p>But this just throws an error and continues to spawn workers:</p>
<pre><code># error when using sys.exit(2)
[2016-12-10 01:28:53 +0000] [11916] [INFO] Booting worker with pid: 11916
ERROR:root:Failed to load configuration
[2016-12-10 01:28:53 +0000] [11915] [INFO] Worker exiting (pid: 11915)
[2016-12-10 01:28:53 +0000] [11915] [WARNING] Exception during worker exit:
Traceback (most recent call last):
  File "/usr/lib/python2.7/site-packages/gunicorn/arbiter.py", line 576, in spawn_worker
    self.cfg.worker_exit(self, worker)
  File "gunicorn-config.py", line 6, in worker_exit
    sys.exit(2)
SystemExit: 2


# error when using server.halt()
[2016-12-10 01:30:15 +0000] [12202] [INFO] Booting worker with pid: 12202
ERROR:root:Failed to load configuration
[2016-12-10 01:30:15 +0000] [12197] [INFO] Worker exiting (pid: 12197)
[2016-12-10 01:30:15 +0000] [12197] [INFO] Shutting down: Master
[2016-12-10 01:30:15 +0000] [12197] [WARNING] Exception during worker exit:
Traceback (most recent call last):
  File "/usr/lib/python2.7/site-packages/gunicorn/arbiter.py", line 576, in spawn_worker
    self.cfg.worker_exit(self, worker)
  File "gunicorn-config.py", line 7, in worker_exit
    server.halt()
  File "/usr/lib/python2.7/site-packages/gunicorn/arbiter.py", line 331, in halt
    self.stop()
  File "/usr/lib/python2.7/site-packages/gunicorn/arbiter.py", line 378, in stop
    self.kill_workers(sig)
  File "/usr/lib/python2.7/site-packages/gunicorn/arbiter.py", line 600, in kill_workers
    self.kill_worker(pid, sig)
  File "/usr/lib/python2.7/site-packages/gunicorn/arbiter.py", line 616, in kill_worker
    self.cfg.worker_exit(self, worker)
  File "gunicorn-config.py", line 7, in worker_exit
    server.halt()
  File "/usr/lib/python2.7/site-packages/gunicorn/arbiter.py", line 338, in halt
    sys.exit(exit_status)
SystemExit: 0
</code></pre>
<p>Edit: modified the exit code for my application to: <code>sys.exit(4)</code> as per <a href="https://github.com/benoitc/gunicorn/blob/master/gunicorn/arbiter.py#L37" rel="nofollow noreferrer">https://github.com/benoitc/gunicorn/blob/master/gunicorn/arbiter.py#L37</a>. This time the application does not infinitely restart but when there are 2 or more workers, this throws an exception:</p>
<pre><code>[2016-12-10 18:45:52 +0000] [22195] [INFO] Worker exiting (pid: 22195)
Traceback (most recent call last):
  File "/usr/bin/gunicorn", line 11, in &lt;module&gt;
    sys.exit(run())
  File "/usr/lib/python2.7/site-packages/gunicorn/app/wsgiapp.py", line 74, in run
    WSGIApplication("%(prog)s [OPTIONS] [APP_MODULE]").run()
  File "/usr/lib/python2.7/site-packages/gunicorn/app/base.py", line 192, in run
    super(Application, self).run()
  File "/usr/lib/python2.7/site-packages/gunicorn/app/base.py", line 72, in run
    Arbiter(self).run()
  File "/usr/lib/python2.7/site-packages/gunicorn/arbiter.py", line 218, in run
    self.halt(reason=inst.reason, exit_status=inst.exit_status)
  File "/usr/lib/python2.7/site-packages/gunicorn/arbiter.py", line 331, in halt
    self.stop()
  File "/usr/lib/python2.7/site-packages/gunicorn/arbiter.py", line 381, in stop
    time.sleep(0.1)
  File "/usr/lib/python2.7/site-packages/gunicorn/arbiter.py", line 231, in handle_chld
    self.reap_workers()
  File "/usr/lib/python2.7/site-packages/gunicorn/arbiter.py", line 506, in reap_workers
    raise HaltServer(reason, self.WORKER_BOOT_ERROR)
gunicorn.errors.HaltServer: &lt;HaltServer 'Worker failed to boot.' 3&gt;
</code></pre>
<p>How can I make the application exit without any exceptions being triggered.</p>
</div>
<div class="post-text" itemprop="text">
<p>This exits gunicorn:</p>
<pre><code>sys.exit(4)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Look at the <a href="http://docs.gunicorn.org/en/stable/settings.html#preload-app" rel="nofollow noreferrer">preload_app</a> option in <code>gunicorn</code> configuration. This will load your application in the parent. It should then be able to raise an exception and <code>gunicorn</code> will not start.</p>
</div>
<div class="post-text" itemprop="text">
<p>For the sake of completeness use standard errcodes:
<a href="https://docs.python.org/3/library/errno.html#errno.EINTR" rel="nofollow noreferrer">https://docs.python.org/3/library/errno.html#errno.EINTR</a></p>
<p>so:</p>
<pre><code>import sys, errno
sys.exit(errno.EINTR)
</code></pre>
</div>
<span class="comment-copy">have you tried creating Try-Except block to catch the exception and killing gunicorn in Except block?</span>
<span class="comment-copy">where would I put this try/except block?</span>
<span class="comment-copy">OMG Thank you! That's exactly what I was looking for â™¥ (although I'd suggest <code>sys.exit(4)</code>)</span>
<span class="comment-copy">Changed <code>os._exit(4)</code> to <code>sys.exit(4)</code> per suggestion from @RobinWinslow. It seems to work just as well.</span>
<span class="comment-copy">preload is not an option that I can use with my application</span>
<span class="comment-copy">What is the problem with using preload option?</span>
