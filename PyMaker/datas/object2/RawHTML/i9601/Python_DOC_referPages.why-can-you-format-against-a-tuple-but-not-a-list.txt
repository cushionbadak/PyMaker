<div class="post-text" itemprop="text">
<p>Consider the following:</p>
<pre><code>st = "Hi: %s, you are: %d"
x = ['user', 25]

st % x # Doesn't work
st % ("user", 25) # Works
st % (*x,) # Works
</code></pre>
<p>I just thought it was a very strange restriction</p>
</div>
<div class="post-text" itemprop="text">
<p>Ah, but you can "format against a list":</p>
<pre><code>In [4]: '%s' % [1,2]
Out[4]: '[1, 2]'
</code></pre>
<p>The <code>%</code> string interpolator can be followed by either a <a href="https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="nofollow noreferrer">single <em>non-tuple</em> object</a> or a tuple. </p>
<p>If it is a tuple, the arguments are unpacked and matched against placeholders in the strings. If the object is a single non-tuple object, then the entire object is passed to the placeholder in the string.</p>
<p>This somewhat manic behavior is part of what motivated the Python developers to introduce the syntactically cleaner <a href="http://docs.python.org/library/string.html#format-string-syntax" rel="nofollow noreferrer"><code>str.format</code></a> method.</p>
<p>Also, from <a href="https://www.python.org/dev/peps/pep-3101/" rel="nofollow noreferrer">PEP 3101</a>:</p>
<blockquote>
<p>The '%' operator is primarily limited by the fact that it is a
  binary operator, and therefore can take at most two arguments.
  One of those arguments is already dedicated to the format string,
  leaving all other variables to be squeezed into the remaining
  argument.  The current practice is to use either a dictionary or a
  tuple as the second argument, but as many people have commented, 
  this lacks flexibility.  The "all or nothing" approach
  (meaning that one must choose between only positional arguments,
  or only named arguments) is felt to be overly constraining.</p>
</blockquote>
</div>
<span class="comment-copy">Because the <a href="https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="nofollow noreferrer">specification</a> says so. For the rationale, you could try the python-dev mailing list.</span>
<span class="comment-copy">You should be using <code>str.format</code> anyway</span>
<span class="comment-copy"><code>Explicit is better than implicit</code> From Zen of Python.</span>
<span class="comment-copy">@Chris_Rands Yes, or just stick to printf-style formatting for now untill PEP 498 is ready for production use. To cite the mentioned PEP: "However, str.format() is not without its issues. Chief among them is its verbosity."</span>
<span class="comment-copy">Good point! And if they allowed any iterable instead of a tuple, suddenly a string would be interpreted as an iterable of characters.</span>
