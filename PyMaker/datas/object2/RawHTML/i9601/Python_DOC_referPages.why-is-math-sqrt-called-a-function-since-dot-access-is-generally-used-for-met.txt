<div class="post-text" itemprop="text">
<p>As an example: <code>math.sqrt()</code> is considered a <em>function</em> but, <code>"Lower".upper()</code> is known as the <code>.upper()</code> <em>method</em>. </p>
<p>Why is <code>math.sqrt</code> a function? Isn't the dot access indicative of methods?</p>
</div>
<div class="post-text" itemprop="text">
<p>Because <code>math</code> is a <em>module</em><sup>*</sup>, not a <em>class</em>. </p>
<p><code>sqrt</code> is a function defined inside the module <code>math</code>. You can access objects that have been defined in a module by normal dot <code>.</code> access on the module object. With modules though, no transformation of the function object occurs during that access, the object returned as is.<br/>
<sub>Specifically, <a href="https://docs.python.org/3/howto/descriptor.html#functions-and-methods" rel="nofollow noreferrer">since functions are <em>descriptors</em></a>, their <code>__get__</code> isn't invoked when accessed through the module.</sub></p>
<p><code>upper</code> is a function that's defined inside the <code>str</code> <em>class</em>. When you invoke it on a <code>str</code> instance using dot access, it is <em>transformed</em> into a <em>method</em> which implicitly receives the instance as a first argument.<br/>
<sub>Specifically, when accessed through a class, a function object's  <code>__get__</code> is invoked which, in turn, transforms the function into a method type.</sub></p>
<hr/>
<p>*Okay, I hate to do this, because it is confusing, but <a href="https://docs.python.org/3.5/library/types.html#types.ModuleType" rel="nofollow noreferrer">modules are also classes</a>. They are special in that they don't do the transformation as described previously. Specifically, their getattribute function that is invoked when an attribute is requested, doesn't act like the default for classes.</p>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/155609/difference-between-a-method-and-a-function" title="difference between a method and a function">stackoverflow.com/questions/155609/â€¦</a></span>
<span class="comment-copy">The <code>.call_expr()</code> doesn't automatically mean that <code>call_expr</code> is a method. <code>.</code> is just python's attribute access operator and the attributes of objects are method objects. See <a href="https://docs.python.org/2/tutorial/classes.html#instance-objects" rel="nofollow noreferrer">the docs</a> (<a href="https://docs.python.org/3/tutorial/classes.html#instance-objects" rel="nofollow noreferrer">3</a>).</span>
<span class="comment-copy">It's just a Python notation used for namespaces. Whether thing between is <code>.</code> or <code>::</code> (<a href="http://en.cppreference.com/w/cpp/language/namespace" rel="nofollow noreferrer">like in C++</a>) it's merely a design decision. Python is able to generalize all <code>.something</code> operations as <i>attribute access</i>, but that's just specific to Python language specification. Conceptually it's just a namespace mechanism.</span>
