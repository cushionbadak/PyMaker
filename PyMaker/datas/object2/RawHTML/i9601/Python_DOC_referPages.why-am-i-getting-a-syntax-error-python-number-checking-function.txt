<div class="post-text" itemprop="text">
<p>I've written this function in Python, which is designed to check if any list element is a number, and return that list element if it is. This is the code:</p>
<pre><code>def check_for_number(list):
x = 0
print(isinstance(list[x], (int, float))
true_or_false = False
for x in range(len(list)-1):
    if isinstance(list[x], (int, float) == True):
        true_or_false = True
        num = list[x]
    x += 1
print(true_or_false)
return true_or_false 
return num
</code></pre>
<p>Whenever I try to run it I get a syntax error saying that the colon at the end of the if statement is an 'unexpected token', and every item in the last two lines of the if statement gives the same unexpected token error. I've checked the indentation and I can't see anything wrong with it, what am I missing? Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>You just have to indend the code of your function and fix the <code>if isinstance(list[x], (int, float) == True):</code> part and close the paranthesis of your first print statement.</p>
<pre><code>def check_for_number(list):
    x = 0
    print(isinstance(list[x], (int, float)))
    true_or_false = False
    for x in range(len(list)-1):
        if isinstance(list[x], (int, float)) == True:
            true_or_false = True
            num = list[x]
        x += 1
    print(true_or_false)

    # Decide what you want to return here
    return true_or_false 
    return num
</code></pre>
<p>If you are interested in improving your code, remove the <code>== True</code> part, as has been stated in the comments as well. And from your question I assume you want to return fals, if <code>true_or_false</code> is <code>False</code> or <code>num</code> otherwise.</p>
<p>If you add a <code>break</code>statement in the loop, the loop will be exited when you have found the first number. So your computer does not need to loop through the complete list and this can save you some execution time.</p>
<p>I also expect, your <code>x += 1</code> statement is not what you want to do. The <code>for ... in range ...</code> loop will increase your x in each cycle. That is why <code>x += 1</code> will make your code skip every second list element. You also will not need to declare x first.</p>
<pre><code>def check_for_number(list):
    print(isinstance(list[x], (int, float)))
    true_or_false = False
    for x in range(len(list)-1):
        if isinstance(list[x], (int, float)):
            true_or_false = True
            num = list[x]
            break
    print(true_or_false)

    if (true_or_false):
        return num
    else:
        return False
</code></pre>
<hr/>
<p><em>Concering your question about the unnecessary <code>== True</code> part:</em></p>
<p>The if statement is working like the following pseudo code.</p>
<pre><code>if (CONDITION) == True then do something special
</code></pre>
<p>So, if you add a <code>== True</code>, python would check it like so:</p>
<pre><code>if (valeu == True) == True then do something special
</code></pre>
<p>which is the same as:</p>
<pre><code>if (value) == True then do something special
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a solution using a list comprehension.  It checks each element against the <code>Number</code> abstract base class.  It will return a list of numbers, since there might be more than 1 numeric elelement.</p>
<pre><code>import numbers

def get_numbers(l):
    return [x for x in l if isinstance(x, numbers.Number)]
</code></pre>
<p>example:</p>
<pre><code>&gt;&gt;&gt; l = ['1', 4.0, 'abc', 'XYZ', 'test', 5]
&gt;&gt;&gt; nums = get_numbers(l)
&gt;&gt;&gt; print(nums)
[4.0, 5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python is tab-sensitive and intolerant of errors in this regard. I'm also seeing an instance of an unmatched parenthesis on line 6. Try the following and you might get a more informative error on what to fix next:</p>
<pre><code>def check_for_number(list): 
    x = 0 
    print(isinstance(list[x], (int, float))
    true_or_false = False 
    for x in range(len(list)-1):
        if isinstance(list[x], (int, float) == True): # missing a parenthesis to close isinstance. 
        # "== True" is unnecessary because isinstance() will resolve to True or False
            true_or_false = True 
            num = list[x]
            x += 1 
            print(true_or_false) 
            return true_or_false 
    return num # this will result in unexpected behavior...
        # ...because num will not be defined if this line is reached.
        # Either the return inside the if will finish the method or num will never be defined.
</code></pre>
<p>It's a bit ambiguous how some of that should be indented because I can't tell what you're trying to do.</p>
<p>If you're trying to return to values, consider returning a list or a dictionary containing the values.</p>
</div>
<span class="comment-copy"><code>== True</code> is unnecessary. Get rid of it.</span>
<span class="comment-copy">You're missing a closing parenthesis on the end of the first print</span>
<span class="comment-copy">Also, you can't return after you've already returned, so you'll only get back <code>true_or_false</code>, which really should have a more descriptive name</span>
<span class="comment-copy">@JosephYoung Thanks, but even with that print statement completely removed I'm still getting the same syntax errors.</span>
<span class="comment-copy">@cricket_007 why is == True unnecessary? I thought that might be the case that a function can only return one value, thanks for clearing it up.</span>
<span class="comment-copy"><code>== True</code> is not conform to <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer"><code>PEP8</code></a>, instead use <code>is True</code> or just nothing!</span>
<span class="comment-copy">Thanks so much! The tips on optimising it are much appreciated. I am curious as to why == True can be omitted though? As I thought the if statement wouldn't execute otherwise. Cheers!</span>
<span class="comment-copy">the if statement will check a condition, if it is True or False. If the condition is True, the code in the block after the if will be executed. Otherwise the execution will continue after that block. For more clarification, please see my next answer update.</span>
<span class="comment-copy"><code>if (true_or_false): return num</code> seems verbose ... Just <code>return num</code></span>
<span class="comment-copy">@user2154065 Thankyou so much! Your explanation was really helpful, I also appreciate you pointing out the use of the x += 1 statement. You're right, that wasn't what I wanted to do haha. Cheers for the great advice. :)</span>
<span class="comment-copy">Thanks for the help. This is part of the code I'm working on for a task I've been set, and one of the rules for the task is that you can't use external libraries. Would the python standard libraries be excluded from this rule? I'm wondering if I can import modules like numbers?</span>
<span class="comment-copy">I would assume so... since the standard library is not an external (3rd party) library.</span>
<span class="comment-copy">@IH96 This is <a href="https://docs.python.org/3/library/numbers.html" rel="nofollow noreferrer">the standard library</a>,  nothing is external here</span>
<span class="comment-copy">Also, this is probably the better solution because it's all numbers, not just the first one that's found</span>
<span class="comment-copy">Probably should not <code>x += 1</code> within a range loop unless you want to skip elements</span>
