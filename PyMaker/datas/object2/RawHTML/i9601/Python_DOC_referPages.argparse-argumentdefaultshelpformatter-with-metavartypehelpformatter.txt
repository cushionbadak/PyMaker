<div class="post-text" itemprop="text">
<p>Is it possible to combine the functionality of <code>argparse.ArgumentDefaultsHelpFormatter</code> with <code>argparse.MetavarTypeHelpFormatter</code>?</p>
<p>There are examples on how to use any one of these in the <a href="https://docs.python.org/3/library/argparse.html#argparse.RawTextHelpFormatter" rel="nofollow noreferrer">docs</a>, but it's not clear how one would create help text that combines the best of both?</p>
<p>For example, I would like something like the following:</p>
<pre><code>parser = argparse.ArgumentParser(prog='PROG')
parser.add_argument('--foo', type=int, default=42, help='FOO!')
parser.add_argument('bar', nargs='*', default=[1, 2, 3], help='BAR!')
</code></pre>
<p>to produce something like the following:</p>
<pre><code>usage: PROG [-h] [--foo int] [float [float ...]]

positional arguments:
 float         BAR! (default: [1, 2, 3])

optional arguments:
 -h, --help  show this help message and exit
 --foo int   FOO! (default: 42)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In theory you can define a new formatter class that is a subclass of both of the other classes. (I could find a bug/issue where that is suggested by the developer.)  Whether that will work with this pair is needs to be tested or checked in the code.  Basically we need to see whether the methods that these 2 classes change are compatible.</p>
<pre><code>import argparse
class MyFormatter(argparse.ArgumentDefaultsHelpFormatter, argparse.MetavarTypeHelpFormatter):
    pass
parser = argparse.ArgumentParser(prog='PROG', formatter_class=MyFormatter)
parser.add_argument('--foo', type=float, default=42, help='FOO!')
parser.add_argument('bar', nargs='*', default=[1, 2, 3], help='BAR!', type=int)
parser.print_help()
</code></pre>
<p>produces</p>
<pre><code>2035:~/mypy$ python3.5 stack41195224.py 
usage: PROG [-h] [--foo float] [int [int ...]]

positional arguments:
  int          BAR! (default: [1, 2, 3])

optional arguments:
  -h, --help   show this help message and exit
  --foo float  FOO! (default: 42)
</code></pre>
<p>Note that I had to specify a <code>type</code> for the positional as well.  Without that I got an error:</p>
<pre><code>AttributeError: 'NoneType' object has no attribute '__name__'
</code></pre>
<p>With this requirement, I suspect the <code>MetavarTypeHelpFormatter</code> does not get much use.  The default 'string' type (None) will produce an error.  This is a convenience formatter class, and likely to create more problems than it solves.</p>
<p>The <code>defaults</code> help formatter just adds a ' (default: %(default)s)' string to the help string.  You can do that yourself.  So it is just a convenience class, not something that anyone requires.</p>
<p>The alternative to subclassing these 2 classes, is to subclass their parent, and include all the methods that the 2 subclasses change.</p>
<hr/>
<p>adding:</p>
<pre><code>parser.add_argument('foobar', type=str)
</code></pre>
<p>displays</p>
<pre><code>1039:~/mypy$ python3 stack41195224_1.py 
usage: PROG [-h] [--foo float] [int [int ...]] str

positional arguments:
  int          BAR! (default: [1, 2, 3])
  str

optional arguments:
  -h, --help   show this help message and exit
  --foo float  FOO! (default: 42)
</code></pre>
<p>Using just</p>
<pre><code>parser.add_argument('foobar')
</code></pre>
<p>produces</p>
<pre><code>AttributeError: 'NoneType' object has no attribute '__name__'
</code></pre>
</div>
<span class="comment-copy">The <code>MyFormatter</code> defined here doesn't work on my Linux, I get : <code>.../python3.6/argparse.py", line 688, in _get_default_metavar_for_positional     return action.type.__name__ AttributeError: 'NoneType' object has no attribute '__name__'</code></span>
<span class="comment-copy">@SebMa, read all my answer</span>
<span class="comment-copy">My positional parameter has indeed a specified type (I put <code>type=str</code>). Any idea ?</span>
<span class="comment-copy">@SebMa, see my edits</span>
<span class="comment-copy">Actually, I had to specify the <code>type</code> for all my optional parameters also. Now it works. Thanks for your help :)</span>
