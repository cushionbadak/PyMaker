<div class="post-text" itemprop="text">
<p>I am trying to sot the following 'tupled' list from smallest to largest:</p>
<p><strong><code>tuple1</code></strong>:</p>
<pre><code>[('Bread', 3.1), ('Cheese', 8.2), ('Milk', 6.1), ('Pasta', 4.5) ...
</code></pre>
<p>I like to sort the tuple by integers, in ascending order - I have attempted the following:</p>
<pre><code>&gt;&gt;&gt; sortedTuple = tuple1.sort(key=lambda x: (x[0],int(x[1]))
</code></pre>
<p>However, I receive the following output:</p>
<pre><code>None
</code></pre>
<p>My expected output would be:</p>
<pre><code>[('Bread', 3.1), ('Pasta', 4.5), ('Milk', 6.1), ('Cheese', 8.2)...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>sorted</code> built-in function.</p>
<pre><code>from operator import itemgetter

In [268]: tuple1
Out[268]: [('Bread', 3.1), ('Cheese', 8.2), ('Milk', 6.1)]

In [270]: res = sorted(tuple1, key=itemgetter(1))

In [271]: res
Out[271]: [('Bread', 3.1), ('Milk', 6.1), ('Cheese', 8.2)]
</code></pre>
<p><code>key=itemgetter(1)</code> means the same thing as <code>key=lambda x:x[1]</code> that is to say the second element of your tuples will be used as keys for sorting. But it's supposed to be faster.</p>
<p>If you want, here is a discussion about using <code>itemgetter(x)</code> instead of <code>[x]</code>: 
<a href="https://stackoverflow.com/questions/11287207/why-should-i-use-operator-itemgetterx-instead-of-x">Why should I use operator.itemgetter(x) instead of [x]?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer"><code>sorted()</code></a> like this:</p>
<pre><code>&gt;&gt;&gt; tuples_list = [('Bread', 3.1), ('Cheese', 8.2), ('Milk', 6.1), ('Pasta', 4.5)]
&gt;&gt;&gt; sorted(tuples_list, key=lambda item: item[1])
[('Bread', 3.1), ('Pasta', 4.5), ('Milk', 6.1), ('Cheese', 8.2)]
</code></pre>
<p><code>sorted()</code> takes a second argument, which is <code>key</code>, in this case, we use <a href="https://docs.python.org/3/reference/expressions.html#lambda" rel="nofollow noreferrer"><code>lambda</code></a> to sort our list based on the second item (<code>item[1]</code>) of each tuple. By default, the first item (<code>item[0]</code>) would be used.</p>
</div>
<div class="post-text" itemprop="text">
<p>simple, like this.
    considered,</p>
<pre><code>a=[('Bread', 3.1), ('Cheese', 8.2), ('Milk', 6.1), ('Pasta', 4.5)]

sort_2_value = sorted(a,key=lambda x: (x[1]))
</code></pre>
<p>Output:</p>
<pre><code>&gt;&gt;&gt;
[('Bread', 3.1), ('Pasta', 4.5), ('Milk', 6.1), ('Cheese', 8.2)]
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">You can use <code>sortedTuple = sorted(tuple1, key=lambda x: x[1])</code>. The lambda only requires you to specify the index that you want to sort on.</span>
<span class="comment-copy">Your tuple1 is a list btw tuples don't have a sort method.</span>
<span class="comment-copy">You know <code>tuple1</code> is actually a list and the reason you got <code>None</code> is because <code>list.sort</code> sorts a list <i>in place</i> and returns <code>None</code></span>
<span class="comment-copy">@Chris_Rands Thanks for the clarification :)</span>
<span class="comment-copy">Thanks :) That's great. An explanation would be even better.</span>
<span class="comment-copy">@BenF97 You say that you want to sort the tuple by integers, in ascending order, but what output do you expect for inputs like : <code>[('Milk', 3.4),('Bread', 3.1), ('Cheese', 3.2)]</code> ?</span>
<span class="comment-copy">I'd expect the output to be: <code>[('Bread', 3.1), ('Cheese', 3.2), ('Milk', 3.4)]</code>. Would that not apply for your answer?</span>
<span class="comment-copy">@BenF97 so it's good with my answer :)</span>
<span class="comment-copy">Thanks :) Good to know</span>
<span class="comment-copy">The question says that he wishes to sort based on the integer value, so you should cast the lambda key to int.</span>
<span class="comment-copy">@lucianopaz did you take a look at the OP's attempt and expected output?</span>
<span class="comment-copy">Yes, you get the same expected output because all values in the example differed by more than one. If this were not the case, the outputs could have been diferent.</span>
<span class="comment-copy">In any case, BenF97 wishes to sort based on the int value and not on the float value.</span>
