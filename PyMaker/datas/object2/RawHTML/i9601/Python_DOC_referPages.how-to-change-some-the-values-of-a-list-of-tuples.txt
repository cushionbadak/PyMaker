<div class="post-text" itemprop="text">
<p>I have the following list of tuples:</p>
<pre><code>lis = [('The', 'DET'),
 ('iphone', 'X'),
 ('is', 'VERB'),
 ('a', 'DET'),
 ('very', 'ADV'),
 ('nice', 'ADJ'),
 ('device', 'NOUN'),
 ('.', 'PUNCT'),
 ('However', 'ADP'),
 ('the', 'DET'),
 ('pixel', 'X'),
 ('is', 'VERB'),
 ('by', 'ADP'),
 ('far', 'ADV'),
 ('more', 'ADV'),
 ('interesting', 'ADJ'),
 ('since', 'ADV'),
 ('it', 'PRON'),
 ('was', 'AUX'),
 ('made', 'VERB'),
 ('by', 'ADP'),
 ('google', 'NOUN'),
 ('.', 'PUNCT')]
</code></pre>
<p>My main objective is to specifically change the values of the this tuples: <code>('iphone', 'X'), ('pixel', 'X'), ('google', 'NOUN')</code> to <code>('iphone', 'device'), ('pixel', 'device'), ('google', 'entity')</code>. Thus, since I am interested in preserve the order, I tried the following:</p>
<pre><code>tags['Google'] = 'device'
tags['pixel'] = 'device'
tags['iphone'] = 'entity'
#this one is not present in lis . Nevertheless, I would like to add it just in case I need it.
tags['galaxy'] = 'device'
tags = list(tags.items())
tags = OrderedDict(postag(str(sample)))
</code></pre>
<p>Since I added <code>tags['galaxy'] = 'device'</code> it is actually adding it at the end of the list as <code>('galaxy', 'device')</code>. Therefore, my question is how can I fix and update the values of for tuples if they exist?.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a list comprehension to rebuild the list</p>
<pre><code>tags = {'google': 'entity', 'iphone': 'device', ...}

lis = [(a, tags[a.lower()]) if a.lower() in tags else (a, b) for a, b in lis]
</code></pre>
<p>This will overwrite tuples like <code>('iphone', 'something')</code>, that is to say it doesn't care what's in the second variable.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you need to change this is place and already have the values you need to replace them with, I'd simply create a dictionary out of the replacement fields and then replace:</p>
<pre><code>rep = dict([('iphone', 'device'), ('pixel', 'device'), ('google', 'entity')])

for ind, (i, j) in enumerate(lis):
    if i in rep:
        lis[ind] = (i, rep[i])
</code></pre>
</div>
<span class="comment-copy">Is it necessary to use a list of tuples? Tuples are immutable so by design I wouldn't use them if I knew they may/would be changed. For example, perhaps you can use a dictionary to store the mappings, and maybe a separate list to keep the order of the keys?</span>
<span class="comment-copy">@MxyL Unfortunatly yes, tuples are necessary... I also figure out what your idea.</span>
<span class="comment-copy">What about if they do not exist in my text?. Do comprehension lists are enough robust to deal with this and not adding them?.</span>
<span class="comment-copy">This list comprehension will not put values in <code>lis</code> that are not already there.  Some reading on list comprehensions: <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">docs.python.org/3/tutorial/â€¦</a></span>
<span class="comment-copy">I got: <code>ValueError: too many values to unpack (expected 2)</code></span>
<span class="comment-copy">You have something in your <code>lis</code> that is not an <code>(a, b)</code> 2-ple</span>
<span class="comment-copy">Sorry I confused some names. This one worked very well.</span>
