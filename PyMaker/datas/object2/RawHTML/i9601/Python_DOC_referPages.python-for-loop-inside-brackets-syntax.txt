<div class="post-text" itemprop="text">
<p>So I'm trying to convert this Python function into Javascript. I'm new to Python, so some of the syntax is difficult for me to cipher. Here's both the original code and my attempt at JS-conversion. I know I've interpreted something wrong, because what I have now is an infinite loop.</p>
<p>Python:</p>
<pre><code>graph = [[0,1,0,0,1,0],[1,0,1,0,1,0],[0,1,0,1,0,0],[0,0,1,0,1,1],[1,1,0,1,0,0],[0,0,0,1,0,0]]

def N(vertex):
    c = 0
    l = []
    for i in graph[vertex]:
        if i is 1 :
         l.append(c)
        c+=1
    return l 

def bronk(r,p,x):
    if len(p) == 0 and len(x) == 0:
        print r
        return

    for vertex in p[:]:
        r_new = r[::]
        r_new.append(vertex)
        p_new = [val for val in p if val in N(vertex)] #this and
        x_new = [val for val in x if val in N(vertex)] #this part was particularly difficult to understand 
        bronk(r_new,p_new,x_new)
        p.remove(vertex)
        x.append(vertex)

bronk([], [0,1,2,3,4,5], [])
</code></pre>
<p>And here's my attempt at its conversion to JS:</p>
<pre><code>'use strict';
const graph = [[0,1,0,0,1,0],[1,0,1,0,1,0],[0,1,0,1,0,0],[0,0,1,0,1,1],[1,1,0,1,0,0],[0,0,0,1,0,0],];

function N(vertex){
  let c = 0;
  const l = [];
  for (let i in graph[vertex]){
      if (i){
        l.push(c);
        c++;
      }
  }
  return l;
}

function bronk(r,p,x){
  if (p.length == 0 &amp;&amp; x.length == 0){
    console.log(r);
    return;
  }
  for (let vertex in p.slice(0)){
    const r_new = r.slice(0);
    r_new.push(vertex);
    const p_new=p.filter(val=&gt;~~N(vertex).indexOf(val)); //hereÂ´s my best guess...
    const x_new=x.filter(val=&gt;~~N(vertex).indexOf(val));
    bronk(r_new, p_new, x_new);
    p=p.splice(vertex,1);
    x.push(vertex);
  }
}

bronk([], [0,1,2,3,4,5], []);
</code></pre>
<p>I got the Python code from <a href="https://stackoverflow.com/questions/13904636/implementing-bron-kerbosch-algorithm-in-python">this</a> question.</p>
<p>Edit: I'm working in an ES6 environment.</p>
</div>
<div class="post-text" itemprop="text">
<p>They're both <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">List comprehensions</a> in python</p>
<p>The closest you can get to a list comprehension in python in Javascript (Without ES6, babel and its relations) is to use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" rel="nofollow noreferrer">Array.Map</a> (Similar to python's map)</p>
<p>Example in python</p>
<pre><code>&gt;&gt;&gt; l = [2, 4, 6, 8, 10, 12]
&gt;&gt;&gt; [int(i / 2) for i in l]
[1, 2, 3, 4, 5, 6]
</code></pre>
<p>In Javascript:</p>
<pre><code>l = [2, 4, 6, 8, 10, 12]
l.map(function(i){ return i / 2 });
[1, 2, 3, 4, 5, 6]
</code></pre>
<p>With <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" rel="nofollow noreferrer">Arrow functions</a> in ES6, you can get rid of the <code>function(){}</code></p>
<pre><code>l.map(x =&gt; x/2)
[2, 4, 6, 8, 10, 12]
</code></pre>
<p>So your code should look like this</p>
<pre><code>const p_new = p.map(function(i){ if(i in N(vertex)){ return i } });
const x_new = x.map(function(i){ if(i in N(vertex)){ return i } });
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It would be better to use:</p>
<pre><code>p.filter(val =&gt; graph[vertex][val])
</code></pre>
<p>As this cuts out the useless Array creation that N does.</p>
<p>Also <code>~~</code> doesn't properly convert <code>-1</code> to <code>false</code> and <code>0</code> .. <code>n</code> to <code>true</code>. Use <code>!!~</code> instead.</p>
</div>
<span class="comment-copy">What would be the purpose of mapping x to x? Wouldn't this be the same as not having the map there at all? So I still don't quite understand what the Python code was trying to do there...</span>
<span class="comment-copy">I've fixed the mapping, but the recursive calls of the algorithm keep exceeding the stack size</span>
<span class="comment-copy">also <code>Array.splice</code> removes by position, not by value like python's <code>list.remove</code></span>
<span class="comment-copy">Yeah, I noticed. So the algorithm itself is faulty?</span>
<span class="comment-copy">Either it's still not fully converted correctly or the source python code is faulty... it's still an infinite loop: <a href="https://jsfiddle.net/ilpo/d1b0pgga/" rel="nofollow noreferrer">jsfiddle.net/ilpo/d1b0pgga</a></span>
