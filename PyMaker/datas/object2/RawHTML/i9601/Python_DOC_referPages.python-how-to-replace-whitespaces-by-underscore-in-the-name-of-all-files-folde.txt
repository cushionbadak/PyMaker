<div class="post-text" itemprop="text">
<p>How can we replace the whitespaces in the names of folders, subfolders and files in a given parent folder?</p>
<p>My initial attempt to replace up to level 8 is given below. I am sure there are better ways. My code looks ugly.
Better solutions are more than welcome.</p>
<pre><code>#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#


def replace_space_by_underscore(path):
    """Replace whitespace in filenames by underscore."""
    import glob
    import os
    for infile in glob.glob(path):
        new = infile.replace(" ", "_")
        try:
            new = new.replace(",", "_")
        except:
            pass
        try:
            new = new.replace("&amp;", "_and_")
        except:
            pass
        try:
            new = new.replace("-", "_")
        except:
            pass
        if infile != new:
            print(infile, "==&gt; ", new)
        os.rename(infile, new)

if __name__ == "__main__":
    try:
        replace_space_by_underscore('*/*/*/*/*/*/*/*')
    except:
        pass
    try:
        replace_space_by_underscore('*/*/*/*/*/*/*')
    except:
        pass
    try:
        replace_space_by_underscore('*/*/*/*/*/*')
    except:
        pass
    try:
        replace_space_by_underscore('*/*/*/*/*')
    except:
        pass
    try:
        replace_space_by_underscore('*/*/*/*')
    except:
        pass
    try:
        replace_space_by_underscore('*/*/*')
    except:
        pass
    try:
        replace_space_by_underscore('*/*')
    except:
        replace_space_by_underscore('*')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/os.html#os.walk" rel="noreferrer"><code>os.walk</code></a> that allows you to change the names of the iterated folders on the fly:</p>
<pre><code>import os

def replace(parent):
    for path, folders, files in os.walk(parent):
        for f in files:
            os.rename(os.path.join(path, f), os.path.join(path, f.replace(' ', '_')))
        for i in range(len(folders)):
            new_name = folders[i].replace(' ', '_')
            os.rename(os.path.join(path, folders[i]), os.path.join(path, new_name))
            folders[i] = new_name
</code></pre>
<p><code>os.walk</code> iterates directory tree starting from <code>parent</code> in top-down order. For every folder it returns tuple <code>(current path, list of files, list of folders</code>). Given folder list can be mutated and <code>os.walk</code> will use the mutated contents in the following steps of the iteration.</p>
<p>Folder before run:</p>
<pre><code>.
├── new doc
└── sub folder
    ├── another folder
    ├── norename
    └── space here
</code></pre>
<p>After:</p>
<pre><code>.
├── new_doc
└── sub_folder
    ├── another_folder
    ├── norename
    └── space_here
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need a recursive solution. Rename all files in the current directory; then for each subdirectory (if any), descend into that subdirectory X (with <code>os.chdir(X)</code>), call the same function again, and ascend back to the parent directory (with <code>os.chdir("..")</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>Following the exact idea of @niemmi I ended up with this:</p>
<p><strong>Warning:</strong> Never run this script from HOME directory or from some important directory, it will RENAME all files including HIDDEN files.</p>
<pre><code>#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Date: Dec 15, 2016


def replace_space_by_underscore(parent):
    """Replace whitespace by underscore in all files and folders.

    replaces    , - [ ] () __   ==&gt;  underscore

    """
    import os
    for path, folders, files in os.walk(parent):
        # rename the files
        for f in files:
            old = os.path.join(path, f)
            bad_chars = [r' ', r',', r'-', r'&amp;', r'[', r']', r'(', r')', r'__']
            for bad_char in bad_chars:
                if bad_char in f:
                    new = old.replace(bad_char, '_')
                    print(old, "==&gt;", new)
                    os.rename(old, new)

        # rename the folders
        for i in range(len(folders)):
            new_name = folders[i].replace(' ', '_')
            bad_chars = [r' ', r',', r'-', r'&amp;',
                         r'[', r']', r'(', r')', r'__']
            for bad_char in bad_chars:
                if bad_char in new_name:
                    new_name = new_name.replace(bad_char, '_')
                    print(folders[i], "==&gt; ", new_name)
            old = os.path.join(path, folders[i])
            new = os.path.join(path, new_name)
            os.rename(old, new)
            folders[i] = new_name


if __name__ == "__main__":
    replace_space_by_underscore('.')
</code></pre>
</div>
<span class="comment-copy">What's the goal - the result, or the program itself?</span>
<span class="comment-copy">You can use os.walk() like in the answer here: <a href="http://stackoverflow.com/questions/16953842/using-os-walk-to-recursively-traverse-directories-in-python" title="using os walk to recursively traverse directories in python">stackoverflow.com/questions/16953842/…</a></span>
<span class="comment-copy">being able to use <code>os.rename</code> as a method to rename the file helped me, thank you</span>
