<div class="post-text" itemprop="text">
<p>I have a file with a bunch of information. For example, all of the lines follow the same pattern as this: </p>
<pre><code>     &lt;school&gt;Nebraska&lt;/school&gt;
</code></pre>
<p>I am trying to use the split function to only retrieve 'Nebraska'. This is what I have so far, but I'm not sure what to put to make it cut off both parts instead of just the first. </p>
<pre><code>   with open('Pro.txt') as fo:
       for rec in fo:
          print(rec.split('&gt;')[1])
</code></pre>
<p>With this I get:</p>
<pre><code>    Nebraska&lt;/school
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You've cut off part of the string. Keep going in the same fashion:</p>
<pre><code>&gt;&gt;&gt; s = '&lt;school&gt;Nebraska&lt;/school&gt;'
&gt;&gt;&gt; s.split('&gt;')[1]
'Nebraska&lt;/school'
&gt;&gt;&gt; s.split('&gt;')[1].split('&lt;')[0]
'Nebraska'
</code></pre>
<p>That said, you should parse HTML with an HTML parser like BeautifulSoup.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>s = '&lt;school&gt;Nebraska&lt;/school&gt;'
</code></pre>
<p>in:</p>
<pre><code>s.split('&gt;')
</code></pre>
<p>out:</p>
<pre><code>['&lt;school', 'Nebraska&lt;/school', '']
</code></pre>
<p>in:</p>
<pre><code>s.split('&gt;')[1].split('&lt;')
</code></pre>
<p>out:</p>
<pre><code>['Nebraska', '/school']
</code></pre>
<p>in:</p>
<pre><code>s.split('&gt;')[1].split('&lt;')[0]
</code></pre>
<p>out:</p>
<pre><code>'Nebraska'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use a regular expression:</p>
<pre><code>import re
regexp = re.compile('&lt;school&gt;(.*?)&lt;\/school&gt;')

with open('Pro.txt') as fo:
    for rec in fo:
        match = regexp.match(rec)
        if match: 
            text = match.groups()[0]
            print(text)
</code></pre>
</div>
<span class="comment-copy">If it's XML or HTML, and it looks as though it is, you should use a proper parser such as BeautifulSoup (HTML) or LXML (XML). Python also comes with parsers that will do the trick, though the ones I suggested are better.</span>
<span class="comment-copy">Use an XML parser, either <a href="https://docs.python.org/3/library/xml.html" rel="nofollow noreferrer">built-in</a> or a PyPI module like <code>lxml</code> or <code>BeautifulSoup</code>. Don't try to roll your own XML parsing code.</span>
<span class="comment-copy">Do you have an example of the file? It's possible that you're dealing with a subset of *ML that may be easier to work with.</span>
