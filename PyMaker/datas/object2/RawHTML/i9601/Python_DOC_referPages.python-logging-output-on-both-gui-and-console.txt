<div class="post-text" itemprop="text">
<p>Given this little snippet:</p>
<pre><code>import sys
import os
import logging
from PyQt5 import QtGui, QtWidgets, QtCore

log = logging.getLogger("Foo")
logging.basicConfig(
    level=logging.INFO, format='%(levelname)s: %(filename)s - %(message)s')
log.setLevel(logging.DEBUG)


class ConsolePanelHandler(logging.Handler):

    def __init__(self, parent):
        logging.Handler.__init__(self)
        self.parent = parent

    def emit(self, record):
        self.parent.write(self.format(record))


class Foo(QtWidgets.QWidget):

    def __init__(self, parent=None):
        QtWidgets.QWidget.__init__(self, parent)

        self.textEdit = QtWidgets.QTextEdit(self)
        self.textEdit.setLineWrapMode(QtWidgets.QTextEdit.NoWrap)
        self.textEdit.setTextInteractionFlags(QtCore.Qt.TextSelectableByMouse)

        vbox = QtWidgets.QVBoxLayout()
        self.setLayout(vbox)
        vbox.addWidget(self.textEdit)

    def write(self, s):
        self.textEdit.setFontWeight(QtGui.QFont.Normal)
        self.textEdit.append(s)


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    console_panel = Foo()
    handler = ConsolePanelHandler(console_panel)
    log.addHandler(handler)

    log.info("Getting logger {0} - {1}".format(id(log), log.handlers))
    [log.debug("This is normal text " + str(i)) for i in range(5)]
    console_panel.show()

    sys.exit(app.exec_())
</code></pre>
<p>Questions: </p>
<ul>
<li>Why is log writing to both the console and gui? As far as i know <code>log.handlers</code> len should be only 1. </li>
<li>How can i write only to the gui supressing the console messages?</li>
<li>Why the gui format is not the one specified by basicConfig?</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is caused by calling <code>basicConfig()</code> at import time - as <a href="https://docs.python.org/3/library/logging.html#logging.basicConfig" rel="nofollow noreferrer">documented</a>, this adds a console logger to the root logger if it doesn't have any handlers already.</p>
<p>You need to remove this call and add a line in the <code>if __name__ == '__main__'</code> clause:</p>
<pre><code>handler.setFormatter(logging.Formatter('%(levelname)s: %(filename)s - %(message)s'))
</code></pre>
<p>and you should then get the result you were expecting.</p>
<p>The reason you saw both messages is because how information flows between loggers and handlers, which is described in the documentation <a href="https://docs.python.org/3/howto/logging.html#logging-flow" rel="nofollow noreferrer">here</a>.</p>
</div>
<span class="comment-copy">One question though, when you say <code>this adds a console logger to the root logger if it doesn't have any handlers already</code>... why doesn't <code>log.handlers</code> shows me the console logger after calling <code>basicConfig()</code>?</span>
<span class="comment-copy">@BPL <code>log</code> isn't the root logger, and <code>log.handlers</code> correctly has the one logger you added. The <code>basicConfig()</code> call adds handlers to the root logger, which are also used for output of events logged to <code>log</code>, as per the "information flow" link in my answer.</span>
<span class="comment-copy">Is there any way to get the instance or id() of that root logger? I'm just curious to see where basicConfig() has added the handler.</span>
<span class="comment-copy">@BPL <code>logging.root</code></span>
<span class="comment-copy">Awesome, everything is perfectly clear now, tyvm</span>
