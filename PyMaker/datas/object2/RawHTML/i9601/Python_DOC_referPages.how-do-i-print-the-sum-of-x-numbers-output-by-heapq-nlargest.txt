<div class="post-text" itemprop="text">
<p>I'm working on a small practice project and I couldn't find an answer for this. I'd like to roll 4d6, drop the lowest, and add the remaining three together. I've found that heapq.nlargest can find the highest N numbers for me, but I can't figure out how to sum the output of that into one number.</p>
<p>So far, my unfinished code looks like this:</p>
<pre><code>import random
import heapq

print "How many stats would you like to roll?" 
dice = input

for i in range(dice()):
    roll1 = random.randint(1, 6)
    roll2 = random.randint(1, 6)
    roll3 = random.randint(1, 6)
    roll4 = random.randint(1, 6)
    allrolls = (roll1, roll2, roll3, roll4)
    high3 = heapq.nlargest(3, allrolls)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer">The <code>sum</code> function</a>:</p>
<pre><code>high3sum = sum(high3)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Add this line to the end of your loop:</p>
<pre><code>    print sum(high3)
</code></pre>
<p>The Python <a href="https://docs.python.org/2/library/functions.html#sum" rel="nofollow noreferrer"><code>sum</code></a> built-in will sum the values of an iterable. The <a href="https://docs.python.org/2/library/heapq.html#heapq.nlargest" rel="nofollow noreferrer"><code>heapq.nlargest</code></a> method returns an iterable.</p>
</div>
<span class="comment-copy">The <code>sum</code> function. How do you know <code>heapq.nlargest</code> and not the <code>sum</code> function? It takes any iterable and sums it, and <code>heapq.nlargest</code> returns an iterable (<code>list</code> to be precise).</span>
<span class="comment-copy">Mind you, in this case <code>heapq.nlargest</code> is gaining you very little (it's mostly useful when you need a minority of the values from a larger list). <code>sum(allrolls) - min(allrolls)</code> or <code>sum(sorted(allrolls)[-3:])</code> would likely be more efficient, both theoretically and practically.</span>
<span class="comment-copy">I've found an answer on here about a different thing that asked about how to print the x largest numbers of a small list, and it worked well. Thanks for the more efficient version!</span>
<span class="comment-copy">Thanks, this did the trick.</span>
