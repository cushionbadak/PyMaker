<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/38987/how-to-merge-two-dictionaries-in-a-single-expression">How to merge two dictionaries in a single expression?</a>
<span class="question-originals-answer-count">
                    44 answers
                </span>
</li>
</ul>
</div>
<p>I have a problem with concatenating dictionaries. Have so much code so I show in example what my problem is.</p>
<pre><code>d1 = {'the':3, 'fine':4, 'word':2}
+
d2 = {'the':2, 'fine':4, 'word':1, 'knight':1, 'orange':1}
+
d3 = {'the':5, 'fine':8, 'word':3, 'sequel':1, 'jimbo':1}
=
finald = {'the':10, 'fine':16, 'word':6, 'knight':1, 'orange':1, 'sequel':1, 'jimbo':1}
</code></pre>
<p>It is prepering wordcounts for wordcloud. I dont know how to concatenate values of the keys it is puzzle for me. Please help. 
Best regards</p>
</div>
<div class="post-text" itemprop="text">
<p>I would use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="noreferrer"><code>Counter</code></a> from <code>collections</code> for this.</p>
<pre><code>from collections import Counter

d1 = {'the':3, 'fine':4, 'word':2}
d2 = {'the':2, 'fine':4, 'word':1, 'knight':1, 'orange':1}
d3 = {'the':5, 'fine':8, 'word':3, 'sequel':1, 'jimbo':1}

c = Counter()
for d in (d1, d2, d3):
    c.update(d)
print(c)
</code></pre>
<p>Outputs:</p>
<pre><code>Counter({'fine': 16, 'the': 10, 'word': 6, 'orange': 1, 'jimbo': 1, 'sequel': 1, 'knight': 1})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import itertools

d1 = {'the':3, 'fine':4, 'word':2}
d2 = {'the':2, 'fine':4, 'word':1, 'knight':1, 'orange':1}
d3 = {'the':5, 'fine':8, 'word':3, 'sequel':1, 'jimbo':1}
dicts = [d1, d2, d3]

In [31]: answer = {k:sum(d[k] if k in d else 0 for d in dicts) for k in itertools.chain.from_iterable(dicts)}

In [32]: answer
Out[32]: 
{'sequel': 1,
 'the': 10,
 'fine': 16,
 'jimbo': 1,
 'word': 6,
 'orange': 1,
 'knight': 1}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def sumDicts(*dicts):
    summed = {}
    for subdict in dicts:
        for (key, value) in subdict.items():
            summed[key] = summed.get(key, 0) + value
    return summed
</code></pre>
<p>Shell example:</p>
<pre><code>&gt;&gt;&gt; d1 = {'the':3, 'fine':4, 'word':2}
&gt;&gt;&gt; d2 = {'the':2, 'fine':4, 'word':1, 'knight':1, 'orange':1}
&gt;&gt;&gt; d3 = {'the':5, 'fine':8, 'word':3, 'sequel':1, 'jimbo':1}
&gt;&gt;&gt; sumDicts(d1, d2, d3)
{'orange': 1, 'the': 10, 'fine': 16, 'jimbo': 1, 'word': 6, 'knight': 1, 'sequel': 1}
</code></pre>
</div>
<span class="comment-copy">Welcome to <a href="https://stackoverflow.com">Stack Overflow</a>! Please review <a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a> and show us what you've tried!</span>
<span class="comment-copy">Counters seems to solve a lot of dict questions these days! For this problem I would do <code>reduce(lambda x,y:Counter(x)+Counter(y),[d1,d2, d3])</code> . Is update() quicker/better than adding the counters?</span>
<span class="comment-copy">@themistoklik Probably not by much, if at all, and <code>reduce</code> is deprecated in python 3.  I had originally written this with <code>map(c.update, (d1, d2, d3))</code> but then I my inner functional programmer refused to allow me to abuse side effects like that.</span>
<span class="comment-copy">what about 'knight', 'sequel', 'orange', and 'jimbo'?</span>
<span class="comment-copy">@InspectorGadget well done!</span>
<span class="comment-copy">omg thanks nice oneliner :)</span>
<span class="comment-copy">Why the downvote?</span>
<span class="comment-copy"><code>if key in summed...</code> would probably be better off as <code>summed[key] = summed.get(key, 0) + value</code></span>
<span class="comment-copy">@SeanMcSomething that does not work on my computer... says "can't assign to function call"</span>
<span class="comment-copy">Sorry, got some things mixed up.  Fixed in edit.</span>
<span class="comment-copy">@SeanMcSomething fixed!</span>
