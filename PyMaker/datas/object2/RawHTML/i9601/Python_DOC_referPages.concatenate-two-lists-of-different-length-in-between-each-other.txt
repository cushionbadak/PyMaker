<div class="post-text" itemprop="text">
<p>I have two list of different sizes, n and n-1. I have to concatenate two lists that look like this</p>
<pre><code>list1 = ['a','b','c']
list2 = ['-','-']
</code></pre>
<p>They have to be concatenated to get s.th like this</p>
<pre><code>str_out = 'a-b-c'
</code></pre>
<p>I have tried to figure out an elegant way to do this but only managed to come up with this solution</p>
<pre><code>list1 = ['a','b','c']
list2 = ['-','-']
string2 = ''

for index,item in enumerate(list1):
    string2 = string2 + item + list2[index-1]

print(string2)
</code></pre>
<p>which prints </p>
<pre><code>'a-b-c-'
</code></pre>
<p>I am looking for a nicer implementation or how I can get rid of the final dash (<code>-</code>)</p>
<p>EDIT: To clarify, the lists will be dynamic and list2 can contain arbitrary characters. </p>
<p>e.g: <code>list2 = ['*','-']</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Try following:    </p>
<pre><code>from itertools import chain
"".join(x for x in chain(*map(None, list1, list2)) if x is not None)
</code></pre>
<p><strong>Update</strong> add izip_longest version:</p>
<pre><code>from itertools import chain, izip_longest
"".join(x for x in chain(*izip_longest(list1, list2)) if x is not None)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You might use the <code>itertools</code>
Many posibilities, e.g.</p>
<pre><code>list1 = ['a', 'b', 'c']
list2 = ['-', '*']
''.join(map(''.join, itertools.izip_longest(list1, list2, fillvalue='')))
''.join(itertools.chain(*itertools.izip_longest(list1, list2, fillvalue='')))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this,</p>
<pre><code>In [32]: ''.join(i+j for i,j in zip(list1,list2+['']))
Out[32]: 'a-b-c'
</code></pre>
<p>Just add a black (<code>''</code>) element at end of <code>list2</code>. Then just apply <code>zip</code> and <code>join</code>.</p>
<p>Tried with another example, </p>
<pre><code>In [36]: list2 = ['*','-']
In [37]: ''.join(i+j for i,j in zip(list1,list2+['']))
Out[37]: 'a*b-c'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming your lists always correct, you can do:</p>
<pre><code>list1 = ['a','b','c']
list2 = ['-','-']

res = []
for i1, i2 in zip(list1, list2):
    res.append(i1)
    res.append(i2)

res.append(list1[-1])

print ''.join(res)
</code></pre>
<p>Iterate on the two lists simultaneously, and add an item from <code>list1</code> and then from <code>list2</code>. When the loop terminates, you have one more item in <code>list1</code>, which you append manually.</p>
<p>Another solution would be having a separate counter for each list:</p>
<pre><code>list1 = ['a','b','c']
list2 = ['-','-']

res = []
j = 0
for i1 in list1:
    res.append(i1)
    if j &lt; len(list2):
        res.append(list2[j])
        j += 1

print ''.join(res)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <strong>NumPy arrays</strong>, as their indexing tools are very useful for the purpose of the OP:</p>
<pre><code>list1 = np.array(['a','b','c'])
list2 = np.array(['*','-'])
final_list = np.zeros(len(l1) + len(l2)).astype('S1')
list3[0::2] = list1
list3[1::2] = list2

result_string = ''.join(list3)
</code></pre>
<p>The result will be:</p>
<pre><code>'a*b-c'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Borrowing from <a href="https://stackoverflow.com/a/7946825/7007605">this answer</a> regarding interleaving lists:</p>
<pre><code>''.join(val for pair in zip(list1, list2) for val in pair) + list1[-1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can slice the first list to get a sublist with the same length as the second list, then apply <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip()</code></a> to the result. <code>extend</code> is used to add the other elements of the first list:</p>
<pre><code>list1 = ['a','b','c']
list2 = ['-','-']

my_list = [''.join(item) for item in zip(list1[:len(list2)], list2)]
my_list.extend(list1[len(list2):])
str_out = ''.join(my_list)
print(str_out)
# Output: 'a-b-c'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are several external packages that have builtin functions for this kind of "interleaving" of iterables, just to show one of them: <a href="https://iteration-utilities.readthedocs.io/en/latest/generated/roundrobin.html" rel="nofollow noreferrer"><code>iteration_utilities.roundrobin</code></a> (note, that I'm the author of this library):</p>
<pre><code>&gt;&gt;&gt; from iteration_utilities import ManyIterables
&gt;&gt;&gt; ManyIterables(['a','b','c'], ['-','-']).roundrobin().as_string()
'a-b-c'
&gt;&gt;&gt; ManyIterables(['a','b','c'], ['-','*']).roundrobin().as_string()
'a-b*c'
</code></pre>
<p>The <a href="http://iteration-utilities.readthedocs.io/en/latest/generated/Iterable.html#iteration_utilities.Iterable.as_string" rel="nofollow noreferrer"><code>as_string</code></a> is just a wrapped <code>''.join</code> call.</p>
<p>Just to name a few alternatives:</p>
<ul>
<li><a href="https://toolz.readthedocs.io/en/latest/api.html#toolz.itertoolz.interleave" rel="nofollow noreferrer"><code>toolz.interleave</code></a></li>
<li><a href="https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.interleave_longest" rel="nofollow noreferrer"><code>more-itertools.interleave_longest</code></a></li>
</ul>
<p>These are generalized solutions that work on an arbitary number of sequences and iterables. With only two iterables and if you don't want to use external packages using a <code>zip</code> or <code>itertools.zip_longest</code> approach (see other answers) is probably easier.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from itertools import zip_longest,chain
list1 = ['a','b','c']    
list2 = ['*','-']
''.join(i+j for i,j in zip_longest(list1, list2, fillvalue=''))
</code></pre>
<p>or:</p>
<pre><code>list1 = ['a','b','c']    
list2 = ['*','-']
def item_gen(list1, list2):
    for i,j in zip(list1, list2):
        yield i
        yield j
    yield list1[-1]

each = item_gen(list1, list2)
''.join(each)
</code></pre>
</div>
<span class="comment-copy">Will one list always be one shorter than the other? And if so, do you know which?</span>
<span class="comment-copy">yes, list2 will always be shorter by 1</span>
<span class="comment-copy"><code>''.join(chain.from_iterable(zip_longest(list1,list2,fillvalue='')))</code> (<code>izip_longest</code> in Python2)</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/15703590/combining-two-lists-to-string">Combining two lists to string</a></span>
<span class="comment-copy">If you already use the itertools, why not the <code>izip_longest()</code>?</span>
<span class="comment-copy">Yes, <code>izip_longest</code> can be used here too: <code>"".join(x for x in chain(*izip_longest(list1, list2)) if x is not None)</code></span>
<span class="comment-copy">I have <code>TypeError: 'NoneType' object is not callable</code> for the first solution in Python 3, so it's a Python 2-only solution.</span>
<span class="comment-copy">In python3 <code>"".join(x for x in chain(*zip_longest(list1, list2)) if x is not None)</code> will work.</span>
<span class="comment-copy">thanks for your answer if have just updated my question, join won't work unfortunately</span>
