<div class="post-text" itemprop="text">
<p>I have hundreds of box can be accessed only with different gateway, like below shows:</p>
<pre><code>gateway1:ip1,ip2
gateway2:ip3,ip4 ...
</code></pre>
<p>All job need done in one minute, so I use multiprocess below command <code>fab -f  ytj_sto.py doitnow</code>, errors below.</p>
<pre><code>[]
None
None
***Warning*** Host None via ssh is down 
</code></pre>
<p>Code:</p>
<pre><code>@parallel(pool_size=20)
def coll():
    print env.hosts
    print env.host
    print env.gateway
    if _is_ssh_ok(env.host):
        d = patt()

def doitnow():
    p=Pool(20)
    with open('ytj_sto.hn','r') as f:
        for line in f.readlines():
            line = line.strip()
            if not len(line) or line.startswith('#'):
                continue
            env.gateway = line.split(':')[0]
            env.hosts = line.split(':')[1].split(',')
            result = p.apply_async(coll, args=())
            result.get()
    p.close()
    p.join()
</code></pre>
<p>EDITED:
     I have used fab -H -g solved the issue,thanks all</p>
<pre><code>  def fabfun(Hosts,Gate,des,func1):
        with settings(hide('running'), warn_only=True):
           local(("fab -H %s -g %s -f %s %s ") % (Hosts,Gate,des,func1))

p=Pool(20)
starttime = time.asctime( time.localtime(time.time()) )
print('Waiting for all job done...%s' % starttime)
with open('ytj_sto.hn','r') as f:
    for line in f.readlines():
        line = line.strip()
        if not len(line) or line.startswith('#'):
            continue
        Hosts = line.split(':')[1]
        Gate = line.split(':')[0]
        p.apply_async(fabfun, args=(Hosts,Gate,des,func1))
    p.close()
    p.join()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to set env variables dynamically like you are, you should use <code>execute</code>.  That way the <code>execute</code>d task takes on the <code>env</code> values that you set at runtime.  But unfortunately, because <code>fabric</code> is not fully thread-safe, you can only kick off tasks like this in parallel in your situation once per gateway because <code>env</code> is a global singleton.</p>
<blockquote>
<p>A simple but integral aspect of Fabric is what is known as the
  “environment”: a Python dictionary subclass, which is used as a
  combination settings registry and shared inter-task data namespace.</p>
<p>The environment dict is currently implemented as a global singleton,
  fabric.state.env, and is included in fabric.api for convenience. Keys
  in env are sometimes referred to as “env variables”.</p>
</blockquote>
<pre><code>from fabric.context_managers import env

@parallel(pool_size=20)
def check_and_patt():
    if _is_ssh_ok(env.host):
        d = patt()

def doitnow():
    p=Pool(20)
    with open('ytj_sto.hn','r') as f:
        for line in f.readlines():
            line = line.strip()
            if not len(line) or line.startswith('#'):
                continue
            env.gateway = line.split(':')[0]
            env.hosts = line.split(':')[1].split(',')
            result = execute(check_and_patt)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you can just supply <code>env</code> to the <code>coll</code> function as a parameter, like so:</p>
<pre><code>@parallel(pool_size=20)
def coll(env): # &lt;-- updated
    print env.hosts
    print env.host
    print env.gateway
    if _is_ssh_ok(env.host):
        d = patt()

def doitnow():
    p=Pool(20)
    with open('ytj_sto.hn','r') as f:
        for line in f.readlines():
            line = line.strip()
            if not len(line) or line.startswith('#'):
                continue
            env.gateway = line.split(':')[0]
            env.hosts = line.split(':')[1].split(',')
            result = p.apply_async(coll, args=(env,)) # &lt;-- updated
            result.get()
    p.close()
    p.join()
</code></pre>
<p>There's a few quirks to using the <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing-programming" rel="nofollow noreferrer">multiprocessing library</a>. This info might be especially relevant to you scenario:</p>
<blockquote>
<p>Global variables</p>
<p>Bear in mind that if code run in a child process tries to access a global variable, then the value it sees (if any) may not be the same as the value in the parent process at the time that Process.start was called.</p>
<p>However, global variables which are just module level constants cause no problems.</p>
</blockquote>
</div>
<span class="comment-copy">Where is the fabric task (<code>patt</code>) you are trying to call?  And how did you implement <code>_is_ssh_ok</code>?</span>
