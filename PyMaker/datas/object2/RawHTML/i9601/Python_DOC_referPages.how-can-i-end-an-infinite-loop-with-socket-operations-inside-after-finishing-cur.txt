<div class="post-text" itemprop="text">
<p>I have an infinite loop in which there are operations that are mandatory to be completely executed before exiting the loop. Namely, I am using the socket library for connecting to an external device and I need to wait the read instructions to be finished before interrupting the loop.</p>
<p>I have tried using a signal handler (like in <a href="https://stackoverflow.com/questions/32922909/how-to-stop-an-infinite-loop-safely-in-python">this question</a>) for raising a flag when a Keyboard interrupt is detected. </p>
<h2>Current code:</h2>
<pre><code>import videosensor
import signal

def signal_handler(signal, frame):
    """Raises a flag when a keyboard interrupt is raised."""
    global interrupted
    interrupted = True

if __name__ == '__main__':
    camera = videosensor.VideoSensor(filename)
    interrupted = False
    signal.signal(signal.SIGINT, signal_handler)

    while not interrupted:
        location = camera.get_register()
        #...
        #More irrelevant stuff is executed.
        #...
        time.sleep(0.01)

    #This code has to be executed after exiting while loop
    camera_shutdown(camera)
</code></pre>
<p>In the previous code, videosensor.VideoSensor is a class containing socket operations for getting data from an external device. The get_register() method used in the main routine is the following:</p>
<pre><code>def get_register(self):
    """Read the content of the specified register.
    """
    #Do some stuff
    value = socket.recv(2048)
    return value
</code></pre>
<h2>The problem:</h2>
<p><strong>I wanted the while loop to be continually  executed until the user pressed a key or used the Keyboard Interrupt</strong>, but after the current iteration was finished. Instead, using the previous solution does not work as desired, as it interrupts the ongoing instruction, and if it is reading the socket, an error is raised:</p>
<blockquote>
<p>/home/.../client.pyc
  in read_register(self, regkey)</p>
<pre><code>    164         reg = self._REGISTERS[regkey]
    165         self.send('r,{}\n'.format(reg))
--&gt; 166         value = socket.recv(2048)
    167         #Convert the string input into a valid value e.g. list or int
    168         formatted_result = ast.literal_eval(value)
</code></pre>
<p>error: [Errno 4] Interrupted system </p>
</blockquote>
<hr/>
<p><strong>EDIT:</strong> It seems, from an answer below, that there is no way of using the <em>Keyboard Interrupt</em> and avoid the socket read function to be aborted. Despite there are solutions for catching the error, they don't avoid the read cancellation.</p>
<p>I am interested, though, in finding a way of getting a user input e.g. specific key press, that raises the flag, which will be checked at the end of the loop, without interrupting the main routine execution until this check.</p>
<p><strong>EDIT2:</strong> The used OS is the Linux distribution Ubuntu 14.04</p>
</div>
<div class="post-text" itemprop="text">
<p>After quick SO search I found <a href="https://stackoverflow.com/questions/3016369/catching-blocking-sigint-during-system-call#3016868">this solution for your issue</a></p>
<p>Basically, there's nothing you can do: when you send a SIGINT to your process, the socket will return a SIGINT as well. The best you can do, then, is to actively ignore the issue, by catching the socket <code>EINTR</code> error and going on with your loop:</p>
<pre><code>import errno

try:
    # do something
    value = conn.recv(2048)
except socket.error as (code, msg):
    if code != errno.EINTR:
        raise
</code></pre>
<hr/>
<p>An alternative solution to avoid issues with <code>C-c</code> breaking reads, is to use parallel execution, to read your socket in a routine, and handle user input on the other:</p>
<pre><code>import asyncio

async def camera_task(has_ended, filename):
    camera = videosensor.VideoSensor(filename)

    try:
        while not has_ended.is_set():
            location = camera.get_register()
            #...
            #More irrelevant stuff is executed.
            #...
            await asyncio.sleep(0.01)
    finally:
        #This code has to be executed after exiting while loop
        camera_shutdown(camera)

async def input_task(shall_end):
    while True:
        i = input("Press 'q' to stop the scriptâ€¦")
        if i == 'q':
            shall_end.set()

def main():
    filename = â€¦
    #
    end_event = asyncio.Event()
    asyncio.Task(camera_task(end_event, filename))
    asyncio.Task(input_task(end_event))
    asyncio.get_event_loop().run_forever()
</code></pre>
<p>or with <a href="https://docs.python.org/2/library/threading.html#thread-objects" rel="nofollow noreferrer">threading</a></p>
<pre><code>import threading, time

def camera_task(has_ended, filename):
    camera = videosensor.VideoSensor(filename)

    try:
        while not has_ended.is_set():
            location = camera.get_register()
            #...
            #More irrelevant stuff is executed.
            #...
            time.sleep(0.01)
    finally:
        #This code has to be executed after exiting while loop
        camera_shutdown(camera)

def input_task(shall_end):
    while True:
        i = input("Press 'q' to stop the scriptâ€¦")
        if i == 'q':
            shall_end.set()

def main():
    filename = â€¦
    #
    end_event = threading.Event()
    threads = [
        threading.Thread(target=camera_task, args=(end_event, filename)),
        threading.Thread(target=input_task, args=(end_event,))
    ]
    # start threads
    for thread in threads:
        thread.start()
    # wait for them to end
    for thread in threads:
        thread.join()
</code></pre>
<p>or with <a href="https://docs.python.org/2/library/multiprocessing.html#the-process-class" rel="nofollow noreferrer">multiprocessing</a>:</p>
<pre><code>import multiprocessing, time

def camera_task(has_ended, filename):
    camera = videosensor.VideoSensor(filename)

    try:
        while not has_ended.is_set():
            location = camera.get_register()
            #...
            #More irrelevant stuff is executed.
            #...
            time.sleep(0.01)
    finally:
        #This code has to be executed after exiting while loop
        camera_shutdown(camera)

def input_task(shall_end):
    while True:
        i = input("Press 'q' to stop the scriptâ€¦")
        if i == 'q':
            shall_end.set()

def main():
    filename = â€¦
    #
    end_event = multiprocessing.Event()
    processes = [
        multiprocessing.Process(target=camera_task, args=(end_event, filename)),
        multiprocessing.Process(target=input_task, args=(end_event,))
    ]
    # start processes
    for process in processes:
        process.start()
    # wait for them to end
    for process in processes:
        process.join()
</code></pre>
<blockquote>
<p><em>disclaimer: those codes are untested, and there might be some typos or little errors, but I believe the overall logic should be ðŸ‘Œ</em></p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You created your custom signal handler but did not overide the default keyboard interrupt behaviour. Add <code>signal.signal(signal.SIGINT, signal_handler)</code> to your code to accomplish this:</p>
<pre><code>import videosensor
import signal

# Custom signal handler
def signal_handler(signal, frame):
    """Raises a flag when a keyboard interrupt is raised."""
    global interrupted
    interrupted = True

# Necessary to override default keyboard interrupt
signal.signal(signal.SIGINT, signal_handler)  

if __name__ == '__main__':
    # Main programme
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I understand correctly, you do not want <code>socket.recv()</code> to be interrupted, but you do want to use signals to let the user indicate that the I/O loop should be terminated once the current I/O operation has completed.</p>
<p>With the assumption that you are using Python 2 on a Unix system, you can solve your problem by calling <a href="https://docs.python.org/3/library/signal.html#signal.siginterrupt" rel="nofollow noreferrer"><code>signal.siginterrupt(signal.SIGINT, False)</code></a> before entering the loop. This will cause system calls to be restarted when a signal occurs rather than interrupting it and raising an exception.</p>
<p>In your case this means that the <code>socket.recv()</code> operation will be restarted after your signal handler is called and therefore <code>get_register()</code> will not return until a message is received on the socket. If that is what you want your code will be:</p>
<pre><code>    interrupted = False
    old_handler = signal.signal(signal.SIGINT, signal_handler)    # install signal handler
    signal.siginterrupt(signal.SIGINT, False)                     # do not interrupt system calls

    while not interrupted:
        location = camera.get_register()
        if location == '':
            # remote connection closed
            break
        #...
        #More irrelevant stuff is executed.
        #...
        time.sleep(0.01)
</code></pre>
<p>That's one way to do it, but it does require that your code is running on a Unix platform.</p>
<p>Another way, which might work on other platforms, is to handle the exception, ignore further <code>SIGINT</code> signals (in case the user hits interrupt again), and then perform a final <code>socket.recv()</code> before returning from the <code>get_register()</code> function:</p>
<pre><code>import errno

def get_register(s):
    """Read the content of the specified register.
    """
    #Do some stuff
    try:
        old_handler = None
        return s.recv(2048)
    except socket.error as exc:
        if exc.errno == errno.EINTR:
            old_handler = signal.signal(signal.SIGINT, signal.SIG_IGN)    # ignore this signal
            return s.recv(2048)    # system call was interrupted, restart it
        else:
            raise
    finally:
        if old_handler is not None:
            signal.signal(signal.SIGINT, old_handler)    # restore handler
</code></pre>
<p>Signal handling can get tricky and there might be race conditions in the above that I am not aware of. Try to use <code>siginterrupt()</code> if possible.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/3016369/catching-blocking-sigint-during-system-call">Catching / blocking SIGINT during system call</a></span>
<span class="comment-copy">@zmo I edited the content specifying why that solution is not suitable. Anyway, thanks for the proposal.</span>
<span class="comment-copy">What platform are you running your code on - Windows or Unix?</span>
<span class="comment-copy">@mhawke I am using Unix, namely Ubuntu 14.04</span>
<span class="comment-copy">@Jalo: OK, take a look at my answer and see if it works for you.</span>
<span class="comment-copy">Thank you for your proposal. However, my main problem is to avoid socket.recv() to stop receiving data if user requests to interrupt. With the solution you propose, the error would be ignored, but the recv() call will be aborted as well... My question was more oriented to finding an alternative way of getting a user input, not necessarily a Keyboard Interrupt, that raises the flag which will be checked at the end of the loop.</span>
<span class="comment-copy">well, I might be wrong, so please check with real code, but I'd except that you're not loosing data upon <code>EINTR</code>, the buffered data will be returned with the following call, which is why ignoring the <code>EINTR</code> exception should work for you when hitting <code>C-c</code>. Otherwise, your solution is to put your socket stuff either in a thread, a forked process or an async coroutine, and have another one handling CLI user input (with a little prompt saying: <code>press 'q' to stopâ€¦</code></span>
<span class="comment-copy">I updated with a solution using <code>asyncio</code>. It's not involving the complexity and risks of threads and it's not having the cost of processes. It's only code that will run starting with recent py3.</span>
<span class="comment-copy">I am sorry, but my code is in for Python 2.7 and it seems that the asyncio library is only availablo in Python3. Is there a similar solution available for Python2?</span>
<span class="comment-copy">The first option is still not valid for me. It seems that when interrupted, the connection gets broken and any data gets stored. I get an error in the next line of code that uses 'value' saying <b>UnboundLocalError: local variable 'result' referenced before assignment</b></span>
<span class="comment-copy">I am sorry, I actually wrote that instruction in my code, but I forgot to put it in the OP. I already edited it. That is not the problem, then... Thank you anyway for your answer.</span>
<span class="comment-copy">I tried it, and it fails about 20% of times. Like in the solution proposed below, it raises the error  in the next line of code that uses 'value' saying <b>UnboundLocalError: local variable 'result' referenced before assignment</b>. I guess that when the interrupt does not coincide at the same time as the recv instruction is when the code works.</span>
<span class="comment-copy">Anyway, did you wrote the <code>if</code> statement for any special reason?</span>
<span class="comment-copy">@Jalo: which <code>if</code> do you mean?</span>
<span class="comment-copy">@Jalo: regarding the error that you see, which of the 2 solutions that I show are you using? <code>siginterrupt()</code> should work fine. I also just noticed that you also are calling a <code>send()</code> function prior to the <code>recv()</code> - if using the second solutoin you need to make sure that that is also safe from signals. Finally, accessing unbound variables is more likely a bug in your code wherein you assume that a variable is bound to some value but an exception prevents that from occuring. In the code that I show the value is returned directly without using any variables.</span>
<span class="comment-copy">I tried the first solution, and I refer to the <code>if location='':</code> statement. The get_register method first sends a value indicating the register it wants to read, and the reads the content that the client should send back. Regarding the unbound variable, <i>result</i> is the same variable as <i>value</i>, but I made a transcript mistake when writing the message here.</span>
