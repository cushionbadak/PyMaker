<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/26445907/finding-a-union-of-lists-of-lists-in-python">Finding a union of lists of lists in Python</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p><strong>Problem:</strong></p>
<p>Here's a list as an input <code>[A,B,C,E]</code></p>
<p><strong>Output:</strong></p>
<pre class="lang-none prettyprint-override"><code>[A,B]
[A,C]
[A,E]
[B,C]
[B,E]
[C,E]
</code></pre>
<p>Basically, I want to take the union of the list with itself.</p>
<p>Here's the <strong>code</strong>:</p>
<pre><code>pageSet_list = ['A', 'B', 'C', 'E']

pageSet_set = list() # To create a list of sets so that we can take their union

for page in pageSet_list:
    toBeAdded = set(page)
    pageSet_set.append(toBeAdded)
pageSet_list = list()

for i in range(len(pageSet_set)):
    for j in range(i,len(pageSet_set)):
        z=pageSet_set[i].union(pageSet_set[j])
        if (len(z) == 2): # somethin = set([])
            print 'z: ',z
            pageSet_list.append(z)
</code></pre>
<p><strong>Output of this code:</strong></p>
<pre class="lang-none prettyprint-override"><code>z:  set(['A', 'B'])
z:  set(['A', 'C'])
z:  set(['A', 'E'])
z:  set(['C', 'B'])
z:  set(['B', 'E'])
z:  set(['C', 'E'])
</code></pre>
<p><strong>Error:</strong></p>
<pre class="lang-none prettyprint-override"><code>z:  set(['C', 'B'])
</code></pre>
<p>Output should have been <code>z:  set(['B', 'C'])</code>.</p>
<p>Now recently, I got to know that set is an an unordered data structure and therefore it does not maintain any particular order of the elements. Performing union operation of two sets, by using <code>union</code> method, changes the order of elements.</p>
<p><strong>My question is:</strong></p>
<p>How do I perform the set operations, union and intersection, without using data type set()?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import itertools

for acom in itertools.combinations('ABCD',2):
    print acom
</code></pre>
</div>
<span class="comment-copy">perhaps look into the <a href="https://docs.scipy.org/doc/numpy/index.html" rel="nofollow noreferrer">NumPy library</a>?</span>
<span class="comment-copy">is the order re-creatable? could you just sort the data later on to re-establish its order? and how is order maintained through, say, intersection? if have <code>(1, 2, 3)</code> and <code>(3, 2)</code>, what's the result?</span>
<span class="comment-copy">So you want <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">combinations</a>? I don't see why sets need to be involved here</span>
<span class="comment-copy">Basically what you want is <b>not</b> taking the union of the list with itself (and has nothing to do with the <code>set</code> datatype). You're just finding all the combinations of pairs—in other words, two at a time—of the elements of a list.</span>
<span class="comment-copy">I'm agreeing with the duplicate here; if you just enter <code>set(['B', 'C'])</code> into the interpreter, it will reverse the order to <code>set(['C', 'B'])</code>.</span>
<span class="comment-copy">Okay it's working for input [A,B,C,E] . How to make this work for list [['A', 'B'], ['A', 'C'], ['A', 'E']] ? So that I get output : [[A,B,C], [A,B,E], [A,C,E]] (combinations of length 3)</span>
<span class="comment-copy">for acom in itertools.combinations(['AB', 'AC', 'AE'] ,2): print sorted(set(acom[0] + acom[1]))</span>
<span class="comment-copy">for acom in combinations(['AB', 'AC', 'AE','BC','BE','CE'] ,2): print sorted(set(acom[0] + acom[1])) How to get rid of the duplicates?</span>
<span class="comment-copy">print map(list,list(set([''.join(sorted(set(acom[0] + acom[1]))) for acom in itertools.combinations(['AB','AC','AE','BC','BE','CE'],2)])))</span>
<span class="comment-copy">If you untangle that pythonic mumbo jumbo, it goes as following: first you get a list of combinations as strings, then remove duplicates by converting it into set, then convert it into list again, and finally dismantle strings into lists: list('ABC') is ['A','B','C'].</span>
