<div class="post-text" itemprop="text">
<p>I found this rule  <a href="https://docs.python.org/3/reference/expressions.html#expression-lists" rel="nofollow noreferrer">here</a>,i just didn't figure out how <code>"*" or_expr</code> is equivalent as <code>starred_item</code> .If there is nothing wrong, what is it the problem that caused my code <code>a = 8;b = 2; *(a &gt;&gt; b), = (1,2,3)</code> to raise a exception,which said "SyntaxError: can't assign to operator"?</p>
</div>
<div class="post-text" itemprop="text">
<p>Atribution in Python - which happens with the assignment operator <code>=</code> or one of the augmented operators (<code>+=</code>, <code>-=</code>, ...) is actually a statement, and can't be used as part of a normal expression as in C-syntax derived Languages.</p>
<p>The left part of an assignment must make sense as a variable name (or a sequence of names).  </p>
<p>The expression you are trying to use there <code>*a &gt;&gt; b, = (1,2,3)</code> (to which I admit I can't understand what you wanted to achieve) is equivalent to a sequence were the first (and only) element is <code>*a &gt;&gt; b</code> - that is nor a valid name in Python - therefore your error.</p>
<p>The "*a" in assignemnts mean that any lenght that "is left of" after attribution to other parts of the sequence of names are assigned to the starred name:</p>
<pre><code>In [3]: *a, b = (1, 2, 3)

In [4]: a
Out[4]: [1, 2]

In [5]: b
Out[5]: 3
</code></pre>
<p>And that is deterministic and works whenever a * appears:</p>
<pre><code>In [6]: a, b, *c, d = range(10)

In [7]: [a, b, c, d]
Out[7]: [0, 1, [2, 3, 4, 5, 6, 7, 8], 9]
</code></pre>
<p>And of course, if one tries to use two stars, that results in an error due to the ambiguity:</p>
<pre><code>In [8]: *a, *b, c = range(5)
  File "&lt;ipython-input-8-e75ad61b842a&gt;", line 1
    *a, *b, c = range(5)
                        ^
SyntaxError: two starred expressions in assignment
</code></pre>
<p>Again, note that in no way an arbitrary expression is allowed on the left side of an attribution operator. </p>
<p>On non-assignemnt expressions, the * operator can be used to expand in place an iterable. Up to Python 3.5, that was only possible on function calls - now it is possible anywhere were a sequence of literals is expected:</p>
<pre><code>In [9]: a = 0, *range(10, 12), 2

In [10]: a
Out[10]: (0, 10, 11, 2)
</code></pre>
</div>
<span class="comment-copy">What would you even want to happen with this statement?</span>
<span class="comment-copy">That code doesn't make sense, so it's perfectly understandable that it raises <code>SyntaxError</code>. OTOH, <code>*a, = 1, 2, 3</code> is valid (in recent versions of Python).</span>
<span class="comment-copy">I am studying the syntax of Python expression.I derived the rule` *(identifier   "&gt;&gt;"  identifier)` from the specificated rules, which is classified as <code>starred_expression</code>.A tuple or list can appear at the left hand side of the simple assignment, so can ` *(identifier   "&gt;&gt;"  identifier),` .but i didn't get the correct result.</span>
<span class="comment-copy">I knew this conclusion ,which was introduced by <a href="https://www.python.org/dev/peps/pep-3132/" rel="nofollow noreferrer">PEP-3132</a>.</span>
<span class="comment-copy">I find the EBNF rule of <a href="https://docs.python.org/3.5/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer">assignment statements</a> ,which explained  my situation and comfirmed your answer.</span>
