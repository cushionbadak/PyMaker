<div class="post-text" itemprop="text">
<p>I have the following simple class and am wondering if there is a simple way to use a <code>lambda</code>, <code>decorator</code>, or <code>helper method</code>, etc... to avoid the duplicated <em>for loop</em> that appears in each method in <code>CODENAMES</code> and <code>ALL_DEFAULTS</code>?</p>
<pre><code>class classproperty(object):
    """
    When used to decorate a method in a class, that method will behave
    like as a class property.
    """
    def __init__(self, f):
        # f - the func that's being decorated
        self.f = f

    def __get__(self, obj, cls):
        # call the func on the class
        return self.f(cls)

class PermissionInfo(object):

    MODELS = ['ticket', 'person', 'role']
    PERMS = ['view', 'add', 'change', 'delete']

    @classproperty
    def CODENAMES(cls):
        codenames = []
        for p in cls.PERMS:
            for m in cls.MODELS:
                codenames.append('{}_{}'.format(p, m))
        return codenames

    @classproperty
    def ALL_DEFAULTS(cls):
        ret = {}

        for p in cls.PERMS:
            for m in cls.MODELS:
                ret["{}_{}".format(p, m)] = False

        return ret
</code></pre>
<p>Duplicated for loop is this section of each method:</p>
<pre><code># ...
for p in cls.PERMS:
    for m in cls.MODELS:
#...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> within helper method to generate the names:</p>
<pre><code>from itertools import product

def names(cls):
    yield from ('_'.join(x) for x in product(cls.PERMS, cls.MODELS))
</code></pre>
<p>Then you could change your class to utilize it:</p>
<pre><code>@classproperty
def CODENAMES(cls):
    return list(names(cls))

@classproperty
def ALL_DEFAULTS(cls):
    return dict.fromkeys(names(cls), False)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could perhaps use something like:</p>
<pre><code>MODEL_PERMS = list(map(lambda t: "{}_{}".format(t[0],t[1]), itertools.product(MODELS, PERMS)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from itertools import product


class PermissionInfo(object):

    MODELS = ['ticket', 'person', 'role']
    PERMS = ['view', 'add', 'change', 'delete']
    PRODUCT = product(PERMS, MODELS)
    CODENAMES = ['{}_{}'.format(p, m) for (p, m) in PRODUCT]
    ALL_DEFAULTS = {codename: False for codename in CODENAMES}
</code></pre>
<p>ohhh shiny :-}</p>
</div>
<span class="comment-copy">Meh. @niemmi's answer is better.</span>
<span class="comment-copy">Note that this is different from the original code since <code>ALL_DEFAULTS</code> can be easily mutated. Assume you generate custom permissions like this: <code>perm = PermissionInfo.ALL_DEFAULTS; perm['view_ticket'] = True</code>. With original implementation this is not an issue but with your implementation defaults will change.</span>
