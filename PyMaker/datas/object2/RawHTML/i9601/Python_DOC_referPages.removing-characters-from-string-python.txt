<div class="post-text" itemprop="text">
<p>I'm trying to write a function that gets rid of the vowels in a given string, but it seems to not behave the way it should do...</p>
<pre><code>def anti_vowel(text):
    for c in text:
        if c in "aeiouAEIOU":
            no_vowel = text.replace(c, '')
    return no_vowel
print(anti_vowel('Hello World')
</code></pre>
<p>so instead of printing</p>
<pre><code>Hll Wrld
</code></pre>
<p>It prints</p>
<pre><code>Hell Wrld  
</code></pre>
<p>Thanks (in advance) for helping    </p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that <code>no_vowel</code> only has the value of the last time that <code>text.replace(c, '')</code> was executed. Another issue is that <code>no_vowel</code> only gets a value when there is actually a vowel to remove; the code would fail on <code>anti_vowel('vwllss')</code>. Furthermore, you don't have to check whether a character is contained in the text before calling <code>str.replace()</code>.</p>
<p>This should work:</p>
<pre><code>def anti_vowel(text):
    for vowel in "aeiouAEIOU":
        text = text.replace(vowel, '')
    return text
print(anti_vowel('Hello World'))
</code></pre>
<p>As others indicated, another approach would be to write code in a different way:</p>
<pre><code>def anti_vowel(text):
    ''.join(c for c in text if c not in 'aeiouAEIOU')
</code></pre>
<p>Please do use a generator expression in <code>''.join()</code> and not a list comprehension; such a list comprehension would allocate memory unnecessarily.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>string.translate()</code> for this. For example:</p>
<pre><code>def anti_vowel(text):
  return text.translate(None, "aeiouAEIOU")

print(anti_vowel("hello world"))
</code></pre>
<p>With Python 3 the <code>delete</code> argument is gone, but you can still do it by mapping a character to <code>None</code>.</p>
<pre><code>def anti_vowel_py3(text):
   return text.translate({ord(i): None for i in "aeiouAEIOU"})

print(anti_vowel_py3("hello world"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your code doesnt work because every iteration you assign <code>no_vowel</code> with the text all over again and you iterate the text's letters what you shouldnt because <code>replace</code> already does it. You should write it like that:</p>
<pre><code>def anti_vowel(text):
    no_vowel = text
    for c in 'aeiouAEIOU':
        no_vowel = no_vowel.replace(c, '')

    return no_vowel
</code></pre>
<p>Or, you could use a list comprehension. More Pythonic and faster to run:</p>
<pre><code>def anti_vowel(text):
    return ''.join([c for c in text if c not in 'aeiouAEIOU])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In every iteration of the loop, text is "Hello World", and the last vowel of text is "o", so at the end of the loop, no_vowel is "Hell Wrld".</p>
<p>In python2.7, use method translate instead. Here is the official document:</p>
<blockquote>
<p>translate(...)</p>
<pre><code> S.translate(table [,deletechars]) -&gt; string

 Return a copy of the string S, where all characters occurring
 in the optional argument deletechars are removed, and the
 remaining characters have been mapped through the given
 translation table, which must be a string of length 256 or None.

 If the table argument is None, no translation is applied and
 the operation simply removes the characters in deletechars.
</code></pre>
</blockquote>
<p><code>"Hello World".translate(None, "aeiouAEIOU")</code> gives the correct result <code>"Hll Wrld"</code></p>
<p>Also, <code>re.sub('[aeiouAEIOU]', "", "Hello World")</code> works for both python2.7 and python3</p>
</div>
<span class="comment-copy">Where is <code>no_vowel</code> defined?</span>
<span class="comment-copy">Good answer but the last sentence is just not true. Always use a list comprehension when you use <code>str.join</code>. The argument for <code>join</code> will always be converted to a sequence so a generator expression is slower <i>and</i> as memory efficient as a list comprehension.</span>
<span class="comment-copy">@MSeifert Do you have a reference to back that claim up?</span>
<span class="comment-copy">the reference is the python source code for <code>str.join</code>: <a href="https://github.com/python/cpython/blob/master/Objects/unicodeobject.c#L9868" rel="nofollow noreferrer">github.com/python/cpython/blob/master/Objects/…</a>, see also my other <a href="http://stackoverflow.com/questions/41083229/removing-characters-from-string-python/41083246?noredirect=1#comment69372767_41083255">comment</a></span>
<span class="comment-copy">That doesn't show any speed nor memory comparison...</span>
<span class="comment-copy">Yes, that "only" shows it's converted to a sequence. A generator is no sequence and converting a generator to a sequence is much slower than just creating a sequence in the first place.</span>
<span class="comment-copy">This doesn't work, it returns <code>"['H', 'l', 'l', ' ', 'W', 'r', 'l', 'd']"</code>. This does: <code>''.join(c for c in text if c not in 'aeiouAEIOU')</code></span>
<span class="comment-copy">You need to close off that string.</span>
<span class="comment-copy">@leaf Because <code>str.join</code> needs a sequence (not a generator) so using a generator only adds needless overhead when it's converted to a list.</span>
<span class="comment-copy">@MSeifert Perhaps your correct, but I'm still not really understating how using a generator is inefficient.</span>
<span class="comment-copy">@leaf A generator is only useful if you don't need all elements or random access. You can check the source code (<a href="https://github.com/python/cpython/blob/master/Objects/unicodeobject.c#L9868" rel="nofollow noreferrer">github.com/python/cpython/blob/master/Objects/…</a>) and documentation (<a href="https://docs.python.org/3/c-api/sequence.html#c.PySequence_Fast" rel="nofollow noreferrer">docs.python.org/3/c-api/sequence.html#c.PySequence_Fast</a>). In this case that's equivalent to <code>list(generator)</code> which is definetly slower than doing a list comprehension.</span>
<span class="comment-copy">This doesn't work, and results in a <code>TypeError</code>: translate() takes exactly one argument (2 given).</span>
<span class="comment-copy">@Sybren This works in Python2.7, but in python3, the parameter <code>deletechars</code> of method <code>translate</code> is gone.</span>
<span class="comment-copy">@Sybren <code>re.sub('[aeiouAEIOU]', "", "Hello World")</code> will work for both python2.7 and python3</span>
<span class="comment-copy">Python 2-only answers are IMO obsolete nowadays...</span>
