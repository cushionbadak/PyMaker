<div class="post-text" itemprop="text">
<p>I've written a script that solves sudoku problems.
To model each slot of a grid, I have in a first time defined Slot and Grid classes like this (complete code elipsed for the sake of simplicity :</p>
<pre><code>class Slot():
    def __init__(self,grid):
        self.grid = grid
        self.values = list(range(9))

    def pos(self):
        return self.grid.index(self)

class Grid(list):
    def __init__(self):
        for i in range(9*9):
            self.append(Slot(self))
</code></pre>
<p>Like this, I can define method for my Slot class using self.pos() and self.values(). For example :</p>
<pre><code>g = Grid()
g[5].pos() -&gt; returns 5, OK !
</code></pre>
<p>Now that my full script works just fine, I want to refactor it, and, as a Slot is basically a list belonging to a Grid, I decided it would be great for my Slot to subclass list, like this :</p>
<pre><code>class Slot(list):
    def __init__(self,grid):
        self.grid = grid
        self.append(list(range(9)))

    def pos(self):
        return self.grid.index(self)

class Grid(list):
    def __init__(self):
        for i in range(9*9):
            self.append(Slot(self))

g = Grid()
g.index(g[5]) -&gt; returns 0, KO !
</code></pre>
<p>I've tried to init the list first ie: super().<strong>init</strong>(list(range(9)), and also a few variations, but nothing seems to work.
What am I missing ?</p>
<p>PS : the <code>g.index(g[5])</code> is just to describe, I'm aware it's pointless. I'm using this logic in methods inside my objects (self.pos(), etc.)</p>
</div>
<div class="post-text" itemprop="text">
<p>By making <code>Slot</code> a subclass of <code>list</code> you also make the comparison between <code>Slot</code> instances use the logic defined for <code>list</code>s (since you haven't overridden that).</p>
<p>Since all <code>Slot</code>s contain the same value:</p>
<pre><code>self.append(list(range(9)))
</code></pre>
<p><code>g.index()</code> will simply match the first entry the <code>grid</code>  yielding <code>0</code> as the result.</p>
<p>When you inherited from <code>object</code> (as <code>Slot</code> did in your first example) all instances compared unequal to themselves as is defined in the Python Reference (unless logic is implemented that dictates otherwise).</p>
<p>In short, you'll need to redefine the comparison methods if you need the slots with similar items to be treated differently when compared. In addition to that, you might want to reconsider sub classing from <code>list</code> and, instead, opt for <code>UserList</code> from <code>collections</code>.</p>
</div>
<span class="comment-copy">Why not using composition over inheritance, have a list as an internal attribute and simply expose all relevant methods for list protocol to work fine? (attributes like <code>__getitem__</code>, <code>__len__</code> etc.)</span>
<span class="comment-copy">None of the classes should extend <code>list</code>. That's an implementation detail rather than a model constraint.  You should hide the implementation and use composition; actually I wouldn't use a <code>list</code> in either class, specially in <code>Slot</code> where <code>index(x) == x</code>!</span>
<span class="comment-copy">Well, it's to avoid that that I'm trying to subclass, My methods are mostly used in the Slot object, ( ex : first version, I'm doing self.values.remove(x), I've been thinking of doing self.remove(x), etc. instead) Redefining <b>getitem</b> etc. would be an overkill, (answer to Lukasz)</span>
<span class="comment-copy">(To dav) I'm interrested in your remark, but english is not my main language, and I'm not sure to get you right. As far as I understand, you suggest not to subclass list but I don't get the reason why. My intention is to use methods offered by lists plus some more specific to my model.</span>
<span class="comment-copy">Thank you for this explanation, this is just what I was looking for. What would be your advice for my code to be as "pythonic" as possible ;-) Keeping my first implementation or override the comparison logic ?</span>
<span class="comment-copy">@Lapin-Blanc If <code>Slot</code>s <i>needs</i> to behave like lists then sub-classing a <code>list</code> makes sense to me (though composition, as argued by others, might be a less messy alternative). If you do stick with sub-classing I'd suggest you inherit from <code>collections.UserList</code> though since it behaves better in these scenarios. I'd just redefine the comparisons to behave as I would need.</span>
<span class="comment-copy">Thank you ! I like to subclass list as my algorithm is based on possible values removal from slots object, until only one value remains, which is the final for the solution. Btw, what do you mean by "it behaves better", if I may ask further...</span>
<span class="comment-copy">@Lapin-Blanc Well, unless you override common operations on the <code>list</code> subclass (for example <code>__add__</code>) when you perform an operation on the subclass (e.g <code>slot_instance = g[5]; r = slot_instance + [1, 2, 3]</code>)  the returned result <code>r</code> will be of type <code>list</code> and not of type <code>Slot</code>. Subclassing from <code>UserList</code> and <a href="https://docs.python.org/3/library/collections.html#collections.UserList" rel="nofollow noreferrer">defining and appropriate <code>__init__</code></a> mitigates that effect.</span>
<span class="comment-copy">Great ! Thank you again for all those helpfull explanations !</span>
