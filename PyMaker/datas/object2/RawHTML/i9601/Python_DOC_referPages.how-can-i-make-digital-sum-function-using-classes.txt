<div class="post-text" itemprop="text">
<p>We just started learning python this year in school, and so far we are only doing basic stuff with tkinter canvas (drawing houses, flowers etc.) and our teacher kinda sucks so I had to learn everything I know by now myself.</p>
<p>I've been thinking about this idea of writing a function to find the digital sum of a number (without recursion preferably) so I came up with this:</p>
<pre><code>def sum(n):
    total=0
    for letter in str(n):
        total+=int(letter)
    return total
</code></pre>
<p>But then, I had an idea about using recursion to find the "absolute dig. sum of a number", for instance 99=9+9=18 =&gt;1+8=9
and I came up with this</p>
<pre><code>total=0
def suma(n):
    global total

    def part_sum(n):
        global total
        total_part=0

        for letter in str(n): 
            total_part+=int(letter) 
        total=total_part 

        if total&lt;10:
            print(total)
        else:
            part_sum(total)

    part_sum(n)    
</code></pre>
<p>which basically makes a sum of n, checks if it is lower than n, if it is not it runs it again (basic recursion), but it uses a bunch of variables and global variables (which are for some reason bad as I've heard) and I am well aware it could be done much more efficiently using classes and objects, but I've only watched couple of vidoes on that so I'm not very good at it.</p>
<p>Could someone please edit my code and paste it here with some notes to help me understand it?      </p>
</div>
<div class="post-text" itemprop="text">
<p>Recursion is often overused. I believe you can write <code>suma()</code> much more clearly without it. Build on what you have already created.</p>
<pre><code>def sum(n):
    total=0
    for letter in str(n):
        total+=int(letter)
    return total

def suma(n):
    while n &gt;= 10:
        n = sum(n)
    return n
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's my solution</p>
<pre><code>def rec_dig_sum(n):
    total = str(sum(map(int, str(n))))
    while len(total)&gt;1:
        total = str(sum(map(int, total)))
    return int(total)
</code></pre>
<p>You can think of <code>map</code> as taking <code>map(function, [input1, input2, input3])</code> and returning <code>[function(input1), function(input2), function(input3)]</code> </p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of saving a variable and updating it with each iteration of a loop (the normal way to do this):</p>
<pre><code>def iterative_sum(num):
    while num &gt;= 10:
        num = int(sum(map(int, str(num))))
    return num
</code></pre>
<p>Send it as an argument to a new function call:</p>
<pre><code>def recursive_sum(num):
    if num &gt;= 10:
        return recursive_sum(sum(map(int, str(num))))
    return num
</code></pre>
<p>You can also make a recursive function to do the initial summation, and use that in the function that keeps doing so until it's only one digit:</p>
<pre><code>def rc(n, c=0):
    if n:
        return rc(n//10, c+n%10)
    return c

def rs(n):
    if n &gt;= 10:
        return rs(rc(n))
    return n
</code></pre>
</div>
<span class="comment-copy">I'm sorry, you wrote that code and you want us to help you understand it? Help you understand the working piece of code that you wrote....</span>
<span class="comment-copy"><code>...could be done much more efficiently using classes and objects...</code> -you need to realize that in python everything is an object including a function. <a href="https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy" rel="nofollow noreferrer">The Standard type hierarchy</a>. A function works fine for this task.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/tutorial/classes.html#classes" rel="nofollow noreferrer">Classes</a>.</span>
<span class="comment-copy">Edit your code how?</span>
