<div class="post-text" itemprop="text">
<p>i'm trying to sort a dict with tasks as a key, and trying to untie them if there is more than one translator in the dict:</p>
<p>So for example, after I iterate the keys and values, since key['harry potter volume 24'] has 2 possible translators, I want to untie them using some of the other paramenters (for example, the 1* but had no luck using lambda dicts iterators since i allways get the error that it's out of range. Same thing when i transformed the dict to a list.</p>
<p>Any ideias? Thanks</p>
<p>Edit1: Deleted for replacement.</p>
<p>Edit2: </p>
<pre><code>newList = []
for k,v in dic.iteritems():
    if len(v) &gt; 1:
        newList.append(v)



#now i'm trying to use sorted to untie it on a parameter 
#(for example the speed which is the 4 position  on a list of lists so then i can return the 
#[0] position translator)

n = sorted(newList, key=lambda t:t[4])

Traceback (most recent call last):
  File "C:\Users\Família\Desktop\functions_dict.py", line 70, in &lt;module&gt;
    n = sorted(newList, key=lambda t:t[4])
  File "C:\Users\Família\Desktop\functions_dict.py", line 70, in &lt;lambda&gt;
    n = sorted(newList, key=lambda t:t[4])
IndexError: list index out of range
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>simple, use the <a href="https://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow noreferrer">list.sort</a>, to well ,sort the elements inside the dict itself and inside those list in place without making any copy of the data (unless that that is what you want)</p>
<pre><code>&gt;&gt;&gt; test={'com os holandeses': [], 'harry potter volume 24': [('Ana Tavares', ['(english)', '(portuguese)', '1*', '0.501', '2000', '20000', '2304', '08:11:2016']), ('Rita Carvalho', ['(english)', '(portuguese)', '1*', '0.633', '5000', '400000', '18023', '09:11:2016'])], 'emailToJane': [('Paula Guerreiro', ['(french)', '(portuguese)', '2*', '0.900', '3500', '45000', '21689', '11:11:2016'])], 'osudy dobrÃ©ho vojÃ¡ka Å\xa0vejka za svÄ\x9btovÃ© vÃ¡lky': [('MikolÃ¡s Janota', ['(czech)', '(english; portuguese)', '3*', '1.780', '2000', '200000', '4235', '08:11:2016'])]}
&gt;&gt;&gt; 
&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(test['harry potter volume 24'])
[('Ana Tavares',
  ['(english)',
   '(portuguese)',
   '1*',
   '0.501',
   '2000',
   '20000',
   '2304',
   '08:11:2016']),
 ('Rita Carvalho',
  ['(english)',
   '(portuguese)',
   '1*',
   '0.633',
   '5000',
   '400000',
   '18023',
   '09:11:2016'])]
&gt;&gt;&gt; for v in test.values():
        v.sort(key=lambda t: float(t[1][3]), reverse=True)


&gt;&gt;&gt; pprint(test['harry potter volume 24'])
[('Rita Carvalho',
  ['(english)',
   '(portuguese)',
   '1*',
   '0.633',
   '5000',
   '400000',
   '18023',
   '09:11:2016']),
 ('Ana Tavares',
  ['(english)',
   '(portuguese)',
   '1*',
   '0.501',
   '2000',
   '20000',
   '2304',
   '08:11:2016'])]
&gt;&gt;&gt; 
</code></pre>
<p>the meat of the deal is here</p>
<pre><code>for v in test.values():
    v.sort(key=lambda t: float(t[1][3]), reverse=True)
</code></pre>
<p><code>t</code> is each element inside each list, which in your case it can be expressed as <code>(Name,ListData)</code> then <code>t[1]</code> is said ListData and from there we want what you call "speed" (whatever that means here), I transform that to a float so it be orderer by it numeric value, and the rest should be self explanatory</p>
</div>
<div class="post-text" itemprop="text">
<p>One can pass a <code>key</code> parameter to the <code>sorted</code> function - this is a function that will take in the item to be sorted, and return another Python object that will compare naturally with the built-in operators.</p>
<p>Therefore, you can have whatever complexity you want in a function to be used as "key", and still do all your sorting in a single call. The Key function takes a single Python object - in th case of a dictionary you will want a tuple of key, value such as provided by the <code>items</code> method. </p>
<p>But on a second reading, you want to sort the values, regardless of the keys - that, yes, will require one call to sorted to each dictionary item:</p>
<pre><code>def mykey(translator):
    if not translator: 
         return ''  # returns empty lists and avoids index error
    key = translator[1][2]  # Should be string '*1' in your example;
    # concatenate the return value with more
    # fields if needed.
    return key

new_dict = {}
for key, value in dicionary.items()  
    #  Don't use iteritems - it is Python3 incompatible, and buys you almost nothing but for HUGE datasets
    # Also avoid one letter variables if they don't improve readability
    new_dict[key] = sorted(value, key=mykey)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The error is because the <code>newList</code> you demonstrate is actually a <em>list of lists</em>.</p>
<p>Here it is "pretty-printed":</p>
<pre><code>[
    [
        [
            "Ana Tavares",
            [
                "(english)",
                "(portuguese)",
                "1*",
                "0.701",
                "2000",
                "20000",
                "2304",
                "08:11:2016"
            ]
        ],
        [
            "Rita Carvalho",
            [
                "(english)",
                "(portuguese)",
                "1*",
                "0.633",
                "5000",
                "400000",
                "18023",
                "09:11:2016"
            ]
        ]
    ]
]
</code></pre>
<p><code>newList</code> is actually a list containing exactly one element, another list. That is, the data structure is something like this:</p>
<pre><code>- list:
  - list:
    - list:
      - string
      - list, containing:
       - string
       - string
       - string
       - string
       - string
       - string
       - string
       - string
    - list:
      - string
      - list, containing:
       - string
       - string
       - string
       - string
       - string
       - string
       - string
       - string
</code></pre>
<p>I suspect this is not the data structure you intended to produce. But the reason you're getting the error is that you are calling <code>sorted</code> on the outermost list, which only has one element. That element, in turn, only has two elements. So <code>lambda t: t[4]</code> fails because it's being called on a length-two list.</p>
</div>
<span class="comment-copy">It's hard to tell what you're trying to do. Can you post an example of the output you'd want?</span>
<span class="comment-copy">Also in general it is a very bad idea to shadow a built-in function. Don't assign things to <code>dict</code>.</span>
<span class="comment-copy">Also there's no way to tell what's wrong with your code if you don't post the code.</span>
<span class="comment-copy">@ssdecontrol thanks for the reply, i tried to explain what i want in the first edit, the dict is mearly a word, i'm not using it to describe it in python. I'll try to find the best part of the code i've came up with</span>
<span class="comment-copy"><a href="http://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a></span>
<span class="comment-copy">This worked kinda like i wanted it! But i have a new problem that i'm not sure if i should post here or in a new thread</span>
<span class="comment-copy">glad you liked it. If this new problem is not about sorting this dictionary or sorting stuff, I think a new thread is the right choice</span>
<span class="comment-copy">ups already updated, but ill erase that part and make a new one, hope you can help there too! thanks alot!</span>
