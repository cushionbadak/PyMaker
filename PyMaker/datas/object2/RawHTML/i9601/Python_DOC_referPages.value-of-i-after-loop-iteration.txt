<div class="post-text" itemprop="text">
<p>Consider the following function:</p>
<pre><code>def xyz(x,y):
    z = 0

    for i in range(x):
        z = z + y

    return z
</code></pre>
<p>a. If x is 3 and y is 4, what will be the values of i for each loop iteration?</p>
<p>b. What will be the value of z at the end of each loop iteration? (What is z after the first iteration? What is z after the second iteration?) </p>
<p>I have the answers:</p>
<p>a. 0,1,2</p>
<p>b. 4,8,12</p>
<p>I know these are super simple questions but I just started this and I don't know how to read functions and stuff. </p>
<p>I would love some explanation on why the answers are what they are.</p>
</div>
<div class="post-text" itemprop="text">
<p>Ok, I'm trying to explain you this program as simple as possible.</p>
<pre><code>def xyz(x,y): #This is a program declaration
    z = 0

    for i in range(x):
        z = z + y

    return z
</code></pre>
<p>You need to call this program somewhere in Python by <code>xyz(3,4)</code>. you can use any int instead of 3 and 4.</p>
<p>After the function call, value of x and y in python would be 3 and 4. So, <code>range(x)</code> would be <code>range(3)</code> which is <code>[0,1,2]</code>. Hence i value changes from 0-2. (0 in first iteration and 2 in last).</p>
<p><code>z</code> value would be incremental, as you are doing addition on <code>i</code> and <code>z</code> itself.
So, it is like this,</p>
<blockquote>
<p>1 iteration. z = 0 + 0
  2 iteration. z = 0 + 1
  3 iteration. z = 1 + 2</p>
</blockquote>
<p>and the function returns 3.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>a. If x is 3 and y is 4, what will be the values of i for each loop iteration?</strong>
  It's easy to test this out with adding print statements inside the loop:</p>
<pre><code>def xyz(x,y):
z = 0
for i in range(x):
    print i
    z = z + y
return z
</code></pre>
<p>Range is a function that takes two parameters, beginnig (included) and end (excluded). If there is only one value, then it is the end and beginning is set to 0 by default. Therefore, if x is 3, the values in loops would be 0, 1, 2. but not 3 as this is excluded in Python 2.x. (In Python 3.x, range is replaced by xrange, and there the last value is included, and then the values are 0, 1, 2, 3.)</p>
<p><strong>b. What will be the value of z at the end of each loop iteration?</strong>(What is z after the first iteration? What is z after the second iteration?)
  Again, use print statements:</p>
<pre><code>def xyz(x,y):
z = 0
for i in range(x):
    z = z + y
    print z
return z
</code></pre>
<p>The values of z in each loop are 4, 8, 12 respectively.The answers are calculated in the following way:
1st iteration: z is 0 and 4 is added to it. The value of z is now 4, as it is overwritten.
2nd iteration: 4 is added to 4, therefore the end result is 8.
3rd iteration: 8 + 4 = 12.</p>
<p>Hope this helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>1a.
if you provide single value to range(). It is treated as stop value.
Therefor range(3) will iterate upto &lt;3 i.e 0 1 2.</p>
<p>1b. because z = z + y therefor at first z = 0 + 4 , z = 4 + 4 and at last it will be z = 8 + 4.</p>
</div>
<span class="comment-copy">Show your effort.</span>
<span class="comment-copy">Maybe you should ask your cousin for some help after class.</span>
<span class="comment-copy">You should look into <a href="https://www.python.org/about/gettingstarted/" rel="nofollow noreferrer">Python For Beginners</a> there are plenty of resources to get your started. a) <code>range(3)</code> is defined as returning 0 up to but not including 3 b) each loop adds <code>4</code>, hence <code>4, 8, 12</code>.</span>
<span class="comment-copy">One thing you can do is <code>print</code> <code>z</code> during every iteration so you can see what is happening inside the loop. Let the code explain itself through debugging :)</span>
<span class="comment-copy"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function" rel="nofollow noreferrer">docs.python.org/3/tutorial/controlflow.html#the-range-function</a></span>
