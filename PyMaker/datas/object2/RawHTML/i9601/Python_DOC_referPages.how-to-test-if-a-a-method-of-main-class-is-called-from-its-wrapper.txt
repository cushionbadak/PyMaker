<div class="post-text" itemprop="text">
<p>So i have a python class say </p>
<pre><code>class Nested(object):
    def method_test(self):
        #do_something
</code></pre>
<p>The above class is being maintained by some other group so i can't change it. Hence we have a wrapper around it such that</p>
<pre><code>class NestedWrapper(object):
    self.nested = Nested()

    def call_nested(object):
        self.nested.method_test()
</code></pre>
<p>Now, I am writing test cases to test my <code>NestedWrapper</code>. How can i test that in one of my test, the underlying method of <code>Nested.method_test</code> is being called? Is it even possible?</p>
<p>I am using python <code>Mock</code> for testing. </p>
<p><strong>UPDATE</strong> I guess I was implicitly implying that I want to do Unit Testing not a one off testing. Since most of the responses are suggesting me to use debugger, I just want to point out that I want it to be unit tested. </p>
</div>
<div class="post-text" itemprop="text">
<p>I think you can just mock <code>Nested.method_test</code> and make sure it was called...</p>
<pre><code>with mock.patch.object(Nested, 'method_test') as method_test_mock:
    nw = NestedWrapper()
    nw.call_nested()

method_test_mock.called  # Should be `True`
</code></pre>
<p>If using <code>unittest</code>, you could do something like <code>self.assertTrue(method_test_mock.called)</code>, or you could make a more detailed assertion by calling one of the <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_called_with" rel="nofollow noreferrer">more specific assertions</a> on <code>Mock</code> objects.</p>
</div>
<span class="comment-copy">One way to do it is using debugger. use pdb and add breakpoint 'set_trace()' right before calling the nested method_test and then step into the method to see if it is getting called or not.</span>
<span class="comment-copy">Is it a valid option to mock <code>Nested.method_test</code> and check if it was called?</span>
