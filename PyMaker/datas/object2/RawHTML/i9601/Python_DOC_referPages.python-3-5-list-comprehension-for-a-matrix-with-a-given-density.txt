<div class="post-text" itemprop="text">
<p>I would like to make an n x n matrix of boolean values (0 or 1) with a given density d (percent of non-zero entries). I believe one can do this with the random module and list comprehension.</p>
<p>For this question lets not consider sci.py or num.py</p>
<p>To make a list of lists:</p>
<pre><code>import random
n = 5
[[random.randint(0,1) for column in range(n)] for row in range(n)]

[[0, 0, 0, 0, 1], 
 [1, 0, 1, 0, 0], 
 [0, 1, 0, 1, 1], 
 [1, 1, 1, 0, 0], 
 [0, 1, 1, 0, 0]]
</code></pre>
<p>and we have a matrix. The problem is the density will always be â‰ˆ .5</p>
<p>So how do we change the inner list comprehension to give us the value one with a probability equivalent to the density?</p>
<pre><code>[[0 if &lt;condition&gt; else 1 for column in range(n)] for row in range(n)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I suggest <code>0 if random.random() &gt;  d else 1</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/random.html#random.random" rel="nofollow noreferrer"><code>random.random</code></a> to return <code>float</code> between <code>0.0</code> and <code>1.0</code>:</p>
<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; import pprint
&gt;&gt;&gt; m = [[0 if random.random() &lt; 0.3 else 1 for _ in range(5)] for _ in range(5)]
&gt;&gt;&gt; pprint.pprint(m)
[[1, 1, 1, 1, 1],
 [1, 1, 1, 1, 1],
 [1, 1, 0, 0, 1],
 [0, 1, 0, 0, 1],
 [0, 0, 1, 1, 1]] 
</code></pre>
</div>
<span class="comment-copy">Thank you man I can't believe I forgot about using reals :P</span>
<span class="comment-copy">this is for a density  0.7</span>
<span class="comment-copy">@Gribouillis Yes</span>
