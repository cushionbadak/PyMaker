<div class="post-text" itemprop="text">
<p>So I have been sitting on this problem for a while, and after searching through multiple other questions cannot find the answer I need.</p>
<p>I have been set a task to make a 4 digit random number generator then the user has to try and guess the number. Each try they have it says how many numbers they got right and which position they are in.
Also the number needs to be in the correct positioning.</p>
<p>This is my current code.</p>
<pre><code>import random as r
def GetNumber():
    number = [r.randint(0, 9), r.randint(0, 9), r.randint(0, 9), r.randint(0, 9)]
    return number

def Choices():
    randomNumber = GetNumber()
    userChoice = list(input("Enter 4 numbers\n")) #Allows the user to input a number 4 digits long
    userChoice = [int(i) for i in userChoice]
    if userChoice == randomNumber:
        print("Congratulations! You chose the right number")
</code></pre>
<p>Thanks in advance :)</p>
</div>
<div class="post-text" itemprop="text">
<p>This is my take on it.</p>
<pre><code>import random as r


def GetNumber():
    return [r.randint(0, 9) for i in range(4)]


def Choices():
    randomNumber = GetNumber()
    userChoice = [int(i) for i in list(input("Enter 4 numbers\n"))]
    n = 0
    while userChoice != randomNumber:
        hits = [str(i+1) for i in range(4) if userChoice[i] == randomNumber[i]]
        if hits:
            print('You got position(s) {} correct'.format(', '.join(hits)))
        else:
            print('You got all of them wrong!')
        userChoice = [int(i) for i in list(input("Enter 4 numbers\n"))]
        n += 1
    print("Congratulations! You found the right number in {} turns!!".format(n))

Choices()
</code></pre>
<p>The code has been restructured a bit to loop around until the user actually finds the secret number. This is just a framework upon which you can experiment a bit and try to optimize it further in terms of user interaction or whatnot.</p>
<p>If anything is unclear, let me know. Cheers!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can <a href="https://docs.python.org/3.5/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> the random number and the user's choice and compare the pairs:</p>
<pre><code>&gt;&gt;&gt; number = [4, 3, 9, 1]
&gt;&gt;&gt; choice = [1, 3, 4, 1]
&gt;&gt;&gt; [n == c for n, c in zip(number, choice)]
[False, True, False, True]
&gt;&gt;&gt; sum(n == c for n, c in zip(number, choice))
2
</code></pre>
<p>To get the total number of matching numbers, regardless of their position, you could feed both the number and the user's choice through a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a> and get their intersection with <code>&amp;</code>:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; Counter(number) &amp; Counter(choice)
Counter({1: 1, 3: 1, 4: 1})
&gt;&gt;&gt; sum((Counter(number) &amp; Counter(choice)).values())
3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think the key to this is using a string of digits rather than a numeric data type. Here's a working example. You can do it by comparing numbers but, in this case, we don't care about numeric value so much as the pattern of characters.</p>
<pre><code>from random import choice
from string import digits


def is_digits(string):
    """Return true if all characters are digits, otherwise false"""

    return all([char.isdigit() for char in string])


def get_number(length):
    """Return a string of digits with the number of characters equal to length"""

    return ''.join(choice(digits) for i in range(length))


def guess():
    """Receive and evaluate guesses for match to randomly generated number"""

    guess = ''
    miss_char = '-'
    miss_message = 'Try again.'
    win_message = 'Congratulations! You chose the right number.'
    answer_length = 4
    answer = get_number(answer_length)
    while guess != answer:
        guess = raw_input('Enter {0} numbers: '.format(len(answer)))
        if len(guess) != len(answer) or is_digits(guess) is False:
            continue
        matches = [answer[i]
                   if answer[i] == guess[i]
                   else miss_char
                   for i in range(len(answer))]
        matches_string = ''.join(matches)
        message_base = 'Matched digits: {0}.'.format(matches_string)
        if guess != answer:
            print(' '.join([message_base, miss_message]))
            guess = ''
        else:
            print(' '.join([message_base, win_message]))

guess()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import random as r
def GetNumber():
    number = r.randint(0000, 9999)
    return str(number).zfill(4)

def Choices():
    randomNumber = GetNumber()
    print type(randomNumber),randomNumber
    userChoice = str(input("Enter 4 numbers\n")).strip("\n") #Allows the user to input a number 4 digits long
    for a,b in zip(userChoice,randomNumber):
      if not a==b:
        print "{0} not match {1}".format(a,b)
    if userChoice==randomNumber:
      print "Congratulations! You chose the right number"

Choices()
</code></pre>
</div>
<span class="comment-copy">Why not <code>r.randint(1000,9999)</code> if you want a 4 digit random number?</span>
<span class="comment-copy">so you are trying to code the mastermind game.. Your code so far is very nice. You can do this alone too.</span>
<span class="comment-copy">@Chris_Rands I also want the chance of the first number to be 0</span>
<span class="comment-copy">@Ev.Kounis I am making the mastermind game, However most of my coding is really inefficient and I want to make it as efficient as possible</span>
<span class="comment-copy">@Jake Ah I see use <code>[r.randint(0, 9) for i in range(4)]</code> then</span>
<span class="comment-copy">Thank you for the quick reply, gave it a test and it works perfectly</span>
<span class="comment-copy">@Tobias_k's answer is also very interesting. You might want to fuse the two to give hints to the user for correct numbers in the wrong positions or so</span>
<span class="comment-copy">The <code>sum(n == c for n, c in zip(number, choice))</code> returning 2 is just beautiful</span>
<span class="comment-copy">Well, it doesn't do what the question asks, it's a pure code answer without any explanation, it won't work correctly in Python 3, and it creates a one-element list for no reason.</span>
<span class="comment-copy">@interjay thx, i fix that, but i am looking always to keep on the question and solve the current problem, i mean that's not code Reviewing</span>
<span class="comment-copy">Code you post here should be good code as this is what people learn from. In any case, you have fixed one of the issues I listed, but this still doesn't actually do what the question asks (check which digits are correct).</span>
<span class="comment-copy">thx @interjay, fixed, still not for python 3 (input &amp; raw_input)</span>
