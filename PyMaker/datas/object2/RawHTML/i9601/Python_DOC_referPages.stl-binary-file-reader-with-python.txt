<div class="post-text" itemprop="text">
<p>I'm trying to write my "personal" python version of STL binary file reader, according to WIKIPEDIA : A binary STL file contains :</p>
<ul>
<li>an 80-character (byte) headern which is generally ignored.</li>
<li>a 4-byte unsigned integer indicating the number of triangular facets in the file.</li>
<li>Each triangle is described by twelve 32-bit floating-point numbers: three for the normal and then three for the X/Y/Z coordinate of each vertex – just as with the ASCII version of STL. After these follows a 2-byte ("short") unsigned integer that is the "attribute byte count" – in the standard format, this should be zero because most software does not understand anything else. --Floating-point numbers are represented as IEEE floating-point numbers and are assumed to be little-endian--</li>
</ul>
<p>Here is my code :</p>
<pre><code>#! /usr/bin/env python3

with open("stlbinaryfile.stl","rb") as fichier :

head=fichier.read(80) 
nbtriangles=fichier.read(4)
print(nbtriangles)
</code></pre>
<p>The output is :</p>
<pre><code>b'\x90\x08\x00\x00'
</code></pre>
<p>It represents an unsigned integer, I need to convert it without using any package (struct,stl...). Are there any (basic) rules to do it ?, I don't know what does \x mean ? How does \x90 represent one byte ? </p>
<p>most of the answers in google mention "C structs", but I don't know nothing about C.</p>
<p>Thank you for your time.</p>
</div>
<div class="post-text" itemprop="text">
<p>The typical way to interpret an integer is to use <code>struct.unpack</code>, like so:</p>
<pre><code>import struct

with open("stlbinaryfile.stl","rb") as fichier :
    head=fichier.read(80)
    nbtriangles=fichier.read(4)
    print(nbtriangles)
    nbtriangles=struct.unpack("&lt;I", nbtriangles)
    print(nbtriangles)
</code></pre>
<p>If you are allergic to <code>import struct</code>, then you can also compute it by hand:</p>
<pre><code>def unsigned_int(s):
    result = 0
    for ch in s[::-1]:
        result *= 256
        result += ch
    return result

...
nbtriangles = unsigned_int(nbtriangles)
</code></pre>
<hr/>
<p>As to what you are seeing when you print <code>b'\x90\x08\x00\x00'</code>. You are printing a <code>bytes</code> object, which is an array of integers in the range [0-255]. The first integer has the value 144 (decimal) or 90 (hexadecimal). When printing a <code>bytes</code> object, that value is represented by the string <code>\x90</code>. The 2nd has the value eight, represented by <code>\x08</code>. The 3rd and final integers are both zero. They are presented by <code>\x00</code>.</p>
<p>If you would like to see a more familiar representation of the integers, try:</p>
<pre><code>print(list(nbtriangles))

[144, 8, 0, 0]
</code></pre>
<p>To compute the 32-bit integers represented by these four 8-bit integers, you can use this formula:</p>
<pre><code>total = byte0 + (byte1*256) + (byte2*256*256) + (byte3*256*256*256)
</code></pre>
<p>Or, in hex:</p>
<pre><code>total = byte0 + (byte1*0x100) + (byte2*0x10000) + (byte3*0x1000000)
</code></pre>
<p>Which results in:</p>
<pre><code>0x00000890
</code></pre>
<p>Perhaps you can see the similarities to decimal, where the string "1234" represents the number:</p>
<pre><code>4 + 3*10 + 2*100 + 1*1000
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you're using Python 3, you can <a href="https://docs.python.org/3/library/stdtypes.html#int.from_bytes" rel="nofollow noreferrer">use <code>int.from_bytes</code></a>. I'm guessing the value is stored little-endian, so you'd just do:</p>
<pre><code> nbtriangles = int.from_bytes(fichier.read(4), 'little')
</code></pre>
<p>Change the second argument to <code>'big'</code> if it's supposed to be big-endian.</p>
<p>Mind you, the normal way to parse a fixed width type is the <code>struct</code> module, but apparently you've ruled that out.</p>
<p>For the confusion over the <code>repr</code>, <code>bytes</code> objects will display ASCII printable characters (e.g. <code>a</code>) or standard ASCII escapes (e.g. <code>\t</code>) if the byte value corresponds to one of them. If it doesn't, it uses <code>\x##</code>, where <code>##</code> is the hexadecimal representation of the byte value, so <code>\x90</code> represents the byte with value 0x90, or 144. You need to combine the byte values at offsets to reconstruct the <code>int</code>, but <code>int.from_bytes</code> does this for you faster than any hand-rolled solution could.</p>
<p><strong>Update:</strong> Since apparent <code>int.from_bytes</code> isn't "basic" enough, a couple more complex, but only using top-level built-ins (not alternate constructors) solutions. For little-endian, you can do this:</p>
<pre><code>def int_from_bytes(inbytes):
    res = 0
    for i, b in enumerate(inbytes):
        res |= b &lt;&lt; (i * 8)  # Adjust each byte individually by 8 times position
    return res
</code></pre>
<p>You can use the same solution for big-endian by adding <code>reversed</code> to the loop, making it <code>enumerate(reversed(inbytes))</code>, or you can use this alternative solution that handles the offset adjustment a different way:</p>
<pre><code>def int_from_bytes(inbytes):
    res = 0
    for b in inbytes:
        res &lt;&lt;= 8  # Adjust bytes seen so far to make room for new byte
        res |= b   # Mask in new byte
    return res
</code></pre>
<p>Again, this big-endian solution can trivially work for little-endian by looping over <code>reversed(inbytes)</code> instead of <code>inbytes</code>. In both cases <code>inbytes[::-1]</code> is an alternative to <code>reversed(inbytes)</code> (the former makes a new <code>bytes</code> in reversed order and iterates that, the latter iterates the existing bytes object in reverse, but unless it's a huge <code>bytes</code> object, enough to strain RAM if you copy it, the difference is pretty minimal).</p>
</div>
<span class="comment-copy">Why the restriction on using <code>import struct</code>?</span>
<span class="comment-copy">It should be original. I have to start from zero. with only basic functions.</span>
<span class="comment-copy">I would argue that <code>struct.unpack</code> <i>is</i> a "basic function." More to the point, it is part of the standard library, available in every Python installation.</span>
<span class="comment-copy">But if I use it the project I work on will have no meaning, th purpose is to create STL binary file reader, without using : struct.unpack ,int.from_bytes..., All that I need is how (the rules) to convert \x##\x##...... knowing the type.</span>
<span class="comment-copy">Also, putting together the floating-point values by hand will be way harder than putting together the integers.</span>
<span class="comment-copy">That's what I am talking about, but unsigned_int() converts b'*\x1c\x02\x00' (another example) to 138282,  * represents 48 , I don't know why ?, know I have to interpret the rest of the file (see my answer 3rd item in the list  ...</span>
<span class="comment-copy">, for the first point the 50-bytes are : ( b'\x9a' b'\xa3' b'\x14' b'\xbe' b'\x05' b'$' b'\x85' b'\xbe' b'N' b'b' b't' b'?' b'\xcd' b'\xa6' b'\x04' b'\xc4' b'\xfb' b';' b'\xd4' b'\xc1' b'\x84' b'w' b'\x81' b'A' b'\xcd' b'\xa6' b'\x04' b'\xc4' b'\xa5' b'\x15' b'\xd3' b'\xc1' b'\xb2' b'\xc7' b'\x81' b'A' b'\xef' b'\xa6' b'\x04' b'\xc4' b'\x81' b'\x14' b'\xd3' b'\xc1' b'Y' b'\xc7' b'\x81' b'A' b'\x00' b'\x00' ) How can I convert this by hand ( some bytes don't start with \x ) Thank you for your time.</span>
<span class="comment-copy">If you want to see the decimal equivalents of the integers in the byte array, print them as a list: <code>list(b'*\x1c\x02\x00') == [42, 28, 2, 0]</code>. If you want to convert that by hand, don't <code>print (nbtriangles)</code>. Instead <code>print(list(nbtriangles))</code> or <code>for digit in nbtriangles: print(digit)</code></span>
<span class="comment-copy">yes,yes,yes , but I really don't know how to convert it if it reprsents a floating point,</span>
<span class="comment-copy">Thanks @ShadowRanger for your help, I know it sounds strange, but I should use basic functions only, so I have to discover how to convert (the rules) to create my own "int.from_bytes",For example to convert manually  b'\x90\x08\x00\x00' (which I know to be an unsigned integer) what should I do ? : 144+8+0+0=152 ?? I didn't get the meaning of OFFSET, where can I found it ?  I have also to convert some 32-bit floating-point numbers from \x## format ( I have edited my answer - 3rd list's item)</span>
<span class="comment-copy">@Pylint424: <code>int.from_bytes</code> is a "basic" function (it's exactly as basic as <code>int</code> itself), so it would help if you define "basic" so I know what's available. Regardless, the offset is about shifting the bits; assuming little endian, the first byte requires no shifting before combining, the second requires a shift of 8, the third a shift of 16, etc. <code>144 + (8 &lt;&lt; 8) == 2192</code>. Converting binary representation of a floating point value without assistance from <code>struct</code> module is much more annoying, I have no idea what sort of assignment would encourage you to do that in Python.</span>
<span class="comment-copy">@Pylint424: I added alternatives to <code>int.from_bytes</code>. For floating point, I'd suggest asking a new question; floating point is a totally different animal, and it wasn't part of your original question at all.</span>
<span class="comment-copy">This is what I was looking for, now I have 3 methods to do the conversion, I still have a small problem : int_from_bytes(b'*\x1c\x02\x00') returns 138282 ==&gt; * is interpreted as 48 ?? thanks for your time, I'll ask another question .</span>
<span class="comment-copy">@Pylint424: Read the original part of my answer. The <code>repr</code> of <code>bytes</code> will use the character corresponding to the ASCII value of that byte if the byte is printable ASCII, for brevity (it's one character in the <code>repr</code> instead of four for an escape). If you check a table of ASCII values, you'll see that <code>*</code> has an ordinal of 42 (I have no idea where you got 48, it's not 48).</span>
