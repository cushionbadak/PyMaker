<div class="post-text" itemprop="text">
<p>I'm having trouble with inheritance between classes. The class I'm struggling with is the vulture class which is a subclass of the bird class which is a subclass of the critter class. The bird and critter class, and the main that they're being run through, all work fine. But when I try to use the vulture class, I get an error:</p>
<pre><code>AttributeError: 'Vulture' object has no attribute '_Bird__direction'
</code></pre>
<p>I'm not sure what I did wrong, and I'm hoping someone could help me find my mistake.</p>
<p>Vulture class:</p>
<pre><code>from bird import *
class Vulture (Bird):
    def __init__(self):
        self.__hungry=True
        self.__in_a_row=-1
        self.__direction=DIRECTION_NORTH

    def eat(self):
        if self.__hungry:
            self.__hungry=False
            return True
        else:
            return False

    def fight(self, opponent):
        self.__hungry=True
        return super(Bird, self).fight(self,opponent)
    def get_color(self):
        black
</code></pre>
<p>Bird class:</p>
<pre><code>from Critter import *

class Bird (Critter):
    def __init__(self):
        self.__in_a_row=-1 #doesn't go north 3 times on first move if set to 0
        self.__direction=DIRECTION_NORTH

    def fight(self, opponent):
        if opponent.__str__=="%":  #roars at ants
            return ATTACK_ROAR
        else:
            return ATTACK_POUNCE

    def get_color(self):
        return "blue" 

    def __str__(self): #uses the most recent direction to determine which character should be used
        if (self.__direction==DIRECTION_NORTH or self.__direction==DIRECTION_CENTER):
            return "^"
        elif self.__direction==DIRECTION_EAST:
            return "&gt;"
        elif self.__direction==DIRECTION_SOUTH:
            return "V"
        else:
            return "&lt;"

    def get_move(self):
        if self.__in_a_row&lt;2:
            self.__in_a_row+=1
            return self.__direction
        else:   #Turning in the proper direction after it hits the end of the line
            if self.__direction==DIRECTION_NORTH:
                self.__direction=DIRECTION_EAST
                self.__in_a_row=0
                return self.__direction
            elif self.__direction==DIRECTION_EAST:
                self.__direction=DIRECTION_SOUTH
                self.__in_a_row=0
                return self.__direction
            elif self.__direction==DIRECTION_SOUTH:
                self.__direction=DIRECTION_WEST
                self.__in_a_row=0
                return self.__direction
            elif self.__direction==DIRECTION_WEST:
                self.__direction=DIRECTION_NORTH
                self.__in_a_row=0
                return self.__direction

    def eat(self):
        return False
</code></pre>
<p>I don't think that the critter class itself will be relevant in this, and it's pretty big, so I'll leave that off the post unless someone thinks it might help to have.</p>
</div>
<div class="post-text" itemprop="text">
<p>See this section on <a href="https://docs.python.org/3/tutorial/classes.html#private-variables" rel="nofollow noreferrer">Private Variables</a> in the Python documentation.</p>
<p>Python treats instance variables that start with double-underscores specially, mangling the name to keep them private to the class (even private from the parent class).  When you call a Bird method on your Vulture class, the Bird method references to <code>self.__direction</code> are <em>actually</em> referencing the <code>self._Bird__direction</code> variable which is distinct from the <code>self._Vulture__direction</code> variable that you initialize in your Vulture <code>__init__</code> constructor.</p>
<p>In particular:</p>
<pre><code>v = Vulture()   # initializes self._Vulture__direction only
print(v)        # throws an exception -- v._Bird__direction isn't initialized
</code></pre>
<p>Edit: As @ShadowRanger points out, the convention in Python is to prefix with a single underscore those instance variables or methods that are intended to be private to the implementation but freely shared between superclasses and subclasses (i.e., similar to <code>protected</code> in Java or C++).  There's no special treatment of such variables by the language, it's just a signal to users of the class that they shouldn't "mess" with those instance variables or methods.</p>
<p>This is probably what you intended for <code>__direction</code>, <code>__in_a_row</code>, and maybe even <code>__hungry</code> (though that last one doesn't appear in the Bird class).  If you change all these double underscore prefixes to single underscores, that should clear up your problem.</p>
</div>
<span class="comment-copy">Can you provide the code where you use these classes and also the <code>Critter</code> class?</span>
<span class="comment-copy">To make this an answer on fixing it, you might mention that variables corresponding to "protected" in other languages (accessible by all classes in inheritance hierarchy, but not to be used by others) traditionally begin with a single <code>_</code>, not two. Two is magic, one is not.</span>
<span class="comment-copy">That seems to have gotten everything working, thanks for your help guys.</span>
