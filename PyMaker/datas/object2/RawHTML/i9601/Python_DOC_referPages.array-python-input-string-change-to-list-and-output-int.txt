<div class="post-text" itemprop="text">
<p>someone can help me to solve that my problem?
that problem is, </p>
<p>if iam input int (1,2,3,4,5,6,7,8,9,0) always error?</p>
<pre><code>data = input()

array = list(data)

table = {" ":270,
         "a":0,
         "b":90,
         "c":180,
         "d":270,
         "e":0,
         "f":90,
         "g":180,
         "h":270,
         "i":0,
         "j":90,
         "k":180,
         "l":270,
         "m":0,
         "n":90,
         "o":180,
         "p":270,
         "q":0,
         "r":90,
         "s":180,
         "t":270,
         "u":0,
         "v":90,
         "w":180,
         "x":270,
         "y":0,
         "z":90,
         "0":180,
         "1":270,
         "2":0,
         "3":90,
         "4":180,
         "5":270,
         "6":0,
         "7":90,
         "8":180,
         "9":270,
         "!":0,
         "@":90,
         "#":180,
         "$":270,
         "%":0,
         "^":90,
         "&amp;":180,
         "*":270,
         "(":0,
         ")":90,
         "-":180,
         "_":270,}



for i in range(len(array)):

    print(array[i])

    print(("{["+array[i]+"]}").format(table))
</code></pre>
<p>Error at :</p>
<p>ex : if am input a#2</p>
<pre><code>print(("{["+array[i]+"]}").format(table))

KeyError: 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Unfortunately you can't use integers as string keys to a dictionary for <code>element_index</code> in the format language. This is a limitation of the format language, it treats an integer <code>element_index</code> as an integer. Unfortunately this is not explicitly stated in the documentation <a href="https://docs.python.org/3.5/library/string.html#formatspec" rel="nofollow noreferrer">https://docs.python.org/3.5/library/string.html#formatspec</a> other than saying:</p>
<blockquote>
<p>element_index     ::=  integer | index_string</p>
</blockquote>
<pre><code>&gt;&gt;&gt; "{[2]}".format({'2':0})
KeyError: 2
&gt;&gt;&gt; "{[*]}".format({'*':0})
'0'
&gt;&gt;&gt; "{[2]}".format({2:0})
'0'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From the docs for the <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow noreferrer"><em>field_name</em></a>:</p>
<blockquote>
<p>The field_name itself begins with an arg_name that is either a number
  or a keyword. <strong>If itâ€™s a number, it refers to a positional argument</strong>, ...</p>
</blockquote>
<p>and</p>
<blockquote>
<p>Because arg_name is not quote-delimited, it is not possible to specify
  arbitrary dictionary keys (e.g., the strings <strong>'10'</strong> or ':-]') within a
  format string.</p>
</blockquote>
<p>The grammar spec for <em>field_name</em> is shown as </p>
<pre><code>field_name        ::=  arg_name ("." attribute_name | "[" element_index "]")*
</code></pre>
<p>I think the parenthesis/brackets are saying that arg_name can be either a <code>dotAttribute</code> or an index expression, <code>[2]</code> so the arbitrary dictionary key of the form <code>'10'</code> limitation applies - if that is correct then the docs could be clearer.</p>
<pre><code>&gt;&gt;&gt; d
{'1': 123, 'a': 4}
</code></pre>
<p>Using <code>'''{['1']}'''</code> as the format string, returns a <em>double quoted</em> string which just doesn't work.</p>
<pre><code>&gt;&gt;&gt; '''{['1']}'''.format(d)
Traceback (most recent call last):
  File "&lt;pyshell#98&gt;", line 1, in &lt;module&gt;
    '''{['1']}'''.format(d)
KeyError: "'1'"

&gt;&gt;&gt; d.__getitem__("'1'")
Traceback (most recent call last):
  File "&lt;pyshell#100&gt;", line 1, in &lt;module&gt;
    d.__getitem__("'1'")
KeyError: "'1'"
</code></pre>
<p>Then using '''{<a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow noreferrer">1</a>}''' for the format string creates an integer which is passed to <code>__getitem__</code></p>
<pre><code>&gt;&gt;&gt; '''{[1]}'''.format(d)
Traceback (most recent call last):
  File "&lt;pyshell#101&gt;", line 1, in &lt;module&gt;
    '''{[1]}'''.format(d)
KeyError: 1
&gt;&gt;&gt;
</code></pre>
<p><code>.format</code> just cannot make a string that looks like <code>'2'</code> to be passed to <code>__getitem__</code></p>
<hr/>
<p>If the dictionary has a <em>double quoted</em> key, then it works</p>
<pre><code>&gt;&gt;&gt; d["'1'"] = 'foo'
&gt;&gt;&gt; d
{'1': 123, "'1'": 'foo', 'a': 4}
&gt;&gt;&gt; "{['1']}".format(d)
'foo'
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you get the same result with</p>
<pre><code>data = input()

for char in data:
    print(char)
    print(table[char])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since your question has already been answered I wanted to point out another way you could convert characters to numbers without an extremely long dict. </p>
<pre><code>chars = " abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()-_"

for char in chars:
    print(char, (chars.index(char)+3)%4 * 90)
</code></pre>
<p>To be honest I think the original way might be better because it's extremely obvious what it does, but I just wanted to show that there is an easier way.  </p>
</div>
<span class="comment-copy">int <code>2</code> vs string <code>'2'</code>? Try printing <code>data</code> and <code>array</code> first to help you debug... Since we don't know what's in there we can't really help. See <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a></span>
<span class="comment-copy">You should post the complete Traceback.</span>
<span class="comment-copy">a#2(input),  Output  a 0 # 180 2 Traceback (most recent call last):   File "D:**********\table.py", line 59, in &lt;module&gt;     print(("{["+array[i]+"]}").format(table)) KeyError: 2  <a href="https://postimg.org/image/95bvujvbt/" rel="nofollow noreferrer">link</a></span>
<span class="comment-copy">It looks like you are trying to construct an <code>[element_index]</code> the format specification language doesn't support. You can't quote <code>element_index</code> and the format language checks to see if <code>[element_index]</code> is an integer and passes that before it uses it as a string, unfortunately you need it to be a string and that doesn't work. If <code>array[i]</code> was say <code>'*'</code> it works fine.</span>
<span class="comment-copy">This refers to an different part of the specification namely <code>{&lt;field_name&gt;[&lt;element_index&gt;]}</code> the OP has issues with <code>element_index</code> not <code>field_name</code>. The documentation doesn't explicitly point out the limitation of <code>element_index</code> but does show: <code>element_index     ::=  integer | index_string</code>.</span>
<span class="comment-copy">Just to show the difference <code>field_name</code> can't have <code>':'</code> in it but <code>element_name</code> can have any char except <code>']'</code>, e.g. <code>"{[:]}".format({':':0}) -&gt; '0'</code></span>
