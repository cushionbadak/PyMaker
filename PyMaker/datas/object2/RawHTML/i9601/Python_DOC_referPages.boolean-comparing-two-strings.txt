<div class="post-text" itemprop="text">
<pre><code>def valid(s, alphabet):
    """ (str, str) -&gt; bool

    Return True iff s is composed only of characters in alphabet.

    &gt;&gt;&gt; valid('adc', 'abcd')
    True
    &gt;&gt;&gt; valid('ABC', 'abcd')
    False
    &gt;&gt;&gt; valid('abc', 'abz')
    False
    """
    for ch in s:
        if ch in alphabet:
            return True
        else:
            return False
</code></pre>
<p>I did some error checking and I see that in <code>ch</code> is only checking until it sees a True value returned.</p>
<p>My code works for the first two but on the third it only checks <code>a</code> and then returns True and doesn't check the other values.</p>
<p>How can I make the for loop go through each letter and check it with the other string?</p>
</div>
<div class="post-text" itemprop="text">
<p>You just need to tweak the logic by returning False if there is any mismatch character and return True out of the for loop.</p>
<pre><code>for ch in s:
    if ch not in alphabet:
        return False  # 1
return True  # 2
</code></pre>
<p>The point is that if python executes the <code>#1</code> it exit the loop so it never meets the <code>#2</code> until all the characters exist in <code>alphabet</code>.</p>
<p>Beside this, you have other options which may be more pythonic. On is using <code>set()</code> object and its proper methods. Another is using built-in functions like <code>all</code> and <code>any</code>.</p>
<p>But note that sometimes the cost of converting your string to <code>set</code> might be greater than the cost of complexity. So you should choose the best way based on your need. You can use <code>timeit</code> module for measuring the executing time.</p>
<p>Here is a timeit with one of the other answers which used <code>set()</code> and a generator-based approach with <code>all()</code>:</p>
<pre><code>In [1]: a = 'abc'

In [2]: b = 'abcd'

In [8]: def regular(s, alphabet):
            for ch in s:
                if ch not in alphabet:
                    return False  # 1
            return True
   ...:     

In [9]: def valid(s, alphabet):
            return set(s) &lt; set(alphabet)
   ...: 

In [10]: def generator(s, alphabet):
             return all(ch in alphabet for ch in s)

In [11]: %timeit regular(a, b)
1000000 loops, best of 3: 262 ns per loop

In [12]: %timeit valid(a, b)
1000000 loops, best of 3: 635 ns per loop

In [13]: %timeit generator(a, b)
1000000 loops, best of 3: 639 ns per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>set</code> difference and check that substracting all the letters from the alphabet to the word makes an empty set:</p>
<pre><code>def valid(s, alphabet):
    return not set(s) - set(alphabet)
</code></pre>
<p>another method using <code>all</code>, and a <code>set</code> for better lookup performance:</p>
<pre><code>def valid(s, alphabet):
    sa = set(alphabet)
    return all(x in sa for x in s) # True if condition True for all chars
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Convert arguments to <code>set</code> objects and check if one set is a proper subset of other:</p>
<pre><code>def valid(s, alphabet):
    return set(s) &lt; set(alphabet)

print(valid('ABC', 'abcd'))  # False
print(valid('abc', 'abcd'))  # True
</code></pre>
<blockquote>
<p><strong>set &lt; other</strong><br/> 
  Test whether the set is a proper subset of other, that is, set &lt;= other and set != other.</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/stdtypes.html#set" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#set</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The first time a character that is in the alphabet is found, your method returns True. This means the method finishes with the boolean value True as its output. As a result, your for loop does not continue and does not check the remaining characters. </p>
<p>To fix this you can change your code to look like this:</p>
<pre><code>for ch in s:
    if ch not in alphabet:
        return False
return true
</code></pre>
<p>In this way, the method finishes either when a character that is not in the alphabet is found (returning False) or when all the characters have been checked and they are all in the alphabet (returning True).</p>
</div>
<span class="comment-copy">Thank you for the reply, why is the 'not' method needed here?</span>
<span class="comment-copy">This answer should work. I also think this solution better answers the question as the OP seems to be misunderstanding a fundamental. While you could use some builtin methods to solve this problem, it may be a tad overkill for someone who is trying to learn</span>
<span class="comment-copy">@EnesDal Because we want to check if one character is not in alphabet then return False!</span>
<span class="comment-copy">@EnesDal it's needed because this loop returns iff a letter from 's' does not match in alphabet. In that way, your function will ONLY return true if all the letters in the string match the letters in the alphabet. It's another way of tackling your problem that yields a cleaner solution (opinion based of course)</span>
