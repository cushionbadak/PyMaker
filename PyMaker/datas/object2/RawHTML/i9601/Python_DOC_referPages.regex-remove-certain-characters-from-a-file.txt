<div class="post-text" itemprop="text">
<p>I'd like to write a python script that reads a text file containing this: </p>
<pre><code>FRAME
  1  J=1,8  SEC=CL1  NSEG=2  ANG=0
  2  J=8,15  SEC=CL2  NSEG=2  ANG=0
  3  J=15,22  SEC=CL3  NSEG=2  ANG=0
</code></pre>
<p>And output a text file that looks like this:</p>
<pre><code>1 1 8
2 8 15
3 15 22
</code></pre>
<p>I essentially don't need the commas or the SEC, NSEG and ANG data. Could someone help me use regex to do this?</p>
<p>So far I have this: </p>
<pre><code>import re


r = re.compile(r"\s*(\d+)\s+J=(\S+)\s+SEC=(\S+)\s+NSEG=(\S+)+ANG=(\S+)\s")

with open('RawDataFile_445.txt') as a:

# open all 4 files with a meaningful name
file=[open(outputfile.txt","w") 
for line in a:
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Without regex:</p>
<pre><code>for line in file:
    keep = []
    line = line.strip()
    if line.startswith('FRAME'):
        continue
    first, second, *_ = line.split()
    keep.append(first)
    first, second = second.split('=')
    keep.extend(second.split(','))
    print(' '.join(keep))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My advice? Since I don't write many regex's I avoid writing big ones all at once. Since you've already done that I would try to verify it a small chunk at a time, as illustrated in this code.</p>
<pre><code>import re

r = re.compile(r"\s*(\d+)\s+J=(\S+)\s+SEC=(\S+)\s+NSEG=(\S+)+ANG=(\S+)\s")
r = re.compile(r"\s*(\d+)")
r = re.compile(r"\s*(\d+)\s+J=(\d+)")

with open('RawDataFile_445.txt') as a:
    a.readline()
    for line in a.readlines():
        result = r.match(line)
        if result:
            print (result.groups())
</code></pre>
<p>The first regex is your entire brute of an expression. The next line is the first chunk I verified. The next line is the second, bigger chunk that worked. Notice the slight change. </p>
<p>At this point I would go back, make the correction to the original, whole regex and then copy a bigger chunk to try. And re-run. </p>
</div>
<div class="post-text" itemprop="text">
<p>Let's focus on an example string we want to parse:</p>
<pre><code>  1  J=1,8  
</code></pre>
<p>We have space(s), digit(s), more space(s), some characters, then digit(s), a comma, and more digit(s). If we replace them with regex characters, we get <code>(\d+)\s+J=(\d+),(\d+)</code>, where <code>+</code> means we want 1 or more of that type. Note that we surround the digits with parentheses so we can capture them later with <code>.groups()</code> or <code>.group(#)</code>, where # is the nth group.</p>
</div>
<span class="comment-copy">Play around with patterns at <a href="https://regex101.com/" rel="nofollow noreferrer">regex101.com</a> or another Python flavored online regex tester (which there are many) until you get a pattern that works</span>
<span class="comment-copy"><a href="https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects" rel="nofollow noreferrer">docs.python.org/3/tutorial/â€¦</a></span>
<span class="comment-copy">You can do it without regular expressions, read each line; split the line on spaces and take the first two items, split the second item on <code>'='</code>; take the second item from that split and split on <code>','</code>.  <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#str.split</a></span>
<span class="comment-copy">Is there something that you are having trouble with specifically after reading the python regex documentation?</span>
<span class="comment-copy">Thanks for the help!</span>
<span class="comment-copy">You're more than welcome. Best of luck!</span>
<span class="comment-copy">So would you suggest using r = re.sub((\d+)\s+J=(\d+),(\d+))</span>
<span class="comment-copy">@user7269405 No, we'd use <code>r = re.search(...)</code> to get the values we want, which we can grab using <code>r.groups()</code> or <code>r.group(#)</code>. Or use <code>re.findall()</code>. We're not trying to remove the characters we don't want; we're trying to only get the characters we do want.</span>
<span class="comment-copy">Okay, thank you!</span>
