<div class="post-text" itemprop="text">
<p>I need a solution how to print out file permissions in a python script. The idea is to pass shell command <code>$: ls -l</code> to a python script, from where I'll print out the lines with "additional explanation". For example</p>
<p><code>-rwxrwxr-x</code></p>
<p>The additional explanation would be:</p>
<p><code>Owner of the file has reading rights, writing right, but doesn't have execution rights.
Group has reading rights, writing right and execution rights.</code></p>
<p>So, instead of covering all the possible cases of who has what rights, is there any easier way to do this besides checking each case with an <code>if</code> conditional?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's some code to get you started.</p>
<p>We first create a list named <code>modes</code> containing all the combinations of who has the permission and the kind of permission they have. Then we loop over the mode string and our <code>modes</code> list in parallel, grabbing the associated combination from <code>modes</code> if the mode string doesn't have a <code>-</code> in that position.</p>
<pre><code>modes = [(who, kind) for who in ('user', 'group', 'others') 
    for kind in ('read', 'write', 'execute')]

def explain_modestring(modestring):
    return ', '.join([' can '.join(t) 
        for c, t in zip(modestring[1:], modes) if c != '-'])

for s in ('-rwxrwxrwx', '-rwxr-xr--', '-r--------'):
    print(s, explain_modestring(s))
</code></pre>
<p><strong>output</strong></p>
<pre><code>-rwxrwxrwx user can read, user can write, user can execute, group can read, group can write, group can execute, others can read, others can write, others can execute
-rwxr-xr-- user can read, user can write, user can execute, group can read, group can execute, others can read
-r-------- user can read
</code></pre>
</div>
<span class="comment-copy">I am not sure what exactly are you asking about? How to get access bits for a file or how to print them in the human friendly format?</span>
<span class="comment-copy">Can you show your attempt at the solution?</span>
<span class="comment-copy">BTW, it's generally considered bad practice to parse the output of <code>ls</code>, as discussed in <a href="http://unix.stackexchange.com/questions/128985/why-not-parse-ls">Why <i>not</i> parse <code>ls</code>?</a>. And it's quite unnecessary in Python since there are various ways to get that info directly using functions in the <code>os</code> module, eg <a href="https://docs.python.org/3/library/os.html#os.stat" rel="nofollow noreferrer"><code>os.stat</code></a></span>
<span class="comment-copy">use <code>os.stat(path)</code> to check single file/directory permissions</span>
<span class="comment-copy">Ok, if your assignment is to parse the output of <code>ls</code> then I guess you'd better do that. :) But <i>please</i> make sure your teacher takes a look at the U&amp;L link I posted earlier and the BashGuide article <a href="http://mywiki.wooledge.org/ParsingLs" rel="nofollow noreferrer">Why you shouldn't parse the output of ls(1)</a> (which is linked at the start of the U&amp;L question).</span>
<span class="comment-copy">Yes, this is the exact output I was aiming to accomplish. Much appreciated</span>
