<div class="post-text" itemprop="text">
<pre><code>def distance(alist, blist):
    sum_of = 0
    for x in alist:
        for y in blist:
            ans = (x - y)**2
            sum_of += ans
    return (sum_of)**(1/2)
print(distance([1, 1, 3], [2, 2, 3])) #1.4142135623730951
print(distance([1, 2, 3], [2, 2, 3])) #1.0
print(distance([2, 2, 3], [2, 2, 3])) #0.0
print(distance([1, 1], [2, 2])) #1.4142135623730951
</code></pre>
<p>So I have a set of test cases which give me two lists with numbers. My task is to calculate the euclidean distance with the given lists. However, I am not getting the right results. I am instead getting 3.7416573867739413, 3.0, 2.0 and 2.0. This is what I have so far, and I am not sure what I am doing wrong.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is here:</p>
<pre><code>   for x in alist:
      for y in blist:
</code></pre>
<p>So for each point in <code>alist</code>, you are visiting all points in <code>blist</code>. For example, for <code>alist = [1, 2, 3]</code> and <code>blist = [4, 5, 6]</code>, this loop would generate pairs <code>(1, 4), (1, 5), (1, 6), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6)</code> But what you want to do is to look at only <code>(1, 4), (2, 5), (3, 6)</code>. This can be achieved with the zip function. If you iterate over <code>zip(alist, blist)</code>, it will iterate over those points. You can confirm this by executing </p>
<pre><code>list(zip(alist, blist))
Out: [(1, 4), (2, 5), (3, 6)]
</code></pre>
<p>So if you change the nested loops with a single loop over zip, it will calculate the correct distance.</p>
<pre><code>def distance(alist, blist):
    sum_of = 0
    for x, y in zip(alist, blist):
        ans = (x - y)**2
        sum_of += ans
    return (sum_of)**(1/2)


distance([1, 1, 3], [2, 2, 3])
Out: 1.4142135623730951
</code></pre>
</div>
<span class="comment-copy">Oh okay, I see. If you don't mind explaining, what exactly does "zip" do?</span>
<span class="comment-copy">zip(...)     zip(seq1 [, seq2 [...]]) -&gt; [(seq1[0], seq2[0] ...), (...)]      Return a list of tuples, where each tuple contains the i-th element     from each of the argument sequences.  The returned list is truncated     in length to the length of the shortest argument sequence.</span>
<span class="comment-copy">@EliezerShahid you can always find out what a builtin or standard library function does by reading the documentation: <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip()</code></a>.</span>
<span class="comment-copy">@EliezerShahid I've updated the post.</span>
<span class="comment-copy">Sweet, thank you so much!</span>
