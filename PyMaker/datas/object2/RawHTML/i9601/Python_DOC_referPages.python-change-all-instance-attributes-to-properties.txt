<div class="post-text" itemprop="text">
<p>Say we have 10 attributes:</p>
<pre><code>class test(object):
  def __init__(self,a,b,c,d,e,f,g,h,i,j):
    self._a = a
    #the same with the rest of variables
</code></pre>
<p>Is it possible to make them all properties?:</p>
<pre><code>@property
def a(self):
  return self.a
@a.setter
def a(self,a_new):
  #invoke other functions doing other stuff when attribute values change
  self._a = a_new
</code></pre>
<p>If I need the same functions to run when any instance attribute is changed, do I have to type the above code for each attribute? Is it possible to write the code once then use it as a custom decorator or something similar?</p>
<p>If the custom decorator is the way to go, can I afterwards override the setter function for some attributes?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you <em>really</em> want all of your instance attributes to be properties you can implement <code>__setattr__</code> and <code>__getattribute__</code> methods. Here's a short demo:</p>
<pre><code>class Test(object):
    attr_names = {'a', 'b', 'c', 'd'}

    def __init__(self, a, b, c, d):
        self.a = a
        self.b = b
        self.c = c
        self.d = d

    def __repr__(self):
        return 'Test({}, {}, {}, {})'.format(self.a, self.b, self.c, self.d)

    def __setattr__(self, name, value):
        if name in Test.attr_names:
            print('Setting {} to {}'.format(name, value))
            super().__setattr__(name, value)
        else:
            raise AttributeError("Can't set unknown attribute: " + name)

    def __getattribute__(self, name):
        if name in Test.attr_names:
            print('Getting {}'.format(name))
            return super().__getattribute__(name)
        else:
            raise AttributeError("Can't get unknown attribute: " + name)

t = Test(1, 2, 3, 4)
print(t)
t.b = 7
print(t)

try:
    t.e = 42
except AttributeError as err:
    print(err)
</code></pre>
<p><strong>output</strong></p>
<pre><code>Setting a to 1
Setting b to 2
Setting c to 3
Setting d to 4
Getting a
Getting b
Getting c
Getting d
Test(1, 2, 3, 4)
Setting b to 7
Getting a
Getting b
Getting c
Getting d
Test(1, 7, 3, 4)
Can't set unknown attribute: e
</code></pre>
<p>This code is for Python 3. In Python 2 you will need to pass appropriate args to <code>super</code>:</p>
<pre><code>super(Test, self)
</code></pre>
<p>eg,</p>
<pre><code>super(Test, self).__setattr__(name, value)
</code></pre>
<p>Please see the <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattribute__" rel="nofollow noreferrer">data model docs</a> for more information about these methods.</p>
</div>
