<div class="post-text" itemprop="text">
<p>Being new to python, here is my problem. Given two lists:  </p>
<pre><code>a = [3, 4] 
b = [5, 2]
</code></pre>
<p>I want to create a new list which consists of items of first list repeated n number of times, where n is the corresponding element in second list.  So I would like an output like:</p>
<pre><code>c = [3,3,3,3,3,4,4]
</code></pre>
<p>Where 3 is repeated 5 times, 4 is repeated 2 times and so on.
My current code looks like this  </p>
<pre><code>for item,no in zip(a,b):
    print(str(item)*no)
</code></pre>
<p>which gets me:  </p>
<pre><code>33333
44
</code></pre>
<p>I am trying to figure out how to get from my current stage to the output that I want. Any help would be appreciated. </p>
<p>I was also thinking that maybe this could be done with list comprehension but I could not come up with the python code for it.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> like this:</p>
<pre><code>[i for i,j in zip(a, b) for k in range(j)]
</code></pre>
<p>The above line is equivalent to the following nested for loops:</p>
<pre><code>c = []
for i,j in zip(a, b):
    for k in range(j):
        c.append(i)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>&gt;&gt;&gt; a = [3, 4]
&gt;&gt;&gt; b = [5, 2]
&gt;&gt;&gt; c = [i for i,j in zip(a, b) for k in range(j)]
&gt;&gt;&gt; c
[3, 3, 3, 3, 3, 4, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A simple list comprehension would work:</p>
<pre><code>&gt;&gt;&gt; a = [3, 4]
&gt;&gt;&gt; b = [5, 2]
&gt;&gt;&gt; [c for n, m in zip(a, b) for c in [n]*m]
[3, 3, 3, 3, 3, 4, 4]
</code></pre>
<p>If you are concerned on the memory efficiency (e.g. for large <code>m</code>) then you can use <code>itertools.repeat()</code> to avoid the intermediate lists:</p>
<pre><code>&gt;&gt;&gt; import itertools as it
&gt;&gt;&gt; [c for n, m in zip(a, b) for c in it.repeat(n, m)]
[3, 3, 3, 3, 3, 4, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>c=[]
for item, count in zip(a,b):
    c.extend([item]*count)
print(c)
</code></pre>
<p>should do it.  Add to the list one element at a time, and then print all at once at the end.  <code>[item]*count</code> is a <code>count</code>-element list(<code>[]</code>) of <code>item</code>, and <a href="http://edumaven.com/python-programming/list-append-vs-extend" rel="nofollow noreferrer"><code>extend</code></a> adds the <em>contents</em> of the list you provide to the list you call <code>extend</code> on.</p>
</div>
<div class="post-text" itemprop="text">
<p>You just need to use extend</p>
<pre><code>c = []
for item, no in zip(a, b):
    c.extend([item] * no)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>c = []
for i in range(len(b)):
    for j in range(b[i]):
        c.append(a[i])
print c
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Something a bit different</p>
<pre><code>c = [a[b.index(j)] for i,j in enumerate(b) for i in range(j)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You said you were new to Python, so here's a simple way to do it, just using basic loops:</p>
<pre><code>a = [3 , 4]
b = [5 , 2]
c = []
index = 0
for i in a:
     for i in range(0 , b[index]):
         c.append(i)
     index += 1
</code></pre>
</div>
<span class="comment-copy">Thanks for the nice explanation. I am not very confident with nested comprehensions yet. I had the intuition that it could be done, but was struggling to figure it out.</span>
<span class="comment-copy">You're welcome! In all cases you have list comprehension and the equivalent code with for loops, so you need just to choose the one that you prefer ;)</span>
<span class="comment-copy">Yea, I ended up using the comprehension while using the dual for loop code in order to get my head around nested comprehensions.</span>
<span class="comment-copy">Thanks a lot. That makes sense. I am still learning python so was not very confident about using the zip method. Also I am still not very good with list comprehensions which contain nested comprehensions.</span>
<span class="comment-copy">thanks, that's the easiest answer I can quickly understand. I did not know that [ ] * no would work.</span>
<span class="comment-copy">Thanks. Yeah coming from more of a JAVA background I could get the logic for using loops with indexes but if I am not wrong(I probably am) that is not the preferred way in python. That was the reason for my struggles. Also the fact that I could do something like [ ]  * n to get a longer list with repeated elements.</span>
