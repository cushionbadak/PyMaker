<div class="post-text" itemprop="text">
<p>I want to create a function that will be called whenever the caller gets arguments of wrong instance, that will print caller's <code>__doc__</code> attribute and exit. The function is the following:</p>
<pre><code>def checktype(objects,instances):
    if not all([isinstance(obj,instance) for
                obj,instance in zip(objects,instances)]):
      print 'Type Error'
      #Get __doc__ from caller
      print __doc__
      exit()
</code></pre>
<p>I got stuck in the step, where I have to get the <code>__doc__</code> attribute. I know that <code>inspect</code> module can do it, in a way like the following:</p>
<pre><code>name=inspect.stack()[1][3]
possibles=globals().copy()
__doc__= possibles.get(name).__doc__
</code></pre>
<p>(you can suggest another one that is compatible with every Python version, including 3.5)</p>
<p>but I think there must be another way. The reason for my scepticism is that the built-in <code>return</code> statement  returns something to the caller in an immediate way, so that means there must be a "hook" or a "pipe" accessible by the child function, which is being used as a medium for information exchange with the parent.So an initial question that triggered my interest was:</p>
<p>Is this pipe send-only and no information can be send backwards? </p>
<p>I have not been able to answer this, as the <code>return</code> statement is only briefly explained in the sites I searched. Apart from this, the <code>inspect</code> module, as far as I can tell, saves multiple frames in a stack and runs constantly in the background. For me, this is like I am trying to kill a fly with a minigun. I just need the caller function's name, not the function 10 frames before. If there is not any way to accomplish this, this is, in my opinion, a feature that Python must have. My question is:</p>
<p>What would be the pythonic-programmatic way to get caller's attributes in Python, with universal support ? Excuse me if there is ignorance in my question, I am open to any corrections and "mind-openings". Thank you all for your answers.</p>
</div>
<div class="post-text" itemprop="text">
<p>I have a few functions that may be related to your issue</p>
<pre><code>import sys

def position(level = 0):
    """return a tuple (code, lasti, lineno) where this function is called

    If level &gt; 0, go back up to that level in the calling stack.
    """
    frame = sys._getframe(level + 1)
    try:
        return (frame.f_code, frame.f_lasti, frame.f_lineno)
    finally:
        del frame

def line(level = 0):
    """return a tuple (lineno, filename, funcname) where this function is called

    If level &gt; 0, go back up to that level in the calling stack.

    The filename is the name in python's co_filename member
    of code objects.
    """
    code, lasti, lineno = position(level=level+1)
    return (lineno, code.co_filename, code.co_name)

def _globals(level = 0):
    """return the globals() where this function is called

    If level &gt; 0, go back up to that level in the calling stack.

    """
    frame = sys._getframe(level + 1)
    try:
        return frame.f_globals
    finally:
        del frame
</code></pre>
</div>
<span class="comment-copy">I think a decorator would be appropriate for that.</span>
<span class="comment-copy">@polku I would be interested to know how you would pass the function arguments inside the decorator. A wrapper is a nice idea, if I have a signal handler set, but I think this might be suitable only for a Linux distro.</span>
<span class="comment-copy">IDK how familiar you are with decorators but you don't pass it the function arguments. My understanding is that you want a mechanism of type checking reusable for different functions, that's what I'd use (that and a custom exception instead of a print and exit) but maybe I'm getting it wrong.</span>
<span class="comment-copy">Thank you for your answer. As far as I can tell, you are suggesting to use <code>sys._getframe(1).f_code.co_name</code>. This gets me the name of the function, but I can not get any other attribute. It's a nice idea. Is this Windows compatible?</span>
<span class="comment-copy">try <code>_globals(1)[line(1)[2]].__doc__</code>. All this is OS agnostic.</span>
<span class="comment-copy">Ok this does what requested and is very neat, as I use a builtin module: <code>f=sys._getframe(1) ;     print f.f_globals[f.f_code.co_name].__doc__</code></span>
<span class="comment-copy">See however the <a href="https://docs.python.org/3/library/inspect.html?highlight=frame#the-interpreter-stack" rel="nofollow noreferrer">note about keeping references to frame</a>. Use try ...finally</span>
<span class="comment-copy">I found an easier way: <code>getattr(f.f_locals['self'].__class__,f.f_code.co_name).__doc__</code></span>
