<div class="post-text" itemprop="text">
<p>I have this:</p>
<p><code>query='id=10&amp;q=7&amp;fly=none'</code></p>
<p>and I want to split it to create a dictionary like this:</p>
<pre><code>d = { 'id':'10', 'q':'7', 'fly':'none'}
</code></pre>
<p>How can I do it with little code?</p>
</div>
<div class="post-text" itemprop="text">
<p>By splitting twice, once on <code>'&amp;'</code> and then on <code>'='</code> for every element resulting from the first split:</p>
<pre><code>query='id=10&amp;q=7&amp;fly=none'
d = dict(i.split('=') for i in query.split('&amp;'))
</code></pre>
<p>Now, <code>d</code> looks like:</p>
<pre><code>{'fly': 'none', 'id': '10', 'q': '7'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In your case, the more convenient way would be using of <code>urllib.parse</code> module:</p>
<pre><code>import urllib.parse as urlparse

query = 'id=10&amp;q=7&amp;fly=none'
d = {k:v[0] for k,v in urlparse.parse_qs(query).items()}
print(d)
</code></pre>
<p>The output:</p>
<pre><code>{'id': '10', 'q': '7', 'fly': 'none'}
</code></pre>
<hr/>
<p><strong>Note</strong>, that <code>urlparse.parse_qs()</code> function would be more useful if there multiple keys with same value in a query string. Here is an example:</p>
<pre><code>query = 'id=10&amp;q=7&amp;fly=none&amp;q=some_identifier&amp;fly=flying_away'
d = urlparse.parse_qs(query)
print(d)
</code></pre>
<p>The output:</p>
<pre><code>{'q': ['7', 'some_identifier'], 'id': ['10'], 'fly': ['none', 'flying_away']}
</code></pre>
<p><a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.parse_qs" rel="nofollow noreferrer">https://docs.python.org/3/library/urllib.parse.html#urllib.parse.parse_qs</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This is what I came up with:</p>
<pre><code>dict_query = {}
query='id=10&amp;q=7&amp;fly=none'

query_list = query.split("&amp;")
for i in query_list:
    query_item = i.split("=")
    dict_query.update({query_item[0]: query_item[1]})

print(dict_query)
</code></pre>
<p><code>dict_query</code> returns what you want. This code works by splitting the query up into the different parts, and then for each of the new parts, it splits it by the <code>=</code>. It then updates the <code>dict_query</code> with each new value. Hope this helps!</p>
</div>
<span class="comment-copy">Thanks!!! I've found also this: d = {t[0]:t[1] for t in map(lambda x: x.split("="), q.split("&amp;"))}</span>
<span class="comment-copy">@AndreaPedini True but using a <code>lambda</code> with map like that is usually quite slower. It also isn't the prettiest of constructs :-)</span>
