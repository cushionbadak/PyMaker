<div class="post-text" itemprop="text">
<p>I am trying to open a csv file and load it, however it states that it cannot find the file, when it clearly exists in the file path i wrote it to be. </p>
<p>Code</p>
<pre><code>#Load the CSV file into CSV reader
csvfile = open("C:/Users/Sam/Desktop/big data/workspace/test.csv",'rb')
</code></pre>
<p>Error</p>
<pre><code>Traceback (most recent call last):
  File "C:/Users/Sam/Desktop/big data/workspace/yelpdatabase.py", line 16, in &lt;module&gt;
    csvfile = open("C:/Users/Sam/Desktop/big data/workspace/test.csv",'rb')
FileNotFoundError: [Errno 2] No such file or directory: 'C:/Users/Sam/Desktop/big data/workspace/test.csv'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try like this:</p>
<pre><code>csvfile = open(r"C:/Users/Sam/Desktop/big data/workspace/test.csv","rb")
</code></pre>
<p>Make sure your file name is not <code>test.csv.txt</code> sometimes windows takes .csv as part of the filename</p>
<blockquote>
<p>Tested using Python 2.7.12</p>
</blockquote>
<p>Checkout <a href="http://shortcode.pro/code/open-csv-file-with-python/" rel="nofollow noreferrer">http://shortcode.pro/code/open-csv-file-with-python/</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Posting this since it's a likely cause of problems like this, if not necessarily in this specific case. <code>Desktop</code> (along with most other user folders) is a pseudo-magic folder, and you can't rely on it always being found at <code>C:\Users\USERNAME\Desktop</code>. In particular, just because you see a file on your desktop doesn't mean it's actually there. It could be in the <code>All Users</code> <code>Desktop</code> folder, and either of those could be redirected by the Windows Library folder redirection magic.</p>
<p>If you want to get the correct path to the user's desktop dynamically, you can use the <code>pywin32</code> extension to do so:</p>
<pre><code>from win32com.shell import shell, shellcon
shell.SHGetFolderPath(0, shellcon.CSIDL_MYPICTURES, None, 0)
</code></pre>
<p>(hat tip to <a href="https://stackoverflow.com/a/3858957/364696">this answer</a>), or to get the common <code>Desktop</code> folder for all users:</p>
<pre><code>import win32com.client
objShell = win32com.client.Dispatch("WScript.Shell")
allUserDocs = objShell.SpecialFolders("AllUsersDesktop")
</code></pre>
<p>(hat tip to <a href="https://stackoverflow.com/a/2063795/364696">this answer</a>).</p>
<p>Both approaches above might be replaceable on Vista and higher with code that calls <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/bb762188(v=vs.85).aspx" rel="nofollow noreferrer"><code>SHGetKnownFolderPath</code></a> (either with <code>pywin32</code> if it supports it, or directly through a <code>ctypes</code> wrapper) using <code>FOLDERID_Desktop</code> and <code>FOLDERID_PublicDesktop</code> for the user specific and commonly shared <code>Desktop</code> folders.</p>
</div>
<div class="post-text" itemprop="text">
<p>Edited- try this</p>
<pre><code>path = r"C:/Users/Sam/Desktop/big data/workspace/test.csv"
csvfile = open(path, 'rb')
</code></pre>
</div>
<span class="comment-copy">before calling <code>open()</code>, check if the file exists <a href="http://docs.python.org/2/library/os.path.html#os.path.exists" rel="nofollow noreferrer">os.path.exists()</a></span>
<span class="comment-copy">As @downshift said, you want to check that the file exists. As another suggestion, you should try to use os.path.join to more reliably build the file path, as in the answer to this question here: <a href="https://stackoverflow.com/questions/2953834/windows-path-in-python" title="windows path in python">stackoverflow.com/questions/2953834/windows-path-in-python</a></span>
<span class="comment-copy">@downshift: Umm... No. That's an <a href="https://docs.python.org/3/glossary.html#term-lbyl" rel="nofollow noreferrer">LBYL</a> pattern which is subject to race conditions (test says it exists, something deletes it between test and <code>open</code>) and wasted time on the <code>stat</code> check, when <code>open</code> itself implicitly checks existence. Correct solution is <a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow noreferrer">EAFP</a>: call <code>open</code>, catch <code>OSError</code> (or subclasses thereof in modern Python, e.g. <code>FileNotFoundError</code> in this case) if you can handle the error. <code>os.path.exists</code> is fine for interactive interpreter debugging, but not production code.</span>
<span class="comment-copy">Side-note: In general, on Python 3, you don't open CSV files in binary mode. <a href="https://docs.python.org/3/library/csv.html#id1" rel="nofollow noreferrer">You open them in normal text mode, with <code>newline=''</code> to disable line ending translation</a>, so the <code>csv</code> module can handle line ending translation correctly per the CSV dialect in use. Opening in binary mode was how you handled this in Python 2, because Python 2 wasn't <code>unicode</code> friendly, so binary mode avoided decoding and newline translation at once.</span>
<span class="comment-copy">How are you so sure the file exists at that exact path? And that your program is running with permissions to read it? Python sometimes has some bugs in terms of how it reports access denied errors on Windows IIRC, so I'd suspect this is either a non-existent file, or the program lacks read access.</span>
<span class="comment-copy">Most of this is redundant with <a href="http://stackoverflow.com/a/41112409/364696">this (wrong) answer</a> (raw strings are irrelevant if you're using forward slashes; if there are no backslashes in the string, raw and non-raw literals have identical meaning). The suggestion that file extension hiding might be tripping them up is a good one though (I forgot about it, because the first thing I do on a new Windows systems is disable <code>Hide Extensions for Known File Types</code>).</span>
<span class="comment-copy">You are right about the raw strings, I bet is the file extension</span>
<span class="comment-copy">space is not the reason. see this - <a href="http://stackoverflow.com/a/14852407/5352399">stackoverflow.com/a/14852407/5352399</a></span>
<span class="comment-copy">I get the same error.</span>
<span class="comment-copy">Raw strings are good for using backslashed paths, but they're redundant if you're using forward slashes; there are no backslashes to "raw-ify". The OP's non-raw version of this string is going to have the exact same contents.</span>
