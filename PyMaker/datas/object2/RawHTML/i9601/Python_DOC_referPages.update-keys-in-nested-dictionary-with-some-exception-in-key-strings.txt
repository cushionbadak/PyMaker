<div class="post-text" itemprop="text">
<p>So I've a list of students which looks something like this :</p>
<pre><code>students = [ {'name': 'Jack' , 'status' : 'Average' , 'subjects' : { 'subject1' : 'English' , 'subject2' : 'Math' } , 'height' : '20cm' },
{'name': 'Tom' , 'status' : 'Good' , 'subjects' : { 'subject1' : 'English' , 'subject2' : 'Science' } , 'height' : '30cm' }
 ]
</code></pre>
<p>So the above list is of size 2. Assume that the size is pretty big, lets say 50 or 60 or more.</p>
<p>I want to return a <strong>list</strong> students_output &amp; for each student I want to return a dictionary which contains the following values for each student which are fetched from the above list but have slightly modified 'keys'. The end output should be something like this :</p>
<pre><code>students_output = [ {'student_name': 'Jack' , 'student_status' : 'Average' , 'student_subjects' : { 'student_subject1' : 'English' , 'student_subject2' : 'Math' } , 'child_height' : '20cm' },
{'student_name': 'Tom' , 'student_status' : 'Good' , 'student_subjects' : { 'student_subject1' : 'English' , 'student_subject2' : 'Science' } , 'child_height' : '30cm' }
 ]
</code></pre>
<p>I am not able to understand how I can create an effective loop so that the keys in my resultant data structure are maintained as provided in the output and i can fetch the data from the first list.</p>
<p>for example, in students_output, I know </p>
<pre><code>students_output[0]['student_name']=students[0]['name']
</code></pre>
<p>But can anyone help me do it iteratively ?</p>
</div>
<div class="post-text" itemprop="text">
<p>In order to achieve this, you have to concatenate <code>"student_"</code> at the start of each key with some exception as <code>"height"</code> key. You may do it via combination of <em>list comprehension</em> and <em>dict comprehension</em> expression as:</p>
<pre><code>students = [ 
    {'name': 'Jack' , 'status' : 'Average' , 'subjects' : { 'subject1' : 'English' , 'subject2' : 'Math' } , 'height' : '20cm' },
    {'name': 'Tom' , 'status' : 'Good' , 'subjects' : { 'subject1' : 'English' , 'subject2' : 'Science' } , 'height' : '30cm' }
]

def get_key(key):
    return {
       'height': 'child_height',  # All exception you need in `key`
                                  # apart from concatenating `"student_"`
       }.get(key, 'student_' + key)

new_list = [{
    get_key(k): ({
         get_key(kk):v  for kk, vv in v.items()} if isinstance(v, dict) else v) \
             for k, v in s.items()
    } for s in students]
</code></pre>
<p>Value hold by <code>new_list</code> will be:</p>
<pre><code>[{'student_name': 'Jack', 'child_height': '20cm', 'student_status': 'Average', 'student_subjects': {'student_subject1': {'subject1': 'English', 'subject2': 'Math'}, 'student_subject2': {'subject1': 'English', 'subject2': 'Math'}}}, 
 {'student_name': 'Tom', 'child_height': '30cm', 'student_status': 'Good', 'student_subjects': {'student_subject1': {'subject1': 'English', 'subject2': 'Science'}, 'student_subject2': {'subject1': 'English', 'subject2': 'Science'}}}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a quick-and-dirty function that will do what you need:</p>
<pre><code>In [10]: def rename_keys(students):
    ...:     d = {}
    ...:     for k,v in students.items():
    ...:         if isinstance(v,dict):
    ...:             k = "student_" + k
    ...:             v = rename_keys(v)
    ...:             d[k] = v
    ...:         elif k == 'height':
    ...:             k = "child_height"
    ...:             d[k] = v
    ...:         else:
    ...:             k = "student_" + k
    ...:             d[k] = v
    ...:     return d
    ...:
    ...:

In [11]: [rename_keys(d) for d in students]
Out[11]:
[{'child_height': '20cm',
  'student_name': 'Jack',
  'student_status': 'Average',
  'student_subjects': {'student_subject1': 'English',
   'student_subject2': 'Math'}},
 {'child_height': '30cm',
  'student_name': 'Tom',
  'student_status': 'Good',
  'student_subjects': {'student_subject1': 'English',
   'student_subject2': 'Science'}}]
</code></pre>
<p>And really, this doesn't have to be recursive, you could substitute the recursive call with a dictionary comprehension:</p>
<pre><code>v = {'student_'+key:value for key,value in v.items()}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the following function inside a list comprehension like this:</p>
<pre><code>def new_dict(d):
    res = {}
    for key, value in d.iteritems():
        student_or_child = 'student' if key != 'height' else 'child'
        if type(value) == dict:
            res['{}_{}'.format(student_or_child, key)] = new_dict(value)
        else:
            res['{}_{}'.format(student_or_child, key)] = value
    return res
</code></pre>
<p>The above function takes a dict as argument, for each <code>key, value</code> in the passed <code>dict</code>, if value is of type dict then the same function is called on value, and the result is added to <code>res</code> dict, else the same value is added.</p>
<p>Now, with a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer"><code>list comprehension</code></a>, we can do:</p>
<pre><code>[new_dict(d) for d in students]
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>&gt;&gt;&gt; [new_dict(d) for d in students]
[{'child_height': '20cm', 'student_name': 'Jack', 'student_status': 'Average', 'student_subjects': {'student_subject1': 'English', 'student_subject2': 'Math'}}, {'child_height': '30cm', 'student_name': 'Tom', 'student_status': 'Good', 'student_subjects': {'student_subject1': 'English', 'student_subject2': 'Science'}}]
</code></pre>
</div>
<span class="comment-copy">What do you mean by "effective loop so that the keys in my resultant data structure are maintained as provided in the output"?</span>
<span class="comment-copy">You need to show what you've already tried</span>
<span class="comment-copy">So you wanna prefix each key with student, and suffix each subject's key with the count? Could you show what you've tried?</span>
<span class="comment-copy">but you also want to prefix <code>height</code> with <code>child_</code>?</span>
<span class="comment-copy">sorry, I couldn't get past "Assume that the size is pretty big, lets say 50 or 60 or more.", because it's too funny.</span>
<span class="comment-copy">it's probably a micro-optimization, but I would make the dictionary in <code>get_key</code> a default-named argument. Then, it is only parsed once.</span>
