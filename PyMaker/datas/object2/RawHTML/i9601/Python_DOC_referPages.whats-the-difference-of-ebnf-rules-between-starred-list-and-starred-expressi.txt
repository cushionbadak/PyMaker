<div class="post-text" itemprop="text">
<p>Here is the documented <a href="https://docs.python.org/3/reference/expressions.html#expression-lists" rel="nofollow noreferrer">contents</a>:</p>
<pre><code>starred_list       ::=  starred_item ( "," starred_item )* [","]            
starred_expression ::=  expression | ( starred_item "," )* [starred_item]
</code></pre>
<p>I can't tell the difference between them, aren't they equivalent rules?</p>
</div>
<div class="post-text" itemprop="text">
<p>The cited grammar is not identical to the actual grammar (although one hopes that the two have identical effect); you can see the grammar actually used to generate the CPython parser in <a href="https://docs.python.org/3/reference/grammar.html" rel="nofollow noreferrer">Chapter 10</a> of the reference manual. The two grammars do not differ solely in the names of non-terminals, so it is not entirely obvious which source code productions correspond to the quoted rules.</p>
<p>Broadly speaking, the difference between the two productions quoted is semantic, not syntactic; both productions yield exactly the same set of valid sentences. The semantic difference is the handling of a single unstarred expression with no trailing comma; the first alternative of:</p>
<pre><code>starred_expression ::=  expression | ( starred_item "," )* [starred_item]
</code></pre>
<p>It would also be possible to derive <code>expresion</code> from the second alternative, by matching zero repetitions of <code>( starred_item "," )</code> and then a single <code>starred_item</code>, using the first alternative of <code>starred_item</code>. However, the apparently redundant alternation is specified because the two alternatives have different semantics:</p>
<pre><code>( x )
</code></pre>
<p>is a simple parenthesized expression, whereas</p>
<pre><code>( x , )
</code></pre>
<p>is a one-element tuple. This distinction is only needed if the expression list is surrounded by parentheses; if it is surrounded by brackets or braces, there is no semantic distinction between the two cases: <code>[ x ]</code> is semantically identical to <code>[ x , ]</code> and similarly with <code>{ x }</code> and <code>{ x , }</code>. This is reflected in the grammar; in the production which could produce either a parenthesized expression or a tuple, <code>starred_expression</code> is used:</p>
<pre><code>parenth_form ::=  "(" [starred_expression] ")"
</code></pre>
<p>In the other literal syntaxes, we see <code>starred_list</code>, which does not include the redundant alternative:</p>
<pre><code>list_display ::=  "[" [starred_list | comprehension] "]"
set_display ::=  "{" (starred_list | comprehension) "}"
</code></pre>
</div>
<span class="comment-copy">... No, because the <code>starred_list</code> production doesn't include <code>expression</code> directly...</span>
<span class="comment-copy">While <code>starred_item::=expression | "*" or_expr</code> provides <code>expression</code> for <code>starred_list</code>.</span>
<span class="comment-copy">But it doesn't handle the optional comma.</span>
<span class="comment-copy">I don't think this minor difference matters.</span>
<span class="comment-copy">The two rules apply to the same situations.</span>
<span class="comment-copy">@wowyoo: As I said in my answer, they are syntactically identical but carry a semantic difference. That's what the first sentence of the second paragraph says.</span>
<span class="comment-copy">I should spare more time studying the documentation.Thanks for your help.</span>
<span class="comment-copy">If the one can replace the other syntactically, why do we need two?One rule is enough.</span>
<span class="comment-copy">Because parsing is not just to define what constitutes a valid program but also to explain how the parts relate to each other ("parse" and "part" have the same root). So the grammar needs to relate to the semantics.</span>
<span class="comment-copy">No, I meant what I said. In general, making the semantics more comprehensible is a valuable side-effect of a grammar, but the primary purpose is to facilitate parsing <i>into a form suitable for semantic analysis.</i> Of course, the grammar you cite is essentially didactic, since it is not used directly to parse, so you could say that the reason any of the rules exist is to make the language more comprehensible.</span>
