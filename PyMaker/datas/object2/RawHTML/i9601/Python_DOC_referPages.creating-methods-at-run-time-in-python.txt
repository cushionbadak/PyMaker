<div class="post-text" itemprop="text">
<p>I am quite new to python and I am trying to write a simple implementation of REST api calls. My goal is to be able to create methods of a class at run time and to be able to use method names as basis for API calls. For example list_virtual_networks will turn into GET to <a href="http://localhost:8080/virtual-networks" rel="nofollow noreferrer">http://localhost:8080/virtual-networks</a>, etc. I'd also want to practice at some more advanced object oriented techniques. Here's my approach:</p>
<pre><code>def _api_call_wrapper(wrapped_function):
    def wrapper_function(*args, **kwargs):
        handler_name = wrapped_function.__name__
        agent_logger.info('Got function name {}'.format(handler_name))
        &lt;do something&gt;
        return res
return wrapper_function

class API(HTTPConnection):
    def __init__(self, host, port):
        &lt;do something&gt;

    def __getattr__(self, name):
    @_api_call_wrapper
    def handler(self, *args, **kwargs):
        self.request('GET', self.last_url)
        return self.getresponse()
    handler.__name__ = name
    setattr(self, name, handler)
    agent_logger.info('Returning method with name {}'.format(self.name))

if __name__ == '__main__':
    api = API(127.0.0.1, 8080)
    api.list_virtual_networks()
</code></pre>
<p>Here's what I see in logs:</p>
<p>2016-12-08 23:05:03,034 - AgentLogger - INFO - Returning method with name function wrapper_function at 0x1073c8d70&gt;</p>
<p>2016-12-08 23:05:03,034 - AgentLogger - INFO - Returning method with name None</p>
<p>I hope I made myself clear enough to explain what I wanted to achieve. Is there a way to solve it at least roughly in a way I am trying to do it?</p>
</div>
<div class="post-text" itemprop="text">
<p>When writing function wrappers, a good tool to use is the <code>wraps</code> function in the <code>functools</code> library provided by the Python's stdlib: <a href="https://docs.python.org/3/library/functools.html#functools.wraps" rel="nofollow noreferrer">https://docs.python.org/3/library/functools.html#functools.wraps</a> (particularly the "renaming" stuff you wanted to do)</p>
<pre><code>from functools import wraps

def _api_call_wrapper(wrapped_function):
    @wraps(wrapped_function)
    def wrapper_function(*args, **kwargs):
        handler_name = wrapped_function.__name__
        agent_logger.info('Got function name {}'.format(handler_name))
        &lt;do something&gt;
        return res
return wrapper_function
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I found a solution for that. I added a decorator, that is used to rename functions</p>
<pre><code>def _function_rename(new_name):
  def decorator(f):
    f.__name__ = new_name
    return f

return decorator
</code></pre>
<p>Then I apply this decorator to the handler function, defined in __getattr__ in addition to the decorator that I already applied:</p>
<pre><code>def __getattr__(self, name):
    @_api_call_wrapper
    @_function_rename(name)
    def handler(*args, **kwargs):
        self.request(*args, **kwargs)
        return self.getresponse()

    return handler
</code></pre>
<p>Now when a method that is not defined in class is called, it gets assigned a decorated code defined in handler function.</p>
</div>
<span class="comment-copy">you're trying some tough stuff for being quite new to python</span>
<span class="comment-copy">What are you <i>really</i> trying to do? Are you sure that creating methods on the fly is necessary for what you are trying to do?</span>
<span class="comment-copy">It is not 100% necessary for the current problem I am trying to solve now. Sure I can define all API call methods manually or just one general purpose method that can get URL and type of HTTP method on its input and send REST calls. I'd say it's more 'scientific' interest that drives me to implement it in that way. In my opninon it could have been a very flexible implementation that I could also reuse in future.</span>
<span class="comment-copy">I am quite limited at the set of modules that I can use, since this script will run on a server I don't have controll of and I can't install modules of my choise there, have to use what is already there. But thanks for your reply, I will try this out.</span>
<span class="comment-copy">Actually the <code>functools</code> library doesn't have to be installed at all as it is present in the Python's stdlib in Python 2/3, so as long as you use python, you already <i>have</i> this module installed ;)</span>
<span class="comment-copy">Thank you. I also discovered that shortly after I answered to the previous comment.</span>
