<div class="post-text" itemprop="text">
<p>Hello I've been trying to make my python sock server connection counter to go down
but I can't figure out how I can do this</p>
<pre><code>def client_thread(conn):
    while True:
        conn.send("Command: ")
        data = conn.recv(1024)
        if not data:
            break
        reply = "" + data
        conn.sendall("\r")
        if data == "!* Connections":
            conn.sendall("[+] Clients Connected: %s \r\n" % (clients))
    conn.close()

while True:
    conn, addr = sock.accept()

    clients = clients + 1

    start_new_thread(client_thread, (conn,))

sock.close()
</code></pre>
<p>I needn't show you all of the code because its irrelevant to this issue,
I have provided the code that make's the counter go up when a new connection connects, but as said before I don't know how to make it go down when a connection leaves.</p>
<p>When trying to find solutions online there show's nothing that can help my issue</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a small sample how to realize a client counter with the <a href="https://docs.python.org/3/library/select.html#select.select" rel="nofollow noreferrer">select.select</a> function. I actually took it from the great article <a href="https://pymotw.com/2/select/" rel="nofollow noreferrer">select â€“ Wait for I/O Efficiently</a> on <a href="https://pymotw.com/" rel="nofollow noreferrer">pymotw.com</a> and added a client counter. Basically you look for readable sockets and try to receive data from them. If a socket returns nothing it means it has been closed and can be removed from the client list.</p>
<pre><code>import queue
import socket
import select

clients = 0

sock = socket.socket()
sock.bind(('localhost', 5000))
sock.listen(5)

inputs = [sock]
outputs = []
msg_queues = {}

while inputs:
    readable, writable, exceptional = select.select(
        inputs, outputs, msg_queues)

    for s in readable:

        if s is sock:
            conn, addr = sock.accept()
            print('new connection from ', addr)
            conn.setblocking(0)
            inputs.append(conn)
            msg_queues[conn] = queue.Queue()

            # increment client counter
            clients += 1
            print('Clients: ', clients)

        else:
            # try to receive some data
            data = s.recv(1024)

            if data:
                # if data available print it
                print('Received {} from {}'.format(data, s.getpeername()))
                msg_queues[s].put(data)

                # add output channel for response
                if s not in outputs:
                    outputs.append(s)
            else:
                # empty data will be interpreted as closed connection
                print('Closing connection to ', s.getpeername())

                # stop listening for input on the connection
                if s in outputs:
                    outputs.remove(s)

                # remove from inputs
                inputs.remove(s)
                s.close()

                # decrement client counter
                clients -= 1

                del msg_queues[s]
                print('Clients: ', clients)
</code></pre>
</div>
<span class="comment-copy">Count number of threads that are alive?</span>
<span class="comment-copy">@Fejs I am not using threads to make the counter go up it uses clients = 0 clients = clients + 1 but I need a way for my counter to detect the connection leaving then change the connection from going up to down</span>
<span class="comment-copy">This approach is bad. You do <i>NOT</i> want to create a thread per client. Just a heads up for your code.</span>
<span class="comment-copy">@Fejs Threads are expensive, requires overload, if you need to handle each client you have to synchronize each thread, it's easy to come across deadlocks or concurrency issues such as race conditions too. Typically what you want is to use non-blocking IO (Asynchronous sockets) See: <a href="https://docs.python.org/2/howto/sockets.html#non-blocking-sockets" rel="nofollow noreferrer">docs.python.org/2/howto/sockets.html#non-blocking-sockets</a></span>
<span class="comment-copy">@cmidi What are you talking about... my counter uses clients = 0 then when a socket is connected it will update the clients with clients = clients + 1 but what I need is it to go down when a connection leaves</span>
