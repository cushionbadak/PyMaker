<div class="post-text" itemprop="text">
<pre><code>34512340    plain brackets      0.50    30
56756777    100mm bolts         0.20    0
90673412    L-shaped brackets   1.20    30
</code></pre>
<p>I have this text file and I want to take the value on the end of each line, do something to it and then write it back without changing the formatting of the text. So basically just amend the last value on each line. </p>
<p>My current approach is to split the line up into a list of values using the spacings/tabs, but I don't know how I can put the spaces/tabs back in after as it was before.</p>
<p>Any suggestions? </p>
<p>Also here's my mock up code..</p>
<pre><code>import re
import fileinput
with open('stock.txt', 'r') as stock:
    stockList = stock.readlines()

print(stockList[0])
print(re.split(r'\t+', stockList[0].rstrip('\t').rstrip('\n')))
with fileinput.FileInput('test.txt', inplace=True) as file:
     for line in file:
         print(line.replace(stockList[0], ammendedLineWithEditedValue), end='')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't really need regular expressions for that.
The standard string methods allow you to <a href="http://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer">split</a> a string at a specific character, and then <a href="http://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer">join</a> the string back again.</p>
<pre><code>with open('stock.txt', 'r') as stock, \
     open('test.txt', 'w') as test:
  for line in stock:
    tokens = line.split('\t')

    # Edit last token in line
    tokens[-1] = str(int(tokens[-1]) + 5)

    result = '\t'.join(tokens)
    test.write(result + '\n')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may use a regex to match 1+ tabs and then 1+ digits at the end of the line with</p>
<pre><code>r'(\t+)([0-9]+)$
</code></pre>
<p>Here is a <a href="https://regex101.com/r/iWeHSB/1" rel="nofollow noreferrer">regex demo</a>.</p>
<p>See  a <a href="https://ideone.com/Zu9OCq" rel="nofollow noreferrer">Python demo</a> that - for the demo purposes - just adds <code>30</code> to the value found with the regex:</p>
<pre><code>import re
def ammendedLineWithEditedValue(s): # TEST
    return int(s) + 30

lines = '''34512340 plain brackets      0.50    30
56756777    100mm bolts         0.20    0
90673412    L-shaped brackets   1.20    30'''
for line in lines.split("\n"):
    print(re.sub(r'(\t+)([0-9]+)$', lambda m: "{}{}".format(m.group(1), ammendedLineWithEditedValue(m.group(2))), line))
</code></pre>
</div>
<span class="comment-copy">that's not a bad idea, but you could use the <code>csv</code> module as well.</span>
<span class="comment-copy">I wanted to avoid CSV because of the text's layout and code that depends on this layout to begin with. But thanks :)</span>
<span class="comment-copy">Is there always 1+tabs + digits at the end of the line? Basically, you can use a regex for this if you are sure of the data you have, that it falls under some pattern.</span>
<span class="comment-copy">For the value at the end of each line, there is a \t before and a \n after.</span>
<span class="comment-copy">Use something like <code>re.sub(r'(\t+)([0-9]+)$', lambda m: "{}{}".format(m.group(1), ammendedLineWithEditedValue(m.group(2))), line)</code></span>
<span class="comment-copy">Thank you, this works perfectly :)</span>
