<div class="post-text" itemprop="text">
<p>Using python 3.4.3 or python 3.5.1 I'm surprised to see that:</p>
<pre><code>from decimal import Decimal
Decimal('0') * Decimal('123.456789123456')
</code></pre>
<p>returns:</p>
<pre><code>Decimal('0E-12')
</code></pre>
<p>Worse part is that this specific use case works with float.</p>
<p>Is there anything I could do to make sure the maths work and 0 multiplied by anything returns 0? </p>
</div>
<div class="post-text" itemprop="text">
<p><code>0E-12</code> actually is <code>0</code> (it's short for <code>0 * 10 ** -12</code>; since the coefficient is 0, that's still 0), <code>Decimal</code> just provides the <code>E-12</code> bit to indicate the "confidence level" of the <code>0</code>. What you've got will still behave like zero (it's falsy, additive identity, etc.), the only quirk is in how it prints.</p>
<p>If you need formatting to match, you can use the formatting mini-language, or you can call <code>.normalize()</code> on the result, which will turn <code>Decimal('0E-12')</code> into <code>Decimal('0')</code> (the method's purpose is to strip trailing zeroes from the result to produce a minimal canonical form that represents all equal numbers the same way).</p>
</div>
<div class="post-text" itemprop="text">
<p>Even though <code>Decimal('0E-12')</code> is not visually the same as <code>Decimal('0')</code>, there is no difference to python.</p>
<pre><code>&gt;&gt;&gt; Decimal('0E-12') == 0
True
</code></pre>
<p>The notation 0E-12 actually represents: 0 * 10 ** -12. This expression evaluates to 0. </p>
</div>
<div class="post-text" itemprop="text">
<p>You may quantize your result to required precision.</p>
<pre><code>from decimal import Decimal, ROUND_HALF_UP
result = Decimal('0') * Decimal('123.456789123456')
result.quantize(Decimal('.01'), rounding = ROUND_HALF_UP)

&gt;&gt;&gt;Decimal('0.00')
</code></pre>
<p>For more info (eg. about rounding modes or even setting up a context for all decimals) refer to <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer">https://docs.python.org/3/library/decimal.html</a></p>
<p>Edit: I guess your best hit would be using <code>result.normalize()</code> method as mentioned by ShadowRanger.</p>
</div>
<div class="post-text" itemprop="text">
<p>Do the multiplication with floats and convert to decimal afterwards.</p>
<pre><code>x = 0
y = 123.456789123456
Decimal(x*y)
</code></pre>
<p>returns (on Python 3.5.2):</p>
<pre><code>Decimal('0')
</code></pre>
</div>
<span class="comment-copy">That is technically 0. How are you planning to use the result?</span>
<span class="comment-copy">The number is so small that it is basically 0, as @Nicarus said. Could you round to a few decimal places?</span>
<span class="comment-copy"><code>Decimal('0E-12') == Decimal('0')</code> gives <code>True</code>, while <code>Decimal('1E-12') == Decimal('0')</code> gives <code>False</code>. So I think <code>Decimal('0E-12')</code> is not <i>approximately</i> 0, it <i>is</i> 0 in Python.</span>
<span class="comment-copy"><code>0E-12</code> means <code>0 * 10^(-12)</code> which is <code>0</code></span>
<span class="comment-copy">Off topic, but 3.5.2 has been out for a while... :)</span>
<span class="comment-copy">Silly me... 0E-12 is indeed 0. Thanks for the answer and the pointer to .normalize() if i need to display the result somewhere.</span>
<span class="comment-copy">That completely defeats the point of using <code>Decimal</code> in the first place.</span>
