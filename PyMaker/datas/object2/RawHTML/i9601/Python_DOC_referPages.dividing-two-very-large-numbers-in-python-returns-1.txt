<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/11522933/python-floating-point-arbitrary-precision-available">Python floating point arbitrary precision available?</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/10768724/why-does-python-return-0-for-simple-division-calculation">Why does Python return 0 for simple division calculation?</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I know this question has been asked before but the solutions does not seem to be working for me. I have two very large numbers in python (2.7) like the followings:</p>
<pre><code>a = 332413405639482828453084501713288536462658058395850
b = 332413405639482828453084501713288536462658058395856
</code></pre>
<p>and I need the result of</p>
<pre><code>a/b
</code></pre>
<p>As you can see the there is a very tiny difference between the two so I assume the result of this division is not 0 or 1. I have tried // as suggested in other posts but that still does not return what I am looking for. Is there a solution to this or is it something impossible to do in python or with large numbers in general? </p>
<p><strong>UPDATE</strong>: Btw, sorry but I forgot to mention that even by importing division from future I still do not get what I want.</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>simple floats are not precise enough, try with the <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer">Decimal</a> module</p>
<pre><code>&gt;&gt;&gt; from decimal import Decimal, localcontext
&gt;&gt;&gt; with localcontext() as cont:
        cont.prec=100
        Decimal(a)/Decimal(b)


Decimal('0.9999999999999999999999999999999999999999999999999819501864298840350161830097171743383579489213731828')
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you're in Python 2 land (and not Python 3) you're experiencing <a href="https://stackoverflow.com/questions/2958684/python-division" title="integer division">integer division</a>. Try <code>float(a)/float(b)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>I believe that it is impossible to achieve what You want. Precision with this big number can't be accomplished, so result would be presented as <code>1</code> in this particular case. </p>
<p>We can see exact value stored in float using <code>decimal.Decimal</code> (according to <a href="https://docs.python.org/2/tutorial/floatingpoint.html" rel="nofollow noreferrer">docs</a>):</p>
<pre><code>In [1]: a = 332413405639482828453084501713288536462658058395850

In [2]: b = 332413405639482828453084501713288536462658058395856

In [3]: import decimal

In [4]: a1 = decimal.Decimal(a)

In [5]: b1 = decimal.Decimal(b)

In [6]: a1/b1
Out[6]: Decimal('1.000000000000000000000000000')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Cast them into float first then do the division, otherwise u will get zero when the first integer is smaller than the second</p>
</div>
<span class="comment-copy">It's not simply an issue of integer to floating point conversion. Not a direct duplicate.</span>
<span class="comment-copy">You do not need to type-cast both numerator and denomenator. Type-casting any one of these will do the trick</span>
<span class="comment-copy">This is not the sole issue here. Try the same in Python 3.</span>
<span class="comment-copy">So no matter what, I will always get 1 as an answer?</span>
<span class="comment-copy">No, check my comment on your main question. Use the <code>decimal</code> module.</span>
<span class="comment-copy">@svens Great answer, I missed <code>prec</code> attribute.</span>
