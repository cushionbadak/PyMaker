<div class="post-text" itemprop="text">
<p>Is it <strong>guaranteed</strong> that the iteration variable will always follow the original sequence no matter how you modify the variable itself?</p>
<p>The <a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements" rel="nofollow noreferrer">doc</a> doesn't mention anything about this.</p>
<p>I've seen similar questions elsewhere but none of them gives authoritative answers. I've tested 100 times and it worked 100 times but I'm still not sure whether this is guaranteed. So <strong>please give some references</strong>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes. It's totally safe to assign to the loop variable(s) in a <code>for</code> loop.</p>
<p>From <a href="https://docs.python.org/3/reference/compound_stmts.html#for" rel="nofollow noreferrer">The for statement</a> docs:</p>
<blockquote>
<p>The for-loop makes assignments to the variables(s) in the target list.
  This overwrites all previous assignments to those variables including
  those made in the suite of the for-loop:</p>
<pre><code>for i in range(10):
    print(i)
    i = 5             # this will not affect the for-loop
                      # because i will be overwritten with the next
                      # index in the range
</code></pre>
</blockquote>
<p>This information is also available via <code>help('for')</code></p>
</div>
<div class="post-text" itemprop="text">
<p>I agree with PM 2Ring's answer, but you ask if it is guaranteed the loop will "follow the original sequence". For an iterator defined by a generator function, this cannot be guaranteed, because the sequence may be altered in between iterations; and it is possible to alter the way a generator works by altering a mutable element in the sequence.</p>
<p>For example:</p>
<pre><code>def strange_iter():
    x = {'value': 1}
    while x['value'] &lt; 30:
        x = {'value': x['value'] + 1}
        yield x

for d in strange_iter():
    print(d['value'])
    if d['value'] == 10:
        d['value'] = 15     # loop will skip from 10 to 16
</code></pre>
<p>I'm not sure if such generators would have any use in practice or are best considered a bad practice to be avoided.</p>
</div>
<div class="post-text" itemprop="text">
<p>The loop will use the original sequence, for example: </p>
<pre><code>a = [1, 2,3 ]
for index,number in enumerate(a):
    print(a[index])
    index = 0
    number = 0
</code></pre>
<p>Output:</p>
<pre><code>1
2
3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think the syntax</p>
<pre><code>for item in stuff:
    ...
</code></pre>
<p>creates an iterator by calling <code>iter(stuff)</code>, then values are extracted by calling <code>next()</code> on that iterator.</p>
</div>
<div class="post-text" itemprop="text">
<p>Short answer, It depends....</p>
<p>It depends on what you meant by <code>safe</code>. Technically there is nothing wrong modifying the variable used for iteration. When you iterate over a list or something, you're actually iterating over an iterator. It returns the value contained in the container (list, dict whatever)...</p>
<p>If you modify the variable returned by the iterator, you have to keep in mind about the mutability of the object you're trying to modify.</p>
<p>If you iterate over integers or strings, you're not actually modifying the <code>variable</code> but affecting a new value to the variable name.. Thus, you're not modifying the value contained in the container.</p>
<p>But if you're iterating over a container with mutable objects (let say dicts).. Modifying the variable by changing the content, will have an effect on the value contained in the container since they are the same values.</p>
<p>But doing something like this would have no effect at all on the value in the container as you're not modifying the value pointed by the variable name but changing to which value the variable name points to:</p>
<pre><code>a = [{}, {}, {}]
for x in a:
    x = {'val': x}
</code></pre>
<p>While this will:</p>
<pre><code>a = [{}, {}, {}]
for x in a:
    x['v'] = 1
</code></pre>
</div>
<span class="comment-copy">You may change the variable and it won't impact the code. But it is cleaner to use the new variable</span>
<span class="comment-copy">@Atirag Please look carefully. I'm not modifying the sequence but the iteration variable.</span>
<span class="comment-copy">@atirag who says that ?</span>
<span class="comment-copy">@MoinuddinQuadri Any references so that we know it's designed to be that way?</span>
<span class="comment-copy">It's safe to <i>assign</i> to the loop variable, but modifying it (if it is mutable) can affect the sequence.</span>
<span class="comment-copy">@Stuart Sure, but that normally won't affect the subsequent values taken by the loop variable(s), unless it's a weird iterable like the generator in your answer.</span>
<span class="comment-copy">Care to explain the downvote?</span>
