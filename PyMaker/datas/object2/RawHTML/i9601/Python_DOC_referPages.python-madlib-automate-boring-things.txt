<div class="post-text" itemprop="text">
<p>I am writing a MadLib program in Python from the "Automate The Boring Things in Python" book. I am sure my program is going to but I keep getting this strange "NameError" when the user needs to enter input.</p>
<p>Here is my code. My plan is to write the contents to the file once I see the message has joined successfully.</p>
<pre><code>#!/usr/local/bin/python3

import sys

'''
Create a Mad Libs program that reads in text files and lets the user add
their own text anywhere the word ADJECTIVE, NOUN, ADVERB, or VERB
appears in the text file.
'''

breaks = ["noun", "verb", "adverb", "adjective"]


'''Program Usage and Exit Case'''
if len(sys.argv) &lt; 2:
    print("Usage: ./mad.py &lt;FileName&gt;")
    sys.exit()

'''Read in File and Store Contents in Array'''
file = open(sys.argv[1])
chunk = str(file.read()).split()

****'''Search through text for keywords'''
for word in chunk:
    if word.lower() in breaks:
        chunk[word] = input("Enter %s: " %word)****

newMessage = " ".join(chunk)
print(newMessage)


file.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think the issue is that the code is actually running in <strong>Python 2</strong>, where the input function actually tries to run the user's input as if it was code. Compare the input() documentation for <a href="https://docs.python.org/2/library/functions.html#input" rel="nofollow noreferrer">Python 2</a> and <a href="https://docs.python.org/3/library/functions.html#input" rel="nofollow noreferrer">Python 3</a>. So you get a NameError because Python tries to treat whatever you type in as a variable, which doesn't exist. If you want it to work in Python 2, just replace <strong>input</strong> with <strong>raw_input</strong>.</p>
<p>Another issue you'll encounter is that</p>
<pre><code>chunk[word] = input("Enter %s: " %word)
</code></pre>
<p>won't work, since word is a string and chunk requires an number as an index in the list. To fix that, you can simply keep track of the current index in your for loop. A particular Pythonic way to do it is with the <a href="https://docs.python.org/2/library/functions.html#enumerate" rel="nofollow noreferrer">enumerate</a> function, as shown below:</p>
<pre><code>for i, word in enumerate(chunk):
    if word.lower() in breaks:
        chunk[i] = input("Enter %s: " %word)
</code></pre>
<p>Now everything should work! The fixed <strong>Python 3</strong> version is below:</p>
<pre><code>#!/usr/local/bin/python3
import sys

'''
Create a Mad Libs program that reads in text files and lets the user add
their own text anywhere the word ADJECTIVE, NOUN, ADVERB, or VERB
appears in the text file.
'''

breaks = ["noun", "verb", "adverb", "adjective"]


'''Program Usage and Exit Case'''
if len(sys.argv) &lt; 2:
    print("Usage: ./mad.py &lt;FileName&gt;")
    sys.exit()

'''Read in File and Store Contents in Array'''
file = open(sys.argv[1])
chunk = str(file.read()).split()

'''Search through text for keywords'''
for i, word in enumerate(chunk):
    if word.lower() in breaks:
        chunk[i] = input("Enter %s: " %word)

newMessage = " ".join(chunk)
print(newMessage)


file.close()
</code></pre>
</div>
<span class="comment-copy">Are you sure the code is running in Python 3? What might be happening is it's actually running in Python 2, where input will try to evaluate as code what you type. You can try adding a print(sys.version) to the script and seeing what it prints.</span>
<span class="comment-copy">Also, I'm pretty sure that chunk[word] won't work since you're trying since word is a string, not a numerical index for the list. You can instead do "for i, word in enumerate(chunk)" and "chunk[i] = ..."</span>
<span class="comment-copy">This actually did work :)! Just gotta figure out why the "verb" keyword wasn't captured.</span>
