<div class="post-text" itemprop="text">
<p>I have a list of pairs:</p>
<pre><code>[0, 1], [0, 4], [1, 0], [1, 4], [4, 0], [4, 1]
</code></pre>
<p>and I want to remove any duplicates where</p>
<pre><code>[a,b] == [b,a]
</code></pre>
<p>So we end up with just</p>
<pre><code>[0, 1], [0, 4], [1, 4]
</code></pre>
<p>I can do an inner &amp; outer loop checking for the reverse pair and append to a list if that's not the case, but I'm sure there's a more Pythonic way of achieving the same results.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you need to preserve the order of the elements in the list then, you can use a the <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer"><code>sorted</code></a> function and set comprehension with <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> like this:</p>
<pre><code>lst = [0, 1], [0, 4], [1, 0], [1, 4], [4, 0], [4, 1]
data = {tuple(item) for item in map(sorted, lst)}
# {(0, 1), (0, 4), (1, 4)}
</code></pre>
<p>or simply without <code>map</code> like this:</p>
<pre><code>data = {tuple(sorted(item)) for item in lst}
</code></pre>
<p>Another way is to use a <code>frozenset</code> as shown <a href="https://stackoverflow.com/a/41173005/">here</a> however note that this only work if you have distinct elements in your list. Because like <code>set</code>,  <code>frozenset</code> always contains unique values. So you will end up with unique value in your sublist(lose data) which may not be what you want.</p>
<p>To output a list, you can always use <code>list(map(list, result))</code> where result is a set of tuple only in Python-3.0 or newer.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you only want to remove reversed pairs and don't want external libraries you could use a simple generator function (loosly based on the <a href="https://docs.python.org/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>itertools</code>  "unique_everseen" recipe</a>):</p>
<pre><code>def remove_reversed_duplicates(iterable):
    # Create a set for already seen elements
    seen = set()
    for item in iterable:
        # Lists are mutable so we need tuples for the set-operations.
        tup = tuple(item)
        if tup not in seen:
            # If the tuple is not in the set append it in REVERSED order.
            seen.add(tup[::-1])
            # If you also want to remove normal duplicates uncomment the next line
            # seen.add(tup)
            yield item

&gt;&gt;&gt; list(remove_reversed_duplicates(a))
[[0, 1], [0, 4], [1, 4]]
</code></pre>
<p>The generator function might be a pretty fast way to solve this problem because set-lookups are really cheap. <strong>This approach also keeps the order of your initial list and <em>only</em> removes reverse duplicates while being <em>faster</em> than most of the alternatives!</strong></p>
<hr/>
<p>If you don't mind using an external library and you want to remove all duplicates (reversed and identical) an alternative is: <a href="https://iteration-utilities.readthedocs.io/en/latest/generated/unique_everseen.html" rel="nofollow noreferrer"><code>iteration_utilities.unique_everseen</code></a></p>
<pre><code>&gt;&gt;&gt; a = [[0, 1], [0, 4], [1, 0], [1, 4], [4, 0], [4, 1]]

&gt;&gt;&gt; from iteration_utilities import unique_everseen

&gt;&gt;&gt; list(unique_everseen(a, key=set))
[[0, 1], [0, 4], [1, 4]]
</code></pre>
<p>This checks if any item has the same contents in arbitary order (thus the <code>key=set</code>) as another. In this case this works as expected but it also removes duplicate <code>[a, b]</code> instead of only <code>[b, a]</code> occurences. You could also use <code>key=sorted</code> (like the other answers suggest). The <code>unique_everseen</code> like this has a bad algorithmic complexity because the result of the <code>key</code> function is not hashable and thus the fast lookup is replaced by a slow lookup. To speed this up you need to make the keys hashable, for example by converting them to sorted tuples (like some other answers suggest):</p>
<pre><code>&gt;&gt;&gt; from iteration_utilities import chained
&gt;&gt;&gt; list(unique_everseen(a, key=chained(sorted, tuple)))
[[0, 1], [0, 4], [1, 4]]
</code></pre>
<p>The <a href="https://iteration-utilities.readthedocs.io/en/latest/generated/chained.html" rel="nofollow noreferrer"><code>chained</code></a> is nothing else than a faster alternative to <code>lambda x: tuple(sorted(x))</code>.</p>
<p><strong>EDIT:</strong> As mentioned by @jpmc26 one could use <code>frozenset</code> instead of normal sets:</p>
<pre><code>&gt;&gt;&gt; list(unique_everseen(a, key=frozenset))
[[0, 1], [0, 4], [1, 4]]
</code></pre>
<hr/>
<p>To get an idea about the performance I did some <code>timeit</code> comparisons for the different suggestions:</p>
<pre><code>&gt;&gt;&gt; a = [[0, 1], [0, 4], [1, 0], [1, 4], [4, 0], [4, 1]]

&gt;&gt;&gt; %timeit list(remove_reversed_duplicates(a))
100000 loops, best of 3: 16.1 µs per loop
&gt;&gt;&gt; %timeit list(unique_everseen(a, key=frozenset))
100000 loops, best of 3: 13.6 µs per loop
&gt;&gt;&gt; %timeit list(set(map(frozenset, a)))
100000 loops, best of 3: 7.23 µs per loop

&gt;&gt;&gt; %timeit list(unique_everseen(a, key=set))
10000 loops, best of 3: 26.4 µs per loop
&gt;&gt;&gt; %timeit list(unique_everseen(a, key=chained(sorted, tuple)))
10000 loops, best of 3: 25.8 µs per loop
&gt;&gt;&gt; %timeit [list(tpl) for tpl in list(set([tuple(sorted(pair)) for pair in a]))]
10000 loops, best of 3: 29.8 µs per loop
&gt;&gt;&gt; %timeit set(tuple(item) for item in map(sorted, a))
10000 loops, best of 3: 28.5 µs per loop
</code></pre>
<p>Long list with many duplicates:</p>
<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; a = [[random.randint(0, 10), random.randint(0,10)] for _ in range(10000)]

&gt;&gt;&gt; %timeit list(remove_reversed_duplicates(a))
100 loops, best of 3: 12.5 ms per loop
&gt;&gt;&gt; %timeit list(unique_everseen(a, key=frozenset))
100 loops, best of 3: 10 ms per loop
&gt;&gt;&gt; %timeit set(map(frozenset, a))
100 loops, best of 3: 10.4 ms per loop

&gt;&gt;&gt; %timeit list(unique_everseen(a, key=set))
10 loops, best of 3: 47.7 ms per loop
&gt;&gt;&gt; %timeit list(unique_everseen(a, key=chained(sorted, tuple)))
10 loops, best of 3: 22.4 ms per loop
&gt;&gt;&gt; %timeit [list(tpl) for tpl in list(set([tuple(sorted(pair)) for pair in a]))]
10 loops, best of 3: 24 ms per loop
&gt;&gt;&gt; %timeit set(tuple(item) for item in map(sorted, a))
10 loops, best of 3: 35 ms per loop
</code></pre>
<p>And with fewer duplicates:</p>
<pre><code>&gt;&gt;&gt; a = [[random.randint(0, 100), random.randint(0,100)] for _ in range(10000)]

&gt;&gt;&gt; %timeit list(remove_reversed_duplicates(a))
100 loops, best of 3: 15.4 ms per loop
&gt;&gt;&gt; %timeit list(unique_everseen(a, key=frozenset))
100 loops, best of 3: 13.1 ms per loop
&gt;&gt;&gt; %timeit set(map(frozenset, a))
100 loops, best of 3: 11.8 ms per loop


&gt;&gt;&gt; %timeit list(unique_everseen(a, key=set))
1 loop, best of 3: 1.96 s per loop
&gt;&gt;&gt; %timeit list(unique_everseen(a, key=chained(sorted, tuple)))
10 loops, best of 3: 24.2 ms per loop
&gt;&gt;&gt; %timeit [list(tpl) for tpl in list(set([tuple(sorted(pair)) for pair in a]))]
10 loops, best of 3: 31.1 ms per loop
&gt;&gt;&gt; %timeit set(tuple(item) for item in map(sorted, a))
10 loops, best of 3: 36.7 ms per loop
</code></pre>
<p>So the variants with <code>remove_reversed_duplicates</code>, <code>unique_everseen</code>(<code>key=frozenset</code>) and <code>set(map(frozenset, a))</code> seem to be by far the fastest solutions. Which one depends on the length of the input and the number of duplicates.</p>
</div>
<div class="post-text" itemprop="text">
<h3>TL;DR</h3>
<pre><code>set(map(frozenset, lst))
</code></pre>
<h3>Explanation</h3>
<p>If the pairs are logically unordered, they're more naturally expressed as sets. It would be better to have them as sets before you even get to this point, but you can convert them like this:</p>
<pre><code>lst = [[0, 1], [0, 4], [1, 0], [1, 4], [4, 0], [4, 1]]
lst_as_sets = map(frozenset, lst)
</code></pre>
<p>And then the natural way of eliminating duplicates in an iterable is to convert it to a <code>set</code>:</p>
<pre><code>deduped = set(lst_as_sets)
</code></pre>
<p>(This is the main reason I chose <code>frozenset</code> in the first step. Mutable <code>set</code>s are not hashable, so they can't be added to a <code>set</code>.)</p>
<p>Or you can do it in a single line like in the TL;DR section.</p>
<p>I think this is much simpler, more intuitive, and more closely matches how you <em>think</em> about the data than fussing with sorting and tuples.</p>
<h3>Converting back</h3>
<p>If for some reason you really need a <code>list</code> of <code>list</code>s as the final result, converting back is trivial:</p>
<pre><code>result_list = list(map(list, deduped))
</code></pre>
<p>But it's probably more logical to leave it all as <code>set</code>s as long as possible. I can only think of one reason that you might need this, and that's compatibility with existing code/libraries.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could sort each pair, convert your list of pairs to a set of tuples and back again :</p>
<pre><code>l = [[0, 1], [0, 4], [1, 0], [1, 4], [4, 0], [4, 1]]
[list(tpl) for tpl in list(set([tuple(sorted(pair)) for pair in l]))]
#=&gt; [[0, 1], [1, 4], [0, 4]]
</code></pre>
<p>The steps might be easier to understand than a long one-liner :</p>
<pre><code>&gt;&gt;&gt; l = [[0, 1], [0, 4], [1, 0], [1, 4], [4, 0], [4, 1]]
&gt;&gt;&gt; [sorted(pair) for pair in l]
# [[0, 1], [0, 4], [0, 1], [1, 4], [0, 4], [1, 4]]
&gt;&gt;&gt; [tuple(pair) for pair in _]
# [(0, 1), (0, 4), (0, 1), (1, 4), (0, 4), (1, 4)]
&gt;&gt;&gt; set(_)
# set([(0, 1), (1, 4), (0, 4)])
&gt;&gt;&gt; list(_)
# [(0, 1), (1, 4), (0, 4)]
&gt;&gt;&gt; [list(tpl) for tpl in _]
# [[0, 1], [1, 4], [0, 4]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use the builtin <code>filter</code> function.</p>
<pre><code>from __future__ import print_function

def my_filter(l):
    seen = set()

    def not_seen(it):
        s = min(*it), max(*it)
        if s in seen:
            return False
        else:
            seen.add(s)
            return True

    out = filter(not_seen, l)

    return out

myList = [[0, 1], [0, 4], [1, 0], [1, 4], [4, 0], [4, 1]]
print(my_filter(myList)) # [[0, 1], [0, 4], [1, 4]]
</code></pre>
<p>As a complement I would orient you to the <a href="https://docs.python.org/2/library/itertools.html#itertools-recipes" rel="nofollow noreferrer" title="Python itertools module">Python itertools module</a> which describes a <code>unique_everseen</code> function which does basically the same thing as above but in a lazy, generator-based, memory-efficient version. Might be better than any of our solutions if you are working on large arrays. Here is how to use it:</p>
<pre><code>from itertools import ifilterfalse

def unique_everseen(iterable, key=None):
    "List unique elements, preserving order. Remember all elements ever seen."
    # unique_everseen('AAAABBBCCDAABBB') --&gt; A B C D
    # unique_everseen('ABBCcAD', str.lower) --&gt; A B C D
    seen = set()
    seen_add = seen.add
    if key is None:
        for element in ifilterfalse(seen.__contains__, iterable):
            seen_add(element)
            yield element
    else:
        for element in iterable:
            k = key(element)
            if k not in seen:
                seen_add(k)
                yield element

gen = unique_everseen(myList, lambda x: (min(x), max(x))) # gen is an iterator
print(gen) # &lt;generator object unique_everseen at 0x7f82af492fa0&gt;
result = list(gen) # consume generator into a list.
print(result) # [[0, 1], [0, 4], [1, 4]]
</code></pre>
<p>I haven't done any metrics to see who's fastest. However memory-efficiency and O complexity seem better in this version.</p>
<h2>Timing min/max vs sorted</h2>
<p>The builtin <code>sorted</code> function could be passed to <code>unique_everseen</code> to order items in the inner vectors. Instead, I pass <code>lambda x: (min(x), max(x))</code>. Since I know the vector size which is exactly 2, I can proceed like this. </p>
<p>To use <code>sorted</code> I would need to pass <code>lambda x: tuple(sorted(x))</code> which adds overhead. Not dramatically, but still.</p>
<pre><code>myList = [[random.randint(0, 10), random.randint(0,10)] for _ in range(10000)]
timeit.timeit("list(unique_everseen(myList, lambda x: (min(x), max(x))))", globals=globals(), number=20000)
&gt;&gt;&gt; 156.81979029000013
timeit.timeit("list(unique_everseen(myList, lambda x: tuple(sorted(x))))", globals=globals(), number=20000)
&gt;&gt;&gt; 168.8286430349999
</code></pre>
<p>Timings done in Python 3, which adds the <code>globals</code> kwarg to <code>timeit.timeit</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>An easy and <em>unnested</em> solution:</p>
<pre><code>pairs = [[0, 1], [0, 4], [1, 0], [1, 4], [4, 0], [4, 1]]
s=set()
for p in pairs:
    # Lists are unhashable so make the "elements" into tuples
    p = tuple(p)
    if p not in s and p[::-1] not in s:
        s.add(p)

print s
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h3>EDITED to better explain</h3>
<p>First get each list sorted and next use the dictionaries keys to get a unique set of elements and them list comprehension.<br/></p>
<p><b>Why tuples?</b><br/>Replacing lists with tuples is necessary to avoid the "unhashable" error when passing through the fromkeys() function</p>
<pre><code>my_list = [[0, 1], [0, 4], [1, 0], [1, 4], [4, 0], [4, 1]]
tuple_list = [ tuple(sorted(item)) for item in my_list ]
final_list = [ list(item) for item in list({}.fromkeys(tuple_list)) ]
</code></pre>
<p>Using OrderedDict even preserve the list order.<br/></p>
<pre><code>from collections import OrderedDict

my_list = [[0, 1], [0, 4], [1, 0], [1, 4], [4, 0], [4, 1]]
tuple_list = [ tuple(sorted(item)) for item in my_list ]
final_list = [ list(item) for item in list(OrderedDict.fromkeys(tuple_list)) ]
</code></pre>
<p>The above code will result in the desired list</p>
<pre><code>[[0, 1], [0, 4], [1, 4]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the order of pairs and pair-items matters, creating a new list by testing for membership might be the way to go here. </p>
<pre><code>pairs = [0, 1], [0, 4], [1, 0], [1, 4], [4, 0], [4, 1]
no_dups = []
for pair in pairs:
    if not any( all( i in p for i in pair ) for p in no_dups ):
        no_dups.append(pair)
</code></pre>
<p>Otherwise, I'd go with <a href="https://stackoverflow.com/a/41167087/2437514">Styvane's answer</a>. </p>
<p>Incidentally, the above solution will not work for cases in which you have <em>matching</em> pairs. For example, <code>[0,0]</code> would not be added to the list. For that, you'd need to add an additional check: </p>
<pre><code>for pair in pairs:
    if not any( all( i in p for i in pair ) for p in no_dups ) or ( len(set(pair)) == 1 and not pair in no_dups ):
        no_dups.append(pair)
</code></pre>
<p>However, that solution will not pick up <em>empty</em> "pairs" (eg, <code>[]</code>). For that, you'll need one more adjustment: </p>
<pre><code>    if not any( all( i in p for i in pair ) for p in no_dups ) or ( len(set(pair)) in (0,1) and not pair in no_dups ):
        no_dups.append(pair)
</code></pre>
<p>The <code>and not pair in no_dups</code> bit is required to prevent adding the <code>[0,0]</code> or <code>[]</code> to <code>no_dups</code> <em>twice</em>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Well, I am "checking for the reverse pair and append to a list if that's not the case" as you said you could do, but I'm using a single loop.</p>
<pre><code>x=[[0, 1], [0, 4], [1, 0], [1, 4], [4, 0], [4, 1]]
out = []
for pair in x:
    if pair[::-1] not in out:
        out.append(pair)
print out
</code></pre>
<p>The advantage over existing answers is being, IMO, more readable. No deep knowledge of the standard library is needed here. And no keeping track of anything complex. The only concept that might be unfamiliar for beginners it that <code>[::-1]</code> reverts the pair.</p>
<p>The performance is O(n**2) though, so do not use if performance is an issue and/or lists are big.</p>
</div>
<span class="comment-copy">What about in-order duplicates? I.e. is it fine if you have two <code>[0, 1]</code>?</span>
<span class="comment-copy">Do you need to preserve the order of the pairs? E.g., would <code>[1, 4], [0, 1], [0, 4]</code> be fine or does it have to be <code>[0, 1], [0, 4], [1, 4]</code>?</span>
<span class="comment-copy">What about identical pairs, i.e. <code>[1, 1]</code> or <code>[2, 2]</code> in the input? Do they need to be preserved as <code>[1, 1]</code> or is it okay if they are converted to <code>[1]</code>?</span>
<span class="comment-copy">I hate these questions that seem well posed but have a thousand little unspecified details that affect which things will or won't work. lol</span>
<span class="comment-copy">Do the elements of the list need to remain lists or can we convert them to tuples? Also does the order within a pair matter? Like can we convert <code>[[3, 4], [4, 3], [2, 5]]</code> to <code>[[3, 4], [5, 2]]</code>?</span>
<span class="comment-copy">I don't know what happened to my previous comment but you're approach <b>doesn't</b> preserve the order of the elements (because you use <code>sorted</code> and a <code>set</code>-comprehension). For example: <code>[[1, 0], [2, 0], [3, 0]]</code> results in something like <code>{(0, 2), (0, 1), (0, 3)}</code> (order inside the set may vary).</span>
<span class="comment-copy">@MSeifert I will  probably do it differently if OP didn't say <i><code>[a,b] == [b,a]</code></i></span>
<span class="comment-copy">He said "<i>I want to remove any duplicates where <code>[a,b] == [b,a]</code></i>" not that non-duplicates should be reordered. I don't mean that your answer is incorrect but it should be mentioned in the answer!</span>
<span class="comment-copy">In Python like anywhere, paying attention to algorithmic complexity is important. It is easy to write compact code which actually nests hidden iterations, while with a few more lines, the extra loops can be removed. So this answer is the correct solution for me and even more because I wasn't aware of the external <code>iteration_utilities</code> lib and had always wondered why <code>itertools</code> didn't include those recipes.</span>
<span class="comment-copy">@daragua For completeness: there are several libraries implementing some "beyond itertools" recipes: <code>toolz</code>, <code>cytoolz</code>, <code>pydash</code>, <code>more-itertools</code> (and probably many more).</span>
<span class="comment-copy">@daragua You're right. It is important... on large sets of data. Paying attention to readability and trying the simple or built in thing first is often a win, though, since much of our code operates on small enough sets that the differences don't really matter.</span>
<span class="comment-copy">@jpmc26 or when small details matter, for example the <code>remove_reversed_duplicates</code> or <code>unique_everseen</code> yields the items <i>as is</i> while all <code>map</code> and <code>set</code> approaches either need to convert them back (potentially losing data and/or order) or can only applied if the conditions are met. But I agree - if a simple one-liner will do: no need to engage the full-fledged generator-function or an external library. But especially libraries often already dealt with all these minor annoying issues and fixed them.</span>
<span class="comment-copy">This approach <i>may</i> randomly shuffle the remaining items because you convert it to a <code>set</code>. However the <code>frozenset</code> suggestion is pretty clever +1</span>
<span class="comment-copy">@Daerdemandt The OP states they are removing "duplicates." If the reverse is a "duplicate," they're equivalent and it doesn't matter. If the OP has requirements as off the wall as you describe, they've worded their question badly and need to specify details. Until I see an <i>explicit</i> requirement to preserve the properties you describe, the most reasonable conclusion from the wording is that such requirements don't exist.</span>
<span class="comment-copy">OP's examples show preserving both inner and general order. If code down the road was expecting set of sets, not lists of lists, then the problem wouldn't even be there in the first place. You should probably add a disclaimer that this code only works if OP s fine with <code>[[1,9], [2,2], [5,3]] -&gt; [[2], [9,1], [5,3]]</code>, because this assumption is what your answer is based on and this assumption does not automatically follow from the question.</span>
<span class="comment-copy">@Daerdemandt I think it's unlikely that the OP even <i>has</i> entries that contain the same number twice. If the OP clarifies on the issue and something needs to change, I will change it then. I've already responded to the order issue. If the OP needed this, they should have said so, and if they do say so, I will handle it then. I've listened to your feedback, and that's my decision. No further comments on it are needed or useful.</span>
<span class="comment-copy">@Daerdemandt Additionally, no, there's no definitive proof that my assertions are correct. There's also no definitive proof that they're incorrect. I think they are the most reasonable, most common sense way to understand what the OP is asking for. (The OP has unordered pairs and shows no example of relating an item to itself.) You're free to disagree, but harassing me because I don't agree with your interpretation is pointless.</span>
<span class="comment-copy">Nice solution but depends if order matters (because you're using <code>set</code>); you're assuming that the <code>sorted()</code> pair is one to <code>return</code>, which may not always be true</span>
<span class="comment-copy">The 3 pairs returned in the example are sorted, so I assumed it was okay. You're right, it could also be the first encountered pair, though.</span>
<span class="comment-copy">I like the <code>unique_everseen()</code> solution. Unique everseen is a very useful tool. One difference with other solutions is that it preserves the order of first appearance. Also the question was about a pythonic solution, and <code>unique_everseen()</code> is definitely pythonic!</span>
<span class="comment-copy">You can replace <code>lambda x: (min(x), max(x))</code> with <code>sorted</code> in this case.</span>
<span class="comment-copy">I can't use <code>sorted</code> straight in, I need to pass <code>lambda x: tuple(sorted(x))</code>: <code>unique_everseen</code> needs the "inner vectors" to be hashable. Using <code>sorted</code> adds overhead (see edit in message). Though if the inner vecs size was unknown <code>sorted</code> would be needed.</span>
