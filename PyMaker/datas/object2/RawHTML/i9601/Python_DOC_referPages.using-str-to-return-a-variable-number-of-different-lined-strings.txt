<div class="post-text" itemprop="text">
<p>I'm working on a project that creates "Facebook" in Python 3.x. The part I am currently stuck on is using the <strong>str</strong> function to return strings on different lines.</p>
<p>The code I am using for this is:</p>
<pre><code>class Status:
    likers = []
    commentObjs = []
    def __init__(self, statusPoster, statusMsg, likers, commentObjs):
        self.statuser = statusPoster
        self.status = statusMsg
        self.likers = likers
        self.commentObjs = commentObjs
</code></pre>
<p>and</p>
<pre><code>def __str__(self):
    return '%s: %s \n"hello"' %(self.statuser,self.status)

__repr__= __str__
</code></pre>
<p>The problem that I am running into is that there can be a variable number of likers and a variable number of commentObjs. </p>
<p>What would I have to implement to make it so if there is only one value such as: </p>
<pre><code>likers = ["Spongebob"] 
commentObjs = ["Spongebob: You should watch the Spongebob movie!"]
</code></pre>
<p>It returns in the terminal:</p>
<pre><code>Brad Pitt will watch a movie today!
Spongebob likes this.
Spongebob: You should watch The Spongebob movie!
</code></pre>
<p>But if there is more than one value in each list, such as:</p>
<pre><code>likers = ["Spongebob","Harry Potter"] 
commentObjs = ["Spongebob: You should watch the Spongebob movie!","Brad Pitt: How about nah?"]
</code></pre>
<p>It returns:</p>
<pre><code>Brad Pitt will watch a movie today!
Spongebob, Harry Potter likes this.
Spongebob: You should watch The Spongebob movie!
Brad Pitt: Nah, I will probably watch Mr and Mrs. Smith.
</code></pre>
<p>The only way I could think to possibly do this would be something with a for loop and <code>len(likers)</code>, but I don't know how I would be able to do that while still returning the constant values of the name and status.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are looking for <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join()</code></a> here. This lets you join several strings with a joining string between (which can be empty):</p>
<pre><code>&gt;&gt;&gt; likers = ['Spongebob', 'Harry Potter']
&gt;&gt;&gt; ', '.join(likers)
'Spongebob, Harry Potter'
&gt;&gt;&gt; ' -&gt; '.join(likers)
'Spongebob -&gt; Harry Potter'
</code></pre>
<p>You probably also want to learn about <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer"><code>str.format()</code></a> to interpolate values into a template string:</p>
<pre><code>def __str__(self):
    likers = ', '.join(self.likers)
    comments = '\n'.join(self.commentObjs)
    return '{} {}\n{} likes this.\n{}'.format(
        self.statuser, self.status, likers, comments)
</code></pre>
<p>This joins your <code>likers</code> value with commas, and the comments with newlines.</p>
<p>You should not use this as your <code>__repr__</code>; that should produce <em>debugging</em> output, helping you distinguish between two instances of your class, optionally with the contained values part of that output.</p>
</div>
<span class="comment-copy">I would strongly recommend not using that as your <code>__repr__</code>.</span>
<span class="comment-copy">We have not learned format, but I was able to implement the .join into my function and got it to work, thank you for your help and very fast reply :D #Upvoted!</span>
