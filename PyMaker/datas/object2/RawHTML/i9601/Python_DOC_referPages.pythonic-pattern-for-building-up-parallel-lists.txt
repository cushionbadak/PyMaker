<div class="post-text" itemprop="text">
<p>I am new-ish to Python and I am finding that I am writing the same pattern of code over and over again:</p>
<pre><code>def foo(list):
    results = []
    for n in list:
        #do some or a lot of processing on N and possibly other variables
        nprime = operation(n)
        results.append(nprime)
    return results
</code></pre>
<p>I am thinking in particular about the creation of the empty list followed by the <code>append</code> call.  Is there a more Pythonic way to express this pattern?  <code>append</code> might not have the best performance characteristics, but I am not sure how else I would approach it in Python.  </p>
<p>I often know exactly the length of my output, so calling <code>append</code> each time seems like it might be causing memory fragmentation, or performance problems, but I am also wondering if that is just my old <code>C</code> ways tripping me up.  I am writing a lot of text parsing code that isn't super performance sensitive on any particular loop or piece because all of the performance is really contained in <code>gensim</code> or <code>NLTK</code> code and is in much more capable hands than mine.</p>
<p>Is there a better/more pythonic pattern for doing this type of operation?</p>
</div>
<div class="post-text" itemprop="text">
<p>First, a list comprehension may be all you need (if all the processing mentioned in your comment occurs in <code>operation</code>.</p>
<pre><code>def foo(list):
    return [operation(n) for n in list]
</code></pre>
<hr/>
<p>If a list comprehension will not work in your situation, consider whether <code>foo</code> really needs to build the list and could be a generator instead.</p>
<pre><code>def foo(list):
    for n in list:
        # Processing...
        yield operation(n)
</code></pre>
<p>In this case, you can iterate over the sequence, and each value is calculated on demand:</p>
<pre><code>for x in foo(myList):
   ...
</code></pre>
<p>or you can let the caller decide if a full list is needed:</p>
<pre><code>results = list(foo())
</code></pre>
<hr/>
<p>If neither of the above is suitable, then building up the return list in the body of the loop as you are now is perfectly reasonable.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>[..] so calling <code>append</code> each time seems like it might be causing memory fragmentation, or performance problems, but I am also wondering if that is just my old C ways tripping me up. </p>
</blockquote>
<p>If you are worried about this, don't. Python over-allocates when a new resizing of the list is required (lists are dynamically resized based on their size) in order to perform <code>O(1)</code> appends. Either you manually call <code>list.append</code> or build it with a list comprehension (which internally <em>also</em> uses <code>.append</code>) the effect, memory wise, is similar. </p>
<p>The list-comprehension just performs (speed wise) a bit better; it is optimized for creating lists with specialized byte-code instructions that aid it (<code>LIST_APPEND</code> mainly that <em>directly</em> calls lists append in <code>C</code>).</p>
<p>Of course, if memory usage is of concern, you could always opt for the generator approach as highlighted in chepners answer to lazily produce your results.  </p>
<hr/>
<p>In the end, <code>for</code> loops are still great. They might seem clunky in comparison to comprehensions and <code>map</code>s but they still offer a recognizable and readable way to achieve a goal. <code>for</code> loops deserve our love too.</p>
</div>
<span class="comment-copy">Repeated appending is fine. Trying to preallocate your list, while possible, isn't likely to provide a substantial performance improvement, and might easily slow things down.</span>
<span class="comment-copy">Do you mean the extra processing precludes using a list comprehension <code>return [operation(n) for n in list]</code>?</span>
<span class="comment-copy">Depending on the amount of <code>some or a lot of processing</code>, <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehensions</a> or their cousins generator expressions can give a speed or memory benefit over the simple for loop. If <code>some or a lot of processing</code> is more than a line or two of code, however, the for loop definitely wins out on readability and maintainability.</span>
<span class="comment-copy">If the processing doesn't fit neatly into a list comprehension as @chepner suggests, your for loop method is the next best choice.</span>
<span class="comment-copy">The processing definitely doesn't fit into loop comprehension.</span>
<span class="comment-copy">I think there is definitely room in my code for more generators.  There are probably a number of places that would make my code read a little better and be better composed.  Thanks!  (I'll see what else comes in, but I think adding generators when appropriate is the answer I am looking for and will mark it as such)</span>
<span class="comment-copy">Not to mention that list comprehension requires the usage of a <code>for</code> :)</span>
