<div class="post-text" itemprop="text">
<p>The <a href="https://github.com/r1chardj0n3s/parse" rel="nofollow noreferrer">parse</a> module is a useful as an inverse of <code>format</code>. Its documentation mentions (referring to the <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language" rel="nofollow noreferrer">format specification mini-language</a>) that</p>
<blockquote>
<p>The align operators will cause spaces (or specified fill character) to be stripped from the parsed value. The width is not enforced; it just indicates there may be whitespace or "0"s to strip.</p>
</blockquote>
<p>I would like to do something like this, but I wasn't able to find any examples of how to get this to work. For example, in its normal operation, if I use a template <code>"{}{}"</code> to match <code>"ab"</code>, I get a <code>Result</code> object which contains <code>'a'</code> and <code>'b'</code>:</p>
<pre><code>In [1]: import parse

In [2]: parse.parse("{}{}","ab")
Out[2]: &lt;Result ('a', 'b') {}&gt;
</code></pre>
<p>However, if I put a space between <code>a</code> and <code>b</code> in the string, then that space alters the <code>Result</code>:</p>
<pre><code>In [3]: parse.parse("{}{}","a b")
Out[3]: &lt;Result ('a', ' b') {}&gt;
</code></pre>
<p>I would like the <code>parse.parse</code> method to ignore this space and still return <code>'a'</code> and <code>'b'</code>. Is this possible and if so, how can I do it?</p>
</div>
<div class="post-text" itemprop="text">
<p>You'd just need to replace {} with {<strong>:^</strong>} to parse format string.  Based on your examples, this worked based my testing.</p>
<blockquote>
<p>{:^} strips leading and trailing whitespace</p>
</blockquote>
<pre><code>In [1]: import parse

In [2]: parse.parse("{:^}{:^}","ab")
Out[2]: &lt;Result ('a', 'b') {}&gt;

In [3]: parse.parse("{:^}{:^}","a b")
Out[3]: &lt;Result ('a', 'b') {}&gt;

In [4]: parse.parse("{:^}{:^}","a    b"
Out[4]: &lt;Result ('a', 'b') {}&gt;    

In [5]: parse.parse("{:^}{:^}"," a  b ")
Out[5]: &lt;Result ('a', 'b') {}&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you scroll down in the <a href="https://github.com/r1chardj0n3s/parse" rel="nofollow noreferrer">documentation</a> you linked there are explicit examples:</p>
<blockquote>
<p>And messing about with alignment:</p>
</blockquote>
<pre><code>&gt;&gt;&gt; parse('with {:&gt;} herring', 'with     a herring')
&lt;Result ('a',) {}&gt;
&gt;&gt;&gt; parse('spam {:^} spam', 'spam    lovely     spam')
&lt;Result ('lovely',) {}&gt;
</code></pre>
<blockquote>
<p>Note that the "center" alignment does not test to make sure the value
  is centered - it just strips leading and trailing whitespace.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Specifying a string length (and the space between the values) seems to work:</p>
<pre><code>import parse

result = parse.parse("{1s} {1s}","a b")
print(result)  # -&gt; &lt;Result ('a', 'b') {}&gt;
</code></pre>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/761804/trimming-a-string-in-python" title="trimming a string in python">stackoverflow.com/questions/761804/trimming-a-string-in-python</a></span>
<span class="comment-copy">That post is about removing leading and trailing spaces with <code>strip()</code>, but I'm interested also in ignoring spaces in the middle of the template, as well as in a solution which uses <code>parse</code>.</span>
<span class="comment-copy">try with <code>.replace()</code> <a href="https://www.tutorialspoint.com/python/string_replace.htm" rel="nofollow noreferrer">tutorialspoint.com/python/string_replace.htm</a></span>
