<div class="post-text" itemprop="text">
<pre><code>def positive(self):
    total = {}
    final = {}
    for word in envir:
        for i in self.lst:
            if word in i:
                if word in total:
                    total[word] += 1
                else:
                    total[word] = 1
    final = sorted(total, reverse = True)

    return total
</code></pre>
<p>This returns</p>
<pre><code>{'climate': 10, 'ecosystem': 1, 'energy': 6, 'human': 1, 'world': 2, 'renewable': 2, 'native': 2}
</code></pre>
<p>I want to get this dictionary back to a dictionary that is in order. How do you I sort it and return a dictionary?</p>
</div>
<div class="post-text" itemprop="text">
<p>An ordered dictionary would get you what you need</p>
<pre><code>from collections import OrderedDict
</code></pre>
<p>If you want to order your items in lexicographic order, then do the following</p>
<pre><code>d1 = {'climate': 10, 'ecosystem': 1, 'energy': 6, 'human': 1, 'world': 2, 'renewable': 2, 'native': 2}
od = OrderedDict(sorted(d1.items(), key=lambda t: t[0]))
</code></pre>
<p>Contents of <code>od</code>:</p>
<pre><code>OrderedDict([('climate', 10),
             ('ecosystem', 1),
             ('energy', 6),
             ('human', 1),
             ('native', 2),
             ('renewable', 2),
             ('world', 2)])
</code></pre>
<p>If  you want to specify exactly which order you want your dictionary, then store them as tuples and store them in that order.</p>
<pre><code>t1 = [('climate',10), ('ecosystem', 1), ('energy',6), ('human', 1), ('world', 2), ('renewable', 2), ('native', 2)]
od = OrderedDict()

for (key, value) in t1:
    od[key] = value 
</code></pre>
<p><code>od</code> is now</p>
<pre><code>OrderedDict([('climate', 10),
             ('ecosystem', 1),
             ('energy', 6),
             ('human', 1),
             ('world', 2),
             ('renewable', 2),
             ('native', 2)])
</code></pre>
<p>In use, it is just like a normal dictionary, but with its internal contents' order specified.</p>
</div>
<div class="post-text" itemprop="text">
<p>Dictionaries in Python have no explicit order (except in 3.6). There is no property of 'order' in a hash table. To preserve order in Python, use a list of tuples:</p>
<p><code>unordered = (('climate', 10,), ('ecosystem', 1))  # etc
</code></p>
<p>Calling <code>sorted(unordered)</code> on the above will give it back with the 'key' being the first item in each individual tuple. You do not need to provide any other arguments to <code>sorted()</code> in this case.</p>
<p>To iterate, use <code>for x, y in z:</code> where <code>z</code> is the list.</p>
</div>
<span class="comment-copy">Why do you want to sort a dictionary? You can't sort a dictionary.</span>
<span class="comment-copy">Use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>collections.OrderedDict</code></a>,  I thnk in Python 3.6 <i>normal</i> dictionaries become ordered.</span>
<span class="comment-copy">Did you want to return final?</span>
<span class="comment-copy">Python does in fact have an OrderedDict. However it can't be sorted by arbitrary function, it only retains its original insertion order. A more complicated related question: <a href="https://stackoverflow.com/questions/8031418/how-to-sort-ordereddict-in-ordereddict-python">How to sort OrderedDict in OrderedDict - Python</a>?</span>
<span class="comment-copy">Related: @JacquesdeHooge's answer to <a href="https://stackoverflow.com/posts/38796446/revisions">Sorting OrderedDict not working</a></span>
<span class="comment-copy">The OP is clearly looking for <code>collections.OrderedDict</code>. Telling them that <code>dict</code> doesn't support key order isn't helpful.</span>
