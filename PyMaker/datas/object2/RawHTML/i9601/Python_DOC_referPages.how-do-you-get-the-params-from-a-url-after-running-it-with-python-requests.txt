<div class="post-text" itemprop="text">
<p>I know how to do it with a current URL e.g.</p>
<pre><code>&gt;&gt;&gt; payload = {'key1': 'value1', 'key2': ['value2', 'value3']}

&gt;&gt;&gt; r = requests.get('http://httpbin.org/get', params=payload)
&gt;&gt;&gt; print(r.url)
</code></pre>
<p>But what about if after you visit a URL, such as one with OAuth, for example</p>
<pre><code>authorize_url = facebook.get_authorize_url(**params)
requests.get(authorized_url)
</code></pre>
<p>The URL will then direct to one such as <code>https://localhost:5000/authorized?code=AQCvF</code>. How do I get the <code>code=AQCvF</code>?</p>
<p>I could probably do something like, get the address of the current browser and then parse the URL, but is there a cleaner way?</p>
<hr/>
<p>Complete code is below:</p>
<p><strong>index.j2</strong></p>
<pre><code>&lt;p&gt;&lt;a href="/facebook-login"&gt;Login with Facebook&lt;/a&gt;&lt;/p&gt;
</code></pre>
<p><strong>routes.py</strong></p>
<pre><code>app.add_route('/facebook-login', LoginHandler('index.j2'))
app.add_route('/authorized', AuthorizedHandler('index.j2'))
</code></pre>
<p><strong>handlers.py</strong></p>
<pre><code>from rauth.service import OAuth2Service
import requests
import os

# rauth OAuth 2.0 service wrapper
graph_url = 'https://graph.facebook.com/'
facebook = OAuth2Service(name='facebook',
                         authorize_url='https://www.facebook.com/dialog/oauth',
                         access_token_url=graph_url + 'oauth/access_token',
                         client_id=FB_CLIENT_ID,
                         client_secret=FB_CLIENT_SECRET,
                         base_url=graph_url)


class AuthorizedHandler(TemplateHandler):

    def on_get(self, req, res):
        code = self.requests.get['code']
        data = dict(code=code, redirect_uri=REDIRECT_URI)
        session = facebook.get_auth_session(data=data)

        # response
        me = session.get('me').json()
        print('me', me)

        UserController.create(me['username'], me['id'])


class LoginHandler(TemplateHandler):

    async def on_get(self, req, res):
        # visit URL and client authorizes
        params = {'response_type': 'code',
                  'redirect_uri': REDIRECT_URI}

        webbrowser.open(facebook.get_authorize_url(**params))

        response = requests.get(facebook.get_authorize_url(**params))
        print(response.url)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can get the <a href="http://docs.python-requests.org/en/master/api/#requests.Response.url" rel="nofollow noreferrer"><code>.url</code> attribute from the <code>Response</code> object</a> - this would be the <em>final</em> response URL:</p>
<pre><code>response = requests.get(authorized_url)
print(response.url)
</code></pre>
<p>Then, you can <a href="https://docs.python.org/3/library/urllib.parse.html" rel="nofollow noreferrer"><code>urlparse</code></a> the url to extract the GET parameters:</p>
<pre><code>In [1]: from urllib.parse import parse_qs, urlparse

In [2]: url = "https://localhost:5000/authorized?code=AQCvF"

In [3]: parse_qs(urlparse(url).query)
Out[3]: {'code': ['AQCvF']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your code would work fine if you were using a synchronous Python framework, but it appears you are using an async framework, as implied by the <code>async def on_get(self, req, res)</code>.</p>
<p>You will either have to write an async HTTP request function, use aiohttp.web, or your framework might have one built in and you can replace <code>requests.get(facebook.get_authorize_url(**params))</code> with <code>res.redirect(facebook.get_authorize_url(**params))</code>.</p>
</div>
<span class="comment-copy">That seems completely logical to me! Unfortunately, the response that response.url is returning is my <code>REDIRECT_URI</code> which is in this case <code>https://www.facebook.com/connect/login_success.html</code> and not the URL with the <code>code</code> param I'm looking for.</span>
<span class="comment-copy">On the other hand, the correct URL will appear in the address bar when I add <code>webbrowser.open(authorized_url)</code></span>
<span class="comment-copy">@Adrienne gotcha, could you please provide your complete code so far? I suspect it might be that you need a real browser to get to the redirection chain finale, want to test it. Thanks!</span>
<span class="comment-copy">Sure, just appended it! Yeah, that is what I am also suspecting.</span>
<span class="comment-copy">I suspect the lack of redirection has something to do with needing a Session that stores a cookie. But the rauth documentation suggests we can obtain the code param from the URL and pass it into the session, which seems contradictory (<a href="https://rauth.readthedocs.io/en/latest/" rel="nofollow noreferrer">rauth.readthedocs.io/en/latest</a>) <code># the code should be returned upon the redirect from the authorize step, # be sure to use it here (hint: it's in the URL!) session = facebook.get_auth_session(data={'code': 'foo',                                            'redirect_uri': redirect_uri})</code></span>
<span class="comment-copy">Oh, good observation, thanks for sharing!</span>
