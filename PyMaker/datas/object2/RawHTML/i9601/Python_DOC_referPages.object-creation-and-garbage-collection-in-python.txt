<div class="post-text" itemprop="text">
<p>Please go through the below code and explain me how I am able to achieve the output for the code which I have shared:</p>
<pre><code>class Customer:
    pass

c1=Customer()
print(c1)
print(Customer())
print(Customer(),Customer())
print(c1,Customer())
print(Customer())
print(Customer())
</code></pre>
<p>Output:</p>
<pre><code>&lt;__main__.Customer object at 0x0172FA90&gt;
&lt;__main__.Customer object at 0x0172FAB0&gt;
&lt;__main__.Customer object at 0x0172FAB0&gt; &lt;__main__.Customer object at  0x0172FB10&gt;
&lt;__main__.Customer object at 0x0172FA90&gt; &lt;__main__.Customer object at  0x0172FAB0&gt;
&lt;__main__.Customer object at 0x0172FAB0&gt;
&lt;__main__.Customer object at 0x0172FAB0&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The allocation for the objects just happens to use the same memory location, this isn't something that isn't allowed.</p>
<p>Since you create instances which immediately get collected due to no references existing for them, chances are that Python has the opportunity to re-use the same memory which results in some of them having the same address, see in the <a href="https://docs.python.org/3/library/functions.html#id" rel="nofollow noreferrer">documentation for the <code>id()</code> function</a>:</p>
<blockquote>
<p>Return the “identity” of an object. This is an integer which is guaranteed to be unique and constant for this object during its lifetime. <em>Two objects with non-overlapping lifetimes may have the same <code>id()</code> value</em>.</p>
</blockquote>
<p><sup>(emphasis mine)</sup></p>
</div>
