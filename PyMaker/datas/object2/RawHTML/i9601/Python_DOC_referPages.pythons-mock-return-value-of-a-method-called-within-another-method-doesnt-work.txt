<div class="post-text" itemprop="text">
<p>I would like to mock a method for unit testing like this:</p>
<p><strong>get_tree_test.py</strong></p>
<pre><code>from company.marketing_tree import get_tree

class MidNightTests(TestCase):
 @mock.patch("company.analytics.get_fb_data", autospec=True)
    def test_first_midnight(self, mock_fb_data):
        mock_fb_data.return_value = {}
        get_tree()
</code></pre>
<p><strong>get_tree.py</strong></p>
<pre><code>from company.analytics import get_fb_data

def get_tree():
    executor = ThreadPoolExecutor(max_workers=2)
    data_caller = executor.submit(get_data)
    info_caller = executor.submit(get_info)

def get_data():
    executor = ThreadPoolExecutor(max_workers=2)
    first_data = exeuctor.submit(get_fb_data)
</code></pre>
<p>I do see that <code>mock_fb_data.return_value = {}</code> is created as a mock object, but when I debug <code>get_data()</code> method I see that get_fb_data is a function and not a mock</p>
<p>What am I missing?      </p>
</div>
<div class="post-text" itemprop="text">
<p>You need to patch the right place. Inside <code>get_tree</code>, you created a global name <code>get_fb_data</code>, which the code uses directly:</p>
<pre><code>from company.analytics import get_fb_data
</code></pre>
<p>You need to patch <em>that name</em>, not the original <code>company.analytics.get_fb_data</code> name; patching works by replacing a name to point to the mock instead:</p>
<pre><code>class MidNightTests(TestCase):
    @mock.patch("get_tree.get_fb_data", autospec=True)
    def test_first_midnight(self, mock_fb_data):
        mock_fb_data.return_value = {}
        get_tree()
</code></pre>
<p>See the <a href="https://docs.python.org/3/library/unittest.mock.html#where-to-patch" rel="nofollow noreferrer"><em>Where to patch</em> section</a> of the <code>unittest.mock</code> documentation.</p>
</div>
<span class="comment-copy">Thanks so much!</span>
