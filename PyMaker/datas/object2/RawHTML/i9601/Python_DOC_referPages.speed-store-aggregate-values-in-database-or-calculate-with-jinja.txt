<div class="post-text" itemprop="text">
<p>Language: Python</p>
<p>Database: SQLite</p>
<p>Using: Flask, SQLAlchemy ORM</p>
<hr/>
<p>My question itself is probably an overkill, but I'm very curious.</p>
<p>I have columns in an SQLAlchemy <code>Table</code> that hold certain values that I need to perform mathematical operations on, to display aggregate values or calculated values. </p>
<p>Let's assume:</p>
<p><strong>Column 1</strong>: 0</p>
<p><strong>Column 2</strong>: 5</p>
<p><strong>Column 3</strong>: 2</p>
<p><strong>Column 4</strong>: 6</p>
<p>In an HTML table, I need to rely on those values to calculate and display a result of an arithmetic operation on them.</p>
<p>Example: ( <code>Column 1</code> + <code>Column 2</code> + <code>Column 3</code> / <code>Column 6</code> ) * <code>100</code></p>
<p>Do I calculate those numbers and store them in a new column in my SQLite database (using SQLAlchemy), or calculate them on the fly using <a href="http://jinja.pocoo.org/docs/dev/templates/#math" rel="nofollow noreferrer">Jinja2</a>?</p>
</div>
<div class="post-text" itemprop="text">
<p>There is really no single correction solution for any optimization problem. You will have to find out the optimal solution through testing. Your case is an optimization for time (speed), hence we should look at memory (the trade off) or how data is persisted and accessed. Here are the layers where your data passes through:</p>
<p>Disk -&gt; SQLite Driver -&gt; Python SQLite DBAPI -&gt; SQLAlchemy -&gt; Jinja</p>
<p>Excluding the disk (since your choice of database doesn't really have tricks in dealing with physical storage optimizations - it's a single file after all) and excluding the DBAPI layer (it's good as integrated with SQLAlchemy and you don't have much of a choice between DBAPI drivers for SQLite), here are the possible ways for you to calculate a column in each layer:</p>
<ol>
<li><p>SQLite Driver - You can <a href="https://sqlite.org/lang_createview.html" rel="nofollow noreferrer">create a view</a> in SQLite for the calculated column</p>
<ul>
<li>A view is seen by the upper layers as if it's a table</li>
<li>Can change the upper layers and yet maintain the same definition</li>
<li>Cannot modify the calculation dynamically without resorting to dropping and recreating the view</li>
<li>Cannot <a href="https://en.wikipedia.org/wiki/Memoization" rel="nofollow noreferrer">memoize</a> the calculation yet</li>
<li>Views are read-only - bit pointless to build an ORM wrapper around it</li>
</ul>
<pre>
CREATE VIEW view_name (
    column_1,
    column_2,
    column_3_you_can_rename_columns_here,
    column_6,
    column_X)
AS SELECT
    column_1,
    column_2,
    column_3,
    column_6,
    (column_1 + column_2 + column_3 / column_6) * 100.0
FROM table_name
</pre></li>
<li><p>SQAlchemy - A calculated column can be added to your Table class definition</p>
<ul>
<li>Option available to persist/save the calculated value as an actual column in the database</li>
<li>Can dynamically change the calculation as it's in the Python layer</li>
<li>Can memoize the calculation</li>
<li>For a persisted calculated column, see: <a href="https://stackoverflow.com/a/4284191/1027422">https://stackoverflow.com/a/4284191/1027422</a></li>
<li>For a simple Python-only (not saved to DB) calculated column, see: <a href="http://docs.sqlalchemy.org/en/latest/orm/mapped_sql_expr.html" rel="nofollow noreferrer">http://docs.sqlalchemy.org/en/latest/orm/mapped_sql_expr.html</a></li>
<li>How to cache or memoize calculations, see lru_cache section of <a href="https://docs.python.org/3/library/functools.html" rel="nofollow noreferrer">https://docs.python.org/3/library/functools.html</a> </li>
</ul></li>
<li><p>Jinja - Calculations can also be done in Jinja</p>
<ul>
<li>Calculations done at this layer is not readily passed to previous layers - difficult to persist to database</li>
<li>May not be the most efficient</li>
</ul></li>
</ol>
<p>From experience, you will often get best results by pre-calculating at the database level since calculations are done as data is fetched from the disk to memory in one pass. However, your choice of database limits your option to mostly doing the optimizations at Python level. You need to test which approach is optimal for your use case by using <a href="https://docs.python.org/2/library/timeit.html" rel="nofollow noreferrer">timeit</a>.</p>
<p>Memoization may not be of help to you unless your data (input columns) have frequently repeating values. Do be aware though that <a href="http://slides.com/pythonph/pyconph-2015-root-of-all-evil#/25" rel="nofollow noreferrer">premature optimization is the root of all evil</a>.</p>
</div>
<span class="comment-copy">I would use Jinja2 to calculate it, or store the results in a cache</span>
<span class="comment-copy">Very interesting. I know what's a cache (I think), but how would a cache work in Python/Flask program?</span>
<span class="comment-copy">It will work similar to a hashtable. First you calculate the value, then you store it in the cache same way you use a hashtable and then you can perform lookups by key-value pairs. You can google for memcache and add it to your project.</span>
<span class="comment-copy">What a wonderful answer, thank you!. Just a follow up on your experience: it sounds like the simpler and better solution to me, but I have gotten advice like: "redundancy is bad".</span>
