<div class="post-text" itemprop="text">
<p>Iam using this program to measure time taken by two funcitons along with the memory requirements of the two functions and compare which is the best for the situatio when large data is used. But for using the memory computations we need mem_profile module but during the <code>pip install mem_profile</code>  it gave me error <code>No module named mem_profile</code>.   </p>
<pre><code>import mem_profile
import random
import time

names = ['Kiran','King','John','Corey']
majors = ['Math','Comps','Science']

print 'Memory (Before): {}Mb'.format(mem_profile.memory_usage_resource())

def people_list(num_people):
    results = []
    for i in num_people:
        person = {
                    'id':i,
                    'name': random.choice(names),
                    'major':random.choice(majors)
                  }
        results.append(person)
    return results

def people_generator(num_people):
    for i in xrange(num_people):
        person = {
                    'id':i,
                    'name': random.choice(names),
                    'major':random.choice(majors)
                  }
        yield person

t1 = time.clock()
people = people_list(10000000)
t2 = time.clock()


# t1 = time.clock()
# people = people_generator(10000000)
# t2 = time.clock()

print 'Memory (After): {}Mb'.format(mem_profile.memory_usage_resource())
print 'Took {} Seconds'.format(t2-t1)
</code></pre>
<p>Any alternative packages i can use here.Please help.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use this for calculating time:</p>
<pre><code>import time

time_start = time.clock()
#run your code
time_elapsed = (time.clock() - time_start)
</code></pre>
<p>As referenced by the Python documentation:</p>
<blockquote>
<p><strong>time.clock()</strong></p>
<p>On Unix, return the current processor time as a floating
  point number expressed in seconds. The precision, and in fact the very
  definition of the meaning of “processor time”, depends on that of the
  C function of the same name, but in any case, this is the function to
  use for benchmarking Python or timing algorithms.</p>
<p>On Windows, this function returns wall-clock seconds elapsed since the
  first call to this function, as a floating point number, based on the
  Win32 function QueryPerformanceCounter(). The resolution is typically
  better than one microsecond.</p>
</blockquote>
<p><strong>Reference</strong>: <a href="http://docs.python.org/library/time.html" rel="nofollow noreferrer">http://docs.python.org/library/time.html</a></p>
<hr/>
<p>Use this for calculating memory:</p>
<pre><code>import resource

resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
</code></pre>
<p><strong>Reference</strong>: <a href="http://docs.python.org/library/resource.html" rel="nofollow noreferrer">http://docs.python.org/library/resource.html</a></p>
<p>Use this if you using python 3.x:</p>
<p><strong>Reference</strong>:  <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer">https://docs.python.org/3/library/timeit.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>1)First import module</p>
<pre><code>pip install memory_profiler
</code></pre>
<p>2)include it in your code like this</p>
<pre><code>import memory_profiler as mem_profile
</code></pre>
<p>3)change code </p>
<p><code>mem_profile.memory_usage_psutil()</code> to <code>memory_usage()</code></p>
<p>4)convert you print statements like this</p>
<pre><code>print('Memory (Before): ' + str(mem_profile.memory_usage()) + 'MB' )
print('Memory (After) : ' + str(mem_profile.memory_usage()) + 'MB')
print ('Took ' + str(t2-t1) + ' Seconds')
</code></pre>
<p>5)you will have something like this code:</p>
<pre><code>import memory_profiler as mem_profile
import random
import time

names = ['John', 'Corey', 'Adam', 'Steve', 'Rick', 'Thomas']
majors = ['Math', 'Engineering', 'CompSci', 'Arts', 'Business']

# print('Memory (Before): {}Mb '.format(mem_profile.memory_usage_psutil()))
print('Memory (Before): ' + str(mem_profile.memory_usage()) + 'MB' )

def people_list(num_people):
    result = []
    for i in range(num_people):
        person = {
                    'id': i,
                    'name': random.choice(names),
                    'major': random.choice(majors)
                }
        result.append(person)
    return result

def people_generator(num_people):
    for i in range(num_people):
        person = {
                    'id': i,
                    'name': random.choice(names),
                    'major': random.choice(majors)
                }
        yield person

# t1 = time.clock()
# people = people_list(1000000)
# t2 = time.clock()

t1 = time.clock()
people = people_generator(1000000)
t2 = time.clock()

# print 'Memory (After) : {}Mb'.format(mem_profile.memory_usage_psutil())
print('Memory (After) : ' + str(mem_profile.memory_usage()) + 'MB')

# print 'Took {} Seconds'.format(t2-t1)
print ('Took ' + str(t2-t1) + ' Seconds')
</code></pre>
<p>Now it work fine i m using python 3.6 and its working without any error.</p>
</div>
<div class="post-text" itemprop="text">
<p>Was going through the same tutorial and encountered the same problem. But upon further research, I discovered the author of the tutorial used a package called memory_profiler, main file of which he changed to mem_profile. that he imported in the code tutorial.</p>
<p>Just go ahead and do <strong>pip install memory_profiler</strong> . Copy and rename the file to mem_profile.py in your working directory and you should be fine. if you are on Windows, make sure you install the dependent psutil package as well.</p>
<p>Hope this helps somebody</p>
</div>
<div class="post-text" itemprop="text">
<p>Adding to <em><a href="https://stackoverflow.com/users/7346745/adebayo-ibro">Adebayo Ibro</a></em>'s answer above. Do the following :</p>
<ul>
<li>In terminal, run <code>$ pip install memory_profiler</code></li>
<li>In your script, replace <code>import mem_profile</code> with <code>import memory_profiler as mem_profile</code></li>
<li>In your script, replace <strong>all</strong> <code>mem_profile.memory_usage_resource()</code> with <code>mem_profile.memory_usage()</code>.</li>
</ul>
<p>Hope this helps! </p>
</div>
<div class="post-text" itemprop="text">
<p>That module is hand written (not in python packages).
I got this from Corey Schafer's comment in his youtube video.
Just save this code as the module's name:</p>
<pre><code>from pympler import summary, muppy
import psutil
import resource
import os
import sys

def memory_usage_psutil():
    # return the memory usage in MB
    process = psutil.Process(os.getpid())
    mem = process.get_memory_info()[0] / float(2 ** 20)
    return mem

def memory_usage_resource():
    rusage_denom = 1024.
    if sys.platform == 'darwin':
        # ... it seems that in OSX the output is different units ...
        rusage_denom = rusage_denom * rusage_denom
    mem = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss / rusage_denom
    return mem
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I just encountered the same problem. I solved it installing <code>memory_profiler</code> (<code>$ pip install -U memory_profiler</code>), and them modify the program as follows:</p>
<pre><code>import memory_profiler
...
print('Memory (Before): {}Mb'.format(memory_profiler.memory_usage()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Much simple with sys</p>
<pre><code>    import sys
    ...
    print ('Memory (Before): {0}Mb'.format(sys.getsizeof([])))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>during the pip install mem_profile it gave me error No module named mem_profile.</p>
</blockquote>
<p>by default, pip will download packages from PyPI.  No package exists on PyPI named "mem_profile", so of course you will get an error.</p>
<hr/>
<p>for timing blocks of code, the <code>timeit</code> module is what you want to use:
<a href="https://docs.python.org/library/timeit.html" rel="nofollow noreferrer">https://docs.python.org/library/timeit.html</a></p>
</div>
<span class="comment-copy">Don't use other code ASIS. This is sourec code of "Corey Schafer". Show some courtesy and write name and copied from</span>
<span class="comment-copy">don't use time.clock().  it is misleading and also deprecated.  The reference you quoted is outdated and has been updated in newer versions of python3 documentation</span>
<span class="comment-copy">Are you talking about <a href="https://docs.python.org/3/library/time.html#time.clock" rel="nofollow noreferrer">this</a>. @CoreyGoldberg</span>
<span class="comment-copy">I don't have much experience in python as of now i'm working on python 2.7 so i found solution on the basis of that. i agree with you @CoreyGoldberg when using python 3.x.</span>
<span class="comment-copy">yes that.  time.clock() also has different behavior on Windows vs other platforms.  I suggest removing this answer</span>
<span class="comment-copy">this answer provides bad advice for timing code, no matter which version of python you are using</span>
<span class="comment-copy">Try to write code / commands under code blocks or `` for inline snippets</span>
