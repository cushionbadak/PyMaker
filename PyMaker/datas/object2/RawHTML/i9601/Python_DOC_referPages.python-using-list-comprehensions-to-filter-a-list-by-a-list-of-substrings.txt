<div class="post-text" itemprop="text">
<p>I think this is a simple question, so I'll just go straight to an example.</p>
<p>Given these two lists:</p>
<pre><code>x = ['a', 'ab', 'abc', 'bc', 'c', 'ac']
y = ['a', 'b']
</code></pre>
<p>How do I write a list comprehension to filter list x in such a way that the result would be:</p>
<pre><code>result = ['c']
</code></pre>
<p>I want a list comprehension that excludes any partial matches of the strings in y to the strings in x.  For example, 'a' in y would match 'a', 'ab', 'abc', and 'ac' in x.</p>
<p>This comprehension only matches entire strings: <code>result = [r for r in x if r not in y]</code></p>
<p>If this has already been asked I'll gladly accept a link to a previous answer.  That said, I haven't found one on SO yet.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/functions.html#all" rel="noreferrer">all</a>:</p>
<pre><code>result = [r for r in x if all(z not in r for z in y)]
</code></pre>
<p>Or <a href="https://docs.python.org/3/library/functions.html#any" rel="noreferrer">any</a>:</p>
<pre><code>result = [r for r in x if not any(z in r for z in y)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a job for the <a href="https://docs.python.org/2.7/library/functions.html?highlight=any#any" rel="nofollow noreferrer"><code>any</code></a> built-in.</p>
<pre><code>&gt;&gt;&gt; x = ['a', 'ab', 'abc', 'bc', 'c', 'ac']
&gt;&gt;&gt; y = ['a', 'b']
&gt;&gt;&gt; [r for r in x if not any(s in r for s in y)]
['c']
</code></pre>
<p><code>s in r</code> does the partial match you want, <code>for s in y</code> checks all elements of <code>y</code>, and <code>any</code> is true if there was <em>any</em> match.  Then we just invert it.</p>
<p>This is quadratic, O(<code>len(x) * len(y)</code>).  If <code>y</code> is long, it may be more efficient to synthesize a regexp:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; yy = re.compile("|".join(re.escape(s) for s in y))
&gt;&gt;&gt; [r for r in x if not yy.search(r)]
['c']
</code></pre>
<p>which <em>should</em> be merely O(<code>len(x) + len(y)</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>It depends on the length of your <code>y</code> what the best approach is, if it contains a lot of elements I would convert it to a set and check if any item in x has an intersection (one common character) with it:</p>
<pre><code>y = set(y)
[item for item in x if not y.intersection(item)]
</code></pre>
</div>
<span class="comment-copy">This was it!  I had an any statement, but what would be the z and r variables in your example were reversed.  Bonus: I just learned about 'all'. Thanks!</span>
<span class="comment-copy">This assumes <code>y</code> only contains strings of length 1, which is the case in the example but wasn't specified.</span>
<span class="comment-copy">Yes, if it contains more characters this would definitly fail to work, maybe I took the OPs example to literally. But on the other hand if <code>y</code> only contains single letters it's much faster. :-)</span>
<span class="comment-copy">Yep, in my actual project this is being used to filter a list of urls by substrings.</span>
