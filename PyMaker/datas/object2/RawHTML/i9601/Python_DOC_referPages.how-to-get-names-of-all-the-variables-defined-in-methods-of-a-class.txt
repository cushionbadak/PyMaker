<div class="post-text" itemprop="text">
<p>I have the following class:</p>
<pre><code>class Foo(object):
    def setUp(self):
        self.var1 = "some value"
        self.var2 = something
    def bar(self):
        var3 = some value
    def baz(self, var):
        var4 = some value
</code></pre>
<p>I want to print the names of all variables defined inside the methods, like:</p>
<pre><code>setUp, bar, baz, var1, var2, var3, var4
</code></pre>
<p>I have tried using <code>locals(), vars(), globals()</code> but I am getting only the names of method and not variable names.</p>
<p>I also tried using <code>ast</code> module, but no success.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>class Foo(object):
    def setUp(self):
        self.var1 = "some value"
        self.var2 = "something"
    def bar(self):
        var3 = "some value"
    def baz(self, var):
        var5 = 34


print Foo.setUp.__code__.co_varnames
print Foo.bar.__code__.co_varnames
print Foo.baz.__code__.co_varnames
Output:
('self',)
('self', 'var3')
('self', 'var', 'var5')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Can't comment yet (not enough reputation), but this looks like a duplicate of <a href="https://stackoverflow.com/questions/11637293/iterate-over-object-attributes-in-python">Iterate over object attributes in python</a>. </p>
<p>Try this: </p>
<pre><code>print([a for a in dir(obj) if not a.startswith('__') and not callable(getattr(obj,a))])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3.5/library/ast.html#ast.parse" rel="nofollow noreferrer"><code>ast.parse</code></a> to generate AST node. Then <a href="https://docs.python.org/3.5/library/ast.html#ast.parse" rel="nofollow noreferrer"><code>ast.walk</code></a> can be used to recursively iterate over the node and its` descendants. For each node you can check the type and then extract the correct attribute. </p>
<p>Below is an example that is working with your code but don't expect it to work as such with more complex files:</p>
<pre><code>source = '''
class Foo(object):
    def setUp(self):
        self.var1 = "some value"
        self.var2 = 1
    def bar(self):
        var3 = 2
    def baz(self, var):
        var4 = var
'''

import ast

def hack(source):
    root = ast.parse(source)

    for node in ast.walk(root):
        if isinstance(node, ast.Name) and isinstance(node.ctx, ast.Store):
            yield node.id
        elif isinstance(node, ast.Attribute):
            yield node.attr
        elif isinstance(node, ast.FunctionDef):
            yield node.name

print(list(hack(source)))
</code></pre>
<p>Output:</p>
<pre><code>['setUp', 'bar', 'baz', 'var1', 'var2', 'var3', 'var4']
</code></pre>
</div>
<span class="comment-copy">Is there any reason you really need this information?</span>
<span class="comment-copy">By mistake, I have given some wrong variable names and now I want to verify them.. my script is quite large, so its difficult to manually search for all variable names</span>
<span class="comment-copy">@abhayj Can't you declare the variables in <code>__init__</code>?</span>
<span class="comment-copy">@MarounMaroun No, I cannot declare all the variables in <b>init</b></span>
<span class="comment-copy">Are there any more attributes like 'co_varnames' that I can access? it is giving all variable names except variable names in setUp function.</span>
<span class="comment-copy">yes, explore here <a href="https://docs.python.org/2.7/library/inspect.html" rel="nofollow noreferrer">docs.python.org/2.7/library/inspect.html</a></span>
<span class="comment-copy">Thank you very much.. this link is very helpful</span>
<span class="comment-copy">It's pretty impressive! It's just a random question, but I wonder where did you learn all of these. Did you learn it by inspecting ast module on your own? or can you recommend me a good material?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/ast.html" rel="nofollow noreferrer">Python documentation</a> is really good but nothing beats playing around with the shell.</span>
