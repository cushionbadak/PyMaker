<div class="post-text" itemprop="text">
<pre><code>input_shape = tuple([i for i in input_shape if i is not None])
</code></pre>
<p>I am new to python and don't understand what's happening there.
As I see it is possible to be some analog of <code>C</code>'s <code>int a = 5 &gt; 2 ? val1 : val2;</code>, but I can't figure it out.</p>
<p>I tried to separate it on small parts to understand, but it still makes no sense for me.
Like that:</p>
<pre><code>i // this is already wrong for being single
for i in input_shape //that's correct for cicle
    if i is not None //ugh... so, and what if?
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You were almost there with your separation. The inner part (what if) is the expression you noted being wrong (<code>i</code>), it actually goes inside. And what it does with it is expressed by being inside brackets <code>[]</code>; it puts those things in a list. spectras' answer shows how this works using a variable to hold that list. The construct is called a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Items that fail the test (that are None here) will be skipped by the loop.</p>
<pre><code>input_shape = tuple([i for i in input_shape if i is not None])

# Roughly equivalent to    

result = []
for i in input_shape:
    if i is not None:
        result.append(i)
input_shape = tuple(result)
</code></pre>
<p>Conceptually the same, except the list comprehension will be faster as the looping is done internally by the interpreter. Also, it will not leave a <code>result</code> variable around, obviously.</p>
</div>
<div class="post-text" itemprop="text">
<p>the <code>i for i</code> part can be anything, <code>x for x</code>, <code>y for y</code>, or even <code>Kosmos for Kosmos</code>.</p>
<pre><code>&gt;&gt;&gt; input_shape = [1, 2, 3]
&gt;&gt;&gt; input_shape = tuple([i for i in input_shape if i is not None])
&gt;&gt;&gt; input_shape
(1, 2, 3)
</code></pre>
<p>Here you can see, it converted my list to a tuple by looping over each item.</p>
<p>Look into a thing called list comprehension, as I am having a tough time explaining it</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>input_shape = [1,2,3,None,5,1]
print(input_shape)
input_shape = tuple([i for i in input_shape if i is not None])
print(input_shape)
</code></pre>
<p>o/p</p>
<pre><code>[1, 2, 3, None, 5, 1]
(1, 2, 3, 5, 1)
</code></pre>
<p>as @spectras pointed, Items that fail the test (that are None here) will be skipped by the loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>The following is a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>:</p>
<pre><code>[i for i in input_shape if i is not None]
</code></pre>
<p>It returns only elements that are not <code>None</code></p>
<p>Then, you call <code>tuple()</code> to convert the resulted list to tuple.</p>
<p>You can achieve the same result by using an ordinary <code>for</code> loop like below:</p>
<pre><code>input_shape = [1, 2, None, 'a', 'b', None]
result = []

for i in input_shape:
    if i is not None:
        result.append(i)

print(result)
# Output: [1, 2, 'a', 'b']
</code></pre>
<p>Now, we convert <code>result</code> (of type <code>list</code>) to <code>tuple</code> like this:</p>
<pre><code>final_result = tuple(result)
print(final_result)
# Output: (1, 2, 'a', 'b')
</code></pre>
</div>
<span class="comment-copy">Items that fail the test (that are <code>None</code> here) will be skipped by the loop.</span>
<span class="comment-copy">i is not None add the item.</span>
<span class="comment-copy">Thanks for explaining this. I read the docs and especially like the phrase <code>which is more concise and **readable**.</code> below such <code>list comprehension</code> example :D</span>
<span class="comment-copy">This is the most complete answer which actually explains how list comprehensions work and should be accepted.</span>
<span class="comment-copy">@AhsanulHaque - for someone like me, who completely don't understand how it works, <code>Yann Vernier</code> answer were more useful, because it actually explained how to read such construction. He explained that I need to move first <code>i</code> under <code>if</code> condition in mind to understand all this. All other answers simply says what's the result will be, instead of explaining how to read it.</span>
