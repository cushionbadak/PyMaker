<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/986006/how-do-i-pass-a-variable-by-reference">How do I pass a variable by reference?</a>
<span class="question-originals-answer-count">
                    24 answers
                </span>
</li>
</ul>
</div>
<p>Using the following code</p>
<pre><code>def test(n): 
    n=n*2 
    print("inside test",n) 

n=[9] 
print("before the call", n) 
test(n) 
print("after the call", n) 
</code></pre>
<p>the ouput is:</p>
<pre><code>before the call [9]
inside test [9, 9]
after the call [9]
</code></pre>
<p>I thought that the passing of list parameters in functions was made by reference and modified the calling parameters.It is not the case here: suprising. I was expecting:</p>
<pre><code>before the call [9]
inside test [9, 9]
after the call [9, 9]
</code></pre>
<p>If I use the <code>append</code> method instead of <code>n=n*2</code>, the effect is OK.
Can anyone clarify this point, please?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's about mutable or immutable type and value or reference parameter. 
Python pass "reference" but not really ( here for for details : <a href="https://jeffknupp.com/blog/2012/11/13/is-python-callbyvalue-or-callbyreference-neither/" rel="nofollow noreferrer">https://jeffknupp.com/blog/2012/11/13/is-python-callbyvalue-or-callbyreference-neither/</a>)</p>
<pre><code>&gt;&gt;&gt; def update_list(the_list):
    print('got', the_list)
    the_list.append('four')
    print('changed to', the_list)

&gt;&gt;&gt; toto = ["one"]
&gt;&gt;&gt; update_list(toto)
got ['one']
changed to ['one', 'four']
&gt;&gt;&gt; print(toto)
['one', 'four']


&gt;&gt;&gt; def new_list(the_list):
    print('got', the_list)
    the_list = the_list + ["four"]
    print('changed to', the_list)

&gt;&gt;&gt; toto = ["one"]
&gt;&gt;&gt; new_list(toto)
got ['one']
changed to ['one', 'four']
&gt;&gt;&gt; print(toto)
['one']
</code></pre>
<p>Python documentation :
<a href="https://docs.python.org/3/faq/programming.html#how-do-i-write-a-function-with-output-parameters-call-by-reference" rel="nofollow noreferrer">https://docs.python.org/3/faq/programming.html#how-do-i-write-a-function-with-output-parameters-call-by-reference</a></p>
<p>A similar question : 
<a href="https://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference">How do I pass a variable by reference?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This line <code>n = n*2</code>, creates a new local variable <code>n</code> inside your <code>test()</code> function, that's why the outside one is not changed. Take a look at these examples:</p>
<pre><code>&gt;&gt;&gt; def test(n):
...     print(id(n))
...     n = n*2
...     print(id(n))
...     print("inside test", n)
...
&gt;&gt;&gt; def test2(n):
...     print(id(n))
...     n.append(2)
...     print(id(n))
...     print("inside test2", n)
...
&gt;&gt;&gt; n = [9]
&gt;&gt;&gt; id(n)
49744472
&gt;&gt;&gt;
&gt;&gt;&gt; test(n)
49744472
49744752
('inside test', [9, 9])
&gt;&gt;&gt;
&gt;&gt;&gt; test2(n)
49744472
49744472
('inside test2', [9, 2])
</code></pre>
<p>Inside <code>test()</code>, we have 2 different ids: <code>49744472</code> for the <strong>param</strong> <code>n</code> and <code>49744752</code> for <strong>the local variable</strong> <code>n</code>. In <code>test2()</code> function the same id is printed, which means the same <strong>param</strong> <code>n</code> is changed inside the function.</p>
</div>
<div class="post-text" itemprop="text">
<p>In n = n*2 creates a local variable inside test function, return n and assign it to n with the results</p>
<pre><code>def test(n): 
    n=n*2 
    print("inside test",n) 
    return n

n=[9] 
print("before the call", n) 
n = test(n) 
print("after the call", n) 
</code></pre>
<p>Output:</p>
<pre><code>('before the call', [9])
('inside test', [9, 9])
('after the call', [9, 9])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In python, generally it is confusing to refer to arguments being passed to function as either pass by value/pass by reference. </p>
<p>n=[9]</p>
<p>The above statement binds n to a List object containing single element of value 9. (i.e. [9] in this case) </p>
<p>When n = n * 2 
This creates a new List and bound to a variable which is local to the scope of the function. </p>
</div>
<span class="comment-copy">sorry, I was expecting: before the [9] inside test [9, 9] after the call [9,9]</span>
<span class="comment-copy">Try with <code>n.append(9)</code></span>
<span class="comment-copy">Can you clarify the question? Your expectation is same as your output... Are you trying to multiply every element in the list by 2? If so, you'll need to do a list comprehension like this: output = [element * 2 for element in my_list]</span>
<span class="comment-copy">See <a href="http://nedbatchelder.com/text/names.html" rel="nofollow noreferrer">this</a> and <a href="http://effbot.org/zone/call-by-object.htm" rel="nofollow noreferrer">this</a>.</span>
<span class="comment-copy">Sorry my expectation was:   before the call [9] inside test [9, 9] after the call [9, 9]</span>
<span class="comment-copy">Thanks all. I understand that parameters passing is confusing in Python.</span>
