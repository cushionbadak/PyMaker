<div class="post-text" itemprop="text">
<p>I can't understand how this condition behind the % works</p>
<pre><code>for i in range(1,6): 
     print "pet%d" % (i == 1 and 2 or 4)
</code></pre>
<p>this part <code>(i == 1 and 2 or 4)</code> is what I cant understand. As far as I understand it does the same as a </p>
<pre><code>if i == 1: 
    i = 2 
else: 
    i = 4
</code></pre>
<p>but how does the <code>(i == 1 and 2 or 4)</code> work especially with the %d % i formatting?</p>
</div>
<div class="post-text" itemprop="text">
<p>Read it as <code>2 if i == 1 else 4</code> using the python <code>a if b else c</code> or <code>if i == 1 then 2 else 4</code></p>
<p>It gives <code>4</code> unless <code>i == 1</code> returns true, then it gives <code>2</code>:</p>
<pre><code>pet2
pet4
pet4
pet4
pet4
</code></pre>
<p>This sort of boolean (ab)use is common in shell scripts:</p>
<p><a href="https://docs.python.org/2/reference/expressions.html#boolean-operations" rel="nofollow noreferrer">Evaluating the boolean</a> goes as follows:</p>
<p>If <code>i == 1</code> is <code>True</code>, then we must test what is on the other side of the <code>and</code>. <code>2</code> is also <code>true</code>, so we exit early (as the <code>or</code> is already known to be <code>true</code>, returning the last value <code>2</code>. </p>
<p>If <code>i == 1</code> is <code>False</code>, we skip the other side of the <code>and</code> and evaluate the other side of the <code>or</code>, which is <code>4</code>. <code>4</code> is <code>true</code>, so we return <code>4</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you have is an example of <a href="https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not" rel="nofollow noreferrer">short-circuiting</a> with <code>and</code> and <code>or</code>.</p>
<p>We can add some parens to see how the expression is evaluated:    </p>
<pre><code>(((i == 1) and 2) or 4)
</code></pre>
<blockquote>
<p><code>or</code>: only evaluates the second argument if the first one is <code>False</code> </p>
<p><code>and</code>: only evaluates the second argument if the first one is <code>True</code></p>
</blockquote>
<p>Which makes 2 the result of the evaluation when <code>i</code> is 1 (since 2 is truthy and the second operand of the <code>or</code> will not be evaluated), and 4 otherwise (since a <code>False</code> in the first operand of the <code>and</code> means the second operand of the <code>or</code> will be returned).</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>About conditional statement:</strong></p>
<p>In Python, some values can be evaluated kinda like <code>True</code> and <code>False</code> even if they are not boolean values:</p>
<p>For instance:</p>
<pre><code>if []:
   print "this branch is never reached since it evaluates to False"
   print "due to the empty list"
if 0:
   print "same thing here"
</code></pre>
<p>(More info about how some data types are evaluated in a boolean expression here: <a href="http://getpython3.com/diveintopython3/native-datatypes.html#booleans" rel="nofollow noreferrer">http://getpython3.com/diveintopython3/native-datatypes.html#booleans</a>)</p>
<p>Now, back to the following statement:</p>
<pre><code>(i == 1 and 2 or 4)
</code></pre>
<p>Here we have a boolean expression as well. Dissecting the expression, we have the following:</p>
<pre><code>(i == 1 and 2 or 4)
((i == 1) and 2) or (4) # This is the order of evaluation
</code></pre>
<p>Since 2 and 4 are not 0, <strong>they will always evaluate to True</strong></p>
<p>Now, understanding the output: The output will be <strong>always 4</strong> if <code>i</code> is different than 1.</p>
<p>The reason for this is because if <code>i == 1</code> the returned value is 2. The value 2 is returned because it is not necessary to evaluate the whole expression <code>2 or 4</code> since the first part is evaluated to True.</p>
<p>On the other hand, if i is not 1, the value 4 has to be evaluated. Because 4 is not zero, it is evaluated to True.</p>
<p>This is why the output is always 4 if i is different than 1</p>
<p><strong>About the "ternary" operator</strong>:</p>
<p>Python does not have a ternary operator like in Java/C/C++ (?:) but you have a similar effect using if-else:</p>
<pre><code># value a = &lt;value if condition is true&gt; if &lt;condition&gt; else &lt;other value&gt;
# Example
&gt;&gt;&gt; a =  2 if 1 &lt; 10 else 0
&gt;&gt;&gt; a
2
</code></pre>
<p>Therefore, if you wanted to print values from the range function, you should use the following:</p>
<pre><code>for i in range(1,6): 
    print "pet%d" % i
</code></pre>
<p>Or maybe, printing A for even numbers and B for odd numbers:</p>
<pre><code>for i in range(1,6): 
    print "pet%s" % ("A" if i % 2 == 0 else "B")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I might be wrong, but I know in javaScript when you say i == 1 and 2 or 4 it evaluates from left to right. </p>
<p>Thus the computer will determine if i == 2, and if it does, it will have a temp val of bits set to 1, and take that flag and bitwise AND it with 2, resulting in the value 2. Since the next expression is an OR, it will not compute that since the condition is true regardless, and the "and" operator short circuits. Thus 2 will print.</p>
<p>However if i != 2, then the first part will evaluate to false, and have a temp val of all 0 bits. Then, the or with 4 will change the value to 4 (a bitwise 0 with 4 returns 4), and so 4 will print.</p>
<p>I hope this makes sense! Let me know if you have any other questions. </p>
</div>
<span class="comment-copy">"As far as I understand ..." Nope. Nothing is assigned.</span>
<span class="comment-copy">There is nothing to be confused with here...</span>
<span class="comment-copy">What are you want to get?</span>
<span class="comment-copy">@PatrickHaugh It won't evaluate to <code>True</code> (unless you set <code>True</code> to <code>2</code> or <code>4</code>).</span>
<span class="comment-copy">@PatrickHaugh: Python's <code>and</code> and <code>or</code> don't work that way.</span>
<span class="comment-copy"><code>2</code> and <code>4</code> aren't <code>True</code>, they're only true.</span>
<span class="comment-copy">@StefanPochmann I've clarified my answer, thanks :)</span>
<span class="comment-copy">The <code>or</code> isn't <code>True</code>, either. And no need for <code>bool(...)</code>, it's perfectly fine to say "true" <a href="https://docs.python.org/2/reference/expressions.html#boolean-operations" rel="nofollow noreferrer"><b>like the docs do</b></a>.</span>
<span class="comment-copy">@StefanPochmann Thanks, although in the future you're welcome to make an edit</span>
<span class="comment-copy">Python's <a href="http://stackoverflow.com/a/394814/3579910"><code>A if condition else B</code></a> is the ternary operation.</span>
<span class="comment-copy"><i>"Python does not have a ternary operator like in Java/C/C++ (?:) but you have a similar effect using if-else"</i></span>
<span class="comment-copy">if-else is not a ternary operator like "?" and ":" in Java or other languages that have explicitly tokens for this purpose. In Python, the grammar was just extended to handle this statement.</span>
<span class="comment-copy">Feel free to read up on Python's operator precedence. <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">docs.python.org/3/reference/â€¦</a></span>
