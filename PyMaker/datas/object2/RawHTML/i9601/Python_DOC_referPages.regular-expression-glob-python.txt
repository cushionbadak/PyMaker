<div class="post-text" itemprop="text">
<p>I have a folder, contains many files.
There is a group contains pc_0.txt,pc_1.txt,...,pc_699.txt.
I want to select all files beetween pc_200 - &gt; to pc_699.txt</p>
<p>How?</p>
<pre><code>for filename in glob.glob("pc*.txt"):
    global_list.append(filename)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For this specific case, <code>glob</code> already supports what you need (see <a href="https://docs.python.org/3/library/fnmatch.html#module-fnmatch" rel="nofollow noreferrer"><code>fnmatch</code> docs for glob wildcards</a>). You can just do:</p>
<pre><code>for filename in glob.glob("pc[23456]??.txt"):
</code></pre>
<p>If you need to be extra specific that the two trailing characters are numbers (some files might have non-numeric characters there), you can replace the <code>?</code>s with <code>[0123456789]</code>, but otherwise, I find the <code>?</code> a little less distracting.</p>
<p>In a more complicated scenario, you might be forced to resort to regular expressions, and you could do so here with:</p>
<pre><code>import re

for filename in filter(re.compile(r'^pc_[2-6]\d\d\.txt$').match, os.listdir('.')):
</code></pre>
<p>but given that glob-style wildcards work well enough, you don't need to break out the big guns just yet.</p>
</div>
<span class="comment-copy">Side-note: If you're just appending each value to the global list, skip the explicit loop and just do: <code>global_list.extend(glob.glob("pc*.txt"))</code> (or whatever glob pattern you settle on); letting Python perform the work directly in bulk is faster and cleaner than unnecessary explicit loop.</span>
