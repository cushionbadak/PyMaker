<div class="post-text" itemprop="text">
<p>First of all I have to say, that I'm not new in Python. I know the <em>use</em> of <code>if __name__ == '__main__':</code> well enough. I just try to understand <em>how</em> the Python interpreter handles this. I wrote two scripts to test what's possible in Python. Note that that's actually really bad Python - I wouldn't make use of such things. I only want to learn about the <em>possibilities</em>.</p>
<p>main.py:</p>
<pre><code>import bad.py


def main():

    print "Hello, World!"


if __name__ == '__main__':

    main()
</code></pre>
<p>bad.py:</p>
<pre><code>__name__ = '__main__' # I expected an Error caused by this line


def main():

    exit() # I know that this function shouldn't be used


if __name__ == '__main__':

    main()
</code></pre>
<p>There's no output by running <code>main.py</code> and I didn't really expect an output.</p>
<p><strong>what I want to know:</strong></p>
<ul>
<li>does <code>__name__ = '__main__'</code> in <code>bad.py</code> automatically change the variable <code>__name__</code> in <code>main.py</code>? Or can two <em>different</em> <code>'__main__'</code>-modules exist?</li>
<li>is it possible to substitute an <code>import</code> statement just by manipulating <code>__name__</code>? If it is, how would you do that?</li>
<li><p>when I change <code>exit()</code> to <code>print "Hello",</code>, The output is <code>"Hello"</code>, then an Error occurs:</p>
<pre><code>Traceback (most recent call last):
  File "main.py", line 1, in &lt;module&gt;
    import bad.py
ImportError: No module named py
</code></pre>
<p>could someone explain this behaviour?</p></li>
<li>Are there any differences between python versions / operating systems? I tried this example in Python 2.7.6 on Linux2</li>
</ul>
<p><strong>EDIT:</strong></p>
<p>Of course <code>import bad.py</code> doesn't work. <code>import</code>-statements don't want any file-endings. I did this mistake because I also program in C. I changed the line to <code>import bad</code>. The output looks like this now:</p>
<pre><code>Hello Hello, World
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>change your import statement to <code>import bad</code></p>
<p>The <code>if __name__ == '__main__':</code> intention is to run this code if this program is run directly, as a main program. As you see you can overwrite the <strong>name</strong> value but the same effect would occur if you remove the if check in bad.</p>
<ul>
<li><code>__name__</code> in bad.py is independent from <code>__name__</code> in main.py. You can see that when you again call main.py from another program.</li>
<li>the import function is completely different from the <code>__name__</code> attribute. So no.</li>
<li>you got the error because main continues with the next import after bad was finished. And it cannot import py.</li>
</ul>
<p>Add some more print statements to follow the logic. You can also print <code>__name__</code> itself to see those values.</p>
</div>
<div class="post-text" itemprop="text">
<p>A few things are happening in your code :</p>
<p>Firstly your import line<code>import bad.py</code> Isn'i importing the file  bad.py. It's performing a search <a href="https://docs.python.org/3/reference/import.html#searching" rel="nofollow noreferrer">see here for the search logic</a>to find a module called <code>bad</code>   Which its finding and the =n once <code>bad</code> is imported it's looking inside that module for an object called <code>py</code>  which its not finding and instead returning an Import Error.      (in the exit(). Version your quitting before the import of <code>bad</code> is complete so it  doesn't get the chance to try and find <code>py</code></p>
<p>Secondly <strong>name</strong>. Is defined for each module by the the interpreter and import logic, when the file is loaded <strong>name</strong> is set,  after that you can change it all you want (like in bad.py).  It's also scoped to module, changing <code>bad.__name__</code> doesn't change <code>main__name</code></p>
</div>
<span class="comment-copy">Take a look at this question, <a href="http://stackoverflow.com/questions/15883526/how-is-the-name-variable-in-a-python-module-defined" title="how is the name variable in a python module defined">stackoverflow.com/questions/15883526/â€¦</a> . The answer is what you want. The <code>__name__</code> changes depending on how you might import a file in python.</span>
<span class="comment-copy">@PrestonHager excuse me that I couldn't write <i>every</i> point in the question's title - the answer of your linked question doesn't answer every point of my question. If these points are also duplicates, please leave a link to the other questions as well</span>
<span class="comment-copy">Ok, the answer for if the <code>__name__</code> variable can be used for an import is no it can't. Python must call the <code>__import__()</code> function. The other question on system exit is interesting. There are no differences in these functions between Python 2 and 3, though I don't know for operating systems.</span>
<span class="comment-copy">Have you searched the python documentation for references to <code>__name__</code>?</span>
<span class="comment-copy">Here's a pretty decent explanation: <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer">docs.python.org/3/library/__main__.html</a></span>
<span class="comment-copy">1.) my import statement is already <code>import bad.py</code>. I don't know if you actually meant something else.</span>
<span class="comment-copy">2.) if I run <code>main.py</code>from another program again, it is completely new interpreted. Of course it is independent in this case, so this check doesn't make sense</span>
<span class="comment-copy">3.) As far as I know, the <code>import</code> keyword has influence to the value of <code>__name__</code> (in the imported script)</span>
<span class="comment-copy">my fault. I meant <code>import bad</code>. remove the .py</span>
<span class="comment-copy">Oh, of course ;) probably I programmed too much in C. I fixed it, now the output is <code>Hello Hello, World!</code> (without linebreak) as I expected</span>
