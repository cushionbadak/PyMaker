<div class="post-text" itemprop="text">
<p>I tried methods like encode using "unicode-display", raw string, But it didn't work. I am writing a module for a chat bot in python which involves getting a character from the user and showing it in the "\uXXXX" format instead of it turning into the respective character.
Here's my code:</p>
<pre><code>import discord
from discord.ext import commands
import unicodedata as ud

class Unicode:
    """Encode Unicode characters!"""

    def __init__(self, bot):
        self.bot = bot

    @commands.command()
    async def unicode(self, *, character):
        """Encode a Unicode character."""
        try:
            data = ud.normalize('NFC', character)
        except ValueError:
            data = '&lt;unknown&gt;'
        await self.bot.say(data)

def setup(bot):
    bot.add_cog(Unicode(bot))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If all you need is the Unicode code point, get the <code>ord()</code> value and express that as a hex value:</p>
<pre><code>'U+{:04X}'.format(ord(data[0]))
</code></pre>
<p>This will use at least 4 hex digits (uppercased) for a given character, more if the character is outside the <a href="https://en.wikipedia.org/wiki/Plane_(Unicode)#Basic_Multilingual_Plane" rel="nofollow noreferrer">basic multilingual plane</a>. I picked the widely accepted <code>U+hhhh</code> format rather than the Python / JSON / Javascript escape sequence format here.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; data = 'â›„'
&gt;&gt;&gt; unicode_codepoint = 'U+{:04X}'.format(ord(data[0]))
&gt;&gt;&gt; print(unicode_codepoint)
U+26C4
</code></pre>
<p>You could also encode the data to a JSON string or use the <a href="https://docs.python.org/3/library/functions.html#ascii" rel="nofollow noreferrer"><code>ascii()</code> function</a> to create a string (with quotes) with <code>\u</code> escape sequences:</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; print(json.dumps(data))
"\u26c4"
&gt;&gt;&gt; print(ascii(data))
'\u26c4'
</code></pre>
<p>This has the downside that you now have to remove those quote characters again (use <code>str.strip()</code>).</p>
<p>The difference between the two approaches is that encoding to JSON produces <a href="https://en.wikipedia.org/wiki/UTF-16#U.2B10000_to_U.2B10FFFF" rel="nofollow noreferrer">UTF-16 surrogate pairs</a> for characters outside of the BMP, using <code>ascii()</code> you'll get <code>\Uhhhhhhhh</code> Python escape codes:</p>
<pre><code>&gt;&gt;&gt; data = 'ðŸ––'
&gt;&gt;&gt; print('U+{:04X}'.format(ord(data[0])))
U+1F596
&gt;&gt;&gt; print(json.dumps(data))
"\ud83d\udd96"
&gt;&gt;&gt; print(ascii(data))
'\U0001f596'
</code></pre>
</div>
<span class="comment-copy">Your indenting looks messed up</span>
<span class="comment-copy">The indenting is proper</span>
<span class="comment-copy">@RedstoneKiller18Gaming: it is now that I fixed it, yes.</span>
<span class="comment-copy">Hmm, thought you could also call <code>repr('â›„')</code>, but that just gives 'â›„'.</span>
<span class="comment-copy">@NickT: You are thinking of <code>repr()</code> in Python 2.. in Python 3 you need to use <code>ascii()</code> instead.</span>
<span class="comment-copy">Yay! It worked, thank you very much!</span>
<span class="comment-copy">Now I'm off to the second part, which is decode.</span>
<span class="comment-copy">btw the other methods don't work</span>
