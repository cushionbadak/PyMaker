<div class="post-text" itemprop="text">
<p>Imagine you need to count number of <code>iterable</code> elements that satisfy some <code>criteria</code> - is there is a more good looking way to do this?
It's python3 of course. But 2 is fine too.
I can't find anything suitable in <code>collections</code> or <code>itertools</code> python modules or in built-ins.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>sum(1 for i in A if condition(i))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try the <code>quantify</code> recipe from <code>itertools</code> <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">recipes</a>:</p>
<pre><code>def quantify(iterable, pred=bool):
    "Count how many times the predicate is true"
    return sum(map(pred, iterable))
</code></pre>
<p><a href="https://github.com/erikrose/more-itertools" rel="nofollow noreferrer"><code>more_itertools</code></a> already implements this recipe, so it is even more compact:</p>
<pre><code>&gt;&gt;&gt; import more_itertools as mit

&gt;&gt;&gt; iterable = [True, False, True, True]
&gt;&gt;&gt; mit.quantify(iterable)
3
</code></pre>
<p>For comparison:</p>
<pre><code>&gt;&gt;&gt; #len(list(filter(lambda x: criteria, iterable)))
&gt;&gt;&gt; len(list(filter(lambda x: x is True, iterable)))
3
</code></pre>
<hr/>
<p><strong>Performance</strong></p>
<pre><code># A: len(list(filter(lambda x: criteria, iterable)))
&gt;&gt;&gt; %timeit -n 1000000 len(list(filter(lambda i: i is True, iterable)))
1000000 loops, best of 3: 2.48 µs per loop

# B: quantify(iterable, pred=condition)
&gt;&gt;&gt; %timeit -n 1000000 mit.quantify(iterable)
1000000 loops, best of 3: 1.87 µs per loop

# C: ilen(item for item in iterable if condition)
&gt;&gt;&gt; %timeit -n 1000000 mit.ilen(i for i in iterable if i is True)
1000000 loops, best of 3: 5.27 µs per loop

# D: len([item for item in iterable if condition])
&gt;&gt;&gt; %timeit -n 1000000 len([i for i in iterable if i is True])
1000000 loops, best of 3: 973 ns per loop

# E: sum(1 for _ in iterable if condition)
&gt;&gt;&gt; %timeit -n 1000000 sum(1 for i in iterable if i is True)
1000000 loops, best of 3: 1.34 µs per loop
</code></pre>
<ul>
<li><strong>A</strong>: <em>control</em> - author's example</li>
<li><strong>B</strong>: <em>faster</em> - <code>quantify</code>, <code>itertools</code> recipe </li>
<li><strong>C</strong>: <em>slowest</em> - generator expression, uses <code>more_itertools.ilen</code> to evaluate</li>
<li><strong>D</strong>: <em>fastest</em> - list comprehension</li>
<li><strong>E</strong>: <em>faster</em> - generator expression, <code>sum(1 for _ in ...)</code> idiom</li>
</ul>
<p>While <code>more_itertools.quantify</code> is concise, the idiomic generator expression is on par if not faster. However, classic list comprehensions (first suggested by @宏杰李) are the best performers.</p>
<p>See also a <a href="https://mail.python.org/pipermail//python-ideas/2014-October/029650.html" rel="nofollow noreferrer">thread</a> on extending <code>len()</code> to generators.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>List comprehensions provide a concise way to create lists. Common
  applications are to make new lists where each element is the result of
  some operations applied to each member of another sequence or
  iterable, or to create a subsequence of those elements that satisfy a
  certain condition.</p>
</blockquote>
<pre><code>&gt;&gt;&gt; squares = []
&gt;&gt;&gt; for x in range(10):
...     squares.append(x**2)
...
&gt;&gt;&gt; squares
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
</code></pre>
<blockquote>
<p>Note that this creates (or overwrites) a variable named x that still
  exists after the loop completes. We can calculate the list of squares
  without any side effects using:</p>
</blockquote>
<pre><code>squares = list(map(lambda x: x**2, range(10)))
</code></pre>
<blockquote>
<p>or, equivalently:</p>
</blockquote>
<pre><code>squares = [x**2 for x in range(10)]
</code></pre>
<p>than just put you conditon in the the if statment like this</p>
<pre><code>&gt;&gt;&gt; [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]
[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]
</code></pre>
<p>you got a list of elements which meet the condition, and you can use <code>len(lsit_)</code> to count the elements</p>
<p><a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">List Comprehension Document</a></p>
</div>
<span class="comment-copy">Perhaps <code>sum(criteria(x) for x in iterable)</code>, assuming that criteria() returns only proper booleans.</span>
<span class="comment-copy">@jasonharper actually your answer I love the most - <code>sum(x&lt;10 and True for x in iterable)</code> is super handy:)</span>
<span class="comment-copy">List comprehensions are the pythonic way to go.  Good call.</span>
<span class="comment-copy">how on Earth does it answer the question?</span>
<span class="comment-copy">@scythargon i update my answer</span>
<span class="comment-copy">@scythargon sorry for the unclear answer, I made an answer before and I reformat it, I forget to add some pieces</span>
