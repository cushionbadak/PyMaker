<div class="post-text" itemprop="text">
<p>I have a matrix [n x 3]. I want to specify row:<br/>
<code>test_row = np.array([a, b, c])</code><br/>
and delete it from my matrix.</p>
<p>Is there a better way than using for and <code>np.array_equal</code> over whole matrix?</p>
</div>
<div class="post-text" itemprop="text">
<p>An alternative to deleting the desired rows is, if you happen to know the index of the row that you want to <em>remove</em>, you can simply slice the remaining rows and concatenate it into a matrix as in the example below:</p>
<pre><code>In [8]: arr = np.arange(5*3).reshape(5, 3)

In [9]: arr
Out[9]: 
array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11],
       [12, 13, 14]])

In [10]: remove_row_idx = 2

In [11]: np.vstack((arr[:remove_row_idx, :], arr[remove_row_idx+1:,]))
Out[11]: 
array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 9, 10, 11],
       [12, 13, 14]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>In [318]: arr = np.arange(24).reshape(8,3)                                                
In [319]: test = np.array([6,7,8])                                                        
</code></pre>
<p>A whole-array comparison between the 2:</p>
<pre><code>In [322]: np.isin(arr,test)                                                               
Out[322]: 
array([[False, False, False],
       [False, False, False],
       [ True,  True,  True],
       [False, False, False],
       [False, False, False],
       [False, False, False],
       [False, False, False],
       [False, False, False]])
</code></pre>
<p>Find the row where all terms match:</p>
<pre><code>In [323]: np.isin(arr,test).all(axis=1)                                                   
Out[323]: array([False, False,  True, False, False, False, False, False])
</code></pre>
<p>Use its inverse as the mask to select the keeper rows:</p>
<pre><code>In [324]: arr[~_]                                                                         
Out[324]: 
array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 9, 10, 11],
       [12, 13, 14],
       [15, 16, 17],
       [18, 19, 20],
       [21, 22, 23]])
</code></pre>
<p><code>isin</code> actually is <code>in1d</code> plus a reshape:</p>
<pre><code>In [327]: np.in1d(arr,test)                                                               
Out[327]: 
array([False, False, False, False, False, False,  True,  True,  True,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False])
In [328]: np.in1d(arr,test).reshape(arr.shape)                                            
Out[328]: 
array([[False, False, False],
       [False, False, False],
       [ True,  True,  True],
       [False, False, False],
       [False, False, False],
       [False, False, False],
       [False, False, False],
       [False, False, False]])
</code></pre>
<p>This broadcasted comparison also works:</p>
<pre><code>(arr[:,None,:]==test[None,:,None]).any(axis=1).all(axis=1)
</code></pre>
</div>
<span class="comment-copy">Why is <code>np.array_equal</code> not good enough?</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/3877491/deleting-rows-in-numpy-array">deleting rows in numpy array</a></span>
<span class="comment-copy">I am curious is there 'numpy way' to do it. Without iterating over whole matrix with for.</span>
<span class="comment-copy">So you want the array without the row that matches <code>test_row</code>?  Could there be more than one such row?  You want an exact match?</span>
<span class="comment-copy">I only know values of <code>[(a, b, c)]</code>   I found this solution: <a href="https://stackoverflow.com/a/18927811/11229272">stackoverflow.com/a/18927811/11229272</a> but I thought there will be a straightforward solution to deleting rows with given values.</span>
