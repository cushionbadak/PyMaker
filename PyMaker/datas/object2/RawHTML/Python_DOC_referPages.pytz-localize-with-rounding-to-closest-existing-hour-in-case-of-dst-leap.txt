<div class="post-text" itemprop="text">
<p>Basically, I got:</p>
<pre><code>tz = pytz.timezone('US/Eastern')
dt = datetime.datetime(2019, 03, 10, 02, 30)
</code></pre>
<p>I want to localize <code>dt</code> to the timezone while removing the non-existing hour.</p>
<p>If I do <code>tz.normalize(tz.localize(dt))</code>, I'll get </p>
<pre><code>datetime.datetime(2019, 3, 10, 3, 30, tzinfo=&lt;DstTzInfo 'US/Eastern' EDT-1 day, 20:00:00 DST&gt;)
</code></pre>
<p>I want</p>
<pre><code>datetime.datetime(2019, 3, 10, 3, 00, tzinfo=&lt;DstTzInfo 'US/Eastern' EDT-1 day, 20:00:00 DST&gt;)
</code></pre>
<p>(use 03:00 instead of 03:30 since it's closer to 02:30 wall-clock).</p>
<p>The usecase: 
I got a list of wall-times (one of them happens to be 02:30), datetime of 2019-03-10 and timezone US/Eastern. </p>
<p>I want to construct the timestamps in the specific datetime and timezone with using 03:00 (well, actually the time right after DST leap) instead of any wall-time that will become invalid when I combine timestamp with datetime and localize it. It's done to automatically copy some list of appointments that are tied to wall-clock times to another day.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def localize_and_round_datetime(dt, tz):
    """
    Similar to tz.normalize(tz.localize(dt)), but rounds any time in non-existing hour to the time right after it.
    """
    result = tz.normalize(tz.localize(dt))
    if result.replace(tzinfo=None) == dt:
        return result

    # DT belongs to the leap hour. find the datetime right after leap
    # see: DstTzInfo.localize()
    tzinfo_dst_idx = bisect_right(tz._utc_transition_times, dt)
    new_tz = tz._utc_transition_times[tzinfo_dst_idx]
    return pytz.UTC.localize(new_tz).astimezone(tz)
</code></pre>
<p>seems to work.</p>
</div>
<span class="comment-copy">The problem really is that that time <i>does not exist</i>. There is no "right" answer. Where'd you get that timestamp from to begin with?</span>
<span class="comment-copy">Who has an appointment at 2:30am…?! ;-) Well, seriously, your best bet may be to check whether the localised date has a different hour than the naïve date and flag it for manual attention. Can't be that many items, and if the time of an appointment needs to be moved, it may be better to do so manually. Alternatively, round it down automatically if you detect this discrepancy.</span>
<span class="comment-copy">The other alternative may be to introspect the <code>tz</code> for when DST changes happen and figure out whether each naïve date falls into that gap, but that's probably more complex.</span>
