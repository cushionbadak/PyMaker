<div class="post-text" itemprop="text">
<p>So I wrote a binary search algorithm, yet When I do test run it does not work perfectly.</p>
<p>Here is the code </p>
<pre><code>def binarySearch(lst, target):
    low = 0
    high = len(lst)-1
    while high &gt;= low:
        mid = (high + low)//2
        if target &lt; lst[mid]:
           high = mid - 1
        elif target &gt; lst[mid]:
            low = mid + 1
        else:
            return mid

    return (-1 * (mid+1))
</code></pre>
<p>abd here is the code for calling the function</p>
<pre><code>lst_test = [3, 4, 6, 7]
target_values = [1, 3, 5, 8]

for t in target_values:
    i = binarySearch(lst_test, t)
    if (i &lt; 0):
        print("In", lst_test, t, "is going to be inserted at index",-1*(i+1))
        lst_test.insert((i+1)*-1, t)
    else:
        print("In", lst_test, t, "was found at index", i)
print("The final list is:", lst_test)
</code></pre>
<p>The problem is this, I want to add list target_values into the lst correct order when I actually run the function it gives </p>
<pre><code>In [3, 4, 6, 7] 1 is going to be inserted at index 0
In [1, 3, 4, 6, 7] 3 was found at index 1
In [1, 3, 4, 6, 7] 5 is going to be inserted at index 3
In [1, 3, 4, 5, 6, 7] 8 is going to be inserted at index 5
The final list is: [1, 3, 4, 5, 6, 8, 7]
</code></pre>
<p>Which is weird, Its working yet it only fails in the last part of the call
is there any way to fix this problem? Final list should be [1,3,4,5,6,7,8] </p>
<p>As requested I tracked my binary search algorithm, its quiet poor quality. I hope this would help</p>
<pre><code>Mid point is:  1
target value is smaller than a mid point
Mid point is:  0
target value is smaller than a mid point
In [3, 4, 6, 7] 1 is going to be inserted at index 0
Mid point is:  2
target value is smaller than a mid point
Mid point is:  0
target value is larger than a mid point
Mid point is:  1
Found the index location at  1
In [1, 3, 4, 6, 7] 3 was found at index 1
Mid point is:  2
target value is larger than a mid point
Mid point is:  3
target value is smaller than a mid point
In [1, 3, 4, 6, 7] 5 is going to be inserted at index 3
Mid point is:  2
target value is larger than a mid point
Mid point is:  4
target value is larger than a mid point
Mid point is:  5
target value is larger than a mid point
In [1, 3, 4, 5, 6, 7] 8 is going to be inserted at index 5
The final list is: [1, 3, 4, 5, 6, 8, 7]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just change the function to return <code>(-1 * (low+1))</code> instead:</p>
<pre><code>def binarySearch(lst, target):
    low = 0
    high = len(lst)-1
    while high &gt;= low:
        mid = (high + low)//2
        if target &lt; lst[mid]:
           high = mid - 1
        elif target &gt; lst[mid]:
           low = mid + 1
        else:
           return mid

    return (-1 * (low+1))
</code></pre>
<p>Output:</p>
<pre><code>('In', [3, 4, 6, 7], 1, 'is going to be inserted at index', 0)
('In', [1, 3, 4, 6, 7], 3, 'was found at index', 1)
('In', [1, 3, 4, 6, 7], 5, 'is going to be inserted at index', 3)
('In', [1, 3, 4, 5, 6, 7], 8, 'is going to be inserted at index', 6)
('The final list is:', [1, 3, 4, 5, 6, 7, 8])
</code></pre>
<p>The problem with original implementation was that code assumed <code>mid</code> to be the insertion index but it could never go beyond the current list within the loop as it should when value is inserted to the end of the list.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think I got it.  Put in the print statements I recommended.  Track especially the insertion at the end of the existing list.  I believe that you'll find that you can't drive <strong>low</strong> high enough to provoke inserting at the end of the list; the most you can get is to insert <em>before</em> the final element, which is just what's happening in your test.</p>
</div>
<span class="comment-copy">You did a nice job tracking the calling sequence; can you apply that to the binary search routine?  With the level of care you showed, I'll bet 2 or 3 print statements in there would show you the error.</span>
<span class="comment-copy">Side-note: You're aware of <a href="https://docs.python.org/3/library/bisect.html" rel="nofollow noreferrer">the <code>bisect</code> module</a>, right? If this is a learning exercise, have fun, but for anything else, use the included batteries; they're faster and more flexible than anything you're likely to implement yourself.</span>
<span class="comment-copy">Thank you very much!, wow I did not notice that it cannot go beyond the length of my list. again huge thanks for fast and kind reply</span>
