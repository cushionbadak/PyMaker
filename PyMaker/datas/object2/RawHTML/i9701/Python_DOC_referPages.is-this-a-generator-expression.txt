<div class="post-text" itemprop="text">
<p>I asked a question about a list comprehension couple days ago:<a href="https://stackoverflow.com/questions/40791002/elegant-way-to-delete-items-in-a-list-which-do-not-has-substrings-that-appear-in">Elegant way to delete items in a list which do not has substrings that appear in another list</a></p>
<p>Anyway, I got a great answer to my question. It is a list comprehension:</p>
<p><code>[p for p in process_list if all(e not in p for e in exclude_list)]</code></p>
<p>I get the idea and applied it to my work. But I'm not sure if I get the <code>e not in p for e in exclude_list</code> part right. It looks like a generator expression to me but I'm not sure. I think it is better to ask this question in another post.</p>
<p>So is it a generator expression or something else?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, <code>all(e not in p for e in exclude_list)</code> is a call containing a generator expression. Generator expressions that are the <em>only</em> argument passed to a call can omit the parentheses. Here, that's the <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer"><code>all()</code> function</a> being called.</p>
<p>From the <a href="https://docs.python.org/3/reference/expressions.html#generator-expressions" rel="nofollow noreferrer"><em>Generator expressions</em> reference documentation</a>:</p>
<blockquote>
<p>The parentheses can be omitted on calls with only one argument.</p>
</blockquote>
<p>The <code>all()</code> function (as well as the companion function <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any()</code></a> is often given a generator expression, as this allows for lazy evaluation of a series of tests. Only enough <code>e not in p</code> tests are executed to determine the outcome; if there is <em>any</em> <code>e not in p</code> test that is false, <code>all()</code> returns early and no further tests are executed.</p>
</div>
<div class="post-text" itemprop="text">
<p>Let python tell you what it is:</p>
<pre><code>&gt;&gt;&gt; p=[]
&gt;&gt;&gt; exclude_list=[]
&gt;&gt;&gt; type(e not in p for e in exclude_list)
&lt;class 'generator'&gt;
</code></pre>
</div>
<span class="comment-copy">yes it is a generator expression.</span>
<span class="comment-copy">Yes. It is a generator expression: <code>(this is a generator comprehension)</code>. <code>[this is a list comprehension]</code></span>
<span class="comment-copy">Within <code>any()</code> if you directly pass the expression without <code>[...]</code>, it is treated as generator expression</span>
<span class="comment-copy">@MoinuddinQuadri thx! I was trying to ask you under your answer as a comment and then I guess maybe it is good to ask it as a separate question so more people like me can see it. Thank you!</span>
<span class="comment-copy">@zyc: It was a great idea. Martijn has explained it in very detail over here, may be I won't be able to give you that detailed answer :)</span>
<span class="comment-copy">This is a great approach. But I think the thing that got me confused in the first place is passing <code>e not in p for e in exclude_list</code> to <code>all()</code>. And these parentheses really made me wonder if it is still a generator expression. But now I get it since Martijn explained it in his answer,</span>
