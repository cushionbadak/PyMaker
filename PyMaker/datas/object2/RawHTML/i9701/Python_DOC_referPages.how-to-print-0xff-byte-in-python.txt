<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/31917595/how-to-write-a-raw-hex-byte-to-stdout-in-python-3">How to write a raw hex byte to stdout in Python 3?</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I would like to <code>print</code> some <code>0xff</code> bytes using <strong>Python 3.5.2</strong> to pipe them into another program. I have a simple C program which reads from <code>stdin</code> and prints each char in hex:</p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

void main () {
    char *buffer = malloc(0x100);
    fgets(buffer, 0x100, stdin);
    for (int i = 0; buffer[i] != 0; printf("%x ", buffer[i++]));
}
</code></pre>
<p>If I echo <code>0xff</code> byte and pipe it into my program, chars are displayed as expected (<code>a</code> is because of newline):</p>
<pre><code># echo -e "\xff\xff\xff\xff" | ./print-chars
ffffffff ffffffff ffffffff ffffffff a
</code></pre>
<p>I can also do it with Perl:</p>
<pre><code># perl -e 'print "\xff\xff\xff\xff"' | ./print-chars
ffffffff ffffffff ffffffff ffffffff
</code></pre>
<p>But when I try it in python, the result is different:</p>
<pre><code> # python -c 'print("\xff\xff\xff\xff")' | ./print-chars
ffffffc3 ffffffbf ffffffc3 ffffffbf ffffffc3 ffffffbf ffffffc3 fffffbf a
</code></pre>
<p>My questions:</p>
<ul>
<li>Why does Python print <code>0xc3</code> and <code>0xb3</code> bytes instead of <code>0xff</code>?</li>
<li>What is the proper way of printing <code>0xff</code> using Python (I want to achieve the same result as with echo or Perl)?</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>One of the way is use <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer">struct module</a> to pack a values into binary string:</p>
<pre><code>import struct
value = 0xFF
s = struct.pack('B', value)
print(s)
list_of_values = [255]*4
s = struct.pack('4B', *list_of_values)
print(s)
</code></pre>
<p>will give next output:</p>
<pre><code>b'\xff'
b'\xff\xff\xff\xff'
</code></pre>
</div>
<span class="comment-copy">Thank you, <code>sys.stdout.buffer.write(b"\xff\xff\xff\xff")</code> works perfectly</span>
<span class="comment-copy">As an aside: Declare <code>buffer</code> as <code>unsigned char *buffer</code> to avoid the erroneous leading <code>ffffff</code>-s.</span>
<span class="comment-copy">@duskwuff: thank you for suggestion, I only included this code to demonstrate what the output of Python's <code>print</code> is, it is not actual code that I use anywhere</span>
<span class="comment-copy">What you're seeing is the result of encoding: <code>'\xff\xff\xff\xff'.encode()</code> returns <code>b'\xc3\xbf\xc3\xbf\xc3\xbf\xc3\xbf'</code>. The last <code>a</code> corresponds to the newline character.</span>
<span class="comment-copy">... which is the same as the output of <code>print(bytes([255] * 4))</code>, which when piped into OP's C program becomes <code>62 27 5c 78 66 66 5c 78 66 66 5c 78 66 66 5c 78 66 66 27 a</code>.</span>
