<div class="post-text" itemprop="text">
<p>I have a console program written in Python. I would like to test several input combinations in an automatic test routine. The input is read via Pythons <code>input(...)</code> function.</p>
<ul>
<li>How can I emulate a keyboard or any other input stream to send single characters or strings to <code>input</code>?</li>
<li>Or do I need to replace input by another function, which is connected to my test cases?</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer"><code>unittest.mock</code></a> to patch the output of a function (including streams).</p>
<pre><code>#!/usr/bin/env python3

import unittest
from unittest.mock import patch

# Unit under test.
def get_input():
    my_input = input("Enter some string: ")
    if my_input == "bad":
        raise Exception("You were a bad boy...")
    return my_input

class MyTestCase(unittest.TestCase):
    # Force input to return "hello" whenever it's called in the following test
    @patch("builtins.input", return_value="hello")
    def test_input_good(self, mock_input):
        self.assertEqual(get_input(), "hello")

    # Force input to return "bad" whenever it's called in the following test
    @patch("builtins.input", return_value="bad")
    def test_input_throws_exception(self, mock_input):
        with self.assertRaises(Exception) as e:
            get_input()
            self.assertEqual(e.message, "You were a bad boy...")

if __name__ == "__main__":
    unittest.main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If that is just a test case and not a "real part of big system" - meaning that you just need to pass a certain input to your command line executable ones (e.g. run test) and you are using Unix, one convenient way of doing this is using <a href="https://en.wikipedia.org/wiki/Pipeline_(Unix)" rel="nofollow noreferrer">pipes</a>:</p>
<pre><code>// read.py 
val = raw_input()
print 'nice', val
</code></pre>
<p>then via console:    </p>
<pre><code>$ echo "hat" | python read.py 
nice hat
</code></pre>
<p>on Windows syntax is <a href="https://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/redirection.mspx?mfr=true" rel="nofollow noreferrer">little different</a> - should be something like</p>
<pre><code>dir&gt; python.exe read.py &lt; file.txt
</code></pre>
<p>One other hacky-simple way to achieve same thing is to replace <code>sys.stdin</code> with a custom stream object:</p>
<pre><code>sys.stdin = StringIO.StringIO("line 1\nline 2\nline 3")
</code></pre>
<p>One should consider using @erip 's answer if that is something bigger than a automatisation routine or testing students' home assignments against fixed set of tests, though.</p>
</div>
<span class="comment-copy">Look at <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer">unittest.mock</a>.</span>
<span class="comment-copy">Why not refactor such that you can call the actual functionality directly?</span>
<span class="comment-copy">@jonrsharpe Because it's an integration test and no unit test :).</span>
<span class="comment-copy">I'd suggest you mention integration testing in the question - in that case, you probably <i>don't</i> want to mock anything out.</span>
<span class="comment-copy">I agree with @jonrsharpe. Unless <code>input</code> can (and will) only be called once in the entire system, mocking isn't the right way to go.</span>
<span class="comment-copy">This isn't a very automated way to test software.</span>
<span class="comment-copy">@erip, if you need to, let's say, test students home assignments against a fixed set of predefined tests, then why not? :) OP's original intent is not so clear. I fully agree that your solution should be used in real-world production</span>
