<div class="post-text" itemprop="text">
<p>I'm new to Python. I'm using Python 3.3.2 and I'm having a hard time figuring out why the following code:</p>
<pre><code>strList = ['1','2','3']
intList = map(int,strList)
largest = max(intList)
smallest = min(intList)
</code></pre>
<p>Gives me this error:</p>
<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: min() arg is an empty sequence
</code></pre>
<p>However this code:</p>
<pre><code>strList = ['1','2','3']
intList = list(map(int,strList))
largest = max(intList)
smallest = min(intList)
</code></pre>
<p>Gives me no errors at all.</p>
<p>My thought is that when intList is assigned to the return value of the map function, it becomes an iterator rather than a list, as per <a href="http://docs.python.org/3/library/functions.html#map" rel="noreferrer">the docs</a>. And perhaps as a side effect of calling <code>max()</code>, the iterator has been iterated to the end of the list, causing Python to believe the list is empty (I'm drawing from C knowledge here, I'm not familiar with how iterators truly work in Python.) The only evidence I have to support this is that, for the first block of code:</p>
<pre><code>&gt;&gt;&gt; type(intList)
&lt;class 'map'&gt;
</code></pre>
<p>whereas for the second block of code:</p>
<pre><code>&gt;&gt;&gt; type(intList)
&lt;class 'list'&gt;
</code></pre>
<p>Can someone confirm or deny this for me please?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are exactly correct. In Python 3, <code>map</code> returns an iterator, which you can only iterate over once. If you iterate over an iterator a second time, it will raise <code>StopIteration</code> immediately, as though it were empty. <code>max</code> consumes the whole thing, and <code>min</code> sees the iterator as empty. If you need to use the elements more than once, you need to call <code>list</code> to get a list instead of an iterator.</p>
</div>
<div class="post-text" itemprop="text">
<p>from your <code>map</code> documentation:</p>
<blockquote>
<p>Return an iterator that applies function to every item of iterable, yielding the results.</p>
</blockquote>
<p>and from <a href="http://docs.python.org/3/library/stdtypes.html#typeiter" rel="noreferrer">http://docs.python.org/3/library/stdtypes.html#typeiter</a></p>
<blockquote>
<p>Once an iteratorâ€™s <strong>next</strong>() method raises StopIteration, it must continue to do so on subsequent calls.</p>
</blockquote>
<p>So an iterator, regardless of the underlying data object, can only be used once.  It builds on the concept of a generator.</p>
<p><code>itertools.tee</code> can be used make multiple independent iterators from one.</p>
<pre><code>l1,l2 = itertools.tee(intList,2)
max(l1)
min(l2)
</code></pre>
</div>
<span class="comment-copy">you can also call tuple or set on map object if it suits your purposes better than list</span>
