<div class="post-text" itemprop="text">
<p>I have an assignment in a mooc where I have to code a function that returns the cumulative sum, cumulative product, max and min of an input list.<br/>
This part of the course was about functional programming, so I wanted to go all out on this, even though I can use other ways.<br/>
So I tried this:  </p>
<pre><code>from operator import mul
from itertools import repeat
from functools import reduce
def reduce2(l):
    print(l)
    return reduce(*l)
def numbers(l):
    return tuple(map(reduce2, zip([sum, mul,min, max], repeat(l,4))))
l=[1,2,3,4,5]
numbers(l)
</code></pre>
<p>My problem is that it doesn't work. zip will pass only one object to reduce if I use it inside map, and unpacking the zip will yield the 4 tuple of (function and argument list l) so I defined reduce2 for this reason, I wanted to unpack the zip inside it but it did not work.<br/>
Python returns a TypeError: int' object is not iterable<br/>
I thought that I could use return reduce(l[0],l[1]) in reduce2, but there is still the same Error.<br/>
I don't understand the behavior of python here. 
If I merely use return reduce(l), it returns again a TypeError: reduce expected at least 2 arguments, got 1</p>
<p>What's happening here? How could I make it work? 
Thanks for your help.</p>
</div>
<div class="post-text" itemprop="text">
<p>Effectively, you are trying to execute code like this:</p>
<pre><code>xs = [1, 2, 3, 4, 5]
reduce(sum, xs)
</code></pre>
<p>But <code>sum</code> takes an iterable and isn't really compatible with direct use via <code>reduce</code>. Instead, you need a function that takes 2 arguments and returns their sum -- a function analogous to <code>mul</code>. You can get that from <code>operator</code>:</p>
<pre><code>from operator import mul, add
</code></pre>
<p>Then just change <code>sum</code> to <code>add</code> in your program.</p>
<p>BTW, functional programming has a variable naming convention that is really cool: <code>x</code> for one thing, and <code>xs</code> for a list of them. It's much better than the hard-to-read <code>l</code> variable name. Also it uses singular/plural to tell you whether you are dealing with a scalar value or a collection.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/a/40822407/6732794">FMc answer's</a> correctly diagnoses the error in your code. I just want to add a couple alternatives to your <code>map</code> + <code>zip</code> approach. </p>
<p>For one, instead of defining a special version of <code>reduce</code>, you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.starmap" rel="nofollow noreferrer">itertools.starmap</a> instead of <code>map</code>, which is designed specifically for this purpose:</p>
<pre><code>def numbers(xs): 
    return tuple(starmap(reduce, zip([add, mul, min, max], repeat(xs))))
</code></pre>
<p>However, even better would be to use the often ignored <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer">variadic version</a> of <code>map</code> instead of manually zipping the arguments:</p>
<pre><code>def numbers(xs):
    return tuple(map(reduce, [add, mul, min, max], repeat(xs)))
</code></pre>
<p>It essentially does the <code>zip</code> + <code>starmap</code> for you. In terms of functional programming, this version of <code>map</code> is analogous to Haskell's <a href="https://hackage.haskell.org/package/base-4.9.0.0/docs/Prelude.html#v:zipWith" rel="nofollow noreferrer">zipWith</a> function. </p>
</div>
<span class="comment-copy">Thanks a lot for the precision about naming conventions. I wasn't aware of that. Well done for add, actually sum is redundant with reduce, now I understand.</span>
<span class="comment-copy">I knew starmap but didn't think of it, on the other hand, this version of map was unknown to me. I hope your answer get upvoted more. I will accept FMc's answer as he did answer first, but yours' deserves praise too.</span>
