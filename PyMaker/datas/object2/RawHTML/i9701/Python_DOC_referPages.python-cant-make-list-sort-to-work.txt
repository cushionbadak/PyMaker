<div class="post-text" itemprop="text">
<pre><code>def sort_line(line1,line2):

    for x1,y1,x2,y2 in line1:
        mn1 = min(x1,x2)
    for x1,y1,x2,y2 in line2:
        mn2 = min(x1,x2)
    return mn1 &lt; mn2 

lines.sort(sort_line)
</code></pre>
<p>Here lines has 4 int in every row. From what I understood from python wiki is that I need to pass a compare function as argument in the sort() function. But I get the following error,</p>
<pre><code>&lt;ipython-input-107-b0e2f3c756cf&gt; in draw_lines(img, lines, color, thickness)
     69     """
     70 
---&gt; 71     lines.sort(sort_line)
     72 
     73     for line in lines:

TypeError: an integer is required (got type function)
</code></pre>
<p>I tried with sorted() but couldn't make it work either.</p>
<p>Python and anaconda version</p>
<blockquote>
<p>Python 3.5.2 |Anaconda 4.2.0 (64-bit)| (default, Jul  5 2016,
  11:41:13) [MSC v.1900 64 bit (AMD64)] on win32</p>
</blockquote>
<p>I'm running the code in jupyter notebook.</p>
<p>My implementation I think is same as the following question but mine doesn't work.</p>
<p><a href="https://stackoverflow.com/questions/11850425/custom-python-list-sorting">Custom Python list sorting</a></p>
<p>After following Martijn's answer I modified my code to this</p>
<pre><code>lineList = lines.tolist()  //lines is a numpy array so I converted it to list
print ('lineList: ',lineList)
lineList.sort(key=lambda l: min(l[0], l[2]))
lines = np.array(lineList)
</code></pre>
<p>Gives me the following error</p>
<pre><code>&lt;ipython-input-115-06412e8f5aba&gt; in &lt;lambda&gt;(l)
     72     lineList = lines.tolist()
     73     print ('lineList: ',lineList)
---&gt; 74     lineList.sort(key=lambda l: min(l[0], l[1]))
     75     lines = np.array(lineList)
     76 

IndexError: list index out of range
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are making several mistakes. You didn't read the documentation close enough; the <code>cmp</code> function option is gone in Python 3. You also implemented your <code>cmp</code> function incorrectly, and last but not least, you don't need to use a <code>cmp</code> function at all, you can use a <a href="https://wiki.python.org/moin/HowTo/Sorting#Key_Functions" rel="nofollow noreferrer"><code>key</code> function</a> to extract the minimum of the two exact values in the lists you are sorting.</p>
<p>You need to pay close attention to the section you appear to be reading, <a href="https://wiki.python.org/moin/HowTo/Sorting#The_Old_Way_Using_the_cmp_Parameter" rel="nofollow noreferrer"><em>The Old Way Using the cmp Parameter</em></a>:</p>
<blockquote>
<p>In Py3.0, the <code>cmp</code> parameter was removed entirely (as part of a larger effort to simplify and unify the language, eliminating the conflict between rich comparisons and the <code>__cmp__</code> methods). </p>
</blockquote>
<p>The error message is a little confusing here, but <code>list.sort()</code> takes <em>no</em> positional arguments. From the <a href="https://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow noreferrer"><code>list.sort()</code> documentation</a>:</p>
<blockquote>
<p><code>sort(*, key=None, reverse=None)</code></p>
</blockquote>
<p>The <code>*</code> indicates no positional arguments are accepted, and there is no <code>cmp</code> option.</p>
<p>Going back to the Sorting Howto:</p>
<blockquote>
<p>When porting code from Python 2.x to 3.x, the situation can arise when you have the user supplying a comparison function and you need to convert that to a key function. The following wrapper makes that easy to do: </p>
<pre><code>def cmp_to_key(mycmp):
</code></pre>
<p>[...]</p>
<p>In Python 2.7, the <code>cmp_to_key()</code> tool was added to the <code>functools</code> module. </p>
</blockquote>
<p>and again from the <code>list.sort()</code> documentation:</p>
<blockquote>
<p>The <code>functools.cmp_to_key()</code> utility is available to convert a 2.x style <code>cmp</code> function to a key function.</p>
</blockquote>
<p>You also incorrectly implemented your <code>cmp</code> function; there is no need to iterate, and you have to return <code>-1</code>, <code>0</code> or <code>1</code> to indicate relative order (so you would have to use <code>cmp(min(list1), min(list2))</code> if there still was a built-in <code>cmp()</code> function).</p>
<p>However, you can sort your data <strong>without</strong> a (slow) <code>cmp</code> function. All you need to do is to extract the <code>min()</code> of the two values of each list, in a sort key:</p>
<pre><code>lines.sort(key=lambda l: min(l[0], l[2]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>According to the <a href="https://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow">documentation</a>:</p>
<blockquote>
<p>sort() accepts two arguments that can only be passed by keyword (keyword-only arguments): <em>key</em> and <em>reverse</em>.</p>
</blockquote>
<p>The <em>cmp</em> parameter only exists in Python 2, it is generally considered as a deprecated usage.</p>
</div>
<span class="comment-copy">But doesn't the sort function requires a compare function as argument? and I'm passing the compare function in the sort function.</span>
<span class="comment-copy">You appear to be expecting sorting to use a <code>cmp()</code> function. It does not; you are only given <b>one</b> element and are expected to give a sort key. You are getting confused with Python 2 here.</span>
<span class="comment-copy">You appear to be reading the <i>The Old Way Using the cmp Parameter</i> section on the wiki, that option is basically gone in Python 3 (or use the <i>slow</i> <a href="https://docs.python.org/3/library/functools.html#functools.cmp_to_key" rel="nofollow noreferrer"><code>functools.cmp_to_key()</code> wrapper</a>).</span>
<span class="comment-copy">All this <i>is</i> clearly documented in the sorting howto however, as well as in the <a href="https://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow noreferrer"><code>list.sort()</code> method documentation</a>.</span>
<span class="comment-copy">Thanks very much. I understand now. I want to sort the list according to smallest x values in each row. My code for comp function was wrong and I modified it now. So for each row in list the row with smallest x (between each x1,x2 in every row) should be the first element after sort and then the next. But using min would return the smallest between all 4 elements right? In that case it wont' serve my purpose :( But thanks very much now I understand the reason of the error.</span>
<span class="comment-copy">@Tahlil: I saw that edit and already corrected for it. Just have a function (provided by a <code>lambda</code> expression in my example) that returns the minimum of those two values.</span>
<span class="comment-copy">I'm getting array index out of bound error now with the lambda function. Edited the question with the error. I'm very new in python :( Thanks for your patience.</span>
<span class="comment-copy">@Tahlil: then you have entries with fewer than 3 elements. Either use <code>lambda l: (len(l) &gt; 2, min(l[0], l[2]))</code> to sort those shorter lists separately, or remove such entries from the input list first. You didn't give us any sample data to sort, so we can only <i>guess</i> at your exact data structures here.</span>
<span class="comment-copy">printing linesList shows every row has 4 elements. The output of the print just before the lambda function line is: lineList:  [[[515, 327, 854, 538]], [[774, 501, 832, 539]], [[499, 320, 763, 492]], [[310, 423, 446, 331]], [[319, 425, 454, 327]], [[524, 333, 853, 539]], [[730, 472, 796, 514]], [[698, 451, 758, 489]], [[361, 392, 418, 351]], [[498, 320, 558, 359]], [[318, 425, 415, 355]], [[612, 394, 828, 535]], [[387, 370, 436, 336]]]</span>
