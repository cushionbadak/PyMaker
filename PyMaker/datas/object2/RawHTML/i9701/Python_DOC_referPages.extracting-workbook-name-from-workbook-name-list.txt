<div class="post-text" itemprop="text">
<p>I'm a noob in python.  Currently, I have a list of workbook names that I am passing through the load_workbook function.  However, I have a bunch of if statements that depends on the workbook.  So I need to parse their names or find another way to do checks with the workbooks.  Heres my code:</p>
<pre><code>for x in range(0, len(allbooks)):

    wb = openpyxl.load_workbook(allbooks[x], keep_vba = True)
    print (wb)

    if wb == "Subportfolio 1.xlsm":
        ws = wb.worksheet("Positions")
        if datetime.datetime.today().weekday() == 6: #check if its sunday
            if ws.cells('D1') != "Price on %s" % last_friday: #check to see if date is last friday
                print ("Need to Update Subportfolio")
        elif ws.cells('D1') != "Price on %s" % d: #check to see if date is today
            print ("Need to Update Subportfolio")

    elif wb == "Mock Portfolio - He Yibo 2 (TMT).xlsm":
        ws = wb.worksheet("Positions")
        if datetime.datetime.today().weekday() == 6:
            if ws.cells('E1') != "Price on %s" % last_friday:
                print ("Need to Update Mock Portfolio - He Yibo 2 (TMT)")
        elif ws.cells('E1') != "Price on %s" % d:
            print ("Need to Update Mock Portfolio - He Yibo 2 (TMT)")

    elif wb == "Mock Portfolio - He Yibo 2 (Utilities).xlsm":
        ws = wb.worksheet("Positions")
        if datetime.datetime.today().weekday() == 6:
            if ws.cells('E1') != "Price on %s" % last_friday:
                print ("Need to Update Mock Portfolio - He Yibo 2 (Utilities)")
        elif ws.cells('E1') != "Price on %s" % d:
            print ("Need to Update Mock Portfolio - He Yibo 2 (Utilities)")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This first part is not very pythonic indeed. In Python, you don't need indices to loop over a list. A <code>for</code> in Python acts as a foreach in most other languages, so this </p>
<pre><code>for x in range(0, len(allbooks)):

    wb = openpyxl.load_workbook(allbooks[x], keep_vba = True)
</code></pre>
<p>can be made shorter into </p>
<pre><code>for book in allbooks:
    wb = openpyxl.load_workbook(book, keep_vba = True)
</code></pre>
<p>Another way to improve this would be to replace all the <code>elif</code> statements with a dict or namedtuples. If it's only the cell that changes you can easily do this with a dict</p>
<pre><code>books = {'Subportfolio 1.xlsm': 'D1', 'Mock Portfolio - He Yibo 2 (TMT).xlsm', 'E1'} #etcetera
for book, important_cell in books.items():
    wb = openpyxl.load_workbook(book, keep_vba = True)
    ws = wb.worksheet("Positions")
    message = 'Need to Update %s' % book
    if datetime.datetime.today().weekday() == 6: #check if its sunday
        if ws.cells(important_cell) != "Price on %s" % last_friday: #check to see if date is last friday
            print (message)
    elif ws.cells(important_cell) != "Price on %s" % d: #check to see if date is today
        print (message)
</code></pre>
<h1>More parameters per workbook</h1>
<p>When you have more parameters per workbook, as for example the worksheetname, you can do that in a few ways</p>
<h2>namedtuple</h2>
<p>If it is a fixed number of parameters which will not change, a <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer">namedtuple</a> is a very convenient structure:</p>
<pre><code>myworkbook = namedtuple('myworkbook', ['filename', 'sheetname', 'cell'])
allbooks = [myworkbook('filename0', 'sheetname0', 'cell0'),
            myworkbook('filename1', 'sheetname1', 'cell1'),...]
for book in allbooks:
    wb = openpyxl.load_workbook(book.filename, keep_vba = True)
    ws = wb.worksheet(book.sheetname)
    message = 'Need to Update %s' % book.filename
    if datetime.datetime.today().weekday() == 6: #check if its sunday
        if ws.cells(book.cell) != "Price on %s" % last_friday: #check to see if date is last friday
            print (message)
    elif ws.cells(book.cell) != "Price on %s" % d: #check to see if date is today
        print (message)
</code></pre>
<h2>dict of dict</h2>
<p>this works approximately the same, only this is more generic. It uses the <code>dict.get</code> method which takes a default argument when the key is missing in the dict</p>
<pre><code>default_cell = 'D1'
default_sheet = 'Positions'

books = {'Subportfolio 1.xlsm': {'sheet' = 'other_sheet'}, 'Mock Portfolio - He Yibo 2 (TMT).xlsm': {'cell': 'E1'}} #etcetera
for book, book_info in books.items():
    wb = openpyxl.load_workbook(book, keep_vba = True)
    ws = wb.worksheet(book_info.get('sheet', default_sheet))
    message = 'Need to Update %s' % book
    important_cell = book_info.get('cell', default_cell)
    if datetime.datetime.today().weekday() == 6: #check if its sunday
        if ws.cells(important_cell) != "Price on %s" % last_friday: #check to see if date is last friday
            print (message)
    elif ws.cells(important_cell) != "Price on %s" % d: #check to see if date is today
        print (message)
</code></pre>
<h2>Class</h2>
<p>you could make a MyWorkbookClass to keep the information of each workbook, but this might be overkill. A <code>namedtuple</code>acts as a kind of mini-class with fixed members</p>
</div>
<div class="post-text" itemprop="text">
<p>I haven't worked with that module, but here's an alternate approach with what I do know:</p>
<p>Assuming that your workbooks are in the same folder, you might be able to use the <code>os</code> module to grab a list of your filenames. Something like the following:</p>
<pre><code>import os
import xlrd
os.chdir("c:/mypath/myfolder")
my_filenames = os.listdir()
for filename in my_filenames:
    if filename == 'desired file.xls'
        my_workbook = xlrd.open_workbook(my_filenames[i])
</code></pre>
<p>You can then parse <code>my_filenames</code> and open the desired workbook by its name using the <code>xlrd</code> module. Granted, indices are given differently with the functions in this module.</p>
</div>
<span class="comment-copy">What are the "names" you are referring to? Sounds like you should try and simplify the question.</span>
<span class="comment-copy">Sorry, I meant the workbook names.</span>
<span class="comment-copy">Thanks for the advice!  I'm going to try this.  The only issue I can think of is the setting the ws to equal the worksheet because those 3 aren't the only workbooks I need to check.  Some have different names for the sheet it needs to check.  Anyway around this?</span>
<span class="comment-copy">I changed my original for loop into the one you posted (without the dictionary) and realized I can use if book == "Subportfolio 1.xlsm" but now I'm getting an error "TypeError: 'list' object is not callable" with ws = wb.worksheets("Positions")</span>
<span class="comment-copy">I see my error now.  Basically, I am just a noob lol.  So, to solve all my problems, I switched the 'for' loop, did "if book == "Subportfolio 1.xlsm:" and changed ws = wb.worksheets("Positions") into ws = wb.get_sheet_by_name("Positions").  Thanks again for your help!</span>
<span class="comment-copy">If you use those parameters correctly, there is no more need for all the <code>if</code>-statements</span>
<span class="comment-copy">If you need to invoke a different method depending on which workbook, even that is possible. Functions are first-class citizens in Python, so you can pass on a reference to them</span>
<span class="comment-copy">Thanks! This should work but unfortunately, I won't have them in all the same directory.  I tried os.path.basename but that gave me a "Type Error: object of type Workbook has no len()"</span>
<span class="comment-copy">Is there any particular method defining where your files are being stored?</span>
