<div class="post-text" itemprop="text">
<p>Sorry for asking this newbie question. </p>
<p>In C++, I can have something like this:</p>
<pre><code>map&lt;string, vector&lt;int&gt;&gt; m
m["A1"].push_back(1); 
m["A1"].push_back(2); 
m["B3"].push_back(3); //etc
</code></pre>
<p>The thing is that I wanna plot it out with mathplot. Each vector will be sorting in according to their string value "A1", "B3", etc. </p>
<p>Can I implement something similar in python?
Note that I will have to plot with mathplot. So accessing the vector should be very easy. </p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, the equivalent of a hashmap is a <code>Dict</code> (in fact, most implementation of <code>Dict</code> are hashmaps). To ensure ordering across implementations, you will want to use an <code>OrderedDict</code>. A <code>List</code> is equivalent to a vector. Therefore, what you want is an <a href="https://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>OrderedDict</code></a> of <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer"><code>Lists</code></a>. </p>
<pre><code>from collections import OrderedDict

// Create the dictionary
d = {'A1': [1, 2], 'B2': [2, 3]}

// Order it by key
m = OrderedDict(sorted(d.items(), key=lambda t: t[0]))

// Example of appending to one of the lists
m['A1'].append(3)

print(m)
</code></pre>
<p>This will print:</p>
<pre><code>OrderedDict([('A1', [1, 2, 3]), ('B2', [2, 3])])
</code></pre>
<p>You can also add additional keys containing Lists like this:</p>
<pre><code>m["B2"] = [2, 3, 5, 7]
</code></pre>
<p>You will then need to re-sort the <code>OrderedDict</code>.</p>
<p>A minor note: <code>Dicts</code> in Python aren't ordered; they happen to be ordered in very new versions of CPython 3, but that's an implementation detail. Therefore, <code>OrderedDict</code> is the most applicable datastructure here, to ensure that your code is portable. I'm mentioning this because many people are very excited about this feature of CPython, but it's not guaranteed to work everywhere. </p>
</div>
<div class="post-text" itemprop="text">
<p>Use a <code>Dict</code> :</p>
<pre><code>m = {"A1" : [], "B3" : []}
m["A1"].append(1)
m["A1"].append(2)
m["B3"].append(3)
</code></pre>
<p>Note that you need to insert the <code>key</code> first in the dictionary, otherwise it would show <code>KeyError</code>. If you want to add a new <code>key</code>, suppose <code>"A2"</code> here, simply do :</p>
<pre><code>m["A2"] = []
</code></pre>
<p>To sort the dictionary according to its keys, use an <code>OrderedDict</code> :</p>
<pre><code>m = OrderedDict(sorted(m.items(), key = lambda t : t[0]))
</code></pre>
<p>One more thing, only non-mutable items such as strings, tuples, int, etc. are allowed as <code>keys</code> in a python dictionary, you can't have a dictionary with a <code>list</code> like <code>[1,2,3]</code> as one of the keys.</p>
</div>
