<div class="post-text" itemprop="text">
<pre><code>import math
def is_prime(n):
    if n % 2 == 0 and n &gt; 2: 
        return False
    return all(n % i for i in range(3, int(math.sqrt(n)) + 1, 2))
</code></pre>
<p>I received an assignment where I had to find the sum of all prime numbers up to 2 million and the code I wrote originally took way too long to run so the teacher gave me this algorithm to check if the number is prime. However, I don't quite seem to get what's going on in the return all statement and what it has to do with prime numbers</p>
</div>
<div class="post-text" itemprop="text">
<p>Since I was not nice to you. Let me just make a little extra effort and explain it you.</p>
<p>First read this:
<a href="http://wiki.planetmath.org/howtofindwhetheragivennumberisprimeornot" rel="nofollow noreferrer">http://wiki.planetmath.org/howtofindwhetheragivennumberisprimeornot</a></p>
<hr/>
<pre><code>import math
def is_prime(n):
    if n % 2 == 0 and n &gt; 2: 
        return False
    return all(n % i for i in range(3, int(math.sqrt(n)) + 1, 2))
</code></pre>
<p>Let's see whats happening here.</p>
<p><strong>Step1.</strong> <code>if n % 2 == 0 and n &gt; 2</code><br/>
Check if the number is divisible by 2 and also greater than 2. If these condition fail then the number is not prime. Don't proceed any further and return false.</p>
<p><strong>Step2a.</strong> <code>int(math.sqrt(n)) + 1</code><br/>
Calculate the square root of the number (it might be float so we convert it into int) and then add 1 to it.</p>
<p><strong>Step2b.</strong> <code>range(3, int(math.sqrt(n)) + 1, 2)</code><br/>
Create a list starting from 3 to the value calculated in step2a with a step size of 2. So basically it will get all the odd numbers from 3 to step2a value. Why just odd? Because evens are not prime!</p>
<p><strong>Step2c.</strong> <code>(n % i for i in range(3, int(math.sqrt(n)) + 1, 2)</code><br/>
In this step we are iterating over the list created in 2b and dividing n by all of those numbers (by dividing here i mean taking modulus) and we are storing the results in an iterator object.</p>
<p><strong>Step2d.</strong> <code>all()</code><br/>
If n was divisible by any number of list from 2b, then a 0 will be stored on <code>n % i</code>. And we know that a prime number is not divisible by any number other than 1 and itself. If we get a <code>0</code> then we are done, it's not a prime number.<br/>
all() will return true only if all the values are non zero.<br/>
Eg. <br/>
<code>print all([1,2,3,4,5])--&gt;True</code><br/>
<code>print all([0,1,2,3,4])--&gt;False</code></p>
<p>I hope, now it's clear to you.</p>
</div>
<span class="comment-copy">@MohammadYusufGhazi, as OP's reputation suggests, he is quite new in this site. He should not deserve this type of critism. Never laugh at people who are struggling, he didn't commit a crime. Try to help him or ignore. Your first comment is more worse than the question itself.</span>
<span class="comment-copy">Your teacher gave you a clever solution which uses <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer"><code>all</code></a>  and the Python idea of truth. Try to calculate the formular using some <code>n</code>s. Start from the inside ('math.sqrt(n)`)  and write down each step. You will see a pattern for primes and non-primes.</span>
<span class="comment-copy">@user7229209, Welcome to Stack Overflow, SO is more of a question-answer based site. What you are seeking is kind of explanation of a code snippet, which is beyond the scope of this site. I suggest you to do some google search to understand what is going one. The longer you struggle, it will help you that much later.</span>
<span class="comment-copy">This is exactly what's happening in your code. Read here: <a href="http://wiki.planetmath.org/howtofindwhetheragivennumberisprimeornot" rel="nofollow noreferrer">wiki.planetmath.org/howtofindwhetheragivennumberisprimeornot</a></span>
