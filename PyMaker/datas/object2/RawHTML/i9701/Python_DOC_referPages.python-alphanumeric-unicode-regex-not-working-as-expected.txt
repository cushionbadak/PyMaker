<div class="post-text" itemprop="text">
<p>Trying to write a python regex that will validate a string comprised of</p>
<ul>
<li>Any unicode alphanumeric character (including combining characters)</li>
<li>Any number of space characters</li>
<li>Any number of underscores</li>
<li>Any number of dashes</li>
<li>Any number of periods</li>
</ul>
<p>My test strings:</p>
<pre><code>9 Melodía.de_la-montaña
9 Melodía.de_la-montaña
</code></pre>
<p>or as string literals produced with <code>ascii()</code>:</p>
<pre><code>str1 = '9 Melod\xeda.de_la-monta\xf1a'
str2 = '9 Melodi\u0301a.de_la-montan\u0303a'
</code></pre>
<p>These look identical but aren't, one is normalized and the other uses the combining characters for the inflections.</p>
<p>Here's my first stab:</p>
<pre><code>import re

reg = re.compile("^[\w\.\- ]+$", re.IGNORECASE)
re.search(reg, str1) # None
re.search(reg, str2) # None
</code></pre>
<p>If I remove the positional qualifiers and use <code>findall</code> instead of <code>search</code> I get lists like this <code>['9 Melodi', 'a.de_la-montan', 'a']</code> or <code>['9 Melod', 'a.de_la-monta', 'a']</code>.</p>
<p>I've even tried <code>re.compile("^[\w\.\- ]+$", re.IGNORECASE | re.UNICODE)</code> although that should be unnecessary in python 3 right?</p>
<p>In searching for an answer I've found <a href="https://stackoverflow.com/questions/2039140/python-re-how-do-i-match-an-alpha-character">this question</a> and <a href="https://stackoverflow.com/questions/8923949/matching-only-a-unicode-letter-in-python-re">this one</a> and <a href="https://stackoverflow.com/questions/4722998/python-regular-expression-to-match-alpha-numeric-not-working">this one</a> and <a href="https://stackoverflow.com/questions/393843/python-and-regular-expression-with-unicode">this one</a> but they are all old, deal with python 2, and seem to suggest that the regex I wrote <em>should</em> work. The python 3.5 regex docs mention that <code>\w</code> should match unicode but offer no actual examples involving non-ASCII text.</p>
<p>How do I match the desired strings?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your first sample, <code>str1</code>, matches just fine; <code>\w</code> includes <em>all</em> Unicode word characters, including Latin characters with accents.</p>
<p>You can normalise your strings to the combined form with <a href="https://docs.python.org/3/library/unicodedata.html#unicodedata.normalize" rel="nofollow noreferrer"><code>unicodedata.normalize()</code></a>, use the <code>NFC</code> form:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; str1 = '9 Melod\xeda.de_la-monta\xf1a'
&gt;&gt;&gt; str2 = '9 Melodi\u0301a.de_la-montan\u0303a'
&gt;&gt;&gt; reg = re.compile("^[\w\.\- ]+$")
&gt;&gt;&gt; reg.search(str1)
&lt;_sre.SRE_Match object; span=(0, 23), match='9 Melodía.de_la-montaña'&gt;
&gt;&gt;&gt; reg.search(str2) is None
True
&gt;&gt;&gt; reg.search(unicodedata.normalize('NFC', str2))
&lt;_sre.SRE_Match object; span=(0, 23), match='9 Melodía.de_la-montaña'&gt;
</code></pre>
<p>Note that the <code>re.IGNORECASE</code> flag is not needed, <code>\w</code> doesn't care about case.</p>
</div>
<span class="comment-copy">Is normalising the string first an option? <code>unicodedata.normalize('NFC', somestr)? The questions you link to don't apply to your situation, not because they are in Python 2 (the regex engine is the basically same between 2 and 3, except </code>re.UNICODE` is now the default), but because they are not trying to match combined characters.</span>
<span class="comment-copy">Can you please include the <code>print(ascii(str1))</code> and <code>print(ascii(str2))</code> versions of the strings too? That way we can trivially copy them without having to worry about using the right encodings.</span>
<span class="comment-copy">@MartijnPieters I could, and my first test string <i>is</i> normalized, but the regex still isn't matching correctly.</span>
<span class="comment-copy">You probably want to switch to the <a href="https://pypi.python.org/pypi/regex" rel="nofollow noreferrer"><code>regex</code> library</a> (slated to be moved into the Python stdlib eventually), as it gives you much more expressive power over what is included and what isn't.</span>
<span class="comment-copy">I can't reproduce the failure for the first case; I get <code>['9 Melodía.de_la-montaña']</code>. <code>\w</code> matches the Latin-1 codepoints just fine.</span>
<span class="comment-copy">Tested an works. Just waiting to accept.</span>
