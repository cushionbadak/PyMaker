<div class="post-text" itemprop="text">
<p>I am trying to print individual letters, it works fine with english and chinese pinyin but when trying to work with other than those I get unicode chars (Diacritic) as well</p>
<p>Consider this word </p>
<pre><code>महाभूकम्पले
</code></pre>
<p>when I try to separate it with key board arrow keys &amp; space this is the result for <strong>महाभूकम्पले</strong>  just like it would happen with an English word '<strong>EXAMPLE</strong>'</p>
<pre><code>E X A M P L E

 म हा भू क म्प ले
</code></pre>
<p>Now when I try to run a python scrip to automate this with this code</p>
<pre><code>data= 'महाभूकम्पले'
index = 0
while index &lt; len(data):
    letter = data[index]
    print (letter)
    index = index + 1
</code></pre>
<p>my result is this: (It has separated all Diacritic as well)</p>
<pre><code>म
ह
ा
भ
ू
क
म
्
प
ल
े
</code></pre>
<p>What I require is to have an out put as this</p>
<pre><code>म 
हा 
भू 
क 
म्प 
ले
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A quick solution (hopefully) without digging into the codepoint semantics (otherwise better see Martin's answer). Basing on output of:</p>
<pre><code>s = 'महाभूकम्पले'
for c in s:
    print(c, unicodedata.category(c))
</code></pre>
<p>Which is:</p>
<pre><code>म Lo
ह Lo
ा Mc
भ Lo
ू Mn
क Lo
म Lo
् Mn
प Lo
ल Lo
े Mn
</code></pre>
<p>We can join codepoints in these categories (<em>Mc</em>, <em>Mn</em>) with preceding codepoint:</p>
<pre><code>import unicodedata
from functools import reduce

def reducer(r, v):
    if unicodedata.category(v) in ('Mc', 'Mn'):
        r[-1] = r[-1] + v
    else:
        r.append(v)
    return r

print(reduce(reducer, 'महाभूकम्पले', []))
</code></pre>
<p>The output corresponds to number of combined character I have in <code>gedit</code>:  </p>
<pre><code>['म', 'हा', 'भू', 'क', 'म्', 'प', 'ले']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your data does actually contain 11 characters:</p>
<pre><code>&gt;&gt;&gt; data = 'महाभूकम्पले'
&gt;&gt;&gt; len(data)
11
</code></pre>
<p>That's because there are several diacritical characters in there, which, when printed, combine with the preceding character. You'd have to detect these and print them together.</p>
<p>This is easier said than done.</p>
<p>The Unicode database has various ways of spelling characters that can be combined. In Western alphabets, you have diacritics like the cedille (the curl on the <code>ç</code>) or accents or tremas (<code>á</code> or <code>ä</code>), which in Unicode can be expressed as both 1 and two characters, where these forms are called the <em>canonical composed normal form</em> and <em>canonical decomposed normal form</em>, and you can use the <a href="https://docs.python.org/3/library/unicodedata.html#unicodedata.normalize" rel="nofollow noreferrer"><code>unicodedata.normalize()</code> function</a> to convert between the two forms.</p>
<p>But for the Devanagari script, there is no composed form; diacritics are always specified separately. Instead, for these characters the <em>line break behaviour</em> is recorded in the <code>lb</code> table; how these should be handled when a line break needs to be inserted. For Devanagari diacritics, the behaviour is set to <code>CM</code>, or <em>Combining Mark</em>. The exact meaning is described in the <a href="http://unicode.org/reports/tr14/" rel="nofollow noreferrer">Unicode Line Breaking Algorithm</a>. <code>CM</code> is described as:</p>
<blockquote>
<p>Class: <strong>CM</strong><br/>
  Descriptive Name: Combining Mark<br/>
  Examples: Combining marks, control codes<br/>
  Behaviour: Prohibit a line break between the character and the preceding character</p>
</blockquote>
<p>The problem is that the <code>lb</code> data table is not available from the <code>unicodedata</code> module.</p>
<p>You'd have to build your own table, using the <a href="http://www.unicode.org/Public/UCD/latest/ucd/LineBreak.txt" rel="nofollow noreferrer"><code>LineBreaks.txt</code> table</a> as a source, then test if the next character is in that table as <code>CM</code> and print it on the same line.</p>
<p>To just extract the <code>CM</code> codepoints:</p>
<pre><code>cm_chars = set()
with open('LineBreak.txt') as lbtable:
    for line in lbtable:
        if ';CM' not in line:
            continue
        chars, category = line.partition(' ')[0].split(';')
        if category != 'CM':
            continue
        chars = chars.split('..')
        for codepoint in range(int(chars[0], 16), int(chars[-1], 16) + 1):
            cm_chars.add(chr(codepoint))
</code></pre>
<p>and then use this to detect if a next character is to be printed on the same line:</p>
<pre><code>&gt;&gt;&gt; data = 'महाभूकम्पले'
&gt;&gt;&gt; index = 0
&gt;&gt;&gt; while index &lt; len(data):
...     letters = data[index]
...     while index + 1 &lt; len(data) and data[index + 1] in cm_chars:
...         letters += data[index + 1]
...         index += 1
...     print(letters)
...     index += 1
...
म
हा
भू
क
म्
प
ले
</code></pre>
<p>This only covered CM characters, however. You probably also want to cover <code>GL</code> (Glue) characters, which attach to both the preceding <em>and</em> the next character in a sequence. For a more complete solution, you'd need to build a <code>no_linebreak(current, next)</code> function that took the whole <code>lb</code> table in to account to determine if a linebreak can exist between two characters.</p>
</div>
<span class="comment-copy">Welcome to the world of Unicode, and combining characters!</span>
<span class="comment-copy">In Unicode, <a href="https://codepoints.net/U+093E" rel="nofollow noreferrer">U+093E DEVANAGARI VOWEL SIGN AA</a> is a <i>separate character</i>. Many languages have these. You'll have to build your own rules as to when you want to combine multiple codepoints and print them together rather than print them on separate lines.</span>
<span class="comment-copy">I guess you could detect <a href="https://codepoints.net/search?lb=CM" rel="nofollow noreferrer">line-break combining marks</a>; but that metadata is not available in the <code>unicodedata</code> module, so you'd have to make this a manual table.</span>
<span class="comment-copy">This doesn't apply to all languages; not all Spacing Marks (Mc) or Nonspacing marks (Mn) automatically belong on the same line. Anything in the SA line break category needs more language-specific context (yay!). And there are more categories you'd have to consider, like Cf and Me.</span>
<span class="comment-copy">perfect! thank you for providing such details.</span>
