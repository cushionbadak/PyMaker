<div class="post-text" itemprop="text">
<p>I have a number two, I have this list, how would I go about removing multiples of the number 2 from that list and update it?</p>
<pre><code>10 [2, 3, 4, 5, 6, 7, 8, 9, 10] 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>Methods:</h2>
<p><strong>Using a generator</strong></p>
<p>One of the first option that comes to mind is to make use of a generator. The generator would iterate through a sequence, and test if the current element is divisible by <code>n</code>. This allows you to have a more generic solution as well:</p>
<pre><code>def filter_by_multiple(seq, n):
    for i in seq:
        if i % n:
            yield i
</code></pre>
<p>Usage:</p>
<pre><code>&gt;&gt;&gt; filter_by_multiple([2, 3, 4, 5, 6, 7, 8, 9, 10], 2)
&lt;generator object filter_by_multiple at 0x000000374ED30258&gt;
&gt;&gt;&gt; list(filter_by_multiple([2, 3, 4, 5, 6, 7, 8, 9, 10], 2))
[3, 5, 7, 9]
&gt;&gt;&gt; 
</code></pre>
<p><strong>Using a generator expression</strong></p>
<p>While the above solution is fine,  is can be shortened even more by using <em>generator expressions</em>. generator expression are like list comprehensions, but unlike them, they return a <em>generator iterator</em> instead of a list.</p>
<p>Usage:</p>
<pre><code>&gt;&gt;&gt; l = [2, 3, 4, 5, 6, 7, 8, 9, 10]
&gt;&gt;&gt; list(el for el in l if el % 2)
[3, 5, 7, 9]
&gt;&gt;&gt; 
</code></pre>
<p><strong>Using</strong> <code>filter()</code>:</p>
<p>Among many of the builtin functions in Python, there is one for filtering list called <code>filter()</code>. The usually way to use <code>filter()</code> is to pass in the function you want to use to filter your list, and then the actual list you want filtered. In your case, you want to filter out every element the is not a multiple of two:</p>
<p>Usage:</p>
<pre><code>&gt;&gt;&gt; l = [2, 3, 4, 5, 6, 7, 8, 9, 10]
&gt;&gt;&gt; list(filter(lambda x: x % 2, l))
[3, 5, 7, 9]
&gt;&gt;&gt; 
</code></pre>
<p><strong>Using a list comprehension</strong></p>
<p>While all of the above are fine ways for filtering a list, probably the most obvious and canonical, is to use a list comprehension. In your case, your list comprehension, is dead simple.</p>
<p>Usage:</p>
<pre><code>&gt;&gt;&gt; l = [2, 3, 4, 5, 6, 7, 8, 9, 10]
&gt;&gt;&gt; [el for el in l if el % 2]
[3, 5, 7, 9]
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you have a list <code>l</code> and a number <code>n</code> you can remove all multiples of <code>n</code> from <code>l</code> with a list comprehension:</p>
<pre><code>l = [i for i in l if i%n]
</code></pre>
<p>writing <code>if i%n</code> here is the same as writing <code>if i%n != 0</code>, and <code>n</code> divides <code>i</code> iff <code>i%n==0</code></p>
</div>
<span class="comment-copy">do you want to only remove the second occurence onwards, is the order important ?</span>
<span class="comment-copy">are you by any chance implementing the sieve of Eratosthenes?</span>
<span class="comment-copy">Yes, I am currently trying to implement the sieve of Eratosthenes</span>
<span class="comment-copy">This makes a lot more sense. Thank you for your help</span>
<span class="comment-copy">@DarrienNguyen My pleasure. If your trying to figure which method to use, I suggest going with the generator expression(s). Hopeful before the week is out I can post some times for each method.</span>
<span class="comment-copy">I used a list comprehension, it seemed to yield me with the result i wanted</span>
<span class="comment-copy">@DarrienNguyen Well that is a fine choice, Just use what is easiest t to understand to you.</span>
<span class="comment-copy">What does the "i" variable mean in your code?</span>
<span class="comment-copy">Just like in any other <code>for</code> loop, in a list comprehension you consider the elements of an iterable one by one.  In this case, I'm using <code>i</code> to access the individual elements of the list.  Read more here: <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">docs.python.org/3/tutorial/â€¦</a></span>
<span class="comment-copy">Okay, I get it now thank you!</span>
