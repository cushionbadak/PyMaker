<div class="post-text" itemprop="text">
<p>Consider:</p>
<pre><code>class Item:
   def __init__(self, a, b):
       self.a = a
       self.b = b

class Items:
    GREEN = Item('a', 'b')
    BLUE = Item('c', 'd')
</code></pre>
<p>Is there a way to adapt the ideas for simple enums to this case? (see <a href="https://stackoverflow.com/questions/36932/whats-the-best-way-to-implement-an-enum-in-python">this question</a>) Ideally, as in Java, I would like to cram it all into one class.</p>
<p>Java model:</p>
<pre><code>enum EnumWithAttrs {
    GREEN("a", "b"),
    BLUE("c", "d");

    EnumWithAttrs(String a, String b) {
      this.a = a;
      this.b = b;
    }

    private String a;
    private String b;

    /* accessors and other java noise */
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python 3.4 has a <a href="https://docs.python.org/3/library/enum.html" rel="noreferrer">new Enum data type</a> (which has been <a href="https://pypi.python.org/pypi/enum34" rel="noreferrer">backported as <code>enum34</code></a> and <a href="https://pypi.python.org/pypi/aenum" rel="noreferrer">enhanced as <code>aenum</code></a><sup>1</sup>).  Both <code>enum34</code> and <code>aenum</code><sup>2</sup> easily support your use case:</p>
<p>[<code>aenum</code> py2/3]</p>
<pre><code>import aenum
class EnumWithAttrs(aenum.AutoNumberEnum):
    _init_ = 'a b'
    GREEN = 'a', 'b'
    BLUE = 'c', 'd'
</code></pre>
<p>[<code>enum34</code> py2/3 or <code>stdlib enum</code> 3.4+]</p>
<pre><code>import enum
class EnumWithAttrs(enum.Enum):

    def __new__(cls, *args, **kwds):
        value = len(cls.__members__) + 1
        obj = object.__new__(cls)
        obj._value_ = value
        return obj

    def __init__(self, a, b):
        self.a = a
        self.b = b

    GREEN = 'a', 'b'
    BLUE = 'c', 'd'
</code></pre>
<p>And in use:</p>
<pre><code>--&gt; EnumWithAttrs.BLUE
&lt;EnumWithAttrs.BLUE: 1&gt;

--&gt; EnumWithAttrs.BLUE.a
'c'
</code></pre>
<hr/>
<p><sup>1</sup> Disclosure:  I am the author of the <a href="https://docs.python.org/3/library/enum.html" rel="noreferrer">Python stdlib <code>Enum</code></a>, the <a href="https://pypi.python.org/pypi/enum34" rel="noreferrer"><code>enum34</code> backport</a>, and the <a href="https://pypi.python.org/pypi/aenum" rel="noreferrer">Advanced Enumeration (<code>aenum</code>)</a>  library.</p>
<p><sup>2</sup> <code>aenum</code> also supports <code>NamedConstants</code> and metaclass-based <code>NamedTuples</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a <a href="http://docs.python.org/library/collections.html#collections.namedtuple" rel="nofollow">namedtuple</a>:</p>
<pre><code>from collections import namedtuple

Item = namedtuple('abitem', ['a', 'b'])

class Items:
    GREEN = Item('a', 'b')
    BLUE = Item('c', 'd')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For Python 3:</p>
<pre class="lang-py prettyprint-override"><code>class Status(Enum):
    READY = "ready", "I'm ready to do whatever is needed"
    ERROR = "error", "Something went wrong here"

    def __new__(cls, *args, **kwds):
        obj = object.__new__(cls)
        obj._value_ = args[0]
        return obj

    # ignore the first param since it's already set by __new__
    def __init__(self, _: str, description: str = None):
        self._description_ = description

    def __str__(self):
        return self.value

    # this makes sure that the description is read-only
    @property
    def description(self):
        return self._description_
</code></pre>
<p>And you can use it as a standard enum or factory by type:</p>
<pre class="lang-py prettyprint-override"><code>print(Status.READY)
# ready
print(Status.READY.description)
# I'm ready to do whatever is needed
print(Status("ready")) # this does not create a new object
# ready
</code></pre>
</div>
<span class="comment-copy">What you are trying to do is not at all clear from the phrase "adapt the ideas for simple enums to this case".</span>
<span class="comment-copy">How would you do this in Java?</span>
<span class="comment-copy">Use a <a href="http://docs.python.org/library/collections.html#collections.namedtuple" rel="nofollow noreferrer">named tuple</a> perhaps? But then again, no, it's better to use a class for that instead.</span>
<span class="comment-copy">@NullUserException see edit.</span>
<span class="comment-copy">The link to the custom enum is dead. See the Python way of declaring the Planet enum: <a href="https://docs.python.org/3/library/enum.html#planet" rel="nofollow noreferrer">docs.python.org/3/library/enum.html#planet</a></span>
<span class="comment-copy">@Risadinha: dead link removed, code examples updated.</span>
<span class="comment-copy">Obviously I need to do some reading here.</span>
<span class="comment-copy">@bmargulies Or some watching. In this video recording of a PyCon talk] Raymond Hettinger explains why named tuples are awesome, how they work and use cases for them. <a href="http://pyvideo.org/video/367/pycon-2011--fun-with-python--39-s-newer-tools" rel="nofollow noreferrer">Fun with Python's Newer Tools</a> <code>[11:35 - 26:00]</code>. The examples he demonstrates include an enum type for colors.</span>
