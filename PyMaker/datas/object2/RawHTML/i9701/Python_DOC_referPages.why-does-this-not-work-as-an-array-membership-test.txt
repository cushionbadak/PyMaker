<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/15336602/when-checking-if-an-item-does-not-exist-in-a-list-why-doesnt-this-code-work">When checking if an item does not exist in a list, why doesn't this code work - if item in list == False: [duplicate]</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<pre><code>&gt;&gt;&gt; 5 in [1, 2, 3, 4] == False
False
</code></pre>
<p>I get that this is a bizarre way to test membership, and that</p>
<pre><code>&gt;&gt;&gt; 5 not in [1, 2, 3, 4]
True
</code></pre>
<p>is the "correct" way.  What confuses me is that its behavior is different from both</p>
<pre><code>&gt;&gt;&gt; (5 in [1, 2, 3, 4]) == False
True
</code></pre>
<p>and</p>
<pre><code>&gt;&gt;&gt; 5 in ([1, 2, 3, 4] == False)
TypeError ...
</code></pre>
<p>Have I missed something obvious?  (Tested in Python 2.7 and Python 3.4).</p>
<p>To clarify, I understand the last three snippets.  I am asking about the behavior of the <strong>first</strong> snippet, and why it is different.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a chained comparison. You may have known that you can do</p>
<pre><code>1 &lt; 2 &lt; 3
</code></pre>
<p>in Python, and it's equivalent to <code>(1 &lt; 2) and (2 &lt; 3)</code>. (Or maybe you didn't. Now you know.) Well, the same thing applies to <code>in</code> and <code>==</code>.</p>
<pre><code>5 in [1, 2, 3, 4] == False
</code></pre>
<p>is equivalent to</p>
<pre><code>(5 in [1, 2, 3, 4]) and ([1, 2, 3, 4] == False)
</code></pre>
<p>Since <code>[1, 2, 3, 4]</code> is not equal to <code>False</code>, the whole expression evaluates to <code>False</code>.</p>
</div>
<span class="comment-copy">This is definitely a dupe, but I can't find an appropriate dupe candidate.</span>
<span class="comment-copy">OK... then how do you know it's a dupe?</span>
<span class="comment-copy">@user2357112 - <a href="http://stackoverflow.com/questions/34824578/python-in-operator-is-not-working">This</a> seems close.</span>
<span class="comment-copy">@user2357112 - Found a good one.</span>
<span class="comment-copy">@TigerhawkT3: The question is a dupe, but the answers to that one suck. None of them explain anything.</span>
<span class="comment-copy">Awesome!  I know about chained comparisons; I didn't realize they applied to <code>in</code>.  Good answer!</span>
<span class="comment-copy">This is such a common wat.  I actually tried to get <code>in</code> and <code>not in</code> documented as <a href="https://docs.python.org/3/library/stdtypes.html#comparisons" rel="nofollow noreferrer">comparison operators</a>, since they are literally <i>defined</i> as comparisons in the <a href="https://docs.python.org/3/reference/grammar.html" rel="nofollow noreferrer">grammar</a>, but did not get much support on bugs.python.org</span>
<span class="comment-copy">I was thinking about making the lack of documentation a bug report too; I guess it's a lost cause.  Any idea why it's a comparison operator?  I can't think of any case where this behavior is useful.</span>
<span class="comment-copy">@IanKuehne: I'm guessing it was just convenient for the implementation to stick them in with the other comparison operators, and they didn't care too much about the chaining behavior.</span>
