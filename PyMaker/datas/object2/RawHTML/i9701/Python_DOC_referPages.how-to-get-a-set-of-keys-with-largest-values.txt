<div class="post-text" itemprop="text">
<p>I am working on a function</p>
<pre><code>def common_words(dictionary, N):
     if len(dictionary) &gt; N:
         max(dictionary, key=dictionary.get)
</code></pre>
<p>Description of the function is: </p>
<blockquote>
<p>The first parameter is the dictionary of word counts and the second is
  a positive integer N. This function should update the dictionary so
  that it includes the most common (highest frequency words). At most N
  words should be included in the dictionary. If including all words
  with some word count would result in a dictionary with more than N
  words, then none of the words with that word count should be included.
  (i.e., in the case of a tie for the N+1st most common word, omit all
  of the words in the tie.)</p>
</blockquote>
<p>So I know that I need to get the N items with the highest values but I am not sure how to do that. I also know that once I get N items that if there are any duplicate values that I need to pop them out. </p>
<hr/>
<p>For example, given </p>
<pre><code>k = {'a':5, 'b':4, 'c':4, 'd':1} 
</code></pre>
<p>then</p>
<pre><code>common_words(k, 2) 
</code></pre>
<p>should modify <code>k</code> so that it becomes <code>{'a':5}</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>my algorithm as below</p>
<ol>
<li>1st build tuple list from dictionary sorted based on value from
largest to smallest</li>
<li>check for if item[N-1] match item[N] value, if yes, drop item[N-1]
(index start from 0, so -1 there)</li>
<li>finally, convert the slice of tuple list up to N element back to
dict, may change to use <code>OrderedDict</code> here if wanna retain the items order</li>
</ol>
<p>it will just return the dictionary as it is if the dictionary length is less than N</p>
<pre><code>def common_words(dictionary, N):
    if len(dictionary) &gt; N:
        tmp = [(k,dictionary[k]) for k in sorted(dictionary, key=dictionary.get, reverse=True)]
        if tmp[N-1][1] == tmp[N][1]:
            N -= 1
        return dict(tmp[:N])
        # return [i[0] for i in tmp[:N]] # comment line above and uncomment this line to get keys only as your title mention how to get keys
    else:
        return dictionary
        # return dictionary.keys() # comment line above and uncomment this line to get keys only as your title mention how to get keys

&gt;&gt;&gt; common_words({'a':5, 'b':4, 'c':4, 'd':1}, 2)
{'a': 5}
</code></pre>
<p>OP wanna modify input dictionary within function and return <code>None</code>, it can be modified as below</p>
<pre><code>def common_words(dictionary, N):
    if len(dictionary) &gt; N:
        tmp = [(k,dictionary[k]) for k in sorted(dictionary, key=dictionary.get, reverse=True)]
        if tmp[N-1][1] == tmp[N][1]:
            N -= 1
        # return dict(tmp[:N])
        for i in tmp[N:]:
            dictionary.pop(i[0])

&gt;&gt;&gt; k = {'a':5, 'b':4, 'c':4, 'd':1}
&gt;&gt;&gt; common_words(k, 2)
&gt;&gt;&gt; k
{'a': 5}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's my algorithm for this problem.</p>
<ol>
<li>Extract the data from the dictionary into a list and sort it in descending order on the dictionary values.</li>
<li>Clear the original dictionary.</li>
<li>Group the sorted data into groups that have the same value.</li>
<li>Re-populate the dictionary with the all (key, value) pairs from each group in the sorted list if that will keep the total dictionary size &lt;= N. If adding a group would make the total dictionary size &gt; N, then return.</li>
</ol>
<p>The grouping operation can be easily done using the standard <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> function.</p>
<p>To perform the sorting and grouping we need an appropriate key function, as described in the <code>groupby</code>, <a href="https://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow noreferrer"><code>list</code></a> and <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer"><code>sorted</code></a> docs. Since we need the second item of each tuple we <em>could</em> use</p>
<pre><code>def keyfunc(t):
    return t[1]
</code></pre>
<p>or</p>
<pre><code>keyfunc = lambda t: t[1]
</code></pre>
<p>but it's more efficient to use <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>operator.itemgetter</code></a>.</p>
<hr/>
<pre><code>from operator import itemgetter
from itertools import groupby

def common_words(d, n):
    keyfunc = itemgetter(1)
    lst = sorted(d.items(), key=keyfunc, reverse=True)
    d.clear()
    for _, g in groupby(lst, key=keyfunc):
        g = list(g)
        if len(d) + len(g) &lt;= n:
            d.update(g)
        else:
            break

# test

data = {'a':5, 'b':4, 'c':4, 'd':1} 

common_words(data, 4)
print(data)
common_words(data, 2)
print(data)
</code></pre>
<p><strong>output</strong></p>
<pre><code>{'c': 4, 'd': 1, 'b': 4, 'a': 5}
{'a': 5}
</code></pre>
</div>
<span class="comment-copy">please provide sample input and output</span>
<span class="comment-copy">&gt;&gt;&gt; k= {'a':5,'b':4,'c':4,'d':1}                                                                                           &gt;&gt;&gt; common_words(k,2) should return 'a'</span>
<span class="comment-copy">Can you please, explain your problem with examples ? I didn't get the logic behind your question.</span>
<span class="comment-copy">Thank you for the reply! Helped me a lot. One question however, I tried changing the code so that it returns nothing, and that you would have to recall on the dictionary for it to output it but I couldn't figure it out. So an example:   &gt;&gt;&gt; k={'lets':3,'go':2,'and':2,'by':1} &gt;&gt;&gt; common_words(k,2) &gt;&gt;&gt; k {'lets:3}</span>
<span class="comment-copy">if i get you right, you want input dictionary to become output of <code>common_words</code> function, easier way to do this is <code>k=common_words(k,2)</code>, another way is to change the line <code>return dict(tmp[:N])</code> into <code>for i in tmp[N:]:dictionary.pop(i[0])</code> , this way it will modify the input dictionary within function</span>
<span class="comment-copy">i wanted the function to return None, so that when the function is run they would have to type in dictionary again to get the value like the example i posted   they would need to ask for k again to get the answer</span>
<span class="comment-copy">refer updated answer based on what i suggest in the comment</span>
<span class="comment-copy">Thanks! i read this "for i in tmp[N:]:dictionary.pop(i[0]" as one line and got confused. Thanks for the help again</span>
<span class="comment-copy">Hi, thanks for the quick reply! I haven't seen some of those functions like itemgetter and groupby. can you explain them and what alternatives i can use in there place?</span>
<span class="comment-copy">Oh, so this is homework!</span>
<span class="comment-copy">It is just practice homework :) I am trying to practice dictionaries</span>
<span class="comment-copy">You know, you could just <i>look up the functions in the documentation</i></span>
<span class="comment-copy">@EnesDal I've added a little more explanation and some links to the official documentation.</span>
