<div class="post-text" itemprop="text">
<p>I have the following setup.  I am trying to load a module in a.py dynamically (from c.py in this case, and call it toBeLoaded).  Then I want to import another module fileB which has a class that will inherit the class toBeLoaded.anotherClass.  I know it would solve the problem if I imported c.py in b.py, but since I am loading c.py dynamically, I am not sure how to accomplish that.  It would work if I could somehow pass a variable to b.py before it is imported, but I am not sure how to do that.  </p>
<p>Here is my current setup.  </p>
<p>a.py</p>
<pre><code>import imp
from optparse import OptionParser

parser = OptionParser()
parser.add_option("-c","--configFile",dest="configFile", default="c.py",help="")
(options, args) = parser.parse_args()

modulePath=options.configFile
toBeLoaded = imp.load_source('toBeLoaded',modulePath)

import b
</code></pre>
<p>b.py</p>
<pre><code>class TestClass(toBeLoaded.anotherClass):
  def __init__(self):
    print self.x
    #do stuff here
</code></pre>
<p>c.py</p>
<pre><code>class anotherClass():
  def __init__(self):
    self.x=5
</code></pre>
<p>I get the following error:</p>
<pre><code>Traceback (most recent call last):
  File "a.py", line 6, in &lt;module&gt;
    import b
  File "/test/b.py", line 1, in &lt;module&gt;
    class TestClass(toBeLoaded.anotherClass):
NameError: name 'toBeLoaded' is not defined
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not sure if it is the cleanest way to do it.  But the problem is fixed if c.py is changed to</p>
<p>c.py</p>
<pre><code>from __main__ import modulePath
import imp
toBeLoaded = imp.load_source('toBeLoaded',modulePath)

class TestClass(toBeLoaded.anotherClass):
  def __init__(self):
    print self.x
    #do stuff here
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As I said, im pretty sure you can't do so and even if you find a way you should not do it.</p>
<p>You should consider to organize your code in another way instead of crawling yourself through the import internals. :)</p>
<p>Edit: As your goal seems to load a config file I suggest to either:</p>
<ol>
<li>use basic data types instead of external class references</li>
<li>take a look on <a href="https://docs.python.org/3/library/configparser.html" rel="nofollow noreferrer">configparser</a></li>
<li>use <a href="https://docs.python.org/2/library/json.html" rel="nofollow noreferrer">json</a></li>
</ol>
</div>
<span class="comment-copy">I dont quite understand why you not just import anotherClass in b.py and im pretty sure you can't pass anything to a module and you shouldn't tryit either.</span>
<span class="comment-copy">I may have oversimplified.  But the way a.py works is I am dynamically loading a module using sys.argv.  I will edit above code.</span>
<span class="comment-copy">Actually I am using from optparse import OptionParser</span>
<span class="comment-copy">I can simply move TestClass to a.py to solve the problem.  But I was trying to keep files relatively simple.  Do you have any other recommendations for how to solve this?</span>
<span class="comment-copy">In my opinion the only files which should be as simple as possible are configfiles (I mentioned 3 options above) and you're program in general won't be simpler at all if you bypass the normal import mechanisms a normal programmer would expect.</span>
