<div class="post-text" itemprop="text">
<p>The following is my code:</p>
<pre><code>word_centroid_map =dict(zip(model.index2word, idx ))
for cluster in range(0,10):

# Print the cluster number  
print ("\nCluster %d" % cluster)

# Find all of the words for that cluster number, and print them out
words = []
for i in range(0,len(word_centroid_map.values())):
    if( word_centroid_map.values()[i] == cluster ):
        words.append(word_centroid_map.keys()[i])
print (words)
</code></pre>
<p>I am using python 3 and I am getting an error saying:</p>
<pre><code>TypeError: 'dict_values' object does not support indexing
</code></pre>
<p>Can someone please help? Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>In python3.x, <code>dict.values()</code> doesn't return a list anymore -- it returns a <code>dict_values</code> object.  You can't subscript dict_values instances.  e.g.</p>
<pre><code>dict_values = some_dict.values()
dict_values[any_value]  # TypeError!
</code></pre>
<p>In this case, it looks like the fix should be to stop using the indices and just iterate directly over the dictionary's <em>items</em>:</p>
<pre><code>words = []
for key, item in word_centroid_map.items():
    if item == cluster:
        words.append(key)
print (words)
</code></pre>
<p>Or, as a list-comprehension:</p>
<pre><code>words = [k for k, w in word_centroid_map.items() if w == cluster]
</code></pre>
<hr/>
<p><sup>Also note that this should be <em>much</em> more efficient than the corresponding python2.x code (in which you're repeatedly generating lists to simply throw them away and re-generate on the next turn of the loop).</sup></p>
</div>
<div class="post-text" itemprop="text">
<p>As addition/clarification to mgilson answer:</p>
<blockquote>
<p>The objects returned by dict.keys(), dict.values() and dict.items()
  are view objects. They provide a dynamic view on the dictionaryâ€™s
  entries, which means that when the dictionary changes, the view
  reflects these changes.
  (<a href="https://docs.python.org/3/library/stdtypes.html#typesmapping" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#typesmapping</a>)</p>
</blockquote>
</div>
<span class="comment-copy">Looks like you're trying to run (horribly inefficient) Python 2 code on Python 3.</span>
<span class="comment-copy">If you have to search through values to get keys of interest, it can be a sign that your dict is keyed the wrong way.</span>
<span class="comment-copy">Nah, you're appending values.  He's appending keys.</span>
<span class="comment-copy">@wim -- thanks, I missed that.  Luckily it's an easy fix :-)</span>
