<div class="post-text" itemprop="text">
<p>I need to build a list of dictionaries which is resulted from <code>for</code> loop with <code>if</code> statement, where each dictionary key is the same. How can I do it? Thanks in advance</p>
<pre><code>list = []
dict = {}

for item in some_other_list
    if item == 0:
        dict.update({'the_key_which_is_always_same_word': item.value})
    else:
        dict.update({'the_key_which_is_always_same_word': item.value})
</code></pre>
<p>the result of <code>list</code> after <code>for</code> loop should look like:</p>
<pre><code>[{'the_key_which_is_always_same_word': 'value_1'}, 
 {'the_key_which_is_always_same_word': 'value_2'},
 {'the_key_which_is_always_same_word': 'value_3'}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The logic is all there, but I don't think you are adding items to the right object.</p>
<p><code>dict.update</code> updates the dictionary that you've created.  And by "updates", it will join the two dictionaries together.  If the key already exists, it will update that key with the given value.  If not, it will create a new key with that value.  So, you are constantly updating your <code>dict</code> variable, not the list. To add values to the end of a list, you should use <code>append</code>.</p>
<pre><code>list = []

for item in some_other_list
    dict = {}
    if item == 0:
        dict['the_key_which_is_always_same_word'] = item.value
    else:
        dict['the_key_which_is_always_same_word'] = item.value
    list.append(dict)
</code></pre>
<p>What this will do is, for each iteration of the loop, create a new dictionary.  If <code>item</code> is 0, we will write <code>item.value</code> to a given key.  Otherwise, we write it to a different key.  I'm assuming that in your actual code, the two keys are different.  If they aren't, then this <code>if/else</code> block is pointless.</p>
<p>After this, we append it to the end of the list.</p>
<h2>List Comprehension</h2>
<p>This could also be done in one line with list comprehension if you want:</p>
<pre><code>[{"the_key_which_is_always_same_word":i} if i == 0 else {"the_key_which_is_always_same_word":i} for i in some_other_list]
</code></pre>
<p>If <code>i==0</code>, the first dictionary will be placed in the list, otherwise, the second one will be.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to change <code>dict.update</code> to <code>list.append</code> to get the result.</p>
<p>Actually, using list comprehensions would make it more clear:</p>
<pre><code>list = [{'the_key_which_is_always_same_word': item} for item in some_other_list]    
</code></pre>
<p>If you want to generate different dict according to the value of item, you can write this:  </p>
<pre><code>list = [{'key_one': item} if item == 0 else {'key_two': item} for item in some_other_list]   
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have to first convert your list to a set. Because if you dont it, it will append the same dictionary again and again in the list. Which is kind of pointless.</p>
<pre><code>l1 = [int(a) for a in list("10003204")]
l2 = set(l1)
l3 = []

for a in l2:
    c = {}
    if a == 0:
        c['if_key']=a
        l3.append(c)
    else:
        c['else_key']=a
        l3.append(c)
print l1
print l2
print l3
</code></pre>
<p>Output:</p>
<pre><code>[1, 0, 0, 0, 3, 2, 0, 4]
set([0, 1, 2, 3, 4])
[{'if_key': 0}, {'else_key': 1}, {'else_key': 2}, {'else_key': 3}, {'else_key': 4}]
</code></pre>
<p>And if you want your key to be same in all conditions then why are you using if else condition? You can simply do this:</p>
<pre><code>for a in l2:
    c = {}
    c['same_key_always']=a
    l3.append(c)
</code></pre>
</div>
<span class="comment-copy">Here, <code>dict.update</code> would update the same dictionary. What you need is to append to the list</span>
<span class="comment-copy">read through <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">the Tutorial</a>. practice the examples, get some ideas.</span>
<span class="comment-copy">why separate key, why not <code>{'key':['value1','value2','value3']}</code></span>
<span class="comment-copy"><code>list</code> will be used to build django formset, each formset requires separate dictionary</span>
