<div class="post-text" itemprop="text">
<p>I'm trying to write to file the commit hash via Python. So I did:  </p>
<pre><code>f = open('git.txt', 'w')
f.write(str(subprocess.check_output(['C:/Program Files/Git/bin/git', 'rev-parse', 'HEAD']))) 
f.close()
</code></pre>
<p>But this wrote the following to file:</p>
<pre><code>b'714548ca074bd6e7c40973375e32413e63a67027\n'
</code></pre>
<p>I would like just:</p>
<pre><code>714548ca074bd6e7c40973375e32413e63a67027
</code></pre>
<p>How may I do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>That's just a <code>byte</code> string. All you need to do is <code>decode</code> it before writing it:</p>
<pre><code>r = subprocess.check_output(['C:/Program Files/Git/bin/git', 'rev-parse', 'HEAD'])
f.write(r.strip().decode())
</code></pre>
<p><code>r.strip()</code> was called to remove the trailing <code>'\n'</code>, you can alternatively do <code>r[:-1].decode()</code> if you prefer that.</p>
<p>Also, as @torek notes, it is best to open files using the <code>with</code> statement which automatically closes it for you.</p>
<p>So:</p>
<pre><code># add .strip().decode() at the end if you want a single line statement.
res = subprocess.check_output(['C:/Program Files/Git/bin/git', 'rev-parse', 'HEAD'])  
with open('git.txt', 'w') as f:
    f.write(res.strip().decode())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3, <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow noreferrer"><code>subprocess.check_output</code></a> returns <code>bytes</code> objects, not <code>str</code> strings:</p>
<blockquote>
<p>By default, this function will return the data as encoded bytes. The actual encoding of the output data may depend on the command being invoked, so the decoding to text will often need to be handled at the application level.</p>
</blockquote>
<p>However, if you're confident you'll be getting data in your platform's default encoding (safe enough, here), you can set the parameter <a href="https://docs.python.org/3/library/subprocess.html#frequently-used-arguments" rel="nofollow noreferrer"><code>universal_newlines</code></a> to <code>True</code>:</p>
<blockquote>
<p>If <code>universal_newlines</code> is <code>True</code>, these file objects will be opened as text streams in <a href="https://docs.python.org/3/glossary.html#term-universal-newlines" rel="nofollow noreferrer">universal newlines</a> mode using the encoding returned by <a href="https://docs.python.org/3/library/locale.html#locale.getpreferredencoding" rel="nofollow noreferrer"><code>locale.getpreferredencoding(False)</code></a>.</p>
</blockquote>
<p>This will also handle common whitespace annoyances like end-of-line characters (as the name implies).</p>
<p>Here's a function that returns Git's output as a string, using <code>universal_newlines</code>:</p>
<pre><code>def git_hash(commit_name='HEAD'):
    git_command = 'C:/Program Files/Git/bin/git'
    hash_string = subprocess.check_output(
      [git_command, 'rev-parse', commit_name],
      universal_newlines=True
      )
    return hash_string
</code></pre>
<p>And here is an example of writing that string to a file:</p>
<pre><code>fname = 'C:/temp/git_hash.txt'
with open(fname, 'w') as f:
    f.write(git_hash())
</code></pre>
<p>This uses the <code>with open(...):</code> syntax that was suggested in comments, and also in <a href="https://docs.python.org/3/tutorial/" rel="nofollow noreferrer"><em>The Python Tutorial</em></a>.  It's (unfortunately) well-hidden, appearing at the end of section <a href="https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects" rel="nofollow noreferrer">7.2.1. Methods of File Objects</a>.</p>
</div>
<span class="comment-copy">Better to use <code>with open(...) as</code> here. Note that in Python 2.7, strings <i>are</i> byte-strings, so the problem shows up only in Python 3.x. (And this has nothing to do with Git itself; anything you run with <code>subprocess</code> behaves this way as subprocesses produce byte-streams.)</span>
<span class="comment-copy">Can you do that in one line of code?</span>
<span class="comment-copy">@KcFnMi sure, but it gets to be really long, I decided to brake it up to make it a bit easier on the eyes. :-)</span>
