<div class="post-text" itemprop="text">
<p>I've been trying to run a Java program and capture it's STDOUT output to a file from the Python script. The idea is to run test files through my program and check if it matches the answers. </p>
<p>Per <a href="https://stackoverflow.com/questions/4856583/how-do-i-pipe-a-subprocess-call-in-python-to-a-text-file?rq=1">this</a> and <a href="https://stackoverflow.com/questions/4965159/python-how-to-redirect-output-with-subprocess/6482200#6482200">this</a> SO questions, using <code>subprocess.call</code> is the way to go. In the code below, I am doing <code>subprocess.call(command, stdout=f)</code> where f is the file I opened. </p>
<p>The resulted file is empty and I can't quite understand why. </p>
<pre><code>import glob

test_path = '/path/to/my/testfiles/'
class_path = '/path/to/classfiles/'
jar_path = '/path/to/external_jar/'
test_pattern = 'test_case*'
temp_file = 'res'

tests = glob.glob(test_path + test_pattern) # find all test files

for i, tc in enumerate(tests):
    with open(test_path+temp_file, 'w') as f:
        # cd into directory where the class files are and run the program
        command = 'cd {p} ; java -cp {cp} package.MyProgram {tc_p}'
                                                 .format(p=class_path,
                                                         cp=jar_path,
                                                         tc_p=test_path + tc)
        # execute the command and direct all STDOUT to file
        subprocess.call(command.split(), stdout=f, stderr=subprocess.STDOUT)
    # diff is just a lambda func that uses os.system('diff')
    exec_code = diff(answers[i], test_path + temp_file)
    if exec_code == BAD:
        scream(':(')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I checked the <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">docs</a> for <code>subprocess</code> and they recommended using <code>subprocess.run</code> (added in Python 3.5). The <code>run</code> method returns the instance of <code>CompletedProcess</code>, which has a <code>stdout</code> field. I inspected it and the <code>stdout</code> was an empty string. This explained why the file <code>f</code> I tried to create was empty. </p>
<p>Even though the exit code was 0 (success) from the <code>subprocess.call</code>, it didn't mean that my Java program actually got executed. I ended up fixing this bug by breaking down <code>command</code> into two parts. </p>
<p>If you notice, I initially tried to <code>cd</code> into correct directory and then execute the Java file -- all in one <code>command</code>. I ended up removing <code>cd</code> from <code>command</code> and did the <code>os.chdir(class_path)</code> instead. The <code>command</code> now contained only the string to run the Java program. This did the trick. </p>
<p>So, the code looked like this:</p>
<pre><code>good_code = 0
# Assume the same variables defined as in the original question 
os.chdir(class_path) # get into the class files directory first
for i, tc in enumerate(tests):
    with open(test_path+temp_file, 'w') as f:
        # run the program
        command = 'java -cp {cp} package.MyProgram {tc_p}'
                                                    .format(cp=jar_path,
                                                     tc_p=test_path + tc)
        # runs the command and redirects it into the file f
        # stores the instance of CompletedProcess
        out = subprocess.run(command.split(), stdout=f)
        # you can access useful info now
        assert out.returncode == good_code
</code></pre>
</div>
<span class="comment-copy">there are many reasons for your file to be empty first...execute the commands by replacing the variable with actual values in your command line and see if you're using correct command!!</span>
<span class="comment-copy">I've tried it, and the command was correct. I also tried using w/o splitting the command and passing in <code>shell=True</code>. I've also tried <code>subprocess.check_call(command.split(), stdout=PIPE)</code> and the status was 0 (success).</span>
<span class="comment-copy">do you've write access to that file/directory?</span>
<span class="comment-copy">I suppose so, because of the <code>with open as</code>. This should give me write access.</span>
