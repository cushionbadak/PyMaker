<div class="post-text" itemprop="text">
<pre><code>def digit_sum(n):
    if n==0 or n==1:
        return n
    else:
        return n+digit_sum(n-1)

def digital_root(n):

    if n&lt;10:
        return n
    else:
        return digit_sum((n // 10) + n % 10)
</code></pre>
<p>I am trying to use <code>digit_sum</code> to calculate the sum of digits of <code>digital_root</code> can someone help me please. I am trying to use a recursive function for <code>digital_root</code>.</p>
<p>Running the file in Python shell:</p>
<pre><code>digital_root(1969)
</code></pre>
<p>This should calculate 1+9+6+9=25 then since 25 is greater than 10 it should then calculate the sum of its digits 2+5 so that the final answer is 7.</p>
</div>
<div class="post-text" itemprop="text">
<p>To get the last digit of a (positive integer) number you can calculate the modulo:</p>
<pre><code>last_digit = n % 10
</code></pre>
<p>The remainder of the number (excluding the last place) is:</p>
<pre><code>rest = (n - last_digit) / 10
</code></pre>
<p>This should in theory be enough to split a number and add the digits:</p>
<pre><code>def sum_digits(n):
    if n &lt; 10:
        return n
    else:
        last_digit = n % 10
        rest = n // 10
        # or using divmod (thanks @warvariuc):
        # rest, last_digit = divmod(n, 10)
        return last_digit + sum_digits(rest)

sum_digits(1969)  # 25
</code></pre>
<p>If you want to apply this recursivly until you have a value smaller than 10 you just need to call this function as long as that condition is not fulfilled:</p>
<pre><code>def sum_sum_digit(n):
    sum_ = sum_digit(n)
    if sum_ &lt; 10:
        return sum_
    else:
        return sum_sum_digit(sum_)

sum_sum_digit(1969) # 7
</code></pre>
<p>Just if you're interested another way to calculate the sum of the digits is by converting the number to a string and then adding each character of the string:</p>
<pre><code>def sum_digit(n):
    return sum(map(int, str(n)))
    # or as generator expression:
    # return sum(int(digit) for digit in str(n))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you really require a recursive solution without using any loops (<code>for</code>, <code>while</code>) then you can always recurse again to ensure a single digit:</p>
<pre><code>def digital_root(n):
    if n &lt; 10:
        return n
    a, b = divmod(n, 10)
    b += digital_root(a)
    return digital_root(b)

&gt;&gt;&gt; digital_root(1969)
7
</code></pre>
<p>Or you could just not recurse at all:</p>
<pre><code>def digital_root(n):   # n &gt; 0
    return 1+(n-1)%9

&gt;&gt;&gt; digital_root(1969)
7
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try this...</p>
<pre><code>digitSum = 0
solution = 0
S = raw_input()
S = list(map(int, S.split()))
#print S
for i in S:
    digitSum += i
#print digitSum
singleDigit = len(str(digitSum)) == 1
if singleDigit == True: solution = digitSum
while singleDigit == False:
    solution = sum( [ int(str(digitSum)[i]) for i in range( 0, len(str(digitSum))) ] )
    digitSum = solution
    singleDigit = len(str(solution)) == 1
print(solution)
</code></pre>
</div>
<span class="comment-copy">It would help if you  gave an example of what you would like the function usage to look like, along with input and expected output values.</span>
<span class="comment-copy">Have you tried adding print statements to see where the calculation goes wrong?</span>
<span class="comment-copy">Your digit sum function is wrong, at least the recursing part.</span>
<span class="comment-copy">There's a simple solution to this problem: <code>digital_root = lambda n: 1+(n-1)%9</code>. If you need to handle zeros then slightly more complex: <code>digital_root = lambda n: n-9*int((n-1)/9)</code>. See <a href="https://en.wikipedia.org/wiki/Digital_root" rel="nofollow noreferrer">Digital Root</a></span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/functions.html#divmod" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#divmod</a></span>
<span class="comment-copy">@warvariuc I always wondered what that function is good for. I added it as alternative. Thank you!</span>
<span class="comment-copy">I can't use that method MSeifert. I need to use my digit_sum function.</span>
<span class="comment-copy">nvm wrote the digit sum function wrong oops</span>
<span class="comment-copy">I was wondering how I can repeat the function without using a for loop or a while</span>
