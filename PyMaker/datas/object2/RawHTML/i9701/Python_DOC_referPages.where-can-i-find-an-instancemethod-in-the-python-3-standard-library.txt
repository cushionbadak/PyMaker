<div class="post-text" itemprop="text">
<p>I'm trying to test for and fix <a href="https://twitter.com/naysayerr_/status/803336593394323457" rel="nofollow noreferrer">a bug in pprint++</a> (edit: <a href="https://github.com/wolever/pprintpp/issues/18" rel="nofollow noreferrer">the correct link; original link left for posterity</a>) which is coming up because the <code>instancemethod</code> type is not hashable:</p>
<pre><code>In [16]: import pandas as pd

In [17]: type(pd.tslib.NaT).__repr__
Out[17]: &lt;instancemethod __repr__ at 0x1058d2be8&gt;

In [18]: hash(type(pd.tslib.NaT).__repr__)
   ...
TypeError: unhashable type: 'instancemethod'
</code></pre>
<p>But I'm having trouble testing for this issue because I don't know where else I can find an <code>instancemethod</code> in the Python 3 standard library, and I don't want my tests to depend on Pandas.</p>
<p>Specifically, it seems like the "normal" builtin types have "instance methods" that are implemented slightly differently:</p>
<pre><code>In [19]: type(None).__repr__
Out[19]: &lt;slot wrapper '__repr__' of 'NoneType' objects&gt;

In [20]: hash(type(None).__repr__)
Out[20]: -9223372036583849574
</code></pre>
<p>So: where can I find an <code>instancemethod</code> in the Python 3 standard library so I can write tests against it? Or is it a special type that doesn't appear there?</p>
<p>(note: this only appears to affect Python 3, as the same method in Python 2 is an <code>unbound method</code>, which is hashable)</p>
</div>
<div class="post-text" itemprop="text">
<p>This type isn't used in anything that comes with Python, and there's no Python-level API to create objects of this type. However, you can do it with a direct C API call:</p>
<pre><code>import ctypes

PyInstanceMethod_New = ctypes.pythonapi.PyInstanceMethod_New
PyInstanceMethod_New.argtypes = (ctypes.py_object,)
PyInstanceMethod_New.restype = ctypes.py_object

arbitrary_callable = sum

instance_method = PyInstanceMethod_New(arbitrary_callable)
</code></pre>
<p>The name <code>instancemethod</code> looks a lot like a bound method object, but it turns out it's something else entirely. It's a weird internal thing that, according to its <a href="https://docs.python.org/3/c-api/method.html#instance-method-objects" rel="nofollow noreferrer">documentation</a>, is supposed to be the new way for C types to represent their methods, except that the standard C-level API for creating a type doesn't actually use it.</p>
<p>According to <a href="https://bugs.python.org/issue3787" rel="nofollow noreferrer">conversations</a> on the Python issue tracker, this feature was requested by the developers of Cython and Pyrex. It looks like <code>pandas.tslib.NaT</code> is implemented in Cython, and the Cython implementation actually uses this type, where the standard C API for creating types doesn't.</p>
<p>Note that the situation is completely different on Python 2. On Python 2, this new type didn't exist, and <code>instancemethod</code> was the name of the type of method objects representing ordinary methods written in Python. In Python 3, the new type took that name, and the type of method objects for methods written in Python is now named <code>method</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python provides it, but basically only as part of their test suite AFAICT (no included batteries use it otherwise). You can make one for testing using the <code>_testcapi</code> module:</p>
<pre><code>&gt;&gt;&gt; import _testcapi
&gt;&gt;&gt; testinstancemethod = _testcapi.instancemethod(str.__repr__)
&gt;&gt;&gt; hash(testinstancemethod)
...
TypeError: unhashable type: 'instancemethod'
</code></pre>
</div>
<span class="comment-copy">If of help, <code>instancemethod</code> is implemented in <code>C</code> in <code>classobject.c</code> see <a href="https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/classobject.c#L608" rel="nofollow noreferrer">here</a>.</span>
<span class="comment-copy">I'm not sure that link is what you meant to post.</span>
<span class="comment-copy">That does look correct. But quickly grepping through the code doesn't show any instances where it's used in the cpython3 codebase. Possibly it isn't, and it's only used by extensions?</span>
<span class="comment-copy">Interestingly, <code>instancemethod_hash</code> has been commented out in the link I shared, I can't find out when, yet.</span>
<span class="comment-copy">Ha! That is strange. I've ping'd the original author (as per blame) to see if he remembers why it's commented out: <a href="https://twitter.com/wolever/status/803808370658574336" rel="nofollow noreferrer">twitter.com/wolever/status/803808370658574336</a></span>
<span class="comment-copy">Dang, that's awesome! Thanks!</span>
<span class="comment-copy">You can use this to easily allow using callable class instances as methods: <code>SomeClass.somemethod = PyInstanceMethod_New(CallableClass())</code>. without it CallableClass has to implement descriptor protocol, returning <code>MethodType</code> instances. I wish InstanceMethod were exposed in types module.</span>
<span class="comment-copy">You slightly beat me <a href="https://github.com/python/cpython/blob/4265fa04206b29b3ec653d74a620b0413306023f/Lib/test/test_capi.py#L36" rel="nofollow noreferrer">discovering</a> and posting this :-D</span>
<span class="comment-copy">I think you dropped something in <code>_testcapi(str.__repr__)</code>.</span>
<span class="comment-copy">@user2357112: Oops. This is what I get for not copying and pasting directly. Fixed. :-)</span>
