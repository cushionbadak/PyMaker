<div class="post-text" itemprop="text">
<p>I've already asked this question, but it was for <a href="https://stackoverflow.com/questions/40911995/ruby-how-to-sort-a-string-keeping-some-characters-in-place">Ruby</a>, now it's Python's turn!
I want to sort the words of a string, keeping non-alphanumeric characters in place, for example:</p>
<pre><code>"hello, sally! seen 10/dec/2016 =&gt; ehllo, allsy! eens 01/cde/0126"
</code></pre>
<p>Based in the answer I've previously received, I've tried to do:</p>
<pre><code>def sortThisList(listWords):
    for word in listWords:
        print(re.sub('\W+', sortStr(word), word)) #Error

def sortStr(word):
    return "".join(sorted(list(word)))
</code></pre>
<p><strike>But this error pops up:</strike></p>
<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 3, in sortItAll
  File ".../lib/python3.6/re.py", line 191, in sub
    return _compile(pattern, flags).sub(repl, string, count)
TypeError: expected string or bytes-like object
</code></pre>
<p></p></div>
<div class="post-text" itemprop="text">
<p>You are trying to apply the regular expression to the <em>whole list</em>, not the individual word:</p>
<pre><code>for word in textInaList:  # textInaList presumably is a list
    print(re.sub('\W+', sortStr(word), textInaList))
#    you pass that list into re.sub(): ^^^^^^^^^^^
</code></pre>
<p>Next, you want to pass in a your <code>sortStr</code> <em>function</em> if you want it to be used for each replacement, and have that function deal with a <em>match object</em>. You'll also want to replace <code>\w+</code> (word characters), <em>not</em> non-word characters:</p>
<pre><code>def sortStr(match):
    return "".join(sorted(match.group()))

print(re.sub('\w+', sortStr, sentence))
</code></pre>
<p>When you pass in a function as the second argument to <code>re.sub()</code>, it is called for every match found in the third argument, passing in a <a href="https://docs.python.org/3/library/re.html#match-objects" rel="nofollow noreferrer"><em>match object</em></a>; calling <a href="https://docs.python.org/3/library/re.html#re.match.group" rel="nofollow noreferrer"><code>match.group()</code></a> returns the matched text (so a single word in this case). The return value is then used as the replacement.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; def sortStr(match):
...     return "".join(sorted(match.group()))
...
&gt;&gt;&gt; sentence = "hello, sally! seen 10/dec/2016"
&gt;&gt;&gt; re.sub('\w+', sortStr, sentence)
'ehllo, allsy! eens 01/cde/0126'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It makes more sense to match consecutive alphanumeric characters, sort them and replace the original words while keeping all other characters untouched. That is:</p>
<pre><code>In [25]: s = "hello, sally! seen 10/dec/2016"

In [26]: ns = s

In [27]: for w in re.findall(r'\w+', s):
    ...:     ns = ns.replace(w, "".join(sorted(w)))
    ...:     

In [28]: ns
Out[28]: 'ehllo, allsy! eens 01/cde/0126'
</code></pre>
</div>
<span class="comment-copy">Where in the code does it give you this error? Which line, as in what is the code on the line?</span>
<span class="comment-copy">In the print(re.sub('\W+', sortStr(word), textInaList)) line</span>
<span class="comment-copy">How do you call the <code>sortItAll()</code> function? Are you passing in a single string or a list of strings? Your variable names and use of the <code>textInaList</code> variable are a little confusing. Please add a sample session of how it should be used.</span>
<span class="comment-copy">This is good. If you want to keep all your functions try doing this. Change the print statement to, <code>print(re.sub('\W+', sortStr(word), wor))</code>.</span>
<span class="comment-copy">@PrestonHager: sorry, what? That expression <i>does not work</i>; it replaces <code>\W+</code> patterns (<b>non</b>-word characters) in <code>word</code> with the <i>whole input sorted</i>.</span>
<span class="comment-copy">MartijnPieters Your solution is pretty good, thanks! But I think @sirfz add a more begginer friendly one.</span>
<span class="comment-copy">I went away to have dinner and I've tested your solution and it didn't work...</span>
<span class="comment-copy">@Safirah: I included working code in my post; if sirfz's code works, mine works too. It's up to you, but the <i>outcome is the same for both answers</i>.</span>
<span class="comment-copy">Why the separate string.replace calls? <code>re.sub()</code> is perfectly capable of doing that for you.</span>
<span class="comment-copy">True, it's just the first solution that popped up into my head to solve the problem. Gets the idea through, tho the <code>re.sub</code> solution is the nicer one.</span>
