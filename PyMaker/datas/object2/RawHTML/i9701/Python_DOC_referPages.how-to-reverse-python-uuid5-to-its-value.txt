<div class="post-text" itemprop="text">
<p>can it be reversed? 
if I use </p>
<pre><code>&gt;&gt;&gt; RESOURCE_ID_NAMESPACE = uuid.UUID('0a7a15ff-aa13-4ac2-897c-9bdf30ce175b')
&gt;&gt;&gt; value = 'test'
&gt;&gt;&gt; uuid.uuid5(RESOURCE_ID_NAMESPACE, value)
UUID('7fd19145-920f-5b9c-be0a-2146b0c39949')
</code></pre>
<p>if I know the uuid5 value, can I get the value 'test'? </p>
<p>thanks a lot.</p>
</div>
<div class="post-text" itemprop="text">
<p>UUID version 5 is <a href="https://docs.python.org/3/library/uuid.html#uuid.uuid5" rel="nofollow noreferrer">based on the SHA-1 hash of the input</a>. The whole point of cryptographic hashing algorithms is that they're nearly impossible to reverse in the general case.</p>
<p>If you know the input was a dictionary word, sure, you could just generate a uuid5 value for every word in the dictionary, same goes for when you know it's a short string of letters, but in the general case, no, you can't reverse a UUID5 value any more than you can a cryptographic hash. And no, the weaknesses in SHA-1 are unlikely to be helpful here; they're useful largely in generating collisions, but not recovering the original value.</p>
</div>
<div class="post-text" itemprop="text">
<p>No, you cannot.  The uuid is created by hashing the namespace and value you pass into the constructor.  But there are an infinite number of other possible strings (although they're probably hard to find) that hash to the same value.  So there's no way to determine what the original string was that constructed the uuid.</p>
</div>
<span class="comment-copy">If you provide some more context on why you want to do this, we may be able to help more. Just reversing a hash is not possible by design.</span>
<span class="comment-copy">In fact, it is a problem in Openstack Gnocchi project (Liberity version).Gnocchi keeps the time-serise data with uuid from other Openstack projects, and that uuid is hashed by uuid5. which cause that I can not find the resource in other Openstack project by using hasded uuid. I need to get the original ID back. The problem is resolved by latest version now. But it still keeps in Liberity version.</span>
<span class="comment-copy">thank a lot, I see ~  :)</span>
<span class="comment-copy">thanks a lot, I see.</span>
