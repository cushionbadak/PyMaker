<div class="post-text" itemprop="text">
<p>I want my code to display a custom error message that depends on the type of error it encounters. </p>
<pre><code>from .forms import NameForm, IdForm
from django.shortcuts import render
from django.http import HttpResponse, HttpResponseRedirect
from django.contrib import messages
from client_storage import insert
import mysql.connector.errors
from mysql.connector.errors import Error
import MySQLdb


def sign_in(request):
        #we need to handle all the data that was just typed, we'll add a condition for that
        if request.method == "POST":
            #here will construct the form with the POST data
            form = NameForm(request.POST)
            #the next part is to check that the information submitted is valid
            if form.is_valid():
                post = form.save()
                post.save()
                return HttpResponse(post.question_text)
            else:
                return HttpResponse("Form is invalid")
        else:
            form = NameForm()
        return render(request, 'checkin/base.html', {'form': form})

    #this view will be the sign-up view, where new clients will be given new ID numbers for training

def sign_up(request):

    if request.method == "POST":
        form = IdForm(request.POST)
        if form.is_valid():
            post = form.save()
            post.save()
            ID = post.id_text
            #we'll call an external function that checks membership of the users input in the database
            # query is the first element of the tuple that is returned from insert()
            query = insert(post.id_text)
            if query == 1062:
                messages.add_message(request, messages.INFO, 'Already taken ')
                return HttpResponseRedirect('sign_up')
            if query == 1054:
                messages.add_message(request, messages.INFO, 'Invalid input')
                return HttpResponseRedirect('sign_up')
            else:
                messages.add_message(request, messages.INFO, 'Thank you for signing up!')
                return HttpResponseRedirect('sign_up')

            # if the user enters a number that is already in use raise an 'duplicate' error
            # Capture the exception here
        else:
            return HttpResponse('That text is invalid')
    else:
        form = IdForm()
    return render(request, 'checkin/base.html', {'form': form})

For the `except` block I'm trying to figure out how to display either "Already taken" or "Invalid input" depending on the error code. However only "Already taken" ever appears. I feel like the problem is that the exception is being thrown before it even gets to the `if` clauses?
</code></pre>
<p>I'm using another file for the <code>INSERT</code> process:</p>
<pre><code>import MySQLdb
import mysql.connector
from mysql.connector import errorcode
from django.contrib import messages

#Use a function to insert new information into the database

def insert(info):
    #open a connection
    db = MySQLdb.connect('localhost','root','password', 'CLIENTS')
    #prepare a cursor
    cursor = db.cursor()
    #prepare SQL query
    sql = "INSERT INTO clients(ID) VALUES (%s)" % info

    try:
        #execute the command
        cursor.execute(sql)
        #commit changes to the database
        print 'success'
        db.commit()
    except MySQLdb.Error as e:
        #return the first element in the tuple that contains the error message, which will be the errorcode
         if e[0] == 1062:
            return e[0]
         if e[0] == 1054:
            return e[0]

    #disconnect from server
    db.close()
</code></pre>
<p><strong>EDIT</strong> The problem seems to have been that I was using <code>mysql.connector.error</code> instead of <code>MySQLdb.Error</code>.The <code>mysql</code> website seems to only use the former. And there isn't a lot of official documentation on the latter it seems, but thankfully I found <a href="http://www.programcreek.com/python/example/5535/MySQLdb.Error" rel="nofollow noreferrer">this site.</a> I changed the code so the <code>sign_in</code> view would recieve the <code>returned</code> info from the external <code>insert</code> fuction then act accordingly.</p>
</div>
<div class="post-text" itemprop="text">
<p>Like what @wwii said in the comments, you need to edit your <code>try ... except</code> block in order to catch the exception. See this page of <a href="https://dev.mysql.com/doc/connector-python/en/connector-python-api-errors-error.html" rel="nofollow noreferrer">documentations</a>.</p>
<p>Also, in your actual code <code>Error(errno=1062)</code> return always a non nil string which validate your <code>if</code> statement. And this is why you got always the <code>Already Taken</code> message.</p>
<p>In order to handle this issue, you should modify your code into something like this example: </p>
<pre><code># What you need to import
import mysql.connector
from mysql.connector import errorcode

try:
    insert(post.id_text)
    messages.add_message(request, messages.INFO, 'Thank you for signing up ')
    return HttpResponseRedirect('sign_in')

# Catch the error exception
except mysql.connector.Error as err:
    # Error code 1062: https://dev.mysql.com/doc/refman/5.6/en/error-messages-server.html#error_er_dup_entry
    if err.errno == errorcode.ER_DUP_ENTRY:
        messages.add_message(request, messages.INFO, "Already taken") 
        return HttpResponseRedirect('sign_up')

    # Error code 1054: https://dev.mysql.com/doc/refman/5.6/en/error-messages-server.html#error_er_bad_field_error
    if err.errno == errorcode.ER_BAD_FIELD_ERROR:
        messages.add_message(request, messages.INFO, "Invalid input")
        return HttpResponseRedirect('sign_up')
</code></pre>
<p><strong>Edit:</strong></p>
<p><strong>Your edited answer is correct within both <code>Python2</code> and <code>Python3</code>.</strong></p>
<p>Otherwise, if you're using <code>Python2</code> you can do something like this.</p>
<pre><code>try:
    #execute the command
    cursor.execute(sql)
    #commit changes to the database
    print 'success'
    db.commit()
except MySQLdb.Error, e:
     if e.args[0] == 1062 or e.args[0] == 1054:
        # e.args[0] is the error code in int format
        # e.args[1] is the complete error message in str format
        return e.args[1]
     else:
        # I didn't test all the cases, but this message
        # can save you more time during the debug later
        # if your code catch another error code rather than 1062 or 1054
        return "Something odd happened"
</code></pre>
<p>Also you can do something like this (This example if valid for both <code>Python2</code> and <code>Python3</code>):</p>
<pre><code>try:
    #execute the command
    cursor.execute(sql)
    #commit changes to the database
    print 'success'
    db.commit()
except MySQLdb.Error as e:
     if e[0] == 1062 or e[0] == 1054:
        # e[0] is the error code in int format
        # e[1] is the complete error message in str format
        return e[1]
     else:
        # Good for the debug
        return "Something odd happened"
</code></pre>
</div>
<span class="comment-copy">On <a href="https://dev.mysql.com/doc/connector-python/en/connector-python-api-errors-error.html" rel="nofollow noreferrer">this page of the docs</a>, the third example down shows how to use a conditional for the error number of the exception.  In your attempt, you never <i>capture</i> the error (or it never gets assigned to anything) so you can't compare to anything. <code>bool(Error(errno=1062))</code> probably evaluates to <code>True</code> so it always <i>works</i>.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">docs.python.org/3/tutorial/errors.html#handling-exceptions</a>,</span>
<span class="comment-copy">The comments of @wwii are correct. You may edit your <code>try .. except</code> block and catch the right exceptions then return your desired string/type output.</span>
<span class="comment-copy">You mean in the second file where you use <code>except mysql.connector.Error as e: ...   return e </code> ?</span>
<span class="comment-copy">Your question confuses me. In the first block of <code>try ... except</code> you'll catch the exception then add a message then return a <code>HttpResponseRedirect</code> so in the front end, after going throgh the exception, the page will redirect to your signup page. In the second block of <code>try ... except</code> you'll catch any exception of the type <code>mysql.connector.Error</code> then return the error. Maybe you should try to catch the exception code in the second block then create a custom message there. Try it then leave your feedbacks.</span>
<span class="comment-copy">Yea I realized that I was catch exceptions in two different places, I actually deleted all the <code>try ... except</code> code from my second file and it didn't effect the output at all. It's almost 2:30am (hate when this happens so late lol) where I live so I'll try it tomorrow then report back</span>
<span class="comment-copy">So you need to debug carefuly your code. if not you can edit your question and i'll try to help you as soon as possible.</span>
<span class="comment-copy">I'm still stuck, my current code is the closest I have to a solution. Every other method doesn't seem to actually capture the <code>exception</code></span>
