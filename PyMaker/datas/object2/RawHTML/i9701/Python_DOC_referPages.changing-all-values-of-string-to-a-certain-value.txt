<div class="post-text" itemprop="text">
<pre><code>input = ["AB0","A","BBBB"]
output = ["000","0","0000"]
</code></pre>
<p>Is there a function like <code>.replace("", "")</code> which could take in any input and give a string of zeros with the same number of characters?</p>
</div>
<div class="post-text" itemprop="text">
<p>This will work:</p>
<pre><code>input  = ["AB0","A","BBBB"]

output = ["0"*len(x) for x in input]
</code></pre>
<p>or the same:</p>
<pre><code>input  = ["AB0","A","BBBB"]
output = []
for x in input:
    output.append("0"*len(x))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is no such built-in function, but you can easily write a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> for that:</p>
<pre><code>&gt;&gt;&gt; input = ["AB0","A","BBBB"]
&gt;&gt;&gt;
&gt;&gt;&gt; ["0" * len(item) for item in input]
['000', '0', '0000']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another way to do this (mostly for fun):</p>
<pre><code>&gt;&gt;&gt; input = ["AB0", "A", "BBBB"]
&gt;&gt;&gt; zeros = ''.zfill
&gt;&gt;&gt; [zeros(len(s)) for s in input]
['000', '0', '0000']
</code></pre>
<p>Note that this only works for filling with <code>0</code>.  If you want to fill with different characters then this method won't work.</p>
<p>You could use <code>ljsut</code> or <code>rjust</code> to fill with different characters...</p>
<pre><code>&gt;&gt;&gt; input = ["AB0", "A", "BBBB"]
&gt;&gt;&gt; pad = ''.ljust
&gt;&gt;&gt; [pad(len(s), '1') for s in input]
['111', '1', '1111']
</code></pre>
<p>However, most of these are really just clever ways to do it.  They aren't faster:</p>
<pre><code>&gt;&gt;&gt; timeit.timeit("[pad(len(s), '1') for s in input]", 'from __main__ import pad, input')
1.3355789184570312
&gt;&gt;&gt; timeit.timeit("['1' * len(s) for s in input]", 'from __main__ import pad, input')
0.8812301158905029
&gt;&gt;&gt; zeros = ''.zfill
&gt;&gt;&gt; timeit.timeit("[zeros(len(s)) for s in input]", 'from __main__ import zeros, input')
1.110482931137085
</code></pre>
<p>though, depending on your particular preferences/background, you might find one way clearer to understand than another (and that's worth something)...</p>
<p>FWIW, my first instinct is to use the multiplication method as proposed in 
<a href="https://stackoverflow.com/a/40858071/748858">Selcuk's answer</a> so that's probably what I find most easy to read and understandable...</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use python 're' module, like following:</p>
<pre><code>import re

input = ["AB0","A","BBBB"]
output = []

for value in input:
  str = re.sub(".","0",value)
  output.append(str)

print output
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>map(lambda x:"0"*len(x),["AB0","A","BBB"])
</code></pre>
</div>
<span class="comment-copy">what about <code>["".rjust(len(s), "H") for s in input]</code>? for example</span>
<span class="comment-copy">@TheClonerx -- Yeah, I was thinking about that too.  Since you suggested it and I was thinking about it, I suppose I'll add it.</span>
