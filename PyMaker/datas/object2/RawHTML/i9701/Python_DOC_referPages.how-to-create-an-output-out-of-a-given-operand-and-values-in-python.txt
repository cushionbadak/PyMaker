<div class="post-text" itemprop="text">
<p>So I'm creating a program that gives random outputs including addition, subtraction, multiplication and division. In order to remove repeating any code I am attempting to narrow the function down to essentially</p>
<pre><code>sum(operand)
    a = random.randint(1, 10)
    b = random.randint(1, 10)
    c = a + operand + b
    print c
</code></pre>
<p>I am looking to be able to call say sum(*) so c would return the product of a and b. 
I feel like this is a concatenation issue
Here I am using sum as an arbitrary name. The function should be able to add, subtract, multiply and divide, all depending on the operand passed through. For example, if "-" is passed through, c would be a - b, if "/" was passed through, c would be a / b</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import random
def operate(a, b, operand):
    return eval(str(a) + operand + str(b))
</code></pre>
<p>"operand" is a string.
<code>operate(50,5,"*")</code> would return 250, for example.</p>
<p>The eval() function takes a string and executes it.  This converts a and b to strings, so in the example given, the resulting string would be "50*5", which would then be executed by eval().</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/questions/1740726/python-turn-string-into-operator">Python:: Turn string into operator</a></p>
<p>This question basicially asks the same allthough with a different starting point.</p>
<blockquote>
<p>From the accepted answer by <a href="https://stackoverflow.com/users/202555/amnon">Annon</a>:</p>
<pre><code>import operator
ops = { "+": operator.add, "-": operator.sub } # etc.

print ops["+"](1,1) # prints 2 
</code></pre>
</blockquote>
<p>Reference to imported operator class:
<a href="https://docs.python.org/3.6/library/operator.html" rel="nofollow noreferrer">https://docs.python.org/3.6/library/operator.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>import random

def produce(func):
    a = random.randint(1, 10)
    b = random.randint(1, 10)
    c = func(a,b)
    return c


def sum(a,b):
    return a+b

def multiply(a,b):
    return a*b

def substract(a,b):
    return a-b

operands = [
            sum,
            multiply,
            substract,
        ]

# tests
print "\n".join(["%s: %d" % ( op.__name__, produce(op) ) for op in operands ])
</code></pre>
<p>Sample output:</p>
<pre><code>sum: 14
multiply: 45
substract: 7
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Unified solution (for <code>int</code> numbers, as example) emulating numeric objects and calling <code>__add__</code>, <code>__sub__</code>, <code>__mul__</code> and <code>floordiv</code> methods:</p>
<pre><code>def do_arith_operation(a, b, op):
    a = int(a).__int__()
    b = int(b).__int__()

    operators = {'+': '__add__', '-': '__sub__', '*': '__mul__', '/': '__floordiv__'}

    return getattr(a, operators[op])(b)


print(do_arith_operation(10, 2, '/'))
</code></pre>
<p>The output:</p>
<pre><code>5
</code></pre>
<ul>
<li><code>int(a).__int__()</code> will create an instance of class <code>&lt;class 'int'&gt;</code></li>
<li><code>__add__</code>, <code>__sub__</code>, <code>__mul__</code> and <code>floordiv</code> methods:
each method takes two objects (the operands of <code>+|-|*|/|</code>) as arguments and returns the result of computation</li>
</ul>
<p><a href="https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types" rel="nofollow noreferrer">https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types</a></p>
</div>
<span class="comment-copy">see <code>operator</code> module.</span>
<span class="comment-copy">The "sum" of a sequence is the <i>addition</i> of all of its elements. It's not clear what you're asking, or how subtraction or multiplication fit in.</span>
<span class="comment-copy">This is exactly what I was looking for, thank you!</span>
<span class="comment-copy">Below the up/downvote buttons, there is an accept button.  If an answer is not accepted, people will continue to come to this question thinking that this question possibly has not been given an acceptable answer.</span>
