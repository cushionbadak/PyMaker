<div class="post-text" itemprop="text">
<p>Slightly surprising behaviour. Two classes with the same name in different modules share the same name. (Not equality, which is expected, but string object identity! )</p>
<p>I don't support it really matters much, but does anyone know why, and whether there's any potential here for further surprises?</p>
<p>Demo (with <code>a/a.py</code> and <code>b/b.py</code> and empty <code>__init__.py</code> in <code>a/</code> and <code>b/</code>)</p>
<pre><code>&gt;&gt;&gt; from a import a
&gt;&gt;&gt; from b import b
&gt;&gt;&gt; ta = a.Test()
&gt;&gt;&gt; tb = b.Test()
&gt;&gt;&gt; ta.__class__.__name__
'Test'
&gt;&gt;&gt; tb.__class__.__name__
'Test'
&gt;&gt;&gt; tb.__class__.__name__ is ta.__class__.__name__  # unexpected
True

&gt;&gt;&gt; ta.__class__
&lt;class 'a.a.Test'&gt;
&gt;&gt;&gt; tb.__class__
&lt;class 'b.b.Test'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is an implementation detail of the CPython interpreter.</p>
<p>It <em>interns</em> identifier strings; only one copy is created for source code strings, and re-used everywhere the exact same string value appears. This makes dictionary containment tests faster (by trying pointer comparisons first).</p>
<p>You can do this for your own strings with the <a href="https://docs.python.org/3/library/sys.html#sys.intern" rel="nofollow noreferrer"><code>sys.intern()</code> function</a>, which helpfully notes:</p>
<blockquote>
<p>Normally, the names used in Python programs are automatically interned, and the dictionaries used to hold module, class or instance attributes have interned keys.</p>
</blockquote>
<p>Also see <a href="https://stackoverflow.com/questions/24245324/about-the-changing-id-of-a-python-immutable-string">About the changing id of a Python immutable string</a></p>
</div>
<div class="post-text" itemprop="text">
<p>As youve noted - you can't rely in sting objects being the same - nor in they being different objects. (Unless you explicitly makes references to the same strings, of course).</p>
<p>If you want to compare for the name, just use the <code>==</code> object. If yu want to know if the classes are the same, them use the <code>is</code> operator with the classes themselves, not with their names.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python everything is object/class. Whatever you write either a class or function, it's type is <strong>type</strong>.</p>
<p>In question you have 2 diff classes a and b. Here these 2 lines create 2 instances of both classes.</p>
<pre><code>&gt;&gt;&gt; ta = a.Test()
&gt;&gt;&gt; tb = b.Test()
</code></pre>
<p>Function <strong>Test</strong> on each object return class <strong>Test</strong>. A class to <strong>__class__</strong> returns object type or <strong>__repr__</strong> of object. And <strong>name</strong> returns <strong>name</strong> of class in form of string. If you want to confirm type this and see type(tb.<strong>class</strong>.<strong>name</strong>). So </p>
<p><code>&gt;&gt;&gt; tb.__class__.__name__ is ta.__class__.__name__</code> </p>
<p>this is returning true as one <strong>str</strong> is <strong>type</strong> of other.</p>
</div>
<span class="comment-copy"><i>"the names used in Python programs are automatically interned"</i> <a href="https://docs.python.org/3/library/sys.html#sys.intern" rel="nofollow noreferrer">docs.python.org/3/library/sys.html#sys.intern</a></span>
<span class="comment-copy">All Python strings are immutable, so any interning of strings is totally safe.</span>
<span class="comment-copy">Thanks. Google found this, which seems informative: <a href="https://books.google.co.uk/books?id=mh0bU6NXrBgC&amp;pg=PA505&amp;lpg=PA505&amp;dq=python+interns+identifiers&amp;source=bl&amp;ots=XznyDpc1hd&amp;sig=fsNqflJ_l0N_UhlALvrPh3S7ETQ&amp;hl=en&amp;sa=X&amp;ved=0ahUKEwj6kYP4udDQAhWlCcAKHTvgD_UQ6AEIKjAC#v=onepage&amp;q=python%20interns%20identifiers&amp;f=false" rel="nofollow noreferrer">books.google.co.uk/â€¦</a></span>
<span class="comment-copy">@nigel222: that information is rather out of date; see the <code>sys.intern()</code> documentation I linked to: <i>Interned strings are not immortal</i>; the text you have there states they are. They <i>used</i> to be, but only until Python 2.3.</span>
<span class="comment-copy">Yes, out of date, but it had a gentler explanation of what the term "interned" meant! Certainly not to be trusted for Python3 internals hacking!</span>
<span class="comment-copy">@nigel222: sorry, my comment does indeed read harsher than I meant it. :-)</span>
<span class="comment-copy">Indeed. Use <code>ta.__class__ is tb.__class__</code></span>
