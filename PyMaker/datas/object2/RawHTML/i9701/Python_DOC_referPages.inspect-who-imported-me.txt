<div class="post-text" itemprop="text">
<p>There are two files:</p>
<pre><code># the_imported.py
import inspect
imported_by_fname = inspect.currentframe().f_back.f_code.co_filename
print('{} was imported by {}'.format(__name__, imported_by_fname))
</code></pre>
<p>And:</p>
<pre><code># the_importer.py
import the_imported
</code></pre>
<p>When executed with Python 2.7:</p>
<pre><code>$ python the_importer.py 
the_imported was imported by the_importer.py
</code></pre>
<p>When executed with Python 3.5:</p>
<pre><code>$ python3 the_importer.py 
the_imported was imported by &lt;frozen importlib._bootstrap&gt;
</code></pre>
<p>What is that weird thing <code>&lt;frozen importlib._bootstrap&gt;</code> all about?  What happened with <code>import</code> and/or <code>inspect</code> that changed this behaviour?   How can we get that Python 2 filename introspection working again on Python 3?</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.1 and newer the <a href="https://docs.python.org/3/library/importlib.html" rel="nofollow noreferrer">import machinery</a> is implemented in Python, which makes it possible to access its call stack. To illustrate this, I'll put the following code</p>
<pre><code>from traceback import print_stack
print_stack()
</code></pre>
<p>to <em>the_imported.py</em> and import it.</p>
<p>On Python 2 that code prints</p>
<pre><code>  File "the_importer.py", line 2, in &lt;module&gt;
    import the_imported
  File ".../the_imported.py", line 3, in &lt;module&gt;
    print_stack()
</code></pre>
<p>But on Python 3 the output is much more verbose:</p>
<pre><code>  File "the_importer.py", line 2, in &lt;module&gt;
    import the_imported
  File "&lt;frozen importlib._bootstrap&gt;", line 961, in _find_and_load
  File "&lt;frozen importlib._bootstrap&gt;", line 950, in _find_and_load_unlocked
  File "&lt;frozen importlib._bootstrap&gt;", line 655, in _load_unlocked
  File "&lt;frozen importlib._bootstrap_external&gt;", line 677, in exec_module
  File "&lt;frozen importlib._bootstrap&gt;", line 205, in _call_with_frames_removed
  File ".../the_imported.py", line 2, in &lt;module&gt;
    print_stack()
</code></pre>
<p>Before Python 3.3, these lines <a href="http://bugs.python.org/issue15110" rel="nofollow noreferrer">were also included in tracebacks</a>.</p>
<p>To achieve the desired result you could walk up the call stack to find the first frame, the file name of which doesn't start with <code>&lt;frozen importlib</code>.</p>
<pre><code>from traceback import extract_stack

for x in extract_stack():
    if not x[0].startswith('&lt;frozen importlib'):
        print('{} was imported by {}'.format(__name__, x[0]))
        break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's just more on the stack in Python 3.  <code>importlib</code> is now responsible for importing:</p>
<pre><code># the_imported.py
from inspect import getframeinfo, getouterframes, currentframe
frame = currentframe()
while frame:
    print(frame.f_code.co_filename)
    frame = frame.f_back
</code></pre>
<p>Output:</p>
<pre><code>C:\Users\user\Desktop\the_imported.py
&lt;frozen importlib._bootstrap&gt;
&lt;frozen importlib._bootstrap&gt;
&lt;frozen importlib._bootstrap&gt;
&lt;frozen importlib._bootstrap&gt;
&lt;frozen importlib._bootstrap&gt;
&lt;frozen importlib._bootstrap&gt;
&lt;frozen importlib._bootstrap&gt;
&lt;frozen importlib._bootstrap&gt;
C:\Users\user\Desktop\the_importer.py
</code></pre>
<p>You could do something like:</p>
<pre><code># the_imported.py
from inspect import getframeinfo, getouterframes, currentframe
frame = currentframe().f_back
while frame.f_code.co_filename.startswith('&lt;frozen'):
    frame = frame.f_back
print(frame.f_code.co_filename)
</code></pre>
<p>Output:</p>
<pre><code>C:\Users\user\Desktop\the_importer.py
</code></pre>
</div>
