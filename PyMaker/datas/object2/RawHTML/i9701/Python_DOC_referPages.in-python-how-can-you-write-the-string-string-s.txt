<div class="post-text" itemprop="text">
<p>Why does:</p>
<pre><code>B = "The" + "\s"
</code></pre>
<p>and</p>
<pre><code>B = "The" + r"\s"
</code></pre>
<p>yield:</p>
<pre><code>"The\\s"
</code></pre>
<p>Is it possible to write the above, such that the output string is:</p>
<pre><code>"The\s"
</code></pre>
<p>I have read similar questions on both the issue of backslashes, and their property for escaping, and the interpretation of regex characters in Python.</p>
<p><a href="https://stackoverflow.com/questions/19095796/how-to-print-backslash-with-python">How to print backslash with Python?</a></p>
<p><a href="https://stackoverflow.com/questions/647769/why-cant-pythons-raw-string-literals-end-with-a-single-backslash">Why can't Python's raw string literals end with a single backslash?</a></p>
<p>Does this mean there is no way to write what I want?</p>
<p>If it is useful, My end goal is to a write a program that adds the regex expression for space (\s) to a string where this such space:</p>
<p>For example, start with:</p>
<pre><code>A = "The Cat and Dog"
</code></pre>
<p>After applying the function, this becomes:</p>
<pre><code>B = "The\sCat\sand\sDog"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I believe this is related to another <a href="https://stackoverflow.com/questions/7145934/python-string-is-escaped-when-creating-a-tuple">question</a></p>
<p>The representation of the string and what it actually contains can differ.</p>
<p>Observe:</p>
<pre><code>&gt;&gt;&gt; B = "The" + "\s"
&gt;&gt;&gt; B
'The\\s'
&gt;&gt;&gt; print B
The\s
</code></pre>
<p>Furthermore</p>
<pre><code>&gt;&gt;&gt; A = "The Cat and Dog"
&gt;&gt;&gt; B = str.replace(A, ' ', '\s')
&gt;&gt;&gt; B
'The\\sCat\\sand\\sDog'
&gt;&gt;&gt; print B
The\sCat\sand\sDog
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3.5/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">the docs</a>:</p>
<blockquote>
<p>all unrecognized escape sequences are left in the string unchanged, i.e., the backslash is left in the result</p>
</blockquote>
<p>So while <code>\s</code> is not a proper escape sequence, Python forgives you your mistake and treats the backslash as if you had properly escaped it as <code>\\</code>. But when you then view the string's representation, it shows the backslash properly escaped. That said, the string only contains <strong>one</strong> backslash. It's only the representation that shows it as an escape sequence with two.</p>
</div>
<div class="post-text" itemprop="text">
<p>You must escape the <code>"\"</code></p>
<pre><code>B = "The" + "\\s"

&gt;&gt;&gt; B = "The" + "\\s"
&gt;&gt;&gt; print(B)
The\s
</code></pre>
<p>See the Escape Sequences part:
<a href="https://docs.python.org/3/reference/lexical_analysis.html" rel="nofollow">Python 3 - Lexical Analysis</a></p>
</div>
<span class="comment-copy"><code>B = "The" + "\\s"</code> ? for the function : <code>B = s.replace(" ", "\\s")</code></span>
<span class="comment-copy">That also gives 'The\\s'</span>
<span class="comment-copy"><code>B = A.replace(' ', '\s')</code>, <code>B = A.replace(' ', '\\s')</code>, and <code>B = A.replace(' ', r'\s')</code> are equivalent, and <code>B</code> is the regex you want.</span>
<span class="comment-copy">You forgot the closing parenthesis on <code>B = str.replace(A, ' ', '\s'</code>. OTOH, <code>B = A.replace(' ', '\s')</code> is more idiomatic, although I'd probably write it as <code>B = A.replace(' ', '\\s')</code> or <code>B = A.replace(' ', r'\s')</code> to make it explicit that the replacement string contains two chars - a backslash and a <code>'s'</code>.</span>
<span class="comment-copy">Oops... I'll correct the closing brace, but yes your replaces are better</span>
<span class="comment-copy">Thank you for your help in highlighting the difference between what you write in the string, and how Python interprets the string. It appears I can do exactly the search I need with this information. Thank you :)</span>
<span class="comment-copy">Try it in IDLE you will see.</span>
<span class="comment-copy">@emKaroly Python 2.0 from over 15 years ago is quite obsolete, I wouldn't link to that.</span>
<span class="comment-copy">As Stefan Pochmann explains, it's <i>not</i> necessary here to escape the backslash, since <code>\s</code> isn't a Python string escape sequence (although it <i>is</i> a Python 're' module regex escape sequence). But it is clearer to either escape it or to use a raw string.</span>
<span class="comment-copy">@StefanPochmann Right you are:) I linked a mor recent documentation.</span>
<span class="comment-copy">@CharlesMorris You are welcome.</span>
