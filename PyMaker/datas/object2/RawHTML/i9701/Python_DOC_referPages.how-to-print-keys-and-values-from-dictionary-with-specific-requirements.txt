<div class="post-text" itemprop="text">
<pre><code>def main():
    salesData= readData('icecream.txt')
    print(salesData)
    #printReport(salesData)


# Reads the tabular data
# @param filename name of the input file
# @return a dictionary whose keys are ice cream flavors and whose values are sales data.

def readData(filename):
    # Create an empty dictionary.
    salesData={}

    infile=open(filename, "r")

    # Read each record from the file. 
    for line in infile:
        fields=line.split(":")  # what is field datatype
        flavor=fields[0]
        salesData[flavor]=buildList(fields)
        #print("SalesData", salesData)
        #print()
        #print()
    infile.close()
    return salesData

# Builds a list of store sales contained in the fields split from a string.
# @param fields a list of strings comprising the record fields
# @return a list of floating-point values

def buildList(fields):
    storeSales= []
    for i in range (1, len(fields)):
        sales=float(fields[i])
        storeSales.append(sales)
        #print('StoreSales', storeSales)
        #print()
    return storeSales

# Prints a sales report.
def printReport(salesData):
    numStores=0

#print the dictionary first without the totals?
#call print report


main()
</code></pre>
<p>When I run the program in its current state, it will give me the following output: </p>
<pre><code>{'chocolate': [10225.25, 9025.0, 9505.0], 'strawberry': [9285.15, 8276.1, 8705.0], 'cookie dough': [7901.25, 4267.0, 7056.5], 'rocky road': [6700.1, 5012.45, 6011.0], 'vanilla': [8580.0, 7201.25, 8900.0]}
</code></pre>
<p>However, I NEED it to look like this: </p>
<pre><code>chocolate    10225.25   9025.0      9505.0      Total: 28755.25
vanilla      8580.0     7201.25     8900.0      Total: 24681.25
rocky road   6700.1     5012.45     6011.0      Total: 17723.55
strawberry   9285.15    8276.1      8705.0      Total: 26266.25
cookie dough 7901.25    4267.0      7056.5      Total: 19224.75
           **42691.75   33781.8     40177.5**
</code></pre>
<p>Clean, organized, tabbed, perfect alignment. I don't know how to pull the data from the dictionary in a clean manner. I have to, in addition, add the totals for chocolate, etc. and the 1st, 2nd and 3rd columns. Presentation is important. It's not merely a "how do I output the data" but, "how do I output the data with a clean presentation." I was thinking of using nested for loops, or maybe something with a for loop. But where that for loop goes, or how I use it to print out the dictionary data cleanly how I want it to look like is beyond me. I've looked at other questions asked, but nothing comes close to this level of tabulation, organization and printing specifics for data coming from a dictionary. I've also attempted the often cited "for key, val in X.items():" but that hasn't worked for me. I don't even know where to start with that function and its confusing beyond belief. Where would I put it? How would I name it? Where would I go from there? Not to mention I have columns to add, and rows to add. This is a very specific question. Thank you. </p>
</div>
<div class="post-text" itemprop="text">
<p>Python has an excellent mini-language specifically for string formatting. This is what should be used.</p>
<p>You know that you want your format to be</p>
<p><code>flavor    sell1    sell2    sell3    Total:     total sells</code></p>
<p>Which would equate to the following string format:</p>
<p><code>"{} \t {} \t {} \t {} \t Total: {}"</code></p>
<p>So now that you know your format, the next step is to apply this format to every <code>key, value</code> pair in your dictionary. Use a for loop to iterate over each <code>key, value</code> pair.</p>
<pre><code>for key, value in dictionary.items():
    print("{} \t {} \t {} \t {} \t Total: {}".format(...))
</code></pre>
<p>The last thing left to do is to fill in the blanks. You know that the <code>key</code>s in your <code>dict()</code> are the flavors, so the first parameter to <code>format()</code> would be the <code>key</code> variable:</p>
<p><code>.format(key, ...)</code></p>
<p>Next you need the three values from your <code>key</code>'s, values. We could index each value out of of <code>value</code>:</p>
<p><code>.format(key, value[0], value[1], value[2], ...)</code></p>
<p>Bu that's a bit verbose, and Python had a better method. We can simply "unpack" the list of values into the appropriate spots using the syntax <code>*iterable</code>.</p>
<p><code>.format(key, *value, ...)</code></p>
<p>And the last value left to fill in would be your total. You can make use of the builtin function <code>sum()</code> to add all the values in <code>values</code> together:</p>
<p><code>.format(key, *value, sum(value))</code></p>
<p>Now to print the sum of each column, we first need the value of each key in your <code>dict()</code>. This can be done using a simple list comprehension:</p>
<pre><code>sales = [value for value in d.values()]
</code></pre>
<p>Next, we need to get the first value from each list in <code>sales</code> and add the value. This can be done using a list comprehension and the <code>zip()</code> builtin function:</p>
<pre><code>totals = [round(sum(l), 1) for l in zip(*sales)]
</code></pre>
<p>The round function is used with floats to round them to a certain decimal place. You can change that number to your liking, but I chose one. The last thing left to do is to print the totals of each column. After a bit of experimentation, this should work just fine:</p>
<pre><code>`print("\t\t {}\t {}\t {}".format(*totals))
</code></pre>
<p>So the final, finished solution would be:</p>
<pre><code>sales  = [value for value in d.values()]
    totals = [round(sum(l), 1) for l in zip(*sales)]
    for key, value in salesData.items():
        print("{} \t {} \t {} \t {} \t Total: {}".format(key, *value, sum(value)))
    print("\t\t {}\t {}\t {}".format(*totals))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use python's <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow noreferrer">string formatting</a> to create a regular appearance.</p>
<p>There's a nice website just to do with python formatting: <a href="https://pyformat.info" rel="nofollow noreferrer">https://pyformat.info</a></p>
<p>The format of the table row will look something like:</p>
<pre><code>&gt;&gt;&gt; row = '{flavour}\t{sales[0]}\t{sales[1]}\t{sales[2]}\tTotal: {total}'
</code></pre>
<p>Then you can fill in the fields:</p>
<pre><code>&gt;&gt;&gt; row.format(flavour='chocolate',
...            sales=[10225.25, 9025.0, 9505.0],
...            total=sum([10225.25, 9025.0, 9505.0]))
'chocolate    10225.25   9025.0      9505.0      Total: 28755.25'
</code></pre>
<p>To pull these fields out of the dictionary:</p>
<pre><code>&gt;&gt;&gt; for flavour, sales in salesData.items():
...     print(row.format(flavour=flavour,
...                      sales=sales,
...                      total=sum(sales)))
chocolate    10225.25   9025.0      9505.0      Total: 28755.25
vanilla      8580.0     7201.25     8900.0      Total: 24681.25
rocky road   6700.1     5012.45     6011.0      Total: 17723.55
strawberry   9285.15    8276.1      8705.0      Total: 26266.25
cookie dough 7901.25    4267.0      7056.5      Total: 19224.75
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try the following:</p>
<pre><code>def format_data(data):
    for item in data:
        print('{:15} {:15} {:15} {:15} {:10} Total:{:5}'.format(
            item, data[item][0], data[item][1], data[item][2], '',
            sum(data[item])))
    print('{:15} {:15} {:15} {:15}'.format('',
        sum(data[item][0] for item in data),
        sum(data[item][1] for item in data),
        sum(data[item][2] for item in data)))
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>&gt;&gt;&gt; data = {'chocolate': [10225.25, 9025.0, 9505.0], 'strawberry': [9285.15, 8276.1, 8705.0], 'cookie dough': [7901.25, 4267.0, 7056.5], 'rocky road': [6700.1, 5012.45, 6011.0], 'vanilla': [8580.0, 7201.25, 8900.0]}

&gt;&gt;&gt; format_data(data)
rocky road               6700.1         5012.45          6011.0            Total:17723.55
strawberry              9285.15          8276.1          8705.0            Total:26266.25
vanilla                  8580.0         7201.25          8900.0            Total:24681.25
cookie dough            7901.25          4267.0          7056.5            Total:19224.75
chocolate              10225.25          9025.0          9505.0            Total:28755.25
                       42691.75         33781.8         40177.5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>for key, value in salesData.items():
    print("{} \t {} \t {} \t {} \t Total: {}".format(key, *value, sum(value)))
print("\t", "{} \t {} \t {} \t {} \t".format('',
sum(salesData[value][0] for value in salesData),
sum(salesData[value][1] for value in salesData),
sum(salesData[value][2] for value in salesData)))
</code></pre>
<p>Enter inside the def main(): and you will get the desired output. </p>
</div>
<span class="comment-copy">I have no idea what's going on there...</span>
<span class="comment-copy">peter's answer doesn't address the the  column addition...also, your code was excellent and worked great, it just didn't add up the columns. I was thinking of (maybe you could help me here) initializing three columns (col1, col2 and col3) at 0, and then += them for values [0] [1] and [2] and then printing <code>print("\t\t", col1, "\t", col2, "\t", col3)</code> however it does not work: it does not print the sum of the columns. Just one of the flavors.</span>
<span class="comment-copy">Yes. I was getting the output I wanted from your suggestion and I ran it successfully without a hitch; however, it was missing only three numbers: <code>42691.75   33781.8     40177.5</code>. That is to say, I still don't know how to sum the [0] values from each key into one number that prints below the respective column (repeat for [1] values and [2] values).</span>
<span class="comment-copy">Alright @ice cream, my outstation is finished. Let me know if it works out for you.</span>
<span class="comment-copy">Thank you! This worked for me. However, I'm  missing one thing: <b>how to output the sum of the column beneath each respective column.</b> Any help would be appreciated.</span>
<span class="comment-copy">I get an error that says "d" in "d.values()" is not defined...why is that? thanks!</span>
<span class="comment-copy">Nevermind! Thank you!</span>
<span class="comment-copy">Hey thanks Peter. Appreciate it. A couple questions, though: Where does the for loop go? Is it inside the <code>def main():</code> function after <code>salesData=readData('icecream.txt')</code>? Also, I want to avoid, if at all possible, me manually carrying in the data into the program. You see, the goal was to have information from a file called <code>icecream.txt</code> (that has dictionary information) outputted directly into an excel-like format. I should be able to replace <code>icecream.txt</code> with, say, <code>candy.txt</code> and have it outputted in the same format without having to carry over all the data manually into core porgram.</span>
<span class="comment-copy"><code>printReport</code> looks like a good place to put the loop. Also, to pass the filename for the data into your script, see <a href="https://stackoverflow.com/questions/491085/how-can-i-pass-a-filename-as-a-parameter-into-my-module.">How can I pass a filename as a parameter into my module?</a>, or better <a href="https://stackoverflow.com/questions/4117530/sys-argv1-meaning-in-script">sys.argv[1] meaning in script</a></span>
<span class="comment-copy">I don't quite think this is what the OP wanted. All his rows are aligned at the front.</span>
<span class="comment-copy">@leaf You may like the edited answer</span>
<span class="comment-copy">The output is correct, so that's great! But my biggest complaint is your huge one-liners. Maybe those could be broken into smaller chunks of code? :)</span>
<span class="comment-copy">I frankensteined the last line of code ettanany gave at the end of the working snippet that leaf gave to me, but it said "data" was not found...</span>
<span class="comment-copy">@icecream data is your data dictionary in your question</span>
