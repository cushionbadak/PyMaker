<div class="post-text" itemprop="text">
<p>I know the question is not very precise, and that is because I have no idea what is going on either. I have narrowed down the problem to a couple of lines, but to me the execution seems rather weird.</p>
<pre><code>def loadmaze(backup):
    test = createmaze(10,10) #This creates a new 10x10 matrix
    maze = placewalls(test, "x") #The X is a string with wall positions
    if maze != test: 
    #when placewalls executed correctly, and returned a maze different from the original
        showmaze(maze) #simply printing maze to console
    else:
        return backup #so nothing changes, looks as if function never happened
    return maze,10,10
    # this returns the new maze, with walls, and the dimensions of the new maze
def placewalls(amaze,positions):
    #placing walls, definitely correct
    return amaze-with-walls
</code></pre>
<p>Obviously I changed the variable names so it's clear what I'm doing.
The problem is, when I call the function <code>loadmaze(maze)</code>, it never  returns a maze with walls. Somehow the <code>test</code> and <code>maze</code> values are always identical. I do not understand how this can be as the maze with walls is assigned to <code>maze</code> after <code>test</code>, which at that point does not have walls. 
According to the debug, <code>test</code> <strong>also</strong> contains the walls after the third line has been executed.
Please help, I'm terribly confused.</p>
</div>
<div class="post-text" itemprop="text">
<p>As @stephan said, the variables <code>test</code> and <code>maze</code> refer to the same objects in the memory. So I changed <code>maze = placewalls(test,"x")</code> with <code>maze = placewalls(createmaze(10,10),"x")</code>, thus creating a new object different from maze. This then results in test and maze being two different mazes.</p>
</div>
<span class="comment-copy">You'll need to show the real <code>placewalls</code> code. Clearly "somethinggoeswrong" is true so that it returns its first argument.</span>
<span class="comment-copy">I'm certain somethinggoeswrong is false and it is in fact returning the correct maze including walls. remember that the backup does not have walls.</span>
<span class="comment-copy">As already said by @Daniel, too little code to really say what goes wrong. But could it be the case that you are confused how Python passes variables around (and what variables are)? <code>maze</code> and <code>test</code> might be the same object, but now just with walls. See for example in the <a href="https://docs.python.org/3/faq/programming.html#why-did-changing-list-y-also-change-list-x" rel="nofollow noreferrer">Python FAQ</a>.</span>
<span class="comment-copy">Like @stephan said, looks like <code># placing walls</code> subroutine modifies the object which the first parameter refers to. Please share the full code of the <code>placewalls</code> function.</span>
<span class="comment-copy">I do know what variables are, but how can <code>test</code> be the same as <code>maze</code> when <code>maze</code> gets another value (with walls) after <code>test</code> has been assigned an empty maze?</span>
