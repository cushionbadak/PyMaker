<div class="post-text" itemprop="text">
<p>I have a CSV file that contains matrix:</p>
<pre><code>1,9,5,78
4.9,0,24,7
6,2,3,8
10,21.4,8,7
</code></pre>
<p>I want to create a function that returns list of lists:</p>
<pre><code>[[1.0,9.0,5.0,78.0],[4.9,0.0,24.0,7.0],[6.0,2.0,3.0,8.0],[10.0,21.4,8.0,7.0]]
</code></pre>
<p>this is my attempt:</p>
<pre><code>fileaname=".csv"
def get_csv_matrix(fileaname):
    mat=open(fileaname,'r')
    mat_list=[]
    for line in mat:
        line=line.strip()
        mat_line=[line]
        mat_list.append(mat_line)
return mat_list
</code></pre>
<p>but I get list of lists with one string:</p>
<pre><code>[['1,9,5,78'], ['4.9,0,24,7'], ['6,2,3,8'], ['10,21.4,8,7']]
</code></pre>
<p>how can i turn the lists of strings to lists of floats?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>mat_line = [line]
</code></pre>
<p>This line just takes the line as a single string and makes it into a one element list. If you want to separate it by commas, instead do:</p>
<pre><code>mat_line = line.split(',')
</code></pre>
<p>If you want to also turn them into numbers, you'll have to do:</p>
<pre><code>mat_line = [float(i) for i in line.split(',')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I find it easier to read a list comprehension than a for loop.</p>
<pre><code>def get_csv_matrix(filename):
    with open(filename) as input_file:
        return [[float(i) for i in line.split(',')] for line in input_file]

print (get_csv_matrix("data.csv"))
</code></pre>
<p>The above function opens a file (I use <code>with</code> to avoid leaking open file descriptors), iterates over the lines, splits each line, and converts each item into a floating-point number.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try</p>
<pre><code>fileaname=".csv"
def get_csv_matrix(fileaname):
    mat=open(fileaname,'r')
    mat_list=[]
    for line in mat:
        line=line.strip()
        mat_line=line.split(",")
        for i in mat_line:
            i_position = line.index(i)
            line[i_position] = float(i)
        mat_list.append(mat_line)
    return mat_list
</code></pre>
<p>If any object in mat_line isn't an integer, you will come up with an error, so I suggest you create a validation method to be absolutely sure that it is an integer.</p>
</div>
<span class="comment-copy">Aside: the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><code>csv</code></a> module exists. As does the function <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html#pandas-read-csv" rel="nofollow noreferrer">pandas.read_csv()</a>.</span>
<span class="comment-copy">Just edited it, it will now.</span>
