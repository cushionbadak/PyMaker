<div class="post-text" itemprop="text">
<p>I have a dictionary I created by reading in a whole lot of image files. It looks like this:</p>
<pre><code>files = { 'file1.png': [data...], 'file2.png': [data...], ... 'file1000': [data...]}
</code></pre>
<p>I am trying to process these images to see how similar each of them are to each other. The thing is, with 1000s of files worth of data this is taking forever. I'm sure I have 20 different places I could optimize but I am trying to work through it one piece at a time to see how I can better optimize it.</p>
<p>My original method tested file1 against all of the rest of the files. Then I tested file2 against all of the files. But I still tested it against file1. So, by the time I get to file1000 in the above example I shouldn't even need to test anything at that point since it has already been tested 999 times. </p>
<p>This is what I tried:</p>
<pre><code>answers = {}
for x in files:
    for y in files:
        if y not in answers or x not in answers[y]:
            if(compare(files[x],files[y]) &lt; 0.01):
                answers.setdefault(x, []).append(y)
</code></pre>
<p>This doesn't work, as I am getting the wrong output now. The compare function is just this:</p>
<pre><code>rms = math.sqrt(functools.reduce(operator.add,map(lambda a,b: (a-b)**2, h1[0], h2[0]))/len(h1[0]))
return rms
</code></pre>
<p>I just didn't want to put that huge equation into the if statement.</p>
<p>Does anyone have a good method for comparing each of the data segments of the files dictionary without overlapping the comparisons?</p>
<p><strong>Edit:</strong></p>
<p>After trying ShadowRanger's answer I have realized that I may not have fully understood what I needed. My original answers dictionary looked like this:</p>
<pre><code>{ 'file1.png': ['file1.png', 'file23.png', 'file333.png'],
  'file2.png': ['file2.png'],
  'file3.png': ['file3.png', 'file4.png', 'file5.png'],
  'file4.png': ['file3.png', 'file4.png', 'file5.png'],
  ...}
</code></pre>
<p>And for now I am storing my results in a file like this:</p>
<pre><code>file1.png file23.png file33.png
file2.png
file3.png file4.png file5.png
file6.png
...
</code></pre>
<p>I thought that by using combinations and only testing individual files once I would save a lot of time retesting files and not have to waste time getting rid of duplicate answers. But as far as I can tell, the combinations have actually reduced my ability to find matches and I'm not sure why.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can avoid redundant comparisons <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">with <code>itertools.combinations</code> to get order-insensitive unique pairs</a>. Just <code>import itertools</code> and replace your doubly nested loop:</p>
<pre><code>for x in files:
    for y in files:
</code></pre>
<p>with a single loop that gets the combinations:</p>
<pre><code>for x, y in itertools.combinations(files, 2):
</code></pre>
</div>
<span class="comment-copy">Use set operations on the dict views, i.e. dict.keys() or dict.items().</span>
<span class="comment-copy">@pylang There are no duplicate files, ie keys, and I don't want to get rid of any data sets because I want to see which files are similar to each other. Edit: If you are refering to the answer side, that is what I started with. But when I increased my data set to 1000 files I ended up quiting the program after 5 minutes of run time.</span>
<span class="comment-copy">If you are dealing with images, is it really safe to load all the files in memory? You say you could have thousands of files, but did you actually put the raw data of a thousand images in a dictionary? If these are supposed to be icons or such small images, then it's okay... but with photographs, your computer should explode (unless Python does some magic I don't know there).</span>
<span class="comment-copy">Side-note: <code>functools.reduce(add, ...)</code> is an unnecessarily complicated way to do <code>sum(...)</code>. And you should <i>never</i> use <code>map</code> if you need a <code>lambda</code> function to do it; it will be slower and less readable than an equivalent generator expression/list comprehension, so you could simplify the calculation of <code>rms</code> to the equivalent and likely faster: <code>(sum((a - b) ** 2 for a, b in zip(h1[0], h2[0])) / len(h1[0])) ** 0.5</code></span>
<span class="comment-copy">@Rightleg I do some pre-processing before it goes into the dictionary. Right now I'm storing the histogram of the image. That's another reason I kept the compare function. I may implement a better comparison function in the future.</span>
<span class="comment-copy">Yeah this should work since the iterator from <code>combinations</code> shouldn't take up memory and you only compare two files at a time.  Nice.</span>
<span class="comment-copy">I printed the combinations and it looks like it is working except I am not getting the correct output. I think I have made a grave mistake...</span>
<span class="comment-copy">@ShadowRanger I think I may have found the/an issue. I need it to match with itself also. At least the way I have the answer dictionary set up, I need to have every file have a positive match, even if that means it's only with itself.</span>
<span class="comment-copy">@ShadowRanger I went ahead and tried it with a slightly larger data set to see what kind of results I would get. This method definitely doesn't work like I intended. I have updated the original question, so hopefully someone can help point me in the right direction.</span>
<span class="comment-copy">@user1362058: If you're avoiding duplicate tests, and want forward and reverse mappings, you just need to make both mappings when you get a hit, e.g. in addition to <code>answers.setdefault(x, []).append(y)</code>, you also do <code>answers.setdefault(y, []).append(x)</code></span>
