<div class="post-text" itemprop="text">
<p>Suppose I have a list</p>
<pre><code>myList = [a,b,c,d,e]
</code></pre>
<p>And a function</p>
<pre><code>def doSomething(list):
    #Does something to the list
</code></pre>
<p>And I want to call the function iteratively like this:</p>
<pre><code>doSomething([b,c,d,e])
doSomething([a,c,d,e])
doSomething([a,b,d,e])
doSomething([a,b,c,e])
doSomething([a,b,c,d])
</code></pre>
<p>The first thing that comes to mind would be something like this:</p>
<pre><code>for x in range(0,len(myList)):
    del myList[x]
    doSomething(myList)
</code></pre>
<p>But this doesn't really work, because each time I call del it actually deletes the element. I sort of just want to 'hide' the element each time I call the function. Is there a way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer"><code>itertools.combinations</code></a> for this:</p>
<pre><code>import itertools

for sublist in itertools.combinations([a, b, c, d, e], 4):
    # 4 is the number of elements in each sublist.
    # If you do not know the length of the input list, use len() - 1
    doSomething(sublist)
</code></pre>
<p>This will make <code>sublist</code> a tuple.  If you need it to be a list, you can call <code>list()</code> on it before passing it to <code>doSomething()</code>.</p>
<p>If you care about the order in which the <code>doSomething()</code> calls are done, you will want to reverse the order of iteration so that it begins by removing the first element instead of the last element:</p>
<pre><code>for sublist in reversed(list(itertools.combinations([a, b, c, d, e], 4))):
    doSomething(sublist)
</code></pre>
<p>This is less efficient because all of the sublists must be generated up front instead of one at a time.  mgilson in the comments suggests reversing the input list and then reversing each sublist, which should be more efficient but the code may be harder to read.</p>
</div>
<div class="post-text" itemprop="text">
<p>Normally, looping over indices is a bad idea -- but in this case, it seems that you want to remove elements at a given index (iteratively) so looping over indices actually seems appropriate for once.</p>
<p>You could use <code>list.pop</code> for this purpose, but it turns out that would be an extra O(N) operation for each turn of the loop (once to copy the list, once to remove the i'th element).  We can do it differently by removing the element while we're copying...</p>
<pre><code>for i in range(len(lst)):
    new_list = [x for j, x in enumerate(lst) if j != i]
    doSomething(new_list)
</code></pre>
<p>Note however that it isn't guaranteed that this will be faster than the naive approach:</p>
<pre><code>for i in range(len(lst)):
    new_list = lst[:]  # lst.copy() in python3.x
    new_list.pop(i)
    doSomething(new_list)
</code></pre>
<p>The naive approach has the advantage that the any indexing that needs to be done in <code>.pop</code> is pushed to <code>C</code> code which is genearally faster than doing python comparisons.</p>
</div>
<span class="comment-copy">Copy the list, and delete from that?</span>
<span class="comment-copy">@AndrasDeak I thought that might be a way, but then for large lists I'm copying the list like every time I call the function, doesn't that take heaps of time? Also.. how do I copy lists again?</span>
<span class="comment-copy">Well, for large lists, yes, it might be inefficient. Copying simple (non-nested) lists is as simple as <code>cpy = myList[:]</code>. You can ignore element index <code>k</code> by <code>myList[:k]+myList[k+1:]</code> watching for corner cases; but this will also create a list for you.</span>
<span class="comment-copy">Deleting an element is also expensive, so don't sweat the copy too much...</span>
<span class="comment-copy">I thought about proposing this as well.  I'd be interested to know how timings compare between this and the naive approaches.</span>
<span class="comment-copy">I wonder if the the order of function execution matters</span>
<span class="comment-copy">Could you reverse the input (<code>[e, d, c, b, a]</code>) and then reverse the sublists before passing them to <code>doSomething</code>?  That would prevent getting <i>all</i> the lists up front.</span>
