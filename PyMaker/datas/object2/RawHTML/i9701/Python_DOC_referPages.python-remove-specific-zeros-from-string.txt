<div class="post-text" itemprop="text">
<p>I have a csv which I am loading into a pandas dataframe.  </p>
<p>I want to change a specific column to lose leading zeros from the month and date, and seperates the hour into another column.  </p>
<p>For example, I have a column, called <em>DateTime</em> comes in like "03/17 04:00:00" or "01/01 15:00:00"  and I would like to change the column (and also I guess to concatenate 2010 to the end of the date) to a "Date" Column with "3/17/2010" and a "Time" Column with "4:00:00" or like the second example, a "Date" column with "1/1/2010" and a "time" column with "15:00:00".  </p>
<p>I'm pretty sure I would like to do this with regex_replace, I think that would be easiest?</p>
</div>
<div class="post-text" itemprop="text">
<p>Keep in mind that this assumes your data is all formatted the same:</p>
<pre><code>df = pd.DataFrame({'DateTime': ["03/17 04:00:00", "01/01 15:00:00"]})

dates = []
times = []

for x in df.DateTime:
    d, t = x.split()
    d = re.sub("^0", "", d)
    d += "/2010"
    dates.append(d)
    times.append(t)

df['Date'] = dates
df['Time'] = times
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.split.html" rel="nofollow noreferrer"><code>str.split</code></a> with <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.lstrip.html" rel="nofollow noreferrer"><code>str.lstrip</code></a>:</p>
<pre><code>df[['Date', 'Time']] = df.DateTime.str.split(expand=True)
df.Date = df.Date.str.lstrip('0') + '/2010'
print (df)
         DateTime       Date      Time
0  03/17 04:00:00  3/17/2010  04:00:00
1  01/01 15:00:00  1/01/2010  15:00:00
</code></pre>
<p>Similar solution with <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.replace.html" rel="nofollow noreferrer"><code>str.replace</code></a> by regex <code>^0</code> (first <code>0</code> in string):</p>
<pre><code>df[['Date', 'Time']] = df.DateTime.str.split(expand=True)
df.Date = df.Date.str.replace('^0', '') + '/2010'
</code></pre>
<p><strong>Timings</strong>:</p>
<pre><code>In [10]: %timeit (jez(df2))
1 loop, best of 3: 483 ms per loop

In [11]: %timeit (jez(df))
1 loop, best of 3: 500 ms per loop

In [12]: %timeit (user39(df1))
1 loop, best of 3: 740 ms per loop
</code></pre>
<p><strong>Code for timings</strong>:</p>
<pre><code>df = pd.DataFrame({'DateTime': ["03/17 04:00:00", "01/01 15:00:00"]})
df = pd.concat([df]*100000).reset_index(drop=True)
#[200000 rows x 3 columns]
print (df)
df1 = df.copy()
df2 = df.copy()

def jez(df):
    df[['Date', 'Time']] = df.DateTime.str.split(expand=True)
    df.Date = df.Date.str.lstrip('0') + '/2010'
    return (df)

def jez1(df):
    df[['Date', 'Time']] = df.DateTime.str.split(expand=True)
    df.Date = df.Date.str.replace('^0', '') + '/2010'
    return (df)    

def user39(df):
    dates = []
    times = []

    for x in df.DateTime:
        d, t = x.split()
        d = re.sub("^0", "", d)
        d += "/2010"
        dates.append(d)
        times.append(t)

    df['Date'] = dates
    df['Time'] = times
    return df

print (jez(df))
print (jez(df2))
print (user39(df1))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer"><code>datetime</code></a> module has what you need with <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime" rel="nofollow noreferrer"><code>strptime</code></a>. You should save regex as a last resort, as it's less readable and more prone to error.</p>
<blockquote>
<p><em>classmethod</em> datetime.<strong>strptime</strong>(<em>date_string</em>, <em>format</em>)</p>
<p>Return a <code>datetime</code> corresponding to <em>date_string</em>, parsed according to <em>format</em>. This is equivalent to <code>datetime(*(time.strptime(date_string, format)[0:6]))</code>. <code>ValueError</code> is raised if the <em>date_string</em> and <em>format</em> can’t be parsed by <code>time.strptime()</code> or if it returns a value which isn’t a time tuple. For a complete list of formatting directives, see <a href="https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior" rel="nofollow noreferrer">strftime() and strptime() Behavior</a>.</p>
</blockquote>
<p>The documentation contains the directives, but here is an example you could implement in your code:</p>
<pre><code>import datetime


def convert_time(tm):
    dt = datetime.datetime.strptime(tm, "%m/%d %H:%M:%S")
    dt.year = 2010

    parsed_date = "{month}/{day}/{year}".format(*dt)
    parsed_time = "{hour}:{minute}:{second}".format(*dt)

    return parsed_date, parsed_time
</code></pre>
</div>
<span class="comment-copy">Loops in pandas are obviously slow and better is avoid it.</span>
<span class="comment-copy">Your answer demonstrates that well. I'm still learning pandas, so I broke it down into a loop. Hopefully the skill range of the answers will help people.</span>
