<div class="post-text" itemprop="text">
<p>Regarding syntax in Python</p>
<p>Why do we use <code>open("file")</code> to open but not <code>"file".close()</code> to close it?<br/>
Why isn't it <code>"file".open()</code> or inversely <code>close("file")</code>?  </p>
</div>
<div class="post-text" itemprop="text">
<p>It's because <code>open()</code> is a function, and <code>.close()</code> is an object method. <code>"file".open()</code> doesn't make sense, because you're implying that the <code>open()</code> function is actually a class or instance method of the string <code>"file"</code>. Not all strings are valid files or devices to be opened, so how the interpreter is supposed to handle <code>"not a file-like device".open()</code> would be ambiguous. We don't use <code>"file".close()</code> for the same reason.</p>
<p><code>close("file")</code> would require a lookup of the file name, then another lookup to see if there are file handles, owned by the current process, attached to that file. That would be very inefficient and probably has hidden pitfalls that would make it unreliable (for example, what if it's not a file, but a TTY device instead?). It's much faster and simpler to just keep a reference to the opened file or device and close the file through that reference (also called a handle).</p>
<p>Many languages take this approach:</p>
<pre><code>f = open("file") # open a file and return a file object or handle
# stuff...
close(f)         # close the file, using the file handle or object as a reference
</code></pre>
<p>This looks similar to your <code>close("file")</code> construct, but don't be fooled: it's closing the file through a direct reference to it, not the file name as stored in a string.</p>
<p>The Python developers have chosen to do the same thing, but it looks different because they have implemented it with an object-oriented approach instead. Part of the reason for this is that Python file objects <a href="https://docs.python.org/2/library/stdtypes.html#file-objects" rel="noreferrer">have a lot of methods</a> available to them, such as <code>read()</code>, <code>flush()</code>, <code>seek()</code>, etc. If we used <code>close(f)</code>, then we would have to either change <em>all</em> of the rest of the file object methods to functions, or let it be one random function that behaves differently from the rest for no good reason.</p>
<p><strong>TL;DR</strong><br/>
The design of <code>open()</code> and <code>file.close()</code> is consistent with OOP principals and good file reference practices. <code>open()</code> is a factory-like function that creates objects that reference files or other devices. Once the object is created, then all other operations on that object are done through class or instance methods.</p>
</div>
<div class="post-text" itemprop="text">
<p>Normally you shouldn't use <code>"file".close()</code> explicitly but use <code>open(file)</code> as contextmanager so the file handle is also closed if an exception happened. End of problem :-)</p>
<p>But to actually answer your question I assume the reason is that <code>open</code> supports many options and the returned class differs depending on these options (see also <a href="https://docs.python.org/3/library/io.html" rel="nofollow noreferrer"><code>io</code> module</a>). So it would be simply much more complicated for the end-user to remember which class he wants and then use the <code>"class".open</code> with the right class itself. Note you can also pass "integer file descriptor of the file to be wrapped." to <code>open</code>, this would mean besides having a <code>str.open()</code> method you also get a <code>int.open()</code>. This would be really bad OO design but also confusing. I wouldn't care to guess what kind of questions would be asked on StackOverflow about that (<code>"door".open()</code>, <code>(1).open()</code>)...</p>
<p>However I must admit that there is a <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.open" rel="nofollow noreferrer"><code>pathlib.Path.open</code></a> function. But if you have a Path it isn't ambiguous anymore.</p>
<p>As to a <code>close()</code> function: Each instance will have a <code>close()</code> method already and there are no differences between the different classes, so why create an additional function? There is simply no advantage.</p>
</div>
<div class="post-text" itemprop="text">
<p>Only slightly less new than you but I'll give this one a go, basically opening and closing are pretty different actions in a language like python.  When you are opening the file what you are really doing is creating an object to be worked within your application that represents the file, so you create it with a function that informs the OS that the file has been opened and creates an object that python can use to read and write to the file.  When it comes time to close the file what basically needs to be done is for your app to tell the OS that it is done with the file and dispose of the object that represented the file fro memory, and the easiest way to do that is with a method on the object itself.  Also note that a syntax like <code>"file".open</code> would require the string type to include methods for opening files, which would be a very strange design and require a lot of extensions on the string type for anything else you wanted to implement with that syntax.  <code>close(file)</code> would make a bit more sense but would still be a clunky way of releasing that object/letting the OS know the file was no longer open, and you would be passing a variable <code>file</code> representing the object created when you opened the file rather than a string pointing to the file's path. </p>
</div>
<div class="post-text" itemprop="text">
<p>In addition to what has been said, I quote the changelog in Python removing the built in <code>file</code> type. It (briefly) explains why the class constructor approach using the <code>file</code> type (available in Python 2) was removed in Python 3:</p>
<blockquote>
<p>Removed the file type. Use open(). There are now several different kinds of streams that open can return in the io module.</p>
</blockquote>
<p>Basically, while <code>file("filename")</code> would create an instance of <code>file</code>, <code>open("filename")</code> can return instances of different stream classes, depending on the mode.</p>
<p><a href="https://docs.python.org/3.4/whatsnew/3.0.html#builtins" rel="nofollow noreferrer">https://docs.python.org/3.4/whatsnew/3.0.html#builtins</a></p>
</div>
<span class="comment-copy">It's a style thing. Functions that work with an object generally are methods of that object, but you need a way of generating the object in the first place...</span>
<span class="comment-copy"><code>"file".open()</code> <i>seems wrong</i> to me - not all strings are valid files to open, so having <code>str.open()</code> just seems like poor design, whereas all strings can be <code>split()</code> etc.</span>
<span class="comment-copy">It's not <code>"file".close()</code>, so <code>"file".open()</code> wouldn't match. I suppose it easily could have been <code>close(file_object)</code>.</span>
<span class="comment-copy">I've added one word to your question that I think you left out by accident - feel free to roll back my change if that's not what you intended.</span>
<span class="comment-copy">To close voters: this is not "primarily opinion based." There are sound technical reasons for syntax being the way it is.</span>
<span class="comment-copy">I have a couple of corrections I'd like to make to your explanation: The <code>open</code> function doesn't read your file into memory. <code>read</code> and <code>readlines</code> do that. Also, There isn't necessarily a "lock" on any files you open. It depends on how the operating system handles open file references. I understand what you meant, but I would avoid using the word "lock".</span>
<span class="comment-copy">Thank you!  My MS background was showing through there and I forgot about the differences in how some OS's handle open file handles.  really appreciate the clarification and I've updated my answer.</span>
