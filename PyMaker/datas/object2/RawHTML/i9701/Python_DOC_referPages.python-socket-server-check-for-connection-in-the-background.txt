<div class="post-text" itemprop="text">
<p>I am working on a Wi-Fi thermostat with an app running on my iPhone. It uses sockets to communicate with a python program using the built in socket library. The problem I'm having though, is that I would like to be able to change the temperature when the phone is not connected however the server will search for 1 second then time out (minimum time for the iPhone to connect) this doesn't allow me to adjust the temperature with a rotary encoder smoothly through. is there a way to listern in the background?</p>
<pre><code>import sys
import socket
import os
import time
temp = 15
while True:
    try:
        HOST = '192.168.1.22'
        PORT = 10000
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        s.bind((HOST, PORT))
        s.listen(1)
        s.settimeout(1)
        conn, addr = s.accept()
        #conn.send(str(9).encode())
        conn.send(str(temp).encode())
        while True:
            data = conn.recv(1024)
            if not data: break
            print(data)
            print(data.decode())
            data2 = data.decode()
            if int(data2) in range(5, 31):
                print(data2)
                print("Setting the temperature to " + str(data2) + "Â°")
                conn.send(("Setting the temperature to " + str(data2)).encode())
                temp = data2
            else:
                print("Not in range")
                conn.send("Not in range!\n".encode())
    except:
        print("No Connection!")
</code></pre>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Your terminology is a bit confusing, but I think I see what you're trying to do. When your program executes <code>accept</code> with a 1 second timeout, that's not "searching" -- it's simply waiting for a client.</p>
<p>It sounds like you should split your code into three pieces: </p>
<ol>
<li>actually adjusts the thermometer </li>
<li>listens for a connection from your iPhone client (TCP listener)</li>
<li>waits for ("listens for") adjustments from the rotary encoder.</li>
</ol>
<p>I would put each in a separate thread (using the python <code>threading</code> module). Create a FIFO queue (with the <code>queue</code> module). Have the first (thermostat-adjuster) thread wait on the queue (<code>Queue.get</code>), and have the other two accept instructions (from TCP and rotary encoder, respectively) and feed commands through the queue (<code>Queue.put</code>).</p>
<p>Then you can get rid of the timeout in your TCP listener, and just have it block on the <code>accept</code> indefinitely. Likewise, your rotary encoder listener can simply wait for adjustments. And the thermostat-adjuster thread can just block waiting on instructions from the queue. This makes all three much easier to program, understand and troubleshoot.</p>
</div>
<span class="comment-copy">Ok, thanks for your reply, I will give this a go. I assume that the threading module will be documented on the python documentation somewhere?  Thanks</span>
<span class="comment-copy">Yes. Start here <a href="https://docs.python.org/3/" rel="nofollow noreferrer">docs.python.org/3</a>. Adjust version as needed and type <code>threading</code> into the search box.</span>
