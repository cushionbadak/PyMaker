<div class="post-text" itemprop="text">
<p>While <a href="https://stackoverflow.com/questions/40943962/recursive-function-that-will-sum-digits-of-input">looking at an answer given by wwii</a>, I commented on his indentation saying it was wrong. However, after running his code in my IDLE, I discovered that it ran without a hitch.</p>
<p>I tried a few examples, just to make sure I was getting correct results:</p>
<pre><code>&gt;&gt;&gt; def foo():
    return 0

&gt;&gt;&gt; foo()
0
&gt;&gt;&gt; def bar():
    return foo() + 5

&gt;&gt;&gt; bar()
5
&gt;&gt;&gt; def foobar():
    return foo() + bar()

&gt;&gt;&gt; foobar()
5
&gt;&gt;&gt; 
</code></pre>
<p>As you can see, all of them ran fine. If I try the same in a regular script, Python will raise an error before my program even runs, telling me I forget to indent a block:</p>
<p><a href="https://i.stack.imgur.com/dRZvT.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/dRZvT.png"/></a></p>
<p>How come this kind of indentation is allowed in the interactive IDLE, but not in regular scripts? I looked over the documentation for the IDLE, more specifically section <a href="https://docs.python.org/3/library/idle.html#automatic-indentation" rel="nofollow noreferrer">25.5.2.1  Automatic indentation</a>, which was unhelpful in finding an answer.</p>
<p>Furthermore, <a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions" rel="nofollow noreferrer">the Python documenation on functions</a> states that function bodies must be indented:</p>
<blockquote>
<p>The keyword def introduces a function definition. It must be followed by the function name and the parenthesized list of formal parameters. The statements that form the body of the function start at the next line, <strong>and must be indented</strong>.</p>
</blockquote>
<p><sub>(emphasis mine)</sub></p>
<p>Why is this kind of indentation allowed in the IDLE, but completely shut down in a regular script? Is this on purpose? And if so, is this behavior documented somewhere?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>&gt;&gt;&gt;</code> that you see in IDLE is just a prompt. It's sheer coincidence that this prompt happens to be four characters long and you happen to be indenting your code with four spaces too.</p>
<p>To see and think about how the code really works, let's remove all of the <code>&gt;&gt;&gt;</code> prompts. For clarity, we'll remove the printed results too.</p>
<p>Now it looks like perfectly normal Python code:</p>
<pre><code>def foo():
    return 0

foo()

def bar():
    return foo() + 5

bar()

def foobar():
    return foo() + bar()

foobar()
</code></pre>
<p>So IDLE is no different from any other Python interpreter, it's just the way it puts the <code>&gt;&gt;&gt;</code> prompt <em>on the first line only</em> that makes it confusing. If you think about how the code would look with those four characters removed, it will all make more sense.</p>
</div>
<div class="post-text" itemprop="text">
<p>The code is right but the IDLE REPL is not like Python:</p>
<pre><code>&gt;&gt;&gt; def foo():
    return 0
</code></pre>
<p>IDLE prints that whereas Python:</p>
<pre><code>&gt;&gt;&gt; def foo():
...     return 0
</code></pre>
<p>See that the four spaces before return are there, but as they are aligned with the leftmost column rather than prefixed with three dots and a space, the spaces appear to not exist, if you expected the code to be indented more.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have correct indentation in the IDLE and wrong in your script.</p>
<p>In the IDLE there is 4 spaces before <code>return 0</code>. And in your script there is not.</p>
<p>Your script should be looking like that:</p>
<pre><code>def foo():
    return 0

def bar():
    return foo() + 5

def foobar():
    return foo() + bar()

print(foo())
print(bar())
print(foobar())
</code></pre>
<h2>Answer to "Why IDLE indentation is correct?"</h2>
<p>It uses the <code>&gt;&gt;&gt;</code> mark as the beginning of the next command input. This is the standard method. It (in variations) is used everywhere.</p>
<pre><code>&gt;&gt;&gt; &lt;-start of the line. Zero spaces.
&lt;-start of the line. Zero spaces.
</code></pre>
<p>So next code will have wrong indentation:</p>
<pre><code>&gt;&gt;&gt; def foo():
return 0
</code></pre>
<p>Because it is an equivalent to next code written in the script file:</p>
<pre><code>def foo():
return 0
</code></pre>
<h3>But</h3>
<pre><code>&gt;&gt;&gt; &lt;-start of the line. Zero spaces.
    &lt;-start of the block. Indent 4 spaces.
</code></pre>
<p>So next code will have correct indentation:</p>
<pre><code>&gt;&gt;&gt; def foo():
    return 0
</code></pre>
<p>Because it is an equivalent to next code written in the script file:</p>
<pre><code>def foo():
    return 0
</code></pre>
</div>
<span class="comment-copy">I'm guessing that the prompt, <code>&gt;&gt;&gt; </code>, is stripped from the first line before processsing.  It is annoying though.</span>
<span class="comment-copy">@wwii Sure is. But its seems more confusing than annoying.</span>
<span class="comment-copy">I've been exposed as an idle coder.</span>
<span class="comment-copy">Your initial confusion is why IDLE uses 8-space tab indents in shell -- so followup lines look physically indented.  I hope someday to put the '&gt;&gt;&gt; ' prompt in a distinct margin, along with other notations.  Indents would then be the same space indent as in the editor, and there would be an option to save or copy code without the prompt, so it would be ready to run from an editor window.</span>
<span class="comment-copy"><i>"The code is right but the IDLE REPL is not like Python"</i> - Sorry, I'm not quite following on that sentence you. Could you explain a bit more?</span>
<span class="comment-copy">@leaf The standard REPL is line oriented: you submits physical lines to Python and the history mechanism recalls physical lines.  IDLE's Shell is statement oriented: you submit complete statements to Python (and can edit entire multiline statements.  The history mechanism recalls complete statements.</span>
