<div class="post-text" itemprop="text">
<p>Our development team uses a PEP8 linter which requires a <strong>maximum line length of 80 characters</strong>.</p>
<p>When I'm writing unit tests in python, I like to have <strong>descriptive method names</strong> to describe what each test does. However this often leads to me exceeding the character limit.</p>
<p>Here is an example of a function that is too long...</p>
<pre><code>class ClientConnectionTest(unittest.TestCase):

    def test_that_client_event_listener_receives_connection_refused_error_without_server(self):
        self.given_server_is_offline()
        self.given_client_connection()
        self.when_client_connection_starts()
        self.then_client_receives_connection_refused_error()
</code></pre>
<h3>My Options:</h3>
<ul>
<li><blockquote>
<p>You could just write shorter method names!</p>
</blockquote>
<p>I know, but I don't want to lose the descriptiveness of the test names.</p></li>
<li><blockquote>
<p>You could write multi-line comments above each test instead of using long names!</p>
</blockquote>
<p>This is a decent idea, but then I won't be able to see the test names when running the tests inside my IDE (PyCharm).</p></li>
<li><blockquote>
<p>Perhaps you can continue the lines with a backslash (a logical line continuation character).</p>
</blockquote>
<p>Unfortunately this isn't an option in Python, as mentioned in Dan's answer.</p></li>
<li><blockquote>
<p>You could stop linting your tests.</p>
</blockquote>
<p>This makes sense in some ways, but it's nice to encourage a well-formatted test suite.</p></li>
<li><blockquote>
<p>You could increase the line length limit.</p>
</blockquote>
<p>Our team likes having the limit because it helps keep the code readable on narrow displays, so this isn't the <em>best</em> option.</p></li>
<li><blockquote>
<p>You could remove <code>test</code> from the start of your methods.</p>
</blockquote>
<p>This is not an option. Python's test runner needs all test methods to start with <code>test</code> or it won't pick them up.</p>
<p>Edit: Some test runners let you specify a regular expression when searching for test functions, although I'd rather not do this because it's extra setup for everyone working on the project. Also, it doesn't really answer the original question.</p></li>
<li><blockquote>
<p>You could separate the EventListener into its own class and test it separately.</p>
</blockquote>
<p>The Event Listener <strong><em>is</em></strong> in its own class (and is tested). It's just an interface that gets triggered by events happening within ClientConnection. This kind of suggestion seems to have good intent, but is misdirected and doesn't help answer the original question.</p></li>
<li><blockquote>
<p>You could use a BDD Framework like <a href="http://pythonhosted.org/behave/" rel="noreferrer">Behave</a>. It's designed for expressive tests.</p>
</blockquote>
<p>This is true, and I hope to use more of them in the future. Although I'd still like to know how to split function names across lines.</p></li>
</ul>
<h3>Ultimately...</h3>
<p>Is there a way in Python to <strong>split a long function declaration across multiple lines</strong>?</p>
<p>For example...</p>
<pre><code>def test_that_client_event_listener_receives_
  connection_refused_error_without_server(self):
    self.given_server_is_offline()
    self.given_client_connection()
    self.when_client_connection_starts()
    self.then_client_receives_connection_refused_error()
</code></pre>
<p>Or will I have to bite the bullet and shorten it myself?</p>
</div>
<div class="post-text" itemprop="text">
<p>No, this is not possible.</p>
<p>In most cases such a long name would be undesirable from the standpoint of readability and usability of the function, though your use case for test names seems pretty reasonable.</p>
<p>The <a href="https://docs.python.org/3/reference/lexical_analysis.html" rel="noreferrer">lexical rules of Python</a> do not allow a single token (in this case an identifier) to be split across multiple lines. The logical line continuation character (<code>\</code> at the end of a line) can join multiple physical lines into a single logical line, but cannot join a single <em>token</em> across multiple lines.</p>
</div>
<div class="post-text" itemprop="text">
<p>You <em>could</em> also write a decorator that mutates <code>.__name__</code> for the method.</p>
<pre><code>def test_name(name):
    def wrapper(f):
        f.__name__ = name
        return f
    return wrapper
</code></pre>
<p>Then you could write:</p>
<pre><code>class ClientConnectionTest(unittest.TestCase):
    @test_name("test_that_client_event_listener_"
    "receives_connection_refused_error_without_server")
    def test_client_offline_behavior(self):
        self.given_server_is_offline()
        self.given_client_connection()
        self.when_client_connection_starts()
        self.then_client_receives_connection_refused_error()
</code></pre>
<p>relying on the fact that Python concatenates source-adjacent string literals.</p>
</div>
<div class="post-text" itemprop="text">
<p>Per the answer to this question:<a href="https://stackoverflow.com/questions/18444840/how-to-disable-a-pep8-error-in-a-specific-file">How to disable a pep8 error in a specific file?</a>, use the <code># nopep8</code> or <code># noqa</code> trailing comment to disable PEP-8 for a long line. It's important to know when to break the rules. Of course, the Zen of Python would tell you that "Special cases aren't special enough to break the rules."</p>
</div>
<div class="post-text" itemprop="text">
<p>We can applying <a href="https://wiki.python.org/moin/PythonDecorators" rel="nofollow">decorator</a> to the class instead of method since <code>unittest</code> get methods name from <code>dir(class)</code>.</p>
<p>The decorator <code>decorate_method</code> will go through class methods and rename method's name based on <code>func_mapping</code> dictionary.</p>
<p>Thought of this after seeing decorator answer from @Sean Vieira , +1 from me</p>
<pre><code>import unittest, inspect

# dictionary map short to long function names
func_mapping = {}
func_mapping['test_client'] = ("test_that_client_event_listener_receives_"
                               "connection_refused_error_without_server")     
# continue added more funtion name mapping to the dict

def decorate_method(func_map, prefix='test_'):
    def decorate_class(cls):
        for (name, m) in inspect.getmembers(cls, inspect.ismethod):
            if name in func_map and name.startswith(prefix):
                setattr(cls, func_map.get(name), m) # set func name with new name from mapping dict
                delattr(cls, name) # delete the original short name class attribute
        return cls
    return decorate_class

@decorate_method(func_mapping)
class ClientConnectionTest(unittest.TestCase):     
    def test_client(self):
        # dummy print for testing
        print('i am test_client')
        # self.given_server_is_offline()
        # self.given_client_connection()
        # self.when_client_connection_starts()
        # self.then_client_receives_connection_refused_error()
</code></pre>
<p>test run with <code>unittest</code> as below did show the full long descriptive function name, thinks it might works for your case though it may not sounds so elegant
and readable from the implementation</p>
<pre><code>&gt;&gt;&gt; unittest.main(verbosity=2)
test_that_client_event_listener_receives_connection_refused_error_without_server (__main__.ClientConnectionTest) ... i am client_test
ok
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sort of a context-specific approach to the problem. The test case you've presented actually looks very much like a <em>Natural Language format</em> of describing the necessary steps for a test case to take. </p>
<p>See if using the <a href="http://pythonhosted.org/behave/" rel="nofollow noreferrer"><code>behave</code> Behavior Driver development style framework</a> would make more sense here. Your "feature" might look like (see how the <code>given</code>, <code>when</code>, <code>then</code> reflect what you had):  </p>
<pre><code>Feature: Connect error testing

  Scenario: Client event listener receives connection refused error without server
     Given server is offline
      when client connect starts
      then client receives connection refused error
</code></pre>
<p>There is also relevant <a href="https://github.com/mdwhatcott/pyspecs" rel="nofollow noreferrer"><code>pyspecs</code> package</a>, sample usage from a recent answer on a related topic:</p>
<ul>
<li><a href="https://stackoverflow.com/q/40744502/771848">Write descriptive unit tests</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>The shorter function name solution has a lot of merit.  Think about what is <em>really</em> needed in your actual function name and what is supplied already.</p>
<pre class="lang-python prettyprint-override"><code>test_that_client_event_listener_receives_connection_refused_error_without_server(self):
</code></pre>
<p>Surely you already know it's a test when you run it?  Do you really need to use underscores? are words like 'that' really required for the name to be understood? would camel case be just as readable? how about the first example below as a rewriting of the above (character count = 79):
  Accepting a convention to use abbreviations for a small collection of common words is even more effective, e.g. Connection = Conn, Error = Err.  When using abbreviations you have to be mindful of the context and only use them when there is no possiblity of confusion - Second example below.
  If you accept that there's no actual need to mention the client as the test subject in the method name as that information is in the class name then the third example may be appropriate. (54) characters.</p>
<p>ClientEventListenerReceivesConnectionRefusedErrorWithoutServer(self):</p>
<p>ClientEventListenerReceivesConnRefusedErrWithoutServer(self):</p>
<p>EventListenerReceiveConnRefusedErrWithoutServer(self):</p>
<p>I'd also agree with the the suggestion from B Rad C "use descriptive name as the msg kwarg arg in in a self.assert" You should only be interested in seeing output from failed tests when the testsuite is run.  Verification that you have all the necessary tests written shouldn't depend on having the method names so detailed.</p>
<p>P.S. I'd probably also remove 'WithoutServer' as superfluous as well.  Shouldn't the client event handler receive the event in the case that the server isn't contactable for any reason? (although tbh I'd think that it would be better that if they client can't connect to a server it receives some sort of 'connection unavailable' , connection refused suggests that the server can be found but refuses the connection itself.)</p>
</div>
<div class="post-text" itemprop="text">
<p>The need for this kind of names may hint at other smells.</p>
<pre><code>class ClientConnectionTest(unittest.TestCase):
   def test_that_client_event_listener_receives_connection_refused_error_without_server(self):
       ...
</code></pre>
<p><code>ClientConnectionTest</code> sounds pretty broad (and not at all like a testable unit), and is likely a large class with plenty of tests inside that could be refocused. Like this:</p>
<pre><code>class ClientEventListenerTest(unittest.TestCase):
  def receives_connection_refused_without_server(self):
      ...
</code></pre>
<p>"Test" is not useful in the name because it's implied.</p>
<p>With all the code you've given me, my final advice is: refactor your test code, then revisit your problem (if it's still there).</p>
</div>
<span class="comment-copy">Why not use a descriptive function docstring? Then you could print it with <code>func.__doc__</code></span>
<span class="comment-copy">Stop linting your unit tests.</span>
<span class="comment-copy">Then turn off this rule. It's a minor insanity that you're trying so hard to work around this lint rule rather than just disabling it.</span>
<span class="comment-copy">Revisit PEP8 <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">python.org/dev/peps/pep-0008</a>, Good reasons to ignore guidelines: <code>When applying the guideline would make the code less readable, even for someone who is used to reading code that follows this PEP.</code> In your case that would be using shorter function name.</span>
<span class="comment-copy">There are two hard problems in computer science, cache invalidation, naming things and off-by-one errors.</span>
<span class="comment-copy">That's a shame. I still feel like there could be a magic solution somehow though. --- I should mention that I've tried the backslash in my post, just in case anyone mentions it to me.</span>
<span class="comment-copy">Your best best is to use your descriptive name as the msg kwarg arg in in a self.assert* method. If the test passes you won't see it. But if the test fails your descriptive string will be available on the test result object.</span>
<span class="comment-copy">It is worth noting that there is <b>exactly one situation</b> where the use of the line continuation character is acceptable: long <code>with</code> statements: <code>with expr1 as x, \&lt;newline&gt; expr2 as y ...</code>. In <b>all</b> other cases, please, just wrap the expression in parenthesis: <code>(a_very_long &lt;newline&gt; + expression)</code> works fine, and is much more readable and <i>robust</i> then <code>a_very_long \&lt;newline&gt; + expression</code>... the latter breaks by just adding a single space after the backslash!</span>
<span class="comment-copy">@Bakuriu - Whoa! I didn't know you couldn't wrap a <code>with</code> statement in parens.</span>
<span class="comment-copy">@mattmc3 The reason is simple: it is not an expression. AFAIK it's <i>literally</i> the only case where using parenthesis for continuation on a newline is simply not an option.</span>
<span class="comment-copy">This is a <i>very</i> good idea. It looks very readable too. I'll try it now and see if my IDE shows the longer function names.</span>
<span class="comment-copy">Unfortunately the decorator doesn't get applied before the test runs in PyCharm, meaning I can't see the descriptive names from my test runner.</span>
<span class="comment-copy">I think you'll want to decorate <code>wrapper</code> with <code>@functools.wraps(f)</code>.</span>
<span class="comment-copy">This is the best have-your-cake-and-eat-it-too solution; it combines all of the features that @BrandonIbbotson was looking for. Too bad PyCharm doesn't quite grok it yet.</span>
<span class="comment-copy">Even better, modify the decorator to generate a descriptive name from the function's docstring.</span>
<span class="comment-copy">That's actually a fantastic idea because it lets me lint the rest of the test files. I just tested it and it works. I also get to keep all the benefits of the long method names. --- My only concern is that the team won't like seeing the <code># nopep8</code> comment littered throughout the tests ;)</span>
<span class="comment-copy">I was thinking of mentioning that I knew there were BDD options like <code>behave</code>. However I didn't want to distract people too much in my question. It looks like a really nice framework and I'll probably use it in the future. I actually asked my team if I could use it in this project, but they didn't want to tests to look "weird" ;) --- I've never seen pyspecs before. Thanks for the suggestion.</span>
<span class="comment-copy">@BrandonIbbotson gotcha, I understand why you did not want to mention it - makes perfect sense. <code>pyspecs</code>, by the way, might be easier to integrate into your test codebase though - a more "python" way of doing BDD - no these feature files needed. Thanks!</span>
<span class="comment-copy">TL;DR - please compare the length of your answer with other answer.</span>
<span class="comment-copy">MarianD : So sorry, but the answer was given for the OP who may be bothered to take a minute to read it and addressed several strategies for shortening the name with constructive examples and rationale.  If you want the short version ...  "Avoid unnecessary words and punctuation and shorten common words consistently" - is that brief enough?</span>
<span class="comment-copy">With python's unittest library, each test method has to begin with <code>test</code> otherwise the test runner doesn't pick it up.</span>
<span class="comment-copy">@BrandonIbbotson <code>test_EventListenerReceiveConnRefusedErrWithoutServer(self):</code></span>
<span class="comment-copy">I like CamelCase, but I think it appears to b a violation of PEP 8: " Use the function naming rules: lowercase with words separated by underscores as necessary to improve readability. "</span>
<span class="comment-copy">The event listener is an interface. The methods in it are triggered by things happening with ClientConnection. Testing the event listener on its own has already been done. Personally I think ClientConnection follows SRP pretty well, but I could be biased (and you can't see it). --- Python test names <i>must</i> begin with <code>test</code> or the test runner doesn't pick them up.</span>
<span class="comment-copy">@BrandonIbbotson Ah, I get it now, you're testing that the <i>client connection</i> triggers something in the event listener. That would've been more obvious with a name like "test_that_connection_without_server_triggers_connection_refused_event". The "test" part requirement is awful because it forces you to either go with awkward names or names full of useless glue.</span>
<span class="comment-copy">That's a better method name. I might rename a couple of those methods how you've suggested. Although I'll probably still have a lot of methods over 80 chars</span>
<span class="comment-copy">From what I see you can nest classes in Python. Does the test runner handle that? Maybe you can split the insides of ClientConnectionTest into topics that are nested classes containing related tests. That way the topic's class carries the part of the name that you don't need to write on each test.</span>
<span class="comment-copy">Yeah figured that might be the case. Not sure what else to suggest then. Maybe give extending the character limit a go anyway, we did that ourselves and in the end realized it's not that big of a deal and everyone had room to welcome more  than 80 char lines. Good luck!</span>
