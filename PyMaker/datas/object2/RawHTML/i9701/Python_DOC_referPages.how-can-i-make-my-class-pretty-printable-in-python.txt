<div class="post-text" itemprop="text">
<p>Python has a pretty printer (<code>pprint(...)</code>). I would like to make my classes pretty printable. Will pretty print print my instances in a better way, if I provide a certain interface?</p>
<p>The Python documentation in section <a href="https://docs.python.org/3/library/pprint.html" rel="noreferrer">8.11</a> shows different examples, but no example how to make a user defined class pretty printable.</p>
<p><strong>So what interface need my classes to provide?</strong><br/>
Is there any other (maybe better) formatter?</p>
<hr/>
<p><strong>Use Case:</strong></p>
<p>I want to pretty print the content of <a href="https://docs.python.org/3.6/library/configparser.html" rel="noreferrer">ConfigParser</a>, for which I have create an extended version called <a href="https://github.com/Paebbels/ExtendedConfigParser?ts=2" rel="noreferrer">ExtendenConfigParser</a>. So I have the possibility to add more functionality or add a matching pretty print interface.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>pprint</code> does not look for any hooks. The <code>pprint.PrettyPrinter</code> uses a <em>dispatch pattern</em> instead; a series of methods on the class that are keyed on <code>class.__repr__</code> references.</p>
<p>You can subclass <code>pprint.PrettyPrinter</code> to teach it about your class:</p>
<pre><code>class YourPrettyPrinter(pprint.PrettyPrinter):
    _dispatch = pprint.PrettyPrinter.copy()

    def _pprint_yourtype(self, object, stream, indent, allowance, context, level):
        stream.write('YourType(')
        self._format(object.foo, stream, indent, allowance + 1,
                     context, level)
        self._format(object.bar, stream, indent, allowance + 1,
                     context, level)
        stream.write(')')

    _dispatch[YourType.__repr__] = _pprint_yourtype
</code></pre>
<p>then use the class directly to pretty print data containing <code>YourType</code> instances.  Note that this is contingent on the type having their own custom <code>__repr__</code> method!</p>
<p>You can also plug functions directly into the <code>PrettyPrinter._dispatch</code> dictionary; <code>self</code> is passed in explicitly. This is probably the better option for a 3rd-party library:</p>
<pre><code>from pprint import PrettyPrinter

if isinstance(getattr(PrettyPrinter, '_dispatch'), dict):
     # assume the dispatch table method still works
     def pprint_ExtendedConfigParser(printer, object, stream, indent, allowance, context, level):
         # pretty print it!
     PrettyPrinter._dispactch[ExtendedConfigParser.__repr__] = pprint_ExtendedConfigParser
</code></pre>
<p>See the <a href="https://hg.python.org/cpython/file/3.5/Lib/pprint.py" rel="nofollow noreferrer"><code>pprint</code> module source code</a> for how the other dispatch methods are written.</p>
<p>As always, single-underscore names like <code>_dispatch</code> are internal implementation details that can be altered in a future version. However, it is the best option you have here.</p>
</div>
<span class="comment-copy">What do you mean by 'pretty printed' class? Like dict?</span>
<span class="comment-copy"><code>pprint(config)</code> gives only <code>&lt;lib.ExtendedConfigParser.ExtendedConfigParser object at 0x0000000003569940&gt;</code>. The internal data structures are two nested ordered dictionaries. I would like to print them as 2 nested dicts. I could write a function for this job, but I would like to have a method and/or pprint compatible class.</span>
<span class="comment-copy">I don't think <code>pprint</code> offers that functionality. However, you <i>could</i> give your class a <a href="https://docs.python.org/3/reference/datamodel.html#object.__format__" rel="nofollow noreferrer"><code>__format__</code></a> method (in addition to <code>__repr__</code> and <code>__str__</code> methods) to make it print prettily when it's passed to the <code>format</code> built-in function or the <code>str.format</code> method.</span>
<span class="comment-copy">Your proposed solution seems to have no harm if my classes already use (multi-)inheritance, right?</span>
<span class="comment-copy">@Paebbels: do make sure there is a unique <code>__repr__</code> method to key to, otherwise I see no potential for harm.</span>
<span class="comment-copy">The ConfigParser class abstracts INI configuration files. If I would like to also print out the INI representation format, then I should use <code>__format__</code>, right? Because <code>pprint(...)</code> targets Python readable representations.</span>
<span class="comment-copy">@Paebbels you'll have to experiment with how you'd integrate that with the pprint output (given the indentation and allowance values, for example).</span>
