<div class="post-text" itemprop="text">
<p>I'm learning numpy. But I got some questions confused me:</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.arange(10)
&gt;&gt;&gt; a.sum()
45
</code></pre>
<p>and:<code>sum(a)</code> give the same result.
So why a built-in function can support the calculation of a data type from a third-party library? min() and max() do the same.(When the dim is 1)</p>
<p>I got two guesses about this, I prefer the latter:</p>
<ol>
<li>python core developer add the support for ndarray;</li>
<li>some hidden attributes define in ndarray make that happen.(If so, what is it?)</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>All a third-party library type has to do, is implement the expected <em>protocol</em> (sometimes also called an <em>interface</em>). The <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum()</code> function documentation</a> tells you what is expected:</p>
<blockquote>
<p>Sums <em>start</em> and the items of an <strong><em>iterable</em></strong> from left to right and returns the total.</p>
</blockquote>
<p><code>min()</code> and <code>max()</code> state similar requirements (<em>Return the smallest item in an iterable</em>, <em>Return the largest item in an iterable</em>).</p>
<p>Here, <a href="https://docs.python.org/3/glossary.html#term-iterable" rel="nofollow noreferrer"><em>iterable</em></a> is a protocol, described in the <a href="https://docs.python.org/3/library/stdtypes.html#typeiter" rel="nofollow noreferrer">standard types documentation</a>. Protocols are not themselves types, they are just a collection of methods that are expected to behave in a certain way. The <a href="https://docs.python.org/3/library/collections.abc.html#module-collections.abc" rel="nofollow noreferrer"><code>collections.abc</code> module</a> provides several objects you can use to test if something implements a protocol:</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; from collections.abc import Iterable
&gt;&gt;&gt; a = np.arange(10)
&gt;&gt;&gt; isinstance(a, Iterable)
True
</code></pre>
<p>So the <code>ndarray</code> type is an iterable, and that's what the <code>sum()</code> function uses to get all the values contained in the array, summing those values for you.</p>
<p>Because Python relies on protocols, the core language developers don't have to add support for every third-party library out there. Instead, the libraries simply match the expectations of the core language.</p>
<p>Note that the <code>ndarray.sum()</code> implementation can make use of the internal implementation of the type; it probably can produce the sum faster, as it doesn't have to convert the internal data to Python objects first (iteration returns <em>boxed types</em>, Python <code>int</code> objects in this case, while the internal representation contains bare C integers).</p>
</div>
<span class="comment-copy"><code>np.sum(a,...)</code> tries to run <code>a.sum(...)</code>.  That is, it delegates to array method (if it exists).  That <code>ndarray</code> subclasses can add their own details.</span>
