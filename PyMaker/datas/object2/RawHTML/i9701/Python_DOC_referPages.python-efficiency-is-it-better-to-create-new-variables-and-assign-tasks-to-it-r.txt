<div class="post-text" itemprop="text">
<p>I apologise if this question has been asked many times before but I am probably using wrong terms to find the answer. </p>
<p>I am using Rasberry Pi so I care about efficiency. 
in Python script I have a variable called foo and I need to strip it and then make a list of it. 
So far this is how my code looks like:</p>
<pre><code> foo = "hello, world"
 foo = foo[1:-1]         #strip away the quotation marks.
 foo = foo.split(", ")   #make a list of it
</code></pre>
<p>My question is: is it okay if I keep on using same variable or should I create new ones? Or should I do something like this:</p>
<pre><code>foo = "hello, world"
bar = foo[1:-1]
fubar = bar.split(", ")
</code></pre>
<p>Furthermore, foo variable keeps getting different strings many times a second. 
I mean with every instance of that variable, there is a new memory allocation, but does it mean that I should keep on using same variable then? </p>
<p>Thank you for your answers and again, apologise for stupid question. </p>
</div>
<div class="post-text" itemprop="text">
<p>It's largely a stylistic choice. Using a single name will be slightly more efficient and avoid keeping temporaries around after they stop being needed, but it's usually a trivial difference. Function locals are (in CPython anyway) just stored as pointers in an array for the function's scope; storing three pointers instead of one is not a meaningful distinction unless it ends up keeping alive a huge object.</p>
<p>Stick to new names when the <em>meaning</em> of the data stored changes. In particular, it's bad form to reuse a variable for data of a completely different type or purpose across a long function (it confuses maintainers when it has one meaning in lines 1-20, and a different one in 40-50).</p>
<p>In your specific case, the first two values stored seem correlated; it's probably okay to reuse the name. I'd be leery of reusing the name after the <code>split</code> though; switching the type of a variable is often bad form (the exceptions being when you're doing initial parsing of something that is a <code>str</code> that logically represents a sequence of values, which could be the case here).</p>
<p>Basically, don't be needlessly confusing.</p>
<p>Side-note: When I see <code>foo.split(", ")</code>, that's code smell. If you're working with CSV data, use <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">the <code>csv</code> module</a>, don't roll your own CSV parser with <em>terrible</em> edge cases and errors.</p>
</div>
<div class="post-text" itemprop="text">
<p>In terms of time efficiency, the differences between the two approaches are negligible. The interpreter will need to dynamically allocate memory regardless of whether or not they are referenced by the same variable.</p>
<p>As far as space efficiency, the python interpreter will deallocate the memory as soon as you leave the scope in which it has references. For example, if this operation is being executed inside of a function definition or a loop, the memory will be deallocated at the end of every activation of this function or loop regardless of whether the memory is in one location or three.</p>
<p>For these reasons, I would suggest sticking with three separate variables to make it clear when you need to look at this later on that you are dealing with three distinct conceptual pieces of information. If later on you discover that this has somehow become a bottleneck, you can always go back and optimize.</p>
</div>
<span class="comment-copy">Thank you for your answer. foo variable was a string that looked like this ["item1", "item2", "item3"] (yes, it looks like a list but is actually a string). Seemed like using stripping and splitting was enough to do the job.</span>
<span class="comment-copy">@user7074716: Actually, the correct solution here would probably be <code>json.loads(foo)</code> or <code>ast.literal_eval(foo)</code> (depending on whether it's logically JSON or logically Python literals). That does all the parsing (stripping quotes as well) at once, correctly, efficiently, and without weird edge cases (e.g. you want <code>["foo, bar", "baz"]</code> to be two elements, not three, and you don't want to fail to split if your input happens to omit the space after a comma). Basically, it's always a good idea to make every effort to avoid rolling your own parser; reinventing the wheel rarely ends well.</span>
<span class="comment-copy">Even if its only for that one case?</span>
<span class="comment-copy">@user7074716: Well, if you're literally only parsing <code>'["item1", "item2", "item3"]'</code> then the efficient solution is to do <code>foo = ["item1", "item2", "item3"]</code>. :-) But I'm guessing you're parsing other things. Your solution is faster if the input <i>never</i> violates your expectations in <i>any</i> way. But it's still more code to maintain, less self-documenting; if it ever <i>does</i> get slightly different data, getting the wrong answer fast is not an improvement on getting the correct answer "slowly". <code>json.loads</code> is fairly fast; unless profiling shows it to be a problem, let Python do the work.</span>
<span class="comment-copy">@user7074716: For the record, I did microbenchmarking. Fixing your code to also strip the quotes (<code>foo = [x.strip('"') for x in foo.split(', ')]</code>), it will beat <code>json.loads</code> for a three element string (by factor of ~2.5x), due to the constant overhead of the <code>json.loads</code> call itself and the setup <code>json.loads</code> has to do. But it scales worse; when you're talking about a 1000 element string (I used a precomputed test string of <code>json.dumps(list(map(str, range(1000))))</code>), <code>json.loads</code> wins by a factor of ~3x, because it's C implemented and the fixed overhead is dwarfed by reduced per item work.</span>
