<div class="post-text" itemprop="text">
<p>Hello I am pretty new to python. I have the following problem: 
I want to write a script that, given a (dna) sequence with ambiguities, writes all possible sequences, (if there are less than 100,  if there are more than 100 possible sequences, an appropriate error message is printed)
For DNA nucleotide ambiguities: <a href="http://www.bioinformatics.org/sms/iupac.html" rel="nofollow noreferrer">http://www.bioinformatics.org/sms/iupac.html</a></p>
<p>Example: for the sequence <code>“AYGH”</code> the script’s output would be <code>“ACGA”, “ACGC”, “ACGT”, “ATGA”, “ATGC”</code>, and <code>“ATGT”</code>. A, C, G and T are the default nucleotides. ALL others can have different values (see link). </p>
<p>So i wrote this: </p>
<pre><code>def possible_sequences (seq):
    poss_seq = ''
    for i in seq:
        if i=='A'or i=='C'or i=='G'or i=='T': 
            poss_seq += i 
        else: 
            if i== 'R':  
                poss_seq += 'A' # OR 'G', how should i implement this? 
            elif i == 'Y': 
                poss_seq += 'C' # OR T 
            elif i == 'S': 
                poss_seq += 'G' # OR C
            elif i == 'W': 
                poss_seq += 'A' # OR T 
            elif i == 'K': 
                poss_seq += 'G' # OR T
            elif i == 'M': 
                poss_seq += 'A' # OR C
            elif i == 'B': 
                poss_seq += 'C' # OR G OR T 
            elif i == 'D': 
                poss_seq += 'A' # OR G OR T 
            elif i == 'H': 
                poss_seq += 'A' # OR C OR T 
            elif i == 'V': 
                poss_seq += 'A' # OR C OR G 
            elif i == 'N': 
                poss_seq += 'A' # OR C OR G OR T 
            elif i == '-' or i == '.': 
                poss_seq += ' '
    return poss_seq
</code></pre>
<p>when I test my function: 
possible_sequences ('ATRY-C')
i got: </p>
<pre><code>'ATAC C'
</code></pre>
<p>but i should have get: </p>
<pre><code>'ATAC C'
'ATAT C' 
'ATGC C'
'ATGT C'
</code></pre>
<p>Can somebody please help me? I understand that I have to recap the and write a second poss_seq when there is an ambiguity present but I don't know how... </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> to generate the possibilities:</p>
<pre><code>from itertools import product

# List possible nucleotides for each possible item in sequence
MAP = {
    'A': 'A',
    'C': 'C',
    'G': 'G',
    'T': 'T',
    'R': 'AG',
    'Y': 'CT',
    'S': 'GC',
    'W': 'AT',
    'K': 'GT',
    'M': 'AC',
    'B': 'CGT',
    'D': 'AGT',
    'H': 'ACT',
    'V': 'ACG',
    'N': 'ACGT',
    '-': ' ',
    '.': ' '
}

def possible_sequences(seq):
    return (''.join(c) for c in product(*(MAP[c] for c in seq)))

print(list(possible_sequences('AYGH')))
print(list(possible_sequences('ATRY-C')))
</code></pre>
<p>Output:</p>
<pre><code>['ACGA', 'ACGC', 'ACGT', 'ATGA', 'ATGC', 'ATGT']
['ATAC C', 'ATAT C', 'ATGC C', 'ATGT C']
</code></pre>
<p>In above we first iterate over the items in the given sequence and get the list of possible nucleotides for each item: </p>
<pre><code>possibilities = [MAP[c] for c in 'ATRY-C']
print(possibilities)

# ['A', 'T', 'AG', 'CT', ' ', 'C']
</code></pre>
<p>Then the iterable is unpacked as arguments given to <code>product</code> which will return the cartesian product:</p>
<pre><code>products = list(product(*['A', 'T', 'AG', 'CT', ' ', 'C']))
print(products)

# [('A', 'T', 'A', 'C', ' ', 'C'), ('A', 'T', 'A', 'T', ' ', 'C'), 
#  ('A', 'T', 'G', 'C', ' ', 'C'), ('A', 'T', 'G', 'T', ' ', 'C')]
</code></pre>
<p>Finally each one of the products is turned to a string with <a href="https://docs.python.org/3.5/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>join</code></a>:</p>
<pre><code>print(list(''.join(p) for p in products))

# ['ATAC C', 'ATAT C', 'ATGC C', 'ATGT C']
</code></pre>
<p>Note that <code>possible_sequences</code> returns a generator instead of constructing all the possible sequences at once so you can easily stop the iteration whenever you want instead of having to wait every sequence to be generated.</p>
</div>
<span class="comment-copy">You are just looping once. You'll need to loop over the sequence, and then whenever you encounter a letter to change (i.e., not A, C, G, or T), loop over the possible replacements. You'll have to nest these loops to get all permutations.</span>
<span class="comment-copy">Just a tip; you can do <code>if i in 'RWMDHVN': poss_seq += 'A'</code> instead of writing of writing multiple if-elif statments</span>
<span class="comment-copy">Yes, that' what I wanted to say in the last sentence. I understand that but I don't know how to implement it?</span>
<span class="comment-copy">I haven't had a good play with itertools yet but it seems incredibly powerful. This seems like the best way to do this</span>
<span class="comment-copy">You beat me to it. :) Would you like me to edit my full version of <code>MAP</code> into your answer? FWIW, I'd probably just do <code>MAP[c]</code> rather than <code>MAP.get(c, ' ')</code> since we probably want to catch the key error if we get bad data.</span>
<span class="comment-copy">@PM2Ring Thanks for the offer but I can do it. The only reason for using <code>get</code> was that the second example had <code>-</code> in it but in results it was missing. If there's need to catch errors then index operator is way to go.</span>
<span class="comment-copy">@samb8s Note that niemmi's <code>possible_sequences</code> function is a generator, so if you don't need to store all the possible combinations in a list you can do <code>for s in possible_sequences('AYGH'):</code> to iterate over the combinations one by one. Obviously, if the input sequence is large with lots of letters that aren't in 'ACGT' you can get <i>lots</i> of combinations. :)</span>
<span class="comment-copy">Ok. FWIW, I put <code>'-': ' ', '.': ' ',</code> in my version of MAP.</span>
