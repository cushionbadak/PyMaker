<div class="post-text" itemprop="text">
<p>Through a Django queryset call, I'm generating a list of integer tuples:</p>
<pre><code>[(0,1),(0,2),(0,4),(5,8),.......]
</code></pre>
<p>I instead need to generate a list which sums the two elements inside the tuple together, i.e.</p>
<pre><code>[1,2,4,13,.....]
</code></pre>
<p>How can I accomplish that within the Django queryset query?</p>
<p>The query I've written so far is:</p>
<pre><code>photos_score_list = Photo.objects.filter(upload_time__gte=yesterday).annotate(unique_comments=Count('photocomment__submitted_by', distinct=True)).values_list('vote_score','unique_comments')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't know about Django, but when you have this:</p>
<pre><code>l = [(0,1),(0,2),(0,4),(5,8)]
</code></pre>
<p>you can compute the sum of each element in one line using list comprehension:</p>
<pre><code>l2 = [sum(x) for x in l]
</code></pre>
<p>result:</p>
<pre><code>[1, 2, 4, 13]
</code></pre>
<p>applied to your problem:</p>
<pre><code>photos_score_sum = [sum(x) for x in Photo.objects.filter(upload_time__gte=yesterday).annotate(unique_comments=Count('photocomment__submitted_by', distinct=True)).values_list('vote_score','unique_comments')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Once you have that list of tuples, you can use a list comprehension to generate your second list like below:</p>
<pre><code>&gt;&gt;&gt; tuples_list = [(0,1),(0,2),(0,4),(5,8)]
&gt;&gt;&gt; res_list = [i+j for i,j in tuples_list]
&gt;&gt;&gt; res_list
[1, 2, 4, 13]
</code></pre>
<p>In our list comprehension, we return for tuple <code>(i,j)</code> in <code>tuples_list</code> the sum <code>i+j</code> and the result is sorted in <code>res_list</code>.</p>
</div>
<span class="comment-copy">Interesting, hold on, I'll give it a shot.</span>
<span class="comment-copy">If this elegant solution is not working with Django queryset queries, maybe <code>functools.reduce</code> and <code>operator.add</code> can help? Cf. with a different problem (IN/or) here: <a href="http://stackoverflow.com/questions/20177749/django-filter-queryset-on-tuples-of-values-for-multiple-columns" title="django filter queryset on tuples of values for multiple columns">stackoverflow.com/questions/20177749/â€¦</a></span>
<span class="comment-copy">If it's like the querydict in Django then you may have to call <code>list()</code> on it first.</span>
<span class="comment-copy">Not sure if you need that, but you can also use <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map()</code></a> since <code>map</code> in Python 3 return an iterator. So <code>map(sum, l)</code>.</span>
<span class="comment-copy">you have to convert to list when you use <code>map</code> so listcomps have definitely the upper hand in python 3. I have stopped using <code>map</code> &amp; <code>filter</code></span>
