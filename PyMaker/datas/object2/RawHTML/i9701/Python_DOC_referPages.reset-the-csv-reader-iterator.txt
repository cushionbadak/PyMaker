<div class="post-text" itemprop="text">
<p>I was trying to do some csv processing using csv reader and was stuck on an issue where I have to iterate over lines read by the csv reader. But on  iterating second time, it returns nil since all the lines have already been iterated, is there any way to refresh the iterator to start from the scratch again.</p>
<p>Code:</p>
<pre><code>desc=open("example.csv","r")

Reader1=csv.read(desc)

for lines in Reader1:
(Some code)

for lines in Reader1:
(some code)
</code></pre>
<p>what is precisely want to do is read a csv file in the format below</p>
<p>id,price,name
x,y,z
a,b,c 
and rearrange it in the format below
id:x a
price: y  b
name: z   c
without using pandas library</p>
</div>
<div class="post-text" itemprop="text">
<p>Reset the underlying file object with <code>seek</code>, adding the following before the second loop:</p>
<pre><code>desc.seek(0)
# Apparently, csv.reader will not refresh if the file is seeked to 0,
# so recreate it
Reader1 = csv.reader(desc)  
</code></pre>
<p>Mind you, if memory is not a concern, it would typically be faster to read the input into a <code>list</code>, then iterate the <code>list</code> twice. Alternatively, you could <a href="https://docs.python.org/3/library/itertools.html#itertools.tee" rel="nofollow noreferrer">use <code>itertools.tee</code></a> to make two iterators from the initial iterator (it requires similar memory to slurping to <code>list</code> if you iterate one iterator completely before starting the other, but allows you to begin iterating immediately, instead of waiting for the whole file to be read before you can process any of it). Either approach avoids additional system calls that iterating the file twice would entail. The <code>tee</code> approach, after the line you create <code>Reader1</code> on:</p>
<pre><code># It's not safe to reuse the argument to tee, so we replace it with one of
# the results of tee
Reader1, Reader2 = itertools.tee(Reader1)

for line in Reader1:
    ...

for line in Reader2:
    ...
</code></pre>
</div>
<span class="comment-copy">If you need to iterate over it more than once, consume it into a list - <code>all_lines = list(Reader1)</code>.</span>
<span class="comment-copy">Wouldn't that take extra space? since Reader1 already has all the lines.</span>
<span class="comment-copy">@PoojaGupta You can do <code>desc.seek(0)</code> and then create a new iterator to avoid wasting an file descriptor and to not keep the CSV in memory.</span>
<span class="comment-copy">It <i>doesn't</i> have all the lines - that's why you can only consume it once,  it's a lazy iterator. But yes, having a list will take up space, that's the trade off.</span>
<span class="comment-copy">This does not seem to reset the iterator automatically, though.</span>
<span class="comment-copy">@musically_ut: Ah. Stupid implementation details. Simple to just recreate it though. Edited.</span>
