<div class="post-text" itemprop="text">
<p>It is a simple program for counting the number of element in a list where the element is bigger or equal to x and smaller of equal to y.</p>
<pre><code>def NumRange(a,x,y):
    count = 0
    for num in a:
        if(num&gt;=x and num&lt;=y):
            count+=1
    return count

NumRange([1,3,5,7,9,11],3,9)
# =&gt; 4
</code></pre>
<p>How can I rewrite this method to be recursive? I know that I may need to add one more parameter in this method but I have no idea how to do.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a great candidate for recursion, in Python 2 you can do it like this</p>
<pre><code>def NumRange(a, x, y):
    hd, tl = a[0], a[1:]
    if tl == []:
        return 1 if hd &gt;= x and hd &lt;= y else 0
    else:
        return (1 if hd &gt;= x and hd &lt;= y else 0) + NumRange(tl, x, y)
</code></pre>
<p>This is tail recursive as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>A possible solution:</p>
<pre><code>def NumRange(a, x, y):
    # Base case
    if not a:
        return 0

    if x &lt;= a[0] &lt;= y:
        return 1 + NumRange(a[1:], x, y)
    else:
        return NumRange(a[1:], x, y)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do it like this:</p>
<pre><code>def NumRangeRec(a,x,y):
    if not a:  # checks if the list is empty
        return 0
    incr = int(x &lt;= a[0] and a[0] &lt;= y)  # acts as the increment
    return NumRangeRec(a[1:], x, y) + incr  # pass the tail of the list to the recursive call
</code></pre>
<p>Here, the increment (<code>incr</code>) is set to <code>0</code> or <code>1</code> based on the result of the condition. You can use <code>int(some boolean)</code> to convert the boolean result to <code>0</code> or <code>1</code>. </p>
<p>(<em>Technically, since <code>TRUE</code> and <code>FALSE</code> are <code>1</code> and <code>0</code> in Python you don't necessarily need this. However, in Python 2 <code>True</code> and <code>False</code> can be reassigned so using <code>int(..)</code> puts you on the safe side.</em>)</p>
</div>
<div class="post-text" itemprop="text">
<p>You should consider optimizing for a <a href="https://en.wikipedia.org/wiki/Tail_call" rel="nofollow noreferrer">tail call</a> by using an accumulator. Down below you can see variation of @Keiwan's answer using some nice features like destructuring assigment.</p>
<pre><code>def NumRange(a,x,y):
  def rec (a, acc) : 
    if not a:  # base case - if the list if empty return the accumulated result
      return acc

    head, tail = a[0], a[1:]   # destructure list to the first item and all the rest

    incr = int(x &lt;= head and head &lt;= y)  # acts as the increment
    return rec(tail, acc + incr)  # recursively process rest of the list

  return rec(a, 0)  # pass the list and an empty accumulator to the implementation
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; def NumRangeRec(a,x,y):
...     if not a:
...         return 0
...     elif a[0] &gt;= x and a[0] &lt;= y:
...         return 1 + NumRangeRec(a[1:],x,y)
...     else:
...         return NumRangeRec(a[1:],x,y)
... 
&gt;&gt;&gt; NumRangeRec([1,3,5,7,9,11],3,9)
4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As mentioned above, since slicing a list creates a new copy. All of the above methods are memory hungry.</p>
<p>Here is a memory efficient and concise solution that uses an index argument without slicing the list</p>
<pre><code>def NumRange(a,x,y,ix=0):
    if ix == len(a):
        return 0

    return (a[ix]&gt;=x and a[ix]&lt;=y) + NumRange(a, x,y, ix+1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is another variant, in a single line. It relies on python's <a href="https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not" rel="nofollow noreferrer">conditional evaluation order</a></p>
<pre><code>def NumRange(a,x,y,ix=0):
    return (ix != len(a)) and ((x&lt;= a[ix] &lt;=y) + NumRange(a, x,y, ix+1))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def NumRange(a, x, y):
    if not a:
        return 0
    if a[0] &gt;= x and a[0] &lt;= y:
        return 1 + NumRange(a[1:], x, y)
    return NumRange(a[1:], x, y)
</code></pre>
<p>First you need to define an edge condition: return 0 if the list is empty. If the condition isn't satisfied, you continue testing other candidates by calling the function recursively. So you return something other than zero if it <em>is</em> satisfied. You pass the 'tail' of the list (the list without its first element) with <code>a[1:]</code>. </p>
</div>
<span class="comment-copy">Are you using Python 2 or Python 3?</span>
<span class="comment-copy">It's not a good example for a recursion.</span>
<span class="comment-copy">@EliSadoff Python 2</span>
<span class="comment-copy">That's actually <i>very</i> bad candidate for recursion.</span>
<span class="comment-copy">@MarounMaroun How is this a bad candidate for recursion? List wise operations are fine for recursion especially if it's done functionally.</span>
<span class="comment-copy">Slicing creates new lists, so your implementation is memory hungry as it creates a new list for each level of recursion. As it stands this implementation has a memory complexity of n^2 as opposed to n for the iterative case in the question.</span>
<span class="comment-copy">@Dunes That's true. If it were in python 3, you could use <code>hd, *tl = a</code> which is O(n), but unfortunately we're stuck with the constraints of python 2. I believe <code>deque</code> allows for it to be O(n log n)</span>
<span class="comment-copy">The star operator still needs to create a brand new tuple. You've just shifted the problem. The better case is just to add an index argument to the method and increment the index at each level rather than creating a new list/tuple/deque.</span>
