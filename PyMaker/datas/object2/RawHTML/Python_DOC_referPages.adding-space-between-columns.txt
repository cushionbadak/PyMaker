<div class="post-text" itemprop="text">
<p>I have multiple files with entries below. The columns are separated by a single space. The challenge is, this single space between columns doesn't exit in cases where the entry is a negative. How can I add a space between these negative entries so that the columns are easily read out?   </p>
<p>For example  </p>
<pre><code>    1.034E+04-2.045E+04 2.34E-5 2.344E+04  
    2.064E-03-2.764E+06 2.35E-5 4.892E-04   
    2.064E-03-2.764E+06 2.35E-5 4.892E-04  
    2.459E+08-3.523E+08 4.78E-6-2.344E-06  
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a simple approach (does not require RE) that works for this particular example. You would need to do it for every line in the file.</p>
<pre><code>&gt;&gt;&gt; '2.459E+08-3.523E+08 4.78E-6-2.344E-06'.replace('-', ' -').replace('E -', 'E-')
&gt;&gt;&gt; '2.459E+08 -3.523E+08 4.78E-6 -2.344E-06'
</code></pre>
<p>Explanation: we always insert a space before a minus sign but if the minus sign was preceded by an E, then we remove that space again.</p>
<p>This logic is simple to read and follow and is faster than one using a regular expression.</p>
</div>
<div class="post-text" itemprop="text">
<p>If it is known that the source is a fixed column width file - why not make use of that:</p>
<pre><code>L = 64     # length of one line
l = 16     # length of one number
with open(filename) as f:
    for line in f:
        print([float(line[i:i+l]) for i in range(0, L, l)])

# [100436070.5, -14.9785924, 20418483.379999999, 2.676474075e+17]
</code></pre>
<hr/>
<p>EDIT:<br/>
if you don't like it to input explicitely the lengths of the lines and the numbers, you can let them be calculated from the first line, e.g. by counting the decimal points:</p>
<pre><code>n = 0
with open(filename) as f:
    for line in f:
        if not n:
            n = sum(c=='.' for c in line)
            L = len(line)
            l = L//n
        print([float(line[i:i+l]) for i in range(0, L, l)])
</code></pre>
</div>
<span class="comment-copy">Is <code>4.78E-6</code> part is fixed length?</span>
<span class="comment-copy">Hi, all entries in the columns have a fixed number of decimal places. Here is the real file format entries   1.004360705E+08-1.497859240E+01 2.041848338E+07 2.676474075E+17</span>
<span class="comment-copy">you should use a regular expression. <a href="https://www.w3schools.com/python/python_regex.asp" rel="nofollow noreferrer">w3schools.com/python/python_regex.asp</a></span>
<span class="comment-copy">One solution could be Regex. <code>re.sub(r'(E[\+\-][0-9]*)', r'E\1 ', string)</code></span>
<span class="comment-copy">Many thanks. This sorted the problem</span>
<span class="comment-copy">@Ben, if you liked the answer, feel free to upvote but keep in mind that a better answer can come along in the next few days. The bar for accepted answers should be high in which case you should switch the accepted answer.</span>
<span class="comment-copy">ha! you are actually right. It's faster to do it with a double replace o.O  Time taken to do double replace: 0:00:00.000069;  Time taken to regex: 0:00:00.000579</span>
<span class="comment-copy">@Vnc :) Yes, re takes time to build but once compiled maybe it will stat to pay off over a larger file. This is still plenty fast I think. If you print, then the processing time is negligible. The main disadvantage of an re in this case is readability, I think, but a disadvantage of manually diddling with strings is inflexibility. Should the input format change, this may no longer be the way to go.</span>
