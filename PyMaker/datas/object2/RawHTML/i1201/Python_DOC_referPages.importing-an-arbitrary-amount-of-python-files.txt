<div class="post-text" itemprop="text">
<p>I have different python files containing Neural Networks. Each python file has associated weights.h5 file. </p>
<p>Now I'd like to make a python evaluation file, which loads all networks / python files and their weights, creates one instance of each and compares their performance. </p>
<p>So far I tried to import as package but then I'm unable to access the modules by an index. How could I import all of the models and put one instance of them in a list, such that I can access them by an index?</p>
<p>An example</p>
<pre><code>from evaluation.v03 import DQNSolver as DQN1
from evaluation.v04 import DQNSolver as DQN2
from evaluation.v05 import DQNSolver as DQN3
...
</code></pre>
<p>this works, but I have to hard code each import. Additionally I was not able to create instances by an index or access them by an index to make comparisons between all of the them.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>__import__()</code> function instead of <code>import</code> statement. Like this:</p>
<pre><code>modules = []
for i in range(10):
  modules.append( __import__('evaluation.v{:&gt;02}'.format(i)) )
</code></pre>
<p>Then you can access them like <code>modules[x].DQNSolver</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Making use of <a href="https://docs.python.org/3/library/importlib.html?highlight=import_module#importlib.import_module" rel="nofollow noreferrer"><code>import_module()</code></a>, which is recommended over using <code>__import__()</code> directly:</p>
<pre><code>from importlib import import_module

solvers = [getattr(import_module(f'evaluation.v{i:02d}'), 'DQNSolver') for i in range(5)]

solver = solvers[1]()
# solver -&gt; &lt;evaluation.v01.DQNSolver object at 0x7f0b7b5e5e10&gt;
</code></pre>
</div>
<span class="comment-copy">Why do you import the same module multiple times?</span>
<span class="comment-copy">sorry that was a typo</span>
<span class="comment-copy">Also, why would you have to access the module by an index?</span>
<span class="comment-copy">I see. You could probably use <code>import_module()</code> for that: <a href="https://docs.python.org/3/library/importlib.html#importlib.import_module" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
<span class="comment-copy">@Elar this looks good. I'll try it</span>
<span class="comment-copy">Based on the file naming convention given, you might want to use <code>'evaluation.v{:&gt;02}'.format(i)</code> to format the leading 0 (more here: <a href="https://docs.python.org/3.4/library/string.html#formatstrings" rel="nofollow noreferrer">docs.python.org/3.4/library/string.html#formatstrings</a>).</span>
<span class="comment-copy">Sure, thank you. Just wanted to provide solution</span>
<span class="comment-copy">Cant acces the module over modules[x]. This is the error: AttributeError: module 'evaluation' has no attribute 'load'. Somehow he stores this in module: ipdb&gt; modules[0] &lt;module 'evaluation' from '/Users/XXX/Documents/Project/Connect4/evaluation/__init__.py'&gt;</span>
<span class="comment-copy">Try <code>modules[0].DQNSolver.whatever()</code></span>
<span class="comment-copy">Didn't work saddly. This error appeared: ipdb&gt; solvers[0].load('v0.h5') *** AttributeError: module 'evaluation.v0' has no attribute 'load'. It definitely sees the v0.py file, because en error appears if this file is not in the evaluation folder. But the methods of this instance can't be accessed. Or isn't this an instance yet?</span>
<span class="comment-copy">You are right, didn't actually try out the code before, it was missing <code>getattr()</code>. Updated it now. Also, this code assumes all modules from <code>v00</code> up to <code>v04</code> to exist, you could adjust it a little to your specific needs</span>
