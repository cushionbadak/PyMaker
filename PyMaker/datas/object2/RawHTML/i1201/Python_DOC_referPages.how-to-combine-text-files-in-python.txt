<div class="post-text" itemprop="text">
<p>i have 2 text files.</p>
<p>file1:</p>
<pre><code>Good morning .
How are you today ?
</code></pre>
<p>and file2:</p>
<pre><code>1 0 .
1 0 2 0 .
</code></pre>
<p>How can we make one text file like below:</p>
<pre><code>Good/1 morning/0 ./.
How/1 are/0 you/2 today/0 ?/.
</code></pre>
<p>Any help?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can split a line into a list of words based upon spaces as a breaking character:</p>
<pre><code>&gt;&gt;&gt; line1 = 'Good morning .'
&gt;&gt;&gt; line1.split()
['Good', 'morning', '.']
</code></pre>
<p>You can <code>zip</code> lists together to get pairings of first, second, third elements of each list:</p>
<pre><code>&gt;&gt;&gt; line2 = '1 0 .'
&gt;&gt;&gt; zipped = list(zip(line1.split(), line2.split()))
&gt;&gt;&gt; zipped
[('Good', '1'), ('morning', '0'), ('.', '.')]
</code></pre>
<p>We can then format each pair into a new string:</p>
<pre><code>&gt;&gt;&gt; '{}/{}'.format(*('Good', '1'))
'Good/1'
</code></pre>
<p>We use <code>str.join</code> for each pair in the sequence.</p>
<p>Putting it all together:</p>
<pre><code>with open('output', 'w') as output:
     with open('file1') as file1:
         with open('file2') as file2:
             for line1, line2 in zip(file1, file2):
                 output_line = ' '.join('{}/{}'.format(*pair)
                                        for pair in zip(line1.split(), line2.split()))
                 output.write(output_line + '\n')
</code></pre>
<p>edit: also we could <code>join</code> each pair into a new string, which is terser:</p>
<pre><code>&gt;&gt;&gt; pair = ('Good', '1')
&gt;&gt;&gt; '/'.join(pair)
'Good/1'
</code></pre>
<p>So, you would instead get:</p>
<pre><code>output_line = ' '.join('/'.join(pair)
                       for pair in zip(line1.split(), line2.split()))
</code></pre>
<p>Note, I also added a missing <code>\n</code> character when writing to the <code>output</code> file.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could just read both files, format the content and then write out your content on a new file</p>
<pre><code># Read out the file contents
def read_file(file_path):
    lines = []
    with open(file_path, 'r') as file:
        lines = [line.strip().split() for line in file]
    return lines

# Merge the contents of two files
def merge_files(file1_path, file2_path, output_path='output.txt'):
    # Read and store the contents of both files
    file_1 = read_file(file1_path)
    file_2 = read_file(file2_path)

    # Create the output/merged file
    with open(output_path, 'w') as output_file:
        # Iterate over the first files content
        for row_idx in range(len(file_1)):

            file_1_row = file_1[row_idx]
            file_2_row = file_2[row_idx]

            # Merge the matching row of each file
            content_row = [
                "{}/{}".format(file_1_row[word_idx], file_2_row[word_idx])
                for word_idx in range(len(file_1_row))
            ]
            # Write the merged row into the new file
            output_file.write(" ".join(content_row))
            output_file.write("\n")

if __name__ == "__main__":
    merge_files('file1.txt', 'file2.txt')
    # If you need the output file in a different file
    # merge_files('file1.txt', 'file2.txt', output_path='output.txt')
</code></pre>
<p>This will generate your merged file into <code>output.txt</code> by default. This also assumes that your data is correct where the file rows match the expected count.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can read the file and store the values into <code>list</code>. Then you can do whatever you want by accesing the <code>list</code> element via <code>index</code>. </p>
<p>You can check this <a href="https://stackoverflow.com/questions/13613336/python-concatenate-text-files">Concatenate text files</a> and for reading the file <a href="https://stackoverflow.com/a/29740172/7965185">read a file line-by-line into a list</a></p>
</div>
<span class="comment-copy">by actually reading file and do what you want, where did you exactly stock?</span>
<span class="comment-copy"><code>zip</code> will allow you to iterate over two lists simultaneously <code>join</code> is a string method that you can use to put the elements you need together. Take a look at the Python docs on reading files. <a href="https://docs.python.org/3/tutorial/inputoutput.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/inputoutput.html</a></span>
<span class="comment-copy">Hello and welcome to SO. You're question as currently formulated is way too broad, please post what you're tried that didn't work.</span>
