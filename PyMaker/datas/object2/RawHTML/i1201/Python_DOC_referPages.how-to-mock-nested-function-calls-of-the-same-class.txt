<div class="post-text" itemprop="text">
<p>Is there a clean way to patch an object so that you get the <code>assert_call*</code> helpers in your test case, without actually removing the action?  </p>
<p>For example, how can I modify the <code>@patch</code> line to get the following test passing:</p>
<pre><code>from unittest import TestCase
from mock import patch


class Potato(object):
    def foo(self, n):
        return self.bar(n)

    def bar(self, n):
        return n + 2


class PotatoTest(TestCase):

    @patch.object(Potato, 'foo')
    def test_something(self, mock):
        spud = Potato()
        forty_two = spud.foo(n=40)
        mock.assert_called_once_with(n=40)
        self.assertEqual(forty_two, 42)
</code></pre>
<p>I could probably hack this together using <code>side_effect</code>, but I was hoping there would be a nicer way which works the same way on all of functions, classmethods, staticmethods, unbound methods, etc.  </p>
</div>
<div class="post-text" itemprop="text">
<p>Similar solution with yours, but using <code>wraps</code>:</p>
<pre><code>def test_something(self):
    spud = Potato()
    with patch.object(Potato, 'foo', wraps=spud.foo) as mock:
        forty_two = spud.foo(n=40)
        mock.assert_called_once_with(n=40)
    self.assertEqual(forty_two, 42)
</code></pre>
<p>According to <a href="https://docs.python.org/3/library/unittest.mock.html" rel="noreferrer">the documentation</a>:</p>
<blockquote>
<p><em>wraps</em>: Item for the mock object to wrap. If wraps is not None then
  calling the Mock will pass the call through to the wrapped object
  (returning the real result). Attribute access on the mock will return
  a Mock object that wraps the corresponding attribute of the wrapped
  object (so attempting to access an attribute that doesnâ€™t exist will
  raise an AttributeError).</p>
</blockquote>
<hr/>
<pre><code>class Potato(object):

    def spam(self, n):
        return self.foo(n=n)

    def foo(self, n):
        return self.bar(n)

    def bar(self, n):
        return n + 2


class PotatoTest(TestCase):

    def test_something(self):
        spud = Potato()
        with patch.object(Potato, 'foo', wraps=spud.foo) as mock:
            forty_two = spud.spam(n=40)
            mock.assert_called_once_with(n=40)
        self.assertEqual(forty_two, 42)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This answer address the additional requirement mentioned in the bounty from user Quuxplusone: </p>
<blockquote>
<p>The important thing for my use-case is that it work with <code>@patch.mock</code>, i.e. that it not require me to insert any code in between my constructing of the instance of <code>Potato</code> (<code>spud</code> in this example) and my calling of <code>spud.foo</code>. I need <code>spud</code> to be created with a mocked-out <code>foo</code> method from the get-go, because I do not control the place where <code>spud</code> is created.</p>
</blockquote>
<p>The use case described above could be achieved without too much trouble by using a decorator: </p>
<pre><code>import unittest
import unittest.mock  # Python 3

def spy_decorator(method_to_decorate):
    mock = unittest.mock.MagicMock()
    def wrapper(self, *args, **kwargs):
        mock(*args, **kwargs)
        return method_to_decorate(self, *args, **kwargs)
    wrapper.mock = mock
    return wrapper

def spam(n=42):
    spud = Potato()
    return spud.foo(n=n)

class Potato(object):

    def foo(self, n):
        return self.bar(n)

    def bar(self, n):
        return n + 2

class PotatoTest(unittest.TestCase):

    def test_something(self):
        foo = spy_decorator(Potato.foo)
        with unittest.mock.patch.object(Potato, 'foo', foo):
            forty_two = spam(n=40)
        foo.mock.assert_called_once_with(n=40)
        self.assertEqual(forty_two, 42)


if __name__ == '__main__':
    unittest.main()
</code></pre>
<p>If the method replaced accepts mutable arguments which are modified under test, you might wish to initialize a <a href="https://github.com/wimglenn/copyingmock" rel="nofollow noreferrer"><code>CopyingMock</code></a><sup>*</sup> in place of the <code>MagicMock</code> inside the spy_decorator.  </p>
<p>*<sub>It's a recipe taken from the <a href="https://docs.python.org/3/library/unittest.mock-examples.html#coping-with-mutable-arguments" rel="nofollow noreferrer">docs</a> which I've published on PyPI as <a href="https://github.com/wimglenn/copyingmock" rel="nofollow noreferrer">copyingmock</a> lib</sub></p>
</div>
<span class="comment-copy">Also, there is not much point to asserting that <code>foo</code> was called, since the test itself is calling it, rather than some other code that is being tested. Likewise, testing that <code>forty_two</code> is set to a particular value by your <i>test</i>, and not the tested code, seems of little value.</span>
<span class="comment-copy">It's an ssce.  Actual code is patching instances created in other modules, deeply nested etc</span>
<span class="comment-copy">I have the same question; the important thing for me is that the solution should <i>not</i> require me to insert any code in between my constructing of the instance of Potato (<code>spud</code> in this example) and my calling of <code>spud.foo</code>. I need <code>spud</code> to be created with a mocked-out <code>foo</code> method from the get-go, because I do not control the codepath that both creates <code>spud</code> and calls its <code>foo</code> method.</span>
<span class="comment-copy">Coming back to this a few years later, I've found <a href="https://github.com/pytest-dev/pytest-mock/#spy" rel="nofollow noreferrer"><code>spy</code></a> to be useful in my pytest suite.</span>
<span class="comment-copy">thanks, this is slightly nicer than mine.. do you know any way to do it in the decorator usage of patch instead of in the context manager usage?</span>
<span class="comment-copy">@wim, Do you mean this? <a href="http://pastebin.com/pNyWRBNq" rel="nofollow noreferrer">pastebin.com/pNyWRBNq</a></span>
<span class="comment-copy">no, because by creating a new Potato instance in the decorator you lose the state on the object which is actually being tested, you need the bound method ..</span>
<span class="comment-copy">I wonder if the patch should be <code>patch.object(spud, 'foo', wraps=spud.foo)</code> instead so the code would be patching the specific instance. While it doesn't make a practical difference in this case, the current code patches at the class level (all instances), but wraps a function bound to a particular instance. I think that could burn someone down the road.</span>
<span class="comment-copy">@falsetru, I do see that, but do think the class/instance difference when used by another SO reader could burn someone using this example. For example, if test code had spud and spud2 under test with different instance values. Calling spud2.foo would actually return the results of spud.foo. That is why I think the patched object should be spud rather than its class.</span>
