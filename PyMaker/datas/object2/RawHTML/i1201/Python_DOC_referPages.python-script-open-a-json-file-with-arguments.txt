<div class="post-text" itemprop="text">
<p>I am new on python. I am using a python script where I load a json file to set certain values to the script, but my idea is to import that file more dynamically using arguments (I think is the correct use), so I donÂ´t need to always include the name of the json file in the python script, here is may code example: </p>
<pre><code>import json
from pprint import pprint

with open("VariableSettings.json") as json_data:
    data = json.load(json_data)
</code></pre>
<p>so my idea is to change the code: "with open("VariableSettings.json") as json_data" with args to open the json file dynamically.</p>
<p>I think that on command prompt I can use the command py test.py arg1 (this represent the file path). </p>
<p>So I know that probably my explanation is a bit confusing but if some can help I appreciate it.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>sys</code> to do that. In the example below I created a file <code>test.json</code> with the content</p>
<pre><code>{"foo": "bar"}
</code></pre>
<p>And modified your code as</p>
<pre><code>import json
import sys

with open(sys.argv[1]) as json_data:
    data = json.load(json_data)
    print(data)
</code></pre>
<p>You need to call execute as</p>
<pre><code>python test.py test.json
</code></pre>
<p>and the output will be</p>
<pre><code>{'foo': 'bar'}
</code></pre>
<p>More details can be found in <a href="https://stackoverflow.com/questions/1009860/how-to-read-process-command-line-arguments">this</a> other post</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <code>sys</code> module</p>
<p><strong>Ex:</strong></p>
<pre><code>import sys
import json
from pprint import pprint

if len(sys.argv) &lt; 2:
    print("Input File Missing")
    sys.exit()

with open(sys.argv[1]) as json_data:
    data = json.load(json_data)
print(data)
</code></pre>
<p><strong>To Run Use</strong></p>
<pre><code>python yourScriptName.py full_path_to.json
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also use <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code></a>:</p>
<pre><code>import json
import argparse

parser = argparse.ArgumentParser()
parser.add_argument("-f", "--filename", required=True, type=str)
args = parser.parse_args()

with open(args.filename) as json_data:
    data = json.load(json_data)
    print(data)
</code></pre>
<p>Which can be called with the alias:</p>
<pre><code>python test.py -f test.json
</code></pre>
<p>Or full argument name:</p>
<pre><code>python test.py --filename test.json
</code></pre>
<p>And if you don't supply a file, you get:</p>
<pre><code>usage: test.py [-h] -f FILENAME
test.py: error: the following arguments are required: -f/--filename
</code></pre>
<p>since I passed <code>required=True</code>. You can remove this if you want the argument to be optional. </p>
<p>Addtionally, you could also extend your program to check that if the JSON file has correct format by catching <a href="https://docs.python.org/3/library/json.html#json.JSONDecodeError" rel="nofollow noreferrer"><code>json.JSONDecodeError</code></a> with <code>try</code>/<code>except</code>:</p>
<pre><code>with open(args.filename) as json_data:
    try:        
        data = json.load(json_data)
        print(data)
    except json.JSONDecodeError:
        print('Invalid JSON format')
</code></pre>
</div>
<span class="comment-copy">that its! work like a charm! thank you.</span>
