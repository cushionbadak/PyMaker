<div class="post-text" itemprop="text">
<p>I have a text file :</p>
<pre><code>S1645BS5010     11   2558180123.98N0185135.88W  91175.71997031.83098.5346232936
R0001  91823.71996951.410.80002  91824.81996938.811.00003  91825.91996926.311.01
R0004  91827.01996913.811.10005  91828.11996901.311.10006  91829.21996888.711.11
R0007  91830.31996876.211.20008  91831.41996863.711.20009  91832.51996851.211.31
S1645BS5010     13   2563180126.23N0185138.97W  91086.31997103.13098.5346233020
R0001  91822.91997032.810.90002  91824.01997020.311.10003  91825.21997007.711.21
R0004  91826.31996995.211.20005  91827.41996982.711.30006  91828.51996970.211.31
R0007  91829.51996957.611.40008  91830.61996945.111.40009  91831.71996932.611.51
</code></pre>
<p>I want to extract characters at [21:25] from the line starting with "S" and make a key value pair with characters at indices [23:26] , [49:54] and [75:80] from each following line which starts with "R" until the next line which starts with "S" is encountered and then repeat the process , and hence make a dictionary with these key value pairs for plotting purposes.</p>
<p>So far I have started and made a list after extracting the "S" values in a list:</p>
<pre><code>file='Z:\Sei\text.pp'

shot_no=[]

with open(file , 'r') as f:
    for line in f:
        if len(line) &gt; 0 and line.startswith('S'):
            shot_no.append(line[21:25])
</code></pre>
<p>But having confusion in how to use it to build a dictionary.</p>
<p>Can someone please help in how to proceed. </p>
</div>
<div class="post-text" itemprop="text">
<p>using <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer">collections.defaultdict</a></p>
<pre><code>from collections import defaultdict

file_name='text.pp'
shot_no = defaultdict(list)

with open(file_name , 'r') as f:
    for line in f:
        if line.strip():
            if line.startswith('S'):
               key = line[21:25]
            elif line.startswith('R'):
               shot_no[key].extend([line[23:26], line[49:54], line[75:80]])

print(shot_no)
</code></pre>
<p>output</p>
<pre><code>defaultdict(&lt;class 'list'&gt;, {'2563': ['10.', '11.10', '11.21', '11.', '11.30', '11.31', '11.', '11.40', '11.51'], '2558': ['10.', '11.00', '11.01', '11.', '11.10', '11.11', '11.', '11.20', '11.31']})
</code></pre>
<p>I think you need to fix the indexes, they are not what you show as output. Also I don't know if you want to convert to float or Decimal.</p>
<p>If you want to preserve the order of insertion - you may need to use OrderedDict and then adjust the part where the values are added.</p>
<p>using <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">collections.OrderedDict</a></p>
<pre><code>from collections import OrderedDict

file_name='text.pp'
shot_no = OrderedDict()

with open(file_name , 'r') as f:
    for line in f:
        if line.strip():
            if line.startswith('S'):
               key = line[21:25]
            elif line.startswith('R'):
               shot_no.setdefault(key, []).extend([line[23:26], line[49:54], line[75:80]])

print(shot_no)
</code></pre>
<p>output</p>
<pre><code>OrderedDict([('2558', ['10.', '11.00', '11.01', '11.', '11.10', '11.11', '11.', '11.20', '11.31']), ('2563', ['10.', '11.10', '11.21', '11.', '11.30', '11.31', '11.', '11.40', '11.51'])])
</code></pre>
<p>EDIT: In python3.7+ regular dict will also do, because as per the docs "the insertion-order preservation nature of dict objects has been declared to be an official part of the Python language spec". In 3.6 this feature was considered implementation detail and should not be relied upon. So before 3.7 one must use OrderedDict.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>file='Z:\Sei\text.pp'

shot_dict = {} #creating empty dictionary

with open(file , 'r') as f:
    for line in f:
        if len(line) &gt; 0 and line.startswith('S'):
            shot_dict[line[:11]] = line[21:25] #writing into the dictionary
print (shot_dict) #see the dictionary
</code></pre>
<p>Be aware that a dictionary must have unique keys.<br/>
So you have to think about what you are inputting as keys.<br/>
If you are taking <code>line[:11]</code> and there are duplicates, some data loss will happen as the last key, value pair will overwrite the existing key already in the dictionary.</p>
</div>
<div class="post-text" itemprop="text">
<p>Step through it piece by piece.  You are on the right track.
If you are reading the file line-by-line then you have 3 cases described:</p>
<pre><code>    lines with "S" set the key
    lines with "R" have the values
    others...who knows.
</code></pre>
<p>So, consider:</p>
<pre><code>shot_dict = {}
with open(file, 'r') as f:
  for line in f:
    if line.startswith('S'):
      key = line[21:25]
      shot_dict[key] = []   # or look into defaultdict
    elif line.startswith('R'):  # this will pick up subsequent lines
      # add to dictionary using current key...
      shot_dict[key].append(line[...], line[...], ...)  #psuedocode
</code></pre>
</div>
<span class="comment-copy">can you show how your output would look like</span>
<span class="comment-copy">I'm having trouble visualizing what one of these key value pairs will look like.  Could you do the first one from your example manually?</span>
<span class="comment-copy">Instead of char locations, could you just split the lines up into tokens, and then use those for your purpose.</span>
<span class="comment-copy">Hi patrick, the  key value pair would look like , { '2558' : [10.8 , 11.0 , 11.01 , 11.1, 11.1, 11.1, 1.2, 11.2, 11.3 ] , '2563' : [10.9, 11.1, 11.2, 11.2, 11.3, 11.3, 11.4, 11.4, 11.5]}</span>
<span class="comment-copy">@abhishake edit the question. See <a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a> and how to create a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>.</span>
<span class="comment-copy">Thank for the help , ordered dictionary was the way to go</span>
<span class="comment-copy">@abhishake, If you are using python3.7 regular dict will also do, because as per the docs "the insertion-order preservation nature of dict objects has been declared to be an official part of the Python language spec". In 3.6 this feature was considered implementation detail and should not be relied upon. So before 3.7 you must use OrderedDict.</span>
<span class="comment-copy">I want an output like : { '2558' : [10.8 , 11.0 , 11.01 , 11.1, 11.1, 11.1, 1.2, 11.2, 11.3 ] , '2563' : [10.9, 11.1, 11.2, 11.2, 11.3, 11.3, 11.4, 11.4, 11.5]}</span>
<span class="comment-copy">With the current code the output is : {'S1645BS5010': '2558'}</span>
<span class="comment-copy">@abhishake You should be able to modify the slicing to get what you require.</span>
