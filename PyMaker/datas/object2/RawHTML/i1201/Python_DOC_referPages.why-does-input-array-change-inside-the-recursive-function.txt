<div class="post-text" itemprop="text">
<p>I am trying to understand quick search algorithm in pyhton. Here is the code I am working on:</p>
<pre><code>def partition2(a, l, r):
x = a[l]
j = l;
for i in range(l + 1, r + 1):
    if a[i] &lt;= x:
        j += 1
        a[i], a[j] = a[j], a[i]
a[l], a[j] = a[j], a[l]
return j



def randomized_quick_sort(a, l, r):

if l &gt;= r:
    return
k = random.randint(l, r)
a[l], a[k] = a[k], a[l]
#use partition3
m = partition2(a, l, r)


randomized_quick_sort(a, l, m - 1);
randomized_quick_sort(a, m + 1, r);
</code></pre>
<p>Then I am calling this function defining a variable. For example:</p>
<pre><code>b = [5,1,4]
randomized_quick_sort(b, 0, 2)
</code></pre>
<p>MY question is that when I try to print b after the function call, it prints as [1,4,5]. So, how come the value of this array is changing within the function??? It is not a global variable. Whey the local variables inside the function overrides it?? Please help</p>
</div>
<div class="post-text" itemprop="text">
<p>When you provide a list as a function argument you are passing a pointer to that list, meaning the parameter <code>a</code> isn't its own array, but a pointer to <code>b</code>.  </p>
<p>What you are looking to do is provide only the items of the array <code>b</code> to <code>randomized_quick_sort()</code></p>
<p>This can be done by making the following adjustment:</p>
<p><code>randomized_quick_sort (b[:], 0, 2);</code></p>
<p>Notice <code>b[:]</code> instead of <code>b</code>. Now, when you print <code>b</code> after calling the function you will have the same values as you did before.</p>
<p>You can find more information about this <a href="https://docs.python.org/3/faq/programming.html#how-do-i-copy-an-object-in-python" rel="nofollow noreferrer">here</a></p>
</div>
<span class="comment-copy">Lists aren't copied when they're passed into a function. It's one list between all recurses. If you change it, you "change it everywhere".</span>
<span class="comment-copy">Thanks for the reply! Quick question: so based on your answer, if it was a integer instead of a list, its value would not change??</span>
<span class="comment-copy">Integers are immutable.</span>
<span class="comment-copy">@prony It would not. It's for a different reason though. You can't alter a number because they're immutable. Numbers can never change. 1 will always be 1.You're seeing this behavior here because lists themselves are mutable; they can be changed.</span>
<span class="comment-copy">Thanks a lot! Have been trying to figure this out for a while!</span>
