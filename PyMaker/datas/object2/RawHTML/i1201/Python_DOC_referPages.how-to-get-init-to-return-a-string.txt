<div class="post-text" itemprop="text">
<p>Here I am trying to return a string but constructor can only return a <code>None</code> value. Is there any way around it?</p>
<pre><code>class company:
    def __init__(self):
        self.first_name = str(input("Enter your first name: "))
        self.last_name = str(input("Enter your last name: "))
        self.fullname = self.first_name + " " +self.last_name
        return self.fullname

class salary:
    pay = int(input("Please enter the pay: "))
    def incre(self):
        self.increment = self.pay + 1000
        return self.increment

class Multiderived(company, salary): # here I am using multiple inheritance
    def output(self):
        company.__init__(self)
        salary.incre(self)
        print ("Your full name is: ", self.fullname)
        print ("Your salary is: ", self.increment)

u = Multiderived()
u.output()
</code></pre>
<p>In this code I have to use multiple inheritance to access the values of the two super classes, into a single derived class but the constructor of the first super class can't return a string. Is there any way around it.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't. You are breaking python rules by trying to: See documentation of <a href="https://docs.python.org/3/reference/datamodel.html#object.__init__" rel="nofollow noreferrer"><code>object.__init__()</code></a>:</p>
<blockquote>
<p>Because <a href="https://docs.python.org/3/reference/datamodel.html#object.__new__" rel="nofollow noreferrer"><code>__new__()</code></a> and <a href="https://docs.python.org/3/reference/datamodel.html#object.__init__" rel="nofollow noreferrer"><code>__init__()</code></a> work together in constructing objects (<code>__new__()</code> to create it, and <code>__init__()</code> to customize it), <strong>no non-None value may be returned by <code>__init__()</code></strong>; doing so will cause a <code>TypeError</code> to be raised at runtime.</p>
</blockquote>
<p>(emphasis <strong>mine</strong>)</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this is what you are expecting  I am using special method of <code>__str()__</code></p>
<pre><code>class Company():
    def __init__(self):
        self.first_name = input("Enter your first name: ")
        self.last_name = input("Enter your last name: ")
        self.fullname = self.first_name + " " +self.last_name
        return self.fullname
class Salary():
    pay = int(input("Please enter the pay: "))
    def incre(self):
        self.increment = self.pay + 1000
        return self.increment
class Multiderived(Company, Salary):
    def __init__(self):
        Company.__init__(self)
        Salary.incre(self)
    def __str__(self):
        return ("Your full name is:"+self.fullname+"\n"+"Your salary is : "+ str(self.increment))
u = Multiderived()
print(u)
</code></pre>
</div>
<span class="comment-copy"><code>__init__()</code> can't return a value. You can have a function to return <code>fullname</code> like <code>def get_fullname(self): return self.fullname</code>.</span>
<span class="comment-copy"><i>Why</i> do you want to return a string from <code>__init__</code>? Sounds like an <a href="https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">XY problem</a></span>
<span class="comment-copy">What do you expect to happen when <code>__init__</code> returns a string? Should <code>u</code> contain a <code>Multiderived</code> object or a string? What do you expect <code>u.output</code> to do if <code>__init__</code> were to return a string?</span>
