<div class="post-text" itemprop="text">
<p>In Lua script, when i have to wirte too many lines like:</p>
<pre><code>obj.age=17
obj.name="jack"
obj.country="US"
...
obj.weight=100
</code></pre>
<p>I can use <code>_ENV</code> to simpify the code:</p>
<pre><code>_ENV=obj
age=17
name="jack"
country="US"
...
weight=100
</code></pre>
<p>Namely, I can avoid typing <code>obj.</code> repeatedly, is there a way in python to do like this? I searched on net buf found nothing.</p>
<p>I need to use python script as a configuration file, and the latter format seems better.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why not</p>
<pre><code>obj = {
    'age': 17,
    'name': 'jack',
    'country': 'US',
    ...,
    'weight': 100
}
</code></pre>
<p>? Newlines need no <code>\</code> here, since they are inside a pair of braces.</p>
<p>Of course, this builds a dictionary, but do you really need an object of a specific class in a configuration?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can easily do it using <a href="https://docs.python.org/3/library/types.html#types.SimpleNamespace" rel="nofollow noreferrer">SimpleNamespace</a> (Python3 only)</p>
<pre><code>import types
obj = types.SimpleNamespace(
    age=17
    name="jack"
    country="US"
    ...
    weight=100
)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You really asked two questions in one.</p>
<p>For the second about storing configuration, you can</p>
<ul>
<li><p>write your vars in say, a 'config.py' module. Then <code>import config as cfg</code> and manipulate using <code>cfg.</code> qualified names. You can also <code>from config import *</code> for direct use but that's not recommended and you loose write capability in the original config module. They are copied into current namespace, not linked.</p></li>
<li><p>simply use a dictionary to hold your settings like Walter said. They are the obvious builtin type for that.</p></li>
<li>make your own Configuration class, instantiate <code>cfg</code>and manipulate attributes through <code>cfg.</code> qualifier.</li>
<li>use a <em>shelf</em>, a <em>persistant dict</em> with the <a href="https://docs.python.org/3/library/shelve.html" rel="nofollow noreferrer">shelve</a> module.</li>
<li>Because shelves use <em>pickle</em> and this is a binary format used mostly in Python (I think)to store objects, you may prefer to use some more human oriented open format like suggested by DeepSpace and Cartucho (see configparser for <code>.ini</code>and so on).</li>
<li>Much like with the class case, use a namedtuple or a SimpleNamespace (didn't know this one) like Wouda and luminousmen said.</li>
</ul>
<p>Probably there are even more choices but I think the list looks enough for most tastes.</p>
<p>Now for the first question, that I think is a very good one, I am almost sure that the answer is no, you can't do that in Python. From <a href="https://stackoverflow.com/questions/1984104/how-to-avoid-explicit-self-in-python">here</a> I found <a href="http://effbot.org/pyfaq/why-must-self-be-used-explicitly-in-method-definitions-and-calls.htm" rel="nofollow noreferrer">this</a> which is the reasoning for <code>self</code> use obligation. Safety, explicitness, and performance it looks. I suppose if it were to be allowed, you could use it too for <code>self</code>, and maybe that's why you can't.</p>
<p>I sometimes miss that feature too.</p>
</div>
<span class="comment-copy">The classic <a href="http://xyproblem.info" rel="nofollow noreferrer">XY problem</a>... "I need to use python script as a configuration file" Does not seem like the best approach. Check <code>ini</code>, <code>json</code> or <code>yaml</code> file formats</span>
<span class="comment-copy">Also, take a look to Python configparser <a href="https://docs.python.org/3/library/configparser.html" rel="nofollow noreferrer">docs.python.org/3/library/configparser.html</a>, it allows to define and manipulate config files very easily.</span>
<span class="comment-copy">If OP does need object access, (s)he could look into <a href="https://docs.python.org/3/library/types.html#types.SimpleNamespace" rel="nofollow noreferrer"><code>SimpleNamespace</code></a>, or <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>namedtuple</code></a>.</span>
