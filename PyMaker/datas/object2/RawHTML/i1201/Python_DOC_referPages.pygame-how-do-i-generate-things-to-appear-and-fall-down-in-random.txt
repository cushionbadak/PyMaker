<div class="post-text" itemprop="text">
<p>I'm trying to build a game something like, balls are coming down randomly and the boy in the bottom catch the ball. I made a row of balls on top in a random manner, but I'm not sure how to make them appear randomly and fall down individually. </p>
<p>baseball_game.py</p>
<pre><code>import sys
import pygame
from pygame.sprite import Group
from settings import Settings
from boy import Boy
from ball import Ball
import game_functions as gf


def run_game():
    # Initialize pygame, settings, and screen object.
    pygame.init()
    bg_settings = Settings()
    screen = pygame.display.set_mode(
            (bg_settings.screen_width, bg_settings.screen_height))
    pygame.display.set_caption("Catch the Baseball!")

    # Make a boy
    boy = Boy(bg_settings, screen)
    balls = Group()


    # Create the fleet of aliens.
    gf.create_fleet(bg_settings, screen, boy, balls)


    # Make a ball
    ball = Ball(bg_settings, screen)

    # Set the background color.
    bg_color = (217, 208, 187)

    # Start the main loop for the game.
    while True:
        gf.check_events(boy)
        boy.update()
        gf.update_balls(balls)
        gf.update_screen(bg_settings, screen, boy, balls)


run_game()
</code></pre>
<p>ball.py</p>
<pre><code>import pygame
from pygame.sprite import Sprite
import random


class Ball(Sprite):
    """A class to represent a single ball."""

    def __init__(self, bg_settings, screen):
        """Initalize the ball and set its starting position."""
        super(Ball, self).__init__()
        self.screen = screen
        self.bg_settings = bg_settings

        # Load the ball image and set its rect attribute.
        self.image = pygame.image.load('images/ball.png')
        self.rect = self.image.get_rect()

        # Start each new ball.
        self.rect.x = random.randint(-10, 40)
        self.rect.y = random.randint(-10, 40)

        # Store the ball's exact position.
        self.y = float(self.rect.y)

    def update(self):
        """Move the ball down."""
        self.y += self.bg_settings.ball_speed_factor
        self.rect.y = self.y

    def blitme(self):
        """Draw the ball at its current location."""
        self.screen.blit(self.image, self.rect)
</code></pre>
<p>game_functions.py</p>
<pre><code>import sys
import pygame
from ball import Ball
from random import randint
random_number = randint(-15, 39)


def check_events(boy):
    """Respond to keypresses and mouse events."""
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
             sys.exit()
        elif event.type == pygame.KEYDOWN:
            check_keydown_events(event, boy)
        elif event.type == pygame.KEYUP:
            check_keyup_events(event, boy)


def check_keydown_events(event, boy):
    """Respond to keypresses."""
    if event.key == pygame.K_RIGHT:
        boy.moving_right = True
    elif event.key == pygame.K_LEFT:
        boy.moving_left = True
    elif event.key == pygame.K_q:
        sys.exit()

def check_keyup_events(event, boy):
    """Respond to key releases."""
    if event.key == pygame.K_RIGHT:
        boy.moving_right = False
    elif event.key == pygame.K_LEFT:
        boy.moving_left = False

def update_screen(bg_settings, screen, boy, balls):
    """Update images on the screen and flip to the new screen."""
    # Redraw the screen during each pass through the loop.
    screen.fill(bg_settings.bg_color)
    boy.blitme()
    balls.draw(screen)

    # Make the most recently drawn screen visible.
    pygame.display.flip()

def get_number_balls_x(bg_settings, ball_width):
    """Determine the number of aliens that fit in a row."""
    available_space_x = bg_settings.screen_width - 2 * ball_width
    number_balls_x = int(available_space_x / (2 * ball_width))
    return number_balls_x

def create_ball(bg_settings, screen, balls, ball_number):
    """Create a ball and place it in the row."""
    ball = Ball(bg_settings, screen)
    ball_width = ball.rect.width
    ball.x = ball_width + 2 * ball_width * ball_number
    ball.rect.x = ball.x
    balls.add(ball)

def create_fleet(bg_settings, screen, boy, balls):
    ball = Ball(bg_settings, screen)
    number_balls_x = get_number_balls_x(bg_settings, ball.rect.width)

    for ball_number in range(number_balls_x):
         create_ball(bg_settings, screen, balls, ball_number)

def update_balls(balls):
    """Update the positions of all balls in the fleet."""
     balls.update()
</code></pre>
<p>So the first row of balls are randomly placed on top, but how do I make it to appear not all at once, and falling down separately? </p>
</div>
<div class="post-text" itemprop="text">
<p>Since you mention that you want the balls to fall down individually, we can think of each ball having two states: "falling" and "not falling". We can adjust the <code>update</code> and <code>__init__</code> functions for <code>ball.py</code> accordingly:</p>
<pre><code>class Ball(Sprite):
    def __init__(self, bg_settings, screen)
        # ... all your other properties
        self.is_falling = False # the ball is not falling when first created

    # ...

    def update(self):
        if self.is_falling:
            self.y += self.bg_settings.ball_speed_factor
            self.rect.y = self.y
</code></pre>
<p>Now we just need some way of triggering the falling property in each ball randomly. In game_functions.py, you have a method that updates the balls. We could add some function there to randomly decide whether we want a ball to drop, and which ball we want to drop:</p>
<pre><code>from random import random
# ...

def update_balls(self):
    if random() &lt; 0.4: # 40% percent chance of making a ball drop
        ball_index = randint(0, len(balls)-1)
        balls[ball_index].is_falling = True

    balls.update()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Make a variable called <code>RNG</code> and set it to generate random numbers between any range let's say between <code>-50</code> and <code>50</code>. Then you can make an array called <code>RNG_CASES[]</code> and give them any random constant value in the range that you set for the <code>RNG</code>. Finally, make a conditional structure: </p>
<pre><code>if(RNG in RNG_CASES[]): 
    fall();
else: 
    pass; #(pass not needed, only for pseudocode).
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could just add new <code>Ball</code> instances to the group if some condition is <code>True</code> (<code>if random.randrange(100) &lt; 2:</code> in the example below). If there should be a maximum number of balls, add <code>and len(balls) &lt; max_balls:</code>. </p>
<p>Also, don't forget to <a href="https://www.pygame.org/docs/ref/sprite.html#pygame.sprite.Sprite.kill" rel="nofollow noreferrer"><code>kill</code></a> the sprites when they leave the screen.</p>
<pre><code>import random
import pygame
from pygame.sprite import Sprite


class Ball(Sprite):
    """A class to represent a single ball."""

    def __init__(self, bg_settings, screen):
        """Initalize the ball and set its starting position."""
        super(Ball, self).__init__()
        self.screen = screen
        self.bg_settings = bg_settings
        self.image = pygame.Surface((30, 30))
        self.image.fill((100, 200, 0))
        self.rect = self.image.get_rect()
        # Start each new ball.
        self.rect.x = random.randint(-10, self.bg_settings.screen_width)
        self.rect.y = random.randint(-100, -40)
        # Store the ball's exact position.
        self.y = float(self.rect.y)

    def update(self):
        """Move the ball down."""
        self.y += 1
        self.rect.y = self.y

        if self.rect.top &gt; self.bg_settings.screen_height:
            self.kill()


class Settings:
    screen_width = 640
    screen_height = 480
    bg_color = pygame.Color('gray12')


def run_game():
    pygame.init()
    clock = pygame.time.Clock()
    bg_settings = Settings()
    screen = pygame.display.set_mode(
        (bg_settings.screen_width, bg_settings.screen_height))
    balls = pygame.sprite.Group()

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                return

        balls.update()
        if random.randrange(100) &lt; 2:
            balls.add(Ball(bg_settings, screen))

        screen.fill(bg_settings.bg_color)
        balls.draw(screen)

        pygame.display.flip()
        clock.tick(60)


run_game()
</code></pre>
</div>
<span class="comment-copy">It looks like the only thing you do with <code>random</code> is this <code>random_number = randint(-15, 39)</code> and then you never use <code>random_number</code>  anywhere.</span>
<span class="comment-copy">Sorry, I just edited and updated! So, I placed the balls randomly but the issue was to make them appear in random individually...</span>
<span class="comment-copy">Please read the <a href="https://stackoverflow.com/help/mcve">Minimal, Complete and Verifiable example page</a>. The program is not runnable.</span>
<span class="comment-copy">You can use <a href="https://docs.python.org/3/library/random.html#random.choice" rel="nofollow noreferrer"><code>random.choice</code></a> here.</span>
<span class="comment-copy">Thank you so much for kind answer, however, I still get an error as below! :   Traceback (most recent call last):   File "baseball_game.py", line 41, in &lt;module&gt;     run_game()   File "baseball_game.py", line 37, in run_game     gf.update_balls(balls)   File "C:\Users\Muffin\Desktop\python_work\project_1\baseball\game_functions.py", line 66, in update_balls     if random() &lt; 0.4: # 40% percent chance of making a ball drop TypeError: 'module' object is not callable</span>
<span class="comment-copy">In that case, you can just <code>import random</code>, then run <code>random.random()</code> to get a number.</span>
