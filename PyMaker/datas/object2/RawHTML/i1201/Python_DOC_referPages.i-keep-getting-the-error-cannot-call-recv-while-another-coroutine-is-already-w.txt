<div class="post-text" itemprop="text">
<p>When I run my paddleLogic function twice I get the error "cannot call recv() while another coroutine is already waiting for the next message" Even though I am using await to ensure that they are not trying to receive at the same time.</p>
<p>I have run the code without calling the paddleLogic function the second time, and everything works as expected</p>
<pre class="lang-python prettyprint-override"><code>    leftPaddlePos = await paddleLogic(websocket,leftPaddlePos)
    rightPaddlePos = await paddleLogic(opponent[websocket],rightPaddlePos)

async def paddleLogic(socket,pos):
        try:
            key = await asyncio.wait_for(socket.recv(),timeout=0.01)
            if key == "1" and pos &gt; 0:
                pos = pos - 1
            elif key == "2" and pos &lt; 60:
                pos = pos + 1
            time.sleep(0.003)
        except asyncio.TimeoutError:
            pos = pos
        return pos
</code></pre>
<p>Sorry if this post is kind of a mess, this is my first time asking a question on stackoverflow. If you want more information/code I'm happy to provide it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Where do you get your sockets?</p>
<p>What we have is coroutines. They are scheduled by them yielding control to one another. They yield control when they call <code>await</code>. It appears that your <code>socket.recv</code>
 also does some waiting behind the scenes by yielding control, so <code>recv</code> is entered twice if data from network are not immediately available.</p>
<p>I suppose that you'd be better off <a href="https://docs.python.org/3/library/asyncio-eventloop.html#working-with-socket-objects-directly" rel="nofollow noreferrer">accessing asyncio event loop socket support</a>. Otherwise, I'd use <code>select()</code> to look at <em>both</em> sockets in parallel,  returned events like <code>('left paddle', -1)</code> from my async generator, and updated the game world accordingly.</p>
<p>(I can even suppose that a real-time game like pong would be easier to implement in a completely synchronous way, paced by frame rate.)</p>
</div>
<span class="comment-copy">using socket.receive() would I need to know the number of bytes of the received message before it is received?</span>
