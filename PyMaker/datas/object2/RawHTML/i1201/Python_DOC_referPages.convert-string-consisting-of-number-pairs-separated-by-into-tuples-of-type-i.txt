<div class="post-text" itemprop="text">
<p>I have a string in the following format.</p>
<pre><code>'1 2, 3 4, 5 6, 7 8'
</code></pre>
<p>How can I convert it into a list of tuples (of type int) in the following format?</p>
<pre><code>[(1,2), (3,4), (5,6), (7,8)]
</code></pre>
<p>I think it could be done using regular expressions but I'm having trouble with the expression itself.</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Sure, it could be done with regular expressions. But I find it often much easier to just use string methods and list comprehensions to accomplish such things.</p>
<pre><code>s = '1 2, 3 4, 5 6, 7 8'

[tuple(int(i) for i in x.split()) for x in s.split(',')]
[(1, 2), (3, 4), (5, 6), (7, 8)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No, this couldn't be done with regexes, because those will just output strings. You need to split by comma, then split each element again by space:</p>
<pre><code>[tuple(elem.split(" ")) for elem in data.split(",")]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try using <code>split()</code> and then list comprehension:</p>
<pre><code>sample_str = '1 2, 3 4, 5 6, 7 8'
result = [
     tuple(int(v) for v in item.strip().split(' '))
     for item in sample_str.split(',')
]
</code></pre>
<p><strong>Edit:</strong> Added parsing to <code>int</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You could add parentheses:</p>
<pre><code>&gt;&gt;&gt; original = '1 2, 3 4, 5 6, 7 8'
&gt;&gt;&gt; modified = '[({})]'.format(original.replace(', ', '),(').replace(' ', ','))
&gt;&gt;&gt; modified
'[(1,2),(3,4),(5,6),(7,8)]'
</code></pre>
<p>We can then use <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><strong><code>ast.literal_eval</code></strong></a> to convert the string to a list of tuples of integers:</p>
<pre><code>&gt;&gt;&gt; from ast import literal_eval
&gt;&gt;&gt; literal_eval(modified)
[(1, 2), (3, 4), (5, 6), (7, 8)]
</code></pre>
<p>This is a safe way of evaluating a string (not like <code>eval</code>). From the <code>literal_eval</code> documentation:</p>
<blockquote>
<p>Safely evaluate an expression node or a string containing a Python literal or container display. The string or node provided may only consist of the following Python literal structures: strings, bytes, numbers, tuples, lists, dicts, sets, booleans, and None.</p>
<p>This can be used for safely evaluating strings containing Python values from untrusted sources without the need to parse the values oneself. It is not capable of evaluating arbitrarily complex expressions, for example involving operators or indexing.</p>
</blockquote>
</div>
<span class="comment-copy">What have you tried so far?</span>
<span class="comment-copy">this does not convert to <code>int</code>s.</span>
<span class="comment-copy">this does not convert to <code>int</code>s</span>
<span class="comment-copy">Don't do this, this is a code injection waiting to happen</span>
<span class="comment-copy">@Rob for example?</span>
<span class="comment-copy">Sorry, I was confusing <code>literal_eval()</code> with the bare <code>eval()</code>. Still a needlessly complex way to do it.</span>
<span class="comment-copy">I'm just offering an alternative. Our two solutions have different failure modes.</span>
