<div class="post-text" itemprop="text">
<p>I want to make a decorator for a project of mine that every x seconds certain telethon task will be started.</p>
<p>I've asked in the telethon group and someone give me a small decorator but the problem here is that I need to start the loop using <code>run_until_complete</code> and I already use it when starting the client. Here is my code:</p>
<pre><code>def periodic(period):
    def scheduler(fcn):
        async def wrapper():

            while True:
                asyncio.ensure_future(fcn())
                await asyncio.sleep(period)

        return wrapper

    return scheduler

@periodic(2)
async def do_something():
    await asyncio.sleep(5)  # Do some heavy calculation
    me = await client.get_me()
    print(me.stingfy())
</code></pre>
<p>Now I already have a loop running in <strong>main</strong>:</p>
<pre><code>if __name__ == "__main__":

async def start():
    await client.start()
    await client.get_me()
    await client.run_until_disconnected()

loop = asyncio.get_event_loop()
loop.run_until_complete(start())
</code></pre>
<p>and I can't run another loop because if I do that it seems to close this one. Any ideas about how to make this work?</p>
</div>
<div class="post-text" itemprop="text">
<p>It looks like you desire to run multiple functions at same time. So you can use <code>asyncio.Task</code> or <code>asyncio.create_task</code> to create tasks and add them into list, then run them through using <code>asyncio.wait</code> or <a href="https://docs.python.org/3/library/asyncio-task.html#running-tasks-concurrently" rel="nofollow noreferrer">etc</a>.</p>
<pre><code>import asyncio

def periodic(period):
    def scheduler(fcn):
        async def wrapper():
            while 1:
                asyncio.ensure_future(fcn())
                await asyncio.sleep(period)
        return wrapper
    return scheduler

@periodic(2)
async def do_something():
    print("Im running")

async def client():
    while 1:
        await asyncio.sleep(1)
        print("This is client")

if __name__ == "__main__":
    async def start():
        task = [asyncio.Task(client()),
                asyncio.Task(do_something())]
        done, pending = await asyncio.wait(task)

    loop = asyncio.get_event_loop()
    loop.run_until_complete(start())
</code></pre>
</div>
<span class="comment-copy">I don't see any attempt of calling <code>do_something()</code> in your code</span>
<span class="comment-copy">I don't really know how to call it. Also do_something() is a async def(fixed it in the question) and I can't just use do_something() in main</span>
<span class="comment-copy">Oh, this is exactly what I was looking for.. thanks</span>
