<div class="post-text" itemprop="text">
<p>Say I have a function <code>foo</code> in a big Python project that has a named argument <code>bar</code>:</p>
<pre><code>def foo(bar=42):
  do_something_with_bar(bar)
</code></pre>
<p>This function is called a lot in the codebase, in calls that use or omit the named <code>bar</code> parameter.</p>
<p>Now say I'm changing this function because it has a bug and want start using a function from a certain package, that is coincidentally also called <code>bar</code>. I cannot use the <code>bar</code> function when I import it like this:</p>
<pre><code>from package import bar

def foo(bar=42):
  # how can I use the package.bar function here?
  do_something_with_bar(bar)
</code></pre>
<p>I could use something like:</p>
<pre><code>from package import bar as package_bar
</code></pre>
<p>But this file also contains a lot of invocations of <code>bar</code> so that's a no-go.</p>
<p>The only way I can see this working is to rename the <code>bar</code> method from <code>package</code>:</p>
<pre><code>from package import bar
package_bar = bar

def foo(bar=42):
  do_something_with_bar(package_bar(bar))
</code></pre>
<p>Or to import it multiple times (untested):</p>
<pre><code>from package import bar, bar as package_bar

def foo(bar=42):
  do_something_with_bar(package_bar(bar))
</code></pre>
<p>Is there some way I can rename the <code>bar</code> parameter in the <code>foo</code> function, without all calls to the <code>foo</code> function breaking in the entire codebase?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a common issue. In this case, it helps to have an additional import statement for <code>package</code>, so you can safely refer to <code>package</code>'s <code>bar</code> through the <code>package</code> namespace without running into naming conflicts.</p>
<pre><code>import package
from package import bar

def foo(bar=42):
    do_something_with_bar(package.bar(bar))
</code></pre>
<p>You still end up importing the module once, but you now have two ways of referring to <code>bar</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Replace the function body with a call to another function with differently named arguments:</p>
<pre><code>from package import bar

def foo(bar=42):
    return _foo(baz=bar)

def _foo(baz):
    do_something_with_bar(bar(baz))
</code></pre>
<p>Then you are free to use <code>bar</code> in that function as the name of the function from the package rather than the argument.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're lucky, the foo function is only called by "foo()" or "foo(24)" and nowhere by "foo(bar=42)" and then you can put any new name instead of bar without breaking anything.<br/>
Else you have to grep / search for all calls of "foo(bar=" and replace them too, being careful of the possible extra spaces like in "foo( bar =".</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know if I understand your question correctly, but if you just wanna avoid namespace conflict in that specific function, why not import it inside the function?</p>
<pre><code>def foo(bar=42):
  from package import bar as package_bar
  do_something_with_bar(package_bar(bar))
</code></pre>
<p>And you can add one line comment at top to remind yourself.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use the <a href="https://docs.python.org/3/library/functions.html#globals" rel="nofollow noreferrer"><code>globals()</code></a> to reference global variables.</p>
<pre><code>def foo(bar=42):
    package_bar = globals()['bar']
    do_something_with_bar(package_bar(bar))
</code></pre>
<p>This shouldn't break anything in your code base.</p>
</div>
<span class="comment-copy">@Idlehands I think OP's problem is that they have a function <code>bar</code> and an argument <code>bar</code> that they want to be able to refer to within the same function <code>foo</code> with minimal headache. The name clash isn't an issue anywhere but inside <code>foo</code>, I assume.</span>
<span class="comment-copy">Thanks, I had to reread the question and answer twice.  I was genuinely confused about why OP was against <code>from package import bar as package_bar</code>, but seeing your answer now I understand there are instances <i>outside of foo</i> that he also wants to maintain.  Thanks for the clarification.  In this case I might even say just a <code>import package</code> would suffice, but I digress :)</span>
<span class="comment-copy">OP writes "calls [...] use or omit the named bar parameter."</span>
<span class="comment-copy">Importing inside a function is generally discouraged and will make pylint complain.</span>
<span class="comment-copy">Yes it is. But there is a reason. That makes it difficult to identify what packages are used in this file. So I mentioned that you can use comment to notify.</span>
<span class="comment-copy">Having anything to do with globals() and locals() is bad practice except in the rarest of cases. I don't know if this counts.</span>
<span class="comment-copy">Okey, didn't know this as I never had to use them, but this (and making a wrapper function) seems to be the only way to prevent double imports just for reference's sake.</span>
