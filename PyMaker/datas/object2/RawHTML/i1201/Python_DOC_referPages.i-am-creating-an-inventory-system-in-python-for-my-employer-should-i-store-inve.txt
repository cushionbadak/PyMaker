<div class="post-text" itemprop="text">
<p>I have begun creating an inventory system in Python for my employer. I have the frontend GUI mostly complete and have questions about the backend.</p>
<p>How should I store the information?</p>
<p>The program will be located in a dropbox folder that can be accessed by multiple people at once. Should I use an SQLite database, and upon executing functions such as "add stock", open a connection, execute the change, and close the connection? Will this allow multiple users to have the inventory open at once? Are there better ways to handle this?</p>
<p>There won't be a lot of inventory items. Would it be better to use python objects and object methods to store and manipulate the information?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can manipulate an sqlite database pretty easily with Python.</p>
<p><a href="https://docs.python.org/3/library/sqlite3.html" rel="nofollow noreferrer">https://docs.python.org/3/library/sqlite3.html</a></p>
<pre><code>import sqlite3 as sql

class SQLManiuplator:
  def __init__(self, fp=None):
    path = fp
    if not fp:
      path = "example.db"
    self.path = path

  def add_item_to_inventorytable(self, item):
    with sql.connect(self.path) as conn: # close automatically
        c = conn.cursor()
        # Use '?' substitution to sanitize inputs per sqlite3 docs
        c.execute('''
        INSERT INTO inventory VALUES (?)''', item)
        c.commit()

  # More CRUD functions
</code></pre>
<p>You can built a pretty CRUD api with this pattern and map the operations to your GUI. From a design standpoint, it then falls to you to decide what operations you are willing to expose to your users. For example I don't suppose you will want to make <code>CREATE TABLE</code> available to users so I didn't include that. (But this means you would have to manually create tables and define what columns exist in them.)</p>
<p>You already said that this would be a pretty lightweight inventory system, but it should go without saying that at enterprise scale this solution is a loser.</p>
</div>
<span class="comment-copy">If you're trying to do database-like operations, you should probably use a database. Otherwise, how do you envision using python objects to track inventory changes?</span>
<span class="comment-copy">I thought maybe that creating objects with attributes such as "count", "price", etc would work if there were a way to keep the attribute changes over closing and re-opening of the application.</span>
<span class="comment-copy">There are ways, such as a <code>.csv</code> or <code>pickle</code> file that you can use to persist data or python objects between sessions, but it's really down to your use case</span>
<span class="comment-copy">Have you read the warnings about sqlite and multiple concurrent accesses?</span>
<span class="comment-copy">I have not, I just looked and it seems it won't be a problem because the likelihood of more than one person on at a time is small (although existent). And even if there is more than one person, their updates will be minor, and, according to the warning, will take milliseconds to complete.</span>
<span class="comment-copy">Thank you! This was very helpful. If you don't mind, I have another question for you, with the c.execute method, is there a way to take in a variable amount of arguments? I was planning on having multiple tables, and some have a different number of columns. I know that in javascript you can use the "arguments" object to retrieve and iterate through a variable number of arguments. I would like to avoid creating several functions for each table if possible.</span>
<span class="comment-copy">@BlorbieRandy check out the python <code>splat</code> operator. Learning about <code>decorators</code> in python taught me a lot about <code>splat</code></span>
<span class="comment-copy">Thank you! I will do that.</span>
<span class="comment-copy">You're welcome! If the response helped resolve your issue you can mark it up or mark it answered @BlorbieRandy</span>
