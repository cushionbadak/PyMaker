<div class="post-text" itemprop="text">
<p>I am writing test files for a Python module </p>
<pre><code>class A:
    def func(self):
        B().sub_func()
class B:
    def sub_func(self):
        pass
</code></pre>
<p>and I need block B's side effect while testing A.
my question is that how to replace class B in test file.</p>
<pre><code>class ATest(unittest.TestCase):
    def test_a(self):
        a=A()
        a.func()
        #now object a will invoke a func that B is a mock class
</code></pre>
<p>following the instruction of accepted answer. I finish my tests </p>
<p>tws/main.py</p>
<pre><code>class A(object):
    def func(self):
        b=B()
        print('func ')
        b.sub_func()
class B(object):
    def sub_func(self):
        print('real sub')
        c=C()
        c.c_sub_func()
class C(object):
    def c_sub_func(self):
        print('c')
</code></pre>
<p>test/test_mock.py</p>
<pre><code>import unittest
from unittest.mock import patch
from tws.main import A
class B():
    def sub_func(self):
        print('mock')
        return 12
class TestMock(unittest.TestCase):
    @patch('tws.main.B',new=B)
    def test_af(self):
        a=A()
        print(a.__dict__)
        a.func()
        print('rrr')
</code></pre>
<p>it will print mock,hope it will help other people with same problems.</p>
</div>
<div class="post-text" itemprop="text">
<p>As suggested in the comments, you can mock out class B by using <code>unittest.mock</code> - in particular <a href="https://docs.python.org/3/library/unittest.mock.html#the-patchers" rel="nofollow noreferrer"><code>patch()</code></a>. </p>
<p>You can use <code>patch()</code> as a decorator on your test method, making sure you add an extra argument to receive the mocked class B:</p>
<pre><code>from unittest.mock import patch

class ATest(unittest.TestCase):

    @patch('package.module.B')
    def test_a(self, mock_b):  # mock_b will hold the mocked class B
        a = A()
        a.func()
</code></pre>
<p>Note that the path you pass to the decorator must be the path to where B is <em>used</em> (the same module containing class A) <em>not</em> the path to where class B is defined. See <a href="https://docs.python.org/3/library/unittest.mock.html#where-to-patch" rel="nofollow noreferrer">Where to patch</a> for more info on that.</p>
</div>
<span class="comment-copy">If you want to mock in unittest, have you looked at <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer"><code>unittest.mock</code></a>? But note that your design is not very testable - having <code>a</code> build its own instance of <code>B</code> introduces a lot of coupling.</span>
<span class="comment-copy">great! let me have a try.</span>
