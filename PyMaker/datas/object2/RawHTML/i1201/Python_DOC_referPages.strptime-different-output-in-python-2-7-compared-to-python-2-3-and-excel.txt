<div class="post-text" itemprop="text">
<p>I have some python 2.3.4 scripts to migrate to python 2.7.5  and  I found a strange issue in the behavior of strptime.</p>
<p>The Script Sample convert a string in (week number, day, year) format to a datetime:</p>
<p><code>dw='51 0 18' # 51 week number , 0 for Sunday and 18 for year 2018
date=time.strptime(dw,"%U %w %y")
print(date)
</code>
The output in python 2.3.4:</p>
<pre><code>(2018, 12, 16, 0, 0, 0, 6, 350, -1) # 2018 12 16
</code></pre>
<p>The output in python 2.7.5:</p>
<pre><code>time.struct_time(tm_year=2018, tm_mon=12, tm_mday=23, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=357, tm_isdst=-1) # 2018 12 23
</code></pre>
<p>The behavior is different beginning from the second week number of the year (dw='2 0 18').</p>
<p>Is it a known issue of strptime or have I missed something? </p>
</div>
<div class="post-text" itemprop="text">
<p>There are two common week numbering systems, and <code>strptime()</code> has two directives, to handle both ISO week numbers (<code>%W</code>: weeks begin on Monday) and the week number system used in North America (<code>%U</code>: weeks begin on Sunday).</p>
<p>I'm not very familiar with the latter system, but I reckoned that Excel 2016 is, and when I checked I found that it agrees that in that system the Sunday in week 51 2018 is 16 December. </p>
<pre><code>=WEEKNUM(DATE(2018,12,16))     --&gt; 51
</code></pre>
<p><a href="https://en.wikipedia.org/wiki/Week#Week_numbering" rel="nofollow noreferrer">Wikipedia</a> gives the method for determining week 1 in the North American system as follows: Week 1 begins on a Sunday and contains both 1 January and the first Saturday. Or, put another way, week 1 ends on the first Saturday in January.</p>
<p>So, up to 6 days of week 1 can actually fall in the previous year, and those days also count as being in week 53 of the previous year.</p>
<p>This table shows, for 7 years, the date of the first Sunday of the year, and to its left, the date of the preceding Sunday. So column 2 is 7 days after column 1. Excel 2016's <code>WEEKNUM()</code> function reports all the dates in column 2 as week 2:</p>
<pre><code>Sunday falls on  Week 2 begins
---------------  -------------
26-Dec-2021      02-Jan-2022
27-Dec-2015      03-Jan-2016
28-Dec-2025      04-Jan-2026
29-Dec-2019      05-Jan-2020
30-Dec-2018      06-Jan-2019
31-Dec-2017      07-Jan-2018
01-Jan-2017      08-Jan-2017
</code></pre>
<p>If I ask Python 2.7 or 3.7 for the Sunday in week 1 of these years, like this:</p>
<pre><code>for year in (2022,2016,2026,2020,2019,2018,2017):
    print(time.strftime("%d-%b-%Y",time.strptime("{year} 1 0".format(year=year), "%Y %U %w")))
</code></pre>
<p>I get</p>
<pre><code>02-Jan-2022
03-Jan-2016
04-Jan-2026
05-Jan-2020
06-Jan-2019
07-Jan-2018
01-Jan-2017
</code></pre>
<p>So, for the Python standard library's <code>%U</code> directive, week 1 begins on the first Sunday in January, rather than ending on the first Saturday. That is a reasonable approach, just a different one. The difference means that <code>%U</code> week numbers agree with Excel week numbers only in years where 1 January is a Sunday. In all other years, including 2018 as you report, <code>%U</code> will give a week number that is one less.</p>
<p>I reported this as a bug on bugs.python.org, issue <a href="https://bugs.python.org/issue35535" rel="nofollow noreferrer">35535</a>. The consensus there appears to be that the current behaviour is consistent with the documentation. That Python 2.3 agrees with Excel and Wikipedia, and Python 2.7 does not, seems to be regarded as unpersuasive.</p>
<p>So, if it wasn't before, it is a known issue now.</p>
</div>
<span class="comment-copy">The day is different for the OP.</span>
<span class="comment-copy">Thank you for the detailed and clear explanation of the bug. In addition to finding a workaround to get my code works as before (Python 2.3) I am interested in understanding the reference to the glibc made in the answers to the 35535 issue.</span>
<span class="comment-copy">That reference by Paul Ganssle to <code>glibc</code> is just wrong. He was talking about <code>strftime()</code> and Python's <code>strftime()</code> does indeed depend on the underlying implementation of <code>strftime()</code> in the C library. But your question was about <code>strptime()</code> and, as the Python docs make clear: "<code>strptime()</code> is independent of any platform" <a href="https://docs.python.org/3/library/time.html#module-time" rel="nofollow noreferrer">docs.python.org/3/library/time.html#module-time</a>.</span>
