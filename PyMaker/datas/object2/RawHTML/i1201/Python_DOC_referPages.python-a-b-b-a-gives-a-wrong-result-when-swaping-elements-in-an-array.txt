<div class="post-text" itemprop="text">
<p>I think the two are identical.</p>
<pre><code>nums = [1, 2, 0]    
nums[nums[0]], nums[0] = nums[0], nums[nums[0]]    
print nums  # [2, 1, 0]

nums = [1, 2, 0]    
nums[0], nums[nums[0]] = nums[nums[0]], nums[0]    
print nums  # [2, 2, 1] 
</code></pre>
<p>But the results are different.<br/>
Why are the results different? (why is the second one that result?) </p>
</div>
<div class="post-text" itemprop="text">
<h2><em>Prerequisites</em> - 2 important Points</h2>
<ul>
<li><p><strong>Lists are mutable</strong></p>
<p>The main part in lists is that lists are mutable. It means that the
values of lists can be changed. This is one of the reason why you are
facing the trouble. <a href="https://docs.python.org/3/tutorial/introduction.html#lists">Refer the docs for more info</a></p></li>
<li><p><strong>Order of Evaluation</strong></p>
<p>The other part is that while unpacking a tuple, the evaluation starts
from left to right. <a href="https://docs.python.org/3/reference/expressions.html#evaluation-order">Refer the docs for more info</a></p></li>
</ul>
<hr/>
<h2><em>Introduction</em></h2>
<p>when you do <code>a,b = c,d</code> the values of <code>c</code> and <code>d</code> are first stored. Then starting from the left hand side, the value of <code>a</code> is first changed to <code>c</code> and then the value of <code>b</code> is changed to <code>d</code>. </p>
<p>The catch here is that if there are any side effects to the location of <code>b</code> while changing the value of <code>a</code>, then <code>d</code> is assigned to the <em>later</em> <code>b</code>, which is the <code>b</code> affected by the side effect of <code>a</code>.</p>
<hr/>
<h2><em>Use Case</em></h2>
<p>Now coming to your problem</p>
<p>In the first case,</p>
<pre><code>nums = [1, 2, 0]    
nums[nums[0]], nums[0] = nums[0], nums[nums[0]]    
</code></pre>
<p><code>nums[0]</code> is initially <code>1</code> and <code>nums[nums[0]]</code> is <code>2</code> because it evaluates to <code>nums[1]</code>. Hence 1,2 is now stored into memory. </p>
<p>Now tuple unpacking happens from left hand side, so </p>
<pre><code>nums[nums[0]] = nums[1] = 1   # NO side Effect. 
nums[0] = 2
</code></pre>
<p>hence <code>print nums</code> will print <code>[2, 1, 0]</code></p>
<p>However in this case  </p>
<pre><code>nums = [1, 2, 0]   
nums[0], nums[nums[0]] = nums[nums[0]], nums[0]    
</code></pre>
<p><code>nums[nums[0]], nums[0]</code>  puts 2,1 on the stack just like the first case. </p>
<p>However on the left hand side, that is  <code>nums[0], nums[nums[0]]</code>, the changing of <code>nums[0]</code> has a side effect as it is used as the index in <code>nums[nums[0]]</code>. Thus</p>
<pre><code>nums[0] = 2
nums[nums[0]] = nums[2] = 1  # NOTE THAT nums[0] HAS CHANGED
</code></pre>
<p><code>nums[1]</code> remains unchanged at value <code>2</code>. hence <code>print nums</code> will print <code>[2, 2, 1]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can define a class to track the process:</p>
<pre><code>class MyList(list):
    def __getitem__(self, key):
        print('get ' + str(key))
        return super(MyList, self).__getitem__(key)
    def __setitem__(self, key, value):
        print('set ' + str(key) + ', ' + str(value))
        return super(MyList, self).__setitem__(key, value)
</code></pre>
<p>For the first method:</p>
<pre><code>nums = MyList([1, 2, 0])
nums[nums[0]], nums[0] = nums[0], nums[nums[0]]
</code></pre>
<p>the output is:</p>
<pre><code>get 0
get 0
get 1
get 0
set 1, 1
set 0, 2
</code></pre>
<p>While the second method:</p>
<pre><code>nums = MyList([1, 2, 0])
nums[0], nums[nums[0]] = nums[nums[0]], nums[0]
</code></pre>
<p>the output is:</p>
<pre><code>get 0
get 1
get 0
set 0, 2
get 0
set 2, 1
</code></pre>
<p>In both methods, the first three lines are related to tuple generation while the last three lines are related to assignments. Right hand side tuple of the first method is <code>(1, 2)</code> and the second method is <code>(2, 1)</code>.</p>
<p>In the assignment stage, first method get <code>nums[0]</code> which is <code>1</code>, and set <code>nums[1] = 1</code>, then <code>nums[0] = 2</code>, second method assign <code>nums[0] = 2</code>, then get <code>nums[0]</code> which is <code>2</code>, and finally set <code>nums[2] = 1</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's because of that python assignment priority is left to right.So in following code:</p>
<pre><code> nums = [1, 2, 0]
 nums[nums[0]], nums[0] = nums[0], nums[nums[0]]
</code></pre>
<p>It first assigned the <code>nums[0]</code> to <code>nums[nums[0]]</code> means <code>nums[1]==1</code> and then since lists are mutable objects the nums would be :</p>
<pre><code>[1,1,0]
</code></pre>
<p>and then <code>nums[nums[0]]</code> will be assigned to <code>nums[0]</code> which means <code>nums[0]==2</code> and :</p>
<pre><code>nums = [2,1,0]
</code></pre>
<p>And like so for second part.</p>
<p>Note that the important point here is that list objects are mutable and when you change it in a segment of code it can be change in-place. thus it will affect of the rest of the code.</p>
<p><a href="https://docs.python.org/2/reference/expressions.html#evaluation-order" rel="noreferrer">Evaluation order</a></p>
<blockquote>
<p>Python evaluates expressions from left to right. Notice that while evaluating an assignment, the right-hand side is evaluated before the left-hand side.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>In the first example, what happens is nums[1] gets set to 1, and then nums[0] gets set to 2, as you might expect.</p>
<p>In the second example, nums[0] gets set to 2, and then <strong>nums[2]</strong> gets set to 1.  This is because, in this case, the left hand side nums[nums[0]] is really referencing nums[2] when the assignment happens, because nums[0] had just been set to 2.</p>
</div>
<span class="comment-copy">It's all about Evalutation Order and Mutability of lists...Nice Question @henry</span>
<span class="comment-copy">This question tripped me out.  I honestly thought the statements were the same too.  This is a great example of how you need to know the order of operations when evaluating a statement and lists being mutable.  Thanks for asking the question!</span>
<span class="comment-copy">Lines like this would have worked so much nicer if the design had been for <code>a[b], c[d] = e, f</code> to evaluate a, b, c, d, e, and f in that order and <i>then</i> assign, but it's too late to change things now.</span>
<span class="comment-copy">@user2357112 yeah, I guess they're not making these changes because they don't want to break the present things. We need to wait till python4 where they release another backwards incompatible product.</span>
