<div class="post-text" itemprop="text">
<p>At a high level: I am looking to use Python (because that's the language I am most comfortable using) to create a GUI for data entry to manage warehouse inventory. Does anyone have experience with creating something like this? Is Python a good choice for this tool’s creation?</p>
<p>More details: I have data containing information about products in a warehouse (i.e., sku, quantity, etc.). At the end of Q4, warehouse workers are going through each item in the warehouse and counting how many are on-hand in the warehouse to see if the human count matches the count on file. If there are any mismatches between the count that’s on file and the human count that item is moved to the second round of counting. If the second human count does not match either the count on file or the first count it is flagged for a final review.</p>
<p>I've written a program that does what I want it to do, however, I was just informed that the employees performing the second human count will be doing so while the first count is still going on. This throws a wrinkle in my current program and, essentially, what I need to create is a GUI which allows the user (i.e., data entry employee) to grab data from a database, make changes to that data (i.e., populate the human count 1 and human count 2 columns), and for the program to instantly identify matches/mismatches. It will basically act as a google sheet with built-in formulas.</p>
<p>I've included some code below of version 1 of the project if it helps clarify some of my logic.</p>
<pre><code># create some test data
import pandas as pd

# create dataframe
QUANTITY = [1,1,1,2,2,2,3,3,3]

counted_quantity_1 = [4,1,1,1,1,1,1,1,5]

counted_quantity_2 = [1,2,2,2,2,2,2,2,5]

df = pd.DataFrame({'QUANTITY': QUANTITY,
                   'counted_quantity_1': counted_quantity_1,
                   'counted_quantity_2': counted_quantity_2})
</code></pre>
<p>I wrote this to an excel file and saved it as test_file.xlsx</p>
<p>Here is the main_test.py file:</p>
<pre><code>import pandas as pd

# get user inputs
filename = input("Enter the name of your dataset: ") # this will be test_file
filename_formatted = filename + ".xlsx"
# get the number of counts
num_counts = input("Is this the 1st or 2nd count? (enter 1 or 2): ")
# get the warehouse location
warehouse_loc = input("What is the warehouse location (enter AZ or PA): ")


# import data
df = pd.read_excel(filename_formatted)

# create new files depending on if they are the 1st or 2nd count
if num_counts == '1':      
    # mismatches_1 = 1 if it is a mismatch and 0 if it is not
    df['matches_1'] = df.apply(lambda x: 1 if x['counted_quantity_1'] == x['QUANTITY'] else 0, axis=1)

    # keep only the mismatches
    df_mismatches = df[df['matches_1'] == 0]

    # export as excel file
    df_mismatches.to_excel("mismatches_1_" + warehouse_loc + ".xlsx")
else:
    # get a column to see if any of the three columns match
    df['matches_2'] = df.apply(lambda x: 1 if x['counted_quantity_2'] == x['QUANTITY'] or x['counted_quantity_2'] == x['counted_quantity_1'] else 0, axis=1)

    # keep only the mismatches (i.e., 0)
    df_mismatches = df.loc[df['matches_2'] == 0]

    # export as excel file
    df_mismatches.to_excel("mismatches_2_" + warehouse_loc + ".xlsx")

    # get a column where counted_quantity_1 == counted_quantity_2 but QUANTITY is different
    df['HJ_adjust'] = df.apply(lambda x: 1 if x['counted_quantity_2'] == x['counted_quantity_1'] and x['matches_2'] == 1 else 0, axis=1)

    # keep only those flagged for review
    df_mismatches_HJ_rev = df[df['HJ_adjust'] == 1]

    # create a new column that is count 2 minus QUANTITY
    df_mismatches_HJ_rev['diff_from_HJ'] = df_mismatches_HJ_rev['counted_quantity_2'] - df_mismatches_HJ_rev['QUANTITY']

    # export as excel file
    df_mismatches_HJ_rev.to_excel("HJ_review_" + warehouse_loc + ".xlsx")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python offers a lot of possibilities for programming GUIs. Some of the most commonly used python packages for <strong>native GUIs</strong> (i.e. GUIs that are displayed within a Windows/Linux/macOS window) are <a href="https://docs.python.org/3/library/tkinter.html" rel="nofollow noreferrer"><code>tkinter</code></a>, <a href="https://riverbankcomputing.com/software/pyqt/intro" rel="nofollow noreferrer"><code>PyQt</code></a>, <a href="https://www.wxpython.org/" rel="nofollow noreferrer"><code>wxPython</code></a>, <a href="https://pygobject.readthedocs.io" rel="nofollow noreferrer"><code>PyGObject</code></a> and <a href="https://kivy.org" rel="nofollow noreferrer"><code>kivy</code></a>. Then there are also python packages for <strong>web based GUIs</strong> (i.e. GUIs that are displayed within a web browser), with the most commonly used one probably being <a href="https://www.djangoproject.com/" rel="nofollow noreferrer"><code>django</code></a>. Even implementing a GUI inside an <strong>Excel workbook</strong> is a possibility with the <a href="https://www.xlwings.org/" rel="nofollow noreferrer"><code>xlwings</code></a> package.</p>
<p>Each package has their own strengths and limitations, and choosing the one that is the best match for your application is not trivial (if you'd ask five different people, you could very well receive five different answers).</p>
<p>I would advise to first try to get a cursory understanding of the aforementioned packages by reading the introductions/tutorials in the documentation pages. Then (if needed) come back here again to ask more targeted questions.</p>
</div>
<span class="comment-copy">Have a look at tkinter and see if it's something that fits your use case.</span>
<span class="comment-copy">Thanks, I’ve messed around with tkinter a little bit and it could possibly do the trick. I would need to package the app to use on multiple computers (PCs I’m hoping) that don’t have python installed. To do this would you suggest using cx_freeze?</span>
<span class="comment-copy">Thank you. I have had some experience using tkinter in the past and it seems straightforward. Would the best way of distributing an app made in tkinter to end users who do not have python installed be tonise cx_freeze?</span>
<span class="comment-copy">Freezing with <a href="https://cx-freeze.readthedocs.io/en/latest/" rel="nofollow noreferrer"><code>cx_Freeze</code></a> is indeed one possibility. Also another option is <a href="https://www.pyinstaller.org/" rel="nofollow noreferrer"><code>PyInstaller</code></a>.</span>
