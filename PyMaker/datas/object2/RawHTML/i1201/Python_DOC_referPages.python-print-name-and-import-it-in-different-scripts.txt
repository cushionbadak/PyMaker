<div class="post-text" itemprop="text">
<p><strong>strong text</strong>When I learn the <code>__name__</code> attribute in Python, I created two simplest scripts to test it out.</p>
<p>Script 1 (Name of Script: <strong>test1.py</strong>) </p>
<pre><code>print __name__
</code></pre>
<p>When I run Script 1, it returns <code>__main__</code> as expected.</p>
<p>Script 2</p>
<pre><code>import test1
</code></pre>
<p>When I run Script 2, it returns <code>test1</code> which is the filename of test1.py, and this is the expected result as well.</p>
<p>However, if I rename script1 from <strong>test1.py</strong> to <strong>abc.py</strong>, and update Script 2 to <code>import abc</code> and run Script 2 again, it shows nothing.</p>
<p>I have tried other random filenames for Script 1  such as <strong>abcdefg.py</strong>, <strong>xyz.py</strong>, <strong>blabla.py</strong> and update the code of script 2 accordingly, and each time I can get the correct output such as <code>abcdefg</code>, <code>xyz</code>, <code>blabla</code>, but whenever the filename of Script 1 is <strong>abc.py</strong>, running Script 2 will show nothing at all, why is that so? </p>
</div>
<div class="post-text" itemprop="text">
<p><code>abc</code> happens to be a name of a built-in module. When you do <code>import abc</code> you are importing <em>it</em>, not your <code>abc.py</code>.</p>
<pre><code>import abc

print(abc)
# &lt;module 'abc' from '\python-path\lib\abc.py'&gt;
</code></pre>
<p>Its <a href="https://docs.python.org/3/library/abc.html" rel="nofollow noreferrer">documentation</a>, in case you are wondering.</p>
<p>As @user2357112 correctly noted in the comments, <code>abc</code> seems to be a little special in this aspect. Naming a script with a name of a built-in module (<code>random</code>, <code>json</code> etc) usually imports that script and shadows the built-in module. However <code>abc</code> shows a different behavior which is probably a result of how soon it is loaded during the interpreter execution.</p>
</div>
<span class="comment-copy">With most modules, this would actually cause the local <code>abc.py</code> to shadow the stdlib <code>abc</code> module (causing nasty stdlib breakage), but <code>abc</code> is unusual. This may be related to how early it gets loaded at Python startup.</span>
<span class="comment-copy">@user2357112 You are correct, I added that observation</span>
<span class="comment-copy">Thank you @DeepSpace and @user2357112, so looks like I just ran into an interesting and unusual use case of Python by coincidentally using <code>abc</code> as the filename of the script and importing it in another script.</span>
<span class="comment-copy">"abc" is indeed already in <code>sys.modules</code> at interpreter startup (tried with the python shell and in a script, with both python2.7 and ython 3.6).</span>
