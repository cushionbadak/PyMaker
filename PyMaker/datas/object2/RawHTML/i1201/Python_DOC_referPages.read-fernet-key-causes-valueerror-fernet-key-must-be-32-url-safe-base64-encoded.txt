<div class="post-text" itemprop="text">
<p>In this function I am trying to read a Fernet key from a file, or create one if the file doesn't contain a key.</p>
<pre><code>from cryptography.fernet import Fernet
import csv


with open("Keys.txt","rU") as csvfile:
    reader=csv.reader(csvfile)
    KeyFound=0
    print(KeyFound)
    for row in reader:
        try:
            print(row[0])
        except IndexError:
            continue
        if len(row[0])&gt;4:
            print("KEY FOUND")
            KeyFound=1
            print(KeyFound)
            Key=row[0]
            print(Key)
            print(KeyFound)
        else:
            pass
if KeyFound==0:
    Key = Fernet.generate_key()
    print(Key)
    print("Created Key")
    csvfile.close()
#Writing Key to textfile
with open("Keys.txt", "w+") as csvfile:
    headers = ['key']
    writer=csv.DictWriter(csvfile, fieldnames=headers)
    writer.writeheader()
    writer.writerow({'key': Key})
    csvfile.close()
print(Key)
Ecy = Fernet(Key)
</code></pre>
<p>I am having difficulty reading the file. When the file is read the key is read in as:</p>
<pre><code>b'nNjpIl9Ax2LRtm-p6ryCRZ8lRsL0DtuY0f9JeAe2wG0='
</code></pre>
<p>Yet I receive this error:</p>
<pre><code>ValueError: Fernet key must be 32 url-safe base64-encoded bytes.
</code></pre>
<p>In this line:</p>
<pre><code>Ecy = Fernet(Key)
</code></pre>
<p>Any help would be appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem here is how the key is being written to the file.</p>
<p><code>Fernet.generate_key()</code> returns a <code>bytes</code> instance:</p>
<pre><code>&gt;&gt;&gt; key = Fernet.generate_key()
&gt;&gt;&gt; key
b'ZmDfcTF7_60GrrY167zsiPd67pEvs0aGOv2oasOM1Pg='
</code></pre>
<p>The key is being written to the file as is:</p>
<pre><code>&gt;&gt;&gt; with open('keys.csv', 'w+') as f:
...     headers = ['key']
...     writer = csv.DictWriter(f, fieldnames=headers)
...     writer.writeheader()
...     writer.writerow({'key': key})
... 
49
&gt;&gt;&gt; 
</code></pre>
<p>If we look in the file, we can see the contents aren't what we expect - the <code>b</code> that indicates a python bytestring has been written to the file:</p>
<pre><code>$  cat keys.csv 
key
b'ZmDfcTF7_60GrrY167zsiPd67pEvs0aGOv2oasOM1Pg='
</code></pre>
<p><a href="https://docs.python.org/3/library/csv.html#csv.writer" rel="nofollow noreferrer"><code>csv.writer</code></a> calls <code>str</code> on any values that aren't already strings.  If <code>str</code> is called on a <code>bytes</code> instance you get the stringified <em>repr</em> of the bytes instances rather than the decoded value of the <code>bytes</code> instance, which is what you want.</p>
<pre><code>&gt;&gt;&gt; str(key)
"b'ZmDfcTF7_60GrrY167zsiPd67pEvs0aGOv2oasOM1Pg='"  # &lt;- note the extra quotes...
&gt;&gt;&gt; key.decode('utf-8')
'ZmDfcTF7_60GrrY167zsiPd67pEvs0aGOv2oasOM1Pg='
</code></pre>
<p>So the solution is to call the <code>bytes</code> instance's <code>decode</code> method before <code>csv.writer</code>
 receives it.</p>
<pre><code>&gt;&gt;&gt; with open('keys.csv', 'w+') as f:
...     headers = ['key']
...     writer = csv.DictWriter(f, fieldnames=headers)
...     writer.writeheader()
...     writer.writerow({'key': key.decode('utf-8')})
... 
46
&gt;&gt;&gt;
</code></pre>
<p>This gives us the file contents that we want:</p>
<pre><code>$  cat keys.csv 
key
ZmDfcTF7_60GrrY167zsiPd67pEvs0aGOv2oasOM1Pg=
</code></pre>
<p>And the rest of the code works as expected:</p>
<pre><code>&gt;&gt;&gt; with open('keys.csv') as f:
...     reader = csv.reader(f)
...     next(reader)      # &lt;- skip the header row
...     for row in reader:
...         csv_key = row[0]
...         print(Fernet(csv_key))
... 
['key']                   # &lt;- the headers are printed as a side effect of skipping
&lt;cryptography.fernet.Fernet object at 0x7f3ad62fd4e0&gt;
</code></pre>
<p>One debugging tip.  When using <code>print()</code> to debug your code, it's sometimes better to print an object's <a href="https://docs.python.org/3/library/functions.html#repr" rel="nofollow noreferrer"><em>repr</em></a>, rather than the result of calling <code>str</code> on the object (which is what <code>print()</code> does).  This is especially the case if the object is a string.  For example:</p>
<pre><code>&gt;&gt;&gt; bad_key = str(key)
&gt;&gt;&gt; print(bad_key)                                
b'ZmDfcTF7_60GrrY167zsiPd67pEvs0aGOv2oasOM1Pg='      # &lt;- Looks ok...
&gt;&gt;&gt; print(repr(bad_key))
"b'ZmDfcTF7_60GrrY167zsiPd67pEvs0aGOv2oasOM1Pg='"    # &lt;- See the problem
&gt;&gt;&gt; 
&gt;&gt;&gt; good_str = 'foo'
&gt;&gt;&gt; bad_str = 'foo '
&gt;&gt;&gt; print(bad_str)
foo                             # &lt;- looks like good_str
&gt;&gt;&gt; print(repr(bad_str))
'foo '                          # &lt;- see the trailing space 
</code></pre>
</div>
<span class="comment-copy">Just executing <code>f = Fernet(b'nNjpIl9Ax2LRtm-p6ryCRZ8lRsL0DtuY0f9JeAe2wG0=')</code> works fine for me.</span>
<span class="comment-copy">I'm sure it does work fine If you directly put the byte string into the command instead of reading it from the textfile. Must be something to do with the csv reader.</span>
<span class="comment-copy">So is that byte string that you copied not exactly the output from <code>print(Key)</code>?</span>
<span class="comment-copy">No it is but if you look at the error the key must not be in the correct format.</span>
<span class="comment-copy">Thank you very much, I ill now add repr() to my debugging repotoire.</span>
