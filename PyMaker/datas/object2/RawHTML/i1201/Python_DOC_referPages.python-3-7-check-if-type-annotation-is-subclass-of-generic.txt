<div class="post-text" itemprop="text">
<p>I'm trying to find a reliable / cross-version (3.5+) way of checking whether a type annotation is a "subclass" of a given generic type (i.e. get the generic type out of the type annotation object).</p>
<p>On Python 3.5 / 3.6, it works a breeze, as you would expect:</p>
<pre><code>&gt;&gt;&gt; from typing import List

&gt;&gt;&gt; isinstance(List[str], type)
True

&gt;&gt;&gt; issubclass(List[str], List)
True
</code></pre>
<p>While on 3.7, it looks like instances of generic types are no longer instances of <code>type</code>, so it will fail:</p>
<pre><code>&gt;&gt;&gt; from typing import List

&gt;&gt;&gt; isinstance(List[str], type)
False

&gt;&gt;&gt; issubclass(List[str], List)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python3.7/typing.py", line 716, in __subclasscheck__
    raise TypeError("Subscripted generics cannot be used with"
TypeError: Subscripted generics cannot be used with class and instance checks
</code></pre>
<p>Other ideas that come to mind are checking the actual instance type, but:</p>
<p>Python 3.6 / 3.5:</p>
<pre><code>&gt;&gt;&gt; type(List[str])
&lt;class 'typing.GenericMeta'&gt;
</code></pre>
<p>Python 3.7:</p>
<pre><code>&gt;&gt;&gt; type(List[str])
&lt;class 'typing._GenericAlias'&gt;
</code></pre>
<p>But that doesn't really give any further indication as to which is the actual generic type (might not be List); besides, it feels quite wrong to be doing the check this way, especially since the <code>_GenericAlias</code> now became a "private" type (notice the underscore).</p>
<p>Another thing one could check is the <code>__origin__</code> argument on the type, but that doesn't feel like the right way to do it either.</p>
<p>And it still differs on 3.7:</p>
<pre><code>&gt;&gt;&gt; List[str].__origin__
&lt;class 'list'&gt;
</code></pre>
<p>while 3.5 / 3.6:</p>
<pre><code>&gt;&gt;&gt; List[str].__origin__
typing.List
</code></pre>
<p>I've been searching for the "right" way of doing this, but haven't found it in the Python docs / google search.</p>
<p>Now, I'm assuming there must be a clean way of doing this check, as tools like mypy would rely on it for doing type checks..?</p>
<h2>Update: about the use case</h2>
<p>Ok adding a bit more context here..</p>
<p>So, my use case for this is using introspection on function signatures (argument types / defaults, return type, docstring) to automatically generate a GraphQL schema for them (thus reducing the amount of boilerplate).</p>
<p>I'm still a bit torn on whether this would be a good idea or not.</p>
<p>I like it from the usability point of view (no need to learn yet another way to declare your function signature: just annotate your types the usual way); see the two code examples here to understand what I mean: <a href="https://github.com/rshk/pyql" rel="nofollow noreferrer">https://github.com/rshk/pyql</a></p>
<p>I wonder if supporting generic types (lists, dicts, unions, ...) using types from <code>typing</code> this way adds too much "black magic", that could break in unexpected ways. (It's not a huge issue for now, but what about future Python versions, past 3.7? Is this going to become a maintenance nightmare?).</p>
<p>Of course the alternative would be to just use a custom type annotation that supports a more reliable / future-proof check, eg: <a href="https://github.com/rshk/pyql/blob/master/pyql/schema/types/core.py#L337-L339" rel="nofollow noreferrer">https://github.com/rshk/pyql/blob/master/pyql/schema/types/core.py#L337-L339</a></p>
<p>..but on the downside, that would force people to remember they have to use the custom type annotation. Moreover, I'm not sure how would mypy deal with that (I assume there needs to be a declaration somewhere to say the custom type is fully compatible with <code>typing.List</code>..? Still sounds hackish).</p>
<p>(I'm mostly asking for suggestions on the two approaches, and most importantly any pros/cons of the two alternatives I might have missed. Hope this doesn't become "too broad" for SO..).</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all: There is no API defined to introspect type hinting objects as defined by the <code>typing</code> module. Type hinting tools are expected to deal with <em>source code</em>, so text, not with Python objects at runtime; <code>mypy</code> doesn't introspect <code>List[str]</code> objects, it instead deals a parsed <a href="https://docs.python.org/3/library/ast.html" rel="nofollow noreferrer">Abstract Syntax Tree</a> of your source code.</p>
<p>So, while you can always access attributes like <code>__origin__</code>, you are essentially dealing with implementation details (<a href="https://github.com/python/cpython/blob/a261b737617ca8d52e04bf3ead346b1b8786a212/Lib/typing.py#L564-L572" rel="nofollow noreferrer"><em>internal bookkeeping</em></a>), and those implementation details can and will change from version to version. </p>
<p>That said, a core mypy / typing contributor has created the <a href="https://github.com/ilevkivskyi/typing_inspect" rel="nofollow noreferrer"><code>typing_inspect</code> module</a> to develop an introspection API for type hints. The project still documents itself as <em>experimental</em>, and you can expect that to change with time too until it isn't experimental any more. It won't solve your problem here, as it doesn't support Python 3.5, and it's <code>get_origin()</code> function returns the exact same values the <code>__origin__</code> attribute provides.</p>
<p>With all those caveats out of the way, what you want to access on Python 3.5 / Python 3.6 is the <code>__extra__</code> attribute; this is the base built-in type used to drive the <code>issubclass()</code> / <code>isinstance()</code> support that the library originally implemented (but since removed in 3.7):</p>
<pre><code>def get_type_class(typ):
    try:
        # Python 3.5 / 3.6
        return typ.__extra__
    except AttributeError:
        # Python 3.7
        return typ.__origin__
</code></pre>
<p>This produces <code>&lt;class 'list'&gt;</code> in Python 3.5 and up, regardless. It still uses internal implementation details and may well break in future Python versions.</p>
</div>
<span class="comment-copy">Why are you trying to make this check? What is your use case?</span>
<span class="comment-copy">The biggest issues I see here that there is n<i>o API defined</i> for handling <code>typing</code> internals.There is only <i>syntax</i>. Static type checkers process text, not objects, so they have no need to handle <code>List[str]</code> as an object. At most the tool will have built an AST from tokenized input. <code>__origin__</code> is an unpublished implementation detail (the comments in <code>typing.py</code> refer to these as <i>internal bookkeeping</i>), and so relying on these in your own projects is at your own peril.</span>
<span class="comment-copy">There doesn't seem to be a great or official way to do this, but you may be interested in the <a href="https://github.com/ilevkivskyi/typing_inspect/" rel="nofollow noreferrer"><code>typing_inspect</code></a> library and how it approaches this.</span>
<span class="comment-copy">@jonafato: I was about to mention <code>typing_inspect</code>, but that library too will give you <code>&lt;class 'list'&gt;</code> on Python 3.7, and <code>typing.List</code> on Python 3.6. And it doesn't yet support Python 3.5.</span>
<span class="comment-copy">@jonafato: what <code>typing_inspect</code> has going for it is that it is being developed by a core mypy contributor, and once stabilised, will probably become part of the core library. But I don't think what the OP wants can be achieved at the moment, Type hinting is just too much in flux between 3.5 - 3.7</span>
<span class="comment-copy">Thanks Martijin, keeping an eye on <code>typing_inspect</code>, sounds like that's going to be the right way to go once it's completed / stable. I updated my question with more context about my use case btw</span>
<span class="comment-copy">@redShadow: right, you want to overload type hinting with your own type system mapping. I'm not sure how well that'll sit over time. I know that the <a href="https://docs.python.org/3/library/functools.html#functools.singledispatch" rel="nofollow noreferrer"><code>@functools.singledispatch()</code> type hinting support</a> deliberately avoids supporting generics.</span>
<span class="comment-copy">@redShadow: the biggest issue here is that type annotations and how we use them are still in flux as the developers figure out how to best represent types as used in real-life projects, <i>and</i> how to make this all work in Python. The <code>typing</code> module saw so many updates in Python 3.7 because the <a href="https://www.python.org/dev/peps/pep-0560/" rel="nofollow noreferrer">core language gained some hooks specifically to avoid hacks that were needed for <code>typing</code> to work</a>. As such you are going to see some more changes as you try to use this in ways it wasn't initially designed for.</span>
<span class="comment-copy">Understood. What are the chances support for runtime introspection will go away entirely some day? That's my biggest concern right now. Seeing <code>typing_inspect</code> and <code>@singledispatch</code> (I assume everyone would like it to support generics as well some day..?) the risk of that happening seem close to nil, but..?</span>
<span class="comment-copy">I really can't say. You'd have to ask the developers directly. You could try posting on the Python-Dev mailinglist, perhaps. That said, I highly doubt that runtime introspection will ever go away, that'd go against the prevailing Python culture.</span>
