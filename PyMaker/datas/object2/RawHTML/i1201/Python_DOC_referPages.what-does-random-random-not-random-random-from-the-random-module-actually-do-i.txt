<div class="post-text" itemprop="text">
<p>I would like to get a lucid explanation on what the random.Random function/class actually does. This is what Python's random module has to say about it.</p>
<blockquote>
<p>Random number generator base class used by bound module functions.
  Used to instantiate instances of Random to get generators that don't
  share state.  Especially useful for multi-threaded programs, creating
  a different instance of Random for each thread, and using the
  jumpahead() method to ensure that the generated sequences seen by each
  thread don't overlap.</p>
<p>Class Random can also be subclassed if you want to use a different
  basic generator of your own devising: in that case, override the
  following methods: random(), seed(), getstate(), setstate() and
  jumpahead(). Optionally, implement a getrandbits() method so that
  randrange() can cover arbitrarily large ranges.</p>
</blockquote>
<p>I do not understand this because I am still very much a beginner at Python. I do know a bit about base and derived classes and this clearly seems to have something to do with this.</p>
<p>I tried to play around with the random.Random() function/class in Python's IDLE and found out the following. </p>
<ul>
<li>It only seems to accept 1 argument.(string, int, float)</li>
<li>Doesn't seem to to take in any lists or dictionaries as an argument; states they are unhashable. (What does 'unhashable' mean?)</li>
<li>It only seems to return two values alternatively on repeatedly invoking it, regardless of the argument passed to it, the two values being 'random.Random object at 0x03F24E40' and 'random.Random object at 0x03F26B60'. </li>
</ul>
<p>I hope I can get a simple explanation of what random.Random does and also an explanation as to why it only returns two values. (I am a beginner so forgive my ignorance on the subject!)</p>
<p>Any explanation on how functions like seed(), getstate(), setstate() and jumpahead() work or references to any documents/books that explain so are welcome.</p>
</div>
<div class="post-text" itemprop="text">
<p>In simple terms, <code>random.Random()</code> creates a pseudorandom number generator, that is, an object that generates a sequence of numbers that appear random (are <em>pseudorandom</em>).</p>
<p><code>random.Random()</code> accepts one object that can be a 'string', 'int' (integer), or 'float' (integer or non-integer such as 3.2 or 888). This object is called a <em>seed</em>, and it can be used to create an object that generates a specific sequence of pseudorandom numbers. For example, you can callâ€”</p>
<ul>
<li><code>random.Random(57)</code>,</li>
<li><code>random.Random(888.6)</code>,</li>
<li><code>random.Random("Hello World")</code>, or</li>
<li><code>random.Random(99898989)</code>,</li>
</ul>
<p>to get a generator of a specific sequence of pseudorandom numbers. However, you should specify a <em>seed</em> only if you need repeatable "randomness" in your program.</p>
<p>You can then use this generator to extract pseudorandom numbers from that sequence:</p>
<pre><code># Create a generator without
# a seed, so that the pseudorandom
# sequence will almost surely differ
# from run to run
randomGen = random.Random()
# Generate a number in [0, 1)
number = randomGen.random()
# Generate an integer in [0, 5]
number = randomGen.randint(0, 5)
</code></pre>
<p>Note that the example assigns the generator from <code>random.Random</code> to a variable named <code>randomGen</code>; in general, it's not useful on its own simply to create a generator.</p>
</div>
<span class="comment-copy"><a href="https://github.com/python/cpython/blob/master/Lib/random.py#L71" rel="nofollow noreferrer">github.com/python/cpython/blob/master/Lib/random.py#L71</a></span>
<span class="comment-copy">All other functions in random module <code>seed</code>, <code>randint</code> etc. are defined inside this class. They all share the same seed value, gauss value and hence, you only have to do <code>random.seed</code> once.</span>
<span class="comment-copy">What about the documentation of <a href="https://docs.python.org/3/library/random.html#random.random" rel="nofollow noreferrer">random.random()</a> is not lucid enough ? &gt;Return the next random floating point number in the range [0.0, 1.0)</span>
<span class="comment-copy">I am sorry, I think you misunderstood my question @reportgunner. I am referring to random.Random() and not random.random().</span>
<span class="comment-copy">also try <code>help(random.Random)</code> if you imported by saying <code>import random</code> in IDLE</span>
