<div class="post-text" itemprop="text">
<p>I got confusing with the result of round() with 2 decimal places </p>
<pre><code>a = 1352.845
res = round(a, 2)
=&gt; 1352.85 (Right as I expected)

b = 578.005
res = round(b, 2)
=&gt; 578.0 (Wrong, It would be 578.01 instead of 578.0)
</code></pre>
<p>what happens with case b or Have I misunderstood anything?</p>
<p><strong>Answer</strong>:</p>
<pre><code>from decimal import Decimal, ROUND_UP

Decimal('578.005').quantize(Decimal('.01'), rounding=ROUND_UP)
</code></pre>
<p>Because it needs to be used for monetary so the default convention of python round() (Banker's Rounding) doesn't right in my case</p>
</div>
<div class="post-text" itemprop="text">
<p>While it can be confusing, this is due to the fact that most decimal fractions cannot be represented exactly as a <code>float</code> type.</p>
<p>For further reference, see: <a href="https://docs.python.org/3/tutorial/floatingpoint.html#tut-fp-issues" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/floatingpoint.html#tut-fp-issues</a></p>
</div>
<div class="post-text" itemprop="text">
<p>It is not wrong actually.<br/>
It is <a href="https://stackoverflow.com/questions/10825926/python-3-x-rounding-behavior">Banker's Rounding</a> and is an implementation detail on purpose.</p>
<p>If you wish to retain the 'always round 0.5 up' method, you can do so by doing:</p>
<pre><code>import decimal
#The rounding you are looking for
decimal.Decimal('3.5').quantize(decimal.Decimal('1'), rounding=decimal.ROUND_HALF_UP)
&gt;&gt;&gt; Decimal('4')
decimal.Decimal('2.5').quantize(decimal.Decimal('1'), rounding=decimal.ROUND_HALF_UP)
&gt;&gt;&gt; Decimal('3')


#Other kinds of rounding
decimal.Decimal('2.5').quantize(decimal.Decimal('1'), rounding=decimal.ROUND_HALF_EVEN)
&gt;&gt;&gt; Decimal('2')

decimal.Decimal('3.5').quantize(decimal.Decimal('1'), rounding=decimal.ROUND_HALF_DOWN)
&gt;&gt;&gt; Decimal('3')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Recall your Physics / Mathematics lesson where they taught how rounding off works.</p>
<p>If the last digit is a '5' and you round that off, it's preceding digit shall move to the next even digit if it is odd but shall remain the same if it is already even.</p>
</div>
<span class="comment-copy">Banker's rounding (a.k.a. "round ties to even") isn't relevant here, because the values that the OP is rounding are <i>not</i> ties. Note that <code>1352.845</code> is rounding <i>up</i>, not down as you might expect from Banker's Rounding. That's because the actual value stored here is <code>1352.845000000000027284841053187847137451171875</code>; that value is fractionally closer to 1352.85 than to 1352.84, so it rounds up.</span>
<span class="comment-copy">That's not true. What you are describing is Bankers' Rounding and is by no means the standard for many use cases</span>
<span class="comment-copy">Well, that is considered to be the standard in many countries (India included) when it comes to scientific calculations. Also, Python's <code>round</code> function seem to be following this convention.</span>
