<div class="post-text" itemprop="text">
<p>When replacing a text with <code>re.sub</code>:</p>
<pre><code>import re
s = 'This is a sample123 text'
s = re.sub(r'sample\d+', 'another', s)
print(s)
</code></pre>
<p><strong>is there a built-in way to make <code>re.sub</code> verbose?</strong> i.e. print:</p>
<ul>
<li><p>'Pattern ... has been found and succesfully replaced'</p></li>
<li><p>or 'Pattern ... not found'</p></li>
</ul>
<p>I was about to roll my own function:</p>
<pre><code>def mysub(r1, r2, s):
    if re.search(r1, s):  # note: don't use re.match: it matches from beginning only
        print('Pattern %s found' % r1)
        return re.sub(r1, r2, s)
    else:
        print('Pattern %s not found' % r1)
        return s
</code></pre>
<p>but I thought maybe it's possible out of the box.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think the direct answer to your question is no. There is no "verbose" logging method in the <code>re</code> package that I am aware of. That said, <a href="https://docs.python.org/3/library/re.html#re.subn" rel="nofollow noreferrer"><code>re.subn()</code></a> is fairly useful here since it returns a count of substitutions made so you can avoid testing <code>re.search()</code> before calling <code>re.sub()</code>.</p>
<p>For example:</p>
<pre><code>import re

regex = r'sample\d+'
sub = 'another'
text = 'This is sample123 text'
[new_text, count] = re.subn(regex, sub, text)

message = f'{regex} matched, {count} substitutions' if count else f'{regex} not found'

print(message)
print(new_text)
# OUTPUT
# sample\d+ matched, 1 substitutions
# This is another text
</code></pre>
</div>
<span class="comment-copy">Your solution is as straightforward as it gets. There is no built-in method that fits your exact requirements.</span>
