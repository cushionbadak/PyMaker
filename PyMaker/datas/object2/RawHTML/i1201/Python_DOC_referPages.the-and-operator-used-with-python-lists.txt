<div class="post-text" itemprop="text">
<p>I'm trying to learn python and came across some code that is nice and short but doesn't totally make sense</p>
<p>the context was:</p>
<pre><code>def fn(*args):
    return len(args) and max(args)-min(args)
</code></pre>
<p>I get what it's doing, but why does python do this - ie return the value rather than True/False?</p>
<pre><code>10 and 7-2
</code></pre>
<p>returns 5. Similarly, changing the and to or will result in a change in functionality. So</p>
<pre><code>10 or 7 - 2
</code></pre>
<p>Would return 10.</p>
<p>Is this legit/reliable style, or are there any gotchas on this?</p>
</div>
<div class="post-text" itemprop="text">
<h1><strong>TL;DR</strong></h1>
<p>We start by summarising the two behaviour of the two logical operators <code>and</code> and <code>or</code>. These idioms will form the basis of our discussion below.</p>
<blockquote>
<h3><code>and</code></h3>
<p>Return the first Falsey value if there are any, else return the last
  value in the expression.</p>
</blockquote>
<p></p>
<blockquote>
<h3><code>or</code></h3>
<p>Return the first Truthy value if there are any, else return the last
  value in the expression.</p>
</blockquote>
<p>The behaviour is also summarised in <a href="https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not" rel="noreferrer">the docs</a>, especially in this table:</p>
<p><a href="https://i.stack.imgur.com/aDOiQ.png" rel="noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/aDOiQ.png"/></a></p>
<p>The only operator returning a boolean value regardless of its operands is the <code>not</code> operator.</p>
<hr/>
<h1>"Truthiness", and "Truthy" Evaluations</h1>
<p>The statement </p>
<pre><code>len(args) and max(args) - min(args)
</code></pre>
<p>Is a <em>very</em> <s>pythonic</s> concise (and arguably less readable) way of saying "if <code>args</code> is not empty, return the result of <code>max(args) - min(args)</code>", otherwise return <code>0</code>. In general, it is a more concise representation of an <code>if-else</code> expression. For example,</p>
<pre><code>exp1 and exp2
</code></pre>
<p>Should (roughly) translate to:</p>
<pre><code>r1 = exp1
if not r1:
    r1 = exp2
</code></pre>
<p>Or, equivalently,</p>
<pre><code>r1 = exp1 if exp1 else exp2
</code></pre>
<p>Where <code>exp1</code> and <code>exp2</code> are arbitrary python objects, or expressions that return some object. The key to understanding the uses of the logical <code>and</code> and <code>or</code> operators here is understanding that they are not restricted to operating on, or returning boolean values. Any object with a truthiness value can be tested here. This includes <code>int</code>, <code>str</code>, <code>list</code>, <code>dict</code>, <code>tuple</code>, <code>set</code>, <code>NoneType</code>, and user defined objects. Short circuiting rules still apply as well. </p>
<p><strong>But what is truthiness?</strong><br/>
It refers to how objects are evaluated when used in conditional expressions. @Patrick Haugh summarises truthiness nicely in <a href="https://stackoverflow.com/a/39984051/4909087">this post</a>.</p>
<blockquote>
<p>All values are considered "truthy" except for the following, which are
  "falsy":</p>
<ul>
<li><code>None</code></li>
<li><code>False</code></li>
<li><code>0</code></li>
<li><code>0.0</code></li>
<li><code>0j</code></li>
<li><code>Decimal(0)</code></li>
<li><code>Fraction(0, 1)</code></li>
<li><code>[]</code> - an empty <code>list</code></li>
<li><code>{}</code> - an empty <code>dict</code></li>
<li><code>()</code> - an empty <code>tuple</code></li>
<li><code>''</code> - an empty <code>str</code></li>
<li><code>b''</code> - an empty <code>bytes</code></li>
<li><code>set()</code> - an empty <code>set</code></li>
<li>an empty <code>range</code>, like <code>range(0)</code></li>
<li>objects for which 
  
  <ul>
<li><code>obj.__bool__()</code> returns <code>False</code></li>
<li><code>obj.__len__()</code> returns <code>0</code> </li>
</ul></li>
</ul>
<p>A "truthy" value will satisfy the check performed by <code>if</code> or <code>while</code>
  statements.  We use "truthy" and "falsy" to differentiate from the
  <code>bool</code> values <code>True</code> and <code>False</code>.</p>
</blockquote>
<hr/>
<h1>How <code>and</code> Works</h1>
<p>We build on OP's question as a segue into a discussion on how these operators in these instances.</p>
<blockquote>
<p>Given a function with the definition</p>
<pre><code>def foo(*args):
    ...
</code></pre>
<p>How do I return the difference between the minimum and maximum value
  in a list of zero or more arguments?</p>
</blockquote>
<p>Finding the minimum and maximum is easy (use the inbuilt functions!). The only snag here is appropriately handling the corner case where the argument list could be empty (for example, calling <code>foo()</code>). We can do both in a single line thanks to the <code>and</code> operator:</p>
<pre><code>def foo(*args):
     return len(args) and max(args) - min(args)
</code></pre>
<p></p>
<pre><code>foo(1, 2, 3, 4, 5)
# 4

foo()
# 0
</code></pre>
<p>Since <code>and</code> is used, the second expression must also be evaluated if the first is <code>True</code>. Note that, if the first expression is evaluated to be truthy, the return value is <em>always</em> the result of the <em>second expression</em>. If the first expression is evaluated to be Falsey, then the result returned is the result of the first expression. </p>
<p>In the function above, If <code>foo</code> receives one or more arguments, <code>len(args)</code> is greater than <code>0</code> (a positive number), so the result returned is <code>max(args) - min(args)</code>. OTOH, if no arguments are passed, <code>len(args)</code> is <code>0</code> which is Falsey, and <code>0</code> is returned.</p>
<p>Note that an alternative way to write this function would be:</p>
<pre><code>def foo(*args):
    if not len(args):
        return 0

    return max(args) - min(args)
</code></pre>
<p>Or, more concisely,</p>
<pre><code>def foo(*args):
    return 0 if not args else max(args) - min(args)
</code></pre>
<p>If course, none of these functions perform any type checking, so unless you completely trust the input provided, <em>do not</em> rely on the simplicity of these constructs.</p>
<hr/>
<h1>How <code>or</code> Works</h1>
<p>I explain the working of <code>or</code> in a similar fashion with a contrived example.</p>
<blockquote>
<p>Given a function with the definition</p>
<pre><code>def foo(*args):
    ...
</code></pre>
<p>How would you complete <code>foo</code> to return all numbers over <code>9000</code>?</p>
</blockquote>
<p>We use <code>or</code> to handle the corner case here. We define <code>foo</code> as:</p>
<pre><code>def foo(*args):
     return [x for x in args if x &gt; 9000] or 'No number over 9000!'

foo(9004, 1, 2, 500)
# [9004]

foo(1, 2, 3, 4)
# 'No number over 9000!'
</code></pre>
<p><code>foo</code> performs a filtration on the list to retain all numbers over <code>9000</code>. If there exist any such numbers, the result of the list comprehension is a non-empty list which is Truthy, so it is returned (short circuiting in action here). If there exist no such numbers, then the result of the list comp is <code>[]</code> which is Falsey. So the second expression is now evaluated (a non-empty string) and is returned.</p>
<p>Using conditionals, we could re-write this function as,</p>
<pre><code>def foo(*args):
    r = [x for x in args if x &gt; 9000]
    if not r:
        return 'No number over 9000!' 

    return r
</code></pre>
<p>As before, this structure is more flexible in terms of error handling. </p>
</div>
<div class="post-text" itemprop="text">
<p>Quoting from <a href="https://docs.python.org/3/reference/expressions.html#and" rel="noreferrer">Python Docs</a></p>
<blockquote>
<p>Note that neither <code>and</code> nor <code>or</code> <strong>restrict</strong> the <strong>value</strong> and <strong>type</strong> they return
  to <code>False</code> and <code>True</code>, but rather return the <strong>last evaluated argument</strong>. This
  is sometimes useful, e.g., if <code>s</code> is a string that should be replaced by
  a default value if it is empty, the expression <code>s or 'foo'</code> yields the
  desired value. </p>
</blockquote>
<p>So, this is how Python was designed to evaluate the boolean expressions and the above documentation gives us an insight of why they did it so.</p>
<p>To get a boolean value just typecast it.</p>
<pre><code>return bool(len(args) and max(args)-min(args))
</code></pre>
<h1>Why?</h1>
<p>Short-circuiting.</p>
<p>For example:</p>
<pre><code>2 and 3 # Returns 3 because 2 is Truthy so it has to check 3 too
0 and 3 # Returns 0 because 0 is Falsey and there's no need to check 3 at all
</code></pre>
<p>The same goes for <code>or</code> too, that is, it will return the expression which is <em>Truthy</em> as soon as it finds it, cause evaluating the rest of the expression is redundant.</p>
<p>Instead of returning hardcore <code>True</code> or <code>False</code>, Python returns <em>Truthy</em> or <em>Falsey</em>, which are anyway going to evaluate to <code>True</code> or <code>False</code>. You could use the expression as is, and it will still work.</p>
<hr/>
<p>To know what's <em>Truthy</em> and <em>Falsey</em>, check <a href="https://stackoverflow.com/a/39984051/3001736">Patrick Haugh's answer</a></p>
</div>
<div class="post-text" itemprop="text">
<p><strong>and</strong> and <strong>or</strong> perform boolean logic, but they return one of the actual values when they are comparing. When using <strong>and</strong>, values are evaluated in a boolean context from left to right. <strong>0, '', [], (), {},</strong> and <strong>None</strong> are false in a boolean context; everything else is true.</p>
<p>If all values are true in a boolean context, <strong>and</strong> returns the last value.</p>
<pre><code>&gt;&gt;&gt; 2 and 5
5
&gt;&gt;&gt; 2 and 5 and 10
10
</code></pre>
<p>If any value is false in a boolean context <strong>and</strong> returns the first false value. </p>
<pre><code>&gt;&gt;&gt; '' and 5
''
&gt;&gt;&gt; 2 and 0 and 5
0
</code></pre>
<p>So the code</p>
<pre><code>return len(args) and max(args)-min(args)
</code></pre>
<p>returns the value of <code>max(args)-min(args)</code> when there is <strong>args</strong>  else it returns <code>len(args)</code> which is 0.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Is this legit/reliable style, or are there any gotchas on this?</p>
</blockquote>
<p>This is legit, it is a <a href="https://en.wikipedia.org/wiki/Short-circuit_evaluation" rel="noreferrer">short circuit evaluation</a> where the last value is returned. </p>
<p>You provide a good example. The function will return <code>0</code> if no arguments are passed, and the code doesn't have to check for a special case of no arguments passed. </p>
<p>Another way to use this, is to default None arguments to a mutable primitive, like an empty list:</p>
<pre><code>def fn(alist=None):
    alist = alist or []
    ....
</code></pre>
<p>If some non-truthy value is passed to <code>alist</code> it defaults to an empty list, handy way to avoid an <code>if</code> statement and the <a href="http://docs.python-guide.org/en/latest/writing/gotchas/#mutable-default-arguments" rel="noreferrer">mutable default argument pitfall</a></p>
</div>
<div class="post-text" itemprop="text">
<h1>Gotchas</h1>
<p>Yes, there are a few gotchas.</p>
<h2><code>fn() == fn(3) == fn(4, 4)</code></h2>
<p>First, if <code>fn</code> returns <code>0</code>, you cannot know if it was called without any parameter, with one parameter or with multiple, equal parameters :</p>
<pre><code>&gt;&gt;&gt; fn()
0
&gt;&gt;&gt; fn(3)
0
&gt;&gt;&gt; fn(3, 3, 3)
0
</code></pre>
<h2>What does <code>fn</code> mean?</h2>
<p>Then, Python is a dynamic language. It's not specified anywhere what <code>fn</code> does, what its input should be and what its output should look like. Therefore, it's really important to name the function correctly. Similarly, arguments don't have to be called <code>args</code>. <code>delta(*numbers)</code> or <code>calculate_range(*numbers)</code> might describe better what the function is supposed to do.</p>
<h2>Argument errors</h2>
<p>Finally, the logical <code>and</code> operator is supposed to prevent the function to fail if called without any argument. It still fails if some argument isn't a number, though:</p>
<pre><code>&gt;&gt;&gt; fn('1')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in fn
TypeError: unsupported operand type(s) for -: 'str' and 'str'
&gt;&gt;&gt; fn(1, '2')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in fn
TypeError: '&gt;' not supported between instances of 'str' and 'int'
&gt;&gt;&gt; fn('a', 'b')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in fn
TypeError: unsupported operand type(s) for -: 'str' and 'str'
</code></pre>
<h1>Possible alternative</h1>
<p>Here's a way to write the function according to the <a href="https://stackoverflow.com/a/11360880/6419007">"Easier to ask for forgiveness than permission." principle</a>:</p>
<pre><code>def delta(*numbers):
    try:
        return max(numbers) - min(numbers)
    except TypeError:
        raise ValueError("delta should only be called with numerical arguments") from None
    except ValueError:
        raise ValueError("delta should be called with at least one numerical argument") from None
</code></pre>
<p>As an example:</p>
<pre><code>&gt;&gt;&gt; delta()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 7, in delta
ValueError: delta should be called with at least one numerical argument
&gt;&gt;&gt; delta(3)
0
&gt;&gt;&gt; delta('a')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 5, in delta
ValueError: delta should only be called with numerical arguments
&gt;&gt;&gt; delta('a', 'b')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 5, in delta
ValueError: delta should only be called with numerical arguments
&gt;&gt;&gt; delta('a', 3)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 5, in delta
ValueError: delta should only be called with numerical arguments
&gt;&gt;&gt; delta(3, 4.5)
1.5
&gt;&gt;&gt; delta(3, 5, 7, 2)
5
</code></pre>
<p>If you really don't want to raise an exception when <code>delta</code> is called without any argument, you could return some value which cannot be possible otherwise (e.g. <code>-1</code> or <code>None</code>):</p>
<pre><code>&gt;&gt;&gt; def delta(*numbers):
...     try:
...         return max(numbers) - min(numbers)
...     except TypeError:
...         raise ValueError("delta should only be called with numerical arguments") from None
...     except ValueError:
...         return -1 # or None
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; delta()
-1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Is this legit/reliable style, or are there any gotchas on this?</p>
</blockquote>
<p>I would like to add to this question that it not only legit and reliable but it also ultra practical. Here is a simple example:</p>
<pre><code>&gt;&gt;&gt;example_list = []
&gt;&gt;&gt;print example_list or 'empty list'
empty list
</code></pre>
<p>Therefore you can really use it at your advantage. In order to be conscise this is how I see it:</p>
<p><strong><code>Or</code> operator</strong></p>
<p>Python's <code>or</code> operator returns the first Truth-y value, or the last value, and stops</p>
<p><strong><code>And</code> operator</strong></p>
<p>Python's <code>and</code> operator returns the first False-y value, or the last value, and stops</p>
<p><strong><em>Behind the scenes</em></strong></p>
<p>In python, all numbers are interpreted as <code>True</code> except for 0. Therefore, saying:</p>
<pre><code>0 and 10 
</code></pre>
<p>is the same as:</p>
<pre><code>False and True
</code></pre>
<p>Which is clearly <code>False</code>. It is therefore logical that it returns 0</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes. This is the correct behaviour of and comparison.</p>
<p>At least in Python, <code>A and B</code> returns <code>B</code> if <code>A</code> is essentially <code>True</code> including if <code>A</code> is NOT Null, NOT <code>None</code> NOT an Empty container (such as an empty <code>list</code>, <code>dict</code>, etc). <code>A</code> is returned IFF <code>A</code> is essentially <code>False</code> or <code>None</code> or Empty or Null. </p>
<p>On the other hand, <code>A or B</code> returns <code>A</code> if <code>A</code> is essentially <code>True</code> including if <code>A</code> is NOT Null, NOT <code>None</code> NOT an Empty container (such as an empty <code>list</code>, <code>dict</code>, etc), otherwise it returns <code>B</code>. </p>
<p>It is easy to not notice (or to overlook) this behaviour because, in Python, any <code>non-null</code> non-empty object evaluates to True is treated like a boolean.</p>
<p>For example, all the following will print "True"</p>
<pre><code>if [102]: 
    print "True"
else: 
    print "False"

if "anything that is not empty or None": 
    print "True"
else: 
    print "False"

if {1, 2, 3}: 
    print "True"
else: 
    print "False"
</code></pre>
<p>On the other hand, all the following will print "False"</p>
<pre><code>if []: 
    print "True"
else: 
    print "False"

if "": 
    print "True"
else: 
    print "False"

if set ([]): 
    print "True"
else: 
    print "False"
</code></pre>
</div>
<span class="comment-copy"><code>and</code> (as well as <code>or</code>) is not restricted to working with, or returning boolean values.</span>
<span class="comment-copy">IMNSHO: that's a somewhat confusing way of writing that; I can't tell offhand if it's supposed to return a boolean (is there a distinct min and max) or a number (what is the difference of the min and max). If the latter, then there's also the question if it makes any sense to give that difference of a zero-length list as a number. (Instead of <code>None</code> or an exception)</span>
<span class="comment-copy">It works, as other people have explained, however one possible issue is that if it returns <code>0</code> you can't tell whether <code>args</code> was empty or was nonempty but had all elements equal.</span>
<span class="comment-copy">@EspeciallyLime: exactly. I've mentioned it in my <a href="https://stackoverflow.com/a/47018370/6419007">answer</a>.</span>
<span class="comment-copy">Related:  <a href="https://stackoverflow.com/q/35657101/674039">Practical examples of Python AND operator</a>.</span>
<span class="comment-copy">It is not "pythonic" to sacrifice all clarity for brevity, which I think is the case here. It's not a straightforward construct.</span>
<span class="comment-copy">I think one should note that Python conditional expressions have made this syntax less common. I certainly prefer max(args) - min(args) if len(args) else 0 to the original.</span>
<span class="comment-copy">Another common one that is confusing at first, is assigning a value if none exists: "some_var = arg or 3"</span>
<span class="comment-copy">@Baldrickk before people start bashing this syntax in favour of ternary operators, keep in mind that when it comes to n-ary condition expressions, ternary operators can get out of hand quickly. For example, <code>if ... else (if ... else (if ... else (if ... else ...)))</code> can just as well be rewritten as <code>... and ... and ... and ... and ...</code> and at that point it really becomes hard to argue readability for either case.</span>
<span class="comment-copy">It's not pythonic to sacrifice clarity for brevity, but this doesn't do so. It's a well known idiom. It's an idiom you have to learn, like any other idiom, but it's hardly 'sacrificing clarity'.</span>
<span class="comment-copy">Thank you. I wanted to write <code>A</code> is essentially <code>True</code>. Corrected.</span>
