<div class="post-text" itemprop="text">
<p>I have an unusual datetime format in my dataset, which I need to convert to usable datetime object. </p>
<p>An example looks like: '1/3/2018 1:29:35 PM(UTC+0)'</p>
<p>I have tried to parse it with:</p>
<pre><code>from dateutil.parser import parse
parse('1/3/2018 1:29:35 PM(UTC+0)')
</code></pre>
<p>but it doesn't recognize the format.</p>
<p>My current workaround is to parse the datetime column (the data is in pandas dataframe) using regex into two columns, like so:</p>
<p><a href="https://i.stack.imgur.com/vKsgK.png" rel="nofollow noreferrer"><img alt="dataframe" src="https://i.stack.imgur.com/vKsgK.png"/></a></p>
<p>and then depending on the value of the 'utc' column apply custom convert_to_eastern function.</p>
<p><strong>I wonder if there is an easier way to accomplish it using  datetime.datetime.strptime() ?</strong></p>
<p>Following didn't work:</p>
<pre><code>import datetime as dt

my_time='1/3/2018 1:29:35 PM(UTC+0)'
dt.datetime.strptime(my_time, '%m/%d/%Y %I:%M:%S %p(%z)')
</code></pre>
<p>Addition:
This is not a question: "How to convert UTC timezone into local timezone" My dataset has rows with UTC as well as Eastern time zone rows. The problem I have is that the format is not an ISO format, but some human-readable custom format. </p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><strong>Question</strong>: an easier way to accomplish it using datetime.datetime.strptime()</p>
</blockquote>
<p>Split the datestring into parts: <code>utc:[('1/3/2018 1:29:35 PM', '(UTC+0)', 'UTC', '+', '0')]</code><br/>
Rebuild the datestring, fixing the <code>hour</code> part padding with <code>0</code> to 2 digits.<br/>
I assume, there are no <code>minutes</code> in the <code>UTC</code> part, therefore defaults to <code>00</code>.</p>
<p>If the datestring has more then 2 <code>UTC</code> digits, returns the unchanged datestring.</p>
<blockquote>
<p><strong>Note</strong>: The <code>strptime</code> format have to be <code>%Z%z</code>!<br/>
  Documentation: <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">strftime-and-strptime-behavior</a></p>
</blockquote>
<pre><code>from datetime import datetime
import re

def fix_UTC(s):
    utc = re.findall(r'(.+?)(\((\w{3})(\+|\-)(\d{1,2})\))', s)
    if utc:
        utc = utc[0]
        return '{}({}{}{})'.format(utc[0], utc[2], utc[3], '{:02}00'.format(int(utc[4])))
    else:
        return s

my_time = fix_UTC('1/3/2018 1:29:35 PM(UTC+0)')
date = datetime.strptime(my_time, '%m/%d/%Y %I:%M:%S %p(%Z%z)')
print("{} {}".format(date, date.tzinfo))
</code></pre>
<blockquote>
<p><strong>Output</strong>:</p>
<pre><code>2018-01-03 13:29:35+01:00 UTC
</code></pre>
</blockquote>
<p><strong><em>Tested with Python: 3.4.2</em></strong></p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is with '+0' for your timezone 'UTC+0'. <a href="https://docs.python.org/2/library/datetime.html" rel="nofollow noreferrer">datetime</a> only takes utc offset in the form of <code>HHMM</code>. Possible workaround:</p>
<pre><code>import datetime as dt

my_time = '1/3/2018 1:29:35 PM(UTC+0)'
my_time=my_time.replace('+0','+0000')
dt.datetime.strptime(my_time, '%m/%d/%Y %I:%M:%S %p(%Z%z)')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It should be something like that:</p>
<pre><code>import datetime as dt

my_time='1/3/2018 1:29:35 PM(UTC+0000)'
tmp = dt.datetime.strptime(my_time, '%m/%d/%Y %I:%M:%S %p(%Z%z)')
print(tmp)
</code></pre>
<p>Big "Z" for timezone (UTC, GMT etc), small "z" for delta. Also you should add more zeros to delta.</p>
</div>
<span class="comment-copy">i think your approach is write by converting <code>1/3/2018 1:29:35 PM(UTC+0)</code> to <code>1/3/2018 1:29:35 PM+0</code> format and then using  dateutil.parser . but using panda data framework might slow your converting process</span>
<span class="comment-copy">Thanks, now I see the solution is to force the format to conform to ISO format, whether with regex or other string manipulation suggested above. Your regex+datetime.strptime() solution works and is a better alternative to my current work-around.</span>
<span class="comment-copy">it wont work if +0 changes to -5:30</span>
<span class="comment-copy">@prashantrana how do you know the format will be -5:30 and not -0530? This is not mentioned in the question.</span>
<span class="comment-copy">it can be -0530 (ie %h%m notation ) or it can be %h:%m noation . in her dataset she mention that she has UTC and ETZ  time format plus in question it's given (utc+0) so i am assuming there might be different UTC value . while giving utc mostly %h:%m:%S%.%s format is used.</span>
<span class="comment-copy">Exactly. Until she gives more information, we can only assume.</span>
<span class="comment-copy">but using is .<code>.replace</code> function is totally wrong . she has already solve the problem with <code>dateutil.parser.parser</code> , by taking only +0  part from (utc+0). she just want a way to remove the regex part she done to take +0 portion.</span>
