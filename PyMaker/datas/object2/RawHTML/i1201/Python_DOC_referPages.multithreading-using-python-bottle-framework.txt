<div class="post-text" itemprop="text">
<p>New to python and threading, so i'm not sure if threading is happening as mentioned below -- </p>
<p>Here, I'm trying to deploy an individual thread for each event. A new thread should be created when user presses "submit button" every time, then execute it.</p>
<p><strong>a.py file :</strong></p>
<pre><code>from bottle import request, template,route,run,get,post
import sqlite3
import threading
import datetime

@route('/')
def index():
    return template('ins')

@post('/result')
def result():
    # print(request.body.read())  gives raw data
    result = request.forms
    usr_time = request.forms['usr_time']      #get all the values using keys
    A = request.forms.get('A')
    B = request.forms.get('B')
    C = request.forms.get('C')
    usr_hour,usr_mins = usr_time.split(":")


    with sqlite3.connect("database.db") as conn:
        cur = conn.cursor()

        cur.execute("CREATE TABLE IF NOT EXISTS bottable(hour TEXT, minutes TEXT, A TEXT, B TEXT, C TEXT)")
        cur.execute("INSERT INTO bottable(hour,minutes,A,B,C) VALUES (?,?,?,?,?)", (usr_hour,usr_mins,A,B,C))
        cur.execute("select * from bottable")
        data = cur.fetchall()       #get the whole table

        conn.commit()

    t1=threading.Thread(target=calc, args=(data,))    
    t1.start()  

    return template("result",result = result)

def calc(data):

    print(data)               #prints the whole table
    match_not_found=True
    while match_not_found:
        h=datetime.datetime.today().strftime("%H")              
        mi=datetime.datetime.today().strftime("%M")
        # z=[(i[2],i[3],i[4]) for i in data if i[0] == h and i[1]==mi]
        for i in data: 
            if i[0] == h and i[1]==mi:
                print ([j for j in i[2:5] if j != None])
                match_not_found=False
                break


if __name__ == '__main__':
    run(host='localhost',port=8080,debug='True',reloader='True')
</code></pre>
<p><strong>ins.tpl :</strong></p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;

&lt;form action="http://localhost:8080/result" method = "POST"&gt;
Select a time:
&lt;input type="time" name="usr_time"&gt;
&lt;br&gt; &lt;br&gt;
&lt;input type="checkbox" name="A" value="A is on" &gt;A &lt;/input&gt;
&lt;br&gt;
&lt;input type="checkbox" name="B" value="B is on" &gt;B &lt;/input&gt;
&lt;br&gt;
&lt;input type="checkbox" name="C" value="C is on" &gt;C &lt;/input&gt;
&lt;br&gt;&lt;br&gt;
&lt;input type="submit"&gt; &lt;/input&gt;
&lt;/form&gt;


&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p><strong>result.tpl:</strong></p>
<pre><code>&lt;!doctype html&gt;
&lt;html&gt;
   &lt;body&gt;

      &lt;table border = 1&gt;
         %for key, value in result.items():

            &lt;tr&gt;
               &lt;th&gt; {{ key }} &lt;/th&gt;
               &lt;td&gt; {{ value }} &lt;/td&gt;
            &lt;/tr&gt;

         %end
      &lt;/table&gt;

   &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>Both ins.tpl and result.tpl are stored in views folder('cause i'm using bottle). I'm not sure if a new thread is generated every time. Or is there a better way to do it? </p>
</div>
<div class="post-text" itemprop="text">
<p>The code looks like it does indeed kick-off a new thread with every submit.  This is easy to verify using <a href="https://docs.python.org/3/library/threading.html#threading.enumerate" rel="nofollow noreferrer"><em>threading.enumerate()</em></a>.</p>
<p>It looks like there is a race condition in <em>calc()</em> with multiple threads competing for access to <em>stdout</em> via the <em>print()</em> function.  You can fix that by combining all output lines into a single string and printing all at once (or better, create a print queue and do the printing in a separate thread).</p>
</div>
<span class="comment-copy">Also, there's threading, multiprocessing, queue and then there's also pool. I'm kinda confused what/ where to use these.  Can i get an info as what to learn before i jump into threads/processing?</span>
<span class="comment-copy">@Captainaalooreportin'in Here is a link to a video on approaches to concurrency, <a href="https://www.youtube.com/watch?v=9zinZmE3Ogk" rel="nofollow noreferrer">youtube.com/watch?v=9zinZmE3Ogk</a> , and here are the slides, <a href="https://pybay.com/site_media/slides/raymond2017-keynote/index.html" rel="nofollow noreferrer">pybay.com/site_media/slides/raymond2017-keynote/index.html</a></span>
