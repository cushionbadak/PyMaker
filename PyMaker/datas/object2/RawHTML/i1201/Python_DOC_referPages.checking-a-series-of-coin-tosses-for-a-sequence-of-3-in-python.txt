<div class="post-text" itemprop="text">
<p>I am trying to create a script that flips a coin untill either "heads" is flipped 3 times in a row, or " tails"  is flipped 3 times in a row. </p>
<p>My attempt is a quite long snippet of code that does not do what I want it to do. It simply prints out "heads"  once and loops on forever:</p>
<pre><code>import random

cointosses = []
total_count = 0

while total_count &gt;= 0:
    tosses = random.randint(1,2)
    total_count += 1
    if tosses == 1:
        cointosses.append("heads")
    if tosses == 2:
        cointosses.append("tails")
    print(cointosses)
    seq_counter1 = 0
    seq_counter2 = 0
    total_seq = 0
    while total_seq &lt;= 3:
        check1 = "heads"
        check2= "tails"
        for toss in cointosses:
            if toss == check1:
                seq_counter1 +=1 
                seq_counter2 = 0
                if seq_counter1 == 3:
                    total_seq = 3
                    break
            if toss == check2:
                seq_counter1 = 0
                seq_counter2 +=1
                if seq_counter2 == 3:
                    total_seq = 3
                    break

    if total_seq == 3:
        break
</code></pre>
<p>I'm sure there is some much simpler way of doing this, but I can't seem to figure it out.</p>
</div>
<div class="post-text" itemprop="text">
<p>You do never leave your <code>while</code> loop that checks your list. The <code>break</code> statements only leaves the <code>for</code>-loop (setting <code>total_seq = 3</code>) - your <code>while</code> loops until <code>total_seq</code> is <em>greater</em> then 3 -&gt; <strong>endless loop</strong>:</p>
<blockquote>
<pre><code>while total_seq &lt;= 3:        # this is never been left because &lt;= 3
    check1 = "heads"         #                                 ^^ smaller equal
    check2= "tails"
    for toss in cointosses:
        if toss == check1:
            seq_counter1 +=1 
            seq_counter2 = 0
            if seq_counter1 == 3:
                total_seq = 3
                break              # breaks out of the for but total_seq = 3 so in while
        if toss == check2:
            seq_counter1 = 0
            seq_counter2 +=1
            if seq_counter2 == 3:
                total_seq = 3
                break              # breaks out of the for but total_seq = 3 so in while
</code></pre>
</blockquote>
<hr/>
<p>You can simplify your code a <em>lot</em> by simply adding to the list and checking if the <em>last 3 elements are equal</em> instead of checking <em>the whole list</em> every time:</p>
<pre><code>import random

def toss():
    """Return randomly 'heads' or 'tails'."""
    return "heads" if (random.randint(1,2) == 1) else "tails"

# need at least 3 tosses to finish
cointosses = []
for _ in range(3):
    cointosses.append(toss())
    print(cointosses)

# repeat until the set(..) of the last 3 elements contains exactly 1 item 
while not len(set(cointosses[-3:]))==1:
    cointosses.append(toss())
    print(cointosses)

print(f"It took {len(cointosses)} tosses to get 3 equal ones.")
</code></pre>
<p>Output 2 runs:</p>
<pre><code>['tails']
['tails', 'tails']
['tails', 'tails', 'heads']
['tails', 'tails', 'heads', 'heads']
['tails', 'tails', 'heads', 'heads', 'heads']
It took 5 tosses to get 3 equal ones.

['tails']
['tails', 'tails']
['tails', 'tails', 'heads']
['tails', 'tails', 'heads', 'heads']
['tails', 'tails', 'heads', 'heads', 'tails']
['tails', 'tails', 'heads', 'heads', 'tails', 'heads']
['tails', 'tails', 'heads', 'heads', 'tails', 'heads', 'tails']
['tails', 'tails', 'heads', 'heads', 'tails', 'heads', 'tails', 'tails']
['tails', 'tails', 'heads', 'heads', 'tails', 'heads', 'tails', 'tails', 'heads']
['tails', 'tails', 'heads', 'heads', 'tails', 'heads', 'tails', 'tails', 'heads', 'heads']
['tails', 'tails', 'heads', 'heads', ... snipp ..., 'tails', 'heads', 'heads', 'tails']
['tails', 'tails', 'heads', 'heads', ... snipp ..., 'heads', 'heads', 'tails', 'tails']
['tails', 'tails', 'heads', 'heads', ... snipp ..., 'heads', 'tails', 'tails', 'tails']
It took 13 tosses to get 3 equal ones.
</code></pre>
<p>If you dislike <code>set()</code> you could also check: </p>
<pre><code>while not all(i == cointosses[-1] for i in cointosses[-3:-1]):
    # rest identical
</code></pre>
<p>Doku:</p>
<ul>
<li><a href="https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset" rel="nofollow noreferrer">set() and frozenset()</a></li>
<li><a href="https://stackoverflow.com/questions/509211/understanding-pythons-slice-notation">Understanding Python's slice notation</a> </li>
<li><a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">python built in functions</a> - Overview, the alternate approach uses <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer">all()</a> </li>
</ul>
</div>
<div class="post-text" itemprop="text">
<h1>There are a few problems regarding this code:</h1>
<h2>1. This code produces an infinite loop:</h2>
<p>The inner while loop only terminates <strong>if the variable total_seq contains a value greater than 3</strong>. Since the only values that could possibly be assigned to it <strong>are 0 and 3</strong> <em>(according to your code)</em>, this while loop will go on forever.</p>
<pre><code>...
total_seq = 0 #&lt;-----------------------
while total_seq &lt;= 3:
    ...
    for toss in cointosses:
        if toss == check1:
            ...
            if seq_counter1 == 3:
                total_seq = 3 #&lt;-----------------------
                break
        if toss == check2:
            ...
            if seq_counter2 == 3:
                total_seq = 3 #&lt;-----------------------
                break
...
</code></pre>
<h2>2. You only coinflip once at the beginning and that use this result over and over again</h2>
<p>random.randint(...) gives you one value which is stored in the cointosses list <em>(which means: you only flip the coin once)</em>. <strong>The inner for loop</strong> assumes however, that you have a large number of tosses already stored in the list. It only sets total_seq to 3 <strong>if it can find 3 consecutive coinflips</strong>.</p>
<p>Otherwise it will just repeat the inner while loop and do the same thing again without adding new coinflips <em>(outer while is never reached again)</em></p>
<pre><code>tosses = random.randint(1,2)
...
if tosses == 1:
    cointosses.append("heads")
if tosses == 2:
    cointosses.append("tails")
...
    for toss in cointosses:
        ...
            if seq_counter1 == 3:
                total_seq = 3
                break
        ...
            if seq_counter2 == 3:
                total_seq = 3
                break
...
</code></pre>
<h2>3. The sequence counters <strong>seq_counter1 and seq_counter2</strong> will only reset if the previous coinflip had a different result.</h2>
<p>Since you only coinflip once <em>(as discussed in problem 2)</em> the "previous coinflip" is always just the first one you did.
This means that you coinflip once at the beginning and either increment seq_counter1 or seq_counter2 to 3 depending on the result of that first flip.</p>
<pre><code>...
seq_counter1 = 0
seq_counter2 = 0
...
while total_seq &lt; 3:
    ...
        if toss == check1:
            seq_counter1 +=1
            seq_counter2 = 0
            ...
        if toss == check2:
            seq_counter1 = 0
            seq_counter2 +=1
            ...
...
</code></pre>
<h1>Solution</h1>
<p>All three problems can be solved by removing the inner while loop and simply execute its code in the outer one:</p>
<pre><code>import random
cointosses = []
total_count = 0
while total_count &gt;= 0:
    tosses = random.randint(1,2)
    total_count += 1
    if tosses == 1:
        cointosses.append("heads")
    if tosses == 2:
        cointosses.append("tails")
    print(cointosses)
    seq_counter1 = 0
    seq_counter2 = 0
    total_seq = 0
    check1 = "heads"
    check2= "tails"
    for toss in cointosses:
        if toss == check1:
            seq_counter1 +=1
            seq_counter2 = 0
            if seq_counter1 == 3:
                total_seq = 3
                break
        if toss == check2:
            seq_counter1 = 0
            seq_counter2 +=1
            if seq_counter2 == 3:
                total_seq = 3
                break

    if total_seq == 3:
        break
</code></pre>
<p>This works because the condition <strong>total_seq == 3</strong> is already tested by the last if statement in the outer loop.</p>
<h1>Conclusion</h1>
<p>This code however is not verry perfomant since you build a list and iterate over it again and again.
You are iterating over everything every time you append one cointoss. However if you think about it: You only need to check if the newly appended element creates a consecutive row.</p>
<p>If you want to do this right, you should do it with only one loop <em>(no nested loops)</em> :)</p>
</div>
