<div class="post-text" itemprop="text">
<p>Novice programmer here. I'm phrasing this question in terms of Python, but I think it makes sense for any programming language that has the concept of Exception Handling.</p>
<p>Here it is: I'm writing a software for a business client, who will interact with the software by using a GUI.</p>
<p>I'm thinking about putting all of the core business logic in a <code>try</code>/<code>except</code> block in order to catch all exceptions that I haven't planned for (and which I catch and resolve before they bubble up). These could be bugs in other libraries that I'm using, my own bugs, or other unforeseen events. The output of those exceptions I want then to display in a GUI error message.</p>
<p>The reasoning behind this will be that if such an error were to occur once my software is deployed and the client would call me telling me "hey, I got this error message that says X", then I would have at least some hint from X as to what went wrong and could immediately start debugging - rather then the GUI just exiting silently and the client calling me and telling "your app just died".</p>
<p>1) Would this be a good idea? Since this software will be used in a "safe setting" there is no issue of sensitive information leaking into the error message, which then is displayed. But I'm still unsure, of there aren't any other problems I might run into with this approach.</p>
<p>2) If I should go down this route, should I use <code>except BaseException</code> or <code>except Exception</code>?<br/>
Even after consulting <a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy" rel="nofollow noreferrer">Python's exception hierarchy</a> I don't really get when the three additional exceptions that I'd get if I were to use the first option are really thrown. My application won't use the keyboard, so I <em>think</em> I'm safe regarding <code>KeyboardInterrupt</code>, but I'm unsure about the other two,<code>SystemExit</code> and <code>GeneratorExit</code>.</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>Show the error messages in your gui <em>only if the user needs to know</em>, such as when the program cannot recover from an error.</p></li>
<li><p>Use <code>except BaseException</code> to avoid catching exceptions that need to be handled differently. If you need to catch every single type of exception, try to make as many <code>except</code> blocks as possible in order to recover from as many errors as possible.</p></li>
</ol>
</div>
<span class="comment-copy">1. no, do not show unfiltered Exception mesages to users -- You should learn about <a href="https://docs.python.org/3/howto/logging-cookbook.html" rel="nofollow noreferrer">logging</a>. Then you can log the exception with the stack trace in your all-enclosing except. That way, you can look it up in your log and only you get to see the code internals.</span>
<span class="comment-copy">Maybe this would be useful: <a href="https://docs.python.org/3/library/sys.html#sys.excepthook" rel="nofollow noreferrer">docs.python.org/3/library/sys.html#sys.excepthook</a></span>
<span class="comment-copy">@schwobaseggl So you are saying it is better to show the client a generic error message and then generate a file containing the logging output and ask the client to send me that file? (The application is not connected to the internet.)</span>
<span class="comment-copy">@warvariuc I did not knew about that! Thanks!</span>
<span class="comment-copy">No further clarification?...</span>
<span class="comment-copy">Regading 1: Since I only show those exceptions verbatim which I did not catch before they bubble up, I guess I'm already doing what you wrote?        $$$$ Regarding 2: I think you mean <code>except Exception</code> or something higher in the hierarchy?  Since <code>BaseException</code> would not avoid catching exceptions that need to be handled differently, it would catch everything. Or am I not getting something here?</span>
<span class="comment-copy">No further clarification?...</span>
<span class="comment-copy">@l7ll7 by <code>except BaseException</code>, I mean if you have a hierarchy of exceptions you want to catch, <code>BaseException</code> is the base of the hierarchy. You should usually handle each exception individually instead of adding a <code>except Exception</code>.</span>
