<div class="post-text" itemprop="text">
<p>I am working on a project where I have to build SVM classifiers to predict MeSH term assignments based off of the words in an article's title and abstract. We were given gzip files of 1000 PMIDs identifying each article. Below is an example file:</p>
<pre><code>PMID- 22997744
OWN - NLM
STAT- MEDLINE
DCOM- 20121113
LR  - 20120924
IS  - 0042-4676 (Print)
IS  - 0042-4676 (Linking)
IP  - 3
DP  - 2012 May-Jun
TI  - [Value of magnetic resonance imaging in the diagnosis of recurrent colorectal
      cancer].
PG  - 28-33
AB  - To diagnose recurrent colorectal cancer is an urgent problem of oncoproctology.
      Eighty patients with suspected recurrent colon tumor were examined. All the
      patients underwent irrigoscopy, colonoscopy, magnetic resonance imaging of the
      abdomen and small pelvis. The major magnetic resonance symptoms of recurrent
      colon tumors were studied; a differential diagnosis of recurrent processes and
      postoperative changes at the site of intervention was made.
FAU - Dan'ko, N A

MH  - Aged
MH  - Colon/pathology/surgery
MH  - Colorectal Neoplasms/*diagnosis/pathology/surgery
MH  - Diagnosis, Differential
MH  - Female
MH  - Humans
MH  - Magnetic Resonance Imaging/*methods
MH  - Male
MH  - Middle Aged
MH  - Neoplasm Recurrence, Local/*diagnosis
MH  - Postoperative Complications/*diagnosis
MH  - Rectum/pathology/surgery
MH  - Reproducibility of Results
</code></pre>
<p>I am trying to figure out how to create a dictionary that will have:</p>
<pre><code>{PMID: {Title (TI): Title words},
       {Abstract (AB): Abstract words},
       {MeSH (MH): MeSH terms}}.
</code></pre>
<p>Is there an easy way to do this? So far I know the below code gets close but it is not perfect for it.</p>
<pre><code>class Node:
    def __init__(self, indented_line):
        self.children = []
        self.level = len(indented_line) - len(indented_line.lstrip())
        self.text = indented_line.strip()

    def add_children(self, nodes):
        childlevel = nodes[0].level
        while nodes:
            node = nodes.pop(0)
            if node.level == childlevel: # add node as a child
                self.children.append(node)
            elif node.level &gt; childlevel: # add nodes as grandchildren of the last child
                nodes.insert(0,node)
                self.children[-1].add_children(nodes)
            elif node.level &lt;= self.level: # this node is a sibling, no more children
                nodes.insert(0,node)
                return

    def as_dict(self):
        if len(self.children) &gt; 1:
            return {self.text: [node.as_dict() for node in self.children]}
        elif len(self.children) == 1:
            return {self.text: self.children[0].as_dict()}
        else:
            return self.text

# Problem A [0 points]
def read_data(filenames):
    data = None
    # Begin CODE
    data = {}
    contents = []
    for filename in filenames:
        with gzip.open(filename,'rt') as f:
            contents.append(f.read())

    root = Node('root')
    root.add_children([Node(line) for line in contents[0].splitlines() if line.strip()])
    d = root.as_dict()['root']
    print(d[:50])
    # End CODE
    return data
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let's strip down the example to something simpler:</p>
<pre><code>content = """
PMID- 22997744
OWN - NLM
TI  - [Value of magnetic resonance imaging in the diagnosis of recurrent colorectal
      cancer].
PG  - 28-33
AB  - To diagnose recurrent colorectal cancer is an urgent problem of oncoproctology.
      Eighty patients with suspected recurrent colon tumor were examined.
FAU - Dan'ko, N A

MH  - Aged
MH  - Colon/pathology/surgery"""
</code></pre>
<p>You can use <a href="https://docs.python.org/3/howto/regex.html" rel="nofollow noreferrer">regular expressions</a> to match a pattern. Regular expressions are a deep and powerful tool:</p>
<pre><code>&gt;&gt;&gt; match = re.search('^PMID- (.*)$', content, re.MULTILINE)
</code></pre>
<p>The pattern <code>^PMID- (.*)$</code> is matching the start of a line <code>^</code> followed by <code>PMID-</code> then multiple characters <code>.</code>, then the end of the line <code>$</code>. The brackets <code>(.*)</code> mean the result matching inside the brackets will be put in a group. We need to check there was a match:</p>
<pre><code>&gt;&gt;&gt; match is not None
True
</code></pre>
<p>We can query the match:</p>
<pre><code>&gt;&gt;&gt; match.groups()
('22997744',)
</code></pre>
<p>So, we can see there is one group (because we only defined one group in our pattern), and it has matched the PMID: <code>22997744</code>.</p>
<p>We can get at the value by requesting the value of match group 1. Match group 0 is the whole string that matched: <code>PMID- 22997744</code>.</p>
<pre><code>&gt;&gt;&gt; pmid = match.group(1)
&gt;&gt;&gt; pmid
'22997744'
</code></pre>
<p>The pattern for matching across multiple lines with for <code>TI</code> and <code>AB</code> is a lot more difficult. I'm not an expert, maybe someone else will chip in with something better. I would just do a text replacement first, so all the text is on one line. e.g:</p>
<pre><code>&gt;&gt;&gt; text = """TI  - [Value of magnetic resonance imaging in the diagnosis of recurrent colorectal
...       cancer].

&gt;&gt;&gt; print(text)
TI  - [Value of magnetic resonance imaging in the diagnosis of recurrent colorectal
      cancer].

&gt;&gt;&gt; print(text.replace('\n      ', ' '))
TI  - [Value of magnetic resonance imaging in the diagnosis of recurrent colorectal cancer].
</code></pre>
<p>Then we can match <code>TI</code> and <code>AB</code> in a similar manner:</p>
<pre><code>&gt;&gt;&gt; content = content.replace('\n      ', ' ')

&gt;&gt;&gt; match = re.search('^TI  - (.*)$', content, re.MULTILINE)
&gt;&gt;&gt; ti = match.group(1)
&gt;&gt;&gt; ti
'[Value of magnetic resonance imaging in the diagnosis of recurrent colorectal cancer].'

&gt;&gt;&gt; match = re.search('^AB  - (.*)$', content, re.MULTILINE)
&gt;&gt;&gt; ab = match.group(1)
&gt;&gt;&gt; ab
'To diagnose recurrent colorectal cancer is an urgent problem of oncoproctology. Eighty patients with suspected recurrent colon tumor were examined'
</code></pre>
<p>To match <code>MH</code> we want to find all matches. <code>re.search</code> will just find the first match. <code>re.findall</code> will return multiple matches:</p>
<pre><code>&gt;&gt;&gt; mh = re.findall('^MH  - (.*)$', content, re.MULTILINE)
&gt;&gt;&gt; mh
['Aged', 'Colon/pathology/surgery']
</code></pre>
<p>Putting all this together:</p>
<pre><code>data = {}

data[pmid] = {'Title': ti,
              'Abstract': ab,
              'MeSH': mh}
</code></pre>
<p>This gives (using <a href="https://docs.python.org/3/library/pprint.html" rel="nofollow noreferrer"><strong><code>pprint</code></strong></a> to make it look nicer):</p>
<pre><code>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(data)
{'22997744': {'Abstract': 'To diagnose recurrent colorectal cancer is an urgent problem of oncoproctology. Eighty patients with suspected recurrent colon tumor were examined.',
              'MeSH': ['Aged', 'Colon/pathology/surgery'],
              'Title': '[Value of magnetic resonance imaging in the diagnosis of recurrent colorectal cancer].'}}
</code></pre>
</div>
<span class="comment-copy">How do you know it's not perfect? See how to create a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>.</span>
<span class="comment-copy">I ran the code and the output is close, but not what I was hoping. See below:</span>
<span class="comment-copy">['PMID- 22997744', 'OWN - NLM', 'STAT- MEDLINE', 'DCOM- 20121113', 'LR  - 20120924', 'IS  - 0042-4676 (Print)', 'IS  - 0042-4676 (Linking)', 'IP  - 3', 'DP  - 2012 May-Jun', {'TI  - [Value of magnetic resonance imaging in the diagnosis of recurrent colorectal': 'cancer].'}, 'PG  - 28-33', {'AB  - To diagnose recurrent colorectal cancer is an urgent problem of oncoproctology.': ['Eighty patients with suspected rec</span>
<span class="comment-copy">Edit the question. It's not clear what output you get, what you expect, what you don't understand about bridging the gap. There are two parts to your problem, parsing the input and creating the data structure. See if you can separate the problem so you're just focusing on one part. Write a separate example of the problem you are facing. Again, see how to write a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>.</span>
<span class="comment-copy">Welcome to Stack Overflow! Please read the <a href="https://stackoverflow.com/tour">tour</a>, and browse the <a href="https://stackoverflow.com/help">Help center</a> to read up on Stack Overflow's Q&amp;A model. For instance, all relevant information goes into the question and not in comments. You can use the <a href="https://stackoverflow.com/posts/53798457/edit">edit</a> button to do so.</span>
<span class="comment-copy">Thank you! That helps tremendously! It definitely is able to grab all the PMIDs, Titles, and Abstracts well. The only issue that arises is the MeSH terms. The documents we are parsing have 1000 PMIDs, each with different number of MeSH terms. So, finding them all just creates a list of all terms in document not per PMID.</span>
<span class="comment-copy">@MichaelMartin I thought there was one PMID per file and you were given thousands of files. The example you gave didn't have multiple PMIDs.</span>
<span class="comment-copy">Sorry, I could not post the whole file. It is gigantic. The file has 1000 PMIDs in it, each with all the features above. PMID, Title, and Abstract that you implemented work perfectly. For Mh, I think what you suggested could work if you search between sub-strings in the file?</span>
<span class="comment-copy">You don't have to post the whole file, just the essential minimum which would still inspire the correct solution. What are the divisions between each section? How can we determine where to break to the next PMID... Actually that's probably it. We can <a href="https://docs.python.org/3/library/re.html#re.split" rel="nofollow noreferrer"><b><code>re.split</code></b></a> the content based on <code>^PMID</code>. I'll have a think and get back to you.</span>
