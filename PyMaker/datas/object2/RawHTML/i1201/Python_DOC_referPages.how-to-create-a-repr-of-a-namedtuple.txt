<div class="post-text" itemprop="text">
<p>How do I create a special method <code>__repr__</code> where I can print, for example, <code>'6 of spades'</code> or <code>'Q of diamonds'</code>?</p>
<p>How do I access the data from the <code>namedtuple</code>, keeping in mind that I have a <code>list</code> of <code>namedtuple</code>s in <code>self._cards</code>?</p>
<pre><code>import collections

cards = collections.namedtuple('Card', ['rank', 'suit'])

class Deck:
    ranks = [str(n) for n in range (2,11)] + list('JQKA')
    suits = 'spades diamonds hearts clubs'.split()

    def __init__(self):
        self._cards = [cards(rank, suit) for suit in self.suits for rank in self.ranks]

    def __len__(self):
        return len(self._cards)

    def __getitem__(self, item):
        return self._cards[item]

    def __repr__(self):
        return '%s of %s' % ()  # &lt;-- don't know how to assign the string

b = ()
for i in b:
    print(i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It seems like your issue right now is that you are trying to make the <code>__repr__</code> method inside of your <code>Deck</code> class. That method will only get called when you are trying to print <code>Deck</code> objects, however it seems like you are trying to print a message for a single Card instead. You could solve this by making a simple <code>Card</code> class with suit and rank as class variables, and storing a list of <code>Card</code> objects in your deck. This way you could write a <code>__repr__</code> method for the card class itself, and reference the card's suit and rank directly. </p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/typing.html#typing.NamedTuple" rel="nofollow noreferrer"><code>typing.NamedTuple</code></a> instead, which allows you to define methods normally:</p>
<pre><code>from typing import NamedTuple

class Card(NamedTuple):
    rank: str
    suit: str
    def __repr__(self):
        return "{} of {}".format(self.rank, self.suit)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It would be clearer if you renamed <code>cards</code> to <code>Card</code>, since that's the name you assigned to that class:</p>
<pre><code>Card = collections.namedtuple('Card', ['rank', 'suit'])
</code></pre>
<p>You can extend a <code>namedtuple</code> just like any other class, including to give it <code>__repr__</code> method. You can even reuse the class name, since a <code>class</code> statement is a type of assignment:</p>
<pre><code>class Card(Card):
    def __repr__(self):
        return f'{self.rank} of {self.suit}'
</code></pre>
<p>A more compact version would be</p>
<pre><code>class Card(collections.namedtuple('Card', ['rank', 'suit'])):
    def __repr__(self):
        return f'{self.rank} of {self.suit}'
</code></pre>
</div>
