<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/16010992/how-to-use-directory-separator-in-both-linux-and-windows-in-python">How to use “/” (directory separator) in both Linux and Windows in Python?</a>
<span class="question-originals-answer-count">
                    9 answers
                </span>
</li>
</ul>
</div>
<p>Recently I had some trouble writing code in Ubuntu and make it work in Windows.</p>
<p>Code on both platforms:</p>
<p><a href="https://i.stack.imgur.com/r85P0.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/r85P0.png"/></a></p>
<p>Output Ubuntu (that's what I want):</p>
<p><a href="https://i.stack.imgur.com/yWKS9.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/yWKS9.png"/></a></p>
<p>Output Windows:</p>
<p><a href="https://i.stack.imgur.com/hveWM.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/hveWM.png"/></a></p>
<p>As you can see, split on windows adds a <code>'/'</code> instead of splitting the list by <code>'/'</code>. Is the <code>list.split()</code> not cross platform?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>os.sep</code></p>
<p><strong>Ex:</strong></p>
<pre><code>import os

importpath = __file__
print(importpath.split(os.sep))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A more "universal" way to do it is by using <code>os.path.split()</code>. This splits the path at the last separator. The first part must be treated iteratively or recursively.</p>
<p>Under Windows, think of splitting the drive letter as well.</p>
<p>Something like</p>
<pre><code>drv, path = os.path.splitdrive(fullpath)
spl = []
while path:
    path, lastpart = os.path.split(path)
    spl.append(lastpart)
spl.append(drv) # as needed
spl.reverse()
</code></pre>
<p>should do it, but I don't have Windows at hand and cannot test it.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to be super safe, you should use repeatedly <code>os.path.split</code>, or test for both <code>os.sep</code> and <code>os.altsep</code> as separator.</p>
<p><code>__file__</code> will always use <code>os.sep</code>, but when you get a path from other code or by direct input from a user, chances are that <code>os.altsep</code> (<code>'/'</code> on Windows) is used.</p>
<p>Example on Windows:</p>
<pre><code>&gt;&gt;&gt; path = os.path.join('c:\\a', 'c/d')
&gt;&gt;&gt; print(path)
'c:\\a\\c/d'
&gt;&gt;&gt; pathsep = re.compile(r'\\|/')
&gt;&gt;&gt; pathsep.split(path)
['c:', 'a', 'b', 'c']
</code></pre>
<p>Alternatively:</p>
<pre><code> def safe_split(path):
    res = []
    while True:
        path, tail = os.path.split(path)
        if len(tail) == 0:
            break
        res.append(tail)
    res.append(path)           # do not forget the initial segment
    res.reverse()
    return res
</code></pre>
<p>and</p>
<pre><code>&gt;&gt;&gt; safe_split('c:\\a\\c/d')
['c:\\', 'a', 'c', 'd']
</code></pre>
</div>
<span class="comment-copy"><code>/</code> and `\` are two different characters</span>
<span class="comment-copy">Is there a simpler way to solve this other than checking for the OS in an if-statement?</span>
<span class="comment-copy">What makes you think <code>list.split()</code> s the problem? What should it do in your opinion if there are no <code>/</code>s ion the string, but only ``s?</span>
<span class="comment-copy">please <a href="https://meta.stackoverflow.com/a/285557/479251">Do not post image of code</a></span>
<span class="comment-copy">Kind of right, but that doesn't include the case where a path under windows is separated by a <code>/</code>, which is valid too.</span>
<span class="comment-copy">This works in my case. Thank you. Could you elaborate how <code>os.sep</code> works exactly? How does it recognize by which characters it has to seperate?</span>
<span class="comment-copy">Have a look at the documentation of <a href="https://docs.python.org/3/library/os.html#os.sep" rel="nofollow noreferrer"><code>os.sep</code></a>.</span>
<span class="comment-copy">Note that it also reads "Note that knowing this is not sufficient to be able to parse or concatenate pathnames — use <code>os.path.split()</code> and <code>os.path.join()</code> — but it is occasionally useful."</span>
