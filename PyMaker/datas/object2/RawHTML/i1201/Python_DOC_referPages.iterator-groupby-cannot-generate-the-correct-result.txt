<div class="post-text" itemprop="text">
<p>Code:</p>
<pre><code>import itertools
first_letter = lambda x: x[0]
names = ['Alan', 'Adam', 'Wes', 'Albert', 'Steven']
for letter, name in itertools.groupby(names, first_letter):
    print(letter, list(name))
</code></pre>
<p>Output:</p>
<pre><code>A ['Alan', 'Adam']
W ['Wes']
A ['Albert']
S ['Steven']
</code></pre>
<p>I want to group by the first element, but it seems not work well, what's wrong here?</p>
</div>
<div class="post-text" itemprop="text">
<p>As you would expect form any function in <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code></a>, <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>groupby</code></a> operates on sequences of elements that share a common key. You have to remember that an iterator can be any source of sequential data, possibly one that doesn't store is own elements as a list does.</p>
<p>What this means is that if the data is not already grouped within the iterator, <code>groupby</code> won't work the way you expect.  Put it another way, <code>groupby</code> starts another group whenever the key changes, regardless of whether the key has already appeared in the sequence or not.</p>
<p>Probably the easiest way to pre-group the data in your case is to sort it. Lists can be sorted in-place:</p>
<pre>
names=['Alan','Adam','Wes','Albert','Steven']
<b>names.sort()</b>
for letter, name in itertools.groupby(names, first_letter):
    print( letter, list(name))
</pre>
<p>A similar result could be obtained by distributing your list into a dictionary. I use <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a> below because it makes adding new elements easier. You could use a regular dictionary just as easily:</p>
<pre><code>grouped = collections.defaultdict(list)
for name in names:
    grouped[name[0]].append(name)

for letter, group in grouped.items():
    print(letter, group)
</code></pre>
<p>In either case, the point is that you can't expect <code>groupby</code> to do exactly what you want with the order of elements in your raw data.</p>
</div>
<span class="comment-copy">The input is not sorted, iterators always process sequentially</span>
<span class="comment-copy">what do you mean? the input has to be well sorted? but I just want to groupby</span>
<span class="comment-copy">I have hopefully answered your question.</span>
