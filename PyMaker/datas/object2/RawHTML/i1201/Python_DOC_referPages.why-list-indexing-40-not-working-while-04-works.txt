<div class="post-text" itemprop="text">
<p>If negative list indexing is starting from the end the list and let's say we have:</p>
<pre><code>l = [1,2,3,4,5]
</code></pre>
<p>and <code>l[0:3]</code> and <code>l[:3]</code> returns same values while <code>l[-3:0]</code> returns <em>an empty list</em> and <code>l[-3:]</code> returns <code>[3,4,5]</code></p>
<p>What is the logic behind not allowing <code>list[-x:0]</code> to return the list?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>l[-3:0]</code> tries to slice from 3 from behind towards 0 - that is the same as <code>l[2:0]</code> .. that slices nothing because the first value &gt; second value.</p>
<p><code>l[-3:]</code> can be read as <code>l[-3:len(l)]</code> - so <code>l[2:5]</code> which returns the slice.</p>
<p>You would need <code>l[-3:0:-1]</code> for that to work - but thats mind boggling slicing which I try to avoid. ( <code>print( [1,2,3,4,5][-3:0:-1]</code> --&gt; <code>[3, 2]</code> ) because it also reverses the slice "orientation" to backwards instead of forwards</p>
<p><code>l[-3:]</code> slices from 3 from behind till the end.</p>
</div>
<div class="post-text" itemprop="text">
<p>The full notation of slice in Python is the following:</p>
<pre><code>s[start:end:step]
</code></pre>
<p>That being said it provides <em>useful defaults</em> for the values, as per the <a href="https://docs.python.org/3/tutorial/introduction.html" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p>Slice indices have useful defaults; an omitted first index defaults to
  zero, an omitted second index defaults to the size of the string being
  sliced.</p>
</blockquote>
<p>So when you do something like:</p>
<pre><code>s[1:]
</code></pre>
<p>under the hood this is done:</p>
<pre><code>s[1:len(s)]
</code></pre>
<p>Note that in both cases <em>step</em> defaults to <code>1</code>. In most languages when you want to access the last element of a list for example you do something like:</p>
<pre><code>s[len(s) - 1]
</code></pre>
<p>Python negative indexing is a sort of <em>syntactic sugar</em> on that notation so :</p>
<pre><code>l[-1] = l[len(l) - 1]
l[-2] = l[len(l) - 2]
...
</code></pre>
<p>Then when you do:</p>
<pre><code>l[-3:]
</code></pre>
<p>this is done:</p>
<pre><code>l[len(l)-3:len(l)]
</code></pre>
<p>So, instead of <code>0</code> you should use <code>len(l)</code> as the last index:</p>
<pre><code>l = [1, 2, 3, 4, 5]
print(l[-3:len(l)])
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[3, 4, 5]
</code></pre>
<p>Note that <code>l[-3:0]</code> returns the empty list because <code>len(l) - 3 &gt; 0</code>, i.e. the first index is greater than the second and <em>step</em> is <code>1</code>.</p>
<p><strong>Further</strong></p>
<ol>
<li><a href="https://stackoverflow.com/questions/509211/understanding-pythons-slice-notation">Understanding Python's slice notation</a></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Well <code>0</code> in front works, but at last... won't work, same with this:</p>
<pre><code>&gt;&gt;&gt; l=[1,2,3,4,5]
&gt;&gt;&gt; l[2:0]
[]
&gt;&gt;&gt; 
</code></pre>
<p>because python is thinking zero at the end...</p>
<p>So that's virtually equivalent to:</p>
<pre><code>&gt;&gt;&gt; l=[1,2,3,4,5]
&gt;&gt;&gt; l[:0]
[]
&gt;&gt;&gt; 
</code></pre>
<p>since of course there is nothing before first element, if there was, that thing wouldn't be first element, it would be second.</p>
</div>
<div class="post-text" itemprop="text">
<p>Negative indexes operate from the end of the list.
Say if you want to get the last 3 items, you could do:</p>
<pre><code># Reversing and restoring the order
my_list = [1,2,3,4,5,6]
print(reversed(reversed(my_list)[:3]))

# Subtracting from the size
size = len(my_list)
print(my_list[size-3:])
</code></pre>
<p>But instead you can type</p>
<pre><code>my_list[-3:]
</code></pre>
<p>Which in words would state <em>get me the slice of the list starting from the third item at the end of the list</em></p>
<p>So you have to be aware of what your asking for.</p>
<pre><code># Slice from the x'th element at the end till the end of the list
my_list[-x:]

# Slice from the x'th element at the end till the y'th element at the end of the list
my_list[-x:-y]

# Slice from the x'th element at the end till the y'th element from the start of the list. 
# Only valid if len(my_list) - y &lt; x and y &gt; 0
my_list[-x:y] 
</code></pre>
</div>
<span class="comment-copy">Index <code>0</code> is the beginning of the sequnce. As the <code>end</code> it will always return an empty sequence.</span>
<span class="comment-copy">I do understand that. But why it is not changing in the negative indexing? Then that means indexes are assigned when a list is created and never change after that? Logically 0 is right after -1 and it should have returned the hole list</span>
<span class="comment-copy">“[1,2,3,4,5][-3:] returns [2,3,4,5]” — Does it? Try again.</span>
<span class="comment-copy">Why did you role back a correction in your punctuation?</span>
<span class="comment-copy">@ctrl-alt-delor should be that that the output is <code>[3,4,5]</code> right? :-)</span>
<span class="comment-copy">@I'd mention also <code>l[-3::-1]</code> that <i>possibly</i> is what the OP was really asking for...</span>
<span class="comment-copy">but &gt;&gt;&gt; l[-3:-1] does work and return [3, 4] and what you are writing is totally different thing</span>
<span class="comment-copy">@Rarblack But wait... <code>l[-1]</code> is <code>5</code>, and please don't down-vote answers you get without knowing the full thing!</span>
