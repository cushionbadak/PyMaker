<div class="post-text" itemprop="text">
<p>I am new to python and I have an assignment, I need to write a recursive function that takes two arguments (Weights, W), weights is the list of weights of baggage and W is the maximal weight a student can take, in python 2.7 that calculates the maximal amount of baggage a student can take and does not pass the maximal limit (W), for example if:</p>
<pre><code>&gt;&gt;&gt; calc_max_baggage([5], 0)
&gt;&gt;&gt; 0
&gt;&gt;&gt; calc_max_baggage ([1, 1, 1], 5)
&gt;&gt;&gt; 3
&gt;&gt;&gt; calc_max_baggage([4, 2, 3, 1], 5)
&gt;&gt;&gt; 2
</code></pre>
<p>This is my code but it returns error:</p>
<pre><code>def calc_max_baggage (weights, W):
weights = []
res = []
W = int
def number_of_index(weights, W, i): 
    if max(weights) &gt; W:
        return res
    else:
        count += i in weights

return calc_max_baggage()
</code></pre>
<p>Error message:</p>
<blockquote>
<p>Traceback (most recent call last):
    File "", line 1, in 
      calc_max_baggage ([5], 0)
    File "C:/Users/user/Desktop/לימודים/פייתון Python/עבודות בית/ex6/test_ex6.py", line 12, in calc_max_baggage
      return calc_max_baggage()
  TypeError: calc_max_baggage() takes exactly 2 arguments (0 given)</p>
</blockquote>
<p>I am totally not sure about my code I think its totally wrong</p>
<p>Weights is the list of weights and W is the maximal weight.<br/>
<strong>Given this, I want to know how many items from the weights[] list can be brought on the plane.</strong><br/>
<strong>*I can't change the funtion <code>calc_max_baggage(weights, W)</code> that takes two arguments.</strong></p>
<p>W can also be negative, in that case the function returns 0.</p>
<p><strong>IT MUST BE SOLVED WITH RECURSION ONLY AND WITHOUT LOOPS</strong></p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>We can slightly modify the <code>powerset</code> recipe from the <a href="https://docs.python.org/3/library/itertools.html#recipes" rel="nofollow noreferrer">itertools doumentation</a> to not use an explicit loop:</p>
<pre><code>from itertools import chain, combinations

def powerset(iterable):
    "powerset([1,2,3]) --&gt; () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
    s = list(iterable)
    return chain.from_iterable(map(lambda r: combinations(s, r), range(len(s)+1)))
</code></pre>
<p>For each combination of luggage, we can filter out all of those that exceed the maximum weight, then take the one with the most items:</p>
<pre><code>def calc_max_baggage(weights, W):
    weights = powerset(weights)
    filtered = filter(lambda items: sum(items) &lt;= W, weights)
    filtered = chain(filtered, ((),)) 
    return max(filtered, key=len)
</code></pre>
<p><code>filtered = chain(filtered, ((),))</code> is so if <code>W</code> is negative we return no bags anyways, even though technically the sum of their weights is greater than <code>W</code>.</p>
<p>This will return the actual set of items, rather than its length, but you can easily convert it.</p>
<pre><code>&gt;&gt;&gt; calc_max_baggage([4, 2, 3, 1], 5)
(4, 1)
&gt;&gt;&gt; calc_max_baggage ([1, 1, 1], 5)
(1, 1, 1)
&gt;&gt;&gt; calc_max_baggage([5], 0)
()
</code></pre>
<p>If you need a recursive component, you can define <code>powerset</code> recursively, though it's markedly less efficient </p>
<pre><code>def powerset(seq):
    if not seq:
        return ((),)
    else:
        head, *tail = seq
        tail_pow = powerset(tail)
        with_head = tuple(map(lambda t: (head,) + t, tail_pow))
        return with_head + tail_pow
</code></pre>
</div>
<span class="comment-copy">What have <b>you</b> tried so far?  Please post your code.</span>
<span class="comment-copy">I edited the post above</span>
<span class="comment-copy">You need to call the function with the two arguments.</span>
<span class="comment-copy">Well your answer is correct but I must use recursion to solve the question and without using any loops.</span>
<span class="comment-copy">This code doesn't use any (explicit) loops.  There's probably a recursive way of defining <code>powerset</code>, but I'm not sure off the top of my head how we would do it.</span>
<span class="comment-copy">@Thaa'erSawaid See my edit.  You may want to read your assignment closely before submitting this.  I'm making liberal use of <code>map</code> to get around the "no loops" requirement.</span>
