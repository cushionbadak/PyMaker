<div class="post-text" itemprop="text">
<p>This is possibly a much broader question than my use case presents.</p>
<p>I am using Beautifulsoup to extract data from html documents.</p>
<p>For those unfamilar with Beautifulsoup, it's essentially parsing an html string and using class methods to search and isolate certain data, given explicit instruction.</p>
<p>Step One:
<code>soup = Beautifulsoup(html_string)</code></p>
<p>Step Two:
<code>title= soup.find('h1').get_text()</code></p>
<p>Step one parses the document, step two provides instruction on which data to extract and, in the above case using the <code>get_text()</code>, also some formatting.</p>
<p>I commonly have a list of such actions where data may or may not be present, and either condition is acceptable. For example, on a series of profile pages, some users may or may not have <code>favorite_color</code>, <code>favorite_movie</code>, or <code>etc</code> entered. If that data is there I want it but, if not, a <code>None</code> value is fine.</p>
<p>I typically approach these cases as such:</p>
<pre><code>soup = Beautifulsoup(html)

try:
    data_one = soup.find('div', class_='data_one').get_text()
except AttributeError as e:
    data_one = None

try:
    data_two= soup.find('div', class_='data_two').get_text()
except AttributeError as e:
    data_two= None

try:
    data_three = soup.find('div', class_='data_three ').get_text()
except AttributeError as e:
    data_three = None
</code></pre>
<p>As one might imagine, my files quickly become large and difficult to navigate.</p>
<p>What's the most <em>DRY</em> way to approach this?</p>
<p>NOTE: In my use case, <em>every</em> <code>try:except</code> block would address a single exception class, <code>AttributeError</code> which is representative of data missing from the html.</p>
<p>NOTE: I'm looking for something that wouldn't restrict the type of extraction method. For example, this is one I'd like to use as well:</p>
<pre><code>try:
    list_items = [x.get_text() for x in soup.find('div', class_='first').find_all('li', class_='first-child') and x.find('a', class_='conditional-link') is not None]
except AttributeError as e:
    list_items = None      
</code></pre>
<p><strong>UPDATE 12/30/2018</strong>
I still feel that the accepted answer is the most correct approach. I also feel that it's a bit abstract compared to other approaches. I wanted to include an alternative approach here. First, let me say that one of the core issues this question is trying to address is further accessing data with Beautifulsoup when their might not be data. For example, the <code>get_text()</code> method raises an <code>AttributeError</code> on elements that are of <code>NoneType</code> class. </p>
<p>This is an alternative approach where such further specification is needed to extract data from a list of elements that may, or may not, include <code>NoneType</code> elements:</p>
<pre><code># Get Initial Elements (NoneType assigned if Error)
data_one = soup.find('element', class_='e_one class_name')
data_two = soup.find('elemment', value='1')
data_three = soup.find('element', class_='parent').find('div', class_='name')

# Further parsing/extraction if element is not NoneType Object
data = [x.get_text(strip=True) if x is not None for x in [data_one, data_two, data_three]]
</code></pre>
<p>This is nothing revolutionary but does seem to provide a very fluid way of consolidating <em>some</em> parts of code.</p>
</div>
<div class="post-text" itemprop="text">
<p>Or, you could just use <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow noreferrer"><code>getattr()</code></a> built-in function in an <a href="https://docs.python.org/3/glossary.html#term-lbyl" rel="nofollow noreferrer">LBYL</a> manner:</p>
<pre><code>data_one = getattr(soup.find('div', class_='data_one'), 'text', None)
data_two = getattr(soup.find('div', class_='data_two'), 'text', None)
data_three = getattr(soup.find('div', class_='data_three'), 'text', None)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://refactoring.com/catalog/extractFunction.html" rel="nofollow noreferrer">Extract a method</a>:</p>
<pre><code>def get_text_or_none(element)
    try:
        return element.get_text()
    except AttributeError:
        return None

data_one = get_text_or_none(soup.find('div', class_='data_one'))
data_two = get_text_or_none(soup.find('div', class_='data_two'))
data_three = get_text_or_none(soup.find('div', class_='data_three'))
</code></pre>
<p>This is the <a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow noreferrer">EAFP</a> approach.</p>
<p><a href="https://docs.python.org/3/glossary.html#term-lbyl" rel="nofollow noreferrer">LBYL</a> people would do it this way:</p>
<pre><code>return element.get_text() if element else None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A more specific to your situation way of handling it could be to loop over the list of class values:</p>
<pre><code>classes = ['data_one', 'data_two', 'data_three']

result = {}
for class_value in classes:
    try:
        result[class_value] = soup.find('div', class_=class_value).get_text()
    except AttributeError:
        result[class_value]

print(result)
</code></pre>
</div>
<span class="comment-copy">related: <a href="https://stackoverflow.com/questions/28876799/refactor-long-try-except-chain" title="refactor long try except chain">stackoverflow.com/questions/28876799/â€¦</a></span>
<span class="comment-copy">Why are you using <code>try</code> <code>except</code> blocks? the <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#find" rel="nofollow noreferrer">find</a> method returns none if nothing is found.</span>
<span class="comment-copy">@Jaba but, <code>find()</code> would return <code>None</code> and <code>None</code> does not have the <code>get_text()</code> method.</span>
<span class="comment-copy">Ahh oops, dumb question</span>
<span class="comment-copy">I think this approach accomplishes what I want. I'm not familiar enough with the <code>getattr</code> approach to implement immediately though. I think a helper function using a try:except block to only allow specific exceptions is most appropriate for my case. Thanks for the help, this definitely put me on the right track!</span>
<span class="comment-copy">I'm looking for something a bit more flexible. Question is updated.</span>
<span class="comment-copy">That's along the lines of what I'm trying to achieve, but the <code>soup.find('div', class_=class_value).get_text()</code> is a bit too constrictive. For example, what if I had <code>soup.find('div', class_=class_value).find('div', class_='subclass-value').get_text()</code></span>
<span class="comment-copy">@theeastcoastwest maybe you could look into <code>select_one</code> then: <code>soup.select_one(".class1 .subclass-value").get_text()</code>? Could be more flexible and be an alternative to multiple chained find calls.</span>
