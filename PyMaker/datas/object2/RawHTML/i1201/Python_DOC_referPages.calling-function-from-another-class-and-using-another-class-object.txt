<div class="post-text" itemprop="text">
<p>I have two classes. One class creates model(Say class A) (This is time taking function, so to remove this time delay I need to use GraphPipe client server library).</p>
<p>Another class(Say Class B) is from Graphpipe, this class receive request from client, use model generated to class 1 and give response back to client. </p>
<p>I am calling Class A in main function and get model trained. <code>obj</code> is it's object.</p>
<p><strong>Currently problem is, <code>classify_demo</code> is in <code>MyDict</code> so I am not able to call it from <code>GPHandler</code> class.</strong> </p>
<p><strong>Can anyone help me to manage this situation in standard programming way?</strong></p>
<p>Let me know if any thing is unclear or question for me.</p>
<p>Here is the code - </p>
<pre><code>class MyDict(dict):   
    def __init__(self):
        self.train()    

    def train(self):

        retrain = False   
        # Load traind data
        # if not retrain and os.path.isfile(CDATA_FILE):
        print("Loading pickle")
        pos, neg, totals = pickle.load(open(CDATA_FILE,'rb'),encoding='latin1')
        print("Pickle loaded    ")
        return    

    def classify_demo(self, input_data):
        final_result = {}
        data = json.loads(input_data)
        text = data["text"]
        try:
            words = set(word for word in self.negate_sequence(text) if word in pos or word in neg)
            flag, confidence = self.classify2(text)
            if confidence &gt; 0.5:
                sentiment = "Positive" if flag else "Negative"
            else:
                sentiment = "Neutral"
            conf = "%.4f" % self.percentage_confidence(confidence)
            final_result['sentiment'] = sentiment
            final_result['confidence'] = conf

            return json.dumps(final_result)
        except:
            import traceback
            # print traceback.format_exc()
            print("There is some error, please retry with different input")

class GPHandler(server.BaseHTTPRequestHandler):
    def do_POST(self):
        inp = self.rfile.read(int(self.headers['Content-Length']))

        obj = convert.deserialize_request(inp).input_tensors
        d = obj[0].tostring()
        text  = str(d)
        query = {'text':text}
        result = obj.classify_demo(json.dumps(query))
        print(result)
        outp = convert.serialize_infer_response(obj)
        self.send_response(200)
        self.end_headers()
        self.wfile.write(outp)

if __name__ == '__main__':    
    parser = argparse.ArgumentParser()
    parser.add_argument("--port", default=10000, help="TCP port", type=int)
    args = parser.parse_args()
    server_address = ('', args.port) 
    obj = MyDict()
    httpd = server.HTTPServer(server_address, GPHandler)
    print('Starting graphpipe identity server on port %d...' % args.port)

    while(True):
        httpd.handle_request()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can define <code>classify_demo</code> as a static method, using the <a href="https://docs.python.org/3/library/functions.html#staticmethod" rel="nofollow noreferrer"><code>@staticmethod</code> decorator</a>.</p>
<p>Therefore, in <code>GPGHandler</code> class, you can call directly <code>MyDict.classify_demo(json.dumps(query))</code>.</p>
<p>Unfortunately I do not find your question very clear. Perhaps you should clarify a little bit.</p>
</div>
