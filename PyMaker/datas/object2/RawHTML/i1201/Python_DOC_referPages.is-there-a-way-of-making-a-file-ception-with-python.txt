<div class="post-text" itemprop="text">
<p>i wanted to make a python file that makes a copy of itself, then executes it and closes itself, then the copy makes another copy of itself and so on...</p>
<p>i am not asking for people to write my code and this could be taken as just a fun challenge, but i want to learn more about this stuff and help is appreciated.</p>
<p>i have already played around with it but can't wrap my mind around it,
I've already tried making a py file and just pasting a copy of the file itself in it two different ways i could think of but it would just go on forever.</p>
<pre><code>#i use this piece of code to easily execute the py file using os
os.startfile("file.py")
#and to make new py file i just use open()
file = open("file.py","w")
file.write("""hello world
you can use 3 quote marks to write over multiple lines""")
</code></pre>
<p>i expect that when you run the program it makes a copy of itself, runs it, and closes itself, and the newly ran program loops over.
what actually happenes is that either I'm writing code forever or,
when i embed the code it pastes in the copy of itself into what it copies to the copy file,
it rightfully says it doesn't know what that code is because it's being written.
it's all really confusing and this is difficult to explain and I'm sorry
it's midnight atm and I'm tired.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't have enough rep to reply to @Prune:</p>
<p><code>os.startfile(file)</code> only works on Windows, and is <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">replaced by</a> <code>subprocess.call</code></p>
<p><code>shutil.copy2(src, dst)</code> works on both Windows and Linux.</p>
<p>Try this solution as well:</p>
<pre><code>import shutil
import subprocess
old_file = __file__
new_file = generate_unique_file_name()
shutil.copy2(old_file, new_file)      # works for both Windows and Linux
subprocess.call('python {}'.format(new_file), shell=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're close; you have things in the wrong order.  Create the new file, <em>then</em> execute it.</p>
<pre><code>import os
old_file = __file__
new_file = generate_unique_file_name()
os.system('cp ' + old_file + ' ' + new_file)   #UNIX syntax; for Windows, use "copy"
os.startfile(new_file)
</code></pre>
<p>You'll have to choose &amp; code your preferred method for creating a unique file name.  You might want to use a time-stamp as part of the name.</p>
<p>You might also want to delete this file before you exit; otherwise, you'll eventually fill your disk with these files.</p>
</div>
<span class="comment-copy">Why do you need to duplicate the script before running it? This sounds like a good way to use all your (or someone else's!) memory.</span>
<span class="comment-copy">oh no i just wanted to show how i opened it, it was really late and i was tired i don't know why i put it there. also thanks for the great advice</span>
