<div class="post-text" itemprop="text">
<h1>Information collected from the docs</h1>
<p>Concerning <a href="https://docs.python.org/3/reference/executionmodel.html#resolution-of-names" rel="nofollow noreferrer">name resolution</a> the documentation is not perfectly clear. It uses the terms <em>scope</em> and <em>namespace</em> but is not precise about how they come into effect and when exactly a <code>NameError</code> is raised:</p>
<blockquote>
<p>When a name is used in a code block, it is resolved using the nearest enclosing scope. The set of all such scopes visible to a code block is called the block’s environment.</p>
<p>When a name is not found at all, a <code>NameError</code> exception is raised.</p>
</blockquote>
<p>This however doesn't explain where exactly the name is searched for. Concerning namespaces we get the following information:</p>
<blockquote>
<p>Names are resolved in the top-level namespace by searching the global namespace, i.e. the namespace of the module containing the code block, [...]</p>
</blockquote>
<p>And further, regarding <code>__main__</code>:</p>
<blockquote>
<p>The namespace for a module is automatically created the first time a module is imported. The main module for a script is always called <code>__main__</code>.</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/__main__.html#module-__main__" rel="nofollow noreferrer">This part of the docs</a> further states that</p>
<blockquote>
<p><code>'__main__'</code> is the name of the scope in which top-level code executes.</p>
</blockquote>
<h1>Relevant code</h1>
<p>Combining the above statements, I suppose that whenever a name is to be resolved in the <em>"top-level script environment"</em> (<em>"top-level namespace"</em>) this happens happens by checking <code>sys.modules['__main__']</code> (similar to how attribute access for modules works and how it can modified, as pointed out by <a href="https://www.python.org/dev/peps/pep-0562/" rel="nofollow noreferrer">PEP 562</a>). However the following snippet indicates that this is not the case:</p>
<pre><code>import sys

class Wrapper:
    def __init__(self):
        self.main = sys.modules['__main__']

    def __getattr__(self, name):
        try:
            return getattr(self.main, name)
        except AttributeError:
            return 'Fallback for "{}"'.format(name)

sys.modules['__main__'] = Wrapper()
print(undefined)
</code></pre>
<p>which raises <code>NameError: name 'undefined' is not defined</code>.</p>
<p>On the other hand we can add names by modifying <code>sys.modules['__main__'].__dict__</code> or using <code>setattr</code>:</p>
<pre><code>import sys

# Either ...
sys.modules['__main__'].__dict__['undefined'] = 'not anymore'
# Or ...
setattr(sys.modules['__main__'], 'undefined', 'not anymore')

print(undefined)  # Works.
</code></pre>
<p>So I suspected that maybe it's the module's <code>__dict__</code> attribute (or equivalently <code>__builtins__.globals</code>) which is checked directly, sidestepping <code>getattr</code> on the module object. Extending the above example however shows that this is not the case:</p>
<pre><code>import sys

class Wrapper:
    def __init__(self):
        self.main = sys.modules['__main__']

    def __getattr__(self, name):
        try:
            return getattr(self.main, name)
        except AttributeError:
            return 'Fallback for "{}"'.format(name)

    @property
    def __dict__(self):
        class D:
            def __contains__(*args):
                return True

            def __getitem__(__, item):
                return getattr(self, item)

        return D()

sys.modules['__main__'] = Wrapper()
sys.modules['builtins'].globals = lambda: sys.modules['__main__'].__dict__
print(globals()['undefined'])  # Works.
print(undefined)               # Raises NameError.
</code></pre>
<h1>Questions</h1>
<ol>
<li>What is the exact definition of <em>scopes</em> and <em>namespaces</em>?</li>
<li>How are names exactly resolved (what steps are taken and which resources are checked in order to determine if a name exists)?</li>
<li>In what way does name resolution involve scopes and namespaces?</li>
<li>Why does the above example using <code>Wrapper</code> fail (while it does work on "general" module attribute access, as per <a href="https://www.python.org/dev/peps/pep-0562/" rel="nofollow noreferrer">PEP 562</a>)?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Your's is a very interesting question, since I don't have a clear answer let's run some experiments.</p>
<p>First let's change your code a bit:</p>
<pre><code># file main.py
import sys
print(sys.modules['__main__'])
class Wrapper:
    def __init__(self):
        self.main = sys.modules['__main__']

    def __getattr__(self, name):
        try:
            return getattr(self.main, name)
        except AttributeError:
            return 'Fallback for "{}"'.format(name)

sys.modules['__main__'] = Wrapper()
print(sys.modules['__main__'])
print(undefined)
</code></pre>
<p>It will print</p>
<pre><code>&lt;module '__main__' from 'main.py'&gt;
&lt;__main__.Wrapper object at 0x000001F87601BE48&gt;
Traceback (most recent call last):
  File "main.py", line 15, in &lt;module&gt;
    print(undefined)
NameError: name 'undefined' is not defined
</code></pre>
<p>So we still have <code>__main__</code> as a module here, and <code>Wrapper</code> class is inside it.</p>
<p>Docs says:</p>
<blockquote>
<blockquote>
<p>A module’s <code>__name__</code> is set equal to <code>__main__</code> when read from standard input, a script, or from an interactive prompt.</p>
</blockquote>
</blockquote>
<p>So that means our <code>sys.modules['__main__'] = Wrapper()</code> line is meant to subsitute an already loaded module, with something from inside that module (!!).</p>
<p>OTOH, importing <code>main.py</code> from the REPL (the other case where a <code>__main__</code> module is created), totally messes with <strong>everything</strong> so some substitution is happening at that time.</p>
<p>Summarizing:</p>
<p>As far as I can see, it requires some deep dark magic to change <code>__main__</code> from inside a running module, maybe if we use <code>importlib.reload</code> and mess with the cached modules?</p>
<p>Doing that from other module seems ok, but (the example) messes with things, and name resolution breaks, i.e the Wapper class doesn't resolve previous names as you believe it should.</p>
<p>PD.</p>
<p>Sorry if this is not the <em>experienced</em> answer you wanted and seems more like a commentary. I did it as an experiment to test your hypothesis and maybe find some results.</p>
</div>
<span class="comment-copy"><i>"[...] subsitute an already loaded module, with something from inside that module (!!)."</i> I don't see how this is problematic, it's the same what you would use in &lt; Python 3.7 to modify module attribute access in general. <i>"importing main.py from the REPL, totally messes with everything [...]"</i> I'm not sure what you mean by that or how it is relevant, but importing the main script doesn't cause any problems. <i>"Doing that from other module seems ok, but it messes with things, and name resolution breaks."</i> What exactly do you mean here? Anyway the whole thing is rather a comment than an answer.</span>
<span class="comment-copy">Editing for clarification</span>
<span class="comment-copy">Again, your comments are (still) not clear. Specifically (again): 1. <i>"subsitute an already loaded module, with something from inside that module "</i> That is exactly what you use to modify module attribute access; so what do you mean by mentioning it here? 2. <i>"importing <code>main.py</code> from the REPL (the other case where a <code>__main__</code> module is created), totally messes with everything"</i> Actually that's wrong. Importing <code>main.py</code> will create a module called <code>'main'</code>; and it doesn't "mess" with anything. 3. <i>"to test your hypothesis"</i> There's no hypothesis in the OP, so what were you actually testing?</span>
<span class="comment-copy">Actually that's not wrong, maybe poorly written, running the REPL creates a <code>__main__</code> module, importing <code>main.py</code> overwrites the <code>__main__</code> module (because of your example) and while I was expecting name resolution to keep working, it didn't. That lead me to believe that substituting <code>__main__</code> with a wrapper (the way you did)  while possible might be troublesome because of the way module loading works. Your hypotheses that <i>name resolution</i> does not work as explained fails to prove itself</span>
<span class="comment-copy">To clarify, running the interpreter indeed creates a <code>__main__</code> module, however importing a file called <code>main.py</code> will create a module named <code>"main"</code> (not <code>"__main__"</code>). Furthermore, importing a module will <i>not</i> overwrite another module with the same name that is already loaded (for that you would need to use <code>importlib.reload</code>). So even if you called your file <code>__main__.py</code> (instead of <code>main.py</code>) and did <code>import __main__</code> in the interpreter, just nothing would happen, as a module called <code>__main__</code> is already loaded. Hence what you claim is wrong and I don't see how it answers my question.</span>
