<div class="post-text" itemprop="text">
<p>I'm just getting into multithreading. Here is a code I found somewhere in a tutorial and Im trying to wrap mind around it:</p>
<pre><code>import threading, time

def f():
    print('thread function')
    time.sleep(1)

if __name__ == '__main__':
    for i in range(3):
        t = threading.Thread(target=f, name="t_thread")
        t.start()
</code></pre>
<p>I understand that calling "start()" several times per thread object leads to an RuntimeError.</p>
<p>But this code creates multiple threads by creating multiple instances of class "Thread" with the same instance name "t" and same thread name "t_thread" and then calling "start()" on it.
How can Python discern between these different instances and threads with the same name? Why doesn't it lead to an RuntimeError when calling "start()" on the already running instance?</p>
<p>Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>a thread's <code>name</code> doesn't "do" anything, it just might be useful for callersâ€¦  from the <a href="https://docs.python.org/3/library/threading.html#threading.Thread.name" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>A string used for identification purposes only. It has no semantics. Multiple threads may be given the same name. The initial name is set by the constructor.</p>
</blockquote>
<p>all values/objects in Python have their own identity, you can get to this with the <code>id</code> function:</p>
<pre><code>id(t)
</code></pre>
<p>should give you something unique for each <code>Thread</code>.  <a href="https://docs.python.org/3/library/functions.html#id" rel="nofollow noreferrer">Python's docs</a> say:</p>
<blockquote>
<p>CPython implementation detail:  This is the address of the object in memory.</p>
</blockquote>
</div>
<span class="comment-copy">"t" is not the name of a <code>Thread</code> instance. Your code creates three <code>Thread</code> instances, all with the name "t_thread".  "t" is the name of a <i>local variable</i> that temporarily refers to each of the three thread instances---a different one each time around the loop.</span>
<span class="comment-copy">That helps me to understand the problem with multiple threads of the same name, thanks! What about multiple  objects with the same name - "t" in my example?</span>
<span class="comment-copy">maybe relevant talk/presentation: <a href="https://nedbatchelder.com/text/names1.html" rel="nofollow noreferrer">nedbatchelder.com/text/names1.html</a></span>
