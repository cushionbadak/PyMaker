<div class="post-text" itemprop="text">
<p>I got sounds that I play from a list called <code>sounds</code>. It plays a sound, store the time when the sound is played in <code>start</code>, waits 6 seconds and plays the next sound from the list. Now I want to capture a reaction time between these 6 seconds with a keydown. If the condition is true then I click the button and it captures the time and store it in <code>end</code>. Then, the difference between <code>end</code> and <code>start</code> should give me the result. The problem is, that it does not measure the time right. It always gives me millisconds, even if I way longer bfore I click. I wonder what I am doing wrong here?</p>
<pre><code>start = time.time()

    for i in range(len(arr)):
        pygame.mixer.music.load(sounds[i])
        pygame.mixer.music.play()

            for e in pygame.event.get():
                if e.type == pygame.KEYDOWN:
                    if e.key == pygame.K_RIGHT:

                        if condition:
                            end = time.time()
                            diff = end - start

            while pygame.mixer.music.get_busy():
                  time.sleep(6)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think the simplest solution would be to reset the start time when the next sound starts playing.</p>
<pre><code>import time
import pygame as pg


pg.init()
screen = pg.display.set_mode((640, 480))
clock = pg.time.Clock()
BG_COLOR = pg.Color('gray12')
SOUND = pg.mixer.Sound('a_sound.wav')

start = time.time()

done = False
while not done:
    for event in pg.event.get():
        if event.type == pg.QUIT:
            done = True
        elif event.type == pg.KEYDOWN:
            if event.key == pg.K_RIGHT:
                diff = time.time() - start
                print(diff)

    passed_time = time.time() - start
    pg.display.set_caption(str(passed_time))
    if passed_time &gt; 6:
        start = time.time()  # Reset the start time.
        SOUND.play()

    screen.fill(BG_COLOR)
    pg.display.flip()
    clock.tick(60)

pg.quit()
</code></pre>
</div>
<span class="comment-copy">nobody can help?</span>
<span class="comment-copy">Should the user press the button as soon as the sound plays?</span>
<span class="comment-copy">yep, while these 6 seconds. But i think that time.sleep(6) is the problem, because it seems this will pause the whole program and you cannot do anything while this time</span>
<span class="comment-copy">Is this question a duplicate of your new question <a href="https://stackoverflow.com/questions/53802710/how-to-meassure-time-in-python">here</a>? Then I think it would be better to delete one of them.</span>
<span class="comment-copy">Yes, <code>time.sleep</code> will pause the whole program, so the user can't press buttons/keys anymore during that time.</span>
<span class="comment-copy">hey,  <code>SOUND = pg.mixer.Sound('a_sound.wav')</code> is not working. I think you have to load the sound first ?</span>
<span class="comment-copy">It loads the sound file and creates a sound object which you can play by calling its <code>play</code> method. Is your filename/path correct? Does it print an error message?</span>
<span class="comment-copy">Please post the error message/traceback. I guess the filename or path is not correct. And print <code>os.listdir()</code> to check if the file is there.</span>
<span class="comment-copy">Pygame has sometimes problems with mp3 files. Check out if a different format (for example .ogg or .wav) works.</span>
<span class="comment-copy">You just need an index variable which has to be incremented after the 6 seconds (use modulo to create a cycle <code>index %= len(sounds)</code>). A nice alternative would be <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow noreferrer"><code>itertools.cycle</code></a>.</span>
