<div class="post-text" itemprop="text">
<p>I was wondering if it possible to create a dictionary and convert it into a Pandas dataframe where each dictionary key has an array of values, but the array will vary in length.</p>
<p>e.g. <code>col3</code> only has 2 values and all other lists have 3 values. Can I somehow put <code>NaN</code> to "fill" in the missing values and not get an error?</p>
<pre><code>col1 = ["Bottom", "sss", "ddd"]
col2 = ["boo", "sss", "foo"]
col3 = [999, 89]

d = {"Type": col1, "Style": col2, "Profit": col3}
df = pd.DataFrame.from_dict(d)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Doing with </p>
<pre><code>df=pd.DataFrame([col1,col2,col3],index=['T','S','P']).T
df
Out[165]: 
        T    S     P
0  Bottom  boo   999
1     sss  sss    89
2     ddd  foo  None
</code></pre>
<p>Another option </p>
<pre><code>pd.Series(d).apply(pd.Series).T
Out[174]: 
     Type Style Profit
0  Bottom   boo    999
1     sss   sss     89
2     ddd   foo    NaN
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A dictionary isn't strictly required. Using <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools.zip_longest</code></a>:</p>
<pre><code>from itertools import zip_longest

df = pd.DataFrame(list(zip_longest(col1, col2, col3)),
                  columns=['Type', 'Style', 'Profit'])

print(df)

     Type Style  Profit
0  Bottom   boo   999.0
1     sss   sss    89.0
2     ddd   foo     NaN
</code></pre>
<p>Notice the <a href="https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.DataFrame.html" rel="nofollow noreferrer"><code>pd.DataFrame</code></a> constructor is smart enough to convert numeric series to numeric, even though each tuple in the input list of tuples contains mixed types.</p>
</div>
<div class="post-text" itemprop="text">
<p>Sure - you can fill the missing values with <code>numpy.nan</code>:</p>
<pre><code>import numpy as np

col1 = ["Bottom", "sss", "ddd"]
col2 = ["boo", "sss", "foo"]
col3 = [999, 89, np.nan]

d = {"Type": col1, "Style": col2, "Profit": col3}
df = pd.DataFrame.from_dict(d)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>   Profit Style    Type
0   999.0   boo  Bottom
1    89.0   sss     sss
2     NaN   foo     ddd
</code></pre>
</div>
<span class="comment-copy">Is there an easy way to turn series <code>P</code> to dtype <code>float</code>?</span>
<span class="comment-copy">@jpp I do not think so , since this result by the <code>T</code>.</span>
<span class="comment-copy">@jpp Once you have the dataframe constructed, you can call <code>.astype(np.float)</code> on the series you wish to convert.</span>
<span class="comment-copy">@W-B thank you, this is what I was looking for</span>
<span class="comment-copy">This is nice, but a bit manual. How do you suggest OP can automatically add the required number of <code>np.nan</code> values to each input list?</span>
<span class="comment-copy">There's not an obvious way with the information we're given - we don't know which list is the longest, or where the <code>NaN</code>s should be, etc.  I mostly posted this method to show OP that the <code>np.nan</code> datatype is what he's after.</span>
