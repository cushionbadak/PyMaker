<div class="post-text" itemprop="text">
<p>I have a list of lists of lists, and I want to know the right way to retrieve a particular item from a bottom-level list.</p>
<p>For example, say I want to print 100:</p>
<pre><code>tree1 = [[0, 0, 0], [1, 1, 1], [2, 100, 2]]
tree2 = [[[0, 0 ,0], [1, 1, 1], [2, 100, 2]], [[3, 3, 3], [4, 4, 4], [5, 5, 5]]]

print(tree1[3][2])
print(tree2[1][3][2])
</code></pre>
<p>The first example works, but the second does not.  How does Python handle indexing for "higher-dimensional" nested lists?</p>
</div>
<div class="post-text" itemprop="text">
<p>Actually, neither of these should work. In Python, lists are indexed starting at 0. That means to print 100 in tree1 and tree2, you would need to run:</p>
<pre><code>print(tree1[2][1])
print(tree2[0][2][1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python indexing starts at 0, so example:</p>
<pre><code>&gt;&gt;&gt; a=[1,2,3]
&gt;&gt;&gt; a[0]
1
&gt;&gt;&gt; a[1]
2
&gt;&gt;&gt; a[2]
3
</code></pre>
<p>So your code could be:</p>
<pre><code>print(tree1[2][1])
print(tree2[0][2][1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A way to "see" index of a list is to iterate over it enumerating items, <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer">enumerate</a> returns the element and the index.</p>
<p>So for example:</p>
<pre><code>for index, element in enumerate(tree1):
  print (index, element)

# (0, [0, 0, 0])
# (1, [1, 1, 1])
# (2, [2, 100, 2])
</code></pre>
<p>Where you can see that index starts at 0.
When you call <code>print(tree1[1])</code>, you get <code>#=&gt; [1, 1, 1]</code></p>
<p>To dig deeper in the list, you can iterate over nested elements, for example (I change the name of the variables):</p>
<pre><code>for i_row, row in enumerate(tree1):
  for i_col, cell in enumerate(row):
    print(i_row, i_col, cell)
</code></pre>
<p>Returns:</p>
<pre><code># (0, 0, 0)
# (0, 1, 0)
# (0, 2, 0)
# (1, 0, 1)
# (1, 1, 1)
# (1, 2, 1)
# (2, 0, 2)
# (2, 1, 100)
# (2, 2, 2)
</code></pre>
<p>So, calling for example <code>print(tree1[2][1])</code>, returns <code>#=&gt; 100</code></p>
<p>The same with <code>tree2</code>, where you can dig down one level more.</p>
</div>
<span class="comment-copy">you got it, thank you.</span>
<span class="comment-copy">How does this address the question about nested lists?</span>
