<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/24735311/python-what-does-the-slash-mean-in-help-output">Python: What does the slash mean in help() output?</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>It seems pretty basic, but as it relates to python language per se, I feel lost here. 
According to Python 3.6 documentation :</p>
<pre><code>&gt;&gt;&gt;help(sum)

...
sum(iterable, start=0, /)
    Return the sum of a 'start' value (default: 0) plus an iterable of numbers 
...
</code></pre>
<p>When I call: <code>sum([0,1,2], start=1)</code>, I am getting:</p>
<pre><code>TypeError: sum() takes no keyword arguments
</code></pre>
<p>What's going on here?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>/</code> in the prototype <a href="https://www.python.org/dev/peps/pep-0570/" rel="nofollow noreferrer">is a convention that means that all arguments prior to it are positional only</a>; they can't be passed by keyword. Functions defined in Python can't do this (at least, not without just accepting arguments into <code>*args</code> and manually unpacking the contents, though the linked PEP proposes doing allowing the syntax for Python level functions too), but since <code>sum</code> is a built-in implemented in C it can do this (it's actually doing the manual unpacking internally, but can advertise a more useful prototype), and define a default value much more easily. Not accepting arguments by keyword allows it to operate somewhat more efficiently than allowing for the possibility of keyword arguments.</p>
<p>Point is, the argument isn't <em>really</em> named <code>start</code>, so you can't pass it by name; you have to pass it positionally, e.g.:</p>
<pre><code>sum([0,1,2], 1)
</code></pre>
</div>
<span class="comment-copy">No, it does not. A lot of these built in functions have positional only parameters that look like they could be keyword parameters</span>
<span class="comment-copy">but if you do <code>sum([0,1,2], 1)</code> you will get <code>4</code>.</span>
<span class="comment-copy">interesting. Is there a documentation about the <code>/</code> thing?</span>
<span class="comment-copy">@DimaLituiev: No <i>good</i> documentation I can find, but it's mentioned <a href="https://docs.python.org/3/howto/clinic.html?highlight=positional-only#converting-your-first-function" rel="nofollow noreferrer">under item #10 in the Argument Clinic docs on converting your first function</a>. The Argument Clinic is an initiative to simplify documenting and parsing function arguments for C level built-ins.</span>
<span class="comment-copy">There is <a href="https://bugs.python.org/issue21314" rel="nofollow noreferrer">an open bug to document them</a>, and it's also mentioned in <a href="https://www.python.org/dev/peps/pep-0570/" rel="nofollow noreferrer">PEP 570</a>.</span>
