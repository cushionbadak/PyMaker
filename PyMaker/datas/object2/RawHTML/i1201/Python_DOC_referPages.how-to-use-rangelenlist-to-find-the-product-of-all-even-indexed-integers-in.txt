<div class="post-text" itemprop="text">
<p>I'm very new to coding, and I'm doing an assignment where I have to find the product of all even-indexed integers in a huge list:</p>
<pre><code>number_list = [12, 41, 10, 34, 37, 2, 3, 8, 42, 46, 46, 27, 13, 49, 41, 2, 28, 21, 37, 27, 31, 19, 46, 7, 50, 1, 46, 45, 19, 10, 14, 8, 44, 14, 10, 4, 23, 29, 46, 18, 32, 40, 32, 7, 33, 45, 26, 24, 43, 45]
</code></pre>
<p>The question recommends using range(len(list)), which gives me range (1,50), but I don't see how that's relevant. I managed to get the answer without using that method:</p>
<pre><code>number_list = [12, 41, 10, 34, 37, 2, 3, 8, 42, 46, 46, 27, 13, 49, 41, 2, 28, 21, 37, 27, 31, 19, 46, 7, 50, 1, 46, 45, 19, 10, 14, 8, 44, 14, 10, 4, 23, 29, 46, 18, 32, 40, 32, 7, 33, 45, 26, 24, 43, 45]

result = 1
evenlist = number_list[::2]
for num in evenlist:
    result = result * num
</code></pre>
<p>How would range(len(list)) be useful here?</p>
</div>
<div class="post-text" itemprop="text">
<p>Might be something like this, where you reference it using the index of the array;</p>
<pre><code>number_list = [12, 41, 10, 34, 37, 2, 3, 8, 42, 46, 46, 27, 13, 49, 41, 2, 28, 21, 37, 27, 31, 19, 46, 7, 50, 1, 46, 45, 19, 10, 14, 8, 44, 14, 10, 4, 23, 29, 46, 18, 32, 40, 32, 7, 33, 45, 26, 24, 43, 45]

result = 1
for idx in range(0, len(number_list), 2):
   result = result * number_list[idx]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would add that @fixatd's answer is correct but also caution you that the solution is not Pythonic.  I realize your book/instructor wants the answer a certain way but I'd like to elaborate and show you some better alternatives for when you're not tied to a solution they want to see.</p>
<p>For example, here would be a more functional approach to the solution:</p>
<pre><code>from operator import mul
from itertools import islice
from functools import reduce
number_list = [12, 41, 10, 34, 37, 2, 3, 8, 42, 46, 46, 27, 13, 49, 41, 2, 28, 21, 37, 27, 31, 19, 46, 7, 50, 1, 46, 45, 19, 10, 14, 8, 44, 14, 10, 4, 23, 29, 46, 18, 32, 40, 32, 7, 33, 45, 26, 24, 43, 45]
reduce(mul, islice(number_list, 0, None, 2))
218032559868925537961630414929920000
</code></pre>
<p>Alternatively, if you prefer less imports or less functional you can loop like a native.  In python you'll often just loop over the iterable.  The idiom is </p>
<pre><code>for something in iterable:  
</code></pre>
<p>It's typically less pythonic to use len of something inside of range just to loop over something iteratively.  If you do happen to need the indices for some reason then use enumerate:</p>
<pre><code>for index, item in enumerate(iterable):
</code></pre>
<p>The solution that you provided is actually quite nice and pythonic as opposed to what the assignment is requesting.  Here's your solution slightly cleaned up:</p>
<pre><code>result = 1
for num in number_list[::2]:
    result *= num

&gt;&gt;&gt;result
218032559868925537961630414929920000
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why you are interested in using range? Below there are two other variants as solution to your problem.</p>
<p>First way:</p>
<pre><code>result = 1
for numbers in number_list:
    result *= numbers
</code></pre>
<p>Second way:</p>
<pre><code>from functools import reduce
reduce(lambda a, b: a*b, number_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well, besides @fixatd's answer, you could also do it with <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer">reduce</a>:</p>
<pre class="lang-python prettyprint-override"><code>import operator
from functools import reduce

def prod(iterable):
    return reduce(operator.mul, iterable, 1)

result = prod(evenlist)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you can do is iterate over the array but you can specify the "jump" of each iteration as two instead of one using <code>range(start,end,jump)</code> . What you are doing when you are doing <code>list[::2]</code> is creating a new array and removing every other element then doing a iteration over it. Careful because it may take more resources for a larger input. </p>
<pre><code>number_list = [12, 41, 10, 34, 37, 2, 3, 8, 42, 46, 46, 27, 13, 49, 41, 2, 28, 21, 37, 27, 31, 19, 46, 7, 50, 1, 46, 45, 19, 10, 14, 8, 44, 14, 10, 4, 23, 29, 46, 18, 32, 40, 32, 7, 33, 45, 26, 24, 43, 45]

prod = 1
for i in range(0, len(number_list), 2):
    prod *= list[i]
</code></pre>
</div>
<span class="comment-copy">It is a bad recommendation and <code>range</code> should not be used to solve this problem.</span>
<span class="comment-copy"><code>result = functools.reduce(operator.mul, number_list[::2])</code></span>
<span class="comment-copy">You can skip with range too if that's of any help. <code>range(start, stop, skip)</code></span>
<span class="comment-copy">Whoever gave you this assignment should learn Python before pretending teaching it. Using slices like you did IS the proper pythonic way (using <code>reduce()</code> as shown by CoryKramer being even better).</span>
<span class="comment-copy">@DeepSpace yes, I actually noticed as well, should be easy enough to add however OP should clarify first.</span>
<span class="comment-copy">Yes sorry I missed out the detail - the question asks for the product of all even-index integers. How should I factor that into the solution you provided?</span>
<span class="comment-copy">This might not be the best way for real-life use cases but I guess that's what is expected from the assignment.</span>
<span class="comment-copy">This is pretty much the same as @fixatd's answer. Except you typoed: list -&gt; number_list.</span>
<span class="comment-copy">@Jérôme , I would say this is <b>the same as fixatd's answer</b></span>
