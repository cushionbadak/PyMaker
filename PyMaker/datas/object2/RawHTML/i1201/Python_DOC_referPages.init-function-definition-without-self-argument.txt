<div class="post-text" itemprop="text">
<p>In digging through the python <code>Counter</code> class in <code>collections</code>, I found something I thought was peculiar: They don't explicitly use the <code>self</code> argument in the <code>__init__</code> function's arguments. </p>
<p>See code below (copied directly without the docstring):</p>
<pre><code>class Counter(dict):
    def __init__(*args, **kwds):
        if not args:
            raise TypeError("descriptor '__init__' of 'Counter' object "
                            "needs an argument")
        self, *args = args
        if len(args) &gt; 1:
            raise TypeError('expected at most 1 argments, got %d' % len(args))
        super(Counter, self).__init__()
        self.update(*args, **kwds)
</code></pre>
<p>Later in this same class, the <code>update</code> and <code>subtract</code> methods are also defined this same way.</p>
<p>Before you point me to questions about how <code>self</code> works in classes, I will note that I don't believe this is a duplicate question. I understand how <code>self</code> works typically and that <code>self</code> is not a keyword (just standard practice) etc. I also understand that this code works (I'm not questioning the validity of the <code>*</code> unpack/explode/starred-expressions syntax)</p>
<p>My question is more related to why...</p>
<ul>
<li>Why would one implement the <code>__init__</code> and other normal (non-<code>@static</code>/<code>@class</code> methods) of a class like this and in what circumstances should I consider using this in the future?</li>
<li>Why are only specific methods on the same class implemented like this?</li>
<li>Under what circumstance would these methods be called without any args (if any), triggering the first TypeError?</li>
<li>In what circumstances would these methods be called with <code>self</code> filled in manually (e.g. <code>Counter.__init__(some_counter)</code>)? Or other examples? </li>
</ul>
<p>I have to think that it has something to do with the TypeError("descriptor..."). </p>
</div>
<div class="post-text" itemprop="text">
<p>This code is intended to make <code>self</code> positional-only. Otherwise, a call like</p>
<pre><code>d = {'self': 5}
Counter(**d)
</code></pre>
<p>would fail due to <code>__init__</code> receiving two values of <code>self</code>.</p>
<p>Most classes don't need anything like this special handling, but <code>Counter</code> is supposed to handle keyword arguments like <code>dict</code> does, where they become keys of the resulting mapping, even if the key is <code>'self'</code>. The other <code>Counter</code> methods that have this handling are the ones that need the same keyword argument behavior.</p>
<p>If you need to treat <code>self</code> as a valid keyword argument in your own code, you should probably do something similar.</p>
<hr/>
<p>As for the <code>TypeError</code>, that's there to match the error message from <code>dict.__init__</code>:</p>
<pre><code>&gt;&gt;&gt; dict.__init__()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: descriptor '__init__' of 'dict' object needs an argument
&gt;&gt;&gt; Counter.__init__()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python3.7/collections/__init__.py", line 560, in __init__
    raise TypeError("descriptor '__init__' of 'Counter' object "
TypeError: descriptor '__init__' of 'Counter' object needs an argument
</code></pre>
<p>The most likely way for this to come up in practice is probably people subclassing <code>Counter</code> and forgetting to pass <code>self</code> to <code>Counter.__init__</code> (or use <code>super</code>).</p>
</div>
<span class="comment-copy">It does use self: <code>self, *args = args</code>.</span>
<span class="comment-copy">I like this! Very clever stuff.  Any sort of short explanation about the <code>TypeError</code> itself? I understand enough why it's there, but what does it mean: "descriptor"?</span>
<span class="comment-copy">@StephenCowley: The <a href="https://docs.python.org/3/reference/datamodel.html#descriptors" rel="nofollow noreferrer">descriptor protocol</a> is the protocol that methods use to automatically bind the <code>self</code> argument when accessed on an instance. It's useful for more than that, but that's what methods use it for. The descriptor types used for most C methods say "descriptor 'method_name' of 'type_name' needs an argument" if called without the <code>self</code> positional argument.</span>
