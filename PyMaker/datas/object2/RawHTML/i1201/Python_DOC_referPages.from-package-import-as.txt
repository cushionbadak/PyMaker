<div class="post-text" itemprop="text">
<p>My project has a number of <code>click</code> functions that is imported in my entrypoint with:</p>
<pre><code>import package.module as _
</code></pre>
<p>however I'm implementing a <code>plugins</code> folder that allows user-created code to hook into the same utility. <code>package/plugins/__init__.py</code> is dynamically populating its <code>__all__</code> so I can <code>from package.plugins import *</code>.</p>
<p>I don't particularly want all those names polluting my namespace, though, I'm only using the import for its side effects. Is there a way to <code>import * as _</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want the contents of a module to pollute your program, you can just import the module:</p>
<pre><code>import module
</code></pre>
<p>or import as:</p>
<pre><code>import module as name
</code></pre>
<p><code>import *</code> is meant for the times when you <em>don't</em> want the module to be in it's own namespace. Doing this:</p>
<pre><code>from module import *
</code></pre>
<p>automatically puts everything from <code>module</code> into the scope the import is in (usually the global scope). <code>from module import *</code> is a special type of <code>from module import something</code>, which imports only the specified contents into your program.</p>
<p>Be aware that submodules can be imported the same way as normal modules, i.e. <code>import os.path as somemodule</code> is legal.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're using the <code>import *</code> for the side effects specific to <code>import *</code>... well that's kind of a weird thing to do, but you can use <code>__import__</code> with <code>fromlist=['*']</code> to perform those side effects without any namespace pollution:</p>
<pre><code>__import__('package', fromlist=['*'])
</code></pre>
<p>This will autoload all submodules in a package's <code>__all__</code> list, unlike a plain <code>import package</code>.</p>
</div>
<span class="comment-copy">For what it's worth I understand the security concerns in allowing arbitrary user code to run when my CLI launches. I'm not concerned by this issue.</span>
<span class="comment-copy">If you don't want anything but side effects, what do you gain from the <code>*</code> at all? Call <code>__import__('package.plugins')</code>, discarding the result, and you're done; see <a href="https://docs.python.org/3/library/functions.html#__import__" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#__import__</a>. That said, I don't see why you don't just use <code>import package.plugins</code>; it's just one name, after all, and a usefully-namespaced one.</span>
<span class="comment-copy">...to expand for clarity: The <i>only thing</i> the <code>*</code> in <code>import *</code> does is control which names are copied to your current namespace -- it doesn't change what is or isn't evaluated in any way.</span>
<span class="comment-copy">@CharlesDuffy ultimately because <code>package.plugins</code> does nothing on its own. I suppose I could <code>for path in __all__: __import__(path)</code> in <code>package.plugins</code>, but the magic happens deeper than that.</span>
<span class="comment-copy">@AdamSmith FYI <code>setuptools</code> provides a mechanism for <a href="https://packaging.python.org/guides/creating-and-discovering-plugins/" rel="nofollow noreferrer">Creating and discovering plugins</a>. If you have a <code>setup.py</code> you are probably using setuptools anyway so why don't use that instead of a home-baked solution?</span>
<span class="comment-copy">This doesn't actually solve my problem, since <code>module</code> is essentially just a wrapper in this case. All the <i>magic</i> happens inside the submodules (the user-defined code) that are only listed in <code>module</code>.</span>
<span class="comment-copy">@AdamSmith you can use imports on submodules the same as normal modules, i.e. you can do <code>from os.path import *</code>.</span>
<span class="comment-copy">David: that's exactly the code I'm trying to avoid using, as it pollutes my namespace. That's the purpose of the question.........</span>
<span class="comment-copy">@AdamSmith that's what I meant to solve with my answer. You can import submodules the same as normal modules.</span>
<span class="comment-copy">I'm not sure how any of that satisfies my use case, sorry. <code>from whatever_path import *</code> saturates my namespace with names I neither want nor need. <code>import whatever_path</code> may be the same if <code>whatever_path</code> is a module, but for a package it is functionally different.</span>
