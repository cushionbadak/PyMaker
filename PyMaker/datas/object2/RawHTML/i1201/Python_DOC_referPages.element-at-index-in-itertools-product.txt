<div class="post-text" itemprop="text">
<p>Can we get the element in a specific index from itertools.product result in Python 3? Like Below: </p>
<pre><code>xlist = itertools.product('abc', repeat=3)
element = xlist[10]
</code></pre>
<p><strong>UPDATE</strong> <br/>
The whole question turned upsidedown! I found that generating all set and look for an index is a big mistake! I looked at the possible <a href="https://stackoverflow.com/questions/9944915/how-to-select-specific-item-from-cartesian-product-without-calculating-every-oth">duplicate</a> of my question, but I don't get the <a href="https://stackoverflow.com/a/9944993/9916923">answer</a>!</p>
</div>
<div class="post-text" itemprop="text">
<p>You do not have to iterate the generator until you get to the index, but you can generate that product immediately, in O(1) as described <a href="https://stackoverflow.com/a/9944993/1639625">here</a>. Adapting that to the <code>(lst, repeat)</code> form:</p>
<pre><code>def nth_product(lst, repeat, n):
    k = len(lst)
    return [lst[n // (k**r) % k] for r in range(repeat-1, -1, -1)]
</code></pre>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; lst = list(range(10))
&gt;&gt;&gt; ref = list(itertools.product(lst, repeat=3))
&gt;&gt;&gt; all(nth_product(lst, 3, i) == list(r) for i, r in enumerate(ref))
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you refer to Python 3, you could use <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer">enumerate</a> to filter to index the generator and then use <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer">next</a>:</p>
<pre><code>import itertools

it = enumerate(itertools.product('abc', repeat=3))
result = next(e for i, e in it if i == 10)
print(result)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>('b', 'a', 'b')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The result of <code>itertools.product()</code> isn't a list, but rather an iterable - which is why this doesn't work, you can't access an iterable by index.</p>
<p>You can make a list using <a href="https://docs.python.org/3/library/stdtypes.html#list" rel="nofollow noreferrer"><code>list()</code></a> - but this means computing <em>all</em> the values, which could be very inefficient. In the example case, while we have to compute all the values leading up to the one we want, we don't need to store them all in memory, nor do we need to compute the rest after we get the one we want.</p>
<p>If you only want one element, the better solution is to only consume the part you need - this can be done easily with <a href="https://docs.python.org/3.7/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>itertools.islice()</code></a>.</p>
<p><code>element = next(itertools.islice(xlist, 10, None))</code></p>
<p>As the slice is another iterable, we use <a href="https://docs.python.org/3.7/library/functions.html#next" rel="nofollow noreferrer"><code>next()</code></a> to get the first item.</p>
<p><code>islice</code> functions very similarly to the list slice (as the name implies). Note that once you have consumed some of the iterable, working with it further will work from where you left off. You should either get what you need in a single iteration, or create a list (or other data structure if appropriate).</p>
<p>The big advantage of <code>islice</code> over other ways of throwing away the initial values you are not interested in is that it is implemented very efficiently within Python, and so is likely to be the fastest option, as well as being flexible if you later need more than just the one element.</p>
</div>
<div class="post-text" itemprop="text">
<p>The other solutions produce the correct result, but if you just want one element of the Cartesian product, iterating the generator returned by <code>itertools.product</code> is not the most efficient solution. You can directly build the item that you need without having to go through all the elements with a function like this:</p>
<pre><code>from collections.abc import Sequence

def product_item(idx, *seqs, repeat=None):
    # Ensure inputs are actual sequences (list, tuple, str...)
    seqs = [seq if isinstance(seq, Sequence) else list(seq) for seq in seqs]
    # Repeat if needed
    if repeat is not None:
        seqs = seqs * repeat
    # Compute how many items does it take to advance on each sequence
    step = 1
    for seq in seqs:
        step *= len(seq)
    # Build product item
    item = [None] * len(seqs)
    for i, seq in enumerate(seqs):
        step //= len(seq)
        seq_idx = idx // step
        idx %= step
        item[i] = seq[seq_idx]
    return tuple(item)

print(product_item(10, 'abc', repeat=3))
# ('b', 'a', 'b')
</code></pre>
<p>The complexity for this solution is O(1). A quick comparison:</p>
<pre><code>import itertools

# Solution with islice
product_item_islice = lambda idx, *seqs, repeat=None: next(
    itertools.islice(itertools.product(*seqs, repeat=repeat), idx, None))

idx = 100_000_000
seqs = ['abcdefgh']
repeat = 10
print(product_item(idx, *seqs, repeat=repeat))
# ('a', 'f', 'h', 'f', 'd', 'g', 'a', 'e', 'a', 'a')
print(product_item_islice(idx, *seqs, repeat=repeat))
# ('a', 'f', 'h', 'f', 'd', 'g', 'a', 'e', 'a', 'a')

%timeit product_item(idx, *seqs, repeat=repeat)
# 3.7 µs ± 46.3 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)
%timeit product_item_islice(idx, *seqs, repeat=repeat)
# 448 ms ± 7.55 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
</code></pre>
</div>
<span class="comment-copy">Are you asking "how to get the Nth element from <code>itertools.product</code>, or "How to get the Nth product of some lists"?</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/2300756/get-the-nth-item-of-a-generator-in-python">Get the nth item of a generator in Python</a></span>
<span class="comment-copy">@tobias_k I'm asking "how to get the Nth element from itertools.product"</span>
<span class="comment-copy">Related: <a href="https://stackoverflow.com/q/9944915/1639625">How to select specific item from cartesian product without calculating every other item</a></span>
