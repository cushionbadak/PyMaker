<div class="post-text" itemprop="text">
<p>I want to apply a function <code>f</code> to a collection <code>xs</code> but keep its type. If I use <code>map</code>, I get a 'map object':</p>
<pre><code>def apply1(xs, f):
  return map(f, xs)
</code></pre>
<p>If I know that <code>xs</code> is something like a <code>list</code> or <code>tuple</code> I can force it to have the same type:</p>
<pre><code>def apply2(xs, f):
  return type(xs)(map(f, xs))
</code></pre>
<p>However, that quickly breaks down for <code>namedtuple</code> (which I am currently in a habbit of using) -- because to my knowledge <code>namedtuple</code> needs to be constructed with unpack syntax or by calling its <code>_make</code> function. Also, <code>namedtuple</code> is const, so I cannot iterate over all entries and just change them.</p>
<p>Further problems arise from use of a <code>dict</code>.</p>
<p>Is there a generic way to express such an <code>apply</code> function that works for everything that is iterable?</p>
</div>
<div class="post-text" itemprop="text">
<p>Looks like a perfect task for <a href="https://docs.python.org/3/library/functools.html#functools.singledispatch" rel="nofollow noreferrer"><code>functools.singledispatch</code> decorator</a>:</p>
<pre><code>from functools import singledispatch


@singledispatch
def apply(xs, f):
    return map(f, xs)


@apply.register(list)
def apply_to_list(xs, f):
    return type(xs)(map(f, xs))


@apply.register(tuple)
def apply_to_tuple(xs, f):
    try:
        # handle `namedtuple` case
        constructor = xs._make
    except AttributeError:
        constructor = type(xs)
    return constructor(map(f, xs))
</code></pre>
<p>after that <code>apply</code> function can be simply used like</p>
<pre><code>&gt;&gt;&gt; apply([1, 2], lambda x: x + 1)
[2, 3]
&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; Point = namedtuple('Point', ['x', 'y'])
&gt;&gt;&gt; p = Point(10, 5)
&gt;&gt;&gt; apply(p, lambda x: x ** 2)
Point(x=100, y=25)
</code></pre>
<p>I'm not aware of what is desired behavior for <code>dict</code> objects though, but the greatness of this approach that it is easy to extend.</p>
</div>
<div class="post-text" itemprop="text">
<p>I have a hunch you're coming from Haskell -- is that right? (I'm guessing because you use <code>f</code> and <code>xs</code> as variable names.) The answer to your question in Haskell would be "yes, it's called <code>fmap</code>, but it only works with types that have a defined <a href="http://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Functor.html" rel="nofollow noreferrer">Functor</a> instance." </p>
<p>Python, on the other hand, has no general concept of "Functor." So strictly speaking, the answer is no. To get something like this, you'd have to fall back on other abstractions that Python does provide. </p>
<h3>ABCs to the rescue</h3>
<p>One pretty general approach would be to use <a href="https://docs.python.org/3/library/collections.abc.html#module-collections.abc" rel="nofollow noreferrer">abstract base classes</a>. These provide a structured way to specify and check for particular interfaces. A Pythonic version of the Functor typeclass would be an abstract base class that defines a special <code>fmap</code> method, allowing individual classes to specify how they are to be mapped. But no such thing exists. (I think it would be a really cool addition to Python though!)</p>
<p>Now, you can define your own abstract base classes, so you could create a Functor ABC that expects a <code>fmap</code> interface, but you'd still have to write all your own functorized subclasses of <code>list</code>, <code>dict</code>, and so on, so that's not really ideal.</p>
<p>A better approach would be to use the existing interfaces to cobble together a generic definition of mapping that seems reasonable. You'd have to think pretty carefully about what aspects of the existing interfaces you'd need to combine. Just checking to see whether a type defines <code>__iter__</code> isn't enough, because as you've already seen, a definition of iteration for a type doesn't necessarily translate into a definition of construction. For example, iterating over a dictionary only gives you the keys, but to map a dictionary in this precise way would require iteration over <em>items</em>.</p>
<h3>Concrete examples</h3>
<p>Here's an abstract base method that includes special cases for <code>namedtuple</code> and three abstract base classes -- <code>Sequence</code>, <code>Mapping</code>, and <code>Set</code>. It will behave as expected for any type that defines any of the above interfaces in the expected way. It then falls back to the generic behavior for iterables. In the latter case, the output won't have the same type as the input, but at least it will work. </p>
<pre><code>from abc import ABC
from collections.abc import Sequence, Mapping, Set, Iterator

class Mappable(ABC):
    def map(self, f):
        if hasattr(self, '_make'):
            return type(self)._make(f(x) for x in self)
        elif isinstance(self, Sequence) or isinstance(self, Set):
            return type(self)(f(x) for x in self)
        elif isinstance(self, Mapping):
            return type(self)((k, f(v)) for k, v in self.items())
        else:
            return map(f, self)
</code></pre>
<p>I've defined this as an ABC because that way you can create new classes that inherit from it. But you can also just call it on an existing instance of any class and it will behave as expected. You could also just use the <code>map</code> method above as a stand-alone function.</p>
<pre><code>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; 
&gt;&gt;&gt; def double(x):
...     return x * 2
... 
&gt;&gt;&gt; Point = namedtuple('Point', ['x', 'y'])
&gt;&gt;&gt; p = Point(5, 10)
&gt;&gt;&gt; Mappable.map(p, double)
Point(x=10, y=20)
&gt;&gt;&gt; d = {'a': 5, 'b': 10}
&gt;&gt;&gt; Mappable.map(d, double)
{'a': 10, 'b': 20}
</code></pre>
<p>The cool thing about defining an ABC is that you can use it as a "mix-in." Here's a <code>MappablePoint</code> derived from a <code>Point</code> namedtuple:</p>
<pre><code>&gt;&gt;&gt; class MappablePoint(Point, Mappable):
...     pass
... 
&gt;&gt;&gt; p = MappablePoint(5, 10)
&gt;&gt;&gt; p.map(double)
MappablePoint(x=10, y=20)
</code></pre>
<p>You could also modify this approach slightly in light of <a href="https://stackoverflow.com/a/53876929/577088">Azat Ibrakov's answer</a>, using the <code>functools.singledispatch</code> decorator. (It was new to me -- he should get all credit for this part of the answer, but I thought I'd write it up for the sake of completeness.)</p>
<p>This would look something like the below. Notice that we <em>still</em> have to special-case <code>namedtuple</code>s because they break the tuple constructor interface. That hadn't bothered me before, but now it feels like a really annoying design flaw. Also, I set things up so that the final <code>fmap</code> function uses the expected argument order. (I wanted to use <code>mmap</code> instead of <code>fmap</code> because "Mappable" is a more Pythonic name than "Functor" IMO. But <code>mmap</code> is already a built-in library! Darn.)</p>
<pre><code>import functools

@functools.singledispatch
def _fmap(obj, f):
    raise TypeError('obj is not mappable')

@_fmap.register(Sequence)
def _fmap_sequence(obj, f):
    if isinstance(obj, str):
        return ''.join(map(f, obj))
    if hasattr(obj, '_make'):
        return type(obj)._make(map(f, obj))
    else:
        return type(obj)(map(f, obj))

@_fmap.register(Set)
def _fmap_set(obj, f):
    return type(obj)(map(f, obj))

@_fmap.register(Mapping)
def _fmap_mapping(obj, f):
    return type(obj)((k, f(v)) for k, v in obj.items())

def fmap(f, obj):
    return _fmap(obj, f)
</code></pre>
<p>A few tests:</p>
<pre><code>&gt;&gt;&gt; fmap(double, [1, 2, 3])
[2, 4, 6]
&gt;&gt;&gt; fmap(double, {1, 2, 3})
{2, 4, 6}
&gt;&gt;&gt; fmap(double, {'a': 1, 'b': 2, 'c': 3})
{'a': 2, 'b': 4, 'c': 6}
&gt;&gt;&gt; fmap(double, 'double')
'ddoouubbllee'
&gt;&gt;&gt; Point = namedtuple('Point', ['x', 'y', 'z'])
&gt;&gt;&gt; fmap(double, Point(x=1, y=2, z=3))
Point(x=2, y=4, z=6)
</code></pre>
<h3>A final note on breaking interfaces</h3>
<p>Neither of these approaches can <em>guarantee</em> that this will work for all things recognized as <code>Sequence</code>s, and so on, because the ABC mechanism doesn't check function signatures. This is a problem not only for constructors, but also for all other methods. And it's unavoidable without type annotations. </p>
<p>In practice, however, it probably doesn't matter much. If you find yourself using a tool that breaks interface conventions in weird ways, consider using a different tool. (I'd actually say that goes for <code>namedtuple</code>s too, as much as I like them!) This is the "<a href="https://mail.python.org/pipermail/tutor/2003-October/025932.html" rel="nofollow noreferrer">consenting adults</a>" philosophy behind many Python design decisions, and it has worked pretty well for the last couple of decades.</p>
</div>
<span class="comment-copy">Const is not the right word. <code>namedtuple</code> objects are immutable, but so are tuple objects. I'm not sure how "I cannot iterate over all entries and just change them." is relevant.</span>
<span class="comment-copy">I think you'll have to add special cases for the extra types you care about.</span>
<span class="comment-copy">Anyway, "Is there a generic way to express such an apply function that works for everything that is iterable?" No, there isn't. You have no guarantee that iterable objects will be constructed in a generically similar manner. <code>class Foo: def __iter__(self): yield 1, yield 2</code> for example</span>
<span class="comment-copy"><i>Further problems arise from use of a dict.</i> -- what behavior is desired for applying function to a <code>dict</code>? should it be applied to keys/values/key-value pairs/unpacked key-value pairs?</span>
<span class="comment-copy">After playing with it a bit, I think this approach is really nice. Among other things, I found that this handles abstract base classes correctly too. So you could cover all types of <code>Sequence</code>s, <code>Set</code>s, and <code>Mapping</code>s with just a few cases -- you wouldn't have to write a separate function for every one. The only issue is that in the <code>Sequence</code> handler, you'd still have to write a test and special case for <code>namedtuple</code>s because they break the tuple constructor interface. That is a really annoying design flaw.</span>
<span class="comment-copy">@senderle: we can always have a separate case for <code>tuple</code>/<code>namedtuple</code>s, also <code>str</code>ings probably should be handled separately as well (for example by <code>''.join</code>'ining result of characterwise applying)</span>
<span class="comment-copy">Quite right -- the <code>str</code> special case hadn't occurred to me. Those could both just live in the <code>Sequence</code> method, though -- they're all subclasses of <code>Sequence</code>. See my <a href="https://stackoverflow.com/a/53876462/577088">new addition</a> at the end for an example. (I hope you don't mind my borrowing the basic idea -- actually, feel free to incorporate it into yours and I'll delete it from mine and replace with a link.)</span>
<span class="comment-copy">You got me 100% with your haskell hunch. :) At any rate, I'm not entirely sure what the benefit of the ABC class is there. If I take your approach and boil it down, stripping away the <code>Mappable</code> type, I'm left with a regular function that just goes through all the cases. Your mixin is certainly cool, but it all seems tailored around custom types. I was more interested in a generic approach, mostly for built-in types. What I take from this is, that <code>list</code> and <code>tuple</code> seem be instances of <code>abc.Sequence</code>? (thanks for the thorough answer, btw.)</span>
<span class="comment-copy">@bitmask Yep, all built-in types are recognized as subclasses of ABCs for interfaces they implement. In fact, anything that implements an ABC's interface is recognized as its subclass, whether or not it explicitly inherits from the ABC. It totally decouples interfaces from concrete types. In that sense it's extremely generic.</span>
<span class="comment-copy">@bitmask, I wonder if you like an approach using <code>singledispatch</code> + ABCs better than ABCs alone. See my additions above.</span>
<span class="comment-copy">Yes, that combination is really nice. I admit, that I didn't initially <i>get</i> @Azat's answer. But this seems to be quite nice (although personally I think dict should be handled differently). But I find it difficult to accept one particular answer, so, I'll let the community decide.</span>
<span class="comment-copy">@bitmask, yeah, I was not sure about the dict -- I just slapped something together. (Curious about your thoughts, actually! It's sort of a weird issue.)</span>
