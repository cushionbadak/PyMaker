<div class="post-text" itemprop="text">
<p>So to put it simply, I'd like to know how to do this:</p>
<pre><code>import sys
sys.stdout.write("Hello World")

=&gt; Hello World

#print something to go left maybe?
sys.stdout.write("Im Back Here!")

=&gt; Im Back Here!Hello World
</code></pre>
<p>I hope I've explained this well enough to understand! Any help will be very appreciated. Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can change cursor position using:</p>
<pre><code>sys.stdout.seek(offset[, whence])
</code></pre>
<p>You can find its description here:
<a href="https://docs.python.org/3/library/io.html#io.TextIOBase.seek" rel="nofollow noreferrer">Python 3 library</a></p>
<p>However using write methods overwrite stdout, therefore you need to remember output somehow.<br/>
Solution example:</p>
<pre><code>import sys

out = ""

def append(s):
    global out
    sys.stdout.seek(0, 2)
    sys.stdout.write(s)
    out += s

def append_left(s):
    global out
    sys.stdout.seek(0,0)
    sys.stdout.write(s + out)
    out = s + out

append("Hello World")
append_left("Im Back Here!")
</code></pre>
<p>But when you aren't redirecting output to file stdout is not seekable. You can find reason
<a href="https://stackoverflow.com/questions/45354873/i-cant-sys-stdout-seek">there</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>l = []
l.append("Hello World")
l.append("Im Back Here!")
l.reverse()


print(''.join(l))
</code></pre>
<p>or this:</p>
<pre><code>import sys
def insert_str(string, str_to_insert, index):
    return string[:index] + str_to_insert + string[index:]
s1 = "Hello World"
s2 = "Im Back Here!"

sys.stdout.write(insert_str(s2,s1,len(s2)))
</code></pre>
<p>both give the same result and the code is here:<a href="https://onlinegdb.com/BJGCJQml4" rel="nofollow noreferrer">https://onlinegdb.com/BJGCJQml4</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Is this supposed to be in an interactive environment? If yes, you'd have to deal with whatever the library you uses provides to control output. For the regular standard library, you can use the carriage return character <code>\r</code> to overwrite. Play around with:</p>
<pre><code>import sys

msg1 = "Hello World"
msg2 = "Im Back Here!"
sys.stdout.write(msg1)
sys.stdout.write("\r{}{}".format('\r', msg2, msg1))
sys.stdout.write('\n')
</code></pre>
<p>The line <code>sys.stdout.write(msg1)</code> produces the output <code>Hello World</code> while the line <code>sys.stdout.write("\r{}{}".format(msg2, msg1))</code> moves the cursor back to the beginning of the line, prints <code>Im Back Here!</code> followed by <code>Im Back Here!</code>. I added a newline just to avoid messing up the shell window.</p>
<p>If you want the exact same output that you specified, with <code>Hello World</code> appearing twice (the first time followed by a newline), you can start with <code>sys.stdout.write("{}\n".format(msg1))</code>, which would produce the output):</p>
<pre><code>Hello World
Im Back Here!Hello World
</code></pre>
</div>
<span class="comment-copy">How are you getting your input? IMO, that would have a strong influence on how one might approach things.</span>
<span class="comment-copy">This is a nice and elegant solution. Preferable for a more engineered approach, while mine above is straightforward to the point.</span>
<span class="comment-copy">Thank you! this solution helped a lot and works for me great! Really appreciated</span>
<span class="comment-copy">I appreciate the help, but this would overwrite the previous/first text, which I do not want to happen :( Thanks though!</span>
<span class="comment-copy">@petrexxy: why not overwrite? Your current print also overwrites whatever was on the screen.</span>
<span class="comment-copy">@petrexxy But overwriting is what you specified: This is how writing to stdout works, and it produces the output you specified. If you want the first output to still be there, you need to print it twice. I clarified my answer.</span>
