<div class="post-text" itemprop="text">
<p>I wanted to make a python Enum work having a reserved word as member.   </p>
<pre><code>class Test(Enum):

    one = "one"
    is_ = "is"
</code></pre>
<p>I wanted to customize <code>__name__</code> to have the usual syntax return</p>
<pre><code>&gt;&gt;&gt; print(Test.is_.name)
is
</code></pre>
<p>So how do I customize <code>__name__</code>, <code>__getattribute__</code> or <code>__getattr__</code> to accomplish this? </p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of mucking about with the internals, you could use the <a href="https://docs.python.org/3/library/enum.html#functional-api" rel="nofollow noreferrer"><code>Functional API</code></a> instead:</p>
<pre><code>Test = Enum('Test', [('one', 'one'), ('is', 'is'), ('is_', 'is')])
</code></pre>
<p>and in use:</p>
<pre><code>&gt;&gt;&gt; Test.one
&lt;Test.one: 'one'&gt;

&gt;&gt;&gt; Test.is
  File "&lt;stdin&gt;", line 1
    test.is
          ^
SyntaxError: invalid syntax

&gt;&gt;&gt; Test.is_
&lt;Test.is: 'is'&gt;

&gt;&gt;&gt; Test['is']
&lt;Test.is: 'is'&gt;

&gt;&gt;&gt; Test['is_']
&lt;Test.is: 'is'&gt;

&gt;&gt;&gt; Test('is')
&lt;Test.is: 'is'&gt;

&gt;&gt;&gt; list(Test)
[&lt;Test.one: 'one'&gt;, &lt;Test.is: 'is'&gt;]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's stored in a <em>single underscore</em> variable:</p>
<pre><code>&gt;&gt;&gt; Test.is_._name_ = 'is'                                                                                                                                       
&gt;&gt;&gt; Test.is_.name                                                                                                                                                
'is'
</code></pre>
<p>This will also fix up the repr's, and the call by member value still works:</p>
<pre><code>&gt;&gt;&gt; list(Test)                                                                                                                                                   
[&lt;Test.one: 'one'&gt;, &lt;Test.is: 'is'&gt;]
&gt;&gt;&gt; Test('is')                                                                                                                                                   
&lt;Test.is: 'is'&gt;
</code></pre>
<p>Attribute access will still have to use the declared name, of course, because otherwise it would be a syntax error.</p>
<p>To enable call by member name, patch it into the map:</p>
<pre><code>&gt;&gt;&gt; Test.is_._name_ = 'is'                                                                                                                                       
&gt;&gt;&gt; Test._member_map_['is'] = Test.is_                                                                                                                           
&gt;&gt;&gt; Test['is']                                                                                                                                                   
&lt;Test.is: 'is'&gt;
</code></pre>
<p>If you need more than a simple alias here, then you might want to remove the original name and/or take care to preserve ordering in the member map.</p>
</div>
<span class="comment-copy">You are absolutely right @Ethan Furman I only remembered Functional API after having asked the question, because I always favor class syntax (when possible) in creating enum.</span>
<span class="comment-copy">Note that this breaks accessing members by name, too; try <code>Test[Test.is_.name]</code></span>
