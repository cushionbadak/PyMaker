<div class="post-text" itemprop="text">
<p>I have a big chunk of text that I'm checking for a specific pattern, which looks essentially like this:</p>
<pre><code>     unique_options_search = new Set([
            "updates_EO_LTB",
            "us_history",
            "uslegacy",

etc., etc., etc.

        ]);

      $input.typeahead({
        source: [...unique_options_search],
        autoSelect: false,
        afterSelect: function(value) 
</code></pre>
<p>My text variable is named <code>'html_page'</code> and my start and end points look like this:</p>
<pre><code>start = "new Set(["
end = "]);"
</code></pre>
<p>I thought I could find what I want with this one-liner:</p>
<pre><code>r = re.findall("start(.+?)end",html_page,re.MULTILINE)
</code></pre>
<p>However, it's not returning anything at all.  What is wrong here?  I saw other examples online that worked fine.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are multiple problems here.</p>
<ol>
<li>As mentioned by @EthanK in comments, <code>"start(.+?)end"</code> in Python is a string which describes regex which literally matches <code>start</code>, then something, and then literally matches <code>end</code>. Variables <code>start</code> and <code>end</code> do not matter here at all.
You've probably meant to write <code>start + "(.+?)" + end</code> here instead.</li>
<li><code>.</code> in Python does not match newlines. <code>re.MULTILINE</code> does not matter here, it only changes behavior of <code>^</code> and <code>$</code> (see <a href="https://docs.python.org/3/library/re.html#re.MULTILINE" rel="nofollow noreferrer">docs</a>). You should use <code>re.DOTALL</code> instead (see <a href="https://docs.python.org/3/library/re.html#re.DOTALL" rel="nofollow noreferrer">docs</a>).</li>
<li>Values of <code>start</code> and <code>end</code> include characters with special meaning in regex (e.g. <code>(</code> and <code>[</code>). You have to make sure they're not treated specially. You can either escape them manually with the right number of <code>\</code> or simply delegate that work to <a href="https://docs.python.org/3/library/re.html#re.escape" rel="nofollow noreferrer"><code>re.escape</code></a> to get regular expression which literally matches what you need.</li>
</ol>
<p>Combining all that together:</p>
<pre><code>import re
html_page = """
     unique_options_search = new Set([
            "oecd_updates_EO_LTB",
            "us_history",
            "us_legacy",

etc., etc., etc.

        ]);

      $input.typeahead({
        source: [...unique_options_search],
        autoSelect: false,
        afterSelect: function(value) 
"""

start = "new Set(["
end = "]);"
# r = re.findall("start(.+?)end",html_page,re.MULTILINE)  # Old version
r = re.findall(re.escape(start) + "(.+?)" + re.escape(end), html_page, re.DOTALL)  # New version
print(r)
</code></pre>
</div>
<span class="comment-copy"><code>start</code> and <code>end</code> in the text literally match the words “start” and “end”, not the variables. Use <code>format()</code> to add the variables into the string.</span>
<span class="comment-copy">@EthanK or an <a href="https://stackoverflow.com/questions/47339121/how-do-i-convert-a-string-into-an-f-string">f-string</a>.</span>
<span class="comment-copy">@PeterWood Yes, but <code>format</code> is better.</span>
<span class="comment-copy">@EthanK why is <code>format</code> better? OP could just say <code>f"{start}(.+?){end}"</code> (as long as they're first escaped the values of start and end).</span>
<span class="comment-copy">@PeterWood, Oh yeah, sorry. You are right.</span>
<span class="comment-copy">For number 3: you can use a raw string. Begin the string like this for the regexp: <code>r'myMatchThing...'</code> with a <code>r''</code> to escape. Raw strings a better to use because they are built in to python.</span>
<span class="comment-copy">@EthanK raw strings do not help with no. 3. Parsing of regular expression happens inside <code>re</code> library, and <code>r"hello(["</code> is exactly the same as <code>"hello(["</code> (<code>r</code> only changes meaning of stuff like <code>\n</code>, is which processed by Python parser). See <a href="https://ideone.com/BvdhoV" rel="nofollow noreferrer">example</a></span>
<span class="comment-copy">Oh, right. Sorry. I got confused because I always add a raw string to my regexps. I didn’t see one so I thought one was needed.</span>
