<div class="post-text" itemprop="text">
<pre><code>a = [['dog===frog', 'cat===dog'], ['bird===bat', 'ball===call']]
</code></pre>
<p>Where <code>len(a)</code> can be as large as needed and <code>len(a[I])</code> can be as large as needed..</p>
<p>how can I get out <code>b = [['dog','frog','cat','dog'],['bird','bat','ball','call']]</code> ?</p>
<p>I have tried somethings along the line of</p>
<pre><code>[' '.join(x).split('===') for x in new_list]
</code></pre>
<p>and just general list comprehension with .join, but have had no luck.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>b = [sum([x.split('===') for x in sublist], []) for sublist in a]</code></p>
<p>should give you what you want. Works like this:</p>
<ul>
<li><code>split('===')</code> makes list from every string</li>
<li>you then add those using sum: <code>sum([['dog', 'frog'], ['cat', 'dog']], [])</code> is basically <code>['dog', 'frog'] + ['cat', 'dog']</code></li>
<li><code>sum([x.split('===') for x in sublist], [])</code> uses <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> to make a split list from all pieces of small list (<code>['dog===frog', 'cat===dog']</code>), which is the fed to <code>sum</code></li>
<li>and it's all wrapped in another comprehension that runs it for every part of your big list <code>a</code></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You could use a <a href="https://docs.python.org/3/tutorial/datastructures.html#nested-list-comprehensions" rel="nofollow noreferrer">nested list comprehension</a>:</p>
<pre><code>a = [['dog===frog', 'cat===dog'], ['bird===bat', 'ball===call']]
result = [[chunk for chunks in map(lambda e: e.split('='), sub) for chunk in chunks if chunk] for sub in a]
print(result)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[['dog', 'frog', 'cat', 'dog'], ['bird', 'bat', 'ball', 'call']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>chain.from_iterable</code></a> to flatten the results of splitting the strings in a list into a single list</p>
<pre><code>from itertools import chain

[list(chain.from_iterable(s.split('===') for s in sub)) for sub in a]
# [['dog', 'frog', 'cat', 'dog'], ['bird', 'bat', 'ball', 'call']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a one-liner using list comprehension.</p>
<p><code>[[word for element in sublist for word in element.split('===')] for sublist in a]</code></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import numpy as np
a = [['dog===frog', 'cat===dog'], ['bird===bat', 'ball===call']]
a = [ i.split('===') for i in np.array(a).ravel()]
</code></pre>
<p>Output:</p>
<pre><code>[['dog', 'frog'], ['cat', 'dog'], ['bird', 'bat'], ['ball', 'call']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def flatten(seq):
    """list -&gt; list                                                                                                                                                                           
    return a flattend list from an abitrarily nested list                                                                                                                                     
    """
    if not seq:
        return seq
    if not isinstance(seq[0], list):
        return [seq[0]] + flatten(seq[1:])
    return flatten(seq[0]) + flatten(seq[1:])

b=[[j.split("===") for j in i] for i in a]
c=[flatten(i) for i in b]
c
    [['dog', 'frog', 'cat', 'dog'], ['bird', 'bat', 'ball', 'call']]
</code></pre>
</div>
<span class="comment-copy">perfection...and a 1-liner!!</span>
