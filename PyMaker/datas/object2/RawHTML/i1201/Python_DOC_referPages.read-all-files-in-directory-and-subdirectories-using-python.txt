<div class="post-text" itemprop="text">
<p>What is the best way to represent a Windows directory, for example <code>"C:\meshes\as"</code>? I have been trying to modify a script but it never works because I can't seem to get the directory right, I assume because of the <code>'\'</code> acting as escape character?</p>
</div>
<div class="post-text" itemprop="text">
<p>you can use always:</p>
<pre><code>'C:/mydir'
</code></pre>
<p>this works both in linux and windows.
Other posibility is</p>
<pre><code>'C:\\mydir'
</code></pre>
<p>if you have problems with some names you can also try raw string literals:</p>
<pre><code>r'C:\mydir'
</code></pre>
<p>however best practice is to use the <code>os.path</code> module functions that always select the correct configuration for your OS:</p>
<pre><code>os.path.join(mydir, myfile)
</code></pre>
<p>From python 3.4 you can also use the <a href="https://docs.python.org/3/library/pathlib.html#operators" rel="noreferrer">pathlib</a> module. This is equivelent to the above:</p>
<pre><code>pathlib.Path(mydir, myfile)
</code></pre>
<p>or</p>
<pre><code>pathlib.Path(mydir) / myfile
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the <code>os.path</code> module.</p>
<pre><code>os.path.join( "C:", "meshes", "as" )
</code></pre>
<p>Or use raw strings</p>
<pre><code>r"C:\meshes\as"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, <code>\</code> in Python string literals denotes the start of an escape sequence. In your path you have a valid two-character escape sequence <code>\a</code>, which is collapsed into <em>one</em> character that is <a href="https://en.wikipedia.org/wiki/Bell_character" rel="noreferrer">ASCII Bell</a>:</p>
<pre><code>&gt;&gt;&gt; '\a'
'\x07'
&gt;&gt;&gt; len('\a')
1
&gt;&gt;&gt; 'C:\meshes\as'
'C:\\meshes\x07s'
&gt;&gt;&gt; print('C:\meshes\as')
C:\meshess
</code></pre>
<p>Other common escape sequences include <code>\t</code> (tab), <code>\n</code> (line feed), <code>\r</code> (carriage return):</p>
<pre><code>&gt;&gt;&gt; list('C:\test')
['C', ':', '\t', 'e', 's', 't']
&gt;&gt;&gt; list('C:\nest')
['C', ':', '\n', 'e', 's', 't']
&gt;&gt;&gt; list('C:\rest')
['C', ':', '\r', 'e', 's', 't']
</code></pre>
<p>As you can see, in all these examples the backslash and the next character in the literal were grouped together to form a single character in the final string. The full list of Python's escape sequences is <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="noreferrer">here</a>.</p>
<p>There are a variety of ways to deal with that:</p>
<ol>
<li><p><a href="https://stackoverflow.com/q/4780088/2301450">Python will not process escape sequences in string literals prefixed with <code>r</code> or <code>R</code></a>:</p>
<pre><code>&gt;&gt;&gt; r'C:\meshes\as'
'C:\\meshes\\as'
&gt;&gt;&gt; print(r'C:\meshes\as')
C:\meshes\as
</code></pre></li>
<li><p>Python on Windows should handle forward slashes, too.</p></li>
<li><p>You could use <a href="https://docs.python.org/3/library/os.path.html#os.path.join" rel="noreferrer"><code>os.path.join</code></a> ...</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.join('C:', os.sep, 'meshes', 'as')
'C:\\meshes\\as'
</code></pre></li>
<li><p>... or the newer <a href="https://docs.python.org/3/library/pathlib.html" rel="noreferrer"><code>pathlib</code> module</a></p>
<pre><code>&gt;&gt;&gt; from pathlib import Path
&gt;&gt;&gt; Path('C:', '/', 'meshes', 'as')
WindowsPath('C:/meshes/as')
</code></pre></li>
</ol>
</div>
<span class="comment-copy">Thanks guys, '/' worked fine, but the other hints are appreciated.</span>
<span class="comment-copy">@Gareth, I am very lazy and often found myself using '/'. However in the long run the use of os.path is more convenient. It also allows you to use mydir and myfile as variables that you can easily modify.</span>
<span class="comment-copy">The only thing to be careful with on raw strings is that they can't end with \</span>
<span class="comment-copy">You can use os.path.join() to remove the need to end paths with \.</span>
<span class="comment-copy">I like the r (raw string) syntax. Useful if you're copying a long path where you'd usually have to replace all the backslashes with forward slashes</span>
<span class="comment-copy">os.path.join may not behave as you expect when a component is a drive letter, since relative paths are allowed even then.  (The result of the first line is 'C:meshes\\as' on Windows.)</span>
<span class="comment-copy">@dash-tom-bang's comment is really important. Is the right thing to do to put <code>"C:\"</code> as the first entry? Does that mess up some of cleanliness of using <code>join</code>?</span>
<span class="comment-copy">@JackO'Connor that's what I do. You certainly do not want to put <code>"C:\"</code> in the middle of the file name. Besides, you can use <code>os.path.normpath</code> before or after a join, to make sure the path gets printed nicely.</span>
<span class="comment-copy">but it doesn't work either. What works is <code>os.path.join( "C:\\", "meshes", "as" )</code></span>
