<div class="post-text" itemprop="text">
<p>Python seems to be automatically converting strings (not just input) into raw strings. Can somebody explain what is happening here?</p>
<pre><code>Python 3.7.1 (v3.7.1:260ec2c36a, Oct 20 2018, 14:57:15) [MSC v.1915 64 bit 
(AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; s = '\stest'
&gt;&gt;&gt; s
'\\stest'
# looks like a raw string
&gt;&gt;&gt; print(s)
\stest
&gt;&gt;&gt; s = '\ntest'
&gt;&gt;&gt; s
'\ntest'
# this one doesn't
&gt;&gt;&gt; s = '\n test'
&gt;&gt;&gt; s
'\n test'
&gt;&gt;&gt; s = r'\n test'
&gt;&gt;&gt; s
'\\n test'
&gt;&gt;&gt; print(s)
\n test
</code></pre>
<p>The <a href="https://stackoverflow.com/questions/24085680/why-do-backslashes-appear-twice">question marked as a duplicate</a> for this one seems to be useful, but then I do not understand why</p>
<pre><code>&gt;&gt;&gt; s = '\n test'
&gt;&gt;&gt; s
'\n test'
&gt;&gt;&gt; repr(s)
"'\\n test'"
</code></pre>
<p>does not get two backslashes when called, and does when <code>repr()</code> is called on it.</p>
</div>
<div class="post-text" itemprop="text">
<p>\n is a valid escape sequence and <code>'\n'</code> is a length 1 string (new line character).  In contrast, \s is an invalid escape sequence, so Python is <strong>assuming</strong> that what you wanted there was a two character string: a backlash character plus an s character.</p>
<pre><code>&gt;&gt;&gt; len('\s')
2
</code></pre>
<p>What you saw on terminal output was just the usual representation for such a length 2 string.  Note that the correct way to create the string which Python gave you back here would have been with <code>r'\s'</code> or with <code>'\\s'</code>.</p>
<pre><code>&gt;&gt;&gt; r'\s' == '\\s' == '\s'
True
</code></pre>
<p><strong>This is a deprecated behavior</strong>.  In a future version of Python, likely the next point release, your code will be a syntax error.</p>
<p>Since you're using v3.7.1, you could enable warnings if you want to be informed about such uses of deprecated features:</p>
<pre><code>$ python -Wall
&gt;&gt;&gt; '\s'
&lt;stdin&gt;:1: DeprecationWarning: invalid escape sequence \s
'\\s'
</code></pre>
<p>As for your subsequent question after the edit:</p>
<pre><code>&gt;&gt;&gt; s = '\n test'
&gt;&gt;&gt; s  # this prints the repr(s)
'\n test'
&gt;&gt;&gt; repr(s)  # this prints the repr(repr(s))
"'\\n test'"
</code></pre>
</div>
<span class="comment-copy">From my understanding, python seems to be detecting whether the character following the backslash has a meaning if combined with it or not, and if it does have it then it does not escape it. If it has it, it leaves it be.</span>
<span class="comment-copy">The proposed duplicate didn't actually explain why the terminal output is different for <code>s</code> vs <code>repr(s)</code>, so reopened.</span>
<span class="comment-copy">That last addition was what made me understand the issue. So the deprecated behaviour is the introduction of a backslash followed by a "non-meaningful" character, like <code>\s</code>, and the correct way to try to introduce said strings from now on will be by escaping any backslash that is not followed by a "meaningful" character, like <code>n</code>, <code>t</code>, <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">etc.</a></span>
