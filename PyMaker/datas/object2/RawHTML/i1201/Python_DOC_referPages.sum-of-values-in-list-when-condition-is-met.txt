<div class="post-text" itemprop="text">
<p>I have a python list <code>l</code> containing instances of the class <code>Element</code>:</p>
<pre class="lang-py prettyprint-override"><code>class Element:
    def __init__(self, id, value):
        self.id = id
        self.value = value

l = [Element(1, 100), Element(1, 200), Element(2, 1), Element(3, 4), Element(3, 4)]
</code></pre>
<p>Now I want to sum all <code>value</code> members of the classes <code>Elements</code> if their <code>id</code> is equal to obtain this list:</p>
<pre class="lang-py prettyprint-override"><code>l = [Element(1, 300), Element(2, 1), Element(3, 8)]
</code></pre>
<p>What is the most pythonic way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>There is (almost?) nothing that <code>itertools</code> cannot do. Take a look at <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>groupby</code></a>:</p>
<pre><code>from itertools import groupby
from operator import attrgetter


class Element:
    def __init__(self, id, value):
        self.id = id
        self.value = value
    def __repr__(self):  # kudos @mesejo
        return "Element({}, {})".format(self.id, self.value)

l = [Element(1, 100), Element(1, 200), Element(2, 1), Element(3, 4), Element(3, 4)]

l.sort(key=attrgetter('id'))  # if it is already sorted by 'id', comment-out

res = [Element(g, sum(sub.value for sub in k)) for g, k in groupby(l, key=attrgetter('id'))]
</code></pre>
<p>which results in:</p>
<pre><code>print(res)   # [Element(1, 300), Element(2, 1), Element(3, 8)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way would be to create a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a> that maps ids to sums of values.  Then we can take those results and use them to build a new list of <code>Elements</code>.  One way to do that is to use <a href="https://docs.python.org/3/library/itertools.html#itertools.starmap" rel="nofollow noreferrer"><code>starmap</code></a> to map the items of that dictionary to the arguments to <code>Element</code></p>
<pre><code>from collections import defaultdict
from itertools import starmap

class Element:
    def __init__(self, id, value):
        self.id = id
        self.value = value
    def __repr__(self):
        return "Element({}, {})".format(self.id, self.value)

l = [Element(1, 100), Element(1, 200), Element(2, 1), Element(3, 4), Element(3, 4)]

d = defaultdict(int)

for e in l:
    d[e.id] += e.value

print(list(starmap(Element, d.items())))
# [Element(1, 300), Element(2, 1), Element(3, 8)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could also get the desired result using <code>set</code> to get just the unique ids and <code>sum</code> to total the values. For example:</p>
<pre><code>class Element:
    def __init__(self, id, value):
        self.id = id
        self.value = value

l = [Element(1, 100), Element(1, 200), Element(2, 1), Element(3, 4), Element(3, 4)]

ids = set(elem.id for elem in l)
totals = [Element(i, sum(elem.value for elem in l if elem.id == i)) for i in ids]
# [Element(1, 300), Element(2, 1), Element(3, 8)]
</code></pre>
</div>
<span class="comment-copy">It's worth noting that this requires the list to be sorted by <code>id</code> already.</span>
<span class="comment-copy">@PatrickHaugh Forgot that again.. Thanks.</span>
