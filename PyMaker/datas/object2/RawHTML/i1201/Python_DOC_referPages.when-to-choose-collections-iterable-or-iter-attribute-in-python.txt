<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1952464/in-python-how-do-i-determine-if-an-object-is-iterable">In Python, how do I determine if an object is iterable?</a>
<span class="question-originals-answer-count">
                    20 answers
                </span>
</li>
</ul>
</div>
<p>In this <a href="https://stackoverflow.com/questions/1952464/in-python-how-do-i-determine-if-an-object-is-iterable">question</a> there are numerous ways to test for an iterable.  Two of the solutions are:</p>
<ol>
<li><code>hasattr(object, '__iter__')</code></li>
<li><code>isinstance(object, collections.Iterable)</code></li>
</ol>
<p>They both seem to do the same thing and I can't find any doc that differentiates them.  What is the difference and why would I choose one over the other?</p>
</div>
<div class="post-text" itemprop="text">
<p>The pythonic way is</p>
<ul>
<li>assume it is iterable</li>
<li>catch the exception if it is not</li>
</ul>
<p>However, use it with common sense. That's, do it only if you have reason to believe that your object is iterable in the majority of cases.</p>
<blockquote>
<p>Also, take care of strings, which are treated as iterables, but in most practical use cases, they should not be. In that case, the practice is to explicitly check <code>isinstance(.., str)</code></p>
</blockquote>
</div>
<span class="comment-copy">3. Try and iterate it and catch the exception if it fails.</span>
<span class="comment-copy">This follows the <a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow noreferrer">EAFP</a> principle in Python.</span>
<span class="comment-copy">@AndrewF: exactly. however, common sense should dictate whether that's appropriate, depending on the context</span>
<span class="comment-copy">@blue_note the question has been edited for clarity.</span>
