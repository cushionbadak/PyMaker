<div class="post-text" itemprop="text">
<p>I have a function that gest 2 file paths: </p>
<pre><code>def f(local, remote):
</code></pre>
<p><code>remote</code> path can be a simple <code>a/b/c</code> or a bit more complex - <code>a*/b/c*</code>. If I want for example to check if <code>remote</code> files exist I can do that using <code>lambda</code>:</p>
<pre><code>apply_on_star = lambda func, path : map(func, glob.glob(path)) if '*' in path else func(path)
# and call it with:
any(apply_on_star(os.path.isfile, remote_path))
</code></pre>
<p>However, if I want to check file's size, I'm using <code>os.stat(path).st_size</code> and that's I'm not sure how to insert into a <code>lambda</code>.</p>
<p>What I want in the end is something like this: <code>lambda compare_sizes file_A, file_B_may_contain_star : os.stat(file_A ).st_size == apply_on_star(os.stat.st_size, file_B_may_contain_star)</code></p>
<p>where the inner <code>apply_on_star</code> would get the sizes of the each file in <code>file_B_may_contain_star</code> but that wouldn't work. Can <code>reduce</code> or <code>lambda</code> or something else be useful here or must I write it in a function?</p>
<p><em>Just to clarify - I want to take 2 paths, A,B where B may contain '*' and check if size(A) == size(B) if B does not contain '*', else compare size(A) with each and one of size(glob.glob(B)). One option I think of, is compare all files in B using <code>reduce</code>, and then, if same, compare to A, but I don't know how to</em></p>
</div>
<div class="post-text" itemprop="text">
<p>One way you might be able to get away with this is the <a href="https://pypi.org/project/pathlib2/" rel="nofollow noreferrer"><code>pathlib2</code></a> library (the backport of <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code></a> in Python3's standard library). To get a file's size, you can do <code>Path('file').stat().st_size</code>, and it also supports Glob in the form of <code>Path('parent').glob('star_pattern')</code>.</p>
<p>So maybe something like</p>
<pre><code>from pathlib2 import Path

def compare_sizes(file_a, file_b_may_glob):
    size_a = Path(file_a).stat().st_size
    sizes_b =[fp.stat().st_size for fp in Path().glob(file_b_may_glob)]
    return any(size_a==size_b in sizes_b)

# or, as a lambda
lambda file_a, file_b_may_glob: any(Path(file_a).stat().st_size == fp.stat().st_size for fp in Path().glob(file_b_may_glob))
</code></pre>
<p>Though I'm not sure how to test it against your example.</p>
</div>
<span class="comment-copy">I hear it's a cardinal sin to try and cram all the things into a lambda. Why not just create a function?</span>
<span class="comment-copy">seems neat I guess</span>
<span class="comment-copy">The neatest way is to simply create a nested inner func then pass it. <code>lambda</code>s should really be limited to anonymous functions that are defined in the args of calls.</span>
<span class="comment-copy">Yeah, in general it's discouraged to use a lambda if you're just assigning it to a variable to be used as a function. Just making a function is clearer and more supportable/extendable.</span>
