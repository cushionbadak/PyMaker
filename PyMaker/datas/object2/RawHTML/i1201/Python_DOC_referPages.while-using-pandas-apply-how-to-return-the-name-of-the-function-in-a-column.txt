<div class="post-text" itemprop="text">
<p>Assume the following pandas dataframe:</p>
<pre><code>A
1
1
2
4
10
</code></pre>
<p>And the following function:</p>
<pre><code>def sum(A):
    return 2 + A
</code></pre>
<p>I am applying sum function to the pandas dataframe as follows:</p>
<pre><code>df['sum'] = df['A'].apply(sum)
</code></pre>
<p>How can return the name of the function in another column? For instance the expected output would look like this:</p>
<pre><code>A sum func_name
1   3   sum
1   3   sum
2   4   sum
4   6   sum
10  12  sum
</code></pre>
<p>The reason is that I would like to keep track on what applied on each value.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to get the function name, another option is using <code>f.__name__</code>. Example:</p>
<pre><code>def mysum(X):
    return 2 + X

def foo(X, function):
    return pd.Series({
        function.__name__: function(X), 'func_name': function.__name__})

df.join(df.A.apply(foo, function=mysum))

    A  mysum func_name
0   1      3     mysum
1   1      3     mysum
2   2      4     mysum
3   4      6     mysum
4  10     12     mysum
</code></pre>
<p></p>
<pre><code>def myprod(X):
    return 2 * X    

df.join(df.A.apply(foo, function=myprod))

    A  myprod func_name
0   1       2    myprod
1   1       2    myprod
2   2       4    myprod
3   4       8    myprod
4  10      20    myprod
</code></pre>
<p>I assume you are already familiar with the pitfalls of using <code>apply</code> this way. I've written this under the assumption that your function is a stand-in for something a lot more complex. But in general, you should try to vectorize where possible.</p>
<hr/>
<p>If you want more flexibility naming the output column, you can add a keyword argument <code>name</code>:</p>
<pre><code>def foo(X, function, name=None):
    name = name if name else function.__name__
    return pd.Series({
        name: function(X), 'func_name': function.__name__})

df.join(df.A.apply(foo, function=mysum, name='sum'))

    A  sum func_name
0   1    3     mysum
1   1    3     mysum
2   2    4     mysum
3   4    6     mysum
4  10   12     mysum
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may check <code>inspect</code></p>
<pre><code>import inspect

def SUM(A):
    return pd.Series([2 + A,  inspect.stack()[0][3]],index=['value','func_name'])
df['A'].apply(SUM)
Out[5]: 
   value func_name
0      3       SUM
1      3       SUM
2      4       SUM
3      6       SUM
4     12       SUM
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you need to use the name of your function, use a dictionary as a dispatcher. This is clean and reliable. It avoids having to shadow the built-in <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum</code></a> function, which is <a href="https://stackoverflow.com/a/9109489/9209546">not recommended</a>.</p>
<pre><code>def summer(A):
    return 2 + A

def apply_func(s, func):
    d = {'sum': summer}
    return s.apply(d[func]), func

df['sum'], df['func_name'] = apply_func(df['A'], 'sum')

print(df)

    A  sum func_name
0   1    3       sum
1   1    3       sum
2   2    4       sum
3   4    6       sum
4  10   12       sum
</code></pre>
<p>With Pandas, you should <strong>avoid</strong> <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.apply.html" rel="nofollow noreferrer"><code>pd.Series.apply</code></a>, as this represents an inefficient Python-level loop. In this case, your function can be trivially vectorised by redefining <code>apply_func</code>:</p>
<pre><code>def apply_func(s, func):
    d = {'sum': summer}
    return d[func](s), func
</code></pre>
</div>
<span class="comment-copy">Well, it is already in your columns name. If you iterate over functions, you can get their name: <code>for func in funcs: df[func.__name__] = df['A'].apply(func)</code>.</span>
<span class="comment-copy">please, please, avoid overwriting python builtin functions like <code>sum</code></span>
<span class="comment-copy">What happens if the function is anonymous? (<code>df['A'].apply(lambda a: 2 + a)</code>)</span>
<span class="comment-copy">@ernest_k, This is <i>exactly</i> the reason why an <b>explicit</b> dictionary-based mapping should be preferred. Tried to explain this in my answer.</span>
