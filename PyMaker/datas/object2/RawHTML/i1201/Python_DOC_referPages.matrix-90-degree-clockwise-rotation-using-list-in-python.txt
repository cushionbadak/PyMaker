<div class="post-text" itemprop="text">
<p>I'm trying to rotate a 3*3 matrix clockwise 90 degrees in python.
I've identified that element at [ i ][ j ] goes to [ j ][ new_i ].
Here new_i depends upon the previous i, so i made a function for it called circular subtraction. </p>
<p>if i is 0 then new_i is 2</p>
<p>if i is 1 then new_i is 1</p>
<p>if i is 2 then new_i is 0</p>
<p>after execution, it gave me unexpected results.</p>
<p>I've printed everything that is happening in each iteration.
I am unable to figure out how some elements are getting replaced with different ones.</p>
<pre><code>'''
1 2 3                       7 4 1
4 5 6  rotate 90 degrees    8 5 2
7 8 9                       9 6 3


'''

def circular_subtraction(i):
    new_i = i 
    if(i==0):
        new_i = 2
    elif(i==1):
        new_i = 1
    elif(i==2):
        new_i = 0
    return new_i


def rotate_clock(matrix):
    new_matrix = matrix

for i in range(len(matrix)):
    for j in range(len(matrix)):
        new_i = circular_subtraction(i)
        new_matrix[j][new_i] = matrix[i][j]
        print("New element added from {},{} to {},{} ::: {} to {}".format(i+1,j+1,j+1,new_i+1,matrix[i][j],new_matrix[j][new_i]))

for each_row in new_matrix:
    print(each_row)




matrix = [[1,2,3],[4,5,6],[7,8,9]]
print("Length of the matrix : ",len(matrix))
for each_row in matrix:
    print(each_row)
print()
matrix = rotate_clock(matrix)
</code></pre>
<p>the input matrix was </p>
<pre><code>[1, 2, 3]
[4, 5, 6]
[7, 8, 9]
</code></pre>
<p>The expected result was:</p>
<pre><code>[7, 4, 1]
[8, 5, 2]
[9, 6, 3]
</code></pre>
<p>Result is:</p>
<pre><code>[7, 4, 1]
[2, 5, 2]
[1, 2, 1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the numpy rot90 function for this: <a href="https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.rot90.html" rel="nofollow noreferrer">np.rot90</a></p>
<pre><code>mat = [[1, 2, 3], [4,5,6,], [7,8,9]]
np.rot90(mat, k=1, axes=(1,0))
</code></pre>
<p>k - indicates number of rotations<br/>
axes - indicates the direction of rotation </p>
<p><strong>Output</strong></p>
<pre><code>array([[7, 4, 1],
   [8, 5, 2],
   [9, 6, 3]])
</code></pre>
<h2>The issue in your code</h2>
<p>The code is missing indents (but assuming they are correct)<br/>
the line :</p>
<pre><code>new_matrix = matrix
</code></pre>
<p>assigns a new reference to the matrix variable.<br/>
In python the default isn't copy by value. 
You can use deep copy function : <a href="https://docs.python.org/3/library/copy.html#copy.deepcopy" rel="nofollow noreferrer">copy.deepcopy(x[, memo])</a></p>
<pre><code>import copy

def rotate_clock(matrix):
    new_matrix = copy.deepcopy(matrix)
</code></pre>
<p><strong>OR</strong></p>
<pre><code>def rotate_clock(matrix):
    new_matrix = [row[:] for row in matrix]
</code></pre>
<p>Otherwise, each change you make to new_matrix is being done in the original matrix as well. (since new_matrix is just a reference to matrix)</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do something like this:</p>
<pre><code>matrix = [[1, 2, 3],
          [4, 5, 6],
          [7, 8, 9]]

rotated = [list(reversed(col)) for col in zip(*matrix)]

for row in rotated:
    print(*row)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>7 4 1
8 5 2
9 6 3
</code></pre>
<p>The <code>for col in zip(*matrix)</code> gets the column of the matrix, once you have the columns you need to reverse them using <code>list(reversed(col))</code>, then use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> to put all together:</p>
<pre><code>rotated = [list(reversed(col)) for col in zip(*matrix)]
</code></pre>
<p>The above list comprehension is equivalent to the following less <em>pythonic</em> for loop:</p>
<pre><code>rotated = []
for col in zip(*matrix):
    rotated.append(list(reversed(col)))
</code></pre>
<p><strong>Further</strong></p>
<ol>
<li>Documentation on <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip</a>, <a href="https://docs.python.org/3/library/functions.html#reversed" rel="nofollow noreferrer">reversed</a> and <a href="https://docs.python.org/3/library/stdtypes.html#list" rel="nofollow noreferrer">list</a>.</li>
<li>The notation <code>*matrix</code> is known as tuple unpacking, more <a href="https://stackoverflow.com/questions/3480184/unpack-a-list-in-python">here</a>.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.rot90.html" rel="nofollow noreferrer"><code>numpy.rot90</code></a> could come handy as well:</p>
<pre><code>import numpy as np

a = [[1, 2, 3],
     [4, 5, 6],
     [7, 8, 9]]
a_rot = np.rot90(a, k=3).tolist()
for row in a_rot:
  print(row)
</code></pre>
<p>Output</p>
<pre><code>[7, 4, 1]
[8, 5, 2]
[9, 6, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A general method to rotate the <code>Matrix</code>, irrespective of shape.</p>
<pre><code>import numpy as np
A=np.array([[1, 2, 3, 33], [4, 5, 6, 66], [7, 8, 9, 99]])
A
array([[ 1,  2,  3, 33],
       [ 4,  5,  6, 66],
       [ 7,  8,  9, 99]])

rotated_A=np.zeros((len(A[0]),len(A)))
for i in range(len(A)):
    for j in range(len(A[0])):
        rotated_A[j][len(A)-1-i]=A[i][j]
rotated_A
array([[  7.,   4.,   1.],
       [  8.,   5.,   2.],
       [  9.,   6.,   3.],
       [ 99.,  66.,  33.]])
</code></pre>
</div>
<span class="comment-copy">Please try to point out the mistake in the above code. I know it can be done with numpy very easily, but I wanted to try it manually.</span>
<span class="comment-copy">Thanks. That's what I wanted.</span>
<span class="comment-copy">so we rotate each column and then convert it into a row?</span>
<span class="comment-copy">Yes, you get each column, reverse it and convert it into a row.</span>
<span class="comment-copy">That's amazing.</span>
<span class="comment-copy">Can you point out what was wrong with my code?</span>
