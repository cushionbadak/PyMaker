<div class="post-text" itemprop="text">
<p>I've used multi-threading a lot, while appending to the same list from different threads. Everything worked fine.</p>
<p>However, I'm getting a problem with list appending when the threads are like 70 threads or more. Appending in the last thread gets stuck for like 5 mins (the processor is not occubied at this time, maybe 10 %. So, it's not a hardware problem I would say). Then appending occurs successfully.</p>
<p>At this <a href="https://docs.python.org/3/faq/library.html#what-kinds-of-global-value-mutation-are-thread-safe" rel="nofollow noreferrer">link</a>, it says that list appending is thread-safe.</p>
<p><strong>My question is: Can list appending ever become not thread safe?</strong></p>
<p>Don't ask for a code or so. I just need a simple yes or no to my question. And if yes, kindly provide suggestions to fix that.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><strong>list appending in python is thread safe.</strong></p>
</blockquote>
<p>You last thread gets stuck maybe due to other reason, for example: Memory allocating..</p>
<p>My first step to fix the stuck is use <code>strace</code> to trace the syscall.</p>
<p>And you can use <code>gdb</code> to print all threads' call stack too. Here is a wiki page: <a href="https://wiki.python.org/moin/DebuggingWithGdb" rel="nofollow noreferrer">https://wiki.python.org/moin/DebuggingWithGdb</a></p>
</div>
<span class="comment-copy">The thread safety is effectively <a href="https://stackoverflow.com/questions/6319207/are-lists-thread-safe">achieved by Python through the GIL</a> and with 70 threads it is possible for a single thread to be locked out and not be able to do anything for quite some time as only one will be executing at a time.</span>
