<div class="post-text" itemprop="text">
<p>I am new to threading and processes. I have been trying to understand <code>asyncio</code>.  Researching <code>asyncio</code> on <a href="https://pymotw.com/3/concurrency.html" rel="nofollow noreferrer">Doug Hellinger's Python Module of the Week section of Concurrency</a>, I ran into the <code>multiprocessing</code>, <code>threading</code>, <code>signal</code> and <code>subprocess</code> modules.</p>
<p>I have been wondering why the name <code>subprocess</code> module was named thus. Why is the module not called process. And what is 'sub' [meaning below] about it?  </p>
<p><strong>Edit: Forgotten addition</strong></p>
<p>There's a <code>Popen</code> class and I assume the 'P' stands for process. 
The <a href="https://github.com/python/cpython/blob/master/Lib/subprocess.py" rel="nofollow noreferrer">Github code comment</a> says:</p>
<blockquote>
<p>Popen(...): A class for flexibly executing a command in a new process</p>
</blockquote>
<p>Doesn't the existence of the <code>Popen</code> class, give more reason to call the module <code>process</code> instead of <code>subprocess</code>? </p>
</div>
<div class="post-text" itemprop="text">
<p>Processes in most operating systems form a parent-child relationship. Processes created by another process are called <a href="https://en.wikipedia.org/wiki/Child_process" rel="nofollow noreferrer">child processes or subprocesses</a> of that process:</p>
<blockquote>
<p>A <strong>child process</strong> in computing is a process created by another
  process (the parent process). This technique pertains to multitasking
  operating systems, and is sometimes called a <strong>subprocess</strong> or
  traditionally a <strong>subtask</strong>.</p>
</blockquote>
<p>Python <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">subprocess</a> module provides facilities to create new child processes (i.e. every process created with this module will be subprocess of your Python program):</p>
<blockquote>
<p>The subprocess module allows you to <strong>spawn new processes</strong>, connect to
  their input/output/error pipes, and obtain their return codes.</p>
</blockquote>
<p>It does not deal with arbitrary processes, so it makes sense to name it <code>subprocess</code> instead of just <code>process</code>.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>subprocess provides an API for creating and communicating with secondary processes. </p>
</blockquote>
<p>The "sub" in the module name refers to the fact that all processes you are going to start here will be child processes of your running Python process. They exist to support your Python code.</p>
</div>
