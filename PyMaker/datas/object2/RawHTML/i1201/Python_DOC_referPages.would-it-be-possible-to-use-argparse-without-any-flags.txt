<div class="post-text" itemprop="text">
<p>Would it be possible to use <code>argparse</code> without any flags?</p>
<p>For example, whenever no flags (<code>-u</code> or <code>-i</code> in this case) are provided, I would like the script to process the first argument <code>sys.argv[1]</code> as IP Address.</p>
<p><strong>The code</strong></p>
<pre><code>import argparse, sys

parser = argparse.ArgumentParser()

parser.add_argument('-u')
parser.add_argument('-i')

args = parser.parse_args()

if args.i:
    print("IP Address is " + args.i)
elif args.u:
    print("URL is " + args.u)
elif len(sys.argv) &gt; 1: 
    print("IP Address is " + sys.argv[1])
else: 
    print("No arguments ")
</code></pre>
<p><strong>Normal output</strong></p>
<pre><code>C:\&gt;python script.py
No arguments

C:\&gt;python script.py 8.8.8.8
usage: script.py [-h] [-u U] [-i I]
script.py: error: unrecognized arguments: 8.8.8.8

C:\&gt;python script.py -i 8.8.8.8
IP Address is 8.8.8.8

C:\&gt;
</code></pre>
<p>My desired output even if no flags (<code>-u</code> or <code>-i</code>) provided.</p>
<pre><code>C:\&gt;python script.py 8.8.8.8
IP Address is 8.8.8.8

C:\&gt;python script.py -i 8.8.8.8
IP Address is 8.8.8.8
</code></pre>
<p>If there is better alternative, please let me know.</p>
</div>
<div class="post-text" itemprop="text">
<p>You may use <a href="https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.parse_known_args" rel="nofollow noreferrer"><code>ArgumentParser.parse_known_args()</code></a></p>
<pre><code>import argparse
parser = argparse.ArgumentParser()

parser.add_argument('-u')
parser.add_argument('-i')

args, ip = parser.parse_known_args()

if args.i:
    print("IP Address is " + args.i)
elif args.u:
    print("URL is " + args.u)
elif ip:
    print("IP Address is " + ip[0])
else:
    print('No argument provided')
</code></pre>
<hr/>
<p>The disadvantage of this is that it wont show up on the help (unless you include it somewhere or modify the <code>HelpFormatter</code>).</p>
<hr/>
<p>An other solution is to use a mutually exclusive group with a positional arguments that uses <code>nargs='?'</code>:</p>
<pre><code>import argparse, sys

parser = argparse.ArgumentParser()

parser.add_argument('-u')
group = parser.add_mutually_exclusive_group()

group.add_argument('-i')
group.add_argument('ip', nargs='?')

args = parser.parse_args()

if args.i:
    print("IP Address is " + args.i)
elif args.ip:
    print("IP Address is " + args.ip)
elif args.u:
    print("URL is " + args.u)
else:
    print('No argument provided')
</code></pre>
<p>So that when trying to specifying both a positional argument and <code>-i</code> you get the error:</p>
<pre><code>$ script.py 2.3.4.5 -i 1.2.3.4
usage: script.py [-h] [-u U] [-i I | ip]
p.py: error: argument -i: not allowed with argument ip
</code></pre>
<p>This will show that you can either use <code>-i IP</code> or the positional argument, although the syntax might be slightly difficult to read to people not used to the commandline:</p>
<pre><code>$ script.py -h
usage: script.py [-h] [-u U] [-i I | ip]

positional arguments:
  ip

optional arguments:
  -h, --help  show this help message and exit
  -u U
  -i I
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could do something like this:</p>
<pre><code>import argparse

parser = argparse.ArgumentParser()

parser.add_argument('-i', dest='type', action='store_const',
                    const='ip', default='ip')
parser.add_argument('-u', dest='type', action='store_const',
                    const='url')

parser.add_argument('location', nargs='?', default=None)

args = parser.parse_args()

if args.location is not None:
    if args.type == 'ip':
        print("IP Address is " + args.location)
    elif args.type == 'url':
        print("URL is " + args.location)
else:
    print("No argument provided")
</code></pre>
<p>Here we use the options as a way to specify the type and make location a required argument.  The type will default to <code>ip</code>, so it gives the default behavior you require, but you can use both <code>-i</code> and <code>-u</code> to be more explicit.</p>
</div>
<span class="comment-copy">What about <code>python script.py 1.2.3.4 -i 5.6.7.8</code>? I don't think you can easily do this in <code>argparse</code> directly, I'd think about post-processing the object it produces.</span>
<span class="comment-copy">nice, +1, this looks like the proper way!</span>
<span class="comment-copy">The other disadvantage with <code>parse_known_arguments()</code> is that argparse won't error on something that is unrecognized... it'll just pass it on thru.  That's probably not a behavior you really want.</span>
<span class="comment-copy">@JohnSzakmeister In the Op's MWE they are not checking IP validity or anything. Obviously you will check the length and parse the IP.</span>
<span class="comment-copy">@GiacomoAlzetta that's not what I meant.  <code>parse_known_arguments()</code> will pass unknown options as arguments rather than an error.  It's not simply a matter of checking IP validity (which none of the solutions offer), it's missing out on the error handling that argparse could get you.  I hope that makes sense.  Try passing <code>--foo --bar 1.2.3.4</code> to the <code>parse_known_args()</code> and see the behavior.  It won't error on <code>--foo</code> and <code>--bar</code>... it leaves it up to you to deal with it.  It's nice for writing a wrapper around another tool, but it falls short in other situations.</span>
<span class="comment-copy">@JohnSzakmeister I don't think you understood how <code>parse_known_args</code> works. The arguments that the parsers does not know are provided in the second element of the result. As I said the complete solution will validate the IP hence <code>--foo</code> or <code>--bar</code> will trigger the validation error. Note that you are probably going to define a <code>ipaddress</code> function to specify as <code>type</code> of the option and so all you have to do is call that and oyu will get the same error messages.</span>
<span class="comment-copy">this fails with no arguments</span>
<span class="comment-copy">@SergeBallesta perhaps you can explain more what you want?  You can add <code>nargs='?'</code>.  I updated the code.</span>
<span class="comment-copy">@JohnSzakmeister: Sorry I had not correctly read your answer. Please forget (and forgive) my previous comment.</span>
