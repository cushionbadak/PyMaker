<div class="post-text" itemprop="text">
<p>i'm quite new to python and mocking generally. So I tried to find a solution to my problem, through reading the documentation:
<a href="https://docs.python.org/3/library/unittest.mock.html#magic-methods" rel="nofollow noreferrer">https://docs.python.org/3/library/unittest.mock.html#magic-methods</a>, following article: <a href="http://alexmarandon.com/articles/python_mock_gotchas/" rel="nofollow noreferrer">http://alexmarandon.com/articles/python_mock_gotchas/</a>
and lots of stackoverflow-questions. But I couldn't find a solution yet.</p>
<p>I try to mock two function, which are creating a database connection and put the data into a pandas dataFrame. They are used in the post-function (overwrites the django post-function):</p>
<pre><code>def post(self, request, *args, **kwargs):
    db_connection = du_db.get_connection(dbtype='mssql', username=crd.MS_SQL_USER, password=crd.MS_SQL_PWD)
    df = du_db.fetch_dataframe(sql, connection=db_connection)
</code></pre>
<p>In the testing environment, <code>get_connection</code> should return nothing and <code>fetch_dataframe</code> should return a pandas dataframe defined before.</p>
<p>My testing class looks like this:</p>
<pre><code>class IndexViewTest(TestCase):

@mock.patch('du_db.db.get_connection')
@mock.patch('du_db.db.fetch_dataframe')
def setUp(self, mock_get_connection, mock_fetch_dataframe):
    self.c = Client()
    mock_get_connection = mock_get_connection()
    mock_fetch_dataframe = mock_fetch_dataframe()
    mock_get_connection.return_value = ""
    df = {'lot_of_data': ['xy', 'z'], 'more_data': [8, 9]}
    mock_fetch_dataframe.return_value = pd.DataFrame(df)
    assert mock_get_connection is data_utils.db.get_connection()
    assert mock_fetch_dataframe is data_utils.db.fetch_dataframe()
    assert mock_get_connection.called
    assert mock_get_connection.called

# Lot of test-functions similar to this:
def test_valid_data(self):
    resp = self.c.post('/', data={'id': 3338})
    self.assertEqual(resp.status_code, 200)
    self.assertContains(resp, 'Hello', status_code=200)
</code></pre>
<p>I get the following error-message:</p>
<p><a href="https://i.stack.imgur.com/S5hGw.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/S5hGw.png"/></a></p>
<p>The replacing of the original functions through the mocks doesn't seam to work.</p>
<p>Thanks for your help.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>class IndexViewTest(TestCase):

    @mock.patch('du_db.db.get_connection')
    @mock.patch('du_db.db.fetch_dataframe')
    def setUp(self, mock_fetch_dataframe, mock_get_connection):
        self.c = Client()
        mock_get_connection = mock_get_connection() # remove this
        mock_fetch_dataframe = mock_fetch_dataframe() # remove this
</code></pre>
<p>When you call the mocks above, they return another new mock. By assigning to the same name, you are loosing the references to the patched mocks. You will be unable to configure or inspect them.</p>
<pre><code>        mock_get_connection.return_value = "" # this is NOT the mock you think
                                              # unless removing lines above.
                                              # And so on...
        df = {'lot_of_data': ['xy', 'z'], 'more_data': [8, 9]}
        mock_fetch_dataframe.return_value = pd.DataFrame(df)

        # data__utils or du_db ??
        assert mock_get_connection is data_utils.db.get_connection()                                                                 
        assert mock_fetch_dataframe is data_utils.db.fetch_dataframe()
        assert mock_get_connection.called
        assert mock_get_connection.called

    # Lot of test-functions similar to this:
    def test_valid_data(self):
        resp = self.c.post('/', data={'id': 3338})
        self.assertEqual(resp.status_code, 200)
        self.assertContains(resp, 'Hello', status_code=200)
</code></pre>
<p>Edit:
From what I understand, you already see the mocks at work from pdb. To make the tests work as you like, you need to patch every test function that uses those two functions for example with patch decorators. Then you have to setup the mocks inside the patched test functions. Also usually you assert in the tests but not in the setUp. I understand you made it here just for convenience as you were with some doubts about the running code.</p>
<p>If you were thinking in setting up the mocks in setUp for other test functions to use (you can't do it just like that, you would have to store them in self and then manage them again in the test functions), maybe you are interested in this example from Mock documentation:</p>
<blockquote>
<p>An alternative way of managing patches is to use the patch methods:
  start and stop. These allow you to move the patching into your setUp
  and tearDown methods.</p>
</blockquote>
<pre><code>&gt;&gt;&gt; class MyTest(TestCase):
    ...
    def setUp(self):
        ...
        self.patcher = patch(’mymodule.foo’)
        ...
        self.mock_foo = self.patcher.start()
    ...
    ...
    def test_foo(self):
        ...
        self.assertTrue(mymodule.foo is self.mock_foo)
        ...
        ...
    def tearDown(self):
        ...
        self.patcher.stop()
        ...
&gt;&gt;&gt; MyTest(’test_foo’).run()
</code></pre>
</div>
<span class="comment-copy">Unfortunatelly i still get the same error after removing the two lines, the assertion i changed to du_db. If i set pdb and look for the  <code>mock_get_connection </code> i get: &lt;MagicMock name='fetch_dataframe' id='1949703923416'&gt;. And the other way arround with fetch_dataframe. I thought the connection is made through the order of @mock.patch</span>
<span class="comment-copy">@ediordna, functions receive the inner patches first. Haven't noticed the order was wrong (now edited).</span>
<span class="comment-copy">@ediordna See my 2nd edit. I hope this can help you in moving the mock setup into setUp</span>
<span class="comment-copy">Hi progmatico, thank you very much for your helpful answer. I'm still not really understanding the logic behind the whole python mocking, but I found a way to successfully mock the two functions in setUp(): <code>data_utils.db.get_connection = MagicMock(return_value="")</code> and <code>data_utils.db.fetch_dataframe = MagicMock(return_value = pd.DataFrame(df))</code>.</span>
<span class="comment-copy">@ediordna "... I also tried the patch() - way, but couldn't find a way to mock this. ". Wasn't that because the patch string was missing the package or module part? But even then you can assign a Mock directly. See <a href="https://stackoverflow.com/questions/54137738/python-3-unittest-patch-doesnt-return-desired-value">here</a>. Mocking init is strange because the object will exist (init is not a constructor) but you removed initialization of its attributes, and this is also not completely guaranteed, because some of the object attributes may still be assigned outside init.</span>
