<div class="post-text" itemprop="text">
<p><a href="https://blog.ionelmc.ro/2015/02/09/understanding-python-metaclasses/#object-attribute-lookup" rel="noreferrer">This article</a> describes how Python looks up an attribute on an object when it executes <code>o.a</code>. The priority order is interesting - it looks for:</p>
<ol>
<li>A class attribute that is a data-descriptor (most commonly a property)</li>
<li>An instance attribute</li>
<li>Any other class attribute</li>
</ol>
<p>We can confirm this using the code below, which creates an object <code>o</code> with an instance attribute <code>a</code>, whose class contains a property of the same name:</p>
<pre><code>class C:
    def __init__(self):
        self.__dict__['a'] = 1

    @property
    def a(self):
        return 2

o = C()
print(o.a)  # Prints 2
</code></pre>
<p>Why does Python use this priority order rather than the "naive" order (instance attributes take priority over all class attributes)? Python's priority order has a significant drawback: it makes attribute lookups slower, because instead of just returning an attribute of <code>o</code> if it exists (a common case), Python must first search <code>o</code>'s class <em>and all its superclasses</em> for a data-descriptor.</p>
<p>What is the benefit of Python's priority order? It's presumably not just for the above situation, because having an instance variable and a property of the same name is very much a corner case (note the need to use <code>self.__dict__['a'] = 1</code> to create the instance attribute, because the usual <code>self.a = 1</code> would invoke the property).</p>
<p>Is there a different situation in which the "naive" lookup order would cause a problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>Guido van Rossum himself (the ex-BDFL of Python) designed this feature when new-style classes were introduced with Python 2.2 back in 2001. The reasoning is discussed in <a href="https://www.python.org/dev/peps/pep-0252/" rel="nofollow noreferrer">PEP 252</a>. The impact on attribute lookup is explicitly mentioned:</p>
<blockquote>
<p>This scheme has one drawback: in what I assume to be the most common case, referencing an instance variable stored in the instance dict, it does two dictionary lookups, whereas the classic scheme did a quick test for attributes starting with two underscores plus a single dictionary lookup.</p>
</blockquote>
<p>And:</p>
<blockquote>
<p>A benchmark verifies that in fact this is as fast as classic instance variable lookup, so I'm no longer worried.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>For old style classes (<a href="https://www.python.org/dev/peps/pep-0252/#c-api" rel="nofollow noreferrer">PEP 252</a>):</p>
<blockquote>
<p>The instance dict overrides the class dict, except for the special attributes (like <code>__dict__</code> and <code>__class__</code>), which have priority over the instance dict.</p>
</blockquote>
<p>Overriding the <code>__dict__</code> or <code>__class__</code> within the instance dict would break attribute lookup and cause the instance to behave in extremely weird ways.</p>
<p>In new-style classes, Guido chose the following implementation of attribute lookup to maintain consistency (<a href="https://www.python.org/dev/peps/pep-0252/#c-api" rel="nofollow noreferrer">PEP 252</a>):</p>
<blockquote>
<ol>
<li>Look in the type dict. If you find a data descriptor, use its <code>get()</code> method to produce the result. This takes care of special attributes like <code>__dict__</code> and <code>__class__</code>.</li>
<li>Look in the instance dict. If you find anything, that's it. (This takes care of the requirement that normally the instance dict overrides the class dict.)</li>
<li>Look in the type dict again (in reality this uses the saved result from step 1, of course). If you find a descriptor, use its get() method; if you find something else, that's it; if it's not there, raise AttributeError.</li>
</ol>
</blockquote>
<p>In summary, the <code>__dict__</code> and <code>__class__</code> attributes are implemented as properties (data descriptors). To maintain a valid state, the instance dict cannot override <code>__dict__</code> and <code>__class__</code>. Thus, properties (data descriptors) take precedence over instance attributes.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>What I want to know is, why do data descriptors take priority over
  instance attributes?</p>
</blockquote>
<p>If there isn't some method that takes priority over normal instance lookup, how do you expect to intercept instance attribute accesses? These methods can't be instance attributes themselves because that would defeat their purpose (at least without additional conventions about them, I think).</p>
<p>Besides the concise comment of @timgeb, I can't explain anything about descriptors better than the official <a href="https://docs.python.org/3/howto/descriptor.html?highlight=descriptors#descriptor-protocol" rel="nofollow noreferrer">Descriptor How To</a></p>
</div>
<span class="comment-copy">AFAICT JavaScript uses the "naive" lookup order and works fine. The following code, equivalent to the Python example, prints <code>1</code>: <code>class C { constructor() { Object.defineProperty(this, 'a', {value: 1}); } get a() { return 2; } }</code> <code>var o = new C(); console.log(o.a);</code></span>
<span class="comment-copy">Do I understand correctly that "Why do data descriptors in Python exist?" is what your question boils down to? Are you aware that you could code your own non-data-descriptor "property" by writing a descriptor class?</span>
<span class="comment-copy">@timgeb - AFAIK data descriptors (descriptors which have both <code>__get__</code> and <code>__set__</code>) primarily exist to support properties. What I want to know is, why do data descriptors take priority over instance attributes?</span>
<span class="comment-copy">I assume because it's a way to make sure your getter logic runs.</span>
<span class="comment-copy">I see it this way: data descriptors are the default case. When I have a <code>__get__</code> and a <code>__set__</code> method, I want these hooks to trigger regardless of the detail whether the attribute in question exists in the object's <code>__dict__</code> or not. Using a non data descriptor is then for the special cases where you want the getter only to trigger if the attribute is not in the <code>__dict__</code>. Non data descriptors are great for <code>__get__</code>ting a value once and then caching it in the instance <code>__dict__</code>, for example.</span>
