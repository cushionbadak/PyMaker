<div class="post-text" itemprop="text">
<p>I am using a decorator to extend certain classes and add some functionality to them, something like the following:</p>
<pre><code>def useful_stuff(cls):
  class LocalClass(cls):
    def better_foo(self):
      print('better foo')
  return LocalClass

@useful_stuff
class MyClass:
  def foo(self):
    print('foo')
</code></pre>
<p>Unfortunaltely, <em>MyClass</em> is no longer <a href="https://docs.python.org/3/library/pickle.html#what-can-be-pickled-and-unpickled" rel="nofollow noreferrer">pickleable</a> due to the non global <em>LocalClass</em></p>
<pre><code>AttributeError: Can't pickle local object 'useful_stuff.&lt;locals&gt;.LocalClass'
</code></pre>
<ul>
<li>I need to pickle my classes. Can you recommend a better design?</li>
<li>Considering that there can be multiple decorators on a class, would switching to multiple inheritance by having <em>MyClass</em> inherit all the functionality be a better option?</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You need to set the metadata so the subclass looks like the original:</p>
<pre><code>def deco(cls):
    class SubClass(cls):
        ...
    SubClass.__name__ = cls.__name__
    SubClass.__qualname__ = cls.__qualname__
    SubClass.__module__ = cls.__module__
    return SubClass
</code></pre>
<p>Classes are pickled by using their module and qualname to record where to find the class. Your class needs to be found in the same location the original class would have been if it hadn't been decorated, so pickle needs to see the same module and qualname. This is similar to what <code>funcutils.wraps</code> does for decorated functions.</p>
<p>However, it would probably be simpler and less bug-prone to instead add the new methods directly to the original class instead of creating a subclass:</p>
<pre><code>def better_foo(self):
    print('better_foo')

def useful_stuff(cls):
    cls.better_foo = better_foo
    return cls
</code></pre>
</div>
<span class="comment-copy">I've heard that there's a package called <code>dill</code> that can pickle more stuff than <code>pickle</code>.</span>
<span class="comment-copy">I think I'd use inheritance or metaclasses for this use case</span>
<span class="comment-copy">Will using <b>metaclasses</b> work?</span>
<span class="comment-copy">There doesn't appear to be any reason to use a decorator here. Just declare <code>LocalClass</code> as a globally visible base class, and have <code>MyClass</code> inherit from it directly instead of decorating <code>MyClass</code>. Addressing the issue of replacing multiple decorators with multiple base classes would require a more detailed understanding of what the decorators do to provide a good answer.</span>
<span class="comment-copy">The main problem with multiple inheritance is with data attributes conflicting; if all you inherit from a mix-in is a method, any conflicts would be resolved by the MRO. Your decorators just create the same MRO in a different fashion.</span>
<span class="comment-copy">It works, thanks! Can you explain why it worked?</span>
<span class="comment-copy">I added a class method in the example. But there are other things like overriding methods that need to be done by SubClass and so I went with inheritance.</span>
<span class="comment-copy">@rhino2rhonda It makes the new class act like the old one which can be pickled.</span>
<span class="comment-copy">@rhino2rhonda: Answer expanded.</span>
<span class="comment-copy">@EthanK Would unpickling the class retain the functinality of the local class? Doesn't the pickle library need access to the code in the local class?</span>
