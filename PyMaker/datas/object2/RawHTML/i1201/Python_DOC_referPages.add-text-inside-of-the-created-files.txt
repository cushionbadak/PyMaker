<div class="post-text" itemprop="text">
<p>I'm used to doing <code>print &gt;&gt;f, "hi there"</code></p>
<p>However, it seems that <code>print &gt;&gt;</code> is getting deprecated. What is the recommended way to do the line above?</p>
<p><b>Update</b>:
Regarding all those answers with <code>"\n"</code>...is this universal or Unix-specific? IE, should I be doing <code>"\r\n"</code> on Windows?</p>
</div>
<div class="post-text" itemprop="text">
<p>This should be as simple as:</p>
<pre><code>with open('somefile.txt', 'a') as the_file:
    the_file.write('Hello\n')
</code></pre>
<p>From The Documentation:</p>
<blockquote>
<p>Do not use <code>os.linesep</code> as a line terminator when writing files opened in text mode (the default); use a single '\n' instead, on all platforms.</p>
</blockquote>
<p>Some useful reading:</p>
<ul>
<li><a href="http://docs.python.org/reference/compound_stmts.html#the-with-statement" rel="noreferrer">The <code>with</code> statement</a></li>
<li><a href="http://docs.python.org/library/functions.html?highlight=open#open" rel="noreferrer"><code>open()</code></a>
<ul>
<li>'a' is for append, or use</li>
<li>'w' to write with truncation</li>
</ul></li>
<li><a href="http://docs.python.org/library/os.html" rel="noreferrer"><code>os</code></a> (particularly <a href="http://docs.python.org/library/os.html?highlight=os.linesep#os.linesep" rel="noreferrer"><code>os.linesep</code></a>)</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You should use the <code>print()</code> function which is available since Python 2.6+</p>
<pre><code>from __future__ import print_function  # Only needed for Python 2
print("hi there", file=f)
</code></pre>
<p>For Python 3 you don't need the <code>import</code>, since the  <code>print()</code> function is the default.</p>
<p>The alternative would be to use:</p>
<pre><code>f = open('myfile', 'w')
f.write('hi there\n')  # python will convert \n to os.linesep
f.close()  # you can omit in most cases as the destructor will call it
</code></pre>
<p>Quoting from <a href="https://docs.python.org/2/tutorial/inputoutput.html#reading-and-writing-files">Python documentation</a> regarding newlines:</p>
<blockquote>
<p>On output, if newline is None, any <code>'\n'</code> characters written are translated to the system default line separator, <code>os.linesep</code>. If newline is <code>''</code>, no translation takes place. If newline is any of the other legal values, any <code>'\n'</code> characters written are translated to the given string.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://docs.python.org/tutorial/inputoutput.html" rel="noreferrer">python docs</a> recommend this way:</p>
<pre><code>with open('file_to_write', 'w') as f:
    f.write('file contents')
</code></pre>
<p>So this is the way I usually do it :)</p>
<p>Statement from <a href="http://docs.python.org/tutorial/inputoutput.html" rel="noreferrer">docs.python.org</a>:</p>
<blockquote>
<p>It is good practice to use the <strong>'with'</strong> keyword when dealing with file
  objects. This has the advantage that the file is properly closed after
  its suite finishes, even if an exception is raised on the way. It is
  also much shorter than writing equivalent try-finally blocks.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p><strong>Regarding os.linesep:</strong></p>
<p>Here is an exact unedited Python 2.7.1 interpreter session on Windows:</p>
<pre><code>Python 2.7.1 (r271:86832, Nov 27 2010, 18:30:46) [MSC v.1500 32 bit (Intel)] on
win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import os
&gt;&gt;&gt; os.linesep
'\r\n'
&gt;&gt;&gt; f = open('myfile','w')
&gt;&gt;&gt; f.write('hi there\n')
&gt;&gt;&gt; f.write('hi there' + os.linesep) # same result as previous line ?????????
&gt;&gt;&gt; f.close()
&gt;&gt;&gt; open('myfile', 'rb').read()
'hi there\r\nhi there\r\r\n'
&gt;&gt;&gt;
</code></pre>
<p><strong>On Windows:</strong></p>
<p>As expected, os.linesep does <strong>NOT</strong> produce the same outcome as <code>'\n'</code>. There is no way that it could produce the same outcome. <code>'hi there' + os.linesep</code> is equivalent to <code>'hi there\r\n'</code>, which is <strong>NOT</strong> equivalent to <code>'hi there\n'</code>.</p>
<p><strong>It's this simple: use <code>\n</code> which will be translated automatically to os.linesep.</strong> And it's been that simple ever since the first port of Python to Windows.</p>
<p>There is no point in using os.linesep on non-Windows systems, and it produces wrong results on Windows.</p>
<p><strong>DO NOT USE os.linesep!</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>I do not think there is a "correct" way.</p>
<p>I would use:</p>
<pre><code>with open ('myfile', 'a') as f: f.write ('hi there\n')
</code></pre>
<p>In memoriam <a href="http://en.wikipedia.org/wiki/There%27s_more_than_one_way_to_do_it" rel="noreferrer">Tim Toady</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3 it is a function, but in Python 2 you can add this to the top of the source file:</p>
<pre><code>from __future__ import print_function
</code></pre>
<p>Then you do </p>
<pre><code>print("hi there", file=f)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are writing a lot of data and speed is a concern you should probably go with <code>f.write(...)</code>. I did a quick speed comparison and it was considerably faster than <code>print(..., file=f)</code> when performing a large number of writes.</p>
<pre><code>import time    

start = start = time.time()
with open("test.txt", 'w') as f:
    for i in range(10000000):
        # print('This is a speed test', file=f)
        # f.write('This is a speed test\n')
end = time.time()
print(end - start)
</code></pre>
<p>On average <code>write</code> finished in 2.45s on my machine, whereas <code>print</code> took about 4 times as long (9.76s). That being said, in most real-world scenarios this will not be an issue.</p>
<p>If you choose to go with <code>print(..., file=f)</code> you will probably find that you'll want to suppress the newline from time to time, or replace it with something else. This can be done by setting the optional <code>end</code> parameter, e.g.;</p>
<pre><code>with open("test", 'w') as f:
    print('Foo1,', file=f, end='')
    print('Foo2,', file=f, end='')
    print('Foo3', file=f)
</code></pre>
<p>Whichever way you choose I'd suggest using <code>with</code> since it makes the code much easier to read.</p>
<p><strong>Update</strong>: This difference in performance is explained by the fact that <code>write</code> is highly buffered and returns before any writes to disk actually take place (see <a href="https://stackoverflow.com/questions/3857052/why-is-printing-to-stdout-so-slow-can-it-be-sped-up">this answer</a>), whereas <code>print</code> (probably) uses line buffering. A simple test for this would be to check performance for long writes as well, where the disadvantages (in terms of speed) for line buffering would be less pronounced.</p>
<pre><code>start = start = time.time()
long_line = 'This is a speed test' * 100
with open("test.txt", 'w') as f:
    for i in range(1000000):
        # print(long_line, file=f)
        # f.write(long_line + '\n')
end = time.time()

print(end - start, "s")
</code></pre>
<p>The performance difference now becomes much less pronounced, with an average time of 2.20s for <code>write</code> and 3.10s for <code>print</code>. If you need to concatenate a bunch of strings to get this loooong line performance will suffer, so use-cases where <code>print</code> would be more efficient are a bit rare.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since 3.5 you can also use the <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.write_text" rel="noreferrer">pathlib</a> for that purpose:</p>
<blockquote>
<p>Path.write_text(data, encoding=None, errors=None)</p>
<p>Open the file pointed to in text mode, write data to it, and close the file:</p>
</blockquote>
<pre><code>import pathlib

pathlib.Path('textfile.txt').write_text('content')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you said Line it means some serialized characters which are ended to '\n' characters. Line should be last at some point so we should consider '\n' at the end of each line. Here is solution:</p>
<pre><code>with open('YOURFILE.txt', 'a') as the_file:
    the_file.write('Hello')
</code></pre>
<p>in append mode after each write the cursor move to new line, if you want to use 'w' mode you should add '\n' characters at the end of write() function:</p>
<pre><code>the_file.write('Hello'+'\n')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One can also use the <code>io</code> module as in:</p>
<pre><code>import io
my_string = "hi there"

with io.open("output_file.txt", mode='w', encoding='utf-8') as f:
    f.write(my_string)
</code></pre>
</div>
<span class="comment-copy">The line-endings are addressed in <a href="http://stackoverflow.com/questions/6159900/correct-way-to-write-line-to-file/6160082#6160082">my answer</a>.</span>
<span class="comment-copy">"\n" is not Unix-specific. When the file is opened in text mode (the default), it is translated automatically to the correct line ending for the current platform. Writing "\r\n" would produce "\r\r\n" which is wrong.</span>
<span class="comment-copy">Just add the print ord(os.linesep) statement to see the ascii code (10 on most UNIX systems)</span>
<span class="comment-copy">@yaroslav-bulatov, I believe the answer of johnsyweb is more correct and should be the chosen answer.</span>
<span class="comment-copy">This example is better than the open/close example.  Using <code>with</code> is a safer way to remember to close a file.</span>
<span class="comment-copy">I don't have to call <code>the_file.close()</code> ?</span>
<span class="comment-copy">no you don't: <a href="http://stackoverflow.com/questions/3012488/what-is-the-python-with-statement-designed-for" title="what is the python with statement designed for">stackoverflow.com/questions/3012488/…</a></span>
<span class="comment-copy">@Johnsyweb Why do you say "os.linesep. There's lots of good stuff in os!", when you've earlier in the post recommended against using it? I'm suspecting an edit here, and it might be the reason for the down votes.</span>
<span class="comment-copy">@HorseSMith: 3.5 years after the events, I may misremember, but I edited my on the day to include the paragraph from the docs, leaving the link to <code>os.linesep</code> documentation for interested readers. The downvote, as I recall, came 2 years later.</span>
<span class="comment-copy">-1 "If you want to be sure, add os.linesep to the string instead of <code>\n</code>" would require newline="" otherwise you'd get <code>\r\r\n</code> on Windows. There is no reason to futz about with os.linesep at all.</span>
<span class="comment-copy">@Sorin: Your edit to add write mode is of course an improvement. However you strangely remain intransigent about os.linesep. See my answer. By the way, the documentation that you quote is for 3.x, but this part is also valid for 2.x in text mode: <i>any '\n' characters written are translated to the system default line separator, os.linesep*</i> ... Windows: writing os.linesep is the same as writing <code>\r\n</code> which contains <code>\n</code> which is translated to os.linesep which is <code>\r\n</code> so the end result is <code>\r\r\n</code>.</span>
<span class="comment-copy">@John you were right, I corrected the os.linesep bug. Thanks.</span>
<span class="comment-copy">Not using the <code>with</code> statement is a bad practice.</span>
<span class="comment-copy">@BradRuderman That's part of the <a href="http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_206" rel="nofollow noreferrer">POSIX</a> standard for what constitutes a "line" in a text file, i.e. every line in a text file must be terminated by a newline, even the last line.</span>
<span class="comment-copy">I don't like this way when I need to nest the <code>with</code> inside a loop. That makes me constantly open and close the file as I proceed in my loop. Maybe I am missing something here, or this is really a disadvantage in this particular scenario?</span>
<span class="comment-copy">How about looping within the with?</span>
<span class="comment-copy">great example -- curious if you're an ipython user? nice functions for formatting sessions</span>
<span class="comment-copy">I'm not entirely sure what you are trying to tell us here. os.linesep will return the line term character (or string) as defined by the operating system. Windows uses \r\n for line endings by default. However, a single \n is recognised.  Using \n is going to give a fully portable OUTPUT but os.linesep is not wrong on windows.</span>
<span class="comment-copy">@Gusdor: The point is that if you explicitly use <code>os.linesep</code> in Windows in text mode, the outcome is <code>\r\r\n</code> which is wrong. "Windows uses ..." is meaningless. The C runtime library (and hence Python) translate <code>\n</code> to <code>\r\n</code> on output in text mode. Other software may behave differently. It is NOT the case that all software running on Windows recognises a lone <code>\n</code> as a line separator when reading in text mode. Python does. Microsoft's Notepad text editor doesn't.</span>
<span class="comment-copy">Arguably somebody else will be reading it, not you, with some mickey-mouse software that will barf about the extra <code>\r</code> ...</span>
<span class="comment-copy">@Gusdor are you coming to python from a different language, where using '\n' results in output of '\n' on window, rather than '\r\n' -- so it lacks the '\r' expected by dumb text editors? As John says, that isn't how Python behaves -- '\n' is automatically replaced by '\r\n', if that is what os.linesep says to do. Hence, explicitly saying <code>os.linesep</code> <i>is</i> "wrong" here. Its like <code>Department of Redundancy Department</code>. Yes you can do it. No, you don't want to.</span>
<span class="comment-copy">But the OP might want to write additional stuff to the file. Here the file will be closed when the <code>with</code> goes out of scope.</span>
<span class="comment-copy">That might want to be <code>open(..., 'a')</code> or even <code>'at'</code>.</span>
<span class="comment-copy">Erm, yeah. That is the idea of using with. If you want to keep the file open, just call open at the beginning and call close when you are done...</span>
<span class="comment-copy">@mtrw. True. OP was appending.</span>
<span class="comment-copy">As far as python is concerned is RIP Tim Toady - and very very <i>very</i> rightfully so</span>
<span class="comment-copy">"in append mode after each write the cursor move to new line" – no it's not.</span>
