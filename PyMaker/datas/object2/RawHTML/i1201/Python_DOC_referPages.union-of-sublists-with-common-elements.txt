<div class="post-text" itemprop="text">
<p>Say I have for example the following nested list:</p>
<pre><code>L = [['John','Sayyed'], ['John' , 'Simon'] ,['bush','trump'],
     ['Sam','Suri','NewYork'],['Suri','Orlando','Canada']]
</code></pre>
<p>How can I group these sublists, by getting the union of sublists which have a common element with at least another sublist within the group? So for the previous example the result should be:</p>
<pre><code>[['John','Sayyed','Simon'] ,['bush','trump'],
 ['Sam','Suri','NewYork','Orlando','Canada']]
</code></pre>
<p>Thus the first two sublists are joined as they share <code>'John'</code>.
Could someone please share their valuable thoughts ?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>networkx</code> for that. Generate a graph, and add your list as the graph edges using <a href="https://networkx.github.io/documentation/networkx-1.10/reference/generated/networkx.DiGraph.add_edges_from.html" rel="nofollow noreferrer"><code>add_edges_from</code></a>. Then use <a href="https://networkx.github.io/documentation/networkx-1.10/reference/generated/networkx.algorithms.components.connected.connected_components.html" rel="nofollow noreferrer"><code>connected_components</code></a>, which will precisely give you a list of sets of the connected components in the graph:</p>
<pre><code>import networkx as nx 

L = [['John','Sayyed'], ['John' , 'Simon'] ,['bush','trump']

G=nx.Graph()
G.add_edges_from(L)
list(nx.connected_components(G))

[{'John', 'Sayyed', 'Simon'}, {'bush', 'trump'}]
</code></pre>
<hr/>
<p><b> Update </b></p>
<p>In the case of having sublists with more than <code>2</code> elements, you can get all the length <code>2</code> <a href="https://docs.python.org/2/library/itertools.html#itertools.combinations" rel="nofollow noreferrer"><code>combinations</code></a> from each sublist and use these as the network edges:</p>
<pre><code>from itertools import combinations, chain

L = [['John','Sayyed'], [ 'John' , 'Simon'] ,['bush','trump'],
     ['Sam','Suri','NewYork'],['Suri','Orlando','Canada']]

L2_nested = [list(combinations(l,2)) for l in L]
L2 = list(chain.from_iterable(L2_nested))
#[('John', 'Sayyed'), ('John', 'Simon'), ('bush', 'trump'), ('Sam', 'Suri')...

G=nx.Graph()
G.add_edges_from(L2)
list(nx.connected_components(G))

[{'John', 'Sayyed', 'Simon'},
{'bush', 'trump'},
{'Canada', 'NewYork', 'Orlando', 'Sam', 'Suri'}]
</code></pre>
<p>Networkx also allows you to visualize the network with <code>nx.draw</code>:</p>
<pre><code>pos = nx.spring_layout(G, scale=20)
nx.draw(G, pos, node_color='lightblue', node_size=500, with_labels=True)
</code></pre>
<p><a href="https://i.stack.imgur.com/Of9oW.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/Of9oW.png"/></a></p>
<hr/>
<p><b> Details </b></p>
<p>More detailed explanation on <a href="https://en.wikipedia.org/wiki/Connected_component_(graph_theory)" rel="nofollow noreferrer">connected components</a>:</p>
<blockquote>
<p>In graph theory, a connected component (or just component) of an undirected graph is a subgraph in which any two vertices are connected to each other by paths, and which is connected to no additional vertices in the supergraph</p>
</blockquote>
<p>So essentially, this code creates a graph, with edges from the list, where each edge is composed by two values <code>u,v</code> where <code>u</code> and <code>v</code> will be nodes connected by this edge. </p>
<p>And hence, the union of sublists with at least one sublist with a common element can be translated into a Graph Theory problem as all nodes that are reachable between each other through the existing paths. </p>
</div>
<div class="post-text" itemprop="text">
<p>If order <em>is</em> important and the list are large, you can use this two pronged method:</p>
<pre><code> l = [['john', 'sayyid'], ['john', 'simon'], ['b', 't']]

 def join(l1, l2):
     mset = set(l1)
     result = l1[:] # deep copy
     for each in l2:
         if each in mset:
             continue
         else:
             result.append(each)
     return result
</code></pre>
<p>To merge within the master list, you can just call the list by their rank and pop the original list:</p>
<pre><code>l1 = l.pop(0)
l2 = l.pop(0)
l.insert(0, join(l1, l2))
&gt;&gt;&gt; l:
[['john', 'sayyid', 'simon'], ['b', 't']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To merge 2 lists:</p>
<pre><code>merge = lambda l1, l2: l1 + [ x for x in l2 if x not in l1 ]
</code></pre>
<p>To be more efficient, create a <code>set</code> on <code>l1</code>;</p>
</div>
<div class="post-text" itemprop="text">
<p>A simple approach </p>
<pre><code>L = [['John','Sayyed'], [ 'John' , 'Simon'] ,['bush','trump']]
L[0].extend([x for x in L[1] if x not in L[0]])
L.pop(1)
print(L) 
</code></pre>
<p>See </p>
<p><a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">List Comprehensions</a> </p>
<p><a href="https://stackoverflow.com/questions/252703/difference-between-append-vs-extend-list-methods-in-python">Append vs Extend</a></p>
</div>
<span class="comment-copy">Is the order of items in the merged list important?</span>
<span class="comment-copy">create a set &amp; union of both list contents. Convert back to list: <code>list(set(L[0]) | set(L[1]))</code>. Your example is hard to exploit. It should contain <i>quoted</i> strings</span>
<span class="comment-copy">See this post <a href="https://stackoverflow.com/questions/1319338/combining-two-lists-and-removing-duplicates-without-removing-duplicates-in-orig" title="combining two lists and removing duplicates without removing duplicates in orig">stackoverflow.com/questions/1319338/â€¦</a> . Can be helpful to you</span>
<span class="comment-copy">The code you posted seems incomplete: are those supposed to be strings or variables? If variables, then what kind of objects are they?</span>
<span class="comment-copy">Order is not important and it contains strings.The example is not limited to L1 and l2 but there may be many lists present</span>
<span class="comment-copy">Interesting approach, please explain what this does</span>
<span class="comment-copy">Added some explanations @jaba, hope its clearer</span>
<span class="comment-copy">What happens if the sub-list have more than two elements?</span>
<span class="comment-copy">@Aiyaz updated with a more generic case of having sublists with more than 2 elements</span>
<span class="comment-copy">@Aiyaz just a reminder, please let me know this helped by accepting. Also in order for future visitors to know it solved it for you. Thanks! See <a href="https://stackoverflow.com/help/someone-answers">What should I do when someone answers my question?</a></span>
