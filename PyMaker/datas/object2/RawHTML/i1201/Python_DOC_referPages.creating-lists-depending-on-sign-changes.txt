<div class="post-text" itemprop="text">
<p>I have excel Data (float) in one column where 20 changes of sings occur in every couple of hundred lines. The list is a couple of thousand lines long but simplyfied it looks like this <code>[5, 4, 3, 2, 1, -5, -4, -3, -2, -1, 5, 4, 3, 2, 1, -5, ...]</code>.</p>
<p>I need lists containing all numbers to the point where a sign change occurs and then start a new list until the next sign change. So in total I want as many  lists returned as there a sign changes. I need those to do numerical integration. I can do that though... </p>
<p>Can you give me an example with a short array like the one above? I don't really care if it gives the resluts as the return in a function or defines new variables. Whatever is easier or more elegant. </p>
<p>Thanks for the help guys. </p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you want to group by sign, you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer">itertools.groupby</a>:</p>
<pre><code>from itertools import groupby

data = [5, 4, 3, 2, 1, -5, -4, -3, -2, -1, 5, 4, 3, 2, 1, -5]


def groupby_sign(lst):
    return [list(group) for _, group in groupby(lst, key=lambda x: x &lt; 0)]

result = groupby_sign(data)
print(result)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[[5, 4, 3, 2, 1], [-5, -4, -3, -2, -1], [5, 4, 3, 2, 1], [-5]]
</code></pre>
</div>
<span class="comment-copy">@AlexanderK Glad I could help. If my answer help you, please consider marking it as accepted</span>
<span class="comment-copy">Slightly shorter (not necessarily better): <code>groupby(lst, key=0 .__lt__)</code></span>
<span class="comment-copy">well damn, Seems like my laptop cant compute 6000 excel lines. Is it more efficient to use a csv file with less decimals? Might it make sense to split it and try myself on multithreading? I have a i7 Quad Core (8th gen.)</span>
<span class="comment-copy">nevermind, i'll just delete every second or third line in excel</span>
