<div class="post-text" itemprop="text">
<p>I've been having some difficulty with modules in Python. I understood that built-in modules, which are written in C, are like part of the Python interpreter, so they're made readily available for the programmer as belonging to the built-in namespace and, hence, do not need to be imported. Is that only limited to those modules, meaning all other non-built-in, written-in-Python standard library modules need importing in order to be used?</p>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>TLDR: You have to import every module before usage, with the exception of <a href="https://docs.python.org/3/library/builtins.html" rel="nofollow noreferrer"><code>builtins</code></a>.</p>
<hr/>
<p>There are two different kinds of "builtin" as far as Python is concerned:</p>
<ol>
<li>Builtin objects that are compiled, such as <code>int</code> or <code>os.chmod</code>.</li>
<li>The <code>builtins</code> module containing a basic set of objects, such as <code>int</code> and <code>help</code>.</li>
</ol>
<p>Things can be part of 1 without being part of 2 and vice versa. For example, <code>help</code> is a pure-Python function, and <code>os.chmod</code> is part of the <code>os</code> module. However, most of the stuff in 2 is also part of 1 for practical reasons: <code>builtins</code> are used a lot and compiled objects usually have better performance.</p>
<hr/>
<p>Builtin objects can represent any kind of module, function or object. The language specification does not really define which objects are builtins and what builtins are. Details vary by implementation: CPython uses compiled C structs and functions, whereas PyPy uses compiled <a href="https://rpython.readthedocs.io/en/latest/rpython.html" rel="nofollow noreferrer">RPython</a> objects, for example.</p>
<p>As a rule of thumb, "everything not defined by Python code" is a builtin. However, this is not <em>strictly</em> true: a builtin object can access the interpreter to create regular Python objects.
All builtins have in common that they appear like regular Python objects, but their internals can follow arbitrary rules.</p>
<p>Note that a builtin is not necessarily built into the interpreter. CPython provides a <a href="https://docs.python.org/3/c-api/intro.html" rel="nofollow noreferrer">C API</a> and PyPy emulates it via <a href="http://doc.pypy.org/en/latest/config/objspace.usemodules.cpyext.html" rel="nofollow noreferrer">cpyext</a>, allowing <a href="https://en.wikipedia.org/wiki/Library_(computing)#Shared_libraries" rel="nofollow noreferrer">shared libraries</a> to be loaded and used by the interpreter.
Many third-party libraries use compiled <a href="https://cython.org" rel="nofollow noreferrer">Cython</a> objects and functions to provide custom builtins. However, any language that can produce shared libraries compatible to the C API can be used.</p>
<hr/>
<p>The <a href="https://docs.python.org/3/library/builtins.html" rel="nofollow noreferrer"><code>builtins</code> module</a> is an actual module <em>named</em> <code>builtins</code>.
All names of this module are always available in all other modules:
<code>builtins</code> is searched whenever a name is not found in the current scope, its containing scopes, or the current module.</p>
<p>This is similar but <em>not</em> the same as if there were a <code>from builtins import *</code> in every module: if <code>builtins</code> is changed, the builtin names reflect that.</p>
<pre><code>&gt;&gt;&gt; int(5)
5
&gt;&gt;&gt; import builtins
&gt;&gt;&gt; builtins.int = float
&gt;&gt;&gt; int(5)
5.0
</code></pre>
<p>For example, the <code>_</code> in an interactive Python session is part of <code>builtins</code>. It is changed whenever a command is run.</p>
<p><strong>Disclaimer:</strong> This is just for demonstration. It is a really, really bad idea to modify <code>builtins</code> yourself.</p>
<hr/>
<p>While only names from <code>builtins</code> are available without importing, Python usually imports several modules when it starts.</p>
<pre><code>$ python3 -c 'import sys;print(sys.modules.keys())'
dict_keys(['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', '_bootlocale', '_locale', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'sphinxcontrib', 'sitecustomize', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg'])
</code></pre>
<p>Some of these are part of high-level parts of the interpreter, e.g. <code>sys</code> and <code>importlib</code>. The <a href="https://docs.python.org/3/library/site.html" rel="nofollow noreferrer"><code>sitecustomize</code> and <code>usercustomize</code> modules</a> allow to prepare your environment - for example, changing the look of the interactive interpreter, setting search paths in <code>os.environment</code>, and similar.</p>
</div>
<span class="comment-copy">There are <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">certain functions that are built directly into the interpreter</a>, the rest are modules (and all modules need to be <code>import</code>ed)</span>
<span class="comment-copy">But the documentation references them all as modules; some built into the interpreter and written in C, and others written in python.. .</span>
<span class="comment-copy">Thx.. I'm really confused by all this: is every module written in C considered a builtin or not? Is it correct vice versa, that is, every builtin is written in C?</span>
<span class="comment-copy">As a rule of thumb, a builtin is "everything not defined in Python". Every module written in C is a builtin, but not every builtin is written in C and a C module can define regular Python objects. CPython accepts any shared object (<code>.so</code>/<code>.dll</code>) that conforms to its C API - be it compiled from C, C++, Fortran, Rust code or whatever.</span>
<span class="comment-copy">Ok. So then everything written in C does not need importing, right?</span>
<span class="comment-copy">No, everything in the <code>builtins</code> <i>module</i> does not need importing. That is an actual module named <code>builtins</code>.</span>
<span class="comment-copy">.. so there is a difference between a builtin and definitions in the builtins module; a builtin is not necessarily in the builtins module, and inless it is put there, it requires importing prior to being used .., right?</span>
