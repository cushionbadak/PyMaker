<div class="post-text" itemprop="text">
<p>I have two columns like:</p>
<pre><code>row1   row2
0      500
1400   -1
1330   -1
0      900
500    -1
</code></pre>
<p>Here, if value of row1 is 0, then row2 value is not -1. If value of row2 is -1, value of row1 is not 0. </p>
<p>I want to make a new row like this:</p>
<pre><code>row3
500 
1400
1330
900
500
</code></pre>
<p>In this row, If row1 value is 0, then it value gets replaced by row2. How do I do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.where.html" rel="nofollow noreferrer"><code>numpy.where</code></a> (which I would prefer to be named <code>numpy.if_then_else</code>).</p>
<pre><code>&gt;&gt;&gt; df['row3'] = np.where(df['row2'] == -1, df['row1'], df['row2'])                                                    
&gt;&gt;&gt; df                                                                                                                 
   row1  row2  row3
0     0   500   500
1  1400    -1  1400
2  1330    -1  1330
3     0   900   900
4   500    -1   500
</code></pre>
<p>Alternatively, a little more concise but very context specific to the setup in your question:</p>
<pre><code>&gt;&gt;&gt; df['row3'] = np.where(df['row1'], df['row1'], df['row2'])                                                          
&gt;&gt;&gt; df                                                                                                                 
   row1  row2  row3
0     0   500   500
1  1400    -1  1400
2  1330    -1  1330
3     0   900   900
4   500    -1   500
</code></pre>
<p>Timings:</p>
<pre><code>&gt;&gt;&gt; df = pd.concat([df]*1000)
&gt;&gt;&gt; df_c = df.copy()                                                                                          
&gt;&gt;&gt; %timeit df.clip_lower(0).sum(1) # coldspeed 1                                                                      
537 µs ± 5.17 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
&gt;&gt;&gt; %timeit df.row2.mask(df.row2.eq(-1)).combine_first(df.row1) # coldspeed 2                                          
964 µs ± 15.6 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
&gt;&gt;&gt; %timeit df_c.loc[df_c.row2 == -1, 'row2'] = np.nan; df_c.row2.add(df_c.row1, fill_value=0) # coldspeed 3                   
2.66 ms ± 24.3 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
&gt;&gt;&gt; %timeit [r1 if r2 == -1 else r2 for r1, r2 in zip(df.row1, df.row2)] # Daniel Mesejo                               
466 µs ± 1.79 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
&gt;&gt;&gt; %timeit df.replace(-1,0).sum(1) # W-B                                                                              
783 µs ± 45.6 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)    
&gt;&gt;&gt; %timeit np.where(df['row2'] == -1, df['row1'], df['row2']) # timgeb 1                                              
173 µs ± 4.29 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)    
&gt;&gt;&gt; %timeit np.where(df['row1'], df['row1'], df['row2']) # timgeb 2                                                    
38.1 µs ± 3.69 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h3><code>clip_lower</code> + <code>sum</code></h3>
<p>Assuming your DataFrame does not have negative values, ...</p>
<pre><code>df['row3'] = df.clip_lower(0).sum(1)    
df
   row1   row2    row3
0     0  500.0   500.0
1  1400    NaN  1400.0
2  1330    NaN  1330.0
3     0  900.0   900.0
4   500    NaN   500.0
</code></pre>
<hr/>
<h3><code>mask</code> + <code>combine_first</code></h3>
<pre><code>df.row2.mask(df.row2.eq(-1)).combine_first(df.row1)

0     500.0
1    1400.0
2    1330.0
3     900.0
4     500.0
Name: row2, dtype: float64
</code></pre>
<h3>Masking + <code>Series.add</code></h3>
<pre><code>df.loc[df.row2 == -1, 'row2'] = np.nan
df.row2.add(df.row1, fill_value=0)
# Or,
# df.row2.mask(df.row2.eq(-1)).add(df.row1, fill_value=0)

0     500.0
1    1400.0
2    1330.0
3     900.0
4     500.0
dtype: float64
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A simple <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> will do:</p>
<pre><code>import pandas as pd

data = [[0, 500],
        [1400, -1],
        [1330, -1],
        [0, 900],
        [500, -1]]


df = pd.DataFrame(data=data, columns=["row1", "row2"])
df["row3"] = [r1 if r2 == -1 else r2 for r1, r2 in zip(df.row1, df.row2)]

print(df)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>   row1  row2  row3
0     0   500   500
1  1400    -1  1400
2  1330    -1  1330
3     0   900   900
4   500    -1   500
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My 5 Cents </p>
<pre><code>df.replace(-1,0).sum(1)
Out[338]: 
0     500
1    1400
2    1330
3     900
4     500
dtype: int64
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>pandas</code>' function <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.loc.html" rel="nofollow noreferrer"><code>loc</code></a>:</p>
<pre><code>df['row3'] = df.row1
df.loc[df.row3 == 0, 'row3'] = df.row2
</code></pre>
<p>Obtaining:</p>
<pre><code>|   | row1 | row2 | row3 |
|---|------|------|------|
| 0 | 0    | 500  | 500  |
| 1 | 1400 | -1   | 1400 |
| 2 | 1330 | -1   | 1400 |
| 3 | 0    | 900  | 900  |
| 4 | 500  | -1   | 500  |
</code></pre>
</div>
