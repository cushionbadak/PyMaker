<div class="post-text" itemprop="text">
<p>I have a csv file as follows:</p>
<pre><code>name,age
something
tom,20
</code></pre>
<p>And when I put it into a dataframe it looks like:</p>
<pre><code>df = pd.read_csv('file', header=None)

     0           1
1    name        age
2    something   NaN
3    tom         20
</code></pre>
<p>How would I get the count of a comma in the raw row data. For example, the answer should look like:</p>
<pre><code># in pseudocode
df['_count_separators'] = len(df.raw_value.count(','))

     0           1      _count_separators
1    name        age   1
2    something   NaN   0
3    tom         20    1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Very simply, read your data as a single column series, then split on comma and concatenate with separator count.</p>
<pre><code># s = pd.read_csv(pd.compat.StringIO(text), sep=r'|', squeeze=True, header=None)
s = pd.read_csv('/path/to/file.csv', sep=r'|', squeeze=True, header=None)
</code></pre>
<p></p>
<pre><code>pd.concat([
      s.str.split(',', expand=True), 
      s.str.count(',').rename('_count_sep')
   ], axis=1)

           0     1  _count_sep
0       name   age           1
1  something  None           0
2        tom    20           1
</code></pre>
<p>Another solution for concatenation is to <code>join</code> on the index (this is a neat one liner):</p>
<pre><code>s.str.split(',', expand=True).join(s.str.count(',').rename('_count_sep'))

           0     1  _count_sep
0       name   age           1
1  something  None           0
2        tom    20           1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Doing this </p>
<pre><code>df = pd.read_csv('file', header=None)
df2 = pd.read_csv('file', header=None,sep='|') # using another sep for read your csv again 

df2['0'].str.findall(',').str.len() # then one row into one cell , using str find 
0    1
1    0
2    1
3    5
Name: 0, dtype: int64

df['_count_separators']=df2['0'].str.findall(',').str.len()
</code></pre>
<hr/>
<p>Data </p>
<pre><code>name,age
something
tom,20
something,,,,,somethingelse
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><code>csv</code></a> module for the counting delimiters. This is a two-pass solution, but not necessarily inefficient versus alternative one-pass solutions.</p>
<pre><code>from io import StringIO
import csv, pandas as pd, numpy as np

x = """name,age
something
tom,20"""

# replace StringIO(x) with open('file.csv', 'r')
with StringIO(x) as fin:
    delim_counts = np.fromiter(map(len, csv.reader(fin)), dtype=int)

# replace StringIO(x) with 'file.csv'
df = pd.read_csv(StringIO(x), header=None)
df['_count_separators'] = delim_counts - 1

print(df)

           0    1  _count_separators
0       name  age                  1
1  something  NaN                  0
2        tom   20                  1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One line of code: <code>len(df) - df[1].isna().sum()</code></p>
</div>
<span class="comment-copy">do you also want to count the commas if they're in the column value?</span>
<span class="comment-copy">@OmkarSabade preferably just to get the number of separators that <code>pandas</code> inferred -- but either way is acceptable.</span>
<span class="comment-copy">I was hoping for a format like this: <code>1üêºtomüêº20üêºtom@doe.com</code></span>
<span class="comment-copy">We are on the same road:-) cheers</span>
<span class="comment-copy">@W-B yup did not see until I posted... great minds.. huh? ;)</span>
<span class="comment-copy">I read your mind hahahaha:-)</span>
<span class="comment-copy">But learn new strcount:-) thanks man</span>
<span class="comment-copy">Your answers stopped me from thinking otherwise</span>
<span class="comment-copy">Ohk if the nan itself is a part of the dataset then? like <code>something,,,something</code>?</span>
<span class="comment-copy">i'm not sure in which instance would <code>df = pd.read_csv('file.csv', header=None)</code> give a <code>nan</code> in his sample.</span>
<span class="comment-copy">This assumes there are only two columns...?</span>
