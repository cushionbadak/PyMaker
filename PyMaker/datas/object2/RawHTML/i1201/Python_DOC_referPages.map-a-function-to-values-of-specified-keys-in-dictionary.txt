<div class="post-text" itemprop="text">
<p>Is there a convenient way to map a function to specified keys in a dictionary?</p>
<p>Ie, given</p>
<pre><code>d = {"a": 1, "b": 2, "c": 3}
</code></pre>
<p>would like to map a function, say f, to keys "a" and "c":</p>
<pre><code>{"a": f(1), "b": 2, "c": f(3)}
</code></pre>
<p><strong>EDIT</strong></p>
<p>Looking for methods that will not update the input dictionary.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a dictionary comprehension:</p>
<pre><code>output_dict = {k: f(v) for k, v in d.items()}
</code></pre>
<p>Note that <code>f(v)</code> will be evaluated (called) immediately and its return values will be stored as the dictionary's values.</p>
<p>If you want to store the function and call it later (with the arguments already stored) you can use <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>functools.partial</code></a>:</p>
<pre><code>from functools import partial


def f(n):
    print(n * 2)


d = {"a": 1, "b": 2, "c": 3}

output_dict = {k: partial(f, v) for k, v in d.items()}

output_dict['b']()
# 4
</code></pre>
<p>If you only want <strong>specific keys</strong> mapped you can of course not use <code>.items</code> and just override those keys:</p>
<pre><code>d['a'] = partial(f, d['a'])
</code></pre>
<p>or more generalized</p>
<pre><code>keys = ('a', 'c')
for key in keys:
    d[key] = partial(f, d[key])
</code></pre>
</div>
<span class="comment-copy">I'd do: <code>use_f = {'a', 'b'}</code> then <code>{k: v if k not in use_f else f(v) for k, v in d.items()}</code></span>
<span class="comment-copy">Thanks, this idea works. I wrote a variation: <code>def map_at_keys(d,f,keys): return {k: f(v) if k in keys else v for k,v in d.items()}</code></span>
<span class="comment-copy">Cool, glad to help! Yes, it makes sense to put this into a function.</span>
<span class="comment-copy">Thanks. However, and I should have stated this in the Q, that I don't want the input dictionary updated <code>d[key]=...</code>, nor necessarily instantiate a new variable d2 - eg perhaps to inspect the modified return value. Can you modify your answer?</span>
<span class="comment-copy">@alancalvitti So you don't want to modify the original dictionary, but you also do not want to create a new one. There is no third option...</span>
<span class="comment-copy">the use case is to either print the return value of this selective map eg <code>d.map_on_keys(f,["a","c"])</code>  or to globally  set <code>d2 =  d.map_on_keys(f,["a","c"])</code></span>
