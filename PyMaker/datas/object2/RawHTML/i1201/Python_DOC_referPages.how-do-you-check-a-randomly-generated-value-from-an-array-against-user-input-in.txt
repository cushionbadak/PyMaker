<div class="post-text" itemprop="text">
<p>I'm doing a music quiz for my OCR GCSE programming project. The aim of the python program is to generate a randomly chosen song from an array, display the initials of the song and also show the artist, then allow the user to guess the name of the song. The song array and the artist array are stored in separate external notepad files, and load in correctly, displaying the initials of the song and the artist. My problem is that, even if the user guesses the song name correctly, the program displays that it is incorrect and does not match the correct song name to the user input. </p>
<p>I have tried displaying the song name to make sure I am guessing the song name correctly, and have also tried copying the song name and copying it into the user input</p>
<pre><code>import random
songlistfilecontents = open("songlist.txt", "r")
songlist = songlistfilecontents.readlines()
artistlistfilecontents = open("artistlist.txt", "r")
artistlist = artistlistfilecontents.readlines()
randomnumber = random.randint(0,11)
randomsong = songlist[randomnumber]
randomartist = artistlist [randomnumber]
initialsofsong = "".join(item[0].upper() for item in randomsong.split())

counter = 0
print("The songs' initials are " ,initialsofsong, " and the name of the 
artist is " ,randomartist)
print (randomsong)
songnameguess = input("Guess the name of the song!")
counter = counter + 1
while songnameguess != randomsong:
    songnameguess = input("Nope! Try again!")
    counter = counter + 1
if counter &gt;=3 and songnameguess != randomsong:
    print ("Sorry, you've had two chances. Come back soon!")
elif songnameguess == randomsong:
    print ("Well done!")
</code></pre>
<p>I expect the program to display "Well done!" if the user has not guessed the song incorrectly more than 3 times and guesses the answer correctly. However, the program never shows this and instead displays Nope! Try again and prompts for input for songnameguess until the user has guessed (incorrectly or correctly) three times, then prints Sorry, you've had two chances. Come back soon!</p>
</div>
<div class="post-text" itemprop="text">
<p>Like @Barmar said in the comments when you read a text file, you have to take into account the fact that you are going to get the newline character at the end of each line. But there's another bug in your code: in your <code>while</code> loop you never check to see if the user has given more answers than you wanted to grant him. So the user will be stuck in that loop until he gives the right anwser.</p>
<p>So with minimal modifications it would look like:</p>
<p><strong>Solution 1</strong></p>
<pre><code>import random
songlistfilecontents = open("songlist.txt", "r")
songlist = songlistfilecontents.readlines()
artistlistfilecontents = open("artistlist.txt", "r")
artistlist = artistlistfilecontents.readlines()
randomnumber = random.randint(0,11)
randomsong = songlist[randomnumber]
randomsong = randomsong.rstrip("\n")
randomartist = artistlist [randomnumber]
initialsofsong = "".join(item[0].upper() for item in randomsong.split())

counter = 0
print("The songs' initials are " ,initialsofsong, " and the name of the artist is " ,randomartist)
print (randomsong)
songnameguess = input("Guess the name of the song!")
counter = counter + 1
while counter &lt; 3 and songnameguess != randomsong :
    songnameguess = input("Nope! Try again!")
    counter = counter + 1

if counter &gt;=3 and songnameguess != randomsong:
    print ("Sorry, you've had two chances. Come back soon!")
elif songnameguess == randomsong:
    print ("Well done!")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>But we go can go further.</p>
<p><strong>Solution 2</strong></p>
<pre><code>import random

with open("songlist.txt", "r") as songlistfilecontents:
    songlist = songlistfilecontents.readlines()

with open("artistlist.txt", "r") as artistlistfilecontents:
    artistlist = artistlistfilecontents.readlines()

randomnumber = random.randint(0,11)
randomsong = songlist[randomnumber]
randomsong = randomsong.rstrip("\n")
randomartist = artistlist [randomnumber]
initialsofsong = "".join(item[0].upper() for item in randomsong.split())


print("The songs' initials are", initialsofsong, "and the name of the artist is", randomartist)
print (randomsong)
# First try
songnameguess = input("Guess the name of the song! ")
nb_tries_left = 2
answer_not_found = (songnameguess != randomsong)
while nb_tries_left &gt; 0 and answer_not_found:
    songnameguess = input("Nope! Try again! ")
    nb_tries_left -= 1
    answer_not_found = (songnameguess != randomsong)

if answer_not_found:
    print ("Sorry, you've had two chances. Come back soon!")
else:
    print ("Well done!")
</code></pre>
<ul>
<li>I've used <a href="https://docs.python.org/3/reference/datamodel.html#context-managers" rel="nofollow noreferrer">context managers</a> to open and read files</li>
<li>I've used <code>nb_tries_left</code> to keep note of the number of tries left before stopping. Instead of counting up to a value, I set that value first and decrement to zero.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>We can go even further:</p>
<p><strong>Solution3</strong></p>
<pre><code>import random

with open("songlist.txt", "r") as songs_file:
    with open("artistlist.txt", "r") as artists_file:
        songs_and_artists = [(song.rstrip('\n'), artist.rstrip('\n'))
                             for (song, artist) in zip(songs_file, artists_file)]

random_song, random_artist = random.choice(songs_and_artists)
songs_intials = "".join(item[0].upper() for item in random_song.split())


print("The songs' initials are", songs_intials, "and the name of the artist is", random_artist)
print(random_song)

nb_tries_left = 3
guess = input("Guess the name of the song! ")
nb_tries_left -= 1

finished = False
while not finished:
    answer_found = (guess == random_song)
    if not answer_found:
        guess = input("Nope! Try again! ")
        nb_tries_left -= 1

    finished = (answer_found or nb_tries_left &lt;= 0) 

if answer_found:
    print ("Well done!")
else:
    print ("Sorry, you've had two chances. Come back soon!")
</code></pre>
<ul>
<li>I use the fact that file objects are iterable. So using <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip()</code></a>, I create a list of tuples containing songs and artists combined. </li>
<li>I use <a href="https://docs.python.org/3/library/random.html#random.choice" rel="nofollow noreferrer"><code>random.choice()</code></a> to pick a random song and artist</li>
</ul>
</div>
<span class="comment-copy">The "disqualified" line is not relevant at all to how Stack Overflow works. But anyway <code>if counter &gt;=3 and songnameguess != randomsong:</code> is not inside the <code>while</code> loop, so they could have 100 guesses before they find out they were wrong.</span>
<span class="comment-copy">I have tried your advice, but it doesn't provide a solution to the problem I mentioned.  The guess provided by the user is still always incorrect.</span>
<span class="comment-copy">The lines returned by <code>readlines()</code> have newlines at the end.</span>
<span class="comment-copy">Related: <a href="https://stackoverflow.com/questions/12330522/reading-a-file-without-newlines/12330535#12330535">reading a file without newlines</a></span>
