<div class="post-text" itemprop="text">
<p>I have this pandas code, but it's very slow. How could i optimize it? Meaning that when i run it, it takes around 4 seconds to do so. This code i call down here is what i call over and over as and it should be as fast as possible that it currently isn't... anyone got an idea?</p>
<pre><code>    self.dataframe = pd.DataFrame(columns=list(['O' ,'H' ,'L' ,'C' ,'RSI', 'Upper Band', 'Lower Band'])) 

    BinanceHistoricalUrl = "https://api.binance.com/api/v1/klines?"
    BinanceHistoricalPayload = {'symbol' : 'BTCUSDT','interval': '1m','limit': 100}
    HistoricalRequestData = requests.get(url=BinanceHistoricalUrl, params=BinanceHistoricalPayload).json()

    Lenght = len(HistoricalRequestData)

    for i in range(Lenght):

        O = HistoricalRequestData[i][1]
        O = "{:.4f}".format(O)
        O = float(O)

        H = HistoricalRequestData[i][2]
        H = "{:.4f}".format(H)
        H = float(H)

        L = HistoricalRequestData[i][3]
        L = "{:.4f}".format(H)
        L = float(L)

        C = HistoricalRequestData[i][4]
        C = "{:.4f}".format(C)
        C = float(C)

#        Volume = HistoricalRequestData[0]["priceData"][i]['volume']
#        Volume = "{:.4f}".format(Volume)
#        Volume = float(Volume)

        self.dataframe = self.dataframe.append({'O': O, 'H' : H, 'L' : L, 'C' : C}, ignore_index=True)         

    make_RSI(self.dataframe)
    make_bollinger_bands(self.dataframe)
    RSI = self.dataframe['RSI'][99]
    RSI = float(RSI)
    UppBoll = self.dataframe['Upper Band'][99]
    UndBoll = self.dataframe['Lower Band'][99]
    previouscloseprice = self.dataframe['C'][99]
    MA = self.dataframe['20 Day MA'][99]
    DistanceUppBoll = UppBoll - MA
    DistanceUppBoll = float(DistanceUppBoll)
    DistanceUndBoll = UndBoll - MA
    DistanceUndBoll = float(DistanceUndBoll)

    self.dataframe = self.dataframe.iloc[0:0]




def make_RSI(dataframe):
    delta = dataframe['C'].diff()
    dUp, dDown = delta.copy(), delta.copy()
    dUp[dUp &lt; 0] = 0
    dDown[dDown &gt; 0] = 0
    RolUp = dUp.rolling(14).mean()
    RolDown = dDown.rolling(14).mean().abs()

    RS = RolUp / RolDown
    dataframe['RSI'] = 100 - (100/(1+RS))

def make_bollinger_bands(dataframe):
    dataframe['20 Day MA'] = dataframe['C'].rolling(window=20).mean()
    dataframe['20 Day STD'] = dataframe['C'].rolling(window=20).std()
    dataframe['Upper Band'] = dataframe['20 Day MA'] + (dataframe['20 Day STD'] * 2)
    dataframe['Lower Band'] = dataframe['20 Day MA'] - (dataframe['20 Day STD'] * 2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your code is not really reproducible. Let's do some order</p>
<pre><code># first import libraries
import pandas as pd
import requests

#define functions
def make_RSI(dataframe):
    delta = dataframe['C'].diff()
    dUp, dDown = delta.copy(), delta.copy()
    dUp[dUp &lt; 0] = 0
    dDown[dDown &gt; 0] = 0
    RolUp = dUp.rolling(14).mean()
    RolDown = dDown.rolling(14).mean().abs()

    RS = RolUp / RolDown
    dataframe['RSI'] = 100 - (100/(1+RS))

def make_bollinger_bands(dataframe):
    dataframe['20 Day MA'] = dataframe['C'].rolling(window=20).mean()
    dataframe['20 Day STD'] = dataframe['C'].rolling(window=20).std()
    dataframe['Upper Band'] = dataframe['20 Day MA'] + (dataframe['20 Day STD'] * 2)
    dataframe['Lower Band'] = dataframe['20 Day MA'] - (dataframe['20 Day STD'] * 2)

#############
# your code #
############
BinanceHistoricalUrl = "https://api.binance.com/api/v1/klines?"
BinanceHistoricalPayload = {'symbol' : 'BTCUSDT','interval': '1m','limit': 100}
#get data
HistoricalRequestData = requests.get(url=BinanceHistoricalUrl, 
                                     params=BinanceHistoricalPayload)\
                                .json()

# put on a dataframe
dataframe = pd.DataFrame(HistoricalRequestData)
# consider only columns from 1 to 4(included)
dataframe = dataframe[dataframe.columns[1:5]]
# assign column names
dataframe.columns = ["O", "H", "L", "C"]
# set type float
dataframe = dataframe.astype("float64")
# call functions
make_RSI(dataframe)
make_bollinger_bands(dataframe)
</code></pre>
<p>It's not quite clear what do you want to achieve at the end, but you are just using the last row of your <code>dataframe</code> so you might consider to </p>
<pre><code>last = dataframe.iloc[-1]
DistanceUppBoll = last["Upper Band"] - last["20 Day MA"]
DistanceUndBoll = last["Lower Band"] - last["20 Day MA"]
</code></pre>
<p>This took <code>717 ms</code> on my laptop. I guess that mostly depends on the speed of your connection.</p>
<p><strong>NOTE:</strong> The main point here is that you should avoid loops if possible.</p>
<p><strong>Update:</strong> If you are trying to implement a trading strategy based on basic technical analysis you should have a look at how to calculate <code>MA</code> in streaming.</p>
</div>
<span class="comment-copy">Have you looked at <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/enhancingperf.html" rel="nofollow noreferrer">pandas' guide for performance tuning</a>? I'm not sure what <code>make_RSI</code> and <code>make_bollinger_bands</code> do, but I suspect they could be optimized as well.</span>
<span class="comment-copy">Hi jandevies, welcome to SO. Please produce a <a href="/help/mcve">mcve</a> in particular post a sample of your original data and the expected output. It looks to me a very easy to vectorize problem.</span>
<span class="comment-copy">@JordanSinger I'm not sure which library is the OP using but there are many well optimized libraries for finance.</span>
<span class="comment-copy">i am using pandas @user32185</span>
<span class="comment-copy">@jandevries this was pretty clear. Still if you are able to make a reproducible example you could get an answer pretty soon.</span>
<span class="comment-copy">Hm i tried this and it looks working good i knew it had something to do with the loop but couldn't think of how to remove it, however i can't really check if its assigning the correct values to the correct column.... could you maybe explain to me how it's assigning it to the according place, because i don't seem to get that.. also what happens if i connect a diffrent dataset to it? that has the format of this for example: <a href="https://pastebin.com/wrkZ5nNN" rel="nofollow noreferrer">pastebin.com/wrkZ5nNN</a> i can't imagne it assigning the correct values to the correct column himself? Could you explain? Furthermore thanks this is very useful!</span>
<span class="comment-copy">PS, mine takes ca 400 ms, this is awesome!</span>
<span class="comment-copy">Here I'm using the fact that HistoricalRequestData is a list of lists. For every list the elements with index 1,2,3,4 are OHLC respectively. When I do df.columns[1:5] I'm just picking these columns. If the answer was useful please consider to accept and/or upvote it.</span>
<span class="comment-copy">So df.columns[1:5] takes : [[false,true,true,true,true,false,false,false]] from the list etc , so if i would want the first 3 values for example i'd do df.columns[0:4] causing: [[true,true,true,false,false,false,false,false]] and it does this for all the lists so on right....?</span>
<span class="comment-copy">@jandevries spot on! Eventually open another question for the data you posted in your previous comment.</span>
