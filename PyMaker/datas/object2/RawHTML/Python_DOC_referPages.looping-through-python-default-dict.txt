<div class="post-text" itemprop="text">
<p>I create a default dict in my code something like below:</p>
<blockquote>
<p>defaultdict(<code>&lt;class 'list'&gt;</code>, {'month': ['JAN', 'FEB'], 'car': ['baleno', 'santro'], 'measure': ['sales', 'expense']})</p>
</blockquote>
<p><code>cube = 'test'</code></p>
<p>Now I would like to print above dict in the below format by adding variable <code>cube</code>:</p>
<blockquote>
<p>['month', 'JAN', 'car', 'baleno', 'measure', 'sales', 'test']</p>
<p>['month', 'JAN', 'car', 'baleno', 'measure','expense', 'test']</p>
<p>['month', 'JAN', 'car', 'santro', 'measure', 'sales', 'test'] </p>
<p>['month', 'JAN', 'car', 'santro', 'measure', 'expense', 'test']</p>
<p>['month', 'FEB', 'car', 'baleno', 'measure','sales', 'test']</p>
<p>['month', 'FEB', 'car', 'baleno', 'measure','expense', 'test']</p>
<p>['month', 'FEB', 'car', 'santro', 'measure','sales', 'test']</p>
<p>['month', 'FEB', 'car', 'santro', 'measure','expense', 'test']</p>
</blockquote>
<p>I'm actually using three loops to achieve the above output, but would like to get a neat one.</p>
<pre><code>dim=['month','car','measure']
cube='test'
for b in itertools.product(*(k.values())):                                                  
        list1 = list()                                      
        for (f, c) in zip(b, dim):                                                         
            list1.append(c)                                 
            list1.append(f)                                 
        list1.append(cube)                             
        print(list1) 
</code></pre>
<p><strong>k</strong> is the default dict</p>
<p>PS: I'm new to PYTHON. Just using it for the couple of months.</p>
</div>
<div class="post-text" itemprop="text">
<p>Given the input is a dictionary, I don't think you can get much more efficient than nested for loops (note: itertools.product is equivalent to a for loop). You could possibly do it as a one liner using list comprehension, but this won't be more efficient and may be less readable.</p>
<p>Your implementation looks fine, here is a slightly more streamlined write up:</p>
<pre><code>k = {'month': ['JAN', 'FEB'], 
     'car': ['baleno', 'santro'], 
     'measure': ['sales', 'expense']}

# Grab the keys from the dictionary as opposed to hard-coding them
dim=k.keys()
cube='test'

# cartesian product of each key's set of values
for b in itertools.product(*k.values()):                                                
    list1 = list()
    # extending empty list by (key, value) for specific values in product b                         
    for pair in zip(dim, b):                                                         
        list1.extend(pair)                                 
    list1.append(cube)                             
    print(list1) 
</code></pre>
</div>
<span class="comment-copy">Have a look at <code>itertools.product</code></span>
<span class="comment-copy">I have updated the code I use. @BlueSheepToken I already use <code>itertools.product</code>, but not sure if I'm using it the right way!</span>
<span class="comment-copy">to me it looks ok. Unfortunatzly you cannot speed up this as it is already optimized</span>
<span class="comment-copy">Thanks for optimizing the code. But, looking for something to speed up the process. That dict <code>k</code> is just a small sample I gave you. But my real code has a very big dict.  The <code>for</code> loop in <code>itertools.product</code> iterates around <b>32616937604160</b> times, I'm able to parse only 150000 records per hour.</span>
<span class="comment-copy">@User1493 as I said, for calculating a cartesian product there isn't much more you can do in terms of efficiency than nested for loops. See similar implementations here: <a href="https://stackoverflow.com/questions/5228158/cartesian-product-of-a-dictionary-of-lists" title="cartesian product of a dictionary of lists">stackoverflow.com/questions/5228158/…</a> <a href="https://stackoverflow.com/questions/52190140/cartesian-product-of-dictionary-keys-and-values-python" title="cartesian product of dictionary keys and values python">stackoverflow.com/questions/52190140/…</a> etc</span>
<span class="comment-copy">@User1493 you may want to look into converting the dict to a dataframe and e.g. <code>melt</code> etc</span>
