<div class="post-text" itemprop="text">
<p>I have a dataframe in pandas that looks like below. Index is date time object, ordered by day, divided in 5 minute bins. I have a column called 'col1'. So if I do </p>
<pre><code>df['col1']
</code></pre>
<p>I get:</p>
<pre><code>DateTime
2008-04-28 09:40:00     300.0
2008-04-28 09:45:00    -800.0
2008-04-28 09:50:00       0.0
2008-04-28 09:55:00    -100.0
2008-04-28 10:00:00       0.0    
2008-04-29 09:40:00     500.0
2008-04-29 09:45:00     800.0
2008-04-29 09:50:00     100.0
2008-04-29 09:55:00    -100.0
2008-04-29 10:00:00       0.0
</code></pre>
<p>I have another dataframe in pandas obtained using groupby in the original dataframe using</p>
<pre><code>df2 = df([df.index.time])[['col2']].mean()    
</code></pre>
<p>that outputs:</p>
<pre><code>           col2
09:40:00   4603.585657
09:45:00   5547.011952
09:50:00   8532.007952
09:55:00   6175.298805
10:00:00   4236.055777
</code></pre>
<p>What I would like to do is to divide col1 by col2 for each of the 5 minute bins without using a for loop. To explain better, for all the days, for each bin divide col1 by col2. For example, divide all the 9:40:00 values in col1 by 9:40:00 value in col2.</p>
<p>I have no idea how to begin doing this without a for loop, but I have the impression that it should be doable with pandas.</p>
<p>The expected output is:</p>
<pre><code>DateTime
2008-04-28 09:40:00     300.0/4603.585657
2008-04-28 09:45:00    -800.0/5547.011952
2008-04-28 09:50:00       0.0/8532.007952
2008-04-28 09:55:00    -100.0/6175.298805
2008-04-28 10:00:00       0.0/4236.055777  
2008-04-29 09:40:00     500.0/4603.585657
2008-04-29 09:45:00     800.0/5547.011952
2008-04-29 09:50:00     100.0/8532.007952
2008-04-29 09:55:00    -100.0/6175.298805
2008-04-29 10:00:00       0.0/4236.055777
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If need divide by times:</p>
<pre><code>df['new'] = df['col1'].div(df.groupby(df.index.time)['col1'].transform('mean'))
print (df)
                      col1   new
DateTime                        
2008-04-28 09:40:00  300.0  0.75
2008-04-28 09:45:00 -800.0  -inf
2008-04-28 09:50:00    0.0  0.00
2008-04-28 09:55:00 -100.0  1.00
2008-04-28 10:00:00    0.0   NaN
2008-04-29 09:40:00  500.0  1.25
2008-04-29 09:45:00  800.0   inf
2008-04-29 09:50:00  100.0  2.00
2008-04-29 09:55:00 -100.0  1.00
2008-04-29 10:00:00    0.0   NaN
</code></pre>
<p>Or if need divide by days:</p>
<pre><code>df['new'] = df['col1'].div(df.groupby(df.index.date)['col1'].transform('mean'))
print (df)
                      col1       new
DateTime                            
2008-04-28 09:40:00  300.0 -2.500000
2008-04-28 09:45:00 -800.0  6.666667
2008-04-28 09:50:00    0.0 -0.000000
2008-04-28 09:55:00 -100.0  0.833333
2008-04-28 10:00:00    0.0 -0.000000
2008-04-29 09:40:00  500.0  1.923077
2008-04-29 09:45:00  800.0  3.076923
2008-04-29 09:50:00  100.0  0.384615
2008-04-29 09:55:00 -100.0 -0.384615
2008-04-29 10:00:00    0.0  0.000000
</code></pre>
</div>
<span class="comment-copy"><code>groupby 5 minutes</code>? I guess not all cases are like so, but here there are no time steps &lt; than 5min</span>
<span class="comment-copy">sorry, groupby day</span>
<span class="comment-copy">Is what I answered what you're trying to doÂ¿</span>
<span class="comment-copy">I don't know, I am very lost right now. Sorry. I am trying to figure out.</span>
<span class="comment-copy">@python_enthusiast - Can you add expected output?</span>
<span class="comment-copy">How does that divide col1 by col2?</span>
<span class="comment-copy">What is <code>print (df2.index[:10])</code> ?</span>
<span class="comment-copy">Index([09:35:00, 09:40:00, 09:45:00, 09:50:00, 09:55:00, 10:00:00, 10:05:00,        10:10:00, 10:15:00, 10:20:00],       dtype='object')</span>
<span class="comment-copy">@python_enthusiast - and <code>print (type(df2.index[0]))</code> ?</span>
<span class="comment-copy">Thank you very much!</span>
