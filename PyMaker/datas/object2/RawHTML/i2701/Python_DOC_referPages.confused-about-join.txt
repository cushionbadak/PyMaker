<div class="post-text" itemprop="text">
<p>I’m new to python and completely confused,</p>
<p>why <code>','.join('a','b','c')</code>rised an error, a <code>",".join(['a','b','c'])</code>didn’t.</p>
<p>Why the code below have the same output?</p>
<pre><code>In [3]: ",".join({'a':1,'b':2,'c':3})
Out[3]: 'b,a,c'

In [4]: ",".join({'a':2,'b':1,'c':3})
Out[4]: 'b,a,c'

In [5]: ",".join({'a':3,'b':2,'c':1})
Out[5]: 'b,a,c'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>join</code> takes only one argument of the iterable type. <code>','.join('a','b','c')</code>gives join 3 arguments of type string instead of 1. Whereas <code>",".join(['a','b','c'])</code> gives join only 1 argument of type list which is an iterable. Single or double quotes make no difference.</p>
<p>For your second question, all 3 dictionaries give the same output since what value is stored for a key makes no difference. So whether a key has a value of 1 or 3 or perhaps some string, it wont affect the order. The order of a dictionary is inherently arbitrary. It cannot be predicted in advance and it is because of the fact how dictionaries are stored in memory.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer">The docs</a> on <code>str.join</code> state that the method takes <strong>an</strong> <code>iterable</code> which is any type that can be iterated over (list, tuple, etc.):</p>
<blockquote>
<p><code>str.join(iterable)¶</code></p>
<p>Return a string which is the concatenation of the strings in iterable. A <code>TypeError</code> will be raised if there are any non-string values in iterable, including bytes objects. The separator between elements is the string providing this method.</p>
</blockquote>
<hr/>
<p>In your first example, you pass three arguments to a method which expects one so receive a <code>TypeError</code>, whereas you use the method as intended in the example where you pass a list (indicated so through the use of square brackets). In your typed examples, you are passing dictionaries which are also iterable, however, when iterated over, they yield their keys (note: the order is undetermined). So the keys of say: <code>{'a':1,'b':2,'c':3}</code> are: <code>'a'</code>, <code>'b'</code> and <code>'c'</code> and since these are all strings, the method works fine to join them together with a comma</p>
</div>
<div class="post-text" itemprop="text">
<p>Because with <code>','.join('a','b','c')</code>, you're providing <strong>3 arguments</strong>, each of which is a <code>str</code>, to <code>str.join()</code>, which is unexpected (expected 1).</p>
<p>With <code>','.join(['a','b','c'])</code>, you're providing only <strong>1 argument</strong> which is a <code>list</code>, and it works well.</p>
</div>
<span class="comment-copy">Perhaps you meant to put: <code>','.join(('a', 'b', 'c'))</code> for your first join example which would be valid.</span>
<span class="comment-copy">@user18861 since your new to Python here's more on iterables: <a href="https://docs.python.org/3/tutorial/classes.html#iterators" rel="nofollow noreferrer">docs.python.org/3/tutorial/classes.html#iterators</a>.</span>
