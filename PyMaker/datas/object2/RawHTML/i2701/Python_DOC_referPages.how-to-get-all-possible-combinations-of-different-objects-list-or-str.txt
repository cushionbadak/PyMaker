<div class="post-text" itemprop="text">
<p>it's more like a general question and I'm not sure if any algorithm exists for what I have in mind and if it exists what its called ...</p>
<p>let's say we have three objects (list)</p>
<pre><code>["object", 1 , "this is object one"]
["object2", 2 , "this is object one"]
["object3", 3 , "this is object three"]
</code></pre>
<p>what I want to do now is create new lists with all possible combinations such as</p>
<pre><code>["object2", 1 , "this is object three"]
["object1", 3 , "this is object two"]
</code></pre>
<p>and even future</p>
<pre><code> [3, "object2", "this is object one"]
 [1 , "this is object 2" , ] # last item removed as part of going for all combinations
</code></pre>
<p>so I'm looking for an algorithm to mix/combine/add/remove stuff in a logical framework. </p>
<p>I know python has but in itertools lib and combinations method but it doesn't seem to offer all combinations.</p>
<p>is there any known algorithm/lib for path and combinations between objects?</p>
<p>Thanks </p>
</div>
<div class="post-text" itemprop="text">
<p>You don't seem to want <em>combinations</em>. You want <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><em>Cartesian product</em></a>, and, probably, permutations (it's a little unclear from your description). For the Cartesian product, you need to do something like</p>
<pre><code>itertools.product([
    ('object1', 'object2', 'object3'),
    (1, 2, 3),
    ('this is 1', 'this is 2', 'this is 3')
])
</code></pre>
<p>For the second part of your question, on every element of the list built by the previous example, you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow noreferrer"><code>itertools.permutations</code></a>.</p>
</div>
<span class="comment-copy">For the first part, you can use <code>itertools.product(*zip(list1, list2, list3))</code>.  The second part is quite unclear and rather underspecified.</span>
<span class="comment-copy">Have you tried itertools.product? It will give cross product of the lists</span>
<span class="comment-copy">cartesian product and permutations are nice to know any other related algorithms?</span>
<span class="comment-copy">@jdarap: can't think right now. read a tutorial on <i>combinatorics</i>.  there's a few variations on these ideas, how to select, combine and order things. seem easy, but they are quite tricky to get right.</span>
<span class="comment-copy">@jdarap There are four that come with Python, which you can see in the "Combinatoric iterators" section of the <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code></a> module docs. Mainly those are the ones you needâ€”but sometimes you need variations on them (like permutations or combinations discounting repeated equal elements). Also, you often need to chain them up with non-combinatoric algorithms like <code>sorted</code>, <code>groupby</code>, or <code>unique</code>. Many of those other algorithms are also in <code>itertools</code>; you can find more in third-party libs <code>more_itertools</code> and <code>toolz</code>.</span>
<span class="comment-copy">@jdarap Whether you want permutations depends on whether <code>["object1", 1, "this is 1"]</code> is considered different from <code>["1, "object1", "this is 1"]</code>. If the latter is not allowed, or is considered the same as the former, then you don't need permutations.</span>
<span class="comment-copy">thanks, guys awesome. I'll do more research as I have some clue at least</span>
