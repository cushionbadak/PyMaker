<div class="post-text" itemprop="text">
<p>How to create a type whose instances can be indexed with [], just like a list.</p>
<p>I can use this object like </p>
<blockquote>
<p>my_obj[***]</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>I think you're asking how to create a sequence typeâ€”a type whose instances can be indexed with <code>[]</code>, just like a list.</p>
<hr/>
<p>The key to doing this is to implement one or more special methods, as described in <a href="https://docs.python.org/3/reference/datamodel.html#emulating-container-types" rel="nofollow noreferrer">Emulating container types</a> in the docs.</p>
<p>In particular, the special method that gets called for <code>my_obj[1]</code> is <a href="https://docs.python.org/3/reference/datamodel.html#object.__getitem__" rel="nofollow noreferrer"><code>__getitem__</code></a>.</p>
<p>For a dead-simple example, let's create something that acts like a list of all of the lowercase English letters:</p>
<pre><code>class Letters:
    def __getitem__(self, index):
        return string.ascii_lowercase[index]
</code></pre>
<p>And now:</p>
<pre><code>&gt;&gt;&gt; letters = Letters()
&gt;&gt;&gt; letters[2]
'c'
&gt;&gt;&gt; letters[-2]
'y'
&gt;&gt;&gt; letters[3:6]
'def'
</code></pre>
<p>However, this isn't really a complete sequence. For example:</p>
<pre><code>&gt;&gt;&gt; len(letters)
TypeError: object of type 'Letters' has no len()
&gt;&gt;&gt; reversed(letters)
TypeError: object of type 'Letters' has no len()
&gt;&gt;&gt; isinstance(letters, collections.abc.Sequence)
False
</code></pre>
<hr/>
<p>If you want to implement a complete sequence, the <a href="https://docs.python.org/3/library/collections.abc.html" rel="nofollow noreferrer"><code>collections.abc</code></a> module is useful, because all of the abstract base classes it provides are also mixin classes that fill in most of the implementation for you. For example, if we inherit <code>Sequence</code>, we can just define <code>__getitem__</code> and <code>__len__</code>, and it'll give us implementations of <code>__contains__</code>, <code>__iter__</code>, <code>__reversed__</code>, <code>index</code>, and <code>count</code> for free:</p>
<pre><code>class Letters(collections.abc.Sequence):
    def __getitem__(self, index):
        return string.ascii_lowercase[index]
    def __len__(self):
        return 26
</code></pre>
<p>And now, everything that works on <code>list</code>, <code>tuple</code>, and <code>range</code> works on <code>Letters</code>:</p>
<pre><code>&gt;&gt;&gt; letters = Letters()
&gt;&gt;&gt; len(letters)
26
&gt;&gt;&gt; reversed(letters)
&lt;generator object Sequence.__reversed__ at 0x15f949f68&gt;
&gt;&gt;&gt; print(*reversed(letters))
z y x w v u t s r q p o n m l k j i h g f e d c b a
&gt;&gt;&gt; letters.index('s')
10
&gt;&gt;&gt; isinstance(letters, collections.abc.Sequence)
True
</code></pre>
<hr/>
<p>Also, I cheated a bit, creating a sequence that just delegates to a different sequence (<code>ascii_lowercase</code>) to do all the work. In fact, you can often do that, but sometimes you can't. And when you can't, you usually have to handle negative indexes and slices yourself, which looks a bit uglier:</p>
<pre><code>def __getitem__(self, index):
    if isinstance(index, slice):
        return [self[i] for i in index.indices(len(self))]
    if index &lt; 0:
        index += len(self)
    return string.ascii_lowercase[index]
</code></pre>
<p>(You often want the slice to return another instance of <code>type(self)</code>, not a list, but for <code>Letters</code> that doesn't make any sense, so I just returned a list.)</p>
<hr/>
<p>If you want a <em>mutable</em> sequence, like a list as opposed to a tuple, where you can modify values, and maybe add and delete them, there are a few more methods to implement, but nothing hugely different.</p>
<hr/>
<p>For a more complete example, see <a href="http://stupidpythonideas.blogspot.com/2015/07/creating-new-sequence-type-is-easy.html" rel="nofollow noreferrer">Creating a new sequence is easy</a>.</p>
</div>
<span class="comment-copy">When you say "array-like", are you talking about the NumPy term "array-like", or are you just asking how to write a list, or are you asking how to define your own class that acts like a sequence?</span>
<span class="comment-copy">Sorry about my bad English expression. What I call it 'Array like" actually means a type whose instances can be indexed with [], just like a list. ( copy from the first answer!</span>
<span class="comment-copy">It is really what I want!!! Thanks a lot!</span>
