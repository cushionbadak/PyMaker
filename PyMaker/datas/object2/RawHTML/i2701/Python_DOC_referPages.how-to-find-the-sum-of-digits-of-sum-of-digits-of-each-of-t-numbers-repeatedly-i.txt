<div class="post-text" itemprop="text">
<p>Here is the code that i wrote to get sum of digits from a number repeated number of times till the sum gets below 10: </p>
<pre><code>T = int(input())
for i in range(T):
    N = int(input())
    def P():
            M = [int(d) for d in str(N)]
            N = sum(M)
            if N&lt;10:
                    print(N)
            else :
                    return P()
    P()
</code></pre>
<p>On running this code it gives me an error like:</p>
<pre><code> Traceback (most recent call last): 
 File"C:/Users/AdityaShrivastava/AppData/Roaming/Python/Python36/Scripts/tes 
 ting.py", line 11, in &lt;module&gt;
 P()
 File "C:/Users/Aditya 
 Shrivastava/AppData/Roaming/Python/Python36/Scripts/testing.py", line 5, in 
 P
 M = [int(d) for d in str(N)]
 UnboundLocalError: local variable 'N' referenced before assignment
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are using recursion to solve this. It is more efficient to simply use a loop:</p>
<pre><code>def gimmeNumber(text):
    """"Helper: Asks for input until valid integer number is inputted. Retuns the number"""
    while True:
        T = input(text).strip()
        if T and T.isdigit():
            T = int(T)
            break
        print("Thats not a number ...")
    return T

def sumDigits(number):
    return sum(int(x) for x in str(number))

T = gimmeNumber("How many numbers? ")
for _ in range(T):
    s = 0
    N = gimmeNumber("Give me a number: ")
    # calculate the cross-sum
    s = sumDigits(N)
    while s &gt; 9: # repeat while greater then 9  
        s = sumDigits(s)

    print(s)
</code></pre>
<p>Input:  4, then 999,888,333,111</p>
<p>Output: </p>
<pre><code>9
6
9
3
</code></pre>
<hr/>
<p>As @Arne suggested changing <code>gimmeNumber(text)</code> to use <code>try/except</code> instead fits better into pythons <a href="https://stackoverflow.com/questions/12265451/ask-forgiveness-not-permission-explain">Ask forgiveness not permission</a> mindset, and I agree.</p>
<p>Still, the variant above also works and is easier to understand for beginners. Here is the <code>try/except</code> one:</p>
<pre><code>def gimmeNumber(text):
    """"Helper: Asks for input until valid integer number is inputted. Retuns the number"""
    while True:
        try:
            T = int(input(text).strip())
            break
        except ValueError as e:
            print("Thats not a number ...")
    return T
</code></pre>
<p>For more about input validation I would suggest reading up on it in the answers of <a href="https://stackoverflow.com/questions/23294658/asking-the-user-for-input-until-they-give-a-valid-response">Asking the user for input until they give a valid response</a> .</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>UnboundLocalError: local variable 'N' referenced before assignment</code> you are getting is as a result of using N inside function <code>P()</code> without having declared and initialized it.</p>
<p><code>N = int(input())</code> is inside the loop but outside the scope of <code>P()</code>. The last line <code>P()</code> in the loop will call function <code>P()</code> and not go back to <code>N = int(input())</code> where N would have been assigned.</p>
<p>I have modified the code to</p>
<pre><code>T = int(input())
for i in range(T):
    N = int(input())
    def P(N):
        M = [int(d) for d in str(N)]
        N = sum(M)
        if N&lt;10:
            print(N)
        else :
            return P(N)
    P(N)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can fix this by passing N as a parameter in the P function.</p>
<pre><code>T = int(input())
for i in range(T):
N = int(input())
def P(n):
        M = [int(d) for d in str(n)]
        n = sum(M)
        if n&lt;10:
                print(n)
        else :
                P(n)
P(N)
</code></pre>
<p>If you set value of N inside the function P, python understands it as creating a local variable with that name. This local variable masks the global variable N used outside of the function. So, you better pass N as a parameter to function P.</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Functions in python declare a new scope, which is why <code>N</code> is not visible in your function. You can circumvent this by passing <code>N</code> along into the inner scope, like this:</p>
<pre><code>T = int(input())
for i in range(T):
    N = int(input())
    def P(N):
            M = [int(d) for d in str(N)]
            N = sum(M)  # this line was the actual culprit
            if N&lt;10:
                    print(N)
            else :
                    return P(N)
    P(N)

&gt;&gt;&gt; 1      # test one time
&gt;&gt;&gt; 12345  # cross total of 121212
6
</code></pre>
<p>Python is conservative on write-operations. Only reading from an outer-scope variable is fine, but re-assigning the name <code>N</code> (which is what happens if you write <code>N = sum(M)</code>) makes it check strictly for a <em>local</em> variable of that name. </p>
<p>As a consequence, it further assumes that that not-yet-declared variable is where you want to read from in the line above it - which is honestly a bit misleading. </p>
<hr/>
<p>For further information on scopes and namespaces in python, check <a href="https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces" rel="nofollow noreferrer">here</a>.</p>
</div>
<span class="comment-copy">Your description is unclear to me. What happens if I input 999 ? What is the expected output ?</span>
<span class="comment-copy">9+9+9 = 27 and then 2+7 = 9. So the final answer is 9.</span>
<span class="comment-copy">This is probably the best solution since it avoids running into the scoping problem in the first place.</span>
<span class="comment-copy">It's more pythonic to handle the type conversion in <code>gimmeNumber</code> with a <code>try..except</code> instead of an <code>if</code>.</span>
<span class="comment-copy">@Arne you are right, editied. Still providing both as I feel the first version is easier to understand for beginner coders.</span>
