<div class="post-text" itemprop="text">
<p>currently, I do some research with the built-in types of Python. I am confused what methods are invoked to check if a key is in a dictionary. For example, if I check if a key of type <code>int</code> is in a dictionary, the <code>__eq__()</code> method is invoked in the background only if dictionary.keys() contains it. If not <code>__eq__()</code> is not invoked. </p>
<p>Here is an code example: </p>
<pre><code>dict = {
  1: "Hello",
  2: "World", 
  4: "Foo"
}

assert 1 in dict.keys() # the __eq__() method of int is invoked
assert not(3 in dict.keys()) # no __eq__() method of int is invoked
</code></pre>
<p>I know, that the dictionary holds a tuple of hash(key), key and value. But I am a little bit confused, why <code>__eq__()</code> is not invoked in the second assert. </p>
<p>To test this behavior I inherited from <code>int</code> and set some breakpoints. Here is an extract of my custom <code>int</code> class: </p>
<pre><code>tint(int):
    def __new__(cls, value, *args, **kw):
        return super(tint, cls).__new__(cls, value)

    def __init__(self, value):
        super().__init__()

    def __eq__(self, other):
        return super().__eq__(other) # with breakpoints

    def __ne__(self, other):
        return super().__ne__(other) # with breakpoints

    def __hash__(self):
        return tint(super().__hash__()) # with breakpoints
</code></pre>
<p>I use Python version 3.6.5 on Ubuntu 18.04.1 LTS. </p>
</div>
<div class="post-text" itemprop="text">
<p>To find a key in a dict, you first find candidates by hash, then you see whether it is a fluke (the objects are different even though the hash is the same) or really the key you want. So if you can't find anything under that hash, there's nothing to eq with.</p>
<p>Imagine you're looking for an acquaintance at a party, and don't know if she's here yet. She has red hair. Typically, you'd look for red-haired girls, then go face them to see whether it's really her or not. It makes no sense to check each and every person at the party if no red-haired girls arrived yet. (Assuming your friend is not into daily dye-jobs.)</p>
<p>EDIT: CPython stores dicts in an array, where the primary array position is determined by the hash; if that position is occupied, it skips to a next candidate location in a mathematically deterministic way. Since a filled location can consequently hold either the "correct" hash or an unrelated hash, when looking up a hash CPython will start from the primary location, then go on comparing hashes till it decides it's impossible the searched-for key is there. The hashes are at this point plain low-level integers, not Python objects, which explains why hash comparisons don't trigger <code>__eq__</code>.</p>
<p>Note a cute optimisation in the source: for each candidate, CPython first checks object identity; only then does it check whether hashes are still same, and if so, goes to the slow check to see whether objects are equal (using <code>PyObject_RichCompareBool</code>, which ultimately calls <code>__eq__</code>). Why does this matter? Look here:</p>
<pre><code>class Foo:
    def __eq__(self, other):
        return False             # This shouldn't match...
    def __hash__(self):
        return 7

f = Foo()
d = { f: "Yes!" }
print(d[f])                      # ...and yet it does! :)
# =&gt; "Yes!"
</code></pre>
</div>
<span class="comment-copy">This sounds obvious. However, a hash is also an <code>int</code>. So why is there no <code>__eq__()</code> invocation for that hash value (<code>int</code>)? I think you have to compare the hashes.</span>
<span class="comment-copy">Hash is an <code>int</code>, yes. It is not <code>tint</code> (despite your attempt).</span>
<span class="comment-copy">Look at the <a href="https://github.com/python/cpython/blob/e42b705188271da108de42b55d9344642170aa2b/Objects/dictobject.c#L752" rel="nofollow noreferrer">source</a>: <code>hash</code> is always <code>Py_hash_t</code>, not <code>PyObject</code>. Looking <a href="https://docs.python.org/3/c-api/object.html#c.PyObject_Hash" rel="nofollow noreferrer">here</a>, "This is a signed integer the same size as Py_ssize_t." (also note that they are compared with plain C <code>==</code>, not by invoking Python's <code>__eq__</code>.) You return <code>tint</code>, but all CPython hears is just a C <code>int</code>.</span>
<span class="comment-copy">In other words, hash codes are compared internally in C code. The C code only deals with raw machine integers, not Python objects.</span>
