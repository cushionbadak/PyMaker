<div class="post-text" itemprop="text">
<p>I was studying a coding challenge in which you need to write a function that counts duplicate occurrences of character patterns in a string and returns how many times it occurs. For example if string is s = 'catcatcat', output is 3. If string s = 'abcdabcd', output is 2. If s = 'catcatcatcatcat', output is 5.The answer ended up being</p>
<pre><code>def function(s):
   return max([s.count(s[:x]) for x in range(len(s)) if s[:x]*s.count(s[:x]) == s])
</code></pre>
<p>Can anyone help explain this code because im having trouble understanding. Btw just started learning python. </p>
</div>
<div class="post-text" itemprop="text">
<p>If you just started learning python, it's rather early for such snippets. You need to read first about</p>
<ol>
<li>list comprehensions</li>
<li>lists/strings/iterables &amp; slicing</li>
<li>strings &amp; string operations (in this case, string-integer multiplication)</li>
</ol>
<p>Let's take it piece by piece   </p>
<pre><code>s.count(s[x:])
</code></pre>
<p>In the string <code>s</code>, count how many times the substring of the <code>n</code> first characters appears</p>
<pre><code>... for x in range(len(s))
</code></pre>
<p>try this for all values of <code>x</code>, from <code>0</code> to the total lenght of <code>s</code></p>
<pre><code>if s[:x]*s.count(s[:x]) == s
</code></pre>
<p>From all the above values, keep only the ones for which this condition holds. As said before, the left operand is a substring and the second a number. In python, multiplication of a string with integer repeats the string. eg <code>'aa' * 3 =&gt; 'aaaaaa'</code></p>
<p>In the end, you just take the <code>max</code> of all the above values.</p>
</div>
<div class="post-text" itemprop="text">
<p>Let's breakdown the expression bit by bit and highlight the Python concepts/features being used.</p>
<p><code>max([s.count(s[:x]) for x in range(len(s)) if s[:x]*s.count(s[:x]) == s])</code></p>
<p>when you have a python expression inside <code>[]</code> invoked the way it is here it usually means a Python capability called <em>List comprehension</em> is being invoked. What does this mean? I like to think of it as <em>comprehend this expression for the range of input specified and return all the answers as a list</em>. This allows you to write powerful, albeit unpythonic(non idiomatic python), expressions.</p>
<p>Now let's examine the expression inside the <code>[]</code></p>
<p><code>s.count(s[:x]) for x in range(len(s)) if s[:x]*s.count(s[:x]) == s</code></p>
<p>If I were to translate this expression into plain English I would say: <em>Please return the count of the substring ending before x<code>s[:x]</code>, for all x in the range 0 to len(<code>for ...</code>) of the original string, in the original string <code>s</code>(<code>s.count...</code>)</em></p>
<p>Finally the <code>max</code> is invoked on the returned list to get you the max value.</p>
<p>That being said this method is somewhat inefficient because you perform a substring search and count <strong><em>for every substring</em></strong>.</p>
<p>What I would do instead:</p>
<p>Look at prefix trees, i.e <a href="https://en.wikipedia.org/wiki/Trie" rel="nofollow noreferrer">Tries</a>.</p>
<p>They offer far more efficient ways for you to compute such things.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to break it down step by step.</p>
<hr/>
<pre><code>return &lt;something&gt;
</code></pre>
<p>Hopefully, you know what this does: it evaluates <code>&lt;something&gt;</code> and exits the function, making the value the result of the function.</p>
<hr/>
<pre><code>max(&lt;something&gt;)
</code></pre>
<p>The <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer"><code>max</code></a> function can be called two ways, but here, there's only one argument, so, whatever <code>&lt;something&gt;</code> is, it will be an iterable, and <code>max</code> will give you the biggest value in that iterable.</p>
<hr/>
<pre><code>[&lt;expr&gt; for &lt;var&gt; in &lt;iterable&gt; if &lt;condition&gt;]
</code></pre>
<p>This is a list comprehension. You can always convert a list comprehension into an equivalent nested statement:</p>
<pre><code>result = []
for &lt;var&gt; in &lt;iterable&gt;:
    if &lt;condition&gt;:
        result.append(&lt;expr&gt;)
</code></pre>
<hr/>
<p>So, now let's look at the parts. The <code>&lt;var&gt;</code> and <code>&lt;iterable&gt;</code> are:</p>
<pre><code>for x in range(len(s))
</code></pre>
<p>So, <code>x</code> just takes all the values from 0 up to but not including <code>len(s)</code>.</p>
<hr/>
<p>The <code>&lt;expr&gt;</code> is:</p>
<pre><code>s.count(s[:x])
</code></pre>
<p>That <code>s[:x]</code> is just a slice of the first <code>x</code> characters of <code>s</code>. So, if <code>s</code> is <code>'abcdefabc'</code>, when <code>x</code> is 2, it's <code>'ab'</code>; when <code>x</code> is 4, it's <code>'abcd'</code>.</p>
<p>The <code>s.count</code> just tells you how many times that substring appears. So, when <code>x</code> is 2, <code>'ab'</code> appears twice, so that's 2; when <code>x</code> is 4, <code>'abcd'</code> only appears once, so that's 1.</p>
<p>So, if we ignore the condition for the moment, these are the values we're putting in the list for <code>'abcdefabc'</code>: <code>[2, 2, 2, 1, 1, 1, 2, 2, 2]</code> The <code>max</code> of that will of course be <code>2</code>.</p>
<hr/>
<p>Finally, the hairiest part is the <code>&lt;condition&gt;</code>:</p>
<pre><code>if s[:x]*s.count(s[:x]) == s
</code></pre>
<p>You already know <code>s[:x]</code> and <code>s.count(s[:x])</code>.</p>
<p>When you multiply a string (or any sequence) like <code>'abc'</code> with a number like <code>2</code>, it just repeats the string that many times, so <code>'abc' * 2</code> is <code>'abcabc'</code>.</p>
<p>We're checking whether that's equal to the whole string. Which in this case, it isn't. But if we were using <code>s='catcatcat'</code>, then when <code>x</code> is 3, it would be.</p>
<p>And that's everything.</p>
<hr/>
<p>Now work through it with one of your examples, <code>'catcatcatcatcat'</code>.</p>
<ul>
<li>For <code>x=0</code>, you get <code>''</code>, which occurs 16 times in <code>s</code>, but <code>''*16</code> is still <code>''</code>, which is not <code>s</code>, so skip it.</li>
<li>For <code>x=1</code>, you get <code>'c'</code>, which occurs 5 times, bug <code>'c'*5</code> is <code>'ccccc'</code>, which is not <code>s</code>, so skip it.</li>
<li>For <code>x=2</code>, you get <code>'ca'</code>, which occurs 5 times, but <code>'ca'*5</code> is <code>'cacacacaca'</code>, which is not <code>s</code>, so skip it.</li>
<li>For <code>x=3</code>, you get <code>'cat'</code>, which occurs 5 times, and <code>'cat'*5</code> is <code>'catcatcatcatcat'</code>, which is equal to <code>s</code>, so keep it.

<ul>
<li>The value for <code>x=3</code> is <code>s.count(s[:x])</code>, which is 5 again, so that's what goes in the list.</li>
</ul></li>
<li>For <code>x=4</code>, you get <code>'catc'</code>, which occurs 2 times, and <code>'catccatc' != s</code>, skip.</li>
<li>… and so on for 5-14; none of them will match.</li>
<li>For <code>x=15</code>, you get <code>'catcatcatcatcat'</code>, which occurs 1 time, and obviously it equals <code>s</code>.

<ul>
<li>The value is 1 again, so that goes in the list.</li>
</ul></li>
</ul>
<p>So the list ends up as just <code>[5, 1]</code>.</p>
<p>And <code>max([5, 1])</code> is 5.</p>
</div>
<span class="comment-copy">If you just started learning python, you should not be dealing with this kind of code. Leaning programming is a slow and incremental process. It takes time and discipline.</span>
<span class="comment-copy">Break it down into smaller parts - that line consists of half a dozen different parts you need to understand to understand the line as a whole, so tackle them one at a time.</span>
<span class="comment-copy">This is hard to understand, and inefficient to boot. Unless this was a code-golf challenge, if they picked this as the right answer, maybe you want to find a different source of challenges.</span>
<span class="comment-copy">Actually, it's not even very good code-golf—using a listcomp instead of a genexpr, using a 2-line <code>def</code> instead of 1-line, indenting 3 characters instead of 1, extra spaces around the operators…</span>
<span class="comment-copy">Sorry I don't think I followed the proper etiquette when posting this question. After reading the explanation I was able to get better understanding and my question was answered. I guess I should first read up on how to ask questions before posting. Sorry for the trouble.</span>
