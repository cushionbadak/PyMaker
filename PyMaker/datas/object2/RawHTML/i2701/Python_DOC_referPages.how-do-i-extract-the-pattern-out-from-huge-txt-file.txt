<div class="post-text" itemprop="text">
<p>I have huge text file which consists of random letters from A-Z and I want to extract some characters out. The tricky part is that given the following input:</p>
<pre><code>AFVAJFLDVAJPQDVAJDSNJKVAJGHD
</code></pre>
<p>and the pattern <code>VAJ</code>, I want to extract each match until the end of the string. I want the following output:</p>
<pre><code>[ "VAJFLDVAJPQDVAJDSNJKVAJGHD", "VAJPQDVAJDSNJKVAJGHD", "VAJDSNJKVAJGHD", "VAJGHD" ]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/stdtypes.html#str.find" rel="nofollow noreferrer"><code>str.find()</code></a> to find the index, where your pattern occurs. You can then slice the string accordingly. An implementaion could look like this:</p>
<pre><code>def find(inp, what):
  matches = []
  while what in inp:
    idx = inp.find(what)
    matches.append(inp[idx:])
    # remove the previous pattern from the string
    inp = inp[idx+len(what):]

  return matches
</code></pre>
<p>You can use it with <code>find("AFVAJFLDVAJPQDVAJDSNJKVAJGHD", "VAJ")</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This calls for regular expressions with sub-group matching.
( <a href="https://docs.python.org/3.5/library/re.html#match-objects" rel="nofollow noreferrer">https://docs.python.org/3.5/library/re.html#match-objects</a> )</p>
<p>My test file <code>data.txt</code>:</p>
<pre><code>QWEEEFVAJFLDVAJPQDVAJDSNJKVAJGHD
AFVAJFLDVAJPQDVAJDSNJKHFGHERQWFS
ONLY_TWO_VAJsOOVAJ123VAQQWERTY
START_VAJs_with_more_VAJ123VAJ_space_between
AAPVAJRCGVAJJKYVAJJJJJJJJVAJOOOO
AAPVAJRCGVAJJKYVAJJJJJJJJQQQOOOOO
</code></pre>
<p>Python code:</p>
<pre><code>import re

pattern = "VAJ"

re_str = pattern + "..." + "(" + pattern + "..." +"(" +  pattern + "(.*)))"
regex = re.compile(re_str)

regex_extra = re.compile(pattern + ".*")

for line in open("data.txt"):
    line = line.strip()
    match = regex.search(line)
    if match:
        result = list()
        result.append(match.group(0))   # entire regex match
        result.append(match.group(1))   # outer regex parenthesis'ed group
        result.append(match.group(2))   # middle regex parenthesis'ed group

        # Most inner regex parenthesis'ed group contains rest of the line.
        # Use this to find extra pattern.
        #
        the_rest = match.group(3)
        match_extra = regex_extra.search(the_rest)
        if match_extra:   # If one more &lt;pattern&gt; in the rest of the line
            result.append(match_extra.group(0))   # add it to the result list

        # Output         
        print(result)
</code></pre>
<p>Ouput:</p>
<pre><code>['VAJFLDVAJPQDVAJDSNJKVAJGHD', 'VAJPQDVAJDSNJKVAJGHD', 'VAJDSNJKVAJGHD', 'VAJGHD']
['VAJFLDVAJPQDVAJDSNJKHFGHERQWFS', 'VAJPQDVAJDSNJKHFGHERQWFS', 'VAJDSNJKHFGHERQWFS']
['VAJRCGVAJJKYVAJJJJJJJJVAJOOOO', 'VAJJKYVAJJJJJJJJVAJOOOO', 'VAJJJJJJJJVAJOOOO', 'VAJOOOO']
['VAJRCGVAJJKYVAJJJJJJJJQQQOOOOO', 'VAJJKYVAJJJJJJJJQQQOOOOO', 'VAJJJJJJJJQQQOOOOO']
</code></pre>
<p>Hugeness of the file is not a problem with this code, as long as the longest line fits a few times in memory it should be OK.</p>
</div>
<span class="comment-copy">What have you tried so far? Any code to discuss about?</span>
<span class="comment-copy">So the output should be <code>['VAJFLDVAJPQDVAJDSNJKVAJGHD', 'VAJPQDVAJDSNJKVAJGHD', 'VAJDSNJKVAJGHD', 'VAJGHD']</code>, correct?</span>
<span class="comment-copy">And, please define "huge". How big is this file?</span>
<span class="comment-copy">The file consists of 10 different sequences, 300-500 characters for each.  Aran-Fe, that's what I want, sorry I don't know how to reply. This is the first time using this website. Lynx, the code so far I got is:import sys import re  inp = open(sys.argv[1], "r") patterns  = ["LxxxLxLxxLxx", "LxLxxLxx", "LxxLxx", "Lxx"] for row in inp: 	line = row.strip() 	if line.startswith("&gt;"): 		print(line) 	else: 		for pattern in patterns: 			for match in re.findall(pattern, line): 				sys.stdout.write(match) 	print  This gave me wrong output, it's one output with VAJ...VAJ...VAJ and so on</span>
