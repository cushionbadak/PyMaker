<div class="post-text" itemprop="text">
<p>How I can import data from .txt and state them as my new variables? And each time save an output as a new text file with my input variables and the solution. </p>
<p>I have text file "values.txt" which includes of:</p>
<pre><code>k=10
t=20
r=8.5
</code></pre>
<p>(separated by "enter")</p>
<p>and I also have python file in where is put the equation:
<code>a = k*t/r</code></p>
<p>for now I've figured out only these:</p>
<pre><code>txt = open("values.txt").read()
print(txt)    

a = k*t/r
print(a)

txt.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Read the file. Separate by <code>\r\n</code>. Fetch the values by splitting on <code>=</code></p>
<pre><code>txt = open("values.txt").readLines()
k = float(txt[0].split("=")[0])
t = float(txt[1].split("=")[0])
r= float(txt[2].split("=")[0])
a = k*t/r
print(a)

txt.close()
</code></pre>
<p>This method is fine when dealing with less values otherwise use <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">csvreader</a> </p>
</div>
<div class="post-text" itemprop="text">
<p>More generally you may create a dict variable_name:value to use in your equations.</p>
<p>For instance:</p>
<pre><code>variables = {}

with open("values.txt") as f:
    for line in f:
        name, value = line.split("=")
        variables[name] = float(value)

k = variables["k"] 
t = variables["t"] 
r = variables["r"] 

a = k*t/r
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I prefer storing my <code>.txt</code> as a <code>json</code> file. My <code>filename</code> looking like :</p>
<pre><code>{ "foo":
    "bar"
}
</code></pre>
<p>From here, you can have</p>
<pre><code>import json
#Read JSON data into the datastore variable
if filename:
    with open(filename, 'r') as f:
        datastore = json.load(f)

#Use the new datastore datastructure
print datastore["foo"]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you have control over the format of the input file, make it as simple as possible. Put all three numbers on the same line (as in <code>10 20 8.5</code>) and read with:</p>
<pre><code>with open("values.txt") as infile:
    k, t, r = map(float, infile.read().split())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can read each line in the file by iterating over it. You can then split each line by the <code>=</code> character. </p>
<pre><code>constants = {}
with open('values.txt', 'r') as f:
    for line in f:
        name, val = line.split('=')
        constants[name] = float(val)

&gt;&gt;&gt; constants['a']
10.0
&gt;&gt;&gt; constants['t']
20.0
&gt;&gt;&gt; constants['r']
8.5
</code></pre>
<p>I've created a dictionary called <code>constants</code> which holds any number of <code>name : value</code> pairs as you like for each constant. Then all you need to do is amend your calculations to derive their values from the constants dictionary. </p>
<p>This allows you to add as many constants as you like: by not hard coding any variables, you add extensibility. </p>
</div>
<span class="comment-copy">Is the input file format fixed? Why not just have three values on the same line?</span>
<span class="comment-copy">@DYZ I was under the impression that the <code>values.txt</code> file was open for guidance on how to store the file, too.</span>
<span class="comment-copy">Thanks a lot for your help</span>
<span class="comment-copy">right - e.g. 8.5 :)</span>
<span class="comment-copy">Updated, thanks</span>
<span class="comment-copy">Thanks for your help</span>
<span class="comment-copy">I'll also try it, thanks</span>
<span class="comment-copy">A lot of great answers here. I believe JSON is the one that will offer the best guidance, as you can do matrices and the such with ease.</span>
<span class="comment-copy">This reduces readability in the .txt file and doesn't allow for extensibility.</span>
<span class="comment-copy">It depends on the scale of the problem.</span>
<span class="comment-copy">That's true, but I would have assumed that the OP has many constants to store and obviously separating them into another file makes it easier to read. A hard cider approach is definitely the quickest but as I said becomes cumbersome after adding more constants</span>
<span class="comment-copy">@NChauhan One also should not use a tool more powerful than necessary. I can easily see when the vanilla approach wins: when the files with numbers are generated automatically and are not even intended for human eyes.</span>
<span class="comment-copy">Thanks a lot, it's very helpful</span>
<span class="comment-copy">Thanks for your help</span>
