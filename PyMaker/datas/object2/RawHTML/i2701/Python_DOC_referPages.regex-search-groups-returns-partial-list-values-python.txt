<div class="post-text" itemprop="text">
<p>I have a list of tags such as:</p>
<pre><code> &lt;a class="title" href="/forum-replies.cfm?t=2709069"&gt;Roaming to other network when yours is unavailable&lt;/a&gt;,
 &lt;a class="title" href="/forum-replies.cfm?t=2747612"&gt;Wifi Calling problem&lt;/a&gt;,
 &lt;a class="title" href="/forum-replies.cfm?t=2705042"&gt;Kogan Mobile non-compliance with Tax Invoices&lt;/a&gt;,
 &lt;a class="title" href="/forum-replies.cfm?t=2715307"&gt;please help internet god&lt;/a&gt;,
 &lt;a class="title" href="/forum-replies.cfm?t=2715014"&gt;Apple deals returning soon?&lt;/a&gt;
</code></pre>
<p>The following regex search function can pull out all 101 matches when just running:</p>
<pre><code>import re
regex = re.compile('(?&lt;=&gt;)(\w|\d|\s)+')
ThreadNames = []
for string in ThreadNameFlat:
    ThreadNames.append(re.search(regex,str(string)))
</code></pre>
<p>when i try to run the next group of code to just grab the match by itself, <code>ThreadNames</code> only returns 10 of the full 101 matches the above code returns with and <code>ThreadNamesTest</code> returns singular matches such as <code>'m','','n'</code> etc...</p>
<pre><code>import re
regex = re.compile('(?&lt;=&gt;)(\w|\d|\s)+')
ThreadNames = []
ThreadNamesTest = []
for string in ThreadNameFlat:
    ThreadNames.append(re.search(regex,str(string)))
    match = re.search(regex,str(string))
    ThreadNamesTest.append(match.groups())    
</code></pre>
<p>It appears the <code>groups()</code> function is causing the issue, even though i thought that <code>groups()</code> should return all 101 matches originally found in the first script. </p>
<p>EDIT: I changed it to <code>.group()</code> instead of <code>.groups()</code> and now it is returning 10/101 tags with the full match.</p>
<p>How can i get all 10 out of the 101 tags though?</p>
<p><a href="https://i.stack.imgur.com/Jf1Dm.png" rel="nofollow noreferrer">The new result is here</a></p>
</div>
<div class="post-text" itemprop="text">
<p><code>re.search</code> returns a <code>Match</code> object. See the <a href="https://docs.python.org/3/library/re.html#match-objects" rel="nofollow noreferrer">docs</a>. As for <code>Match.groups</code>:</p>
<blockquote>
<p>Return a tuple containing all the subgroups of the match, from 1 up to however many groups are in the pattern.</p>
</blockquote>
<p>But you don't care about the subgroups here - you just want the <em>full match</em>. For that, you should probably use <a href="https://docs.python.org/3/library/re.html#re.Match.group" rel="nofollow noreferrer"><code>.group()</code> or <code>.group(0)</code></a>:</p>
<blockquote>
<p>Returns one or more subgroups of the match. If there is a single argument, the result is a single string; if there are multiple arguments, the result is a tuple with one item per argument. Without arguments, group1 defaults to zero (the whole match is returned).</p>
</blockquote>
<p>Like this:</p>
<pre><code>import re
ThreadNameFlat = ['&lt;a class="title" href="/forum-replies.cfm?t=2709069"&gt;Roaming to other network when yours is unavailable&lt;/a&gt;',
' &lt;a class="title" href="/forum-replies.cfm?t=2747612"&gt;Wifi Calling problem&lt;/a&gt;',
' &lt;a class="title" href="/forum-replies.cfm?t=2705042"&gt;Kogan Mobile non-compliance with Tax Invoices&lt;/a&gt;',
' &lt;a class="title" href="/forum-replies.cfm?t=2715307"&gt;please help internet god&lt;/a&gt;',
' &lt;a class="title" href="/forum-replies.cfm?t=2715014"&gt;Apple deals returning soon?&lt;/a&gt;']

regex = re.compile('(?&lt;=&gt;)(?:\w|\d|\s)+')
ThreadNamesTest = []
for string in ThreadNameFlat:
    match = re.search(regex,str(string))
    ThreadNamesTest.append(match.group())
print(ThreadNamesTest)
</code></pre>
<p>Output:</p>
<pre><code>['Roaming to other network when yours is unavailable', 'Wifi Calling problem', 'Kogan Mobile non', 'please help internet god', 'Apple deals returning soon']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Figured it out.</p>
<p>The regex did not match anything on the 11th value of the tag list.
<code>.group()</code> then fails to pick up the following matches after it does not find anything on the 11th value.</p>
<p>Changed the regex from:</p>
<pre><code>regex = re.compile('(?&lt;=&gt;)(\w|\d|\s)+')
</code></pre>
<p>to:</p>
<pre><code>regex = re.compile('(?&lt;=&gt;)(.\w.|.\s)+')
</code></pre>
<p>which will matches any character except line breaks, which not picks up the random encoded value in the 11th tag.</p>
</div>
<span class="comment-copy">Your capturing group <code>(\w|\d|\s)</code> will capture a single character. To start with, sounds like you want a non-capturing group instead. Or, you might consider repeating anything but a <code>&lt;</code> with a negated character set. Or, you might consider using a proper HTML parser instead.</span>
<span class="comment-copy">@CertainPerformance but shouldn't groups() return the entire match as the first group of code returns all 101 matches in their full length?</span>
<span class="comment-copy">Please provide an example of the desired output .</span>
