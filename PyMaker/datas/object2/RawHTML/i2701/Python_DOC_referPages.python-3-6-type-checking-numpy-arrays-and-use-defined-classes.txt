<div class="post-text" itemprop="text">
<p>I'd think this has already been asked, but I can't find it</p>
<p>How can one check for non-builtin types in Python 3.6?</p>
<p>For example, let's say I want to have a function foo() that takes a numpy array as an arg, and returns an instance of my class Bah</p>
<pre><code>def foo(a: np.array) -&gt; Bah
</code></pre>
<p>Can I do something like this?  How do I add those types to checking?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can specify anything you want, as a type annotation if the type’s name is in scope (e.g., you’ve defined <code>Bob</code> in the current file, or done a <code>from stuff import</code>Bob`).</p>
<p>In general, the type checker doesn’t need any special knowledge of the type to know whether a value is that type. If it sees you store the result of this function in a variable whose type is <code>Bob</code>, or a supertype of <code>Bob</code> (which includes <code>object</code> and <code>Any</code>, and also includes unannotated variables), that’s legal; if it sees you store it in a variable whose type is <code>int</code> or some other unrelated type, it’s not. Similarly, if you pass the result on to some other function whose parameter is <code>Bob</code> or <code>Any</code> or unannotated, or you append it to a <code>List[Bob]</code>, etc.</p>
<p>But <code>np.array</code> is a different problem. That isn’t actually a type, it’s just a constructor function that usually returns a value of type <code>np.ndarray</code>, which is a type you don’t normally think about anywhere. So, a type checker can’t handle that without some kind of special information that <code>array</code> should be treated as a synonym for <code>ndarray</code>.</p>
<p>Plus, many NumPy functions—and, implicitly, functions that you write yourself—actually take an “array-like”, which can be an <code>ndarray</code>, or usually a <code>matrix</code>, but also often any sequence. In which case you probably really want to either annotate then with something closer to accurate, like <code>typing.Sequence</code>—or maybe with a custom <code>ArrayLike</code> type.</p>
<p>While we’re at it, you often want to specify the dtype—your function doesn’t want an array, it wants an array of floats, or it wants an array of <code>&lt;something&gt;</code> and wants to return a <code>Bob</code> whose values are that same <code>&lt;something&gt;</code>. So, you probably want a generic type like <code>Sequence[float]</code> or <code>Sequence[T]</code> to some typevar <code>T</code>.</p>
<p>And you may even want to require a certain number of dimensions, or even a shape for those dimensions, or even a <em>partial</em> shape, or even that parameters <code>x</code> and <code>y</code> have to be broadcastable together or multiplyable. You can push this information into a generic type, but you’ll have to think it through pretty carefully.</p>
<p>Anyway, for your own types, you rarely have to think that deep. Either <code>Bob</code> is a simple type that only needs the standard inheritance rules, so you don’t have to do anything, or it’s a generic collection type, where you just need to inherit/register it as a <code>MutableSequence</code> or a <code>Mapping</code> or whatever and it automatically gets the appropriate generic rules, or it’s a specific collection type, where you just inherit/register as a <code>Set[int]</code> and it automatically gets the approprIate rules.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <strong>typing</strong>. It is a Python library <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">https://docs.python.org/3/library/typing.html</a></p>
<pre><code>import numpy as np
from bar import Bah
from typing import Type

def foo(a: np.ndarray): -&gt; Type[Bah]
    return a.T  #example
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Basically, just look at the output of type(a) if you know that a is a numpy array. This will tell you that the class is called "numpy.ndarray". Then check for that by using isinstance(). Like this:</p>
<pre><code>import numpy #if you import numpy as np, you need to check for np.ndarray instead

def foo(a):
    if isinstance(a,numpy.ndarray):
        return Blah()
    else:
        print('a needs to be of type numpy.ndarray')
        return
</code></pre>
</div>
<span class="comment-copy">np.ndarray is the type. np.array is just a function</span>
<span class="comment-copy">Is there anything wrong with your code besides that?</span>
<span class="comment-copy">Many thanks!  That's exactly what I needed :-D</span>
