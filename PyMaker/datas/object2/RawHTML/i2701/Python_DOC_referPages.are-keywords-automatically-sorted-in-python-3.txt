<div class="post-text" itemprop="text">
<p>I am studying <a href="https://docs.python.org/3/tutorial/controlflow.html" rel="nofollow noreferrer">Python3 tutorial on keyword arguments</a> and couldn't reproduce the output due to the following code:</p>
<pre><code>def cheeseshop(kind, *arguments, **keywords):
    print("-- Do you have any", kind, "?")
    print("-- I'm sorry, we're all out of", kind)
    for arg in arguments:
        print(arg)
    print("-" * 40)
    for kw in keywords:
        print(kw, ":", keywords[kw])

cheeseshop("Limburger", "It's very runny, sir.",
           "It's really very, VERY runny, sir.",
           shopkeeper="Michael Palin",
           client="John Cleese",
           sketch="Cheese Shop Sketch")

-- Do you have any Limburger ?
-- I'm sorry, we're all out of Limburger
It's very runny, sir.
It's really very, VERY runny, sir.
----------------------------------------
shopkeeper : Michael Palin
client : John Cleese
sketch : Cheese Shop Sketch 
</code></pre>
<p>What I got was a sorted dict:</p>
<pre><code>----------------------------------------
client : John Cleese
shopkeeper : Michael Palin
sketch : Cheese Shop Sketch
</code></pre>
<p>So I tried without calling cheeseshop(): </p>
<pre><code>&gt;&gt;&gt; kw = {'shopkeeper':"Michael Palin", 'client':"John Cleese", 'sketch':"Cheese Shop Sketch"}
&gt;&gt;&gt; kw
{'client': 'John Cleese', 'shopkeeper': 'Michael Palin', 'sketch': 'Cheese Shop Sketch'}
</code></pre>
<p>It looks like in version 3.5, the keys are automatically sorted. But in version 2.7, they aren't:</p>
<pre><code>&gt;&gt;&gt; kw
{'shopkeeper': 'Michael Palin', 'sketch': 'Cheese Shop Sketch', 'client': 'John Cleese'}
</code></pre>
<p>and I have to sort it in <a href="https://stackoverflow.com/questions/17677523/python-keyword-output-interpretation">2.7</a> to agree with 3.5.</p>
<pre><code>&gt;&gt;&gt; for k in sorted(kw):
...     print(k + " : " + kw[k])
... 
client : John Cleese
shopkeeper : Michael Palin
sketch : Cheese Shop Sketch
</code></pre>
<p>So the statement in the tutorial: "Note that the order in which the keyword arguments are printed is guaranteed to match the order in which they were provided in the function call." should be only applied to version 2.7, not 3.5. Is this true?</p>
</div>
<div class="post-text" itemprop="text">
<p>Following the comments from @Ry and @abamert, I upgraded to Python 3.7, see <a href="https://stackoverflow.com/questions/51279791/how-to-upgrade-python-version-to-3-7">link1</a> <a href="https://stackoverflow.com/questions/27022373/python3-importerror-no-module-named-ctypes-when-using-value-from-module-mul">link2</a> and <a href="https://stackoverflow.com/questions/4289937/how-to-repeat-last-command-in-python-interpreter-shell/52013642#52013642">link3</a> for steps on how to build it from &lt;3.7&gt; source code. One note is that the Python default for Ubuntu 16.04 are versions 2.7 and 3.5 in /usr/bin. After the upgrade, 3.7 resides in /usr/local/bin. So we can have three  versions coexistent.</p>
<p>As they said, do not rely on a particular version for the key order since the behavior of versions 2.7, 3.5 and 3.7 is different from each other: </p>
<ol>
<li>&lt;2.7&gt; order is random, but consistent/repeatable.</li>
<li>&lt;3.5&gt; order is random and inconsistent.</li>
<li>&lt;3.7&gt; order is preserved as entered and thus consistent.         </li>
<li>Use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><strong><em>OrderedDict</em></strong></a> if you want it to be sorted. see below.</li>
</ol>
<p>For example:</p>
<pre><code>Python 3.5.2 (default, Nov 23 2017, 16:37:01)
[GCC 5.4.0 20160609] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; kw = {'shopkeeper':"Michael Palin", 'client':"John Cleese", 'sketch':"Cheese Shop Sketch"}
&gt;&gt;&gt; kw
{'client': 'John Cleese', 'shopkeeper': 'Michael Palin', 'sketch': 'Cheese Shop Sketch'}
&gt;&gt;&gt;
&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; kws = OrderedDict(sorted(kw.items(), key = lambda x:x[0]))
&gt;&gt;&gt; kws
OrderedDict([('client', 'John Cleese'), ('shopkeeper', 'Michael Palin'), ('sketch', 'Cheese Shop Sketch')])
&gt;&gt;&gt; for i in kws:
...      print(i + " :\t" + kws[i])
...
client :        John Cleese
shopkeeper :    Michael Palin
sketch :        Cheese Shop Sketch
&gt;&gt;&gt;
</code></pre>
</div>
<span class="comment-copy">In 3.5, they’re in a random order. You should upgrade to current Python, 3.7, if you can, where order is preserved. (In 2.7, they’re also in a random order, but the order is consistent.)</span>
<span class="comment-copy">Usually, you shouldn't rely on dicts having any particular order. Occasionally, you need to—in that case, if you can't upgrade to Python 3.7, you have to explicitly use <code>OrderedDict</code> instead of <code>dict</code>. Relying on the arbitrary but repeatable order that pre-3.4 versions happened to have in some implementation on some platform is a bad idea.</span>
