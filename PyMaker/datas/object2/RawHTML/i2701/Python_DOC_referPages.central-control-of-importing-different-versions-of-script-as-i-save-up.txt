<div class="post-text" itemprop="text">
<p>As I improve my code each time, for big structural changes in flow and other features I save up and add a new number...</p>
<p>so when I use the code it looks like this:</p>
<pre><code>import custom3 as c

function = c.do_thing()
</code></pre>
<p>as I save up to custom4, I change it to</p>
<pre><code>import custom4 as c

function = c.do_thing()
</code></pre>
<p>very simple update. </p>
<p>My problem is that I have many scripts where i'm using <code>import custom# as c</code> so when I update the version number, I have to go back and change the number everywhere. </p>
<p>Is there a way to centrally control this? Basically dynamically importing a library using another script? I guess I can use something like <code>modules = map(__import__, moduleNames)</code> and keep a spreadsheet of latest version? And write a script to access that file first every time?</p>
<p>Has anybody implemented anything else more elegant?</p>
</div>
<div class="post-text" itemprop="text">
<p>The way to do this that the pros use is not to create different modules for different versions, but to use a version control system to manage and track changes to the same module.</p>
<p>A good version control system will do the following:</p>
<ul>
<li><p>allow you to keep and view a history of changes to your module</p></li>
<li><p>allow you to mark your versions with a meaningful annotation e.g.<br/>
"develop", "release"</p></li>
<li><p>allow you to recover from mistakes and revert back to another earlier
version without having to rewrite code</p></li>
<li><p>allow you to share your work with other developers.</p></li>
</ul>
<p>There are many version control systems available, some are proprietary licensed, but others available free. Git is probably the most popular open source system at the moment, and can scale from a lone developer to a large team. Plus there is already a whole ecosystem of code sharing available with  Github.</p>
<p>As you learn programming, take the time to learn and use version control. You won't regret it.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/importlib.html" rel="nofollow noreferrer">importlib</a>.</p>
<pre><code>import importlib
version = "3"
c = importlib.import_module("custom"+version)

function = c.do_thing()
</code></pre>
<p>But yeah, as suggested in the comments, use some file versioning system like git. The learning curve is a bit steep, but it would make your life a lot easier.</p>
</div>
<span class="comment-copy">Hi Jason - there's no real need to update the file or import module name every time you make changes etc, just track this inside a readme.txt file or some other explanation for your project.</span>
<span class="comment-copy">Normally you'd probably use <code>git</code> for version control. There's no need to keep updating module names for each change, the imports generally stay the same and the contents of those modules are updated in a reversible way</span>
<span class="comment-copy">ok. it's compatible with notepad++? I don't like the IDEs.</span>
<span class="comment-copy">Version control really doesn't depend on choice of editor. Many IDEs integrate with Git, but you could manage Git from the command line if you'd rather do that.</span>
