<div class="post-text" itemprop="text">
<p>Python 3.7 introduces new feature called data classes.</p>
<pre><code>from dataclasses import dataclass

@dataclass
class MyClass:
    id: int = 0
    name: str = ''
</code></pre>
<p>When using type hints (annotation) in function parameters, you can easily get annotated types using inspect module. How can I get dataclass field types?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from dataclasses import dataclass

@dataclass
class MyClass:
    id: int = 0
    name: str = '' 

myclass = MyClass()

myclass.__annotations__
&gt;&gt; {'id': int, 'name': str}
myclass.__dataclass_fields__
&gt;&gt; {'id': Field(name='id',type=&lt;class 'int'&gt;,default=0,default_factory=&lt;dataclasses._MISSING_TYPE object at 0x0000000004EED668&gt;,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),_field_type=_FIELD),
 'name': Field(name='name',type=&lt;class 'str'&gt;,default='',default_factory=&lt;dataclasses._MISSING_TYPE object at 0x0000000004EED668&gt;,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),_field_type=_FIELD)}
</code></pre>
<p>on a side note there is also:</p>
<pre><code>myclass.__dataclass_params__
&gt;&gt;_DataclassParams(init=True,repr=True,eq=True,order=False,unsafe_hash=False,frozen=False)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Inspecting <code>__annotations__</code> gives you the raw annotations, but those don't necessarily correspond to a dataclass's field types. Things like ClassVar and InitVar show up in <code>__annotations__</code>, even though they're not fields, and inherited fields don't show up.</p>
<p>Instead, call <a href="https://docs.python.org/3/library/dataclasses.html#dataclasses.fields" rel="noreferrer"><code>dataclasses.fields</code></a> on the dataclass, and inspect the field objects:</p>
<pre><code>field_types = {field.name: field.type for field in fields(MyClass)}
</code></pre>
<hr/>
<p>Neither <code>__annotations__</code> nor <code>fields</code> will resolve string annotations. If you want to resolve string annotations, the best way is probably <a href="https://docs.python.org/3/library/typing.html#typing.get_type_hints" rel="noreferrer"><code>typing.get_type_hints</code></a>. <code>get_type_hints</code> will include ClassVars and InitVars, so we use <code>fields</code> to filter those out:</p>
<pre><code>resolved_hints = typing.get_type_hints(MyClass)
field_names = [field.name for field in fields(MyClass)]
resolved_field_types = {name: resolved_hints[name] for name in field_names}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/dataclasses.html" rel="nofollow noreferrer">dataclasses.py</a> is <strong>the module which provides decorator and functions for generating regular class methods</strong> by using of the field annotations. Which means that after processing class, the user defined fields shall be formed using <a href="https://www.python.org/dev/peps/pep-0526/#runtime-effects-of-type-annotations" rel="nofollow noreferrer">PEP 526 Syntax of Variable annotations</a>. The module annotations is accessible as <code>__annotations__</code>.</p>
<p>According to the <a href="https://www.python.org/dev/peps/pep-0526/#runtime-effects-of-type-annotations" rel="nofollow noreferrer">Runtime effects of type annotations</a> the annotated types is accessible via <code>__annotations__</code> attribute or by usage of the <a href="https://docs.python.org/3/library/typing.html#typing.get_type_hints" rel="nofollow noreferrer">typing.get_type_hints</a>, the last one the recommended.</p>
<p>Please see some code samples below:</p>
<pre><code>from typing import Dict, ClassVar, get_type_hints
from dataclasses import dataclass

@dataclass
class Starship:
    hitpoints: int = 50


get_type_hints(Starship) // {'hitpoints': int}
Starship.__annotations__ // {'hitpoints': int}
dataclasses.__annotations__ // The annotations of the dataclasses module.
get_type_hints(get_type_hints)
</code></pre>
</div>
<span class="comment-copy">I would rather not to use private fields like that. Thanks anyway</span>
<span class="comment-copy">It's not a private field. Also you just accepted an answer that does use "dunder" attributes.</span>
<span class="comment-copy">BTW, the get_type_hints is recommended option than the use of <code>__annotations__</code></span>
<span class="comment-copy">The author put the work in to format a correct answer to the question. Can you point to some documentation that it's not encouraged to write answers that overlap with comments?</span>
<span class="comment-copy">I would rather not to use private fields like that. I need something like inspect module signature object.</span>
