<div class="post-text" itemprop="text">
<p>I have a flask server that is sending a dictionary to the frontend. I'm trying to sort the contents of the dictionary in the UI.</p>
<p>Here is how the dictionary is structured.</p>
<pre><code>{
 'Var1':
        {
         'weight':1,
         'other_stuff':'foo'
        },
 'Var2':
        {
         'weight':0.5,
         'other_stuff':'bar'
        },
 'Var3':
        {
         'weight':2,
         'other_stuff':'baz'
        },
...
}
</code></pre>
<p>The relevant snippet from the UI that isn't what I need to sort looks something like this. Note this works just fine, no errors, but it isn't sorting the data.</p>
<pre><code>{% for key,var in d %}
    &lt;tr&gt;
    &lt;td&gt;{{ key }}&lt;/td&gt;
    {% if var['weight']&gt;0.01 or var['weight']&lt;-0.01 %}
    &lt;td&gt;{{ var['weight'] }}&lt;/td&gt;
    {% else %}
    &lt;td&gt;0.01&lt;/td&gt;
    {% endif %}
  &lt;/tr&gt;
{% endfor %}
</code></pre>
<p>What I want to do is to sort this dictionary when displaying it, obviously dictionaries have no ordering in python, by the weight. Desired output would be the data being displayed like this:</p>
<pre><code>&lt;tr&gt;
    &lt;td&gt;Var3&lt;/td&gt;
    &lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Var1&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Var2&lt;/td&gt;
    &lt;td&gt;0.5&lt;/td&gt;
&lt;/tr&gt;
</code></pre>
<p>I've tried to use do_dictsort filter, but it gave me an error because of how the data was organized. How do I sort this in the UI?</p>
</div>
<div class="post-text" itemprop="text">
<p>why don't you send the sorted dict to the front end..now you just have to loop.</p>
<p>here's how</p>
<pre><code>   data = sorted(d.items(), key=lambda x: x[1]['weight'], reverse=True)

{% for key,var in d %}
   &lt;table&gt;
    &lt;tr&gt;
    &lt;td&gt;{{ key }}&lt;/td&gt;
    &lt;td&gt;{{ var['weight'] }}&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
{% endfor %}
</code></pre>
</div>
<span class="comment-copy">why would you not sent an <code>orderdict</code> instead</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a> should maintain ordering when iterated over in Jinja</span>
<span class="comment-copy">You can convert your dict of dicts to a list of dicts (moving a key inside an inner dictionary) and use <a href="https://stackoverflow.com/questions/1959386/how-do-you-sort-a-list-in-jinja2">this</a> solution.</span>
<span class="comment-copy">Well geez, if you guys want to make it that easy, an ordered dictionary should work, sure. I didn't even think of solving it on the backend side.</span>
<span class="comment-copy">Like I said, totally slipped my mind that I could solve it on the backend, thanks.</span>
