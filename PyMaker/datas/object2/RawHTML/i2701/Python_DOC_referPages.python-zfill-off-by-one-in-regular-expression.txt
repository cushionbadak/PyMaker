<div class="post-text" itemprop="text">
<p>I'm working on a script that uses <a href="https://docs.python.org/3/library/stdtypes.html#str.zfill" rel="nofollow noreferrer"><code>zfill</code></a> to add leading zeros to numbers matched from a regular expression in Python 3. </p>
<p>Here's my code:</p>
<pre><code>#!/usr/bin/env python

import re

string = "7-8"
pattern = re.compile("^(\d+)-(\d+)$")
replacement = "-{}-{}-".format(
    "\\1".zfill(2),
    "\\2".zfill(3)
)
result = re.sub(pattern, replacement, string)
print(result)
</code></pre>
<p>The output I expect is for the first number to be padded to two characters in width and the second number to be padded out to three characters. For example:</p>
<pre class="lang-none prettyprint-override"><code>-07-008-
</code></pre>
<p>Instead, I'm getting:</p>
<pre class="lang-none prettyprint-override"><code>-7-08-
</code></pre>
<p>Why is there one less zero than expected?</p>
</div>
<div class="post-text" itemprop="text">
<p>You're <em>zfilling</em> the constants used for your back-reference which are two characters already (<code>\</code> and an int), leaving no space for an extra zero for the first character, and just one space for the second character.</p>
<p>You can instead pass a function as your replacement to <code>re.sub</code> and do the <em>zfilling</em> in there:</p>
<pre><code>def repl_fn(m):
  return f'-{m.group(1).zfill(2)}-{m.group(2).zfill(3)}-'

result = re.sub(pattern, repl_fn, string)
print(result)
# -07-008-
</code></pre>
<p>The <em>zfilling</em> is now done at replacement time, not before, as in your code. </p>
</div>
<span class="comment-copy">Yep. This got it. I don't really understand why I was getting the value from the back-reference (e.g. <code>7</code>) without the zfill. I understand what you're saying about the character count of the back-reference, but if that's what was being operated on, I'd have expected the value to show up as the back-reference string itself (e.g. <code>\\1</code> or <code>\1</code>). Clearly that's not the case. While I still haven't wrapped my head around why my code doesn't work, I appreciate that your code does. Thanks!</span>
<span class="comment-copy">@AlanW.Smith <code>"\\2".zfill(3)</code> is called at the point where the string formatting is executed. <code>replacement</code> already has a value <code>'-\\1-0\\2-'</code> before reaching <code>re.sub</code>.</span>
<span class="comment-copy">Ahhhh. Got it. Thanks again!</span>
