<div class="post-text" itemprop="text">
<pre><code>def entity_mappings(mapping, entities_list):
    entity_mapped = []
    for (key, value) in mapping.items():
       for i in entities_list:
           if i == key:
                entity_mapped.append(value)
    return entity_mapped
</code></pre>
<p>I want to match the key from the entities list of ids and append the values of the key in the entity mapped list and return it is there any better way to perform this task?? Mapping is a dict.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do like this with <code>list comprehension</code>,</p>
<p><strong>Method 1</strong></p>
<pre><code>entity_mapped = [value for (key, value) in mapping.items() if key in entities_list]
</code></pre>
<p>You can search inside <code>entities_list</code> instead of iterating and match.</p>
<p>Complexity: <code>O(nm)</code></p>
<p><strong>Method 2</strong></p>
<p>You can search in the dictionary too like this,</p>
<pre><code>entity_mapped = [mapping.get(i) for i in entities_list if i in mapping]
</code></pre>
<p>Complexity : <code>O(n)</code></p>
<p><strong>Demo</strong></p>
<pre><code>In [16]: mapping = {2:5,6:8,9:87}

In [17]: entities_list = [2,6]

In [18]: print [value for (key, value) in mapping.items() if key in entities_list]
[5, 8]

In [19]: print [mapping.get(i) for i in entities_list if i in mapping]
[5, 8]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I may suggest you to use the <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer">map function</a> which can return an iterator that applies a function to every element of a list. For your purpose, the function is <code>mapping.get</code> and the list is <code>entities_list</code>. it will insert <code>None</code> in the output list if the entity is not a key of <code>mapping</code> dictionary, as below:  </p>
<pre><code>def entity_mappings(mapping, entities_list):
    return map(mapping.get, entities_list)

mapping = {2:5, 6:8, 9:87}
entities_list = [2, 6, 5]   # Note that 5 is not a key of mapping

print(list(entity_mappings(mapping, entities_list)))  # [5, 8, None]
</code></pre>
<p>The same with a generator comprehension gives the following:  </p>
<pre><code>def entity_mappings(mapping, entities_list):
    return (mapping.get(i) for i in entities_list)

mapping = {2:5, 6:8, 9:87}
entities_list = [2, 6, 5]   # Note that 5 is not a key of mapping

print(list(entity_mappings(mapping, entities_list)))  # [5, 8, None]
</code></pre>
<p>Using iterators like map or generator objects can save memory because it does not compute and store all the values in memory if you don't need. Instead, it yields one item at a time. Of course the way to do always depend on what you need to do, so you may also prefer using lists directly, no problem with that !</p>
</div>
<div class="post-text" itemprop="text">
<p>other solution is:</p>
<pre><code>[mapping[k] for k in set(entities_list) &amp; set(mapping.keys())]
</code></pre>
<p>because the dict keys is unique list, example:</p>
<pre><code>mapping = {'v':22, 'b': 0, 'd': 44}
entities_list = ['v', 'w', 'd']
</code></pre>
<p>result is:</p>
<pre><code>print([mapping[k] for k in set(entities_list) &amp; set(mapping.keys())])
# [22, 44]
</code></pre>
</div>
<span class="comment-copy">something like: <code>entity_mapped = [mapping[i] for i in entities_list if i in mapping]</code> ? Does that produce the expected output?</span>
<span class="comment-copy">or <code>[mapping[k] for k in set(entities_list) &amp; set(mapping.keys())]</code></span>
<span class="comment-copy">Probably best to also provide some sample in- and output. Makes it easier to help.</span>
<span class="comment-copy">mappings = {2:5,6:8,9:87} entities_list = [2,6] entities_mapped =  [5,8] @Cleb</span>
<span class="comment-copy">If you are trying to get the order in which your items were added, consider using the OrderedDict(), then you wouldn't need any mapping matching at all. And if you want filtering, the order in which the items were added would be kept and the list does not have to be in any particular order.</span>
<span class="comment-copy">You should add that the second version is O(n) while the first is O(nm).</span>
<span class="comment-copy">if I want to remove those elements whose mapping is not present from the entities_list what would be the optimal way?</span>
<span class="comment-copy">And does this keep the order presented by the list? I think this was the main goal of the exercise.</span>
<span class="comment-copy">@Dalen you right this is does not keep order by, but where you find it in the OP question?</span>
<span class="comment-copy">Nowhere, of course, but when you try something like this, you usually mean to do that, because filtering can be achieved in any number of easy ways. I'll give you +1 for thinking of sets though.</span>
<span class="comment-copy">@Dalen thank you. And i think the sequence is does not metter becuase the method <code>.items()</code> has no order.</span>
<span class="comment-copy">Yep, verry correct, so you are probably right. But the code just awakened such association. I might be wrong though. Sets were the first thing that came to my mind when I saw it though. Then map() and then list/generator comprehension.</span>
