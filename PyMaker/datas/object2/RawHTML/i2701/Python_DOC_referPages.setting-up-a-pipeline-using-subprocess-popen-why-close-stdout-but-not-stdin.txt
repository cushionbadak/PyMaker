<div class="post-text" itemprop="text">
<p>The Python 3 documentation for <code>subprocess.popen</code> (<a href="https://docs.python.org/3/library/subprocess.html#replacing-shell-pipeline" rel="nofollow noreferrer">1</a>) presents the following sample code for pipelines:</p>
<pre><code>from subprocess import Popen, PIPE
p1 = Popen(["dmesg"], stdout=PIPE)
p2 = Popen(["grep", "hda"], stdin=p1.stdout, stdout=PIPE)
p1.stdout.close()  # Allow p1 to receive a SIGPIPE if p2 exits.
output = p2.communicate()[0]
</code></pre>
<blockquote>
<p>The p1.stdout.close() call after starting the p2 is important in order for p1 to receive a SIGPIPE if p2 exits before p1.</p>
</blockquote>
<p>Why is this necessary? Previous questions (<a href="https://stackoverflow.com/questions/27796317/replacing-shell-pipeline">Replacing Shell Pipeline</a>, <a href="https://stackoverflow.com/questions/39190250/under-what-condition-does-a-python-subprocess-get-a-sigpipe">Under what condition does a Python subprocess get a SIGPIPE?</a>, <a href="https://stackoverflow.com/questions/6046779/explain-example-from-python-subprocess-module">Explain example from python subprocess module</a>) have answers stating that <code>p1.stdout</code> has multiple readers, which must all be closed to prevent <code>p1</code>'s output pipe from closing.</p>
<hr/>
<p>What is the relation between <code>p2.stdin</code> and <code>p1.stdout</code>, and do I have to close <code>p2.stdin</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>No, you do not have to close <code>p2.stdin</code>. In fact you can't, because it's None.</p>
<p>This is because <code>stdin=p1.stdout</code>, while a Python stream object is only created if <code>stdin=subprocess.PIPE</code>. See <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.stdin" rel="nofollow noreferrer">subprocess Popen.stdin docs</a>)</p>
<hr/>
<p>I wrote a test program (Python 3) which terminates with <code>BrokenPipeError</code> if <code>CLOSE_P1 = True</code>, but spins forever?? if <code>CLOSE_P1 = False</code>:</p>
<pre><code>from subprocess import Popen, PIPE


CLOSE_P1 = True


p1 = Popen("ffmpeg "
           "-f rawvideo -pixel_format rgb24 -video_size 1x1 -i - "
           "-c copy -f rawvideo -".split(), stdin=PIPE, stdout=PIPE)
p2 = Popen(["grep", "hda"], stdin=p1.stdout, stdout=PIPE)
assert p2.stdin is None

if CLOSE_P1:
    p1.stdout.close()  # Allow p1 to receive a SIGPIPE if p2 exits.
p2.terminate()
while 1:
    p1.stdin.write(b'fsdafhdsf9jd9s8ha0')
</code></pre>
</div>
