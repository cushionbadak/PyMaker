<div class="post-text" itemprop="text">
<p>I'm pretty new at coding so sorry if this is a silly queastion. I've got a problem with this for loop at Python:</p>
<pre><code>for n in (2, (k / 2)):
    if k % n == 0:
        print ("Yes")
    else:
        print ("No")
</code></pre>
<p>The problem is that I get two prints, sometimes contradictory ones like <code>Yes</code> and <code>No</code> for 3, 25, 35 and other numbers.</p>
<p>My purpose is to detect prime numbers.</p>
<p>I use PyCharm btw.</p>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>(2, (k / 2))</code> is a tuple of two values, it's not a range. That means the loop will always iterate two times, one with the value <code>2</code> and one with the value <code>k / 2</code>.</p>
<p>You need to create an instance of the <a href="https://docs.python.org/3/library/stdtypes.html?highlight=range#range" rel="nofollow noreferrer"><code>range</code></a> class:</p>
<pre><code>for n in range(2, int(k / 2)):
    ...
</code></pre>
<p>That <code>range</code> object will create an object that can be iterated over, with the values from <code>2</code> to <code>(k / 2) - 1</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The syntax <code>for n in (a, b)</code> does <strong>not</strong> cycle <code>n</code> between the values <code>a, a+1, a+2, ..., b</code>, it literally makes <code>n</code> take the values <code>a</code> and then <code>b</code> as the syntax <code>(a, b)</code> defines a tuple which you iterate over.</p>
<p>You are almost definitely looking for the <code>range()</code> function which returns an iterable which you can iterate over in the for-loop so that <code>n</code> takes the range of values from <code>a</code> to <code>b</code> (not including <code>b</code>).</p>
<p>So:</p>
<pre><code>for n in range(2, int(k / 2)):
</code></pre>
<p><em>note that we must also convert the result to an integer with <code>int()</code> since range doesn't accept floats (decimals)</em></p>
<hr/>
<p>As for making the prime test work, you don't want to cycle all the way up to half the number, you only need to go up to the square root of the number. Also, whenever you find a divisor, you can <code>print('no')</code> and <code>break</code> out of the loop, but when a number doesn't divide the prime candidate, you can't <code>print('yes')</code> as there may be divisors that you haven't checked yet. So we can only <code>print('yes')</code> if we complete the <code>for-loop</code> without breaking out of it early. This is most easily achieved with a function:</p>
<pre><code>def is_prime(k):
    if k &lt;= 1:
        return False
    for n in range(2, int(k ** 0.5) + 1):
        if k % n == 0:
            return False
    return True
</code></pre>
<p>and then we can see it works:</p>
<pre><code>&gt;&gt;&gt; is_prime(2)
True
&gt;&gt;&gt; is_prime(3)
True
&gt;&gt;&gt; is_prime(4)
False
&gt;&gt;&gt; is_prime(5)
True
&gt;&gt;&gt; is_prime(6)
False
&gt;&gt;&gt; is_prime(7)
True
&gt;&gt;&gt; is_prime(8)
False
&gt;&gt;&gt; is_prime(9)
False
&gt;&gt;&gt; is_prime(10)
False
&gt;&gt;&gt; is_prime(11)
True
</code></pre>
</div>
<span class="comment-copy">What is <code>k</code> here?</span>
<span class="comment-copy">Please check this answer: <a href="https://stackoverflow.com/questions/31122454/prime-number-python-for-loops" title="prime number python for loops">stackoverflow.com/questions/31122454/â€¦</a></span>
<span class="comment-copy">Ok, thank you!!</span>
