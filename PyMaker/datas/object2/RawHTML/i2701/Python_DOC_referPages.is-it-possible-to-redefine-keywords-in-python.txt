<div class="post-text" itemprop="text">
<p>I ran into an issue wherein I had to jsonify everything that my API was set to return. As I was writing a decorator and applying it to every single method, a thought occurred to me:</p>
<blockquote>
<p>"Can't I just overwrite the return keyword so that it performs this operation for me every time?"</p>
</blockquote>
<p>I did some searching, but I can't find anything on the topic. However, since "everything is an object", maybe it's possible?</p>
<p>Obviously overwriting <code>return</code> is a bad idea but in a more general sense, my question is:</p>
<p><strong>Can you alter the behavior of reserved words and keywords in Python?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p><strong>No</strong>, you can't redefine reserved words in Python. Their meaning is … <em>drumroll</em> … <strong>reserved</strong>, so by definition it cannot be altered.</p>
<p>The closest I can find to an explicit <a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords" rel="nofollow noreferrer">declaration</a> of this fact in the official documentation is in the Lexical Analysis chapter of the Language Reference (emphasis mine):</p>
<blockquote>
<h1>2.3.1. Keywords</h1>
<p>The following identifiers are used as reserved words, or keywords of the language, and <strong><em>cannot be used as ordinary identifiers</em></strong>. They must be spelled exactly as written here:</p>
<pre><code>False      await      else       import     pass
None       break      except     in         raise
True       class      finally    is         return
and        continue   for        lambda     try
as         def        from       nonlocal   while
assert     del        global     not        with
async      elif       if         or         yield
</code></pre>
</blockquote>
<p>Since keywords cannot be used as ordinary identifiers, they cannot be assigned to, be used as function names in <code>def</code> statements, etc. </p>
<p>It's important to understand that it's the fundamental nature of keywords which actually prohibits changes to their meaning, though – that assignment and so on won't work is a consequence of that nature, not the cause of it.</p>
</div>
<span class="comment-copy">Nope.....unless you fork the python project and rewrite the return keyword, will work but only if you want to return json everywhere....lol</span>
<span class="comment-copy">Is it a class? You can decorate all methods in a class with a <a href="https://stackoverflow.com/questions/6307761/how-can-i-decorate-all-functions-of-a-class-without-typing-it-over-and-over-for">single decorator.</a></span>
<span class="comment-copy">@Grant McCloskey I'm not so much trying to solve a specific problem here as gain a better understanding of the language as a whole. I wrote my thought process out so people can understand what I'm asking.</span>
<span class="comment-copy">Yep, I was just trying to think of other alternatives to the origin of the question because I have hit similar.</span>
<span class="comment-copy">I was a little surprised that I couldn't find a duplicate for this question, so I've expanded a little on the comment by @RodrigoAlencar to make it a "proper" answer.</span>
