<div class="post-text" itemprop="text">
<p>Let's say I have a large list of data that I want to perform some operation on, and I would like to have multiple iterators performing this operation independently.</p>
<pre><code>data = [1,2,3,4,5]
generator = ((e, 2*e) for e in data)
it1 = iter(generator)
it2 = iter(generator)
</code></pre>
<p>I would expect these iterators to be different code objects, but <code>it1 is it2</code> returns <code>True</code>... More confusingly, this is true for the following generators as well:</p>
<pre><code># copied data
gen = ((e, 2*e) for e in copy.deepcopy(data))
# temp object
gen = ((e, 2*e) for e in [1,2,3,4,5])
</code></pre>
<p>This means in practice that when I call <code>next(it1)</code>, <code>it2</code> is incremented as well, which is not the behavior I want.</p>
<p>What is going on here, and is there any way to do what I'm trying to do? I am using python 2.7 on Ubuntu 14.04.</p>
<p><strong>Edit:</strong></p>
<p>I just tried out the following as well:</p>
<pre><code>gen = (e for e in [1,2,3,4,5])
it = iter(gen)
next(it)
next(it)
for e in gen:
    print e
</code></pre>
<p>Which prints <code>3 4 5</code>... Apparently generators are just a more constrained concept that I had imagined.</p>
</div>
<div class="post-text" itemprop="text">
<p>Generators <em>are iterators</em>. All well-behaved iterators have an <code>__iter__</code> method that should simply</p>
<pre><code>return self
</code></pre>
<p>From the <a href="https://docs.python.org/3/library/stdtypes.html#iterator-types" rel="nofollow noreferrer">docs</a></p>
<blockquote>
<p>The iterator objects themselves are required to support the following
  two methods, which together form the iterator protocol:</p>
<p><code>iterator.__iter__()</code> <strong>Return the iterator object itself</strong>. This is
  required to allow both containers and iterators to be used with the
  for and in statements. This method corresponds to the tp_iter slot of
  the type structure for Python objects in the Python/C API.</p>
<p><code>iterator.__next__()</code> Return the next item from the container. If there
  are no further items, raise the StopIteration exception. This method
  corresponds to the tp_iternext slot of the type structure for Python
  objects in the Python/C API.</p>
</blockquote>
<p>So, consider <em>another</em> example of an iterator:</p>
<pre><code>&gt;&gt;&gt; x = [1, 2, 3, 4, 5]
&gt;&gt;&gt; it = iter(x)
&gt;&gt;&gt; it2 = iter(it)
&gt;&gt;&gt; next(it)
1
&gt;&gt;&gt; next(it2)
2
&gt;&gt;&gt; it is it2
True
</code></pre>
<p>So, again, a list is <em>iterable</em> because it has an <code>__iter__</code> method that returns an <em>iterator</em>. This iterator also has an <code>__iter__</code> method, which should always return itself, but it also has a <code>__next__</code> method.</p>
<p>So, consider:</p>
<pre><code>&gt;&gt;&gt; x = [1, 2, 3, 4, 5]
&gt;&gt;&gt; it = iter(x)
&gt;&gt;&gt; hasattr(x, '__iter__')
True
&gt;&gt;&gt; hasattr(x, '__next__')
False
&gt;&gt;&gt; hasattr(it, '__iter__')
True
&gt;&gt;&gt; hasattr(it, '__next__')
True
&gt;&gt;&gt; next(it)
1
&gt;&gt;&gt; next(x)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'list' object is not an iterator
</code></pre>
<p>And for a generator:</p>
<pre><code>&gt;&gt;&gt; g = (x**2 for x in range(10))
&gt;&gt;&gt; g
&lt;generator object &lt;genexpr&gt; at 0x104104390&gt;
&gt;&gt;&gt; hasattr(g, '__iter__')
True
&gt;&gt;&gt; hasattr(g, '__next__')
True
&gt;&gt;&gt; next(g)
0
</code></pre>
<p>Now, you are using <em>generator expressions</em>. But you can just use a generator function. The most straightforward way to accomplish what you are doing is just to use:</p>
<pre><code>def paired(data):
    for e in data:
        yield (e, 2*e)
</code></pre>
<p>Then use:</p>
<pre><code>it1 = paired(data)
it2 = paired(data)
</code></pre>
<p>Which in this case, <code>it1</code> and <code>it2</code> will be two separate iterator objects.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are using the same generator for both iters. Calling <code>iter(thing)</code> returns the thing's <code>iter</code> if it has one, so, iter(generator) returns the same thing both times you call it. <a href="https://docs.python.org/3/library/stdtypes.html#generator-types" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#generator-types</a></p>
<pre><code>data = [1,2,3,4,5]
generator = ((e, 2*e) for e in data)
it1 = iter(generator)
it2 = iter(generator)

type(it1)
generator
</code></pre>
<p>Here's two ways of getting a unique generators:</p>
<pre><code>import itertools
data = [1,2,3,4,5]
generator = ((e, 2*e) for e in data)
it1, it2 = itertools.tee(generator)
type(it1)
itertools._tee
</code></pre>
<p>or:</p>
<pre><code>data = [1,2,3,4,5]
it1 = ((e, 2*e) for e in data)
it2 = ((e, 2*e) for e in data)
type(it1)
generator
</code></pre>
<p>both solutions produce this:</p>
<pre><code>next(it1)
(1, 2)
next(it2)
(1, 2)
</code></pre>
</div>
<span class="comment-copy">Related: <a href="//stackoverflow.com/q/2776829">Difference between Python's Generators and Iterators</a></span>
<span class="comment-copy"><code>it1, it2 = itertools.tee(generator)</code> <a href="https://docs.python.org/3/library/itertools.html#itertools.tee" rel="nofollow noreferrer">BUT</a> "Once <code>tee()</code> has made a split, the original iterable should not be used anywhere else; otherwise, the iterable could get advanced without the tee objects being informed.  This itertool may require significant auxiliary storage (depending on how much temporary data needs to be stored). In general, if one iterator uses most or all of the data before another iterator starts, it is faster to use <code>list()</code> instead of <code>tee()</code>."</span>
<span class="comment-copy">Better: <code>g1, g2 = ((e, 2*e) for e in data), ((e, 2*e) for e in data)</code> (but this only works if <code>data</code> is a sequenceâ€”it can't be an iterator.)</span>
<span class="comment-copy">You didn't address the OP's misunderstanding at all. We all (including the OP) know that they're using the same generator for both iterators. What the OP wants to know is why this returns the same iterator two times. After all, if you call <code>iter</code> twice on a list or a string or a set or any other data structure, you'll get 2 different iterators returned. So why isn't that what happens with a generator?</span>
<span class="comment-copy">Yea my understanding of generators were that they describe an abstract way to perform transformation on a sequence of data one at a time, and a concrete instance of that abstraction was returned when <code>iter</code> was called on the generator. If I'm understanding your reply correctly, then generators are a more limited concept where there can be only one unique iterator per generator?</span>
<span class="comment-copy">It seemed intuitive to me that a generator would return its iter method and not a copy of itself so I didn't elaborate. Too much time in <code>javascript</code> where nothing returns a copy of itself unless it makes your task more difficult.</span>
<span class="comment-copy">@JacobThalman no, <b>generators are iterators</b>. It does not return a copy of itself, since it is an iterator, it's <code>__iter__</code> method simply returns <code>self</code>, as it should as specified by the iterator protocol.</span>
<span class="comment-copy">Agree - edited.</span>
