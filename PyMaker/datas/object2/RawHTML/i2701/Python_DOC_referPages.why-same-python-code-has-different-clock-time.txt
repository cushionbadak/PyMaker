<div class="post-text" itemprop="text">
<p>I'm benchmarking my server using following python code:</p>
<pre><code>import time
initial_clock = time.clock()
res = 0
for i in range(1, 10000000):
    res += i * i
print (time.clock() - initial_clock)
</code></pre>
<p>When I run it multiple times I get different execution times from <code>2.163377</code> seconds to <code>2.970836</code> seconds.
I know same code may have different execution time due to variation in CPU load  but as is said in <code>time.clock</code> documentation it only considers current process clocks, so it should have same execution time using <code>time.clock()</code> even if it is different using <code>time.time()</code>. shouldn't be?</p>
<p>Also is there anyway I can get exact <code>clock</code> count for a piece of python code?</p>
<p>EDIT: I use <code>time.process_time()</code> and get same result.</p>
</div>
<div class="post-text" itemprop="text">
<p>First rule of timing code: use the <a href="https://docs.python.org/3/library/timeit.html" rel="noreferrer"><code>timeit</code> module</a>. This takes care of picking the best timer for your OS automatically, minimises other influences, and takes multiple timing runs to give you the most accurate estimate of time taken.</p>
<p>Next, <code>time.clock()</code> is <em>not process specific</em>. It's the clock time on the CPU, yes, but not the amount of time the current process has spent using the CPU. Other processes scheduled to run on the CPU will add fluctuation to the time taken. You'd want to use <a href="https://docs.python.org/3/library/time.html#time.process_time" rel="noreferrer"><code>time.process_time()</code></a> instead.</p>
<p>However, all code is subject to potential caching and to Python-specific periodic processes such as the <a href="https://docs.python.org/3/library/gc.html" rel="noreferrer">garbage collector</a> running. You can't expect to ever get repeatable <code>time.clock()</code> or <code>time.process_time()</code> values, because that clock can't account for such background work in the Python process itself. You can disable the garbage collector processes (<code>timeit</code> does this for you) while timing code but this won't help with internal caches (which are implementation specific and most are not documented).</p>
<p><code>timeit</code> uses <a href="https://docs.python.org/3/library/time.html#time.perf_counter" rel="noreferrer"><code>time.perf_counter()</code></a> to include time spent on I/O and other processes that might be kicked off by the code under test. You can tell it to use <code>time.process_time()</code> instead by using the <code>-p</code> switch when using <code>timeit</code> as a command line script, or passing <code>timer=time.process_time</code> when calling API functions.</p>
</div>
<span class="comment-copy">Try to use <code>timeit</code> instead of <code>time</code>, because it's more accurate. Check <a href="https://stackoverflow.com/questions/17579357/time-time-vs-timeit-timeit">this answer</a> for details.</span>
