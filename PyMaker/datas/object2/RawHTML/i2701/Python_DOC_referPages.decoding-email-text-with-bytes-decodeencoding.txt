<div class="post-text" itemprop="text">
<p>I'm trying to decode some email text with Python 3's <code>bytes.decode(encoding)</code>, where <code>encoding</code> is sourced from the <code>charset</code> field of an email header.</p>
<p>Problem: some emails list 'cp-850' as their charset while <code>decode()</code> accepts 'cp850'.</p>
<p>If I simply get rid of the hyphen, then another codeset like iso-8859-6 becomes iso88596, which is an unrecognized encoding.</p>
<p>How do I sanitize the arg <code>encoding</code> without creating more unknown encodings?</p>
<p>[Edit] Follow up question: How do I get obtain the charset from an <code>email.message.Message</code> object in a format (alias) that is accepted by <code>bytes.decode()</code>?</p>
<p>[Edit] Clarified the question. Previously used an incorrect term 'content encoding' when I meant the charset.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can remove the hyphen and check if there is a codec that supports the resultant encoding:</p>
<pre><code>import codecs

def sanitize_encoding(enc):
    try:
        codecs.lookup(enc)
        return enc
    except LookupError:
        try:
            enc = enc.replace('-','')
            codecs.lookup(enc)
            return enc
        except LookupError:
            # Not a thing, either way
            return None

sanitize_encoding('cp-850')
#'cp850'
sanitize_encoding('iso-8859-6')
#'iso-8859-6'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/email.charset.html" rel="nofollow noreferrer"><code>email.charset</code> module</a> contains a mapping from IANA character-set labels to the aliases used internally by Python<del>; but chances are you won't need to do this yourself at all</del>.</p>
<p>Here is an adaptation of the example from the <a href="https://docs.python.org/3/library/email.examples.html" rel="nofollow noreferrer"><code>email</code> module's Examples page in the Python documentation</a></p>
<pre><code>import email
from email.policy import default

with open('/path/to/file', 'rb') as fp:
    msg = email.message_from_binary_file(fp, policy=default)

for part in msg.walk():
    # multipart/* are just containers
    if part.get_content_maintype() == 'multipart':
        continue
    charset = part.get_content_charset()
    if charset is not None:
        print('=== charset {} ==='.format(charset))
        print(part.get_content())
</code></pre>
<p>This will get you the IANA character set label for the part's character set; but (by the default <code>email.policy</code>) the text payload will have been decoded into Unicode for you, so you should not need to convert it yourself at all.</p>
<p>The <code>email</code> library was officially overhauled in Python 3.5 (the overhaul was unofficially introduced  already in Python 3.3) with a policy-based system which allows you to take over some parts of message parsing if you really need to; but for well-formed standards-conformant messages (and some common mutations seen in the wild), you can just sit back and let the Python standard library do the work for you.</p>
<p><strong>However,</strong> as you note, the code actually fails to work with <code>cp-850</code> body parts, precisely for the reasons you state.  You would expect this to work, but it doesn't:</p>
<pre><code># FIXME: broken code, doesn't help
import email.charset as email_charset
email_charset.add_alias('cp-850', 'cp850')
</code></pre>
<p>Instead, you have to <a href="http://stackoverflow.com/a/1064191/874188">hack Python's <code>encodings</code> module to support this alias</a>:</p>
<pre><code>import encodings
encodings.aliases.aliases['cp_850'] = 'cp850'
</code></pre>
<p>Notice also how, bewilderingly, the alias has an underscore which then gets mapped to a dash in some internal black voodoo magic.</p>
</div>
<span class="comment-copy">There is a way to add aliases for encodings, but the <code>email</code> module should already know how to map IANA encoding names to Python's internal labels. You really should not be doing your own email parsing unless you know for a fact that the <code>email</code> library doesn't do what you want.</span>
<span class="comment-copy">@tripleee Hi, do you mean that the <code>email</code> module automatically figures out what content encoding each message is after parsing? As in, after parsing an email with (for example) <code>email.message_from_binary_file()</code>, the returned <code>Message</code> object will automatically figure out the content encoding of the email?</span>
<span class="comment-copy">Yes, it can parse email messages and present to you a reasonably unified structure of MIME parts from which you can extract already-decoded text if it's a text part.</span>
<span class="comment-copy">("Content encoding" in this context is a different thing. You are looking at the <code>charset=</code> value of the content type.)</span>
<span class="comment-copy">Ah yes, I'm sorry. I mean the charset: I want to get the correct charset of whatever text (plain or html) in the message. Hopefully in a format (or alias) that <code>bytes.decode()</code> accepts.</span>
<span class="comment-copy">Hi, thanks for the code snippet! I tested it and found that when I attempt to do <code>part.get_content()</code>, it still got tripped up by sub-messages encoded in cp-850 :( The traceback indicated that <code>contentmanager</code> could not find the encoding cp-850. ``` File "/usr/lib/python3.6/email/contentmanager.py", line 67, in get_text_content   return content.decode(charset, errors=errors) LookupError: unknown encoding: cp-850```</span>
<span class="comment-copy">It works for me with <code>get_payload(decode=True)</code> instead of <code>get_content()</code>. I have updated the answer to show this, too.  Maybe there is a bug in <code>get_content()</code>...?</span>
<span class="comment-copy">Turns out <code>get_text_content()</code> calls <code>get_payload(decode=True)</code> and then tries to <code>.decode</code> the result ... I'm not sure this code is correct; the payload should already be decoded. <a href="https://github.com/python/cpython/blob/3.7/Lib/email/contentmanager.py#L67" rel="nofollow noreferrer">github.com/python/cpython/blob/3.7/Lib/email/â€¦</a></span>
<span class="comment-copy">... Wait, that's not correct either; it decodes into a byte string. So the code is correct after all and there's something up with the cp-850 codec just like you stated.</span>
<span class="comment-copy">Yes, because <code>.decode()</code> expects 'cp850' (no hyphen) instead of 'cp-850'.</span>
