<div class="post-text" itemprop="text">
<p>I'm running this code to print a triangle pattern but I can't seem to understand why two extra whitespaces are added in between.</p>
<pre><code>n=int(input("enter length"))
for x,s in zip(range(0,n),reversed(range(n))):
     print(s*" ","*",((x-1)*2)*"f",(x!=0)*"*")
</code></pre>
<p>the output of program is </p>
<pre><code>    *  
   *dd*
  *dffd*
 *dffffd*
*dffffffd*
</code></pre>
<p>the extra white spaces are denoted by letter 'd'.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>print()</code> automatically adds spaces between its parameters:</p>
<pre><code>&gt;&gt;&gt; print(1, 2, 3)
1 2 3
&gt;&gt;&gt; print("a", "b", "c")
a b c
</code></pre>
<p>You can concatenate the strings manually to solve this problem:</p>
<pre><code>print(s*" " + "*" + ((x - 1)*2)*"f" + (x != 0)*"*")
</code></pre>
<p>or use <code>sep</code>:</p>
<pre><code>print(s*" ", "*", ((x-1)*2)*"f", (x!=0)*"*", sep="")
</code></pre>
<p>From <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer">the documentation</a>:</p>
<blockquote>
<p><code>print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)</code></p>
<p>Print objects to the text stream file, separated by <code>sep</code> and followed by <code>end</code>.</p>
</blockquote>
<p>Note that argument <code>sep</code> defaults to a single space.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>print</code> outputs each argument with a space as the default separator. You should use the <code>sep=''</code> parameter if you want no space in between the output of the arguments:</p>
<pre><code>print(s*" ","*",((x-1)*2)*"f",(x!=0)*"*", sep='')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's due to the default separator between items.<br/>
You can customize it with the <code>sep</code> keyword argument:</p>
<pre><code>print(1,2,3,4, sep="-")
#1-2-3-4
print(1,2,3,4, sep="")
#1234
</code></pre>
</div>
<span class="comment-copy">print adds whitespaces between its arguments by default</span>
