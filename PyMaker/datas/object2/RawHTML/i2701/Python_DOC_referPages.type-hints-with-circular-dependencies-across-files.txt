<div class="post-text" itemprop="text">
<p>Say you have something like this:</p>
<pre><code>class Point:
    def compute_line(self, point: 'Point') -&gt; 'Line':
        # computes line connecting self to point
        ...


class Line:
    def compute_intersection(self, line: 'Line') -&gt; 'Point':
        # computes point formed from intersection of self and line
        ...
</code></pre>
<p>PyCharm can parse the str typing hints to auto-complete for outputs of either method.</p>
<p>But what if I want to put <code>Point</code> and <code>Line</code> in separate files? Is there some way to still get auto-completion?</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that <code>Line</code> isn't a name for a type at all within <code>point.py</code>, and <code>Point</code> isn't a name for a type within <code>line.py</code>. Putting it in quotes doesn't help; that just delays when the string is resolved. It still has to eventually resolve to a type, so you're just delaying things to a point where they resolve to a <code>NameError</code>, which doesn't help thing.</p>
<p>If you do an <code>import line</code> in <code>Point</code> and <code>import point</code> in <code>Line</code>, then <code>point.Point</code> and <code>line.Line</code> become types, which solves that problem. But of course it creates a new problem: a circular import.</p>
<hr/>
<p>In some cases, <a href="https://www.python.org/dev/peps/pep-0484/#runtime-or-type-checking" rel="nofollow noreferrer">as explained in PEP 484</a>, you can resolve that just by doing a conditional "static-typing-only" import, like this:</p>
<pre><code>import typing
if typing.TYPE_CHECKING:
    import line
</code></pre>
<p>… and then using <code>'line.Line'</code> in the type annotation.</p>
<p>See the docs on <a href="https://docs.python.org/3/library/typing.html#typing.TYPE_CHECKING" rel="nofollow noreferrer"><code>TYPE_CHECKING</code></a> for more details. (In particular, if you need compatibility with Python 3.5 before 3.5.2, this will give you a <code>NameError</code> instead of <code>False</code> at runtime, which is a pain… but not many people need to run on 3.5.1.)</p>
<hr/>
<p>If that doesn't solve the problem, you need some scheme to avoid the circular import, the same way you would for a runtime circular import.</p>
<p>For example, you can go with the traditional "interface" solution where the first type depends on the second, but the second doesn't depend on the first, it depends only on a superclass for the first.</p>
<p>Typically, this superclass would be an ABC, to indicate that it's serving only as an interface to some real class defined elsewhere. (And that way, you know, and Python and your static checker can enforce, that anything that types as the ABC must be an instance of one of the concrete subclasses of that ABC—of which there's only one.)</p>
<pre><code># pointbase.py
import abc
class PointBase(abc.ABC):
    @abc.abstractmethod
    def method_that_does_not_need_line(self):
        pass

# point.py
import pointbase
import line
class Point(pointbase.PointBase):
    def method_that_does_not_need_line(self):
        do_stuff()
    def method_that_does_need_line(self, line: line.Line):
        do_stuff(line)

# line.py
import pointbase
class Line:
    def method_that_needs_point(self, point: pointbase.PointBase):
        do_stuff(point)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can have an assertion for that type, PyCharm will recognize it as the type you asserted it to be.</p>
<pre><code>assert isinstance(point, Point)
</code></pre>
</div>
<span class="comment-copy">After you put them in different files, how are you accessing them? If you’re just doing <code>import linemod</code> and using <code>linemod.Line</code>, then you have to annotate as <code>'linemod.Line'</code>, not just <code>'Line'</code>.</span>
<span class="comment-copy">@abarnert If I add <code>import line</code> in <code>point.py</code>, and I add <code>import point</code> in <code>line.py</code>, I'll get an error due to circular imports.</span>
<span class="comment-copy">Yes, circular imports are the same problem for static typing as they are for runtime. But that doesn't mean you can just use a type that you haven't imported. That's the same as just making up a type that doesn't exist and trying to use that.</span>
<span class="comment-copy">Thanks, I was looking exactly for something like static typing only imports.</span>
<span class="comment-copy">Yes, but then there's no point in the trailing return type. I'm hoping to leverage the trailing return type for my desired behavior. Besides, if the trailing return type is a function of the types of the method's inputs, I can't easily generate the assert.</span>
