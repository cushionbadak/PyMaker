<div class="post-text" itemprop="text">
<p>Need to write a Python program that analyzes a file and counts:</p>
<ul>
<li>The number of words</li>
<li>The average length of a word</li>
<li>How many times each word occurs</li>
<li>How many words start with each letter of the alphabet</li>
</ul>
<p>I've got the code to do the first 2 things:</p>
<pre><code>with open(input('Please enter the full name of the file: '),'r') as f:
     w = [len(word) for line in f for word in line.rstrip().split(" ")]
     total_w = len(w)
     avg_w = sum(w)/total_w

print('The total number of words in this file is:', total_w)
print('The average length of the words in this file is:', avg_w)
</code></pre>
<p>But I'm not sure on how to do the others. Any help is appreciated.</p>
<p>Btw, when I say "How many words start with each letter of the alphabet" I mean how many words start with "A", how many start with "B", how many start with "C", etc all the way through to "Z".</p>
</div>
<div class="post-text" itemprop="text">
<p>There are many ways to achieve this, a more advanced approach would involve an initial simple gathering of the text and its words, then working on the data with ML/DS tools, with which you could extrapolate more statistics (Things like "a new paragraph starts mostly with X words" / "X words are mostly preceeded/succeeded by Y words" etc.)</p>
<p>If you just need very basic statistics you can gather them while iterating over each word and do the calculations at the end of it, like:</p>
<pre><code>stats = {
  'amount': 0,
  'length': 0,
  'word_count': {},
  'initial_count': {}
}

with open('lorem.txt', 'r') as f:
  for line in f:
    line = line.strip()
    if not line:
      continue
    for word in line.split():
      word = word.lower()
      initial = word[0]

      # Add word and length count
      stats['amount'] += 1
      stats['length'] += len(word)

      # Add initial count
      if not initial in stats['initial_count']:
        stats['initial_count'][initial] = 0
      stats['initial_count'][initial] += 1

      # Add word count
      if not word in stats['word_count']:
        stats['word_count'][word] = 0
      stats['word_count'][word] += 1

# Calculate average word length
stats['average_length'] = stats['length'] / stats['amount']
</code></pre>
<p>Online Demo <a href="https://repl.it/repls/BarrenOriginalExponents" rel="nofollow noreferrer">here</a></p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Interesting challenge you were given, i made a proposition for question 3, how many times a word occurs inside the string. This code is not optimal at all, but it does work.</p>
<blockquote>
<p>also i used the file <code>text.txt</code> </p>
</blockquote>
</blockquote>
<p>edit: noticed i forgot to create wordlist as it was saved in my ram memory</p>
<pre><code>with open('text.txt', 'r') as doc:
    print('opened txt')
    for words in doc:
        wordlist = words.split()     

for numbers in range(len(wordlist)):
        for inner_numbers in range(len(wordlist)):
            if inner_numbers != numbers:
                if wordlist[numbers] == wordlist[inner_numbers]:
                    print('word: %s == %s' %(wordlist[numbers], wordlist[inner_numbers]))
</code></pre>
<blockquote>
<p>Answer to question four: This one wasn't really hard after you have created a list with all the words since strings can be treated like a list and you can easily get the first letter of the string by simply doing <code>string[0]</code> and if its a list with strings <code>stringList[position of word][0]</code></p>
</blockquote>
<pre><code>for numbers in range(len(wordlist)):
        if wordlist[numbers][0] == 'a':
            print(wordlist[numbers])
</code></pre>
</div>
<span class="comment-copy">Look up If statements and check out Python dictionaries: <a href="https://www.pythonforbeginners.com/dictionary/how-to-use-dictionaries-in-python" rel="nofollow noreferrer">pythonforbeginners.com/dictionary/â€¦</a></span>
<span class="comment-copy">First you should be extracting all the words, which you have done already in order to accomplish task 1 and 2 (actually you have stored the lengths, but it's straightforward to store the words instead). For task 3 I recommend you check out <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>. Regarding task 4 I'm not 100% what you mean; did you mean words that start with <i>any</i> letter of the alphabet? In any case I have the feeling that the built-in function <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer"><code>filter</code></a> is going to help you.</span>
<span class="comment-copy">I will also note that you wrote .split(" ") but .split() by default is spaces</span>
