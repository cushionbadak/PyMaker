<div class="post-text" itemprop="text">
<p>I have read way to many threads now and really lost.</p>
<p>Just trying to do something basic before I make it complicated.</p>
<p>so i have a script test.py</p>
<p>I want to call the script from within runme.py but without waiting so it will process the other chunk of code, but then when it gets to the end wait for test.py code to finish before continuing on. </p>
<p>I cant seem to figure out the correct syntax for the p = subprocess.Popen (I have tried so many)</p>
<p>and do I need the that to the test.py if its in the same directory? </p>
<p>here is what i have but cant get to work.</p>
<pre><code>import subprocess
p = subprocess.Popen(['python test.py'])
#do some code
p.wait()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I cant seem to figure out the correct syntax for the p = subprocess.Popen (I have tried so many)</p>
</blockquote>
<p>You want to pass it a list of arguments. The first argument is the program to run, <code>python</code> (although actually, you probably want <a href="https://docs.python.org/3/library/sys.html#sys.executable" rel="nofollow noreferrer"><code>sys.executable</code></a> here); the second is the script that you want <code>python</code> to run. So:</p>
<pre><code>p = subprocess.Popen(['python', 'test.py'])
</code></pre>
<hr/>
<blockquote>
<p>and do I need the that to the test.py if its in the same directory?</p>
</blockquote>
<p>This will work the same way as if you ran <code>python test.py</code> at the shell: it will just pass <code>test.py</code> as-is to <code>python</code>, and <code>python</code> will treat that as a path relative to the current working directory (CWD).</p>
<p>So, if <code>test.py</code> is in the CWD, this will just work.</p>
<p>If <code>test.py</code> is somewhere else, then you need to provide either an absolute path, or one relative to the CWD.</p>
<p>One common thing you want is that <code>test.py</code> is in not necessarily in the CWD, but instead it's in the same directory as the script/module that wants to launch it:</p>
<pre><code>scriptpath = os.path.join(os.path.dirname(__file__), 'test.py')
</code></pre>
<p>â€¦ or in the same directory as the main script used to start your program:<sup>1</sup></p>
<pre><code>scriptpath = os.path.join(os.path.dirname(sys.argv[0]), 'test.py')
</code></pre>
<p>Either way, you just pass that as the argument:</p>
<pre><code>p = subprocess.Popen(['python', scriptpath])
</code></pre>
<hr/>
<p><sub>1. On some platforms, this may actually be a relative path. If you might have done an <code>os.chdir</code> since startup, it will now be wrong. If you need to handle that, you want to stash <code>os.path.abspath(os.path.dirname(sys.argv[0]))</code> in the main script at startup, then pass it down to other functions for them to use instead of calling <code>dirname(argv[0])</code> themselves.</sub></p>
</div>
<span class="comment-copy">On Python 3 you can use the <a href="https://docs.python.org/3/library/asyncio-subprocess.html" rel="nofollow noreferrer"><code>asyncio</code></a> module. Or alternatively execute it in a separate <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">thread</a>.</span>
