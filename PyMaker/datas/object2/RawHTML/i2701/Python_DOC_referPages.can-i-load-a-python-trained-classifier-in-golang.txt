<div class="post-text" itemprop="text">
<p>I am trying to load a python trained classifier in a Golang server. </p>
<p>In python, I generally do that:</p>
<pre><code>classifier = pickle.load( open("classifier1.p", "rb"))
</code></pre>
<p>Is there any equivalent in Golang? </p>
<p>It took me 3 days to train the data and I can't wait again. So I tried to convert the classifier1.p to JSON format using this code.</p>
<pre><code>fpkl = pickle.load( open("whatever/classifier1.p", "rb"))
fjson = open("whatever/classifier.json", "w")
json.dump(fpkl, fjson, ensure_ascii=False, sort_keys=True, indent=4)
</code></pre>
<p>An error occured: Object of type 'Pipeline' is not JSON serializable</p>
<p>I need some advice. Is there any Golang equivalent for my first problem? If there isn't, what can I do to avoid the data training again?</p>
<p>Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/pickle.html#data-stream-format" rel="nofollow noreferrer">The documentation for the Python pickle library</a> notes:</p>
<blockquote>
<p>The data format used by <code>pickle</code> is Python-specific. This [...] means that non-Python programs may not be able to reconstruct pickled Python objects.</p>
</blockquote>
<p>In principle you could read back the format (it's "just" a byte stream representing an object graph) and assign some meaning to the Python class name references in the pickle file.  This would be highly specific to the specific object format you're reading back.</p>
<p>My gut feel is that if it would take you 3 days to re-train your model using either Go-native tools or export it into a more neutral format, that will probably be faster and less frustrating than trying to decode the pickle file.</p>
</div>
<span class="comment-copy">What kind of classifier are you using? It must be from a library; there is no notion of a classifier built into Python. Whatever library provides the classifier may have a way to export it in a format that a Golang library knows how to read and execute.</span>
<span class="comment-copy">Thank you for your answer. I just thought of that. Can I load the data in python, send it to my tcp Go server and  unpickle data using the stalecucumber library?</span>
