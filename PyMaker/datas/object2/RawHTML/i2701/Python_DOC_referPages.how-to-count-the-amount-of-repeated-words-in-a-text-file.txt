<div class="post-text" itemprop="text">
<p><strong>Sample of code from vending machine program</strong></p>
<pre><code>item = int(input("What item do you want: [1-10]"))
item_chosen = open("items.txt","a")
item_chosen.write(str(item))
item_chosen_data = items_chosen.read()    
item_chosen.close()
</code></pre>
<p>From here, how would I be able to check how much of each item number is stored in the text file (Since a vending machine should only have a limited stock before the item is 'Not Available')?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>item = int(input("What item do you want: [1-10]"))

# use the with open structure to work with files without having to explicitly close them
with open("items.txt","a+") as item_chosen:
    item_chosen.write(str(item))
    item_chosen_data = item_chosen.read()

# Use the string.split() method to get the item_chosen_data as a list instead of a string.
item_chosen_data = item_chosen_data.split()

# Create a set from the list of items, the removes duplicate values.
unique_items = set(item_chosen_data)

# Initialize a dictionary to map each item to it's count.
item_to_count = {}

# for each unique item
for item in unique_items:
    # map the item to the number of times it appears in the list (ie. list.count() method)
    item_to_count[item] = item_chosen_data.count(item)
</code></pre>
<p>I hope the comments I have made are self explanatory, but if more information is needed please let me know. Essentially you want to break the information you read from the text file into a list, which allows you to use the list.count() method.</p>
<p>Additionally like others have mentioned it would probably be beneficial to avoid writing to a file at all in this task. An alternative would be defining a dictionary with the number of each item in the vending machine such as:</p>
<pre><code># build a dictionary mapping each item to it's stock
item_to_stock = {'coke': 3, 'pepsi': 2, 'apple_juice': 5, 'doritos': 3}

# put a coke into the vending machine:
item_to_stock['coke'] = item_to_stock.get('coke', 0) + 1

# take a pepsi out of the vending machine, first check if the item is in stock
if item_to_stock.get('pepsi') &gt; 0:
    item_to_stock['pepsi'] = item_to_stock['pepsi'] - 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Notwithstanding the fact that this looks like an <a href="https://en.wikipedia.org/wiki/XY_problem" rel="nofollow noreferrer">XY problem</a>, you can use a Counter for this:</p>
<pre><code>import collections

def count_items():
    with open('items.txt') as f:
        return collections.Counter(line.strip() for line in f)
</code></pre>
<p>A Counter is a subclass of <code>dict</code>, so you can check the count of any item easily:</p>
<pre><code>purchased_item_count = count_items()
print(purchased_item_count["9"])
</code></pre>
<p>which should print the count of item "9".</p>
<p>Ideally, however, you would use some kind of database for this task. It's very inefficient to repeatedly open a file, write to it, close it, open it again, count its contents, and close it again.</p>
</div>
<span class="comment-copy">Is there some reason you have to use a file for this (and keep opening and closing it)? You could just load the data from the file into a data structure and then update that (writing back to file with new data when user exits).</span>
<span class="comment-copy">If for some reason you can't just keep track of inventory in-memory, the correct solution to this question is "use an embedded database". Since you're using Python, you could look into SQLite or GDBM/NDBM, because Python ships with interfaces for them in the standard library (<a href="https://docs.python.org/3/library/sqlite3.html" rel="nofollow noreferrer"><code>sqlite3</code></a> and <a href="https://docs.python.org/3/library/dbm.html" rel="nofollow noreferrer"><code>dbm</code></a>, respectively).</span>
<span class="comment-copy">And usually, when programming such things as the vending machines you keep count for each product separately. But if you insist doing it your way, the answer would be: use the count() method of the string, or even better, list object.</span>
