<div class="post-text" itemprop="text">
<p>I have some words: </p>
<pre><code>wordlist = ['change', 'my', 'diaper', 'please']
</code></pre>
<p>I also have a list of tuples that I need to check against: </p>
<pre><code>mylist = [('verb', 'change'), ('prep', 'my')]
</code></pre>
<p>What I want to do is create a list out of all the words that are not in the list of tuples.  </p>
<p>So the result of this example would be <code>['diaper', 'please']</code> </p>
<p>What I tried seems to create duplicates:  </p>
<pre><code>[word for tuple in mylist for word in wordlist if word not in tuple]
</code></pre>
<p>How do I generate a list of the words not in the tuple-list, and do it as efficiently as possible?  </p>
<p>No use of sets.  </p>
<p>Edit: chose answer based on following restriction of <code>set</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a oneliner using list comprehension</p>
<pre><code>[word for word in wordlist if word not in [ w[1] for w in mylist ]]
</code></pre>
<p>The inner list, <code>[ w[1] for w in mylist ]</code> extracts the second element from the tuple list.</p>
<p>The outer list, <code>[word for word in wordlist if word not in innerlist]</code> extracts the words filtering out the ones in the just extracted list.</p>
<p>P.S. I assumed you wanted to filter only the second element of the tuple list.</p>
</div>
<div class="post-text" itemprop="text">
<p>Make a <code>set</code> of known words from your tuples list:</p>
<pre><code>myList = [('verb', 'change'), ('prep', 'my')]
known_words = set(tup[1] for tup in myList)
</code></pre>
<p>then use it as you did before:</p>
<pre><code>wordlist = ['change', 'my', 'diaper', 'please']
out = [word  for word in wordlist if word not in known_words]

print(out)
# ['diaper', 'please']
</code></pre>
<p>Checking if an item exists in a set is O(1), while checking in a list or tuple is O(length of the list), so it is really worth using sets in such cases.</p>
<p>Also, if you don't care about the order of the words and want to remove duplicates, you could do:</p>
<pre><code>unique_new_words = set(wordlist) - known_words
print(unique_new_words)
# {'diaper', 'please'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>this is a version where i flatten (using <a href="https://docs.python.org/3/library/itertools.html?highlight=chain#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain</code></a>) your tuples into a <a href="https://docs.python.org/3/library/stdtypes.html?highlight=set#set" rel="nofollow noreferrer"><code>set</code></a> and compare against that set (using a <code>set</code> will speed up the lookup for the <code>in</code> operator):</p>
<pre><code>from itertools import chain

wordlist = ['change', 'my', 'diaper', 'please']
mylist = [('verb', 'change'), ('prep', 'my')]
veto = set(chain(*mylist))   # {'prep', 'change', 'verb', 'my'}

print([word for word in wordlist if word not in veto])
# ['diaper', 'please']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have made a an assumption, that tuple[1] would have only one element, if not that would need a small change.</p>
<pre><code>[word for word in wordlist if word not in [tuple[1] for tuple in mylist]]
</code></pre>
</div>
<span class="comment-copy">have you tried iterating through the list checking each word in list against each word in tuple?</span>
<span class="comment-copy">I have tried. But what's throwing me off there is that I need to access each tuple individually to make use of the <code>in</code> operator. Thus the nested loops, the errors, and something tells me its not very efficient. @Stanley</span>
<span class="comment-copy">youre right! but searching in general isn't very memory and/or effiency friendly</span>
<span class="comment-copy">You could probably change On^2 to Onlogn if you use a binary search. You'd need to presort the list of words you were searching on up front.</span>
<span class="comment-copy">ha! you beat my to the last step! i'll leave it out of my answer then. +1</span>
