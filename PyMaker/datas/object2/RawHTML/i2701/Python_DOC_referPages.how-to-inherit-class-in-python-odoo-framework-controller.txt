<div class="post-text" itemprop="text">
<p>I've encountered an inheritance problem in Python. I'd expect the output from by program to be:</p>
<pre class="lang-none prettyprint-override"><code># url: home/animal
response: CLASS: Animal | Ability : none
</code></pre>
<hr/>
<pre class="lang-none prettyprint-override"><code># url: home/animal/bird
response: CLASS: Bird | Ability : Fly
</code></pre>
<hr/>
<pre class="lang-none prettyprint-override"><code># url: home/animal/fish
response: CLASS: Fish | Ability : Swim
</code></pre>
<p>But I get the following output:</p>
<pre class="lang-none prettyprint-override"><code># url: home/animal
response: CLASS: Fish | Ability : Swim
</code></pre>
<hr/>
<pre class="lang-none prettyprint-override"><code># url: home/animal/bird
response: CLASS: Fish | Ability : Swim
</code></pre>
<hr/>
<pre class="lang-none prettyprint-override"><code># url: home/animal/fish
response: CLASS: Fish | Ability : Swim
</code></pre>
<p>Here is my code:</p>
<pre class="lang-py prettyprint-override"><code>class Animal(http.Controller):
    name = 'Animal'
    ability = 'none'

    @http.route('/animal', auth='public', type='http', website=True, csrf=False)
    def util(self, **kwargs):
        return self.message()

    def message(self):
        return "Name: "+self.name +" | Ability : " + self.ability

class Bird(Animal):
    name = 'Bird'
    ability = 'fly'

    @http.route('/animal/bird', auth='public', type='http', website=True, csrf=False)
    def util1(self, **kwargs):
        return self.message()


class Fish(Animal):
    name = 'Fish'
    ability = 'swim'

    @http.route('/animal/fish', auth='public', type='http', website=True, csrf=False)
    def util2(self, **kwargs):
        return self.message()
</code></pre>
<p>I've read quite a lot about inheritance, but still couldn't find a solution for this problem. <em>Could it be because it has a different system in <strong>odoo</strong> python?</em></p>
<p><strong>Edit:</strong>
Here is the code that works, based on @Bruno's answer.</p>
<pre class="lang-py prettyprint-override"><code>class Animal():
    name = 'Animal'
    ability = 'none'

    def message(self):
        return "Name: {self.name} | Ability : {self.ability} ".format(self=self)

class Bird(Animal):
    name = 'Bird'
    ability = 'fly'

class Fish(Animal):
    name = 'Fish'
    ability = 'swim'

class MyController(http.Controller):
    def __init__(self):
        self._animal = Animal()
        self._bird = Bird()
        self._fish = Fish()

    @http.route('/animal', auth='public', type='http', website=True, csrf=False)
    def animal(self, **kwargs):
        return self._animal.message()

    @http.route('/animal/bird', auth='public', type='http', website=True, csrf=False)
    def bird(self, **kwargs):
        return self._bird.message()

    @http.route('/animal/fish', auth='public', type='http', website=True, csrf=False)
    def fish(self, **kwargs):
        return self._fish.message()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><em>Caveat: I never used odoo at all so this answer is partly wild guess based on what I could get from the doc and the behaviour you describe.</em></p>
<p><a href="https://www.odoo.com/documentation/11.0/reference/http.html#controllers" rel="nofollow noreferrer">According to the doc</a>, it looks like inheriting from a controller will actually override the original controller, not add a new one (nb cf the caveat above ok ?). If so, one thing you could try would be to use multiple inheritance instead, extracting your specific features to a non-controller base class:</p>
<pre><code>class Animal(object):
    name = 'Animal'
    ability = 'none'

    def message(self):
        # using string formatting for improved readability
        return "Name: {self.name} | Ability : {self.ability}".format(self=self)


class Bird(Animal):
    name = "Bird"
    ability = Fly

# etc

class AnimalController(Animal, http.Controller):
    @http.route('/animal', auth='public', type='http', website=True, csrf=False)
    def util(self, **kwargs):
        return self.message()

class BirdController(Bird, http.Controller):
    @http.route('/animal/bird', auth='public', type='http', website=True, csrf=False)
    def util(self, **kwargs):
        return self.message()
</code></pre>
<p>but this doesn't really look like good design to me. A controller can typically handle many routes (this is the case for all MVC web frameworks, and since the <code>route</code> decorator is to be applied on methods I assume this works the same here), so it might be simpler to only keep one single controller and delegate to your <code>Animal</code> hierarchy:</p>
<pre><code>class Animal(object):
    name = 'Animal'
    ability = 'none'

    def message(self):
        # using string formatting for improved readability
        return "Name: {self.name} | Ability : {self.ability}".format(self=self)


class Bird(Animal):
    name = "Bird"
    ability = Fly

# etc


class Controller(http.controller):
    def __init__(self, ...):
        self._animal = Animal()
        self._bird = Bird()
        # etc

    @http.route('/animal', auth='public', type='http', website=True, csrf=False)
    def animal(self, **kwargs):
        return self._animal.message()

    @http.route('/animal/bird', auth='public', type='http', website=True, csrf=False)
    def bird(self, **kwargs):
        return self._bird.message()

   # etc
</code></pre>
<p>This is of course incomplete example code so you get the general idea and will obviously need to be modified to match both odoo expectations and your project's needs. </p>
</div>
<div class="post-text" itemprop="text">
<p>Are you actually trying to inherit http.controller? If so, the default 0Auth module in Odoo can perhaps show you how that is arranged (since it also inherits this class).</p>
<p>If you are just trying to add a new class to Odoo, note that it has it's own inheritance system, which is described in the documentation (and works vastly different from default python):
<a href="https://www.odoo.com/documentation/11.0/reference/orm.html#inheritance-and-extension" rel="nofollow noreferrer">Odoo inheritance documentation for version 11.0</a></p>
<p>Note that although I have no personal experience with inheriting anything anything other than Odoo objects within Odoo, I found a lot of examples in the standard addons that should help you on your way.</p>
</div>
<span class="comment-copy">Classes should have a constuctor: def __init__(self): with inside e.g. self.name='Animal' and self.ability='none'</span>
<span class="comment-copy">thanks for your comment. could you please write some simple example?</span>
<span class="comment-copy">The issue is not inheritance. Have a look at simple class examples here (9.3.2): <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/classes.html</a> or here <a href="https://stackoverflow.com/questions/625083/python-init-and-self-what-do-they-do" title="python init and self what do they do">stackoverflow.com/questions/625083/â€¦</a></span>
<span class="comment-copy">It looks like each class overrides the routes defined in the previous ones. You may want to investigate how routes definitions exactly work in odoo.</span>
<span class="comment-copy">thank you @seb007 I have tried your suggestion. And still they produce all the same results.  here is the new codes: <a href="https://pasteboard.co/HAt2rh8.png" rel="nofollow noreferrer">pasteboard.co/HAt2rh8.png</a></span>
<span class="comment-copy">oh wow, thank you so much dude. it works!!!! thank you thank you thank you.   i have updated the code that works.</span>
<span class="comment-copy">Glad I could help. Just a question though: do you really need to make your  <code>Animal</code> class inherit from controller ? (I understand you posted a dumbed-down code snippet but still...)</span>
<span class="comment-copy">Nooo... my mistake. Yes, we dont have to inherit Animal from http.controller. sorry, you are right.</span>
<span class="comment-copy">Well, you <i>could</i> have had a reason to do so - as I say I know nothing about odoo and I don't really know what you're really trying to do (since what you posted is obviously a toy example).</span>
<span class="comment-copy">hahaa yea. tks again mate. You have been so helpful. God bless you.</span>
<span class="comment-copy">The doc you link too is about odoo models, the OP is working with controllers.</span>
<span class="comment-copy">thanks guys, it is solved now. Thanks to Bruno here.</span>
