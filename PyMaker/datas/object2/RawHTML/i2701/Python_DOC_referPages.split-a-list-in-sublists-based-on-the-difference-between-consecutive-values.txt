<div class="post-text" itemprop="text">
<p>I have a list with values for which each value has at least one (but often more) consecutive value(s) that have a .033 increment:</p>
<pre><code>l = [26.051, 26.084, 26.117, 26.15, 26.183, 31.146, 31.183, 34.477, 34.51, 34.543]
</code></pre>
<p>I would like to split this list into sublists where consecutive items that differ by .033 are combined, and when the difference is larger to start a new sublist:</p>
<pre><code>l = [ [26.051, 26.084, 26.117, 26.15, 26.183], [31.146, 31.183], [34.477, 34.51, 34.543] ] 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Keep track of the last element you saw and either append the current item to the last sublist, or create a new sublist if the difference is greater than your allowed delta.</p>
<pre><code>res, last = [[]], None
for x in l:
    if last is None or abs(last - x) &lt;= 0.033:
        res[-1].append(x)
    else:
        res.append([x])
    last = x
</code></pre>
<p>Note, however, that a value of <code>0.033</code> will in fact not return the result that you want, as some of the differences are considerably more (0.037) or just slightly more due to floating point rounding. Instead, you might want to use a slightly more generous value, e.g., using <code>0.035</code> gives you <code>[[26.051, 26.084, 26.117, 26.15, 26.183], [31.146], [31.183], [34.477, 34.51, 34.543]]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>One can use temporary lists and <code>for</code> loop to get the desired result: </p>
<pre><code>l = [26.051, 26.084, 26.117, 26.15, 26.183, 31.146, 31.183, 34.477, 34.51, 34.543]
outlist = []
templist = [l.pop(0)]
while len(l)&gt;0:
    x = l.pop(0)
    if x - templist[-1] &gt; 0.04:
        outlist.append(templist)
        templist = [x]
    else: 
        templist.append(x)
outlist.append(templist)
print(outlist)
</code></pre>
<p>Output: </p>
<pre><code>[[26.051, 26.084, 26.117, 26.15, 26.183], [31.146, 31.183], [34.477, 34.51, 34.543]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My approach involves running through pairs of consecutive numbers and examine the gaps between them, just like everybody else's. The difference here is in the use of <code>iter()</code> to create two iterables from one list. </p>
<pre><code># Given:
l = [26.051, 26.084, 26.117, 26.15, 26.183, 31.146, 31.183, 34.477, 34.51, 34.543]
gap = 0.033

# Make two iterables (think: virtual lists) from one list
previous_sequence, current_sequence = iter(l), iter(l)

# Initialize the groups while advancing current_sequence by 1
# element at the same time
groups = [[next(current_sequence)]]

# Iterate through pairs of numbers
for previous, current in zip(previous_sequence, current_sequence):
    if abs(previous - current) &gt; gap:
        # Large gap, we create a new empty sublist
        groups.append([])

    # Keep appending to the last sublist
    groups[-1].append(current)

print(groups)
</code></pre>
<p>A few notes</p>
<ul>
<li>My solution looks long, but if you subtract all the comments, blank likes, and the last print statement, it is only 6 lines</li>
<li>It is efficient because I did not actually duplicate the list</li>
<li>An empty list (empty <code>l</code>) will generate a <code>StopIteration</code> exception, so please ensure the list is not empty</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>If you're a fan of <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code></a>, you could use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby()</code></a> for this:</p>
<pre><code>from itertools import groupby

l = [26.051, 26.084, 26.117, 26.15, 26.183, 31.146, 31.183, 34.477, 34.51, 34.543]

def keyfunc(x):
    return (x[0] &gt; 0 and round(l[x[0]] - l[x[0]-1], 3) == 0.033 or
            x[0] &lt; len(l) - 1 and round(l[x[0]+1] - l[x[0]], 3) == 0.033)

print([[x[1] for x in g] for k, g in groupby(enumerate(l), key=keyfunc)])
</code></pre>
<p>Output:   </p>
<pre><code>[[26.051, 26.084, 26.117, 26.15, 26.183], [31.146, 31.183], [34.477, 34.51, 34.543]]
</code></pre>
<p>As far as the logic is concerned, the key function returns different keys for numbers that have neighbors with the difference of <code>0.033</code> and those that don't. Then <code>groupby()</code> groups them accordingly.</p>
</div>
<span class="comment-copy">Should'nt 31.146 and 31.183 be in separate sublists? The difference is 0.037. Or your difference cutoff should be 0.33 and not 0.033.</span>
<span class="comment-copy">@mso yes, correct, I assumed the difference of .033 because of my frame rate of 30fps. I changed the difference cutoff to .04 now</span>
<span class="comment-copy">Excellent. You can initialize <code>last = l[0] - 1' instead of </code>None`</span>
<span class="comment-copy">@HaiVu Yes, you could, but this will break if the allowed difference is larger than 1.</span>
<span class="comment-copy">My bad, I meant, <code>last = l[0]</code>, then you can drop the <code>last is None</code> test</span>
