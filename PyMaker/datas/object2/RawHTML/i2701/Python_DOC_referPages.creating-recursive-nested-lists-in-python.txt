<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/533905/get-the-cartesian-product-of-a-series-of-lists">Get the cartesian product of a series of lists?</a>
<span class="question-originals-answer-count">
                    11 answers
                </span>
</li>
</ul>
</div>
<p>My initial list is like this in pyhton.</p>
<pre><code>list_1 = [ ['A', 'B', 'C'], [1, 2, 3], ['X', 'Y', 'Z'] ]
</code></pre>
<p>I need to convert it to one like this...</p>
<pre><code>    return = [
['A', 1, 'X'], ['A', 1, 'Y'], ['A', 1, 'Z'],
['A', 2, 'X'], ['A', 2, 'Y'], ['A', 2, 'Z'],
['A', 3, 'X'], ['A', 3, 'Y'], ['A', 3, 'Z'],
['B', 1, 'X'], ['B', 1, 'Y'], ['B', 1, 'Z']... ]
</code></pre>
<p>Problem is i don't know have many sub-lists in list_1.
i.e. list_1 might be like ...</p>
<pre><code>list_1 = [ ['A','B','C'], [1, 2, 3], ['X','Y','Z'], [6,7,8] ]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a></p>
<pre><code>import itertools

itertools.product(*list_1)
</code></pre>
<p>output (wrapped in <code>list</code>):</p>
<pre><code>[('A', 1, 'X'),
 ('A', 1, 'Y'),
 ('A', 1, 'Z'),
 ('A', 2, 'X'),
 ('A', 2, 'Y'),
 ('A', 2, 'Z'),
 ('A', 3, 'X'),
 ('A', 3, 'Y'),
 ('A', 3, 'Z'),
 ('B', 1, 'X'),
 ('B', 1, 'Y'),
 ('B', 1, 'Z'),
 ('B', 2, 'X'),
 ('B', 2, 'Y'),
 ('B', 2, 'Z'),
 ('B', 3, 'X'),
 ('B', 3, 'Y'),
 ('B', 3, 'Z'),
 ('C', 1, 'X'),
 ('C', 1, 'Y'),
 ('C', 1, 'Z'),
 ('C', 2, 'X'),
 ('C', 2, 'Y'),
 ('C', 2, 'Z'),
 ('C', 3, 'X'),
 ('C', 3, 'Y'),
 ('C', 3, 'Z')]
</code></pre>
<p>To get a list of lists</p>
<pre><code>list(map(list, itertools.product(*list_1)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another option without <code>itertools</code> :   </p>
<pre><code>[[i,j,k] for i in list_1[0] for j in list_1[1] for k in list_1[2]]
</code></pre>
<p>And if you insist on recursive as you said in your title:</p>
<pre><code>def product(myList):
    if not myList:
        return [[]]
    else:
        return [[i] + j for i in myList[0] for j in product(myList[1:])]
</code></pre>
<p>output:</p>
<pre><code>[['A', 1, 'X'],
 ['A', 1, 'Y'],
 ['A', 1, 'Z'],
 ['A', 2, 'X'],
 ['A', 2, 'Y'],
 ['A', 2, 'Z'],
 ['A', 3, 'X'],
 ['A', 3, 'Y'],
 ['A', 3, 'Z'],
 ['B', 1, 'X'],
 ['B', 1, 'Y'],
 ['B', 1, 'Z'],
 ['B', 2, 'X'],
 ['B', 2, 'Y'],
 ['B', 2, 'Z'],
 ['B', 3, 'X'],
 ['B', 3, 'Y'],
 ['B', 3, 'Z'],
 ['C', 1, 'X'],
 ['C', 1, 'Y'],
 ['C', 1, 'Z'],
 ['C', 2, 'X'],
 ['C', 2, 'Y'],
 ['C', 2, 'Z'],
 ['C', 3, 'X'],
 ['C', 3, 'Y'],
 ['C', 3, 'Z']]
</code></pre>
</div>
<span class="comment-copy">It would be helpful for the OP to know how to further convert each tuple element to a list to get <i>exactly</i> what he/she wants</span>
<span class="comment-copy">Would it? Or would it be more helpful to let OP try and figure it out themselves and then ask for more advise if they are struggling? But if you insist...</span>
<span class="comment-copy">Haha. It reminds me of one of my conversations with another SO very senior member to whom I gave the same response as yours and as a reply to which he/she said contradictory answer advising me to avoid just handing over some lines of codes without any explanation. It's a matter of personal taste afterall</span>
<span class="comment-copy">The OP wants <code>[i,j,k]</code> instead of <code>(i,j,k)</code>. Perhaps an edit would be helpful</span>
<span class="comment-copy">@Bazingaa oh you're right :) Thanks I edited my answer.</span>
