<div class="post-text" itemprop="text">
<p>How to remove 2 or 3 characters at the begining of the string followed by a dot and may or may not be followed by a space?</p>
<pre><code>i = 'mr.john'
i.replace("mr.","")
</code></pre>
<p>The above returns the name '<strong>john</strong>' correctly but not in all cases. For e.g.</p>
<pre><code>i = 'smr. john'
i.replace("mr.","")
's john'
</code></pre>
<p>Expected result was '<strong>john</strong>'</p>
</div>
<div class="post-text" itemprop="text">
<p>You want two or three characters at the start of the string followed by a dot and then maybe a space. As a regular expression this looks like <code>^\w{2,3}\. ?</code>.</p>
<p>Now you can use <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer"><code>re.sub</code></a> to replace this part with an empty string.</p>
<p><code>cleaned_name = re.sub(r'(^\w{2,3}\. ?)', r'', name)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>If you needed a more generic approach (<code>i</code> possibly having more names), you may use this code. You can define your own prefixes to remove:</p>
<pre><code>import re

prefixes = ['mr', 'smr']
regex = r'\b(?:' + '|'.join(prefixes) + r')\.\s*'
i = 'hi mr.john, smr. john, etc. Previous etc should not be removed'
i = re.sub(regex,'',i)
print(i)
</code></pre>
<p>You can test it live <a href="https://ideone.com/CRu1t7" rel="nofollow noreferrer">here</a></p>
<p>The created regex is this:</p>
<pre><code>\b   # Word boundary (to match 'mr' but not 'zmr' unless specified)
(?:group|of|prefixes|that|we|want|to|remove) # example
\.   # Literal '.'
\s*  # 0 or more spaces
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>str.find</code> with slicing.</p>
<p><strong>Ex:</strong></p>
<pre><code>i = 'smr. john'
print(i[i.find(".")+1:].strip())

i2 = 'mr.john'
print(i2[i2.find(".")+1:].strip())
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>john
john
</code></pre>
</div>
<span class="comment-copy">E.g. <code>i.replace("smr.","").replace("mr.","")</code>? There are a lot of other ways.</span>
<span class="comment-copy">@UnbearableLightness This does not work when there is no space. for e.g. 'mr.john'</span>
<span class="comment-copy">Yeah, use <code>re.sub(r'^[^.]+\.(?:\s+)?','',i)</code></span>
<span class="comment-copy">If I need one, two or three characters, then 1,3 and not 1,2,3</span>
<span class="comment-copy">you're missing <code>r</code> from the 2nd raw string, just sayin' ;)</span>
<span class="comment-copy">@AnttiHaapala Thanks. You mean here: <code>')\.\s*'</code>? It seems to work with just the starting <code>r</code></span>
<span class="comment-copy"><a href="https://docs.python.org/3/whatsnew/3.6.html#deprecated-python-behavior" rel="nofollow noreferrer"><i>A backslash-character pair that is not a valid escape sequence now generates a DeprecationWarning. Although this will eventually become a SyntaxError, that will not be for several Python releases. (Contributed by Emanuel Barry in bpo-27364.)</i></a> - <code>&lt;stdin&gt;:1: DeprecationWarning: invalid escape sequence \. ')\\.\\s*'</code>; Python 3.6, 3.7 when written in file or if interpreter started with <code>-Wall</code>.</span>
<span class="comment-copy">@AnttiHaapala, OK, so I wass missing the <code>-Wall</code>. Thanks, fixed</span>
<span class="comment-copy">(and since 3.7, these warnings are displayed all the time when written in scripts)</span>
