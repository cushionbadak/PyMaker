<div class="post-text" itemprop="text">
<p>I have a function in my class config to load a configuration text file. Before loading the data, the function checks the file to avoid malfunctions if the user has manually modified the file.</p>
<pre><code>def load_config(self):
    list_dat = []
    list_str = []
    with open(self.path, "r") as file:
        for conf in file:
            conf = conf.replace(": ", "|")
            conf = conf.replace("\n", "")
            try:
                conf1, conf2 = conf.split("|")
            except ValueError:
                self.new_config()
                break
            try:
                conf2 = ast.literal_eval(conf2)
            except (ValueError, SyntaxError):
                self.new_config()
                break
            if isinstance(conf2, tuple):
                self.new_config()
                break
            list_str.append(conf1)
            list_dat.append(conf2)

    for x in range(0, len(list_str)):
        if list_str[x] != self.conf_str[x]:
            self.change_config(list_str[x], self.conf_str[x], x, text=True)
            list_str[x] = self.conf_str[x]

    for y in range(0, len(list_dat)):
        if type(list_dat[y]) != type(self.list_default[y]):
            self.change_config(list_dat[y], self.list_default[y], y)
            list_dat[y] = self.list_default[y]

    if len(list_dat) == 0 and len(list_str) == 0:
        self.new_config()

    app = wx.App(False)
    width, height = wx.GetDisplaySize()

    if list_dat[1] != width:
        if list_dat[1] == self.list_default[1]:
            if list_dat[0] == False:
                self.change_config(list_dat[1], width, 1)
                self.change_config(list_dat[2], height, 2)
                list_dat[1] = width
                list_dat[2] = height
        else:
            self.change_config(list_dat[1], width, 1)
            self.change_config(list_dat[2], height, 2)
            list_dat[1] = width
            list_dat[2] = height
    if list_dat[2] != height:
        if list_dat[2] == self.list_default[2]:
            if list_dat[0] == False:
                self.change_config(list_dat[1], width, 1)
                self.change_config(list_dat[2], height, 2)
                list_dat[1] = width
                list_dat[2] = height
        else:
            self.change_config(list_dat[1], width, 1)
            self.change_config(list_dat[2], height, 2)
            list_dat[1] = width
            list_dat[2] = height
    if list_dat[4] &gt; 100:
        self.change_config(list_dat[4], 100, 4)
        list_dat[4] = 100
    else:
        if list_dat[4] &lt; 0:
            self.change_config(list_dat[4], 0, 4)
            list_dat[4] = 0
    if list_dat[5] &gt; 100:
        self.change_config(list_dat[5], 100, 5)
        list_dat[5] = 100
    else:
        if list_dat[5] &lt; 0:
            self.change_config(list_dat[5], 0, 5)
            list_dat[5] = 0
    if list_dat[6] &gt; 100:
        self.change_config(list_dat[6], 100, 6)
        list_dat[6] = 100
    else:
        if list_dat[6] &lt; 0:
            self.change_config(list_dat[6], 0, 6)
            list_dat[6] = 0
    if list_dat[7] &gt; 100:
        self.change_config(list_dat[7], 100, 7)
        list_dat[7] = 100
    else:
        if list_dat[7] &lt; 0:
            self.change_config(list_dat[7], 0, 7)
            list_dat[7] = 0
    if list_dat[8] &gt; 100:
        self.change_config(list_dat[8], 100, 8)
        list_dat[8] = 100
    else:
        if list_dat[8] &lt; 0:
            self.change_config(list_dat[8], 0, 8)
            list_dat[8] = 0

    self.main.id[20], self.main.id[9] = list_dat[0], list_dat[3]
    self.main.id[4], self.main.id[5] = list_dat[1], list_dat[2]
    self.main.id[11], self.main.id[13], self.main.id[15], self.main.id[17], self.main.id[19] = list_dat[4], list_dat[5], list_dat[6], list_dat[7], list_dat[8]


def change_config(self, old, new, n, text=False):
    with open(self.path, "r") as file:
        temp = file.readlines()
        if text:
            temp1, temp2 = temp[n].split(": ")
            temp1 = temp1.replace(str(old), str(new))
            temp[n] = temp1 + ": " + temp2
        else:
            temp[n] = temp[n].replace(str(old), str(new))
    with open(self.path, "w") as file:
        file.writelines(temp)
</code></pre>
<p>Instead, this is the configuration file:</p>
<pre><code>Display Set: True
Display Width: 1024
Display Height: 576
Fullscreen: False
Music Volume: 50
Sound Volume: 50
Voice Volume: 50
Ambient Volume: 50
Other Volume: 50
</code></pre>
<p>Now, I'm getting an error that I honestly can not understand what caused it. If I change the file in this way for example:</p>
<pre><code>Display Set: True
Display Width: gfgfdd
Display Height: 576
Fullscreen: False
Music Volume: 50
Sound Volume: 50
Voice Volume: 50
Ambient Volume: 50
Other Volume: 50
</code></pre>
<p>I get the error:</p>
<pre><code>if list_dat[4] &gt; 100:
IndexError: list index out of range
</code></pre>
<p>Same thing happens if I change <code>Display Height</code>, <code>Music Volume</code>, <code>Sound Volume</code>, <code>Voice Volume</code>, <code>Ambient Volume</code> and <code>Other Volume</code>.</p>
<p>After I get the error, I go to see the configuration file and see that it has been rightly corrected. That's why I can not understand why I keep getting these errors.</p>
<p>The block that keeps giving me the error is:</p>
<pre><code>if list_dat[1] != width:
    if list_dat[1] == self.list_default[1]:
        if list_dat[0] == False:
            self.change_config(list_dat[1], width, 1)
            self.change_config(list_dat[2], height, 2)
            list_dat[1] = width
            list_dat[2] = height
    else:
        self.change_config(list_dat[1], width, 1)
        self.change_config(list_dat[2], height, 2)
        list_dat[1] = width
        list_dat[2] = height
if list_dat[2] != height:
    if list_dat[2] == self.list_default[2]:
        if list_dat[0] == False:
            self.change_config(list_dat[1], width, 1)
            self.change_config(list_dat[2], height, 2)
            list_dat[1] = width
            list_dat[2] = height
    else:
        self.change_config(list_dat[1], width, 1)
        self.change_config(list_dat[2], height, 2)
        list_dat[1] = width
        list_dat[2] = height
if list_dat[4] &gt; 100:
    self.change_config(list_dat[4], 100, 4)
    list_dat[4] = 100
else:
    if list_dat[4] &lt; 0:
        self.change_config(list_dat[4], 0, 4)
        list_dat[4] = 0
if list_dat[5] &gt; 100:
    self.change_config(list_dat[5], 100, 5)
    list_dat[5] = 100
else:
    if list_dat[5] &lt; 0:
        self.change_config(list_dat[5], 0, 5)
        list_dat[5] = 0
if list_dat[6] &gt; 100:
    self.change_config(list_dat[6], 100, 6)
    list_dat[6] = 100
else:
    if list_dat[6] &lt; 0:
        self.change_config(list_dat[6], 0, 6)
        list_dat[6] = 0
if list_dat[7] &gt; 100:
    self.change_config(list_dat[7], 100, 7)
    list_dat[7] = 100
else:
    if list_dat[7] &lt; 0:
        self.change_config(list_dat[7], 0, 7)
        list_dat[7] = 0
if list_dat[8] &gt; 100:
    self.change_config(list_dat[8], 100, 8)
    list_dat[8] = 100
else:
    if list_dat[8] &lt; 0:
        self.change_config(list_dat[8], 0, 8)
        list_dat[8] = 0
</code></pre>
<p>Can you please help me?</p>
<p>EDIT:</p>
<p>I added a simplified class version, with only the functions needed for the error.</p>
<pre><code>import ast, os, wx
from pathlib import Path

class config_lib():

    def __init__(self):
        # IdDataDefaultConfig
        self.id1 = True  # SetDisplayDefault
        self.id2 = 1024  # DisplayWidthDefault
        self.id3 = 576  # DisplayHeightDefault
        self.id4 = 1024  # DisplayWidthUser
        self.id5 = 576  # DisplayHeightUser
        self.id6 = 0  # LocationDisplayX
        self.id7 = 50  # LocationDisplayY
        self.id8 = False  # FullscreenDefault
        self.id9 = False  # FullscreenUser
        self.id10 = 50  # MusicVolumeDefault
        self.id11 = 50  # MusicVolumeUser
        self.id12 = 50  # SoundVolumeDefault
        self.id13 = 50  # SoundVolumeUser
        self.id14 = 50  # VoiceVolumeDefault
        self.id15 = 50  # VoiceVolumeUser
        self.id16 = 50  # AmbientVolumeDefault
        self.id17 = 50  # AmbientVolumeUser
        self.id18 = 50  # OtherAudioVolumeDefault
        self.id19 = 50  # OtherAudioVolumeUser
        self.id20 = True  # SetDisplayUser

        self.conf_str = ["Display Set", "Display Width", "Display Height", "Fullscreen", "Music Volume", "Sound Volume", "Voice Volume", "Ambient Volume", "Other Volume"]
        self.list_default = [self.id1, self.id2, self.id3, self.id8, self.id10, self.id12, self.id14, self.id16, self.id18]

        self.path = os.path.join("dat.bw3")
        self.conf = Path(self.path)
        try:
            lc = self.conf.resolve()
        except FileNotFoundError:
            self.new_config()
        else:
            self.load_config()

    def new_config(self):
        list_dat = [[self.conf_str[0], self.id1], [self.conf_str[1], self.id2], [self.conf_str[2], self.id3], [self.conf_str[3], self.id8], [self.conf_str[4], self.id10], [self.conf_str[5], self.id12], [self.conf_str[6], self.id14], [self.conf_str[7], self.id16], [self.conf_str[8], self.id18]]
        with open(self.path, "wt") as file:
            for conf in list_dat:
                print(conf[0], conf[1], sep=': ', file=file)
        self.load_config()

    def load_config(self):
        list_dat = []
        list_str = []
        with open(self.path, "r") as file:
            for conf in file:
                conf = conf.replace(": ", "|")
                conf = conf.replace("\n", "")
                try:
                    conf1, conf2 = conf.split("|")
                except ValueError:
                    self.new_config()
                    break
                try:
                    conf2 = ast.literal_eval(conf2)
                except (ValueError, SyntaxError):
                    self.new_config()
                    break
                if isinstance(conf2, tuple):
                    self.new_config()
                    break
                list_str.append(conf1)
                list_dat.append(conf2)

        for x in range(0, len(list_str)):
            if list_str[x] != self.conf_str[x]:
                self.change_config(list_str[x], self.conf_str[x], x, text=True)
                list_str[x] = self.conf_str[x]

        for y in range(0, len(list_dat)):
            if type(list_dat[y]) != type(self.list_default[y]):
                self.change_config(list_dat[y], self.list_default[y], y)
                list_dat[y] = self.list_default[y]

        if len(list_dat) == 0 and len(list_str) == 0:
            self.new_config()

        app = wx.App(False)
        width, height = wx.GetDisplaySize()

        if list_dat[1] != width:
            if list_dat[1] == self.list_default[1]:
                if list_dat[0] == False:
                    self.change_config(list_dat[1], width, 1)
                    self.change_config(list_dat[2], height, 2)
                    list_dat[1] = width
                    list_dat[2] = height
            else:
                self.change_config(list_dat[1], width, 1)
                self.change_config(list_dat[2], height, 2)
                list_dat[1] = width
                list_dat[2] = height
        if list_dat[2] != height:
            if list_dat[2] == self.list_default[2]:
                if list_dat[0] == False:
                    self.change_config(list_dat[1], width, 1)
                    self.change_config(list_dat[2], height, 2)
                    list_dat[1] = width
                    list_dat[2] = height
            else:
                self.change_config(list_dat[1], width, 1)
                self.change_config(list_dat[2], height, 2)
                list_dat[1] = width
                list_dat[2] = height
        if list_dat[4] &gt; 100:
            self.change_config(list_dat[4], 100, 4)
            list_dat[4] = 100
        else:
            if list_dat[4] &lt; 0:
                self.change_config(list_dat[4], 0, 4)
                list_dat[4] = 0
        if list_dat[5] &gt; 100:
            self.change_config(list_dat[5], 100, 5)
            list_dat[5] = 100
        else:
            if list_dat[5] &lt; 0:
                self.change_config(list_dat[5], 0, 5)
                list_dat[5] = 0
        if list_dat[6] &gt; 100:
            self.change_config(list_dat[6], 100, 6)
            list_dat[6] = 100
        else:
            if list_dat[6] &lt; 0:
                self.change_config(list_dat[6], 0, 6)
                list_dat[6] = 0
        if list_dat[7] &gt; 100:
            self.change_config(list_dat[7], 100, 7)
            list_dat[7] = 100
        else:
            if list_dat[7] &lt; 0:
                self.change_config(list_dat[7], 0, 7)
                list_dat[7] = 0
        if list_dat[8] &gt; 100:
            self.change_config(list_dat[8], 100, 8)
            list_dat[8] = 100
        else:
            if list_dat[8] &lt; 0:
                self.change_config(list_dat[8], 0, 8)
                list_dat[8] = 0

        self.id20, self.id9 = list_dat[0], list_dat[3]
        self.id4, self.id5 = list_dat[1], list_dat[2]
        self.id11, self.id13, self.id15, self.id17, self.id19 = list_dat[4], list_dat[5], list_dat[6], list_dat[7], list_dat[8]

    def change_config(self, old, new, n, text=False):
        with open(self.path, "r") as file:
            temp = file.readlines()
            if text:
                temp1, temp2 = temp[n].split(": ")
                temp1 = temp1.replace(str(old), str(new))
                temp[n] = temp1 + ": " + temp2
            else:
                temp[n] = temp[n].replace(str(old), str(new))
        with open(self.path, "w") as file:
            file.writelines(temp)

conf = config_lib()
</code></pre>
<p>EDIT2:</p>
<p>In the <code>__init__</code> of the class, it checks whether the file is present or not. If it is not present, the <code>new_config()</code> function is called, which creates a new file with the default data, and then calls the <code>load_config()</code> function. If the file is present, the <code>load_config()</code> function is called directly.</p>
<p>The <code>load_config()</code> function must check the file data before loading it into the program.</p>
<p>First block of the <code>load_config()</code> function:</p>
<p>The first thing to do is to transform what is written in the file into something that the program can work on. The file is then readed, for each line replaced (":") with a useful symbol for later ("|") and the carriage return is deleted. Now we have to divide it in two, so that on one side there is the name of the data, while on the other side there is the data itself. This is done by dividing where the symbol previously ("|") has been inserted. This division is done in the <code>try</code>, so that if the file has some error inside, the file is overwritten by creating a new one with <code>new_config()</code>. The second thing to do is to transform the data (which is currently a string) into a valid data. This is done by <code>ast.literal_eval()</code>. Once again, everything is put into a <code>try</code>, for the same reason as before. Finally, it is checked that the data is single and not a tuple. The data name and the data are entered respectively in <code>list_dat</code> and <code>list_str</code>.</p>
<p>Second block of the <code>load_config()</code> function:</p>
<p>The first thing to do is to check, a default list of names, if the name of the data is correct, if it is wrong, it is corrected. Same for the data, but in that case it is checked if the type is the same as its default counterpart. Rarely (1 in 100 for example), I noticed that if the file is empty, no <code>Except</code> is raised from the <code>split()</code> block or the <code>ast.literal_eval()</code> block. So I added:</p>
<pre><code>if len(list_dat) == 0 and len(list_str) == 0:
            self.new_config()
</code></pre>
<p>To avoid this problem.</p>
<p>Third block of the <code>load_config()</code> function (This is the block that gives me the problem):</p>
<p>This checks whether the width and height of the screen are the same as that of the data. If they are not equal, it is checked that the data is the same as the default (1024, 576). If they are the same, it is finally checked that the default loading mode is false. This check is performed so that when the program screen is created, there are no problems whatsoever. If any of these checks fail (else), the width and height data are changed to the default data.</p>
<pre><code>if list_dat[1] != width:
    if list_dat[1] == self.list_default[1]:
        if list_dat[0] == False:
            self.change_config(list_dat[1], width, 1)
            self.change_config(list_dat[2], height, 2)
            list_dat[1] = width
            list_dat[2] = height
    else:
        self.change_config(list_dat[1], width, 1)
        self.change_config(list_dat[2], height, 2)
        list_dat[1] = width
        list_dat[2] = height
if list_dat[2] != height:
    if list_dat[2] == self.list_default[2]:
        if list_dat[0] == False:
            self.change_config(list_dat[1], width, 1)
            self.change_config(list_dat[2], height, 2)
            list_dat[1] = width
            list_dat[2] = height
    else:
        self.change_config(list_dat[1], width, 1)
        self.change_config(list_dat[2], height, 2)
        list_dat[1] = width
        list_dat[2] = height
</code></pre>
<p>Similarly, the same volume control is made, with the only difference being that the number is not more than 100 (maximum volume) or less than 0 (minimum volume).</p>
<pre><code>if list_dat[4] &gt; 100:
    self.change_config(list_dat[4], 100, 4)
    list_dat[4] = 100
else:
    if list_dat[4] &lt; 0:
        self.change_config(list_dat[4], 0, 4)
        list_dat[4] = 0
if list_dat[5] &gt; 100:
    self.change_config(list_dat[5], 100, 5)
    list_dat[5] = 100
else:
    if list_dat[5] &lt; 0:
        self.change_config(list_dat[5], 0, 5)
        list_dat[5] = 0
if list_dat[6] &gt; 100:
    self.change_config(list_dat[6], 100, 6)
    list_dat[6] = 100
else:
    if list_dat[6] &lt; 0:
        self.change_config(list_dat[6], 0, 6)
        list_dat[6] = 0
if list_dat[7] &gt; 100:
    self.change_config(list_dat[7], 100, 7)
    list_dat[7] = 100
else:
    if list_dat[7] &lt; 0:
        self.change_config(list_dat[7], 0, 7)
        list_dat[7] = 0
if list_dat[8] &gt; 100:
    self.change_config(list_dat[8], 100, 8)
    list_dat[8] = 100
else:
    if list_dat[8] &lt; 0:
        self.change_config(list_dat[8], 0, 8)
        list_dat[8] = 0
</code></pre>
<p>Fourth block of the <code>load_config()</code> function:</p>
<p>The controlled data are assigned to their variables, to be used by the program.</p>
<p>EDIT3:</p>
<p>I have unfortunately forgotten to say something previously. I am aware that exceptions are raised on <code>ast.literal_eval()</code>, which is why I put it in <code>try</code>. When this happens, the <code>new_config()</code> function is called and the cycle should start over. So the lists return empty and are filled again by the check. At least this in theory. Instead, while the file is created as new as it should (with default data), the rest of the function goes to pieces the second time it is executed. Also because, again, the error is caused only by the data I put. For others (Fullscreen etc.) that have a Boolean value and have no control in the third block, the problem does not occur.</p>
</div>
<div class="post-text" itemprop="text">
<p>After simplifying your script to something like this, </p>
<pre><code>import ast
with open(self.path, "r") as file:
    for conf in file:
        conf = conf.replace(": ", "|")
        conf = conf.replace("\n", "")
        conf1, conf2 = conf.split("|")
        conf2 = ast.literal_eval(conf2)
        print(conf2)
</code></pre>
<p>It's clear that ast.literal_eval() method throws ValueError exception:</p>
<pre><code>Traceback (most recent call last):
  File "/usr/local/Cellar/python3/3.6.3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/IPython/core/interactiveshell.py", line 2910, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "&lt;ipython-input-214-f993e6585bcd&gt;", line 7, in &lt;module&gt;
    conf2 = ast.literal_eval(conf2)
  File "/usr/local/Cellar/python3/3.6.3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/ast.py", line 85, in literal_eval
    return _convert(node_or_string)
  File "/usr/local/Cellar/python3/3.6.3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/ast.py", line 84, in _convert
    raise ValueError('malformed node or string: ' + repr(node))
ValueError: malformed node or string: &lt;_ast.Name object at 0x111f50f28&gt;
</code></pre>
<p>And since you handling it here:</p>
<pre><code>    try:
        conf2 = ast.literal_eval(conf2)
    except (ValueError, SyntaxError):
        self.new_config()
        break
</code></pre>
<p>You getting less config entries than expected, thus <code>InvalidIndex</code> error.</p>
<p>Now <code>ast.literal_eval()</code> throws exception since your input can't be evaluated to any known python type or method.</p>
<p>Please check <a href="https://docs.python.org/3/library/ast.html" rel="nofollow noreferrer">the docs</a> to learn how to use it the right way</p>
</div>
<span class="comment-copy">could you try to recreate this error with a <a href="https://stackoverflow.com/help/mcve">minimal, complete, and verifiable example</a> currently its impossible to even run your code since there are a lot of functions missing</span>
<span class="comment-copy">I modified the question</span>
<span class="comment-copy">@BlackFenix06 you should consider what said by AntiMatterDynamite and mention traceback and most related code work and rest of codelines you can keep it as reference. It's hard for other to understand what you are trying to convey with such huge amount of code work.</span>
<span class="comment-copy">@Gahan I do not understand. I entered the error, the reason why it happens and what is causing it. I also put a simplified version that you can use to test. I do not know what else I have to enter sincerely.</span>
<span class="comment-copy">@BlackFenix06 if you consider your question as a third person you are asking to debug tons of lines of code to other user who don't know what it should do/what it's doing and what's the logic behind some of lines. and it makes very hard to understand the problem at first and it will result that you might not get the desire answer for your question</span>
<span class="comment-copy">I modified the question to answer you, EDIT3</span>
<span class="comment-copy">I read what <code>ast.literal_eval()</code> does, and since I'm passing a string, I do not understand why the error is caused =/</span>
<span class="comment-copy">@BlackFenix06 The sting "gfgfdd" you passed can't be evaluated to any known python type, that's why you getting the exception</span>
<span class="comment-copy">@BlackFenix06 Regarding to your EDIT3. The code itself it problematic here, please note that in case of exception you recursively calling <code>load_config</code> method from <code>load_config</code> method and so on, which I guess not what you intentioned to to :)</span>
<span class="comment-copy">Good to know =)</span>
