<div class="post-text" itemprop="text">
<p>I have a bash script that returns the admin email for a domain, like the following.</p>
<pre><code>whois -h $(whois "stackoverflow.com" | grep 'Registrar WHOIS Server:' | cut -f2- -d:) "stackoverflow.com" | grep 'Admin Email:' | cut -f2- -d:
</code></pre>
<p>I want to run this in a python file. I believe I need to use a subprocess but can't seem to get it working with the pipes and flags. Any help?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, you can use subprocess with pipe.
i will ilustrate an exemple: </p>
<pre><code>ps = subprocess.Popen(('whois', 'stackoverflow.com'), stdout=subprocess.PIPE)
output = subprocess.check_output(('grep', 'Registrar WHOIS'), stdin=ps.stdout)
ps.wait()
</code></pre>
<p>You can ajust as your's need</p>
</div>
<div class="post-text" itemprop="text">
<p>The easiest solution is to write the commands into a script file and execute that file.</p>
<p>If you don't want that, you can execute any command with</p>
<pre><code>bash -c 'command'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is covered in the <a href="https://docs.python.org/3/library/subprocess.html#replacing-older-functions-with-the-subprocess-module" rel="nofollow noreferrer">Replacing Older Functions with the <code>subprocess</code> Module</a> section of the docs.</p>
<p>The example there is this bash pipeline:</p>
<pre><code>output=`dmesg | grep hda`
</code></pre>
<p>rewritten for <code>subprocess</code> as;</p>
<pre><code>p1 = Popen(["dmesg"], stdout=PIPE)
p2 = Popen(["grep", "hda"], stdin=p1.stdout, stdout=PIPE)
p1.stdout.close()  # Allow p1 to receive a SIGPIPE if p2 exits.
output = p2.communicate()[0]
</code></pre>
<p>Note that in many cases, you don't need to handle all of the same edge cases that the shell handles in exactly the same way. But if you don't know what you need, it's better to be fully general like this.</p>
<p>Your <code>$()</code> does the same thing as the backticks in that example, your pipes are the same as the example's pipes, and your arguments aren't anything special.</p>
<p>So:</p>
<pre><code>whois = Popen(['whois', 'stackoverflow.com'], stdout=PIPE)
grep = Popen(['grep', 'Registrar WHOIS Server:'], stdin=whois.stdout, stdout=PIPE)
whois.stdout.close()
cut = Popen(['cut', '-f2-', '-d:'], stdin=grep.stdout, stdout=PIPE)
grep.stdout.close()
inneroutput, _ = cut.communicate()
whois = Popen(['whois', '-h', inneroutput, 'stackoverflow.com'], stdout=PIPE)
grep = Popen(['grep', 'Admin Email:', stdin=whois.stdout, stdout=PIPE)
whois.stdout.close()
cut = Popen(['cut', '-f2-', '-d:'], stdin=grep.stdout)
grep.stdout.close()
cut.communicate()
</code></pre>
<p>If this seems like a mess, consider that:</p>
<ul>
<li>Your original shell command is a mess.</li>
<li>If you actually know exactly what you're expecting the pipeline to do, you can skip a lot of it.</li>
<li>All of the stuff you're doing here could just be done directly in Python without the need for this whole mess.</li>
<li>You may be happier using a third-party library like <a href="https://pypi.org/project/plumbum/" rel="nofollow noreferrer"><code>plumbum</code></a>.</li>
</ul>
<hr/>
<p>How could you write the whole thing in Python without all this piping? For example, instead of using <code>grep</code>, you could use Python's <code>re</code> module. Or, since you're not even using a regular expression at all, just a simple <code>in</code> check. And likewise for <code>cut</code>:</p>
<pre><code>whois = subprocess.run(['whois', 'stackoverflow.com'], 
                       check=True, stdout=PIPE, encoding='utf-8').output
for line in whois.splitlines():
    if 'Registrar WHOIS Server:' in line:
        registrar = line.split(':', 1)[1]
        break
whois = subprocess.run(['whois', '-h', registrar, 'stackoverflow.com'],
                       check=True, stdout=PIPE, encoding='utf-8').output
for line in inner.splitlines():
    if 'Admin Email:' in line:
        admin = line.split(':', 1)[1]
        break
</code></pre>
</div>
<span class="comment-copy">Have you read the <a href="https://docs.python.org/3/library/subprocess.html#replacing-older-functions-with-the-subprocess-module" rel="nofollow noreferrer">Replacing Older Functions with the <code>subprocess</code> Module</a> tutorial in the <code>subprocess</code> docs? If so, what part are you stuck on?</span>
<span class="comment-copy">Do you need the wait there?</span>
<span class="comment-copy">@MadPhysicist Unless there's an error, <code>grep</code> won't exit until it's exhausted stdin, <code>whois</code> won't hang around doing anything after closing stdout, and nobody's going to block on any pipes here, which means you don't actually need it. Still not a bad idea. Although maybe <code>ps.wait(timeout=0)</code> to explicitly raise an exception if it isn't closed.</span>
<span class="comment-copy">Thanks! Yea I realize my command is rough to begin with... my apologies.  For the last example, I'm getting PIPE and output are not defined.</span>
<span class="comment-copy">@EvanHessler For brevity, I wrote the code assuming <code>from subprocess import PIPE</code> (and maybe some other stuff). But itâ€™s probably better to use <code>subprocess.PIPE</code> explicitly. At any rate, if you read the linked docs, you should be able to understand this code and debug it yourself.</span>
