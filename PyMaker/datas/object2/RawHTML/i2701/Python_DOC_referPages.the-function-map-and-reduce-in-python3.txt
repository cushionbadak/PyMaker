<div class="post-text" itemprop="text">
<p>The return value of the <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code> function</a> in Python 3 is an <em>Iterator</em>.</p>
<p>Why can the <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>reduce</code> function</a> use the <code>map</code> result, when it needs an <em>Iterable</em>?</p>
<pre><code>#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from functools import reduce
def fn(x, y):
  return x * 10 + y
def char2num(s):
   digits = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}
   return digits[s]
reduce(fn, map(char2num, '13579'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>reduce</code> function can consume the iterator returned by <code>map</code> because an iterator is an iterable object. All iterators have an <code>__iter__</code> method that returns the iterator itself. That's all you need to be iterable (an <code>__iter__</code> method that returns an iterator, though you can instead get by with a <code>__getitem__</code> method in some cases).</p>
<p>That said, a few people will be careless of their terminology and use the term <em>iterable</em> when an <em>iterator</em> won't do (perhaps because they need to iterate on the same input several times). There's unfortunately not a single precise name for that subset of iterables (though <em>sequence</em> is often appropriate).</p>
<p>The Python documentation is usually pretty good about this though. If it says a function expects an iterable, and iterator should always be acceptable. If a function or method needs to iterate over the input multiple times (as for instance, <code>str.join</code> does), it will build its own temporary sequence internally if the input isn't already of an acceptable type.</p>
</div>
<span class="comment-copy">You can pass the return value of <code>map</code> to <code>reduce</code> because an iterator is an iterable. Iterable just means "you can call <code>iter</code> on it". If you call <code>iter</code> on an iterator, you'll get the same iterator back again. Please include your example code <i>as text</i>, not as an image. It's much easier to view and interact with text (for instance, I can copy and past it into my own interpreter).</span>
<span class="comment-copy">You may be interested in the answers to this highly voted question on the distinctions between iterators and iterables: <a href="https://stackoverflow.com/questions/9884132/what-exactly-are-iterator-iterable-and-iteration" title="what exactly are iterator iterable and iteration">stackoverflow.com/questions/9884132/…</a> I personally prefer my answer to this somewhat worse and now closed question (but of course I'm biased): <a href="https://stackoverflow.com/questions/40323783/methods-that-take-iterators-instead-of-iterables" title="methods that take iterators instead of iterables">stackoverflow.com/questions/40323783/…</a></span>
