<div class="post-text" itemprop="text">
<p>I have a dictionary as follows:</p>
<pre><code>s_dict = {'s' : 'ATGCGTGACGTGA'}
</code></pre>
<p>I want to change the string stored as the value of the dictionary for key <code>'s'</code> at positions 4, 6, 7 and 10 to h, k, p and r. </p>
<pre><code>pos_change = {'s' : ['4_h', '6_k', '7_p', '10_r']}
</code></pre>
<p>The way I can think about it is in a loop: </p>
<pre><code>for key in s_dict:
    for position in pos_change[key]:
        pos = int(position.split("_")[0])
        char = position.split("_")[1]
        l = list(s_dict[key])
        l[pos]= char
        s_dict[key] = "".join(l)
</code></pre>
<p>Output: </p>
<pre><code>s_dict = {'s': 'ATGChTkpCGrGA'}
</code></pre>
<p>This works fine but my actual <code>s_dict</code> file is about 1.5 Gb. Is there a faster way of replacing a list of characters at specific indices in a string or list?</p>
<p>Thanks! </p>
</div>
<div class="post-text" itemprop="text">
<p>Here is my take on your interesting problem:</p>
<pre><code>s_dict = {'s' : 'ATGCGTGACGTGA'}    
pos_change = {'s' : ['4_h', '6_k', '7_p', '10_r']}
</code></pre>
<hr/>
<pre><code># 1rst change `pos_change` into something more easily usable
pos_change = {k: dict(x.split('_') for x in v) for k, v in pos_change.items()}
print(pos_change)  # {'s': {'4': 'h', '6': 'k', '7': 'p', '10': 'r'}}
</code></pre>
<hr/>
<pre><code># and then... 
for k, v in pos_change.items():
  temp = set(map(int, v))
  s_dict[k] = ''.join([x if i not in temp else pos_change[k][str(i)] for i, x in enumerate(s_dict[k])])

print(s_dict)  # {'s': 'ATGChTkpCGrGA'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>as an option of solution you can use <code>s_dict['s'] = '%s%s%s' % (s_dict['s'][:pos], char, s_dict['s'][pos+1:])</code> instead of do list and join</p>
<pre><code>In [1]: s_dict = {'s' : 'ATGCGTGACGTGA' * 10}
   ...: pos_change = {'s' : ['4_h', '6_k', '7_p', '10_r']}
   ...: 
   ...: def list_join():
   ...:     for key in s_dict:
   ...:         for position in pos_change[key]:
   ...:             pos = int(position.split("_")[0])
   ...:             char = position.split("_")[1]
   ...:             l = list(s_dict[key])
   ...:             l[pos]= char
   ...:             s_dict[key] = "".join(l)
   ...: 
   ...: def by_str():
   ...:     for key in s_dict:
   ...:         for position in pos_change[key]:
   ...:             pos = int(position.split("_")[0])
   ...:             char = position.split("_")[1]
   ...:             values = s_dict['s'][:pos], char, s_dict['s'][pos+1:]
   ...:             s_dict['s'] = '%s%s%s' % values
   ...:             

In [2]: %timeit list_join()
11.7 µs ± 191 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)

In [3]: %timeit by_str()
4.29 µs ± 46.7 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)
</code></pre>
</div>
<span class="comment-copy">What are you doing to that DNA? Methylation?</span>
<span class="comment-copy"><code>pos_change</code> would be better as a dict of dicts (<code>pos_change = {'s' : {4: 'h', 6: 'k', 7: 'p', 10: 'r'}}</code>)</span>
<span class="comment-copy">@Chris_Rands Oh, no I just want to replace SNPs with IUPAC characters. I just made an example for the sake of the python question.</span>
<span class="comment-copy"><code>s_dict['s'] = '%s%s%s' % (s_dict['s'][:pos], char, s_dict['s'][pos+1:])</code> instead of do list and join</span>
<span class="comment-copy">I'd use <a href="https://docs.python.org/3/library/functions.html#func-bytearray" rel="nofollow noreferrer"><b><code>bytearray</code></b></a> as it is mutable</span>
