<div class="post-text" itemprop="text">
<p>I have a dict-</p>
<pre><code>a = {'b': [1,2,3], 'c':[4,5,6]}
</code></pre>
<p>I want to use list comprehension only to achieve this output-</p>
<pre><code>[['c', 4], ['c', 5], ['c', 6], ['b', 1], ['b', 2], ['b', 3]]
</code></pre>
<p>A simple for loop gets it done with -</p>
<pre><code>x = []
for k, v in a.iteritems():
    for i in v:
        x.append([k, i])
</code></pre>
<p>Tried to convert it to list comprehension, I did this-</p>
<pre><code>[[k,i] for i in v for k, v in a.items()]
</code></pre>
<p>But weirdly for me, I got an output </p>
<pre><code>[['c', 1], ['b', 1], ['c', 2], ['b', 2], ['c', 3], ['b', 3]]
</code></pre>
<p>What should be the right list comprehension and why is my list comprehension not working?</p>
</div>
<div class="post-text" itemprop="text">
<p>You were almost there. The main problem you were facing is due to the order of the for loop.</p>
<p><strong>The order of for loop inside the list comprehension is based on the order in which they appear in traditional loop approach. Outer most loop comes first, and then the inner loops subsequently.</strong></p>
<pre><code>a = {'b': [1,2,3], 'c':[4,5,6]}
x = []
for k, v in a.items():
    for i in v:
        x.append([k, i])

print(x)

print([[k,i] for i in v for k, v in a.items()])
print([[k,i] for k, v in a.items() for i in v])
</code></pre>
<p><strong>OUTPUT</strong></p>
<pre><code>[['b', 1], ['b', 2], ['b', 3], ['c', 4], ['c', 5], ['c', 6]]
[['b', 4], ['c', 4], ['b', 5], ['c', 5], ['b', 6], ['c', 6]]
[['b', 1], ['b', 2], ['b', 3], ['c', 4], ['c', 5], ['c', 6]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>b = [[i, j] for i in a for j in a[i]]
</code></pre>
<p>for nested <code>for</code> loops in list comprehension the first loop will be the one whose variable you will be using in the second one, like here for example <code>i</code> is used in the second loop, nested for loops in list comprehensions are hard to read therefore you should better avoid it.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should get <code>k,v</code> first, then iterate over v : </p>
<pre><code>a = {'b': [1,2,3], 'c':[4,5,6]}
print([[k,i] for k, v in a.items() for i in v])
</code></pre>
<p>output : </p>
<pre><code>[['c', 4], ['c', 5], ['c', 6], ['b', 1], ['b', 2], ['b', 3]]
</code></pre>
<p>Note : </p>
<p>In <code>[[k,i] for i in v for k, v in a.items()]</code>, <code>v</code> is not defined when you try to iterate over it. </p>
<p>@Skam has a great example for this : <a href="https://stackoverflow.com/a/36734643/9057497">how to interpret double for loop comprehension</a></p>
<pre><code># Without list comprehension
list_of_words = []
for sentence in text:
    for word in sentence:
       list_of_words.append(word)
return list_of_words
</code></pre>
<p>is equivalent to : </p>
<pre><code>[word for sentence in text for word in sentence]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can try to use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer">itertools.product</a></p>
<pre><code>from itertools import product, chain
a = {'b': [1,2,3], 'c':[4,5,6]}
list(chain(*[product(k, v) for k, v in a.items()]))
</code></pre>
<p>result is</p>
<pre><code>[('b', 1), ('b', 2), ('b', 3), ('c', 4), ('c', 5), ('c', 6)]
</code></pre>
<p>if you strongly need the list of lists, you can do</p>
<pre><code>list(chain(*[[list(item) for item in product(k, v)] for k, v in a.items()]))
</code></pre>
<p>the output is:</p>
<pre><code>[['b', 1], ['b', 2], ['b', 3], ['c', 4], ['c', 5], ['c', 6]]
</code></pre>
<p>and some tests of the perfomance</p>
<pre><code>In [6]: %timeit [[i, j] for i in a for j in a[i]]
618 ns ± 5.34 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)

In [7]: %timeit list(chain(*[product(k, v) for k, v in a.items()]))
1.26 µs ± 19.4 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)

In [8]: %timeit list(chain(*[[list(item) for item in product(k, v)] for k, v in a.items()]))
2.61 µs ± 49.9 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)
</code></pre>
</div>
<span class="comment-copy">Why on right of <code>a.items()</code> and not on the left in the list comprehension?</span>
<span class="comment-copy">sorry, didn't get your question?</span>
<span class="comment-copy">How do we decide order of the for loop in list comprehension?</span>
<span class="comment-copy">for nested <code>for</code> loops in list comprehension the first loop will be the one whose variable you will be using in the second one, like here for example <code>i</code> is used in the second loop, nested for loops in list comprehensions are hard to read therefore you should better avoid it.</span>
<span class="comment-copy">Thanks, upvoted your answer, a complete answer would have been this explanation in it as well</span>
<span class="comment-copy">Why on right of <code>a.items()</code> and not on the left in the list comprehension?</span>
<span class="comment-copy">It has to do with <a href="https://stackoverflow.com/a/36734643/9057497">How to interpret double for loop comprehension</a>. In your implementation, v is not yet defined when you try to iterate over it.</span>
<span class="comment-copy">It'll be helpful if you add this in your answer as well as that'll completely answer my question</span>
<span class="comment-copy">Thanks, upvoted your answer, argo added a complete answer before you did so accepted his answer</span>
<span class="comment-copy">The output format is different with your code</span>
<span class="comment-copy">i edited the answer for generate list of lists</span>
