<div class="post-text" itemprop="text">
<p>I am using xml to describe bounding boxes and intend to filter out some elements of the xml files. A typical xml might look like:</p>
<pre><code>&lt;annotation&gt;
    &lt;folder&gt;original2&lt;/folder&gt;
    &lt;filename&gt;beach146.jpg&lt;/filename&gt;
    &lt;path&gt;/home/train/original/beach146.jpg&lt;/path&gt;
    &lt;source&gt;
        &lt;database&gt;Unknown&lt;/database&gt;
    &lt;/source&gt;
    &lt;size&gt;
        &lt;width&gt;800&lt;/width&gt;
        &lt;height&gt;533&lt;/height&gt;
        &lt;depth&gt;3&lt;/depth&gt;
    &lt;/size&gt;
    &lt;segmented&gt;0&lt;/segmented&gt;
    &lt;object&gt;
        &lt;name&gt;person&lt;/name&gt;
        &lt;pose&gt;Unspecified&lt;/pose&gt;
        &lt;truncated&gt;0&lt;/truncated&gt;
        &lt;difficult&gt;0&lt;/difficult&gt;
        &lt;bndbox&gt;
            &lt;xmin&gt;314&lt;/xmin&gt;
            &lt;ymin&gt;315&lt;/ymin&gt;
            &lt;xmax&gt;559&lt;/xmax&gt;
            &lt;ymax&gt;400&lt;/ymax&gt;
        &lt;/bndbox&gt;
    &lt;/object&gt;
    &lt;object&gt;
        &lt;name&gt;boat&lt;/name&gt;
        &lt;pose&gt;Unspecified&lt;/pose&gt;
        &lt;truncated&gt;0&lt;/truncated&gt;
        &lt;difficult&gt;0&lt;/difficult&gt;
        &lt;bndbox&gt;
            &lt;xmin&gt;580&lt;/xmin&gt;
            &lt;ymin&gt;193&lt;/ymin&gt;
            &lt;xmax&gt;602&lt;/xmax&gt;
            &lt;ymax&gt;205&lt;/ymax&gt;
        &lt;/bndbox&gt;
    &lt;/object&gt;
&lt;/annotation&gt;
</code></pre>
<p>I am applying some checks on the bbox coordinates and if necessary remove the <code>object</code> containing the corresponding bbox.</p>
<p>I was accessing the coordinates using something like:</p>
<pre><code>xmin = int(obj.find('bndbox').find('xmax').text)
</code></pre>
<p>but it seems awkward and ugly so I switched to:</p>
<pre><code>xmin = int(obj[4][0].text)
</code></pre>
<p>which seems a little better. <code>obj</code> came from <code>objs = tree.findall('object')</code> so it could be even optimized by applying the same indices to the the root, like:</p>
<pre><code>print(root[7][4][0].tag, root[7][4][0].text)
</code></pre>
<blockquote>
<p>xmin 580</p>
</blockquote>
<p>My question is whether the indexing system is consistent and will work as expected in every xml file. Meaning that it will return the elements in the order they where written in file for example. My xml files is expected to have the same order of elements. In other case a check on <code>obj[4][0].tag</code> should be applied to verify I am working on the expected element.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think the indexing system is consistent. But accessing elements by index can be confusing and easy to get wrong.</p>
<p>My suggestion is to use <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.findtext" rel="nofollow noreferrer"><code>findtext()</code></a>.</p>
<pre><code>from xml.etree import ElementTree as ET

tree = ET.parse("annotation.xml")

for obj in tree.findall("object"):
    xmin = obj.findtext('bndbox/xmin')
    ...
</code></pre>
</div>
<span class="comment-copy">It would be strange (and worrying) if the indexing wasn't consistent. An <code>Element</code> can be described as a cross between a list and a dictionary (see <a href="http://effbot.org/zone/element.htm" rel="nofollow noreferrer">effbot.org/zone/element.htm</a>). Children (subelements) of an element can be accessed via ordinary list (sequence) operations, including the use of <code>element[i]</code> to get the subelement at index <code>i</code>.</span>
