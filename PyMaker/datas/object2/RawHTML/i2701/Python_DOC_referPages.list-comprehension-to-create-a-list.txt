<div class="post-text" itemprop="text">
<p>Can the following be coded more compactly using list comprehension?</p>
<pre><code>labels=[]
for i in range(10):
    labels=labels+[i]+9*['']
labels=labels+[10]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is the code you are looking for    </p>
<pre><code>labels=[j for i in range(10) for j in [i]+9*['']]+[10]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's one way to break this down.</p>
<p>If you look at the main body of your loop, you can restructure it as generating a sublist for each number, and then combining the sublists together.</p>
<pre><code>sublists = []
for i in range(10):
  sublists.append([i] + 9 * [''])

labels = []
for sublist in sublists:
  labels = labels + sublist

labels = labels + [10]
</code></pre>
<p>The first part of this takes a list of numbers, calls the same function on each of them, and produces a list of results.  This operation is <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer">map</a> (and indeed has this name in many languages).  The second part takes a list of lists and flattens them into one big list; many languages have a "concat" or "flatten" operation, but in Python <a href="https://stackoverflow.com/questions/952914/making-a-flat-list-out-of-list-of-lists-in-python">it can be a little clunky</a>.</p>
<pre><code>from itertools import chain
sublists = map(range(10), lambda i: [i] + 9 * [''])
labels = list(chain.from_iterable(sublists))
labels = labels + [10]
</code></pre>
<p>The <code>map()</code> call in particular easily transforms into a list comprehension (or a generator comprehension)</p>
<pre><code>from itertools import chain
sublists = [[i] + 9 * [''] for i in range(10)]
labels = list(chain.from_iterable(sublists))
labels = labels + [10]
</code></pre>
<p>and so if you want to turn this into a one-liner you can have</p>
<pre><code>from itertools import chain
labels = list(chain.from_iterable([i] + 9 * [''] for i in range(10))) + [10]
</code></pre>
<hr/>
<p>For something completely different, you could potentially use a generator function to make it clearer what you're doing.  Really, for each item in the input, you're emitting the item, and if it's not the last item, emitting nine lists containing empty strings.  You can then take the sequence produced by the generator function and convert it to a list.</p>
<pre><code>def emit_with_blanks(iter):
  l = list(iter)
  for i, n in enumerate(l):
    yield [i]
    if i == len(l) - 1:
      break
    for _ in range(9):
      yield ['']

labels = list(emit_with_blanks(range(10))
</code></pre>
<p>This is definitely longer and slower (in a way that shouldn't matter in practice) but it could be easier to reason about what it's doing than the one-liner, especially if you come back to it six months later and are trying to remember what exactly the code does.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is convoluted, but if you want a list comprehension, this is one way to do it:</p>
<pre><code>[i for s in [[x] + 9*[''] if x &lt; 10 else [x] for x in range(11)] for i in s]
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; labels = [i for s in [[x] + 9*[''] if x &lt; 10 else [x] for x in range(11)] for i in s]
&gt;&gt;&gt; labels
[0, '', '', '', '', '', '', '', '', '', 1, '', '', '', '', '', '', '', '', '', 2, '', '', '', '', '', '', '', '', '', 3, '', '', '', '', '', '', '', '', '', 4, '', '', '', '', '', '', '', '', '', 5, '', '', '', '', '', '', '', '', '', 6, '', '', '', '', '', '', '', '', '', 7, '', '', '', '', '', '', '', '', '', 8, '', '', '', '', '', '', '', '', '', 9, '', '', '', '', '', '', '', '', '', 10]
</code></pre>
<p>By way of comparison:</p>
<pre><code>&gt;&gt;&gt; labels=[]
&gt;&gt;&gt; for i in range(10):
...     labels=labels+[i]+9*['']
... 
&gt;&gt;&gt; labels=labels+[10]
&gt;&gt;&gt; labels
[0, '', '', '', '', '', '', '', '', '', 1, '', '', '', '', '', '', '', '', '', 2, '', '', '', '', '', '', '', '', '', 3, '', '', '', '', '', '', '', '', '', 4, '', '', '', '', '', '', '', '', '', 5, '', '', '', '', '', '', '', '', '', 6, '', '', '', '', '', '', '', '', '', 7, '', '', '', '', '', '', '', '', '', 8, '', '', '', '', '', '', '', '', '', 9, '', '', '', '', '', '', '', '', '', 10]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This reads to me like "create an array 101 elements in length, where each item is an empty string if its index is a non-integer multiple of 10, otherwise it's the index-divided-by-10". As a list comprehension:</p>
<pre><code>&gt;&gt;&gt; ['' if i % 10 else i / 10 for i in xrange(101)]
[0, '', '', '', '', '', '', '', '', '', 1, '', '', '', '', '', '', '', '', '', 2, '', '', '', '', '', '', '', '', '', 3, '', '', '', '', '', '', '', '', '', 4, '', '', '', '', '', '', '', '', '', 5, '', '', '', '', '', '', '', '', '', 6, '', '', '', '', '', '', '', '', '', 7, '', '', '', '', '', '', '', '', '', 8, '', '', '', '', '', '', '', '', '', 9, '', '', '', '', '', '', '', '', '', 10]
</code></pre>
<p>That said, if the list comprehension isn't an absolute requirement, I find something like this quite a bit easier to grok:</p>
<pre><code>&gt;&gt;&gt; y = []
&gt;&gt;&gt; for i in xrange(10):
...     y.append(i)
...     y.extend([''] * 9)
...
&gt;&gt;&gt; y.append(10)
</code></pre>
<p>(which is almost identical to your original approach)</p>
</div>
