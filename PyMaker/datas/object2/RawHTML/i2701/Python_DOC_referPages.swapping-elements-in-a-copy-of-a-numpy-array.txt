<div class="post-text" itemprop="text">
<p>I have a list/array of numpy arrays, representing objects split into subgroups.</p>
<p>I would like to create a copy of this array where I can swap elements within the subgroups and leave the original groupings unchanged.</p>
<p>The function I've written to do this is:</p>
<pre><code>def group_swap(groups):
# Chooses two random groups and swaps two random elements from each 
group.
    gr = np.copy(groups)
    g1 = np.random.randint(len(gr))
    g2 = np.random.randint(len(gr))
    if g1 != g2:
        e1 = np.random.randint(len(gr[g1]))
        e2 = np.random.randint(len(gr[g2]))
        gr[g1][e1] ,gr[g2][e2] = gr[g2][e2].copy(),gr[g1][e1].copy()
        return(gr)
    else:
        return(groups)
</code></pre>
<p>Based on this <a href="https://stackoverflow.com/questions/14933577/swap-slices-of-numpy-arrays">question</a>, I've been able to swap the elements. However, the elements in the original array are also swapped, as in this example.</p>
<pre><code>a = np.array_split(np.arange(10),3)
print('orginal before swap: ',a)
a_swap = group_swap(a)
print('original after swap: ',a)
print('swapped array: ',a_swap)
</code></pre>
<p>Which gives:</p>
<pre><code>original before swap:  
[array([0, 1, 2, 3]), array([4, 5, 6]), array([7, 8, 9])]
original after swap:  
[array([0, 1, 2, 7]), array([4, 5, 6]), array([3, 8, 9])]
swapped array:  
[array([0, 1, 2, 7]) array([4, 5, 6]) array([3, 8, 9])]
</code></pre>
<p>Ideally, the array a should be unchanged and only a_swap show the swapped elements. I had hoped that making and working with a copy of the array within my function would do the trick but that hasn't worked.</p>
<p>Could anyone help point out what I might be missing? I have a feeling it's something I'll kick myself for afterwards.</p>
<p>Thanks</p>
<p>PS: Oddly enough, it seems to work if the number of elements in each group is equal, but I'm not seeing why.</p>
<pre><code>   original before swap: 
    [array([0, 1, 2, 3]), array([4, 5, 6, 7]), array([ 8,  9, 10, 11])]
    original after swap:  
    [array([0, 1, 2, 3]), array([4, 5, 6, 7]), array([ 8,  9, 10, 11])]
    swapped array:
    [[ 0  1  8  3]
    [ 4  5  6  7]
    [ 2  9 10 11]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When the number of components in each element are not equal, you are having a list of arrays (nested object).</p>
<p>When the number of components are equal, then you have a two dimensional array (one single object).</p>
<p>The <code>copy</code> you are using is called shallow copy which copies only the top level object (the 2d array in second case, but only the addresses to the arrays in the first case). So in the first case your original data also are changed.
You should use the <code>copy</code> module:
<a href="https://docs.python.org/3/library/copy.html" rel="nofollow noreferrer">https://docs.python.org/3/library/copy.html</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = np.array_split(np.arange(10),3)
a = np.asarray(a)
b = a.copy() -1 +1
print('orginal before swap: ',a)
a_swap = group_swap(b)
print('original after swap: ',a)
print('swapped array: ',a_swap)
</code></pre>
<p>From what I can tell, <code>ndarray.copy()</code> takes a shallow copy of the array <em>until</em> some change is made to it. When you call in the variable to the method, it uses the shallow copy of the array, ignoring that it was meant to be changed. By changing the variable before passing it through the method, it changes the memory reference of b to a separate place than a.</p>
<p><code>a = np.asarray(a)</code> is there to cast from a list to a numpy array so that the <code>-1 +1</code> is a valid operation.
There are probably a lot of different ways to do the same thing, this just seemed the easiest.</p>
</div>
<span class="comment-copy">"I have a list/array of numpy arrays" - you have a list. Not an array. The difference is <b>crucial</b>; do not ignore it.</span>
<span class="comment-copy"><code>np.array_split</code> makes a list of arrays.  You should leave that as a list, and not try to turn it into an array.  If the sublists differ in size, the new array will be object dtype (a bastardized list).  If they are all the same size, the new array will be 2d.  You don't need that complication.  <code>arr.copy</code> is quite different in the 2 cases.</span>
<span class="comment-copy">That did the trick. Comes with a slow down which I may need to work around when I scale up, but for now it's awesome. Thank you very much.</span>
