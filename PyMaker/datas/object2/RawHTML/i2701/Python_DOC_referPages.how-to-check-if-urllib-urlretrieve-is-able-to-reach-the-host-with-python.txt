<div class="post-text" itemprop="text">
<p>I'm trying to collect images from imgnet linkes and save them in folder.
Using urllib.urlretrieve , and till know it's working great.
<strong>The main problem is when the function is trying to reach host that the DNS can't resolve.</strong>
My link is: <a href="http://www.fuminnaosu.com/image/person/kitamura.jpg" rel="nofollow noreferrer">http://www.fuminnaosu.com/image/person/kitamura.jpg</a></p>
<p>When every DNS can't resolve it (May be deleted), but still it's on the list.
Try&amp;Except can't be using in my project for now, there is any way to pass and continue collect without using Try&amp;Except ?
My Error is:</p>
<pre><code>  File "C:\Anaconda2\lib\socket.py", line 557, in create_connection
for res in getaddrinfo(host, port, 0, SOCK_STREAM):
IOError: [Errno socket error] [Errno 11001] getaddrinfo failed
</code></pre>
<p>My Code:</p>
<pre><code>import cv2
import numpy as np
import os
import urllib

def get_images_to_dir():
    images_list_lnk = 'http://image-net.org/api/text/imagenet.synset.geturls?wnid=n09618957'
    images_url = urllib.urlopen(images_list_lnk)
    urls = images_url.read()

    img_typ = 'neg'

    if not os.path.exists(img_typ):
        os.mkdir(img_typ)

    images_counter = 1

    for url in urls.split('\n'):
            img_name = img_typ+'/'+str(images_counter)+'.jpg'
            urllib.urlretrieve(url, img_name)
            img = cv2.imread(img_name, cv2.IMREAD_GRAYSCALE)
            if (img is not None): # If connection success, but no image was found
                img = cv2.resize(img, (100, 100))
                cv2.imwrite(img_name, img)
                images_counter += 1
</code></pre>
<p>Full error report:</p>
<pre><code>Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm Community Edition 2018.1.4\helpers\pydev\pydevd.py", line 1664, in &lt;module&gt;
    main()
  File "C:\Program Files\JetBrains\PyCharm Community Edition 2018.1.4\helpers\pydev\pydevd.py", line 1658, in main
    globals = debugger.run(setup['file'], None, None, is_module)
  File "C:\Program Files\JetBrains\PyCharm Community Edition 2018.1.4\helpers\pydev\pydevd.py", line 1068, in run
    pydev_imports.execfile(file, globals, locals)  # execute the script
  File "C:/Users/xdavi/PycharmProjects/Face_and_eyes_detect/get-image-by-url.py", line 40, in &lt;module&gt;
    get_images_to_dir()
  File "C:/Users/xdavi/PycharmProjects/Face_and_eyes_detect/get-image-by-url.py", line 23, in get_images_to_dir
    urllib.urlretrieve(url, img_name)
  File "C:\Anaconda2\lib\urllib.py", line 98, in urlretrieve
    return opener.retrieve(url, filename, reporthook, data)
  File "C:\Anaconda2\lib\urllib.py", line 245, in retrieve
    fp = self.open(url, data)
  File "C:\Anaconda2\lib\urllib.py", line 213, in open
    return getattr(self, name)(url)
  File "C:\Anaconda2\lib\urllib.py", line 350, in open_http
    h.endheaders(data)
  File "C:\Anaconda2\lib\httplib.py", line 1038, in endheaders
    self._send_output(message_body)
  File "C:\Anaconda2\lib\httplib.py", line 882, in _send_output
    self.send(msg)
  File "C:\Anaconda2\lib\httplib.py", line 844, in send
    self.connect()
  File "C:\Anaconda2\lib\httplib.py", line 821, in connect
    self.timeout, self.source_address)
  File "C:\Anaconda2\lib\socket.py", line 557, in create_connection
    for res in getaddrinfo(host, port, 0, SOCK_STREAM):
IOError: [Errno socket error] [Errno 11001] getaddrinfo failed
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't see why you wouldn't use try-except for this, as any check in advance
will be a repeat of the same procedure. I.e.
to check whether the host is reachable you have to reach to it,
and urllib.urlretrieve() does, when it cannot reach it it raises an exception.
And this is exactly how a function to check availability of an URL
is supposed to look.</p>
<p>Now, you can do a half-check, i.e. open a TCP socket to the port 80 or 443 and see whether the connection is successful and close the socket if it is.
But this method will not detect if the file itself exists or not.</p>
<p>So, what you are asking is:</p>
<pre><code>from urllib2 import urlopen
import urllib

def check (url):
    try:
        u = urlopen(url)
        u.close()
        return True
    except:
        return False

URL = "http://adofiueaoiudsfoiu.com/iiiiddddd.img"
if check(URL):
    urllib.urlretrieve(URL, "thefile.img")
</code></pre>
<p>You can see how this is stupid, contacting the server twice for nothing instead of just putting the urlretrieve() into the try block.</p>
<p>So, what you should do is to use urllib2.urlopen() in a try block, and if it succeeds read the data and save it or do whatever you need with it.
And if it doesn't succeed you ignore the URL in question, and that's all.
I strongly recommend you to write your own retrieve function as specified above and avoid using the urllib.urlretrieve().</p>
</div>
<div class="post-text" itemprop="text">
<p>It's failing because the address lookup fails.  Why you can't use a try except block makes zero sense.  </p>
<p>To get passed this issue you can use gevent async greenlets (threads):</p>
<pre><code>from gevent import monkey, spawn as gspawn, joinall
monkey.patch_all()
import cv2
import numpy as np
import os
import urllib

def get_images_to_dir(url):
    img_typ = 'neg'

    if not os.path.exists(img_typ):
        os.mkdir(img_typ)

    img_name = img_typ+'/'+str(images_counter)+'.jpg'
    urllib.urlretrieve(url, img_name)
    img = cv2.imread(img_name, cv2.IMREAD_GRAYSCALE)
    if (img is not None): # If connection success, but no image was found
        img = cv2.resize(img, (100, 100))
        cv2.imwrite(img_name, img)
        images_counter += 1

images_list_lnk = 'http://image-net.org/api/text/imagenet.synset.geturls?wnid=n09618957'
images_url = urllib.urlopen(images_list_lnk)
urls = images_url.read()


jobs = [gspawn(get_images_to_dir,url) for url in urls.split('\n')]

joinall(jobs)
</code></pre>
<p>This will allow individual jobs to fail, but continue on with the rest of them until all of the jobs have been tried.  You will need to fix the code to keep proper track of the number of images... I would just count the files at the end to be honest.  </p>
</div>
<span class="comment-copy">Why can't you use <code>try:... except</code>?</span>
<span class="comment-copy">My Project manager says that try:except are made to use when you know everything is ok and nothing need to break in the way, all other cases need to be fix by "if" or other solutines .</span>
<span class="comment-copy">Ok, but exception handling in Python is very fast if the exception isn't actually raised. So if the URL is valid 90% of the time, using <code>try...except</code> is faster on average than equivalent code using <code>if</code>. Also see <a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow noreferrer">docs.python.org/3/glossary.html#term-eafp</a></span>
<span class="comment-copy">@XDavidT  Get a new project manager.  That's baggage from other languages, using try/except for flow control is fine in Python (and often considered best practice).</span>
<span class="comment-copy">I can't use try except because I asked to do the code without code exceptions, and try it before to see if it works. but when i'm runing it on AWS later for few days, add try except to get continue.</span>
<span class="comment-copy">I am sorry, but the libraries raise the exceptions, that is the way in Python to explain that something and what exactly is wrong. To catch them, you use try-except. If you want to avoid that completely, you would have to use ctypes to enter the OS's networking API and create the low-level socket (like in C) that uses the classic error reporting. And if you do it only for a check you would again have twice contacted server. If not, you would have to implement your own HTTP library from scratch. Everyone explained already. Change the manager, he/she is stupid beyond belief.</span>
<span class="comment-copy">Do not get us wrong, try-except flow control in Python is avoided as much as possible and is used when necessary. I.e. when you are writing something where a kind of error is only fail or success, you wouldn't usually raise an error, although, as mentioned, try-except, in case of success is faster than if. But IO of any kind can throw impossible amount of errors, from permission denied, to destination not found etc. If you want to drown in error codes, you program in C. If you want to have easy life, you use Python and try-except when needed.</span>
<span class="comment-copy">As I understand from all, the best way to handle it, is only that way. Thank you</span>
<span class="comment-copy">I am confused.  Your question was specifically if there was a way to do it without Try and Except.  And I provided that answer... and you accept the answer with Try and Except rendering the initial question utterly pointless and wasting our time?</span>
