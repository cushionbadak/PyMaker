<div class="post-text" itemprop="text">
<p>I have the following list: <code>a = [[1,2,3],[4,5,6],[7,8,9]]</code> which contains 3 lists, each being a list of nodes of a graph.</p>
<p>I am also given a tuple of nodes <code>z = ([1,2], [4,9])</code>. Now, I will like to check if either of the lists in <code>z</code> has been included in a list in <code>a</code>. For example, <code>[1,2]</code> is in <code>[1,2,3]</code>, in <code>a</code>, <strong>but</strong> <code>[4,9]</code> is not in <code>[4,5,6]</code>, although there is an overlapping node. </p>
<p><strong>Remark:</strong> To clarify, I am also checking for sub-list of a list, or whether every item in a list is in another list. For example, I consider [1,3] to be "in" [1,2,3].</p>
<p>How can I do this? I tried implementing something similar found at <a href="https://stackoverflow.com/questions/19503821/python-3-how-to-check-if-a-value-is-already-in-a-list-in-a-list">Python 3 How to check if a value is already in a list in a list</a>, but I have reached a mental deadlock.. </p>
<p>Some insight on this issue will be great!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>any</code> and <code>all</code>:</p>
<pre><code>a = [[1,2,3],[4,5,6],[7,8,9]]
z = ([1,2], [4,9])
results = [i for i in z if any(all(c in b for c in i) for b in a)]
</code></pre>
<p>Output:</p>
<pre><code>[[1, 2]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>set</code>s to compare if the nodes appear in <code>a</code>, <code>&lt;=</code> operator for sets is equivalent to <code>issubset()</code>.<br/>
<code>itertools</code> module provides some useful functions, <code>itertools.product()</code> is equivalent to nested <code>for</code> loops.<br/>
E.g.:</p>
<pre><code>In []:
import itertools as it
[m for m, n in it.product(z, a) if set(m) &lt;= set(n)]

Out[]:
[[1, 2]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = [[1,2,3],[4,5,6],[7,8,9]]

z = ([1,2], [4,9])

for z_ in z:
    for a_ in a:
        if set(z_).issubset(a_):
            print(z_)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>itertools.product</code> is your friend (no installation builtin python module):</p>
<pre><code>from itertools import product
print([i for i in z if any(tuple(i) in list(product(l,[len(i)])) for l in a)])
</code></pre>
<p>Output:</p>
<pre><code>[[1, 2]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you're only looking to test the sub-lists as if they were subsets, you can convert the sub-lists to sets and then use <code>set.issubset()</code> for the test:</p>
<pre><code>s = map(set, a)
print([l for l in z for i in s if set(l).issubset(i)])
</code></pre>
<p>This outputs:</p>
<pre><code>[[1, 2]]
</code></pre>
</div>
<span class="comment-copy">Rule of thumb, when you are checking whether something already exists, hashmap is probably your go to.</span>
<span class="comment-copy">@JosephSeungJaeDollar Thanks for the heads up! Unfortunately I am a beginner to Python and it will be probably take quite a while for me to 'master' hashmapping.. :/</span>
<span class="comment-copy">Try looking into sets.</span>
<span class="comment-copy">Are you looking to check for <i>sub-list</i> of a list, or simply if every item in a list is in another list? That is, do you consider <code>[1,3]</code> to be "in" <code>[1,2,3]</code>?</span>
<span class="comment-copy">@blhsing Yes I am. I stated it in my example above. Thanks for the question though. I will add in your remarks to make it clearer! :)</span>
<span class="comment-copy">I didn't even know these keywords existed :o</span>
<span class="comment-copy">Thanks @Ajax1234! Just curious what does the all() operator do?</span>
<span class="comment-copy">@T.Woody <a href="https://stackoverflow.com/questions/19257821/python-all-function-with-conditional-generator-expression-returning-true-why" title="python all function with conditional generator expression returning true why">stackoverflow.com/questions/19257821/â€¦</a></span>
<span class="comment-copy">@T.Woody note: <code>any</code> and <code>all</code> are not keywords but builtins (<code>for</code> and <code>in</code> are keywords). @Stoner <code>all()</code> ensures all conditions are <code>True</code>, <code>any()</code> ensures at least one condition is <code>True</code>.</span>
<span class="comment-copy">@AChampion Thanks for the clarifications. I'll accept this answer as it is easier for me to comprehend at my level of mastery of Python! :)</span>
<span class="comment-copy">Thanks, this is a great answer too! I didn't know sets can be used this way</span>
<span class="comment-copy">Thanks for your response! Just to clarify, is <code>issubset()</code> built-in or do I have to import a package?</span>
<span class="comment-copy"><code>issubset()</code> is a method on the standard <code>set</code> type, no imports necessary.</span>
<span class="comment-copy">@Stoner you do not need to import, for your reference <a href="https://python-reference.readthedocs.io/en/latest/docs/sets/issubset.html" rel="nofollow noreferrer">python-reference.readthedocs.io/en/latest/docs/sets/â€¦</a></span>
<span class="comment-copy">Thanks for the clarification. I'll take a look at it :)</span>
<span class="comment-copy">Thanks for the breakdown! Your response is as clear and simple to understand as @Ajax1234's :)</span>
<span class="comment-copy">@Stoner Happy that i helped, ðŸ˜Š</span>
<span class="comment-copy">Thanks for your response! Just curious, how does map actually work?</span>
<span class="comment-copy">Did you mean <code>a = map(set, a)</code> because currently <code>s = map(set, a)</code> is not being used, you are redefining <code>s</code> in the comprehension and still using <code>a</code>. Note: it works because <code>issubset()</code> will take any iterable (this doesn't happen with <code>&lt;=</code> set operator).</span>
<span class="comment-copy">@AChampion Thanks. My bad. I've corrected my answer.</span>
<span class="comment-copy">@Stoner The <code>map</code> function iterates through the list specified by the second argument and passes each item in the list to the function specified by the first argument, so <code>map(set, a)</code> converts <code>a</code> from a list of lists to a sequence of sets. Please refer to <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code>'s documentation</a> for more details.</span>
