<div class="post-text" itemprop="text">
<p>My python application reads data from files and stores these data in dictionaries during start up (dictionaries are properties of data reader classes). Once the application starts and the read data is used, these data in the dictionaries are no longer needed. However, they consume large amount of memory. How do I delete these dictionaries to free the memory?</p>
<p>For example:</p>
<pre><code>class DataReader():
    def __init__(self, data_file):
        self.data_file = data_file

    def read_data_file_and_store_data_in_dictionary():
        self.data_dictionary = {}
        for [data_name, data] in self.data_file:
             self.data_dictionary[data_name] = data

class Application():
    def __init__(self, data_file):
        self.data_reader = DataReader()
        self.data_reader.read()

    def start_app(self):
        self.use_read_data()
</code></pre>
<p>After application is started, <code>self.data_dictionary</code> is no longer needed. How do I delete <code>self.data_dictionary</code> permanently?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <code>del</code> statement</p>
<pre><code>del self.data_dictionary  # or del obj.data_dictionary
</code></pre>
<p>Note this will only delete this <em>reference</em> to the dictionary. If any other references still exist for the dictionary (say if you had done <code>d = data_reader.data_dictionary</code> and <code>d</code> still references <code>data_dictionary</code>) then the dictionary will not be freed from memory. This also includes any references to <code>d.keys(), d.values(), d.items()</code>.</p>
<p>Only when all references have been removed will the dictionary finally be released.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using Python, you should not care about memory management.</p>
<p>Python has an excellent <a href="https://docs.python.org/3/library/gc.html#module-gc" rel="nofollow noreferrer">garbage collector</a>, which counts for each object the reference in the code.<br/>
If there are no references, the object will be unallocated.</p>
<p>In your case, if the memory is not free after you're done using it, it means that the object can be still used in your program. If you delete it and then try to call it, you will get a <code>ReferenceError</code>.</p>
<p>Someone in other answers is suggesting to use <code>del</code>, but it will only delete the variable name.</p>
<p>My suggestion is to ensure that your code does not actually call the object anymore, and if it does, manipulate your data accordingly (use a <a href="https://docs.python.org/2/library/sqlite3.html" rel="nofollow noreferrer">lightweight db</a>, save them on local hard drive, ...) and retrieve them when needed. If your big dictionaries are class parameters of a class which is still used, but doesn't need the dicts anymore, you should take those dicts outside the class (maybe referencing a new class, which only manages the dicts). In <a href="https://stackoverflow.com/questions/3021264/python-tips-for-memory-optimization">this Q&amp;A</a> you will find useful tips for optimizing memory usage.</p>
<p>You can read <a href="https://rushter.com/blog/python-garbage-collector/" rel="nofollow noreferrer">this article</a> to have a really interesting dive into the Python's garbage collector</p>
</div>
<div class="post-text" itemprop="text">
<p>How about having the data in a smaller scope?</p>
<pre><code>class Application():
    def __init__(self, data_file):
        self.use_read_data(DataReader(data_file).read())
</code></pre>
<blockquote>
<p>After application is started, self.data_dictionary is no longer needed</p>
</blockquote>
<p>If you do not need the data for the whole lifetime of the application then you shouldn't be storing it in an instance attribute.</p>
<p>Choose the right scope and you won't need to care about deleting variables.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>del</code> will delete the reference to the object, however it could still be on memory. In that case, the garbage collector (<code>gc.collect([generation])</code>) will free the memory:</p>
<p><a href="https://docs.python.org/2.7/library/gc.html" rel="nofollow noreferrer">https://docs.python.org/2.7/library/gc.html</a></p>
<pre><code>import gc

[...]
# Delete reference
del object
# Garbage collector
gc.collect()
[...]
</code></pre>
</div>
<span class="comment-copy">Just do a <code>self.data_reader = None</code> when it's no longer needed.</span>
<span class="comment-copy">@martineau does it really work? <code>del</code> is not necessary?</span>
<span class="comment-copy">Yes it really workss, so <code>del</code> isn't necessary. Objects in Python are reference-counted and will be automatically deleted when it reaches a value of zero.</span>
<span class="comment-copy">Will memory be freed if I delete <code>self.data_reader</code>? Will it delete everything (dictionary, keys, values etc)?</span>
<span class="comment-copy">yes assuming you don't hold references to any of those</span>
<span class="comment-copy">Is there a way to know the all references to an object in a python project? How do advanced python programmers handle it?</span>
<span class="comment-copy">They don't. The best way is to never hold a reference to something that is too big to handle. The use things like lazy iterators instead. In fact that's exactly what your <code>self.data_file</code> object is -- the inbuilt objects are already made in a way to reduce memory.</span>
<span class="comment-copy">last question: after using <code>del</code>, is <code>gc.collect()</code> necessary to free the memory?</span>
<span class="comment-copy">does python's garbage collector runs automatically? How does it know when to delete the unnecessary objects?</span>
<span class="comment-copy">I agree with this answer too. Whilst <code>del</code> will do what you want, there are better ways.</span>
<span class="comment-copy">With this method, won't <code>DataReader</code> continue living as long as <code>Application</code> lives?</span>
<span class="comment-copy">@alwbtc Objects without references are ready to be garbage collected. What happens then depends on the implementation. CPython will deallocate it inmedialely.</span>
<span class="comment-copy">this won't work: <code>obj1 = dict; obj2 = obj1; del obj1; gc.collect()</code>. <code>obj2</code> is still there, referencing the same object. Interesting suggestion, by the way, to force the garbage collector to collect in a specific moment</span>
