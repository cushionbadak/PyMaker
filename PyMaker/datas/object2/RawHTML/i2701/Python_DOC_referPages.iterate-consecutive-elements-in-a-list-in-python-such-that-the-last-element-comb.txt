<div class="post-text" itemprop="text">
<p>I have a list:</p>
<pre><code>L = [1,2,3,4,5,6,7,8]
</code></pre>
<p>I want to iterate consecutive elements in the list such that, when it comes to last element i'e <strong>8</strong> it pairs with the first element <strong>1</strong>.</p>
<p>The final output I want is:</p>
<pre><code>[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,1]
</code></pre>
<p>I tried using this way:</p>
<pre><code>for first,second in zip(L, L[1:]):
    print([first,second])
</code></pre>
<p>But I am getting only this result:</p>
<pre><code>[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]
</code></pre>
<p>How do I make a pair of last element with first? I have heard about the negative indexing property of a list.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can simply extend the second list in <code>zip()</code> with a list with only the first item, something like:</p>
<pre><code>for first, second in zip(L, L[1:] + L[0:1]):  # or simply zip(L, L[1:] + L[:1])
    print([first, second])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow noreferrer"><code>cycle</code></a> to cycle the lists (in combination with <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>islice</code></a> to skip the first element):</p>
<pre><code>from itertools import cycle, islice

L = [1,2,3,4,5,6,7,8]
rest_L_cycled = islice(cycle(L), 1, None)
items = zip(L, rest_L_cycled)
print(list(items))
</code></pre>
<p>This is easily extensible. Note that it relies on the fact that <code>zip</code> halts on the shorter list (the second argument is an infinite cycle). It also does everything lazily and does not create any intermediate list (well, except for the <code>print</code>ed list) :-)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can also iterate through the indexes of <code>L</code>, and for the index of the second item of the output tuples, simply use the remainder of the length of <code>L</code>:</p>
<pre><code>[(L[i], L[(i + 1) % len(L)]) for i in range(len(L))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can simply concatenate the list resulting from zip(L, L[1:]) with the pair formed by the last element L[-1] and first one L[0] and iterate over the result</p>
<pre><code>for first,second in zip(L, L[1:]) + [(L[-1],L[0])]:
    print ([first,second])
</code></pre>
<p>It gives the desired outcome. </p>
</div>
<div class="post-text" itemprop="text">
<p>It's not a one-liner, but:</p>
<pre><code>&gt;&gt;&gt; L = [1,2,3,4,5,6,7,8]
&gt;&gt;&gt; z = list(zip(L[:-1], L[1:]))
&gt;&gt;&gt; z.append((L[-1], L[0]))
&gt;&gt;&gt; z
[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 1)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can just append the front element(s) to the back.</p>
<pre><code>for first,second in zip(L, L[1:] + L[:1]):
    print([first,second])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>for i in range(len(L)):
   first = L[i]
   second = L[(i+1) % len(L)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can simply use <code>itertools.zip_longest</code> with a <code>fillvalue</code> of the first item.</p>
<pre><code>from itertools import zip_longest
list(map(tuple, zip_longest(L, L[1:], fillvalue=L[0]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a version (over-)using <a href="https://docs.python.org/3/library/itertools.html?highlight=itertools#itertools.cycle" rel="nofollow noreferrer"><code>itertools</code></a>:</p>
<pre><code>from itertools import islice, cycle
L = [1,2,3,4,5,6,7,8]

for a, b in zip(L, islice(cycle(L), 1, None)):
    print(a, b)
</code></pre>
<p>The idea is to <code>cycle</code> over the second argument - that way <code>zip</code> runs until <code>L</code> itself is exhausted. This does not create any new lists.</p>
</div>
<span class="comment-copy"><code>L[0:1] == L[0] == L[:1]</code></span>
<span class="comment-copy"><code>L[0:1] == L[0]  # returns False</code>, L[0] gives <code>1</code>, L[0:1] gives <code>[1]</code> (a list)</span>
<span class="comment-copy">ahh, you're right! my bad!</span>
<span class="comment-copy">ok. you beat me to an <code>itertools</code> version... +1!</span>
<span class="comment-copy">@blshing I think it the simplest solution.</span>
