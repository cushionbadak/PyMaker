<div class="post-text" itemprop="text">
<p>I have a dictionary that's pretty long and I don't want to keep it in the same file as my program. I tried accessing the dictionary but I get an error:</p>
<pre><code>Traceback (most recent call last):
File "C:\Users\....\OneDrive\Documents\python\atom\datesandtimes.py", line 22, in &lt;module&gt;
    elif whenever in get_close_matches(whenever, dict.keys()):
AttributeError: 'str' object has no attribute 'keys'
</code></pre>
<p>Is it possible to use it as a dictionary or to convert it or do I have to put the entire dictionary in the main file? My program is:</p>
<pre><code>with open("dates.py") as files:
        dictionary = files.read()
        if whenever in files:
             print(dictionary[whenever])
        elif whenever in get_close_matches(whenever, dict.keys()):
             date = whenever in get_close_matches(whenever, dict.keys())
             print(dates[date])
</code></pre>
<p>I'm a beginner so if I'm asking a question that doesn't make sense pls tell me.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><code>file1.py</code></p>
</blockquote>
<pre><code>my_dict = {
    'key1': 'val1',
    'key2': 'val2',
    'keyn': 'valn',
}
</code></pre>
<blockquote>
<p><code>file2.py</code></p>
</blockquote>
<pre><code>from file1 import my_dict

print(my_dict['key1'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The issue here is, you are trying to access your "dictionary" as file object. Whenever you access your file object with <strong>read()</strong> method. It gives you a string. </p>
<p>So dictionary = files.read() is a string. To convert that string into an actual dictionary object, you can use eval() a python inbuilt function. </p>
<pre><code>dictionary = eval(files.read())
</code></pre>
<p>To verify if "whenever" key is present in your dictionary. Use,</p>
<pre><code>if whenever in dictionary.keys():
    print(dictionary[whenever])
</code></pre>
<p>But according to your traceback results, I see an error at </p>
<pre><code>elif whenever in get_close_matches(whenever, dict.keys()):
</code></pre>
<p>It says your "dict" object is String not a Dictionary. If dict is a dictionary used as string. You can use, </p>
<pre><code>elif whenever in get_close_matches(whenever, eval(dict).keys()):
</code></pre>
<p>As explained above.</p>
</div>
<span class="comment-copy">you called it <code>dictionary</code> to begin with and then used <code>dict.keys()</code>. Try <code>dictionary.keys()</code>. Your error is saying that <code>dict</code> is just a string and nothing more</span>
<span class="comment-copy">There's a lot going on here, and probably more than one issue. I can't say for certain because you haven't posted the full program. Please make an <a href="https://stackoverflow.com/help/mcve">MCVE</a> to clear things up.</span>
<span class="comment-copy">Also, the fact that dict is a string is a problem: dict should be a class...</span>
<span class="comment-copy">If the goal is just to store data in a separate file, I would recommend using <a href="https://json.org" rel="nofollow noreferrer">JSON</a>, which is very similar to the way you'd write a Python dict. You can load a JSON file into a dict using <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">the <code>json</code> module, which is in the Python standard library</a>.</span>
<span class="comment-copy">This remark is unrelated to the quality of your answer and is more of a theoretical nature. I wonder how <code>import</code> in this context is better than The Evil <code>eval</code> or <code>exec</code>, considering that that's what is happening when a file is imported?</span>
<span class="comment-copy">This is a bad use case for <code>eval</code>. (Actually, I would argue that a good use case for <code>eval</code> doesn't exist.) <code>ast.literal_eval</code> would be better, but better yet would be to either import the module (and let Python evaluate it) or else make a small modification and read the file as JSON instead.</span>
<span class="comment-copy">Also, don't use <code>.keys()</code> just to check membership in a dictionary: prefer using the <code>in</code> operator directly, e.g. <code>if mykey in mydict</code></span>
<span class="comment-copy">@DanielPryden I agree, There is no good case of eval() if it changes the keys and values of dictionary during the process of evaluation. As post owner mentioned that he is a beginner. I felt to help him out with minimal changes to his code. But thanks for correcting me. :)</span>
