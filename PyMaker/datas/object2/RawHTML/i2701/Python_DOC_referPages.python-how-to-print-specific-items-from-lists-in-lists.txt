<div class="post-text" itemprop="text">
<p>I am trying to print the first and last item of all the lists inside my list of lists <code>num_list</code>. </p>
<pre><code>num_list = [[1,2,3],[10,20,30],[100,200,300]]

for x in range(0,3):
    for y in range(0,1) and range(2,3):
        print(num_list[x][y])
</code></pre>
<p>But this is just printing <code>3,30,300</code> and skipping the <code>1,10</code> and <code>100</code>.</p>
<p>What is a good way to solve this problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use indexing.</p>
<p><strong>Ex:</strong></p>
<pre><code>num_list = [[1,2,3],[10,20,30],[100,200,300]]

for i in num_list:
    print(i[0], i[-1])   #i[-1] == negative indexing. 
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>1 3
10 30
100 300
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to use range to achieve your task.<br/>
Anyway, even if you would like to, there is a mistake in your code in the line</p>
<pre><code>range(0,1) and range(2,3)
</code></pre>
<p>By definition <code>and</code> returns the first value which is False, otherwise if there is not, it returns the last value in the expression.<br/>
Thus, in your case it only returns <code>range(2,3)</code>.</p>
<p>Indeed, </p>
<pre><code>range(0,1) and range(2,3)
</code></pre>
<p>returns</p>
<pre><code>range(2, 3)
</code></pre>
<p>since <code>bool(range(0,1))</code> and <code>bool(range(2,3))</code> are both evaluated as True.<br/>
This is why they are both non-empty sequences. Indeed <code>bool(range(2,2))</code> would be evaluated as <code>False</code> being empty. For more details see the <a href="https://docs.python.org/3/library/stdtypes.html" rel="nofollow noreferrer">documentation</a>.</p>
<p>You should rather write something like</p>
<pre><code>import itertools

num_list = [[1,2,3],[10,20,30],[100,200,300]]

for x in range(0,3):
    for y in itertools.chain(range(0,1), range(2,3)):
        print(num_list[x][y])
</code></pre>
<p>using <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer">itertools.chain</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>range(0,1) and range(2,3) returns =&gt; range(2,3)</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>num_list = [[1, 2, 3], [10, 20, 30], [100, 200, 300]]

for each in num_list:
    print (each[0], each[-1])
</code></pre>
</div>
<span class="comment-copy"><code>range(0,1) and range(2,3)</code> this doesn't do what you think it does. It just returns <code>range(2,3)</code> because <code>bool(range(0,1))</code> is <code>True</code> (see <a href="https://docs.python.org/3/reference/expressions.html#and" rel="nofollow noreferrer">this</a>). What you want is <code>for y in [0, 2]</code> (I expect).</span>
<span class="comment-copy">Thank you @FHTMitchell, why does range(0,1) return true?</span>
<span class="comment-copy">@FHTMitchell Just thinking about it more, if range(0,1) returns True, then why does range(2,3) return range(2,3) and not True also?</span>
<span class="comment-copy"><code>range(0,1)</code> doesn't return <code>True</code>, <code>bool(range(0,1))</code> returns <code>True</code>, as does <code>bool(range(2,3))</code> because <code>bool(sequence)</code> is (normally) the same as <code>len(sequence) &gt; 0</code>. <code>a and b</code> is the same as <code>b if a else a</code>. This is a pretty fundamental python concept. See the link I provided earlier.</span>
<span class="comment-copy">Thanks for the comment @FHTMitchell. When you say bool(sequence) is normally the same as len(sequence), does that mean that as the string "range(0,1)" has a length &gt; 0, it returns true? Sorry if I'm way off on this! Just trying to understand.</span>
<span class="comment-copy">Hi, would you mind explaining why you are using -1? I understand that i[0] is 1,10,100... but why is i[-1] 3,30,300?</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/11367902/negative-list-index">stackoverflow.com/questions/11367902/negative-list-index</a></span>
<span class="comment-copy">Thank you @Rakesh, to 'activate' negative list index do you simply have to use a negative symbol? Then the code knows you are using NLI?</span>
<span class="comment-copy">That is correct.</span>
<span class="comment-copy">@JoshuaESummers Not exactly. It's not the symbol, it's the value. <code>(-1)</code> is the value. You could just as well do <code>x = -1</code> and then <code>i[x]</code>.</span>
<span class="comment-copy">Thank you. What does intertools do?</span>
<span class="comment-copy">When you say 'and returns the first value which is False, otherwise if there is not, it returns the last value in the expression' - do you mean that range(0,1) is false? or are you saying because range(0,1) is not false it returns the last value (range(2,3))? Sorry I'm a bit confused!</span>
<span class="comment-copy">itertools (<a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">docs.python.org/3/library/itertools.html</a>) includes a set of function to handle iterators. In your case, you want to iterate over two iterators <code>range(0,1)</code> and <code>range(2,3)</code>. To do that, you can use <code>itertools.chain</code> like in the example. In your specific case it's not necessary as a direct indexing of the list is enough.</span>
<span class="comment-copy">since <code>bool(range(0,1))</code>  and <code>bool(range(2,3))</code> are evaluated as True, the returned one is <code>bool(range(2,3))</code>. This is why you are getting only <code>3, 30, 300</code> as output.</span>
<span class="comment-copy">Just thinking about it more, if range(0,1) returns True, then why does range(2,3) return range(2,3) and not just 'True' also?</span>
<span class="comment-copy">This answer is a declarative statement. Which is fine enough (not really). Can you elaborate on why python does this and <i>attempt</i> to address <i>"What is a good way to solve this problem?"</i> Thanks.</span>
<span class="comment-copy">Could you explain your answer a little bit please? What does each do? And what does the each[0], each[-1] structure mean? As in is it printing between 'each[0]' and 'each[-1]' which is some how equivalent to range (0,1)?</span>
<span class="comment-copy"><code>each</code> is just every element of <code>num_list</code> so on the first iteration <code>each</code> is <code>[1,2,3]</code>, on the second it's <code>[10,20,30]</code> and on the third <code>[100,200,300]</code>. <code>each[0], each[-1]</code> is the first and last element of every <code>each</code> so e.g. <code>[1,3]</code>.</span>
<span class="comment-copy">@FHTMitchell This code is written in python3  @JoshuaESummers <code>each</code> represent the elements in the list num_list. That means <code>each</code> will have value <code>[1, 2, 3]</code> in first iteration, <code>[10, 20, 30]</code> in second iteration and then finally it will be <code>[100, 200, 300]</code>.    First iteration : print each[0], each[-1] output =&gt; 1 3  First iteration : print each[0], each[-1] output =&gt; 10 30  First iteration : print each[0], each[-1] output =&gt; 100 300</span>
