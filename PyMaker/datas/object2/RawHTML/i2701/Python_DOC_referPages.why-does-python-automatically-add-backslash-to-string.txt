<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/24085680/why-do-backslashes-appear-twice">Why do backslashes appear twice?</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I'm using python3.7 and typed the following code in python shell:</p>
<pre><code>&gt;&gt;&gt; s0 = r'\c'
&gt;&gt;&gt; s0
'\\c'
&gt;&gt;&gt; print(s0)
\c

&gt;&gt;&gt; s1 = '\c'
&gt;&gt;&gt; s1
'\\c'
&gt;&gt;&gt; print(s1)
\c

&gt;&gt;&gt; s2 = '\\c'
&gt;&gt;&gt; s2
'\\c'
&gt;&gt;&gt; print(s2)
\c
</code></pre>
<p>My questions:</p>
<ol>
<li><p>Why does python automatically add <code>\</code> to <code>s1</code> instead of raising error? Can anyone provide link of this feature (auto <code>\</code> adding) in python docs? </p></li>
<li><p>Do <code>s0</code>, <code>s1</code> and <code>s2</code> store the same data internally?</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>The Python interpreter uses the <a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow noreferrer"><code>repr()</code> function</a>  to indicate that it's a literal backslash</p>
<pre><code>&gt;&gt;&gt; s2 = '\\c'
&gt;&gt;&gt;len(s2)
2
&gt;&gt;&gt;print s2
\c
</code></pre>
</div>
<span class="comment-copy">@Aran-Fey In many languages, including C, if <code>\c</code> is not a defined backslash escape sequence, it means <code>c</code>. In a few languages, including Python, it means <code>\c</code>. In some languages, to avoid confusion about whether they're like C or like Python, not to mention avoiding the inevitable errors when novices use Windows pathnames and <code>C:\Hello</code> works but <code>C:\hello</code> doesn't, it's an error.</span>
<span class="comment-copy">@Aran-Fey Actually, in Python, <code>\c</code> meaning <code>\c</code> is deprecated since 3.6, and it will change to being an error in some future version. (IIRC, it was originally planned for 3.8, but was postponed to some future version to be named later.) See the end of <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">String and Bytes literals</a>.</span>
<span class="comment-copy">Ok, the duplicate doesn't address the "why isn't it an error" part of the question, but then again there are 3 different questions in this question. If we narrow down the question to just "why don't invalid escape sequences throw errors", I'll reopen the question. But otherwise, I'm in favor of leaving it closed.</span>
<span class="comment-copy">@mzoz The Python core devs agree, they just have to decide how long to give people to fix their codeâ€¦</span>
<span class="comment-copy">@Aran-Fey Since the answer to "why isn't it an error" is really just "it is, just not yet", and the history of why the change was lost in the 3.0 process is probably not very interesting, and the reason why Guido used a different rule from C in the first place is probably lost in the mists of time and would require random wild guessing, I don't think we need a separate question on that. (But I did add a secondary answer to the other question pointing out that it will be an error in the future.)</span>
