<div class="post-text" itemprop="text">
<p>Given this string 'www__ww_www_'</p>
<p>I need to replace all the _ with CHARACTERS from the following string '1234'. So the result is supposed to be 'www12ww3www4'</p>
<pre><code>TEXT = 'aio__oo_ecc_'
INSERT = '1234'

insert = list(INSERT)
ret = ''

for char in TEXT:
    if char == '_':
        ret += insert[0]
        insert.pop(0)
    else:
        ret += char

print (ret)
&gt;&gt; aio12oo3ecc4
</code></pre>
<p>What is the right way to do this? Because this seems like the most inefficient way.</p>
</div>
<div class="post-text" itemprop="text">
<p>You may use a <a href="https://tonyj.me/blog/iterators-and-generators-python/" rel="nofollow noreferrer">string iterator and a generator expression</a> with a <a href="https://code-examples.net/en/q/1084cb2" rel="nofollow noreferrer">ternary</a> inside of it:</p>
<pre><code>TEXT = 'aio__oo_ecc_'
INSERT = '1234'

it = iter(INSERT)
print("".join(next(it) if x == "_" else x for x in TEXT))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As pointed in the comments, you can use the <code>str.replace</code> directly:</p>
<pre><code>for c in INSERT:
    TEXT = TEXT.replace('_', c, 1)
</code></pre>
<p>You can use also the regex replace for that:</p>
<pre><code>import re
for c in INSERT:
    TEXT = re.sub('_', c, TEXT, 1)
</code></pre>
<p>see here: <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">https://docs.python.org/3/library/re.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Consider splitting the pattern string by the underscore and zipping it with the string of inserts:</p>
<pre><code>TEXT = 'aio__oo_ecc_a' # '_a' added to illustrate the need for zip_longest
from itertools import zip_longest, chain
''.join(chain.from_iterable(zip_longest(TEXT.split('_'), INSERT, fillvalue='')))
#'aio12oo3ecc4a'
</code></pre>
<p><code>zip_longest</code> is used instead of the "normal" <code>zip</code> to make sure the last fragment of the pattern, if any, is not lost. </p>
<p>A step-by-step exploration:</p>
<pre><code>pieces = TEXT.split('_')
# ['aio', '', 'oo', 'ecc', 'a']
mix = zip_longest(pieces, INSERT, fillvalue='')
# [('aio', '1'), ('', '2'), ('oo', '3'), ('ecc', '4'), ('a', '')]
flat_mix = chain.from_iterable(mix)
# ['aio', '1', '', '2', 'oo', '3', 'ecc', '4', 'a', '']
result = ''.join(flat_mix)
</code></pre>
<p><strong>Speed comparison:</strong></p>
<ol>
<li>This solution: <strong>1.32 µs ± 9.08 ns per loop</strong></li>
<li>Iterator + ternary + list comprehension: 1.77 µs ± 20.8 ns per loop</li>
<li>Original solution: 2 µs ± 13.2 ns per loop</li>
<li>The loop + regex solution: 3.66 µs ± 103 ns per loop</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>You can use an iterator in a replacement function for <code>re.sub</code>:</p>
<pre><code>import re
TEXT = 'aio__oo_ecc_'
INSERT = '1234'
i = iter(INSERT)
print(re.sub('_', lambda _: next(i), TEXT))
</code></pre>
<p>This outputs:</p>
<pre><code>aio12oo3ecc4
</code></pre>
</div>
<span class="comment-copy">That looks pretty much how I would do it. You can't get faster than a linear algorithm.</span>
<span class="comment-copy">You can make it a bit simpler by modifying the original list, then <code>return ''.join(insert)</code> at the end.  Also don't forget to handle errors (too many replacement chars, not enough replacement chars).</span>
<span class="comment-copy">@chrisaycock: While not disagreeing that this particular code is very fast - you can certainly get faster than a linear algorithm: for one thing, "linear" defines scalability, not speed; and even if we were talking about scalability, constant-time is better than linear.</span>
<span class="comment-copy">@Amadan I agree that speed in a given runtime can be a small factor but for this particular algorithm, there is no better possible runtime than O(N).</span>
<span class="comment-copy">@ggorlen: Sure, for this particular algorithm; I believe I did say that. I just wanted to clear it up for any readers that this statement is only true for this particular context, and "You can't get faster than a linear algorithm" is not something you can take as a general truth.</span>
<span class="comment-copy">It shouldn't matter much in this case, but you can get rid of the <code>[]</code> brackets.</span>
<span class="comment-copy">nice solution, and looks very pythonic too :)</span>
<span class="comment-copy">And now it's the same as @sehafoc 's :)</span>
<span class="comment-copy">I think I got it first, but I deleted mine haha, and I'm not sure that you are technically using a list comprehension there. I think you mean generator expression?</span>
<span class="comment-copy">I can go back to popping, but @blhsing also went iter so I figured I'd jump on the bandwagon. Sorry about that--it was too clean to pass!</span>
<span class="comment-copy">This is less efficient than the original method - it will be <code>O(n * m)</code> where <code>n</code> is the length of the text string and <code>m</code> is the number of characters to be replaced.</span>
<span class="comment-copy">In this case development simplicity trumps runtime complexity. I really like this simple solution, however, there's no need for <code>re</code> and you can use <code>string.replace</code> instead. <code>TEXT = TEXT.replace('_', c, 1)</code></span>
<span class="comment-copy">@nicholishen thanks, I added the simple <code>string.replace</code> solution.</span>
<span class="comment-copy">I find this much more difficult to understand at a glance than just looping over a list.</span>
<span class="comment-copy">@DYZ Well, I have to left pop on the array. Probably faster to reverse the list or keep an index but less pretty.</span>
