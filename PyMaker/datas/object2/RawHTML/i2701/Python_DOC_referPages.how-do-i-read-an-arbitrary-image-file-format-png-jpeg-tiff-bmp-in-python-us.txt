<div class="post-text" itemprop="text">
<p>I'm an experienced Python programmer with plenty of image manipulation and computer vision experience. I'm very familiar with all of the standard tools like <code>PIL</code>, <code>Pillow</code>, <code>opencv</code>, <code>numpy</code>, and <code>scikit-image</code>.</p>
<p>How would I go about reading an image into a Python data format like a nested list, bytearray, or similar, if I only had the standard library to work with?</p>
<p>I realize that different image formats have different specifications. My question is how I would even begin to build a function that reads any given format.</p>
<p><strong>NOTE</strong> Python 2.6 had a <code>jpeg</code> module in the standard library that has since been deprecated. Let's not discuss that since it is unsupported.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're asking how to implement these formats "from scratch" (since the standard libraries don't do this), then a good starting point would be the format specification.</p>
<p>For PNG, this is <a href="https://www.w3.org/TR/2003/REC-PNG-20031110/" rel="nofollow noreferrer">https://www.w3.org/TR/2003/REC-PNG-20031110/</a>. It defines the makeup of a PNG stream, consisting of the signature (eight bytes, <code>8950 4e47 0d0a 1a0a</code>, which identifies the file as a PNG image) and a number of data chunks that contain meta data, palette information and the image itself. (It's certainly a substantial project to take on, if you really don't want to use the existing libraries, but not overly so.)</p>
<p>For BMP, it's a bit easier since the file already contains the uncompressed pixel data and you only need to know how to find the size and offset; some of the format definition is on Wikipedia (<a href="https://en.wikipedia.org/wiki/BMP_file_format" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/BMP_file_format</a>) and here: <a href="http://www.digicamsoft.com/bmp/bmp.html" rel="nofollow noreferrer">http://www.digicamsoft.com/bmp/bmp.html</a></p>
<p>JPG is much trickier. The file doesn't store pixels, but rather "wavelets" which are transformed into the pixel map you see on the screen. To read this format, you'll need to implement this transformation function.</p>
</div>
<span class="comment-copy">Have a look at how PIL implement it... you'll probably find one just needs to read the raw bytes, identify the type by a magic number (generally the first couple of bytes and there's a lookup table for those all over the net), and then using that decide how to make the content/meta-data in the file usable. (At which point you've written a much reduced version of PIL...)... I'd start by looking at the source of those libraries and re-using ideas from there.</span>
<span class="comment-copy">1) I'm concerned by how much pure C code is relied on in things like <code>opencv</code>, <code>PIL</code>. OpenCV uses pretty much purely C bindings. PIL has some C. 2) Grokking this is very difficult: <a href="https://github.com/python-pillow/Pillow/blob/fdbd719da4c77c7e23e2e9e9b71d0d177f2d3369/src/PIL/ImageFile.py#L130" rel="nofollow noreferrer">github.com/python-pillow/Pillow/blob/â€¦</a></span>
<span class="comment-copy">Yeah... it's likely you'll have to use the C code as a base and get familiar with using <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer"><code>struct</code></a> to emulate operations on structs/packed data... As well as all the nuances/image format specifications documents for any operations you may want to be able to perform... Apart from the advice to spend time looking at existing solutions... this is very much a "it's getting close to a book to explain" - which with a little perusal of source and tech specs... the info's all out there you need.</span>
<span class="comment-copy">You're definitely right about that. I realize that, in practice, building such a tool from scratch would cause me to encounter endless edge cases that are already well-handled by mature image libraries.</span>
