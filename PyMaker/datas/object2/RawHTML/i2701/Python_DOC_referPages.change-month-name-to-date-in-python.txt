<div class="post-text" itemprop="text">
<p>I am trying to change month name to date in python but i m getting an error:</p>
<pre><code>ValueError: time data 'October' does not match format '%m/%d/%Y'
</code></pre>
<p>My CSV has values such as October in it which I want to change it to 10/01/2018</p>
<pre><code>import pandas as pd
import datetime

f = pd.read_excel('test.xlsx', 'Sheet1', index_col=None)
keep_col = ['Month']
new_f = f[keep_col]
f['Month'] = f['Month'].apply(lambda v: datetime.datetime.strptime(v, '%m/%d/%Y'))
    new_f.to_csv("output.csv", index=False)
</code></pre>
<p>Any help would be appreciated</p>
</div>
<div class="post-text" itemprop="text">
<p>Can't you just write a function mapping to each? In fact, a dictionary will do.</p>
<pre><code>def convert_monthname(monthname):
    table = {"January": datetime.datetime(month=1, day=1, year=2018),
             "February": datetime.datetime(month=2, day=1, year=2018),
             ...}

    return table.get(monthname, monthname)

f['Month'] = f['Month'].apply(convert_monthname)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As an elaboration of the answer by @AdamSmith, a better way to define a mapping between names and dates is to use the <code>calendar</code> module that already has a list of names:</p>
<pre><code>import calendar
table = {name: datetime.datetime(month=1, day=val, year=2018) 
          for val, name in enumerate(calendar.month_name) if val&gt;0}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The whole point of passing a format string like <code>%m/%d/%y</code> to <code>strftime</code> is that you're specifying what format the input strings are going to be in.</p>
<p>You can see <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">the documentation</a>, but it's pretty obvious that a format like <code>%m/%d/%y</code> is not going to handle strings like <code>'October'</code>. You're asking for a (zero-padded) month number, a slash, a (zero-padded) day number, a slash, and a (zero-padded) (two-digit) years.</p>
<p>If you specify a format that actually <em>does</em> match your input, everything works without error:</p>
<pre><code>&gt;&gt;&gt; datetime.datetime.strptime('October', '%B')
datetime.datetime(1900, 10, 1, 0, 0)
</code></pre>
<p>However, that still isn't what you want, because the default year is 1900, not 2018. So, you either need to <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.replace" rel="nofollow noreferrer"><code>replace</code></a> that, or pull the month out and build a new datetime object.</p>
<pre><code>&gt;&gt;&gt; datetime.datetime.strptime('October', '%B').replace(year=2018)
datetime.datetime(2018, 10, 1, 0, 0)
</code></pre>
<p>Also, notice that all of the strings that <code>strptime</code> knows about are locale-specific. If you've set an English-speaking locale, like <code>en_US.UTF-8</code>, or <code>C</code>, then <code>%B</code> means the English months, so everything is great. But if you've set, say, <code>br_PT.UTF-8</code>, then you're asking it to match the Brazilian Portuguese month names, like <code>Outubro</code> instead of <code>October</code>.<sup>1</sup></p>
<hr/>
<p><sub>1. Since I don't actually know Brazilian Portuguese, that was a pretty dumb example for me to pickâ€¦ but Google says it's Outubro, and when Google Translate did so ever lead wrong one?</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>I'm assuming the data is mostly in the format you have specified (<code>mm/dd/yyyy</code>) but some outlier rows have month names in them.</p>
<p>Without adding any extra dependencies:</p>
<pre><code>DATE_FORMAT = '%m/%d/Y'
MONTH_NAME_MAP = {
    "january": 1,
    "jan": 1,
    "february": 2,
    "feb": 2,
    # ...
}

def parse_month_value(value):
    # check if the value is a name of a month
    month_int = MONTH_NAME_MAP.get(value.lower())
    if month_int:
        this_year = datetime.date.today().year
        return datetime.datetime(month=month_int, day=1, year=this_year)

    # try to parse it normally, failing and raising exception if needed.
    return datetime.datetime.strptime(value, DATE_FORMAT)
</code></pre>
<hr/>
<p>then </p>
<pre><code>f['Month'] = f['Month'].apply(parse_month_value)
</code></pre>
</div>
<span class="comment-copy">Upvoting for simplicity, great answer! There's a good tutorial <a href="https://www.guru99.com/calendar-in-python.html" rel="nofollow noreferrer">here</a> on other things you can do with the calendar module.</span>
