<div class="post-text" itemprop="text">
<p>Say I have a JSON file as such:<br/></p>
<pre><code>{
  "x":5,
  "y":4,
  "func" : def multiplier(a,b):
               return a*d
}
</code></pre>
<p>This over-simplifies what I want to try and do, but basically I am attempting<br/>
to story a python UDF into a JSON file. Is there a way to do this so that when I 
do:<br/></p>
<pre><code>with open('config.json') as f:
    data = json.load(f)
</code></pre>
<p>I can access those values and do something like:<br/></p>
<pre><code>v1, v2 = data['x'], data['y']
mult = data['func']
print(mult(v1,v2))
</code></pre>
<p>To get expected output: 20<br/><br/>
<strong>NOTE</strong>: To my understanding JSON doesn't store functions, so maybe I can store it as a string, and then in my python script parse the string into a function? Not too sure.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you really need to store a function in an external json file, one turn-around will be to store a lambda function instead, and use the <code>eval</code> function to call it from your script. But I don't really recommend it for good practice...</p>
<p><strong>config.json</strong></p>
<pre><code>{
  "x": 5,
  "y": 4,
  "func": "lambda a, b : a * b"
}
</code></pre>
<p><strong>Your Python file</strong></p>
<pre><code>import json


def main():

    with open('config.json') as f:
        data = json.load(f)

    v1, v2 = data['x'], data['y']
    multiplier = eval(data['func'])
    print(multiplier(v1, v2))


if __name__ == "__main__":
    main()
</code></pre>
<p><strong>Demo</strong></p>
<pre><code>Python 3.6.4 (v3.6.4:d48ecebad5, Dec 18 2017, 21:07:28) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin

In[2]: ls
a.py
config.json

In[3]: import json

In[4]: def main():
  ...: 
  ...:     with open('config.json') as f:
  ...:         data = json.load(f)
  ...: 
  ...:     v1, v2 = data['x'], data['y']
  ...: 
  ...:     multiplier = eval(data['func'])
  ...: 
  ...:     print(multiplier(v1, v2))
  ...:    

In[5]: main()
20
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python has a built in module name <code>marshal</code> that can handle this.  </p>
<pre><code>import marshal, ujson as json

def multiplier(a, b):
    return a * b

x = {
  "x":5,
  "y":4,
  "func" : marshal.dumps(multiplier.func_code)
}

x = json.dumps(x)
print(x)
</code></pre>
<p>And to get it back...</p>
<pre><code>x = json.loads(x)
x = marshal.loads(x['func'])
# maybe save the function name in dict
func = types.FunctionType(x, globals(), "some_func_name") 

print(func(2,4))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Something that is worth trying is just saving it as a string.</p>
<p>You can do stuff like</p>
<pre><code>my_func = "
def function(a,b):
   constant = {input_var}
   return a*b + constant
"
my_func.format(input_var = 5)

exec(my_func)
function(1,2) # will return 7
</code></pre>
<p>This will create object of the function that you can call. Not really sure what you are trying to do but creating a json file like below should give you what you want to do:
(I added the 'func' wrapper because I am assuming you will have multiple functions in one JSON)</p>
<pre><code>function_json = {
'func': {
    'x':5
    'y':4
    'multiplier':
'def multiplier(a,b):
    return a*b'
}

x=function_json['func']['x']
y=function_json['func']['y']
exec(function_json['func']['multiplier'])
multiplier(x,y) # will return 20
</code></pre>
<p>hope this helps</p>
</div>
<span class="comment-copy">That's <i>not</i> a JSON file. It's also not valid Python dictionary syntax.</span>
<span class="comment-copy">How do you feel about writing the function in a .py file instead, and importing that?</span>
<span class="comment-copy">@jonrsharpe minus the function definition, everything else seems fine about my JSON file. I'm trying to ask a way to work around this which is why I suggested wrapping the function definition in quotes to try and parse it using python into a valid function.</span>
<span class="comment-copy">I would suggest you to go with XML if you are thinking of storing this in a file format that is not executable by python and can be accessed in any language of your choice.</span>
<span class="comment-copy">Sure, storing just the module and function name in the json is technically feasible... <a href="https://docs.python.org/3/library/importlib.html#importlib.import_module" rel="nofollow noreferrer"><code>import_module</code></a> can import a module given its name, and you can get a function given its name using <code>getattr</code>. But it's hard to say whether this is the most practical approach for whatever it is you're trying to achieve.</span>
<span class="comment-copy">This is helpful, thank you! lambas are a great option, something that I need to get super used to writing as they can cut down the wordiness of UDFs. I will also be testing this method to see how complex I can get with my solution. Thank you again!</span>
<span class="comment-copy">hmm marshal looks helpful. It seems like an extra step to dumps first and then get it back, especially considering that I want to start from a JSON not from a python script, but I will see if I can implement this also. Thank you!</span>
<span class="comment-copy">This is helpful, thank you! I was unaware of 'exec' but I tried it and it works. I'll have to do some testing to see how complex I can get with this method</span>
<span class="comment-copy">I'd be careful with eval... it can be very dangerous...  but I guess so could this.</span>
<span class="comment-copy">Exec and eval do have issues, however the benefit of exec() over eval() is that it can take a whole block of code like a function and execute that. I find that exec() would work better than eval() for this application.</span>
