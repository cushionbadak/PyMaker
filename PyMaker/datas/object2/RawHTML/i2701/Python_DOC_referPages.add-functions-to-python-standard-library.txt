<div class="post-text" itemprop="text">
<p>Is there a way to add functions I create to the Python standard library on my local machine? </p>
<p>I come from the matlab world where things aren't really efficient and fast but there are looooads of functions at my fingertips without having to import their files. My problem is that, if I make a function in Python and want to use it, then i will need to also remember the module its in. My memory is shite. I understand that Python is structured that way for efficiency but if I'm adding only a handful of functions to the standard library that I consider very important, I'd guess that the impact to the performance is practically negligible. </p>
</div>
<div class="post-text" itemprop="text">
<p>Python has a namespace called <code>__builtins__</code> in which you can stick stuff that you want available all the time. You probably <em>shouldn't</em>, but you can. Be careful not to <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">clobber anything</a>. Python won't stop you from using the same name as a built-in function, and if you do that, it'll probably break a lot of things.</p>
<pre><code># define function to always be available
def fart():
    print("poot!")

__builtins__.fart = fart

# make re module always available without import
import re
__builtins__.re = re
</code></pre>
<p>Now the question is how to get Python to run that code for you each time you start up the interpreter. The answer is <code>usercustomize.py</code>. <a href="https://docs.python.org/3/tutorial/appendix.html#the-customization-modules" rel="nofollow noreferrer">Follow these instructions</a> to find out where the correct directory is on your machine, then put a new file called <code>usercustomize.py</code> in that directory that defines all the stuff you want to have in <code>__builtins__</code>.</p>
<p>There's also an environment variable, <code>PYTHONSTARTUP</code>, that you can set to have a Python script run whenever you start the interpreter in interactive mode (i.e. to a command prompt). I can see the benefit of e.g. having your favorite modules available when exploring in the REPL. More details <a href="https://docs.python.org/3/tutorial/appendix.html#the-interactive-startup-file" rel="nofollow noreferrer">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>It sounds like you want to create your own packages &amp; modules with tools you plan on using in the future on other projects. If that is the case, you want to look into the packaging your own project documentation:
<a href="https://packaging.python.org/tutorials/packaging-projects/" rel="nofollow noreferrer">https://packaging.python.org/tutorials/packaging-projects/</a></p>
<p>You may also find this useful:</p>
<ul>
<li><p><a href="https://stackoverflow.com/questions/47869521/how-to-install-a-python-package-system-wide-on-linux">How to install a Python package system-wide on Linux?</a></p></li>
<li><p><a href="https://stackoverflow.com/questions/17236675/how-to-make-my-python-module-available-system-wide-on-linux">How to make my Python module available system wide on Linux?</a></p></li>
<li><p><a href="https://stackoverflow.com/questions/36323888/how-can-i-create-a-simple-system-wide-python-library/36332776">How can I create a simple system wide python library?</a></p></li>
</ul>
</div>
<span class="comment-copy"><a href="https://packaging.python.org/tutorials/packaging-projects/" rel="nofollow noreferrer">packaging.python.org/tutorials/packaging-projects</a></span>
<span class="comment-copy">Why don't you just save all your custom functions to <code>myFunctions.py</code> and add <code>from myFunctions import *</code> in every python program. Then you don't need to worry about it.</span>
<span class="comment-copy">Why not create a single module and remember its name once and for all?</span>
<span class="comment-copy">You still have to import module's from the standard library...</span>
<span class="comment-copy">Maybe look at the <a href="https://docs.python.org/3.5/library/site.html#module-site" rel="nofollow noreferrer">site module</a> or if you are ok with a python 2 solution, look at the <a href="https://docs.python.org/2/library/user.html#module-user" rel="nofollow noreferrer">user module</a>.</span>
