<div class="post-text" itemprop="text">
<p>I have a sentence template string and a dictionary of desired replacement words:</p>
<pre><code>template = "Who was &lt;Name&gt;'s &lt;Job&gt; in &lt;Month&gt;?"
dictionary = {Name: [John,Peter,Paul],
              Job:  [Designer,Carpenter,Lawyer],
              Month:[October,July,March]
             }
</code></pre>
<p>I want to generate a list of sentences, one for each combination of replacements:</p>
<pre><code>question_list=["Who was &lt;John&gt;'s &lt;Lawyer&gt; in &lt;October&gt;?",
               "Who was &lt;Peter&gt;'s &lt;Lawyer&gt; in &lt;October&gt;?",
               "Who was &lt;John&gt;'s &lt;Designer&gt; in &lt;July&gt;?",
               ... ]
</code></pre>
<p>The order of the list doesn't matter, and I don't need to remove the brackets '&lt; &gt;'.</p>
<p>At the moment I have:</p>
<pre><code>def replace(template, dictionary):
    question_list = []
    for word in template:
        for key in dictionary:
            if word == key:
                new_string = template.replace(word, dictionary[key])
                question_list.append(new_string)
            return question_list
</code></pre>
<p>This returns <code>question_list</code> as an empty list.</p>
<p>I'm pretty sure my main problem is I don't know how/don't have a third <code>for loop</code> to access each item in the dictionary value lists, but I don't have enough experience to know how badly I'm screwing up.  How do I fix this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>re.sub</code> and <code>itertools.product</code>:</p>
<pre><code>import re, itertools
template = "Who was &lt;Name&gt;'s &lt;Job&gt; in &lt;Month&gt;?"
dictionary = {'Name': ['John', 'Peter', 'Paul'], 'Job': ['Designer', 'Carpenter', 'Lawyer'], 'Month': ['October', 'July', 'March']}
headers = re.findall('(?&lt;=\&lt;)\w+(?=\&gt;)', template)
full_vals = itertools.product(*[dictionary[i] for i in headers])
final_results = [re.sub('\&lt;\w+\&gt;', lambda x:'{'+x.group()[1:-1]+'}', template).format(**dict(zip(headers, i))) for i in full_vals]
</code></pre>
<p>Output:</p>
<pre><code>["Who was John's Designer in October?", "Who was John's Designer in July?", "Who was John's Designer in March?", "Who was John's Carpenter in October?", "Who was John's Carpenter in July?", "Who was John's Carpenter in March?", "Who was John's Lawyer in October?", "Who was John's Lawyer in July?", "Who was John's Lawyer in March?", "Who was Peter's Designer in October?", "Who was Peter's Designer in July?", "Who was Peter's Designer in March?", "Who was Peter's Carpenter in October?", "Who was Peter's Carpenter in July?", "Who was Peter's Carpenter in March?", "Who was Peter's Lawyer in October?", "Who was Peter's Lawyer in July?", "Who was Peter's Lawyer in March?", "Who was Paul's Designer in October?", "Who was Paul's Designer in July?", "Who was Paul's Designer in March?", "Who was Paul's Carpenter in October?", "Who was Paul's Carpenter in July?", "Who was Paul's Carpenter in March?", "Who was Paul's Lawyer in October?", "Who was Paul's Lawyer in July?", "Who was Paul's Lawyer in March?"]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If this was 3.6 and you can change your string, to an <code>f-string</code> and <code>product</code> you don't need regex to deal with it:</p>
<pre><code>dictionary = {'Name':['John','Peter','Paul'],'Job':['Designer','Carpenter','Lawyer'],'Month':['October','July','March']}

from itertools import product

l = [f"Who was {name}'s {job} in {month}?" for name, job, month in product(*dictionary.values())]

print(l)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>template</code> is a sequence of characters, not the word stream on which your code depends. <code>word</code> takes on the values <code>W</code>, <code>h</code>, <code>o</code>, <code></code>, ...</p>
<p>A quick fix could be: to nest loops for each thing you want to replace:</p>
<pre><code>question_list = []
for name in dictionary["Name"]:
    for job in dictionary["Job"]:
        for month in dictionary["Month"]:
            new_sent = template[:]    # copy of template
            for old, new in [("Name", name), ("Job", job), ("Month", month)]:
                template.replace(old, new)
            question_list.append(new)
</code></pre>
<p>This is still very brute-force, but is at the programming level you're using.  The triple-loop can be replaced with <code>itertools.product</code>, if you want to learn to use that package.  You can also automate the words you're replacing with a regex for words in angle brackets.  In fact, you can cram this entire process into a single-statement list comprehension, which you assign to <code>question_list</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>One of my approach would be...</p>
<pre><code>template = "Who was &lt;Name&gt;'s &lt;Job&gt; in &lt;Month&gt;?"
dicValues = {'Name': ['John', 'Peter', 'Paul'], 'Job': ['Designer', 'Carpenter', 'Lawyer'], 'Month': ['October', 'July', 'March']}

question_list=[]
for v in range(len(list(dicValues.values())[0])):
#for loop to identify how many values are contained for a single key
    tempFormed=template
    for k in dicValues.keys():
    #for loop to iterate through the keys Name, Job &amp; Month
        Formed=tempFormed.replace(k,dicValues.get(k)[v])
        tempFormed = Formed
    question_list.append(Formed)
question_list
</code></pre>
<p>Output:</p>
<pre><code>["Who was &lt;John&gt;'s &lt;Designer&gt; in &lt;October&gt;?",
 "Who was &lt;Peter&gt;'s &lt;Carpenter&gt; in &lt;July&gt;?",
 "Who was &lt;Paul&gt;'s &lt;Lawyer&gt; in &lt;March&gt;?"]
</code></pre>
</div>
<span class="comment-copy">Read <a href="https://ericlippert.com/2014/03/05/how-to-debug-small-programs/" rel="nofollow noreferrer">ericlippert.com/2014/03/05/how-to-debug-small-programs</a> for some tips on how to debug your code.</span>
<span class="comment-copy">the ‘word’ will never match because the angled brackets are included therefore nothing is being appended to the list</span>
<span class="comment-copy">You should also look at the <a href="https://docs.python.org/3/library/string.html" rel="nofollow noreferrer">string operations</a> that python gives you. These can help you write less code.</span>
<span class="comment-copy">Can you change your string?</span>
