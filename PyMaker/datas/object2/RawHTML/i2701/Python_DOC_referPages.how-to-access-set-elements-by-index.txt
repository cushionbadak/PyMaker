<div class="post-text" itemprop="text">
<p>I was working on recommendation system (RS) in python when I came across a serious problem: I couldn't access the set without changing its order.</p>
<p>e.g. Once I changed a set to list the order gets change. (In recommendation, system order is very important.)</p>
<p><code>final_prediction=set(df_final)-set(df1)</code></p>
<p>e.g.</p>
<pre><code>&gt;&gt;&gt; df_final=['a','x','z','p','s','j','b']
&gt;&gt;&gt; df1=['b','j']
&gt;&gt;&gt; set(df_final)-set(df1)
{'p', 'a', 's', 'z', 'x'}
</code></pre>
<p>Here <code>df_final</code> and <code>df1</code> both are categorical variables</p>
<p>Although I used other approach, I had to scratch my butt's to change the code because it was giving perfect results using set thing and all other things were just working fine. I was in the final phase of my RS, but because of the set order I had to take other approach.</p>
<p>How do we access an set without changing the order?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>set</code> is an unordered collection. For an ordered collection, you can use <code>list</code> or <code>tuple</code>. You now have a few options. Your choice should depend on whether you expect repeats in <code>df_final</code>. If you have no repeats, you can use a list comprehension:</p>
<pre><code>df1_set = set(df1)
res1 = [i for i in df_final if i not in df1_set]
# ['a', 'x', 'z', 'p', 's']
</code></pre>
<p>If you have repeats in <code>df_final</code>, then you need unique items with ordering maintained. For this, you can use <code>toolz.unique</code>, which is equivalent to the <code>unique_everseen</code> recipe found in <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">the docs</a>:</p>
<pre><code>from toolz import unique

res2 = [i for i in unique(df_final) if i not in df1_set]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The lists, the first one is ordered</p>
<pre><code>&gt;&gt;&gt; df_final=['a','x','z','p','s','j','b']
&gt;&gt;&gt; df1=['b','j']
</code></pre>
<p>This works but it's O(NÃ—M)</p>
<pre><code>&gt;&gt;&gt; [cat_var for cat_var in df_final if cat_var not in df1]
['a', 'x', 'z', 'p', 's']
</code></pre>
<p>This has a setup cost but it's O(N), if both lists are long...</p>
<pre><code>&gt;&gt;&gt; sdf1 = set(df1)
&gt;&gt;&gt; [cat_var for cat_var in df_final if cat_var not in sdf1]
['a', 'x', 'z', 'p', 's']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you need ordered sets, I recommend using the ActiveState <a href="https://code.activestate.com/recipes/576694/" rel="nofollow noreferrer">recipe</a> the Python <a href="https://docs.python.org/3/library/collections.abc.html?highlight=orderedset" rel="nofollow noreferrer">documentation</a> recommends in the "<strong>See also:</strong>" at the very end.</p>
<p>If you put the recipe's code in a separate file named <code>orderedset.py</code>, it can be <code>import</code>ed as a module and used like this:</p>
<pre><code>from orderedset import OrderedSet  # See https://code.activestate.com/recipes/576694

df_final = ['a','x','z','p','s','j','b']
df1 = ['b','j']
print(OrderedSet(df_final) - OrderedSet(df1))  # -&gt; OrderedSet(['a', 'x', 'z', 'p', 's'])
</code></pre>
</div>
<span class="comment-copy">As soon as you have a <code>set</code> you don't get order... can't you just remove values from <code>df_final</code> if they're in <code>df1</code> and keep it a list?</span>
<span class="comment-copy"><i>in recommendation system order is very important</i> Then perhaps you should not use a set, as sets are inherently unordered.</span>
<span class="comment-copy">It's a little bit of a cheat which I'm sure some will love in chat :p, but since you're making <code>df1_set</code> - you can also mutate that to store elements to also not use again (eg: the duplicated entries after)... so you end up with <code>[el for el in df_final if el not in df1_set and df1_set.add(el) is None]</code>... but deduplicating the input list is easier to grok...</span>
<span class="comment-copy">You can also (ab)use an OrderedDict to do the dedupe... <code>[el for el in OrderedDict.fromkeys(df_final) if el not in df1_set]</code> instead of a 3rd party library (although some of the recipes in the itertools documentation are also v. useful)</span>
<span class="comment-copy">@JonClements, Yes, I've seen that <code>OrderedDict.fromkeys</code> trick a few times. It certainly works, but I'm reluctant to recommend it as it seems a bit of a hack.</span>
