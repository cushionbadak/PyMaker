<div class="post-text" itemprop="text">
<p>I have an ordered dict:  </p>
<pre><code>import collections  
collections.OrderedDict([('key', {'keyword': {'blue', 'yellow'}}), ('key1', {'keyword': {'lock', 'door'}})])
</code></pre>
<p>and list of <code>potential_matches</code>: <code>[red, blue, one]</code> </p>
<p>I want to order these potential matches into one of two lists:<br/>
<code>correct = []</code> or <code>incorrect = []</code> </p>
<p>If the potential match is a keyword of one of the keys in the dict, then it goes in <code>correct</code>, else it goes in <code>incorrect</code>.  </p>
<p>Result of this example should be:<br/>
<code>correct = [blue]</code>, <code>incorrect = [red, one]</code> </p>
<p>Here is what I tried:  </p>
<pre><code>correct = []  
incorrect = []  
for word in potential_matches:
    for key, value in ordered_dict.items():
        if word in value["keyword"] and word not in correct:
            correct.append(word)
        elif word not in value["keyword"] and word not in correct and word not in incorrect:
            incorrect.append(word)  
</code></pre>
<p>Essentially, all remaining words that are not a match should simply go to the other list.   </p>
<p>Though it works, doesn't seem efficient. It must be a list to preserve order, and lists may overlap.   </p>
<p>Note: I asked a similar question previously although in that case the situation and answer called for the use of a python set, as items were unique.  </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>v=[x for i in od.values() for x in list(i.values())[0]]
l=['red','blue','one']
correct=[i for i in v if i in l]
incorrect=[i for i in l if i not in v]
print(correct)
print(incorrect)
</code></pre>
<p>Output:</p>
<pre><code>['blue']
['red', 'one']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You first need to get values from your <code>OrderedDict</code>, then you can use simple list comprehension to get the values. To get the values you can use <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>operator.itemgetter</code></a> along with <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain</code></a>. This will give you a flat list of values.</p>
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; from operator import itemgetter

&gt;&gt;&gt; values = list(chain(*map(itemgetter('keyword'), list(d.values()))))
&gt;&gt;&gt; values
&gt;&gt;&gt; ['yellow', 'blue', 'lock', 'door']
&gt;&gt;&gt; m = ['red', 'blue', 'one']

&gt;&gt;&gt; correct = [s for s in m if s in values]
&gt;&gt;&gt; correct
&gt;&gt;&gt; ['blue']

&gt;&gt;&gt; incorrect = [a for a in m if a not in values]
&gt;&gt;&gt; incorrect
&gt;&gt;&gt; ['red', 'one']
</code></pre>
</div>
<span class="comment-copy">anyway you can adjust for code readability?</span>
<span class="comment-copy">@Casper Now it's better</span>
<span class="comment-copy">What are the advantages or important differences btwn this method and the other answer?</span>
<span class="comment-copy">The only difference is to fetch list of values. The <code>timeit</code> stats is almost the same <code>~1.4 uses per loop</code> for both solution . My solution uses a key <code>keyword</code> to fetch the values of nested dict, where as the above solution uses index <code>0</code> to be fixed for key <code>keyword</code>. Also if you are open to use <code>sets</code> to instead of list it will give you a performance increase.</span>
