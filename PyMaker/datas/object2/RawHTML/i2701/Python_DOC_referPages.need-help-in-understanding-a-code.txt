<div class="post-text" itemprop="text">
<p>Can anyone explain this code a little. I can't understand what <code>n</code> does here? We already have taken <code>N = int(input())</code> as input then why <code>n=len(bin(N))-2</code>? I couldn't figure it out.</p>
<pre><code>N = int(input())
n = len(bin(N))-2
for i in range(1,N+1):
    print(str(i).rjust(n) + " " + format(i,'o').rjust(n) + " " + format(i,'X').rjust(n) + " " + format(i,'b').rjust(n))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>n</code> counts the number of <em>bits</em> in the number <code>N</code>. <code>bin()</code> produces the binary representation (zeros and ones), as as string with the <code>0b</code> prefix:</p>
<pre><code>&gt;&gt;&gt; bin(42)
'0b101010'
</code></pre>
<p>so <code>len(bin(n))</code> takes the length of that output string, minus 2 to account for the prefix.</p>
<p>See the <a href="https://docs.python.org/3/library/functions.html#bin" rel="nofollow noreferrer"><code>bin()</code> documentation</a>:</p>
<blockquote>
<p>Convert an integer number to a binary string prefixed with “0b”.</p>
</blockquote>
<p>The length is used to set the width of the columns (via <a href="https://docs.python.org/3/library/stdtypes.html#str.rjust" rel="nofollow noreferrer"><code>str.rjust()</code></a>, which adds spaces to the front of a string to create an output <code>n</code> characters wide). Knowing how many characters the widest binary representation needs is helpful here.</p>
<p>However, the same information can be gotten <em>directly</em> from the number, with the <a href="https://docs.python.org/3/library/stdtypes.html#int.bit_length" rel="nofollow noreferrer"><code>int.bitlength()</code> method</a>:</p>
<pre><code>&gt;&gt;&gt; N = 42
&gt;&gt;&gt; N.bit_length()
6
&gt;&gt;&gt; len(bin(N)) - 2
6
</code></pre>
<p>The other columns are also oversized for the numbers. You could instead calculate max widths for each column, and use <code>str.format()</code> or an f-string to do the formatting:</p>
<pre><code>from math import log10

N = int(input())
decwidth = int(log10(N) + 1)
binwidth = N.bit_length()
hexwidth = (binwidth - 1) // 4 + 1
octwidth = (binwidth - 1) // 3 + 1

for i in range(1, N + 1):
    print(f'{i:&gt;{decwidth}d} {i:&gt;{octwidth}o} {i:&gt;{hexwidth}X} {i:&gt;{binwidth}b}')
</code></pre>
</div>
