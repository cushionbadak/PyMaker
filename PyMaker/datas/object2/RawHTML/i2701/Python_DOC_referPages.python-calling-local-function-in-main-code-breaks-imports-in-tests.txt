<div class="post-text" itemprop="text">
<p>I have had it up to here with Python's import system... thought I'd finally got something reliable and then the inexplicable happens!</p>
<p>This is the directory structure of my application:</p>
<pre><code>/
- my-application/
 - subpackage/
  - __init__.py
  - my_module.py
 - __init__.py
- tests/
 - subpackage/
  - __init__.py
  - test_my_module.py
 - __init__.py
 - conftest.py
 - run.py
 - spark.py
</code></pre>
<p>I run all my tests through <code>tests/run.py</code>, which looks like the following (in an attempt to resolve all the import problems):</p>
<pre><code>import os
import pytest
import sys

rootdir = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))

sys.path.insert(0, os.path.abspath(os.path.join(rootdir, "my-application")))

sys.exit(pytest.main([os.path.join(rootdir, "tests")]))
</code></pre>
<p>This worked like an absolute charm, until I made one modification to the file <code>/my-application/subpackage/my-module.py</code> - I added a local function call. So e.g. my_module.py:</p>
<pre><code>def foo():
  pass

def run_my_module():
  def bar():
    foo()          &lt;---- Added this line

  bar()
  print("Ran")
</code></pre>
<p><em>UPDATE</em>: THIS works fine:</p>
<pre><code>def foo():
  pass

def run_my_module():
  def bar():
    pass

  foo()
  bar()
  print("Ran")
</code></pre>
<p>As soon as I added that local function call, the tests stop working, with the error <code>No module named "subpackage"</code>.</p>
<p>The <code>test_my_module.py</code> looks like this (basically):</p>
<pre><code>from subpackage.my_module import run_my_module

def basic_test():
    run_my_module()
</code></pre>
<p>Note that in <code>test_my_module.py</code> I am using <code>subpackage</code> as the first part of my import statement, because I am using the <code>run.py</code> file that sets <code>my-application</code> as a system path. If I change the import to start with <code>my_application</code> I get the same error referring to <code>my_application.py</code>.</p>
<p>I am still learning python, so suggest any change to my application structure you like. I can't believe the hassle of this import system - I do feel like I'm missing something basic here...</p>
<p>Thank you in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>Managing import paths manually is difficult.<br/>
A <code>setup.py</code> is the best way to manage python packages.  </p>
<p>by convention package names should use <code>_</code> not <code>-</code>.</p>
<p>Create a <code>setup.py</code> with this content next to <code>my_application/</code></p>
<pre><code>from setuptools import find_packages, setup

setup(
    name='my_application',
    version='0.0.1',
    packages=find_packages(),
)
</code></pre>
<p>I recommend an application structure like the following:</p>
<pre><code>$ tree

├── my_application
│   ├── __init__.py
│   ├── spark.py
│   └── subpackage
│       ├── __init__.py
│       └── my_module.py
├── setup.py
└── tests
    ├── conftest.py
    └── subpackage
        ├── __init__.py
        └── test_my_module.py
</code></pre>
<h2>Install package locally</h2>
<p><code>python setup.py develop</code>
This will symlink (magically) install your package into the python package path<br/>
Now in any scripts you can use paths as you'd expect e.g.  </p>
<pre><code>from my_application.subpackage.my_module import run_my_module
</code></pre>
<p>also recommend you use a <a href="https://docs.python.org/3/library/venv.html" rel="nofollow noreferrer">virtualenv</a></p>
<p>More on <code>setup.py</code> <a href="https://pythonhosted.org/an_example_pypi_project/setuptools.html" rel="nofollow noreferrer">here</a></p>
</div>
<span class="comment-copy">Have you tried <code>from .subpackage.my_module import run_my_module</code>?</span>
<span class="comment-copy">That made it fail quicker, now with the error "No module named tests.subpackage.subpackage".</span>
<span class="comment-copy">I've updated the code a bit - so the problem only happens when the local function call comes from a function defined within a function; calling the function from the same level works fine. Hope that makes sense. This is very weird.</span>
<span class="comment-copy"><code>- __init.py</code> should this be <code>__init__.py</code></span>
<span class="comment-copy">Sorry yes my mistake in the question - it's correct in the actual code.</span>
<span class="comment-copy">Okay, this is very useful! One question though - based on your description this basically creates a symlink in the python system path to the package, if I've understood that correctly? How is that actually conceptually any different from just adding the package path to the system path as I have done?</span>
<span class="comment-copy">Conceptually its the same if you do it correctly but you'll likely do something unexpected and end up in your situation having to debug package naming double ups, relative imports overriding what you added to the PYTHONPATH etc.</span>
