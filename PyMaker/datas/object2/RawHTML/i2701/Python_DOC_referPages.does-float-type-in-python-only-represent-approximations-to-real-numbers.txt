<div class="post-text" itemprop="text">
<p>I'm new to programming and studying the basic now. I'm wondering that does the float type in python only represent approximations to real number? I know float uses binary fractions but are the floats 0.5, 0.25, 0.125, etc still the approximations? I tried:</p>
<pre><code>sum([0.1] * 10) == 1
</code></pre>
<p>it returned False.</p>
<p>But</p>
<pre><code>sum([0.5] * 10) == 5
</code></pre>
<p>It returned True.</p>
<p>Finally I tried:</p>
<pre><code>for i in range(1, 8):
    answer = sum([1 / 2 ** i] * 10)
    print(answer == 1 / 2 ** i * 10)
</code></pre>
<p>The answer is all True. </p>
<p>It's that means some floats in python are exactly the real number not the approximations? </p>
</div>
<div class="post-text" itemprop="text">
<p>Each floating-point object represents one number (or special value such as NaN) exactly. Floating-point objects do not represent approximations.</p>
<p>The correct way to think about floating-point is that floating-point values are exact numbers, but floating-point operations approximate real arithmetic.</p>
<p>Python does not specify floating-point arithmetic precisely; each Python implementation may use the underlying arithmetic of the platform it is implemented on. Commonly, IEEE 754 formats are used, although the operations may not conform to IEEE 754 completely. To illustrate what is happening with your code, I will use IEEE-754 basic 64-bit binary floating-point.</p>
<p>When the source text <code>0.5</code> is processed, it is converted to floating-point. Note that conversion is an operation, just as addition or multiplication are operations. The characters are interpreted as a decimal numeral, and the conversion produces the floating-point number that is closest to the number represented by the decimal numeral. In this case, <code>0.5</code> represents one-half, and that is exactly representable in binary floating-point, so the result is exactly 0.5.</p>
<p>Then <code>[0.5] * 10</code> produces a list containing ten copies of 0.5, and <code>sum</code> adds those. All of the additions performed in this summation are exact, because the floating-point format can exactly represent 0.5, 1, 1.5, 2, and so on. So the result is 5, exactly, and comparing this to 5 produces true.</p>
<p>On the other hand, when the source text <code>0.1</code> is processed, that decimal numeral represents one-tenth, which cannot be represented exactly. The conversion produces the nearest representable value, which is 0.1000000000000000055511151231257827021181583404541015625.</p>
<p>When <code>sum</code> adds the ten copies of this, the addition cannot always be performed exactly. Adding the first two is exact, adding 0.1000000000000000055511151231257827021181583404541015625 to 0.1000000000000000055511151231257827021181583404541015625 produces 0.200000000000000011102230246251565404236316680908203125. However, when 0.200000000000000011102230246251565404236316680908203125 is added to 0.1000000000000000055511151231257827021181583404541015625, the result is 0.3000000000000000444089209850062616169452667236328125. During this addition, the bits in the addition carried to a new position (the operands are under ¼, but the result is over ¼—the addition carried into the ¼ position. Since the floating-point format has only a fixed number of bits (53) available for the value, the operation had to discard the low bit. In doing so, it changed the result slightly. So this addition is only approximate.</p>
<p>As these additions go on, the final value is 0.99999999999999988897769753748434595763683319091796875. When this is compared to 1, the result is false.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python represents floating point numbers as binary fractions. Therefore numbers like <code>0.5</code> can be represented accurately, whereas <code>0.1</code> for example can not.
Floating point numbers in Python are just approximations, if they can not be exactly represented using binary fractions.
If you need more accuracy when dealing with floating point arithmetic, I would suggest taking a look at decimals: <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer">https://docs.python.org/3/library/decimal.html</a></p>
<p>Additionally, a good resource on floating point numbers in Python can be found here: <a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/floatingpoint.html</a></p>
</div>
