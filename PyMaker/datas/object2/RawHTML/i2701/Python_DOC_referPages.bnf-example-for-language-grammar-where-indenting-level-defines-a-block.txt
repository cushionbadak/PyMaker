<div class="post-text" itemprop="text">
<p>I attempt to document a syntax I use in <code>menuentries.conf</code>, which is a configuration file for menu entries, by describing the syntax / grammar using the notation known as extended Backus-Naur-Form <a href="https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form" rel="nofollow noreferrer">EBNF</a>(<a href="https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form" rel="nofollow noreferrer">BNF</a>) This menuentries.conf uses indenting levels as syntactical component as should be displayed in this example:</p>
<pre><code>menu_entry_1
menu_entry_2
    menu_entry_2_submenu_entry_1
    menu_entry_2_submenu_entry_2
        menu_entry_2_submenu_entry_2_subsubmenu_1
        menu_entry_2_submenu_entry_2_subsubmenu_2
    menu_entry_2_submenu_entry_3
menu_entry_3
    menu_entry_3_submenu_entry_1
</code></pre>
<p>In the above example each entry is represented by a string, which for the sake of the example implies/indicates its position. In addition the example should follow these rules</p>
<ul>
<li>each menu item is represented by single line (hence the menu entries are delimited by NEWLINE)</li>
<li>menu entries <em>without</em> any indenting are "top level" menu entries</li>
<li>menu entries <em>with</em> an indenting are <em>not</em> "top level" but child entries to the respective higher/upper level menu entry.</li>
</ul>
<p>My attempt at providing a BNF is the following:</p>
<pre>NEWLINE := '\n'
INDENTING := '    '
menu_entry_string := ('a'|'b'|....|'z'|'_'|'0'|'1'|...|'9')+
menu_entries := menu_entry (NEWLINE menuentry)*
menu_entry := menu_entry_string (NEWLINE INDENTING menu_entry)*
submenu_entry := INDENTING menu_entry_string
subsubmenu_entry := INDENTING INDENTING menu_entry_string</pre>
<p>My question hence is with regards to my disatisfaction of the recursively declared notion <code>menu_entry</code> and its redundancy with <code>submenu_entry</code> and <code>subsubmenu_entry</code>.<br/>
Knowing that python uses indenting as well to create the notion of blocks, I thought to look up the BNF/definition of pythons grammar (as found here: <a href="https://docs.python.org/3/reference/grammar.html" rel="nofollow noreferrer">https://docs.python.org/3/reference/grammar.html</a>) but it leaves the relevant notions of <code>INDENT</code> and <code>DEDENT</code> out of is grammar. </p>
<p>My question is hence:
<strong>How to correctly use EBNF to describe a grammar/syntax in which indenting is employed as a grouping block?</strong>
Ideally a small example (or if possible correction of my attempt) would be appreciated.</p>
<p>In the best case scenario the EBNF would define the notion of <code>nesting-level</code> of the <code>block</code> which would be: 1 for submenu_entry and 2 for subsubmenu_entry ....</p>
</div>
<div class="post-text" itemprop="text">
<p>You might be thinking with a mind of a programmer when you need the mind of a language creator.  There are traditionally two parts to creating a language:</p>
<ol>
<li>Lexeme specification: defines groups of characters that represent a single syntactic construct (i.e. a token or terminal value)</li>
<li>Grammar specification: defines the valid combinations of syntactic constructs/tokens/terminal values that make up non-terminal values that express how the language can be used</li>
</ol>
<p>Some languages are able to combine the lexical and syntactic parts of language creation, but doing so in your case is not a good idea because grammars by themselves cannot express the idea of specific indentation alone.  That's something you'd leave for a lexer to handle.</p>
<p>Below is the BNF grammar, where <code>STRING</code>, <code>NEWLINE</code>, <code>INDENT</code>, and <code>DEDENT</code> are all terminal values generated by your lexer:</p>
<pre><code>start ::= list
        | list NEWLINE
        .

list  ::= entry
        | list entry
        .

entry ::= STRING NEWLINE
        | STRING NEWLINE INDENT list DEDENT
        .
</code></pre>
<p>Simple enough, right?  I included the <code>start</code> rule to ensure that any file ending with a  <code>NEWLINE</code> or <code>DEDENT</code> token is valid.  Without it, a file ending in a <code>NEWLINE</code> token that wasn't preceded by a <code>STRING</code> token would be invalid.</p>
<p>I used BNF, but you can just as easily use EBNF if you wish.  The point is that a lexer can understand how many spaces of indentation are used to generate an <code>INDENT</code> or <code>DEDENT</code> token (or an error if necessary), and your grammar should simply specify how to work with the tokens generated.</p>
</div>
<span class="comment-copy">firstly, many thanks for your answer, secondly is possible could you give an insight if it was possible at all to have INDENT and DEDENT not being result/outcome/part of the lexer?</span>
<span class="comment-copy">@humanityANDpeace With a parser that handles these things, sure, you don't need the lexer to handle it, but the grammar itself cannot describe what you want as <code>INDENT</code> and <code>DEDENT</code> because the amount of space they represent will vary.</span>
