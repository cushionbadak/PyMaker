<div class="post-text" itemprop="text">
<p>In Python, there are conventions for single leading underscore, double leading underscore, double leading + double trailing underscore, and single trailing underscore.  Many of those are outlined in the answers at <em><a href="https://stackoverflow.com/q/1301346/974555">What is the meaning of a single- and a double-underscore before an object name?</a></em>.</p>
<p>But what is the meaning or convention for single leading + single trailing underscore?  I've first seen their use in the <a href="https://docs.python.org/3/library/enum.html#supported-sunder-names" rel="noreferrer"><code>enum</code> module</a>:</p>
<blockquote>
<p>8.13.15.3.2. Supported <code>_sunder_</code> names</p>
<ul>
<li><code>_name_</code> – name of the member</li>
<li><code>_value_</code> – value of the member; can be set / modified in <strong>new</strong></li>
<li><code>_missing_</code> – a lookup function used when a value is not found; may be overridden</li>
<li><code>_ignore_</code> – a list of names, either as a list() or a str(), that will not be transformed into members, and will be removed from the final class</li>
<li><code>_order_</code> – used in Python 2/3 code to ensure member order is consistent (class attribute, removed during class creation)</li>
<li><code>_generate_next_value_</code> – used by the Functional API and by auto to get an appropriate value for an enum member; may be overridden</li>
</ul>
</blockquote>
<p>I have not seen such single-leading-single-trailing underscore <em>sunder</em> names before.  Are they treated in any special way, or otherwise have an implied meaning that is distinct from any of the other underscore-related naming conventions?  How are they different from having no underscores at all?</p>
</div>
<div class="post-text" itemprop="text">
<p>They are not treated in any special way. They are being used by the enum module so as to</p>
<ul>
<li>Not to be accidentally overridden</li>
</ul>
<p>e.g.</p>
<pre><code>class Status(Enum):
    alive = auto()
    dead = auto()
    missing = auto()
</code></pre>
<p>You can see that <code>Status.missing</code> and <code>Status._missing_</code> are different objects. If <code>_sunder_</code> names, were allowed, we could accidentally override the <code>_missing_</code> function which would cause unexpected errors. </p>
<ul>
<li><p>not appear as private. The name <code>_value</code> in python is considered private. To express that these are not private (which again, a user might want an enum value to be private), they are instead given sunder names</p></li>
<li><p>other alternatives such as <code>__double_leading_underscore</code> and <code>__dunder__</code> also have special meanings in python as you stated above. <code>_sunder_</code> methods in <code>Enum</code> act something like the <code>_dunder_</code> protocols of pure python, but aren't reserved by the language.</p></li>
</ul>
<p>Basically, it's an option to avoid attribute name conflicts without giving the wrong impression.</p>
</div>
<span class="comment-copy">But <code>_name_</code> and <code>_value_</code> are attributes on the <code>Enum</code> type, not on the metaclass <code>EnumMeta</code>.  <code>class Test(Enum): a = 0</code>, then <code>Test.a._name_ == 'a'</code>, <code>Test._name_</code> however yields <code>AttributeError</code>. I can see how attribute name conflicts need to be prevented on <code>EnumMeta</code>, but where is the conflict risk on the resulting <code>Enum</code> type?</span>
<span class="comment-copy">Besides, <code>Test.a.name</code> and <code>Test.a.value</code> <i>also</i> work, so it appears <code>_name_</code> and <code>_value_</code> are just synonyms for <code>name</code> and <code>value</code>, respectively.</span>
<span class="comment-copy">As the author of <code>Enum</code>, I approve this answer.  ;-)</span>
