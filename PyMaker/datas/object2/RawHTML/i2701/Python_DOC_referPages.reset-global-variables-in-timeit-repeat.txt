<div class="post-text" itemprop="text">
<h3>Scenario</h3>
<p>Let <code>test</code> be the module we run as <code>__main__</code>. This module contains one global variable named <code>primes</code>, which is initialized in the module with the following assignment.</p>
<pre><code>primes = []
</code></pre>
<p>The module also contains a function named <code>pi</code>, which alters this global variable:</p>
<pre><code>def pi(n):
    global primes
    """Some code that modifies the global 'primes' variable"""
</code></pre>
<p>I then want to time said function using the builtin <code>timeit</code> module. I want to use the <code>timeit.repeat</code> function and get the minimum value of the timing, as a way of improving the measurement's accuracy (instead of measuring just one time, which may be subject to slow-down due to unrelated processes).</p>
<pre><code>print(min(timeit.repeat('test.pi(50000)',
                        setup="import test",
                        number=1, repeat=10)) * 1000)
</code></pre>
<p>The problem is that the <code>pi</code> function behaves differently depending on the value of <code>primes</code>: I expected that, for each repetition, the <code>import test</code> statement in the <code>setup</code> parameter would re-run the <code>primes = []</code> statement in the <code>test</code>, thus 'resetting' <code>primes</code> so that the code being executed would be identical for each repetition. But, instead, the value of <code>primes</code> that resulted from the previous execution is used, so I had to add the statement <code>test.primes = []</code> to the <code>setup</code> parameter:</p>
<pre><code>print(min(timeit.repeat('test.pi(50000)',
                        setup="import test \n" + "test.primes = []",
                        number=1, repeat=10)) * 1000)
</code></pre>
<p><br/></p>
<h3>Question</h3>
<p>This leads me to the question: is there a direct way (i.e. in one statement) to 'reset' the values of <strong>all</strong> the global variables to what they were when they were first assigned in the module?</p>
<p>In this specific scenario adding that one statement to manually 'reset' <code>primes</code> works fine, but consider a case in which there are a lot of global variables, and you want to 'reset' all of them.</p>
<p><br/></p>
<h3>Side quest ion</h3>
<p>Why doesn't the statement <code>import test</code> re-run the initial <code>primes = []</code> assignment?</p>
</div>
<div class="post-text" itemprop="text">
<p>Let's start with your side question, because it turns out that it's actually central to everything:</p>
<blockquote>
<p>Why doesn't the statement <code>import test</code> re-run the initial <code>primes = []</code> assignment?" </p>
</blockquote>
<p>Because, as explained in the docs on <a href="https://docs.python.org/3/reference/import.html" rel="nofollow noreferrer">the import system</a> and <a href="https://docs.python.org/3/reference/simple_stmts.html#the-import-statement" rel="nofollow noreferrer">the <code>import</code> statement</a>, what <code>import test</code> does is, loosely, this pseudocode:</p>
<pre><code>if 'test' not in sys.modules:
    find, load (compiling if needed), and exec the module
    sys.modules['test'] = result
test = sys['test.modules']
</code></pre>
<p>OK, but <em>why</em> does it do that?</p>
<ul>
<li><p>If you have two modules that both import the same module, they expect to see the same globals. And remember that types, functions, etc. defined at the top level of a function are all globals. For example, if <code>sortedlist.py</code> imports <code>collections.abc</code> to <code>class SortedList(collections.abc.Sequence):</code>, and <code>scraper.py</code> imports <code>collections.abc</code> to <code>isinstance(something, collections.abc.Sequence)</code>, you'd want a <code>SortedList</code> to pass that test—but it won't if those are two completely independent types because they came from two different module objects that happen to have the same name,</p></li>
<li><p>If you have 12 modules that all <code>import pandas as pd</code>, you'd be running all the Pandas initialization code 12 times. Except that some of your modules also probably import each other, so they'd each be run multiple times, and import Pandas each time. How long do you think it would take to run all the Pandas initialization 60 times?</p></li>
</ul>
<hr/>
<p>So, reusing existing modules is <em>almost always</em> what you want.</p>
<p>And when you don't, that's usually a sign that there's something wrong with your design (which may well be the case here).</p>
<p>But "almost always" isn't "always". So there are ways around it. None of them are usually a good idea for live code, but for things like unit tests and benchmarking, there are three basic options that are all fine, as long as the tradeoffs are the ones you want:</p>
<ul>
<li><a href="https://docs.python.org/3/library/sys.html#sys.modules" rel="nofollow noreferrer"><code>del sys.modules['test']</code></a>. This is obviously pretty hacky, but it actually does exactly what you want here. Any existing references to the old module are completely untouched, but the next time anyone does <code>import test</code>, they're going to get a brand-new <code>test</code> module.</li>
<li><a href="https://docs.python.org/3/library/importlib.html#importlib.reload" rel="nofollow noreferrer"><code>importlib.reload(test)</code></a>. This sounds great, but it may on the one hand be overkill (notice that it forces the module source to be recompiled, which you don't need), while on the other it may not be sufficient (it doesn't actually reset the globals—if your code does <code>primes = []</code> at the top level, that line gets executed, so who cares, but if your code instead does, say, <code>globals().setdefault('primes', [])</code> inside the <code>pi</code> function, you care).</li>
<li>Instead of <code>import test</code>, manually do all the steps up through executing the module (see the <a href="https://docs.python.org/3/library/importlib.html#examples" rel="nofollow noreferrer">examples</a> in the <code>importlib</code> docs), but don't store it in <code>sys.modules['test']</code> or in <code>test</code>, just store it in a local variable you discard after each test. This is probably the cleanest, although it does mean 6 lines of code instead of 1.</li>
</ul>
</div>
<span class="comment-copy">"but consider a case in which there are a lot of global variables, and you want to 'reset' all of them." That's simply poor program design. I would advise writing your code so that it doesn't rely on mutable global state, a classic anti-pattern.</span>
<span class="comment-copy">But if you <i>insist</i> on the poor design, you can use <code>import importlib; importlib.reload('test')</code></span>
<span class="comment-copy">If you're asking about globals preserved between outer "repeat" loops, or separate timeit calls, then your problem is that you're wishing <code>import</code> would do a clean re-import, and you can do that hackily by just <code>del sys.imports['test']</code>, or cleanly by writing a 5-line function that manually imports and preps <code>test.py</code> without adding it to <code>sys.modules</code> in the first place.</span>
<span class="comment-copy">@juanpa.arrivillaga I don't think you want <code>reload</code>. That will force a recompile of the source, which is usually just unnecessary overhead. Also, it doesn't actually reset the globals—if there's top-level module code that does a <code>primes = []</code>,that code will be rerun, so who cares… but if there were some horrible code inside the test function that does something like <code>globals().setdefault('primes', [])</code> (which I wouldn't dismiss out of hand, given the question…), it won't.</span>
<span class="comment-copy">@abarnert Thank you. I guess that if I wanted to write a custom 'import function' that doesn't add to <code>sys.modules</code> I would find the needed resources in the documentation you linked?</span>
