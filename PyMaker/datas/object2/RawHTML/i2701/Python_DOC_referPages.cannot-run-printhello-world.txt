<div class="post-text" itemprop="text">
<p>I'm trying to use the max function in Python 3,6:</p>
<pre><code>print('Maximum is:', max(1, 3, 2, 5, 4))
</code></pre>
<p>And the result is </p>
<pre><code>  File "E:/ProgramyRobione/untitled1.py", line 2, in &lt;module&gt;
    print('Maximum is:', max(1, 3, 2, 5, 4))

TypeError: 'int' object is not callable
</code></pre>
<p>I'm using Spyder and that line is all that code should do.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a bit of an iPython headshot that comes with Spyder. I've fallen foul of this when copy/pasting random bits of code from SO to test only to find really odd behaviour several days later - variables defined in the iPython console will also be in the script's global namespace indefinitely. </p>
<p>There's two things you can do:</p>
<ol>
<li>A hard restart of the Kernel (<code>ctrl</code> + <code>.</code>)</li>
<li>Follow up on <a href="https://github.com/spyder-ide/spyder/issues/2563" rel="noreferrer">this</a> feature request thread where it's now possible to clear the namespace automatically every time you run a script.</li>
</ol>
</div>
<span class="comment-copy">Evidently you've assigned <code>max = </code> somewhere; don't do that.</span>
<span class="comment-copy">@dkato actually they don't - <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#max</a>. Also it's helpful to describe what you're actually <i>doing</i> with that - <i>"pass a list or tuple of numbers"</i>, to relate the syntax to something the OP can search for.</span>
<span class="comment-copy">It is a builtin but you've got something that isn't - can you show the first line of your code?</span>
<span class="comment-copy">It doesn't have to be an exotic Python interpreter. This is actually very easy to recreate if you defined <code>max = some_int</code> in the iPython console of Spyder and then try to run your script since there is a global namespace. If you're using an IDE which supports this, try restarting the console (usually ctrl + .)</span>
<span class="comment-copy">@dkato btw - you can delete your own comments... just hover over them and you'll get an <code>(x)</code> at the end of it - click that and it's gone - no need to edit it to say it's deleted :)</span>
<span class="comment-copy">thanks for the link.</span>
<span class="comment-copy">(<i>Spyder maintainer here</i>) The feature to remove all variables before execution is already implemented in Spyder since its version <b>3.1</b>.</span>
<span class="comment-copy">@CarlosCordoba I downloaded on this laptop after 1st December (I don't know the exact date but <i>definitely</i> after that as I was abroad until then) and by default there is namespace interference. I acknowledge the feature in my answer but I definitely could recreate the OP's issue easily. Script --&gt; console access is <i>awesome</i> but I've had nothing but trouble from console --&gt; script.</span>
<span class="comment-copy">@CarlosCordoba I should acknowledge that I also think Spyder is awesome and it's my IDE of choice but having this turned on by default has caused some real debugging issues for me in the past. Maybe it's me, but I didn't expect it to pollute the namespace of my script at all by default.</span>
<span class="comment-copy">@roganjosh, three things: 1. It's true that cleaning the namespace if off by default, but the option to turn that on is there now; 2. We also provide an evaluation model which runs each file in its dedicated console. Under that model, the namespace is cleaned every time a file is rerun, and you can activate it in <code>Run &gt; Configuration per file</code> or <code>Preferences &gt; Run</code> to make it global; 3. It's probably not intuitive to leave results from previous evaluation in the console and pollute your namespace with them, but people coming from Matlab are very accustomed to it.</span>
