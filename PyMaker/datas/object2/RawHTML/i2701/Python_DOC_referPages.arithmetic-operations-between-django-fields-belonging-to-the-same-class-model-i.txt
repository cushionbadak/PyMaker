<div class="post-text" itemprop="text">
<p>I have the need to divide a class field (Value) in Django-admin model with a fixed value (coefficient) in the same class. 
The result of this operation should populate another field (Points) of the same class. Both values are of same type (integers).</p>
<p>For example a user enter a value of '180', then he leaves coefficient to its default '10'. When it saves the new entry it should show up <code>Points = 18</code></p>
<p>So for the moment I defined <code>'coefficient'</code> field in Django <code>models.py</code> which defaults to 10.
'Value' field is editable as I said above.
I thought to use <code>F()</code> to perform math operations between fields however I am not sure if this is the correct tool or there's something simpler.
When I set up the following expression on my model I see alot complaints when I make db migrations.</p>
<pre><code>Points = Visits.objects.all().annotate(div=F('Value') / F('Coefficient'))
</code></pre>
<p>Since I am new to Django I appreciate any help on this, maybe I am misunderstanding something obvious.</p>
</div>
<div class="post-text" itemprop="text">
<h2>Method-1</h2>
<p>Override <strong><code>save()</code></strong> method of <strong><code>Value</code></strong> model, as</p>
<pre><code>class Visits(models.Model):
    value = models.IntegerField()
    coefficient = models.IntegerField()
    points = models.IntegerField(blank=True, null=True, editable=False)

    <b>def save(self, *args, **kwargs):
        self.points = int(self.value / self.coefficient)
        super().save(*args, **kwargs)</b></code></pre>
<p><br/></p>
<h2>Method-2</h2>
<p>use <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer"><strong><code>@property</code></strong></a> decorator<br/></p>
<pre><code>class Visits(models.Model):
    value = models.IntegerField()
    coefficient = models.IntegerField()

    <b>@property
    def points(self):
        return int(self.value / self.coefficient)</b></code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can simply override the <code>save()</code> method of your model to calculate the <code>Points</code> field:</p>
<pre><code>    def save(self, *args, **kwargs):
        self.Points = self.Value / self.Coefficient
        super().save(*args, **kwargs)
</code></pre>
<p>You might also want to check for and handle division by zero here.</p>
</div>
