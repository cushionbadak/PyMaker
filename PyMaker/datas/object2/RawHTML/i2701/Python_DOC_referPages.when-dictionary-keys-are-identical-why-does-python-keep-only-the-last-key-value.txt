<div class="post-text" itemprop="text">
<p>Let's say I create a dictionary <code>a_dictionary</code> where two of the key-value pairs have an identical key:</p>
<pre><code>In [1]: a_dictionary = {'key': 5, 'another_key': 10, 'key': 50} 

In [2]: a_dictionary
Out[2]: {'key': 50, 'another_key': 10}
</code></pre>
<p>Why does Python choose here to keep the last key-value pair instead of throwing an error (or at least raising a warning) about using identical keys?</p>
<p>The way I see it, the main downside here is that you may lose data without being aware.</p>
<p>(If it's relevant, I ran the code above on Python 3.6.4.)</p>
</div>
<div class="post-text" itemprop="text">
<p>If your question is why Python dict displays were originally designed this way… Probably nobody knows.</p>
<hr/>
<p>We know <em>when</em> the decision was made. Python 0.9.x (1991-1993) didn't have dict displays; Python 1.0.x (1994) did. And they worked exactly the same as they do today. From the docs:<sup>1</sup></p>
<blockquote>
<p>A dictionary display yields a new dictionary object.</p>
<p>The key/datum pairs are evaluated from left to right to define the
  entries of the dictionary: each key object is used as a key into the
  dictionary to store the corresponding datum.</p>
<p>Restrictions on the types of the key values are listed earlier in
  section types.</p>
<p>Clashes between duplicate keys are not detected; the last
  datum (textually rightmost in the display) stored for a given key
  value prevails.</p>
</blockquote>
<p>And, testing it:</p>
<pre><code>$ ./python
Python 1.0.1 (Aug 21 2018)
Copyright 1991-1994 Stichting Mathematisch Centrum, Amsterdam
&gt;&gt;&gt; {'key': 1, 'other': 2, 'key': 3}
{'other': 2, 'key': 3}
</code></pre>
<hr/>
<p>But there's no mention of why Guido chose this design in:</p>
<ul>
<li>The 1.0 docs.</li>
<li>The <a href="https://docs.python.org/3/faq/design.html" rel="nofollow noreferrer">Design &amp; History FAQ</a>.</li>
<li>Guido's <a href="http://python-history.blogspot.com/" rel="nofollow noreferrer">History of Python</a> blog.</li>
<li>Anywhere else I can think of that might have it.</li>
</ul>
<p>Also, if you look at different languages with similar features, some of them keep the last key-value pair like Python, some keep an arbitrary key-value pair, some raise some kind of error… there are enough of each that you can't argue that this was the one obvious design and that's why Guido chose it.</p>
<hr/>
<p>If you want a wild guess that's probably no better than what you could guess on your own, here's mine:</p>
<p>The compiler not only <em>could</em>, but <em>does</em>, effectively construct const values out of literals by creating an empty dict and inserting key-values pairs into it. So, you get duplicates-allowed, last-key-wins semantics by default; if you wanted anything else, you'd have to write extra code. And, without a compelling reason to pick one over another, Guido chose to not write extra code. </p>
<hr/>
<p>So, if there's no compelling reason <em>for</em> the design, why has nobody tried to change it in the 24 years since?</p>
<p>Well, someone filed a feature request (<a href="https://bugs.python.org/issue16385" rel="nofollow noreferrer">b.p.o. #16385</a>), to made duplicate keys an error in 3.4.
but apparently went away when it was suggested it bring it up on <code>-ideas</code>.) It may well have come up a few others times, but obviously nobody wanted it changed badly enough to push for it.</p>
<p>Meanwhile, he closest thing to an actual argument for Python's existing behavior is this comment by Terry J. Reedy:</p>
<blockquote>
<p>Without more use cases and support (from discussion on python-ideas), I think this should be rejected. Being able to re-write keys is fundamental to Python dicts and why they can be used for Python's mutable namespaces. A write-once or write-key-once dict would be something else.</p>
<p>As for literals, a code generator could depend on being able to write duplicate keys without having to go back and erase previous output.</p>
</blockquote>
<hr/>
<p><sub>1. I don't think the docs for 1.0 are directly linkable anywhere, but you can download <a href="https://legacy.python.org/download/releases/src/python1.0.1.tar.gz" rel="nofollow noreferrer">the whole 1.0.1 source archive</a> and build the docs from the TeX source.</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>I think @tobias_k has the ultimate answer -- because otherwise there would be inconsistencies. If </p>
<pre><code>{'key': 0, 'key': 1}
</code></pre>
<p>threw an error then I would expect </p>
<pre><code>lst = [('key', 0), ('key', 1)]
dict(lst)
</code></pre>
<p>to fail and then I would expect </p>
<pre><code>d = {}
d['key'] = 0
d['key'] = 1
</code></pre>
<p>to also. But of course, that last option is obviously not what I want, so going back up the chain we reach the current behaviour. </p>
</div>
<div class="post-text" itemprop="text">
<p>Conceptually, you can think of dictionary creation as an iterative, incremental process. In other words, the assignment of a dictionary literal:</p>
<pre><code>a_dictionary = {'key': 5, 'another_key': 10, 'key': 50}
</code></pre>
<p>is equivalent to a sequence of single assignment statements:</p>
<pre><code>a_dictionary['key'] = 5
a_dictionary['another_key'] = 10
a_dictionary['key'] = 50
</code></pre>
<p>Naturally, if a key happens more than once, there is nothing wrong with reassigning a new value to it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Usually you want to overwrite the value rather than throwing an error.
If you want to have a dictionary that protects itself from overwriting values then create a new clase that wrap the Dictionary class and throw an error if any value is overwritten.</p>
</div>
<span class="comment-copy">Hm... should Python also raise an exception if <code>set</code> is applied to a list with duplicates? This seems pretty similar. In your case, I'd say an IDE might point this out, but not Python itself.</span>
<span class="comment-copy">I'm not sure I'm following @tobias_k. When you run <code>set()</code> on a list with duplicates you <i>expect</i> the <code>set()</code> function to remove the duplicates, while here you don't. Also worth mentioning that here we don't have "pure" duplicates because the dictionary values are different.</span>
<span class="comment-copy">But when do you expect it and when not? E.g., it may be perfectly reasonable to use a dict comprehension to get unique values based on some list. Granted, in this entirely constant dict comprehension, it's clearly unintentional, but I'd consider this the job of the IDE (or maybe some linter)</span>
<span class="comment-copy">@Alex You should be expecting it though. Just as much as you expect it for the sets. Prior to version 3.6 you could not safely tell which key: value pair will stay. Starting from 3.6 it is the last one inserted.</span>
<span class="comment-copy">Actually, from a quick search, it <i>has</i> been discussed <a href="https://bugs.python.org/issue16385" rel="nofollow noreferrer">on b.p.o.</a>. However, the rejection was largely down to “we wouldn’t make a breaking change like this without discussion on -ideas and -dev”, so you’d still have to go search those mailing lists to see if such a discussion ever happened. (If it did, the bug was never updated to mention it, but sometimes that happens.) At least the bug narrows down the date range to search</span>
<span class="comment-copy">This is one of the best answers I've read on SO - Well done!</span>
<span class="comment-copy">And how would that help with a dict display like this? Even if you wrote <code>MyDicf({'key': 1, 'key': 2})</code>, by the time your <code>MyDlct</code> constructor gets to run, it’s going to be handed a dict with one key-value pair. Unless you want to write an import hook that replaces dict displays in the source with something different, this won’t do anything.</span>
<span class="comment-copy">@abarnert that is not correct. You can just make the constructor handle cases like this. Not sure what you are saying about writing hooks to the source code since this is really not needed. The solution is a simple wrap class</span>
<span class="comment-copy">Show me how a wrapper class could handle the OP's <code>a_dictionary = {'key': 5, 'another_key': 10, 'key': 50}</code>, or even <code>a_dictionary = MyDic({'key': 5, 'another_key': 10, 'key': 50})</code>.</span>
