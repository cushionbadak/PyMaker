<div class="post-text" itemprop="text">
<p>How do you remove duplicate tuples from a list based on the condition that if <code>(Y, Z)</code> and <code>(Z, Y)</code> are part of the list, then we only keep the match where <code>Y &lt; Z</code>?</p>
<p>For example, if we start with the following list of Car ID pairs: </p>
<pre><code>CarID1 = [(100, 500), (100, 600), (100, 700), (500, 100), (500, 200)], 
</code></pre>
<p>then we should remove the <code>(500, 100</code> entry and end up with: </p>
<pre><code>CarID2 = [(100, 500), (100, 600), (100, 700), (500, 200)]  
</code></pre>
<p>I tried the following code to grab unique tuples, but it did not do what I described.</p>
<pre><code>y = np.unique(x, axis=0)
z = [] 
for i in y:
   z.append(tuple(i))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using a dictionary you can do it in linear time.<br/>
Note that for each tuple <code>(u,v)</code> I first check if <code>(v,u)</code> already exists and in that case I keep the one with <code>u &lt; v</code>, otherwise it is inserted in the dictionary.</p>
<pre><code>CarID1 = [(100, 500), (100, 600), (100, 700), (500, 100), (500, 200)]

d ={}
for (u, v) in CarID1:
    if (v, u) in d:
        d[(v,u)] = (u,v) if u &lt; v else (v,u)
    else:
        d[(u,v)]  = (u,v)

d.values()
#dict_values([(100, 500), (100, 600), (100, 700), (500, 200)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>z = [(a, b) for a, b in carID1 if not ( (b, a) in CarID1 and b &gt; a) ]
</code></pre>
<p>This is a list comprehension that considers all pairs (a, b) in your original list.  It keeps them all <em>except</em> where the reversed pair is also in the list, and the elements are in the order you don't want.</p>
<p>Output:</p>
<pre><code>&gt;&gt;&gt; z
[(100, 600), (100, 700), (500, 100), (500, 200)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use list comprehension:</p>
<pre><code>[(y, z) for y, z in CarID1 if (z, y) not in CarID1 or y &lt; z]
</code></pre>
<p>And if an O(n) runtime is important, then use a set, which will take care of duplicates as well but may not guarantee the same order:</p>
<pre><code>CarID1_distinct = set(CarID1)
[(y, z) for y, z in CarID1 if (z, y) not in CarID1_distinct or y &lt; z]
</code></pre>
</div>
<span class="comment-copy">Are the existing tuples unique, or might you have, say 3 copies of <code>(100, 700)</code>?</span>
<span class="comment-copy">The existing tuples are unique.  Would the code change based upon whether the tuples are unique or not?</span>
<span class="comment-copy">It would, if you wanted to eliminate the duplicates.  Start with the answer I gave, @wim's comment, and see what you can do (i.e. exercise for the student).</span>
<span class="comment-copy">If you're trying to maintain a list of unique elements, <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">sets</a> may be worth looking into.</span>
<span class="comment-copy">Does order of the results matter?</span>
<span class="comment-copy">This may change the order of the tuples in the resulting list since the key loose order in Python dicts before 3.6</span>
<span class="comment-copy">It's O(n**2) .. this should be O(n)</span>
<span class="comment-copy">You're creating the set on every iteration of the comprehension</span>
<span class="comment-copy">@wim righto, moved it out of the list</span>
