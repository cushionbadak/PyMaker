<div class="post-text" itemprop="text">
<p>Python provides the following three modules that deal with C types and how to handle them:</p>
<ul>
<li><a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer"><code>struct</code></a> for C structs</li>
<li><a href="https://docs.python.org/3/library/array.html" rel="nofollow noreferrer"><code>array</code></a> for arrays such as those in C</li>
<li><a href="https://docs.python.org/3/library/ctypes.html" rel="nofollow noreferrer"><code>ctypes</code></a> for C functions, which necessarily entails dealing with C’s type system</li>
</ul>
<p>While <code>ctypes</code> seems more general and flexible (its main task being “a foreign function library for Python”) than <code>struct</code> and <code>array</code>, there seems to be significant overlap in functionality between these three modules when the task is to read binary data structures. For example, if I wanted to read a C struct</p>
<pre><code>struct MyStruct {
    int a;
    float b;
    char c[12];
};
</code></pre>
<p>I could use <code>struct</code> as follows:</p>
<pre><code>a, b, c = struct.unpack('if12s', b'\x11\0\0\0\x12\x34\x56\x78hello world\0')
print(a, b, c)
# 17 1.7378244361449504e+34 b'hello world\x00'
</code></pre>
<p>On the other hand, <a href="https://stackoverflow.com/a/1972348">using <code>ctypes</code> works equally well</a> (although a bit more verbose):</p>
<pre><code> class MyStruct(ctypes.Structure):
     _fields_ = [
         ('a', ctypes.c_int),
         ('b', ctypes.c_float),
         ('c', ctypes.c_char * 12)
     ]
 s = MyStruct.from_buffer_copy(b'\x11\0\0\0\x12\x34\x56\x78hello world\0')
 print(s.a, s.b, s.c)
 # 17 1.7378244361449504e+34 b'hello world'
</code></pre>
<p>(Aside: I do wonder where the trailing <code>'\0'</code> went in this version, though…)</p>
<p>This seems to me like it violates the principles in “The Zen of Python”:</p>
<blockquote>
<ol start="16">
<li>There should be one—and preferably only one—obvious way to do it.</li>
</ol>
</blockquote>
<p>So how did this situation with several of these similar modules for binary data handling arise? Is there a historical or practical reason? (For example, I could imagine omitting the <code>struct</code> module entirely and simply adding a more convenient API for reading/writing C structs to <code>ctypes</code>.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Disclaimer: this post is speculation based on my understanding of the "division of labor" in Python stdlib, not on factual referenceable info.</p>
<p>Your question stems from the fact that "C structs" and "binary data" tend to be used interchangeably, which, while correct in practice, is wrong in a technical sense. The <code>struct</code> documentation is also misleading: it claims to work on "C structs", while a better description would be "binary data", with some disclaimers about C compatibility.</p>
<p>Fundamentally, <code>struct</code>, <code>array</code> and <code>ctypes</code> <em>do different things</em>. <code>struct</code> deals with converting Python values into binary in-memory formats. <code>array</code> deals with efficiently storing a lot of values. <code>ctypes</code> deals with the C <em>language</em>(*). The overlap in functionality stems from the fact that for C, the "binary in-memory formats" are native, and that "efficiently storing values" <em>is</em> packing them into a C-like array.</p>
<p>You will also note that <code>struct</code> lets you easily specify endianness, because it deals with packing and unpacking binary data in many different ways it can be packed; while in <code>ctypes</code> it is more difficult to get non-native byte order, because it uses the byte order <em>that is native to C</em>.</p>
<p>If your task is reading binary data structures, there's increasing levels of abstraction:</p>
<ol>
<li>Manually splitting the byte array and converting parts with <code>int.from_bytes</code> and the like</li>
<li>Describing the data with a format string and using <code>struct</code> to unpack in one go</li>
<li>Using a library like <a href="https://construct.readthedocs.io/en/latest/" rel="nofollow noreferrer">Construct</a> to describe the structure declaratively in logical terms.</li>
</ol>
<p><code>ctypes</code> don't even figure here, because for this task, using <code>ctypes</code> is pretty much taking a round-trip through a <em>different programming language</em>. The fact that it works just as well for your example is incidental; it works because C is natively suited to expressing many ways of packing binary data. But if your struct was mixed-endian, for instance, it would be very difficult to express in <code>ctypes</code>. Another example is half-precision float which doesn't have a C equivalent (see <a href="https://docs.python.org/3/library/struct.html#format-characters" rel="nofollow noreferrer">here</a>).</p>
<p>In this sense, it's also very reasonable that <code>ctypes</code> use <code>struct</code> - after all, "packing and unpacking binary data" is a subtask of "interfacing with C".</p>
<p>On the other hand, it would make no sense for <code>struct</code> to use <code>ctypes</code>: it would be like using the <code>email</code> library for character encoding conversions because it's a task that an e-mail library can do.</p>
<p>(*) well, basically. More precise would be something like "C-based environments", i.e., how modern computers work on low level due to co-evolution with C as the primary systems language.</p>
</div>
<span class="comment-copy">Although that way may not be obvious at first unless you're Dutch :-)</span>
<span class="comment-copy">1. The <code>\0</code> is still there but it's not printed (check <code>NULL</code> terminated strings). 2. They were probably developed in parallel (I remember that at 1st, <i>ctypes</i> was not in <i>Python</i> standard library). The functionality does partially overlap. Removing one such module would break backwards compatibility as there is probably lots of code out there that depends on each of the 3 modules. Note: <b><i>ctypes</i> uses <i>struct</i></b>.</span>
<span class="comment-copy">@CristiFati 1. It <i>is</i> printed in the <code>struct</code> version, though! Also: <code>len(c) == 12</code>, <code>len(s.c) == 11</code>. 2. Well, Python did a lot of backwards-incompatible changes in the transition to Python 3. As far as I know, these kinds of “warts”/redundancies are exactly what they wanted to get rid of with Python 3.</span>
<span class="comment-copy">1. Yeas you are right, apparently when dealing with char arrays, the buffer parsing (for that field) stops when <code>\0</code> is encountered</span>
<span class="comment-copy">@CristiFati Also: “<i>ctypes uses struct.</i>” Do you have a reference or details for that?</span>
<span class="comment-copy">This is what I was looking for, thanks! I think what got me was the terminology/focus on “C structs” in the <code>struct</code> documentation (first sentence: “<i>This module performs conversions between Python values and C structs […]</i>”, when really, as you said, it can handle more arbitrary binary data.</span>
