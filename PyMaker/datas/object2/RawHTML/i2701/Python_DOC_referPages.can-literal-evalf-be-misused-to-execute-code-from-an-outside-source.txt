<div class="post-text" itemprop="text">
<p>I am just curious if this is a risk at all, I can't think of a way a user might be able to cause this to happen... but it seems worrisome.</p>
<pre><code>&gt;&gt;&gt; import ast
&gt;&gt;&gt; help(ast.literal_eval)
Help on function literal_eval in module ast:

literal_eval(node_or_string)
    Safely evaluate an expression node or a string containing a Python
    expression.  The string or node provided may only consist of the following
    Python literal structures: strings, numbers, tuples, lists, dicts, booleans,
    and None.
</code></pre>
<p><code>ast.literal_eval(f'{os.remove("dontdelete.txt")-hello-world}')</code> will execute the file deletion. Is there any risk that this could be used against an application? What does </p>
<blockquote>
<p>"Safely evaluate an expression node"</p>
</blockquote>
<p>mean?</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>literal_eval</code></a> is defined in this way is that it's a specialized function in the <code>ast</code> module, not a magic function designed to be used for all kinds of other purposes, so you're expected to have at least skimmed the <code>ast</code> docs if you're using it.</p>
<p><code>literal_eval</code> can take either an <code>ast.Node</code> representing a parsed expression, or a string that, when given to <code>ast,parse</code>, produces such a node.</p>
<p>Then, as long as the expression only uses "the following Python literal structures: strings, bytes, numbers, tuples, lists, dicts, sets, booleans, and <code>None</code>", it will evaluate the expression; otherwise, it will raise an error.</p>
<hr/>
<p>So, if you pass it the string <code>'os.remove("dontdelete.txt")-hello-world'</code>, well, when you parse that, you get a <code>BinOp</code> expression, which is not one of the kinds of expression nodes that <code>literal_eval</code> accepts, so it immediately rejects it with a <code>ValueError</code>.</p>
<hr/>
<p>And if you pass it the string <code>"""f'{os.remove("dontdelete.txt")-hello-world}'"""</code>, when you parse that, you get a <code>JoinedStr</code> expression node with a bunch of nodes inside it that <code>literal_eval</code> also doesn't accept (it's worth doing an <code>ast.dump</code> to see exactly what those nodes are, if you don't understand how f-strings work), so it's going to reject it with a <code>ValueError</code> again.</p>
<hr/>
<p>But what if you pass it the string <code>f'{os.remove("dontdelete.txt")-hello-world}'</code>? </p>
<p>Well, that string gets evaluated by the interpreter before it even gets passed to <code>literal_eval</code>.</p>
<p>In most scenarios, that's going to raise an exception before <code>literal_eval</code> can even be called, so <code>literal_eval</code> is completely irrelevant. For example:</p>
<ul>
<li>If <code>os</code> is not imported, you get a <code>NameError</code>.</li>
<li>If the file doesn't exist, you get a <code>FileNotFoundError</code>.</li>
<li>If <code>hello</code> or <code>world</code> don't exist, you get a <code>NameError</code>.</li>
<li>If <code>hello</code> exists but is any normal kind of value, because <code>remove</code> returns <code>None</code>, you get a <code>TypeError</code> about trying to subtract whatever type <code>hello</code> is from <code>None</code>.</li>
</ul>
<p>In some of those scenarios, the file is removed, of course. But since <code>literal_eval</code> never even got called, it's hardly relevant here. You could do the same thing with <code>print</code> instead of <code>literal_eval</code>, or just nothing at all.</p>
<p>But what if <code>os</code> is imported, and the file exists, and <code>hello</code> is an instance of some type with an <code>__rsub__</code> that accepts <code>None</code>, and <code>world</code> is an instance of some type that can be passed to the <code>__sub__</code> of whatever <code>hello.__rsub__</code> returned? Then <code>literal_eval</code> will get called with whatever that <code>sub</code> returns. If it's a string or an <code>ast.Node</code>, it will even evaluate it. And maybe that would be some other dangerous string? But in that case, <code>literal_eval</code> will raise a <code>ValueError</code> on that dangerous string, so no additional harm is done.</p>
</div>
<span class="comment-copy"><code>f'{os.remove("dontdelete.txt")-hello-world}'</code> is getting evaluated <i>before</i> it gets passed to <code>ast.literal_eval</code>.</span>
<span class="comment-copy">@juanpa.arrivillaga thanks! Turns out you can not eval <code>ast.literall_eval('f\'{y}\'')</code> which keeps it safe</span>
