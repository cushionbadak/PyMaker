<div class="post-text" itemprop="text">
<p>how can i create multiple attribute by list, for example:</p>
<p>my code:</p>
<pre><code>class test():
    def __init__(self, name):
       pass...
    def test2(self, lista):
</code></pre>
<p>but in this method i create one object (the final element of my list.
How can i create multiple self.ris to generate multiple object?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/functions.html#setattr" rel="nofollow noreferrer"><code>setattr</code></a> to set the attribute's name to a variable:</p>
<pre><code>class pkg():
    def __init__(self, name):
            self.name = name
            lista_ = self.dai_lista(lista)
            print lista_
            for i in lista_:
                    i = i.rstrip()
                    setattr(self, 'ris'+i, riso(i))
    def dai_lista(self, lista):
            print "sono in dai lista"
            return lista

class riso():
        def __init__(self, nome):
                self.nome = nome
        def print_nome(self):
                print self.nome

lista = ['a', 'b', 'c' ]
pippo = pkg('pippo')
pippo.risa.print_nome()
pippo.risb.print_nome()
pippo.risc.print_nome()
</code></pre>
<hr/>
<p>Output:</p>
<pre><code>sono in dai lista
['a', 'b', 'c']
a
b
c
</code></pre>
<hr/>
<p>However, although this works, I would consider dynamic creating of instance attributes bad practice. Instead, you should use a dict to store these classes:</p>
<pre><code>class pkg():
    def __init__(self, name):
            self.name = name
            lista_ = self.dai_lista(lista)
            print lista_
            self.ris = {}
            for i in lista_:
                    i = i.rstrip()
                    self.ris[i] = riso(i)
    def dai_lista(self, lista):
            print "sono in dai lista"
            return lista

class riso():
        def __init__(self, nome):
                self.nome = nome
        def print_nome(self):
                print self.nome

lista = ['a', 'b', 'c' ]
pippo = pkg('pippo')
pippo.ris['a'].print_nome()
pippo.ris['b'].print_nome()
pippo.ris['c'].print_nome()
</code></pre>
<p>And the output is the same as if you had used attributes.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could create a method like so:</p>
<pre><code>def make_attrs(self, *lista):
    for l in lista:
        setattr(self, l, None)
</code></pre>
<p>Where <code>None</code> will initialize the values for you. If you want to create key-value pairs, you can create a dictionary:</p>
<pre><code>myattrs = {'k': 'v',...}

def make_attrs(self, *args, **kwargs):
    for l in args:
        setattr(self, l, None)
    for k,v in kwargs.items():
        setattr(self, k, v)
</code></pre>
<p>It's generally better practice to do this in the <code>__init__</code> method (I think it's a PEP standard, SO can keep me honest here), but that's a kind of hacky way to do it</p>
</div>
