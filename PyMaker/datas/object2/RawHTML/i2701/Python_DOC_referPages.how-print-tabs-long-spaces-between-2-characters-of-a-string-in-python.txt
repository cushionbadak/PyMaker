<div class="post-text" itemprop="text">
<p>How print tabs (long spaces) between 2 characters of a string, in Python using loops and not the "\t" tab?
(or in loops, if possible")
For Example :</p>
<p><code>a="HELLO"</code>
so the output must be</p>
<pre><code>H        E         L        L       O
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can unpack the string into it's characters and use tabs as a separator in the call to <code>print</code></p>
<pre><code>a="HELLO"
print(*a, sep="\t")
# H       E       L       L       O
</code></pre>
<p>If you want to handle the string with the tab-separated letters, you can instead use <code>str.join</code></p>
<pre><code>tab_separated = '\t'.join(a)
</code></pre>
<p>A looping solution would be very inefficient, but would look something like</p>
<pre><code>def tab_sep(s):
    if not s:
        return s
    res = s[0]
    for letter in s[1:]:
        res += '\t' + letter
    return res
</code></pre>
<p>You can replace the <code>'\t'</code> strings in the above with <code>chr(9)</code>(tab has the ASCII value 9) if you really don't want the escape sequences, but I wouldn't recommend it.  It makes it difficult to tell what the code is doing.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can also use the <code>join</code> method:</p>
<pre><code>spacer = '    '
seq = 'Hello'
print(spacer.join(seq))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>You can do this by importing sys if you would like to only print as <code>print</code> includes new line for every sentence, but <code>sys.stdout.write</code> doesnt</p>
</blockquote>
<pre><code>a="HELLO"
import sys
for num in range(len(a)):
#    print('\t %s' %(a[num]))
    sys.stdout.write('\t %s' %(a[num]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you wanted a solution using loops here is one possible approach </p>
<pre><code>for c in "HELLO":
     print(c, end="\t")
</code></pre>
</div>
<span class="comment-copy">What do you mean by "not using the <code>"\t"</code> tab" ?</span>
<span class="comment-copy">@PatrickHaugh means i dont want to use "\t" (backslash tab) in the print statements, just create a space tab anywhere. I want solutions using loops</span>
<span class="comment-copy">A <a href="https://en.wikipedia.org/wiki/Tab_key" rel="nofollow noreferrer">tab</a> isn't simply a sequence of spaces. Do you mean that you want to print each char in a string so that it's <a href="https://docs.python.org/3/library/stdtypes.html#str.ljust" rel="nofollow noreferrer">left-justified</a> in a field of a given width? There are several ways to do that efficiently in Python.</span>
<span class="comment-copy">I'm unclear as to how you intend to print a tab character without ever using that character in your code.  "Using loops" doesn't change the problem, any more than it would for any other character.  Can you please clarify?</span>
<span class="comment-copy">Thanks, it worked! but please can you explain what does the * operator do. What is its function here?</span>
<span class="comment-copy">@user9969041 Please see <a href="https://stackoverflow.com/questions/36901/what-does-double-star-asterisk-and-star-asterisk-do-for-parameters" title="what does double star asterisk and star asterisk do for parameters">stackoverflow.com/questions/36901/…</a> and the links on that page. And in the tutorial: <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">docs.python.org/3/tutorial/…</a></span>
<span class="comment-copy">@user9969041 This is called argument unpacking.  We take the iterable <code>a</code> (a string) and unpack it so that each of its elements is a separate argument to <code>print</code>. See: <a href="https://stackoverflow.com/a/12786141/6779307">stackoverflow.com/a/12786141/6779307</a></span>
<span class="comment-copy">This is also a nice soln, but what if we had to print something like, H E(\t)L&lt;in the next line&gt; L(\t)O&lt;in the next line&gt;</span>
<span class="comment-copy">@imharjyotbagga then you would need a different loop, but that wasn't the question</span>
