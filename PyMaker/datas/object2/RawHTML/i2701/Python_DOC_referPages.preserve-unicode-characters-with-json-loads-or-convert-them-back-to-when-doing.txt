<div class="post-text" itemprop="text">
<p>I have a json file that contains the unicode characters <code>\u003c</code> and <code>\u003e</code>. When loading the file with json.load() these characters get converted to <code>&lt;</code> and <code>&gt;</code>. Consider the following experiment:</p>
<pre><code>d = json.loads('"Foo \u003cfoo@bar.net\u003e"')
</code></pre>
<p>Which then prints like:</p>
<pre><code>'Foo &lt;foo@bar.net&gt;'
</code></pre>
<p>Say that I need to dump this back to a file and need to have the characters <code>&lt;</code> and <code>&gt;</code> converted back to <code>\u003c</code> and <code>\u003e</code>. I am currently using <code>f.write(json.dumps(d))</code> but that does not seem to work.</p>
<p>I have searched for hours but am just not able to figure this out.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, here it would be useful to understand what the Python interpreter is doing.</p>
<h2>When the interpreter finds the beginning of a string literal</h2>
<p>In your source code, you have this piece of text:</p>
<pre><code>'"Foo \u003cfoo@bar.net\u003e"'
</code></pre>
<p>When the parser finds the first character, <code>'</code>, it concludes: "This is a string literal! Until I find the next <code>'</code>, I should get all characters and put it in a list, to use as a string." So, let us say it creates the following list in memory:</p>
<pre><code>[]
</code></pre>
<p>Then it finds the next character, <code>"</code>. Since the string literal is not closes (because no <code>'</code> was found) it adds it to the list. As everything inside computers, characters are represented as numbers. The number is its Unicode point, and for <code>"</code> the code point is 34:</p>
<pre><code>[ 34 ]
#  "
</code></pre>
<p>It does the same to the next characters, putting their code points in the list:</p>
<pre><code>[ 34   70  111  111   32 ]
#  "    F    o    o       
</code></pre>
<h2>The <code>\</code> and <code>u</code> characters from your source code</h2>
<p>Now, the interpreter finds the character <code>\</code>. But this is not a common char at all! To the interpreter, it means the next characters do not mean themselves, but should be interpreted. So the interpreter <em>does not</em> add <code>\</code> to the list, and get the next interpreter to understand what should be done. <strong>This is why there is no <code>\</code>  in your result.</strong></p>
<p>The next character is <code>u</code>. Since it was prefixed by <code>\</code>, the interpreter does not insert it into the list. Instead, <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">the <code>\u</code> pair is interpreted as a command</a> to get the next four characters, convert them to a hexadecimal number. <strong>That's why there is no <code>\u</code> in your results.</strong></p>
<h2>How six characters become only one</h2>
<p>The next four chars are <code>0</code>, <code>0</code>, <code>3</code> and <code>c</code>. They form the 0x3C hex number, that is 60 in decimal form. So it is added to the list:</p>
<pre><code>[ 34   70  111  111   32   60 ]
#  "    F    o    o         &lt;
</code></pre>
<p>Well, 60 is <code>&lt;</code> in Unicode. <strong>That's why there is a <code>&lt;</code> in your result.</strong> This is why the six characters (<code>\</code>, <code>u</code>, <code>0</code>, <code>0</code>, <code>3</code>, <code>c</code>) actually represent only one (<code>&gt;</code>) when the program runs.</p>
<h2>How to get what you want</h2>
<p>Of course, you may want to have the characters <code>\</code>, <code>u</code> etc. in your result string. If so, Python gives you some options, and the simplest one is the <a href="http://wiki.c2.com/?RawStrings" rel="nofollow noreferrer">raw string literal</a>. To do this, you just need to prefix your string literal with <code>r</code>, as below:</p>
<pre><code>r'"Foo \u003cfoo@bar.net\u003e"'
</code></pre>
<p>When the interpreter fins the <code>r</code> in the source code, and then a quote (such as <code>'</code>), it knows it is a string literal, but this string literal <em>does not have <code>\</code> interpreted at all</em>. Everything inside it is to be used as it was typed in the source code. This brings a result similar to the one you seem to want:</p>
<pre><code>&gt;&gt;&gt; print('"Foo \u003cfoo@bar.net\u003e"')
"Foo &lt;foo@bar.net&gt;"
&gt;&gt;&gt; print(r'"Foo \u003cfoo@bar.net\u003e"')
"Foo \u003cfoo@bar.net\u003e"
</code></pre>
<h2><a href="https://tvtropes.org/pmwiki/pmwiki.php/Main/BeCarefulWhatYouWishFor" rel="nofollow noreferrer">Be Careful What You Wish For</a></h2>
<p>Note however that these strings are completely different! Even their sizes are very different, because the second one has more characters:</p>
<pre><code>&gt;&gt;&gt; len('"Foo \u003cfoo@bar.net\u003e"')
19
&gt;&gt;&gt; len(r'"Foo \u003cfoo@bar.net\u003e"')
29
</code></pre>
<p>Now, I have to say, <em>you likely do not want to have a raw string</em> here. You may only be wanting to represent the string with the Unicode points, but it also begs the question of <em>why</em>. Anyway, it is up to you now to decide what you want :)</p>
</div>
<span class="comment-copy"><code>&lt;</code> and <code>&gt;</code> are ASCII characters, just like <code>F</code>, <code>o</code>, and <code>@</code>. How would Python know that you want to treat them differently?</span>
<span class="comment-copy"><code>\u003c</code> and <code>\u003e</code> <i>are</i> <code>&lt;</code> and <code>&gt;</code>.</span>
<span class="comment-copy">Just why do you "need to have the characters <code>&lt;</code> and <code>&gt;</code> converted back to <code>\u003c</code> and <code>\u003e</code>"? Your question would make more sense if the basis for it were clear. There are a few occasions when those characters are not acceptable as is (such as in a Windows file name), but conversion is usually done when needed, not when saving to JSON. And those particular conversions would not help for Windows file names, since backslash is also not permitted.</span>
<span class="comment-copy">Not sure if raw strings literals are helpful here, as the JSON string is presumably coming from an outside source (e.g. file, HTTP call, etc.) I don't know if there is a way to load that as a raw string?</span>
<span class="comment-copy">@MartinTournoij I share your doubts as well, I doubt he wants what he is asking for. Even if he really wants this behavior, and gets the backslashes etc. in the string, JSON <i>also</i> escapes Unicode points! But from the snippet, a bit of explanation of how strings are escaped seem useful.</span>
