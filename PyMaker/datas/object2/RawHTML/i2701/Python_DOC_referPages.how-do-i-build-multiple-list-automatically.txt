<div class="post-text" itemprop="text">
<p>I have hundereds of dataframe, let say the name is <code>df1</code>,..., <code>df250</code>, I need to build list by a column of those dataframe. Usually I did manually, but today data is to much, and to prone to mistakes</p>
<p>Here's what I did</p>
<pre><code>list1 = df1['customer_id'].tolist()
list2 = df2['customer_id'].tolist()
..
list250 = df250['customer_id'].tolist()
</code></pre>
<p>This is so manual, can we make this in easier way?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer">exec</a> function enables you to execute python code stored in a string:</p>
<pre><code>for i in range(1,251):
   s = "list"+str(i)+" = df"+str(i)+"['customer_id'].tolist()"
   exec(s)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The easier way is to <em>take a step back</em> and make sure you put your dataframes in a collection such as <code>list</code> or <code>dict</code>. You can then perform operations easily in a scalable way.</p>
<p>For example:</p>
<pre><code>dfs = {1: df1, 2: df2, 3: df3, ... , 250: df250}

lists = {k: v['customer_id'].tolist() for k, v in dfs.items()}
</code></pre>
<p>You can then access the results as <code>lists[1]</code>, <code>lists[2]</code>, etc.</p>
<p>There are other benefits. For example, you are no longer polluting the namespace, you save the effort of explicitly defining variable names, you can easily store and transport related collections of objects.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd use next code. In this case there's no need to manually create list of DataFrames.</p>
<pre><code>cust_lists = {'list{}'.format(i): globals()['df{}'.format(i)]['customer_id'].tolist()
                   for i in range(1, 251)}
</code></pre>
<p>Now you can access you lists from cust_lists dict by the name, like this:</p>
<pre><code>`cust_lists['list1']`
</code></pre>
<p>or </p>
<pre><code>`list1`
</code></pre>
</div>
<span class="comment-copy">why you split it ? <code>[x['customer_id'].tolist() for _, x in df.groupby(np.arange(len(df))//1000)]</code> base on your previous question</span>
<span class="comment-copy">Several columns is already on dataframe, and several column I need to query from MongoDB based on that list, I split by your answer  <code>[x['customer_id'].tolist() for _, x in df.groupby(np.arange(len(df))//1000)]</code>, at the and both dataframe will be merged</span>
<span class="comment-copy">sorry, I removed the best answer, I try <code>list3</code> is not working</span>
