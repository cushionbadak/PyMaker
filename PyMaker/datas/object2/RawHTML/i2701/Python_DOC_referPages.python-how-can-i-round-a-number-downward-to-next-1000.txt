<div class="post-text" itemprop="text">
<p>In python, there's a builtin function round(),<br/>it rounds a number like this:  </p>
<pre><code>round(1900, -3) == 2000
</code></pre>
<p>is there a builtin function that can round a number downward, like this:</p>
<pre><code>function(1900, -3) == 1000
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use floor division:</p>
<pre><code>def round_down(x, k=3):
    n = 10**k
    return x // n * n

res = round_down(1900)  # 1000
</code></pre>
<p><code>math.floor</code> will also work, but with a drop in performance, see <a href="https://stackoverflow.com/questions/40777772/python-integer-division-operator-vs-math-floor">Python integer division operator vs math.floor</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe you can try it this way</p>
<pre><code>import math
math.floor(1900 / 100) * 100
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>math.floor([field])</code> rounds down to next integer</p>
<p><code>math.ceil([field]/1000)*1000</code> rounds down to next 1000</p>
<p>Maybe you could make an int cast after that. </p>
<p>if you like your syntax with the exponent parameter you could define your own function:</p>
<pre><code>import math

def floorTo10ths(number, exp):
     return int(math.floor(number/10**exp) * 10**exp) 

floorTo10ths(1900, 3)
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/math.html#math.floor" rel="nofollow noreferrer"><code>math.floor()</code></a>?</span>
<span class="comment-copy">How much do you want to round it downwards? I mean is not the same to go on units, decimal, hunderds, thousands.</span>
<span class="comment-copy">This should help: <a href="https://stackoverflow.com/q/34030509/2988730">stackoverflow.com/q/34030509/2988730</a></span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/51895370/python-rounding-down-to-custom-step">Python Rounding Down to Custom Step</a></span>
<span class="comment-copy">Looks good (+1). The idea from user 侯月源 is to bring it to the precision level you want to round for (change the order of magnitude) and then do the inverse operation after rounding. 侯月源 the only thing left is to put it into a function to suite the OP's needs. :-)</span>
