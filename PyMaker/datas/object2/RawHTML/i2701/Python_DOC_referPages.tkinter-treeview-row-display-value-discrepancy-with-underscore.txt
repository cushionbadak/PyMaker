<div class="post-text" itemprop="text">
<p>I have a treeview display of invoice related data. The invoice identifiers have underscores. I have noticed the underscore displays correctly in the GUI however the invoice number value obtained from the tree row data omits the underscore.
I am currently doing a substitution of - for _ before inserting the data in the full application to handle the issue.</p>
<p>Is the way I am using the treeview or retrieving the row data the user selected causing the issue? Or, is there another explanation for the discrepancy between GUI display and the retrieved values that have underscore characters?</p>
<p>I am using python 3.6 and tkinter 8.6</p>
<p>Here is an example.</p>
<p>Thank you.</p>
<pre><code>import tkinter as tk
from tkinter import ttk

DATA = [('180518-23', '23/06/18'),
        ('180618_24', '27/06/18')]
def invoice_selected(event):
    row_selected = event.widget.focus()
    values = event.widget.item(row_selected)['values']
    invoicenumber = values[0]
    print('invoice number', invoicenumber)

ROOT = tk.Tk()
header = ('Invoice', 'Due')
tree = ttk.Treeview(columns=header,
                    show="headings",
                    height=5)
tree.grid()
for col, text in enumerate(header):
    tree.heading(col, text=text)
tree.bind('&lt;&lt;TreeviewSelect&gt;&gt;', invoice_selected)

for record in DATA:
    tree.insert('', 'end', values=record)
ROOT.mainloop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>tl;dr: Instead of doing <code>item(row_selected)['values']</code>, do <code>item(row_selected, option='values')</code>.</p>
<hr/>
<p>I think this is actually a bug in tkinter, and the workaround is actually relying on another bug, so I filed both as <a href="https://bugs.python.org/issue34447" rel="nofollow noreferrer">b.p.o. #34447</a>. But let's see what the tkinter experts over there say.</p>
<hr/>
<p>Meanwhile, you hopefully want to understand <em>why</em> that makes a difference, right?</p>
<p>If you look at the docs for <a href="https://docs.python.org/3/library/tkinter.ttk.html#tkinter.ttk.Treeview.item" rel="nofollow noreferrer"><code>item</code></a>:</p>
<blockquote>
<p>Query or modify the options for the specified item.</p>
<p>If no options are given, a dict with options/values for the item is returned. If <em>option</em> is specified then the value for that option is returned. Otherwise, sets the options to the corresponding values as given by <em>kw</em>.</p>
</blockquote>
<p>So, if you ask for the <code>values</code> option, you get the <code>values</code> option's value.</p>
<p>But if you don't ask for anything, tkinter tries to get clever and give you a dict with all of the options.</p>
<p>The problem is that, under the covers, tkinter is a wrapper around Tcl/Tk. In Tcl, everything is a string (it's more like, say, bash in this regard than Python); there's no difference between the number <code>123</code> and the string <code>'123'</code>. It's perfectly legal to store ints in <code>TreeView</code> items, but they get stored exactly the same way as strings.</p>
<p>And what's returned by the Tcl code to get all of the options for an item is a Tcl list of Tcl key-value pairs where all of the values are Tcl strings. Tkinter has no idea which ones were supposed to be strings, and which were supposed to be ints.<sup>2</sup> So it tries to guess: any string that can be converted to an int with the <code>int</code> constructor is an int, anything else is a string.<sup>1</sup> And your string can be converted to an <code>int</code><sup>3</sup>, so it is.</p>
<p>Of course this is pretty hacky, but it <em>usually</em> does what you want, and it makes things more convenient when it does, and "pretty hacky but usually does what you want conveniently" is almost the definition of tkinter.</p>
<p>However, I think it ought to recognize that, while <code>'123_456'</code> is a perfectly valid Python integer literal, it's <em>not</em> a string that could ever be created by Tcl for an integer, so it shouldn't try to parse that.</p>
<p>If you want to see the code that does this: <a href="https://github.com/python/cpython/blob/3.6/Lib/tkinter/ttk.py#L1348" rel="nofollow noreferrer"><code>ttk.TreeView.item</code></a> calls <a href="https://github.com/python/cpython/blob/3.6/Lib/tkinter/ttk.py#L290" rel="nofollow noreferrer"><code>ttk._val_or_dict</code></a>, which calls <a href="https://github.com/python/cpython/blob/3.6/Lib/tkinter/__init__.py#L116" rel="nofollow noreferrer"><code>tkinter._splitdict</code></a> with <a href="https://github.com/python/cpython/blob/3.6/Lib/tkinter/ttk.py#L324" rel="nofollow noreferrer"><code>ttk._tclobj_to_py</code></a> as a value-converter.</p>
<hr/>
<p>But why doesn't <code>_val_or_dict</code> run the converter over a single key-value pair? I can't honestly see a good reason for this. But it doesn't, so we can take advantage of that fact to work around the problem.</p>
<hr/>
<p><sub>1. What if a value was supposed to be a float? Well, that doesn't come up very often in <code>TreeView</code>s, so tkinter doesn't bother with that one; you just get the string representation of your float. But in other types, like <code>LabeledScale</code>, where floats are more useful/common, it uses a different function that tries <code>float</code> instead of <code>int</code> if there' a <code>.</code> in the string.</sub></p>
<p><sub>2. If you're curious what this looks like, even after the Tcl list has been parsed, try printing the results of <code>tree.tk.call(tree._w, 'item', row_selected)</code> vs. <code>tree.tk.call(tree._w, 'item', row_selected, '-values')</code>.</sub></p>
<p><sub>3. In earlier versions of Python, <code>180618_24</code> wasn't a valid int literal, so you'd still get a string. But in 3.6, underscores are allowed as group separators, so <code>180618_24</code> is a perfectly valid way to spell <code>18061824</code>, so that's what you get.</sub></p>
</div>
