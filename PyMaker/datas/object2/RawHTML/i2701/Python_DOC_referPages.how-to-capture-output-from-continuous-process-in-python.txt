<div class="post-text" itemprop="text">
<p>I am new to Python and Linux. I have a process running in a terminal window that will go indefinitely. The only way to stop it would be for it to crash or for me to hit ctrl+C. This process outputs text to the terminal window that I wish to capture with Python, so I can do some additional processing of that text. </p>
<p>I know I need to do something with getting stdout, but no matter what I try, I can't seem to capture the stdout correctly. Here is what I have so far. </p>
<pre><code>import subprocess

command = 'echo this is a test. Does it come out as a single line?'

def myrun(cmd):
    p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

    stdout = []
    while True:
        line = p.stdout.read()
        stdout.append(line)

        if line == '' and p.poll() != None:
                break
    return ''.join(stdout)

result = myrun(command)
print('&gt; ' + result),
</code></pre>
<p>This will work when my command is a simple "echo blah blah blah". I am guessing this is because the echo process terminates. If I try running the continuous command, the output is never captured. Is this possible to do? </p>
</div>
<div class="post-text" itemprop="text">
<p><code>read()</code> will block on reading until reach EOF, use <code>read(1024)</code> or <code>readline()</code> instead:</p>
<blockquote>
<p>read(size=-1)</p>
<p>Read and return up to size bytes. If the argument is omitted, None, or negative, data is read and returned until EOF is reached.</p>
</blockquote>
<p>eg:</p>
<pre><code>p = subprocess.Popen('yes', stdout=subprocess.PIPE)

while True:
    line = p.stdout.readline()
    print(line.strip())
</code></pre>
<p>see more on the <a href="https://docs.python.org/3/library/io.html#io.BufferedIOBase.read" rel="nofollow noreferrer">python io doc</a>.</p>
</div>
<span class="comment-copy">do you mean to use <code>readline</code> and not <code>read</code>?</span>
<span class="comment-copy">Perhaps you are struggling with the fact Python buffers it's output, try running your script with <code>python -u script.py</code> and see if it works</span>
