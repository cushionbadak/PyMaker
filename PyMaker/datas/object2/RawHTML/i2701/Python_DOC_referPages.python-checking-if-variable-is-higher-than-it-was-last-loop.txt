<div class="post-text" itemprop="text">
<p>just getting started in Python and I'm writing a program that checks for alerts, basically I need it to keep track of a number and if the next loop that number is higher, then do stuff.</p>
<pre><code>def code():
yellowCount = 0
orangeCount = 0
redCount = 0
blueCount = 0

print ("----------------------------------------")
print ("Running check on ")
# do your stuff
for line in open(txtFiles[0]):
    if 'details_YELLOW' in line:
        yellowCount = yellowCount + 1
    elif 'details_ORANGE' in line:
        orangeCount = orangeCount + 1
    elif 'details_RED' in line:
        redCount = redCount + 1
        toaster.show_toast("xxxxx","Red alert detected on ")

    elif 'details_BLUE' in line:
        blueCount = blueCount + 1
print (str(yellowCount) + " Yellow alerts")
print (str(orangeCount) + " Orange alerts")
print (str(redCount) + " Red alerts")
print (str(blueCount) + " Blue alerts")
</code></pre>
<p>There's a code excerpt, what's the best way to go about this? Global variables? Basically I only want to alert if there's a NEW alert, not notify for every single alert detected every time the code runs.</p>
<p>Example of Code Output</p>
<pre><code>==================
Downloading Alerts
==================
----------------------------------------
Running check on 
0 Yellow alerts
0 Orange alerts
0 Red alerts
0 Blue alerts
----------------------------------------
Running check on 
0 Yellow alerts
1 Orange alerts
0 Red alerts
0 Blue alerts
</code></pre>
<p>So I want to execute code only if the orange alerts goes to 2 on the second for example</p>
</div>
<div class="post-text" itemprop="text">
<p>This very easy to do, all you need to do is to keep a variable outside the for loop that will keep track of the previous value:</p>
<pre><code>prev_count = 0
for ... :
    count = ...
    if prev_count &lt; count:
        #do stuff
    prev_count = count
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Obviously, the integer value doesn't remember its history, so you do it with various  work-arounds:</p>
<ul>
<li>keep a flag <code>yellow_changed = False</code>. If the condition satisfied, change it to <code>True</code>. However, you have to reset them to <code>False</code>, at the start of every iteration</li>
<li><p>Do the stuff directly: </p>
<pre><code>if 'details_YELLOW' in line:
   # yellowCount = yellowCount + 1
   do_the_yellow_stuff()
</code></pre></li>
<li><p>keep a list of the values. At every iteration <code>yellow_values.append(yellowCount)</code> and then check if <code>yellowCount[-1] &gt; yellowCount[-2]</code></p></li>
</ul>
</div>
<span class="comment-copy">"Global variables? B": no: just keep an extra variable around that has the previous value: <code>prev_redCount</code> could work. Compare that to <code>redCount</code> every iteration, and assign it the value of <code>redCount</code> at the end of the loop body.</span>
<span class="comment-copy">Note: Python idiom doesn't use (lower) camelCase for variable names, but snake_case. <code>red_count</code> is more Python-style as a variable name.</span>
<span class="comment-copy">Of course, the next stage Python idiom is to use a mapping type like a <code>dict</code> for the various counters, or even <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">Counter</a>. But that's for the iteration of your program.</span>
<span class="comment-copy">Last Python idiom thing (sorry): Replace <code>print (str(yellowCount) + " Yellow alerts")</code> by <code>print (yellowCount, "Yellow alerts")</code>. Let <code>print()</code> do the formatting/stringifying of <code>yellowCount</code> for you.</span>
<span class="comment-copy">Thanks guys :) My PHP is showing with the camelCase obviously haha</span>
