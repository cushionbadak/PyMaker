<div class="post-text" itemprop="text">
<p>I have a question about best practices in Python OOP, specifically naming conventions.</p>
<p>I have a <code>foo.py</code> (module?) file that is constructed as follows:</p>
<pre><code>class Foo(object):
    def __init__(self, x):
        self.x = x

# The question is about the below line
def do_something(master):
    try:
        master.x += 1
    except AttributeError:
        pass
</code></pre>
<p>The <code>main</code> module instantiates <code>foo</code> and then calls the <code>do_something</code> function of the <code>foo.py</code> to change the value of the <code>x</code> value of the <code>foo</code> instance.</p>
<pre><code>#! /usr/bin/env python
import foo

self = foo.Foo(1)
foo.do_something(self)

print(self.x)
</code></pre>
<p>My question is regarding the <code>do_something</code> function, where the variable is now called <code>master</code>, is that what people would be expecting or should it be written differently (perhaps like the below variant)?</p>
<pre><code>def do_something(object):
    try:
        object.x += 1
    except AttributeError:
        pass
</code></pre>
<p>I would appreciate if anyone has a link to a relevant section of a PEP where this is described (if it is). Furthermore, I am asking this question on the assumption that there is a standard, just tell me if there isn't and then i'll close this question (as then it would be a subjective question). </p>
</div>
<div class="post-text" itemprop="text">
<p>Because you're manipulating property(s) of the <code>Foo</code> class instance, I would simply make it a class method:</p>
<pre><code>class Foo(object):
    def __init__(self, x):
        self.x = x

    def do_something(self):
        """
            increments self.x
        """

        try:
            self.x += 1
        except AttributeError:
        # I think this should never happen.
            pass
</code></pre>
<p>And then you call it like:</p>
<pre><code>foo = Foo(6)
foo.do_something()
print(foo.x)
</code></pre>
</div>
<span class="comment-copy">why not make that a class method, a la: <code>def do_something(self)</code> and then you call it simply <code>foo.do_something()</code>?</span>
<span class="comment-copy">I had it as a class method initially, which caused codacy to complain about it "Method could be a function" and I was wondering how to restructure this to get rid of it, as the <code>do_something</code> doesn't have any of it's own variables (at least that's how I understood it, correct me if wrong). I will add this bit to the question actually.</span>
<span class="comment-copy">Generally you want to let errors like this bubble up to the caller.  It usually means that they made a mistake, and the best way of giving them all the information about that mistake is to raise an exception.  You could even do something like <code>except AttributeError as e: raise ValueError("I need a Foo") from e</code> to give context.</span>
<span class="comment-copy">Definitely don't use <a href="https://docs.python.org/3/library/functions.html#object" rel="nofollow noreferrer"><code>object</code></a> as the name for that parameter.</span>
<span class="comment-copy">There is no recommendation on how you name parameters to functions. <code>self</code> is a norm for the first arg of class methods... so your use of <code>self</code> - <code>self = foo.Foo(1)</code> is odd and may lead to confusion if others are reading your code but not wrong.</span>
<span class="comment-copy">This is the answer to the question I asked (specifically regarding the examples), even if it's not what I hoped for. While reading the comments and thinking about this, it became clear that the interaction between my real/full main and module are faulty and need refactoring.</span>
