<div class="post-text" itemprop="text">
<p>I'm new at phyton programming and developing gui interface has gtk framework and serial port. It has a treeview whose liststore model. I could the insert new rows easily. 
I'm using the serialport recive callback in different thread from main gui thread avoid to not miss any data. After the received a new data, it should update the treeview. However, since the serialport is in different thread, I don't know how to update the list. Please help me to do this.</p>
<p>the gui class:</p>
<pre><code>class MainGUI():
def __init__(self):
    self.builder = Gtk.Builder()
    self.builder.add_from_file("main.glade")
    self.builder.connect_signals(MainGUI)
    self.window = self.builder.get_object("window1")
    self.mycombobox = self.builder.get_object('comboboxtext1')
    self.toggle = self.builder.get_object('togglebutton1')
    self.table = self.builder.get_object('treeview2')
    self.list = self.builder.get_object('liststore1')
    self.scroll_window = self.builder.get_object('scrolledwindow1')

def show(self):
    print("App main thread number", format(threading.get_ident()))
    self.window.show()
    Gtk.main()

@staticmethod
def connect_toggled(_self):
    if main.toggle.get_active():
        main.toggle.set_label("Disconnect")
        serial_port.connect(main.mycombobox.get_active_text())
        t3 = threading.Thread(target=serial_port.read_from_port)
        t3.start()
        serial_port.disconnect()

def row_inserted_event(self, path, iter):
    """The actual scrolling method"""
    adj = main.scroll_window.get_vadjustment()
    adj.set_value(adj.get_upper() - adj.get_page_size())

def update_table(self):
    # for i in range(256):
    #     main.list.append(['aaa', 'ddds', i])
    #     if len(main.list) &gt; 50:
    #         main.list.remove(main.list.get_iter(0))
    main.list.append(['aaa', 'ddds', 0])
    if len(main.list) &gt; 50:
        main.list.remove(main.list.get_iter(0))
    print(len(main.list))

if __name__ == "__main__":
    serial_port = SerialPort()
    ports = SerialPort().list_ports()
    main = MainGUI()
    for port in ports:
        main.mycombobox.append_text(port)
    main.mycombobox.set_active(0)
    main.toggle.set_label("Connect")
    main.update_table()
    main.show()
</code></pre>
<p>the serial port class:</p>
<pre><code>class SerialPort:
    def __init__(self):
        self.ser = serial.Serial()
        self.baud_rate = 115200

    def write(self, data):
        self.ser.write(bytes(data))
        print(data)

    def connect(self, port):
        print("serial port thread number = %d" % (threading.get_ident()))
        print("connected the port =  %s" % (port))
        self.ser.port = port
        self.ser.baudrate = self.baud_rate
        self.ser.timeout = 0
        if self.ser.isOpen():
            print("already connected this port = %s" % (port))
        else:
            self.ser.open()

    def disconnect(self):
        if self.ser.isOpen():
            self.ser.close()
            print("disconnected port")

    def read_from_port(self):
        while True:
            if self.ser.isOpen():
                reading = self.ser.readline()
                if len(reading) &gt; 0:
                    self.received_callback(reading)
            time.sleep(0.1)

    def received_callback(self, data):
        print(data)

    def list_ports(self):
        if sys.platform.startswith('win'):
            ports = ['COM%s' % (i + 1) for i in range(256)]
        elif sys.platform.startswith('linux') or sys.platform.startswith('cygwin'):
            # this excludes your current terminal "/dev/tty"
            # ports = glob.glob('/dev/tty[A-Za-z]*')
            ports = ['/dev/pts/%s' % (i + 1) for i in range(256)]
        elif sys.platform.startswith('darwin'):
            ports = glob.glob('/dev/tty.*')
        else:
            raise EnvironmentError('Unsupported platform')

        result = []
        for port in ports:
            try:
                s = serial.Serial(port)
                s.close()
                result.append(port)
            except (OSError, serial.SerialException):
                pass
        return result
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I believe that your problem is more related to threading + GUI, than GTK.  </p>
<p>As far as I know, when you modify the <code>liststore</code> that is the model for the <code>treeview</code>, the latter should be updated instantly. So, there should be no problem there.  </p>
<p>A fundamental principle when working with threads and a GUI, is that you should only update the GUI from within its own thread (main loop). So what you need to do, is have your worker thread (serial port connection thread) send the update to the main GUI thread and let it update the <code>treeview</code>. The update can be scheduled with the <code>GLib.idle_add</code> function to let GTK do it when most convenient.  </p>
<p>Now, to communicate between threads, you could use the <a href="https://docs.python.org/3/library/queue.html#module-queue" rel="nofollow noreferrer"><code>queue</code></a> module.  </p>
<p>I don't quite understand your code. So I'll write a simple example (using gtk3 PyGObject, since you didn't specify).  </p>
<pre><code>import threading
import queue
import gi
gi.require_version('Gtk', '3.0')
gi.require_version('GLib', '2.0')
from gi.repository import Gtk, GLib

def do_work(com_queue):
    # do some work
    com_queue.put("update for your treeview")
    # continue

class MainGUI(object):
    def __init__(self):
        self.com_queue = queue.Queue()
        self.worker_thread = None
        self.liststore = None
        # more gui initialization...

    def launch_worker_thread(self):
        self.worker_thread = threading.Thread(target=do_work, args=(self.com_queue,))
        self.worker_thread.start()
        Glib.timeout_add(1000, self.check_queue) # run check_queue every 1 second

    def check_queue(self):
        if self.worker_thread.is_alive():
            try:
                update = self.com_queue.get()
                GLib.idle_add(self.update_treeview, (update,)) # send tuple
            except queue.Empty:
                pass
            return True # to keep timeout running
        else:
            return False # to end timeout

    def update_treeview(self, update):
        self.liststore.append(update) # here update the treeview model with tuple

if __name__ == "__main__":
    gui = MainGUI()
    Gtk.main()
</code></pre>
<p>I hope this helps.</p>
</div>
<span class="comment-copy">You don't show the imports, so it's hard to see if it's using GTK+ 2 or GTK+ 3. <code>pygtk</code> is the old binding for GTK+ 2. <code>pygobject</code> is the newer one for GTK+. Tagging with <code>gtk2</code> + <code>python</code> or <code>gtk3</code> + <code>python</code> would make things clearer.</span>
<span class="comment-copy">thank you. it helps me :) I have less than 15 reputations so can't give.</span>
<span class="comment-copy">Well, is it safe using GObject.timeout_add(200, self.update_table)? While accessing the data, using a mutex.</span>
<span class="comment-copy">I guess. <code>idle_add</code> lets gtk update the gui when there's nothing going on. Most of the time, you can just modify it manually and it'll do it right away. At worst I think it'll not update right away, but I don't think it'll block or throw an exception. Try it out.</span>
