<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/3024925/create-a-with-block-on-several-context-managers">Create a “with” block on several context managers? [duplicate]</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>Just started working with Python today, so if I'm doing something crazy here please let me know. I have been working to simplify a block of code so that I can more easily reuse it. My goal would be to just update one set of variables during each reuse. The last working code I had is this:</p>
<pre><code>class_a='amstaff'
class_b='beagle'
class_c='doberman'
class_d='germanshepherd'
class_e='rottweiler'

with open(file_path +class_a+'.zip', 'rb') as class_a, open(file_path +class_b+'.zip', 'rb') as class_b, open(file_path +class_c+'.zip', 'rb') as class_c, open(file_path +class_d+'.zip', 'rb') as class_d, open(file_path +class_e+'.zip', 'rb') as class_e:

    model = visual_recognition.create_classifier(
        classifier_name,
        amstaff_positive_examples=class_a,
        beagle_positive_examples=class_b,
        doberman_positive_examples=class_c,
        germanshepherd_positive_examples=class_d,
        rottweiler_positive_examples=class_e)
print(json.dumps(model, indent=2))
</code></pre>
<p>This saves me a ton of time from my original code but still requires a fair bit of editing. So I was thinking I might be able to use a for loop but I got stuck about halfway through. Here's what I have so far, but I am stumped on how to proceed from here.</p>
<pre><code>classes=["amstaff", "beagle", "doberman", "germanshepherd", "rottweiler"]

for x in classes:
    with open(file_path +x+'.zip', 'rb') as x:

model = visual_recognition.create_classifier(
    classifier_name,
    amstaff_positive_examples=class_a,
    beagle_positive_examples=class_b,
    doberman_positive_examples=class_c,
    germanshepherd_positive_examples=class_d,
    rottweiler_positive_examples=class_e)
print(json.dumps(model, indent=2))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are using <code>python 3.3</code>+, there is <a href="https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack" rel="nofollow noreferrer">ExitStack</a> which you could use to manage all the context managers. All opened files will automatically be closed at the end of the with statement.</p>
<pre><code>classes=["amstaff", "beagle", "doberman", "germanshepherd", "rottweiler"]
with ExitStack() as stack:
    files = [stack.enter_context(open(fname)) for fname in classes]
</code></pre>
<p>And <code>files</code> will have all the handles to open files that you could use to create your model.</p>
</div>
<span class="comment-copy">is your code posted here has same indentation as the code in your system?</span>
<span class="comment-copy">This is actually trickier than you might think. To really do this, you would have to implement a sort of "meta-context-manager" to handle the other context-managers you want to enter and exit appropriately <a href="https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack" rel="nofollow noreferrer"><code>contextlib.ExitStack</code></a>. Indeed, the example in the docs is a list of file-names to open. Just follow the example.</span>
<span class="comment-copy">Alternatively, you could just <i>not</i> use context managers, but you'd want to wrap up everything the old way, with a <code>try-except-finally</code>, taking care to close all possibly opened files in the finally</span>
