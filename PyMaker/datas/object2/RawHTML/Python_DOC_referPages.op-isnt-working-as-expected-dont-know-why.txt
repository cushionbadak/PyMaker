<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/6074018/why-does-the-expression-0-0-0-return-false-in-python">Why does the expression 0 &lt; 0 == 0 return False in Python?</a>
<span class="question-originals-answer-count">
                    9 answers
                </span>
</li>
</ul>
</div>
<p>When I was looking at answers to <a href="https://stackoverflow.com/questions/9201445/python-best-way-to-keep-track-of-results-from-loop">this question</a>, I found I didn't understand my own answer.</p>
<p>I don't really understand how this is being parsed. Why does the second example return False?</p>
<pre><code>&gt;&gt;&gt; 1 in [1,0]             # This is expected
True
&gt;&gt;&gt; 1 in [1,0] == True     # This is strange
False
&gt;&gt;&gt; (1 in [1,0]) == True   # This is what I wanted it to be
True
&gt;&gt;&gt; 1 in ([1,0] == True)   # But it's not just a precedence issue!
                           # It did not raise an exception on the second example.

Traceback (most recent call last):
  File "&lt;pyshell#4&gt;", line 1, in &lt;module&gt;
    1 in ([1,0] == True)
TypeError: argument of type 'bool' is not iterable
</code></pre>
<p>Thanks for any help. I think I must be missing something really obvious.</p>
<hr/>
<p>I think this is subtly different to the linked duplicate:</p>
<p><a href="https://stackoverflow.com/questions/6074018/why-does-the-expression-0-0-0-return-false-in-python">Why does the expression 0 &lt; 0 == 0 return False in Python?</a>.</p>
<p>Both questions are to do with human comprehension of the expression. There seemed to be two ways (to my mind) of evaluating the expression. Of course neither were correct, but in my example, the last interpretation is impossible.</p>
<p>Looking at <code>0 &lt; 0 == 0</code> you could imagine each half being evaluated and making sense as an expression:</p>
<pre><code>&gt;&gt;&gt; (0 &lt; 0) == 0
True
&gt;&gt;&gt; 0 &lt; (0 == 0)
True
</code></pre>
<p>So the link answers why this evaluates <code>False</code>:</p>
<pre><code>&gt;&gt;&gt; 0 &lt; 0 == 0
False
</code></pre>
<p>But with my example <code>1 in ([1,0] == True)</code> doesn't make sense as an expression, so instead of there being two (admittedly wrong) possible interpretations, only one seems possible:</p>
<pre><code>&gt;&gt;&gt; (1 in [1,0]) == True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python actually applies comparison operator chaining here.  The expression is translated to</p>
<pre><code>(1 in [1, 0]) and ([1, 0] == True)
</code></pre>
<p>which is obviously <code>False</code>.</p>
<p>This also happens for expressions like</p>
<pre><code>a &lt; b &lt; c
</code></pre>
<p>which translate to</p>
<pre><code>(a &lt; b) and (b &lt; c)
</code></pre>
<p>(without evaluating <code>b</code> twice).</p>
<p>See the <a href="http://docs.python.org/reference/expressions.html#not-in">Python language documentation</a> for further details.</p>
</div>
<span class="comment-copy">Operator precedence... the <code>==</code> binds tighter than <code>in</code>, so <code>[1,0] == True</code> gets evaluated first, then the result of that gets fed to <code>1 in other_result</code>.</span>
<span class="comment-copy">I've removed the Python-2.7 tag, since Python 3.2 behaves the same way.</span>
<span class="comment-copy">@Marc B: Doesn't explain the second expression</span>
<span class="comment-copy">@MarcB, the question included a test using parentheses to disprove that interpretation.</span>
<span class="comment-copy">Additional proof for this, <code>1 in [1, 0] == [1, 0]</code> evaluates to <code>True</code>.</span>
<span class="comment-copy">I've long thought of this as a language wart.  I would have preferred that the <code>in</code> operator have a higher precedence than other comparison operators and that it not chain.  But perhaps I'm missing a use case.</span>
<span class="comment-copy">nice catch, I didn't even think of that.  It doesn't make much sense to allow chaining of <code>in</code> - after all <code>x &lt; y &lt; z</code> makes sense, but not so much with <code>x in y in z</code></span>
<span class="comment-copy">@Sven Useful: maybe. Readable: definitely not. Python purports to emulate common mathematical typography with this convention, but when used with <code>in</code> this is simply no longer the case and makes it quite counter-intuitive.</span>
<span class="comment-copy">@KonradRudolph: I've seen thinks like "1 ≤ x ∈ ℝ" in mathematical texts more than once, but I basically agree with you.</span>
