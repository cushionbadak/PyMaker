<div class="post-text" itemprop="text">
<p>I have a dataframe where I want to extract stuff after double space. For all rows in column <code>NAME</code> there is a double white space after the company names before the integers.</p>
<pre><code>                                    NAME  INVESTMENT  PERCENT
0     APPLE COMPANY A  57 638 232 stocks     OIL LTD  0.12322
1  BANANA 1 COMPANY B  12 946 201 stocks    GOLD LTD  0.02768
2     ORANGE COMPANY C  8 354 229 stocks     GAS LTD  0.01786

df = pd.DataFrame({
    'NAME': ['APPLE COMPANY A  57 638 232 stocks', 'BANANA 1 COMPANY B  12 946 201 stocks', 'ORANGE COMPANY C  8 354 229 stocks'],
    'PERCENT': [0.12322, 0.02768 , 0.01786]
    })
</code></pre>
<p>I have this earlier, but it also includes integers in the company name:</p>
<pre><code>df['STOCKS']=df['NAME'].str.findall(r'\b\d+\b').apply(lambda x: ''.join(x))
</code></pre>
<p>Instead I tried to extract after double spaces</p>
<pre><code>df['NAME'].str.split('(\s{2})')
</code></pre>
<p>which gives output:</p>
<pre><code>0       [APPLE COMPANY A,   , 57 638 232 stocks]
1    [BANANA 1 COMPANY B,   , 12 946 201 stocks]
2       [ORANGE COMPANY C,   , 8 354 229 stocks]
</code></pre>
<p>However, I want the integers that occur after double spaces to be joined/merged and put into a new column. </p>
<pre><code>                 NAME  PERCENT  STOCKS
0     APPLE COMPANY A  0.12322  57638232
1  BANANA 1 COMPANY B  0.02768  12946201
2    ORANGE COMPANY C  0.01786  12946201
</code></pre>
<p>How can I modify my second function to do what I want?</p>
</div>
<div class="post-text" itemprop="text">
<p>Following the original logic you may use</p>
<pre><code>df['STOCKS'] = df['NAME'].str.extract(r'\s{2,}(\d+(?:\s\d+)*)', expand=False).str.replace(r'\s+', '')
df['NAME'] = df['NAME'].str.replace(r'\s{2,}\d+(?:\s\d+)*\s+stocks', '')
</code></pre>
<p>Output:</p>
<pre><code>                 NAME  PERCENT    STOCKS
0     APPLE COMPANY A  0.12322  57638232
1  BANANA 1 COMPANY B  0.02768  12946201
2    ORANGE COMPANY C  0.01786   8354229
</code></pre>
<p><strong>Details</strong></p>
<ul>
<li><code>\s{2,}(\d+(?:\s\d+)*)</code> is used to extract the first occurrence of whitespace-separated consecutive digit chunks after 2 or more whitespaces and <code>.replace(r'\s+', '')</code> removes any whitespaces in that extracted text afterwards</li>
<li><code>.replace(r'\s{2,}\d+(?:\s\d+)*\s+stocks'</code> updates the text in the <code>NAME</code> column, it removes 2 or more whitespaces, consecutive whitespace-separated digit chunks and then 1+ whitespaces and <code>stocks</code>. Actually, the last <code>\s+stocks</code> may be replaced with <code>.*</code> if there are other words.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Another <code>pandas</code> approach, which will cast <code>STOCKS</code> to numeric type:</p>
<pre><code>df_split = (df['NAME'].str.extractall('^(?P&lt;NAME&gt;.+)\s{2}(?P&lt;STOCKS&gt;[\d\s]+)')
            .reset_index(level=1, drop=True))

df_split['STOCKS'] = pd.to_numeric(df_split.STOCKS.str.replace('\D', ''))
</code></pre>
<p>Assign these columns back into your original <code>DataFrame</code>:</p>
<pre><code>df[['NAME', 'STOCKS']] = df_split[['NAME', 'STOCKS']]

         COMPANY_NAME    STOCKS  PERCENT
0     APPLE COMPANY A  57638232  0.12322
1  BANANA 1 COMPANY B  12946201  0.02768
2    ORANGE COMPANY C   8354229  0.01786
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use look behind and look ahead operators.</p>
<pre><code>''.join(re.findall(r'(?&lt;=\s{2})(.*)(?=stocks)',string)).replace(' ','')
</code></pre>
<p>This catches all characters <strong>between two spaces and the word stocks</strong> and replace all the spaces with null.</p>
<p>Another Solution using Split</p>
<pre><code>df["NAME"].apply(lambda x:x[x.find('  ')+2:x.find('stocks')-1].replace(' ',''))
</code></pre>
<p>Reference:-</p>
<ol>
<li><a href="https://stackoverflow.com/questions/6109882/regex-match-all-characters-between-two-strings">Look_behind</a></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>You can try </p>
<pre><code>df['STOCKS'] = df['NAME'].str.split(',')[2].replace(' ', '')
df['NAME'] = df['NAME'].str.split(',')[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This can be done without using regex by using split.</p>
<pre><code>df['STOCKS'] = df['NAME'].apply(lambda x: ''.join(x.split('  ')[1].split(' ')[:-1]))
df['NAME'] = df['NAME'].str.replace(r'\s?\d+(?:\s\d+).*', '')
</code></pre>
</div>
<span class="comment-copy">Why do you want to use regex ? it's slow and you can just split on 2 spaces (<code>.split('  ')</code>) also, i assume that by removing your first column and creating a new one while putting the content into it it'd work</span>
<span class="comment-copy">regex should not be the best solution, but this works fine so, up for this</span>
<span class="comment-copy">I get the error message: 'DataFrame' object has no attribute 'str' for <code>df['NAME'].str.extract(r'\s{2,}(\d+(?:\s\d+)*)').str.replace('\s+', '')</code></span>
<span class="comment-copy">@Mataunited17 I used the data from your question and it works in my Python 3.6.</span>
<span class="comment-copy">I see. I am using 3.7.1. Strange.</span>
<span class="comment-copy">@Mataunited17 Added <code>expand=False</code> so that <code>extract</code> only returned the series and tested in Python 3.7. Also works in Python 3.6.</span>
<span class="comment-copy">This solution was the best so far. However, does the solution replace any other column that exists from before? My original dataframe has 3 columns.</span>
<span class="comment-copy">It wont replace, it creates a new <code>DataFrame</code>. I can update my answer to assign back into the original df if that's preferred?</span>
<span class="comment-copy">Thanks for the edit! This was exactly what I was looking for.</span>
<span class="comment-copy">Or he could just do <code>.split('   ')[1].split()[0]</code> which is way faster than regex (2 spaces in the first split)</span>
<span class="comment-copy">@Nenri that didnt work with my dataframe.</span>
<span class="comment-copy">@Mataunited17 can you show me what you tried to do ? that should work just fine</span>
<span class="comment-copy">@Nenri I did <code>df['NAME'].str.split(' ')[1].split()[0]</code> which gave me error: 'list' object has no attribute 'split'. Which is strange, because I have a dataframe.</span>
<span class="comment-copy">yeah, and <code>.str</code> is supposed to return you a string</span>
<span class="comment-copy">That's not how join works</span>
<span class="comment-copy">Thx, but still, there's no comma in his string, you should split on spaces and as one has 2 spaces, it should be <code>.split()[3].split()[0]</code></span>
<span class="comment-copy">Oh sorry I forgot to change it</span>
<span class="comment-copy">@Vaghinak this didn't work either. I get the error message: 'list' object has no attribute 'replace'</span>
<span class="comment-copy">@Mataunited17 'cause you need to split on spaces and yeah this answer is false, he forgot a lot of things</span>
