<div class="post-text" itemprop="text">
<p>This is my dictionary :</p>
<pre><code>d = {'jan': 50, 'feb': 30, 'march': 60, 'april': 50, 'may': 50, 'june': 60, 'july': 20}
</code></pre>
<p>I am expecting output like this :</p>
<pre><code>d = {'jan': 50, 'april': 50, 'may': 50, 'march': 60, 'june': 60, 'feb': 30, 'july': 20}
</code></pre>
<p>When I run this program I am getting different output than expected :</p>
<pre><code>d = {'jan': 50, 'feb': 30, 'march': 60, 'april': 50, 'may': 50, 'june': 60, 'july': 20}
sortlist = sorted(d, key=d.get)
print(sortlist)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can start by counting the amount of times each value appears with <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>:</p>
<pre><code>from collections import Counter
c = Counter(d.values())
# Counter({20: 1, 30: 1, 50: 3, 60: 2})
</code></pre>
<p>And now sort the dictionary looking up how many times each value appears using a <code>key</code> in <code>sorted</code>:</p>
<pre><code>sorted(d.items(), key=lambda x: c[x[1]], reverse=True)
[('jan', 50), ('april', 50), ('may', 50), ('march', 60), ('june', 60), 
 ('feb', 30), ('july', 20)]
</code></pre>
<p>Note however that if you obtain a dictionary from the result, the order will not be mantained, as dictionaries have no order.</p>
<p>So one thing you can so is use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>collections.OrderedDict</code></a> to keep the order, simply call <code>OrderedDict(res)</code> on the resulting list of tuples.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>d={'january': 500, 'feb':600, 'march':300,'april':500,'may':500,'june':600,'july':200}

from collections import defaultdict
from collections import OrderedDict

count_dict = defaultdict(int)
for key, value in d.items():
  count_dict[value] += 1
</code></pre>
<p>First, we count occurences of each value. <code>Counter</code> can be used instead of <code>defaultdict</code>. Then sort them according to <code>count_dict</code> lookup table we just created.</p>
<pre><code>sorted_dict = OrderedDict(sorted(d.items(), key=lambda item: count_dict[item[1]], reverse=True))
print(sorted_dict)

&gt;&gt;&gt; OrderedDict([('january', 500), ('april', 500), ('may', 500), ('feb', 600), ('june', 600), ('march', 300), ('july', 200)])
</code></pre>
<hr/>
<p><strong>Update :</strong> You can create <code>count_dict</code> with <code>Counter</code> like:</p>
<pre><code>from collections import Counter

count_dict = Counter(d.values())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure if you want to keep the order of months. I assume you want, so here is the solution.</p>
<pre><code>from collections import Counter, OrderedDict
# save the order of months DESC
months = ['july', 'june', 'may', 'april', 'march', 'feb', 'jan']
d = {'jan': 50, 'feb': 30, 'march': 60, 'april': 50, 'may': 50, 'june': 60, 'july': 20}
c = Counter(d.values())
# sort the keys by count and months DESC
# because we save the order of months DESC, so actually the order of months is ASC
s = sorted(d, key=lambda k: (c[d[k]], months.index(k)), reverse=True)
# save result into OrderedDict
r = OrderedDict([(sk, d[sk]) for sk in s])
</code></pre>
<p>And the result is:</p>
<pre><code>OrderedDict([('jan', 50), ('april', 50), ('may', 50), ('march', 60), ('june', 60), ('feb', 30), ('july', 20)])
</code></pre>
</div>
<span class="comment-copy">If you want to sort by the number of duplicates, then you need to do some counting... <code>key=d.get</code> obviously isn't gonna do the trick.</span>
<span class="comment-copy">It would be useful if you could provide a bit more information on what you are actually trying to achieve? As it stands it is very unclear, at least to me.</span>
<span class="comment-copy">Looks like a job for <code>Counter</code>. Perhaps count the repeating values of the dict and then display them in desc ord</span>
<span class="comment-copy">I guess you want to do these 3 things, 1: count how many times did the number appeared, 2: sort by the count, 3: if the number is the same, sort by months in the key. Correct?</span>
<span class="comment-copy">@Ramani how exactly do you want your dict to be sorted ? It is not clear as to you want it to be sorted by key or value</span>
<span class="comment-copy">yes i want month ordered, thanks for that!</span>
