<div class="post-text" itemprop="text">
<p>So I have recently been learning about the mutable properties of lists, and how variables function in Python, and from what I understand the following piece of code should work:</p>
<pre><code>def history(function, toAdd):
    global history1
    global history2
    global history3
    global history4
    global history5

    if function == 'add':
        history5 = history4[:]
        history4 = history3[:]
        history3 = history2[:]
        history2 = history1[:]
        history1 = toAdd[:]
    elif function == 'undo':
        toReturn = history1[:]
        history1 = history2[:]
        history2 = history3[:]
        history3 = history4[:]
        history4 = history5[:]
        return(toReturn[:])
    elif function == 'return':
        return(history1[:])
</code></pre>
<p>However for some reason the list that I pass to history,</p>
<pre><code>history('add', lst[:])
</code></pre>
<p>Still links the variables, meaning when I change something in lst, I also change history1. I have also tried using list() instead of [:] but that yields the same results. What am I missing here?</p>
</div>
<div class="post-text" itemprop="text">
<p>What you are missing is that <code>lst[:]</code> is only a shallow copy.  The new list that
is returned can have elements added and removed without affecting the original
list, but the references contained in the list are still shared.  So modifying
an element, say <code>original_list[1].fooBar()</code>, will affect both the reference
contained in the original list and the new list, since they are the <em>same</em>
reference.</p>
<p>You need to look at using <code>deepcopy()</code> (see the <a href="https://docs.python.org/3/library/copy.html" rel="nofollow">copy modules's Python
docs</a>)--however, that come with
it's own set of issues (objects that don't support it, copying too much, etc.).</p>
<p>In your case, it probably means <code>history('add', lst[:])</code> should really be
something like: <code>history('add', copy.deepcopy(lst))</code>.</p>
<p>It looks like there are some other issues with your example too.  You probably
don't want to be creating copies all the time, but rather once when it enters
this history, and probably again when it leaves?  I'm not sure I understand the
real problem, so this could be poor advice, but I'd expect the code to be more
like:</p>
<pre><code>def history(function, toAdd):
    global history1
    global history2
    global history3
    global history4
    global history5

    if function == 'add':
        history5 = history4
        history4 = history3
        history3 = history2
        history2 = history1
        history1 = copy.deepcopy(toAdd)
    elif function == 'undo':
        toReturn = history1
        history1 = history2
        history2 = history3
        history3 = history4
        history4 = history5

        # Should history5 still be valid at this point?  Maybe do?
        #    history5 = None

        # There could be several issues here.  Remember, this is a deep copy
        # of a previous object/collection.  If your code is  expecting the
        # original object, you will not have it.
        return toReturn
    elif function == 'return':
        # Is it expected that whomever calls this will receive a copy that
        # they can manipulate?  If so, the deepcopy() here is required.
        return copy.deepcopy(history1)
</code></pre>
<p>I left some notes inline above where I think you should be concerned about
things.  I would also consider simplifying this code a little more:</p>
<pre><code>from collections import deque
_history_store = deque(maxlen=5)

def history(function, toAdd):
    global _history_store

    if function == 'add':
        _history_store.append(copy.deepcopy(toAdd))

    elif function == 'undo':
        if _history_store:
            return _history_store.pop()

        # No history to return.
        return None

    elif function == 'return':
        if _history_store:
            return copy.deepcopy(_history_store[-1])

        # No history to return.
        return None
</code></pre>
<p>Using a deque will help keep cap the size at 5 entries, without needing to do
all the shuffling yourself.</p>
</div>
<span class="comment-copy">Welcome to SO! Make minimal examples, and say on your title <i>how</i> it is not behaving as expected. :-)</span>
<span class="comment-copy">You know that you can use one list for your approach instead of 5 variables? They support <code>append(item)</code> and <code>pop()</code>.</span>
