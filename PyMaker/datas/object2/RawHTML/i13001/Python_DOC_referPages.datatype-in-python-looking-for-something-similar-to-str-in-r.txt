<div class="post-text" itemprop="text">
<p>I want to find the datatype of all the variables in a csv file in python. In R we can achieve the same using <code>str()</code> command .</p>
<pre><code>str(data_frame)
</code></pre>
<p>this gives an output like this</p>
<pre><code>&gt; str(train)
'data.frame':   891 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : Factor w/ 891 levels "Abbing, Mr. Anthony",..: 109 191 358 277 16 559 520 629 417 581 ...
 $ Sex        : Factor w/ 2 levels "female","male": 2 1 1 1 2 2 2 2 1 1 ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : Factor w/ 681 levels "110152","110413",..: 524 597 670 50 473 276 86 396 345 133 ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : Factor w/ 148 levels "","A10","A14",..: 1 83 1 57 1 1 131 1 1 1 ...
 $ Embarked   : Factor w/ 4 levels "","C","Q","S": 4 2 4 4 4 3 4 4 4 2 ...
</code></pre>
<p>is there a similar way in python?</p>
</div>
<div class="post-text" itemprop="text">
<p>You probably want <a href="http://pandas.pydata.org/pandas-docs/stable/basics.html#dtypes" rel="nofollow"><code>dtypes</code></a></p>
<pre><code>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; df = pd.DataFrame({'foo': [1, 2, 3], 'bar': [1.0, 2.0, 3.0], 'baz': ['qux', 'quux', 'quuux']})
&gt;&gt;&gt; df.dtypes
bar    float64
baz     object
foo      int64
dtype: object
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>An easy way to tell if a string represents a valid <code>int</code> is to simply attempt to convert the string to an <code>int</code> and catch the <code>ValueError</code> exception if it isn't a legal <code>int</code>. Similarly with <code>float</code>. Here's a brief demo in Python 2:</p>
<pre><code>data = 'string 37 3.14159 word -5 0 -1.4142 text'

def datatype(s):
    try:
        int(s)
    except ValueError:
        try:
            float(s)
        except ValueError:
            return 'string'
        else:
            return 'float'
    else:
        return 'int'

for s in data.split():
    print '%-15r: %s' % (s, datatype(s))
</code></pre>
<p><strong>output</strong></p>
<pre><code>'string'       : string
'37'           : int
'3.14159'      : float
'word'         : string
'-5'           : int
'0'            : int
'-1.4142'      : float
'text'         : string
</code></pre>
<p>However, normal Python code (generally) wouldn't use a function quite like that: it would assume that the data is correct and wrap the conversion code in a simple <code>try: ... except ValueError:... else:</code> block rather than using that crazy nested structure to test data <em>before</em> you're ready to process it. </p>
<p>A sensible CSV won't have different datatypes in random positions, so your code shouldn't need to <em>guess</em> what type of data is in a give field. OTOH, not all CSV's are well-designed... :)    </p>
</div>
<span class="comment-copy"><i>all the variables in a table</i> What is <i>a table</i> ?</span>
<span class="comment-copy">@KevinGuan - it is a csv file.</span>
<span class="comment-copy">There's no automated way to do this in Python but you can do it manually with the .format() directives</span>
<span class="comment-copy">@SilvioMayolo - thank you for the information</span>
<span class="comment-copy">I think <code>df.info()</code> with <code>pandas</code> is similar. More here <a href="http://pandas.pydata.org/pandas-docs/version/0.17.0/dsintro.html#console-display" rel="nofollow noreferrer">pandas.pydata.org/pandas-docs/version/0.17.0/â€¦</a></span>
<span class="comment-copy">Thank you. this has worked.</span>
<span class="comment-copy">Also, take a look at <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a> to handle all Python literals (without using unsafe <code>eval</code>). Let's you do a single call to convert to either <code>int</code> or <code>float</code> as appropriate.</span>
<span class="comment-copy">The question talks about a simple CSV file, so I'm just showing a simple solution that doesn't require advanced modules that a new Python programmer shouldn't need to bother with (like <code>ast</code>), or 3rd-party modules. If they wanted a solution using <code>pandas</code> (for example), then they could have mentioned that in the question (and added the appropriate tag).</span>
<span class="comment-copy"><code>ast</code> as a whole: Nuts, agreed. <code>ast.literal_eval</code> specifically is incredibly useful. Not saying it needs to be in the answer, but people should know about it since it's not at all easy to find otherwise.</span>
<span class="comment-copy">@ShadowRanger: Good point, <code>ast.literal_eval</code> certainly does have its uses. OTOH, new Python programmers need to know about the standard techniques using <code>try:..except</code>, and the <a href="http://stackoverflow.com/a/11360880/4014959">EAFP</a> principle, IMHO.</span>
