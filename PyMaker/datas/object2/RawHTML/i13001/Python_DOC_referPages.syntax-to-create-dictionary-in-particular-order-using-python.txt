<div class="post-text" itemprop="text">
<p>I have a dictionary that I declared in a particular order and want to keep it in that order all the time. The keys/values can't really be kept in order based on their value, I just want it in the order that I declared it.</p>
<p>So if I have the dictionary:</p>
<pre><code>d = {'ac': 33, 'gw': 20, 'ap': 102, 'za': 321, 'bs': 10}
</code></pre>
<p>It isn't in that order if I view it or iterate through it, is there any way to make sure Python will keep the explicit order that I declared the keys/values in?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from collections import OrderedDict
OrderedDict((word, True) for word in words)
</code></pre>
<p>contains </p>
<pre><code>OrderedDict([('He', True), ('will', True), ('be', True), ('the', True), ('winner', True)])
</code></pre>
<p>If the values are <code>True</code> (or any other immutable object), you can also use:</p>
<pre><code>OrderedDict.fromkeys(words, True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Rather than explaining the theoretical part, I'll give a simple example.</p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; my_dictionary=OrderedDict()
&gt;&gt;&gt; my_dictionary['foo']=3
&gt;&gt;&gt; my_dictionary['aol']=1
&gt;&gt;&gt; my_dictionary
OrderedDict([('foo', 3), ('aol', 1)])
&gt;&gt;&gt; dict(my_dictionary)
{'foo': 3, 'aol': 1}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From Python 3.6 onwards, the standard <code>dict</code> type maintains insertion order by default.</p>
<p>Defining</p>
<pre><code>d = {'ac':33, 'gw':20, 'ap':102, 'za':321, 'bs':10}
</code></pre>
<p>will result in a dictionary with the keys in the order listed in the source code.</p>
<p>This was achieved by using a simple array with integers for the sparse hash table, where those integers index into another array that stores the key-value pairs (plus the calculated hash). That latter array just happens to store the items in insertion order, and the whole combination actually uses less memory than the implementation used in Python 3.5 and before. See the <a href="https://mail.python.org/pipermail/python-dev/2012-December/123028.html" rel="noreferrer">original idea post by Raymond Hettinger</a> for details.</p>
<p>In 3.6 this  was still considered an implementation detail; see the <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-compactdict" rel="noreferrer"><em>What's New in Python 3.6</em> documentation</a>:</p>
<blockquote>
<p>The order-preserving aspect of this new implementation is considered an implementation detail and should not be relied upon (this may change in the future, but it is desired to have this new dict implementation in the language for a few releases before changing the language spec to mandate order-preserving semantics for all current and future Python implementations; this also helps preserve backwards-compatibility with older versions of the language where random iteration order is still in effect, e.g. Python 3.5).</p>
</blockquote>
<p>Python 3.7 elevates this implementation detail to a <em>language specification</em>, so  it is now mandatory that <code>dict</code> preserves order in all Python implementations compatible with that version or newer. See the <a href="https://mail.python.org/pipermail/python-dev/2017-December/151283.html" rel="noreferrer">pronouncement by the BDFL</a>.</p>
<p>You may still want to use the <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="noreferrer"><code>collections.OrderedDict()</code> class</a> in certain cases, as it offers some additional functionality on top of the standard <code>dict</code> type. Such as as being <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Reversible" rel="noreferrer">reversible</a> (this extends to the <a href="https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects" rel="noreferrer">view objects</a>), and supporting reordering (via the <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict.move_to_end" rel="noreferrer"><code>move_to_end()</code> method</a>).</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Note that this answer applies to python versions prior to python3.7.  CPython 3.6 maintains insertion order under most circumstances as an implementation detail.  Starting from Python3.7 onward, it has been declared that implementations MUST maintain insertion order to be compliant.</strong></p>
<hr/>
<p>python dictionaries are unordered.  If you want an ordered dictionary, try <a href="http://docs.python.org/library/collections.html#collections.OrderedDict" rel="noreferrer">collections.OrderedDict</a>.</p>
<p>Note that OrderedDict was introduced into the standard library in python 2.7.  If you have an older version of python, you can find recipes for ordered dictionaries on <a href="http://code.activestate.com/recipes/576693-ordered-dictionary-for-py24/" rel="noreferrer">ActiveState</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Dictionaries will use an order that makes searching efficient, and you cant change that,</p>
<p>You could just use a list of objects (a 2 element tuple in a simple case, or even a class), and append items to the end. You can then use linear search to find items in it.</p>
<p>Alternatively you could create or use a different data structure created with the intention of maintaining order.</p>
</div>
<div class="post-text" itemprop="text">
<p>I came across this post while trying to figure out how to get OrderedDict to work. PyDev for Eclipse couldn't find OrderedDict at all, so I ended up deciding to make a tuple of my dictionary's key values as I would like them to be ordered. When I needed to output my list, I just iterated through the tuple's values and plugged the iterated 'key' from the tuple into the dictionary to retrieve my values in the order I needed them.</p>
<p>example:</p>
<pre><code>test_dict = dict( val1 = "hi", val2 = "bye", val3 = "huh?", val4 = "what....")
test_tuple = ( 'val1', 'val2', 'val3', 'val4')
for key in test_tuple: print(test_dict[key])
</code></pre>
<p>It's a tad cumbersome, but I'm pressed for time and it's the workaround I came up with.</p>
<p>note: the list of lists approach that somebody else suggested does not really make sense to me, because lists are ordered and indexed (and are also a different structure than dictionaries).</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't really do what you want with a dictionary. You already have the dictionary <code>d = {'ac':33, 'gw':20, 'ap':102, 'za':321, 'bs':10}</code>created. I found there was no way to keep in order once it is already created. What I did was make a json file instead with the object:</p>
<pre><code>{"ac":33,"gw":20,"ap":102,"za":321,"bs":10}
</code></pre>
<p>I used:</p>
<pre><code>r = json.load(open('file.json'), object_pairs_hook=OrderedDict)
</code></pre>
<p>then used:</p>
<pre><code>print json.dumps(r)
</code></pre>
<p>to verify.</p>
</div>
<div class="post-text" itemprop="text">
<p>Generally, you can design a class that behaves like a dictionary, mainly be implementing the methods <code>__contains__</code>, <code>__getitem__</code>, <code>__delitem__</code>, <code>__setitem__</code> and some more.  That class can have any behaviour you like, for example prividing a sorted iterator over the keys ...</p>
</div>
<div class="post-text" itemprop="text">
<p>I had a similar problem when developing a Django project. I couldn't use OrderedDict, because I was running an old version of python, so the simple solution was to use Django's SortedDict class:</p>
<p><a href="https://code.djangoproject.com/wiki/SortedDict" rel="nofollow">https://code.djangoproject.com/wiki/SortedDict</a></p>
</div>
<div class="post-text" itemprop="text">
<p>if you would like to have a dictionary  in a specific order, you can also create a list of lists, where the first item will be the key, and the second item will be the value
and will look like this
example </p>
<pre><code>&gt;&gt;&gt; list =[[1,2],[2,3]]
&gt;&gt;&gt; for i in list:
...     print i[0]
...     print i[1]

1
2
2
3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another alternative is to use Pandas <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html" rel="nofollow noreferrer"><code>dataframe</code></a> as it guarantees the order and the index locations of the items in a dict-like structure.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do the same thing which i did for dictionary.</p>
<p>Create a list and empty dictionary:</p>
<pre><code>dictionary_items = {}
fields = [['Name', 'Himanshu Kanojiya'], ['email id', 'hima@gmail.com']]
l = fields[0][0]
m = fields[0][1]
n = fields[1][0]
q = fields[1][1]
dictionary_items[l] = m
dictionary_items[n] = q
print dictionary_items
</code></pre>
</div>
<span class="comment-copy">Can you clarify <i>why</i> you want to keep this "in order"?</span>
<span class="comment-copy">I agree with Peter Hansen here. A dictionary is not meant to store order, but rather to store key/value pairs and have different access/add times to normal lists.</span>
<span class="comment-copy">@ZoranPavlovic: It seems Python's authors disagree with you, because they developed OrderedDict in Python 2.7. Similar classes exist in other languages, too. It's not an unknown requirement in computer science.</span>
<span class="comment-copy">Though still an implementation detail (meaning you should use <code>OrderedDict</code> until it is guaranteed), dicts in Python 3.6+ remember insertion order, see <a href="http://stackoverflow.com/questions/39980323/dictionaries-are-ordered-in-cpython-3-6">Dictionaries are ordered in Python 3.6+</a>.</span>
<span class="comment-copy">Standard python dicts are guaranteed to preserve the insertion order (even on deletion) for Python 3.7+ , <a href="https://mail.python.org/pipermail/python-dev/2017-December/151283.html" rel="nofollow noreferrer">as part of the language spec</a></span>
<span class="comment-copy">Worth noting, of course, that the 'immutable' part isn't a hard and fast rule that Python will enforce - its "only" a good idea.</span>
<span class="comment-copy">be aware that solutions like: <code>OrderedDict(FUTURE=[], TODAY=[], PAST=[])</code> wont't work, when mentioned aproach: <code>OrderedDict([('FUTURE', []), ('TODAY', []), ('PAST', [])])</code> will keep order.</span>
<span class="comment-copy">@andi  I got another problem,when using jsonify, the OrderedDict seems lost it's order when generate the json data.Anyway to solve this?</span>
<span class="comment-copy"><a href="https://github.com/pallets/flask/issues/974" rel="nofollow noreferrer">github.com/pallets/flask/issues/974</a> this can be used to solve the problem..</span>
<span class="comment-copy">Python3.7 now has dict ordered by default. <a href="https://mail.python.org/pipermail/python-dev/2017-December/151283.html" rel="nofollow noreferrer">mail.python.org/pipermail/python-dev/2017-December/151283.html</a></span>
<span class="comment-copy">Is there a way to mass assign OrderedDict like the Dict type?</span>
<span class="comment-copy"><code>OrderedDict</code> indeed solves the problem, but... in this particular example you get exactly the same result using a standard dictionary</span>
<span class="comment-copy">@Tonechas: I just tried the example with a standard dictionary, and got <code>{'aol': 1, 'foo': 3}</code> So I think it's a good illustrative example.</span>
<span class="comment-copy">There's a lesson for everyone: it was discovered (I think around the 2.4 release) that Python's <a href="http://bugs.python.org/issue13703" rel="nofollow noreferrer">predictable hashing might give rise to security vulnerabilities</a>, so now there's no guarantee that even two different runs of the same code will give the same ordering in a standard dict.</span>
<span class="comment-copy">@tyan you can call <code>OrderedDict.update()</code> with an iterable containing key-value pairs: <code>d1.upate([(key1, val1), (key2, val2)])</code>.</span>
<span class="comment-copy">That nice (change of) behaviour does not seem to be documented in <a href="https://docs.python.org/3/library/stdtypes.html#dict" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#dict</a> - I was looking for a hint on the order. <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">docs.python.org/3/tutorial/datastructures.html#dictionaries</a> mentions "unordered", "arbitrary order".</span>
<span class="comment-copy">@handle and that's because this is an implementation detail, as Chris notes. The <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-compactdict" rel="nofollow noreferrer">What's new in Python 3.6 docs</a> mention it.</span>
<span class="comment-copy">This solved my issue. I was using Python to sort and align a ton of things from a spreadsheet that was feeding another system. The order was critical. I updated to 3.6.4 (Latest Hombrew Version) and it came out in order without messing with it!</span>
<span class="comment-copy">@Chris_Rands: quite right, added that in.</span>
<span class="comment-copy">see @martijn's post above. From python 3.6 onwards, dict supports insertion ordering.</span>
<span class="comment-copy"><i>Dictionaries will use an order that makes searching efficient</i> Finally, someone pointed it out.</span>
<span class="comment-copy">Great solution. I will use it to write json to file, always in the same order.</span>
<span class="comment-copy">So why not start with an OrderedDict from a list? The JSON file doesn't really add anything here.</span>
<span class="comment-copy">Yes, list is more useful to keep order but the answer was in regards to the question about ordering dictionaries. Just letting people know about the limitations of using a dictionary and giving them a possible work around if they need to use a dictionary for some reason.</span>
<span class="comment-copy">But that part is already covered by much older answers, dating back to 2012.</span>
<span class="comment-copy">That is not a "dictionary" because you cannot lookup items by their key without searching through the entire collection (taking O(n) time).</span>
<span class="comment-copy">Yes, it is not a dictionary, but, depending on the situation, it could provide a valid solution the problem of the original poster.</span>
<span class="comment-copy">he didn't say exactly how we wanted, just that want to be able to order them =),   as always there is plenty of ways to do one thing.</span>
