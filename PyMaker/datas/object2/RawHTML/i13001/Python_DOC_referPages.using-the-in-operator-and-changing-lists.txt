<div class="post-text" itemprop="text">
<p>Im trying to produce a table with one row with numbers increasing by one and another with the respective composites with the limit being 100 like:</p>
<pre><code>Numbers----------composites
x---------------numbers 1-100 divisible by x
x+1---------------numbers 1-100 divisible by x+1 but aren't in x
x+2---------------numbers 1-100 divisible by x+2 but aren't in x or x+1    x+3---------------numbers 1-100 divisible by x+3 but aren't in x,x+1,or x+2    etc
</code></pre>
<p><code>Numbers</code> is a permanent list that starts off as 2-100 I whittle down as I pull out every composite number within the function, at the end it should only contain prime numbers.
<code>composites</code> is a list I fill with composites of a certain number (2,3,4 etc) that I then wish to check with the current <code>numbers</code> list to make sure there are no duplicates.  I print whats left, empty the list and increase the current variable by 1 and repeat.<br/>
This is the coding ive come up with, I understand its very sloppy but I literally know nothing about the subject and my professor likes us to learn trial by fire and this is what ive managed to scrounge up from the textbook.  The main issue of my concern is the adding and removing of elements from certain lists</p>
<pre><code>def main():
    x=2
    n=2
    print("numbers""       ""composite")
    print("------------------------")
    cross_out(n,x)
def cross_out(n,x):
    composites=[]
    prime=[]
    numbers=[]
    while x&lt;101:
        numbers.append(x)
        x=x+1
    x=2
    for x in range(2,102):
        if x==101:
            search=composites[0]
            index=0
            while index&lt;=len(composites):
                if search in numbers:
                    search=search+1
                    index=index+1
                else:
                    if search in composites:
                        composites.remove(search)
                    else:
                        pass
            print(n,"---&gt;",composites)
            x=2
            composites=[]
            n=n+1
            index=0
        elif x%n==0:
            composites.append(x)
            if x in numbers:
                numbers.remove(x)
            else:
                pass
            x=x+1
        else:
            x=x+1



main()
cross_out()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think I'm understanding your description correctly, and this is what I came up with.</p>
<p>I used a <a href="https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset" rel="nofollow"><code>set</code></a> to keep track of the number you have added to the composites already. This makes the problem pretty simple. Also, advice when writing functions is to not overwrite your parameters. For example, in <code>cross_out</code>, you are doing <code>x = &lt;value&gt;</code> and <code>n = &lt;value&gt;</code> several times. </p>
<pre><code>def cross_out(n,x):
    composites=[]
    seen = set()
    numbers = range(x, 101)
    primes = []

    for num in numbers:
        for val in numbers:
            if val % num == 0 and val not in seen:
                composites.append(val)
                seen.add(val)
        if composites:
            primes.append(composites[0])
        print(num,'---&gt;',composites)
        composites = []

    print(primes)

def main():
    print("numbers        composite")
    print("------------------------")
    cross_out(2, 2)


main()
</code></pre>
<h3>Sample Output</h3>
<pre><code>numbers        composite
------------------------
2 ---&gt; [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]
3 ---&gt; [3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93, 99]
4 ---&gt; []
5 ---&gt; [5, 25, 35, 55, 65, 85, 95]
6 ---&gt; []
7 ---&gt; [7, 49, 77, 91]
8 ---&gt; []
9 ---&gt; []
10 ---&gt; []
11 ---&gt; [11]
12 ---&gt; []
13 ---&gt; [13]
14 ---&gt; []
15 ---&gt; []
16 ---&gt; []
17 ---&gt; [17]
18 ---&gt; []
19 ---&gt; [19]
20 ---&gt; []
21 ---&gt; []
22 ---&gt; []
23 ---&gt; [23]
24 ---&gt; []
25 ---&gt; []
</code></pre>
<h3>Primes</h3>
<pre><code>[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]
</code></pre>
</div>
<span class="comment-copy">If you are continuing in a Computer Science field, you should know this is a <a href="http://www.techinterview.org/post/526370758/100-doors-in-a-row/" rel="nofollow noreferrer">common interview question</a></span>
<span class="comment-copy">@cricket_007 thankfully I am not, I'm a biology major, just merely a mandatory class that I'm very incapable in.  I see the similarity between the two scenarios but where's in your scenario the remainders are perfect squares, mine are prime numbers.  And it doesn't exactly help me</span>
<span class="comment-copy">Worth a shot :) Don't worry I'm trying to wrap my head around an example output. For example, <code>x=2</code>, then the first list is all even numbers from 0..100, then for <code>x+1</code>, it's all the odds &gt; 1. Then <code>x+2</code> is just <code>[2]</code> because the rest are in the <code>x</code> list?</span>
<span class="comment-copy">Consider x=2 x+1=3 x+2=4 etc.  x would take care of all evens but x+1 would take care of all multiples of 3 which haven't already been "crossed out" by 2(6,12,18,24 etc) and x+2 would actually be empty @cricket_007</span>
<span class="comment-copy">That is just brilliant.  Out of curiosity would you know of a way to do this without using sets.  You've helped me out of a tight fix with homework by using sets but its not something we've gone over yet so I don't fully grasp it.  You don't have to write another code, just maybe explain if you would use a for loop, while loop, if statements etc....  Just as something I can keep in the memory bank for a future test and whatnot @cricket_007</span>
<span class="comment-copy">Sets are preferred over lists for this problem because they cannot contain duplicates and checking if a value is contained within them in much faster than for a list. If you must use a list, then replace <code>seen = set()</code> with <code>seen = list()</code>, <code>seen.add(val)</code> with <code>seen.append(val)</code>. Works the exact same, just slower. @JohnOConnor</span>
<span class="comment-copy">but how would you take the primes and have them within their own set.  This "set" ends up putting every single number within the table.  Im trying to create a table of only composite numbers and have a list of prime numbers remaining.  Would an else statement under the  if statement with a list.append create that?@</span>
<span class="comment-copy">@JohnOConnor - adding an else statement there would say that <code>val</code> cannot be divided by <code>num</code> <b>or</b> the <code>val</code> has been seen. And yes, the set contains all the numbers because you have "seen" them all :)</span>
<span class="comment-copy">@JohnOConnor - There you are! See if that solution fits your needs.</span>
