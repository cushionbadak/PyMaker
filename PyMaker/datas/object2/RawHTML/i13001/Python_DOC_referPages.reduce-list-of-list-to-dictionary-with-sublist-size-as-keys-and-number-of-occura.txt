<div class="post-text" itemprop="text">
<p>I have a list of lists and I want to count the number of times a sublist with a specific size occurs.</p>
<p>eg. for list <code>[[1], [1,2], [1,2], [1,2,3]]</code> I expect to get <code>{1: 1, 2: 2, 3: 1}</code></p>
<p>I've tried <code>reduce</code> function but I have syntax error on <code>+= 1</code> and have no idea what is wrong.</p>
<pre><code>list_of_list = [[1], [1,2], [1,2], [1,2,3]]
result = functools.reduce(lambda dict,list: dict[len(list)] += 1, list_of_list, defaultdict(lambda: 0, {}))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is not a good idea to use <code>reduce</code> in such a complicated way when you can use <code>collections.Counter()</code> with <code>map()</code> function in a more Pythonic way:</p>
<pre><code>&gt;&gt;&gt; A = [[1], [1,2], [1,2], [1,2,3]]
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; 
&gt;&gt;&gt; Counter(map(len,A))
Counter({2: 2, 1: 1, 3: 1})
</code></pre>
<p>Note that using <code>map</code> will perform slightly better than a generator expression because by passing a generator expression to <code>Counter()</code> python will get the values from generator function by itself, since using built-in function <code>map</code> has more performance in terms of execution time<sup>1</sup>.</p>
<pre><code>~$ python -m timeit --setup "A = [[1], [1,2], [1,2], [1,2,3]];from collections import Counter" "Counter(map(len,A))"
100000 loops, best of 3: 4.7 usec per loop
~$ python -m timeit --setup "A = [[1], [1,2], [1,2], [1,2,3]];from collections import Counter" "Counter(len(x) for x in A)"
100000 loops, best of 3: 4.73 usec per loop
</code></pre>
<p>From <a href="https://www.python.org/dev/peps/pep-0289/" rel="nofollow">PEP 0289 -- Generator Expressions</a>:</p>
<blockquote>
<p>The semantics of a generator expression are equivalent to creating an anonymous generator function and calling it. For example:</p>
<pre><code>g = (x**2 for x in range(10))
print g.next()
</code></pre>
<p>is equivalent to:</p>
<pre><code>def __gen(exp):
    for x in exp:
        yield x**2
g = __gen(iter(range(10)))
print g.next()
</code></pre>
</blockquote>
<hr/>
<p><sub>
Note that since <em>generator expressions</em> are better in terms of memory use, if you are dealing with large data you'd better use <em>generator expression</em> instead of <em>map</em> function.
</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>You can do this using <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow">Counter</a> as well: </p>
<pre><code>list_of_list = [[1], [1,2], [1,2], [1,2,3]]
c = Counter(len(i) for i in list_of_list)
</code></pre>
<p>Output:</p>
<pre><code>Counter({2: 2, 1: 1, 3: 1})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>reduce</code> is an inferior tool for this job.  </p>
<p>Look at a <a href="https://docs.python.org/2/library/collections.html#counter-objects" rel="nofollow"><code>collections.Counter</code></a> instead.  It's a dict subclass, so you should be able to use it however you were planning to use the dict.  </p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; L = [[1], [1, 2], [1, 2], [1, 2, 3]]
&gt;&gt;&gt; Counter(len(x) for x in L)
Counter({1: 1, 2: 2, 3: 1})
</code></pre>
</div>
<span class="comment-copy">The reason this is not working is because you are assigning values within lambda. In python, assignment statements cannot be used in lambda.</span>
<span class="comment-copy">Nitpicky: you don't need the intermediate list in the <code>Counter</code> constructor, it can accept a generator expression: <code>c = Counter(len(i) for i in list_of_list)</code>.</span>
<span class="comment-copy">You are absolutely right, thanks @PeterDeGlopper</span>
<span class="comment-copy">and that wasn't nitpicky...good catch.</span>
