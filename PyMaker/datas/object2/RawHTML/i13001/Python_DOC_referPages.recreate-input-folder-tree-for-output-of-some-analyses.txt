<div class="post-text" itemprop="text">
<p>I am new to Python and, although having been reading and enjoying it so far, have ∂ experience, where ∂ → 0.</p>
<p>I have a folder tree and each folder at the bottom of the tree's branches contains many files. For me, this whole tree in the <em>input</em>.</p>
<p>I would to perform several steps of analysis (I believe these are irrelavant to this question), the results of which I would like to have returned in an identical tree to that of the input, called <em>output</em>.</p>
<p>I have two ideas:</p>
<ol>
<li>Read through each folder recursively using <a href="https://docs.python.org/2/library/os.html#os.walk" rel="nofollow">os.walk()</a> and for each file to perform the analysis, and</li>
<li>Use a function such as <a href="https://docs.python.org/3/library/shutil.html#shutil.copytree" rel="nofollow">shutil.copytree()</a> and perform the analysis somewhere along the way. So actually, I do not want to COPY the tree at all, rather replicate it's structure but with new files. I thought this might be a kind of 'hack' as I do actually want to <em>use</em> each input file to create the output file, so instead of a <code>copy</code>command, I need an <code>analyse</code> command. The rest should remain unchanged as far as my imagination allows me to understand.</li>
</ol>
<p>I have little experience with option 1 and zero experience with option 2.</p>
<p>For smaller trees up until now I have been hard-coding the paths, which has become too time-consuming at this point.</p>
<p>I have also seen more <em>mundane</em> ways, such as using <code>glob</code> to first find all the files I would like and work on them, but I don't know how this might help find a shortcut in recreating the input tree for my output.</p>
<p>My attempt at option 1 looks like this:</p>
<pre><code>import os

for root, dirs, files in os.walk('/Volumes/Mac OS Drive/Data/input/'):
    # I have no actual need to print these, it just helps me see what is happening
    print root, "\n"        
    print dirs, "\n"
    # This is my actual work going on
    [analysis_function(name) for name in files]
</code></pre>
<p>however I fear this is going to be very slow, I would also like to do some kind of filtering on files too - for example the <code>.DS_Store</code> files created in mac trees are included in the results of the above. I would attempt to use the <code>fnmatch</code> module to filter only the files I want.</p>
<p>I have seen in the <code>copytree</code> function that it is possible to ignore files according to a pattern, which would be helpful, however I do not understand from the documentation where I could put my analysis function in on each file.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use both options: you could provide your custom <code>copy_function</code> that performs analysis instead of the default <code>shutil.copy2</code>  to <code>shutil.copytree()</code> (it is a more of a hack) or you could use <code>os.walk()</code> to have a finer control over the process.</p>
<p>You don't need to create parent directories manually either way. <code>copytree()</code> creates the parent directories for you and <code>os.makedirs(root)</code> can create parent directories if you use <code>os.walk()</code>:</p>
<pre><code>#!/usr/bin/env python2
import fnmatch
import itertools
import os

ignore_dir = lambda d: d in ('.git', '.svn', '.hg')
src_dir = '/Volumes/Mac OS Drive/Data/input/' # source directory
dst_dir = '/path/to/destination/'        # destination directory
for root, dirs, files in os.walk(src_dir):
    for input_file in fnmatch.filter(files, "*.input"): # for each input file
        output_file = os.path.splitext(input_file)[0] + '.output'
        output_dir = os.path.join(dst_dir, root[len(src_dir):])
        if not os.path.isdir(output_dir):
            os.makedirs(output_dir) # create destination directories 
        analyze(os.path.join(root, input_file), # perform analysis
                os.path.join(output_dir, output_file))

    # don't visit ignored subtrees
    dirs[:] = itertools.ifilterfalse(ignore_dir, dirs)
</code></pre>
</div>
<span class="comment-copy">I have successfully implemented this, only having to make slight changes (specific to my model) - it works like a charm! Many thanks!</span>
