<div class="post-text" itemprop="text">
<p>So I am creating a range of numbers and I want to run the list of numbers through a function so I can get multiple out puts.</p>
<pre><code>x = range(1,6)

def fun(x):
    x**2 + x + 2
</code></pre>
<p>This is the basic idea. But I cant figure out how to run individual elements of the list, one at a time, so I can 5 outputs (for this example).</p>
<pre><code>4, 8, 14, 22, 32
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>map</code> to apply a function on each element of a list:</p>
<pre><code>li = range(1, 6)

def fun(x):
   return x**2 + x + 2

print map(fun, li)
&gt;&gt; [4, 8, 14, 22, 32]
</code></pre>
<p>If using Python 3 you will need to convert the returned value from <code>map</code> to a list:</p>
<pre><code>print list(map(fun, li))
&gt;&gt; [4, 8, 14, 22, 32]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That's what the <a href="https://docs.python.org/2/library/functions.html#map" rel="nofollow">map function</a> does:</p>
<blockquote>
<p><code>map(function, iterable, ...)</code></p>
<p>Apply function to every item of iterable and return a list of the results. If additional iterable arguments are passed, function must take that many arguments and is applied to the items from all iterables in parallel. If one iterable is shorter than another it is assumed to be extended with None items. If function is None, the identity function is assumed; if there are multiple arguments, map() returns a list consisting of tuples containing the corresponding items from all iterables (a kind of transpose operation). The iterable arguments may be a sequence or any iterable object; the result is always a list.</p>
</blockquote>
<p>You can find it or a variation of it in basically every programming language.</p>
<pre><code>map(fun, range(1,6))
</code></pre>
<hr/>
<p>Alternatively, you could use a <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>:</p>
<pre><code>[fun(x) for x in range(1,6)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Usually, the preferred way to perform a one-to-one transformation from one list to another list is using a list comprehension.</p>
<pre><code>[x**2 + x + 2 for x in range(1, 6)]
</code></pre>
<p>It also works for arbitrary lists, not just consecutive ranges.</p>
<pre><code>[x**2 + x + 2 for x in [4, 8, 14, 22, 32]]
</code></pre>
<hr/>
<p>However, in <a href="/q/1247486/1157100">some circumstances</a>, using <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow"><code>map()</code></a> could be more advantageous.</p>
<pre><code>def fun(x):
    return x**2 + x + 2

map(fun, range(1, 6))
map(fun, [4, 8, 14, 22, 32])
</code></pre>
<hr/>
<p>I'd go with the list comprehension in your particular case, because it doesn't seem like you need to define a function for such a simple expression.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can perform it within your <code>fun(x)</code> function, this way:</p>
<pre><code>&gt;&gt;&gt; x = range(1,6)
&gt;&gt;&gt; 
&gt;&gt;&gt; def fun(x):
    return [i**2+i+2 for i in x]

&gt;&gt;&gt; fun(x)
[4, 8, 14, 22, 32]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Thanks for the help. Here is the entire file for anybody who is interested. It isn't nearly close to complete, but I needed this part done pretty soon. I checked the answer I used since I am on a dead line to get this in to my professor, but I will definitely look at all the options you guys provided.</p>
<pre><code># This code is written for homework 4 in my Computational Physics.
# I will calculate the first 20 wavelengths (in nm = nanometers) for any series of
# hydrogen. Your code should allow the user to specify (via input) which 
# series of hydrogen are to be calculated (e.g., n = 1, Lyman series; n = 2,
# Balmer series; n = 3, Paschen series, etc.)

import math 

# Rydberg Constant for Hydrogen (m^-1)
Rh = 1096776000000

# Allows the user to specify which series of hydrogen that are going to 
# be using
print "What is your value for 'n'?"

# Had to make 'n' a float() instead of an int(), otherwise, later on when doing
# division, any non-integer values would be pushed to 0.
n = float(raw_input("&gt;"))

# So m will define the first 20 energy levels for an electron in the hydrogen atom.
# I made it vary with respect to 'n' for obvious reasons.
m = range(int(n+1), int(n+21))  

# The wavelength() function is based off of the Rydberg constant for Hydrogen.
# The parts in parentheses are all taken from the formula, and the last part 
# ( * 10 ** 14) is that my output comes out as nanometers. To make the list 
# from 'm' run properly I had to use a for loop that defined the elements 
# of the list as 'x' and would run each one, individually, through the equation.
def wavelength(n,m):
    return [((1 / (Rh * ((1 / (n**2)) - (1 / (float(x)**2))))) * 10 ** 14)
    for x in m] 

# This will print out my elements. I used another for loop so as to format
# all 20 elements such that they would only have 3 digits past the decimal point.
for x in wavelength(n,m):
    print "%.3f" % x, 'nm'
</code></pre>
</div>
<span class="comment-copy">even list comprehension</span>
<span class="comment-copy">map can be used with a lambda, no need to define an extra function <code>map(lambda x: x**2 + x + 2, [4, 8, 14, 22, 32])</code></span>
<span class="comment-copy">@acgull Part of the point of this answer is that if you don't already have <code>fun()</code> defined, you're better off with a list comprehension than with a lambda.</span>
<span class="comment-copy">Please use the edit link on your question to add additional information. The Post Answer button should be used only for complete answers to the question. - <a href="/review/low-quality-posts/10575588">From Review</a></span>
<span class="comment-copy">@crclayton This doesn't look like an attempt to edit the original question. It looks like the OP posted their finished solution as an answer.</span>
<span class="comment-copy">It's fine to post your own answer, but the only relevant bit appears to be the use of list comprehension inside the <code>wavelength</code> function. Posting just those few lines (and maybe the associated comment) would be preferable to posting the entire completed assignment.</span>
