<div class="post-text" itemprop="text">
<p>I am new to Python and I'm trying to remove comments and commented lines from a file of URLs (one URL per line).  I am using a custom ArgumentParser (argparse) and overriding convert_arg_line_to_args in order to :-</p>
<ol>
<li>Strip trailing comments at end of lines e.g. '<a href="http://example.com" rel="nofollow">http://example.com</a>  #
comment' </li>
<li>Strip lines which are empty or whole line coments e.g. '#
    This file contains URLs, one per line'</li>
</ol>
<p>I am able to successfully remove trailing comments (1) but can't seem to remove empty lines or comments lines (2).  The whole line comments and empty lines remain in my list of files.</p>
<pre><code>class CustomArgumentParser(argparse.ArgumentParser):
    def __init__(self, *args, **kwargs):
        super(CustomArgumentParser, self).__init__(*args, **kwargs)

    def convert_arg_line_to_args(self, line):
        '''Strip out comments from start points file'''
        if re.match('^#.*', line, 0) or re.match('^\s+$', line, 0):
            yield 
        arg = re.sub('\s+#.*$', '', line)
        yield arg
</code></pre>
<p>Is there a way to remove the empty and comments lines?</p>
<p>Example input file is:</p>
<pre><code># Start points for the spider 
#
http://www.website1.com/News.html?typeid=8                                      # All news
http://www.website1.com/News.html?typeid=5                                      # Business

http://www.website2.com/News.html?category=All%20Category%20News
http://www.website2.com/News.html?category=Category2
</code></pre>
<p>Original code gives args returns from <code>parse_args()</code> as:</p>
<pre><code>DEBUG:root:Args are: Namespace(URLs=['', '# Start points for the spider ', '', '#', 'http://www.website1.com/News.html?typeid=8', 'http://www.website1.com/News.html?typeid=5', 'http://www.website1.com/News.html?typeid=9', 'http://www.website1.com/News.html?typeid=10', 'http://www.website1.com/KeyInterviews.html', '', '', 'http://www.website2.com/News.html?category=All%20Category%20News', 'http://www.website2.com/News.html?category=Category2'], cacheDir='/tmp', debug_level=' 1', firstNPages=None, outputDir=None, storyType='news')
</code></pre>
<p>Changing to yield an empty list gives:</p>
<pre><code>DEBUG:root:Args are: Namespace(URLs=[[], '# Start points for the spider ', [], '#', 'http://www.website1.com/News.html?typeid=8', 'http://www.website1.com/News.html?typeid=5', [], '', 'http://www.website2.com/News.html?category=All%20Category%20News', 'http://www.website2.com/News.html?category=Category2'], cacheDir='/tmp', debug_level=' 1', firstNPages=None, outputDir=None, storyType='news')
</code></pre>
<p>I would like args to look like:</p>
<pre><code>DEBUG:root:Args are: Namespace(URLs=['http://www.website1.com/News.html?typeid=8', 'http://www.website1.com/News.html?typeid=5', 'http://www.website2.com/News.html?category=All%20Category%20News', 'http://www.website2.com/News.html?category=Category2'], cacheDir='/tmp', debug_level=' 1', firstNPages=None, outputDir=None, storyType='news')
</code></pre>
<p>Perhaps it's not possible to remove lines from the input file in this way.</p>
</div>
<div class="post-text" itemprop="text">
<p>Note that statement <code>yield</code> will yield a <code>None</code> value instead of not yielding anything, so empty lines are returning a list of arguments like <code>[None]</code>.</p>
<p>If you want the parser to skip a line you should <strong>return</strong> an empty list instead. You should re-write your function to return <code>[]</code> for lines to skip, and <code>[url]</code> (where <code>url</code> is a cleaned-up line) if you want to retain that argument.</p>
<p>BTW... Your second regex is not matching empty lines. It should read <code>'^\s*$'</code> to match ZERO or more spaces.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your implementation actually uses a <a href="https://docs.python.org/3/glossary.html#term-generator" rel="nofollow noreferrer" title="generator">generator</a> instead of a function: when using the <code>yield</code> keyword, <em>each</em> <code>yield</code> statement executed provides a value. Even a bare <code>yield</code> does produce the value <code>None</code>. Instead of providing either nothing or <code>arg</code>, you are returning an iterable providing either <code>[None, arg]</code> or <code>[""]</code> (an empty string).</p>
<pre><code>def convert_arg_line_to_args(self, line):
    '''Strip out comments from start points file'''
    if re.match('^#.*', line, 0) or re.match('^\s+$', line, 0):
        yield # yield None **and proceed**
    arg = re.sub('\s+#.*$', '', line)
    yield arg # yield arg
</code></pre>
<p>For starters, you do not need a generator here: instead of <code>yield</code>, use <code>return</code>. Note that <code>argparse</code> requires an iterable of values - an efficient iterable of no values is for example an empty list <code>[]</code>.</p>
<pre><code>def convert_arg_line_to_args(self, line):
    '''Strip out comments from start points file'''
    if re.match('^#.*', line, 0) or re.match('^\s+$', line, 0):
        return []  # return NO values, **and stop**
    arg = re.sub('\s+#.*$', '', line)
    return [arg] # return ONLY arg
</code></pre>
<p>This is the minimal modification to get your code working.</p>
<hr/>
<p>Now, while regex works for this use case, it is usually overkill. Python's <code>str</code> class has efficient manipulation and inspection methods builtin: you can strip away the comment, cleanup whitespace and see if there is something left.</p>
<pre><code>def convert_arg_line_to_args(self, line):
    '''Strip out comments from start points file'''
    line, *_ = line.split('#', maxsplit=1)  # the `*_` consumes any optional comment content
    arg = line.strip()  # remove whitespace - we have just the bare argument now
    if arg:  # is there anything left as an argument?
        return [arg] # return ONLY arg, and stop
    return []
</code></pre>
<p>If you want to explore generators versus functions, a generator is actually slightly more elegant here. We added those <code>[]</code> lists everywhere because <code>argparse</code> needs an iterable - but a generator already is an iterable.</p>
<p>What does that mean in practical terms? If there is an argument, just <code>yield</code> it - it will be "contained" in the generator itself. If there is no argument, never <code>yield</code> - the generator will stop without having provided anything.</p>
<pre><code>def convert_arg_line_to_args(self, line):
    '''Strip out comments from start points file'''
    line, *_ = line.split('#', maxsplit=1)
    arg = line.strip()
    if arg:
        yield arg # return arg, but continue... to stop immediately
</code></pre>
</div>
<span class="comment-copy">Why are you using <code>argparse</code> to parse a <i>file?</i> It's for command line arguments! How would you actually use this? Could you give a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> that explains the issue more clearly?</span>
<span class="comment-copy">An argument beginning with <code>@</code> is interpreted as the name of a file containing more arguments, one per line by default. <code>convert_arg_line_to_args</code> lets you use a more complex file format.</span>
<span class="comment-copy">Don't <b>yield</b> an empty list, but <b>return</b> one.</span>
<span class="comment-copy">Thanks, memoselyk. See above edits.  Returning an empty list does not remove the line from the outer list.  Thanks for spotting the error in my regex.</span>
<span class="comment-copy">Thanks again, memoselyk. Returning the empty list [] doesn't cause the parser to skip the line, unfortunately.</span>
<span class="comment-copy">It should, if you read at the <a href="http://svn.python.org/projects/python/branches/release27-maint/Lib/argparse.py" rel="nofollow noreferrer">argparse source</a>, the result from <code>convert_arg_line_to_args</code> will be iterated and appended to <code>arg_strings</code> and those strings will be recursively searched for file prefix. If the returned list is empty, that'll be a no-op.</span>
