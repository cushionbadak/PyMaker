<div class="post-text" itemprop="text">
<p>I am seeing crash at python shutdown from a complex c++-based extension module (<a href="https://github.com/woodem/woo" rel="nofollow">https://github.com/woodem/woo</a>). There are some held shared_ptr objects which are being destroyed without GIL being taken by the deleter automatically (which is a known bug in boost::python). I added PyGILState_Ensure / Release (using the GilLock RAII wrapper) around those calls, so that these object are destroyed properly. However, I am seeing this now: </p>
<pre><code>    #0  0x00007ffff7bca1d4 in sem_wait@@GLIBC_2.2.5 () from /lib/x86_64-linux-gnu/libpthread.so.0
    #1  0x00000000005474c5 in PyThread_acquire_lock ()
    #2  0x0000000000539fb4 in ?? ()
    #3  0x000000000047b5ef in ?? ()
    #4  0x00007ffff18b8475 in GilLock::GilLock (this=0x7fffffffde10) at /home/eudoxos/build/woo/build-mt/dbg/include/woo/lib/pyutil/gil.hpp:9
    #5  0x00007ffff18b8869 in woo::AttrTraitBase::~AttrTraitBase (this=0x7ffff50b09c0 &lt;GlFieldDispatcher::GlFieldDispatcher_getTrait_functors()::_tmp&gt;, __in_chrg=&lt;optimized out&gt;) at /home/eudoxos/build/woo/build-mt/dbg/include/woo/lib/object/AttrTrait.hpp:43
    [...]
</code></pre>
<p>and I wonder if the reason could be that I am trying to get the GIL at the point after Py_Finalize will have been called already.</p>
<p>Is there a way to test whether Py_Finalize was in effect? COuld not find anything in the API.</p>
<p><strong>EDIT:</strong> for completeness, this is the backtrace without holding GIL first (see <a href="https://github.com/boostorg/python/pull/11" rel="nofollow">https://github.com/boostorg/python/pull/11</a> for details):</p>
<pre><code>#0  0x000000000059814b in ?? ()
#1  0x00007ffff186e143 in boost::python::api::object_base::~object_base (this=0xe1e460, __in_chrg=&lt;optimized out&gt;) at /usr/include/boost/python/object_core.hpp:526
#2  0x00007ffff186e074 in boost::python::api::object::~object (this=0xe1e460, __in_chrg=&lt;optimized out&gt;) at /usr/include/boost/python/object_core.hpp:318
#3  0x00007ffff18b6e42 in boost::python::detail::tuple_base::~tuple_base (this=0xe1e460, __in_chrg=&lt;optimized out&gt;) at /usr/include/boost/python/tuple.hpp:19
#4  0x00007ffff18b6e9c in boost::python::tuple::~tuple (this=0xe1e460, __in_chrg=&lt;optimized out&gt;) at /usr/include/boost/python/tuple.hpp:32
#5  0x00007ffff2f09560 in woo::Plot::~Plot (this=0xe1e410, __in_chrg=&lt;optimized out&gt;) at /home/eudoxos/woo/core/Plot.cpp:9
#6  0x00007ffff30f146c in boost::detail::sp_ms_deleter&lt;woo::Plot&gt;::destroy (this=0xe1e408) at /usr/include/boost/smart_ptr/make_shared_object.hpp:57
#7  0x00007ffff3291ee6 in boost::detail::sp_ms_deleter&lt;woo::Plot&gt;::operator() (this=0xe1e408) at /usr/include/boost/smart_ptr/make_shared_object.hpp:87
#8  0x00007ffff3238385 in boost::detail::sp_counted_impl_pd&lt;woo::Plot*, boost::detail::sp_ms_deleter&lt;woo::Plot&gt; &gt;::dispose (this=0xe1e3f0) at /usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp:153
#9  0x00007ffff186de5c in boost::detail::sp_counted_base::release (this=0xe1e3f0) at /usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp:146
#10 0x00007ffff186df1f in boost::detail::shared_count::~shared_count (this=0xe1dfb8, __in_chrg=&lt;optimized out&gt;) at /usr/include/boost/smart_ptr/detail/shared_count.hpp:371
#11 0x00007ffff2fb494c in boost::shared_ptr&lt;woo::Plot&gt;::~shared_ptr (this=0xe1dfb0, __in_chrg=&lt;optimized out&gt;) at /usr/include/boost/smart_ptr/shared_ptr.hpp:328
#12 0x00007ffff2fd4e8c in woo::AttrTrait&lt;4&gt;&amp; woo::AttrTrait&lt;4&gt;::ini&lt;boost::shared_ptr&lt;woo::Plot&gt; &gt;(boost::shared_ptr&lt;woo::Plot&gt;)::{lambda()#1}::~ini() (this=0xe1dfb0, __in_chrg=&lt;optimized out&gt;) at /home/eudoxos/build/woo/build-mt/dbg/include/woo/lib/object/AttrTrait.hpp:264
#13 0x00007ffff309a7b0 in std::_Function_base::_Base_manager&lt;woo::AttrTrait&lt;4&gt;&amp; woo::AttrTrait&lt;4&gt;::ini&lt;boost::shared_ptr&lt;woo::Plot&gt; &gt;(boost::shared_ptr&lt;woo::Plot&gt;)::{lambda()#1}&gt;::_M_destroy(std::_Any_data&amp;, std::integral_constant&lt;bool, false&gt;) (__victim=...) at /usr/include/c++/4.9/functional:1894
#14 0x00007ffff3061bde in std::_Function_base::_Base_manager&lt;woo::AttrTrait&lt;4&gt;&amp; woo::AttrTrait&lt;4&gt;::ini&lt;boost::shared_ptr&lt;woo::Plot&gt; &gt;(boost::shared_ptr&lt;woo::Plot&gt;)::{lambda()#1}&gt;::_M_manager(std::_Any_data&amp;, std::_Function_base::_Base_manager&lt;woo::AttrTrait&lt;4&gt;&amp; woo::AttrTrait&lt;4&gt;::ini&lt;boost::shared_ptr&lt;woo::Plot&gt; &gt;(boost::shared_ptr&lt;woo::Plot&gt;)::{lambda()#1}&gt; const&amp;, std::_Manager_operation) (__dest=..., __source=..., __op=std::__destroy_functor) at /usr/include/c++/4.9/functional:1918
#15 0x00007ffff18b5877 in std::_Function_base::~_Function_base (this=0x7fffffffdd90, __in_chrg=&lt;optimized out&gt;) at /usr/include/c++/4.9/functional:1998
#16 0x00007ffff18b85bc in std::function&lt;boost::python::api::object ()&gt;::~function() (this=0x7fffffffdd90, __in_chrg=&lt;optimized out&gt;) at /usr/include/c++/4.9/functional:2142
#17 0x00007ffff18bfc28 in std::function&lt;boost::python::api::object ()&gt;::operator=(std::function&lt;boost::python::api::object ()&gt; const&amp;) (this=0x7ffff50da900 &lt;Scene::Scene_getTrait_plot()::_tmp+256&gt;, __x=...) at /usr/include/c++/4.9/functional:2243
#18 0x00007ffff18b8559 in woo::AttrTraitBase::_resetInternalCallables (this=0x7ffff50da800 &lt;Scene::Scene_getTrait_plot()::_tmp&gt;) at /home/eudoxos/build/woo/build-mt/dbg/include/woo/lib/object/AttrTrait.hpp:36
#19 0x00007ffff18b8854 in woo::AttrTraitBase::~AttrTraitBase (this=0x7ffff50da800 &lt;Scene::Scene_getTrait_plot()::_tmp&gt;, __in_chrg=&lt;optimized out&gt;) at /home/eudoxos/build/woo/build-mt/dbg/include/woo/lib/object/AttrTrait.hpp:45
#20 0x00007ffff19a38e2 in woo::AttrTrait&lt;4&gt;::~AttrTrait (this=0x7ffff50da800 &lt;Scene::Scene_getTrait_plot()::_tmp&gt;, __in_chrg=&lt;optimized out&gt;) at /home/eudoxos/build/woo/build-mt/dbg/include/woo/lib/object/AttrTrait.hpp:186
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>API for interpreter initialization/finalization includes <a href="https://docs.python.org/3/c-api/init.html#c.Py_IsInitialized" rel="nofollow">Py_IsInitialized</a>; returns non-zero between <code>Py_Initialize</code> and <code>Py_Finalize</code>, and zero before <code>Py_Initialize</code> and after <code>Py_Finalize</code>.</p>
<p>You'd have to test whether race conditions could mess you up here; it's wholly possible you could attempt to acquire the GIL, another thread calls <code>Py_Finalize</code>, and <code>Py_Finalize</code> blows away the lock from under you. There are <a href="https://docs.python.org/3/c-api/init.html#non-python-created-threads" rel="nofollow">some notes about <code>PyGILState_*</code> APIs not handling the existence of multiple interpreters properly</a> that may or may not apply to your scenario (or hint at a similar issue that might lead to the speculative race I mentioned).</p>
</div>
<span class="comment-copy">Thanks for he <code>Py_IsInitialized</code>. I determined it returns false at that point (alright) hence the GIL makes no sense. But I see the other crash (added to the question). Gotta look somewhere else for solution. There are not multiple interpreters, but PyQt4 is pulled in, mainloop, ipython, boost::thread so it can be pretty messy. Gbd says there is only one single thread at that point, though. Suggestions for debugging?</span>
