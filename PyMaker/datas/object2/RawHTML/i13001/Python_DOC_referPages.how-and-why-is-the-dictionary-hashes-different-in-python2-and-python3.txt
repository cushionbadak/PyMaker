<div class="post-text" itemprop="text">
<p>I recently switched from Python 2.7 to Python 3.3, and it seems that while in Python 2 the ordering of dictionary keys was arbitrary but consistent, in Python 3 the ordering of the keys of a dictionary obtained with e.g. <a href="https://docs.python.org/3/library/functions.html#vars" rel="noreferrer"><code>vars()</code></a> appears non-deterministic.</p>
<p>If I run:</p>
<pre><code>class Test(object): pass
parameters = vars(Test)
print(list(parameters.keys()))
</code></pre>
<p>in both Python 2.7 and Python 3.3, then:</p>
<ul>
<li><p>Python 2.7 consistently gives me</p>
<pre><code>['__dict__', '__module__', '__weakref__', '__doc__']
</code></pre></li>
<li><p>With Python 3.3, I can get any random order – for example:</p>
<pre><code>['__weakref__', '__module__', '__qualname__', '__doc__', '__dict__']
['__doc__', '__dict__', '__qualname__', '__module__', '__weakref__']
['__dict__', '__module__', '__qualname__', '__weakref__', '__doc__']
['__weakref__', '__doc__', '__qualname__', '__dict__', '__module__']
</code></pre></li>
</ul>
<p>Where does this non-determinism come from? And why is something like</p>
<pre><code>list({str(i): i for i in range(10)}.keys())
</code></pre>
<p>… consistent between runs, always giving</p>
<pre><code>['3', '2', '1', '0', '7', '6', '5', '4', '9', '8']
</code></pre>
<p>… ?</p>
</div>
<div class="post-text" itemprop="text">
<hr/>
<p><strong>Update:</strong> In Python 3.6, <code>dict</code> has a <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-compactdict" rel="noreferrer">new implementation</a> which preserves insertion order. From Python 3.7, this order-preserving behaviour is <a href="https://docs.python.org/3/whatsnew/3.7.html" rel="noreferrer">guaranteed</a>:</p>
<blockquote>
<p>the insertion-order preservation nature of <a href="https://docs.python.org/3/library/stdtypes.html#typesmapping" rel="noreferrer">dict</a> objects <a href="https://mail.python.org/pipermail/python-dev/2017-December/151283.html" rel="noreferrer">has been declared</a> to be an official part of the Python language spec.</p>
</blockquote>
<hr/>
<p>This is the result of a <a href="http://mail.python.org/pipermail/python-announce-list/2012-March/009394.html" rel="noreferrer">security fix</a> from 2012, which was <a href="http://docs.python.org/3/whatsnew/3.3.html" rel="noreferrer">enabled by default</a> in Python 3.3 (scroll down to "Security improvements").</p>
<p>From the announcement:</p>
<blockquote>
<p>Hash randomization causes the iteration order of dicts and sets to be
  unpredictable and differ across Python runs. Python has never guaranteed
  iteration order of keys in a dict or set, and applications are advised to never
  rely on it. Historically, dict iteration order has not changed very often across
  releases and has always remained consistent between successive executions of
  Python. Thus, some existing applications may be relying on dict or set ordering.
  Because of this and the fact that many Python applications which don't accept
  untrusted input are not vulnerable to this attack, in all stable Python releases
  mentioned here, HASH RANDOMIZATION IS DISABLED BY DEFAULT.</p>
</blockquote>
<p>As noted above, the last, capitalized bit is no longer true in Python 3.3.</p>
<p><strong>See also:</strong> <a href="http://docs.python.org/3/reference/datamodel.html#object.__hash__" rel="noreferrer"><code>object.__hash__()</code> documentation</a> ("Note" sidebar).</p>
<p>If absolutely necessary, you can disable hash randomization in versions of Python affected by this behaviour by setting the <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONHASHSEED" rel="noreferrer"><code>PYTHONHASHSEED</code></a> environment variable to <code>0</code>.</p>
<hr/>
<p>Your counterexample:</p>
<pre><code>list({str(i): i for i in range(10)}.keys())
</code></pre>
<p>… does <em>not</em> in fact always give the same result in Python 3.3, although the number of different orderings is limited <a href="https://stackoverflow.com/q/26136894/1014938">due to</a> the way hash collisions are handled:</p>
<pre><code>$ for x in {0..999}
&gt; do
&gt;   python3.3 -c "print(list({str(i): i for i in range(10)}.keys()))"
&gt; done | sort | uniq -c
     61 ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
     73 ['1', '0', '3', '2', '5', '4', '7', '6', '9', '8']
     62 ['2', '3', '0', '1', '6', '7', '4', '5', '8', '9']
     59 ['3', '2', '1', '0', '7', '6', '5', '4', '9', '8']
     58 ['4', '5', '6', '7', '0', '1', '2', '3', '8', '9']
     55 ['5', '4', '7', '6', '1', '0', '3', '2', '9', '8']
     62 ['6', '7', '4', '5', '2', '3', '0', '1', '8', '9']
     63 ['7', '6', '5', '4', '3', '2', '1', '0', '9', '8']
     60 ['8', '9', '0', '1', '2', '3', '4', '5', '6', '7']
     66 ['8', '9', '2', '3', '0', '1', '6', '7', '4', '5']
     65 ['8', '9', '4', '5', '6', '7', '0', '1', '2', '3']
     53 ['8', '9', '6', '7', '4', '5', '2', '3', '0', '1']
     62 ['9', '8', '1', '0', '3', '2', '5', '4', '7', '6']
     52 ['9', '8', '3', '2', '1', '0', '7', '6', '5', '4']
     73 ['9', '8', '5', '4', '7', '6', '1', '0', '3', '2']
     76 ['9', '8', '7', '6', '5', '4', '3', '2', '1', '0']
</code></pre>
<p>As noted at the beginning of this answer, that's no longer the case in Python 3.6:</p>
<pre><code>$ for x in {0..999}
&gt; do
&gt;   python3.6 -c "print(list({str(i): i for i in range(10)}.keys()))"
&gt; done | sort | uniq -c
   1000 ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Note that Python 3.7 still has non-deterministic sets however. dicts preserve insertion order but sets do not. Sets can exhibit the same random behavior. </p>
<p><code>python3 -c "print({str(i) for i in range(9)})"</code></p>
<p>still gives different results from one run to the next.</p>
</div>
<span class="comment-copy">So why does this not apply to something like <code>{str(i): i for i in range(10)}</code>?</span>
<span class="comment-copy">So how do we disable this randomization?</span>
<span class="comment-copy">@nmz787 <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONHASHSEED" rel="nofollow noreferrer">docs.python.org/3/using/cmdline.html#envvar-PYTHONHASHSEED</a></span>
