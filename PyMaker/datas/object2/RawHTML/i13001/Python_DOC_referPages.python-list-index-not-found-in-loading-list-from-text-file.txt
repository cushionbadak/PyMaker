<div class="post-text" itemprop="text">
<p>The assignment was to get a user to input 4 numbers, then store them in a text file, open that text file, show the 4 numbers on different lines, then get the average of those numbers and display it to the user.
Here is my code so far:</p>
<pre><code>__author__ = 'Luca Sorrentino'


numbers = open("Numbers", 'r+')
numbers.truncate() #OPENS THE FILE AND DELETES THE PREVIOUS CONTENT
                    # Otherwise it prints out all the inputs into the file ever

numbers = open("Numbers", 'a')  #Opens the file so that it can be added to
liist = list() #Creates a list called liist

def entry(): #Defines a function called entry, to enable the user to enter numbers
        try:
            inputt = float(input("Please enter a number"))  #Stores the users input as a float in a variable
            liist.append(inputt) #Appends the input into liist
        except ValueError: #Error catching that loops until input is correct
            print("Please try again. Ensure your input is a valid number in numerical form")
            entry() #Runs entry function again to enable the user to retry.

x = 0
while x &lt; 4:  # While loop so that the program collects 4 numbers
    entry()
    x = x + 1

for inputt in liist:
  numbers.write("%s\n" % inputt) #Writes liist into the text file


numbers.close() #Closes the file

numbers = open("Numbers", 'r+')

output = (numbers.readlines())

my_list = list()
my_list.append(output)

print(my_list)
print(my_list[1])
</code></pre>
<p>The problem is loading the numbers back from the text file and then storing each one as a variable so that I can get the average of them.
I can't seem to find a way to specifically locate each number, just each byte which is not what I want.</p>
</div>
<div class="post-text" itemprop="text">
<p>You'll have two main problems.</p>
<p>First, <code>.append()</code> is for adding an individual <em>item</em> to a list,  not for adding one list to another.  Because you used <code>.append()</code> you've ended up with a list containing one item,  and that item is itself a list... not what you want, and the explanation for your error message. For concatenating one list to another  <code>.extend()</code> or <code>+=</code> would work, but you should ask yourself whether that is even necessary in your case.</p>
<p>Second, your list elements are strings and you want to work with them as numbers. <code>float()</code> will convert them for you.</p>
<p>In general, you should investigate the concept of "list comprehensions".  They make operations like this very convenient.  The following example creates a new list whose members are the respectively <code>float()</code>ed versions of your <code>.readlines()</code> output:</p>
<pre><code>my_list = [float(x) for x in output]
</code></pre>
<p>The ability to add conditionals into a list comprehension is also a real complexity-saver. For example, if you wanted to skip any blank/whitespace lines that had crept into your file:</p>
<pre><code>my_list = [float(x) for x in output if len(x.strip())]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your list (my_list) has only 1 item - a list with the items you want.</p>
<p>You can see this if you try  print(len(my_list)), so your print(my_list[1]) is out of range because the item with index = 1 does not exist. </p>
<p>When you create an empty list and append output, you are adding one item to the list, which is what the variable output holds for a value. </p>
<p>To get what you want just do </p>
<pre><code>my_list = list(output)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can change the end of your program a little and it will work:</p>
<pre><code>output = numbers.readlines()
# this line uses a list comprehension to make 
# a new list without new lines
output = [i.strip() for i in output]
for num in output:
    print(num)
1.0
2.0
3.0
4.0

print sum(float(i) for i in output)
10
</code></pre>
</div>
<span class="comment-copy">take out the brackets around your <code>readlines</code> functions and just try <code>print(output)</code>: you should see a list of your numbers.</span>
<span class="comment-copy">Aside from the incorrect output with <code>print(my_list)</code> and the crash at <code>print(my_list[1])</code>, there are some other issues with this code. Once you get it working, I encourage you to ask a question on <a href="https://codereview.stackexchange.com">Code Review</a>.</span>
<span class="comment-copy">Off-topic: Your file management is really poor. You open the file once with "r+" just to truncate (not actually reading), then (without closing) re-open for append, then later reopen for "r+" (this time reading, but not writing, so the + was pointless). Just open it once for "w+", which will let you both read and write, and truncates the file for you. When you finish writing (to populate the file), you can <code>seek</code> back to the beginning to read it. You could also switch to a <code>with</code> statement to manage the file object lifetime.</span>
<span class="comment-copy">@ShadowRanger Hi, Thanks for this. I have replaced all the opening in different formats with 'w' and it works apart from the fact I'm unsure about how you get it to seek back to the beginning? Thanks,</span>
<span class="comment-copy">@lucafsorrentino: Since you're both reading and writing (but want to truncate), you'd use mode <code>w+</code>. API for seeking is <a href="https://docs.python.org/3/library/io.html#io.IOBase.seek" rel="nofollow noreferrer">documented in the <code>io</code> module</a>.</span>
