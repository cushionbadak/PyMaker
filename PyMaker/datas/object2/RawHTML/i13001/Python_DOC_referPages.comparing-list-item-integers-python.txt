<div class="post-text" itemprop="text">
<p>I am writing a program which saves the last 3 scores in a text file for each user of my game. I have already written the code that saves it I am now bringing the data back into the program which will work out the users high scores . I also already have the scores saved in separate lists All users 1st score saved in 1 list all users 2nd score in another and the same for 3rd score. I am trying to put these in their own high score list so when I joint the lists with the names(in another list) I will be able to sort by score but will be attached to name. 
Bellow is the code I have written:</p>
<pre><code>    for i in range (2):
        if score1[i] &gt; score2[i] or score1[i]&gt; score3[i]:
            highscores.append(score1[i])
        elif score2[i] &gt; score1[i] or score2[i] &gt; score3[i]:
            highscores.append(score2[i])
        elif score3[i] &gt; score1[i] or score3[i] &gt; score2[i]:
            highscores.append(score3[i])
</code></pre>
<p>By the way it is in a for loop for i in range 2 as their are currently only 2 users. I know I'm being incredibly stupid by having the or as it means only one event needs to be true for it to work but when I tried and it didn't work either. Please work along these lines as my tutor said 'I had the right idea' I also hope this helps anyone else which is comparing list items with integers in python as I couldn't find anything on the internet . 
Thanks,
I await guidance</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>You want to use <code>and</code>, not <code>or</code>.</li>
<li>You can also use <code>a &lt; b &lt; c</code> syntax instead of using <code>and</code>.</li>
<li><p>What you should really do is use Python's built-in <code>max</code> function. A clean, single-liner instead of that 6-line <code>if-elif</code> block.</p>
<pre><code>highscores.append(max(score1[i], score2[i], score3[i]))
</code></pre></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Probably not allowed for this assignment, but for others who need to do something similar, the easy/fast way to select the top 3 values from a large sequence of values is to use <a href="https://docs.python.org/3/library/heapq.html#heapq.nlargest" rel="nofollow"><code>heapq.nlargest</code></a>. If you have multiple sequences, you can <code>itertools.chain</code> them to avoid concatenating (avoid increases in peak memory usage). You can even attach the names (with <code>zip</code> and <code>itertools.repeat</code>) to each input sequence so the selected high scores include the associated user:</p>
<pre><code>from heapq import nlargest
from itertools import chain, repeat

highscores = nlargest(3, chain(zip(score1, repeat('user1')),
                               zip(score2, repeat('user2')),
                               zip(score3, repeat('user3'))))
</code></pre>
<p><code>highscores</code> would then be a <code>list</code> with three elements (from highest to lowest score, ties broken by user name), each element being a <code>tuple</code> of the form <code>(score, username)</code>.</p>
</div>
<span class="comment-copy"><code>or</code> are you sure?</span>
<span class="comment-copy">(you possibly just need something like <code>highscores = map(max, zip([1,2,3], [3,5,2], [2,7,1]))</code>)</span>
<span class="comment-copy">@njzk2: Yeah, that would be the best approach if the existing code (that stores the high scores by comparing individual scores for each user in order) is correct. That doesn't seem right though (OP's logic is faulty, you're just mirroring it), since presumably the high scores should be overall high scores (as written, your <code>highscores</code> would be <code>[3, 7, 3]</code>, even though the three highest scores would be <code>[7, 5, 3]</code>).</span>
<span class="comment-copy">As with @njzk2's comment, this mirrors what the OP's code was trying to do, but probably isn't the right logic; if a user got scores of <code>[1,2,3]</code> and another user got <code>[2,3,4]</code> (we'll assume the third user got zero scores), then it would get you an output of <code>[2,3,4]</code>, even though the first user got a <code>3</code> on their third try, and the overall top scores should be <code>[4, 3, 3]</code>.</span>
<span class="comment-copy">this line  highscores.append(max(score1[i], score2[i], score3[i])) really helped</span>
