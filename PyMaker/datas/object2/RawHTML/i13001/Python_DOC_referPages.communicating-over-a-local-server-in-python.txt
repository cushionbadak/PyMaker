<div class="post-text" itemprop="text">
<p>I am creating a colloabrative note-making app in python.
Here, one guy on computer running the app can create the server subseuqently the changes on the screen([color, pixel], where pixel=[x,y]) will be transmitted to others connected to the server.</p>
<p>I am using kivy for creating the app. My question is with respect to transmitting the data over the server.
I can create server using this:</p>
<pre><code>import socket
ip_address=socket.gethostbyname(socket.gethostname())
execfile( "manage.py runserver "+ip_address+":8000" )
</code></pre>
<p>Now, how do others connect to the server and request the data(assuming the above code is correct). Also, how to send the data in django.  </p>
</div>
<div class="post-text" itemprop="text">
<p>Well, Django is a framework that allows creating a site or API that is reachable through HTTP protocol. This has several consequences for you:</p>
<ol>
<li><p>Server cannot send a message to client unless the client asks. HTTP is a "request-response" protocol. Client sends a request (for example, <code>http://server.com/getUpdates?id=100500</code>) and gets a response from server.</p></li>
<li><p>Creating clients that ask the server to give them updates all the time is a bad practice, probably leading to server DoS.</p></li>
<li><p>Although you can use WebSockets, using Django for such a task is really an overkill.</p></li>
</ol>
<p>Summarizing, you need a reliable duplex channel for sending data in both directions. I'd start with TCP server, rather than HTTP. Fortunately, Python stdlib has a module you can start with - <a href="https://docs.python.org/3/library/socketserver.html" rel="nofollow"><code>socketserver</code></a>.</p>
<p><strong>Additional reading</strong></p>
<ol>
<li><a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol" rel="nofollow">TCP</a></li>
<li><a href="https://en.wikipedia.org/wiki/User_Datagram_Protocol" rel="nofollow">UDP</a> (you will probably want this for broadcasting)</li>
<li><a href="https://en.wikipedia.org/wiki/Berkeley_sockets" rel="nofollow">Berkeley sockets</a> (a socket standard underlying <code>socketserver</code> module)</li>
</ol>
<p><strong>TCP vs. UDP</strong></p>
<p>When deciding what protocol to use, following aspects should be considered:</p>
<ul>
<li><p>TCP is <em>reliable</em>. Messages never disappear implicitly. If there was a network error, message will be resent. If there's no connection, explicit error will be raised. TCP uses several algorithms to fit into the network channel. It is an intelligent protocol.</p></li>
<li><p>UDP is <em>unreliable</em>. It possesses no feature TCP has. Packets can disappear, get reordered. But UDP messages are lightweight and in experienced hands they summon to life such systems as network action games and streaming video (lost and reordered messages aren't crucial here and TCP becomes too slow).</p></li>
</ul>
<p>So I'd recommend to start with TCP. It's way more easier to get working fast and correct than UDP. Switch to UDP if you have some experience with TCP and there are a lot of people using you app and wanting to get the lowest latency possible.</p>
</div>
<span class="comment-copy">@Vovanrick2002 Thanks for the answer! Can you please tell which would better in this case TCP or UDP?</span>
<span class="comment-copy">@AbhishekBhatia updated the post.</span>
