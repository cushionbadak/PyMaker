<div class="post-text" itemprop="text">
<p>Is there a simple way to convert </p>
<pre><code>t = ((1,), (1, 2), (1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5))
</code></pre>
<p>to the following recursive structure, where each following tuple is appended as an element of the prior tuple</p>
<pre><code>(1, (1, 2, (1, 2, 3, (1, 2, 3, 4, (1, 2, 3, 4, 5)))))
</code></pre>
<p>What is the limit to this nesting? Can I have a 1000 or 10000 such nested tuples?</p>
<p>UPDATE: 
It seems <code>t</code> nesting is unlimited (tried with 10000 after setting recursion limit to 100).</p>
<p>On Window 7, Python 3.5) the recursion limit is around 300 at first, but can be lifted as (<a href="https://stackoverflow.com/questions/3323001/maximum-recursion-depth">reference</a>). This is not related to structure <code>t</code>, but may be related to Python routine accessing nested levels of the resulting structure.</p>
<pre><code>sys.getrecursionlimit()   # display current recursion level
sys.setrecursionlimit(10000)  # set recursion level to 1000
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could do</p>
<pre><code>def convert(t):
    result = t[-1]
    for x in t[-2::-1]:
        result = x + (result,)
    return result
</code></pre>
<p>which iterates backward through <code>t</code>. You can probably construct a very deeply nested tuple, but you might have trouble printing it out.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/functools.html" rel="nofollow"><code>functools.reduce</code></a>:</p>
<pre><code>&gt;&gt;&gt; from functools import reduce
&gt;&gt;&gt; t = ((1,), (1, 2), (1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5))
&gt;&gt;&gt; reduce(lambda a, b: b + (a,), reversed(t), ())
(1, (1, 2, (1, 2, 3, (1, 2, 3, 4, (1, 2, 3, 4, 5)))))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For the nested construction:</p>
<pre><code>def f(t):
    res = t[-1]
    for x in t[-2::-1]:
        res = x + (res,)
    return res

t = ((1,), (1, 2), (1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5))
print f(t)
</code></pre>
<p>for how big it can be, I don't know but I would assume it depends on your machine, your settings and so on...</p>
</div>
<span class="comment-copy">The recursion limit you have mentioned is related to the nember stack frames we can use, i.e. it's about how deeply recursive function calls can go.  It's completely unrelated to how deeply you can nest tuples like this, which I expect is unbounded (except by available memory).</span>
<span class="comment-copy">Great note! I updated the question. I do, however, run into recursion limit issue when I run David's code and display <code>result</code>. See my comment to David.</span>
<span class="comment-copy">I like your approach because its brief and doesn't use unnecessary tools. Thanks!</span>
<span class="comment-copy">David, neat routine. It may benefit from a setting recursion limit to depth of <code>t</code>, otherwise it throws <code>RecursionError: maximum recursion depth exceeded while calling a Python object</code> for deeply nested <code>t</code>. Try <code>sys.setrecursionlimit(10)</code> followed by convert(tuple(tuple(range(k)) for k in range(1,20)))`</span>
<span class="comment-copy">@EmilyHill There is no recursion in my code. The specific error is <code>RuntimeError: maximum recursion depth exceeded while getting the repr of a tuple</code>, which is the Python REPL trying and failing to print out the result, as I predicted. If you change the entered command to discard the output by appending <code>[:0]</code> (to take an empty slice), then everything works fine.</span>
<span class="comment-copy">David, I think the recursion in your code is implied by <code>result = x + (result,)</code>. It's not an explicit recursion. It appears falsetru's solution faces the same challenge :)</span>
<span class="comment-copy">@EmilyHill As I said, try <code>convert(tuple(tuple(range(k)) for k in range(1,20)))[:0]</code> with the lowered recursion limit. The error is not in my code.</span>
<span class="comment-copy">I was waiting for the reduce answer.  One of the few times when reduce actually <i>is</i> appropriate.</span>
<span class="comment-copy">Great solution. Thanks!</span>
<span class="comment-copy">@EmilyHill, FYI, the accept answer will not work with empty tuple.</span>
<span class="comment-copy">@EmilyHill, If it was Python 2.x, you don't need to import <code>reduce</code> from <code>functools</code> because it's a builtin function.</span>
<span class="comment-copy">@falsetru Your answer doesn't work with an empty tuple either; indeed, it's not even clear what the output should be (<code>None</code>?).</span>
