<div class="post-text" itemprop="text">
<p>I want to use unittest in python to check if a method returns object of the right class.</p>
<p>Every example in the web shows tests for 'type' returned.</p>
<p>For example, to check for  <code>&lt;type 'list'&gt;</code> or   <code>&lt;type 'type'&gt;</code> , we could use:</p>
<pre><code>self.assertIsInstance(result, list)
self.assertIsInstance(result[0], tuple) 
</code></pre>
<p>What I am looking for is an example to check for <code>&lt;class'sqlalchemy.orm.query.Query'&gt;</code></p>
<p>Would appreciate any help. Thankyou.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>assertIsInstance()</code>, presumably using <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="noreferrer"><code>isinstance()</code></a> which is the recommended function for testing types. You could also <code>assertIs()</code> or <code>assertTrue()</code> combined with <code>type()</code> depending on the context:</p>
<pre><code>#assert.py
import unittest

class TestType(unittest.TestCase):

  def setUp(self):
      self.number = 1

  def test_assert_true(self):
      self.assertTrue(type(self.number) is int)

  def test_assert_is_instance(self):
      self.assertIsInstance(self.number, int)

  def test_assert_is_with_type(self):
      self.assertIs(type(self.number), int)

  def test_assert_is(self):
      self.assertIs(self.number, int)

if __name__ == '__main__':
    unittest.main()


$ python assert.py 

test_assert_is (__main__.TestType) ... FAIL
test_assert_is_instance (__main__.TestType) ... ok
test_assert_is_with_type (__main__.TestType) ... ok
test_assert_true (__main__.TestType) ... ok

======================================================================
FAIL: test_assert_is (__main__.TestType)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "assert.py", line 19, in test_assert_is
    self.assertIs(self.number, int)
AssertionError: 1 is not &lt;type 'int'&gt;

----------------------------------------------------------------------
Ran 4 tests in 0.000s

FAILED (failures=1)
</code></pre>
<p>The assertion error of the <code>test_assert_is(self)</code> might lead one to believe the type of 1 is not integer however it's comparing the object represented by 1 and the object that describes the type of an integer. This is most likely why <code>isinstance()</code> is preferred since it's more verbose about what it's checking and less typing is involved, so in general less error prone.</p>
</div>
<div class="post-text" itemprop="text">
<p>This should work:</p>
<pre><code>self.assertIsInstance(result, sqlalchemy.orm.query.Query)
</code></pre>
<p>You need to have <code>import sqlalchemy</code> in the file.</p>
</div>
<span class="comment-copy">...what's the problem, then? Just pass the query class to <code>isinstance</code>.</span>
<span class="comment-copy">I think <code>isInstance</code> is not the correct method to use. Instead <code>assertIs</code> works fine.</span>
<span class="comment-copy"><code>assertIs</code> did the job!!. Thanks.</span>
<span class="comment-copy">The traceback makes it look like the second assertion, <code>assertIs()</code>, failed.</span>
<span class="comment-copy">@StevenVascellaro Thanks for pointing that out, retested and updated code.</span>
<span class="comment-copy">@BrockHargreaves The results might be easier to understand as three separate tests. (<code>test_assert_true</code>, <code>test_assert_is_instance</code>, and <code>test_assert_is</code>)</span>
<span class="comment-copy">I forgot to use the import statement. Thanks for that. However, I think <code>assertIsInstance</code> is not the right test method to use. It returned this error: <code>AssertionError: &lt;class 'sqlalchemy.orm.query.Query'&gt; is not an instance of &lt;class 'sqlalchemy.orm.query.Query'&gt; </code> . Totally doesnt make sense, but @Brock Hargreaves 's method did the trick.</span>
