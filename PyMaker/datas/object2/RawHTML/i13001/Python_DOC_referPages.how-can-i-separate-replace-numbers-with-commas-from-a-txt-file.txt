<div class="post-text" itemprop="text">
<p>I need some advice and suggestion on how to substitute commas with dots and separate numbers. I explain well. </p>
<p>this is what I got from a file:
12,1899995803833,0,135000005364418,0,0582966990768909
13,0600004196167,0,141000002622604,0,098975196480751</p>
<p>My problem is that the first of all I need to replace SOME commas with a dot, in particular I need to replace the first, third, fifht comma and leave the second and fourth. Then I need to reduce the number of significative numbers and put a tab, as following:</p>
<p>12.18,         0.13,         0.05
13.06,         0.14,         0.09</p>
<p>As you can see the two raws are different in lenght, so I can't change the element at a specific position.
I thought about creating a single string for each raw, and then after looking at the average position assign a range. 
For example, the first comma is always the 2nd, 3rd, or 4th character. So I can say "Ã¯f in this position range there is a , change it to ."
But this is not the case of the others comma, because the difference can be very big, for example </p>
<p>29,3099994659424,0,521000027656555,2,40029883384705
29,75,0,531000018119812,2,46150183677673</p>
<p>(and this is what I want to have:
29.30,         0.52,         2.40
29.75,         0.53,         2.46)</p>
<p>I thought to run the programme more than 1 time, so first I substitute the first comma and eliminate all the numbers after the second digit, then I do the  same for the other 2 columns but it seems very long (I have many txt files). 
Other ways could be:
-assigning a true/false value to each comma and then iterate whit a for cycle
-divide all the number in list and then taking numbers on 1-3-5 position calling them int, the ones on 2-4-6 calling them dec and by using the write text function, write directly int,dec</p>
<p>May I use the regex? Do you know a more elegant way of the two I am working on?
Also, can you sketch how to set up the program?  I did a course on programming in Jython some years ago at university but I don't remember really a lot.
Thanks everyone!</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe there's a more elegant way, but I tried looping over the 'rows' then splitting each row on commas, then dealing with the pieces in pairs:</p>
<pre><code>text = """12,1899995803833,0,135000005364418,0,0582966990768909
          13,0600004196167,0,141000002622604,0,098975196480751
          29,3099994659424,0,521000027656555,2,40029883384705
          29,75,0,531000018119812,2,46150183677673"""

# First make the floats as a list of lists.
out = []
for row in text.split():
    items = row.split(',')
    ints, decs = items[::2], items[1::2]
    outrow = []
    for i, d in zip(ints, decs):
        outrow.append(float('{0}.{1}'.format(i, d)))
    out.append(outrow)

# Now we have a list of lists. Format them as text.
result = '{0:&gt;8s}{1:&gt;8s}{2:&gt;8s}\n'.format('A', 'B', 'C')
for row in out:
    result += '{0:8.2f}{1:8.2f}{2:8.2f}\n'.format(*row)

print(result)
</code></pre>
<p>In Python <code>str.format()</code> uses <a href="https://docs.python.org/3/library/string.html#formatspec" rel="nofollow">the formatting 'minilanguage'</a>. You can do all sorts of things with it. </p>
<p>This gives:</p>
<pre><code>    A       B       C
12.19    0.14    0.06
13.06    0.14    0.10
29.31    0.52    2.40
29.75    0.53    2.46
</code></pre>
<p>You could also use <code>out</code> directly as an array of floats, e.g. in NumPy.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>re</code> from the standard library to achieve the alternating substitution of ',' to '.' on each line.  </p>
<pre><code>import re
rows = [[float(num) for num in re.sub(r'(\d+),(\d+)',r'\1.\2',row).split(',')] for row in text.split()]
</code></pre>
<p>As example:</p>
<pre><code>text = """12,1899995803833,0,135000005364418,0,0582966990768909
          13,0600004196167,0,141000002622604,0,098975196480751
          29,3099994659424,0,521000027656555,2,40029883384705
          29,75,0,531000018119812,2,46150183677673"""
</code></pre>
<p>would produce the following using the list comprehension:</p>
<pre><code>rows
&gt;&gt;&gt;[[12.1899995803833, 0.135000005364418, 0.0582966990768909],
 [13.0600004196167, 0.141000002622604, 0.098975196480751],
 [29.3099994659424, 0.521000027656555, 2.40029883384705],
 [29.75, 0.531000018119812, 2.46150183677673]]
</code></pre>
<p>I have nothing further to add on the formatting beyond what @kwinkunks provided.  Building on his answer you could convert the <code>rows</code> list of lists into a printable string by doing the following:</p>
<pre><code>printable=''.join(['{0:8.2f}{1:8.2f}{2:8.2f}\n'.format(*row) for row in rows])
</code></pre>
</div>
<span class="comment-copy">Thanks really a lot, very precise! Can I ask you also how to import all the test from a txt file? I know how to it in Jython and I thought was the same in Python, but maybe there is a little difference in the functions to call.</span>
<span class="comment-copy">If you are aiming for a NumPy array, and I recommend doing that, then it's easy. Assuming you are starting with a file <code>myfile.txt.</code> containing the text my example ended with: <code>numpy.loadtxt('myfile.txt', skiprows=1)</code>.</span>
<span class="comment-copy">Hi Khammel, thanks a lot for your answer, I will try also this method. ;D</span>
