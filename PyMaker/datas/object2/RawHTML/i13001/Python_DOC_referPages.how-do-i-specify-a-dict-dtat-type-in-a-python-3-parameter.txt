<div class="post-text" itemprop="text">
<p>I am trying to pass a dict variable into a function in Python 3 and then trying to iterate through the keys by calling the .keys() function. However I don't know how to specify the type of the parameter.</p>
<pre><code>def DisplayStock(StockDict):
    for key in StockDict.keys():
</code></pre>
<p>The error I am getting is</p>
<pre><code>for key in StockDict.keys():
AttributeError: 'function' object has no attribute 'keys'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I guess You ask about <a href="https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-484" rel="nofollow">pep-484</a></p>
<pre><code>def DisplayStock(StockDict: dict):
    for key in StockDict.keys()
</code></pre>
<p><code>StockDict</code> is a parameter name, <code>dict</code> is a parameter type.</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems like you are just passing something wrong to the function. From the error it seems like you are giving it a function. Maybe you should put <code>()</code> behind the argument that is causing the error.</p>
<p>Normally you don't need to specify a type. The function will take any type.</p>
<p>If you want to check if the passed argument is a dict you could use: </p>
<pre><code>if isinstance(Stockdict, dict):
     for key in Stockdict.keys()
</code></pre>
<p>This is not very pythonic though. Just don't pass a non dict like object to the function. </p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is not in the parameter type. Python is happy for just a variable name and as the original code and then use the .keys method. The error was in a different part of the code I missed brackets on a function call and had set my dictionary object to be a function reference.</p>
</div>
<span class="comment-copy">please elaborate, it's very unclear. do you mean the type of the argument <code>StockDict</code> so that you know it's a dictionary? If that is the case, python adopts the philosophy of <code>duck typing</code>, see <a href="https://en.wikipedia.org/wiki/Duck_typing" rel="nofollow noreferrer">here</a>. So as long as the object passed support the appropriate protocols, you can consider it a dictionary. See <a href="https://docs.python.org/3/c-api/abstract.html" rel="nofollow noreferrer">here</a> and look for other similar Q&amp;A on SO and the internet</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/1277881/python-and-dictionary-like-object">Python and dictionary like object</a></span>
<span class="comment-copy">I am passing it a dict. However, I am unable to use the .keys() method as the interpreter doesn't realise it's a dict, it seems to be throwing an error... At least that's what I think is happening!</span>
<span class="comment-copy">"At least that's what I think is happening!" What do you mean by thinking? If your code doesn't run you should see an exception and stack trace that tells you exactly what is happening.</span>
<span class="comment-copy">Please show the <code>StockDict</code> type: <code>print(type(StockDict))</code></span>
<span class="comment-copy">I had tried this and got no change. Still gave the same error message.</span>
<span class="comment-copy">@StuartMaher type annotations aren't actually enforced by Python</span>
<span class="comment-copy">please elaborate, it's an opportunity for a good answer, although it does sound like a duplicate...</span>
<span class="comment-copy"><code>if isinstance(dict):</code> should be <code>if isinstance(StockDict, dict):</code></span>
<span class="comment-copy">It's not runtime stype safety I am concerned about. The program won't go through the interpreter. I've edited the original question to include the error as that may shed light (I should have done it from the start, bad me!)</span>
