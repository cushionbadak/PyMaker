<div class="post-text" itemprop="text">
<p>I'm using <code>csv.DictReader</code> to read a <code>.csv</code> file.</p>
<p><code>csv.DictReader</code> has an iterator which returns each row as a <code>dict</code> and I know how to get single column values out using the title of the columns:</p>
<pre><code>CsvReaderRow[' D0']
CsvReaderRow[' D1']
CsvReaderRow[' D2']
CsvReaderRow[' D3']
CsvReaderRow[' D4']
CsvReaderRow[' D5']
CsvReaderRow[' CLOCK']
CsvReaderRow[' FRAME']
</code></pre>
<p>But is there a way to get out a bunch of columns with one statement?
I'd like to do </p>
<pre><code>CsvReaderRow[(' D0', ' D1', ' D2', ' D3', ' D4', ' D5')]
</code></pre>
<p>and get a <code>list</code> of the values of those keys but it's giving me <code>KeyError</code>.</p>
<p>I understand that it's trying to hash the tuple and that it's not what I want.</p>
<p>I <em>could</em> create a list of <code>DX</code> and then use <code>for el in key_list</code> to index into the dict but I'm wondering if there's a more Pythonic way of doing this.</p>
</div>
<div class="post-text" itemprop="text">
<p>As described, the following approach should work nicely:</p>
<pre><code>import csv

required = ['D0', 'D1', 'D2', 'D3', 'D4', 'D5']
entries = []

with open('input.csv', 'rb') as f_input:
    for dict_row in csv.DictReader(f_input):
        entries.append([dict_row[col] for col in required])
</code></pre>
<p>Or a bit more concise:</p>
<pre><code>with open('input.csv', 'rb') as f_input:
    entries = [[dict_row[col] for col in required] for dict_row in csv.DictReader(f_input)]
</code></pre>
<p>Tested in Python 2.7.9</p>
</div>
<div class="post-text" itemprop="text">
<p>Batteries included: <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow"><code>operator.itemgetter</code></a>. Create a getter object:</p>
<pre><code> get_keys = operator.itemgetter(' D0', ' D1', ' D2', ' D3', ' D4', ' D5')
</code></pre>
<p>Then call the resulting object on each row:</p>
<pre><code>with open('input.csv', 'rb') as f_input:  # Py3: open('input.csv', newline='')
    # list wrapper only required in Py3 (or Py2 if you imported map from future_builtins)
    entries = list(map(get_keys, csv.DictReader(f_input)))
</code></pre>
<p>Or calling explicitly if you hate <code>map</code> (or really want <code>list</code> of the values instead of the <code>tuple</code> an <code>itemgetter</code> returns for each call):</p>
<pre><code>    entries = [list(get_keys(row)) for row in csv.DictReader(f_input)]
</code></pre>
</div>
<span class="comment-copy">You could use that method if you were indexing a numpy array, but as it is your current solution seems optimal.</span>
<span class="comment-copy">Either that or <code>whitelist = {' D0', ' D1', ' D2', ' D3', ' D4', ' D5'}; columns = [CsvReaderRow[col] for col in CsvReaderRow if col in whitelist]</code></span>
<span class="comment-copy">@AdamSmith shmancy! Put I'll try it when I get back to work tomorrow and if works, I'll accept. :)</span>
<span class="comment-copy">Or <code>list(map(CsvReaderRow.get, [' D0', ' D1', ' D2', ' D3', ' D4', ' D5']))</code> (I'm kidding. That's ugly)</span>
<span class="comment-copy"><code>entries.append([dict_row[col] for col in required])</code>: why is <code>dict_row[col] for col in required</code> valid syntax? It seems like you're using <code>col</code> before it exists. I don't doubt it works, I want to understand the syntax.</span>
<span class="comment-copy">It is called a <a href="https://docs.python.org/2/whatsnew/2.0.html?highlight=list%20comprehension#list-comprehensions" rel="nofollow noreferrer"><code>list comprehension</code></a> and I agree it does look like it is used before</span>
<span class="comment-copy">Note: This doesn't actually "pass all the keys at the same time". It's looking them up one-by-one, returning a <code>tuple</code> of the results. But it's packaging it into a simple preconstructed callable, and the callable (in CPython) is implemented at the C layer; no additional byte code is executed for each lookup, which can improve performance while reducing code complexity.</span>
