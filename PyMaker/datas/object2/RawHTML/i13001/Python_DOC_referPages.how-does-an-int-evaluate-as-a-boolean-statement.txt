<div class="post-text" itemprop="text">
<p>So I was learning Python on Codecademy recently, and I accidentally submitted this</p>
<pre><code>    def check_bit4(input):
        if 0b1000 &amp; input:
            return "on"
        else:
            return "off"
</code></pre>
<p>as my code when it should have been this (the " &gt; 0 " in the if statement was omitted). For some reason, the code above still passed all the given test cases.</p>
<pre><code>    def check_bit4(input):
        if 0b1000 &amp; input &gt; 0:
            return "on"
        else:
            return "off"
</code></pre>
<p>The original prompt asked for a function that would check if the fourth bit was "on". From what I know, the '&amp;' operator should return an int value rather than a boolean value. So, my question is, why does the first program still pass all the test cases? </p>
</div>
<div class="post-text" itemprop="text">
<p>Zero is considered as falsy value. Other number are considered truth value:</p>
<pre><code>&gt;&gt;&gt; bool(1)
True
&gt;&gt;&gt; bool(34)
True
&gt;&gt;&gt; bool(0)
False
</code></pre>
<p><code>0b1000 &amp; input</code> will return non-zero value if the <code>input</code> has the bit set. So the predicate will be considered true if that condition is met.</p>
<p>See <a href="https://docs.python.org/3/library/stdtypes.html#truth" rel="nofollow">Truth Value Testing - Python documentation</a> for more precise definition of truth value.</p>
</div>
<span class="comment-copy">Side-note: Don't name variables <code>input</code> (or any other name which shadows a built-in). It only leads to tears.</span>
<span class="comment-copy">Take a look at <a href="https://docs.python.org/3/library/stdtypes.html#truth" rel="nofollow noreferrer">Truth Value Testing</a> in the Python docs for precise definitions of "truthiness" and "falsiness" in Python.</span>
<span class="comment-copy">@ShadowRanger, Thank you for the reference. I updated the answer to include it.</span>
