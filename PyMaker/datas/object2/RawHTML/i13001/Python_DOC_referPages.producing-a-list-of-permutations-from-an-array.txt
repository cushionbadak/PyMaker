<div class="post-text" itemprop="text">
<p>This is probably straightforward but I'm new to this sort of programming and struggling to wrap my head around what I need to do.</p>
<p>I'm trying to build a list of filters to apply to an image. I have seven filters I can apply and each filter can either be <code>0</code> or <code>1</code> (on or off). The filters are:</p>
<pre><code>filters = [
    'Exposure',
    'Noise',
    'Pressure',
    'XQ Mix',
    'Invert',
    'Desaturate',
    'Equalise'
]
</code></pre>
<p>What I want to produce is every possible permutation of these filters in their states. There should be 128 possible permutations (2^7) but when I run the following code I get 5080 permutations:</p>
<pre><code>perms = permutations(filters)
perm_count = 0
for p in perms:
    print(p)
    perm_count = perm_count + 1

print str(perm_count) + ' total permutations'
</code></pre>
<p>I'm likely using the wrong method – all this is doing is shuffling the sequence of filters, which I don't care about. </p>
<p>I tried updating the filter list to have two items for each filter, eg. <code>['Exposure0', 'Exposure1']</code> etc, but running <code>combinations(filters, 7)</code> against this gives me duplicate values (eg. both on and off states in the same list).</p>
<p>I'm struggling here – can anyone give me a nudge in the right direction for approaching something like this? Looking in the docs, something like <code>product('ABCD', 'xy') --&gt; Ax Ay Bx By Cx Cy Dx Dy</code> seems along the right lines but I still can't wrap my head around it. Help appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you are looking for as far as I understand is called a powerset.
Here are some implementations for this method:
<a href="https://stackoverflow.com/questions/7988695/getting-the-subsets-of-a-set-in-python">Getting the subsets of a set in Python</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You are using <code>permutations</code> the wrong way. Look at <a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow">the documentation</a>:</p>
<pre><code>&gt;&gt;&gt; permutations('ABCD', 2)
AB AC AD BA BC BD CA CB CD DA DB DC
</code></pre>
<p>You are just mixing your <code>filters</code> values and creating all the possibilities, which is 7! = 5040.</p>
<p>What you want is the <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow"><code>product</code></a> of <code>(0, 1)</code> seven times.</p>
<pre><code>&gt;&gt;&gt; p = product((0, 1), repeat=7)
&gt;&gt;&gt; print(len(p))
128
# [(0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 1), ...]
</code></pre>
</div>
<span class="comment-copy">Note: you can use <code>len(list(...))</code>. Oh, and explicitly state <code>itertools</code> plz.</span>
<span class="comment-copy">@KarolyHorvath I tried using <code>len(list(...))</code> initially (and again just now to check) and it returns 0 – that was why I added the counter.</span>
<span class="comment-copy">That's.. how should I say it... <i>interesting</i>... works here.</span>
<span class="comment-copy">... what? Because that code didn't work on my machine?</span>
<span class="comment-copy">Your machine isn't special. It works there too. Feel free to post a separate question ;)</span>
<span class="comment-copy">Thank you – this was exactly what I wanted – effectively the missing items in the set are the "off" values and I can work out my filters. Much appreciated, thanks!</span>
<span class="comment-copy">Thank you – have already accepted the other answer (because it gives me the actual list of "on" filters, whereas here I'd still need to associate the list of 0/1s with the filter sequence again. Thanks though, I've learned something about <code>itertools</code> today.</span>
<span class="comment-copy">@MattAndrews Sure, the main thing is that you have resolved your issue, I hope you better understand how to use <code>product()</code> and <code>permutations()</code> now.</span>
