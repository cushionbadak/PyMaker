<div class="post-text" itemprop="text">
<p>I am using subprocess module to interact with output of the  linux commands. below is my code.</p>
<pre><code>import subprocess
import sys

file_name = 'myfile.txt'
p = subprocess.Popen("grep \"SYSTEM CONTROLLER\" "+ file_name, stdout=subprocess.PIPE, shell=True)
(output, err) = p.communicate()
print output.strip()

p = subprocess.Popen("grep \"controller\|worker\" "+ file_name, stdout=subprocess.PIPE, shell=True)
(output, err) = p.communicate()
lines = output.rstrip().split("\n")
print lines
</code></pre>
<p>My program hangs while executing second subprocess i.e. </p>
<pre><code>p = subprocess.Popen("grep \"controller\|worker\""+ file_name,stdout=subprocess.PIPE, shell=True)
</code></pre>
<p>I got to know that the reason of process hang is buffer redirected to subprocess.PIPE is getting filled, which blocks the process from writing further.</p>
<p>I want to know if there is any way to avoid the buffer full situation so that my program keeps on executing without any hang issue ?</p>
</div>
<div class="post-text" itemprop="text">
<p>The actual issue is that there is a whitespace missing between the pattern and the filename and therefore <code>grep</code> waits for input on the standard input (stdin). </p>
<p><em>"buffer full"</em> (<code>.communicate()</code> is not susceptible) or <code>p.stdout.read()</code> (it fixes nothing: it loads the output into memory and unlike <code>.communicate()</code> it fails if more than one pipe is used) are a red herring here.</p>
<p>Drop <code>shell=True</code> and use a list argument for the command:</p>
<pre><code>#!/usr/bin/env python
from subprocess import Popen, PIPE

p = Popen(["grep", r"controller\|worker", file_name], stdout=PIPE)
output = p.communicate()[0]
if p.returncode == 0:
    print('found')
elif p.returncode == 1:
    print('not found')
else: 
    print('error')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As it says at <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow">https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate</a>:</p>
<blockquote>
<p><strong>Note:</strong> The data read is buffered in memory, so do not use this method
  if the data size is large or unlimited.</p>
</blockquote>
<p>Instead, use the <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.stdout" rel="nofollow">file objects</a> to read the text as it is produced:</p>
<pre><code>output = p.stdout.read()
</code></pre>
<p>As long as no other pipes (e.g. stderr) fill up while you are reading, the process shouldn't be blocked.</p>
</div>
<span class="comment-copy">I think (but not sure) the error is in the use of the double quotes into both the subprocess. Use the double to delimite the command string and the single between or viceversa. Consider also to use <code>os.system(&lt;your_command_string&gt;)</code></span>
<span class="comment-copy">@fattidare error is not in use of double quotes. It because using PIPE as per mentioned in so many other documents.</span>
<span class="comment-copy">Why do you want to execute <code>grep</code> in a subprocess? Why not just use Python's <code>re</code> module to do your regex operations?</span>
<span class="comment-copy">My requirement is to use <code>grep</code> and find the string from contents written in a file and then to use <code>re</code> module to perform some more validations in the string. @PM2Ring</span>
<span class="comment-copy">@fattidare: <code>os.system</code> is <i>extremely</i> limited compared to the subrocess module, and its use is deprecated. In particular, <code>os.system</code> only returns the exit code of the command it runs and gives you no access to that command's IO. From <a href="https://docs.python.org/2/library/subprocess.html" rel="nofollow noreferrer">the subprocess docs</a>: "The subprocess module allows you to spawn new processes, connect to their input/output/error pipes, and obtain their return codes. This module intends to replace several older modules and functions: [...] os.system".</span>
