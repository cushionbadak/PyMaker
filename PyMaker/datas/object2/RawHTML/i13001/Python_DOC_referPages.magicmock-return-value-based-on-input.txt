<div class="post-text" itemprop="text">
<p>I am trying to refactor my tests from flexmock to mock. Given the following syntax from flexmock:</p>
<pre><code>flexmock(subprocess).should_receive('check_output').with_args('ls /').and_return(output)
</code></pre>
<p>How can I rewrite this using Mock? In particular, how do I pin a return value to a spesific input using Mock?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.side_effect" rel="nofollow"><code>side_effect</code></a> <code>patch</code> attribute to do it:</p>
<pre><code>&gt;&gt;&gt; from unittest.mock import *
&gt;&gt;&gt; root = '''bin   cdrom  etc   initrd.img  lib32  libx32      media  opt   root  sbin  sys  usr  vmlinuz
... boot  dev    home  lib         lib64  lost+found  mnt    proc  run   srv   tmp  var'''
&gt;&gt;&gt; answer = {'ls /': root}
&gt;&gt;&gt; import subprocess

&gt;&gt;&gt; with patch('subprocess.check_output', side_effect=lambda arg, *args, **kwargs: answer[arg]) as mock_check_output :
...     assert root == subprocess.check_output('ls /')
...     mock_check_output.assert_called_with('ls /')
...     subprocess.check_output('something else')
... 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 4, in &lt;module&gt;
  File "/usr/lib/python3.4/unittest/mock.py", line 896, in __call__
    return _mock_self._mock_call(*args, **kwargs)
  File "/usr/lib/python3.4/unittest/mock.py", line 962, in _mock_call
    ret_val = effect(*args, **kwargs)
  File "&lt;stdin&gt;", line 1, in &lt;lambda&gt;
KeyError: 'something else'
&gt;&gt;&gt; 
</code></pre>
<p>I'm quite sure that you can find it little bit harder compared to <code>flexmock</code>'s syntax, but what you need is more a stub than a mock. If you can design your test to be isolated and configure your mock/stub in some setup stage maybe you will find this syntax good and all <code>mock</code> asserts and <code>patch</code> options very powerful.</p>
</div>
