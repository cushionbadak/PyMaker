<div class="post-text" itemprop="text">
<p>The requirement is to iterate over every pair of unique key combination in python and get intersection list of values for every pair of key. To achieve this I am iterating over keys twice and in second iteration I am bypassing all the keys having lesser value of key compare to key of first iteration -</p>
<pre><code>for key1, val1 in dict.iteritems():
    for key2, val2 in dict.iteritems():
       if key2 &lt;= key1:
          continue
       else:
          #vertices common to both key1 and key2 will be
          #in intersection list of its values
          neighbours  = [val for val in val1 if val in val2]
          #--Further processing on list of neighbours 
</code></pre>
<p>As mentioned in others post I can create combination of dictionary keys and iterate over it but as I have to process values simultaneously I used above approach.</p>
<p>What will be most pythonic and efficient way to achieve this ?</p>
</div>
<div class="post-text" itemprop="text">
<p>There are much better tools for this; use the <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow"><code>itertools.combinations()</code> generator</a> to pair every key with every other key:</p>
<pre><code>from itertools import combinations

for (key1, val1), (key2, val2) in combinations(dictionary.items(), 2):
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt; dictionary = {'foo': 'bar', 'spam': 'eggs', 'monty': 'python'}
&gt;&gt;&gt; for (key1, val1), (key2, val2) in combinations(dictionary.items(), 2):
...     print('Combining {!r}: {!r} with {!r}: {!r}'.format(key1, val1, key2, val2))
...
Combining 'foo': 'bar' with 'monty': 'python'
Combining 'foo': 'bar' with 'spam': 'eggs'
Combining 'monty': 'python' with 'spam': 'eggs'
</code></pre>
<p>You may want to use <em>sets</em> to calculate the intersections:</p>
<pre><code>neighbours = set(val1).intersection(val2)
</code></pre>
</div>
<span class="comment-copy">Well, the order is arbitrary, but it shouldn't change between iterations, at the very least.</span>
