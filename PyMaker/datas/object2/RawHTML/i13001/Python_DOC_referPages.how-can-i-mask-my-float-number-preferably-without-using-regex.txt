<div class="post-text" itemprop="text">
<p>How can I format a float number to string, by using a mask?</p>
<p>(I'm not proficient in regex, but if someone knows an one-line solution, why not?)</p>
<p><strong>Here is my problem:</strong></p>
<p>I have a float number like "6.88" and I need to format it using the following mask "00000000000.00"</p>
<blockquote>
<p>6.88 = "00000000006.88"</p>
<p>14.3 = "00000000014.30"</p>
<p>00.0 = "00000000000.00"</p>
</blockquote>
<p>I've already read the following post but I couldn't understood it:</p>
<p><a href="https://stackoverflow.com/questions/21031668/format-number-number-with-specific-mask-regex-python">Format number number with specific mask regex python</a></p>
<p><strong>Example of my data:</strong></p>
<pre><code>6.88  =&gt; 00000000006.88
56.62 =&gt; 00000000056.62
9.58  =&gt; 00000000009.58
24.75 =&gt; 00000000024.75
14.30 =&gt; 00000000014.30
</code></pre>
<p><strong>My not so efficient nor fast solution:</strong></p>
<ol>
<li>convert from float to str</li>
<li>split my string using the separator "."</li>
<li>count chars before and after "."</li>
<li>adapt my split[0] and split[1] to the mask, by using the length of these parameters</li>
<li>done</li>
</ol>
<hr/>
<p><strong>Is there an easier way to do this?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>You'd use <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow">string formatting</a>:</p>
<pre><code>In [21]: '{:014.2f}'.format(6.88)
Out[21]: '00000000006.88'

In [22]: '{:014.2f}'.format(14.30)
Out[22]: '00000000014.30'

In [23]: '{:014.2f}'.format(0)
Out[23]: '00000000000.00'
</code></pre>
<p>According to <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language" rel="nofollow"><em>6.1.3.1. Format Specification Mini-Language</em></a>,</p>
<ul>
<li><p><code>0</code> is the fill character</p></li>
<li><p><code>.2</code> sets the precision to 2</p></li>
<li><p>14 is the width of the result string</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Another example based on string formatting (not very nice or error prone):</p>
<pre><code>def format_float(string_format, number):
    _int, _frac = string_format.split(".")
    real_format = "%%%s%d.%df" % ("0", len(_int) + len(_frac) + 1, len(_frac))
    return real_format % number

print format_float("00000.000", 1.2)
</code></pre>
<p>would yield: <em>00001.200</em></p>
</div>
<span class="comment-copy">Wow! It works perfectly! Thanks a lot for teaching me that! - "Easy as Py"</span>
<span class="comment-copy">If your going to use old style formatting do <code>'%014.2f' % the_number</code>.   This is buggy overkill.</span>
<span class="comment-copy">It's what the function does, converts the "00000000000.00" (those are given) format into "%014.2f" (accepted by string formatting routines). I didn't simply hardcoded it, to keep it more general, If the format changes ("0" s added or removed), the code doesn't need to change.</span>
