<div class="post-text" itemprop="text">
<p>I have the foll. strings in python:</p>
<pre><code>Vladimir_SW_crop_mask_ERA.hdr
Ust_Ordynskiy_Buryatskiy_AO_SW_crop_mask_ERA.hdr
Ingush_WW_crop_mask.dat
</code></pre>
<p>I want to parse these strings such that:</p>
<ol>
<li><p>Get the crop type which can be either SW or WW</p></li>
<li><p>Get the region name which is the text preceding _SW or _WW</p></li>
</ol>
<p>I was doing str.split('_')[0] to get region name, but that fails in case of <code>Ust_Ordynskiy_Buryatskiy_AO_SW_crop_mask_ERA.hdr</code>, where the region name is <code>Ust_Ordynskiy_Buryatskiy_AO</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can <a href="http://docs.python.org/3/library/stdtypes.html?highlight=partition#str.partition" rel="nofollow">partition</a> and <a href="http://docs.python.org/3/library/stdtypes.html?highlight=partition#str.rpartition" rel="nofollow">rpartition</a> to do this:</p>
<pre><code>&gt;&gt;&gt; s = 'Vladimir_SW_crop_mask_ERA.hdr'
&gt;&gt;&gt; s.partition('_crop')[0].rpartition('_')[::2]
('Vladimir', 'SW')
&gt;&gt;&gt; s = 'Ust_Ordynskiy_Buryatskiy_AO_SW_crop_mask_ERA.hdr'
&gt;&gt;&gt; s.partition('_crop')[0].rpartition('_')[::2]
('Ust_Ordynskiy_Buryatskiy_AO', 'SW')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following regexp should work:</p>
<pre><code>(.*)_(SW|WW)
</code></pre>
<p>Match everything up to an underscore followed by either <code>SW</code> or <code>WW</code> and put this in the first matching group and the following <code>SW</code> or <code>WW</code> in the second group:</p>
<pre><code>import re

strs = ["Vladimir_SW_crop_mask_ERA.hdr",
        "Ust_Ordynskiy_Buryatskiy_AO_SW_crop_mask_ERA.hdr",
        "Ingush_WW_crop_mask.dat"]

for s in strs:
    print(re.match("(.*)_(SW|WW)", s).groups())
</code></pre>
<p>Result:</p>
<pre><code>('Vladimir', 'SW')
('Ust_Ordynskiy_Buryatskiy_AO', 'SW')
('Ingush', 'WW')
</code></pre>
</div>
<span class="comment-copy">regexes would'nt make too much sense on constant strings :)</span>
<span class="comment-copy">thanks @Jasper, it is a bad name for the question :) but 'regular expression in python' was already asked</span>
