<div class="post-text" itemprop="text">
<p>I have code that is like:</p>
<pre><code>class Foo:
    def foo(self):
        pass


class Bar:
    def foo(self):
        pass

f = random.choice((Foo().foo, Bar().foo))
</code></pre>
<p>How do I access <code>Bar</code> or <code>Foo</code> from f? </p>
<p><code>f.__dict__</code> is of little to no help, but as <code>repr(f)</code> gives <code>&lt;bound method Bar.foo of &lt;__main__.Bar object at 0x10c6eec18&gt;&gt;'</code> it must be possible, but how?</p>
</div>
<div class="post-text" itemprop="text">
<p>Each bound method has the <code>__self__</code> attribute which is the</p>
<blockquote>
<p>instance to which this method is bound, or <code>None</code></p>
</blockquote>
<p>(copied from <a href="https://docs.python.org/3/library/inspect.html#types-and-members" rel="noreferrer">here</a>)</p>
<p>More about bound methods (from <a href="https://docs.python.org/3/reference/datamodel.html" rel="noreferrer"><em>Data Model</em></a>):</p>
<blockquote>
<p>If you access a method (a function defined in a class namespace)
  through an instance, you get a special object: a bound method (also
  called instance method) object. ... Bound methods have two special
  read-only attributes: <code>m.__self__</code> is the object on which the method
  operates...</p>
</blockquote>
<p>So <code>f.__self__</code> will get you the class instance:</p>
<pre><code>print(f.__self__) # &lt;__main__.Foo object at 0x7f766efeee48&gt;
</code></pre>
<p>And <code>type(f.__self__)</code> or <code>f.__self__.__class__</code> will get you the type object:</p>
<pre><code>print(type(f.__self__)) # &lt;class '__main__.Foo'&gt;
</code></pre>
<p>You'd only use <code>__class__</code> for <a href="https://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes" rel="noreferrer">old-style classes</a>.</p>
</div>
<span class="comment-copy">Nitpick: The type of the instance isn't necessarily the class where the function was defined; just because the method is bound to an X instance doesn't mean the function couldn't be defined in class Y. But that said, this code will certainly produce the correct output in 99.99% of real-world scenarios. And anyway it's not clear what the OP's expected output would be in such a 0.01% case.</span>
