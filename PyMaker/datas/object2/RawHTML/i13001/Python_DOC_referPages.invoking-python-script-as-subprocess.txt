<div class="post-text" itemprop="text">
<p>I am creating a wrapper around a few python scripts and have run into a slight issue when there are multiple versions of python installed on the computer.  For example on my Mac there is python 2.7 accessible via "python" at the command line and python 3.4 available "python3".  Is there anyway to determine how the current python instance was started so that I can be sure the subprocess will be using the right version?</p>
<pre><code>import subprocess

def main():
    pythonCommand = determineCommand() #What is python install as on this computer
    argArray = [pythonCommand, "test.py"] #requires python 3.4
    subprocess.call(argArray)

#What I need to figure out
def determineCommand():
    #If Some Check
        return "python3"
    #Else some other check
        return "python"
    #else something weird
        return "python34"
    #and so on

if __name__ == "__main__":
    main()
</code></pre>
<p>The above code will not execute properly on my computer but on a computer with only python 3.4 installed it works fine.  Changing the argArray to use python3 works on my computer but breaks it on others.  </p>
</div>
<div class="post-text" itemprop="text">
<p>To get the executable used to launch the current Python interpreter, read <a href="https://docs.python.org/3/library/sys.html#sys.executable" rel="nofollow"><code>sys.executable</code></a>. It's the absolute path to the Python interpreter binary currently running (though it can be the empty string or <code>None</code> in weird cases, like frozen executables and the like).</p>
</div>
<div class="post-text" itemprop="text">
<p>The version of Python being executed can be checked via <code>sys.version_info</code>:</p>
<pre><code>chuck@computer:~$ python
&gt;&gt;&gt; import sys; sys.version_info
sys.version_info(major=2, minor=7, micro=10, releaselevel='final', serial=0)
&gt;&gt;&gt; exit()

chuck@computer:~$ python3
&gt;&gt;&gt; import sys; sys.version_info
sys.version_info(major=3, minor=4, micro=3, releaselevel='final', serial=0)
&gt;&gt;&gt; 
</code></pre>
<p>The <code>version_info</code> attribute is available in all Python versions &gt;= 2.0.</p>
<p>If you require a certain version, you can add a check in your module:</p>
<pre><code>import sys
v = sys.version_info

if sys.version_info.major &lt; 3:
    raise Exception("Incompatible Python version: %d.%d" % (v.major, v.minor))
</code></pre>
</div>
<span class="comment-copy">related: <a href="http://stackoverflow.com/q/30076185/4279">Call python script with input with in a python script using subprocess</a></span>
<span class="comment-copy">Is there anyway to know that command line command that will invoke that version? Like how would i know to use python3 and not python34 on some unusual installation?</span>
<span class="comment-copy">@user1593858 You can pass the -c flag at the command line: <code>python -c "import sys; print sys.version_info"</code> if you want to see the full version_info object or just <code>python --version</code> otherwise.</span>
<span class="comment-copy">I guess what I am asking is unclear.  I added some to the code in the question to hopefully illustrate what I am trying to ask</span>
<span class="comment-copy">@user1593858 Thanks for the clarification. I'd say you don't want to rely on the specific name the user invokes python with; using <code>export p=/usr/bin/python</code> for instance, I can call the Python 2.7 interpreter on my system as <code>$p</code>.</span>
<span class="comment-copy">@user1593858 More generally, I'd suggest either updating your code to be 2.7 compatible if the case requires it or in your documentation spelling out exactly which versions of Python are supported and raising an exception if an incorrect Python version is detected. If you want to support 2 and keep writing 3, check out the <a href="https://pypi.python.org/pypi/future" rel="nofollow noreferrer">future package</a></span>
