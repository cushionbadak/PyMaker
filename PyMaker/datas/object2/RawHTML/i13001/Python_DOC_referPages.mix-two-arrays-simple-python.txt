<div class="post-text" itemprop="text">
<p>Lets say that I have these two numpy arrays:</p>
<pre><code>a = np.array([1,1,1])
b = np.array([2,2,2])
</code></pre>
<p>How can I "mix" then to obtain the following:</p>
<pre><code>c = np.array([1,2,1,2,1,2]) 
</code></pre>
<p>Does it exist a function like <code>np.concatenate</code>, <code>np.repeat</code>, <code>np.tile</code> which I can use or I will have to make my own one?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's not the prettiest, but you can do this:</p>
<pre><code>&gt;&gt;&gt; np.array(zip(a,b)).flatten()
array([1, 2, 1, 2, 1, 2])
</code></pre>
<p>You would however have to do the below in <code>Python3</code>:</p>
<pre><code>np.array(list(zip(a,b))).flatten()
</code></pre>
<p>As <code>zip</code> no longer returns a list, but rather a generator (similar to <code>range</code>).</p>
<p>Athough just for the record, it appears the fastest way is probably how John La Rooy suggested (using transpose then flatten):</p>
<pre><code>$ python -m timeit 'import numpy as np; a = np.array(range(30)); b = np.array(range(30)); c = np.array(zip(a,b)).flatten()'
10000 loops, best of 3: 24.9 usec per loop
$ python -m timeit 'import numpy as np; a = np.array(range(30)); b = np.array(range(30)); c = np.array([a, b]).T.flatten()'
100000 loops, best of 3: 14.9 usec per loop
$ python -m timeit 'import numpy as np; a = np.array(range(30)); b = np.array(range(30)); c = np.vstack([a, b]).T.ravel()'
10000 loops, best of 3: 21.5 usec per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's another one-liner:</p>
<pre><code>np.vstack([a, b]).T.ravel()
</code></pre>
<p>or similarly</p>
<pre><code>np.vstack([a, b]).ravel('F')
</code></pre>
<p>or you could do</p>
<pre><code>np.concatenate(list(zip(a, b)))
</code></pre>
<p>endless possibilities!</p>
</div>
<div class="post-text" itemprop="text">
<p>from the <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow"><code>itertools</code> documentation</a>:</p>
<pre><code>def roundrobin(*iterables):
    "roundrobin('ABC', 'D', 'EF') --&gt; A D E B F C"
    # Recipe credited to George Sakkis
    pending = len(iterables)
    nexts = cycle(iter(it).__next__ for it in iterables)
    while pending:
        try:
            for next in nexts:
                yield next()
        except StopIteration:
            pending -= 1
            nexts = cycle(islice(nexts, pending))
</code></pre>
<p>This is verbose, but has the advantage that it will take iterables of different lengths.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try something like this:</p>
<pre><code>np.concatenate((a, b), axis=0)
</code></pre>
<p>also read this heres more info about it
<a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.concatenate.html" rel="nofollow">http://docs.scipy.org/doc/numpy/reference/generated/numpy.concatenate.html</a></p>
</div>
<span class="comment-copy">I was gonna recommend <code>np.resize(zip(a,b),(1,6))</code> and this is certainly prettier than that</span>
<span class="comment-copy">Note that this will not work in python3. you will need  <code>np.array(list(zip(a, b))).flatten()</code></span>
<span class="comment-copy">This worked, the second answer is wrong. Thanks</span>
<span class="comment-copy">Thanks @JoranBeasley :)</span>
<span class="comment-copy">I think using <code>zip</code> on <code>np.array</code> and back again is wasting a lot of cpu cycles. Why not <code>np.array([a, b]).T.flatten()</code></span>
<span class="comment-copy">This returns <code>array([1, 1, 1, 2, 2, 2]</code></span>
<span class="comment-copy">It doesn't work</span>
