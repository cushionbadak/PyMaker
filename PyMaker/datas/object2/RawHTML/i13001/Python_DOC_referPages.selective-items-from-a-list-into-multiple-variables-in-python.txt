<div class="post-text" itemprop="text">
<p>I have a text file containing CPU stats as below (from sar/sysstat)</p>
<pre><code>17:30:38        CPU     %user     %nice   %system   %iowait    %steal     %idle
17:32:49        all     14.56      2.71      3.79      0.00      0.00     78.94
17:42:49        all     12.68      2.69      3.44      0.00      0.00     81.19
17:52:49        all     12.14      2.67      3.22      0.01      0.00     81.96
18:02:49        all     12.28      2.67      3.20      0.03      0.00     81.82
</code></pre>
<p>My goal is to build lists for each column (except the CPU, %nice and %steal) so I can plot them using bokeh, so tried to split each line to list and then I don't know how you can ignore certain values i.e. </p>
<pre><code>#!/usr/bin/python
cpu_time = []
cpu_user = []
cpu_system = []
cpu_iowait = []
cpu_idle = []
with open('stats.txt') as F:
  for line in F:
    time, ignore, user, ignore, system, iowait, ignore, idle = line.split()
    cpu_time.append(time)
    cpu_user.append(user)
    cpu_system.append(system)
    cpu_iowait.append(iowait)
    cpu_idle.append(idle)
</code></pre>
<p>Is there a better/short way to do this? More specifically, the logic I used to ignore some of the items doesn't look good to me. </p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a more dynamic version that would scale to more columns. But there isn't really anything bad about your implementation. </p>
<pre><code># build a dict of column name -&gt; list of column values
stats = {}
with open('stats.txt') as F:
    header = None
    for idx, line in enumerate(F):
        # This is the header
        if idx == 0:
            # save the header for later use
            header = line.split()
            for word in header:
                stats[word] = []
        else:
            # combine the header with the line to get a dict
            line_dict = dict(zip(header, line.split()))
            for key, val in line_dict.iteritems():
                stats[key].append(val)

# remove keys we don't want
stats.pop('%nice')
stats.pop('%steal')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a bit more generic. You can define a list of desired column names. It uses <a href="https://docs.python.org/3/library/csv.html?highlight=csv#csv.DictReader" rel="nofollow">csv-Dictreader</a> to read the file. The names are given without the <code>%</code> suffix. In addition, it converts the time into a <code>datetime.time</code> object from the module <a href="https://docs.python.org/3/library/datetime.html?highlight=datetime#module-datetime" rel="nofollow">datetime</a> and all other columns into floats. You can specify your own data conversion functions  for all columns, using the dictionary <code>converters</code>.</p>
<pre><code>import csv
import datetime


def make_col_keys(fobj, col_names):
    time_key = fobj.readline().split()[0]
    cols = {'time': time_key}
    cols.update({key: '%' + key for key in col_names})
    fobj.seek(0)
    return cols


def convert_time(time_string):
    return datetime.datetime.strptime(time_string, '%H:%M:%S').time()


converters = {'time': convert_time}


def read_stats(file_name, col_names, converters=converters):
    with open(file_name) as fobj:
        cols = make_col_keys(fobj, col_names)
        reader = csv.DictReader(fobj, delimiter=' ', skipinitialspace=True)
        data = {}
        for line in reader:
            for new_key, old_key in cols.items():
                value = converters.get(new_key, float)(line[old_key])
                data.setdefault(new_key, []).append(value)
    return data


def main(file_name, col_names=None):
    if col_names is None:
        col_names = ['user', 'system', 'iowait', 'idle']
    return read_stats(file_name, col_names)

main('stats.txt')
</code></pre>
<p>Result:</p>
<pre><code>{'idle': [78.94, 81.19, 81.96, 81.82],
 'iowait': [0.0, 0.0, 0.01, 0.03],
 'system': [3.79, 3.44, 3.22, 3.2],
 'time': [datetime.time(17, 32, 49),
  datetime.time(17, 42, 49),
  datetime.time(17, 52, 49),
  datetime.time(18, 2, 49)],
 'user': [14.56, 12.68, 12.14, 12.28]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First you could use <code>_</code> or <code>__</code> to represent ignored values (this is a common convention).</p>
<p>Next you could store all values into a single list and then unpack the list into multiple lists using <code>zip</code>.</p>
<pre><code>cpu_stats = []
with open('stats.txt') as stats_file:
    for line in stats_file:
        time, _, user, _, system, iowait, _, idle = line.split()
        cpu_stats.append([time, user, system, iowait, idle])
cpu_time, cpu_user, cpu_system, cpu_iowait, cpu_idle = zip(*cpu_stats)
</code></pre>
<p>You could write this using a couple list comprehensions, but I don't think it's any more readable:</p>
<pre><code>with open('stats.txt') as stats_file:
    lines = (line.split() for line in stats_file)
    cpu_stats = [
        (time, user, system, iowait, idle)
        for time, _, user, _, system, iowait, _, idle
        in lines
    ]
cpu_time, cpu_user, cpu_system, cpu_iowait, cpu_idle = zip(*cpu_stats)
</code></pre>
</div>
<span class="comment-copy">This isn't bad, but specifically defining the vars as <code>ignore</code> is strange though. I would give them the correct names, and then just don't use them in your list appends. That makes the code more readable in the future if you want to use those extra vars.</span>
<span class="comment-copy">Use <code>_</code> in place of <code>ignore</code>. <code>time, _, user, _, system, iowait, _, idle = line.split()</code></span>
<span class="comment-copy">thank you, this is exactly what I needed :-)</span>
