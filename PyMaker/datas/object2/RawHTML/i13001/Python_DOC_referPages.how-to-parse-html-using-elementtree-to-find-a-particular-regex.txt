<div class="post-text" itemprop="text">
<p>Using Python 2.7.6 Along with ElementTree to load / parse an HTML file from the filesystem and then iterate through the file to store a particular RegEx into a data structure.</p>
<p>So, inside my project's folder, I have an HTML file entitled person.html:</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;body&gt;
        &lt;ul&gt;
            &lt;li&gt;Name: $name&lt;/li&gt;
            &lt;li&gt;Age: $age&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/body&gt; 
&lt;/html&gt;
</code></pre>
<p>Here's my Python script (main.py) so far:</p>
<pre><code>#!/usr/bin/env python
import web
import xml.etree.ElementTree as ElementTree

tree = ET.parse(person.html)
</code></pre>
<p>Question (s):</p>
<ol>
<li><p>How do I parse using a RegEx or ElementTree values that begin with <code>$</code> (such as <code>$name</code> and <code>$age</code>)?</p></li>
<li><p>How do I store these values into a data structure that I could iterate through in the future?</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p><code>lxml</code> is used to search html <strong><em>by tags</em></strong>.  For example, if you want to locate all the <code>&lt;li&gt;</code> tags, and get their text:</p>
<pre><code>import xml.etree.ElementTree as et

tree = et.parse('data.html')
html_tag = tree.getroot()

for li in html_tag.iter('li'):
    text = li.text
    print(text)

--output:--
Name: $name
Age: $age
</code></pre>
<p>If your target text can be in any tag, then you could do this:</p>
<pre><code>import xml.etree.ElementTree as et
import re

tree = et.parse('data.html')
html_tag = tree.getroot()

pattern = r"""
    \$
    .*?
    \b
"""

for tag in html_tag.iter('*'):  # '*' =&gt; all tags
    text = tag.text.strip()

    if text: 
        match_list = re.findall(pattern, text, flags=re.X)
        print (match_list)

--output:--
['$name']
['$age']
</code></pre>
<blockquote>
<p>How do I store these values into a data structure that I could iterate
  through in the future?</p>
</blockquote>
<p>You can use the <code>shelve</code> module:</p>
<pre><code>$ cat data.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;body&gt;
        &lt;ul&gt;
            &lt;li&gt;Name: $name&lt;/li&gt;
            &lt;li&gt;Age: $age&lt;/li&gt;
            &lt;li&gt;Dogs: $dog1, $dog2&lt;/li&gt;     
        &lt;/ul&gt;
    &lt;/body&gt; 
&lt;/html&gt;
</code></pre>
<hr/>
<pre><code>import xml.etree.ElementTree as et
import re
import shelve
import collections as coll

tree = et.parse('data.html')
html_tag = tree.getroot()

pattern = r"""
    \$    #Match a literal $ sign...
    .+?   #followed by any character, 1 or more times, non-greedy
    \b    #followed by the (first) word boundary
"""

results = coll.defaultdict(list)

for tag in html_tag.iter('*'):
    text = tag.text.strip()

    if text: 
        match_list = re.findall(pattern, text, flags=re.X)
        if match_list:
            results['data.html'].extend(match_list)


print(results)

with shelve.open('mydb.db') as db:
    db['html vars'] = results

with shelve.open('mydb.db') as db:
    for key, val in db['html vars'].items():
        print("{}: {}".format(key, val))

--output:--
defaultdict(&lt;class 'list'&gt;, {'data.html': ['$name', '$age', '$dog1', '$dog2']})

data.html: ['$name', '$age', '$dog1', '$dog2']
</code></pre>
<p>If your ultimate goal is to replace those variables in the html, your format fits python's <code>template</code> format:</p>
<pre><code>import string

with open('data.html') as f:
    template = string.Template(f.read())


values = {
    'name': 'socal_javaguy',
    'age': 25,
    'dog1': 'Rover',
    'dog2': 'Jane',
}

results = template.substitute(values)
print(results)

--output:--
&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;body&gt;
        &lt;ul&gt;
            &lt;li&gt;Name: socal_javaguy&lt;/li&gt;
            &lt;li&gt;Age: 25&lt;/li&gt;
            &lt;li&gt;Dogs: Rover, Jane&lt;/li&gt;     
        &lt;/ul&gt;
    &lt;/body&gt; 
&lt;/html&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Thanks Kevin &amp; 7stud, I got it working like this:</p>
<pre><code>#!/usr/bin/env python 
import re

with open("person.html", "r") as html_file:
    data=html_file.read()   
list_of_strings = re.findall(r'\$[A-Za-z]+[A-Za-z0-9]*', data)
print list_of_strings
</code></pre>
<p>Outputs:</p>
<pre><code>[$name, $age]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What about use RegEx like this:</p>
<pre><code>&gt;&gt;&gt; html = """
... &lt;!DOCTYPE html&gt;
... &lt;html&gt;
...     &lt;body&gt;
...         &lt;ul&gt;
...             &lt;li&gt;Name: $name&lt;/li&gt;
...             &lt;li&gt;Age: $age&lt;/li&gt;
...         &lt;/ul&gt;
...     &lt;/body&gt; 
... &lt;/html&gt;
... """
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r'\$\w*', html)
['$name', '$age']
&gt;&gt;&gt; 
</code></pre>
<p><a href="https://docs.python.org/3/library/re.html#re.findall" rel="nofollow"><code>re.findall()</code></a> return a list so you can use them like this:</p>
<pre><code>&gt;&gt;&gt; l = re.findall(r'\$\w*', html)
&gt;&gt;&gt; l
['$name', '$age']
&gt;&gt;&gt; l[0]
'$name'
&gt;&gt;&gt; l[1]
'$age'
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">Thanks Kevin! However, this is treating the html as a String... Is there a way  (such as a library) to load it as a HTML file and then turn into a String and then use your regex code?</span>
<span class="comment-copy">@socal_javaguy: Well, every file loaded in Python is string hum? So isn't <code>person.html</code> string?</span>
