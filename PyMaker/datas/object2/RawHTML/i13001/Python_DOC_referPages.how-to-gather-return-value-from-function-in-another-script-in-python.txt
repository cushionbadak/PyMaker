<div class="post-text" itemprop="text">
<pre><code> fw_test.py

 def _testmethod_():
     x = []
     y = 0
     while y !=5:
        x.append(y)
        y +=1
        return x

 t = _testmethod_()

 main_test.py

 import subprocess
 p = subprocess.call(['python', 'main_test.py'])
</code></pre>
<p>Due to the guidelines I cannot import <code>fw_test.py</code> into <code>main_test.py</code>. I want to be able to store the value returned by <code>_testmethod_()</code> from <code>fw_test.py</code> in a variable in<code>main_test.py</code>. I learned that with subprocess I can run the <code>fw_test.py, but that is not enough for me.</code>Is there a way to go about this? </p>
<p>Edit: The reason why <code>fw_test.py</code> cannot be imported to <code>main_test.py</code> is that there are many test scripts like <code>fw_test.py</code> which keeps on changing according to test. The <code>main_test.py</code> is supposed to be a generic framework which has basic functions to evaluate the test passed or failed by reading the return value from <code>fw_test.py</code>(the return value is <code>True/False</code>). If I import the script in the top of the file it will not be generic anymore, I think. I'm open to other suggestions.</p>
<p>Why the downvotes?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow">subprocess.check_output</a> to get the output written by another script</p>
<p>the file "b.py" writes its output to stdout </p>
<pre><code>print("hi")
print(1)
</code></pre>
<p>the file "a.py" executes "b.py" as subprocess</p>
<pre><code>import subprocess
a = subprocess.check_output(["python", "/tmp/b.py"])
print(a.decode('utf-8'))
</code></pre>
<p>Note: value returned by check_output is a byte array and should be decoded to convert it to string</p>
<p>Executing "a.py" from command line </p>
<pre><code>$ python a.py
hi
1
</code></pre>
<p><strong>Disclaimer</strong>: This is the simplest solution for the given (for training) problem (not the best). Technically I am printing the output to stdout and capturing it in parent process. To solve the same on a more serious problem mechanism such as IPC, RPC, etc should be used.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you can't use <code>import fw_test</code> statement; you could <a href="https://docs.python.org/3/library/importlib.html#importlib.import_module" rel="nofollow">use <code>importlib.import_module()</code> instead</a>, to get the return value from <code>fw_test.testmethod()</code> function:</p>
<pre><code>import importlib

fw_test = importlib.import_module('fw_test')
value = fw_test.testmethod()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The simplest way is probably to drop the return value into a file, then have your main pick it up.</p>
<pre><code>fw_test.py

def _testmethod_():
    x = []
    y = 0
    while y !=5:
       x.append(y)
       y +=1
       return x

t = _testmethod_()

with open("fileToStoreValue.txt", 'w') as f:
    f.write(t)

main_test.py

import subprocess
p = subprocess.call(['python', 'main_test.py'])
t = eval(open("fileToStoreValue.txt", 'r').read().strip())
</code></pre>
<p>Note that I included <code>strip</code> when reading to prevent you from picking up any trailing new line. </p>
<p>Also keep in mind that this will work as written if both python files are in teh same directory.  If they differ in location, you will need to specify a path to <code>fileToSTtoreValue.txt</code> in the open statements.</p>
</div>
<span class="comment-copy">Why have you named your function with double underscores? Don't do that, it's for Python's internal magic methods.</span>
<span class="comment-copy">Can you be more clear about the guidelines that suggest that you not import <code>fw_test</code> into <code>main_test</code>?</span>
<span class="comment-copy">can you modify <code>main_test.py</code>? e.g., <code>main_test.py</code> could use <code>sys.exit(1)</code> to return <code>False</code> and <code>sys.exit(0)</code> to return <code>True</code> to <code>fw_test.py</code>. Also, you could import the module dynamically using <code>importlib.import_module()</code>.</span>
<span class="comment-copy">related: <a href="http://stackoverflow.com/q/30076185/4279">Call python script with input with in a python script using subprocess</a></span>
<span class="comment-copy">You can always use dynamic imports, see <a href="https://docs.python.org/2/library/importlib.html" rel="nofollow noreferrer">importlib</a>. This is how I have done exactly what you are trying to accomplish; the test script is not known until runtime, the name is loaded from a file, and then imported using <code>importlib</code>.</span>
<span class="comment-copy">You are creating confusion: <i>printing a value</i> is not the same as <i>returning a value from a function</i>. I saw more than once that a complete beginner tries to  use <code>print(x)</code> instead of <code>return x</code> and at best gets <code>AttributeError</code> on <code>None</code>. The answers like yours only make the problem worse.</span>
<span class="comment-copy">I suppose I could use the exit code from the first script. But the the range of exit code is very small. Of-course There are other alternatives of IPC. INMHO such elaborate solutions are not required for this exercise, as this this purely a training exercise and not a production code.</span>
<span class="comment-copy">the issue is not the fact that you use <code>check_output()</code> (it is ok if you can't import the module); the issue is that there is no disclaimer in your answer that <code>print(x)</code> and <code>return x</code> are different things (look at the title of the question)</span>
<span class="comment-copy">Ah..you are right. I'll add the <i>disclaimer</i>.</span>
<span class="comment-copy">it is not what I meant. (1) capturing stdout is already one of IPC method (as any method that allows to pass data between processes would be) (2) you can't expect a person who does not understand the difference between <code>print(x)</code> and <code>return x</code> to know what RPC is. At this point, my comments should be enough.</span>
<span class="comment-copy">Anyone care to explain the downvote?</span>
<span class="comment-copy">don't recommend <code>eval()</code> to newbies. Use <code>json</code>, <code>pickle</code>, etc instead.</span>
