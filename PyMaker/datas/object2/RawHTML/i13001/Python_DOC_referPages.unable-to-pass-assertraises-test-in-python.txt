<div class="post-text" itemprop="text">
<p>So, I have the most trivial in the world example. This is my class to be tested:</p>
<pre><code># My_Class.py
class My_Class(object):    
    @staticmethod     
    def doit(name, params):
        try:
            raise Exception("This is my error message")
        except Exception:
            print("Exception: I raised Exception")
</code></pre>
<p>And this is the tester itself:</p>
<pre><code># test.py
import unittest
from My_Class import My_Class

class Test_MyClass(unittest.TestCase):

    def setUp(self):
        self.my_class = My_Class()   

    def test_my_class(self):
        name = "Abrakadabra"
        params = {}
        self.assertRaises(Exception, self.my_class.doit, name, params)
</code></pre>
<p>And this is what I see in the console, when I'm running my test.py:</p>
<pre><code>$ nosetests test.py
F
======================================================================
FAIL: test_my_class (test.Test_MyClass)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ....
nose.proxy.AssertionError: Exception not raised by doit
-------------------- &gt;&gt; begin captured stdout &lt;&lt; ---------------------
Exception: I raised Exception

--------------------- &gt;&gt; end captured stdout &lt;&lt; ----------------------

----------------------------------------------------------------------
Ran 1 test in 0.001s

FAILED (failures=1)
</code></pre>
<p>It is reaaly iteresting, because it is controversial. On the one hand the test says that "Exception not raised by doit", but one line below it clearly prints out a message from the Exception block. So, what I'm doing wrong here??? Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>To directly answer your question, the reason why you are getting that message is because with this assertion: </p>
<pre><code>self.assertRaises(Exception, self.my_class.doit, name, params)
</code></pre>
<p>You are testing to make sure an exception was raised. But your try/except suppresses this. If you actually remove your try/except your test will in fact pass, because now your method will raise. </p>
<p>Since you do not want to do this, what you should be doing instead is testing the behaviour of your method when an exception is raised. Ultimately, you want to make sure that your <code>print</code> method is called in your except. I have put together an example below to help understand this. </p>
<p>Keeping in mind what @user2357112 mentioned, which is very important to keep in mind when unittesting, here is an example to help expand on that to provide a practical use for what you are trying to do: </p>
<p>Let us just put together some method:</p>
<pre><code>def some_method():
    pass
</code></pre>
<hr/>
<p>We will now put this in to your staticmethod you defined as such:</p>
<pre><code># My_Class.py
class My_Class(object):    
    @staticmethod     
    def doit(name, params):
        try:
            some_method()
        except Exception:
            print("Exception: I raised Exception")
</code></pre>
<p>So now, when it comes to your unittesting, you want to test the <em>behaviour</em> of your method <code>doit</code>. With that in mind, what you will do in this case, is test that <code>some_method</code> will raise an exception and you will validate how your <code>doit</code> method <em>behaves</em> to that exception being raised. </p>
<p>At this point, I suggest taking a look at the documentation behind <a href="https://docs.python.org/3/library/unittest.html" rel="nofollow">unittest</a> and <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow">mock</a> to get more familiar with what you can do with your testing, but here is an example using mock patching to test the behaviour of your code if an exception is being raised: </p>
<pre><code>@patch('builtins.print')
@patch('__main__.some_method')
def test_my_class(self, m_some_method, m_print):
    name = "Abrakadabra"
    params = {}
    # have the side_effect raise the exception when some_method is called in doit
    m_some_method.side_effect = Exception()

    self.my_class.doit(name, params)

    # check to make sure you caught the exception by checking print was called
    self.assertEqual(m_print.call_count, 1)
</code></pre>
<p>When you put it all together, the following is functional code that I ran on my end that you can play around with to understand what is happening: </p>
<pre><code>def some_method():
    pass

# My_Class.py
class My_Class(object):    
    @staticmethod     
    def doit(name, params):
        try:
            some_method()
        except Exception:
            print("Exception: I raised Exception")


# test.py
import unittest
from mock import patch

class Test_MyClass(unittest.TestCase):

    def setUp(self):
        self.my_class = My_Class()

@patch('builtins.print')
@patch('__main__.some_method')
def test_my_class(self, m_some_method, m_print):
    name = "Abrakadabra"
    params = {}
    m_some_method.side_effect = Exception()
    self.my_class.doit(name, params)
    self.assertEqual(m_print.call_count, 1)


if __name__ == '__main__':
    unittest.main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>assertRaises</code> is an assertion about the function's visible behavior, not its internals. It asserts that the stated exception passes <strong>out</strong> of the function. Any exceptions that are handled inside the function are not <code>assertRaises</code>'s concern.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>assertRaises</code> failed since there was actually no exception raised. Well, it was raised but handled with <code>except</code> inside the <code>doit()</code> method. The problem is here:</p>
<pre><code>try:
    raise Exception("This is my error message")
except Exception:
    print("Exception: I raised Exception")
</code></pre>
<p>You are raising an exception and then catching it without re-raising. From a caller (<code>assertRaises</code> is the caller in your case) perspective, no errors were thrown during the function call.  <em>Re-raising an exception allows a caller to handle an exception as well.</em>  Put a <code>raise</code> after the print:</p>
<pre><code>try:
    raise Exception("This is my error message")
except Exception:
    print("Exception: I raised Exception")
    raise  # re-raising
</code></pre>
<p>Also see <a href="https://docs.python.org/2/tutorial/errors.html#handling-exceptions" rel="nofollow">Handling Exceptions</a>.</p>
</div>
<span class="comment-copy">Thanks for this thorough explanation!</span>
<span class="comment-copy">@Jacobian you are welcome. Good luck.</span>
<span class="comment-copy">I still don't see how the <code>assertRaises</code> is going to pass here.  The caller shouldn't ever see the exception since it gets caught in <code>do_it</code> -- and if it did see the exception, your assertEqual for checking the call count would never execute until you moved it <i>out</i> of the context manager's context.</span>
<span class="comment-copy">Also, you've patched <code>some_method</code>, but never actually told it to raise anything so the exception doesn't even seem like it's going to be thrown in this test in the first place.  You could do <code>m_some_method.side_effect = Exception('Boom!')</code> in <code>test_my_class</code> to get the exception to actually raise...</span>
<span class="comment-copy">@mgilson Really appreciate the review on the answer. Thank you. I went back to test and you're absolutely right. I think this should be good now.</span>
<span class="comment-copy">And what for to raise it twice?? Should my production code contain double raises?</span>
<span class="comment-copy">"since there was actually no exception raised". How can it be, if we see a message from <code>except</code> block?</span>
<span class="comment-copy">@Jacobian the exception is handled by you and is not passed over to the caller. Re-raising the last thrown exception allows a caller to handle the exception as well.</span>
<span class="comment-copy">@alecxe You are right. I did not directly answer the question. I updated my answer to answer this more directly while showing an example.</span>
<span class="comment-copy">@idjaw okay, thanks, looks much better now!</span>
