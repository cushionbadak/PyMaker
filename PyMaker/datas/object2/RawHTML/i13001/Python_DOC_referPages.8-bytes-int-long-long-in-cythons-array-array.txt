<div class="post-text" itemprop="text">
<p>I have this code:</p>
<pre><code>from cpython cimport array
...
a = array.array("l")
array.resize_smart(a, 10)
...
# String here - some string which i want to parse into long
a[0] = long(string)
</code></pre>
<p>which creates array from long int, and everything ok when i compile this code in my linux environment, Cython translates this l type into <code>long int</code>, but in some windows compilers this <code>long int</code> is a 4-bytes long.</p>
<p>I want to create an array from 8-byte int (long long), but i don't know what is code for long long in Cython? I.e. what should i place instead of <code>"l"</code> at that line?</p>
<p>And 2nd question: I used long(string) in Cython code before, to parse long from string, but what should i use now to get long long numbers from string?</p>
<p><strong>Updated</strong>: According to this <a href="https://docs.python.org/3/library/array.html" rel="nofollow">https://docs.python.org/3/library/array.html</a> it's <code>'q'</code>, but seems that this solution will work only in 3.x</p>
<p><strong>Updated</strong>: After @DavidW suggestion i rewrote that code to this:</p>
<pre><code>cimport numpy as np
import numpy as np
np.import_array()
...
cdef np.ndarray[np.int64_t] a = np.arange(0, dtype=np.int64)
a = np.resize(a, len(a) + 1)
...
a[0] = np.int64(string)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're able to use numpy you can specify 64 bit integers quite easily.</p>
<pre><code> a = np.zeros(shape,dtype='i8')
</code></pre>
<p>or equivalently</p>
<pre><code> a = np.zeros(shape,dtype=np.int64)
</code></pre>
<p>(you can substitute a wide variety of array creation functions for <code>zeros</code>).</p>
<p>To convert to a 64 bit int from a string you can just do</p>
<pre><code>np.int64(string)
</code></pre>
<p>I don't know of a good general solution if you want to only use the standard library.</p>
<p>Note that nothing in this answer is actually Cython specific - it will work as just as well with pure Python.</p>
</div>
<span class="comment-copy">Can you use a numpy array instead? That lets you use <code>'i8'</code> - i.e. specify an 8 byte integer.</span>
<span class="comment-copy">Similarly you can call <code>np.int64(string)</code></span>
<span class="comment-copy">@DavidW, Post this as answer, i'll accept it. It works, and seems that it's the only possible way to achieve 64 bit ints.  Also, maybe stupid question, I'm not very familiar with Cython: a = np.resize(a, len(a) + 1) will place a reference to a new array into a, do i need to free memory of old array?</span>
<span class="comment-copy">No - if you're just using Python objects (which you are here) you don't need to free anything. A couple of quick bits of advice: 1) using <code>a.resize</code> instead of <code>np.resize(a)</code> will often be able to do it in place and 2) it's often faster to make your arrays too big and shrinking it at the end (a common approach is to double the array size every time you need to resize)</span>
<span class="comment-copy">Hmm, i tried to do a.resize at first, but it throws this &gt;ValueError: cannot resize an array that references or is referenced by another array in this way.  Use the resize function</span>
