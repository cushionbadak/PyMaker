<div class="post-text" itemprop="text">
<p>I am using Spark 1.3 and would like to join on multiple columns using python interface (SparkSQL)</p>
<p>The following works:</p>
<p>I first register them as temp tables.</p>
<pre><code>numeric.registerTempTable("numeric")
Ref.registerTempTable("Ref")

test  = numeric.join(Ref, numeric.ID == Ref.ID, joinType='inner')
</code></pre>
<p>I would now like to join them based on multiple columns.</p>
<p>I get <code>SyntaxError</code>: invalid syntax with this:</p>
<pre><code>test  = numeric.join(Ref,
   numeric.ID == Ref.ID AND numeric.TYPE == Ref.TYPE AND
   numeric.STATUS == Ref.STATUS ,  joinType='inner')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should use <code>&amp;</code> / <code>|</code> operators and be careful about <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="noreferrer">operator precedence</a> (<code>==</code> has lower precedence than bitwise <code>AND</code> and <code>OR</code>):</p>
<pre><code>df1 = sqlContext.createDataFrame(
    [(1, "a", 2.0), (2, "b", 3.0), (3, "c", 3.0)],
    ("x1", "x2", "x3"))

df2 = sqlContext.createDataFrame(
    [(1, "f", -1.0), (2, "b", 0.0)], ("x1", "x2", "x3"))

df = df1.join(df2, (df1.x1 == df2.x1) &amp; (df1.x2 == df2.x2))
df.show()

## +---+---+---+---+---+---+
## | x1| x2| x3| x1| x2| x3|
## +---+---+---+---+---+---+
## |  2|  b|3.0|  2|  b|0.0|
## +---+---+---+---+---+---+
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>An alternative approach would be:</p>
<pre><code>df1 = sqlContext.createDataFrame(
    [(1, "a", 2.0), (2, "b", 3.0), (3, "c", 3.0)],
    ("x1", "x2", "x3"))

df2 = sqlContext.createDataFrame(
    [(1, "f", -1.0), (2, "b", 0.0)], ("x1", "x2", "x4"))

df = df1.join(df2, ['x1','x2'])
df.show()
</code></pre>
<p>which outputs:</p>
<pre><code>+---+---+---+---+
| x1| x2| x3| x4|
+---+---+---+---+
|  2|  b|3.0|0.0|
+---+---+---+---+
</code></pre>
<p>With the main advantage being that the columns on which the tables are joined are <strong>not duplicated in the output</strong>, reducing the risk of encountering errors such as <code>org.apache.spark.sql.AnalysisException: Reference 'x1' is ambiguous, could be: x1#50L, x1#57L.</code></p>
<hr/>
<p>Whenever the columns in the two tables have <strong>different names</strong>, (let's say in the example above, <code>df2</code> has the columns <code>y1</code>, <code>y2</code> and <code>y4</code>), you could use the following syntax:</p>
<pre><code>df = df1.join(df2.withColumnRenamed('y1','x1').withColumnRenamed('y2','x2'), ['x1','x2'])
</code></pre>
</div>
<span class="comment-copy">When you say  'be careful about operator precedence', what do you mean? Do you mean I should put parentheses in the right place to AND the correct tables together?</span>
