<div class="post-text" itemprop="text">
<p>I have this list of lists:</p>
<p><code>mylist=[[1, 2, 4, 8], [16, 32, 64, 128], [256, 512, 1024, 2048]]</code></p>
<p>Now I want to create a dictionary that assigns each key the value of the corresponding index in the list.</p>
<p>In this case: <code>correct_dict={0:1,1:2,2:4,3:8,4:16,...,11:2048}</code>.</p>
<p>I intend to do it with the following function:</p>
<pre><code>def dictionarize3(array):
                dict3={}
                count_var=0
                for i in range(len(array[0]) - 1) :
                    for j in range(len(array[0]) - 1):
                        dict3[count_var]=array[i][j]
                        count_var=count_var+1
                return dict3

dict=dictionarize3(mylist)
</code></pre>
<p>But this is what I get:
<code>wrong_dict={0: 1, 1: 2, 2: 4, 3: 16, 4: 32, 5: 64, 6: 256, 7: 512, 8: 1024}</code>.</p>
<p>So, <code>len(correct_dict)=12</code>, while <code>len(wrong_dict)=9</code>.</p>
<p><strong>Question:</strong> What makes me miss all the values that in the list are located in the third column?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a corrected version of the function dictionarize3:</p>
<pre><code>def dictionarize3(array):
    dict3={}
    count_var=0
    for i in range(len(array)) :
        for j in range(len(array[i])):
            dict3[count_var]=array[i][j]
            count_var=count_var+1
    return dict3
</code></pre>
<p>You weren't referencing the correct parts. When trying to find the length of the whole array you were finding the length of one of he inside arrays, just a logic error.</p>
<p><em>EDIT</em> As pointed out by decltype_auto, it is not at all idiomatic to have an additional iterative variable which carries out the same function as one already declared in a for loop. I was answering so quickly that I didn't spot it! Has alternative and more efficient code:</p>
<pre><code>def dictionarize3(array):
dict3={}
for i in range(len(array)) :
    for j in range(len(array[i])):
        dict3[j]=array[i][j]
return dict3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That's a job for <a href="https://docs.python.org/3.4/library/itertools.html#itertools.chain" rel="nofollow"><strong>itertools.chain</strong></a></p>
<pre><code>from itertools import chain

mylist=[[1, 2, 4, 8], [16, 32, 64, 128], [256, 512, 1024, 2048]]

mydict = {i:v for i,v in enumerate(chain(*mylist))}

print(mydict)
</code></pre>
<p>output:</p>
<pre><code>{0: 1, 1: 2, 2: 4, 3: 8, 4: 16, 5: 32, 6: 64, 7: 128, 8: 256, 9: 512, 10: 1024, 11: 2048}
</code></pre>
<blockquote>
<p><strong>Question</strong>: What makes me miss all the values that in the list are
  located in the third column?</p>
</blockquote>
<pre><code>range(len(array[0]) - 1)
</code></pre>
<p>is a range that ends 1 before its argument; thus in your case one before 4 - 1 = 3 , thus at index 2, which skips the last elements with inner index 3.   </p>
<p><strong>EDIT</strong>
And that the outer loop </p>
<pre><code>for i in range(len(array[0]) - 1) :
</code></pre>
<p>appeared to work is just coincidence, because the outer list <em>has</em> length 3.
what you needed is this:</p>
<pre><code>for i in range(len(array)):
</code></pre>
<p>Your "i" is for the whole outer array, not for its first inner element! :) </p>
</div>
<div class="post-text" itemprop="text">
<p>in your case</p>
<blockquote>
<p>len(array[0]) = 4</p>
</blockquote>
<p>after</p>
<blockquote>
<p>len(array[0]) - 1 = 3</p>
<p>range(3) = [0, 1, 2]</p>
</blockquote>
<p>and you work only with part of list [<strong>1, 2, 4</strong>, 8]</p>
<p>Read about <a href="https://docs.python.org/3/library/stdtypes.html#range" rel="nofollow">range</a></p>
</div>
<div class="post-text" itemprop="text">
<p>A <code>dict</code> seems very inappropriate here. A simple flat list would give you the same practical result:</p>
<pre><code>[1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048]
</code></pre>
<p>Here <code>lst[0]</code> is <code>1</code> and <code>lst[11]</code> is <code>2048</code>.</p>
<p>You can flatten the list like so:</p>
<pre><code>lst = []
for l in mylist:
   lst.extend(l)
</code></pre>
<p>or:</p>
<pre><code>from itertools import chain
lst = chain(*mylist)  # list(chain(*mylist)) if you don't want an iterator
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If each list have the same length you can do it like this:</p>
<pre><code>d = dict((i1*4+i2, x) for i1, y in enumerate(mylist) for i2, x in enumerate(y))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; mylist=[[1, 2, 4, 8], [16, 32, 64, 128], [256, 512, 1024, 2048]]
&gt;&gt;&gt; l = []
&gt;&gt;&gt; for i in mylist:
        l.extend(i)
&gt;&gt;&gt; dict(zip(range(len(l)), l))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Easy task for dict comprehension and functional programming style:</p>
<pre><code>&gt;&gt;&gt; mylist=[[1, 2, 4, 8], [16, 32, 64, 128], [256, 512, 1024, 2048]]
&gt;&gt;&gt; correct_dict = {k:v for k, v in enumerate(reduce(lambda x,y: x+y, mylist))}
&gt;&gt;&gt; correct_dict
{0: 1, 1: 2, 2: 4, 3: 8, 4: 16, 5: 32, 6: 64, 7: 128, 8: 256, 9: 512, 10: 1024, 11: 2048}
</code></pre>
<p>Explaining, you take the list, reduce it to a single list with all the values, enumerate it with the corresponding indexes and make a dict comprehension taking the index as key and the list number as values.</p>
</div>
<span class="comment-copy"><code>range(len(array[0]) - 1))</code> =&gt; <code>range(3)</code> which is -&gt; <code>[0,1,2]</code>. So you are missing the last element</span>
<span class="comment-copy">Yes but if I get rid of the <code>-1</code> I get an out of index error.</span>
<span class="comment-copy">Why a <code>dict</code> at all? If you simply <i>flatten</i> the list, you get a list with the exact same indices and values. E.g. <code>itertools.chain(*mylist)</code>.</span>
<span class="comment-copy">In the future, think to dict comprehension: <code>{i: v for lst in mylist for i, v in enumerate(lst)}</code>.</span>
<span class="comment-copy">@FrancescoCastellani: This <a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html" rel="nofollow noreferrer"><b>Code like a Pythonista</b></a> is a good read.</span>
<span class="comment-copy">This works. Why does <code>j</code> need to reach a higher index than <code>i</code>? Why can't I just have <code>len(array[0])</code> for both? I tried it and I got an out of index error. But why?</span>
<span class="comment-copy">Is it because my list of list is like a 3x4 matrix? So, the two lenghts are different? Is it this?</span>
<span class="comment-copy">Why did you indent <code>return dict3</code> further? Shouldn't it be in line with the first <code>for</code>?</span>
<span class="comment-copy">@FrancescoCastellani my bad, fixing that now.</span>
<span class="comment-copy">@R.Murray OK, you answered the question - no doubt about that. But may I propose that you add my alternative code to your answer? This <code>for i .. for j</code>  with an additional counter in the question is plainly not idiomatic.</span>
<span class="comment-copy">Can not work with Pyhon3 because of <code>reduce</code>.</span>
<span class="comment-copy">use <code>functools.reduce</code> instead</span>
