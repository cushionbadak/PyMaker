<div class="post-text" itemprop="text">
<p>I have the below Python code</p>
<pre><code>from flask import Flask, jsonify, json

app = Flask(__name__)

with open('C:/test.json', encoding="latin-1") as f:
    dataset = json.loads(f.read())

@app.route('/api/PDL/&lt;string:dataset_identifier&gt;', methods=['GET'])
def get_task(dataset_identifier):
    global dataset
    dataset = [dataset for dataset in dataset if dataset['identifier'] == dataset_identifier]
    if len(task) == 0:
        abort(404)
    return jsonify({'dataset': dataset})

if __name__ == '__main__':
    app.run(debug=True)
</code></pre>
<p>Test.json looks like this:</p>
<pre><code> {
    "dataset":  [{
                        "bureauCode":  [
                                           "016:00"
                                       ],
                        "description":  "XYZ",
                        "contactPoint":  {
                                             "fn":  "AG",
                                             "hasEmail":  "mailto:AG@AG.com"
                                         },
                        "distribution":  [
                                             {
                                                 "format":  "XLS",
                                                 "mediaType":  "application/vnd.ms-excel",
                                                 "downloadURL":  "https://www.example.com/xyz.xls"
                                             }
                                         ],
                        "programCode":  [
                                            "000:000"
                                        ],
                        "keyword":  [                                   "return to work",
                                    ],
                        "modified":  "2015-10-14",
                        "title":  "September 2015",
                        "publisher":  {
                                          "name":  "abc"
                                      },
                        "identifier":  US-XYZ-ABC-36,
                        "rights":  null,
                        "temporal":  null,
                        "describedBy":  null,
                        "accessLevel":  "public",
                        "spatial":  null,
                        "license":  "http://creativecommons.org/publicdomain/zero/1.0/",
                        "references":  [
                                           "http://www.example.com/example.html"
                                       ]
                    }
                ],
    "conformsTo":  "https://example.com"
}
</code></pre>
<p>When I pass the variable in the URL like this: <code>http://127.0.0.1:5000/api/PDL/1403</code> 
I get the following error: <code>TypeError: string indices must be integers</code></p>
<p>Knowing that the "identifier" field is a string and I am passing the following in the URL: </p>
<pre><code>http://127.0.0.1:5000/api/PDL/"US-XYZ-ABC-36"
http://127.0.0.1:5000/api/PDL/US-XYZ-ABC-36
</code></pre>
<p>I keep getting the following error:</p>
<pre><code>TypeError: string indices must be integers
</code></pre>
<p>Any idea on what am I missing here? I am new to Python! </p>
</div>
<div class="post-text" itemprop="text">
<p>The problem you have right now is that during iteration in the list comprehension, the very first iteration changes the name <code>dataset</code> from meaning the <code>dict</code> you <code>json.loads</code>-ed to a key of that <code>dict</code> (<code>dict</code>s iterate their keys). So when you try to look up a value in <code>dataset</code> with <code>dataset['identifier']</code>, <code>dataset</code> isn't the <code>dict</code> anymore, it's the <code>str</code> key of you're currently iterating.</p>
<p>Stop reusing the same name to mean different things.</p>
<p>From the JSON you posted, what you probably want is something like:</p>
<pre><code>with open('C:/test.json', encoding="latin-1") as f:
    alldata = json.loads(f.read())

@app.route('/api/PDL/&lt;string:dataset_identifier&gt;', methods=['GET'])
def get_task(dataset_identifier):
    # Gets the list of data objects from top level object
    # Could be inlined into list comprehension, replacing dataset with alldata['dataset']
    dataset = alldata['dataset']
    # data is a single object in that list, which should have an identifier key
    # data_for_id is the list of objects passing the filter
    data_for_id = [data for data in dataset if data['identifier'] == dataset_identifier]
    if len(task) == 0:
        abort(404)
    return jsonify({'dataset': data_for_id})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that you are trying to iterate the dictionary instead of the list of datasources inside it. As a consequence, you're iterating through the keys of the dictionary, which are strings. Additionaly, as it was mentioned by above, you will have problems if you use the same name for the list and the iterator variable.</p>
<p>This worked for me:</p>
<pre><code>[ds for ds in dataset['dataset'] if ds['identifier'] == dataset_identifier]
</code></pre>
</div>
<span class="comment-copy">dont use the same variable name as your iterator and your list in your list comprehension</span>
<span class="comment-copy">Not only has OP used the name twice inside the list comp, but he's also assigned the result to the same name.</span>
<span class="comment-copy">@DanielRoseman: And in Py2, this would also slow stuff down a lot, because list comps share scope (so all uses of <code>dataset</code> would share the global, including reassigning a global over and over), making it slow, not just confusing. At least in Py3, list comps (like generator expressions and set/dict comps) have closure scope that would protect them from that particular inefficiency.</span>
<span class="comment-copy">@RNar could you please clarify ?</span>
<span class="comment-copy">@ghadiehag: You named everything <code>dataset</code>; that's confusing at best, and can lead to incorrect behavior at worst, since <code>dataset</code>, despite the name, refers to (at various points) the <code>dict</code> produced by the <code>json.loads</code>, the <code>list</code> of keys from said <code>dict</code> produced by the list comprehension, and the keys themselves during iteration in the list comprehension.</span>
<span class="comment-copy">Note: I didn't use the <code>global</code> keyword, because reading from a name without writing to it naturally reads from global variables if the name is not in local scope. And if we had used <code>global</code> like you did, and rewrote <code>dataset</code>, the route could fail after the first use, because the first use would rewrite the global to a completely different type.</span>
<span class="comment-copy">Thanks! This works with all my JSON data. I have data in CSV which I also need to display in CSV. Any input on that ?</span>
<span class="comment-copy">@aghad: Use the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><code>csv</code> module</a>. Don't try to parse/produce CSV by hand.</span>
<span class="comment-copy">this will also help me pass parameters in the URL?</span>
<span class="comment-copy">Well, you'd need to preprocess the CSV to make some sort of data structure(s) appropriate to performing efficient lookup. You generally don't pass CSV as a URL parameter (passing lots of data as a URL parameter is problematic due to URL length limits), but producing it for return would be fine.</span>
