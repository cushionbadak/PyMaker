<div class="post-text" itemprop="text">
<h1>Question</h1>
<p>I want to remove items from a list such that I keep the first n items, and remove the next 2n items. </p>
<h1>For example</h1>
<blockquote>
<p>for n=8, I want to keep the first 8, remove the next 16 and repeat this as necessary:</p>
<p>a = range(48)</p>
<p>Which I want to become</p>
<p>[0,1,2,3,4,5,6,7,24,25,26,27,28,29,30,31]</p>
</blockquote>
<p>This is to pick out the first 8 hours of a day, and run a function on each hour.</p>
<p>I've found it hard to phrase this in search queries so the answer is probably simple but I've had no luck!</p>
</div>
<div class="post-text" itemprop="text">
<p>You could just use a comprehension list:</p>
<pre><code>[ a[i] for i in range(len(a)) if (i % 24 &lt; 8) ]
</code></pre>
<p>The above only create a new list. If you want to edit the list in place, you must explicitely delete unwanted elements, starting from the end to avoid changing indexes:</p>
<pre><code>for i in range(len(a) - 1, 0, -1):
    if i % 24 &gt;= 8:
        del a[i]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>     def hours(n):
             items = [x for x in range(49)]
             del items[n:n*3]
     print(items)
</code></pre>
<p><code>hours(8)</code></p>
<p>Depending on how new you are you might have a hard time understanding this code, so I will try to explain a little:</p>
<p>We start by creating a function which takes a parameter <code>n</code> which, for test purposes, we will be using <code>8</code> then we use a <a href="https://docs.python.org/2/tutorial/datastructures.html?highlight=list%20comprehension#list-comprehensions" rel="nofollow">list comprehension</a> to generate all our numbers (0, 48) and then delete the unneeded elements using <a href="https://docs.python.org/3/tutorial/datastructures.html?highlight=del#the-del-statement" rel="nofollow">the del statement</a>, we are deleting from the <code>n</code>th to the <code>n*3</code> element in the list. For example, if <code>n</code> were to be passed as 9 our use of the <code>del</code> statement could be translated as: <code>del [9:27]</code>.</p>
<p>Hope this makes sense.</p>
</div>
<div class="post-text" itemprop="text">
<p>This should be quite easy to understand</p>
<pre><code>a = range(48)
n=8
result=[]
while a:
    result+= a[:n]
    a=a[n*3:]

print result 
</code></pre>
</div>
<span class="comment-copy">Thanks, but it doesn't seem to work. The list 'a' is the same before and after this line of code.</span>
<span class="comment-copy">@RichardHall: See my edit</span>
<span class="comment-copy">What if n =100?</span>
<span class="comment-copy">@Ahsanul Haque Could you please elaborate a little more? I don't see how that's likely when we only generate numbers from 0 to 48.</span>
<span class="comment-copy">For this, 48 was an example. n is a series of hours, and I want to perform a function that operates only on a certain series of hours. In reality I'll have a list of 10 years expressed as hours (!), and I want to perform the function on the 'night hours' i.e. 8 on, 16 off.</span>
<span class="comment-copy">for <code>range(100)</code> run your code. You should get 36 element, whereas yours one will produce 84 element. In short, you need a loop. And you can avoid that list comprehension, rather do, <code>list(range(48))</code></span>
