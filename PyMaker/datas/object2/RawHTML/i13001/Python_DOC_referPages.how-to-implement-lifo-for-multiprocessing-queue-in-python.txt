<div class="post-text" itemprop="text">
<p>I understand the difference between a queue and stack. But if I spawn multiple processes and send messages between them put in <code>multiprocessing.Queue</code> how do I access the latest element put in the queue first?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing-managers" rel="nofollow">multiprocessing manager</a> to wrap a <a href="https://docs.python.org/3/library/queue.html#queue.LifoQueue" rel="nofollow"><code>queue.LifoQueue</code></a> to do what you want.</p>
<pre><code>from multiprocessing import Process
from multiprocessing.managers import BaseManager
from time import sleep
from queue import LifoQueue


def run(lifo):
    """Wait for three messages and print them out"""
    num_msgs = 0
    while num_msgs &lt; 3:
        # get next message or wait until one is available
        s = lifo.get()
        print(s)
        num_msgs += 1


# create manager that knows how to create and manage LifoQueues
class MyManager(BaseManager):
    pass
MyManager.register('LifoQueue', LifoQueue)


if __name__ == "__main__":

    manager = MyManager()
    manager.start()
    lifo = manager.LifoQueue()
    lifo.put("first")
    lifo.put("second")

    # expected order is "second", "first", "third"
    p = Process(target=run, args=[lifo])
    p.start()

    # wait for lifoqueue to be emptied
    sleep(0.25)
    lifo.put("third")

    p.join()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>multiprocessing.Queue</code> is not a data type. It is a mean to communicate between two processes. It is not comparable to <code>Stack</code></p>
<p>That's why there is no API to pop the last item off the queue.</p>
<p>I think what you have in mind is to make some messages to have a higher priority than others. When they are sent to the listening process, you want to dequeue them as soon as possible, bypassing existing messages in the queue.</p>
<p>You can actually achieve this effect by creating two <code>multiprocessing.Queue</code>: One for normal data payload and another for priority message. Then you do not need to worry about <code>getting the last item</code>. Simply segregate two different type of messages into two queues.</p>
</div>
