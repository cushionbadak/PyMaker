<div class="post-text" itemprop="text">
<p>I have a text file that stores data in the following format:</p>
<pre class="lang-Python prettyprint-override"><code>Mike 6 4 3
Terry 4 3 4
Paul 10 7 8
</code></pre>
<p><a href="https://stackoverflow.com/questions/33746400/organising-and-sorting-data-from-a-text-file">jvecsei</a> helped me yesterday with some code to retrieve the data and identify the highest score for each person. I've modified it slightly so that it now selects the scores and prints an average for each person.</p>
<pre class="lang-Python prettyprint-override"><code>with open ("classa.txt") as f:
    content = f.read().splitlines()
    for line in content:
        splitline = line.split(" ")
        name = splitline[0]
        score = splitline[1:]
        total = int(splitline[-1]) + int(splitline[-2]) + int(splitline[-3])
        average = int(total/3)
        print("{} : {}".format (name, average))
</code></pre>
<p>It outputs like this, which is great:</p>
<pre class="lang-Python prettyprint-override"><code>Mike : 4
Terry : 3
Paul : 8
</code></pre>
<p>Question: <strong>I'd really like it to sort the three people into order of highest score so that they appear with the highest scoring person at the top and the lowest scoring at the bottom</strong>, like this:</p>
<pre class="lang-Python prettyprint-override"><code>Paul : 8
Mike : 4
Terry : 3
</code></pre>
<p>I have used this in the past to retrieve from a text file and sort into order alphabetically but since the average is a new variable and isn't stored in the text file with the original numbers, I don't know how to reference/implement it.</p>
<pre class="lang-Python prettyprint-override"><code>with open('classc.txt', 'r') as r:
    for line in sorted(r):
        print(line, end='')
</code></pre>
<p>Thanks very much for your help. I'm slowly becomeing more familiar with this stuff but I have a long way to go yet.</p>
</div>
<div class="post-text" itemprop="text">
<p>Store your <code>Name : Average</code> output into a dictionary and then use the <a href="https://docs.python.org/2/library/operator.html#operator.itemgetter" rel="nofollow"><code>operator.itemgetter</code></a> to sort your dictionary</p>
<pre><code>d = {}
with open ("file.txt") as f:
    content = f.read().splitlines()
    for line in content:
        splitline = line.split(" ")
        name = splitline[0]
        score = splitline[1:]
        total = int(splitline[-1]) + int(splitline[-2]) + int(splitline[-3])
        average = int(total/3)
        print("{} : {}".format (name, average))
        d[name] = average

sorted_d = sorted(d.items(), key=operator.itemgetter(1), reverse= True)

for i in sorted_d:
    print '{} : {}'.format(*i)
</code></pre>
<p>Output:</p>
<pre><code>Paul : 8
Mike : 4
Terry : 3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I took this problem to illustrate some of the nice new features in Python 3.5. You can use the <a href="https://docs.python.org/3/library/statistics.html" rel="nofollow">new statistics module</a> and <a href="https://www.google.de/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;es_th=1&amp;ie=UTF-8#q=generalized%20unpacking&amp;es_th=1" rel="nofollow">generalized unpacking</a> to solve this in a very pythonic way:</p>
<pre><code>&gt;&gt;&gt; from statistics import mean # Cool new module!

&gt;&gt;&gt; lines =(l.split() for l in open ("classa.txt")) #  Generator consuming the file
# Now split the list by unpacking into name, *scores
&gt;&gt;&gt; persons = ((mean(int(x) for x in scores), name) for name, *scores in lines)
&gt;&gt;&gt; for score in sorted(persons,  reverse=True): #  Some boring I/O
       print("{} : {}".format (score[1], int(score[0])))
&gt;&gt;&gt;
Paul : 8
Mike : 4
Terry : 3 #  Terry really needs to step up his game
</code></pre>
<p>The following is more traditional python code:</p>
<pre><code>&gt;&gt;&gt; def mean(x):
       return sum(x)/len(x)
&gt;&gt;&gt; lines =(l.split() for l in open ("classa.txt"))
&gt;&gt;&gt; persons = ((mean([int(x) for x in l[1:]]), l[0]) for l in lines)
&gt;&gt;&gt; for score in sorted(persons, reverse=True):
       print("{} : {}".format (score[1], int(score[0])))
&gt;&gt;&gt; 
Paul : 8
Mike : 4
Terry : 3
</code></pre>
</div>
<span class="comment-copy">Check this link <a href="http://stackoverflow.com/questions/9001509/how-can-i-sort-a-dictionary-by-key" title="how can i sort a dictionary by key">stackoverflow.com/questions/9001509/…</a> . Although, a dictionary doesn't accept duplicates so if the score is unique you can use a ordered dictionary. Remember also that the dictionary data structure does not have inherent order. Also, take a look of this link <a href="http://stackoverflow.com/questions/613183/sort-a-python-dictionary-by-value" title="sort a python dictionary by value">stackoverflow.com/questions/613183/…</a> because you could print the dictionary "sorted" by value (in case you have multiple scores with the same value)</span>
<span class="comment-copy">That's an interesting link. I hadn't seen that before but chances are, it won't be unique i'm afraid so i'm not sure it will work in this scenario. This is only a sample of the data and there would be instances of a user with scores such as 5 5 5 which may end up causing a problem. Edit: Your second link is pretty helpful too. I'm going to give a proper look into this in the morning when i'm more awake. Thanks</span>
<span class="comment-copy">Try my solution, there is a 2.7 compatible one now.</span>
<span class="comment-copy">With this way of doing it, would I need to have the new 'average' variable written to the file so that I can read it into the dictionary? would name = key and average = val? I'm just thinking, or rather, you've given me an idea, that I could write the new data to a temp text file and then split the data into name/average and sort on the -1 column. What do you think? EDIT: Just seen your edit. That looks good. I'll give it a try and let you know how it goes. Thanks very much.</span>
<span class="comment-copy">Unfortunately, I'm a little restricted to 3.3.4 at work at the moment although I'm going to try this out at home and see how it goes.</span>
<span class="comment-copy">The traditional Python method looks a little more possible for me. I'll give it a try and report back. Thank you.</span>
<span class="comment-copy">You're a star! p.s. Terry is a big strapping bloke but he definitely need to try harder. I don't know how Paul ended up with the highest average, he's always drunk :-)</span>
<span class="comment-copy">I'm getting the error: TypeError: mean() missing 1 required positional argument.</span>
<span class="comment-copy">I know it's not the most efficient way to do it but I put the contents of the text file in a new temp.txt file so the data is currently averaged and formatted but not sorted. It looks like this: Dave 6 Is there a way to simply sort them now based on the value of the second column using the split function?</span>
