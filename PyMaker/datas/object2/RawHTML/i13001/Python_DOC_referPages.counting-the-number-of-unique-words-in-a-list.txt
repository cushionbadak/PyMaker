<div class="post-text" itemprop="text">
<p>Using the following code from <a href="https://stackoverflow.com/a/11899925">https://stackoverflow.com/a/11899925</a>, I am able to find if a word is unique or not (by comparing if it was used once or greater than once):</p>
<pre><code>helloString = ['hello', 'world', 'world']
count = {}
for word in helloString :
   if word in count :
      count[word] += 1
   else:
      count[word] = 1
</code></pre>
<p>But, if I were to have a string with hundreds of words, how would I be able to count the number of unique words within that string?</p>
<p>For example, my code has:</p>
<pre><code>uniqueWordCount = 0
helloString = ['hello', 'world', 'world', 'how', 'are', 'you', 'doing', 'today']
count = {}
for word in words :
   if word in count :
      count[word] += 1
   else:
      count[word] = 1
</code></pre>
<p>How would I be able to set <code>uniqueWordCount</code> to <code>6</code>? Usually, I am really good at solving these types of algorithmic puzzles, but I have been unsuccessful with figuring this one out. I feel as if it is right beneath my nose.</p>
</div>
<div class="post-text" itemprop="text">
<p>The best way to solve this is to use the <code>set</code> collection type. A <code>set</code> is a collection in which all elements are unique. Therefore:</p>
<pre><code>unique = set([ 'one', 'two', 'two']) 
len(unique) # is 2
</code></pre>
<p>You can use a set from the outset, adding words to it as you go:</p>
<pre><code>unique.add('three')
</code></pre>
<p>This will throw out any duplicates as they are added. Or, you can collect all the elements in a list and pass the list to the <code>set()</code> function, which will remove the duplicates at that time. The example I provided above shows this pattern:</p>
<pre><code>unique = set([ 'one', 'two', 'two'])
unique.add('three')

# unique now contains {'one', 'two', 'three'}
</code></pre>
<p><a href="https://docs.python.org/3.5/library/stdtypes.html?highlight=set#set-types-set-frozenset" rel="noreferrer">Read more about sets in Python.</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You have many options for this, I recommend a set, but you can also use a counter, which counts the amount a number shows up, or you can look at the number of keys for the dictionary you made.</p>
<hr/>
<h1>Set</h1>
<p>You can also convert the list to a set, where all elements have to be unique. Not unique elements are discarded:</p>
<pre><code>helloString = ['hello', 'world', 'world', 'how', 'are', 'you', 'doing', 'today']
helloSet = set(helloString) #=&gt; ['doing', 'how', 'are', 'world', 'you', 'hello', 'today']
uniqueWordCount = len(set(helloString)) #=&gt; 7
</code></pre>
<p>Here's a link to further reading on <a href="https://docs.python.org/3/library/stdtypes.html#set" rel="nofollow">sets</a></p>
<h1>Counter</h1>
<p>You can also use a counter, which can also tell you how often a word was used, if you still need that information.</p>
<pre><code>from collections import Counter

helloString = ['hello', 'world', 'world', 'how', 'are', 'you', 'doing', 'today']
counter = Counter(helloString)
len(counter) #=&gt; 7
counter["world"] #=&gt; 2
</code></pre>
<h1>Loop</h1>
<p>At the end for your loop, you can check the <code>len</code> of <code>count</code>, also, you mistyped <code>helloString</code> as <code>words</code>:</p>
<pre><code>uniqueWordCount = 0
helloString = ['hello', 'world', 'world', 'how', 'are', 'you', 'doing', 'today']
count = {}
for word in helloString:
   if word in count :
      count[word] += 1
   else:
      count[word] = 1
len(count) #=&gt; 7
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>collections.Counter</code></p>
<pre><code>helloString = ['hello', 'world', 'world']

from collections import Counter

c = Counter(helloString)

print("There are {} unique words".format(len(c)))
print('They are')

for k, v in c.items():
    print(k)
</code></pre>
<p>I know the question doesn't specifically ask for this, but to maintain order</p>
<pre><code>helloString = ['hello', 'world', 'world', 'how', 'are', 'you', 'doing', 'today']

from collections import Counter, OrderedDict

class OrderedCounter(Counter, OrderedDict):
    pass

c = OrderedCounter(helloString)

print("There are {} unique words".format(len(c)))
print('They are')

for k, v in c.items():
    print(k)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In your current code you can either increment <code>uniqueWordCount</code> in the <code>else</code> case where you already set <code>count[word]</code>, or just lookup the number of keys in the dictionary: <a href="https://docs.python.org/3/library/functions.html#len" rel="nofollow"><code>len(count)</code></a>.</p>
<p>If you only want to know the number of unique elements, then get the elements in the <code>set</code>: <a href="https://docs.python.org/3/library/functions.html#func-set" rel="nofollow"><code>len(set(helloString))</code></a></p>
</div>
<div class="post-text" itemprop="text">
<p>I may be misreading the question but I believe the goal is to find all elements which only occur one time in the list.</p>
<pre><code>from collections import Counter
helloString = ['hello', 'world', 'world', 'how', 'are', 'you', 'doing', 'today']
counter = Counter(helloString)
uniques = [value for value, count in counter.items() if count == 1]
</code></pre>
<p>This will give us 6 items because "world" occurs twice in our list:</p>
<pre><code>&gt;&gt;&gt; uniques
['you', 'are', 'doing', 'how', 'today', 'hello']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would do this using a set.</p>
<pre><code>def stuff(helloString):
    hello_set = set(helloString)
    return len(hello_set)
</code></pre>
</div>
<span class="comment-copy">There are 6 unique words, not 5</span>
<span class="comment-copy">7 unique words not 6</span>
<span class="comment-copy">Your loop version just replicates what a set does, since a set is basically a dictionary with ignored values.</span>
<span class="comment-copy">@jamylax, yes, but I included it incase the OP wanted a more verbose one (exactly why I also included a set). I moved the loop example to the button.</span>
<span class="comment-copy">there is no reason for <code>count</code> to be a dictionary if you only set values always to <code>True</code>. Change it to a <code>set</code></span>
<span class="comment-copy">@jamylak I used a dict since the OP used a dict. If he wants to try the set version <b>instead</b> then that's fine. I changed my answer to have minimal changes to the OP's original code.</span>
<span class="comment-copy">Now it makes sense because you are using the values of a dictionary</span>
<span class="comment-copy">I don't know, maybe someone thought I copied. I didn't. But as you answered first and these answers are essentially the same I don't mind withdrawing my answer.</span>
<span class="comment-copy">Gave you an up vote, this is a good answer, too.</span>
<span class="comment-copy">Same thing as what?</span>
<span class="comment-copy">Same thing <i>as what</i>? Do you mean as the same answer that you posted as I was writing mine and therefore couldn't see this page? Thanks for pointing that out. For the record, I did upvote your answer...</span>
<span class="comment-copy">Thought you said "instead of using". My bad. Removed the down vote.</span>
