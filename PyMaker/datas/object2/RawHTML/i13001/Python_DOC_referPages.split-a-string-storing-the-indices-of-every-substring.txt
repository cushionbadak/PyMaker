<div class="post-text" itemprop="text">
<p>There is a cool native <code>.split()</code> in python, returning the list of substrings. Is there a native or, at least, not very nasty way to split by multiple delimiters and automatically get substring coordinates? Something like this:</p>
<pre><code>"abc? !cde".some_smart_split("!?") -&gt; [("abc", 0, 2), (" ", 4, 4), ("cde", 6, 8)]
</code></pre>
<p>Of course, I can write some naive code myself. But my use case is much more complicated, it would be great to find something concise.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/re.html#re.finditer" rel="nofollow"><code>re.finditer</code></a>:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; [(match.group(0), match.start(), match.end())
     for match in re.finditer(r'[^!?]+', 'abc? !cde')]
[('abc', 0, 3), (' ', 4, 5), ('cde', 6, 9)]
</code></pre>
<ul>
<li>The pattern <code>[^!?]+</code> to match characters that is not <code>!</code>, <code>?</code>.</li>
<li>used <a href="https://docs.python.org/3/library/re.html#re.match.group" rel="nofollow"><code>re.MatchedObject.group(0)</code></a> to get the matched string.</li>
<li><a href="https://docs.python.org/3/library/re.html#re.match.start" rel="nofollow"><code>re.MatchedObject.start</code></a> and <a href="https://docs.python.org/3/library/re.html#re.match.end" rel="nofollow"><code>re.MatchedObject.end</code></a> to get the indices of matched parts.</li>
</ul>
</div>
<span class="comment-copy">There's a pretty good chance that you're dealing with an <a href="http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">XY problem</a> here. Why do you want to do this?</span>
<span class="comment-copy">No, I actually don't. I have a plain text, some xml structure on it and I have to make other markup over it, that is required to contain absolute positions from the initial text.</span>
<span class="comment-copy">Beat me to it :) OP seems not to want the slice indices but the index of the first and last character in the match, though (so <code>match.end()-1</code>)...</span>
<span class="comment-copy">Index type doesn't matter, of course. Ideologically that really <i>was</i> the answer :)</span>
