<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; print("loops"[- 1:1:- 1]*2)
spospo
&gt;&gt;&gt;
</code></pre>
<p>Why wouldn't the output be <code>slssls</code>?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>"loops"[-1:1:-1]
</code></pre>
<p>Let’s check how <a href="https://docs.python.org/3/library/stdtypes.html#typesseq-common" rel="nofollow">slicing works</a>:</p>
<blockquote>
<p><code>s[i:j:k]</code> – slice of <code>s</code> from <code>i</code> to <code>j</code> with step <code>k</code></p>
<p>If <code>i</code> or <code>j</code> is negative, the index is relative to the end of the string: <code>len(s) + i</code> or <code>len(s) + j</code> is substituted. But note that <code>-0</code> is still <code>0</code>.</p>
<p>The slice of <code>s</code> from <code>i</code> to <code>j</code> with step <code>k</code> is defined as the sequence of items with index <code>x = i + n*k</code> such that <code>0 &lt;= n &lt; (j-i)/k</code>. In other words, the indices are <code>i</code>, <code>i+k</code>, <code>i+2*k</code>, <code>i+3*k</code> and so on, stopping when <code>j</code> is reached (but never including <code>j</code>). If <code>i</code> or <code>j</code> is greater than <code>len(s)</code>, use <code>len(s)</code>. If <code>i</code> or <code>j</code> are omitted or <code>None</code>, they become “end” values (which end depends on the sign of <code>k</code>). Note, <code>k</code> cannot be zero. If <code>k</code> is <code>None</code>, it is treated like <code>1</code>.</p>
</blockquote>
<p>So <code>[-1:1:-1]</code> means <code>i = -1</code>, <code>j = 1</code>, <code>k = -1</code>.</p>
<p><code>i</code> is negative, so <code>i = -1</code> means that <code>i = len(s) + (-1) = len(s) - 1</code>. <code>len(s)</code> is <code>5</code>, so we get the following slice: <code>"loops"[4:1:-1]</code>.</p>
<p>As per above definition, we now the the items with the following indexes: <code>4</code>, <code>4 - 1 = 3</code>, <code>4 - 2 = 2</code>. We stop at <code>4 - 3 = 1</code> because that is our end, and we don’t include that.</p>
<p>So the result are indexes <code>4, 3, 2</code>, which is <code>'spo'</code>.</p>
<p>Finally, that string is multiplied by <code>2</code> which repeats it once: <code>'spospo'</code>.</p>
</div>
<span class="comment-copy">Because of the slicing notation. It's <code>[start:end:step]</code>, where negative indices count from the end of the string.</span>
<span class="comment-copy">Thanks for your help!</span>
