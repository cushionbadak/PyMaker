<div class="post-text" itemprop="text">
<p>I need to convert an XML <a href="https://docs.python.org/3/library/xml.etree.elementtree.html" rel="nofollow noreferrer">ElementTree</a> to a String after altering it. It's the toString part that isn't working.</p>
<pre><code>import xml.etree.ElementTree as ET

tree = ET.parse('my_file.xml')
root = tree.getroot()

for e in root.iter('tag_name'):
    e.text = "something else" # This works

# Now I want the the complete XML as a String with the alteration
</code></pre>
<p>I've tried various versions of the below line, with ET or ElementTree as various names, and importing toString, etc. etc,</p>
<pre><code>s = tree.tostring(ET, encoding='utf8', method='xml')
</code></pre>
<p>I have seen <em><a href="https://stackoverflow.com/questions/15304229/how-can-i-convert-python-elementtree-to-string">Convert Python ElementTree to string</a></em> and some others, but I'm not sure how to apply it to my example.</p>
</div>
<div class="post-text" itemprop="text">
<p>This should work:-</p>
<pre><code>xmlstr = ET.tostring(root, encoding='utf8', method='xml')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h3>How do I convert <code>ElementTree.Element</code> to a String?</h3>
<p>For a solution that works in both Python 2 &amp; 3, use <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.tostring" rel="nofollow noreferrer"><code>.tostring()</code></a> and <a href="https://docs.python.org/3/library/stdtypes.html#bytes.decode" rel="nofollow noreferrer"><code>.decode()</code></a>.</p>
<pre><code>xml_str = ElementTree.tostring(xml).decode()
</code></pre>
<hr/>
<h3>Example usage</h3>
<pre><code>from xml.etree import ElementTree

xml = ElementTree.Element("Person", Name="John")
xml_str = ElementTree.tostring(xml).decode()
print(xml_str)
</code></pre>
<p>Output:</p>
<pre><code>&lt;Person Name="John" /&gt;
</code></pre>
<hr/>
<h3>Explanation</h3>
<p>Despite what the name implies, <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.tostring" rel="nofollow noreferrer"><code>ElementTree.tostring()</code></a> <strong>doesn't return a string by default</strong>. The default behavior is to <a href="http://makble.com/python-why-lxml-etree-tostring-method-returns-bytes" rel="nofollow noreferrer">generate a bytestring</a>. While this wasn't an issue in Python 2, the two types were made more distinct in Python 3.</p>
<blockquote>
<p><strong>In Python 2 you could use the <code>str</code> type for both text and binary data</strong>.
  Unfortunately this confluence of two different concepts could lead to
  brittle code which sometimes worked for either kind of data, sometimes
  not. [...]</p>
<p>To make the distinction between text and binary data clearer and more pronounced, <strong>Python 3 [...] made text and binary data distinct types that cannot blindly be mixed together</strong>.</p>
</blockquote>
<p><sup>Source: <a href="https://docs.python.org/3/howto/pyporting.html#text-versus-binary-data" rel="nofollow noreferrer"><em>Porting Python 2 Code to Python 3</em></a></sup></p>
<p>We can resolve this ambiguity by using <a href="https://docs.python.org/3/library/stdtypes.html#bytes.decode" rel="nofollow noreferrer"><code>decode()</code></a> to explicitly convert our bytestring into regular text. This ensures compatibility with both Python 2 and Python 3.</p>
<ul>
<li>For Python 2 &amp; 3 compatibility: <code>ElementTree.tostring(xml).decode()</code></li>
<li>For Python 3 compatibility: <code>ElementTree.tostring(xml, encoding='unicode', method='xml')</code></li>
</ul>
<p>For reference, I've included a comparison of <code>.tostring()</code> results between Python 2 and Python 3. </p>
<pre><code>ElementTree.tostring(xml).decode()
# Python 3: &lt;Person Name="John" /&gt;
# Python 2: &lt;Person Name="John" /&gt;

ElementTree.tostring(xml, encoding='unicode', method='xml')
# Python 3: &lt;Person Name="John" /&gt;
# Python 2: LookupError: unknown encoding: unicode

ElementTree.tostring(xml, encoding='utf-8', method='xml')
# Python 3: b'&lt;Person Name="John" /&gt;'
# Python 2: &lt;Person Name="John" /&gt;

ElementTree.tostring(xml, encoding='utf8', method='xml')
# Python 3: b'&lt;?xml version=\'1.0\' encoding=\'utf8\'?&gt;\n&lt;Person Name="John" /&gt;'
# Python 2: &lt;?xml version='1.0' encoding='utf8'?&gt;
#           &lt;Person Name="John" /&gt;
</code></pre>
<p>Thanks to <a href="https://stackoverflow.com/questions/15304229/convert-python-elementtree-to-string/48671499?noredirect=1#comment84342152_48671499">Martijn Peters</a> for pointing out that the <code>str</code> datatype changed between Python 2 and 3.</p>
<hr/>
<h3>Why not use str()?</h3>
<p>In most scenarios, using <a href="https://docs.python.org/3/library/stdtypes.html#str" rel="nofollow noreferrer"><code>str()</code></a> would be the "<a href="https://stackoverflow.com/a/3205525/3357935">cannonical</a>" way to convert an object to a string. Unfortunately, using this with <code>Element</code> returns the object's location in memory as a hexstring, rather than a string representation of the object's data.</p>
<pre><code>from xml.etree import ElementTree

xml = ElementTree.Element("Person", Name="John")
print(str(xml))  # &lt;Element 'Person' at 0x00497A80&gt;
</code></pre>
</div>
<span class="comment-copy">One not so ideal way is convert the xml to a dict and make the change you need and convert the dict to the format or type you need. Try using XMLTODICT or Beautifulsoup to handle and parse the xml file. Example: I use xmltodict to parse convert a xml file to a dict and after taht I convert the dict in a html table using json2html</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/15304229/convert-python-elementtree-to-string">Convert Python ElementTree to string</a></span>
<span class="comment-copy">ironically, <code>tostring</code> generates python <code>bytes</code></span>
<span class="comment-copy">Due to a change in<code>str</code>,  this does not work in Python 3. <a href="https://stackoverflow.com/a/48671499/3357935">Use either <code>ET.tostring(root).decode()</code> or <code>ET.tostring(root, encoding='unicode', method='xml')</code> instead</a>.</span>
