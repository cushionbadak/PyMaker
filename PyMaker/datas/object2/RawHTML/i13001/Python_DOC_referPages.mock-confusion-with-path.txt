<div class="post-text" itemprop="text">
<p>I have a test below using <code>mock</code> on Python 2.6.</p>
<pre><code>@patch('testme.check.RE.query')
def test_check(query):
  query.filter.one = MagicMock(return_value=None)
  ....
  assert against_experiment(cl, ei, cd)
</code></pre>
<p>Inside the module I want to test, I have</p>
<pre><code>def check_against_experiment(c, e, c):
  re = RE.query.filter(RE.e_id == e).one()
</code></pre>
<p>Two questions:</p>
<p>When inspecting <code>re = RE.query.filter(RE.e_id == e).one()</code>, I see <code>&lt;MagicMock name='query.filter().one()' id='62856528'&gt;</code>.</p>
<p>Why isn't this returning <code>None</code>?</p>
<p>Another question is when I change <code>@path('testme.check.RE.query')</code> to <code>@path('testme.check.RE.query')</code> and change <code>query.filter.one</code> to <code>query.one</code>, I notice that nothing is mocked out. Why is this the case?</p>
</div>
<div class="post-text" itemprop="text">
<p>When you are calling <code>RE.query.filter(RE.e_id == e)</code> in your function-under-test, it is returning a new <strong>unconfigured</strong> <code>MagicMock</code>, and then you are calling its <code>one</code> function, which is generating that default <code>return_value</code>.</p>
<p>You probably want to set the <code>return_value</code> of <code>filter</code> to be a new <code>Mock</code> whose <code>one</code> function returns <code>None</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Short answer is what you want to do is</p>
<pre><code>query.filter.return_value.one.return_value = None
</code></pre>
<p>Default mock's <code>return_value</code> attribute is a <code>MagickMock</code> object (AFAIK allocated as lazy property). </p>
<p>IMHO try to avoid this kind of mock configurations, take your class/function more clear and narrow to avoid object browsing. These kind of test make source and tests tangled and create a solid fence to do refactoring. </p>
<p>For your second question I can just point you to <a href="https://docs.python.org/3/library/unittest.mock.html#where-to-patch" rel="nofollow">Where to Patch</a> <em>must read</em> document. From what you say is impossible to find the root cause by I can bet the answer is always in this documentation's chapter.</p>
</div>
<span class="comment-copy">When you inspected, did you check to see what is inside <code>return_value</code>? Also, just as a test, put <code>return_value=123</code> and check <code>return_value</code> as well. As for your second question, it is all based on your relative imports. I don't know how your project is set up and how things are referenced to one another, but it is probably due to that. Also, these are the same: <code>@path('testme.check.RE.query')</code> to <code>@path('testme.check.RE.query')</code></span>
