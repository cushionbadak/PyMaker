<div class="post-text" itemprop="text">
<p>In python, if we let a=2*4, then "a" will be of integer type. 
But if we let a = 2**400, then "a" will be automatically be of long type, which is java's BigInteger counterpart. </p>
<p>Thus Python can automatically convert an integer to a BigInteger when it is necessary. My question is: If every time it performs an arithmetic operation on an integer, Python checks whether this operation causes overflow or not. If overflows, convert it to BigInteger. Wouldn't it be very costly? Because this basically means Python inserts an overflow-checking instruction after every integer arithmetic instruction. 
So how can python naturally support big integer and be efficient?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Wouldn't it be very costly?</p>
</blockquote>
<p>Absolutely, but this is far from the most costly thing involved. We also have dynamic dispatch on the arithmetic operations involved and dynamic allocation of objects to hold the result, among other things.</p>
<blockquote>
<p>So how can python naturally support big integer and be efficient?</p>
</blockquote>
<p>If your algorithm spends all its time doing Python-level arithmetic with Python integers, it <em>won't</em> be efficient. It'll be slow as hell. In that case, you probably want to use something like NumPy or C instead of Python integer arithmetic.</p>
</div>
<span class="comment-copy">Why is this tagged with Java? I highly doubt cpython (the standard python) uses Java's BigInteger, and Java isn't the only language that has the idea of infinite-precision integer. I get the analogy to BigInteger, but I don't think it's strong enough to warrant the Java tag -- this is really a python question. I'm going to remove the tag; you can add it back if you feel it's necessary, though I think it'd warrant at least a note here in the comments.</span>
<span class="comment-copy">Just by the way, in Python 3, integers don't get promoted to <code>long</code> when they overflow; they are always <code>long</code> (which is called <code>int</code> in Python 3).</span>
<span class="comment-copy">@kindall: Although on 64 bit systems in Py3.1+, <a href="https://docs.python.org/3/whatsnew/3.1.html#build-and-c-api-changes" rel="nofollow noreferrer">the Py3 <code>int</code> uses a slightly more efficient scheme that reduces the work done for large values by roughly a factor of 2</a> so it's not <i>exactly</i> the same as the Py2 <code>long</code>.</span>
