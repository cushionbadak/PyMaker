<div class="post-text" itemprop="text">
<p>I have a python script that reads many executables written and compiled in C program. There is no issue with these executables. However, When I have to run these executable in for loop, i tried to parallize the loop. </p>
<pre><code>Note: prog1,prog2,prog3 must run in order.
This is a sample example, but in my real code
prog2 depends on output of prog1, and prog3 
depends on output of prog2 and so on.
I have seven executables in for loop of iteration 20,
it takes more than 2 hour to complete the process.
If i could parallize the code, it would save a lot of time.
Help would be greatly appreciated!!!!
</code></pre>
<p>In my code example 1 runs fine but example 2 doesnot run.
The full code is presented below:</p>
<pre><code>#!/usr/bin/python

from multiprocessing import Pool
import os, sys, subprocess, math, re, shutil,copy

#function to run a program and write output to the shell
################################################################################
def run_process(name, args,):
print "--------------------------------------------------------------------"
print "Running: %s"%name
print "Command:"
for arg in args:
    print arg,
print ""
print "--------------------------------------------------------------------"
process = subprocess.Popen(args)

process.communicate()
if process.returncode != 0:
    print "Error: %s did not terminate correctly. Return code: %i."%(name, process.returncode)
    sys.exit(1)  # this will exit the code in case of error
###########################       
# example 1
#run_process("prog1.c", ['./prog1'])
#run_process("prog2.c", ['./prog2'])        
#run_process("prog3.c", ['./prog3', 'first argument'])


# example 2 (parallizing)
commands = []
for x in range(0,20):
    commands.extend(("prog1.c",['./prog1']))
    commands.extend(("prog2.c",['./prog2']))
    commands.extend(("prog3.c",['./prog3', 'first argument']))


p = Pool()
p.map(run_process, commands)
</code></pre>
<p>Here, if i run example 1 it runs flawlessly. But when i try to run example 2, it gives following error:</p>
<pre><code>    TypeError: run_process() takes exactly 2 arguments (1 given)
</code></pre>
<p>Further note:<br/>
To create the executables prog1,prog2,and prog3 I wrote C codes.<br/>
Which looks like this:</p>
<pre><code>// to compile: gcc -o prog1 prog1.c
// to run : ./prog1
#include &lt;stdio.h&gt;
int main() {
printf("This is program 1\n");
return 0; }
</code></pre>
<p>prog2 looks exactly same. And prog3 looks like this:</p>
<pre><code>//to compile: gcc -o prog3 prog3.c 
//to run: ./prog3 'argument1'
#include &lt;stdio.h&gt;
int main(int argc, char ** argv) {
printf("This is program 3\n");
printf("The argument is = %s\n", argv[1]);  
return 0; }
</code></pre>
<p>Now, there are 21 iterations inside the for loop.<br/>
In the first iteration it suppose it runs executables prog1,prog2....,prog7<br/>
and finally produce ouptput1.fits.<br/>
In the second interation it again run seven executables in order and produces output2.fits.<br/>
And finally it creates 21 fits files.
What I can do is make four functions:<br/>
func1 for loop 0 to 5<br/>
fucn2 for loop 5 to 10<br/>
func3 for loop 11 to 15<br/>
func4 for loop 16 to 21<br/>
Then I want to run these four functions in parallel process.<br/>
<strong>My Question is : How can I run example 2 without any error?</strong> </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import multiprocessing
for x in range(0,20): 
    multiprocessing.Process(target=run_process, args=("colour.c",['./cl',"color.txt",str(x) ])  
    ...
</code></pre>
<p>not really sure what else I could add ...</p>
</div>
<div class="post-text" itemprop="text">
<p>Python has a <a href="https://docs.python.org/2/library/multiprocessing.html#module-multiprocessing.pool" rel="nofollow">Pool</a> of processes built exactly for this purpose.</p>
<p>Given the fact you need to run X times the same sequence of commands and supposing the sequence of commands can be run in parallel. This means the Nth run can be run together with the Nth+1 without any implication.</p>
<pre><code>from multiprocessing import Pool

commands = tuple(("prog1.c",['./prog1']), ...)

def run_processes(execution_index):
    print("Running sequence for the %d time." % execution_index)

    for command in commands:
        process = subprocess.Popen(command)
        ...

p = Pool()
p.map(run_processes, range(20))
</code></pre>
<p>On Pyhton3 you can use the <a href="https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor" rel="nofollow">ProcessExecutor</a>.</p>
<p>Whenever you want to run something concurrently you need to understand the execution boundaries first. If two lines of execution are interdependent, you either set up a communication between the two (using for example a pipe) or avoid running them concurrently.</p>
<p>In your case, the commands are interdependent so it becomes problematic to run them concurrently. But if the whole sequence is not interdependent then you can run those in parallel.</p>
</div>
<div class="post-text" itemprop="text">
<p>Have a look at what <a href="http://docs.celeryproject.org/en/latest/userguide/canvas.html#groups" rel="nofollow">group</a> functions of Celery's canvas do. They allow you to call functions at the same time, with different set of arguments. Say you want to process a total of 1000 elements in your for loop. Doing the same sequentially is highly unoptimized. A simple solution will be to call the same function with two sets of arguments. Even this simple hack will bring down your processing time down by half. That is what <a href="http://docs.celeryproject.org/en/latest/userguide/canvas.html" rel="nofollow">Canvas</a> and Celery are about.</p>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/7207309/python-how-can-i-run-python-functions-in-parallel">This</a> might be what you are looking for</span>
<span class="comment-copy">You'll normally use a process pool and multiprocessing.map to achieve parallelism while not bringing the system down..</span>
<span class="comment-copy">Do these things you are running depend on each other? Is this <code>run_process</code> function running subprocesses?</span>
<span class="comment-copy">If you read the Process documentation, you'd see that you need to call start on the process objects.</span>
<span class="comment-copy">@tdelaney the processes depend on eachother, and run_process is a function defined above in the edited question.</span>
<span class="comment-copy">thats what this is ... although you cannot "run" c code without first compiling it to an executable ...</span>
<span class="comment-copy">I tried this with a simple executable as mentioned above, and this did not worked! Do you have any idea?</span>
<span class="comment-copy">I don't understand. Are you using the <code>multiprocessing.Pool.map</code> or the <code>multiprocessing.Process</code>?</span>
<span class="comment-copy">The <a href="https://docs.python.org/2/library/functions.html#map" rel="nofollow noreferrer">map</a> function passes only one argument to the given function. In your case is a tuple with your two arguments. You can either expand with the <code>*</code> operator or just treat it as a list.</span>
<span class="comment-copy">You didn't get what I mean. The <code>run_process</code> will receive only one argument, containing a tuple with the two entries you specified. I'll edit the answer to better show what I mean.</span>
<span class="comment-copy">Did you managfe to get it working? If not, could you please edit your question showing the code and the exception you get when running it?</span>
