<div class="post-text" itemprop="text">
<p>I was using the following <code>for</code> loop in my C program:</p>
<pre><code>for (i = 0; i &lt; 5; i++) {
  for (j = i + 1; j &lt; 5; j++) {
    //some operation using the index values
  }
}
</code></pre>
<p>What would be the python equivalent for the second <code>for</code> loop, (<code>j = i + 1</code>)? I tried the following but there is an error:</p>
<pre><code>for indexi, i in enumerate(list):
    for indexj = indexi + 1, j in enumerate(list):
</code></pre>
<p>How to do it?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're trying to get the actual index values for some reason (and/or need to control the inner loop separate from the outer), you'd do:</p>
<pre><code>for i in range(len(mylist)):
    for j in range(i+1, len(mylist)):

# Or for indices and elements:
for i, x in enumerate(mylist):
    for j, y in enumerate(mylist[i+1:], start=i+1):
</code></pre>
<p>But if what you really want is unique non-repeating pairings of the elements, there is a better way, <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow"><code>itertools.combinations</code></a>:</p>
<pre><code>import itertools

for x, y in itertools.combinations(mylist, 2):
</code></pre>
<p>That gets the values, not the indices, but usually, that what you really wanted. If you really need indices too, you can mix with <code>enumerate</code>:</p>
<pre><code>for (i, x), (j, y) in itertools.combinations(enumerate(mylist), 2):
</code></pre>
<p>Which gets the exact index pattern you're looking for, as well as the values. You can also use it to efficiently produce the indices alone as a single loop with:</p>
<pre><code>for i, j in itertools.combinations(range(len(mylist)), 2):
</code></pre>
<p>Short answer: <code>itertools</code> is magical for stuff like this.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're really just interested in the indexes, you can use <code>range</code> rather than <code>enumerate</code>.</p>
<pre><code>for i in range(5):
    for j in range(i+1, 5):
        print i, j
</code></pre>
</div>
<span class="comment-copy">Side-note: Don't name your variable <code>list</code> (or any other built-in name). That's just asking for trouble. My answer used <code>mylist</code> as a safe placeholder.</span>
<span class="comment-copy">another side-note: rather than stating that "there is an error" it can often be quite helpful to <i>post</i> that error.</span>
<span class="comment-copy">Overwriting the name of a standard-type makes it unreachable for other calls. <b>Do not!</b></span>
<span class="comment-copy">FYI, I followed the convention of <code>i</code> and <code>j</code> referring to indices, while <code>x</code> and <code>y</code> refer to values. Your original question uses <code>i</code> and <code>j</code> for the values, which will trip up maintainers. Obviously, meaningful names are best (and <code>i</code> and <code>j</code> might be better made <code>ix</code> and <code>iy</code> to indicate the index relationship with <code>x</code> and <code>y</code>), but for example code, I'll stick with conventional one-letter names.</span>
