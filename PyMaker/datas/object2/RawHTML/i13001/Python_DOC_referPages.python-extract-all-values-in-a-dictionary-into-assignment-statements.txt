<div class="post-text" itemprop="text">
<p>For a dictionary 
<code>d={'foo1': 1, 'foo2': 2, 'foo3': 3}</code>, what is the most efficient way to assign the strings to their definitions:</p>
<pre><code>foo1=1
foo2=2
foo3=3
</code></pre>
<p>When no assignment statements are used, I need to call the entry with the dictionary, eg. <code>d['foo1']</code>, but I don't plan to use this.</p>
<p>Note: Thanks for pointing out that it was a string. However, I am now assigning the string terms to their corresponding values in the dictionary.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>d = {'a': 1, 'b': 2}
locals().update(d)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; globals()['test'] = 10
&gt;&gt;&gt; test
10
</code></pre>
<p>Not the most pretty way, but it works.</p>
<pre><code>d = {'foo1': 1, 'foo2': 2, 'foo3': 3}
for key, val in d.items():
    globals()[key] = val
print(foo1)
</code></pre>
<p>(Or use locals(), but Colin beat me to it)</p>
</div>
<span class="comment-copy"><code>globals().update(d)</code> if you're setting global variables.</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/10806327/python-create-a-global-variable-from-a-string">Python: Create a global variable from a string?</a></span>
<span class="comment-copy">Nice pointing out <code>update()</code>, was unaware that it took a dictionary : )</span>
<span class="comment-copy">did not know about this feature, pretty cool :)</span>
<span class="comment-copy">This doesn't work. Locals only gives you a view. You cannot use it to add, delete or change the contents of a variable. You can mutate a referenced object, but that's different. <a href="https://docs.python.org/3/library/functions.html#locals" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#locals</a></span>
<span class="comment-copy">Yes. Globals are stored in a dict internally. Globals just gives you access to that dict. Locals are stored differently. The function creates a dict from the underlying storage implementation.</span>
<span class="comment-copy">Then you're fine. But that means you can't use <code>dict.update</code>. You have to do stuff like: <code>locals()[name].attr = new_value</code>. It makes your implementation fragile. Just use a dict and stop trying to force locals to do something it's not meant for. If you really must, then create an object and update its internal <code>__dict__</code>. Eg. <code>obj.name</code> becomes <code>vars(obj)["name"]</code></span>
<span class="comment-copy">May I understand how 'test' relates to my examples above?</span>
<span class="comment-copy">@teachmyselfhowtocode It was a example of how you can assign variables via "strings", your solution is the two rows below. The first was just a test so you can see the principle of how it works.</span>
