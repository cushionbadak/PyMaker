<div class="post-text" itemprop="text">
<p>I am trying to use the Python/C API to run a Python function which returns a string. I want to store that returned string to a C++ variable, but I can't get it to work. I am using Python 3 and it seems like the <code>PyString_FromString()</code> method doesn't work anymore. Here is my code:</p>
<pre><code>int main(int argc, char *argv[])
{
    PyObject *pName, *pModule, *pDict, *pFunc, *pValue;

    Py_Initialize();

    pName = PyUnicode_FromString("ocr");

    pModule = PyImport_Import(pName);

    pDict = PyModule_GetDict(pModule);

    pFunc = PyDict_GetItemString(pDict, "get_text");

    pValue = PyUnicode_FromString("ocr_noise.png");
    pValue = PyObject_CallObject(pFunc, pValue);

    std::string result = PyUnicode_FromObject(pValue);

    Py_DECREF(pModule);
    Py_DECREF(pName);
    Py_DECREF(pValue);

    Py_Finalize();

    return 0;
}
</code></pre>
<p>The python file is called <code>ocr.py</code>, and the function I am trying to call is called <code>get_text(value)</code>. I am trying to pass in <code>"ocr_noise.png"</code> as an argument. Any ideas what I should do?</p>
<p>EDIT 2: I don't need to use std::string as in the code. What else can I use to store the string returned from the function?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's essential to check the return values of all Python functions. Python returns a <code>nullptr</code> if there was an error. So <code>PyUnicode_FromString()</code> works fine in your code. It just segfaults because <code>pValue</code> is a <code>nullptr</code> you got from <code>PyObject_CallObject()</code>. Putting <code>PyErr_Print()</code> just after this call prints:</p>
<pre><code>TypeError: argument list must be a tuple
</code></pre>
<p>You need to pass a tuple of objects as argument, not a single <code>str</code>. Instead you might want to use <code>PyObject_CallFunction(pFunc, "O", pValue)</code> or <code>PyObject_CallFunction(pFunc, "s", "ocr_noise.png")</code>.</p>
<p>Additionally have a look into <code>PyImport_ImportModule()</code>. Furthermore</p>
<pre><code>std::string result = PyUnicode_FromObject(pValue);
</code></pre>
<p>should not even compile since it returns a <code>PyObject *</code> not a <code>string</code>.</p>
</div>
<span class="comment-copy">What do you mean with "it seems like the <code>PyUnicode_FromString()</code> method doesn't work anymore"? Are you getting an exception? A segfault? Something else?</span>
<span class="comment-copy">I meant PyString_FromString(). My bad.</span>
<span class="comment-copy">There's no such thing as <code>PyString_FromString</code> in Python 3.</span>
<span class="comment-copy">Have you considered using an existing wrapper library like Boost.Python instead of the low-level C API? It should make these things much simpler. That said, please read the guidelines here, your question is by definition off-topic, as explained there.</span>
<span class="comment-copy">and there's also <a href="https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_AsUTF8" rel="nofollow noreferrer"><code>PyUnicode_AsUTF8</code></a> if you really want a <code>string</code></span>
<span class="comment-copy">What should I do to store the returned string then?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_FromObject" rel="nofollow noreferrer">PyUnicode_FromObject()</a> might not be useful at all. <code>pValue</code> should be a unicode object already. See <a href="https://stackoverflow.com/questions/17515467/clean-way-to-convert-python-3-unicode-to-stdstring">Clean Way to Convert Python 3 Unicode to std::string</a> for more detail on how to get a c string from the Python unicode object.</span>
