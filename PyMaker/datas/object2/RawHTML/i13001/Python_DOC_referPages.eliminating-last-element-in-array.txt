<div class="post-text" itemprop="text">
<p>So I am working on a small hangman text based game.</p>
<p>The problem I am currently dealing with is calling random words from my text file. Each word has one additional character for a new line (<strong>\n</strong>).</p>
<p>For instance, running through my function that separates a string's letters into individual elements I get something to the effect of:</p>
<pre><code>from text file: guess
answer = arrange_word(guess)
&gt;&gt;&gt;&gt;&gt; ['g', 'u', 'e', 's', 's', '\n']
</code></pre>
<p>however, when joining the array back together the following is shown:</p>
<pre><code>print ''.join(arrange_word)
&gt;&gt;&gt;&gt;&gt; guess
</code></pre>
<p>as you can see, it is a bit difficult to guess an element that does not show up.</p>
<p>For clarity here is my function for <strong>arrange_word</strong>:</p>
<pre><code>def arrange_word(word):
##########
# This collects the mystery word and breaks it into an array of
# individual letters.
##########
     word_length = len(word)
     break_up = ["" for x in range(word_length)]
     for i in range(0, word_length):
          break_up[i] = word[i]
     return break_up
</code></pre>
<p>What I am stuck on is that when trying to guess letters, the <strong>\n</strong> is impossible to guess. The win condition of my game is based on the guess being identical to the answer word. However the <strong>\n</strong> keeps that from working because they are of different length.</p>
<p>These answer arrays are of different length as well, since I am just pulling random lines from a text file of ~1000 words. After hours of searching I cannot seem to find out how to drop the last element of an <strong>array</strong>.</p>
</div>
<div class="post-text" itemprop="text">
<p>For this line here: </p>
<pre><code>word_length = len(word)
</code></pre>
<p>Before you take the length, what you can do is this first:</p>
<pre><code>word = word.strip()
</code></pre>
<p>Explanation:</p>
<p><a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow">strip</a> removes leading and trailing whitespace.</p>
<pre><code>&gt;&gt;&gt; s = "bob\n"
&gt;&gt;&gt; s
'bob\n'
&gt;&gt;&gt; s.strip()
'bob'
</code></pre>
<p>With all this in mind, you don't <em>need</em> the rest of this code anymore: </p>
<pre><code> word_length = len(word)
 break_up = ["" for x in range(word_length)]
 for i in range(0, word_length):
      break_up[i] = word[i]
</code></pre>
<p>Applying the <code>strip</code> will give you your word without the whitespace character, then all you want to do after this to have a list of characters, is simply:</p>
<pre><code>&gt;&gt;&gt; s = "bob"
&gt;&gt;&gt; list(s)
['b', 'o', 'b']
</code></pre>
<p>So your method can now simply be: </p>
<pre><code>def arrange_word(word):
    return list(word.strip())
</code></pre>
<p>Demo: </p>
<pre><code>arrange_word("guess")
</code></pre>
<p>Output:</p>
<pre><code>['g', 'u', 'e', 's', 's']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>All these answers are fine for specifically stripping whitespace characters from a string, but more generally, Python lists implement standard stack/queue operations, and you can make your word into a list just by calling the list() constructor without needing to write your own function:</p>
<pre><code>In [38]: letters = list('guess\n')
         letters.pop()
         letters
Out[38]: ['g', 'u', 'e', 's', 's']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use List slicing</p>
<pre><code>arr = [1,2,3,4]

print(arr[:-1:])
</code></pre>
<hr/>
<p>Array slicing syntax is [startindex:endindex:offset(2, means each 2 element)] So in your case you could. Which mean start at the begging of the list, to the last element -1 for every 1 element in the list.</p>
<pre><code>return break_up[:-1:]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can access last element by -1 index like:
guess[-1]
and you can delte it by:</p>
<pre><code>del guess[-1] 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just strip the word:</p>
<pre><code>word = 'guess\n'
word = word.strip()  ## 'guess' without new line character, or spaces
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Maybe first line of your arrange_word function should be</p>
<pre><code>word = word.strip()
</code></pre>
<p>to remove all leading/trailing whitespace characters.</p>
</div>
<span class="comment-copy">btw: your function can look like this: <code>def arrange_word(word): return list(word.strip())</code></span>
<span class="comment-copy">Thank you! This did not work in the location that you suggested (my guesses are also passed through the function and there was an odd interaction with single letter guesses) however, outside of the function where the answer word is defined it worked like a charm. Thank you again! Back to progress!</span>
<span class="comment-copy">@MilesProcise With the solution I suggested, you don't need the rest of your code. Take a look at my updated solution.</span>
<span class="comment-copy">@MilesProcise The new version of <code>arrange_word</code> that I put in my answer does the job of splitting the word in to individual characters. Look at the last part of my answer after the line <code>So your method can now simply be:</code>. It does exactly what you explained in your question.</span>
<span class="comment-copy">Change has been made, and it works like a charm! Thanks again!</span>
