<div class="post-text" itemprop="text">
<p>I'm a beginner to both Python and to this forum, so please excuse any vague descriptions or mistakes.  </p>
<p>I have a problem regarding reading/writing to a file. What I'm trying to do is to read a text from a file and then find the words that occur more than one time, mark them as <em>repeated_word</em> and then write the original text to another file but with the repeated words marked with star signs around them.   </p>
<p>I find it difficult to understand how I'm going to compare just the words (without punctuation etc) but still be able to write the words in its original context to the file.   </p>
<p>I have been recommended to use regex by some, but I don't know how to use it. Another approach is to iterate through the textstring and tokenize and normalize, sort of by going through each character, and then make some kind av object or element out of each word.    </p>
<p>I am thankful to anyone who might have ideas on how to solve this. The main problem is not how to find which words that are repeated but how to mark them and then write them to the file in their context. Some help with the coding would be much appreciated, thanks. </p>
<p><strong>EDIT</strong>
I have updated the code with what I've come up with so far. If there is anything you would consider "bad coding", please comment on it. </p>
<p>To explain the Whitelist class, the assignment has two parts, one of where I am supposed to mark the words and one regarding a whitelist, containing words that are "allowed repetitions", and shall therefore not be marked. </p>
<p>I have read heaps of stuff about regex but I still can't get my head around how to use it. </p>
</div>
<div class="post-text" itemprop="text">
<p>Basically, you need to do two things: find which words are repeated, and then transform each of these words into something else (namely, the original word with some marker around it). Since there's no way to know which words are repeated without going through the entire file, you will need to make two passes.</p>
<p>For the first pass, all you need to do is extract the words from the text and count how many times each one occurs. In order to determine what the words are, you can use a regular expression. A good starting point might be</p>
<pre><code>regex = re.compile(r"[\w']+")
</code></pre>
<p>The function <a href="https://docs.python.org/3/library/re.html#re.compile" rel="nofollow"><code>re.compile</code></a> creates a regular expression from a string. This regular expression matches any sequence of one or more word characters (<code>\w</code>) or apostrophes, so it will catch contractions but not punctuation, and I think in many "normal" English texts this should capture all the words.</p>
<p>Once you have created the regular expression object, you can use its <a href="https://docs.python.org/3/library/re.html#re.regex.finditer" rel="nofollow"><code>finditer</code></a> method to iterate over all matches of this regular expression in your text.</p>
<pre><code>for word in regex.finditer(text):
</code></pre>
<p>You can use the <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>Counter</code> class</a> to count how many times each word occurs. (I leave the implementation as an exercise. :-P The documentation should be quite helpful.)</p>
<p>After you've gotten a count of how many times each word occurs, you will have to pick out those whose counts are 2 or more, and come up with some way to identify them in the input text. I think a regular expression will also help you here. Specifically, you can create a regular expression object which will match any of a selected set of words, by compiling the string consisting of the words joined by <code>|</code>.</p>
<pre><code>regex = re.compile('|'.join(words))
</code></pre>
<p>where <code>words</code> is a <code>list</code> or <code>set</code> or some iterable. Since you're new to Python, let's not get too fancy (although one can); just code up a way to go through your <code>Counter</code> or whatever and create a <code>list</code> of all words which have a count of 2 or more, then create the regular expression as I showed you.</p>
<p>Once you have that, you'll probably benefit from the <a href="https://docs.python.org/3/library/re.html#re.regex.sub" rel="nofollow"><code>sub</code> method</a>, which takes a string and replaces all matches of the regular expression in it with some other text. In your case, the replacement text will be the original word with asterisks around it, so you can do this:</p>
<pre><code>new_text = regex.sub(text, r'*\0*')
</code></pre>
<p>In a regular expression replacement, <code>\0</code> refers to whatever was matched by the regex.</p>
<p>Finally, you can write <code>new_text</code> to a file.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you know that the text only contains alphabetic characters, it may be easier to just ignore characters that are outside of a-z than to try to remove all the punctuation.</p>
<p>Here is one way to remove all characters that are not a-z or space:</p>
<pre><code>file = ''.join(c for c in file if 97 &lt;= ord(c) &lt;= 122 or c == ' ')
</code></pre>
<p>This works because <code>ord()</code> returns the ASCII code for a given character, and ASCII 97-122 represent a-z (in lowercase).</p>
<p>Then you'll want to split those into words, you can accomplish that like:</p>
<pre><code>words = file.split()
</code></pre>
<p>If you pass this to the <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow">Counter</a> data structure it will count the occurrences of each word.</p>
<pre><code>counter = Counter(file.split)
</code></pre>
<p>Then <code>counter.items()</code> will contain a mapping from word to number of occurrences. </p>
</div>
<div class="post-text" itemprop="text">
<p>OK. I presume that this is a homework assignment, so I'm not going to give you a complete solution. But, you really need to do a number of things. </p>
<p>The first is to read the input file in to memory. Then split it in to its component words (tokenize it) probably contained in a list, suitably cleaned up to remove stray punctuation. You seem to be well on your way to doing that, but I would recommend you look at the <code>split()</code> and <code>strip()</code> methods available for strings. </p>
<p>You need to consider whether you want the count to be case sensitive or not, and so you might want to convert each word in the list to (say) lowercase to keep this consistent. So you could do this with a <code>for</code> loop and the string <code>lower()</code> method, but a list-comprehension is probably better. </p>
<p>You then need to go through the list of words and count how many times each one appears. If you check out <code>collections.Counter</code> you will find that this does the heavy lifting for your or, alternatively, you will need to build a dictionary which has the words as keys and the count of the words. (You might also want to check out the <code>collections.defaultdict</code> class here as well).</p>
<p>Finally, you need to go through the text you've read from the file and for each word it contains which has more than one match (i.e. the count in the dictionary or counter is &gt; 1) mark it appropriately. Regular expressions are designed to do exactly this sort of thing. So I recommend you look at the <code>re</code> library.</p>
<p>Having done that, you simply then write the result to a file, which is simple enough. </p>
<p>Finally, with respect to your file operations (reading and writing) I would recommend you consider replacing the <code>try ... except</code> construct with a <code>with ... as</code> one.</p>
</div>
<span class="comment-copy">Thank you so much for this. I think I understand the method to use, however I still feel very insecure about how to use the regex module. Also, with this method, do the words get any indices or some sort of position? That would be great because I am supposed to be able to change the length of the interval (the word needs to be repeated in an interval of a chosen no. of words in order for it to be accounted for as a repetition).</span>
<span class="comment-copy">That's probably a matter for another question. You'd probably want to look into the <code>enumerate</code> function to get access to the word indices, but the problem becomes somewhat more complicated when you do that.</span>
