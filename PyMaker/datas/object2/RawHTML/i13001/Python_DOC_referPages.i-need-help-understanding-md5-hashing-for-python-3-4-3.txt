<div class="post-text" itemprop="text">
<p>I am just testing out md5 hashing in python 3.4.3. And i dont understand the results i am getting. I am trying to compare a hashed password in my sql database, but every other time i try to do it i get a different result. Here is a code i created to illustrate my problem:</p>
<pre><code>import hashlib

x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
p = '5'
for i in x:

    k = hashlib.md5(p.encode('utf-8'))
    print(k)
</code></pre>
<p>Results:</p>
<pre><code>&lt;md5 HASH object @ 0x02A07B10&gt;
&lt;md5 HASH object @ 0x02A07CF0&gt;
&lt;md5 HASH object @ 0x02A07B10&gt;
&lt;md5 HASH object @ 0x02A07CF0&gt;
&lt;md5 HASH object @ 0x02A07B10&gt;
&lt;md5 HASH object @ 0x02A07CF0&gt;
&lt;md5 HASH object @ 0x02A07B10&gt;
&lt;md5 HASH object @ 0x02A07CF0&gt;
&lt;md5 HASH object @ 0x02A07B10&gt;
&lt;md5 HASH object @ 0x02A07CF0&gt;
&lt;md5 HASH object @ 0x02A07B10&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your output is printing the addresses of the <code>HASH</code> object, not the MD5 digest itself. </p>
<p>If you want to see that, then call <code>digest()</code> on that object. That will return the 128-bit output of MD5 as a 16-byte string. If you want to print it out in Hexadecimal, use <code>hexdigest()</code> instead:</p>
<pre><code>k = hashlib.md5(p.encode('utf-8')).hexdigest()
</code></pre>
</div>
<span class="comment-copy">Side-note: Never use unsalted hashes for password hashes. And for that matter, if possible, don't roll your own password to hash code. If you can use Python 3.4+ (or pyOpenSSL on earlier versions), use something like <a href="https://docs.python.org/3/library/hashlib.html#hashlib.pbkdf2_hmac" rel="nofollow noreferrer"><code>hashlib.pbkdf2_hmac</code></a> with a salt and a number of rounds of hashing, which (while intended for producing private keys from a password) is also secure for producing password hashes that can't be trivially brute forced.</span>
<span class="comment-copy">MD5 should not be used to hash passwords, it is ways too fast (you can brute-force about <a href="http://hashcat.net/oclhashcat/#performance" rel="nofollow noreferrer">100 Giga MD5 per second</a> with a good GPU). Instead use a slow hash function with a cost factor like BCrypt or PBKDF2.</span>
<span class="comment-copy">For the record, the reason it's doing this is that: 1. There is more than one common output format for the digest (raw binary vs. hex) 2. Hashes are often computed by hashing blocks of data, and can be built iteratively by passing new blocks in one by one (so the whole file doesn't need to be loaded in memory); it won't compute the digest until you ask because you might have more data to hash.</span>
<span class="comment-copy">@ShadowRanger well said</span>
