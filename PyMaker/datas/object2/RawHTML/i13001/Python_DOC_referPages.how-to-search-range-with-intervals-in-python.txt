<div class="post-text" itemprop="text">
<p>I've been given a project and although I've managed to get it to work, part of it looks very messy and I can't think of what I'm sure is a simple fix to it. My knowledge of programming is minimal so most Google searches for it have confused me and I don't really know how to define what I want. Anyone here is the code:</p>
<pre><code>(if x in range(25,76) or x in range(125,176) or x in range(225,276) or
    x in range(325,376) or x in range(425,476) or x in range(525,576) or
    x in range(625,676) or x in range(725,776)):
</code></pre>
<p>I think you can see what I'm trying to do but I've had to list it as separate ranges each time, help will be much appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>One option for shortening a lot of <code>or</code>s is to use <a href="https://docs.python.org/3/library/functions.html#any" rel="noreferrer"><code>any</code></a>, something like:</p>
<pre><code>if any(x in range(start, end) for start, end in [(25, 76), (125, 176), ...]):
</code></pre>
<p>or just use arithmetic, if the values will always be integers:</p>
<pre><code>if any(start &lt;= x &lt; end ...):
</code></pre>
<p>Alternatively, as you seem to have a regular pattern of ranges (i.e. between <code>25</code> and <code>76</code> in every hundred), you could use modulo (<code>%</code>) to strip away the hundreds:</p>
<pre><code>if x % 100 in range(25, 76):
</code></pre>
<p>and add in <code>x &lt; 776</code> if that's a fixed upper limit</p>
</div>
<span class="comment-copy">Note that <code>x in range(25, 76)</code> can also be spelled <code>25 &lt;= x &lt; 76</code>.</span>
<span class="comment-copy">Couldn't you just write <code>any(start &lt;= x &lt; end ...</code> and avoid searching in a list/generator?</span>
<span class="comment-copy">@imaluengo that would work too, as long as <code>x</code> will always be an integer (<code>50.1</code>, for example, would give different results). In 3.x, searching in a <code>range</code> is <code>O(1)</code>, so if that's the case the efficiency isn't so bad.</span>
<span class="comment-copy">Wow, didn't know about O(1) in python 3. That is interesting, thx for the tip!</span>
<span class="comment-copy">@imaluengo <i>only</i> in 3.x, though - both <code>range</code> and <code>xrange</code> in 2.x are <code>O(n)</code> for membership testing.</span>
