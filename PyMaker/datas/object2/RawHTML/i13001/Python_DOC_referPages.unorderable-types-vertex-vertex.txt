<div class="post-text" itemprop="text">
<p>I'm working on a dijkstra and I get this error:
TypeError: unorderable types: Vertex() &lt; Vertex()</p>
<p>The whole error log is:</p>
<pre><code>Traceback (most recent call last):
  File "C:/Users/Dimitar/PycharmProjects/Dijkstra/Dijkstra.py", line 165, in &lt;module&gt;
    dijkstra(g, g.get_vertex('a'))
  File "C:/Users/Dimitar/PycharmProjects/Dijkstra/Dijkstra.py", line 101, in dijkstra
    heapq.heapify(unvisited_queue)
TypeError: unorderable types: Vertex() &lt; Vertex()
</code></pre>
<p>Here is my code :</p>
<pre><code>import sys


class Vertex:
    def __init__(self, node):
        self.id = node
        self.adjacent = {}
        # Set distance to infinity for all nodes
        self.distance = sys.maxsize
        # Mark all nodes unvisited        
        self.visited = False
        # Predecessor
        self.previous = None

    def add_neighbor(self, neighbor, weight=0):
        self.adjacent[neighbor] = weight

    def get_connections(self):
        return self.adjacent.keys()

    def get_id(self):
        return self.id

    def get_weight(self, neighbor):
        return self.adjacent[neighbor]

    def set_distance(self, dist):
        self.distance = dist

    def get_distance(self):
        return self.distance

    def set_previous(self, prev):
        self.previous = prev

    def set_visited(self):
        self.visited = True

    def __str__(self):
        return str(self.id) + ' adjacent: ' + str([x.id for x in self.adjacent])


class Graph:
    def __init__(self):
        self.vert_dict = {}
        self.num_vertices = 0

    def __iter__(self):
        return iter(self.vert_dict.values())

    def add_vertex(self, node):
        self.num_vertices = self.num_vertices + 1
        new_vertex = Vertex(node)
        self.vert_dict[node] = new_vertex
        return new_vertex

    def get_vertex(self, n):
        if n in self.vert_dict:
            return self.vert_dict[n]
        else:
            return None

    def add_edge(self, frm, to, cost=0):
        if frm not in self.vert_dict:
            self.add_vertex(frm)
        if to not in self.vert_dict:
            self.add_vertex(to)

        self.vert_dict[frm].add_neighbor(self.vert_dict[to], cost)
        self.vert_dict[to].add_neighbor(self.vert_dict[frm], cost)

    def get_vertices(self):
        return self.vert_dict.keys()

    def set_previous(self, current):
        self.previous = current

    def get_previous(self, current):
        return self.previous


def shortest(v, path):
    ''' make shortest path from v.previous'''
    if v.previous:
        path.append(v.previous.get_id())
        shortest(v.previous, path)
    return


import heapq


# noinspection PyArgumentList
def dijkstra(aGraph, start):
    print('''Dijkstra's shortest path''')
    # Set the distance for the start node to zero 
    start.set_distance(0)

    # Put tuple pair into the priority queue
    unvisited_queue = [(v.get_distance(), v) for v in aGraph]
    heapq.heapify(unvisited_queue)

    while len(unvisited_queue):
        # Pops a vertex with the smallest distance 
        uv = heapq.heappop(unvisited_queue)
        current = uv[1]
        current.set_visited()

        for next in current.adjacent:
            # if visited, skip
            if next.visited:
                continue
            new_dist = current.get_distance() + current.get_weight(next)

            if new_dist &lt; next.get_distance():
                next.set_distance(new_dist)
                next.set_previous(current)
                print
                ('updated : current = %s next = %s new_dist = %s' \
                % (current.get_id(), next.get_id(), next.get_distance()))
            else:
                print
                ('not updated : current = %s next = %s new_dist = %s' \
                % (current.get_id(), next.get_id(), next.get_distance()))

        # Rebuild heap
        # 1. Pop every item
        while len(unvisited_queue):
            heapq.heappop(unvisited_queue)
        # 2. Put all vertices not visited into the queue
        unvisited_queue = [(v.get_distance(), v) for v in aGraph if not v.visited]
        heapq.heapify(unvisited_queue)


if __name__ == '__main__':

    g = Graph()

    g.add_vertex('a')
    g.add_vertex('b')
    g.add_vertex('c')
    g.add_vertex('d')
    g.add_vertex('e')
    g.add_vertex('f')

    g.add_edge('a', 'b', 7)
    g.add_edge('a', 'c', 9)
    g.add_edge('a', 'f', 14)
    g.add_edge('b', 'c', 10)
    g.add_edge('b', 'd', 15)
    g.add_edge('c', 'd', 11)
    g.add_edge('c', 'f', 2)
    g.add_edge('d', 'e', 6)
    g.add_edge('e', 'f', 9)

    print
    ('Graph data:')
    for v in g:
        for w in v.get_connections():
            vid = v.get_id()
            wid = w.get_id()
            print
            ('( %s , %s, %3d)' % ( vid, wid, v.get_weight(w)))

    dijkstra(g, g.get_vertex('a'))

    target = g.get_vertex('e')
    path = [target.get_id()]
    shortest(target, path)
    print('The shortest path : %s' % (path[::-1]))
</code></pre>
<p>Can some one explain me why I get this kind of error. I'm a self learner and some help will be really appreciated. </p>
<p>The line of code that causes the error is :
heapq.heapify(unvisited_queue)</p>
<p>Thanks in advance to everyone who comment on the topic.</p>
<p>Best,
Dimitar</p>
</div>
<div class="post-text" itemprop="text">
<p>A custom type does not implicitly define an ordering between its instances:</p>
<pre><code>&gt;&gt;&gt; v1 = Vertex(1)
&gt;&gt;&gt; v2 = Vertex(2)
&gt;&gt;&gt; v1 &lt; v2
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unorderable types: Vertex() &lt; Vertex()
</code></pre>
<p>You need to tell python how to compare your vertices. You need to implement <a href="https://docs.python.org/3/reference/datamodel.html#object.__lt__" rel="nofollow noreferrer">rich comparison</a> methods to do so. Since <code>heapify</code> requires <code>&lt;</code>, you must at least implement <code>__lt__</code>.</p>
<p>You can also have a look at the <a href="https://docs.python.org/3.5/library/functools.html#functools.total_ordering" rel="nofollow noreferrer"><code>@total_ordering</code></a> decorator to avoid implementing all of them.</p>
<p>Something along the lines of:</p>
<pre><code>from functools import total_ordering

@total_ordering
class Vertex:
    # Your current class code

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.distance == other.distance
        return NotImplemented

    def __lt__(self, other):
        if isinstance(other, self.__class__):
            return self.distance &lt; other.distance
        return NotImplemented
</code></pre>
<p>And if you need to use that class as a dictionary key, youâ€™ll need to add the <code>__hash__</code> method. Probably like so:</p>
<pre><code>    def __hash__(self):
        return id(self)
</code></pre>
</div>
<span class="comment-copy">Thanks a lot mate!</span>
<span class="comment-copy">@MitkoFotev : Running this code says, unhashable type Vertex. Did you solve that issue ?</span>
<span class="comment-copy">@vidyasagarr7 See update</span>
<span class="comment-copy">Thank you mathias.</span>
