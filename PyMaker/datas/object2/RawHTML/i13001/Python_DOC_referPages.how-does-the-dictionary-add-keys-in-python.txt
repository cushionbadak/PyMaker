<div class="post-text" itemprop="text">
<p>When I run the code and change my range to 1, I get what I expect when I set the range to 2 I still get the first 2 sets I the right order once I tell it to adda third set they are no longer in order (the newest item added is not put at the end). Why is this/what is the rule for determining where the newest item will be placed in a dictionary?</p>
<pre><code>coded2 = []
for char in coded:
    coded2.append(char)

plain2 = []
for char in plain:
    plain2.append(char)

i = 0
d = {}

for num in range(5):
    d[coded2[i]] = plain2[i]
    i += 1
print d
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In python <code>dict</code> is really a <code>list</code> with a hash function to generate indices.</p>
<p>The hash function is exposed by python:</p>
<pre><code>&gt;&gt;&gt; hash
&lt;built-in function hash&gt;
</code></pre>
<p>Note that the hash function was changed in python 3:</p>
<p><strong>Python2.7.10</strong></p>
<pre><code>&gt;&gt;&gt;&gt;&gt;&gt; hash("foo")
-740391237
</code></pre>
<p><strong>Python3.5.0</strong></p>
<pre><code>&gt;&gt;&gt; hash("foo")
866150152168011056
</code></pre>
<p>When you type</p>
<pre><code>mydict = {}
</code></pre>
<p>What really happens is that python will allocate an <strong>empty list with size 8</strong>. </p>
<p>When you now start adding items to the <code>mydict</code> python will calculate the hash values of the items and consider the <strong>3 least significant bits</strong> thereof to calculate its index in the list:</p>
<pre><code>def bits(integer):
    return "".join(str(x) for x in [1&amp;(integer&gt;&gt;i) for i in range(32)[::-1]])
&gt;&gt;&gt;for item in "myitem","hashfunction","python":
       print(bits(hash(item))[-3:])
101
100
000
</code></pre>
<p>So a dict with these keys will have a different order than you expect:</p>
<pre><code>&gt;&gt;&gt; mydict={}
&gt;&gt;&gt; mydict["myitem"]=None
&gt;&gt;&gt; mydict["hashfunction"]=None
&gt;&gt;&gt; mydict["python"]=None
&gt;&gt;&gt; print mydict
{'python': None, 'hashfunction': None, 'myitem': None}
</code></pre>
<p>They're the order of the last three digits of the hash in the dict.</p>
<p>As the dict gets fuller, python will reallocate it and use a different hash, for small dictionaries ( up to 128k) it will <strong>quadruple its size</strong>, for larger dicts it will *double its size**. This reallocation happens when the dict gets 2/3 full.</p>
<pre><code>&gt;&gt;&gt; keys=["myitem","hashfunction","python","in","a","super","large","dict"]
&gt;&gt;&gt; for item in keys:
    print(item, bits(hash(item))[-5:])
('myitem', '01101')
('hashfunction', '00100')
('python', '01000')
('in', '10111')
('a', '00000')
('super', '11100')
('large', '10000')
('dict', '10100')
&gt;&gt;&gt;mydict={key:None for key in keys}
&gt;&gt;&gt;print mydict
{'a': None, 'hashfunction': None, 'python': None,
'myitem': None, 'large': None, 'dict': None, 'in': None, 'super': None}
</code></pre>
<p>This means that the order in a <code>dict</code> will change while you're putting in more items, sometimes radically.</p>
<p>Note that a dict will only ever increase its size, never shrink as you <code>del</code> items from it.</p>
<p>To know more about <code>dict</code> and how it handles <a href="https://en.wikipedia.org/wiki/Collision_(computer_science)" rel="nofollow">hash collisions</a> I recommend Brandon Rhodes' <strong>excellent</strong> Pycon2010 talk on the inner workings of <code>dict</code>: <a href="https://www.youtube.com/watch?v=fYlnfvKVDoM" rel="nofollow">The mighty dictionary</a></p>
<hr/>
<p>Bottom line is that in a <code>dict</code> you should never rely on its order.</p>
<p>Raymond Hettinger implemented an <code>OrderedDict</code> class in the <code>collections</code> module.</p>
<pre><code>from collections import OrderedDict
d = OrderedDict()

for num in range(5):
    d[num] = num
print d #OrderedDict([(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)])
</code></pre>
<p>It inherits from <code>dict</code> but wraps around some code to remember the order in which the keys were added. You can rely on the ordering of <code>OrderedDict</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, dictionaries are unordered. The items are not stored in the order in which they are entered. You can use <code>OrderedDict</code> if you wish to conserve the order. </p>
<pre><code>from collections import OrderedDict
d = OrderedDict()

for num in range(5):
    d[num] = num
print d #OrderedDict([(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here you can use OrderDict</p>
<p>According to <a href="https://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="nofollow">Link</a> :</p>
<p>Ordered dictionaries are just like regular dictionaries but they remember the order that items were inserted. When iterating over an ordered dictionary, the items are returned in the order their keys were first added.</p>
<p>class collections.OrderedDict([items])
Return an instance of a dict subclass, supporting the usual dict methods. An OrderedDict is a dict that remembers the order that keys were first inserted. If a new entry overwrites an existing entry, the original insertion position is left unchanged. Deleting an entry and reinserting it will move it to the end.</p>
</div>
<span class="comment-copy">Dicts are unordered. It does not make sense to expect order in the items stored. Use <code>OrderedDict</code> for that</span>
<span class="comment-copy">The values <a href="http://stackoverflow.com/questions/15479928/why-is-the-order-in-python-dictionaries-and-sets-arbitrary">are not ordered</a>, this is some kind of randomness. Use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>OrderedDict</code></a> if this matters.</span>
<span class="comment-copy">Great answer. <a href="http://www.laurentluce.com/posts/python-dictionary-implementation/" rel="nofollow noreferrer">Here's</a> another resourse people can consider looking into.</span>
<span class="comment-copy">Thanks, I was too late to the party but wanted to finish the answer anyway. I hope someone reads it.</span>
