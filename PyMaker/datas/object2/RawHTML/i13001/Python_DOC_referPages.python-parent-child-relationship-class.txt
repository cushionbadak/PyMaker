<div class="post-text" itemprop="text">
<p>I've written up a class as seen below. I want to add the attribute of '<strong>parent</strong>' to my base class Node. I was wondering if someone could show me how to properly do this. I've been given guidance on how to do it but I'm not entire sure how to write it syntax wise. Here is the suggested way to do it...</p>
<blockquote>
<p>generally I would hide the parent attribute behind a property so when
  its set, the children array of the previous parent can be modified so
  if you say n.parent = x, it actually remove node n from it's parent
  and set the parent value</p>
</blockquote>
<pre><code>class Node(object):
    def __init__(self, name, attributes, children):
        self.name = name
        self.attributes = attributes if attributes is not None else {}
        self.children = children if children is not None else []


class Camera(Node):
    def __init__(self, name="", attributes=None, children=None, enabled=True):
        super(Camera, self).__init__(name=name, attributes=attributes, children=children)
        self.enabled = enabled
</code></pre>
<p><strong>updated</strong></p>
<pre><code>import weakref

class Node(object):
    _parent = None

    def __init__(self, name, attributes, children, parent):
        self.name = name
        self.attributes = attributes if attributes is not None else {}
        self.children = children if children is not None else []
        self.parent = parent

        for child in children:
            child.parent = self

    @property
    def parent(self):
        return self._parent() if self._parent is not None else None

    @parent.setter
    def parent(self, newparent):
        oldparent = self.parent

        if newparent is oldparent:
            return
        if oldparent is not None:
            oldparent.children.remove(self)
        if self not in newparent.children:
            newparent.children.append(self)
        self._parent = weakref.ref(newparent) if newparent is not None else None


class Camera(Node):
    def __init__(self, name="", attributes=None, children=None, enabled=True, parent=None):
        super(Camera, self).__init__(name=name, attributes=attributes, children=children, parent=parent)
        self.enabled = enabled




Camera()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Example code, incorporating <code>weakref</code> to avoid reference cycles that can delay cleanup (or prevent it entirely in some cases, <a href="https://docs.python.org/3/whatsnew/3.4.html#whatsnew-pep-442" rel="nofollow">particularly on Python 3.3 and earlier</a>):</p>
<pre><code>import weakref

class Node:
# If this is Python 2, you need to explicitly inherit from object to 
# be a new-style class with descriptor support (which allows properties), so
# the class line would be:
# class Node(object):
# On Py3, it's implicit and can be omitted

    # Ensure attribute readable so getter/setter don't need to use has/getattr
    # Will be allocated per-instance when self.parent is assigned in __init__
    # So on Py3.3+, it will still get the compact key-sharing dicts for attributes
    _parent = None

    # Adding defaults for all values matching Camera for simplicity
    def __init__(self, name='', attributes=None, children=None, parent=None):
        self.name = name
        self.attributes = attributes if attributes is not None else {}
        self.children = children if children is not None else []
        self.parent = parent
        for child in children:
            child.parent = self

    @property
    def parent(self):
        return self._parent() if self._parent is not None else None

    @parent.setter
    def parent(self, newparent):
        oldparent = self.parent
        # If setting to existing parent, then no-op
        # Remove this check and early-out if you want to be able to move
        # a node to the end of its parent's children by reassigning the same parent
        if newparent is oldparent:
            return
        if oldparent is not None:
            oldparent.children.remove(self)
        if self not in newparent.children:
            newparent.children.append(self)
        self._parent = weakref.ref(newparent) if newparent is not None else None
</code></pre>
<p>Typically, to avoid issues with changing parent class prototypes, I put additional parameters to child class <code>__init__</code> methods first, not last. Because I gave <code>__init__</code> defaults on <code>Camera</code>, this makes <code>Camera</code> very simple:</p>
<pre><code>class Camera(Node):
    def __init__(self, enabled=True, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # On Py2, super isn't magic, so you need to be explicit unlike Py3:
        # super(Camera, self).__init__(*args, **kwargs)
        self.enabled = enabled
</code></pre>
<p>As you can see, by moving the <code>Camera</code> unique <code>__init__</code> param to the front, <code>Camera</code> can stop paying attention to changes in the <code>Node</code> <code>__init__</code>; the new <code>Camera</code> works with the original <code>Node</code> or the new <code>Node</code> (that accepts <code>parent</code> and assigns <code>self.parent</code>) just fine, because it's less tightly coupled to the exact parameter ordering. Note that this does mean that if <code>enabled</code> is not passed positionally, then all arguments must be passed by keyword.</p>
<p>Please comment if I made any mistakes, but that should be close to correct. In general, I had the <code>Node</code> class use the <code>parent</code> accessor to simplify the code by removing the difficulty with handling <code>None</code> properly (<code>None</code> is not weak referencable).</p>
</div>
<span class="comment-copy">Additional note: Probably best to use <code>weakref.ref</code> or <code>weakref.proxy</code> to store the <code>_parent</code> attribute (we're assuming <code>parent</code> is a <code>property</code>, so the convention in that case is usually to name the "real" attribute with an underscore prefix). Otherwise, your trees are guaranteed to create reference cycles, so they won't be cleaned up deterministically (and memory is leaked if some nut disables cyclic gc, or any object in the cycle has a <code>class</code> with a <code>__del__</code> finalizer, <a href="https://docs.python.org/3/whatsnew/3.4.html#whatsnew-pep-442" rel="nofollow noreferrer">on Python 3.3 and earlier, cyclic gc can't handle it</a>).</span>
<span class="comment-copy">what im hoping to do parent a camera to another camera</span>
<span class="comment-copy">I've gone ahead and updated my code above, i had pasted old code. I'm using the new 'super' stuff like you mentioned. sorry for the confusion. Let me know if that changes anything in your example of the code</span>
<span class="comment-copy">does your example demonstrate everything mentioned in the initial question which i highlighted in yellow?</span>
<span class="comment-copy">@JokerMartini: I initially forgot about adding it to the <code>children</code> of the new <code>parent</code>, but that's in there now. Most of the magic is in the <code>@parent.setter</code> method; whenever you assign <code>n.parent = x</code>, it calls that method with <code>x</code> as the new parent, which will do the <code>weakref</code> magic for you, remove <code>n</code> from its previous <code>parent</code>'s (if any) <code>children</code>, and add it to the new <code>parent</code>'s (if not <code>None</code>) <code>children</code>. I also added an optimization/correctness early out for the <code>setter</code> so reassigning the same <code>parent</code> over and over doesn't do unnecessary work.</span>
<span class="comment-copy">what happens if i delete a parent, does it delete the children then as well? More correctly worded, if i delete a Camera which has children, does it delete the children as well? I'm assuming it should.</span>
<span class="comment-copy">Yeah, that's the point of the <code>weakref.ref</code> usage, it means that the strong reference chain is one-way (assuming this is a directed acyclic graph, so you can't have a node be its own parent or grandparent). In CPython, that means as soon as the last reference to a <code>Node</code> is gone, that <code>Node</code> and all its "descendants" (that aren't referenced elsewhere) are immediately cleaned up. If a descendant <i>is</i> referenced elsewhere, then only that descendant and its descendants survive, the rest of the tree isn't kept around forever.</span>
