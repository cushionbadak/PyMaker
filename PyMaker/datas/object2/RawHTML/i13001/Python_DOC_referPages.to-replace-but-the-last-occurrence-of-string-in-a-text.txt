<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/16267993/python-replace-terms-in-a-string-except-for-the-last">Python: replace terms in a string except for the last</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>Suppose I have this piece of text:</p>
<pre><code>Saturday and Sunday and Monday and Tuesday and Wednesday and Thursday and Friday are days of the week.  
</code></pre>
<p>I want all but the last <code>and</code> to be replaced with a comma:</p>
<pre><code>Saturday, Sunday, Monday, Tuesday, Wednesday, Thursday and Friday are days of the week. 
</code></pre>
<p>Is there an easy way to do that in regex? As far as I know, the <code>replace</code> method in regex replaces the strings all the way through. </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/stdtypes.html#str.replace" rel="noreferrer"><code>str.replace()</code></a> method has a <code>count</code> argument:</p>
<blockquote>
<p><code>str.replace(old, new[, count])</code></p>
<p>Return a copy of the string with all occurrences of substring old replaced by new. If the optional argument count is given, only the first count occurrences are replaced.</p>
</blockquote>
<p>Then, use <a href="https://docs.python.org/3/library/stdtypes.html#str.count" rel="noreferrer"><code>str.count()</code></a> to check how many <code>and</code> in the string and then <code>-1</code> (because you need the last <code>and</code>):</p>
<blockquote>
<p><code>str.count(sub[, start[, end]])</code></p>
<p>Return the number of non-overlapping occurrences of substring sub in the range <code>[start, end]</code>. Optional arguments start and end are interpreted as in slice notation.</p>
</blockquote>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; string = 'Saturday and Sunday and Monday and Tuesday and Wednesday and Thursday and Friday are days of the week.'   
&gt;&gt;&gt; string.replace(' and ', ", ", (string.count(' and ')-1))
'Saturday, Sunday, Monday, Tuesday, Wednesday, Thursday and Friday are days of the week.  '
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want a regex solution, you could match all the <code>and</code>s which are followed by another one later in the string.</p>
<pre><code>&gt;&gt;&gt; str='Monday and Tuesday and Wednesday and Thursday and Friday and Saturday and Sunday are the days of the week.'
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(' and (?=.* and )', ', ', str)
'Monday, Tuesday, Wednesday, Thursday, Friday, Saturday and Sunday are the days of the week.'
</code></pre>
<p><code>(?=</code>...<code>)</code> is a lookahead which makes sure there is a match later in the string without including it in the actual match (so also not in the substitution).  It's sort of like a conditional on the match.</p>
</div>
<span class="comment-copy">Not using the Oxford comma, I see.</span>
<span class="comment-copy">Strictly speaking, regular expressions only do matching, and substitution is a feature of the hosting language, usually its string processing facilities.</span>
<span class="comment-copy">This is a bit unreadable. Maybe you could amuse yourself with it.      "".join(reduce(lambda x , y : x+["and"+y] if len(x)==0 else x+[","+y] ,re.split("and","Saturday and Sunday and Monday and Tuesday and Wednesday and Thursday and Friday are days of the week. ")[::-1],[])[::-1])[1:]</span>
<span class="comment-copy">What will happen to this string: <code>'Monday and Tuesday and Wednesday and Thursday and Friday and Saturday and Sunday are the days of the week and it is Monday.'</code>?</span>
<span class="comment-copy">That's easy to find out, isn't it?  Maybe change the <code>.*</code> in the lookahead to <code>[^.?!]*</code> to never allow it to match past sentence punctuation.  But then how do you deal with inter-sentence abbreviations with a period which isn't a sentence terminator?  You are quickly ending up with <a href="http://programmers.stackexchange.com/questions/223634/what-is-meant-by-now-you-have-two-problems">Zawinski's problem</a>.  For anything beyond simple tokens, regex is probably not a suitable tool.</span>
<span class="comment-copy">But then for this simple problem you could probably restrict it even further, and hope it never matches past a verb, either.  "John and Mary and I went to Buckingham Palace and had a beer."</span>
<span class="comment-copy">As a workaround (that may also fail in some situations), you could limit the number of words between each occurrence of <code>and</code>, ie: <code>' and (?=(?:[^.,?! ]+ ){1,4}and )'</code>.</span>
<span class="comment-copy">@Mariano John and John's second cousin's husband's dog and I ...? Actually that's a pretty good idea for a limited scope, but you can't solve the general problem with regex.</span>
