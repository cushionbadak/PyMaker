<div class="post-text" itemprop="text">
<p>My PyQt application no longer prints the error (stderr?) to the console.</p>
<p>I use QtDesigner and import the UI like this:</p>
<pre><code>from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from PyQt5.uic import loadUiType
Ui_MainWindow, QMainWindow = loadUiType("test.ui")

class Main(QMainWindow, Ui_MainWindow):
    """Main window"""
    def __init__(self,parent=None):
        super(Main, self).__init__(parent)
        self.setupUi(self)
        self.pushButton.clicked.connect(self.testfunc)

   def testfunc(self):
        print(9/0)

if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    main = Main()
    main.show()
    sys.exit(app.exec_())
</code></pre>
<p>test.ui contains a QPushButton and a label. When I call testfunc (which obviously gives an error) in a non-Qt application, I get the error message, traceback, etc. When I execute this code, it just exits. </p>
<p>I wrote a PyQt application without QtDesigner before and it printed the errors to the console as expected. What's the difference with QtDesigner and inheritance?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is probably due to changes in the way exceptions are dealt with in PyQt-5.5. To quote from the <a href="http://pyqt.sourceforge.net/Docs/PyQt5/incompatibilities.html#unhandled-python-exceptions" rel="noreferrer">PyQt5 Docs</a>:</p>
<blockquote>
<p>In PyQt v5.5 an unhandled Python exception will result in a call to
  Qtâ€™s qFatal() function. By default this will call abort() and the
  application will terminate. Note that an application installed
  exception hook will still take precedence.</p>
</blockquote>
<p>When I run your example in a normal console, this is what I see:</p>
<pre><code>$ python test.py
Traceback (most recent call last):
  File "test.py", line 213, in testfunc
    print(9/0)
ZeroDivisionError: division by zero
Aborted (core dumped)
</code></pre>
<p>So the main difference is that the application will now immediately abort when encountering an unhandled exception (i.e. just like a normal python script would). Of course, you can still control this behaviour by using a <code>try/except</code> block or globally by overriding <a href="http://docs.python.org/3/library/sys.html#sys.excepthook" rel="noreferrer">sys.excepthook</a>.</p>
<p>If you're not seeing any traceback, this may be due to an issue with the Python IDE you're using to run your application.</p>
<p>PS:</p>
<p>As a bare minimum, the old PyQt4 behaviour of simply printing the traceback to stdout/stderr can be restored like this:</p>
<pre><code>def except_hook(cls, exception, traceback):
    sys.__excepthook__(cls, exception, traceback)

if __name__ == "__main__":

    import sys
    sys.excepthook = except_hook
</code></pre>
</div>
<span class="comment-copy">Did you install PyQt using the precompiled binary, or did you compiled it yourself?</span>
<span class="comment-copy">I used this precombiled 64-bit binary: <a href="https://riverbankcomputing.com/software/pyqt/download5" rel="nofollow noreferrer">riverbankcomputing.com/software/pyqt/download5</a></span>
<span class="comment-copy">I guess that is the problem. I had the very same issue, so I reinstalled PyQt5 from sources, compiling it using mingw32 and everything now is working.</span>
<span class="comment-copy">I had trouble compiling it so I just rolled back to an earlier version (5.4.1 instead of 5.5.1). This did the trick. The error messages are back and I can properly debug my application. Thank you!</span>
<span class="comment-copy">@Jannis How does one roll back to a previous version? Where can those be found?</span>
<span class="comment-copy">Thank you for the response! Yes, when I used a try/except block the application did not terminate.   I don't think this is an issue with the IDE. For a non-GUI test I still had the traceback and I tried this with both pycharm and eclipse. And with the older PyQt version the traceback is working as I want it to.  With PyQt5.5 could still see the traceback if I ran the program in "debug mode". That was really slow though. How are you supposed to debug a PyQt5.5 application after the latest update?</span>
<span class="comment-copy">@Jannis. But that <b>does</b> sound like an issue with those IDEs, doesn't it? As I showed in my answer, the traceback <i>is</i> shown when I run your script in a console. So why can't your IDEs do that? I have never used an IDE myself, and always set an excepthook in my programs - so nothing much has changed for me when it comes to debugging.</span>
<span class="comment-copy">You are right, I did not read your comment carefully enough.   I reinstalled PyQt5.5 to test this. In a console I get the same output as you. In both pycharm and eclipse the traceback does not show up though. They don't show the traceback with PyQt5.5 while they do show it for PyQt5.4.1. I didn't change any options in between. I will look into using excepthooks soon. For now I am happy with the normal traceback.</span>
<span class="comment-copy">Spyder also doesn't show traceback. Is it a correct way to handle this behaviour? <a href="https://gist.github.com/Winand/e98e3f2f073826b7c08b58fb6d338b51" rel="nofollow noreferrer">gist.github.com/Winand/e98e3f2f073826b7c08b58fb6d338b51</a></span>
<span class="comment-copy">@Winand. You should probably ask the Spyder devs.</span>
