<div class="post-text" itemprop="text">
<p>When i generate a source distribution from my Python package using</p>
<pre><code>python setup.py sdist --formats=zip
</code></pre>
<p>I am using a <code>MANIFEST.in</code> file to specify additional files to include.</p>
<p>Up until this point, I was including the output of my Sphinx documentation as part of the package. This is probably not standard practise, but these were internally distributed packages around my team. The documentation was not being hosted, so it seemed easy to just bundle it in with the package.</p>
<p>Anyway, I would build my Sphinx docs and then add</p>
<pre><code>recursive-include docs/_build/html *
</code></pre>
<p>to the <code>MANIFEST.in</code> file. I also had <code>include_package_data=True</code> in the <code>setup.py</code> file. This was giving me an initial solution which suited my requirements.</p>
<p>I now have a server where I host the documentation. So I no longer need to bundle it in the package. I deleted the line above from my <code>MANIFEST.in</code> - <strong>but the files are still being included</strong> and I cannot figure out why...</p>
<p>Is there some other location that could be overriding the <code>MANIFEST.in</code> that I don't know about? I have even tried removing and re-adding the manifest file with no effect...</p>
<p><strong>setup.py</strong> (i've changed name, email, and URL to 'dummy' values to post here)</p>
<pre><code>from setuptools import setup
import json
import os

REQUIRED = ["lxml", "jinja2"]


def ver():
    with open("meta.json") as meta:
        return json.load(meta)["version"]


def readme():
    with open("README.txt") as rm:
        return rm.read()


setup(name="zfim",
      version=ver(),
      description="Python API for PTC Integrity IM server",
      long_description=readme(),
      url="//path/to/repo",
      author="...",
      author_email="...",
      license="MIT",
      packages=["zfim"],
      install_requires=REQUIRED,
      entry_points={
          "console_scripts": []
      },
      dependency_links=["//path/to/local/package_repo"],
      zip_safe=True,
      include_package_data=True,
      classifiers=[
          "Programming Language :: Python :: 3",
          "Operation System :: Windows"])
</code></pre>
<p><strong>MANIFEST.in</strong></p>
<pre><code>include README.txt
include LICENSE.txt
include requirements.txt
include meta.json
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If i remove the <code>package-name.egg-info</code> directory, before re-running <code>python setup.py sdist</code> then any changes I made to the <code>MANIFEST.in</code> file are respected.</p>
<p>This seems like a bit of a hack, but it seems to work for me.</p>
</div>
<span class="comment-copy">Please show your <code>setup.py</code> and <code>MANIFEST.in</code>.</span>
<span class="comment-copy">Also, according to <a href="https://docs.python.org/3/distutils/commandref.html#creating-a-source-distribution-the-sdist-command" rel="nofollow noreferrer">the docs</a>, <code>recursive-include</code> requires one or more file patterns after the dir to work; are you sure you don't have some <code>graft</code> hiding in the manifest?</span>
<span class="comment-copy">do you have a <code>setup.cfg</code>?</span>
<span class="comment-copy">@hoefling Yes you are right, i was using a wildcard in the <code>recursive-include</code> command. I have edited the post to show this.</span>
