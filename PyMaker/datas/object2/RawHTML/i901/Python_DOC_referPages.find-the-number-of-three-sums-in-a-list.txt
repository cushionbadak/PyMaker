<div class="post-text" itemprop="text">
<p>If you are given a list </p>
<pre><code>numList = [1,2,3,4,5,6,7]
</code></pre>
<p>and you are asked to find the number of three sums that add to a particular number </p>
<pre><code>target = 10
</code></pre>
<p>How you could come up with the answer? </p>
<p>For example, the combination of : <code>[1,3,6], [1,2,7], [2,3,5], [1,4,5]</code> 
would result in a return value of <code>4</code>. </p>
<p>I know how to use a hashing based function to come up with the one three sum for the solution using the code below but am not sure how to add all unique three sum solutions. </p>
<pre><code>def find3Numbers(A,arr_size,sum): 
    for i in range(0,arr_size-1): 
        #Find pair in subarray A[i+1..n-1]  
        # with sum equal to sum - A[i] 
        s = set() 
        curr_sum = sum - A[i] 
        for j in range(i+1,arr_size): 
            if (curr_sum - A[j]) in s: 
                print("Triplet is", A[i],  
                        ", ", A[j], ", ", curr_sum-A[j]) 
                return True
            s.add(A[j]) 

    return False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/2/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">itertools.combinations</a></p>
<pre><code>from itertools import combinations

numList = [1,2,3,4,5,6,7]

def check(value):
    return sum(value) == 10

filtered = list(filter(check, list(combinations(numList, 3))))
print(filtered)
#[(1, 2, 7), (1, 3, 6), (1, 4, 5), (2, 3, 5)]
</code></pre>
<p>Combinations finds all possible combinations, then I just filtered it down to only the ones that added up to 10</p>
</div>
<div class="post-text" itemprop="text">
<p>You just need to tweak your solution to count the solutions rather than returning after the first solution is found:</p>
<pre><code>def find3Numbers(A,arr_size,sum):
    count_sums = 0

    for i in range(0,arr_size-1): 
        #Find pair in subarray A[i+1..n-1]  
        # with sum equal to sum - A[i] 
        s = set() 
        curr_sum = sum - A[i] 
        for j in range(i+1,arr_size): 
            if (curr_sum - A[j]) in s: 
                count_sums += 1 # Count here
            s.add(A[j]) 

    return count_sums # Finally return the count
</code></pre>
<hr/>
<p>Note this is not to say your algorithm is now correct. Moving on, you may want to use a counting set rather than a regular set for <code>s</code>. See <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>.</p>
</div>
<span class="comment-copy">Looks like a homework question but <code>itertools.combinations</code> comes to mind here...</span>
<span class="comment-copy">Note: it is a bad idea to use variable or argument names that hide python's builtin types or functions (e.g. an argument called <code>sum</code>).</span>
