<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2955412/destructuring-bind-dictionary-contents">Destructuring-bind dictionary contents</a>
<span class="question-originals-answer-count">
                    9 answers
                </span>
</li>
</ul>
</div>
<p>I'm trying to write a function <code>spread</code> in Python 3.6 (I cannot use any newer release), and, so far, I've got something that looks like this:</p>
<pre class="lang-py prettyprint-override"><code>d = {"a": 1, "b": 2, "c": 3}
a, b, c = spread(d, ['a', 'b', 'c'])
a
&gt;&gt; 1
b
&gt;&gt; 2
c
&gt;&gt; 3
</code></pre>
<p><strong>The problem is</strong>: there is kind of duplication since the position of the left side must match the keys list on the function's 2nd argument for it to make sense. So, change the order of the keys list, and variable <code>a</code> will hold a <em>different</em> value than <code>d['a']</code>. I need to keep consistency by either</p>
<pre class="lang-py prettyprint-override"><code>a, b, c = spread(d) # how?
</code></pre>
<p>Or <code>spread(d, ???)</code>. I'm <strong>not</strong> considering initializing <code>a, b, c</code> with <code>None</code> and then pass them as a list.</p>
<p>Any thoughts or leads on how to approach this? Is it even possible?
Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>No this isn't really possible.  You can't have </p>
<pre><code>a, b, c = spread(d)
</code></pre>
<p>and </p>
<pre><code>a, c, b = spread(d)
</code></pre>
<p>give the same value to <code>b</code>.  This is because <a href="https://docs.python.org/3/reference/expressions.html#evaluation-order" rel="nofollow noreferrer">the right side of an assignment statement is evaluated first</a>.  So <code>spread</code> executes and returns its values before your code knows which order you put them in on the left.  </p>
<p>Some googling leads be to believe that by "spread-like syntax for dicts", you're looking for the <code>**dict</code> syntax.  See <a href="https://stackoverflow.com/questions/36901/what-does-double-star-asterisk-and-star-asterisk-do-for-parameters">What does ** (double star/asterisk) and * (star/asterisk) do for parameters?</a></p>
</div>
<div class="post-text" itemprop="text">
<p><code>globals().update(d)</code> does what you ask, but...</p>
<ul>
<li>It works in the global scope only, <code>locals()</code> is not guaranteed to return a writable dictionary.</li>
<li>It impairs debuggability of your code.  If one of the variables set this way ends up with an unexpected value, no search will show you that this is the place the variable is being set.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You could assign the variables to the result of a values() call:</p>
<pre><code>&gt;&gt;&gt; d = {"a": 1, "b": 2, "c": 3}
&gt;&gt;&gt; a,b,c = d.values()
&gt;&gt;&gt; a
1
&gt;&gt;&gt; b
2
&gt;&gt;&gt; c
3
</code></pre>
<p>I don't recommend doing this for versions of Python where dict ordering is not guaranteed, but luckily this should work in 3.6 and above.</p>
</div>
<div class="post-text" itemprop="text">
<p>not very pretty, but you can sort of get there doing:</p>
<pre><code>def f1(a, b, c, **_):
    print(a)
    print(b)
    print(c)

d = {"a": 1, "b": 2, "c": 3}

f1(**d)
</code></pre>
<p>very different semantics, but posted in the hope it'll inspire something!</p>
</div>
<span class="comment-copy">Could you add an example of what "spread" does in ES6?</span>
<span class="comment-copy">why not just access the values in the dictionary? no need to pollute the module name-space like this normally</span>
<span class="comment-copy">Using <code>locals()</code> is actually a very interesting lead, thanks @Graipher. I don't know why your response was removed ):</span>
<span class="comment-copy">this seems to be a normative reference for javascript: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Object_destructuring" rel="nofollow noreferrer">Object destructuring</a></span>
<span class="comment-copy"><code>dict</code> objects are not really drop in replacements for javascript objects. <code>dict</code> objects are more like the equivalent to Javascript Map objects. You can't achieve this in Python without hacky globals stuff, and for local assignments, it would require even more hacky stuff.</span>
<span class="comment-copy">yeah, I got to this same point, but it's unfortunate the <code>**</code> cannot be used starting the right-hand side of the operation ):</span>
<span class="comment-copy">Thanks! It's a good lead, I'll try to make my way around using it (: Another user gave me this same lead earlier, but his comment was removed, unfortunately ):</span>
<span class="comment-copy">note that the guaranteed ordering is <i>insertion</i> order, or the order defined in the literal here. If you want something different, like alphabetical order, sorting is needed</span>
<span class="comment-copy">I wouldn't go for this option. Within the context I'm working, this just won't work, because I can never guarantee the upper layers will keep the expected order in an ordered dictionary. Thanks for your thoughts (:</span>
<span class="comment-copy">just realised this was implied in other commentsâ€¦  does having this as a separate answer serve any purpose?</span>
