<div class="post-text" itemprop="text">
<p>I need to get all possible 5 combinations from a list with the following constraints:</p>
<ul>
<li>Combinations must include repetitions.</li>
<li>The sum of all numbers is equal to 1.</li>
</ul>
<p>Here is my code so far:</p>
<pre><code>    number = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]
    comb = [c for c in itertools.product(number, repeat=5) if  c[0] + c[1] + c[2] + c[3] + c[4] == 1]
    for cb in comp:
        print(cb)
</code></pre>
<p>It seems I am not getting all possible combinations. For instance, the first line of output would be </p>
<pre><code>(0.1, 0.1, 0.1, 0.1, 0.6)
</code></pre>
<p>but does not include any of the following</p>
<pre><code>(0.6, 0.1, 0.1, 0.1, 0.1)
(0.1, 0.6, 0.1, 0.1, 0.1)
(0.1, 0.1, 0.6, 0.1, 0.1)
(0.1, 0.1, 0.1, 0.6, 0.1)
</code></pre>
<p>and so on. I also tried different approaches with </p>
<pre><code>itertools.combinations_with_replacement
itertools.permutations
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer">itertools.product</a> function does output what you want, the problem is in checking the equality of floating numbers, for that you can use <a href="https://docs.python.org/3/library/math.html#math.isclose" rel="nofollow noreferrer">math.isclose</a>:</p>
<pre><code>from itertools import product
import math
comb = [c for c in product(number, repeat=5) if math.isclose(sum(c), 1.0)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This looks like an interesting case of floating point arithmetic errors resulting in the sum being incorrect. More information can be found in the <a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow noreferrer">python documentation.</a></p>
<p>Here's an example of what's going on:</p>
<pre><code>&gt;&gt;&gt; 0.1 + 0.6 + 0.1 + 0.1 + 0.1 == 1
False
</code></pre>
<p>A solution would be to check if the sum is within some margin of error of 1:</p>
<pre><code>comb = [c for c in itertools.product(number, repeat=5) if abs(sum(c)  - 1) &lt;= .01]
</code></pre>
<p>Alternatively, you can round the sum and compare to fix the issue as well, like so:</p>
<pre><code>comb = [c for c in itertools.product(number, repeat=5) if round(sum(c), 2) == 1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As the other answers correctly point out, the issue is with floating point comparisons. Tenths don't have finite binary representations unless there are five of them.</p>
<p>Since you are interested in a very particular set of numbers, you could map them to integers instead of using <code>round</code>, <code>isclose</code> or <code>abs</code> comparison. That way you could make the comparison exact, then map the results back to the numbers you want.</p>
<p>In this case, you can multiply everything by 10 to get integers. For more complicated cases, you might need other factors, entirely different transformation function, or even possibly a lookup table.</p>
<pre><code>number = range(1, 10)
comb = (tuple(x / 10 for x in c) for c in itertools.product(number, repeat=5) if sum(c) == 10)
for cb in comp:
    print(cb)
</code></pre>
<p>Couple of other minor improvements:</p>
<ul>
<li>Use <code>sum</code> to add up the elements together instead of writing it out manually. It will make it much easier to add more elements to the sum.</li>
<li>Keep <code>comb</code> as a generator instead of turning it into a memory-hogging list unless you need to access it multiple times.</li>
</ul>
</div>
<span class="comment-copy">Do you want all possible permutations instead, since you consider <code>(0.1, 0.1, 0.1, 0.1, 0.6)</code> and <code>(0.6, 0.1, 0.1, 0.1, 0.1)</code> different?</span>
<span class="comment-copy">I believe you need permutation once you found the numbers whose sum is 1.<code>list(permutations((0.6, 0.1, 0.1, 0.1, 0.1)))</code></span>
<span class="comment-copy">Permutations should be a subset of the products, so that's not the issue. I think it's the floating point issue.</span>
<span class="comment-copy">Yes, I was thinking product function was giving most of the right answer but did not think about the floating issue. Many thanks</span>
<span class="comment-copy">@asmsr2 You are welcome!</span>
<span class="comment-copy">@mad-physicist there is a typo in the code comp should be comb</span>
