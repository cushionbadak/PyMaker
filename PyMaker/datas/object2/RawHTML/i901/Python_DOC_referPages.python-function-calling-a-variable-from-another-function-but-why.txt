<div class="post-text" itemprop="text">
<p>I know this one is pretty duplicated however:</p>
<pre><code>def func1():
    a = [1,2,3,4,5]
    return a

def func2():
    b = func1()
    print(b.a[0])

func2()

AttributeError: 'list' object has no attribute 'a'
</code></pre>
<p>I WANT TO use <code>'.'</code> dot function(syntax) to access variables declared in other functions like :</p>
<pre><code>print(b.a[0])
or
print(b.a)
</code></pre>
<p>should print out:</p>
<pre><code>1
or
[1,2,3,4,5]
</code></pre>
<p>Wouldn't it make things so much easier?</p>
<p>And I know this can be done by using <code>class</code> or many other ways too.</p>
<p>But why won't it work this way? Are there any 'must' reason(s) behind this way of access? Will it make Python vulnerable? or will it make python unstable? </p>
<p>I wasn't able to find a perfect, concise, clear, accurate explanation for this accessing issue.</p>
<p>Many Thanks.</p>
<hr/>
<p>to be more accurate for @Goyo</p>
<pre><code>def func():
    a = [1,2,3,4,5]

def func2():
    b = func()
    b.a[0] = "Not Working"
    print(b)

func2()
</code></pre>
<p>or</p>
<pre><code>def func3():
    from . import func
    b = func()
    b.a[0] = 'Not working either'
    print(b)

func3()
</code></pre>
<p>I just feel it is more instinctive way of writing codes.
Maybe it is just me.</p>
</div>
<div class="post-text" itemprop="text">
<p>A function (in your case a procedure since it does not return anything) is a treatment on data, not a data holder like an object or a structure. When you write b = func() you expect to get the result of func(). You don't have to know what happens in func. a in your function is an internal variable that might be garbage collected at the end of the function (no one referencing it) </p>
</div>
<div class="post-text" itemprop="text">
<p>It's because you didn't say <code>return</code> in the <code>func1</code> function, so you should do:</p>
<pre><code>def func1():
    a = [1,2,3,4,5]
    return a

def func2():
    b = func1()
    print(b[0])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are mistaking <code>class variables</code> with <code>functions variables</code>
<code></code></p>
<pre># This a Class
class MyFunctions():
    def __init__(self):
        pass
    # This is a function of the class
    def func1():
        a = [1, 2, 3, 4, 5]
        return a

# This is a Procedure, it is not function because it returns Nothing or None
def func2():

    b = MyFunctions.func1()
    print(b[0])

    # a variable of the class
    MyFunctions.func1.a = 3
    f = MyFunctions.func1.a
    print(f)

func2()
</pre></div>
<span class="comment-copy">In Python, a function that doesn't return anything actually returns <code>None</code>.</span>
<span class="comment-copy">You are not returning anything from the function.</span>
<span class="comment-copy">It's not clear at all what you're considering an issue, or what "this" is that can be done with a class.</span>
<span class="comment-copy">Are you asking why declaring a local variable in a function doesn't add it as an attribute to <code>None</code>? Or why a function without a <code>return</code> statement doesn't implicitly return an object containing all the functions local variables instead of returning <code>None</code>? Or something else?</span>
<span class="comment-copy"><code>func1</code> returns a list, so <code>b</code> is that list. I think your next stop should be <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">the Python tutorial</a>.</span>
<span class="comment-copy">Thanks for your kind explanations.</span>
<span class="comment-copy">Thanks for your kind codes.</span>
<span class="comment-copy">Yes that works. But I was wondering why Python wasn't meant to built like one I did.</span>
<span class="comment-copy">I will use ';' to separate the code, <code>b = func1(); print(type(func1())); result: &lt;class 'function'&gt;, print(type(b)); result: &lt;class 'list'&gt;</code>; b is a list, and lists are types of variables in python, it is the same as saying, <code>a = 2; a.c = 3;</code> a variable can not handle another variable at least in python!</span>
<span class="comment-copy">Thanks to you! Your help matters.</span>
