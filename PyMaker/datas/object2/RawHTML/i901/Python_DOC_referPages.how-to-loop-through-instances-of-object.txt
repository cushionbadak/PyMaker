<div class="post-text" itemprop="text">
<p>With a class in Python, how do I define a function to print every single instance of the class in a format defined in the function?</p>
</div>
<div class="post-text" itemprop="text">
<p>I see two options in this case:</p>
<h2>Garbage collector</h2>
<pre><code>import gc
for obj in gc.get_objects():
    if isinstance(obj, some_class):
        dome_something(obj)
</code></pre>
<p>This has the disadvantage of being very slow when you have a lot of objects, but works with types over which you have no control.</p>
<h2>Use a mixin and weakrefs</h2>
<pre><code>from collections import defaultdict
import weakref

class KeepRefs(object):
    __refs__ = defaultdict(list)
    def __init__(self):
        self.__refs__[self.__class__].append(weakref.ref(self))

    @classmethod
    def get_instances(cls):
        for inst_ref in cls.__refs__[cls]:
            inst = inst_ref()
            if inst is not None:
                yield inst

class X(KeepRefs):
    def __init__(self, name):
        super(X, self).__init__()
        self.name = name

x = X("x")
y = X("y")
for r in X.get_instances():
    print r.name
del y
for r in X.get_instances():
    print r.name
</code></pre>
<p>In this case, all the references get stored as a weak reference in a list. If you create and delete a lot of instances frequently, you should clean up the list of weakrefs after iteration, otherwise there's going to be a lot of cruft. </p>
<p>Another problem in this case is that you have to make sure to call the base class constructor. You could also override <code>__new__</code>, but only the <code>__new__</code> method of the first base class is used on instantiation. This also works only on types that are under your control.</p>
<p><strong>Edit</strong>: The method for printing all instances according to a specific format is left as an exercise, but it's basically just a variation on the <code>for</code>-loops.</p>
</div>
<div class="post-text" itemprop="text">
<p>You'll want to create a static list on your class, and add a <code>weakref</code> to each instance so the garbage collector can clean up your instances when they're no longer needed.</p>
<pre><code>import weakref

class A:
    instances = []
    def __init__(self, name=None):
        self.__class__.instances.append(weakref.proxy(self))
        self.name = name

a1 = A('a1')
a2 = A('a2')
a3 = A('a3')
a4 = A('a4')

for instance in A.instances:
    print(instance.name)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Very nice and useful code, but it has a big problem: <strong>list is always bigger</strong> and it is never cleaned-up, to test it just add <code>print(len(cls.__refs__[cls]))</code> at the end of the <code>get_instances</code> method.</p>
<p>Here a fix for the <code>get_instances</code> method:</p>
<pre><code>__refs__ = defaultdict(list)

@classmethod
def get_instances(cls):
    refs = []
    for ref in cls.__refs__[cls]:
        instance = ref()
        if instance is not None:
            refs.append(ref)
            yield instance
    # print(len(refs))
    cls.__refs__[cls] = refs
</code></pre>
<p>or alternatively it could be done using WeakSet:</p>
<pre><code>from weakref import WeakSet

__refs__ = defaultdict(WeakSet)

@classmethod
def get_instances(cls):
    return cls.__refs__[cls]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Same as almost all other OO languages, keep all instances of the class in a collection of some kind.</p>
<p>You can try this kind of thing.</p>
<pre><code>class MyClassFactory( object ):
    theWholeList= []
    def __call__( self, *args, **kw ):
         x= MyClass( *args, **kw )
         self.theWholeList.append( x )
         return x
</code></pre>
<p>Now you can do this.</p>
<pre><code>object= MyClassFactory( args, ... )
print MyClassFactory.theWholeList
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python doesn't have an equivalent to Smallktalk's #allInstances as the architecture doesn't have this type of central object table (although modern smalltalks don't really work like that either).</p>
<p>As the other poster says, you have to explicitly manage a collection.  His suggestion of a factory method that maintains a registry is a perfectly reasonable way to do it.  You may wish to do something with <a href="http://www.python.org/doc/2.5.2/lib/module-weakref.html" rel="nofollow noreferrer">weak references</a> so you don't have to explicitly keep track of object disposal.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's not clear if you need to print all class instances at once or when they're initialized, nor if you're talking about a class you have control over vs a class in a 3rd party library.</p>
<p>In any case, I would solve this by writing a class factory using Python metaclass support.  If you don't have control over the class, manually update the <code>__metaclass__</code> for the class or module you're tracking.</p>
<p>See <a href="http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html" rel="nofollow noreferrer">http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html</a> for more information.</p>
</div>
<span class="comment-copy">That's a confusing question.  Do you want a method function that formats them all similarly?  Or do you want a collection that contains all instances?</span>
<span class="comment-copy">+1 for the code samples and demo for weak refs.  The garbage collector is interesting but probably not that useful for this type of application.</span>
<span class="comment-copy">I know, but it's a last resort if everything else should fail. Maybe I should have put it as option 2.</span>
<span class="comment-copy">IMO the OP asks about __str__() method.</span>
<span class="comment-copy">How would you extend this to include instances of child classes as well?</span>
<span class="comment-copy">Since Python 2.7 this can be done a bit simpler using a <a href="https://docs.python.org/3/library/weakref.html#weakref.WeakSet" rel="nofollow noreferrer"><code>WeakSet</code></a>.</span>
<span class="comment-copy">Not quite correct. Some languages offer access to their object memory. In these languages, eg Smalltalk and Ruby, you query ask a class for all its instances. (Actually, I am surprised Python doesnt offer that as well.)</span>
<span class="comment-copy">@Adrian Kuhn: see @NXC's post on Smalltalk's allInstances capability.  Maybe Ruby is the last holdout?</span>
<span class="comment-copy">I'd personally rather not see the interpreter suffer extra overhead always providing something which isn't always required, especially when its - as demonstrated - trivially easy to implement when it is.</span>
