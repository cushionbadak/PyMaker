<div class="post-text" itemprop="text">
<p>I am beginning to learn python and am struggling with Syntax.</p>
<p>I have a simple CSV file that looks like this</p>
<pre><code>0.01,10,20,0.35,40,50,60,70,80,90,100
2,22,32,42,52,62,72,82,92,102,112
3,33,43,53,63,5647,83,93,103,113,123
</code></pre>
<p>I want to look for the highest and lowest value in all the data in the csv file except in the first value of each row.</p>
<p>So effectively the answer here would be</p>
<pre><code>highestValue=5647
lowestValue=0.35
</code></pre>
<p>because the data that is looked at is as follows (it ignored the first value of each row)</p>
<pre><code>10,20,0.35,40,50,60,70,80,90,100
22,32,42,52,62,72,82,92,102,112
33,43,53,63,73,5647,93,103,113,123
</code></pre>
<p>I would like my code to work for ANY row length.</p>
<p>I really have to admit I'm struggling but here's what I've tried. I usually program PHP so this is all new to me. I have been working on this simple task for a day and can't fathom it out. I think I'm getting confused with terminology 'lists' for example.</p>
<pre><code>import numpy

test_data_file = open ("Anaconda3JamesData/james_test_3.csv","r")
test_data_list = test_data_file.readlines()
test_data_file.close()

for record in test_data_list:
    all_values = record.split(',')
    maxvalue = np.max(numpy.asfarray(all_values[1:])

print (maxvalue)
</code></pre>
<p>With the test data (the CSV file shown at the very top of this question) I would expect the answer to be</p>
<pre><code>highestValue=5647
lowestValue=0.35
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're using numpy, you can read your csv file as a <a href="https://docs.scipy.org/doc/numpy/reference/arrays.ndarray.html" rel="nofollow noreferrer"><code>numpy.ndarray</code></a> using <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.genfromtxt.html" rel="nofollow noreferrer"><code>numpy.genfromtxt()</code></a> and then use the array's <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.amax.html#numpy.amax" rel="nofollow noreferrer"><code>.max()</code></a> and <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.amin.html#numpy.amin" rel="nofollow noreferrer"><code>.min()</code></a> methods</p>
<pre><code>import numpy
array = numpy.genfromtxt('Anaconda3JamesData/james_test_3.csv', delimiter=',')
array[:, 1:].max()
array[:, 1:].min()
</code></pre>
<p>The <code>[:, 1:]</code> part is using <a href="https://docs.scipy.org/doc/numpy-1.15.0/user/basics.indexing.html#other-indexing-options" rel="nofollow noreferrer">numpy's array indexing</a>. It's saying take <strong>all</strong> the rows (the first <code>[:,</code> part), and for each row take all but the first column (the <code>1:]</code> part) . This doesn't work with Python's built in lists. </p>
</div>
<div class="post-text" itemprop="text">
<p>You're overwriting <code>maxvalue</code> each time through the loop, so you're just getting the max value from the last line, not the whole file. You need to compare with the previous maximum.</p>
<pre><code>maxvalue = None
for record in test_data_list:
    all_values = record.split(',')
    if maxvalue is None:
        maxvalue = np.max(numpy.asfarray(all_values[1:])
    else:
        maxvalue = max(maxvalue, np.max(numpy.asfarray(all_values[1:]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You do not need the power of numpy for this problem. A simple CSV reader is good enough:</p>
<pre><code>with open("Anaconda3JamesData/james_test_3.csv") as infile:
    r = csv.reader(infile)
    rows = [list(map(float, line))[1:] for line in r]
max(map(max, rows))
# 5647.0
min(map(min, rows))
# 0.35
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think using <code>numpy</code> is unneeded for this task. First of all, this:</p>
<pre><code>test_data_file = open ("Anaconda3JamesData/james_test_3.csv","r")
test_data_list = test_data_file.readlines()
test_data_file.close()

for record in test_data_list:
</code></pre>
<p>can be simplified into this:</p>
<pre><code>with open("Anaconda3JamesData/james_test_3.csv","r") as test_data_file:
    for record in test_data_file:
</code></pre>
<p>We can use a list comprehension to read in all of the values:</p>
<pre><code>with open("Anaconda3JamesData/james_test_3.csv","r") as test_data_file:
    values = [float(val) for line in test_data_file for val in line.split(",")[1:]]
</code></pre>
<p><code>values</code> now contains all relevant numbers, so we can just do:</p>
<pre><code>highest_value = max(values)
lowest_value = min(values)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a <code>pandas</code> solution that can give the desired results:</p>
<pre><code>import pandas as pd
df = pd.read_csv('test1.csv', header=None)
# df:
#    0     1   2      3   4     5   6   7    8    9    10
# 0  0.01  10  20   0.35  40    50  60  70   80   90  100
# 1  2.00  22  32  42.00  52    62  72  82   92  102  112
# 2  3.00  33  43  53.00  63  5647  83  93  103  113  123

df = df.iloc[:, 1:] 
print("Highest value: {}".format(df.values.max()))
print("Lowest value: {}".format(df.values.min()))
#Output:
Highest value: 5647.0
Lowest value: 0.35
</code></pre>
</div>
<span class="comment-copy">You should use <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><code>csv</code></a> for reading csv's.</span>
<span class="comment-copy">@Boris That's true, but for such a simple problem, it's unneeded.</span>
