<div class="post-text" itemprop="text">
<p>I would have to get some help concerning a part of my code. 
I have some python list, example:</p>
<pre><code>list1 = (1,1,1,1,1,1,5,1,1,1)
list2 = (6,7,4,4,4,1,6,7,6)
list3 = (8,8,8,8,9)
</code></pre>
<p>I would like, for each list, know if there is a single value that is different compare to every other values if and only if all of these other values are the same. For example, in the list1, it would identify "5" as a different value, in list2 it would identify nothing as there are more than 2 different values and in list3 it would identify "9"</p>
<p>What i already did is :</p>
<pre><code> for i in list1:
     if list1(i)==len(list1)-1
     print("One value identified")
</code></pre>
<p>The problem is that i get "One value identified" as much time as "1" is present in my list ...</p>
<p>But what i would like to have is an output like that :</p>
<ul>
<li>The most represented value equal to len(list1)-1 (Here "1")</li>
<li>The value that is present only once (Here "5")</li>
<li>The position in the list where the "5" </li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You could use something like that:</p>
<pre><code>def odd_one_out(lst):
    s = set(lst)
    if len(s)!=2:  # see comment (1)
        return False
    else:
        return any(lst.count(x)==1 for x in s)  # see comment (2)
</code></pre>
<p>which for the examples you provided, yields:</p>
<pre><code>print(odd_one_out(list1))  # True
print(odd_one_out(list2))  # False
print(odd_one_out(list3))  # True
</code></pre>
<hr/>
<p>To explain the code I would use the first example list you provided <code>[1,1,1,1,1,1,5,1,1,1]</code>.</p>
<p>(1) converting to <code>set</code> removes all the duplicate values from your list thus leaving you with <code>{1, 5}</code> (in no specific order). If the length of this set is anything other than <code>2</code> your list does not fulfill your requirements so <code>False</code> is returned</p>
<p>(2) Assuming the <code>set</code> does have a length of <code>2</code>, what we need to check next is that at least one of the values it contains appear only once in the original <code>list</code>. That is what this <code>any</code> does.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the built-in <code>Counter</code> from <a href="https://docs.python.org/3/library/collections.html" rel="nofollow noreferrer">High-performance container datatypes</a> :</p>
<pre><code>from collections import Counter
def is_single_diff(iterable):
    c = Counter(iterable)
    non_single_items = list(filter(lambda x: c[x] &gt; 1, c))
    return len(non_single_items) == 1
</code></pre>
<p><strong>Tests</strong></p>
<pre><code>list1 = (1,1,1,1,1,1,5,1,1,1)
list2 = (6,7,4,4,4,1,6,7,6)
list3 = (8,8,8,8,9)
</code></pre>
<blockquote>
<p>In: is_single_diff(list1)</p>
<blockquote>
<p>Out: True</p>
</blockquote>
<p>In: is_single_diff(list2) </p>
<blockquote>
<p>Out: False</p>
</blockquote>
<p>In: is_single_diff(list3)</p>
<blockquote>
<p>Out: True</p>
</blockquote>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Use numpy unique, it will give you all the information you need. </p>
<pre><code>myarray = np.array([1,1,1,1,1,1,5,1,1,1])
vals_unique,vals_counts = np.unique(myarray,return_counts=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can first check for the most common value. After that, go through the list to see if there is a different value, and keep track of it.
If you later find another value that isn't the same as the most common one, the list does not have a single difference.</p>
<pre><code>list1 = [1,1,1,1,1,1,5,1,1,1]

def single_difference(lst):
    most_common = max(set(lst), key=lst.count)
    diff_idx = None
    diff_val = None
    for idx, i in enumerate(lst):
        if i != most_common:
            if diff_val is not None:
                return "No unique single difference"
            diff_idx = idx
            diff_val = i
    return (most_common, diff_val, diff_idx)

print(single_difference(list1))
</code></pre>
</div>
<span class="comment-copy">You probably mean it should be 5 in list 1.. right?</span>
<span class="comment-copy">If i understand well intersection return the common values between two lists but here i work with each list independently :/</span>
<span class="comment-copy">Yes yatu , you are right, i edited, thanks !</span>
<span class="comment-copy">What would happen if you had <code>list4 = [1, 2]</code>?</span>
<span class="comment-copy">Hmm i don't know but with the data i have it is impossible to have less than 5 or 6 values ! :D</span>
<span class="comment-copy">Yeah ! Thanks a lot !!!</span>
<span class="comment-copy">this does not meet the OP's requirements.</span>
<span class="comment-copy">@Ev.Kounis Right, I updated my answer, thanks !</span>
<span class="comment-copy">Indeed, i should be fine with the output of numpy unique, thanks a lot for your help ! :D</span>
