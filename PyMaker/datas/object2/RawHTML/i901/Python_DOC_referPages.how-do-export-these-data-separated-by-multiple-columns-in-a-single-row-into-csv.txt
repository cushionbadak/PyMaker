<div class="post-text" itemprop="text">
<p>I currently have this data stored as the <code>result</code> variable.</p>
<pre><code>['Draw Date:']
['Draw Date:']
['']
['']
['']
['Draw Date:  2019-01-15']
['']
['Perdana Lottery']
[]
['F', '2771', 'M', '0133', 'A', '6215']
[]
['A', '----', 'B', '1859', 'C', '3006', 'D', '3327']
['E', '5699', 'F', '----', 'G', '1123', 'H', '9193']
['I', '9076', 'J', '0573', 'K', '0950', 'L', '7258']
['', 'M', '-----', '', '', '']
['N', '1226', 'O', '0565', 'P', '1563', 'Q', '1420']
['R', '5265', 'S', '9345', 'T', '0483', 'U', '0933']
['', 'V', '6468', 'W', '3247', '']
['']
['']
['']
['']
</code></pre>
<p>I want to export this data into a table either in .csv or .xls format like this:</p>
<pre><code>+------------+----------+----------+----------+----------+-------------+
| Date       | First    | Second   | Third    | Special  | Consolation |
+------------+---+------+---+------+---+------+---+------+---+---------+
| 2019-01-15 | F | 2771 | M | 0133 | A | 6215 | A | ---- | N | 1226    |
|            |   |      |   |      |   |      | B | 1859 | O | 0565    |
|            |   |      |   |      |   |      | C | 3006 | P | 1563    |
|            |   |      |   |      |   |      | ... etc  | ... etc     |
+------------+---+------+---+------+---+------+----------+-------------+
</code></pre>
<p>... etc means the remaining data from the above result variable. I didn't write it out here to avoid clutter.</p>
<p>So, which modules should I use and how to do it? Please note that, I'm a total Python newbie. I only know some PHP stuff but honestly I'm starting to love py.</p>
</div>
<div class="post-text" itemprop="text">
<p>The first issue is that you need to know where the split is between the prizes. Without seeing the <code>Special Prize</code> text, this would be difficult. An alternative approach would be to use <code>find_all()</code> to spot just <code>td</code> and <code>th</code> elements. The list comprehension additionally only adds non-empty cells. This will result in a single list containing all the data you need. </p>
<p><code>cols</code> contains a list of the required columns. This is filled manually for the 1st, 2nd and 3rd prizes as these entries should be fixed. A loop is then used to add the corresponding letters and prizes to the last four columns.</p>
<p>The Python <code>groupby()</code> function can be used to group lists into sub groups delimited by the elements found in <code>split_on</code>.</p>
<pre><code>from itertools import groupby, zip_longest, islice
from bs4 import BeautifulSoup
import requests
import csv


def grouper(iterable, n):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return zip(*args)


response = requests.get("http://perdana4d.com/resulten.php")
soup = BeautifulSoup(response.content, 'lxml') 
rows = [cell.get_text(strip=True) for cell in soup.find_all(['td', 'th']) if len(cell.get_text(strip=True))]
draw_date = rows[2].split(' ')[-1]
split_on = ['Special Prize', 'Consolation Prize']

cols = [
    ['Date', draw_date], 
    ['FirstL', rows[7]], 
    ['FirstP', rows[8]], 
    ['SecondL', rows[9]], 
    ['SecondP', rows[10]], 
    ['ThirdL', rows[11]], 
    ['ThirdP', rows[12]], 
    ['SpecialL'], 
    ['SpecialP'], 
    ['ConsolationL'], 
    ['ConsolationP']
    ]

col_l = islice(cols, 7, None, 2)
col_p = islice(cols, 8, None, 2)

for k, g in groupby(rows[13:], lambda x: x not in split_on):
    if k:
        l = next(col_l)
        p = next(col_p)

        for letter, prize in grouper(g, 2):
            l.append(letter)
            p.append(prize)

with open('output.csv', 'w', newline='') as f_output:
    csv.writer(f_output).writerows(zip_longest(*cols, fillvalue=''))
</code></pre>
<p>This would result in a CSV file having the following type of format when loaded into a spreadsheet package:</p>
<p><a href="https://i.stack.imgur.com/QaqiH.png" rel="nofollow noreferrer"><img alt="CSV format" src="https://i.stack.imgur.com/QaqiH.png"/></a></p>
<p>There are quite a lot of Python techniques used here which will take a while to understand. <code>grouper</code> for example is one of the <a href="https://docs.python.org/3/library/itertools.html?highlight=islice#itertools-recipes" rel="nofollow noreferrer">itertools recipes</a>. <code>islice()</code> is a way of iterating over an object without needing to start at the first position.</p>
<p>The final output to a CSV file is done using Python's CSV library. This converts lists of rows into correctly formatted output rows. As the data is in column format, a trick is needed to transpose the list into a list of rows, this is done using <code>zip_longest()</code>.</p>
<p>It would probably help if you add print statements to the code to see what the data looks like.</p>
<p>Note, to save the data directly to Excel format (.xlsx) you would need to install another library, for example you could use <a href="https://openpyxl.readthedocs.io/en/stable/" rel="nofollow noreferrer">openpyxl</a> or <a href="https://xlwt.readthedocs.io/en/latest/" rel="nofollow noreferrer">xlwt</a>.</p>
</div>
<span class="comment-copy">if possible, share the code that you used to obtain this result. Being able to see explicitly what the <code>result</code> looks like/stores the data, could help. Is the <code>result</code> a list of the lists you posted?</span>
<span class="comment-copy">Hi. Thanks for your reply. I truly appreciate it. The above data is exactly what stored in the result variable. How I got the data is not important right now because my problem is I just need to export them to csv in the above table format.</span>
<span class="comment-copy">Yes I understand that, but by seeing how it's scraped, it might be possible to a) scrape and store that right into a table, as opposed to storing it as <code>result</code>, and then trying to manipulate it. Or b) see how it's explicitly stored. I still don't know how it's stored as a whole., as the data presented above, you can't convert that to a csv, or actually do anything with unless we know how that's stored. I have no idea of the structure and datatype of <code>result</code> as a whole, which by seeing how it's scraped, could clarify that. if you do <code>print (result)</code>, what does it show?</span>
<span class="comment-copy">or is <code>result</code> a dataframe?</span>
<span class="comment-copy">I'm sorry. What you said does make sense now. Here's the code: <code>soup = bs4.BeautifulSoup(response, 'lxml')</code> <code>num = 0</code> <code>for tables in soup.select("table tr"):</code> <code>num+=1</code> <code>data = [item.get_text(strip=True) for item in tables.select("td")]</code> <code>print(data)</code>  Is it possible to a) scrape and store that right into a table? I'm not sure how to do this.</span>
