<div class="post-text" itemprop="text">
<p>Might be a simple fix but I've tried everything. I'm trying to join and print the values from my 2d array in a single string without each character being separated if not separated by an actual space. For example what my code does now "H E L L O W O R L D" instead of "HELLO WORLD". Can someone please help.</p>
<pre><code>for a in range(int(numOfColumns)):
    for b in range(numOfRows):
        #''.join(Matric[b][a])
        #print(Matrix[b][a]),
        #print(Matrix[b][a]),
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a list comprejesions:</p>
<pre><code>result = " ".join(["".join([i for i in row]) for row in Matrix])
</code></pre>
<p>Or just</p>
<pre><code>result = " ".join(["".join(row) for row in Matrix])
</code></pre>
<p>as @Tomothy32 noted.</p>
<p>Here an expression</p>
<pre><code>"".join(row)
</code></pre>
<p>which creates a string from a row, for example:</p>
<pre><code>row = ['h', 'e', 'l', 'l', 'o']
"".join([row])
Out:
hello
</code></pre>
<p>Almost the same for the outer loop which iterates the row, but it joins the strings with a whitespaces: </p>
<pre><code>result = " ".join(...)
</code></pre>
<p>Or you can do it step-by-step, but it's not so clear:</p>
<pre><code>substrings = []
for row in Matrix:
    substr = ""
    for char in row:
        substr += char
    substrings.append(substr)
result = " ".join(substrings)
</code></pre>
<p>I don't know how to do that easily without <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">comprehensions</a>. Probably you should use it.</p>
<p><strong>Edit</strong><br/>
How it works: </p>
<pre><code>Matrix = [
    ['H', 'e', 'l', 'l', 'o'],  # it's a first row
    ['w', 'o', 'r', 'l', 'd']   # it's a second row
]
</code></pre>
<p>Python iterastes trough the outer level first, i.e.</p>
<pre><code>[print(row) for row in Matrix]
</code></pre>
<p>will print something like that:</p>
<pre><code>['H', 'e', 'l', 'l', 'o'],  
['w', 'o', 'r', 'l', 'd']
</code></pre>
<p>each row is a list (in this case). So, we can iterate through it, using inner loop (list comprehension):</p>
<pre><code>[[print(i, end='') for i in row]) for row in Matrix]
Out:
"hello"
"world"
</code></pre>
<p>(<code>end=''</code> just cahnges newline to the empty string). Now you can change print to the <code>"".join</code> method and get what you want.</p>
<p>How iterate columns? Well, it's not so easy, especially when lengths of the strings are different. If the length is equal, you could use dollowing comprehension (<a href="https://stackoverflow.com/questions/39729469/python-list-comprehensions-transposing">answered</a> here):</p>
<pre><code>[[row(i) for row in matrix] for i in range(max(len(r) for r in Matrix))]
Out:
[['h', 'w'], 
 ['e', 'o'], 
 ['l', 'r'],
 ['l', 'l'],
 ['o', 'd']]
</code></pre>
<p>But probably it's easier to generate you data already transposed. There are some tutorials about a comprehensions, you can read it, for example, <a href="https://www.datacamp.com/community/tutorials/python-list-comprehension" rel="nofollow noreferrer">this</a> one. Comprehensions is a very useful tool.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming below martix:</p>
<pre><code>Matric = [['h', 'e', 'l', 'l', 'o'], ['w', 'o', 'r', 'l', 'd']]
mat = ''
for x in Matric[0]:
    mat = ''.join([mat,x])

mat += ' '

for y in Matric[1]:
    mat = ''.join([mat, y])

print(mat)
</code></pre>
</div>
<span class="comment-copy">What is stored in your matrix?</span>
<span class="comment-copy">Just some characters that make up a word when printed out</span>
<span class="comment-copy">Does take into account it's a 2d array?</span>
<span class="comment-copy">Yes, there's a nested list comprehension in the first example: <code>["".join([i for i in row]) for row in Matrix]</code></span>
<span class="comment-copy">Yeah it's kinda confusing, but maybe this my work. Would row in my case be the numberofrows? and how do you iterate through the columns.. Just trying to understand</span>
<span class="comment-copy">Why <code>"".join([i for i in row])</code> instead of <code>"".join(row)</code>?</span>
<span class="comment-copy">You're right! It's because I have a habit to apply some function.</span>
