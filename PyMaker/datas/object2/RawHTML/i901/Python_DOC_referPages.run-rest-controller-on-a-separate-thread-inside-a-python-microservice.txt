<div class="post-text" itemprop="text">
<p>I am trying to develop a python microservice that can handle REST API requests and also process messages from a kafka broker.</p>
<p>My Tornado REST Controller is as following:</p>
<pre><code>class HelloHandler(RequestHandler):
    def get(self):
        self.write({'message': 'hello world'})


def make_app():
    urls = [("/", HelloHandler)]
    return Application(urls)


def tornado_thread():
    app = make_app()
    app.listen(3000)
    IOLoop.instance().start()
</code></pre>
<p>this is my main microservice class:</p>
<pre><code>class Entrypoint(BaseMicroservice):

    def __init__(self):
        self.config = safe_load(open(sys.argv[1]))
        self.dict = {
            MessageType.detected_scenes.name: ProcessedSceneHandler(self.config),
        }
        super().__init__(self.dict, self.config.get('kafka'))

    def on_message_received(self, generic_message):
        self.dict.get(generic_message.metadata_type).handle(generic_message.message)



t = threading.Thread(target=entrypoint_controller.tornado_thread())
t.start()
Entrypoint().run()
</code></pre>
<p>BaseMicroservice is an abstract class that I implemented to share functionalities between microservices:</p>
<pre><code>class BaseMicroservice(ABC):
    def __init__(self, handlers, kafka_cfg):
        super().__init__()
        self.handlers = handlers
        #TODO da cambiare configurazione
        self.consumer = KafkaConsumer(
            kafka_cfg.get('input_topic'),
            bootstrap_servers=kafka_cfg.get('bootstrap_servers'),
            auto_offset_reset='earliest',
            enable_auto_commit=False,
            group_id=kafka_cfg.get('group_id'),
            value_deserializer=lambda m: json.loads(m.decode('utf-8')))

    def run(self):
        for message in self.consumer:
            cl.logging.info(message.value)
            my_message = GenericMessage(json=message.value)
            self.is_my_message(my_message)

    def is_my_message(self, generic_message):
        if generic_message.metadata_type in self.handlers:
            self.on_message_received(generic_message)

    @abstractmethod
    def on_message_received(self, generic_message):
        pass
</code></pre>
<p>this clearly isn't working, as I can't manage to run my microservice and the REST controller concurrently. What am I missing?</p>
</div>
<div class="post-text" itemprop="text">
<p>In order to launch tthe microservice and the REST controller concurrenlty, I would advice instead of using Threads to use Process</p>
<p><a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer">https://docs.python.org/3/library/multiprocessing.html</a></p>
</div>
<span class="comment-copy">I tried      Process(target=entrypoint_controller.tornado_thread()).start() but had no success, still the same result</span>
<span class="comment-copy">What is the error message?</span>
<span class="comment-copy">There is no error message, the Process doesn't start asynchronously. It won't run the line following that command</span>
