<div class="post-text" itemprop="text">
<p>I need to find a given pattern in a text file and print the matching patterns.  The text file is a string of digits and the pattern can be any string of digits or placeholders represented by 'X'.  </p>
<p>I figured the way to approach this problem would be by loading the sequence into a variable, then creating a list of testable subsequences, and then testing each subsequence.  This is my first function in python so I'm confused as to how to create the list of test sequences easily and then test it.  </p>
<pre><code>def find(pattern):  #finds a pattern in the given input file
    with open('sequence.txt', 'r') as myfile:
        string = myfile.read()

    print('Test data is:', string)

    testableStrings = []

    #how to create a list of testable sequences?

    for x in testableStrings:
        if x == pattern:
            print(x)

    return
</code></pre>
<p>For example, searching for "X10X" in "11012102" should print "1101" and "2102".  </p>
</div>
<div class="post-text" itemprop="text">
<p>Let <code>pattern = "X10X"</code>, <code>string = "11012102"</code>, <code>n = len(pattern)</code> - just for followed illustration:</p>
<p>Without using regular expressions, your algorithm may be as follows:</p>
<ol>
<li><p>Construct a list of all subsequences of string with length of <code>n</code>:</p>
<pre><code>In[2]: parts = [string[i:i+n] for i in range(len(string) - n + 1)]
In[3]: parts
Out[3]: ['1101', '1012', '0121', '1210', '2102']
</code></pre></li>
<li><p>Compare pattern with each element in <code>parts</code>:</p>
<pre><code>for part in parts:
</code></pre></li>
<li><p>The comparison of <code>pattern</code> with <code>part</code> (both have now equal lengths) will be symbol with symbol in corresponding positions:</p>
<pre><code>    for ch1, ch2 in zip(pattern, part):
</code></pre></li>
<li><p>If <code>ch1</code> is the <code>X</code> symbol or <code>ch1 == ch2</code>, the comparison of corresponding symbols will continue, else we will break it:</p>
<pre><code>        if ch1 == "X" or ch1 == ch2:
            continue
        else:
            break
</code></pre></li>
<li><p>Finally, if all symbol with symbol comparisons were successful, i. e. all pairs of corresponding symbols were <em>exhausted</em>, the <code>else</code> branch of the <code>for</code> statement will be executed (yes, <code>for</code> statements may have an <code>else</code> branch for that case).  </p>
<p>Now you may perform any actions with that matched <code>part</code>, e. g. print it or append it to some list:</p>
<pre><code>    else:
       print(part)
</code></pre></li>
</ol>
<p>So all in one place:</p>
<pre><code>pattern = "X10X"
string = "11012102"
n = len(pattern)

parts = [string[i:i+n] for i in range(len(string) - n + 1)]

for part in parts:
    for ch1, ch2 in zip(pattern, part):
        if ch1 == "X" or ch1 == ch2:
            continue
        else:
            break
    else:
        print(part)
</code></pre>
<p>The output:</p>
<blockquote>
<pre><code>1101
2102
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You probably wanted to create the list of testable sequences from the <em>individual rows of the input file.</em> So instead of</p>
<pre><code>with open('sequence.txt', 'r') as myfile:
    string = myfile.read()
</code></pre>
<p>use </p>
<pre><code>with open('sequence.txt') as myfile:                       # 'r' is default
    testableStrings = [row.strip() for row in myfile]
</code></pre>
<p>The <code>strip()</code> method removes whitespace characters from the start and end of rows, including <code>\n</code> symbols at the end of lines.</p>
<hr/>
<p>Example of the <code>sequence.txt</code> file:</p>
<pre><code>    123456789
87654321
 111122223333
</code></pre>
<p>The output of the <code>print(testableStrings)</code> command:</p>
<blockquote>
<pre><code>['123456789', '87654321', '111122223333']
</code></pre>
</blockquote>
</div>
<span class="comment-copy">There are plenty of existing algorithms used for pattern matching. You can see which one suits your use case the best. Some that I know and would recommend are Knuth-Morris-Pratt, Robin-Karp and Boyer-Moore. You can adapt them further for your needs.</span>
<span class="comment-copy">look into regex  -and try them on <a href="http://regex101.com" rel="nofollow noreferrer">regex101.com</a> .. it even can create the regex code for you. you need somethin similar to <code>r'\d10\d'</code> - doku: <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">docs.python.org/3/library/re.html</a></span>
