<div class="post-text" itemprop="text">
<p>What is the best way to create a python script which by calling which, it will ALWAYS generate a new UNIQUE ID (Autoincremental) </p>
<p>You run the script and it will tell you 1, then close script and open again and will tell you 2. </p>
<p>Purpose of it is to create a script which will be used across and this ID will be used to track the latest changes and so on.</p>
<p>P.S. I'm not talking to make a function which will do it. </p>
</div>
<div class="post-text" itemprop="text">
<p>Since you didnt provide any code, I will also not provide any code.</p>
<p><strong>Solution 1: Unique ID</strong></p>
<p>1) <strong>TIME:</strong> create function to give you timestamp</p>
<p>2) <strong>ID</strong>: create function that generate long string with random numbers and letters</p>
<ul>
<li>This is of course 'risky' because there is a chance you will generate already existing ID, but from statistical point of view, it is so called <strong>'impossible even if it is possible'</strong></li>
</ul>
<p>save in file or somewhere</p>
<p><strong>Solution 2: offset - incremental</strong></p>
<p>1) have file with a 0 in it.</p>
<p>2) open a file, read line, convert to integer, increment to +1, write in a file.</p>
<p><strong>Note:</strong></p>
<p>Your title is wrong. One moment you talk about UNIQUE ID, Next moment you are talking about offset. Unique ID and counting running python script are quite contradicting ideas</p>
</div>
<div class="post-text" itemprop="text">
<p>I assume you have a script, it will generate some result every time it is executed. Then you need need a value that (1) distinguish one result from another and (2) shows which result came last. Is that right? If so, we have many options here. In the simplest case (a script always running in the same machine) I would suggest two options</p>
<h2>Save a count to a file</h2>
<p>In this case, you would have a file and would read the number from it:</p>
<pre><code>try:
    with open('count.txt') as count_file:
        content = count_file.read()
        count = int(content)
except Exception:
    count = 0
</code></pre>
<p>After doing whatever your script does, you would write to the file the value you've read, but incremented:</p>
<pre><code>with open('count.txt', 'w') as count_file:
    count_file.write(str(count + 1))
</code></pre>
<h2>Save the timestamp</h2>
<p>A simpler option, however, is not to increment a value but get a timestamp. You could use <a href="https://docs.python.org/3/library/time.html#time.time" rel="nofollow noreferrer"><code>time.time()</code></a>, that returns the number of seconds since <a href="https://en.wikipedia.org/wiki/Unix_time" rel="nofollow noreferrer">Unix epoch</a>:</p>
<pre><code>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.time()
1547479233.9383247
</code></pre>
<p>You will always know which result came later than the others. Personally, however, I would rather <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">format the current time</a>, it is easier to read and reason about:</p>
<pre><code>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.now().strftime('%Y%m%d%H%M%S')
'20190114132407'
</code></pre>
<p>Those are basic ideas, you may need to pay attention to corner cases and possible failures (especially with the file-based solution). That said, I guess those are quite viable first steps.</p>
<h2>A technical note</h2>
<p>What you want here is to a program to remember a piece of information between two or more executions, and we have a technical term for that: the information should be <em>persistent</em>. Since you asked for an autoincrementing feature, you wanted a <em>persistent count</em>. I suspect, however, you do not need that if you use the timestamp option. It is up to you to decide what to do here.</p>
</div>
<div class="post-text" itemprop="text">
<p>If there is any chance of the file being accessed concurrently, it is best to lock the file. Keep trying if the file is locked.</p>
<p><a href="http://tilde.town/~cristo/file-locking-in-python.html" rel="nofollow noreferrer">http://tilde.town/~cristo/file-locking-in-python.html</a></p>
<p>Old answer:
You could store it as an environment variable on the system. If not set, initialise to 1. Else increment it by 1.</p>
</div>
<span class="comment-copy">Have you tried anything yourself?</span>
<span class="comment-copy">If you want to run this script as a standalone tool, it has a different answer depending on the operating system you are using. If you are planning on having a database running along with your script, you could use the database facilities (for example, using a <code>SEQUENCE</code> and <code>nextval</code> in PostgreSQL). If you have a consensus platform such as zookeeper, you could use Zookeeper and Curator to generate it.</span>
<span class="comment-copy">Take a look at the <a href="https://docs.python.org/3/library/uuid.html" rel="nofollow noreferrer"><code>uuid</code></a> module.</span>
<span class="comment-copy">@Kevin SOrry if it looks like this, to write a code with auto incremental this is easy enough .... My question is regarding how to store this value. For example, I create python script and write the function which will autoincrement value, BUT after I will close it record lost. So I need some sort of single point which all other python scrits will be using. I can see currently only in the way to create for example text file which will store value and each time update this value in text. BUT I believe there is a proper way to do it.</span>
<span class="comment-copy">@Kevin - P.S. I can write script my self, I just need the theory behind, what method to use.</span>
<span class="comment-copy">I need a single point which by calling always generate new autoincrement ID. This is will allow to keep track of changes and so on.</span>
<span class="comment-copy">The first part of your explanation if what I'm looking, This is was of the ideas, as I mentioned in comments (extremely sorry for bad explanation). What do you think about "Is it the best option?" how about concurrency? may be better to write to mini database? I need at the end the only piece of code which will generate unique ID and keep track of it, and multiple scripts can use it, but I think simply write it to the file is not the best option</span>
<span class="comment-copy">Um, a process cannot modify the environment of its caller. And what about restarts? Please give a bit of code (or other specifics) to explain what you are thinking.</span>
