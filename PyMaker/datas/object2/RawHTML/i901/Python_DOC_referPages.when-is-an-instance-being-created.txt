<div class="post-text" itemprop="text">
<p>I've been reading articles about OOP with python, specifically <a href="http://blog.thedigitalcatonline.com/blog/2014/03/05/oop-concepts-in-python-2-dot-x-part-1/" rel="nofollow noreferrer">this one</a>.</p>
<p>The autor of that article has a description and then a code example:</p>
<blockquote>
<p>The Python syntax to instantiate a class is the same of a function
  call</p>
</blockquote>
<pre><code>&gt;&gt;&gt; b = int()
&gt;&gt;&gt; type(b)
&lt;type 'int'&gt;
</code></pre>
<p>By this I infer "instance" exist at the moment of the execution and not before. When you execute <code>type(b)</code> that's the instance of the class int().</p>
<p>But then I read this <a href="https://stackoverflow.com/questions/20461907/what-is-meaning-of-instance-in-programming">stack overflow answer</a>:</p>
<blockquote>
<p>Instance is a variable that holds the memory address of the Object.</p>
</blockquote>
<p>Which makes me a little be confused about the term. So when I assign a variable at the moment of the execution the "instance" is created?</p>
<p>Finally this <a href="https://www.computerhope.com/jargon/i/instance.htm" rel="nofollow noreferrer">explanation in ComputerHope</a> points to the fact that instances are the same as variable assigments:</p>
<pre><code>function Animal(numlegs, mysound) {
this.legs = numlegs;
this.sound = mysound;
}
var lion = new Animal(4, "roar");
var cat = new Animal(4, "meow");
var dog = new Animal(4, "bark");
</code></pre>
<blockquote>
<p>The Animal object allows for the number of legs and the sound the
  animal makes to be set by each instance of the object. In this case,
  all three instances (lion, cat, and dog) have the same number of legs,
  but make different sounds.</p>
</blockquote>
<p><strong>Could anyone actually provide a clear definition of when an instance exits?</strong></p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I've been reading articles about OOP with python, specifically <a href="http://blog.thedigitalcatonline.com/blog/2014/03/05/oop-concepts-in-python-2-dot-x-part-1/" rel="nofollow noreferrer">this
  one</a>.</p>
<p>The autor of that article has a description and then a code example:</p>
<blockquote>
<p>The Python syntax to instantiate a class is the same of a function
    call</p>
</blockquote>
<pre><code>&gt;&gt;&gt; b = int()
&gt;&gt;&gt; type(b)
&lt;type 'int'&gt;
</code></pre>
</blockquote>
<p>Also read the sentence before that:</p>
<blockquote>
<p>Once you have a class you can <em>instantiate</em> it to get a concrete object (an <em>instance</em>) of that type, i.e. an object built according to the structure of that class.</p>
</blockquote>
<p>So an instance of a class is an object that has that class as its type.</p>
<blockquote>
<p>By this I infer "instance" exist at the moment of the execution and
  not before.</p>
</blockquote>
<p>Yes, correct. "Instance" and "instance of" are runtime concepts in Python.</p>
<blockquote>
<p>When you execute <code>type(b)</code> that's the instance of the
  class int().</p>
</blockquote>
<p>Not quite.</p>
<p>The int instance here starts existing when <code>int()</code> is called.<sup>1</sup> This <em>process</em> is what's called "instantiation" and the result (which is returned by this call, and in this example then assigned to <code>b</code>) is the "instance" of <code>int</code>.</p>
<blockquote>
<p>But then I read this <a href="https://stackoverflow.com/questions/20461907/what-is-meaning-of-instance-in-programming">stack overflow answer</a>:</p>
<blockquote>
<p>Instance is a variable that holds the memory address of the Object.</p>
</blockquote>
</blockquote>
<p>Oh well, that's not quite correct. It's the object itself (the value at that memory address, if you will) that's the instance. Several variables may be bound to the same object (and thus the same instance). There's even an operator for testing that: <code>is</code></p>
<pre><code>&gt;&gt;&gt; a = 5
&gt;&gt;&gt; b = a
&gt;&gt;&gt; a is b
True
</code></pre>
<blockquote>
<p>Which makes me a little be confused about the term. So when I assign a
  variable at the moment of the execution the "instance" is created?</p>
</blockquote>
<p>No, then the instance is <em>bound</em> to that variable. In Python, think of variables just as "names for values". So binding an object to a variable means giving that object that name. An object can have several names, as we saw above.</p>
<p>You can use an instance without assigning it to any variable, i.e., without naming it, e.g. by passing it to a function:</p>
<pre><code>&gt;&gt;&gt; print(int())
0
</code></pre>
<blockquote>
<p>Finally this <a href="https://www.computerhope.com/jargon/i/instance.htm" rel="nofollow noreferrer">explanation in ComputerHope</a> points to the fact that
  instances are the same as variable assigments:</p>
<pre><code>function Animal(numlegs, mysound) {
this.legs = numlegs;
this.sound = mysound;
}
var lion = new Animal(4, "roar");
var cat = new Animal(4, "meow");
var dog = new Animal(4, "bark");
</code></pre>
<blockquote>
<p>The Animal object allows for the number of legs and the sound the
    animal makes to be set by each instance of the object. In this case,
    all three instances (lion, cat, and dog) have the same number of legs,
    but make different sounds.</p>
</blockquote>
</blockquote>
<p>Unfortunately, that explanation on ComputerHope will probably confuse most readers more than it helps them. First, it conflates the terms "class" and "object". They don't mean the same. A class is a template for one type of objects. Objects and templates for a type of objects aren't the same concept, just as cookie cutters aren't the same things as cookies.</p>
<p>Of course, [for the understanding] it doesn't particularly help that in Python, classes <em>are</em> (special, but not too special) objects (of type <code>type</code>) and that in JavaScript until the <code>class</code> concept was introduced, it was customary to use plain objects as templates for other objects. (The latter approach is known as "<a href="https://en.wikipedia.org/wiki/Prototype-based_programming" rel="nofollow noreferrer">prototype based</a> object orientation" or "prototype based inheritance". In contrast, most other object oriented languages, including Python, use class-based object orientation / class-based inheritance. I'm not quite sure in what category modern ECMAScript with the <code>class</code> keyword falls.)</p>
<blockquote>
<p>Could anyone actually provide a clear definition of instance?</p>
</blockquote>
<p>Like I wrote further up:
<strong>An <em>instance</em> of a class is an <em>object</em> that has <em>that class as its type</em>.</strong></p>
<p>So an "instance" is always an "instance <strong>of</strong>" something. That also answers the linguistic take on the question in the title</p>
<blockquote>
<p>When should I call it “instance”?</p>
</blockquote>
<p>You should call it "instance" when you want to call it "instance <strong>of</strong>" something (usually of a class).</p>
<hr/>
<p><sup>1</sup> I haven't told the whole truth. Try this:</p>
<pre><code>&gt;&gt;&gt; a = int()
&gt;&gt;&gt; b = int()
&gt;&gt;&gt; a is b
True
</code></pre>
<p>Wait what? Shouldn't the two invocations of <code>int</code> have returned new instances each, and thus two distinct ones?</p>
<p>That what would have happened with most types, but some built-in types are different, <code>int</code> being one of them. The makers of the CPython implementation are aware that small integers are used a lot. Thus they let CPython create new ones all the time, they just have it re-use the same integer (the same object / instance) each time the same value is required. Because Python integers are immutable, that doesn't usually cause any problems, and saves a lot of memory and object-creation-time in computation-intensive programs.</p>
<p>The Python standard allows implementations to make this optimization, but AFAIK doesn't require them to. So this should be considered an implementation detail and your program logic should never rely on this. (Your performance optimizations may rely on it, though.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Generally in OOP</p>
<blockquote>
<p>Classes and objects are the two main aspects of object oriented
  programming. A class creates a new type where objects are instances of
  the class.</p>
</blockquote>
<p>As explained <a href="https://python.swaroopch.com/oop.html" rel="nofollow noreferrer">here</a>.</p>
<p>Thus everytime an object is created, it is called an instance.</p>
<p>Python makes no difference in this concept, however things are a little different from other languages like Java for instance.</p>
<p>In fact in Python <em>everything</em> is an object, even classes themselves.</p>
<p>Here is a brief explanation of how it works:</p>
<p>Considering this snippet:</p>
<pre><code>&gt;&gt;&gt; class Foo:
...     pass
... 
&gt;&gt;&gt; type(Foo)
&lt;type 'type'&gt;
&gt;&gt;&gt; 
</code></pre>
<p>Class <code>Foo</code> is type <code>type</code> which it is a metaclass for all <code>classes</code> in Python
(There is however a distinction between 'old' and 'new' classes, more <a href="https://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes" rel="nofollow noreferrer">here</a>, <a href="https://realpython.com/python-metaclasses/" rel="nofollow noreferrer">here</a> and <a href="https://stackoverflow.com/a/45062077/5386668">here</a>).</p>
<p>Class <code>type</code> being a class, is an instance of itself:</p>
<pre><code>&gt;&gt;&gt; isinstance(type, type)
True
</code></pre>
<p>So <code>Foo</code> despite being a class definition, is treated like an object by the interpreter.</p>
<p>Objects as instances are created whit statements like <code>foo = Foo()</code>, <code>foo</code> being an object inherits from <code>object</code> class.</p>
<pre><code>&gt;&gt;&gt; isinstance(foo, object)
True
</code></pre>
<p>This class provides all the methods an object needs, such as <code>__new__()</code> and <code>__int__()</code> (<a href="https://docs.python.org/3/reference/datamodel.html#object.__new__" rel="nofollow noreferrer">new</a>, <a href="https://docs.python.org/3/reference/datamodel.html#object.__init__" rel="nofollow noreferrer">init</a>). In short the former is used to create a new instance of a class, the latter is called after the instance has been created and is used to initialize values like you did with <code>Animal</code>.</p>
<p>The fact that everything is an object also mean that we can do funny pieces of code like this one:</p>
<pre><code>&gt;&gt;&gt; class Foo:
...     var = 'hello'
... 
&gt;&gt;&gt; foo = Foo()
&gt;&gt;&gt; foo.var
'hello'
&gt;&gt;&gt; foo.other_var = 'world'
&gt;&gt;&gt; foo.other_var
'world'
&gt;&gt;&gt; Foo.other_var
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: type object 'Foo' has no attribute 'other_var'
&gt;&gt;&gt; Foo.var
'hello'
&gt;&gt;&gt; 
</code></pre>
<p>Here I added an attribute on an object at runtime. That attribute will be unically in <code>foo</code>, the class itself or any other instances won't have it.
This is called <a href="https://stackoverflow.com/a/12658027/5386668">Instance variable and class variable</a>.</p>
<p>Hope it all makes sense to you.</p>
<p>TL;DR</p>
<p>In Python everything (class definitions, <a href="https://www.geeksforgeeks.org/first-class-functions-python/" rel="nofollow noreferrer">functions</a>, modules, etc..) are all treated like objects by the interpreter. Therefore 'everything' is an instance.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/20461907/what-is-meaning-of-instance-in-programming">what is meaning of instance in programming?</a></span>
<span class="comment-copy">I don't think it's correct to make any definition of "instance" that uses the term "variable". You can instantiate objects without binding them to a name: <code>int()</code> by itself, with no assignment statement, is a perfectly valid Python program. An integer is instantiated, but there are no variables here.</span>
<span class="comment-copy">Every example you've provided is true! I would say that the term "instance" is an abstraction to begin with - there isn't much use in making a constrictive definition for it. You could very well define it by saying it has those three characteristics/behaviors.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">Python documentation</a> says "Creating a new class creates a new type of object, allowing new instances of that type to be made."  If that helps.  Also, "Class instantiation uses function notation. Just pretend that the class object is a parameterless function that returns a new instance of the class."</span>
<span class="comment-copy">The answer to your question "So when I assign a variable at the moment of the execution the "instance" is created?" is 'yes'.  Both things happen at that instant.</span>
<span class="comment-copy">Thanks for the detailed explanation, I actually was wondering about when the instance was "created", of course this is at the execution moment and not the variable assignment. So the author in the first link explained it correctly. It's clear that at least in python and this example the int() execution occurs first than the assignment, so is still a function execution.</span>
<span class="comment-copy">I think that for the sake of simplicity, when replying to someone who doesn't know what an instance is, you can cut out a lot of the details of how in python classes are objects too and so on.</span>
