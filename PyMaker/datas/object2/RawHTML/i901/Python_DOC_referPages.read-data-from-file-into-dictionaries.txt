<div class="post-text" itemprop="text">
<p>Lets say that i have a file containing information in each line and each line i want to convert in a dictionary. In the dictionary there will be one string, two integers and two lists. kinda like this:
    Q1 =  { "string" : "name", 
            "integer1" : 1, 
            "integer2" : 2, 
            "list1" : [a,b,c,d], 
            "list2": []
    }
Now the file could be a txt file or not. Lets say its a txt file and every line would provide a dictionary. I am the one to write the file so I can have it in any format i want. I thought this format for each line of the file.txt:
name,1,2,(a/b/c), ()
so the first thing is the string, the second is integer1, then integer2, list1 and list2. Each element of the dictionary separated with a comma and the elements of the lists inside parenthesis and separated with a slash ("/"). Obviously if you think there is a better idea for how the file.txt should like please let me know :)
the first list i want it to be dynamic. that means some lines may contain more characters inside the parenthesis () and the second list i want it to always be empty cause i am putting things there later in my code.
Each line is a dictionary and each dictionary is an element in a list i want to create. So i want to have a list of dictionaries.</p>
<p>I tried to open a file and play with the split function but the format of the txt file is more complicated than i thought and never got to read the file and save it into a list of dictionaries</p>
<pre><code>#the file.txt should look like this:
name1,5,6,(a1/a2/a3), ()
name2,7,8,(a2/a3/a4/a5), ()

#the python code i tried:
def init():
    myList=[]
    with open("file.txt") as f:
        for line in f:
            d={}
            d = dict(line.strip().split(',', 4))
            myList[line]=d
return(myList)        

list=[]
list=init();
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>inside file1.txt</p>
<p>hey1,5,6,(a1/a2/a3), ()<br/>
hey2,7,8,(a2/a3/a4/a5), ()</p>
<p>You can use below code it will generate a new dictionary for each line and at last all the dictionary inside the dict_main.</p>
<pre><code>index1=['string1','integer1','integer2','list1','list2']
dict_main={}
with open ('file1.txt') as f:
    count=0
    for line in f:
        dict1={}
        lst1=line.strip().split(',')
        dict1[index1[0]]=lst1[0]
        dict1[index1[1]]=int(lst1[1])
        dict1[index1[2]]=int(lst1[2])
        dict1[index1[3]]=lst1[3][1:-1].strip().split('/')
        dict1[index1[4]]=[]
        count+=1
        dict_main['dict'+str(count)]=dict1
print(dict_main)
</code></pre>
<p>Result</p>
<pre><code>{'dict1': {'integer2': 6, 'list2': [], 'integer1': 5, 'list1': ['a1', 'a2', 'a3'], 'string1': 'hey1'}, 'dict2': {'integer2': 8, 'list2': [], 'integer1': 7, 'list1': ['a2', 'a3', 'a4', 'a5'], 'string1': 'hey2'}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Check this... without using any package.</p>
<pre><code>with open("test.txt") as f:
  lines = [ line.strip().split(",") for line in f ]
  lines = [{ 
        "string": line[0], 
        "integer1": int(line[1]), 
        "integer2": int(line[2]), 
        "list1": [l for l in line[3].strip("()").split("/")],
        "list2": [l for l in line[4].strip("()").split("/")],
  } for line in lines ]
  print(lines)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/csv.html#csv.DictReader" rel="nofollow noreferrer"><code>csv.DictReader</code></a> for this purpose.</p>
<p>With the given example file you can use it like this:</p>
<pre><code>from csv import DictReader

FIELD_NAMES = ["string", "integer1", "integer2", "list1", "list2"]

with open("file_name.csv") as f:
    reader = DictReader(f, fieldnames=FIELD_NAMES)
    for line in reader:
        # line["integer1"] = int(line["integer1"])
        # ...
        print(line)
# OrderedDict([('string', 'name1'), ('integer1', '5'), ('integer2', '6'), ('list1', '(a1/a2/a3)'), ('list2', ' ()')])
# OrderedDict([('string', 'name2'), ('integer1', '7'), ('integer2', '8'), ('list1', '(a2/a3/a4/a5)'), ('list2', ' ()')])
</code></pre>
<p>As you can see this evaluates every field as a string, so you would have to add parsing to integers and lists to this, but this should get you started.</p>
<p>It also returns <code>OrderedDict</code>s, to, well, ensure the order of the fields. You can cast them to a normal dict with <code>dict()</code> if needed.</p>
<p>To get a list of dicts, just do:</p>
<pre><code>with open("file_name.csv") as f:
    reader = DictReader(f, fieldnames=FIELD_NAMES)
    print(list(reader))
# [OrderedDict([('string', 'name1'), ('integer1', '5'), ('integer2', '6'), ('list1', '(a1/a2/a3)'), ('list2', ' ()')]), OrderedDict([('string', 'name2'), ('integer1', '7'), ('integer2', '8'), ('list1', '(a2/a3/a4/a5)'), ('list2', ' ()')])]
</code></pre>
<hr/>
<p>Slightly unrelated:</p>
<ul>
<li>Don't shadow the built-in <code>list</code> by calling your lists <code>list</code></li>
<li><code>return</code>s don't need their argument in parenthesis, a space after the <code>return</code> is sufficient.</li>
<li>Read Python's official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You can also use regex and avoid using "/" character if you want, like this:</p>
<pre><code>import re    
txt1 = "name1,5,6,[a1,a2,a3],[]"
regex = "([a-zA-Z0-9]*),([0-9]+),([0-9]+),\[(.*)\],\[(.*)\]"
matches = re.match(regex, txt1)
dict1 = {"string": matches.group(1), "integer1": matches.group(2), "integer2": matches.group(3),
         "list1": matches.group(4).split(","), "list2": matches.group(5).split(",")}
</code></pre>
<p>The result being:</p>
<pre><code>{'string': 'name1', 'integer1': '5', 'integer2': '6', 'list1': ['a1', 'a2', 'a3'], 'list2': ['']}
</code></pre>
</div>
<span class="comment-copy">Please provide current output and what you expect the output to be (for the return statements) as well as any errors you encounter.</span>
<span class="comment-copy">Using Pandas with a csv file is usually the easiest for this sort of thing. Look at reading in a csv:  <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html" rel="nofollow noreferrer">pandas.pydata.org/pandas-docs/stable/generated/…</a> And converting the dataframe to a dictionary: <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_dict.html" rel="nofollow noreferrer">pandas.pydata.org/pandas-docs/stable/generated/…</a></span>
<span class="comment-copy">And if <code>pandas</code> is overkill for your usecase, use <a href="https://docs.python.org/3/library/csv.html#csv.DictReader" rel="nofollow noreferrer"><code>csv.DictReader</code></a> instead, which reads a line of comma separated values into a dictionary</span>
<span class="comment-copy">@KuboMD right now i have these dictionaries hard coded in my python file and instead of hard coding them in my .py i want to read them from a file. i don't expect a specific output other than how a list of dictionaries should be like. in my code i use this list of dictionaries to import and extract elements of this list based on an algorithm i am using. doesn't matter what i am doing with this list. i just want a list of dictionaries that are written in a separate file than my .py file. there no errors just not in the format i want it to be.</span>
<span class="comment-copy">i will check pandas. thanks</span>
<span class="comment-copy">thanks! i will check it out</span>
<span class="comment-copy">You could make your first list comprehension into a generator comprehension and thus save (potentially a lot) of memory. Also, no <code>;</code> needed in Python.</span>
<span class="comment-copy">thanks! i will work with that</span>
