<div class="post-text" itemprop="text">
<p>I think the main purpose of <code>__slots__</code> is to save the memory usage by allowing to specify properties explicitly, instead of using <code>__dict__</code> allowing dynamic property assignment on the instances. So I somehow understand why <code>__dict__</code> is removed by default when using <code>__slots__</code>. But why does it meanwhile remove <code>__weakref__</code> by default?</p>
<p>Reference: <a href="https://docs.python.org/3/reference/datamodel.html#slots" rel="nofollow noreferrer">https://docs.python.org/3/reference/datamodel.html#slots</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I can't read minds, but I suspect the rationale goes like this:</p>
<ol>
<li>If <code>__weakref__</code> wasn't disabled by default when using <code>__slots__</code>, providing a way to save the associated memory explicitly would require yet another special opt-out mechanism</li>
<li>More special cases add complexity to the language, and this one would provide no real benefit</li>
</ol>
<p>Given how infrequently weak references are used at all, it was probably deemed simpler to simpler have it disabled by default, with the option to opt back in.</p>
<p>Diving to implementation details, in a sense, unslotted user-defined classes have precisely two "slots" (one for <code>__dict__</code>, one for <code>__weakref__</code>) over and above the base object header, so having <code>__slots__</code> say "Replace the default with this explicit list" makes it natural to remove both <code>__dict__</code> and <code>__weakref__</code> when <code>__slots__</code> comes into play.</p>
</div>
