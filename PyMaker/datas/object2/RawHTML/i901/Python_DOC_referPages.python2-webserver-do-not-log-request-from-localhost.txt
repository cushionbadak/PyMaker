<div class="post-text" itemprop="text">
<p>The following Python2 webserver will log every single request including the one from localhost (127.0.0.1).</p>
<p><strong>webserver.py</strong></p>
<pre><code>import SimpleHTTPServer, SocketServer, sys
Handler = SimpleHTTPServer.SimpleHTTPRequestHandler
port = 80
httpd = SocketServer.TCPServer(("", port), Handler)
sys.stderr = open('/home/user/log.txt', 'w', 1)
httpd.serve_forever()
</code></pre>
<p>As example; <code>curl localhost</code> (from the same machine) will produce the following log.</p>
<pre><code>10.0.0.1  - - [10/Jan/2019 00:00:00] "GET / HTTP/1.1" 200 -
127.0.0.1 - - [10/Jan/2019 00:00:01] "GET / HTTP/1.1" 200 -
127.0.0.1 - - [10/Jan/2019 00:01:01] "GET / HTTP/1.1" 200 -
127.0.0.1 - - [10/Jan/2019 00:02:02] "GET / HTTP/1.1" 200 -
</code></pre>
<p>My question: Would it be possible to make an exception for local request? I don't want to log any request from localhost/127.0.0.1.</p>
<p>I'm thinking something like this but not really sure how to implement it in Python2 yet.</p>
<p><strong>webserver_v2_do_not_log_localhost.py</strong></p>
<pre><code>import webserver.py # webserver code above, or simply paste everything in here.

if SourceIPAddress == 127.0.0.1:
    print('DO NOT log request from localhost/127.0.0.1')
    # Script here
else:
    print('Log everything')
    # Script here
</code></pre>
<p>Any idea on the scripts would be highly appreciated. Thanks</p>
<p><strong>Desired Output</strong> when performing <code>tail -F log.txt</code> (external IP only, not localhost)</p>
<pre><code>10.0.0.1  - - [10/Jan/2019 00:00:00] "GET / HTTP/1.1" 200 -
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>logging.Filter</code>class.
When you declare your logger, do something like that:</p>
<pre><code>import logging

logging.basicConfig(filename='myapp.log', level=logging.INFO)
class Global:
    SourceIPAddress = ''


class IpFilter(logging.Filter):
    def filter(self, rec):#the rec is part of the function signature.
        return not Global.SourceIPAddress == '127.0.0.1'


def main():



    log = logging.getLogger('myLogger')
    log.addFilter(IpFilter())
    log.info("log")
    Global.SourceIPAddress = '127.0.0.1'
    log.info("Don't log")

if __name__ == '__main__':
    main()
</code></pre>
<p>Of course I implemented it in a very simple way and you should save the IP in a better place(:</p>
<p>I would also check this links for more info:<br/>
<a href="https://docs.python.org/3/howto/logging-cookbook.html" rel="nofollow noreferrer">https://docs.python.org/3/howto/logging-cookbook.html</a>
<a href="https://www.programcreek.com/python/example/3364/logging.Filter" rel="nofollow noreferrer">https://www.programcreek.com/python/example/3364/logging.Filter</a></p>
</div>
<span class="comment-copy">Sure it's possible, seem like you got it. What is your issue?  You can implement it in a lot ways...you want an example for the 'Script'?</span>
<span class="comment-copy">That's right @Green. Any idea on the scripts would be highly appreciated.</span>
<span class="comment-copy">I added an answer which look a bit more elegant than this..(: and there is a lot of other valid way you could achieve it, I added some good links you can check</span>
<span class="comment-copy">I tried your code and combine it with the webserver code above, however, I still can see local ip address in the log  <code>user@linux:~/$ tail -F log.txt  10.1.1.10 - - [17/Jan/2019 12:10:54] "GET / HTTP/1.1" 200 - 127.0.0.1 - - [17/Jan/2019 13:31:58] "GET / HTTP/1.1" 200 - 127.0.0.1 - - [17/Jan/2019 13:33:05] "GET / HTTP/1.1" 200 - 127.0.0.1 - - [17/Jan/2019 13:33:06] "GET / HTTP/1.1" 200 -</code></span>
<span class="comment-copy">I guess you did it wrong, how do you check the condition of the ip? do you referencing to the same <code>SourceIPAddress</code> variable?</span>
<span class="comment-copy">It is a bit hard to understand where you got it wrong without your code. If you will add the relevant part with the logger config and the IP assignment I can take a look. But first, try to debug it and see why it's failing on the condition. Maybe it's not a string (very likely) but an IP object or something.</span>
