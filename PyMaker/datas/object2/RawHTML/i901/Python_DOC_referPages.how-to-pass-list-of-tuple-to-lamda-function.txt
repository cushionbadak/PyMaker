<div class="post-text" itemprop="text">
<p>When list of tuples are used in for loop it works perfectly with two separate variables as below </p>
<pre><code>t_dict = {
    "k1": "v1",
    "k2": "v2",
    "k3": "v3",
    "k4": "v4",
    "k5": "v5"
}

for k, v in t_dict.items():
    print "%s=%s" % (k, v)
</code></pre>
<p>But when converted into lambda with map function got an error as below</p>
<pre><code>print map(lambda k, v: "%s=%s" % (k, v), t_dict.items())

Traceback (most recent call last):   File "test.py", line 14, in &lt;module&gt;
    print map(lambda k, v: "%s=%s" % (k, v), t_dict.items()) TypeError: &lt;lambda&gt;() takes exactly 2 arguments (1 given)
</code></pre>
<p>Is there any other way to call list of tuple in lambda function?</p>
</div>
<div class="post-text" itemprop="text">
<p>Built-in <code>map</code> supports multiple iterables:</p>
<pre><code>res = map(lambda k, v: "%s=%s" % (k, v), t_dict, t_dict.values())
# ['k1=v1', 'k2=v2', 'k3=v3', 'k4=v4', 'k5=v5']
</code></pre>
<p>As described in the docs for <a href="https://docs.python.org/2/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a>:</p>
<blockquote>
<p>If additional <em>iterable</em> arguments are passed, <em>function</em> must take
  that many arguments and is applied to the items from all iterables in
  parallel.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>For you case, you can also use the tuple after the <code>%</code> for formatting, so:</p>
<pre><code>map(lambda t: "%s=%s" % t, t_dict.items())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As already suggested, you can pass multiple iterables to <code>map</code>, but if you want to pass the <code>items</code> and not <code>keys</code> and <code>values</code> individually, you can use <code>zip(*...)</code> to <a href="https://stackoverflow.com/a/4937526/1639625">"transpose"</a> the items to two lists and use <code>*</code> again to pass those as two different arguments to <code>map</code>:</p>
<pre><code>&gt;&gt;&gt; list(map(lambda k, v: "%s=%s" % (k, v), *zip(*t_dict.items())))
['k1=v1', 'k2=v2', 'k3=v3', 'k4=v4', 'k5=v5']
</code></pre>
<p>Or use <a href="https://docs.python.org/3/library/itertools.html#itertools.starmap" rel="nofollow noreferrer"><code>itertools.starmap</code></a>:</p>
<pre><code>&gt;&gt;&gt; from itertools import starmap
&gt;&gt;&gt; list(starmap(lambda k, v: "%s=%s" % (k, v), t_dict.items()))
['k1=v1', 'k2=v2', 'k3=v3', 'k4=v4', 'k5=v5']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Other option is this way (<a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join(iterable)</code></a>) to get the list of strings:</p>
<pre><code>map( lambda t: "=".join(t), t_dict.items() )
#=&gt; ['k3=v3', 'k2=v2', 'k1=v1', 'k5=v5', 'k4=v4']
</code></pre>
<p>This version can also print out:</p>
<pre><code>import sys
map( lambda t: sys.stdout.write("=".join(t) + "\n"), t_dict.items() )

# k3=v3
# k2=v2
# k1=v1
# k5=v5
# k4=v4
</code></pre>
</div>
<span class="comment-copy">there should be a more elegant way, <code>map('{}={}'.format, t_dict, t_dict.values())</code> is the best I could think of</span>
<span class="comment-copy">@Chris_Rands, Yup, good point. However, I wanted to advise OP on the more general issue of how to use a multi-argument function with <code>map</code>.</span>
<span class="comment-copy"><code>map('{}={}'.format, *zip(*t_dict.items()))</code></span>
<span class="comment-copy">@Chris_Rands Yes, that's nicer that the <code>lambda</code>, but it's still a function taking two paramters, thus this does not really change anything about the core issue.</span>
