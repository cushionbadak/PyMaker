<div class="post-text" itemprop="text">
<p>How can I extract a python enum subset without redefining it?</p>
<pre><code>from enum import unique, Enum
@unique
class MyEnum(Enum):
    ONE = 1
    TWO = 2
    THREE = 3
    FOUR = 4
</code></pre>
<p>I <em>would like</em> to get an equivalent to <code>MyDesiredSubset</code> without having to define it again.</p>
<pre><code>@unique
class MyDesiredSubset(Enum):
    THREE = 3
    FOUR = 4
</code></pre>
<p>So far I tried something like this, but <code>MyTrySubset</code> is broken and the code is ugly.</p>
<pre><code>@unique
class MyTrySubset(Enum):
    pass

for item in MyEnum:
    setattr(MyTrySubset, item.name, item.value)
</code></pre>
<p>Any suggestions how to get <code>MyDesiredSubset</code> without redefining it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your code won't work - enums are not quite classes:</p>
<blockquote>
<pre><code>@unique
class MyEnum(Enum):
    ONE = 1
    TWO = 2
    THREE = 3
    FOUR = 4

@unique
class MyTrySubset(Enum):
    pass
</code></pre>
</blockquote>
<pre><code> for item in MyEnum: 
    setattr(MyTrySubset, item.name,     item.value)  # no duplication error by @unique
    setattr(MyTrySubset, item.name+"a", item.value)  # no duplication error by @unique

for s in MyTrySubset:
    print(s)           # no output - at all

for s in MyEnum:
    print(s)           # prints all repr() of all Enum-values defined
</code></pre>
<hr/>
<p>Use the other enum to declare this one (won't compare equal though):</p>
<pre><code>@unique
class MyDesiredSubset(Enum):
    THREE = MyEnum.THREE
    FOUR = MyEnum.FOUR
</code></pre>
<p>or use the fluent approach:</p>
<pre><code>MyOther = Enum("MyOther", [(a.name,a.value) for a in MyEnum 
                           if a in [MyEnum.THREE,MyEnum.FOUR]] )
</code></pre>
<p>If you use <a href="https://docs.python.org/3/library/enum.html#enum.IntEnum" rel="nofollow noreferrer"><code>IntEnum</code></a> instead, you can even compare them:</p>
<pre><code>@unique
class MyIntEnum(IntEnum):
    ONE = 1
    TWO = 2
    THREE = 3
    FOUR = 4

@unique
class MyDesiredIntSubset(IntEnum):
    THREE = MyIntEnum.THREE
    FOUR = MyIntEnum.FOUR

print(MyDesiredSubset.THREE == MyEnum.THREE)       # False
print(MyDesiredIntSubset.THREE == MyIntEnum.THREE) # True 
print(MyDesiredIntSubset.THREE == 3)               # True @Steven Rumbalski
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Patrick Artner's answer contains what I was looking for looping through an enum with an if statement keeping desired elements.</p>
<p>Just extracted the relevant bits.</p>
<pre><code>MySubset = Enum("MySubet", [(a.name, a.value) for a in MyEnum if a.value &gt; 2 ] )
</code></pre>
<p>Seems to be equivalent to (without the unique decorator):</p>
<pre><code>class MySubset(Enum):
    THREE = 3
    FOUR = 4
</code></pre>
</div>
<span class="comment-copy">I suppose it should be noted that <code>print(MyDesiredIntSubset.THREE == 3) # True</code>.</span>
<span class="comment-copy">This answer much more than what I was looking for but the fluent approach works great.</span>
