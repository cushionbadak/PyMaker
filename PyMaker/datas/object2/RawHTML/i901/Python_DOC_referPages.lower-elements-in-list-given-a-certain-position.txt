<div class="post-text" itemprop="text">
<p>I must lower letters in a list if the occupy a certain position given in a previous function I did. The function I must program is <code>lower_words</code>.</p>
<p>I'm having an issue: every time I lower an element the row is repeated.</p>
<p>I don't need to use the list "words" for this. Just left it there so you could understand better what the function does/must do. Can someone help me?</p>
<pre><code>words= ["PATO", "GATO", "BOI", "CAO"]

grid1= ["PIGATOS", 
       "ANRBKFD", 
       "TMCAOXA", 
       "OOBBYQU", 
       "MACOUIV", 
       "EEJMIWL"]

 positions_words_occupy = ((0, 0), (1, 0), (2, 0), (3, 0), (0, 2), (0, 3), (0, 4), (0, 5), (3, 2), (4, 3), (5, 4), (2, 2), (2, 3), (2, 4)) #these are the positions the words occupy. I have determined these positions with a previous function. first is the line, second the column  


def lower_words(grid, positions_words_occupy):

    new= []

    for position in positions_words_occupy:

        line= position[0]
        column= position[1]

        row= grid[line]
        element= row[column]

        new.append(row.replace(element, element.lower()))

    return new
</code></pre>
<p>Expected output:</p>
<pre><code>['pIgatoS', 'aNRBKFD', 'tMcaoXA', 'oObBYQU', 'MACoUIV', 'EEJMiWL']
</code></pre>
<p>Actual output:</p>
<pre><code>['pIGATOS', 'aNRBKFD', 'tMCAOXA', 'ooBBYQU', 'PIgATOS', 'PIGaTOS', 'PIGAtOS', 'PIGAToS', 'OObbYQU', 'MACoUIV', 'EEJMiWL', 'TMcAOXA', 'TMCaOXa', 'TMCAoXA']
</code></pre>
<p>Changing the perspective, you can see it lowers the words I have in the list words:</p>
<pre><code> ['pIgatoS', 
  'aNRBKFD', 
  'tMcaoXA', 
  'oObBYQU', 
  'MACoUIV', 
  'EEJMiWL']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are very close! You're actually appending to your new list <code>new</code> every time you replace a letter. That is why you are getting so many values in your list. </p>
<p>Another way you would run your code is to create a copy of grid1, and then replace each word every time you replace a letter. Here is a new function implementing these small changes:</p>
<pre><code>def lower_words(grid, positions_words_occupy):

    new = grid1.copy()

    for position in positions_words_occupy:

        line= position[0]
        column= position[1]

        row= new[line]
        element= row[column]

        #new.remove(row)
        new_word = row[:column] + element.lower() + row[column+1:]
        new[line] = new_word

    return new
</code></pre>
<p>Output running <code>lower_words(grid1, positions_words_occupy)</code>: </p>
<pre><code>['pIgatoS', 'aNRBKFD', 'tMcaoXa', 'oObBYQU', 'MACoUIV', 'EEJMiWL']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would first collect your grid positions in a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a> or sets, then rebuild the strings with lowercase letters if their positions exist in these sets.</p>
<p><strong>Demo:</strong></p>
<pre><code>from collections import defaultdict

grid1 = ["PIGATOS", "ANRBKFD", "TMCAOXA", "OOBBYQU", "MACOUIV", "EEJMIWL"]

positions_words_occupy = (
    (0, 0),
    (1, 0),
    (2, 0),
    (3, 0),
    (0, 2),
    (0, 3),
    (0, 4),
    (0, 5),
    (3, 2),
    (4, 3),
    (5, 4),
    (2, 2),
    (2, 3),
    (2, 4),
)

d = defaultdict(set)
for grid, pos in positions_words_occupy:
    d[grid].add(pos)

result = []
for grid, pos in d.items():
    result.append(
        "".join(x.lower() if i in pos else x for i, x in enumerate(grid1[grid]))
    )

print(result)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>['pIgatoS', 'aNRBKFD', 'tMcaoXA', 'oObBYQU', 'MACoUIV', 'EEJMiWL']
</code></pre>
</div>
<span class="comment-copy">It is unclear what's the logic of this...</span>
<span class="comment-copy">'oobbYQU' must be 'oObBYQU' :o</span>
<span class="comment-copy">I have corrected the code to output correctly.</span>
<span class="comment-copy">Worked! Thank you so much :)</span>
