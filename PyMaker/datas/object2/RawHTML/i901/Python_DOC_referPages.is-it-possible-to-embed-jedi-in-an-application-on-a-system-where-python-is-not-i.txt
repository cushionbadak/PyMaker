<div class="post-text" itemprop="text">
<p>I'm working on an (Windows and Mac) application that <a href="https://docs.python.org/3/extending/embedding.html" rel="nofollow noreferrer">uses Python as an embedded scripting language</a>.</p>
<p>The application includes an internal text editor, implemented using <a href="https://www.scintilla.org/" rel="nofollow noreferrer">Scintilla</a>, and I'm using <a href="https://jedi.readthedocs.io/en/latest/" rel="nofollow noreferrer">Jedi</a> for autocompletion, which generally works great.</p>
<p>However, when attempting autocompletion on a computer that does not have a separate installation of Python, Jedi raises an error:</p>
<blockquote>
<p><code>jedi.api.environment.InvalidPythonEnvironment</code>:</p>
<p>Could not get version information for 'python':  </p>
<p><code>FileNotFoundError(2, 'The system cannot find the file specified', None, 2, None)</code></p>
</blockquote>
<p>Digging into the code, I can see that <a href="https://github.com/davidhalter/jedi/blob/9617d4527de583b0b900166e4430a8964ee67dc6/jedi/evaluate/compiled/subprocess/__init__.py#L170" rel="nofollow noreferrer">the underlying code that is throwing</a> the <code>FileNotFoundError</code> is when Jedi attempts to run <code>python</code> using <code>subprocess.Popen</code>. Python is not installed on the computer, so this fails.</p>
<p>I can also reproduce the same issue on a computer that <em>does</em> have Python installed by editing my <code>Path</code> environment variable not to include the location of <code>python.exe</code>.</p>
<p>Ideally, we don't want users of our application to have to install Python just to get autocompletion working.</p>
<p>My questions:</p>
<ol>
<li><p>Is it possible to get Jedi <em>not</em> to spawn subprocesses, and instead run its code inside the same instance of Python within which it itself is running? I couldn't find anything about this in the documentation or the source code that deals with Environments, and extrapolating from the <a href="https://github.com/davidhalter/jedi-vim/issues/870" rel="nofollow noreferrer">discussion here</a> I suspect the answer might be no.</p></li>
<li><p>Is it possible somehow to get Jedi to use the same <code>python37.dll</code> that our application is using for its functionality, instead of looking for a <code>.exe</code> file that does not exist?</p></li>
<li><p>Is there any way we could make some kind of minimal Python installation within our existing app installation that uses the same DLLs/Python Lib etc? How could I go about doing this?</p></li>
<li><p>Is there any other way to get Jedi autocompletion working in our app without requiring the user to install Python, or including a full Python installer as part of our build process?</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>Is it possible to get Jedi not to spawn subprocesses, and instead run its code inside the same instance of Python within which it itself is running? I couldn't find anything about this in the documentation or the source code that deals with Environments, and extrapolating from the discussion here I suspect the answer might be no.</li>
</ol>
<p>This is definitely possible. All the tools are there. There are discussions ongoing here: <a href="https://github.com/davidhalter/jedi-vim/issues/870" rel="nofollow noreferrer">https://github.com/davidhalter/jedi-vim/issues/870</a>.</p>
<p>IMO a patch to Jedi is needed that uses an <code>jedi.api.environment.InterpreterEnvironment</code> in some cases like yours. It's definitely possible, it's just buggy at the moment.</p>
</div>
<span class="comment-copy">Thanks for the swift response! I think I must have misinterpreted some of the linked discussion when I read it before: I thought it was simply about finding the <i>correct</i> path to the executable, rather than about not requiring the executable to exist at all. I'll read it more carefully now. Thanks!</span>
<span class="comment-copy">It's not really clear what the issue is, in there we just know that <code>sys.executable</code> is wrong. This is a case we need to properly handle in Jedi (and not jedi-vim).</span>
<span class="comment-copy">For posterity's sake, I think option 3 is also most likely possible and is probably preferable, if I could have got it working? I tried simply copying the <code>python.exe</code> built by <code>build.bat</code> into my app's installation and passing its path into <code>jedi.create_environment()</code>. It got a bit further, but then raised an even more inscrutable error in the <code>pickle_load</code> call. After failing to diagnose that for a bit I gave up and tried just passing <code>jedi.api.environment.InterpreterEnvironment()</code> into the <code>Script</code> constructor, and so far that appears to work fine.</span>
