<div class="post-text" itemprop="text">
<p>Im making a program that prints all possible mixtures of numbers from 0 to 9 and I want to delete the numbers that my code puts before the actual number if the output is less than 6 places.</p>
<p>I`ve tried putting "" before 0 in every array, but it also puts random spaces in the output.</p>
<pre><code>Class1 = [0,1,2,3,4,5,6,7,8,9]
Class2 = [0,1,2,3,4,5,6,7,8,9]
Class3 = [0,1,2,3,4,5,6,7,8,9]
Class4 = [0,1,2,3,4,5,6,7,8,9]
Class5 = [0,1,2,3,4,5,6,7,8,9]
Class6 = [0,1,2,3,4,5,6,7,8,9]

for i in Class1:
    for j in Class2:
        for k in Class3:
            for l in Class4:
                for m in Class5:
                    for n in Class6:
                        print (i,j,k,l,m,n)
</code></pre>
<p>So I want it to output lets say 895 and not 000895. It does taht until it reaches 100000, but thats logical.</p>
</div>
<div class="post-text" itemprop="text">
<p>Replace:</p>
<pre><code>print (i,j,k,l,m,n)
</code></pre>
<p>By:</p>
<pre><code>print (100000*i+10000*j+1000*k+100*l+10*m+n)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Although the following code helps you with a similar approach you took in your question I would suggest another way of achieving what you want:</p>
<pre><code>Class1 = [0,1,2,3,4,5,6,7,8,9]
Class2 = [0,1,2,3,4,5,6,7,8,9]
Class3 = [0,1,2,3,4,5,6,7,8,9]
Class4 = [0,1,2,3,4,5,6,7,8,9]
Class5 = [0,1,2,3,4,5,6,7,8,9]
Class6 = [0,1,2,3,4,5,6,7,8,9]

for i in Class1:
    for j in Class2:
        for k in Class3:
            for l in Class4:
                for m in Class5:
                    for n in Class6:
                        print(int(''.join([str(i),str(j),str(k),str(l),str(m),str(n)])))
</code></pre>
<p>The above method is using the trick of converting individual numbers to strings, concatenating them with <code>join()</code> string method and re-converting them to <code>int</code>. With this,a string like <code>'0000001'</code> will be converted to <code>1</code>. </p>
<p>But a better way is to utilise <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product()</code></a> with the same trick:</p>
<pre><code>import itertools
for seq in itertools.product([0,1,2,3,4,5,6,7,8,9], repeat=6):
    print(int(''.join([str(s) for s in seq])))
</code></pre>
<p>Here inside <code>join()</code> I used <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> for brevity.</p>
</div>
<span class="comment-copy">What's wrong with <code>for i in range(1000000): print(i)</code>?</span>
<span class="comment-copy">Why do you need 6 lists with the same content? you can iterate the same list multiple times ...  your output would also add a space betwen each digit ... it would be simpler to do print over a range - if you need digits use a <code>for i in range(1000000): print(*str(i))</code> - to get rid of spaces simply <code>print(i)</code> - or use <code>print(str(iÂ´, sep="---")</code> to place --- between digits</span>
<span class="comment-copy"><code>print '\n'.join(map(str, range(1000000)))</code> is cool nope ?</span>
<span class="comment-copy">Thanks it did the trick</span>
<span class="comment-copy">This works fine but all solutions I got are a bit slower than my code. I wonder if it could be solved using multithreading and if yes, how could it be done</span>
<span class="comment-copy">Note that printing 10^6 numbers is time-consuming. In case of parallelising <code>multiprocessing</code> might be a better choice rather than multithreading. In that case I think defining 10 processes assigning each of them one number as the last digit of its output like <code>xxxxxx1</code>, <code>xxxxxx2</code>, ... will solve your problem.</span>
