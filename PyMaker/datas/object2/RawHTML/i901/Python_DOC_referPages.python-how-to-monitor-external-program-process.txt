<div class="post-text" itemprop="text">
<p>If I invoke a process with <code>subprocess.Popen</code> in Python as follows:</p>
<p><code>myproc = subprocess.Popen(...).communicate()</code></p>
<p>what is the correct way to see its status? Not its output to stdout or stderr, but its exit status once it's finished (e.g. 0 for success or another for failure)?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>returncode</code> is indeed the answer, but the solution doesn't need to be complicated.</p>
<pre><code>process = subprocess.Popen(...)
stdoutdata, stderrdata = process.communicate()
print process.returncode
</code></pre>
<p>More info in the <a href="http://docs.python.org/2/library/subprocess.html#subprocess.Popen.returncode">Python <code>subprocess</code> docs</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>A process doesn't have a return code until it's finished executing. Therefore, if it hasn't yet finished, you have to decide what you want to do: wait for it, or return some indicator of "I haven't finished yet".</p>
<p>If you want to wait, use <a href="http://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow noreferrer"><code>communicate</code></a> and then check the <code>returncode</code> attribute.</p>
<p>If you want to check whether the return code is set, and return <code>None</code> if not, use <a href="http://docs.python.org/3/library/subprocess.html#subprocess.Popen.poll" rel="nofollow noreferrer"><code>Popen.poll()</code></a>.</p>
<blockquote>
<p>Popen.poll()</p>
<p>Check if child process has terminated. Set and return returncode attribute.</p>
</blockquote>
<p>(if process hasn't terminated, <code>poll()</code> returns <code>None</code>)</p>
</div>
<div class="post-text" itemprop="text">
<p>You may need to call a <code>wait</code> on your subprocess and then (once is done) check the status in the <code>returncode</code> field of the subprocess instance.</p>
<p>I have a little routine that calls stuff, maybe it'll help...</p>
<pre><code>def singleProcessExecuter(command, ** kwargs):
    assert isinstance(command, list), "Expected 'command' parameter to be a list containing the process/arguments to execute. Got %s of type %s instead" % (command, type(command))
    assert len(command) &gt; 0, "Received empty list of parameters"
    retval = {
            "exitCode": -1,
            "stderr": u"",
            "stdout": u"",
            "execTime": datetime.timedelta(0),
            "command": None,
            "pid": None
            }
    retval["command"] = command
    log.info("::singleProcessExecuter &gt; At %s, executing \"%s\"" % (datetime.datetime.now(), " ".join(command)))
    #print("::singleProcessExecuter &gt; At %s, executing \"%s\"" % (datetime.datetime.now(), " ".join(parameter)))
    cwd = kwargs.get("cwd", os.getcwd())
    user = kwargs.get("user", getUid())
    sheel = kwargs.get("shell", False)
    startDatetime = datetime.datetime.now()
    myPopy = subprocess.Popen(command, cwd=cwd, preexec_fn=os.seteuid(getUid(user)), shell=sheel, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
    retval["pid"] = myPopy.pid
    log.debug("::singleProcessExecuter &gt; Command \"%s\" got pid %s" % (" ".join(command), myPopy.pid))
    try:
        retval["stdout"], retval["stderr"] = myPopy.communicate()
        myPopy.wait()
    except OSError, osErr:
        log.debug("::singleProcessExecuter &gt; Got %s %s in myPopy.communicate() when trying get output of command %s. It is probably a bug (more info: http://bugs.python.org/issue1731717)" % (osErr, type(osErr), command[0]))
    except Exception, e:
        log.warn("::singleProcessExecuter &gt; Got %s %s when trying to get stdout/stderr outputs of %s" % (type(e), e, " ".join(command)))
        log.debug("::singleProcessExecuter &gt; Got %s %s when trying to get stdout/stderr outputs of %s. Showing traceback:\n%s" % (type(e), e, " ".join(command), traceback.format_exc()))
        raise
    retval["exitCode"] = myPopy.returncode
    retval["execTime"] = datetime.datetime.now() - startDatetime
    #print(":singleProcessExecuter &gt; This is %s's retval:\n%s" % (" ".join(parameter), retval)) 
    return retval
</code></pre>
<p>You can try it with:</p>
<pre><code>print "This is the return: %s" % singleProcessExecuter(["ls", "-la"])
</code></pre>
</div>
<span class="comment-copy">is <code>wait</code> really required or does <code>communicate()</code> take of things when the process is still running?</span>
<span class="comment-copy">@user248237 The docs say "return code, set by <code>poll()</code> and <code>wait()</code> (and indirectly by <code>communicate()</code>)." So <code>communicate()</code> should take care of waiting for the process to end.</span>
<span class="comment-copy">I really like your code! I know it's been a few years, but I'd be glad to see the needed imports for that!</span>
