<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1373164/how-do-i-create-a-variable-number-of-variables">How do I create a variable number of variables?</a>
<span class="question-originals-answer-count">
                    16 answers
                </span>
</li>
</ul>
</div>
<p>I'm trying to import a CSV file data and define the first value of each line as a variable to a class object or a dict. I managed to create dictionaries from imported data, but can access them individually. Any enlightenment? Thank you.</p>
<p>CSV type:</p>
<p>name,gender,age,country,location</p>
<p>John,M,53,Brazil,SÃ£o Paulo</p>
<pre><code>import csv

file = "info.csv"
csv_open = open(file, newline="")
csv_data = csv.reader(csv_open)

data = []

for line in csv_data: # All CSV data as a list
    data.append(line)

class Person:

    """Simple register with name, gender, age, country and
    location info."""

    def __init__(self, name, gender, age, country, location):
        self.name = name
        self.gender = gender
        self.age = age
        self.country = country
        self.location = location

idx = 0

for elem in data:

    *problem_here_no_var* = Person( data[idx][0],
                                    data[idx][1],
                                    data[idx][2],
                                    data[idx][3],
                                    data[idx][4])
    idx += 1

print(John.country)
#My intention is to access a specific object and return any of it's attributes.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest using csv. Dictreader and either setting the headers yourself or just using your csv headers.  Something like this</p>
<pre><code>person_data = []
        with open(file, newline = '') as csvfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
                temp_person = Person(row['name'], row['gender'], row['age'], row['country'], row['location'])
                person_data.append(temp_person)
</code></pre>
<p>Now you have a list of Person objects that have already been initialized and you can do whatever you want with that list after.</p>
<p>checkout <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">https://docs.python.org/3/library/csv.html</a></p>
<p>DictReader and Writer get used fairly often.</p>
<p>as your code is now for the person object you need to add a </p>
<pre><code>__str__ method so you can print the values of the person
</code></pre>
<p>example</p>
<pre><code>def __str__(self):
return self.name + self.age.....
</code></pre>
<p>Now you can call </p>
<pre><code>for person in person_data:
    print(person)
# can also do print(person.name) to get name can be done for any field.
</code></pre>
<p>And this will print whatever you defined in the <strong>str</strong> function.</p>
</div>
<div class="post-text" itemprop="text">
<p>According to <a href="https://www.quora.com/How-can-I-dynamically-create-variables-in-Python" rel="nofollow noreferrer">Dathan Ault-McCoy</a>, you can do this using the __ dict __ dictionary.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can set attributes on the current module dynamically. See <a href="https://stackoverflow.com/questions/2933470/how-do-i-call-setattr-on-the-current-module">How do I call setattr() on the current module?</a></p>
<p>The idea being that you use the string from the first column as the attribute name. </p>
<p>That being said, I'm not sure why you would need to set a variable to have an unknown name since it would be difficult to access it later without knowing it's name. </p>
</div>
<span class="comment-copy">Use a <i>container</i>, not dynamically generated variables.</span>
<span class="comment-copy">Also, you are already looping through your data, there's no reason to manually keep track of an index. So, <code>for elem in data:</code>, don't use <code>data[idx][0]</code>, use <code>elem[0]</code></span>
