<div class="post-text" itemprop="text">
<p>I'm trying to parse JSON object from text with python regex. I found this match:</p>
<pre><code>'\{(?:[^{}]|(?R))*\}'
</code></pre>
<p>but in python I get this error:</p>
<pre><code>re.error: unknown extension ?R at position 12
</code></pre>
<p>See the regex match in <a href="https://regex101.com/r/yZ9fO6/1" rel="nofollow noreferrer">this regex101 example</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You found a regex that uses syntax that Python standard library <code>re</code> module doesn't support.</p>
<p>When you look at the regex101 link, you'll see that the pattern works when using the <a href="https://www.regular-expressions.info/pcre.html" rel="nofollow noreferrer">PRCE library</a>, and the problematic <code>(?R)</code> syntax that throws the error uses a feature called <a href="https://www.regular-expressions.info/recurse.html" rel="nofollow noreferrer"><em>recursion</em></a>. That feature is only supported by a <a href="https://www.regular-expressions.info/recurse.html" rel="nofollow noreferrer">subset of regex engines</a>.</p>
<p>You could install the <a href="https://pypi.org/project/regex/" rel="nofollow noreferrer"><code>regex</code> library</a>, an alternative regex engine for Pythont that explicitly does support that syntax:</p>
<pre><code>&gt;&gt;&gt; import regex
&gt;&gt;&gt; pattern = regex.compile(r'\{(?:[^{}]|(?R))*\}')
&gt;&gt;&gt; pattern.findall('''\
... This is a funny text about stuff,
... look at this product {"action":"product","options":{...}}.
... More Text is to come and another JSON string
... {"action":"review","options":{...}}
... ''')
['{"action":"product","options":{...}}', '{"action":"review","options":{...}}']
</code></pre>
<p>Another option is to just try and decode any section that starts with <code>{</code> using the <a href="https://docs.python.org/3/library/json.html#json.JSONDecoder.raw_decode" rel="nofollow noreferrer"><code>JSONDecoder.raw_decode()</code> method</a>; see <a href="https://stackoverflow.com/questions/21708192/how-do-i-use-the-json-module-to-read-in-one-json-object-at-a-time/21709058#21709058">How do I use the 'json' module to read in one JSON object at a time?</a> for an example approach. While the recursive regex can find JSON-<em>like</em> text, the decoder approach would let you extract only <em>valid</em> JSON text.</p>
<p>Here is a generator function that does just that:</p>
<pre><code>from json import JSONDecoder

def extract_json_objects(text, decoder=JSONDecoder()):
    """Find JSON objects in text, and yield the decoded JSON data

    Does not attempt to look for JSON arrays, text, or other JSON types outside
    of a parent JSON object.

    """
    pos = 0
    while True:
        match = text.find('{', pos)
        if match == -1:
            break
        try:
            result, index = decoder.raw_decode(text[match:])
            yield result
            pos = match + index
        except ValueError:
            pos = match + 1
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; demo_text = """\
This is a funny text about stuff,
look at this product {"action":"product","options":{"foo": "bar"}}.
More Text is to come and another JSON string, neatly delimited by "{" and "}" characters:
{"action":"review","options":{"spam": ["ham", "vikings", "eggs", "spam"]}}
"""
&gt;&gt;&gt; for result in extract_json_objects(demo_text):
...     print(result)
...
{'action': 'product', 'options': {'foo': 'bar'}}
{'action': 'review', 'options': {'spam': ['ham', 'vikings', 'eggs', 'spam']}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Thas is because python <code>re</code> module is pretty weak and do not support subroutines and recursion. Try <a href="https://pypi.org/project/regex/" rel="nofollow noreferrer">pypi</a> <code>regex</code> module instead. It will compile your regex.</p>
</div>
<span class="comment-copy">That's because that's not syntax supported by the Python regex parser. There is no universal regex syntax standard supported by all engines.</span>
<span class="comment-copy">Bottom line: don't just copy regex patterns from random locations and expect them to work in random regex engines. At a minimum <a href="https://www.regular-expressions.info/" rel="nofollow noreferrer">educate yourself a little about regex</a>. Recursion is supported in <a href="https://www.regular-expressions.info/recurse.html" rel="nofollow noreferrer">Perl, Ruby and and languages that use the PRCE library</a>, other languages need to use 3rd-party libraries, if available.</span>
<span class="comment-copy">Thank you very much. I use the 'regex' module and it now works ;)</span>
<span class="comment-copy">Glad to have been of help! Feel free to <a href="http://meta.stackexchange.com/questions/5234/how-does-accepting-an-answer-work">accept my answer</a> if you feel it was useful to you. :-)</span>
<span class="comment-copy">What is 'PCRE level'? Nowhere does <code>regex</code> claim to be PCRE compatible (feature or syntax wise).</span>
<span class="comment-copy">But it supports the most of features of PCRE</span>
<span class="comment-copy">@MartijnPieters ok ,changed. But I dont see a reason for a downvote. I proposed a Solution for the question that work.</span>
