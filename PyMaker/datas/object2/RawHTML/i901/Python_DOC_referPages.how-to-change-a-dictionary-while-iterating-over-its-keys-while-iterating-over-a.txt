<div class="post-text" itemprop="text">
<ol>
<li>I have a list l.  </li>
<li>I have a dictionary d.  </li>
</ol>
<p>I want to iterate over l. For any list-item, I want to iterate over the d.keys.</p>
<p>If some condition is met, I would like to 'update' my dictionary.  </p>
<p>I have naively tried to nest two for-loops and put in an if-statement -- One cannot change the length of the object one is iterating over.  </p>
<pre><code>d = {'this': '1', 'is': '2', 'a': '3', 'list': '4'}

l = ['A', 'B', 'C', 'D', 'E']

for word in l:
    for key in d.keys():
        if len(key) &lt; 2:#some condition
            d.pop(key)
        else:
            print(word, key)
</code></pre>
<p>This is the output I get:</p>
<pre><code>A this
A is
Traceback (most recent call last):
  File "untitled3.py", line 6, in &lt;module&gt;
    for key in d.keys():
RuntimeError: dictionary changed size during iteration
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should not change the size of a dictionary while iterating over a view of that dictionary. You can, instead, construct a new dictionary and <em>then</em> print whatever you like. For example:</p>
<pre><code>d = {'this': '1', 'is': '2', 'a': '3', 'list': '4'}
L = ['A', 'B', 'C', 'D', 'E']

d_new = {k: v for k, v in d.items() if len(k) &gt;= 2}

for word in L:
    for key in d_new:
        print(word, key)
</code></pre>
<p>As described in <a href="https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects" rel="nofollow noreferrer">the docs</a>:</p>
<blockquote>
<p>The objects returned by <code>dict.keys()</code>, <code>dict.values()</code> and
  <code>dict.items()</code> are view objects. They provide a dynamic view on the
  dictionaryâ€™s entries, which means that when the dictionary changes,
  the view reflects these changes....
  <strong>Iterating views while adding or deleting entries in the dictionary may
  raise a RuntimeError or fail to iterate over all entries.</strong></p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Instead of looping over <code>d</code> you could loop over a copy.</p>
<pre><code>d = {'this': '1', 'is': '2', 'a': '3', 'list': '4'}

l = ['A', 'B', 'C', 'D', 'E']

for word in l:
    for key in d.copy().keys(): # Notice the change
        if len(key) &lt; 2:#some condition
            d.pop(key)
        else:
            print(word, key)
</code></pre>
</div>
<span class="comment-copy">I think the way to go should be to build a new dictionary with the keys, that do not match the condition</span>
<span class="comment-copy">Copying the whole dictionary <code>len(l)</code> times might be a little expensive. Also to iterate over a dictionary's keys you can just use <code>for key in d.copy():</code>, no need to access <code>keys()</code>.</span>
