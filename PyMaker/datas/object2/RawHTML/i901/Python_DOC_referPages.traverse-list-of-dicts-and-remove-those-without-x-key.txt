<div class="post-text" itemprop="text">
<p>I have a list of JSON responses that I want to parse before putting it into a DataFrame.</p>
<p>In my list of 15,000 responses I want to remove those that do not have a certain key in it.</p>
<p>What I have so far seems to be playing funny business with the looping after I delete an element and I'm not sure why.</p>
<p>If I run the below - it correctly finds 3 matches of the 15k that should be deleted.</p>
<pre><code>Deleted! : 2591
Deleted! : 12306
Deleted! : 12307
</code></pre>
<p>-</p>
<pre><code>try:
    for i in range(len(trans)):
        #print("checking for deletion: "+ str(i))
        if 'CashBooks' not in trans[i]:
            #del trans[i]
            print("Deleted! : " + str(i))
except Exception as e:
    print(str(e))
    print('passed')
    pass
</code></pre>
<p>However when I un-comment the  <code>del</code> I get errors like so:</p>
<pre><code>Deleted! : 2591
Deleted! : 12305
list index out of range
passed
</code></pre>
<p>The list is quite large so it's hard to post sample data but hopefully someone can easily spot where I'm going wrong.</p>
<p>Thanks for your time.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer">filter</a> this would be faster and you won't be editing the data while looping through it</p>
<pre><code>def check_not_in(value):
    return 'Cashbooks' not in value

data = filter(check_not_in, trans)

#this is only to show what ones were deleted
def check_in(value):
    return 'Cashbooks' in value

deleted = filter(check_in, trans)
for _ in deleted: print("Deleted: {}".format(_))
</code></pre>
</div>
<span class="comment-copy">you shouldn't modify the list while iterating through</span>
<span class="comment-copy">you are modifying the length of the list during the iteration, hence the lenght of the list getting shorter but you are still iterating over the original lenght of the list</span>
<span class="comment-copy"><code>data = (item for item in trans if 'CashBooks' not in item)</code> would work if you're looking for a one liner, since that's exactly what filter does, but I like this answer.</span>
<span class="comment-copy">Filter is just cleaner to write in this instance, plus with this now you have a check function written. <i>even though you could with that as well</i></span>
<span class="comment-copy">Also, @TomasFarias according to <a href="https://stackoverflow.com/a/52634167/225020">this</a> post, filter can be faster if you're using Python 3.x. And the benefit can be of use if his data is large. Then again if you read down, someone says otherwise. In the end I just prefer this style more.</span>
<span class="comment-copy">That post doesn't apply in this case. When the function parameter is <code>None</code>, <code>filter</code> actually runs as <code>(item for item in iterable if item)</code>, omitting the function call that we are doing in this case. Try running the tests with a function that does the same thing, like: <code>def filter_func(n): return n</code>, I did and performance was worse than list comp. Also, just to clarify, I DO like the answer, thought the one liner added something of value if OP wanted to save a few lines, and if you're going to re use the function filter is the way to go, like your previous comment mentions it.</span>
<span class="comment-copy">Ahh, gotcha! Thanks for the insight</span>
