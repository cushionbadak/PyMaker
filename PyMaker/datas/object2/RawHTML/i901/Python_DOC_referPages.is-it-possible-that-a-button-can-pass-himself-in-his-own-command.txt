<div class="post-text" itemprop="text">
<p>I created button dynamically and i want to give them a command to change their picture and change position. Now is the problem that i dont manage to pass the button himself in command</p>
<p>I exchanged the pictures in the code below with text but the problem is still the same.</p>
<p>It doesn't work with lambda or i haven't used it right.</p>
<pre><code>from tkinter import *

karten = {'Stapel': [['D','A','BDA','D'],['D','2','BD2','D']]}
def p(button):
    button.config(text='HI')
RS = 'RS'
DA = 'DA'
D2 = 'D2'
root = Tk()
for i in karten:
    for j in karten[i]:
        vars()[j[2]] = Button(root,text=vars()[j[0]+j[1]],command=lambda: p(vars()[j[2]]))
        vars()[j[2]].pack()
root.mainloop()
</code></pre>
<p>i expected that the button changes the text but it only produced an error.</p>
</div>
<div class="post-text" itemprop="text">
<p>The dict returned by <code>vars</code> is different inside the <code>lambda</code> and outside of it, thus you put your key in one dict, then try to retrieve it from another. Also, you should probably not use <code>vars</code> (or <code>globals</code> or <code>locals</code>) in the first place, if you can help it. (And for the <code>text</code>, using <code>vars()</code> does not make any sense whatsoever.)</p>
<p>Instead, you could just create a dedicated dictionary for the buttons in the global scope and access that one in your <code>lambda</code>. The values does not have to be present in the dict when you create the lambda, just when you call it.</p>
<pre><code>buttons = {}
for i in karten:
    for j in karten[i]:
        b = Button(root, text=j[0]+j[1], command=lambda j=j: p(buttons[j[2]]))
        b.pack()
        buttons[j[2]] = b
</code></pre>
<p>Also note the <code>j=j</code> in the <code>lambda</code> (see <a href="https://stackoverflow.com/q/19837486/1639625">here</a> for more explanation).</p>
<p>Alternatively, you could use <code>configure</code> to set the <code>command</code> after creating the button and defining the variable, thus not needing the dictionary at all:</p>
<pre><code>for i in karten:
    for j in karten[i]:
        b = Button(root, text=j[0]+j[1])
        b.configure(command=lambda b=b: p(b))
        b.pack()
</code></pre>
<p>Or using <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>functools.partial</code></a> instead of <code>lambda b=b</code>:</p>
<pre><code>        b.configure(command=functools.partial(p, b))
</code></pre>
</div>
<span class="comment-copy">Should it be like <code>vars()[j[2]]</code> or was that just your attempt to make it work somehow?</span>
<span class="comment-copy">that was my attempt</span>
<span class="comment-copy">It's been a while, since I worked with Tkinter, but did you try subclassing Button to e.g. modify the way it handles the command, passing <code>self</code> then?</span>
<span class="comment-copy">thanks thats perfect</span>
