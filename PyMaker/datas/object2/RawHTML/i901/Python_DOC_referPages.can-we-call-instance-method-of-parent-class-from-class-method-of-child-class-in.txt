<div class="post-text" itemprop="text">
<pre><code>In Python 2
class P(object):
  def M1(self): print 'inside P class M1())'
class Q(P):
  def M1(self): print 'inside Q class M1()'
  @classmethod
  def M2(cls):
    super(Q,cls).M1(cls)
s = Q()
s.M2()
----------------In Python3-------
class P(object):
   def M1(self): print ('inside M1 Method of P class')
class Q(P):
  @classmethod
  def M2(cls):
    super().M1(cls) or super(Q,cls)M1(cls)
s = Q()
s.M2()
</code></pre>
<p>In Python2:
super(Q,cls).M1(cls)#Getting error from here,But we can use same statement in python 3 and it works . I just wondering whether python 2.7 can have any similar way to call parent class implementation by using super() or not .</p>
<p>`</p>
</div>
<div class="post-text" itemprop="text">
<p>Modifying the print statements to functions, this seems to run happily inside of Python 3.7</p>
<pre><code>Python 3.7.1 (default, Dec 10 2018, 22:54:23) [MSC v.1915 64 bit (AMD64)]
Type 'copyright', 'credits' or 'license' for more information
IPython 7.2.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: class P(object):
   ...:     def M1(self): print('inside P')
   ...: class Q(P):
   ...:     def M1(self): print('inside Q')
   ...:     @classmethod
   ...:     def M2(cls):
   ...:         super(Q, cls).M1(cls)
   ...:

In [2]: s = Q()

In [3]: s.M2()
inside P
</code></pre>
<p>But fails in Python2 with the error</p>
<blockquote>
<p>TypeError: unbound method M1() must be called with Q instance as first argument (got type instance instead)</p>
</blockquote>
<p>Exactly as the error says, because <code>M1</code> is an instance method its argument must be an instance, <em>not</em> a class. You can get around this by making <code>M1</code> static and take no arguments. </p>
<p><s>I suspect this works in Python3 because of tricks inside the implementation of <code>super()</code> to support usage inside of methods. Reading through the <a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow noreferrer">standard library docs</a> and <a href="https://rhettinger.wordpress.com/2011/05/26/super-considered-super/" rel="nofollow noreferrer">this</a> recommended post were helpful.</s></p>
<p>This works in Python3 because it doesn't assert the type of the first argument -- it assumes the value is suitable and doesn't hit an error. An example of duck typing.</p>
<h2>Edit, more general to Python 3 behavior</h2>
<p>The error OP is seeing is not actually due to <code>super()</code> but due to how Python 3 handles instance methods differently than Python 2. An example class could be</p>
<pre><code>&gt;&gt;&gt; class Foo(object):
&gt;&gt;&gt;     def __init__(self):
&gt;&gt;&gt;         self._bar = 0
&gt;&gt;&gt;     def bar(self): 
&gt;&gt;&gt;         print('baz')
&gt;&gt;&gt;     def boo(self):
&gt;&gt;&gt;         self._bar+=1
&gt;&gt;&gt;         print(self._bar)
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; Foo.bar(Foo)  # fine in Python3, TypeError in Python2
&gt;&gt;&gt; Foo.bar(None)  # fine in Python3, TypeError in Python2
&gt;&gt;&gt; f.bar()  # fine in both
baz
&gt;&gt;&gt; Foo.boo(Foo)  # AttributeError in Python3, TypeError in Python2
</code></pre>
<p>In both cases for, Python2 has an embedded assertion that the first argument of an instance method <em>must</em> be an instance type of the matching class. Python3 does not have this assertion for -- it's happy receiving <code>None</code> or a <code>type</code> type, at least until whatever argument it received fails to work. This is a great example of <a href="https://en.wikipedia.org/wiki/Duck_typing" rel="nofollow noreferrer">ducktyping</a>.</p>
<p>So <code>Foo.bar</code> works in Python3 because it doesn't actually care what the value of the argument is -- it doesn't use it. In <code>Foo.boo</code>, however, it fails with an <code>AttributeError</code> when trying to increment the <code>Foo._bar</code> instance property (because that instance property doesn't exist in the argument it was given).</p>
</div>
<span class="comment-copy">I'm pretty sure this does not run in Python 3.</span>
<span class="comment-copy">Please add the error (full traceback) as well to your question.</span>
<span class="comment-copy">If you want your code to be Python 3 compatible (as you suggest in your question), at least use print functions instead of print statements in your example.</span>
<span class="comment-copy">class P(object):    def M1(self): print ('inside M1 Method of P class') class Q(P):   @classmethod   def M2(cls):     super().M1(cls) s = Q() s.M2()</span>
<span class="comment-copy">So cant we call instance method from class method in python 2.7 ? But in python3 it works fine.</span>
<span class="comment-copy">In Python 2.7 the <code>self</code> argument of an instance method <i>must</i> be an instance or you'll get a <code>TypeError</code>. If you look at the type of <code>P.M1</code> in Python2 it is <code>unbound method P.M1</code>, but in Python3 it is a namespace-scoped function. So in Python3 it looks like it infers that <code>P.M1</code> is <i>actually</i> static.</span>
<span class="comment-copy">My above comment was a bit off in that Python3 isn't actually inferring anything. I updated my answer with extra information about Python3's behavior.</span>
