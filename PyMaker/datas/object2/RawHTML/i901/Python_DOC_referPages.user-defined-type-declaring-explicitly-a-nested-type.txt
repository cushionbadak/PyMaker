<div class="post-text" itemprop="text">
<p>I find it really useful to have Python types such as <code>Dict[str, int]</code>, which declare the types they contain and allow them to be type checked too. However I can't find how I can create such a type. If, for example, I write</p>
<pre class="lang-py prettyprint-override"><code>    class Classy:
       def __init__(self, x: Any) -&gt; None:
           self.value = x
</code></pre>
<p>how can I express it as <code>Classy[int]</code>, <code>Classy[str]</code>, <code>Classy[List[int]]</code>, etc?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>TypeVar()</code> to declare type variable, and use <code>Generic</code> as base class.</p>
<pre><code>from typing import TypeVar, Generic
T = TypeVar('T')
class Classy(Generic[T]):
    def __init__(self, x: T) -&gt; None:
        self.value = x
    def get_value(self) -&gt; T:
        return self.value
</code></pre>
<p>You can try:</p>
<pre><code>class1 = Classy[int](100)
class2 = Classy[str]('abc')
print(class1.get_value())
print(class2.get_value())
</code></pre>
<p>Then you will see:</p>
<pre><code>100
abc
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/typing.html#user-defined-generic-types" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
