<div class="post-text" itemprop="text">
<p>I am using JetBrains Pycharm (Windows OS) for python coding. In my code, I read a csv file using pd.read_csv(dataset). Then do few moderation on some of the table columns &amp; finally want to see the updated table, so at the end give the command --&gt; print (dataset).</p>
<p>Now when the modified dataset is printed at the bottom window, all the elements of the dataset are printed in floating point exponential format.</p>
<p>e.g., 
<code>[  0.00000000e+00   0.00000000e+00   1.00000000e+00   1.65349200e+05
    1.36897800e+05   4.71784100e+05]</code></p>
<p>This is where I need the help. I need the dataset to be printed in flaoting point decimal format or simple decimal format. </p>
<p>How that is possible in the easiest way ? 
Also, is there any option in Pycharm, to configure the output format (exponential,  decimal etc..) from any setting/configuration window, instead of hard-coding ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use {n}. format () </p>
<p>For ex:Â <strong>'{:n}'.format(1234))</strong></p>
<pre><code>ds_x=[ 0.00000000e+00, 0.00000000e+00, 1.00000000e+00,1.65349200e+05, 1.36897800e+05, 4.71784100e+05]
# For Numpy arrays use '.astype'
# Copy of the array 'ds_x', cast to a specified type 'float'.
# Note: Try type 'float32' OR 'float64' if the below fails to provide correct precision.
data_set = ds_x.astype(float)
for i in data_set:
    print("{:.16f}".format(float(i)))
</code></pre>
<p># More about better precision can be found <a href="https://www.numpy.org/devdocs/user/basics.types.html#extended-precision" rel="nofollow noreferrer">here</a> </p>
<p>Output:</p>
<p>0.0000000000000000</p>
<p>0.0000000000000000</p>
<p>1.0000000000000000    </p>
<p>165349.2000000000116415  </p>
<p>136897.7999999999883585  </p>
<p>471784.0999999999767169                                     </p>
<p>Or you can use the alternative way:</p>
<pre><code>"%.16f" % (float( 00,1.65349200e+05))
</code></pre>
<p>The second question regarding PyCharm. You may want to look into <a href="https://www.jetbrains.com/help/pycharm/settings-code-style.html#formatter_options" rel="nofollow noreferrer">formatting markers</a> . Complete details on  <a href="https://www.jetbrains.com/help/pycharm/reformatting-source-code.html" rel="nofollow noreferrer">reformatting</a> .</p>
<hr/>
<p><strong>Update:</strong> </p>
<blockquote>
<p>Here is a updated code sample with the dataset that was provided by you.</p>
</blockquote>
<pre><code>import numpy as np

ds = np.array([[ 0.00000000e+00, 1.00000000e+00, 0.00000000e+00, 2.86637600e+04, 1.27056210e+05, 2.01126820e+05],
                [ 0.00000000e+00, 0.00000000e+00, 1.00000000e+00, 1.44372410e+05, 1.18671850e+05, 3.83199620e+05]])

for data_x in iter(ds):
    print()
    for data_y in data_x:
        print("%.16f" % float(data_y))
</code></pre>
<p>output:</p>
<pre><code>0.0000000000000000
1.0000000000000000
0.0000000000000000
28663.7599999999983993
127056.2100000000064028
201126.8200000000069849

0.0000000000000000
0.0000000000000000
1.0000000000000000
144372.4100000000034925
118671.8500000000058208
383199.6199999999953434
</code></pre>
<p>Regarding the error:</p>
<blockquote>
<p>TypeError: only size-1 arrays can be converted to Python scalars</p>
</blockquote>
<p>This is because the dataset that you are using is a Python matrix OR a list of a list / two arrays. The first code sample in this post is using one loop which works with one array; however, since you are using a larger dataset containing two arrays on the first loop it will pass the entire array causing the above error to be outputted. To correct this I simply added a second loop to iterate through each value for each array.</p>
</div>
<span class="comment-copy">Read what the standard library documentation has to say about the <code>.format()</code> method: <a href="https://docs.python.org/3/library/string.html#formatstrings" rel="nofollow noreferrer">docs.python.org/3/library/string.html#formatstrings</a></span>
<span class="comment-copy">Thank you. In my case I want to apply it on a big dataset (ds) having multiple rows &amp; columns. So what I type is -                 for i in ds_x:     print(print("{:.16f}".format(float(i))))                                                                                      I got the error -                                                                                                           line 20, in &lt;module&gt;     print("%.2f" % (float(i))) TypeError: only length-1 arrays can be converted to Python scalars</span>
<span class="comment-copy">The appears to be numpy related <a href="https://stackoverflow.com/a/36680545/7548672">stackoverflow.com/a/36680545/7548672</a> - try doing data_set = ds_x.astype(float) before the for loop in my above example.</span>
<span class="comment-copy">I have edited my example showing you what I mean.</span>
<span class="comment-copy">Thanks. I'm unlucky again. It still throws the same error - TypeError: only length-1 arrays can be converted to Python scalars.                  If I print my dataset (ds), it shows the below, which will give you a better idea, what exactly my dataset is - print (ds)                                                                                                                    [[  0.00000000e+00   1.00000000e+00   0.00000000e+00   2.86637600e+04    1.27056210e+05   2.01126820e+05]  [  0.00000000e+00   0.00000000e+00   1.00000000e+00   1.44372410e+05    1.18671850e+05   3.83199620e+05]]</span>
<span class="comment-copy">I added an update to my post using your dataset. If it is still not what you are looking for, could you please possibly update your original post providing your code which is not working. I will try to edit what I see could be the issue. Thanks.</span>
