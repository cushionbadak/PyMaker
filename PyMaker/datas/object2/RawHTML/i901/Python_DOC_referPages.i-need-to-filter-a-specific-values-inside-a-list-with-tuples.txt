<div class="post-text" itemprop="text">
<p>i need to filter out data from a list that i get:</p>
<pre><code>[{"end": 1547230999000, "attributes": {}, "metric": "system.cpu.idle", "interval": 20, "start": 1547227400000, "length": 180, "query_index": 0, "aggr": null, "scope": "host:osboxes", "pointlist": [[1547227400000.0, 99.6485366821289], [1547227420000.0, 99.60060119628906], [1547227440000.0, 99.40513610839844],  "expression": "system.cpu.idle{host:osboxes}", "unit": [{"family": "percentage", "scale_factor": 1.0, "name": "percent", "short_name": "%", "plural": "percent", "id": 17}, null], "display_name": "system.cpu.idle"}], "to_date": 1547231000000, "resp_version": 1, "query": "system.cpu.idle{*}by{host}", "message": "", "group_by": ["host"]}
</code></pre>
<p>i only want the data that comes after the <code>pointlist</code> key and before the <code>expression</code> key, thought about regex for this problem, i'm not sure about it though. </p>
<p>2) from the tuples i'd get after the 1st filter say for example:
<code>[1547227420000.0, 99.60060119628906]</code> i need just the 2nd value in each one in some kind of structure.</p>
<p>Tried using regex but i cant seem to find the correct rule to grab just the stuff i want.</p>
<p>Here's the whole json ( dictionary) that i get as an input:</p>
<pre><code>[{"end": 1547230999000, "attributes": {}, "metric": "system.cpu.idle", "interval": 20, "start": 1547227400000, "length": 180, "query_index": 0, "aggr": null, "scope": "host:osboxes", "pointlist": [[1547227400000.0, 99.6485366821289], [1547227420000.0, 99.60060119628906], [1547227440000.0, 99.40513610839844], [1547227460000.0, 99.5660171508789], [1547227480000.0, 99.68238067626953], [1547227500000.0, 99.58213806152344], [1547227520000.0, 99.56404876708984], [1547227540000.0, 99.59886169433594], [1547227560000.0, 99.33905792236328], [1547227580000.0, 99.49874877929688], [1547227600000.0, 99.69874572753906], [1547227620000.0, 99.58246231079102], [1547227640000.0, 99.01371002197266], [1547227660000.0, 99.53114318847656], [1547227680000.0, 99.48202896118164], [1547227700000.0, 99.49647521972656], [1547227720000.0, 99.68254089355469], [1547227740000.0, 99.43094635009766], [1547227760000.0, 99.38209533691406], [1547227780000.0, 99.6488265991211], [1547227800000.0, 99.42307662963867], [1547227820000.0, 99.28117370605469], [1547227840000.0, 99.51512908935547], [1547227860000.0, 96.35371780395508], [1547227880000.0, 99.0471420288086], [1547227900000.0, 99.59866333007812], [1547227920000.0, 99.41494750976562], [1547227940000.0, 99.4984130859375], [1547227960000.0, 99.5489501953125], [1547227980000.0, 99.48962783813477], [1547228000000.0, 99.58173370361328], [1547228020000.0, 99.63229370117188], [1547228040000.0, 99.38098907470703], [1547228060000.0, 99.46452331542969], [1547228080000.0, 99.5501480102539], [1547228100000.0, 99.46395111083984], [1547228120000.0, 99.6651611328125], [1547228140000.0, 99.66544342041016], [1547228160000.0, 99.5067024230957], [1547228180000.0, 99.53192901611328], [1547228200000.0, 99.58263397216797], [1547228220000.0, 99.4233169555664], [1547228240000.0, 99.51488494873047], [1547228260000.0, 99.69884490966797], [1547228280000.0, 99.17123413085938], [1547228300000.0, 99.48178100585938], [1547228320000.0, 99.61544799804688], [1547228340000.0, 99.38138961791992], [1547228360000.0, 99.49983215332031], [1547228380000.0, 99.58074951171875], [1547228400000.0, 99.44026565551758], [1547228420000.0, 99.56558227539062], [1547228440000.0, 99.61634826660156], [1547228460000.0, 99.2971076965332], [1547228480000.0, 99.514404296875], [1547228500000.0, 99.56529235839844], [1547228520000.0, 99.48181915283203], [1547228540000.0, 99.49799346923828], [1547228560000.0, 99.56507110595703], [1547228580000.0, 99.47320556640625], [1547228600000.0, 99.49816131591797], [1547228620000.0, 99.59886169433594], [1547228640000.0, 99.0047836303711], [1547228660000.0, 99.48117065429688], [1547228680000.0, 99.66544342041016], [1547228700000.0, 99.49843215942383], [1547228720000.0, 99.48194885253906], [1547228740000.0, 99.63235473632812], [1547228760000.0, 99.36409378051758], [1547228780000.0, 93.1688461303711], [1547228800000.0, 99.34782409667969], [1547228820000.0, 99.46506118774414], [1547228840000.0, 99.33065795898438], [1547228860000.0, 99.59893035888672], [1547228880000.0, 99.47415924072266], [1547228900000.0, 99.46299743652344], [1547228920000.0, 99.5824966430664], [1547228940000.0, 99.39748764038086], [1547228960000.0, 99.46452331542969], [1547228980000.0, 99.71566772460938], [1547229000000.0, 99.4896354675293], [1547229020000.0, 99.481689453125], [1547229040000.0, 99.48186492919922], [1547229060000.0, 99.43965148925781], [1547229080000.0, 99.41500854492188], [1547229100000.0, 99.56536102294922], [1547229120000.0, 99.45612716674805], [1547229140000.0, 99.28033447265625], [1547229160000.0, 98.72547149658203], [1547229180000.0, 99.36448669433594], [1547229200000.0, 99.39749145507812], [1547229220000.0, 99.55000305175781], [1547229240000.0, 99.32996368408203], [1547229260000.0, 99.43115234375], [1547229280000.0, 99.41422271728516], [1547229300000.0, 99.41427993774414], [1547229320000.0, 99.4978256225586], [1547229340000.0, 99.63327026367188], [1547229360000.0, 99.45573425292969], [1547229380000.0, 99.04618835449219], [1547229400000.0, 99.56463623046875], [1547229420000.0, 99.42306137084961], [1547229440000.0, 99.36380004882812], [1547229460000.0, 99.6164779663086], [1547229480000.0, 99.48064422607422], [1547229500000.0, 99.44741821289062], [1547229520000.0, 99.5820083618164], [1547229540000.0, 99.23918914794922], [1547229560000.0, 99.38034057617188], [1547229580000.0, 99.58187103271484], [1547229600000.0, 99.47303771972656], [1547229620000.0, 99.44770050048828], [1547229640000.0, 99.56521606445312], [1547229660000.0, 99.36420822143555], [1547229680000.0, 93.31424713134766], [1547229700000.0, 99.19745635986328], [1547229720000.0, 99.3642807006836], [1547229740000.0, 99.3148422241211], [1547229760000.0, 99.41403198242188], [1547229780000.0, 98.98696899414062], [1547229800000.0, 99.36422729492188], [1547229820000.0, 99.59711456298828], [1547229840000.0, 99.41479110717773], [1547229860000.0, 99.4476089477539], [1547229880000.0, 99.59845733642578], [1547229900000.0, 99.42321014404297], [1547229920000.0, 99.46488189697266], [1547229940000.0, 99.59845733642578], [1547229960000.0, 99.51408767700195], [1547229980000.0, 99.53137969970703], [1547230000000.0, 99.59893035888672], "expression": "system.cpu.idle{host:osboxes}", "unit": [{"family": "percentage", "scale_factor": 1.0, "name": "percent", "short_name": "%", "plural": "percent", "id": 17}, null], "display_name": "system.cpu.idle"}], "to_date": 1547231000000, "resp_version": 1, "query": "system.cpu.idle{*}by{host}", "message": "", "group_by": ["host"]}
</code></pre>
<p>So the end result should achieve something of that nature:</p>
<p>structure = [99.6485366821289,99.60060119628906,99.40513610839844...and so on]`</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm assuming you're dealing with regular Python objects, so regexes aren't the way to go.</p>
<p>If you are reading some json in, you can do this beforehand:</p>
<pre><code>import json

with open("source_file.json", "r") as fh:
    data = json.load(fh)
</code></pre>
<p>Collecting the data you need is then:</p>
<pre><code>new_list = []
for obj in data:
    new_list.extend(second for _, second in obj['pointlist'])
</code></pre>
<p>I'm guessing here that in case you have multiple "pointlist" instances you'd want to gather all of them. If you know there will be only one, this would work just as well:</p>
<pre><code>new_list = [second for _, second in data[0]['pointlist']]
</code></pre>
<p>This is known as a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> and is a quick way to process lists.</p>
<p>The <code>_, second</code> is called destructuring. Here <code>_</code> is a dummy name, you could write <code>first, second</code> just as well, and the technique works whenever you have a list or tuple with a known number of items.</p>
</div>
<span class="comment-copy"><a href="https://stackoverflow.com/editing-help">stackoverflow.com/editing-help</a></span>
<span class="comment-copy">Especially, while editing, please cut the example data to just a handful of rows, and maybe ellipses to indicate there's more.</span>
<span class="comment-copy">Please only post one question per question.</span>
<span class="comment-copy">Wow that worked like a charm!. Thousand thank you's :)</span>
