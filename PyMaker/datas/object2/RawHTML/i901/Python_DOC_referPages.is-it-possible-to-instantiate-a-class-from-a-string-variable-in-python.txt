<div class="post-text" itemprop="text">
<p>Let's say I have a string that holds a valid python class (not a class name). E.g.:</p>
<pre><code>class_template = """
class MyClass(object):
    def __init__(self, name):
         self.name = name

    def print_name(self):
        print('My name is: ' + self.name)

    def add_whatever(a, b):
        return a + b
"""
</code></pre>
<p>Is it possible in python to implement a function (<code>string_to_class</code> in the example below) that receives this string and creates a python class out of it so I can instantiate the class later on?</p>
<pre><code>class_template = """
class MyClass(object):
    def __init__(self, name):
         self.name = name

    def print_name(self):
        print('My name is: ' + self.name)

    def add_whatever(a, b):
        return a + b
"""

MyClass = string_to_class(class_template)
my_class_instance = MyClass('Ben')

print(MyClass.add_whatever(2, 3))
my_class_instance.print_name()
</code></pre>
<p>The output should be:</p>
<pre><code>5
My name is: Ben
</code></pre>
<p>One possible solution might be to write out the string to a <code>MyClass.py</code> file and use <code>__import__()</code> to load it. Is there any other (in memory) solution?</p>
<p>Thank you for the answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>A commenter mentioned <code>exec</code>; this is how you would put it together:</p>
<pre><code>def string_to_class(python_text):
    local_vars = {}
    exec(python_text, {}, local_vars)
    # assume just a single new symbol was created (the class), and return it
    return list(local_vars.values())[0]

class_template = """
class MyClass(object):
    def __init__(self, name):
         self.name = name

    def print_name(self):
        print('My name is: ' + self.name)

    @staticmethod
    def add_whatever(a, b):
        return a + b
"""

MyClass = string_to_class(class_template)
my_class_instance = MyClass('Ben')

print(MyClass.add_whatever(2, 3))
my_class_instance.print_name()
</code></pre>
<p>But like some of the other commenters mentioned, it's not a commonly-applied technique, so be careful with it. You'll also run into problems pretty quickly as your use case gets more complicated:</p>
<pre><code>some_string_that_defines_a_base_class = "case Base..."
some_string_that_defines_a_derived_class = "case Derived(Base):..."

Base = string_to_class(some_string_that_defines_a_base_class)
# this will crash because Base isn't defined in the scope that the string
# is being evaluated with
Derived = string_to_class(some_string_that_defines_a_derived_class)
</code></pre>
<p>You can fix it with a direct call to <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer"><code>exec</code></a> (the <code>string_to_class</code> function is simply not powerful enough), but it quickly gets very tricky to use: I haven't even mentioned how <code>import</code>s would work yet. There are other techniques (function decorators, metaclasses) that might allow you to do what you want to do that involve less pain, but sometimes <code>exec</code> really is your only option.</p>
</div>
<span class="comment-copy">I raise the x/y question: <b>why</b> do you want to do this?  You have a couple of characteristics that smell like there's an inelegant system design behind the problem.</span>
<span class="comment-copy">You can look into the <code>eval</code> function family, but let's see whether there's a design flaw first.</span>
<span class="comment-copy">You could use <code>exec</code> for this (this is actually what <code>namedtuple</code> does, or did at some point).</span>
<span class="comment-copy">@Prune I don't want to do this. I'm simply interested in pythons capabilities. That's all. Thanks for the answer.</span>
<span class="comment-copy">@juanpa.arrivillaga Thank you.</span>
<span class="comment-copy">That's exactly what I was looking for. Thank you.</span>
