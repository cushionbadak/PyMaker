<div class="post-text" itemprop="text">
<p>Say you have a piece of code that accepts either a list or a file name, and must filter through each item of either one provided by applying the same criteria:</p>
<pre class="lang-python prettyprint-override"><code>import argparse

parser = argparse.ArgumentParser()
group = parser.add_mutually_exclusive_group(required = True)
group.add_argument('-n', '--name', help = 'single name', action = 'append')
group.add_argument('-N', '--names', help = 'text file of names')
args = parser.parse_args()

results = []

if args.name:
    # We are dealing with a list.
    for name in args.name:
        name = name.strip().lower()
        if name not in results and len(name) &gt; 6: results.append(name)

else:
    # We are dealing with a file name.
    with open(args.names) as f:
        for name in f:
            name = name.strip().lower()
            if name not in results and len(name) &gt; 6: results.append(name)
</code></pre>
<p>I'd like to remove as much redundancy as possible in the above code. I tried creating the following function for <code>strip</code> and <code>lower</code>, but it didn't remove much repeat code:</p>
<pre class="lang-python prettyprint-override"><code>def getFilteredName(name):
    return name.strip().lower()
</code></pre>
<p>Is there any way to iterate over both a list and a file in the same function? How should I go about reducing as much code as possible?</p>
</div>
<div class="post-text" itemprop="text">
<p>You have duplicate code that you can simplify: <code>list</code> and <code>file-objects</code> are both <em>iterables</em> - if you create a method that takes an <code>iterable</code> and returns the correct output you have less code duplication (DRY).  </p>
<p><em>Choice of datastructure:</em> </p>
<p>You do not want duplicate items, meaning <code>set()</code> or <code>dict()</code> are better suited to collect the data you want to parse - they eliminate duplicates <em>by design</em> which is faster then looking if an item is already <code>in</code> a list:</p>
<ul>
<li>if the order of names matter use

<ul>
<li>a <code>OrderedDict</code> from <code>collections</code> when on python 3.6 or less or </li>
<li>a normal <code>dict</code> for 3.7 or more (dicts gurantee input order)</li>
<li>more info: <a href="https://stackoverflow.com/questions/39980323/are-dictionaries-ordered-in-python-3-6">Are dictionaries ordered in Python 3.6+?</a></li>
</ul></li>
<li>if name order is not important, use a <code>set()</code> </li>
</ul>
<p>Either one of the above choices removes duplicates for you. </p>
<pre><code>import argparse
from collections import OrderedDict # use normal dict on 3.7+ it hasinput order

def get_names(args):
    """Takes an iterable and returns a list of all unique lower cased elements, that
    have at least length 6."""

    seen = OrderedDict() # or dict or set

    def add_names(iterable):
        """Takes care of adding the stuff to your return collection."""
        k = [n.strip().lower() for n in iterable] # do the strip().split()ing only once
        # using generator comp to update - use .add() for set()
        seen.update( ((n,None) for n in k if len(n)&gt;6))

    if args.name:
        # We are dealing with a list:
        add_names(args.name)

    elif args.names:
        # We are dealing with a file name:
        with open(args.names) as f:
            add_names(f)

    # return as list    
    return list(seen)
</code></pre>
<hr/>
<p>Testcode:</p>
<pre><code>parser = argparse.ArgumentParser()
group = parser.add_mutually_exclusive_group(required = True)
group.add_argument('-n', '--name', help = 'single name', action = 'append')
group.add_argument('-N', '--names', help = 'text file of names')
args = parser.parse_args()

results = get_names(args)

print(results)
</code></pre>
<p>Output for <code>-n Joh3333n -n Ji3333m -n joh3333n -n Bo3333b -n bo3333b -n jim</code>:</p>
<pre><code>['joh3333n', 'ji3333m', 'bo3333b']
</code></pre>
<p>Input file:</p>
<pre><code>with open("names.txt","w") as names:
    for n in ["a"*k for k in range(1,10)]:
        names.write( f"{n}\n")
</code></pre>
<p>Output for <code>-N names.txt</code>:</p>
<pre><code>['aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa'] 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Subclass <code>list</code> and make the subclass a <a href="https://docs.python.org/3/reference/datamodel.html#with-statement-context-managers" rel="nofollow noreferrer">context manager</a>:</p>
<pre><code>class F(list):
    def __enter__(self):
        return self
    def __exit__(self,*args,**kwargs):
        pass
</code></pre>
<p>Then the conditional can decide what to iterate over</p>
<pre><code>if args.name:
    # We are dealing with a list.
    thing = F(args.name)
else:
    # We are dealing with a file name.
    thing = open(args.names)
</code></pre>
<p>And the iteration code can be factored out.</p>
<pre><code>results = []

with thing as f:
    for name in f:
        name = name.strip().lower()
        if name not in results and len(name) &gt; 6: results.append(name)
</code></pre>
<hr/>
<p>Here is a similar solution that makes an <code>io.StringIO</code> object from either the file or the list then uses a <em>single</em> set of instructions to process them.</p>
<pre><code>import io

if args.name:
    # We are dealing with a list.
    f = io.StringIO('\n'.join(args.name))
else:
    # We are dealing with a file name.
    with open(args.names) as fileobj:
        f = io.StringIO(fileobj.read())

results = []

for name in f:
    name = name.strip().lower()
    if name not in results and len(name) &gt; 6: results.append(name)
</code></pre>
<p>If the file is huge and memory is scarce, this has the disadvantage of reading the entire file into memory.</p>
</div>
<span class="comment-copy">I think you are on the right track, why not put everything in the <code>def</code> from <code>name = ...</code>?</span>
<span class="comment-copy">Thank you! This is a nice solution. I would only tweak it very little to suit my code more, and edit <code>add_names</code> so that there is only one iteration of <code>iterable</code> (instead of iterating over <code>iterable</code> and then further iterating over <code>k</code>) which <code>strip</code>s, <code>lower</code>s, checks <code>len</code>, and adds to <code>seen</code> in one go.</span>
<span class="comment-copy">@Hank if you do <code>{n.strip().lower() for w in iterable if len(n.strip()) &gt; 6}</code> (using a set) it will strip() twice for every n - python is bad at optimizing list comps - that why I split it - but it is shorter code. It might matter if you feed it a file with a million names - it won't if you provide 5 to 10.</span>
<span class="comment-copy">The context manager doesn't add anything. Moving the loop into a function would be an improvement.</span>
<span class="comment-copy">@cco <code>list</code>'s are not context managers - they do not have <code>__entry__</code> or <code>__exit__</code> methods; the subclass allows the list to be used with a <code>with</code> statement making that part of the code common between the two objects - which is what the OP desired, reducing code duplication. Without it, the code would throw an AttributeError for a list.  Did you try it without the subclass?  Indeed I tested it with that last bit in a function but not knowing how the OP's program is structured I just wanted to show a way to deal with the duplicate code.</span>
<span class="comment-copy">Or maybe I misunderstood the OP's problem/question.</span>
<span class="comment-copy">This solution works, and is less code than the accepted answer, but seems like too hacky of a solution. Thank you for the creative perspective on it, though!</span>
<span class="comment-copy">this is a "think outside the box" solution, dv wasn't mine but I'll compensate</span>
