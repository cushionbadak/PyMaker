<div class="post-text" itemprop="text">
<p>Python's <a href="https://docs.python.org/3/library/re.html#re.Pattern.search" rel="nofollow noreferrer">doc</a> says:</p>
<blockquote>
<p>Both patterns and strings to be searched can be Unicode strings (str) as well as 8-bit strings (bytes).</p>
</blockquote>
<p>But I was wondering whether searching with <code>str</code> and <code>bytes</code> would always give the same result. I mean, whether this function returns true, for all valid <code>pattern</code> and <code>string</code>:</p>
<pre><code>#!/usr/bin/env python3

import re
def test(pattern, string):
    m = re.search(pattern, string)
    mb = re.search(pattern.encode(), string.encode())
    if m is None and mb is None: return True
    i, j = m.span(0)
    ib, jb = mb.span(0)
    return string[i:j].encode() == string.encode()[ib:jb]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>answer: no</p>
<p>example: <code>test('[–]', '–')</code></p>
<p>note that's an "en-dash" and not a hyphen — any non-ASCII character should have the same behaviour</p>
</div>
<div class="post-text" itemprop="text">
<p>The main difference is in classes.</p>
<p>For example, U+00FF is <code>"ÿ"</code>, but is not an ASCII character. So <code>\w</code> (Match "word character", or letters)</p>
<pre><code>re.search(r'\w', '\xFF')  # match
re.search(rb'\w', b'\xFF')  # no match
re.search(rb'\w', '\xFF'.encode())  # still no match
</code></pre>
<p>(And other unicode letters would work too)</p>
<p>If you look at <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">https://docs.python.org/3/library/re.html</a>, you can see the three classes this applies to:</p>
<blockquote>
<p><code>\d</code> </p>
<p>For Unicode (str) patterns:</p>
<blockquote>
<p>Matches any Unicode decimal digit (that is, any character in Unicode character category [Nd]). This includes <code>[0-9]</code>, and also many other digit characters. If the <code>ASCII</code> flag is used only <code>[0-9]</code> is matched.</p>
</blockquote>
<p>For 8-bit (bytes) patterns:</p>
<blockquote>
<p>Matches characters considered whitespace in the ASCII character set; this is equivalent to <code>[ \t\n\r\f\v]</code>.</p>
</blockquote>
</blockquote>
<blockquote>
<p><code>\s</code> </p>
<p>For Unicode (str) patterns:</p>
<blockquote>
<p>Matches Unicode whitespace characters (which includes <code>[ \t\n\r\f\v]</code>, and also many other characters, for example the non-breaking spaces mandated by typography rules in many languages). If the <code>ASCII</code> flag is used, only <code>[ \t\n\r\f\v]</code> is matched.  </p>
</blockquote>
<p>For 8-bit (bytes) patterns:</p>
<blockquote>
<p>Matches characters considered whitespace in the ASCII character set; this is equivalent to <code>[ \t\n\r\f\v]</code>.</p>
</blockquote>
</blockquote>
<blockquote>
<p><code>\w</code> </p>
<p>For Unicode (str) patterns:</p>
<blockquote>
<p>Matches Unicode word characters; this includes most characters that can be part of a word in any language, as well as numbers and the underscore. If the <code>ASCII</code> flag is used, only <code>[a-zA-Z0-9_]</code> is matched.</p>
</blockquote>
<p>For 8-bit (bytes) patterns:</p>
<blockquote>
<p>Matches characters considered alphanumeric in the ASCII character set; this is equivalent to <code>[a-zA-Z0-9_]</code>. If the <code>LOCALE</code> flag is used, matches characters considered alphanumeric in the current locale and the underscore.</p>
</blockquote>
</blockquote>
<p>So if you set the <a href="https://docs.python.org/3/library/re.html#re.ASCII" rel="nofollow noreferrer"><code>ASCII</code></a> flag, they should be mostly the same.</p>
<p>For your exact function, an example would be: <code>test(r'\w|.', '\xFF')</code></p>
</div>
<span class="comment-copy">Did that throw an exception? The initial code does not consider the case of no match, for brevity. Now it is updated.</span>
<span class="comment-copy">nope, not with the original code nor the updated…  I'm using Python 3.7 if that matters</span>
<span class="comment-copy">Saw your updates. Doesn't seem to be a python version problem. More like a valid counter example...</span>
