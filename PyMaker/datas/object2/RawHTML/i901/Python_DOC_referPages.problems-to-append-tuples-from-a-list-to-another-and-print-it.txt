<div class="post-text" itemprop="text">
<p>I'm trying to print an list of tuples by comparing the tuple first item to a specified int() but by some mystery reason the tuples with 0 in second term just disappear</p>
<p>The code:</p>
<pre><code>n_vertical = 3
n_horizontal = 3
for x in range(0,n_vertical):
    for y in range(0,n_horizontal):
        area.append((x,y,0))

print(area)
print('''
''')
def representacao_do_mapa(modo):
    if modo == 1:
        n=0
        l_c = []
        for x in area:
            if x[0] == n:
                l_c.append(x)
            else:
                print(l_c)
                l_c = []
                n+=1
representacao_do_mapa(1)
</code></pre>
<p><a href="https://i.stack.imgur.com/XhsNm.png" rel="nofollow noreferrer"><img alt="screenshot of output" src="https://i.stack.imgur.com/XhsNm.png"/></a></p>
<p>Textual output:</p>
<pre><code>[(0, 0, 0), (0, 1, 0), (0, 2, 0)]
[(1, 1, 0), (1, 2, 0)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Problem</strong></p>
<p>You are throwing away the tuple <code>x</code> when you create the new list:</p>
<blockquote>
<pre><code>        if x[0] == n:
            l_c.append(x)       # here you append x
        else:
            print(l_c)          # here you print but do nothing with x
            l_c = []            # list empty, x is missing
            n+=1
</code></pre>
</blockquote>
<p><strong>Solution</strong> </p>
<pre><code>def representacao_do_mapa(modo):
    if modo == 1:
        n=0
        l_c = []
        for x in area:
            if x[0] == n:
                l_c.append(x)
            else:
                print(l_c)
                l_c = [x]       # fix here
                n+=1
        print(l_c)              # fix here 

representacao_do_mapa(1)
</code></pre>
<hr/>
<p>Beside that - your last list is not going to be printed because the last <code>l_c</code> never get's into the printing part of your code - you have to add that ouside the for-loop over area.</p>
<p>Output (for <code>n_vertical = 3</code> and <code>n_horizontal = 3</code>:</p>
<pre><code>[(0, 0, 0), (0, 1, 0), (0, 2, 0)]
[(1, 0, 0), (1, 1, 0), (1, 2, 0)]
[(2, 0, 0), (2, 1, 0), (2, 2, 0)]
</code></pre>
<hr/>
<p><strong>Optimizations:</strong> </p>
<p>You can shorten your code using list comprehensions and list decomposition:</p>
<pre><code>n_vertical = 3
n_horizontal = 3
area = [ (x,y,0) for x in range(n_horizontal) for y in range(n_vertical )]
# create with inner lists
area2 = [ [(x,y,0) for x in range(n_horizontal)] for y in range(n_vertical)]

print(area)

# print each inner list on new line
print(*area2, sep="\n")
</code></pre>
<hr/>
<p>Or you can print directly from <code>area</code>:</p>
<pre><code>print(* (area[i*n_horizontal:i*n_horizontal+n_horizontal] 
         for i in range(n_vertical)) , sep="\n")
</code></pre>
<p>using a generator expression to slice <code>area</code> into <code>n_horizontal</code> pieces. </p>
<hr/>
<p>More on generator / list expressions: <a href="https://stackoverflow.com/questions/47789/generator-expressions-vs-list-comprehension">Generator Expressions vs. List Comprehension</a></p>
<p>More on chunking lists: <a href="https://stackoverflow.com/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks">How do you split a list into evenly sized chunks?</a></p>
<p>More on list slicing: <a href="https://stackoverflow.com/questions/509211/understanding-slice-notation">Understanding slice notation</a></p>
<p>More on printing: <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#print</a></p>
</div>
<span class="comment-copy">The code does exactly what you said it to do: when it encounters <code>(n+1,0,0)</code>, it prints all accumulated elements, increases <code>n</code> and goes to the next item. You may be more worried that it doesn't print <code>(9,*,0)</code>.</span>
<span class="comment-copy">Wow, my bad! love u all. I would like to have reputation for like u answers. Thank u very much</span>
<span class="comment-copy">@marcos and another edit to print your original tuple list directly using list slicing and print</span>
