<div class="post-text" itemprop="text">
<p>In a python list, I want to delete all elements repeated less than 'k'.
for example if k == 3 then if our list is:</p>
<pre><code>l = [a,b,c,c,c,a,d,e,e,d,d]
</code></pre>
<p>then the output must be:</p>
<pre><code>[c,c,c,d,d,d]
</code></pre>
<p>what is a fast way to do that (my data is large), any good pythonic suggestion? </p>
<p>this is what I coded but I don't think it is the fastest and most pythonic way:</p>
<pre><code>from collections import Counter

l = ['a', 'b', 'c', 'c', 'c', 'a', 'd', 'e', 'e', 'd', 'd']

counted = Counter(l)

temp = []
for i in counted:
    if counted[i] &lt; 3:
        temp.append(i)

new_l = []
for i in l:
    if i not in temp:
        new_l.append(i)

print(new_l)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="noreferrer"><code>collections.Counter</code></a> to construct a dictionary mapping values to counts. Then use a list comprehension to filter for counts larger than a specified value.</p>
<pre><code>from collections import Counter

L = list('abcccadeedd')
c = Counter(L)
res = [x for x in L if c[x] &gt;=3]

# ['c', 'c', 'c', 'd', 'd', 'd']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A brute-force option would be to get the number of occurrences per item, then filter that output. The <code>collections.Counter</code> object works nicely here:</p>
<pre><code>l = [a,b,c,c,c,a,d,e,e,d,d]
c = Counter(l)

# Counter looks like {'a': 2, 'b': 1, 'c': 3...}

l = [item for item in l if c[item]&gt;=3]
</code></pre>
<p>Under the hood, <code>Counter</code> acts as a dictionary, which you can build yourself like so:</p>
<pre><code>c = {}
for item in l:
    # This will check if item is in the dictionary
    # if it is, add to current count, if it is not, start at 0
    # and add 1
    c[item] = c.get(item, 0) + 1

# And the rest of the syntax follows from here
l = [item for item in l if c[item]&gt;=3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would use a Counter from collections:</p>
<pre><code>from collections import Counter
count_dict = Counter(l)
[el for el in l if count_dict[el]&gt;2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Any drawback with this option?</p>
<pre><code>l = ['a','b','c','c','c','a','d','e','e','d','d']

res = [ e for e in l if l.count(e) &gt;= 3]

#=&gt; ['c', 'c', 'c', 'd', 'd', 'd']
</code></pre>
</div>
<span class="comment-copy">What have you tried? Please give us your attempt, so that we can better help you out.</span>
<span class="comment-copy">How large is large? 1k, 1M, 1B, 1T?</span>
<span class="comment-copy">Hint: use a <code>Counter</code></span>
<span class="comment-copy">@JordanSinger I've tried using "counter" and the sort it and then find the elements less than 'k' and then...</span>
<span class="comment-copy">@peymanmohsenikiasari Thank you, can you please update your post with your code?</span>
<span class="comment-copy">That keeps on rebuilding the <code>Counter</code> every element, though.</span>
<span class="comment-copy">Yep, you are right. Updated my code</span>
<span class="comment-copy">it is not fast. it will count "c" 3 times.</span>
