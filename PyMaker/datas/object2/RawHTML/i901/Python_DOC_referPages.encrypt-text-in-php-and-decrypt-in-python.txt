<div class="post-text" itemprop="text">
<p>I am using following code snippet to encrypt a text in <code>PHP7</code>:</p>
<pre><code>$plaintext = "message to be encrypted";
$cipher = "aes-256-cbc";
$ivlen = openssl_cipher_iv_length($cipher);
$iv = "0123456789012345";
$key = "akshayakshayaksh";
$ciphertext = openssl_encrypt($plaintext, $cipher, $key, $options=0, $iv);
print $ciphertext;
</code></pre>
<blockquote>
<p>Output: cUXDhOEGz19QEo9XDvMzXkGFmg/YQUnXEqKVpfYtUGo=</p>
</blockquote>
<p>Now, when I try to decrypt this in <code>Python3</code> it gives error:</p>
<pre><code>from Crypto.Cipher import AES
obj2 = AES.new('akshayakshayaksh', AES.MODE_CBC, '0123456789012345')
ciphertext = "cUXDhOEGz19QEo9XDvMzXkGFmg/YQUnXEqKVpfYtUGo="
obj2.decrypt(ciphertext)
</code></pre>
<blockquote>
<p>Traceback (most recent call last):<br/>
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  <br/>
  File
  "/anaconda3/lib/python3.6/site-packages/Crypto/Cipher/blockalgo.py",
  line 295, in decrypt
      return self._cipher.decrypt(ciphertext) ValueError: Input strings must be a multiple of 16 in length</p>
</blockquote>
<p>I get that AES is a block cipher algorithm. However, how should I fix my PHP code so that it generates "padded" cipher, any clues?</p>
</div>
<div class="post-text" itemprop="text">
<p>The main issue here is that you're using different key-size. PHP's <code>openssl_encrypt</code> determines the key size from the encryption algorithm string  (<code>"aes-256-cbc"</code> in this case) so it expects a 256 bit key. If the key is shorter it is padded with zero bytes, so the actual key used by <code>openssl_encrypt</code> is:  </p>
<pre><code>"akshayakshayaksh\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
</code></pre>
<p>Pycryptodome determines the key size from the actual size of the key, so your Python code uses AES-128-CBC. Also, as mentioned in the <a href="https://stackoverflow.com/questions/54176838/encrypt-text-in-php-and-decrypt-in-python#comment95183977_54176838">coments</a> by kelalaka, the ciphertext is base64 encoded (<code>openssl_encrypt</code> base64-encodes the ciphertext by default - we can get raw bytes if we use <code>OPENSSL_RAW_DATA</code> in <code>$options</code>). Pycryptodome doesn't decode the ciphertext, so we must use <code>b64decode()</code>.  </p>
<pre><code>key = b'akshayakshayaksh\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'
obj2 = AES.new(key, AES.MODE_CBC, b'0123456789012345')
ciphertext = b"cUXDhOEGz19QEo9XDvMzXkGFmg/YQUnXEqKVpfYtUGo="
print(obj2.decrypt(b64decode(ciphertext)))
#b'message to be encrypted\t\t\t\t\t\t\t\t\t'
</code></pre>
<p>The extra <code>\t</code> characters at the end is the padding - CBC requires padding. Pycryptodome doesn't remove padding automatically but it provides padding functions in <code>Crypto.Util.Padding</code>.  </p>
<pre><code>from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
from base64 import b64decode

key = b'akshayakshayaksh\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'
obj2 = AES.new(key, AES.MODE_CBC, b'0123456789012345')
ciphertext = b"cUXDhOEGz19QEo9XDvMzXkGFmg/YQUnXEqKVpfYtUGo="
plaintext = obj2.decrypt(b64decode(ciphertext))
plaintext = unpad(plaintext, AES.block_size)
</code></pre>
<hr/>
<p>Although PHP's openssl accepts arbitrary sized keys, it's best to use key size specified in the algorithm string, to prevent confusion at the very least. Also the key bytes should be as random as possible.  </p>
<p>As noted by Maarten Bodewes in the <a href="https://stackoverflow.com/questions/54176838/encrypt-text-in-php-and-decrypt-in-python#comment95192652_54179062">comments</a> this key uses a limited range of bytes and so it's very weak. Furthermore it is created by repeating a word and that makes it vulnerable to dictionary attacks (which are much faster than bruteforce attacks).  </p>
<p>In PHP we can get cryptographically secure random bytes with <a href="http://php.net/manual/en/function.random-bytes.php" rel="nofollow noreferrer"><code>random_bytes()</code></a>, </p>
<pre><code>$key = random_bytes(32);  
</code></pre>
<p>and in Python with <a href="https://docs.python.org/3/library/os.html#os.urandom" rel="nofollow noreferrer"><code>os.urandom()</code></a></p>
<pre><code>key = os.urandom(32)
</code></pre>
<p>(You can use the same functions to create the IV; you shouldn't use a static IV, the IV must be unpredictable)  </p>
<p>You could also derive a key from your password with a KDF. In this case it is important to use a random salt and a high enough number of iterations. PHP provies a PBKDF2 algorithm with the <a href="http://php.net/manual/en/function.hash-pbkdf2.php" rel="nofollow noreferrer"><code>hash_pbkdf2</code></a> function, and Python with <a href="https://docs.python.org/3/library/hashlib.html#hashlib.pbkdf2_hmac" rel="nofollow noreferrer"><code>hashlib.pbkdf2_hmac</code></a>.</p>
</div>
<span class="comment-copy">Did you convert <a href="https://stackoverflow.com/questions/3538021/why-do-we-use-base64">base64</a> before transferring?</span>
<span class="comment-copy">No currently I don't, do I have to?</span>
<span class="comment-copy">Currently I do not "transfer" this cipher text per say. I can just copy paste it for decryption. So I don't think Base64 is necessary right now. Please correct if I am wrong!</span>
<span class="comment-copy">It seems, the ciphertext already base64 due to <code>=</code>. Then decode it by <code>b64decode</code>. Cipher wants the bytes.</span>
<span class="comment-copy">Now I understand you! But when tried like this:  obj2.decrypt(b64decode(ciphertext)),  getting output: b'\xaa\x7f\xa0\xd5\x07\xf3\xcf1X\x15\xd6\x1e\x16\xdd\x0eC\xebk\xf3\xa3eP]T\xd0Y\xc2\xc5\xae\x8b\xd7\xd9' . And I can't convert this hex string to plain ASCII/English!</span>
<span class="comment-copy">Thanks. Is there a way in python I can get zero padded 256 bit key from my original one?</span>
<span class="comment-copy">Yes there is (<code>key += b'\0' * (32 - len(key))</code> for example), but I don't think it's a good idea to pad the key. Instead use a 32 byte key both in Python and PHP.</span>
<span class="comment-copy">Wow great answer!</span>
<span class="comment-copy">@eddiewould Thanks! I think the question is quite interesting so I tried to provide a decent answer.</span>
<span class="comment-copy">Of course, keys should never be strings. If you use just lowercase characters then you get a comparable strength of <code>log_2(26^len("akshayakshayaksh"))</code> or <a href="https://www.wolframalpha.com/input/?i=log_2(26%5Elen(%22akshayakshayaksh%22))" rel="nofollow noreferrer">75 bits</a>. And that's just when the letters are chosen fully randomly - which they probably aren't.</span>
