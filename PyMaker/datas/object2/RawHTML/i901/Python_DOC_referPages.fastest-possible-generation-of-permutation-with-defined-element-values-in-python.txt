<div class="post-text" itemprop="text">
<p>Trying to generate permutations, could be used with generator or produced List of Lists (but maybe I need a lot of memory?) Looked on the Internet and SO, but couldn't find a version where I define the values for each element.</p>
<p>BTW How many permutations it will be?</p>
<p>8 elements with each value from 1-15</p>
<p>Here is my code, but maybe there is a better, faster way to generate it:</p>
<p>Any tips are appreciated!</p>
<pre><code>import time
from tqdm import tqdm
def permutations(iterable, r=None):
    # permutations('ABCD', 2) --&gt; AB AC AD BA BC BD CA CB CD DA DB DC
    # permutations(range(3)) --&gt; 012 021 102 120 201 210
    pool = tuple(iterable)
    n = len(pool)
    r = n if r is None else r
    if r &gt; n:
        return
    indices = range(n)
    cycles = range(n, n-r, -1)
    yield tuple(pool[i] for i in indices[:r])
    while n:
        for i in reversed(range(r)):
            cycles[i] -= 1
            if cycles[i] == 0:
                indices[i:] = indices[i+1:] + indices[i:i+1]
                cycles[i] = n - i
            else:
                j = cycles[i]
                indices[i], indices[-j] = indices[-j], indices[i]
                yield tuple(pool[i] for i in indices[:r])
                break
        else:
            return

plist = []

for item in tqdm(permutations('123456789ABCDEF',8)):
  plist.append(item)


len(plist)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You just copied the code from the <a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow noreferrer"><code>itertools.permutations()</code></a> documentation. That explicitly states that it is <em>roughly</em> equivalent, because it is only there to help you understand what <code>itertools.permutations()</code> does. The code is <em>not intended to be used in production settings</em>.</p>
<p>Use <code>itertools.permutations()</code> itself. The <code>itertools</code> module is designed for maximum efficiency already. The module is coded in C, and will always beat a pure Python implementation, hands down.</p>
<p>You are also wasting iterations on appending values to a list; each <code>.append()</code> expression requires an attribute lookup and a method call. You can build <code>plist</code> in a single expression by calling <code>list()</code>:</p>
<pre><code>plist = list(permutations('123456789ABCDEF', 8))
</code></pre>
<p>However, you <em>really don't want to execute that call</em>, because that'll take a lot of time to produce all possible permutations as separate objects, and allocating the memory for that takes time and will slow down your machine.</p>
<p>The number of <a href="https://en.wikipedia.org/wiki/Permutation#k-permutations_of_n" rel="nofollow noreferrer"><em>k</em>-permutations of <em>n</em> is calculated with k! / (n - k)!)</a>, with n=15 and k=8, that's 15! / (15 - 8)!, so <a href="https://www.wolframalpha.com/input/?i=number+of+8-permutations+of+15+objects" rel="nofollow noreferrer">just over a quarter billion results, 259_459_200</a>. On a 64-bit OS that'll require about ~30GB of memory (2GB for the list object, 27G for the tuples, mere bytes for the 15 1-digit strings as they are shared).</p>
<p>If you really want to process those permutations, I'd just loop over the generator and use each result directly. You'll still have to iterate a quarter-billion times, so it'll still take a lot of time, but at least you don't then try to hold it all in memory at once.</p>
<p>Alternatively, always look for other ways to solve your problem. Generating all possible permutations will produce a very large number of possibilities. Your previous question received an answer that pointed out that for <em>than specific problem</em>, searching through 200kb of data for likely candidates was more efficient than to do 40k searches for every possible 8-permutation of 8. With 259 million permutations there is an even larger chance that processing your problem from another direction might keep your problem space manageable.</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow noreferrer">itertools.permutations</a> ?</span>
<span class="comment-copy">Do you want permutations or combinations? There is a big difference between both! From your example it looks like you want some kind of mix of combinations and permutation...</span>
<span class="comment-copy">@Scotty1-: given hat they just just literally copied the <code>itertools.permutations()</code> documentation, I think its clear enough what they want.</span>
<span class="comment-copy">Curious: why no <code>0</code> digits in your generated hexadecimals?</span>
<span class="comment-copy">Please ask a question in which you explain exactly what it is you are trying to do. I would be happy to adapt my other answer to a different set of requirements if you can tell me what they actually are.</span>
<span class="comment-copy">Thanks for the answer!!!!! Ok, so with the code above on my laptop it should take 8 mins ... that's acceptable. Yes, will definetly use generator. Will check how long it will take with <code>itertools</code></span>
<span class="comment-copy">@android_dev: part of those 8 minutes is taken up by looking up the <code>append</code> attribute each time, and calling that method. You are also asking your computer to allocate 30GB of memory as you go along, and that takes time too as your OS is probably going to have to swap out other programs to disk to make space. Writing gigabytes of data to disk will take up more time still.</span>
<span class="comment-copy">@android_dev: put differently: your current test is wasting a lot of time <i>elsewhere</i>. I'm surprised it only takes you 8 minutes to execute.</span>
<span class="comment-copy">Yep, I got your point. I will change my code as you advised. I got the number from <code>tqdm</code> iteration per second info, took total number of iterations 259459200 divided by it  ... and that how I got my 8 mins. Will have to run it for to make it sure. But before that I change the code</span>
<span class="comment-copy">@android_dev: it'll slow down, more and more, as more memory needs to be allocated. It'll take more time than that, especially if you don't have at least 30GB of physical memory.</span>
