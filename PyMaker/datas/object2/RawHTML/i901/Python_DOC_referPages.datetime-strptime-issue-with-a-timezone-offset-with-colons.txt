<div class="post-text" itemprop="text">
<p>Currently we are working on an application which is trying to calculate the travel time of a route from a to b, using the 2.db.transport.rest API. </p>
<p>Unfortunatly we are receiving timestamps with a timezone offset from that API, such as <code>+01:00</code>. What we need is a timezone offset without the <code>:</code>, so <code>+0100</code>.</p>
<p>The following example gives an error on Linux, using Python 3.6.7:</p>
<pre><code>from datetime import datetime
datetimestring = "2019-01-19T15:13:00.000+01:00"
datetime.strptime(datetimestring, '%Y-%m-%dT%H:%M:%S.%f%z')
</code></pre>
<p>This example code produces this exception:</p>
<pre><code>ValueError: time data '2019-01-19T15:13:00.000+01:00' does not match format '%Y-%m-%dT%H:%M:%S.%f%z'
</code></pre>
<p>If we remove the <code>:</code> from the input string it works, no exception is thrown.</p>
<p>The code also works when we run this on Windows, on Python 3.7.2.</p>
<p>Could it be due to the different Python versions? How can we parse or convert this without error?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, this is a version problem. You are relying on a <em>new feature</em> introduced in Python 3.7</p>
<p>From the <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer"><code>datetime.strptime()</code> documentation</a>, 6th footnote:</p>
<blockquote>
<p><em>Changed in version 3.7</em>: When the <code>%z</code> directive is provided to the <code>strptime()</code> method, the UTC offsets can have a colon as a separator between hours, minutes and seconds. For example, <code>'+01:00:00'</code> will be parsed as an offset of one hour.</p>
</blockquote>
<p>If you can't upgrade to Python 3.7 everywhere, then you could just remove those colons with some preprocessing:</p>
<pre><code>import re

datetimestring = re.sub(r'([-+]\d{2}):(\d{2})(?:(\d{2}))?$', r'\1\2\3', datetimestring)
</code></pre>
<p>The regex removes the colons from any <code>HH:MM</code> or <code>HH:MM:SS</code> offset (appearing at the 
end of a string and preceded by <code>-</code> or <code>+</code>):</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetimestring = "2019-01-19T15:13:00.000+01:00"
&gt;&gt;&gt; corrected = re.sub(r'([-+]\d{2}):(\d{2})(?:(\d{2}))?$', r'\1\2\3', datetimestring)
&gt;&gt;&gt; corrected
'2019-01-19T15:13:00.000+0100'
&gt;&gt;&gt; datetime.strptime(corrected, '%Y-%m-%dT%H:%M:%S.%f%z')
datetime.datetime(2019, 1, 19, 15, 13, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))
</code></pre>
<p>If you were to upgrade to Python 3.7 everywhere, you could drop the <code>strptime()</code> parsing altogether and simply use the dedicated <a href="https://docs.python.org/3/library/datetime.html#datetime.time.fromisoformat" rel="nofollow noreferrer"><code>datetime.fromisoformat()</code> method</a>; it can parse your input directly.</p>
<pre><code>&gt;&gt;&gt; datetime.fromisoformat(datetimestring)
datetime.datetime(2019, 1, 19, 15, 13, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))
</code></pre>
</div>
