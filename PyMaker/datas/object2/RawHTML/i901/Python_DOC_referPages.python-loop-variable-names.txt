<div class="post-text" itemprop="text">
<p>I am not sure what I am trying to do would be called so I am finding it difficult to find the answer to the following...</p>
<p>I am deleting the contents of a number of tkinter entry widgets.
I have four lines that look like I could replace with one line using a loop.
I tried ... </p>
<pre><code>for x in range(1, 5):
    self.entryplot_valx.delete(0, tk.END)
</code></pre>
<p>but I do not know how to feed the value in...
Below is my code - I apologise for stupidity of this question</p>
<pre><code>    self.entryplot_val1.delete(0, tk.END)
    self.entryplot_val2.delete(0, tk.END)
    self.entryplot_val3.delete(0, tk.END)
    self.entryplot_val4.delete(0, tk.END)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can make this work by changing your loop iterable to a tuple of these four entries:</p>
<pre><code>entries = (self.entryplot_val1,
           self.entryplot_val2,
           self.entryplot_val3,
           self.entryplot_val4)
for x in entries:
    x.delete(0, tk.END)
</code></pre>
<p>Since you don't want to create this tuple every time, let's move it into object initialization:</p>
<pre><code>def __init__(self):
    # assuming you have a setup like the following
    master = Tk()
    self.entryplot_val1 = Entry(master)
    self.entryplot_val2 = Entry(master)
    self.entryplot_val3 = Entry(master)
    self.entryplot_val4 = Entry(master)
    # initialize your tuple to use in your for loop
    self.entries = (self.entryplot_val1,
                    self.entryplot_val2,
                    self.entryplot_val3,
                    self.entryplot_val4)
    # some further setup for entries
    self.entryplot_val1.pack()
    self.entryplot_val2.pack()
    self.entryplot_val3.pack()
    self.entryplot_val4.pack()
</code></pre>
<p>And then you can simplify this a bit further into:</p>
<pre><code>def __init__(self):
    # assuming you have a setup like the following
    master = Tk()
    self.entries = (Entry(master), Entry(master), Entry(master), Entry(master))
    # some further setup for entries
    for x in self.entries:
        x.pack()
</code></pre>
<p>You can then use loops in the form of last example elsewhere in your class code.</p>
<p>Since you removed the previous identifiers for the entries, you would need to change your code to use the new tuple wherever they were used. That is, change references of <code>self.entryplot_val1</code> to <code>self.entries[0]</code>, <code>self.entryplot_val2</code> to <code>self.entries[1]</code> and so on.</p>
</div>
<div class="post-text" itemprop="text">
<p>You <em>could</em> solve this creating the attribute name as a string and using <code>getattr(obj, attrname)</code>, ie:</p>
<pre><code>for x in range(1, 5):
    attrname = "entryplot_val{}".format(x)
    getattr(self, attrname).delete(0, tk.END)
</code></pre>
<p>But really when you find yourself using a "var1", "var2" (...) "varX" naming scheme you probably really want a list instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>get_attr()</code> like that:</p>
<pre><code>for x in range(1, 5):
    get_attr(self, "entryplot_val{}".format(x)).delete(0, tk.END)
</code></pre>
<p>See <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow noreferrer">this part</a> of the doc.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can get the variable names using a string.</p>
<pre><code>for x in range(1, 5):
    attr_name = f'entryplot_val{x}'
    getattr(self, attr).delete(0, tk.END)
</code></pre>
</div>
<span class="comment-copy">It's probably better to redesign your code and make <code>self.entryplot_val</code> a list or dict. Otherwise, if you always have 4 points, then just write it out as you did in the last code sample in your question and avoid building variable names from variables. <a href="https://stackoverflow.com/questions/1373164/how-do-i-create-a-variable-number-of-variables">Related</a></span>
<span class="comment-copy">Thanks everyone - I will go with what @Tugrul Ates suggests - it looks the neatest - I have seen the attr approach before and it doesnt sit right.  Enjoy your weekends!</span>
