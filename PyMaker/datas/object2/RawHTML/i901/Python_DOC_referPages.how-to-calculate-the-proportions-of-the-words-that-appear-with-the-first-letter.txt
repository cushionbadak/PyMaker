<div class="post-text" itemprop="text">
<p>By using Python, I would like to calculate the proportions of the words that appear with the first letter capitalized. For example, here is an example word list,</p>
<pre><code>word_list = ["capital", "Capital", "Capital", "Capital", "capital", "bus", "Bus", "bus", "Bus", "white"]
</code></pre>
<p>and I would like to produce the result like below:</p>
<pre><code>{"Capital": 0.6, "Bus": 0.5, "White": 0}
</code></pre>
<p>Do you have any ideas on this? It seems easy but is hard to come up with good solutions. To be specific, it's easy to count the numbers of first-letter-capitalized words by using defaultdict.</p>
<pre><code>word_dict = defaultdict(int)
for word in word_list:
    if word[0].isupper():
        word_dict[word] += 1
</code></pre>
<p>Thank you in advance!</p>
</div>
<div class="post-text" itemprop="text">
<h3>Words sorted: <code>itertools.groupby</code></h3>
<p>Assuming, as in your example, your strings are sorted, you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>groupby</code></a> with <a href="https://docs.python.org/3/library/statistics.html#statistics.mean" rel="nofollow noreferrer"><code>statistics.mean</code></a>:</p>
<pre><code>from itertools import groupby
from statistics import mean

grouper = groupby(word_list, key=str.casefold)
res = {k.capitalize(): mean(x[0].isupper() for x in words) for k, words in grouper}

# {'Bus': 0.5, 'Capital': 0.6, 'White': 0}
</code></pre>
<h3>Words not necessarily sorted: <code>sorted</code> + <code>groupby</code></h3>
<p>You can, in this case, sort <em>before</em> applying the above logic:</p>
<pre><code>word_list = sorted(word_list, key=str.casefold)
</code></pre>
<p>This adds complexity to the algorithm if your list isn't sorted.</p>
<h3>Words not necessarily sorted: <code>collections.defaultdict</code></h3>
<p>An alternative is to construct a dictionary with lists of Boolean values via<a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a>, then use <code>statistics.mean</code>:</p>
<pre><code>from collections import defaultdict
from statistics import mean

dd = defaultdict(list)
for word in word_list:
    dd[word.capitalize()].append(word[0].isupper())

# defaultdict(list,
#             {'Bus': [False, True, False, True],
#              'Capital': [False, True, True, True, False],
#              'White': [False]})

res = {k: mean(v) for k, v in dd.items()}

# {'Bus': 0.5, 'Capital': 0.6, 'White': 0}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could do something like this:</p>
<pre><code>from collections import Counter

word_list = ["capital", "Capital", "Capital", "Capital", "capital", "bus", "Bus", "bus", "Bus", "white"]

# count them all while ignoring case
count = Counter(x.lower() for x in word_list)  

# count only the title-case ones
uppers = Counter(x.lower() for x in word_list if x[0].isupper())

# get frequency
res = {k.capitalize(): uppers.get(k, 0)/v for k, v in count.items()} 
</code></pre>
<p>which results in the desired:</p>
<pre><code>print(res)  # -&gt; {'Capital': 0.6, 'Bus': 0.5, 'White': 0.0}
</code></pre>
</div>
<span class="comment-copy">"It seems easy but is hard to come up with good solutions." This comment makes it sound like you've already had a go, so what did you try and what was the result? People on SO will help point out how to make your code work, but most won't simply write code for you on demand.</span>
<span class="comment-copy">Man, how do you measure the count?</span>
<span class="comment-copy">Thank you Robin, and I added the Python code that I tried above.</span>
<span class="comment-copy">@parladneupane <i>capital</i> appears a total of 5 times (case insensitive) from which, 3 times as titlecase (<i>Capital</i>). So 3/5 -&gt; 0.6</span>
<span class="comment-copy">that's beautiful. +1</span>
