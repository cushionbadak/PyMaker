<div class="post-text" itemprop="text">
<p>Trying to get a nested dictionary (see example below) into a CSV file in a wide data format.</p>
<p>Let's call the dictionary <em>"boats"</em>, where to top-level key is the boat ID key.</p>
<p><strong>Example</strong></p>
<pre><code>"123abc": {
    "length": 50,
    "color": "Orange",
    "Weight": 75
},
"456xyz": {
    "length": 35,
    "color": "Green",
    "Weight": 55
}
</code></pre>
<p><strong>Current Code</strong></p>
<pre><code>    with open('insertIntoFile.csv', 'w') as fileCSV:
         csvWriter = csv.writer(fileCSV, delimiter=',')
         for all_keys in boats:
              for sub_key in boats[ID]:
                   csvWriter.writerow([ID, sub_key, boats[ID][sub_key]])
</code></pre>
<p><strong>The output is</strong></p>
<pre><code>ID
123abc, length, 50
123abc, color, "Orange"
123abc, weight, 75
456xyz, length, 35
456xyz, color, "Green"
456xyz, weight, 55
</code></pre>
<p>I'm trying to figure out a way to add another loop in the CSV writing process to get the following, which is my ideal output.</p>
<p><strong>Aspiration</strong></p>
<pre><code>ID, length, color, weight
123abc, 75, "Orange", 50
456xyz, 35, "Green", 35
</code></pre>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can simply write the headers first, then write the concatenated ID key with the dictionary values to the file:</p>
<pre><code>from csv import writer

d = {
    "123abc": {"length": 50, "color": "Orange", "Weight": 75},
    "456xyz": {"length": 35, "color": "Green", "Weight": 55},
}

headers = ["ID", "length", "color", "weight"]

with open("insertIntoFile.csv", mode="w", newline="") as csvfile:
    writer = writer(csvfile)
    writer.writerow(headers)

    for row, data in d.items():
        writer.writerow([row] + list(data.values()))
</code></pre>
<p>You can also use <a href="https://docs.python.org/3/library/csv.html#csv.DictWriter" rel="nofollow noreferrer"><code>csv.DictWriter</code></a>:</p>
<pre><code>from csv import DictWriter

d = {
    "123abc": {"length": 50, "color": "Orange", "Weight": 75},
    "456xyz": {"length": 35, "color": "Green", "Weight": 55},
}

fieldnames = ["ID", "length", "color", "weight"]

with open("insertIntoFile.csv", mode="w", newline="") as csvfile:
    writer = DictWriter(csvfile, fieldnames=fieldnames)
    writer.writeheader()

    for row, data in d.items():
        writer.writerow(
            {
                "ID": row,
                "length": data["length"],
                "color": data["color"],
                "weight": data["Weight"],
            }
        )
</code></pre>
<p><strong>insertIntoFile.csv:</strong></p>
<pre><code>ID,length,color,weight
123abc,50,Orange,75
456xyz,35,Green,55
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can significantly simplify the task with Pandas. Create a dataframe from the dictionary and save it to the file:</p>
<pre><code>import pandas as pd
df = pd.DataFrame(boats['ID']).T
df.index.name = 'ID' # The default name is "index"
df.reset_index().to_csv('insertIntoFile.csv', index=False)
</code></pre>
</div>
<span class="comment-copy">Thanks.  Can I ask what the extension attribute ".T" does to the line : <code>df = pd.DataFrame(boats['ID']).T</code>?  Is there a specific place in the Pandas documentation I can refer to that?</span>
<span class="comment-copy">It is a <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.transpose.html" rel="nofollow noreferrer">transposed view</a>.</span>
