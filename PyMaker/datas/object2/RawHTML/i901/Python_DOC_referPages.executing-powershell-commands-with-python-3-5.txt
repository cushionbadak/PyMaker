<div class="post-text" itemprop="text">
<p>I have been working on an issue that requires a Python script to run via the PowerShell command line. The script should pass the command to the command line and save the output. However, I'm running into an issue where some command line arguments are not recognized. </p>
<pre><code>import subprocess
try:
    output = subprocess.check_output\
    (["Write-Output 'Hello world'"], shell=True)
    # (["dir"], shell=True)
except subprocess.CalledProcessError as e:
    print(e.output)
    print('^Error Output^')
</code></pre>
<p>If I use the current command with the <code>check_output</code> command, I get an error stating that:</p>
<pre><code>'"Write-Output 'Hello world'"' is not recognized as an internal or external command,
operable program or batch file.
</code></pre>
<p>If  I just use the <code>"dir"</code> line, the script runs just fine. I'm at odds here as to why this would be happening. This is not the exact script that I'm running, but it produces the same problem on my machine. If I just type the problem command into the command line, it would output <code>"Hello world"</code> onto the new line just as expected. </p>
<p>Any insight as to why this would be happening would be greatly appreciated. If it's of relevance, I would like to not use any sort of admin privilege workaround. </p>
</div>
<div class="post-text" itemprop="text">
<p>I believe this is because in Windows your default Shell is not PowerShell, you could Execute a Powershell command, calling the executable by executing Powershell with the arguments you need. </p>
<p>For Example</p>
<pre class="lang-py prettyprint-override"><code>
POWERSHELL_COMMAND = r'C:\WINDOWS\system32\WindowsPowerShell\v1.0\powershell.exe'

subprocess.Popen([POWERSHELL_COMMAND,
                  '-ExecutionPolicy', 'Unrestricted',
                  'Write-Output', 'Hello World'],
                  stdout = subprocess.PIPE,
                  stderr = subprocess.PIPE)
</code></pre>
<p>if powershell is not in path you could use the full path for the executable
or if it's in path you could use just <code>POWERSHELL_COMMAND = "powershell"</code> as command, becareful, with the backslashed windows paths, to avoid errors you could use raw strings.</p>
<p>To verify that you have powershell in path, you could go to the configurations and check, or you could just open a <code>cmd</code> and type <code>powershell</code> and if It works, then you could assume that powershell is in path. </p>
<p>From the <a href="https://docs.python.org/3/library/subprocess.html#converting-argument-sequence" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>On Windows with shell=True, the COMSPEC environment variable specifies the default shell.</p>
</blockquote>
<p>So <code>set COMSPEC=powershell</code> allows to make <code>shell=True</code> use <code>powershell</code> as default instead of <code>cmd</code></p>
</div>
<span class="comment-copy">can you explain why you're (rightfully) using the raw prefix for the powershell command full path? isn't there a way to avoid puttin the whole path? on my machine I just need <code>powershell</code>, cos it's already in the path</span>
<span class="comment-copy">"On Windows with shell=True, the COMSPEC environment variable specifies the default shell": here's your answer to make it work with shell=True &amp; powershell</span>
<span class="comment-copy">the raw string prefix, It's because of the backslashs in the Windows File Paths, and I just tried just using the <code>powershell</code> command, and It also works.  I just used the whole path, of the executable, in case you didn't have <code>powershell</code> in your system path.  If you want to use it without full path, just add powershell to path (in case is not there)  you could check if you open a <code>cmd</code> and just type powershell, and If it works then you can assume it's in the windows path.</span>
<span class="comment-copy">@tarruda23 If the answer is enough for you please remember mark it as answered, else let me know.</span>
<span class="comment-copy">@ekiim I appreciate the help. However, <code>'-ExecutionPolicy', 'Unrestricted'</code> requires admin privileges, which I do not have on this machine. Simply removing that option allows the code to work. The problem I'm having is applying your solution to a more general case. If I have a program that installs command line options and those were not recognized when passing through python, would I just specify the path to that program's executable instead of powershell's?</span>
