<div class="post-text" itemprop="text">
<p>This has problem been asked before, but I can't find it, sorry, I'm wondering if there is a method of getting accessing ( or saving the contents of ) multiple lists ( or other variable ) within a class, without making a list of lists, then deconstructing the list of lists outside of the class.</p>
<p>Here is an example</p>
<p>It's a class that open on all files in a directory of a selected file type and outputs the content of each file as a list</p>
<pre><code>class WithOpenFilesInDirectory:
def __init__(self, Directory, FileType):
    self.Directory = Directory
    self.FileType = FileType
def LoadFilesList(self):
    for filename in glob.glob(os.path.join(self.Directory, self.FileType)):
        with open(filename, "r") as Output:
            print(filename)
            Output = Output.readlines()
            Output = [x.strip("\n") for x in Output]
            print(Output)

WithOpenFilesInDirectory("data","*txt").LoadFilesList()
</code></pre>
<p>And here is an example of the end formatting I'm looking for, outside of the class</p>
<pre><code>File1 = ['contents', 'of', 'file', 'one']
File2 = ['contents', 'of', 'file', 'two']
</code></pre>
<p>Thanks for your help</p>
</div>
<div class="post-text" itemprop="text">
<p>For simplicity, lets say our two files looked like this:</p>
<p><strong>File1.txt</strong></p>
<pre><code>contents
of 
file 
one
</code></pre>
<p><strong>File2.txt</strong></p>
<pre><code>contents
of 
file 
two
</code></pre>
<p>And they were stored in a <code>data</code> directory where our script is located. </p>
<p>You could then collect the lines from each file in a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a> of lists. You could then call the files from this dictionary and do something with the list of line contents. </p>
<p><strong>Demo:</strong></p>
<pre><code>from glob import glob

from os.path import join
from os.path import basename
from os.path import splitext

from collections import defaultdict

class OpenFilesDirectory:
    def __init__(self, directory, filetype):
        self.path = join(directory, filetype)

    def load_files_list(self):
        lines = defaultdict(list)

        for filename in glob(self.path):
            name, _ = splitext(basename(filename))
            with open(filename) as f:
                for line in f:
                    lines[name].append(line.strip())

        return lines

d = OpenFilesDirectory("data", "*.txt").load_files_list()
print(d)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>defaultdict(&lt;class 'list'&gt;, {'File1': ['contents', 'of', 'file', 'one'], 'File2': ['contents', 'of', 'file', 'two']})
</code></pre>
<p>You could then access the lines like so:</p>
<pre><code>&gt;&gt;&gt; d['File1']
['contents', 'of', 'file', 'one']
&gt;&gt;&gt; d['File2']
['contents', 'of', 'file', 'two']
</code></pre>
</div>
<span class="comment-copy">I don't understand what your trying to achieve? Do you want to store each line from the file in a list separately?</span>
<span class="comment-copy">Store each each file to a separate list, so line one of the file would be stored as the first section of the list, the second line of the file as second part of the list, or in other words if you look at File1 at the bottom of the question, 'contents' is on line 1, 'of' is on line 2 of the file</span>
