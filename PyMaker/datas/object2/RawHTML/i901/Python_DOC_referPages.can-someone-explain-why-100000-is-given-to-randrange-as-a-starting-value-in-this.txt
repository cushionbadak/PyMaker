<div class="post-text" itemprop="text">
<p>I'm following along with the videos for Interactive Python's course on data structures and algorithms.  In one segement the following piece of code appears. It's to demonstrate a example of O(n**2) complexity.</p>
<p>It's supposed to loop through the range starting from 1000, and ending at 10000. But I have no idea why 100000 is given to the randrange function in the list comprehension on line 2. </p>
<p>Thanks in advance!</p>
<p>Note: i'm following along with this course - <a href="http://interactivepython.org/runestone/static/pythonds/AlgorithmAnalysis/BigONotation.html" rel="nofollow noreferrer">http://interactivepython.org/runestone/static/pythonds/AlgorithmAnalysis/BigONotation.html</a></p>
<pre><code>for listSize in range(1000,10001,1000):
    alist = [randrange(100000) for x in range(listSize)]
    start =  time.time()
    print(findmin(alist))
    end = time.time()
    print("size: %d time: %f" % (listSize, end-start))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a <em>time trial</em>, testing how fast <code>findmin()</code> is. That's best done with randomised data, to avoid pathological cases. The list comprehension produces the test data. The <code>100000</code> is just an upper bound for the random values in that list, high enough to ensure that even for a list with 10k integers there is a nice spread of values.</p>
<p>Note that it is better to use the <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer"><code>timeit</code> module</a> to execute time trials.</p>
</div>
<span class="comment-copy">So, to check my understanding: on the first iteration is it generating 1000 random numbers from 1-100000; then finding the smallest of those values? and on the second iteration doing the same but with a list of 2000 numbers...and so on?</span>
<span class="comment-copy">Exactly. And it records how long this takes.</span>
<span class="comment-copy">Awesome! Thank you very much!</span>
