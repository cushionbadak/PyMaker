<div class="post-text" itemprop="text">
<p>I can't understand why some codes in Python are written with no indentation. </p>
<p>Both functions do the same thing but why the first function which is  is_leap1 are writting in style with return only and no if statemnt? How did the first function return True and False without using if and else: ?</p>
<pre><code>def is_leap1(year):
    return year % 4==0and(year %100 !=0 or year %400==0)

print(is_leap1(2014))

def is_leap2(year):
    if (( year%400 == 0)or (( year%4 == 0 ) and ( year%100 != 0))):
        return True
    else:
        return False

print(is_leap2(2014))
</code></pre>
<p>output</p>
<pre><code>False
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Comparison operators such as <code>==</code>, <code>!=</code>,  <code>&lt;</code>, <code>&gt;=</code>, <code>and</code>, <code>or</code>, etc, all return Boolean values naturally. Therefore, you do not need to use <code>if</code> statements to return <code>True</code> or <code>False</code> when using these operators. You can test this trivially yourself:</p>
<pre><code>print(5 &gt; 3)                     # True
print(True if 5 &gt; 3 else False)  # True
</code></pre>
<p>The <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow noreferrer">official documentation</a> makes this explicit:</p>
<blockquote>
<p>Comparisons yield boolean values: <code>True</code> or <code>False</code>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>In the first function Logical operators are used which output True or False.</p>
<p>Since the condition <em>year % 4==0</em> <strong>and</strong> (<em>year %100 !=0</em> <strong>or</strong> <em>year %400==0</em>) is written using Logical AND, OR, these functions will compute the value and produce the value True or False, which is then finally returned using the <strong>return</strong> keyword from the function</p>
</div>
<span class="comment-copy">Comparison operators such as <code>==</code>, <code>!=</code>,  <code>&lt;</code>, <code>&gt;=</code>, <code>and</code>, <code>or</code>, etc, all return Boolean values naturally.</span>
<span class="comment-copy"><a href="https://en.wikipedia.org/wiki/Boolean_algebra" rel="nofollow noreferrer">en.wikipedia.org/wiki/Boolean_algebra</a></span>
<span class="comment-copy">Think about it: why would you write <code>if true_or_false: return True; else: return False</code> rather than just <code>return true_or_false</code>?</span>
<span class="comment-copy">Thank you guys, I get it now. so what about when you get a code with   xx for x in list  why don't you just write it with indentation as  for x in list:      xx</span>
<span class="comment-copy">I think you're trying to describe a <i>list comprehension</i>. You do it because it's more efficient than repeatedly appending.</span>
<span class="comment-copy">Thank you all, it is all clear now :)</span>
