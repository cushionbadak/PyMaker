<div class="post-text" itemprop="text">
<p>I am attempting to make a painting based on the mass of the universe with pi and the gravitational constant of earth at sea level converted to binary.  i've done the math and i have the right dimentions and it should only be less than a megabyte of ram but im running into maximum allowed dimention exceeded value error.</p>
<p>Here is the code:</p>
<pre><code>import matplotlib.pyplot as plt
import matplotlib.cm as cm
import numpy as np

boshi = 123456789098765432135790864234579086542098765432135321 # universal mass

genesis = boshi ** 31467 # padding

artifice = np.binary_repr(genesis) # formatting

A = int(artifice) 

D = np.array(A).reshape(A, (1348, 4117))

plt.imsave('hello_world.png', D, cmap=cm.gray) # save image
</code></pre>
<p>I keep running into the error at <code>D = np.array...</code>, and maybe my reshape is too big but its only a little bigger than 4k.  seems like this should be no problem for gpu enhanced colab.  Doesn't run on my home machine either with the same error.  Would this be fixed with more ram?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Making it Work</strong></p>
<p>The problem is that <code>artifice = np.binary_repr(genesis)</code> creates a string. The string consists of <code>1348 * 4117 = 5549716</code> digits, all of them zeros and ones. If you convert the string to a python integer, <code>A = int(artifice)</code>, you will (A) wait a very long time, and (B) get a non-iterable object. The array you create with <code>np.array(A)</code> will have a single element.</p>
<p>The good news is that you can bypass the time-consuming step entirely using the fact that the string <code>artifice</code> is already an iterable:</p>
<pre><code>D = np.array(list(artifice), dtype=np.uint8).reshape(1348, 4117)
</code></pre>
<p>The step <code>list(artifice)</code> will take a couple of seconds since it has to split up the string, but everything else should be quite fast.</p>
<p>Plotting is easy from there with <code>plt.imsave('hello_world.png', D, cmap=cm.gray)</code>:</p>
<p><a href="https://i.stack.imgur.com/cIqNv.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/cIqNv.png"/></a></p>
<p><strong>Colormaps</strong></p>
<p>You can easily change the color map to <code>coolwarm</code> or whatever you want when you save the image. Keep in mind that your image is binary, so only two of the values will actually matter:</p>
<pre><code>plt.imsave('hello_world2.png', D, cmap=cm.coolwarm)
</code></pre>
<p><a href="https://i.stack.imgur.com/gprRv.jpg" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/gprRv.jpg"/></a></p>
<p><strong>Exploration</strong></p>
<p>You have an opportunity here to add plenty of color to your image. Normally, a PNG is 8-bit. For example, instead of converting <code>genesis</code> to bits, you can take the bytes from it to construct an image. You can also take nibbles (half-bytes) to construct an indexed image with 16 colors. With a little padding, you can even make sure that you have a multiple of three data points, and create a full color RGB image in any number of ways. I will not go into the more complex options, but I would like to explore making a simple image from the bytes.</p>
<p><code>5549716</code> bits is <code>693715 = 5 * 11 * 12613</code> bytes (with four leading zero bits). This is a very nasty factorization leading to an image size of 55x12613, so let's remove that upper nibble: while <code>693716</code>'s factorization is just as bad as <code>693715</code>'s, <code>693714</code> factors very nicely into <code>597 * 1162</code>.</p>
<p>You can convert your integer to an array of bytes using its own <a href="https://docs.python.org/3/library/stdtypes.html#int.to_bytes" rel="nofollow noreferrer"><code>to_bytes</code></a> method:</p>
<pre><code>from math import ceil

byte_genesis = genesis.to_bytes(ceil(genesis.bit_length() / 8), 'big')
</code></pre>
<p>The reason that I use the built-in <a href="https://docs.python.org/3/library/math.html#math.ceil" rel="nofollow noreferrer"><code>ceil</code></a> rather than <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.ceil.html" rel="nofollow noreferrer"><code>np.ceil</code></a> is that it return an integer rather than a float.</p>
<p>Converting the huge integer is very fast because the <code>bytes</code> object has direct access to the data of the integer: even if it makes a copy, it does virtually no processing. It may even share the buffer since both <code>bytes</code> and <code>int</code> are nominally immutable. Similarly, you can create a numpy array from the <code>bytes</code> as just a view to the same memory location using <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.frombuffer.html" rel="nofollow noreferrer"><code>np.frombuffer</code></a>:</p>
<pre><code>img = np.frombuffer(byte_genesis, dtype=np.uint8)[1:].reshape(597, 1162)
</code></pre>
<p>The <code>[1:]</code> is necessary to chop off the leading nibble, since <code>bytes_genesis</code> must be large enough to hold the entirety of <code>genesis</code>. You could also chop off on the <code>bytes</code> side:</p>
<pre><code>img = np.frombuffer(byte_genesis[1:], dtype=np.uint8).reshape(597, 1162)
</code></pre>
<p>The results are identical. Here is what the picture looks like:</p>
<pre><code>plt.imsave('hello_world3.png', img, cmap=cm.viridis)
</code></pre>
<p>The result is too large to upload (because it's not a binary image), but here is a randomly selected sample:</p>
<p><a href="https://i.stack.imgur.com/fwzST.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/fwzST.png"/></a></p>
<p>I am not sure if this is aesthetically what you are looking for, but hopefully this provides you with a place to start looking at how to convert very large numbers into data buffers.</p>
<p><strong>More Options, Because this is Interesting</strong></p>
<p>I wanted to look at using nibbles rather than bytes here, since that would allow you to have 16 colors per pixel, and twice as many pixels. You can get an 1162x1194 image starting from</p>
<pre><code>temp = np.frombuffer(byte_genesis, dtype=np.uint8)[1:]
</code></pre>
<p>Here is one way to unpack the nibbles:</p>
<pre><code>img = np.empty((1162, 1194), dtype=np.uint8)
img.ravel()[::2] = np.bitwise_and(temp &gt;&gt; 4, 0x0F)
img.ravel()[1::2] = np.bitwise_and(temp, 0x0F)
</code></pre>
<p>With a colormap like <code>jet</code>, you get:</p>
<pre><code>plt.imsave('hello_world4.png', img, cmap=cm.jet)
</code></pre>
<p><a href="https://i.stack.imgur.com/n2kVS.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/n2kVS.png"/></a></p>
<p>Another option, going in the opposite direction in a manner of speaking) is not to use colormaps at all. Instead, you can divide your space by a factor of three and generate your own colors in RGB space. Luckily, one of the prime factors of <code>693714</code> is <code>3</code>. You can therefore have a 398x581 image (<code>693714 == 3 * 398 * 581</code>). How you interpret the data is even more than usual up to you. </p>
<p><strong>Side Note Before I Continue</strong></p>
<p>With the black-and-white binary image, you could control the color, size and orientation of the image. With 8-bit data, you could control how the bits were sampled (8 or fewer, as in the 4-bit example), the endianness of your interpretation, the color map, and the image size. With full color, you can treat each triple as a separate color, treat the entire dataset as three consecutive color planes, or even do something like apply a <a href="https://en.wikipedia.org/wiki/Bayer_filter" rel="nofollow noreferrer">Bayer filter</a> to the array. All in addition to the other options like size, ordering, number of bits per sample, etc.</p>
<p>The following will show the color triples and three color planes options for now.</p>
<p><strong>Full Color Images</strong></p>
<p>To treat each set of 3 consecutive bytes as an RGB triple, you can do something like this:</p>
<pre><code>img = temp.reshape(398, 581, 3)
plt.imsave('hello_world5.png', img)
</code></pre>
<p>Notice that there is no colormap in this case.</p>
<p><a href="https://i.stack.imgur.com/zWnLP.jpg" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/zWnLP.jpg"/></a></p>
<p>Interpreting the data as three color planes requires an extra step because <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.imsave.html" rel="nofollow noreferrer"><code>plt.imsave</code></a> expects the last dimension to have size 3. <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.rollaxis.html" rel="nofollow noreferrer"><code>np.rollaxis</code></a> is a good tool for this:</p>
<pre><code>img = np.rollaxis(temp.reshape(3, 398, 581), 0, 3)
plt.imsave('hello_world6.png', img)
</code></pre>
<p><a href="https://i.stack.imgur.com/brn41.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/brn41.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>I could not reproduce your problem, because the line <code>A = int(artifice)</code> took like forever. I replaced it with a ,<code>for</code> loop to cast each digit on its own. The code worked then and produced the desired image.</p>
<pre><code>import matplotlib.pyplot as plt
import matplotlib.cm as cm
import numpy as np

boshi = 123456789098765432135790864234579086542098765432135321
genesis = boshi ** 31467
artifice = np.binary_repr(genesis)

D = np.zeros((1348, 4117), dtype=int)
for i, val in enumerate(D):
    D[i] = int(artifice[i])

plt.imsave('hello_world.png', D, cmap=cm.gray)
</code></pre>
</div>
<span class="comment-copy">is this being lazy?  this is my first code in python and I have been working on it for months.</span>
<span class="comment-copy">Don't worry about the downvote. Almost every beginner question gets one for no good reason. The more I look at your question, the more I like it. I know you've already selected an answer, but I keep playing with what you are doing here. I'll keep posting updates if I can find a better way to do it.</span>
<span class="comment-copy">So just to be clear, you are trying to get an array of zeros and ones with 1348 rows and 4117 columns?</span>
<span class="comment-copy">thanks physicist i think your answer was more pointed to what i was going for.  ya 1348 rows and 4117 columns.  i would think it would produce less organized a field.  also you can use cm.coolwarm instead of gray to get red and blue colors</span>
<span class="comment-copy">You can, but it won't help much since you have only two possible values. I'm going to post a suggestion for that too.</span>
<span class="comment-copy">@DanteBonfatti. I agree. That is a neat one.</span>
<span class="comment-copy">Ive copied your email. I recommend you delete it from this very public forum.</span>
<span class="comment-copy">Why the downvote? This code works and produces the image the OP wants, even faster the original version. Please explain your intentions.</span>
<span class="comment-copy">This does not address OP's blatant typo at all.</span>
<span class="comment-copy">Even though my answer is a working solution to the OP's problem. So, this downvote is absolutely not justified.</span>
<span class="comment-copy">Ok. Fair enough</span>
<span class="comment-copy">maxpowers not quite what i was looking for but it is really cool.  i had an image in my mind that it appears i need to keep searching for.</span>
