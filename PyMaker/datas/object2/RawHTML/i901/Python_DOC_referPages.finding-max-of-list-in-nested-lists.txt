<div class="post-text" itemprop="text">
<pre><code>a=[int(i) for i in input().split()]
b=[]
for i in range(a[0]):
    x=[int(i) for i in input().split()]
    b.append(x)
print(b)
c=[]    
for j in range(len(b)):
  c.append(max(b[i]))
print(b[0])
print(c)
</code></pre>
<pre><code>2
1 3 45 6 8 
2 4 56 7 
[[1, 3, 45, 6, 8], [2, 4, 56, 7]]
[1, 3, 45, 6, 8]
[56, 56, 56]

</code></pre>
<p>i want to put all the max elements of each list in b to c.
but i keep getting the max element of the whole list, while i want 
max of each list in nested lists which is [45,56]</p>
</div>
<div class="post-text" itemprop="text">
<p>You have a 2D list and are trying to return a list of the maxes for each element in that 2D list. Iterate over the 2D list and take the max for each element:</p>
<pre><code>res = [max(i) for i in nested_list]
</code></pre>
<p>Additionally you can also use <code>map</code>:</p>
<pre><code>res = list(map(max, nested_list))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> that takes the max for each sub-list <code>l</code>:</p>
<pre><code>b = [[1, 3, 45, 6, 8], [2, 4, 56, 7]]
c = [max(l) for l in b]

print(c)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[45, 56]
</code></pre>
<p>The above list comprehension is <em>equivalent</em> to the following for loop:</p>
<pre><code>c = []
for l in b:
    c.append(max(l))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also convert your nested list to <code>Pandas Dataframe</code> and use <code>max</code> function. 
<strong>You won't have to worry about loops then.</strong></p>
<pre><code>In [350]: import pandas as pd

In [342]: l = [[1, 3, 45, 6, 8], [2, 4, 56, 7]]

In [343]: pd.DataFrame(l)
Out[343]: 
   0  1   2  3    4
0  1  3  45  6  8.0
1  2  4  56  7  NaN

In [347]: pd.DataFrame(l).max(axis=1).tolist()
Out[347]: [45.0, 56.0]
</code></pre>
</div>
