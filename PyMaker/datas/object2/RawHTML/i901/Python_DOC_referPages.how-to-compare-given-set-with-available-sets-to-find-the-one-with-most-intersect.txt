<div class="post-text" itemprop="text">
<p>Available sets are</p>
<pre><code>A={"one","two","three"}
B={"two","three","four"}
c={"four","five"}
</code></pre>
<p>Given set is </p>
<pre><code>D = {"four","five","six"}
</code></pre>
<p>The task is to find which available set has most intersecting elements to given set.</p>
<p>Here<br/>
 C contains 2 fields of D<br/>
 B contains 1 field of D.<br/>
This can be computed by finding the union of D with A, B, C.</p>
<p>How to find the most close-set when there are millions of available sets.</p>
</div>
<div class="post-text" itemprop="text">
<p>Build a data structure in such a way that the elements become the key. In your example, the data structure can be built to look like the below  </p>
<pre><code>"one": {A}
"two": {A,B}
"three": {A,B}
"four": {B,C}
"five": {C}
</code></pre>
<p>Now all you need to check is to take each element in your input set D and add a counter to each of the set names. so in your example, D will be {"four","five","six"}  </p>
<p>Now you can loop through "four", "five" and "six"  </p>
<pre><code>Step 1: The counter will be all zeros initially  

Step 2: After looking at the values for "four" the counter will look like below  
B:1, C:1  

Step 3: After looking at the values for "five" the counter will look like below  
B:1, C:2  

Step 4: After looking at the values for "six" the counter will look like below   
B:1, C:2  

Step 5: Choose the set with the maximum value. In this case it will be C.  
</code></pre>
<p>If you are using python, you can use collections.Counter most_common method.<br/>
<a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">https://docs.python.org/3/library/collections.html#collections.Counter</a></p>
</div>
<span class="comment-copy">how many unique elements are there in your dataset?</span>
<span class="comment-copy">A million fields approximately</span>
<span class="comment-copy">you mean millions of sets and a million unique elements like "one", "two", "three", etc?</span>
<span class="comment-copy">Am working on such thing where set names are Items(mechanical components) and fields are characterstics of Items</span>
<span class="comment-copy">You could reverse the dictionary with the characteristics as the key and the mechanical components as the value and then perform the intersection</span>
