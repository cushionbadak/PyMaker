<div class="post-text" itemprop="text">
<p>I have a quick question about how to deal with an inheritance problem.</p>
<p>Let's say we have a vehicle object</p>
<pre><code>class vehicle(object):

    __init__(registration):
         registration = self.registration

    get_details():
         return "This is a vehicle"
</code></pre>
<p>And then a truck that inherits from vehicle</p>
<pre><code>class truck(vehicle):

      get_details():
         return "This is a truck"
</code></pre>
<p>We have lots of classes all with the same methods and properties e.g. bus, car, train. However, we also have an airplane which inherits from vehicle but only airplane has a new method called  <code>required_takeoff_distance()</code></p>
<p>Is it OK to only have it in the airplane class or should you also add it to the vehicle class with a default of <code>raise NotImplementedError()</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's perfectly OK for a child class to define more methods than are available on the parent class. Indeed, this is the usual reason for creating a child class in the first place.</p>
<p>Do not add a method with <code>raise NotImplementedError</code> onto the parent class unless you're trying to define an interface / <a href="https://docs.python.org/3/glossary.html#term-abstract-base-class" rel="noreferrer">abstract base class</a>. This is almost never needed in Python, so if you're not sure what it means you can safely forget about it.</p>
</div>
<span class="comment-copy">It is way better to have the required_takeoff_distance only in the airplane class since as you point it, this method only make sense for airplane. Adding the method to the base class would break the SOLID principles.</span>
<span class="comment-copy">I agree with <i>"if you're not sure what it means you can safely forget about it."</i>, but I dont with <i>"This is almost never needed in Python"</i>. That radically depends on what you use Python for. I have been recently dedicating a lot of time to building some frameworks and I use it a lot.</span>
