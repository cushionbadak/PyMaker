<div class="post-text" itemprop="text">
<p>I've been using Python for a good period of time. I have never found out how built-in functions work. In different words, how are they included without having any module imported to use them? What if I want to add to them (locally)? </p>
<p>This may seem naive. But, I haven't really found any answer that explains comprehensively how do we have built-in functions, global variables, etc., available to us when developing a script.</p>
<p>In a nutshell, where do we include the <a href="https://docs.python.org/3/library/builtins.html" rel="nofollow noreferrer">builtins</a> module?</p>
<p>I have encountered <a href="https://stackoverflow.com/questions/6965090/how-to-add-builtin-functions">this question</a>. But it gives a partial answer to my question.</p>
</div>
<div class="post-text" itemprop="text">
<p>The not-implementation-details part of the answer is that the <code>builtins</code> module, or <code>__builtin__</code> in Python 2, provides access to the built-ins namespace. If you want to modify the built-ins (you usually shouldn't), setting attributes on <code>builtins</code> is how you'd go about it.</p>
<p>The implementation details part of the answer is that Python keeps track of built-ins in multiple ways. For example, each frame object keeps track of the built-in namespace it's using, which may be different from other frames' built-in namespaces. You can access this through a frame's <code>f_builtins</code> attribute. When a <a href="https://github.com/python/cpython/blob/v3.7.2/Python/ceval.c#L2108" rel="nofollow noreferrer"><code>LOAD_GLOBAL</code></a> instruction fails to find a name in the frame's globals, it <a href="https://github.com/python/cpython/blob/v3.7.2/Objects/dictobject.c#L1429" rel="nofollow noreferrer">looks</a> in the frame's builtins. There's also a <code>__builtins__</code> global variable in most global namespaces, but it's not directly used for built-in variable lookup; instead, it's used to initialize <code>f_builtins</code> in <a href="https://stackoverflow.com/questions/52221983/why-does-deleting-a-global-variable-named-builtins-prevent-only-the-repl-fro/52318537#52318537">certain situations</a> during frame object creation. There's also a <code>builtins</code> reference in the global <code>PyInterpreterState</code>, which is <a href="https://github.com/python/cpython/blob/v3.7.2/Python/ceval.c#L4412" rel="nofollow noreferrer">used as default builtins</a> if there's no current frame object.</p>
</div>
<span class="comment-copy">They are built directly into the interpreter</span>
<span class="comment-copy">You mean, they're compiled into the interpreter executable?</span>
<span class="comment-copy">Yes, they are part of the interpreter itself, not separated out into their own modules</span>
<span class="comment-copy">@UnholySheep they are in the <code>builtins</code> module though.</span>
<span class="comment-copy">@gilch: And there is <a href="https://docs.python.org/3/library/constants.html#constants-added-by-the-site-module" rel="nofollow noreferrer">some (limited) precedent for dynamically adding stuff to the built-in namespace</a>.</span>
<span class="comment-copy">The docs for the <code>exec</code> function also mention that you can customize which <code>__builtins__</code> it uses by specifying it in the globals dict argument.</span>
<span class="comment-copy">@gilch: That's not <i>quite</i> what they say, but under usual circumstances, setting <code>__builtins__</code> in the global dict passed to <code>exec</code> will control the builtins used for the executed code, through the usual initialize-<code>f_builtins</code>-from-<code>__builtins__</code> handling. There is a weird exception <a href="https://ideone.com/yl9fvN" rel="nofollow noreferrer">if you try to set <code>__builtins__</code> in the current globals and then pass those globals to <code>exec</code></a>, since that hits the other code path for initializing <code>f_builtins</code>.</span>
