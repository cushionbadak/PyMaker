<div class="post-text" itemprop="text">
<p>The buffering argument of the built-in open() function seems to be ignored when working with text I/O:</p>
<p><strong>Text I/O</strong>:</p>
<pre><code>&gt;&gt;&gt; f = open("myfile_text.txt", "w",buffering=2)
&gt;&gt;&gt; f.write('1')
1
&gt;&gt;&gt; f.write('1')
1
&gt;&gt;&gt; f.write('1')
1

mymachine:~ myuser$ cat myfile.txt ; echo
mymachine:~ myuser$
</code></pre>
<p><strong>Binary I/O</strong>:</p>
<pre><code>&gt;&gt;&gt; f = open("myfile_binary.txt", "wb",buffering=2)
&gt;&gt;&gt; f.write('1'.encode())
1
&gt;&gt;&gt; f.write('1'.encode())
1
&gt;&gt;&gt; f.write('1'.encode())
1

mymachine:~ myuser$ cat myfile.txt ; echo
11
mymachine:~ myuser$
</code></pre>
<p>Why? Is this intended behavior?</p>
</div>
<div class="post-text" itemprop="text">
<p>I've poked around the a bit. Indeed the documentation states:</p>
<blockquote>
<p><em>buffering</em> is an optional integer used to set the buffering policy. Pass 0 to switch buffering off (only allowed in binary mode), 1 to select line buffering (only usable in text mode), and an integer &gt; 1 to indicate the size in bytes of a fixed-size chunk buffer...</p>
</blockquote>
<p>Hence it would be reasonable to expect that specifying <code>buffering=2</code> would cause buffer of size <code>2B</code> to be used (and see files flushed when using that buffer up). However in the text mode it seem to (and the documentation doesn't really clearly indicate that in this place) affect the underlining <code>BufferedWriter</code>, but <code>TextIOWrapper</code> whose <code>write()</code> you end up calling does still "its own thing"... Starting with Python 3.7 you tell it not to and have it pass the writes immediately to the underlying object by calling <a href="https://docs.python.org/3/library/io.html?#io.TextIOWrapper.reconfigure" rel="nofollow noreferrer"><code>f.reconfigure(write_through=True)</code></a> on the file you have opened.</p>
<hr/>
<p>Actually all the code and checks for value of <code>write_through</code> are already in Python 3.6 (I've checked 3.6.8) (as a matter of fact <code>_io_TextIOWrapper_write_impl</code>, i.e. <code>_io.TextIOWrapper.write</code>, are identical in both versions), but the <code>write_through</code> attribute is not exposed (yet).</p>
</div>
<span class="comment-copy">@AlexanderStrakhov That link is to python 2.7, but this question is tagged python 3.</span>
<span class="comment-copy">@JohnGordon What is it supposed to mean? From the docs: "buffering is an optional integer used to set the buffering policy. Pass 0 to switch buffering off (only allowed in binary mode), 1 to select line buffering (only usable in text mode), and an integer &gt; 1 to indicate the size in bytes of a fixed-size chunk buffer."</span>
<span class="comment-copy">@SimónRamírezAmaya The answer that was linked to in the earlier comment quotes 2.7 documentation, which says that it's an approximate size. The 3.6 documentation is different, it doesn't say approximate.</span>
<span class="comment-copy">My apologies; I misread the documentation.  I will remove my earlier comment.</span>
<span class="comment-copy">Thank you for your research. So does the fact that we have to explicitly state for the TextIOWrapper to pass down writes to BufferedWriter mean that original open(..., buffering = 2) parameter does not affect the size of the TextIOWrapper buffer?</span>
<span class="comment-copy">Indeed buffer of <code>_io.TextIOWrapper</code> itself is hard coded in the guts at the moment to 8kB.</span>
