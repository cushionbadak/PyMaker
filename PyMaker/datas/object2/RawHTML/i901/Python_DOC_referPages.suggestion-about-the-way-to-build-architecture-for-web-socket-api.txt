<div class="post-text" itemprop="text">
<p>I am building web-sockets API on python using python <a href="https://websockets.readthedocs.io/en/stable/" rel="nofollow noreferrer">WebSockets</a>. According to the services that I am using in my API I need to wrap them by threads. So I have to make my asyncio web-sockets await while thread produces data for the response. </p>
<p>I found that there are a lot of ways to realize such service. I can use <a href="https://docs.python.org/2/library/threading.html" rel="nofollow noreferrer">threads</a> + native python <a href="https://docs.python.org/2/library/socket.html" rel="nofollow noreferrer">socket</a> module or multiplexing(python <a href="https://docs.python.org/3/library/selectors.html" rel="nofollow noreferrer">selector</a> module) + python <a href="https://docs.python.org/2/library/socket.html" rel="nofollow noreferrer">socket</a> module or multithreading + python <a href="https://docs.python.org/2/library/socket.html" rel="nofollow noreferrer">socket</a> module or <a href="https://docs.python.org/2/library/threading.html" rel="nofollow noreferrer">threads</a> + async python <a href="https://websockets.readthedocs.io/en/stable/" rel="nofollow noreferrer">web-sockets</a>.  </p>
<p>I want to have a web-socket python service working the next way. My client sends data to the server. The server starts thread_1 which somehow modifies given data then pass modified data to the thread_2 which modify them one more time and then return twice modified data as the response to the client. As I expect client will not wait for the response on the server to send next pack of data but if the server returns some result the client will handle it. In other words, client and server should work in async order. Although, it will be great if you will suggest some materials which help me to achieve the goal in that question.</p>
</div>
<div class="post-text" itemprop="text">
<p>One of the way to realize such architecture is to combine multithreading with asyncio web-sockets. That goal is achieved by using asyncio <a href="https://pymotw.com/3/asyncio/executors.html" rel="nofollow noreferrer">executors</a>. </p>
</div>
<span class="comment-copy">Usually you don't worry about the server threads... when deploying you use unicorn or something to serve your websocket and specify number of workers</span>
<span class="comment-copy">As far as I can tell, this is an A/B question. You're trying to figure out threads, but the real problem is notification between task data and WebSocket connections. A better solution might be a callback or a pub/sub approach, where WebSocket connections are notified about completion through a callback or a pub/sub notification.</span>
