<div class="post-text" itemprop="text">
<p>I would like to write a 2-D array to a Python 3  txt file.</p>
<p>e.g.</p>
<pre><code> My_list = ['Hello', 'World', 0], ['Pretty', 'World', 1], ['Tired', 'World', 2]]
</code></pre>
<p>going into my_text.txt.</p>
<p>I have tried loads of approaches none of which I can recommend as I get a variety of results including 1 element Lists: </p>
<pre><code>["['Hello', 'World', 0], ['Pretty', 'World', 1], ['Tired', 'World', 2]"]
</code></pre>
<p>and lists of strings:</p>
<pre><code>["[Hello', 'World', 0]", "['Pretty', 'World', 1]", "['Tired', 'World', 2]"]
</code></pre>
<p>along with other wonderful results.
Does anyone know some of some simple straightforward code for this or a tutorial?
Just doing this out of curiosity, tbh and am struggling badly.</p>
<p>I would like to be able to read my List out from the file again and use it fully as a List once again 
e.g, <code>print(my_list[0][0])</code> yields <code>'Hello'</code></p>
</div>
<div class="post-text" itemprop="text">
<p><code>json</code> is good at serializing lists/dicts/numbers/strings:</p>
<pre><code>import json 

My_list = [['Hello', 'World', 0], ['Pretty', 'World', 1], ['Tired', 'World', 2]]

#write to file
with open("data.json", "w") as file:
    json.dump(My_list, file)

#read from file
with open("data.json") as file:
    new_list = json.load(file)

print(new_list)
</code></pre>
<p>Result:</p>
<pre><code>[['Hello', 'World', 0], ['Pretty', 'World', 1], ['Tired', 'World', 2]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Take into account also <strong>yaml</strong>. Requires to install <strong>pyyaml</strong> (<code>pip install pyyaml</code>).</p>
<pre><code>import yaml
</code></pre>
<p>Save the list object to file:</p>
<pre><code>my_list = [['Hello', 'World', 0], ['Pretty', 'World', 1], ['Tired', 'World', 2]]

with open('my_list.yml', 'w') as outfile:
    yaml.dump(my_list, outfile, default_flow_style=False)
</code></pre>
<p>The output file looks like this:</p>
<pre><code>- - Hello
  - World
  - 0
- - Pretty
  - World
  - 1
- - Tired
  - World
  - 2
</code></pre>
<p>To load back the list:</p>
<pre><code>with open("my_list.yml", 'r') as inputfile:
    my_list_back = yaml.load(inputfile)
</code></pre>
<p><hr/>
To handle directly string you could use the standard library <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a>, this is a simple example, you can customise further.</p>
<pre><code>import ast

string_list = (str(my_list)) # convert tostring then save it to file
print(string_list.__class__) # it's a string
reconverted_list = ast.literal_eval(string_list) # convert back with ast
print(reconverted_list.__class__) # it's a list
</code></pre>
<p>Than a basic read/write could be:</p>
<pre><code>with open('my_list.txt', 'w') as file:
    file.write(str(my_list))

with open('my_list.txt', 'r') as file:
    my_list_back = ast.literal_eval(file.read())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Hi anyone who is interested.</p>
<p>I wanted to save an array into a Python Text File and Retrieve it fully so that I could address all elements. </p>
<p>I persevered with my problem and solved it with what is very messy code, I'm sure.</p>
<p>The code below does what I wanted to do.</p>
<p>Pointless exercise but I just had to do it.</p>
<p>Thanks for your help and ideas.</p>
<pre><code>my_list = []
my_list_669 = []

def create_list():
    #Creating the list

    for x in range(5):
        my_list.append(["Hello", "World", x])

    print("my_list = ", my_list)


def save_list_to_file():
    #creating the string

    string_1 = ""

    for item in my_list:
        string = item[0] + "," + item[1] + "," + str(item[2]) + "\n"
        string_1 += string
        #adds records to a string with a line return after each record

    with open('your_file.txt', 'w') as f:
            f.write(string_1)


def recover_list():

    with open('your_file.txt', 'r') as f:
            tiing = f.read().splitlines()
            #splits lines at \n and inserts into array called 'tiing'
            #each item is equivalent to a record

    for items1 in tiing:
        my_list_69 = items1.split(",")
        #splits the array items in ting at "," mark
        #these are now in an array called 'my_list_69'
        #below I access all items from within the list
        #and append them to a temporary sub-list

        sub_list = []
        for items in my_list_69:
            sub_list.append(items)

        my_list_669.append(sub_list)  this reconstructs the list


create_list()
save_list_to_file()
recover_list()

Testing:
print(my_list_669)
print(my_list_669[0])
print(my_list_669[0][2])
for items in my_list_669:
    print(items)
</code></pre>
</div>
<span class="comment-copy">Can you post some of the code you tried? Then we can give you pointers on where you might have gone the wrong way...</span>
<span class="comment-copy">@LoosaBway "I would like to be able to read my List out from the file again and use it fully as a List once again" the problem is you are simply writing the string representation of a list to a file, and calling that serialization. As other answers here suggest, you should simply use one of the built-in serialization formats, JSON, YAML, pickle (not mentioned yet). Otherwise, you have to parse the string representation yourself. The important point is that what you save in the file <i>isn't a list</i></span>
<span class="comment-copy">thanks - that is really useful.</span>
<span class="comment-copy">But as I have spent a few hours on this exercise with, I think(?) the difficulty arising from the tendency of various python text file instructions to add speech marks to what is saved / retrieved, I would like to beat this problem, I guess, just for the sake of it.</span>
<span class="comment-copy">Thanks again, that is cool!</span>
<span class="comment-copy">I would really like to beat the challenge of just using string and file reading methods - handling the various speech marks seems to be just such a difficult thing</span>
<span class="comment-copy">I added an edit to my post, if I get what you mean. You need to interprete e string as a different object (list in this case), so, you could look at <a href="https://docs.python.org/3/library/ast.html" rel="nofollow noreferrer">docs.python.org/3/library/ast.html</a>.</span>
