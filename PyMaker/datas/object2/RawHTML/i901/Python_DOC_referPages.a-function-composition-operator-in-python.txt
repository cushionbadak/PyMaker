<div class="post-text" itemprop="text">
<p>In <a href="https://stackoverflow.com/questions/54153527/how-can-i-use-an-operator-to-compose-functions-in-python">this question</a> I asked about a function composition operator in Python. <a href="https://stackoverflow.com/users/2644759/philip-tzou">@Philip Tzou</a> offered the following code, which does the job.</p>
<pre><code>import functools

class Composable:

    def __init__(self, func):
        self.func = func
        functools.update_wrapper(self, func)

    def __matmul__(self, other):
        return lambda *args, **kw: self.func(other.func(*args, **kw))

    def __call__(self, *args, **kw):
        return self.func(*args, **kw)
</code></pre>
<p>I added the following functions.</p>
<pre><code>def __mul__(self, other):
    return lambda *args, **kw: self.func(other.func(*args, **kw))

def __gt__(self, other):
    return lambda *args, **kw: self.func(other.func(*args, **kw))
</code></pre>
<p>With these additions, one can use <code>@</code>, <code>*</code>, and <code>&gt;</code> as operators to compose functions. For, example, one can write <code>print((add1 @ add2)(5), (add1 * add2)(5), (add1 &gt; add2)(5))</code> and get <code># 8 8 8</code>. (PyCharm complains that a boolean isn't callable for <code>(add1 &gt; add2)(5)</code>. But it still ran.)</p>
<p>All along, though, I wanted to use <code>.</code> as a function composition operator. So I added </p>
<pre><code>def __getattribute__(self, other):
    return lambda *args, **kw: self.func(other.func(*args, **kw))
</code></pre>
<p><em>(Note that this fouls up <code>update_wrapper</code>, which can be removed for the sake of this question.)</em></p>
<p>When I run <code>print((add1 . add2)(5))</code> I get this error at runtime: <code>AttributeError: 'str' object has no attribute 'func'</code>. It turns out (apparently) that arguments to <code>__getattribute__</code> are converted to strings before being passed to <code>__getattribute__</code>. </p>
<p>Is there a way around that conversion? Or am I misdiagnosing the problem, and some other approach will work?</p>
</div>
<div class="post-text" itemprop="text">
<p>I am actually unwilling to provide this answer. But you should know in certain circumstance you can use a dot "<code>.</code>" notation even it is a primary. This solution only works for functions that can be access from <code>globals()</code>:</p>
<pre><code>import functools

class Composable:

    def __init__(self, func):
        self.func = func
        functools.update_wrapper(self, func)

    def __getattr__(self, othername):
        other = globals()[othername]
        return lambda *args, **kw: self.func(other.func(*args, **kw))

    def __call__(self, *args, **kw):
        return self.func(*args, **kw)

</code></pre>
<p>To test:</p>
<pre><code>@Composable
def add1(x):
    return x + 1

@Composable
def add2(x):
    return x + 2

print((add1.add2)(5))
# 8
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can't have what you want. The <code>.</code> notation is <em>not a binary operator</em>, it is a <a href="https://docs.python.org/3/reference/expressions.html#primaries" rel="nofollow noreferrer">primary</a>, with only the value operand (the left-hand side of the <code>.</code>), and an <em>identifier</em>. <a href="https://docs.python.org/3/reference/expressions.html#atom-identifiers" rel="nofollow noreferrer">Identifiers</a> are strings of characters, not full-blown expressions that produce references to a value.</p>
<p>From the <a href="https://docs.python.org/3/reference/expressions.html#attribute-references" rel="nofollow noreferrer"><em>Attribute references</em> section</a>:</p>
<blockquote>
<p>An attribute reference is a primary followed by a period and a name:</p>
<pre><code>attributeref ::=  primary "." identifier
</code></pre>
<p>The primary must evaluate to an object of a type that supports attribute references, which most objects do. This object is then asked to produce the attribute whose name is the identifier.</p>
</blockquote>
<p>So when compiling, Python parses <code>identifier</code> as a string value, not as an expression (which is what you get for operands to operators). The <code>__getattribute__</code> hook (and any of the other <a href="https://docs.python.org/3/reference/datamodel.html#customizing-attribute-access" rel="nofollow noreferrer">attribute access hooks</a>) only has to deal with strings. There is no way around this; the dynamic attribute access function <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow noreferrer"><code>getattr()</code></a> strictly enforces that <code>name</code> must be a string:</p>
<pre><code>&gt;&gt;&gt; getattr(object(), 42)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: getattr(): attribute name must be string
</code></pre>
<p>If you want to use syntax to compose <em>two</em> objects, you are limited to binary operators, so expressions that take two operands, and only those that have hooks (the boolean <code>and</code> and <code>or</code> operators do not have hooks because they evaluate lazily, <code>is</code> and <code>is not</code> do not have hooks because they operate on object identity, not object values).</p>
</div>
<span class="comment-copy"><code>other</code> in <code>__getattribute__</code> is the <b>name</b> of the attribute, it's not a binary operator like <code>&gt;</code> or <code>@</code>.</span>
<span class="comment-copy">As you saw, <code>.</code> is reserved for accessing attributes and methods. But you may use <code>°</code> which is more similar to the original operator, and will not create this problem.</span>
<span class="comment-copy">@FrenchMasterSword what is the magic method to implement that?! It's not a valid Python operator.</span>
<span class="comment-copy">Well it isn't a python operator ^^'</span>
<span class="comment-copy">@FrenchMasterSword so... how exactly is that a useful suggestion? Are you suggesting the OP writes their own version of the interpreter to handle that symbol as an operator?</span>
<span class="comment-copy">Very weird. But thank you very much for going to the trouble of providing this information.</span>
<span class="comment-copy">This only works for globals <b>in the module <code>Composable</code> is defined in</b>. And while you could then start pulling out names from the stack, this still won’t give you full expression access; those would simply be syntax errors or parsed in the wrong order.</span>
<span class="comment-copy">@RussAbbott not sure why you think this weird? You have a string, and <code>globals()</code> is a dictionary of the module namespace mapping strings to objects. So yes, if you limit yourself to globals in the same module you can map attribute names to globals this way. That’s an indirect path, just don’t expect to have the same expressive freedom as you have with the hooks for binary operators.</span>
<span class="comment-copy">@Martijn Pieters. You're right. "Weird" is the wrong word. What I was reacting to was that this solution works in only limited situations -- as you also point out.</span>
<span class="comment-copy">I keep trying to find a way around this limitation, but I guess I'll have to give up. <code>@</code> and <code>*</code> are not that bad.</span>
<span class="comment-copy">I asked a related question here: <a href="https://stackoverflow.com/questions/54164382/more-on-function-composition-and-decorators-in-python" title="more on function composition and decorators in python">stackoverflow.com/questions/54164382/…</a></span>
