<div class="post-text" itemprop="text">
<p>I am not able to comprehend why the self.details is printing the same line even after changing the object attribute self.name and self.author.</p>
<pre><code>class Book(object):
    def __init__(self, name, author):
        self.name = name
        self.author = author
        self.details = self.name + ' written by ' + self.author

bk = Book("Harry Potter", "J K Rowling")
print(bk.name)
print(bk.author)
print(bk.details)   #Harry Potter written by J K Rowling

bk.name = 'Becoming'
bk.marks= 'Michelle Obama'
print(bk.name)
print(bk.author)
print(bk.details)   #Harry Potter written by J K Rowling
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because <code>details</code> is created from the original values. After the concatenation occurs, it's entirely independent of the other values. If you want a dynamically constructed string using the current values of <code>name</code>/<code>author</code>, <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer">use a <code>property</code></a> to compute <code>details</code> dynamically on access (without storing it as an attribute at all):</p>
<pre><code>class Book(object):
    def __init__(self, name, author):
        self.name = name
        self.author = author
        # Don't make a `details` attribute at all

    @property
    def details(self):
        # This method is called whenever you refer to `somebook.details`
        return self.name + ' written by ' + self.author
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>self.details</code> is created and set once when doing <code>self.details = self.name + ' written by ' + self.author</code> but it isn't linked to it. The <code>+</code> operation just does a concatenation of strings.</p>
<p>Exactly, with your first example, Python reads <code>self.details = self.name + ' written by ' + self.author</code> so it does <code>self.details = "Harry Potter" + ' written by ' + "J K Rowling"</code> and so <code>self.details = "Harry Potter written by J K Rowling"</code></p>
<p>It is just an attribute with a string as its value. This string will stay immutable until you change it explicitly.</p>
<p>If you want this behaviour, you may look into getter and setter, and make a setter for <code>self.name</code> and <code>self.author</code> automatically updating <code>self.details</code></p>
</div>
<span class="comment-copy">why it is independent of other values,that's what i am not able to understand.as far as property is concerned,i agree on that.</span>
<span class="comment-copy">@d.m: What happens when you do <code>x = 1</code>, <code>y = 2</code>, <code>z = x + y</code>, <code>x = 3</code>? Hint: <code>z</code> is not <code>5</code>. That's just how programming languages work; it's not useful to have the default behavior be a permanent, dynamic tie between operands and the result. Instance attributes aren't any different from plain variables, because if they were, it would be <i>very</i> surprising in a lot of cases.</span>
<span class="comment-copy">i understand x=3 would not set z=5,but z=x+y followed by x=3 would definitely will make 5.Please correct if my understanding is wrong.</span>
<span class="comment-copy">@d.m: Your understanding is wrong. <code>z = x + y</code> means "Set <code>z</code> equal to the sum of the <i>current</i> values of <code>x</code> and <code>y</code>". It's not a permanent association with either <code>x</code> or <code>y</code>. If you wanted <code>z</code> to be <code>5</code>, you'd need to set <code>z = x + y</code> again, <i>after</i> setting <code>x</code> to <code>3</code>.</span>
<span class="comment-copy">i got your point,Thanks.</span>
