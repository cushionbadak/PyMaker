<div class="post-text" itemprop="text">
<p>What makes parsing a text file in 'r' mode more convenient than parsing it in 'rb' mode?
Especially when the text file in question may contain non-ASCII characters.</p>
</div>
<div class="post-text" itemprop="text">
<p>This depends a little bit on what version of Python you're using. In Python 2, <a href="https://stackoverflow.com/a/9644141/779200">Chris Drappier's answer</a> applies. </p>
<p>In Python 3, its a different (and more consistent) story: in text mode (<code>'r'</code>), Python will parse the file according to the text encoding you give it (or, if you don't give one, a platform-dependent default), and <code>read()</code> will give you a <code>str</code>. In binary (<code>'rb'</code>) mode, Python does not assume that the file contains things that can reasonably be parsed as characters, and <code>read()</code> gives you a <code>bytes</code> object. </p>
<p>Also, in Python 3, the universal newlines (the translating between <code>'\n'</code> and platform-specific newline conventions so you don't have to care about them) is available for text-mode files on <em>any</em> platform, not just Windows.</p>
</div>
<div class="post-text" itemprop="text">
<p>from the <a href="http://docs.python.org/tutorial/inputoutput.html#reading-and-writing-files" rel="noreferrer">documentation</a>:</p>
<blockquote>
<p>On Windows, 'b' appended to the mode opens the file in binary mode, so there are also modes like 'rb', 'wb', and 'r+b'. Python on Windows makes a distinction between text and binary files; the end-of-line characters in text files are automatically altered slightly when data is read or written. This behind-the-scenes modification to file data is fine for ASCII text files, but it’ll corrupt binary data like that in JPEG or EXE files. Be very careful to use binary mode when reading and writing such files. On Unix, it doesn’t hurt to append a 'b' to the mode, so you can use it platform-independently for all binary files.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The difference lies in how the end-of-line (EOL) is handled. Different operating systems use different characters to mark EOL - <code>\n</code> in Unix, <code>\r</code> in Mac versions prior to OS X, <code>\r\n</code> in Windows. When a file is opened in text mode, when the file is read, Python replaces the OS specific end-of-line character read from the file with just <code>\n</code>. And vice versa, i.e. when you try to write <code>\n</code> to a file opened in text mode, it is going to write the OS specific EOL character. You can find what your OS default EOL by checking <code>os.linesep</code>.</p>
<p>When a file is opened in binary mode, no mapping takes place. What you read is what you get. Remember, text mode is the default mode. So if you are handling non-text files (images, video, etc.), make sure you open the file in binary mode, otherwise you’ll end up messing up the file by introducing (or removing) some bytes.</p>
<p>Python also has a universal newline mode. When a file is opened in this mode, Python maps all of the characters <code>\r</code>, <code>\n</code> and <code>\r\n</code> to <code>\n</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>For clarification and to answer <a href="https://stackoverflow.com/questions/9644110/difference-between-parsing-a-text-file-in-r-and-rb-mode#comment68688615_31152300">Agostino's comment/question</a> (I don't have sufficient reputation to comment so bear with me stating this as an answer...):</p>
<p>In Python 2 no line end modification happens, neither in text nor binary mode - as has been stated before, in Python 2 <a href="https://stackoverflow.com/a/9644141/779200">Chris Drappier's answer</a> applies (please note that its link nowadays points to the 3.x Python docs but Chris' quoted text is of course from the <a href="https://docs.python.org/2.7/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">Python 2 input and output tutorial</a>)</p>
<p>So no, it is <em>not</em> true that opening a file in <em>text</em> mode with Python 2 <em>on non-Windows</em> does any line end modification:</p>
<pre><code>0 $ cat data.txt 
line1
line2
line3
0 $ file data.txt 
data.txt: ASCII text, with CRLF line terminators
0 $ python2.7 -c 'f = open("data.txt"); print f.readlines()'
['line1\r\n', 'line2\r\n', 'line3\r\n']
0 $ python2.7 -c 'f = open("data.txt", "r"); print f.readlines()'
['line1\r\n', 'line2\r\n', 'line3\r\n']
0 $ python2.7 -c 'f = open("data.txt", "rb"); print f.readlines()'
</code></pre>
<p>It is however possible to open the file in universal newline mode in Python 2, which does exactly perform said line end mod:</p>
<pre><code>0 $ python2.7 -c 'f = open("data.txt", "rU"); print f.readlines()'
['line1\n', 'line2\n', 'line3\n']
</code></pre>
<p>(the universal newline mode specifier is deprecated as of Python 3.x)</p>
<p>On Python 3, on the other hand, platform-specific line ends do get normalized to '\n' when reading a file in text mode, and '\n' gets converted to the current platform's default line end when writing in text mode (in addition to the bytes&lt;-&gt;unicode&lt;-&gt;bytes decoding/encoding going on in text mode). E.g. reading a Dos/Win CRLF-line-ended file on Linux will normalize the line ends to '\n'.</p>
</div>
<span class="comment-copy">Are you reading a text file or a binary file?</span>
<span class="comment-copy">A text file. But for whatever reason I am given the file as a byte-stream.</span>
<span class="comment-copy">for py3, will reading in text mode automatically try to detect what type of encoding it is? I imagine having to detect encoding is quite a challenge with a bytes object.</span>
<span class="comment-copy">@Keikoku Detecting encoding based on a stream alone, without any metadata, is impossible - think about the various encodings that are ASCII + use the 8th bit for information rather than parity; they all share 255 valid one-byte sequences, but only half of them (the ASCII half) represent the same character in each. Python's default isn't to guess it, its a session-wide default encoding, spelled <code>sys.getdefaultencoding()</code>. On my Py3 install, its UTF-8, but you can't rely on that always being the case.</span>
<span class="comment-copy">So basically trying to read lines in binary mode is much more difficult because I'm not guaranteed that the EOL character is \n or \r\n or something else?</span>
<span class="comment-copy">Is this true for both Python 2 and Python 3?</span>
<span class="comment-copy">Python3's open function has a newline parameter to control that if required   <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#open</a>   "newline controls how universal newlines mode works (it only applies to text mode). It can be None, '', '\n', '\r', and '\r\n'. It works as follows: When reading input from the stream, if newline is None, universal newlines mode is enabled"</span>
