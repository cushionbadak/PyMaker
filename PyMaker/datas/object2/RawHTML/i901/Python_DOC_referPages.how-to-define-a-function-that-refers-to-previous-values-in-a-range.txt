<div class="post-text" itemprop="text">
<p>So I'm trying to define a function which looks like this mathematically: M_n = M_n-1(1+g) –– where n and n-1 are subscripts and g is a constant. </p>
<p>I want to do this within a range of 1 to 100. I already have the values for n=1. The code I have till now looks like this</p>
<pre><code>for num in range(1,100):
    if num &lt;= 1:
        print(M_n)    # since I already have an M_n for n=1
</code></pre>
<p>So, from n=2 onwards, how do I ensure that M_n refers its previous value and does the following operation on it: M_n-1(1+g)?</p>
<p>Any help would be much appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p><code>M_(n-1)</code> is just the most recent calculation, the one produced in the previous iteration of the loop. Store that in a variable and refer to it again the next iteration.</p>
<p>If you don't need the intermediary <code>M_n</code> values, just keep a single updated result:</p>
<pre><code>m = 1  # M_0, so the starting value for the sequence
for n in range(1, 100):
    # update M_n for the current iteration
    m *= 1 + g
</code></pre>
<p>or you can append to a list (at which point the preceding value is always the last value in the list):</p>
<pre><code>m = [1]  # list with M_0, so the starting value for the sequence
for n in range(1, 100):
    # add M_n for the current iteration
    m.append(m[-1] * (1 + g))
</code></pre>
<p>or use <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer"><code>itertools.accumulate()</code></a> to accumulate all values:</p>
<pre><code>from itertools import accumulate, chain

calc_mn = lambda prev, n: prev * (1 + g)
# calculate starting from [1] for M_0
m = accumulate(chain([1], range(1, 100)), calc_mn)
</code></pre>
<p>In the latter case <code>m</code> is an iterator yielding results as you iterate.</p>
</div>
<span class="comment-copy">What is your expected output? A list, or just the last number?</span>
<span class="comment-copy">It will be better if you tell what your M_n looks like</span>
<span class="comment-copy">A better way to write your function is M_n = M_1*((1+g)**(n-1))</span>
<span class="comment-copy">@Jondiedoop my expected output is a list</span>
<span class="comment-copy">@MartinBonner Yes, that's how i wrote it while coding the function. In my question above, I wrote it in its mathematical form rather than its programming form. My apologies for the delayed response.</span>
<span class="comment-copy">My expected output is a list, so I do need the intermediary values. Could you please give more detail on   "M_(n-1) is just the most recent calculation, the one produced in the previous iteration of the loop. Store that in a variable and refer to it again the next iteration"? My apologies if this is basic, I'm a beginner in Python.</span>
<span class="comment-copy">The second method worked! Thank you! One follow-up though. It generated a bunch of lists. How do I keep the last one and delete the rest?</span>
<span class="comment-copy">@M.Jain: that method creates a single list, <code>m</code>, not a bunch of lists.</span>
<span class="comment-copy">@M.Jain: are you perhaps printing <code>m</code> inside the loop? Then you are just writing out the current state of the list each iteration.</span>
<span class="comment-copy">Yes, I was printing m inside the loop. Thank you so much for your help!</span>
