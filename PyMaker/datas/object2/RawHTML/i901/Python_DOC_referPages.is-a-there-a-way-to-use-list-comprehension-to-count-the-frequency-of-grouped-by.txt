<div class="post-text" itemprop="text">
<p>I'm trying to group the elements in a list to condense it and keep it in the same order, but only if it meets certain conditions.  </p>
<p>Say I have a list, and I condense it using this list comprehension: </p>
<pre><code>&gt;&gt; l = [1,1,2,2,3,3,4,4,4,"7","7","7",5,5]
&gt;&gt; [len(list(group)) if not isinstance(key, str) else key for key, group in groupby(l)]
</code></pre>
<p>Output:</p>
<pre><code>&gt;&gt; [2, 2, 2, 3, '7', 2]
</code></pre>
<p>Desired output:</p>
<pre><code>&gt;&gt; [2, 2, 2, 3, '7', '7', '7', 2]
</code></pre>
<p>So I only want the frequency of the element if it is a number, but if it is a string, I want every single occurrence listed instead of only once.</p>
<p>I understand its because the comprehension is using "groupby(l)" instead of "l" to create the new list, but what alternative do I have?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using a generator expression with <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>chain.from_iterable</code></a>:</p>
<pre><code>from itertools import chain, groupby

L = [1,1,2,2,3,3,4,4,4,"7","7","7",5,5]

gen = ([len(list(g))] if not isinstance(k, str) else list(g) for k, g in groupby(L))
res = list(chain.from_iterable(gen))
# [2, 2, 2, 3, '7', '7', '7', 2]
</code></pre>
<p>Cleaner, in my opinion, is defining a function for this:</p>
<pre><code>from itertools import chain, groupby

def func(args):
    key, grp = args
    lst = list(grp)
    if not isinstance(key, str):
        yield len(lst)
    else:
        yield from lst

res = list(chain.from_iterable(map(func, groupby(L))))
# [2, 2, 2, 3, '7', '7', '7', 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a nested list comprehension to iterate over the grouped items individually if the key is a string:</p>
<pre><code>from itertools import groupby
[i for k, g in groupby(l) for i in (list(g) if isinstance(k, str) else (len(list(g)),))]
</code></pre>
<p>This returns:</p>
<pre><code>[2, 2, 2, 3, '7', '7', '7', 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not using list comprehension</p>
<pre><code>from itertools import groupby
l = [1,1,2,2,3,3,4,4,4,"7","7","7",5,5]
out=[]
for key, group in groupby(l):
    if not isinstance(key, str):
        out.append(len(list(group)))
    else:
        out.extend(list(group))
</code></pre>
<p>Output <code>[2, 2, 2, 3, '7', '7', '7', 2]</code></p>
</div>
<span class="comment-copy">I agree with you, second option much cleaner.</span>
<span class="comment-copy">Why <code>out.extend(key*len(list(group)))</code> and not <code>out.extend(list(group))</code>?</span>
<span class="comment-copy">@SuperShoot I knew I was overdoing something. Thanks</span>
