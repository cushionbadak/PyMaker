<div class="post-text" itemprop="text">
<p>I have a bunch of variables that I need to verify whether they are within a determined range.</p>
<p>Below is a quick example to demonstrate what I want to achieve.</p>
<pre><code>a=1
b=3
c=5

if 0 &lt;= {a,b,c} &lt;= 6:
    print("yes")
else:
    print("no")
</code></pre>
<p>I expect it to print yes but it prints no. What I'm I doing wrong?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>What am I doing wrong?</p>
</blockquote>
<p><code>{a,b,c}</code> is a set of three values. It's not a value between 0 and 6.</p>
<p>The condition <code>0 &lt;= {a,b,c} &lt;= 6</code> actually produces an exception in Python 3, because it doesn't make sense to ask if a set is more or less than a number. If your code prints <code>"no"</code>, then you're probably using Python 2.</p>
<p>If you want to check if a condition holds for every value in some sequence, you can use the built-in function <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer"><code>all</code></a>.</p>
<pre><code>if all(0 &lt;= x &lt;= 6 for x in (a,b,c)):
    print("yes")
else:
    print("no")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With Python 3.x, for integers you can use <code>all</code> with <code>range</code>:</p>
<pre><code>if all(x in range(7) for x in (a, b, c)):
    # your logic
</code></pre>
<p>For non-integers or Python 2.x, you can use chained operations:</p>
<pre><code>if all(0 &lt;= x &lt;= 6 for x in (a, b, c)):
    # your logic
</code></pre>
<p>The problem with your logic is Python does not implement vectorised operations with comparison operators.</p>
</div>
<span class="comment-copy">Thanks this solved my problem. I was using Python 2 as you said. Your solution works with both Python 2 and 3. In the future, if I had float numbers would I just cast the variables to int or is there a better solution?</span>
<span class="comment-copy">@Malyk , if you're using Python 2 why you tagged question with <code>python-3.x</code>?</span>
<span class="comment-copy">@Malyk This would work the same with floats. There's no problem using <code>&lt;=</code> to compare ints and floats.</span>
<span class="comment-copy">While this works in this specific example, don't do that. <code>3.14 in range(7)</code> will be <code>False</code> while <code>0 &lt;= 3.14 &lt;= 6</code> continues working as expected.</span>
<span class="comment-copy">@FynnBecker, That's why I stated explicitly <code>range</code> works only for integers.</span>
<span class="comment-copy">@jpp I though about this solution but my range is large between 0 and 100,000 and my doing this for many columns. Isn't this time expensive?</span>
<span class="comment-copy">@Malyk, No, <code>range</code> objects are very efficient, they don't create an in-memory object. Related: <a href="https://stackoverflow.com/q/30081275/9209546">Why is “1000000000000000 in range(1000000000000001)” so fast in Python 3?</a></span>
<span class="comment-copy">@jpp What I'm trying to say is that this is an anti-pattern IMO. Even for integers you shouldn't use <code>range()</code>.</span>
