<div class="post-text" itemprop="text">
<p>I'm learning python and I don't understand something about the 'new style' of formatting. Here is my code:</p>
<pre><code>&gt;&gt;&gt; d={'n':32,'f':5.03,'s':'test string'}
&gt;&gt;&gt; '{0[n]} {0[f]} {0[s]} {1}'.format(d, 'other')
'32 5.03 test string other'
</code></pre>
<p>but when I type in the console:</p>
<pre><code>&gt;&gt;&gt; d[n]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'n' is not defined
&gt;&gt;&gt; d['n']
32
</code></pre>
<p>So why in the formatted string, 0[n] without quotes was able to read from the dictionary the value with the key 'n' (in this case the key is a string) but when I've tried this in the console, it didn't worked.</p>
<p>Also, what would happen if the key is not a string?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p><code>'{0[n]}...'</code> is a string that is interpreted by the method <code>format()</code>. The Python parser does not care about the content of that string, and <code>format</code> can use any notation, regardless of what is valid in Python and what is not.</p>
<p><code>O[n]</code> is not a string, it is a Python expression. When Python parses it, it attempts to resolve <code>n</code> as a variable, which, in your case, does not exist. Your attempt would work if you executed <code>n='n'</code> before the lookup.</p>
</div>
<span class="comment-copy">did you try out what happens with non-string key? not that hard to do... it works f.e. with integers</span>
<span class="comment-copy">I would like to understand what happens under the hood...</span>
<span class="comment-copy">beside that ... that is <i>not</i> new style formatting ... that would the stringinterpolation (f-strings)</span>
<span class="comment-copy">well, in the book that I'm reading, there are presented two way of formatting string and this interpolation is presented as the new style of formatting... as I said, now I'm learning it</span>
<span class="comment-copy">your book is ooooold ;)  you can use<code>print(f"{d['n']} {d['f']} {d['s']} other")</code> and read this <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">pep 498</a> or read up on all methods (f.-string, format, %s) here: <a href="https://docs.python.org/3/tutorial/inputoutput.html#formatted-string-literals" rel="nofollow noreferrer">docs.python.org/3/tutorial/â€¦</a></span>
<span class="comment-copy">and in the expression '{0[n]}...' how is n interpreted? because this is not clear to me...</span>
<span class="comment-copy">It is interpreted by the method <code>format</code> as <code>O["n"]</code>.</span>
