<div class="post-text" itemprop="text">
<p>So I have been getting my feet wet with python, attempting to build a reminder system that ties into the gnome notification ui. The basic idea is you type a command into your shell like <code>remind me to check on dinner in 20 min</code> and then in 20 min you get a desktop notification saying "check on dinner". The way I am doing this is by having a script parse the message and write the time the notification should be sent and the message that should be sent to a log file. </p>
<p>The notifications are getting triggered by a python daemon. I am using this daemon design I found <a href="http://web.archive.org/web/20131017130434/http://www.jejik.com/articles/2007/02/a_simple_unix_linux_daemon_in_python/" rel="nofollow noreferrer">online</a>. The issue I am seeing is when this daemon is running it is taking 100% of my cpu! I stripped down all the code the daemon was doing and it I still have this problem when all the daemon is doing is </p>
<pre><code>while True:
 last_modified = os.path.getmtime(self.logfile)
</code></pre>
<p>I presume that this is a bad approach and I should instead be notifying the daemon when there is a new reminder and then most of the time the reminder daemon should be sleeping. Now this is just an idea but I am having a hard time finding resources on 'how to notify a process' when all I know is the daemons pid. So if I have suspend the daemon with something like <code>time.sleep(time_to_next_notification)</code> would there be a way for me to send a signal to to the daemon letting it know that there was a new reminder? </p>
</div>
<div class="post-text" itemprop="text">
<p>Though I believe you're better off using a server - client type solution that listens on a port, what you are asking is 100% possible using the <a href="https://docs.python.org/3/library/signal.html" rel="nofollow noreferrer"><code>signal</code></a> and <a href="https://docs.python.org/3/library/os.html" rel="nofollow noreferrer"><code>os</code></a> libraries. This approach will not work well with multi threaded programs however as signals are only handled by the parent thread in python. Additionally windows doesn't implement signals in the same way so the options are more limited.</p>
<h3>Signals</h3>
<p>The "client" process can send arbitrary signals using <a href="https://docs.python.org/3/library/os.html#os.kill" rel="nofollow noreferrer"><code>os.kill(pid, signal)</code></a>. You will have to go through the available signals and determine which one you want to use (<code>signal.NSIG</code> may be a good option because it shouldn't stomp on any other default behavior).</p>
<p>The "daemon" process on startup must register a handler for what to do when it receives your chosen signal. The handler is a function you must define that receives the signal itself that was received as well as the current stack frame of execuiton (<code>def handler(signum, frame):</code>). If you're only doing one thing with this handler, and it doesn't need to know what was happening when it was called, you can probably ignore both these parameters. Then you must register the handler with <code>signal.signal</code> ex: <code>signal.signal(signal.NSIG, handler)</code>.</p>
<p>From there you will want to find some appropriate way to wait until the next signal without consuming too many resources. This could be as simple as looping on a <code>os.sleep</code>
command, or you could try to get fancy. I'm not sure 100% how execution resumes on returning from a signal handler, so you may need to concern yourself with recursion depth (ie, make sure you don't recurse every time a signal is handled or you'll only ever be able to handle a limited number of signals before needing to re-start).</p>
<h3>Server</h3>
<p>Having a process listen on a port (generally referred to as a server, but functionally the same as your 'daemon' description) instead of listen for operating system signals has several main advantages.</p>
<ul>
<li>Ports are able to send data where signals are only able to trigger events</li>
<li>Ports are more similar cross-platform</li>
<li>Ports play nice[r] with multi-threading</li>
<li>Ports make it easy to send messages across a network (ie: create reminder from phone and execute on PC)</li>
</ul>
<h3>Waiting for multiple things at once</h3>
<p>In order to address the need to wait for multiple processes at once (listening for input as well as waiting to deliver next notification) you have quite a few options:</p>
<ul>
<li><p>Signals actually may be a good use case as <code>signal.SIGALRM</code> can be used as a conveniently re-settable alarm clock (if you're using UNIX). You would set up the handler in the same way as before, and simply set an alarm for the next notification. After setting the alarm, you could simply resume listening on the port for new tasks. If a new task comes in, setting the alarm again will override the existing one, so the handler would need to retrieve the next queued notification and re-set the alarm once done with the first task.</p></li>
<li><p>Threads could either be used to poll a queue of notification tasks, or an individual thread could be created to wait for each task. This is not a particularly elegant solution, however it would be effective and easy to implement.</p></li>
<li><p>The most elegant solution would likely be to use <code>asyncio</code> co-routines, however I am not as well versed in asyncio, and will admit they're a bit more confusing than threads.</p></li>
</ul>
</div>
<span class="comment-copy">why not check with smaller time intervals the log file or add a file watcher?</span>
<span class="comment-copy">I had not thought of a watcher but after just adding a small wait after each check 5 seconds that seems to have brought the cpu down to 0. Makes sense, I was repeatedly trying to read the file issue a reminder and then check the file again. with no wait in between. I want it to be accurate but I think for the problem I am solving if the reminder daemon only checks once every 5 seconds that is fair. If I cant remember to do something in 5 seconds I got bigger problems.</span>
<span class="comment-copy">gonna leave the question open because I am curious if you can send some signal to a running process. that I can watch for and act on.</span>
<span class="comment-copy">This sounds like a very complicated way to achieve the same result as running a server. I would have a process that takes in input (parse natural language or a more structured input) and send the command to add a notification to a server that's listening on a port for new commands (new jobs to enqueue). you can then just keep a priority queue of the next notification to be fired, and have a thread on the server poll that queue every few seconds or so to tell when to display a new notification.</span>
<span class="comment-copy">@Buster Irealized that my solution did not address the part of your question where you must be listening on a port as well as waiting for the next time interval.. I will update with an appropriate solution.</span>
