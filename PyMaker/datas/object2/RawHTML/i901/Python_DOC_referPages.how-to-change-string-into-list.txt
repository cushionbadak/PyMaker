<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1894269/convert-string-representation-of-list-to-list">Convert string representation of list to list</a>
<span class="question-originals-answer-count">
                    14 answers
                </span>
</li>
</ul>
</div>
<p>Hi I want change a string into an list like:</p>
<pre><code>'[KEYTYPE.FWPROD2KEY, KEYTYPE.FWPROD2KEY, DOWNLOADMODE.FWTOFW, False, DEPLOYMODE.DEPLOY]'
</code></pre>
<p>into</p>
<pre><code>[KEYTYPE.FWPROD2KEY, KEYTYPE.FWPROD2KEY, DOWNLOADMODE.FWTOFW, False, DEPLOYMODE.DEPLOY]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here’s a simple function to deal with this, using split and replace:</p>
<p>Assuming that ‘stringlist’ is your string’d list...</p>
<pre><code>def transformlist(stringlist):
    stringlist = stringlist.split(sep=',')
    stringlist[0] = stringlist[0].replace('[','')
    stringlist[-1] = stringlist[-1].replace(']','')
    return stringlist
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://python-reference.readthedocs.io/en/latest/docs/str/split.html" rel="nofollow noreferrer">.split()</a> then <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow noreferrer">getattr()</a> and <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer">ast.literal_eval()</a></p>
<pre><code>import ast

s = '[KEYTYPE.FWPROD2KEY, KEYTYPE.FWPROD2KEY, DOWNLOADMODE.FWTOFW, False, DEPLOYMODE.DEPLOY]'

def get_val(value):
    values = value.split('.')
    if values[0] in locals: return getattr(getattr(locals, value), values[1])
    if values[0] in globals: return getattr(getattr(globals, value), values[1])
    try: return ast.literal_eval(value)
    except: return value

#slice the string to get rid of the brackets
#and .replace to remove all spaces
data = [get_val(val) for val in s[1:-1].replace(' ', '').split(',')]
</code></pre>
<p>This is probably the safe way of doing this.</p>
</div>
<div class="post-text" itemprop="text">
<p>Probably the most succinct way is use the <code>re</code> module to split and remove symbols from the string, then recombine the strings back into a <code>list</code> data structure:</p>
<pre><code>import re

s = '[KEYTYPE.FWPROD2KEY, KEYTYPE.FWPROD2KEY, DOWNLOADMODE.FWTOFW, False, DEPLOYMODE.DEPLOY]'

l_str = ''.join(re.split(', [ ]', s))
l = eval(l_str)
</code></pre>
<p>or a one-liner:</p>
<pre><code>l = eval(''.join(re.split(', [ ]', s)))
</code></pre>
<p>To <a href="https://stackoverflow.com/questions/54227662/how-to-change-string-into-list#comment95281186_54227662">Arya's points in the comment</a> since I don't have those variables defined I can't test it, but you should then be able to verify the result is of type <code>list</code>:</p>
<pre><code>&gt;&gt;&gt; print(type(l))
&lt;type 'list'&gt;
</code></pre>
</div>
<span class="comment-copy">Is <code>KEYTYPE.FWPROD2KEY</code> supposed to be a string? Some constant looked up elsewhere? The end result you're describing isn't a legal <code>list</code> literal, so you need to be more clear here. A complete <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> would be ideal (not only making it clear what you want, but showing some effort).</span>
<span class="comment-copy">If security is not an issue, you can just do eval(list_string) - eval evaluates a string as code.</span>
<span class="comment-copy"><code>eval</code> evaluates a string as python, but be very careful regarding the source of your strings as it can be a security issue.</span>
<span class="comment-copy">If security is not an issue, you can just do eval(list_string) - eval evaluates a string as code.</span>
<span class="comment-copy">eval will only work here if KEYTYPE.FWPROD2KEY is some kind of defined value, and not a string.</span>
<span class="comment-copy">This evaluates to strings not variables</span>
