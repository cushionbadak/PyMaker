<div class="post-text" itemprop="text">
<p>I am working with a class in python that is part of a bigger program. The class is calling different methods. </p>
<p>If there is an error in one of the method I would like code to keep running after, but after the program is finished, I want to be able to see which methods had potential errors in them. </p>
<p>Below is roughly how I am structuring it at the moment, and this solution doesn't scale very well with more methods. Is there a better way to provide feedback (after the  code has been fully run) as to which of the method had a potential error?</p>
<pre><code>class Class():

    def __init__(self):

        try: 
             self.method_1()
        except:
             self.error_method1 = "Yes"
             break

        try: 
             self.method_2()
        except: 
             self.error_method2 = "Yes"
             break

        try: 
             self.method_3()
        except: 
             self.error_method3 = "Yes"
             break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Although you could use <a href="https://docs.python.org/3/library/sys.html#sys.exc_info" rel="nofollow noreferrer"><code>sys.exc_info()</code></a> to retrieve information about an <code>Exception</code> when one occurs as I mentioned in a comment, doing so may not be required since Python's standard <code>try</code>/<code>expect</code> mechanism seems adequate.</p>
<p>Below is a runnable example showing how to do so in order to provide "feedback" later about the execution of several methods of a <code>class</code>. This approach uses a decorator function, so should scale well since the same decorator can be applied to as many of the class' methods as desired.</p>
<pre><code>from contextlib import contextmanager
from functools import wraps
import sys
from textwrap import indent


def provide_feedback(method):
    """ Decorator to trap exceptions and add messages to feedback. """

    @wraps(method)
    def wrapped_method(self, *args, **kwargs):
        try:
            return method(self, *args, **kwargs)
        except Exception as exc:
            self._feedback.append(
                '{!r} exception occurred in {}()'.format(exc, method.__qualname__))

    return wrapped_method


class Class():

    def __init__(self):
        with self.feedback():
            self.method_1()
            self.method_2()
            self.method_3()

    @contextmanager
    def feedback(self):
        self._feedback = []
        try:
            yield
        finally:
            # Example of what could be done with any exception messages.
            # They could instead be appended to some higher-level container.
            if self._feedback:
                print('Feedback:')
                print(indent('\n'.join(self._feedback), '  '))

    @provide_feedback
    def method_1(self):
        raise RuntimeError('bogus')

    @provide_feedback
    def method_2(self):
        pass

    @provide_feedback
    def method_3(self):
        raise StopIteration('Not enough foobar to go around')


inst = Class()
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>Feedback:
  RuntimeError('bogus') exception occurred in Class.method_1()
  StopIteration('Not enough foobar to go around') exception occurred in Class.method_3()
</code></pre>
</div>
<span class="comment-copy">You don't need to manually do this, the stack trace in the exception would tell you</span>
<span class="comment-copy">Let me clarify. This one class is part of a bigger code. The code continue working if there is an error in one of the methods. It should just provide direct feedback so I can fix it later.</span>
<span class="comment-copy">When an exception occurs, you can call <a href="https://docs.python.org/3/library/sys.html#sys.exc_info" rel="nofollow noreferrer"><code>sys.exc_info()</code></a> in the <code>except:</code> clause to get information about what happened. At that point, you can do whatever you want with it.</span>
<span class="comment-copy">I don't think that is his issue.  He is wanting to use the same message for all method calls of his class?</span>
<span class="comment-copy">So you're trying to invent your own application error logger?</span>
<span class="comment-copy">MathiasRa: Is this along the lines of what you desired?</span>
