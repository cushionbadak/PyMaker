<div class="post-text" itemprop="text">
<p>Good morning guys :)
i am currently making a Trainer for vocabulary.
I am having a dictionary, where all the vocabulary and their translations are stored in. Now i have an query which tells  me what vocabulary i should translate.</p>
<p>If i now enter the translation correctly the probability of the word to get queried should get less. How can i do that? I wondered, if  this is possible by making another list which should get called up less than the first one and moving the vocabulary into that list, when answering the translation right.</p>
<p>Here is my code:</p>
<pre><code>import random

vokabeln = {
    "Haus": "house",
    "Garten": "garden",
    "Freund": "friend",
    "Freundin": "friend"
}

versuche = int(input("Anzahl der Versuche: "))
i=0

while i &lt; versuche:
    x = random.choice(list(vokabeln))
    y = vokabeln.get(x)

    i+=1
    versuch = input("Übersetze " + x)
    if(versuch == y):
        print("Korrekt!")
    else:
        print("Falsch, richtig war " + y)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could do the following. Each time the user gets the translation right, add that word to a separate list. The next time a word is randomly chosen and it's in the new list, allow it to be used with a certain probability, like 50%; otherwise, choose another word. You'll need to put this logic inside of its own loop in case another "correct" word is randomly chosen.</p>
<pre><code>import random

vokabeln = {
    "Haus": "house",
    "Garten": "garden",
    "Freund": "friend",
    "Freundin": "friend"
}

korrekt = []

versuche = int(input("Anzahl der Versuche: "))
i=0

while i &lt; versuche:
    ok = False
    while not ok:
        x = random.choice(list(vokabeln))
        y = vokabeln.get(x)
        if x in korrekt:
            if random.random() &lt; 0.5:
                ok = True
        else:
            ok = True

    i+=1
    versuch = input("Übersetze " + x)
    if(versuch == y):
        korrekt.append(x)
        print("Korrekt!")
    else:
        print("Falsch, richtig war " + y)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Quick idea.</p>
<pre><code>words = {
    ("Haus", "house", 1),
    ("Garten", "garden", 0.5),
    ("Freund", "friend", 1),
    ("Freundin", "friend", 1)
}

def get_word():
    total_probability = sum(map(words, lambda x: x[2]))
    selected = random.random() * total_probability
    current_probability = 0
    for word, translation, probability in words:
        current_probability += probability
        if select &lt; current_probability:
            return word, translation
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/random.html#random.choices" rel="nofollow noreferrer"><code>random.choices</code></a> which allows for specifying sample weights. Then I'd also store the vocabulary as a list in order to preserve ordering with respect to the weights. How the weights get updated on right or wrong answers is up to you but you could use an inverse scaling for example:</p>
<pre><code>vocab = [
    ("Haus", "house"),
    ("Garten", "garden"),
    ("Freund", "friend"),
    ("Freundin", "friend")
]
weights = [1] * len(vocab)

while ...:
    index, (x, y) = random.choices(enumerate(vocab), weights)

    attempt = input("Translate " + x)

    if(attempt == y):
        weights[index] = 1 / (1/weights[index] + 1)
    else:
        weights[index] = 1 / max(1/weights[index] - 1, 1)
</code></pre>
</div>
<span class="comment-copy">please translate the code into english</span>
<span class="comment-copy">Also line 18     versuch = input("Übersetze " + x) wont work</span>
<span class="comment-copy">That you want is a weighted choice where the weights are inverse to the correct answer counts.</span>
<span class="comment-copy">because you are trying to add "Übersetze " + x. x is an int. you get this error UnicodeEncodeError: 'ascii' codec can't encode character '\xdc' in position 0: ordinal not in range(128)</span>
<span class="comment-copy">@TalhaIsrar x is not an int, it's a string. The error you're getting is related to something else, perhaps your console doesn't support Unicode characters (the "Ü").</span>
<span class="comment-copy">Yeah but how can i add this probability? And thanks for your answer. :)</span>
<span class="comment-copy">@JohnKohlmeier I've added the code I described. A quick test suggests that the probability of a correct word to be reused should actually be less than 50%, perhaps 10%. It depends on your preferences, of course.</span>
