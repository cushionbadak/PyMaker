<div class="post-text" itemprop="text">
<p>In python, it is possible to define a function taking an arbitrary number of positional arguments like so:</p>
<pre><code>def f(*args):
    print(args)
f(1, 2, 3)  # (1, 2, 3)
</code></pre>
<p>When called as <code>f(a, b, c)</code>, all positional arguments are put together into a <em>tuple</em>.
This behavior is described in python <a href="https://docs.python.org/2/tutorial/controlflow.html#arbitrary-argument-lists" rel="nofollow noreferrer">2</a> and <a href="https://docs.python.org/3/tutorial/controlflow.html#arbitrary-argument-lists" rel="nofollow noreferrer">3</a> documentation, but I haven't found a PEP to it.</p>
<p><a href="https://www.python.org/dev/peps/pep-3132/" rel="nofollow noreferrer">PEP 3132</a>, introducing extended iterable unpacking (<code>first, *middle, last = seqence</code>) states under "Acceptance" that</p>
<blockquote>
<p>Make the starred target a tuple instead of a list. This would be consistent with a function's *args, but make further processing of the result harder.</p>
</blockquote>
<p>was discussed. If I write a wrapper, I may also want to further process arguments like so:</p>
<pre><code>def force_type(position, type):
    def wrapper(f):
        def new(*args, **kwargs):
            args = list(args)  # Why?
            args[position] = type(args[position])
            return f(*args, **kwargs)
        return new
    return wrapper

@force_type(1, int)
def func(a, b, c):
    assert isinstance(b, int)
</code></pre>
<p>This further processing is made harder by the fact <code>args</code> is a <code>tuple</code>. Were wrappers just not used at the early stages this was introduced? If so, why wasn't this changed in python3 with other compatibility breaking changes (PEP3132 favours ease of processing over consistency (which seems at least similar to compatibility in a compatibility- breaking change).</p>
<p><strong>Why are a functions <code>*args</code> (still) a <code>tuple</code> even though a <code>list</code> allows easier further processing?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know if this was the thinking behind it, but that ease of processing (even though instantiate a <code>list</code> with the <code>tuple</code> data is not that hard) would come at possible confusing behavior.</p>
<pre><code>def fce1(*args):
   fce2(args)
   # some more code using args

def fce2(args):
   args.insert(0, 'other_val')

fce1(1, 2, 3)
</code></pre>
<p>Could surprise people writing <code>fce1</code> code not realizing that <code>args</code> they deal with later on are not what the function was called with.</p>
<p>I would also presume immutable types are easier to deal with internally and come with less overhead.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why not? The thing about tuple is, that you can not change it after creation. This allows to increase speed of executing your script, and you do not really need a list for your function arguments, because you do not really need to modify the given arguments of a function.
Would you need append or remove methods for your arguments? At most cases it would be no. Do you want your program run faster. That would be yes. And that's the way the most people would prefer to have things. The *args thing returns tuple because of that, and if you really need a list, you can transform it with one line of code!</p>
<pre><code>args = list(args)
</code></pre>
<p>So in general:
It speeds up your program execution. You do not it to change the arguments. It is not that hard to change it's type.</p>
</div>
<span class="comment-copy">You don't often need mutable <code>args</code>. Tuples are faster to create than lists and cosume less memory.</span>
<span class="comment-copy">@timgeb So it's just a performance gain that outweighs because <code>args</code> processing is lot less than that of assignments?</span>
<span class="comment-copy">I don't know, but that's my best guess.</span>
