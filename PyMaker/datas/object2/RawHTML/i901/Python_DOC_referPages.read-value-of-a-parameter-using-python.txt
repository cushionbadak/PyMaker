<div class="post-text" itemprop="text">
<p>I am using ConfigParser to read the runtime configuration of a script.</p>
<p>I would like to have the flexibility of not providing a section name (there are scripts which are simple enough; they don't need a 'section'). ConfigParser will throw the <code>NoSectionError</code> exception, and will not accept the file.</p>
<p>How can I make ConfigParser simply retrieve the <code>(key, value)</code> tuples of a config file without section names? For instance:</p>
<pre><code>key1=val1
key2:val2
</code></pre>
<p>I would rather not write to the config file.</p>
</div>
<div class="post-text" itemprop="text">
<p>Alex Martelli <a href="https://stackoverflow.com/questions/2819696/module-to-use-when-parsing-properties-file-in-python/2819788#2819788">provided a solution</a> for using <code>ConfigParser</code> to parse <code>.properties</code> files (which are apparently section-less config files).</p>
<p><a href="https://stackoverflow.com/a/25493615/3462319">His solution</a> is a file-like wrapper that will automagically insert a dummy section heading to satisfy <code>ConfigParser</code>'s requirements.</p>
</div>
<div class="post-text" itemprop="text">
<p>Enlightened by <a href="https://stackoverflow.com/a/7472878">this answer by jterrace</a>, I come up with this solution:</p>
<ol>
<li>Read entire file into a string</li>
<li>Prefix with a default section name</li>
<li>Use StringIO to mimic a file-like object</li>
</ol>
<pre><code>ini_str = '[root]\n' + open(ini_path, 'r').read()
ini_fp = StringIO.StringIO(ini_str)
config = ConfigParser.RawConfigParser()
config.readfp(ini_fp)
</code></pre>
<p><br/>
<strong>EDIT</strong> for future googlers: As of Python 3.4+ <code>readfp</code> is deprecated, and <code>StringIO</code> is not needed anymore. Instead we can use <code>read_string</code> directly:</p>
<pre><code>with open('config_file') as f:
    file_content = '[dummy_section]\n' + f.read()

config_parser = RawConfigParser()
config_parser.read_string(file_content)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do this with a single additional line of code. (Two lines if you count <code>import</code> statements.)</p>
<p>In python 3, use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain()</code></a> to simulate a section header for <a href="https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.read_file" rel="nofollow noreferrer"><code>read_file()</code></a>.</p>
<pre><code>from configparser import ConfigParser
from itertools import chain

parser = ConfigParser()
with open("foo.conf") as lines:
    lines = chain(("[top]",), lines)  # This line does the trick.
    parser.read_file(lines)
</code></pre>
<p>In python 2, prepend a section header line to the data you read from your config file, wrap the result in a <a href="https://docs.python.org/2/library/stringio.html" rel="nofollow noreferrer"><code>StringIO</code></a> object, and pass it to <a href="https://docs.python.org/2/library/configparser.html#ConfigParser.RawConfigParser.readfp" rel="nofollow noreferrer"><code>readfp()</code></a>.</p>
<pre><code>from ConfigParser import ConfigParser
from StringIO import StringIO

parser = ConfigParser()
with open("foo.conf") as stream:
    stream = StringIO("[top]\n" + stream.read())  # This line does the trick.
    parser.readfp(stream)
</code></pre>
<p>With either approach, your config settings will be available in <code>parser.items('top')</code>.</p>
<p>You could use <code>StringIO</code> in python 3 as well, by importing it from its new home in the <code>io</code> package, but note that <code>readfp()</code> is deprecated in python 3 and should therefore be avoided.</p>
<hr/>
<p>If you don't mind an extra dependency, you might consider using a <a href="https://github.com/toml-lang/toml#readme" rel="nofollow noreferrer">TOML</a> parser instead of ConfigParser.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the ConfigObj library to do that simply : <a href="http://www.voidspace.org.uk/python/configobj.html" rel="noreferrer">http://www.voidspace.org.uk/python/configobj.html</a></p>
<p>Updated: Find latest code <a href="https://pypi.python.org/pypi/configobj/" rel="noreferrer">here</a>.</p>
<p>If you are under Debian/Ubuntu, you can install this module using your package manager :</p>
<pre><code>apt-get install python-configobj
</code></pre>
<p>An example of use:</p>
<pre><code>from configobj import ConfigObj

config = ConfigObj('myConfigFile.ini')
config.get('key1') # You will get val1
config.get('key2') # You will get val2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The easiest way to do this is to use python's CSV parser, in my opinion.  Here's a read/write function demonstrating this approach as well as a test driver. This should work provided the values are not allowed to be multi-line.  :)</p>
<pre><code>import csv
import operator

def read_properties(filename):
    """ Reads a given properties file with each line of the format key=value.  Returns a dictionary containing the pairs.

    Keyword arguments:
        filename -- the name of the file to be read
    """
    result={ }
    with open(filename, "rb") as csvfile:
        reader = csv.reader(csvfile, delimiter='=', escapechar='\\', quoting=csv.QUOTE_NONE)
        for row in reader:
            if len(row) != 2:
                raise csv.Error("Too many fields on row with contents: "+str(row))
            result[row[0]] = row[1] 
    return result

def write_properties(filename,dictionary):
    """ Writes the provided dictionary in key-sorted order to a properties file with each line of the format key=value

    Keyword arguments:
        filename -- the name of the file to be written
        dictionary -- a dictionary containing the key/value pairs.
    """
    with open(filename, "wb") as csvfile:
        writer = csv.writer(csvfile, delimiter='=', escapechar='\\', quoting=csv.QUOTE_NONE)
        for key, value in sorted(dictionary.items(), key=operator.itemgetter(0)):
                writer.writerow([ key, value])

def main():
    data={
        "Hello": "5+5=10",
        "World": "Snausage",
        "Awesome": "Possum"
    }

    filename="test.properties"
    write_properties(filename,data)
    newdata=read_properties(filename)

    print "Read in: "
    print newdata
    print

    contents=""
    with open(filename, 'rb') as propfile:
        contents=propfile.read()
    print "File contents:"
    print contents

    print ["Failure!", "Success!"][data == newdata]
    return

if __name__ == '__main__': 
     main() 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Having ran into this problem myself, I wrote a complete wrapper to ConfigParser (the version in Python 2) that can read and write files without sections transparently, based on Alex Martelli's approach linked on the accepted answer. It should be a drop-in replacement to any usage of ConfigParser. Posting it in case anyone in need of that finds this page. </p>
<pre><code>import ConfigParser
import StringIO

class SectionlessConfigParser(ConfigParser.RawConfigParser):
    """
    Extends ConfigParser to allow files without sections.

    This is done by wrapping read files and prepending them with a placeholder
    section, which defaults to '__config__'
    """

    def __init__(self, *args, **kwargs):
        default_section = kwargs.pop('default_section', None)
        ConfigParser.RawConfigParser.__init__(self, *args, **kwargs)

        self._default_section = None
        self.set_default_section(default_section or '__config__')

    def get_default_section(self):
        return self._default_section

    def set_default_section(self, section):
        self.add_section(section)

        # move all values from the previous default section to the new one
        try:
            default_section_items = self.items(self._default_section)
            self.remove_section(self._default_section)
        except ConfigParser.NoSectionError:
            pass
        else:
            for (key, value) in default_section_items:
                self.set(section, key, value)

        self._default_section = section

    def read(self, filenames):
        if isinstance(filenames, basestring):
            filenames = [filenames]

        read_ok = []
        for filename in filenames:
            try:
                with open(filename) as fp:
                    self.readfp(fp)
            except IOError:
                continue
            else:
                read_ok.append(filename)

        return read_ok

    def readfp(self, fp, *args, **kwargs):
        stream = StringIO()

        try:
            stream.name = fp.name
        except AttributeError:
            pass

        stream.write('[' + self._default_section + ']\n')
        stream.write(fp.read())
        stream.seek(0, 0)

        return ConfigParser.RawConfigParser.readfp(self, stream, *args,
                                                   **kwargs)

    def write(self, fp):
        # Write the items from the default section manually and then remove them
        # from the data. They'll be re-added later.
        try:
            default_section_items = self.items(self._default_section)
            self.remove_section(self._default_section)

            for (key, value) in default_section_items:
                fp.write("{0} = {1}\n".format(key, value))

            fp.write("\n")
        except ConfigParser.NoSectionError:
            pass

        ConfigParser.RawConfigParser.write(self, fp)

        self.add_section(self._default_section)
        for (key, value) in default_section_items:
            self.set(self._default_section, key, value)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Blueicefield's answer mentioned configobj, but the original lib only supports Python 2. It now has a Python 3+ compatible port: </p>
<p><a href="https://github.com/DiffSK/configobj" rel="nofollow">https://github.com/DiffSK/configobj</a></p>
<p>APIs haven't changed, see it's <a href="http://configobj.readthedocs.org/en/latest/configobj.html" rel="nofollow">doc</a>.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/2819696/parsing-properties-file-in-python">parsing .properties file in Python</a></span>
<span class="comment-copy">+1 because that is exactly what I was about to suggest.  Why add all the complexity when all you have to do is just add a section!</span>
<span class="comment-copy">@jathanism: there are cases where you want to work with existing config/properties files, which are read by existing Java code and you don't know the risk of modifying those headers</span>
<span class="comment-copy">greatly inspired!</span>
<span class="comment-copy"><code>ConfigParser</code> should really be improved...</span>
<span class="comment-copy">This also works wonders to parse a simple Makefile (with only aliases)! <a href="https://github.com/tqdm/tqdm/commit/7405a59ff2f1986922393c2bec77fced9932b28e#diff-2eeaed663bd0d25b7e608891384b7298R15" rel="nofollow noreferrer">Here is a full script to substitute aliases by their full commands in Python</a>, inspired by this answer.</span>
<span class="comment-copy">+1 Clever use of the <code>csv</code> module to solve common <code>ConfigParser</code> complaint. Easily generalized more and made to be <a href="http://stackoverflow.com/a/17796539/355230">both Python 2 &amp; 3 compatible</a>.</span>
