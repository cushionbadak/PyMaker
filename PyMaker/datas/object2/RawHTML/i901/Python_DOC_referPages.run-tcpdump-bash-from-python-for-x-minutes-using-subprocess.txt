<div class="post-text" itemprop="text">
<p>I would like to run tcpdump from python for x amount of minutes specified from the user. At the moment my function looks like this:</p>
<pre><code>def tcpdump():
    run_time = int(input("\nHow many minutes would you like the bash to run?\n"))

    time_to_end = time.time() + 60 * run_time

    print("\ntcpdump running...\n")

    while time.time() &lt; time_to_end:
        p = subprocess.Popen("./tcpdump.bash", shell=True) 
    p.terminate()
</code></pre>
<p>However this seems to repeatedly launch tcpdump as I get the following output:</p>
<pre><code>tcpdump: (all BPF devices are busy)
tcpdump: (all BPF devices are busy)
tcpdump: (all BPF devices are busy)
</code></pre>
<p>I am not sure how to solve this, and additionally I am not sure how to kill the process, as p.kill() doesnt seem to work.</p>
<p>----------------- EDITED ---------------------</p>
<p>I have now tried the following, however I am not sure if my subprocess gets killed correctly or if it will run infinitely at the background:</p>
<pre><code>def tcpdump:
    run_time = int(input("\nHow many minutes would you like to collect benign data?\n"))

    time_to_end = time.time() + 60 * run_time

    print("\ntcpdump running...\n")

    p = subprocess.Popen(['tcpdump', '-i', 'en0', '-w', 'test.pcap']))
    while time.time() &lt; time_to_end:
          p.communicate()
    p.kill()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have the timing sorted but the problem is that everytime that while loop runs it's going to <code>popen</code> again and spawn a new process. </p>
<p>Rather do it like this: </p>
<pre><code>import threading
import subprocess

def tcpdump():
    print("\ntcpdump running...\n")
    p = subprocess.Popen("./tcpdump.bash", shell=True)
    p.wait()

run_time = int(input("\nHow many minutes would you like the bash to run?\n"))
t = threading.Thread(target=tcpdump, daemon=True)
t.start()
t.join(run_time * 60)
</code></pre>
<p>The tcpdump function now just opens a process and waits for it to close. The main code uses the Threading.join function with a time out specified. Once the timeout has elasped the <code>child</code> thread is killed and control is returned back to the parent.</p>
</div>
<span class="comment-copy">Read about <a href="https://docs.python.org/3/library/threading.html#threading.Timer" rel="nofollow noreferrer">threading.Timer</a> to <b>run a function after interval seconds</b> to <code>kill</code> the <code>subprocess</code>.</span>
<span class="comment-copy">You can just use bash's timeout builtin <code>timeout 300 tcpdump ...</code></span>
<span class="comment-copy">Bash doesn't do anything useful here at all. See <a href="https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess" title="actual meaning of shell true in subprocess">stackoverflow.com/questions/3172470/â€¦</a></span>
<span class="comment-copy">I tried calling tcpdump directly from python as you @trippleee are suggesting but I had many errors.</span>
