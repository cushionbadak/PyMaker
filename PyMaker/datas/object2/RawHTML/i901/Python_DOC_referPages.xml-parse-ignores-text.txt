<div class="post-text" itemprop="text">
<p>I have the following issue, trying to get information from a bunch of xml files in python. I'm not doing anything special, eg:</p>
<pre><code>import xml.etree.ElementTree as ET

root = ET.parse(r'C:\Documents\XMLfolder\file.xml').getroot()
info = root.find('foo').find('bar').find('info').text
</code></pre>
<p>This works with most of the info I have - but one section of the xml is in the following format:</p>
<pre><code>&lt;bar&gt;
&lt;info id="1"&gt;&lt;label&gt;1&lt;/label&gt;SampleTextHere&lt;/info&gt;
&lt;/bar&gt;
</code></pre>
<p>The above code gives <code>None</code> - I can locate the <code>info</code> element and the <code>label</code> element, though. I just can't find the text. If I edit the file to remove <code>&lt;label&gt; 1 &lt;/label&gt;</code> then the above code returns the text I need.</p>
<p>Is there something very basic that I don't know which would allow me to access the text without modifying all my xml files to remove the label? (It is relevant). </p>
<p>Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.text" rel="nofollow noreferrer">[Python 3]: xml.etree.ElementTree.Element.<strong>text</strong></a> (<strong>emphasis</strong> is mine):</p>
<blockquote>
<p>These attributes can be used to hold additional data associated with the element. <strong>Their values are usually strings but may be any application-specific object</strong>. If the element is created from an XML file, the <em>text</em> attribute holds either the text between the element’s start tag and its first child or end tag, or <code>None</code>, and the <em>tail</em> attribute holds either the text between the element’s end tag and the next tag, or <code>None</code>.</p>
<p>...</p>
<p><strong>To collect the inner text of an element, see <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.itertext" rel="nofollow noreferrer">itertext()</a></strong>, for example <code>"".join(element.itertext())</code>.</p>
</blockquote>
<p>I created 3 files, based on your specification:</p>
<ul>
<li><p><em>file0.xml</em>:</p>
<pre class="lang-xml prettyprint-override"><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;root&gt;
  &lt;foo&gt;
    &lt;bar&gt;
      &lt;info id="1"&gt;SampleTextHere 0&lt;/info&gt;
    &lt;/bar&gt;
  &lt;/foo&gt;
&lt;/root&gt;
</code></pre></li>
<li><p><em>file1.xml</em>:</p>
<pre class="lang-xml prettyprint-override"><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;root&gt;
  &lt;foo&gt;
    &lt;bar&gt;
      &lt;info id="1"&gt;&lt;label&gt;LabelText&lt;/label&gt;SampleTextHere 1&lt;/info&gt;
    &lt;/bar&gt;
  &lt;/foo&gt;
&lt;/root&gt;
</code></pre></li>
<li><p><em>file2.xml</em>:</p>
<pre class="lang-xml prettyprint-override"><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;root&gt;
  &lt;foo&gt;
    &lt;bar&gt;
      &lt;info id="1"&gt;&lt;/info&gt;
    &lt;/bar&gt;
  &lt;/foo&gt;
&lt;/root&gt;
</code></pre></li>
</ul>
<p>and some sample code.</p>
<p><em>code.py</em>:</p>
<pre class="lang-py prettyprint-override"><code>#!/usr/bin/env python3

import sys
import xml.etree.ElementTree as ET


def main():
    file_names = [
        "file0.xml",
        "file1.xml",
        "file2.xml",
    ]

    for file_name in file_names:
        root = ET.parse(file_name).getroot()
        info_node = root.find("foo").find("bar").find("info")
        text = info_node.text
        tail = info_node.tail
        iter_text = "".join(info_node.itertext())
        info_node_text = text or ""
        if not info_node_text:
            for info_node_text in info_node.itertext():
                pass
        print("\n{:s}\n      Text (for debugging purposes): [{:}]\n      Tail (for debugging purposes): [{:}]\n      Iter text (for debugging purposes): [{:s}]\n  Value: [{:s}]".format(
            file_name, text, tail, iter_text, info_node_text))


if __name__ == "__main__":
    print("Python {:s} on {:s}\n".format(sys.version, sys.platform))
    main() 
</code></pre>
<p>The algorithm is straightforward: if the node doesn't have the <em>text</em> attribute set, iterate over its <code>itertext()</code> and pick the last value, as the <em>label</em> (or any other) sub node comes before the text.</p>
<p><strong>Output</strong>:</p>
<blockquote>
<pre class="lang-py prettyprint-override"><code>(py_064_03.06.08_test0) e:\Work\Dev\StackOverflow\q054197111&gt;"e:\Work\Dev\VEnvs\py_064_03.06.08_test0\Scripts\python.exe" code.py
Python 3.6.8 (tags/v3.6.8:3c6b436a57, Dec 24 2018, 00:16:47) [MSC v.1916 64 bit (AMD64)] on win32


file0.xml
      Text (for debugging purposes): [SampleTextHere 0]
      Tail (for debugging purposes): [
    ]
      Iter text (for debugging purposes): [SampleTextHere 0]
  Value: [SampleTextHere 0]

file1.xml
      Text (for debugging purposes): [None]
      Tail (for debugging purposes): [
    ]
      Iter text (for debugging purposes): [LabelTextSampleTextHere 1]
  Value: [SampleTextHere 1]

file2.xml
      Text (for debugging purposes): [None]
      Tail (for debugging purposes): [
    ]
      Iter text (for debugging purposes): []
  Value: []
</code></pre>
</blockquote>
</div>
<span class="comment-copy">Very similar to <a href="https://stackoverflow.com/q/9673906/407651">stackoverflow.com/q/9673906/407651</a>. "SampleTextHere" is the <code>tail</code> of the <code>&lt;label&gt;</code> element. See <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.tail" rel="nofollow noreferrer">docs.python.org/3/library/…</a>.</span>
