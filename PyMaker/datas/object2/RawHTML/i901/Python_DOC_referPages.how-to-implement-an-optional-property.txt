<div class="post-text" itemprop="text">
<p>I want to set up a property only if requested explicitly. As this property will involve extra computation time, I want it initialized with <code>None</code> and only initializing if a calling function requests to do so. </p>
<p>For example:</p>
<pre><code>class File:
    def __init__(self, filename, content):
         self.filename = filename
         self.content = content
         self.hash = None or self.get_hash()

    def get_hash():
          '''do some hashing there'''
</code></pre>
<p>I have seen some property of that kind but don't know how this could work trigger the function by calling:</p>
<pre><code>my_file = File('text.txt', 'Hello there')
my_file.hash 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>By providing <code>.hash</code> with a property getter, you can create exactly the behaviour you want. The actual value of <code>hash</code> will be 'hidden' as <code>._hash</code> which is a common practice in Python:</p>
<pre><code>class File:
    def __init__(self, filename, content):
         self.filename = filename
         self.content = content
         self._hash = None

    @property
    def hash(self):
          if self._hash is None:
              # do some hashing here
              self._hash = 'some hash'
          return self._hash


f = File('myfile', 'some content')
print(f.hash)
</code></pre>
<p>Of course, you could also have other conditions when you need the hash to be recalculated, it doesn't have to be <code>if self._hash is None</code>. And you could also just reset the hash when it needs to be recalculated. For example, perhaps your hash changes when <code>.content</code> changes:</p>
<pre><code>class File:
    def __init__(self, filename, content):
         self.filename = filename
         self._content = content
         self._hash = None

    @property
    def hash(self):
          if self._hash is None:
              # do some hashing here
              self._hash = f'some hash based on {self._content}'
          return self._hash


    @property
    def content(self):
          return self.content

    @content.setter
    def content(self, value):
          self._content = value
          self._hash = None


f = File('myfile', 'some content')
print(f.hash)
f.content = 'changed content'
print(f.hash)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try passing it as a parameter while creating the Object.</p>
<p>Check if the below code is suitable for you:</p>
<pre><code>class File:
    def __init__(self, filename, content, request_hash=False):
         self.filename = filename
         self.content = content
         self.hash = self.get_hash() if request_hash else None

    def get_hash():
          '''do some hashing there'''
</code></pre>
<hr/>
<pre><code>my_file = File('text.txt', 'Hello there') #No Hash is generated
my_file = File('text.txt', 'Hello there', True) #Hash will be generated
</code></pre>
</div>
<span class="comment-copy">Check out the <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer">property decorator</a> and Hettinger's <a href="https://youtu.be/wf-BqAjZb8M" rel="nofollow noreferrer">Beyond Pep8 talk</a> for how to use it. He goes over exactly this problem.</span>
<span class="comment-copy">Thank you, i will definitely check it, just read Fluent Python but i don't get everything, the metaprogramming part was too much for somebody who did too few POO with python, i will check the talk later. =)</span>
<span class="comment-copy">Just quick question, the @property need to be bind to a function with the same name as the attribute right?</span>
<span class="comment-copy">Raymond Hettinger also has a very good explanation of Properties in his <i>Descriptor HowTo Guide</i> <a href="https://docs.python.org/3.7/howto/descriptor.html#properties" rel="nofollow noreferrer">docs.python.org/3.7/howto/descriptor.html#properties</a></span>
<span class="comment-copy">Yes this feel pretty good, thanks for your answer, i will definitely mark it as accepted</span>
<span class="comment-copy">Thank you so much, you made it pretty explicit. I don't need the second part right know, but that's feeling a good-to-know thing</span>
<span class="comment-copy">You could also use a ternary:  <code>self.hash = self.get_hash() if request_hash else None</code></span>
<span class="comment-copy">@Alexander, Yes. Ternary Operator can also be used. It looks better. I have edited my answer. Thanks!</span>
