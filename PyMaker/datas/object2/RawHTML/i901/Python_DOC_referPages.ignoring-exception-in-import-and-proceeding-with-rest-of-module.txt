<div class="post-text" itemprop="text">
<p>The python package that I am developing has a dependency (pyfluidsynth) that breaks on my system by throwing an AttributeError on import. Pyfluidsynth is a wrapper around the C library "fluidsynth", and it the reason that it breaks is that it is trying to wrap a couple C functions that don't exist in the library, at least for the version of fluidsynth on my system. </p>
<p>These are the offending lines of code:</p>
<pre><code>fluid_synth_set_reverb_full = cfunc('fluid_synth_set_reverb_full', c_int,
                                    ('synth', c_void_p, 1),
                                    ('set', c_int, 1),
                                    ('roomsize', c_double, 1),
                                    ('damping', c_double, 1),
                                    ('width', c_double, 1),
                                    ('level', c_double, 1))

fluid_synth_set_chorus_full = cfunc('fluid_synth_set_chorus_full', c_int,
                                    ('synth', c_void_p, 1),
                                    ('set', c_int, 1),
                                    ('nr', c_int, 1),
                                    ('level', c_double, 1),
                                    ('speed', c_double, 1),
                                    ('depth_ms', c_double, 1),
                                    ('type', c_int, 1))
</code></pre>
<p>... and the error I get is:</p>
<p>AttributeError: /lib64/libfluidsynth.so.1: undefined symbol: fluid_synth_set_reverb_full</p>
<p>It's easy enough to fix: I don't use that functionality, so I can just surround the two statements with a try/except in my copy of the fluidsynth library. But in distributing my own package, I can't rely on the version of pyfluidsynth in pypi, since it will break on at least some people's machines.</p>
<p>This issue has been filed, but the developer of pyfluidsynth hasn't fixed it yet. In the meantime, is there a way that I can import pyfluidsynth such that it catches the exceptions, ignores them, and proceeds to import the rest of the module?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can fork pyfluidsynth and depend on that instead until it gets fixed. This is probably a better option than monkeypatching. Pip can install packages hosted on GitHub if you don't want to put it up on PyPI. Use a <code>git+https</code> URL to the repository (and branch, if necessary) instead of just the package name.</p>
<hr/>
<p>That said, you can probably use <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch" rel="nofollow noreferrer">unittest.mock.patch</a> to replace <code>ctypes.CFUNCTYPE</code> with a version that returns a wrapped function prototype that checks for <code>fluid_synth_set_reverb_full</code> or <code>fluid_synth_set_chorus_full</code> and returns a dummy value in those cases, but otherwise delegates to the real prototype.</p>
<p>Maybe something like</p>
<pre><code>from unittest.mock import patch
from cytpes import CFUNCTYPE

def patched_CFUNCTYPE(*args):
    real_prototype = None
    def wrapped_prototype(*a):
        nonlocal real_prototype
        if a[0][0] in {
            'fluid_synth_set_reverb_full',
            'fluid_synth_set_chorus_full',
        }:
            return None
        if not real_prototype:
            real_prototype = CFUNCTYPE(*args)
        return real_prototype(*a)
    return wrapped_prototype

try:
    import fluidsynth
except AttributeError:
    with patch('ctypes.CFUNCTYPE', patched_CFUNCTYPE):
        import fluidsynth
</code></pre>
<p>Have not tested this.</p>
</div>
