<div class="post-text" itemprop="text">
<p>For example:</p>
<pre><code>20190108JPYUSDabced.csv
20190107JPYUSDabced.csv
20190106JPYUSDabced.csv
</code></pre>
<p>When I search the first 2 files from terminal:</p>
<pre><code>bash: ls /Users/Downloads/201901{08,07}JPYUSDabced.csv
it gives me the first 2 files (exclude 20190106JPYUSDabced.csv)
</code></pre>
<p>When I do in python:</p>
<pre><code>import glob
glob.glob('/Users/Downloads/201901{08,07}JPYUSDabced.csv')
it gives me []
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>According to the docs for the <a href="https://docs.python.org/2/library/glob.html" rel="nofollow noreferrer"><code>glob</code></a> module, under-the-hood <code>glob</code> uses <a href="https://docs.python.org/2/library/fnmatch.html" rel="nofollow noreferrer"><code>fnmatch.fnmatch</code></a>. The only patterns the <code>fnmatch</code> doc describes are:</p>
<blockquote>
<pre><code>Pattern   |    Meaning
--------- | -----------------------------
*         | matches everything 
?         | matches any single character 
[seq]     | matches any character in seq 
[!seq]    | matches any character not in seq 
</code></pre>
<p>For a literal match, wrap the meta-characters in brackets. For example, '[?]' matches the character '?'.</p>
</blockquote>
<p>Try using sequence of characters in brackets instead:</p>
<pre><code>glob.glob('/Users/Downloads/2019010[87]JPYUSDabced.csv')
</code></pre>
<h3>Using os.walk</h3>
<p>Assuming you're looking to search for specific date ranges, you might need to try using <a href="https://docs.python.org/2/library/os.html#os.walk" rel="nofollow noreferrer"><code>os.walk</code></a> with <a href="https://docs.python.org/2.7/library/re.html" rel="nofollow noreferrer"><code>re</code></a> regexes to get the more complex pattern you're looking for. </p>
<p><em>Caveat:</em> <code>os.walk</code> recursively goes through every dir from the starting location, which may not be what you desire.</p>
<p>You'd have to tailor the regex to whatever your situation is, but here's an example:</p>
<p>The regex matches either date <code>20181208</code> or date <code>20190107</code> but must contain the identifier <code>JPYUSDabced.csv</code>.</p>
<pre><code>regex = re.compile("(?:(?:20181208)|(?:20190107))JPYUSDabced.csv")

files = []
for dirpath, dirnames, filenames in os.walk('/Users/Downloads'):
    for f in filenames:
        if regex.match(f):
            files.append(os.path.join(dirpath, f))
print(files)
# ['/Users/Downloads/20190107JPYUSDabced.csv', '/Users/Downloads/20181208JPYUSDabced.csv']
</code></pre>
</div>
<span class="comment-copy">From what I see from the docs, I don't think python's glob library supports the <code>{opt1,opt2}</code> syntax.  At least, there's no mention of it on <a href="https://docs.python.org/2/library/fnmatch.html#module-fnmatch" rel="nofollow noreferrer">docs.python.org/2/library/fnmatch.html#module-fnmatch</a> or <a href="https://docs.python.org/2/library/glob.html" rel="nofollow noreferrer">docs.python.org/2/library/glob.html</a></span>
<span class="comment-copy"><code>glob.glob</code> is using <a href="https://docs.python.org/3/library/fnmatch.html#fnmatch.fnmatch" rel="nofollow noreferrer">fnmatch</a> under the hood which does not seem to support all shell wildcards, including <code>{..,..}</code>.</span>
<span class="comment-copy">Here's the issue that's been open on the subject since 2011.. <a href="https://bugs.python.org/issue9584" rel="nofollow noreferrer">bugs.python.org/issue9584</a></span>
<span class="comment-copy">the real condition is more complecated that [8,7] is not working.      20181208JPYUSDabced.csv      20190107JPYUSDabced.csv      20190106JPYUSDabced.csv and I want the first two files with glob.glob</span>
<span class="comment-copy">@Maik is your real goal: list all files labeled with 2 specific dates?</span>
<span class="comment-copy">Also be ware <code>glob.glob('/Users/Downloads/2019010[8,7]JPYUSDabced.csv')</code> also matches <code>'/Users/Downloads/2019010,JPYUSDabced.csv''</code> which I presume is not what the OP wanted. <i>matches any character in seq</i> means just that "any character" (incl. <code>,</code> which happens to also be a character in the answer).</span>
<span class="comment-copy">@OndrejK. whoops; you're spot on. removed the comma. ahh i see now you'd edited that out in the first place. sorry about that</span>
<span class="comment-copy">Yeah, I am still afraid it only works for the example in question, but actually OP might want <code>"{09,10}"</code> for instance or even more complex pattern and is out of luck with <code>[seq]</code> notation. I suppose combo of `os.walk() or such and regex filter will ultimately be the solution.</span>
