<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/47750757/how-to-shuffle-a-copied-list-without-shuffling-the-original-list">How to shuffle a copied list without shuffling the original list?</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>The <code>random.shuffle()</code> built-in shuffles in place, which is fine for many purposes. But suppose we would want to leave the original collection intact, and generate a random permutation based on the original sequence, is there a prefered way to do this in the standard library?</p>
<p>When I look at <a href="https://github.com/python/cpython/blob/master/Lib/random.py" rel="nofollow noreferrer">CPython's random.py</a> I see an intial comment that reads:</p>
<pre><code>sequences
    ---------
           pick random element
           pick random sample
           pick weighted random sample
           generate random permutation
</code></pre>
<p>Particularly, the last line is of interest. However, I struggle to see what method in this class achieves this.</p>
<p>Naturally, this is not a hard problem to solve, even for a novice Python programmer. But it would be nice to have a standard way of doing it in the standard library, and I'm sure it must exist somewhere. Perhaps someplace other than <code>random.py</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>According to the docs of <a href="https://docs.python.org/3/library/random.html#random.shuffle" rel="nofollow noreferrer"><code>random.shuffle()</code></a>, you could use <a href="https://docs.python.org/3/library/random.html#random.sample" rel="nofollow noreferrer"><code>random.sample()</code></a>:</p>
<blockquote>
<p>To shuffle an immutable sequence and return a new shuffled list, use <code>sample(x, k=len(x))</code> instead of <code>shuffle()</code>.</p>
</blockquote>
<p>The same thing was analized in <a href="https://stackoverflow.com/a/12978830/9225671">this post</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This seems like the obvious solution that shouldn't do more work than necessary:</p>
<pre><code>def shuffled(gen):
    ls = list(gen)
    random.shuffle(ls)
    return ls
</code></pre>
<p>Since it's so simple to build from stdlib primitives, I'm not sure it would make sense to include this as a separate primitive.</p>
</div>
<span class="comment-copy">Is in the docs <code>sample(x, k=len(x))</code></span>
<span class="comment-copy">Thanks. It seems to me this operation is common enough that it'd warrant its own name. But using <code>sample()</code> in this manner obviously does work.</span>
