<div class="post-text" itemprop="text">
<p>If no exception is raised, then <code>sys.last_type</code>, <code>sys.last_value</code> and <code>sys.last_traceback</code> are undefined:</p>
<pre><code>import sys
hasattr(sys, 'last_type')
hasattr(sys, 'last_value')
hasattr(sys, 'last_traceback')
</code></pre>
<p>Return:</p>
<pre><code>False
False
False
</code></pre>
<p>After the exception is raised somewhere, all these values are accessible.</p>
<p>My question: is it safe to <code>del</code> these values?</p>
<pre><code>del sys.last_type
del sys.last_value
del sys.last_traceback
</code></pre>
<p>My Python version is <code>Python 3.6.1 (v3.6.1:69c0db5, Mar 21 2017, 18:41:36) [MSC v.1900 64 bit (AMD64)] on win32</code></p>
<p><strong>UPD</strong>: More info. I'm writing a C app using Python C API. The user enters Python code line by line, and I use Python C API to execute it. After each call I want to check if exception happened (by getting <code>hasattr(sys, "last_type")</code>) and if yes, display it to the user (via <code>sys.last_type</code>, <code>sys.last_value</code> and <code>sys.last_traceback</code>). 
After that I want to clean up <code>sys.last_type</code>, <code>sys.last_value</code> and <code>sys.last_traceback</code> so later I can check again if they were recreated by some new exception and return this information to user again. Does it makes sense?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, you can safely <code>del</code> those attributes.  However:</p>
<blockquote>
<p>After each call I want to check if exception happened ...</p>
</blockquote>
<p>In this case you should probably adjust your code to look directly at <a href="https://docs.python.org/3/library/sys.html#sys.exc_info" rel="nofollow noreferrer"><code>sys.exc_info()</code></a> instead.  The <code>last_type</code>, <code>last_value</code>, and <code>last_traceback</code> are just side-effects of an unhandled exception - and they are intended for use in an interactive session, not for flow control.</p>
<p>There are legitimate use-cases for clearing the last exception info.  So much so, that Python 2 had a <a href="https://docs.python.org/2/library/sys.html#sys.exc_clear" rel="nofollow noreferrer">helper function</a> for doing just that:</p>
<pre><code>&gt;&gt;&gt; print(sys.exc_clear.__doc__)
exc_clear() -&gt; None

Clear global information on the current exception.  Subsequent calls to
exc_info() will return (None,None,None) until another exception is raised
in the current thread or the execution stack returns to a frame where
another exception is being handled.
</code></pre>
<p>From the docs:</p>
<blockquote>
<p>This function is only needed in only a few obscure situations. These include logging and error handling systems that report information on the last or current exception. This function can also be used to try to free resources and trigger object finalization, though no guarantee is made as to what objects will be freed, if any.</p>
</blockquote>
<p>It was removed in Python 3.0 library changes:</p>
<p><a href="https://docs.python.org/3/whatsnew/3.0.html#library-changes" rel="nofollow noreferrer">https://docs.python.org/3/whatsnew/3.0.html#library-changes</a></p>
</div>
<span class="comment-copy">Why do you <i>want</i> to do that?</span>
<span class="comment-copy">my related question is why are you concerned with their existence?</span>
<span class="comment-copy">I feel like this needs a little more context, what are you hoping to achieve by deleting these keys?</span>
<span class="comment-copy">and another follow-up: what are you trying to stay safe from?</span>
<span class="comment-copy">they are set by an exception, you can delete them if some dummy code checks if an exception occurred by testing their presence. You can also delete <i>that</i> dummy code.</span>
