<div class="post-text" itemprop="text">
<p>I've got a piece of work which requires me to add words to there corresponding list depending on the length of the word. I.e all words of length 1 will go in list 1, length 2 will go in list 2, etc...</p>
<p>Below is the code I currently have. As you can see I've created a list with L empty buckets and the idea is to have each length word to go in there corresponding bucket. This is where I am stuck. Without knowing how many buckets there are going to be, I don't know how to add them.
I am very new to Python and any help would be much appreciated!!</p>
<pre><code>def empty_buckets(n): 
    """Return a list with n empty lists. Assume n is a positive integer. """ 
    buckets = [] 
    for bucket in range(n): 
        buckets.append([]) 
    return buckets 
</code></pre>
<h1>Compute the maximum length L of all words.</h1>
<pre><code>longest = ''
    for L in words:
        if len(L) &gt; len(longest):
            longest = L
    return longest
</code></pre>
<h1>Create a list of L empty lists (buckets).</h1>
<pre><code>buckets = empty_buckets(L)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can get the longest word in a list of words with <code>max()</code> and supplying a key-function of <code>len</code>.</p>
<p>You can create one more bucket for "empty" words and sort all your words into the buckets using a for loop and indexing into your buckets with <code>len(word)</code>:</p>
<pre><code># create some demo strings and add some other words
words = [ str(10**k) for k in range(10)]
words.extend(["this","should","work","out","somehow"])

print(words)  # ['1', '10', '100', '1000', '10000', '100000', '1000000', '10000000',
              #  '100000000', '1000000000', 'this', 'should', 'work', 'out', 'somehow']

longest = len(max(words,key=len)) # get the length of the longest word

# create a empty bucket for "" and one bucket for length 1 up to longest
bins = [None] + [ [] for _ in range(longest+1)]  

# loop over words and put then in the bin at index len(word)
for w in words:
    bins[len(w)].append(w)

print(bins)
</code></pre>
<p>Output:</p>
<pre><code>[None, ['1'], ['10'], ['100', 'out'], ['1000', 'this', 'work'], ['10000'], 
       ['100000', 'should'], ['1000000', 'somehow'], ['10000000'], 
       ['100000000'], ['1000000000']]
</code></pre>
<p>Doku:</p>
<ul>
<li><a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer">max(iterable, key=len)</a></li>
<li><a href="https://docs.python.org/3/library/functions.html#len" rel="nofollow noreferrer">len()</a></li>
<li><a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer">range()</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p><code>buckets = [0] * longest # this will make a list of longest size</code></p>
<p>Then, make a list within each element and I am using the first element of the list to keep a count of that bucket.</p>
<p><code>for i in range(longest):
       buckets[i] = [0]</code></p>
<p>Then you need to add the words to the buckets. </p>
<p><code>for L in words:
      buckets[len(L)][0] += 1 # increasing the count of that bucket
      buckets[len(L)].append(L) # Adding the word to that bucket</code></p>
<p>Here is an example:</p>
<pre><code>longest = 10
words = ['this', 'that', 'foremost']
buckets = [0] * longest # this will make a list of longest size 
for i in range(longest):
   buckets[i] = [0]
for L in words:
   buckets[len(L)][0] += 1 # increasing the count of that bucket
   buckets[len(L)].append(L) # Adding the word to that bucket 
</code></pre>
<p>To access any of the counts, it is just <code>buckets[number][0]</code> and to access all the words, you loop that count starting with <code>buckets[number][1]</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>As I had mentioned in comment before, I used dictionary to solve this problem.</p>
<p>Here, you do not need to bother about creating empty list using any external function as we do not know the actual length. </p>
<p>So you can try like this. </p>
<blockquote>
<p>You can visit <a href="https://rextester.com/ZQKA28350" rel="nofollow noreferrer">https://rextester.com/ZQKA28350</a> to run the code online. </p>
</blockquote>
<pre><code>def add_words_to_bucket(words): 
    d = {}

    for word in words: 
        l = len(word)
        if l in d: 
            d[l].append(word) 
        else: 
            i = 0
            while l &gt;= 0 and not l in d:
                if not i: 
                    d[l] = [word]
                else: 
                    d[l] = []
                l = l - 1
                i += 1
    return d

def get_as_list(d): 
    bucket = [d[i] for i in range(0, len(d))]
    return bucket


words = ["a",  "git", "go", "py", "java", "paper", "ruby", "r"]
d = add_words_to_bucket(words) 
bucket = get_as_list(d)
print(d) # {0: [], 1: ['a', 'r'], 2: ['go', 'py'], 3: ['git'], 4: ['java', 'ruby'], 5: ['paper']}
print(bucket) # [[], ['a', 'r'], ['go', 'py'], ['git'], ['java', 'ruby'], ['paper']]


words2 = ["a",  "git", "go", "py", "", "java", "paper", "ruby", "r","TheIpMan", ""]
d2 = add_words_to_bucket(words2)
bucket2 = get_as_list(d2)
print(d2) # {0: ['', ''], 1: ['a', 'r'], 2: ['go', 'py'], 3: ['git'], 4: ['java', 'ruby'], 5: ['paper'], 6: [], 7: [], 8: ['TheIpMan']}
print(bucket2) # [['', ''], ['a', 'r'], ['go', 'py'], ['git'], ['java', 'ruby'], ['paper'], [], [], ['TheIpMan']]
</code></pre>
</div>
<span class="comment-copy">Welcome to SO! Please post a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>. What is <code>empty_buckets(L)</code>? Where is your list? Examples with expected input and output are helpful. Thanks for clarifying.</span>
<span class="comment-copy">Apologies, I missed off the first part;  def empty_buckets(n):     """Return a list with n empty lists.          Assume n is a positive integer.     """     buckets = []     for bucket in range(n):         buckets.append([])     return buckets</span>
<span class="comment-copy">@S.Lowe edit your post to include this code.</span>
<span class="comment-copy">Using <b>dictionary</b> would be a nice solution for this.</span>
<span class="comment-copy">Now, I did that using <b>dictionary</b>. So for input words <code>["a",  "git", "go", "py", "", "java", "paper", "ruby", "r","TheIpMan", ""]</code> the output would be <code>[['', ''], ['a', 'r'], ['go', 'py'], ['git'], ['java', 'ruby'], ['paper'], [], [], ['TheIpMan']]</code>.</span>
