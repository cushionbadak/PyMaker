<div class="post-text" itemprop="text">
<p>I want to be able to call a python script from the command line like this: </p>
<pre><code>python ./pyProg (1, 2) (2, 3)
</code></pre>
<p>and then be able to manipulate these (Enter as many as you want e.g. could enter in 10 tuples) within my program?</p>
<p>So far the only way I am able to do something similar is to call it like:</p>
<pre><code>python ./pyProg 1,4 2,2
</code></pre>
<p>or: </p>
<p><code>python ./pyProg "(1, 2)" "(2,2)"</code></p>
<p>and they come through as strings..
What is the best way to achieve what I am wanting to do?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You could pass the tuples as strings and convert them to actual tuples using <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval()</code></a>:</p>
<pre><code>from sys import argv
from ast import literal_eval

for x in argv[1:]:
    tup = literal_eval(x)
    print(tup, type(tup))  
</code></pre>
<p>Which can be called like this:</p>
<pre><code>$ python ./pyProg.py "(1, 2)"
(1, 2) &lt;class 'tuple'&gt;
</code></pre>
<p><strong>Handling errors:</strong></p>
<p>If the string passed is not a valid expression, both <a href="https://docs.python.org/3/library/exceptions.html#SyntaxError" rel="nofollow noreferrer">SyntaxError</a> and <a href="https://docs.python.org/3/library/exceptions.html#ValueError" rel="nofollow noreferrer">ValueError</a> could be raised. Therefore, its probably safe to wrap the above in a <code>try/except</code>:</p>
<pre><code>from sys import argv
from ast import literal_eval

for x in argv[1:]:
    try:
        tup = literal_eval(x)
        print(tup, type(tup))
    except (SyntaxError, ValueError):
        print("%s -&gt; Invalid tuple format given" % x)
</code></pre>
<p>Which can be seen here:</p>
<pre><code>$ python ./pyProg.py "(1, 2"
(1, 2 -&gt; Invalid tuple format given
$ python ./pyProg.py "(1, 2) (1, 2)"
(1, 2) (1, 2) -&gt; Invalid tuple format given
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you expect your arguments in a particular format, usability will probably be better if you use a regular argument handling parser which parses the individual values.</p>
<pre><code>arg_tuples = [tuple(t.split(',') for t in sys.argv[1:]]
</code></pre>
<p>Omitting the parentheses allows you to omit the quotes on the shell command line (though quoting might of course be necessary for other reasons if your tuple members are not always just numbers).</p>
<p><code>sys.argv[]</code> is a list of strings by definition, the shell does not (portably) have any other data type.</p>
</div>
<span class="comment-copy">You can only pass strings as command-line arguments. Your OS has no idea about Python tuples or most of its other datatypes. You could pass them all as a single string and then parse that into tuples your scripts code.</span>
<span class="comment-copy">@martineau ok so cleanest way is to pass in strings and then convert to tuples within prog? i.e. my second way in the post ^^?</span>
<span class="comment-copy">Yes, that would work, or you just pass them both as a single string: i.e. <code>"(1, 2) (2, 2)"</code> which would require less typing.</span>
<span class="comment-copy"><code>ast.literal_eval()</code> <i>is</i> safe to use for this purpose.</span>
