<div class="post-text" itemprop="text">
<p>I have to keep my application compatible with Python 2 and 3 at the same time.</p>
<p>I have some code like the following that I want to be able to asynchronously call a function and then wait for all my futures to be resolved.</p>
<p><strong>Code:</strong></p>
<pre class="lang-python prettyprint-override"><code>import requests

# This would return a future
def get_xhr(url):
    return requests.get('https://www.{}.com'.format(url))

# This would return an array of futures
def get_search_engines():
    urls = ['google', 'yahoo', 'bing']
    return [get_xhr(url) for url in urls]


# Here I want to wait for all the futures to be resolved
get_search_engines()

print('All requests are done')
</code></pre>
<p>Asyncio async/await seems only compatible with Python 3.</p>
<p>What is the best way to be able to run functions async thats compatible for both python 2/3?</p>
</div>
<div class="post-text" itemprop="text">
<p>For Python 2 there is <a href="https://twistedmatrix.com/trac/" rel="nofollow noreferrer">Twisted</a> or <a href="https://www.tornadoweb.org/en/stable/" rel="nofollow noreferrer">Tornado</a>.</p>
<p>But maybe in your use case threads (<a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">threading</a>, <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer">concurrent.futures</a>) would be the easiest solution.</p>
<p>Also keep in mind that <strong>Python 2 is going to be not maintained anymore at the end of 2019</strong>.</p>
</div>
<span class="comment-copy">Note that <code>concurrent.futures</code> doesn't exist on Python 2, but <a href="https://pypi.org/project/futures/" rel="nofollow noreferrer">a backport</a> does. With that in mind, I'd definitely recommend using <code>concurrent.futures</code> (the backport in Python 2) over raw <code>threading</code>.</span>
