<div class="post-text" itemprop="text">
<p>I've been searching all around for a Python 3.x code sample to get HTTP Header information.</p>
<p>Something as simple as get_headers equivalent in PHP cannot be found in Python easily. Or maybe I am not sure how to best wrap my head around it.</p>
<p>In essence, I would like to code something where I can see whether a URL exists or not</p>
<p>something in the line of</p>
<pre><code>h = get_headers(url)
if(h[0] == 200)
{
   print("Bingo!")
}
</code></pre>
<p>So far, I tried </p>
<pre><code>h = http.client.HTTPResponse('http://docs.python.org/')
</code></pre>
<p>But always got an error</p>
</div>
<div class="post-text" itemprop="text">
<p>To get an HTTP response code in <a class="post-tag" href="/questions/tagged/python-3.x" rel="tag" title="show questions tagged 'python-3.x'">python-3.x</a>, use the <a href="http://docs.python.org/3/library/urllib.request.html" rel="noreferrer"><strong><code>urllib.request</code></strong></a> module:</p>
<pre><code>&gt;&gt;&gt; import urllib.request
&gt;&gt;&gt; response =  urllib.request.urlopen(url)
&gt;&gt;&gt; response.getcode()
200
&gt;&gt;&gt; if response.getcode() == 200:
...     print('Bingo')
... 
Bingo
</code></pre>
<p>The returned <a href="http://docs.python.org/3/library/http.client.html#httpresponse-objects" rel="noreferrer"><strong><code>HTTPResponse</code> Object</strong></a> will give you access to all of the headers, as well. For example:</p>
<pre><code>&gt;&gt;&gt; response.getheader('Server')
'Apache/2.2.16 (Debian)'
</code></pre>
<hr/>
<p>If the call to <a href="http://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen" rel="noreferrer"><code>urllib.request.urlopen()</code></a> fails, an <a href="http://docs.python.org/3/library/urllib.error.html#urllib.error.HTTPError" rel="noreferrer"><strong><code>HTTPError</code></strong></a> <code>Exception</code> is raised. You can handle this to get the response code:</p>
<pre><code>import urllib.request
try:
    response = urllib.request.urlopen(url)
    if response.getcode() == 200:
        print('Bingo')
    else:
        print('The response code was not 200, but: {}'.format(
            response.get_code()))
except urllib.error.HTTPError as e:
    print('''An error occurred: {}
The response code was {}'''.format(e, e.getcode()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>For Python 2.x</h2>
<p>urllib, urllib2 or httplib can be used here. However note, urllib and urllib2 uses httplib. Therefore, depending on whether you plan to do this check a lot (1000s of times), it would be better to use httplib. Additional documentation and examples are <a href="http://docs.python.org/2/library/httplib.html" rel="nofollow">here</a>.</p>
<p>Example code:</p>
<pre><code>import httplib
try:
    h = httplib.HTTPConnection("www.google.com")
    h.connect()
except Exception as ex:
    print "Could not connect to page."
</code></pre>
<hr/>
<h2>For Python 3.x</h2>
<p>A similar story to urllib (or urllib2) and httplib from Python 2.x applies to the urllib2 and http.client libraries in Python 3.x. Again, http.client should be quicker. For more documentation and examples look <a href="http://docs.python.org/3/library/http.client.html" rel="nofollow">here</a>.</p>
<p>Example code:</p>
<pre><code>import http.client

try:
    conn = http.client.HTTPConnection("www.google.com")
    conn.connect()    
except Exception as ex:
    print("Could not connect to page.")
</code></pre>
<p>and if you wanted to check the status codes you would need to replace</p>
<pre><code>conn.connect()
</code></pre>
<p>with</p>
<pre><code>conn.request("GET", "/index.html")  # Could also use "HEAD" instead of "GET".
res = conn.getresponse()
if res.status == 200 or res.status == 302:  # Specify codes here.
    print("Page Found!")
</code></pre>
<hr/>
<p>Note, in both examples, if you would like to catch the specific exception relating to when the URL doesn't exist, rather than all of them, catch the socket.gaierror exception instead (see the <a href="http://docs.python.org/3.3/library/socket.html" rel="nofollow">socket documentation</a>).</p>
</div>
<div class="post-text" itemprop="text">
<p>you can use the urllib2 library</p>
<pre><code>import urllib2
if urllib2.urlopen(url).code == 200:
    print "Bingo"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use requests module to check it:</p>
<pre><code>import requests
url = "http://www.example.com/"
res = requests.get(url)
if res.status_code == 200:
    print("bingo")
</code></pre>
<p>You can also check header contents before making downloading the whole content of the webpage by using <a href="http://docs.python-requests.org/en/master/user/quickstart/#response-headers" rel="nofollow noreferrer">header</a>.</p>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/8627493/grabbing-headers-from-webpage-with-python">Grabbing headers from webpage with python</a></span>
<span class="comment-copy">@DocMax: Possible, but the accepted answer there doesn't deal with response codes or exception handling.</span>
<span class="comment-copy">Good point. I had overlooked this subtlety. To other reviewers, please keep this in mind. I would rescind my vote now were it possible.</span>
<span class="comment-copy">Thank you! This is the answer. I got it after researching more based on the initial answer Ali-Akber provided. Thanks again!</span>
<span class="comment-copy">So, the danger with this code is that if the page is 404, it gives me a massive error ending with (urllib.error.HTTPError: HTTP Error 404: Not Found). What's a good way to go around that problem?</span>
<span class="comment-copy">I've updated my answer to demonstrate how to handle a <code>urllib.error.HTTPError</code>.</span>
<span class="comment-copy">Thanks for this answer. For the current project, I think the URLLIB would work. But once I go through examining many urls at once, I might use your method. Thanks again!</span>
<span class="comment-copy">So, I realized that this does not work on Python 3.x either.</span>
<span class="comment-copy">I've added a Python 3.x solution. Should work now - it's not much different to the original answer as you can see.</span>
<span class="comment-copy">Thanks! This informative. I've went through the documentation in the Python 3.3 library. But I guess the problem I originally had was finding the right syntax to implement since I would get confused with the Python 2.x vs Python 3.x functions and calls.</span>
<span class="comment-copy">This doesn't work in Python 3.</span>
<span class="comment-copy">This is fine for Python 2. The question is tagged with <a href="https://stackoverflow.com/questions/tagged/python-3.x">python-3.x</a>, though.</span>
<span class="comment-copy">This is for Python 2.x, but it did help a lot! Thank you</span>
