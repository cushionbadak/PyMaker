<div class="post-text" itemprop="text">
<p>For HTML5 and Python CGI:</p>
<p>If I write UTF-8 Meta Tag, my code doesn't work. 
If I don't write, it works.</p>
<p>Page encoding is UTF-8.</p>
<pre><code>print("Content-type:text/html")
print()
print("""
    &lt;!doctype html&gt;
    &lt;html&gt;
    &lt;head&gt;
        &lt;meta charset="UTF-8"&gt;
    &lt;/head&gt;
    &lt;body&gt;
        şöğıçü
    &lt;/body&gt;
    &lt;/html&gt;
""")
</code></pre>
<p>This codes doesn't work.</p>
<pre><code>print("Content-type:text/html")
    print()
    print("""
        &lt;!doctype html&gt;
        &lt;html&gt;
        &lt;head&gt;&lt;/head&gt;
        &lt;body&gt;
            şöğıçü
        &lt;/body&gt;
        &lt;/html&gt;
    """)
</code></pre>
<p>But this codes works.</p>
</div>
<div class="post-text" itemprop="text">
<p>For CGI, using <code>print()</code> requires that the correct codec has been set up for output. <code>print()</code> writes to <a href="http://docs.python.org/3/library/sys.html#sys.stdout" rel="noreferrer"><code>sys.stdout</code></a> and <code>sys.stdout</code> has been opened with a specific encoding and how that is determined is platform dependent <em>and</em> can differ based on how the script is run. Running your script as a CGI script means you pretty much do not know what encoding will be used.</p>
<p>In your case, the web server has set the locale for text output to a fixed encoding other than UTF-8. Python uses that locale setting to produce output in in that encoding, and without the <code>&lt;meta&gt;</code> header your browser correctly guesses that encoding (or the server has communicated it in the Content-Type header), but with the <code>&lt;meta&gt;</code> header you are telling it to use a different encoding, one that is incorrect for the data produced.</p>
<p>You can write directly to <code>sys.stdout.buffer</code>, after explicitly encoding to UTF-8. Make a helper function to make this easier:</p>
<pre><code>import sys

def enc_print(string='', encoding='utf8'):
    sys.stdout.buffer.write(string.encode(encoding) + b'\n')

enc_print("Content-type:text/html")
enc_print()
enc_print("""
    &lt;!doctype html&gt;
    &lt;html&gt;
    &lt;head&gt;
        &lt;meta charset="UTF-8"&gt;
    &lt;/head&gt;
    &lt;body&gt;
        şöğıçü
    &lt;/body&gt;
    &lt;/html&gt;
""")
</code></pre>
<p>Another approach is to replace <code>sys.stdout</code> with a new <a href="https://docs.python.org/3/library/io.html#io.TextIOWrapper" rel="noreferrer"><code>io.TextIOWrapper()</code> object</a> that uses the codec you need:</p>
<pre><code>import sys
import io

def set_output_encoding(codec, errors='strict'):
    sys.stdout = io.TextIOWrapper(
        sys.stdout.detach(), errors=errors,
        line_buffering=sys.stdout.line_buffering)

set_output_encoding('utf8')

print("Content-type:text/html")
print()
print("""
    &lt;!doctype html&gt;
    &lt;html&gt;
    &lt;head&gt;&lt;/head&gt;
    &lt;body&gt;
        şöğıçü
    &lt;/body&gt;
    &lt;/html&gt;
""")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://ru.stackoverflow.com/a/352838/11350">https://ru.stackoverflow.com/a/352838/11350</a></p>
<p>First dont forget to set encoding in file</p>
<pre><code>#!/usr/bin/env python
# -*- coding: utf-8 -*-
</code></pre>
<p>Then try</p>
<pre><code>import sys
import codecs

sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())
</code></pre>
<p>Or if you use apache2, add to your conf.</p>
<pre><code>AddDefaultCharset UTF-8    
SetEnv PYTHONIOENCODING utf8
</code></pre>
</div>
<span class="comment-copy">Did you specify a source encoding? What encoding was your file saved in by your editor? Python sends the string you typed <i>literally</i> so if you saved this file in Latin-1 encoding, that's what will be sent.</span>
<span class="comment-copy">File encoding :utf-8. Normaly, it works. My previous projects worked it. I use Python3.3. Its default encoding is utf8.  by the way, i can't speak english. I don't understand sometimes</span>
<span class="comment-copy">Aha, that's important information! You need to explicitly encode in that case, really.</span>
<span class="comment-copy">if you will tell me where is problem, I can. Server, browser, editor, html, etc ?</span>
<span class="comment-copy">Voting to re-open this. Python 3 CGI printing is a <i>common pain point</i>, and far from a localised problem.</span>
<span class="comment-copy">This is really nice, but from what I see in the doc, this could also be implementation dependant! <code>This is not part of the TextIOBase API and may not exist in some implementations</code> (from <a href="http://docs.python.org/3/library/io.html" rel="nofollow noreferrer">docs.python.org/3/library/io.html</a> )</span>
<span class="comment-copy">@Zenon: that may apply to certain implementations indeed (specifically <code>StringIO</code>), but the <code>stdout</code> stream definitely has a <code>.buffer</code> attribute; that is documented I the <a href="http://docs.python.org/3/library/sys.html#sys.stdout" rel="nofollow noreferrer"><code>sys.stdout</code> documentation</a>.</span>
<span class="comment-copy">not work in python3.4 , <code>Internal Server Error</code> happened</span>
<span class="comment-copy">@alireza.m: the code, as posted here, works just fine on Python 3.4; I retested it just now. You have a different problem I'm afraid. Use <code>import cgitb; cgitb.enable()</code> (see the <a href="https://docs.python.org/3/library/cgitb.html" rel="nofollow noreferrer">module documenation</a>) to get more meaningful errors.</span>
<span class="comment-copy">@alireza.m this is the correct way; <code>print()</code> can easily fail if the CGI server doesn't provide a correct encoding for Python (it never does).</span>
<span class="comment-copy">Works when all else doesn't. But is it not absurd that we have to go this kind of arcane nonsense to do something so basic?</span>
<span class="comment-copy">Thank you for what seems like the simplest and best answer.  Converting a CGI script from Python 2 to Python 3 is such a hassle!</span>
