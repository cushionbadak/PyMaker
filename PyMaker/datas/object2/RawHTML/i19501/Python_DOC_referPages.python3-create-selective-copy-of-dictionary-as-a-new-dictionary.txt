<div class="post-text" itemprop="text">
<p>using Python 3.3.0, I created a "dictionary" from a csv-file (header: <code>ID;Col1;Col2;Col3;Col4;Col5</code>):</p>
<pre><code>ID;Col1;Col2;Col3;Col4;Col5
15345;1;1;nnngngn;vhrhtnz;latest
12345;12;8;gnrghrtthr;tznhltrnhklr;latest
90834;3;4;something;nonsens;latest
12345;34;235;dontcare;muhaha;oldone
</code></pre>
<p>with code</p>
<pre><code>file = "test.csv" 
csv_file = csv.DictReader(open(file, 'r'), delimiter=';', quotechar='"')
</code></pre>
<p>and I wanted to copy the lines with ID = 12345 into a new dictionary, NOT into a file.
I really nedded to copy into a dictionary, NOT a list, because I wanted to be able to address the column names directly.
I tried this by doing</p>
<pre><code>cewl = {}
for row in csv_file:
   if row['ID'] == '12345':
   cewl.update(row)
print(cewl)
</code></pre>
<p>Output is:</p>
<pre><code>{'ID': '12345', 'Col1': '34', 'Col2': '235', 'Col3': 'dontcare', 'Col4': 'muhaha', 'Col5': 'oldone'}
</code></pre>
<p><strong>My problem:</strong>
Only the second line with ID=12345 gets copied, the first one is omitted, I don't know why.</p>
<p>If I try this by copying into a new list (just for testing purposes), everything works fine:</p>
<pre><code>cewl = []
for row in csv_file1:
if row['ID'] == '12345':
    cewl.append(row)
print(cewl)
</code></pre>
<p>Output is :</p>
<pre><code>[{'Col3': 'gnrghrtthr', 'Col2': '8', 'Col1': '12', 'Col5': 'latest', 'Col4': 'tznhltrnhklr', 'ID': '12345'}, 
{'Col3': 'dontcare', 'Col2': '235', 'Col1': '34', 'Col5': 'oldone', 'Col4': 'muhaha', 'ID': '12345'}]
</code></pre>
<p>I don't know why this isn't working by copying into the new dictionary...there doesn't seem to be a method like .add or .append for dictreader.</p>
<p>How can I copy my data into a new dictionary without missing any lines ?</p>
</div>
<div class="post-text" itemprop="text">
<p>What is the expected output? The behaviour is perfectly normal for a <code>dict</code>; you are <em>replacing</em> the values for each key with a new value.</p>
<p>If you wanted the values to be <em>lists</em> of the values for each matching row, it's easier to use a <a href="http://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow"><code>defaultdict</code></a> with a <code>list</code> factory:</p>
<pre><code>from collections import defaultdict

cewl = defaultdict(list)

for row in csv_file:
   if row['ID'] == '12345':
       for k, v in row.items():
           cewl[k].append(v)

print(cewl)
</code></pre>
<p>This outputs:</p>
<pre><code>defaultdict(&lt;class 'list'&gt;, {'Col1': ['12', '34'], 'ID': ['12345', '12345'], 'Col2': ['8', '235'], 'Col5': ['latest', 'oldone'], 'Col4': ['tznhltrnhklr', 'muhaha'], 'Col3': ['gnrghrtthr', 'dontcare']})
</code></pre>
<p>A <code>defaultdict</code> is a subclass of <code>dict</code>,so <code>print(cewl['Col1'])</code> will print <code>['12', '34']</code>.</p>
<p>When you use <code>.update()</code> you effectively do this:</p>
<pre><code>for k, v in row.items():
    cewl[k] = v
</code></pre>
<p>e.g. set each key in <code>cewl</code> to the value found in the row being processed. When the last row is being processed, it's values overwrite the values of previous rows.</p>
<p>If you want to filter out just the rows that match a certain <code>ID</code> criteria, then adding them to a list is just perfectly fine. You then loop over the matched results to process them:</p>
<pre><code>for row in cewl:
    # do something with matched row
</code></pre>
<p>or you can build a generator filter that you wrap around your <code>DictReader()</code> to do the filtering for you, so you don't need to build the list in memory:</p>
<pre><code>def rowfilter(reader, id):
    for row in reader:
        if row['ID'] == id:
            yield row

for row in rowfilter(csv_file, '12345'):
    # do something with matched row
</code></pre>
</div>
<span class="comment-copy">A dictionary is a mapping; decide if you want an ID ('12345') mapped to two or more different pieces of data as in your example, in which case you can map an ID to a list of dictionaries containing distinct mappings of values for keys <code>Col1</code>, <code>Col2</code>, etc. OR something like a list of tuples <code>(ID, Col1, Col2, etc)</code>. Think your data structures before you write any code.</span>
<span class="comment-copy">@dacoda: A python mapping object maps a key to <i>one</i> value. So <code>somedict['a'] = 1</code> followed by <code>someddict['a'] = 2</code> means that you <i>replaced</i> the value for the key <code>'a'</code>. My proposed solution gives you a list value, and we add items to that list as we find them. I am not certain that you understand how python mappings work though.</span>
<span class="comment-copy">If you expect a list of dictionaries, then use your list and append rows to that instead.</span>
<span class="comment-copy">@dacoda: I was able to read your comment just fine, please do not edit answers when a comment will do. I want you to give me the <i>exact</i> expected output, not what you already posted (because 'something like this but different' is not clear).</span>
<span class="comment-copy">:Thanks, I want to create a copy of my dictionary including only the lines with ID=12345, so the expected output of cewl in this case should be the header and two lines, each with ID 12345 an the corresponding data.</span>
<span class="comment-copy">@dacoda: What are you trying to do? Write out a filtered <code>csv</code> file? The <code>DictReader</code> gives you a <i>sequence</i> of <code>dict</code> objects, like your list output, each with the same keys for each row. You need to be much clearer in what you are trying to do, I am still just guessing here.</span>
