<div class="post-text" itemprop="text">
<p>Suppose I have read all the lines of a text file as follows:</p>
<pre><code>ifile = open('myfile.txt')
lines = ifile.readlines()
</code></pre>
<p>Now, suppose I have the following regular expression:</p>
<pre><code>rgx = re.compile(r'Found ([0-9]+) solutions')
</code></pre>
<p>I can use</p>
<pre><code>result = filter(rgx.match,lines)
print result
</code></pre>
<p>to obtain a list of matches, but what I want is a list of matching groups.  For example, instead of output like:</p>
<pre><code>Found 3 solutions
Found 35 solutions
Found 0 solutions
</code></pre>
<p>I want output like:</p>
<pre><code>3
35
0
</code></pre>
<p>How can I do this?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import re

rgx = re.compile(r'Found ([0-9]+) solutions')

with open('myfile.txt') as f:
    result = [m.group(1) for m in (rgx.match(line) for line in f) if m]
</code></pre>
<p>The inner loop, <code>(rgx.match(line) for line in f)</code> is a generator expression that acts like <code>apply()</code>.  For each line in the file, it calls <code>rgx.match()</code> and yields up the result, an <code>SRE_Match</code> object (I usually just call it a "match object").</p>
<p>The outer loop has <code>if m</code> which discards any result that does not evaluate true (<code>re.match()</code> returns <code>None</code> when the pattern doesn't match).  Then <code>m.group(1)</code> uses the match object to get the text from inside the parentheses.  See the documentation for the <code>re</code> module for details.  Since the outer loop is part of a list comprehension, a list of results is built and returned.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since the prefix and suffix are fixed string, you can use look-around:</p>
<pre><code>r'(?&lt;=Found )\d+(?= solutions)'
</code></pre>
<p>I think there should be some way to use your regular expression to do the job, though.</p>
</div>
<div class="post-text" itemprop="text">
<p>You get "match" objects back from the match command (unless you implicitly turn it into a string using filter), alas. there isn't decent documentation available via. ipython help but it is online: <a href="http://docs.python.org/3/library/re.html#match-objects" rel="nofollow">http://docs.python.org/3/library/re.html#match-objects</a></p>
<p>Eg.</p>
<pre><code>for line in lines:
  result = rgx.match(line)
  if not result: continue
  print result.group(1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>print '\n'.join([m.group(1) for l in lines for m in [rgx.search(l)] if m])
</code></pre>
</div>
<span class="comment-copy">Ahh, I see. It took me a minute to notice that you were using the letter "l" instead of the number "1" inside the inner loop, but then it worked perfectly for me! :)</span>
<span class="comment-copy">...granted, the number "1" wouldn't make any sense, so it should have been obvious to me.</span>
<span class="comment-copy">There is such a thing as being too terse!  I edited the answer and changed that variable name from <code>l</code> to <code>line</code>.  That should be clearer!  Sorry about that.</span>
<span class="comment-copy">Thanks.  Never used lookahead or lookaround before.</span>
