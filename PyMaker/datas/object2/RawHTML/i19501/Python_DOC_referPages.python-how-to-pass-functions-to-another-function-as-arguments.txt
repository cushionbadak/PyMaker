<div class="post-text" itemprop="text">
<p>I have 2 custom functions:</p>
<pre><code>f(), g()
</code></pre>
<p>I want to pass all months to them, and pass them another function as follows:</p>
<pre><code>x(f("Jan"), g("Jan"), f("Feb"), g("Feb"), f("Mar"), g("Mar"), ...)
</code></pre>
<p>How is it done in short way? </p>
<p>Best Regards</p>
</div>
<div class="post-text" itemprop="text">
<p>So, first of all, we want to call <code>f()</code> and <code>g()</code> on each item of a list. We can do this with a <a href="http://www.youtube.com/watch?v=pShL9DCSIUw" rel="nofollow">list comprehension</a>:</p>
<pre><code>[(f(month), g(month)) for month in months]
</code></pre>
<p>This produces a list of tuples, but we want a flat list, so we use <a href="http://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow"><code>itertools.chain.from_iterable()</code></a> to flatten it (or in this case, just a generator expression):</p>
<pre><code>from itertools import chain

chain.from_iterable((f(month), g(month)) for month in months)
</code></pre>
<p>Then we <a href="http://docs.python.org/3.3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow">unpack</a> this iterable into the arguments for <code>x()</code>:</p>
<pre><code>x(*chain.from_iterable((f(month), g(month)) for month in months))
</code></pre>
<p>Edit: If you wish to pass the functions ready to be executed with that parameter, without executing them, it's <a href="http://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow"><code>functools.partial()</code></a> to the rescue:</p>
<pre><code>from functools import partial

[(partial(f, month), partial(g, month)) for month in months]
</code></pre>
<p>This would mean the parameters to <code>x()</code> would be functions that, when called, run <code>f()</code> or <code>g()</code> as appropriate, with the month filled as given to the partial. This can, of course, be expanded out in the same way as before.</p>
</div>
<span class="comment-copy">To be clear: you want to pass the <i>return values</i> from executing <code>f()</code> and <code>g()</code> on all the months to <code>x()</code>, not the actual <code>f</code> and <code>g</code> functions themselves?</span>
<span class="comment-copy">Well, aren't they the same?</span>
<span class="comment-copy">@alwbtc There is a difference between passing the function, and executing that function and passing the returned value. I presume you want the latter. (The former could be achieved using <a href="http://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>functools.partial()</code></a>).</span>
<span class="comment-copy">@alwbtc: Not at all.  In Python, functions themselves are values (as Hiroto's answer below indicates).  There is in fact an entire programming methodology, <i>functional programming</i>, which relies on being able to pass around functions, having functions that return other functions, and so forth.</span>
<span class="comment-copy">Hmm, what if I want the former one?</span>
<span class="comment-copy">@alwbtc It all comes with experience, the more you do, the more things you need, so the more you learn. The standard Python docs are also great and worth a read.</span>
<span class="comment-copy">@alwbtc: Regarding how to know all these things, I highly recommend Peter Norvig's essay <a href="http://norvig.com/21-days.html" rel="nofollow noreferrer">Teach Yourself Programming in Ten Years</a>.</span>
<span class="comment-copy">@alwbtc: What Lattyware said. A big part of knowing how to program is knowing what is out there that you <i>could</i> know.  If you know something exists, but just can't remember what it's called or how to use it, you can usually find the answer pretty quickly.  But if you don't even know what you are looking for, you may never find it.  If you understand what first-order functions and partial application are, understanding what <code>functools.partial()</code> does isn't hard at all -- but if you don't know those concepts, you'll never even think to look at a function called <code>partial()</code> for the solution.</span>
<span class="comment-copy">@alwbtc It varies wildly, I'm 20, and have been programming since about 8, so 12 years, but most of that writing simple rubbish when I was young. If you want to get experience, go work on your own projects, open source software, etc... It's really not hard to get into.</span>
<span class="comment-copy">@alwbtc Oh, presumably in old versions of Python, <code>*</code> won't work on iterables, just wrap the call to <code>itertools.chain.from_iterable(...)</code> in a <code>list()</code> call. I would not 2.6.5 is a really old version, 2.7 is recommended if you need 2.x, 3.3 if not.</span>
