<div class="post-text" itemprop="text">
<p>I'd like to generate a set of x unique random numbers and sort them in Python. For example:
range(1000, 10000)
x = 100</p>
<p>I've figured out to import random and use the random.randrange method, then loop to get 100 random numbers and in the end sort them.</p>
<p>However, I don't know how to get unique numbers (such that they do not repeat) - should I validate each and every loop? Or is there any other easier way how to do it? And how should I sort them?</p>
<p>Thanks y'all!</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://docs.python.org/3/library/random.html#random.sample"><code>random.sample</code></a></p>
<pre><code>numbers = random.sample(xrange(1000, 10000), 100)  # or `range` in Python 3
</code></pre>
<p>The sorting part is easy - use the <a href="http://docs.python.org/3/library/stdtypes.html#list.sort"><code>list.sort</code></a> method.</p>
<pre><code>numbers.sort()
</code></pre>
<p>By default this will sort it from smallest number to largest, but it takes an optional <code>key</code> argument which determines what to sort it on.</p>
<p>There is also a <a href="http://docs.python.org/3/library/functions.html#sorted"><code>sorted</code></a> function which doesn't modify a list in-place, but rather returns a sorted list.</p>
<pre><code>numbers_sorted = sorted(numbers)
</code></pre>
<p>This also has an optional <code>key</code> argument.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://github.com/erikrose/more-itertools" rel="nofollow noreferrer"><code>more_itertools</code></a> implements the <a href="https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.random_combination" rel="nofollow noreferrer"><code>random_combinations</code></a>  itertools recipe, which returns <code>r</code> sorted random numbers, if given a sorted input.</p>
<pre><code>import more_itertools as mit

mit.random_combination(range(1000, 10000), r=100)
# (1016, 1112, 1233, 1367, 1446, 1460, 1518, 1807, 1832, 1956, ...)
</code></pre>
<p>This is unlike <code>random.sample</code>, which returns an unsorted result.</p>
<hr/>
<p><strong>Details</strong></p>
<p>Looking at the recipe, we can see why this order is established.</p>
<p>From <a href="https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.random_combination" rel="nofollow noreferrer">itertools recipes</a>:</p>
<pre><code>def random_combination(iterable, r):
    """Return a random *r* length subsequence of the elements in *iterable*.
        &gt;&gt;&gt; random_combination(range(5), 3)  # doctest:+SKIP
        (2, 3, 4)
    This equivalent to taking a random selection from
    ``itertools.combinations(iterable, r)``.
    """
    pool = tuple(iterable)
    n = len(pool)
    indices = sorted(sample(range(n), r))
    return tuple(pool[i] for i in indices)
</code></pre>
<p><code>range()</code> is inherently sorted and becomes the <code>pool</code> from which random elements are selected.  Although the indices are randomly selected, they are later sorted. Since the <code>pool</code> and <code>indices</code> are both sorted, the results are also sorted.</p>
<p>In summary, this does the same as @Volatility's answer, except the sorting is handled for you.</p>
<p><em>Cavaet</em>: <a href="https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.random_combination" rel="nofollow noreferrer"><code>random_combinations</code></a> requires the length of the iterable to exceed the value of <code>r</code>, otherwise an error is raised.</p>
</div>
<span class="comment-copy">Thanks @Volatility! Never thought it was THAT easy. One more thing - is there a way how to export these numbers to csv or let's say xml format?</span>
<span class="comment-copy">There is a <a href="http://docs.python.org/2.7/library/csv.html" rel="nofollow noreferrer">Python module for CSV</a>.</span>
