<div class="post-text" itemprop="text">
<p>Here's a stupid example:</p>
<pre><code>def add_x_to_input(x,k):
   return x + k

myList = [1,2,3,4]
myNewList = map(add_x_to_input???, myList)
</code></pre>
<p>How do I specify the parameter <code>x</code> of <code>add_x_to_input</code>, when I give it as input function to <code>map</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="http://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>functools.partial()</code></a>:</p>
<pre><code>from functools import partial
map(partial(add_x_to_input, some_value_for_x), myList)
</code></pre>
<p>or you could use a <a href="http://docs.python.org/3/reference/expressions.html#lambda" rel="nofollow noreferrer"><code>lambda</code></a> (an anonymous, in-line function):</p>
<pre><code>map(lambda k: add_x_to_input(some_value_for_x, k), myList)
</code></pre>
<p>or you could define an explicit new function:</p>
<pre><code>def wrapping_function(k):
    return add_x_to_input(some_value_for_x, k)

map(wrapping_function, myList)
</code></pre>
<p>If you are after sheer speed, the <code>functools.partial()</code> approach wins that hands-down; it is implemented in C code and avoids an extra Python stack push:</p>
<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; L = range(10)
&gt;&gt;&gt; def foo(a, b): pass
... 
&gt;&gt;&gt; def p(b): return foo(1, b)
... 
&gt;&gt;&gt; timeit.timeit('map(p, L)', 'from __main__ import foo, L; from functools import partial; p = partial(foo, 1)')
3.0008959770202637
&gt;&gt;&gt; timeit.timeit('map(p, L)', 'from __main__ import foo, L; p = lambda b: foo(1, b)')
3.8707590103149414
&gt;&gt;&gt; timeit.timeit('map(p, L)', 'from __main__ import foo, L, p')
3.9136409759521484
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def add_x_to_input(x,k):
   return x + k

myList = [1,2,3,4]
x = 5
myNewList = map(lambda k:add_x_to_input(x,k), myList)
</code></pre>
<p>or just:</p>
<pre><code>myNewList = [x+k for k in myList]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Define a closure:</p>
<pre><code>In [61]: def add_x_to_input(x,k):
    ...:    return x + k

In [62]: def add_1(x):
    ...:     return add_x_to_input(x,1)

In [63]: add_1(1)
Out[63]: 2

In [64]: list = [1,2,3]

In [65]: map(add_1, list)
Out[65]: [2, 3, 4]
</code></pre>
</div>
<span class="comment-copy">is <code>x</code> a constant?</span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/672172/how-to-use-python-map-and-other-functional-tools" title="how to use python map and other functional tools">stackoverflow.com/questions/672172/â€¦</a></span>
<span class="comment-copy">yes. In short, I want to be able to parameterize that function.</span>
<span class="comment-copy">I like the lambda function solution. Should I worry about any possible impact on speed, compared to a plain call to <code>map</code>?</span>
<span class="comment-copy">@RickyRobinson: There is some indirection, so all three options will cost you some speed. All three will have close to the same overhead though.</span>
<span class="comment-copy">Ok. The thing is I'm trying to convert all my for loops into <code>map</code> calls, so I wouldn't wanna go back to the previous situation in terms of speed.</span>
<span class="comment-copy">@RickyRobinson: I'd try out different approaches, it could be that <code>partial()</code> is going to be faster (it's implemented in C), for example, saving a stack push.</span>
<span class="comment-copy">@RickyRobinson: I added a speed comparison for your enjoyment; <code>functools.partial()</code> is going to be closest to calling the wrapped function directly.</span>
<span class="comment-copy">OK, I wanted to avoid having to write a function for each parameter in use, but if there is no other way, then OK. :)</span>
