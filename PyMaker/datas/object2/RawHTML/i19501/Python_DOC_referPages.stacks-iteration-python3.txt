<div class="post-text" itemprop="text">
<p>Ok so im trying to input a word in a stack and I want to print all of them after I input a string. So I can only print them one at a time. I tried using a for loop outside but Stacks are apparently not iterable. So I iterating it inside the stack. It still is not working.</p>
<pre><code>class Stack:

    def __init__(self):
        self.items = []
    def push(self,items):
        self.items.insert(0,items)
    def pop(self):
        for x in self.items:
            print( self.items.pop(0))

    def show(self):
        print (self.items)

s = Stack()
s.show()
placed = input("enter")

item = s.pop()
print(item, "is on top", s)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Give your <code>Stack</code> class a <a href="http://docs.python.org/3/reference/datamodel.html#object.__len__" rel="nofollow"><code>__len__</code> method</a>, this will make testing if the stack is empty easier:</p>
<pre><code>class Stack:
    def __init__(self):
        self.items = []

    def push(self,item):
        self.items.append(item)

    def pop(self):
        return self.items.pop()

    def show(self):
        print (self.items)

    def __len__(self):
        return len(self.items)

stack = Stack()

stack.push('World!')
stack.push('Hello')

while stack:  # tests the length through __len__
    print(stack.pop())
</code></pre>
<p>Note that I simply <code>.append()</code> to the end of the <code>.items</code> list, then later on <code>.pop()</code> (no arguments) again, removing from the end of the list.</p>
<p>To make your class <a href="http://docs.python.org/3/library/stdtypes.html#typeiter" rel="nofollow">an iterable type</a>, you'd need to add at least an <a href="http://docs.python.org/3/library/stdtypes.html#container.__iter__" rel="nofollow"><code>__iter__</code> method</a>, optionally together with a <a href="http://docs.python.org/3/library/stdtypes.html#iterator.next" rel="nofollow"><code>.__next__()</code> method</a>:</p>
<pre><code>class Stack:
    # rest elided

    def __iter__(self):
        return self

    def next(self):
        try:
            return self.items.pop()
        except IndexError:  # empty
            raise StopIteration  # signal iterator is done
</code></pre>
</div>
<span class="comment-copy">About your stack design, why not use <code>.append()</code> and <code>.pop()</code> instead? Add items to the end of the list, and <code>.pop()</code> with no arguments removes them again from the end.</span>
<span class="comment-copy">thanks much appreciated!!!</span>
<span class="comment-copy">Ok wait how do i print the Hello backwards? thats why i needed to iterate?</span>
<span class="comment-copy">Ok i got it you just need this.         return self.__items[len(self.__items)-1]</span>
<span class="comment-copy">Just use <code>[-1]</code>; select the last element with a negative index.</span>
