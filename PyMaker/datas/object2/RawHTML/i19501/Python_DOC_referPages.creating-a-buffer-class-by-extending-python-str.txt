<div class="post-text" itemprop="text">
<p>I guess this is best explained by code and comments:</p>
<pre><code>import struct

class binary_buffer(str):
    def __init__(self, msg=""):
        self = msg
    def write_ubyte(self, ubyte):
        self += struct.pack("=B", ubyte)
        return len(self)

Output
&gt;&gt; bb = binary_buffer()
&gt;&gt; bb # Buffer starts out empty, as it should
''
&gt;&gt; bb.write_ubyte(200)
1   # We can see that we've successfully written one byte to the buffer
&gt;&gt; bb
''  # Huh? We just wrote something, but where has it gone?
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>str</code>s are immutable. Therefore,</p>
<pre><code>self += struct.pack("=B", ubyte)
</code></pre>
<p>is evaluated as</p>
<pre><code>self = self + struct.pack("=B", ubyte)
</code></pre>
<p>This assigns a new value to the name self, but self is just a name like any other. As soon as the method exits, the name (and the associated object) are forgotten.</p>
<p>You want a <a href="http://docs.python.org/3/library/functions.html#bytearray" rel="nofollow"><code>bytearray</code></a>:</p>
<pre><code>&gt;&gt;&gt; bb = bytearray()
&gt;&gt;&gt; bb.append(200)
&gt;&gt;&gt; bb
bytearray(b'\xc8')
</code></pre>
</div>
<span class="comment-copy">I'd say that in general, assigning to "self" is wrong. At least I can't come up with a legitimate use for this.</span>
<span class="comment-copy">@doomster: Why is that? And how else would you do it?</span>
<span class="comment-copy">@TahitiPetey Because you're just binding something to the name self, which is usually your current object. To change the current object, assign to one of <i>its</i> properties, or, equivalently, call one of its methods.</span>
<span class="comment-copy">@phihag: So when I simply use bb, what method is it invoking to return the bytearray? Is not using self? I would like to be able to pass the binary_buffer object into a socket.sendto() method as the message. Is there a more 'pythonic' way of doing this?</span>
<span class="comment-copy">@TahitiPetey <code>bytearray.append(x)</code> is (approximately) implemented as <code>self._bytes += x</code>. You can pass in a <code>bytearray</code> object to <code>sendto</code>, but you can always create an immutable bytes object from it with <code>bytes(bb)</code>.</span>
