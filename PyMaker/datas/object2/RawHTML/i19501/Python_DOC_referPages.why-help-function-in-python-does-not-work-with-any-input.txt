<div class="post-text" itemprop="text">
<p>If you for example write <code>help(list)</code>, you will get help about the list object. If you write <code>help(+)</code>, you will get <code>SyntaxError: invalid syntax</code>
Why is this?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>help</code> is an ordinary function, so it takes arguments like any other function. <code>help(list)</code> is valid syntax: it passes the <code>list</code> type to <code>help</code>.</p>
<p>However, <code>help(+)</code> is illegal syntax (+ is an operator, not an expression by itself). In this case, you can use <code>help('+')</code> instead to get help on the <code>+</code> operator.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is because <a href="http://docs.python.org/2/library/functions.html#help" rel="nofollow"><code>help</code></a> is just a function - its argument must be a syntactically valid expression which evaluates to a value.</p>
</div>
<div class="post-text" itemprop="text">
<p>In some languages, you can actually just pass an operator around as a value, either directly (e.g., <code>+</code> is a normal function in Lisp) or with special syntax (e.g., <code>(+)</code> is the <code>+</code> operator as a normal function in Haskell). But that's not true in Python. </p>
<p>The <code>+</code> operator can of course be <em>part</em> of an expression by giving it two operands (<code>2+3</code>) or one (<code>+3</code>), but there's no way to access the value of the <code>+</code> operator itself. (Partly this is because <code>+</code> is actually three different operators—unary add, binary add, and binary concat, so there isn't even such a thing as "the value of the <code>+</code> operator" without context. But the same is true even for operators that aren't ambiguous.)</p>
<p>This is different from types and functions, as you can see:</p>
<pre><code>&gt;&gt;&gt; list
builtins.list
&gt;&gt;&gt; abs
&lt;function builtins.abs&gt;
&gt;&gt;&gt; +
SyntaxError: invalid syntax
</code></pre>
<p>So, you can pass <code>list</code> or <code>abs</code> as an argument to a function—including <code>help</code>—but you can't do that with <code>+</code>.</p>
<p>That's why Python has the <a href="http://docs.python.org/2/library/operator.html" rel="nofollow"><code>operator</code></a> module, to give you "operators as functions" that you can pass around:</p>
<pre><code>&gt;&gt;&gt; import operator
&gt;&gt;&gt; operator.add
&lt;function operator.add&gt;
</code></pre>
<p>But that's not particularly useful in this case:</p>
<pre><code>&gt;&gt;&gt; help(operator.add)
add(...)
    add(a, b) -- Same as a + b.
</code></pre>
<p>Thanks…</p>
<p>Fortunately, the <code>help</code> function has special code for dealing with strings. See nneonneo's answer for what you actually want here.</p>
</div>
<div class="post-text" itemprop="text">
<p>That's because + is an operator, it espects two operands,you could do this:</p>
<pre><code>help(1+1)
</code></pre>
<p>since 1+1 returns an int, help would give you some informations about
the int datatype</p>
</div>
<span class="comment-copy">Not even humans work with all input, how can you expect a computer to manage?</span>
<span class="comment-copy">Well, <code>help('+')</code> isn't going to be very useful, since <code>+</code> is just a string, so you'll get help on the <code>str</code> class, not the addition operator.</span>
<span class="comment-copy">Try it :), Python is that cool :)</span>
<span class="comment-copy">@JasonSperske: Wow, you're right.</span>
<span class="comment-copy">+1. The only thing that's missing from this answer is some kind of explanation that operators (unlike, say, functions) are not valid objects or expressions in Python (which is why we need the <code>operators</code> module, because there's no way to "pass the + operator" or "pass the or operator" to a function).</span>
<span class="comment-copy">This isn't very useful. (Also, if <code>+</code> always expects two operands, why isn't <code>+3</code> an error?)</span>
<span class="comment-copy">@abarnert wouldn't be +3 an integer literal ?</span>
<span class="comment-copy">No. Try this: <code>print(ast.parse('+3').body[0].value)</code>. It's a <code>UnaryOp</code>, with <code>UAdd</code> for the <code>op</code> and a <code>Num</code> with value <code>3</code> for the <code>operand</code>. See <a href="http://docs.python.org/3/reference/expressions.html#unary-arithmetic-and-bitwise-operations" rel="nofollow noreferrer">Unary arithmetic and bitwise operations</a> in the docs for details.</span>
