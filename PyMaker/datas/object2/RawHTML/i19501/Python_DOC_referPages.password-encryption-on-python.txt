<div class="post-text" itemprop="text">
<p>I just create a new aplication in python for registration.
I save all the fields in database and user created successfully but the password is save same as it is we filled at the time of registration.
How do I encrypt or use default functonality of python for password.</p>
<p>Please suggest me?</p>
</div>
<div class="post-text" itemprop="text">
<p>To make offline password cracking more expensive, you could use <a href="http://pypi.python.org/pypi/py-bcrypt/" rel="nofollow">bcrypt</a>.</p>
<p>If you are limited to the stdlib, there is <a href="http://docs.python.org/3/library/crypt" rel="nofollow"><code>crypt</code> module on Unix</a>: </p>
<pre><code>hashed = crypt.crypt(plaintext)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you should hash the passwords, the following code hashes the raw-input password according to your PASSWORD_HASHERS in settings.py</p>
<pre><code>from django.contrib.auth.hashers import make_password
pass = make_password(raw_pass) # hashing is done here
user.set_password(pass)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Don't implement such stuff yourself or you likely will do it wrong.</p>
<p>For password storage, using some reversible encoding or symetric encryption or a simple hash from hashlib or even a randomly salted hash are all major FAILURES nowadays.</p>
<p>If you are using django, use some strong algorithm provided by django (usually one of: bcrypt, pbkdf2, sha512_crypt).</p>
<p>When not using django: use passlib - after reading its documentation.</p>
<p><a href="http://code.google.com/p/passlib/" rel="nofollow">http://code.google.com/p/passlib/</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Hash the password upon getting it from the user (and on registration) to encrypt it. </p>
<pre><code>import hashlib
m = hashlib.sha1()
m.update("My users' password here")
m.digest()
</code></pre>
<p>Ref: <a href="http://docs.python.org/2/library/hashlib.html#module-hashlib" rel="nofollow">http://docs.python.org/2/library/hashlib.html#module-hashlib</a></p>
</div>
<div class="post-text" itemprop="text">
<p>For actual encryption, you can try <a href="http://chandlerproject.org/Projects/MeTooCrypto" rel="nofollow noreferrer">M2Crypto</a> or <a href="https://www.dlitz.net/software/pycrypto/" rel="nofollow noreferrer">PyCrypto</a>. Those are probably what you are looking for; however, there are other ways to obfuscate your passwords for the <em>average</em> user:</p>
<p>(if you would like to read some more answers as to what encryption method might suit you best, check out this somewhat related SO post: <a href="https://stackoverflow.com/questions/1137874/recommended-python-cryptographic-module">Recommended Python cryptographic module?</a></p>
<p><a href="http://docs.python.org/2/library/hashlib.html" rel="nofollow noreferrer">hashlib</a> will provide various hash algorithms (ex. "SHA1, SHA224, SHA256, SHA384, and SHA512"). A simple example: </p>
<pre><code>import hashlib
enc = hashlib.md5()
enc.update("Somerandompassword")
print enc.hexdigest()
</code></pre>
<p>And this will print you the md5 "Somerandompassword":
<code>c5532f9e756b4583db4c627c8aa7d303</code> </p>
<p>However, for (base64) <em>encoding</em>, for example, try:</p>
<pre><code>import base64
enc = base64.b64encode("Somerandompassword")
</code></pre>
<p>and <em>decoding</em></p>
<pre><code>dec = base64.b64decode("U29tZXJhbmRvbXBhc3N3b3Jk")
print dec
</code></pre>
<p>will print: <code>Somerandompassword</code></p>
</div>
<span class="comment-copy">You shouldn't encrypt passwords, you should hash them. <a href="https://docs.djangoproject.com/en/dev/topics/auth/passwords/" rel="nofollow noreferrer">docs.djangoproject.com/en/dev/topics/auth/passwords</a></span>
<span class="comment-copy">read this: <a href="http://www.tarsnap.com/scrypt/scrypt.pdf" rel="nofollow noreferrer">tarsnap.com/scrypt/scrypt.pdf</a></span>
<span class="comment-copy">+1 bcrypt is the best option. In Django (which is what I suspect the author is using, based on his tags), this is called <a href="https://docs.djangoproject.com/en/dev/topics/auth/passwords/" rel="nofollow noreferrer"><code>django.contrib.auth.hashers.BCryptPasswordHasher</code></a></span>
<span class="comment-copy">md5 is not an encryption method, but a hash method. And it can't be decrypted (which is the whole point). Other than that, md5 is not really suited for password hashing anymore, use something stronger for that.</span>
<span class="comment-copy">That's a very good point. You're definitely correct on that one. My fault.</span>
<span class="comment-copy">base64 is not encryption, it's an encoding method. It's just as bad as plain text (everybody can decode it).</span>
<span class="comment-copy">If I am using hash then error comes "500 internal serve"...But now I found the solution..You just need to use this.. value.set_password("your password variable or password")</span>
