<div class="post-text" itemprop="text">
<p>I want to ensure that a certain condition in my code causes a log message to be written to the django log. How would I do this with the Django unit testing framework?</p>
<p>Is there a place where I can check logged messages, similarly to how I can check sent emails? My unit test extends <code>django.test.TestCase</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using the <a href="http://www.voidspace.org.uk/python/mock/" rel="noreferrer"><code>mock</code></a> module for mocking the logging module or the logger object. When you've done that, check the arguments with which the logging function is called.</p>
<p>For example, if you code looks like this:</p>
<pre><code>import logging

logger = logging.getLogger('my_logger')

logger.error("Your log message here")
</code></pre>
<p>it would look like:</p>
<pre><code>from unittest.mock import patch # For python 2.x use from mock import patch

@patch('this.is.my.module.logger')
def test_check_logging_message(self, mock_logger):
    mock_logger.error.assert_called_with("Your log message here")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The common way of mocking out the logger object (see the splendid chap Simeon Visser's answer) is slightly tricky in that it requires the test to mock out the logging in all the places it's done. This is awkward if the logging comes from more than one module, or is in code you don't own. If the module the logging comes from changes name, it will break your tests.</p>
<p>The splendid '<a href="http://pythonhosted.org/testfixtures/logging.html" rel="noreferrer">testfixtures</a>' package includes tools to add a logging handler which captures all generated log messages, no matter where they come from. The captured messages can later be interrogated by the test. In its simplest form:</p>
<p>Assuming code-under-test, which logs:</p>
<pre><code>import logging
logger = logging.getLogger()
logger.info('a message')
logger.error('an error')
</code></pre>
<p>A test for this would be:</p>
<pre><code>from testfixtures import LogCapture
with LogCapture() as l:
    call_code_under_test()
l.check(
    ('root', 'INFO', 'a message'),
    ('root', 'ERROR', 'an error'),
)
</code></pre>
<p>The word 'root' indicates the logging was sent via a logger created using <code>logging.getLogger()</code> (i.e. with no args.) If you pass an arg to getLogger (<code>__name__</code> is conventional), that arg will be used in place of 'root'.</p>
<p>The test does not care what module created the logging. It could be a sub-module called by our code-under-test, including 3rd party code.</p>
<p>The test asserts about the actual log message that was generated, as opposed to the technique of mocking, which asserts about the args that were passed. These will differ if the logging.info call uses '%s' format strings with additional arguments that you don't expand yourself (e.g. use <code>logging.info('total=%s', len(items))</code> instead of <code>logging.info('total=%s' % len(items))</code>, which you should. It's no extra work, and allows hypothetical future logging aggregation services such as 'Sentry' to work properly - they can see that "total=12" and "total=43" are two instances of the same log message. That's the reason why pylint warns about the latter form of <code>logging.info</code> call.)</p>
<p>LogCapture includes facilities for log filtering and the like. Its parent 'testfixtures' package, written by Chris Withers, another splendid chap,  includes many other useful testing tools. Documentation is here: <a href="http://pythonhosted.org/testfixtures/logging.html" rel="noreferrer">http://pythonhosted.org/testfixtures/logging.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can also use <code>assertLogs</code> from <code>django.test.TestCase</code></p>
<p>When you code is</p>
<pre><code>import logging

logger = logging.getLogger('my_logger')

def code_that_throws_error_log():
    logger.error("Your log message here")
</code></pre>
<p>This is the test code.</p>
<pre><code>with self.assertLogs(logger='my_logger', level='ERROR') as cm:

    code_that_throws_error_log()

    self.assertIn(
        "ERROR:your.module:Your log message here",
        cm.output
    )
</code></pre>
<p>This lets you avoid patching just for logs.</p>
</div>
<div class="post-text" itemprop="text">
<p>Django has a nice context manager function called <code>patch_logger</code>.</p>
<pre><code>from django.test.utils import patch_logger
</code></pre>
<p>then in your test case:</p>
<pre><code>with patch_logger('logger_name', 'error') as cm:
    self.assertIn("Error message", cm)
</code></pre>
<p>where:</p>
<ul>
<li><code>logger_name</code> is the logger name (duh)</li>
<li><code>error</code> is the log level</li>
<li><code>cm</code> is the list of all log messages</li>
</ul>
<p>More details:</p>
<p><a href="https://github.com/django/django/blob/2.1/django/test/utils.py#L638" rel="nofollow noreferrer">https://github.com/django/django/blob/2.1/django/test/utils.py#L638</a></p>
<p>It should work the same for django &lt; 2.0, independently of python version (as long as it's supported by dj)</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're using test classes, you can use following solution:</p>
<pre><code>import logger

from django.test import TestCase


class MyTest(TestCase):
    @classmethod
    def setUpClass(cls):
        super(MyTest, cls).setUpClass()
        cls.logging_error = logging.error
        logging.error = cls._error_log

    @classmethod
    def tearDownClass(cls):
        super(MyTest, cls).tearDownClass()
        logging.error = cls.logging_error

    @classmethod
    def _error_log(cls, msg):
      cls.logger = msg

    def test_logger(self):
        self.assertIn('Message', self.logger)
</code></pre>
<p>This method replaces <code>error</code> function of <code>logging</code> module with your custom method only for test purposes and put stdout into <code>cls.logger</code> variable which is available in every test case by calling <code>self.logger</code>. At the end it reverts changes by placing <code>error</code> function from <code>logging</code> module back.</p>
</div>
<span class="comment-copy">Small thing... from Python 3.3 onwards the import for the test should be <code>from unittest.mock import patch</code>. Otherwise, still good!</span>
<span class="comment-copy">@Simeon Visser how to do it with mock, if inside the logging call, we're passing an exception ? Something like "logger.exception(KeyError('test'))" This way the "assert_called_with" won't catch it since I guess the references for KeyError object's are different. (i.e. they're not simple strings anymore).</span>
<span class="comment-copy">@SpiXel: you could look at the contents of mock_logger.error.call_args_list and make assertions about the arguments. For example, it would be something like: <code>assert "Test" in str(my_logging_argument)</code> or <code>self.assertEqual(str(my_logging_argument), "KeyError('test')"</code>. See: <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.call_args_list" rel="nofollow noreferrer">docs.python.org/3/library/…</a></span>
<span class="comment-copy">@SimeonVisser Yes ! That works. thank you :) (Have to admit it's a little bit messy though, since the message strings, inside the exception, are escaped 'KeyError(\\'test\\')' and ..., but definitely works!)</span>
<span class="comment-copy">@SpiXel: it should be possible to clean that up by changing the code that constructs the string that gets passed to <code>logger.exception(...).</code> That's where the string gets passed so what you see in the call_args_list is just the same as that.</span>
<span class="comment-copy">Good work Jonathan! :)</span>
<span class="comment-copy"><a href="http://pythonhosted.org/testfixtures/logging.html" rel="nofollow noreferrer">pythonhosted.org/testfixtures/logging.html</a> URL is broken.</span>
<span class="comment-copy">Note: as of python 3.4, unittest provides assertLogs(): <a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertLogs" rel="nofollow noreferrer">docs.python.org/3/library/…</a></span>
<span class="comment-copy"><code>django.test.TestCase.assertLogs</code> is being provided by <code>unittest.TestCase.assertLogs</code> in Python 3.4+ and isn't polyfilled for Python 2.7, FWIW. The <code>patch_logger</code> util from below is the only option for Python 2.7 users. See <a href="https://github.com/django/django/pull/9905" rel="nofollow noreferrer">github.com/django/django/pull/9905</a></span>
<span class="comment-copy">Where is this in the docs, BTW? So helpful!</span>
<span class="comment-copy">There's no official docs for this. It's a just a habit of mine to look into django utils source code when I'm really bored.. ;)</span>
<span class="comment-copy">I think you should use the <code>mock.patch</code> function instead of <code>setUpClass</code> and <code>tearDownClass</code>.</span>
