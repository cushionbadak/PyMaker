<div class="post-text" itemprop="text">
<p>I've been looking for ways to clean up objects in python.
I'm currently using pypy.</p>
<p>I found a web page and an example.</p>
<p>First a basic example:</p>
<pre><code>class FooType(object):
    def __init__(self, id):
        self.id = id
        print self.id, 'born'

    def __del__(self):
        print self.id, 'died'


ft = FooType(1)
</code></pre>
<p>This SHOULD print:</p>
<p>1 born
1 died</p>
<p>BUT it just prints
1 born</p>
<p>So my question is: how do I clean anything up in PyPy?</p>
</div>
<div class="post-text" itemprop="text">
<p>When you need a "cleanup" to run for sure at a specific time, use a <a href="http://docs.python.org/3/reference/datamodel.html#context-managers" rel="nofollow">context manager</a>.</p>
<pre><code>class FooType(object):
    def __init__(self, id):
        self.id = id
        print 'born'
    def __enter__(self):
        print 'entered'
        return self
    def __exit__(self, *exc):
        print 'exited'

with FooType(1) as ft:
    pass # do something with ft
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The same way you <em>should</em> do it in every other Python implementation, <em>including CPython</em>: By explicitly managing the lifetime in code, rather than by relying on automatic memory management and <code>__del__</code>.</p>
<p>Even in CPython, there's more than one case where <code>__del__</code> is not called <strong>at all</strong>, and quite a few cases where it's called much later than you might expect (e.g., any time any object gets caught up in a reference cycle, which can happen quite easily). That means it's essentially useless, except perhaps to debug lifetime issues (but there are memory profilers for that!) and as a <strong>last resort</strong> if some code neglects cleaning up explicitly.</p>
<p>By being explicit about cleanup, you sidestep all these issues. Have a method that does the cleanup, and make client code call it at the right time. Context managers can make this easier to get right in the face of exceptions, and more readable. It often also allows cleaning up sooner than <code>__del__</code>, even <em>if</em> reference counting "immediately" calls <code>__del__</code>. For example, this:</p>
<pre><code>def parse_file(path):
    f = open(path)
    return parse(f.read()) # file stays open during parsing
</code></pre>
<p>is worse than this w.r.t. resource usage:</p>
<pre><code>def parse_file(path):
    with open(path) as f:
        s = f.read()
    # file is closed here
    return parse(s)
</code></pre>
<p>I would also argue that such a design is cleaner, because it doesn't confuse the lifetime of the resource wrapper object with the lifetime of the wrapped resource. Sometimes, it can make sense to have that object outlive the resource, or even make it take ownership of a new resource.</p>
</div>
<div class="post-text" itemprop="text">
<p>In your example, <code>__del__</code> is not called, but that's only because the test program you wrote finishes immediately.  PyPy guarantees that <code>__del__</code> is called some time after the object is not reachable any more, but only as long as the program continues to execute.  So if you do <code>ft = FooType(1)</code> in an infinite loop, it will after some time print the <code>died</code> too.</p>
<p>As the other answers explain, CPython doesn't really guarantee anything, but in simple cases (e.g. no reference cycles) it will call <code>__del__</code> immediately and reliably.  Still, the point is that you shouldn't strictly rely on this.</p>
</div>
<span class="comment-copy">Python doesn't do RAII; PyPy uses garbage collection, and destructors are never guaranteed to run.</span>
<span class="comment-copy">Depends on garbage collection... The interpreter may not release the object until it needs more memory. CPython uses reference counting and releases it as soon as there's no more references</span>
<span class="comment-copy">Are you even calling <code>del ft</code>?</span>
<span class="comment-copy">@Hidde As <code>del</code> only removes the reference, rather than calling <code>__del__</code> or forcing GC, it doesn't usually matter.</span>
