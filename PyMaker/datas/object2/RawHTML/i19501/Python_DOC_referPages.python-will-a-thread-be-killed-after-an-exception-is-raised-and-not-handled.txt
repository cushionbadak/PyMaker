<div class="post-text" itemprop="text">
<p>The official documentation <a href="http://docs.python.org/3/library/queue.html" rel="nofollow">here</a> gives the following example:</p>
<pre><code>def worker():
    while True:
        item = q.get()
        do_work(item)
        q.task_done()

q = Queue()
for i in range(num_worker_threads):
    t = Thread(target=worker)
    t.daemon = True
    t.start()

for item in source():
    q.put(item)

q.join()       # block until all tasks are done
</code></pre>
<p>I want to make sure all the threads are killed at this point before my main thread proceeds. I suppose after all the tasks in the queue have been processed, the q.get() method will raise an exception, which should kill the thread. Is that correct?</p>
</div>
<div class="post-text" itemprop="text">
<p>No. If there are no items in the queue, <code>get</code> will, by default, wait for items to be put into the queue. If you want it to raise an exception when there are no more items, either pass it <code>block=False</code> or use <code>get_nowait</code>.</p>
<p>Once you're using the non-blocking <code>get</code>, it should all work, but it is rather inelegant for your threads to die because of a raised exception in the normal case. I'd recommend surrounding it with a <code>try</code> block, and if it throws an exception due to the queue being empty, stop the thread cleanly:</p>
<pre><code>try:
    item = q.get(block=False)
except queue.Empty:
    return
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>if any of <code>do_work()</code>'s calls raise an exception then the thread that runs it will exit. Your main thread will <em>block forever</em> on <code>q.join()</code>  because <code>q.get()</code> hasn't been followed by <code>q.task_done()</code> in this case.</p>
<p>You could rewrite the example using a thread pool:</p>
<pre><code>from multiprocessing.dummy import Pool # use threads

p = Pool(num_worker_threads)    
for _ in p.imap_unordered(do_work, source()):
    pass
p.close()
p.join() # no threads after this point
</code></pre>
<p>In this case, if <code>do_work()</code> raises an exception; it is propagated to the main thread and it exits (pool threads are daemonic so they do not keep the program running).</p>
<p>Another alternative to the <code>Queue</code>-based solution is to put sentinel values into the queue (one value per thread) and exit <code>worker()</code> if a sentinel is encountered, <a href="https://stackoverflow.com/a/9874484/4279">example</a>:</p>
<pre><code>STOP = object()

def worker(queue):
    for item in iter(queue.get, STOP): # until STOP is encountered
        do_work(item)

# instead of `q.join()`
for _ in threads: q.put(STOP)
for t in threads: t.join() # no threads after this point
</code></pre>
</div>
<span class="comment-copy">Got it. Thanks!</span>
