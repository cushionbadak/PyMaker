<div class="post-text" itemprop="text">
<p>I have a sqlalchemy result</p>
<pre><code>labels = session.query(
         LabelsData, 
         LabelsData.id, 
         LabelsData.name, 
         LabelsData.color
         ).filter(LabelsData.deleted==False).all()
</code></pre>
<p>And I want convert this result to JSON, but how I can do it?  </p>
</div>
<div class="post-text" itemprop="text">
<p>It looks like your <code>LabelsData</code> object is a SQLAlchemy model. You need to serialize it before dumping it to JSON. Here's a short example that extracts all the columns from your <code>LabelsData</code> object and converts the results of your query to JSON:</p>
<pre><code>from json import dumps
from sqlalchemy.orm import class_mapper

def serialize(model):
  """Transforms a model into a dictionary which can be dumped to JSON."""
  # first we get the names of all the columns on your model
  columns = [c.key for c in class_mapper(model.__class__).columns]
  # then we return their values in a dict
  return dict((c, getattr(model, c)) for c in columns)

# we can then use this for your particular example
serialized_labels = [
  serialize(label)
  for label in session.query(LabelsData).filter(LabelsData.deleted == False)
]
your_json = dumps(serialized_labels)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from collections import OrderedDict

class DictSerializable(object):
    def _asdict(self):
        result = OrderedDict()
        for key in self.__mapper__.c.keys():
            result[key] = getattr(self, key)
        return result
</code></pre>
<p>From <a href="http://piotr.banaszkiewicz.org/blog/2012/06/30/serialize-sqlalchemy-results-into-json/" rel="nofollow">here</a> and appearing to require <a href="http://github.com/simplejson/simplejson" rel="nofollow">simplejson</a>. Hope that helps...</p>
<p>UPDATE: on a second look, it's a dictionary, which you <strong>can</strong> dump by any of the json modules in python.</p>
</div>
<div class="post-text" itemprop="text">
<p>Looks like sqlalchemy already has one
<a href="http://docs.sqlalchemy.org/en/latest/core/serializer.html" rel="nofollow">http://docs.sqlalchemy.org/en/latest/core/serializer.html</a></p>
<pre><code>from sqlalchemy.ext.serializer import loads, dumps
metadata = MetaData(bind=some_engine)
Session = scoped_session(sessionmaker())

# ... define mappers

query = Session.query(MyClass).filter(MyClass.somedata=='foo').order_by(MyClass.sortkey)

# pickle the query
serialized = dumps(query)

# unpickle.  Pass in metadata + scoped_session
query2 = loads(serialized, metadata, Session)

print query2.all()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This blog post provided the solution I went with:
<a href="http://blogs.gnome.org/danni/2013/03/07/generating-json-from-sqlalchemy-objects/" rel="nofollow noreferrer">http://blogs.gnome.org/danni/2013/03/07/generating-json-from-sqlalchemy-objects/</a></p>
<p>The strategy used was to include a .todict method directly to a Base mixin which iterates over the parent class's sqlalchemy columns. </p>
<p>Alternatively, <a href="https://stackoverflow.com/users/260242/nande">Nande</a>'s approach (<a href="https://stackoverflow.com/a/19602809/837575">https://stackoverflow.com/a/19602809/837575</a>) to use sqlalchemy.ext.serializer works well if you're trying to serialize data over the wire but don't necessarily need it as json.</p>
</div>
<div class="post-text" itemprop="text">
<p>I add this anwser as it is a mix of @mekarpeles and @hd1. I mean I did not modified the sqlalchemy hierarchy of objects, just delegating to a simple <a href="https://docs.python.org/3/library/json.html" rel="nofollow">JSONEncoder</a>:</p>
<pre><code># given that you have 
Base = declarative_base()

class SqlAlchemyModelEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, Base):
            result = OrderedDict()
            for key in obj.__mapper__.c.keys():
                result[key] = getattr(obj, key)
            return result
        return json.JSONEncoder.default(self, obj)
</code></pre>
<p>If your models use not serializable classes (datetime for example) you have to add them to the Encoder :</p>
<pre><code>if isinstance(obj, datetime):
    return obj.isoformat()
</code></pre>
<p>And then I use it with a jinja2 context filter :</p>
<pre><code>@contextfilter
def tojson(ctx, model, *elements, **kw):
    return json.dumps(model, cls=SqlAlchemyModelEncoder)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://github.com/TaylorHere/PythonSerializer" rel="nofollow">https://github.com/TaylorHere/PythonSerializer</a><br/>
the link above can give you a hand , It's a small script that can simply serialize sql query result to list or dict ,just like this:  </p>
<pre><code>#Useage with flask and SQLalchemy
from serializer import serializer
def my_location():
    if request.method == 'GET':
        user = db_session.query(User).filter(
        User.openid == session['user_id']).first()
        addresses = user.addresses
        return jsonify({'data': serializer(addresses.instance, 'sqlalchemy')})
</code></pre>
</div>
<span class="comment-copy">umm, <a href="http://docs.python.org/2/library/json.html" rel="nofollow noreferrer"><code>json</code></a>?</span>
<span class="comment-copy">yes, but sqlalchemy result can not coded by json :(</span>
<span class="comment-copy">You can use snippet from my answer  <a href="http://stackoverflow.com/questions/7102754/jsonify-a-sqlalchemy-result-set-in-flask/14322313#14322313" title="jsonify a sqlalchemy result set in flask">stackoverflow.com/questions/7102754/â€¦</a></span>
<span class="comment-copy">Need to handle datetime values that can not be serialized directly .. using something like given below :: def handler(o): if hasattr(o, 'isoformat') and callable(o.isoformat): return o.isoformat() raise TypeError("Can't serialize %r" % (o,))  jsonize = lambda d: json.dumps(d, default=_handler) courstey 'Thomas Dignan' at <a href="http://piotr.banaszkiewicz.org/blog/2012/06/30/serialize-sqlalchemy-results-into-json/" rel="nofollow noreferrer">link</a></span>
<span class="comment-copy">This seems to apply only to the query itself, not the data contained therein.  I think the OP is asking about encoding the results of a query object as json.</span>
<span class="comment-copy">Linked blog article has no code-formatting. Only black/white blobs of text.</span>
