<div class="post-text" itemprop="text">
<p>Goal:
Extend abitrary classes with roles that are only valid in a certain context.</p>
<p>This works:</p>
<pre><code># from https://github.com/niccokunzmann/wwp/blob/master/C_builtinTypes.py
from relative import roleOf, useRoles

@roleOf(int)
class NaturalNumber:
    # int gets successor only in this module
    @property
    def successor(self):
        return 1 + self

@roleOf(tuple)
@roleOf(list)
class MyList:
    @property
    def first(self):
        return self[0]

@useRoles
def test():
    # this is possible if we recompile the code objects
    i = 1
    print(type(i))
    assert i.successor == 2
    assert i.successor.successor == 3
    assert isinstance(i, int) # EDIT3 works
    # check for identity
    t = (3,)
    assert t.first == 3
    l = list() 
    l.append(3)
    assert l.first == 3 # this assertion fails
    assert l.first == 2 + 1

if __name__ == '__main__':
    test()
</code></pre>
<p>My Problem:</p>
<p><strong>EDIT2:</strong> I wrote 100 lines of code for usual python classes to make this work but for builtins I added 250 lines and there is no complete solution in sight.</p>
<p>I can not create custom classes for builtin objects as I can with pure python classes as <a href="https://github.com/niccokunzmann/wwp/blob/master/A.py" rel="nofollow">link:A</a> or <a href="https://github.com/niccokunzmann/wwp/blob/master/B.py" rel="nofollow">link:B</a>.
This is because the compiler puts them everywhere:</p>
<pre><code>&gt;&gt;&gt; test.__code__.co_consts
(None, 1, 2, 3, (3,), 3)
</code></pre>
<p>I can not do the replacement in code objects with lists because they are built in the code.</p>
<p>These are my questions because I can not estimate it:</p>
<ul>
<li><p>What are the places I have to look for builtin objects to replace them with wrappers so I can add roles to them?</p></li>
<li><p>would an C-extension help me patch the attribute lookup so I can make roles for booleans</p></li>
<li><p>will I need to compile my own python to make this idea work?</p></li>
<li><p>is there another solution?</p></li>
</ul>
<p><strong>EDIT 1</strong></p>
<p>This is one of my Use-cases: <code>1 .successor.successor == 3</code>.
I want to make it easy to have small domains that do not interfer with the whole program = keep classes slim.</p>
<p>For example I want to make numbers callable to create a lambda calculus.</p>
<p>I want to have slim classes and for special use cases I want to extend them by roles so I can call custom functions on them.
I the end something between <a href="http://de.wikipedia.org/wiki/Data_Context_Interaction" rel="nofollow">Data-Context-Interaction</a> and Context-Oriented Programming should come out.</p>
</div>
<div class="post-text" itemprop="text">
<p>Can you provide some more information on your use-case?  I think you want to look into metaclasses but not sure without more information on your specific needs.  And I think there's something wrong or too clever if you want to replace builtins.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you want to look into Abstract Base Classes:</p>
<p><a href="http://docs.python.org/3/library/abc.html" rel="nofollow">http://docs.python.org/3/library/abc.html</a></p>
</div>
<span class="comment-copy">If you want to change type of objects created by literals; you might need an on-the-fly source rewrite e.g., see how <a href="http://mtomassoli.wordpress.com/2012/04/20/code-blocks-in-python/" rel="nofollow noreferrer"><code>codeblocks</code> implemented</a></span>
<span class="comment-copy">this talk at minute 33 was helpful <a href="http://www.youtube.com/watch?v=ANhTacigaf8&amp;feature=youtu.be" rel="nofollow noreferrer">youtube.com/watch?v=ANhTacigaf8&amp;feature=youtu.be</a></span>
<span class="comment-copy">I really want to make this possible with builtins, too. it is working with usal classes very well but builtins are essential I think. Could also be a bad idea to change builtins that way. Could be ok if one can wrap them explicitly.</span>
<span class="comment-copy"><code>assert isinstance(i, int)</code> works for me already. Do you have a specific idea of what I may find there to help me? I know the concept but can not see how it should be applied.</span>
<span class="comment-copy">This only helps me with <code>__isinstance__</code> but not with adding new functions to tuple</span>
