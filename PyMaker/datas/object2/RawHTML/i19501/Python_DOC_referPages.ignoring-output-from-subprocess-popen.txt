<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/5495078/how-to-read-the-first-byte-of-a-subprocesss-stdout-and-then-discard-the-rest-in">How to read the first byte of a subprocess's stdout and then discard the rest in Python?</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I am calling a java program from my Python script, and it is outputting a lot of useless information I don't want. I have tried addind <code>stdout=None</code> to the Popen function:</p>
<pre><code>subprocess.Popen(['java', '-jar', 'foo.jar'], stdout=None)
</code></pre>
<p>But it does the same. Any idea?</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="http://docs.python.org/3/library/subprocess.html#frequently-used-arguments" rel="noreferrer">3.3 documentation</a>:</p>
<blockquote>
<p>stdin, stdout and stderr specify the executed program’s standard input, standard output and standard error file handles, respectively. Valid values are PIPE, DEVNULL, an existing file descriptor (a positive integer), an existing file object, and None.</p>
</blockquote>
<p>So:</p>
<pre><code>subprocess.check_call(['java', '-jar', 'foo.jar'], stdout=subprocess.DEVNULL)
</code></pre>
<p>This only exists in 3.3 and later. But the documentation says:</p>
<blockquote>
<p>DEVNULL indicates that the special file os.devnull will be used.</p>
</blockquote>
<p>And <code>os.devnull</code> exists way back to 2.4 (before <code>subprocess</code> existed). So, you can do the same thing manually:</p>
<pre><code>with open(os.devnull, 'w') as devnull:
    subprocess.check_call(['java', '-jar', 'foo.jar'], stdout=devnull)
</code></pre>
<p>Note that if you're doing something more complicated that doesn't fit into a single line, you need to keep <code>devnull</code> open for the entire life of the <code>Popen</code> object, not just its construction. (That is, put the whole thing inside the <code>with</code> statement.)</p>
<p>The advantage of redirecting to <code>/dev/null</code> (POSIX) or <code>NUL:</code> (Windows) is that you don't create an unnecessary pipe, and, more importantly, can't run into edge cases where the subprocess blocks on writing to that pipe.</p>
<p>The disadvantage is that, in theory, <code>subprocess</code> may work on some platforms that <code>os.devnull</code> does not. If you only care about CPython on POSIX and Windows, PyPy, and Jython (which is most of you), this will never be a problem. For other cases, test before distributing your code.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="http://docs.python.org/2/library/subprocess.html#frequently-used-arguments">documentation</a>:</p>
<blockquote>
<p>With the default settings of <code>None</code>, no redirection will occur.</p>
</blockquote>
<p>You need to set <code>stdout</code> to <code>subprocess.PIPE</code>, then call <code>.communicate()</code> and simply ignore the captured output.</p>
<pre><code>p = subprocess.Popen(['java', '-jar', 'foo.jar'], stdout=subprocess.PIPE)
p.communicate()
</code></pre>
<p>although I suspect that using <code>subprocess.call()</code> more than suffices for your needs:</p>
<pre><code>subprocess.call(['java', '-jar', 'foo.jar'], stdout=subprocess.PIPE)
</code></pre>
</div>
<span class="comment-copy">+1: for devnull. Make sure <code>devnull</code> stays open while the subprocess is alive (the with-statement implies otherwise). The last paragraph seems unnecessary: DEVNULL is implemented via os.devnull in CPython. os.devnull works with Jython.</span>
<span class="comment-copy">@J.F.Sebastian: After the <code>check_call</code> (which is inside the <code>with</code>), <code>devnull</code> is no longer needed. But yeah, maybe I should clarify that for more complex use cases that don't fit into a single line, the whole thing needs to be inside the <code>with</code>, not just the <code>Popen</code>.</span>
<span class="comment-copy">@J.F.Sebastian: Meanwhile, for <code>os.devnull</code>, is it actually guaranteed to exist on every platform that <code>subprocess</code> exists on, so there's no need to "check before using", or do you just know that it also exists on Jython and therefore I should move Jython into the list of platforms you don't need to check?</span>
<span class="comment-copy">After <code>check_call()</code> the subprocess is not alive so the point about <code>devnull</code> is mute (OP uses Popen). Do you know any platform where subprocess module works but os.devnull doesn't?</span>
<span class="comment-copy">@J.F.Sebastian: On the first part, I'm not sure what your point is now; you seem to be repeating the same thing that I said in reply to your first comment. Are you agreeing with me, or am I missing something? On the second part, I don't know of any such platform, but I don't know for sure that there is no such platform, so I think "check before distributing" is good advice (with the "in theory… in practice…" qualifications I gave in the answer, because most people have nothing to check).</span>
<span class="comment-copy">@sjtaheri: thanks for the correction, I applied it myself.</span>
<span class="comment-copy">Creating and ignoring a pipe usually works, but it can lead to the child process blocking if it does too much writing (and of course it may work on your system and fail for one of your users), so I think it really isn't safe to just <code>call</code> here instead of <code>communicate</code>. That's pretty much why <code>DEVNULL</code> was added—so you <i>can</i> just <code>call</code> and not worry about it. (Well, it's there for the slightly more complicated case, where you set <code>stderr=DEVNULL</code> but not <code>stdout</code>, and just <code>check_output</code>. But same idea.)</span>
<span class="comment-copy">@abarnert: Ah, wasn't aware that was added; just found it in the Python 3 documentation.</span>
