<div class="post-text" itemprop="text">
<p>I need to stripe the white spaces from a CSV file that I read </p>
<pre><code>import csv

aList=[]
with open(self.filename, 'r') as f:
    reader = csv.reader(f, delimiter=',', quoting=csv.QUOTE_NONE)
    for row in reader:
        aList.append(row)
    # I need to strip the extra white space from each string in the row
    return(aList)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's also the embedded formatting parameter: skipinitialspace (the default is false)
<a href="http://docs.python.org/2/library/csv.html#csv-fmt-params" rel="noreferrer">http://docs.python.org/2/library/csv.html#csv-fmt-params</a></p>
<pre><code>aList=[]
with open(self.filename, 'r') as f:
    reader = csv.reader(f, skipinitialspace=False,delimiter=',', quoting=csv.QUOTE_NONE)
    for row in reader:
        aList.append(row)
    return(aList)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In my case, I only cared about stripping the whitespace from the <strong>field names</strong> (aka column headers, aka dictionary keys), when using <a href="https://docs.python.org/2/library/csv.html#csv.DictReader" rel="nofollow noreferrer"><code>csv.DictReader</code></a>.</p>
<p>Create a class based on <code>csv.DictReader</code>, and override the <code>fieldnames</code> property to strip out the whitespace from each field name (aka column header, aka dictionary key).</p>
<p>Do this by getting the regular list of fieldnames, and then iterating over it while creating a new list with the whitespace stripped from each field name, and setting the underlying <code>_fieldnames</code> attribute to this new list.</p>
<pre><code>import csv

class DictReaderStrip(csv.DictReader):
    @property                                    
    def fieldnames(self):
        if self._fieldnames is None:
            # Initialize self._fieldnames
            # Note: DictReader is an old-style class, so can't use super()
            csv.DictReader.fieldnames.fget(self)
            if self._fieldnames is not None:
                self._fieldnames = [name.strip() for name in self._fieldnames]
        return self._fieldnames
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>with open(self.filename, 'r') as f:
    reader = csv.reader(f, delimiter=',', quoting=csv.QUOTE_NONE)
    return [[x.strip() for x in row] for row in reader]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do:</p>
<pre><code>aList.append([element.strip() for element in row])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can create a wrapper object around your file that strips away the spaces before the CSV reader sees them. This way, you can even use the csv file with cvs.DictReader.</p>
<pre><code>import re

class CSVSpaceStripper:
  def __init__(self, filename):
    self.fh = open(filename, "r")
    self.surroundingWhiteSpace = re.compile("\s*;\s*")
    self.leadingOrTrailingWhiteSpace = re.compile("^\s*|\s*$")

  def close(self):
    self.fh.close()
    self.fh = None

  def __iter__(self):
    return self

  def next(self):
    line = self.fh.next()
    line = self.surroundingWhiteSpace.sub(";", line)
    line = self.leadingOrTrailingWhiteSpace.sub("", line)
    return line
</code></pre>
<p>Then use it like this:</p>
<pre><code>o = csv.reader(CSVSpaceStripper(filename), delimiter=";")
o = csv.DictReader(CSVSpaceStripper(filename), delimiter=";")
</code></pre>
<p>I hardcoded <code>";"</code> to be the delimiter. Generalising the code to any delimiter is left as an exercise to the reader.</p>
</div>
<div class="post-text" itemprop="text">
<p>Read a CSV (or Excel file) using Pandas and trim it using this custom function.</p>
<pre><code>#Definition for strippping whitespace
def trim(dataset):
    trim = lambda x: x.strip() if type(x) is str else x
    return dataset.applymap(trim)
</code></pre>
<p>You can now apply trim(CSV/Excel) to your code like so (as part of a loop, etc.)</p>
<pre><code>dataset = trim(pd.read_csv(dataset))
dataset = trim(pd.read_excel(dataset))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The most memory-efficient method to format the cells after parsing is through <a href="https://wiki.python.org/moin/Generators" rel="nofollow noreferrer">generators</a>. Something like:</p>
<pre class="lang-py prettyprint-override"><code>with open(self.filename, 'r') as f:
    reader = csv.reader(f, delimiter=',', quoting=csv.QUOTE_NONE)
    for row in reader:
        yield (cell.strip() for cell in row)
</code></pre>
<p>But it may be worth moving it to a function that you can use to keep munging and to avoid forthcoming iterations. For instance:</p>
<pre class="lang-py prettyprint-override"><code>nulls = {'NULL', 'null', 'None', ''}

def clean(reader):
    def clean(row):
        for cell in row:
            cell = cell.strip()
            yield None if cell in nulls else cell

    for row in reader:
        yield clean(row)
</code></pre>
<p>Or it can be used to factorize a class:</p>
<pre class="lang-py prettyprint-override"><code>def factory(reader):
    fields = next(reader)

    def clean(row):
        for cell in row:
            cell = cell.strip()
            yield None if cell in nulls else cell

    for row in reader:
        yield dict(zip(fields, clean(row)))
</code></pre>
</div>
<span class="comment-copy">To stripe white spaces: <code>reader = csv.reader(f, skipinitialspace=True,delimiter=',', quoting=csv.QUOTE_NONE)</code>, right?</span>
<span class="comment-copy">If your whitespace is only to the left of the field name like <code>'     date'</code> and not <code>'date    '</code> or <code>'   date    '</code>, <a href="https://docs.python.org/3/library/csv.html#csv.Dialect.skipinitialspace" rel="nofollow noreferrer"><code>csv.DictReader(csvfile, skipinitialspace=True)</code></a> works just as well.</span>
<span class="comment-copy">This is the best possible solution using the <code>csv</code> module. The <code>Reader</code> class returned by the <code>csv.reader()</code> function isn't exposed in the <code>csv</code> or <code>_csv</code> module to allow overriding its <code>next()</code> method.</span>
<span class="comment-copy">@CivFan It's even better to yield a generator, especially with big files: <code>for row in reader: yield (c.strip() for c in row)</code></span>
<span class="comment-copy">Expanding this solution to the general case would end up in a re-write of the <code>csv</code> module.</span>
