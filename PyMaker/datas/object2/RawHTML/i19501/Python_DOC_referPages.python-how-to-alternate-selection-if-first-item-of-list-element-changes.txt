<div class="post-text" itemprop="text">
<p>I couldn't find an algorithm to solve this simple problem:</p>
<p>a list:</p>
<pre><code>  lista:  [[1,a],[1,b],[1,a],[2,s],[2,r],[3,e],[3,k],[3,t],[3,y]....]
</code></pre>
<p>I'm iterating over this list,
for iterations where first item of inner list is same with next iterarion, alternate between x and y</p>
<pre><code>[1,a] --&gt; x
[1,b] --&gt; x
[1,a] --&gt; x
[2,s] --&gt; y
[2,r] --&gt; y
[3,e] --&gt; x
[3,k] --&gt; x
[3,t] --&gt; x
[3,y] --&gt; x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>lista = [[1,'a'],[1,'b'],[1,'a'],[2,'s'],[2,'r'],[3,'e'],[3,'k'],[3,'t'],[3,'y']]

&gt;&gt;&gt; last_a = None
&gt;&gt;&gt; toggle = 'y'
&gt;&gt;&gt; for a, b in lista:
...     if last_a != a:
...         toggle = 'x' if toggle != 'x' else 'y'
...         last_a = a
...     print(a, b, toggle)
... 
(1, 'a', 'x')
(1, 'b', 'x')
(1, 'a', 'x')
(2, 's', 'y')
(2, 'r', 'y')
(3, 'e', 'x')
(3, 'k', 'x')
(3, 't', 'x')
(3, 'y', 'x')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So, there are probably more efficient ways of doing this, but I like any excuse to use itertools!</p>
<pre><code>from itertools import cycle

lista = [[1, 'x'], [1, 'x'], [1, 'x'], [2, 'x'], [2, 'x'], [3, 'x'], [3, 'x'], [3, 'x'], [3, 'x']]
r = cycle(['x','y'])

last = None
for first, second in lista:
  current = first
  if current != last:
    output = r.next()
  last = current
  print output
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another <code>itertools</code> approach:</p>
<pre><code>&gt;&gt;&gt; from itertools import chain, cycle, groupby
&gt;&gt;&gt; c = cycle('xy')
&gt;&gt;&gt; grouped = groupby(lista, lambda x: x[0])
&gt;&gt;&gt; xy = (next(c)*len(list(g)) for _, g in grouped)
&gt;&gt;&gt; list(chain(*xy))
['x', 'x', 'x', 'y', 'y', 'x', 'x', 'x', 'x']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a fun way to do it:</p>
<pre><code>lista = [[1,'a'],[1,'b'],[1,'a'],[2,'s'],[2,'r'],[3,'e'],[3,'k'],[3,'t'],[3,'y']]
def function(acc,val):
    if acc[0] != val[0]:
        print acc[1]
        return (val[0],acc[2],acc[1])
    else:
        print acc[2]
        return acc
reduce(function,lista,(lista[0][0],'y','x'))
</code></pre>
<p>which prints:</p>
<pre><code>x
x
x
y
y
x
x
x
x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import itertools as it
import operator as op

one, other = 'x', 'y'
for k, g in it.groupby(lista, op.itemgetter(0)):
    for e in g:
        print e, one
    one, other = other, one
</code></pre>
<p>prints</p>
<pre><code>[1, 'a'] x
[1, 'b'] x
[1, 'a'] x
[2, 's'] y
[2, 'r'] y
[3, 'e'] x
[3, 'k'] x
[3, 't'] x
[3, 'y'] x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This prints the x's and y's, I wasn't sure what you wanted to do with the actual items in the list.</p>
<pre><code>a = [[1, "a"],[1,"b"],[1, "a"],[2, "s"],[2, "r"],[3, "e"],[3, "k"],[3, "t"],[3, "y"]]

def alternate(lst):
    current = lst[0][0]
    swap_vals = {"x": "y", "y": "x"}
    val = "x"
    print(val)
    for i in lst[1:]:
        next = i[0]
        if not current == next:
            val = swap_vals[val]
            current = next
        print(val)

alternate(a)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Quick and dirty:</p>
<pre><code>first = lista[0][0]
toprint = 'x'

print toprint

for i in range(len(lista)-1):
    new = lista[i+1][0]
    if first != new:
        toprint = 'y' if toprint != 'y' else 'x'
        first = new
    print toprint
</code></pre>
</div>
<span class="comment-copy">It's the first time I've seen an expression like this in python: <code>toggle = 'x' if toggle != 'x' else 'y'</code></span>
<span class="comment-copy">The <a href="http://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow noreferrer">conditional expression</a> was added in Python 2.5.</span>
<span class="comment-copy">+1 for using itertools :)</span>
<span class="comment-copy">that's just evil...</span>
