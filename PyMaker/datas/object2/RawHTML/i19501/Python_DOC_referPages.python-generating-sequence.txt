<div class="post-text" itemprop="text">
<p>I have a large sequence related problem to solve for which following is sub problem, an I am sure its something very basic in python that I am not aware of. </p>
<pre><code>seq = [4*x for x in range (1,(20/4))]
generates seq = [4, 8, 12, 16]
</code></pre>
<p>How can I generate </p>
<pre><code>[4, 4, 8, 8, 12, 12, 16]

seq = [4*x, 4*x for x in range (1,(20/4))] does not work
</code></pre>
<p>I can easily solve above problem by writing a small function, but I require it at the variable definition time.  </p>
</div>
<div class="post-text" itemprop="text">
<p>Your solution doesn't work because it produces a list of tuples.</p>
<p>What you are looking for is a way to flatten the list you produce - the simplest way to do this is <a href="http://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable"><code>itertools.chain.from_iterable()</code></a>:</p>
<pre><code>&gt;&gt;&gt; list(itertools.chain.from_iterable([4*x]*2 for x in range(1, 5)))
[4, 4, 8, 8, 12, 12, 16, 16]
</code></pre>
<p>If you intended to have the last value only once, as in your example, simply slice the end of the list (<code>seq[:-1]</code>).</p>
<p>As a note, rather than repeating your value for each repetition you want, you can use a list and multiply it up (providing the values are immutable, or you don't mind them being the same object). An alternative is <a href="http://docs.python.org/3/library/itertools.html#itertools.repeat"><code>itertools.repeat()</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>A variation of @shantanoo's answer: </p>
<pre><code>[ 4 * i for s in itertools.izip(*itertools.tee(range(1,5))) for i in s]
</code></pre>
<p>Output</p>
<pre><code>[4, 4, 8, 8, 12, 12, 16, 16]
</code></pre>
<p>Really it was just an excuse to use <code>itertools.tee</code> :D</p>
</div>
<div class="post-text" itemprop="text">
<p>Sometimes a simple generator is all it takes:</p>
<pre><code>def doubler_almost(seq):
    """
    Yield elements from a sequence twice until the last element
    which is only yielded once
    """
    iseq = iter(seq)
    y = next(iseq)
    yield y
    for x in iseq:
        yield y
        yield x
        y = x

print list(doubler_almost(range(4,20,4)))
</code></pre>
<p>-- Although this generator could definitely benefit from a better name...</p>
<p>The thing you get from this answer that you don't get from the others is that you don't need to convert to a list in order to slice off the last element -- It can be evaluated completely lazily.  It also can be passed a generator and it still works (although the answer by Lattyware still works in that case as well -- but the <code>zip</code> answers don't unless you use <code>itertools.tee</code> first).</p>
</div>
<div class="post-text" itemprop="text">
<p>Another way:</p>
<pre><code>&gt;&gt;&gt; seq = [4, 8, 12, 16]
&gt;&gt;&gt; seq = [i for s in zip(seq,seq) for i in s]
&gt;&gt;&gt; seq
[4, 4, 8, 8, 12, 12, 16, 16]
</code></pre>
<p>In case of seq as iter,</p>
<pre><code>&gt;&gt;&gt; seq = [4, 8, 12, 16]
&gt;&gt;&gt; seq = [i for s in zip(seq,seq.copy()) for i in s]
&gt;&gt;&gt; seq
[4, 4, 8, 8, 12, 12, 16, 16]
</code></pre>
<p>Thanks @mgilson for the iter feedback.</p>
</div>
<span class="comment-copy">Is <code>16</code> meant to only be there once?</span>
<span class="comment-copy">As the OP on their last line tried <code>... 4*x, 4*x ...</code> I think that your solution would be correct.</span>
<span class="comment-copy">yes, solution was incorrect.</span>
<span class="comment-copy">I would note that using a list comprehension like this to flatten a sequence is less efficient than <code>itertools.chain.from_iterable()</code>.</span>
<span class="comment-copy">this also doesn't work if <code>seq</code> is a generator.  e.g. <code>seq = iter([4,8,12,16])</code></span>
