<div class="post-text" itemprop="text">
<p>How can we interact with OS shell using Python ?
I want to run windows cmd commands via python. How can it be achieved ?</p>
</div>
<div class="post-text" itemprop="text">
<p>The newer <code>subprocess.check_output</code> and similar commands are supposed to replace <code>os.system</code>.  See <a href="http://docs.python.org/2/library/subprocess.html" rel="noreferrer">this page</a> for details.  While I can't test this on Windows, the following should work:</p>
<pre><code>from subprocess import check_output
check_output("dir C:", shell=True)
</code></pre>
<p><code>check_output</code> returns a string of the output from your command.  Alternatively, <code>subprocess.call</code> just runs the command and returns the status of the command (usually 0 if everything is okay).</p>
<p>Also note that, in python 3, that string output is now <code>bytes</code> output.  If you want to change this into a string, you need something like</p>
<pre><code>from subprocess import check_output
check_output("dir C:", shell=True).decode()
</code></pre>
<p>If necessary, <a href="https://docs.python.org/3/library/stdtypes.html#bytes.decode" rel="noreferrer">you can tell it</a> the kind of encoding your program outputs.  The default is <code>utf-8</code>, which typically works fine, but other standard options are <a href="https://docs.python.org/3/library/codecs.html#standard-encodings" rel="noreferrer">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You would use the os module <a href="http://docs.python.org/2/library/os.html#os.system" rel="noreferrer">system method</a>.</p>
<p>You just put in the string form of the command, the return value is the windows enrivonment variable COMSPEC</p>
<p>For example: </p>
<p>os.system('python') opens up the windows command prompt and runs the python interpreter</p>
<p><img alt="os.system('python') example" src="https://i.stack.imgur.com/DRSoh.png"/></p>
</div>
<div class="post-text" itemprop="text">
<p>Refactoring of @srini-beerge's answer which gets the output and the return code</p>
<pre><code>import subprocess
def run_win_cmd(cmd):
    result = []
    process = subprocess.Popen(cmd,
                               shell=True,
                               stdout=subprocess.PIPE,
                               stderr=subprocess.PIPE)
    for line in process.stdout:
        result.append(line)
    errcode = process.returncode
    for line in result:
        print(line)
    if errcode is not None:
        raise Exception('cmd %s failed, see above for details', cmd)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>subprocess</code> package with the code as below:</p>
<pre><code>import subprocess
cmdCommand = "python test.py"   #specify your cmd command
process = subprocess.Popen(cmdCommand.split(), stdout=subprocess.PIPE)
output, error = process.communicate()
print output
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import subprocess
result = []
win_cmd = 'ipconfig'(curr_user,filename,ip_address)
process = subprocess.Popen(win_cmd,
shell=True,
stdout=subprocess.PIPE,
stderr=subprocess.PIPE )
for line in process.stdout:
    print line
result.append(line)
errcode = process.returncode
for line in result:
    print line
</code></pre>
</div>
<span class="comment-copy">Related: <a href="http://programmers.stackexchange.com/q/182077">Is it possible to use python as a shell replacement?</a></span>
<span class="comment-copy">This works in Windows 7.  Thanks.  It does return \r\n at the end of the string, so you might need to strip that out with a <code>[0:-2]</code> substring.</span>
<span class="comment-copy">Using <code>[0:-2]</code> for that purpose makes me nervous.  If anyone takes that code to apply it in a non-Windows context, they'll certainly change the obvious <code>dir C:</code> to <code>ls</code> or whatever.  But they could easily fail to realize that <code>[0:-2]</code> should be changed to <code>[0:-1]</code>.  I'd recommend <a href="https://docs.python.org/2/library/stdtypes.html#str.rstrip" rel="nofollow noreferrer"><code>.rstrip()</code></a> instead, which would work on any platform (unless you want to capture other trailing whitespace), and also makes the reason behind the string alteration clearer.</span>
<span class="comment-copy">@Mikw: I have a windows  command which is used for deployment.Just a single line of command. How can I call it from an external python3.4 script</span>
<span class="comment-copy">Just use the code above, but replace <code>dir C:</code> with whatever your single line of code is.</span>
<span class="comment-copy">Works in Win 10 with a slight modification:  check_output("dir C:\\", shell=True)</span>
<span class="comment-copy">Sidetip: Use <code>alt+prtscr</code> to just get a screenshot of the active window. ;)</span>
<span class="comment-copy">Thanks for this tip. Although documentation recommends using <a href="https://docs.python.org/3.4/library/os.html#os.system" rel="nofollow noreferrer">subprocess module</a>, I find this more pythonic for simple tasks.</span>
