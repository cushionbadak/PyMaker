<div class="post-text" itemprop="text">
<p>Is there any way to apply staticmethod to all methods of a given class. </p>
<p>I was thinking we can access methods in its metaclass (in <strong>new</strong> of metaclass) and apply staticmethod, but i am not aware of syntax.  Can any one please shed light on this?</p>
</div>
<div class="post-text" itemprop="text">
<p>While <a href="https://stackoverflow.com/a/14898860/722121">a module (as suggested by mgilson)</a> is a better option, if you <em>really</em> have a good use for this (I can't think of one), it's relatively easy with <a href="http://docs.python.org/3/library/inspect.html" rel="nofollow noreferrer">the <code>inspect</code> module</a> and a class decorator:</p>
<pre><code>import inspect

def staticmethods(cls):
    for name, method in inspect.getmembers(cls, inspect.ismethod):
        setattr(cls, name, staticmethod(method.__func__))
    return cls

@staticmethods
class Test:
    def test():
        print("Test")

Test.test()
</code></pre>
<p>All the class decorator does is loop through the methods on the object with <code>inspect.getmembers()</code>, then overwrites the function with a <code>staticmethod()</code> of the original (unbound) function.</p>
<p>Note that I would use a module over a class for this, and probably also just manually call <code>@staticmethod</code> on each function over doing it this way (as this, for example, breaks my editor's inspections). This answer is given to show it's possible, because it's a pretty simple implementation.</p>
</div>
<div class="post-text" itemprop="text">
<p>If none of the methods share any state, there's not much of a reason to have a class at all.  a module with functions is probably a better idea ...</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/a/14898860/1235039">mgilson's answer</a> is best, but to add another pattern which is often used for defining a class as a namespace, you could also instantiate the class, overwriting the class name:</p>
<pre><code>class Test:
    def a_static_method(self, arg1, srg2):
        pass

Test = Test()
</code></pre>
<p>Be aware, though, that after this <code>Test</code> is actually a class instance, which might be misleading depending on how you're using it.</p>
</div>
<span class="comment-copy">Thanks, it is what i want</span>
<span class="comment-copy">+1, I was just about to say this. A class with only static methods is equivalent to a module, and much less easy to implement.</span>
<span class="comment-copy">@Lattyware -- Yeah.  You can't subclass it, but that doesn't really make any difference either ...</span>
<span class="comment-copy">Yes, a module with those functions a better idea, but i was grouping logically related functions into a class</span>
<span class="comment-copy">@Neil You can group logically related functions into a module - it still signifies a relation.</span>
<span class="comment-copy">@Lattyware - yes, i will do that, thanks.</span>
<span class="comment-copy">This is devious ...</span>
