<div class="post-text" itemprop="text">
<p>I am writing a Python interpreter and want to redirect the function's return values to stdout, like the Python Interpreter in Interactive Mode. Within this mode, when the user calls a function, its return value is printed on the screen. The same occurs with expressions.</p>
<p>E.g.</p>
<pre><code>&gt;&gt;&gt; foo()
'Foo return value'
&gt;&gt;&gt; 2+4
6
&gt;&gt;&gt; print('Hello!')
'Hello!'
</code></pre>
<p>Changing the <code>sys.stdout</code> only affects the <code>print</code> function. How do I redirect the other expressions to stdout?</p>
<p>Thank you</p>
</div>
<div class="post-text" itemprop="text">
<p>First, the interactive mode does <em>not</em> print the return value from any function called. Instead, it prints the result of whatever expression the user typed in. If that's not a function call, it still gets printed. If it has 3 function calls in it, it still prints one result, not 3 lines. And so on. </p>
<p>So, trying to redirect function return values to stdout is the wrong thing to do.</p>
<p>What the interactive interpreter does is something sort of like this:</p>
<pre><code>line = raw_input(sys.ps1)
_ = eval(line)
if _ is not None:
    print repr(_)
</code></pre>
<p>(You may notice that you can change <code>sys.ps1</code> from the interactive prompt to change what the prompt looks like, access <code>_</code> to get the last value, etc.)</p>
<p>However, that's not what it <em>really</em> does. And that's not how you should go about this yourself either. If you try, you'll have to deal with complexities like keeping your own <code>globals</code> separate from the user's, handling statements as well as expressions, handling multi-line statements and expressions (doing <code>raw_input(sys.ps2)</code> is easy, but how do you know <em>when</em> to do that?), interacting properly with <code>readline</code> and <code>rlcomplete</code>, etc.</p>
<p>There's a section of the documentation called <a href="http://docs.python.org/3/library/custominterp.html" rel="nofollow">Custom Python Interpreters</a> which explains the easy way to do this:</p>
<blockquote>
<p>The modules described in this chapter allow writing interfaces similar to Python’s interactive interpreter. If you want a Python interpreter that supports some special feature in addition to the Python language, you should look at the <code>code</code> module.</p>
</blockquote>
<p>And <a href="http://docs.python.org/3/library/code.html" rel="nofollow"><code>code</code></a>:</p>
<blockquote>
<p>… provides facilities to implement read-eval-print loops in Python. Two classes and convenience functions are included which can be used to build applications which provide an interactive interpreter prompt.</p>
</blockquote>
<p>The idea is that you let Python do all the hard stuff, up to whatever level you want to take over, and then you just write the part on top of that.</p>
<p>You may want to look at the source for <a href="http://hg.python.org/cpython/file/3.3/Lib/idlelib" rel="nofollow"><code>IDLE</code></a>, <a href="http://pypi.python.org/pypi/ipython" rel="nofollow"><code>ipython</code></a>, <a href="http://pypi.python.org/pypi/bpython" rel="nofollow"><code>bpython</code></a>, etc. for ideas.</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of using <code>exec()</code> to run the user input, try <code>eval()</code>:</p>
<pre><code>retval = eval(user_input)
sys.stdout.write(repr(retval) + "\n")
</code></pre>
</div>
<span class="comment-copy">Umm, <code>2+4</code> == <code>'6'</code>????</span>
<span class="comment-copy">Have you looked at the <a href="http://docs.python.org/2/library/code.html" rel="nofollow noreferrer"><code>code</code></a> module, in the section of the documentation called "Custom Python Interpreters"? It's designed to let you basically borrow any level from the bare compile-and-run up to the whole REPL-over-readline and replace everything above that level with your own code.</span>
<span class="comment-copy">Thank you very much for this entire description! If it helps anyone else, I also found that if all the handling stuff is done with the input and <code>sys.stdout</code> is redirected, compiling the code with <code>"single"</code> and executing with <code>exec()</code> works too.</span>
<span class="comment-copy">@CaioS.: I should have asked this before… Are you trying build a replacement interactive shell (kind of like iPython), or expose your app's internals to an interactive shell (like a console window in a video game)? For the latter, a lot of what I wrote in my answer is misleading or wrong.</span>
<span class="comment-copy">The second option, I am writing a console window. But I think your answer if of great value to other people.</span>
