<div class="post-text" itemprop="text">
<p>I need to change the name and extension of a series of files. The names are currently 'tmax.##.txt', but I need it to be 'tmax_##.txt'. Then, I want to change the .txt extension to .asc. I've tried the below code and the first loop works as expected to produce 'tmax_01'. The second loop runs, but produces unexpected results, 't'.</p>
<pre><code>list_raw = 'tmax.01.txt', 'tmax.02.txt', 'tmax.03.txt'

for i in list_raw:
    list_conv = i.replace('.','_')

for i in list_conv:
list_final = i.replace('_txt','.asc')
</code></pre>
<p>Any suggestions?</p>
</div>
<div class="post-text" itemprop="text">
<p>Because you're talking of files it may be worth using <code>os.path</code> as it's likely that the next part of your code will be to manipulate these or other files. (just guessing)</p>
<pre><code>os.path.splitext('afile.txt')[0] + '.asc'
</code></pre>
<p>Gives</p>
<pre><code>'afile.asc'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are just assigning new values to a variable in each iteration of the loop. What you want to do is create a new list from the modified elements of an existing list, which is best done with a <a href="http://www.youtube.com/watch?v=pShL9DCSIUw" rel="nofollow noreferrer">list comprehension</a>:</p>
<pre><code>list_raw = ['tmax.01.txt', 'tmax.02.txt', 'tmax.03.txt']
list_final = [i.replace(".", "_").replace("_txt", ".asc") for i in list_raw]
</code></pre>
<p>Note that you can do this, as in my example, in one step - there is no reason to iterate over the list twice, and produce an intermediate list, which is inefficient.</p>
<p>You could also do <code>i.replace(".", "_", 1)</code> to only replace the first <code>.</code>, and avoid having to do the awkward hack with the file extension. However, I would personally use <code>i[:-4].replace(".", "_") + ".asc"</code> - that is, cut off the existing extension with a slice, replace the <code>.</code>s, and then add the new extension.</p>
<p>If the extensions are likely to vary in length, you may want to look into the <code>os.path</code> module, as suggested by <a href="https://stackoverflow.com/a/14665716/722121">sotapme</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>In the first loop: -</p>
<pre><code>for i in list_raw:
    list_conv = i.replace('.','_')
</code></pre>
<p>Your <code>list_conv</code> contains a <code>str</code> object. And it will contain the last element in the list with the appropriate replacement.</p>
<p>Then in your 2nd loop: -</p>
<pre><code>for i in list_conv:
    list_final = i.replace('_txt','.asc')
</code></pre>
<p>You are just iterating over string sequence, which will give you 1 character at a time. And <code>list_final</code> will contain the last character with the appropriate replacement done.</p>
<p>Since the last character in <code>tmax_03_txt</code> is <code>t</code>, that is why you got <code>t</code>.</p>
<hr/>
<p>If you want to do the replacement on each element of the list, then you can use <code>list comprehension</code>, and chaning of method invocation: -</p>
<pre><code>&gt;&gt;&gt; list_raw = ['tmax.01.txt', 'tmax.02.txt', 'tmax.03.txt']
&gt;&gt;&gt; [elem.replace('.', '_').replace('_txt', '.asc') for elem in list_raw]
16: ['tmax_01.asc', 'tmax_02.asc', 'tmax_03.asc']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Alternately you could use the <a href="http://docs.python.org/3/library/stdtypes.html#str.rstrip" rel="nofollow">string method rsplit</a>.</p>
<pre><code>list_raw = ['tmax.01.txt', 'tmax.02.txt', 'tmax.03.txt']
list_final = [filename.rsplit('.',1)[0] + '.ext' for filename in list_raw]
</code></pre>
<p>Where ext is the new extension.  The 1 in rsplit() indicates that only the rightmost '.' will act as split point.</p>
</div>
<span class="comment-copy">+1, this is a good way to split the extension off, although it may be overkill if, as implied, the extension will always be <code>.txt</code>.</span>
<span class="comment-copy">I agree - But I've lost count of the times I've said to myself "It's only for .txt files and then I have to add that other special file an d another' - I think by using <code>os.path</code> that it's more explicit that we're talking filenames although it's a very moot point given how specific the OP has been and of course the ease of using <code>.replace</code> makes it so trivial.</span>
<span class="comment-copy">This is true, it's generally better to design more robustly, those kind of specifications tend to end up not holding over time, and adding the flexibility here doesn't cost anything.</span>
<span class="comment-copy">Then again <a href="http://en.wikipedia.org/wiki/You_aren't_gonna_need_it" rel="nofollow noreferrer">YAGNI</a> a difficult balancing act.</span>
<span class="comment-copy">+1, This is a good explanation of why the original fails, although your example of a solution doesn't do all that is wanted by the OP.</span>
<span class="comment-copy">@Lattyware.. Yeah, actually I forgot to change the extension. Will edit.</span>
