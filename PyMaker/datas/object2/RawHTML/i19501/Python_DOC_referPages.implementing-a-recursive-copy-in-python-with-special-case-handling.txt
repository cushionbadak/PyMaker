<div class="post-text" itemprop="text">
<p>I'd like to implement a version of <code>cp -r</code> in Python that handles certain directories in a special way. If you do <code>mycp.py -r indir outdir</code>, I'd like <code>indir</code> and all of its files/subdirectories to be copied exactly into <code>outdir</code>, except for certain filenames. What is the most portable way to do this in Python? </p>
<p>Example: I have this directory structure:</p>
<pre><code>dir1/
  file1
  dir2/
    dir3/
  specialdir/
    myfile.bar
</code></pre>
<p><code>file1</code> is a file and <code>specialdir</code> is a directory containing a file <code>myfile.bar</code>. I'd like to copy <code>dir1</code> and all of its contents, but handling specially directories that have <code>*.bar</code> files in them. In this case only <code>specialdir</code> meets the criteria. I'd like to <code>mycopy</code> to copy all of <code>dir1</code> but replace any special directories with a zipped version of themselves. In the above example that would mean copying <code>dir1</code> as is, but replacing <code>specialdir</code> with <code>specialdir.zip</code> that might contain a processed version of <code>myfile.bar</code>.</p>
<p>I tried to follow the suggestion below but I'm not sure how to deal with the copying:</p>
<pre><code>import os
import shutil

SPECIAL_DIRS = []

def is_special_dir(path, dirnames):
    """directories are special if they have .bar files"""
    special_dirs = []
    for d in dirnames:
        d = os.path.join(path, d)
        if os.path.isdir(d):
            files_in_d = os.listdir(d)
            for f in files_in_d:
                if f.endswith(".bar"):
                    # directory is special if it contains
                    # .bar files
                    special_dirs.append(d)
    SPECIAL_DIRS.extend(special_dirs)
    return special_dirs

def my_copy(indir, outdir):
    shutil.copytree(indir, outdir, ignore=is_special_dir)
    print "Found special dirs: ", SPECIAL_DIRS

# make a copy of dir1 but handle special directories
# differently
my_copy("dir1", "copy_dir1")
</code></pre>
<p>If I try it it correctly detects the special directories:</p>
<pre><code>$ copy_test.py
Found special dirs:  ['dir1/dir2/specialdir']
</code></pre>
<p>how can I make make it insert <code>specialdir</code> in the right corresponding place in <code>copy_dir1</code>? I'd like <code>copy_dir1</code> (the destination dir) to have exactly the same structure as <code>dir1</code> (the source dir) except with special handling of directories containing the <code>.bar</code> files.</p>
</div>
<div class="post-text" itemprop="text">
<p>It sounds like you want <a href="http://docs.python.org/3/library/shutil.html?highlight=shutil#shutil.copytree" rel="nofollow">shutil.copytree</a> utilizing the <em>ignore</em> parameter:</p>
<blockquote>
<p>If <em>ignore</em> is given, it must be a callable that will receive as its arguments the directory being visited by <code>copytree()</code>, and a list of its contents, as returned by <code>os.listdir()</code>. Since <code>copytree()</code> is called recursively, the <em>ignore</em> callable will be called once for each directory that is copied. The callable must return a sequence of directory and file names relative to the current directory (i.e. a subset of the items in its second argument); these names will then be ignored in the copy process. 'ignore_patterns()' can be used to create such a callable that ignores names based on glob-style patterns.</p>
</blockquote>
<p>So something like this should work:</p>
<pre><code>def what_to_ignore(path,names):
    if is_special(path):
        # process names here returning any or all to ignore

shutil.copytree(indir,outdir,ignore=what_to_ignore)
</code></pre>
<h3>Edit for expanded question and example</h3>
<p>Here's an example.  The simplified ignore function still creates an empty special directory, but it is easy to delete before doing the special zip copy.  I also nested the special function so <code>my_copy</code> could be used more than once without relying on using a global variable.  Doing the zip is an exercise for the user:</p>
<pre><code>import fnmatch
import shutil
import os

def my_copy(indir, outdir):

    special = []

    def is_special_dir(path, names):
        """directories are special if they have .bar files"""
        if fnmatch.filter(names,'*.bar'):
            special.append(path)
            return names
        return []    

    shutil.copytree(indir, outdir, ignore=is_special_dir)
    print('Found special dirs:',special)

    for src in special:
        rel = os.path.relpath(src,indir)
        dst = os.path.join(outdir,rel)
        os.rmdir(dst)
        print('Zip "{}" to "{}.zip"'.format(src,dst))

my_copy('dir1','dira')
my_copy('dir1','dirb')
</code></pre>
<p><strong>Output</strong></p>
<pre><code>Found special dirs: ['dir1\\specialdir']
Zip "dir1\specialdir" to "dira\specialdir.zip"
Found special dirs: ['dir1\\specialdir']
Zip "dir1\specialdir" to "dirb\specialdir.zip"
</code></pre>
</div>
<span class="comment-copy">Sounds useful but my usecase is a bit different, I didn't explain it well originally. I don't want to necessarily just skip the set of files, but perhaps postprocess them and copy the postprocessed version to <code>outdir</code> instead. In that case, should I just use <code>walk</code>?</span>
<span class="comment-copy">The ignore function can do anything, including collecting the file names for post processing.  If the function returns an empty list, it won't ignore anything, and just becomes a per directory callback, for example.</span>
<span class="comment-copy">but is it possible to make the call back insert a file (which is the result of some postprocessing of files in the input directory) in the destination directory and then return empty?</span>
<span class="comment-copy">No, there isn't a way to specify extra files to be copied, just files from the original directory to be ignored, which is what your question asked.  You can collect the special files in a list, then post-process them and copy them to the destination directory, or even process them and copy them yourself during the callback, and return the files you've already processed as the ignore list.</span>
<span class="comment-copy">thank you I edited my answer to reflect my attempt at coding your suggestion</span>
