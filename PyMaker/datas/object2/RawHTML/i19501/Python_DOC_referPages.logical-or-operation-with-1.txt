<div class="post-text" itemprop="text">
<p>Why is the output different for the following logical operations that I tried in python?</p>
<pre><code>-1 or 1
 1 or -1
</code></pre>
<p>First returns <code>-1</code> and second returns <code>1</code></p>
</div>
<div class="post-text" itemprop="text">
<p><code>and</code> and <code>or</code> are both <em>lazy</em>; they evaluate operands until they can decide the result (<code>and</code> stops at the first <code>False</code> operand; <code>or</code> stops at the first <code>True</code> operand). They return the last operand evaluated, as noted in <a href="http://docs.python.org/2/reference/expressions.html#boolean-operations" rel="noreferrer">the documentation</a>:</p>
<blockquote>
<p>Note that neither <code>and</code> nor <code>or</code> restrict the value and type they return to <code>False</code> and <code>True</code>, but rather return the last evaluated argument. This is sometimes useful, e.g., if <code>s</code> is a string that should be replaced by a default value if it is empty, the expression <code>s or 'foo'</code> yields the desired value.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Read <a href="http://docs.python.org/3/reference/expressions.html#boolean-operations">the documentation</a>:</p>
<blockquote>
<p>The expression <code>x or y</code> first evaluates <code>x</code>; if <code>x</code> is true, its value is returned; otherwise, <code>y</code> is evaluated and the resulting value is returned.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Both first parts <code>-1</code> and <code>1</code> are evaluated <code>True</code> and therefore returned. The second part is ignored.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>or</code> operator short-circuits. It returns the first value that is <code>True</code> in a boolean context, or the last evaluated expression otherwise. <code>-1</code> and <code>1</code> are both <code>True</code> in a boolean context, so you get the first number.</p>
<p><code>0</code>, <code>None</code> and all empty containers evaluate to <code>False</code>.</p>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; 0 or 5
5
&gt;&gt;&gt; '' or []
[]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In <code>or</code> condition if first condition is true, second is not evaluated,</p>
</div>
<div class="post-text" itemprop="text">
<p>I think the OP expects the return value of 'or' to be either True or False (as would be the case for boolean operators in some other languages.) </p>
<p>Python, like Perl, simply returns the first "true" value (where "true" means nonzero for numbers, non-empty for strings, not None, etc.)</p>
<p>Similarly, 'and' returns the last value if and only if both are "true".</p>
<p>He would probably be even more surprised by the result of something like </p>
<pre><code>{'x':1} or [1,2,3]
</code></pre>
<p>Perl programmers often use this construct idiomatically (as in <code>open(FILE, "foo.txt") || die</code>; I don't know if that's as common in Python.</p>
<p>(see <a href="http://docs.python.org/2/library/stdtypes.html" rel="nofollow">man</a>)</p>
</div>
