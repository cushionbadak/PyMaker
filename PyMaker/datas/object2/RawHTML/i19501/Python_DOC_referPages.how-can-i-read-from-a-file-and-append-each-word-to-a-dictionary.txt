<div class="post-text" itemprop="text">
<p>what I want to do is read from a file, and then for each word, append it to a dictionary along with its number of occurances. </p>
<p>example:</p>
<p>'today is sunday. tomorrow is not sunday.'</p>
<p>my dictionary would then be this:
{'today': 1, 'is': 2, 'sunday': 2, 'tomorrow': 1, 'not': 1}</p>
<p>the way I'm going about it is to use readline and split to create a list, and then append each element and it's value to an empty dictionary, but it's not really working so far. here's what I have so far, although its incomplete:</p>
<pre><code>file = open('any_file,txt', 'r')

for line in file.readline().split():
     for i in range(len(line)):
         new_dict[i] = line.count(i)  # I'm getting an error here as well, saying that  
return new_dict                       # I can't convert int to str implicitly 
</code></pre>
<p>the problem with this is that when my dictionary updates when each line is read, the value of a word won't accumulate. so if in another line 'sunday' occurred 3 times, my dictionary would contain {'sunday': 3} instead of {'sunday': 5}. any help? I have no idea where to go from here and I'm new to all of this.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are looking for <a href="http://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>collections.Counter</code></a>.</p>
<p>e.g:</p>
<pre><code>from itertools import chain

with open("file.txt") as file:
    Counter(chain.from_iterable(line.split() for line in file))
</code></pre>
<p>(Using a <a href="http://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow"><code>itertools.chain.from_iterable()</code></a> <a href="http://www.youtube.com/watch?v=pShL9DCSIUw" rel="nofollow">generator expression</a> too.)</p>
<p>Note that your example only works on the first line, I presume this wasn't intentional, and this solution is for across the whole file (obviously it's trivial to swap that around).</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a simple version that doesn't deal with punctuation</p>
<pre><code>from collections import Counter
counter = Counter()
with open('any_file,txt', 'r') as file:
    for line in file:
        for word in line.split():
            counter[word] += 1
</code></pre>
<p>can also be written like this:</p>
<pre><code>from collections import Counter
counter = Counter(word for line in file for word in line.split())
</code></pre>
<p>Here's one way to solve the problem using a <code>dict</code></p>
<pre><code>counter = {}
with open('any_file,txt', 'r') as file:
    for line in file:
        for word in line.split():
            if word not in counter:
                counter[word] = 1
            else:
                counter[word] += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try this</p>
<pre><code> file = open('any_file.txt', 'r')
 myDict = {}
 for line in file:
     lineSplit = line.split(" ")
     for x in xrange(len(lineSplit)):
         if lineSplit[x] in myDict.keys(): myDict[lineSplit[x]] += 1
         else: myDict[lineSplit[x]] = 1

 file.close()

 print myDict
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Do you use Python 3 or Python 2.7?</p>
<p>If yes, use Counter from collections library:</p>
<pre><code>import re
from collections import Counter
words = re.findall('\w+', open('any_file.txt').read().lower())
Counter(words).most_common(10)
</code></pre>
<p>But you get list of tuples though. It should be easy for you to turn list of tuples to dictionary.</p>
</div>
<span class="comment-copy">Another problem is that if "sunday" occurs 3 times on a line, you are doing <code>line.count("sunday")</code> 3 times which is wasteful</span>
<span class="comment-copy">This kind of defies the point of using a <code>collections.Counter()</code>. (Edit: with the edit it's a little better, although it's an inefficient way to flatten an iterable).</span>
<span class="comment-copy">is collection counter the only way to do this? I'm assuming any other solution would just be long and tedious though</span>
<span class="comment-copy">@peppy Of course it's not the only solution, but it's efficient and the work is done for you.</span>
<span class="comment-copy">@peppy, you can do it with a <code>dict</code> you just need to add the key if it is not there, and add 1 to the value</span>
<span class="comment-copy">@Peppy. I added a version using a dict. There are other ways but I think this one is simple to understand.</span>
<span class="comment-copy">This regex isn't really needed, and <code>collections</code> exists in 2.x.</span>
<span class="comment-copy">@Lattyware, sorry I should have made myself clearer. The Counter is not available in python 2.</span>
<span class="comment-copy">I just tested, it's definitely there in at least 2.7.</span>
<span class="comment-copy">@Lattyware, sorry, I just realized I used python 2.6. The Counter was introduced in python 2.7. <a href="http://docs.python.org/2/library/collections.html" rel="nofollow noreferrer">docs.python.org/2/library/collections.html</a></span>
