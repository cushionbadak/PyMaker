<div class="post-text" itemprop="text">
<p>When answering <a href="https://stackoverflow.com/q/14755882/20670">this question</a> (and having read <a href="https://stackoverflow.com/a/452143/20670">this answer</a> to a similar question), I thought that I knew how Python caches regexes.</p>
<p>But then I thought I'd test it, comparing two scenarios:</p>
<ol>
<li>a single compilation of a simple regex, then 10 applications of that compiled regex.</li>
<li>10 applications of an uncompiled regex (where I would have expected slightly worse performance because the regex would have to be compiled once, then cached, and then looked up in the cache 9 times).</li>
</ol>
<p>However, the results were staggering (in Python 3.3):</p>
<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit(setup="import re", 
... stmt='r=re.compile(r"\w+")\nfor i in range(10):\n r.search("  jkdhf  ")')
18.547793477671938
&gt;&gt;&gt; timeit.timeit(setup="import re", 
... stmt='for i in range(10):\n re.search(r"\w+","  jkdhf  ")')
106.47892003890324
</code></pre>
<p>That's over 5.7 times slower! In Python 2.7, there is still an increase by a factor of 2.5, which is also more than I would have expected.</p>
<p>Has caching of regexes changed between Python 2 and 3? <a href="http://docs.python.org/dev/library/re.html#re.compile" rel="nofollow noreferrer">The docs</a> don't seem to suggest that.</p>
</div>
<div class="post-text" itemprop="text">
<p>The code <em>has</em> changed.</p>
<p>In Python 2.7, the cache is a simple dictionary; if more than <code>_MAXCACHE</code> items are stored in it, the whole the cache is cleared before storing a new item. A cache lookup only takes building a simple key and testing the dictionary, see the <a href="http://hg.python.org/cpython/file/2.7/Lib/re.py#l226">2.7 implementation of <code>_compile()</code></a></p>
<p>In Python 3.x, the cache has been replaced by the <a href="http://docs.python.org/3/library/functools.html#functools.lru_cache"><code>@functools.lru_cache(maxsize=500, typed=True)</code> decorator</a>. This decorator does <em>much</em> more work and includes a thread-lock, adjusting the cache LRU queue and maintaining the cache statistics (accessible via <code>re._compile.cache_info()</code>). See the <a href="http://hg.python.org/cpython/file/3.3/Lib/re.py#l264">3.3 implementation of <code>_compile()</code></a> and of <a href="http://hg.python.org/cpython/file/3.3/Lib/functools.py#l174"><code>functools.lru_cache()</code></a>.</p>
<p>Others have noticed the same slowdown, and filed <a href="http://bugs.python.org/issue16389">issue 16389</a> in the Python bugtracker. I'd expect 3.4 to be a lot faster again; either the <code>lru_cache</code> implementation is improved or the <code>re</code> module will move to a custom cache again.</p>
<p>Update: With <a href="http://hg.python.org/cpython/rev/4b4dddd670d0">revision 4b4dddd670d0</a> the cache change has been reverted back to the simple version found in 3.1. Python versions 3.2.4 and 3.3.1 include that revision.</p>
</div>
<span class="comment-copy">Um, why are you using <code>timeit</code> like that? Why not <code>stmt='re.search(...)'</code>/<code>stmt='r.search(...)'</code> and add <code>re.compile</code> to the <code>setup</code>?</span>
<span class="comment-copy">The fancy <code>functools.lru_cache</code> is the issue here, that is the caching change you are after. Also see <a href="http://bugs.python.org/issue16389" rel="nofollow noreferrer">bugs.python.org/issue16389</a></span>
<span class="comment-copy">@delnan: I wanted the compilation of the regex to be part of the timing.</span>
<span class="comment-copy">That's kind of unfair (in the technical sense) as the cache <code>re.search</code> uses will persist between runs. Plus, you can measure it separately and gain more information. I'm very weary of nontrivial parameters for <code>timeit</code>.</span>
<span class="comment-copy">@delnan: I guess you're right, but that means that the performance penalty for not compiling regexes is even worse than what these results suggest...</span>
<span class="comment-copy">huh.  thanks.  i wondered why the cache for regexps in strptime doesn't use lru_cache.  i hope that lru_cache can be improved as in theory lru is better than wiping and re-starting.</span>
