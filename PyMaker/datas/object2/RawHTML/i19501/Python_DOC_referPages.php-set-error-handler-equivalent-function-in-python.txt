<div class="post-text" itemprop="text">
<p>Is there a function in python 3 that is an equivalent to PHP's <a href="http://php.net/manual/en/function.set-error-handler.php" rel="nofollow">set_error_handler</a> function? Is it good idea to use this equivalent in python scripting or there is better solution?</p>
<p>What I like about set_error_handler is that I can assign to it a function that for example logs and/or emails me when something goes wrong. I can then use trigger_error in my code and error_handler function will report back to me what and where did happen. any ideas how to replace it in python?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you are searching for <a href="http://docs.python.org/3.4/library/sys.html?highlight=sys.excepthook#sys.excepthook" rel="nofollow">sys.excepthook</a>. It's also used by <code>cgitb</code> module.</p>
<p>Or maybe you can try library <a href="https://github.com/miso-belica/diagnostics" rel="nofollow">diagnostics</a> that I wrote. It doesn't support e-mailing yet but feel free to open an issue with your proposal for it or send a pull request :)</p>
</div>
<div class="post-text" itemprop="text">
<p>AFAIK Python uses mainly exceptions to handle errors and thus you should try to catch them instead of using a construct like set_error_handler.
Do something like this:</p>
<pre><code>try:
    code that might fail...
except:
    handle errors...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>See <a href="http://docs.python.org/3/library/warnings.html" rel="nofollow">warnings</a> for the python library used for handling warnings, which also links to <a href="http://docs.python.org/3/library/logging.html#logging.captureWarnings" rel="nofollow">captureWarnings</a> in the logging library.</p>
<p>Most other issues are however thrown as exceptions, which you can try and catch as you see fit.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the Python exception handling mechanism (<code>try/except</code>) instead. It is much more flexible and fine-grained; you can catch errors arising from just one line of code (e.g. an <code>IOError</code> because a file was not found), or errors from your entire program (like <code>set_error_handler</code> does).</p>
<p>For CGI use, you can also use the <code>cgitb</code> module, which will print out very detailed error messages for debugging use:</p>
<pre><code>import cgitb
cgitb.enable()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>import cgitb()
cgitb.enable()
For CGI use, you can also use the cgitb module, which will print out very detailed error messages for debugging use:</p>
</div>
<span class="comment-copy">yeah. I agree that exceptions are the better way.  I edited question to be more precise. could you help me now?</span>
<span class="comment-copy">You just move the try/except block to the uppermost level in your code, then when an error occurs the code except will always be run when there is an exception, and the code you have in except could email you or whatever. To trigger this code you can use throw in the sub-functions that run inside the try block to throw exceptions on purpose.</span>
<span class="comment-copy">I thought that I could use logging system and configure my loggers to send email and log to a file. then I can catch exceptions wherever they are. what do you thing about this approach?</span>
<span class="comment-copy">Sounds like that could work, yes :)</span>
<span class="comment-copy">yeah. I agree that exceptions are the better way. I edited question to be more precise. could you help me now?</span>
<span class="comment-copy">yeah. I agree that exceptions are the better way. I edited question to be more precise. could you help me now?</span>
