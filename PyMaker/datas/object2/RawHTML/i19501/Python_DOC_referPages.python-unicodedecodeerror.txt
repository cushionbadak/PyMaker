<div class="post-text" itemprop="text">
<p>I am writing a Python program to read in a DOS tree command outputted into a text document. When I reach the 533th iteration of the loop, Eclipse gives an error: </p>
<pre><code>Traceback (most recent call last):
  File "E:\Peter\Documents\Eclipse Workspace\MusicManagement\InputTest.py", line 24, in  &lt;module&gt;
    input = myfile.readline()
  File "C:\Python33\lib\encodings\cp1252.py", line 23, in decode
   return codecs.charmap_decode(input,self.errors,decoding_table)[0]
UnicodeDecodeError: 'charmap' codec can't decode byte 0x81 in position 3551: character maps  to undefined
</code></pre>
<p>I have read other posts, and setting the encoding to latin-1 does not resolve this issue, as it returns a <code>UnicodeDecodeError</code> on another character, and the same with trying to use utf-8.</p>
<p>The following is the code:</p>
<pre><code>import os
from Album import *

os.system("tree F:\\Music &gt; tree.txt")

myfile = open('tree.txt')
myfile.readline()
myfile.readline()
myfile.readline()

albums = []
x = 0

while x &lt; 533:
    if not input: break
    input = myfile.readline()
    if len(input) &lt; 14:
        artist = input[4:-1]
    elif input[13] != '-':
        artist = input[4:-1]
    else:
        albums.append(Album(artist, input[15:-1], input[8:12]))
    x += 1

for x in albums:
    print(x.artist + ' - ' + x.title + ' (' + str(x.year) + ')')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to figure out what encoding <code>tree.com</code> used; according to <a href="https://stackoverflow.com/questions/138576/saving-tree-f-a-results-to-a-textfile-with-unicode-support">this post</a> that could any of the MS-DOS codepages.</p>
<p>You could go through each of the <a href="http://www.kostis.net/charsets/trans130/cpdos.htm" rel="nofollow noreferrer">MS-DOS encodings</a>; most of those have a <a href="http://docs.python.org/3/library/codecs.html#standard-encodings" rel="nofollow noreferrer">codec in the python standard library</a>. I'd try <code>cp437</code> and <code>cp500</code> first; the latter is the MS-DOS predecessor of cp1252 I think.</p>
<p>Pass the encoding to <code>open()</code>:</p>
<pre><code>myfile = open('tree.txt', encoding='cp437')
</code></pre>
<p>You really should look into using <code>os.walk()</code> instead of using <code>tree.com</code> for this task though, it'll save you having to deal with issues like these at least.</p>
</div>
<div class="post-text" itemprop="text">
<p>In this line:</p>
<pre><code>myfile = open('tree.txt')
</code></pre>
<p>you should specify the encoding of your file. On windows try:</p>
<pre><code>myfile = open('tree.txt',encoding='cp1250')
</code></pre>
</div>
<span class="comment-copy">You need to figure out what encoding <code>tree.com</code> used; according to <a href="http://stackoverflow.com/questions/138576/saving-tree-f-a-results-to-a-textfile-with-unicode-support">this post</a> that could be UTF-16.</span>
<span class="comment-copy">In this case using python os.walk rather than the DOS command might be easier.</span>
<span class="comment-copy">If the encoding used maps single bytes to single characters and maps bytes 0 through 127 to the same values as ASCII, then you can probably deduce what the encoding being used is. Just read the line as bytes, remove byte 0x81 or replace it with a blank, and decode the resulting byte string as though it were ASCII encoded. Then see if you can guess what the missing character is using a bit of human intuition, and go research what what codec might map 0x81 to that character.</span>
<span class="comment-copy">Also, given that this file comes from DOS, a possible guess for the codec that hasn't yet been suggested is Code Page 437, which is named 'cp437' in Python. See: <a href="http://en.wikipedia.org/wiki/Code_page_437" rel="nofollow noreferrer">en.wikipedia.org/wiki/Code_page_437</a>  That would make your mystery character a <code>Ã¼</code> though, which is a fairly unusual character (unless you're German).</span>
<span class="comment-copy">cp437 got me a lot further into the file than any other encoding has. I'm currently looking further into what the encoding may be. Thanks for getting me on the right track though.</span>
<span class="comment-copy">Traceback (most recent call last):   File "E:\Peter\Documents\Eclipse Workspace\MusicManagement\InputTest.py", line 15, in &lt;module&gt;     myfile.readline()   File "C:\Python33\lib\codecs.py", line 300, in decode     (result, consumed) = self._buffer_decode(data, self.errors, final)   File "C:\Python33\lib\encodings\utf_16.py", line 67, in _buffer_decode     raise UnicodeError("UTF-16 stream does not start with BOM") UnicodeError: UTF-16 stream does not start with BOM</span>
<span class="comment-copy">@pbecker13: You could force it with <code>utf_16_le</code> (little endian), see if that works. I doubt it is UTF-16 actually if you didn't see 0-bytes all over the place. It's just that the NTFS file system uses UTF-16 by default and I suspect that <code>tree</code> will use that when outputting non-ASCII names.</span>
<span class="comment-copy">@pbecker13: Added some more options to look into.</span>
<span class="comment-copy">@MartijnPieters, although the filenames may be stored as UTF-16 they will be converted to a code page when written to a file. The trick is to determine which code page.</span>
<span class="comment-copy">Finally got the entire file to read, using Code Page 850. 'cp850'. Thanks for the help!</span>
<span class="comment-copy">This still throws the same error. It's just the output of a tree command in DOS, I am not sure why it would output something where encoding is such an issue.</span>
<span class="comment-copy">The <i>default</i> encoding Python used was cp1250, you can see that from the traceback.</span>
