<div class="post-text" itemprop="text">
<p>I'd like to convert some character into five digit unicode on in Python 3.3.
For example,</p>
<pre><code>import re
print(re.sub('a', u'\u1D15D', 'abc' ))
</code></pre>
<p>but the result is different from what I expected.
Do I have to put the character itself, not codepoint?
Is there a better way to handle five digit unicode characters?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python unicode escapes either are <a href="http://docs.python.org/3/reference/lexical_analysis.html#index-18" rel="noreferrer">4 hex digits (<code>\uabcd</code>) or 8 (<code>\Uabcdabcd</code>)</a>; for a codepoint beyond U+FFFF you need to use the latter (a capital U), make sure to left-fill with enough zeros:</p>
<pre><code>&gt;&gt;&gt; '\U0001D15D'
'ùÖù'
&gt;&gt;&gt; '\U0001D15D'.encode('unicode_escape')
b'\\U0001d15d'
</code></pre>
<p>(And yes, the U+1D15D codepoint (MUSICAL SYMBOL WHOLE NOTE) is in the above example, but your browser font may not be able to render it, showing a place-holder glyph (a box or question mark) instead.</p>
<p>Because you used a <code>\uabcd</code> escape, you replaced <code>a</code> in <code>abc</code> with two characters, the codepoint U+1D15 (<code>·¥ï</code>, latin letter small capital ou), and the ASCII character <code>D</code>. Using a 32-bit unicode literal works:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; print(re.sub('a', '\U0001D15D', 'abc' ))
ùÖùbc
&gt;&gt;&gt; print(re.sub('a', u'\U0001D15D', 'abc' ).encode('unicode_escape'))
b'\\U0001d15dbc'
</code></pre>
<p>where again the U+1D15D codepoint could be displayed by your font as a placeholder glyph instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>By the way, you do not need the <code>re</code> module for this. You could use <a href="http://docs.python.org/3.3/library/stdtypes.html#str.translate" rel="nofollow">str.translate</a>:</p>
<pre><code>&gt;&gt;&gt; 'abc'.translate({ord('a'):'\U0001D15D'})
'ùÖùbc'
</code></pre>
</div>
<span class="comment-copy">The <code>u''</code> literal in Python 3 is a no-op; just use <code>''</code> instead, that's already unicode.</span>
<span class="comment-copy">It was probably just an illustration, a short example to demonstrate the perceived problem.</span>
<span class="comment-copy">Yes, that might be true.</span>
