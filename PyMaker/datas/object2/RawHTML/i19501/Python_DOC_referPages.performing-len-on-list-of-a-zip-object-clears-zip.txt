<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/25336726/why-cant-i-iterate-twice-over-the-same-data">Why can't I iterate twice over the same data?</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I am seeing a strange behavior when working with the zip() function.  When I perform the following operation len(list(z)) where z is a zip object, the result is 0 (which seems wrong to me), and the action seems to clear out the zip object.  Can someone please help me understand what is going on.</p>
<pre><code># python3
Python 3.2.3 (default, Sep 30 2012, 16:41:36) 
[GCC 4.7.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; w = [11, 22, 33, 44, 55, 66]
&gt;&gt;&gt; x = [1, 2, 3, 4]
&gt;&gt;&gt; y = ['a', 'b', 'c']
&gt;&gt;&gt; z = zip(x, y, w)
&gt;&gt;&gt; z
&lt;zip object at 0x7f854f613cb0&gt;
&gt;&gt;&gt; list(z)
[(1, 'a', 11), (2, 'b', 22), (3, 'c', 33)]
&gt;&gt;&gt; len(list(z))
0
&gt;&gt;&gt; list(z)
[]
&gt;&gt;&gt; z
&lt;zip object at 0x7f854f613cb0&gt;
&gt;&gt;&gt; 
</code></pre>
<p>Thank you,
Ahmed.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3 <a href="http://docs.python.org/3/library/functions.html#zip" rel="noreferrer">zip is a generator</a>. The generator is being exhausted when you do <code>list(z)</code>. You can create a list from the values returned by the generator and operate on that.</p>
<pre><code>l = list(z)
len(l)
# -&gt; 3
l
# -&gt; [(1, 'a', 11), (2, 'b', 22), (3, 'c', 33)]
</code></pre>
<hr/>
<p><a href="http://wiki.python.org/moin/Generators" rel="noreferrer">Generators</a> are a good thing. They allow us to write memory-efficient code in nearly the same way we would write code that deals with lists. To use an example from the linked wiki: </p>
<pre><code>def double(L):
    return [x*2 for x in L]
</code></pre>
<p>Could be rewritten as a generator to avoid creating another list in memory:</p>
<pre><code>def double(L):
    for x in L:
        yield x*2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To complete the previous answer, there is a Python library called <code>cardinality</code> for getting the size of iterables.</p>
<p>http://cardinality.readthedocs.io/en/latest/</p>
</div>
<span class="comment-copy">For anyone who is only used to Python 3, in Python 2.x zip returns a list of tuples.</span>
<span class="comment-copy">Thanks for adding that. Also Python 3's <code>zip()</code> works like 2.x's <code>itertools.izip()</code></span>
<span class="comment-copy">Of course, you could just write <code>double</code> as <code>double = (x*2 for x in L)</code></span>
<span class="comment-copy">True. The generator-expression alternative is also mentioned in the wiki. The example is overly simple to highlight the difference -- or lack thereof -- between the list-based approach and the generator-based approach, and is not intended to be used in production code.</span>
