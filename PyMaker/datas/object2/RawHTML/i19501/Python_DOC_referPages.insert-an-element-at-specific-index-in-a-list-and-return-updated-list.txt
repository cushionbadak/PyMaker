<div class="post-text" itemprop="text">
<p>I have this:</p>
<pre><code>&gt;&gt;&gt; a = [1, 2, 4]
&gt;&gt;&gt; print a
[1, 2, 4]

&gt;&gt;&gt; print a.insert(2, 3)
None

&gt;&gt;&gt; print a
[1, 2, 3, 4]

&gt;&gt;&gt; b = a.insert(3, 6)
&gt;&gt;&gt; print b
None

&gt;&gt;&gt; print a
[1, 2, 3, 6, 4]
</code></pre>
<p>Is there anyway I can get the updated list as result, instead of updating the original list in place?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>l.insert(index, obj)</code> doesn't actually return anything, it just updates the list.
As ATO said, you can do <code>b = a[:index] + [obj] + a[index:]</code>.
However, another way is:</p>
<pre><code>a = [1, 2, 4]
b = a[:]
b.insert(2, 3)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Shortest I got: <code>b = a[:2] + [3] + a[2:]</code></p>
<pre><code>&gt;&gt;&gt; 
&gt;&gt;&gt; a = [1, 2, 4]
&gt;&gt;&gt; print a
[1, 2, 4]
&gt;&gt;&gt; b = a[:2] + [3] + a[2:]
&gt;&gt;&gt; print a
[1, 2, 4]
&gt;&gt;&gt; print b
[1, 2, 3, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>Most Performance Efficient approach</h1>
<p>You may also insert the element using the <em>slice indexing</em> in the list. For example:</p>
<pre><code>&gt;&gt;&gt; a = [1, 2, 4]
&gt;&gt;&gt; insert_at = 2  # index at which you want to insert item

&gt;&gt;&gt; b = a[:]   # created copy of list "a" as "b"
               # skip this step if you are ok with modifying original list

&gt;&gt;&gt; b[insert_at:insert_at] = [3]  # insert "3" within "b"
&gt;&gt;&gt; b
[1, 2, 3, 4]
</code></pre>
<p>For <strong>inserting multiple elements together at a give index</strong>, all you need to do is to use a <code>list</code> of multiple elements that you want to insert. For example:</p>
<pre><code>&gt;&gt;&gt; a = [1, 2, 4]
&gt;&gt;&gt; insert_at = 2   # index starting from which multiple elements will be inserted 

# List of elements that you want to insert together at "index_at" (above) position
&gt;&gt;&gt; insert_elements = [3, 5, 6]

&gt;&gt;&gt; a[insert_at:insert_at] = insert_elements
&gt;&gt;&gt; a   # [3, 5, 6] are inserted together in `a` starting at index "2"
[1, 2, 3, 5, 6, 4]
</code></pre>
<hr/>
<p><strong>Alternative using List Comprehension</strong> <em>(but very slow in terms of performance)</em>:</p>
<p>As an alternative, it can be achieved using <em>list comprehension</em> with <a href="https://docs.python.org/3.3/library/functions.html#enumerate" rel="noreferrer"><code>enumerate</code></a> too. <em>(But please don't do it this way. It is just for illustration)</em>:</p>
<pre><code>&gt;&gt;&gt; a = [1, 2, 4]
&gt;&gt;&gt; insert_at = 2

&gt;&gt;&gt; b = [y for i, x in enumerate(a) for y in ((3, x) if i == insert_at else (x, ))]
&gt;&gt;&gt; b
[1, 2, 3, 4]
</code></pre>
<hr/>
<h1>Performance Comparison of all solutions</h1>
<p>Here's the <a href="https://docs.python.org/3/library/timeit.html" rel="noreferrer"><code>timeit</code></a> comparison of all the answers with list of 1000 elements for Python 3.4.5:</p>
<ul>
<li><p><a href="https://stackoverflow.com/a/48139870/2063361"><em>Mine answer</em></a> using sliced insertion - Fastest <em>(3.08 usec per loop)</em></p>
<pre><code>mquadri$ python3 -m timeit -s "a = list(range(1000))" "b = a[:]; b[500:500] = [3]"
100000 loops, best of 3: 3.08 usec per loop
</code></pre></li>
<li><p><a href="https://stackoverflow.com/a/14895600/2063361"><em>ATOzTOA's accepted answer</em></a> based on merge of sliced lists - Second <em>(6.71 usec per loop)</em></p>
<pre><code>mquadri$ python3 -m timeit -s "a = list(range(1000))" "b = a[:500] + [3] + a[500:]"
100000 loops, best of 3: 6.71 usec per loop
</code></pre></li>
<li><p><a href="https://stackoverflow.com/a/14895767/2063361"><em>Rushy Panchal's answer</em></a> with most votes using <code>list.insert(...)</code>- Third <em>(26.5 usec per loop)</em></p>
<pre><code>python3 -m timeit -s "a = list(range(1000))" "b = a[:]; b.insert(500, 3)"
10000 loops, best of 3: 26.5 usec per loop
</code></pre></li>
<li><p><a href="https://stackoverflow.com/a/48139870/2063361"><em>Mine answer</em></a> with <em>List Comprehension</em> and <code>enumerate</code> - Fourth <em>(very slow with  168 usec per loop)</em></p>
<pre><code>mquadri$ python3 -m timeit -s "a = list(range(1000))" "[y for i, x in enumerate(a) for y in ((3, x) if i == 500 else (x, )) ]"
10000 loops, best of 3: 168 usec per loop
</code></pre></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://www.tutorialspoint.com/python/list_insert.htm" rel="nofollow noreferrer">Python list insert() Method</a>. Usage:</p>
<blockquote>
<h1>Syntax</h1>
<p>Following is the syntax for insert() method −</p>
<p><code>list.insert(index, obj)</code></p>
<h1>Parameters</h1>
<ul>
<li>index − This is the Index where the object obj need to be inserted.</li>
<li>obj − This is the Object to be inserted into the given list.</li>
</ul>
<h1>Return Value</h1>
<p>This method does not return any value but it inserts the given element at the given index.</p>
</blockquote>
<p>Example:</p>
<pre><code>a = [1,2,4,5]

a.insert(2,3)

print(a)
</code></pre>
<p>Returns <code>[1, 2, 3, 4, 5]</code></p>
</div>
<span class="comment-copy"><code>b = a[:].insert(2,3)</code> seems pretty short, doesn't affect the original list and is pretty descriptive.</span>
<span class="comment-copy">@mkoistinen It doesn't work for me. <code>&gt;&gt;&gt; a = [1, 2, 3, 4] &gt;&gt;&gt; b = a[:].insert(2, 5) &gt;&gt;&gt; print b None</code></span>
<span class="comment-copy">I want to reduce the number of lines...</span>
<span class="comment-copy">If you can't tolerate 3 lines of readable code, put it in a function and call it.</span>
<span class="comment-copy">This solution still updates the <code>a</code> list in place. To avoid it, change the order of lines: <code>b=a[:]; b.insert(2,3)</code></span>
<span class="comment-copy">I really like this result because it easily extends to solve the problem, what if I want to insert the values <code>3, 3.5</code> into that list (in order) -&gt; <code>a[2:2] = [3,3.5]</code>. Very neat</span>
<span class="comment-copy">How does a[2:2] = a_list works?  a[2:2] is basically starting from 2nd index to 1st index(2-1) but in forward direction which means an empty [] list . How does it extend? If we do [2:3:-1] it does not work.</span>
<span class="comment-copy">This does not answer the question.</span>
<span class="comment-copy">Question was specific: <code>Is there anyway I can get the updated list as result, instead of updating the original list in place?</code> Your answer does the opposite.</span>
