<div class="post-text" itemprop="text">
<p>I have been trying to learn more about decorators using a tweaked version as below from: <a href="http://code.activestate.com/recipes/440499/" rel="nofollow">here</a></p>
<pre><code>def case(comparision):
    def __assign_case(f):
        f.__case = comparision
        return f
    return __assign_case

class switch:
    def __init__(self):
        self.__case_map = {}

        def set_case(key,f):
            self.__case_map[key] = f

        a = [getattr(self,e) for e in dir(self) if getattr(self,e) is not None and hasattr(getattr(self,e),'__case')]
        for f in a:
            cases = getattr(f,'__case')
            if isinstance(cases,tuple) or isinstance(cases,list):
                for c in cases: set_case(c,f)
            else:
                set_case(cases,f)
        print(self.__case_map)


    def match(self,value):
        try:
            self.__case_map[value]
        except KeyError:
            return self.__case_map['_default']
        return self.__case_map[value]


class b(switch):
    @case((1,3))
    def event_one(self):
        print('Event handler for 1,3 in b')

    @case(2)
    def event_two(self):
        print('Event handler for 2 in b')

    @case('_default')
    def default(self):
        print('No match was found, using default case')



a = b()
a.match(1)()
a.match(2)()
a.match(5)()
</code></pre>
<p>With results with run of:</p>
<pre><code>$ ./switch_decor.py 
{1: &lt;bound method b.event_one of &lt;__main__.b object at 0x7f03374849d0&gt;&gt;, '_default': &lt;bound method b.default of &lt;__main__.b object at 0x7f03374849d0&gt;&gt;, 3: &lt;bound method b.event_one of &lt;__main__.b object at 0x7f03374849d0&gt;&gt;, 2: &lt;bound method b.event_two of &lt;__main__.b object at 0x7f03374849d0&gt;&gt;}
Event handler for 1,3 in b
Event handler for 2 in b
No match was found, using default case
</code></pre>
<p>Notice the filled dictionary</p>
<p>I like to keep my code contained, so was trying to move the <code>case</code> function into the <code>switch</code> class like so:</p>
<pre><code>class switch:
    def __init__(self):
        self.__case_map = {}

        def set_case(key,f):
            self.__case_map[key] = f

        a = [getattr(self,e) for e in dir(self) if getattr(self,e) is not None and hasattr(getattr(self,e),'__case')]
        for f in a:
            cases = getattr(f,'__case')
            if isinstance(cases,tuple) or isinstance(cases,list):
                for c in cases: set_case(c,f)
            else:
                set_case(cases,f)
        print(self.__case_map)


    def match(self,value):
        try:
            self.__case_map[value]
        except KeyError:
            return self.__case_map['_default']
        return self.__case_map[value]

    @staticmethod
    def case(comparision):
        def __assign_case(f):
            f.__case = comparision
            return f
        return __assign_case

class b(switch):
    @switch.case((1,3))
    def event_one(self):
        print('Event handler for 1,3 in b')

    @switch.case(2)
    def event_two(self):
        print('Event handler for 2 in b')

    @switch.case('_default')
    def default(self):
        print('No match was found, using default case')



a = b()
a.match(1)()
a.match(2)()
a.match(5)()
</code></pre>
<p>But I end up getting an empty <code>self.__case_map</code> dictionary resulting in this error:</p>
<pre><code>$ ./switch_decor_contained.py
{}
Traceback (most recent call last):
  File "./switch_decor_contained.py", line 23, in match
    self.__case_map[value]
KeyError: 1

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./switch_decor_contained.py", line 50, in &lt;module&gt;
    a.match(1)()
  File "./switch_decor_contained.py", line 25, in match
    return self.__case_map['_default']
KeyError: '_default'
</code></pre>
<p>Notice the blank dictionary at the beginning. It fails at</p>
<pre><code>a.match(1)
</code></pre>
<p>before that return function is invoked with the second <code>()</code> which is a function of the dictionary being blank tripping the exception but there is no <code>_default</code> key to the function value to return.</p>
<p>On the first set of code above, running this in a console gives:</p>
<pre><code>&gt;&gt;&gt; hasattr(a.event_one, "__case")
True
</code></pre>
<p>But on the second set of code above, running </p>
<pre><code>&gt;&gt;&gt; hasattr(a.event_one, "__case")
False
</code></pre>
<p>Despite the fact that <code>@switch.case</code> is being run as tests on that showed. There is some untoward side effect from invoking it within a class. What is the side effect?</p>
<p>How can I move the <code>case</code> function into the <code>switch</code> class and use it as a method successfully to decorate the functions in class <code>b</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>First, if you're trying to call <code>self.case</code>, there has to be a <code>self</code> parameter to the <code>case</code> method. It doesn't matter whether you're using <code>case</code> as a decorator or a normal function; it's still called the same way.</p>
<p>But more importantly, at the time you're defining the <code>b</code> class, there <em>is</em> no <code>self</code>. If you think about it, there's no way there <em>could</em> be one, because <code>self</code> refers to each instance of <code>b</code>, and there aren't any instances yet—there isn't even a class yet. Looked at from another angle, the only way you ever get a <code>self</code> is by taking one as a parameter; there's no <code>self</code> in scope at the point where you're defining <code>b</code>. (Many people new to Python think there's a whole lot of magic to <code>self</code>, but there isn't anything beyond the fact that <code>foo.bar(baz)</code> is looked up in <code>foo</code> and then called as <code>bar(foo, baz)</code>.)</p>
<p>If you just want to move a function into a class for encapsulation purposes, but not make it an instance method, the way to do that is with <a href="http://docs.python.org/3/library/functions.html#staticmethod" rel="nofollow"><code>staticmethod</code></a>:</p>
<pre><code>class switch:
    # ...
    @staticmethod
    def case(comparision):
        def __assign_case(f):
            f.__case = comparision
            return f
        return __assign_case
</code></pre>
<p>It's actually not that common that you want <code>staticmethod</code>; usually you want <code>classmethod</code>, because you want access to the <code>class</code> object (so you can call other <code>classmethod</code>s, access class attributes, and/or create instances of the <code>class</code>). But in this case, you don't even have a <code>b</code> class yet, and you wouldn't have anything useful to do with it even if you did, so <code>staticmethod</code> is exactly what you want. (PS, it's a good thing you <em>don't</em> want access to <code>b</code> here, because otherwise, you'd need to learn about metaclasses… and I'd wait until you get the hang of decorators first.)</p>
<p>Finally, while we're tossing decorators into your decorator definition (which is a very common thing to do), you almost always want to use <a href="http://docs.python.org/3/library/functools.html#functools.wraps" rel="nofollow"><code>functools.wraps</code></a> in any decorator:</p>
<pre><code>class switch:
    # ...
    @staticmethod
    def case(comparision):
        @functools.wraps(comparision)
        def __assign_case(f):
            f.__case = comparision
            return f
        return __assign_case
</code></pre>
<p>Anyway, with all that out of the way, how do you <em>call</em> <code>case</code> if you don't have a <code>self</code>? Well, a staticmethod can be called on the class it's in, any subclass, or any instance of either, but normally it's called on the class:</p>
<pre><code>class b(switch):
    @switch.case((1,3))
    def event_one(self):
        print('Event handler for 1,3 in b')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I found the answer the the problem. It has to do with the renaming of attributes in class-private variables. This can be seen for <a href="http://docs.python.org/3.0/tutorial/classes.html#private-variables" rel="nofollow">python 3 here</a> under Private Variables  and for <a href="http://docs.python.org/2/tutorial/classes.html#private-variables-and-class-local-references" rel="nofollow">python 2 here</a> section 9.6 Private Variables and Class-local References.</p>
<p>In the code with the function as a method (the second listing above), the <code>f.__case</code> was renamed to <code>f._switch__case</code>. If every instance of <code>__case</code> is replaced with <code>_switch__case</code> except for the <code>@staticmethod</code> function, the code works as it should. I'm not 100% sure why Python is designed this way, but I'm guessing it has something to do with preserving namespace, but I'm not sure why it is necessary as <code>class</code> has its own namespace.</p>
<p>Below is the corrected code:</p>
<pre><code>class switch:
    def __init__(self):
        self.__case_map = {}

        def set_case(key,f):
            self.__case_map[key] = f

        a = [getattr(self,e) for e in dir(self) if getattr(self,e) is not None and hasattr(getattr(self,e),'_switch__case')]
        for f in a:
            cases = getattr(f,'_switch__case')
            if isinstance(cases,tuple) or isinstance(cases,list):
                for c in cases: set_case(c,f)
            else:
                set_case(cases,f)

    def match(self,value):
        try:
            self.__case_map[value]
        except KeyError:
            return self.__case_map['_default']
        return self.__case_map[value]

    @staticmethod
    def case(comparision):
        def __assign_case(f):
            f.__case = comparision
            return f
        return __assign_case

class b(switch):
    @switch.case((1,3))
    def event_one(self):
        print('Event handler for 1,3 in b')

    @switch.case(2)
    def event_two(self):
        print('Event handler for 2 in b')

    @switch.case('_default')
    def default(self):
        print('No match was found, using default case')



a = b()
a.match(1)()
a.match(2)()
a.match(5)()
</code></pre>
</div>
<span class="comment-copy">on further working this through, there are no items in the dictionary because the class <code>b</code> methods don't have the attribute <code>__case</code> assigned despite the decorator being called thus the <code>__init__</code> in switch never finds the attribute in them so they may be added to the dictionary. Why is this failing?</span>
<span class="comment-copy">Actually, I had copied old code into the above. I first tried @self.case but that, of course, gave a "no such thing has self" error. The error I get as pasted above is with <code>@switch.case</code>. I have corrected the code above to reflect this. Somehow, moving the <code>case</code> function into the class and calling it as a static method of the class breaks the code leaving me an empty (<code>{}</code>) <code>self.__case_map</code> dictionary.</span>
<span class="comment-copy">BTW, I love how you put <code>self</code>. It took me over a year to understand <code>self</code> in a way that you eloquently stated it succinctly. I wish I read that a year ago. Still, I hadn't put 2&amp;2 together about the order. It still is a little fuzzy to me because if the class doesn't exist yet, how does the decorator do anything to a method within it, but I think it is because the class hasn't been instantiated yet (therefore no <code>self</code>) yet the static methods are there.</span>
<span class="comment-copy">Just adding this for those who are reading that this is not the answer to the question. The problem remains. Please see the above edited question.</span>
<span class="comment-copy">@namie: The reason the decorator can do something is this: You haven't finished defining <code>b</code> yet, but you <i>have</i> finished defining a function named <code>event_one</code> in the local scope. You can do anything you want with <code>event_one</code> at this point, including writing <code>event_one = switch.case((1,3))(event_one)</code>. Since, under the covers, that's all a decorator does, there's no problem using a decorator here. When you finally finish with <code>b</code>, that's when the <code>b.event_one</code> unbound method is created out of the <code>event_one</code> local function. But you don't give <code>b.event_one</code> to the decorator, just <code>event_one</code>.</span>
<span class="comment-copy">@narnie: PS, There is a case where you <i>can</i> use <code>self</code> in a decorator: If you're creating new local functions inside <code>__init__</code> (or any regular instance method), they have access to the local variables inside <code>__init__</code>, which includes the <code>self</code> variable. (And you can even bind those functions as new instance-specific methods if you want.)</span>
<span class="comment-copy">Thanks to @abarnert for the recommendation of adding <code>@staticmethod</code> to the code.</span>
<span class="comment-copy">The reason Python is designed this way is to private a way for people to prevent themselves from accidentally using "private" members of a base class. If you don't want that, just don't name your members with leading underscores like this. And the reason it takes the ugly double underscore is to make sure you don't use this feature by accident. (In fact, why <i>did</i> you name it <code>__case</code> if you weren't trying to make it "private" in this sense?)</span>
<span class="comment-copy">@abarnert, I didn't name the variables that way, they were already named as I noted at the very beginning, this was code from another place that I was trying to convert. I don't think I would have chosen to make them private attributes. In fact, this is how I figured it out. I wrote a much simpler set of classes to test it out and just named it [function].case rather than [function].__case and it worked correctly. I then went searching from there to see where the rename to [function]._switch__case was coming from.</span>
