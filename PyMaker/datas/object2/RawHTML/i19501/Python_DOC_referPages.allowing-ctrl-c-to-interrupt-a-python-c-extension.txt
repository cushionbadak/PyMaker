<div class="post-text" itemprop="text">
<p>I'm running some computationally heavy simulation in (home-made) C-based python extensions. Occasionally I get stuff wrong and would like to terminate a simulation. However, Ctrl-C doesn't seem to have any effect (other than printing <code>^C</code> to the screen so I have to kill the process using <code>kill</code> or the system monitor.</p>
<p>As far as I can see python just waits for the C extension to finish and doesn't really communicate with it during this time.</p>
<p>Is there a way to make this work?</p>
</div>
<div class="post-text" itemprop="text">
<p>I would redesign the C extensions so that they don't run for a long period. </p>
<p>So, split them into more elementary steps (each running for a short period of time, e.g. 10 to 50 milliseconds), and have these more elementary steps called by Python code.</p>
<p><a href="http://en.wikipedia.org/wiki/Continuation-passing_style" rel="nofollow">continuation passing style</a> might be relevant to understand, as a programming style...</p>
</div>
<div class="post-text" itemprop="text">
<p>Python has a signal handler installed on <code>SIGINT</code> which simply sets a flag that is checked by the main interpreter loop. For this handler to work properly, the Python interpreter has to be running Python code.</p>
<p>You have a couple of options available to you:</p>
<ol>
<li>Use <code>Py_BEGIN_ALLOW_THREADS</code>/<code>Py_END_ALLOW_THREADS</code> to release the GIL around your C extension code. You cannot use any Python functions when not holding the GIL, but Python code (and other C code) may run concurrently with your C thread (true multithreading). A separate Python thread can execute alongside the C extension and catch Ctrl+C signals.</li>
<li>Set up your own <code>SIGINT</code> handler and call the original (Python) signal handler. Your <code>SIGINT</code> handler can then do whatever it needs to do to cancel the C extension code and return control to the Python interpreter.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>However, Ctrl-C doesn't seem to have any effect</p>
</blockquote>
<p><a href="https://unix.stackexchange.com/q/149741/1321"><code>Ctrl-C</code> in the shell sends <code>SIGINT</code> to the foreground process group</a>. <code>python</code> on receiving the signal sets a flag in C code. If your C extension runs in the main thread then no Python signal handler will be run (and therefore you won't see <code>KeyboardInterrupt</code> exception on <code>Ctrl-C</code>) unless you call <a href="https://docs.python.org/3/c-api/exceptions.html#c.PyErr_CheckSignals" rel="nofollow noreferrer"><code>PyErr_CheckSignals()</code></a> that checks the flag (it means: it shouldn't slow you down) and runs Python signal handlers if necessary or if your simulation allows Python code to execute (e.g., if the simulation uses Python callbacks). If the extension runs in a background  thread then it is enough to release GIL (to allow Python code to run in the main thread that enables the signal handlers to run).</p>
<p>Related: <a href="https://stackoverflow.com/q/16769870/4279">Cython, Python and KeybordInterrupt ingored</a></p>
</div>
<div class="post-text" itemprop="text">
<p>There is an alternative way to solve this problem if you do not want your C Extension (or ctypes DLL) to be tied to Python, such as a case where you want to create a C library with bindings in multiple languages, you must allow your C Extension to run for long periods, and you can modify the C Extension:</p>
<p>Include the signal header in the C Extension.</p>
<pre><code>#include &lt;signal.h&gt;
</code></pre>
<p>Create a signal handler typedef in the C Extension.</p>
<pre><code>typedef void (*sighandler_t)(int);
</code></pre>
<p>Add signal handlers in the C extension that will perform the actions necessary to interrupt any long running code (set a stop flag, etc.), and save the existing Python signal handlers.</p>
<pre><code>sighandler_t old_sig_int_handler = signal(SIGINT, your_sig_handler);
sighandler_t old_sig_term_handler = signal(SIGTERM, your_sig_handler);
</code></pre>
<p>Restore the existing signal handlers whenever the C extension returns. This step ensures that the Python signal handlers are re-applied.</p>
<pre><code>signal(SIGINT, old_sig_int_handler);
signal(SIGTERM, old_sig_term_handler);
</code></pre>
<p>If the long-running code is interrupted (flag, etc.), return control to Python with a return code indicating the signal number.</p>
<pre><code>return SIGINT;
</code></pre>
<p>In Python, send the signal received in the C extension.</p>
<pre><code>import os
import signal

status = c_extension.run()

if status in [signal.SIGINT, signal.SIGTERM]:
    os.kill(os.getpid(), status)
</code></pre>
<p>Python will perform the action you are expecting, such as raising a KeyboardInterrupt for SIGINT.</p>
</div>
<span class="comment-copy">See <a href="http://stackoverflow.com/questions/1112343/how-do-i-capture-sigint-in-python" title="how do i capture sigint in python">stackoverflow.com/questions/1112343/â€¦</a></span>
<span class="comment-copy">related: <a href="http://stackoverflow.com/q/14271697/4279">CTRL+C doesn't interrupt call to shared-library using CTYPES in Python</a></span>
<span class="comment-copy">Sorry, not an option at all in this case :) It's a simulation with a huge number of steps &amp; speed is essential. Interfacing with python at each step (or even at regular intervals) would ruin the efficiency.</span>
<span class="comment-copy">Try to bunch the steps into something lasting a few milliseconds. Then the overhead of going to Python is negligible...</span>
<span class="comment-copy">It's certainly worth thinking about, but it does raise a lot of issues with memory management etc. Thanks!</span>
<span class="comment-copy">Haven't implemented it yet, but this is definitely on my todo list. Thanks again!</span>
<span class="comment-copy">Done it now, it works fine :)</span>
<span class="comment-copy">(1) <a href="http://stackoverflow.com/q/14271697/4279">releasing GIL would make any difference only if the C extension runs in a background thread</a>.  (2) <a href="http://stackoverflow.com/a/33652496/4279">call <code>Py_Err_CheckSignals()</code> instead of manuall calling Python signal handler</a></span>
<span class="comment-copy">Is there a pure-python way to detect SIGINT in a callback, main.py -&gt; long-running scipy optimizer which calls a shared lib -&gt; callback.py ? (Shall I ask a new question ?)</span>
<span class="comment-copy">@denis: " pure-python way to detect SIGINT" -&gt; KeyboardInterrupt is raised in the main thread (with the default signal handler).</span>
