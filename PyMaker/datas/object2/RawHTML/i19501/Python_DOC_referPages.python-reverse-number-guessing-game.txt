<div class="post-text" itemprop="text">
<p>So I've been trying to figure out a way to write a program where the computer tries to guess the number I am thinking of, instead of the other way around where you are guessing a computer's chosen number. It works most of the time however in some situations it does repeat numbers down the chain even though I've told it before that for example the value I am thinking of is higher than '7'. In some cases it also repeats the same number again even though I tell it its higher or lower. If someone more experienced could have a look at this and tell me what am I missing in these loops it would help a great deal.</p>
<pre><code>#computer enters a value x
#lower - computer guesses lower than x
#higher - computer guesses higher than x
#when string "You got it!" - game over

import random

lowBound = 0
highBound = 100
randomNumber = random.randint(lowBound,highBound)

print ("Is it ", randomNumber, " ?")
response = input()

while response != "You got it!":
    if response == "higher":
        lowBound = randomNumber    
        randomNumber = random.randint (lowBound, highBound)
        print ("Is it ", randomNumber, " ?")
        response = input()

    elif response == "lower":
        highBound = randomNumber
        randomNumber = random.randint (lowBound, highBound)
        print ("Is it ", randomNumber, " ?")
        response = input()

    if response == "You got it!":

        print ("Woohooo, I'm so bitchin'")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>random.randint</code> is inclusive, so:</p>
<pre><code>if response == 'higher':
    lowBound = randomNumber + 1
</code></pre>
<p>and </p>
<pre><code>if response == 'lower':
    highBound = randomNumber - 1
</code></pre>
<p>Also, if the user does not enter a valid response, <code>input()</code> will never be called again and the program will hang in an infinite loop.</p>
<p>Something more robust, but doesn't handle liars:</p>
<pre><code>import random

lowBound = 0
highBound = 100
response = ''
randomNumber = random.randint(lowBound,highBound)

while response != "yes":
    print ("Is it ", randomNumber, " ?")
    response = input()
    if response == "higher":
        lowBound = randomNumber + 1   
        randomNumber = random.randint(lowBound,highBound)
    elif response == "lower":
        highBound = randomNumber - 1
        randomNumber = random.randint(lowBound,highBound)
    elif response == "yes":
        print ("Woohooo, I'm so bitchin'")
        break
    else:
        print ('Huh? "higher", "lower", or "yes" are valid responses.')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>random.randint(a, b)</code> returns a number between and including <code>a</code> and <code>b</code>. When generating a new random number you should use <code>random.randint(lowBound+1, highBound-1)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>One of your problems, among the others mentioned, is on these lines:</p>
<pre><code>highBound = randomNumber
randomNumber = random.randint (lowBound, highBound)
</code></pre>
<p>You're setting a new bound, which is good, but then you're choosing another random number! </p>
<p>What you should be doing, is <em>halving</em> the bound, and asking the user higher or lower from there. Have a look at <strong>binary search</strong> algorithms.</p>
<pre><code>highBound = randomNumber
randomNumber = randomNumber / 2
</code></pre>
<p>Your program is still going to work (with the other changes mentioned here), but this will guess your number quicker most of the time.</p>
<p>There is actually <a href="http://en.wikipedia.org/wiki/Binary_search_algorithm" rel="nofollow">an example of this game on Wikipedia.</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Here is my version of this exercise from Michael Dawson's book, I was trying to minimize number of tries, that computer uses. I know code looks dodgy, it is just my 2nd day:)</p>
<hr/>
<pre><code>answer=""
guess=50
counter=3
x=25

print("hi, guess the number from 1 too 100")
input("\n")

print ("i will try to guess it")
print ("is it ", guess, "?")

while answer not in ("y","l","s"):
    print ("sorry, i didn't understand \n")
    answer=input("type in: (Y) for yes, or (L) if it is to large, or (S) if it is to small:")

if answer in ("s","l"):
    while answer!="y":

        if answer=="l":
            guess=int(guess-x)
            print ("how about", guess,"?")
            answer=input("\nis it? type in: (Y) for yes, or (L) if it is to large, or (S) if it is to small:")
            x=100/2**counter
            counter=counter+1
            if x&lt;1:
                x=1

        elif answer=="s":
            guess=int(guess+x)
            print ("how about", guess,"?")
            answer=input("\nis it? type in: (Y) for yes, or (L) if it is to large, or (S) if it is to small:")
            x=100/2**counter
            counter=counter+1
            if x&lt;1:
                x=1

        elif answer=="y":
            break
else:
    pass

print("\ngreat! the number that you guessed is", guess)
print("i can read your mind with no guesses!")
input("\n")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You get numbers twice because <a href="http://docs.python.org/3/library/random.html#random.randint" rel="nofollow"><code>random.randint</code></a>'s boundaries are inclusive; <code>random.randint(1, 3)</code> can return 1,2, or 3. Note that you should also continue to ask the human if the response is neither "higher", nor "lower" nor "You got it!":</p>
<pre><code>import random
lowBound = 0
highBound = 100

while True:
    randomNumber = random.randint(lowBound, highBound)
    print ("Is it ", randomNumber, " ?")
    response = input()

    if response == "higher":
        lowBound = randomNumber + 1
    elif response == "lower":
        highBound = randomNumber - 1

    if response == "You got it!":
        print ("Woohooo, I'm so bitchin'")
        break
</code></pre>
</div>
<span class="comment-copy">Any reason that you won't post your code here...?</span>
<span class="comment-copy">Sorry about that, I wasn't sure if it was going to highlight the python syntax as it does on pastebin. I will certainly post it like you've suggested from now on.</span>
<span class="comment-copy">Thank you, that makes perfect sense.</span>
<span class="comment-copy">Thanks for the link! I will definitely try it this way.</span>
<span class="comment-copy">This doesn't directly answer the question. If you want people to look at code, try <a href="http://codereview.stackexchange.com/">codereview.stackexchange.com</a></span>
