<div class="post-text" itemprop="text">
<p>I have a dictionary where each key has a list (vector) of items:</p>
<pre><code>from collections import defaultdict
dict = defaultdict(list)
dict[133] = [2,4,64,312]
dict[4] = [2,3,5,12,45,32]
dict[54] = [12,2,443,223]

def getTotalVectorItems(items):
  total = 0
  for v in items.values():
    total += len(v)
  return total

print getTotalVectorItems(dict)
</code></pre>
<p>This will print:</p>
<pre><code>14 # number of items in the 3 dict keys.
</code></pre>
<p>Is there an easier more pythonic way other than creating this "getTotalVectorItems" function? I feel like there is a quick way to do this already.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>print sum(map(len,dic.itervalues()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are looking for <a href="http://docs.python.org/3/library/functions.html#sum" rel="nofollow">the <code>sum()</code> built-in</a> with a <a href="http://www.youtube.com/watch?v=pShL9DCSIUw" rel="nofollow">generator expression</a>:</p>
<pre><code>sum(len(v) for v in items.values())
</code></pre>
<p>The <code>sum()</code> function totals the values of the given iterator, and the generator expression yields the length of each value in the lists.</p>
<p>Note that calling lists vectors is probably confusing to most Python programmers, unless you are using the term vector in the context of the domain of the problem.</p>
</div>
<span class="comment-copy"><code>sum(map(len,dic.values()))</code>, don't use <code>dict</code> as a variable name.</span>
<span class="comment-copy">Is there a reason (maybe in code you omitted) that you're using a <code>defaultdict</code> here?  Your code would work equally well with <code>d = {}; d[133] = [2,4,64,312]</code>, etc.</span>
<span class="comment-copy">Or, better yet: <code>d = {133: [2, 4, 64, 312], 4: [2, 3, 5, 12, 45, 32], 54: [12, 2, 443, 223]}</code> - this isn't Java, we have dict literals.</span>
<span class="comment-copy">@AshwiniChaudhary sorry bout that, my pseudocode was badly written. I'll give your code a shot. I'm using defaultdict because it's the only way to use lists as the value of the dict keys (or so I was told).</span>
<span class="comment-copy">@lattyware oh thanks I didn't realize I can do that.</span>
<span class="comment-copy">{ 1: 000576, 2: 000405; 1: 000942, 2: 000622; 1: 000655, 2: 000442; 1: 000520, 2: 000436; 1: 000594, 2: 000442; }  Your method (2) seems faster than Lattyware's method.</span>
<span class="comment-copy">@Dexter Thank you. In Python 2, if you use <code>imap</code> it will certainly be even faster, but I didn't put it in my answer because it needs to be imported. In Python 3, <code>map</code> is already a generator (or iterator, I never remind which one) - Also, the use of <code>itervalues()</code> makes faster than use of <code>items.values()</code> that creates a new object.</span>
<span class="comment-copy">Oh cool, I shall try this immediately. Yeah I won't be using Python 3 for a while, but good to know.</span>
<span class="comment-copy">I don't know why but there doesn't seem to be much speed difference between imap and map. Sometimes one looks faster than the other, other times, the exact opposite (bear in mind I'm not including import time). Ironically using lambda with this stuff sometimes increases speed (rather than calling 3 functions 4 times, you call 1 function 4 times). But it looks like you are right mostly: <a href="http://i.imgur.com/VYYfkG5.png" rel="nofollow noreferrer">i.imgur.com/VYYfkG5.png</a></span>
<span class="comment-copy">@Dexter I'm perplexed by what you say. I was so much convinced that <code>imap</code> would be faster that I wrote "certainly" though hesitating with "probably". I would like to understand while there isn't at least a litle improvement of the speed.</span>
<span class="comment-copy">Yes but I saying "I want a dict with list values" sounds weird. It's hard to make the distinction between the noun/verb list and the special structure list in python. Thanks I will try both answers in my code and see which is faster.</span>
<span class="comment-copy">Thanks for the great answer but my test revealed the other "map" method seems faster for large dictionaries. Both are correct though.</span>
