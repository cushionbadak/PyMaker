<div class="post-text" itemprop="text">
<p>Ok, so basically I'm making a simple game which involves a highscore.
I would like the highscore to be saved if bigger than the previous highscore.
This is my code. I have a few different errors, some involving the fact that I'm switching between strings and integers and other errors because my code is plain wrong. I gave it quite a shot to try and understand the problem but new errors seem to keep coming. </p>
<pre><code>hisc = open("Hscore.txt", "r+")
hiscore = hisc.read(3) # 3 because the max score would never reach 1000
highscore = int(hiscore)
if score &gt; highscore:
    hiscore = hiscore.replace(hiscore, score)
    hisc.write(hiscore)
</code></pre>
<p>This was my last attempt at this. It could be 100% wrong, i made my best effort.
What I need is so that whenever I run the game it shows my high score. If my score is larger than my highscore, the highscore in the text file is changed. It s then reloaded into the game to act again in this code. </p>
</div>
<div class="post-text" itemprop="text">
<p>The problem with your code is that you're trying to call <code>hiscore.replace</code> when <code>hiscore</code> is an <code>int</code>.</p>
<p>I'm not sure why you're trying to use <code>replace</code> in the first place. That's useful to replace part of a string with a different string. If you want to replace the whole thing, just assign a new value: <code>hiscore = score</code>.</p>
<pre><code>hisc = open("Hscore.txt", "r+")
hiscore = hisc.read(3) # 3 because the max score would never reach 1000
highscore = int(hiscore)
if score &gt; highscore:
    hiscore = score
    hisc.write(hiscore)
</code></pre>
<p>However, you have a second problem: You're writing an <code>int</code> out to a file, when what you want (I think) is the string representation of that <code>int</code> as exactly 3 characters. So, replace that last line with this:</p>
<pre><code>    hisc.write('{:3}'.format(hiscore))
</code></pre>
<p>Meanwhile, opening a file in <code>"r+"</code> mode may not do what you think it does. In Python 3, the "read pointer" and "write pointer" are always in the same place for an "r+" file. So, if you read 3 characters, and then write 3 characters, you end up overwriting characters 3-6, or adding 3 new characters to the end, instead of overwriting characters 0-3 as you want. You could deal with this by calling <code>seek(0, 0)</code> after the <code>read</code>.</p>
<p>Finally, you never <code>close</code> the file, which means whatever you wrote might never get saved—it could sit around in a buffer in memory, and never get flushed to the actual disk file. And it's probably simpler here to just open for read, then close, then open for write, then close, so you don't need to worry about all that <code>seek</code> nonsense. The easiest way to close files is to use a <code>with</code> statement.</p>
<p>So, putting it all together:</p>
<pre><code>with open("Hscore.txt", "r") as hisc:
    hiscore = hisc.read(3) # 3 because the max score would never reach 1000
highscore = int(hiscore)
if score &gt; highscore:
    with open("Hscore.txt", "w") as hisc:
        hisc.write('{:3}'.format(score))
</code></pre>
<p>But this relies on the fact that Hscore.txt is guaranteed to exist (in the current working directory), and to have a number in it. If some bug causes you to stick an "x" in there, or empty the file out entirely, you'll get an exception every time you run, and never be able to recover. So, you may want something like this:</p>
<pre><code>try:
    with open("Hscore.txt", "r") as hisc:
        hiscore = hisc.read(3) # 3 because the max score would never reach 1000
    highscore = int(hiscore)
except IOError as e:
    print('Warning: couldn't open "Hscore.txt": {}'.format(e))
    highscore = 0
except ValueError as e:
    print('Warning: couldn't convert "{}" from "Hscore.txt" to an integer: {}'.format(hiscore, e))
    highscore = 0
</code></pre>
<p>That way, it'll print out a warning that will hopefully help you figure out what's wrong, and also try to recover (by assuming that a missing or corrupted file means the highscore is 0).</p>
<p>The <a href="http://docs.python.org/3/library/functions.html#open" rel="nofollow"><code>open</code></a> documentation and the <a href="http://docs.python.org/3/library/io.html#io-overview" rel="nofollow"><code>io</code> module Overview</a> explains most of this, but it's not exactly beginner-friendly. <a href="http://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow">Reading and Writing Files</a> in the tutorial may be more helpful.</p>
</div>
<span class="comment-copy">What is the variable score? int or string?</span>
<span class="comment-copy">score is int and my original highscore in text document is 0</span>
<span class="comment-copy">@kennym <code>r+</code> is for read and write.</span>
<span class="comment-copy">Why are you doing <code>hiscore = hiscore.replace(hiscore, score)</code>? Are you trying to do something that <code>hiscore = score</code> wouldn't do? If so, what?</span>
<span class="comment-copy">Also, please tell us exactly what goes wrong—if you see an error message, paste the traceback here; if it seems to work but the file is never changed, describe that; etc. (In this case, I'm pretty sure I can guess, but in general, you'll get better answers, and faster, if you don't make people guess.)</span>
<span class="comment-copy">This was helpful. But it didn't quite work. I was left with the score being written into the text without actually deleting the previous highscore. So I had 12345678910111213  etc..</span>
<span class="comment-copy">@DennisCallanan: Updated the answer to explain that, and how to deal with it. And I'll update it again with some links once I gather them.</span>
<span class="comment-copy">I really appreciate the help. I am now getting an error:   highscore = int(hiscore) ValueError: invalid literal for int() with base 10: ''</span>
<span class="comment-copy">@DennisCallanan: What's in the file at that point? Or, you can add a <code>print(hiscore)</code> right before the <code>highscore = int(hiscore)</code>, and see what it's trying to convert.</span>
<span class="comment-copy">@DennisCallanan: Hold on… is the score the entire contents of the "Hscore.txt" file? If so, we can make this a lot simpler by not trying to restrict ourselves to exactly 3 characters.</span>
