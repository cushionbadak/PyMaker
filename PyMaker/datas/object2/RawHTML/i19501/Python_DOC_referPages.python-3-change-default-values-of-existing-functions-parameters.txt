<div class="post-text" itemprop="text">
<p>I'm creating a program which will eventually have like 500 calls for <code>print</code> function, and some others too. Each of these functions will take the exact same parameters every time, like this:</p>
<pre><code>print(a, end='-', sep='.')
print(b, end='-', sep='.')
print(c, end='-', sep='.')
print(..., end='-', sep='.')
</code></pre>
<p>Is there a way to change the default values of <code>print</code> function's parameters? So that I wouldn't have to type <code>end='-', sep='.'</code> every time?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can define a special version of <code>print()</code> using <a href="http://docs.python.org/3/library/functools.html#functools.partial"><code>functools.partial()</code></a> to give it default arguments:</p>
<pre><code>from functools import partial

myprint = partial(print, end='-', sep='.')
</code></pre>
<p>and <code>myprint()</code> will then use those defaults throughout your code:</p>
<pre><code>myprint(a)
myprint(b)
myprint(c)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also use a lambda function:</p>
<pre><code>my_print = lambda x: print(x, end='-', sep='-')
my_print(a)
my_print(b)
my_print(c)
</code></pre>
</div>
<span class="comment-copy">This is better than what I was going to attempt.  I was going to do something horrible with <code>__defaults__</code> (which apparently doesn't exist on builtin functions anyway ...)</span>
<span class="comment-copy">@MartijnPieters Thanks, this is exactly what I was looking for. However, how is this different from defining a new function, like <code>def myprint(*args): print(*args, end='-', sep'.')</code> or using <code>lambda</code> like Lee suggested? Just curious, is this better in some way?</span>
<span class="comment-copy">@PatrikLippojoki: <code>functools.partial</code> codifies defining your own wrapper function into one line. It's better in that it is shorter and clearer (in my view); it signals you are still just calling <code>print()</code> but with default arguments.</span>
<span class="comment-copy">@MartijnPieters Fair enough. This'll do, thanks! :)</span>
<span class="comment-copy">functools.partial is good, just be aware that it only "became" available in Python 2.5+</span>
<span class="comment-copy">Python 2.5 is rather old by now.</span>
<span class="comment-copy">Indeed it is. I know of several vendors that haven't certified their product on anything past RHEL5.4 which still has 2.4 (!!) on it.</span>
<span class="comment-copy">@Lee: Yes. But you can install newer versions side by side. No excuse. But I very well understand what you mean :) Microsoft would tell you in similar case <i>the older system is not supported</i>. Yes, it may be arrogant sometimes, but it is also pragmatic.</span>
<span class="comment-copy">With this lambda, <code>my_print</code> can only accept one argument, which makes the function far less interesting. And of course, it defeats the purpose of the <code>sep='-'</code> .</span>
