<div class="post-text" itemprop="text">
<p>Okay, I have this string</p>
<pre><code>tc='(107, 189)'
</code></pre>
<p>and I need it to be a tuple, so I can call each number one at a time. </p>
<pre><code>print(tc[0]) #needs to output 107
</code></pre>
<p>Thank you in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>All you need is <code>ast.literal_eval</code>:</p>
<pre><code>&gt;&gt;&gt; from ast import literal_eval
&gt;&gt;&gt; tc = '(107, 189)'
&gt;&gt;&gt; tc = literal_eval(tc)
&gt;&gt;&gt; tc
(107, 189)
&gt;&gt;&gt; type(tc)
&lt;class 'tuple'&gt;
&gt;&gt;&gt; tc[0]
107
&gt;&gt;&gt; type(tc[0])
&lt;class 'int'&gt;
&gt;&gt;&gt;
</code></pre>
<p>From the <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="noreferrer">docs</a>:</p>
<blockquote>
<p><code>ast.literal_eval(node_or_string)</code></p>
<p>Safely evaluate an expression node or a Unicode or Latin-1 encoded string containing a 
  Python expression. The string or node provided may
  only consist of the following Python literal structures: strings,
  numbers, tuples, lists, dicts, booleans, and None.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/2/library/ast.html#ast.literal_eval"><code>ast.literal_eval()</code></a>:</p>
<pre><code>&gt;&gt;&gt; import ast
&gt;&gt;&gt; tc='(107, 189)'
&gt;&gt;&gt; tc_tuple = ast.literal_eval(tc)
&gt;&gt;&gt; tc_tuple
(107, 189)
&gt;&gt;&gt; tc_tuple[0]
107
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the builtin <code>eval</code>, which evaluates a Python expression:</p>
<pre><code>&gt;&gt;&gt; tc = '(107, 189)'
&gt;&gt;&gt; tc = eval(tc)
&gt;&gt;&gt; tc
(107, 189)
&gt;&gt;&gt; tc[0]
107
</code></pre>
</div>
<span class="comment-copy">This works, but is unsafe with uncontrolled input.</span>
<span class="comment-copy">Well, this builtin function exists for a reason, and I think if the OP problem is specific for that kind of expressions, it gets the job done flawlessly and requires no imports.</span>
<span class="comment-copy">I'm always confused about why people are against imports.  I don't think I've ever written a python script that did not require me to import at least <code>sys</code> or <code>os</code>.</span>
<span class="comment-copy">Usually imports are not bad.. but if I can solve a specific problem using the builtins, I'd prefer that. But anyway, note that import (including when importing only few items from the module), actually evaluates the entire module, and maybe, in some rare cases, you may want to avoid that (though, usually it doesn't really matter, and you won't feel any difference).</span>
