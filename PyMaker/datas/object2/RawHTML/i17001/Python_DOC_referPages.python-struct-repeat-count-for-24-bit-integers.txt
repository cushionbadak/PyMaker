<div class="post-text" itemprop="text">
<p>I want to unpack array of 2760 bytes, to new array of 920 24-bit integers. Unlike e.g. 16 bit integers, where would <code>struct.unpack_from('920h',array,0)</code> do the thing, you can't use 'repeat count' syntax with 24 bit integers:<br/></p>
<pre><code>struct.unpack_from('920&lt;i', array,0 )
</code></pre>
<p>This gives the following error: 'bad count in struct format'. <br/></p>
<p>So what's the syntax for 24 bit integers? I can't find anything in the documentation.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>struct</code> does not natively support 24-bit integers.</p>
<p>If these are <em>unsigned</em> integers, on trick you could use is to use the <a href="https://docs.python.org/2/library/array.html" rel="nofollow"><code>array.array()</code> type</a> to read the data as bytes, then process these per 3:</p>
<pre><code>import array

b = array.array('B', yourdata)
result = [b[i] &lt;&lt; 16 | b[i + 1] &lt;&lt; 8 | b[i + 2] for i in xrange(0, len(b), 3)]
</code></pre>
<p>or you could use <a href="https://docs.python.org/2/library/array.html#array.array.fromfile" rel="nofollow"><code>array.fromfile()</code></a> to read the data from a file input as needed:</p>
<pre><code>with open('somefilename', 'rb') as infh:
    b = array.array('B')
    b.fromfile(infh, 920)
    result = [b[i] &lt;&lt; 16 | b[i + 1] &lt;&lt; 8 | b[i + 2] for i in xrange(0, len(b), 3)]
</code></pre>
<p>Adjust as needed for byte order (swap the <code>b[i]</code> and <code>b[i + 2]</code> references).</p>
<p>If these are <em>signed</em> 24-bit integers, you may have to stick to <code>struct</code>, and pad the <em>least significant side</em> with a null-byte, then right-shift the result by 8. That way you don't have to worry about negative vs. positive numbers and how to pad either type on the most-significant side:</p>
<pre><code>[struct.unpack('&gt;i', yourdata[i:i+3] + '\x00')[0] &gt;&gt; 8
 for i in range(0, len(yourdata), 3)]
</code></pre>
<p>for big-endian, and </p>
<pre><code>[struct.unpack('&lt;i', '\x00' + yourdata[i:i+3])[0] &gt;&gt; 8
 for i in range(0, len(yourdata), 3)]
</code></pre>
<p>for little-endian signed 24-bit integers.</p>
<p>If you are using Python 3.2 or newer, you can read the data 3 bytes at a time and convert to integers with <a href="https://docs.python.org/3/library/stdtypes.html#int.from_bytes" rel="nofollow"><code>int.from_bytes()</code></a>, which gives you more flexibility over endianess and if you are parsing signed or unsigned integers.</p>
</div>
<span class="comment-copy">There is no explicit support for 24-bit integers, no. I'd pad them out to 32 bits, then unpack those using <code>I</code>.</span>
<span class="comment-copy">See <a href="http://stackoverflow.com/q/10216650">Reading 3 bytes as an integer</a> for example.</span>
<span class="comment-copy">@roberto: I'd read them per <i>three</i> bytes in a loop.</span>
<span class="comment-copy">Yes, I thought the same, but then I have to pass counter-variable as argument to <code>unpack</code> function. I didn't read about that. Offset would be <code>i</code>, in that case</span>
<span class="comment-copy">@roberto: are these integers signed or unsigned?</span>
<span class="comment-copy">I didn't check; but I suppose they are signed. But tell me is it possible to specify <code>i</code> variable (loop counter) as offset in struct?</span>
<span class="comment-copy">no, it's not possible to specify an offset.</span>
