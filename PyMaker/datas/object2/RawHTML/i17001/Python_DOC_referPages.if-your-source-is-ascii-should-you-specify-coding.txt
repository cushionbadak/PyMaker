<div class="post-text" itemprop="text">
<p>We have a large project that is entirely coded in ASCII. Is it worth putting coding statements at the beginning of each source file (e.g. #coding=utf-8) for some reason if the source doesn't have any unicode in it?</p>
<p>Thanks,
--Peter</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/tutorial/interpreter.html#source-code-encoding" rel="nofollow">ASCII is the default in Python 2</a>. <a href="https://docs.python.org/3/tutorial/interpreter.html#source-code-encoding" rel="nofollow">UTF-8 is the default in Python 3</a>.</p>
<p>If your files are ascii-only; you don't need to declare the source code encoding in both version (ascii is a subset of utf-8).</p>
<p>Non-ASCII character leads to SyntaxError in Python 2 therefore an accidental non-ascii character won't go unnoticed and won't corrupt any data. There is no reason to declare source code encoding for ascii-only files.</p>
</div>
<div class="post-text" itemprop="text">
<p>For portability I would explicitly declare it, especially as the default file encoding is changing in Python 3 (see <a href="http://legacy.python.org/dev/peps/pep-3120/" rel="nofollow">PEP-3120</a>):</p>
<blockquote>
<p>This PEP proposes to change the default source encoding from ASCII to
  UTF-8. Support for alternative source encodings continues to
  exist; an explicit encoding declaration takes precedence over the
  default.</p>
</blockquote>
<p>Although it doesn't affect you with ASCII, seeing how <a href="http://legacy.python.org/dev/peps/pep-0020/" rel="nofollow">explicit is better than implicit</a> I would recommend you add it to the top of your file.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should do one of two things (at least):</p>
<ul>
<li>Add a hook to your repository making it verify on checkin that all python files are still pure ASCII.</li>
<li>Put the explicit ASCII-encoding tag in the files.</li>
</ul>
<p>You might want to check if you get significantly better startup when the explicit tag is UTF-8 though. Anyway, I would consider that a bug of the interpreter.</p>
<p>This way, if anyone slips and mistakenly adds some non-ASCII characters, you won't have to chase that (potential) bug. Explicitly restricting to ASCII has one advantage: You actually can reliably see what each string contains and there are no equal-seeming distinct names.</p>
</div>
<span class="comment-copy">I'd certanly do it... A python script would do it pretty quickly <b>;-)</b></span>
<span class="comment-copy">no I see no reason to specify encoding unless required to run the script ... furthermore I think that adding <code>#coding=utf8</code> to the top would make it confusing if theres no utf8 characters ... (not overly so but meh ...)</span>
<span class="comment-copy">Depends what you want to happen if somebody pastes some non-ASCII UTF-8 data into a string in one of the files. Do you want it to work, or to complain that they aren't supposed to do that? What do you want if they paste in some non-ASCII data in an encoding other than UTF-8? That is to say, are your files ASCII by policy, or are they UTF-8 by policy that <i>happens</i> only to contain ASCII characters?</span>
<span class="comment-copy">In our case, there is no policy as to the encoding, but the files do happen to be almost universally ASCII. Seems to me that the best course of action, since Python 3 will (I hope) be in our future at some point, and since we are getting a very small benefit from ASCII encoding (namely, that should there accidentally be unicode committed to the file that the interpreter will raise an exception), that we should go ahead and explicitly label the encoding ASCII (except for any files that actually need UTF-8)</span>
<span class="comment-copy">the source code encoding declaration is redundant redundant for ascii-only files.</span>
