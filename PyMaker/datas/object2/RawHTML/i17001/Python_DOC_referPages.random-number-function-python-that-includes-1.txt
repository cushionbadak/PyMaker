<div class="post-text" itemprop="text">
<p>I am new to Python and am trying to create a program for a project- firstly, I need to generate a point between the numbers 0-1.0, including 0 and 1.0 ([0, 1.0]). I searched the python library for functions (<a href="https://docs.python.org/2/library/random.html" rel="noreferrer">https://docs.python.org/2/library/random.html</a>) and I found this function: </p>
<pre><code>random.random()
</code></pre>
<p>This will return the next random floating point number in the range [0.0, 1.0). This is a problem, since it does not include 1. Although the chances of actually generating a 1 are very slim anyway, it is still important because this is a scientific program that will be used in a larger data collection.</p>
<p>I also found this function:</p>
<pre><code>rand.randint
</code></pre>
<p>This will return an integer, which is also a problem. </p>
<p>I researched on the website and previously asked questions and found that this function:</p>
<pre><code>random.uniform(a, b)
</code></pre>
<p>will only return a number that is greater than or equal to a and less than b.</p>
<p>Does anyone know how to create a random function on python that will include [0, 1.0]?</p>
<p>Please correct me if I was mistaken on any of this information. Thank you.</p>
<p>*The random numbers represent the x value of a three dimensional point on a sphere.</p>
</div>
<div class="post-text" itemprop="text">
<p>Consider the following function built on top of <code>random.uniform</code>. I believe that the re-sampling approach should cause all numbers in the desired interval to appear with equal probability, because the probability of returning <code>candidate &gt; b</code> is <code>0</code>, and originally all numbers should be equally likely.</p>
<pre><code>import sys
import random


def myRandom(a, b):
    candidate = uniform.random(a, b + sys.float_info.epsilon)
    while candidate &gt; b:
       candidate = uniform.random(a, b + sys.float_info.epsilon)
    return candidate
</code></pre>
<p>As gnibbler mentioned below, for the general case, it may make more sense to change both the calls to the following. Note that this will only work correctly if <code>b &gt; 0</code>.</p>
<pre><code> candidate = uniform.random(a, b*1.000001)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Could you make do with something like this?</p>
<pre><code>random.randint(0, 1000) / 1000.0
</code></pre>
<p>Or more formally:</p>
<pre><code>precision = 3
randomNumber = random.randint(0, 10 ** precision) / float(10 ** precision)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>import random
random.uniform(0.0, 1.0)
</code></pre>
<p>Which will, according to the <a href="https://docs.python.org/3/library/random.html#random.uniform" rel="nofollow">documentation</a> [Python 3.x]:</p>
<blockquote>
<p>Return a random floating point number <em>N</em> such that <code>a &lt;= N &lt;= b</code> for <code>a &lt;= b</code> and <code>b &lt;= N &lt;= a</code> for <code>b &lt; a</code>.</p>
</blockquote>
<p>Notice that the above paragraph states that <code>b</code> is in fact <em>included</em> in the range of possible values returned by the function. However, beware of the second part (emphasis mine):</p>
<blockquote>
<p>The end-point value b <strong>may or may not be included</strong> in the range depending on floating-point rounding in the equation <code>a + (b-a) * random()</code>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Would it be just:</p>
<pre><code>list_rnd=[random.random() for i in range(_number_of_numbers_you_want)]
list_rnd=[item/max(list_rnd) for item in list_rnd]
</code></pre>
<p>Generate a list of random numbers and divide it by its max value. The resulting list still flows uniform distribution.</p>
</div>
<div class="post-text" itemprop="text">
<p>For floating point numbers you can use numpy's <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.finfo.html" rel="nofollow">machine limits for floats</a> class to get the smallest possible value for 64bit or 32bit floating point numbers. In theory, you should be able to add this value to b in <code>random.uniform(a, b)</code> making 1 inclusive in your generator:</p>
<pre><code>import numpy
import random

def randomDoublePrecision():
    floatinfo = numpy.finfo(float)
    epsilon = floatinfo.eps
    a = random.uniform(0, 1 + eps)
    return a
</code></pre>
<p>This assumes that you are using full precision floating point numbers for your number generator. For more info read <a href="http://en.wikipedia.org/wiki/Machine_epsilon" rel="nofollow">this Wikipedia article</a>.   </p>
</div>
<span class="comment-copy">They are pseudo random numbers anyway. So not including 1 is the least of your problems then.</span>
<span class="comment-copy">@gnibbler, I just saw that and your comment at the same time, so I deleted my answer.</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/5249717/is-it-possible-to-find-random-floats-in-range-a-b-in-python">is it possible to find random floats in range [a,b] in python?</a></span>
<span class="comment-copy">@merlin2011 That question does not have the answer I am looking for. I am looking for alternative ways to go about this function, while that question only said that the chances of it actually landing 1.0 would be so small that it is insignificant. In this program, it is important that 1.0 is included.</span>
<span class="comment-copy">@user3550811, Retracted close vote and updated answer. Please consider the given workaround.</span>
<span class="comment-copy">Did you read the qualifier in the docs? "The end-point value b may or may not be included in the range...". For <code>(0.0, 1.0)</code> it's just the same as calling <code>.random()</code></span>
<span class="comment-copy">@gnibbler, Please see the updated solution and give your critique. :)</span>
<span class="comment-copy">This seems a reasonable approach. <code>sys.float_info.epsilon</code> is too small for this to work for the general case. <code>b==1</code> is ok. In the general case you could use <code>b * 1.000001</code>.</span>
<span class="comment-copy">@gnibbler, Thank you for feedback. Will update.</span>
<span class="comment-copy">This is the right type of idea. The OP needs to specify the qualities of the random numbers more precisely to determine a good way to generate them.</span>
<span class="comment-copy">I just deleted my answer. The second line in the docs says: <code>The end-point value b may or may not be included in the range depending on floating-point rounding in the equation a + (b-a) * random().</code></span>
<span class="comment-copy">The part you quoted just says the numbers won't be <i>outside</i> that range. It's the second part that implies that 1.0 will never be included.</span>
<span class="comment-copy">@gnibbler what second part?</span>
<span class="comment-copy">The source code includes this comment <code>"Get a random number in the range [a, b) or [a, b] depending on rounding."</code> and <i>does</i> just use <code>random</code>, so that extra qualification shouldn't have been removed from the docs</span>
<span class="comment-copy">It's not a good idea to cite outdated resources. The current docs for Python 3 <a href="https://docs.python.org/3/library/random.html#random.uniform" rel="nofollow noreferrer">show the comment again</a>.</span>
<span class="comment-copy">This is a clever idea, but will <i>always</i> include 1.0, so is probably not what is wanted.</span>
<span class="comment-copy">Right, miss read it. But <code>random.uniform</code> may and may not include a 1. I suspect always have a 1.0 is the intended. Otherwise it makes little sense to me...  let's see what the OP says.</span>
