<div class="post-text" itemprop="text">
<p>I have a very large text file. I want to search for the last occurrence of a specific word and then perform certain operations on the lines that follows it.</p>
<p>I can do something like:</p>
<pre><code>if "word" in line.split():
    do something
</code></pre>
<p>I am only interested in the last occurrence of <code>"word"</code> however.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well an easier and quicker solution would be to open the file in reversed order and then searching the first word location.</p>
<p>In python 2.6 you can do something like (where word is string you are looking for)</p>
<pre><code>for line in reversed(open("filename").readlines()):
    if word in line:
    # Do the operations here when you find the line
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try like this:</p>
<pre><code>f = open('file.txt', 'r')
lines = f.read()
answer = lines.find('word')
</code></pre>
<p>and then you can pick the last word from this</p>
<p>You may also use <strong><a href="https://docs.python.org/3/library/stdtypes.html#str.rfind" rel="nofollow">str.rfind</a></strong></p>
<pre><code>str.rfind(sub[, start[, end]])
</code></pre>
<blockquote>
<p>Return the highest index in the string where substring sub is found,
  such that sub is contained within s[start:end]. Optional arguments
  start and end are interpreted as in slice notation. Return -1 on
  failure.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You can open your file, transform it into a list, reverse its order and iterate looking for your word.</p>
<pre><code>with open('file.txt','r') as file_:
    line_list = list(file_)
    line_list.reverse()

    for line in line_list:
        if line.find('word') != -1:
            # do something
            print line
</code></pre>
<p>Optionally you can specify the size of the file buffer passing the buffer size (in bytes) as the third parameter of <code>open</code>. For instance: <code>with open('file.txt','r', 1024) as file_:</code></p>
</div>
<div class="post-text" itemprop="text">
<p>If the file is hundreds of megabytes or even gigabytes in size, then you may want to use <a href="https://docs.python.org/release/2.7/library/mmap.html" rel="nofollow noreferrer">mmap</a> so you don't have to read the entire file into memory.  The <a href="https://docs.python.org/release/2.7/library/mmap.html?highlight=mmap.rfind#mmap.rfind" rel="nofollow noreferrer">rfind</a> method finds the last occurrence of a string in the file.</p>
<pre><code>import mmap

with open('large_file.txt', 'r') as f:
    # memory-map the file, size 0 means whole file
    m = mmap.mmap(f.fileno(), 0, prot=mmap.PROT_READ)  
                          # prot argument is *nix only

    i = m.rfind('word')   # search for last occurrence of 'word'
    m.seek(i)             # seek to the location
    line = m.readline()   # read to the end of the line
    print line
    nextline = m.readline()
</code></pre>
<p>Just keep calling <code>readline()</code> to read following lines.</p>
<p>If the file is extremely large (like tens of gigabytes) then you can map it in chunks with the <em>length</em> and <em>offset</em> arguments of <code>mmap()</code></p>
</div>
<span class="comment-copy">Depending on the file size, you may want to start at the end and read in chunks, seeking backward.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/stdtypes.html#str.rfind" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#str.rfind</a> google is your friend</span>
<span class="comment-copy">How big is your file?</span>
<span class="comment-copy">@Bonifacio2: about 300k lines.</span>
<span class="comment-copy">use .rfind('word') operator</span>
<span class="comment-copy">But this will read the whole file into memory, right?</span>
<span class="comment-copy">@hat:- How many lines do you have in your file?</span>
<span class="comment-copy">This isn't quit the same as what the OP does.  Compare <code>"name" in "protect your enamel".split()</code> with <code>"protect your enamel".rfind("name")</code>.</span>
<span class="comment-copy">@user3414693: about 300k lines.</span>
<span class="comment-copy">@hat:- Yes it will so you dont want to read it entirely in memory and yes you have to read it sequentially</span>
<span class="comment-copy">I just tried this and the number return by m.rfind(word.encode()) does not appear to be a line number but perhaps the byte position in the file?</span>
<span class="comment-copy">Yes that’s correct, rfind() will return the byte position in the file, not the line number.</span>
<span class="comment-copy">The OP didn’t ask for the line number, they just wanted to process the lines following the last match.</span>
