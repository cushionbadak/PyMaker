<div class="post-text" itemprop="text">
<pre><code>{"green": 0, "y3": 1, "m@tt": 0, "newaccount": 0, "egg": 0, "results": 0, "dan": 0, "Lewis": 0, "NewAccount2": 0, "testyear3": 1, "testyear6": 0, "NewAccount1": 0, "testyear4": 0, "testyear5": 0, "Matt1": 0, "swag": 1, "lewis": 1, "matt": 1, "notin": 0}
</code></pre>
<p>this is the dictionary defined as 'completeddict'.
What I want to do, is to change ALL values no matter what they are called to 0. 
However bear in mind that new account names will be added at any point as 'keys' so I cannot manually do "completeddict[green] = 0", "completeddict[lewis] = 0", etc etc.</p>
<p>Is there any way to have python change ALL values within a dictionary back to 0?</p>
<p>EDIT: Unfortunately I do not want to create a new dictionary - I want to keep it called 'completeddict' as the program needs to use the dictionary defined as 'completeddict' at many points in the program.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another option is to use <a href="https://docs.python.org/3/library/stdtypes.html#dict.fromkeys" rel="noreferrer"><code>.fromkeys()</code></a>:</p>
<blockquote>
<p>fromkeys(seq[, value])</p>
<p>Create a new dictionary with keys from seq and values set to value.</p>
</blockquote>
<pre><code>d = d.fromkeys(d, 0)
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; d = {"green": 0, "y3": 1, "m@tt": 0, "newaccount": 0, "egg": 0, "results": 0, "dan": 0, "Lewis": 0, "NewAccount2": 0, "testyear3": 1, "testyear6": 0, "NewAccount1": 0, "testyear4": 0, "testyear5": 0, "Matt1": 0, "swag": 1, "lewis": 1, "matt": 1, "notin": 0}
&gt;&gt;&gt; d.fromkeys(d, 0)
{'newaccount': 0, 'swag': 0, 'notin': 0, 'NewAccount1': 0, 'Matt1': 0, 'testyear4': 0, 'Lewis': 0, 'dan': 0, 'matt': 0, 'results': 0, 'm@tt': 0, 'green': 0, 'testyear5': 0, 'lewis': 0, 'NewAccount2': 0, 'y3': 0, 'testyear3': 0, 'egg': 0, 'testyear6': 0}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sure, its pretty easy:</p>
<pre><code>newDict = {key: 0 for key in completeddict}
</code></pre>
<p>This is dictionary comprehension and is equivalent to:</p>
<pre><code>newDict = {}
for key in completeddict:
    newDict[key] = 0
</code></pre>
<p>These dict comprehensions were introduced in v2.7, so older vesions will need to use the expanded form. </p>
</div>
<div class="post-text" itemprop="text">
<p>A form that will work in virtually any Python version is just use the <code>dict</code> constructor with a list comprehension or generator:</p>
<pre><code>&gt;&gt;&gt; d={"green": 10, "y3": 11, "m@tt": 12, "newaccount": 22, "egg": 55, "results": 0, "dan": 0, "Lewis": 0, "NewAccount2": 0, "testyear3": 1, "testyear6": 0, "NewAccount1": 0, "testyear4": 0, "testyear5": 0, "Matt1": 0, "swag": 1, "lewis": 1, "matt": 1, "notin": 0}
&gt;&gt;&gt; d=dict((k, 0) for k in d)
&gt;&gt;&gt; d
{'newaccount': 0, 'swag': 0, 'notin': 0, 'NewAccount1': 0, 'Matt1': 0, 'testyear4': 0, 'Lewis': 0, 'dan': 0, 'matt': 0, 'results': 0, 'm@tt': 0, 'green': 0, 'testyear5': 0, 'lewis': 0, 'NewAccount2': 0, 'y3': 0, 'testyear3': 0, 'egg': 0, 'testyear6': 0}
</code></pre>
<p>Which you can then use with a mutable argument or some form of callable:</p>
<pre><code>&gt;&gt;&gt; d=dict((k, list()) for k in d)
</code></pre>
<p>Now each element of <code>d</code> is a new list (or whatever else mutable or not you would want to set the value portion of the tuple to be).</p>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want to create a new dict, it seems like all you need is a simple two-line loop, unless I'm missing something:</p>
<pre><code>for key in completeddict.keys():
    completeddict[key] = 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Adding to <strong>alecxe</strong> asnwer, </p>
<p>your dictionary is,</p>
<pre><code>completeddict = {"green": 0, "y3": 1, "m@tt": 0, "newaccount": 0, "egg": 0, "results": 0, "dan": 0, "Lewis": 0, "NewAccount2": 0, "testyear3": 1, "testyear6": 0, "NewAccount1": 0, "testyear4": 0, "testyear5": 0, "Matt1": 0, "swag": 1, "lewis": 1, "matt": 1, "notin": 0}
</code></pre>
<p>now this dictionary can be updated with default values, </p>
<pre><code>completeddict.update({}.fromkeys(completeddict,0)
</code></pre>
<p>Done. your completeddict is updated with default value for all keys.</p>
<p>Ex:</p>
<pre><code>a = {'x':2,'y':4}
print id(a)  
print a
a.update({}.fromkeys(a,0))
print id(a)
print a
</code></pre>
<p>Output:</p>
<pre><code>42612608     &lt;--- id of dict 'a'
{'y': 4, 'x': 2}     &lt;--- dict 'a' before updation
42612608     &lt;--- id of dict 'a'   
{'y': 0, 'x': 0}     &lt;--- dict 'a' after updation
</code></pre>
<p>It can be observed that id of the dictionary same even after it is updated with default values.</p>
</div>
<span class="comment-copy">I think you are misunderstanding a fundamental concept in Python: if you have a dict called <code>completeddict</code> and then you say <code>completeddict=something_new</code> then the rest of your code will use something_new without any issue.</span>
<span class="comment-copy"><b>See also</b>: equivalent question and answers for PHP <a href="http://stackoverflow.com/questions/2217160">stackoverflow.com/questions/2217160</a></span>
<span class="comment-copy">+1, one of my favs. Just make sure that you don't do <code>{}.fromkeys(d, [])</code></span>
<span class="comment-copy">This will work here, but it's worth remembering that all values are the <i>same</i> <code>value</code>, and so if <code>value</code> were mutable -- say an empty list -- you'll get into trouble.</span>
<span class="comment-copy">The <code>.keys()</code> is unnecessary.</span>
<span class="comment-copy">@filmor, good catch, I always forget that!</span>
<span class="comment-copy">That second form is important if you are using older Python2. Weren't dict comprehensions added in 2.7?</span>
<span class="comment-copy">@Two-BitAlchemist, edited, thanks for the heads up</span>
<span class="comment-copy">Python 2.6 final came out in 2008; at some point people will have to upgrade.  And since even Python 2.4 supports generator expressions, <code>dict((k,0) for k in completedict)</code> would be an almost-as-concise alternative.</span>
<span class="comment-copy">Ha!  You beat me to the mutable-argument issue, but I beat you to this! ;-)</span>
<span class="comment-copy">@DSM: You usually do ;-}</span>
