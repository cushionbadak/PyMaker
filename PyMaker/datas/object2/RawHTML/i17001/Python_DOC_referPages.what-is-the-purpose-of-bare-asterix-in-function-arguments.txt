<div class="post-text" itemprop="text">
<p>I've seen this SO question (this is not a duplicate): <a href="https://stackoverflow.com/questions/14301967/python-bare-asterisk-in-function-argument">Python bare asterisk in function argument</a></p>
<p>In python-3.x you can add a bare <code>*</code> to the function arguments, this means that (quote from <a href="https://docs.python.org/3/reference/compound_stmts.html#function-definitions" rel="nofollow noreferrer">docs</a>):</p>
<blockquote>
<p>Parameters after “*” or “*identifier” are keyword-only parameters and
  may only be passed used keyword arguments.</p>
</blockquote>
<p>Ok, so, I've defined a function:</p>
<pre><code>&gt;&gt;&gt; def f(a, b, *, c=1, d=2, e=3):
...     print('Hello, world!')
... 
</code></pre>
<p>I can pass <code>c</code>, <code>d</code> and <code>e</code> variable values only by specifying keywords:</p>
<pre><code>&gt;&gt;&gt; f(1, 2, 10, 20, 30)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: f() takes 2 positional arguments but 5 were given
&gt;&gt;&gt; f(1, 2, c=10, d=20, e=30)
Hello, world!
</code></pre>
<p>Questions are:</p>
<ul>
<li>What is the motivation for this kind of restriction/syntax sugar? </li>
<li>What use cases does it cover?</li>
<li>Is it really used in third-party libraries that switched to python3?</li>
</ul>
<p>Some "real-world" examples would help a lot. Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://www.python.org/dev/peps/pep-3102/" rel="nofollow">PEP 3102</a> explains the rationale pretty clearly: the point is to allow functions to accept various "options" that are essentially orthogonal in nature.  Specifying these positionally is awkward both on the defining and calling side, since they don't have any obvious "priority" that would translate into a positional order.</p>
<p>There are lots of example of functions that would benefit from this in various libraries.  For instance, the call signature of <code>pandas.read_csv</code> is:</p>
<pre><code>def parser_f(filepath_or_buffer,
                 sep=sep,
                 dialect=None,
                 compression=None,

                 doublequote=True,
                 escapechar=None,
                 quotechar='"',
                 quoting=csv.QUOTE_MINIMAL,
                 skipinitialspace=False,
                 lineterminator=None,

                 header='infer',
                 index_col=None,
                 names=None,
                 prefix=None,
                 skiprows=None,
                 skipfooter=None,
                 skip_footer=0,
                 na_values=None,
                 na_fvalues=None,
                 true_values=None,
                 false_values=None,
                 delimiter=None,
                 converters=None,
                 dtype=None,
                 usecols=None,

                 engine='c',
                 delim_whitespace=False,
                 as_recarray=False,
                 na_filter=True,
                 compact_ints=False,
                 use_unsigned=False,
                 low_memory=_c_parser_defaults['low_memory'],
                 buffer_lines=None,
                 warn_bad_lines=True,
                 error_bad_lines=True,

                 keep_default_na=True,
                 thousands=None,
                 comment=None,
                 decimal=b'.',

                 parse_dates=False,
                 keep_date_col=False,
                 dayfirst=False,
                 date_parser=None,

                 memory_map=False,
                 nrows=None,
                 iterator=False,
                 chunksize=None,

                 verbose=False,
                 encoding=None,
                 squeeze=False,
                 mangle_dupe_cols=True,
                 tupleize_cols=False,
                 infer_datetime_format=False):
</code></pre>
<p>Except for the filepath, most of these are orthogonal options that specify different aspects of how a CSV file is to be parsed.  There's no particular reason why they would be passed in any particular order.  You'd go nuts keeping track of any positional order for these.  It makes more sense to pass them as keywords.</p>
<p>Now, you can see that pandas doesn't actually define them as keyword-only arguments, presumably to maintain compatibility with Python 2.  I would imagine that many libraries have refrained from using the syntax for the same reason.  I don't know offhand which libraries (if any) have started using it.</p>
</div>
<div class="post-text" itemprop="text">
<h3>For those who are coming from or/and used <code>ruby</code></h3>
<p>Below expression in python</p>
<pre><code>def f(a, b, *, c=1, d=2, e=3):
</code></pre>
<p>is similar to </p>
<pre><code>def f(a,b, options={})
  c = options[:c] || 1
  d = options[:d] || 2
  e = options[:e] || 3
end
</code></pre>
<p>in ruby. </p>
<p>Since, python is <a href="https://stackoverflow.com/a/2725996/1377943">explicit is better than implicit</a>  langauge, it requires <a href="https://stackoverflow.com/questions/2322355/proper-name-for-python-operator"><code>*</code> (splat)</a> operator in parameters. </p>
<p>PS: I never used python, if i am mistaken please correct me.</p>
</div>
<span class="comment-copy">It's good for cases that need the named argument to enhance readability, e.g. a window: <code>Window(width = 800, height = 600, fullscreen = true)</code></span>
<span class="comment-copy"><a href="http://legacy.python.org/dev/peps/pep-3102/" rel="nofollow noreferrer">PEP 3102</a> explains the rationale pretty clearly.</span>
<span class="comment-copy">@BrenBarn thank you for the link, it helps with the "motivation" part a lot. Real-world examples and use cases would complete the topic.</span>
<span class="comment-copy">As far as i know, <a href="https://github.com/dabeaz/curio" rel="nofollow noreferrer"><code>curio</code></a> is using this feature in its <code>new_tasks</code> function</span>
<span class="comment-copy">The reply posted here gives an intuitive explanation: <a href="https://stackoverflow.com/a/39284225/1436851">stackoverflow.com/a/39284225/1436851</a></span>
<span class="comment-copy">A reason to force them to be keyword arguments is so that people don't rely on the order, and thus you can change it in the future, or add new keywords, (ex.: <code>ignore_comments='#'</code>), that logically would be next to <code>lineterminator</code>.</span>
<span class="comment-copy">Wow, that function takes way too many parameters. Something must clearly be wrong designed.</span>
