<div class="post-text" itemprop="text">
<p>Python language.</p>
<p>I know how to remove keys in a dictionary, for example:</p>
<pre><code>def remove_zeros(dict)
    dict = {'B': 0, 'C': 7, 'A': 1, 'D': 0, 'E': 5}
    del dict[5]
    return dict
</code></pre>
<p>I want to know how to remove all values with zero from the dictionary and then sort the keys alphabetically. Using the example above, I'd want to get ['A', 'C', 'E'] as a result, eliminating key values B and D completely.</p>
<p>To sort do I just use dict.sort() ?</p>
<p>Is there a special function I must use?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>sorted(k for (k, v) in D.iteritems() if v)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sometimes when you code you have to take a step back and try to go for your intent, rather than trying to do one specific thing and miss the entire big picture.  In python you have this feature called list/dictionary comprehension, from which you can use to filter the input to get the results you desire.  So you want to filter out all values in your dictionary that are 0, it's simply this:</p>
<pre><code>{k, v for k, v in d.items() if v != 0}
</code></pre>
<p>Now, dictionaries are hash tables, by default they are not sortable, however there is a class that can help you with this in <a href="https://docs.python.org/3/library/collections.html" rel="nofollow"><code>collections</code></a>.  Using the <code>OrderedDict</code> class to facilitate the sorting, the code will end up like this:</p>
<pre><code>OrderedDict(sorted(((k, v) for k, v in d.items() if v != 0)), key=lambda t: t[0])
</code></pre>
<p>Also, it's highly inadvisable to name your variables with the same name as a builtin type or method, such as <code>dict</code>.</p>
</div>
