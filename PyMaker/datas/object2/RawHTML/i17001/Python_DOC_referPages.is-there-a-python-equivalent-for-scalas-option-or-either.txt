<div class="post-text" itemprop="text">
<p>I really enjoy using the Option and Either monads in Scala. Are there any equivalent for these things in Python? If there aren't, then what is the pythonic way of handling errors or "absence of value" without throwing exceptions?</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, really, the pythonic way for a function to say "I am not defined at this point" is to raise an exception.  </p>
<pre><code>&gt;&gt;&gt; int("blarg")
Traceback (most recent call last):
  ...
ValueError: invalid literal for int() with base 10: 'blarg'

&gt;&gt;&gt; dict(foo=5)['bar']
Traceback (most recent call last):
  ...
KeyError: 'bar'

&gt;&gt;&gt; 1 / 0
Traceback (most recent call last):
  ...
ZeroDivisionError: integer division or modulo by zero
</code></pre>
<p>This is, in part because there's no (generally useful) static type checker for python.  A python function <em>cannot</em> syntactically state, at compile time, that it has a particular codomain;  there's no way to force callers to match all of the cases in the function's return type.</p>
<p>If you prefer, you can write (unpythonically) a Maybe wrapper:</p>
<pre><code>class Maybe(object):
    def get_or_else(self, default):
        return self.vaue if isinstance(self, Just) else default

class Just(Maybe):
    def __init__(self, value):
        self.value = value

class Nothing(Maybe):
    pass
</code></pre>
<p>But I would not do this, unless you're trying to port something from scala to python without changing much</p>
</div>
<div class="post-text" itemprop="text">
<p><code>mypy</code> adds type definitions and type checking (not at runtime) over regular Python. They have an <code>Optional</code>: <a href="https://docs.python.org/3/library/typing.html#typing.Optional" rel="noreferrer">https://docs.python.org/3/library/typing.html#typing.Optional</a>. More here <a href="https://www.python.org/dev/peps/pep-0484/#rationale-and-goals" rel="noreferrer">https://www.python.org/dev/peps/pep-0484/#rationale-and-goals</a>. Intellij has plugin support which makes it all very professional and smooth.</p>
</div>
<div class="post-text" itemprop="text">
<p>In python, for an absence of value, the variable is None, so you can do it this way.</p>
<pre><code>vars = None

vars = myfunction()

if vars is None:
     print 'No value!'
else:
     print 'Value!'
</code></pre>
<p>or even just check if a value is present like this</p>
<pre><code>if vars is not None:
     print vars
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I realize this is pretty late to the party but I came to this page on top of google before deciding to implement it so maybe I can help others googling with this. I implemented it, you can get it from pypi as <code>pyther-maybe</code>, it implements both Either and Maybe with Maybe as a special subclass of Either. This example should explain how it works:</p>
<pre><code>import sys
from pyther_maybe import *

def save_div ( x, y ):
    if y == 0:
        return nothing() # alias of Maybe()
    else:
        return value(x / y) # alias of Maybe(x / y)

float_test = save_div(1.0, 3.0)

assert isinstance(float_test, Maybe)

if float_test: #nothing tests as false:
    float = float_test() # calling the container with no arguments returns its value
else:
    sys.exit("something went wrong")

print float

# or if you want to encode a reason:

def save_div ( x, y ):
    if y == 0:
        return left("You can't divide by zero, silly") # alias of Either(left=...)
    else:
        return right(x / y) # alis of Either(...)

float_test = save_div(4.2, 0.0)

assert isinstance(float_test, Either)

def fake_exit ( string ):
    print "We would have exited with:"
    print string
    return "Whatever value"

if float_test:
    # these two are te same
    float = float_test()
    float = float_test.right()
else:
    fake_exit(float_test.left())

# or in a shorter and more pleasant format
# does the same as above
float = float_test.extract(fake_exit)

print float # prints "Whatever value"

# Also, these containers are mutable:

box = nothing()

try:
    print box() # raises exception
except RightEitherException:
    print "We caught an exception"

def change_box():
    box(4)

change_box()
print box() # 4
</code></pre>
<p>It has more features than that, some of which are pretty useless in practise (it's also an iterator for instance and has subscript notation like <code>pyther_maybe.either(x)[pyther_maybe.Right] == x</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>A list that happens to always be of length zero or one fulfills some of the same goals as optional/maybe types.  You won't get the benefits of static typing in Python, but you'll probably get a run-time error even on the happy path if you write code that tries to use the "maybe" without explicitly "unwrapping" it.</p>
</div>
<span class="comment-copy">Beautiful answer, both parts.</span>
<span class="comment-copy">Question states explicitly: "without throwing exceptions"...</span>
<span class="comment-copy">One may also use <code>None</code> vs. <code>&lt;actual value you want&gt;</code> and enforce it with discipline.</span>
<span class="comment-copy">Hi @SingleNegationElimination, i understand your point about absence of static types, but still Option (and other Monads) gives you a powerful abstraction to reason about your code! Even if you won't get type check you still get a hint that value, in case of option, can be missing, and do something to recover from failure!</span>
<span class="comment-copy">Why is this voted down? It makes an important point that anything is nullable in Python because Python is not statically type-checked. I'd use <code>None</code> in Python the same way I'd use <code>None</code> in Scala, but Scala can verify that I don't use <code>None</code> in arithmetic, while Python lets me make this mistake all the time.</span>
<span class="comment-copy">I voted down because the answer is very poor in terms of the question. The Option pattern in scala refers to a pattern Called 'Null Object Pattern' and the intention is to avoid the if statement</span>
<span class="comment-copy">This is the simplest and most Pythonic answer, in my opinion. While I think highly of the option pattern in Scala and Rust (for example), but for Python, I think this commenter says it best: "One may also use None vs. &lt;actual value you want&gt; and enforce it with discipline. â€“ Malcolm May 2 '17 at 21:00"</span>
