<div class="post-text" itemprop="text">
<p>For a research project similar to <a href="http://doi.ieeecomputersociety.org/10.1109/TSE.2013.12" rel="nofollow noreferrer">this one</a> i want to extract all "documentation units" out of the <a href="https://docs.python.org/3/" rel="nofollow noreferrer">python documentation.</a> 
A documentation unit in the python documentation can be (as html-meta tag): </p>
<ul>
<li>a method (dl class: method)</li>
<li>a class  (dl class: class)</li>
<li>a section (div class: section)</li>
</ul>
<p>And as you might guess, these should be nested like this: A section contains several classes, which contains several methods. But in fact that is very irregular. </p>
<p><strong>Example1:</strong> If a section contains several classes and methods: I want to get each method alone and each class without the methods (which i already got) and the section without the classes (which i already have in that case) and without the methods (which i also already have) but with the rest of the it (as there is a lot of additional stuff in there)</p>
<p><strong>Example2:</strong> If a method or a class has no section in which they appear, i also want them as mentioned above and must not forget them. </p>
<p><em>Note:</em> Doesn't make it easier but i would like to get all of them in a list which has the <strong>same order as in the original documenation.</strong></p>
<p>I tried it with BeautifulSoup but i guess for that purpose i need to search "from leaf to root" to get the deepest elements first- which is (afaik) not supported by BeautifulSoup4. </p>
<p><a href="https://stackoverflow.com/questions/23174251/grabbing-different-elements-with-beautifulsoup-avoid-duplicating-in-nested-elem">First i thought the problem is to avoid duplicates</a> but in fact that is not the main problem. </p>
<p>I appreciate your hints. </p>
</div>
<div class="post-text" itemprop="text">
<p>Seems that this is not possible.</p>
<p>So what i did to solve this problem is to iterate over the elements (which i got using .descendants) again and again and then i replaced the nested-elements with a placeholder to make that change visible (using replace_with).</p>
<p>As i used .descendants before, the nested elements are stored anyway. </p>
</div>
