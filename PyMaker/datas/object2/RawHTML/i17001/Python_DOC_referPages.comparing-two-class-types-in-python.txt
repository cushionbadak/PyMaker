<div class="post-text" itemprop="text">
<p>I have two classes defined in a module <code>classes.py</code>:</p>
<pre><code>class ClassA(object):
    pass

class ClassB(object):
    pass
</code></pre>
<p>And in another module I am getting the attributes of the module:</p>
<pre><code>import classes

Class1 = getattr(classes, 'ClassA')
Class2 = getattr(classes, 'ClassA')
print type(Class1) == type(Class2)

Class3 = getattr(classes, 'ClassA')
Class4 = getattr(classes, 'ClassB')
print type(Class3) == type(Class4)
</code></pre>
<p>Both type comparison are returning True and that's not what I was expecting.</p>
<p>How can I compare class types using python's native type values?</p>
</div>
<div class="post-text" itemprop="text">
<h2>Explanation</h2>
<p>This is why your comparison doesn't work as expected</p>
<pre><code>&gt;&gt;&gt; class ClassA(object):
...     pass
... 
&gt;&gt;&gt; class ClassB(object):
...     pass
... 
&gt;&gt;&gt; type(ClassB)
&lt;class 'type'&gt; 
&gt;&gt;&gt; type(ClassA)
&lt;class 'type'&gt; 
&gt;&gt;&gt; type(ClassA) == type(ClassB)
True
</code></pre>
<p>But why do <code>ClassA</code> and <code>ClassB</code> have the same type <code>type</code>? Quoting the <a href="https://docs.python.org/3/reference/datamodel.html#customizing-class-creation" rel="noreferrer">docs</a>:</p>
<blockquote>
<p>By default, classes are constructed using type(). The class body is
  executed in a new namespace and the class name is bound locally to the
  result of type(name, bases, namespace).</p>
</blockquote>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; ClassB
&lt;class '__main__.ClassB'&gt;
&gt;&gt;&gt; type('ClassB', (), {})
&lt;class '__main__.ClassB'&gt;
&gt;&gt;&gt; type(ClassB)
&lt;class 'type'&gt;
&gt;&gt;&gt; type(type('ClassB', (), {}))
&lt;class 'type'&gt;
</code></pre>
<p>Getting the type of <code>ClassB</code> is exactly the same as getting the type of <code>type('ClassB', (), {})</code>, which is <code>type</code>.</p>
<h2>Solutions</h2>
<p><strong>Compare them directly</strong> (w/out using the <code>type()</code> function):</p>
<pre><code>&gt;&gt;&gt; ClassA
&lt;class '__main__.ClassA'&gt;
&gt;&gt;&gt; ClassB
&lt;class '__main__.ClassB'&gt;
&gt;&gt;&gt; ClassA == ClassB
False
</code></pre>
<p><strong>or initialize them</strong> and compare the types of their objects:</p>
<pre><code>&gt;&gt;&gt; a = ClassA()
&gt;&gt;&gt; b = ClassB()
&gt;&gt;&gt; type(a) 
&lt;class '__main__.ClassA'&gt;
&gt;&gt;&gt; type(b) 
&lt;class '__main__.ClassB'&gt;
&gt;&gt;&gt; type(a) == type(b)
False
</code></pre>
<p>FWIW you can also use <code>is</code> in place of <code>==</code> (for classes).</p>
</div>
<div class="post-text" itemprop="text">
<p>You're comparing the type of the class object, which are all of type <code>'type'</code>.</p>
<p>If you just want to compare the classes, compare them directly:</p>
<pre><code>print Class3 == Class4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to check if types are equal then <strong>you should use <code>is</code> operator</strong>.</p>
<p><em>Example</em>: we can create next stupid metaclass</p>
<pre><code>class StupidMetaClass(type):
    def __eq__(self, other):
        return False
</code></pre>
<p>and then class based on it:</p>
<ul>
<li><p>in Python 2</p>
<pre><code>class StupidClass(object):
    __metaclass__ = StupidMetaClass
</code></pre></li>
<li><p>in Python 3</p>
<pre><code>class StupidClass(metaclass=StupidMetaClass):
    pass
</code></pre></li>
</ul>
<p>then simple check</p>
<pre><code>StupidClass == StupidClass
</code></pre>
<p>returns <code>False</code>, while next check returns expected <code>True</code> value</p>
<pre><code>StupidClass is StupidClass
</code></pre>
<p>So as we can see <code>==</code> operator can be overridden while there is no simple way to change <code>is</code> operator's behavior.</p>
</div>
<div class="post-text" itemprop="text">
<p>In addition to the other answers : </p>
<p>Python uses the concept of metaclasses, which are basically "classes of classes". That means, even a Class is an object in Python, which has its own class - accessible using the <code>type</code> in-build function.</p>
<p>Because <code>ClassA</code> and <code>ClassB</code> are by default instances of the same metaclass, the comparisons return True.</p>
<p>If you'd like to know more about metaclasses, <a href="https://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python">this SO post</a> is a good start.</p>
</div>
<span class="comment-copy">Thanks but initialization is not an option.</span>
<span class="comment-copy">@E.Beach I expected that, so I've added the way to compare them without initialization.</span>
<span class="comment-copy">@E.Beach anyway, added the extra explanation</span>
<span class="comment-copy">I'll give you the answer for the effort.</span>
