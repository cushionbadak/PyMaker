<div class="post-text" itemprop="text">
<p>The <strong>argparse</strong> module "automatically generates help and usage messages". I can give Non-English names to the arguments and provide Non-English help texts; but the help output then becomes a mixture of at least two languages, because terms like <code>usage</code>, <code>positional arguments</code>, <code>optional arguments</code> and <code>show this help message and exit</code> are automatically generated in English.</p>
<p>How can I replace this English output with translations?</p>
<p>Preferably, I would like to provide the translations within the script, so that the script generates the same output wherever it is started.</p>
<p><strong>Edit:</strong> Based on the answer by Jon-Eric, here an example with his solution:</p>
<pre><code>import gettext

def Übersetzung(Text):
    Text = Text.replace("usage", "Verwendung")
    Text = Text.replace("show this help message and exit",
                        "zeige diese Hilfe an und tue nichts weiteres")
    Text = Text.replace("error:", "Fehler:")
    Text = Text.replace("the following arguments are required:",
                        "Die folgenden Argumente müssen angegeben werden:")
    return Text
gettext.gettext = Übersetzung

import argparse

Parser = argparse.ArgumentParser()
Parser.add_argument("Eingabe")
Argumente = Parser.parse_args()

print(Argumente.Eingabe)
</code></pre>
<p>saved as <code>Beispiel.py</code> gives with <code>python3 Beispiel.py -h</code> the following help output:</p>
<pre><code>Verwendung: Beispiel.py [-h] Eingabe

positional arguments:
  Eingabe

optional arguments:
  -h, --help  zeige diese Hilfe an und tue nichts weiteres
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way, from <a href="https://mail.python.org/pipermail/python-list/2012-August/629396.html" rel="nofollow noreferrer">this post</a> by Peter Otten:</p>
<blockquote>
<p>I don't know much about gettext, but the following suggests that most
  strings in argparse are properly wrapped:</p>
<pre><code>$ cat localize_argparse.py

import gettext

def my_gettext(s):
    return s.upper()
gettext.gettext = my_gettext

import argparse

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-V", action="version")
    args = parser.parse_args()

$ python localize_argparse.py -h USAGE: localize_argparse.py [-h] [-V]

OPTIONAL ARGUMENTS:   -h, --help  SHOW THIS HELP MESSAGE AND EXIT   -V
show program's version number and exit
</code></pre>
<p>The workaround for the "-V" option would be to add the help message
  explicitly</p>
<pre><code>parser.add_argument("-V", ..., help=_("show..."))
</code></pre>
<p>You still have to provide all translations yourself.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p><code>argparse</code> uses the <a href="https://docs.python.org/3/library/gettext.html#gnu-gettext-api" rel="noreferrer"><code>gettext</code> API inspired by GNU gettext</a>.
You can use this API to integrate your translation of <code>argparse</code> in a relatively clean manner.</p>
<p>To do so, call the following code before <code>argparse</code> outputs any text (but possibly after <code>import argparse</code>):</p>
<pre><code>import gettext

# Use values that suit your project instead of 'argparse' and 'path/to/locale'
gettext.bindtextdomain('argparse', 'path/to/locale')
gettext.textdomain('argparse')
</code></pre>
<p>In order for this solution to work, your translation of <code>argparse</code> must be located at <code>path/to/locale/ll/LC_MESSAGES/argparse.mo</code> where <code>ll</code> is the code of the current language (for example <code>de</code>; can be configured for example by setting the environment variable <code>LANGUAGE</code>).</p>
<h2>How do you generate the <code>.mo</code> file?</h2>
<ol>
<li><code>pygettext --default-domain=argparse /usr/local/lib/python3.5/argparse.py</code>
<ul>
<li>Use the actual location of <code>argparse.py</code></li>
<li>Creates the file <code>argparse.pot</code></li>
</ul></li>
<li><code>cp argparse.pot argparse-ll.po</code>
<ul>
<li>Use an actual language code instead of <code>ll</code></li>
</ul></li>
<li>Fill in the missing translation strings in <code>argparse-ll.po</code></li>
<li><code>msgfmt argparse-ll.po -o locale/ll/LC_MESSAGES/argparse.mo</code></li>
</ol>
<p>See <a href="https://docs.python.org/3/library/gettext.html#internationalizing-your-programs-and-modules" rel="noreferrer"><code>gettext</code> documentation</a> for details about creating <code>.mo</code> file.</p>
<p>I have published these instructions in more detail in <a href="https://github.com/filipbartek/argparse-cs/blob/master/README.md" rel="noreferrer">README.md</a> of my <a href="https://github.com/filipbartek/argparse-cs" rel="noreferrer">Czech translation of <code>argparse</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a solution with French translation, where one creates a conversion dict that holds the translation for the encountered English keywords</p>
<pre><code>def convertArgparseMessages(s):
    subDict = \
    {'positional arguments':'Arguments positionnels',
    'optional arguments':'Arguments optionnels',
    'show this help message and exit':'Affiche ce message et quitte'}
    if s in subDict:
        s = subDict[s]
    return s
gettext.gettext = convertArgparseMessages
import argparse
</code></pre>
</div>
<span class="comment-copy">Show examples and code please.</span>
<span class="comment-copy">You could define your own <code>argument_groups</code> if you want to change the names of <code>positional arguments</code> and <code>optional arguments</code>.</span>
<span class="comment-copy">@hpaulj: Thank you for this suggestion. Jon-Eric's gettext.gettext solution works for those names, too; I just didn't replace them in the above example.</span>
<span class="comment-copy">Thank you! That does it. It seems to be important to import argparse only after gettext.gettext is redefined.</span>
