<div class="post-text" itemprop="text">
<p>I have different functions, but each takes different number of arguments and different arguments. I want to be able to execute only one of them and to do this based on the name of the function as string. I tried this:</p>
<pre><code>def execute_function(function_name, arg1, arg2, arg3):
    return {
        'func1': func1(arg1),
        'func2': func2(arg1, arg3),
        'func3': func3(arg2),
    }[function_name]
</code></pre>
<p>but it executes all functions :( no matter what is the string <code>function_name</code>.</p>
<p>Do you have any ideas why this happens and how to achieve what I want. (I'm new to Python). Thank you very much in advance! :)</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to add <em>just the functions</em> to the dictionary; you added their <em>result</em>.</p>
<p>To support variable arguments, use either lambdas or <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow"><code>functools.partial()</code></a> to wrap your functions instead:</p>
<pre><code>def execute_function(function_name, arg1, arg2, arg3):
    return {
        'func1': lambda: func1(arg1),
        'func2': lambda: func2(arg1, arg3),
        'func3': lambda: func3(arg2),
    }[function_name]()
</code></pre>
<p>or</p>
<pre><code>from functools import partial

def execute_function(function_name, arg1, arg2, arg3):
    return {
        'func1': partial(func1, arg1),
        'func2': partial(func2, arg1, arg3),
        'func3': partial(func3, arg2),
    }[function_name]()
</code></pre>
<p>In both cases you call the resulting object (<code>partial</code> or <code>lambda</code> function) <em>after</em> retrieving it from the dictionary.</p>
</div>
<span class="comment-copy">Add a default function also  with <code>{ .... }.get(function_name, default)()</code> if suppose you wrong function name pass! <code>default(){ print("Exception: Undefined function called..")}</code></span>
<span class="comment-copy">Oooh, thank you so much! I'm ashamed now, it seems so obvious why they are all called :$ Thank you very much for removing my confusion and the solutions!</span>
<span class="comment-copy">Amazing! Could you please explain a bit the first one?</span>
<span class="comment-copy">@lerner: nut sure what part you are missing; each <code>lambda</code> is just a function, and each function object takes no arguments. The <code>arg1</code>, <code>arg2</code> and <code>arg3</code> values are passed into the <code>func1</code>, <code>func2</code> and <code>func3</code> calls as closures.</span>
<span class="comment-copy">@MartijnPieters Thanks very much. What confuses me most is that {..}[function_name] is the function and the () followed means its execution, then parameters should be passed through here(the last ()).</span>
<span class="comment-copy">@lerner no, the lambda takes zero arguments here. Each of the wrapped functions takes a different number of arguments, after all.</span>
