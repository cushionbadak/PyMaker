<div class="post-text" itemprop="text">
<p>I'm just beginning to learn Python. I'm finding the type system a little hard to understand. I have a number of questions, but primarily and to cut a long story short; The <a href="https://docs.python.org/3/reference/datamodel.html#data-model" rel="nofollow">documentation</a> states:</p>
<blockquote>
<p>"All data in a Python program is represented by objects ... Every
  object has an identity, a type and a value."</p>
</blockquote>
<p>No problem. But beyond that its not really described what "objects" <em>are</em>. For example the docs don't even cover that these "objects" support a dot operator - from my PoV they could be some in memory data structure not exposed to the user beyond <code>id()</code>, <code>type()</code> etc. However I gather there is some underlying meta object interface similar to that described for the <a href="https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy" rel="nofollow">class instance</a> type object in the docs. To work from an example:</p>
<p>If I do this on a class instance "x":</p>
<pre><code>x.__class__.__name__
</code></pre>
<p>I get the name of its class. I understand that. The documentation describes the <code>__class__</code> and <code>__name__</code> properties of <em>class instances</em> and <em>class</em> type objects. If I do this <code>[].__class__.__name__</code> I get "list". Similarly <code>int(1).__class__.__name__</code> gives "int". Its ambiguous to me exactly what is going on under the hood, and I would like clarification. So my questions are:</p>
<ul>
<li>Whats the relationship between a <em>type</em> type "objects" and "class instances" type objects?</li>
<li>Can I assume the ~meta API to in-built type objects is the same as that of "class instance" type objects?</li>
<li>If so, what is this interface and where is it documented?</li>
<li>In general, what <em>are</em> "objects" that correspond to built-in types, and how are they implemented?</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>I'll answer the 1,2 question first, then 4th then 3rd:</p>
<ul>
<li>"Whats the relationship between a type type "objects" and "class
instances" type objects?"</li>
<li>"Can I assume the ~meta API to in-built type objects is the same as
that of "class instance" type objects?"</li>
</ul>
<p>They are the same, and yes they share a common API. When the <a href="https://docs.python.org/3/reference/datamodel.html#objects-values-and-types" rel="noreferrer">documentation</a> describes built in types as "objects", or class instances as "objects", or a class or whatever as an "object" ... they are talking about exactly the same language construct.</p>
<ul>
<li>"In general, what are "objects" ..."</li>
</ul>
<p>The object is a foundational language feature in Python that supports attributes and behaviors much like other OOPLs. All Python objects also have a class much like other classed based OOPLs. The <code>object</code> class is the base of the class hierarchy in Python. Thus all classes are subclasses of the <code>object</code> class, and <em>all</em> the aforementioned "objects" and instances of <code>object</code> - by way of inheritance.</p>
<p>It's worth first pointing out explicitly that in Python (2.2 and above) "type" and "class" <a href="https://www.python.org/download/releases/2.2.3/descrintro/" rel="noreferrer">mean the same thing</a> (for all intensive purposes). So "int", and the rest of the so called builtin types are classes (which are represented as objects of course). For example this <code>x = int(1)</code> calls the <code>int</code> class (object) to construct an int instance object, x.</p>
<p>It's true to say there are two types of object in Python; "type" objects, or those that represent types, and "non-type" objects - those that don't. But it's equally true to say there are two type of integers; zero, and not zero. It doesn't mean much: Everything in Python is an object including classes. Since classes form a <em>kind</em> object, they are all instances of a class called "type". The type object is also an instance of type. Note you can inspect the inheritance hierarchy of class by examining the __bases__ attribute of a class object. In all cases it leads back to the <code>object</code> class - of course. See <a href="http://www.cafepy.com/article/python_types_and_objects/python_types_and_objects.html" rel="noreferrer">http://www.cafepy.com/article/python_types_and_objects/python_types_and_objects.html</a> for further details on this.</p>
<ul>
<li>"...where is it all documented?"</li>
</ul>
<p>Well, that's actually a good question. It should be covered in the <a href="https://docs.python.org/3/reference/datamodel.html" rel="noreferrer">Data Model</a> section of the <a href="https://docs.python.org/3/reference/index.html" rel="noreferrer">language reference</a>, but it is sort of skimmed over. The constructor for object objects, object (that made sense) is a built in and documented with the rest of the builtins <a href="https://docs.python.org/3/library/functions.html#object" rel="noreferrer">here</a>. Also the <a href="https://docs.python.org/3/tutorial/classes.html" rel="noreferrer">Classes chapter</a> of <a href="https://docs.python.org/3/tutorial/index.html" rel="noreferrer">The Python Tutorial</a> also covers this area a bit.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's a bit hard to understand what you are asking.</p>
<p>A type is the class of a class. Like everything else in Python, classes themselves are objects, and you can pass them around, assign them to variables, etc. If you ask a class what its class is, you will get the answer <code>type</code>. If you ask a class <em>instance</em> what its class is, you will of course get the class.</p>
<pre><code>&gt;&gt;&gt; type(int)
&lt;type 'type'&gt;
&gt;&gt;&gt; type(1)
&lt;type 'int'&gt;

&gt;&gt;&gt; class Foo(object):
...   pass
&gt;&gt;&gt; type(Foo)
&lt;type 'type'&gt;
&gt;&gt;&gt; obj = Foo()
&gt;&gt;&gt; type(obj)
&lt;class '__main__.Foo'&gt;
</code></pre>
<p>(here the <em>function</em> <code>type(x)</code> is another way of doing <code>x.__class__</code>.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Python types are ordinary objects just like anything else (everything is an object). Being a type or an instance is a matter of the object's semantics, a role that it plays.</p>
<p><strong>Class</strong>, or <strong>type</strong>, is an object that holds information about how to construct a certain kind of objects and what that kind of objects can do.</p>
<p>In Python 3, class and type are basically the same thing. The term 'class' is more often used to describe complex types (library or user-defined), while the term 'type' is used to describe basic primitives (e.g. integer, string, list) or any type in general.</p>
<p>(I don't know if some of built-in types are implemented differently than user-defined ones; to start with, there are several Python interpreters out there which may differ from one another. What's important is that conceptually, builtin types and user-defined types are not different).</p>
<p>An <strong>instance</strong> of a type (class) is an object that was constructed using the information of its type object and which behaves the way its type object advertises.</p>
<p>Instance objects are connected to their type objects via that <code>__class__</code> property (though it's better to use <code>type()</code> function to get object's type). This connection is an ordinary reference that one object holds to another, its implementation is no special except that interpreter will use this reference to implement subclassing and reflection. Sometimes it can even change in runtime.</p>
</div>
<span class="comment-copy">Nicely described as a chicken-or-egg situation here: <a href="http://www.cafepy.com/article/python_types_and_objects/python_types_and_objects.html#object-type-example" rel="nofollow noreferrer">cafepy.com/article/python_types_and_objects/â€¦</a> Your many doubts should be handled by going through the contents of the URL above</span>
<span class="comment-copy">I asked three specific questions. I've edited the post to try and make it clearer. In general I'm asking for clarification on the implementation of the "objects" that all built-in types are, and what relation do they have to "class instances", in terms of a shares interface if any? In the documentation I'm reading the fact that these "objects" even support a dot operator is not mentioned, and only implicitly introduced later when describing <i>class instances</i> and <i>callables</i>. From my PoV when they say "object" they could mean <i>anything</i> - its left ambiguous.</span>
