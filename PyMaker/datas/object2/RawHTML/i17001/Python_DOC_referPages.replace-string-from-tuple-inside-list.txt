<div class="post-text" itemprop="text">
<p>I currently have the following list:</p>
<pre><code>data = [('b','..','o','b'),('t','s','..','t')]
</code></pre>
<p>I am trying to figure out a way to replace all instances of the '..' string to another string. In my instance, the string of ' '.</p>
<p>I have attempted to use the built-in function using the following method, but had no luck.</p>
<pre><code>newData = list(map(lambda i: str.replace(i, ".."," "), data))
</code></pre>
<p>Could someone point me in the right direction? My desired output would be the following:</p>
<pre><code>newData = [('b',' ','o','b'),('t','s',' ','t')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> with a <a href="https://stackoverflow.com/q/394809/2555451">conditional expression</a>:</p>
<pre><code>&gt;&gt;&gt; data = [('b','..','o','b'),('t','s','..','t')]
&gt;&gt;&gt; newData = [tuple(s if s != ".." else " " for s in tup) for tup in data]
&gt;&gt;&gt; newData
[('b', ' ', 'o', 'b'), ('t', 's', ' ', 't')]
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Map operates on each of the elements of the list given. So in this case, your lambda expression is being called on a tuple, not the elements of the tuple as you intended.</p>
<p>wrapping your code in a list comprehension would do it:</p>
<pre><code>newData = [tuple(map(lambda i: str.replace(i, ".."," "), tup)) for tup in data]
</code></pre>
</div>
<span class="comment-copy">Thanks! This worked flawlessly.   I understand where the variable of s comes into play, but could you explain to me the purpose of the "tup" variable?</span>
<span class="comment-copy">@taytortot - Certainly.  The <code>for tup in data</code> clause will iterate over each item (tuple) inside the list <code>data</code>.  It will take each one, store it in the variable <code>tup</code>, and then send it to the <code>tuple(s if s != ".." else " " for s in tup)</code> part. I named the variable <code>tup</code> to represent "tuple".</span>
<span class="comment-copy">@iCodez It might be easier to show what the <code>tup</code> variable is for if you show the equivalent nested <code>for</code> loops.</span>
