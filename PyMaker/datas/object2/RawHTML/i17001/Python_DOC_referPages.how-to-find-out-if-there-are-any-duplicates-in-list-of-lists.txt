<div class="post-text" itemprop="text">
<p>So I'm taking an intro computer science course right now, and I was wondering how to check if there were any duplicates within multiple lists. I've read up on these answers:</p>
<p><a href="https://stackoverflow.com/questions/1388818/how-can-i-compare-two-lists-in-python-and-return-matches/1388864#1388864">How can I compare two lists in python and return matches</a> and <a href="https://stackoverflow.com/questions/10066642/how-to-find-common-elements-in-list-of-lists?lq=1">How to find common elements in list of lists?</a></p>
<p>However, they're not quite what I'm looking for. Say for example I have this list of lists:</p>
<pre><code>list_x = [[66,76], 
          [25,26,27], 
          [65,66,67,68], 
          [40,41,42,43,44], 
          [11,21,31,41,51,61]]
</code></pre>
<p>There are two sets of duplicates (66 and 41), although that doesn't really matter to me. Is there a way to find if the duplicates exist? What I'm looking for is if there are duplicates, the function will return True (or False, depending on what I want to do with the lists). I get the impression that I should use sets (which we have not learned about so I looked up on the internet), use for loops, or write my own function. If it's the case that I'll need to write my own function, please let me know, and I'll edit with an attempt later today!</p>
</div>
<div class="post-text" itemprop="text">
<p>A very simple solution would be to use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a> to first flatten the list and then afterwards use <a href="https://docs.python.org/3/library/functions.html#func-set" rel="nofollow"><code>set</code></a> and <a href="https://docs.python.org/3/library/functions.html#len" rel="nofollow"><code>len</code></a> together to test for any duplicates:</p>
<pre><code>&gt;&gt;&gt; list_x = [[66,76],
...           [25,26,27],
...           [65,66,67,68],
...           [40,41,42,43,44],
...           [11,21,31,41,51,61]]
&gt;&gt;&gt; flat = [y for x in list_x for y in x]
&gt;&gt;&gt; flat # Just to demonstrate
[66, 76, 25, 26, 27, 65, 66, 67, 68, 40, 41, 42, 43, 44, 11, 21, 31, 41, 51, 61]
&gt;&gt;&gt; len(flat) != len(set(flat)) # True because there are duplicates
True
&gt;&gt;&gt;
&gt;&gt;&gt; # This list has no duplicates...
... list_x = [[1, 2],
...           [3, 4, 5],
...           [6, 7, 8, 9],
...           [10, 11, 12, 13],
...           [14, 15, 16, 17, 18]]
&gt;&gt;&gt; flat = [y for x in list_x for y in x]
&gt;&gt;&gt; len(flat) != len(set(flat)) # ...so this is False
False
&gt;&gt;&gt;
</code></pre>
<hr/>
<p>Be warned however that this approach will be somewhat slow if <code>list_x</code> is large.  If performance is a concern, then you can use a lazy approach which utilizes a <a href="http://legacy.python.org/dev/peps/pep-0289/" rel="nofollow">generator expression</a>, <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow"><code>any</code></a>, and <code>set.add</code>:</p>
<pre><code>&gt;&gt;&gt; list_x = [[66,76],
...           [25,26,27],
...           [65,66,67,68],
...           [40,41,42,43,44],
...           [11,21,31,41,51,61]]
&gt;&gt;&gt; seen = set()
&gt;&gt;&gt; any(y in seen or seen.add(y) for x in list_x for y in x)
True
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Iterate and use a set to detect if there are duplicates:</p>
<pre><code>seen = set()
dupes = [i for lst in list_x for i in lst if i in seen or seen.add(i)]
</code></pre>
<p>This makes use of the fact that <code>seen.add()</code> returns <code>None</code>. A <code>set</code> is a unordered collection of unique values; the <code>i in seen</code> test is <code>True</code> if <code>i</code> is already part of the set.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; list_x = [[66,76], 
...           [25,26,27], 
...           [65,66,67,68], 
...           [40,41,42,43,44], 
...           [11,21,31,41,51,61]]
&gt;&gt;&gt; seen = set()
&gt;&gt;&gt; [i for lst in list_x for i in lst if i in seen or seen.add(i)]
[66, 41]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is more straightforward solution with sets:</p>
<pre><code>list_x = [[66,76], 
          [25,26,27], 
          [65,66,67,68], 
          [40,41,42,43,44], 
          [11,21,31,41,51,61]]
seen = set()
duplicated = set()
for lst in list_x:
    numbers = set(lst) # only unique
    # make intersection with seen and add to duplicated:
    duplicated |= numbers &amp; seen 
    # add numbers to seen
    seen |= numbers

print duplicated
</code></pre>
<p>for information about <code>set</code> and its operations,see docs: <a href="https://docs.python.org/2/library/stdtypes.html#set" rel="nofollow">https://docs.python.org/2/library/stdtypes.html#set</a></p>
</div>
<span class="comment-copy">I had a similar question a while back. See if this helps:    <a href="http://stackoverflow.com/questions/19300096/comparing-contents-of-2-lists-of-lists" title="comparing contents of 2 lists of lists">stackoverflow.com/questions/19300096/â€¦</a></span>
<span class="comment-copy">Your wording is a little ambiguous to me.  Do you want to get the numbers that are duplicated (i.e. a list of the duplicate items such as <code>[66, 41]</code>) or just see if any duplicates exist (i.e. a boolean value such as <code>True</code>)?</span>
<span class="comment-copy">@user3440123 What if a single list contains repeated items. Is that considered duplicate too? Or just want to check whether duplicates exist accross different lists.</span>
<span class="comment-copy">iCodez, I'm trying to get a boolean value, I'll edit that! And also, I'm going on the assumption that there are no duplicates within a single list</span>
<span class="comment-copy">Thank you so much! This makes a lot of sense, especially given the limited knowledge I have about the set() function.</span>
<span class="comment-copy"><code>seen = set()</code> <code>any(num in seen or seen.add(num) for lst in list_x for num in lst)</code> would be lazy.</span>
<span class="comment-copy">@m.wasowski - Thanks for the tip; I'll mention it. :)</span>
<span class="comment-copy">Maybe it would be better to do it in loop, to make it easier to understand? Besides, side effects in comprehension are ugly... ;)</span>
<span class="comment-copy">Could you explain what's happening with set()? I've read about it a bit, but I don't think I completely understand what it does</span>
<span class="comment-copy">@user3440123: It's an unordered collection of unique values; if <code>i</code> is already in the set <code>seen</code>, the test <code>i in seen</code> returns <code>True</code>; it'll do so very efficiently (it won't need to loop through all values in the set to test each and every one).</span>
<span class="comment-copy">I've never seen the operator |=. What does it do? And thank you for the documentation, right now our professor is only teaching from a manual called Think Python.</span>
<span class="comment-copy"><code>a |= b</code> is roughly the same as <code>a = a | b</code>, in case of sets it adds elements from <code>b</code> to <code>a</code>. It is in documentation!</span>
