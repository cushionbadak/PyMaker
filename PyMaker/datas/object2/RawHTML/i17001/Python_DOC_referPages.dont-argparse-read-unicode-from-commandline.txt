<div class="post-text" itemprop="text">
<p>Running Python 2.7</p>
<p>When executing:</p>
<pre><code>$ python client.py get_emails -a "åäö"
</code></pre>
<p>I get:</p>
<pre><code>usage: client.py get_emails [-h] [-a AREA] [-t {rfc2822,plain}]
client.py get_emails: error: argument -a/--area: invalid unicode value: '\xc3\xa5\xc3\xa4\xc3\xb6'
</code></pre>
<p>This is my parser:</p>
<pre><code>def _argparse():
    desc = """
           Simple CLI-client for...
           """
    argparser = argparse.ArgumentParser(description=desc)
    subparsers = argparser.add_subparsers(dest='command')

    # create the parser for the "get_emails" command
    parser_get_emails = subparsers.add_parser('get_emails', help=u'Get email list')
    parser_get_emails.add_argument('-a', '--area', type=unicode, help='Limit to area')
    parser_get_emails.add_argument('-t', '--out_type', choices=['rfc2822', 'plain'],
                                   default='rfc2822', help='Type of output')

    args = argparser.parse_args()
    return args
</code></pre>
<p>Does this mean I can't use any unicode characters with python argparse module?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try</p>
<pre><code>type=lambda s: unicode(s, 'utf8')
</code></pre>
<p>instead of</p>
<pre><code>type=unicode
</code></pre>
<p>Without encoding argument unicode() defaults to ascii.</p>
</div>
<div class="post-text" itemprop="text">
<p>The command-line arguments are encoded using <code>sys.getfilesystemencoding()</code>:</p>
<pre><code>import sys

def commandline_arg(bytestring):
    unicode_string = bytestring.decode(sys.getfilesystemencoding())
    return unicode_string

# ...
parser_get_emails.add_argument('-a', '--area', type=commandline_arg)
</code></pre>
<p>Note: You don't need it in Python 3 (the arguments are already Unicode). It uses <a href="https://docs.python.org/3/library/os.html#os.fsdecode"><code>os.fsdecode()</code></a> in this case because sometimes command-line arguments might be undecodable. See <a href="http://legacy.python.org/dev/peps/pep-0383/">PEP 383 -- Non-decodable Bytes in System Character Interfaces</a>.</p>
</div>
<span class="comment-copy">What is the encoding of your terminal?</span>
<span class="comment-copy">Your terminal uses UTF-8 encoding, but Python uses ASCII by default, so <code>unicode</code> is using the wrong encoding to convert the bytes to a <code>unicode</code> object.</span>
<span class="comment-copy">Great, I will test it tomorrow when in front of the computer again. Was thinking along the lines to use <code>lambda s: unicode(s, locale.getdefaultlocale()[1])</code> I suppose that would be more flexible. Any caveats?</span>
<span class="comment-copy">@NiclasNilsson: getdefaultlocale can return None,None under circumstances, so you're going to need a fallback, like <code>getdefaultlocale()[1] or 'utf8'</code></span>
<span class="comment-copy">the encoding may be different. Use <code>sys.getfilesystemencoding()</code> instead of hardcoding <code>utf8</code> here.</span>
<span class="comment-copy">@NiclasNilsson: I have little experience with non-unicode consoles, but <a href="http://stackoverflow.com/questions/4012571/python-which-encoding-is-used-for-processing-sys-argv">here</a> people say that <code>getfilesystemencoding</code> is not the argv encoding. It <i>might</i> be <code>sys.stdin.encoding</code> though.</span>
<span class="comment-copy">@georg: I don't see <code>sys.getfilesystemencoding()</code> mentioned in the link you provided. Why do you think <code>sys.argv</code> items are not in <code>sys.getfilesystemencoding()</code>? There are issues with undecodable arguments but it is a different problem.</span>
<span class="comment-copy">the actual answer may be more complicated if you need to support filenames undecodable in the current local encoding (Unicode API on Windows, misconfigured locale on Linux). See more details in <a href="http://ru.stackoverflow.com/a/527872/23044">Как работать с путями c русскими символами?</a> (ask if you need the translation)</span>
<span class="comment-copy">Thanks! This should be the accepted answer.</span>
