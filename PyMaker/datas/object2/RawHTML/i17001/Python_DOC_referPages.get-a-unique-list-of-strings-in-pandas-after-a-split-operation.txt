<div class="post-text" itemprop="text">
<p>I'm getting started with pandas, and have <em>one column of data in a larger DataFrame</em> such as </p>
<pre><code>0                  one two
1            two seven six
2           three one five
3    seven five five eight
4                 six four
5                    three
dtype: object
</code></pre>
<p>and what I'd like to do is split the sequences of words into their component parts, then get a unique set or counts for the words.  I can do the split just fine</p>
<pre><code>numbers.str.split(' ')

0                    [one, two]
1             [two, seven, six]
2            [three, one, five]
3    [seven, five, five, eight]
4                   [six, four]
5                       [three]
dtype: object
</code></pre>
<p>However, I'm not sure where to go from here. Again, I'd like to have output such as </p>
<pre><code>['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight']
</code></pre>
<p>or the same in a dictionary with counts, or in a Series/DataFrame equivalent of one of these two.</p>
<p>The best I've been able to do so far is to use apply() in combination with a Set to get the unique words.  pandas is a very elegant package from what I've seen so far, and it seems like this is probably within easy reach for someone who knows it better than I do.</p>
<p>Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>If I understand you correctly, I think you could do it as follows using pandas. I'll start with the series before you split the strings:</p>
<pre><code>print s

0                  one two
1            two seven six
2           three one five
3    seven five five eight
4                 six four
5                    three

stacked = pd.DataFrame(s.str.split().tolist()).stack()
print stacked

0  0      one
   1      two
1  0      two
   1    seven
   2      six
2  0    three
   1      one
   2     five
3  0    seven
   1     five
   2     five
   3    eight
4  0      six
   1     four
5  0    three
</code></pre>
<p>Now just compute the value counts of the Series:</p>
<pre><code>print stacked.value_counts()

five     3
one      2
three    2
six      2
two      2
seven    2
eight    1
four     1
dtype: int64
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This code makes a dictionary of all of your words and their counts.</p>
<pre><code>x = ['one two', 'two seven six', 'three one five', 'seven five five eight', 'six four', 'three']

#create list comprehension of all elements
x_list = [j for i in x for j in i.split()]
print x_list

# ['one', 'two', 'two', 'seven', 'six', 'three', 'one', 'five', 'seven', 'five', 'five', 'eight', 'six', 'four', 'three']

d = {}

#initialize keys
for e in set(x_list):
    d[e] = 0

#store counts in dict
for e in x_list:
        d[e] += 1

print d
</code></pre>
<p>The result is a dictionary with counts:</p>
<pre><code>{'seven': 2, 'six': 2, 'three': 2, 'two': 2, 'four': 1, 'five': 3, 'eight': 1, 'one': 2}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I was recently working on the similar task where I wanted to count space separated strings. Using it for your data would be like this:</p>
<pre><code>import pandas as pd
data = [['one two'],['two seven six'],['three one five'],['seven five five eight'],['six four'],['three']]
numbers = pd.DataFrame(data)

uniq_groups = set(x for l in numbers[0].str.split(' ') for x in l)
#{'eight', 'five', 'four', 'one', 'seven', 'six', 'three', 'two'}

#add a dataframe column for count of each value
for gr in uniq_groups:
   numbers[gr] = numbers[0].map(lambda x: len([i for i in x.split(' ') if i == gr]))

#sum all columns
numbers.loc['Total'] = numbers.sum(axis=0,numeric_only=True)
#pandas display format without decimals
pd.options.display.float_format = '{:,.0f}'.format
</code></pre>
<p>resulting into:</p>
<p><a href="https://i.stack.imgur.com/EhKfZ.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/EhKfZ.png"/></a></p>
</div>
<span class="comment-copy">I won't answer as there may well be a more efficient Pandas specific way, but in general <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>itertools.chain.from_iterable()</code></a> and <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> will do this job for you.</span>
<span class="comment-copy">That works well for my dataset, thanks.</span>
<span class="comment-copy">Thanks for chiming in. I think you were thrown off by my example data, so I have edited the question to clarify.  I'm looking for an answer within the pandas API.</span>
