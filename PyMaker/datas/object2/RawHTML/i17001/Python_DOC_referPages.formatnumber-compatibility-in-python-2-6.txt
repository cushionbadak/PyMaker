<div class="post-text" itemprop="text">
<p>I am trying to print an integer in <em>Python 2.6.1</em> with commas as thousands separators. For example, I want to show the number <code>1234567</code> as <code>1,234,567</code>. How would I go about doing this? I have seen many examples on Google, but I am looking for the simplest practical way.</p>
<p>It does not need to be locale-specific to decide between periods and commas. I would prefer something as simple as reasonably possible.</p>
</div>
<div class="post-text" itemprop="text">
<p>For Python â‰¥ 2.7:</p>
<pre><code>"{:,}".format(value)
</code></pre>
<p>Per <a href="https://docs.python.org/library/string.html#format-specification-mini-language">Format Specification Mini-Language</a>,</p>
<blockquote>
<p>The <code>','</code> option signals the use of a comma for a thousands separator. For a locale aware separator, use the <code>'n'</code> integer presentation type instead.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>I got this to work:</p>
<pre><code>&gt;&gt;&gt; import locale
&gt;&gt;&gt; locale.setlocale(locale.LC_ALL, 'en_US')
'en_US'
&gt;&gt;&gt; locale.format("%d", 1255000, grouping=True)
'1,255,000'
</code></pre>
<p>Sure, you don't <em>need</em> internationalization support, but it's clear, concise, and uses a built-in library.</p>
<p>P.S. That "%d" is the usual %-style formatter.  You can have only one formatter, but it can be whatever you need in terms of field width and precision settings.</p>
<p>P.P.S. If you can't get <code>locale</code> to work, I'd suggest a modified version of Mark's answer:</p>
<pre><code>def intWithCommas(x):
    if type(x) not in [type(0), type(0L)]:
        raise TypeError("Parameter must be an integer.")
    if x &lt; 0:
        return '-' + intWithCommas(-x)
    result = ''
    while x &gt;= 1000:
        x, r = divmod(x, 1000)
        result = ",%03d%s" % (r, result)
    return "%d%s" % (x, result)
</code></pre>
<p>Recursion is useful for the negative case, but one recursion per comma seems a bit excessive to me.</p>
</div>
<div class="post-text" itemprop="text">
<p>For inefficiency and unreadability it's hard to beat:</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; s = '-1234567'
&gt;&gt;&gt; ','.join(["%s%s%s" % (x[0], x[1] or '', x[2] or '') for x in itertools.izip_longest(s[::-1][::3], s[::-1][1::3], s[::-1][2::3])])[::-1].replace('-,','-')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is the locale grouping code after removing irrelevant parts and cleaning it up a little:</p>
<p>(The following only works for integers)</p>
<pre><code>def group(number):
    s = '%d' % number
    groups = []
    while s and s[-1].isdigit():
        groups.append(s[-3:])
        s = s[:-3]
    return s + ','.join(reversed(groups))

&gt;&gt;&gt; group(-23432432434.34)
'-23,432,432,434'
</code></pre>
<hr/>
<p>There are already some good answers in here. I just want to add this for future reference. In python 2.7 there is going to be a format specifier for thousands separator. According to <a href="http://docs.python.org/dev/whatsnew/2.7.html#pep-378-format-specifier-for-thousands-separator" rel="noreferrer">python docs</a> it works like this</p>
<pre><code>&gt;&gt;&gt; '{:20,.2f}'.format(f)
'18,446,744,073,709,551,616.00'
</code></pre>
<p>In python3.1 you can do the same thing like this:</p>
<pre><code>&gt;&gt;&gt; format(1234567, ',d')
'1,234,567'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm surprised that no one has mentioned that you can do this with f-strings in Python 3.6 as easy as this:</p>
<pre><code>&gt;&gt;&gt; num = 10000000
&gt;&gt;&gt; print(f"{num:,d}")
10,000,000
</code></pre>
<p>... where the part after the colon is the format specifier. The comma is the separator character you want, so <code>f"{num:_d}"</code> uses underscores instead of a comma.</p>
<p>This is equivalent of using <code>format(num, ",d")</code> for older versions of python 3.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a one-line regex replacement:</p>
<pre><code>re.sub("(\d)(?=(\d{3})+(?!\d))", r"\1,", "%d" % val)
</code></pre>
<p>Works only for inegral outputs:</p>
<pre><code>import re
val = 1234567890
re.sub("(\d)(?=(\d{3})+(?!\d))", r"\1,", "%d" % val)
# Returns: '1,234,567,890'

val = 1234567890.1234567890
# Returns: '1,234,567,890'
</code></pre>
<p>Or for floats with less than 4 digits, change the format specifier to <code>%.3f</code>:</p>
<pre><code>re.sub("(\d)(?=(\d{3})+(?!\d))", r"\1,", "%.3f" % val)
# Returns: '1,234,567,890.123'
</code></pre>
<p><strong>NB:</strong> Doesn't work correctly with more than three decimal digits as it will attempt to group the decimal part:</p>
<pre><code>re.sub("(\d)(?=(\d{3})+(?!\d))", r"\1,", "%.5f" % val)
# Returns: '1,234,567,890.12,346'
</code></pre>
<h1>How it works</h1>
<p>Let's break it down:</p>
<pre><code>re.sub(pattern, repl, string)

pattern = \
    "(\d)           # Find one digit...
     (?=            # that is followed by...
         (\d{3})+   # one or more groups of three digits...
         (?!\d)     # which are not followed by any more digits.
     )",

repl = \
    r"\1,",         # Replace that one digit by itself, followed by a comma,
                    # and continue looking for more matches later in the string.
                    # (re.sub() replaces all matches it finds in the input)

string = \
    "%d" % val      # Format the string as a decimal to begin with
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is what I do for floats.  Although, honestly, I'm not sure which versions it works for - I'm using 2.7:</p>
<pre><code>my_number = 4385893.382939491

my_string = '{:0,.2f}'.format(my_number)
</code></pre>
<p>Returns: 4,385,893.38</p>
<p><em>Update: I recently had an issue with this format (couldn't tell you the exact reason), but was able to fix it by dropping the <code>0</code>:</em></p>
<pre><code>my_string = '{:,.2f}'.format(my_number)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also use <code>'{:n}'.format( value )</code> for a locale representation. I think this is the simpliest way for a locale solution.</p>
<p>For more information, search for <code>thousands</code> in <a href="https://docs.python.org/3.5/library/string.html#format-specification-mini-language">Python DOC</a>.</p>
<p>For currency, you can use <code>locale.currency</code>, setting the flag <code>grouping</code>:</p>
<p><strong>Code</strong></p>
<pre><code>import locale

locale.setlocale( locale.LC_ALL, '' )
locale.currency( 1234567.89, grouping = True )
</code></pre>
<p><strong>Output</strong></p>
<pre><code>'Portuguese_Brazil.1252'
'R$ 1.234.567,89'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm sure there must be a standard library function for this, but it was fun to try to write it myself using recursion so here's what I came up with:</p>
<pre><code>def intToStringWithCommas(x):
    if type(x) is not int and type(x) is not long:
        raise TypeError("Not an integer!")
    if x &lt; 0:
        return '-' + intToStringWithCommas(-x)
    elif x &lt; 1000:
        return str(x)
    else:
        return intToStringWithCommas(x / 1000) + ',' + '%03d' % (x % 1000)
</code></pre>
<p>Having said that, if someone else does find a standard way to do it, you should use that instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="http://code.activestate.com/recipes/498181-add-thousands-separator-commas-to-formatted-number/#c3" rel="noreferrer">comments</a> to activestate recipe <a href="http://code.activestate.com/recipes/498181-add-thousands-separator-commas-to-formatted-number/" rel="noreferrer">498181</a> I reworked this:</p>
<pre><code>import re
def thous(x, sep=',', dot='.'):
    num, _, frac = str(x).partition(dot)
    num = re.sub(r'(\d{3})(?=\d)', r'\1'+sep, num[::-1])[::-1]
    if frac:
        num += dot + frac
    return num
</code></pre>
<p>It uses the regular expressions feature: <a href="http://docs.python.org/howto/regex.html#lookahead-assertions" rel="noreferrer">lookahead</a> i.e. <code>(?=\d)</code> to make sure only groups of three digits that have a digit 'after' them get a comma. I say 'after' because the string is reverse at this point.</p>
<p><code>[::-1]</code> just reverses a string.</p>
</div>
<div class="post-text" itemprop="text">
<p>Slightly expanding the answer of Ian Schneider:</p>
<p>If you want to use a custom thousands separator, the simplest solution is:</p>
<pre><code>'{:,}'.format(value).replace(',', your_custom_thousands_separator)
</code></pre>
<h2>Examples</h2>
<pre><code>'{:,.2f}'.format(123456789.012345).replace(',', ' ')
</code></pre>
<p>If you want the German representation like this, it gets a bit more complicated:</p>
<pre><code>('{:,.2f}'.format(123456789.012345)
          .replace(',', ' ')  # 'save' the thousands separators 
          .replace('.', ',')  # dot to comma
          .replace(' ', '.')) # thousand separators to dot
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2><strong>Python 3</strong></h2>
<p>--</p>
<p><strong>Integers (without decimal):</strong></p>
<p><code>"{:,d}".format(1234567)</code></p>
<p>--</p>
<p><strong>Floats (with decimal):</strong></p>
<p><code>"{:,.2f}".format(1234567)</code></p>
<p>where the number before <code>f</code> specifies the number of decimal places.</p>
<p>--</p>
<p><strong>Bonus</strong></p>
<p>Quick-and-dirty starter function for the Indian lakhs/crores numbering system (12,34,567):</p>
<p><a href="https://stackoverflow.com/a/44832241/4928578">https://stackoverflow.com/a/44832241/4928578</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The accepted answer is fine, but I actually prefer <code>format(number,',')</code>. Easier for me to interpret and remember. </p>
<p><a href="https://docs.python.org/3/library/functions.html#format" rel="noreferrer">https://docs.python.org/3/library/functions.html#format</a></p>
</div>
<div class="post-text" itemprop="text">
<p>from Python version 2.6 you can do this:</p>
<pre><code>def format_builtin(n):
    return format(n, ',')
</code></pre>
<p>For Python versions &lt; 2.6 and just for your information, here are 2 manual solutions, they turn floats to ints but negative numbers work correctly:</p>
<pre><code>def format_number_using_lists(number):
    string = '%d' % number
    result_list = list(string)
    indexes = range(len(string))
    for index in indexes[::-3][1:]:
        if result_list[index] != '-':
            result_list.insert(index+1, ',')
    return ''.join(result_list)
</code></pre>
<p>few things to notice here:</p>
<ul>
<li>this line: <strong>string = '%d' % number</strong> beautifully converts a number to a string, it supports negatives and it drops fractions from floats, making them ints;</li>
<li>this slice <strong>indexes[::-3]</strong> returns each third item starting from
the end, so I used another slice <strong>[1:]</strong> to remove the very last item
cuz I don't need a comma after the last number;</li>
<li>this conditional <strong>if l[index] != '-'</strong> is being used to support negative numbers, do not insert a comma after the minus sign.</li>
</ul>
<p>And a more hardcore version:</p>
<pre><code>def format_number_using_generators_and_list_comprehensions(number):
    string = '%d' % number
    generator = reversed( 
        [
            value+',' if (index!=0 and value!='-' and index%3==0) else value
            for index,value in enumerate(reversed(string))
        ]
    )
    return ''.join(generator)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's one that works for floats too:</p>
<pre><code>def float2comma(f):
    s = str(abs(f)) # Convert to a string
    decimalposition = s.find(".") # Look for decimal point
    if decimalposition == -1:
        decimalposition = len(s) # If no decimal, then just work from the end
    out = "" 
    for i in range(decimalposition+1, len(s)): # do the decimal
        if not (i-decimalposition-1) % 3 and i-decimalposition-1: out = out+","
        out = out+s[i]      
    if len(out):
        out = "."+out # add the decimal point if necessary
    for i in range(decimalposition-1,-1,-1): # working backwards from decimal point
        if not (decimalposition-i-1) % 3 and decimalposition-i-1: out = ","+out
        out = s[i]+out      
    if f &lt; 0:
        out = "-"+out
    return out
</code></pre>
<p>Usage Example:</p>
<pre><code>&gt;&gt;&gt; float2comma(10000.1111)
'10,000.111,1'
&gt;&gt;&gt; float2comma(656565.122)
'656,565.122'
&gt;&gt;&gt; float2comma(-656565.122)
'-656,565.122'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One liner for Python 2.5+ and Python 3 (positive int only):</p>
<pre><code>''.join(reversed([x + (',' if i and not i % 3 else '') for i, x in enumerate(reversed(str(1234567)))]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I am a Python beginner, but an experienced programmer. I have Python 3.5, so I can just use the comma, but this is nonetheless an interesting programming exercise. Consider the case of an unsigned integer. The most readable Python program for adding thousands separators appears to be:</p>
<pre><code>def add_commas(instr):
    out = [instr[0]]
    for i in range(1, len(instr)):
        if (len(instr) - i) % 3 == 0:
            out.append(',')
        out.append(instr[i])
    return ''.join(out)
</code></pre>
<p>It is also possible to use a list comprehension:</p>
<pre><code>add_commas(instr):
    rng = reversed(range(1, len(instr) + (len(instr) - 1)//3 + 1))
    out = [',' if j%4 == 0 else instr[-(j - j//4)] for j in rng]
    return ''.join(out)
</code></pre>
<p>This is shorter, and could be a one liner, but you will have to do some mental gymnastics to understand why it works. In both cases we get:</p>
<pre><code>for i in range(1, 11):
    instr = '1234567890'[:i]
    print(instr, add_commas(instr))
</code></pre>
<pre><code>1 1
12 12
123 123
1234 1,234
12345 12,345
123456 123,456
1234567 1,234,567
12345678 12,345,678
123456789 123,456,789
1234567890 1,234,567,890
</code></pre>
<p>The first version is the more sensible choice, if you want the program to be understood.</p>
</div>
<div class="post-text" itemprop="text">
<p>This does money along with the commas</p>
<pre><code>def format_money(money, presym='$', postsym=''):
    fmt = '%0.2f' % money
    dot = string.find(fmt, '.')
    ret = []
    if money &lt; 0 :
        ret.append('(')
        p0 = 1
    else :
        p0 = 0
    ret.append(presym)
    p1 = (dot-p0) % 3 + p0
    while True :
        ret.append(fmt[p0:p1])
        if p1 == dot : break
        ret.append(',')
        p0 = p1
        p1 += 3
    ret.append(fmt[dot:])   # decimals
    ret.append(postsym)
    if money &lt; 0 : ret.append(')')
    return ''.join(ret)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have a python 2 and python 3 version of this code. I know that the question was asked for python 2 but now (8 years later lol) people will probably be using python 3. <br/><br/>Python 3 Code:</p>
<pre><code>import random
number = str(random.randint(1, 10000000))
comma_placement = 4
print('The original number is: {}. '.format(number))
while True:
    if len(number) % 3 == 0:
        for i in range(0, len(number) // 3 - 1):
            number = number[0:len(number) - comma_placement + 1] + ',' + number[len(number) - comma_placement + 1:]
            comma_placement = comma_placement + 4
    else:
        for i in range(0, len(number) // 3):
            number = number[0:len(number) - comma_placement + 1] + ',' + number[len(number) - comma_placement + 1:]
    break
print('The new and improved number is: {}'.format(number))        
</code></pre>
<p><br/>
Python 2 Code:  (Edit. The python 2 code isn't working. I am thinking that the syntax is different).    </p>
<pre><code>import random
number = str(random.randint(1, 10000000))
comma_placement = 4
print 'The original number is: %s.' % (number)
while True:
    if len(number) % 3 == 0:
        for i in range(0, len(number) // 3 - 1):
            number = number[0:len(number) - comma_placement + 1] + ',' + number[len(number) - comma_placement + 1:]
            comma_placement = comma_placement + 4
    else:
        for i in range(0, len(number) // 3):
            number = number[0:len(number) - comma_placement + 1] + ',' + number[len(number) - comma_placement + 1:]
    break
print 'The new and improved number is: %s.' % (number) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm using python 2.5 so I don't have access to the built-in formatting.</p>
<p>I looked at the Django code intcomma (intcomma_recurs in code below) and realized it's inefficient, because it's recursive and also compiling the regex on every run is not a good thing either.  This is not necessary an 'issue' as django isn't really THAT focused on this kind of low-level performance.  Also, I was expecting a factor of 10 difference in performance, but it's only 3 times slower.</p>
<p>Out of curiosity I implemented a few versions of intcomma to see what the performance advantages are when using regex.  My test data concludes a slight advantage for this task, but surprisingly not much at all.</p>
<p>I also was pleased to see what I suspected: using the reverse xrange approach is unnecessary in the no-regex case, but it does make the code look slightly better at the cost of ~10% performance.</p>
<p>Also, I assume what you're passing in is a string and looks somewhat like a number.  Results undetermined otherwise.</p>
<pre><code>from __future__ import with_statement
from contextlib import contextmanager
import re,time

re_first_num = re.compile(r"\d")
def intcomma_noregex(value):
    end_offset, start_digit, period = len(value),re_first_num.search(value).start(),value.rfind('.')
    if period == -1:
        period=end_offset
    segments,_from_index,leftover = [],0,(period-start_digit) % 3
    for _index in xrange(start_digit+3 if not leftover else start_digit+leftover,period,3):
        segments.append(value[_from_index:_index])
        _from_index=_index
    if not segments:
        return value
    segments.append(value[_from_index:])
    return ','.join(segments)

def intcomma_noregex_reversed(value):
    end_offset, start_digit, period = len(value),re_first_num.search(value).start(),value.rfind('.')
    if period == -1:
        period=end_offset
    _from_index,segments = end_offset,[]
    for _index in xrange(period-3,start_digit,-3):
        segments.append(value[_index:_from_index])
        _from_index=_index
    if not segments:
        return value
    segments.append(value[:_from_index])
    return ','.join(reversed(segments))

re_3digits = re.compile(r'(?&lt;=\d)\d{3}(?!\d)')
def intcomma(value):
    segments,last_endoffset=[],len(value)
    while last_endoffset &gt; 3:
        digit_group = re_3digits.search(value,0,last_endoffset)
        if not digit_group:
            break
        segments.append(value[digit_group.start():last_endoffset])
        last_endoffset=digit_group.start()
    if not segments:
        return value
    if last_endoffset:
        segments.append(value[:last_endoffset])
    return ','.join(reversed(segments))

def intcomma_recurs(value):
    """
    Converts an integer to a string containing commas every three digits.
    For example, 3000 becomes '3,000' and 45000 becomes '45,000'.
    """
    new = re.sub("^(-?\d+)(\d{3})", '\g&lt;1&gt;,\g&lt;2&gt;', str(value))
    if value == new:
        return new
    else:
        return intcomma(new)

@contextmanager
def timed(save_time_func):
    begin=time.time()
    try:
        yield
    finally:
        save_time_func(time.time()-begin)

def testset_xsimple(func):
    func('5')

def testset_simple(func):
    func('567')

def testset_onecomma(func):
    func('567890')

def testset_complex(func):
    func('-1234567.024')

def testset_average(func):
    func('-1234567.024')
    func('567')
    func('5674')

if __name__ == '__main__':
    print 'Test results:'
    for test_data in ('5','567','1234','1234.56','-253892.045'):
        for func in (intcomma,intcomma_noregex,intcomma_noregex_reversed,intcomma_recurs):
            print func.__name__,test_data,func(test_data)
    times=[]
    def overhead(x):
        pass
    for test_run in xrange(1,4):
        for func in (intcomma,intcomma_noregex,intcomma_noregex_reversed,intcomma_recurs,overhead):
            for testset in (testset_xsimple,testset_simple,testset_onecomma,testset_complex,testset_average):
                for x in xrange(1000): # prime the test
                    testset(func)
                with timed(lambda x:times.append(((test_run,func,testset),x))):
                    for x in xrange(50000):
                        testset(func)
    for (test_run,func,testset),_delta in times:
        print test_run,func.__name__,testset.__name__,_delta
</code></pre>
<p>And here are the test results:</p>
<pre><code>intcomma 5 5
intcomma_noregex 5 5
intcomma_noregex_reversed 5 5
intcomma_recurs 5 5
intcomma 567 567
intcomma_noregex 567 567
intcomma_noregex_reversed 567 567
intcomma_recurs 567 567
intcomma 1234 1,234
intcomma_noregex 1234 1,234
intcomma_noregex_reversed 1234 1,234
intcomma_recurs 1234 1,234
intcomma 1234.56 1,234.56
intcomma_noregex 1234.56 1,234.56
intcomma_noregex_reversed 1234.56 1,234.56
intcomma_recurs 1234.56 1,234.56
intcomma -253892.045 -253,892.045
intcomma_noregex -253892.045 -253,892.045
intcomma_noregex_reversed -253892.045 -253,892.045
intcomma_recurs -253892.045 -253,892.045
1 intcomma testset_xsimple 0.0410001277924
1 intcomma testset_simple 0.0369999408722
1 intcomma testset_onecomma 0.213000059128
1 intcomma testset_complex 0.296000003815
1 intcomma testset_average 0.503000020981
1 intcomma_noregex testset_xsimple 0.134000062943
1 intcomma_noregex testset_simple 0.134999990463
1 intcomma_noregex testset_onecomma 0.190999984741
1 intcomma_noregex testset_complex 0.209000110626
1 intcomma_noregex testset_average 0.513000011444
1 intcomma_noregex_reversed testset_xsimple 0.124000072479
1 intcomma_noregex_reversed testset_simple 0.12700009346
1 intcomma_noregex_reversed testset_onecomma 0.230000019073
1 intcomma_noregex_reversed testset_complex 0.236999988556
1 intcomma_noregex_reversed testset_average 0.56299996376
1 intcomma_recurs testset_xsimple 0.348000049591
1 intcomma_recurs testset_simple 0.34600019455
1 intcomma_recurs testset_onecomma 0.625
1 intcomma_recurs testset_complex 0.773999929428
1 intcomma_recurs testset_average 1.6890001297
1 overhead testset_xsimple 0.0179998874664
1 overhead testset_simple 0.0190000534058
1 overhead testset_onecomma 0.0190000534058
1 overhead testset_complex 0.0190000534058
1 overhead testset_average 0.0309998989105
2 intcomma testset_xsimple 0.0360000133514
2 intcomma testset_simple 0.0369999408722
2 intcomma testset_onecomma 0.207999944687
2 intcomma testset_complex 0.302000045776
2 intcomma testset_average 0.523000001907
2 intcomma_noregex testset_xsimple 0.139999866486
2 intcomma_noregex testset_simple 0.141000032425
2 intcomma_noregex testset_onecomma 0.203999996185
2 intcomma_noregex testset_complex 0.200999975204
2 intcomma_noregex testset_average 0.523000001907
2 intcomma_noregex_reversed testset_xsimple 0.130000114441
2 intcomma_noregex_reversed testset_simple 0.129999876022
2 intcomma_noregex_reversed testset_onecomma 0.236000061035
2 intcomma_noregex_reversed testset_complex 0.241999864578
2 intcomma_noregex_reversed testset_average 0.582999944687
2 intcomma_recurs testset_xsimple 0.351000070572
2 intcomma_recurs testset_simple 0.352999925613
2 intcomma_recurs testset_onecomma 0.648999929428
2 intcomma_recurs testset_complex 0.808000087738
2 intcomma_recurs testset_average 1.81900000572
2 overhead testset_xsimple 0.0189998149872
2 overhead testset_simple 0.0189998149872
2 overhead testset_onecomma 0.0190000534058
2 overhead testset_complex 0.0179998874664
2 overhead testset_average 0.0299999713898
3 intcomma testset_xsimple 0.0360000133514
3 intcomma testset_simple 0.0360000133514
3 intcomma testset_onecomma 0.210000038147
3 intcomma testset_complex 0.305999994278
3 intcomma testset_average 0.493000030518
3 intcomma_noregex testset_xsimple 0.131999969482
3 intcomma_noregex testset_simple 0.136000156403
3 intcomma_noregex testset_onecomma 0.192999839783
3 intcomma_noregex testset_complex 0.202000141144
3 intcomma_noregex testset_average 0.509999990463
3 intcomma_noregex_reversed testset_xsimple 0.125999927521
3 intcomma_noregex_reversed testset_simple 0.126999855042
3 intcomma_noregex_reversed testset_onecomma 0.235999822617
3 intcomma_noregex_reversed testset_complex 0.243000030518
3 intcomma_noregex_reversed testset_average 0.56200003624
3 intcomma_recurs testset_xsimple 0.337000131607
3 intcomma_recurs testset_simple 0.342000007629
3 intcomma_recurs testset_onecomma 0.609999895096
3 intcomma_recurs testset_complex 0.75
3 intcomma_recurs testset_average 1.68300008774
3 overhead testset_xsimple 0.0189998149872
3 overhead testset_simple 0.018000125885
3 overhead testset_onecomma 0.018000125885
3 overhead testset_complex 0.0179998874664
3 overhead testset_average 0.0299999713898
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just subclass <code>long</code> (or <code>float</code>, or whatever). This is highly practical, because this way you can still use your numbers in math ops (and therefore existing code), but they will all print nicely in your terminal. </p>
<pre><code>&gt;&gt;&gt; class number(long):

        def __init__(self, value):
            self = value

        def __repr__(self):
            s = str(self)
            l = [x for x in s if x in '1234567890']
            for x in reversed(range(len(s)-1)[::3]):
                l.insert(-x, ',')
            l = ''.join(l[1:])
            return ('-'+l if self &lt; 0 else l) 

&gt;&gt;&gt; number(-100000)
-100,000
&gt;&gt;&gt; number(-100)
-100
&gt;&gt;&gt; number(-12345)
-12,345
&gt;&gt;&gt; number(928374)
928,374
&gt;&gt;&gt; 345
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>Italian numbers: thousand separator is a '.'</h1>
<p>I solved it this way... for a dictonary</p>
<pre><code>from random import randint

voci = {
    "immobilizzazioni": randint(200000, 500000),
    "tfr": randint(10000, 25000),
    "ac": randint(150000, 200000),
    "fondo": randint(10500, 22350),
    "debiti": randint(150000, 250000),
    "ratei_attivi": randint(2000, 2500),
    "ratei_passivi": randint(1500, 2600),
    "crediti_v_soci": randint(10000, 30000)
}


testo_rnd2 = """Nellâ€™azienda Hypermax S.p.a. di Bologna le immobilizzazioni valgono {immobilizzazioni:,} â‚¬, i debiti per TFR sono pari a {tfr:,} â‚¬, lâ€™attivo circolante Ã¨ di {ac:,} euro, il fondo rischi ed oneri ha un importo pari a {fondo:,} euro, i debiti sono {debiti:,} â‚¬, i ratei e risconti attivi sono pari a {ratei_attivi:,} euro, i ratei e risconti passivi sono pari a {ratei_passivi:,} euro. I crediti verso i soci sono pari a {crediti_v_soci:,} euro."""

print(testo_rnd2)
</code></pre>
<p>out: 
le immobilizzazioni valgono 419.168 â‚¬. i debiti per TFR sono pari a 13.255 â‚¬. lâ€™attivo circolante Ã¨ di 195.443 euro. il fondo rischi ed oneri ha un importo pari a 13.374 euro. i debiti sono 180.947 â‚¬. i ratei e risconti attivi sono pari a 2.271 euro. i ratei e risconti passivi sono pari a 1.864 euro. I crediti verso i soci sono pari a 17.630 euro.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is another variant using a generator function that works for integers:</p>
<pre><code>def ncomma(num):
    def _helper(num):
        # assert isinstance(numstr, basestring)
        numstr = '%d' % num
        for ii, digit in enumerate(reversed(numstr)):
            if ii and ii % 3 == 0 and digit.isdigit():
                yield ','
            yield digit

    return ''.join(reversed([n for n in _helper(num)]))
</code></pre>
<p>And here's a test:</p>
<pre><code>&gt;&gt;&gt; for i in (0, 99, 999, 9999, 999999, 1000000, -1, -111, -1111, -111111, -1000000):
...     print i, ncomma(i)
... 
0 0
99 99
999 999
9999 9,999
999999 999,999
1000000 1,000,000
-1 -1
-111 -111
-1111 -1,111
-111111 -111,111
-1000000 -1,000,000
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>this is baked into python per PEP -&gt; <a href="https://www.python.org/dev/peps/pep-0378/" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0378/</a></p>
<p>just use format(1000, ',d') to show an integer with thousands separator</p>
<p>there are more formats described in the PEP, have at it</p>
</div>
<div class="post-text" itemprop="text">
<p>I prefer the locale-based solution for real projects, but I think the approach with the use of slice assignment should be mentioned here:</p>
<pre><code>def format_money(f, delimiter=',', frac_digits=2):

    negative_fix = int(f &lt; 0)

    s = '%.*f' % (frac_digits, f)
    if len(s) &lt; 5 + frac_digits + negative_fix:
        return s

    l = list(s)
    l_fix = l[negative_fix:]
    p = len(l_fix) - frac_digits - 5
    l_fix[p::-3] = [i + delimiter for i in l_fix[p::-3]]

    return ''.join(l[:negative_fix] + l_fix)
</code></pre>
<p>Gist with doctests is here - <a href="https://gist.github.com/ei-grad/b290dc761ae253af69438bbb94d82683" rel="nofollow noreferrer">https://gist.github.com/ei-grad/b290dc761ae253af69438bbb94d82683</a></p>
</div>
<div class="post-text" itemprop="text">
<p>For floats:</p>
<pre><code>float(filter(lambda x: x!=',', '1,234.52'))
# returns 1234.52
</code></pre>
<p>For ints:</p>
<pre><code>int(filter(lambda x: x!=',', '1,234'))
# returns 1234
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want to depend on any external libraries:</p>
<pre><code> s = str(1234567)
 print ','.join([s[::-1][k:k+3][::-1] for k in xrange(len(s)-1, -1, -3)])
</code></pre>
<p>This works only for non-negative integers.</p>
</div>
<span class="comment-copy">Note that this won't be correct outside the US and few other places, in that case the chosen locale.format() is the correct answer.</span>
<span class="comment-copy">The keyword argument form: <code>{val:,}.format(val=val)</code></span>
<span class="comment-copy">Great thanks.  For money amounts, with 2 decimal places - "{:,.2f}".format(value)</span>
<span class="comment-copy">Slightly more concise: <code>format(value, ',')</code></span>
<span class="comment-copy">In python 3.6 and up, f-strings add even more convenience. E.g. <code>f"{2 ** 64 - 1:,}"</code></span>
<span class="comment-copy">I tried your code, and unfortunately, I get this: "locale.Error: unsupported locale setting". :-s</span>
<span class="comment-copy">Mark: If you're on Linux, you might want to look at what is in your /etc/locale.gen, or whatever your glibc is using to build its locales.  You might also want to try ""en", "en_US.utf8", "en_US.UTF-8", 'en_UK" (sp?), etc.  mikez: There needs to be a book: "Dr. PEP: Or How I Learned to Stop Worrying and Love docs.python.org."  I gave up memorizing all the libraries back around Python 1.5.6.  As for <code>locale</code>, I use as little of it as I can.</span>
<span class="comment-copy">You can use '' for <code>setlocale</code> to use the default, which hopefully will be appropriate.</span>
<span class="comment-copy">Try this: locale.setlocale(locale.LC_ALL, '') It worked for me</span>
<span class="comment-copy">Although clever, I don't like functions that make global settings... Using 'blah'.format() is the better way to go.</span>
<span class="comment-copy">Voted up for most inefficient and unreadable method to answer this question.</span>
<span class="comment-copy">Agreed, this should be in a textbook.</span>
<span class="comment-copy">would be nice if this at least would work. try this number "17371830" it becomes "173.718.3.0" =)</span>
<span class="comment-copy">Periods?  That ain't even possible, holms.  This piece of junk totally ignores locale.  I wonder how you got that result.  Your example produces '17,371,830' for me, as expected.</span>
<span class="comment-copy">To make this a function I would suggest: <code>lambda x: (lambda s: ','.join(["%s%s%s" % (x[0], x[1] or '', x[2] or '') for x in itertools.izip_longest(s[::-1][::3], s[::-1][1::3], s[::-1][2::3])])[::-1].replace('-,','-'))(str(x))</code> just to keep the obfuscation theme.</span>
<span class="comment-copy">The format(...) syntax works for me in Python2.7.3...</span>
<span class="comment-copy">Yeah, the harder ways are mainly for folks on older Pythons, such as those shipped with RHEL and other long-term support distros.</span>
<span class="comment-copy">how to express this with format strings ? "%,d" % 1234567 does not work</span>
<span class="comment-copy">upvote for nice little regex lesson</span>
<span class="comment-copy">use verbose mode and you can have comments right inside the code</span>
<span class="comment-copy">Works beautifully for me thanks! snapshot example posted in <a href="https://twitter.com/jAtlas7/status/902909112001994753" rel="nofollow noreferrer">this tweet</a></span>
<span class="comment-copy">Unfortunately doesn't work in all cases. intToStringWithCommas(1000.1) -&gt; '1.0001,000'</span>
<span class="comment-copy">He specifically said integers and that it should be as simple as possible, so I decided not to handle datatypes other than integers. I also made it explicit in the function name _int_ToStringWithCommas. Now I've also added a raise to make it more clear.</span>
<span class="comment-copy">You are right, discard my comment</span>
<span class="comment-copy"><code>float2comma(12031023.1323)</code> returns: '12,031,023.132,3'</span>
<span class="comment-copy">I thought Daniel Fortunov's one-regex solution would be #1 and beat all the algorithms because regex is so refined/optimized and coded in C, but nope.. I guess the pattern and lookahead's are too expensive. it falls in at about double the time of the intcomma above, even with precompiling the regex.</span>
<span class="comment-copy">I like the subclass idea, but is <code>__repr__()</code> the correct method to override?  I would suggest overriding <code>__str__()</code> and leaving <code>__repr__()</code> alone, because <code>int(repr(number(928374)))</code> ought to work, but <code>int()</code> will choke on the commas.</span>
<span class="comment-copy">@steveha has a good point, but the justification should have been that <code>number(repr(number(928374)))</code> doesn't work, not <code>int(repr(number(928374)))</code>. All the same, to make this approach work directly with <code>print</code>, as the OP requested, the <code>__str__()</code> method should be the one overridden rather than <code>__repr__()</code>. Regardless, there appears to be a bug in the core comma insertion logic.</span>
<span class="comment-copy">Please, leave a comment if downvote.</span>
<span class="comment-copy">That <i>removes</i> the commas. While handy, the OP asked for a way to <i>add</i> them. Besides, something like <code>float('1,234.52'.translate(None, ','))</code> might be more straightforward and possibly faster.</span>
<span class="comment-copy">-1 If the number is less than 1000 it only returns the first digit.</span>
<span class="comment-copy">That is true. I had the code in an if clause: if len(s) &gt; 3, etc etc</span>
<span class="comment-copy">Update your example and I'll remove my -1.</span>
