<div class="post-text" itemprop="text">
<p>I am new to Python. I have this code:</p>
<pre><code>class SomeClass(OtherClass):
    name = "whatever"
    task = "nothing"
</code></pre>
<p>Now, I want to create a child class such that, I am able to instantiate it like this:</p>
<pre><code>child = ChildClass(task = "sometask")
child.name #=&gt; "whatever"
child.task #=&gt; "sometask"
child2 = ChildClass()
child2.task #=&gt; "nothing"
</code></pre>
<p>How can I do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>First, you need to note that you are creating class variables in <code>SomeClass</code>, not instance variables</p>
<pre><code>class SomeClass(object):
    def __init__(self, name = "whatever", task = "nothing"):
        self.name = name
        self.task = task
</code></pre>
<p>Now we have designed a class, which accepts two keyword arguments with default values. So, if you don't pass values to any of them, by default <code>whatever</code> will be assigned to <code>name</code> and <code>nothing</code> will be assigned to <code>task</code>.</p>
<pre><code>class ChildClass(SomeClass):
    def __init__(self, name = "whatever", task = "nothing"):
        super(ChildClass, self).__init__(name, task)

child1 = ChildClass(task = "sometask")
print child1.name, child1.task
# whatever sometask
child2 = ChildClass()
print child2.name, child2.task
# whatever nothing
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to overwrite its <strong>initializer</strong> (sort of like a constructor in other languages):</p>
<pre><code>&gt;&gt;&gt; class SomeClass:
...   name='whatever'
...   task='nothing'
...
&gt;&gt;&gt; class ChildClass(SomeClass):
...   def __init__(self, name=None, task=None):
...     if name is not None:
...       self.name = name
...     if task is not None:
...       self.task = task
...
&gt;&gt;&gt; child = ChildClass(task='sometask')
&gt;&gt;&gt; child.name
'whatever'
&gt;&gt;&gt; child.task
'sometask'
&gt;&gt;&gt; child2 = ChildClass()
&gt;&gt;&gt; child2.task
'nothing'
</code></pre>
</div>
<span class="comment-copy">You mean those URLs are kind of static data?</span>
<span class="comment-copy">so, Python does support <code>super</code> right?</span>
<span class="comment-copy">@Stoic Indeed, if it is a new style class :)</span>
<span class="comment-copy"><a href="https://docs.python.org/2/library/functions.html#super" rel="nofollow noreferrer">super</a> (Python 2), <a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow noreferrer">super</a> (Python 3)</span>
<span class="comment-copy">alright, and I noticed that you called super on the class itself, and not the method? Is there a way to call the parent method without referencing <code>super(ChildClass, self)</code>? What I mean is I cannot I say: <code>super(name, task)</code> inside the child's <code>__init__</code> ?</span>
<span class="comment-copy">@Stoic In Python 2.x, that is how you should do. But in Python 3, you can simply do <code>super().__init__(..)</code>. Please check the links given by Two-bit-Alchemist.</span>
