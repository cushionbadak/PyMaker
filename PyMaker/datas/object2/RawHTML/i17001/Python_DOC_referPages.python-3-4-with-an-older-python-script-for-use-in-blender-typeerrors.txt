<div class="post-text" itemprop="text">
<p>I've converted a older Python script with the Python 2to3 tool to make it compatible with Blender. The script makes communication possible between Blender3D and a OMRON PLC. However after conversion the script gives the following error in the Blender 3D console:</p>
<pre><code>TypeError: 'str' does not support the buffer interface
</code></pre>
<p>This occurs in the following lines:</p>
<pre><code>def _send(self,  raw):
    self.sock.send( raw)
    #print ' Send:' + repr(raw)
def _recieve(self):
    pr = self.sock.recv(8)
    length = binstr2int( pr[4:8])
    r = pr + self.sock.recv( length)
    #print ' Recv:' + repr(r)
    return r
</code></pre>
<p>I've searched the problem using google and it seems its a problem that occurs when you convert or use an older script for Python 3+. Adding .encode() and .decode() to the objects where the problems occur has not helped either. </p>
<pre><code>def _send(self,  raw):
    self.sock.send( raw.encode())
    #print ' Send:' + repr(raw)
def _recieve(self):
    pr = self.sock.recv(8).decode()
    length = binstr2int( pr[4:8])
    r = pr + self.sock.recv( length)
    #print ' Recv:' + repr(r)
    return r
</code></pre>
<p>This gives a different kind of error:</p>
<pre><code>TypeError: can't convert 'bytes' to str implicitly
</code></pre>
<p>The script was not made by me, I'm simply using it for a school project to make communication possible between software (Blender3D) and hardware (PLC).</p>
<p>Help would be much appreciated, thanks.</p>
<p>I've put the converted version of the script <a href="https://www.dropbox.com/s/v15jmexmrm8orgg/Convert.py" rel="nofollow">here.</a></p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>Bytes-only operations like <code>self._send(c1.raw)</code> needs to be encoded correctly. Use either <code>self._send(bytes(c1.raw, "utf-8"))</code> or <code>self._send(c1.raw.encode("utf-8"))</code></p>
<p>However, since your classes like <code>FinsTCPframe</code> is actually operating bytes stream instead of unicode literals, I'd suggest to just stick to bytes (append <code>b</code> in front of any affected string constants, like <code>b''</code> instead of <code>''</code></p></li>
<li><p><code>ord()</code> around an item of a <code>bytes</code> instance (for example, if <code>s</code> is a <code>bytes</code> instance, <code>s[i]</code> is the item) should be removed, since retrieving one element from bytes in Python 3.x is already a <code>int</code> instance. If you are not 100% sure what's inside your ord() call, try this (dirty) workaround:</p>
<p><code>safe_ord = lambda c: ord(c) if isinstance(c, str) else c</code></p>
<p>And replace corresponding <code>ord()</code> with <code>safe_ord()</code></p></li>
<li><p><code>chr()</code> in python 3 returns a <code>str</code>, but if you need <code>bytes</code> instead, try this:</p>
<p><code>bytes_chr = lambda x: bytes([x])</code> (from <a href="https://stackoverflow.com/questions/4523505/chr-equivalent-returning-a-bytes-object-in-py3k">this stackoverflow question)</a></p>
<p>And replace corresponding <code>chr()</code> with <code>bytes_chr()</code></p></li>
<li><p>Division <code>/</code> is resulting in a float by default, so if you want to retain the old behavior, double the symbol: <code>//</code></p></li>
</ol>
<p>A full list of porting guide can be found on the <a href="https://docs.python.org/3/howto/pyporting.html" rel="nofollow noreferrer">official python docs site</a>, consult this if you need to do the porting work in the future :)</p>
</div>
<span class="comment-copy">A full backtrace would help. (btw: recieve looks like a typo)</span>
<span class="comment-copy">The original version of the script can be found here (<a href="https://gitorious.org/omr/omr/commit/548633e768c2069fbf60ebbe79ed7f1d5c34e8aa#plcPyLib/omronTcpFins.py" rel="nofollow noreferrer">gitorious.org/omr/omr/commit/â€¦</a>)</span>
<span class="comment-copy">Hmm, I'm not familiar to blender. Could you gimme some hint about how to reproduce the problem?</span>
<span class="comment-copy">If you run the script I linked on my dropbox in Python 3.4 it will give the same errors. Blender uses Python 3+ for the coding of its 'game' environment.</span>
<span class="comment-copy">But what's running on 192.168.106.123:9600, and how can I get that thing up and running? Without this, the program just raises an exception for not able to connect to the host.</span>
