<div class="post-text" itemprop="text">
<p>I have the following code </p>
<pre><code>import nltk, os, json, csv, string, cPickle
from scipy.stats import scoreatpercentile

lmtzr = nltk.stem.wordnet.WordNetLemmatizer()

def sanitize(wordList): 
answer = [word.translate(None, string.punctuation) for word in wordList] 
answer = [lmtzr.lemmatize(word.lower()) for word in answer]
return answer

words = []
for filename in json_list:
    words.extend([sanitize(nltk.word_tokenize(' '.join([tweet['text'] 
                   for tweet in json.load(open(filename,READ))])))])
</code></pre>
<p>I've tested lines 2-4 in a separate testing.py file when I wrote</p>
<pre><code>import nltk, os, json, csv, string, cPickle
from scipy.stats import scoreatpercentile

wordList= ['\'the', 'the', '"the']
print wordList
wordList2 = [word.translate(None, string.punctuation) for word in wordList]
print wordList2
answer = [lmtzr.lemmatize(word.lower()) for word in wordList2]
print answer

freq = nltk.FreqDist(wordList2)
print freq
</code></pre>
<p>and the command prompt returns ['the','the','the'], which is what I wanted (removing punctuation).</p>
<p>However, when I put the exact same code in a different file, python returns a TypeError stating that</p>
<pre><code>File "foo.py", line 8, in &lt;module&gt;
  for tweet in json.load(open(filename, READ))])))])
File "foo.py", line 2, in sanitize
  answer = [word.translate(None, string.punctuation) for word in wordList]
TypeError: translate() takes exactly one argument (2 given)
</code></pre>
<p>json_list is a list of all the file paths (I printed and check that this list is valid). I'm confused on this TypeError because everything works perfectly fine when I'm just testing it in a different file.</p>
</div>
<div class="post-text" itemprop="text">
<p>If all you are looking to accomplish is to do the same thing you were doing in Python 2 in Python 3, here is what I was doing in Python 2.0  to throw away punctuation and numbers:</p>
<pre><code>text = text.translate(None, string.punctuation)
text = text.translate(None, '1234567890')
</code></pre>
<p>Here is my Python 3.0 equivalent:</p>
<pre><code>text = text.translate(str.maketrans('','',string.punctuation))
text = text.translate(str.maketrans('','','1234567890'))
</code></pre>
<p>Basically it says 'translate nothing to nothing' (first two parameters) and translate any punctuation or numbers to <code>None</code> (i.e. remove them).</p>
</div>
<div class="post-text" itemprop="text">
<p>I suspect your issue has to do with the differences between <code>str.translate</code> and <code>unicode.translate</code> (these are also the differences between <code>str.translate</code> on Python 2 versus Python 3). I suspect your original code is being sent <code>unicode</code> instances while your test code is using regular 8-bit <code>str</code> instances.</p>
<p>I don't suggest converting Unicode strings back to regular <code>str</code> instances, since <code>unicode</code> is a much better type for handling text data (and it is the future!). Instead, you should just adapt to the new <code>unicode.translate</code> syntax. With regular <code>str.translate</code> (on Python 2), you can pass an optional <code>deletechars</code> argument and the characters in it would be removed from the string. For <code>unicode.translate</code> (and <code>str.translate</code> on Python 3), the extra argument is no longer allowed, but translation table entries with <code>None</code> as their value will be deleted from the output.</p>
<p>To solve the problem you'll need to create an appropriate translation table. A translation table is a dictionary mapping from Unicode ordinals (that is, <code>int</code>s) to ordinals, strings or <code>None</code>. A helper function for making them exists in Python 2 as <code>string.maketrans</code> (and Python 3 as a method of the <code>str</code> type), but the Python 2 version of it doesn't handle the case we care about (putting <code>None</code> values into the table). You can  build an appropriate dictionary yourself with something like <code>{ord(c): None for c in string.punctuation}</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is how translate works:</p>
<pre><code>yourstring.translate(str.maketrans(fromstr, tostr, deletestr))
</code></pre>
<p>Replace the characters in <code>fromstr</code> with the character in the same position in <code>tostr</code>
and delete all characters that are in <code>deletestr</code>. The <code>fromstr</code> and <code>tostr</code> can be
empty strings and the <code>deletestr</code> parameter can be omitted.</p>
<p>example:</p>
<pre><code>str="preetideepak12345aeiou"
&gt;&gt;&gt; str.translate(str.maketrans('abcde','12345','p'))
</code></pre>
<p>output:    </p>
<pre><code>'r55ti4551k1234515iou'
</code></pre>
<p>here:</p>
<pre><code>a is translated to 1
b is translated to 2
c is translated to 3 and so on
and p is deleted from string.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python 3.0:</p>
<pre><code>text = text.translate(str.maketrans('','','1234567890'))
</code></pre>
<blockquote>
<p>static str.maketrans(x[, y[, z]]) </p>
<p>This static method returns a
  translation table usable for <code>str.translate()</code>.</p>
</blockquote>
<p>If there is only one argument, it must be a dictionary mapping Unicode ordinals (integers) or characters (strings of length 1) to Unicode ordinals, strings (of arbitrary lengths) or <code>None</code>. Character keys will then be converted to ordinals.</p>
<p>If there are two arguments, they must be strings of equal length, and in the resulting dictionary, each character in <code>x</code> will be mapped to the character at the same position in <code>y</code>. If there is a third argument, it must be a string, whose characters will be mapped to <code>None</code> in the result.</p>
<p><a href="https://docs.python.org/3/library/stdtypes.html?highlight=maketrans#str.maketrans" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html?highlight=maketrans#str.maketrans</a></p>
</div>
<span class="comment-copy">Maybe this happens, because another encoding (utf8 for instance) is used in this file, for which the translate function only gets one argument. I'm not sure, but is this possible? You can check this by printing type(wordList) for each case.</span>
<span class="comment-copy">Can you show your import statements?  Maybe there is a translate function that you are unknowingly importing. Try "print translate" when you get the exception and see which module it comes from</span>
<span class="comment-copy">@Spaceghost, import statements are:      <code>import nltk, os, json, csv, string, cPickle</code> <code>from scipy.stats import scoreatpercentile (2 separate lines)</code></span>
<span class="comment-copy">Your example code in the second file will not run even after adding imports because you have left out code like what creates lmtzr.</span>
<span class="comment-copy">Your code, as seen above, is incomplete.  No-one else can take that and run it to see what it does.</span>
<span class="comment-copy">This is the correct answer in Python3, +1.</span>
<span class="comment-copy">Awesome, thank you! +1</span>
<span class="comment-copy">You can combine these two maps, trivially, by using <code>text.translate(str.maketrans('', '', string.punctuation + '1234567890'))</code> or even better, with <code>text.translate(str.maketrans('', '', string.punctuation + string.digits))</code>. I'd store the translation map first in a separate constant and re-use it.</span>
<span class="comment-copy">Using this <code>text = text.translate(str.maketrans('','',string.punctuation))</code> worked for me</span>
<span class="comment-copy">This works only if the strings are of equal length.</span>
