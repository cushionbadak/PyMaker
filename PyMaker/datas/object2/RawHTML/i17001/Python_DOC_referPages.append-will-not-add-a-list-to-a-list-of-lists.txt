<div class="post-text" itemprop="text">
<p>I wrote a script to find all permutations of a list of numbers in lexicographic order. The output is correct when immediately printed, but it gets changed if I append it to a list. In the output of my script, first you see the list with a single element, then the lists I append to that element, and finally you see the finished list after the sub-lists are added:</p>
<pre><code>Find all permutations of 1 -&gt; x. x = ? 3
[[1, 2, 3]] 


[1, 2, 3]
[1, 3, 2]
[2, 1, 3]
[2, 3, 1]
[3, 1, 2]
[3, 2, 1]


 [[1, 3, 2], [2, 3, 1], [2, 3, 1], [3, 2, 1], [3, 2, 1], [3, 2, 1]]
</code></pre>
<p>As you can see, the initial [1, 2, 3] list is not even in the final output. Below is my code. Can anybody tell me what the heck is going on?</p>
<pre><code>permutation_range = int(input('Find all permutations of 1 -&gt; x. x = ? '))

def permutation_finder(x):
    permutation = list(range(1, 1+x))
    rev_permutation = permutation[::-1]
    permutation_list = [permutation]
    print(permutation_list, '\n\n')          #bugcheck print
    while permutation != rev_permutation:
        permutation, index_k = step_1(permutation)
        permutation, index_k, index_l = step_2(permutation, index_k)
        permutation, index_k = step_3(permutation, index_k, index_l)
        permutation = step_4(permutation, index_k)
        permutation_list.append(permutation)    
        print(permutation)                  #bugcheck print 
    return permutation_list

def step_1(permutation):
    for val in permutation[:-1][::-1]:
        index_k = permutation.index(val)
        if val &lt; permutation[index_k+1]:
            return permutation, index_k

def step_2(permutation, index_k):
    for val in permutation[index_k+1:][::-1]:
        if val &gt; permutation[index_k]:
            index_l = permutation.index(val)
            return permutation, index_k, index_l

def step_3(permutation, index_k, index_l):
    a_k, a_l = permutation[index_k], permutation[index_l]
    permutation[index_k], permutation[index_l] = a_l, a_k
    return permutation, index_k

def step_4(permutation, index_k):
    front = permutation[:index_k+1]
    back = permutation[index_k+1:]
    back.reverse()
    permutation = front + back
    return permutation

print('\n\n', permutation_finder(permutation_range))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because a list in list is actually a reference, not converting to value when you use <code>append()</code>. So when you edit the list afterwards, the previously added one also changes.</p>
<p>Adding <code>[:]</code> to copy the list before appending could fix it:</p>
<pre><code>def permutation_finder(x):
    permutation = list(range(1, 1+x))
    rev_permutation = permutation[::-1]
    permutation_list = [permutation[:]]
    print(permutation_list, '\n\n')          #bugcheck print
    while permutation != rev_permutation:
        permutation, index_k = step_1(permutation)
        permutation, index_k, index_l = step_2(permutation, index_k)
        permutation, index_k = step_3(permutation, index_k, index_l)
        permutation = step_4(permutation, index_k)
        permutation_list.append(permutation[:])    
        print(permutation)                  #bugcheck print 
    return permutation_list
</code></pre>
<p>(Note the <code>[:]</code> part)</p>
<p>And after the change I can get:</p>
<pre><code>$ python permutation.py
Find all permutations of 1 -&gt; x. x = ? 3
[[1, 2, 3]]


[1, 3, 2]
[2, 1, 3]
[2, 3, 1]
[3, 1, 2]
[3, 2, 1]


 [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]
</code></pre>
<p>Should be what you want :)</p>
</div>
<span class="comment-copy">btw I got only 5 lists printed after <code>[[1, 2, 3]]</code> and before the final list</span>
<span class="comment-copy">Did you know? Python already has a <a href="https://docs.python.org/3/library/itertools.html?highlight=permutations#itertools.permutations" rel="nofollow noreferrer"><code>permutations</code></a> method. (Not that I'm saying it's pointless to write your own - it's certainly an educational experience :-) )</span>
<span class="comment-copy">Yeah, I was shuffling things around too much while I figured out what I wanted to ask. It made my output in the question not 'quite' accurate. Sorry!</span>
<span class="comment-copy">Yeah, I knew Python has its own method. I'm trying to muscle through numerous problems manually so I can get them set in my head!</span>
<span class="comment-copy">Thanks! It was a strange problem and I couldn't figure out how to articulate my issue well. This is what I needed to know.</span>
