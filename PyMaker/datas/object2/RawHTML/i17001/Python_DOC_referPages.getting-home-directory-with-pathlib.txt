<div class="post-text" itemprop="text">
<p>Looking through the new <code>pathlib</code> module in Python 3.4, I notice that there isn't any simple way to get the user's home directory. The only way I can come up with for getting a user's home directory is to use the older <code>os.path</code> lib like so:</p>
<pre><code>import pathlib
from os import path
p = pathlib.Path(path.expanduser("~"))
</code></pre>
<p>This seems clunky. Is there a better way?</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems that this method was brought up in a bug report <a href="http://bugs.python.org/issue19776" rel="nofollow">here</a>. Some code was written (given <a href="http://bugs.python.org/review/19776/patch/10200/38548" rel="nofollow">here</a>) but unfortunately it doesn't seem that it made it into the final Python 3.4 release.</p>
<p>Incidentally the code that was proposed was extremely similar to the code you have in your question:</p>
<pre><code># As a method of a Path object
def expanduser(self):
    """ Return a new path with expanded ~ and ~user constructs
    (as returned by os.path.expanduser)
    """
    return self.__class__(os.path.expanduser(str(self)))
</code></pre>
<h3>EDIT</h3>
<p>Here is a rudimentary subclassed version <code>PathTest</code> which subclasses <code>WindowsPath</code> (I'm on a Windows box but you could replace it with <code>PosixPath</code>). It adds a <code>classmethod</code> based on the code that was submitted in the bug report.</p>
<pre><code>from pathlib import WindowsPath
import os.path

class PathTest(WindowsPath):

    def __new__(cls, *args, **kwargs):
        return super(PathTest, cls).__new__(cls, *args, **kwargs)

    @classmethod
    def expanduser(cls):
        """ Return a new path with expanded ~ and ~user constructs
        (as returned by os.path.expanduser)
        """
        return cls(os.path.expanduser('~'))

p = PathTest('C:/')
print(p) # 'C:/'

q = PathTest.expanduser()
print(q) # C:\Users\Username
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As of python-3.5, there is <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.home" rel="noreferrer"><code>Path.home()</code></a>, which improves the situation somewhat.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.expanduser" rel="nofollow noreferrer">method</a> <code>expanduser()</code>:</p>
<pre><code>p = PosixPath('~/films/Monty Python')
p.expanduser()
PosixPath('/home/eric/films/Monty Python')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Caveat</strong>: This answer is 3.4 specific. As pointed out in other answers, this functionality was added in later versions.</p>
<p>It looks like there is no better way to do it. I just searched <a href="https://pathlib.readthedocs.org/en/pep428/" rel="nofollow noreferrer">the documentation</a> and nothing relevant came up for my search terms.</p>
<ul>
<li><code>~</code> has zero hits</li>
<li><code>expand</code> has zero hits</li>
<li><code>user</code> has 1 hit as a return value for <code>Path.owner()</code></li>
<li><code>relative</code> has 8 hits, mostly related to <code>PurePath.relative_to()</code></li>
</ul>
</div>
<span class="comment-copy">Now there is the <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.home" rel="nofollow noreferrer"><code>pathlib.Path.home</code></a> method.</span>
<span class="comment-copy">I have added a rudimentary subclass which provides an <code>expanduser</code> method.</span>
<span class="comment-copy">What about a different user's home directory? (e.g. not <i>your</i> home dir)</span>
<span class="comment-copy">@user9074332 -- how about <code>Path('~username').expanduser()</code>?  There's also <code>os.path.expanduser('~username')</code>, but pay close attention to how each of these fails if the user does not exist!</span>
