<div class="post-text" itemprop="text">
<p>Not sure if this the recommended way of doing things in Python. I have a class with a bunch of attributes, like so</p>
<pre><code>class MyClass:
    def __init__(self):
        self.attr1 = "first_value"
        self.attr2 = "second_value"
        ...
</code></pre>
<p>However, this is tedious, I want to be able to do this in a loop:</p>
<pre><code>self.attr_list = ["attr1", "attr2", "another_attr",...]

def __init__(self, values_list):
    self.attr_values = [some_func(i) for i in values_list]
</code></pre>
<p>But I also later want to call these values like so: </p>
<pre><code>foo = MyClass(values_list)
...

bar = foo.attr1

myFunc(foo.another_attr, ..., some_other_parameters)
</code></pre>
<p>So the question is, how do I avoid the tedious first method where the line for each attribute is hard-coded, but still get the convenience of referring to an attribute without having to know/remember where in the list it is?</p>
<p>Hope this is clearer.</p>
<p>Thanks</p>
<p>P.S. I'm using Python 3</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure I understand the question. Are you looking for <a href="https://docs.python.org/3/library/functions.html#setattr" rel="nofollow">setattr</a>? Something like this:</p>
<pre><code>def assign(self, attr_names, value_list):
    for i in range(len(attr_names)):
        setattr(self, attr_names[i], some_func(value_list[i]))
</code></pre>
<p>You can use it like that:</p>
<pre><code>foo.assign(["attr1", "attr2"], value_list)    
print(foo.attr1)
</code></pre>
<p>I don't think that using <code>setattr</code> is wrong per se however I advice using dictionaries instead since you might overwrite other attributes by accident, for example consider this:</p>
<pre><code>foo.assign(["assign"], [1])
foo.assign(["assign"], [1])  # &lt;-- exception now
</code></pre>
</div>
<span class="comment-copy">And using dictionaries would avoid overwriting existing attributes?</span>
<span class="comment-copy">Thank you, I managed to try both <code>setattr</code> and dictionaries and they are both solutions. At the moment, I'm only setting these values once, in <code>__init__</code>, so I won't be overwriting them.</span>
<span class="comment-copy">@SamuelTan What I've meant is that you keep a dictionary attribute, i.e. <code>foo.my_dict = {}</code> in <code>__init__</code> and then you assign to that dictionary. That way you avoid accidental overwrites.</span>
<span class="comment-copy">that is what I did</span>
