<div class="post-text" itemprop="text">
<p>I am trying to determine the best way to execute something in command line using python.  I have accomplished this with <a href="https://docs.python.org/2/library/subprocess.html" rel="nofollow">subprocess.Popen()</a> on individual files.  However, I am trying to determine the best way to do this many time with numerous different files.  I am not sure if I should create a batch file and then execute that in command, or if I am simply missing something in my code.  Novice coder here so I apologize in advance.  The script below returns a returncode of 1 when I use a loop, but a 0 when not in a loop.  What is the best approach for the task at hand? </p>
<pre><code>def check_output(command, console):
    if console == True:
        process = subprocess.Popen(command)
    else:
        process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)
    output, error = process.communicate()
    returncode = process.poll()
    return returncode, output, error

for file in fileList.split(";"):
    ...code to create command string...
    returncode, output, error = check_output(command, False)
    if returncode != 0:
        print("Process failed")
        sys.exit()
</code></pre>
<p>EDIT: An example command string looks like this:</p>
<p>C:\Path\to\executable.exe -i C:\path\to\input.ext -o C:\path\to\output.ext</p>
</div>
<div class="post-text" itemprop="text">
<p>Try using the commands module (only available before python 3)</p>
<pre><code>&gt;&gt;&gt; import commands
&gt;&gt;&gt; commands.getstatusoutput('ls /bin/ls')
(0, '/bin/ls')
</code></pre>
<p>Your code might look like this</p>
<pre><code>import commands

def runCommand( command ):
    ret,output = commands.getstatutoutput( command )
    if ret != 0:
        sys.stderr.writelines( "Error: "+output )
    return ret

for file in fileList.split(';'):
    commandStr = ""
    # Create command string
    if runCommand( commandStr ):
        print("Command '%s' failed" % commandStr)
        sys.exit(1)
</code></pre>
<p>You are not entirely clear about the problem you are trying to solve. If I had to guess why your command is failing in the loop, its probably the way you handle the console=False case.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are merely running commands one after another, then it is probably easiest to cast aside Python and stick your commands into a bash script. I assume you merely want to check errors and abort if one of the commands fails.</p>
<pre><code>#!/bin/bash

function abortOnError(){
    "$@"
    if [ $? -ne 0 ]; then
        echo "The command $1 failed with error code $?"
        exit 1
    fi
}

abortOnError ls /randomstringthatdoesnotexist
echo "Hello World" # This will never print, because we aborted
</code></pre>
<p><strong>Update</strong>: OP updated his question with sample data that indicate he is on Windows.
You can get <code>bash</code> for Windows through <a href="http://www.cygwin.com/" rel="nofollow">cygwin</a> or various other packages, but it may make more sense to use PowerShell if you are on Windows. Unfortunately, I do not have a Windows box, but there should be a similar mechanism for error checking.  Here is a <a href="http://blogs.msdn.com/b/kebab/archive/2013/06/09/an-introduction-to-error-handling-in-powershell.aspx" rel="nofollow">reference</a> for PowerShell error handling.</p>
</div>
<div class="post-text" itemprop="text">
<p>You might consider using <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow">subprocess.call</a></p>
<pre><code>from subprocess import call

for file_name in file_list:
    call_args = 'command ' + file_name
    call_args = call_args.split() # because call takes a list of strings 
    call(call_args)
</code></pre>
<p>It also will output 0 for success and 1 for failure.</p>
</div>
<div class="post-text" itemprop="text">
<p>What your code is trying to accomplish is to run a command on a file, and exit the script if there's an error. <code>subprocess.check_output</code> accomplishes this - if the subprocess exits with an error code it raises a Python error. Depending on whether you want to explicitly handle errors, your code would look something like this:</p>
<pre><code>file in fileList.split(";"):
    ...code to create command string...
    subprocess.check_output(command, shell=True)
</code></pre>
<p>Which will execute the command and print the shell error message if there is one, or </p>
<pre><code>file in fileList.split(";"):
    ...code to create command string...
    try:
        subprocess.check_output(command,shell=True)
    except subprocess.CalledProcessError:
        ...handle errors...
        sys.exit(1)
</code></pre>
<p>Which will print the shell error code and exit, as in your script.</p>
</div>
<span class="comment-copy">What are you trying to accomplish? Run a bunch of commands and get their output into Python? Chain each command together? Run them in parallel?</span>
<span class="comment-copy">Run them sequentially, file 1, file2,...  I have an executable that I would like to run on several files, one at a time.</span>
<span class="comment-copy">Could we get an example of what the command strings look like as they're passed in to <code>check_output</code>? Apart from a typo in Popen (<code>stder</code>) I don't see any reason for it to be failing.</span>
<span class="comment-copy">Use subprocess' built-in check_output method for error checking</span>
<span class="comment-copy">@wils484, process.communicate() returns None for error.</span>
<span class="comment-copy">This produces the same result as the <code>subprocess.Popen()</code> in my code.  The strange thing is that it appears the executable does what it is supposed to do, but still returns a <code>1</code>.  Is it possible I need to wait on the subprocess?</span>
<span class="comment-copy">@Barbarossa If the subprocess finishes correctly, how does the process exit?</span>
<span class="comment-copy">Sorry, I should have mentioned.  I commented out the <code>if returncode != 0</code> section to see if it would run without verifying that the subprocess completed or not.  Everything seems to work if I do not worry about return codes, but I was under the assumption that a return code of 1 means there was an error.</span>
<span class="comment-copy">@Barbarossa I would try printing the returncode, to see what is actually happening with it. I can't imagine that it has a defined state until the command finishes.</span>
