<div class="post-text" itemprop="text">
<p>IÂ´m very new at Python and I had an idea for my very first project, but seems kind of complicated given my short experience. May be you guys can help me figure out how to design it, to make it simpler or more efficient. </p>
<p>I get these emails once a week, on an XLS file, with the entire week's operations of a business. Here's a small fictitious example on how the XLS looks like.</p>
<pre><code>                    03/12/2014 04/12/2014 05/12/2014

Initial cash           20000      19000        19800

account receivable      30         50         60 

account payable         40         60         90  

net cash              20000         19800       19500
</code></pre>
<p>What I intend to do is, read this XLS file every time I get it from an specific folder and build a daily operation database on a separate text file (I've chosen to output to a text file just because I think it's easier for me to write in than writing another XLS file with the XLWT module).</p>
<p>Output Text file should look like this (so you can have an idea), </p>
<pre><code>  20/10/2014 A/C 75200051479
</code></pre>
<p>Here are my questions:</p>
<ol>
<li><p>I want the program to check the last date on the last line from the text file, and compare dates with the first line is going to append from the XLS. Is this feasible, and how?   </p></li>
<li><p>Should I output to a tuple, a list or a simple string to make it easier for me to extract the date and to compare it to the XLSs first line to append. My example here is kind of a CSV file.</p></li>
<li><p>How should I think the order as for the code: open txt, get date data, compare dates with XLS with xlrd, get data from XLS with xlrd and append data to text file.</p></li>
</ol>
<p>Thank you for getting all the way through this post, I'd appreciate any kind of help since I'm starting with Python 3.3.5. </p>
</div>
<div class="post-text" itemprop="text">
<p>Break the problem into subgoals, and solve those first. For example:</p>
<ol>
<li><p>Read and print some kind of data from the XLS file (or converted CSV file) within python.</p></li>
<li><p>Read in the column and row headings and data into some kind of data structure (maybe list of lists, or perhaps an object per column.</p></li>
<li><p>Figure out how to read in and compare two dates.</p></li>
</ol>
<p>... etc. If you get stuck on something more specific and cannot find any related search results, then that might be a good time to turn back to stack overflow again.</p>
</div>
<div class="post-text" itemprop="text">
<p>I agree with kazagistar</p>
<p>Some hints to how I would do it....</p>
<p>The comparison problem is maybe best solved by reading everything into a dictionary. Lets say you set a key with a unique ID, like a timestamp. Then set the value for each key to be the entire row as a list, that you access by index position (basically column nr). Then update it against a sqllite database for storage and look-up.</p>
<p>Start with this <a href="http://www.youlikeprogramming.com/2012/03/examples-reading-excel-xls-documents-using-pythons-xlrd/" rel="nofollow">link</a> for xlrd:</p>
</div>
<span class="comment-copy">Hi, and welcome to StackOverflow. Unfortunately, this question is way to broad for SO. You should read through a couple of tutorials and learn the basics before you attempt to write something like this. Sadly, I can't remember any tutorials at the moment, but Google might help you. Please come back when you have a more specific question (you can find answers to most of the basic questions here without asking, give the search function a try).</span>
<span class="comment-copy">You can start here: <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/index.html</a></span>
<span class="comment-copy">I don't think this is broad at all. It's ambitiously complex for a first program, but that's not a problem.</span>
<span class="comment-copy">@Decency: Folks who have enough rep to cast a close vote can choose the reason "Too Broad". The text accompanying that close reason is: <i>There are either too many possible answers, or good answers would be too long for this format. Please add details to narrow the answer set or isolate an issue that can be answered in a few paragraphs.</i> I think that applies pretty well here. This question has a lot of subquestions, each of which <i>might</i> make a decent Stack Overflow question. Overall, OP seems to be asking "how do I design a program to do my task?", which is definitely too broad.</span>
<span class="comment-copy">Despite my comment to Decency, I don't want to discourage you. You've picked a nice language to learn. Python is very well suited to experimentation, working on small problems, and incrementally building up solutions to bigger problems. Since it seems you've chosen to "learn by doing" (which most would agree is a great way to learn), instead of asking things like "should I output to a tuple, a list, or a string?" just go ahead and <i>do</i> those things (all of them!), and develop your own feel for what works best in various situations. You're writing in Python, not carving in stone. Just try!</span>
