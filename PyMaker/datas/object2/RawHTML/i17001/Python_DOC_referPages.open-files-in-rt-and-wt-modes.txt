<div class="post-text" itemprop="text">
<p>Several times here on SO I've seen people using <code>rt</code> and <code>wt</code> modes for reading and writing files.</p>
<p>For example:</p>
<pre><code>with open('input.txt', 'rt') as input_file:
     with open('output.txt', 'wt') as output_file: 
         ...
</code></pre>
<p>I don't see the modes <a href="https://docs.python.org/2/library/functions.html#open">documented</a>, but since <code>open()</code> doesn't throw an error - looks like it's pretty much legal to use.</p>
<p>What is it for and is there any difference between using <code>wt</code> vs <code>w</code> and  <code>rt</code> vs <code>r</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>t</code> refers to the text mode.  There is no difference between <code>r</code> and <code>rt</code> or <code>w</code> and <code>wt</code> since text mode is the default.</p>
<p>Documented <a href="https://docs.python.org/3/library/functions.html#open" rel="noreferrer">here</a>:</p>
<pre class="lang-none prettyprint-override"><code>Character   Meaning
'r'     open for reading (default)
'w'     open for writing, truncating the file first
'x'     open for exclusive creation, failing if the file already exists
'a'     open for writing, appending to the end of the file if it exists
'b'     binary mode
't'     text mode (default)
'+'     open a disk file for updating (reading and writing)
'U'     universal newlines mode (deprecated)
</code></pre>
<p>The default mode is <code>'r'</code> (open for reading text, synonym of <code>'rt'</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>t</code> indicates text mode, meaning that <code>\n</code> characters will be translated to the host OS line endings when writing to a file, and back again when reading. The flag is basically just noise, since text mode is the default.</p>
<p>Other than <code>U</code>, those mode flags come directly from the standard C library's <a href="http://en.cppreference.com/w/c/io/fopen"><code>fopen()</code></a> function, a fact that is documented in the sixth paragraph of the <a href="https://docs.python.org/2/library/functions.html#open">python2 documentation</a> for <code>open()</code>.</p>
<p>As far as I know, <code>t</code> is not and has never been part of the C standard, so although many implementations of the C library accept it anyway, there's no guarantee that they all will, and therefore no guarantee that it will work on every build of python. That explains why the python2 docs didn't list it, and why it generally worked anyway. The <a href="https://docs.python.org/3/library/functions.html#open">python3 docs</a> make it official.</p>
</div>
<div class="post-text" itemprop="text">
<p>The 'r' is for reading, 'w' for writing and 'a' is for appending.</p>
<p>The 't' represents text mode as apposed to binary mode.</p>
<blockquote>
<p>Several times here on SO I've seen people using rt and wt modes for reading and writing files.</p>
</blockquote>
<p><strong>Edit:</strong> Are you sure you saw rt and not rb?</p>
<p>These functions generally wrap the <em>fopen</em> function which is described here:</p>
<p><a href="http://www.cplusplus.com/reference/cstdio/fopen/" rel="nofollow">http://www.cplusplus.com/reference/cstdio/fopen/</a></p>
<p>As you can see it mentions the use of b to open the file in binary mode.</p>
<p>The document link you provided also makes reference to this b mode:</p>
<p><em>Appending 'b' is useful even on systems that don’t treat binary and text files differently, where it serves as documentation.</em></p>
</div>
<div class="post-text" itemprop="text">
<p><code>t</code> indicates for <code>text mode</code></p>
<p><a href="https://docs.python.org/release/3.1.5/library/functions.html#open" rel="nofollow">https://docs.python.org/release/3.1.5/library/functions.html#open</a></p>
<p>on linux, there's no difference between text mode and binary mode,
however, in windows, they converts <code>\n</code> to <code>\r\n</code> when text mode.</p>
<p><a href="http://www.cygwin.com/cygwin-ug-net/using-textbinary.html" rel="nofollow">http://www.cygwin.com/cygwin-ug-net/using-textbinary.html</a></p>
</div>
<span class="comment-copy">Gotcha, it's documented in python3 docs. So, there is basically no difference between <code>wt</code> vs <code>w</code> and <code>rt</code> vs <code>r</code> - just <code>explicit is better than implicit</code>?</span>
<span class="comment-copy">@alecxe Right, since text mode is the default, there is no difference between <code>r</code> and <code>rt</code>...</span>
<span class="comment-copy">Note that <code>w</code> isn't always equal to <code>wt</code>. One such case is <a href="https://docs.python.org/3/library/gzip.html#gzip.open" rel="nofollow noreferrer"><code>gzip.open</code></a> where binary mode is default, and not text mode. Related question: <a href="http://stackoverflow.com/questions/42013083/python-3-gzip-open-and-modes" title="python 3 gzip open and modes">stackoverflow.com/questions/42013083/…</a></span>
<span class="comment-copy">Yeah, it was clearly <code>rt</code>, e.g. <a href="http://stackoverflow.com/questions/10971033/backporting-python-3-openencoding-utf-8-to-python-2" title="backporting python 3 openencoding utf 8 to python 2">stackoverflow.com/questions/10971033/…</a>, or <a href="http://stackoverflow.com/questions/17127853/are-openfile-wt-or-rt-different-objects" title="are openfile wt or rt different objects">stackoverflow.com/questions/17127853/…</a> etc. Thank you for the info, good to know.</span>
<span class="comment-copy">In the link that devnull provides the 't' text option is listed. What surprised me was the C++ link did not also mention that 't' option as I'm pretty sure I'd used the 'rt' and 'wt' options in C fopen code written years ago.</span>
<span class="comment-copy">Yeah, that's why I've asked - it was like a non-documented feature for me. Hope the thread would help someone in the future. Thanks again.</span>
<span class="comment-copy">In Python 3 there's an additional difference between text and binary file modes (on all platforms). In text mode, <code>read</code> returns Unicode strings. In binary mode, <code>read</code> returns a <code>bytes</code> instance. If you want to write Python 2 code with forwards compatibility in mind, you can use <code>io.open</code> rather than the standard <code>open</code> to get the Python 3 behavior (with <code>unicode</code> versus <code>str</code> instances).</span>
