<div class="post-text" itemprop="text">
<p>I'm connecting to the device using telnet. Once I connected, I need to enter user name <code>admin</code>, press enter <code>\n</code> and use blank password (enter again <code>\n</code>). After the described login process I should end up with the invitation <code>(prompt) #</code>.  I'm reading from the socket after each write. The program is below: </p>
<pre><code>import socket

s = socket.socket()
#Connecting using telnet
s.connect(('192.168.1.2',23))
a = s.recv(1000)
print 'a:', a
s.send('admin\n\n')
b = s.recv(1000)
print 'b:', b
c = s.recv(1000)
print 'c:', c
</code></pre>
<p>The output of the program is the following:</p>
<pre><code>a: ��
b: �������� ��!��"��'����#��User:
c: admin

Password:
(prompt) #
</code></pre>
<p><strong>QUESTION:</strong></p>
<p>Why do I need to do double read to receive all the information (<code>print b</code> and  <code>print c</code>) instead of just one read (<code>print b</code>)?</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of using raw sockets, you can use the <a href="https://docs.python.org/2/library/telnetlib.html" rel="nofollow">telnetlib</a>.</p>
<p>Typical usage:</p>
<pre><code>import getpass
import sys
import telnetlib

HOST = "localhost"
user = raw_input("Enter your remote account: ")
password = getpass.getpass()

tn = telnetlib.Telnet(HOST)

tn.read_until("login: ")
tn.write(user + "\n")
if password:
    tn.read_until("Password: ")
    tn.write(password + "\n")

tn.write("ls\n")
tn.write("exit\n")

print tn.read_all()
</code></pre>
<p>This will ask for your username and password, then use the entered information to authenticate to the server as seen here:</p>
<pre><code>tn.read_until("login: ")
tn.write(user + "\n")
if password:
    tn.read_until("Password: ")
    tn.write(password + "\n")
</code></pre>
<p>You can read the <a href="https://docs.python.org/2/library/telnetlib.html" rel="nofollow">telnetlib documentation for python 2.x here</a>.</p>
</div>
<span class="comment-copy"><code>recv()</code> receives <i>up to</i> the specified number of bytes. You need to read in a while loop until you receive the bytes you wanted.</span>
<span class="comment-copy"><code>print b</code> and <code>print c</code> is not double reading. It's writing to stdout. To receive different lines, try using a <code>sleep</code> call between recv calls.</span>
<span class="comment-copy">I called it so since they represent information I get with <code>b = s.recv(1000)</code> and <code>c = s.recv(1000)</code></span>
<span class="comment-copy">Is your socket blocking or non-blocking?</span>
<span class="comment-copy">I believe that it's blocking by default in Python, isn't it?</span>
<span class="comment-copy">Also, if you are using Python 3.x the code is very similar. Take a look at the Python 3.x documentation for telnetlib here: <a href="https://docs.python.org/3/library/telnetlib.html" rel="nofollow noreferrer">docs.python.org/3/library/telnetlib.html</a></span>
<span class="comment-copy">No problem with telnetlib, just wanted to understand why socket doesn't work as expected</span>
<span class="comment-copy">@Konstantin After a few cups of coffee i'll setup a telnet server to test your code with and i'll get back to you.</span>
<span class="comment-copy">@StianOK - spot the US developer:)</span>
<span class="comment-copy">@MartinJames I'm Norwegian...</span>
