<div class="post-text" itemprop="text">
<p>What I want to do is : </p>
<pre><code>if myObject:  # (not None)
    attr = myObject.someAttr
else:
    attr = ''
</code></pre>
<p>And avoiding if possible, ternary expressions. Is there something like : </p>
<pre><code>attr = myObject.someAttr || '' ? 
</code></pre>
<p>I was thinking of creating my own function such as : </p>
<pre><code>get_attr_or_default(instance,attr,default):
    if instance:
        return instance.get_attribute(attr)
    else:
        return default
</code></pre>
<p>But I would be surprised to hear that python doesn't have a shortcut for this.</p>
<p><strong>Synthesis :</strong> </p>
<p>I tried both of solutions and here's the result : </p>
<pre><code>class myClass(Models.model):
    myObject = model.foreignKey('AnotherClass')

class AnotherClass(Models.model):
    attribute = models.charField(max_length=100,default = '')


attr = myClass.myObject.attribute if myClass.myObject else '' # WORKED
attr = myClass.myObject and myClass.myObject.attribute # WORKED with NONE as result
attr = myClass.myObject.attribute or ''  # Raises an error (myObject doesn't have attribute attribute)
try: attr = myClass.myObject.attribute
except AttributeError: attr = ''  # Worked
</code></pre>
<p>Thanks for your answers ! </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions">6.11. Conditional expressions</a></p>
<pre><code>attr = myObject.someAttr if myObject else ""
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will set <code>attr</code> to <code>None</code> if <code>myObject</code> is <code>None</code> and <code>someAttr</code> if it a proper object.</p>
<pre><code>attr = myObject and myObject.someAttr
</code></pre>
<p>The evaluation on the right-hand side is only performed if required for the value, see <a href="http://www.itmaybeahack.com/homepage/books/nonprog/html/p05_control/p05_c03_advlogic.html#taking-other-short-cuts" rel="nofollow">Python Docs</a>, which say:</p>
<blockquote>
<p>In the case of and, if the left-hand side is equivalent to False, the
  right-hand side is not evaluated, and the left-hand value is returned.</p>
</blockquote>
<p>This is the same pattern as the <code>??</code> null-coalsecing operator that C# has, see <a href="http://msdn.microsoft.com/en-us/library/ms173224.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/ms173224.aspx</a>.</p>
<p>Note that this will not work well if you have a boolean operator on your object. If so, you need to use <code>myObject is not None</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Cool way (even w/out ternary expressions):</p>
<pre><code>attr = getattr(myObject or object(), 'someAttr', '')
</code></pre>
<p><a href="https://docs.python.org/3/library/functions.html?highlight=object#object" rel="nofollow"><code>object()</code></a> returns a new featureless object (quoting the documentation).</p>
<p><code>myObject or object()</code> will return <code>object()</code> if <code>myObject</code> is empty.</p>
<p>Logic:
</p>
<pre><code>    myObject is empty?
          / \
         /   \ N
        /     \ 
     Y /    getattr(myObject, ...) returns that attribute 
      /          
     /
    /
getattr(object(), ...) will produce '' (empty string)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>At best you can do:</p>
<pre><code>try:
    attr = myObject.someAttr
except AttributeError:
    attr = ''
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you really insist on doing things in strange, convoluted and tricky way, you could try:</p>
<pre><code>val = (myObject is not None and myObject.attr) or default
</code></pre>
<p>which is the old (and quite controversial) pre-ternary-expression idiom. Note that this will <strong>NOT</strong> work as expected if <code>bool(myObject.attr)</code> evals to <code>False</code> (which will be the case for most empty containers, empty strings, numeric zeros and quite a few non-builtin types).</p>
<p>TL;DR : use the ternary expression, that's what it's for.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you suggested yourself, but slightly different:</p>
<pre><code>if myObject:
    attr = myObject.someAttr or ''
</code></pre>
<p>If <code>myObject.someAttr</code> is <code>None</code> it will ignore it and put <code>''</code> in <code>attr</code></p>
</div>
<span class="comment-copy">why "avoiding if possible, ternary expressions" ??? That's exactly what they are for. Also, beware that <code>bool(myObject)</code> can eval to <code>False</code> even if <code>myObject is not None</code> - empty strings / lists / tuples / dicts / sets, numeric zeros (int / float etc) and quite a few other (non builtin) types have a false value in a boolean context.</span>
<span class="comment-copy">Well, I was told to avoid ternary expression if possible because it's harder to read but I realised that ternary expressions aren't so hard to understand (not like PHP for instance)</span>
<span class="comment-copy"><i>And avoiding if possible, ternary expressions</i></span>
<span class="comment-copy">@traceur it is first thing came to mind so I added this. Other answers better explains. :) thanks though.</span>
<span class="comment-copy">The most idiomatic answer so far.</span>
<span class="comment-copy">Am I alone in finding this really hard to read?</span>
<span class="comment-copy">@ebarr I think it's readable and self-explanatory</span>
<span class="comment-copy">@barr I used to find Python's and/or hard to parse in general because I've been doing C++ for 20 years, but I think that with good syntax highlighting the keyword pops out. Eventually, you get used to it, just like everything else.</span>
<span class="comment-copy">@Macke I didn't mean in that sense, I meant more in the sense that it wasn't immediately obvious to me what this would do in various circumstances.</span>
<span class="comment-copy">Macke instead of linking C# I would like to <i>suggest</i> you to add <i><code>In the case of and, if the left-hand side is equivalent to False, the right-hand side is not evaluated, and the left-hand value is returned.</code></i> from <a href="http://www.itmaybeahack.com/homepage/books/nonprog/html/p05_control/p05_c03_advlogic.html#taking-other-short-cuts" rel="nofollow noreferrer">Python docs</a></span>
<span class="comment-copy">This doesn't look good</span>
<span class="comment-copy">@traceur, What do you mean?</span>
<span class="comment-copy">Catch specific exception, not all.</span>
<span class="comment-copy">Don't use bare <code>except</code>, be more specific so <code>except AttributeError:</code>.</span>
<span class="comment-copy">@AlexThornton, Thank you very much. I have updated the answer accordingly</span>
<span class="comment-copy">This will fail if myObject is None.</span>
<span class="comment-copy">@hvb I assumed he'd still use the <code>if myObject:</code> check. I'll make an edit</span>
