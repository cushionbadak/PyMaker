<div class="post-text" itemprop="text">
<p>Say I have a master script that runs weekly via cronjob. This script imports a bunch of different functions from other Python files and runs their functions in sequence. I'd <em>also</em> like to be able to run a couple of the functions the master script runs but ad-hoc from the Terminal. What is the best way to construct both the master script and the individual files containing functions to be run? Example of current situation:</p>
<p><strong>master_script.py</strong></p>
<pre><code>import do_bulk_things as b
import do_another_thing as a

b.do_first_bulk_thing()
b.do_second_bulk_thing()
if b.do_third_bulk_thing():
    a.my_other_thing()
</code></pre>
<p><strong>do_bulk_thinkgs.py</strong></p>
<pre><code>def  do_first_bulk_thing():
    # Code

def do_second_bulk_thing():
    # Code

def do_third_bulk_thing():
    # Code
    if successful:
        return True
</code></pre>
<p><strong>do_another_thing.py</strong></p>
<pre><code>def my_other_thing():
    # Code
</code></pre>
<p>If I want to run <em>my_other_thing()</em> without running the entire <strong>master_script.py</strong>, how and where should I be defining and calling everything? The imported files just have function definitions so I can't actually execute any function by running <code>python do_another_thing.py</code>; and I also shouldn't execute the function <em>my_other_thing()</em> within <strong>do_another_thing.py</strong> because then it will run on import. It seems to me that I need to restructure things, but I need some best practices.</p>
</div>
<div class="post-text" itemprop="text">
<p>Going to attempt to answer my own question after <a href="http://youtu.be/tKTZoB2Vjuk?t=11m52s" rel="nofollow noreferrer">some more research</a>, which then <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do">lead me here</a>. Execute the defined and imported functions within <strong>do_bulk_thinks.py</strong> and <strong>do_another_thing.py</strong>, but use <code>__main__</code> to stop the functions from running when they're imported. So <strong>master_script.py</strong> remains unchanged, but the other files would have:</p>
<p><strong>do_bulk_things.py</strong></p>
<pre><code>def  do_first_bulk_thing():
    # Code

def do_second_bulk_thing():
    # Code

def do_third_bulk_thing():
    # Code
    if successful:
        return True

if __name__ == '__main__':
    do_first_bulk_thing()
    do_second_bulk_thing()
    do_third_bulk_thing()
</code></pre>
<p>And <strong>do_another_thing.py</strong></p>
<pre><code>def my_other_thing():
    # Code

if __name__ == '__main__':
    my_other_thing()
</code></pre>
</div>
<span class="comment-copy">Do you know how to use <code>sys.argv</code> and <code>argparse</code>? You could have <code>master_script.py</code> run your standard set of functions as a function, e.g. <code>standard()</code> by default (when no command line arguments are received) and then if you provide some command line arguments, have it run a different function <code>other_things()</code>. If that sounds useful and you don't know how to do it I will write up an answer. I'm assuming you do not want to do these ad-hoc activities from a python session. That would be easier and a different solution.</span>
<span class="comment-copy">@kobejohn I know what <code>argv</code> does, but haven't used it or <code>argparse</code> before. <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">Documentation</a> on <code>argparse</code> is more than enough to show me the way. If using cmd line arguments is a better practice or better way than <code>__main__</code> for a particular reason then I'd like to hear why. It seems like using args would require a more modification of the existing code but would in the end provide more flexibility down the road.</span>
<span class="comment-copy">If you can use a python session to do your ad-hoc work, then yes, <code>__main__</code> detection was the other solution I was talking about and it's easier than worrying about parsing command line arguments. Because you are working with cron-jobs I thought maybe constraints prevent you from working in a python session. I'll comment on your answer if I have any improvements.</span>
<span class="comment-copy">You've got the main idea. Actually in this particular example, the <code>__main__</code> detection is not necessary because you are only defining functions. Nothing will change for you. However if you have some other code inside of <code>bulk</code> or <code>another</code>, then that could be wrapped up in a <code>main()</code> to avoid being run when you just want to import the functions.</span>
<span class="comment-copy">Thanks for the feedback!</span>
