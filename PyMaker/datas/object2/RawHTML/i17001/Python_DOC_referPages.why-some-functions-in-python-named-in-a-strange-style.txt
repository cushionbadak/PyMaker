<div class="post-text" itemprop="text">
<p>This seems to occur a lot, and was wondering if this was a requirement in the Python language, or merely a matter of convention?</p>
<p>Also, could someone name and explain which functions tend to have the underscores, and why (<code>__init__</code>, for instance)?</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">Python PEP 8 -- Style Guide for Python Code</a>:</p>
<blockquote>
<h3><a href="https://www.python.org/dev/peps/pep-0008/#descriptive-naming-styles" rel="noreferrer">Descriptive: Naming Styles</a></h3>
<p>The following special forms using leading or trailing underscores are
  recognized (these can generally be combined with any case convention):</p>
<ul>
<li><p><code>_single_leading_underscore</code>: weak "internal use" indicator. E.g. <code>from M import *</code> does not import objects whose name starts with an underscore.</p></li>
<li><p><code>single_trailing_underscore_</code>: used by convention to avoid conflicts with Python keyword, e.g.</p>
<p><code>Tkinter.Toplevel(master, class_='ClassName')</code></p></li>
<li><p><code>__double_leading_underscore</code>: when naming a class attribute, invokes name mangling (inside class FooBar, <code>__boo</code> becomes <code>_FooBar__boo</code>; see below).  </p></li>
<li><p><code>__double_leading_and_trailing_underscore__</code>: "magic" objects or attributes that live in user-controlled namespaces.  E.g. <code>__init__</code>,
  <code>__import__</code> or <code>__file__</code>.  Never invent such names; only use them as documented.</p></li>
</ul>
</blockquote>
<p>Note that names with double leading and trailing underscores are essentially reserved for Python itself: "Never invent such names; only use them as documented".</p>
</div>
<div class="post-text" itemprop="text">
<p>The other respondents are correct in describing the double leading and trailing underscores as a naming convention for "special" or "magic" methods.</p>
<p>While you can call these methods directly (<code>[10, 20].__len__()</code> for example), the presence of the underscores is a hint that these methods are intended to be invoked indirectly (<code>len([10, 20])</code> for example).  Most python operators have an associated "magic" method (for example, <code>a[x]</code> is the usual way of invoking <code>a.__getitem__(x)</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>Names surrounded by double underscores are "special" to Python. They're listed in the <a href="https://docs.python.org/3/reference/datamodel.html#special-method-names" rel="nofollow noreferrer">Python Language Reference, section 3, "Data model"</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Actually I use _ method names when I need to differ between parent and child class names. I've read some codes that used this way of creating parent-child classes. As an example I can provide this code: </p>
<pre><code>class ThreadableMixin:
   def start_worker(self):
       threading.Thread(target=self.worker).start()

   def worker(self):
      try:
        self._worker()
    except tornado.web.HTTPError, e:
        self.set_status(e.status_code)
    except:
        logging.error("_worker problem", exc_info=True)
        self.set_status(500)
    tornado.ioloop.IOLoop.instance().add_callback(self.async_callback(self.results))
</code></pre>
<p>...</p>
<p>and the child that have a _worker method </p>
<pre><code>class Handler(tornado.web.RequestHandler, ThreadableMixin):
   def _worker(self):
      self.res = self.render_string("template.html",
        title = _("Title"),
        data = self.application.db.query("select ... where object_id=%s", self.object_id)
    )
</code></pre>
<p>...</p>
</div>
<div class="post-text" itemprop="text">
<p>This convention is used for special variables or methods (so-called “magic method”) such as__init__ , <strong>len</strong>. These methods provides special syntactic features or does special things. </p>
<p>For example, <strong>file</strong> indicates the location of Python file, <strong>eq</strong> is executed when a == b expression is excuted. </p>
<p>A user of course can make custom special method, it is very rare case, but often might modify the some built-in special methods. (e.g. You should initialize the class with <strong>init</strong> that will be executed at first when a instance of class is created.)</p>
<pre><code>   class A:
      def __init__(self, a): # use special method '__init__' for initializing
        self.a = a
      def __custom__(self): # custom special method. you might almost do not use it
        pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Rear Double Underscore (Name Mangling)/ From the Python Docs</p>
<blockquote>
<p>Any identifier of the form __spam (at least two leading underscores,
  at most one trailing underscore) is textually replaced with
  _classname__spam, where classname is the current class name with leading underscore(s) stripped. This mangling is done without regard
  to the syntactic position of the identifier, so it can be used to
  define class-private instance and class variables, methods, variables
  stored in globals, and even variables stored in instances. private to
  this class on instances of other classes.</p>
<p>Name mangling is intended to give classes an easy way to define
  “private” instance variables and methods, without having to worry
  about instance variables defined by derived classes, or mucking with
  instance variables by code outside the class. Note that the mangling
  rules are designed mostly to avoid accidents; it still is possible for
  a determined soul to access or modify a variable that is considered
  private.</p>
</blockquote>
</div>
<span class="comment-copy">@AustinHenley: Not for double underscores before <i>and after</i> the name. You're thinking of underscores solely <i>before</i> the name.</span>
<span class="comment-copy">Related: <a href="http://programmers.stackexchange.com/questions/228216/what-is-the-historical-reason-why-python-uses-the-double-underscore-for-class-pr">"What is the historical reason why Python uses the double underscore for Class Private members?"</a>.</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/1301346/what-is-the-meaning-of-a-single-and-a-double-underscore-before-an-object-name">What is the meaning of a single- and a double-underscore before an object name?</a></span>
<span class="comment-copy">why would i get downvoted if I ask such a question</span>
<span class="comment-copy">Raymond also explains why you'd want the name mangling behavior starting at around 34 minutes into this video: <a href="https://www.youtube.com/watch?v=HTLu2DFOdTg" rel="nofollow noreferrer">youtube.com/watch?v=HTLu2DFOdTg</a></span>
<span class="comment-copy">So the choice between the single leading underscore and double leading underscore in a name is a bit like choosing between protected and private in C++ and Java? _single_leading_underscore can be changed by children, but __double_leading_underscore can't?</span>
<span class="comment-copy"><code>__double_leading_underscore</code> is <i>still public</i>, the variable is simply renamed to avoid a clash.</span>
<span class="comment-copy">@johncip Thanks for the video link. Very helpful.</span>
