<div class="post-text" itemprop="text">
<p>I have the following code that prints out the least amount of bills needed to form a given amount of dollars:</p>
<pre><code>dollars = 568

billSelection = [100,50,20,10,5,1]
def thingy(bill):
    global dollars
    numOfBills = dollars // bill
    dollars -= numOfBills * bill
    return numOfBills

result = list(map(thingy,billSelection))

print(result)
print(sum(result))
</code></pre>
<p>I would like to pass 'dollars' into the function in order to avoid the ugly global variable. It works if I set dollars as a list with 1 element and write dollars[0] everywhere else but this is also not optimal. Any suggestions for how to do this cleanly? Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>While you can set up a <code>map</code> call to pass in more than one variable to each call of the function, it won't really help you here. That's because you want the <code>dollars</code> value to be both read and modified by the function. The only way you could make that work is to have it both be an argument, and a return value, and most of the ways to give it to <code>map</code> won't let you use the return value as the new <code>dollars</code> value for the next call.</p>
<p>If you don't mind dropping <code>map</code> for an explicit loop, you could make it work:</p>
<pre><code>def thingy(dollars, bill):
    numOfBills = dollars // bill
    dollars -= numOfBills * bill
    return dollars, numOfBills  # return a two-tuple

dollars = 568
billSelection = [100,50,20,10,5,1]
result = []

for bill in billSelection:                        # use an explicit loop instead of map
    dollars, bill_count = thingy(dollars, bill)   # so we can update dollars
    result.append(bill_count)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>map</code> can take multiple arguments as long as they're all iterable. One quick and dirty way to pass a constant value is to put it inside a list of the same size as the other iterable, like this:</p>
<pre><code>dollars = 568
billSelection = [100,50,20,10,5,1]

def thingy(bill, dollars):
    # function logic goes here

result = map(thingy, billSelection, [dollars]*len(billSelection))
</code></pre>
</div>
<span class="comment-copy">This is awesome. Thanks :D</span>
<span class="comment-copy">While this answers the question posed in the title, it won't actually calculate the desired result. The <code>thingy</code> function is modifying <code>dollars</code> currently, so if you want <code>map</code> to work with multiple arguments, you need some way to get the latest value into the list you're using for the second argument.</span>
<span class="comment-copy">Correct, I didn't see that OP was changing the value of dollars inside the function.</span>
