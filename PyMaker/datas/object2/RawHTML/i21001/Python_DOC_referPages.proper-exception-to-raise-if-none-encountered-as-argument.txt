<div class="post-text" itemprop="text">
<p>What is the "proper" exception class to raise when one of my functions detects <code>None</code> passed where an argument value is required?  For instance:</p>
<pre><code> def MyFunction(MyArg1, MyArg2):

     if not MyArg2:
          raise ?Error?
</code></pre>
<p>I think I've seen <code>TypeError</code> used here (and it's true that I'm receiving a <code>NoneType</code> where some other type is expected) but that doesn't strike me as quite right for this situation where I think the Exception could be more explicit.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no "invalid argument" or "null pointer" built-in exception in Python.  Instead, most functions raise <code>TypeError</code> (invalid type such as <code>NoneType</code>) or <code>ValueError</code> (correct type, but the value is outside of the accepted domain).</p>
<p>If your function requires an object of a particular class and gets <code>None</code> instead, it should probably raise <code>TypeError</code> as you pointed out.  In this case, you should check for <code>None</code> explicitly, though, since an object of correct type may evaluate to boolean <code>False</code> if it implements <code>__nonzero__</code>/<code>__bool__</code>:</p>
<pre><code>if MyArg2 is None:
    raise TypeError
</code></pre>
<p><strong>Python docs</strong>:</p>
<ul>
<li><code>TypeError</code> <a href="https://docs.python.org/2/library/exceptions.html#exceptions.TypeError" rel="noreferrer">python2</a> / <a href="https://docs.python.org/3/library/exceptions.html#TypeError" rel="noreferrer">python3</a></li>
<li><code>ValueError</code> <a href="https://docs.python.org/2/library/exceptions.html#exceptions.ValueError" rel="noreferrer">python2</a> / <a href="https://docs.python.org/3/library/exceptions.html#ValueError" rel="noreferrer">python3</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>As others have noted, <code>TypeError</code> or <code>ValueError</code> would be natural. If it doesn't seem specific enough, you could subclass whichever of the two exceptions is a better fit. This allows consistent handling of invalid arguments for a broad class of functions while also giving you more detail for the particular function. </p>
</div>
<div class="post-text" itemprop="text">
<p>Most of the python function raises <code>TypeError</code> if <code>None</code> is passed as an argument. Take any function say <code>chr(None)</code> and see it raises <code>TypeError</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Just use assert:</p>
<pre><code>assert type(MyArg2) == int
</code></pre>
<p>Or alternatively:</p>
<pre><code>assert type(MyArg2) != None
</code></pre>
<p>This will prevent someone from passing you the wrong type, as well as dealing with the None issue. It will return an <code>AssertionError</code>, <a href="http://docs.python.org/reference/simple_stmts.html#the-assert-statement" rel="nofollow">as per the docs.</a></p>
</div>
<span class="comment-copy">You shouldn't be doing this kind of argument checking at all.  Simply let it fail further down with whatever exception it fails with.  (And if you really <i>must</i> do this, <code>TypeError</code> is the correct exception.  Add an explanation string to make it more specific.)</span>
<span class="comment-copy">I would probably raise a <code>TypeError</code>, have a look at the built-in python exceptions documentation: <a href="http://docs.python.org/library/exceptions.html" rel="nofollow noreferrer">docs.python.org/library/exceptions.html</a></span>
<span class="comment-copy">@Sven: I usually do as you suggest, but this is a special case in which I do want this checking done.</span>
<span class="comment-copy">This is completely contrary the duck-typing spirit of Python.  It imposes unnecessary restrictions on the applicability of the code. (Not my downvote, btw)</span>
<span class="comment-copy">@SvenMarnach  Hmm, I've used it successfully <i>because of</i> the duck typing. Namely, the duck typing has hidden <i>why</i> something is failing. If you find yourself needing to say this and such must be so before we begin, then assert is merely a convenient way to do so. For instance, write a function with a for loop over an input variable. It is assumed to be a list of file names for globbing. What happens if instead of passing a list with one item, you pass a string with glob chars?</span>
<span class="comment-copy">The problem with the assert is that it ignores values that could serve perfectly well as (in this example) integers, including long integers, floats (under many circumstances, e.g. <code>range()</code>), and any object that implements the <code>__int__()</code> special method. A better approach, if you feel you need this sort of thing, might be to simply try to coerce the argument to integer early in the method, e.g. <code>MyArg2 = int(MyArg2)</code>.</span>
<span class="comment-copy">@kindall Perhaps, but you will note that the asker did not specify what it was he wanted besides not None. I just gave him an option I used previously. If his scope is broader than mine was, then I would agree with you. If he wanted a specific type, then <i>asserting what you want</i> is better than <i>defining errors you know</i>.</span>
<span class="comment-copy">If he wanted "not <code>None</code>", then suggest he assert that, rather than asserting that it's an <code>int</code>.</span>
