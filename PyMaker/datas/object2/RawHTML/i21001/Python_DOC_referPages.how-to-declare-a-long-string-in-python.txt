<div class="post-text" itemprop="text">
<p>I have a really long string in python:</p>
<pre><code>long_string = '
this is a really
really
really
long
string
'
</code></pre>
<p>However, since the string spans multiple lines, python doesn't recognize this as a string. How do I fix this?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>long_string = '''
this is a really
really
really
long
string
'''
</code></pre>
<p><code>"""</code> does the same thing.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can also do this, which is nice because you have better control over the whitespace inside of the string:</p>
<pre><code>long_string = (
    'Lorem ipsum dolor sit amet, consectetur adipisicing elit, '
    'sed do eiusmod tempor incididunt ut labore et dolore magna '
    'aliqua. Ut enim ad minim veniam, quis nostrud exercitation '
    'ullamco laboris nisi ut aliquip ex ea commodo consequat. '
    'Duis aute irure dolor in reprehenderit in voluptate velit '
    'esse cillum dolore eu fugiat nulla pariatur. Excepteur sint '
    'occaecat cupidatat non proident, sunt in culpa qui officia '
    'deserunt mollit anim id est laborum.'
)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use either</p>
<pre><code>long_string = 'fooo' \
'this is really long' \
'string'
</code></pre>
<p>or if you need linebreaks</p>
<pre><code>long_string_that_has_linebreaks = '''foo
this is really long
'''
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I was also able to make it work like this.</p>
<pre><code>long_string = '\
this is a really \
really \
really \
long \
string\
'
</code></pre>
<p>I can't find any online references to this way of constructing a multi-line string. I don't know if it's correct. My suspicion is that python is ignoring the newline because of the backslash? Maybe someone can shed light on this.</p>
</div>
<span class="comment-copy">Put it in <code>"""..."""</code>. <code>"""long-long-string"""</code></span>
<span class="comment-copy">Aren't triple quotes reserved for doc strings?</span>
<span class="comment-copy">@ffledgling it's reserved for multiline strings, which are used for doc strings</span>
<span class="comment-copy">In cases where indenting the string's lines makes the code more readable, you can use <code>dedent</code> to remove the indentation in the resulting string.</span>
<span class="comment-copy">Indeed, this is one of the things that I ran into when I wanted to create a tuple with one element ;)</span>
<span class="comment-copy">This appears to not work the moment you need any evaluated value that isn't a string. Typically for me, when using list comprehension to implode complex data into a string; and I have not found a way to combine such an expression with this string definition style. :(</span>
<span class="comment-copy">You can also use long_string = textwrap.dedent('''long string with each line indented''') <a href="https://docs.python.org/3/library/textwrap.html#textwrap.dedent" rel="nofollow noreferrer">docs.python.org/3/library/textwrap.html#textwrap.dedent</a></span>
<span class="comment-copy">Also, for your first option if you have parentheses round the string you don't need the backslashes. However notice the big drawback with using string concatenation: unless you are really careful about spaces you could end up with <code>"fooothis is really longstring"</code> which probably wasn't what you wanted.</span>
<span class="comment-copy">Also, Sublime Text (Build 3114) seems to have trouble with syntax highlighting this.</span>
