<div class="post-text" itemprop="text">
<p>In PHP there a function called <a href="http://php.net/isset"><code>isset()</code></a> to check if something (like an array index) exists and has a value. How about Python?</p>
<p>I need to use this on arrays because I get "IndexError: list index out of range" sometimes.</p>
<p>I guess I <em>could</em> use try/catching, but that's a last resort.</p>
</div>
<div class="post-text" itemprop="text">
<p>Look before you leap (<a href="https://docs.python.org/3/glossary.html#term-lbyl" rel="nofollow noreferrer">LBYL</a>):</p>
<pre><code>if idx &lt; len(array):
    array[idx]
else:
    # handle this
</code></pre>
<p>Easier to ask forgiveness than permission (<a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow noreferrer">EAFP</a>):</p>
<pre><code>try:
    array[idx]
except IndexError:
    # handle this
</code></pre>
<p>In Python, EAFP seems to be the popular and preferred style (because it's generally more reliable).  So, all other things being equal, I'll recommend to go for the <code>try</code>/<code>except</code> version in this use case - don't see it as a "last resort".  </p>
<p>This excerpt is from the official docs linked above, endorsing using try/except for flow control:</p>
<blockquote>
<p>This common Python coding style assumes the existence of valid keys or attributes and catches exceptions if the assumption proves false. <strong>This clean and fast style is characterized by the presence of many try and except statements.</strong> </p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<h2>EAFP vs. LBYL</h2>
<p>I understand your dilemma, but Python is not PHP and coding style known as <strong>Easier to Ask for Forgiveness than for Permission</strong> (or <a href="http://docs.python.org/glossary.html#term-eafp" rel="nofollow noreferrer"><strong>EAFP</strong></a> in short) is <strong>a common coding style in Python</strong>.</p>
<p>See the source (from <a href="http://docs.python.org/glossary.html#term-eafp" rel="nofollow noreferrer">documentation</a>):</p>
<blockquote>
<p><strong>EAFP</strong> - Easier to ask for forgiveness than permission. This common Python coding style assumes the existence of valid keys or attributes and catches exceptions if the assumption proves false. This clean and fast style is characterized by the presence of many try and except statements. The technique contrasts with the LBYL style common to many other languages such as C.</p>
</blockquote>
<p>So, basically, <strong>using try-catch statements here is not a last resort; it is a common practice</strong>.</p>
<h2>"Arrays" in Python</h2>
<p>PHP has associative and non-associative arrays, Python has lists, tuples and dictionaries. Lists are similar to non-associative PHP arrays, dictionaries are similar to associative PHP arrays.</p>
<p>If you want to check whether "key" exists in "array", you must first tell what type in Python it is, because they throw different errors when the "key" is not present:</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; l = [1,2,3]
&gt;&gt;&gt; l[4]

Traceback (most recent call last):
  File "&lt;pyshell#2&gt;", line 1, in &lt;module&gt;
    l[4]
IndexError: list index out of range
&gt;&gt;&gt; d = {0: '1', 1: '2', 2: '3'}
&gt;&gt;&gt; d[4]

Traceback (most recent call last):
  File "&lt;pyshell#6&gt;", line 1, in &lt;module&gt;
    d[4]
KeyError: 4
</code></pre>
<p>And if you use EAFP coding style, you should just catch these errors appropriately.</p>
<h2>LBYL coding style - checking indexes' existence</h2>
<p>If you insist on using LBYL approach, these are solutions for you:</p>
<ul>
<li><p><strong>for lists</strong> just check the length and if <code>possible_index &lt; len(your_list)</code>, then <code>your_list[possible_index]</code> exists, otherwise it doesn't:</p>
<pre><code>&gt;&gt;&gt; your_list = [0, 1, 2, 3]
&gt;&gt;&gt; 1 &lt; len(your_list) # index exist
True
&gt;&gt;&gt; 4 &lt; len(your_list) # index does not exist
False
</code></pre></li>
<li><p><strong>for dictionaries</strong> you can use <code>in</code> keyword and if <code>possible_index in your_dict</code>, then <code>your_dict[possible_index]</code> exists, otherwise it doesn't:</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; your_dict = {0: 0, 1: 1, 2: 2, 3: 3}
&gt;&gt;&gt; 1 in your_dict # index exists
True
&gt;&gt;&gt; 4 in your_dict # index does not exist
False
</code></pre></li>
</ul>
<p>Did it help?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>`e` in ['a', 'b', 'c']  # evaluates as False
`b` in ['a', 'b', 'c']  # evaluates as True
</code></pre>
<p><strong>EDIT</strong>: With the clarification, new answer:</p>
<p>Note that PHP arrays are vastly different from Python's, combining arrays and dicts into one confused structure. Python arrays always have indices from <code>0</code> to <code>len(arr) - 1</code>, so you can check whether your index is in that range. <code>try/catch</code> is a good way to do it pythonically, though.</p>
<p>If you're asking about the hash functionality of PHP "arrays" (Python's <code>dict</code>), then my previous answer still kind of stands:</p>
<pre><code>`baz` in {'foo': 17, 'bar': 19}  # evaluates as False
`foo` in {'foo': 17, 'bar': 19}  # evaluates as True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>has_key</code> is fast and efficient.</p>
<p>Instead of array use an hash:</p>
<pre><code>valueTo1={"a","b","c"}

if valueTo1.has_key("a"):
        print "Found key in dictionary"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may be able to use the built-in function <code>dir()</code> to produce similar behavior to PHP's <code>isset()</code>, something like:</p>
<pre><code>if 'foo' in dir():  # returns False, foo is not defined yet.
    pass

foo = 'b'

if 'foo' in dir():  # returns True, foo is now defined and in scope.
   pass
</code></pre>
<p><code>dir()</code> returns a list of the names in the current scope, more information can be found here: <a href="http://docs.python.org/library/functions.html#dir" rel="nofollow">http://docs.python.org/library/functions.html#dir</a>.</p>
</div>
<span class="comment-copy"><a href="http://docs.python.org/glossary.html#term-eafp" rel="nofollow noreferrer">EAFP:</a> It's easier to ask for forgiveness than it is to get permission.</span>
<span class="comment-copy">Your question asks about PHP arrays (which are roughly dictionaries in Python) but your error message references a list operation. A code sample would probably clear up some of the confusion.</span>
<span class="comment-copy">Also: "last resort". "Last revert" is something rather different.</span>
<span class="comment-copy">The thing is I was writing a script to convert a Google Docs spreadsheet matrix exported from CSV into something else. Sometimes if the last (most right) column was empty Google would ignore the last comma indicating the final column.</span>
<span class="comment-copy">A bunch of other answers look correct as well but this one is concise and informative. Then again I never ask for forgiveness.</span>
<span class="comment-copy">Sometimes you just want to figure out if an index exists or which index it is (python lacks a switch statement of course). Also I'm not sure this is a race condition but I'm not an expert. Isn't a race condition when the act of doing something generates potential for some sort of looping madness? if I just check if an index exists this shouldn't affect the race-iness of the threads. I guess my actions after the check could affect other threads.</span>
<span class="comment-copy">On the other hand (OTOH), EAFP is problematic because it entails traversing the call stack when an error occurs.</span>
<span class="comment-copy">Great answer. Is there any reason why undefined properties or indexes simply don't return as <code>undefined</code> or bool <code>false</code> in Python? Other language interpreters return on these events and I'm just curious why Python doesn't.</span>
<span class="comment-copy">@65Fbef05: I believe it is a design decision, but in fact you are able to do <code>my_dict.get('some_index', False)</code> for example, so you are not so limited. Also should Python really return <code>False</code> when you are trying to get some entry from the dictionary, when it does not exist? I believe no, because it would be hard to find the problem in the code, if storing <code>False</code> and not storing anything for some specific key gives the same result. I believe this quite a good idea to throw error when something you wanted is not here and you did not explicitly say to deal with such case (eg. by using <code>get()</code>).</span>
<span class="comment-copy">One specific case where I think returning <code>False</code> would prove more helpful than throwing an error is when you are unsure if an index exists, like in the case of optional CLI arguments where the practical exception to your application logic only happens when there IS a value.</span>
<span class="comment-copy">@65Fbef05: There is no need for throwing exceptions when some specific CLI arguments exist or not, you can just use <a href="http://docs.python.org/library/argparse.html#module-argparse" rel="nofollow noreferrer"><code>argparse</code> module</a>. And I do not remember any language that actually throws an error when there is a value it looks for. Or I misunderstood your comment ;) Anyway, as I said, you can support default argument by using something similar to <code>cli_args.get('option1', False)</code>.</span>
<span class="comment-copy">I didn't necessarily mean "throw an error" when a value is found to exists. I meant more or less "do something different" than the standard routine.</span>
<span class="comment-copy">Hm? I was asking about if an indexed element exists in the array, not if a value exists in the array.</span>
<span class="comment-copy">@Jonny: This is one of the differences between PHP and Python. A PHP arrays is a <a href="http://docs.python.org/library/stdtypes.html#dict" rel="nofollow noreferrer">Dictionary</a> in Python. In python a <a href="http://docs.python.org/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange" rel="nofollow noreferrer">List</a> just has integer indexes.</span>
<span class="comment-copy"><code>AttributeError: 'set' object has no attribute 'has_key' </code></span>
