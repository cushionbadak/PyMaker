<div class="post-text" itemprop="text">
<p>I have a python dictionary which contains items that have non-english characters. When I print the dictionary, the python shell does not properly display the non-english characters. How can I fix this?</p>
</div>
<div class="post-text" itemprop="text">
<p>When your application prints <code>hei\xdfen</code> instead of <code>heißen</code>, it means you are not actually printing the actual unicode string, but instead, on the string representation of the unicode object.</p>
<p>Let us assume your string ("heißen") is stored into variable called <code>text</code>. Just to make sure where you are at, check out the type of this variable by calling:</p>
<pre><code>&gt;&gt;&gt; type(text)
</code></pre>
<p>If you get <code>&lt;type 'unicode'&gt;</code>, it means you are not dealing with a string, but instead a <code>unicode</code> object.</p>
<p>If you do the intuive thing and try to print to text by invoking <code>print(text)</code> you won't get out the actual text ("heißen") but instead, <em>a string representation of a unicode object</em>.</p>
<p><strong>To fix this, you need to know which encoding your terminal has and print out your unicode object encoded according to the given encoding</strong>.</p>
<p>For instance, if your terminal uses UTF-8 encoding, you can print out a string by invoking:</p>
<pre><code>text.encode('utf-8')
</code></pre>
<p>That's for the basic concepts. Now let me give you a more detailed example. Let us assume we have a source code file storing your dictionary. Like:</p>
<pre><code>mydict = {'heiße': 'heiße', 'äää': 'ööö'}
</code></pre>
<p>When you type <code>print mydict</code> you will get <code>{'\xc3\xa4\xc3\xa4\xc3\xa4': '\xc3\xb6\xc3\xb6\xc3\xb6', 'hei\xc3\x9fe': 'hei\xc3\x9fe'}</code>. Even <code>print mydict['äää']</code> doesn't work: it results in something like <code>├Â├Â├Â</code>. The nature of the problem is revealed by trying out <code>print type(mydict['äää'])</code> which will tell you that you are dealing with a <code>string</code> object.</p>
<p>In order to fix the problem, you first need to decode the string representation from your source code file's charset to unicode object and then represent it in the charset of your terminal. For individual dict items this can be achived by:</p>
<pre><code>print unicode(mydict, 'utf-8')
</code></pre>
<p>Note that if default encoding doesn't apply to your terminal, you need to write:</p>
<pre><code>print unicode(mydict, 'utf-8').encode('utf-8')
</code></pre>
<p>Where the outer encode method specifies the encoding according to your terminal.</p>
<p>I really really urge you to read through Joel's <a href="http://www.joelonsoftware.com/articles/Unicode.html" rel="noreferrer">"The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)"</a>. Unless you understand how character sets work, you will stumble across problems similar to this again and again. </p>
</div>
<div class="post-text" itemprop="text">
<p>Actually, that's not really a Python-related issue.</p>
<p>Your environment variables (I'm assuming that you're on either Linux or Mac) should have the UTF-8 character encoding active.</p>
<p>You should be able to put these in your ~/.profile (or ~/.bashrc) file :</p>
<pre><code>export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8
</code></pre>
<p>-edit-</p>
<p>Actually, Mac uses UTF-8 by default. This is a Windows/Linux issue.</p>
<p>-edit 2-</p>
<p>You should, of course, always use unicode strings, a unicode editor and a unicode doctype. But I'm assuming that you know that :-)</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 3.0 have default unicode strings and in python 2.x you have to prefix string whit u</p>
<pre><code>u"汉字/漢字 chinese"  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In python terminal,</p>
<pre><code>    &gt;&gt;&gt; "heißen"
    is equivalent to
    &gt;&gt;&gt; print repr("heißen")
</code></pre>
<p>Python documentation on repr in python 2
<a href="http://docs.python.org/2/library/functions.html#func-repr" rel="nofollow">http://docs.python.org/2/library/functions.html#func-repr</a>
is scarse.</p>
<p>As can be seen, both give you 'byte-based' representation of byte-string "heißen", where all bytes, that are more then 127 are \x encoded. This is where from you get</p>
<pre><code>    'hei\xc3\x9fen'
</code></pre>
<p>unicode's repr() is not much more helpful. It correctly shows 'ß' as a single unincode cherecter '\xdf', but is still unreadable.</p>
<p>Practical solution I found is to use python 3.</p>
<p><a href="http://docs.python.org/3/library/functions.html#repr" rel="nofollow">http://docs.python.org/3/library/functions.html#repr</a></p>
<p>the page also says</p>
<pre><code>    ascii(object)
    As repr(), return a string containing a printable representation of an
    object, but escape the non-ASCII characters in the string returned by
    repr() using \x, \u or \U escapes. This generates a string similar to
    that returned by repr() in Python 2.
</code></pre>
<p>which explains things a little bit.</p>
</div>
<span class="comment-copy">Can you give an example?</span>
<span class="comment-copy">Do you know about character encodings? If not (heck, even if you think you do), you should read <a href="http://www.joelonsoftware.com/articles/Unicode.html" rel="nofollow noreferrer">The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets</a> before trying to progress.</span>
<span class="comment-copy">This sounds to me like it may not be a problem with Python but your terminal application.  Are you using Linux, Windows or OSX?  I would assume all of the standard command shells of those operating systems would by default display non-english characters, but that may not be the case.  This may just be a matter of selecting the right font to use with your shell.</span>
<span class="comment-copy">for example: "heißen" becomes "hei\xdfen"</span>
<span class="comment-copy">I did: <code>&gt;&gt;&gt; a = "heißen" &gt;&gt;&gt; a 'hei\xc3\x9fen' &gt;&gt;&gt; a.encode("utf-8") Traceback (most recent call last):   File "&lt;string&gt;", line 1, in &lt;fragment&gt; UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 3: ordinal not in range(128)</code></span>
<span class="comment-copy">Try &gt;&gt;&gt; a = u"hei\xdfen" where <code>u</code> means that we are dealing with a <code>unicode</code> object and <code>\xdf</code> represents the unicode code point for ß.</span>
<span class="comment-copy">ı don't want to do that, I have written alot of german words in a python dictionary. Now I can't print them on screen properly.</span>
<span class="comment-copy">This isn't as simple as you would think. You really really need to understand the differences between <code>unicode</code> and <code>string</code> objects to make your code work. There is no such thing as RAW text: if you have "just written" german words inside a source code, they inherit the encoding you have specified to your source code file and you must do the conversions accordingly. I'm adding some details to my answer - please be patient :)</span>
<span class="comment-copy">I use windows Python 2.7, how can I have UTF-8?</span>
<span class="comment-copy">Using the utf-8 doctype for your source should be enough, as far as I know. Just put this on the top of your files: <code># -*- coding: utf-8 -*-</code></span>
<span class="comment-copy">Thanks but it didn't help</span>
<span class="comment-copy">Try starting <code>cmd</code> with the <code>/u</code> flag, like: <code>cmd /u</code> (enter that in Start-&gt;Run). This will start a unicode (UTF-16) session. Now let's hope that Python knows that :-)</span>
<span class="comment-copy">I get your point, but - honestly - this is not just a Windows/Linux issue. It is an issue of understanding how unicode objects work on Python and how the defaults affect the behaviour of a seemingly simple program. Good tips though!</span>
