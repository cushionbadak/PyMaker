<div class="post-text" itemprop="text">
<p>Many times I will use the Python interpreter to inspect variables and step through commands before I actually write to a file. However by the end I have around 30 commands in the interpreter, and have to copy/paste them into a file to run. Is there a way I can export/write the Python interpreter history into a file?</p>
<p>For example</p>
<pre><code>&gt;&gt;&gt; a = 5
&gt;&gt;&gt; b = a + 6
&gt;&gt;&gt; import sys
&gt;&gt;&gt; export('history', 'interactions.py') 
</code></pre>
<p>And then I can open the <code>interactions.py</code> file and read:</p>
<pre><code>a = 5
b = a + 6
import sys
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://ipython.scipy.org/moin/">IPython</a> is extremely useful if you like using interactive sessions. For example for your usecase there is the save command, you just input save my_useful_session 10-20 23 to save input lines 10 to 20 and 23 to my_useful_session.py. (to help with this, every line is prefixed by its number)</p>
<p>Look at the videos on the documentation page to get a quick overview of the features.</p>
<p>::OR::</p>
<p>There is a <a href="http://docs.python.org/tutorial/interactive.html?highlight=atexit">way</a> to do it. Store the file in ~/.pystartup</p>
<pre><code># Add auto-completion and a stored history file of commands to your Python
# interactive interpreter. Requires Python 2.0+, readline. Autocomplete is
# bound to the Esc key by default (you can change it - see readline docs).
#
# Store the file in ~/.pystartup, and set an environment variable to point
# to it:  "export PYTHONSTARTUP=/home/user/.pystartup" in bash.
#
# Note that PYTHONSTARTUP does *not* expand "~", so you have to put in the
# full path to your home directory.

import atexit
import os
import readline
import rlcompleter

historyPath = os.path.expanduser("~/.pyhistory")

def save_history(historyPath=historyPath):
    import readline
    readline.write_history_file(historyPath)

if os.path.exists(historyPath):
    readline.read_history_file(historyPath)

atexit.register(save_history)
del os, atexit, readline, rlcompleter, save_history, historyPath
</code></pre>
<p>You can also add this to get autocomplete for free:</p>
<pre><code>readline.parse_and_bind('tab: complete')
</code></pre>
<p>Please note that this will only work on *nix systems. As readline is only available in Unix platform.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are using Linux/Mac and have readline library, you could add the following to a file and export it in your <code>.bash_profile</code> and you will have both completion and history.</p>
<pre><code># python startup file
import readline
import rlcompleter
import atexit
import os
# tab completion
readline.parse_and_bind('tab: complete')
# history file
histfile = os.path.join(os.environ['HOME'], '.pythonhistory')
try:
    readline.read_history_file(histfile)
except IOError:
    pass
atexit.register(readline.write_history_file, histfile)
del os, histfile, readline, rlcompleter
</code></pre>
<p>Export command:</p>
<pre><code>export PYTHONSTARTUP=path/to/.pythonstartup
</code></pre>
<p>This will save your python console history at ~/.pythonhistory</p>
</div>
<div class="post-text" itemprop="text">
<p>The following is not my own work, but frankly I don't remember where I first got it... However: place the following file (on a GNU/Linux system) in your home folder (the name of the file should be <code>.pystartup.py</code>):</p>
<pre><code># Add auto-completion and a stored history file of commands to your Python
# interactive interpreter. Requires Python 2.0+, readline. Autocomplete is
# bound to the Esc key by default (you can change it - see readline docs).
#
# Store the file in ~/.pystartup, and set an environment variable to point
# to it, e.g. "export PYTHONSTARTUP=/max/home/itamar/.pystartup" in bash.
#
# Note that PYTHONSTARTUP does *not* expand "~", so you have to put in the
# full path to your home directory.

import atexit
import os
import readline
import rlcompleter

historyPath = os.path.expanduser("~/.pyhistory")
historyTmp = os.path.expanduser("~/.pyhisttmp.py")

endMarkerStr= "# # # histDUMP # # #"

saveMacro= "import readline; readline.write_history_file('"+historyTmp+"'); \
    print '####&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;'; print ''.join(filter(lambda lineP: \
    not lineP.strip().endswith('"+endMarkerStr+"'),  \
    open('"+historyTmp+"').readlines())[-50:])+'####&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;'"+endMarkerStr

readline.parse_and_bind('tab: complete')
readline.parse_and_bind('\C-w: "'+saveMacro+'"')

def save_history(historyPath=historyPath, endMarkerStr=endMarkerStr):
    import readline
    readline.write_history_file(historyPath)
    # Now filter out those line containing the saveMacro
    lines= filter(lambda lineP, endMarkerStr=endMarkerStr:
                      not lineP.strip().endswith(endMarkerStr), open(historyPath).readlines())
    open(historyPath, 'w+').write(''.join(lines))

if os.path.exists(historyPath):
    readline.read_history_file(historyPath)

atexit.register(save_history)

del os, atexit, readline, rlcompleter, save_history, historyPath
del historyTmp, endMarkerStr, saveMacro
</code></pre>
<p>You will then get all the goodies that come with bash shell (up and down arrows navigating the history, ctrl-r for reverse search, etc....).</p>
<p><strong>Your complete command history will be stored in a file located at: <code>~/.pyhistory</code>.</strong></p>
<p>I'm using this from ages and I never got a problem.</p>
<p>HTH!</p>
</div>
<div class="post-text" itemprop="text">
<p>Python on Linux should have history support via readline library, see <a href="http://docs.python.org/tutorial/interactive.html" rel="nofollow">http://docs.python.org/tutorial/interactive.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Much has changed over the last 8 years since this question was asked.</p>
<p>It appears that since Python 3.4, history is automatically written to <code>~/.python_history</code> as a plain text file.</p>
<p>If you want to disable that or learn more, check out</p>
<ul>
<li><a href="https://unix.stackexchange.com/questions/121377/how-can-i-disable-the-new-history-feature-in-python-3-4">How can I disable the new history feature in Python 3.4? - Unix &amp; Linux Stack Exchange</a></li>
<li><a href="https://docs.python.org/3/library/site.html#readline-configuration" rel="nofollow noreferrer">Readline configuration - Site-specific configuration hook â€” Python 3.7.2 documentation</a></li>
</ul>
<p>And, of course, as noted by many others, <a href="https://ipython.org/" rel="nofollow noreferrer">IPython</a> has great features for saving, searching and manipulating history. Learn more via <code>%history?</code></p>
</div>
<div class="post-text" itemprop="text">
<p>In ipython shell:</p>
<pre><code>%history 
</code></pre>
<p>The command will print all the commands you have entered in the current python shell.</p>
<pre><code>% history -g 
</code></pre>
<p>The command will print all the commands logged in python shell upto some significant number of lines.</p>
<pre><code>%history -g -f history.log 
</code></pre>
<p>Will write the logged commands along with the line number. you can remove the fixed width line numbers for the commands of interest using gvim. </p>
</div>
<span class="comment-copy">What's wrong with copy and paste?  You can use simple find/replace to fixup the <code>&gt;&gt;&gt;</code>.  Wouldn't that be simplest?</span>
<span class="comment-copy">Copy/pasting thirty lines of input a few times a day gets tedious...</span>
<span class="comment-copy">+1 for the ipython hint</span>
<span class="comment-copy">Use iPython, it's the future of Python cli.</span>
<span class="comment-copy">This doesn't work... Where did you get this info from?</span>
<span class="comment-copy">This is the (very cool) behavior of ipython, not of the standard python interpreter.</span>
