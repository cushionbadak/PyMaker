<div class="post-text" itemprop="text">
<p>I have a sample string <code>&lt;alpha.Customer[cus_Y4o9qMEZAugtnW] active_card=&lt;alpha.AlphaObject[card] ...&gt;, created=1324336085, description='Customer for My Test App', livemode=False&gt;</code></p>
<p>I only want the value <code>cus_Y4o9qMEZAugtnW</code> and NOT <code>card</code> (which is inside another <code>[]</code>)</p>
<p>How could I do it in easiest possible way in Python?
Maybe by using RegEx (which I am not good at)?</p>
</div>
<div class="post-text" itemprop="text">
<p>How about:</p>
<pre><code>import re

s = "alpha.Customer[cus_Y4o9qMEZAugtnW] ..."
m = re.search(r"\[([A-Za-z0-9_]+)\]", s)
print m.group(1)
</code></pre>
<p>For me this prints:</p>
<pre><code>cus_Y4o9qMEZAugtnW
</code></pre>
<p>Note that the call to <code>re.search(...)</code> finds the first match to the regular expression, so it doesn't find the <code>[card]</code> unless you repeat the search a second time.</p>
<p><strong>Edit:</strong> The <a href="http://docs.python.org/library/re.html">regular expression</a> here is a python <a href="http://docs.python.org/reference/lexical_analysis.html#string-literals">raw string literal</a>, which basically means the backslashes are not treated as special characters and are passed through to the <code>re.search()</code> method unchanged. The <a href="http://docs.python.org/library/re.html#regular-expression-syntax">parts</a> of the regular expression are:</p>
<ol>
<li><code>\[</code> matches a literal <code>[</code> character</li>
<li><code>(</code> begins a new group</li>
<li><code>[A-Za-z0-9_]</code> is a character set matching any letter (capital or lower case), digit or underscore</li>
<li><code>+</code> matches the preceding element (the character set) one or more times.</li>
<li><code>)</code> ends the group</li>
<li><code>\]</code> matches a literal <code>]</code> character</li>
</ol>
<p><strong>Edit:</strong> As D K has pointed out, the regular expression could be simplified to:</p>
<pre><code>m = re.search(r"\[(\w+)\]", s)
</code></pre>
<p>since the <code>\w</code> is a special sequence which means the same thing as <code>[a-zA-Z0-9_]</code> depending on the <code>re.LOCALE</code> and <code>re.UNICODE</code> settings.</p>
</div>
<div class="post-text" itemprop="text">
<p>This should do the job:</p>
<pre><code>re.match(r"[^[]*\[([^]]*)\]", yourstring).groups()[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="http://docs.python.org/library/stdtypes.html#str.split" rel="noreferrer"><code>str.split</code></a> to do this.</p>
<pre><code>s = "&lt;alpha.Customer[cus_Y4o9qMEZAugtnW] active_card=&lt;alpha.AlphaObject[card]\
 ...&gt;, created=1324336085, description='Customer for My Test App',\
 livemode=False&gt;"
val = s.split('[', 1)[1].split(']')[0]
</code></pre>
<p>Then we have:</p>
<pre><code>&gt;&gt;&gt; val
'cus_Y4o9qMEZAugtnW'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>your_string = "lnfgbdgfi343456dsfidf[my data] ljfbgns47647jfbgfjbgskj"
your_string[your_string.find("[")+1 : your_string.find("]")]
</code></pre>
<p>courtesy: <a href="https://stackoverflow.com/questions/4894069/regular-expression-to-return-text-between-parenthesis">Regular expression to return text between parenthesis</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can also use</p>
<pre><code>re.findall(r"\[([A-Za-z0-9_]+)\]", string)
</code></pre>
<p>if there are many occurrences that you would like to find. </p>
<p>See also for more info:
<a href="https://stackoverflow.com/questions/4697882/how-can-i-find-all-matches-to-a-regular-expression-in-python">How can I find all matches to a regular expression in Python?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use</p>
<pre><code>import re

s = re.search(r"(\[.*?]", string)
print(s.group(0))
</code></pre>
</div>
<span class="comment-copy">could you please explain your answer the regex part, so that i donot have to ask again for similar type of problems. Thanks.</span>
<span class="comment-copy">I've edited my answer with an explanation of the regular expression and links to the python regular expression documentation.</span>
<span class="comment-copy">Why not replace <code>[A-Za-z0-9_]</code> with <code>\w</code>?</span>
<span class="comment-copy">Yes, you could replace <code>[A-Za-z0-9_]</code> with <code>\w</code>.</span>
<span class="comment-copy">@user3015703 In a character set you don't need to escape special characters, except for '-' or ']'. To include a dash you can either precede it with a slash, or make it the first or last character in the set. So using '[A-Za-z0-9_+-]' should work. See the <a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="nofollow noreferrer">Python regular expression syntax documentation</a></span>
<span class="comment-copy">I guess this was more than the OP needed since his case only needed alphanumerics, but this did the trick for me. Thanks!</span>
<span class="comment-copy">Yeah, it depends on how much messy the strings are, but a split could work here too..</span>
<span class="comment-copy">though it wont effect much, but which of the two using regex/split is more efficient. Also could you please explain your splitting part. Thanks.</span>
<span class="comment-copy">@user993563 Have a look at the link to <code>str.split</code> in the answer for examples. Briefly, the first <code>split</code> in the solution returns a list of length two; the first element is the substring before the first <code>[</code>, the second is the substring after <code>]</code>. As for performance, you should measure that to find out (look at <a href="http://docs.python.org/library/timeit.html" rel="nofollow noreferrer"><code>timeit</code></a>). If you plan to do the value extraction several times in one run of the program and decide to use regular expressions, you might want to <a href="http://docs.python.org/library/re.html#re.compile" rel="nofollow noreferrer"><code>compile</code></a> the regex.</span>
<span class="comment-copy">@user993563 Note that your request for the "easiest possible way in python" may be at odds with the performance consideration. I chose to use <code>split</code> because I felt that reflected your request for "easiest".</span>
<span class="comment-copy">thanks for your explanation David. I appreciate.</span>
