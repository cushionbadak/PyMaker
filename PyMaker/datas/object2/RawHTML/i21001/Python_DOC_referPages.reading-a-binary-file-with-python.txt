<div class="post-text" itemprop="text">
<p>I find particularly difficult reading binary file with Python. Can you give me a hand?
I need to read this file, which in Fortran 90 is easily read by</p>
<pre><code>int*4 n_particles, n_groups
real*4 group_id(n_particles)
read (*) n_particles, n_groups
read (*) (group_id(j),j=1,n_particles)
</code></pre>
<p>In detail, the file format is:</p>
<pre><code>Bytes 1-4 -- The integer 8.
Bytes 5-8 -- The number of particles, N.
Bytes 9-12 -- The number of groups.
Bytes 13-16 -- The integer 8.
Bytes 17-20 -- The integer 4*N.
Next many bytes -- The group ID numbers for all the particles.
Last 4 bytes -- The integer 4*N. 
</code></pre>
<p>How can I read this with Python? I tried everything but it never worked. Is there any chance I might use a f90 program in python, reading this binary file and then save the data that I need to use?</p>
</div>
<div class="post-text" itemprop="text">
<p>Read the binary file content like this:</p>
<pre><code>with open(fileName, mode='rb') as file: # b is important -&gt; binary
    fileContent = file.read()
</code></pre>
<p>then "unpack" binary data using <a href="http://docs.python.org/library/struct.html#struct.unpack">struct.unpack</a>:</p>
<p>The start bytes: <code>struct.unpack("iiiii", fileContent[:20])</code></p>
<p>The body: ignore the heading bytes and the trailing byte (= 24); The remaining part forms the body, to know the number of bytes in the body do an integer division by 4; The obtained quotient is multiplied by the string <code>'i'</code> to create the correct format for the unpack method:</p>
<pre><code>struct.unpack("i" * ((len(fileContent) -24) // 4), fileContent[20:-4])
</code></pre>
<p>The end byte: <code>struct.unpack("i", fileContent[-4:])</code></p>
</div>
<div class="post-text" itemprop="text">
<p>In general, I would recommend that you look into using Python's <a href="http://docs.python.org/library/struct.html" rel="noreferrer">struct</a> module for this. It's standard with Python, and it should be easy to translate your question's specification into a formatting string suitable for <code>struct.unpack()</code>.</p>
<p>Do note that if there's "invisible" padding between/around the fields, you will need to figure that out and include it in the <code>unpack()</code> call, or you will read the wrong bits.</p>
<p>Reading the contents of the file in order to have something to unpack is pretty trivial:</p>
<pre><code>import struct

data = open("from_fortran.bin", "rb").read()

(eight, N) = struct.unpack("@II", data)
</code></pre>
<p>This unpacks the first two fields, assuming they start at the very beginning of the file (no padding or extraneous data), and also assuming native byte-order (the <code>@</code> symbol). The <code>I</code>s in the formatting string mean "unsigned integer, 32 bits".</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.fromfile.html" rel="noreferrer"><code>numpy.fromfile</code></a>, which can read data from both text and binary files. You would first construct a data type, which represents your file format, using <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.dtype.html" rel="noreferrer"><code>numpy.dtype</code></a>, and then read this type from file using <code>numpy.fromfile</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>To read a binary file to a <code>bytes</code> object:</p>
<pre><code>from pathlib import Path
data = Path('/path/to/file').read_bytes()  # Python 3.5+
</code></pre>
<p>To create an <code>int</code> from bytes 0-3 of the data:</p>
<pre><code>i = int.from_bytes(data[:4], byteorder='little', signed=False)
</code></pre>
<p>To unpack multiple <code>int</code>s from the data:</p>
<pre><code>import struct
ints = struct.unpack('iiii', data[:16])
</code></pre>
<ul>
<li><a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code></a></li>
<li><a href="https://docs.python.org/3/library/stdtypes.html#int.from_bytes" rel="nofollow noreferrer"><code>int.from_bytes()</code></a></li>
<li><a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer"><code>struct</code></a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<pre><code>import pickle
f=open("filename.dat","rb")
try:
    while True:
        x=pickle.load(f)
        print x
except EOFError:
    pass
f.close()
</code></pre>
</div>
<span class="comment-copy">Was this file written by a Fortran program? If so, how was it written, since Fortran, by default, adds additional data before each record it writes to file. You may need to take care with this when reading the data.</span>
<span class="comment-copy">Please ignore my previous comment, the intergers 8 and 4*N are clearly this additional data.</span>
<span class="comment-copy">Also, see answers to the question <a href="http://stackoverflow.com/questions/1035340/reading-binary-file-in-python">reading binary file in python</a>.</span>
<span class="comment-copy">Can you please have look at this other post? <a href="http://stackoverflow.com/questions/8092469/reading-a-binary-file-in-python" title="reading a binary file in python">stackoverflow.com/questions/8092469/…</a> ... I am again to read another binary file, but in this case I don't know the byte structure in details. For example, I figured out that sometimes there is the integer 8. However, with IDL it is really simple to read this data. Can I do the same with python?</span>
<span class="comment-copy">Please indicate (inside the other post, not here) why you are not happy with the posted answers and comments. Perhaps you should also update the question to provide more details... I'll have a look at it when it is updated.</span>
<span class="comment-copy">See <a href="http://stackoverflow.com/a/606199/635906">this</a> answer if you need to convert an unpacked char[] to a string.</span>
<span class="comment-copy"><code>import struct</code></span>
<span class="comment-copy">ok, but I don't even know how to read the bytes of the file. From my question how can I read the file from bytes 5 to 8 and then convert the result to an integer? Sorry, but I'm new with Python.</span>
<span class="comment-copy">Easy to miss this! Docs are a bit thin; see <a href="https://www.reddit.com/r/Python/comments/19q8nt/psa_consider_using_numpy_if_you_need_to_parse_a/" rel="nofollow noreferrer">reddit.com/r/Python/comments/19q8nt/…</a> for some discussion</span>
<span class="comment-copy">Probably worth just a little explanation of why this is better than (or at least as good as) other answers.</span>
<span class="comment-copy">have you tested an verified this works with the fortran generated binary?</span>
<span class="comment-copy">And also explain what does it do... What is pickle? What does <code>pickle.load</code> load? Does it load a Fortran stream, direct or sequential files? They are different and not compatible.</span>
