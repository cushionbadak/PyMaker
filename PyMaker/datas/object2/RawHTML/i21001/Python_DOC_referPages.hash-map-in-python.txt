<div class="post-text" itemprop="text">
<p>I want to implement a HashMap in Python.  I want to ask a user for an input. depending on his input I am retrieving some information from the HashMap. If the user enters a key of the HashMap,  I would like to retrieve the corresponding value.</p>
<p>How do I implement this functionality in Python?</p>
<pre><code>HashMap&lt;String,String&gt; streetno=new HashMap&lt;String,String&gt;();
   streetno.put("1", "Sachin Tendulkar");
   streetno.put("2", "Dravid");
   streetno.put("3","Sehwag");
   streetno.put("4","Laxman");
   streetno.put("5","Kohli")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/library/stdtypes.html#dict" rel="noreferrer">Python dictionary</a> is a built-in type that supports key-value pairs.</p>
<pre><code>streetno = {"1":"Sachine Tendulkar", "2":"Dravid", "3":"Sehwag", "4":"Laxman","5":"Kohli"}
</code></pre>
<p>as well as using the dict keyword:</p>
<pre><code>streetno = dict({"1":"Sachine Tendulkar", "2":"Dravid"}) 
</code></pre>
<p>or:</p>
<pre><code>streetno = {}
streetno["1"] = "Sachine Tendulkar" 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>All you wanted (at the time the question was originally asked) was a hint. Here's a hint: In Python, you can use <a href="http://docs.python.org/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">dictionaries</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's built-in for Python. See <a href="http://docs.python.org/tutorial/datastructures.html#dictionaries" rel="noreferrer">dictionaries</a>.</p>
<p>Based on your example:</p>
<pre><code>streetno = {"1": "Sachine Tendulkar",
            "2": "Dravid",
            "3": "Sehwag",
            "4": "Laxman",
            "5": "Kohli" }
</code></pre>
<p>You could then access it like so:</p>
<pre><code>sachine = streetno["1"]
</code></pre>
<p>Also worth mentioning: it can use any non-mutable data type as a key. That is, it can use a tuple, boolean, or string as a key.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>streetno = { 1 : "Sachin Tendulkar",
            2 : "Dravid",
            3 : "Sehwag",
            4 : "Laxman",
            5 : "Kohli" }
</code></pre>
<p>And to retrieve values:</p>
<pre><code>name = streetno.get(3, "default value")
</code></pre>
<p>Or</p>
<pre><code>name = streetno[3]
</code></pre>
<p>That's using number as keys, put quotes around the numbers to use strings as keys.</p>
</div>
<div class="post-text" itemprop="text">
<p>Hash maps are built-in in Python, they're called <a href="http://docs.python.org/tutorial/datastructures.html#dictionaries" rel="noreferrer">dictionaries</a>:</p>
<pre><code>streetno = {}                        #create a dictionary called streetno
streetno["1"] = "Sachin Tendulkar"   #assign value to key "1"
</code></pre>
<p>Usage:</p>
<pre><code>"1" in streetno                      #check if key "1" is in streetno
streetno["1"]                        #get the value from key "1"
</code></pre>
<p>See the documentation for more information, e.g. built-in methods and so on. They're great, and very common in Python programs (unsurprisingly).</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is the implementation of the Hash Map using python
For the simplicity hash map is of a fixed size 16.
This can be changed easily.
Rehashing is out of scope of this code.</p>
<pre><code>class Node:
    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.next = None

class HashMap:
    def __init__(self):
        self.store = [None for _ in range(16)]
    def get(self, key):
        index = hash(key) &amp; 15
        if self.store[index] is None:
            return None
        n = self.store[index]
        while True:
            if n.key == key:
                return n.value
            else:
                if n.next:
                    n = n.next
                else:
                    return None
    def put(self, key, value):
        nd = Node(key, value)
        index = hash(key) &amp; 15
        n = self.store[index]
        if n is None:
            self.store[index] = nd
        else:
            if n.key == key:
                n.value = value
            else:
                while n.next:
                    if n.key == key:
                        n.value = value
                        return
                    else:
                        n = n.next
                n.next = nd

hm = HashMap()
hm.put("1", "sachin")
hm.put("2", "sehwag")
hm.put("3", "ganguly")
hm.put("4", "srinath")
hm.put("5", "kumble")
hm.put("6", "dhoni")
hm.put("7", "kohli")
hm.put("8", "pandya")
hm.put("9", "rohit")
hm.put("10", "dhawan")
hm.put("11", "shastri")
hm.put("12", "manjarekar")
hm.put("13", "gupta")
hm.put("14", "agarkar")
hm.put("15", "nehra")
hm.put("16", "gawaskar")
hm.put("17", "vengsarkar")
print(hm.get("1"))
print(hm.get("2"))
print(hm.get("3"))
print(hm.get("4"))
print(hm.get("5"))
print(hm.get("6"))
print(hm.get("7"))
print(hm.get("8"))
print(hm.get("9"))
print(hm.get("10"))
print(hm.get("11"))
print(hm.get("12"))
print(hm.get("13"))
print(hm.get("14"))
print(hm.get("15"))
print(hm.get("16"))
print(hm.get("17"))
</code></pre>
<p>Output:</p>
<pre><code>sachin
sehwag
ganguly
srinath
kumble
dhoni
kohli
pandya
rohit
dhawan
shastri
manjarekar
gupta
agarkar
nehra
gawaskar
vengsarkar
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>class HashMap:
    def __init__(self):
        self.size = 64
        self.map = [None] * self.size

    def _get_hash(self, key):
        hash = 0

        for char in str(key):
            hash += ord(char)
        return hash % self.size

    def add(self, key, value):
        key_hash = self._get_hash(key)
        key_value = [key, value]

        if self.map[key_hash] is None:
            self.map[key_hash] = list([key_value])
            return True
        else:
            for pair in self.map[key_hash]:
                if pair[0] == key:
                    pair[1] = value
                    return True
                else:
                    self.map[key_hash].append(list([key_value]))
                    return True

    def get(self, key):
        key_hash = self._get_hash(key)
        if self.map[key_hash] is not None:
            for pair in self.map[key_hash]: 
                if pair[0] == key:
                    return pair[1]
        return None

    def delete(self, key):
        key_hash = self._get_hash(key)

        if self.map[key_hash] is None :
            return False
        for i in range(0, len(self.map[key_hash])):
            if self.map[key_hash][i][0] == key:
                self.map[key_hash].pop(i)
                return True

    def print(self):

        print('---Phonebook---')
        for item in self.map:
            if item is not None:
                print(str(item))

h = HashMap()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python <a href="https://docs.python.org/3/library/collections.html#counter-objects" rel="nofollow noreferrer">Counter</a> is also a good option in this case:</p>
<pre><code>from collections import Counter

counter = Counter(["Sachin Tendulkar", "Sachin Tendulkar", "other things"])

print(counter)
</code></pre>
<p>This returns a dict with the count of each element in the list:</p>
<pre><code>Counter({'Sachin Tendulkar': 2, 'other things': 1})
</code></pre>
</div>
<span class="comment-copy"><a href="http://meta.stackexchange.com/questions/15650/ban-lmgtfy-let-me-google-that-for-you-links" title="ban lmgtfy let me google that for you links">meta.stackexchange.com/questions/15650/â€¦</a></span>
<span class="comment-copy">The second example just builds a dict in the same ways as before and then copies it. The other use <code>dict</code>, which would be more appopriate in this context, is <code>dict(key1=value1, key2=value2, ...)</code> but that requires the keys to strings which are also valid Python identifiers (and internally, this also creates a dictionary).</span>
<span class="comment-copy">Ah interesting, I didn't realize that naked strings were valid identifiers.</span>
<span class="comment-copy">I'm not sure if I understand you correctly (what are "naked strings"?), but I believe you got it backwards. Your updated second example is invalid and I never intended to state something like that work. The <a href="http://docs.python.org/tutorial/controlflow.html#keyword-arguments" rel="nofollow noreferrer">keyword arguments</a> syntax, which accepts <i>only</i> naked identifiers, internally uses a dictionary. The <code>dict</code> constructor supports keyword arguments and works like <code>def dict(**kwds): return kwds</code> if given keyword arguments.</span>
<span class="comment-copy">second example raises a syntax error. variable names can't start with a number</span>
<span class="comment-copy">I think your logic is partially correct! <code>hash(key) &amp; 15</code>, <code>73%15= 13</code>, but it's equivalent: <code>1001001 &amp; 0001111 = 0001111</code> i.e <code>9</code> and not <code>13</code>, I think using mod is the correct operation. Correct me if I am wrong!</span>
