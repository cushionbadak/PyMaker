<div class="post-text" itemprop="text">
<p>I've been exposed to C/C++/Java like syntax over the years, and the way that Python variables are defined just sort of confuses me. Can anyone describe what the differences are among the three mentioned in the q?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>self</code> works just like the <code>this</code> from C++ and Java. You get a reference to an object that you can then access with the <code>.</code> operator  (<code>-&gt;</code> in C++).</p>
<p>In Python the only way of accessing instance variables is explicitely through <code>self</code>. Instance variables are <em>not</em> placed in the same "normal" scope as local or global variables are.</p>
</div>
<div class="post-text" itemprop="text">
<p>A global variable is just that -- a variable that is accessible globally. A local variable is one that is only accessible to the current scope, such as temporary variables used in a single function definition. An instance variable (e.g.: when using the <code>self.</code> prefix) is data that is associated with a specific instance of an object. Of course, you can also reference instance objects outside of the object by using <code>object.x</code> where <code>object</code> is a reference to that object. </p>
<p>If a variable is prefixed with <code>self</code>, it is neither local nor global. It is part of the makeup of a specific instance of an object. Roughly speaking, an instance variable represents a property of a specific object. </p>
<p>In the following example, <code>lx</code> is a local variable, local to the method <code>greet</code>. <code>gx</code> is a global variable accessible anywhere in the module, <code>ix</code> is an instance variable that could have a unique value for each instance of the object. When referenced inside of the object definition you would refer to <code>ix</code> with the prefix <code>self</code>, and when outside the object with a prefix of the object reference.</p>
<pre><code>gx = "hello"
class Foo:
    def __init__(self, who):
        self.ix = who
    def greet(self):
        lx = "%s, %s" % (gx, self.ix)
        return lx

foo = Foo("world")
print foo.greet()
print foo.ix
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sometimes it is really useful to return to first principles:</p>
<p>When we talk about a variable being local or global we are referring to its 'scope' (or context). Variables inside a function are considered <strong>local</strong> to the function. Here are illustrations from Swaroop's excellent guide, '<a href="http://www.swaroopch.com/notes/Python_en%3aFunctions#Local_Variables" rel="nofollow">A Byte of Python</a>':</p>
<pre><code>x = 50

def func(x):
    print('x is', x)
    x = 2
    print('Changed local x to', x)

func(x)
print('x is still', x)
</code></pre>
<p>output:</p>
<p><em>x is 50</em></p>
<p><em>Changed local x to 2</em></p>
<p><em>x is still 50</em></p>
<p>Next is an illustration of how a <strong>global</strong> variable traverses context between the inside and outside of a function:</p>
<pre><code>x = 50

def func():
    global x

    print('x is', x)
    x = 2
    print('Changed global x to', x)

func()
print('Value of x is', x)
</code></pre>
<p>output:</p>
<p><em>x is 50</em></p>
<p><em>Changed global x to 2</em></p>
<p><em>Value of x is 2</em></p>
<p>That is all there is to it.</p>
<p>When we utilize the Object Oriented programming aspects of Python, then the notion of '<strong>self</strong>' becomes relevant. Class instances and instances are considered to be 'objects' and the '<em>self</em>.' prefix allows our code to differentiate between whether we are referring to a local/global variable or to attributes of an object. </p>
<p>Once again, the concept is explained with zen-like simplicity by <a href="http://www.swaroopch.com/notes/Python_en%3aObject_Oriented_Programming" rel="nofollow">Swaroop</a>.</p>
</div>
<span class="comment-copy">First.  Python variables are not "defined".  That may be most of your problem right there.  Are you seriously confused by "global" vs. "local"?  That seems unlikely.  Could you -- for example -- write down what you think you know what what <b>specific</b> questions you have?  It would help if you provided details on what confuses you.  A code sample would help where you list the specific things about the code that's confusing.</span>
<span class="comment-copy">I am mainly confused about how the "self" comes into the picture in the global vs local realm...</span>
<span class="comment-copy">The term for creating a variable is "creating".  The assignment statement creates a variable.</span>
<span class="comment-copy">Doesn't a variable's creation imply that it's been defined as well??</span>
<span class="comment-copy">according to <a href="https://docs.python.org/3/tutorial/introduction.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/introduction.html</a> : "If a variable is not “defined” (assigned a value), trying to use it will give you an error"</span>
<span class="comment-copy">Hey does that mean that you <i>can't</i> describe instance variables using local/global at all, or that they can be <i>either</i> local <i>or</i> global depending on the context...?</span>
<span class="comment-copy">@KaitlynMcmordie: In python if you do <code>a = 10</code> you always set a local variable named <code>a</code>. In C++ doing the same might either set a local variable or an instance variable, depending on how <code>a</code> was declared. The only way to get/set an intance variable in Python is via self: <code>self.a = 10</code></span>
<span class="comment-copy">I'm still confused, as the name "instance" variable seems to be contradictory... if an instance variable is updated across *all* runtime instantiations of that particular class when at least one instantiation has modified it, wouldn't it be more suitable to call it an "instance-independent" variable? or why not just call it a static variable, cause it basically seems like that's what it is....</span>
<span class="comment-copy">@KaitlynMcmordie: "instance variable" is a well defined term - it should refer to data belonging to the individual objects (in contrast to global or class/static variables, that are shared by all objects). Note that <code>self</code> itself is not a global variable. In C++ it is magically scoped to the current object and in python it is a function argument that basically has the same purpose.</span>
<span class="comment-copy">@missingno: <code>a=10</code> does not <i>always</i> give you a local variable. Consider the case where you previously defined <code>a</code> as global for instance.</span>
