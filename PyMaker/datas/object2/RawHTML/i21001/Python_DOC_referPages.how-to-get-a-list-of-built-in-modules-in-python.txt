<div class="post-text" itemprop="text">
<p>I would like to get a list of names of built-in modules in python such that I can test the popularity of function's naming conventions (underline, CamelCase or mixedCase).</p>
<p>I know there is a <a href="https://docs.python.org/2/py-modindex.html" rel="noreferrer">Global Module Index</a> but I am wondering if there is a list of strings, which is easier to use :)</p>
<p><strong>Update:</strong></p>
<pre><code>len(dir(__builtins__)) = 145  
len(stdlib_list("2.7")) = 430  
help('modules') = 508 # counting manually the output
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The compiled-in module names are in <a href="http://docs.python.org/library/sys.html#sys.builtin_module_names"><code>sys.builtin_module_names</code></a>. For all importable modules, see <a href="http://docs.python.org/library/pkgutil.html#pkgutil.iter_modules"><code>pkgutil.iter_modules</code></a>.</p>
<p>Run these in a clean <a href="http://pypi.python.org/pypi/virtualenv"><code>virtualenv</code></a> to get (almost) only the modules that come with Python itself.</p>
<hr/>
<p>Note that a “popularity poll” will necessarily include modules that use old, discouraged naming conventions because they were written before today's guidelines were put in place, and can't change because need to be backwards compatible. It might be useful for something, but not for answering best-practice questions such as “How should I name my functions?”. For that, see the <a href="http://www.python.org/dev/peps/pep-0008/">PEP8, the Python style guide</a>, especially the “Naming Conventions” section.</p>
</div>
<div class="post-text" itemprop="text">
<p>How about this? Though, this gets a list of built-in functions and variables rather than modules...</p>
<pre><code>dir(__builtins__)
</code></pre>
<p><code>help('modules')</code> will give you a list of all modules, according to <a href="https://stackoverflow.com/questions/739993/unable-to-get-a-list-of-installed-python-modules">How can I get a list of locally installed Python modules?</a>. Not a list of strings, though.</p>
</div>
<div class="post-text" itemprop="text">
<p>Now there is a 3rd party package for this. It scrapes the TOC of the Standard Library page in the official Python docs and builds a list.</p>
<p>You can install it using pip</p>
<pre><code>pip install stdlib_list
</code></pre>
<p>and got get a list of libraries</p>
<pre><code>In [12]: from stdlib_list import stdlib_list

In [13]: libraries = stdlib_list("3.5")

In [14]: libraries[4:12]
Out[14]: ['abc', 'aifc', 'argparse', 'array', 'ast', 'asynchat', 'asyncio', 'asyncore']
</code></pre>
<p>You can find <a href="https://github.com/jackmaney/python-stdlib-list" rel="noreferrer">source code here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>&gt;&gt;&gt;dir (__builtins__)</code></p>
<p>or</p>
<p><code>&gt;&gt;&gt;help (__builtins__)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/library/importlib.html#importlib.machinery.BuiltinImporter" rel="nofollow noreferrer">CPython`s docs</a>:</p>
<blockquote>
<p>All known built-in modules are listed in sys.builtin_module_names</p>
</blockquote>
<p>Names of modules in <code>sys.builtin_module_names</code> is <a href="https://docs.python.org/3/library/sys.html#sys.builtin_module_names" rel="nofollow noreferrer">actual only for used</a> a Python interpreter:</p>
<blockquote>
<p>A tuple of strings giving the names of all modules that are compiled into this Python interpreter</p>
</blockquote>
<p>Each built-in module use the special loader while importing: <code>BuiltinImporter</code></p>
<pre><code>In [65]: import itertools, sys, gc

In [66]: itertools.__loader__, sys.__loader__, gc.__loader__
Out[66]: 
(_frozen_importlib.BuiltinImporter,
 _frozen_importlib.BuiltinImporter,
 _frozen_importlib.BuiltinImporter)
</code></pre>
<p>In the Python 3 the number of built-in modules has slightly increased </p>
<pre><code>$ python2.7 -c "import sys; print('Count built-in modules: %d' %len(sys.builtin_module_names)); print(sys.builtin_module_names)"
Count built-in modules: 51
('__builtin__', '__main__', '_ast', '_bisect', '_codecs', '_collections', '_functools', '_heapq', '_io', '_locale', '_md5', '_random', '_sha', '_sha256', '_sha512', '_socket', '_sre', '_struct', '_symtable', '_warnings', '_weakref', 'array', 'binascii', 'cPickle', 'cStringIO', 'cmath', 'datetime', 'errno', 'exceptions', 'fcntl', 'gc', 'grp', 'imp', 'itertools', 'marshal', 'math', 'operator', 'posix', 'pwd', 'select', 'signal', 'spwd', 'strop', 'sys', 'syslog', 'thread', 'time', 'unicodedata', 'xxsubtype', 'zipimport', 'zlib')
$ python3.4 -c "import sys; print('Count built-in modules: %d' %len(sys.builtin_module_names)); print(sys.builtin_module_names)"
Count built-in modules: 54
('_ast', '_bisect', '_codecs', '_collections', '_datetime', '_elementtree', '_functools', '_heapq', '_imp', '_io', '_locale', '_md5', '_operator', '_pickle', '_posixsubprocess', '_random', '_sha1', '_sha256', '_sha512', '_socket', '_sre', '_stat', '_string', '_struct', '_symtable', '_thread', '_tracemalloc', '_warnings', '_weakref', 'array', 'atexit', 'binascii', 'builtins', 'errno', 'faulthandler', 'fcntl', 'gc', 'grp', 'itertools', 'marshal', 'math', 'posix', 'pwd', 'pyexpat', 'select', 'signal', 'spwd', 'sys', 'syslog', 'time', 'unicodedata', 'xxsubtype', 'zipimport', 'zlib')
</code></pre>
<p>As the <a href="https://hg.python.org/cpython" rel="nofollow noreferrer">CPython</a> is implemented (primary) on the C programming language, so it is not easy to find it, as example location the Python`s module sys (based on <a href="https://stackoverflow.com/questions/6409935/where-is-the-sys-module-in-python-source-code">this answer</a>):</p>
<pre><code>$ locate sysmodule | grep python
/usr/include/python2.7/sysmodule.h
/usr/include/python3.4m/sysmodule.h
/usr/local/include/python3.5m/sysmodule.h
</code></pre>
<hr/>
<p>More information about getting an information about all available modules is the CPython, look in my answer <a href="https://stackoverflow.com/a/42673938/6003870">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>It can be done using the given block of code below and it is the most effective way as per me.</p>
<pre><code>import sys
a = sys.builtin_module_names
print(a)
</code></pre>
<p>The last line to be included if you want to print them.
Here, a is a tuple and so it can access all the functionalities of a tuple.</p>
<p>You can have a look at sys.builtin_module_names for further help
<a href="https://docs.python.org/3/library/sys.html" rel="nofollow noreferrer">https://docs.python.org/3/library/sys.html</a></p>
</div>
<span class="comment-copy">You might also want to check <a href="http://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a> and Naming Conventions</span>
<span class="comment-copy">"underline" and "underscore" are the same thing. There are conventions for the use of <code>_name</code> and <code>__name__</code>. The number of function/method/names in the built-in library that have uppercase characters is vanishingly small. What's your objective?</span>
<span class="comment-copy">Thx, Vincent. I do like to get my hand on traverse the whole built-in modules' functions to see the current naming situation :)</span>
<span class="comment-copy">Added a note inspired by @VincentSavard's comment on the question. Thanks, Vincent.</span>
<span class="comment-copy">This is quite amazing. Thanks for this information. I also put the result (the number of packages by different ways) into my original post.</span>
<span class="comment-copy">This only lists some modules, for example sys and time, but not others (for example os and random).</span>
<span class="comment-copy">I t does not list the imported modules try modules.keys() for this purpose.</span>
