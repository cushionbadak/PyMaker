<div class="post-text" itemprop="text">
<p>How can I set up a small test harness for Python CGI script? I don't want to run a server in order to test it, but I do want to supply various GET/POST inputs for my test.</p>
<p>It appears to me that FieldStorage (or the object behind it) is utterly immutable, so I don't see how to supply the CGI data on the fly in a harness.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a mocking library, such as <a href="http://www.voidspace.org.uk/python/mock/index.html" rel="nofollow">Mock</a> to do the job. For example, suppose you want to test the <code>function_to_test</code> function from your CGI script, you could write a <a href="http://docs.python.org/library/unittest.html" rel="nofollow">unittest class</a> like this:</p>
<pre><code>import unittest
import cgi

from mock import patch

def function_to_test():
    form = cgi.FieldStorage()
    if "name" not in form or "addr" not in form:
        return "&lt;H1&gt;Error&lt;/H1&gt;\nPlease fill in the name and address.\n"
    text = "&lt;p&gt;name: {0}\n&lt;p&gt;addr: {1}\n"
    return text.format(form["name"].value, form["addr"].value)

@patch('cgi.FieldStorage')
class TestClass(unittest.TestCase):
    class TestField(object):
        def __init__(self, value):
            self.value = value

    FIELDS = { "name" : TestField("Bill"), "addr" : TestField("1 Two Street") }

    def test_cgi(self, MockClass):
        instance = MockClass.return_value
        instance.__getitem__ = lambda s, key: TestClass.FIELDS[key]
        instance.__contains__ = lambda s, key: key in TestClass.FIELDS
        text = function_to_test()
        self.assertEqual(text, "&lt;p&gt;name: Bill\n&lt;p&gt;addr: 1 Two Street\n")

    def test_err(self, MockClass):
        instance = MockClass.return_value
        instance.__contains__ = lambda self, key: False
        text = function_to_test()
        self.assertEqual(text,
            "&lt;H1&gt;Error&lt;/H1&gt;\nPlease fill in the name and address.\n")
</code></pre>
<p>If I run this code as a unit test I get:</p>
<pre><code>..
----------------------------------------------------------------------
Ran 2 tests in 0.003s

OK
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In case you do not want to use an extra library such as Mock: it is possible to set up a <code>cgi.FieldStorage</code> object with some test data. The Python3 example below assumes that you expect a <code>POST</code> input:</p>
<pre><code>import unittest
from io import BytesIO

class TestForm(unittest.TestCase):

    def setUp(self):
        """
        Makes a cgi.FieldStorage object
        with some bogus fields.
        """
        # provide a byte string with the parameters
        # using the format b"name1=value1&amp;name2=value2..."
        urlencode_data = b"firstname=Joe&amp;lastname=Bloggs&amp;email=joe.bloggs@company.com"
        urlencode_environ = {
            'CONTENT_LENGTH':   str(len(urlencode_data)),
            'CONTENT_TYPE':     'application/x-www-form-urlencoded',
            'QUERY_STRING':     '',
            'REQUEST_METHOD':   'POST',
        }
        data = BytesIO(urlencode_data)
        data.seek(0)
        self.fs = cgi.FieldStorage(fp=data, environ=urlencode_environ)

    # unit test methods come here
    # form fields are accessible via `self.fs`
</code></pre>
<p>The idea comes from <a href="https://bugs.python.org/file9507/cgitest.py" rel="nofollow">https://bugs.python.org/file9507/cgitest.py</a>. There you can find other interesting examples, e.g. forms with file upload etc.</p>
<p>Note that the <code>__init__</code> method of <code>cgi.FieldStorage</code> is undocumented, or at least I could not find it in the <a href="https://docs.python.org/3/library/cgi.html" rel="nofollow">current cgi module documentation</a>.</p>
</div>
