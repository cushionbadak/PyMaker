<div class="post-text" itemprop="text">
<p>currently I need to install some package using apt or rpm, according the OS.
I saw the lib "apt" to update or upgrade the system, but it is possible use it to install a single package?</p>
<p>I was trying to use too "subprocess":</p>
<pre><code>subprocess.Popen('apt-get install -y filetoinstall', shell=True, stdin=None, stdout=None, stderr=None, executable="/bin/bash")
</code></pre>
<p>But this command shows all process in the shell, I cannot hide it.</p>
<p>Thank you for your help.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>check_call</code> from the <code>subprocess</code> library. </p>
<pre><code>from subprocess import STDOUT, check_call
import os
check_call(['apt-get', 'install', '-y', 'filetoinstall'],
     stdout=open(os.devnull,'wb'), stderr=STDOUT) 
</code></pre>
<p>Dump the <code>stdout</code> to <code>/dev/null</code>, or <code>os.devnull</code> in this case.</p>
<p><code>os.devnull</code> is platform independent, and will return <code>/dev/null</code> on POSIX and <code>nul</code> on Windows (which is not relevant since you're using <code>apt-get</code> but, still good to know :) )</p>
</div>
<div class="post-text" itemprop="text">
<p>Thank guys ! I use part of each solution. My code:</p>
<pre><code>proc = subprocess.Popen('apt-get install -y FILE', shell=True, stdin=None, stdout=open(os.devnull,"wb"), stderr=STDOUT, executable="/bin/bash")
proc.wait()
</code></pre>
<p>Added: stdout and .wait </p>
<p>Thank you one more time from Argentina !</p>
</div>
<div class="post-text" itemprop="text">
<p>For this particular task, as an alternative to <code>subprocess</code> you might consider using <a href="http://docs.fabfile.org/en/1.14/" rel="nofollow noreferrer">Fabric</a>, a python deployment tool to automate builds.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use this to redirect the output to /dev/null:</p>
<pre><code>proc = subprocess.Popen('apt-get install -y filetoinstall', shell=True, stdin=None, stdout=open("/dev/null", "w"), stderr=None, executable="/bin/bash")
proc.wait()
</code></pre>
<p>The call to .wait() will block until the apt-get is complete.</p>
</div>
<span class="comment-copy">It seems you are not getting the forked properly. Have you tried reading the documentation?</span>
<span class="comment-copy">For Python 3.5+, see <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow noreferrer"><code>subprocess.run()</code></a></span>
<span class="comment-copy">Thank you Russell !</span>
<span class="comment-copy">@Cirux - You're very welcome.</span>
<span class="comment-copy">Thank guys ! I use part of each solution. My code:       proc = subprocess.Popen('apt-get install -y FILE', shell=True, stdin=None, stdout=open(os.devnull,"wb"), stderr=STDOUT, executable="/bin/bash")     proc.wait()  Added: stdout and .wait   Thank you one more time</span>
<span class="comment-copy">The link you have shared gives this :  Permission Denied  You don't have the proper permissions to view this page. Please contact the owner of this project to request permission.</span>
<span class="comment-copy">@Ayush: link updated</span>
<span class="comment-copy">Thanks very much.</span>
<span class="comment-copy">Ah ok thanks but how can I stop the program, waiting the apt finish the install, and when is installed , procced with the other functions?</span>
<span class="comment-copy">I updated my answer for you.</span>
<span class="comment-copy">Hey man, thank you very much from Argentina !!!</span>
<span class="comment-copy">Thank guys ! I use part of each solution. My code:       proc = subprocess.Popen('apt-get install -y FILE', shell=True, stdin=None, stdout=open(os.devnull,"wb"), stderr=STDOUT, executable="/bin/bash")     proc.wait()  Added: stdout and .wait   Thank you one more time</span>
