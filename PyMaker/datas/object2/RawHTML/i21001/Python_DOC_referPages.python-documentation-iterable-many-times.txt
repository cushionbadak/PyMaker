<div class="post-text" itemprop="text">
<p>In documenting a Python function, I find it more Pythonic to say:</p>
<pre><code>def Foo(i):
    """i: An interable containing…"""
</code></pre>
<p>…rather than…</p>
<pre><code>def Foo(i):
    """i: A list of …"""
</code></pre>
<p>When <code>i</code> really doesn't need to be a <code>list</code>. (<code>Foo</code> will happily operate on a <code>set</code>, <code>tuple</code>, etc.) The problem is generators. Generators typically only allow 1 iteration. <em>Most</em> functions are OK with generators or iterables that only allow a single pass, but some are not.</p>
<p>For those functions that cannot accept generators/things that can only be iterated once, is there a clear, consistent Python term to say "thing that can only be iterated more than once"?</p>
<p>The Python glossary for <a href="http://docs.python.org/glossary.html#term-iterable">iterable</a> and <a href="http://docs.python.org/glossary.html#term-iterator">iterator</a> seem to have a "once, but maybe more if you're lucky" definition.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know of a standard term for this, at least not offhand, but I think "reusable iterable" would get the point across if you need a short phrase.</p>
<p>In practice, it's generally possible to structure your function so that you don't need to iterate over <code>i</code> more than once. Alternatively, you can create a list out of the iterable and then iterate over the list as many times as you want; or you can use <code>itertools.tee</code> to get multiple independent "copies" of the iterator. That lets you accept a generator even if you do need to use it more than once.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is probably more a matter of style and preference than anything else, yet... I have a different take on my documentation: <strong>I always write the docstring according to the expected input in the context of the program</strong>.</p>
<p>Example: if I wrote a function that expect to go over keys of a dictionary and ignore its values I write:</p>
<pre><code>arg : a dictionary of...
</code></pre>
<p>even if <code>for e in arg:</code> would work with other iterables. I chose to do so, because within the context of my code, I don't care if the function would <em>still work</em>... I care more that whoever reads the documentation understand how that function is <em>meant to be used</em>.</p>
<p>On the other hand, if I am writing a <em>utility function</em> that can cope with a wide spectrum of iterables by design, I go one of these two ways:</p>
<ol>
<li><strong>document what kind of exception</strong> will be rose under certain conditions [ex: <em>"Raise TypeError if the iterable can't be iterated more than once"</em>]</li>
<li><strong>perform some pre-emptive argument handling</strong> that will make the function compatible with 'once-only' iterables.</li>
</ol>
<p>In other words, I try to <strong>either make my function solid enough to handle edge cases, or to be very outspoken on its limitations</strong>.</p>
<p>Again: there's nothing wrong with the approach you want to take, but I consider this one of the cases in which "<a href="http://www.python.org/dev/peps/pep-0020/" rel="nofollow">explicit is better than implicit</a>": a documentation in which is mentioned "reusable iterable" is definitively accurate, but the adjective could easily be overlooked.</p>
<p>HTH!</p>
</div>
<span class="comment-copy">A “collection”?  It seems to describe all the example types here.</span>
<span class="comment-copy">+1 to the usage of container, that seems to capture the underlying idea in the most concise way, but...I don't think I've seen "container" used in any Python documentation?</span>
<span class="comment-copy">A container is an object with a <code>__contains__()</code> method, which is neither necessary nor sufficient for a reusable iterable. <a href="http://docs.python.org/library/collections.html#collections.Container" rel="nofollow noreferrer">docs.python.org/library/collections.html#collections.Container</a></span>
<span class="comment-copy">Note that, as pointed out in the <a href="https://docs.python.org/3/library/itertools.html#itertools.tee" rel="nofollow noreferrer">docs</a>, "In general, if one iterator uses most or all of the data before another iterator starts, it is faster to use list() instead of tee()." In that case, <code>tee()</code> will copy/store the content several times whereas <code>list()</code> will only store it once.</span>
