<div class="post-text" itemprop="text">
<p>I've been teaching myself Python through the book "Learn Python The Hard Way" (2nd Edition).  In exercise 46 it told me to read up on Pip, Distribute, and a few other packages.</p>
<p>The documentation for pip was clear enough.  It allows me to install/uninstall, and upgrade packages.  Reading the documentation for distribute, it basically seems to do the same thing:</p>
<blockquote>Easily download, build, install, upgrade, and uninstall Python packages</blockquote>
<p>What's the difference between pip and distribute, and how do they relate to one another?</p>
</div>
<div class="post-text" itemprop="text">
<p>[<strong><em>2014-10 TL;DR:</em></strong>
<code>distribute</code> is dead, use <code>pip</code>, the new <code>setuptools</code>, and, for binary distributions, <code>wheels</code>.  More below.]</p>
<hr/>
<p><strong>[Original answer]</strong></p>
<p><a href="http://pypi.python.org/pypi/distribute" rel="noreferrer">Distribute</a> <del>is</del> was a fork of the older <a href="http://pypi.python.org/pypi/setuptools" rel="noreferrer">setuptools</a> so nearly all comments that follow apply equally to Distribute and setuptools.  Setuptools was an attempt to fill in a number of holes in the even older Python standard library package, <a href="http://docs.python.org/3/distutils/index.html" rel="noreferrer">Distutils</a>.  Setuptools added functions like automatic downloads of packages via a command-line interface, <code>easy_install</code>, and some level of dependency management.  However, a segment of the Python community is of the opinion that setuptools is too intrusive and has too much behind-the-scenes magic for some of its features.</p>
<p><code>pip</code> is a higher-level interface on top of setuptools or Distribute.  It uses them to perform many of its functions but avoids some of their more controversial features, like zipped eggs.  <code>pip</code> also provides features not available in <code>setuptools</code>, like an uninstall command and the ability to define fixed sets of requirements and reliably reproduce a set of packages.  There is a more complete feature comparison <a href="http://pypi.python.org/pypi/pip" rel="noreferrer">here</a>.</p>
<p>Why are there so many components (and there are more, like <a href="http://www.buildout.org/" rel="noreferrer"><code>buildout</code></a>)?  Lots of reasons: solutions must work across all of the major platforms on which Python is supported (i.e. Unix-y, Windows, Mac OS X), so building and installation present a <em>complex</em> set of problems; like many open-source projects, Python is essentially all-volunteer and many developers just aren't all that interested in packaging and installation issues; there is a natural conservatism about adding major new unproven features to the standard library; differences in opinions, etc etc.</p>
<p>At the moment, there is a project underway to provide a replacement for Distutils and possibly for some of the higher-level add-ons.  It is planned to be released in the Python 3.3 standard library as the <a href="http://docs.python.org/dev/library/packaging.html" rel="noreferrer"><code>packaging</code></a> package and as an add-on for older versions of Python as <a href="http://pypi.python.org/pypi/Distutils2/" rel="noreferrer"><code>Distutils2</code></a>.</p>
<p>To summarize, the current relationship is:</p>
<pre><code>pip -&gt; [ setuptools | Distribute ] -&gt; Distutils -&gt; Python core
                                    |
    3rd party packages              |      included in Python
                                    |
</code></pre>
<hr/>
<p><strong>UPDATE (2012-07)</strong>: Prior to feature code cutoff for Python 3.3, it was decided that <code>packaging</code> was not quite ready yet for release in the standard library so it has been removed from the 3.3 release.  Work will continue on <code>Distutils2</code> which is available via PyPI and on what will be included in the standard library for Python 3.4.</p>
<hr/>
<p><strong>UPDATE (2014-10):</strong> There have been further changes in the world of Python packaging since this answer was last updated.</p>
<ul>
<li><p>Most importantly, since mid-2013, the rift between <code>setuptools</code> and
<code>distribute</code> has been healed and development activity <a href="http://pythonhosted.org//setuptools/merge.html" rel="noreferrer">has been merged
into a new <code>setuptools</code> project</a>.  <code>distribute</code> is now
deprecated and no longer maintained; use the new <code>setuptools</code> instead
but don't use its <code>easy_install</code> as an installer.</p></li>
<li><p><code>pip</code> has become the de-facto and blessed installer tool (for Python
packages not otherwise provided by your platform's package manager)
either in- or outside of virtual environments (<a href="http://virtualenv.readthedocs.org/en/latest/" rel="noreferrer"><code>virtualenv</code></a> or <a href="https://docs.python.org/3/library/venv.html" rel="noreferrer"><code>pyvenv</code></a>).</p></li>
<li><p>Instead of the old <code>setuptools</code> bdist <code>eggs</code>, <a href="https://pip.pypa.io/en/latest/reference/pip_wheel.html" rel="noreferrer"><code>wheels</code></a> have
become the blessed binary distribution format for Python packages.</p></li>
<li><p><a href="http://www.python.org/dev/peps/pep-0453/" rel="noreferrer">As of Python 3.4</a>, <a href="https://docs.python.org/3/library/ensurepip.html" rel="noreferrer">a version of <code>pip</code></a> with <code>wheel</code> support
is now shipped with the official <code>python.org</code> binary installers and
source packages and it is anticipated that <code>pip</code> will also be
included in the <a href="http://www.python.org/dev/peps/pep-0477/" rel="noreferrer">next maintenance release of Python 2.7</a> (2.7.9).</p></li>
<li><p><code>Distutils2</code> and <code>packaging</code> are now dormant.</p></li>
</ul>
<p>More details in the new <a href="https://docs.python.org/3/distributing/index.html" rel="noreferrer">Distributing Python Modules</a> section of the Python 3 docs and the new <a href="https://packaging.python.org/en/latest/index.html" rel="noreferrer">Python Packaging User Guide</a>.</p>
</div>
<span class="comment-copy">Related: <a href="http://stackoverflow.com/questions/6344076/differences-between-distribute-distutils-setuptools-and-distutils2" title="differences between distribute distutils setuptools and distutils2">stackoverflow.com/questions/6344076/â€¦</a></span>
<span class="comment-copy">That's a great explanation, thank you!  I'm coming from a PHP background so it's kind of overwhelming how many overlapping modules/packages you have to understand.</span>
<span class="comment-copy">Doing the same tutorial and your advice helped a lot. Thanks Ned.</span>
<span class="comment-copy">There have been a <i>lot</i> of changes in the Python packaging world since the original answer.  See the latest update for more current information.</span>
