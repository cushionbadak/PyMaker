<div class="post-text" itemprop="text">
<p>I'm tying to make a card game. What I'm stuck on is dealing the cards. What I've done is make a dict with each card and given it a value because some are worth more than others. What I have in mind is dividing the dictionary into 4 parts, or make 4 copies of each dictionary and then delete 39 cards from each of them (leaving 13 cards for each person). Is this even possible or am I going about this in the wrong way? </p>
<pre><code>from random import randint
deck = {}
def makeDeck(deck):
  suit = ['Club', 'Spade', 'Heart', 'Diamond']
  whichSuit = 0
  whichNum = 2
  count = 1
  while count != 52:
    if whichNum == 11:
      whichNum = 'Jack'
    if whichNum == 12:
      whichNum = 'Queen'
    if whichNum == 13:
      whichNum = 'King'
    if whichNum == 14:
      whichNum = 'Ace'
    deck[str(whichNum)+' '+suit[whichSuit]] = count
    count += 1
    if whichNum == 'Jack':
      whichNum = 11
    if whichNum == 'Queen':
      whichNum = 12
    if whichNum == 'King':
      whichNum = 13
    if whichNum == 'Ace':
      whichNum = 14
    whichNum += 1
    if count == 13 or count == 26 or count == 39:
     whichSuit += 1
     whichNum = 2
def dealCards(deck):
  me = deck
  comp1 = deck
  comp2 = deck
  comp2 = deck
</code></pre>
<p>(Sorry if the code is wrong, this is my first post, Thanks)</p>
</div>
<div class="post-text" itemprop="text">
<p>Sounds like a great occasion to use classes! I would do it like this:</p>
<pre><code>from random import shuffle

class Cards:
    def __init__(self):
        values = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']
        suites = ['H', 'S', 'C', 'D']
        self.deck = [j + i for j in values for i in suites]

    def shuffle(self):
        shuffle(self.deck)

    def deal(self, n_players):
        self.hands = [self.deck[i::n_players] for i in range(0, n_players)]

c = Cards()
print c.deck
c.shuffle()
print c.deck
c.deal(4)
print c.hands
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not very experienced with the dictionary functions in Python but what I would do is use card objects and <strike>set</strike> lists with shuffle.</p>
<pre><code>from random import shuffle    
class Card:
    def __init__(self,suit,num):
        self.suit = suit
        self.num = num

deck = list()
suits = ['Diamond', 'Heart', 'Spade', 'Club']

nums = ['2','3','4','5','6','7','8','9','10','J','Q','K','A']

for suit in suits: #This is the code that actually makes a deck
    for num in nums:
        deck.append(Card(suit,num))

shuffle(deck)
for number in range(13):
    for player in range(4):
        #deal cards here using deck.pop()
        print(deck.pop().num) #just to prove it works randomly =P        
</code></pre>
<p>I hope that answers your question (because like this is your first question this is my first answer)</p>
<p>Edit: Oops sets is deprecated. Using the built-in set instead. </p>
<p>Edit2: And set.pop() isn't truly random it appears from reading further, just arbitrary. Boy is my face red.</p>
</div>
<div class="post-text" itemprop="text">
<p>One option for you would be simply to use python's built-in function <code>random.shuffle</code>. Don't bother with dictionaries; just create a list of cards and shuffle it whole:</p>
<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'K', 'Q']
&gt;&gt;&gt; suits = ['C', 'D', 'H', 'S']
&gt;&gt;&gt; cards = [[rank, suit] for rank in ranks for suit in suits]
&gt;&gt;&gt; random.shuffle(cards)
&gt;&gt;&gt; cards
[['J', 'S'], ['2', 'S'], ['3', 'S'], ['9', 'S'], ['9', 'D'], ['5', 'S'], 
 ['8', 'H'], ['A', 'C'], ['4', 'D'], ['Q', 'H'], ['2', 'C'], ['Q', 'D'], 
 ['7', 'H'], ['4', 'C'], ['7', 'S'], ['6', 'C'], ['K', 'H'], ['6', 'S'], 
 ['9', 'C'], ['9', 'H'], ['A', 'H'], ['J', 'C'], ['2', 'D'], ['J', 'H'], 
 ['3', 'H'], ['4', 'H'], ['8', 'C'], ['Q', 'S'], ['10', 'S'], ['A', 'S'], 
 ['K', 'S'], ['5', 'D'], ['10', 'D'], ['8', 'D'], ['7', 'C'], ['5', 'C'], 
 ['Q', 'C'], ['3', 'D'], ['8', 'S'], ['6', 'H'], ['A', 'D'], ['2', 'H'], 
 ['6', 'D'], ['K', 'D'], ['10', 'C'], ['5', 'H'], ['4', 'S'], ['K', 'C'], 
 ['7', 'D'], ['10', 'H'], ['3', 'C'], ['J', 'D']]
</code></pre>
<p>If you need to roll your own, consider the <a href="http://www.codinghorror.com/blog/2007/12/the-danger-of-naivete.html" rel="nofollow">Fisher-Yates shuffle</a>. It's super simple.</p>
<p>At the risk of stating the dreadfully obvious, once you have a shuffled list, you can simply deal it by slicing it like so:</p>
<pre><code>&gt;&gt;&gt; hand1 = cards[0:13]
&gt;&gt;&gt; hand2 = cards[13:26]
# ...and so on...
</code></pre>
<p>Or in whatever more complicated way you need. (However, note that there's no need to cycle through the hands or anything like that; since it's already random, simple slicing will suffice.)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can <code>distribute</code> cards among n players using the <a href="https://github.com/erikrose/more-itertools" rel="nofollow noreferrer"><code>more_itertools</code></a> library.</p>
<p><strong>Playing Cards</strong></p>
<pre><code>import itertools as it

import more_itertools as mit


# Build a Deck
suits = "♥♠♣♦"
ranks = list(range(2, 11)) + list("JQKA")
cards = list(it.product(suits, ranks))
print("Number of cards:", len(cards))
# Out: Number of cards: 52

# Shuffle and Distribute
players = 5
random.shuffle(cards)
hands = [list(hand) for hand in list(mit.distribute(players, cards))]
hands[0]                                               # player 1
</code></pre>
<p>Output</p>
<pre><code>[('♥', 'A'),
('♥', 6),
('♦', 9),
('♠', 'A'),
('♥', 7),
('♠', 8),
('♣', 10),
('♦', 'K'),
('♥', 4),
('♠', 4),
('♠', 'Q')]
</code></pre>
<p>It looks like player 1 has 2 pair.</p>
<hr/>
<p><strong>What is this tool doing?</strong></p>
<p><a href="https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.distribute" rel="nofollow noreferrer"><code>more_itertools.distribute</code></a> equally distributes items from an iterable among n sub-groups.</p>
<p>Modified example from <a href="https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.distribute" rel="nofollow noreferrer">the docs</a>:</p>
<pre><code>&gt;&gt;&gt; n, iterable = 3, [1, 2, 3, 4, 5, 6, 7]
&gt;&gt;&gt; children = distribute(n, iterable)
&gt;&gt;&gt; [list(c) for c in children]
[[1, 4, 7], [2, 5], [3, 6]]
</code></pre>
<p><code>more_itertools</code> is a third-party package comprising <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">itertools recipes</a> and many other <a href="https://more-itertools.readthedocs.io/en/latest/" rel="nofollow noreferrer">useful tools</a>.</p>
</div>
<span class="comment-copy">Great use of the step value in the slicing</span>
<span class="comment-copy">the "randomness" that you use (order of <code>Card()</code> objects inside <code>set()</code>) depends on <code>hash()</code> implementation that for CPython and user-defined classes by default is <code>id()</code> i.e, the address in memory. It is a <i>very</i> poor substitute for randomness. You could put the <code>Card()</code> objects into an ordinary Python list instead of a <code>set</code> and use <code>random.shuffle()</code> to shuffle the deck as in <a href="http://stackoverflow.com/a/8469173/4279">@Benjamin's answer</a>.</span>
<span class="comment-copy">The question is also asking about dealing the cards...</span>
<span class="comment-copy">@Benjamin, once the cards are shuffled, dealing is less than trivial. I chose not to insult the OP's intelligence.</span>
<span class="comment-copy">A comical response... The OP says that is the part he is stuck on...</span>
<span class="comment-copy">@Benjamin, I doubt that he literally meant that "distributing the deck into hands" was his problem. But I suppose it's possible; edited.</span>
