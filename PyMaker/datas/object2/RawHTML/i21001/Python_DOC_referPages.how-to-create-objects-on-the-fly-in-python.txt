<div class="post-text" itemprop="text">
<p>How do I create objects on the fly in Python? I often want to pass information to my Django templates which is formatted like this:</p>
<pre><code>{'test': [a1, a2, b2], 'test2': 'something else', 'test3': 1}
</code></pre>
<p>which makes the template look untidy. so I think it's better to just create an object which is like:</p>
<pre><code>class testclass():
    self.test = [a1,a2,b2]
    self.test2 = 'someting else'
    self.test3 = 1
testobj = testclass()
</code></pre>
<p>so I can do:</p>
<pre><code>{{ testobj.test }}
{{ testobj.test2 }}
{{ testobj.test3 }}
</code></pre>
<p>instead of calling the dictionary.</p>
<p>Since I just need that object once, is it possible to create it without writing a class first? Is there any short-hand code? Is it ok to do it like that or is it bad Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use built-in <a href="http://docs.python.org/library/functions.html#type">type function</a>:</p>
<pre><code>testobj = type('testclass', (object,), 
                 {'test':[a1,a2,b2], 'test2':'something else', 'test3':1})()
</code></pre>
<p>But in this specific case (data object for Django templates), you should use @Xion's solution.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Django templates, the dot notation (<code>testobj.test</code>) can resolve to the Python's <code>[]</code> operator. This means that all you need is an ordinary dict:</p>
<pre><code>testobj = {'test':[a1,a2,b2], 'test2':'something else', 'test3':1}
</code></pre>
<p>Pass it as <code>testobj</code> variable to your template and you can freely use <code>{{ testobj.test }}</code> and similar expressions inside your template. They will be translated to <code>testobj['test']</code>. No dedicated class is needed here.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://docs.python.org/library/collections.html#collections.namedtuple"><code>collections.namedtuple</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is another solution in <a href="https://docs.python.org/3/library/types.html#types.SimpleNamespace" rel="noreferrer">Python 3.3+</a> <code>types.SimpleNamespace</code></p>
<pre><code>from types import SimpleNamespace
test_obj = SimpleNamespace(a=1, b=lambda: {'hello': 42})

test_obj.a
test_obj.b()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>use building function type: <a href="http://%20https://docs.python.org/3/library/functions.html#type" rel="nofollow noreferrer">document</a></p>
<pre><code>&gt;&gt;&gt; class X:
...     a = 1
...
&gt;&gt;&gt; X = type('X', (object,), dict(a=1))
</code></pre>
<p>first and second X are identical</p>
</div>
<div class="post-text" itemprop="text">
<p>The code below also require a class to be created however it is shorter:</p>
<pre><code> &gt;&gt;&gt;d = {'test':['a1','a2','b2'], 'test2':'something else', 'test3':1}
 &gt;&gt;&gt; class Test(object):
 ...  def __init__(self):
 ...   self.__dict__.update(d)
 &gt;&gt;&gt; a = Test()
 &gt;&gt;&gt; a.test
 ['a1', 'a2', 'b2']
 &gt;&gt;&gt; a.test2
 'something else'
</code></pre>
</div>
<span class="comment-copy">Well, first you've got to get the fly to stand still.  Then you need to create some VERY SMALL objects...  (Sorry, couldn't resist.)</span>
<span class="comment-copy">Please don't do this. Simple is better than complex.</span>
<span class="comment-copy">@number5 I will vote for your answer if you also suggest not to use this code! (at least not for this specific case)</span>
<span class="comment-copy">+1 This answers the question that I asked to Google.</span>
<span class="comment-copy">Although this is really handy for creating ad hoc objects for stubbing during testing, i.e. from a dictionary.  Thanks.</span>
<span class="comment-copy">thank you, that solved the django related part of my problem :) i just checked the other answer because people coming here from google would probably prefer to see the python related answer.</span>
<span class="comment-copy">@JasonTS, the python related answer would be to use Karl Knechtel's answer of <code>collections.namedtuple</code>.</span>
