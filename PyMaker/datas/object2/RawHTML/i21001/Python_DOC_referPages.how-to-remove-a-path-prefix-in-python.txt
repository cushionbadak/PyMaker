<div class="post-text" itemprop="text">
<p>I wanted to know what is the pythonic function for this : </p>
<p>I want to remove everything before the <code>wa</code> path.</p>
<pre><code>p = path.split('/')
counter = 0
while True:
    if p[counter] == 'wa':
        break
    counter += 1
path = '/'+'/'.join(p[counter:])
</code></pre>
<p>For instance, I want <code>'/book/html/wa/foo/bar/'</code> to become <code>'/wa/foo/bar/'</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>A better answer would be to use os.path.relpath:</p>
<p><a href="http://docs.python.org/2/library/os.path.html#os.path.relpath" rel="noreferrer">http://docs.python.org/2/library/os.path.html#os.path.relpath</a></p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; full_path = '/book/html/wa/foo/bar/'
&gt;&gt;&gt; print os.path.relpath(full_path, '/book/html')
'wa/foo/bar'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; path = '/book/html/wa/foo/bar/'
&gt;&gt;&gt; path[path.find('/wa'):]
'/wa/foo/bar/'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For Python 3.4+, you should use <a href="https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.relative_to" rel="nofollow noreferrer">pathlib.PurePath.relative_to</a>.
From the documentation:</p>
<pre><code>&gt;&gt;&gt; p = PurePosixPath('/etc/passwd')
&gt;&gt;&gt; p.relative_to('/')
PurePosixPath('etc/passwd')

&gt;&gt;&gt; p.relative_to('/etc')
PurePosixPath('passwd')

&gt;&gt;&gt; p.relative_to('/usr')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "pathlib.py", line 694, in relative_to
    .format(str(self), str(formatted)))
ValueError: '/etc/passwd' does not start with '/usr'
</code></pre>
<p>Also see <a href="https://stackoverflow.com/questions/7287996/python-get-relative-path-from-comparing-two-absolute-paths">this StackOverflow question</a> for more answers to your question. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import re

path = '/book/html/wa/foo/bar/'
m = re.match(r'.*(/wa/[a-z/]+)',path)
print m.group(1)
</code></pre>
</div>
<span class="comment-copy">Fyi, when dealing with paths better use the split/join functions from the <code>os.path</code> module</span>
<span class="comment-copy">This is a much better answer because it avoids any issues with different path separators.</span>
<span class="comment-copy">Totally agree with @intrepidhero's comment, plus this works whether or not <code>full_path</code> contains the trailing <code>/</code> character or notâ€”so it's even more general than that.</span>
<span class="comment-copy">+1: compared to using a regular expression, this is simpler, and probably about as fast.</span>
<span class="comment-copy">This returns the last character if the string doesn't contain <code>/wa</code> (<code>path[-1:]</code>), so if that might happen you'd want to check <code>if "/wa" in path</code> first</span>
<span class="comment-copy">alternately, you can use <code>str.index</code> instead of <code>str.find</code> to raise an exception when the needle is not in the haystack.</span>
<span class="comment-copy">This doesn't work with multiple folders of same names.</span>
<span class="comment-copy">Managing paths as if they were mere strings is asking for trouble...</span>
<span class="comment-copy">While the <code>pathlib</code> module is very "user friendly", it wasn't created until very late in the game. Personally I still prefer using <code>os.path.relpath()</code> as shown in the <a href="https://stackoverflow.com/a/19856910/355230">accepted answer</a> because it will work in most versions of Python (including Python 2).</span>
<span class="comment-copy">This helps for my second question which was how to remove the last path if it is a integer. Nice :)</span>
