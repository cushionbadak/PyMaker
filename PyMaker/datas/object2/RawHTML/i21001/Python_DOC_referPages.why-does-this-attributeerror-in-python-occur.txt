<div class="post-text" itemprop="text">
<p>There is one thing, that I do not understand.</p>
<p>Why does this</p>
<pre><code>import scipy # happens with several other modules, too. I took scipy as an example now...

matrix = scipy.sparse.coo_matrix(some_params)
</code></pre>
<p>produce this error:</p>
<pre><code>AttributeError: 'module' object has no attribute 'sparse'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This happens because the <code>scipy</code> module doesn't have any attribute named <code>sparse</code>. That attribute only gets defined when you <code>import scipy.sparse</code>.</p>
<p>Submodules don't automatically get imported when you just <code>import scipy</code>; you need to import them explicitly. The same holds for most packages, although a package can choose to import its own submodules if it wants to. (For example, if <code>scipy/__init__.py</code> included a statement <code>import scipy.sparse</code>, <em>then</em> the <code>sparse</code> submodule would be imported whenever you import <code>scipy</code>.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Because you imported scipy, not sparse. Try <code>from scipy import sparse</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/exceptions.html#AttributeError" rel="nofollow">AttributeError</a> is raised when attribute of the object is not available.</p>
<p>An <a href="https://docs.python.org/3/reference/expressions.html#attribute-references" rel="nofollow">attribute reference</a> is a primary followed by a period and a name:</p>
<blockquote>
<p>attributeref ::=  primary "." identifier</p>
</blockquote>
<p>To return a list of valid attributes for that object, use <a href="https://docs.python.org/3/library/functions.html#dir" rel="nofollow"><code>dir()</code></a>, e.g.:</p>
<pre><code>dir(scipy)
</code></pre>
<p>So probably you need to do simply: <code>import scipy.sparse</code></p>
</div>
<div class="post-text" itemprop="text">
<p>The default namespace in Python is <code>"__main__"</code>. When you use <code>import scipy</code>, Python creates a separate namespace as your module name.
The rule in Pyhton is: when you want to call an attribute from another namespaces you have to use the fully qualified attribute name.</p>
</div>
<span class="comment-copy">What's so bothersome about that? What do you expect to happen if <code>sparse</code> does not exist in the module?</span>
<span class="comment-copy">I didn't realize, that sparse is a <i>submodule</i> of scipy, and that submodules are <b><i>not</i></b> imported automatically</span>
<span class="comment-copy">downvoters should explain why they downvoted, I don't see what's wrong with this question. In fact, I think it's a very good question</span>
<span class="comment-copy">Thanks @julio.alegria, its good to hear that from an other person. :-)</span>
<span class="comment-copy">I didn't know, that submodules are not automatically get imported. Thanks!</span>
<span class="comment-copy">It actually depends on the package whether submodules are automatically imported as well.</span>
<span class="comment-copy">@Ethan: true, I edited a note to that effect into the answer.</span>
<span class="comment-copy">I think it's worth noting that the main reason for this is the existence of case insensitive file systems (i.e. Windows). On such a system, it can be difficult to know whether a file "sparse.py" should be imported as a module called <code>sparse</code>,  or <code>Sparse</code>, or even <code>SParse</code> or <code>sParse</code> (if it had something to do with parsing S-expressions, perhaps). Python elects to guarantee consistent behaviour on case sensitive and case insensitive file systems by requiring an explicit import to tell it the proper name (either in your program or in the package <code>__init__.py</code>).</span>
<span class="comment-copy">@Ben, I feel like yours is the best answer to this question.</span>
