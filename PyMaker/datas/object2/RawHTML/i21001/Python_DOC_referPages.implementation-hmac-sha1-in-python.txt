<div class="post-text" itemprop="text">
<p>I am trying to use the OAuth of a website, which requires the signature method to be 'HMAC-SHA1' only.</p>
<p>I am wondering how to implement this in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>Pseudocodish:</p>
<pre><code>def sign_request():
    from hashlib import sha1
    import hmac

    # key = b"CONSUMER_SECRET&amp;" #If you dont have a token yet
    key = b"CONSUMER_SECRET&amp;TOKEN_SECRET" 


    # The Base String as specified here: 
    raw = b"BASE_STRING" # as specified by OAuth

    hashed = hmac.new(key, raw, sha1)

    # The signature
    return hashed.digest().encode("base64").rstrip('\n')
</code></pre>
<p>Signature errors usually reside in the base-string, make sure you understand this (as stated by the OAuth1.0 spec here: <a href="http://tools.ietf.org/html/draft-hammer-oauth-10#section-3.4.1" rel="nofollow noreferrer">http://tools.ietf.org/html/draft-hammer-oauth-10#section-3.4.1</a>).</p>
<p>The following inputs are used to generate the Signature Base String:</p>
<ol>
<li>HTTP Method (for example GET)</li>
<li>Path (for example <a href="http://photos.example.net/photos" rel="nofollow noreferrer">http://photos.example.net/photos</a>)</li>
<li><p>Parameters, alphabetically, such as (line breaks for readability): </p>
<pre><code>file=vacation.jpg
&amp;oauth_consumer_key=dpf43f3p2l4k3l03
&amp;oauth_nonce=kllo9940pd9333jh
&amp;oauth_signature_method=HMAC-SHA1
&amp;oauth_timestamp=1191242096
&amp;oauth_token=nnch734d00sl2jdk
&amp;oauth_version=1.0
&amp;size=original
</code></pre></li>
</ol>
<p>Concatenate and URL encode each part and it ends up as:</p>
<p><code>GET&amp;http%3A%2F%2Fphotos.example.net%2Fphotos&amp;file%3Dvacation.jpg%26
oauth_consumer_key%3Ddpf43f3p2l4k3l03%26oauth_nonce%3Dkllo9940pd9333jh%26
oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1191242096%26
oauth_token%3Dnnch734d00sl2jdk%26oauth_version%3D1.0%26size%3Doriginal</code></p>
</div>
<div class="post-text" itemprop="text">
<p>For the love of God, if you do ANYTHING with oauth, use the <code>requests</code> library for Python! I tried to implement HMAC-SHA1 using the <code>hmac</code> library in Python and it's a lot of headaches, trying to create the correct oauth base string and such. Just use requests and it's as simple as:</p>
<pre><code>&gt;&gt;&gt; import requests
&gt;&gt;&gt; from requests_oauthlib import OAuth1

&gt;&gt;&gt; url = 'https://api.twitter.com/1.1/account/verify_credentials.json'
&gt;&gt;&gt; auth = OAuth1('YOUR_APP_KEY', 'YOUR_APP_SECRET', 'USER_OAUTH_TOKEN', 'USER_OAUTH_TOKEN_SECRET')

&gt;&gt;&gt; requests.get(url, auth=auth)
</code></pre>
<p><a href="http://docs.python-requests.org/en/latest/user/authentication/" rel="noreferrer">Requests Authentication</a></p>
<p><a href="https://pypi.python.org/pypi/requests-oauthlib/0.5.0" rel="noreferrer">Requests Oauth Library</a></p>
</div>
<div class="post-text" itemprop="text">
<p>It's already there <a href="https://docs.python.org/3/library/hmac.html#module-hmac" rel="nofollow noreferrer">Keyed-Hashing for Message Authentication</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Finally here's an actually working solution (tested with Python 3) utilizing <a href="https://github.com/idan/oauthlib" rel="nofollow">oauthlib</a>.</p>
<p>I use the first OAuth step given as an example in the official RTF <a href="https://tools.ietf.org/html/rfc5849" rel="nofollow">1</a>:</p>
<pre><code>Client Identifier: dpf43f3p2l4k3l03
Client Shared-Secret: kd94hf93k423kf44

POST /initiate HTTP/1.1
Host: photos.example.net
Authorization: OAuth realm="Photos",
    oauth_consumer_key="dpf43f3p2l4k3l03",
    oauth_signature_method="HMAC-SHA1",
    oauth_timestamp="137131200",
    oauth_nonce="wIjqoS",
    oauth_callback="http%3A%2F%2Fprinter.example.com%2Fready",
    oauth_signature="74KNZJeDHnMBp0EMJ9ZHt%2FXKycU%3D"
</code></pre>
<p>The value for <code>oauth_signature</code> is what we would like to calculate.</p>
<p>The following defines what we want to sign:</p>
<pre><code># There is no query string present.
# In case of http://example.org/api?a=1&amp;b=2 - the value
# would be "a=1&amp;b=2".
uri_query=""

# The oauthlib function 'collect_parameters' automatically
# ignores irrelevant header items like 'Content-Type' or
# 'oauth_signature' in the 'Authorization' section.
headers={
    "Authorization": (
        'OAuth realm="Photos", '
        'oauth_nonce="wIjqoS", '
        'oauth_timestamp="137131200", '
        'oauth_consumer_key="dpf43f3p2l4k3l03", '
        'oauth_signature_method="HMAC-SHA1", '
        'oauth_callback="http://printer.example.com/ready"'
    )
}

# There's no POST data here - in case it was: x=1 and y=2,
# then the value would be '[("x","1"),("y","2")]'.
data=[]

# This is the above specified client secret which we need
# for calculating the signature.
client_secret="kd94hf93k423kf44"
</code></pre>
<p>And here we go:</p>
<pre><code>import oauthlib.oauth1.rfc5849.signature as oauth

params = oauth.collect_parameters(
    uri_query="",
    body=data, 
    headers=headers,
    exclude_oauth_signature=True, 
    with_realm=False
)

norm_params = oauth.normalize_parameters(params)

base_string = oauth.construct_base_string(
    "POST", 
    "https://photos.example.net/initiate", 
    norm_params
)

sig = oauth.sign_hmac_sha1(
    base_string, 
    client_secret, 
    '' # resource_owner_secret - not used
)
</code></pre>
<hr/>
<pre><code>from urllib.parse import quote_plus

print(sig)
# 74KNZJeDHnMBp0EMJ9ZHt/XKycU=

print(quote_plus(sig))
# 74KNZJeDHnMBp0EMJ9ZHt%2FXKycU%3D
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are multiple python libraries available at <a href="http://oauth.net/code/" rel="nofollow">the oauth website</a>, but if you're just interested in a specific implementation you could have a look at <a href="http://oauth.googlecode.com/svn/code/python/oauth/oauth.py" rel="nofollow">one of them</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try following method.</p>
<pre><code>def _hmac_sha1(input_str):
        raw = input_str.encode("utf-8")
        key = 'your_key'.encode('utf-8')
        hashed = hmac.new(key, raw, hashlib.sha1)
        return base64.encodebytes(hashed.digest()).decode('utf-8')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.7 there is an optimized way to do this. HMAC(key, msg, digest).digest() uses an optimized C or inline implementation, which is faster for messages that fit into memory.</p>
<blockquote>
<p>Return digest of msg for given secret key and digest. The function is
  equivalent to HMAC(key, msg, digest).digest(), but uses an optimized C
  or inline implementation, which is faster for messages that fit into
  memory. The parameters key, msg, and digest have the same meaning as
  in new().</p>
<p>CPython implementation detail, the optimized C implementation is only
  used when digest is a string and name of a digest algorithm, which is
  supported by OpenSSL.</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/hmac.html#hmac.digest" rel="nofollow noreferrer">https://docs.python.org/3/library/hmac.html#hmac.digest</a></p>
</div>
<span class="comment-copy">What's the [:-1] at the end for?</span>
<span class="comment-copy">Thanks for asking, I've always wondered myself. I will investigate...</span>
<span class="comment-copy">Oh, the last character is a <code>\n</code>, should not be part of the signature.</span>
<span class="comment-copy">You could use <code>.rstrip('\n')</code> in place of the <code>[:1]</code> if you wanted to sacrifice some brevity to make it quite clear that you are chopping off a trailing newline.</span>
<span class="comment-copy">Could you please explain why you use <code>binascii.b2a_base64</code> and just couldn't simply do <code>hashed.digest().encode("base64")</code>?</span>
<span class="comment-copy">after 2 days of searching for a solution to what's wrong with my api call (<a href="http://stackoverflow.com/questions/39164472/verification-of-signature-failed-oauth-1-upwork-api" title="verification of signature failed oauth 1 upwork api">stackoverflow.com/questions/39164472/â€¦</a>) i finally just used your trick and moved on</span>
<span class="comment-copy">This answered a few questions of my own; I had to add my private key and signature type to the OAuth1 object instantiation (see info here <a href="http://requests-oauthlib.readthedocs.io/en/latest/oauth1_workflow.html" rel="nofollow noreferrer">link</a> eg: ` token_auth = OAuth1(consumer_key, consumer_secret, auth_token,token_secret,                     rsa_key=pkeystring,signature_type='auth_header')` [caveat, I was looking for RSA signing, so had to add <code>signature_method=SIGNATURE_RSA,</code> too]</span>
<span class="comment-copy">@KayCee Glad I could help. Remember in Python: Simple &gt; Complex.</span>
