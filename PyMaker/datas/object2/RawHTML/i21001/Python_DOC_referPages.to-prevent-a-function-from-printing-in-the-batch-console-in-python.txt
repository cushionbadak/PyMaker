<div class="post-text" itemprop="text">
<p>Well, the headline seems to me sufficient.
I use some function that at some points print something in the console.
As I can't modify them, I would like to know if there is a solution to not printing while using these functions.</p>
<p>Thanks a lot !</p>
<p>Nico</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, you can redirect <code>sys.stdout</code>:</p>
<pre><code>import sys
import os

sys.stdout = open(os.devnull, "w")

my_nasty_function()

sys.stdout = sys.__stdout__
</code></pre>
<p>Just replace <code>my_nasty_function</code> with your actual function.</p>
<p><strong>EDIT:</strong> Now should work on windows aswell and makes use of <code>sys.__stdout__</code> instead of a backup variable.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/a/8447352/60711">Constantinius' answer</a> answer is ok, however there is no need to actually open null device. And BTW, if you want portable null device, there is <a href="http://docs.python.org/library/os.html#os.devnull" rel="nofollow noreferrer"><code>os.devnull</code></a>. </p>
<p>Actually, all you need is a class which will ignore whatever you write to it. So more portable version would be:</p>
<pre><code>class NullIO(StringIO):
    def write(self, txt):
       pass

sys.stdout = NullIO()

my_nasty_function()

sys.stdout = sys.__stdout__
</code></pre>
<p>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Constantinius' solution will work on *nix, but this should work on any platform:</p>
<pre><code>import sys
import tempfile

sys.stdout = tempfile.TemporaryFile()

# Do crazy stuff here

sys.stdout.close()
#now the temp file is gone
sys.stdout = sys.__stdout__
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use a modified version of this <a href="https://stackoverflow.com/a/3378965/355230">answer</a> to create a "null" output context to wrap the call the function in.</p>
<p>That can be done by just passing <a href="https://docs.python.org/3/library/os.html#os.devnull" rel="nofollow noreferrer"><code>os.devull</code></a> as the <code>new_stdout</code> argument to the <code>stdout_redirected()</code> context manager function when it's used.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another open would be to wrap your function in a decorator.</p>
<pre><code>import sys
from io import stringIO 

class NullIO(StringIO):
    def write(self, txt):
        pass


def silent(fn):
    """Decorator to silence functions."""
    def silent_fn(*args, **kwargs):
        saved_stdout = sys.stdout
        sys.stdout = NullIO()
        result = fn(*args, **kwargs)
        sys.stdout = saved_stdout
        return result
    return silent_fn


def nasty():
    """Uselful function with nasty prints."""
    print('a lot of annyoing output')
    return 42


# Wrap in decorator to prevent printing.
silent_nasty = silent(nasty)
# Same output, but prints only once.
nasty(), silent_nasty()
</code></pre>
</div>
<span class="comment-copy">What's the <code>batch console</code>? Are you talking about <code>stdout</code>?</span>
<span class="comment-copy">That's a sign of bad design. If possible, fix the function. Otherwise, if the function is using Python's <code>print</code>, you could temporarily replace <code>sys.stdout</code> with an object with an empty <code>write</code> method.</span>
<span class="comment-copy">It works great ! Thanks a lot ! :)</span>
<span class="comment-copy">There's no need for <code>backup_stdout</code>, as you can use <code>sys.stdout = sys.__stdout__</code> to restore the original (see <a href="http://docs.python.org/library/sys.html#sys.__stdout__" rel="nofollow noreferrer">here</a>). Also, it would be better to use <a href="http://docs.python.org/library/os.html#os.devnull" rel="nofollow noreferrer"><code>os.devnull</code></a>, so that it will work on Windows.</span>
<span class="comment-copy">ekhumoro: thanks, didn' knew that. I'll update my answer.</span>
<span class="comment-copy">@ekhumoro <code>backup_stdout</code> is a better solution since your code can be treated by the caller with similar measures :) I mean, <i>restoring</i> <code>stdout</code> should actually <i>restore</i> the initial value, and not <i>set</i> it to something arbitrary.</span>
<span class="comment-copy">What are the hazards if the nasty function throws an error? I want to know how this should be modified to be production-ready.</span>
<span class="comment-copy">You forgot to redirect <code>sys.stdout</code>.</span>
<span class="comment-copy">So I did.  I'm not properly caffinated yet :\</span>
<span class="comment-copy">A very dangerous state ;)</span>
<span class="comment-copy">Not a good solution, it will create actual file on the disk, meaning totally unnecessary disk IO and possibility of running out of disk space.</span>
