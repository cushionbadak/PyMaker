<div class="post-text" itemprop="text">
<p>How do I get 1324343032.324?</p>
<p>As you can see below, the following do not work:</p>
<pre><code>&gt;&gt;1324343032.324325235 * 1000 / 1000
1324343032.3243253
&gt;&gt;int(1324343032.324325235 * 1000) / 1000.0
1324343032.3239999
&gt;&gt;round(int(1324343032.324325235 * 1000) / 1000.0,3)
1324343032.3239999
&gt;&gt;str(1324343032.3239999)
'1324343032.32'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>'%.3f'%(1324343032.324325235)</code></p>
<p>Use an additional <code>float()</code> around it if you want to preserve it as a float.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the following function to truncate a number to a set number of decimals:</p>
<pre><code>import math
def truncate(number, digits) -&gt; float:
    stepper = pow(10.0, digits)
    return math.trunc(stepper * number) / stepper
</code></pre>
<p>Usage:</p>
<pre><code>&gt;&gt; truncate(1324343032.324325235, 3)
&gt;&gt; 1324343032.324
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I've found another solution (it must be more efficient than "string witchcraft" workarounds):</p>
<pre><code>&gt;&gt;&gt; import decimal
# By default rounding setting in python is decimal.ROUND_HALF_EVEN
&gt;&gt;&gt; decimal.getcontext().rounding = decimal.ROUND_DOWN
&gt;&gt;&gt; c = decimal.Decimal(34.1499123)
# By default it should return 34.15 due to '99' after '34.14'
&gt;&gt;&gt; round(c,2)
Decimal('34.14')
&gt;&gt;&gt; float(round(c,2))
34.14
&gt;&gt;&gt; print(round(c,2))
34.14
</code></pre>
<p><a href="https://docs.python.org/3/library/decimal.html" rel="noreferrer">About decimals module</a></p>
<p><a href="https://docs.python.org/3/library/decimal.html#decimal.ROUND_DOWN" rel="noreferrer">About rounding settings</a></p>
</div>
<div class="post-text" itemprop="text">
<p>How about this:</p>
<pre><code>In [1]: '%.3f' % round(1324343032.324325235 * 1000 / 1000,3)
Out[1]: '1324343032.324'
</code></pre>
<p>Possible duplicate of <a href="https://stackoverflow.com/questions/56820/round-in-python-doesnt-seem-to-be-rounding-properly">round() in Python doesn't seem to be rounding properly</a></p>
<p><strong>[EDIT]</strong> </p>
<p>Given the additional comments I believe you'll want to do:</p>
<pre><code>In : Decimal('%.3f' % (1324343032.324325235 * 1000 / 1000))
Out: Decimal('1324343032.324')
</code></pre>
<p>The floating point accuracy isn't going to be what you want:</p>
<pre><code>In : 3.324
Out: 3.3239999999999998
</code></pre>
<p>(all examples are with Python 2.6.5)</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the decimal module. But if you must use floats and still somehow coerce them into a given number of decimal points converting to string an back provides a (rather clumsy, I'm afraid) method of doing it.</p>
<pre><code>&gt;&gt;&gt; q = 1324343032.324325235 * 1000 / 1000
&gt;&gt;&gt; a = "%.3f" % q
&gt;&gt;&gt; a
'1324343032.324'
&gt;&gt;&gt; b = float(a)
&gt;&gt;&gt; b
1324343032.324
</code></pre>
<p>So:</p>
<pre><code>float("%3.f" % q)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>'%.3f'%(1324343032.324325235)</p>
</blockquote>
<p>It's OK just in this particular case.</p>
<p>Simply change the number a little bit:</p>
<p><em>1324343032.324<strong>7</strong>25235</em></p>
<p>And then:</p>
<pre><code>'%.3f'%(1324343032.324725235)
</code></pre>
<p>gives you <strong>1324343032.325</strong></p>
<p>Try this instead:</p>
<pre><code>def trun_n_d(n,d):
    s=repr(n).split('.')
    if (len(s)==1):
        return int(s[0])
    return float(s[0]+'.'+s[1][:d])
</code></pre>
<p>Another option for <strong>trun_n_d</strong>:</p>
<pre><code>def trun_n_d(n,d):
    dp = repr(n).find('.') #dot position
    if dp == -1:  
        return int(n) 
    return float(repr(n)[:dp+d+1])
</code></pre>
<p>Yet another option ( a <em>oneliner</em> one) for <strong>trun_n_d</strong> [this, assumes '<strong>n</strong>' is a <em>str</em> and '<strong>d</strong>' is an <em>int</em>]:</p>
<pre><code>def trun_n_d(n,d):
    return (  n if not n.find('.')+1 else n[:n.find('.')+d+1]  )
</code></pre>
<p><strong>trun_n_d</strong> gives you the desired output in both, Python 2.7 and Python 3.6</p>
<p><em>trun_n_d(1324343032.324325235,3)</em> returns <strong>1324343032.324</strong></p>
<p>Likewise, <em>trun_n_d(1324343032.324<strong>7</strong>25235,3)</em> returns <strong>1324343032.324</strong></p>
<hr/>
<p><strong>Note 1</strong> In Python 3.6 (and, probably, in Python 3.x) something like this, works just fine:</p>
<pre><code>def trun_n_d(n,d):
    return int(n*10**d)/10**d
</code></pre>
<p>But, this way, the rounding ghost is always lurking around.</p>
<p><strong>Note 2</strong> In situations like this, due to <em>python</em>'s number internals, like rounding and lack of precision, working with <strong>n</strong> as a <em>str</em> is way much better than using its <em>int</em> counterpart; you can always cast your number to a <em>float</em> at the end.</p>
</div>
<div class="post-text" itemprop="text">
<p>Almo's link explains <em>why</em> this happens. To solve the problem, use the <a href="http://docs.python.org/library/decimal.html" rel="nofollow">decimal library</a>. </p>
</div>
<div class="post-text" itemprop="text">
<p>I believe using the <code>format</code> function is a bad idea. Please see the below. It rounds the value. I use Python 3.6.</p>
<pre><code>&gt;&gt;&gt; '%.3f'%(1.9999999)
'2.000'
</code></pre>
<p>Use a regular expression instead:</p>
<pre><code>&gt;&gt;&gt; re.match(r'\d+.\d{3}', str(1.999999)).group(0)
'1.999'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>After looking for a way to solve this problem, without loading any Python 3 module or extra mathematical operations, I solved the problem using only str.format() e .float(). I think this way is faster than using other mathematical operations, like in the most commom solution. I needed a fast solution because I work with a very very large dataset and so for its working very well here. </p>
<pre><code>def truncate_number(f_number, n_decimals):
      strFormNum = "{0:." + str(n_decimals+5) + "f}"
      trunc_num = float(strFormNum.format(f_number)[:-5])
      return(trunc_num)

# Testing the 'trunc_num()' function
test_num = 1150/252
[(idx, truncate_number(test_num, idx)) for idx in range(0, 20)]
</code></pre>
<p>It returns the following output: </p>
<pre><code>[(0, 4.0),
 (1, 4.5),
 (2, 4.56),
 (3, 4.563),
 (4, 4.5634),
 (5, 4.56349),
 (6, 4.563492),
 (7, 4.563492),
 (8, 4.56349206),
 (9, 4.563492063),
 (10, 4.5634920634),
 (11, 4.56349206349),
 (12, 4.563492063492),
 (13, 4.563492063492),
 (14, 4.56349206349206),
 (15, 4.563492063492063),
 (16, 4.563492063492063),
 (17, 4.563492063492063),
 (18, 4.563492063492063),
 (19, 4.563492063492063)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also use:</p>
<pre><code>import math

nValeur = format(float(input('Quelle valeur ?    ')), '.3f')
</code></pre>
<p><strong>In Python 3.6 it would work.</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe this way:</p>
<pre><code>def myTrunc(theNumber, theDigits):

    myDigits = 10 ** theDigits
    return (int(theNumber * myDigits) / myDigits)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; float(1324343032.324325235) * float(1000) / float(1000)

1324343032.3243253

&gt;&gt;&gt; round(float(1324343032.324325235) * float(1000) / float(1000), 3)

1324343032.324
</code></pre>
</div>
<span class="comment-copy">There is no such value in the set that are represented by floating-point numbers.</span>
<span class="comment-copy">In case Karl's comment is not clear enough: There is <i>no such number</i> as 1324343032.324 in binary floating point. If you switch to a higher version of Python (2.7 or 3.1 or later) the interpreter will <i>display</i> 1324343032.324 for you. But in actuality, the number you are computing with is neither 1324343032.324 nor 1324343032.3239999 regardless of Python version. The only way to get <i>exactly</i> 1324343032.324 is to use the <code>decimal</code> module or some other arbitrary-precision math library, such as <code>gmpy</code>.</span>
<span class="comment-copy">The accepted answer below is correct, if you want to round (up) to a given number of decimal places. However, what the question is asking, and what I wanted to know, is how to truncate to a particular number of decimal places. For me, <code>'%.3f'%(1324343032.3243)</code> and <code>'%.3f'%(1324343032.3245)</code> give different results. (I am using Python 2.7.8).</span>
<span class="comment-copy">@nullstellensatz <a href="http://stackoverflow.com/questions/783897/truncating-floats-in-python" title="truncating floats in python">stackoverflow.com/questions/783897/truncating-floats-in-python</a></span>
<span class="comment-copy">@AbhranilDas this question is a duplicate of the one you pointed to. Since both of the questions have misleading answers, I have marked this one as a duplicate, so that all issues related to truncating can be dealt with in one place. Also, check out my comments and suggested answer for the original question.</span>
<span class="comment-copy">I dont want to print it...I want to store it</span>
<span class="comment-copy">This is basically the correct answer, just use <code>val = '%.3f'%(1324343032.324325235)</code> instead of <code>print</code>.</span>
<span class="comment-copy">Edited. You can print it, save it, whatever.</span>
<span class="comment-copy">Except that this is the same value that the OP already had (namely, 1324343032.3239999).</span>
<span class="comment-copy">This answer is correct, if you want to round (up) to a given number of decimal places. However, what the question is asking, and what I wanted to know, is how to <i>truncate</i> to a particular number of decimal places. For me, <code>'%.3f'%(1324343032.3243)</code> and <code>'%.3f'%(1324343032.3245)</code> give different results. (I am using Python 2.7.8).</span>
<span class="comment-copy">This should really be the accepted answer. The code is simple, elegant, and makes the most sense. Use the standard truncate function, however first shift the decimal place, shifting the decimal place back once the truncate has been performed.</span>
<span class="comment-copy">It's good that you mentioned the decimal module first, because that is the only fully correct answer.  One thing to be a little careful of with the rest is that <code>b</code> in your example will be displayed as 1324343032.3239999 on versions of Python before 2.7.  And indeed, this is the value that OP is seeing when he tries.  Of course, both values are indistinguishable, in terms of binary floating point.</span>
<span class="comment-copy">Heads up, this works on Python 3, but not Python 2, due to changes in how <code>/</code> works.</span>
<span class="comment-copy">While this code snippet may solve the question, <a href="http://meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers">including an explanation</a> really helps to improve the quality of your post. Remember that you are answering the question for readers in the future, and those people might not know the reasons for your code suggestion.</span>
