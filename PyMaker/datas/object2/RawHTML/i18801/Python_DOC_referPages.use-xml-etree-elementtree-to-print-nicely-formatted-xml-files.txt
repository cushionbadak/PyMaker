<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/749796/pretty-printing-xml-in-python">Pretty printing XML in Python</a>
<span class="question-originals-answer-count">
                    19 answers
                </span>
</li>
</ul>
</div>
<p>I am trying to use <code>xml.etree.elementtree</code> to write out xml files with Python. The issue is that they keep getting generated in a single line. I want to be able to easily reference them so if its possible I would really like to be able to have the written out cleanly.</p>
<p>This is what I am getting</p>
<pre><code>&lt;Language&gt;&lt;En&gt;&lt;Port&gt;Port&lt;/Port&gt;&lt;UserName&gt;UserName&lt;/UserName&gt;&lt;/En&gt;&lt;Ch&gt;&lt;Port&gt;IP地址&lt;/Port&gt;&lt;UserName&gt;用户名称&lt;/UserName&gt;&lt;/Ch&gt;&lt;/Language&gt;
</code></pre>
<p>This is what I would like to see.</p>
<pre><code>&lt;Language&gt;
    &lt;En&gt;
        &lt;Port&gt;Port&lt;/Port&gt;
        &lt;UserName&gt;UserName&lt;/UserName&gt;
    &lt;/En&gt;
    &lt;Ch&gt;
        &lt;Port&gt;IP地址&lt;/Port&gt;
        &lt;UserName&gt;用户名称&lt;/UserName&gt;
    &lt;/Ch&gt;
&lt;/Language&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the function <a href="https://docs.python.org/3/library/xml.dom.minidom.html#xml.dom.minidom.Node.toprettyxml" rel="noreferrer"><code>toprettyxml()</code></a> from <a href="https://docs.python.org/3/library/xml.dom.minidom.html" rel="noreferrer"><code>xml.dom.minidom</code></a> in order to do that:</p>
<pre><code>def prettify(elem):
    """Return a pretty-printed XML string for the Element.
    """
    rough_string = ElementTree.tostring(elem, 'utf-8')
    reparsed = minidom.parseString(rough_string)
    return reparsed.toprettyxml(indent="\t")
</code></pre>
<p>The idea is to print your <code>Element</code> in a string, parse it using minidom and convert it again in XML using the <code>toprettyxml</code> function.</p>
<p>Source: <a href="http://pymotw.com/2/xml/etree/ElementTree/create.html" rel="noreferrer">http://pymotw.com/2/xml/etree/ElementTree/create.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You could use the library <a href="http://lxml.de" rel="noreferrer">lxml</a>, which is a superset of ElementTree. Its 
tostring() method includes a parameter <a href="http://lxml.de/tutorial.html#the-element-class" rel="noreferrer">pretty_print</a> - for example:</p>
<pre><code>&gt;&gt;&gt; print(etree.tostring(root, pretty_print=True))
&lt;root&gt;
  &lt;child1/&gt;
  &lt;child2/&gt;
  &lt;child3/&gt;
&lt;/root&gt;
</code></pre>
</div>
<span class="comment-copy">This is not a true duplicate: The other question leaves the possibility to use <i>any</i> XML library. This question asks specifically for a solution when you are already working with the <i>built-in element tree</i> library. Imho it makes perfect sense to ask this question specifically for this library, because it is apparently a missing feature!?</span>
<span class="comment-copy">you can use a function like the one i found here: <a href="http://effbot.org/zone/element-lib.htm#prettyprint" rel="nofollow noreferrer">effbot.org/zone/element-lib.htm#prettyprint</a></span>
<span class="comment-copy">@bluenote10 When someone report, the other people will re-report, just to follow something. I'm from Colombia, so sorry for my bad english.</span>
<span class="comment-copy">Related: <a href="https://bugs.python.org/issue14465" rel="nofollow noreferrer">Python Bug Tracker - Issue report for Pretty Printing</a>; and <a href="https://github.com/python/cpython/pull/4016" rel="nofollow noreferrer">GitHub - proposed pull request</a>.</span>
<span class="comment-copy">This adds extra lines.  Not sure I'd call that pretty.</span>
<span class="comment-copy">For a large file though this requires reparsing the whole XML. hmm...</span>
<span class="comment-copy">@steve: Not only does that add another line, the data is processed like this: convert the XML tree to string, convert it back to an XML tree, and then convert it back to a string. That's not pretty, that's completely out of the question.</span>
<span class="comment-copy">At least it works out of the box with a normal Python installation.</span>
<span class="comment-copy">"pretty_print=True" does not work for me, and I do not why</span>
<span class="comment-copy">etree.tostring(root, pretty_print=True).decode() works!</span>
