<div class="post-text" itemprop="text">
<p>I have some questions about Defaultdict and Counter. I have a situation where I have a text file with one sentence per line. I want to split up the sentence into two (at first space) and store them into a dictionary with the first substring as the key and the second substring as the value. The reason for doing this is so that I can get a total number of sentences that share the same key.</p>
<pre><code>Text file format:
d1 This is an example
id3 Hello World
id1 This is also an example
id4 Hello Hello World
.
.
</code></pre>
<p>This is what I have tried but it doesn't work. I have looked at Counter but it's a bit tricky in my situation.</p>
<pre><code>try:
    openFileObject = open('test.txt', "r")
    try:             

        with openFileObject as infile:
            for line in infile:

                #Break up line into two strings at first space                    
                tempLine = line.split(' ' , 1)

                classDict = defaultdict(tempLine)         
                for tempLine[0], tempLine[1] in tempLine: 
                    classDict[tempLine[0]].append(tempLine[1]) 

            #Get the total number of keys  
            len(classDict)

            #Get value for key id1 (should return 2) 

    finally:
        print 'Done.'
        openFileObject.close()
except IOError:
    pass
</code></pre>
<p>Is there a way to do this without splitting up the sentences and storing them as tuples in a huge list before attempting using Counter or defaultdict? Thanks!</p>
<p>EDIT: Thanks to all who answered. I finally found out where I went wrong in this. I edited the program with all the suggestions given by everyone.</p>
<pre><code>openFileObject = open(filename, "r")           
tempList = []

with openFileObject as infile:
    for line in infile:

        tempLine = line.split(' ' , 1)
        tempList.append(tempLine) 

        classDict = defaultdict(list) #My error is here where I used tempLine instead if list
        for key, value in tempList: 
            classDict[key].append(value)   

            print len(classDict) 
            print len(classDict['key'])   
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>collections.Counter</code> to "get a total number of sentences that share the same key."</p>
<pre><code>from collections import Counter
with openFileObject as infile:
    print Counter(x.split()[0] for x in infile)
</code></pre>
<p>will print</p>
<pre><code>Counter({'id1': 2, 'id4': 1, 'id3': 1})
</code></pre>
<p>If you want to store a list of all the lines, your main mistake is here</p>
<pre><code>classDict = defaultdict(tempLine)
</code></pre>
<p>For this pattern, you should be using</p>
<pre><code>classDict = defaultdict(list)
</code></pre>
<p>But there's no point storing all those lines in a list if you're just indenting on taking the length.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>dict.get(key, 0)</code> return current accumulated count. If key was not in dict, return 0.</p>
<pre><code>classDict = {}

with open('text.txt') as infile:
    for line in infile:
        key = line.split(' ' , 1)[0]
        classDict[key] = classDict.get(key, 0) + 1

    print(len(classDict))
    for key in classDict:
        print('{}: {}'.format(key, classDict[key]))
</code></pre>
<p><a href="http://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow">http://docs.python.org/3/library/stdtypes.html#dict.get</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Full example of defaultdict (and improved way of displaying classDict)</p>
<pre><code>from collections import defaultdict

classDict = defaultdict(int)

with open('text.txt') as f:
    for line in f:
        first_word = line.split()[0]
        classDict[first_word] += 1

    print(len(classDict))
    for key, value in classDict.iteritems():
        print('{}: {}'.format(key, value))
</code></pre>
</div>
<span class="comment-copy">Out of interest, do you think <code>x.split()[0]</code> would be slower than <code>x.split(' ', 1)[0]</code>?</span>
<span class="comment-copy">@AleXL, I'd use <code>x.partition(' ')[0]</code> if I was concerned about performance</span>
<span class="comment-copy">@gnibbler - out of curiousity, if I want to store all the strings, can that be done?</span>
<span class="comment-copy">@Cryssie, yes. The easy way is to store them in a <code>defaultdict(list)</code> and <code>append</code> as you were trying to do in the question</span>
<span class="comment-copy">@gnibbler - Thanks a lot! I failed to see that it should be list and not tempList. It took me a while to realise it.</span>
<span class="comment-copy">Alternatively, you can use <a href="http://docs.python.org/2/library/collections.html#defaultdict-objects" rel="nofollow noreferrer">defaultdict</a> - <code>classDict = defaultdict(int)</code> then <code>classDict[key] += 1</code></span>
<span class="comment-copy">@AlexL, I didn't use defaultdict because OP's <code>before attempting using Counter or defaultdict</code> in the post. Maybe, I misunderstood.</span>
<span class="comment-copy">No I think you're right - I misunderstood. I'll leave my answer as an alternative (Also apologies for editing your answer, I meant to edit mine!)</span>
