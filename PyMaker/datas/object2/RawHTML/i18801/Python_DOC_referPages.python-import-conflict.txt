<div class="post-text" itemprop="text">
<p>I recently build a Python package and installed it via Debian packager. It is installed on my system so I can use it in other projects. In my new project I have the same name of a package folder, namely, opal. I scanned the web including this site and everything pointed towards using:</p>
<pre><code>from __future__ import absolute_import
</code></pre>
<p>Unfortunately, it couldn't resolve the problem, I suspect I am missing a detail. </p>
<p>I am using Python 2.7.3 and here are my project folder structures:</p>
<p>Installed package structure:</p>
<pre><code>- opal
     __init__.py
     core.py
</code></pre>
<p>New Project structure:</p>
<pre><code>- opal
  - __init__.py
  - net.py
</code></pre>
<p>In the new project I cannot do:</p>
<pre><code>from opal.core import OpalClient
</code></pre>
<p>I always get an error that <code>core</code> is not found under <code>opal</code>!!!</p>
<p>If <code>__future__</code> is the solution, can somebody provide me an example. I tried several ways and always got errors. I found this an awkward problem for such a neat language ;)</p>
<p>Cheers</p>
</div>
<div class="post-text" itemprop="text">
<p>Python does <em>not</em> merge namespaces without additional help. You have a <code>opal</code> top-level package in one place that is being found before the other top-level <code>opal</code> package is found. That first package found has <code>opal.net</code> as a contained module, but not the <code>opal.core</code> module.</p>
<p>You'll need to use a <a href="http://pythonhosted.org/setuptools/setuptools.html#namespace-packages" rel="nofollow">setuptools namespace setup</a> to enable this behaviour; install your packages with a <code>setuptools</code> compliant <code>setup.py</code> and let it register and manage namespaces for you.</p>
<p>If you are using Python 3.3 or newer, you can use the new <a href="https://www.python.org/dev/peps/pep-0420/" rel="nofollow">PEP 420 namespace support</a>, where you'd leave the top-level directory (or directories) <em>empty</em> to create a namespace that can then be merged. Also see <a href="https://docs.python.org/3/reference/import.html#namespace-packages" rel="nofollow"><em>Namespace packages</em></a> in the Python 3 import system documentation.</p>
</div>
<span class="comment-copy">what is the solution for a debian package? Our users and developers have both options, install the package via apt-get on Linux platforms or the Python way (setuptools).</span>
<span class="comment-copy">I believe that the <a href="http://wiki.debian.org/Python/FAQ#Python_eggs" rel="nofollow noreferrer">Debian Python tools</a> can handle eggs directly. The correct metadata should be present so that the setuptools extensions can find the different <code>opal</code> packages and make sure that Python will see them as one top-level namespace.</span>
<span class="comment-copy">In Python 3.3 and later you can make namespaces without setuptools. <a href="https://www.python.org/dev/peps/pep-0420" rel="nofollow noreferrer">python.org/dev/peps/pep-0420</a> But then you can't use Python 3.2 or more importantly Python 2.</span>
<span class="comment-copy">@LennartRegebro: I was in the process of writing something about that already. :-)</span>
