<div class="post-text" itemprop="text">
<p>I recently started learning python. I have created some basic webapps with Django and wrote some simple scripts. After using VIM as a Python IDE I really fell I love with "Terminal programs" (is there an official term for this?). Right now I am capable of doing simple things like asking someones age and printing it to the screen. However this comes down to running a .py script and after this script is done the normal bash return. I would like create a program that I can run from the command line and that would allow the same user experience as VIM (one that you open and close). For example I created a simple script to import RSS feeds. It would be cool if I could open my terminal type the name of my program -&gt; program would open -&gt; Then I would like to use commands like :findsomething. Basically have real interaction with my program. </p>
<p>To conclude: </p>
<ul>
<li>How would I go about creating such a program? </li>
<li>What kinds of modules, books or site would you recommend</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>A true command-line program is something in the vein of <code>ls</code> or <code>grep</code>; it is started from the command-line, but it's non-interactive and can be used in pipelines and combined with other programs. A typical command-line program has no interactive user experience, instead relying on shell's history and init file for customization.</p>
<p>What you want to create is a <em>curses</em> application, that uses the full capabilities of the TTY as an interactive platform, for better or worse. To do that, look up <a href="http://docs.python.org/2/library/curses.html">curses</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>On a *nix system (linux/unix), <br/>
if you:</p>
<pre><code>$ chmod 0744 your_file.py

-rwxr--r--   your_file.py
</code></pre>
<p>and add the path to python as the first line of <code>your_file.py</code>:</p>
<pre><code>#!/usr/bin/python
</code></pre>
<p>or (in my case):</p>
<pre><code>#!/usr/local/bin/python
</code></pre>
<p>Once you do that, instead of running it like this:</p>
<pre><code>$ python your_file.py
</code></pre>
<p>You can run it like this:</p>
<pre><code>$ ./your_file.py
</code></pre>
<p>or even rename it to <code>yourfile</code> and run it like this:</p>
<pre><code>$ ./yourfile
</code></pre>
<p>and if you then copy <code>yourfile</code> to your bin (i.e. <code>#!/usr/bin/</code>, or <code>#!/usr/local/bin/</code>)
you can run it like this:</p>
<pre><code>$ yourfile
</code></pre>
<p>Then you can...</p>
<p>Use <code>raw_input()</code> to solicit and get input from you user.</p>
<p><code>your_file.py</code>:</p>
<pre><code>#!/usr/local/bin/python

import os

while(True):
    # cntrl-c to quit
    input = raw_input('your_prompt$ ')
    input = input.split()
    if input[0] == 'ls':
        dire = '.'
        if len(input) &gt; 1:
            dire = input[1]
        print('\n'.join(os.listdir(dire)))
    else:
        print('error')
</code></pre>
<p><code>your_file.py</code> use example:</p>
<pre><code>$ chmod 744 your_file.py 
$ cp your_file.py /usr/local/bin/your_file 
$ your_file 
your_prompt$ ls
list_argv.py
your_file.py
your_ls.py
your_subprocess.py
your_prompt$ ls .
list_argv.py
your_file.py
your_ls.py
your_subprocess.py
your_prompt$ pwd
error
your_prompt$ ^CTraceback (most recent call last):
  File "/usr/local/bin/your_file", line 7, in &lt;module&gt;
    input = raw_input('your_prompt$ ')
KeyboardInterrupt
$
</code></pre>
<p>Grab arguments with <code>sys.argv</code> from the command line when you run your script:</p>
<p><code>list_argv.py</code>:</p>
<pre><code>#!/usr/local/bin/python

import sys

print(sys.argv)
</code></pre>
<p><code>list_argv.py</code> use example:</p>
<pre><code>$ python list_argv.py 
['list_argv.py']
$ python list_argv.py hello
['list_argv.py', 'hello']
$ python list_argv.py hey yo
['list_argv.py', 'hey', 'yo']

$ chmod 744 list_argv.py 
$ ./list_argv.py 
['./list_argv.py']
$ ./list_argv.py hi
['./list_argv.py', 'hi']
$ ./list_argv.py hey yo
['./list_argv.py', 'hey', 'yo']

$ cp list_argv.py /usr/local/bin/list_argv
$ list_argv hey yo
['/usr/local/bin/list_argv', 'hey', 'yo']
</code></pre>
<p>Replace <code>raw_input()</code> with <code>sys.argv</code>.</p>
<p>'your_ls.py': </p>
<pre><code>#!/usr/local/bin/python

import sys
import os

dire = '.'
if len(sys.argv) &gt; 1:
    dire = sys.argv[1]
print('\n'.join(os.listdir(dire)))
</code></pre>
<p>'your_ls.py' use example:</p>
<pre><code>$ chmod 744 your_ls.py 
$ cp your_ls.py /usr/local/bin/your_ls
$ your_ls 
list_argv.py
your_file.py
your_ls.py
your_subprocess.py
$ your_ls .
list_argv.py
your_file.py
your_ls.py
your_subprocess.py
$ your_ls blah
Traceback (most recent call last):
  File "/usr/local/bin/your_ls", line 9, in &lt;module&gt;
    print('\n'.join(os.listdir(dire)))
OSError: [Errno 2] No such file or directory: 'blah'
</code></pre>
<p>Use <code>subprocess.Popen</code> to access anything you could from the command line.</p>
<p><code>your_subprocess.py</code>:</p>
<pre><code>#!/usr/local/bin/python

import os
import subprocess

while(True):
    # cntrl-c to quit
    input = raw_input('your_prompt$ ')

    process = subprocess.Popen(input, shell=True,
                           stdout=subprocess.PIPE,
                           stderr=subprocess.PIPE)

    out, err = process.communicate()

    print(out)
    print(err)
</code></pre>
<p><code>your_subprocess.py</code> use example:</p>
<pre><code>$ chmod 744 your_subprocess.py 
$ cp your_subprocess.py /usr/local/bin/your_subprocess
$ your_subprocess 
your_prompt$ ls
list_argv.py
your_file.py
your_ls.py
your_subprocess.py


your_prompt$ ls .
list_argv.py
your_file.py
your_ls.py
your_subprocess.py


your_prompt$ pwd
/Users/ox/_workspace/cmd_ln


your_prompt$ blah

/bin/sh: blah: command not found

your_prompt$ ^CTraceback (most recent call last):
  File "/usr/local/bin/your_subprocess", line 8, in &lt;module&gt;
    input = raw_input('your_prompt$ ')
KeyboardInterrupt
$
</code></pre>
<p>BREAK STUFF!</p>
<p>:-D</p>
<p>HAVE FUN!</p>
<p>-ox</p>
</div>
<div class="post-text" itemprop="text">
<p>You should take a look at the <a href="http://docs.python.org/3/library/cmd.html">cmd</a> module.</p>
<p>See the <a href="http://code.activestate.com/recipes/langs/python/tags/meta%3arequires=cmd/">Python Cookbook</a> for examples of its use.</p>
</div>
<div class="post-text" itemprop="text">
<p>THe simplest way to do an interactive console application would be:</p>
<pre><code>while True:
    command = raw_input('command? ').strip()
    if command == 'say_hello':
        print('Hello')
    elif command == 'other_thing':
        print('Doing something else')
    elif command == 'quit':
        break
    else:
        print('Invalid Command.')
</code></pre>
<p>That's the basic structure. If you want something more vim-like, you'll probably need to use the curses library.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to create an standalone binary for a UNIX system, use <a href="http://wiki.python.org/moin/Freeze" rel="nofollow"><code>freeze</code></a>.  If you want one for a Windows system, look into <a href="http://wiki.python.org/moin/Py2Exe" rel="nofollow"><code>py2exe</code></a>.  To control locations of output on your screen, use the <a href="http://docs.python.org/2/howto/curses.html" rel="nofollow"><code>curses</code></a> module.</p>
</div>
<span class="comment-copy">What you're describing is a terminal application, not a command line program</span>
<span class="comment-copy">Thanks I started learning the curses module. Seems be exactly what I was looking for!</span>
<span class="comment-copy">Thanks!! Your answer is super useful. Do you know how to install python command line app by pip or brew?</span>
<span class="comment-copy"><code>sudo pip install ipython</code> hold the <code>sudo</code> if you are in a python virtual environment and  checkout ipython notebook:  <code>pip install ipython[notebook]</code> it is so freaking cool!</span>
