<div class="post-text" itemprop="text">
<p>I'm trying to check for a palindrome with Python. The code I have is very <code>for</code>-loop intensive.</p>
<p>And it seems to me the biggest mistake people do when going from C to Python is trying to implement C logic using Python, which makes things run slowly, and it's just not making the most of the language.</p>
<p>I see on <a href="http://hyperpolyglot.org/scripting">this</a> website. Search for "C-style for", that Python doesn't have C-style for loops. Might be outdated, but I interpret it to mean Python has its own methods for this.</p>
<p>I've tried looking around, I can't find much up to date (Python 3) advice for this. How can I solve a palindrome challenge in Python, without using the for loop?</p>
<p>I've done this in C in class, but I want to do it in Python, on a personal basis. The problem is from the <a href="https://projecteuler.net">Euler Project</a>, great site By the way,.</p>
<pre><code>def isPalindrome(n):
    lst = [int(n) for n in str(n)]
    l=len(lst)
    if l==0 || l==1:
        return True
    elif len(lst)%2==0:
        for k in range (l)
        #####
    else:
        while (k&lt;=((l-1)/2)):
            if (list[]):
                #####   

for i in range (999, 100, -1):
    for j in range (999,100, -1):
        if isPalindrome(i*j):
            print(i*j)
            break
</code></pre>
<p>I'm missing a lot of code here. The five hashes are just reminders for myself.</p>
<p>Concrete questions:</p>
<ol>
<li><p>In C, I would make a for loop comparing index 0 to index max, and then index 0+1 with max-1, until something something. How to best do this in Python?</p></li>
<li><p>My for loop (in in range (999, 100, -1), is this a bad way to do it in Python?</p></li>
<li><p>Does anybody have any good advice, or good websites, or resources for people in my position? I'm not a programmer, I don't aspire to be one, I just want to learn enough so that when I write my bachelor's degree thesis (electrical engineering), I don't have to simultaneously LEARN an applicable programming language while trying to obtain good results in the project. "How to go from basic C to great application of Python", that sort of thing.</p></li>
<li><p>Any specific bits of code to make a great solution to this problem would also be appreciated, I need to learn good algorithms.. I am envisioning 3 situations. If the value is zero or single digit, if it is of odd length, and if it is of even length. I was planning to write for loops...</p></li>
</ol>
<p>PS: The problem is: Find the highest value product of two 3 digit integers that is also a palindrome.</p>
</div>
<div class="post-text" itemprop="text">
<p>A pythonic way to determine if a given value is a palindrome:</p>
<pre><code>str(n) == str(n)[::-1]
</code></pre>
<p>Explanation:</p>
<ul>
<li>We're checking if the string representation of <code>n</code> equals the inverted string representation of <code>n</code></li>
<li>The <code>[::-1]</code> slice takes care of inverting the string</li>
<li>After that, we compare for equality using <code>==</code></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>An alternative to the rather unintuitive <code>[::-1]</code> syntax is this:</p>
<pre><code>&gt;&gt;&gt; test = "abcba"
&gt;&gt;&gt; test == ''.join(reversed(test))
True
</code></pre>
<p>The <code>reversed</code> function returns a reversed sequence of the characters in <code>test</code>.</p>
<p><code>''.join()</code> joins those characters together again with nothing in between.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just for the record, and for the ones looking for a more algorithmic way to validate if a given string is palindrome, two ways to achieve the same (using <code>while</code> and <code>for</code> loops):</p>
<pre><code>def is_palindrome(word):

    letters = list(word)    
    is_palindrome = True
    i = 0

    while len(letters) &gt; 0 and is_palindrome:       
        if letters[0] != letters[(len(letters) - 1)]:
            is_palindrome = False
        else:
            letters.pop(0)
            if len(letters) &gt; 0:
                letters.pop((len(letters) - 1))

    return is_palindrome
</code></pre>
<p>And....the second one:</p>
<pre><code>def is_palindrome(word):

    letters = list(word)
    is_palindrome = True

    for letter in letters:
        if letter == letters[-1]:
            letters.pop(-1)
        else:
            is_palindrome = False
            break

    return is_palindrome
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The awesome part of python is the things you can do with it.  You don't have to use indexes for strings.  </p>
<p>The following will work (using slices)</p>
<pre><code>def palindrome(n):
    return n == n[::-1]
</code></pre>
<p>What it does is simply reverses n, and checks if they are equal.  <code>n[::-1]</code> reverses n (the -1 means to decrement)</p>
<blockquote>
<p>"2) My for loop (in in range (999, 100, -1), is this a bad way to do it in Python?"</p>
</blockquote>
<p>Regarding the above, you want to use <code>xrange</code> instead of range (because range will create an actual list, while xrange is a fast generator)</p>
<p><strong>My opinions on question 3</strong></p>
<p>I learned C before Python, and I just read the docs, and played around with it using the console. (and by doing Project Euler problems as well :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Below the code will print <strong>0</strong> if it is <strong>Palindrome</strong> else it will print <strong>-1</strong></p>
<p><strong>Optimized Code</strong></p>
<pre><code>word = "nepalapen"
is_palindrome = word.find(word[::-1])
print is_palindrome
</code></pre>
<p><strong>Output:</strong>
0</p>
<pre><code>word = "nepalapend"
is_palindrome = word.find(word[::-1])
print is_palindrome
</code></pre>
<p><strong>Output:</strong>
-1</p>
<h2>Explaination:</h2>
<p>when searching the string the value that is returned is the value of the location that the string starts at.</p>
<p>So when you do <code>word.find(word[::-1])</code> it finds <code>nepalapen</code> at location <code>0</code> and <code>[::-1]</code> reverses <code>nepalapen</code> and it still is <code>nepalapen</code> at location <code>0</code> so <code>0</code> is returned. </p>
<p>Now when we search for <code>nepalapend</code> and then reverse <code>nepalapend</code> to <code>dnepalapen</code> it renders a <code>FALSE</code> statement <code>nepalapend</code> was reversed to <code>dnepalapen</code> causing the search to fail to find <code>nepalapend</code> resulting in a value of <code>-1</code> which indicates string not found.</p>
<hr/>
<p>Another method print <strong>true</strong> if <strong>palindrome</strong> else print <strong>false</strong></p>
<pre><code>word = "nepalapen"
print(word[::-1]==word[::1])
</code></pre>
<p><strong>output:</strong>
TRUE     </p>
</div>
<div class="post-text" itemprop="text">
<p>There is also a <em>functional</em> way:</p>
<pre><code>def is_palindrome(word):
  if len(word) == 1: return True
  if word[0] != word[-1]: return False
  return is_palindrome(word[1:-1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I know that this question was answered a while ago and i appologize for the intrusion. However,I was working on a way of doing this in python as well and i just thought that i would share the way that i did it in is as follows, </p>
<pre><code>word = 'aibohphobia'

word_rev = reversed(word)

def is_palindrome(word):
if list(word) == list(word_rev):
    print'True, it is a palindrome'
else:
    print'False, this is''t a plindrome'

is_palindrome(word)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is much easier way I just found. It's only 1 line.</p>
<pre><code>is_palindrome = word.find(word[::-1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here a <strong>case insensitive</strong> function since all those solutions above are case sensitive. </p>
<pre><code>def Palindrome(string): 

  return (string.upper() == string.upper()[::-1]) 
</code></pre>
<p>This function will return a <strong>boolean</strong> value.</p>
</div>
<div class="post-text" itemprop="text">
<p>doing the Watterloo course for python, the same questions is raised as a "Lesseon" find the info here:</p>
<p><a href="http://cscircles.cemc.uwaterloo.ca/13-lists/" rel="nofollow">http://cscircles.cemc.uwaterloo.ca/13-lists/</a></p>
<p>being a novice i solved the problem the following way:</p>
<pre><code>def isPalindrome(S):
    pali = True
    for i in range (0, len(S) // 2):
        if S[i] == S[(i * -1) - 1] and pali is True:
            pali = True
        else:
            pali = False
    print(pali)
    return pali
</code></pre>
<p>The function is called <strong>isPalindrome(S)</strong> and requires a string <strong>"S"</strong>.
The return value is by default <strong>TRUE</strong>, to have the initial check on the first if statement.</p>
<p>After that, the for loop runs half the string length to check if the character from string <strong>"S"</strong> at the position <strong>"i"</strong> is the same at from the front and from the back.
If once this is not the case, the function stops, prints out FALSE and returns false.</p>
<p>Cheers.kg</p>
</div>
<div class="post-text" itemprop="text">
<p>If the string has an uppercase or non-alphabetic character then the function converts all characters to lowercase and removes all non-alphabetic characters using regex finally it applies palindrome check recursively:</p>
<pre><code>import re

rules = [
    lambda s: any(x.isupper() for x in s),
    lambda s: not s.isalpha()
]


def is_palindrome(s):
    if any(rule(s) for rule in rules):
        s = re.sub(r'[^\w]', '', s).lower()
    if len(s) &lt; 2:
        return True
    if s[0] != s[-1]:
        return False
    return is_palindrome(s[1:-1])


string = 'Are we not drawn onward, we few, drawn onward to new era?'

print(is_palindrome(string))
</code></pre>
<p>the output is <code>True</code> for the input above.</p>
</div>
<div class="post-text" itemprop="text">
<p>maybe you can try this one:    </p>
<pre><code>list=input('enter a string:')

if (list==list[::-1]):
    print ("It is a palindrome")
else:
   print("it is not palindrome")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are asking palindrome in python. palindrome can be performed on strings, numbers and lists. However, I just posted a simple code to check palindrome of a string.</p>
<pre><code># Palindrome of string
str=raw_input("Enter the string\n")
ln=len(str)
for i in range(ln/2) :
    if(str[ln-i-1]!=str[i]):
        break
if(i==(ln/2)-1):
    print "Palindrome"
else:
    print "Not Palindrome"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The real easy way to do that it is </p>
<pre><code>word = str(raw_input(""))
is_palindrome = word.find(word[::-1])
if is_palindrome == 0:
    print True
else:
    print False
</code></pre>
<p>And if/else here just for fancy looks. The question about palindrome was on Amazon's interview for QA</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming a string 's'</p>
<pre><code>palin = lambda s: s[:(len(s)/2 + (0 if len(s)%2==0 else 1)):1] == s[:len(s)/2-1:-1]  
# Test
palin('654456')  # True
palin('malma')   # False
palin('ab1ba')   # True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>word = "&lt;insert palindrome/string&gt;"
reverse = word[::-1] 
is_palindrome = word.find(reverse)
print is_palindrome
</code></pre>
<p>This was a question in Udacity comp 101, chapter 1. Gives a 0 for palindrome gives a -1 for not. Its simple, and does not use loops.</p>
</div>
<div class="post-text" itemprop="text">
<p>I wrote this code:</p>
<pre><code>word = input("enter: ")
word = ''.join(word.split())`
for x in range(len(word)):
if list(word)[x] == ((list(word)[len(word)-x-1])):
if x+1 == len(word):
print("its pali")
</code></pre>
<p>and it works.
it gets the word, then removes the spaces and turns it into a list
then it tests if the first letter is equal to the last and if the 2nd is equal to 2nd last and so on.</p>
<p>then the 'if x+1 == len(word)' means that since x starts at 0 it becomes 1 and then for every next .. blah blah blah it works so it works.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>#compare 1st half with reversed second half
# i.e. 'abba' -&gt; 'ab' == 'ba'[::-1]

def is_palindrome( s ):
   return True if len( s ) &lt; 2 else s[ :len( s ) // 2 ] == s[ -( len( s ) // 2 ):][::-1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>You can use Deques in python to check palindrome</strong></p>
<p><code>def palindrome(a_string):
    ch_dequeu = Deque()
    for ch in a_string:
        ch_dequeu.add_rear(ch)
    still_ok = True
    while ch_dequeu.size() &gt; 1 and still_ok:
        first = ch_dequeu.remove_front()
        last = ch_dequeu.remove_rear()
        if first != last:
            still_ok = False
        return still_ok</code></p>
<p><code>class Deque:
    def __init__(self):
        self.items = []
    def is_empty(self):
        return self.items == []
    def add_rear(self, item):
        self.items.insert(0, item)
    def add_front(self, item):
        self.items.append(item)
    def size(self):
        return len(self.items)
    def remove_front(self):
        return self.items.pop()
    def remove_rear(self):
        return self.items.pop(0)</code></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import string

word = input('Please select a word to test \n')
word = word.lower()
num = len(word)

x = round((len(word)-1)/2)
#defines first half of string
first = word[:x]

#reverse second half of string
def reverse_odd(text):
    lst = []
    count = 1
    for i in range(x+1, len(text)):

        lst.append(text[len(text)-count])
        count += 1
    lst = ''.join(lst)
    return lst

#reverse second half of string
def reverse_even(text):
    lst = []
    count = 1
    for i in range(x, len(text)):
        lst.append(text[len(text)-count])
        count += 1
    lst = ''.join(lst)
    return lst


if reverse_odd(word) == first or reverse_even(word) == first:
    print(string.capwords(word), 'is a palindrome')
else:
    print(string.capwords(word), 'is not a palindrome')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>the "algorithmic" way:</p>
<pre><code>import math

def isPalindrome(inputString):
    if inputString == None:
        return False

    strLength = len(inputString)
    for i in range(math.floor(strLength)):
        if inputString[i] != inputString[strLength - 1 - i]:
            return False
    return True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is another way by using functions, if you don't want to use reverse</p>
<pre><code>#!/usr/bin/python

A = 'kayak'

def palin(A):

    i = 0
    while (i&lt;=(A.__len__()-1)):
        if (A[A.__len__()-i-1] == A[i]):
            i +=1
        else:
         return False

if palin(A) == False:

    print("Not a Palindrome")

else :

    print ("Palindrome")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It looks prettier with recursion!</p>
<pre><code>def isPalindrome(x):
z = numToList(x)
length = math.floor(len(z) / 2)
if length &lt; 2:
    if z[0] == z[-1]:
        return True
    else:
        return False
else:
    if z[0] == z[-1]:
        del z[0]
        del z[-1]
        return isPalindrome(z)
    else:
        return False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def is_palindrome(string):
   return string == ''.join([letter for letter in reversed(string)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>print ["Not a palindrome","Is a palindrome"][s == ''.join([s[len(s)-i-1] for i in range(len(s))])]
</code></pre>
<p>This is the typical way of writing single line code</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def pali(str1):
    l=list(str1)
    l1=l[::-1]
    if l1==l:
        print("yess")
    else:
        print("noo")
str1="abc"
a=pali(str1)
print(a)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I tried using this:</p>
<pre><code>def palindrome_numer(num):
num_str = str(num)
str_list = list(num_str)
if str_list[0] == str_list[-1]:
    return True
return False
</code></pre>
<p>and it worked for a number but I don't know if a string</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def isPalin(checkWord):
    Hsize = len(lst)/2
    seed = 1
    palind=True
    while seed&lt;Hsize+1:
        #print seed,lst[seed-1], lst [-(seed)]
        if(lst[seed-1] != lst [-seed]):
            palind = False
            break
        seed = seed+1
    return palind

lst = 'testset'
print lst, isPalin(lst)    
lst = 'testsest'
print lst, isPalin(lst) 
</code></pre>
<p>Output </p>
<pre><code>testset True
testsest False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is an example that takes a user's input and checks if the input is a palindrome:</p>
<pre><code>name = input("Write your word here:  ")
input("Press &lt;enter&gt; to check if the word is a palindrome.")
if str(name) == str(name)[::-1]:
    print("True")
else:
    print("False")
</code></pre>
<p>However, there is no need to even set up the <code>if</code>/<code>else</code> statement. You can directly print the result of the logical comparison, as shown here:</p>
<pre><code>name = input("Write your word here:  ")
input("Press &lt;enter&gt; to check if the word is a palindrome.")
print(str(name) == str(name)[::-1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>#!/usr/bin/python

str = raw_input("Enter a string ")
print "String entered above is %s" %str
strlist = [x for x in str ]
print "Strlist is %s" %strlist
strrev = list(reversed(strlist)) 
print "Strrev is %s" %strrev
if strlist == strrev :
   print "String is palindrome"
else :
   print "String is not palindrome"
</code></pre>
</div>
<span class="comment-copy">Related: <a href="http://stackoverflow.com/a/7460573/846892">stackoverflow.com/a/7460573/846892</a></span>
<span class="comment-copy">I believe this is ProjectEuler #4. You should be able to find some solutions out there that could introduce you to python. But from the looks of it, your implementation is not a terrible one. Your <code>isPalindrome</code> can be much simpler. You may also want to store all palindromes you find in a list and then sort it to find the highest value. If you just <code>break</code>, you are not guaranteed the highest value palindrome.</span>
<span class="comment-copy">All these answers are good, although bear in mind that, as stated, your word/phrase has to be an <i>exact</i> palindrome for them to work, including capitalization, spaces, and punctuation. You'll want to look at methods like <code>.lower()</code> and <code>.translate()</code> to make the case uniform and remove the spaces and punctuation if you want to match cases like "Do geese see God?"</span>
<span class="comment-copy">@PaulGriffiths Thank you, in this specific program I am dealing with numbers, but I have seen the .lower() and .upper() functions, .translate() I will look into. Thanks a lot!</span>
<span class="comment-copy">Just to clarify for future visitors to this question. The C style of checking for palindrome would involve a for loop like the following: for(int i=0; i&lt;len(str)/2; i++) if str[i] != str[len(str)-i-1]: return False</span>
<span class="comment-copy">Wow.. can you explain to me what this means? How can that line contain the logic to compare the leftmost value with the rightmost..?</span>
<span class="comment-copy">It doesn't. It simply check that the word is equal to itself reversed. An advantage of python is that it allows you to work at an higher level of abstraction leading to cleaner and more elegant solutions</span>
<span class="comment-copy">@DrOnline I updated my answer. This is the pythonic way to do write the solution, by manipulating the very flexible list data structure provided by the language</span>
<span class="comment-copy">@DrOnline the <code>::</code> part is called a <i>slice</i>, read all about it in <a href="http://stackoverflow.com/a/509295/201359">here</a></span>
<span class="comment-copy"><code>[::-1]</code> is advanced slicing. <code>[a:b:c]</code> means slice from <code>a</code> (inclusive) to <code>b</code> (exclusive) with step size <code>c</code>.</span>
<span class="comment-copy">Thank you for the help, I'm piecing it together now</span>
<span class="comment-copy">@downvoter: Care to leave a comment?</span>
<span class="comment-copy">@RichieHindle: I find <code>''.join(reversed(test))</code> to be just as unintuitive as <code>[::-1]</code>. The <i>really</i> intuitive behaviour would be if you could write <code>test == reversed(test)</code>. (I'm not the downvoter.)</span>
<span class="comment-copy">You could do <code>list(test) == list(reversed(test))</code>.</span>
<span class="comment-copy">Thank you, I am implementing the changes now, I was also not sure about the difference between range and xrange, seen both in use. Thanks a lot ;)</span>
<span class="comment-copy">Note that <code>xrange</code> is only needed (and only exists) in Python 2. In Python 3, the regular <code>range</code> behaves much like <code>xrange</code> used to (with a few extra new features, like slicing to get a different <code>range</code> object added).</span>
<span class="comment-copy">No problem!  If you want to get some indexes, use <code>xrange</code>.  If you want a list and manipulate that list for something else, use <code>range</code></span>
<span class="comment-copy">Thanks Blckknght, I got errors for xrange, was wondering if I had to include a library or something. Good to know! Kinda like raw input and input was merged to input, I see that was a Python 3 change.</span>
<span class="comment-copy">Exactly what I was looking for. Thanx.</span>
<span class="comment-copy">This has a minor error: "mannam" will give <code>IndexError: string index out of range</code>, as the most inner call is on the null string (as will giving it a null string). <code>if len(word) &lt;= 1: return True</code> solves this issue, although it will consider null strings as palindromes.</span>
<span class="comment-copy">You could make it a boolean, ie: <code>is_palindrome = word.find(word[::-1]) == 0</code> . Still +1</span>
<span class="comment-copy">In Python3.3+, use <a href="https://docs.python.org/3/library/stdtypes.html#str.casefold" rel="nofollow noreferrer"><code>str.casefold</code></a> instead</span>
<span class="comment-copy">Welcome to StackOverflow.  Your answer appears to be similar to several others that have already been posted, including the accepted response.   If you feel your answer is different, please edit it to add detail.</span>
<span class="comment-copy">You need proper indentation or the code will not compile!</span>
<span class="comment-copy">Please explain your post. What does it do to help the questioneer? How should it be implemented? What is obvious to you may not be obvious to others.</span>
