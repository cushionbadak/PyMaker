<div class="post-text" itemprop="text">
<p>How do I get the probability of a string being similar to another string in Python?</p>
<p>I want to get a decimal value like 0.9 (meaning 90%) etc. Preferably with standard Python and library.</p>
<p>e.g.</p>
<pre><code>similar("Apple","Appel") #would have a high prob.

similar("Apple","Mango") #would have a lower prob.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is a built in.</p>
<pre><code>from difflib import SequenceMatcher

def similar(a, b):
    return SequenceMatcher(None, a, b).ratio()
</code></pre>
<p>Using it:</p>
<pre><code>&gt;&gt;&gt; similar("Apple","Appel")
0.8
&gt;&gt;&gt; similar("Apple","Mango")
0.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think maybe you are looking for an algorithm describing the distance between strings. Here are some you may refer to:  </p>
<ol>
<li><a href="http://en.wikipedia.org/wiki/Hamming_distance">Hamming distance</a> </li>
<li><a href="http://en.wikipedia.org/wiki/Levenshtein_distance">Levenshtein distance</a></li>
<li><a href="http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance">Damerau–Levenshtein distance</a> </li>
<li><a href="http://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance">Jaro–Winkler distance</a></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<h1>Solution #1: Python builtin</h1>
<p>use <a href="https://docs.python.org/3/library/difflib.html#difflib.SequenceMatcher" rel="noreferrer">SequenceMatcher</a> from <a href="https://docs.python.org/3/library/difflib.html" rel="noreferrer">difflib</a> </p>
<p><strong>pros</strong>: 
   native python library, no need extra package.<br/>
<strong>cons</strong>:  too limited, there are so many other good algorithms for string similarity out there.   </p>
<em>example</em> :

<pre><code>&gt;&gt;&gt; from difflib import SequenceMatcher
&gt;&gt;&gt; s = SequenceMatcher(None, "abcd", "bcde")
&gt;&gt;&gt; s.ratio()
0.75
</code></pre>
<h1>Solution #2: <a href="https://github.com/jamesturk/jellyfish" rel="noreferrer">jellyfish</a> library</h1>
<p>its a very good library with good coverage and few issues.
it supports:<br/>
- Levenshtein Distance<br/>
- Damerau-Levenshtein Distance<br/>
- Jaro Distance<br/>
- Jaro-Winkler Distance<br/>
- Match Rating Approach Comparison<br/>
- Hamming Distance  </p>
<p><strong>pros</strong>: 
   easy to use, gamut of supported  algorithms, tested.<br/>
<strong>cons</strong>:  not native library.</p>
<p><em>example</em>:   </p>
<pre><code>&gt;&gt;&gt; import jellyfish
&gt;&gt;&gt; jellyfish.levenshtein_distance(u'jellyfish', u'smellyfish')
2
&gt;&gt;&gt; jellyfish.jaro_distance(u'jellyfish', u'smellyfish')
0.89629629629629637
&gt;&gt;&gt; jellyfish.damerau_levenshtein_distance(u'jellyfish', u'jellyfihs')
1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>Fuzzy Wuzzy</code> is a <a href="https://github.com/seatgeek/fuzzywuzzy" rel="noreferrer">package</a> that implements Levenshtein distance in python, with some helper functions to help in certain situations where you may want two distinct strings to be considered identical. For example:</p>
<pre><code>&gt;&gt;&gt; fuzz.ratio("fuzzy wuzzy was a bear", "wuzzy fuzzy was a bear")
    91
&gt;&gt;&gt; fuzz.token_sort_ratio("fuzzy wuzzy was a bear", "wuzzy fuzzy was a bear")
    100
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can create a function like:</p>
<pre><code>def similar(w1, w2):
    w1 = w1 + ' ' * (len(w2) - len(w1))
    w2 = w2 + ' ' * (len(w1) - len(w2))
    return sum(1 if i == j else 0 for i, j in zip(w1, w2)) / float(len(w1))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Package <a href="https://pypi.python.org/pypi/Distance/" rel="noreferrer">distance</a> includes Levenshtein distance:</p>
<pre><code>import distance
distance.levenshtein("lenvestein", "levenshtein")
# 3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The builtin <code>SequenceMatcher</code> is very slow on large input, here's how it can be done with <a href="https://pypi.org/project/diff-match-patch/" rel="nofollow noreferrer">diff-match-patch</a>:</p>
<pre><code>from diff_match_patch import diff_match_patch

def compute_similarity_and_diff(text1, text2):
    dmp = diff_match_patch()
    dmp.Diff_Timeout = 0.0
    diff = dmp.diff_main(text1, text2, False)

    # similarity
    common_text = sum([len(txt) for op, txt in diff if op == 0])
    text_length = max(len(text1), len(text2))
    sim = common_text / text_length

    return sim, diff
</code></pre>
</div>
<span class="comment-copy">I don't think "probability" is quite the right term here. In any event, see <a href="http://stackoverflow.com/questions/682367/good-python-modules-for-fuzzy-string-comparison" title="good python modules for fuzzy string comparison">stackoverflow.com/questions/682367/…</a></span>
<span class="comment-copy">The word you are looking for is ratio, not probability.</span>
<span class="comment-copy">Take a look at <a href="http://en.wikipedia.org/wiki/Hamming_distance" rel="nofollow noreferrer">Hamming distance</a>.</span>
<span class="comment-copy">The phrase is <i>'similarity metric'</i>, but there are multiple similarity metrics (Jaccard, Cosine, Hamming, Levenshein etc.) said so you need to specify which. Specifically you want a similarity metric between strings; @hbprotoss listed several.</span>
<span class="comment-copy">See this great answer comparing <code>SequenceMatcher</code> vs <code>python-Levenshtein</code> module. <a href="http://stackoverflow.com/questions/6690739/fuzzy-string-comparison-in-python-confused-with-which-library-to-use" title="fuzzy string comparison in python confused with which library to use">stackoverflow.com/questions/6690739/…</a></span>
<span class="comment-copy">Interesting article and tool: <a href="http://chairnerd.seatgeek.com/fuzzywuzzy-fuzzy-string-matching-in-python/" rel="nofollow noreferrer">chairnerd.seatgeek.com/…</a></span>
<span class="comment-copy">I would highly recommend checking out the whole difflib doc <a href="https://docs.python.org/2/library/difflib.html" rel="nofollow noreferrer">docs.python.org/2/library/difflib.html</a> there is a <code>get_close_matches</code> built in, although i found <code>sorted(... key=lambda x: difflib.SequenceMatcher(None, x, search).ratio(), ...)</code> more reliable, with custom <code>sorted(... .get_matching_blocks())[-1] &gt; min_match</code> checks</span>
<span class="comment-copy">@ThorSummoner brings attention to a very useful function (<code>get_closest_matches</code>).  It's a convenience function that may be what you are looking for, AKA read the docs!  In my particular application I was doing some basic error checking / reporting to the user providing bad input, and this answer allows me to report to them the potential matches <i>and</i> what the "similarity" was.  If you don't need to display the similarity, though, definitely check out <code>get_closest_matches</code></span>
<span class="comment-copy">but similar('appel','apple') is higher than similar('appel','ape')</span>
<span class="comment-copy">Your function will compare a given string against other stings. I want a way to return the string with the highest similarity ratio</span>
<span class="comment-copy">@SaulloCastro, <code>if self.similar(search_string, item.text()) &gt; 0.80:</code> works for now. Thanks,</span>
