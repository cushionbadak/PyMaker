<div class="post-text" itemprop="text">
<p>I have a list of a hundred or so strings and each string is compared with one another in 2 for loops, here is a very basic overview of code:</p>
<pre><code>string_list = ["PII", "AZO", "CVCO", "MOD"]

for x in string_list:
    for y in string_list:
        if x != y:
            print (x, y)
</code></pre>
<p>Which prints:</p>
<pre><code>PII AZO
PII CVCO
PII MOD
AZO PII
AZO CVCO
AZO MOD
CVCO PII
CVCO AZO
CVCO MOD
MOD PII
MOD AZO
MOD CVCO
</code></pre>
<p>As you can see, a lot of the strings are compared twice (PII - AZO and AZO - PII, etc.)</p>
<p>I've been trying to figure out how to avoid this problem using 2 count variables but I am scratching my head, there must be an easier/pythonic way of doing this so there are no overlapping string comparisons, does anyone know how to accomplish this?</p>
<p>Python 3, thanks.</p>
<p>EDIT:</p>
<p>Expected result:</p>
<pre><code>PII AZO
PII CVCO
PII MOD
AZO CVCO
AZO MOD
CVCO MOD
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://docs.python.org/3/library/itertools.html#itertools.combinations"><code>itertools.combinations()</code></a>:</p>
<pre><code>&gt;&gt;&gt; string_list = ["PII", "AZO", "CVCO", "MOD"]
&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt; for a, b in combinations(string_list, 2):
...     print(a, b)
... 
PII AZO
PII CVCO
PII MOD
AZO CVCO
AZO MOD
CVCO MOD
</code></pre>
<p>Your version generated <a href="http://docs.python.org/2/library/itertools.html#itertools.permutations">permutations</a> instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>The way you could do this by hand is by iterating over the second list, starting after the index of the first list:</p>
<pre><code>import itertools

for i, x in enumerate(string_list):
    for y in itertools.islice(string_list, i + 1, None)
        # if you don't have duplicates, this next check isn't necessary
        if x != y:
            print(x, y)
</code></pre>
<p><a href="http://docs.python.org/2/library/itertools.html#itertools.islice" rel="nofollow"><code>itertools.islice(list, start, stop)</code></a> is like <code>list[start:stop]</code>, but doesn't make a copy. Thanks to commenters who pointed that out.</p>
</div>
<span class="comment-copy">What's the expected result?</span>
<span class="comment-copy">Just remember that combinations will produce a generator, and you can only loop through a generator once. If you need the combos more than once use something like combos = list(combinations(string_list, 2))</span>
<span class="comment-copy">Minor nitpick: the OP's version isn't equivalent to <code>itertools.permutations()</code>.  If the list contains repeated items, the former wouldn't generate any <code>(x, x)</code> results, while the latter would.</span>
<span class="comment-copy"><code>itertools.islice(string_list,i, None)</code>.</span>
<span class="comment-copy"><code>itertools.islice()</code> would let you avoid a copy. :-)</span>
<span class="comment-copy">Thanks for explaining how it works, I choose the other answer only out of simplicity.</span>
<span class="comment-copy">@Goose That's generally a good plan -- use the standard library as much as you can. I just wanted to explain how to do it without that in case you needed to for some reason (or just wanted to know how it worked).</span>
