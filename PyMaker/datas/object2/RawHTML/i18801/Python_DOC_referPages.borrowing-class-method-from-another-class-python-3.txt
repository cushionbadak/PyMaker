<div class="post-text" itemprop="text">
<p>Borrowing the implementation of an instance method from another class is straightforward, but how do I do it with a class method?</p>
<pre><code>class A:
  def im(self):
    print(self.__class__.__name__)

  @classmethod
  def cm(cls):
    print(cls.__name__)

class B:
  im = A.im
  cm = A.cm # line X
  classmethod(cm)

B().im() # B - OK
B.cm() # A - not what I want
</code></pre>
<p>I also tried changing line X into <code>cm = A.cm.__func__</code>, which caused <code>TypeError: cm() missing 1 required positional argument: 'cls'</code></p>
</div>
<div class="post-text" itemprop="text">
<p>When you access <code>A.cm</code>, you invoke the <code>classmethod</code> object as a <a href="http://docs.python.org/3/howto/descriptor.html" rel="nofollow">descriptor</a>, which means it is already bound to the <code>A</code> class. Unwrap it again:</p>
<pre><code>class B:
    cm = classmethod(A.cm.__func__)
</code></pre>
<p>The <code>.__func__</code> attribute gives you access to the original function, so you can rewrap it with a new <code>classmethod</code> call.</p>
<p>Alternatively, use the <code>A.__dict__</code> mapping to get the actual classmethod itself, bypassing the descriptor calls:</p>
<pre><code>class B:
    cm = A.__dict__['cm']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need:</p>
<pre><code>class B:
  im = A.im
  cm = classmethod(A.cm.__func__)
</code></pre>
<p>When you access <code>A.cm</code>, the resulting classmethod already "knows" that it belongs to A.  If you want to rewrap it for a different class, you need to extract the underlying function with <code>__func__</code> and then rewrap it with <code>classmethod</code>.</p>
<p>Also, in your example, the line <code>classmethod(cm)</code> does nothing, because you don't assign the result to anything.</p>
</div>
<span class="comment-copy">That alternative looks quite intriguing, but also somehow dirty.</span>
<span class="comment-copy">It is the only way to prevent the descriptor protocol from kicking in; it is there mostly for illustration.</span>
<span class="comment-copy">Ah! So I was right to change line X the way I did - only I also should have changed the following line into <code>cm = classmethod(cm)</code>.</span>
<span class="comment-copy">@Heny'Pi'James: Yeah, that would have the same effect as my solution.</span>
