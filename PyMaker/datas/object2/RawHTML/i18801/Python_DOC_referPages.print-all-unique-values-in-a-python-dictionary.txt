<div class="post-text" itemprop="text">
<p>I'm struggling with a minor problem in Python (my program is in version 3.2.3 right now).</p>
<p>I have a dictionary that looks like this (this is just an example, actually taken from another post here):</p>
<pre><code>[{"abc":"movies"}, {"abc": "sports"}, {"abc": "music"}, {"xyz": "music"}, {"pqr":"music"}, {"pqr":"movies"},{"pqr":"sports"}, {"pqr":"news"}, {"pqr":"sports"}]
</code></pre>
<p>I want to simply print() a list of unique values, eliminating duplicates. At the end of this list, I would like to print the number of unique values in the dictionary:</p>
<pre><code>movies
sports
music
news

4
</code></pre>
<p>Any help is appreciated. There are some other posts here I found that were somewhat related, but I don't know Python well enough to apply it to this specific problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>set</code> here as they only contain unique items.</p>
<pre><code>&gt;&gt;&gt; lis = [{"abc":"movies"}, {"abc": "sports"}, {"abc": "music"}, {"xyz": "music"}, {"pqr":"music"}, {"pqr":"movies"},{"pqr":"sports"}, {"pqr":"news"}, {"pqr":"sports"}]
&gt;&gt;&gt; s = set( val for dic in lis for val in dic.values())
&gt;&gt;&gt; s 
set(['movies', 'news', 'music', 'sports'])
</code></pre>
<p>Loop over this set to get the expected output:</p>
<pre><code>for x in s:                                
    print x
print len(s)   #print the length of set after the for-loop
... 
movies
news
music
sports
4
</code></pre>
<p>This line <code>s = set( val for dic in lis for val in dic.values())</code> is roughly equivalent to:</p>
<pre><code>s = set()
for dic in lis:
   for val in dic.values():
      s.add(val)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a <code>set()</code>:</p>
<pre><code>from itertools import chain

unique_values = set(chain.from_iterable(d.values() for d in dictionaries_list))
for value in unique_values:
    print(value)

print(len(unique_values))
</code></pre>
<p>Use <code>.itervalues()</code> on Python 2 for a little more efficiency. Because you have a <em>list</em> of dictionaries, we need to pull out the values from each of those dictionaries first; I used <a href="http://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow"><code>itertools.chain.from_iterable()</code></a> with a generator expression to list all values in a sequence:</p>
<pre><code>&gt;&gt;&gt; for value in set(chain.from_iterable(d.values() for d in dictionaries_list)):
...     print(value)
... 
news
sports
movies
music
</code></pre>
<p>The alternative is to use nested loops in the generator expression:</p>
<pre><code>&gt;&gt;&gt; for value in set(v for d in dictionaries_list for v in d.values()):
...     print(value)
... 
news
sports
movies
music
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can explot the properties of <code>set</code> for this purpose; each element is unique and duplicates will be ignored.</p>
<pre><code>uniqueValues = set(myDict.values())
</code></pre>
<p>By using <code>set</code> in this way, duplicate elements returned from <code>.values()</code> will be discarded. You can then print them as follows:</p>
<pre><code>for value in uniqueValues:  
    print(value)  
print(len(uniqueValues))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>dict = {'511':'Vishnu','512':'Vishnu','513':'Ram','514':'Ram','515':'sita'}
list =[] # create empty list
for val in dict.values(): 
  if val in list: 
    continue 
  else:
    list.append(val)

print list
</code></pre>
</div>
<span class="comment-copy">you have a <i>list</i> of dictionaries.</span>
<span class="comment-copy">Points for explaining the nested list comprehension.</span>
<span class="comment-copy">That nested list is crazy, would have <b>never</b> thought of that.</span>
<span class="comment-copy">Please format your answer as code.</span>
