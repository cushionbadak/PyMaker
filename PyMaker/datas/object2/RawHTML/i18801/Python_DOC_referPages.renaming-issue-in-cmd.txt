<div class="post-text" itemprop="text">
<p>I have thousands of file in the form tmp2010.m01.nc where 2010 is any year and 01 any month so for example (tmp1900.m02.nc, tmp1925.m12.nc, etc) are files.</p>
<p>I need the names to be tmp1900m02.nc and tmp1925m12.nc for use in a python script. </p>
<p>So basically, I need to know how to remove the extra "." between the year and the "m"</p>
<p>So far I've tried:</p>
<pre><code>    ren *.m*.nc ???????m*.nc
    ren *.m*.nc *m*.nc
</code></pre>
<p>and neither of those have worked. </p>
<p>Or to solve the issue I'm running into in Python. If I don't rename it, and leave all of the files as is, python merges tmp1900.m01.nc, tmp1900.m02.nc,...,tmp1900.m12.nc into tmp1900.nc which is a problem since I need to have monthly files. 
The python script I'm using (which I know will work with tmp1900m01.nc type files is:</p>
<pre><code>    # Identify wet files 
    NCfiles = arcpy.ListFiles("wet*.nc")

    # Process: Make &amp; Save NetCDF Raster Layer
    for filename in NCfiles:

        fileroot = os.path.splitext(filename)[0]
        outFile = OutputFolder + str(fileroot)+".lyr"

        if os.path.exists(outFile):
            print("File " + filename + " already exists, nothing will be done")
        else:
            print("Processing: " + filename)
            inNCfiles = os.path.join(arcpy.env.workspace, filename)
            fileroot = os.path.splitext(filename)[0]
            LayerName = fileroot
            outRaster = os.path.join(OutputFolder, fileroot)
            inRaster = os.path.join(OutputFolder, fileroot + ".lyr")

    arcpy.MakeNetCDFRasterLayer_md(inNCfiles, "wet", "lon", "lat", LayerName, "", "", "BY_VALUE")
    arcpy.SaveToLayerFile_management(LayerName,outRaster,"ABSOLUTE") 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is in your Python script. Rather than try to bludgeon the input filenames to work around bugs in the script, let's just fix the script.</p>
<p>Your first problem is here:</p>
<pre><code>fileroot = filename[0:(len(filename)-3)]
</code></pre>
<p>This looks like it's supposed to split off an extension. But, besides being horribly over-complicated (<code>filename[0:(len(filename)-3)]</code> is exactly the same as <code>filename[:-3]</code>), it's also wrong given that you have both 2- and 3-character extensions.</p>
<p>The <a href="http://docs.python.org/3/library/os.path.html#os.path.splitext" rel="nofollow"><code>os.path</code></a> module exists so you don't have to do all this stuff the hard way. Just call <code>splitext</code>.</p>
<p>Next, you've got this:</p>
<pre><code>LayerName = str(filename).strip(r"*.nc")
</code></pre>
<p>This looks like it's supposed to strip off another extension. It's overcomplicated for different reasons (on top of using <code>strip</code> instead of <code>splitext</code>, what exactly is <code>str(filename)</code> supposed to do? Is <code>filename</code> not already a string?), and it's also wrong for a different reason: your files do not end with <code>"*.nc"</code>. You can't pass glob (wildcard) patterns to <code>strip</code>. And, even if you could, wouldn't that just strip off the entire filename?</p>
<p>On top of that, instead of splitting the next extension off the stripped <code>fileroot</code>, you're re-stripping the same extension off the original <code>filename</code>.</p>
<p>So:</p>
<pre><code>print("Processing: " + filename)
inNCfiles = os.path.join(arcpy.env.workspace, filename)
fileroot = os.path.splitext(filename)[0]
LayerName, m_ext = os.path.splitext(fileroot)
outRaster = os.path.join(OutputFolder, fileroot)
</code></pre>
<p>For the last line, I'm not sure whether you <em>want</em> the layer files to be <code>tmp1900m01.lyr</code> but they're <code>tmp1900.lyr</code>, or whether you're <em>complaining</em> that they're the former when you want the latter, or whether what you <em>actually</em> want is files like <code>tmp1900.m01.lyr</code>, just like the <code>.nc</code> files but with a different extension. But whichever one you want, you now have enough information. <code>LayerName</code> has the <code>tmp1900</code> part; <code>m_ext</code> has the <code>.m01</code> part, and <code>fileroot</code> has the whole <code>tmp1900.m01</code>. So, it's one of these:</p>
<pre><code>inRaster = os.path.join(OutputFolder, LayerName + ".lyr")

inRaster = os.path.join(OutputFolder, LayerName + m_ext[1:] + ".lyr")

inRaster = os.path.join(OutputFolder, fileroot + ".lyr")
</code></pre>
<hr/>
<p>Meanwhile, you've added this to the code:</p>
<pre><code>outFile = OutputFolder + str(fileroot)+".lyr"
</code></pre>
<p>Again, I don't know why you're calling <code>str</code> on something that's already a string. And it's a bit confusing that you've got a file named <code>inRaster</code> and a file named <code>outFile</code> that are supposed to be the same thing (is it an input file, or an output file?). More importantly, I don't know why you're trying to calculate the exact same path in two different ways.</p>
<p>But obviously, as long as you do that, you have to get them both right. Having <code>inRaster</code> correctly set to <code>tmp1900.m01.lyr</code> doesn't do you any good if <code>outFile</code> is <code>tmp1900.lyr</code> and that's the name you actually use to open the file.</p>
<hr/>
<p>As a side note, whenever you're using <code>os.path.exists</code>, you may be doing it wrong. It's often simpler and more robust to just try to open the file and deal with it if things go wrong. For example, if you just <code>open</code> with mode <code>x</code>, it will raise an exception if the file already exists. Just handle that exception and continue on to the next filename.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just replace the first period with nothing</p>
<pre><code>file_names = ["tmp1900.m02.nc", "tmp1925.m12.nc"]
for file_name in file_names:
    new_file_name = file_name.replace('.', '', 1)
    print new_file_name
</code></pre>
</div>
<span class="comment-copy">What are you trying to do with <code>fileroot = filename[0:(len(filename)-3)]</code>? First, that's the same thing as <code>filename[:-3]</code>. Second, if you're trying to peel off an extension that way, that doesn't work if your extensions can be different lengths—as they can in your example (<code>.nc</code> and <code>.lyr</code>). Use <a href="http://docs.python.org/3/library/os.path.html#os.path.splitext" rel="nofollow noreferrer"><code>os.path.splitext</code></a>—that's what it's there for.</span>
<span class="comment-copy">Thanks! I changed the script and placed it in my original post. Unfortunately, the .lyr files are still tmp1900.lyr rather than tmp1900m01.lyr.</span>
<span class="comment-copy">@user12279: OK, now I understand a bit more about what you're trying to do. It might help you to step through this in the debugger or an <a href="http://pythontutor.com/visualize.html" rel="nofollow noreferrer">interactive visualizer</a>, or just to <code>print</code> out each intermediate value, and explain exactly what you expect each variable to hold. But I think my answer now explains it.</span>
<span class="comment-copy">@user12279: Wait, never mind, I see you made another change: you've got <code>outFile = OutputFolder + str(fileroot)+".lyr"</code>, which is of course independent of your attempt to re-create the same pathname in <code>inRaster</code>, so won't be fixed by anything you do there. Let me edit again…</span>
