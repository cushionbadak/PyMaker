<div class="post-text" itemprop="text">
<p>In my program, many processes can try to create a file if the file doesnt exist currently. 
Now I want to ensure that only one of the processes is able to create the file and the rest get an exception if its already been created(kind of process safe and thread safe open() implementation). 
How can I achieve this in python. </p>
<p>Just for clarity, what I want is that the file is created if it doesnt exist. But if it already exists then throw an exception. And this all should happen atomicly. </p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2.x:</p>
<pre><code>import os

fd = os.open('filename', os.O_CREAT|os.O_EXCL)
with os.fdopen(fd, 'w') as f:
    ....
</code></pre>
<p>In Python 3.3+:</p>
<pre><code>with open('filename', 'x') as f:
    ....
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're running on a Unix-like system, open the file like this:</p>
<pre><code>f = os.fdopen(os.open(filename, os.O_CREAT | os.O_WRONLY | os.O_EXCL), 'w')
</code></pre>
<p>The <code>O_EXCL</code> flag to <code>os.open</code> ensures that the file will only be created (and opened) if it doesn't already exist, otherwise an <code>OSError</code> exception will be raised. The existence check and creation will be performed atomically, so you can have multiple threads or processes contend to create the file, and only one will come out successful.</p>
</div>
<span class="comment-copy">This code achieves the desired functionality.</span>
<span class="comment-copy">@naxa, Documentation of Python 3.3+ <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer"><code>open(..., 'x')</code></a> does not have any <code>availability</code> information; that usually means it support all platforms. While documentation of Python 2.x <a href="https://docs.python.org/2/library/os.html#os.fdopen" rel="nofollow noreferrer"><code>os.fdopen</code></a> mention about availability: Unix, Windows.</span>
<span class="comment-copy">@naxa, According to <a href="https://docs.python.org/2/library/os.html#open-flag-constants" rel="nofollow noreferrer">the documentation: open() flag constants</a>: The following constants are options for the flags parameter to the open() function. They can be combined using the bitwise OR operator |. Some of them are not available on all platforms. For descriptions of their availability and use, consult the open(2) manual page on Unix or the MSDN on Windows.</span>
<span class="comment-copy">Oh I overlooked the link to the <a href="http://msdn.microsoft.com/en-us/library/z0kc8e3z.aspx" rel="nofollow noreferrer">msdn</a> docs on open flags. sloppy reading. Thanks for pointing that out! I'm removing my earlier comments because frankly yours are the ones that are informative.</span>
<span class="comment-copy">Both of those constants should be <a href="http://docs.python.org/2/library/os.html#open-flag-constants" rel="nofollow noreferrer">available on Windows as well</a>.</span>
<span class="comment-copy">The constants might be available, but I wouldn't dare claim that atomicity is implemented the same way without some research.</span>
<span class="comment-copy">I think what I asked for was, that if the file doesnt exist, open it but if it exists(already created by another process), then throw an exception. It seems that this code will throw exception if the file is not there and will pass if it exists.</span>
<span class="comment-copy">@Adobri This does exactly what you asked for, the accompanying test came out backward.</span>
