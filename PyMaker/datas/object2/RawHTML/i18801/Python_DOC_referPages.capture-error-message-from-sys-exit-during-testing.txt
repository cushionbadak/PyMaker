<div class="post-text" itemprop="text">
<p>Is there a way to "capture" the error message printed out by <code>sys.exit()</code> during testing and compare it to another string?</p>
<p>Some background: in the Python script I'm working on, I've been using <code>sys.exit()</code> to print out a more specific error message (and avoid the traceback which usually arises).</p>
<pre><code>try:
    do_something()
except IOError:
    sys.exit('my error message')
</code></pre>
<p>Other times, I just use the regular message (esp. with ConfigParser):</p>
<pre><code>except ConfigParser.NoSectionError as err:
    sys.exit(err)
</code></pre>
<p>I would like to capture the error message there and perhaps use an <code>assertIs(err, 'my intended error message')</code> to compare.</p>
<p>The script I'm working on has both Python 2 &amp; 3 versions, so I'd appreciate some examples if there are differences between them for doing this.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/3/library/sys#sys.exit" rel="nofollow"><code>sys.exit</code></a> dosn't do anythin else then raising <code>SystemExit</code>, which you can catch like any other exception.</p>
<p>The example about the context manager just shows you how you can use it to get the exception which was thrown in the with block if you need to perform checks on it.</p>
<p>In the case of SystemExit this would look like this:</p>
<pre><code>with self.assertRaises(SystemExit) as cm:
    sys.exit('some message')

self.assertEqual(cm.exception.args[0], 'some message')
...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>assertEqual</code> is part of unittest's TestCase, so won't help you if you're not using it. You would have to shell off the process to see what happens. Why not write some unit tests instead?</p>
</div>
<div class="post-text" itemprop="text">
<p>Check out the examples in <code>traceback</code> and the provided exit block.</p>
<p><a href="https://docs.python.org/3/library/traceback.html" rel="nofollow noreferrer">https://docs.python.org/3/library/traceback.html</a></p>
<pre><code>Python 3.6.6 |Anaconda custom (64-bit)| (default, Jun 28 2018, 11:27:44) [MSC v.1900 64 bit (AMD64)]

import traceback


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        with open('death.log', 'w') as fh:
            big_stack = '\n'.join(traceback.format_stack())
            print(big_stack)
            print(repr(e))
            fh.write(big_stack)
            fh.write(repr(e))
</code></pre>
</div>
<span class="comment-copy">Thanks for the explanation. This gave me the clue I needed.</span>
<span class="comment-copy">I'm un-accepting this for now - I'd like to see other suggestions, if possible. If nothing else comes up after a few days, I'll accept this again.</span>
<span class="comment-copy">I <i>was</i> trying to write unit tests. :) What I needed to do was get the error message produced by <code>sys.exit('my error message')</code> and use an <code>assertEqual</code> to test if that error message is indeed printed out. I thought the first sentence made it clear.</span>
<span class="comment-copy">While this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.</span>
<span class="comment-copy">edited with documentation reference</span>
