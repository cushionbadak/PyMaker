<div class="post-text" itemprop="text">
<p>Can <code>not x</code> and <code>x==None</code> give different answers if <code>x</code> is a class instance ?</p>
<p>I mean how is <code>not x</code> evaluated if <code>x</code> is a class instance ?</p>
</div>
<div class="post-text" itemprop="text">
<p>yes it <strong>can</strong> give different answers.</p>
<pre><code>x == None
</code></pre>
<p>will call the <a href="http://docs.python.org/2/reference/datamodel.html#object.__eq__" rel="noreferrer"><code>__eq__()</code></a> method to valuate the operator and give the result implemented compared to the <code>None</code> singleton.</p>
<pre><code>not x
</code></pre>
<p>will call the <a href="http://docs.python.org/2/reference/datamodel.html#object.__nonzero__" rel="noreferrer"><code>__nonzero__()</code></a> (<a href="http://docs.python.org/3.1/reference/datamodel.html#object.__bool__" rel="noreferrer"><code>__bool__()</code></a> in python3) method to valuate the operator. The interpreter will convert <code>x</code> to a boolean (<code>bool(x)</code>) using the mentioned method and then inverse its returned value because of the <a href="http://docs.python.org/3/reference/expressions.html#not" rel="noreferrer"><code>not</code> operator</a>.</p>
<pre><code>x is None
</code></pre>
<p>means that the reference x points to the <code>None</code> object, which is a singleton of type <code>NoneType</code> and will valuate false in comparaisons. The <a href="http://docs.python.org/2/library/operator.html#operator.is_" rel="noreferrer"><code>is</code> operator</a> tests object identity, and thus whether or not the two objects compared are the <em>same</em> instance of an object, and not <em>similar</em> objects.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>class A():
    def __eq__(self, other):  #other receives the value None
        print 'inside eq'
        return True
    def __nonzero__(self):    
        print 'inside nonzero'
        return True
...     
&gt;&gt;&gt; x = A()
&gt;&gt;&gt; x == None      #calls __eq__
inside eq
True
&gt;&gt;&gt; not x          #calls __nonzero__
inside nonzero
False
</code></pre>
<p><code>not x</code> is eqivalent to:</p>
<pre><code>not bool(x)
</code></pre>
<p>Py 3.x:</p>
<pre><code>&gt;&gt;&gt; class A(object):
        def __eq__(self, other):    #other receives the value None
                print ('inside eq')
                return True
        def __bool__(self):    
                print ('inside bool')
                return True
...     
&gt;&gt;&gt; x = A()
&gt;&gt;&gt; x == None       #calls __eq__
inside eq
True
&gt;&gt;&gt; not x           #calls __bool__ 
inside bool 
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes; <a href="http://docs.python.org/3/reference/expressions.html#not" rel="nofollow"><code>not</code> uses <code>__bool__</code></a> (in Python 3; Python 2 uses <code>__nonzero__</code>), and <code>x == None</code> can be overridden by <code>__eq__</code>.</p>
<p><a href="http://ideone.com/t9yWj8" rel="nofollow">(Both are shown here.)</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If <code>x</code> is <em>positive</em> the <code>not</code> of it means <em>negative</em> and vice-versa.</p>
<p><code>x == None</code> means it will only be <code>True</code> if <code>x is None</code> is <code>True</code> else False. Check <a href="https://stackoverflow.com/q/26595/1309352">this</a>.</p>
<p>By positive I mean the <code>if</code> block is chosen. <code>True</code> is also positive.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>not x</code> is true for a wide variety of values, e.g. <em>0</em>, <em>None</em>, <em>""</em>, <em>False</em>, <em>[]</em>, <em>{}</em>, etc.</p>
<p><code>x == None</code> is only true for the one specific value <em>None</em>.</p>
<p>If <strong>x</strong> is a class instance, then both <code>not x</code> and <code>x == None</code> will be false, but that doesn't mean that those are equivalent expressions.</p>
<hr/>
<p>Fine; that previous paragraph should read:</p>
<p>If <strong>x</strong> is a class instance, then both <code>not x</code> and <code>x == None</code> will be false unless someone is playing silly buggers with the class definition.</p>
</div>
<span class="comment-copy">Does your class have a <code>__nonzero__</code> method (or <code>__bool__</code> in 3.x)?</span>
<span class="comment-copy">It will if <code>x = False</code>, at least.</span>
<span class="comment-copy"><a href="http://ideone.com/t9yWj8" rel="nofollow noreferrer">Yes.</a></span>
<span class="comment-copy">Keep in mind that if you're going to compare against <code>None</code>, you should do it <code>x is None</code>.</span>
<span class="comment-copy">Note that you should not use <code>x == None</code>, and should instead use <code>x is None</code></span>
<span class="comment-copy">@Imagine Any differences?</span>
<span class="comment-copy">@Cthulhu: <a href="http://ideone.com/t9yWj8" rel="nofollow noreferrer">Yes.</a></span>
<span class="comment-copy">@Cthulhu <code>x == None</code> and <code>x is None</code> should never result in different answers. But, since <code>None</code> is a singleton instance, it is considered better practice to use <code>is None</code>.</span>
<span class="comment-copy">@arshajii <code>x == None</code> and <code>x is None</code> could return different answers if an implemented object's <code>__eq__</code> returns True (for some reason), but the object itself is not <code>None</code>.</span>
<span class="comment-copy"><code>If x is a class instance, then both not x and x == None will be false, but that doesn't mean that those are equivalent expressions.</code> - That is not true at all, class instance can evaluate to both <code>False</code> and <code>None</code>.</span>
<span class="comment-copy">When will a class instance evaluate to <code>None</code> apart from explicitly assigning <code>None</code> to it? You mean, when <code>__eq__ ()</code> returns <code>None</code>?</span>
<span class="comment-copy">Your answer started out well.</span>
<span class="comment-copy">OK, I see from Ashwini's answer above that it is possible to craft a class definition for which "<i>not x</i>" is true and "<i>x == None</i>" is true, but I don't see how that it serves any useful purpose other than to prove that it's possible.</span>
<span class="comment-copy">Actually, now that I think about it, I can imagine lots of cases where a class object can be considered to be "zero"; e.g. a numeric class like complex numbers or quaternions.</span>
