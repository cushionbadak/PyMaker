<div class="post-text" itemprop="text">
<p>I have a variable with a string value in it.
I want to create a list with the value as its name/identifier, then append values to the list.
So assuming variable <code>s = "temp1"</code>, I want to create a list called <code>temp1</code>.
Obviously, in my case, I would not know what the value of <code>s</code> will be.</p>
</div>
<div class="post-text" itemprop="text">
<p>Don't. Creating dynamic variables is rarely a good idea, and if you are trying to create local names (inside a function), difficult and greatly affects performance.</p>
<p>Use a dictionary instead:</p>
<pre><code>lists = {}
lists[strs] = []
lists[strs].append(somevalue)
</code></pre>
<p>Namespaces are just default dictionaries for code to look up names in. It is a lot easier and cleaner to create more such dictionaries.</p>
<p>You can still access the global (module namespace with the <a href="http://docs.python.org/2/library/functions.html#globals" rel="nofollow"><code>globals()</code></a> function, which returns a (writable) dictionary. You can access the function local namespace with <a href="http://docs.python.org/2/library/functions.html#locals" rel="nofollow"><code>locals()</code></a>, but writing to this usually has no effect as local namespace access in functions has been optimized.</p>
<p>In Python 2 you can remove that optimisation by using a <code>exec</code> statement in the function. In Python 3, you can no longer switch off the optimisation as the <code>exec</code> statement has been replaced by the <a href="http://docs.python.org/3/library/functions.html#exec" rel="nofollow"><code>exec()</code> function</a>, which means the compiler can no longer detect with certainty that you are potentially writing to the local namespace with it.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>globals()</code>:</p>
<pre><code>&gt;&gt;&gt; strs = "temp1"
&gt;&gt;&gt; globals()[strs] = []
&gt;&gt;&gt; temp1
[]
</code></pre>
<p>But using a dict for such purpose would be more appropriate:</p>
<pre><code>&gt;&gt;&gt; dic = {strs:[]}
&gt;&gt;&gt; dic["temp1"]
[]
</code></pre>
</div>
<span class="comment-copy">thank for the response and insight.</span>
