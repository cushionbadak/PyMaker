<div class="post-text" itemprop="text">
<p>In one of my testing scripts in Python I use this pattern several times:</p>
<pre><code>sys.path.insert(0, "somedir")
mod =  __import__(mymod)
sys.path.pop(0)
</code></pre>
<p>Is there a more concise way to temporarily modify the search path?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a simple <a href="https://docs.python.org/3/reference/datamodel.html#context-managers" rel="nofollow noreferrer">context manager</a>:</p>
<pre><code>import sys

class add_path():
    def __init__(self, path):
        self.path = path

    def __enter__(self):
        sys.path.insert(0, self.path)

    def __exit__(self, exc_type, exc_value, traceback):
        try:
            sys.path.remove(self.path)
        except ValueError:
            pass
</code></pre>
<p>Then to import a module you can do:  </p>
<pre><code>with add_path('/path/to/dir'):
    mod = __import__('mymodule')
</code></pre>
<p>On exit from the body of the <code>with</code> statement <code>sys.path</code> will be restored to the original state. If you only use the module within that block you might also want to delete its reference from <a href="https://docs.python.org/3.6/library/sys.html#sys.modules" rel="nofollow noreferrer"><code>sys.modules</code></a>:</p>
<pre><code>del sys.modules['mymodule']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Appending a value to <code>sys.path</code> only modifies it temporarily, i.e for that session only.</p>
<p>Permanent modifications are done by changing <code>PYTHONPATH</code> and the default installation directory.</p>
<p>So, if by temporary you meant for current session only then your approach is okay, but you can remove the <code>pop</code> part if <code>somedir</code> is not hiding any important modules that is expected to be found in in <code>PYTHONPATH</code> ,current directory or default installation directory.</p>
<p><a href="http://docs.python.org/2/tutorial/modules.html#the-module-search-path" rel="noreferrer">http://docs.python.org/2/tutorial/modules.html#the-module-search-path</a></p>
</div>
<span class="comment-copy">This is a nice solution.  Is it better to remove the path as you don't know the code within the context manager's context is not going to modify sys.path itself?</span>
<span class="comment-copy">Yes, it may be better in such cases. Just use <code>sys.path.remove(self.path)</code> instead of <code>sys.path.pop(0)</code>.</span>
<span class="comment-copy">to add to @dementedhedgehog 's suggestion: you might also want to catch a <code>ValueError</code> raised by <code>sys.path.remove</code> in case the code in the context has already removed the path itself</span>
<span class="comment-copy">I cannot think of a different way, however as already mentioned, the variable sys.path will only keep its modified value within this Python session. Normally, there is no need to remove a path from sys.path, at least I cannot think of a good reason to do so.  A really permanent modification of sys.path would require that you modify the PYTHONPATH environment variable of your shell.</span>
<span class="comment-copy">@JohannesP If "somedir" is hiding(masking) some module that is expected to be found in found in <code>PYTHONPATH</code>,etc then we can remove that entry to fix that.</span>
<span class="comment-copy">I remove the directory after import to not slow down the search (there potentially can be hundreds of paths)</span>
<span class="comment-copy">@planetp then it's perfectly okay.</span>
