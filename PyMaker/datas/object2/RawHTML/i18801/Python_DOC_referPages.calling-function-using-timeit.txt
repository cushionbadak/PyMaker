<div class="post-text" itemprop="text">
<p>I'm trying to time several things in python, including upload time to Amazon's S3 Cloud Storage, and am having a little trouble. I can time my hash, and a few other things, but not the upload. I thought <a href="https://stackoverflow.com/questions/7523767/how-to-use-python-timeit-when-passing-variables-to-functions">this</a> post would finally, get me there, but I can't seem to find salvation. Any help would be appreciated. Very new to python, thanks! </p>
<pre><code>import timeit

accKey = r"xxxxxxxxxxx";
secKey = r"yyyyyyyyyyyyyyyyyyyyyyyyy";

bucket_name = 'sweet_data'

c = boto.connect_s3(accKey, secKey)
b = c.get_bucket(bucket_name);
k = Key(b);

p = '/my/aws.path'
f = 'C:\\my.file'

def upload_data(p, f):
    k.key = p
    k.set_contents_from_filename(f)
    return

t = timeit.Timer(lambda: upload_data(p, f), "from aws_lib import upload_data; p=%r; f = %r" % (p,f))

# Just calling the function works fine
#upload_data(p, f)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I know this is heresy in the Python community, but I actually recommend <em>not</em> to use <code>timeit</code>, especially for something like this.  For your purposes, I believe it will be good enough (and possibly even better than <code>timeit</code>!) if you simply use <code>time.time()</code> to time things.  In other words, do something like</p>
<pre><code>from time import time

t0 = time()
myfunc()
t1 = time()
print t1 - t0
</code></pre>
<p>Note that depending on your platform, you might want to try <code>time.clock()</code> instead (see Stack Overflow questions such as <a href="https://stackoverflow.com/questions/85451/python-time-clock-vs-time-time-accuracy">this</a> and <a href="https://stackoverflow.com/questions/1938048/high-precision-clock-in-python">this</a>), and if you're on Python 3.3, then you have <a href="http://docs.python.org/3/library/time.html" rel="nofollow noreferrer">better options</a>, due to <a href="http://www.python.org/dev/peps/pep-0418/" rel="nofollow noreferrer">PEP 418</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the command line interface to <code>timeit</code>.</p>
<p>Just save your code as a module without the timing stuff. For example:</p>
<pre><code># file: test.py
data = range(5)
def foo(l):
    return sum(l)
</code></pre>
<p>Then you can run the timing code from the command line, like this:</p>
<pre><code>$ python -mtimeit -s 'import test;' 'test.foo(test.data)' 
</code></pre>
<p>See also:</p>
<ul>
<li><a href="http://docs.python.org/2/library/timeit.html#command-line-interface" rel="nofollow">http://docs.python.org/2/library/timeit.html#command-line-interface</a></li>
<li><a href="http://docs.python.org/2/library/timeit.html#examples" rel="nofollow">http://docs.python.org/2/library/timeit.html#examples</a></li>
</ul>
</div>
<span class="comment-copy">That is so much easier. Thanks a lot!</span>
<span class="comment-copy">I'm sure that this works great, but it's a little more complicated than what I'm looking for. I was really looking to add a few lines to test parts of a function (module) instead of significantly altering my code. Thanks though, I'm sure that this will come in handy another time.</span>
