<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1419046/normal-arguments-vs-keyword-arguments">Normal arguments vs. keyword arguments</a>
<span class="question-originals-answer-count">
                    9 answers
                </span>
</li>
</ul>
</div>
<p>In Python, these two examples do the same thing:</p>
<pre><code>from tkinter import Label
widget = Label(None, text='Hello')
widget.pack()
widget.mainloop()

from tkinter import Label
widget = Label(None,'Hello')
widget.pack()
widget.mainloop()
</code></pre>
<p>I think <code>Label</code> is a class, and when I try to create an instance of that class, I always do the same thing as in the last code example. I feel strange about the meaning of <code>text='Hello'</code>. Could anyone please tell me about that?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>text='Hello'</code> means you're explicitly passing the value <code>'Hello'</code> to a <strong>keyword argument</strong> <code>text</code> in the function arguments.</p>
<p><code>Label(None,'Hello')</code> means <code>'Hello'</code> is passed to the second positional argument in the function definition(no matter what the name of that variable is)</p>
<pre><code>&gt;&gt;&gt; def func(first, second):
...     print first, second
...     
&gt;&gt;&gt; func('foo', 'text')
foo text
&gt;&gt;&gt; func('foo', second = 'text')
foo text
</code></pre>
<p>With keyword arguments the order of calling doesn't matter, but all keyword arguments must come after positional arguments.</p>
<pre><code>&gt;&gt;&gt; def func(first, second, third):
    print first, second, third
...     
&gt;&gt;&gt; func('foo', third = 'spam', second = 'bar')
foo bar spam
</code></pre>
<p>Here <code>first</code> gets the value <code>'foo'</code> because of it's position, while <code>second</code> and <code>third</code> got their values because they were passed those values by explicitly using their names.</p>
<p>For more details read docs: <a href="http://docs.python.org/3/tutorial/controlflow.html#more-on-defining-functions" rel="noreferrer">http://docs.python.org/3/tutorial/controlflow.html#more-on-defining-functions</a></p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I feel strange about the meaning of text='Hello'. Could anyone please tell me about that?</p>
</blockquote>
<p>It is a <a href="http://www.diveintopython.net/power_of_introspection/optional_arguments.html" rel="noreferrer">named argument</a> or <a href="http://docs.python.org/3/tutorial/controlflow.html#keyword-arguments" rel="noreferrer">keyword argument</a>.</p>
<p>Named arguments allow to pass arguments to functions in any order by not only passing the argument value, but also the argument name.</p>
</div>
<div class="post-text" itemprop="text">
<p>As others said, this is a <code>keyword argument</code>. Pragmatically, the difference between specifying or not the argument is simply which argument is going to be used.</p>
<p>For example, if you had a function with 3 arguments, and only passed one, or two of them, you'd have to specify which argument you were using, in case they were not the first ones in your definition.</p>
<pre><code>def f(a = "a", b = "b", c = "c"):
    print a, b, c

&gt;&gt;&gt; f("x")
x b c
&gt;&gt;&gt; f("x", "y")
x y c
&gt;&gt;&gt; f("x", c = "y")
x b y
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>text</code> in this case is a <a href="http://docs.python.org/3/tutorial/controlflow.html#keyword-arguments" rel="noreferrer">keyword argument</a>, which means that it is optional. If you don't supply it explicitly, a default value will be supplied automatically.</p>
</div>
<span class="comment-copy">Here you do not create a class, you create an object by instantiating the class <code>Label</code>.</span>
<span class="comment-copy">@glglgl oh..I mean create an instance of a class.. You are right...</span>
<span class="comment-copy">+ 1 Also known as "Named Parameter Association" in other languages.</span>
<span class="comment-copy">You can pass non-optional arguments by keyword. Ashwini Chaudhary's example code does this, for instance. I think you're confusing them, because the syntax for a call with keyword arguments looks similar to a definition with default parameters: <code>foo(bar=baz)</code>.</span>
<span class="comment-copy">I'm aware of the nuance, but left it out of the answer since the linked docs explain things pretty well. Note also that with some functions it's not a good idea to use keyword arguments even when it's possible to do so, see  <a href="http://docs.python.org/3.3/library/random.html#random.randrange" rel="nofollow noreferrer">randrange</a>.</span>
