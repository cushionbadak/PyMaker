<div class="post-text" itemprop="text">
<p>I have created a shelve file and inserted a dictionary data. Now I want to cleanup that shelve file to reuse as a clean file.</p>
<pre><code>import shelve
dict = shelve.open("Sample.db")
# insert some data into sample.db
dict = { "foo" : "bar"}

#Now I want to clean entire shelve file to re-insert the data from begining.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Shelve behaves just like a dictionary, thus:</p>
<pre><code>dict.clear()
</code></pre>
<p>Alternatively, you can always remove the file and let shelve create a new one.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>dict.clear()</code> is the easiest, and should be valid, but seems to not actually clear the shelf files (Python 3.5.2, Windows 7 64-bit). For example, the shelf <code>.dat</code> file size grows every time I run the following snippet, while I would expect it to always have the same size:</p>
<pre><code>shelf = shelve.open('shelf')
shelf.clear()
shelf['0'] = list(range(10000))
shelf.close()
</code></pre>
<hr/>
<p><strong>Update:</strong> <code>dbm.dumb</code>, which <code>shelve</code> uses as its underlying database under Windows, contains this TODO item <a href="https://github.com/python/cpython/blob/master/Lib/dbm/dumb.py" rel="nofollow noreferrer">in its code</a>:</p>
<blockquote>
<ul>
<li>reclaim free space (currently, space once occupied by deleted or expanded items is never reused)</li>
</ul>
</blockquote>
<p>This explains the ever-growing shelf file problem.</p>
<hr/>
<p>So instead of <code>dict.clear()</code>, I'm using <code>shelve.open</code> with <code>flag='n'</code>. Quoting <a href="https://docs.python.org/3/library/shelve.html#shelve.open" rel="nofollow noreferrer"><code>shelve.open()</code> documentation</a>: </p>
<blockquote>
<p>The optional flag parameter has the same interpretation as the flag
  parameter of dbm.open().</p>
</blockquote>
<p>And <a href="https://docs.python.org/3/library/dbm.html#dbm.open" rel="nofollow noreferrer"><code>dbm.open()</code> documentation</a> for <code>flag='n'</code>:</p>
<blockquote>
<p>Always create a new, empty database, open for reading and writing</p>
</blockquote>
<p>If the shelf is already open, the usage would be:</p>
<pre><code>shelf.close()
shelf = shelve.open('shelf', flag='n')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>none of these really work What I ended up doing was creating a function to handle the file deletion.   </p>
<pre><code>import shelve
import pyperclip
import sys
import os

mcbShelf = shelve.open('mcb')
command = sys.argv[1].lower()

def remove_files():
    mcbShelf.close()
    os.remove('mcb.dat')
    os.remove('mcb.bak')
    os.remove('mcb.dir')

if command == 'save':
    mcbShelf[sys.argv[2]] = pyperclip.paste()
elif command == 'list':
    pyperclip.copy(", ".join(mcbShelf.keys()))
elif command == 'del':
    remove_files()
else:
    pyperclip.copy(mcbShelf[sys.argv[1]])

mcbShelf.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think this is what you're looking for.</p>
<pre><code>del dict["foo"]
</code></pre>
</div>
<span class="comment-copy">Why not just delete the file?</span>
<span class="comment-copy">Note that <code>dict = { "foo" : "bar"}</code> should be <code>dict["foo"] = "bar"</code>. As it is now, it doesn't insert data into the shelf object - instead it points <code>dict</code> to a new dictionary object while leaving the shelf unchanged.</span>
<span class="comment-copy">The <code>shelve</code> module is allowed to add stuff to the filename you give it, and on my machine it actually creates a couple files. Clearing the dictionary seems easier as it steers clear of the question of what file or files to delete.</span>
<span class="comment-copy">The most simplest explanation. Thanks</span>
