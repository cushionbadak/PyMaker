<div class="post-text" itemprop="text">
<p>I have a small python webserver script for hosting my own website, complete with request handling and error returning. This script worked perfectly on my PC, but when I tried it on my raspberry Pi, it would not restart every 3 minutes (Server would crash after 15, so restarting every 3 minutes seemed good).</p>
<p>So I rewrote my server script and it checks stuff like if it's booting up for the first time or restarting. I'll just show you the code.</p>
<pre><code>#Handler class above here
...
...
class Server:

    global server_class, server_adress, httpd
    server_class = HTTPServer
    server_adress = ('localhost', 8080)
    httpd = server_class(server_adress, Handler)

    def __init__(self):

        self.status = False
        self.process()

    def process(self):

        print(self.status)

        process = threading.Timer(10, self.process)
        process.start()

        if self.status == True:

            httpd.socket.close()
            self.main()

        if self.status == False:

            self.main()

    def main(self):

        try:

            if self.status == False:

                print("Server online!")
                self.status = True
                httpd.serve_forever()

            if self.status == True:

                print("Server restarted!")
                httpd.serve_forever()

        except KeyboardInterrupt:

            print("Server shutting down...")
            httpd.socket.close()

    if __name__ == "__main__":
        instance = Server()
</code></pre>
<p>After the ten seconds of running (And it works, I can access my website on <code>http://localhost:8080/index.html</code>), it will continue giving the following error every ten seconds:</p>
<pre><code>File "C:\Users\myname\Dropbox\Python\Webserver\html\server.py", line 187, in main httpd.serve_forever()
File "C:\Python33\lib\socketserver.py", line 237, in serve_forever poll_interval)
File "C:\Python33\lib\socketserver.py", line 155, in _eintr_retry return func(*args)
ValueError: file descriptor cannot be a negative integer (-1)
</code></pre>
<p>Basically, how do I fix this? I could just use a simple function with a threading timer to restart the function that is running the server, but somehow that doesn't work on my Raspberry Pi, but it does on my windows.</p>
<p>EDIT:
I should also note that the first time starting the script I can access the website and it's fast. After 10 seconds (after the server restarting), I can access it but it is very slow. After another 10 seconds I am not able to access my website.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem you get happens because you access the underlying socket of the server directly. Closing the socket is effectively like unplugging your network connection. The actual server that is sitting on top of the socket remains unaware of the fact that the socket was closed, and tries to continue to serve. As the socket was closed, there is no longer a file descriptor available (this is the error you get).</p>
<p>So instead of cutting the server off its connection, you should tell the server to actually shut down gracefully. This allows it to finish any ongoing connections and safely release everything it might do in the background. You can do that using the <a href="http://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.shutdown" rel="nofollow"><code>shutdown</code></a> method. Executing that will internally tell the server to remember to shut down the next time the loop within <a href="http://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.serve_forever" rel="nofollow"><code>serve_forever</code></a> occurs.</p>
<p>If I remember correctly, <code>serve_forever</code> is a blocking method, meaning that it will not continue when it is executed. So the simplest way to make a server restart itself would be a single main thread doing this:</p>
<pre><code>while True:
    httpd.serve_forever()
</code></pre>
<p>So whenever the server stops—for whatever reason—it immediately starts again. Of course here you would now add some status variable (instead of <code>True</code>) which allows you to actually turn off the server. For example in the body of a <code>KeyboardInterrupt</code> catch, you would first set that variable to <code>False</code> and then shut down the server using <code>httpd.shutdown()</code>.</p>
</div>
<span class="comment-copy">What’s the reason for those global variables? You should make them instance variables of your <code>Server</code> type instead.</span>
<span class="comment-copy">@poke it's something I tried.</span>
<span class="comment-copy">Also I see a huge concurrency issue with both the <code>self.status</code> and the <code>httpd</code> variable. Neither are thread safe but you keep accessing them from different threads (in <code>main</code> and <code>process</code>).</span>
<span class="comment-copy">@poke How are they not thread safe? And should I use something else than a thread for the restarting?</span>
<span class="comment-copy">Thanks! I guess I should read more of the documentation.</span>
