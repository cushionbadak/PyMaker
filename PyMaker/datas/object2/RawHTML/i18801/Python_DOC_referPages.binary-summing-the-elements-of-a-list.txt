<div class="post-text" itemprop="text">
<p>I need to sum the elements of a list, containing all zeros or ones, so that the result is 1 if there is a 1 in the list, but 0 otherwise. </p>
<pre><code>def binary_search(l, low=0,high=-1):
    if not l: return -1
    if(high == -1): high = len(l)-1
    if low == high:
        if l[low] == 1: return low
        else: return -1
    mid = (low + high)//2
    upper = [l[mid:high]]
    lower = [l[0:mid-1]]
    u = sum(int(x) for x in upper)
    lo = sum(int(x) for x in lower)
    if u == 1: return binary_search(upper, mid, high)
    elif lo == 1: return binary_search(lower, low, mid-1)
    return -1

 l = [0 for x in range(255)]
 l[123] = 1
 binary_search(l)
</code></pre>
<p>The code I'm using to test </p>
<pre><code>u = sum(int(x) for x in upper)
</code></pre>
<p>works fine in the interpreter, but gives me the error </p>
<p>TypeError: int() argument must be a string or a number, not 'list'</p>
<p>I've just started to use python, and can't figure out what's going wrong (the version I've written in c++ doesn't work either).</p>
<p>Does anyone have any pointers? </p>
<p>Also, how would I do the sum so that it is a binary xor, not simply decimal addition?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I need to sum the elements of a list, containing all zeros or ones, so that the result is 1 if there is a 1 in the list, but 0 otherwise. </p>
</blockquote>
<p>No need to sum the whole list; you can stop at the first 1.  Simply use <code>any()</code>. It will return <code>True</code> if there is at least one truthy value in the container and <code>False</code> otherwise, and it short-circuits (i.e. if a truthy value is found early in the list, it doesn't scan the rest). Conveniently, 1 is truthy and 0 is not.</p>
<p><code>True</code> and <code>False</code> work as 1 and 0 in an arithmetic context (Booleans are a subclass of integers), but if you want specifically 1 and 0, just wrap <code>any()</code> in <code>int()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't actually want a sum; you want to know whether <code>upper</code> or <code>lower</code> contains a <code>1</code> value. Just take advantage of Python's basic container-type syntax:</p>
<pre><code>if 1 in upper:
    # etc
if 1 in lower:
    # etc
</code></pre>
<hr/>
<p>The reason you're getting the error, by the way, is because you're wrapping <code>upper</code> and <code>lower</code> with an extra nested list when you're trying to split <code>l</code> (rename this variable, by the way!!). You just want to split it like this:</p>
<pre><code>upper = the_list[mid:high]
lower = the_list[:mid-1]
</code></pre>
<hr/>
<p>Finally, it's worth noting that your logic is pretty weird. This is not a binary search in the classic sense of the term. It looks like you're implementing "find the index of the first occurrence of <code>1</code> in this list". Even ignoring the fact that there's a built-in function to do this already, you would be much better served by just iterating through the whole list until you find a <code>1</code>. Right now, you've got <code>O(nlogn)</code> time complexity (plus a bunch of extra one-off loops), which is pretty silly considering the output can be replicated in <code>O(n)</code> time by:</p>
<pre><code>def first_one(the_list):
    for i in range(len(the_list)):
        if the_list[i] == 1:
            return i
    return -1
</code></pre>
<p>Or of course even more simply by using the built-in function <code>index</code>:</p>
<pre><code>def first_one(the_list):
    try:
        return the_list.index(1)
    except ValueError:
        return -1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I need to sum the elements of a list, containing all zeros or ones, so that the result is 1 if there is a 1 in the list, but 0 otherwise. </p>
</blockquote>
<p>What's wrong with</p>
<pre><code>int(1 in l)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Stop making nested lists.</p>
<pre><code>upper = l[mid:high]
lower = l[0:mid-1]
</code></pre>
</div>
<span class="comment-copy">Where is <code>x</code> defined?</span>
<span class="comment-copy">Do you just need the <a href="http://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any</code> function</a>?</span>
<span class="comment-copy">@BrendanLong yes, it turned out that worked. First afternoon with Python.</span>
<span class="comment-copy">Thank you! I've only started using python this afternoon!</span>
