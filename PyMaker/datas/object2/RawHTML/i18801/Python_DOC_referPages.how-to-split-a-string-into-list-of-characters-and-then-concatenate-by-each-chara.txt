<div class="post-text" itemprop="text">
<p>Is it possible to split a Python string every nth character and then concatenate the subsequent characters?</p>
<p>For example, suppose I have a string containing <code>'Coffee'</code>.</p>
<p>How can I split and get these variations:</p>
<pre class="lang-none prettyprint-override"><code>C
Co
Cof
Coff
Coffe
Coffee
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Alternatively, in Python 3.2+, <a href="http://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow"><code>itertools.accumulate()</code></a>.</p>
<pre><code>&gt;&gt;&gt; list(itertools.accumulate("Coffee"))
['C', 'Co', 'Cof', 'Coff', 'Coffe', 'Coffee']
</code></pre>
<p>It's worth noting that this is probably not a particularly efficient method as it (internally) will use a lot of string concatenations, I provide it as a matter of interest, rather than being the best possible way.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a for loop:</p>
<pre><code>&gt;&gt;&gt; s = 'Coffee'

&gt;&gt;&gt; for i in range(len(s)):
...     print s[:i+1]

C
Co
Cof
Coff
Coffe
Coffee
</code></pre>
<p>or a list comprehension:</p>
<pre><code>&gt;&gt;&gt; [s[:i+1] for i in range(len(s))]
['C', 'Co', 'Cof', 'Coff', 'Coffe', 'Coffee']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you already have a couple of working solutions, no-one would crucify me for throwing a brain teaser in your face. Have fun with this one:</p>
<pre><code>map(lambda x:x[::-1],re.findall(r"(?=(.+))","Coffee"[::-1]))[::-1]
</code></pre>
</div>
<span class="comment-copy">thanks much, will try it out.</span>
<span class="comment-copy">thanks, will try it out.</span>
