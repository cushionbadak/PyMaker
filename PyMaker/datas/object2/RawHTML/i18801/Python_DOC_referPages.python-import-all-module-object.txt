<div class="post-text" itemprop="text">
<p>I have the following files:</p>
<pre><code>./main.py
./lib/__init__.py
./lib/lib.py
</code></pre>
<p>,</p>
<pre><code>$ cat lib/lib.py

def method():
    return 'method'
</code></pre>
<p>,</p>
<pre><code>$ cat lib/__init__.py

from .lib import *
</code></pre>
<p>,</p>
<pre><code>$ cat main.py

import lib

def main():
    print(lib.lib)

if __name__=='__main__':
    main()
</code></pre>
<p>I don't know why <code>lib.lib</code> is defined, it's not a variable in the lib.py file.
Any ideas?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>lib.lib</code> object is the nested <code>lip.py</code> file inside the <code>lib</code> package.</p>
<p>Once you have imported the sub module, it also becomes available as an attribute of the package (unless you <em>also</em> included a <code>lib</code> name in the <code>__init__.py</code> file. </p>
<p>The Python 3.3 module loader (which is implemented in Python) simply sets a <a href="http://hg.python.org/cpython/file/910ec3471d55/Lib/importlib/_bootstrap.py#l1537" rel="nofollow">nested module as an attribute on the parent</a>:</p>
<blockquote>
<pre><code># [find a loader and load the module object, setting sys.modules[name]]
module = sys.modules[name]
if parent:
    # Set the module as an attribute on its parent.
    parent_module = sys.modules[parent]
    setattr(parent_module, name.rpartition('.')[2], module)
</code></pre>
</blockquote>
<p>This behaviour is more or less implied in the <a href="http://docs.python.org/3/reference/import.html#packages" rel="nofollow">Python packages documentation</a>:</p>
<blockquote>
<p>All modules have a name. Subpackage names are separated from their parent package name by dots, akin to Pythonâ€™s standard attribute access syntax. Thus you might have a module called <code>sys</code> and a package called <code>email</code>, which in turn has a subpackage called <code>email.mime</code> and a module within that subpackage called <code>email.mime.text</code>.</p>
</blockquote>
</div>
<span class="comment-copy">It looks like you are trying to reference the lib.py file when you should be trying to use the functionality from the lib file. i.e. <code>lib.somelibfunction()</code>...</span>
<span class="comment-copy">You have two <code>cat main.py</code> lines; I <i>think</i> the first one should really be <code>cat lib/lib.py</code> instead.</span>
<span class="comment-copy">Thanks, can you point out to me where in the docs this behavior is specified?</span>
<span class="comment-copy">@simonzack read up on <a href="http://docs.python.org/2/tutorial/modules.html#intra-package-references" rel="nofollow noreferrer">relative imports</a>, also <a href="http://docs.python.org/2/tutorial/modules.html#packages" rel="nofollow noreferrer">packages</a></span>
<span class="comment-copy">@simonzack <a href="http://www.python.org/doc/essays/packages.html" rel="nofollow noreferrer">python.org/doc/essays/packages.html</a></span>
<span class="comment-copy">@simonzack: I <i>suspect</i> it may be documented in <a href="http://www.python.org/doc/essays/packages.html" rel="nofollow noreferrer">python.org/doc/essays/packages.html</a> but I am still scanning that.</span>
<span class="comment-copy">@MartijnPieters this part, perhaps? "Whenever a submodule of a package is loaded, Python makes sure that the package itself is loaded first, loading its <code>__init__.py</code> file if necessary. The same for packages. Thus, when the statement <code>import Sound.Effects.echo</code> is executed, it first ensures that <code>Sound</code> is loaded; then it ensures that <code>Sound.Effects</code> is loaded; and only then does it ensure that <code>Sound.Effects.echo</code> is loaded (loading it if it hasn't been loaded before)." Not sure if that differs in Python 3, though.</span>
