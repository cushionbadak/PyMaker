<div class="post-text" itemprop="text">
<p>In python, I am trying to replace a single backslash ("\") with a double backslash("\"). I have the following code:</p>
<pre><code>directory = string.replace("C:\Users\Josh\Desktop\20130216", "\", "\\")
</code></pre>
<p>However, this gives an error message saying it doesn't like the double backslash. Can anyone help?</p>
</div>
<div class="post-text" itemprop="text">
<p>No need to use <code>str.replace</code> or <code>string.replace</code> here, just convert that string to a raw string:</p>
<pre><code>&gt;&gt;&gt; strs = r"C:\Users\Josh\Desktop\20130216"
           ^
           |
       notice the 'r'
</code></pre>
<p>Below is the <code>repr</code> version of the above string, that's why you're seeing <code>\\</code> here.
But, in fact the actual string contains just <code>'\'</code> not <code>\\</code>.</p>
<pre><code>&gt;&gt;&gt; strs
'C:\\Users\\Josh\\Desktop\\20130216'

&gt;&gt;&gt; s = r"f\o"
&gt;&gt;&gt; s            #repr representation
'f\\o'
&gt;&gt;&gt; len(s)   #length is 3, as there's only one `'\'`
3
</code></pre>
<p>But when you're going to print this string you'll not get <code>'\\'</code> in the output.</p>
<pre><code>&gt;&gt;&gt; print strs
C:\Users\Josh\Desktop\20130216
</code></pre>
<p>If you want the string to show <code>'\\'</code> during <code>print</code> then use <code>str.replace</code>:</p>
<pre><code>&gt;&gt;&gt; new_strs = strs.replace('\\','\\\\')
&gt;&gt;&gt; print new_strs
C:\\Users\\Josh\\Desktop\\20130216
</code></pre>
<p><code>repr</code> version will now show <code>\\\\</code>:</p>
<pre><code>&gt;&gt;&gt; new_strs
'C:\\\\Users\\\\Josh\\\\Desktop\\\\20130216'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let me make it simple and clear. Lets use the re module in python to escape the special characters.</p>
<p><b>Python script :</b></p>
<pre><code>import re
s = "C:\Users\Josh\Desktop"
print s
print re.escape(s)
</code></pre>
<p><b>Output :</b></p>
<pre><code>C:\Users\Josh\Desktop
C:\\Users\\Josh\\Desktop
</code></pre>
<p><b>Explanation :</b></p>
<p>Now observe that <i>re.escape</i> function on escaping the special chars in the given string we able to add an other backslash before each backslash, and finally the output results in a double backslash, the desired output.</p>
<p>Hope this helps you.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use escape characters: <code>"full\\path\\here"</code>, <code>"\\"</code> and <code>"\\\\"</code></p>
</div>
<div class="post-text" itemprop="text">
<p>In python <code>\</code> (backslash) is used as an escape character. What this means that in places where you wish to insert a special character (such as newline), you would use the backslash and another character (<code>\n</code> for newline)</p>
<p>With your example sting you would notice that when you put <code>"C:\Users\Josh\Desktop\20130216"</code> in the repl you will get <code>"C:\\Users\\Josh\\Desktop\x8130216"</code>. This is because <code>\2</code> has a special meaning in a python sting. If you wish to specify <code>\</code> then you need to put two <code>\\</code> in your string. </p>
<p><code>"C:\\Users\\Josh\\Desktop\\28130216"</code></p>
<p>The other option is to notify python that your entire sting must NOT use <code>\</code> as an escape character by pre-pending the sting with <code>r</code></p>
<p><code>r"C:\Users\Josh\Desktop\20130216"</code></p>
<p>This is a "raw" string, and very useful in situations where you need to use lots of backslashes such as with regular expression stings.</p>
<p>In case you still wish to replace that single <code>\</code> with <code>\\</code> you would then use: </p>
<p><code>directory = string.replace(r"C:\Users\Josh\Desktop\20130216", "\\", "\\\\")</code></p>
<p><strong>Notice</strong> that I am not using <code>r'</code> in the last two stings above. This is because, when you use the <code>r'</code> form of stings you cannot end that string with a single <code>\</code></p>
<p><a href="https://stackoverflow.com/questions/647769/why-cant-pythons-raw-string-literals-end-with-a-single-backslash">Why can't Python's raw string literals end with a single backslash?</a></p>
<p><a href="https://pythonconquerstheuniverse.wordpress.com/2008/06/04/gotcha-%E2%80%94-backslashes-are-escape-characters/" rel="nofollow noreferrer">https://pythonconquerstheuniverse.wordpress.com/2008/06/04/gotcha-%E2%80%94-backslashes-are-escape-characters/</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe a syntax error in your case,
you may change the line to:</p>
<pre><code>directory = str(r"C:\Users\Josh\Desktop\20130216").replace('\\','\\\\')
</code></pre>
<p>which give you the right following output:</p>
<pre><code>C:\\Users\\Josh\\Desktop\\20130216
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Given the source string, manipulation with <a href="https://docs.python.org/3/library/os.path.html" rel="nofollow">os.path</a> might make more sense, but here's a string solution;</p>
<pre><code>&gt;&gt;&gt; s=r"C:\Users\Josh\Desktop\\20130216"
&gt;&gt;&gt; '\\\\'.join(filter(bool, s.split('\\')))
'C:\\\\Users\\\\Josh\\\\Desktop\\\\20130216'
</code></pre>
<p>Note that <a href="https://docs.python.org/2/library/stdtypes.html#str.split" rel="nofollow"><code>split</code></a> treats the <code>\\</code> in the source string as a delimited empty string.  Using <code>filter</code> gets rid of those empty strings so <code>join</code> won't double the already doubled backslashes. Unfortunately, if you have 3 or more, they get reduced to doubled backslashes, but I don't think that hurts you in a windows path expression.</p>
</div>
<div class="post-text" itemprop="text">
<p>The backslash indicates a special escape character. Therefore, <code>directory = path_to_directory.replace("\", "\\")</code> would cause Python to think that the first argument to replace didn't end until the starting quotation of the second argument since it understood the ending quotation as an escape character.</p>
<pre><code>directory=path_to_directory.replace("\\","\\\\")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use </p>
<pre><code>os.path.abspath(path_with_backlash)
</code></pre>
<p>it returns the path with <code>\</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Use:</p>
<pre><code>string.replace(r"C:\Users\Josh\Desktop\20130216", "\\", "\\")
</code></pre>
<p>Escape the <code>\</code> character.</p>
</div>
<span class="comment-copy">It's not gonna like the single back slashes either</span>
<span class="comment-copy">A backspace is an <a href="http://docs.python.org/2/reference/lexical_analysis.html#grammar-token-escapeseq" rel="nofollow noreferrer">escape character</a>. You can't use it by itself.</span>
<span class="comment-copy">You can get away with using forward slashes too; might be easier for you.</span>
<span class="comment-copy">I don't understand the point of this question. Also why does a basic misunderstanding of escape characters deserve a 50 point bounty?</span>
<span class="comment-copy">just trying to get more/better suggestions, as these don't solve my problem. Figured it's worth a try, to avoid asking a brand new question.</span>
<span class="comment-copy">How do you make sure that an existing '\\' doesn't get doubled?  Eg. you want only a maximum of double-backslash (in <code>print</code> version)?</span>
<span class="comment-copy">@Demis Can you give an example?</span>
<span class="comment-copy">I have a script where I need the stored filepath to contain double-\\'s (to send to a program that requires this escaping), but the input file path sometimes already contains this (provided by user/Python script), and sometimes doesn't (contains only single-\'s). I want to sanitize the input to make sure all \'s are converted to exactly \\. Eg. The user might provide \\'s if they are aware of the program's \\ syntax, but if they don't they will provide single \'s.   I <i>could</i> require only single-\'s all the time, but thought it mightn't be too hard to sanitize this properly for either case.</span>
<span class="comment-copy">@Demis: Have a look at <i>os.path.normpath(path)</i>. This removes all duplicate backslashes. Afterwards, replace the single backslash with the double backslash.</span>
<span class="comment-copy">That's a great suggestion, thanks!</span>
<span class="comment-copy">Please provide some context and explanation to go with your code. Also check the formatting of your code.</span>
<span class="comment-copy">@JamesK Sorry for the explanation.Let me correct it.</span>
<span class="comment-copy">That's great that there's a function to do this for you! This is exactly what I needed, and is much prettier than the quadruple backslashes.  Simple and clear indeed.</span>
<span class="comment-copy">re.escape unfortunately also escapes spaces "\ \ \ "</span>
<span class="comment-copy">re.escape also escapes . so print(re.escape('bob.txt') outputs 'bob\.txt' Escape is intended to escape arbitrary strings to be used in regular expressions. It is not intended to escape file paths.</span>
<span class="comment-copy">The way Python is lexically parsed, <code>r"\"</code> or <code>r"\\"</code> would not work as you expect.</span>
<span class="comment-copy"><code>r'\'</code> is incorrect, this will raise <code>EOF</code> error as you're actually escaping the closing quote.</span>
<span class="comment-copy">changed it now.</span>
<span class="comment-copy">How to print a single \?</span>
<span class="comment-copy">Your last argument should be, <code>"\\\\"</code>.</span>
<span class="comment-copy">I think you mean the last one to be <code>r'\\'</code> or '\\\\'</span>
<span class="comment-copy">What's the point of using a raw string and then applying that replace.</span>
<span class="comment-copy">I believe the way Python is parsed, <code>r'\\'</code> does not work quite as you expected.</span>
