<div class="post-text" itemprop="text">
<p>I'm writing a Python 3.3.2 script. Here is a snippet from my code:</p>
<pre><code>...
text = filename.readlines()
self.metadata = bytearray(256)
...
struct.pack_into('32s', self.metadata, 4, text[0])
...
</code></pre>
<p>Exactly 32 byte are reserved for the content of text[0]. However, the string is shorter than 32 bytes, so the unused bytes are padded with null bytes (0x00), see also <a href="http://docs.python.org/3/library/struct.html#format-characters" rel="nofollow">notes</a>. I want to change the padding to 0xFF. Is there a nice way to do this other than getting the real size of my string, pack this into my bytearray and then pack the remaining bytes as 0xFF into the bytearray?</p>
</div>
<div class="post-text" itemprop="text">
<p>How about using the ljust method to first pad the string to 32 bytes with the desired 0xff character? ljust(width[, fillchar]) where width is the total string length after padding, and fillchar is the character to pad with (a space by default.)</p>
<pre><code>struct.pack_into('32s', self.metadata, 4, text[0].ljust(32, b'\xff'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First initialize the bytearray with 0xFF</p>
<pre><code>metadata = bytearray(b'\xFF'*256)
</code></pre>
</div>
<span class="comment-copy">This looks very promising, thank you! However, there is a problem: I open the file in binary mode to work around some encoding issues (so text[i] is a bytearray), and I want to strip the characters \r and \n from the string. So my complete line is as follows: <code>struct.pack_into('32s', self.metadata, 4, bytes(str(text[0], 'utf-8').strip('\r\n'), encoding='utf-8'))</code>. Adding the ljust call results in the error <code>struct.pack_into('32s', self.metadata, 4, bytes(str(text[0], 'utf-8').strip('\r\n').ljust(32, b'\xff'), encoding='utf-8')) TypeError: The fill character cannot be converted to Unicode</code></span>
<span class="comment-copy">yes, naturally if you're encoding to utf-8 you have to add the padding character after the encoding step, otherwise you will encode '\xff' to utf-8 too (which seems like an invalid character in unicode?) so the ljust method won't help you here.</span>
