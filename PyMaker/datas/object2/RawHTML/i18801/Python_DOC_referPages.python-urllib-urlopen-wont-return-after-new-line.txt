<div class="post-text" itemprop="text">
<p>I'm trying to get authenticated by an API I'm attempting to access. I'm using urllib.parse.urlencode to encode the parameters which go in my URL. I'm using urllib.request.urlopen to fetch the content.</p>
<p>This should return 3 values from the server, such as:</p>
<pre><code>SID=AAAAAAAAAAA
LSID=BBBBBBBBBBB
AUTH=CCCCCCCCCCC
</code></pre>
<p>The problem is it only returns the first value, and the trailing new line character.</p>
<pre><code>import urllib.request
import urllib.parse

Emailparamx = 'Email'
Emailparam = Emailparamx.encode('utf-8')
email = 'myemail@stackoverflow.com'
email = email.encode('utf-8')
Passwdparam = 'Passwd'
Passwdparam = Passwdparam.encode('utf-8')
password = 'hidden'
password = password.encode('utf-8')
Accounttypeparam = 'accountType'
Accounttypeparam = Accounttypeparam.encode('utf-8')
accounttype = 'GOOGLE'
accounttype = accounttype.encode('utf-8')
Serviceparam = 'service'
Serviceparam = Serviceparam.encode('utf-8')
service = 'adwords'
service = service.encode('utf-8')


url = 'https://accounts.google.com/ClientLogin?'
urlen = url.encode('utf-8')
data = [(Emailparamx, email), (Passwdparam, password),
        (Accounttypeparam, accounttype), (Serviceparam, service)]



auth = ''

dataurl = urllib.parse.urlencode(data)


accessurl = (url + "%s" % dataurl)

fh = urllib.request.urlopen(accessurl)

equals = '='
eqenc = equals.encode('utf-8')

try:
  msg = fh.readline().split(eqenc)
  print (msg)
</code></pre>
<p>And then msg prints</p>
<pre><code>[b'SID', b'AAAAAAAAAAAAAAAAA\n']
</code></pre>
<p>I know that's some seriously ugly code, I'm about a week old in Python. Any help would be greatly appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that you're only calling <code>readline</code> once, so it only reads one line. If you want to read the lines one by one, you have to keep calling <code>readline</code> in a loop until done:</p>
<pre><code>while True:
    msg = fh.readline()
    if not msg:
        break
    msg = msg.split(eqenc)
    print(msg)
</code></pre>
<hr/>
<p>However, there's really no good reason to call <code>readline</code> here, because any file-like object (including a <code>urlopen</code> object) is already an iterable full of lines, so you can just do this:</p>
<pre><code>for msg in fh:
    print(msg)
</code></pre>
<hr/>
<p>Meanwhile, your original code has a <code>try</code> without an <code>except</code> or a <code>finally</code>, which will just raise a <code>SyntaxError</code>. Presumably you wanted something like this:</p>
<pre><code>try:
    for msg in fh:
        print(msg)
except Exception as e:
    print('Exception: {}'.format(e))
</code></pre>
<hr/>
<p>While we're at it, we can simplify your code a bit.</p>
<p>If you look at <a href="http://docs.python.org/3/library/urllib.request.html#examples" rel="nofollow">the examples</a>:</p>
<blockquote>
<p>Here is an example session that uses the <code>GET</code> method to retrieve a URL containing parameters:</p>
</blockquote>
<p>That's exactly what you want to do here (except for the last line). All the extra stuff you're doing with encoding the strings is not only unnecessary, but incorrect. UTF-8 is the wrong encoding is the wrong encoding to use for URLs (you get away with it because all of your strings are pure ASCII); <code>urlopen</code> requires a string rather than an encoded byte string (although, at least in CPython 3.0-3.3, it happens to work if you give it byte strings that happen to be encoded properly); <code>urlencode</code> can take byte strings but may not do the right thing (you want to give it the original Unicode so it can quote things properly); etc.</p>
<p>Also, you probably want to decode the result (which is sent as ASCIIâ€”for more complicated examples, you'll have to either parse the <code>fh.getheader('Content-Type')</code>, or read the documentation for the API), and strip the newlines.</p>
<p>You also may want to build a structure you can use in your code instead of just printing it out. For example, if you store the results in <code>login_info</code>, and you need the <code>SID</code> in a later request, it's just <code>login_info['SID']</code>.</p>
<p>So, let's wrap things up in a function, then call that function:</p>
<pre><code>import urllib.request
import urllib.parse

def client_login(email, passwd, account_type, service):
    params = {'Email': email,
              'Passwd': passwd,
              'accountType': account_type,
              'service': service}
    qs = urllib.parse.urlencode(params)
    url = 'https://accounts.google.com/ClientLogin?'
    with urllib.request.urlopen(url + qs) as fh:
        return dict(line.strip().decode('ascii').split('=', 1) for line in fh)

email = 'myemail@stackoverflow.com'
password = 'hidden'
accounttype = 'GOOGLE'
service = 'adwords'
try:
    results = client_login(email, password, accounttype, service)
    for key, value in results.items():
        print('key "{}" is "{}".format(key, value))
except Exception as e:
    print('Exception: {}'.format(e))
</code></pre>
</div>
<span class="comment-copy">You've got a whole lot of excess code here. For example, why are you encoding each piece as UTF-8 one by one, instead of just passing a <code>str</code> to <code>urlencode</code> with <code>encoding='utf-8'</code>? And why <code>"%s" % dataurl</code> instead of just <code>dataurl</code>? All of this makes it seem like you've probably borrowed this code from some (not very good) tutorial (possibly a 2.x tutorial that you tried to port to 3.x yourself). If so, if you tell us what tutorial you got it from, that might give us more information.</span>
<span class="comment-copy">Also, <a href="https://developers.google.com/accounts/docs/AuthForInstalledApps" rel="nofollow noreferrer">ClientLogin has been deprecated for over a year</a>, so you really should be learning how to use OAuth or OAuth2, not CL.</span>
<span class="comment-copy">Finally, this can't be your actual code, because a <code>try</code> like that without either an <code>except</code> or <code>finally</code> will raise a <code>SyntaxError</code>.</span>
<span class="comment-copy">Thanks for the feedback, I'll try that this morning. Most of this code was just copied from an example tutorial given for use of the API, though some of the more offensive parts are, indeed, my creation :(</span>
<span class="comment-copy">@RobM: For future reference, when you copy code from a tutorial, it's generally worth giving us a link to the tutorial. For example, often reading it will let us see what the tutorial was trying to accomplish, but failed to explain in a novice-friendly way.</span>
