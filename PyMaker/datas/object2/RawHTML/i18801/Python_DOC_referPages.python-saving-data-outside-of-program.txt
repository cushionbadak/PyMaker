<div class="post-text" itemprop="text">
<p>I am somewhat new to python, and I was making a username+password login system for fun. I am using a dictionary to store the username+password. I am going to make it so you can add an account to the dictionary, and I want some way to save the dictionary for the next time the program runs. How would I do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>There are many option for persisting data, one easy way is using <a href="http://docs.python.org/2/library/shelve.html" rel="noreferrer"><code>shelve</code></a></p>
<p>You can save data using:</p>
<pre><code>&gt;&gt;&gt; import shelve
&gt;&gt;&gt; data = {'foo':'foo value'}
&gt;&gt;&gt; d = shelve.open('myfile.db')
&gt;&gt;&gt; d['data'] = data
&gt;&gt;&gt; d.close() 
</code></pre>
<p>Then you can recover your data easily:</p>
<pre><code>&gt;&gt;&gt; import shelve
&gt;&gt;&gt; d = shelve.open('myfile.db')
&gt;&gt;&gt; data = d['data']
&gt;&gt;&gt; d.close() 
</code></pre>
<p>Other options are using <a href="http://docs.python.org/2/tutorial/inputoutput.html" rel="noreferrer"><code>files</code></a>, <a href="http://docs.python.org/2/library/pickle.html" rel="noreferrer"><code>CPickle</code></a> databases like <a href="http://docs.python.org/2/library/sqlite3.html" rel="noreferrer"><code>SQLite</code></a>, MySQL, etc</p>
</div>
<div class="post-text" itemprop="text">
<p>Depending on your needs, you can either save the information to a text file or use a database. Saving to a text file doesn't require any encoding, however two popular formats/libraries for python are <a href="http://docs.python.org/2/library/json.html" rel="nofollow">json</a> and <a href="http://docs.python.org/2/library/pickle.html" rel="nofollow">pickle</a>. If you want to use a database instead I would recommend looking at either mysql or sqlite.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are many options. You can start with learning how native Python's <a href="http://docs.python.org/2/tutorial/inputoutput.html" rel="nofollow">input and output</a> works.</p>
<p>Then you could try <a href="http://docs.python.org/2/library/sqlite3.html" rel="nofollow">sqlite</a>.</p>
<p>And finally use a proper database (MySQL, PostgreSQL, MongoDB, etc.).</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://docs.python.org/3/library/shelve.html" rel="nofollow"><code>shelve</code></a> module, as suggested by jabaldonedo, is a drop-in replacement for dictionaries. However, when your values are all strings, even <code>shelve</code> is overkill; you can just use <a href="http://docs.python.org/3/library/dbm.html" rel="nofollow"><code>dbm</code></a>.</p>
<p>Either way, you only need to change one line:</p>
<pre><code>d = {} # in-memory, non-persistent dict
d = shelve.open('passwd.db', 'c') # persistent dict that can store anything
d = dbm.open('passwd.db', 'c') # persistent dict that only stores strings
</code></pre>
<p>The advantage of dbm is that you can use other tools to read (and edit) the database. For example, if you do this:</p>
<pre><code>d['abc'] = 'def'
</code></pre>
<p>With <code>dbm</code>, the database will hold the string <code>'def'</code>. With <code>shelve</code>, it will hold something like <code>'\x80\x03X\x03\x00\x00\x00defq\x00.'</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Learn how to read and write <a href="http://docs.python.org/2/tutorial/inputoutput.html" rel="nofollow">Files</a> in python, and just store the username and password in a text file.</p>
</div>
<span class="comment-copy">I wouldn't be storing plaintext passwords. Hash them.</span>
<span class="comment-copy">Make sure to read this before storing any passwords, or encrypted passwords, or hashed passwords: <a href="http://stackoverflow.com/a/401684/212555">stackoverflow.com/a/401684/212555</a></span>
<span class="comment-copy">that's the best possible answer. If you need something basic, use shelve. If you need something bigger, look at RDBMSes (SQL).</span>
<span class="comment-copy">@tkoomzaaskz: If you need something even more basic, where all of the values are strings—as in the OP's example—you shouldn't use <code>shelve</code>; just use <code>dbm</code>/<code>anydbm</code>. There's no reason to go to the expense of pickling and unpickling each value string, or to make the database file unreadable with normal dbm tools, when you can just store the strings directly.</span>
<span class="comment-copy">Whoever downvoted, care to explain why?</span>
<span class="comment-copy">Dunno who downvoted. I've just upvoted it so now you've got zero ;) I support using built-in modules.</span>
<span class="comment-copy">Encrypting passwords is a bad idea. If you need any security at all, you should be hashing them and not storing them at all. If you don't need any security, you're just making things more complicated and providing a false sense of security.</span>
<span class="comment-copy">plain files is a bad idea. Use pickle/dbm/shelve.</span>
<span class="comment-copy">He did say he was making it 'For fun'. I don't think he cares much about safety of passwords.</span>
<span class="comment-copy">@tkoomzaaskz: Why? Plain files are exactly as (in)secure as <code>dbm</code>/etc. Using <code>dbm</code> makes things slightly simpler, and it's a useful thing for a novice to learn about, and so on, so it's probably worth doing—but that doesn't mean that plain files are a bad idea! And it's certainly not worth downvoting a perfectly decent answer for.</span>
<span class="comment-copy">@EliasBenevedes: If your comment about safety of passwords is in response to my comment: You originally suggested storing encrypted passwords in a text file, and my comment was explaining why (if it's "for fun" and security isn't an issue) you should just store plaintext passwords. Which is what your edited answer now says.</span>
