<div class="post-text" itemprop="text">
<p>I accidentally overwrote <code>set</code> by using it as a variable name in an interactive python session - is there any way that I can get access to the original <code>set</code> function without just restarting my session? </p>
<p>(I have so much stuff in that session that I'd rather not have to do that, although of course I can if necessary.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Just delete the name that is masking the builtin:</p>
<pre><code>&gt;&gt;&gt; set = 'oops'
&gt;&gt;&gt; set
'oops'
&gt;&gt;&gt; del set
&gt;&gt;&gt; set
&lt;type 'set'&gt;
</code></pre>
<p>You can always still access the original built-in through the <code>__builtins__</code>  namespace; use this if you want to override the built-in but want to defer to the original still from the override:</p>
<pre><code>&gt;&gt;&gt; __builtins__.set
&lt;type 'set'&gt;
</code></pre>
<p><code>__builtins__</code> is sourced from the <a href="https://docs.python.org/2/library/__builtin__.html" rel="noreferrer"><code>__builtin__</code> module</a> (Python 2, note the lack of <code>s</code>), or the <a href="https://docs.python.org/3/library/builtins.html" rel="noreferrer"><code>builtins</code> module</a> (Python 3, with <code>s</code> but no underscores).</p>
<p>If you have trouble locating where the masking name is defined, do check all namespaces from your current one up to the built-ins; see <a href="https://stackoverflow.com/questions/291978/short-description-of-scoping-rules">Short Description of the Scoping Rules?</a> for what scopes may apply to your current situation.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>__builtin__</code>: </p>
<pre><code>&gt;&gt;&gt; import __builtin__
&gt;&gt;&gt; __builtin__.set
&lt;type 'set'&gt;
</code></pre>
<p>or simply(no imports required):</p>
<pre><code>&gt;&gt;&gt; __builtins__.set
&lt;type 'set'&gt;
</code></pre>
<p><a href="https://docs.python.org/3/library/builtins.html" rel="nofollow noreferrer">For Python 3</a>:</p>
<pre><code>&gt;&gt;&gt; import builtins
&gt;&gt;&gt; builtins.set
&lt;class 'set'&gt;
</code></pre>
<p>From <a href="http://docs.python.org/2/reference/executionmodel.html" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p><strong>CPython implementation detail</strong>: Users should not touch <code>__builtins__</code>; it
  is strictly an implementation detail. Users wanting to override values
  in the <code>builtins</code> namespace should import the <code>__builtin__</code> (no ‘s’)
  module and modify its attributes appropriately.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>To use builtin wrapper, first assign its <strong>original address</strong> in a variable like <code>X</code> </p>
<p>After your work is done then set it to <code>None</code> and set back the original address to builtin function.  </p>
<p>Example </p>
<ol>
<li><code>X= __builtin__.isinstance</code></li>
<li><code>__builtin__.isinstance = myininstance</code> </li>
<li><p>work is done  </p>
<pre><code>__builtin__.isinstance=None 

__builtin__.isinstance=X 
</code></pre></li>
</ol>
</div>
<span class="comment-copy">That's a fantastically simple trick, thanks!</span>
<span class="comment-copy">Awesome, very useful when using python command line :)</span>
<span class="comment-copy">Doesn't work for me in Python 3. I get error that <code>open</code> is not being defined when I delete it.</span>
<span class="comment-copy">@TomášZato: then you never created a name in the current namespace that masks it. Without an example, I can't tell you more, perhaps you want to create new question for that? And please don't assume you have the exact same situation, please do <i>test your assumptions</i> in a new session before downvoting. What I describe in my answer works <i>exactly as shown</i> in Python 3.</span>
<span class="comment-copy">I'm sorry, I indeed misunderstood the situation. In my case, the open is actually replaced through the builtins module, not just aliased by local variable.</span>
<span class="comment-copy">Well and what do I do if the method <code>builtins.open</code> was changed?</span>
<span class="comment-copy">@TomášZato Then it's not possible to get it back as far as I know. If your application requires doing something like this then you should keep a reference intact to such variables.</span>
