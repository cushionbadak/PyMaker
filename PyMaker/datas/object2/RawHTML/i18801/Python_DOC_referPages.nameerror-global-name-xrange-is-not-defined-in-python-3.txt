<div class="post-text" itemprop="text">
<p>I am getting an error when running a python program:</p>
<pre><code>Traceback (most recent call last):
  File "C:\Program Files (x86)\Wing IDE 101 4.1\src\debug\tserver\_sandbox.py", line 110, in &lt;module&gt;
  File "C:\Program Files (x86)\Wing IDE 101 4.1\src\debug\tserver\_sandbox.py", line 27, in __init__
  File "C:\Program Files (x86)\Wing IDE 101 4.1\src\debug\tserver\class\inventory.py", line 17, in __init__
builtins.NameError: global name 'xrange' is not defined
</code></pre>
<p>The game is from <a href="https://github.com/linkey11/Necromonster">here</a>.</p>
<p>What causes this error?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are trying to run a Python 2 codebase with Python 3. <a href="https://docs.python.org/2/library/functions.html#xrange" rel="noreferrer"><code>xrange()</code></a> was renamed to <a href="https://docs.python.org/3/library/functions.html#func-range" rel="noreferrer"><code>range()</code></a> in Python 3.</p>
<p>Run the game with Python 2 instead. Don't try to port it unless you know what you are doing, most likely there will be more problems beyond <code>xrange()</code> vs. <code>range()</code>.</p>
<p>For the record, what you are seeing is not a syntax error but a runtime exception instead.</p>
<hr/>
<p>If you do know what your are doing and are actively making a Python 2 codebase compatible with Python 3, you can bridge the code by adding the global name to your module as an alias for <code>range</code>. (Take into account that you <em>may</em> have to update any existing <code>range()</code> use in the Python 2 codebase with <code>list(range(...))</code> to ensure you still get a list object in Python 3):</p>
<pre><code>try:
    # Python 2
    xrange
except NameError:
    # Python 3, xrange is now named range
    xrange = range

# Python 2 code that uses xrange(...) unchanged, and any
# range(...) replaced with list(range(...))
</code></pre>
<p>or replace all uses of <code>xrange(...)</code> with <code>range(...)</code> in the codebase and then use a different shim to make the Python 3 syntax compatible with Python 2:</p>
<pre><code>try:
    # Python 2 forward compatibility
    range = xrange
except NameError:
    pass

# Python 2 code transformed from range(...) -&gt; list(range(...)) and
# xrange(...) -&gt; range(...).
</code></pre>
<p>The latter is preferable for codebases that want to aim to be Python 3 compatible <em>only</em> in the long run, it is easier to then just use Python 3 syntax whenever possible.</p>
</div>
<div class="post-text" itemprop="text">
<p>add <code>xrange=range</code> in your code :) It works to me.</p>
</div>
<div class="post-text" itemprop="text">
<p>Replace </p>
<p>Python 2 <code>xrange</code> to </p>
<p>Python 3 <code>range</code></p>
<p>Rest all same. </p>
</div>
<div class="post-text" itemprop="text">
<p>I agree with the last answer.But there is another way to solve this problem.You can download the package named future,such as pip install future.And in your .py file input this "from past.builtins import xrange".This method is for the situation that there are many xranges in your file.</p>
</div>
<span class="comment-copy">Thanks for noting the  difference between syntax error and runtime exception. Learned something new!</span>
<span class="comment-copy">As it's said in the accepted answer, don't do that, it's likely there will be other issues. Just run that code in python 2.</span>
<span class="comment-copy">@Frost Xu ... please consider Robin Fourcade his comment and remove your answer. Its an IDE for beginners and you don't want to start with diving deep into debugging and solely learn about python 2/3 changes. Kinda waist of your time.</span>
<span class="comment-copy">This package to be used to get features of the newer version to the older version of python. Not other way around.</span>
<span class="comment-copy">What <code>past.builtings.range</code> does is simply set <code>xrange</code> to be a reference to <code>range</code>. This is helpful when creating a Python 2 / 3 polyglot codebase, but not suitable for an existing project that's designed to work on Python 2 only.</span>
