<div class="post-text" itemprop="text">
<p>I have a code base that runs unchanged in Python 2.7 and 3.2+. But the doctests in the documentation rst files are giving me a headache. When I run them in Python2, I get <code>UnicodeEncodeError: 'ascii' codec can't encode character u'\xb2' in position 16: ordinal not in range(128)</code>. If I add </p>
<pre><code>.. testsetup:: *

   from __future__ import unicode_literals
</code></pre>
<p>then I get a lot of errors like </p>
<pre><code>Expected:
    'something'
Got:
    u'something'
</code></pre>
<p>Is there a way to have doctest containing unicode characters in the rst files that work unchanged in Python 2.7 and 3.2+?</p>
</div>
<div class="post-text" itemprop="text">
<p>Make sure you are using Python 3.3. It added the explicit <code>u'unicode literals'</code> -- i.e. with <code>u</code> prefix again -- to ease the transition between Python 2 with unicode literals and Python 3. See <a href="http://docs.python.org/3/whatsnew/3.3.html#pep-414-explicit-unicode-literals" rel="nofollow">http://docs.python.org/3/whatsnew/3.3.html#pep-414-explicit-unicode-literals</a></p>
</div>
<span class="comment-copy">Is it much work to actually specify the encoding to use when you run them?</span>
<span class="comment-copy">@PauloBu: How you do this?</span>
<span class="comment-copy">Well, I don't see code so it would be hard but, do you use the function <code>doctest.testfile</code> somewhere in your code? If so, please add to the question.</span>
<span class="comment-copy">I don't. Doctests are called when I build the documentation using sphinx (<code>make doctest</code>). I get a similar error in the pypi registering. I was hoping to find a solution based on changing the rst file, not the call. In</span>
<span class="comment-copy">Please add the code that gives you problems. And a traceback would be informative as well.</span>
<span class="comment-copy">For me, adding the <code>u'some string'</code> prefix makes the doctest fail even with Python 3.5</span>
<span class="comment-copy">@matth The ignored <code>u</code> prefix for string literals is still valid for both for Python 3.5 and Python 3.6 (see <a href="https://docs.python.org/3.5/reference/lexical_analysis.html#grammar-token-stringliteral" rel="nofollow noreferrer">docs.python.org/3.5/reference/…</a>). Can you create a minimalistic example that shows the problem?</span>
<span class="comment-copy">I asked a new question here, it includes an example: <a href="http://stackoverflow.com/questions/42158733/unicode-literals-and-doctest-in-python-2-7-and-python-3-5" title="unicode literals and doctest in python 2 7 and python 3 5">stackoverflow.com/questions/42158733/…</a></span>
<span class="comment-copy">also see <a href="http://stackoverflow.com/questions/13473971/multi-version-support-for-python-doctests#comment18432670_13473971" title="multi version support for python doctests%23comment18432670_13473971">stackoverflow.com/questions/13473971/…</a></span>
<span class="comment-copy">As Martijn Pieters noted below the later question, there is no simple solution to bend the <code>doctest</code>. The reason is that the <code>u'string literal'</code> was reintroduced to Python 3.3 only to reuse the old sources easily. It is a compromise. The <code>u</code> prefix is simply ignored. This way, the string value will be the same if you use the prefix or not. On the other hand, the string representation will always be without the <code>u</code> prefix. The <code>doctest</code> is too simple to solve that compromise without any additional work. It is based on comparing of the string representations of the results.</span>
