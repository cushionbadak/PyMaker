<div class="post-text" itemprop="text">
<p>I'm hours new to python, and I'm trying to write a script which reads a set of x,y coordinates from a file (named 'peaks.dat') and fills them into a list (of class type); I'm defining the following:</p>
<pre><code>class point():
    def _init_(self,x=None,y=None,k=None,f=None):
        self.x=0    # x coordinate
        self.y=0    # y coordinate
        self.k=0    # I need these for later stuff
        self.f=-1   # I need these for later stuff
</code></pre>
<p>But then I couldn't find any way to "pick" a single element from a line (namely, an element from only one of the two columns) in the file, instead of the whole line. Is there such a thing?</p>
<p>Regardless, I tried splitting my columns into two different files x.dat and y.dat, but then I quite don't know how to separately fill my 'point' type list's x and y fields from the files.
I tried</p>
<pre><code>f=open('x.dat','r')
mylist=[]
for line in f:
    mylist.append(point(line, , , )) # wrong syntax D:
f.close()

for data in mylist:
    print i.x
</code></pre>
<p>planning to to the same later for the y.dat file, but it seems to be wrong on many levels.</p>
<p>p.s. I come from some C++, if you want to give examples.</p>
<p>edit: peaks.dat is just three columns (I only need the first two) of numbers, something like</p>
<pre><code>1.2   1.6   0.4
1.5   2.1   0.3
1.1   1.0   0.5
</code></pre>
<p>etc.</p>
<p>x.dat (or y.dat) is a single row of numbers.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>str.split</code> to split the data on a line, <code>str.split</code> returns a list of string.</p>
<p>Examples:</p>
<pre><code>&gt;&gt;&gt; strs = "1.2   1.6   0.4"
&gt;&gt;&gt; strs.split()
['1.2', '1.6', '0.4']
#use slicing as you need only first two items
&gt;&gt;&gt; [float(x) for x in strs.split()[:2]] 
[1.2, 1.6]
</code></pre>
<p>If you want only the first two columns from each line:</p>
<pre><code>mylist=[]
with open('x.dat') as f:
   for line in f:
       #apply int to the items of `str.split` to convert them into integers
       x, y = [float(z) for z in line.split()[:2]]
       mylist.append(Point(x, y))
</code></pre>
<p>If you wanted to read only first two rows:</p>
<pre><code>mylist=[]
with open('x.dat') as f:
   rows = 2
   for _ in xrange(rows):
       line = next(f)
       x, y, k = [float(z) for z in line.split()]
       mylist.append(Point(x, y, k))
</code></pre>
<p>Some changes to your class  definition:</p>
<pre><code>class point():
   def __init__(self,x = None,y =None,k =None,f =None):
      self.x = 0 if x is None else x  #assign default value only if the value was not passed
      self.y = 0 if y is None else y
      self.k = 0 if k is None else k
      self.f = -1 if f is None else f
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Depending on the format of the file, you either want to use the <code>csv</code> module, or use the <code>str.split()</code> function.</p>
<p>For whitespace-separated values on a line, use <code>str.split()</code>:</p>
<pre><code>points = []

with open(inputfilename) as infile:
    for line in infile:
        row = [int(i) for i in line.split()]
        # row is now a list of integers.
        points.append(point(*row))
</code></pre>
<p>For other formats, usually the <a href="http://docs.python.org/2/library/csv.html" rel="nofollow"><code>csv</code> module</a> is the best option:</p>
<pre><code>import csv

points = []

with open(inputfilename, 'rb') as infile:
    reader = csv.reader(infile, delimiter='\t')  # tab delimited file
    for row in reader:
        row = [int(i) for i in row]
        # row is now a list of integers.
        points.append(point(*row))
</code></pre>
<p>To read only two lines, use <code>next()</code> twice; csv version:</p>
<pre><code>    for _ in range(2):
        row = [int(i) for i in next(reader)]
        # row is now a list of integers.
        points.append(point(*row))
</code></pre>
<p><code>next()</code> takes the next item from an iterator; both the <code>infile</code> object and the <code>reader</code> object are iterators that yield file lines or CSV rows.</p>
<p>Alternatively, use the <a href="http://docs.python.org/2/library/itertools.html#itertools.islice" rel="nofollow"><code>itertools.islice()</code> utility</a>:</p>
<pre><code>for row in islice(reader, 2):  # only yield the first two rows.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It depends on the format of your files. Are the coordinates separated by commas?
If so, then.</p>
<pre><code>with open('x.dat','r') as f:
    mylist=[]
    for line in f:
        points = line.split(",")
        mylist.append(point(int(points[0]), int(points[1]), int(points[2]),int(points[3]))) 
</code></pre>
<p>I'm sure there's a nicer and more pythonic way to do this.</p>
<p>You can read about Python's 'with' here
<a href="http://effbot.org/zone/python-with-statement.htm" rel="nofollow">http://effbot.org/zone/python-with-statement.htm</a></p>
<p>Maybe you can find something useful here, <a href="http://docs.python.org/3/library/io.html#module-io" rel="nofollow">http://docs.python.org/3/library/io.html#module-io</a> if my answer wasn't what you were looking for.</p>
</div>
<span class="comment-copy">It would help to see what the line looks like. You can split a string using <code>"string here".split("char to split by")</code> to get a list of strings, which you can then convert to int.</span>
<span class="comment-copy">Post a small sample of <code>x.dat</code>.</span>
<span class="comment-copy">the peaks.dat file is something like &lt;some number&gt; - tabulation - &lt;some other number&gt; endline; and so on for n lines; I'll look up your split thingy now.</span>
<span class="comment-copy">Did you properly copy the indents  from your real code? If not, please fix them</span>
<span class="comment-copy">FWIW, <code>_init_</code> needs to be <code>__init__</code>.</span>
<span class="comment-copy">Ok this is the one I understood the most, but won't my script complain if I fill him two arguments (x,y) in instead of four?</span>
<span class="comment-copy">@Tom No, it won't. As we're using default values for them.</span>
<span class="comment-copy">Oh that's right, thanks again!</span>
<span class="comment-copy">@Tom but this only includes 2 COLUMNS and not ROWS as stated above :o</span>
<span class="comment-copy">@user2033511 I guess I misread the specs, added row related answer as well.</span>
<span class="comment-copy">I really like <code>map(int, row)</code> :D Anyways, imho the best answer.</span>
<span class="comment-copy">@user2033511: <code>map()</code> returns an iterator on Python 3, which can be surprising to new programmers. Without a Python version in the OP, I stuck to something that is easier to understand.</span>
<span class="comment-copy">If they're comma-separated, he should use <code>csv</code>, not <code>str.split</code></span>
