<div class="post-text" itemprop="text">
<p>Python 3.3:
Can I decorate a function to ignore all positional arguments that do not match named parameters?</p>
<pre><code>import functools
def ignore_star_args():
    def wrapper(function_):
        @functools.wraps(function_)
        def wrapped(*f_args):
            return function_(/*only named args*/)
        return wrapped
    return wrapper

@ignore_star_args()
def list_args(a, b, *args):
    # two positional arguments
    return [a, b] + list(args)

&gt;&gt;&gt; list_args(1, 2, "non-positional arg")
[1, 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you're misunderstanding the terms you're using.</p>
<p><a href="http://docs.python.org/3/glossary.html#term-argument" rel="noreferrer">Arguments</a> are the values passed to a <a href="http://docs.python.org/3/reference/expressions.html#calls" rel="noreferrer">function call</a>. Positional arguments are the ones without keywords. </p>
<p><a href="http://docs.python.org/3/glossary.html#term-parameter" rel="noreferrer">Parameters</a> are the names in a <a href="http://docs.python.org/3/reference/compound_stmts.html#function" rel="noreferrer">function definition</a>. There are three different kinds of positional parameters; collectively, they're the ones up to and including the <code>*</code> parameter or bare <code>*</code> (if any).</p>
<p>For example, in this code:</p>
<pre><code>def foo(a, b, c=3, d=4, *args, e, f=6, **kw): pass

foo(1, 2, d=3, c=4, e=5, g=7)
</code></pre>
<p><code>a</code>, <code>b</code>, <code>c</code>, and <code>d</code> are all <em>positional-or-keyword parameters</em>; <code>args</code> is a <em>var-positional parameter</em>; <code>e</code> and <code>f</code> are <em>keyword-only parameters</em>; and <code>kw</code> is a <em>var-keyword parameter</em>. (No examples of <em>positional-only parameters</em>, because they can't appear in a function definition; you have to write C/Java/.NET/RPython/whatever extension code, or create <code>code</code> objects manually, to get them.)</p>
<p>In the call, <code>1</code> and <code>2</code> are <em>positional arguments</em>; <code>3</code>, <code>4</code>, <code>5</code>, and <code>7</code> are <em>keyword arguments</em>; <code>d</code>, <code>c</code>, <code>e</code>, and <code>g</code> are <em>keyword identifiers</em>.</p>
<p>Python will match the two positional arguments to the first two positional-only or positional-or-keyword parameters, or to the var-positional argument if there aren't enough, then match the keyword arguments up to the positional-or-keyword or keyword-only parameters with the same names, or to the var-keyword argument if the names aren't found. So, inside <code>foo</code>:</p>
<pre><code>a, b, c, d, args, e, f, kw = 1, 2, 4, 3, (), 5, 6, {'g': 7}
</code></pre>
<p>Now that you have all of that straight, let me sit a bit of confusion back in: occasionally Python uses <em>different</em> terminology, "formal argument" instead of "parameter" and "actual argument" instead of "argument". You mostly only find this deep in the oldest parts of the source code, but occasionally it bubbles up higher.</p>
<hr/>
<p>So, what you <em>asked</em> for what to ignore non-positional arguments. In other words, you want to accept but ignore keyword arguments. That's easy: just accept them with a var-keyword parameter, and don't pass them through:</p>
<pre><code>def wrapped(*args, **kwargs):
    return function_(*f_args)
</code></pre>
<hr/>
<p>However, what I think you <em>wanted</em> to ask for was how to ignore all arguments, positional or keyword, that don't match positional-only or positional-or-keyword parameters.</p>
<p>To do that, you'll need to inspect the signature of the wrapped function. </p>
<p>The exact reference for what members different types have can be hard to find, and hard to understand when you do… but fortunately, the <a href="http://docs.python.org/3/library/inspect.html#types-and-members" rel="noreferrer"><code>inspect</code></a> documentation gathers it all together in a handy chart.</p>
<p>You can see that a function doesn't have anything that looks like its parameter signature… but it contains a code object, which <em>does</em>. Of course the code object was designed back when Python only had 2 kinds of parameters, and they were called "formal arguments" instead of "parameters", so it may not be immediately obvious that what you want here is <code>co_argcount</code>—but trust me, it is.</p>
<p>So:</p>
<pre><code>def wrapped(*args):
    return function_(*(args[:function_.__code__.co_argcount]))
</code></pre>
<p>Depending on what you want to do with keyword arguments (which, remember, may match named positional-or-keyword or positional-only parameters!), you may want to do something with <code>**kw</code> and <code>co_varnames</code> as well.</p>
</div>
<span class="comment-copy">I don't undertand your example. In <code>list_args(1, 2, "non-positional arg")</code>, <code>"non-positional arg"</code> is still a positional argument, despite the confusing name.</span>
<span class="comment-copy">By the way, "named positional parameters" (or sometimes "fixed positional parameters") is my own shorthand for "positional-or-keyword and positional-only, but not var-positional", because there's actually no remotely official term for the things…</span>
<span class="comment-copy">Brilliant. Thank you!</span>
