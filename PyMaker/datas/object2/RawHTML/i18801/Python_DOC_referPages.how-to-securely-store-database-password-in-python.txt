<div class="post-text" itemprop="text">
<p>In PHP the accepted way to secure database login credentials is to store them outside the web root, and to <code>include()</code> the files with the passwords. How are MySQL database login credentials safely stored in Python applications?</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, one way of doing this is putting the passwords in a separate config/ini file that is <strong>not</strong> deployed with the project. And then, pass the path of this file to the main entry of the application, e.g.: </p>
<p><code>python main.py --config=/path/to/config.ini</code></p>
<p>Note that you'll need to parse this <code>--config</code> argument (see <a href="http://docs.python.org/2/howto/argparse.html" rel="nofollow" title="Argparse Tutorial">argparse</a>) and then read and parse the <code>config.ini</code> file. </p>
<p><strong>Update</strong>:
Since you mentioned web applications, there is also another way of passing configuration information - through the <code>environ</code>. For example, if you use <code>mod_wsgi</code>, you can putt this in the wsgi directives:</p>
<p><code>SetEnv my_namespace.some_param some_value</code></p>
<p>And then, this value will be accessible in the application with through <code>os.environ</code>:</p>
<pre><code>import os
os.environ['my_namespace.some_param']
</code></pre>
</div>
<span class="comment-copy">What have you found out so far? Looking into PHP applications seems useless if you want to learn about practices in Python in my eyes. And luckily there is a lot of Python code floating around, so what has your research covered up?</span>
<span class="comment-copy">I mentioned the PHP best practice as it is an environment that I am familiar with. As for Python, I've found only suggestions to obfuscate the password (base64 or the like), and to ensure that the Python file is not readable by others (0700 permissions). I ask here if there is a better way.</span>
<span class="comment-copy">I use the keyring library (<a href="https://pypi.python.org/pypi/keyring" rel="nofollow noreferrer">pypi.python.org/pypi/keyring</a>) and store the actual credentials in the OS's credential storage utility. It's very easy to implement, and it seems quite secure to me.</span>
<span class="comment-copy">@northben: Thanks, that does look like a good possibility.</span>
<span class="comment-copy">Another possibility is to use <a href="https://docs.python.org/3/library/configparser.html" rel="nofollow noreferrer">configparser</a> to parse contents of a <code>config.ini file</code>.</span>
