<div class="post-text" itemprop="text">
<p>I am looking for simple solution for the following problem.</p>
<p>Do we have a <em>for</em>-loop for this kind of usage in python?</p>
<pre><code>[2,3,4,5,6,7,8,9,0,1]
</code></pre>
<p>I have an implementation using a <em>while</em>-loop:</p>
<pre><code>i = 2
while True:
    i = i%9
    if i == 1:
        break
    # payload code here
    i+=1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>for i in (2, 3, 4, 5, 6, 7, 8, 9, 0, 1):
</code></pre>
<p>...</p>
<pre><code>for i in range(2, 10) + range(2):
</code></pre>
<p>...</p>
<pre><code>for i in itertools.chain(xrange(2, 10), xrange(2)):
</code></pre>
<p>...</p>
<pre><code>for i in (x % 10 for x in xrange(2, 12)):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>range</code>:</p>
<pre><code>&gt;&gt;&gt; for i in range(2,10) + range(0,2):
...     print i
...     
2
3
4
5
6
7
8
9
0
1
</code></pre>
<p>Or using <code>itertools.chain</code>(works in both py2 and py3):</p>
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; for i in chain(range(2,10),range(0,2)):
    print (i)
...     
2
3
4
5
6
7
8
9
0
1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try using</p>
<pre><code>for i in range(2,10)+[0,1]:  
    print i
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Due to the overhead of the <code>print</code> statement/function I changed every occurrence of <code>print</code> to <code>pass</code>, but here are the <code>timeit</code> results for the different approaches, run 10000000 times each:</p>
<h3>Using itertools.chain:</h3>
<pre><code>&gt;&gt;&gt; timeit.timeit(stmt='for i in chain(xrange(2,10),xrange(0,2)): pass', setup='from itertools import chain', number=10000000)
11.17552900314331     # Ignacio
&gt;&gt;&gt; timeit.timeit(stmt='for i in chain(range(2,10),range(0,2)): pass', setup='from itertools import chain', number=10000000)
13.646738052368164    # Ashwini
</code></pre>
<h3>Using modulus:</h3>
<pre><code>&gt;&gt;&gt; timeit.timeit(stmt='for i in range(10): (i+2) % 10', number = 10000000)
13.806042909622192    # Bengt
&gt;&gt;&gt; timeit.timeit(stmt='for i in (x % 10 for x in xrange(2, 12)): pass', number=10000000)
18.127070903778076    # Ignacio
&gt;&gt;&gt; timeit.timeit(stmt='[(x+2)%10 for x in range(10)] and None', number=10000000)
21.191375017166138    # Bengt
</code></pre>
<h3>Appending ranges:</h3>
<pre><code>&gt;&gt;&gt; timeit.timeit(stmt='for i in range(2,10) + [0,1]: pass', number=10000000) 
10.056025981903076    # Hardik
&gt;&gt;&gt; timeit.timeit(stmt='for i in range(2,10) + range(2): pass', number=10000000)
11.409713983535767    # Ignacio
</code></pre>
<h3>Literal expressions:</h3>
<pre><code>&gt;&gt;&gt; timeit.timeit(stmt='for i in (2,3,4,5,6,7,8,9,0,1): pass', number=10000000)
2.8564839363098145    # Ignacio
</code></pre>
<p>Depressing how the most efficient method is the literal expression of the numbers through which to iterate, but, it involves the least allocation and the least arithmetic.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using the built-in <a href="http://docs.python.org/2/library/functions.html#range" rel="nofollow"><code>range</code> function</a> and the <a href="http://docs.python.org/2/reference/expressions.html#binary-arithmetic-operations" rel="nofollow">modulo operator</a>:</p>
<pre><code>&gt;&gt;&gt; for i in range(10):
...     print((i + 2) % 10)
... 
2
3
4
5
6
7
8
9
0
1
</code></pre>
<p>In Python3 you can boil it down to one line using a <a href="http://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a> and the <a href="http://docs.python.org/3/library/functions.html#print" rel="nofollow"><code>print</code> function`</a>:</p>
<pre><code>&gt;&gt;&gt; [print((x + 2) % 10) for x in range(10)] and None
2
3
4
5
6
7
8
9
0
1
</code></pre>
<p>In Python2 prepend that with:</p>
<pre><code>&gt;&gt;&gt; from __future__ import print_function
</code></pre>
<p>Or if you only want the list:</p>
<pre><code>&gt;&gt;&gt; [(x + 2) % 10 for x in range(10)]
[2, 3, 4, 5, 6, 7, 8, 9, 0, 1]
</code></pre>
</div>
<span class="comment-copy">last one seems very smart</span>
<span class="comment-copy">Wouldn't <code>for i in ((x + 2) % 10 for x in range(10)):</code> be more readable?</span>
<span class="comment-copy">@Bengt: It depends on what you want the loop to express.</span>
<span class="comment-copy">@2rs2ts : In such a small loop, it really doesn't mater if we use two operation or one. both are atomic operations which will be done pretty fast.</span>
<span class="comment-copy">@Emax Certainly. I only said so for posterity's sake.</span>
<span class="comment-copy">Nice easy solution, unfortunately it breaks in Python 3. You need to use <code>list(range(...))</code>.</span>
<span class="comment-copy">@MarkRansom That's not a good way to do it. <code>itertools.chain(range(...), range(...))</code> is the much better way.</span>
<span class="comment-copy">@Lattyware, better perhaps but not as simple. It's a shame that Python 3 lost such an easy way to make a concrete sequence.</span>
<span class="comment-copy">@MarkRansom The reality is that making concrete sequences is something you want to avoid doing - Python 3 makes it much more obvious you are doing something wrong if you go around making lists all the time.</span>
<span class="comment-copy">Core finding of the day: Hardcoding is fast.</span>
