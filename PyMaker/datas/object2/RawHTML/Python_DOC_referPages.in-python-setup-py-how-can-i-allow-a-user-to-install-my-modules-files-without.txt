<div class="post-text" itemprop="text">
<p>I have created a Python module that wraps some C functionality. My potential users are using MS Windows, and I'm using distutils to build the c functionality into a .pyd file.</p>
<p>I created a manifest file which includes the .pyd file in the Python package, and everything, including the .pyd file, gets checked into version control. Users then can check it out of version control and install the module.</p>
<p>Most users of the module will not have the ability to rebuild the .pyd file from source code, because they don't have Visual Studio installed, and they don't necessarily have access to the libraries required to link the source code. So I want them to be able to to use the .pyd file that I'm including in the package.</p>
<p>The problem is when a user does <code>python setup.py install</code>, it sometimes tries to rebuild the .pyd file, depending on the relative timestamps of the .pyd file and the source files. I can't control which timestamp is later, I think it depends on what order they files are fetched from version control.</p>
<p>What is the correct way to handle this situation? </p>
</div>
<div class="post-text" itemprop="text">
<p>The correct way to handle this situation is to build and distribute a <a href="https://www.python.org/dev/peps/pep-0427/" rel="nofollow noreferrer">wheel</a> tagged for windows. You would do this, in addition to (or instead of) releasing a source distribution.</p>
<pre><code>pip install --upgrade setuptools wheel
python setup.py build bdist_wheel
</code></pre>
<p>This will generate a <code>.whl</code> file under <code>./dist/</code> subdirectory, which you then upload to an index (or you can send users the distribution file directly).</p>
<p>Your users will not do <code>python setup.py install</code>, they will do <code>pip install yourmodule</code> and pip will resolve the correct binary distribution i.e. <code>.whl</code> file to download and install based upon the runtime platform.  Compatibility tags are present in the wheel's filename.</p>
<p>If you wish to support multiple platforms, you may need to build separate wheels tagged for different platforms.</p>
</div>
<span class="comment-copy">You could create your own <a href="https://conda.io/projects/conda-build/en/latest/user-guide/index.html" rel="nofollow noreferrer"><code>conda</code> package</a>, maybe with a custom channel for distribution.</span>
