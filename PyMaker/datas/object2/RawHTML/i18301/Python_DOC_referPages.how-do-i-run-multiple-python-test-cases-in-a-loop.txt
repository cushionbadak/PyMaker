<div class="post-text" itemprop="text">
<p>I am new to Python and trying to do something I do often in Ruby. Namely, iterating over a set of indices, using them as argument to function and comparing its results with an array of fixture outputs. </p>
<p>So I wrote it up like I normally do in Ruby, but this resulted in just one test case. </p>
<pre><code>  def test_output(self):
    for i in range(1,11):
      ....
      self.assertEqual(fn(i),output[i])
</code></pre>
<p>I'm trying to get the test for every item in the range. How can I do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using unittest you can show the difference between two sequences all in one test case.</p>
<pre><code>seq1 = range(1, 11)
seq2 = (fn(j) for j in seq1)
assertSequenceEqual(seq1, seq2)
</code></pre>
<p>If that's not flexible enough, using unittest, it is possible to generate multiple tests, but it's a bit tricky.</p>
<pre><code>def fn(i): ...
output = ...

class TestSequence(unittest.TestCase):
    pass

for i in range(1,11):
    testmethodname = 'test_fn_{0}'.format(i)
    testmethod = lambda self: self.assertEqual(fn(i), output[i])
    setattr(TestSequence, testmethodname, testmethod)
</code></pre>
<p>Nose makes the above easier through <a href="http://nose.readthedocs.org/en/latest/writing_tests.html#test-generators" rel="nofollow noreferrer">test generators</a>.</p>
<pre><code>import nose.tools

def test_fn():
    for i in range(1, 11):
        yield nose.tools.assert_equals, output[i], fn(i)
</code></pre>
<p>Similar questions:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/2798956/python-unittest-generate-multiple-tests-programmatically">Python unittest: Generate multiple tests programmatically?</a></li>
<li><a href="https://stackoverflow.com/questions/32899/how-to-generate-dynamic-parametrized-unit-tests-in-python">How to generate dynamic (parametrized) unit tests in python?</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>In python world two most popular options to write tests are:</p>
<ul>
<li><a href="http://docs.python.org/3/library/unittest.html" rel="noreferrer">Unittest</a></li>
<li><a href="http://pytest.org/latest/" rel="noreferrer">pytest</a></li>
</ul>
<p>In pytest you parametrize tests very easly:</p>
<pre><code>@pytest.mark.parametrize(('param1', 'param2'),[
                         (1, 'go'),
                         (2, 'do not go')])
def test_me(param1, param2):
    # write test
</code></pre>
<p>This will produce nice output also while running tests:</p>
<pre><code>go.py:2: test_me[1-go] PASSED
go.py:2: test_me[2-do not go] PASSED
</code></pre>
<p>I am using pytest for two years now and it's very nice tool. You have many features there. Besides parametrization there are fixtures also, very very nice assertions (you do not need to write assertEqual, just <code>assert a==b</code> and pytest can generate very nice and helpful output for it.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Starting from python 3.4, you can do it like this:</p>
<pre><code>def test_output(self):
    for i in range(1,11):
        with self.subTest(i=i):
            ....
            self.assertEqual(fn(i),output[i])
</code></pre>
<p><a href="https://docs.python.org/3.4/library/unittest.html?highlight=subtest#distinguishing-test-iterations-using-subtests" rel="noreferrer">https://docs.python.org/3.4/library/unittest.html?highlight=subtest#distinguishing-test-iterations-using-subtests</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If Your question is regarding, when you are solving the problem on competitive places like hackerrank or anywhere else. If they have not provided their environment to run test cases in a loop.</p>
<p>And locally if You are running code for python compiler It would be useful.</p>
<p>you can simply use a while loop or range function of python.</p>
<p>e.g:</p>
<pre><code>t = int(input("Enter Number of testcases"))
type(t)

while(t!=0):

    n = int(input("Enter number of data"))
    type(n)

    // Code logic or function Call

    t = t-1
</code></pre>
</div>
<span class="comment-copy">Do you want to generate 10 distinct test cases? The code you've shown works, it just does all ten assertions in one test case.</span>
<span class="comment-copy">That makes sense, thanks for the explanation. I'll get to updating it.</span>
<span class="comment-copy">Probably shouldn't put the test method generation in the if <b>name</b> == '<b>main</b>' clause because it's modifying the module. The test sequence code doesn't make sense without the generation code.</span>
<span class="comment-copy">Good point @JappieKerk, I've removed the clause.</span>
<span class="comment-copy"><a href="https://pypi.org/project/parameterized/" rel="nofollow noreferrer">pypi.org/project/parameterized</a> - looks like the function was extracted and can be used outside of pytest in to execute any parametrization.</span>
