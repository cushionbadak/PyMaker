<div class="post-text" itemprop="text">
<p>I have background in Java and I am new to Python. I want to make sure I understand correctly Python terminology before I go ahead.</p>
<p>My understanding of a <strong>module</strong> is: a script which can be imported by many scripts, to make reading easier. Just like in java you have a class, and that class can be imported by many other classes.</p>
<p>My understanding of a <strong>library</strong> is: A library contains many <strong>modules</strong> which are separated by its use. </p>
<p>My question is: Are libraries like packages, where you have a package e.g. called <code>food</code>, then: </p>
<blockquote>
<ul>
<li>chocolate.py </li>
<li>sweets.py</li>
<li>biscuts.py</li>
</ul>
</blockquote>
<p>are contained in the <code>food</code> package? </p>
<p>Or do libraries use packages, so if we had another package <code>drink</code>:</p>
<ul>
<li>milk.py </li>
<li>juice.py</li>
</ul>
<p>contained in the package. The <code>library</code> contains two packages? </p>
<p>Also, an application programming interface (API) usually contains a set of libraries is this at the top of the hierarchy: </p>
<ol>
<li>API </li>
<li>Library</li>
<li>Package</li>
<li>Module</li>
<li>Script</li>
</ol>
<p>So an API will consist off all from 2-5? </p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="http://docs.python.org/3/tutorial/modules.html">The Python Tutorial - Modules</a></p>
<ul>
<li><p><strong>Module</strong>: </p>
<blockquote>
<p>A module is a file containing Python definitions and statements. The file name is the module name with the suffix <code>.py</code> appended.</p>
</blockquote></li>
<li><p><strong>Package</strong>: </p>
<blockquote>
<p>Packages are a way of structuring Python’s module namespace by using “dotted module names”. </p>
</blockquote></li>
</ul>
<p>If you read the documentation for the <a href="http://docs.python.org/3/reference/import.html"><code>import</code></a> statement gives more details, for example:</p>
<blockquote>
<p>Python has only one type of <strong>module object</strong>, and all modules are of this
  type, regardless of whether the module is implemented in Python, C, or
  something else. To help organize modules and provide a naming
  hierarchy, Python has a concept of packages.</p>
<p>You can think of packages as the directories on a file system and
  modules as files within directories, but don’t take this analogy too
  literally since packages and modules need not originate from the file
  system. For the purposes of this documentation, we’ll use this
  convenient analogy of directories and files. Like file system
  directories, packages are organized hierarchically, and packages may
  themselves contain subpackages, as well as regular modules.</p>
<p>It’s important to keep in mind that <strong>all packages are modules, but not
  all modules are packages. Or put another way, packages are just a
  special kind of module. Specifically, any module that contains a
  <code>__path__</code> attribute is considered a package.</strong></p>
</blockquote>
<p>Hence the term <code>module</code> refers to a specific entity: it's a class whose instances are the <code>module</code> objects you use in python programs. It is also used, by analogy, to refer to the file in the file system from which these instances "are created".</p>
<p>The term <em>script</em> is used to refer to a module whose aim is to be executed. It has the same meaning as "program" or "application", but it is <em>usually</em> used to describe simple and small programs(i.e. a single file with at most some hundreds of lines). Writing a script takes minutes or few hours.</p>
<p>The term <em>library</em> is simply a generic term for a bunch of code that was designed with the aim of being usable by many applications. It provides some generic functionality that can be used by specific applications.</p>
<p>When a module/package/something else is "published" people often refer to it as a library. Often libraries contain a package or multiple related packages, but it could be even a single module.</p>
<p>Libraries usually do not provide any specific functionality, i.e. you cannot "run a library". </p>
<p>The API can have different meanings depending on the context. For example: </p>
<ul>
<li>it can define a protocol like the <a href="http://www.python.org/dev/peps/pep-0249/">DB API</a> or the <a href="http://docs.python.org/3.3/c-api/buffer.html">buffer protocol</a>.</li>
<li>it can define how to interact with an application(e.g. the <a href="http://docs.python.org/dev/c-api/index.html"><code>Python/C API</code></a>)</li>
<li>when related to a library/package it simply the interface provided by that library for its functionality(set of functions/classes/constants etc.)</li>
</ul>
<p>In any case an API is <em>not</em> python code. It's a description which may be more or less formal.</p>
</div>
<div class="post-text" itemprop="text">
<p>Only <em>package</em> and <em>module</em> have a well-defined meaning specific to Python.</p>
<ol>
<li><p>An <a href="https://en.wikipedia.org/wiki/Application_programming_interface" rel="noreferrer"><strong>API</strong></a> is not a collection of code <em>per se</em> - it is more like a "protocol" specification how various parts (usually libraries) communicate with each other. There are a few notable "standard" APIs in python. E.g. the <a href="http://www.python.org/dev/peps/pep-0249/" rel="noreferrer">DB API</a></p></li>
<li><p>In my opinion, a <strong>library</strong> is anything that is not an <em>application</em> - in python, a library is a <em>module</em> - usually with <em>submodules</em>. The scope of a library is quite variable - for example the <a href="http://docs.python.org/2/library/" rel="noreferrer">python standard library</a> is vast (with quite a few submodules) while there are lots of single purpose libraries in the PyPi, e.g. a <a href="https://pypi.python.org/pypi/ordereddict/1.1" rel="noreferrer">backport of <code>collections.OrderedDict</code> for py &lt; 2.7</a></p></li>
<li><p>A <a href="http://docs.python.org/2/tutorial/modules.html#packages" rel="noreferrer"><strong>package</strong></a> is a collection of python modules under a common namespace. In practice one is created by placing multiple python modules in a directory with a special <code>__init__.py</code> module (file).</p></li>
<li><p>A <a href="http://docs.python.org/2/tutorial/modules.html#modules" rel="noreferrer"><strong>module</strong></a> is a single file of python code that is meant to be <em>imported</em>. This is a bit of a simplification since in practice quite a few modules <a href="http://ibiblio.org/g2swap/byteofpython/read/module-name.html" rel="noreferrer">detect when they are run as script</a> and do something special in that case.</p></li>
<li><p>A <strong>script</strong> is a single file of python code that is meant to be <em>executed</em> as the 'main' program.</p></li>
<li><p>If you have a set of code that spans multiple files, you probably have an <strong>application</strong> instead of script.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p><strong>Library :</strong> It is a collection of modules.</p>
<p>(Library either contains built in modules(written in C) + modules written in python).</p>
<p><strong>Module :</strong> Each of a set of standardized parts or independent units that can be used to construct a more complex structure.</p>
<p>Speaking in informal language, A module is set of lines of code which are used for a specific purpose and can be used in other programs as it is , to avoid DRY(<strong>D</strong>on’t <strong>R</strong>epeat <strong>Y</strong>ourself) as a team and focusing on main requirement. <a href="https://www.quora.com/What-is-a-Python-library-and-what-can-I-use-it-for" rel="nofollow noreferrer">source</a></p>
<p><strong>API</strong> is an interface for other applications to interact with your library  without having direct access.  </p>
<p><strong>Package</strong> is basically a directory with files.  </p>
<p><strong>Script</strong> means series of commands within a single file.</p>
</div>
<span class="comment-copy">Python uses the term "package" and not very much "library" (apart from the Standard Library).</span>
