<div class="post-text" itemprop="text">
<p>I want to run any app (say Settings) after rebooting tablet. Can I use <code>os.system</code> or do I have to use other methods.</p>
<pre><code>import os,time

for i in range(0,3):

    os.system("adb reboot")
    time.sleep(60) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, you can use <code>os.system</code> to execute ADB commands. If you want to validate the command executed successfully, take a look at the <code>check_output(...)</code> function which is apart of the <a href="http://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">subprocess</a> library. This code snipet is how I choose to implement the <code>check_output</code> function. For the full code look <a href="https://github.com/mdrabic/androidpy_tools/blob/development/adb.py" rel="nofollow noreferrer">here</a>.</p>
<pre><code>def _run_command(self, cmd):
"""
Execute an adb command via the subprocess module. If the process exits with
a exit status of zero, the output is encapsulated into a ADBCommandResult and
returned. Otherwise, an ADBExecutionError is thrown.
"""
try:
    output = check_output(cmd, stderr=subprocess.STDOUT)
    return ADBCommandResult(0,output)
except CalledProcessError as e:
    raise ADBProcessError(e.cmd, e.returncode, e.output)
</code></pre>
<p><br/>
To launch an application you can use the command <code>am start -n yourpackagename/.activityname</code>. To launch the Settings App, run <code>adb shell am start -n com.android.settings/com.android.settings.Settings</code>. This stackoverflow <a href="https://stackoverflow.com/questions/4567904/how-to-start-an-application-using-android-adb-tools">question</a> shows you in detail the options you can use to start the application via a command line intent. </p>
<p><br/>
Other tips: <br/>
I created an ADB wrapper written in python along with a few other python utilities that may aid in what you are trying to accomplish. For example, instead of calling <code>time.sleep(60)</code> to wait for the reboot, you use adb to poll the status of the property <code>sys.boot_completed</code> and once the property is set the device has finished booting and you can launch any application. Below is a reference implementation you can use. </p>
<pre><code>def wait_boot_complete(self, encryption='off'):
"""
When data at rest encryption is turned on, there needs to be a waiting period 
during boot up for the user to enter the DAR password. This function will wait
till the password has been entered and the phone has finished booting up.

OR

Wait for the BOOT_COMPLETED intent to be broadcast by check the system 
property 'sys.boot_completed'. A ADBProcessError is thrown if there is an 
error communicating with the device. 

This method assumes the phone will eventually reach the boot completed state.

A check is needed to see if the output length is zero because the property
is not initialized with a 0 value. It is created once the intent is broadcast.

"""
if encryption is 'on':
  decrypted = None
  target = 'trigger_restart_framework'
  print 'waiting for framework restart'
  while decrypted is None:
    status = self.adb.adb_shell(self.serial, "getprop vold.decrypt")
    if status.output.strip() == 'trigger_restart_framework':
      decrypted = 'true'

  #Wait for boot to complete. The boot completed intent is broadcast before
  #boot is actually completed when encryption is enabled. So 'key' off the 
  #animation.
  status = self.adb.adb_shell(self.serial, "getprop init.svc.bootanim").output.strip()
  print 'wait for animation to start'
  while status == 'stopped':
    status = self.adb.adb_shell(self.serial, "getprop init.svc.bootanim").output.strip()

  status = self.adb.adb_shell(self.serial, "getprop init.svc.bootanim").output.strip()
  print 'waiting for animation to finish'
  while status == 'running':
    status = self.adb.adb_shell(self.serial, "getprop init.svc.bootanim").output.strip()        

else:
  boot = False
  while(not boot):      
    self.adb.adb_wait_for_device(self.serial)
    res = self.adb.adb_shell(self.serial, "getprop sys.boot_completed")
    if len(res.output.strip()) != 0 and int(res.output.strip()) is 1:
      boot = True
</code></pre>
</div>
<span class="comment-copy">I found it: adb shell monkey -p package.name -v 100</span>
<span class="comment-copy">Checkout this <a href="https://github.com/mdrabic/androidpy_tools/blob/development/adb.py" rel="nofollow noreferrer">adb wrapper</a> I wrote in python. It may help if you have a lot of adb calls to perform.</span>
