<div class="post-text" itemprop="text">
<p>My teacher doesn't teach us in class and I am trying to learn this on my own.  This is what I am supposed to do and this is how far I have gotten. Any help would be greatly appreciated!</p>
<blockquote>
<ul>
<li>Takes a list of five numbers from the user  </li>
<li>Prints the list  </li>
<li>Prints the average  </li>
<li>Modifies the list so each element is one greater than it was before  </li>
<li>Prints the modified list</li>
</ul>
</blockquote>
<pre><code> def average():
     x=a+b+c+d+e
     x=x/5
     print("the average of your numbers is: " +x+ ".")

 my_list =[ ]
 for i in range (5):
     userInput = int(input("Enter a number: ")
     my_list.append(userInput)
     print(my_list)
 average(my_list)
</code></pre>
<p>Thanks for your help you tube can only go so far!</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<blockquote>
<p>The main functions that are going to be useful to you here are <code>sum()</code> and <code>len()</code></p>
</blockquote>
</blockquote>
<p><a href="http://docs.python.org/2/library/functions.html#sum" rel="nofollow">sum()</a> returns the the sum of items in a iterable</p>
<p><a href="http://docs.python.org/2/library/functions.html#len" rel="nofollow">len()</a> returns the length of a python object</p>
<p>Using these functions, your case is easy to apply these too:</p>
<pre><code>my_list = []
plus_one = []

for x in range(5):
    my_list.append(x)
    plus_one.append(x+1) 

print my_list
print plus_one

def average():
    average = sum(my_list) / len(my_list) 
    return average

print average()
</code></pre>
<p>As Shashank pointed out, the recommended way is to define a parameter in the function and then pass the argument of your list when calling the function. Wasn't sure if you had learned about parameters yet, so I originally left it out. Here it is anyway: </p>
<pre><code>def average(x):
    # find average of x which is defined when the function is called

print average(my_list) # call function with argument (my_list)
</code></pre>
<p>The benefit of this is if you have multiple lists, you don't need a new function, just change the argument in the function call.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can simply use <code>avg = sum(my_list)/len(my_list) if (len(my_list) != 0) else 0</code> to get your average if you want to use the library functions.</p>
<p>Otherwise, if you just want to know how to change your code, take a look at the error it generates:</p>
<pre><code>Traceback (most recent call last):
  File "file.py", line 12, in &lt;module&gt;
    average(my_list)
TypeError: average() takes no arguments (1 given)
</code></pre>
<p>Obviously, we need to pass in the list to <code>average</code>. Here's a very naive way of computing the average</p>
<pre><code>def average(l):
  s =0
  c = 0
  for val in l:
    s += val
    c +=1
  avg = (s/c if (c != 0)  else 0)
  print("the average of your numbers is: " +str(avg)+ ".")
</code></pre>
<p>This could be easily replaced by my earlier code:</p>
<pre><code>def avg(l):
  avg = sum(l)/len(l) if (len(l) != 0) else 0
  print("the average of your numbers is: " +str(avg)+ ".")
  # or
  if (len(l) !=0):
    avg = sum(l)/len(l)
  else:
    avg = 0
  print("the average of your numbers is: " +str(avg)+ ".")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The solution I provided makes use of Python 3, which you appear to be using.</p>
<pre><code>    #!/usr/bin/env python3

    """The segment below takes user input for your list."""

    userInput = input("Enter a comma-delimited list of numbers \n")
        userList = userInput.split(",")
        try:
            data_list = [float(number) for number in userList]
        except ValueError:
            print("Please enter a comma-delimited list of numbers.")


    def list_modifier(list_var):
       """Print the original list, average said list, modify it as needed,
          and then print again."""
       print("Your list is: " + list_var)
       average = sum(list_var) / len(list_var)  # Divide list by sum of elements
       for x in list_var:
            x += 1
       print("Your modified list is: " + list_var)

    list_modifier(data_list)
</code></pre>
<p>I used a little bit of fancy stuff to take the user input that handles errors if they arise, but really you should not be worrying about stuff like that.  </p>
<p>The <strong>split()</strong> string method just splits up strings into a list of individual smaller strings using whatever parameter you give it. In this case, I split it up on every comma. I added error handling because if you end a string in a comma, the input function will not work.</p>
<p>I also made use of <strong>list comprehension</strong>, a type of expression in python that creates lists based on the parameters passed within the brackets. This is seen in the code below:</p>
<pre><code>[float(number) for number in userList]
</code></pre>
<p>This takes each string within the list of strings created by <strong>split()</strong> and makes it into a number. We now have our desired list of numbers.</p>
<p>Beyond that, we have the <strong>list_modifier</strong> function, which first states the list of numbers with string concatenation. It then uses the <strong>sum()</strong> function to find the sum of all of the elements of the list and divides that sum by the length of the list.</p>
<p>The <em>for</em> code block takes each element in the list and adds one to it. String concatenation is used once again to finally show our modified list.</p>
<p>I really hoped this solution helped, sorry if it was a bit overly-complex. <strong>Try/except</strong> blocks can be quite useful for handling errors, I really recommend you look into them later on. See <a href="http://docs.python.org/3/" rel="nofollow">the Python documentation</a> as well if you want to get ahead in class.</p>
<p>Good luck and have fun!</p>
</div>
<span class="comment-copy">Hints: your function takes no argument just yet, you may want to change that. There is a <code>sum()</code> function that takes a sequence.</span>
<span class="comment-copy">I want to say thank you for being a first-time poster (posting homework even), but still making a clear post that doesn't simply ask use to write code for you but instead asks for improvement of existing code.  As a result you have gotten good responses.</span>
<span class="comment-copy">You should add a parameter to your definition of <code>average</code> which accepts <code>my_list</code>.</span>
<span class="comment-copy">wasn't sure if the op had learned about parameters yet - anyway, it is not 100% necessary, the function still works fine @ShashankGupta</span>
