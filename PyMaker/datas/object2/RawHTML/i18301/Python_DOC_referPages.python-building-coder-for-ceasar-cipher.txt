<div class="post-text" itemprop="text">
<p>So I am supposed to build a coder that shift the value of a letter by the shift value given.
I made 2 dictionaries, 1 for lowercase and 1 for uppercase letters.</p>
<p>This is what it's supposed to do:
"Returns a dict that can apply a Caesar cipher to a letter.
        The cipher is defined by the shift value. Ignores non-letter characters
        like punctuation and numbers."</p>
<p>and here's an example:</p>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; build_coder(3)
{' ': 'c', 'A': 'D', 'C': 'F', 'B': 'E', 'E': 'H', 'D': 'G', 'G': 'J',
'F': 'I', 'I': 'L', 'H': 'K', 'K': 'N', 'J': 'M', 'M': 'P', 'L': 'O',
'O': 'R', 'N': 'Q', 'Q': 'T', 'P': 'S', 'S': 'V', 'R': 'U', 'U': 'X',
'T': 'W', 'W': 'Z', 'V': 'Y', 'Y': 'A', 'X': ' ', 'Z': 'B', 'a': 'd',
'c': 'f', 'b': 'e', 'e': 'h', 'd': 'g', 'g': 'j', 'f': 'i', 'i': 'l',
'h': 'k', 'k': 'n', 'j': 'm', 'm': 'p', 'l': 'o', 'o': 'r', 'n': 'q',
'q': 't', 'p': 's', 's': 'v', 'r': 'u', 'u': 'x', 't': 'w', 'w': 'z',
'v': 'y', 'y': 'a', 'x': ' ', 'z': 'b'}
(The order of the key-value pairs may be different.)
"""
</code></pre>
<p>started off with 2 incomplete dictionaries of lower and uppercase letters:</p>
<pre><code>capitals = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' '}
lower = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', ' '}            
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't have to use dictionaries... There is an easier way, using <code>string</code> module:</p>
<pre><code>from string import printable, maketrans

def caesar(string, key):

    shifted_alphabet = printable[key:] + printable[:key]
    table = maketrans(printable, shifted_alphabet)
    return string.translate(table)

string = raw_input("Enter something&gt; ") #input for python 3
while 1:
    try:
        key = int(raw_input("Enter key (0-25): "))
    except:
        print "Key should be integer"
    else:
        if not (0 &lt;= key &lt;= 25):
            print "Key should 0-25, %s received"%key
            continue
        break
print caesar(string, key)
print caesar(string, len(printable)-key)
</code></pre>
</div>
<span class="comment-copy">Right, Stackoverflow is a place full of geeks that have nothing to do and sit there all day waiting for a chance to make your homework for you.</span>
<span class="comment-copy">Well, some good came out of it: I had forgotten about that syntax for a set. Of course, it's a pretty bad start as the Caesar cipher is based on the alphabet order which sets don't preserve. By the way, why is space a letter in this code?</span>
<span class="comment-copy">Please show us what code you've written so far. SO is best at answering concrete questions, or debugging disfunctional code. If you have nothing but a problem description, you may benefit more from a <a href="http://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">tutorial</a> than a Q&amp;A site.</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/8886947/caesar-cipher-function-in-python">Caesar Cipher Function in Python</a></span>
<span class="comment-copy">@Kevin Is there a StackExchange site for debugging disfunctional families? My code is always functional. And with the holidays sneaking up on us I think I could use the former.</span>
<span class="comment-copy">uncaesar is really caesar(..., len(alphabet)-key). DRY</span>
<span class="comment-copy">@hop, thanks! Modified the code</span>
<span class="comment-copy">alsoâ€¦ <code>key in range(26)</code>? maybe <code>0 &lt;= key &lt; 26</code> would be a better choice ;)</span>
<span class="comment-copy">@hop, ARRRRR :)</span>
