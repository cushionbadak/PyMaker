<div class="post-text" itemprop="text">
<p>Here is my current list:</p>
<pre><code>x = [1.0, 0.0, 3.5, 1.2, 5.4]
</code></pre>
<p>and here is what I want:</p>
<pre><code>newx = [1, 0, 0, 0, 3, 5, 1, 2, 5, 4]
</code></pre>
<p>I just need to split the list at the decimal point and do not want any extra zeros added to the new list. Seems like there should be a simple solution I just don't know about since I am so new.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>x = [1.0, 0.0, 3.5, 1.2, 5.4]
newx = [int(j) for i in x for j in str(i).split('.')]
&gt;&gt;&gt;[1, 0, 0, 0, 3, 5, 1, 2, 5, 4]
</code></pre>
<p>Btw, the comprehension works the same as this one:</p>
<pre><code>var result = []
for i in x:
    for j in str(i).split('.'):
        result.append(int(j))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; x = [1.0, 0.0, 3.5, 1.2, 5.4]
&gt;&gt;&gt; y = [str(v).split(".") for v in x]  # Will give list of list

&gt;&gt;&gt; [int(v) for li in y for v in li]    # Flatten the list
[1, 0, 0, 0, 3, 5, 1, 2, 5, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This can be done using <a href="http://docs.python.org/2/library/stdtypes.html#str.split" rel="nofollow"><code>str.split()</code></a> and <a href="http://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow"><code>itertools.chain.from_iterable()</code></a>.</p>
<p>In a <a href="https://www.youtube.com/watch?v=pShL9DCSIUw" rel="nofollow">generator expression</a>, we take each item in the list and use <a href="http://docs.python.org/3.3/library/functions.html#func-str" rel="nofollow"><code>str()</code></a> to take the number and make it into a string. We then split that string on the character <code>"."</code>:</p>
<pre><code>(str(item).split(".") for item in x)
</code></pre>
<p>This gives us a generator of lists (<code>['1', '0'], ['0', '0'], ...</code>). We then use <a href="http://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow"><code>itertools.chain.from_iterable()</code></a> to flatten that into a single iterator:</p>
<pre><code>itertools.chain.from_iterable(...)
</code></pre>
<p>Then we use a <a href="https://www.youtube.com/watch?v=pShL9DCSIUw" rel="nofollow">list comprehension</a> to convert the individual digit-strings into ints again.</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; x = [1.0, 0.0, 3.5, 1.2, 5.4]
&gt;&gt;&gt; digit_strings = itertools.chain.from_iterable(str(item).split(".") for item in x)
&gt;&gt;&gt; [int(item) for item in digit_strings]
[1, 0, 0, 0, 3, 5, 1, 2, 5, 4]
</code></pre>
<p><code>itertools.chain.from_iterable()</code> is the best tool for flattening iterables - it's efficient and flexible, and the syntax is clear (just a function call with clear documentation in the stdlib).</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; x = [1.0, 0.0, 3.5, 1.2, 5.4]
&gt;&gt;&gt; map(int, (k for y in map(str, x) for k in y.split('.')))
[1, 0, 0, 0, 3, 5, 1, 2, 5, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>[int(b) if b.isdigit() else b for a in x for b in str(a).split('.')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It looks a bit cryptic but should what the OP wants:</p>
<pre><code>&gt;&gt;&gt; x = [1.0, 0.0, 3.5, 1.2, 5.4]
&gt;&gt;&gt; map(int, ('.'.join(str(y) for y in x).split('.')))
[1, 0, 0, 0, 3, 5, 1, 2, 5, 4]
</code></pre>
<p>It's supposed that each element in the list is a float and with one decimal.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; x = [1.0, 0.0, 3.5, 1.2, 5.4]
&gt;&gt;&gt; a = []
&gt;&gt;&gt; [a.extend(map(int, str(num).split("."))) for num in x]
[None, None, None, None, None]
&gt;&gt;&gt; a
[1, 0, 0, 0, 3, 5, 1, 2, 5, 4]
</code></pre>
</div>
<span class="comment-copy">are you sure all your numbers will only have one decimal place (and won't be strings that look like numbers)?</span>
<span class="comment-copy">Here is the unpythonic way: <code>[int(c) for c in str(x) if c.isdigit()]</code>.</span>
<span class="comment-copy">This is a list of numbers. It doesn't have any decimal points in it. Neither do the elements within it. What you're asking for is to split a list of floating-point numbers into a list of alternating integer and fractional parts… but that's a weird thing to do, because the fractional part "30" is the same as "3" under that definition. Maybe if you explain <a href="http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">why you want to do this</a> someone can give you an answer that's easier to understand—or a better way to do what you really want.</span>
<span class="comment-copy">+1 good one, but after looking on  this and mine solution I still think that this uncomprehensible list comprehension are a bit hard to read</span>
<span class="comment-copy">Perfect, simple, and works great. Can you explain to me what is happening if you get a chance?</span>
<span class="comment-copy">Please update your result to list of integers instead of list of chars.</span>
<span class="comment-copy">@sza Fair catch, updated.</span>
<span class="comment-copy">some explanation would be nice - code only answers are not exactly useful.</span>
