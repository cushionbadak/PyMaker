<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1396668/get-object-by-id">Get object by id()?</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<p>I want to get the instance of an class object. I have its address and the name of the object. How can it be possible to create the instance of the object or how can I retrieve the same object?</p>
<p>The class is defined in one python module and i want it to be used in another python module.</p>
<p>Can I use object id to access the object of the class.?</p>
<hr/>
<p>My actual problem is that I have a Python module in which a class had been defined (<code>class Myclass</code>). I am reusing the module in my new code. I want the object of <code>Myclass</code>, which is defined in the old module, to be accessed in my new file.</p>
<p>Can anyone suggest me a way to achieve this? I don't have right to access the module source code where the class has been defined. I can manage to get the class name with the garbage collector.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>id</code> is only defined as a number *unique to the element among currently existing elements. Some Python implementations (in fact, all main ones but CPython) do not return the memory address.</p>
<pre><code>%~&gt; pypy
Python 2.7.3 (480845e6b1dd219d0944e30f62b01da378437c6c, Aug 08 2013, 17:02:19)
[PyPy 2.1.0 with GCC 4.8.1 20130725 (prerelease)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
And now for something completely different: ``arguably, everything is a niche''
&gt;&gt;&gt;&gt; a = 1
&gt;&gt;&gt;&gt; b = 2
&gt;&gt;&gt;&gt; c = 3
&gt;&gt;&gt;&gt; id(a)
9L
&gt;&gt;&gt;&gt; id(b)
17L
&gt;&gt;&gt;&gt; id(c)
25L
</code></pre>
<p>So you have to guarantee that it <em>is</em> the memory address. Furthermore, because of this Python provides no <code>id → object</code> mapping, especially as the object that an <code>id</code> maps to can be changed if the original is deleted.</p>
<p>You have to ask why you're holding the <code>id</code>. If it's for space reasons, bear in mind that containers actually hold <em>references</em> to items, so <code>[a, a, a, a, a]</code> actually takes less space than <code>[id(a), id(a), id(a), id(a), id(a)]; a</code>.</p>
<p>You can consider also making a <code>dict</code> of <code>{id: val}</code> for all the relevant items and storing that. This will keep <code>val</code> alive, so you can use <a href="http://docs.python.org/3/library/weakref.html" rel="nofollow"><code>weakref</code></a>s to allow the <code>val</code>s to be garbage collected. Remember, <a href="http://docs.python.org/3/library/weakref.html" rel="nofollow">use <code>weakref</code> if you want a <code>weakref</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>My actual problem is " I have a python module in which a class had been defined "Class Myclass". I am reusing the module in my new code. I want the object of Myclass which is defined in the old module have to be accessed in my new file. Can any one suggest me a way to achieve this. I don't have right to access the module where the class has defined. I can mange to get the class name with garbage collector. </p>
</blockquote>
<p>If you are <em>reusing</em> the module, then you have access to that module.</p>
<p>For example if said module creates the object like this:</p>
<pre><code>class MyClass:
    pass

myobj = MyClass()
</code></pre>
<p>Then you can import that reference too when you import the module:</p>
<pre><code>from othermodule import MyClass, myobj
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>By the <code>id</code> you can't. By name: </p>
<pre><code>class A:
    def __init__(self,val):
        self.v = val
myInst = A(3)
print eval("myInst").v
&gt;&gt;&gt; 3
</code></pre>
</div>
<span class="comment-copy">The object id does not necessarily have anything to do with the internal address where the object lives in memory. So no, it’s not possible to get a Python object from the id, or from any “address” (whereever you get that from). Instead, you should just make a dictionary somewhere, where you store your objects if you want to look them up later.</span>
<span class="comment-copy">If you have the address of an object (by which I assume you mean a reference to it?) then that's all you need to talk to the object.</span>
<span class="comment-copy">Hello Joe,  I don't have the reference of the object. I just had the physical memory address (0X14356700). And one more thing My original class is defined in the file where i had no access to the source. I just had the binary of it to access or to reuse the code.</span>
<span class="comment-copy">@mkreddy Have you read: <a href="http://stackoverflow.com/questions/1396668/python-get-object-by-id">Python: Get object by id</a>?</span>
<span class="comment-copy">The <code>id()</code> of an object and the address of it in memory are not the same thing.  They happen to be in CPython, but that is an implementation detail.</span>
<span class="comment-copy">Thank you all for the replies. My actual problem is " I have a python module in which a class had been defined "Class Myclass". I am reusing the module in my new code. I want the object of Myclass which is defined in the old module have to be accessed in my new file. Can any one suggest me a way to achieve this. I don't have right to access the module where the class has defined. I can mange to get the class name with garbage collector.</span>
<span class="comment-copy">Thank you I will try with this and will get back to you.</span>
<span class="comment-copy">That only works if the variable holding a reference to that object is actually in scope.</span>
