<div class="post-text" itemprop="text">
<p>I have a file <code>codereview_stats.txt</code> which has data in the following format. The date at the top represents the last date at which data was written in the file and is there for the way I am collecting the data.</p>
<pre><code>18-09-2013
dd-mm-yyyy, questions, answers, %answered, users, visitors/day

15-09-2013,9381,15913,88,26972,8466
16-09-2013,9413,15949,88,27015,8466
17-09-2013,9426,15968,88,27041,8871
18-09-2013,9439,15995,88,27082,8934
</code></pre>
<p>I am using matlotlib to plot the data. But before doing that I need to separate the dates, questions, answers etc. into separate lists. Currently I am doing that in the <code>get_data()</code>function as shown below. As you can see there are many list comprehensions here. Is there a simpler way to separate the data into many lists?</p>
<pre><code>#! python3
from  matplotlib import pyplot as plt
from datetime import datetime as dt

def get_data():
    with open('codereview_stats.txt') as f:
        data = [line for line in f]

    data = [line[:-1].split(',') for line in data[3:]]

    dates = [dt.strptime(line[0], '%d-%m-%Y') for line in data]
    ques = [int(line[1]) for line in data]
    ans =  [int(line[2]) for line in data]
    perc = [int(line[3]) for line in data]
    users = [int(line[4]) for line in data]
    visits = [int(line[5]) for line in data]

    return dates, ques, ans, perc, users, visits


def show_plot(dates, ques, ans, perc, users, visits):
    plt.plot_date(dates, visits, '.', linestyle = '-')
    plt.grid(True)
    plt.setp(plt.xticks()[1], rotation=30)
    plt.show()


show_plot(*get_data())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/3.2/library/functions.html#zip" rel="nofollow"><code>zip()</code> in conjunction with the <code>*</code></a> operator can be used to unzip a list:</p>
<pre><code>&gt;&gt;&gt; strs="""15-09-2013,9381,15913,88,26972,8466
... 16-09-2013,9413,15949,88,27015,8466
... 17-09-2013,9426,15968,88,27041,8871
... 18-09-2013,9439,15995,88,27082,8934"""
&gt;&gt;&gt; lis = [line.rstrip().split(',') for line in strs.splitlines()]
&gt;&gt;&gt; dates, ques, ans, perc, users, visits = zip(*lis)
&gt;&gt;&gt; dates
('15-09-2013', '16-09-2013', '17-09-2013', '18-09-2013')
&gt;&gt;&gt; ques
('9381', '9413', '9426', '9439')
...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The stdlib provides the <code>csv</code> module to read comma separated files.
And there's the <a href="http://docs.python.org/3/library/csv.html#csv.DictReader" rel="nofollow noreferrer"><code>DictReader</code> class</a> that does what you want:</p>
<blockquote>
<p><code>class csv.DictReader(csvfile, fieldnames=None, restkey=None,
  restval=None, dialect='excel', *args, **kwds)</code></p>
<p>Create an object which operates like a regular reader but maps the information read into a dict whose keys are given by the optional
  fieldnames parameter. If the fieldnames parameter is omitted, the
  values in the first row of the csvfile will be used as the fieldnames.
  If the row read has more fields than the fieldnames sequence, the
  remaining data is added as a sequence keyed by the value of restkey.
  If the row read has fewer fields than the fieldnames sequence, the
  remaining keys take the value of the optional restval parameter. Any
  other optional or keyword arguments are passed to the underlying
  reader instance.</p>
</blockquote>
<p>Here's how it may look like in your application snippet (untested):</p>
<pre><code>import csv

def get_data():
    d = csv.DictReader('codereview_stats.txt',
                       ['dates', 'ques', 'ans', 'perc', 'users', 'visits'])
    return d['dates'], d['ques'], d['ans'], d['perc'], d['users'], d['visits']
</code></pre>
<p>Personally, I'd change the code to just pass around the dict object <code>d</code>.</p>
<p>Your code to type convert the string is still required somewhere. Here's an answer on <a href="https://stackoverflow.com/a/17326597/923794">how to subclass DictReader to infer types on the columns</a>.</p>
</div>
