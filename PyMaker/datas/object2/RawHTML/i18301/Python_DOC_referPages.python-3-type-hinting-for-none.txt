<div class="post-text" itemprop="text">
<pre><code>def foo(
        hello: str='world', bar: str=None,
        another_string_or_None: str|????=None):
    pass
</code></pre>
<p>I'm trying to set a type hint in Python in a function, you can add more than one type hint with <code>something: str|bool='default value'</code>, but, what are the type hinting for <code>None</code>? :/</p>
</div>
<div class="post-text" itemprop="text">
<p>From your example:</p>
<pre><code>def foo(
        hello: str='world', bar: str=None,
        another_string_or_None: str|????=None):
    ...
</code></pre>
<p>I've noticed that your use case is "something or None".</p>
<p>Since version 3.5, Python supports type annotations via <a href="https://docs.python.org/3/library/typing.html" rel="noreferrer"><code>typing</code> module</a>.
And in your case, the recommended way of annotating is by using <a href="https://docs.python.org/3/library/typing.html#typing.Optional" rel="noreferrer"><code>typing.Optional[something]</code> hint</a>. This has exact meaning you're looking for.</p>
<p>Therefore the hint for <code>another_string_or_None</code> would be:</p>
<pre><code>import typing

def foo(
        hello: str='world', bar: str=None,
        another_string_or_None: typing.Optional[str]=None):
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's just <code>None</code>!</p>
<pre><code>&gt;&gt;&gt; def nothing(nun: None) -&gt; None:
...     return nun
... 
&gt;&gt;&gt; nothing(None)
&gt;&gt;&gt; 
</code></pre>
<p>Or at least, it <em>can</em> be.</p>
<p>Since these annotations are meaningless to Python beyond being in/correct syntax, it's sort of up to the tools.</p>
<p>If you use <a href="https://github.com/prechelt/typecheck-decorator" rel="nofollow">typecheck-decorator</a> for example, then <a href="https://bugs.python.org/issue19438" rel="nofollow">you'll need to</a> use <code>type(None)</code>:</p>
<pre><code>&gt;&gt;&gt; import typecheck as tc
&gt;&gt;&gt;
&gt;&gt;&gt; @tc.typecheck
&gt;&gt;&gt; def nothing(nun: type(None)) -&gt; type(None):
...     return nun
... 
&gt;&gt;&gt; nothing(None)
&gt;&gt;&gt; nothing(0)
typecheck.framework.InputParameterError: nothing() has got an incompatible value for nun: 0
&gt;&gt;&gt; nothing(False)
typecheck.framework.InputParameterError: nothing() has got an incompatible value for nun: False
</code></pre>
<p>Typecheck also allows you to somewhat more clearly "add more than one type hint with" with <code>tc.any()</code> (OR), <code>tc.all()</code> (AND), and far more besides. </p>
<p>Beware that <code>tc.none()</code> is a NAND-like predicate; <em>not</em> what you are looking for - with no arguments it will accept <em>any</em> type, equivalent to <code>tc.all()</code> or the more apt <code>tc.anything</code>.</p>
</div>
<span class="comment-copy">Why would you want to hint that a given variable should always be NoneType?</span>
<span class="comment-copy">because can be a None or str</span>
<span class="comment-copy">What tool are you using that reads these annotations?</span>
<span class="comment-copy">What's the default state (no arguments passed)? None or str?</span>
<span class="comment-copy">Python 3 doesn't have type checking. It has pep 3107 annotations, that some external tool might consider type hints. The pep specifically doesn't assign any semantics whatsoever to the annotations.</span>
