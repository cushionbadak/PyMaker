<div class="post-text" itemprop="text">
<p>When creating a class when do I need to use init()?</p>
<p>For the code below, when we create the PartTimeEmployee() class can we just inherit the init() from the Employee() class? Or should we retype it?</p>
<p>I found that both codes worked:</p>
<pre><code>class Employee(object):

    def __init__(self, employee_name):
        self.employee_name = employee_name

    def calculate_wage(self, hours):
        self.hours = hours
        return hours * 20.00

class PartTimeEmployee(Employee):

    def calculate_wage(self,hours):
        self.hours = hours
        return hours * 12.00
</code></pre>
<p>and</p>
<pre><code>class Employee(object):

    def __init__(self, employee_name):
        self.employee_name = employee_name

    def calculate_wage(self, hours):
        self.hours = hours
        return hours * 20.00

class PartTimeEmployee(Employee):
    def __init__(self,employee_name):
        self.employee_name = employee_name

    def calculate_wage(self,hours):
        self.hours = hours
        return hours * 12.00
</code></pre>
<p>Is there some kind of best practice here?</p>
</div>
<div class="post-text" itemprop="text">
<p>No; <code>__init__</code> is inherited like any other method. Because of this, however, you have to take special precautions when you <em>do</em> override it. For example, if we have a <code>Person</code> class:</p>
<pre><code>class Person(object):
    def __init__(self, name):
        self.name = name
</code></pre>
<p>We want to make a new class named <code>Employee</code> that extends it to add a <code>title</code> attribute. We could repeat the logic in the <code>Person</code> constructor:</p>
<pre><code>class Employee(Person):
    def __init__(self, name, title):
        self.name = name
        self.title = title
</code></pre>
<p>But if <code>Person</code> does something more involved, you probably don't want to do that. Instead, you need to use <code>super</code> to explicitly call the superclass's <code>__init__</code>:</p>
<pre><code>class Employee(Person):
    def __init__(self, name, title):
        super(Employee, self).__init__(name)
        self.title = title
</code></pre>
<p>But in the simple case where the subclass has no additional initialization, feel free to omit <code>__init__</code>; it will indeed be inherited from the superclass appropriately.</p>
</div>
<span class="comment-copy">You can and do inherit <code>__init__</code> just like any other method.  Like any other method, you should only override it if you want to change the behavior.</span>
<span class="comment-copy">Yes, <code>__init__()</code> is inherited, just like any other method.</span>
<span class="comment-copy">@forivall: That's a valid point for most methods, but I'd specifically <i>exclude</i> <code>__init__</code>; if you've got a reference to the type in order to create an instance of it, you're almost certain to already know which type you're going to create an instance of, and therefore can pass whatever arguments you know it's going to need.</span>
<span class="comment-copy">@forivall: There are many good uses for changing the function signature of <code>__init__</code>. In fact, the stdlib does this all over the place. When you need a "factory function" that has the same interface for all classes in a hierarchy, you'll either need them to have the same signature for <code>__init__</code> or to use some <code>@classmethod</code> instead… but that's not a common scenario (unless you're trying to write Java code in Python).</span>
<span class="comment-copy">@forivall: For example, the first search hit for "subclass" in the Python docs is <a href="http://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection" rel="nofollow noreferrer"><code>HTTPSConnection</code></a>. Compare it to its base class.</span>
<span class="comment-copy">@Akavall: True, but <code>super</code> deals with multiple inheritance in a very special way, which may be desirable.</span>
<span class="comment-copy">@Akavall: Really, the only times you should ever write <code>Person.__init__</code> is (a) the base class is an old-style class, or (b) you're specifically trying to avoid the normal method resolution order. If you do it when it's not necessary, readers are going to suspect that one of those cases is true, and waste time trying to figure out what you were intending. Plus, it makes your code more brittle—if you later interpose an intermediate class, you have to remember to modify the <code>__init__</code> methods of all of the derived classes, and missing one will lead a bug that's a nightmare to find.</span>
