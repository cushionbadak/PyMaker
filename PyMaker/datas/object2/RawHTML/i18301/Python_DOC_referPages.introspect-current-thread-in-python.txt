<div class="post-text" itemprop="text">
<p>How can one instrospect to receive the current thread object?<br/>
Consider this somewhat artificial code snippet. The use case is different, but for the sake of simplicity, I've boiled it down the the essential bit</p>
<pre><code>t1 = threading.Thread(target=func)
t2 = threading.Thread(target=func)

marked_thread_for_cancellation = t1

t1.start()
t2.start()

def func():
    if [get_thread_obj] is marked_thread_for_cancellation:   # &lt;== introspect here
        return
    # do something
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.python.org/2/library/thread.html#thread.get_ident" rel="nofollow"><code>thread.get_ident</code></a> function. Compare <code>thread.get_ident()</code> with <code>Thread.ident</code> as follow:</p>
<pre><code>import thread
import threading
import time

marked_thread_for_cancellation = None

def func(identifier):
    while threading.get_ident() != marked_thread_for_cancellation:
        time.sleep(1)
        print('{} is alive'.format(identifier))
    print('{} is dead'.format(identifier))

t1 = threading.Thread(target=func, args=(1,))
t2 = threading.Thread(target=func, args=(2,))
t1.start()
t2.start()
time.sleep(2)
marked_thread_for_cancellation = t1.ident # Stop t1
</code></pre>
<p>In Python 3, use <a href="http://docs.python.org/3/library/threading.html#threading.get_ident" rel="nofollow"><code>threading.get_ident</code></a>.</p>
<p>You can also use your own identifier instead of <code>thread.get_ident</code>:</p>
<pre><code>import threading
import time

marked_thread_for_cancellation = None

def func(identifier):
    while identifier != marked_thread_for_cancellation:
        time.sleep(1)
        print('{} is alive'.format(identifier))
    print('{} is dead'.format(identifier))

t1 = threading.Thread(target=func, args=(1,))
t2 = threading.Thread(target=func, args=(2,))
t1.start()
t2.start()
time.sleep(2)
marked_thread_for_cancellation = 1 # Stop t1 (`1` is the identifier for t1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To make minimal changes to your code, here is probably what you are after:</p>
<pre><code>import threading

def func():
    if threading.current_thread() is marked_thread_for_cancellation:   # &lt;== introspect here
        print 'cancel'
    else:
        print 'otherwise'

t1 = threading.Thread(target=func)
t2 = threading.Thread(target=func)

marked_thread_for_cancellation = t1

t1.start()
t2.start()
</code></pre>
<p>But I do not understand what do you mean by introspection. <code>marked_thread_for_cancellation</code> is shared by all threads, all threads have by their own is some local data, accessible via <code>threading.local()</code>.</p>
</div>
<span class="comment-copy">threading.currentThread() gives you the current thread, or do you need more than that? Threads local data can be used to mark threads. (Maybe I have misunderstood your intention)</span>
<span class="comment-copy">"In computer programming, introspection refers to the ability to examine something to determine what it is, what it knows, and what it is capable of doing." (<a href="http://www.ibm.com/developerworks/library/l-pyint/index.html" rel="nofollow noreferrer">source</a>). In our case the code is introspecting the very thread it is running in.</span>
<span class="comment-copy">This is too broad a definition. Almost any program may be using introspection then. May be reflection is better term for what I understood by introspection: <a href="https://en.wikipedia.org/wiki/Reflection_%28computer_programming%29" rel="nofollow noreferrer">en.wikipedia.org/wiki/Reflection_%28computer_programming%29</a> but still accessing thread object can hardly be called introspection/reflection...</span>
