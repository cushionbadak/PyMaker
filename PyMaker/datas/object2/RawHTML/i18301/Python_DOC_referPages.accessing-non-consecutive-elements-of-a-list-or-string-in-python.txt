<div class="post-text" itemprop="text">
<p>As far as I can tell, this is not officially not possible, but is there a "trick" to access arbitrary non-sequential elements of a list by slicing?</p>
<p>For example: </p>
<pre><code>&gt;&gt;&gt; L = range(0,101,10)
&gt;&gt;&gt; L
[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
</code></pre>
<p>Now I want to be able to do</p>
<pre><code>a,b = L[2,5]
</code></pre>
<p>so that <code>a == 20</code> and <code>b == 50</code></p>
<p>One way besides two statements would be something silly like:</p>
<pre><code>a,b = L[2:6:3][:2]
</code></pre>
<p>But that doesn't scale at all to irregular intervals.</p>
<p>Maybe with list comprehension using the indices I want? </p>
<pre><code>[L[x] for x in [2,5]]
</code></pre>
<p>I would love to know what is recommended for this common problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>Something like this?</p>
<pre><code>def select(lst, *indices):
    return (lst[i] for i in indices)
</code></pre>
<p>Usage:</p>
<pre><code>&gt;&gt;&gt; def select(lst, *indices):
...     return (lst[i] for i in indices)
...
&gt;&gt;&gt; L = range(0,101,10)
&gt;&gt;&gt; a, b = select(L, 2, 5)
&gt;&gt;&gt; a, b
(20, 50)
</code></pre>
<p>The way the function works is by returning a <a href="https://wiki.python.org/moin/Generators" rel="nofollow noreferrer">generator object</a> which can be iterated over similarly to any kind of Python sequence.</p>
<p>As @justhalf noted in the comments, your call syntax can be changed by the way you define the function parameters.</p>
<pre><code>def select(lst, indices):
    return (lst[i] for i in indices)
</code></pre>
<p>And then you could call the function with:</p>
<pre><code>select(L, [2, 5])
</code></pre>
<p>or any list of your choice.</p>
<p><strong>Update:</strong> I now recommend using <code>operator.itemgetter</code> instead unless you really need the lazy evaluation feature of generators. See <a href="https://stackoverflow.com/a/19128597/2653390">John Y's answer</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Probably the closest to what you are looking for is <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>itemgetter</code></a> (or look <a href="https://docs.python.org/2/library/operator.html#operator.itemgetter" rel="nofollow noreferrer">here</a> for Python 2 docs):</p>
<pre><code>&gt;&gt;&gt; L = list(range(0, 101, 10))  # works in Python 2 or 3
&gt;&gt;&gt; L
[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; itemgetter(2, 5)(L)
(20, 50)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you can use <code>numpy</code>, you can do just that:</p>
<pre><code>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; the_list = numpy.array(range(0,101,10))
&gt;&gt;&gt; the_indices = [2,5,7]
&gt;&gt;&gt; the_subset = the_list[the_indices]
&gt;&gt;&gt; print the_subset, type(the_subset)
[20 50 70] &lt;type 'numpy.ndarray'&gt;
&gt;&gt;&gt; print list(the_subset)
[20, 50, 70]
</code></pre>
<p><a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html" rel="noreferrer"><code>numpy.array</code></a> is very similar to <code>list</code>, just that it supports more operation, such as mathematical operations and also arbitrary index selection like we see here.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just for completeness, the method from the original question is pretty simple. You would want to wrap it in a function if <code>L</code> is a function itself, or assign the function result to a variable beforehand, so it doesn't get called repeatedly:</p>
<pre><code>[L[x] for x in [2,5]]
</code></pre>
<p>Of course it would also work for a string...</p>
<pre><code>["ABCDEF"[x] for x in [2,0,1]]
['C', 'A', 'B']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>None of the other answers will work for <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/arrays.ndarray.html" rel="nofollow noreferrer">multidimensional object</a> slicing. IMHO this is the most general solution (uses <code>numpy</code>):</p>
<p><a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.ix_.html" rel="nofollow noreferrer"><code>numpy.ix_</code></a> allows you to select arbitrary indices in all dimensions of an array simultaneously.</p>
<p>e.g.:</p>
<pre><code>&gt;&gt;&gt; a = np.arange(10).reshape(2, 5) # create an array
&gt;&gt;&gt; a
array([[0, 1, 2, 3, 4],
       [5, 6, 7, 8, 9]])
&gt;&gt;&gt; ixgrid = np.ix_([0, 1], [2, 4]) # create the slice-like grid
&gt;&gt;&gt; ixgrid
(array([[0],
       [1]]), array([[2, 4]]))
&gt;&gt;&gt; a[ixgrid]                       # use the grid to slice a
array([[2, 4],
       [7, 9]])
</code></pre>
</div>
<span class="comment-copy"><code>a,b = L[2],L[5]</code>?</span>
<span class="comment-copy">@roippi - That does make it look simple, but I wanted to apply this directly to the output of a function that returns a list, without calling the function twice or re-assigning that to a variable and then grabbing.</span>
<span class="comment-copy">I'm inclined to say that your list comprehension is the best you can do. Or, if you don't need an actual list, use a generator expression, like in Shashank Gupta's answer (though if you only need it once, you could just put the genexp inline, rather than making a function to return it).</span>
<span class="comment-copy">Do you think defining the function as <code>select(lst, indices)</code> and calling it as <code>select(L, [2,5])</code> would be better?</span>
<span class="comment-copy">@justhalf Yeah that's possible as well, I'll make a note.</span>
<span class="comment-copy">@Shashank quick question. the "*indices" argument it's just "*args" right? but with a different name?</span>
<span class="comment-copy">@HalcyonAbrahamRamirez Yes, exactly. :) This is a very old answer however, and I would recommend using <code>operator.itemgetter</code> instead unless the lazy-evaluation feature of generators is required.</span>
<span class="comment-copy">@justhalf: Well, <code>itemgetter</code> is very similar to Shashank's answer, except already included in the Python standard library.</span>
<span class="comment-copy">It is a nice solution toto, but I think the extra up votes are because it came in slightly sooner... I ultimately chose the one that doesn't require an <code>import</code> even though it mainly wrapped the OP in a function definition.</span>
<span class="comment-copy">@beroe: It's still getting more <i>new</i> votes even <i>after</i> you accepted the other answer, so the earlier time has nothing to do with it. I believe the reason my answer is getting more votes is that experienced Python programmers will usually prefer to use <code>itemgetter</code> than to define a new function. One import is shorter and simpler than one function definition.</span>
<span class="comment-copy">Makes sense. I like it as a solution. (I voted for it too ;^)</span>
<span class="comment-copy">For Python 3, the first line would change to <code>&gt;&gt;&gt; L = list(range(0, 101, 10))</code> to perform the "identical" operation.</span>
<span class="comment-copy">This should be the accepted answer I feel.</span>
<span class="comment-copy">I think the reason it is not the accepted answer is because (a) it has more bloat, and (b) it is less generalized.  (a): <code>numpy</code> is a <b>huge</b> library, and this answer pulls the whole thing in.  (Perhaps <code>from numpy import array</code>?) (b): <code>numpy</code> is <i>specifically</i> for mathematical operations, so is less familiar to folks who focus on, for instance, back-end web development.  <code>itemgetter</code> is closer to "bare" Python that reaches a wider audience.</span>
<span class="comment-copy"><code>from numpy import array</code> will still load the whole numpy package, I believe. But you're right, this might be overkill if the list is not used for math operations.</span>
<span class="comment-copy">Yes it is too bad python doesnâ€™t have better basic support of array-type data without requiring <code>numpy</code></span>
