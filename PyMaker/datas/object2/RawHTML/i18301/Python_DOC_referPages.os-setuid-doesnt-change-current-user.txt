<div class="post-text" itemprop="text">
<p>I wanted to change current user for script execution. I did this</p>
<pre><code>import os
newuid = pwd.getpwnam('newuser').pw_uid
os.setuid(newuid)    
print('User :' + getpass.getuser());
</code></pre>
<p>I am still getting <code>root</code>. Is there better way than this? I want switch user once and then continue rest of the commands execution in the script with that new user.  </p>
</div>
<div class="post-text" itemprop="text">
<p><code>getpass.getuser()</code> doesn't use <code>getuid()</code> or <code>geteuid()</code> to get the current user.</p>
<p><a href="http://docs.python.org/3/library/getpass.html#getpass.getuser" rel="noreferrer">http://docs.python.org/3/library/getpass.html#getpass.getuser</a></p>
<blockquote>
<p>This function checks the environment variables LOGNAME, USER, LNAME and USERNAME, in order, and returns the value of the first one which is set to a non-empty string. If none are set, the login name from the password database is returned on systems which support the pwd module, otherwise, an exception is raised.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>After trying modules <code>os</code>, <code>subprocess</code>, <code>getpass</code>, I realised that the problem is not whether the user is set. The user gets set or gets changed using <code>os.setuid</code>, however, the methods from modules to get username like <code>os.getlogin()</code>, <code>getpass.getuser()</code>, actually does not get username properly. If you run a shell command <code>whoami</code> or <code>id</code>using <code>subprocess.Popen()</code> or <code>os.system()</code>, you will get the changed user. These are little puzzled outputs for me. Below is script which shows all these weird behaviours.</p>
<pre><code>import os
import subprocess
import pwd
import getpass

#os.chdir("/tmp")

#uid = pwd.getpwnam('newuser').pw_uid

os.setuid(500)     # newuser's id found from shell cmd line

print os.getuid()

p = subprocess.Popen(['id'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

out, err = p.communicate()

# print os.system('useradd newuser1') # Try this commenting, it will not create, and then  try commenting above line of setuid. i.e. it will become root, and then see the change.

# print os.getcwd()

print out,err

p = subprocess.Popen(['whoami'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

out, err = p.communicate()

print out,err

print getpass.getuser()

print os.getlogin()

print os.system('whoami')
</code></pre>
</div>
<span class="comment-copy">ok. But still it(setuid) doesn't change the user at all. I am still getting the execution output as root.</span>
<span class="comment-copy">How do you know?</span>
<span class="comment-copy">I ran manually with root and outputs for manual and script match. The scripts need to be run with that user. It is failing.</span>
<span class="comment-copy">seteuid() changes the effective user id, not the real uid. You have to drop the real uid with os.setuid().</span>
<span class="comment-copy">Neither setuid nor seteuid affect the output of getpass.getuser(). getuser() doesn't account for the owner of the process. It just uses an environment variable.</span>
