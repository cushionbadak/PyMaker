<div class="post-text" itemprop="text">
<p>I am trying to develop a list(lets called "l") of list of tuple of two natural numbers(excluding 0) such as "a" can be a memeber of "l" if len(a) == len and for every member(lets call p) of "a", p[0] &lt;= max and p[1] &lt;= max</p>
<p>For example poslist_all(max=2,len=1)</p>
<pre><code>[[(1,1)],[(1,2)],[(2,1)],[(2,2)]]
</code></pre>
<p>and poslist_all(2,2)</p>
<pre><code>[[(1,1),(1,1)],[(1,1),(1,2)],[(1,1),(2,1)],[(1,1),(2,2)],...,[(2,2),(1,1)],[(2,2),(1,2)],[(2,2),(2,1)],[(2,2),(2,2)]]
</code></pre>
<p>So I am trying to make that list an iterator and came up with this code,</p>
<pre><code>class poslist_all:
    def __init__(self,max,len):
        self.max = max
        self.len = len
        self.iposlist = len*[(1,1)]
    def __iter__(self):
        return self
    def __next__(self):
        ml = self.maxlist()
        if ml:
            if ml[0] == 0:
                raise StopIteration
            else:
                toinc = ml[0]-1
                self.inc(ml[0] - 1)
                for i in range(ml[0],self.len-1):
                    self.iposlist[i] = (1,1)
                return self.iposlist
        else:
            self.inc(self.len - 1)
            return self.iposlist
    def maxlist(self):
        return [x for x,y in enumerate(self.iposlist) if y == (self.max,self.max)]
    def inc(pnum):
        if self.iposlist[pnum][1] == self.max:
            return (self.iposlist[pnum][0]+1,1)
        else:
            return (self.iposlist[pnum][0],self.iposlist[pnum][1]+1)

if __name__ == "__main__":
    for ps in poslist_all(2,2):
        print(ps)
</code></pre>
<p>but this always returns</p>
<pre><code>Traceback (most recent call last):
  File "./helper.py", line 33, in &lt;module&gt;
    for ps in poslist_all(2,2):
  File "./helper.py", line 22, in __next__
    self.inc(self.len - 1)
TypeError: inc() takes 1 positional argument but 2 were given
</code></pre>
<p>Whats causing this error ? How to solve it ?
Is there more pythonic way to do this ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Others have shown you how to get rid of the error, but I'd like to address the actual problem.</p>
<p>There is indeed a better, more pythonic way to do what you want.
The <a href="http://docs.python.org/2/library/itertools.html" rel="nofollow">itertools</a> module, and specifically <a href="http://docs.python.org/2/library/itertools.html#itertools.product" rel="nofollow">itertools.product()</a> can make this task much simpler.</p>
<pre><code>import itertools as it

def create_possibilities(highest, per_list):
    tuples = it.product(range(1, highest+1), repeat=highest)
    all_possibilities = it.product(tuples, repeat=per_list)
    return all_possibilities
</code></pre>
<p>This will return an iterator over iterators(I think that's at least close to the correct terminology).<br/>
If you want actual lists, use the <a href="http://docs.python.org/2/library/functions.html#list" rel="nofollow">list()</a> function as needed.</p>
<p>Also, note that <code>max</code> and <code>len</code> are awful variable names; they shadow python's built-n functions.</p>
</div>
<div class="post-text" itemprop="text">
<p>The class instance is always passed as the first parameter to methods of the class.  Try:</p>
<pre><code>def inc(self, pnum):
    if ...:
        return ...
    else:
        return ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Change:</p>
<pre><code>def inc(pnum):
        if self.iposlist[pnum][1] == self.max:
            return (self.iposlist[pnum][0]+1,1)
        else:
            return (self.iposlist[pnum][0],self.iposlist[pnum][1]+1)
</code></pre>
<p>To:</p>
<pre><code>def inc(self, pnum): # methods (in a class) require self
        if self.iposlist[pnum][1] == self.max:
            return (self.iposlist[pnum][0]+1,1)
        else:
            return (self.iposlist[pnum][0],self.iposlist[pnum][1]+1)
</code></pre>
</div>
<span class="comment-copy">You need <code>def inc(self, pcnum)</code>.</span>
<span class="comment-copy">Related question: <a href="http://stackoverflow.com/q/13652006/510937">stackoverflow.com/q/13652006/510937</a></span>
<span class="comment-copy">You may also want to read the FAQ <a href="http://docs.python.org/3/faq/design.html#why-self" rel="nofollow noreferrer">Why must ‘self’ be used explicitly in method definitions and calls?</a>. Once you understand <i>why</i> Python works this way, it's easier to remember <i>that</i> it works this way. (Or at least it was for me…)</span>
<span class="comment-copy"><code>s/class/instance/</code></span>
<span class="comment-copy">Also, <code>inc</code> is not a class method; it's just a method.</span>
<span class="comment-copy">I'd assume he means methods of classes.</span>
<span class="comment-copy">Better to be precise; someone who doesn't know to pass <code>self</code> or <code>cls</code> is unlikely to understand these distinctions, but there's no point in setting them up for confusion later on.</span>
<span class="comment-copy">@amitparikh: Editing the post should be fine and is probably the most useful thing to do, as new people reading the answer won't need to parse the comments to get the right info out of it.</span>
<span class="comment-copy">All methods are associated with classes by definition, but in Python, not every method is a <a href="http://docs.python.org/2/library/functions.html#classmethod" rel="nofollow noreferrer">class method</a>, which would require <code>cls</code> as the first argument (not <code>self</code>). Better to be precise and just say "method" here.</span>
