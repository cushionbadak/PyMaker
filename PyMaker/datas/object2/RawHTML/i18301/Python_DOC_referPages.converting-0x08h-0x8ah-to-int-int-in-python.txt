<div class="post-text" itemprop="text">
<p>I've got string like <code>x='0x08h, 0x0ah'</code> in Python, wanting to convert it to <code>[8,10]</code> (like unsigned ints). I could split and index it like <code>[int(a[-3:-1],16) for a in x.split(', ')]</code> but is there a better way to convert it to a list of ints?</p>
<p>Would it matter if I had <code>y='080a'</code>?</p>
<p><em>edit</em> (for plus points:).) what (sane) string-based hexadecimal notations have python support, and which not?</p>
</div>
<div class="post-text" itemprop="text">
<p>You really have to know what the pattern you're trying to parse is, before you write a parser.</p>
<p>But it looks like your pattern is: optional <code>0x</code>, then hex digits, then optional <code>h</code>. At least that's the most reasonable thing I can come up with that handles both <code>'0x08h'</code> and <code>'080a'</code>. So:</p>
<pre><code>def parse_hex(s):
    return int(s.lstrip('0x').rstrip('h'), 16)
</code></pre>
<p>Then:</p>
<pre><code>numbers = [parse_hex(s) for s in x.split(', ')]
</code></pre>
<p>Of course  you don't actually <em>need</em> to remove the <code>0x</code> prefix, because Python accepts that as part of a hex string, so you could write it as:</p>
<pre><code>def parse_hex(s):
    return int(s.rstrip('h'), 16)
</code></pre>
<p>However, I think the intention is clearer if you're more explicit.</p>
<hr/>
<p>From your edit:</p>
<blockquote>
<p>edit what (sane) string-based hexadecimal notations have python support, and which not?</p>
</blockquote>
<p>See the documentation for <a href="http://docs.python.org/3/library/functions.html#int" rel="nofollow"><code>int</code></a>:</p>
<blockquote>
<p>Base-2, -8, and -16 literals can be optionally prefixed with 0b/0B, 0o/0O, or 0x/0X, as with integer literals in code.</p>
</blockquote>
<p>That's it. (If you read the rest of the paragraph, if you're <em>guaranteed</em> to have <code>0x/0X</code>, you don't have to explicitly use base=16. But that doesn't help you here, so that one sentence is really all you need.) The docs on <a href="http://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex" rel="nofollow">Numeric Types</a> and <a href="http://docs.python.org/3/reference/lexical_analysis.html#numeric-literals" rel="nofollow">Numeric literals</a> detail exactly what "as with integer literals in code"; the only thing surprising there is that negative numbers aren't literals, complex numbers aren't literals (but pure imaginary numbers are), and non-ASCII digits can be used but the documentation doesn't explain how.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can also use <code>map</code>: <code>map(lambda s:int(s.lower().replace('0x','').replace('h',''), 16),x.split(', '))</code></p>
</div>
<span class="comment-copy">After your edit, what is <code>'0x080x0a'</code> supposed to mean? (And what's the rule that explains it?)</span>
<span class="comment-copy">@abarnert I removed my edit since I realized that what I'm trying to find are hexadecimal string formats that python supports for string streams, and I was just guessing. I know about the <code>struct</code> ones and <code>hex</code> and <code>float.hex</code>, but I should ask that as another question.</span>
<span class="comment-copy">Ah, I see… your edit was about wanting to know if there are other functions that have different rules from <code>int</code>, not about how to do a specific thing.</span>
<span class="comment-copy">@abarnert yes, however I should leave this question as it is - too many edits already. :) Re-added the original edit to match your kind answer.</span>
<span class="comment-copy">OK, I won't add an explanation about the various other parsing functions available, but I did expand on what exactly <code>int</code> does.</span>
<span class="comment-copy">So basically looping with core int(&lt;sane string&gt;, 16) is the way. What hexadecimal string formats does python support out of the box should be my question, I go edit.</span>
<span class="comment-copy">I realized my edit should be a standalone question. Thanks for this one!</span>
<span class="comment-copy">@naxa: Yes, you were right about that part from the start; it's just a matter of knowing how to convert all of your possible "insane" hex string formats into a sane format that Python can handle.</span>
<span class="comment-copy">There's no reason to replace a listcomp with a <code>map</code> just to wrap the expression in a <code>lambda</code> function; you're just making the code harder to read and slower.</span>
<span class="comment-copy">It makes the code a single line.</span>
<span class="comment-copy">So what? Does your terminal only have a warranty for the first 100000 lines? The reason you don't want to make things harder to read is that it makes it easier to make mistakes and not notice them… try your code on the OP's example, and you'll get a SyntaxError, and then when you fix that you'll get a ValueError.</span>
<span class="comment-copy">Yes, you are right about the SyntaxError, but I didn't get any ValueError...</span>
<span class="comment-copy">When you split the string on whitespace, you're leaving a comma on the first one, which means you will get a <code>ValueError: invalid literal for int() with base 16: '08,'</code>. Which I just got when I tested it in Python 2.7 and (after adding something to consume the iterator) 3.3.</span>
