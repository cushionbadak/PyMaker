<div class="post-text" itemprop="text">
<p>I am new in python and want implement <strong>fast</strong> object serialization. I was trying to use json, but it was too slow, also was trying to use marshall module, but the size of the objects serialized by marshall 6-7 times more than pickle, so i decided to use pickle in my project. I read about cPickle module, read that it quite fast, but there is no such module in python 3 and docs says that module named _pickle is written in C. So in my projects i use </p>
<pre><code>import _pickle as pickle
</code></pre>
<p>Is any difference between pickle and _pickle? How i can implement faster objects serialization/deserialization?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>pickle</code> module <strong>already</strong> imports <code>_pickle</code> if available. It is the C-optimized version of the <code>pickle</code> module, and is used transparently.</p>
<p>From the <a href="https://github.com/python/cpython/blob/5b22dd87aa39087f07987f788a0bbd2464e2a8b5/Lib/pickle.py#L1348-L1352" rel="noreferrer"><code>pickle.py</code> source code</a>:</p>
<pre><code># Use the faster _pickle if possible
try:
    from _pickle import *
except ImportError:
    Pickler, Unpickler = _Pickler, _Unpickler
</code></pre>
<p>and from the <a href="https://docs.python.org/3/library/pickle.html#performance" rel="noreferrer"><code>pickle</code> module documentation</a>:</p>
<blockquote>
<p>The <code>pickle</code> module has an transparent optimizer (<code>_pickle</code>) written in C. It is used whenever available. Otherwise the pure Python implementation is used.</p>
</blockquote>
<p>In Python 2, <code>_pickle</code> was known as <code>cPickle</code>, but has been updated to allow the transparent use as an implementation detail.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3.1/whatsnew/3.0.html#library-changes" rel="noreferrer">Library Changes</a> section of the <a href="https://docs.python.org/3.1/whatsnew/3.0.html#what-s-new-in-python-3-0" rel="noreferrer"><em>What's New In Python 3.0</em></a> documentation:</p>
<blockquote>
<p>A common pattern in Python 2.x is to have one version of a module
  implemented in pure Python, with an optional accelerated version
  implemented as a C extension; for example, <code>pickle</code> and <code>cPickle</code>. This
  places the burden of importing the accelerated version and falling
  back on the pure Python version on each user of these modules. In
  Python 3.0, the accelerated versions are considered implementation
  details of the pure Python versions. <strong>Users should always import the
  standard version, which attempts to import the accelerated version and
  falls back to the pure Python version. The <code>pickle</code> / <code>cPickle</code> pair
  received this treatment.</strong> The profile module is on the list for 3.1.
  The <code>StringIO</code> module has been turned into a class in the io module.</p>
</blockquote>
<p>Since it is a python convention that implementation details are prepended with an underscore, <code>cPickle</code> became <code>_pickle</code>.  Notably this means that if you are importing <code>_pickle</code>, the API has no guaranteed contract and <em>could</em> break backwards-compatibility in future releases of python3, as unlikely as that may be.</p>
</div>
<span class="comment-copy">So python3 pickle == python2 cPickle?</span>
<span class="comment-copy">@m9_psy: indeed.</span>
<span class="comment-copy">note that in addition to it being unnecessary to import _pickle directly in Python 3, it lacks some features such as the .HIGHEST_PROTOCOL constant.</span>
<span class="comment-copy">If I do <code>import pickle</code> in Python 2.7.6, which implementation will I get?</span>
<span class="comment-copy">@Moberg: you get the pure-Python implementation. Use <code>try: import cPickle as pickle</code>, <code>except ImportError: import pickle</code>, to use the C-accelerated implementation if available.</span>
