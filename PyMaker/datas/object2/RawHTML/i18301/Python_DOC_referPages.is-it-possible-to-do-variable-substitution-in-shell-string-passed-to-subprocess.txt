<div class="post-text" itemprop="text">
<p>Let's say I have this:</p>
<pre><code>&gt;&gt;&gt; grepstring="mystring"
&gt;&gt;&gt; p = subprocess.Popen("ls -l | grep grepstring", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
</code></pre>
<p>How can I substitute <code>grepstring</code> to <code>mystring</code> in the <code>subprocess.Popen</code> call ?</p>
</div>
<div class="post-text" itemprop="text">
<p>The right thing to do here, if possible, is to <em>not</em> do variable substitution. And, in fact, to not use the shell in the first place. What you really want is to pass <code>grep</code> an argument; the only reason you need to do that through variable substitution is that you're not running <code>grep</code>, you're running a shell and trying to figure out how to get it to run <code>grep</code> for you the way you want.</p>
<p>If you just want to do the equivalent of a shell <code>${grepstring}</code>, you do that with Python's string-processing commands—ideally <code>str.format</code>, as Martijn Pieters suggests. But that this won't work if, say, <code>grepstring</code> has a space in it. Or special shell characters. Or, worse, it <em>will</em> work, but not the way you want it to (e.g., if <code>grepstring</code> is <code>$(rm -rf /)</code>.</p>
<p>You can try to write code to sanitize, and then properly quote, all of your strings, but it's a fool's errand. The simple solution is to just not use the shell for anything but the simplest cases (like a literal shell pipeline string). The <code>subprocess</code> docs have a whole section on replacing older functions and shell functions, which includes <a href="http://docs.python.org/3/library/subprocess.html#replacing-shell-pipeline" rel="nofollow">Replacing shell pipeline</a>.</p>
<p>So:</p>
<pre><code>grepstring="mystring"
p0 = Popen(['ls', '-l'], stdout=PIPE)
p = Popen(['grep', grepstring], stdin=p0.stdout, stdout=PIPE, stderr=PIPE)
p0.stdout.close()
</code></pre>
<p>Now, you've got a <code>p</code> that acts the same as in your original example, except that <code>grepstring</code> is just a normal argument to <code>Popen</code>, not a string that you have to quote and sanitize and cram into a shell string.</p>
<p>If you're doing a lot of this, you can wrap this up pretty easily, or use any of the 69105 libraries on PyPI that do that for you (ranging anywhere from libraries that keep it simple to those that use clever tricks to make your Python pipelines look like bash).</p>
</div>
<div class="post-text" itemprop="text">
<p>Use string interpolation, like <a href="http://docs.python.org/2/library/stdtypes.html#str.format"><code>str.format()</code></a>:</p>
<pre><code>subprocess.Popen("ls -l | grep {}".format(grepstring), ...)
</code></pre>
<p>But do heed the <a href="http://docs.python.org/2/library/subprocess.html#frequently-used-arguments">warnings on the <code>subprocess</code> documentation</a> about executing untrusted commands in your shell.</p>
</div>
<span class="comment-copy">As a side note, you're really better off not using the shell when you can avoid it—and you can easily avoid it here, as <a href="http://docs.python.org/3/library/subprocess.html#replacing-shell-pipeline" rel="nofollow noreferrer">Replacing shell pipeline</a> in the docs shows. That's the only good way to avoid someone feeding untrusted commands into your shell pipeline.</span>
