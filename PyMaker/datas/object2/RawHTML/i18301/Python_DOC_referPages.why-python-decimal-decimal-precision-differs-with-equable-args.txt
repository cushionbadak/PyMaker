<div class="post-text" itemprop="text">
<p>Here is my input:</p>
<pre><code>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; Decimal('114.3')
Decimal('114.3')
&gt;&gt;&gt; Decimal(114.3)
Decimal('114.2999999999999971578290569595992565155029296875')
</code></pre>
<p>I thought those two instances of Decimal have to be equal but Decimal with float arg seems to loose precision. Why is this? My python version is 2.7.3. Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>The second line is giving you the exact decimal value of the binary floating-point number which approximates 114.3.  This is almost all about binary floating point, not much about Decimal.  See <a href="http://docs.python.org/2/tutorial/floatingpoint.html" rel="nofollow">the docs</a> for details.</p>
<p>Later:  if using Python 3, see <a href="http://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow">these docs</a> instead.  Same basic thing, but Python 3 has more tools to help you explore cases "like this".</p>
</div>
<div class="post-text" itemprop="text">
<p>When you do <code>Decimal(114.3)</code>, you are creating a regular float object and then passing it to Decimal.  The accuracy is lost due to binary floating-point imprecision when the float 114.3 is created, before Decimal ever gets to see it.  There's no way to get that accuracy back.  That's why Decimal accepts string representations as input, so it can see what you actually typed and use the right level of precision.</p>
</div>
<span class="comment-copy">The <i>level</i> of precision doesn't have anything to do with it.</span>
