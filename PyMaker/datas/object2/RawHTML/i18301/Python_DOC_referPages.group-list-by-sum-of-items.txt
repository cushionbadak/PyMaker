<div class="post-text" itemprop="text">
<p>I'm looking for an effective way to group a list of integers into a list of lists, where the sum of the original items doesn't exceed a given number.</p>
<p>Please consider this list of integers:</p>
<pre><code>[1, 1, 1, 1, 2, 2, 1, 3, 1, 1, 2]
</code></pre>
<p>Which should be grouped so that the sum of the items never exceeds 3:</p>
<pre><code>[[1, 1, 1], [1, 2], [2, 1], [3], [1, 1], [2]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def group(lst, limit):

    lim = 0
    grp = []

    for x in lst:
        if x + lim &gt; limit:
            yield grp
            grp = []
            lim = 0

        grp.append(x)
        lim += x

    yield grp

print list(group([1, 1, 1, 1, 2, 2, 1, 3, 1, 1, 2], 3))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="http://docs.python.org/2/library/itertools.html#itertools.groupby" rel="nofollow"><code>itertools.groupby</code></a>:</p>
<pre><code>import itertools

def sumkey(n):
    sc = [0, 0] # sum, count =&gt; group by
    def keyfunc(x):
        sc[0] += x
        if sc[0] &gt; n:
            sc[1] += 1
            sc[0] = x
        return sc[1]
    return keyfunc

xs = [1, 1, 1, 1, 2, 2, 1, 3, 1, 1, 2]
print([list(grp) for _, grp in itertools.groupby(xs, key=sumkey(3))])
</code></pre>
<p>In Python 3, <code>sumkey</code> could be written as following using <a href="http://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement" rel="nofollow"><code>nonlocal</code></a>:</p>
<pre><code>def sumkey(n):
    sum_, count = 0, 0
    def keyfunc(x):
        nonlocal sum_, count
        sum_ += x
        if sum_ &gt; n:
            count += 1
            sum_ = x
        return count
    return keyfunc
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not the most clever solution, but clean and simple enough:</p>
<pre><code>def makeList(inList, n):
    aList = []
    while len(inList) &gt; 0 and sum(aList) + inList[0] &lt;= n :
        aList.append(inList.pop(0))

    return aList

def groupLists(inList, n, outList = []):
    if not n:
        raise ValueError("Please enter a positive integer")     
    while len(inList):
        outList.append(makeList(inList, n))
    return outList

print groupLists([1,1,1,1,2,2,1,3,1,1,2], 3)
</code></pre>
</div>
<span class="comment-copy">Algorithmically, that sounds straightforward. Just keeping a counter to do cumulative sums and resetting it when you hit &gt;= 3 should do it, there won't be any faster way. I am pretty sure there is no 'standard' way to do it in python, if that is what you are looking for.</span>
<span class="comment-copy">Oh, you mean the <a href="http://en.wikipedia.org/wiki/Bin_packing_problem" rel="nofollow noreferrer">bin-packing problem</a></span>
<span class="comment-copy">My first approach was a recursive function. But it felt overly complicated. Jochen Ritzel's solution which uses the yield statement has the effective beauty i was looking for. :)</span>
<span class="comment-copy">@msw Interesting, that pretty much describes it. I had a feeling there must be a general term for this problem, but didn't know how it was called.</span>
