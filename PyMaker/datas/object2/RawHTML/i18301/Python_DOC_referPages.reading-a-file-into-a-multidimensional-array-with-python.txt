<div class="post-text" itemprop="text">
<p>If I have a text file like this:</p>
<pre><code>Hello World
How are you?
Bye World
</code></pre>
<p>How would I read it into a multidimensional array like this:</p>
<pre><code>[["Hello", "World"],
 ["How", "are", "you?"],
 ["Bye" "World"]]
</code></pre>
<p>I have tried:</p>
<pre><code>textFile = open("textFile.txt")
lines = textFile.readlines()
for line in lines:
    line = lines.split(" ")
</code></pre>
<p>But it just returns:</p>
<pre><code>["Hello World\n", "How are you?\n", "Bye World"]
</code></pre>
<p>How do I read the file into a multidimensional array?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a list comprehension and <code>str.split</code>:</p>
<pre><code>with open("textFile.txt") as textFile:
    lines = [line.split() for line in textFile]
</code></pre>
<p><strong>Demo:</strong></p>
<pre><code>&gt;&gt;&gt; with open("textFile.txt") as textFile:
        lines = [line.split() for line in textFile]
...     
&gt;&gt;&gt; lines
[['Hello', 'World'], ['How', 'are', 'you?'], ['Bye', 'World']]
</code></pre>
<p><a href="http://docs.python.org/2/tutorial/inputoutput.html#reading-and-writing-files" rel="noreferrer"><code>with</code> statement</a>:</p>
<blockquote>
<p>It is good practice to use the <code>with</code> keyword when dealing with file
  objects. This has the advantage that the file is properly closed after
  its suite finishes, even if an exception is raised on the way. It is
  also much shorter than writing equivalent try-finally blocks.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.python.org/2/library/functions.html#map" rel="nofollow"><code>map</code></a> with <em>the unbound method</em> <a href="http://docs.python.org/2/library/stdtypes.html#str.split" rel="nofollow"><code>str.split</code></a>:</p>
<pre><code>&gt;&gt;&gt; map(str.split, open('testFile.txt'))
[['Hello', 'World'], ['How', 'are', 'you?'], ['Bye', 'World']]
</code></pre>
<p>In Python 3.x, you have to use <code>list(map(str.split, ...))</code> to get a list because <a href="http://docs.python.org/3/library/functions.html#map" rel="nofollow"><code>map</code></a> in Python 3.x return an iterator instead of a list.</p>
</div>
<div class="post-text" itemprop="text">
<p>Also don't forget to use <code>strip</code> to remove the <code>\n</code>:</p>
<pre><code>myArray = []
textFile = open("textFile.txt")
lines = textFile.readlines()
for line in lines:
    myArray.append(line.split(" "))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Adding to the accepted answer:</p>
<pre><code>with open("textFile.txt") as textFile:
    lines = [line.strip().split() for line in textFile]
</code></pre>
<p>This will remove '\n' if it is appended to the end of each line.</p>
</div>
<div class="post-text" itemprop="text">
<p>A good answer would be :</p>
<pre><code>def read_text(path):
    with open(path, 'r') as file:
        line_array = file.read().splitlines()
        cell_array = []
        for line in line_array:
            cell_array.append(line.split())
        print(cell_array)
</code></pre>
<p>Which is optimized for readability.</p>
<p>But python syntax let's us use less code:</p>
<pre><code>def read_text(path):
    with open(path, 'r') as file:
        line_array = file.read().splitlines()
        cell_array = [line.split() for line in line_array]
        print(cell_array)
</code></pre>
<p><strong>And also python let's us do it only in one line!!</strong></p>
<pre><code>def read_text(path):
    print([[item for item in line.split()] for line in open(path)])
</code></pre>
</div>
<span class="comment-copy"><code>lines = map(str.split, open('testFile.txt'))</code></span>
<span class="comment-copy">@falsetru interesting. it is fastest I think. Post an answer.</span>
<span class="comment-copy">Does he need <code>strip()</code> or it will work without this?</span>
<span class="comment-copy">@GrijeshChauhan <code>str.split()</code> with no arguments takes care of all type of whitespace characters.</span>
<span class="comment-copy">Is it should be <code>map(lambda line: line.split, open('testFile.txt'))</code>, when I do <code>str.splite</code> it says str not object.</span>
<span class="comment-copy">@GrijeshChauhan, You don't need <code>lambda</code>, because <code>str.split</code> is unbound method. <code>'a b c'.split()</code> is like <code>str.split('a b c')</code>.</span>
<span class="comment-copy">@GrijeshChauhan, <code>str.splite</code>? Is it a typo? Or, did you overwrite <code>str</code>?</span>
