<div class="post-text" itemprop="text">
<p>Before posting, I have already gone through <a href="https://stackoverflow.com/questions/3097866/python-access-to-first-element-in-dictionary">Access an arbitrary element in a dictionary in Python</a>, butI'm uncertain about this.</p>
<p>I have a long dictionary and I've to get the values of its first and last keys. I can use <code>dict[dict.keys()[0]]</code> and <code>dict[dict.keys()[-1]]</code> to get the first and last elements, but since the key:value pairs are outputted in a random form(as in the positioning of the key:value pairs is random), will the solution provided in this link always work?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use an <a href="http://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="noreferrer"><code>OrderedDict</code></a>, because a normal dictionary doesn't preserve the insertion order of its elements when traversing it. Here's how:</p>
<pre><code># import the right class
from collections import OrderedDict

# create and fill the dictionary
d = OrderedDict()
d['first']  = 1
d['second'] = 2
d['third']  = 3

# retrieve key/value pairs
els = list(d.items()) # explicitly convert to a list, in case it's Python 3.x

# get first inserted element 
els[0]
=&gt; ('first', 1)

# get last inserted element 
els[-1]
=&gt; ('third', 3)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If working with Python 3.6+ you can do a one liner:</p>
<p>First:</p>
<pre><code>list({'fist': 1, 'second': 2, 'last': 3}.items())[0]
=&gt; ('first', 1)
</code></pre>
<p>Last:</p>
<pre><code>list({'fist': 1, 'second': 2, 'third': 3}.items())[-1]
=&gt; ('third', 1)
</code></pre>
<p>This is the case because Python 3.6+ default dictionary preserves insertion order. This is also mentioned in the <a href="https://docs.python.org/3/library/stdtypes.html#dict" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p>Dictionaries preserve insertion order. Note that updating a key does not affect the order. Keys added after deletion are inserted at the end.</p>
</blockquote>
<p>and</p>
<blockquote>
<p>Changed in version 3.7: Dictionary order is guaranteed to be insertion order. This behavior was an implementation detail of CPython from 3.6.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>There is no such thing as "first" or "last" key in dictionary, which does not guarantee any particular ordering. So there is <strong>no possibility</strong> to get "first" or "last" element. You can only create your own wrapper around python dict, which will store the information about "first" and "last" object</p>
<p>Something like</p>
<pre><code>class MyDict:

  def __init__(self):
    self.first=None
    self.last=None
    self.dict={}

  def add( key, value ):
    if self.first==None: self.first=key
    self.last=key
    self.dict[key]=value

  def get( key ):
    return self.dict[key]

  def first():
    return self.dict[ self.first ]

  def last():
    return self.dict[ self.last ]
</code></pre>
<p>Although as it was pointed out in the comment there is already a class <code>OrderedDict</code>: <a href="http://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="nofollow">http://docs.python.org/2/library/collections.html#collections.OrderedDict</a></p>
<blockquote>
<p>Ordered dictionaries are just like regular dictionaries but they remember
  the order that items were inserted. When iterating over an ordered
  dictionary, the items are returned in the order their keys were first
  added.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Python dictionaries are unordered, so "first" and "last" isn't defined.  Instead, you can sort your keys, and then access the element associated with the first and last key in your sorted set.</p>
<p>EDIT:</p>
<p>The OP clarified that by "first" and "last" he meant the order in which keys were added to the dictionary.  <code>collections.OrderedDict</code> should work for this case.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>CPython implementation detail: Keys and values are listed in an arbitrary order which is non-random, varies across Python implementations, and depends on the dictionaryâ€™s history of insertions and deletions. -- <a href="http://docs.python.org/2/library/stdtypes.html#dict" rel="nofollow"><code>dict</code> documentation</a></p>
</blockquote>
<p>However I highly recommend to not rely on order of items in <a href="https://en.wikipedia.org/wiki/Associative_array" rel="nofollow">associative array</a> data structure (dict is one of them) since frequently there is no single obvious way to order keys. For example in python <code>"21" &lt; "3"</code> while <code>21 &gt; 3</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>def dictionarySortingExample(yourDictionary):</p>
<pre><code>#get all the keys and store them to a list
allKeys = yourDictionary.keys()

#sort the list of keys
allKeysSorted = sorted(allKeys)

#retrieve the first and last keys in the list
firstKey = allKeysSorted[0]
lastKey = allKeysSorted[-1]

#retrive the values from the dictionary
firstValue = yourDictionary[firstKey]
lastValue = yourDictionary[lastKey]

print "---Sorted Dictionary---"
print "original dictionary: " + str(yourDictionary)
print "list of all keys: " + str(allKeys)
print "ordered list of all keys: " + str(allKeysSorted)
print "first item in sorted dictionary: " + str(firstKey) + ":" + str(firstValue)
print "last item in sorted dictionary: " + str(lastKey) + ":" + str(lastValue)
</code></pre>
<h1>example dictionary sorting</h1>
<p>sampleDictionary = {4:"four", "Cranberry":2, 3:"three", 2:"two", "Apple":3, 1:"one", "Bananna":1}
dictionarySortingExample(sampleDictionary)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it by using list().    </p>
<pre><code>dir = dict()

dir['Key-3'] = 'Value-3'    # Added First Item
dir['Key-2'] = 'Value-2'    # Added Second Item
dir['Key-4'] = 'Value-4'    # Added Third Item
dir['Key-1'] = 'Value-1'    # Added Fourth Item

lst = list(dir.items())     # For key &amp; value
# lst = list(dir.keys())    # For keys
# lst = list(dir.values())  # For values

print('First Element:- ', lst[0])
print('Last Element:- ', lst[-1])
</code></pre>
<p>Output:-</p>
<p>First Element:-  ('Key-3', 'Value-3')</p>
<p>Last Element:-  ('Key-1', 'Value-1')</p>
</div>
<span class="comment-copy">As of Python 3.6 OrderDict() is no longer necessary, because the current native dictionary implementation preserves insertion order.</span>
<span class="comment-copy">@juanIsaza Can you provide a proof link please?!</span>
<span class="comment-copy">Is there a way of doing it without having to copy the entire dictionary content to a list? Something like d.front() and d.back() ?</span>
<span class="comment-copy">@TechJS I updated his answer with a link to the documentation and some quotes for proof.</span>
<span class="comment-copy">Not necessarily safe to rely on standard dicts being ordered: <a href="http://gandenberger.org/2018/03/10/ordered-dicts-vs-ordereddict/" rel="nofollow noreferrer">gandenberger.org/2018/03/10/ordered-dicts-vs-ordereddict</a></span>
<span class="comment-copy">Or use <code>collections.OrderedDict</code>, if its definition of "first" and "last" coincides with OP's.</span>
<span class="comment-copy">And how will I create a wrapper? Any demo?</span>
<span class="comment-copy">Thats what I said. Is there any solution for this?</span>
<span class="comment-copy">@user1162512 I've added a suggestion for sorting the keys, but that's the best you can do.</span>
<span class="comment-copy">What if I store my dictionary as <code>dict= {"xyz":294,"a":1,"rah":129}</code>. On what basis would I sort the keys in order to get the access of xyz and rah.</span>
<span class="comment-copy">PS: I dont want to search using dict["xyz"]</span>
<span class="comment-copy">@user1162512: the second you write <code>{"xyz":294,"a":1,"rah":129}</code>, you've lost any information about the order, because that's a dictionary literal.  As mentioned elsewhere in this thread, you can use <code>collections.OrderedDict</code> for an insertion-order variant.</span>
