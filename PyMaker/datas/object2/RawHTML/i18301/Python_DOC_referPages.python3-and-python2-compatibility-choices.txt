<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/9066956/why-is-python-3-not-backwards-compatible">Why is Python 3 not backwards compatible? [closed]</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>I am missing the point why Python3 has commands that are not compatible with Python2.</p>
<p>For example the command </p>
<blockquote>
<p>print 'hello'</p>
</blockquote>
<p>does work in Python2 and not in Python3. Why?</p>
<p>I would expect Python3 to be compatible with Python2, the same as C#4 is compatible with C#2 for example.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I am missing the point why Python3 has commands are not compatible with Python2.</p>
</blockquote>
<p>Because Python 3 is not the same language as Python 2.</p>
<p>Python releases <strong>normally</strong> are mostly backwards compatible with previous versions; Python 2.7 is largely backwards compatible with Python 2.6.</p>
<p>However, from the start, Python 3 (or 3000 as its design project originally codenamed) was specifically <strong>different</strong>. Quoting from <a href="http://www.python.org/dev/peps/pep-3002/" rel="nofollow">one of the design documents</a>:</p>
<blockquote>
<p>Python 3000 will introduce a number of backwards-incompatible changes to Python, mainly to streamline the language and to remove some previous design mistakes.)</p>
</blockquote>
<p>So, Python 3 is not backwards compatible to correct specific errors in the language that could <em>not</em> be corrected with backwards compatible changes. </p>
<p>The use of a statement to write to <code>stdout</code> instead of a function is one of those changes; <code>print</code> has been replaced by a function <code>print()</code>.</p>
<p>Different language and software projects use different standards for what their version numbers mean. Python sticks to the major-minor-micro scheme; releases within the same major number are largely backwards compatible, releases within the same minor number only contain bug fixes. See the <a href="http://docs.python.org/2/faq/general.html#how-does-the-python-version-numbering-scheme-work" rel="nofollow">Python version number FAQ</a>:</p>
<blockquote>
<p>Python versions are numbered <code>A.B.C</code> or <code>A.B</code>. <code>A</code> is the major version number – it is only incremented for really major changes in the language. <code>B</code> is the minor version number, incremented for less earth-shattering changes. <code>C</code> is the micro-level – it is incremented for each bugfix release. See <a href="http://www.python.org/dev/peps/pep-0006/" rel="nofollow">PEP 6</a> for more information about bugfix releases.</p>
</blockquote>
<p>Python is also quite a bit older than C#. Python development started in 1989, and version 2.0 came out in 2000. C# on the other hand has only been around since 2002; perhaps in another decade or so it too will see a backwards-incompatible change.</p>
</div>
<div class="post-text" itemprop="text">
<p>Because in Python 2, <code>print</code> is a statement. But <a href="http://docs.python.org/3/library/functions.html#print" rel="nofollow"><code>print()</code></a> is now a function in Python 3. However, <code>print(...)</code> is still valid syntax in Python 2, and you can also do <code>from __future__ import print_function</code> to get Python 3's print function in Python 2.</p>
<p>Don't expect python 3 to be compatible with 2; <a href="http://docs.python.org/3.0/whatsnew/3.0.html" rel="nofollow">there are many other changes</a>. For example, <code>reduce()</code> was removed, and most built-in functions now return generators that once returned lists (eg <code>map()</code>, <code>zip()</code>, and <code>filter()</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>python3 has a tool named "2to3". This tool will help you to convert python2.x source code to python3.x source code.
Read the manual <a href="http://docs.python.org/2/library/2to3.html" rel="nofollow">http://docs.python.org/2/library/2to3.html</a> </p>
</div>
<span class="comment-copy">Why <i>do</i> you expect Python 3 to be compatible with Python 2? All Python 2.x series releases are compatible, but Python 3.x was a <i>major version change</i>, and is <b>not</b> compatible with 2.x. Within 3.x releases are compatible.</span>
<span class="comment-copy">The major version number changed <b>because</b> the language changed in incompatible ways.</span>
<span class="comment-copy">I expect the compatibility because I come from the C# world and for me it is normal to use C# 2.0 (delegates) features and C# 4.0 (dynamic) in the same program. For example I would like python3 to accept both print 'hello'   and print('hello'), but perhaps this is not compatible with the philosophy of the language (?).</span>
<span class="comment-copy">Always do in Python 3 if you are starting new.</span>
<span class="comment-copy">@SantoshKumar Not necessarily. Not all modules are python 3 compatible</span>
<span class="comment-copy">Also, <a href="http://www.python.org/dev/peps/pep-3105/#rationale" rel="nofollow noreferrer">PEP 3105</a> lists five specific reasons for changing <code>print</code> to a function.</span>
<span class="comment-copy">This does not answer <i>why</i> Python 3 is incompatible with Python 2. :-)</span>
<span class="comment-copy">@MartijnPieters There really is no answer to that. Gotta ask GVR himself :P</span>
<span class="comment-copy">There is an answer to that; I'll post it shortly. The community provided information on that.</span>
<span class="comment-copy">While this is true... it doesn't answer the OPs question of why some changes to Python3 are not backwards compatible...</span>
