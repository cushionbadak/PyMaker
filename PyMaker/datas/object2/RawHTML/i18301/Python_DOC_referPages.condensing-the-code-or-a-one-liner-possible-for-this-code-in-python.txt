<div class="post-text" itemprop="text">
<p>I have the following code and wondering if there is a simpler way to do this.
I am creating a list of tuples that holds letters from a string and the corresponding number from a list. here it is</p>
<pre><code>s="hello"
lst=[1,2,3,4,5]
res = []
for i in range(len(lst)):
    res.append((s[i],lst[i]))
print res
</code></pre>
<p>The output is here which is correct. I am looking for condensed version if possible</p>
<pre><code>[('h', 1), ('e', 2), ('l', 3), ('l', 4), ('o', 5)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about this:</p>
<pre><code>&gt;&gt;&gt; s = "hello"
&gt;&gt;&gt; lst = [1, 2, 3, 4, 5]
&gt;&gt;&gt; zip(s, lst)
[('h', 1), ('e', 2), ('l', 3), ('l', 4), ('o', 5)]
</code></pre>
<p>Note that here it works since the list and string are of equal length. otherwise, you might have truncations.</p>
<p>EDIT:</p>
<pre><code>&gt;&gt;&gt; s = "hell"
&gt;&gt;&gt; lst = [1, 2, 3, 4, 5]
&gt;&gt;&gt; zip(s, lst)
[('h', 1), ('e', 2), ('l', 3), ('l', 4)]
</code></pre>
<p>you have the last item in <code>lst</code> missed out.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://docs.python.org/2/library/functions.html#zip" rel="nofollow"><code>zip()</code></a> function:</p>
<blockquote>
<p>This function returns a list of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables.</p>
</blockquote>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; s="hello"
&gt;&gt;&gt; lst=[1,2,3,4,5]
&gt;&gt;&gt;
&gt;&gt;&gt; zip(s, lst)
[('h', 1), ('e', 2), ('l', 3), ('l', 4), ('o', 5)]
</code></pre>
<p>Note that, in Python 3.x, <a href="http://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip()</code></a> returns an iterator. You have to wrap the return value in <code>list(zip(s, lst))</code>, to make it a list.</p>
<p>To get an iterator in Python 2.x, use <a href="http://docs.python.org/2/library/itertools.html#itertools.izip" rel="nofollow">itertools.<code>izip()</code></a>. Also, if the length of your sequences are not equal, then you can use <a href="http://docs.python.org/2/library/itertools.html#itertools.izip_longest" rel="nofollow">itertools.<code>izip_longest()</code></a>.</p>
<pre><code>&gt;&gt;&gt; s="hell"  # len(s) &lt; len(lst)
&gt;&gt;&gt; lst=[1,2,3,4,5]
&gt;&gt;&gt;
&gt;&gt;&gt; zip(s, lst)  # Iterates till the length of smallest sequence
[('h', 1), ('e', 2), ('l', 3), ('l', 4)]
&gt;&gt;&gt;
&gt;&gt;&gt; from itertools import izip_longest
&gt;&gt;&gt; list(izip_longest(s, lst, fillvalue='-'))
[('h', 1), ('e', 2), ('l', 3), ('l', 4), ('-', 5)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a snap with <a href="http://docs.python.org/3.3/library/functions.html#zip" rel="nofollow">zip</a>:</p>
<pre><code>&gt;&gt;&gt; s="hello"
&gt;&gt;&gt; lst=[1,2,3,4,5]
&gt;&gt;&gt; zip(s, lst)
[('h', 1), ('e', 2), ('l', 3), ('l', 4), ('o', 5)]
&gt;&gt;&gt;
</code></pre>
<p>Note that I wrote this in Python 2.x.  In Python 3.x, you will need to do this:</p>
<pre><code>&gt;&gt;&gt; s="hello"
&gt;&gt;&gt; lst=[1,2,3,4,5]
&gt;&gt;&gt; zip(s, lst)
&lt;zip object at 0x021C36C0&gt;
&gt;&gt;&gt; list(zip(s, lst))
[('h', 1), ('e', 2), ('l', 3), ('l', 4), ('o', 5)]
&gt;&gt;&gt;
</code></pre>
<p>This is because, as demonstarted, the Python 3.x <code>zip</code> returns a zip object instead of a list like it did in Python 2.x.</p>
</div>
<div class="post-text" itemprop="text">
<p>i don't know if the list is always just monotonic numbers, but if they are, you can either replace it with range(), or use enumerate to make this one line:</p>
<pre><code>s = 'hello'
sd = dict([reversed(x) for x in enumerate(s)])

s = 'hello'
zip(s, xrange(len(s)))
</code></pre>
</div>
<span class="comment-copy">Try : <code>zip(s, lst)</code></span>
<span class="comment-copy">you can also try: <code>map(None, s, list)</code> but to me <code>zip()</code> is more semantic.</span>
<span class="comment-copy">what does truncation means?</span>
<span class="comment-copy">@user2708477 try: <code>zip('abc', [1, 2, 3, 4])</code></span>
<span class="comment-copy">@user2708477: see my edit</span>
<span class="comment-copy">If this is a problem try <code>itertools.zip_longest</code></span>
<span class="comment-copy">btw, <code>[x[::-1] for x in enumerate(s)]</code> is both shorter and usually faster than reversed(), for some reason...</span>
