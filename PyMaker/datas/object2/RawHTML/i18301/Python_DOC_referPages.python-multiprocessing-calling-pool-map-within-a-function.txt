<div class="post-text" itemprop="text">
<p>I am trying to use the <code>mutltiprocessing</code> package to use multiple CPUs within a function. When I run a toy example outside of a function it runs in a quarter of a second with no problems (see below).</p>
<pre><code>from multiprocessing import Pool
import time

start = time.clock()

def f(x):
    return x*x

if __name__ == '__main__':
    with Pool(processes=7) as pool:     
        result = pool.map(f, range(1000))



print(time.clock() - start)
</code></pre>
<p>However, when I adapt the same code into a function (see below), it prints <code>True</code> to indicate that <code>__name__ == '__main__'</code>, but then it runs forever and never returns a result. I am running Python 3.3 on Windows 7.</p>
<pre><code>from multiprocessing import Pool
import time

start = time.clock()

def f(x):
    return x*x

def testfunc(r):
    if __name__ == '__main__':
        print(True)
        with Pool(processes=7) as pool:     
            result = pool.map(f, range(r))

    return result

result = testfunc(1000)
print(time.clock() - start)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are using <code>if __name__ == '__main__'</code> in wrong place.</p>
<pre><code>from multiprocessing import Pool
import time

start = time.clock()

def f(x):
    return x*x

def testfunc(r):
    print(True)
    with Pool(processes=7) as pool:     
        result = pool.map(f, range(r))
    return result

if __name__ == '__main__':
    result = testfunc(1000)
    print(time.clock() - start)
</code></pre>
<p>According to <a href="http://docs.python.org/3/library/multiprocessing.html#multiprocessing-programming" rel="noreferrer"><code>multiprocessing - Programming guidelines</code></a>:</p>
<blockquote>
<p><em>Safe importing of main module</em></p>
<p>Make sure that the main module can be safely imported by a new Python
  interpreter without causing unintended side effects (such a starting a
  new process).</p>
<p>... one should protect the “entry point” of the program by using if
  __name__ == '__main__': as follows:</p>
</blockquote>
</div>
<span class="comment-copy">Try putting the <code>if __name__ == '__main__'</code> block outside the function, around the call to <code>testfunc</code>.</span>
<span class="comment-copy">In all of the three code snippets mentioned (2 above, 1 in answer), the usage of "with" gives an error. It is the <code>AttributeError: __exit__</code>. I cannot even get the first example to run... Am I missing something?</span>
<span class="comment-copy">Have you tested this code? It gives an error saying <code>AttributeError: __exit__</code></span>
<span class="comment-copy">@PavithranIyer, Which version of python are you using? I tested this with Python 3.3 at the time of posting. I think you're using python 2.x. in which <code>multiprocessing.Pool</code> is not a context manager. <a href="http://asciinema.org/a/18325" rel="nofollow noreferrer">asciinema.org/a/18325</a></span>
<span class="comment-copy">@PavithranIyer, If you're using Python 2.x, try following: <a href="http://pastebin.com/hHKbgaSc" rel="nofollow noreferrer">pastebin.com/hHKbgaSc</a> (without using context manager)</span>
