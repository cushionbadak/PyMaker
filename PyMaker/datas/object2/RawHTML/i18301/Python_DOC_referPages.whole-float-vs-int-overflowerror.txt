<div class="post-text" itemprop="text">
<p>Try type this in your Python 3.3.2 IDLE, hopefully I'm not the only one wondering and im willing to understand why this is happening.</p>
<pre><code>&gt;&gt;&gt; n = 331
&gt;&gt;&gt; d = 165.0 # float number
&gt;&gt;&gt; a = 174
&gt;&gt;&gt; 
&gt;&gt;&gt; a**d % n
Traceback (most recent call last):
  File "&lt;pyshell#6&gt;", line 1, in &lt;module&gt;
    a**d % n
OverflowError: (34, 'Result too large')

&gt;&gt;&gt; d = int(d)
&gt;&gt;&gt; a**d % n
330
</code></pre>
<p>How exactly the floats work and why is this happening? Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>A <code>float</code> is an <a href="http://en.wikipedia.org/wiki/Double_precision_floating-point_format" rel="noreferrer">IEEE 754 double-precision floating point number</a>, which means there's a maximum value it can hold (a bit over 10**308).*</p>
<p>An <code>int</code> is an arbitrary-precision integer, which grows as many bytes as are needed to hold any value, so it can't overflow.</p>
<p>This is described in the documentation under <a href="http://docs.python.org/3.3/library/stdtypes.html#typesnumeric" rel="noreferrer">Numeric Types - <code>int</code>, <code>float</code>, <code>complex</code></a>.</p>
<hr/>
<p>* Technically speaking, Python doesn't guarantee that it's an IEEE 754 double; it just says that it's usually a C <code>double</code>, and a C <code>double</code> is usually an IEEE 754 double… To see the actual limits on your platform, try <code>sys.float_info</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your literal question was answered, but this is the answer you actually need ;-)</p>
<pre><code>&gt;&gt;&gt; pow(174, 165, 331)
330
</code></pre>
<p>Three-argument <code>pow()</code> is a <strong>very</strong> much more efficient way to do modular integer exponentiation.  Internally, intermediate results don't get much larger than 331**2, allowing for speedy computation of cases that otherwise wouldn't even fit in your computer's memory:</p>
<pre><code>&gt;&gt;&gt; pow(174, 16500000000000000, 331)
1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can simplify this example like this:</p>
<pre><code>&gt;&gt;&gt; 174 ** 165
4904852668653442061187838611454760487366325533178167907397373456352519588599065423233131397167737319275486886361329161677812258960306827407802115863260150459380820490013634069124303872650922835858611923329022540954288392236014102680789978826970589917040720077612506146107358709021927731368382330643430619926067887419695817233322447181310154127711515923344426608176922624
&gt;&gt;&gt; 174 ** 165.0
Traceback (most recent call last):
  File "&lt;pyshell#2&gt;", line 1, in &lt;module&gt;
    174 ** 165.0
OverflowError: (34, 'Result too large')
</code></pre>
<p>As you can see, it fails when you have a float as the exponent. To understand this, a look into the manual helps:</p>
<blockquote>
<p>Integers have unlimited precision. Floating point numbers are usually implemented using <code>double</code> in C […] (<a href="http://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex" rel="nofollow">source</a>)</p>
</blockquote>
<p>So essentially, you can do whatever you want with integers; but floats are restricted to the standard <a href="http://en.wikipedia.org/wiki/IEEE_floating_point" rel="nofollow">IEEE-754</a> limits.</p>
</div>
<span class="comment-copy">What is your question?</span>
<span class="comment-copy">The largest possible float is about <code>1.7e308</code>. <code>174**165.0</code> is more than <code>1e330</code>.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/3477283/maximum-float-in-python" title="maximum float in python">stackoverflow.com/questions/3477283/maximum-float-in-python</a></span>
<span class="comment-copy">I think the issue here is that Python integers have arbitrary precision, but floating point numbers don't.  So <code>int ** int</code> produces an <code>int</code>, but <code>int ** float</code> produces a <code>float</code>, but the number is too large to fit in a <code>float</code>, as Barmar points out.</span>
<span class="comment-copy">It's worth noting that implementing <code>(x**y)%n</code> by actually computing <code>x**y</code>, then doing the <code>%</code> on it, is a bad idea in general. The intermediate values end up very large, which may mean overflowing your data type, losing precision (a <code>float</code> loses ones digits once you get past 2**53), and/or running much slower. And Python makes it easy to do things right: <a href="http://docs.python.org/3.3/library/functions.html#pow" rel="nofollow noreferrer"><code>pow(x, y, n)</code></a>.</span>
