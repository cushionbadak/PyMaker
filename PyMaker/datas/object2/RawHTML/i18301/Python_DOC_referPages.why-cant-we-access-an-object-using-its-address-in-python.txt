<div class="post-text" itemprop="text">
<p><strong>Background</strong></p>
<p>I came to know recently that this is because the garbage collection would clear the contents of the location anytime, so relying on it would be a bad idea. There could be some other reason too, but I don't know.</p>
<p>I also came to know we could access an object given its location using C, because the in CPython address=id of the object. (I should thank the IRC guys for this.). But I haven't tried it.</p>
<p>I am talking about this address (id):</p>
<pre><code>address = id(object_name)
</code></pre>
<p>or may be this one (if that helps):</p>
<pre><code>hex_address = hex(id(object))
</code></pre>
<p>Anyway, I still think it would have been better if they gave some method that could do that for me. </p>
<p>I wouldn't want to use such a method in practice, but it bothers me that we have an object and something that would give its address, but nothing that does the vice-versa.</p>
<p><strong>Question</strong></p>
<ul>
<li>Why was this decision made?</li>
<li>Can we do this using crazy introspection/hack at the Python level? I have been told we can't do that at Python level, but I just wanted to be sure.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>The simplest answer would be: "because it is not needed, and it is easier to maintain the code without low level access to variables". </p>
<p>A bit more elaborate is that everything you could do with such pointer, you can also do with basic references in python, or <a href="http://docs.python.org/2/library/weakref.html" rel="noreferrer">weakreferences</a> (if you want to refer to some object without forbidding its garbage collection). </p>
<p>regarding "hacking":</p>
<ol>
<li><p>You can iterate through garbage collector and take out the object</p>
<pre><code>import gc

def objects_by_id(id_):
    for obj in gc.get_objects():
        if id(obj) == id_:
            return obj
</code></pre></li>
<li><p>You can use <a href="http://www.egenix.com/products/python/mxBase/mxTools/doc/#_Toc199521822" rel="noreferrer">mxtools</a></p>
<pre><code>mx.Tools.makeref(id_)
</code></pre></li>
<li><p>You can use <a href="http://docs.python.org/2/library/ctypes.html" rel="noreferrer">ctypes</a></p>
<pre><code>ctypes.cast(id_, ctypes.py_object).value
</code></pre></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>As I wrote <a href="https://stackoverflow.com/a/19033560/1763356">elsewhere</a>:</p>
<hr/>
<p><code>id</code> is only defined as a number <em>unique</em> to the element among currently existing elements. Some Python implementations (in fact, all main ones but CPython) do not return the memory address.</p>
<pre><code>%~&gt; pypy
Python 2.7.3 (480845e6b1dd219d0944e30f62b01da378437c6c, Aug 08 2013, 17:02:19)
[PyPy 2.1.0 with GCC 4.8.1 20130725 (prerelease)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
And now for something completely different: ``arguably, everything is a niche''
&gt;&gt;&gt;&gt; a = 1
&gt;&gt;&gt;&gt; b = 2
&gt;&gt;&gt;&gt; c = 3
&gt;&gt;&gt;&gt; id(a)
9L
&gt;&gt;&gt;&gt; id(b)
17L
&gt;&gt;&gt;&gt; id(c)
25L
</code></pre>
<p>So you have to guarantee that it <em>is</em> the memory address. Furthermore, because of this Python provides no <code>id â†’ object</code> mapping, especially as the object that an <code>id</code> maps to can be changed if the original is deleted.</p>
<p>You have to ask why you're holding the <code>id</code>. If it's for space reasons, bear in mind that containers actually hold <em>references</em> to items, so <code>[a, a, a, a, a]</code> actually takes less space than <code>[id(a), id(a), id(a), id(a), id(a)]; a</code>.</p>
<p>You can consider also making a <code>dict</code> of <code>{id: val}</code> for all the relevant items and storing that. This will keep <code>val</code> alive, so you can use <a href="http://docs.python.org/3/library/weakref.html" rel="nofollow noreferrer"><code>weakref</code></a>s to allow the <code>val</code>s to be garbage collected. Remember, <a href="http://docs.python.org/3/library/weakref.html" rel="nofollow noreferrer">use <code>weakref</code> if you want a <code>weakref</code></a>.</p>
<hr/>
<p>So basically it's because there's no reliable solution that's platform-independant.</p>
<blockquote>
<p>it bothers me that we have an object and something that would give its address</p>
</blockquote>
<p>Then just remember that we <em>do not</em>. CPython only optimises <code>id</code> under the (correct) assumption that the address is unique. You should never treat is <em>as</em> an address because it's not defined to be.</p>
<hr/>
<blockquote>
<p>Why was this decision made?</p>
</blockquote>
<p>Because if we were to access things from their <code>id</code> we'd be able to do all sorts of stupid stuff like accessing uninitialised stuff. It also prevents interpreters from optimising things by moving addresses around (JIT compilers like PyPy could not exist as easily if items had to have memory addresses). Furthermore, there is no guarantee that the item is either alive or even the same item at any point.</p>
<p>When references take less space than an integer (which is a reference + an numeric object) there is no point just not using a reference(or a <code>weakref</code> if preferred), which will always do the right thing.</p>
</div>
<span class="comment-copy">Can you provide a scenario where this is needed?</span>
<span class="comment-copy"><code>id()</code> might give you the address in some Python interpreters, but that's an <a href="http://docs.python.org/2/library/functions.html#id" rel="nofollow noreferrer">implementation detail</a>.</span>
<span class="comment-copy">What's an address? &lt;/s&gt; I've written an identity hash table for Python in C, but even I can afford to forget these implementation details 99% the time I'm working with Python. You're doing something wrong (or very advanced and hacky) if you even have the concept of pointers in your mind while writing Python.</span>
<span class="comment-copy">@Mark: Almost every where I could be having a need for this, I have an alternative way to access the object itself. I was using Django messages and I wanted to know what an object like this would look like <code>{'messages': &lt;django.contrib.messages.storage.fallback.FallbackStorage object at 0x102d08150&gt;}</code>. A quick search and having a hex value like that indicated that this would be the location of that obect. So, I thought of accessing this object from <code>./manage.py shell</code> using that location (why else would they give it to me?), and then I found out I couldn't.</span>
<span class="comment-copy">We're supposed to use <code>id()</code> for identity checks. Python doesn't want you to deal with memory addresses.</span>
<span class="comment-copy">Wow... that was a really good answer!   Thank you very much! :)</span>
<span class="comment-copy">There is <a href="https://mg.pov.lt/objgraph/extra-info.html" rel="nofollow noreferrer"><code>objgraph.at(id_)</code></a> too.</span>
<span class="comment-copy">Moving objects in memory has nothing to do with JIT compilers. It's the concern of the garbage collector, and if CPython wasn't eternally wedded to its C API it too could move objects in memory. PyPy has features besides JIT compilation ;-)</span>
<span class="comment-copy">I was under the opinion that when JIT-compiled objects get a lower-level representation, which would naturally have a different memory address. Keeping track of said address would add a lot of burden for little reward. Fair point either way.</span>
<span class="comment-copy">Objects don't get JIT compiled. Code gets JIT compiled. If the compiled code allocates some object that it can prove doesn't escape the trace (e.g. a temporary integer), it avoids allocating it all. And sometimes parts of an object are not kept up-to-date all the time (virtalizables). But in any case, as soon as the code needs an address, the object <i>is</i> allocated and updated fully (or the optimization is not performed at all). PyPy already handles all sorts of things the JIT compiler can't handle (well). That's the beauty of tracing JIT compilers.</span>
<span class="comment-copy">@Veedrac: Thanks for the answer. :)</span>
