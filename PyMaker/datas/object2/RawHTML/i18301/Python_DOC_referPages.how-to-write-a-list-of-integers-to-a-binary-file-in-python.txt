<div class="post-text" itemprop="text">
<p>I have a list of integers which represent bytes of code. How can I write them to a binary file fast and more efficiently.</p>
<p>I have tried:</p>
<pre><code>with open (output1, "wb") as compdata:
    for row in range(height):
        for data in cobs(delta_rows[row].getByte_List()):
            output_stream.append(Bits(uint=data, length=8))
    compdata.write(output_stream.tobytes())
</code></pre>
<p>and </p>
<pre><code>with open (output1, "wb") as compdata:
    for row in range(height):
        bytelist = cobs(delta_rows[row].getByte_List())
        for byte in bytelist:
            compdata.write(chr(byte))
</code></pre>
<p>both get me a result which I think is correct (I have yet to reverse the process) but both take a long time (6min and 4min respectfully).</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a <a href="http://docs.python.org/2/library/functions.html#bytearray" rel="noreferrer"><code>bytearray()</code> object</a>, write that straight to the output file:</p>
<pre><code>with open (output1, "wb") as compdata:
    for row in range(height):
        bytes = bytearray(cobs(delta_rows[row].getByte_List()))
        compdata.write(bytes)
</code></pre>
<p>A sequence of integers is interpreted by a <code>bytearray()</code> as a sequence of byte values.</p>
<p>In Python 3, you can use a <a href="http://docs.python.org/3/library/functions.html#bytes" rel="noreferrer"><code>bytes()</code> type</a> as well, with the same input; you are not mutating the values after creation, after all.</p>
</div>
<span class="comment-copy">Is this Python 2 or 3?</span>
<span class="comment-copy">Sorry Python 2 (2.7.5 specifically)</span>
<span class="comment-copy">Have you looked at struct.Pack? That allows you to write binary data to strings (and to files). <a href="http://docs.python.org/2/library/struct.html" rel="nofollow noreferrer">docs.python.org/2/library/struct.html</a></span>
<span class="comment-copy">first - only write once per {row, n rows, something} to get better performance. but does the stream.to_bytes() call clear it as well? otherwise, you are in exponential land... ex. you add [1,2,3]. you add [1] to output_stream, then write it. then you append 2, output_stream is now [1,2], and you write that. then you append 3, output_stream is now [1,2,3], and you write that.</span>
<span class="comment-copy">@CorleyBrigman Yeah I had indented it wrong when I wrote it down here on SE. Both segments of code output the exact same data.</span>
<span class="comment-copy">I have tried implementing this solution in my code and it also has a 4min implementation time. Its a good bit of code and is way better than using bitstring for this sort of thing.</span>
<span class="comment-copy">At some point you'll have to figure out how much of that time is used by <code>cobs(delta_rows[row].getByte_List())</code>; the <code>bytesarray()</code> call takes the conversion of the result entirely into C code, so this is probably as fast as it is going to get.</span>
<span class="comment-copy">It takes 0.111 sec to make that call multiplied by 2159 calls = 239 sec or 4min. You were right.</span>
