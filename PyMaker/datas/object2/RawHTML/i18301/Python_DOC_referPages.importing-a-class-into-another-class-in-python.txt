<div class="post-text" itemprop="text">
<p>as I'm still learning python I came up to a problem.</p>
<p>Why does this work:</p>
<pre><code>class SomeOtherClass(object):
    def __init__(self):
        self.number = 10
        print(self.number)

    def increase(self):
        self.number += 1
        print(self.number)

class MyMainClass(object):
    def __init__(self):
        self.otherClass = MyClass()

app = MyMainClass() #Output: 10
app.otherclass.increase() #Output: 11
</code></pre>
<p>but this doesn't:</p>
<pre><code>from tkinter import *

class MyMainClass(object):
    def __init__(self):
        self.tk = Tkinter() # &lt;-- Error: see below.

app = MyMainClass()
app.tk.title("My window")
...
</code></pre>
<p>Both times I include a class, but in the second example it says: </p>
<blockquote>
<p>NameError: global name 'Tkinter' is not defined</p>
</blockquote>
<p>Where's the difference between those examples and how can I solve this, so I'm able to use tkinter in my class?</p>
<p>Thanks for your help.</p>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps you meant <code>Tk()</code>? the <code>tkinter</code> module on Python 3.x does not seem to contain a class <code>Tkinter</code>.</p>
<p>As to the meaning of your question and example... well, the examples are absolutely irrelevant, and the question should simply be "why can't I create an instance of <code>Tkinter</code>" or something.</p>
<p><strong>Python Lesson:</strong> This is also a good example of why it's a bad idea to use star imports (i.e <code>from &lt;module&gt; import *</code>, because <code>*</code> looks like a star). This imports everything from <code>tkinter</code>, but doesn't let you know if something you thought was there actually isn't</p>
<pre><code>from tkinter import *
</code></pre>
<p>whereas this</p>
<pre><code>from tkinter import Tkinter
</code></pre>
<p>would have immediately pointed out that (the class) <code>Tkinter</code> does not exist in <code>tkinter</code>. Another option that some seem to prefer (incl. myself in some cases), is <code>import tkinter</code> followed by <code>tkinter.Tk()</code>, which has the advantage that it's obvious where a class comes from. Futhermore, <a href="http://www.python.org/dev/peps/pep-0008/#imports" rel="nofollow">PEP8</a> also discourages the use of star imports (referring to them as "wildcard imports").</p>
</div>
<span class="comment-copy"><code>What's the difference between those examples</code> What's the similarity? The first example doesn't even using Tkinter. Did you mean to do <code>self.tk = Tk()</code>?</span>
<span class="comment-copy">Your problem is that there is nothing called <code>Tkinter</code> in that module. I would strongly suggest you do a tutorial on object-oriented programming in Python - like <a href="http://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">this</a> one.</span>
<span class="comment-copy">@EverydayLearning: Because there's no class called <code>Tkinter</code>. The fact that it's in another class has nothing to do with it (for instance, try putting the line <code>tk = Tk()</code> outside the class). Where did you get the line <code>self.tk = Tkinter()</code>?</span>
<span class="comment-copy">I made this line by myself, but I don't know why I did it this way. I used Tkinter often before this, but didn't see this error. Thanks.</span>
<span class="comment-copy">Help a beginner, don't downvote cause the question was way too easy to answer</span>
<span class="comment-copy">Wow, thank you. I almost spent the whole last day to find a solutions, and this was my problem.. I could beat myself :x</span>
<span class="comment-copy">You know... <i>"wow, thank you"</i> directly translates to StackOverflow'ese as <i>"Accept"</i> ;)</span>
<span class="comment-copy">Although in the specific case of tkinter, I think star import is less frowned upon than with other modules.</span>
<span class="comment-copy">It's typical of the documentation of various libraries to start out by guiding you to use <code>from &lt;libraryx&gt; import *</code>, but it doesn't make it any less frowned uponâ€”because the reasons why it's bad are still there, as you've just demonstrated. In other words, there is <i>generally</i> no reason why something would be less frowned upon just because it's using a library.</span>
<span class="comment-copy"><code>import tkinter as tk</code>. Then at least you don't have to type all of <code>tkinter</code> before everything.</span>
