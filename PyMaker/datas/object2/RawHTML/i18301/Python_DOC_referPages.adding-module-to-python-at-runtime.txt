<div class="post-text" itemprop="text">
<p>I have a python script that does this at the begining of the script:</p>
<pre><code>def initialize(module_name):
    return importlib.import_module(module_name) # import module from string
</code></pre>
<p>I want to write a test that 'mocks' out the module name like so:</p>
<pre><code>def test():
    # assemble module at run time
    module_obj = {'name': Object, 'another_name': AnotherObject}

    # inject to the "import system"
    inject_mock_module('mymodule', module_obj)

    # assert that the import went correctly
    assert my_module_mock == initialize('mymodule')
</code></pre>
<p>How do I do this? First, specifically, how to I create <code>module_obj</code> and how do I define <code>inject_mock_module</code>? This needs to work in both 2.7+ and 3.3+</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://pypi.python.org/pypi/mock" rel="nofollow"><code>mock</code> library</a> to mock out the <code>import_module()</code> function. As of Python 3.3, you can import that module as <a href="http://docs.python.org/3/library/unittest.mock.html" rel="nofollow"><code>unittest.mock</code></a>:</p>
<pre><code>try:
    # Python 3.3+
    from unittest.mock import patch
except ImportError:
    # External dependency
    from mock import patch

def test():
    module_obj = {'name': Object, 'another_name': AnotherObject}

    with patch('importlib.import_module', module_obj.get):
        assert initialize('name') is module_obj['name']
</code></pre>
</div>
<span class="comment-copy">Are you using Python 2 or 3?</span>
