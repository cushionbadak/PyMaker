<div class="post-text" itemprop="text">
<p>According to <a href="http://c2.com/cgi/wiki?TimPeters">Tim Peters</a>, "There should be one-- and preferably only one --obvious way to do it." In Python, there appears to be three ways to print information:</p>
<pre><code>print('Hello World', end='')
sys.stdout.write('Hello World')
os.write(1, b'Hello World')
</code></pre>
<p><strong>Question:</strong> Are there best-practice policies that state when each of these three different methods of printing should be used in a program?</p>
</div>
<div class="post-text" itemprop="text">
<p>Note that the statement of Tim is perfectly correct: there <strong>is</strong> only one obvious way to do it: <a href="https://docs.python.org/3.4/library/functions.html#print" rel="noreferrer"><code>print()</code></a>.
The other two possibilities that you mention have different goals.</p>
<p>If we want to summarize the goals of the three alternatives:</p>
<ul>
<li><p><code>print</code> is the high-level function that allow you to write something to stdout(or an other file). It provides a simple and readable API, with some fancy options about how the single items are separated, or whether you want to add or not a terminator etc. This is what you want to do most of the time.</p></li>
<li><p><code>sys.stdout.write</code> is just a method of the file objects. So the real point of <code>sys.stdout</code> is that you can pass it around as if it were any other file. This is useful when you have to deal with a function that is expecting a file and you want it to print the text directly on stdout.</p>
<p>In other words you shouldn't use <code>sys.stdout.write</code> at all. You just pass around <code>sys.stdout</code> to code that expects a file.</p>
<p>Note: in python2 there were some situations where using the <code>print</code> <em>statement</em> produced worse code than calling <code>sys.stdout.write</code>. However the <code>print</code> function allows you to define the separator and terminator and thus avoids almost all these corner cases.</p></li>
<li><p><code>os.write</code> is a <em>low-level</em> call to write to a file. You must manually encode the contents and you also have to pass the file descriptor explicitly. This is meant to handle only <em>low level</em> code that, for some reason, cannot be implemented on top of the higher-level interfaces. You almost never want to call this directly, because it's not required and has a worse API than the rest.</p></li>
</ul>
<p>Note that if you have code that should write down things on a file, it's better to do:</p>
<pre><code>my_file.write(a)
# ...
my_file.write(b)
# ...
my_file.write(c)
</code></pre>
<p>Than:</p>
<pre><code>print(a, file=my_file)
# ...
print(b, file=my_file)
# ...
print(c, file=my_file)
</code></pre>
<p>Because it's more DRY. Using <code>print</code> you have to repeat <code>file=</code> everytime. This is fine if you have to write only in <em>one</em> place of the code, but if you have 5/6 different writes is much easier to simply call the <code>write</code> method directly.</p>
</div>
<div class="post-text" itemprop="text">
<p>To me print is the right way to print to stdout, but : </p>
<p>There is a good reason why sys.stdout.write exists - Imagine a class which generates some text output, and you want to make it write to either stdout, and file on disk, or a string. Ideally the class really shouldn't care what output type it is writing to. The class can simple be given a file object, and so long as that object supports the write method, the class can use the write method to output the text.</p>
</div>
<div class="post-text" itemprop="text">
<p>Two of these methods require importing entire modules. Based on this alone, print() is the best standard use option.</p>
<p>sys.stdout is useful whenever stdout may change. This gives quite a bit of power for stream handling.</p>
<p>os.write is useful for os specific writing tasks (non blocking writes for instance)</p>
<p>This question has been asked a number of times on this site for sys.stdout vs. print:</p>
<p><a href="https://stackoverflow.com/questions/3263672/python-the-difference-between-sys-stdout-write-and-print">Python - The difference between sys.stdout.write and print</a></p>
<p><a href="https://stackoverflow.com/questions/12119060/print-vs-sys-stdout-write-which-and-why">print() vs sys.stdout.write(): which and why?</a></p>
<p>One example for using os.write (non blocking file writes demonstrated in the question below). The function may only be useful on some os's but it still must remain portable even when certain os's don't support different/special behaviors.</p>
<p><a href="https://stackoverflow.com/questions/9259380/how-to-write-to-a-file-using-non-blocking-io">How to write to a file using non blocking IO?</a></p>
</div>
<span class="comment-copy">Do you want to use it for logging? Then I would suggest the logging module: <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">docs.python.org/3/library/logging.html</a></span>
<span class="comment-copy">I do think <code>print</code> is the only obvious way (say you don't know python and you come from perl, what might you try?). This can be said for magic methods as well.</span>
<span class="comment-copy">@NoctisSkytower correct, you should also list 'print "some text"'. Note the missing brackets.</span>
<span class="comment-copy">@RvdK There is an effort to switch to print() vs. print. print is just a relic of older python that we are stuck with in python 2.x</span>
