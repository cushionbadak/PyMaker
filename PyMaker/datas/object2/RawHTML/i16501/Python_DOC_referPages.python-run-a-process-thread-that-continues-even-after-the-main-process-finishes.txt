<div class="post-text" itemprop="text">
<p>I want to run a process/thread that continuously runs even after the main process is finished or is killed. How should I go about this?</p>
<p>Edit: If it makes a difference, the point of the child process is to monitor the status of an external process. When that process is done, the child process needs to kick off another process to the same external system. It needs to do so even after the main program finishes so that the user can continue working elsewhere while new jobs are being sent to the system as needed.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you simply want to continue execution in a child process, and exit from the current process, you can simply use <a href="https://docs.python.org/2/library/os.html#os.fork" rel="nofollow"><code>os.fork</code></a>:</p>
<pre><code>import os
import time


print('Before forking.')

if not os.fork():
    for i in range(5):
        print("Forkety fork, I'm forked!")
        time.sleep(1)
</code></pre>
<p>Calling <code>os.fork()</code> will basically duplicate your process, but for the parent process, <code>os.fork()</code> will return the PID of the child process, while for the child process, it will return <code>0</code>.</p>
<p><code>if not os.fork()</code> will simply not enter the <code>if</code> branch in the parent process, since the result of calling <code>os.fork()</code> is non-zero (i.e. the PID of the child process).</p>
<p>In the child process, <code>os.fork()</code> returned zero, hence the child process enters the <code>if</code> branch.</p>
<hr/>
<p>If you want to run any executable (not necessarily Python code), your best choice is <a href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen" rel="nofollow"><code>subprocess.Popen</code></a>, as mentioned by @khachik.</p>
</div>
<span class="comment-copy">You want the child process to <a href="https://docs.python.org/3/library/os.html#os.fork" rel="nofollow noreferrer"><b>fork</b></a>. You can only do that with a process, not with a thread â€” all threads live within the same process.</span>
<span class="comment-copy">Will the forked child process be able to print to stdout?</span>
<span class="comment-copy"><code>subprocess.Popen</code> also works. The child process shares the parent's terminal.</span>
<span class="comment-copy">Why this question should be closed? The only argument could be that the author hasn't tried anything (or not posted here), but it is not an argument, because there are huge amount of signle-line "How do I ..." questions on this site.</span>
<span class="comment-copy">khachik, I was just trying to figure out the best way to go about it because I tried multiprocessing, subprocess,and threading but none worked the way I needed them to. I didn't know about forking which appears to be working correctly.</span>
