<div class="post-text" itemprop="text">
<p>I was working with the inspect module and noticed that it returned unsized objects from time to time. For example <code>inspect.getargspec(func)[3]</code> which returns the tuple? of the default values of the functions arguments. When you use <code>len()</code> on the previous snippet you get a cannot get the length of an unsized object.</p>
<p>Why is this an unsized object?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; def f(x, y=1, z=2, *args, **kwargs): pass
&gt;&gt;&gt; getargspec(f)
ArgSpec(args=['x', 'y', 'z'], varargs='args', keywords='kwargs', defaults=(1, 2))

&gt;&gt;&gt; def g(x, y, z): pass
&gt;&gt;&gt; getargspec(g)
ArgSpec(args=['x', 'y', 'z'], varargs=None, keywords=None, defaults=None)
</code></pre>
<p>If there are no defaults then the defaults value is None rather than an empty tuple.</p>
<p>If you need to test for presence of default arguments then rather than using <code>len</code>, just use the object itself.</p>
<p>eg.</p>
<pre><code>if getargspec(g)[3]:
    ...
</code></pre>
<p>or better yet:</p>
<pre><code>if getargspec(g).defaults:
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you do</p>
<pre><code>import inspect
def f(a,b,c,*d): pass

a = inspect.getargspec(f)
</code></pre>
<p>you get a result which is like</p>
<pre><code>ArgSpec(args=['a', 'b', 'c'], varargs='d', keywords=None, defaults=None)
</code></pre>
<p>What does that man? It is an object which obviouusly has a length (<code>len(a) = 4</code>), and whose <code>[3]</code> I can get:</p>
<pre><code>&gt;&gt;&gt; a[3]
&gt;&gt;&gt;
</code></pre>
<p>Huh? What's that?</p>
<pre><code>&gt;&gt;&gt; repr(a[3])
'None'
&gt;&gt;&gt;
</code></pre>
<p>Ah, it is <code>None</code>. Ok.</p>
<p>Let's have another look:</p>
<pre><code>&gt;&gt;&gt; list(a)
[['a', 'b', 'c'], 'd', None, None]
</code></pre>
<p>It seems a <code>ArgSpec</code> object is something like a namedtuple; its <code>[3]</code> is the <code>defaults</code> value, which is just <code>None</code>.</p>
<p>It completely depends on what you try to do with that object.</p>
</div>
<span class="comment-copy">It should also be noted that <a href="https://docs.python.org/3/library/inspect.html#inspect.getargspec" rel="nofollow noreferrer"><code>inspect.getargspec</code></a> is deprecated as of Python 3.0.  New code should use <a href="https://docs.python.org/3/library/inspect.html#inspect.getfullargspec" rel="nofollow noreferrer"><code>inspect.getfullargspec</code></a>.</span>
