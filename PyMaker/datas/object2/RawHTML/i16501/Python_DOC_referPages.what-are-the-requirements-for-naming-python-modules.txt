<div class="post-text" itemprop="text">
<p>I've been going through <a href="http://learnpythonthehardway.org/book/" rel="nofollow">Learn Python The Hard Way</a> as a sort of refresher. Instead of naming each example ex#.py (where # is the number of the exercise), however, I've just been calling them #.py. This worked fine until I got to <a href="http://learnpythonthehardway.org/book/ex25.html" rel="nofollow">Exercise 25</a>, which requires you to import a module you just created through the interpreter. When I try this the following happens:</p>
<pre><code>&gt;&gt;&gt; import 25
  File "&lt;stdin&gt;", line 1
    import 25
            ^

SyntaxError: invalid syntax
</code></pre>
<p>I tried renaming the file to ex25.py and it then worked as expected (&gt;&gt;&gt; import ex25). What I'm wondering is what are the naming requirements for python modules? I had a look at the official documentation <a href="https://docs.python.org/2/tutorial/modules.html" rel="nofollow">here</a> but didn't see it mention any restrictions.</p>
<p>Edit: All three answers by iCodez, Pavel and BrenBarn give good resources and help answer different aspects of this question. I ended up picking iCodez's answer as the correct one simply because it was the first answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>Modules that you import with the <a href="https://docs.python.org/3/reference/simple_stmts.html#the-import-statement" rel="nofollow"><code>import</code> statement</a> must follow the same naming rules set for variable names (identifiers).  Specifically, they must start with either a letter<sup>1</sup> or an underscore and then be composed entirely of letters, digits<sup>2</sup>, and/or underscores.</p>
<p>You may also be interested in what <a href="http://legacy.python.org/dev/peps/pep-0008/#package-and-module-names" rel="nofollow">PEP 8</a>, the official style-guide for Python code, has to say about module names:</p>
<blockquote>
<p>Modules should have short, all-lowercase names. Underscores can be
  used in the module name if it improves readability. Python packages
  should also have short, all-lowercase names, although the use of
  underscores is discouraged.</p>
</blockquote>
<hr/>
<p><sub><sup>1</sup>  Letters are the ASCII characters <code>A-Z</code> and <code>a-z</code>.</sub><br/>
<sub><sup>2</sup>  Digits are the ASCII characters <code>0-9</code>.</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>The explicit rules for what is allowed to be a valid identifier (variable, module name etc.) can be found here: <a href="https://docs.python.org/dev/reference/lexical_analysis.html#identifiers" rel="nofollow">https://docs.python.org/dev/reference/lexical_analysis.html#identifiers</a></p>
<p>In your case, this is the relevant sentence:</p>
<blockquote>
<p>Within the ASCII range (U+0001..U+007F), the valid characters for identifiers are the same as in Python 2.x: the uppercase and lowercase letters A through Z, the underscore _ and, <strong>except for the first character</strong>, the digits 0 through 9.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Strictly speaking, you can name a Python file anything you want.  However, in order to import it using the <code>import</code> statement, the filename needs to be a valid Python identifier --- something you could use as a variable name.  That means it must use only alphanumerics and underscores, and not start with a digit.  This is because the <a href="https://docs.python.org/2.7/reference/simple_stmts.html#the-import-statement" rel="nofollow">grammar</a> of the <code>import</code> statement requires the module name to be an identifier.</p>
<p>This is why you didn't see the problem until you got to an exercise that requires importing.  You can run a Python script with a numeric name from the command line with <code>python 123.py</code>, but you won't be able to import that module.</p>
</div>
