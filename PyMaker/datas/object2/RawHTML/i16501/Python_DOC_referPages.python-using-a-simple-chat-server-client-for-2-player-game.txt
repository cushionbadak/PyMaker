<div class="post-text" itemprop="text">
<p>I've written a python chess game that I'd like to make playable by two people on two different computers. Without using external libraries, my first thought was to try to adapt code for a simple chat server/client to allow the game to communicate moves to both users. From my research, it seems the following code is pretty standard:</p>
<pre><code># client
from socket import *
PORT = 8000

s = socket(AF_INET, SOCK_STREAM)
s.connect(('', PORT))

while True:
    msg = raw_input('&gt;&gt; ')
    s.send(msg)
    reply = s.recv(1024)
    if reply:
        print '&lt;&lt; ' + str(reply)

s.close()

#server
from socket    import *

HOST = ''   
PORT = 8000

s = socket(AF_INET, SOCK_STREAM)
s.bind((HOST, PORT))
s.listen(2)

conn, address = s.accept()
while True:
    print 'got a connection'
    data = conn.recv(1024)

    if data:
        print 'we got it'
        conn.sendall(data)
s.close()
</code></pre>
<p>My thinking is that one player (the host who invites the other player to the game), initiates the game and the server. The client then moves, sends the move to the server, and the change is reflected on the UI. </p>
<p>However, the infinite loops above that listen for messages/responses are giving me trouble: clearly, no other code can execute. I'd rather have the connection between client and server be in the background, or even better make use of the infinite loop already used by the UI to listen to events.</p>
<p><strong>My question</strong>: is it possible to use Tkinter's <code>mainloop</code> to act as an infinite loop to listen for incoming data and replies? Or, would it be better to run the server and the client as subprocesses. I guess what I'd really like is to treat the listening/receiving for moves as events: when a move is made, a message is sent, and it is "handled" by the client. </p>
<p><strong>Note</strong>: this is the first time I've ever used the socket library -- it would be great if any answers could respect my relative naiveté with the topic.</p>
<p><strong>Edit</strong>: I think what I might need is asynchat, but I would very much appreciate understanding how this code might be adapted. </p>
<p><strong>Final remarks</strong>: gordosac's answer provided some great ideas to search. I ended up finding exactly what I need <a href="http://joyrex.spc.uchicago.edu/bookshelves/python/cookbook/pythoncook-CHP-9-SECT-7.html" rel="nofollow">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at this question on SO:</p>
<p><a href="https://stackoverflow.com/questions/2846653/python-multithreading-for-dummies">How to use threading in Python?</a></p>
<p>You would do something like this for the client:</p>
<pre><code>import threading
import os
import time

# this function meant to be started in a separate thread
get_raw_input_and_send():
    #put while loop here

if __name__ == "__main__":
    t = threading.Thread(target=get_raw_input_and_send)
    t.daemon = True
    t.start()
    while True:
        if not t.isAlive():
            os.sys.exit(-1)
        time.sleep(5)
</code></pre>
<p>Then on the server side do the equivalent but with the while loop from the server code</p>
</div>
<span class="comment-copy">The first thing I looked for when I saw this question was an easy way to make Tkinter listen for events on a particular file handle. Fortunately, Tcl underlying Tk does have such functionality. Unfortunately, it is exposed only as <a href="http://www.tcl.tk/man/tcl8.6/TclLib/CrtFileHdlr.htm" rel="nofollow noreferrer">a C function</a>. You might be able to call it appropriately with <a href="https://docs.python.org/3/library/ctypes.html" rel="nofollow noreferrer"><code>ctypes</code></a>, but I can’t imagine you’ll get very nice code with that approach… Gosh, though, it really seems like there should be an easy way to hook into the loop from Python.</span>
<span class="comment-copy">@icktoofay: That's such a bummer! Thank you, but I think I'm going to try using asyncore and asynchat -- this seems like it might be the way to go.</span>
<span class="comment-copy">Asyncore and asynchat is certainly a good way to go—but the problem arises when you want to change something in the user interface in response to a network event. That needs some sort of synchronization between the Tk event loop and Python. I guess as a stopgap solution you could always use a timer.</span>
<span class="comment-copy">Clarification: asyncore is a great way to learn how server/client code works, but it's not particularly good for real applications.</span>
<span class="comment-copy">The solution used in that resource is perfectly fine. I strongly, recommend that you Google "David Peticolas Twisted" and read/do the first few chapters. It is by far the best introduction to asynchronous programming I have ever seen. If you don't like it, you can punch me in the face. If you learn nothing beyond what a reactor loop is and how to use one, it's worth your time. On the other hand, you might start using Twisted in your applications. Twisted integrates with GUI event loops easily, and makes all this stuff with passing information between threads unnecessary.</span>
<span class="comment-copy">Thank you, but if you look at my comment below, I've tried this and it doesn't work. For example, if you put the while loop code in a separate function <code>receive_thread</code>, and start this thread, you won't execute code below the call to start this thread.</span>
<span class="comment-copy">Hmm I believe what's happening is that your main thread exits (assuming there's no while loop in your main thread to keep it running). What you can do is put a while loop in your main thread so it doesn't exit. See edited answer. Another option would be to join the thread such that the main thread doesn't exit until your spawned thread does.</span>
<span class="comment-copy">I think you want to remove <code>t.daemon = True</code>. This seemed to work for me (I don't quite understand <code>daemon</code>). Try running this main method and you'll see we get the desired behavior: <code>if __name__ == "__main__":     t = Thread(target=receive_thread)     t.start()     while True:         print 'hello'</code></span>
<span class="comment-copy">before I didn't have a main method. I believe this is the problem.</span>
<span class="comment-copy">Setting daemon to true indicates that you want the thread to die if the main thread dies.</span>
