<div class="post-text" itemprop="text">
<p>Following <a href="https://stackoverflow.com/questions/5362771/load-module-from-string-in-python/7548190#7548190">this answer</a>, I am using <code>imp.new_module</code> and <code>exec</code> to dynamically load a module and extract functions from it. However, when I store the module in a local variable, functions from it get broken. Here is an example:</p>
<pre><code>import imp

mod = None
func = None

code = """
a = 42

def func():
    print a
"""

def main():
    #global mod
    global func
    mod = imp.new_module("modulename")
    exec code in mod.__dict__
    func = mod.func

main()
func()
</code></pre>
<p>Executing this with Python 2.7.3 yields <code>None</code>: <a href="http://codepad.org/geYhLJcd" rel="nofollow noreferrer">codepad</a>. After uncommenting <code>global mod</code> line, making <code>mod</code> global, the function works as expected and prints 42: <a href="http://codepad.org/wESS0m2e" rel="nofollow noreferrer">codepad</a>. </p>
<p>What am I missing? Why does the behaviour change when module is stored in a local variable?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>mod</code> module is a local, and not referenced anywhere else. Like all other objects in Python, that means it is cleaned up when <code>main</code> exits. By making it a global instead, a reference to the module object is kept.</p>
<p>When a module is cleaned up, all the globals are set to <code>None</code> (this is done to break reference cycles early, setting to <code>None</code> is an optimisation to prevent excessive rehashing due to dictionary resizing). The <code>func</code> object still has a reference to the module globals dictionary, and thus sees <code>a</code> bound to <code>None</code> now.</p>
<p>The <em>normal</em> procedure of importing a module adds a reference to the module object in <code>sys.modules</code>, keeping the module alive until interpreter shutdown.</p>
<p>(In Python 3.4, globals are no longer rebound to <code>None</code> (in most cases), as per <a href="https://docs.python.org/3/whatsnew/3.4.html#whatsnew-pep-442" rel="nofollow">Safe Object Finalization</a>; see <a href="http://legacy.python.org/dev/peps/pep-0442/" rel="nofollow">PEP 442</a>).</p>
</div>
<span class="comment-copy">From <a href="https://docs.python.org/2/reference/datamodel.html" rel="nofollow noreferrer">docs</a>: <b><i>CPython implementation detail</i></b>: Because of the way CPython clears module dictionaries, the module dictionary will be cleared when the module falls out of scope even if the dictionary still has live references. To avoid this, copy the dictionary or keep the module around while using its dictionary directly.</span>
<span class="comment-copy">I see that it's my fault not to look at the docs more carefully, thank you for a direct link.</span>
