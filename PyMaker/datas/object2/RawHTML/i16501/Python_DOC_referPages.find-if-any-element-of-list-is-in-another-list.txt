<div class="post-text" itemprop="text">
<p>I have a master list, <code>A</code>, and secondary list, <code>B</code>.  <code>A</code> contains all of the elements of <code>B</code> and also contains additional elements.  I want to identify the values of <code>A</code> that <em>do not</em> occur in <code>B</code>.  For example:</p>
<pre><code>A = ['two', 'roads', 'diverged', 'in', 'a']
B = ['roads', 'in']
</code></pre>
<p>What I want is:</p>
<pre><code>['two', 'diverged', 'a']
</code></pre>
<p>If <code>B</code> contained only one element, say <code>roads</code>, I could do something to the effect of:</p>
<pre><code>for i in range(0, len(A)):
    if 'roads' not in A[i]:
        print A[i]
</code></pre>
<p>But I am stuck if B has multiple elements, which it does.  I found the <code>any()</code> function, but am not sure why this wouldn't work:</p>
<pre><code>for i in range(0, len(A)):
    if any(B) not in A[i]:
        print A[i]
</code></pre>
<p>(I looked at some other answers, but couldn't find what I am looking for.  This has possibly been asked elsewhere.  If so, forgive me for asking it twice.)</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>[item for item in a if item not in b]
</code></pre>
<p>You could also use sets by doing <code>set(a) - set(b)</code>, but I believe this will be slightly slower.  Also, using sets also remove duplicate values in the result, which may or may not be what you want.  </p>
</div>
<div class="post-text" itemprop="text">
<p>Try list comprehension:</p>
<pre><code>[x for x in A if x not in B]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While the accepted answer is certainly the best for many purposes its algorithmic complexity is O(NÃ—M) where N and M are the lengths of <code>A</code> and <code>B</code>. In most case (that is when <code>A</code> and <code>B</code> are not overly long) this won't matter.
But if you intend to process very long lists you will improve processing time by first converting <code>B</code> to a <a href="https://docs.python.org/3/library/stdtypes.html#frozenset" rel="nofollow" title="class frozenset">frozen set</a>:</p>
<pre><code>tmp = frozenset(B)
[i for i in A if i not in tmp]
</code></pre>
<p>The resulting complexity is O(N+M).</p>
</div>
<span class="comment-copy">Please do not tag your question in the title.</span>
<span class="comment-copy"><code>set</code> does not preserve the order too. looks like OP wants to preserve the order.</span>
<span class="comment-copy">one could consider making b a set if b is large.</span>
<span class="comment-copy">Why do you expect set difference to be slower? With inputs of length A and B, set difference should run in O(A+B) instead of O(AB). It might have a worse constant factor (I haven't tried it), but not overwhelmingly so.</span>
<span class="comment-copy">@user2357112: I did a quick test with <code>timeit</code> and the set difference is indeed slower, but it may well depend on the size of the inputs.  The slowdown for the set approach is in the overhead required to create the sets in the first place.  If the data were already sets and not lists, set difference would be the way to go.</span>
