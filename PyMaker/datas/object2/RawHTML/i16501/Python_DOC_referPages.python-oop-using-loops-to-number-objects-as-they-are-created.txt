<div class="post-text" itemprop="text">
<p>I'm stumped on a python problem. I'm writing a program that receives a command from Scratch (MIT) and then should create a new object, in this case named PiLight. The object only need to be created when the command is received so it doesn't have to loop, just be able to executed repeatedly and have the number increment each time it is executed.A list will not work for me due to the requirements of the program and talking between Scratch. I'm trying to figure out a way for the constructor, once initialized, to print out a statement something like</p>
<pre><code>class Newpilight:
    def __init__(self):
        print "Pilight" + pilnumber + " created"
</code></pre>
<p>pilnumber should be 1 for 1st object, 2 for 2nd, etc</p>
<p>From there I need the creation of the object to change the number in the name of the object as well</p>
<pre><code>PiLight(PiLnumber) = Newpilight()
</code></pre>
<p>I tried messing around with for loops but just ended up making more of a mess</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>class NewPiLight(object):
    global_pilnumber = 0 # Since this is on the class definition, it is static

    def __init__(self):
        print "Pilight %s created" % NewPiLight.global_pilnumber
        self.pilnumber = NewPiLight.global_pilnumber # Set the variable for this instance
        NewPiLight.global_pilnumber += 1 # This increments the static variable
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>Use number generator as class variable</h1>
<pre><code>from itertools import count

class NewPilight(object):
    nums = count()
    def __init__(self):
        self.num = self.nums.next()
        print "Pilight {self.num} created".format(self=self)
</code></pre>
<p>Then using in code:</p>
<pre><code>&gt;&gt;&gt; pl1 = NewPilight()
Pilight 0 created
&gt;&gt;&gt; pl2 = NewPilight()
Pilight 1 created
&gt;&gt;&gt; pl3 = NewPilight()
Pilight 2 created
&gt;&gt;&gt; pl3.num
2
</code></pre>
<p>The trick is to have the <code>nums</code> (what is actually a generator of numbers, not list of numbers) as class property and not property of class instance. This way it is globally shared by all class instances.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>class NewPilight:
    def __init__(self, number):
        self.number = number
        print "Pilight" + number + " created"

for x in range(5):
    NewPilight(x)
</code></pre>
<p>if you need to keep objects:</p>
<pre><code>all_pilights = []

for x in range(5):
    all_pilights.append( NewPilight(x) )
</code></pre>
<p>and now you have access to objects as </p>
<pre><code>print all_pilights[0].number
print all_pilights[1].number
print all_pilights[2].number
</code></pre>
</div>
<span class="comment-copy">Next time use button <code>{}</code> on pasted code to get correct indentions.</span>
<span class="comment-copy">When you want a numbered collection of objects, use a <a href="https://docs.python.org/3/tutorial/introduction.html#lists" rel="nofollow noreferrer">list</a>.</span>
<span class="comment-copy">Use lowercase for variable names (and object names) and uppercase (first letter) for class names.</span>
<span class="comment-copy">Im trying your suggestion and I get  NameError: global name 'pilnumber' is not defined</span>
<span class="comment-copy">fixed the example. forgot one self. :)</span>
<span class="comment-copy">That gets the init stuff printing fine :) but the number isnt incrementing for me, just printing out the same number</span>
<span class="comment-copy">Actually it surprised me that it didn't work with "self". This however works and tested.</span>
<span class="comment-copy">Good answer. itertools.count is a good tool. Also this shows how to use the string.format method. One point though, if you are in Python 2.7, the object should inherit from object rather than from nothing. Inheriting from nothing creates an "old style object" without support for descriptors etc.</span>
<span class="comment-copy">@user3820547 Thanks for reminding inheriting from <code>object</code>, edited the answer.</span>
<span class="comment-copy">Your code delegates responsibility for assigning unique id to the code outside from the class. This can be tricky, especially if the objects are created in different pieces of code at different moments, to have that running, you would need to preserve global status.</span>
<span class="comment-copy">I focused on other things - it seemed to me that OP has gaps in knowledge - how to create object and keep on list.</span>
<span class="comment-copy">Good point. There is always conceptual question, where to keep identifier of an object, options being internally within an object, or externally as the object becomes member of some higher level structure like a list or dictionary.</span>
