<div class="post-text" itemprop="text">
<p>I'm beginning to learn the basics of python. I had just learned that str() turns non-strings into strings - example: <code>str(2)</code> would change <code>2</code> to <code>"2"</code>. That raised a question - what is a string and what difference does it have from a non-string? I've googled this but I could not find this question is directly answered and the general explanations don't quite make it clear for me. </p>
</div>
<div class="post-text" itemprop="text">
<p>"That raised a question - what is a string and what difference does it have from a non-string?"</p>
<p>It sounds like python is your first language. That being said, for conceptual sake, a string is text, and a 'non-string' is a number. You will see why this is not quite true as you program more, but for understanding the difference between a string and a 'non-string' this will suffice. You can do math with 'non-strings'.  "2" is a string, but 2 is a 'non-string'. Adding strings is NOT the same as arithmetic addition. "2" + "2" results in another string "22" (this  operation is called concatenation ), but 2 + 2 results in a 'non-string' A.K.A. the NUMBER (not string)  4, because the addition is arithmetic addition.</p>
</div>
<div class="post-text" itemprop="text">
<p>A string is any sequence of characters â€” not just numbers, but letters and punctuation and all of Unicode.</p>
<p>Something that isn't a string is...  not that.  :)  (There are lots of things that aren't strings!  String isn't special.)  For example, <code>2</code> is an <code>int</code>.  You can do math on an <code>int</code>, because it's a number.  But you can't do math on a <code>str</code> like <code>"2"</code>; it's only the way we <em>write</em> the number in Western mathematics, not the number itself.  You couldn't ask <code>"dog"</code> to wag its tail, either, because it's not a real dog; it's just the written word "dog".</p>
<p>As a more practical example:</p>
<p><code>2 + 2</code> gives you <code>4</code>, the result of combining two numbers.</p>
<p><code>"2" + "2"</code> gives you <code>"22"</code>, the result of combining two written "words".</p>
</div>
<div class="post-text" itemprop="text">
<p>just to put another spin on this...<br/><br/>
objects in python come with a variety of attributes and methods. attributes tend to represent data associated with the object. methods tend to represent behaviors that can be performed by the object. <br/><br/>if we create a string and give it the name <em>a</em> and look at the list of attributes/methods, we see that the list encompasses many of the things you would want to know about a string or do with a string. </p>
<pre><code>In [91]: a = '1'      # assign a string the name 'a'

In [92]: a.
a.capitalize  a.format      a.isupper     a.rindex      a.strip
a.center      a.index       a.join        a.rjust       a.swapcase
a.count       a.isalnum     a.ljust       a.rpartition  a.title
a.decode      a.isalpha     a.lower       a.rsplit      a.translate
a.encode      a.isdigit     a.lstrip      a.rstrip      a.upper
a.endswith    a.islower     a.partition   a.split       a.zfill
a.expandtabs  a.isspace     a.replace     a.splitlines  
a.find        a.istitle     a.rfind       a.startswith  
</code></pre>
<p><br/>on the other hand, if we create a number and give it the name <em>b</em> and look at the list of attributes/methods, we see that they are very different and focuses on things we would want to know about a number or do with a number.</p>
<pre><code>In [92]: b = 1       # assign a number the name 'b'

In [93]: b.
b.bit_length   b.denominator  b.numerator    
b.conjugate    b.imag         b.real 
</code></pre>
</div>
<span class="comment-copy">What's the difference between a number and a non-number? <code>str()</code> is just a function that returns the "nice" string representation of an object. It first checks to see if the object has a method called <code>__str__</code> defined. If it does, the result of that method is your output. If not, other stuff happens. I'm not entirely sure what confuses you.</span>
<span class="comment-copy">What is a <a href="http://foldoc.org/data+type" rel="nofollow noreferrer">data type</a> in programming? What are the <a href="https://docs.python.org/2/library/stdtypes.html" rel="nofollow noreferrer">built-in types</a> in Python 2 (<a href="https://docs.python.org/3/library/stdtypes.html" rel="nofollow noreferrer">and 3</a>)? What does it mean that Python is <a href="https://wiki.python.org/moin/Why%20is%20Python%20a%20dynamic%20language%20and%20also%20a%20strongly%20typed%20language" rel="nofollow noreferrer">strongly and dynamically typed</a>?</span>
<span class="comment-copy">I understand that this question is too broad. People have graciously and sufficiently answered my question so I have no specific question to ask at this moment related to this topic. Thank you to all who have answered and to kojiro for editing the post for better formatting.</span>
<span class="comment-copy">Not to add a confusion, but a byte sequence is a string in Python 2 and not a string in Python 3. There's no getting around the fact that types (and particularly strings) is actually quite a complex and nuanced topic.</span>
<span class="comment-copy">sure, but you've gotta start somewhere, and the difference between <code>2</code> and <code>"2"</code> is as good a place as any.</span>
<span class="comment-copy">Well, you can do <code>*</code> and <code>%</code> on a string, but that's not math per se...</span>
<span class="comment-copy">i'm fascinated that you chose those over <code>+</code> as examples  ;)</span>
<span class="comment-copy">Must resist urge to bring up operator special class methods. Must resist urge to bring up operator special class methods. Must resist urge to bring up operator special class methods.</span>
