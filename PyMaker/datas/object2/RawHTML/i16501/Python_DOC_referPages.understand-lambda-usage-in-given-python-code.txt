<div class="post-text" itemprop="text">
<p>On reading through some code, I came across the below snippet which I am not able to understand. Would anyone be able to guide/provide hints/link or a basic explanation of line 3 below</p>
<pre><code>def do_store(*args, **kwargs):
    try:
        key = (args, tuple(sorted(kwargs.items(), key=lambda i:i[0])))
        results = f._results
</code></pre>
<p>mainly, what is the following doing?</p>
<pre><code>key=lambda i:i[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With the <code>lambda</code> keyword, you create "anonymous functions". They don't have (and don't need to have) a name, because they are immediately assigned (usually) to a callback function.</p>
<pre><code>lambda i:i[0]
</code></pre>
<p>is just the body of the function</p>
<pre><code>def f(i):
  return i[0]
</code></pre>
<p>The <code>key</code> parameter of the <code>sorted</code> function has to be a function that computes sorting key for a given item. You could also pass the function (name) <code>f</code> as defined above, or use a <code>lambda</code> function for better readability.</p>
<p>As stated in <a href="https://stackoverflow.com/a/24486403/3456281">tobias_k's</a> answer, in this piece of code, the whole <code>key</code> parameter is useless.</p>
</div>
<div class="post-text" itemprop="text">
<p>The other answers already explain well what <code>lambda</code> and <code>sorted</code>'s <code>key</code> parameter do. In short:</p>
<ul>
<li><code>key</code> is used to provide a <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow">comparison key function</a> for the sort, lets call it <em>f</em>, such that if <em>f(x) &lt; f(y)</em>, then <em>x</em> will appear before <em>y</em> in the sorted list.</li>
<li>the <a href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions" rel="nofollow"><code>lambda</code></a> creates such a function in a quick and tidy way, without the need to create a <code>def</code> just for that one sort; you can just as well use any other function (your own definitions, builtins, etc.)</li>
</ul>
<p>However, to answer the question what <code>key=lambda i:i[0]</code> does, <em>in your code</em>: Nothing at all!</p>
<p>More precisely, it tells <code>sorted</code> to sort by the first element of the tuples that are in the list to be sorted, which is produced by <code>kwargs.items()</code>, i.e. a list of <code>(key, value)</code> tuples. But sorting by the first element is the default sorting behaviour for tuples anyway, and only if those are equal, it would sort by the second element, and so on. But since those are the <code>(keys, values)</code> of a dictionary, there are no two tuples with the same first element, so using this particular key function is exactly the same as the default sort.</p>
<p>You can just as well use <code>key = (args, tuple(sorted(kwargs.items())))</code>.</p>
<p>If you are asking <em>why</em> it does this: This function seems to be used for <a href="http://en.wikipedia.org/wiki/Memoization" rel="nofollow">memoization</a>, mapping the function parameters (stored in <code>args</code> and <code>kwargs</code>) to previously calculated values. For this, the <code>kwargs</code> dictionary has to be transformed to a tuple, because a dictionary is not hashable, i.e. it can not be used as the key to another dictionary. And in order to ensure that the same dictionaries always result in the same tuples, it has to be sorted, because dictionaries are unordered.</p>
</div>
<div class="post-text" itemprop="text">
<p>Three equivalent ways to write this:</p>
<pre><code>sorted(kwargs.items(), key=lambda i:i[0])
</code></pre>
<p>(which is the one you have)</p>
<pre><code>def first_item(aList): return aList[0]
sorted(kwargs.items(), key=first_item)

from operator import itemgetter
sorted(kwargs.items(), key=itemgetter(0))
</code></pre>
<p>In all cases the argument <code>key</code> is passed a function taking one parameter and returning the the first element of that parameter.</p>
<p>The lambda is simply a shorthand that avoids giving a name to the function. Giving the function a name may help people reading the code, especially if the expression is more complex. The <code>itemgetter</code> function has a slight speed advantage but isn't as flexible as all it can do is return one or more items; if you wanted to manipulate the items further (e.g. lower case them) you have to use either a <code>def</code> or <code>lambda</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Without mentioning second argument, <code>, key=lambda i:i[0]</code>,  kwargs would be sorted just by their full names. For example in call</p>
<pre><code>do_store(abc=1, xyz=2, nji=3)
</code></pre>
<p>kwargs is a dict {abc: 1, xyz: 2, nji: 3} and <code>sorted(kwargs.items())</code> would be <code>[('abc', 1), ('nji', 3), ('xyz', 2)]</code>. And default key is simply <code>lambda i: i</code> (i.e. for each element in kwargs we use the elemnt itself for comparison). In you example we will use only the first object of item (i.e. only the dict key because item is a pair (key, value))</p>
</div>
<div class="post-text" itemprop="text">
<p>Lambda allows you to create simple, anonymous functions using an expression. In this case the anonymous function accepts a single argument 'i' and returns the element within 'i' at index zero.</p>
<p>It's purpose in this case is to create a function that selects a sorting key to be used by the 'sorted()' function.</p>
</div>
<span class="comment-copy">It might be worth pointing out that your second code block is actually equivalent to <code>f=lambda i:i[0]</code>. Without assigning it a name, a lambda function is nothing.</span>
<span class="comment-copy">thanks, updated answer.</span>
