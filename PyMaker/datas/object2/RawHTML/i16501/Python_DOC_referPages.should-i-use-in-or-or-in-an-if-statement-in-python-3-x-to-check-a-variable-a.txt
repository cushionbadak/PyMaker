<div class="post-text" itemprop="text">
<p>Suppose I have the following, which is the better, faster, more Pythonic method
and why?</p>
<pre><code>if x == 2 or x == 3 or x == 4:
    do following...
</code></pre>
<p>or :</p>
<pre><code>if x in (2, 3, 4):
    do following...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3 (3.2 and up), you should use a <em>set</em>:</p>
<pre><code>if x in {2, 3, 4}:
</code></pre>
<p>as set membership is a O(1) test, versus a worst-case performance of O(N) for testing with separate <code>or</code> equality tests or using membership in a tuple.</p>
<p>In Python 3, the set literal will be optimised to use a <code>frozenset</code> constant:</p>
<pre><code>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(compile('x in {1, 2, 3}', '&lt;file&gt;', 'exec'))
  1           0 LOAD_NAME                0 (x)
              3 LOAD_CONST               4 (frozenset({1, 2, 3}))
              6 COMPARE_OP               6 (in)
              9 POP_TOP
             10 LOAD_CONST               3 (None)
             13 RETURN_VALUE
</code></pre>
<p>Note that this optimisation was <a href="https://docs.python.org/3/whatsnew/3.2.html#optimizations">added to Python 3.2</a> and in Python 2 or 3.0 or 3.1 you'd be better of using a tuple instead. For a small number of elements, the difference in lookup time is nullified by the set creation for each execution.</p>
</div>
<span class="comment-copy">as for the pythonic aspect, the 2nd version would be more suited. (taken from : <a href="http://blog.startifact.com/posts/older/what-is-pythonic.html" rel="nofollow noreferrer">blog.startifact.com/posts/older/what-is-pythonic.html</a>). I don't know about performance though, but I believe it should be equivalent</span>
<span class="comment-copy">I never thought of using a set for this, just kept the old habit of using tuples, but when I read it here I thought "well, of course!". So thanks!</span>
<span class="comment-copy">If set membership is an O(1) test, I assume that the values in a set are hashed?</span>
<span class="comment-copy">@JacobodeVera: Older Python versions (Python 2.x, Python 3.0 and 3.1) don't support the optimisation yet, and construct a new set object every time a <code>x in {.., .., ..}</code> line is executed.</span>
<span class="comment-copy">@TheSoundDefense: they are, just like dictionary keys.</span>
