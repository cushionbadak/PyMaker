<div class="post-text" itemprop="text">
<p>I'm looking for a pythonic way to iterate through a list and do something on the last (and only the last) element. There are two ways I can see to do this, of which I would guess the second is best:</p>
<pre><code>for item in a_list:
    #do something to every element
    if a_list.index(item) == len(a_list) - 1:
        # do something to the last one
</code></pre>
<p>and </p>
<pre><code>for n, item in enumerate(a_list):
   #do something to every element
   if n == len(a_list) - 1 :
       # do something to the last one
</code></pre>
<p>However, I wonder if there is a way of doing it without calling <code>len()</code> on a list I'm already iterating over. I'm quite happy, by the way, to be told that this isn't something I should worry about. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>for item in lst:
   do_something_to(item)
else:
   do_something_extra_special_to_last(item)
</code></pre>
<p>Here I just assume that you want to do something extra to the last item (the normal action will still be taken on it beforehand).  I also assume you aren't hitting any <code>break</code> statements (in that case <code>else</code> won't execute).  Of course, you don't really need <code>else</code>:</p>
<pre><code>for item in lst:
    do_something_to(item)
do_something_extra_special_to_last(item)
</code></pre>
<p>should work too since the loop variable "leaks" into the enclosing scope and if there are breaks that you're worried about and you really are looping over a sequence, why not:</p>
<pre><code>for item in lst:
   do_something_to(item)
do_something_extra_special_to_last(lst[-1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're making up problems :) There really isn't any with your approach.</p>
<p>If you want to loop, you can find the length. And then access the last thing. Or just do the loop, then do something with <code>a_list[-1]</code>. Fancy way, use <code>for-else</code> - you can google it. But then again, really, there is nothing wrong with your code.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/reference/compound_stmts.html#the-for-statement" rel="nofollow"><code>else</code> block of a for-loop</a>:</p>
<pre><code>&gt;&gt;&gt; for i in [1, 2, 3, 4, 5]:
...     print(i)
... else:
...     print(i**2)
...
1
2
3
4
5
25
&gt;&gt;&gt;
</code></pre>
<p>As you can see, an operation is performed on each element in the list but the last one undergoes an extra operation.</p>
<p>Note too that the <code>else</code> block will only be run if the loop exits normally without encountering a <code>break</code> statement.  This behavior seems proper because, if a <code>break</code> statement was encountered, then the loop was explicitly exited and we are done with the list.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use this:</p>
<pre><code>a_list[-1]
</code></pre>
<p>to access last element</p>
</div>
<div class="post-text" itemprop="text">
<p>I would certainly prefer the second version of the two you present; <code>index</code> could cause problems if there are duplicates in the list and is an <code>O(n)</code> operation on every iteration, whereas <code>len</code> is <code>O(1)</code>.</p>
<p>Generally, though, as you want to do something <em>additional</em> (not <em>different</em>) to the last item, I would just make it a separate step after the <code>for</code> loop:</p>
<pre><code>for item in lst:
    # do something to every element
# do something to lst[-1]
</code></pre>
<p>This will work even if there is a <code>break</code> (unlike using <code>else</code>) and affects the last item in the list not the last item iterated over - this may or may not be desired behaviour.</p>
</div>
<div class="post-text" itemprop="text">
<p>Consider:</p>
<pre><code>li[:]=[do_somthing(item) for item in li]  # something to every item in place
li[-1]=something_extra(li[-1])            # additional to last item
</code></pre>
<p>vs</p>
<pre><code>for i, item in enumerate(li):
    li[i]=do_somthing(item)
    if i==len(li)-1:
        li[i]=something_extra(item)
</code></pre>
<p>If you time these, you can see this is the fastest way:</p>
<pre><code>def do_something(e):
    return e*2

def something_extra(e):
    return e/2

def f1(li):
    for i, item in enumerate(li):
        li[i]=do_something(item)
        if i==len(li)-1:
            li[i]=something_extra(item)

def f2(li):
    li[:]=[do_something(item) for item in li]
    li[-1]=something_extra(li[-1])

def f3(li):
    for i, item in enumerate(li):
        li[i]=do_something(item)
    li[i]=something_extra(item)

if __name__ == '__main__':
    import timeit
    for f in (f1,f2,f3):
        t=timeit.timeit("f(range(1000))", 
                         setup="from __main__ import f,do_something,something_extra", 
                         number=10000)
        print '{}: {:6.3} seconds'.format(f.__name__, t)
</code></pre>
<p>On my (iMac) machine:</p>
<pre><code>f1:   2.95 seconds
f2:   1.45 seconds
f3:   1.97 seconds
</code></pre>
</div>
<span class="comment-copy">Can you explain the difference between 'iterate through a list and do something on the last (and only the last) element' and just doing something with <code>a_list[-1]</code>?</span>
<span class="comment-copy">It simply seemed a shame to go through a list, and then go back and do something to the last element, instead of doing them both on the same iteration. As above, this may be founded in emotion; but it's good to learn when that's true.</span>
<span class="comment-copy">You could also do <code>enumerate(a_list, 1)</code> and then you don't need to do a subtraction at every step checking <code>n == len(a_list)</code>.</span>
<span class="comment-copy">@mgilson - useful, I didn't know about that.</span>
<span class="comment-copy">Using the <code>else</code> block though might be the better option.  If we have explicitly broken the loop with <code>break</code>, the last element should not be processed IMO.  The loop is ended and we are done with <code>lst</code>.</span>
<span class="comment-copy">@iCodez -- Possibly.  It really depends on the problem that OP is trying to solve (which hasn't been defined very well) which I why I tried to provide a solution for a number of different variations on the problem. :-)</span>
<span class="comment-copy">+1 for a complete, and definitely best answer :)))</span>
<span class="comment-copy">+1 for "you're making up problems" :-)</span>
<span class="comment-copy"><code>a_list[:-1]</code> will give me the list up to the last element. I think you're thinking of <code>a_list[-1]</code></span>
<span class="comment-copy">@FarmerGedden, did you just answer your own question?</span>
<span class="comment-copy">Whoops, you are right. Edited</span>
<span class="comment-copy">Nope. I know how to get the last element of a list. What I'd like is a simple way, while iterating through the list, to do something on only the last element.</span>
<span class="comment-copy">@FarmerGedden it's probably easiest just to tack this on after the loop, rather than playing with indices.</span>
