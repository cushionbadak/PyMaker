<div class="post-text" itemprop="text">
<p>I am attempting to have two pieces of user input become parts of a filename that my Python script will then access.</p>
<p>For example, I want to use the pieces of user input to construct: date_time_place.txt.  I know I can do that by concatenating strings.</p>
<p>I ask the user for raw_input() for date and time, but I have named the date and time options they can use:</p>
<pre><code>date1 = yesterday
date2 = today
date3 = tomorrow

time1 = morning
time2 = afternoon
time3 = evening
</code></pre>
<p>I specify that the user must enter his or her response as date# or time#.</p>
<p>What I want is to be able to use his or her response to obtain what date# or time# already is assigned to be.  How does one go about such a thing?</p>
</div>
<div class="post-text" itemprop="text">
<p>Although you <em>can</em>, you should not attempt this. Put your variables in a dictionary instead;</p>
<pre><code>dates = {
    'date1': yesterday,
    'date2': today,
    'date3': tomorrow,
}

times = {
    'time1': morning,
    'time2': afternoon,
    'time3': evening,
}
</code></pre>
<p>Now access is as simple as <code>dates[userstring]</code> or <code>times[userstring]</code>.</p>
<p>You <em>could</em> access local variables with the <a href="https://docs.python.org/2/library/functions.html#locals"><code>locals()</code> function</a>, globals with <a href="https://docs.python.org/2/library/functions.html#globals"><code>globals()</code></a> (both return a dictionary), but you then cannot constrain the names they have access to.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>time = ["morning","afternoon", "evening"]

print """please choose one 0:morning
1:afternoon
2:evening """

daytime = time[int(raw_input())]
</code></pre>
<p>it is a sample solution. check for out of index values and non-int value exceptions.</p>
</div>
<span class="comment-copy">You generally <b>don't do that</b>. Use a dictionary instead.</span>
<span class="comment-copy">Use a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">dictionary</a>.</span>
<span class="comment-copy">@MartijnPieters, thank you for elaborating a bit!  I'm new to using Python, so your explanation was very helpful.  I'll be accepting it as soon as I am able to do so.</span>
<span class="comment-copy">@sweeneyrod, thank you, but for newcomers like myself, a more detailed explanation would have been beneficial.</span>
<span class="comment-copy">Using Python 2's <code>input()</code> is a huge security hole; it was removed in Python 3 and replaced with <code>raw_input()</code>.</span>
<span class="comment-copy">can you provide a link please? :)</span>
<span class="comment-copy"><a href="https://www.python.org/dev/peps/pep-3100/" rel="nofollow noreferrer">PEP 3100</a></span>
<span class="comment-copy">Thanks for the great info, i did some research and(for those interested): input() basically calls eval() every time, so one could do anything if you use input(): example: <code>&gt;&gt; input("Your name?")</code> <code>__import__("os").system("rm -rf /") #imports os, runs "rm -rf /"(delete root dir)</code></span>
