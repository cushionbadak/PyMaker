<div class="post-text" itemprop="text">
<p>In the following code</p>
<pre><code>def sendPostRequest():
  request = urllib.request.Request(myURL, myBody, myHeaders)
  print("created POST request", request)
  response = urllib.request.urlopen(request)
  print("finished POST", response)

for i in range(5):
  t = threading.Thread(target=sendPostRequest)
  t.daemon = True  # thread dies when main thread (only non-daemon thread) exits.
  t.start()
</code></pre>
<p>, the line <code>print("finished POST", response)</code> is never reached, while I can observe in the server logs that the request arrived successfully. The line <code>print("created POST request", request)</code> is reached however. 
Why is this the case?</p>
</div>
<div class="post-text" itemprop="text">
<p>The code makes thread daemon threads.</p>
<p>According to <a href="https://docs.python.org/3/library/threading.html" rel="nofollow"><code>threading</code> documentation</a>:</p>
<blockquote>
<p>A thread can be flagged as a “daemon thread”. The significance of this
  flag is that the <strong>entire Python program exits when only daemon threads
  are left</strong>. The initial value is inherited from the creating thread. The
  flag can be set through the daemon property or the daemon constructor
  argument.</p>
</blockquote>
<p>The program maybe end before the response is returned from the server.</p>
<p>Instead of using daemon thread, use non-daemon thread, or explicitly wait the threads to finish started using <a href="https://docs.python.org/3/library/threading.html#threading.Thread.join" rel="nofollow"><code>Thread.join</code></a>.</p>
<pre><code>threads = []

for i in range(5):
    t = threading.Thread(target=sendPostRequest)
    t.start()
    threads.append(t)

for t in threads:
    t.join()
</code></pre>
</div>
<span class="comment-copy">I believe this is absolutely the main reason, additionally he will also likely see a <code>TypeError</code> with trying to print the HTTPResponse, since it won't implicitly be converted to a string. @ptikobj, you will either need to wrap the response in <code>str()</code> or do <code>response.read().decode()</code> as well as ^.</span>
<span class="comment-copy">@nerdwaller, It will not raises error, but something like <code>&lt;http.client.HTTPResponse object at 0x00000000031C2518&gt;</code>. <code>print</code> try to call <code>__str__</code> of the objects (or <code>__repr__</code>)</span>
<span class="comment-copy">@nerdwaller, Of course, if OP want to print the content, OP should use the way you suggest.</span>
<span class="comment-copy">Ah, that's what I get for trying to concat those, instead of using the print function correctly. Thanks!</span>
