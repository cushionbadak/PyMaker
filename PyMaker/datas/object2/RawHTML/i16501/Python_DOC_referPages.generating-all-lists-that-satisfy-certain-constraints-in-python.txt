<div class="post-text" itemprop="text">
<p>I would like to generate the following lists in Python:</p>
<pre><code>[1, 1, 1, 2, 2]
[1, 1, 2, 1, 2]

... etc

[2, 1, 2, 1, 1]
[2, 2, 1, 1, 1]
</code></pre>
<p>There are always two "2"s and three "1"s in any list.</p>
<p>My intuition suggests that I will need to use the itertools module to do this. However, I am not sure where to begin, though I have read the documentation and looked at examples. Any suggestions?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can notice that the number of such lists is equal to the number of ways to place two "2"s in a sequence of length 5. This suggests the following solution:</p>
<pre><code>n = 5 # total length
n2 = 2 # number of "2"s
for idx in itertools.combinations( xrange(n), n2 ):
    print [ 2 if i in idx else 1 for i in xrange(n) ]
</code></pre>
<p>It's easy to see that the answer using permutations is iterating over <code>n!</code> solutions, while my solution iterates over <code>n!/( (n-n2)! * n2!)</code>. For example if the input list is <code>[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2]</code>, the solution using permutations is ~90,000,000 times slower (10! * 4!)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow"><code>itertools.permutations</code></a> and <a href="https://docs.python.org/3/library/functions.html#func-set" rel="nofollow"><code>set</code></a> (to eliminate duplicates):</p>
<pre><code>&gt;&gt;&gt; from itertools import permutations
&gt;&gt;&gt; for combo in set(permutations([1, 1, 1, 2, 2])):
...     print(list(combo))
...
[1, 2, 1, 1, 2]
[2, 1, 1, 1, 2]
[2, 1, 2, 1, 1]
[2, 1, 1, 2, 1]
[1, 1, 2, 1, 2]
[1, 1, 1, 2, 2]
[1, 2, 1, 2, 1]
[1, 1, 2, 2, 1]
[1, 2, 2, 1, 1]
[2, 2, 1, 1, 1]
&gt;&gt;&gt;
</code></pre>
<p>If the combinations need to be in order, then you can use <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow"><code>sorted</code></a>:</p>
<pre><code>&gt;&gt;&gt; for combo in sorted(set(permutations([1, 1, 1, 2, 2]))):
...    print(list(combo))
...
[1, 1, 1, 2, 2]
[1, 1, 2, 1, 2]
[1, 1, 2, 2, 1]
[1, 2, 1, 1, 2]
[1, 2, 1, 2, 1]
[1, 2, 2, 1, 1]
[2, 1, 1, 1, 2]
[2, 1, 1, 2, 1]
[2, 1, 2, 1, 1]
[2, 2, 1, 1, 1]
&gt;&gt;&gt;
</code></pre>
</div>
<span class="comment-copy">I assume you mean <code>two "2"'s and three "1"'s</code>?</span>
<span class="comment-copy">Actually <i>read</i> the <code>itertools</code> documentation?</span>
<span class="comment-copy">Great suggestion! Could you explain how you found this solution to be intuitive?</span>
<span class="comment-copy">@richnis: this is basic combinatorics. If you're interested in learning it, I would recommend reading <a href="https://www.cs.princeton.edu/courses/archive/fall13/cos340/LL.pdf" rel="nofollow noreferrer">Mathematics for Computer Science</a>, chapter 16.</span>
<span class="comment-copy">You don't have to specify the size of the permutation if it's equal to the length of the input list.</span>
