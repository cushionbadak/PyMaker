<div class="post-text" itemprop="text">
<p>While currently writing a daemon which automatically updates multiple long running programs. I don't care about the program's exit status as the only way the child will exit is when force quitting them on upgrade. Unfortunately I'm creating a large number of zombie processes as a result.</p>
<p>I'm aware that I can use <code>waitpid(0, WNOHANG)</code> to listen for changes from any of the children (which is almost exactly what I want), however I'm also using the python multiprocessing module to run multiple separate upgrade processes in parallel, so the long running process which I could run <code>waitpid</code> from is actually the grandparent of the terminated process and therefore it never receives any signals.</p>
<p>So, is there any way to fork a child process so that I never need to check the exit status, or do I just have to deal with my process table being filled with zombies?</p>
</div>
<div class="post-text" itemprop="text">
<p>You should be able to control this with the setting of the signal handler for SIGCHLD.</p>
<p>In C, you would use:</p>
<pre><code>signal(SIGCHLD, SIG_IGN);
</code></pre>
<p>You'll need to adapt that to the Python interface.</p>
<p>You can use the Python 2 <a href="https://docs.python.org/2/library/signal.html?highlight=signal#signal" rel="nofollow">signal</a> or Python 3 <a href="https://docs.python.org/3/library/signal.html?highlight=signal#module-signal" rel="nofollow">signal</a> module; they seem to be identical for the problem on hand:</p>
<pre><code>import signal

signal.signal(signal.SIGCHLD, signal.SIG_IGN)
</code></pre>
<p>See: POSIX <a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/V2_chap02.html#tag_15_04" rel="nofollow">Signal Concepts</a> for the underlying system behaviour (in particular, 'Signal Actions' and <code>SIG_IGN</code> under that section).</p>
<p><sup>Warning: Python code not formally tested!</sup></p>
</div>
<div class="post-text" itemprop="text">
<p>As I understand your process tree layout, it looks something like the following, where <code>parent1</code> and <code>parent2</code> are the things using Python's <code>multiprocessing.Process</code> objects.</p>
<pre><code>grandparent
 |- parent1
   |- child1
   |- child2
 |- parent2
   | - child1
   | - child2
</code></pre>
<p>If that's the case, you'll want to be sure to call <code>multiprocessing.Process.join</code> from the parent processes (i.e., <code>parent1</code> and <code>parent2</code>) on their respective children. Once they terminate, regardless of reason, they will be cleaned up, which will allow <code>grandparent</code> to gracefully clean up <code>parent1</code> and <code>parent2</code>.</p>
<p>If you'd like to add additional logic to your parent to cycle through all of the children processes instead of blocking on the first one, you can use the <code>timeout</code> kwarg mentioned at <a href="https://docs.python.org/2/library/multiprocessing.html#multiprocessing.Process.join" rel="nofollow">https://docs.python.org/2/library/multiprocessing.html#multiprocessing.Process.join</a> to time out your join.</p>
</div>
