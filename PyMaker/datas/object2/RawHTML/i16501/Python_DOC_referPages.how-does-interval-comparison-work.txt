<div class="post-text" itemprop="text">
<p>Somehow, this works:</p>
<pre><code>def in_range(min, test, max):
    return min &lt;= test &lt;= max

print in_range(0, 5, 10)  # True
print in_range(0, 15, 10)  # False
</code></pre>
<p>However, I can't quite figure out the order of operations here. Let's test the <code>False</code> case:</p>
<pre><code>print 0 &lt;= 15 &lt;= 10  # False
print (0 &lt;= 15) &lt;= 10  # True
print 0 &lt;= (15 &lt;= 10)  # True
</code></pre>
<p>Clearly, this isn't resolving to a simple order of operations issue. Is the interval comparison a special operator, or is something else going on?</p>
</div>
<div class="post-text" itemprop="text">
<p>Unlike most languages, Python supports <a href="https://docs.python.org/3/reference/expressions.html#grammar-token-comp_operator">chained comparison operators</a> and it evaluates them as they would be evaluated in normal mathematics.</p>
<p>This line:</p>
<pre><code>return min &lt;= test &lt;= max
</code></pre>
<p>is evaluated by Python like this:</p>
<pre><code>return (min &lt;= test) and (test &lt;= max)
</code></pre>
<p>Most other languages however would evaluate it like this:</p>
<pre><code>return (min &lt;= test) &lt;= max
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As specified in the <a href="https://docs.python.org/2/reference/expressions.html#not-in" rel="nofollow">Python documentation</a>:</p>
<blockquote>
<p>Comparisons can be chained arbitrarily, e.g., <code>x &lt; y &lt;= z</code> is equivalent to <code>x &lt; y and y &lt;= z</code>, except that <code>y</code> is evaluated only once (but in both cases <code>z</code> is not evaluated at all when <code>x &lt; y</code> is found to be false).</p>
<p>Formally, if <em>a</em>, <em>b</em>, <em>c</em>, ..., <em>y</em>, <em>z</em> are expressions and <em>op1</em>, <em>op2</em>, ..., <em>opN</em> are comparison operators, then <code>a op1 b op2 c ... y opN z</code> is equivalent to <code>a op1 b and b op2 c and ... y opN z</code>, except that each expression is evaluated at most once.</p>
</blockquote>
</div>
<span class="comment-copy">related-but-not-quite-duplicate: <a href="http://stackoverflow.com/questions/2452837/python-evaluation-order" title="python evaluation order">stackoverflow.com/questions/2452837/python-evaluation-order</a></span>
<span class="comment-copy">you can even do crazier stuff like <code>a &lt; b &lt;= c &lt; d &lt;= e</code> ... although it starts getting really confusing once you go more than 2 comparisons</span>
<span class="comment-copy">So the comparison operations are evalueted left to right, i.e. if <code>min &lt;= test</code> evaluates to <code>False</code>, <code>test &lt;= max</code> is not evaluated? But I guess that in <code>min &lt;= test &lt;= max</code>, <code>test</code> is always evaluated only once, while in the expression <code>(min &lt;= test) and (test &lt;= max)</code>, <code>test</code> may be evaluated one or two times (depending on the value of <code>min &lt;= test</code>)?</span>
<span class="comment-copy">@HelloGoodbye good question. In <code>min &lt;= test() &lt;= max</code> the <code>test()</code> function will only be evaluated once.</span>
