<div class="post-text" itemprop="text">
<p>I've seen on <a href="https://docs.python.org/3.4/distutils/" rel="nofollow">Python Docs</a> that distutils is "legacy" since Python 3.4. What is now the recommended (or standard) way to distribute packages and/or modules.
Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, the documentation for the <a href="https://docs.python.org/3/library/distutils.html#module-distutils" rel="nofollow"><code>distutils</code></a> module says it all:</p>
<blockquote>
<p>The <code>distutils</code> package provides support for building and installing
  additional modules into a Python installation. The new modules may be
  either 100%-pure Python, or may be extension modules written in C, or
  may be collections of Python packages which include modules coded in
  both Python and C.</p>
<p>Most Python users will not want to use this module directly, but
  <strong>instead use the cross-version tools maintained by the Python Packaging
  Authority. Refer to the <a href="https://packaging.python.org/en/latest/" rel="nofollow">Python Packaging User Guide</a> for more
  information.</strong></p>
<p>For the benefits of packaging tool authors and users seeking a deeper
  understanding of the details of the current packaging and distribution
  system, the legacy distutils based user documentation and API
  reference remain available:</p>
<ul>
<li><a href="https://docs.python.org/3/install/index.html#install-index" rel="nofollow">Installing Python Modules (Legacy version)</a></li>
<li><a href="https://docs.python.org/3/distutils/index.html#distutils-index" rel="nofollow">Distributing Python Modules (Legacy version)</a></li>
</ul>
</blockquote>
<p>In particular inside the <a href="https://packaging.python.org/en/latest/current.html#packaging-tool-recommendations" rel="nofollow">linked user guide</a> they state:</p>
<blockquote>
<ul>
<li>Use <a href="https://packaging.python.org/en/latest/projects.html#setuptools" rel="nofollow"><code>setuptools</code></a> to define projects and create Source Distributions. [5] [6]</li>
<li>Use the <code>bdist_wheel</code> <code>setuptools</code> extension available from the wheel project to create wheels. This is especially beneficial, if your
  project contains binary extensions. [7]</li>
<li>Use <code>twine</code> for uploading distributions to PyPI.</li>
</ul>
</blockquote>
<p>And later on:</p>
<blockquote>
<p><code>distribute</code> was a fork of <code>setuptools</code> that was merged back into
  setuptools (in v0.7), thereby making <strong>setuptools the primary choice for
  Python packaging.</strong></p>
</blockquote>
<hr/>
<p>In other words:</p>
<ul>
<li><code>distutils</code> is <strong>still</strong> the standard way. Only, it's more low level than what most people want. It's the foundantion on top of which the other tools are built, so it is <em>not</em> "legacy". In fact there is <em>no mention of deprecation</em> in the docs.</li>
<li><code>setuptools</code> is the <em>preferred</em> way to distribute a package.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>According to the <a href="https://python-packaging-user-guide.readthedocs.org/en/latest/current.html" rel="nofollow">Python Packaging User Guide</a> it is recommended to use <a href="https://python-packaging-user-guide.readthedocs.org/en/latest/projects.html#setuptools" rel="nofollow">setuptools</a> and then <a href="https://pypi.python.org/pypi/twine" rel="nofollow">twine</a> to create PyPi packages.</p>
</div>
