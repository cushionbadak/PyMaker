<div class="post-text" itemprop="text">
<p>Consider the following (non-working) example code:</p>
<pre><code>class MyGenerator:
    def test_gen(self):
        for i in range(1,5):
            if i % 2:
                self.foo(i)
            else:
                self.bar(i)

    def foo(self, i):
        yield i

    def bar(self, i):
        yield i**2

g = MyGenerator()
for i in g.test_gen():
    print i
</code></pre>
<p>This will not work, because <code>test_gen</code> has no <code>yield</code> and is no longer a generator function. In this small example I could just return the values from <code>foo</code> and <code>bar</code> and put the <code>yield</code> into <code>test_gen</code>, however I have a case where that's not possible. How can I turn <code>test_gen</code> into a generator function again?</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to loop over the results of the delegated generators and yield those:</p>
<pre><code>def test_gen(self):
    for i in range(1,5):
        if i % 2:
            for res in self.foo(i):
                yield res
        else:
            for res in self.bar(i):
                yield res
</code></pre>
<p>If you are using Python 3.3 or up, you'd use the <a href="https://docs.python.org/3/reference/expressions.html#yield-expressions"><code>yield from</code> expression</a> to do proper generator delegation:</p>
<pre><code>def test_gen(self):
    for i in range(1,5):
        if i % 2:
            yield from self.foo(i)
        else:
            yield from self.bar(i)
</code></pre>
<p>Both re-introduce <code>yield</code> into the function, once again making it a generator function.</p>
</div>
<div class="post-text" itemprop="text">
<p>why not just:</p>
<pre><code>class MyGenerator:
    def test_gen(self):
        for i in range(1,5):
            if i % 2:
                yield next(self.foo(i))
            else:
                yield next(self.bar(i))

    def foo(self, i):
        yield i

    def bar(self, i):
        yield i**2
</code></pre>
</div>
<span class="comment-copy">Ha, the Python 3 way is exactly what I was looking for! Sweet and concise. Unfortunately I'm on Python 2.7 :-(</span>
<span class="comment-copy">In this special example, the subgenerator will just yield a simple item before exhausting, so the <code>yield from</code> examples are fine. But people using it have to attempt they do yield up to exhaustion of the sub-generators, not a single item - and only after that the controls comes back to the primary generator. (otherwise they would not be distinguishable from a plain <code>yield</code>)</span>
