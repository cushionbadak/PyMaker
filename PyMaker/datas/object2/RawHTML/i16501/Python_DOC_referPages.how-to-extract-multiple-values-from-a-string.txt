<div class="post-text" itemprop="text">
<p>I have a long Python list like:</p>
<pre><code>['A p=45 n=200 SNR=12', 'B p=2232 n=22 SNR=2']
</code></pre>
<p>I would like to get from this list a list of tuples containing the value of <code>p</code>, <code>n</code> and <code>SNR</code>.</p>
<p>So:</p>
<pre><code>funz(['A p=45 n=200 SNR=12', 'B p=2232 n=22 SNR=2'])
</code></pre>
<p>would return:</p>
<pre><code>[(45,200,12), (2232,22,2)]
</code></pre>
<p>The strings in the list have all the same structure. </p>
</div>
<div class="post-text" itemprop="text">
<p>Another option is this:</p>
<pre><code>def funz(l):
    return [tuple(int(i.split('=')[1]) for i in item.split(' ')[1:]) for item in l]
</code></pre>
<p>Edited re @bvukelic's comment.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import re

data =  ['A p=45 n=200 SNR=12', 'B p=2232 n=22 SNR=2']

result = []

for x in data:
    result.append( map( int, re.search('p=(\d+).*n=(\d+).*SNR=(\d+)', x).groups()) )

print result

[[45, 200, 12], [2232, 22, 2]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/re.html" rel="nofollow"><code>re.findall</code></a> and a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>:</p>
<pre><code>&gt;&gt;&gt; from re import findall
&gt;&gt;&gt; lst = ['A p=45 n=200 SNR=12', 'B p=2232 n=22 SNR=2']
&gt;&gt;&gt; def funz(lst):
...     return [tuple(map(int, findall("\d+", i))) for i in lst]
...
&gt;&gt;&gt; funz(['A p=45 n=200 SNR=12', 'B p=2232 n=22 SNR=2'])
[(45, 200, 12), (2232, 22, 2)]
&gt;&gt;&gt;
</code></pre>
<p>The Regex pattern <code>\d+</code> matches one or more digits.</p>
</div>
<span class="comment-copy">How far along are you in writing the solution yourself? Where are you stuck? :)</span>
<span class="comment-copy"><code>[tuple(int(m) for m in re.findall(r'(\d+)', i)) for i in lst]</code></span>
<span class="comment-copy">Damn, you beat me to it. Just do this, though: <code>int(i.split('=')[1])</code> OP wants ints. And yeah, the left-most comprehension should be wrapped in <code>tuple()</code> for completeness.</span>
<span class="comment-copy">@bvukelic they also aparently want tuples</span>
