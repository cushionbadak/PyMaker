<div class="post-text" itemprop="text">
<p>In a multi-threaded implementation, i need to generate lots of instructions, then pass them to the single processing thread. Here is my custom <em>Instruction</em> class:</p>
<pre><code>class instruction:
    priority = 10
    action = ""
    data = ""
    condition = ""
    target = ""

    ### constructor(s) declaration
    def __init__(self,priority=10,target="",action="",data="",condition=""):
        self.priority = priority
        self.target = target
        self.action = action
        self.data = data
        self.condition = condition
</code></pre>
<p>I will have to call different kinds of instructions, thus the defined parameters may differ. It will always be one parameter missing, like no target, no action, etc.</p>
<p>As is the current constructor, if i call it without target, i'll get that:</p>
<pre><code>i = instruction(priority_value,action_value,data_value,condition_value)
print(i.priority)
&gt;&gt;&gt; priority_value
print(i.target)
&gt;&gt;&gt; action_value
print(i.action)
&gt;&gt;&gt; data_value
print(i.target)
&gt;&gt;&gt; data_value
print(i.data)
&gt;&gt;&gt; condition_value
print(i.condition)
&gt;&gt;&gt; #nothing to see here, move along!
</code></pre>
<p>I know i can define custom constructors, like</p>
<pre><code>@classmethod
def noTarget(priority=10,action=0,data="",condition=""):
return instruction(priority,"",action,data,condition)
</code></pre>
<p>and then call it as <code>i=instruction.noTarget(priority_value,action_value,data_value,condition_value)</code></p>
<p>But, is there other ways to do that?<br/>
If so, could you please detail these? Thanks!</p>
<p><em>Sorry if i mis-used or mis-spelled some words, English isn't my native language.</em></p>
</div>
<div class="post-text" itemprop="text">
<p>All your parameters in your function definition are optional as they are specified as <em>default</em> parameters, so you don't <em>have</em> to pass in values for all.</p>
<p>When calling the function, just <em>name</em> the arguments you <em>do</em> want to pass in; these are called keyword arguments:</p>
<pre><code>instruction(priority=priority_value, action=action_value,
            data=data_value, condition=condition_value)
</code></pre>
<p>When using keyword arguments in a call, the order doesn't matter, you can mix them up freely.</p>
<p>Also see the <a href="https://docs.python.org/3/tutorial/controlflow.html#keyword-arguments" rel="nofollow">Keyword Arguments section</a> of the Python tutorial.</p>
</div>
<div class="post-text" itemprop="text">
<p>Pass keyword arguments.</p>
<pre><code>i = instruction(priority=priority_value,
                action=action_value,
                data=data_value,
                condition=condition_value)
</code></pre>
</div>
<span class="comment-copy">What are the class-level variables for?</span>
<span class="comment-copy">I would consider using <code>None</code> instead of empty string as it's makes your intent clearer. I would also pass in named parameters <code>instruction(priority=priority_value)</code></span>
<span class="comment-copy">I'd distinguish between defining a function with optional parameters that have <i>default values</i> from calling a function with <i>keyword arguments</i>. They use the same syntax (<code>func(foo=bar)</code>) and both are involved in this question and answer, but they're not really the same thing.</span>
<span class="comment-copy">@Blckknght: Updated my wording slightly. I don't want to cover everything the tutorial covers in too great detail either.</span>
<span class="comment-copy">I'm not sure the edit really fixed the part I was objecting to, which has to do with the terminology. The function <i>definition</i> doesn't use keyword arguments, it specifies <b>default values</b>. The function <i>call</i> uses <b>keyword arguments</b> (which look very similar, but are not the same thing). In Python 3 it gets even more muddled, as a function definition can have <b>keyword-only arguments</b> (which may or may not have default values), but that's a whole different thing (and probably not relevant to this question, unless the OP wants to prevent calls to <code>__init__</code> with positional arguments).</span>
<span class="comment-copy">@Blckknght: The function definition uses <i>parameters</i>, the call passes in <i>arguments</i>. I am deliberately trying to keep this simple and not exhaustively complete. I've separated function definition, parameters and arguments some more.</span>
<span class="comment-copy">Yes, I understand that distinction. My objection is to the first paragraph, where you say that the parameters are "specified as keyword parameters". The "keyword" term isn't appropriate when referring to the function definition.</span>
