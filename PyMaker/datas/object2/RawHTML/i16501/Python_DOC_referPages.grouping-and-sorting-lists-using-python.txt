<div class="post-text" itemprop="text">
<p>I am trying to use one list to sort another and keep them synchronized at the same time:</p>
<pre><code>keys = [x,x,x,y,y,x,x,z,z,z,x,x]
data = [1,2,3,4,5,6,7,8,9,10,11,12]
</code></pre>
<p>I want to use the keys list to organize the data list into subgroups of the same keys. </p>
<pre><code>result = [[1,2,3,6,7,11,12],[4,5,],[8,9,10]]
</code></pre>
<p>I also want to make sure that the list is sorted within each subgroup. </p>
<p>so far i was able to get it all sorted properly:</p>
<pre><code>group = []

data = sorted(zip(data, keys), key=lambda x: (x[1]))
for i, grp in groupby(data, lambda x: x[1]):
    sub_group = [], []
    for j in grp:
        sub_group.append(j[1])
    group.extend(sub_group)
</code></pre>
<p>What else am I missing? Thanks! </p>
</div>
<div class="post-text" itemprop="text">
<p>You have almost done. Try this code</p>
<pre><code>group = []
data = sorted(zip(data, keys), key=lambda x: (x[1]))
for i, grp in groupby(data, lambda x: x[1]):
    group.append([item[0] for item in grp])
</code></pre>
<p><code>grp</code> has <code>(data, key)</code> pair, so you need to select <code>data</code> from the pair as <code>[item[0] for item in grp]</code></p>
<h3>UPDATED</h3>
<p>This code I used for answer.</p>
<pre><code>from itertools import groupby

x, y, z = range(3)
keys = [x,x,x,y,y,x,x,z,z,z,x,x]
data = [1,2,3,4,5,6,7,8,9,10,11,12]

group = []
data = sorted(zip(data, keys), key=lambda x: (x[1]))
for i, grp in groupby(data, lambda x: x[1]):
    group.append([item[0] for item in grp])

print group
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It would much simpler if you used <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow"><code>collections.OrderedDict</code></a> and its <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="nofollow"><code>setdefault</code></a> method:</p>
<pre><code>from collections import OrderedDict

# To demonstrate, I made the keys into strings
keys = ['x', 'x', 'x', 'y', 'y', 'x', 'x', 'z', 'z', 'z', 'x', 'x']
data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

dct = OrderedDict()
for key,val in zip(keys, data):
    dct.setdefault(key, []).append(val)

print(dct)
print(list(dct.values()))
</code></pre>
<p>Output:</p>
<pre><code>OrderedDict([('x', [1, 2, 3, 6, 7, 11, 12]), ('y', [4, 5]), ('z', [8, 9, 10])])
[[1, 2, 3, 6, 7, 11, 12], [4, 5], [8, 9, 10]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>OrderedDict may well be a better option but ....</p>
<pre><code>import itertools as it
from operator import itemgetter
x = 1
y = 2
z = 3
keys = [x,x,x,y,y,x,x,z,z,z,x,x]
data = [1,2,3,4,5,6,7,8,9,10,11,12]
key = itemgetter(1)
value = itemgetter(0)

data = sorted(zip(data, keys), key=key)
print [map(value, grp) for k, grp in it.groupby(data, key)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Beware that OrderedDict orders the keys by their insertion order, and not as if the keys were sorted after the fact. If the 'keys' list were not in the required order you would not get the intended result.</p>
<p>My solution:</p>
<pre><code>from collections import defaultdict

keys = ['x', 'x', 'x', 'y', 'y', 'x', 'x', 'z', 'z', 'z', 'x', 'x']
data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

# group 'data' values by 'key'
grouped = defaultdict(list)
for key, data in zip(keys, data):
    grouped[key].append(data)

# construct the final list of subgroups
# contents of each subgroup must be sorted
# also sorting the keys so that the 'x' subgroup comes before the 'y' subgroup etc
grouped_and_ordered = [sorted(grouped[key]) for key in sorted(grouped.keys())]
</code></pre>
</div>
<span class="comment-copy">Is what you have working?  If not, what is wrong with it?</span>
<span class="comment-copy">well it returns a sorted but flat list instead of list of lists...i want something like "result" list that i mentioned</span>
<span class="comment-copy">I would have thought that a <code>dict</code> or an <code>OrderedDict</code> would be a more useful output, e.g. something like <code>{'x': [1, 2, 3, 6, 7, 11, 12], 'y': [4, 5], 'z': [8, 9, 10]}</code>.</span>
<span class="comment-copy">Your welcome. BTW, did you define <code>x</code>, <code>y</code>, and <code>z</code> as <code>x, y, z = range(3)</code>?</span>
<span class="comment-copy">no i havent. why would i want to do that? to ensure proper sorting?</span>
<span class="comment-copy">Never mind, I just want know what <code>x</code>, <code>y</code>, and <code>z</code> in the list because they are some variables.</span>
<span class="comment-copy">yeah they could be either numbers that i use to group similar objects by or strings...either way they are sort-able.</span>
<span class="comment-copy">There seems to be one problem with this code. Last line of code group.append([item[0] for item in grp]) creates a list that at first subgroup has all of the items originally passed to it. After that the following  subgroups are the proper splits grouped together by the key. Ideas?</span>
