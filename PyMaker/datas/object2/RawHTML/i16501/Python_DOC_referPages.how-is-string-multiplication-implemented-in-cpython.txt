<div class="post-text" itemprop="text">
<p>Python allows the multiplication of strings by integers:</p>
<pre><code>&gt;&gt;&gt; 'hello' * 5
'hellohellohellohellohello'
</code></pre>
<p>How is this implemented in CPython? </p>
<p>I would particularly appreciate a pointer to the source code; <a href="http://hg.python.org/cpython/file/c6880edaf6f3" rel="nofollow">the Mercurial repository</a> is a labyrinth beyond my abilities to navigate.</p>
</div>
<div class="post-text" itemprop="text">
<p>Note: I'm going to answer for Python 3, where the string type is called <code>PyUnicode</code>. Python 2 is similar.</p>
<p>When a <code>BINARY_MULTIPLY</code> opcode is executed (in <code>Python/ceval.c</code>), there are two possible slots that can get called: <code>PyNumberMethods.nb_multiply</code> and <code>PySequenceMethods.sq_repeat</code>. (This is in <code>PyNumber_Multiply</code>, in <code>Objects/abstract.c</code>):</p>
<pre><code>PyObject *
PyNumber_Multiply(PyObject *v, PyObject *w)
{
    PyObject *result = binary_op1(v, w, NB_SLOT(nb_multiply));
    if (result == Py_NotImplemented) {
        // call sq_repeat on either side if available
</code></pre>
<p><code>PyUnicode</code> implements the latter, in <a href="http://hg.python.org/cpython/file/c4a86fe52006/Objects/unicodeobject.c#l12176" rel="nofollow"><code>unicode_repeat</code></a>:</p>
<pre><code>static PyObject*
unicode_repeat(PyObject *str, Py_ssize_t len)
{
    // ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For Python 3.x, the implementation can be found in <a href="http://hg.python.org/cpython/file/c4a86fe52006/Objects/unicodeobject.c" rel="nofollow"><code>Objects/unicodeobject.c</code></a>.  Specifically, it begins on <a href="http://hg.python.org/cpython/file/c4a86fe52006/Objects/unicodeobject.c#l12175" rel="nofollow">line 12175</a> where <code>unicode_repeat</code> is defined:</p>
<pre class="lang-c prettyprint-override"><code>static PyObject*
unicode_repeat(PyObject *str, Py_ssize_t len)
{
    PyObject *u;
    Py_ssize_t nchars, n;

    if (len &lt; 1)
        _Py_RETURN_UNICODE_EMPTY();

    /* no repeat, return original string */
    if (len == 1)
        return unicode_result_unchanged(str);

    if (PyUnicode_READY(str) == -1)
        return NULL;

    if (PyUnicode_GET_LENGTH(str) &gt; PY_SSIZE_T_MAX / len) {
        PyErr_SetString(PyExc_OverflowError,
                        "repeated string is too long");
        return NULL;
    }
    nchars = len * PyUnicode_GET_LENGTH(str);

    u = PyUnicode_New(nchars, PyUnicode_MAX_CHAR_VALUE(str));
    if (!u)
        return NULL;
    assert(PyUnicode_KIND(u) == PyUnicode_KIND(str));

    if (PyUnicode_GET_LENGTH(str) == 1) {
        const int kind = PyUnicode_KIND(str);
        const Py_UCS4 fill_char = PyUnicode_READ(kind, PyUnicode_DATA(str), 0);
        if (kind == PyUnicode_1BYTE_KIND) {
            void *to = PyUnicode_DATA(u);
            memset(to, (unsigned char)fill_char, len);
        }
        else if (kind == PyUnicode_2BYTE_KIND) {
            Py_UCS2 *ucs2 = PyUnicode_2BYTE_DATA(u);
            for (n = 0; n &lt; len; ++n)
                ucs2[n] = fill_char;
        } else {
            Py_UCS4 *ucs4 = PyUnicode_4BYTE_DATA(u);
            assert(kind == PyUnicode_4BYTE_KIND);
            for (n = 0; n &lt; len; ++n)
                ucs4[n] = fill_char;
        }
    }
    else {
        /* number of characters copied this far */
        Py_ssize_t done = PyUnicode_GET_LENGTH(str);
        const Py_ssize_t char_size = PyUnicode_KIND(str);
        char *to = (char *) PyUnicode_DATA(u);
        Py_MEMCPY(to, PyUnicode_DATA(str),
                  PyUnicode_GET_LENGTH(str) * char_size);
        while (done &lt; nchars) {
            n = (done &lt;= nchars-done) ? done : nchars-done;
            Py_MEMCPY(to + (done * char_size), to, n * char_size);
            done += n;
        }
    }

    assert(_PyUnicode_CheckConsistency(u, 1));
    return u;
}
</code></pre>
<p>Later, on <a href="http://hg.python.org/cpython/file/c4a86fe52006/Objects/unicodeobject.c#l13703" rel="nofollow">line 13703</a>, this function is supplied as the <a href="https://docs.python.org/3/c-api/typeobj.html#c.PySequenceMethods.sq_repeat" rel="nofollow"><code>sq_repeat</code></a> slot for the <a href="https://docs.python.org/3/c-api/typeobj.html#c.PySequenceMethods" rel="nofollow"><code>PySequenceMethods</code></a> of the <code>PyUnicode</code> object.</p>
</div>
<span class="comment-copy">That's not how to use <code>dis</code> - when you pass it a string it interprets it as bytecode! Try passing a <code>lambda</code>.</span>
<span class="comment-copy">@ecatmur What's worse, the <code>join()</code> was totally wrong - needs an iterator. I removed it (and will spend some time with <code>dis</code> docs).</span>
