<div class="post-text" itemprop="text">
<p>Python 3.4 <a href="https://docs.python.org/3/library/functools.html#functools.singledispatch">added</a> the ability to define function overloading with static methods. This is essentially the example from the documentation:</p>
<pre><code>from functools import singledispatch


class TestClass(object):
    @singledispatch
    def test_method(arg, verbose=False):
        if verbose:
            print("Let me just say,", end=" ")

        print(arg)

    @test_method.register(int)
    def _(arg):
        print("Strength in numbers, eh?", end=" ")
        print(arg)

    @test_method.register(list)
    def _(arg):
        print("Enumerate this:")

        for i, elem in enumerate(arg):
            print(i, elem)

if __name__ == '__main__':
    TestClass.test_method(55555)
    TestClass.test_method([33, 22, 11])
</code></pre>
<p>In its purest form, the <code>singledispatch</code> implementation relies on the first argument to identify type, therefore making it tricky to extend this functionality to instance methods. </p>
<p>Does anyone have any advice for how to use (or jerry-rig) this functionality to get it to work with instance methods?</p>
</div>
<div class="post-text" itemprop="text">
<p>Looking at the <a href="http://hg.python.org/cpython/file/f6f691ff27b9/Lib/functools.py#l706">source</a> for <code>singledispatch</code>, we can see that the decorator returns a function <code>wrapper()</code>, which selects a function to call from those registered based on the type of <code>args[0]</code> ...</p>
<pre><code>    def wrapper(*args, **kw):
        return dispatch(args[0].__class__)(*args, **kw)
</code></pre>
<p>... which is fine for a regular function, but not much use for an instance method, whose first argument is always going to be <code>self</code>.</p>
<p>We can, however, write a new decorator <code>methdispatch</code>, which relies on <code>singledispatch</code> to do the heavy lifting, but instead returns a wrapper function that selects which registered function to call based on the type of <code>args[1]</code>:</p>
<pre><code>from functools import singledispatch, update_wrapper

def methdispatch(func):
    dispatcher = singledispatch(func)
    def wrapper(*args, **kw):
        return dispatcher.dispatch(args[1].__class__)(*args, **kw)
    wrapper.register = dispatcher.register
    update_wrapper(wrapper, func)
    return wrapper
</code></pre>
<p>Here's a simple example of the decorator in use:</p>
<pre><code>class Patchwork(object):

    def __init__(self, **kwargs):
        for k, v in kwargs.items():
            setattr(self, k, v)

    @methdispatch
    def get(self, arg):
        return getattr(self, arg, None)

    @get.register(list)
    def _(self, arg):
        return [self.get(x) for x in arg]
</code></pre>
<p>Notice that both the decorated <code>get()</code> method and the method registered to <code>list</code> have an initial <code>self</code> argument as usual.</p>
<p>Testing the <code>Patchwork</code> class:</p>
<pre><code>&gt;&gt;&gt; pw = Patchwork(a=1, b=2, c=3)
&gt;&gt;&gt; pw.get("b")
2
&gt;&gt;&gt; pw.get(["a", "c"])
[1, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A decorator is essentially a wrapper that takes the wrapped function as an argument and returns another function.</p>
<p>As stated in the accepted answer, <code>singledispatch</code> returns a <code>wrapper</code> that takes the first argument as registered type - <code>self</code> in instance methods.</p>
<p>As shown in that answer, in cases like this you can write another wrapper to monkey patch the decorator. But this kind of hacky fixes are not always the best option.</p>
<p>As with like any other function, you can call the wrapper and pass the arguments to it explicitly, which seems simpler, flatter and more readable to me if this kind of method overloading is only seldom made in a package.</p>
<pre><code>from functools import singledispatch

class TestClass(object):

    def __init__(self):
        self.test_method = singledispatch(self.test_method)
        self.test_method.register(int, self._test_method_int)
        self.test_method.register(list, self._test_method_list)

    def test_method(self, arg, verbose=False):
        if verbose:
            print("Let me just say,", end=" ")

        print(arg)

    def _test_method_int(self, arg):
        print("Strength in numbers, eh?", end=" ")
        print(arg)

    def _test_method_list(self, arg):
        print("Enumerate this:")

        for i, elem in enumerate(arg):
            print(i, elem)


if __name__ == '__main__':
    test = TestClass()
    test.test_method(55555)
    test.test_method([33, 22, 11])
</code></pre>
<p>There's another module, <a href="http://multiple-dispatch.readthedocs.io/en/latest/index.html" rel="noreferrer"><code>multipledispatch</code></a> (not standard but included in Anaconda and without any non-standard dependencies) that, as the name already indicates and unlike <code>singledispatch</code>, allows multimethods.</p>
<p>In addition to <code>Dispatcher</code> objects, with <code>singledispatch</code>-compatible syntaxis, it provides a <code>dispatch</code> decorator which hides the creation and manipulation of these objects from the user.</p>
<blockquote>
<p>The dispatch decorator uses the name of the function to select the
  appropriate Dispatcher object to which it adds the new
  signature/function. When it encounters a new function name it creates
  a new Dispatcher object and stores name/Dispatcher pair in a namespace
  for future reference.</p>
</blockquote>
<p>For instance:</p>
<pre><code>from types import LambdaType
from multipledispatch import dispatch

class TestClass(object):

    @dispatch(object)
    def test_method(self, arg, verbose=False):
        if verbose:
            print("Let me just say,", end=" ")

        print(arg)

    @dispatch(int, float)
    def test_method(self, arg, arg2):
        print("Strength in numbers, eh?", end=" ")
        print(arg + arg2)

    @dispatch((list, tuple), LambdaType, type)
    def test_method(self, arg, arg2, arg3):
        print("Enumerate this:")

        for i, elem in enumerate(arg):
            print(i, arg3(arg2(elem)))


if __name__ == '__main__':

    test = TestClass()
    test.test_method(55555, 9.5)
    test.test_method([33, 22, 11], lambda x: x*2, float)
</code></pre>
</div>
<span class="comment-copy">Can you show a contrived example of the kind of thing you're after? IHMO I think <a href="https://pypi.python.org/pypi/circuits" rel="nofollow noreferrer">circuits</a> would be a better fit for what you want -- Disclaimer: I'm the developer.</span>
<span class="comment-copy">@JamesMills I don't know if I can update the original post with a complete example and still keep this a serious conversation. Maybe something like @test_method.register(type_) (the standard register() command) followed by "def _(self, arg)", maybe made possible by some intermediary bridge function or 'partial' method (functools.partialmethod). I'm hesitant to make any specific guesses since I don't know how register() transforms the original method.</span>
<span class="comment-copy">Without knowing more about the problem you're trying to solve in general that's all the advice I can give. AFAIK single-dispatch as introduced in Python 3 was designed for dispatching functions based on the types of arguments passed.</span>
<span class="comment-copy">@JamesMills The problem/desire is being able to get single dispatch on objects (as opposed to classes). I rarely use static methods rather than just reverting plain functions. I could give you an example, but it'd look like every other example of a class with bindable methods in the world with a "register" decorator (I realize that the calling convention of register() requires the base definition to be a static method, so the treatment would have to account for that).</span>
<span class="comment-copy">That's why I suggested you look at circuits -- it may be "close enough" to what you need.</span>
<span class="comment-copy">Yes! Being, myself, a rather dim individual, I was just wondering if someone could postulate a potential solution using a couple of the existing tools at hand... You know, like with the Apollo 13 mission. Thanks for the PoC.</span>
<span class="comment-copy">Hm, interesting, I was looking to see if something like this had been done. A small correction I would make is using <code>update_wrapper(wrapper, dispatcher)</code> rather than func itself. singledispatch uses <code>update_wrapper</code> internally already, so doing this passes up the full interface of singledispatch.</span>
