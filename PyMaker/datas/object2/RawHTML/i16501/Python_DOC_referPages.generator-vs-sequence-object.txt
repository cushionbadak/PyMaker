<div class="post-text" itemprop="text">
<p>I know the difference between <code>range</code> and <code>xrange</code>.<br/>
But I was surprised to see that <code>xrange</code> wasn't a<code>generator</code> but a <code>sequence object</code>.</p>
<p>What's the difference then, how to create a <code>sequence object</code> and when used it over a <code>generator</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason that <code>xrange</code> is a sequence object is because it supports the <a href="https://docs.python.org/2/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange" rel="noreferrer">sequence methods interface</a>.  For example you can index it (which is something you can't do with a vanilla generator):</p>
<pre><code>print xrange(30)[5]  # No Error
</code></pre>
<p>In other words, </p>
<ul>
<li>something is a sequence if it supports all of the methods defined in that link.</li>
<li>If it's a generator, it probably only supports a <a href="https://docs.python.org/2/reference/expressions.html#generator-iterator-methods" rel="noreferrer">couple methods</a> (<code>.next</code> or <code>.__next__</code> are the most important)<sup>1</sup>.  </li>
<li>there's also an in-between land which is "iterable" -- "iterables" have a typically<sup>2</sup> defined <code>__iter__</code> method which returns "generator" (something with a well defined <code>.next</code> or <code>.__next__</code><sup>3</sup> method)</li>
<li>just to be complete, you'll often see people say "iterators" which are very similar to generators (implement <code>__iter__</code> which returns the object itself and has a well defined <code>next</code> and/or <code>__next__</code> method).</li>
</ul>
<p>More formal definitions can be found in the <a href="https://docs.python.org/2/glossary.html" rel="noreferrer">documentation glossary</a></p>
<p><sup><sup>1</sup>generators also support <code>__iter__</code> and simply return themselves. so techincally, all generators are also iterables (and iterators!), but not all iterables (iterators) are generators.</sup><br/>
<sup><sup>2</sup><code>__len__</code> + <code>__getitem__</code> is enough to create an iterable as pointed out in the comments.</sup><br/>
<sup><sup>3</sup><code>__next__</code> is the method name for python3.x</sup></p>
</div>
<div class="post-text" itemprop="text">
<p>A <code>sequence object</code> is a special, C-provided type.  A <code>generator</code> can be written by user code.</p>
<p>This is a Python 2 thing -- in Python 3:</p>
<pre><code>&gt;&gt;&gt; print(type(range(1)))
&lt;class 'range'&gt;
&gt;&gt;&gt; print(type(xrange(1)))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'xrange' is not defined
</code></pre>
<p>Python2:</p>
<pre><code>Python 2.7.5+ (default, Feb 27 2014, 19:37:08) 
[GCC 4.8.1] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; print type(xrange(1))
&lt;type 'xrange'&gt;
</code></pre>
</div>
<span class="comment-copy">Strings are iterables too and they don't have <code>__iter__</code> method on them, strings use <code>__getitem__</code>.</span>
<span class="comment-copy">@200OK -- that's true in python2.x, but "fixed" in python3.x. <code>__getitem__</code> + <code>__len__</code> is also sufficient to create an iterable.</span>
<span class="comment-copy">You should as well mention the word "iterator", which is an object returning itself from its <code>__iter__()</code> and having (<code>__</code>)<code>next</code>(<code>__</code>) as well. A generator is only one example of these. <code>iter([1, 2, 3])</code> has the same properties. Note that these are exhausted and unusable once used.</span>
<span class="comment-copy">@mgilson Yes. See <a href="https://docs.python.org/3/library/stdtypes.html#typeiter" rel="nofollow noreferrer">here</a> and especially <a href="https://docs.python.org/3/glossary.html#term-iterable" rel="nofollow noreferrer">here</a>.</span>
<span class="comment-copy">An important difference is: you can operate multiple times over an iterable (such as a list), but only once over an iterator (which is and remains exhausted afterwards). See <code>a = [1, 2, 3]; for i in a: print i; for i in a: print i; b = iter(a); for i in b: print i; for i in b: print i</code> (replace <code>;</code> by line breaks).</span>
<span class="comment-copy">thanks but I already know the difference between python 2 and 3, but it's nice to see that the type is not the same between both version.</span>
