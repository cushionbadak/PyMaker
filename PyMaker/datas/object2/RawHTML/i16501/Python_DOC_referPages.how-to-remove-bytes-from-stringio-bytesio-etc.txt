<div class="post-text" itemprop="text">
<p>I'd like to use a BytesIO object as a continuous buffer (a common use-case). However, is it possible to remove bytes off the head that are no longer needed?</p>
<p>It doesn't seem like it, as there is only a truncate() method.</p>
<pre><code>['__class__', '__delattr__', '__doc__', '__enter__', '__exit__', '__format__', '__getattribute__', '__getstate__', '__hash__', '__init__', '__iter__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setstate__', '__sizeof__', '__str__', '__subclasshook__', '_checkClosed', '_checkReadable', '_checkSeekable', '_checkWritable', 'close', 'closed', 'detach', 'fileno', 'flush', 'getvalue', 'isatty', 'next', 'read', 'read1', 'readable', 'readinto', 'readline', 'readlines', 'seek', 'seekable', 'tell', 'truncate', 'writable', 'write', 'writelines']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No, you cannot, as <code>BytesIO</code> is an in-memory version of a common file object.</p>
<p>As such it is treated as a sequence of bytes that can be overwritten or appended to, and just like a file removing elements from the front is not efficient as it requires a complete rewrite of all data following.</p>
<p>You probably want to look into the <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow"><code>collections.deque()</code> type</a> instead.</p>
</div>
<span class="comment-copy">I can think of an alternative implementation, whereby the underlying IOBase object implements a series of memory chunks. Deque behavior, though not the delete behavior that I inquired about, can be emulated by just popping-off the head chunks as they are depleted... If such functionality is requested. Else, no harm done. As I'm guessing that the IOBase/BytesIO implementation already uses a series of not-necessarily-contiguous memory blocks rather than a single, contiguous memory block, I don't see this as a dramatic departure from its existing design.</span>
<span class="comment-copy"><code>BytesIO</code> uses one <code>char *buf</code> object to store the data. What you want is a non-standard use of files, and the standard library doesn't offer it.</span>
