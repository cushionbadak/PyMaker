<div class="post-text" itemprop="text">
<p>In python 2.7 time.mktime does not accept year before 1900, this is strange.</p>
<pre><code>&gt;&gt;&gt; time.mktime(time.strptime("1/1/1899","%d/%m/%Y"))
Traceback (most recent call last):
  File "&lt;pyshell#293&gt;", line 1, in &lt;module&gt;
    time.mktime(time.strptime("1/1/1899","%d/%m/%Y"))
ValueError: year out of range
</code></pre>
<p>But the calendar.timegm can do all the values.</p>
<pre><code>&gt;&gt;&gt; calendar.timegm(time.strptime("1/1/1899","%d/%m/%Y"))
-2240524800

&gt;&gt;&gt; calendar.timegm(time.strptime("1/1/0001","%d/%m/%Y"))
-62135596800
</code></pre>
<p>Is this expected behaviour? It is kind of strange to me. It seems not possible to overflow double for just -71 years.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is expected behaviour.</p>
<ul>
<li><p>The first is documented in the <a href="https://docs.python.org/2.7/library/time.html" rel="nofollow">Python 2.7 docs under Year 2000 (Y2K) issues</a>. There it  states</p>
<blockquote>
<p>Values 100â€“1899 are always illegal.</p>
</blockquote>
<p>Python 3 supports these dates, so there are no such restrictions (<a href="https://docs.python.org/3.4/library/time.html" rel="nofollow">docs</a>).</p></li>
<li><p>The second point with the negative dates is also expected. The dates are in <a href="https://en.wikipedia.org/wiki/Unix_time" rel="nofollow">seconds since the epoch</a> (seconds since 00:00:00 UTC on 1 January 1970). So dates before this are stored as negative numbers.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>The issue you have found is related to the platform specific time implementation that <code>time.mktime</code> falls back on:</p>
<blockquote>
<p>The earliest date for which it can generate a time is platform-dependent.</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/time.html#time.mktime" rel="nofollow">https://docs.python.org/3/library/time.html#time.mktime</a></p>
<p><code>calendar.timegm</code> is a completely separate implementation that happens to operate with time tuples. This tuple stores the entire year so it is able to represent pre 1900 dates easily.</p>
<p><a href="https://docs.python.org/2/library/time.html#time.struct_time" rel="nofollow">https://docs.python.org/2/library/time.html#time.struct_time</a></p>
</div>
