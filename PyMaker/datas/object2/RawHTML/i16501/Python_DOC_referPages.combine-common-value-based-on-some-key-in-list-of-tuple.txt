<div class="post-text" itemprop="text">
<p>e.g</p>
<pre><code>data = [ (item1, ('1-jan' ,45)) , (item2, ('21-jan',65)), (item1, ('21-jan',48))]
</code></pre>
<p>I like something like:</p>
<pre><code>result = [ (item1, [('1-jan' ,45),('21-jan',48)]), (item2, [('21-jan',65)])]
</code></pre>
<p>to be precise I need final outcome</p>
<pre><code>result = { item1: ('1-jan':45,'21-jan':48)), item2: ('21-jan':65)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2.7/library/stdtypes.html#dict.setdefault" rel="nofollow"><em>dict.setdefault()</em></a> to easily create groupings in a dictionary:</p>
<pre><code>&gt;&gt;&gt; data = [ ('item1', ('1-jan' ,45)) , ('item2', ('21-jan',65)), ('item1', ('21-jan',48))]
&gt;&gt;&gt; result = {}
&gt;&gt;&gt; for k, v in data:
        result.setdefault(k, []).append(v)

&gt;&gt;&gt; result
{'item2': [('21-jan', 65)], 'item1': [('1-jan', 45), ('21-jan', 48)]}
</code></pre>
<p>You can also use <a href="https://docs.python.org/2.7/library/collections.html#defaultdict-objects" rel="nofollow">collections.defaultdict</a> to achieve the same end.</p>
</div>
<div class="post-text" itemprop="text">
<p>If @Raymond's <code>setdefault()</code> doesn't work for you, try a <code>defaultdict(list)</code> object:</p>
<h2>source</h2>
<pre><code>data = [ ("item1", ('1-jan' ,45)) , ("item2", ('21-jan',65)), ("item1", ('21-jan',48))]

from collections import defaultdict
out = defaultdict(list)
for key,value in data:
    out[key].append(value)

print out
</code></pre>
<h2>output</h2>
<pre><code>defaultdict(&lt;type 'list'&gt;, {'item2': [('21-jan', 65)], 'item1': [('1-jan', 45), ('21-jan', 48)]})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is not as simple as iterating through each value and adding it to a dictionary.  You must check to make sure that the key (item1, item2) are not in the dictionary first.  If they are, you must append the value to the existing key.</p>
<p>Here you go:</p>
<pre><code>data = [ ('item1', ('1-jan' ,45)) , ('item2', ('21-jan',65)), ('item1', ('21-jan',48))]

dataDict = {}

for i in range(len(data)):
    if data[i][0] not in dataDict:
        dataDict[data[i][0]] = data[i][1]
    else:
        dataDict[data[i][0]] += data[i][1]
</code></pre>
<p>As the above users have commented, you can use default dictionaries to make life more simple.</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby()</code></a></span>
<span class="comment-copy">whats with the <code>:</code> in your values?</span>
<span class="comment-copy">+1. Thank you for <code>setdefault</code>.</span>
<span class="comment-copy">Thanks @raymondHettinger, Though I figured it out but your answer is neater. My solution was --- result = {} --- for k, v in deco:---     result.setdefault(k, []).append(v) ---     try: ---         result[k] += v ---      except KeyError: ---          result[k] = v ---</span>
