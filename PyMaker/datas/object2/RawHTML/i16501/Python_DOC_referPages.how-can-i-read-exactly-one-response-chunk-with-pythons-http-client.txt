<div class="post-text" itemprop="text">
<p>Using <code>http.client</code> in Python 3.3+ (or any other builtin python HTTP client library), how can I read a chunked HTTP response exactly one HTTP chunk at a time?</p>
<p>I'm extending an existing test fixture (written in python using <code>http.client</code>) for a server which writes its response using HTTP's chunked transfer encoding. For the sake of simplicity, let's say that I'd like to be able to print a message whenever an HTTP chunk is received by the client.</p>
<p>My code follows a fairly standard pattern for reading a large response:</p>
<pre><code>conn = http.client.HTTPConnection(...)
conn.request(...)
response = conn.getresponse()

resbody = []

while True:
    chunk = response.read(1024)
    if len(chunk):
        resbody.append(chunk)
    else:
        break

conn.close();
</code></pre>
<p>But this reads 1024 byte chunks regardless of whether or not the server is sending 10 byte chunks or 10MiB chunks.</p>
<p>What I'm looking for would be something like the following:</p>
<pre><code>while True:
    chunk = response.readchunk()
    if len(chunk):
        resbody.append(chunk)
    else
        break
</code></pre>
<p>If this is not possible with <code>http.client</code>, is it possible with another builtin http client library? If it's not possible with a builtin client lib, is it possible with <code>pip</code> installable module?</p>
</div>
<div class="post-text" itemprop="text">
<p>Update:</p>
<p>The benefit of chunked transfer encoding is to allow the transmission of dynamically generated content. Whether a HTTP library lets you read individual chunks or not is a separate issue (see <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.6.1" rel="nofollow noreferrer">RFC 2616 - Section 3.6.1</a>).</p>
<p>I can see how what you are trying to do would be useful, but the standard python http client libraries don't do what you want without some hackery (see <a href="https://docs.python.org/3/library/http.client.html" rel="nofollow noreferrer">http.client</a> and <a href="https://docs.python.org/2/library/httplib.html" rel="nofollow noreferrer">httplib</a>).</p>
<p>What you are trying to do may be fine for use in your test fixture, but in the wild there are no guarantees. It is possible for the chunking of the data read by your client to be be different from the chunking of the data sent by your server. E.g. the data could have been "re-chunked" by a proxy server before it arrived (see <a href="http://www.ietf.org/rfc/rfc6202.txt" rel="nofollow noreferrer">RFC 2616 - Section 3.2 - Framing Techniques</a>).</p>
<hr/>
<p>The trick is to tell the response object that it isn't chunked (<code>resp.chunked = False</code>) so that it returns the raw bytes. This allows you to parse the size and data of each chunk as it is returned.</p>
<pre><code>import http.client

conn = http.client.HTTPConnection("localhost")
conn.request('GET', "/")
resp = conn.getresponse()
resp.chunked = False

def get_chunk_size():
    size_str = resp.read(2)
    while size_str[-2:] != b"\r\n":
        size_str += resp.read(1)
    return int(size_str[:-2], 16)

def get_chunk_data(chunk_size):
    data = resp.read(chunk_size)
    resp.read(2)
    return data

respbody = ""
while True:
    chunk_size = get_chunk_size()
    if (chunk_size == 0):
        break
    else:
        chunk_data = get_chunk_data(chunk_size)
        print("Chunk Received: " + chunk_data.decode())
        respbody += chunk_data.decode()

conn.close()
print(respbody)
</code></pre>
</div>
<span class="comment-copy">this any use <a href="http://docs.python-requests.org/en/latest/user/advanced/#body-content-workflow" rel="nofollow noreferrer">docs.python-requests.org/en/latest/user/advanced/â€¦</a>?</span>
<span class="comment-copy">I'm not sure that it is. Or, if it is, I'm too dumb to see how I can use that to read exactly one HTTP chunk at a time from the response</span>
<span class="comment-copy">Upvoted because you actually answered my question. Didn't accept however because it's a bit of a hack. Benefit of chunked encoding should be the ability to read chunk-by-chunk. The fact that http.client supports chunked encoding but apparently doesn't expose it is a bit sad...</span>
<span class="comment-copy">Small bug: chunk size is represented in hex so should read <code>int(size_str[:-2], 16)</code>. See HTTP/1.1 <a href="https://tools.ietf.org/html/rfc7230#section-4.1" rel="nofollow noreferrer">tools.ietf.org/html/rfc7230#section-4.1</a> (I edited). Otherwise: works well enough, if hacky as Ben says.</span>
