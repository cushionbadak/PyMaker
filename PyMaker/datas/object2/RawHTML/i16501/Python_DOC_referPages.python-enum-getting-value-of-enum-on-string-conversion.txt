<div class="post-text" itemprop="text">
<p>I have following enum defined</p>
<pre><code>from enum import Enum


class D(Enum):
    x = 1
    y = 2


print(D.x)
</code></pre>
<p>now the printed value is </p>
<pre><code>D.x
</code></pre>
<p>instead I wanted the enum's value to be print </p>
<pre><code>1
</code></pre>
<p>what can be done to achieve this functionality.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are printing the enum <em>object</em>. Use the <code>.value</code> attribute if you wanted just to print that:</p>
<pre><code>print(D.x.value)
</code></pre>
<p>See the <a href="https://docs.python.org/3/library/enum.html#programmatic-access-to-enumeration-members-and-their-attributes"><em>Programmatic access to enumeration members and their attributes</em> section</a>:</p>
<blockquote>
<p>If you have an enum member and need its name or value:</p>
<pre><code>&gt;&gt;&gt;
&gt;&gt;&gt; member = Color.red
&gt;&gt;&gt; member.name
'red'
&gt;&gt;&gt; member.value
1
</code></pre>
</blockquote>
<p>You could add a <code>__str__</code> method to your enum, if all you wanted was to provide a custom string representation:</p>
<pre><code>class D(Enum):
    def __str__(self):
        return str(self.value)

    x = 1
    y = 2
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from enum import Enum
&gt;&gt;&gt; class D(Enum):
...     def __str__(self):
...         return str(self.value)
...     x = 1
...     y = 2
... 
&gt;&gt;&gt; D.x
&lt;D.x: 1&gt;
&gt;&gt;&gt; print(D.x)
1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I implemented access using the following</p>
<pre><code>class D(Enum):
    x = 1
    y = 2

    def __str__(self):
        return '%s' % self.value
</code></pre>
<p>now I can just do </p>
<p><code>print(D.x)</code> to get <code>1</code> as result.</p>
<p>You can also use <code>self.name</code> in case you wanted to print <code>x</code> instead of <code>1</code>.</p>
</div>
<span class="comment-copy"><code>print(D.x.value)</code></span>
<span class="comment-copy">I should clarify the access parameters, I know the D.x.value thing, what I want is D.x string conversion to return the value, sorry if question doesn't make the condition clear.</span>
<span class="comment-copy">I don't want to exactly do that, one thing I did is override enum class' <b>str</b> attribute</span>
<span class="comment-copy">@VaibhavMishra: That's also an option; however, I'd still consider just printing the <code>.value</code> attribute.</span>
<span class="comment-copy">the given example was just a simplified form, in my current codebase, the enum is accessed all the time in string form and everytime doing a value doesn't look very good. Thanks for your answer.</span>
<span class="comment-copy">For  using the Enum as list indices add an __index__() function instead of __str__()</span>
<span class="comment-copy">Why the string formatting and <code>self._value_</code>? <code>return str(self.value)</code> is more straightforward.</span>
<span class="comment-copy">I just looked at the source and this was how it is implemented, however you are right and <code>self.value</code> is cleaner.</span>
<span class="comment-copy">The single-underscore attributes are internal to the generated enum class; better stick to the documented attribute (which happens to be a special descriptor so that you can still use <code>value</code> as a name on your enum type).</span>
<span class="comment-copy">@MartijnPieters agreed</span>
<span class="comment-copy">it will change type</span>
