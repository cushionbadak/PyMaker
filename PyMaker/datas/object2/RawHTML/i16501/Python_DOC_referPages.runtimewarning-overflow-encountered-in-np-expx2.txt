<div class="post-text" itemprop="text">
<p>I need to calculate <code>exp(x**2)</code> where <code>x = numpy.arange(30,90)</code>. This raises the warning:</p>
<pre><code>RuntimeWarning: overflow encountered in exp
inf
</code></pre>
<p>I cannot safely ignore this warning, but neither SymPy nor mpmath is a solution and I need to perform array operations so a Numpy solution would be my dream.</p>
<p>Does anyone know how to handle this problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a data type that has the necessary range, for example <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow"><code>decimal.Decimal</code></a>:</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; x = np.arange(Decimal(30), Decimal(90))
&gt;&gt;&gt; y = np.exp(x ** 2)
&gt;&gt;&gt; y[-1]
Decimal('1.113246031563799750400684712E+3440')
</code></pre>
<p>But what are you using these numbers for? Could you avoid the exponentiation and work with logarithms? More detail about your problem would be helpful.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you can use this method to solve this problem:</p>
<blockquote>
<p>Normalized</p>
</blockquote>
<p>I overcome the problem in this method. Before using this method, my classify accuracy is :86%. After using this method, my classify accuracy is :96%!!!
It's great!<br/>
first:<br/>
<a href="http://i.stack.imgur.com/3VmJo.gif" rel="nofollow">Min-Max scaling</a><br/>
second:<br/>
<a href="http://i.stack.imgur.com/BYs0q.png" rel="nofollow">Z-score standardization</a> </p>
<p>These are common methods to implement <code>normalization</code>.<br/>
I use the first method. And I alter it. The maximum number is divided by 10. 
So the maximum number of the result is 10. Then exp(-10) will be not <code>overflow</code>!<br/>
I hope my answer will help you !(^_^)</p>
</div>
<span class="comment-copy">For this <i>particular</i> case, using <code>numpy.longfloat</code> as a NumPy dtype might just work.  This depends on your platform, though: if you're lucky, <code>numpy.longfloat</code> is the 80-bit IEEE 754 extended precision type, usually padded with zero bytes so that it ends up being reported as <code>float128</code> or <code>float96</code>.  If you're unlucky, it'll just be the same as <code>numpy.float64</code>.  [If you're <i>very</i> lucky indeed, it'll be a genuine 128-bit type.]  But what's the use-case?  Why do you need to handle such enormous values?</span>
<span class="comment-copy"><code>numpy.exp(numpy.longfloat(89**2))</code> -&gt; <code>1.1132460315637997504e+3440</code></span>
<span class="comment-copy">It works perfectly fine, thank you! As input it takes the membrane potential that has characteristic values in that regime. It is just part of a calculation and is multiplied with another term.</span>
<span class="comment-copy">Hmm.  You're dangerously close to the overflow limits, though, so I'd expect that there would still be problems with different input data.  (The 80-bit <code>longfloat</code> type overflows at around <code>1.19e+4932</code>.)  I'd definitely be looking for ways to keep track of the logs instead, as @GarethRees suggested.</span>
