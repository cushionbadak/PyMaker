<div class="post-text" itemprop="text">
<p>I can determine the width of the terminal in Python with a subprocess-handled query such as the following:</p>
<pre><code>int(subprocess.Popen(['tput', 'cols'], stdout = subprocess.PIPE).communicate()[0].strip('\n'))
</code></pre>
<p>How could I determine the Bash user name in a similar way? So, how could I see the value of ${USER} in Python using subprocess?</p>
</div>
<div class="post-text" itemprop="text">
<p>As Wooble and dano say, don't use subprocess for this. Use <code>os.getenv("USER")</code> or <code>os.environ["USER"]</code>.</p>
<p>If you really want to use <code>subprocess</code> then <code>Popen(['bash', '-c', 'echo "$USER"'], ...)</code> seems to work as does <code>Popen("echo $USER", shell=True)</code> though neither of those is particularly pleasant (though to use environment variables on the command line being executed the shell must be involved so you can't really avoid it).</p>
<p>Edit: My previous subprocess suggestion did not seem to work correctly. I believe my original test was flawed.</p>
</div>
<span class="comment-copy">Why do you want to use <code>subprocess</code>? The python process itself has access to the environment.</span>
<span class="comment-copy">You can use <a href="https://docs.python.org/2/library/os.html#os.environ" rel="nofollow noreferrer"><code>os.environ</code></a> for this. e.g. <code>print(os.environ['USER'])</code></span>
<span class="comment-copy">Thank you very much for your suggestions. Part of the motivation is wanting to understand how to use Bash variables in <code>subprocess</code> methods. I am not sure how to do this. Accessing the environment variable ${USER} is a simple example.</span>
<span class="comment-copy">The thing is, calling Python subprocess with a bash-style variable name does not do any variable expansion, globbing, etc.     There is no shell between Python subprocessing, and the argv/argc of the program you are invoking.</span>
<span class="comment-copy">unrelated: there is <a href="https://docs.python.org/3/library/shutil.html#shutil.get_terminal_size" rel="nofollow noreferrer"><code>shutil.get_terminal_size()</code> function</a> in Python 3.3+, to get width/height of the terminal.</span>
<span class="comment-copy">Thank you very much for your suggestions on using the <code>getenv</code> and <code>environ</code> methods of the module <code>os</code>. This works well. Part of the motivation in wanting to use the module <code>subprocess</code> is wanting to understand how to use Bash variables in <code>subprocess</code> methods. I have tried your <code>subprocess.Popen(['echo', '${USER}'])</code> suggestion but am presented with '${USER}' as a response rather than the actual environment variable value in both Python 2.7.6 and 3.4.0. Do you know how to access the actual value?</span>
<span class="comment-copy">Ah, great. Your edits have made that work. Thanks again for your help!</span>
<span class="comment-copy">@d3pd: A <a href="http://stackoverflow.com/q/842059/4279">portable way to find out the current username in Python is <code>getpass.getuser()</code> function</a>.</span>
<span class="comment-copy">@Etan Reisner: <i>do not</i> use a list argument and <code>shell=True</code> together. Always pass a string if you use <code>shell=True</code> instead.</span>
<span class="comment-copy">@J.F.Sebastian Would you care to enlighten me as to why? (I am by no means a python person.)</span>
