<div class="post-text" itemprop="text">
<p>My client currently has text files that are output as tab delimited data and with HTML table chunks.  Their system takes these HTML table chunks and sticks them in an HTML template file.  I was looking at outputting the data as json or xml, and separating out the views functions.  I've done this a bunch with front-end processes.  The difference for me here is that I'm processing the data on the server-side and outputting simple HTML, instead of populating it via Javascript.  My tendency is towards json, since I already am outputting a few other files in this system that way.</p>
</div>
<div class="post-text" itemprop="text">
<p>JSON is probably your best bet. Python has an excellent <a href="https://docs.python.org/3/library/json.html" rel="nofollow">JSON library</a> which can provide native Python objects with just one function call. From the docs:</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; json.loads('["foo", {"bar":["baz", null, 1.0, 2]}]')
['foo', {'bar': ['baz', None, 1.0, 2]}]
</code></pre>
<p>Just save the output of <code>json.loads</code> into a variable and you're off and running.</p>
</div>
<span class="comment-copy">You are planning to feed the data <i>into</i> Python?</span>
<span class="comment-copy">I know - weird.  I'm trying to triage.  The data comes from a bunch of different sources with different people controlling the processes that are generating it.  By the time I get my hands on it, it's a jumble of various formats.  I'm looking to at least standardize, and I'm pretty sure I can have them at least give me json.</span>
<span class="comment-copy">Cool.  That was my guess, but I wanted to vet that there weren't hidden issues with it.  Thanks.</span>
