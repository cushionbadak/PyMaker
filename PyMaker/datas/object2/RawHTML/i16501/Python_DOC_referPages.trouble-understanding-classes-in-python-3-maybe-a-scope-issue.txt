<div class="post-text" itemprop="text">
<p>I'm having trouble with understanding classes and the way their scopes work. 
This is the code that I have now. </p>
<pre><code>class Player():  
    def __init__(self):
        self.wheatFields = 1 #line 3
        self.wheatProduction = self.wheatFields * 10 #line 4

player = Player()
def main(player):
    print('Wheat fields: ' +str(player.wheatFields))
    print('Production: ' +str(player.wheatProduction))
    print('What do you want to do?\n1) Add wheat field')
    if input() == '1':
        player.wheatFields += 1
</code></pre>
<p>Now I know this is wrong, but if someone can explain why I am wrong, but I would like to know why. </p>
<p>On line 3 and 4, they declare the variables wheatFields and wheatProduction. That means that I can use player.wheatFields and player.wheatProduction to call them. On line 11, it is saying to increase the wheatFields by one. This variable successfully changes and saves on the main menu? How come the wheatProduction variable doesn't change if it is equal to wheatFields * 10?</p>
<p>Is it because it's in the initializer and only runs once?
If that is the case, how can I make it to where it updates every time I add a wheat field to my player?</p>
<p>I tried doing this, too, but it said that the variable wasn't defined.</p>
<pre><code>class Player():
    def __init__(self):
        self.wheatFields = 1
    wheatProduction = wheatFields * 10
</code></pre>
<p>This tells me that wheatFields is not defined, but it is just in the line above it.</p>
<p>EDIT:
Thank you, dm03514, but I am still having some trouble. What your're saying makes sense, and I don't understand why this isn't working. </p>
<pre><code>class Player():
    def __init__(self):
        self.wheatFields = 1
        self.wheatProduction = self.wheatFields * 10
    def wheatProduction(self):
        return self.wheatFields * 10
player = Player()
def main(player):
    print('Wheat fields: ' +str(player.wheatFields))
    print('Production: ' + str(player.wheatProduction))
    print('What do you want to do?\n1) Add wheat field')
    if input() == '1':
         player.wheatFields += 1
while 1:
    main(player)
</code></pre>
<p>This still causes wheat fields to go up, but when I call player.wheatProduction, it is staying the same for some reason. </p>
</div>
<div class="post-text" itemprop="text">
<p>it doesn't change because it is only assigned 1 time when your class is initialized</p>
<p>There are a number of ways you can address it.  If <code>wheatproduction</code> should always be based on <code>wheatfields</code> multiple you could turn it into a <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow">property</a> so it is calculated every time you access it:</p>
<pre><code>class Player():
   @property
   def wheatProduction(self):
      return self.wheatFields * 10
</code></pre>
</div>
<span class="comment-copy">A regular variable you assign as <code>wheatProduction = wheatFields * 10</code> won't automatically change when you change <code>wheatFields</code>. Why would you expect instance variables to behave differently?</span>
<span class="comment-copy">@user2357112 I'm thought that when I defined wheatProduction and have it set to return wheatFields * 10, whenever I would call player.wheatProduction it would take the number of wheatFields and return 10 times that amount.</span>
<span class="comment-copy">thank you for the help, but please read my edit. I'm not sure if I'm doing something other than you suggested, or if you may have overlooked something.</span>
<span class="comment-copy">@KyleMe: Did you see the part that says <code>@property</code>? That part's important. Put that in, and stop trying to set <code>wheatProduction</code> in the constructor.</span>
<span class="comment-copy">@user2357112 Thank you for the help. I thought that (at)property was just an abbreviation for me to add the other code I had. I didn't know that (at)property was a thing. Turns out that dm03514 was right all along =p</span>
<span class="comment-copy">I would skip the <code>@property</code> bit for now, and just make <code>wheatProduction</code> a method.  Better stick with the basics for now.</span>
