<div class="post-text" itemprop="text">
<p>How do I tell whether a number, stored as a string, is an int or a float?</p>
<p>For example:</p>
<pre><code>def isint(x):
    if f(x):
        print 'this is an int'
    else:
        print 'this is a float'

&gt;&gt;&gt; x = '3'
&gt;&gt;&gt; isint(x)
&gt;&gt;&gt; this is an int
&gt;&gt;&gt; x = '3.14159'
&gt;&gt;&gt; isint(x)
&gt;&gt;&gt; this is a float
</code></pre>
<p><strong>What is the required <code>f(x)</code> function?</strong></p>
<p>One solution is to convert x to a float, find <code>r = x % 1</code>, and then determin whether <code>r == 0</code>. But is there anything built into Python that does this for me more neatly?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/ast.html#ast.literal_eval" rel="nofollow"><code>ast.literal_eval</code></a>:</p>
<pre><code>&gt;&gt;&gt; from ast import literal_eval
&gt;&gt;&gt; type(literal_eval('1.01'))
&lt;type 'float'&gt;
&gt;&gt;&gt; type(literal_eval('1'))
&lt;type 'int'&gt;
&gt;&gt;&gt; type(literal_eval('1+0j'))
&lt;type 'complex'&gt;
</code></pre>
<p>If you want to do some sanity check as well, in case user might also pass a non-numeric string:</p>
<pre><code>import numbers
from ast import literal_eval

def number_type(x):
    try:
        n = literal_eval(x)
        if isinstance(n, numbers.Number):
            print type(n).__name__
        else:
            print 'not a number' 
    except (ValueError, SyntaxError):
        print 'not a number'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/reference/compound_stmts.html#the-try-statement" rel="nofollow"><code>try/except</code> block</a> to see if the string number can be converted into an integer:</p>
<pre><code>def isint(x):
    try:
        int(x)
        print 'this is an int'
    except ValueError:
        print 'this is an float'
</code></pre>
<p>See a demonstration below:</p>
<pre><code>&gt;&gt;&gt; def isint(x):
...     try:
...         int(x)
...         print 'this is an int'
...     except ValueError:
...         print 'this is an float'
...
&gt;&gt;&gt; isint('123')
this is an int
&gt;&gt;&gt; isint('123.0')
this is an float
&gt;&gt;&gt;
</code></pre>
<p>If you want to protect against the user entering a non-numerical string, you can add one more level of error handling:</p>
<pre><code>def isint(x):
    try:
        int(x)
        print 'this is an int'
    except ValueError:
        try:
            float(x)
            print 'this is an float'
        except ValueError:
            print 'this is not a number'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; def isint(x):
    return '.' not in x

&gt;&gt;&gt; isint("3.14")
False
&gt;&gt;&gt; isint("3")
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think the most easy variant is using eval:</p>
<pre><code>eval("1.7") =&gt; 1.7 =&gt; type=float
eval("1") =&gt; 1 =&gt; type=int
eval("143274892053294870824") =&gt; 143274892053294870824 =&gt; type=long
isint = lambda x: isinstance(eval(x), int)
</code></pre>
<p>Dont pass untrusted code to this function ;)</p>
</div>
<span class="comment-copy">What should be the result for <code>isint('3.0')</code>?</span>
<span class="comment-copy">Yes, good point! I would want it to tell me that '3.0' is a float in this case. I think that the answer below addresses that too.</span>
<span class="comment-copy">So how do I actually implement this in <code>f(x)</code>? I tried <code>if type(literal_eval('1.01')) == "&lt;type, 'float'&gt;"</code>, but this did not work.</span>
<span class="comment-copy">@Karnivaurus Use <code>isinstance(literal_eval('1.01'), int)</code>(replace <code>int</code> with <code>float</code> to test for real numbers).</span>
<span class="comment-copy">@MartinKonecny ahh good call, need some more robust handling of bad cases</span>
