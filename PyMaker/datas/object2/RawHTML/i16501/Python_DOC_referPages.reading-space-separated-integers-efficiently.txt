<div class="post-text" itemprop="text">
<p>Is there a more efficient way to do this?</p>
<pre><code>&gt;&gt;&gt; input_list = list(map(int, input().split()))
13 4 56 75 22 3
&gt;&gt;&gt; input_list
[13, 4, 56, 75, 22, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From your comment I gather you are concerned about memory use and you want to avoid creating a temporary list. Unfortunately Python doesn't have an iterator version of string.split (AFAIK), but you can use re.finditer:</p>
<pre><code>[int(match.group(0)) for match in re.finditer(r'\w+', input())]
</code></pre>
<p>But unless your input is many megabytes long there's really no need to worry about memory and complicate your code like this. </p>
</div>
<span class="comment-copy">Are you having a particular performance problem? It's 31 characters; how much were you hoping to shave off?</span>
<span class="comment-copy">You could use a list comp perhaps, but it won't make (much) difference here. <code>[int(i) for i in input().split()]</code></span>
<span class="comment-copy"><code>map(int, input().split())</code> already returns a list, when you put <code>list()</code> around it you copy the whole thing over again, so just using the map function would probably make it faster.</span>
<span class="comment-copy">@MikeP. not in <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer">Python 3.x</a> it doesn't.</span>
<span class="comment-copy"><a href="https://www.python.org/doc/essays/list2str/" rel="nofollow noreferrer">Read Guildo's loop optimization tales</a></span>
<span class="comment-copy">I just started working on my first data science project. So I'm looking at ways to reduce execution time.</span>
