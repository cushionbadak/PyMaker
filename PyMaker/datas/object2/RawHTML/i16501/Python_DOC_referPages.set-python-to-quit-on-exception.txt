<div class="post-text" itemprop="text">
<p>I'm using <code>Python 3</code></p>
<p>I've been looking around for an answer to this, but I haven't found it yet. Basically, I'm running several Python scripts into a game engine, and each script has its own entry point.</p>
<p>I'd rather not add <code>try: except blocks</code> through all of my code, so I was wondering if it's at all possible to tell Python to quit (or perhaps assign a custom function to that "callback") on finding its first error, regardless of where or what it found? </p>
<p>Currently, the game engine will continue after finding and hitting an error, making it more difficult than necessary to diagnose issues since running into one error may make a subsequent script not work (as it relies on variables that the error-ing script set, for example). Any ideas? </p>
<p>I know that I could redirect the console to a file to allow for easier scrolling, but just capturing the first error and stopping the game prematurely would be really useful.</p>
<p>Okay, a couple of extra bits of info - sorry for neglecting to say this. The engine I'm using (the Blender Game Engine) is coded in C, so changing the source is more than I'd like to do.</p>
<hr/>
<p>After Googling, it would appear that a similar question with a solid answer has been asked <a href="https://stackoverflow.com/questions/15605925/how-to-get-the-last-exception-object-after-an-error-is-raised-at-a-python-prompt">here</a>, which is how to get the last raised exception. If I check the sys module for the presence of the last_value variable and it exists, then I can quit prematurely, as the console would have already printed out the error.</p>
<p>Thanks for the help.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3.3/library/atexit.html#atexit.register" rel="nofollow">atexit.register()</a> to register a function that will be called when your program terminates. Upon termination you would then have to use the current <a href="https://docs.python.org/3/library/traceback.html" rel="nofollow">traceback object</a> to print debugging information about the exception that occurred (if any).</p>
<p>Note: this assumes that exceptions AREN'T trapped by the game code, since it relies on the exception to terminate execution.</p>
</div>
<span class="comment-copy">If it's continuing after an error, it's already hitting a try/catch block...</span>
<span class="comment-copy">If subsequent scripts fail, they are too tightly coupled. Start by adding validation on the points of interface between them.</span>
<span class="comment-copy">If you have problems seeing what went wrong then setting up <a href="https://docs.python.org/3.3/library/logging.html?highlight=logging#logging" rel="nofollow noreferrer">logging</a> would be useful</span>
<span class="comment-copy">@Basic - I didn't add that, so I suppose that's possible.</span>
<span class="comment-copy">@jonrsharpe - I'd rather not edit the C source of the engine if I don't have to.</span>
<span class="comment-copy">Hmm, this sounds interesting, but doesn't seem to enable me to stop the program on the first exception. What I'm essentially trying to do is grab the last raised exception regardless of where in the code it was raised from.</span>
<span class="comment-copy">It will give you access to the first exception that threatens to terminate the program. If the exceptions are already being caught by your program logic there isn't much you can do to intercept that.</span>
