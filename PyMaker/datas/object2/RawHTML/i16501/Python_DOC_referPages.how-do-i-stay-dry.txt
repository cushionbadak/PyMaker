<div class="post-text" itemprop="text">
<p>I'm writing some string representations for the data in a django model and my code gets quite repetitive. What would be the best way to stay out of the rain?</p>
<p>Here is two of the methods:</p>
<pre><code>def get_known_citys_string(user):
    entrys = HTTPRequestData.objects.filter(user=user)
    counter = Counter()

    for entry in entrys:
        counter[entry.city] += 1

    return counter_to_string(counter)

def get_known_devices_string(user):
    entrys = HTTPRequestData.objects.filter(user=user)
    counter = Counter()

    for entry in entrys:
        counter[entry.device] += 1

    return counter_to_string(counter)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are many ways to approach this.  Here's one:</p>
<pre><code>def get_known_fields_string(user, fieldSelector):
    entrys = HTTPRequestData.objects.filter(user=user)
    counter = Counter()

    for entry in entrys:
        counter[fieldSelector(entry)] += 1

    return counter_to_string(counter)

def get_known_citys_string(user):
    return get_known_fields_string(user, lambda entry: entry.city)

def get_known_devices_string(user):
    return get_known_fields_string(user, lambda entry: entry.device)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That's why functions were invented...</p>
<pre><code>def common(user, field):
    entrys = HTTPRequestData.objects.filter(user=user)
    counter = Counter()

    for entry in entrys:
        counter[getattr(entry, field)] += 1

    return counter_to_string(counter)

def get_known_citys_string(user):
    return common(user, "city")

def get_known_devices_string(user):
    return common(user, "device")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another alternative is to use <a href="https://docs.python.org/3/library/functools.html" rel="nofollow">functools.partial</a>, for that succinct functional flavour:</p>
<pre><code>from functools import partial


def getter(attrname, user):
    entrys = HTTPRequestData.objects.filter(user=user)
    counter = Counter()

    for entry in entrys:
        counter[getattr(entry, attrname)] += 1

    return counter_to_string(counter)


# Define functions as variations on getter
get_known_citys_string = partial(getter, 'city')
get_known_devices_string = partial(getter, 'device')
</code></pre>
</div>
<span class="comment-copy">Your aware of your code repetition, try to refractor them out.</span>
<span class="comment-copy">right forgot about getattr()</span>
