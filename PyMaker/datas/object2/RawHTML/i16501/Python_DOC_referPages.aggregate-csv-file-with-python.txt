<div class="post-text" itemprop="text">
<p>My cross-tabulated CSV file looks like this:</p>
<pre><code>Country,Age,All,M,F
UK,Under65,30987,15000,15987
UK,65andOver,12345,6345,6000
Germany,Under65,32646,15642,17004
Germany,65andOver,14747,7192,7555
France,Under65,31587,16286,15301
France,65andOver,13741,6187,7554
</code></pre>
<p>I would like to amend it so that it looks like this:</p>
<pre><code>Country,Under65_All,Under65_M,Under65_F,65andOver_All,65andOver_M,65andOver_F
UK,30987,15000,15987,12345,6345,6000
Germany,32646,15642,17004,14747,7192,7555
France,31587,16286,15301,13741,6187,7554
</code></pre>
<p>Each country now sits on one row and the number of columns has been expanded (no cross-tab).</p>
<p>I'm trying to do this in Python 3. Excel VBA is out because I was hitting the row limit with some of the larger CSV files.</p>
<p>I suppose what I'm trying to do is an "aggregate" with an additional "group by" step. I've got as far as reading in the CSV file and calculating various values which may prove useful: number of unique countries(3), number of unique age groups(2),names and number of columns required for final output file(7).</p>
<p>I'm looking to make the code as flexible as possible so that it can read in a file with x number of unique countries and y number of unique age groupings and z number of column variables. And the final file would contain a header row with y*z+1 columns and below this x number of rows.</p>
<p>Hope this makes sense, any help/pointers would be appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm going to propose a <a href="http://pandas.pydata.org" rel="nofollow"><code>pandas</code></a> solution because otherwise you're reinventing the wheel, but there's no way around the fact that it takes a bit of getting used to.  The upside is that once you've picked it up operations like this become relatively straightforward.</p>
<pre><code>import pandas as pd

df = pd.read_csv("c.dat")
df = pd.melt(df, id_vars=["Country", "Age"], var_name="Other")
df["Column"] = df.pop("Age") + "_" + df.pop("Other")
df = df.pivot(index="Country", columns="Column")
df.columns = df.columns.droplevel(0)
df.to_csv("out.csv")
</code></pre>
<p>produces</p>
<pre><code>&gt;&gt;&gt; !cat out.csv
Country,65andOver_All,65andOver_F,65andOver_M,Under65_All,Under65_F,Under65_M
France,13741,7554,6187,31587,15301,16286
Germany,14747,7555,7192,32646,17004,15642
UK,12345,6000,6345,30987,15987,15000
</code></pre>
<p>(where we could sort the columns if we really wanted to.)</p>
<hr/>
<p>There's no point in copying out an entire tutorial here -- although you can read the reshaping tutorial <a href="http://pandas.pydata.org/pandas-docs/stable/reshaping.html" rel="nofollow">here</a> -- but I can at least give an overview of how this works.</p>
<p>Step by step.  First, we read the csv file into a <code>DataFrame</code> (kind of like an excel sheet):</p>
<pre><code>&gt;&gt;&gt; df = pd.read_csv("c.dat")
&gt;&gt;&gt; df
   Country        Age    All      M      F
0       UK    Under65  30987  15000  15987
1       UK  65andOver  12345   6345   6000
2  Germany    Under65  32646  15642  17004
3  Germany  65andOver  14747   7192   7555
4   France    Under65  31587  16286  15301
5   France  65andOver  13741   6187   7554
</code></pre>
<p>where you can access the frame by rows, columns, etc.  For your purposes we can melt (unpivot) this data:</p>
<pre><code>&gt;&gt;&gt; df = pd.melt(df, id_vars=["Country", "Age"], var_name="Other")
&gt;&gt;&gt; df
    Country        Age Other  value
0        UK    Under65   All  30987
1        UK  65andOver   All  12345
2   Germany    Under65   All  32646
3   Germany  65andOver   All  14747
4    France    Under65   All  31587
5    France  65andOver   All  13741
6        UK    Under65     M  15000
7        UK  65andOver     M   6345
8   Germany    Under65     M  15642
9   Germany  65andOver     M   7192
10   France    Under65     M  16286
11   France  65andOver     M   6187
12       UK    Under65     F  15987
13       UK  65andOver     F   6000
14  Germany    Under65     F  17004
15  Germany  65andOver     F   7555
16   France    Under65     F  15301
17   France  65andOver     F   7554
</code></pre>
<p>So now we have the row labels we want (the countries) and information about the other columns, whatever they are, and the values.  You wanted the "Age" and whatever's in "Other" combined, so:</p>
<pre><code>&gt;&gt;&gt; df["Column"] = df.pop("Age") + "_" + df.pop("Other")
&gt;&gt;&gt; df
    Country  value         Column
0        UK  30987    Under65_All
1        UK  12345  65andOver_All
2   Germany  32646    Under65_All
3   Germany  14747  65andOver_All
4    France  31587    Under65_All
5    France  13741  65andOver_All
6        UK  15000      Under65_M
7        UK   6345    65andOver_M
8   Germany  15642      Under65_M
9   Germany   7192    65andOver_M
10   France  16286      Under65_M
11   France   6187    65andOver_M
12       UK  15987      Under65_F
13       UK   6000    65andOver_F
14  Germany  17004      Under65_F
15  Germany   7555    65andOver_F
16   France  15301      Under65_F
17   France   7554    65andOver_F
</code></pre>
<p>and now all the hard work is done.  We simply have to call <code>pivot</code> to turn it:</p>
<pre><code>&gt;&gt;&gt; df = df.pivot(index="Country", columns="Column")
&gt;&gt;&gt; df
                 value                                                    \
Column   65andOver_All  65andOver_F  65andOver_M  Under65_All  Under65_F   
Country                                                                    
France           13741         7554         6187        31587      15301   
Germany          14747         7555         7192        32646      17004   
UK               12345         6000         6345        30987      15987   


Column   Under65_M  
Country             
France       16286  
Germany      15642  
UK           15000  
</code></pre>
<p>(Looks better on the screen.)  It's given us the extra "value" level, which you don't want, so let's drop that:</p>
<pre><code>&gt;&gt;&gt; df.columns = df.columns.droplevel(0)
&gt;&gt;&gt; df
Column   65andOver_All  65andOver_F  65andOver_M  Under65_All  Under65_F  \
Country                                                                    
France           13741         7554         6187        31587      15301   
Germany          14747         7555         7192        32646      17004   
UK               12345         6000         6345        30987      15987   

Column   Under65_M  
Country             
France       16286  
Germany      15642  
UK           15000  
</code></pre>
<p>And then we write it to csv:</p>
<pre><code>&gt;&gt;&gt; df.to_csv("out.csv")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The most obvious way to approach this is in two stages:</p>
<ol>
<li>Collect the data into a convenient data structure from the input CSV file.</li>
<li>Use the collected data to write the output CSV file.</li>
</ol>
<p>It seems to me that the most convenient data structure to use is a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow"><code>defaultdict</code></a> of <code>dict</code> objects, using the primary key (in this case, "Country") as the top-level key, and concatenations of the combining key (in this case "Age") and the additional keys as the keys for the second-level dicts:</p>
<pre><code>{
    'France': {
        '65andOver_All': '13741',
        '65andOver_F': '7554',
        '65andOver_M': '6187',
        'Under65_All': '31587',
        'Under65_F': '15301',
        'Under65_M': '16286'
    },
    'Germany': {
        '65andOver_All': '14747',
        # ...
    },
    # ...
}
</code></pre>
<p>It'll also be necessary to keep track of the headers used - a <code>set</code> is probably the best choice for that.</p>
<p>Using those data structures, the code would look something like this:</p>
<pre><code>from collections import defaultdict
from csv import DictReader, DictWriter

def aggregate(infile, outfile, p_key, c_key):
    """Group 'infile' on 'p_key', combining additional keys with 'c_key'."""
    data = defaultdict(dict)
    headers = set()
    with open(infile) as f:
        for row in DictReader(f):
            p_value = row.pop(p_key)
            c_value = row.pop(c_key)
            for key, value in row.items():
                header = "_".join([c_value, key])
                headers.add(header)
                data[p_value][header] = value
    field_names = [p_key] + sorted(headers)
    with open(outfile, "w") as f:
        writer = DictWriter(f, field_names)
        writer.writeheader()
        for p_value, row in data.items():
            row[p_key] = p_value
            writer.writerow(row)
</code></pre>
<p>Example use:</p>
<pre><code>&gt;&gt;&gt; aggregate("in.csv", "out.csv", "Country", "Age")
</code></pre>
<p>Resulting <strong>out.csv</strong> file:</p>
<pre class="lang-none prettyprint-override"><code>Country,65andOver_All,65andOver_F,65andOver_M,Under65_All,Under65_F,Under65_M
France,13741,7554,6187,31587,15301,16286
UK,12345,6000,6345,30987,15987,15000
Germany,14747,7555,7192,32646,17004,15642
</code></pre>
</div>
<span class="comment-copy">How is this a transpose? It is merely a groupby aggregate...</span>
