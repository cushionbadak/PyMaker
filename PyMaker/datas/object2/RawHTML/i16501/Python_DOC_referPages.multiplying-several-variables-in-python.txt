<div class="post-text" itemprop="text">
<p>My code is as follows:</p>
<pre><code>box = raw_input('What is your box size')

op1 = float(box)*602,216,900,000,000,000,000,000

op2 = op1 * 1,000

print op2
</code></pre>
<p>How do a recieve the value of op1 times 1,000 instead of having it repeated 1,000 times? When I use the float() argument I get </p>
<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 5, in &lt;module&gt;
TypeError: float() argument must be a string or a number
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simply: </p>
<pre><code>op2 = op1 * 1000
</code></pre>
<p>commas are not allowed in valid <code>int</code> declarations. </p>
<p>Applying this to your entire question:</p>
<pre><code>box = raw_input('What is your box size')

op1 = float(box) * 602216900000000000000000

op2 = op1 * 1000

print op2
</code></pre>
<p>Your code should work fine now.  Here's a little more background on how declaring number's in python <a href="http://www.tutorialspoint.com/python/python_numbers.htm" rel="nofollow">works</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The error you posted indicates that you've somehow got a bad value in your <code>box</code> variable from user input, but the actual problem in your code is that you're creating <a href="https://docs.python.org/3/library/stdtypes.html#tuple" rel="nofollow">tuples</a>, not large numbers.</p>
<p>You're attempting to use "<code>,</code>" as a thousands separator. This is <em>not allowed</em> in numeric literals in Python. Instead, what the parser will see is a <em>tuple</em>:</p>
<pre><code>op1 = (float(box)*602, 216, 900, 0, 0, 0, 0, 0)
</code></pre>
<p>If you then want to multiply the result by 1000, you must still omit the commas:</p>
<pre><code>op1 = float(box) * 602216900000000000000000
op2 = op1 * 1000
</code></pre>
<p>...or you'll just end up with the result above, inside a tuple with a <code>0</code> as the second element. </p>
<hr/>
<p>This second problem is the same, although it's trickier to look at if you're not familiar with how tuples and precedence work in Python. </p>
<p>Let's say we've fixed the first line, so that <code>op1</code> is indeed a float (let's say <code>2.0</code>) instead of a tuple. Then the interpreter encounters this line:</p>
<pre><code>op2 = 2.0 * 1,000
</code></pre>
<p>This is equivalent to:</p>
<pre><code>op2 = 2.0*1, 0  # We will assign a two-element tuple to the name "op2".
</code></pre>
<p>Which results in:</p>
<pre><code>op2 = (2.0, 0)  # The first element is now 2.0*1, and the second element is 0.
</code></pre>
<hr/>
<p>Once you've fixed the syntax problems, you might want to represent that nasty literal up there in a more recognizable form, to clean up your code:</p>
<pre><code>op1 = float(box) * 6.022169 * 10**23
</code></pre>
<p>...or even better, put it in a variable so you can use it elsewhere and know what the heck is going on:</p>
<pre><code>not_quite_avogadro_const = 6.022169 * 10**23
op1 = float(box) * not_quite_avogadro_const
</code></pre>
</div>
<span class="comment-copy">What is your input?</span>
<span class="comment-copy">Python does <b>not</b> use the comma as a thousands separator. The comma makes your items <b>tuples</b>.</span>
<span class="comment-copy">Not that your code here actually produces the exception you posted.</span>
