<div class="post-text" itemprop="text">
<p>I want to read data from a .yuv file using python. These data are uint8 integers. I use such command:</p>
<pre><code>fp = open(filename, 'rb')
data = fp.read(100)
</code></pre>
<p>I will get 100 bytes data as a string. I know I can use <code>ord()</code> to transfer 1 byte str to 1 integer one time. How can I read or transfer it to 100 integers in an array one time? </p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/struct.html#struct.unpack" rel="nofollow"><code>struct.unpack</code></a>:</p>
<pre><code>with open(filename, 'rb') as fp:
    integers = struct.unpack('100B', fp.read(100))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use list comprehension to convert it all:</p>
<pre><code>data = [ord(b) for b in fp.read(100)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You might want to use <code>numpy</code>, as well.</p>
<pre><code>import numpy as np

with open(filename, 'rb') as fp:
    integers = numpy.fromstring(fp.read(100), dtype='uint8')
</code></pre>
<p>This can be said easier (and may be more efficient memorywise):</p>
<pre><code>integers = numpy.fromfile(filename, dtype='uint8')
</code></pre>
<p>Of course, with 100 or 1000 integers it does not matter, the <code>struct</code> solution is an excellent one and does not require any extrenal modules. But if you are into reading larger amounts of data, and you want to do some maths with them, <code>numpy.array</code> is a very useful data type. <code>numpy</code> arrays can be used with up to gigabytes of data with reasonable performance. </p>
<p>If you have large files, you might consider using <code>numpy.memmap</code>. It has the benefit that it does not really load the array into memory at all. It is great for random access, as the array is loaded only when required. For sequential access it is not that great, as the operating system optimizes sequential accesses with read-ahead cahces and other techniques. For random access or access of only a small bit of an array it is hard to beat with large arrays.</p>
</div>
<span class="comment-copy">Python's version?</span>
<span class="comment-copy">+1; didnâ€™t think of struct</span>
<span class="comment-copy">Thanks. :) It works and fast.</span>
<span class="comment-copy">Thanks. :) Struct is faster than list comprehension.</span>
<span class="comment-copy">Thanks. You mean "integers = numpy.mmap(fp.read(100), dtype='uint8')" ?</span>
<span class="comment-copy">Oh. You mean use mmap or numpy.memmap to load a whole larger file?</span>
<span class="comment-copy">@Jingtao: Good catch... Sorry for my printing mistake. I meant using <code>numpy.memmap</code>. Its beauty lies in the fact that it does not load any piece of the file until it is needed, and thus it is great for random access. I'll fix my answer a bit to discuss this.</span>
