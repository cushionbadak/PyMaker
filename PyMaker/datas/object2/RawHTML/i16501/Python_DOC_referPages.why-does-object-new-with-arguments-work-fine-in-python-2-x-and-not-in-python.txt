<div class="post-text" itemprop="text">
<p>Why does the following code work fine in Python 2.x and not in Python 3.3+:</p>
<pre><code>class TestA(object):
    def __new__(cls, e):
        return super(TestA, cls).__new__(TestB, e)

class TestB(TestA):
    def __init__(self, e):
        print(self, e)

TestA(1)
</code></pre>
<p>Python 2.7.6 output:</p>
<pre><code>(&lt;__main__.TestB object at 0x7f6303378ad0&gt;, 1)
</code></pre>
<p>Python 3.1.5 output:</p>
<pre><code>__main__:3: DeprecationWarning: object.__new__() takes no parameters
&lt;__main__.TestB object at 0x7f2f69db8f10&gt; 1
</code></pre>
<p>Python 3.2.3 and 3.2.5 output:</p>
<pre><code>&lt;__main__.TestB object at 0xcda690&gt; 1
</code></pre>
<p>Python 3.3.5 and 3.4.1 output:</p>
<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 3, in __new__
TypeError: object() takes no parameters
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>object.__new__</code> has always ignored extra arguments, and has issued a <code>DeprecationWarning</code> at least since Python 2.6.</p>
<p>The reason why you aren't seeing the <code>DeprecationWarning</code> in 2.7 and 3.2 is that since 2.7 and 3.2 <code>DeprecationWarning</code> has been <a href="https://docs.python.org/3.5/whatsnew/2.7.html#changes-to-the-handling-of-deprecation-warnings" rel="nofollow">suppressed by default</a>; if you use <code>python -Wd</code> or <code>PYTHONWARNINGS=default</code> then you will see the warning.</p>
<p>In Python 3.3 the <code>DeprecationWarning</code> was converted to an error.</p>
<p>The correct way to write your code (in any version of Python) is to swallow the extra argument in <code>TestA.__new__</code>:</p>
<pre><code>class TestA(object):
    def __new__(cls, e):
        return super(TestA, cls).__new__(TestB)
</code></pre>
<p>Since <code>TestB</code> is derived from <code>TestA</code>, the extra argument <a href="https://docs.python.org/3/reference/datamodel.html#object.__new__" rel="nofollow">will be passed to <code>TestB.__init__</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can move the __init__ function to TestA like so:</p>
<pre><code>class TestA(object):
    def __new__(cls, e):
        return super(TestA, cls).__new__(TestA)

    def __init__(self, e):
        print(self, e)

TestA(1)
</code></pre>
<p>Notice how TestB is not required.</p>
<p>Notice how the 'e' parameter is omitted from the call to object.__new__.
The new function of object class only takes a class as parameter and any additional parameters in the overloaded __new__ function (in this case that of class TestA) is automatically passed to the constructor function (__init__) of the classed passed to object.__new__ (which in this case is also TestA).</p>
</div>
<span class="comment-copy">Related: <a href="http://stackoverflow.com/q/19277399">Why does object.__new__ work differently in these three cases</a></span>
<span class="comment-copy">It's interpretator output, first print, second object. If run as program will one line. Fixed.</span>
<span class="comment-copy">Are you sure ? This code work on Python 2.7.4 and Python 3.2.3.</span>
<span class="comment-copy">For 3.2.3 work fine, updated post.</span>
