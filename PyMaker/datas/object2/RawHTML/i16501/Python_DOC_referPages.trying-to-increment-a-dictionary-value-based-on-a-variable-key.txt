<div class="post-text" itemprop="text">
<p>Alright, I'm trying to write a script that will run through a generated report and give me a line count of each vulnerability type. Because of the way xml is formatted, I'm trying to use a variable to set the dictionary key when it comes across a vulnerability type, then just increment the value for that key until it reaches the end of the section.</p>
<p>I think I'm having an issue with how to increment the value of a key defined by a variable. This is what I've got so far.</p>
<pre><code>#!/usr/bin/python

file = open('Test.xml','r')

vulns = {4:0, 3:0, 2:0, 1:0}
pos = 0

for line in file:

    if line.find('Critical') != -1:
            pos = 4

    if line.find('High') != -1:
            pos = 3

    if line.find('Medium') != -1:
            pos = 2

    if line.find('/Chart1_CategoryGroup1_Collection') != -1:
            pos = 1

    if line.find('Chart1_CategoryGroup1 Label=') != -1:
            vulns[pos] = vulns[pos] + 1

for i in vulns.values():
    print i
</code></pre>
<p>When I try to run the script it kicks back </p>
<pre><code>Traceback (most recent call last):
  File "./vulnReport.py", line 23, in &lt;module&gt;
  vulns[pos] = vulns[pos] + 1
KeyError: 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>if line.find('Chart1_CategoryGroup1 Label=') != -1:
            vulns[pos] = vulns[pos] + 1
</code></pre>
<p>executes before <code>pos</code> gets updated to a value other than <code>0</code>, and your dict does not contain a <code>0</code> entry.</p>
<p>i.e., it executes</p>
<pre><code>vulns[0] = vulns[0] + 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You might find the following version easier to work with and maintain in the future:</p>
<pre><code>#! /usr/bin/env python

import itertools

search = ('Critical',
          'High',
          'Medium',
          '/Chart1_CategoryGroup1_Collection',
          'Chart1_CategoryGroup1 Label=')

counts = dict.fromkeys(search, 0)

with open('Test.xml') as file:
    for line, item in itertools.product(file, search):
            counts[item] += item in line

for pair in sorted(counts.items()):
    print('{!s}: {!r}'.format(*pair))
</code></pre>
</div>
<span class="comment-copy">Please show some sample input...</span>
<span class="comment-copy">what is the value of <code>pos</code>?</span>
<span class="comment-copy">It's pretty clear that only the fifth <code>if</code> is triggering, at which time <code>pos == 0</code>. So what exactly is your question?</span>
<span class="comment-copy">If you do a find() on a string, and it doesn't find the string you look for, it returns a -1 rather than the position index, right? So if it doesn't find the string, != -1 will come back false and the pos won't get set to 0. I'll try setting that pos to 1 instead of zero, since that last one is kind of a junk placeholder anyways.  Although, maybe that Chart1_CategoryGroup1 line shows up again before anything else, I'll go take a look at that, thanks!</span>
<span class="comment-copy">Oh wait, I see what's going on now, I misunderstood. I'll change the pos default to 1, and see if that fixes the problem, thank you!</span>
<span class="comment-copy">That does look much cleaner, but I'm still too new to python to really follow. I'm not sure that will work, however. Since "Critical" doesn't show up on the line I need to count, but before it. Each section of vulnerabilities has a header, and then each line for each section starts the same, so there's no way to differentiate them aside from the header. So my thinking was to do a linecount of each section, using the if statements as a sort of delimiter for where the count is being applied.</span>
<span class="comment-copy">Ok, after looking through more of the file, I think this may actually work... I'm using python 2.7, however, and so I keep getting various errors right in the first few lines.  <code>line3: syntax error near unexpected token '(' \n line3: 'search = ('Critical', 'High', 'Medium')'</code>  A couple of those are supposed to be backticks, but it screws with the comment coding...</span>
<span class="comment-copy">@Arvandor I tried to fix the code and believe that it should work now. If you change the single quotes to backticks, the code will not work. There should be no backticks in this program. In later versions of Python, backticks have been completely removed from the language: <a href="http://docs.python.org/3/whatsnew/3.0.html#removed-syntax" rel="nofollow noreferrer">Removed Syntax</a> If you have any more trouble, it may be helpful to provide a link to an example of your XML.</span>
<span class="comment-copy">Ah, it does indeed appear to work now, thank you very much! Although, that logic line after the with line makes my brain hurt. Hard enough to read what it's actually doing, let alone come up with something like that myself. Must read more code, write more code haha! I know with <code>for line in file</code> it kind of defaults newlines as a delimiter, does doing <code>for line, item in file</code> further split it by a default delimiter of space? Turning the file into a 2 dimensional array in effect? (Or list, whatever.)</span>
<span class="comment-copy">(1) We define what we are looking for. (2) We create a dictionary where the keys are the items to find and the values are all zero (times found so far). (3) We open the file for reading. (4) We run two nested <code>for</code> loops, one over the lines of the file and another over the items searched. This is just a technique for writing several loops on one line. I will make it more readable momentarily. (5) We add into the count if we found what we were looking for on that line in the file. (6) We loop over key/value pairs from our counts in sorted order. (7) We display the results of our processing.</span>
