<div class="post-text" itemprop="text">
<p>So the following regex (written in python3) is just one part that will be added to a larger regex to split a url into schema, domain and path. This part is extracting the path.</p>
<pre><code>link = "http://google.com/whatever/who/jx.html"
components = re.split(r'(?&lt;![:/])(/.*$)', link)
</code></pre>
<p>Returns the following:</p>
<p><code>['http://google.com', '/whatever/who/jx.html', '']</code></p>
<p>Why is the regex returning an extra element at the end of the list? </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://regex101.com/r/qW2wI4/1" rel="nofollow"><code>'(?&lt;![:/])(/.*$)'</code> matches <code>'/whatever/who/jx.html'</code> in your string.</a> As such your string is split into contents before the match, the match itself, and the contents after the match. You get these elements (with the match denoted in square brackets):</p>
<pre><code>'http://google.com'['/whatever/who/jx.html']''
</code></pre>
<p>Hence the end resulting array:</p>
<pre><code>['http://google.com', '/whatever/who/jx.html', '']
</code></pre>
<blockquote>
<p>Specified by:<br/><a href="https://docs.python.org/2/library/stdtypes.html#str.split" rel="nofollow">https://docs.python.org/2/library/stdtypes.html#str.split</a></p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>It think it would be best to use <a href="https://docs.python.org/3/library/re.html#re.match" rel="nofollow"><code>re.match</code></a> here and a slightly different pattern:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; link = "http://google.com/whatever/who/jx.html"
&gt;&gt;&gt; re.match("(https?://.+?)(/.*$)", link).groups()
('http://google.com', '/whatever/who/jx.html')
&gt;&gt;&gt;
</code></pre>
<p>Below is a breakdown of what the Regex pattern used above is matching:</p>
<pre><code>(        # The start of the first capture group
http     # http
s?       # An optional s
://      # ://
.+?      # One or more characters matched non-greedily
)        # The close of the first capture group
(        # The start of the second capture group
/        # /
.*       # Zero or more characters
$        # The end of the string
)        # The close of the second capture group
</code></pre>
</div>
<span class="comment-copy">Not a direct answer to your question, but don't parse urls with regex.  Use <code>urllib.parse</code>.</span>
<span class="comment-copy">I still don't really understand the behaviour, from what I can see there is no pattern <code>/.*$</code> after the initial split</span>
<span class="comment-copy">The group <code>(/.*$)</code> is matching a slash (literally), then any amount of anything, then an end of line anchor. As the regex ensures that the match is anchors to the end of the line, the match is always found near the end.</span>
<span class="comment-copy">@CommuSoft Aha got it, you should just post the answer to the question as that closes it for me. Thanks a lot.</span>
<span class="comment-copy">should include <code>https</code> as well</span>
<span class="comment-copy">can we use <code>^</code> along with <code>$</code> if only url string is split.</span>
<span class="comment-copy">@Braj - You can, but it is unnecessary.  In Python, <code>re.match</code> defaults to matching at the start of the string.</span>
