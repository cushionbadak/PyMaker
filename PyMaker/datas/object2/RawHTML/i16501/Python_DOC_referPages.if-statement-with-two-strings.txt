<div class="post-text" itemprop="text">
<p>I'm just starting out learning Python and wanted some practice with if statements since I'm playing around with text-adventure games. I was trying to get a thing like this to work. For instance, if one would type "look at the floor" (or just "look floor"), where word1 would be 'look' and 'floor'.</p>
<p>Perhaps there is an easy answer to this, and I've tried a few different ways, but can't seem to make it work. Thanks for any help!</p>
<pre><code>def test():
    answer = raw_input().lower()
    if ('word1' and 'word2') in answer:
        print "Both words were in the answer."
    else:
        print "Both words were NOT in the answer"

test()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to have an <code>in</code> membership test for each word:</p>
<pre><code>if ('word1' in answer) and ('word2' in answer):
</code></pre>
<p>Of course, this quickly becomes tedious if you have many words.  In that case, you can use <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow"><code>all</code></a> and a <a href="https://docs.python.org/3/reference/expressions.html#grammar-token-generator_expression" rel="nofollow">generator expression</a>:</p>
<pre><code>if all(word in answer for word in ('word1', 'word2', ...)):
</code></pre>
<p>The above will test if each word in the tuple <code>('word1', 'word2', ...)</code> can be found in <code>answer</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a more thorough explanation:</p>
<h3>Order of evaluation!</h3>
<p>You have to keep in mind that while some idiomatic constructs make sense in English (or any other language), they might not make sense in a programming language, even if it is valid syntax.</p>
<p>For instance, let us consider the test expression your sample code:</p>
<pre><code>('word1' and 'word2') in answer
</code></pre>
<p>When you apply the rules for the order of evaluation, the sub-expression in parentheses ( <code>('word1' and 'word2')</code>) is evaluated first. Because of the <code>and</code> operator, the result of this sub-expression is the right operand since the left operand evaluates to <code>True</code>. Re-inserting this value in your initial expression gives us this: <code>'word2' in answer</code>. Therefore the test will always validate as long as the second word can be found in the answer.</p>
<p>Edit: corrected boolean evaluation.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/functions.html#all" rel="nofollow"><code>all</code></a> to make that happen:</p>
<pre><code>def test():
    answer = raw_input().lower()
    if all(word in answer for word in ('word1', 'word2')):
        print "Both words were in the answer."
    else:
        print "Both words were NOT in the answer"

test()
</code></pre>
<p>This will go through each word that you specified and check whether it's in <code>answer</code>. The built-in function <code>all()</code> will return <code>True</code> when that's the case for all checks that were performed, and <code>False</code> otherwise. In other words, it's only <code>True</code> when all checks are <code>True</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The other answers are good, but I will try to explain what is <em>wrong with your logic</em> for you:</p>
<pre><code>if ('word1' and 'word2') in answer:
</code></pre>
<p>According to the Python order of evaluation rules the components within the brackets of your <code>if</code> statement are evaluated first.</p>
<p>Therefore your expression is effectively evaluated by the interpretter as:</p>
<pre><code>temp = ('word1' and 'word2')
if temp in answer:
    print "Both words were in the answer."
</code></pre>
<p>the value of <code>temp</code> above will be the result of logically <code>and</code>ing two different strings together which doesn't really make a lot of sense. In this case, the first operand evaluates to <code>True</code> and the second operand is returned, if the first operand evaluated to <code>False</code> (such as an empty string) Python would return the first operand. Thus in your specific case, Python will just return the second string, so: </p>
<pre><code>('word1' and 'word2') == 'word2'
</code></pre>
<p>Therefore the interpretter reads your code as:</p>
<pre><code>if ('word2') in answer:
    print "Both words were in answer."
</code></pre>
<p>By writing:</p>
<pre><code>if ('word1' in answer) and ('word2' in answer):
    print "Both words were in answer."
</code></pre>
<p>You make the comparisons you want to evaluate explicit so the interpretter can understand and doesn't give you weird results.</p>
</div>
<span class="comment-copy"><code>'word1' and 'word2'</code> returns <code>'word2'</code>.  The expression <code>('word1' and 'word2') in answer</code> is equivalent to <code>'word2' in answer</code>.</span>
<span class="comment-copy">You are so damn right!</span>
