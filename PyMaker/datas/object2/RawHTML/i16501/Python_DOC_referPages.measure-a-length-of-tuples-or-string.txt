<div class="post-text" itemprop="text">
<p>I have following string and I want to convert it to array/list so I can measure its length.</p>
<pre><code>a="abc,cde,ert,ert,eee"
b="a", "b", "c"
</code></pre>
<p>The expected length for <code>a</code> should be <code>1</code> and the expected length for <code>b</code> should be <code>3</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>a</code> is a string, <code>b</code> is a tuple. You can try something like this:</p>
<pre><code>def length_of_str_or_tuple(obj):
    if(isinstance(obj,basestring)):
        return 1
    return len(obj)
</code></pre>
<p>Although what you're doing is really weird and you should probably rethink your approach.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use something like this:</p>
<pre><code>&gt;&gt;&gt; a="abc,cde,ert,ert,eee"
&gt;&gt;&gt; b="a", "b", "c"
&gt;&gt;&gt; 1 if isinstance(a, str) else len(a)
1
&gt;&gt;&gt; 1 if isinstance(b, str) else len(b)
3
&gt;&gt;&gt;
</code></pre>
<p>In the above code, the <a href="https://stackoverflow.com/questions/394809/does-python-have-a-ternary-conditional-operator?lq=1">conditional expression</a> uses <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="nofollow noreferrer"><code>isinstance</code></a> to test whether or not <code>item</code> is a string object.  It returns <code>1</code> if so and <code>len(item)</code> if not.</p>
<p>Note that in Python 2.x, you should use <code>isinstance(item, basestring)</code> in order to handle both <code>unicode</code> and <code>str</code> objects.</p>
</div>
<div class="post-text" itemprop="text">
<p>There's a crude way to do this: check which is a string and which a tuple:</p>
<pre><code>x ={}

for item in (a,b):
    try:
        item.find('')
        x[item] = 1
    except:
        x[item] = len(item)
</code></pre>
<p>Since a <code>tuple</code> object doesn't have an attribute <code>find</code>, it will raise an exception.</p>
</div>
<div class="post-text" itemprop="text">
<p>To measure the length of the string:</p>
<pre><code>len(a.split())
</code></pre>
<p>for the tuple:</p>
<pre><code>len(list(b))
</code></pre>
<p>combine the previous answers to test for tuple or list and you would get what you want, or use:</p>
<pre><code>if type(x) is tuple:    
    len(list(x))    
else:    
    a = x.split("\"")    
    len(a)
</code></pre>
</div>
<span class="comment-copy">I completely agree with you. I am just trying to see if there is a way to measure a length here.</span>
<span class="comment-copy">is there a way to measure length without using a function since I already have this strings stored inside function.</span>
<span class="comment-copy">Sure, see my edit.  I originally put the code in a function just for convenience.</span>
<span class="comment-copy"><code>&gt;&gt;&gt; a="abc,cde,ert,ert,eee" &gt;&gt;&gt; 2 if isinstance(a, str) else len(a) 2</code> I believe, I am still not seeing correct solution to measure length for string. For tuple, I can do that with str.split(',').</span>
<span class="comment-copy">Why did you replace <code>1</code> with <code>2</code>?  You should keep that as is and only change the name of the variable.  The code <code>1 if isinstance(a, str) else len(a)</code> is telling Python to return <code>1</code> if <code>a</code> is a string or <code>len(a)</code> if not.</span>
<span class="comment-copy">I was doing some verification but I got the answer. thanks .</span>
<span class="comment-copy">What are you trying to accomplish by splitting the string on double quotes?  You realize that the quotes used to write a string literal aren't actually in the string, right?</span>
<span class="comment-copy">Explanation:    So, if you try to split string, and strings are immutable, what is returned is a list of the form: ['abc,cde,ert,ert,eee'], using the len() method you get the length of the list.</span>
<span class="comment-copy">string:  "4529,4798,12902788,12020850,12905379,12197558,12904395,"  doing string.split("\")  ['', '4529,4798,12902788,12020850,12905379,12197558,12904395,', '']  len(string.split("\""))  3  in my case its counting ' " ' as an element.</span>
<span class="comment-copy">This is the result that you describe above from  a shell:                   &gt;&gt;&gt; a = "4529,4798,12902788,12020850,12905379,12197558,12904395," &gt;&gt;&gt; a '4529,4798,12902788,12020850,12905379,12197558,12904395,' &gt;&gt;&gt; len(a.split("\"")) 1 &gt;&gt;&gt;                                                                             Make sure the dividing character is a "quote". So you have to express it with the escape character "\"".</span>
<span class="comment-copy">@Unihedron It works because his test string doesn't contain a double quote in it. Throw one in and it breaks: <a href="http://ideone.com/Iqx022" rel="nofollow noreferrer">ideone.com/Iqx022</a></span>
