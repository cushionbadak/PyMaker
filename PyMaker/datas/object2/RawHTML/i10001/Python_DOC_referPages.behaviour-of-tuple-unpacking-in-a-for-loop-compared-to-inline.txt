<div class="post-text" itemprop="text">
<p>I have a very simple text file which, for the purposes of this example, consists of a list of stores with corresponding amounts of money spend in them.  The (tab-spaced) file looks like this:</p>
<pre><code>7-Eleven     7.48
Paradies    28.00
Shoppers    68.26
</code></pre>
<p>My goal is to sum the amounts of money for all but the 7-Eleven.  My code looks like this:</p>
<pre><code>price = 0.0
with open('stores.txt', 'r') as f:
    for line in f:
        line = line.strip('\n').split('\t')
        for shop, priceStr in line:
            if not shop == '7-Eleven':
                price += float(priceStr)
</code></pre>
<p>There is probably some simplifications that can be made to clean up the middle part of the code, but I'm having trouble with the "for shop, priceStr in line:" bit.  My understanding is that doing "shop, priceStr" should unpack the contents of the current line as a tuple and assign them to the variables shop and priceStr.  However, I get the error:</p>
<pre><code>ValueError: too many values to unpack
</code></pre>
<p>Yet if I take the current line and unpack it outside the loops I get</p>
<pre><code>shop, priceStr = line
print shop + ":" + priceStr

7-Eleven: 7.48
</code></pre>
<p>I don't understand what is different between the nested for loops and the inline code.  Can someone please advise me?  This code runs identically in python2.7 and python3.4</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>jasonharper's answer is correct for your immediate problem, but you might also have a stray <code>\t</code> in some of the lines, which would make the naive splitting method split the string into more than two items.</p>
<p>Either limit the split using the <code>maxsplit</code> argument, which will ignore all other <code>\t</code> characters:</p>
<pre><code>line = line.split('\t', maxsplit=1)
</code></pre>
<p>Or unpack the line by binding excess items (if any) to a separate variable, like this:</p>
<pre><code>shop, priceStr, *rest = line
if rest:
    print("More than two items: {} {} {}".format(shop, priceStr, rest))
</code></pre>
<p>The <code>rest</code> variable will be an empty list in case there are no excess items. This will make your code more robust in case of accidental format errors which you can then handle and/or report.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can tell <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer">split</a> to make only one split and then it will ignore any possible extra <code>\t</code></p>
<pre><code>line = line.strip('\n').split('\t', maxsplit=1)
</code></pre>
<p>If you do this you should probably also <code>strip</code> each of the unpacked values to be safe. Although it might work without that if <code>float</code> ignores whitespaces.</p>
<pre><code>shop, priceStr = shop.strip(), priceStr.strip()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>After doing <code>line = line.strip('\n').split('\t')</code>, line is a tuple with two elements (assuming no extraneous tabs, as other posters have pointed out).  If you iterate over this, you will get first the shop name, then the price.  So, when you do <code>for shop, priceStr in line:</code>, it first attempts to unpack the shop name into your two variables, and then attempts to unpack the price into your two variables; of course both attempts fail.  There is no iteration necessary here; you could do <code>shop, priceStr = line</code> to break the tuple into its two elements, or save a line of code and directly do <code>shop, priceStr = line.strip('\n').split('\t')</code></p>
</div>
<span class="comment-copy">Do You have empty line at the end of the file?</span>
<span class="comment-copy">try doing <code>split()</code> instead of <code>split('\t')</code>  passing arguments to <code>split</code> can leave you with empty strings in the returned list</span>
<span class="comment-copy">By any chance, is there an extra tab after the prices in the file?</span>
<span class="comment-copy">Not just after the prices, but possibly between the shops and the prices. It is suspicious to refer to a "tab-spaced" file, rather than tab-delimited. Tab-spaced, to me, implies that someone was just visually lining up the elements, meaning sometimes they might need more tabs if shop names are different lengths.</span>
<span class="comment-copy">@Dai, are you sure this is the exact code that is throwing the error you listed? See jasonharper's answer.</span>
<span class="comment-copy">Great observation, I missed it on my first read. However, the error message given in the question doesn't correspond to the code (which is what threw me off mostly). The error message should be something like <code>ValueError: not enough values to unpack (expected 2, got 1)</code>, so I suspect the code given in the question isn't the actual code OP is using.</span>
<span class="comment-copy">@dkasak I'm using python2.7.6 and the error message is "ValueError: too many values to unpack"</span>
<span class="comment-copy">Thanks for pointing this out.  I was aware that I could unpack the variables without entering into another for loop, I was just wondering why the behaviour of tuple unpacking was different in either case.</span>
<span class="comment-copy">The "too many values to unpack" error is coming from the attempt to unpack the individual characters of the string into the two given loop variables.</span>
<span class="comment-copy">@jasonharper, thanks. This is the correct answer. The point of there being more than one <code>\t</code> in the string still stands so I'll let my answer stand but I'll edit it to fix my initial oversight.</span>
