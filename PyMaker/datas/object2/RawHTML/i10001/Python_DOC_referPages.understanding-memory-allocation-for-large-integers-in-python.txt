<div class="post-text" itemprop="text">
<p>How does Python allocate memory for large integers?</p>
<p>An <code>int</code> type has a size of <code>28 bytes</code> and as I keep increasing the value of the <code>int</code>, the size increases in increments of <code>4 bytes</code>.</p>
<ol>
<li><p>Why <code>28 bytes</code> initially for any value as low as <code>1</code>?</p></li>
<li><p>Why increments of <code>4 bytes</code>? </p></li>
</ol>
<p>PS: I am running Python 3.5.2 on a x86_64 (64 bit machine). Any pointers/resources/PEPs on how the (3.0+) interpreters work on such huge numbers is what I am looking for.</p>
<p>Code illustrating the sizes:</p>
<pre><code>&gt;&gt;&gt; a=1
&gt;&gt;&gt; print(a.__sizeof__())
28
&gt;&gt;&gt; a=1024
&gt;&gt;&gt; print(a.__sizeof__())
28
&gt;&gt;&gt; a=1024*1024*1024
&gt;&gt;&gt; print(a.__sizeof__())
32
&gt;&gt;&gt; a=1024*1024*1024*1024
&gt;&gt;&gt; print(a.__sizeof__())
32
&gt;&gt;&gt; a=1024*1024*1024*1024*1024*1024
&gt;&gt;&gt; a
1152921504606846976
&gt;&gt;&gt; print(a.__sizeof__())
36
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Why <code>28</code> bytes initially for any value as low as <code>1</code>?</p>
</blockquote>
<p>I believe <a href="https://stackoverflow.com/a/40344291/4952130">@bgusach answered that</a> completely; Python uses <code>C</code> structs to represent objects in the Python world, any objects <a href="https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Include/longintrepr.h#L85" rel="nofollow noreferrer">including <code>int</code>s</a>:</p>
<pre class="lang-c prettyprint-override"><code>struct _longobject {
    PyObject_VAR_HEAD
    digit ob_digit[1];
};
</code></pre>
<p><a href="https://docs.python.org/3/c-api/structures.html#c.PyObject_VAR_HEAD" rel="nofollow noreferrer"><code>PyObject_VAR_HEAD</code></a> is a macro that when expanded adds another field in the struct (field <a href="https://docs.python.org/3/c-api/structures.html#c.PyVarObject" rel="nofollow noreferrer"><code>PyVarObject</code></a> which is specifically used for objects that have some notion of length) and, <a href="https://github.com/python/cpython/blob/fda4d710b0af74e1cf04108ed014e4eb42e84534/Include/longintrepr.h#L87" rel="nofollow noreferrer"><code>ob_digits</code></a> is an array holding the value for the number. Boiler-plate in size comes from that struct, for small <em>and</em> large Python numbers.</p>
<blockquote>
<p>Why increments of <code>4</code> bytes?</p>
</blockquote>
<p>Because, when a larger number is created, the size (in bytes) is a multiple of the <code>sizeof(digit)</code>; you can see that in <a href="https://github.com/python/cpython/blob/fda4d710b0af74e1cf04108ed014e4eb42e84534/Objects/longobject.c#L183" rel="nofollow noreferrer"><code>_PyLong_New</code></a> where the allocation of memory for a new <code>longobject</code> is performed with <code>PyObject_MALLOC</code>:</p>
<pre class="lang-c prettyprint-override"><code>/* Number of bytes needed is: offsetof(PyLongObject, ob_digit) +
   sizeof(digit)*size.  Previous incarnations of this code used
   sizeof(PyVarObject) instead of the offsetof, but this risks being
   incorrect in the presence of padding between the PyVarObject header
   and the digits. */
if (size &gt; (Py_ssize_t)MAX_LONG_DIGITS) {
    PyErr_SetString(PyExc_OverflowError,
                    "too many digits in integer");
    return NULL;
}
result = PyObject_MALLOC(offsetof(PyLongObject, ob_digit) +
                         size*sizeof(digit));
</code></pre>
<p><sup><code>offsetof(PyLongObject, ob_digit)</code> is the 'boiler-plate' (in bytes) for the long object that isn't related with holding its value.</sup></p>
<p><code>digit</code> is defined in the header file holding the <code>struct _longobject</code> as a <code>typedef</code> for <code>uint32</code>:</p>
<pre><code>typedef uint32_t digit;
</code></pre>
<p>and <code>sizeof(uint32_t)</code> is <code>4</code> bytes. That's the amount by which you'll see the size in bytes increase when the <code>size</code> argument to <code>_PyLong_New</code> increases.</p>
<hr/>
<p>Of course, this is just how <code>C</code>Python has chosen to implement it. It is an implementation detail and as such you wont find much information in PEPs. The python-dev mailing list would hold implementation discussions if you can find the corresponding thread :-). </p>
<p>Either way, you might find differing behavior in other popular implementations, so don't take this one for granted. </p>
</div>
<div class="post-text" itemprop="text">
<p>It's actually easy. Python's <code>int</code> is not the kind of primitive you may be used to from other languages, but a full fledged object, with its methods and all the stuff. That is where the overhead comes from.</p>
<p>Then, you have the payload itself, the integer that is being represented. And there is no limit for that, except your memory. </p>
<p>The size of a Python's <code>int</code> is what it needs to represent the number plus a little overhead.</p>
<p>If you want to read further, take a look at the <a href="https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex" rel="noreferrer">relevant part of the documentation</a>:</p>
<blockquote>
<p>Integers have unlimited precision</p>
</blockquote>
</div>
<span class="comment-copy">Thanks. Is there a PEP that explains how this is done in the recent Python versions (3.0+)?</span>
<span class="comment-copy">@Vigneshwaren It's an implementation detail of whatever interpreter you are using. Python-the-language only guarantees that an <code>int</code> has arbitrary precision, not how that is accomplished.</span>
<span class="comment-copy">@Vigneshwaren: You can check basic info for CPython from <a href="https://docs.python.org/3/library/sys.html#sys.int_info" rel="nofollow noreferrer"><code>sys.int_info</code></a> (<code>long_info</code> on 2.7). Basically, each <code>sys.int_info.bits_per_digit</code> of absolute magnitude (sign irrelevant), or portion thereof, requires an extra <code>sys.int_info.sizeof_digit</code> bytes to store. Note: Small <code>int</code>s are cached in CPython, so as an implementation detail, values from (IIRC) -5 to 256 are singletons; you only pay the 4-8 bytes for the pointer to reference them, not the cost of the object itself.</span>
