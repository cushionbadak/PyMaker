<div class="post-text" itemprop="text">
<p>I have tried to find a good formula in Python 3 to calculate the complementary colour of a rgb code eg. complementary of a = b. Is there any way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's how to calculate the complement of an RGB colour directly. It gives the same results as the algorithm using  <code>colorsys</code> as shown in Iva Klass's answer, but in my tests it's about 50% faster. Note that it works for any RGB scheme, it doesn't matter whether the RGB components are integers or floats (as long as each component uses the same range!).</p>
<p>The function <code>hilo</code> implements a simple <a href="https://en.wikipedia.org/wiki/Sorting_network" rel="noreferrer">sorting network</a> to sort the RGB components.</p>
<pre><code># Sum of the min &amp; max of (a, b, c)
def hilo(a, b, c):
    if c &lt; b: b, c = c, b
    if b &lt; a: a, b = b, a
    if c &lt; b: b, c = c, b
    return a + c

def complement(r, g, b):
    k = hilo(r, g, b)
    return tuple(k - u for u in (r, g, b))
</code></pre>
<hr/>
<p>Here's a short demo, using PIL / Pillow.</p>
<pre><code>#!/usr/bin/env python3

''' Complement the colours in a RGB image 

    Written by PM 2Ring 2016.10.08
'''

import sys
from PIL import Image

# Sum of the min &amp; max of (a, b, c)
def hilo(a, b, c):
    if c &lt; b: b, c = c, b
    if b &lt; a: a, b = b, a
    if c &lt; b: b, c = c, b
    return a + c

def complement(r, g, b):
    k = hilo(r, g, b)
    return tuple(k - u for u in (r, g, b))

def complement_image(iname, oname):
    print('Loading', iname)
    img = Image.open(iname)
    #img.show()

    size = img.size
    mode = img.mode
    in_data = img.getdata()

    print('Complementing...')
    out_img = Image.new(mode, size)
    out_img.putdata([complement(*rgb) for rgb in in_data])
    out_img.show()
    out_img.save(oname)
    print('Saved to', oname)

def main():
    if len(sys.argv) == 3:
        complement_image(*sys.argv[1:])
    else:
        fmt = 'Complement colours.\nUsage: {} input_image output_image'
        print(fmt.format(sys.argv[0]))

if __name__ == '__main__':
    main()
</code></pre>
<h3>input image</h3>
<p><img alt="source image" src="https://i.stack.imgur.com/JM4F2.png" title="Glasses by Giles Tran"/></p>
<h3>output image</h3>
<p><img alt="output image" src="https://i.stack.imgur.com/J0gXd.png" title="Glasses, in complementary colours"/></p>
<hr/>
<p>Here's a Numpy version of <code>complement_image</code>. On my machine it processes the "Glasses" image about 3.7 times faster than the previous version.</p>
<pre><code>import numpy as np

def complement_image(iname, oname):
    print('Loading', iname)
    img = Image.open(iname)
    #img.show()

    in_data = np.asarray(img)
    #print(in_data.shape)

    print('Complementing...')
    lo = np.amin(in_data, axis=2, keepdims=True)
    hi = np.amax(in_data, axis=2, keepdims=True)
    out_data = (lo + hi) - in_data

    out_img = Image.fromarray(out_data)
    #out_img.show()
    out_img.save(oname)
    print('Saved to', oname)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't think there is ready solution for this, but there is a <a href="https://docs.python.org/3/library/colorsys.html%20%22colorsys%22%20standard%20module" rel="nofollow">colorsys</a> module in standard library, it can help.</p>
<p>I think you first need to convert RGB into <a href="https://en.wikipedia.org/wiki/HSL_and_HSV" rel="nofollow" title="HSL and HSV color systems">HSV or HSL</a>, then "rotate" hue, and convert back to RGB, if you need. For example (I'm not sure about proper rotating):</p>
<pre><code>from colorsys import rgb_to_hsv, hsv_to_rgb

def complementary(r, g, b):
   """returns RGB components of complementary color"""
   hsv = rgb_to_hsv(r, g, b)
   return hsv_to_rgb((hsv[0] + 0.5) % 1, hsv[1], hsv[2])
</code></pre>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/38478409/finding-out-complementary-opposite-color-of-a-given-color" title="finding out complementary opposite color of a given color">stackoverflow.com/questions/38478409/â€¦</a></span>
<span class="comment-copy">I noticed that, according to the picture, that the complimentary of green is purple. However, if you look at any colour wheel you'll see that the complimentary of green is red and the complimentary of purple is yellow. How come this has happened in the picture?</span>
<span class="comment-copy">@BillReason The traditional colour wheel of artists has the complements you mention, but the modern <a href="http://www.colorspire.com/rgb-color-wheel/" rel="nofollow noreferrer">RGB colour wheel</a> has green opposite purple. Wikipedia has a traditional colour star next to an RGB one <a href="https://en.wikipedia.org/wiki/Complementary_colors#Colors_produced_by_light" rel="nofollow noreferrer">here</a>.</span>
<span class="comment-copy">(cont) However, the RGB colour space is not perceptually uniform, and RGB complements are by no means faithful to human vision. You can get better complements from a <a href="https://en.wikipedia.org/wiki/CIELUV#/media/File:CIE_1976_UCS.png" rel="nofollow noreferrer">CIELUV diagram</a>. In that diagram, treat the white point near the top centre of the diagram as the centre of a circle, then complementary colours are diametrically opposite each other on that circle. Modern colour theory is rather complex, and I freely admit that I'm no expert. :)</span>
<span class="comment-copy">@BillReason Here's a great blog post by Jason Cohen on this topic: <a href="http://blog.asmartbear.com/color-wheels.html" rel="nofollow noreferrer">Color Wheels are wrong? How color vision actually works</a></span>
