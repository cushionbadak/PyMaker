<div class="post-text" itemprop="text">
<p>how would I create an n vector(or array) on Python and specify the value for each entry? For instance, let's say I want the vector (a1,...,a10) thus n=10 and each ai can be a value from [1,20]. So a1 can be any value from 1 through 20, thus a1 is any element in [1,20] , moreover a2 can be any value from [1,20] and so on. Or if n =15, then for (a1,...,a15) each ai can be a value [1,20]. Basically I would like to generalize it to any n tuple (a1,...,an) where each ai is a value from [1,20] and run through different values for n</p>
<p>Example.)if I wanted all tuples for n=2 and where each element ai can be a number 1 through 4 or in other words (a1,a2) where a1 is in [1,4] and a2 is in [1,4] this would give me:(1,1) ,(1,2), (2,1), (2,2), (2,3),(3,2),(3,3),(4,3),(3,4) and (4,4) </p>
<p>I not only want all combinations but each element has to be a value in the range [1,20]</p>
</div>
<div class="post-text" itemprop="text">
<p>According to your updated description if I understand correctly what you need is <code>itertools.product</code> (in general <code>itertools</code> module deals with permutations and combinations and the <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow">docs</a> are excellent. For example:</p>
<pre><code>s = list(range(1, 5))  # [a, b)
print(list(itertools.product(s, repeat=2)))
# [(1, 1), (1, 2), (1, 3), (1, 4), (2, 1), (2, 2), (2, 3), (2, 4), (3, 1), (3, 2), (3, 3), (3, 4), (4, 1), (4, 2), (4, 3), (4, 4)]
</code></pre>
<p>Below some further code I've written a while ago making use <code>itertools</code> for my own needs :) (note if you are in python2 uncomment the first line <code>from __future__ import print_function, division</code> line.</p>
<pre><code># from __future__ import print_function, division
import itertools

def possible_pairs(s, mirrors=True):
    if len(s) != len(set(s)):
        raise ValueError('duplicates found, but not allowed')
    return list(itertools.permutations(s, 2)) if mirrors else list(itertools.combinations(s, 2))

def possible_pairs_between_two_lists(s1, s2, mirrors=True):
    if len(s1) != len(set(s1)) or len(s2) != len(set(s2)):
        raise ValueError('duplicates found, but not allowed')
    return list(itertools.product(s1, s2)) + list(itertools.product(s2, s1)) if mirrors else list(
        itertools.product(s1, s2))


s = list(range(1, 5))  # [a, b)
print(possible_pairs(s))
# [(1, 2), (1, 3), (1, 4), (2, 1), (2, 3), (2, 4), (3, 1), (3, 2), (3, 4), (4, 1), (4, 2), (4, 3)]
print(possible_pairs(s, False))
# (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]
print(possible_pairs_between_two_lists(s, s))
# [(1, 1), (1, 2), (1, 3), (1, 4), (2, 1), (2, 2), (2, 3), (2, 4), (3, 1), (3, 2), (3, 3), (3, 4), (4, 1), (4, 2), (4, 3), (4, 4), (1, 1), (1, 2), (1, 3), (1, 4), (2, 1), (2, 2), (2, 3), (2, 4), (3, 1), (3, 2), (3, 3), (3, 4), (4, 1), (4, 2), (4, 3), (4, 4)]
print(possible_pairs_between_two_lists(s, s, False))
# [(1, 1), (1, 2), (1, 3), (1, 4), (2, 1), (2, 2), (2, 3), (2, 4), (3, 1), (3, 2), (3, 3), (3, 4), (4, 1), (4, 2), (4, 3), (4, 4)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python arrays default to lists (unless you're using Numpy). See <a href="http://www.i-programmer.info/programming/python/3942-arrays-in-python.html" rel="nofollow">this link</a> for more. </p>
<p>You can actually build a list relatively easily. </p>
<pre><code>import random
int_list = [randint(1,20) for i in range(n)]        # n is the list length
</code></pre>
<p>Hope this helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the array module if you want a very fast and efficient implementation of "true" arrays (as opposed to lists)</p>
<pre><code>import random
import array

a = array.array('l', [random.randint(1,20) for i in range(20)])
print a[1], a[2]
</code></pre>
<p>More information on the array module is here: <a href="https://docs.python.org/2/library/array.html" rel="nofollow">https://docs.python.org/2/library/array.html</a></p>
<p>Regards</p>
</div>
<span class="comment-copy">How about a tuple? Here's a tuple of 5 elements: <code>(7,13,11,2,8)</code></span>
<span class="comment-copy">yes, an n tuple works as well</span>
<span class="comment-copy">so if I wanted an n tuple where n=5, I'm trying to figure out how to code something like (a1=[1,20] , a2=[1,20], a3=[1,20], a4=[1,20], a5=[1,20]) via Numpy</span>
<span class="comment-copy">So, what exactly is your question?</span>
<span class="comment-copy">You want random value for each element?</span>
<span class="comment-copy">Thank you for your response. I've updated my question to be more specific. Essentially I want the list of the n tuples where each element is a value from 1 through 20. So for example, if I wanted all tuples for n=2 and where each element ai can be a number 1 through 4 or (a1,a2) where a1 is in [1,4] and a2 is in [1,4] this would give me:1,1) ,(1,2), (2,1), (2,2), (2,3),(3,2),(3,3),(4,3),(3,4) and (4,4)</span>
<span class="comment-copy">I noticed after running the code above for n=2, randint(1,4) and print(int_list) I got [1, 4] which I'm assuming it's returning random intergers from 1 through 4. However what I'm actually trying to figure out is how to obtain all of the n tuples given each element in that tuple is a value from [1,20]. So for n=2 and each element a_i is from [1,4] this would generate (1,1) ,(1,2), (2,1), (2,2), (2,3),(3,2),(3,3),(4,3),(3,4) and (4,4)</span>
<span class="comment-copy">@M3105 see updated answer</span>
<span class="comment-copy">Thank you for your response. I've updated my question to be more specific. Essentially I want the list of the n tuples where each element is a value from 1 through 20. So for example, if I wanted all tuples for n=2 and where each element ai can be a number 1 through 4 or (a1,a2) where a1 is in [1,4] and a2 is in [1,4] this would give me:1,1) ,(1,2), (2,1), (2,2), (2,3),(3,2),(3,3),(4,3),(3,4) and (4,4)</span>
<span class="comment-copy">If that's the case, a list comprehension with two for-loops should do. <code>int_list = [(i,k) for i in range(1,21) for k in range(1,21)]</code> should give you a list of all combinations (as tuples) of value pairs in [1,20] inclusive. If you want to make larger tuples (containing more than 2 values), you can add another loop in the list comp. Just be wary that runtime increases by factor of n for each additional value in the tuple. As such, I'd recommend switching over to numpy if you want to handle larger tuples/values.</span>
