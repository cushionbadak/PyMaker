<div class="post-text" itemprop="text">
<p>I have data like <code>data = [[t1, t2, ...], [v1, v2, ...]]</code>. I want to wrap this in a class so I can call <code>data.t</code> instead of having to use <code>data[0]</code>.</p>
<p>I tried to do this with the following:</p>
<pre><code>class Variable:
    def __init__(self, data):
        self.t = data[0]
        self.v = data[1]

    def __getitem__(self, key):
        if key == 0:
            return self.t
        elif key == 1:
            return self.v
        else:
            raise ValueError("not valid key '{}'".format(key))

    def __setitem__(self, key, value):
        if key == 0:
            self.t = value
        elif key == 1:
            self.v = value
        else:
            raise ValueError("not valid key '{}'".format(key))
</code></pre>
<p>The reason for the <code>__getitem__</code> and <code>__setitem__</code> overloading is for backwards compability so that <code>data[0]</code> still works. This works for most things, however I run into problems with the following call:</p>
<pre><code>func_that_takes_two_arguments(*data) # unpacking data
</code></pre>
<p>The error I get is </p>
<pre><code>/Users/pingul/Workspace/lhcfill/oml.py in __getitem__(self, key)
     52                                 return self.val
     53                         else:
---&gt; 54                                 raise ValueError("not valid key     '{}'".format(key))
     55 
     56                 def __setitem__(self, key, value):
ValueError: not valid key '2'
</code></pre>
<p>How can I make my class work properly with the argument unpacking operator?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>*</code> operator works by iterating over the object. This iteration can well be performed with only implementing <code>__getitem__()</code>, but your implementation is faulty. Instead if raising <code>ValueError</code>, you should throw <code>IndexError</code> which signals the end of the iteration.</p>
<p>See also <a href="https://docs.python.org/3/reference/datamodel.html#object.__getitem__" rel="nofollow">https://docs.python.org/3/reference/datamodel.html#object.<strong>getitem</strong></a> which explicitly states</p>
<blockquote>
<p><strong>Note:</strong> <code>for</code> loops expect that an <code>IndexError</code> will be raised for illegal indexes to allow proper detection of the end of the sequence.</p>
</blockquote>
<p><a href="https://docs.python.org/2/library/functions.html#iter" rel="nofollow">https://docs.python.org/2/library/functions.html#iter</a> states that this is called the "sequence protocol".</p>
</div>
<span class="comment-copy">You're not overloading <code>*</code>, that just iterates over the object. You need to <code>raise IndexError</code>, not <code>ValueError</code>.</span>
