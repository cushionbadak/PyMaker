<div class="post-text" itemprop="text">
<p>I'm working on a Python project and I'm hoping to use a few shortcuts to help format class data in a string. More specifically, I would like to be able to use something similar to <code>'{a}{b}{c}'.format(**vars(self), [strlen, strlen, strlen])</code> and specify the string length of each attribute that is displayed. For example:</p>
<pre><code>class Dummy(object):
    def __init__(self):
        self.value1 = 'A VALUE'
        self.value2 = 'ANOTHER VALUE'
        self.value3 = 'THIRD VALUE'

    def to_s(self):
        # want value1 to be 20 chars
        # value2 to be 8 chars
        # value3 to be 10 chars
        # is something similar to this possible
        return '{value1},{value2},{value3}'.format(**vars(self), [20, 8, 10])


    def to_s2(self):
        # or will I have to reference each explicitly and specify the either padding or slicing?
        return '{},{},{}'.format(self.value1.ljust(20), self.value2[:8], self.value3[:10])
</code></pre>
<p>I know it's a long shot, but a couple of these classes have 30 or 40 attribs and it would make life so much easier if this is doable.</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can nest <code>{}</code> fields inside <code>{}</code> fields, but only one level of nesting is permitted. Fortunately, only one level of nesting is actually needed. :)</p>
<p>From <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow">Format String Syntax</a>:</p>
<blockquote>
<p>A <em>format_spec</em> field can also include nested replacement fields within
  it. These nested replacement fields may contain a field name,
  conversion flag and format specification, but deeper nesting is not
  allowed. The replacement fields within the <em>format_spec</em> are substituted
  before the <em>format_spec</em> string is interpreted. This allows the
  formatting of a value to be dynamically specified.</p>
</blockquote>
<pre><code>class Dummy(object):
    def __init__(self):
        self.value1 = 'A VALUE'
        self.value2 = 'ANOTHER VALUE'
        self.value3 = 'THIRD VALUE'

    def __str__(self):
        # want value1 to be 20 chars
        # value2 to be 8 chars
        # value3 to be 10 chars
        return '{value1:{0}},{value2:{1}},{value3:{2}}'.format(*[20, 8, 10], **vars(self))

print(Dummy())
</code></pre>
<p><strong>output</strong></p>
<pre><code>A VALUE             ,ANOTHER VALUE,THIRD VALUE
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Something like this might work:</p>
<pre><code>class Dummy(object):
    def __init__(self):
        self.value1 = 'A VALUE'
        self.value2 = 'ANOTHER VALUE'
        self.value3 = 'THIRD VALUE'

    def to_s(self):
        return '{0.value1:&lt;20},{0.value2:8},{0.value3:10}'.format(self)
</code></pre>
<p>Se more details about formatting in <a href="https://docs.python.org/2/library/string.html#formatstrings" rel="nofollow">https://docs.python.org/2/library/string.html#formatstrings</a>. In case you want longer list of attributes and more dynamic formatting you can also construct format string dynamically, e.g. (untested):</p>
<pre><code>    field_formats = [('value1', '&lt;20'),
                     ('value2', '8'),
                     ('value3', '&gt;10'))  # etc.

    def to_s(self):
        fmt = ','.join('{0.%s:%s}' % fld for fld in field_formats)
        return fmt.format(self)
</code></pre>
</div>
