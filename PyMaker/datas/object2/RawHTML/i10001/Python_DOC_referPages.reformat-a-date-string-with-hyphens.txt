<div class="post-text" itemprop="text">
<p>I'm relatively new to python and would like to write clean code from the beginning. I need a parser of a string which formats a date in the form of "20140101" into "2014-01-01". How I achieved this is via:</p>
<pre><code>def parse(date):

    list_date = list(date)
    list_date.insert(4,"-")
    list_date.insert(7,"-")
    return "".join(list_date)
</code></pre>
<p>which works perfectly fine but looks not very clean. Maybe there is no other solution but if there is a more pythonic way to code it would be appreciated if you would share this!</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def parse(date):
    return "{}-{}-{}".format(date[:4], date[4:6], date[6:])
</code></pre>
<p>Might have made a small error, but that should do the trick, given how you're doing this.</p>
<p>See also <a href="http://pyformat.info" rel="nofollow">pyformat.info</a> for more information about Python's string formatting.</p>
<p>Also, I suggest looking into the <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow">datetime</a> module for more info about even more Pythonic ways of dealing with dates. ;)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use format, as mentioned by B. Eckles.  But you can also do:</p>
<pre><code>def parse(date):
    return "%s-%s-%s" % (date[:4], date[4:6], date[6:])
</code></pre>
<p>Using format seems unnecessary as you aren't actually using it for anything more than substituting portions of your string.</p>
</div>
<span class="comment-copy">Have you tried to read the <code>datetime.strptime</code> and <code>datetime.strftime</code> documentation?</span>
<span class="comment-copy">Probably don't even need the format. <code>'-'.join</code> would work as well</span>
<span class="comment-copy">True dat. Just figured <code>format</code> would give a few more intuitive options for a new user.</span>
