<div class="post-text" itemprop="text">
<p>I'm trying to decipher some complicated code. Below, I've simplified the code, of what I do understand of it, to get to the heart of my question. </p>
<pre><code>scales = (2**arange(8, 12, .25)).astype(int)
</code></pre>
<p>It seems to me that <code>arange()</code> creates an array of values, ranging from 8 to 11, with values 0.25 apart. </p>
<p>But then what does <code>2**arange</code> do? I know <code>**</code> is for exponentiation, but it doesn't make sense to me that one could exponentiate an array! Exponentiating the values inside the array make sense, sure. But that seems like very strange syntax for it!</p>
</div>
<div class="post-text" itemprop="text">
<p>Numpy arrays let you apply numeric operators to <em>all elements</em> in the array. So <code>array * 3</code> would apply the multiplication to all elements in the array, producing a new array with the results. You can use an array on <em>either side</em> of such an expression; after all, not all operators are <a href="https://en.wikipedia.org/wiki/Commutative_property" rel="nofollow"><em>commutative</em></a>.</p>
<p>Using <code>2 ** array</code> simply applies each element in the array as an exponent of 2, producing an array with the <code>2 ** &lt;input item&gt;</code> calculation:</p>
<pre><code>&gt;&gt;&gt; arange(8, 12, .25)
array([  8.  ,   8.25,   8.5 ,   8.75,   9.  ,   9.25,   9.5 ,   9.75,
        10.  ,  10.25,  10.5 ,  10.75,  11.  ,  11.25,  11.5 ,  11.75])
&gt;&gt;&gt; 2**arange(8, 12, .25)
array([  256.        ,   304.43702144,   362.03867197,   430.53896461,
         512.        ,   608.87404288,   724.07734394,   861.07792922,
        1024.        ,  1217.74808576,  1448.15468787,  1722.15585844,
        2048.        ,  2435.49617153,  2896.30937574,  3444.31171688])
</code></pre>
<p>So the input is an array with <code>8</code>, <code>8.25</code>, <code>8.5</code>, etc., and the resulting array contains the result of <code>2 ** 8</code>, <code>2 ** 8.25</code>, <code>2 ** 8.5</code>, and so on.</p>
<p>The <code>array.astype(int)</code> operation then floors the results:</p>
<pre><code>&gt;&gt;&gt; (2 ** arange(8, 12, .25)).astype(int)
array([ 256,  304,  362,  430,  512,  608,  724,  861, 1024, 1217, 1448,
       1722, 2048, 2435, 2896, 3444])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>arange</code> returns a <code>numpy</code> array, which supports vectorized operations.</p>
<p>For example, <code>2 ** [1 2 3]</code> returns <code>[2 4 8]</code>, just as <code>2 + [1 2 3]</code> returns <code>[3 4 5]</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Every type in Python can implement <a href="https://docs.python.org/3/reference/datamodel.html#special-method-names" rel="nofollow">methods that are the backing methods for various Python operators or operations</a>. Specifically in this case, <code>numpy.arange().__rpow__(int())</code> is invoked due to the operator and operands (respectively <code>**</code> and <code>int().__pow__(numpy.arange())</code> previously having returned <code>NotImplementedError</code>). This allows not only definitions of operations on new types, but also on existing types that would not be aware of how to handle the new type operand themselves.</p>
</div>
<span class="comment-copy">Never heard of vectorized operations? If you have an array of numbers you may want to perform the same operation over all elements. How is <code>some_array + 1</code> which adds <code>1</code> to all elements of an array different from <code>2**some_array</code> which turns an array of "exponents" into the result of <code>2</code> to the power of element?</span>
<span class="comment-copy">Definitely have not heard of that before! But now I have, thank you!</span>
