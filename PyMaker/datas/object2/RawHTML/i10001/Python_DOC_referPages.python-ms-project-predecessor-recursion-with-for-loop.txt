<div class="post-text" itemprop="text">
<p>I have extracted an MS project file as CSV. Its quite large (40 000 lines) and I'm trying to create a Python script that can print out all the tasks that precede a task/milestone/dependency.</p>
<p>The issue is with tasks that have multiple predecessors. I've stored these delimited by '~'.</p>
<pre><code>#Starting ID
MSid = 80329

#Subroutine FindPredesessors(MSid)
def FindPred(MSid):
#Get element[id] from the array                
    print(MSid)
    #Predecessors of task
    preds = arrMAX[MSid][1]
    #List of split milestones
    spID = spad.split('~')

    #Attempt to loop through Function for each milestone in the split list
    for h in range(len(spID)):         
        print(spID[h])
        print(h)
        FindPred(int(spID[h]))

FindPred(MSid)
</code></pre>
<p>The best I can do is the following output</p>
<pre><code>80329
['80326', '83171']
['80324', '80432']
['80323']
''
</code></pre>
<p>I can get the very left hand path, but I can't seem to come back and loop the function through the remainder of the split lists</p>
</div>
<div class="post-text" itemprop="text">
<p>Seems like you need a <a href="https://en.wikipedia.org/wiki/Breadth-first_search" rel="nofollow noreferrer">Breadth First Search</a>. The idea is:</p>
<ol>
<li>Put the needed event id in <a href="https://docs.python.org/3/tutorial/datastructures.html#using-lists-as-queues" rel="nofollow noreferrer">queue</a></li>
<li>While queue is not empty 

<ul>
<li>get() <code>current</code> id from it</li>
<li>put all the predecessors of <code>current</code> in queue</li>
</ul></li>
</ol>
<p>Thus, you will visit all the predecessors of the chosen event first and all their predecessors after that and so on.</p>
<pre><code>#!/usr/bin/env python3
from queue import Queue

size = 6
# in assumption you have devided strings to lists of ids
# -1 means that event has no predecessor.
preds = [[-1], [-1], [-1], [0], [1, 2], [3, 4]]

def bfs(start):
    """ Prints path of Depth first search given predecessors for all events"""
    q = Queue()
    q.put(start)

    while not q.empty():
        current = q.get()
        currentPreds = preds[current]
        print(current, end=' ')
        # or you can print them with predecessors
        # print(currentId =', current, '| preds:', currentPreds)

        for c in currentPreds:
            if not visited[c] and c != -1:
                q.put(c)
    print()

bfs(5)
</code></pre>
</div>
<span class="comment-copy">You will certainly hit some predecessor tasks multiple times, so store the IDs that you've already searched and check those before you do each search.</span>
<span class="comment-copy">I've tried that now and I'm getting a similar result. I can't seem to get the function to come back to where it was to complete the for loop.</span>
<span class="comment-copy">@codderz i've changed the answer, hope now it will be helpful. If you are looking only for recursion version check out Depth First Search, but for such task you don't need that.</span>
<span class="comment-copy">That is the best I've got it working so far. Thank you. But for some reason even though I've replaced all blank fields with -1 I'm sitting getting ' ' in the list and it is terminating with an error</span>
<span class="comment-copy">Just cleaned up my CSV a bit more and it works. Hooray! Thanks very much!</span>
