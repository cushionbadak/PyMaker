<div class="post-text" itemprop="text">
<p>I was wondering if anyone knew a way to make a dictionary ordered by the spelling of a particular word? Since a dictionary is unsorted, I resorted to the use of OrderedDict, but I believe you can only sort it through the keys and values. Any idea of how to order it in this way?</p>
<p>Here's part of the project I was working on:</p>
<pre><code>word = input("word")
list_1 = list(word)

word&gt;? apple

len_list_1 = len(list_1)


dict = {}

for x in range(0, len(list_1)):
    dict[list_1[x]] = list_1.count(list_1[x])

print(dict)

&gt;{'l': 1, 'p': 2, 'a': 1, 'e': 1}
</code></pre>
<p>I was trying to keep it in order of the word 'apple' and then somehow convert the dictionary into plain text:</p>
<pre><code>{'a' : 1, 'p': 2, 'l': 1, 'e': 1}
&gt; a1p2l1e1 #as my final answer
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As a first point, note that your code is a pretty inefficient and unpythonic way of doing something pretty simple:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; Counter('apple')
Counter({'p': 2, 'a': 1, 'e': 1, 'l': 1})
</code></pre>
<p>(Inefficient, because you are counting every letter every time, e.g. 'aaaaa' will count 'a' 5 times; unpythonic, because you declare and don't use a length variable and loop throw with <code>range(len(...))</code> which is almost never a good idea.)</p>
<p>You can then sort this counter and make it an <code>OrderedDict</code>. I am sorting by the first occurrence in the word:</p>
<pre><code>&gt;&gt;&gt; word = 'apple'
&gt;&gt;&gt; c = Counter(word)
&gt;&gt;&gt; OrderedDict(sorted(c.items(), key=lambda x: word.index(x[0])))
OrderedDict([('a', 1), ('p', 2), ('l', 1), ('e', 1)])
</code></pre>
<p>Note that the answer will be very different if you are simply grouping letters: a dictionary is not the right data structure if you want to do something like <code>'b1o1b1'</code>.</p>
<p>If your desired output is just the string <code>'a1p2l1e1'</code>, you can do the following:</p>
<pre><code>&gt;&gt;&gt; word = 'apple'
&gt;&gt;&gt; c = Counter(word)
&gt;&gt;&gt; sorted_letter_counts = sorted(c.items(), key=lambda x: word.index(x[0]))
&gt;&gt;&gt; ''.join(c + str(n) for c,n in sorted_letter_counts)
'a1p2l1e1'
</code></pre>
<p>Or as a one-liner:</p>
<pre><code>&gt;&gt;&gt; word = 'apple'
&gt;&gt;&gt; ''.join(c + str(n) for c,n in sorted(Counter('apple').items(), key=lambda x: word.index(x[0])))
'a1p2l1e1'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/collections.html#ordereddict-examples-and-recipes" rel="nofollow">Straight from the docs</a>:</p>
<pre><code>class OrderedCounter(collections.Counter, collections.OrderedDict):
    'Counter that remembers the order elements are first encountered'

    def __repr__(self):
        return '%s(%r)' % (self.__class__.__name__, collections.OrderedDict(self))

    def __reduce__(self):
        '''__reduce__ is for pickling'''
        return self.__class__, (collections.OrderedDict(self),)
</code></pre>
<p>Usage:</p>
<pre><code>&gt;&gt;&gt; foo = OrderedCounter('apple')
&gt;&gt;&gt; foo
OrderedCounter(OrderedDict([('a', 1), ('p', 2), ('l', 1), ('e', 1)]))
&gt;&gt;&gt;

&gt;&gt;&gt; for thing in foo.items():
    print(thing)


('a', 1)
('p', 2)
('l', 1)
('e', 1)
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">Just to clarify you want it ordered by the the "first seen" order in a word? So <code>mississippi</code> would yield <code>{'m': 1, 'i': 4, 's':4, 'p': 2}</code> / <code>m1i4s4p4</code> ?</span>
<span class="comment-copy">@AndrewGelnar Yes, that's exactly the way I need it to be.</span>
<span class="comment-copy">Thanks so much! I've learned so much by your example. I'm new to Python and still trying to figure out what is Pythonic and what isn't.</span>
