<div class="post-text" itemprop="text">
<p>I have a YAML file like the following:</p>
<pre><code>- workload:
    name: cloud1
    param:
      p1: v1
      p2: v2

- workload:
    name: cloud2
    param:
      p1: v1
      p2: v2
</code></pre>
<p>I can parse the file using the following Python script:</p>
<pre><code>#!/usr/bin/env python

import yaml   

try:
 for key, value in yaml.load(open('workload.yaml'))['workload'].iteritems():
   print key, value
except yaml.YAMLError as out:
  print(out)
</code></pre>
<p>output:</p>
<pre><code>name cloud1
param {'p1': 'v1'}
</code></pre>
<p>But I'm looking for is something like:</p>
<pre><code>workload1 = cloud1
workload1_param_p1 = v1
workload1_param_p2 = v2

workload2 = cloud2
workload2_param_p1 = v1
workload2_param_p2 = v2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your output doesn't match your input as the toplevel of your YAML file is a sequence that maps to a Python <code>list</code>.<br/>
The other thing not entirely clear is where the <code>workload</code> and especially the <code>1</code> in <code>workload1</code> come from. In the following I have assumed they come from  the key of the mapping that constitutes the sequence elements resp. the position of that sequence element (starting at 1, hence the <code>idx+1</code>).
The <code>name</code> is popped from a copy of the values, so that the rest can be recursively dumped correctly:</p>
<pre><code>import sys
import ruamel.yaml

yaml_str = """\
- workload:
    name: cloud1
    param:
      p1: v1
      p2: v2

- workload:
    name: cloud2
    param:
      p1: v1
      p2: v2
"""

data = ruamel.yaml.round_trip_load(yaml_str)

def dump(prefix, d, out):
    if isinstance(d, dict):
        for k in d:
            dump(prefix[:] + [k], d[k], out)
    else:
        print('_'.join(prefix), '=', d, file=out)

for idx, workload in enumerate(data):
    for workload_key in workload:
        values = workload[workload_key].copy()
        # alternatively extract from values['name']
        workload_name = '{}{}'.format(workload_key, idx+1)
        print(workload_name, '=', values.pop('name'))
        dump([workload_name], values, sys.stdout)
    print()
</code></pre>
<p>gives:</p>
<pre><code>workload1 = cloud1
workload1_param_p1 = v1
workload1_param_p2 = v2

workload2 = cloud2
workload2_param_p1 = v1
workload2_param_p2 = v2
</code></pre>
<p>This was done using <a href="https://pypi.python.org/pypi/ruamel.yaml" rel="nofollow noreferrer">ruamel.yaml</a>, a YAML 1.2 parser, of which I am the author. If you only have YAML 1.1 code (as supported by PyYAML) you should still use <code>ruamel.yaml</code> as its round_trip_loader guarantees that your <code>workload_param_p1</code> is printed before <code>workload_param_p2</code> (with PyYAML that is not guaranteed).</p>
</div>
<span class="comment-copy">Isn't that Yaml a tad incorrect? Shouldn't <code>workload</code> be a list?</span>
<span class="comment-copy">Something like <code>workloads:   - workload: cloud1     param:       p1: v1       p2: v2    - workload: cloud2     param:       p1: v1       p2: v2 </code></span>
<span class="comment-copy">you are right, tnx. I'll correct it.</span>
<span class="comment-copy">I think this question is mislabeled as it has nothing to do with YAML.  You have a dictionary and want that data in some other form. Wether the dictionary came from parsing a YAML file or anything else entirely isn't relevant.</span>
<span class="comment-copy">How about simply using the <a href="https://docs.python.org/3/library/pprint.html" rel="nofollow noreferrer"><code>pprint.pprint</code></a> function?</span>
<span class="comment-copy">For the last part, well that's a dictionary, the whole point is you normally don't care the order the keys are in. And for what it's worth, it is totally possible to have <code>PyYAML</code> spit out <code>OrderedDict</code>s, it takes about 3 lines of code to make it do so. â€” Note: I have nothing against your parser, it's a great piece of software, it's just this passage is both unfair and unrelated to the question.</span>
