<div class="post-text" itemprop="text">
<p>Suppose we have file like (first column refers to ID number and the second column to year):</p>
<pre><code>1|2015
1|2015
1|2015
2|2015
2|2015
2|2015
3|2014
3|2014
4|2014
4|2014
5|2013
</code></pre>
<p>Task is to count how many IDs are there for each year. For example in our case the output file should be:</p>
<pre><code>2015|2
2014|2
2013|1
</code></pre>
<p>What is the most appropriate programming structure to count these frequencies? My initial attempt is pasted below. (Current code prints only the number of distinct IDs.)</p>
<pre><code>tmp_id = ''
counter = 0
with open('test.txt') as my_file:
    for line in my_file:
        id, year = line.strip().split('|')
        if (id != tmp_id):
            counter = counter + 1
        tmp_id = id
print(counter)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is how i would do it:</p>
<pre><code>my_file = r'..\dummy.csv'

my_dict = dict()
with open(my_file, 'r') as f:
    for rows in f:
        v, k = rows.strip().split('|')
        my_dict.setdefault(k, [])
        my_dict[k].append(v)

for keys, values in my_dict.items():
    my_dict[keys] = len(set(values))

print(my_dict)  # prints -&gt; {'2013': 1, '2014': 2, '2015': 2}

with open(outfile, 'w') as f_out:
    for k, v in my_dict.items():
        f_out.write(k + '|' + v + '\n')
</code></pre>
<p>What's happening is that a dict is created to store the data. The choice for the dict comes from the fact that associations are present and have to be preserved (years to whatever the first column is). This is what dicts are for..</p>
<p>Then we loop through the file and keep adding dict keys (years) in the dictionary if they do not exist using the convenient <a href="https://docs.python.org/3.5/library/stdtypes.html#dict.setdefault" rel="nofollow"><code>.setdefault()</code></a> method. Their values are initialised as empty lists in which the numbers of the first column get appended.</p>
<p>When everything is collected, we go through the dict once more and replace all values (lists) with the lenght of the corresponding set. Note that passing a list to the <code>set()</code> will remove the duplicates present in the list. Finally the <code>len()</code> returns the length of the container.</p>
<p>The last thing we want is to write the results to a file which is trivial work. Just open something with the write flag <code>w</code> and iterate over the dict. Note that by default, the <code>write()</code> method does not add a newline character so you have to do that yourself with <code>'\n'</code>. Cheers.</p>
<hr/>
<p>Having said all that, the code above can probably be substituted by something like two lines if one uses <code>pandas</code> instead. I will let you look into that yourself though.</p>
</div>
<span class="comment-copy">your code does not associate the counters to the ids. To do that would probably need a dictionary like <code>my_dicty =  {'2015': 2, ...}</code> and so one.. But you can avoid all that if you take a look at <code>pandas</code>.</span>
<span class="comment-copy">You could use <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer">collections.defaultdict</a>, with a set for the default value- it would <i>simplify</i> some of the processing.</span>
