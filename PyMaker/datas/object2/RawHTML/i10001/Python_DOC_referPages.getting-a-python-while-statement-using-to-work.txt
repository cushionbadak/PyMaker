<div class="post-text" itemprop="text">
<p>So i have a program called lonesum(a,b,c) that needs to add the 3 numbers entered together only if they are input once. so lonesum(1,2,3) would return 6 but lonesum(1,1,3) would return 3. I have that part. What i need help with is getting a statement to work that will return an error if the user enters anything that isn't an integer i.e. lonesum(.5,2,3) will return error. so far i have this while statement which i thought would work but doesn't,: </p>
<pre><code>while (a,b,c) != int:
     print("Error")
     return None
while a==b==c:
    return 0
while a==b:
    return c
while b==c:
    return a
while a==c:
    return b
while a!=b!=c:
    sum1=(a+b+c)
    return sum1
</code></pre>
<p>(That is the rest of my code, that is the part that works)</p>
<p>My problem is the != doesn't work and I'm not sure what to do. Any suggestions?</p>
</div>
<div class="post-text" itemprop="text">
<p>Try something like this:</p>
<pre><code>if not all(type(v) is int for v in (a, b, c)):
    print("Error!")
    return None
</code></pre>
<p>What you want to check is if each value in (a, b, c) is of integer type. So you must check each value, not the tuple itself.</p>
<p>The builtin function <code>all</code> iterates over something iterable and returns true if all of the values are true. I've created a generator expression that iterates over the tuple (a, b, c), comparing the type of each value to <code>int</code>. <code>all</code> iterates over that generator expression. So if all of the values in (a, b, c) have type <code>int</code>, it returns <code>True</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want the sum of all numbers that appear exactly once, there are more succinct ways to do it. Count them all, sum the ones that appear once:</p>
<pre><code>from collections import Counter

def lonesum(a, b, c):
    counts = Counter((a, b, c))
    return sum(v for v, cnt in counts.items() if cnt == 1)
</code></pre>
<p>This implicitly raises an error if a non-numeric value is passed as an argument when it tries to sum them; if you want to <code>print</code> an error instead of propagating the exception, make it:</p>
<pre><code>def lonesum(a, b, c):
    try:
        counts = Counter((a, b, c))
        return sum(v for v, cnt in counts.items() if cnt == 1)
    except TypeError:
        print("Error!")
        return None
</code></pre>
</div>
<span class="comment-copy">What are you trying to achieve by using <code>(a,b,c) != int:</code>? What do you think this condition examines?</span>
<span class="comment-copy">the (a,b,c) is the input from when you run the lonesum(a,b,c) function. I was hoping that putting while (a,b,c), the input, != int, (an integer) that  it would print error and return none.</span>
<span class="comment-copy">Correct me if I'm wrong but isn't the print missing a double quote?</span>
<span class="comment-copy">A <code>while</code> that always returns on the first iteration is an <code>if</code></span>
<span class="comment-copy"><code>(a,b,c)</code> is creating a tuple. And the comparison is just wrong, even something like <code>1 == int</code> will return <code>False</code></span>
<span class="comment-copy">That works! thank you! If i can ask, do you think you could explain why it works so that i can understand it more? I'm still in the process of learning python and as nice as my professor is, she isn't very good at explaing things.</span>
<span class="comment-copy">Edited. I hope that makes things clearer.</span>
<span class="comment-copy">@ConorHastings: Read the docs for <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer"><code>all</code></a> and the <a href="https://docs.python.org/3/howto/functional.html#generator-expressions-and-list-comprehensions" rel="nofollow noreferrer">generator expression tutorial</a>; that covers both of the components here.</span>
<span class="comment-copy">Side-note: Specific type checking is usually a bad idea, since it makes your code not work with anything but <code>int</code>, even if it's logically integer data (e.g. <code>numpy</code> integer types, <code>gmpy2.mpz</code>, <code>long</code> on Python 2, etc.). That's why duck typing is encouraged, or failing that, checking a more generic abstract type with <code>isinstance</code>, e.g. in this case, <code>all(isinstance(v, numbers.Integral) for v in (a, b, c))</code>.</span>
<span class="comment-copy">@ConorHastings: I applaud you for asking for a better explanation. It's encouraging that you're interested in learning, not just getting your assignment done. And it keeps me honest -- I got a bit lazy.</span>
<span class="comment-copy">I know what i have is not ideal. But like i said, we haven't even learned how to do stuff like that yet.</span>
