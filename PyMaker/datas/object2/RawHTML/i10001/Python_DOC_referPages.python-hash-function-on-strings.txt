<div class="post-text" itemprop="text">
<p>How does a hash value of some particular string is calculated in CPython2.7?</p>
<p>For instance, this code:</p>
<pre><code>print hash('abcde' * 1000)
</code></pre>
<p>returns the same value even after I restart the Python process and try again (I did it many times). </p>
<p>So, it seems that <code>id()</code> (memory address) of the string doesn't used in this computation, right? Then how?</p>
</div>
<div class="post-text" itemprop="text">
<p>Hash values are not dependent on the memory location but the contents of the object itself. From the <a href="https://docs.python.org/2/library/functions.html#hash" rel="noreferrer">documentation</a>:</p>
<blockquote>
<p>Return the hash value of the object (if it has one). Hash values are integers. They are used to quickly compare dictionary keys during a dictionary lookup. Numeric values that compare equal have the same hash value (even if they are of different types, as is the case for 1 and 1.0).</p>
</blockquote>
<p>You can check out the source code for CPython implementation of the <code>hash</code> method of <code>str</code> class here:</p>
<p><a href="https://svn.python.org/projects/python/trunk/Objects/stringobject.c" rel="noreferrer">https://svn.python.org/projects/python/trunk/Objects/stringobject.c</a></p>
</div>
<span class="comment-copy">"returns the same value even after I restart the Python process and try again" - not guaranteed, and usually not true on Python 3. "it seems that id() (memory address) of the string doesn't used in this computation" - well, of course not. Otherwise, we wouldn't have the invariant that <code>a == b</code> implies <code>hash(a) == hash(b)</code>.</span>
<span class="comment-copy">I think you need to run <code>help(hash)</code> and <code>help(id)</code> to understand the difference between the two because they are not the same...</span>
<span class="comment-copy">Maybe this thread will shed some light? <a href="http://stackoverflow.com/questions/6008026/how-hash-is-implemented-in-python-3-2" title="how hash is implemented in python 3 2">stackoverflow.com/questions/6008026/â€¦</a></span>
<span class="comment-copy">@BorrajaX, thanks, I'll take a look</span>
<span class="comment-copy">Also relevant: <a href="https://stackoverflow.com/q/19580412/1959808">stackoverflow.com/q/19580412/1959808</a></span>
<span class="comment-copy">thanks. so it seems, that the hash(string) will be the same from run to run, right?</span>
<span class="comment-copy">@d-d No, it is not guaranteed to be the same every time, but it is guaranteed to return the same value within the same process. If you want a non-changing hash, use <a href="https://docs.python.org/3/library/hashlib.html" rel="nofollow noreferrer">hashlib</a> functions instead.</span>
<span class="comment-copy">yeah, I thought about it, but I need something faster than any hash function in this module. may be murmur hash or so..</span>
<span class="comment-copy">Check out various hash functions <a href="http://softwareengineering.stackexchange.com/questions/49550/which-hashing-algorithm-is-best-for-uniqueness-and-speed">here</a></span>
