<div class="post-text" itemprop="text">
<p>I'm reading some source code which contains a function similar to the following:</p>
<pre><code>def dummy_function():
    try:
        g = 1/0
    except Exception as e:
        raise Exception("There is an error: {}".format(e))
</code></pre>
<p>As I understand it, all exceptions are derived from the <a href="https://docs.python.org/3/library/exceptions.html#Exception" rel="nofollow">Exception</a> class, so this should catch all errors. Following <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow">https://docs.python.org/3/tutorial/errors.html</a>, then, would this not be equivalent to</p>
<pre><code>def dummy_function():
    try:
        g = 1/0
    except:
        print "There is an error:"
        raise
</code></pre>
<p>I notice that the printed output is arranged slightly differently in either case, but it would seem to me that the second method is basically the same and less verbose. Or am I missing something?</p>
</div>
<div class="post-text" itemprop="text">
<p>No, your code is not equivalent, for several reasons:</p>
<ul>
<li>A blank <code>except:</code> catches <em>all</em> exceptions, including those derived from <a href="https://docs.python.org/3/library/exceptions.html#BaseException" rel="nofollow"><code>BaseException</code></a> (<code>SystemExit</code>, <code>KeyboardInterrupt</code> and <code>GeneratorExit</code>); catching <code>Exception</code> filters out those exceptions you generally want to avoid catching without a re-raise. In older Python releases, it would also catch string exceptions (no longer permitted).</li>
<li>The <code>except Exception as e</code> catches subclasses, but then raises a new <code>Exception()</code> instance; the specific type information can't be used anymore in downstream <code>try...except</code> statements.</li>
<li>In Python 3, raising a new exception from an exception handler creates an exception chain (where the original exception is added as the <code>Exception.__context__</code> attribute, see <a href="https://stackoverflow.com/questions/24752395/python-raise-from-usage">Python "raise from" usage</a>)</li>
<li>The message is updated; that's probably the whole point here, is to give the exception a different message.</li>
</ul>
<p>The code you found is.. rather bad practice. The top-level exception handler should just catch and print a message and perhaps a traceback, rather than re-raise the exception with a new message (and in Python 2 lose all information on the original exception, in Python 3 make it inaccessible to exception matching in later handlers).</p>
</div>
<span class="comment-copy">No, they are not equivalent. The new <code>Exception</code> instance has a different message attached. That's the whole point of the re-raise, to change the message.</span>
<span class="comment-copy">And a blanket <code>except:</code> catches <code>BaseException</code> and it's subclasses too, while <code>except Exception:</code> does not.</span>
<span class="comment-copy">Also raising a new exception will create a chain of exceptions, while the bare <code>raise</code> won't</span>
<span class="comment-copy">@vaultah: provided this is Python 3.</span>
