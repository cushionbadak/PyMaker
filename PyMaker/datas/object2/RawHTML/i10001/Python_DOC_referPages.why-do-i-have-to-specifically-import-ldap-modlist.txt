<div class="post-text" itemprop="text">
<p>What is so special about <code>ldap.modlist</code> that I have to explicitly import it?  Importing <code>ldap</code> is not enough:</p>
<pre><code>&gt;&gt;&gt; import ldap
&gt;&gt;&gt; ldap.modlist
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'module' object has no attribute 'modlist'
</code></pre>
<p>But if I explicitly import it, then all is well:</p>
<pre><code>&gt;&gt;&gt; import ldap
&gt;&gt;&gt; import ldap.modlist
&gt;&gt;&gt; ldap.modlist
&lt;module 'ldap.modlist' from '/opt/rh/python27/root/usr/lib64/python2.7/site-packages/ldap/modlist.pyc'&gt;
</code></pre>
<p>Why?  Other modules don't behave like this:</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path
&lt;module 'posixpath' from '/opt/rh/python27/root/usr/lib64/python2.7/posixpath.pyc'&gt;

&gt;&gt;&gt; import ldap
&gt;&gt;&gt; ldap.dn
&lt;module 'ldap.dn' from '/opt/rh/python27/root/usr/lib64/python2.7/site-packages/ldap/dn.pyc'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The difference between the modules <code>ldap.dn</code> and <code>ldap.modlist</code> is this:</p>
<p>The module <code>ldap.dn</code> is loaded during the initialization of the <code>ldap</code> package and is therefore already present as an attribute in the <code>ldap</code> package (see <a href="https://docs.python.org/3/reference/import.html#submodules" rel="nofollow noreferrer">The Import System: Submodules</a> for a description about submodules):</p>
<pre><code># ldap/__init__.py, line 89 of python-ldap version 2.4.27
from ldap.dn import explode_dn,explode_rdn,str2dn,dn2str
</code></pre>
<p>The module <code>ldap.modlist</code> on the other hand is not loaded during the initalization of the <code>ldap</code> package.</p>
</div>
<span class="comment-copy">That's not special; that's how all packages behave.</span>
<span class="comment-copy">@DanielRoseman  I just edited the question to include a contrast between <code>ldap.modlist</code> and <code>os.path</code>.  Can you address this?  Does the term <i>package</i> have some specific technical meaning?</span>
<span class="comment-copy">Indeed, it is os.path that is special. On packages, see <a href="https://docs.python.org/3/glossary.html#term-package" rel="nofollow noreferrer">the docs</a>.</span>
<span class="comment-copy">Maybe I'm dense, but the docs didn't seem to explain this difference.  What is the mechanism by which <code>foo.bar</code> is not accessible after importing <code>foo</code>, but <code>foo.baz</code> is?</span>
<span class="comment-copy">As specific examples, see <code>ldap.modlist</code> and <code>ldap.dn</code>.</span>
<span class="comment-copy">Aha!  That's the piece I was missing.  I went over <code>__init__.py</code> with a fine-tooth comb looking for <code>import dn</code>, but I missed the <code>from ldap.dn import ...</code></span>
