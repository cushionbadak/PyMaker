<div class="post-text" itemprop="text">
<p>As I read Python answers on Stack Overflow, I continue to see some people <a href="https://stackoverflow.com/a/31401712/541136">telling users</a> to <a href="https://stackoverflow.com/a/15994607/541136">use the data model's</a> special <a href="https://stackoverflow.com/a/192207/541136">methods</a> or <a href="https://stackoverflow.com/a/29113307/541136">attributes</a> directly.</p>
<p>I then see contradicting advice (sometimes from myself) saying not to do that, and instead to use builtin functions and the operators directly.</p>
<p>Why is that? What is the relationship between the special "dunder" methods and attributes of the Python <a href="https://docs.python.org/3/reference/datamodel.html" rel="noreferrer">data model</a> and <a href="https://docs.python.org/3/library/functions.html" rel="noreferrer">builtin functions</a>? </p>
<p>When am I supposed to use the special names?</p>
</div>
<div class="post-text" itemprop="text">
<h1>What is the relationship between the Python datamodel and builtin functions?</h1>
<ul>
<li>The builtins and operators use the underlying datamodel methods or attributes.</li>
<li>The builtins and operators have more elegant behavior and are in general more forward compatible.</li>
<li>The special methods of the datamodel are semantically non-public interfaces.</li>
<li>The builtins and language operators are specifically intended to be the user interface for behavior implemented by special methods.</li>
</ul>
<p>Thus, you should prefer to use the builtin functions and operators where possible over the special methods and attributes of the datamodel.</p>
<p>The semantically internal APIs are more likely to change than the public interfaces. While Python doesn't actually consider anything "private" and exposes the internals, that doesn't mean it's a good idea to abuse that access.  Doing so has the following risks:</p>
<ul>
<li>You may find you have more breaking changes when upgrading your Python executable or switching to other implementations of Python (like PyPy, IronPython, or Jython, or some other unforeseen implementation.)</li>
<li>Your colleagues will likely think poorly of your language skills and conscientiousness, and consider it a code-smell, bringing you and the rest of your code to greater scrutiny.</li>
<li>The builtin functions are easy to intercept behavior for. Using special methods directly limits the power of your Python for introspection and debugging.</li>
</ul>
<h2>In depth</h2>
<p>The builtin functions and operators invoke the special methods and use the special attributes in the Python datamodel. They are the readable and maintainable veneer that hides the internals of objects. In general, users should use the builtins and operators given in the language as opposed to calling the special methods or using the special attributes directly. </p>
<p>The builtin functions and operators also can have fallback or more elegant behavior than the more primitive datamodel special methods. For example:</p>
<ul>
<li><code>next(obj, default)</code> allows you to provide a default instead of raising <code>StopIteration</code> when an iterator runs out, while <code>obj.__next__()</code> does not. </li>
<li><code>str(obj)</code> fallsback to <code>obj.__repr__()</code> when <code>obj.__str__()</code> isn't available - whereas calling <code>obj.__str__()</code> directly would raise an attribute error.</li>
<li><code>obj != other</code> fallsback to <code>not obj == other</code> in Python 3 when no <code>__ne__</code> - calling <code>obj.__ne__(other)</code> would not take advantage of this.</li>
</ul>
<p>(Builtin functions can also be easily overshadowed, if necessary or desirable, on a module's global scope or the <code>builtins</code> module, to further customize behavior.)</p>
<h2>Mapping the builtins and operators to the datamodel</h2>
<p>Here is a mapping, with notes, of the builtin functions and operators to the respective special methods and attributes that they use or return - note that the usual rule is that the builtin function usually maps to a special method of the same name, but this is not consistent enough to warrant giving this map below:</p>
<pre><code>builtins/     special methods/
operators  -&gt; datamodel               NOTES (fb == fallback)

repr(obj)     obj.__repr__()          provides fb behavior for str
str(obj)      obj.__str__()           fb to __repr__ if no __str__
bytes(obj)    obj.__bytes__()         Python 3 only
unicode(obj)  obj.__unicode__()       Python 2 only
format(obj)   obj.__format__()        format spec optional.
hash(obj)     obj.__hash__()
bool(obj)     obj.__bool__()          Python 3, fb to __len__
bool(obj)     obj.__nonzero__()       Python 2, fb to __len__
dir(obj)      obj.__dir__()
vars(obj)     obj.__dict__            does not include __slots__
type(obj)     obj.__class__           type actually bypasses __class__ -
                                      overriding __class__ will not affect type
help(obj)     obj.__doc__             help uses more than just __doc__
len(obj)      obj.__len__()           provides fb behavior for bool
iter(obj)     obj.__iter__()          fb to __getitem__ w/ indexes from 0 on
next(obj)     obj.__next__()          Python 3
next(obj)     obj.next()              Python 2
reversed(obj) obj.__reversed__()      fb to __len__ and __getitem__
other in obj  obj.__contains__(other) fb to __iter__ then __getitem__
obj == other  obj.__eq__(other)
obj != other  obj.__ne__(other)       fb to not obj.__eq__(other) in Python 3
obj &lt; other   obj.__lt__(other)       get &gt;, &gt;=, &lt;= with @functools.total_ordering
complex(obj)  obj.__complex__()
int(obj)      obj.__int__()
float(obj)    obj.__float__()
round(obj)    obj.__round__()
abs(obj)      obj.__abs__()
</code></pre>
<p>The <code>operator</code> module has <code>length_hint</code> which has a fallback implemented by a respective special method if <code>__len__</code> is not implemented:</p>
<pre><code>length_hint(obj)  obj.__length_hint__() 
</code></pre>
<h3>Dotted Lookups</h3>
<p>Dotted lookups are contextual. Without special method implementation, first look in class hierarchy for data descriptors (like properties and slots), then in the instance <code>__dict__</code> (for instance variables), then in the class hierarchy for non-data descriptors (like methods). Special methods implement the following behaviors:</p>
<pre><code>obj.attr      obj.__getattr__('attr')       provides fb if dotted lookup fails
obj.attr      obj.__getattribute__('attr')  preempts dotted lookup
obj.attr = _  obj.__setattr__('attr', _)    preempts dotted lookup
del obj.attr  obj.__delattr__('attr')       preempts dotted lookup
</code></pre>
<h3>Descriptors</h3>
<p>Descriptors are a bit advanced - feel free to skip these entries and come back later - recall the descriptor instance is in the class hierarchy (like methods, slots, and properties). A data descriptor implements either <code>__set__</code> or <code>__delete__</code>:</p>
<pre><code>obj.attr        descriptor.__get__(obj, type(obj)) 
obj.attr = val  descriptor.__set__(obj, val)
del obj.attr    descriptor.__delete__(obj)
</code></pre>
<p>When the class is instantiated (defined) the following descriptor method <code>__set_name__</code> is called if any descriptor has it to inform the descriptor of its attribute name. (This is new in Python 3.6.) <code>cls</code> is same as <code>type(obj)</code> above, and <code>'attr'</code> stands in for the attribute name:</p>
<pre><code>class cls:
    @descriptor_type
    def attr(self): pass # -&gt; descriptor.__set_name__(cls, 'attr') 
</code></pre>
<h3>Items (subscript notation)</h3>
<p>The subscript notation is also contextual:</p>
<pre><code>obj[name]         -&gt; obj.__getitem__(name)
obj[name] = item  -&gt; obj.__setitem__(name, item)
del obj[name]     -&gt; obj.__delitem__(name)
</code></pre>
<p>A special case for subclasses of <code>dict</code>, <code>__missing__</code> is called if <code>__getitem__</code> doesn't find the key:</p>
<pre><code>obj[name]         -&gt; obj.__missing__(name)  
</code></pre>
<h3>Operators</h3>
<p>There are also special methods for <code>+, -, *, @, /, //, %, divmod(), pow(), **, &lt;&lt;, &gt;&gt;, &amp;, ^, |</code> operators, for example:</p>
<pre><code>obj + other   -&gt;  obj.__add__(other), fallback to other.__radd__(obj)
obj | other   -&gt;  obj.__or__(other), fallback to other.__ror__(obj)
</code></pre>
<p>and in-place operators for augmented assignment, <code>+=, -=, *=, @=, /=, //=, %=, **=, &lt;&lt;=, &gt;&gt;=, &amp;=, ^=, |=</code>, for example:</p>
<pre><code>obj += other  -&gt;  obj.__iadd__(other)
obj |= other  -&gt;  obj.__ior__(other)
</code></pre>
<p>and unary operations:</p>
<pre><code>+obj          -&gt;  obj.__pos__()
-obj          -&gt;  obj.__neg__()
~obj          -&gt;  obj.__invert__()
</code></pre>
<h3>Context Managers</h3>
<p>A context manager defines <code>__enter__</code>, which is called on entering the code block (its return value, usually self, is aliased with <code>as</code>), and <code>__exit__</code>, which is guaranteed to be called on leaving the code block, with exception information.</p>
<pre><code>with obj as cm:     -&gt;  cm = obj.__enter__()
    raise Exception('message')
-&gt;  obj.__exit__(Exception, Exception('message'), traceback_object)
</code></pre>
<p>If <code>__exit__</code> gets an exception and then returns a false value, it will reraise it on leaving the method. </p>
<p>If no exception, <code>__exit__</code> gets <code>None</code> for those three arguments instead, and the return value is meaningless:</p>
<pre><code>with obj:           -&gt;  obj.__enter__()
    pass
-&gt;  obj.__exit__(None, None, None)
</code></pre>
<h3>Some Metaclass Special Methods</h3>
<p>Similarly, classes can have special methods (from their metaclasses) that support abstract base classes:</p>
<pre><code>isinstance(obj, cls) -&gt; cls.__instancecheck__(obj)
issubclass(sub, cls) -&gt; cls.__subclasscheck__(sub)
</code></pre>
<p>An important takeaway is that while the builtins like <code>next</code> and <code>bool</code> do not change between Python 2 and 3, underlying implementation names <em>are</em> changing. </p>
<p>Thus using the builtins also offers more forward compatibility.</p>
<h2>When am I supposed to use the special names?</h2>
<p>In Python, names that begin with underscores are semantically non-public names for users. The underscore is the creator's way of saying, "hands-off, don't touch."</p>
<p>This is not just cultural, but it is also in Python's treatment of API's. When a package's <code>__init__.py</code> uses <code>import *</code> to provide an API from a subpackage, if the subpackage does not provide an <code>__all__</code>, it excludes names that start with underscores. The subpackage's <code>__name__</code> would also be excluded. </p>
<p>IDE autocompletion tools are mixed in their consideration of names that start with underscores to be non-public. However, I greatly appreciate not seeing <code>__init__</code>, <code>__new__</code>, <code>__repr__</code>, <code>__str__</code>, <code>__eq__</code>, etc. (nor any of the user created non-public interfaces) when I type the name of an object and a period.</p>
<p>Thus I assert:</p>
<p><strong>The special "dunder" methods are not a part of the public interface. Avoid using them directly.</strong> </p>
<p>So when to use them? </p>
<p>The main use-case is when implementing your own custom object or subclass of a builtin object. </p>
<p>Try to only use them when absolutely necessary. Here are some examples:</p>
<h3>Use the <code>__name__</code> special attribute on functions or classes</h3>
<p>When we decorate a function, we typically get a wrapper function in return that hides helpful information about the function. We would use the <code>@wraps(fn)</code> decorator to make sure we don't lose that information, but if we need the name of the function, we need to use the <code>__name__</code> attribute directly:</p>
<pre><code>from functools import wraps

def decorate(fn): 
    @wraps(fn)
    def decorated(*args, **kwargs):
        print('calling fn,', fn.__name__) # exception to the rule
        return fn(*args, **kwargs)
    return decorated
</code></pre>
<p>Similarly, I do the following when I need the name of the object's class in a method (used in, for example, a <code>__repr__</code>):</p>
<pre><code>def get_class_name(self):
    return type(self).__name__
          # ^          # ^- must use __name__, no builtin e.g. name()
          # use type, not .__class__
</code></pre>
<h3>Using special attributes to write custom classes or subclassed builtins</h3>
<p>When we want to define custom behavior, we must use the data-model names. </p>
<p>This makes sense, since we are the implementors, these attributes aren't private to us.</p>
<pre><code>class Foo(object):
    # required to here to implement == for instances:
    def __eq__(self, other):      
        # but we still use == for the values:
        return self.value == other.value
    # required to here to implement != for instances:
    def __ne__(self, other): # docs recommend for Python 2.
        # use the higher level of abstraction here:
        return not self == other  
</code></pre>
<p>However, even in this case, we don't use <code>self.value.__eq__(other.value)</code> or <code>not self.__eq__(other)</code> (see my <a href="https://stackoverflow.com/q/4352244/541136">answer here</a> for proof that the latter can lead to unexpected behavior.) Instead, we should use the higher level of abstraction.</p>
<p>Another point at which we'd need to use the special method names is when we are in a child's implementation, and want to delegate to the parent. For example:  </p>
<pre><code>class NoisyFoo(Foo):
    def __eq__(self, other):
        print('checking for equality')
        # required here to call the parent's method
        return super(NoisyFoo, self).__eq__(other) 
</code></pre>
<h2>Conclusion</h2>
<p>The special methods allow users to implement the interface for object internals. </p>
<p>Use the builtin functions and operators wherever you can. Only use the special methods where there is no documented public API.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'll show some usage that you apparently didn't think of, comment on the examples you showed, and argue against the privacy claim from your own answer.</p>
<hr/>
<p>I agree with your own answer that for example <code>len(a)</code> should be used, not <code>a.__len__()</code>. I'd put it like this: <strong><code>len</code> exists so we can use it, and <code>__len__</code> exists so <code>len</code> can use it</strong>. Or however that really works internally, since <code>len(a)</code> can actually be much <strong>faster</strong>, at least for example for lists and strings:</p>
<pre><code>&gt;&gt;&gt; timeit('len(a)', 'a = [1,2,3]', number=10**8)
4.22549770486512
&gt;&gt;&gt; timeit('a.__len__()', 'a = [1,2,3]', number=10**8)
7.957335462257106

&gt;&gt;&gt; timeit('len(s)', 's = "abc"', number=10**8)
4.1480574509332655
&gt;&gt;&gt; timeit('s.__len__()', 's = "abc"', number=10**8)
8.01780160432645
</code></pre>
<p>But besides defining these methods in my own classes for usage by builtin functions and operators, I occasionally also use them as follows:</p>
<p>Let's say I need to give a filter function to some function and I want to use a set <code>s</code> as the filter. I'm not going to create an extra function <code>lambda x: x in s</code> or <code>def f(x): return x in s</code>. No. I already have a perfectly fine function that I can use: the set's <code>__contains__</code> method. It's simpler and more direct. And even faster, as shown here (ignore that I save it as <code>f</code> here, that's just for this timing demo):</p>
<pre><code>&gt;&gt;&gt; timeit('f(2); f(4)', 's = {1, 2, 3}; f = s.__contains__', number=10**8)
6.473739433621368
&gt;&gt;&gt; timeit('f(2); f(4)', 's = {1, 2, 3}; f = lambda x: x in s', number=10**8)
19.940786514456924
&gt;&gt;&gt; timeit('f(2); f(4)', 's = {1, 2, 3}\ndef f(x): return x in s', number=10**8)
20.445680107760325
</code></pre>
<p>So while I don't <strong>directly call</strong> magic methods like <code>s.__contains__(x)</code>, I do occasionally <strong>pass</strong> them somewhere like <code>some_function_needing_a_filter(s.__contains__)</code>. And I think that's perfectly fine, and better than the lambda/def alternative.</p>
<hr/>
<p>My thoughts on the examples you showed:</p>
<ul>
<li><a href="https://stackoverflow.com/a/31401712/541136">Example 1</a>: Asked how to get the size of a list, he answered <code>items.__len__()</code>. Even without any reasoning. My verdict: That's just wrong. Should be <code>len(items)</code>.</li>
<li><a href="https://stackoverflow.com/a/15994607/541136">Example 2</a>: Does mention <code>d[key] = value</code> first! And then adds <code>d.__setitem__(key, value)</code> with the reasoning <em>"if your keyboard is missing the square bracket keys"</em>, which rarely applies and which I doubt was serious. I think it was just the foot in the door for the last point, mentioning that that's how we can support the square bracket syntax in our own classes. Which turns it back to a suggestion to use square brackets.</li>
<li><a href="https://stackoverflow.com/a/192207/541136">Example 3</a>: Suggests <code>obj.__dict__</code>. Bad, like the <code>__len__</code> example. But I suspect he just didn't know <code>vars(obj)</code>, and I can understand it, as <code>vars</code> is less common/known and the name does differ from the "dict" in <code>__dict__</code>.</li>
<li><a href="https://stackoverflow.com/a/29113307/541136">Example 4</a>: Suggests <code>__class__</code>. Should be <code>type(obj)</code>. I suspect it's similar to the <code>__dict__</code> story, although I think <code>type</code> is more well-known.</li>
</ul>
<hr/>
<p>About privacy: In your own answer you say these methods are "semantically private". I strongly disagree. Single and double <strong>leading</strong> underscores are for that, but not the data model's special "dunder/magic" methods with double leading+trailing underscores.</p>
<ul>
<li>The two things you use as arguments are importing behaviour and IDE's autocompletion. But importing and these special methods are different areas, and the one IDE I tried (the popular PyCharm) disagrees with you. I created a class/object with methods <code>_foo</code> and <code>__bar__</code> and then autocompletion didn't offer <code>_foo</code> but <strong>did</strong> offer <code>__bar__</code>. And when I used both methods anyway, PyCharm only warned me about <code>_foo</code> (calling it a "protected member"), <strong>not</strong> about <code>__bar__</code>.</li>
<li><a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a> says <em>'weak "internal use" indicator'</em> explicitly for <strong>single</strong> leading underscore, and explicitly for double <strong>leading</strong> underscores it mentions the name mangling and later explains that it's for <em>"attributes that you do not want subclasses to use"</em>. But the comment about <strong>double leading+trailing</strong> underscores doesn't say anything like that.</li>
<li>The <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">data model page</a> you yourself link to says that these <a href="https://docs.python.org/3/reference/datamodel.html#special-method-names" rel="nofollow noreferrer">special method names</a> are <strong>"Python’s approach to operator overloading"</strong>. Nothing about privacy there. The words private/privacy/protected don't even appear anywhere on that page.<br/><br/>
I also recommend reading <a href="http://www.pixelmonkey.org/2013/04/11/python-double-under-double-wonder" rel="nofollow noreferrer">this article by Andrew Montalenti</a> about these methods, emphasizing that <em>"The dunder convention is a namespace reserved for the core Python team"</em> and <em>"Never, ever, invent your own dunders"</em> because <em>"The core Python team reserved a somewhat ugly namespace for themselves"</em>. Which all matches PEP 8's instruction <em>"Never invent [dunder/magic] names; only use them as documented"</em>. I think Andrew is spot on - it's just an ugly namespace of the core team. And it's for the purpose of operator overloading, not about privacy (not Andrew's point but mine and the data model page's).</li>
</ul>
<p>Besides Andrew's article I also checked several more about these "magic"/"dunder" methods, and I found none of them talking about privacy at all. That's just not what this is about.</p>
<p>Again, we should use <code>len(a)</code>, not <code>a.__len__()</code>. But not because of privacy.</p>
</div>
<span class="comment-copy">I think mileage varies a little depending on which dunder attribute/method you're working with.  e.g. <code>self.__dict___</code> is probably nearly as common as <code>vars(self)</code>, <code>self.__class__</code> is also nearly as popular as <code>type(self)</code>.  As a slight generalization, I think that not using methods that look up attributes are more likely to be considered "acceptable" by the community vs. methods that call hooks.  With that said, I fall squarely on the same side of this discussion as your conclusion:  "Use builtin functions/operators wherever you can"</span>
<span class="comment-copy">It might be interesting to note that special methods are called on the class, not the instance. For example, <code>next(obj)</code> doesn't quite translate to <code>obj.__next__()</code>, but rather something like <code>type(obj).__next__(obj)</code>.</span>
<span class="comment-copy">I think that one other (key) difference between <code>type(obj)</code> vs <code>obj.__class__</code> and <code>len(a)</code> vs <code>a.__len__()</code> is that the builtin <code>type</code> is overloaded.  <code>type(obj)</code> means something completely different than <code>type('Foo', (object,), {})</code>.  Similarly with <code>vars()</code> vs <code>vars(obj)</code>.  Rather than remembering that <code>type</code> does multiple things, I think people tend to just think of <code>type</code> as a factory for creating new types and so they fall back to good ole' <code>obj.__class__</code> to get an object's type.  I'm not saying that they <i>should</i>, just trying to explain why it might be more common than <code>__len__</code> misuse</span>
<span class="comment-copy">@mgilson Good point. Or maybe they even only know the other thing. Like, they somewhere saw <code>type</code> being used for creating a type and then never learned the other thing because they thought they already know what <code>type</code> does. Another thing might be IDE's auto-completion. People might learn what they can do with objects by looking at what auto-completion offers. And then they see <code>__class__</code> there but not <code>type</code>.</span>
