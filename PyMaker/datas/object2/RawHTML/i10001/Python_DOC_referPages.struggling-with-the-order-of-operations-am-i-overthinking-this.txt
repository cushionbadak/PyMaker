<div class="post-text" itemprop="text">
<p>I've been given the following, and I'm asked to give the type of value and the expression it returns:</p>
<p><code>&gt;&gt;&gt; b = 10</code></p>
<p><code>&gt;&gt;&gt; c = b &gt; 9</code></p>
<p><code>&gt;&gt;&gt; c</code></p>
<p>I know that in the first part, we're defining <code>b</code> to be 10, but in the second sentence, I'm interpreting this as: Define <code>c</code> to be equal to <code>b&gt;9</code>. Now <code>b&gt;9</code> as a value, doesn't make sense, so <code>c</code> can't be equal to it, so I put that the answer was <code>error</code> and the type was <code>Nonetype</code>.</p>
<p>The correct answer is apparently <code>True</code>, but why? Why do we take the <code>c=b</code> part first, and then ask whether it's &gt;9? Is there some sort of standard order in which you're supposed to apply these things?</p>
<p>PS: What do the three <code>&gt;&gt;&gt;</code> symbols mean in programming? I'm doing an introductory CS course, so please forgive any misnomers.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python's order precedence is <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow">well documented</a>. <code>b &gt; 9</code> returns a boolean value that must be evaluated before it can be assigned with <code>c =</code>. </p>
<p>And <code>&gt;&gt;&gt;</code> is part of the interpreter REPL. It doesn't have a specific meaning to all programming languages. </p>
<p>You could run your code in any Python interpreter to see what the output values are. I'm not sure what you mean by getting a Nonetype error as nothing is evaluated to None in those lines </p>
</div>
<div class="post-text" itemprop="text">
<p>I think you're getting confused between: </p>
<ul>
<li>the assignment operator (<code>=</code>), which assigns the result of the expression on the right side of the operator to the variable on the left side of the operator and;</li>
<li>the equality operator (<code>==</code>), which tests the expressions on the right and left of the operator for equality and returns a boolean (true/false) value.</li>
</ul>
<p>The first expression assigns the value 10 to the variable <code>b</code>. The second expression assigns the expression <code>b &gt; 9</code> (i.e. 10 &gt; 9), which evaluates to true, to <code>c</code>. Therefore, I hope you can see how <code>c</code> ends up being true.</p>
<p>The other issue you might need clarification on is that the <code>=</code> operator is <em>right associative</em>, which means that the expression to the right of the operator will be evaluated first. i.e. in the second line, <code>b &gt; 9</code> is evaluated first before assigning the result (true) to <code>c</code>.</p>
<p>In answer to the second part of your question. Your code wouldn't actually compile as it stands in a regular C# compiler. I'm not sure what the <code>&gt;&gt;&gt;</code> are. Are you using an online editor or something?</p>
<p>Valid C# code would be:</p>
<pre><code>int b = 10;
bool c = b &gt; 9;
Console.WriteLine(c); //Outputs true
</code></pre>
</div>
<span class="comment-copy">It's a Python question...</span>
<span class="comment-copy">To clarify, <code>c</code> is assigned the <i>result</i> of <i>evaluating</i> the expression <code>b &gt; 9</code>, not the expression itself. <code>=</code> is not really an operator, either; the fact that you can write <code>a = b = 2</code> is a special property of the assignment <i>statement</i>, not the result of <code>a</code> being assigned any particular result of the "expression" <code>b = 2</code>.</span>
