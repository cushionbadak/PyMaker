<div class="post-text" itemprop="text">
<p>I have the following problem. In my code I am getting at one point a list which does look like the following example:</p>
<pre><code>['-0---110', '--1--110', '01---100', '1--101-0', '10-1-100',...., '10100010']
</code></pre>
<p>Now I want to know how often does a string occur with 0, 1, 2, 3,... bars.
Is there an easy way to do it? </p>
<p>Edit: I thought something like <code>['-0---110', '--1--110', '01---100', '1--101-0', '10-1-100',...., '10100010'].count(-)</code>should work but it doesn't</p>
<p>Edit2: My second try which also seems to work is:</p>
<pre><code>barcounter = numpy.zeros(8)
for x in range(len(list)):
    rankcounter[8-1-list[x].count("-")] += 1
print("barcounter", barcounter)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I get the sense of what you were going for, but you'll need to loop through the list. Here is a solution that returns a dictionary mapping from number of bars to frequency of which that many bars appeared in a string:</p>
<pre><code>from collections import defaultdict

def get_bar_freq(bar_list):
    bar_freq = defaultdict(int)       # a dictionary that will keep track of frequencies 
    for word in bar_list:
        num_bars = word.count('-')
        bar_freq[num_bars] += 1       # increment freq of this many num_bars
    return bar_freq


def main():
    bar_list = ['-0---110', '--1--110', '01---100', '1--101-0', '10-1-100', '10100010']
    print(get_bar_freq(bar_list))

if __name__ == '__main__':
    main()
</code></pre>
<p>This outputs: <code>defaultdict(&lt;class 'int'&gt;, {0: 1, 2: 1, 3: 2, 4: 2})</code> i.e. it is saying 1 string contained 0 bars, 1 string contained 2 bars, 2 strings contained 3 bars, and 2 strings contained 4 bars.</p>
<p>After you understand what's going on here, if you want to see a more Pythonic (and imo, better) way to do it, do check out the other answer. You can use <code>collections.counter</code> which essentially provides the functionality of the bar_freq dictionary in this solution.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you have Python 2.7+ you can actually use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>collections.Counter</code></a>:</p>
<pre><code>from collections import Counter

def get_bar_freq(bar_list):
    return Counter(entry.count('-') for entry in bar_list)
</code></pre>
<p>In our case the <code>Counter</code> counts how often a value appears in an iterable. Now to get a suitable iterator, we just need to get a list of whatever we want to count. In this case how many “bars” a string contains.</p>
<p>The result will be something like this:</p>
<pre><code>Counter({3: 2, 4: 2, 0: 1, 2: 1})
</code></pre>
</div>
<span class="comment-copy">Yes. What have you tried so far? Can you show your attempt?</span>
<span class="comment-copy">lists do not have the <code>count</code> method. strings do. iterate through the items of your list and apply the <code>count</code> there. its that easy. also you need to quote the bar.</span>
<span class="comment-copy">Ah okay, I think that helps :)</span>
<span class="comment-copy">@Ev.Kounis lists <i>do</i> have the <code>count</code> method</span>
<span class="comment-copy">Oops, ofc they do. Sorry and thanks!</span>
<span class="comment-copy">Ah thanks a lot, that is also a really nice solution!</span>
<span class="comment-copy">A counter is better suited for this, and result in an one liner. For instance <code>Counter( w.count("-") for w in bar_list )</code></span>
<span class="comment-copy">@Copperfield I wholeheartedly agree. However, I find that pedagogical it is better for people to see what is happening. I'm not a contracted code monkey writing code that works for someone. I'm here to help them learn and one liners are not always the way to do that. Nevertheless I'll add the one liner at the end as a reference. Thanks (y)</span>
<span class="comment-copy">@gowrath that is not the only reason why a counter is better suited, you also have the most_common method to some extra analysis of the data (and also you can use it the same way as you use the defaultdict if you want to show the step by step process)</span>
<span class="comment-copy">@Copperfield You're right; I'll add in a note.</span>
<span class="comment-copy">Ah okay, this is something I was looking for. Thanks :) Much shorter than my simple try.</span>
