<div class="post-text" itemprop="text">
<p>I have the following code with a timeout set to 60 sec</p>
<pre><code>p = subprocess.Popen(['ocamlopt', file], \
                     stdout=subprocess.PIPE, \
                     stderr=subprocess.PIPE, \
                     timeout=TIMEOUT_ECAML, \
                     )
</code></pre>
<p>I don't understand why I am getting the error message of </p>
<pre><code>__init__() got an unexpected keyword argument 'timeout'
</code></pre>
<p>I have looked into <a href="https://stackoverflow.com/questions/24264922/init-got-an-unexpected-keyword-argument-timeout-in-python-subprocess">this previous post</a> with the same error, but the other user uses <code>subprocess.call()</code> while I am using <code>subprocess.Popen()</code> so I am confused why this is happening.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>Popen</code> class does not have a <code>timeout</code> argument in its signature:</p>
<p><a href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen" rel="nofollow">https://docs.python.org/2/library/subprocess.html#subprocess.Popen</a></p>
<p>You can pass the <code>timeout</code> argument when you actually communicate though:</p>
<p><a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow">https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Same reason. There is no timeout argument.</p>
<p>List of all valid arguments for a <code>Popen</code>: <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" rel="nofollow">https://docs.python.org/3/library/subprocess.html#subprocess.Popen</a></p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>the other user uses <code>subprocess.call()</code> while I am using <code>subprocess.Popen()</code> so I am confused why this is happening.</p>
</blockquote>
<p><code>call()</code> blocks until the command ends or the timeout happens. <code>Popen()</code> does NOT wait for the command to finish; it returns immediately and therefore it does not accept <code>timeout</code> parameter. You could pass <code>timeout</code> to <code>wait()</code> or <code>communicate()</code> methods which do wait until the process finishes or the timeout happens.</p>
</div>
<span class="comment-copy"><code>subprocess.run()</code> introduced at Python 3.5 has the timeout argument and is now the preferred interface.</span>
