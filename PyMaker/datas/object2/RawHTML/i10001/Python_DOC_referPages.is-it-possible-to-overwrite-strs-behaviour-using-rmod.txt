<div class="post-text" itemprop="text">
<p>I'd like to do:</p>
<pre><code>x %doSomething% y
</code></pre>
<p>which is easy enough to do (see code below) for any x and any y except in the case that x is a str.</p>
<p>Is there any way (e.g. adding a special method or raising a specific error) to cause old style string formatting to fail (similarly to how 1 %doSomthing fails with a TypeError) and revert to the __rmod__ method defined in the doSomething object?</p>
<pre><code>class BinaryMessage(object):
  def __init__(self, fn):
    self._fn = fn
  def __rmod__(self, LHS):
    return BinaryMessagePartial(self._fn, LHS)

class BinaryMessagePartial(object):
  def __init__(self, fn, LHS):
    self._fn = fn
    self._LHS = LHS
  def __mod__(self, RHS):
    return self._fn(self._LHS, RHS)

def _doSomething(a , b):
  return a + b

doSomething = BinaryMessage(_doSomething)

result = 5 %doSomething% 6
assert result == 11
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Note</strong>: I submitted patches for Python 2.7, and 3.5 and up. These have landed and are part of 2.7.14, 3.5.4, 3.6.1 and 3.7, where the OP example now works as expected. For older versions, see below.</p>
<hr/>
<p>Unfortunately, this is not currently possible in Python. The behaviour is hardcoded in the evaluation loop:</p>
<pre class="lang-c prettyprint-override"><code>TARGET(BINARY_MODULO) {
    PyObject *divisor = POP();
    PyObject *dividend = TOP();
    PyObject *res = PyUnicode_CheckExact(dividend) ?
        PyUnicode_Format(dividend, divisor) :
        PyNumber_Remainder(dividend, divisor);
</code></pre>
<p>(From the <a href="https://hg.python.org/cpython/file/v3.5.2/Python/ceval.c#l1545" rel="nofollow noreferrer">Python 3.5 source code</a>, where <code>PyUnicode</code> is the Python <code>str</code> type).</p>
<p>This is unfortunate, because for <em>every other type</em> you can prevent the <code>LHS.__mod__</code> method to be invoked by using a subclass for the right-hand operand; from the <a href="https://docs.python.org/3/reference/datamodel.html#object.__ror__" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p><strong>Note</strong>: If the right operand’s type is a subclass of the left operand’s type and that subclass provides the reflected method for the operation, this method will be called before the left operand’s non-reflected method. This behavior allows subclasses to override their ancestors’ operations.</p>
</blockquote>
<p>This would have been the only option here, <code>str % other</code> never returns <code>NotImplemented</code>, <em>all</em> RHS types are accepted (the actual <a href="https://hg.python.org/cpython/file/v3.5.2/Objects/unicodeobject.c#l13670" rel="nofollow noreferrer"><code>str.__mod__</code> method</a> only accepts <code>str</code> objects for the RHS, but is not called in this case).</p>
<p>I consider this a bug in Python, filed as <a href="http://bugs.python.org/issue28598" rel="nofollow noreferrer">issue #28598</a>.</p>
</div>
<span class="comment-copy">To clarify: You want <code>"foo" % doSomething % "bar"</code> to return <code>"foobar"</code>? I believe that is impossible, because <code>str.__mod__</code> raises a <code>TypeError</code> instead of returning <code>NotImplemented</code>.</span>
<span class="comment-copy">@MartijnPieters I don't see that working with your answer. It works for integers etc., like in the question, but <code>"foo" % doSomething % "bar"</code> raises the same TypeError.</span>
<span class="comment-copy">@L3viathan: nope, I was getting a little too far ahead here. This is actually a bug in Python, in my opinion.</span>
<span class="comment-copy">@MartijnPieters, Martijin, your answer is thorough and shows a deep understanding though doesn't address the presented problem (unless the suggestion is for BinaryMessage to subclass str). You explain that that there is a bug in str that prevents a subclass of string from overriding <b>rmod</b> but L3viathan explains that the key issue is str.__mod__ raises a Type error instead of returning NotImplemented and thus answers the question as "it's not possible". I felt that was a better answer to the presented question, though your action of raising a bug report is very welcome.</span>
<span class="comment-copy">@DangerMouse: no, you misunderstand what L3viathan is saying there. There is <i>no workaround</i> at this time. The presented problem can't be addressed until the bug is fixed. <i>That's</i> why it is not possible. The <code>TypeError</code> is not the reason, the reason is that <code>str % ..</code> accepts all types and will never return <code>NotImplemented</code> <b>and</b> the remaining path of subclassing <code>str</code> doesn't work either because of the bug.</span>
<span class="comment-copy">Thx. Very nice to have a definitive answer.</span>
<span class="comment-copy">Thx to L3viathan for initially pointing out the problem and to MartijnPieters for digging down and initiating a bug track. My chosen workaround is to use <code>__mul__</code> and <code>__rmul__</code> thus <code>result = 4 *plus* 5</code></span>
