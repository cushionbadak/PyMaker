<div class="post-text" itemprop="text">
<p>How can I execute the following code in a more efficient way in python? The input flags are binary valued. The output depends on all possible permutations of the flag.</p>
<pre><code>def f1():

    return 1

def f2():

    return 2

def f3():

    return 3    


def g(p1, p2, p3):

    if p1 ==  1 &amp; p2 == 0 &amp; p3 == 0:
        f1()

    elif: p1 == 0 &amp; p2 == 1 &amp; p3 == 0:
        f2()

    elif: p1 == 0 &amp; p2 == 0 &amp; p3 == 1:
        f3()

    elif: p1 == 1 &amp; p2 == 1 &amp; p3 == 1:
        f1()
        f2()
</code></pre>
<p>and so on.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to use the arguments <code>(p1, p2, p3)</code> as flags, you could always pack those arguments as a list using <code>*args</code> (see <a href="http://www.saltycrane.com/blog/2008/01/how-to-use-args-and-kwargs-in-python/" rel="nofollow noreferrer">this</a>, <a href="https://stackoverflow.com/questions/3394835/args-and-kwargs">this</a> and <a href="https://pythontips.com/2013/08/04/args-and-kwargs-in-python-explained/" rel="nofollow noreferrer">this</a>) and put your functions in a list (yep, Python lets you do that) and get something like:</p>
<pre><code>def f1():
    return 1

def f2():
    return 2

def f3():
    return 3 

def g(*ps):
    functions = [f1, f2, f3]
    for i, p in enumerate(ps):
        if p == 1:  # Could do just `if p:` (0 evaluates to False, anything else to True)
            print(functions[i])()  # Notice the () to actually call the function 

if __name__ == "__main__":
    print("Run 1 0 0")
    g(1, 0, 0)
    print("Run 1 1 0")
    g(1, 1, 0)
    print("Run 0 1 0")
    g(0, 1, 0)
    print("Run 1 1 1")
    g(1, 1, 1)
</code></pre>
<p>As per <a href="https://stackoverflow.com/users/364696/shadowranger">ShadowRanger</a>'s <a href="https://stackoverflow.com/questions/40393290/multiple-conditionals-effciently/40393400#comment68038376_40393400">comment</a> to this answer, you could even shorten the code a bit more. For instance, using <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a>:</p>
<pre><code>def g(*ps):
    functions = [f1, f2, f3]
    for function, p in zip(functions, ps):
        if p:
            print(function())
</code></pre>
<p>Or using <a href="https://docs.python.org/3.1/library/itertools.html#itertools.compress" rel="nofollow noreferrer"><code>itertools.compress</code></a> (you'll need to <code>import itertools</code> at the top of your file):</p>
<pre><code>def g(*ps):
    functions = [f1, f2, f3]
    for function in itertools.compress(functions, ps):
        print(function())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can combine the three bits into a single number and then test the value of that number like this:</p>
<pre><code>def g(p1, p2, p3):

   v = (p1 &lt;&lt; 2) + (p2 &lt;&lt; 1) + p3

    if v == 4: # 100
        f1()
    elif v == 2: # 010
        f2()
    elif v == 1: # 001
        f3()
    elif v == 7: # 111
        f1()
        f2()
</code></pre>
</div>
<span class="comment-copy">If <code>p1 == 1 &amp; p2 == 1 &amp; p3 == 1</code> you don't wanna run <code>f3()</code>?</span>
<span class="comment-copy"><i>and so on</i>? It doesn't seem like the desired behavior is obvious from what you are showing here.</span>
<span class="comment-copy">Yes I do. Sorry, that was a typo.</span>
<span class="comment-copy">What about if <code>p1</code> and <code>p2</code> are 1, but <code>p3</code> is 0?</span>
<span class="comment-copy">Then run f1 and f2 but not f3.</span>
<span class="comment-copy">Why use <code>enumerate</code> when you could just do <code>for func, p in zip(functions, ps):</code> and avoid indexing? For that matter, you could simplify even further with <code>itertools</code>: <code>for func in itertools.compress(functions, ps): func()</code>, avoiding any tests at all (<code>compress</code> will return the function corresponding to each truthy <code>p</code>).</span>
<span class="comment-copy">Very true! As a matter of fact, I didn't even know the <code>itertools.compress</code>!!  (TIL) <b>:-)</b> I did think about the zip... I was trying to deviate as little as I could from the initial code? But you're right: the OP asked for a more efficient way, and those are.</span>
<span class="comment-copy">I'm gonna go find one of your answers and upvote it!! <b>:-D</b></span>
<span class="comment-copy">I'd personally use <code>0b100</code>/<code>0b010</code>/etc. as the constant to make it slightly more obvious, but yeah, I just posted (and then deleted) this exact answer 15 seconds after you.</span>
