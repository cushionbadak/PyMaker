<div class="post-text" itemprop="text">
<p>Well in my application I basically need to use the "sum of all previous terms in list", however the list isn't just a list but rather a generator of tupples (where the third index is the "offending" one.</p>
<p>As an example (non working code obviously but it should show the idea):</p>
<pre><code>def calculate_minimal_charge_rate(self) -&gt; float:
    o = self.orbit
    shadow_time = o.generate_shadow_light_time_list()
    P = self.getIdlePowerConsumption()
    a = 0
    return max(a += ind[1]; P * ind[2].period / \
            (ind[2].period - a) for ind in shadow_time)
</code></pre>
<p>Or a minimal working example (note that this is silly as another function from itertools could just solve this for me)</p>
<pre><code>def calculate_minimal_charge_rate(self) -&gt; float:
    o = self.orbit
    shadow_time = o.generate_shadow_light_time_list()
    P = self.getIdlePowerConsumption()
    a = 0
    return max(a += ind[1]; a for ind in shadow_time)
</code></pre>
<p>Now the obvious "solution" is the use of a for loop:</p>
<pre><code>def calculate_minimal_charge_rate(self) -&gt; float:
    o = self.orbit
    shadow_time = o.generate_shadow_light_time_list()
    P = self.getIdlePowerConsumption()
    a = 0
    max_power = 0
    for ind in shadow_time:
        a += ind[1] 
        preq = P * ind[2].period / \
                (ind[2].period - a)
        if preq &gt; max_power:
            max_power = preq
    return max_power
</code></pre>
<p>But isn't that way too verbose for such a simple "thing"? Oh for completeness sake, here is <code>orbit.generate_shadow_light_time_list()</code>:</p>
<pre><code>def generate_shadow_light_time_list(self):
    """
    Returns total max time in shadow
    Iterativelly calls max_time_in_shadow for each orbit until star is found
    """
    o = self
    try:
        while o.parent.brightness &lt;= 0:
            t = o.max_time_in_shadow()
            yield (o.period - t, t, o)
            o = o.parent.orbit
    except AttributeError:
        return
    return
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you are trying to accumulate state in your generator expression, you will need a separate object to maintain it for you. Your current <code>for</code> loop solution is probably the easiest way to do this in terms of maintenance and readability. Another option would be to write your own generator that would maintain the state you need and pass it to <code>max</code>. Thanks to @patrick-haugh for suggesting this solution:</p>
<pre><code>def calculate_minimal_charge_rate(self) -&gt; float:
    def get_that_quantity():
        a = 0
        for item in shadow_time:
            a += item[1]
            p = item[2].period
            yield power * p / (p - a)

    power = self.getIdlePowerConsumption()
    shadow_time = self.orbit.generate_shadow_light_time_list()
    return max(get_that_quantity())
</code></pre>
<p>Hopefully looking at this code will convince you that there is no good reason to use it. The only advantage is that you are basically passing most of your <code>for</code> loop to <code>max</code> via the generator rather than implementing the logic of <code>max</code> yourself. Your case is specialized enough where you are not likely to get any extra mileage from obfuscating things like this.</p>
<p><strong>UPDATE</strong></p>
<p>I eliminated the need to pass arguments to the generator by moving it into the function that uses it. This arguably puts the implementation on par with the <code>for</code> loop since it does not introduce any new code, but does remove the <code>max</code> logic.</p>
</div>
<span class="comment-copy">tuples in python look like <code>(value, value, value)</code></span>
<span class="comment-copy">A generator expression must be just that, an expression.  You aren't allowed to do assignment in it</span>
<span class="comment-copy">Look at the implementation of accumulate here: <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer">docs.python.org/3/library/itertools.html#itertools.accumulate</a></span>
<span class="comment-copy">I vote for the obvious solution. You want your code to be readable and easy to understand.</span>
