<div class="post-text" itemprop="text">
<p>The mock examples <a href="http://www.voidspace.org.uk/python/mock/examples.html#tracking-order-of-calls-and-less-verbose-call-assertions" rel="nofollow">list this example</a>:</p>
<pre><code>&gt;&gt;&gt; manager = MagicMock()
&gt;&gt;&gt; with patch('mymodule.Class1') as MockClass1:
...     with patch('mymodule.Class2') as MockClass2:
...         manager.attach_mock(MockClass1, 'MockClass1')
...         manager.attach_mock(MockClass2, 'MockClass2')
...         MockClass1().foo()
...         MockClass2().bar()
...
&lt;MagicMock name='mock.MockClass1().foo()' id='...'&gt;
&lt;MagicMock name='mock.MockClass2().bar()' id='...'&gt;
&gt;&gt;&gt; manager.mock_calls
[call.MockClass1(),
 call.MockClass1().foo(),
 call.MockClass2(),
 call.MockClass2().bar()]
</code></pre>
<p>I would like to accomplish the same thing, but with <a href="https://docs.python.org/3/library/unittest.mock.html#patch-methods-start-and-stop" rel="nofollow">explicit <code>start</code> and <code>stop</code> calls</a> on a patcher instead of the context manager, and it seems <code>patcher.start()</code> returns something which isn't really a mock in the same sense that contextualized one is, at least with respect to the ability to attach them to a parent mock:</p>
<pre><code>&gt;&gt;&gt; from mock import patch, Mock
&gt;&gt;&gt; p = patch('requests.get', autospec=True)
&gt;&gt;&gt; manager = Mock()
&gt;&gt;&gt; manager.attach_mock(p.start(), 'requests_get')
&gt;&gt;&gt; import requests
&gt;&gt;&gt; requests.get('https://google.com')
&lt;MagicMock name='get()' id='4472381392'&gt;
&gt;&gt;&gt; manager.mock_calls
[]
&gt;&gt;&gt; p.stop()
&gt;&gt;&gt; manager.mock_calls
[]
</code></pre>
<p>Am I missing something, or is this a bug, and what is the best way to go about mocking out several such calls and verifying that they are all made in the expected order?</p>
</div>
<div class="post-text" itemprop="text">
<p>Because of <code>autospec=True</code> and a function is being mocked out, <code>patch</code> will return a function, as well. In order to access the mock object, you can access <code>patch(â€¦).start().mock</code>.</p>
</div>
