<div class="post-text" itemprop="text">
<p>I am trying to call the function addPXT through argparse when type -a. Its not doing that. Read another issue, there addPXT was not in colons, tried that it says addPXT is not callable.</p>
<pre><code>parser = argparse.ArgumentParser()
parser.add_argument('-a' ,action='store_const'  ,const='addPXT')
results = parser.parse_args()

def addPXT():
        print "hello"
</code></pre>
<hr/>
<pre><code>    python script.py -a
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are a beginner with <code>argparse</code> and <code>python</code>, I'd recommend sticking with the default <code>store</code> action, which stores strings, and the boolean actions ('store_true/false').  Make sure you understand those first.</p>
<p>That said, here is a way of using <code>store_const</code> to call different functions:</p>
<pre><code>In [131]: import argparse
</code></pre>
<p>define 2 functions:</p>
<pre><code>In [132]: def act1():
     ...:     print('act1')
     ...:    
In [133]: def act2():
     ...:     print('act2')
     ...:     
In [134]: parser=argparse.ArgumentParser()
In [135]: parser.add_argument('-a',action='store_const',default=act1,const=act2);
</code></pre>
<p>I define both the default and the const - and specify the functions, not their names.  Understanding the difference is important.</p>
<p>Try the default case:</p>
<pre><code>In [136]: args=parser.parse_args([])
In [137]: print(args)
Namespace(a=&lt;function act1 at 0xb07331dc&gt;)
In [138]: args.a()
act1
</code></pre>
<p>Try the <code>-a</code> commandline case:</p>
<pre><code>In [139]: args=parser.parse_args(['-a'])
In [140]: print(args)
Namespace(a=&lt;function act2 at 0xb078c1dc&gt;)
In [141]: args.a()
act2
</code></pre>
<p>If you have more arguments (dest), you could pass <code>args</code> to your function, if it is defined to accept them, <code>args.a(args)</code>.</p>
<p>The simpler boolean argument approach:</p>
<pre><code>In [146]: parser=argparse.ArgumentParser()
In [147]: parser.add_argument('-a',action='store_true');
In [148]: args=parser.parse_args([])
In [149]: print(args)
Namespace(a=False)
In [150]: if args.a:
     ...:     act2()
     ...: else:
     ...:     act1()
act1
# similarly for `['-a']`.
</code></pre>
<p>or if you accept strings, maybe even choices</p>
<pre><code>if args.a == 'act1':
     act1()
elif ...
</code></pre>
<p>The primary purpose of <code>argparse</code> is to deduce what the user wants, and issue help and error messages.  Acting on that information is largely the responsibility of the rest your code. </p>
</div>
<div class="post-text" itemprop="text">
<p>You're missing a <code>dest</code>option in the add_argument to be able to reference the option.</p>
<p>You will then need to test if the <code>-a</code> option was passed as argument. If so, then call the function.</p>
<pre><code>parser = argparse.ArgumentParser()
parser.add_argument('-a' ,dest="my_flag", action='store_const'  ,const=True)
results = parser.parse_args()

def addPXT():
    print "hello"

if results.my_flag:
    addPXT()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>argparse</code> will call the <code>action</code> object during parsing but you need to supply something that looks like the <code>Action</code> class because the parser will use that object later. The <a href="https://docs.python.org/2.7/library/argparse.html#action" rel="nofollow noreferrer">Action doc</a> says</p>
<blockquote>
<p>You may also specify an arbitrary action by passing an Action subclass
  or other object that implements the same interface. The recommended
  way to do this is to extend Action, overriding the <strong>call</strong> method and
  optionally the <strong>init</strong> method.</p>
</blockquote>
<p>So, create an <code>Action</code> subclass and have it call your function</p>
<pre><code>import argparse
import sys

def addPXT():
    print "hello"

class FooAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        addPXT()

parser = argparse.ArgumentParser()
parser.add_argument('-a', action=FooAction)
results = parser.parse_args(sys.argv[1:])
</code></pre>
</div>
<span class="comment-copy">Why did you think it <i>would</i> do that?</span>
<span class="comment-copy">I am trying to call a function, read another issue. this was recommended</span>
<span class="comment-copy">Could you link to that, and provide an actual <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>? By colons do you mean quotes?</span>
<span class="comment-copy"><i>The const argument of add_argument() is used to hold constant values</i> -- Are you sure that should be the function name?</span>
<span class="comment-copy">What is your goal? <code>argparse</code> is for parsing command line arguments and not for calling arbitrary functions. If <code>addPTX</code> is supposed to process an argument, for later use by your program, then great. But read how the <a href="https://docs.python.org/3/library/argparse.html#action" rel="nofollow noreferrer">action</a> keyword works. It has a specific role and it uses an <a href="https://docs.python.org/3/library/argparse.html#argparse.Action" rel="nofollow noreferrer">Action</a> object.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/19251204/execute-function-via-arg" title="execute function via arg">stackoverflow.com/questions/19251204/execute-function-via-arg</a> I tried with type also didn't work for me.</span>
<span class="comment-copy">Make sure you understand when the <code>type</code> function is executed. See my comment on the accepted answer of your link.</span>
<span class="comment-copy">parser.add_argument('-a'       ,action='store_const',default='addPXT',const='test');  I tried to use ur method, I am not able to give default and const as function names, its accepting as a string only. when I tries results.a() it says str not callable. On the other hand if i remove colons i get addPXT  not defined</span>
<span class="comment-copy"><code>its accepting as a string only</code> - elaborate.  What's the error message?  You need to understand the difference between function names (references) and strings.  Strings aren't callable.  The end of my code shows how string values could be used.</span>
<span class="comment-copy">Traceback (most recent call last):   File "PXT.py", line 17, in &lt;module&gt;     parser.add_argument('-a'       ,action='store_const',default='addPXT',const=test); NameError: name 'test' is not defined</span>
<span class="comment-copy">Whether this is the right answer depends on OP's intent. If OP wants to define an alternate action for the command parser, an <code>Action</code> object would be more appropriate.</span>
<span class="comment-copy">Right, but as far as I know the <code>action</code> keyword does not support function calling in py3 <a href="https://docs.python.org/3/library/argparse.html#action" rel="nofollow noreferrer">docs.python.org/3/library/argparse.html#action</a></span>
<span class="comment-copy">Use `action='store_true' to get a simple True/False flag.  For a beginner Python/argparse user simple True/False and string arguments are best.</span>
<span class="comment-copy">Without the <code>dest</code>, <code>results.a</code> fetches the value.  Or use <code>('-a','--my_flag',...)</code>.</span>
<span class="comment-copy">The <code>action</code> keyword expects a <code>Action</code>-like object which should do some preprocessing on the option before the parser continues on its way. Depending on what OP wants to do,  either your answer or something using an <code>Action</code> object is best.</span>
