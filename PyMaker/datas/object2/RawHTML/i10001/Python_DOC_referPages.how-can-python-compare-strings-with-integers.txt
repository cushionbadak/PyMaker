<div class="post-text" itemprop="text">
<p>Given the following code:</p>
<pre><code>a = '1'
if a == 1:
    print 'yes'
else:
    print 'no'
</code></pre>
<p>we get output as <code>no</code>.</p>
<p>How is Python comparing a string value to an int here (<code>if a == 1</code>)? In C such a comparison would give an error because this is comparing different types.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python is not C. Unlike C, Python supports equality testing between arbitrary types.</p>
<p>There is no 'how' here, strings don't support equality testing to integers, integers don't support equality testing to strings. So Python falls back to the default identity test behaviour, but the objects are <em>not the same object</em>, so the result is <code>False</code>.</p>
<p>See the <a href="https://docs.python.org/3/reference/expressions.html#value-comparisons" rel="nofollow noreferrer"><em>Value comparisons</em> section</a> of the reference documentation:</p>
<blockquote>
<p>The default behavior for equality comparison (<code>==</code> and <code>!=</code>) is based on the identity of the objects. Hence, equality comparison of instances with the same identity results in equality, and equality comparison of instances with different identities results in inequality. A motivation for this default behavior is the desire that all objects should be reflexive (i.e. <code>x is y</code> implies <code>x == y</code>).</p>
</blockquote>
<p>If you wanted to compare integers to strings containing digits, then you need to convert the string to an integer or the integer so a string, then compare.</p>
</div>
<span class="comment-copy">Out of curiosity, how does this square with other behaviors where there is type coercing: e.g. <code>3 is 3.0 == False</code> but <code>(3 == 3.0) == True</code> (I'm not suggesting strings should be coerced, but I'm more asking about the final sentence in your quote.)</span>
<span class="comment-copy">@brianpck: that's a <i>chained comparison</i>, which is the same thing as <code>3 is 3.0 and 3.0 == False</code>. The first expression is <b>not</b> the same thing as the second.</span>
<span class="comment-copy">@brianpck: see <a href="//stackoverflow.com/q/6074018">Why does the expression 0 &lt; 0 == 0 return False in Python?</a></span>
<span class="comment-copy">@sanyesh: yes, when two names refer to the same object; in that case <code>id(op1)</code> will be the same as <code>id(op2)</code>. It is the same test as <code>op1 is op2</code>.</span>
<span class="comment-copy">@sanyesh: do check up on the documentation I already linked to: <i>Sequences compare lexicographically using comparison of corresponding elements, whereby reflexivity of the elements is enforced.</i> The lists are equal because their contents are equal.</span>
