<div class="post-text" itemprop="text">
<p>I need to make a function that updates tuples in a list of tuples. The tuples contain transactions, which are characterised by ammount, day, and type. I made this function that should completely replace a tuple with a new one, but  when I try to print the updated list of tuples I get the error:</p>
<pre><code>TypeError: tuple indices must be integers or slices, not str
</code></pre>
<p>The code:</p>
<pre><code>def addtransaction(transactions, ammount, day, type): 
    newtransactions = {
        "Ammount": ammount,
        "Day": day,
        "Type": type
        }
   transactions.append(newtransaction)

def show_addtransaction(transactions):
     Ammount = float(input("Ammount: "))
     Day = input("Day: ")
     Type = input("Type: ")
    addtransaction(transactions, ammount, day, type)

def show_all_transaction(transactions):
    print()
    for i, transaction in enumerate(transactions):
        print("{0}. Transaction with the ammount of {1} on day {2} of type:     {3}".format(
            i + 1,
            transaction['Ammount'], ; Here is where the error occurs.
            transaction['Day'],
            transaction['Type']))

def update_transaction(transactions): ; "transactions" is the list of tuples
    x = input("Pick a transaction by index:") 
    a = float(input("Choose a new ammount:"))
    b = input("Choose a new day:")
    c = input("Choose a new type:")
    i = x
    transactions[int(i)] = (a, b, c)

addtransaction(transactions, 1, 2, service)
show_all_transaction(transactions)
update_transaction(transactions)
show_all_transaction(transactions)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A tuple is basically only a <code>list</code>, with the difference that in a <code>tuple</code> you cannot overwrite a value in it without creating a new <code>tuple</code>.</p>
<p>This means you can only access each value by an index starting at 0, like <code>transactions[0][0]</code>.</p>
<p>But as it appears you should actually use a <code>dict</code> in the first place. So you need to rewrite <code>update_transaction</code> to actually create a <code>dict</code> similar to how <code>addtransaction</code> works. But instead of adding the new transaction to the end you just need to overwrite the transaction at the given index.</p>
<p>This is what <code>update_transaction</code> already does, but it overwrites it with a tuple and not a <code>dict</code>. And when you print it out, it cannot handle that and causes this error.</p>
<p><strong>Original answer</strong> (Before I knew the other functions)</p>
<p>If you want to use strings as indexes you need to use a <code>dict</code>. Alternatively you can use <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow"><code>namedtuple</code></a> which are like tuples but it also has an attribute for each value with the name you defined before. So in your case it would be something like:</p>
<pre><code>from collections import namedtuple
Transaction = namedtuple("Transaction", "amount day type")
</code></pre>
<p>The names given by the string used to create <code>Transaction</code> and separated by spaces or commas (or both). You can create transactions by simply calling that new object. And accessing either by index or name.</p>
<pre><code>new_transaction = Transaction(the_amount, the_day, the_type)
print(new_transaction[0])
print(new_transaction.amount)
</code></pre>
<p>Please note that doing <code>new_transaction["amount"]</code> will still not work.</p>
</div>
<span class="comment-copy">This code will not produce the error you stated. Please provide the actual code and the appropriate traceback error.</span>
<span class="comment-copy"><code>transactions[int(i)] = (a, 'b', 'c')</code> should be <code>transactions[int(i)] = (a, b, c)</code>. Also what's the point of <code>i=0</code> if you are asking <code>x = input("Pick a transaction by index:")</code>?</span>
<span class="comment-copy">Also, do you really want to be updating at index 0 every time or should it say <code>transactions[int(x)]</code> ?</span>
<span class="comment-copy">How do you actually call <code>update_transaction</code>? And the given exception doesn't really make sense. You cannot reassign an element in the tuple (so <code>transactions</code> cannot be the tuple). Then please show us where the error actually appears.</span>
<span class="comment-copy">You need to show the code where the error actually occurs because currently there isn't really much more to say than the exception already tells you.</span>
<span class="comment-copy">I added two functions which add a new transaction, they were written by my professor so I do not know very well their functionality, but I know they allow me to use transaction("Day") or such</span>
<span class="comment-copy">Okay this makes more sense. I edited the answer to reflect that. If you don't understand the <code>namedtuple</code> stuff it is fine and you should be able to fix it without it.</span>
