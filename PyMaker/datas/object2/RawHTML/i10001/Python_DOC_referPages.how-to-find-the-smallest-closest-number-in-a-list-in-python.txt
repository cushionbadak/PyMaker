<div class="post-text" itemprop="text">
<p>I want to know how can I find the smallest closest number in a list to a given number. 
For example:</p>
<pre><code>number = 20

list_of_numbers = [4, 9, 15, 25]
</code></pre>
<p>I tried this:</p>
<pre><code>min(list_of_numbers, key=lambda x:abs(x-number))
</code></pre>
<p>The output is 25 and not 15. The problem is that it always gives me the "biggest closest" and not the "smallest closest". </p>
</div>
<div class="post-text" itemprop="text">
<p>You could make the <code>key</code> also contain the number itself and use that for breaking ties:</p>
<pre><code>min(list_of_numbers, key=lambda x: (abs(x - number), x))
</code></pre>
<p>Your behavior is strange, though. It might be a bug. You might be able to work around it by using <code>sorted</code>, which is stable:</p>
<pre><code>sorted(list_of_numbers, key=lambda x: abs(x - number))[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Add the number from the list of numbers to the key, so it's taken into account.</p>
<pre><code>min(list_of_numbers, key=lambda x: (abs(x - number), x))
</code></pre>
<p>Also if you want the <em>first</em> number from the list which matches the requirement, add the index to the key:</p>
<pre><code>min(enumerate(list_of_numbers), key=lambda ix: (abs(ix[1] - number), ix[0]))[1]
</code></pre>
<p>Though this would only be needed under <a href="https://docs.python.org/2/library/functions.html#min" rel="nofollow">Python 2</a>, because <a href="https://docs.python.org/3/library/functions.html#min" rel="nofollow">Python 3</a> guarantees that:</p>
<blockquote>
<p>If multiple items are minimal, the function returns the first one encountered.   This is consistent with other sort-stability preserving tools such as <code>sorted(iterable, key=keyfunc)[0]</code> and <code>heapq.nsmallest(1, iterable, key=keyfunc)</code>.</p>
</blockquote>
</div>
<span class="comment-copy">Ummm I tested your method It gave me 15 in Python 3.5.2 and 2.7</span>
<span class="comment-copy">2.7 gives me 15 too</span>
<span class="comment-copy">@Blender it was Python 2.1.1</span>
<span class="comment-copy">2.1.1? Are you a time-traveller from 2000?</span>
<span class="comment-copy">@KazeRyuga If it is really 2.1.1 then I am not sure how the accepted answer is going to help you -- Neither <code>key</code> existed in Python 2.1.1 nor <code>sorted()</code>.</span>
<span class="comment-copy">is order dependent, testing the original with [4,9,25,15] I get 25 while the [4,9,15,25] give 15, therefore it return the first one that is found in python 3.5 and 2.7, and maybe in python 2.1 is the last one that it returned</span>
<span class="comment-copy">@Copperfield, <a href="https://docs.python.org/3.2/library/functions.html#min" rel="nofollow noreferrer">Python 3</a> (&gt;=3.2) guarantees that the first item is returned, <a href="https://docs.python.org/2/library/functions.html#min" rel="nofollow noreferrer">Python 2</a> doesn't.</span>
<span class="comment-copy">@CristianCiupitu It is just a documentation issue with Python 2.7.</span>
<span class="comment-copy">@AshwiniChaudhary, just a documentation issue?! Where's the bug report? :-) If it's not in documentation, it does not exist. Because of programmers abusing undocumented behavior people have a hard time trying to make old programs run on new systems. Microsoft has probably wasted a lot of resources trying to preserve compatibility with old software.</span>
<span class="comment-copy">@CristianCiupitu Not of all of the changes made to Python 3 are applied to Python 2.7 anymore. Unlike Microsoft there's nothing closed source here, you can always check the source to be sure. :-) Related issue: <a href="http://bugs.python.org/issue9802" rel="nofollow noreferrer">bugs.python.org/issue9802</a></span>
