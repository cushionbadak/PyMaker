<div class="post-text" itemprop="text">
<p>If you are given a list of documents, with strings in the documents, how do you go about and search from the documents and return the list of documents that contains the string that you were searching for? </p>
<p>How would I go about implementing a program in Python or C for this problem statement? I've considered grep, but I'm not sure how implementing that inside of a native Python/C application would work.</p>
<p>Thought process at the moment is simply to parse through documents in a loop, then parse through all strings, etc., but it seems a little inefficient.</p>
<p>Any help appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>The simple solution is just as you stated: loop through the files and search through each one.</p>
<h2>Naive approach</h2>
<pre><code>for file in files:
  for line in file:
    if line contains pattern:
      print file.name
</code></pre>
<p>If you wanted to be a little better, you could immediately bail out of the file as soon as you found a match.</p>
<h2>Slightly better</h2>
<pre><code>for file in files:
  for line in file:
    if line contains pattern:
      print file.name
      break # found what we were looking for. continue to next file
</code></pre>
<p>At this point you could attempt to distribute the problem across multiple threads. You will probably be IO bound and may even see worse performance because multiple threads are trying to read different parts of the disk at the same time</p>
<h2>Threaded approach</h2>
<pre><code>for file in files:
  # create new worker thread which does...
  for line in file:
    if line contains pattern:
      # insert filename into data structure
      break # found what we were looking for. continue to next file
# wait for all threads to finish, collect and display data
</code></pre>
<p>But if you are concerned about performance, you should either use grep or copy how it works. It saves time by reading the files as raw binary (rather than break it up line by line) and makes use of a string searching algorithm called the <a href="https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm" rel="nofollow noreferrer">Boyer–Moore algorithm</a>. Refer to this other SO about <a href="https://stackoverflow.com/questions/12629749/how-does-grep-run-so-fast#12630617">how grep runs fast</a>.</p>
<h2>Probably What You Want™ approach</h2>
<pre><code>grep -l pattern files
</code></pre>
</div>
<span class="comment-copy">You mean, the equivalent of <code>grep -le pattern document1 document2 .. documentN</code>?</span>
<span class="comment-copy">@NominalAnimal Yeah, I think so. I've only used grep once or twice, but I'm looking to implement with Python or C.</span>
<span class="comment-copy">Both <a href="http://man7.org/linux/man-pages/man3/popen.3.html" rel="nofollow noreferrer">C</a> and Python <a href="https://docs.python.org/2/library/subprocess.html" rel="nofollow noreferrer">2</a> and <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">3</a> support <code>popen()</code>. With it, you can run a shell command like the <code>grep</code> mentioned above, and read the results as <code>grep</code> produces them, without using a temporary file or other such mess.</span>
<span class="comment-copy">You Don't have to read the files line by line, you can read the entire file and search it with a regular expression.</span>
<span class="comment-copy">@wwii What's the syntax for reading the entire file? I've only been able to find approaches that read line by line.</span>
<span class="comment-copy">@wowdavers <a href="https://docs.python.org/3/library/io.html#io.TextIOBase.read" rel="nofollow noreferrer"><code>with open('file') as f: s = f.read()</code></a></span>
