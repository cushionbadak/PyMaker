<div class="post-text" itemprop="text">
<p>I have a project structure like this:</p>
<pre><code>│   main.py
│
├───equations
│       resolving.py
│       resolving_methods.py
│       __init__.py
│
└───func
    │   converter.py
    │   __init__.py
    │
    └───templates
            func_template.py
</code></pre>
<p>I'm tried to import to main.py class from func.converter and all classes from equations.resolving_methods</p>
<pre><code>from func.converter import func_converter
from equations.resolving_methods import *
</code></pre>
<p>In this files (converter and resolving_methods) I have this lines of code:</p>
<p>/converter.py</p>
<pre><code>with open('templates/new_func.py', 'w', encoding='utf-8') as new_f:

from templates.new_func import my_func
</code></pre>
<p>/resolving_methods:</p>
<pre><code>from resolving import resolving
</code></pre>
<p>And python give following error:</p>
<pre><code>ImportError: No module named 'resolving'
</code></pre>
<p>But, when I try to run this files separately, code works without any errors</p>
</div>
<div class="post-text" itemprop="text">
<p>You are using absolute imports. Absolute imports only find <em>top-level modules</em>, while you are trying to import names that are nested inside packages.</p>
<p>You'll either need to specify the full package path, or use a package-relative reference, using <code>.</code>:</p>
<pre><code># absolute reference with package
from equations.resolving import resolving

# package relative import
from .resolving import resolving
</code></pre>
<p>See the <a href="https://docs.python.org/3/tutorial/modules.html#intra-package-references" rel="nofollow noreferrer"><em>Intra-package References</em> section</a> of the Python tutorial.</p>
<p>Your <code>converter.py</code> module has the additional issue of trying to open a file with a relative path. The path <code>'templates/new_func.py'</code> will be resolved against whatever the <em>current working directory</em> is going to be, which could be anywhere on the computer. Use absolute paths, based on the module <code>__file__</code> parameter:</p>
<pre><code>import os.path

HERE = os.path.dirname(os.path.abspath(__file__))
with open(os.path.join(HERE, 'new_func.py'), 'w', encoding='utf-8') as new_f:
</code></pre>
</div>
