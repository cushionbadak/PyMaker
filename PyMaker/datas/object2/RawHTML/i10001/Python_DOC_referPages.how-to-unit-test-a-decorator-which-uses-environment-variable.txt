<div class="post-text" itemprop="text">
<p>I created a decorator to allow functions be be run in specific environments only:</p>
<pre><code>def accepted_environments(*envs):
    """
    The decorated function can be executed only in specified envs
    """
    def my_decorator(func_to_be_decorated):
        def wrapper():
            if settings.ENV_NAME not in envs:
                raise EnvironmentException
            return func_to_be_decorated()
        return wrapper
    return my_decorator

# Usage example
@accepted_environments('local', 'prod')
def hello():
    print("hello")
</code></pre>
<p>That seems to work, but I'd like to unit test it.
The problem is: my tests are potentialy run in every environment (local, staging, prod). Plus, I think it's not safe my tests are able to change environment variables.</p>
<p>Should I "mock" this behaviour? How would you do? Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>mock</code> to override the value of <code>settings.ENV_NAME</code> for a test.</p>
<pre><code>def test_not_in_dev(self):
    with mock.patch.dict(settings.__dict__, ENV_NAME="dev"):
        self.assertRaises(EnvironmentException, hello)
</code></pre>
</div>
<span class="comment-copy">Thanks for the idea. mock.patch.objet does not exist (I'm using Python 3.5). I tried with <code>with mock.patch(settings, ENV_NAME="env1")</code> but I get a <code>AttributeError: 'Settings' object has no attribute 'rsplit'</code></span>
<span class="comment-copy">Are you importing 3rd-party <code>mock</code> module? <a href="https://docs.python.org/3/library/unittest.mock.html#patch-object" rel="nofollow noreferrer">docs.python.org/3/library/unittest.mock.html#patch-object</a></span>
<span class="comment-copy">Nope, it's just Pycharm..weird. Otherwise, I get a <code>TypeError: _patch_object() missing 1 required positional argument: 'attribute'</code> I'm trying to find out in the doc what mock needs :)</span>
<span class="comment-copy">OK, I think I've fixed it (clearly, I didn't not remember how to use <code>patch.object</code> correctly). I'm not a big fan of this answer; I was thinking of <code>patch.dict</code> all along, but using it with the <code>__dict__</code> attribute leaves a bad taste in my mouth.</span>
<span class="comment-copy">Ok, makes sens :) Thanks.</span>
