<div class="post-text" itemprop="text">
<p>Is it possible to do an action with the item in a list comprehension?</p>
<p>Example:</p>
<pre><code>list = [1, 2, 3]
list_filtered = [ i for i in list if i == 3 AND DO SOMETHING WITH I]
print (list_filtered)
</code></pre>
<p>For example if I want to remove the '3' how would I go about it? Logic says that it's something like:</p>
<pre><code>list = [1, 2, 3]
list_filtered = [ i for i in list if i == 3 &amp;&amp; list.remove(i) ]
print (list_filtered)
</code></pre>
<p>I can't seem to make Python perform an action with that 'i' with any syntax that I tried. Can someone please elaborate?</p>
<p>EDIT: Sorry, the explanation might not be clear enough. I know how to iterate and create the new list. I want to create "list_filtered" and remove that value from "list" if it fits the "IF" statement.</p>
<p>Practically I need the following:</p>
<pre><code>list = [1, 2, 3]
list_filtered = [ i for i in list if i == 3 &amp;&amp; list.remove(i) ]
print (list_filtered)
# output &gt;&gt; [3]
print (list)
# output &gt;&gt; [1, 2]
</code></pre>
<p>I hope the above makes it more clear. Also, please note that my question is if this can be done in the list comprehension specifically. I know how to do it with additional code. :)</p>
<p>EDIT2: Apparently what I wanted to do isn't possible and also isn't advisable (which is the reason it isn't possible). It seemed like a logical thing that I just didn't know how to do. Thanks guys :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Your miss understand the purpose of list comprehension. List comprehension should be used to create a list, not to use its side effects. Further more, as Leijot has already mentioned, you should <strong>never modify a container while iterating over it</strong>.</p>
<p>If you want to filter out certain elements in a list using list comprehension, use an if statement:</p>
<pre><code>&gt;&gt;&gt; l = [1, 2, 3]
&gt;&gt;&gt; l_filtered = [i for i in l if i != 3]
&gt;&gt;&gt; l_filtered
[1, 2]
&gt;&gt;&gt; 
</code></pre>
<p>Alternatively, you can use the builtin function <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow"><code>filter()</code></a>:</p>
<pre><code>&gt;&gt;&gt; l = [1, 2, 3]
&gt;&gt;&gt; l_filtered = list(filter(lambda x: x != 3, l))
&gt;&gt;&gt; l_filtered
[1, 2]
&gt;&gt;&gt;
</code></pre>
<p><strong>Edit:</strong> Based on your most recent edit, what your asking is absolutely possible. Just use two different list comprehensions:</p>
<pre><code>&gt;&gt;&gt; l = [1, 2, 3]
&gt;&gt;&gt; l_filtered = [i for i in l if i == 3]
&gt;&gt;&gt; l_filtered
[3]
&gt;&gt;&gt; l = [i for i in l if i != 3] # reassigning the value of l to a new list
&gt;&gt;&gt; l
[1, 2]
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're just trying to remove <code>3</code> you could do:</p>
<pre><code>list_filtered=[i for i in list if i != 3]
print(list_filtered) # [1,2]
</code></pre>
<p>This will remove all values that are not equal to <code>3</code>.</p>
<p>Alternatively if you wanted to do something like increment all the items in the list you would do:</p>
<pre><code>[i+1 for i in list]
&gt;&gt;&gt; [2,3,4]
</code></pre>
<p>Using a function on every item of the list would look like: </p>
<pre><code>[float(i) for i in list]
&gt;&gt;&gt; [1.0, 2.0, 3.0]
</code></pre>
<p>You can do <a href="https://stackoverflow.com/questions/394809/does-python-have-a-ternary-conditional-operator">ternary statements</a>:</p>
<pre><code>[i if i&lt;3 else None for i in list]
&gt;&gt;&gt;[1, 2, None]
</code></pre>
<p>and a whole lot more...</p>
<p>Here is more documentation on <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehensions</a>.</p>
<p>Given your new updates, I would try something like:</p>
<pre><code>list_filtered=[list.pop(list.index(3))]
</code></pre>
<p>Then <code>list_filtered</code> would be <code>[3]</code> and <code>list</code> would be <code>[1,2]</code> as your specified. </p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe you want to provide a different example of what you're trying to do since you shouldn't remove elements from a list while you're iterating over it. Since list comprehensions create another list anyway, you could accomplish the same thing as your example by building a list that omits certain elements. If your goal is to create a list that excludes the value 3, to slightly modify your example:</p>
<pre><code>l = [1, 2, 3]
list_filtered = [ i for i in l if i != 3 ]
</code></pre>
<p><code>l</code> remains unaltered, but <code>list_filtered</code> now contains <code>[1, 2]</code>.</p>
</div>
<span class="comment-copy">first of all this is not what list comprehension is for. List comprehension should not really have side effects, it should just create a list. Furthermore, you cannot modify container you are iterating over during iteration - no matter comprehension or not.</span>
<span class="comment-copy">What is it that you expect as a result here?  What are the new values of list_filtered and list?</span>
<span class="comment-copy">Hmm. Generally it sounds perfectly plausible to iterate through a list and remove the element you iterated through if it fits the "if" statement.  Apparently this isn't possible with list comprehensions, which was my question. "Is this possible, and if so - how?". Thanks for the information :)</span>
<span class="comment-copy">I'll mark this question as the correct one even though everyone gave the answer I was going for - it's not possible. I'm marking this one since it specifically says that the container shouldn't be modified while iterating.</span>
<span class="comment-copy">@N thanks. But if you must change your original list, just reassign it to the value of the list comprehension.</span>
<span class="comment-copy">That's the thing, I want the original list to contain all values <b>except</b> those that are in the list_filtered. And I wanted to do that in the same list comparison function.</span>
<span class="comment-copy">@Neekoy see my most recent edit.</span>
<span class="comment-copy">Yup, I'm aware I can do this with two separate list comparisons. I was looking to do it in a single one, which apparently isn't possible. :/</span>
<span class="comment-copy">Sorry, the explanation might not be clear enough. I know how to iterate and create the new list. I want to create "list_filtered" and remove that value from "list" if it fits the "IF" statement.  Practically the goal is to create a new list ("list_filtered"), and edit the existing one ("list") in the same list comprehension statement using "x".</span>
<span class="comment-copy">@Neekoy if that's the case I'd stick with the advice from leaf. You'd want to go about that a different way</span>
<span class="comment-copy">The purpose of my question is to create "list_filtered" and alter "list" in the same time.</span>
<span class="comment-copy">@Neekoy So are the new list and the modified original list supposed to contain the same values?</span>
<span class="comment-copy">I added an edit to the OP with two example outputs for the lists. I think it should make more sense that way. I'm with the impression this isn't possible though.</span>
