<div class="post-text" itemprop="text">
<p>So I have a task that occurs three times a day at a certain time that needs to be executed. </p>
<p>I've set up code that does this using a package called <strong>Schedule</strong></p>
<p><a href="https://pypi.python.org/pypi/schedule" rel="nofollow noreferrer">https://pypi.python.org/pypi/schedule</a></p>
<p>What I like about this is I can say, run at 3:00AM every day, or something similar.</p>
<p>However, the issue is, I want my other code to be running at the same time, and not be stuck in the same loop that the Schedule is running in</p>
<p>So right now, it looks something like:</p>
<pre><code>def archerPull():
#insert code for calling archer pull here

    with open("LogsForStuffPull.txt", "a") as myfile:
        myfile.write("time: " + time.ctime(time.time()))


 #this is code for scheduling job to do every day


def schedulingTasks(firstTime, secondTime, thirdTime, fourthTime, fivthTime):

    schedule.every().day.at(firstTime).do(archerPull)
    schedule.every().day.at(secondTime).do(archerPull)
    schedule.every().day.at(thirdTime).do(archerPull)
    schedule.every().day.at(fourthTime).do(archerPull)
    schedule.every().day.at(fivthTime).do(archerPull)    

schedulingTasks("13:46", "13:47", "13:48", "13:49", "13:50")

while True:    
    schedule.run_pending()
    time.sleep(1)
</code></pre>
<p>So as you can see, the loop will be True forever, and therefore run the scheduler everyday. But if I want to integrate other stuff with it, will it also be looped forever? </p>
<p>I want the tasks to be indivitual occuring (is asynchronous the word for it) </p>
<p>Please help me out, thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Yeah, I figured this out the same day I asked this question</p>
<p>I used ap-scheduler to do this, my webapp in flask is running well while the backgrounds tasks I needed work great</p>
</div>
<span class="comment-copy">You can look at python's <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer">multiprocessing</a> or <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">threading</a> to schedule your tasks.</span>
<span class="comment-copy">Hey @kiran.koduru, would BackgroundScheduler (through apScheduler) be a good idea?</span>
<span class="comment-copy">I have never used it but you could try using it. It does support async calls.</span>
