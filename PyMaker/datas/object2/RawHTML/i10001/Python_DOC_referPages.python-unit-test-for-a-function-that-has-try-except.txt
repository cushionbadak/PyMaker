<div class="post-text" itemprop="text">
<p>I have a function that has try/except as follows:</p>
<pre><code>def func_A():
  try:
       # do some stuff
  except Exception as e:
     log.error("there was an exception %s", str(e))
</code></pre>
<p>I want to write a unit test for this <code>func_A()</code>
More importantly, I want to ensure that</p>
<ul>
<li><strong>No exception was caught inside A</strong></li>
</ul>
<p>I have <code>try/except</code> just for safety. 
Unless there is a bug, there should be no exception thrown inside A (although it will be caught with <code>try/except</code>) and that's what I want to validate with my unit test.</p>
<p>What is the best way for unit test to catch the case where there was an exception thrown and caught?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you really need this, one possible way is to mock out the <code>log.error</code> object.  After invoking the <code>func_A</code> function, you can make an assertion that your mock <em>wasn't</em> called.  </p>
<p>Note that you should not catch exceptions at all if you don't intend to actually handle them.  For proper test coverage, you should provide 2 tests here - one which checks each branching of the try/except.  </p>
</div>
<div class="post-text" itemprop="text">
<p>Another possible solution is to split implementation into two functions:</p>
<ol>
<li>Function <code>foo()</code> with logic without try statement. This way you can make sure that no exception is thrown in your implementation.</li>
<li><code>safe_foo()</code> which wraps <code>foo()</code> into try statement. Then you can mock <code>foo()</code> to simulate throwing an exception by it and make sure every exception is caught.</li>
</ol>
<p>Drawback is that either <code>foo()</code> will be part of a public interface or you will write tests for a private function.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can have one variable which will track function executed properly or ended in exception.</p>
<pre><code>def func_A():
  function_state = True 
  try:
       # do some stuff
  except Exception as e:
     log.error("there was an exception %s", str(e))
     function_state = False
return function_state
</code></pre>
<p>Use <code>assertTrue</code> to validate <code>function_state</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Option 1: Don't. This is testing an implementation detail. Try to write your test suite so that you very the function does everything you need it to do. If it does what you want with the inputs you want, you're good.</p>
<p>Option 2: You can modify the function to take a logger as a parameter. Then in the test case, pass in a <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow">mock object</a> and check that the logging method gets called.</p>
</div>
<span class="comment-copy">Maybe even move "do something" into a separate function, so you can unit test it for proper function, then mock it for improper function to unit test your exception handling.</span>
