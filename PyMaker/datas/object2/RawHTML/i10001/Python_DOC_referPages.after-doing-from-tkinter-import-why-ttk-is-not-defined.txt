<div class="post-text" itemprop="text">
<p>After doing <code>from tkinter import *</code> why is <code>ttk</code> not defined? What does <code>*</code> mean?</p>
<pre><code>&gt;&gt;&gt; from tkinter import *
&gt;&gt;&gt; root = Tk()
&gt;&gt;&gt; asd = ttk.Treeview(root)
Traceback (most recent call last):
  File &lt;"pyshell#4"&gt;, line 1, in &lt;module&gt;
    asd = ttk.Treeview(root)
NameError: name 'ttk' is not defined
</code></pre>
<p>If I do <code>from tkinter import ttk</code>, then there is no problem. On using <code>*</code>, <code>ttk</code> must have been fetched. Then why is there an error?</p>
</div>
<div class="post-text" itemprop="text">
<p>What follows below is just elaborating on <a href="https://stackoverflow.com/users/3001761/jonrsharpe">jonrsharpe</a>'s great comment that I think answers the question.</p>
<p>Python's <code>from package import *</code> indeed looks deceptively like it imports <em>everything</em> from said package, but <strong>this is not the case</strong>. <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow noreferrer">The docs</a> say:</p>
<blockquote>
<p>The import statement uses the following convention: if a packageâ€™s
  <code>__init__.py</code> code defines a list named <code>__all__</code>, it is taken to be the list of module names that should be imported when from package import
  * is encountered.</p>
</blockquote>
<p>So if there is an <code>__init__.py</code> file in the package directory (it has to, otherwise it's not gonna be imported anyway) and it contains a list named <code>__all__</code> than this list's contents are treated as module names to be imported into the calling module's namespace.</p>
<p>What happens if <code>__all__</code> variable is not defined in <code>__init__.py</code>? Paraphrasing a further paragraph from the docs:</p>
<blockquote>
<p>If <code>__all__</code> is not defined, the statement <code>from package import *</code>
<strong>does not import all submodules</strong> from the package into the
  current namespace; it only ensures that the package has
  been imported (possibly running any initialization code in
  <code>__init__.py</code>) and then imports whatever names are defined in the package. This includes any names defined (and submodules explicitly
  loaded) by <code>__init__.py</code>. It also includes any submodules of the package
  that were explicitly loaded by previous import statements.</p>
</blockquote>
<p>If you want a good example where understanding this is crucial, head over to <a href="https://www.youtube.com/watch?v=-tbWoZSi3LU" rel="nofollow noreferrer">video #20</a> introducing GUI programming with TkInter in <a href="https://www.youtube.com/playlist?list=PLGLfVvz_LVvTn3cK5e6LjhgGiSeVlIRwt" rel="nofollow noreferrer">Derek Banas's excellent Python YT series.</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The official <a href="https://docs.python.org/3.5/library/tkinter.ttk.html" rel="nofollow noreferrer">python documentation</a> reveals the answer</p>
<p>You can either do</p>
<pre><code>from tkinter import ttk
</code></pre>
<p>Or</p>
<pre><code>from tkinter import *
from tkinter.ttk import *
</code></pre>
<p>The second method overrides the 'original' tkinter widgets with the ttk versions. So just doing <code>from tkinter import *</code> means that you want to use the 'original' widgets.</p>
</div>
<span class="comment-copy"><i>"On using <code>*</code>, <code>ttk</code> must have been fetched."</i> - no, that's not correct. <code>ttk</code> isn't exposed in the module's <a href="https://hg.python.org/cpython/file/3.5/Lib/tkinter/__init__.py" rel="nofollow noreferrer"><code>__init__.py</code></a>. If you don't know what <code>*</code> means in this context, see <a href="http://stackoverflow.com/q/2360724/3001761">stackoverflow.com/q/2360724/3001761</a>.</span>
