<div class="post-text" itemprop="text">
<p>Pycharm 2016.2.3, Mac OS X 10.11.1, Python 3.5 (Homebrew);</p>
<p>I have this folder structure</p>
<pre><code>project
  /somepackage
    /subpackage
     __init__.py   
     bar.py
   __init__.py
   foo.py

foo.py:
import somepackage.subpackage.bar
print("foo")

bar.py:
print("bar")
</code></pre>
<p>So my expected output is</p>
<pre><code>bar
foo
</code></pre>
<p>This works fine when run from PyCharm. However, when I run it from my terminal I get an ImportError:</p>
<pre><code>$ pwd
$ /home/project (not the actual path; just omitting some personal stuff)
$ python3.5 somepackage/foo.py
File "foo.py", line 1, in &lt;module&gt;
import somepackage.subpackage.bar
ImportError: No module named 'somepackage'
</code></pre>
<p>I have found <a href="https://stackoverflow.com/questions/31348711/python-works-in-pycharm-but-not-from-terminal">this question</a>, which is about the same problem. However, none of the suggested solutions work for me, as I am indeed using the same Python interpreter as PyCharm does and I am currently in the folder that contains the <code>somepackage/</code> folder.</p>
<p>Does anyone have any other suggestions about how to solve this issue? Thank you kindly!</p>
</div>
<div class="post-text" itemprop="text">
<p>You are running foo.py like a script, but you are really using it like a module. So the proper solution is to run it as a module:</p>
<pre><code>python3 -m somepackage.foo
</code></pre>
<p>For the record, another alternative is to edit your path like:</p>
<pre><code>export PYTHONPATH=.
</code></pre>
<p>(Or you could put the absolute directory in there, and of course you should append any other directories that are already in your PYTHONPATH.) This is closer to what PyCharm does, but is less philosophically correct.</p>
</div>
<span class="comment-copy">Does you somepackage has a <code>__init__.py</code> file? This indicates to python that it is package</span>
<span class="comment-copy">Yes it does. I will edit my question, thank you!</span>
<span class="comment-copy">Both of your suggestions work. Thank you!</span>
<span class="comment-copy">Approach #1 worked for me.  Where is this documented?</span>
<span class="comment-copy">@alex It's in the <a href="https://docs.python.org/3/using/cmdline.html" rel="nofollow noreferrer">Command Line and Environment docs</a>, but it's not obvious to look there unless you already know the solution! It's a pity it's not mentioned in the <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">Modules section of the tutorial</a>, or even the highly technical <a href="https://docs.python.org/3/reference/import.html" rel="nofollow noreferrer">Import System reference docs</a>.</span>
<span class="comment-copy">@ArthurTacca Yep, sure enough: <code>When called with -m module-name, the given module is located on the Python module path and executed as a script.</code>.  Wish I could upvote this twice ;)</span>
