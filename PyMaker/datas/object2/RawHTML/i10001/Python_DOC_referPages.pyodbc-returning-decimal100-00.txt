<div class="post-text" itemprop="text">
<p>I'm using pyodbc to read a numeric value from a table, but instead of just giving me '100', it gives me "(Decimal('100.00'),).</p>
<p>Is there a way to get just the number?</p>
<p>I'm running:</p>
<pre><code>cursor.execute("SELECT CurrentBalance as Numeric FROM [AccountsQA].[dbo].[AccountBalance] where AccountId = '2000013' and Currency = 'ZAR'")
</code></pre>
<p>My apologies if this has already been answered, but I haven't been able to find out how to solve this.</p>
</div>
<div class="post-text" itemprop="text">
<p>Presumably the table defines that column as <code>DECIMAL</code> type, so pyodbc is returning a <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow">Decimal</a> object to faithfully represent that value. </p>
<p>Assuming that the value may have digits after the decimal point, you could "get just the number" by calling <code>float()</code>, but you <strong>don't</strong> want to do that if the column represents money (as the name "CurrentBalance" suggests). Using <code>float</code> values to represent money is a <strong>Bad Idea</strong>.</p>
<p>Instead, you should probably just continue to use the value as a Decimal.</p>
</div>
<div class="post-text" itemprop="text">
<p>I managed to get just the number by doing the following:</p>
<pre><code>cursor.execute("SELECT CurrentBalance as Numeric FROM [AccountsQA].[dbo].[AccountBalance] where AccountId = '2000013' and Currency = 'ZAR'")
result = cursor.fetchall()
amount = result[0][0]
</code></pre>
<p>"result[0]" was returning "(Decimal('100.00'),)", but when I used "result [0][0] it returns only "100.00"</p>
</div>
<div class="post-text" itemprop="text">
<p>It would be cleaner to take care of it in your query from the start:</p>
<pre><code>cursor.execute("SELECT CAST(CurrentBalance AS INTEGER) AS Numeric FROM [AccountsQA].[dbo].[AccountBalance] WHERE AccountId = '2000013' AND Currency = 'ZAR'")
</code></pre>
</div>
<span class="comment-copy">Yes it would, assuming that the values in that column really are integers. If not, then <code>CAST(... AS INTEGER)</code> would result in even worse "rounding error" than converting it to <code>float</code>.</span>
