<div class="post-text" itemprop="text">
<p>If we have :</p>
<pre><code>K = [3,4,5]
T = (3,4,5)
</code></pre>
<p>and we call these commands :</p>
<pre><code>print(type(K))
print(type(T))
</code></pre>
<p>we have these prints :</p>
<pre><code>&lt;class 'list'&gt;
&lt;class 'tuple'&gt;
</code></pre>
<p>I know that K is a list and T is a tuple, but I'm not sure whether K or T are also classes or not ?
We have commands like K.append() and similar commands, this makes me unsure about the concept.</p>
</div>
<div class="post-text" itemprop="text">
<p>K and T are instances of python's List and Tuple data types. Types generally have some associated attributes, just like classes. See more about data structures and implementation <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">here</a>. </p>
<p>These are not necessarily class objects, however. This SO post should clarify <a href="https://stackoverflow.com/questions/15780435/what-is-the-differences-between-class-and-datatype">the difference between a data type and a class</a>. </p>
</div>
<div class="post-text" itemprop="text">
<p>List and tuple are build-in classes in Python, that's why you can write list() to create a list and tuple() to create a tuple. You just creating an instance of the class list/tuple. You can also deckare a list by using "[" and "]" and a tuple by using "(" and ")", because these so called "operators" are standard syntax of Python.</p>
</div>
<span class="comment-copy">Try typing: <code>K.__class__</code></span>
<span class="comment-copy">Everything in Python is an object, and everything has a type (their class).</span>
<span class="comment-copy">@brianpck: <code>type(K)</code> returns <code>K.__class__</code>.</span>
<span class="comment-copy"><code>K</code> and <code>T</code> are not themselves classes. They are <i>instances</i>; one is an instance of the <code>list</code> class, the other of <code>tuple</code>.</span>
<span class="comment-copy">Just because something has an <i>attribute</i> (i.e. <code>foo.bar</code>) doesn't mean it is an instance of a class.  Non-class objects can have attributes too.</span>
