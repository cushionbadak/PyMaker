<div class="post-text" itemprop="text">
<p>I was looking at the documentation for try except and the built in values listed there, but I figure out what I should be using to catch a general function fail.  here's what I mean say I have these:
<strong>foo.py</strong></p>
<pre><code>def create_apples(x,y,z):
    appleMaker = appleMaker()
    appleMaker.maker(x,y,z)
def create_bananas(x,y,z):
    bananaMaker = BananaMaker()
    bananaMaker.maker(x,y,z)

if __name__ == '__main__':

    x = 1
    y = 2
    z = 3
    create_apples(x, y, z)
    create_bananas(x, y, z)
</code></pre>
<p>with appleMaker.py:</p>
<pre><code>from random import randint

class appleMaker:
    def __init__(self):
        self.bushelID
        self.numberCreated

    def maker(x, y, z):
        self.bushelID = randint(0,9)
        self.numberCreated = x + y + z
</code></pre>
<p>and BananaMaker.py looking exactly the same as appleMaker.py respectively. What I want to be able to do is in foo, something like:</p>
<pre><code>try:
    create_apple(x,y,z)
except Exception:
    print "informative information"
    sys.exit(1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Generally you would read the documentation for <code>create_apple()</code> to see what exceptions it can raise, and catch those.</p>
<p>Unlike Java, though, Python functions aren't required to declare all the possible exceptions they can raise, so any function could conceivably raise many different exceptions.</p>
<p>Your best bet might be some sort of catchall condition at the end:</p>
<pre><code>try:
    create_apple(x,y,z)

except NoTreeFound:
    print 'could not find an apple tree'

except BasketFull:
    print 'apple basket is already full of apples'

except Winter:
    print 'Cannot create apples in winter!'

except Exception as e:
    print 'an unknown error occurred, message is: %s' % str(e)
</code></pre>
<h3>UPDATE</h3>
<p>It appears you're looking for advice on how a function should <em>raise</em> exceptions, not how a caller should <em>catch</em> them.</p>
<p>If your function can fail in several distinct ways, then defining specific exceptions for each failure condition can be convenient for the caller, as it can easily handle each failure condition separately (as I showed in the example above.)</p>
<p>But if your function can really only fail in one way, with possibly slightly different details in some cases, then perhaps the best thing to do is raise a general exception with a specific message:</p>
<pre><code>raise Exception("my coffee is too cold")
</code></pre>
<p>In the end it's a design decision.  Both ways will work.</p>
</div>
<span class="comment-copy">Did you try that? What happened? What did you think would happen instead?</span>
<span class="comment-copy">For more on Errors and Exceptions see the official documentation: <a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">docs.python.org/3/tutorial/errors.html#handling-exceptions</a></span>
<span class="comment-copy">down vote? I think it is a pretty straight forward question...@John Gordon, create_apple is a custom function in this case; as opposed to say os.path.join(dir1, dir2), where I could catch the OSError.  So is what you are saying is that I need to define my own exceptions for class appleMaker()?</span>
<span class="comment-copy">It sounds like you're writing a new function and trying to decide which exceptions it should <i>raise</i>.  But your post title refers to <i>catching</i>, not raising...</span>
<span class="comment-copy">See my updated answer.</span>
<span class="comment-copy">Thanks John. The functions I'm dealing with are far more complicated than these contrived examples. You are right in that my question was more in line with how to raise exceptions than with catching them.  I think I am going to have to create a little exception class for them and raise those.</span>
