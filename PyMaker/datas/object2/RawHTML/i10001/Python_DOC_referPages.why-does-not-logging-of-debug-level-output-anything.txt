<div class="post-text" itemprop="text">
<p>I have log a file:</p>
<pre><code>[loggers]
keys=root

[handlers]
keys=consoleHandler

[formatters]
keys=simpleFormatter

[logger_root]
level=INFO
handlers=consoleHandler

[handler_consoleHandler]
class=StreamHandler
level=INFO
formatter=simpleFormatter
args=(sys.stdout,)

[formatter_simpleFormatter]
format=%(asctime)s %(levelname)s %(message)s
datefmt=%Y-%m-%d %H:%M:%S
</code></pre>
<p>Then, when I run the following code, it does not print the dubug message. why is that?</p>
<pre><code>from logging import getLogger
from logging.config import fileConfig
fileConfig('/Users/zech/Dropbox/git/micronota/micronota/log.cfg')
l = getLogger()
l.setLevel('DEBUG')
l.debug('adfa')
l.info('info')  # this works and outputs 'info'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Ah, I got it!</p>
<p>You also need to set the level in your handlers.</p>
<p>In your config file, your <a href="https://docs.python.org/3/library/logging.handlers.html#logging.StreamHandler" rel="nofollow noreferrer">StreamHandler</a> has level <code>INFO</code>. That means that even though your root logger <code>l</code> is going to emit the <code>l.debug('adfa')</code> message, the handler itself is not going to register it. This is intended so you can have a finer control on what messages to log. For instance, let's say you want to have two handlers: one that writes to the terminal and another that writes to a file. In the terminal, it might be OK to output everything, but you might get concerned the files get too big, right? So you create a <a href="https://docs.python.org/3/library/logging.handlers.html#logging.FileHandler" rel="nofollow noreferrer">FileHandler</a> with its level set to <code>WARN</code> level, so you could place <code>l.debug(...)</code> statements in your code which would get printed to the console, but not to the file.</p>
<p>If you don't wanna change your configuration file, you can do this:</p>
<pre><code>l = getLogger()
l.setLevel('DEBUG')
for handler in l.handlers:
    handler.setLevel('DEBUG')
l.debug('adfa')
</code></pre>
<p>From the docs for <a href="https://docs.python.org/3.1/library/logging.html" rel="nofollow noreferrer">Python 3.1</a> (bit older, but it looks like the sentence I'm gonna paste below was removed in the Python 3.5 docs)</p>
<blockquote>
<p>Why are there two setLevel() methods? The level set in the logger determines which severity of messages it will pass to its handlers. The level set in each handler determines which messages that handler will send on.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You've set your log level as <code>INFO</code>. You can replace:</p>
<pre><code>[logger_root]
level=INFO
handlers=consoleHandler

[handler_consoleHandler]
class=StreamHandler
level=INFO
formatter=simpleFormatter
args=(sys.stdout,)
</code></pre>
<p>With </p>
<pre><code>[logger_root]
level=DEBUG
handlers=consoleHandler

[handler_consoleHandler]
class=StreamHandler
level=DEBUG
formatter=simpleFormatter
args=(sys.stdout,)
</code></pre>
</div>
<span class="comment-copy">I believe (though not 100% certain) it's because <code>setLevel</code> expects a numeric level (<a href="https://docs.python.org/2/library/logging.html#logging-levels" rel="nofollow noreferrer">docs.python.org/2/library/logging.html#logging-levels</a>) Does it work if you do: <code>l.setLevel(logging.DEBUG)</code>? (you'll need to import <code>logging</code> at the top of the file)</span>
<span class="comment-copy">in python 3.5, you can set with either numeric or string as well.</span>
<span class="comment-copy">Seriously, I told myself to try the "good practice" of using the <code>logging</code> module, but I lost so much time with weird implementation things like that. No doubt it made some sense to do that, but logging is definitely not as simple as it should be in order to be more widely used...</span>
<span class="comment-copy">This answer provides another solution to your problem (calling basicConfig): <a href="https://stackoverflow.com/a/46700675">stackoverflow.com/a/46700675</a></span>
<span class="comment-copy">Thanks. note I set the level after the <code>fileConfig</code> call. Can't you change the level after reading the config file?</span>
<span class="comment-copy">I see. Would you be able to print <code>l.getEffectiveLevel()</code> to tell us what level is set before and after you do <code>l.setLevel('DEBUG')</code> ?</span>
