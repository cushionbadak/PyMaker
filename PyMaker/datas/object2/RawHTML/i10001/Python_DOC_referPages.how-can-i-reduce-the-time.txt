<div class="post-text" itemprop="text">
<p>I'm trying to reduce the time when I compress a file from a string, and after I descompress. Dic is the dictionary obtained from the Huffman algorithm. The input for the compress function is a .txt, for the descompress function the input file, is the output file from the compress function.</p>
<pre><code>def compress(dic,archivo,outfile):
    content = (open(archivo,'rt', encoding = 'utf-8')).read()
    res = ''
    for ch in content:
       res = res + dic[ch]
    outf = open(outfile,'wb')
    pickle.dump(int('1'+ res,2),outf)
    outf.close()
    pass

def descompress(dic,infile,outfile):
    data = bin(pickle.load(open(infile,'rb')))
    k = 1
    chain = ''
    cadena = ''
    for i in data:
        if k&gt;3:
            chain = chain + i           
            if (chain in dic) == True: 
               cadena = cadena + dic[chain]
               chain = ''      
        else:
           k = k + 1
    outfile = open(outfile,'w',encoding = 'utf-8')
    outfile.write(cadena)
    pass
</code></pre>
<p>Well, I start reading with k=3 at the code in the function descompress because it starts with '0b1' and this is nothing. Sorry for my bad english.</p>
</div>
<div class="post-text" itemprop="text">
<p>the main performance problem you're encountering is with <em>string concatenation</em>. Example:</p>
<pre><code>chain = chain + i 
</code></pre>
<p>allocates a temp string, assigns it to the old <code>chain</code> which is garbage collected. Highly unefficient. strings are not optimized for reallocation so <code>+=</code> wouldn't be much faster.</p>
<p>Correct ways:</p>
<ul>
<li>create a <code>list</code> called <code>chain_list</code>, and use <code>chain_list.append(i)</code> in the loop. In the end just do <code>chain = "".join(chain_list)</code></li>
<li>or use a <code>io.BytesIO</code> pseudo-file object and write data in it. In the end, retrieve the contents with <code>getcontents()</code></li>
</ul>
<p>example:</p>
<pre><code>import io
b=io.BytesIO()
b.write(b"foo")
b.write(b"bar")
print(b.getvalue())

'foobar'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>List comprehension can save a lot of time:</p>
<pre><code>res = ''.join(dic[ch] for ch in content)
</code></pre>
<p>And you don't need to compare boolean statement to a boolean value, <code>if chain in dict:</code> is enough. You can also get rid of <code>pass</code>, it is useless  in your functions.</p>
<p>Lastly, use <code>with open(filename, mode) as name:</code> so you don't have to type <code>filename.close()</code> every time you open it.  </p>
</div>
<span class="comment-copy">Why are you using pickle if you're writing a single binary stream anyways?</span>
<span class="comment-copy">I use because when I save the string without pickle it saves one bit as string, that is, for one bit '1' it takes up 1 byte (8 bits) and I don't know another way.</span>
<span class="comment-copy">Still not necessary, there's the <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer">struct</a> module.</span>
<span class="comment-copy">Could you give me and example to save this string '11000101010010' as a binary code in a file? Thanks.</span>
<span class="comment-copy">I'm no expert in python optimization, but I'm highly skeptical of the <code>chain += i</code> vs <code>chain = chain + i</code> part. Do you have any pointers or benchmarks backing up that part? Especially as <a href="https://wiki.python.org/moin/PythonSpeed/PerformanceTips" rel="nofollow noreferrer">python optimization page</a> specifically tells not to do <code>chain += i</code>.</span>
<span class="comment-copy">@spectras You're right, they are both O(n). Use <code>io.StringIO</code> instead to get constant time complexity.</span>
<span class="comment-copy">ok, hence the rest of the post (not sure that deserves a downvote since I provide the correct ways of doing it right from the start). I'll edit the first part out as it is not the correct way of doing it at any rate.</span>
<span class="comment-copy">@L3viathan you cannot do <code>StringIO</code> when data is binary.</span>
<span class="comment-copy">Thanks for the help, but I don't know if it's possible to use list comprehension with the second function. At least the first takes around 0.4secs and the second around 2.4secs.</span>
<span class="comment-copy">I fail to understand the logic of <code>descompress</code> so I can't help you. :D</span>
<span class="comment-copy">Well, I will try to explain. the variable 'data' is string like '0b10000......' and I use a for and the dictionary to traduce the string to and .txt file. For example, 00 is 'a' but '0b1' is nothing (the '0b' is from the function bin() and the '1' I put it because when I pass the string 0000 to and integer it becomes '0') the .txt will be 'aa....'. This is the reason I put the 'k' and the for starts to read the string at the 4th position.</span>
