<div class="post-text" itemprop="text">
<p>Person is a new class that has two properties: <code>height</code> and <code>weight</code>. </p>
<pre><code>class People:

    def __init__(self, height, weight):
        self.height = height
        self.weight = weight
</code></pre>
<p>I want import another <code>file.py</code> that has the same class and some objects of this class. For example:</p>
<pre><code>p1 = People(185, 87)
p2 = People(167, 73)
p3 = People(173, 90)
</code></pre>
<p>But I don`t know how each variable called and how much variables exist in a given file. <strong>How can i get all objects of imported file?</strong> The goal is to create list() of objects from several files.</p>
</div>
<div class="post-text" itemprop="text">
<p>A good way to do this would be with <a href="https://docs.python.org/3/library/inspect.html#inspect.getmembers" rel="nofollow"><code>inspect.getmembers</code></a> by utilizing its <code>pred</code> parameter.</p>
<p>Firstly, you could get all user defined classes in the module with <a href="https://docs.python.org/3/library/inspect.html#inspect.isclass" rel="nofollow"><code>inspect.isclass</code></a> and then, create a new predicate to capture any instances that are of the class(es) you got before.</p>
<p>Initially, grabbing the classes is easy with <code>isclass</code> as defined in <code>inspect</code>:</p>
<pre><code>from inspect import getmembers, isclass
# the module defining the objects
import obj

# getmembers returns list of (name, val) tuples, grab vals
clses = tuple(x[1] for x in getmembers(obj, isclass))
</code></pre>
<p>Now, <code>clses</code> is a tuple of classes:</p>
<pre><code>print(clses) # (obj.People,)
</code></pre>
<p><em>If classes are already known beforehand,</em> <em>the previous step is of course, not needed</em>; just create a tuple of the classes you need to find and continue with the next step.</p>
<p>You can then create a new predicate (a simple <code>lambda</code> would suffice) that grabs objects that are instances of any of the classes in <code>clses</code>:</p>
<pre><code>pred = lambda x: isinstance(x, clses)
instances = getmembers(obj, pred)
</code></pre>
<p>The result now being that <code>instances</code> is populated with any name in the module <code>obj</code> that is <code>True</code> for the the <code>isinstance</code> check in <code>pred</code>:</p>
<pre><code>print(instances)
[('p1', &lt;obj.People at 0x7f436739ce10&gt;),
 ('p2', &lt;obj.People at 0x7f436739c898&gt;),
 ('p3', &lt;obj.People at 0x7f436739cc18&gt;)]
</code></pre>
</div>
<span class="comment-copy">You can go through all variables defined in the module which are visible to other modules and check if they're <code>isinstance(v, People)</code>. This will only include variables in the module's global scope though; is that really useful?</span>
<span class="comment-copy">What are you really after here? Because the problem that you're trying to solve doesn't sound like a problem you should really have.</span>
<span class="comment-copy">I should compare my class instances with other by assert function, and make sure they are correct implemented. There is some kind of test program.</span>
