<div class="post-text" itemprop="text">
<p>Let's say we have a function <code>foo(a, b)</code> that is part of the public API of a python module.<br/>
Is there any way to query the types of <code>a</code> and <code>b</code> that the function expects?<br/>
I know that I can get the number of arguments and their default values via the <code>inspect</code> module, but is there any type information available?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python is a dynamically typed language, so no; a function should <em>document</em> their expectations instead.</p>
<p>Python 3.5 and newer support <a href="https://www.python.org/dev/peps/pep-0484/" rel="nofollow"><em>optional</em> type hinting</a>; if the library uses type hints, then you can query this information with the <a href="https://docs.python.org/3/library/typing.html#typing.get_type_hints" rel="nofollow"><code>typing.get_type_hints()</code> function</a> to access that information programatically.</p>
<p>Generally, Python functions should accept objects that implement <em>expected functionality</em>, not specific types. If your function iterates over a sequence to extract strings, then it should be documented as accepting (in type hinting terms) a <code>Iterable[str]</code> object, not a list or tuple or other specific type.</p>
</div>
<span class="comment-copy">No, not by default. You should trust your programmers or fail as early as possible in your function. Also, document your public API.</span>
<span class="comment-copy">Check the docstring of the function with <code>foo.__doc__</code>  That should have the information you're looking for, but there's no guarantee.  The problem is that Python doesn't force variables into a certain type.  So you can try to pass a string into <code>sqrt</code>, for example, and nothing will thow an error until runtime</span>
<span class="comment-copy">Additionally, it's not the <i>type</i> of an argument but rather its available/implemented <i>methods</i> that make it suitable as an argument for a specific function, since python uses <b>duck-typing</b>.</span>
