<div class="post-text" itemprop="text">
<p>When I try to combine Type Hints and object creation through
a <code>classmethod</code> I get the following <code>NameError</code>:</p>
<pre><code>NameError: name 'Person' is not defined
</code></pre>
<p><strong>How can I indicate through type hinting that I want to return an 
instance of the class which I am currently defining? (see example)</strong></p>
<hr/>
<p>Example:</p>
<p>The definition of the <code>classmethod</code> <code>from_dict</code> fails because Python cannot resolve the <code>class Person</code>.</p>
<pre><code>class Person:

    def __init__(self, name: str):
        self.name = name

    @classmethod
    def from_dict(self, info: dict) -&gt; Person:
        person_obj = Person(info['name'])
        return person_obj

    def speak(self, word: str) -&gt; str:
        print(word)
        return self.name + 'said' + word
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to use a <a href="https://docs.python.org/3/library/typing.html#typing.TypeVar" rel="nofollow noreferrer">TypeVar</a>.</p>
<pre><code>from typing import TypeVar
PersonType = TypeVar("PersonType", bound="Person")

class Person:
    @classmethod
    def from_dict(self, info: dict) -&gt; PersonType:
        person_obj = Person(info['name'])
        return person_obj
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a string:</p>
<pre><code>@classmethod
def from_dict(self, info: dict) -&gt; 'Person':
    person_obj = Person(info['name'])
    return person_obj
</code></pre>
<p>This makes the return type of the classmethod a Person. This is also useful when writing classes that depend on each other.</p>
</div>
