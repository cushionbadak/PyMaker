<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/15751979/grouping-python-dictionary-keys-as-a-list-and-create-a-new-dictionary-with-this">Grouping Python dictionary keys as a list and create a new dictionary with this list as a value</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>Given the list</p>
<pre><code>l = [('a', 1), ('b', 2), ('a', 1), ('a', 2), ('c', 5), ('b', 3)]
</code></pre>
<p>how do I get the dictionary</p>
<pre><code>{'a': [1, 1, 2], 'c': [5], 'b': [2, 3]}
</code></pre>
<p>in Python?</p>
<p>Edit: I was looking for a functional solution (using only 1 expression).</p>
</div>
<div class="post-text" itemprop="text">
<p>You may use the <code>collections.defaultdict()</code>. Alternatively, in case you do not want to import <code>collections</code> , you may achieve the same behavior with normal dict using <a href="https://docs.python.org/2/library/stdtypes.html#dict.setdefault" rel="nofollow"><code>dict.setdefault()</code></a> as:</p>
<pre><code>&gt;&gt;&gt; my_dict = {}
&gt;&gt;&gt; l = [('a', 1), ('b', 2), ('a', 1), ('a', 2), ('c', 5), ('b', 3)]
&gt;&gt;&gt; for k, v in l:
...     my_dict.setdefault(k, []).append(v)
...
&gt;&gt;&gt; my_dict
{'a': [1, 1, 2], 'c': [5], 'b': [2, 3]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>After defining</p>
<pre><code>from itertools import *

def group(iterable, key, value = lambda x: x):
    return dict((k, list(map(value, values))) for k, values in groupby(sorted(iterable, key = key), key))
</code></pre>
<p>use <code>group(l, key = lambda x: x[0], value = lambda x: x[1]))</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/2/library/collections.html#collections.defaultdict" rel="nofollow">defaultdict</a> from the collections module.
You can iterate the list and extract the (key, value) pairs from the tuples in the list and build your dictionary.</p>
<pre><code>from collections import defaultdict

l = [('a', 1), ('b', 2), ('a', 1), ('a', 2), ('c', 5), ('b', 3)]

def dict_my_list(lst):
    d = defaultdict(list)
    for key, value in lst:
        d[key].append(value)
    return d

print dict_my_list(l)  # {'a': [1, 1, 2], 'c': [5], 'b': [2, 3]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a simple solution to your problem using <code>dict()</code></p>
<pre><code>l = [('a', 1), ('b', 2), ('a', 1), ('a', 2), ('c', 5), ('b', 3)]
ll = dict()
for key,value in l:
    if key in ll:
        ll[key].append(value)
    else:
        ll[key] = list()
        ll[key].append(value)

print ll  # {'a': [1, 1, 2], 'c': [5], 'b': [2, 3]}
</code></pre>
</div>
<span class="comment-copy">There's an almost exact example for what you want <a href="https://docs.python.org/3/library/collections.html#defaultdict-examples" rel="nofollow noreferrer">here</a></span>
<span class="comment-copy">@DavidG You are right, let's mark it as duplicate. Originally, I was looking for a generic one-expression solution to the problem, but I didn't make this clear and the non-functional solution is simpler.</span>
