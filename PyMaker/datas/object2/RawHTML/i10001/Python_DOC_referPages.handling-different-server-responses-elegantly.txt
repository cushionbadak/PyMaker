<div class="post-text" itemprop="text">
<p>I send requests to a server and receive responses. Depending on the situation, the responses vary, and I have to handle each of them differently.</p>
<p>What I would like to do is to have something of this sort:</p>
<pre><code>if response.getChild('child1')... == x:
    do_math()
    return stuff1
elif response.getChild('child2')... == y
    do_different_math()
    return stuff2
etc...
</code></pre>
<p>However, I am running into the problem that different children might not exist, which makes me have to use multiple try-except flow controls. This takes a lot of space and is terribly ugly:</p>
<pre><code>try:
    if response.getChild('child1')... == x:
        do_math()
        return message1
except:
    return generic_error_message
try:
    if response.getChild('child2')... == y:
        do_different_math()
        return stuff2
except:
    return generic_error_message
etc...
</code></pre>
<p>Is there an elegant way to handle different possible responses?</p>
</div>
<div class="post-text" itemprop="text">
<p>Let me recommend that you separate your concerns. You effectively want to:</p>
<ul>
<li>get a response, that may raise an exception</li>
<li>perform an operation based on the value of the response</li>
</ul>
<p>The process of getting a response may cause an exception to be raised because the child that you are looking for may not exist. Your code catches all exceptions, you should try to catch a specific exception. If the child does not exist you don't need to attempt to perform any operation. I would recommend something like:</p>
<pre><code># define a function to return the right
# operation to perform based on response
# obviously the methods do_math and do_different_math must be defined
# as well as x and y
def what_to_do(val):
    if val == x:
        return do_math
    elif val == y:
        return do_different_math
    else:
        raise ValueError("Unknown value %r. I don't know what to do" % val)

# Do something to get the node that you want
# here is just set the value to 'child1' for
# demonstration purposes
node = 'child1'
result = None
answer = None

try:
    result = response.getChild(node)
except SOMES_SPECIFIC_EXCEPTION:
    # you need to decide what to do here
    pass

if result is not None:
    operation = what_to_do(result)
    answer = operation()
return answer
</code></pre>
<p><strong>NOTE</strong> Since you need to iterate over multiple nodes (children). You can place the code in a for loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't give enough context for a more accurate answer (like what are <code>response</code> and <code>response.getChild()</code>, what exception(s) <code>getChild()</code> could raise and how they really are supposed to be handled). Also you seem to be mixing tow distinct concerns - dispatching processing according to some conditions and issuing messages to the user. </p>
<p>Anyway: one way to avoid ugly repeated / code is to build a sequence of objects encapsulating both the test and the processing and then loop over this sequence, ie:</p>
<pre><code>class Action(object):
    def __init__(self, accept, run, message):
        self.accept = accept
        self.run = run
        self.message = message


actions = [
    Action(lambda r: r.getChild("child1") == x, do_math, some_message),
    Action(lambda r: r.getChild("child2") == y, do_different_math, some_other_message),
    ]

def dispatch(response, actions):
    for action in actions:
        try:
            if action.accept(response):
                action.run()
                return action.message
        except SomeExpectedException as e:
            return generic_error_message
</code></pre>
</div>
<span class="comment-copy">The <a href="https://docs.python.org/2/library/stdtypes.html#dict.get" rel="nofollow noreferrer"><code>get</code></a> method from Python dictionaries has a interesting behavior, to provide an default value if not found the expected value. Take a look at docs of <code>getChild</code> method, and check if it isn't a <a href="https://docs.python.org/3/glossary.html#term-mapping" rel="nofollow noreferrer">mapping</a> object. If so, you can use an approach like <code>response.getChild('child2', None)</code> and handle with <code>None</code>result.</span>
<span class="comment-copy">The part "Do something to get the node that you want" is exactly the problem that makes me do multiple "try: except:" segments  Ideally, I would want only one try:except bloc that handles the case when I get no response. All other cases are just me checking if there is a particular node, which I would like to do it with an if statement but can't because the lack thereof raises an error instead of just passing to the next clause.</span>
