<div class="post-text" itemprop="text">
<p>The thing I've noticed is that <code>print()</code> is sometimes outputs final calculated value when multiple statements are printed. To illustrate:</p>
<pre><code>a = [1, 2, 3]
print(a, a.reverse(), a)
</code></pre>
<p>Output is <code>[3, 2, 1] None [3, 2, 1]</code>, but shouldn't the first output of <code>a</code> be <code>[1, 2, 3]</code>?</p>
<p>If prints are separated, say:</p>
<pre><code>a = [1, 2, 3]
print(a, end=' ')
print(a.reverse(), a)
</code></pre>
<p>The output gives correct <code>[1, 2, 3] None [3, 2, 1]</code>.</p>
<p>This behavior caused me a couple of hard minutes trying to figure out the bug. I've searched all around for the answer, but supposedly I'm looking in the wrong direction.</p>
<p>Is this because values are calculated <strong>before</strong> <code>print()</code>? In if so, <strong>why</strong>?</p>
<hr/>
<p><strong>UPDATE:</strong></p>
<p>I've asked the question because from other languages experience the reason of this isn't so obvious for me. For example, PHP:</p>
<pre><code>$a = [1, 2, 3];
var_dump(
    $a, array_pop($a), $a
);
</code></pre>
<p>Produces output without pre-executing expressions:</p>
<pre><code>array(3) {[0]=&gt;int(1) [1]=&gt;int(2) [2]=&gt;int(3)}
int(3)
array(2) {[0]=&gt;int(1) [1]=&gt;int(2)}
</code></pre>
<p>While question might be stupid, I don't see any more answers to it around except for this one on SO.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you call a function (and <code>print()</code> is no more than a function here), Python <em>has</em> to execute all the expressions that form the arguments <em>first</em>. The results of those expressions are then passed into the function call.</p>
<p>Moreover, referencing an object by name does not pass in a copy of that object, you pass in the object itself. Since <code>a</code> references a list, you are passing in that list, not another list that is a copy of the first.</p>
<p>So in the first example, the results of the expressions <code>a</code>, <code>a.reverse()</code> and <code>a</code> are sent to the <code>print()</code> function. Because <code>a.reverse()</code> alters a list <em>in place</em>, you just sent the very same list to the <code>print()</code> call twice, after that list has been reversed. Both <code>a</code> expressions result in the same list, that has been reversed, being passed to <code>print()</code>.</p>
<p>In the second example, you first send in the <code>a</code> list, the <code>print()</code> function writes it out, and then in a <em>second</em> <code>print()</code> call, you reverse that list and pass it in to be printed again.</p>
<p>I've got the impression you are perhaps most confused about how Python treats names and how parameters are passed into a function call. I recommend you read up on these with:</p>
<ul>
<li><a href="http://nedbatchelder.com/text/names.html" rel="nofollow noreferrer"><em>Facts and myths about Python names and values</em></a> by Ned Batchelder</li>
<li><a href="https://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference">How do I pass a variable by reference?</a></li>
</ul>
<p>If you wanted to pass in a <em>copy</em> of the list that contains the same elements in reverse order, you would have to do so explicitly. You can use either <code>a[::-1]</code> or <code>list(reversed(a))</code> to produce such a copy.</p>
</div>
<span class="comment-copy">Yes, values are calculated before <code>print()</code> can print them out.</span>
<span class="comment-copy">It this information so common that everybody is aware and the question should be downvoted? I've read the Python docs: <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#print</a></span>
<span class="comment-copy"><code>a.reverse()</code> mutates the list in place, <code>list(reversed(a)))</code> will give you a reversed list without changing your original list.</span>
<span class="comment-copy">The downvotes might have been due to the answer to your question being self-evident.</span>
<span class="comment-copy">This is one of the cases where python2 <code>print</code> statement differs from the use of the <code>print</code> function. The <code>print</code> statement prints what you expected, because it evaluates lazily the arguments while printing, however this is not possible with a function call.</span>
<span class="comment-copy">Thanks, got it. Batchelder's article was really helpful.</span>
