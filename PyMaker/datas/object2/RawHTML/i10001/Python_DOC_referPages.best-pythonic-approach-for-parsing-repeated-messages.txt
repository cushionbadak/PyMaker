<div class="post-text" itemprop="text">
<p>I have a text file that I am trying to parse and reformat into a .csv. The text file was created as a repeated status message every 2Hz, outputting various values. Every message has a '-----------' header, '/n' newline characters, and a '' footer.</p>
<p>I think the best way to do this would be to only read in one 'message' at a time and be able to update my output file as I go; I'm new to Python (using Python 3.5) and I feel like everything I'm coming up with is more C++ styled.  </p>
<p>The input data looks like this:</p>
<pre><code>    -----------
2016-10-10T14:03:38,158000277+0000
 14:03:38 up 1 min,  2 users,  load average: 0.58, 0.13, 0.04
acpitz-virtual-0
Adapter: Virtual device
temp1:        +27.8Â°C  (crit = +110.0Â°C)
temp2:        +29.8Â°C  (crit = +110.0Â°C)

coretemp-isa-0000
Adapter: ISA adapter
Physical id 0:  +44.0Â°C  (high = +105.0Â°C, crit = +105.0Â°C)
Core 0:         +44.0Â°C  (high = +105.0Â°C, crit = +105.0Â°C)
Core 1:         +44.0Â°C  (high = +105.0Â°C, crit = +105.0Â°C)

nct6776-isa-0a00
Adapter: ISA adapter
Vcore:                  +1.79 V  (min =  +0.00 V, max =  +1.74 V)  ALARM
in1:                    +1.35 V  (min =  +0.00 V, max =  +0.00 V)  ALARM
AVCC:                   +3.33 V  (min =  +2.98 V, max =  +3.63 V)
+3.3V:                  +3.33 V  (min =  +2.98 V, max =  +3.63 V)
in4:                    +1.00 V  (min =  +0.00 V, max =  +0.00 V)  ALARM
in5:                    +0.00 V  (min =  +0.00 V, max =  +0.00 V)
in6:                    +0.27 V  (min =  +0.00 V, max =  +0.00 V)  ALARM
3VSB:                   +3.30 V  (min =  +2.98 V, max =  +3.63 V)
Vbat:                   +3.20 V  (min =  +2.70 V, max =  +3.63 V)
fan1:                     0 RPM  (min =    0 RPM)
fan2:                     0 RPM  (min =    0 RPM)
SYSTIN:                 +68.0Â°C  (high =  +0.0Â°C, hyst =  +0.0Â°C)  ALARM  sensor = thermistor
CPUTIN:                 +22.5Â°C  (high = +80.0Â°C, hyst = +75.0Â°C)  sensor = CPU diode
AUXTIN:                 +28.5Â°C  (high = +80.0Â°C, hyst = +75.0Â°C)  sensor = CPU diode
PCH_CHIP_CPU_MAX_TEMP:  +26.0Â°C  (high = +80.0Â°C, hyst = +75.0Â°C)
PECI Agent 0:           +44.0Â°C  (high = +80.0Â°C, hyst = +75.0Â°C)
                                 (crit = +105.0Â°C)
PCH_CHIP_TEMP:           +0.0Â°C  
PCH_CPU_TEMP:            +0.0Â°C  
intrusion0:            OK
intrusion1:            OK
</code></pre>
<p>I want to pull out things like the date/time of each message, the temperatures, the voltages, etc.  </p>
<p>Here's my super un-Pythonic approach (note that the indentation got messed up during copy and paste...it is correct in the real code):</p>
<pre><code>with open('102_sensors.log', 'r') as readFile, open('output.txt','w') as writeFile:
for line in readFile:
    if line.startswith('2016'):            
        writeFile.write(line[:10] + ',' + line[11:-1] + ',')    #date and time
    if 'load average' in line:
        writeFile.write(line[13:15] + ',' + line[-17:-1] + ',') #up-time and load avgs
    if 'temp1' in line:
        writeFile.write(line[15:19] + ',')             
    if 'temp2' in line:   
        writeFile.write(line[15:19] + ',')              
    if 'Physical id 0' in line:   
        writeFile.write(line[17:21] + ',')
    if 'Core 0' in line:   
        writeFile.write(line[17:21] + ',')
    if 'Core 1' in line:   
        writeFile.write(line[17:21] + ',')
    if 'Vcore' in line:   
        writeFile.write(line[25:29] + ',')
    if 'in1' in line:   
        writeFile.write(line[25:29] + ',')
    if 'AVCC' in line:   
        writeFile.write(line[25:29] + ',')
    if 'threeV' in line:   
        writeFile.write(line[25:29] + ',')
    if 'in4' in line:   
        writeFile.write(line[25:29] + ',')
    if 'in5' in line:   
        writeFile.write(line[25:29] + ',')
    if 'in6' in line:   
        writeFile.write(line[25:29] + ',')
    if 'threeVSB' in line:   
        writeFile.write(line[25:29] + ',')
    if 'Vbat' in line:   
        writeFile.write(line[25:29] + ',')
    if 'SYSTIN' in line:   
        writeFile.write(line[25:29] + ',')
    if 'CPUTIN' in line:   
        writeFile.write(line[25:29] + ',')
    if 'AUXTIN' in line:   
        writeFile.write(line[25:29] + ',')
    if '-----------' in line:
        writeFile.write('\n')
        continue
writeFile.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>re</code> module to parse the input. Use <code>csv</code> module to write the output. Here is and example from the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow">reference manual</a>:</p>
<pre><code>import csv
with open('eggs.csv', 'w', newline='') as csvfile:
    spamwriter = csv.writer(csvfile, delimiter=' ',
                            quotechar='|', quoting=csv.QUOTE_MINIMAL)
    spamwriter.writerow(['Spam'] * 5 + ['Baked Beans'])
    spamwriter.writerow(['Spam', 'Lovely Spam', 'Wonderful Spam'])
</code></pre>
</div>
<span class="comment-copy">how does the re module perform better than what I wrote?  is it faster?  easier to read?</span>
