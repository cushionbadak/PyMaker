<div class="post-text" itemprop="text">
<p>I have the following situation ( all 3 are functions in a python class ) where I have to send a message to a remote device with 2 callbacks that give detail about the state of the remote device.</p>
<pre><code># callback when a app has completed downloaded on a remote device
def handleAppDownloadComplete():
      #something

# callback when an app has restarted on a remote device
def handleAppRestart():
     # app restart callback


def sendMessage(message):

     // Do things like validation etc 
     sendMessageToRemoteDevice(message)
</code></pre>
<p>My situation is </p>
<p>1) call sendMessage when handleAppDownloadComplete callback is called </p>
<p>2) At any point during sendMessage(), if handleAppRestart() is called, stop execution of sendMessage(),  wait for handleAppDownloadComplete() to be called back and call sendMessage() again. </p>
<p>I have tried to use threading.events(), but this seems very cyclical for me. And to add, both the call backs are provided by third party libraries and I can't change them. Any better way/design to handle this situation?  </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/asyncio-task.html#future" rel="nofollow noreferrer">https://docs.python.org/3/library/asyncio-task.html#future</a> (look at the example)</p>
<p>You could model the call to sendMessage() as a task which could be cancelled by handleAppRestart(). So you'd have a class variable task which would bind to a task.</p>
<pre><code>import asyncio
class foo:
   task = None
   loop = asyncio.get_event_loop()
def handleAppDownloadComplete()
{
   task = asyncio.ensure_future(sendMessage(bar))
   loop.run_until_complete(tasks)
}

# callback when an app has restarted on a remote device
def handleAppRestart()
{
    task.cancel()
}
@asyncio.coroutine
def sendMessage(message)
{
     // Do things like validation etc 
     sendMessageToRemoteDevice(message)
}
</code></pre>
<p>Btw what you gave in your question isn't Python code, and neither is my answer (Python doesn't use {} and I didn't indent correctly).</p>
<p>Anyway, answer is: Use asynchronous abstractions to do what you want.</p>
<p>EDIT: Wait, you can't change handleAppDownloadComplete(), handleAppRestart() or sendMessage(message)?</p>
</div>
<span class="comment-copy">You are right. Changed the syntax. It is actually python code. Perils of coding in 2 different languages at the same time. I can find a way to add/edit the callbacks, but can't change when it is called. sendMessage(message) can be completely changed.</span>
<span class="comment-copy">Btw. Asyncio is only for python 3.3</span>
