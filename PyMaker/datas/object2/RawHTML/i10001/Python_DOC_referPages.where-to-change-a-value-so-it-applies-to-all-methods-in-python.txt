<div class="post-text" itemprop="text">
<p>I am struggling with a problem that didn't seem to be a big deal in the beginning. I am creating aa class and a sub Subclass and whenever I want to change a value in subclass it should automatically update all the other methods in the class and subclass whenever I do that. Let me give you an example. The value that's supposed to be changed is <code>shift</code> in the <code>change.shift(shift)</code> method. </p>
<pre><code>class Message(object):
    '''
    code that doesn't matter for this question
    '''
    def build_shift_dict(self, shift):
        '''
        code that doesn't matter for this question
        '''
        return dict

    def apply_shift(self, shift):
        '''
        code that doesn't matter for this question
        '''
        return newMessage

class PlaintextMessage(Message):
    def __init__(self, text, shift):
        '''
        code that doesn't matter for this question
        '''
        Message.__init__(self, text)
        self.shift = shift
        self.encrypting_dict = self.build_shift_dict(self.get_shift())
        self.message_text_encrypted = self.apply_shift(self.get_shift())

    def get_shift(self):
        '''
        Used to safely access self.shift outside of the class

        Returns: self.shift
        '''
        return self.shift

    def get_encrypting_dict(self):
        return self.encrypting_dict

    def get_message_text_encrypted(self):
        return self.message_text_encrypted

    def change_shift(self, shift):
        assert 0 &lt;= shift &lt; 26
        self.shift = shift
</code></pre>
<p>As you can see I need <code>shift</code> to be changed as well within <code>apply_shift(self, shift)</code> and <code>build_shift_dict(self, shift)</code> because the <code>init</code> method in <code>PlaintextMessage(Message)</code> calls does methods. How do I do that? When I call the <code>get_shift(self)</code> method I get the shift value, if I then call the <code>change_shift(self, shift)</code> method and call <code>get_shift(self)</code> again it shows me the updated <code>shift</code> value. So I tried to update <code>self.encrypting_dict = self.build_shift_dict(self.get_shift())</code> and <code>self.message_text_encrypted = self.apply_shift(self.get_shift())</code> with the get-Method instead of shift but that doesn't change anything. What am I missing here? Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>In <code>change_shift()</code> just call those other two methods.</p>
<pre><code>def change_shift(self, shift):
    assert 0 &lt;= shift &lt; 26
    self.shift = shift
    self.encrypting_dict = self.build_shift_dict(self.shift)
    self.message_text_encrypted = self.apply_shift(self.shift)
</code></pre>
<hr/>
<p>You could define <code>build_shift_dict</code> and <code>apply_shift</code> without an argument, other than <code>self</code>, and just use <code>self.shift</code> in those methods - you would still have to call them but you wouldn't have to pass them anything, and you couldn't mess it up by passing those methods an erroneous value from your program. </p>
<hr/>
<p>You could make access to <code>shift</code> a property/attribute using the <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow"><code>@property</code></a> decorator - you won't have to call it and you rid yourself of <em>getter's</em> and <em>setter's</em> - you would need to rename <code>shift</code> to something like <code>_shift</code> or <code>__shift</code> everywhere else in  the program.</p>
<p>like:</p>
<pre><code>class Foo:
    def __init__(self, shift):
        self._shift = shift
    @property
    def shift(self):
        return self._shift
f = Foo(2)
</code></pre>
<p>Then you access it with <code>f.shift</code>.</p>
</div>
<span class="comment-copy">You should add a few examples below the classes you provided here. And then give an example of what you would like to happen (ie: show the code that you would use these classes for, (input/output/variables/etc) A: doing what you do now, and failing. and B: what you want it to do (and pretend that it works, and show us what that looks like). good luck.</span>
<span class="comment-copy">I am not sure whether I entirely got your issue. But as a hint, If you want the value to be updated at the instance level (object level), <code>self.property="new value"</code>. If you want to update the value at class level (all the instances/objects of class). Use class variable as <code>class.variable</code> and update the value as <code>class.variable="new value"</code></span>
<span class="comment-copy">Thank you so much, @wwii I feel so stupid and relieved at the same time. Thanks!</span>
<span class="comment-copy">@MickeyMahoney sometimes it helps for someone else to look at it with <i>fresh eyes</i> - that's True for many things.</span>
