<div class="post-text" itemprop="text">
<p>I'm trying to Mock an enum in Python so that I can assert whether a method of the class tested calls a method on the enum.</p>
<p>This does not work as expected. The method in question is never called because an identity comparison of the mock with the actual enum always fails.</p>
<pre><code>class ProcessorTest(unittest.TestCase):
    def test_do_something(self):
        # Mock library does not work with enums..
        self.mock_camera = mock.create_autospec(Camera.exit)

        self.processor.process(self.mock_camera)

        # =&gt; always leads to "failed"
        self.assertTrue(self.mock_camera.do_something.called,
                        "Failed")

class Camera(Enum):
    entrance = 1
    exit = 2

    def do_something(self):
        return True

class Processor:
    def process(self, camera):
        # this comparison always resolves to false
        if camera is Camera.exit:
            # never reached
            camera.do_something()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Rather than trying to create a mock member of an enumeration, just <a href="https://docs.python.org/3/library/unittest.mock.html#patch-object" rel="nofollow">patch that method</a>:</p>
<pre><code>from enum import Enum
import unittest


class Camera(Enum):
    entrance = 1
    exit = 2

    def do_something(self):
        return True


class Processor:

    def process(self, camera):
        if camera is Camera.exit:
            camera.do_something()


class TestProcessor(unittest.TestCase):

    def test_processor_process(self):
        with unittest.mock.patch.object(Camera, 'do_something') as mock_method:
            Processor().process(Camera.exit)
            mock_method.assert_called_once_with()


if __name__ == '__main__':
    unittest.main()
</code></pre>
<p>Now you can pass a real member, but intercept calls to <code>do_something</code>. This gets around the fact that there's no way to mock identity.</p>
</div>
<span class="comment-copy">Have you tried patching that method, rather than replacing the whole enumerator member? There's no way to mock identity.</span>
<span class="comment-copy">@jonrsharpe thanks, that worked. Kind of new with testing in Python but indeed you can't mock identity. This worked: <code>Camera.exit.do_something = mock.MagicMock()</code> and <code>self.assertTrue(Camera.exit.do_something.called, "failed")</code></span>
<span class="comment-copy">Just solved it on my own based on your comment but I'll gladly accept your answer</span>
<span class="comment-copy">@edwardmp you're welcome to post your own answer if you did it differently. Note that it's better to correspond with your own example - what is <code>open_barrier</code>?</span>
<span class="comment-copy">Thanks, edited it. My solution is different in syntax but similar.</span>
