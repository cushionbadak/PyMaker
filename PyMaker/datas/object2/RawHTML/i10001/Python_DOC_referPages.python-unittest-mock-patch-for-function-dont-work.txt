<div class="post-text" itemprop="text">
<p>I'm trying to test my python application use unittests with mock.patch but it don't work as well.
My code:</p>
<p><strong>test_file.py</strong></p>
<pre><code>from unittest.mock import patch

class TestMaterialsUpdate(TestCase):
    def setUp(self):
        self.client = Client()

    @patch('api.accounts.helpers.get_authenticated_user', return_value={'username': 'username'})
    def test_my_castom_method(self):
       import api.accounts.helpers as he
       print(he.get_authenticated_user) # printed mock here
       print(he.get_authenticated_user) # returned {'username': 'username'}

       url = reverse('materials_create')
       # next call get_authenticated_user will be in post request
       self.client.post(url,data=json.dumps({'data': 'data'}), content_type='application/json')
</code></pre>
<p>The post request call the decorator that check "user auth" use <code>get_authenticated_user</code> function. But in decorator I got function instead mock-object.</p>
<p><strong>decorators.py</strong></p>
<pre><code>def login_required(func):
    def wrapper(*args, **kwargs):
        print(get_authenticated_user) # printed &lt;function get_authenticated_user at 0x7fec34b62510&gt;
        user = get_authenticated_user(request) # return None instead {'username: 'username'}
</code></pre>
<p>Why in <code>decorators.py</code> I got a function instead the mock-object?
Python version is 3.4.0</p>
</div>
<div class="post-text" itemprop="text">
<p>You appear to be patching the wrong location. In <code>decorators.py</code> you are using a global name <code>get_authenticated_user()</code>, but you are patching a name in <code>api.accounts.helpers</code> instead.</p>
<p>You probably imported <code>get_authenticated_user</code> with:</p>
<pre><code>from api.accounts.helpers import get_authenticated_user
</code></pre>
<p>which means that patching the original location won't change <em>the reference in <code>decorators</code></em>.</p>
<p>Patch the global in <code>decorators</code>:</p>
<pre><code>@patch('decorators.get_authenticated_user', return_value={'username': 'username'})
</code></pre>
<p>Also see the <a href="https://docs.python.org/3/library/unittest.mock.html#where-to-patch" rel="nofollow"><em>Where to patch</em> section</a> of the <code>mock</code> documentation:</p>
<blockquote>
<p><code>patch()</code> works by (temporarily) changing the object that a name points to with another one. There can be many names pointing to any individual object, so for patching to work you must ensure that you patch the name used by the system under test.</p>
<p>The basic principle is that you patch where an object is <em>looked up</em>, which is not necessarily the same place as where it is defined. </p>
</blockquote>
</div>
<span class="comment-copy">The <code>import api.accounts.helpers as he</code> inside their test method also seems a bit odd as well. Granted, it's not pointing to what should be the right location to patch, but had it been, wouldn't it have caused problems as well?</span>
<span class="comment-copy">@idjaw: that's just the OP trying to verify that the patch is in place. It is the wrong reference that was patched however. Had they tried <code>import decorators</code> and <code>decorators.get_authenticated_user</code> they'd have seen that that reference remained unpatched.</span>
<span class="comment-copy">^^ Yeah. That's what I was trying to say. Thanks.</span>
