<div class="post-text" itemprop="text">
<p>Been recently reading on casefold and string comparisons when ignoring case. I've read that the MSDN standard is to use InvariantCulture and definitely avoid toLowercase. However, casefold from what I have read is like a more aggressive toLowercase. My question is should I use casefold in Python or is there a more pythonic standard to use instead? Also, does casefold pass the Turkey Test?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>1) In Python 3, <a href="https://docs.python.org/3/library/stdtypes.html#str.casefold" rel="nofollow noreferrer"><code>casefold()</code></a> should be used to implement caseless string matching.</strong></p>
<p>Since Python 3.0, strings are stored as Unicode. <a href="http://www.unicode.org/versions/Unicode9.0.0/ch03.pdf" rel="nofollow noreferrer">The Unicode Standard Chapter 3.13</a> defines the <em>default caseless matching</em> as follows: </p>
<blockquote>
<p>A string X is a caseless match for a string Y if and only if:<br/>
  toCasefold(X) = toCasefold(Y)</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/stdtypes.html#str.casefold" rel="nofollow noreferrer">Python's <code>casefold()</code> implements the Unicode's <code>toCasefold()</code>.</a> So it should be used to implement caseless string matching. Although, casefolding alone is not enough to cover some corner cases and to pass the Turkey Test (see Point 3).</p>
<p><strong>2) As of Python 3.6, casefold() cannot pass the Turkey Test.</strong></p>
<p>For two characters, uppercase I and dotted uppercase I, <a href="http://www.unicode.org/Public/9.0.0/ucd/CaseFolding.txt" rel="nofollow noreferrer">the Unicode Standard defines two different casefolding mappings.</a></p>
<p><em>The default (for non-Turkic languages):</em><br/>
I → i  (U+0049 → U+0069)<br/>
İ → i̇  (U+0130 → U+0069 U+0307)</p>
<p><em>The alternative (for Turkic languages):</em><br/>
I → ı  (U+0049 → U+0131)<br/>
İ → i  (U+0130 → U+0069)</p>
<p>Pythons <code>casefold()</code> can apply only the default mapping and fails the Turkey Test. For example, the Turkish words "LİMANI" and "limanı" are caseless equivalents, but <code>"LİMANI".casefold() == "limanı".casefold()</code> returns <code>False</code>. There is no option to enable the alternative mapping.</p>
<p><strong>3) How to do caseless string matching in Python 3.</strong> </p>
<p><a href="http://www.unicode.org/versions/Unicode9.0.0/ch03.pdf" rel="nofollow noreferrer">The Unicode Standard Chapter 3.13</a> describes several caseless matching algorithms. The <em>canonical casless matching</em> would probably suit most use cases. This algorithm already takes into account all corner cases. We only need to add an option to switch between non-Turkic and Turkic casefolding.</p>
<pre><code>import unicodedata

def normalize_NFD(string):
    return unicodedata.normalize('NFD', string)

def casefold_(string, include_special_i=False):
    if include_special_i:
        string = unicodedata.normalize('NFC', string)
        string = string.replace('\u0049', '\u0131')
        string = string.replace('\u0130', '\u0069')
    return string.casefold()

def casefold_NFD(string, include_special_i=False):
    return normalize_NFD(casefold_(normalize_NFD(string), include_special_i))

def caseless_match(string1, string2, include_special_i=False):
    return  casefold_NFD(string1, include_special_i) == casefold_NFD(string2, include_special_i)
</code></pre>
<p><code>casefold_()</code> is a wrapper for Python's <code>casefold()</code>. If its parameter <code>include_special_i</code> is set to <code>True</code>, then it applies the Turkic mapping, and if it is set to <code>False</code> the default mapping is used.</p>
<p><code>caseless_match()</code> does the canonical casless matching for <code>string1</code> and <code>string2</code>. If the strings are Turkic words, <code>include_special_i</code> parameter must be set to <code>True</code>.</p>
<p><strong>Examples:</strong></p>
<p><code>caseless_match('LİMANI', 'limanı', include_special_i=True)
</code>
True</p>
<p><code>caseless_match('LİMANI', 'limanı')
</code>
False</p>
<p><code>caseless_match('INTENSIVE', 'intensive', include_special_i=True)
</code>
False</p>
<p><code>caseless_match('INTENSIVE', 'intensive')
</code>
True</p>
</div>
<span class="comment-copy">1. What <code>casefold</code> does is explained <a href="https://docs.python.org/3/library/stdtypes.html#str.casefold" rel="nofollow noreferrer">in the docs</a>. 2. What does <i>"better"</i> mean in this case? 3. What's the Turkish Test (and have you tried running it to find out)?</span>
<span class="comment-copy">@jonrsharpe Sorry, meant more pythonic and also meant Turkey Test. I just want to know what good programmers use when they want to do caseless comparisons in python.</span>
<span class="comment-copy">@jonrsharpe - the turkish test is described in more detail here <a href="http://stackoverflow.com/a/797043/135978">stackoverflow.com/a/797043/135978</a></span>
<span class="comment-copy">Have you tried casefold to see for yourself whether it passes the Turkey Test?</span>
<span class="comment-copy">@jonrsharpe I just honestly haven't had the time to try it. I also haven't encountered a situation where I would need to use casefold yet. This was just a question that I had in my mind after doing some idle research. I'll be sure to post my results if I do get to testing it though. In the end, my biggest question is still: Is casefold the most pythonic way to ignore case?</span>
<span class="comment-copy">Nice work.  <code>casefold_</code> function doesn't need to end in a <code>_</code> since it is not shadowing a builtin or keyword.</span>
