<div class="post-text" itemprop="text">
<p>I'm using python's <code>subprocess</code> to run a python script (let's call it <code>script2.py</code>), and that script is printing information to <code>stdout</code> which is redirected using <code>PIPE</code>. Problem is that <code>script2.py</code> stops printing information but it keeps running in the background. What i want is to detect that state (when nothing is written to <code>stdout</code>). Is there any way to do so? </p>
<p>I can simulate this behaviour with following:</p>
<p><strong>script2.py</strong></p>
<pre><code>for i in range(0,1000):
    if i &lt; 500:
        print "HUEHUE"
</code></pre>
<p>Next 500 iterations nothing will happen and that's what i need to detect in order to rerun the script.</p>
</div>
<div class="post-text" itemprop="text">
<p>Popen.stdout
If the stdout argument was PIPE, this attribute is a file object that provides output from the child process. Otherwise, it is None.</p>
<p><a href="https://docs.python.org/2/library/subprocess.html#subprocess.PIPE" rel="nofollow">python documentation</a></p>
<p>So you probably need to decide an amount of time to <em>wait</em> before you consider your processes initial output to be done. So <strong>proc.stdout.readline()</strong> then <strong>sleep(1)</strong> then rinse and repeat. </p>
</div>
<span class="comment-copy">Why use subprocess when you could import the script and run it?</span>
<span class="comment-copy">@cricket_007 while that is the ideal solution, sometimes you are working with scripts you haven't written and it's easier to just deal with the output then interact with the script. If he wrote it himself I totally agree with you.</span>
<span class="comment-copy">Unfortunatelly <code>script2.py</code> was not written by me, i was given only the script that is running <code>script2.py</code> to detect "pause" state.</span>
<span class="comment-copy">On linux you can use <a href="https://docs.python.org/3/library/select.html#select.select" rel="nofollow noreferrer"><code>select.select([p.stdout], [], [], timeout)</code></a> to wait at most <code>timeout</code> seconds for output on stdout, for a portable solution see <a href="http://stackoverflow.com/questions/375427/non-blocking-read-on-a-subprocess-pipe-in-python">this</a> question</span>
<span class="comment-copy">Actually <code>script2.py</code> has to be run for 13 minutes, but the thing is that somewhere in those 13 minutes <code>script2.py</code> fails and needs to be run again from the beginning. That's why i need to detect that state and run it from the start to save some time.</span>
<span class="comment-copy">That's a completely different question. If you run subprocess.check-call it runs the script and throws an exception if it returns a non-zero return value. You could catch that and rerun the script if necessary</span>
