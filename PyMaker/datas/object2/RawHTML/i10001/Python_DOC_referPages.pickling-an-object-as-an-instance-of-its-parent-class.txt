<div class="post-text" itemprop="text">
<p>Suppose I had the following subclass that I'm using to temporarily endow <code>list</code> with some extra methods,</p>
<pre><code>class MyList(list):
   def some_function(self):
       pass
</code></pre>
<p>and then I do something like</p>
<pre><code>&gt;&gt;&gt; f = MyList()
&gt;&gt;&gt; .. bunch of list stuff ...
&gt;&gt;&gt; cPickle.dump(f,open('somefile','w'))
</code></pre>
<p>Now, that is all well and good until I try to open the file</p>
<pre><code>&gt;&gt;&gt; cPickle.load(open('somefile'))
</code></pre>
<p>and I get a complaint that <code>MyList</code> doesn't exist. Is there a way to somehow
get <code>MyList</code> to pickle as a plain <code>list</code> so that when I later try to load
the pickle file, I don't get this missing class error? I would like the pickle file to only refer to the built-in <code>list</code> type.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think what you wanted to do is to pickle the class instance and bundle up the class description in the pickled object.  <code>pickle</code> doesn't pickle a class description, but <code>dill</code> does.</p>
<pre><code>&gt;&gt;&gt; class MyList(list):
...   def some_function(self):
...     pass
... 
&gt;&gt;&gt; f = MyList()
&gt;&gt;&gt; import dill
&gt;&gt;&gt; dill.dump(f, open('somefile','w'))
&gt;&gt;&gt; 
</code></pre>
<p>And then upon loading, it just works...</p>
<pre><code>dude@hilbert&gt;$ python
Python 2.7.12 (default, Jun 29 2016, 12:42:34) 
[GCC 4.2.1 Compatible Apple LLVM 5.1 (clang-503.0.40)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import dill
&gt;&gt;&gt; f = dill.load(open('somefile','r'))
&gt;&gt;&gt; f
[]
&gt;&gt;&gt; type(f)
&lt;class '__main__.MyList'&gt;
&gt;&gt;&gt; g = f.__class__()
</code></pre>
</div>
<span class="comment-copy">Why not fix the missing class issue by having your module available for import when unpickling (with <code>MyList</code> as a global in that module)?</span>
<span class="comment-copy">Did you read <a href="https://docs.python.org/3/library/pickle.html#pickling-class-instances" rel="nofollow noreferrer">the documentation</a>?</span>
<span class="comment-copy">You can customise what is pickled, yes, there are various hooks, see <a href="https://docs.python.org/3/library/pickle.html#pickling-class-instances" rel="nofollow noreferrer">docs.python.org/3/library/pickle.html#pickling-class-instances</a></span>
<span class="comment-copy">Seems like the easiest fix would be to use <code>pickle.dump(list(f), open('somefile', 'w'))</code></span>
<span class="comment-copy">@mgilson Yes, but the Mlist object is embedded into other objects so I would have to unpack and re-pack them to get this to work. Thanks.</span>
<span class="comment-copy">Brilliant! And it works with Pypy to boot!</span>
