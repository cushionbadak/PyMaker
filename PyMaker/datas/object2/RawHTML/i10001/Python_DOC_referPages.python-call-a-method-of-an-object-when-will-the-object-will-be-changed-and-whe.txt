<div class="post-text" itemprop="text">
<p>I am new in python, and I just find something strange:</p>
<pre><code>&gt;&gt;&gt; test="acdefg"
&gt;&gt;&gt; test.replace('a','h')
'hcdefg'
&gt;&gt;&gt; test
'acdefg'
&gt;&gt;&gt; test=[1,2,3]
&gt;&gt;&gt; test.reverse()
&gt;&gt;&gt; test
[3, 2, 1]
</code></pre>
<p>As you can see in the code, in the first time, variable "test" is a string, when I call method "replace", the value of "test" doesn't change, the second time is is a list, and the list changed after I called the method reverse().</p>
<p>Why was that? Is it because of something different between the methods or something different between the objects or something else?</p>
</div>
<div class="post-text" itemprop="text">
<p>Strings are immutable. So you aren't actually changing <code>test</code>. You are actually getting the <code>return</code> of the <code>replace</code> string method. To use this modified string, you have to create a new string, or simply replace the existing string with the new value.</p>
<pre><code>&gt;&gt;&gt; some_string = "abcd"
&gt;&gt;&gt; new_string = some_string.replace('a', 'x')
&gt;&gt;&gt; new_string
xbcd
</code></pre>
<hr/>
<pre><code>&gt;&gt;&gt; some_string = "abcd"
&gt;&gt;&gt; some_string = some_string.replace('a', 'x')
&gt;&gt;&gt; some_string
xbcd
</code></pre>
<p>The second example, the list is mutable, and you are performing an <em>in place</em> manipulation of the list. If you actually do this: </p>
<pre><code>res = your_list.reverse()
</code></pre>
<p><code>res</code> will actually be <code>None</code>, because it doesn't return anything, it actually does it in place, which is why <code>test</code> list will hold the new manipulation you performed.</p>
<p>Read <a href="https://stackoverflow.com/questions/8056130/immutable-vs-mutable-types">this</a> on immutable vs mutable types in Python.</p>
<p>Also, refer to the documentation <a href="https://docs.python.org/3/reference/datamodel.html#data-model" rel="nofollow noreferrer">here</a> on the Data Model to further your understanding as well. </p>
</div>
<div class="post-text" itemprop="text">
<p>It depends entirely on the implementation of the method. Some methods modify the objects they're called on, some do not.</p>
</div>
<span class="comment-copy">Python strings are immutable. Lists are not.</span>
<span class="comment-copy">So it's about the property of the objects or about the property of the methods or both?</span>
<span class="comment-copy">@Statham Did you read my answer? It answers that.</span>
<span class="comment-copy">The property of the objects determines the implementation of the method. It's just one of those things that typically requires reading the documentation or trying out small examples to determine behavior</span>
<span class="comment-copy">@idjaw Yes I have read it, and I now know that. The "immutable" was just  a little strange to me,because I learn C first, in which anything can be changed through a simple assign. But now I know definitely that I should not presume Python has the same property as C :p</span>
<span class="comment-copy">I just remember something in Java, when I want to modify a String I kept use  <code>a=a.replace(..........)</code></span>
<span class="comment-copy">@Statham Do not try to use one language like it is the other. You have to refer to the documentation and understand how the language you are using actually behaves. How its methods work and how the different data types are treated in the language. It is a big mistake to think that language A should behave exactly like language B.</span>
<span class="comment-copy">Then when I use a new method, how can I know whether the method does modify the objects or not? By reading the source code? It seems a little hard for a new learner :(</span>
<span class="comment-copy">@Statham either that, or more simply, read the documentation.</span>
<span class="comment-copy">Or can I just run the code to test it ?</span>
<span class="comment-copy">Someone commented the question saying that "Python strings are immutable. Lists are not. ", I think he is talking about the property of the objects, and you said that it totally depends on the implementation of the method. Can I say that you are talking about the same thing in different perspective?</span>
<span class="comment-copy">@Statham That is correct. Here is another answer that will provide more details as well: <a href="http://stackoverflow.com/a/9098038/1832539">stackoverflow.com/a/9098038/1832539</a></span>
