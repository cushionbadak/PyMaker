<div class="post-text" itemprop="text">
<p>I'm trying to use python Subprocess module to enable/disable Ethernet connection from python code. Below is my code in which the first step is looking for the available "Ethernet Connections" and the next step enables/disables the ethernet connection according to the parameter passed in "%interfaces%".</p>
<pre><code>for /f "skip=2 tokens=3*" %%A in ('netsh interface show interface') do set interface=%%B

netsh interface set interface %interface%  ENABLED
</code></pre>
<p>Now when using in python I couldn't pass the variable, not sure if it's even possible though. Passing only command as below works as expected:</p>
<pre><code>import subprocess
subprocess.call('netsh interface set interface Ethernet10 ENABLED')
</code></pre>
<p>I want to do something like:</p>
<pre><code>import subprocess
subprocess.call (set x = 'Ethernet0')
subprocess.call('netsh interface set interface x  ENABLED')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/subprocess.html#subprocess.call" rel="nofollow noreferrer">subprocess.call</a> takes a list as an argument:</p>
<pre><code>subprocess.call(['netsh', 'interface', 'set', 'interface', x, 'ENABLED'])
</code></pre>
<p>You could instead pass <code>shell=True</code> and your string would work, but it is a security risk, since an user could for example call another command by using <code>$(command_here)</code></p>
<p>If you still want to use a string, you could use <code>shlex.split</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use string formatting, interpolation, or concatenation:</p>
<pre><code>x = 'Ethernet10'
subprocess.call('netsh interface set interface ' + x + ' ENABLED')
</code></pre>
</div>
<span class="comment-copy">thanks idjaw, it worked as expected. One more question now when trying to use subprocess for below code doesn't work. I tried to separate it out in individual strings and in a single string as well using shell=True but didn't helped.  for /f "skip=2 tokens=3*" %%A in ('netsh interface show interface') do set interface=%%B</span>
<span class="comment-copy">this is how I seperated. import subprocess  y = subprocess.call(['for /f', 'skip=2 tokens=3*', '%%A in', 'netsh', 'interface', 'show', 'interface', 'do', 'set', 'interface=%%B']) print y</span>
<span class="comment-copy">Not quite. The way you are trying to structure that as a single string, you will have to pass <code>shell=True</code>. However, the preferred/safer way to do this is to leave <code>shell=False</code> and structure the call as a list. Pretty much like the other answer that was just posted.</span>
