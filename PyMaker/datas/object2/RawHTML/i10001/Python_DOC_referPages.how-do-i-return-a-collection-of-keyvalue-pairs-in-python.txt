<div class="post-text" itemprop="text">
<p>Let's say I have a data item <code>person</code> with two properties, <code>name</code> and <code>age</code>, such that;</p>
<pre><code>person
    name
    age
</code></pre>
<p>I want to return this to a caller, but am unsure of what method to use. My ideas so far are however:</p>
<ul>
<li>A dictionary for each <code>person</code> placed in a list -- Have tried, the syntax to perform were a little tedious, also I got AttributeError</li>
<li>A class with two properties -- I don't even know how to go about this, nor if it even works</li>
</ul>
<p>My code is looking something like this at the moment:</p>
<pre><code>persons = []

for person in people: # "people" fetched from an API
    persons = {
        "name": "Foo"
        "age": "Bar"
    }

return persons


# And then to access returned result
for person in persons:
    print(person["name"]) # Gives AttributeError
    # DoMoreStuff
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First of all - the error you are not returning a list of dicts. Just a single dict. Instead of appending your persons to the list you created, you replace the list with your persons. So if you try to iterate over it, you in fact iterate over the keys. What you wanted is probably:</p>
<pre><code>persons.append({
    "name": "Foo"
    "age": "Bar"
})
</code></pre>
<p>Second of all: to get a "class with two properties" I would recommend looking on namedtuple. <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow">https://docs.python.org/3/library/collections.html#collections.namedtuple</a></p>
</div>
<div class="post-text" itemprop="text">
<p><strong>zefciu</strong> is correct and I would like to expand on his idea. First of all, before dealing with a list of persons, you need to know how to work with a single person. There are three ways to represent a person: a dictionary, a class, and a namedtuple.</p>
<h1>Dictionary</h1>
<p>Given a person name (John) and age (32), you can represent a person as:</p>
<pre><code>person = {'name': 'John', 'age': 32 }  # or
person = dict(name='John', age=32)
</code></pre>
<p>You can then access this person's name as <code>person['name']</code> and age as <code>person['age']</code>.</p>
<h1>Class</h1>
<p>You can define a person class, along with an initializer as:</p>
<pre><code>class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
</code></pre>
<p>Now, you can create and access a person object:</p>
<pre><code>person = Person('John', 32)  # or
person = Person(name='John', age=32)

print('Name:', person.name)
print('Age:', person.age)
</code></pre>
<h1>namedtuple</h1>
<p>namedtuple is part of the collections library, so you need to import it. Here is how to define it:</p>
<pre><code>from collections import namedtuple
Person = namedtuple('Person', ['name', 'age'])
</code></pre>
<p>To use it:</p>
<pre><code>person = Person('John', 32)  # or
person = Person(name='John', age=32)

print('Name:', person.name)  # like a class
print('Name:', person[0])    # like a tuple
</code></pre>
<h1>Populate a List</h1>
<pre><code>persons = []
for person in people:
    name = ...  # extract name from person
    age = ...   # extract age

    persons.append(dict(name=name, age=age))  # For dictionary
    persons.append(Person(name=name, age=age))  # For class or namedtuple
</code></pre>
</div>
<span class="comment-copy"><code>for key, value in persons.items()</code></span>
<span class="comment-copy">You can't use <code>return</code> outside of a method.</span>
<span class="comment-copy">you get error because you need <code>for key in persons: print(persons[key])</code></span>
<span class="comment-copy">If names are unique you can build a dictionary mapping names to ages.  <code>{person.name: person.age for person in people}</code></span>
<span class="comment-copy">You're <i>replacing</i> your <code>list</code> with a <code>dict</code> on each iteration… You want <code>persons.append({"name": … })</code>.</span>
<span class="comment-copy">Agreed. And obviously you will want to set <code>name</code> and <code>age</code> to the actual values (taken from <code>person</code> read from you API) instead of the static "Foo" and "Bar"</span>
