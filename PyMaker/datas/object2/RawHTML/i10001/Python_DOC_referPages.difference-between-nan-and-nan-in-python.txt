<div class="post-text" itemprop="text">
<p>I have two lists </p>
<pre><code>a = ['E300' 'E407' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' ]
b = [ nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan]
</code></pre>
<p>I wanted to remove nan from the lists. So I used this on list 'a' and 'b'</p>
<pre><code>a = [x for x in a if x != 'nan']
b = [x for x in b if x != 'nan']
</code></pre>
<p>So it works fine for list 'a' because I think it was taking 'nan' as a string but not with list b. How can I remove those nan from list b. Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you don't put it in quotes, <code>nan</code> is a number (it's a special number used to represent a nonexistent result, called "Not a Number"). It's so special that it doesn't even equal itself. Use <code>math.isnan</code> or <code>numpy.isnan</code> to test if a number is <code>nan</code></p>
<pre><code>b = [x for x in b if not math.isnan(x)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>'nan' is a string </p>
<p>nan is Not A number, you can check it by method <code>math.isnan()</code></p>
<pre><code>&gt;&gt;&gt; nan=float('nan')
&gt;&gt;&gt; math.isnan(nan)
True
</code></pre>
<p>In your case:</p>
<pre><code>b = [x for x in b if not math.isnan(x)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>'nan'</code> is a string, but <code>nan</code> is a floating-point number.  Which is funny, because "nan" stands for <a href="https://en.wikipedia.org/wiki/NaN" rel="nofollow">Not A Number</a>, but that's really what it is:</p>
<pre><code>&gt;&gt;&gt; type(nan)
&lt;class 'float'&gt;
</code></pre>
<p><code>nan</code> has a number of tricky properties, and one of the trickiest is that it compares unequal to <em>everything</em>, <em>including itself</em>.  You have to use a special function to check for it, <a href="https://docs.python.org/3/library/math.html#math.isnan" rel="nofollow"><code>math.isnan</code></a>.</p>
<pre><code>&gt;&gt;&gt; b
[nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan]
&gt;&gt;&gt; [x for x in b if x != nan]
[nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan]
&gt;&gt;&gt; [x for x in b if not math.isnan(x)]
[]
</code></pre>
<p>Note: Python does not define a built-in constant <code>nan</code>, even though the <code>repr</code> of a NaN value is <code>nan</code>.  (Contrast <code>True</code>, <code>False</code>, <code>None</code>, etc.)  3.5 and later have <a href="https://docs.python.org/3/library/math.html#math.nan" rel="nofollow"><code>math.nan</code></a>, but before that you have to say <code>float('nan')</code>.</p>
</div>
<span class="comment-copy"><code>nan</code> is a number, <code>'nan'</code> is a string.</span>
<span class="comment-copy">It's the same as the difference between <code>123</code> and <code>'123'</code></span>
<span class="comment-copy">@MorganThrapp NaN is not equal to itself (no foolin'!) so that won't work.</span>
<span class="comment-copy">nan is not in string quotes so it is not recognized by the system i think. It is throwing error</span>
<span class="comment-copy">What error are you getting exactly?</span>
<span class="comment-copy">This is the perfect answer if you add that <code>nan</code> has signal properties to floating point operations in the IEEE specifications...</span>
<span class="comment-copy">@dawg I'm not sure how that's relevant to the question of how to remove it from the list.</span>
<span class="comment-copy">when use <code>!</code>, do you mean <code>not</code>?</span>
<span class="comment-copy">@Psidom <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.isnan.html" rel="nofollow noreferrer">numpy.isnan</a></span>
<span class="comment-copy">@Psidom I didn't either, google told me.</span>
<span class="comment-copy">Actually <code>nan</code>, <code>inf</code> and <code>-inf</code>. are floating-point values but not floating-point numbers .</span>
<span class="comment-copy">@Goyo A mathematician would agree with you, but a programming language designer wouldn't.  In Python, a floating-point number is any value with type <code>float</code>, and <code>nan</code> and <code>Â±inf</code> are included.</span>
<span class="comment-copy">You are right, in Python, all instances of <code>float</code> are called numbers. I assumed incorrectly that the language specification would make a difference. Out of curiosity I checked IEEE-758-2008 (the last revision of the standard that languages are expected to follow... well, more or less) and it says that NaNs are not floating-point numbers but infinities are.</span>
