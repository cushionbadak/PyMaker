<div class="post-text" itemprop="text">
<p>Let's say a have <code>Person</code> instance <code>person</code>. <code>person</code> may have an attribute <code>id</code>.</p>
<p>I want to write a function that gets me either an empty list <code>[]</code> when the attribute is <code>None</code> or missing or the list <code>[12, ]</code> when the attribute <code>id</code> is 12.</p>
<pre><code>def get_id_list(person):
    try:
        return [getattr(person, 'id'), ]
    except AttributeError:
        return []
</code></pre>
<p>This works perfectly but is there a "pythonic" way of doing this without the try-except block and maybe in one line?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your approach is pythonic, just do some few tweaking.</p>
<p>First off, don't return inside the <code>try</code> block. You can preserve the <code>id</code> value in a variable and return it properly within <code>else</code> clause. The reason is that you are doing multiple operation like getting attribute and converting to list (and maybe more(in other cases)) while you are just catching the <code>AttributeError</code>. And when you use <code>else</code> you can handle other exceptions easily, also it's more elegant from coding style's perspective.</p>
<p>Secondly you don't need to use <code>getattr</code> in this case, you can simply use direct attribute access.</p>
<p>Also instead of using the <code>try-except</code> you might want to check if the object has the attribute then return its value but due to <em>It's easier to ask forgiveness than it is to get permission.</em> principal the <code>try-exepct</code> is better.</p>
<pre><code>def get_id_list(person):
    try:
        id = person.id
    except AttributeError:
        return []
    else:
        return [id]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would go for</p>
<pre><code>def get_id_list(person):
    _id = getattr(person, 'id', None)
    return [] if _id is None else [_id]
</code></pre>
<p>However, it is good practice to make sure that attributes are always defined so you don't have to use <code>getattr</code> with a default or use <code>hasattr</code> to check for existence.</p>
</div>
<div class="post-text" itemprop="text">
<p>You may use <a href="https://docs.python.org/2/library/functions.html#hasattr" rel="nofollow"><code>hasattr()</code></a> to check for attribute as:</p>
<pre><code>def get_id_list(person):
    if hasattr(person, 'id'):
        return [person.id]  # better then getattr(person, 'id')
    else:
        return []
</code></pre>
<p>which could be written in one line as:</p>
<pre><code>def get_id_list(person):
    return [person.id] if hasattr(person, 'id') else []
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are two basic ways of going about this:</p>
<p>EAFP (<strong>I</strong>t's <strong>E</strong>asier to <strong>A</strong>sk <strong>F</strong>orgiveness than <strong>P</strong>ermission)- which is what you have:</p>
<pre><code>def get_id_list(person):
    try:
        return [person.id]
    except AttributeError:
        return []
</code></pre>
<p>LBYL (<strong>L</strong>ook <strong>B</strong>efore <strong>Y</strong>ou <strong>L</strong>eap) </p>
<pre><code>def get_id_list(person):
    if hasattr(person, 'id'):
        return [person.id]
    else:
        return []
</code></pre>
<p>Generally, EAFP <a href="https://docs.python.org/3.5/glossary.html#term-eafp" rel="nofollow">is "pythonic"</a>, but really, it depends on the specifics of your use-case. If you know that <code>person</code> will usually have the <code>id</code> attribute, then you should use EAFP. That is to say, if it is an exceptional case for <code>person</code> not to have <code>id</code>, use exceptions! If, on the other hand, it is common for <code>person</code> to lack <code>id</code>, then LBYL will be more efficient.</p>
<p>If you simply want a one-liner, you could use a <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow">conditional expression</a>:</p>
<pre><code>return [person.id] if hasattr(person,'id') else []
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>according to <a href="https://docs.python.org/2/glossary.html#term-eafp" rel="nofollow">the Python documentation</a>:</p>
<blockquote>
<p><strong>EAFP</strong>: 
  Easier to ask for forgiveness than permission. This common Python
  coding style assumes the existence of valid keys or attributes and
  catches exceptions if the assumption proves false. This clean and fast
  style is characterized by the presence of many try and except
  statements. The technique contrasts with the LBYL style common to many
  other languages such as C.</p>
</blockquote>
<p>That means that your code follows the "official" pythonic way, checking if the attribute exists would be less pythonic.</p>
<hr/>
<p>However, performance needs could eventually override pythonic consideration according to the frequence where person object will not have an <code>id</code> attribute, because raising an exception takes more time than evaluating a simple condition.</p>
<p>Consider following code:</p>
<pre><code>import os
from timeit import timeit


def get_id_list_try(person):
    try:
        return [person.id]
    except AttributeError:
        return []


def get_id_list_if(person):
    if hasattr(person, 'id'):
        return [person.id]
    else:
        return []

class Person(object):
    def __init__(self, id):
        self.id = id

person_with_id = Person(1664)
person_no_id = object()

print("try with id: {}".format(
    timeit("get_id_list_try(person_with_id)", number=1000000,
           setup="from __main__ import get_id_list_try, person_with_id")))
print("try no id: {}".format(
    timeit("get_id_list_try(person_no_id)", number=1000000,
           setup="from __main__ import get_id_list_try, person_no_id")))
print("if with id: {}".format(
    timeit("get_id_list_if(person_with_id)", number=1000000,
           setup="from __main__ import get_id_list_if, person_with_id")))
print("if no id: {}".format(
    timeit("get_id_list_if(person_no_id)", number=1000000,
           setup="from __main__ import get_id_list_if, person_no_id")))
</code></pre>
<p>It tests the performance of the try/catch and the if/else methods with and without an id. It prints this:</p>
<pre><code>try with id: 0.25232274121
try no id: 2.32747888986
if with id: 0.364873724104
if no id: 0.728008592266
</code></pre>
<p>As you can see, the try/catch method is a bit faster when an id exists; but when the id does not exists the if/else method is 3 times faster than try/catch method.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/functions.html#getattr" rel="nofollow">getattr()</a> allows you to specify a default if the attribute isn't there so you could use that if you want to avoid a try/catch block.</p>
<blockquote>
<p>If the named attribute does not exist, default is returned if provided, otherwise AttributeError is raised.</p>
</blockquote>
<pre><code>id = getattr(person, 'id', None)

if id is not None:
    return [id]
return []
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can provide a default value (a third argument) to <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow">getattr()</a> function to be returned if an attribute does not exist:</p>
<pre><code>def get_id_list(person):
    id_ = getattr(person, 'id', None)
    return [id_] if id_ is not None else []
</code></pre>
<p>(assuming here that <code>None</code> is not a valid value for the <code>id</code> attribute)</p>
</div>
<span class="comment-copy">try-except blocks are perfectly Pythonic. Just because something is one-line doesn't mean it's the best way to do it.</span>
<span class="comment-copy">There's no need for <code>getattr</code> in the example you provided btw, use <code>return [person.id]</code></span>
<span class="comment-copy">If the Id was 13 would you want <code>[13,]</code>?</span>
<span class="comment-copy">@juanpa.arrivillaga i agree that a one-liner is not always the pythonlic way but writing the example above i thought this is a bit verbose and was wondering if there is a better way. Anyway thanks for your comment. I share your opinion on this.</span>
<span class="comment-copy">You're absolutely right to not do the return in the try block. Thanks for the hint.</span>
<span class="comment-copy">Why is it important not to return inside the try-clause when the code is so simple?</span>
<span class="comment-copy">@StevenRumbalski I'd say it's not an issue in this case, but it's a good habit to get into.</span>
<span class="comment-copy">@StevenRumbalski I describe that in <code>The reason is...</code> part.</span>
<span class="comment-copy">This would make sense if <code>hasattr</code> did not exist, but since it does this is better expressed as <code>return [person.id] if hasattr(person, 'id') else []</code>.</span>
<span class="comment-copy">@StevenRumbalski - That could quite possibly involve an extra processor operation since it needs to check for existence (access) of the same field twice. Not to mention its open to human error since it introduces an extra point of failure. Its a valid approach, much like my answer is - if it wasn't then there wouldn't be any point in allowing you to specify a default.</span>
<span class="comment-copy">This would make sense if <code>hasattr</code> did not exist, but since it does this is better expressed as <code>return [person.id] if hasattr(person, 'id') else []</code>.</span>
<span class="comment-copy">Using <code>hasattr</code> is more of a LBYL approach, and the same can be achieved by providing a default value. Similar to using <code>.get('foo', 'default')</code> on a dictionary instead of first checking whether the key exists in the first place. It's the same principle but written more concisely - provided, of course, that the assumption I mentioned holds (which is likely for an <code>id</code> field... but depends on the use case).</span>
<span class="comment-copy">You are using a look before you leap approach, just poorly implemented with the wrong function. You are using the default value not as a default, but rather as a signal as to whether the object <i>has the attribute</i>.</span>
