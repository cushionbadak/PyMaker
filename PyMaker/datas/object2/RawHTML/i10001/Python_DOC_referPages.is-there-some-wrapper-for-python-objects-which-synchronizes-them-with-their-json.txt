<div class="post-text" itemprop="text">
<p>In my app I'm going to store nodes in relatively small json files. I'm looking for any wrapper which create python object from file (like json.load() do) and then modify related file every time when my app modifies python object.</p>
<p>I expect behaviour like:</p>
<ul>
<li><p>Wrapper initialization just associate wrapper to the file path.</p>
<pre><code>node = wrapper(file_path)
</code></pre></li>
<li><p>Actual reading and parsing of the file occurs on first request.</p>
<pre><code>name = node["name"]
</code></pre></li>
<li><p>Following read requests will not interact with the file system.</p>
<pre><code>date = node["date"]
</code></pre></li>
<li><p>Each time when app modifies the object, changes will be written on the disk.</p>
<pre><code>node["name"] = "Jack"
</code></pre></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Probably not; the closest that comes to mind is <a href="https://docs.python.org/3/library/shelve.html" rel="nofollow">shelve</a>, which uses <a href="https://docs.python.org/3/library/pickle.html#module-pickle" rel="nofollow">pickle</a> rather than JSON. <code>dbm</code> is also similar. They each only react to top level changes, so mutable objects can behave surprisingly: </p>
<pre><code>shelf = shelve.open("test.shelf")
shelf["alpha"] = ["one", "two"]      # stores alpha = ["one", "two"]
shelf["alpha"].append("three")       # copies alpha out of storage,
# modifies the copy, then throws it away. stored alpha is unchanged. 
</code></pre>
<p>You <em>could</em> certainly write a similar class wrapping a dict with json dump whenever it is written, but it will end up either complicated and costly (by making anything that looks mutable to Python be another wrapper instance) or similarly limited. The pattern isn't all that unusual; <code>dbm</code> and <code>configparser</code> also do similar things. However, I'd advise to think over what you're storing this way; if your program halts unexpectedly it may easily end up erasing the file contents (dbm and sqlite are slightly more resistant, but it's a far more complex subject). </p>
</div>
