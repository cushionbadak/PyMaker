<div class="post-text" itemprop="text">
<p>this question arises when i read the book "Python cookbook" by  David Beazley, Brian K. Jones, in page 61, 62. I summarize:</p>
<pre><code>&gt;&gt;&gt; s = '{name} has {n} messages.'
&gt;&gt;&gt; name = 'Guido'
&gt;&gt;&gt; n = 37
</code></pre>
<p>Now, if just want to replace {name}, but don't want to replace {n}, define an alternative dictionary class with a <code>__missing__()</code> method</p>
<pre><code>&gt;&gt;&gt; class safesub(dict):
        def __missing__(self, key):
            return '{' + key + '}'
</code></pre>
<p>then</p>
<pre><code>&gt;&gt;&gt; del n     # Make sure n is undefined
&gt;&gt;&gt; s.format_map(safesub(vars()))
</code></pre>
<p>you get the desired result:</p>
<pre><code>'Guido has {n} messages.'
</code></pre>
<p>my question:
why need <code>__missing__()</code> method to make this code work?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>format_map()</code> will look in its argument for the key <code>'n'</code>. Because this key is <em>missing</em>, it would raise a <code>KeyError</code> in a normal <code>dict</code>. Defining the <code>__missing__</code> method determines what happens here instead: <code>'{n}'</code> is returned so that the formatted string remains the same.</p>
</div>
<span class="comment-copy">Why not try it <i>without</i> the <code>__missing__</code> method? Or look at the <a href="https://docs.python.org/3/library/stdtypes.html#dict" rel="nofollow noreferrer"><code>dict[key]</code> documentation</a> which explains what <code>__missing__</code> <i>does</i>.</span>
<span class="comment-copy">Looking at the <a href="https://docs.python.org/3/library/stdtypes.html#str.format_map" rel="nofollow noreferrer"><code>str.format_map()</code> documentation</a> might also help. Note that it has an example that's very similar to what you've read in the cookbook. There's one subtle difference thoughâ€”can you spot it?</span>
