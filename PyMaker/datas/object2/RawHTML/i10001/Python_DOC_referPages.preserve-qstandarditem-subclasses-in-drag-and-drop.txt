<div class="post-text" itemprop="text">
<p>I have:</p>
<pre><code>self.treeView = QTreeView()
self.treeView.setObjectName("testView")
self.treeView.setDragDropMode(QAbstractItemView.InternalMove)
self.treeView.setSelectionMode(QAbstractItemView.ExtendedSelection)

itemA = SubclassQStandardItemA(self)
itemB = SubcalssQStandardItemB(self)

self.model = QStandardItemModel()
self.treeView.setModel(self.model)

self.model.appendRow(itemA)
self.model.appendRow(itemB)
</code></pre>
<p>When I move itemB to itemA and check its class, ItemB is no longer a SubclassQStandardItemB but a QStandardItem.</p>
<p>How can I keep the original class of the item when I drag and drop? </p>
</div>
<div class="post-text" itemprop="text">
<p>As explained in <a href="https://stackoverflow.com/a/39584272/984421">this answer</a>, you can use <a href="http://doc.qt.io/qt-5/qstandarditemmodel.html#setItemPrototype" rel="nofollow noreferrer">setItemPrototype</a> to provide an item factory for a model. However, as also stated in the answer, only certain kinds of information are transferred during a drag and drop operation. For a <code>QStandardItem</code>, this means only the <a href="http://doc.qt.io/qt-5/qstandarditem.html#flags" rel="nofollow noreferrer">item flags</a> and <a href="http://doc.qt.io/qt-5/qstandarditem.html#data" rel="nofollow noreferrer">item data</a>. There is no way to preserve the specific subclass of the item if there are multiple subclasses being used. A model can have only one prototype, and that is used for all items that are created internally by Qt.</p>
<p>This means you should not use multiple <code>QStandardItem</code> subclasses if you need to distinguish between different item types. Instead, you should use a single subclass and reimplement <a href="http://doc.qt.io/qt-5/qstandarditem.html#ItemType-enum" rel="nofollow noreferrer">QStandardItem.type</a> to distinguish between them:</p>
<pre><code>class MyItem(QtGui.QStandardItem):
    TypeItemA = QtGui.QStandardItem.UserType
    TypeItemB = QtGui.QStandardItem.UserType + 1
    TypeItemC = QtGui.QStandardItem.UserType + 2

    def clone(self):
        return MyItem()

    def type(self):
        return self.data(QtCore.Qt.UserRole + 1000)

    def setType(self, value):
        self.setData(QtCore.Qt.UserRole + 1000, value)

...

itemA = MyItem(self)
itemA.setType(MyItem.TypeItemA)
itemB = MyItem(self)
itemB.setType(MyItem.TypeItemB)
</code></pre>
</div>
<span class="comment-copy">@ekhumoro Thanks for the solution ! The solution in your link work but only if I have 1 custom class. How can I work with 2 custom classes?  SubclassQStandardItemA &amp; SubclassQStandardItemB</span>
<span class="comment-copy">In that case, you will need to take a different approach - see my answer for one possibility.</span>
<span class="comment-copy">I tried that code, I got an error. AttributeError: type object 'QStandardItem' has no attribute 'UserData' Then I replaced UserData with UserType, that worked for some cases but I'm still puzzled... If I were to set up in <b>init</b> self.userCustomStuff = something, and then I'd like to take that to newly droped item... do I use type/setType ? or I need data/setData? Do you know of any palce that explains it in pyqt /pyside way perhaps?</span>
<span class="comment-copy">@Dariusz. I fixed the code example. As I explained in my answer, only the item-flags and item-data are transferred in a drag-drop. Anything else is completely ignored. So you must use <code>setData</code> with a custom role for custom user data (which is exactly how <code>type</code> works in my example). If you want python-style attributes, you could implement that with <a href="http://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer">@property</a>.</span>
<span class="comment-copy">just wanted to let you know that only now (when I started doing C++ Qt) after (almost) a year I now actually understand properly what the heck you mean and I love it lol. Thanks!</span>
