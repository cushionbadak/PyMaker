<div class="post-text" itemprop="text">
<p>I am trying to do some serial input and output operations, and one of those is to send an 8x8 array to an external device (Arduino). The <a href="http://pythonhosted.org/pyserial/" rel="nofollow">pySerial</a> library requires that the information that I send be a byte. However, in my python code, the 8x8 matrix is made up of types <code>&lt;class 'str'&gt;</code>. Here's my sending function:</p>
<pre><code>import serial
import Matrix

width = 8
height = 8
portName = 'COM3'

def sendMatrix(matrix):
    try:
        port = serial.Serial(portName, 9600, timeout = 1000000)
        port.setDTR(0)
        print("Opened port: \"%s\"." % (portName))
        receivedByte = port.read()
        print(int(receivedByte))
        if (receivedByte == '1'):
            port.write('1')
        bytesWritten = 0
        for row in range(8):
            for col in range(8):
                value = matrix.getPoint(col, row)
                bytesWritten += port.write(value)//ERROR HERE!
        print(int(port.read()));
        port.close()
        print("Data (%d) sent to port: \"%s\"." % (bytesWritten, portName))
    except:
        print("Unable to open the port \"%s\"." % (portName))


def main():
    matrix = Matrix.Matrix.readFromFile('framefile', 8, 8)
    matrix.print()
    print(type(matrix.getPoint(0, 0)))
    print(matrix.getPoint(1, 1))
    sendMatrix(matrix)

main()
</code></pre>
<p>Now, I have a class <code>Matrix</code>, which contains a field <code>map</code>, which is the array in question, and I will include that code here too, but the problem I'm having is that each element in the array is of type <code>str</code>, but I need to convert it to a byte. I can disregard possible loss of data, since in practice, I only use 0's and 1's.</p>
<p>My Matrix Class:</p>
<pre><code>class Matrix(object):

    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.map = [[0 for x in range(width)] for y in range(height)]

    def setPoint(self, x, y, value):
        if ((x &gt;= 0) and (x &lt; self.width) and (y &gt;= 0) and (y &lt; self.height)):
            self.map[y][x] = value

    def getPoint(self, x, y):
        if ((x &gt;= 0) and (x &lt; self.width) and (y &gt;= 0) and (y &lt; self.height)):
            return self.map[y][x]

    def print(self):
        for row in range(self.height):
            for col in range(self.width):
                print(str(self.map[row][col])+" ", end="")
            print()

    def save(self, filename):
        f = open(filename, 'w')
        for row in range(self.height):
            for col in range(self.width):
                f.write(str(self.map[row][col]))
            f.write('\n')
        f.close()

    def toByteArray(self):
        matrixBytes = bytearray(self.width * self.height)
        for row in range(self.height):
            for col in range(self.width):
                matrixBytes.append(int(self.map[row][col]))
        return matrixBytes

    def getMap(self):
        return self.map

    def readFromFile(filename, width, height):
        f = open(filename, 'r')
        lines = list(f)
        matrix = Matrix(width, height)
        f.close()
        for row in range(len(lines)):
            matrix.map[row] = lines[row].strip('\n')
        return matrix
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To transform a unicode string to a byte string in Python do this:</p>
<pre><code>&gt;&gt;&gt; 'foo'.encode('utf-8')
b'foo'
</code></pre>
<p>To transform a byte string to a unicode string:</p>
<pre><code>&gt;&gt;&gt; b'foo'.decode('utf-8')
'foo'
</code></pre>
</div>
<span class="comment-copy">Why don't you just do <code>bytes(matrix.toByteArray())</code> ?</span>
<span class="comment-copy">matrix is an object, and it contains a width, height, and a 2 dimensional array inside of that. It's not simply an iterable structure.</span>
<span class="comment-copy">Sure, but the code for your <code>matrix.toByteArray</code> method looks like it serializes the matrix data correctly into a bytearray, and the built-in <code>bytes</code> function will produce a bytes object from that bytearray.</span>
<span class="comment-copy">Would this work for ascii values instead of utf-8?</span>
<span class="comment-copy">yes, use <code>'ascii'</code> instead of <code>'utf-8'</code>. see <a href="https://docs.python.org/3/library/codecs.html#standard-encodings" rel="nofollow noreferrer">here</a> for a list of possible encodings.</span>
