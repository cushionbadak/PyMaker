<div class="post-text" itemprop="text">
<p>so I'm trying to skip over several rows from a .txt file and then creating a CSV file using csv reader. 18 rows need to be skipped. This gets the job done but I'm pretty sure there is an easy way of skipping 18 rows instead of using next() 18 times.</p>
<pre><code>import csv
import os

my_file_name = os.path.abspath('LensBank.txt')
cleaned_file = "LensBankClean.csv"
with open(my_file_name, 'r', newline='') as infile, open(cleaned_file, 'w',newline='') as outfile:
    writer = csv.writer(outfile)
    cr =  csv.reader(infile, delimiter=',')

    next(cr)
    next(cr)
    next(cr)
    next(cr)
    next(cr)
    next(cr)
    next(cr)
    next(cr)
    next(cr)
    next(cr)
    next(cr)
    next(cr)
    next(cr)
    next(cr)
    next(cr)
    next(cr)
    next(cr)
    next(cr)
    writer.writerow(next(cr))

    for line in (r[:20] for r in cr):
     writer.writerow(line)
</code></pre>
<p>This works for me but how would I clean up the code to a much simpler version. Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer"><code>range</code></a>:</p>
<pre><code>for skip in range(18):
    next(cr)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>for i in range(18):
    next(cr)
</code></pre>
<p>Use a <code>for</code> loop.  Or you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.dropwhile" rel="nofollow noreferrer"><code>itertools.dropwhile</code></a></p>
<pre><code>for line in (r[:20] for i, r in itertools.dropwhile(lambda x: x[1] &lt; 18 , enumerate(cr))):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That's strange that you used a for loop below, but haven't considered it for the same problem.</p>
<p>your code can easily be replaced by something like this</p>
<pre><code>for i in range(18):
    next(cr)
writer.writerow(next(cr))
</code></pre>
<p>This will call next(cr) 18 times, and afterwards call writer.writerow</p>
</div>
<div class="post-text" itemprop="text">
<p>How about this,</p>
<pre><code>import csv

# read a csv file into a list of lists
with open(in_file, 'r') as f_in:
    lists = [row for row in csv.reader(f_in, delimiter=',')] 

# write a list of lists to a csv file
with open(out_file, 'w') as f_out:
    writer = csv.writer(f_out)
    writer.writerows(lists[18:])    # skip the first 18 lines
</code></pre>
<hr/>
<p>As mentioned by @PatrickHaugh, the above solution is not effective for a large file. Below is the solution for a big files.</p>
<pre><code>with open(in_file,'r') as f_in, open(out_file,'w') as f_out:
    # skip the first n lines
    for _ in range(18):
        next(f_in)
    for line in f_in:
        f_out.write(line)
</code></pre>
</div>
<span class="comment-copy">...and it could be done on <code>infile</code> before creating <code>csv.reader</code> to save a few cpu cycles.</span>
<span class="comment-copy">This is a good solution for small files, but for very large ones I feel that reading the whole thing into memory is bad.  I would be very leery of doing this without being very sure of my inputs.</span>
<span class="comment-copy">@PatrickHaugh, Thx. I agree. I just updated my answer.</span>
