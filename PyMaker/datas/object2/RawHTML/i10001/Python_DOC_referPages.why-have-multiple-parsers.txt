<div class="post-text" itemprop="text">
<p>I am reading through argparse docs: <a href="https://docs.python.org/3.4/library/argparse.html" rel="nofollow">https://docs.python.org/3.4/library/argparse.html</a></p>
<p>I read through the "parents" doc for ArgumentParser and it mentioned that this is used when several parsers share common args. I am wondering, when would I need to have "several parsers" in the first place? </p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/argparse.html#parents" rel="nofollow">documentation</a> is already fairly straightforward:</p>
<blockquote>
<p>Rather than repeating the definitions of these arguments, a single parser with all the shared arguments and passed to parents= argument to ArgumentParser can be used</p>
</blockquote>
<p>One <em>use-case</em> that comes to mind is when you have a lot of scripts that do different things to a database that requires a username and password to be accessed. One of the scripts alters a table, another one changes a few permissions... but all those scripts are going to need the username and password to access the database, right? </p>
<p>You could have a "base" argument parser that expects (or parses) the username and password, and then have more specialized parsers with more arguments. For instance:</p>
<pre><code>import argparse


def make_basic_parser():
    parser = argparse.ArgumentParser(description='Basic parser (only username/password).',
                                     add_help=False)
    parser.add_argument('--username', type=str, help='Username to access database')
    parser.add_argument('--password', type=str, help='Password to access database')
    return parser


def alter_table_parser():
    parent = make_basic_parser()
    parser = argparse.ArgumentParser(description='Alter a table', parents=[parent])
    parser.add_argument('--table', type=str, help='Table to alter')
    return parser


if __name__ == "__main__":
    parser = alter_table_parser()
    args = parser.parse_args()
    print("Received arguments: %s" % (args))
</code></pre>
<p>Running this will result in:</p>
<pre><code>$ python ./stack_055_A.py --username foo --password bar --table baz
Received arguments: Namespace(password='bar', table='baz', username='foo')
</code></pre>
<p>So you can reuse the <em>basic\parser</em> every time you need a username and a password.</p>
</div>
<span class="comment-copy">Do a search on <code>[argparse] parents</code> to see how others have used the feature.  It's not heavily used.  It can be handy, but rarely necessary.  Often it can be replaced by your own utility functions.</span>
<span class="comment-copy">@hpaulj where do I search this?</span>
<span class="comment-copy">Right here on Stackoverflow, the [argparse] tag, and <code>parents</code> string.</span>
<span class="comment-copy">@hpaulj thanks.</span>
