<div class="post-text" itemprop="text">
<p>So I set out to make a simple game of hangman and everything worked fine, the whole code worked but it lacked the ability to allow the user to replay when the game is over. Thus I set out to put all the code I have written in various functions. So that I can call the functions when they are required (I thought it was the most logical way to allow replay-ability). Various problems followed but one stood out.</p>
<p>The main culprit (I think) is that I could not successfully get a value to update globally. I've read similar questions on the site but could not successfully adapt it to my case. I have a sample code to show what exactly I mean:</p>
<pre><code>def GameMode():
    choice = input('Play alone or play with friends? A F : ')
    choice = choice.upper()
    if choice == 'A':
        wordslotmachine = ['stand','emerald','splash']
        word = random.choice(wordslotmachine)
        word = word.upper()
        Rules()        
    elif choice == 'F':
        word = input('Enter your word for your friends to guess: ')
        word = word.upper()
        Rules()
    else:
        choice = input('Please enter A or F: ')
        choice = choice.upper()
</code></pre>
<p>I would need the program to remember what the value of "word" is and use this word in another method (this method is ran by another method showed below "Rules()"):</p>
<pre><code>def MainGame():
    guesses = '' 
    turns = 10
    underscore = 0
    seconds = 1
    checker = 0
    cheaterchance = 5
    while turns &gt; 0: #check if the turns are more than zero        

        for char in word: # for every character in secret_word           
            if char in guesses: # see if the character is in the players guess
                print(char+' ', end='')    
            else:
                print('_ ', end='')# if not found, print a dash
                underscore += 1
        if underscore == 0:        
            print(': You got it!')
            Wait()
            NewGame()
            break
        #A block of if's to check for cheating
            if guess not in word:
                print('Your guesses so far: '+guesses)
                turns -= 1        

                if turns == 0:
                    break
                else:
                    print('')
                    print('Try again. You have',turns,'more guesses')
                    print('Delayed chance to answer by',seconds,'seconds')
                    counter = 1
                    print(0,'.. ', end='')
                    while counter &lt; seconds:
                        time.sleep(1)
                        print(counter,'.. ', end='')
                        counter += 1
                    if counter == seconds:
                        time.sleep(1)
                        print(counter,'.. done!', end='')
                    print('')
                    print('')
                    seconds += 1
                    underscore = 0
            else:
                print('Your guesses so far: '+guesses)
                underscore = 0
        #The else portion of the code to check for cheating
</code></pre>
<p>I have tried defining "word" outside of the function. Doing this doesn't fix the problem, GameMode() will not successfully update the value of "word". And whatever the value of "word" defined outside of the function will be called and used by MainGame(). However doing this shows another problem.</p>
<p>That being, the code that previously worked (it successfully read the input and correctly updated the game status) now does not work. Even if the correct letter is entered by the user, the program reads the input as incorrect. </p>
<p>These are the two problems I have faced so far and have yet to find a way to overcome them.</p>
<p>Note: I have successfully created a way to make the game replay-able by putting the entire original code (without the functions) inside a while loop. However I would still very much like to know how I can get the code to work using functions.</p>
<p>Edit: This is the function for Rules():</p>
<pre><code>def Rules():
    #Bunch of prints to explain the rules
    MainGame()
    print('Start guessing...')
</code></pre>
<p>Wait() is just a delay function with a countdown.</p>
</div>
<div class="post-text" itemprop="text">
<p>Global vs. Local variables.</p>
<p>You can reference and use a global variable from within a function, but you cannot change it. </p>
<p>It's bad practice, but you CAN declare a variable within your function to be global and then changes to it inside your function will apply to the variable of the same name globally. </p>
<p>HOWEVER, what I suggest is to return the word at the end of your function.</p>
<pre><code>def whatever_function(thisword):
    do some stuff
    return word

new_word = whatever_function(thisword)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Functions can, and usually should, return values.  Make <code>GameMode()</code> return the word to the caller;</p>
<pre><code>def GameMode():
    choice = input('Play alone or play with friends? A F : ')
    choice = choice.upper()
    if choice == 'A':
        wordslotmachine = ['stand','emerald','splash']
        word = random.choice(wordslotmachine)
        word = word.upper()
        Rules()    #ignore this        
    elif choice == 'F':
        word = input('Enter your word for your friends to guess: ')
        word = word.upper()
        Rules() #ignore this
    else:
        choice = input('Please enter A or F: ')
        choice = choice.upper()
    return word
</code></pre>
<p>From the <code>main</code> call <code>GameMode</code> and save the word;</p>
<pre><code> def MainGame():
        guesses = '' 
        turns = 10
        underscore = 0
        seconds = 1
        checker = 0
        cheaterchance = 5
        word = GameMode()  # add this here
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You almost certainly want to use a <a href="https://docs.python.org/3/tutorial/classes.html#class-and-instance-variables" rel="nofollow">class with instance variables</a></p>
<p>Contrived example:</p>
<pre><code>class Hangman:

  def __init__(self):
    print("Starting hangman")

  def mode(self):
    # ...
    self.word = 'whatever'


  def play(self):
    print("Look i have access to word", self.word)


if __name__ == '__main__':
  hm = Hangman()
  hm.mode()
  hm.play() # may be what you want to put in a while loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To access a global variable from inside a function, you have to tell python that it is global:</p>
<pre><code>my_global_var = 1

def some_func():
    global my_global_var
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have to use global keyword in every method that the global variable is being used or python will think you are defining/ using a local variable</p>
<p>Having said that, you should avoid globals as a coding practise. </p>
<pre><code>global word  #probably define this after imports.


def GameMode():
    global word #add this
    choice = input('Play alone or play with friends? A F : ')
    choice = choice.upper()
    if choice == 'A':
        wordslotmachine = ['stand','emerald','splash']
        word = random.choice(wordslotmachine)
        word = word.upper()
        Rules()    #ignore this        
    elif choice == 'F':
        word = input('Enter your word for your friends to guess: ')
        word = word.upper()
        Rules() #ignore this
    else:
        choice = input('Please enter A or F: ')
        choice = choice.upper()


    def MainGame():
        guesses = '' 
        turns = 10
        underscore = 0
        seconds = 1
        checker = 0
        cheaterchance = 5
        global word # add this here
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>use the code</p>
<pre><code>global word
</code></pre>
<p>above the def or let the def return the value of word so it is stored in a variable outside the def</p>
</div>
<span class="comment-copy">These are called functions, not "definitions".</span>
<span class="comment-copy">Pls accept my answer if it fixed your problem</span>
<span class="comment-copy">I tried this method too, but the program just freezes at the return, it doesn't progress after that.</span>
<span class="comment-copy">@Win after I eliminated all the undefined methods, like <code>Rules()</code> and <code>Wait()</code>, it seems to play fairly well.    Are you sure it's not spitting out an Exception stacktrace?</span>
<span class="comment-copy">@CAB could it be because Rules() is what runs into MainGame()? I guess I should define the method in the question, sorry.</span>
<span class="comment-copy">@Win you asked the question pretty well, but you might want to read help on <a href="http://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> for next time.</span>
<span class="comment-copy">@CAB Thanks. I just gave the page a read and made some edits to take out the irrelevant things to the question. And I added the Rules() function to complete the question. That being said I'm still stuck and I'm very interested in seeing how you fixed the code, can you please show me?</span>
<span class="comment-copy">I tried this and the program endlessly loops GameMode() Edit: I might be wrong but I think this will just run GameMode() everytime "word" is used</span>
<span class="comment-copy">What's the purpose of putting self inside the brackets in "init" and "mode" functions? And what is the difference between that and "self.word"?</span>
<span class="comment-copy">@Win the link in my answer can explain everything better than I can.</span>
<span class="comment-copy">Its the easiest/quick fix without refactoring and is what the author asked. I mentioned that globals should be avoided . Downvotes discourage me from adding new answers next time . :(</span>
<span class="comment-copy">I just tried this, but it didn't work for me :(. I get a NameError: 'word' is not defined</span>
<span class="comment-copy">Oh you must not have defined it before using it.. can you post your code and i can help you fix it</span>
<span class="comment-copy">using <code>global</code> variables in any language is bad form.</span>
<span class="comment-copy">putting it above the def won't affect anything that happens inside the function.</span>
