<div class="post-text" itemprop="text">
<p>I want to test how <code>asyncio</code> handle blocking processes.</p>
<p>There must be something wrong with my code because <code>asyncio.TimeoutError</code> is never raised:</p>
<pre><code>import asyncio, random, time

q = asyncio.Queue()

MAX_WAIT = 5

@asyncio.coroutine
def blocking_task(sec):
    print('This task will sleep {} sec.'.format(sec))
    time.sleep(sec)

@asyncio.coroutine
def produce():
    while True:
        q.put_nowait(random.randint(1,10))
        yield from asyncio.sleep(0.5 + random.random())

@asyncio.coroutine
def consume():
    while True:
        value = yield from q.get()
        try:
            yield from asyncio.wait_for(blocking_task(value), MAX_WAIT)
        except asyncio.TimeoutError:
            print('~/~ Job has been canceled !!')
        else:
            print('=/= Job has been done :]')


loop = asyncio.get_event_loop()
asyncio.ensure_future(produce())
asyncio.ensure_future(consume())
loop.run_forever()
</code></pre>
<p>This code produce the following output:</p>
<pre><code>$ ./tst3.py 
This task will sleep 2 sec.
=/= Job has been done :]
This task will sleep 1 sec.
=/= Job has been done :]
This task will sleep 7 sec.
=/= Job has been done :]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Use <code>asyncio.sleep</code> instead of <code>sleep</code></p>
</blockquote>
<p>The <a href="https://docs.python.org/3/library/asyncio-task.html#timeouterror" rel="nofollow">TimeoutError of asyncio</a> is different from <a href="https://docs.python.org/3/library/exceptions.html#TimeoutError" rel="nofollow">buildin TimeoutError</a>. That's why you can not use time.sleep to trigger this error. For triggering TimeoutError in asyncio.coroutine, you only can use timer which is implemented by asyncio module.</p>
<pre><code>@asyncio.coroutine
def blocking_task(sec):
    print('This task will sleep {} sec.'.format(sec))
    yield from asyncio.sleep(sec)
</code></pre>
<p><strong>Result</strong></p>
<pre><code>This task will sleep 10 sec.
~/~ Job has been canceled !!
This task will sleep 3 sec.
=/= Job has been done :]
This task will sleep 4 sec.
=/= Job has been done :]
This task will sleep 2 sec.
=/= Job has been done :]
This task will sleep 7 sec.
~/~ Job has been canceled !!
This task will sleep 2 sec.
=/= Job has been done :]
</code></pre>
</div>
<span class="comment-copy">What if there was other long running blocking function (not sleep), how would I ensure it's cancelled after 5 sec?</span>
<span class="comment-copy">I updated the answer. Hope it is helpful for you.</span>
<span class="comment-copy">@NarÅ«nasK Have a look at <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.run_in_executor" rel="nofollow noreferrer">loop.run_in_executor</a> and this <a href="http://stackoverflow.com/questions/26413613/asyncio-is-it-possible-to-cancel-a-future-been-run-by-an-executor#26414982">answer about canceling a blocking call running in an executor</a>.</span>
