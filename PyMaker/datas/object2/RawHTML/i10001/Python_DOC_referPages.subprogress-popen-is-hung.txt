<div class="post-text" itemprop="text">
<p><div class="snippet" data-babel="false" data-console="true" data-hide="false" data-lang="js">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>def hello():
    while True:
    	print 'subprocess = ' + str(os.getpid())
    	time.sleep(1)
def killPid(pid):
	print 'kill ' + str(pid)
	os.system("taskkill" + ' /T /F /pid '+ str(pid))

p = subprocess.Popen(hello())
# p = subprocess.Popen("ping 10.193.101.34", shell=True)
print 'after subprocess'
t = threading.Timer(3.0, killPid, args=(p.pid,))
t.start()  # after 3 seconds, "hello, world" will be printed</code></pre>
</div>
</div>
</p>
<p>while the popen is hung?
the subprogress is not killed</p>
</div>
<div class="post-text" itemprop="text">
<p>It seams that you want to execute the function hello() as a process. To do so you can try to call Popen with something like </p>
<pre><code>["python","-m",__file__,"-c","hello()"] 
</code></pre>
<p>to run a new instance of the python interpreter that executes your hello function.</p>
</div>
<span class="comment-copy"><code>subprocess.Popen</code> is not even executed. It's clear, since 'after subprocess` is not printed in your console. <code>hello()</code> never completes, so input arguments for <code>Popen</code> are never evaluated. All input arguments have to be evaluated before call. Popen is used to run <i>external</i> binaries. You seems to want to run python code in non-blocking fashion. Are you looking for <a href="https://docs.python.org/3/library/threading.html#thread-objects" rel="nofollow noreferrer"><code>threading.Thread</code></a>?</span>
<span class="comment-copy">I want to use popen to excute the function hello() as a process</span>
<span class="comment-copy">could it use popen to excute the function hello() as a process in one instance of the python?</span>
<span class="comment-copy">You may not be able to do it as Popen is used to create a subproces</span>
