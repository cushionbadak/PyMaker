<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/14059558/why-is-python-no-longer-waiting-for-os-system-to-finish">Why is python no longer waiting for os.system to finish?</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I have encountered a problem with my python script. I am using python 3. I am using the os.system function to open an app on my mac. What I would like to do is have the computer print "done" when it has finished opening. The problem is the script prints "done" before the app is even done loading. The app starts launching but the script prints "done" before the app is completely done launching. This is my script:</p>
<pre><code>import os

os.system('open "/Applications/Pages.app"')
print("done.")
</code></pre>
<p>Plz help</p>
<p>Thanks in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>If you really want the behavior you described, I suggest you to look in direction of UI Automation and OS X Accessibility. For example - an <a href="https://pypi.python.org/pypi/atomac/1.1.0" rel="nofollow">atomac</a> python package that could help you to wait until it is loaded.</p>
<p>1) What you need to determine the "symptoms" of completed loading that can be accessed via UI automation.</p>
<p>2) Wait until the "symptoms" appear.</p>
<p>3) You are done.</p>
</div>
<div class="post-text" itemprop="text">
<p>The code is actually working as it should. It might work to think of the open command as something that kick-starts the opening process -- like starting the starter motor on your car. Open will tell your app to open and then it returns, telling you whether or not it has managed to get the ball rolling. Meanwhile, the app that you've opened will go through its own initialisation process until it has fully started up.</p>
<p>I'm not sure how you can tell when your program has fully started up short of just setting a timer for an arbitrary number of seconds. You might be able to make an educated guess by looking at the list of processes on your computer?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>open</code> is a command, that runs the application as a separate task. If you wanted to wait for the completion, you'd have to directly run the executable inside the app (.app is just a suffix for directories).</p>
<p>But as you don't want to do that: The app itself handles all the loading, MacOS is (probably, I have actually <em>no idea</em> whatsoever about how operating systems work) just copying all the bits and bytes from that executable file into RAM; and then the scheduler from the operating system runs it.</p>
<p>Some applications open a window directly, but not all do. The calls to do that are running through some libraries sometimes, and it generally takes a while. So trying to measure the time it takes to open a window doesn't work either (and applications may initialize other things as well; and measuring time for such tasks isn't a great way to deal with such problems anyway).</p>
<p>The solution is the following: You want to resume if a window by that program is opened, right? If you know the name of the process, it is pretty easy:</p>
<pre class="lang-py prettyprint-override"><code>import os
import subprocess

devnull = open(os.devnull, 'w')
script = """
tell application "System Events"
  set frontApp to first application process whose name is "{}" and frontmost is true
end tell
"""

...

while subprocess.check_call(["osascript", "-e", script.format("name_of_the_process")], stdout=devnull, stderr=devnull) != 0:
    pass
</code></pre>
<p><code>osascript</code> runs AppleScript "applications", in this case an application that tries to get the process with the name you provided that has to have a window that is on top. This is the name of the directory without the trailing ".app", I'd guess. This doesn't work if this app isn't opened, leaving us with a non-zero exit code (-1719 in this case), while it doesn't have any problems if the app is opened. The variable is set, and the script exits, leaving us with a 0 as an exit code.</p>
<p>If you only want to wait for the process to appear, remove the <code>and frontmost is true</code> from the AppleScript code in the <code>script</code> variable.</p>
<p>My code works as expected on my Mac, but it does print to stdout.</p>
</div>
<span class="comment-copy">Why don't you use <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer"><code>subprocess</code></a> instead?</span>
<span class="comment-copy">ive tried using subprocess, dosent make a difference</span>
<span class="comment-copy">This is not a Python issue, this is an issue with <code>open</code> returning and exiting once it has instructed the OS to open the app. <code>open</code> doesn't wait.</span>
<span class="comment-copy">You could probably come close to a solution using the OSA layer/Applescript; you can at least wait until the app has a window.</span>
<span class="comment-copy">I tried this in my code but it gives me a error: subprocess.CalledProcessError, so I tried doing a try, except statement but that did not work either. @CodingLambdas</span>
<span class="comment-copy">@NoahChalifour it did work for me however. Can you send me the complete error?</span>
