<div class="post-text" itemprop="text">
<p>I need to execute the following code from within a shell script. Typically in languages such as node.js I could write <code>node -e "code here"</code> to execute the code. How can I replicate this functionality with Python?</p>
<pre><code># Python server
python "import SimpleHTTPServer
import SocketServer
PORT = $pythonPort
Handler = SimpleHTTPServer.SimpleHTTPRequestHandler
httpd = SocketServer.TCPServer(("", PORT), Handler)
print "serving at port", PORT
httpd.serve_forever()"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I guess you could use a <a href="http://www.tldp.org/LDP/abs/html/here-docs.html" rel="nofollow">here document</a>.</p>
<p>For example, here's a simple test script:</p>
<pre><code>#!/bin/bash -ex
testnum=$1

if [ -z $testnum ]; then
    testnum=-1.1
fi

python &lt;&lt;EOF
import math
print(math.fabs($testnum))
EOF
</code></pre>
<p>You could do the same thing by putting your python logic in a separate  python script (that takes commandline args) and then just calling it in your shell script.  For example:</p>
<pre><code>python test.py $testnum
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You <em>can</em>... it's very confusing (at least it is for me) as soon as you get more than... 3 lines, but you can. For instance:</p>
<pre><code>#!/bin/bash
# Python server
pythonPort=8000
python -c "import SimpleHTTPServer;"`
`"import SocketServer;"`
`"PORT = $pythonPort; "`
`"print(PORT); "`
`"Handler = SimpleHTTPServer.SimpleHTTPRequestHandler; "`
`"httpd = SocketServer.TCPServer((\"\", PORT), Handler); "`
`"print(\"serving at port %s\" % PORT); "`
`"httpd.serve_forever()"
</code></pre>
<p>The important part is the <code>-c</code> (to run the text after it as a command passed to the interpreter)</p>
<p>More information <a href="https://stackoverflow.com/questions/2043453/executing-python-multi-line-statements-in-the-one-line-command-line">here</a>.</p>
<p>I'd put that in a file if possible, though. If you need the ability to make the port configurable, you can use <a href="https://docs.python.org/3/library/sys.html#sys.argv" rel="nofollow noreferrer"><code>sys.argsv</code></a> in your Python code and pass it in the command call as an argument.</p>
<p>For instance, put this in a script:</p>
<p><em>run_server.py</em>:</p>
<pre><code>#!/usr/bin/env python
# Python server
import sys
import SimpleHTTPServer
import SocketServer

PORT = int(sys.argv[1])
print(sys.argv)
Handler = SimpleHTTPServer.SimpleHTTPRequestHandler
httpd = SocketServer.TCPServer(("", PORT), Handler)
print("serving at port %s" % PORT)
httpd.serve_forever()
</code></pre>
<p>And call it with <code>python ./run_server.py 8000</code> The content of <code>sys.argv</code> is a list, where the first item is the script's name, and then the rest are the arguments passed in the call. In this example's case, that would be: <code>['./run_server.py', '8000']</code></p>
</div>
