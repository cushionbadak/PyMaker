<div class="post-text" itemprop="text">
<p>For the records:</p>
<ul>
<li><code>a</code> means 'archivable'</li>
<li><code>s</code> means 'system'</li>
<li><code>h</code> means 'hidden'</li>
<li><code>r</code> means 'readonly'</li>
<li><code>i</code> means 'indexable'</li>
</ul>
<p>My current solution to read/write these attributes from Python scripts is to call <code>attrib</code> using the <a href="https://docs.python.org/3/library/subprocess.html#module-subprocess" rel="nofollow noreferrer">subprocess</a> module.</p>
<p><strong>Python code</strong>:</p>
<pre><code>import os, subprocess

def attrib(path, a=None, s=None, h=None, r=None, i=None):
    attrs=[]
    if r==True:    attrs.append('+R')
    elif r==False: attrs.append('-R')
    if a==True:    attrs.append('+A')
    elif a==False: attrs.append('-A')
    if s==True:    attrs.append('+S')
    elif s==False: attrs.append('-S')
    if h==True:    attrs.append('+H')
    elif h==False: attrs.append('-H')
    if i==True:    attrs.append('+I')
    elif i==False: attrs.append('-I')

    if attrs: # write attributes
        cmd = attrs
        cmd.insert(0,'attrib')
        cmd.append(path)
        cmd.append('/L')
        return subprocess.call(cmd, shell=False)

    else: # just read attributes
        output = subprocess.check_output(
            ['attrib', path, '/L'],
            shell=False, universal_newlines=True
        )[:9]
        attrs = {'A':False, 'S':False, 'H':False, 'R':False, 'I':False}
        for char in output:
            if char in attrs:
                attrs[char] = True
        return attrs

path = 'C:\\test\\'
for thing in os.listdir(path):
    print(thing, str(attrib(os.path.join(path,thing))))
</code></pre>
<p><strong>Output</strong>:</p>
<pre><code>archivable.txt {'A': True, 'I': False, 'S': False, 'H': False, 'R': False}
hidden.txt {'A': True, 'I': False, 'S': False, 'H': True, 'R': False}
normal.txt {'A': True, 'I': False, 'S': False, 'H': False, 'R': False}
readonly.txt {'A': True, 'I': False, 'S': False, 'H': False, 'R': True}
system.txt {'A': True, 'I': False, 'S': True, 'H': False, 'R': False}
</code></pre>
<p>But this performs slow when the directory contains many entries (one subprocess call per entry).</p>
<p>I dont want to use the <a href="http://code.activestate.com/recipes/303343-changing-file-attributes-on-windows/" rel="nofollow noreferrer">win32api</a> module because i dont want third party module dependencies. Also im curious how to do it with <a href="https://docs.python.org/3/library/ctypes.html#module-ctypes" rel="nofollow noreferrer">ctypes</a>.</p>
<p>I have stumbled over <a href="https://stackoverflow.com/questions/549109/hide-folders-file-with-python">Hide Folders/ File with Python [closed]</a>, <a href="https://stackoverflow.com/questions/19622133/set-hide-attribute-on-folders-in-windows-os">Set "hide" attribute on folders in windows OS?</a> and <a href="https://stackoverflow.com/questions/16326395/python-windows-system-file">Python: Windows System File</a>, but this is not clear to me. Especially i dont understand what these 0x4 es 0x02 es are. Can you explain this? Can you give a concrete code example?</p>
</div>
<div class="post-text" itemprop="text">
<p>With the help of eriksuns comments to my question i solved it. Here is the code from my question but now using <a href="https://docs.python.org/3/library/ctypes.html#module-ctypes" rel="nofollow noreferrer">ctypes</a>, <a href="https://docs.python.org/3/library/stat.html" rel="nofollow noreferrer">stat</a> and <a href="https://docs.python.org/3/library/os.html#os.scandir" rel="nofollow noreferrer">os.scandir</a>. It requires Python 3.5+. Writes are ~50 times faster and reads are ~900 times faster.</p>
<p><strong>Python code</strong>:</p>
<pre><code>from ctypes import WinDLL, WinError, get_last_error
from stat import \
    FILE_ATTRIBUTE_ARCHIVE as A, FILE_ATTRIBUTE_SYSTEM as S, \
    FILE_ATTRIBUTE_HIDDEN as H, FILE_ATTRIBUTE_READONLY as R, \
    FILE_ATTRIBUTE_NOT_CONTENT_INDEXED as I
from os import scandir, stat

def example_usage():
    path = 'C:\\test\\'
    # https://docs.python.org/3/library/ctypes.html#ctypes.WinDLL
    kernel32 = WinDLL('kernel32', use_last_error=True)

    print('\njust read the ashri attributes:')
    # https://docs.python.org/3/library/os.html#os.DirEntry
    for entry in scandir(path):
        a,s,h,r,i = myattrib(kernel32, entry)
        print(entry.path, a,s,h,r,i)

    print("\nset the readonly attribute on each entry:")
    for entry in scandir(path):
        a,s,h,r,i = myattrib(kernel32, entry, r=True)
        print(entry.path, a,s,h,r,i)

    print("\nset attributes more than once on the same entry:")
    for entry in scandir(path):
        a,s,h,r,i = myattrib(kernel32, entry, a=False, s=False, h=False, r=False, i=False)
        print(entry.path, a,s,h,r,i)
        a,s,h,r,i = myattrib(kernel32, entry, update=True, a=True, s=True, h=True, r=True, i=True)
        print(entry.path, a,s,h,r,i)

# Use update=True when you call this function a second time on the same DirEntry object.
def myattrib(kernel32, entry, update=False, a=None, s=None, h=None, r=None, i=None):

    # get the file attributes as an integer.
    if not update: # faster
        attrs = entry.stat(follow_symlinks=False).st_file_attributes
    else: # slower but reflects changes
        # notice that this will raise a WinError Access denied on some entries,
        # for example C:\System Volume Information\
        attrs = stat(entry.path, follow_symlinks=False).st_file_attributes

    # construct the new attributes
    newattrs = attrs
    def set(attr, value):
        nonlocal newattrs
        # use '{0:032b}'.format(number) to understand what this does.
        if value is True: newattrs = newattrs | attr
        elif value is False: newattrs = newattrs &amp; ~attr
    set(A, a)
    set(S, s)
    set(H, h)
    set(R, r)
    set(I, i if i is None else not i)
    # optional add more attributes here, see
    # https://docs.python.org/3/library/stat.html#stat.FILE_ATTRIBUTE_ARCHIVE

    # write the new attributes if they changed
    if newattrs != attrs:
        if not kernel32.SetFileAttributesW(entry.path, newattrs):
            raise WinError(get_last_error())

    # return an info tuple
    return (
        bool(newattrs &amp; A),
        bool(newattrs &amp; S),
        bool(newattrs &amp; H),
        bool(newattrs &amp; R),
        not bool(newattrs &amp; I)
    )

if __name__ == '__main__':
    example_usage()
</code></pre>
<p><strong>Output</strong>:</p>
<pre><code>just read the ashri attributes:
C:\test\hidden.txt True False True False True
C:\test\normal.txt True False False False True
C:\test\readonly.txt True False False True True
C:\test\systemfile.txt True True False False True

set the readonly attribute on each entry:
C:\test\hidden.txt True False True True True
C:\test\normal.txt True False False True True
C:\test\readonly.txt True False False True True
C:\test\systemfile.txt True True False True True

set attributes more than once on the same entry:
C:\test\hidden.txt False False False False False
C:\test\hidden.txt True True True True True
C:\test\normal.txt False False False False False
C:\test\normal.txt True True True True True
C:\test\readonly.txt False False False False False
C:\test\readonly.txt True True True True True
C:\test\systemfile.txt False False False False False
C:\test\systemfile.txt True True True True True
</code></pre>
</div>
<span class="comment-copy">File attributes are stored as a bitmap in a 32-bit number, with each bit corresponding to an attribute. Bit 0 is <code>2**0 == 1</code>. Bit 1 is <code>2**1 == 2</code>, and so on. Here's the complete list of <a href="https://msdn.microsoft.com/en-us/library/gg258117" rel="nofollow noreferrer">file attribute constants</a>. To check for an attribute use a bitwise AND (i.e. operator <code>&amp;</code>). For example: <code>readonly = attrs &amp; FILE_ATTRIBUTE_READONLY</code>. To add an attribute, use a bitwise OR (i.e. operator <code>|</code>). For example: <code>attrs  |= FILE_ATTRIBUTE_READONLY</code>.</span>
<span class="comment-copy">For reading, Python 3.5+ <code>stat</code> has <a href="https://docs.python.org/3/library/os.html#os.stat_result.st_file_attributes" rel="nofollow noreferrer"><code>st_file_attributes</code></a>, and the attribute constants are defined in the <a href="https://docs.python.org/3/library/stat.html#stat.FILE_ATTRIBUTE_ARCHIVE" rel="nofollow noreferrer">stat module</a>. The fastest way to stat all of the files in a directory in 3.5 is to use <a href="https://docs.python.org/3/library/os.html#os.scandir" rel="nofollow noreferrer"><code>os.scandir</code></a>.</span>
<span class="comment-copy">For writing file attributes you'll have to use ctypes to call <a href="https://msdn.microsoft.com/en-us/library/aa365535" rel="nofollow noreferrer"><code>SetFileAttributesW</code></a>. For example: <code>kernel32 = ctypes.WinDLL('kernel32', use_last_error=True);</code> <code>if not kernel32.SetFileAttributesW(u"path\\to\\file", attrs): raise ctypes.WinError(ctypes.get_last_error())</code>. Make sure the path is a Unicode string if you're using Python 2.</span>
<span class="comment-copy">@eryksun Thank you so much, that was helpful!</span>
<span class="comment-copy">Some suggestions. Load <code>kernel32</code> only once as a module global. In <code>set</code>, replace <code>attrib ^ 4294967295</code> with <code>~attrib</code>. In <code>get</code>, replace <code>not not (attrs &amp; what)</code> with <code>bool(attrs &amp; what)</code>.</span>
<span class="comment-copy">The code in the question has <code>i=None</code>. That corresponds to <code>FILE_ATTRIBUTE_NOT_CONTENT_INDEXED</code>, but the attribute is defined negatively. You can set the inverted value, e.g. <code>not_i = i if i is None else not i</code>. For <code>get</code> the tuple needs a flag value to indicate that the value of <code>'I'</code> is the logical negation of <code>attrs &amp; FILE_ATTRIBUTE_NOT_CONTENT_INDEXED</code>.</span>
<span class="comment-copy">Also, in the question you use <code>/L</code> in the <code>attrib</code> command line. So the stat call should be <code>dirEntry.stat(follow_symlinks=False)</code>.</span>
<span class="comment-copy">You're welcome. Is this performing significantly better for a directory with a lot of files?</span>
<span class="comment-copy">i just tested it on a directory with 1000 files, measuring it with timeit (one run). Reading and writing file attributes: 5.6 seconds versus 0.12 seconds - 47 times faster. Reading file attributes: 5.6 seconds versus 0.0065 seconds - 862 times faster. Thats a wow :)</span>
