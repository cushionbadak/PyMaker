<div class="post-text" itemprop="text">
<p>I’m looking into implementing a new event loop to plug into <code>asyncio</code> based on existing run loop implementations, such as Cocoa’s <code>NSRunLoop</code> and Qt’s <code>QEventLoop</code>. but find it difficult to to pick a place to start.</p>
<p>The documentation says that the system is designed to be pluggable, but nowhere does it say exactly <em>how</em> this can be done. Should I start with <code>AbstractEventLoop</code>, or <code>BaseEventLoop</code>? What method does what, and what components do I need to provide? The only alternative implementation I find useful is <a href="https://github.com/MagicStack/uvloop" rel="noreferrer">uvloop</a>, but find it difficult to understand because it relies heavily on Cython and libuv, which I am not familiar with.</p>
<p>Is there some kind of a write-up on how the event loop implementation is done, and how a custom one can be made? Or a less involved implementation I can wrap my head around more quickly? Thanks for any pointers.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/asyncio-eventloop.html#base-event-loop" rel="noreferrer">documentation</a> says to inherit from <code>AbstractEventLoop</code>.</p>
<p>For the rest of your question, I didn't find the documentation very clear, but the <a href="https://github.com/python/cpython/blob/master/Lib/asyncio/base_events.py" rel="noreferrer">source code</a> for the concrete event loop in <code>asyncio</code> was helpful. I've written up a
<a href="https://gist.github.com/damonjw/35aac361ca5d313ee9bf79e00261f4ea" rel="noreferrer">pretty minimal example</a> of inheriting from <code>AbstractEventLoop</code> to create an event driven simulator.</p>
<p>The main things that I'd have liked to be told are</p>
<ul>
<li><p>Implement <code>create_task</code>. The end-user schedules a coroutine using <code>asyncio.ensure_future(coro())</code>, but that just calls your loop's <code>create_task</code> method. It doesn't need to be anything more than 
<code>def create_task(self, coro): return asyncio.Task(coro, loop=self)</code>.</p></li>
<li><p>Implement <code>call_soon</code>, <code>call_at</code> and <code>call_later</code>. These are invoked by the end-user to schedule a plain callback function. They are also invoked by the async/await system automatically, whenever the end-user schedules a coroutine.</p></li>
<li><p>If a regular callback raises an exception, it goes to your loop's <code>call_exception_handler</code> method. If a coroutine raises an exception, the exception lives in some asynchronous never-never land, and you have to <a href="https://docs.python.org/3/library/asyncio-dev.html#detect-exceptions-never-consumed" rel="noreferrer">catch it there</a>.</p></li>
<li><p>Look up the <a href="https://github.com/python/cpython/blob/master/Lib/asyncio/events.py" rel="noreferrer">source code for <code>AbstractEventLoop</code></a> to see all the other methods that you should be overriding. Bonus: somewhat helpful comments.</p></li>
</ul>
</div>
