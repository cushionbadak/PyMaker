<div class="post-text" itemprop="text">
<p>I'm trying to compare pairs of students in a database table.
My database table is as follows:</p>
<pre><code>    id | edu
    1  | 1
    2  | 1
    3  | 2
    4  | 2
</code></pre>
<p>I compare a pair of students at a time and if they have similar edu code I input them to a list with their id's as 1 if not 0.
My code is as follows:</p>
<pre><code>    #getting edu info
    data=curr.execute('select id,edu from student_details')
    result = curr.fetchall()
    mydic1=dict(result)

    data2=curr.execute('select id,edu from student_details ')
    result2 = curr.fetchall()
    mydic2=dict(result2)

    looping=curr.execute('select count(id) from student_details where id &lt;= 4')
    loop_times = curr.fetchall()
    count = int(loop_times[0][0])

    count = count + 1
    listOflist=[]
    x=0
    for i in range(1,count):
        row = [] 
        for x in range(0,i):
            row.append(0)
        for j in range(i+1, count):
            if mydic1[i]==mydic2[j]:
               row.append(1)
            else:
               row.append(0)
        listOflist.append(row)
      print edu
</code></pre>
<p>This prints the output according to the way I wanted as follows:</p>
<pre><code>     [[0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 0]]
</code></pre>
<p>But I don't know whether this is the most efficient way of comparing database records in python. Any suggestions for improvements are welcome.</p>
</div>
<div class="post-text" itemprop="text">
<p>One way would be to use <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow"><code>defaultdict</code></a> and to create a dictionary where it has a list of student numbers for each “edu” number. So that the result is similar to this:</p>
<pre><code>edu_map == {1: [1, 2], 2: [3, 4]}
</code></pre>
<p>The basic idea is that you iterate over each entry in the table and add the student's number to the “edu” number in the resulting dict:</p>
<pre><code>edu_map = defaultdict(list)
for stud, edu in mydic1.items():
    edu_map[edu] += [stud]
</code></pre>
<p>The reason for <code>defaultdict</code> is that it automatically creates a new dictionary entry (in this case of an empty list) when it is requested but doesn't exist. So you don't need to check <code>if edu not in edu_map</code> and then add an empty list, because <code>defaultdict</code> does that for you.</p>
<p>To convert this result in a list like yours, you can go through each student again and get their “edu” number and then use the numbers in the <code>edu_map</code> to get a list of that:</p>
<pre><code>result = []
for stud, edu in mydic1.items():
    stud_in_edu = edu_map[edu]
    stud_in_edu = [1 if other_stud != stud and other_stud in stud_in_edu else 0
                   for other_stud in range(len(mydic1))]
    result.append(stud_in_edu)
</code></pre>
<p>This assumes that <code>mydic1</code> only contains valid entries. There is no need to additionally count them in a separate SQL query if you already have all entries.</p>
</div>
<span class="comment-copy"><code>mydic1</code> and <code>mydic2</code> are the same, so you can remove lines 6-8 and use <code>mydic1</code> in the if condition. Also it would be helpful if you could explain what the resulting list shows. Is it intentional that the second entry isn't <code>[1, 0, 0, 0]</code> for example?</span>
<span class="comment-copy">Thanks for the suggestion and yes it's intentional.</span>
<span class="comment-copy">In that case my answer should actually do what you want to do.</span>
<span class="comment-copy">Thanks a lot for this suggestion. I learnt a different aspect via this answer.</span>
<span class="comment-copy">It certainly depends on what the end result should be. For example the <code>edu_map</code> already contains the same information but in a different way.</span>
