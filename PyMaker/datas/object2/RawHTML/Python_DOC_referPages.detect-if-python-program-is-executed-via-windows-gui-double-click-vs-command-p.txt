<div class="post-text" itemprop="text">
<p><strong>Background</strong><br/>
I have a Python 3.5 console program compiled into a Windows executable via pyinstaller.</p>
<p><strong>Question</strong> </p>
<ul>
<li>When executed via a command prompt, I'd like my program to run with whatever arguments were supplied (possibly none).  </li>
<li>When executed via the operating system's GUI (i.e. by double-clicking the .exe in Windows Explorer on Windows, etc) I'd like my program to prompt the user for input.  I also need my program to pause before exiting so the user can read the output.</li>
</ul>
<p>How do I detect these different scenarios?</p>
<p><strong>Constraints</strong> </p>
<ol>
<li>The executable must be able to run on a bare-bones (i.e. fresh install) Windows/RedHat machine.</li>
<li>The <em>compiled</em> executable must be a single file and may not rely on other files not packaged inside the compiled executable (pyinstaller allows files to be packaged inside the compiled executable).</li>
<li>The program may depend on 3rd party python packages.</li>
</ol>
<p><strong>Things I've Tried</strong></p>
<ul>
<li><p><code>sys.stdin.isatty()</code><br/>
<a href="https://stackoverflow.com/a/3818551/3508142">https://stackoverflow.com/a/3818551/3508142</a><br/>
<code>os.isatty(sys.stdout.fileno())</code><br/>
<a href="https://stackoverflow.com/a/6108504/3508142">https://stackoverflow.com/a/6108504/3508142</a><br/>
These always return <code>True</code> on Windows.</p></li>
<li><p>Searching StackOverflow / the internet:<br/>
<a href="https://stackoverflow.com/questions/9839240/how-to-determine-if-python-script-was-run-via-command-line">How to determine if Python script was run via command line?</a><br/>
<a href="https://stackoverflow.com/questions/1285024/how-can-i-check-to-see-if-a-python-script-was-started-interactively?noredirect=1&amp;lq=1">How can I check to see if a Python script was started interactively?</a><br/>
As far as I understand, a program is running <em>interactively</em> if the user started it regardless of whether it was started from a command prompt or the GUI.</p></li>
<li><p>I also considered checking to see if the parent process is <code>cmd.exe</code> or <code>explorer.exe</code>.  However, starting the program via the Windows run command will make <code>explorer.exe</code> the parent process.  Starting the program via Task Manager will make Task Manager the parent process.  These are edge cases that I <em>could</em> live with, but obviously I'd prefer a more robust solution.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<h2>Count processes attached to the console</h2>
<p><a href="https://docs.microsoft.com/en-us/windows/console/getconsoleprocesslist" rel="nofollow noreferrer">Windows API documentation for GetConsoleProcessList</a></p>
<pre><code>import ctypes

# Load kernel32.dll
kernel32 = ctypes.WinDLL('kernel32', use_last_error=True)
# Create an array to store the processes in.  This doesn't actually need to
# be large enough to store the whole process list since GetConsoleProcessList()
# just returns the number of processes if the array is too small.
process_array = (ctypes.c_uint * 1)()
num_processes = kernel32.GetConsoleProcessList(process_array, 1)
# num_processes may be 1 if your compiled program doesn't have a launcher/wrapper.
if num_processes == 2:
    input('Press ENTER to continue...')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Turns out there is a simple and concise way to determine this on Windows.
<a href="https://stackoverflow.com/a/14394730/3508142">https://stackoverflow.com/a/14394730/3508142</a></p>
<p>The <code>PROMPT</code> environment variable defines the prompt text in a command prompt.
<a href="https://ss64.com/nt/prompt.html" rel="nofollow noreferrer">https://ss64.com/nt/prompt.html</a></p>
<pre><code># If the program was started via the GUI (i.e. by double-clicking the executable),
# then prevent the console window from closing automatically.
if os.name == 'nt' and 'PROMPT' not in os.environ:
    input('Press ENTER to continue...')
</code></pre>
</div>
<span class="comment-copy">I assume your executable is a console application since <code>sys.stdin.isatty()</code> is true. By default it will inherit the parent's console if the parent has one. You could prompt the user if there are no command-line arguments and the parent is <i>not</i> attached to your console. Call <a href="https://docs.microsoft.com/en-us/windows/console/getconsoleprocesslist" rel="nofollow noreferrer"><code>GetConsoleProcessList</code></a> to get the PIDs of processes attached to the console. We can use ctypes or PyWin32 to call this function.</span>
<span class="comment-copy">@eryksun thanks for the response.  Yes, my executable is a console app.  I'm not familiar with Windows API calls; perhaps you could post a full answer with an example?</span>
<span class="comment-copy">That's unreliable. There could be a custom <code>PROMPT</code> variable defined in the user or system environment variables. There is no environment variable we can rely on for this. Use the console API to ensure that yours is the only process attached to the console. (Or maybe also the frozen executable if it unpacks to a temp directory.) Getting the number of processes is straight forward, e.g. <code>kernel32 = ctypes.WinDLL('kernel32', use_last_error=True);</code> <code>unused = (ctypes.c_uint * 1)();</code> <code>num_proceses = kernel32.GetConsoleProcessList(unused, 1)</code>.</span>
<span class="comment-copy">@eryksun, I do agree that a custom <code>PROMPT</code> variable definition could cause a false positive. However, doing so would also change the user's <a href="https://ss64.com/nt/prompt.html" rel="nofollow noreferrer">prompt text</a>, which seems unlikely so I'm fine with this risk. As far as using ctypes goes, it seems to simply count the number of ancestor processes. If my program is executed by another program, the value of <code>num_processes</code> will be inflated. As such, it seems like your approach can't distinguish between GUI and command prompt execution in all cases.  Am I missing something?  Perhaps a full answer could clarify things?</span>
<span class="comment-copy">The code snippet I gave you tells you how many processes are attached to the console. It has nothing to do with ancestor processes. If you know your script should attach 1 process (or maybe 2 if there's a launcher) to the console, then additional processes at startup means the console was inherited, so just use whatever command line options are provided, if any, and don't worry about keeping the console alive. Otherwise prompt for input, and on exit do something like <code>subprocess.Popen('cmd.exe')</code> to keep the console alive.</span>
<span class="comment-copy">You are correct that <code>GetConsoleProcessList</code> returns the number of processes attached to the console, not ancestor processes. Thanks for that clarification. Also, for clarification my compiled program does appear to have a separate launcher process. I did some more investigating and realized that if <code>num_processes == 2</code> then my program was executed from the GUI, otherwise a higher number means it is either running from a command prompt or being called by a script (and I agree that in this case it shouldn't pause). Thanks @eryksun for your help, I'll revise my answer to include your suggestion.</span>
