<div class="post-text" itemprop="text">
<pre><code>a=[1,2,3,4]
b=a.index(6)
del a[b]
print a
</code></pre>
<p>The above shows the following error:</p>
<pre class="lang-none prettyprint-override"><code>Traceback (most recent call last):
  File "D:\zjm_code\a.py", line 6, in &lt;module&gt;
    b=a.index(6)
ValueError: list.index(x): x not in list
</code></pre>
<p>So I have to do this:</p>
<pre><code>a=[1,2,3,4]
try:
    b=a.index(6)
    del a[b]
except:
    pass
print a
</code></pre>
<p>But is there not a simpler way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>To remove an element's first occurrence in a list, simply use <code>list.remove</code>:</p>
<pre><code>&gt;&gt;&gt; a = ['a', 'b', 'c', 'd']
&gt;&gt;&gt; a.remove('b')
&gt;&gt;&gt; print a
['a', 'c', 'd']
</code></pre>
<p>Mind that it does not remove all occurrences of your element. Use a list comprehension for that.</p>
<pre><code>&gt;&gt;&gt; a = [10, 20, 30, 40, 20, 30, 40, 20, 70, 20]
&gt;&gt;&gt; a = [x for x in a if x != 20]
&gt;&gt;&gt; print a
[10, 30, 40, 30, 40, 70]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Usually Python will throw an Exception if you tell it to do something it can't so you'll have to do either:</p>
<pre><code>if c in a:
    a.remove(c)
</code></pre>
<p>or:</p>
<pre><code>try:
    a.remove(c)
except ValueError:
    pass
</code></pre>
<p>An Exception isn't necessarily a bad thing as long as it's one you're expecting and handle properly.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do</p>
<pre><code>a=[1,2,3,4]
if 6 in a:
    a.remove(6)
</code></pre>
<p>but above need to search 6 in list a 2 times, so try except would be faster</p>
<pre><code>try:
    a.remove(6)
except:
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Consider:</p>
<pre><code>a = [1,2,2,3,4,5]
</code></pre>
<p>To take out all occurrences, you could use the filter function in python.
For example, it would look like:</p>
<pre><code>a = list(filter(lambda x: x!= 2, a))
</code></pre>
<p>So, it would keep all elements of a != 2.</p>
<p>To just take out one of the items use </p>
<pre><code>a.remove(2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's how to do it inplace (without list comprehension):</p>
<pre><code>def remove_all(seq, value):
    pos = 0
    for item in seq:
        if item != value:
           seq[pos] = item
           pos += 1
    del seq[pos:]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you know what value to delete, here's a simple way (as simple as I can think of, anyway):</p>
<pre><code>a = [0, 1, 1, 0, 1, 2, 1, 3, 1, 4]
while a.count(1) &gt; 0:
    a.remove(1)
</code></pre>
<p>You'll get
<code>[0, 0, 2, 3, 4]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Another possibility is to use a set instead of a list, if a set is applicable in your application.</p>
<p>IE if your data is not ordered, and does not have duplicates, then</p>
<pre><code>my_set=set([3,4,2])
my_set.discard(1)
</code></pre>
<p>is error-free.</p>
<p>Often a list is just a handy container for items that are actually unordered.  There are questions asking how to remove all occurences of an element from a list.  If you don't want dupes in the first place, once again a set is handy.</p>
<pre><code>my_set.add(3)
</code></pre>
<p>doesn't change my_set from above.</p>
</div>
<div class="post-text" itemprop="text">
<p>As stated by numerous other answers, <code>list.remove()</code> will work, but throw a <code>ValueError</code> if the item wasn't in the list. With python 3.4+, there's an interesting approach to handling this, using the <a href="https://docs.python.org/3.6/library/contextlib.html#contextlib.suppress" rel="noreferrer">suppress contextmanager</a>:</p>
<pre><code>from contextlib import suppress
with suppress(ValueError):
    a.remove('b')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Finding a value in a list and then deleting that index (if it exists) is easier done by just using list's remove method:</p>
<pre><code>&gt;&gt;&gt; a = [1, 2, 3, 4]
&gt;&gt;&gt; try:
...   a.remove(6)
... except ValueError:
...   pass
... 
&gt;&gt;&gt; print a
[1, 2, 3, 4]
&gt;&gt;&gt; try:
...   a.remove(3)
... except ValueError:
...   pass
... 
&gt;&gt;&gt; print a
[1, 2, 4]
</code></pre>
<p>If you do this often, you can wrap it up in a function:</p>
<pre><code>def remove_if_exists(L, value):
  try:
    L.remove(value)
  except ValueError:
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This example is fast and will delete all instances of a value from the list:</p>
<pre><code>a = [1,2,3,1,2,3,4]
while True:
    try:
        a.remove(3)
    except:
        break
print a
&gt;&gt;&gt; [1, 2, 1, 2, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your elements are distinct, then a simple set difference will do.</p>
<pre><code>c = [1,2,3,4,'x',8,6,7,'x',9,'x']
z = list(set(c) - set(['x']))
print z
[1, 2, 3, 4, 6, 7, 8, 9]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>in one line:</p>
<pre><code>a.remove('b') if 'b' in a else None
</code></pre>
<p>sometimes it usefull</p>
</div>
<div class="post-text" itemprop="text">
<p>We can also use .pop:</p>
<pre><code>&gt;&gt;&gt; lst = [23,34,54,45]
&gt;&gt;&gt; remove_element = 23
&gt;&gt;&gt; if remove_element in lst:
...     lst.pop(lst.index(remove_element))
... 
23
&gt;&gt;&gt; lst
[34, 54, 45]
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Overwrite the list by indexing everything except the elements you wish to remove</p>
<pre><code>&gt;&gt;&gt; s = [5,4,3,2,1]
&gt;&gt;&gt; s[0:2] + s[3:]
[5, 4, 2, 1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With a for loop and a condition:</p>
<pre><code>def cleaner(seq, value):    
    temp = []                      
    for number in seq:
        if number != value:
            temp.append(number)
    return temp
</code></pre>
<p>And if you want to remove some, but not all:</p>
<pre><code>def cleaner(seq, value, occ):
    temp = []
    for number in seq:
        if number == value and occ:
            occ -= 1
            continue
        else:
            temp.append(number)
    return temp
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code> list1=[1,2,3,3,4,5,6,1,3,4,5]
 n=int(input('enter  number'))
 while n in list1:
    list1.remove(n)
 print(list1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Say for example, we want to remove all 1's from x. This is how I would go about it:</p>
<pre><code>x = [1, 2, 3, 1, 2, 3]
</code></pre>
<p>Now, this is a practical use of my method:</p>
<pre><code>def Function(List, Unwanted):
    [List.remove(Unwanted) for Item in range(List.count(Unwanted))]
    return List
x = Function(x, 1)
print(x)
</code></pre>
<p>And this is my method in a single line:</p>
<pre><code>[x.remove(1) for Item in range(x.count(1))]
print(x)
</code></pre>
<p>Both yield this as an output:</p>
<pre><code>[2, 3, 2, 3, 2, 3]
</code></pre>
<p>Hope this helps. 
PS, pleas note that this was written in version 3.6.2, so you might need to adjust it for older versions.</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe your solutions works with ints, but It Doesnt work for me with dictionarys.</p>
<p>In one hand, remove() has not worked for me. But maybe it works with basic Types. I guess the code bellow is also the way to remove items from objects list.</p>
<p>In the other hand, 'del' has not worked properly either. In my case, using python 3.6: when I try to delete an element from a list in a 'for' bucle with 'del' command, python changes the index in the process and bucle stops prematurely before time. It only works if You delete element by element in <strong>reversed</strong> order. In this way you dont change the pending elements array index when you are going through it</p>
<p>Then, Im used:</p>
<pre><code>c = len(list)-1
for element in (reversed(list)):
    if condition(element):
        del list[c]
    c -= 1
print(list)
</code></pre>
<p>where 'list' is like [{'key1':value1'},{'key2':value2}, {'key3':value3}, ...]</p>
<p>Also You can do more pythonic using enumerate:</p>
<pre><code>for i, element in enumerate(reversed(list)):
    if condition(element):
        del list[(i+1)*-1]
print(list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>arr = [1, 1, 3, 4, 5, 2, 4, 3]

# to remove first occurence of that element, suppose 3 in this example
arr.remove(3)

# to remove all occurences of that element, again suppose 3
# use something called list comprehension
new_arr = [element for element in arr if element!=3]

# if you want to delete a position use "pop" function, suppose 
# position 4 
# the pop function also returns a value
removed_element = arr.pop(4)

# u can also use "del" to delete a position
del arr[4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This removes all instances of <code>"-v"</code> from the array <code>sys.argv</code>, and does not complain if no instances were found:</p>
<pre><code>while "-v" in sys.argv:
    sys.argv.remove('-v')
</code></pre>
<p>You can see the code in action, in a file called <code>speechToText.py</code>:</p>
<pre><code>$ python speechToText.py -v
['speechToText.py']

$ python speechToText.py -x
['speechToText.py', '-x']

$ python speechToText.py -v -v
['speechToText.py']

$ python speechToText.py -v -v -x
['speechToText.py', '-x']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>syntax: <code>lst.remove(x)</code></p>
<p>For example:</p>
<pre class="lang-python prettyprint-override"><code>lst = ['one', 'two', 'three', 'four', 'two']

lst.remove('two') #it will remove first occurence of 'two' in a given list
del lst[2] #delete item by index value

print(lst)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes. This is what I found to be most useful:</p>
<pre><code>import sys

a = [1, 2, 3, 4]

y = 0

if y &lt; 1:
      a.remove(1)
      print len(a)
else:
    sys.exit()
</code></pre>
<p>Now <code>.remove()</code> only takes one argument, so you can only remove one integer from your list.</p>
</div>
<span class="comment-copy">You calculate the index of 6 in your list. But 6 is not in your list ... so what's supposed to happen? :)</span>
<span class="comment-copy">this has nothing to do with deleting a value in a list, since your code does not reach the del statement.  Maybe you should retitle it "how do I get the index of a value that is not in a list.  Obvious answer - you can't.</span>
<span class="comment-copy">@Dave Well, not really. He wants to delete an item from the list regardless of whether it exists or not, not to get the index for a nonexistent item. The question is well asked.</span>
<span class="comment-copy">Fails if the element is not in the list. :)</span>
<span class="comment-copy">@ibz list comprehension does not fail even if the element isn't in the list, does it?</span>
<span class="comment-copy">To clarify for anyone skimming, it "fails" in the sense that it raises a ValueError exception.</span>
<span class="comment-copy">++ for comment, that #2 is not the position! Missed that the first few times.</span>
<span class="comment-copy">The list comprehension change the list reference so if there is a copy of the reference somewhere, the removal will not follow.</span>
<span class="comment-copy">Prevention is better than cure. If you can check for exceptional conditions first (example a), you should.</span>
<span class="comment-copy">Whilst this is true in other languages, in Python it is "easier to ask for forgiveness than permission." <a href="http://docs.python.org/2/glossary.html#term-eafp" rel="nofollow noreferrer">docs.python.org/2/glossary.html#term-eafp</a></span>
<span class="comment-copy">@Gusdor: if the list is shared between threads then <code>a.remove(c)</code> might fail anyway despite the <code>if c in a</code> check (<code>a</code> could be modified in another thread after the <code>c in a</code> check but before the <code>a.remove(c)</code> call). <code>try/except</code> or locks could be used to avoid the race condition.</span>
<span class="comment-copy">@J.F.Sebastian if a list is shared between threads and you are not applying critical sections then you have bigger problems.</span>
<span class="comment-copy">@Gusdor, the Pythonique idiom is to try without checking and catch the exception if it occurs. It is more efficient (only one lookup instead of two), albeit a little uglier</span>
<span class="comment-copy">Excellent. You explained why the second option is the best. Thank you.</span>
<span class="comment-copy">Why do you wrap <a href="https://docs.python.org/2/library/functions.html#filter" rel="nofollow noreferrer"><code>filter()</code></a> in another <code>list()</code>? According to the manual, it already returns a list.</span>
<span class="comment-copy">@OlafDietsche In Python 3.x, it returns a filter object (in 2.x, it returns a list), so I have to cast "a" to a list for it to have any functionality.</span>
<span class="comment-copy">Thank you for this explanation. I didn't look at Python 3.</span>
<span class="comment-copy">Very clever - I really like this - unfortunately it seems to be as inefficient as the most popular answer. gil's solution is actually much faster for giant lists with only a few occurrences of the value you wish to remove.</span>
<span class="comment-copy">@Larold The fastest way would be a separate question. My money are on list comprehension in the general case. This solution should perform really well if the value is frequent in the input list and list comprehension is not used. Try Pypy, numpy data in Cython. [@Gill's answer is <code>O(n*n)</code> unnecessarily (compare 1e6 and 1e12 – you don't want to risk the latter). <code>while 1: L.remove(value)</code> and return on <code>ValueError</code> might work well with a few  <code>value</code>s or small lists in CPython.</span>
<span class="comment-copy">Why not use <code>while 1 in a:</code> as the loop structure?</span>
<span class="comment-copy">This is <code>O(n^2)</code> where a comprehension would be <code>O(n)</code>.</span>
<span class="comment-copy">Of course @MadPhysicist is right, and TerminalDilettante's version is a lot more pythonic, even if we don't care about performance. 2013 was I just began to learn Python and nowadays I'm quite often ashamed of what I wrote back then.</span>
<span class="comment-copy">if you do this you should really only <code>break</code> on <code>except ValueError</code>.</span>
<span class="comment-copy">If your elements are distinct <i>and you don’t care about order</i>.</span>
<span class="comment-copy">It's without using filter function</span>
<span class="comment-copy">@JohnColeman I'm merely stating a solution of which the question asks. I found it "most useful" for myself, you have the right to disagree.</span>
<span class="comment-copy">The accepted answer from years ago already mentioned <code>remove</code>, so you are adding nothing new there, the only new thing is that for no apparent reason you brought in <code>sys.exit()</code>. Furthermore, your method crashes if the target item is not in the list, and the entire point of the OP's question was how to remove elements without crashing when the method was applied to an element not in the list.</span>
