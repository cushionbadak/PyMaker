<div class="post-text" itemprop="text">
<p>I've been looking at this for awhile and been going through my head on how it works.
I know the first part of it but when I get to the counter I get stuck at </p>
<pre><code>    hr, sc = divmod(counter, 3600)
    mn, sc = divmod(sc, 60)
</code></pre>
<p>I've looked into divmod() but I am still confused on what it actually does. And why does sc work here when it isn't defined anywhere else?</p>
<p>To summarize:</p>
<p>1: What is divemod()
2: What does the above code do in the below countdown timer and how does it do it?</p>
<pre><code>hours= int(input("Hours: "))
minutes= int(input("Minutes: "))
sec= int(input("Seconds: "))

counter=hours*3600+minutes*60+sec
mins=int(counter/60)
hr=int(mins/60)

while counter &gt; 0:
    counter-=1
    hr, sc = divmod(counter, 3600)
    mn, sc = divmod(sc, 60)
    print ('%d hours, %d minutes and %d seconds' % (hr, mn, sc))
    mins=int(counter/60)
    hr=int(mins/60)
    time.sleep(1)
</code></pre>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Divmod is a function that performs a division and returns two values, the integer quotient and the remainder.  It technically returns a two number tuple and that gets unpacked into the two variables.</p>
<p>For example, <code>divmod(10, 3)</code> returns <code>(3, 1)</code>, where 3 is the result of <code>10 / 3</code> and 1 is the result of <code>10 % 3</code> (10 mod 3).</p>
<p>Saying <code>a, b = divmod(10, 3)</code> is the equivalent of <code>a, b = (3, 1)</code> which assigns 3 to <code>a</code> and 1 to <code>b</code>.</p>
<p>In the case of the timer, this is taking a value of seconds and breaking out the amount of seconds that correspond to quantities of hours and minutes.  Every 3600 seconds is an hour and every 60 seconds (after the hours are subtracted) are minutes.</p>
<p>So, when the number of seconds remaining in the timer is 10,000, the first divmod says, "This is actually 2 hours and 2,800 seconds," and the second divmod, performed on 2,800, says, "That is actually 46 minutes and 40 seconds."  Put together, these two lines say "10,000 seconds is actually 2 hours, 46 minutes, and 40 seconds."</p>
<hr/>
<p>Aside 1, the code performing these computations takes non-zero time, so this countdown timer will actually be slower than desired because it takes marginally more than a second to count down each second (it sleeps for a second and then performs some computation).</p>
<hr/>
<p>Aside 2, the code you wrote could be reduced to the following:</p>
<pre><code>hours = int(input("Hours: "))
minutes = int(input("Minutes: "))
seconds = int(input("Seconds: "))

counter = hours*3600 + minutes*60 + seconds

while counter &gt; 0:
    counter -= 1
    hours, seconds = divmod(counter, 3600)
    minutes, seconds = divmod(seconds, 60)
    print('%d hours, %d minutes and %d seconds' % (hours, minutes, seconds))
    time.sleep(1)
</code></pre>
<hr/>
<p>Aside 3, beware of the input function.  If the user types an expression rather than a number, it is evaluated by the python interpreter.  See <a href="https://stackoverflow.com/questions/7709022/is-it-ever-useful-to-use-pythons-input-over-raw-input">Is it ever useful to use Python's input over raw_input?</a></p>
<p>You are already casting the results of input to integers.  USE <code>raw_input</code> INSTEAD OF <code>input</code>!!!!! (Unless this is python3, in which case <code>raw_input</code> has been renamed <code>input</code>).  For python2, do the following:</p>
<pre><code>hours = int(raw_input("Hours: "))
minutes = int(raw_input("Minutes: "))
seconds = int(raw_input("Seconds: "))
</code></pre>
</div>
<span class="comment-copy">Hint: <code>divmod</code> performs division on two numbers, and returns the quotient and remainder.</span>
<span class="comment-copy">What do you mean by <code>And why does sc work here when it isn't defined anywhere else?</code>? <code>sc</code> is defined in the line <code>hr, sc = divmod(counter, 3600)</code>. That line is defining two variables. Does that make it make more sense?</span>
<span class="comment-copy">Is it just the syntax where you have two variables on the left side? Those are just matched to the two on the right side of the equals sign.</span>
<span class="comment-copy">Related: <a href="http://stackoverflow.com/questions/3951946/what-is-the-name-of-a-foo-bar-foo-bar-feature">What is the name of a <code>[foo, bar] = [“foo”, “bar”]</code> feature?</a></span>
<span class="comment-copy">@user3763447: That is called "tuple unpacking". You can read more in the <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow noreferrer">tutorial</a>.</span>
<span class="comment-copy">Thank you for the insightful answer. It explained everything beautifully.   Also, so you're saying this timer will be off by a second? If so do you have an idea of a better timer that prints it out similarly? ex: 1 hour, 20 minutes, 30 seconds</span>
<span class="comment-copy">@user3763447 It's not that it will be off by a second.  It's that it will take something like 1.0005 seconds to count down each second (although that number could be very different depending on what system you run on and what else is running).</span>
<span class="comment-copy">@user3763447 To make an accurate timer, you want to store <code>timer_start = datetime.datetime.now()</code> at the beginning of the program and use the difference between the current time and <code>timer_start</code> instead of <code>counter</code>.  Alternatively, the <code>timeit</code> library has options other than <code>datetime</code>.</span>
