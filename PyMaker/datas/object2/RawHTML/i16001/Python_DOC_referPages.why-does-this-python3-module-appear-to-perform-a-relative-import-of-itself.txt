<div class="post-text" itemprop="text">
<p>If I create a module named 'json.py' with the following contents:</p>
<pre><code>#! python
import json as _json
JSONDecoder = _json.JSONDecoder
</code></pre>
<p>..shouldn't the 'import json as _json' statement perform an absolute import, and therefore provide the python standard-lib JSON module?</p>
<p>..instead, if I execute or import this module, I get:</p>
<pre>
$ python --version
Python 3.4.0
$ python relative_import/json.py 
Traceback (most recent call last):
  File "relative_import/json.py", line 3, in 
    import json as _json
  File "/home/silver/Projects/relative_import/json.py", line 6, in 
    JSONDecoder = _json.JSONDecoder
AttributeError: 'module' object has no attribute 'JSONDecoder'
$
</pre>
<p>..which shows that 'json' is importing itself (a relative import).  ..I imagine I'm missing something -- python's import system has always made natural and intuitive sense to me, but in this case I'm lost.</p>
<p><strong>Edit:</strong> I'm using python 3.4</p>
<p><strong>Edit:</strong> For anyone interested, this is what occurred:
I have a package which includes a module called 'json', which replaces the system 'json'.  This is fine (IMO), however, I also started a script that was in the same package folder (temporarily) but not meant to ultimately be a part of the same module.  Thus, the following occurred:</p>
<ul>
<li>I run my script, packagename/foo.py</li>
<li>python adds packagename folder to sys.path</li>
<li>foo.py imports packagename.json</li>
<li>packagename.json imports json (which would normally be the system json)</li>
<li>first entry on sys.path is the packagename folder, and 'json' is imported from there</li>
<li>my json.py continues loading after the import, and runs into errors (because it's dealing with itself, not the system json module)</li>
</ul>
<p>Solution:  Move the script to my package's 'bin' folder, or, if I want it to be a part of the package proper, use <code>python -m packagename.foo</code></p>
<p>Thank you, @Martijn Pieters.</p>
</div>
<div class="post-text" itemprop="text">
<p>It <em>is</em> doing an absolute import.</p>
<p>The directory the <em>main script</em> lives in is added to <code>sys.path</code>, and as a result the first <code>json</code> found is your script. You are running <code>python relative_import/json.py</code> and Python thus adds <code>relative_import/</code> to <code>sys.path</code>.</p>
<p>Note that the main script is named <code>__main__</code>, so <code>import json</code> does import the script file as a separate, new module object. Your code is in effect loaded twice.</p>
<p>See the <a href="https://docs.python.org/3/using/cmdline.html#interface-options" rel="nofollow"><em>Interface options</em> documentation</a>:</p>
<blockquote>
<p>If the script name refers directly to a Python file, the directory containing that file is added to the start of <code>sys.path</code>, and the file is executed as the <code>__main__</code> module.</p>
</blockquote>
</div>
<span class="comment-copy">Huh.  I was had thought that the only way to get a module from within your current package was to use <code>from . import y</code> or (if the package is available globally) <code>from mymodule import y</code>.  Thank you, this is the missing detail I needed.</span>
<span class="comment-copy">@BrianVisel: you don't have a package here though. The top-level script is <i>never</i> a package. Use the <code>-m</code> switch if you want to use a package as a script instead.</span>
<span class="comment-copy">@BrianVisel: only with a lot of pain. Basically, you don't name your scripts something that'll mask a library.</span>
<span class="comment-copy">@BrianVisel: you'd have to use the low-level functionality of the <a href="https://docs.python.org/3/library/importlib.html#module-importlib" rel="nofollow noreferrer"><code>importlib</code> module</a> to bypass the normal <code>sys.path</code> import lookup semantics.</span>
<span class="comment-copy">@BrianVisel: sure, but in that case you shouldn't try and run files in the package as a script. :-)</span>
