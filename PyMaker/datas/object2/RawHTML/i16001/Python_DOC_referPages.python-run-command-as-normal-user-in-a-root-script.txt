<div class="post-text" itemprop="text">
<p>I have a python script that is launched as root, I can't change it. </p>
<p>I would like to know if it's possible to exectute certain lines of this script (or all the script) as normal user (I don't need to be root to run this).</p>
<p>The reason is, I use notifications, and python-notify don't work in all machines in root (looks like this <a href="https://bugs.launchpad.net/ubuntu/+source/deja-dup/+bug/1159235" rel="nofollow">bug</a>)</p>
<p>So ,do you know if it's possible to change it, with a subprocess, or other?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I would like to know if it's possible to exectute certain lines of this script (or all the script) as normal user</p>
</blockquote>
<p>Yes, it's possible—and a good idea.</p>
<p>Python's <code>os</code> module has a group of functions to set the real, effective, and saved user and group id, starting with <a href="https://docs.python.org/3/library/os.html#os.setegid" rel="noreferrer"><code>setegid</code></a>. What exactly each of these does is up to your platform, as far as Python is concerned; it's just calling the C functions of the same names.</p>
<p>But POSIX defines what those functions do. See <a href="http://pubs.opengroup.org/onlinepubs/009695399/functions/setuid.html" rel="noreferrer"><code>setuid</code></a> and <a href="http://pubs.opengroup.org/onlinepubs/009695399/functions/seteuid.html" rel="noreferrer"><code>seteuid</code></a> for details, but the short version is: </p>
<ul>
<li>If you want to switch to a normal user and then switch back, use either <code>seteuid</code> or <code>setreuid</code>, to set just effective, or real and effective, but not saved UID. Then use the same function again to set them back to root.</li>
<li>If you want to run the whole script as a normal user and make sure you can't get root back, use <code>setresuid</code> instead, to set all three.</li>
</ul>
<p>If you're using Python 3.1 and earlier, you don't have all of these functions. You can still use <code>seteuid</code> to switch effective ID back and forth, but <code>setuid</code> will… well, it depends on your platform, but I think most modern platforms will change saved as well as real, meaning you can't get root back. If you read the linked POSIX doc, there are a bunch of caveats and complexities in the POSIX documentation. If you only care about one platform, you probably want to read your local manpages instead, rather than reading about all of the cases and then trying to figure out which one covers your platform.</p>
<blockquote>
<p>So ,do you know if it's possible to change it, with a subprocess, or other?</p>
</blockquote>
<p>That isn't necessary (at least on a conforming POSIX system), but it can make things easier or safer. You can use <code>subprocess</code>, <code>multiprocessing</code>, <code>os.fork</code>, or any other mechanism to launch a child process, which immediately uses <code>setuid</code> to drop privileges—or even <code>setresuid</code> to give up the ability to ever restore its privilege. When that child process is done with its task, it just exits.</p>
</div>
<div class="post-text" itemprop="text">
<p>you need <a href="https://docs.python.org/2/library/pwd.html#pwd.getpwnam" rel="nofollow">getpwnam</a> from <a href="https://docs.python.org/2/library/pwd.html#module-pwd" rel="nofollow">PWD</a> module , for access user-id by pass username and then with <a href="https://docs.python.org/2/library/os.html#os.setuid" rel="nofollow">os.setuid()</a> you can change the user and Run python script as another user . </p>
<pre><code>import pwd, os
uid = pwd.getpwnam('username')[2] #instead of index 2 you can use pw_uid Attribute
os.setuid(uid)
</code></pre>
<p>But Note that using <code>setuid</code> can make a enormous security hole . </p>
</div>
<div class="post-text" itemprop="text">
<p>If the script is running as <code>root</code>, you can use <code>os.setuid</code> to change the process's current UID to that of another user (irrevocably) or <code>os.seteuid</code> to change the process's current effective UID (and you can use it again afterwards to reset the EUID to <code>root</code>).</p>
<p>Note that <code>os.setuid</code> changes both the real and effective UID - this is the reason it is irrevocable.</p>
<p><code>os.seteuid</code> changes the effective UID. Since the real UID will still be <code>root</code>, you can still switch back the EUID to <code>root</code> later on in the script.</p>
</div>
<span class="comment-copy">Using <code>setuid</code> does not allow to change back later.</span>
<span class="comment-copy">Ok, thanks for your response. So, if I add this line at the beginning of my script: <code>os.setuid(1000)</code>, it should work ?</span>
<span class="comment-copy">@Guillaume: If you add that at the beginning of your main script, you will change to user 1000 and (on most platforms) not be able to get back to root later. Is that what you want?</span>
<span class="comment-copy">@abamert: I think I can use it as well I must try it. But I'm interessed too how to return in root mode. I will read again your response, because my english is not very good. :)</span>
<span class="comment-copy">@Guillaume: I've tried to make that clear with the two separate bullet points.</span>
<span class="comment-copy">Thank for your help. I can get the uid with this line: <code>uid = pwd.getpwnam('username').pw_uid</code></span>
<span class="comment-copy">Ok, with <code>[2]</code> it's works too.</span>
<span class="comment-copy">Why does <code>setuid</code> creates a security hole? Is it not recommend to use? @Kasrâmvd</span>
<span class="comment-copy"><code>setuid</code> isn't irrevocable on a system that supports saved user ID, or on a system that follows the older POSIX standard which mandated (or allowed, I forget which) the weird SysV behavior for <code>setuid</code> as root, and I don't think there are too many systems that use the newer standard but don't support saved UIDs.</span>
<span class="comment-copy">just tried on Linux kernel 3.16 - <code>setuid</code> cannot be called a second time to reset back to root.</span>
<span class="comment-copy">OK, reading more carefully… You're wrong that setting the real and effective makes it irrevocable (except the backwards-compat implementations, which Linux is not). But you're right that <code>setuid</code> is irrevocable—because it sets real, effective, <i>and saved</i> when run as root.</span>
<span class="comment-copy">Again, from Linux <code>seteuid</code> manpage: Unprivileged user processes may only set the effective user ID to the real user ID, the effective UID <i>or</i> saved set-user-ID. So, having the real UID as root is a sufficient condition. Well, that's the way I interpreted it, at least.</span>
<span class="comment-copy">A sufficient condition for what? Setting the real and effective to non-root without changing the saved means you can set the real or effective back to root, which means it's not irrevocable.</span>
