<div class="post-text" itemprop="text">
<p>Has the cell_contents call for closures in python changed? I understand that func_closure does not work and <code>__closure__</code> works.</p>
<pre><code>func.__closure__.cell_contents
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'tuple' object has no attribute 'cell_contents'
</code></pre>
<p>I am using Python 3.4.1.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Has the cell_contents call for closures in python changed?</p>
</blockquote>
<p><code>__closure__</code> is, and always has been, a tuple of cells (even back when it was called <code>func_closure</code>).</p>
<p>Each cell still has a <code>cell_contents</code> member. But the tuple, of course, does not.</p>
<p>So, what you want is probably one of these:</p>
<pre><code>func.__closure__[0].cell_contents

[cell.cell_contents for cell in func.__closure__]
</code></pre>
<p>It's worth noting that the details of <code>__closure__</code> are undocumented and an implementation-specific feature of the CPython implementation. While the <a href="https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy" rel="noreferrer">data model</a> defines <code>__closure__</code> as:</p>
<blockquote>
<p><code>None</code> or a tuple of cells that contain bindings for the function’s free variables.</p>
</blockquote>
<p>… it doesn't say anything about what those cells are, or that they have an attribute named <code>cell_contents</code>.</p>
<p>But in 3.3+, there's a documented way to get this information, <a href="https://docs.python.org/3/library/inspect.html#inspect.getclosurevars" rel="noreferrer"><code>inspect.getclosurevars</code></a>:</p>
<pre><code>&gt;&gt;&gt; inspect.getclosurevars(func)
ClosureVars(nonlocals={'i': 1}, globals={}, builtins={}, unbound=set())
</code></pre>
<p>If you want to know more than what this function returns, you may want to look at how it's implemented in your favorite interpreter (which is probably CPython, given that none of the other major interpreters support 3.3 yet). <code>inspect</code> is one of those modules that's designed to have helpful, readable source, so the docs link directly to <a href="https://hg.python.org/cpython/file/default/Lib/inspect.py#l1219" rel="noreferrer">the source code</a>. So you can see how it works—but it's basically what you'd expect; if <code>__closure__</code> isn't <code>None</code>, it just creates a dict mapping each cell name in <code>__code__.co_freevars</code> to the corresponding <code>cell.cell_contents</code> from the tuple.</p>
<p>If you want to go even deeper, I don't know of any good explanations of the internals of closures (that would make a good blog post, and I'll bet someone's written one… but the best I could find in a quick google is Michael Foord's <a href="http://python.dzone.com/news/nothing-private-python" rel="noreferrer">Nothing is Private: Python Closures (and ctypes)</a>, but CPython's source for <a href="https://hg.python.org/cpython/file/default/Objects/funcobject.c" rel="noreferrer">function objects</a> and <a href="https://hg.python.org/cpython/file/default/Objects/codeobject.c" rel="noreferrer">code objects</a> is pretty readable if you know C and the Python C API. You might also want to consider looking at <a href="https://bitbucket.org/pypy/pypy" rel="noreferrer">PyPy</a>, which tends to be a bit more complicated, but it's all in Python. There's also a brief implementation note in <a href="http://www.python.org/dev/peps/pep-0227/" rel="noreferrer">PEP 227</a>, which added closures in Python 2.1, but it doesn't explain much.</p>
</div>
<span class="comment-copy"><code>func_closure</code> in Python 2 has always been a tuple too, all that happened is that the name changed.</span>
<span class="comment-copy">Thanks @MartijnPieters!</span>
<span class="comment-copy">Thanks. That works.     func.__closure__[0].cell_contents     &lt;__main__.MyClass object at 0x105640a90&gt;</span>
<span class="comment-copy">Thank you so much! :) Can you direct me to a link where I can get more information about whats in the closure of an object?</span>
<span class="comment-copy">@user1971988: Let me edit the answer to provide a bit more info.</span>
<span class="comment-copy">Thanks @abamert. This has been really helpful.</span>
