<div class="post-text" itemprop="text">
<p>I am trying to get user input into python. However if a user uses a key such as [Home] or Ctrl+A or Ctrl+k (typical shell commands) they get a character representing that key rather than the expected behaviour.</p>
<p>I currently have:</p>
<pre><code>data = input("Enter your data here: ").strip()
</code></pre>
<p>However if the user uses the Ctrl+A to go to beginning of line, they instead get a <code>^A</code> character printed on the screen as part of their input.</p>
<p>Is there a way for me to get input in a way that would allow the user to use bash key combos like Ctrl+A?</p>
</div>
<div class="post-text" itemprop="text">
<p>The short version is to just add <code>import readline</code> to the top of your script, and it will magically work.</p>
<p>More specifically, the <a href="https://docs.python.org/3/library/readline.html" rel="nofollow"><code>readline</code></a> library provides a wrapper around <code>libreadline</code>, which is the same library that lets your <code>bash</code> shell, or the Python interactive interpreter, for that matter, do fancy input editing. </p>
<p>So, you <em>could</em> use <code>readline</code> directly. If you want to do anything fancy, you should read the docs, and also see <a href="https://docs.python.org/3/library/rlcompleter.html" rel="nofollow"><code>rlcompleter</code></a>.</p>
<p>But for simple cases like this: by default, just importing <code>readline</code> will (in effect) patch <code>input</code> for you,* and that's all you need.</p>
<p>So, assuming the user (and his distro) are using default settings, they will be able to use the same emacs-style keystrokes they use in bash. (And, if they've changed the settings, presumably they want to be able to use those settings in your program, not just in bash.)</p>
<hr/>
<p>The only problem is that this only works if <code>libreadline</code> was present when Python was built:</p>
<ul>
<li>On most Linux and *BSD systems, this isn't an issue.**</li>
<li>On OS X, it <em>would</em> be an issue, but Python provides a workaround that uses BSD <code>libedit</code> instead, which Apple includes.***</li>
<li>On Windows, if you're running inside a normal <code>cmd.exe</code> "DOS box", you automatically get DOS-style line editing, and can't get anything better... but fortunately, Windows users don't know what they're missing. :)</li>
</ul>
<p><sub>* If you're wondering how it works under the covers, the code underlying <code>input</code> is cleverly designed to be hooked by both <code>readline</code> and IDLE, in a way that's flexible enough that you can even do nifty things like integrate it into an <code>asyncio</code> event loop. So, <code>readline</code> doesn't <em>really</em> patch <code>input</code>; instead, it just registers a hook. Which is cool, and worth reading the source for, but it's not relevant to your question.</sub></p>
<p><sub>** And if it is, there's not much you can do about it except just install <code>libreadline</code> and rebuild Python. On *BSD, I guess you <em>could</em> configure Python to build the OS X <code>libedit</code> wrapper, but I don't know why you'd bother.</sub></p>
<p><sub>*** If you're using a pre-built Python from Apple or (until recently) python.org, you'll be using this workaround. Most apps and most users won't be affected by the difference, but there can be some annoyances with it. The way to force a solution to those annoyances is to depend on a newer version of <code>readline</code> off PyPI, which will fail if your users haven't installed <code>libreadline</code>.</sub></p>
</div>
<span class="comment-copy">import readline at the top of your script.</span>
<span class="comment-copy">@Ben That did it!</span>
<span class="comment-copy">Absolutely love the added info about how this behaves on different systems</span>
<span class="comment-copy">@Humdinger : If you like <code>readline</code>, you should read about <a href="https://docs.python.org/2/library/rlcompleter.html" rel="nofollow noreferrer">rlcompleter</a>. That doc gives an example script that gives you TAB completion in the Python interactive shell, which is very handy, IMHO. Also see <a href="https://docs.python.org/2/tutorial/interactive.html" rel="nofollow noreferrer">the Python tutorial</a></span>
<span class="comment-copy">@PM2Ring Thanks for the share! For this specific project, it has no use to me, but I am sure I might use it in the future!</span>
<span class="comment-copy">@PM2Ring: Thanks. I should probably have mentioned <code>rlcompleter</code> in the answer too; I'll rectify that.</span>
