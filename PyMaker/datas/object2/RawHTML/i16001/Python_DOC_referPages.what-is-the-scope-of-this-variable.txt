<div class="post-text" itemprop="text">
<p>I have seen and used nested functions in Python, and they match the definition of a closure.  So why are they called <code>nested functions</code> instead of <code>closures</code>?</p>
<p>Are nested functions not closures because they are not used by the external world?</p>
<p><strong>UPDATE:</strong> I was reading about closures and it got me thinking about this concept with respect to Python. I searched and found the article mentioned by someone in a comment below, but I couldn't completely understand the explanation in that article, so that is why I am asking this question.</p>
</div>
<div class="post-text" itemprop="text">
<p>A closure occurs when a function has access to a local variable from an enclosing scope that has finished its execution.</p>
<pre><code>def make_printer(msg):
    def printer():
        print msg
    return printer

printer = make_printer('Foo!')
printer()
</code></pre>
<p>When <code>make_printer</code> is called, a new frame is put on the stack with the compiled code for the <code>printer</code> function as a constant and the value of <code>msg</code> as a local. It then creates and returns the function. Because the function <code>printer</code> references the <code>msg</code> variable, it is kept alive after the <code>make_printer</code> function has returned. </p>
<p>So, if your nested functions don't </p>
<ol>
<li>access variables that are local to enclosing scopes, </li>
<li>do so when they are executed outside of that scope,</li>
</ol>
<p>then they are not closures.</p>
<p>Here's an example of a nested function which is not a closure.</p>
<pre><code>def make_printer(msg):
    def printer(msg=msg):
        print msg
    return printer

printer = make_printer("Foo!")
printer()  #Output: Foo!
</code></pre>
<p>Here, we are binding the value to the default value of a parameter. This occurs when the function <code>printer</code> is created and so no reference to the value of <code>msg</code> external to <code>printer</code>  needs to be maintained after <code>make_printer</code> returns. <code>msg</code> is just a normal local variable of the function <code>printer</code> in this context. </p>
</div>
<div class="post-text" itemprop="text">
<p><strong>The question has already been answered by</strong> <a href="https://stackoverflow.com/users/376728/aaronasterling">aaronasterling</a></p>
<p>However, someone might be interested in how the variables are stored under the hood. </p>
<p><strong>Before coming to the snippet:</strong> </p>
<p>Closures are functions that inherit variables from their enclosing environment. When you pass a function callback as an argument to another function that will do I/O, this callback function will be invoked later, and this function will — almost magically — remember the context in which it was declared, along with all the variables available in that context. </p>
<ul>
<li><p>If a function does not use free variables it doesn't form a closure. </p></li>
<li><p>If there is another inner level which uses free variables -- <em>all</em> previous levels save the lexical environment ( example at the end )</p></li>
<li><p>function attributes <code>func_closure</code> in <strong>python &lt; 3.X or <code>__closure__</code> in python &gt; 3.X save the free variables.</strong></p></li>
<li><p>Every function in python has this closure attributes, but it doesn't save any content if there is no free variables.</p></li>
</ul>
<p><strong>example: of closure attributes but no content inside as there is no free variable.</strong></p>
<pre><code>&gt;&gt;&gt; def foo():
...     def fii():
...         pass
...     return fii
...
&gt;&gt;&gt; f = foo()
&gt;&gt;&gt; f.func_closure
&gt;&gt;&gt; 'func_closure' in dir(f)
True
&gt;&gt;&gt;
</code></pre>
<p><strong>NB: <a href="https://stackoverflow.com/questions/12919278/how-to-define-free-variable-in-python">FREE VARIABLE</a> IS MUST TO CREATE A CLOSURE.</strong></p>
<p>I will explain using the same snippet as above:</p>
<pre><code>&gt;&gt;&gt; def make_printer(msg):
...     def printer():
...         print msg
...     return printer
...
&gt;&gt;&gt; printer = make_printer('Foo!')
&gt;&gt;&gt; printer()  #Output: Foo!
</code></pre>
<p>And all Python functions have a closure attribute so let's examine the enclosing variables associated with a closure function.</p>
<p>Here is the attribute <code>func_closure</code> for the function <code>printer</code></p>
<pre><code>&gt;&gt;&gt; 'func_closure' in dir(printer)
True
&gt;&gt;&gt; printer.func_closure
(&lt;cell at 0x108154c90: str object at 0x108151de0&gt;,)
&gt;&gt;&gt;
</code></pre>
<p>The <code>closure</code> attribute returns a tuple of cell objects which contain details of the variables defined in the enclosing scope.</p>
<p>The first element in the func_closure which could be None or a tuple of cells that contain bindings for the function’s free variables and it is read-only.</p>
<pre><code>&gt;&gt;&gt; dir(printer.func_closure[0])
['__class__', '__cmp__', '__delattr__', '__doc__', '__format__', '__getattribute__',
 '__hash__', '__init__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', 
 '__setattr__',  '__sizeof__', '__str__', '__subclasshook__', 'cell_contents']
&gt;&gt;&gt;
</code></pre>
<p>Here in the above output you can see <code>cell_contents</code>, let's see what it stores:</p>
<pre><code>&gt;&gt;&gt; printer.func_closure[0].cell_contents
'Foo!'    
&gt;&gt;&gt; type(printer.func_closure[0].cell_contents)
&lt;type 'str'&gt;
&gt;&gt;&gt;
</code></pre>
<p>So, when we called the function <code>printer()</code>, it accesses the value stored inside the <code>cell_contents</code>. This is how we got the output as 'Foo!'</p>
<p>Again I will explain using the above snippet with some changes:</p>
<pre><code> &gt;&gt;&gt; def make_printer(msg):
 ...     def printer():
 ...         pass
 ...     return printer
 ...
 &gt;&gt;&gt; printer = make_printer('Foo!')
 &gt;&gt;&gt; printer.func_closure
 &gt;&gt;&gt;
</code></pre>
<p>In the above snippet, I din't print msg inside the printer function, so it doesn't create any free variable. As there is no free variable, there will be no content inside the closure. Thats exactly what we see above.</p>
<p>Now I will explain another different snippet to clear out everything <code>Free Variable</code> with <code>Closure</code>:</p>
<pre><code>&gt;&gt;&gt; def outer(x):
...     def intermediate(y):
...         free = 'free'
...         def inner(z):
...             return '%s %s %s %s' %  (x, y, free, z)
...         return inner
...     return intermediate
...
&gt;&gt;&gt; outer('I')('am')('variable')
'I am free variable'
&gt;&gt;&gt;
&gt;&gt;&gt; inter = outer('I')
&gt;&gt;&gt; inter.func_closure
(&lt;cell at 0x10c989130: str object at 0x10c831b98&gt;,)
&gt;&gt;&gt; inter.func_closure[0].cell_contents
'I'
&gt;&gt;&gt; inn = inter('am')
</code></pre>
<p>So, we see that a <code>func_closure</code> property is a tuple of closure <em>cells</em>, we can refer them and their contents explicitly -- a cell has property "cell_contents"</p>
<pre><code>&gt;&gt;&gt; inn.func_closure
(&lt;cell at 0x10c9807c0: str object at 0x10c9b0990&gt;, 
 &lt;cell at 0x10c980f68: str object at   0x10c9eaf30&gt;, 
 &lt;cell at 0x10c989130: str object at 0x10c831b98&gt;)
&gt;&gt;&gt; for i in inn.func_closure:
...     print i.cell_contents
...
free
am 
I
&gt;&gt;&gt;
</code></pre>
<p>Here when we called <code>inn</code>, it will refer all the save free variables so we get <code>I am free variable</code></p>
<pre><code>&gt;&gt;&gt; inn('variable')
'I am free variable'
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python has a <em>weak</em> support for closure. To see what I mean take the following example of a counter using closure with JavaScript:</p>
<pre><code>function initCounter(){
    var x = 0;
    function counter  () {
        x += 1;
        console.log(x);
    };
    return counter;
}

count = initCounter();

count(); //Prints 1
count(); //Prints 2
count(); //Prints 3
</code></pre>
<p>Closure is quite elegant since it gives functions written like this the ability to have "internal memory". As of Python 2.7 this is not possible. If you try</p>
<pre><code>def initCounter():
    x = 0;
    def counter ():
        x += 1 ##Error, x not defined
        print x
    return counter

count = initCounter();

count(); ##Error
count();
count();
</code></pre>
<p>You'll get an error saying that x is not defined. But how can that be if it has been shown by others that you can print it? This is because of how Python it manages the functions variable scope. While the inner function can <strong>read</strong> the outer function's variables, it cannot <strong>write</strong> them.</p>
<p>This is a shame really. But with just read-only closure you can at least implement the <a href="http://thecodeship.com/patterns/guide-to-python-function-decorators/" rel="noreferrer">function decorator pattern</a> for which Python offers syntactic sugar.</p>
<p><strong>Update</strong></p>
<p>As its been pointed out, there are ways to deal with python's scope limitations and I'll expose some.</p>
<p><strong>1.</strong> Use the <code>global</code> keyword (in general not recommended).</p>
<p><strong>2.</strong> Define a simple modifiable class <code>Object</code></p>
<pre><code>class Object(object):
    pass
</code></pre>
<p>and create an  <code>Object scope</code> within <code>initCounter</code> to store the variables</p>
<pre><code>def initCounter ():
    scope = Object()
    scope.x = 0
    def counter():
        scope.x += 1
        print scope.x

    return counter
</code></pre>
<p>Since <code>scope</code> is really just a reference, actions taken with its fields do not really modify <code>scope</code> itself, so no error arises. </p>
<p><strong>3.</strong> An alternative way, as @unutbu pointed out, would be to define each variable as an array (<code>x = [0]</code>) and modify it's first element (<code>x[0] += 1</code>). Again no error arises because <code>x</code> itself is not modified.</p>
<p><strong>4.</strong> As suggested by @raxacoricofallapatorius, you could make <code>x</code> a property of <code>counter</code></p>
<pre><code>def initCounter ():

    def counter():
        counter.x += 1
        print counter.x

    counter.x = 0
    return counter
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python 2 didn't have closures - it had workarounds that <em>resembled</em> closures.</p>
<p>There are plenty of examples in answers already given - copying in variables to the inner function, modifying an object on the inner function, etc.</p>
<p>In Python 3, support is more explicit - and succinct:</p>
<pre><code>def closure():
    count = 0
    def inner():
        nonlocal count
        count += 1
        print(count)
    return inner
</code></pre>
<p>Usage:</p>
<pre><code>start = closure()
start() # prints 1
start() # prints 2
start() # prints 3
</code></pre>
<p>The <code>nonlocal</code> keyword binds the inner function to the outer variable explicitly mentioned, in effect enclosing it. Hence more explicitly a 'closure'.</p>
</div>
<div class="post-text" itemprop="text">
<p>I had a situation where I needed a separate but persistent name space.
I used classes. I don't otherwise.
Segregated but persistent names are closures.</p>
<pre><code>&gt;&gt;&gt; class f2:
...     def __init__(self):
...         self.a = 0
...     def __call__(self, arg):
...         self.a += arg
...         return(self.a)
...
&gt;&gt;&gt; f=f2()
&gt;&gt;&gt; f(2)
2
&gt;&gt;&gt; f(2)
4
&gt;&gt;&gt; f(4)
8
&gt;&gt;&gt; f(8)
16

# **OR**
&gt;&gt;&gt; f=f2() # **re-initialize**
&gt;&gt;&gt; f(f(f(f(2)))) # **nested**
16

# handy in list comprehensions to accumulate values
&gt;&gt;&gt; [f(i) for f in [f2()] for i in [2,2,4,8]][-1] 
16
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def nested1(num1): 
    print "nested1 has",num1
    def nested2(num2):
        print "nested2 has",num2,"and it can reach to",num1
        return num1+num2    #num1 referenced for reading here
    return nested2
</code></pre>
<p>Gives:</p>
<pre><code>In [17]: my_func=nested1(8)
nested1 has 8

In [21]: my_func(5)
nested2 has 5 and it can reach to 8
Out[21]: 13
</code></pre>
<p>This is an example of what a closure is and how it can be used.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd like to offer another simple comparison between python and JS example, if this helps make things clearer.  </p>
<p>JS:</p>
<pre><code>function make () {
  var cl = 1;
  function gett () {
    console.log(cl);
  }
  function sett (val) {
    cl = val;
  }
  return [gett, sett]
}
</code></pre>
<p>and executing:  </p>
<pre><code>a = make(); g = a[0]; s = a[1];
s(2); g(); // 2
s(3); g(); // 3
</code></pre>
<p>Python:</p>
<pre><code>def make (): 
  cl = 1
  def gett ():
    print(cl);
  def sett (val):
    cl = val
  return gett, sett
</code></pre>
<p>and executing:</p>
<pre><code>g, s = make()
g() #1
s(2); g() #1
s(3); g() #1
</code></pre>
<p><strong>Reason:</strong> As many others said above, in python, if there is an assignment in the inner scope to a variable with the same name, a new reference in the inner scope is created. Not so with JS, unless you explicitly declare one with the <code>var</code> keyword.</p>
</div>
<span class="comment-copy">Interestingly, some googling found me this, dated December 2006: <a href="http://effbot.org/zone/closure.htm" rel="nofollow noreferrer">effbot.org/zone/closure.htm</a>. I'm not sure—are "external duplicates" frowned upon on SO?</span>
<span class="comment-copy"><a href="http://www.python.org/dev/peps/pep-0227/" rel="nofollow noreferrer">PEP 227 -- Statically Nested Scopes</a> for more information.</span>
<span class="comment-copy">You answer is much better than mine, you make a good point, but If we are going to go by the strictest functional programming definitions, are your examples even functions? It's been a while, and I can't remember if strict functional programming allows for functions that don't return values.  The point is moot, if you consider the return value to be None, but that is a whole other topic.</span>
<span class="comment-copy">@mikerobi, I'm not sure that we need to take functional programming into account since python isn't really a functional language although it certainly can be used as such. But, no, the inner functions are not functions in that sense since their whole point is to create side effects. It's easy to create a function that illustrates the points just as well though,</span>
<span class="comment-copy">@mikerobi: Whether or not a blob of code is a closure depends on whether or not it closes over its environment, not what you call it. It could be a routine, function, procedure, method, block, subroutine, whatever. In Ruby, methods can't be closures, only blocks can. In Java, methods can't be closures, but classes can. That doesn't make them any less of a closure. (Although the fact that they only close over <i>some</i> variables, and they cannot modify them, makes them next to useless.) You could argue that a method is just a procedure closed over <code>self</code>. (In JavaScript/Python that's almost true.)</span>
<span class="comment-copy">@JörgWMittag Please define "closes over".</span>
<span class="comment-copy">@EvgeniSergeev "closes over" i.e. refers "to a local variable [say, <code>i</code>] from an enclosing scope". refers, i.e. can inspect (or change) <code>i</code>'s value, even if/when that scope "has finished its execution", i.e. the execution of a program has gone forth to other parts of the code. The block where <code>i</code> is defined is no more, yet function(s) referring to <code>i</code> still can do so. This is commonly described as "closing over the variable <code>i</code>". To not deal with the specific variables, it can be implemented as closing over the whole environment frame where that variable is defined.</span>
<span class="comment-copy">In Python 3, <code>func_closure</code> is now called <code>__closure__</code>, similarly to the various other <code>func_*</code> attributes.</span>
<span class="comment-copy">Thank you for the correction.</span>
<span class="comment-copy">Also <code>__closure_</code> is available in Python 2.6+ for compatibility with Python 3.</span>
<span class="comment-copy"><i>Closure</i> refers to the record that stores the closed-over variables, attached to the function object. It's not the function itself. In Python, it's the <code>__closure__</code> object that's the closure.</span>
<span class="comment-copy">Thanks @MartijnPieters for you clarification.</span>
<span class="comment-copy">There are ways around this. In Python2, you could make <code>x = [0]</code> in the outer scope, and use <code>x[0] += 1</code> in the inner scope. In Python3, you could keep your code as it is and use the <a href="http://stackoverflow.com/a/1261952/190597">nonlocal keyword</a>.</span>
<span class="comment-copy">"While the inner function can read the outer function's variables, it cannot write them." - This is inaccurate as per unutbu's comment. The problem is that when Python encounters something like x = ..., x is interpreted as a local variable, which of course is not yet defined at that point. OTOH, if x is a mutable object with a mutable method, it can be modified just fine, e.g. if x is an object that supports inc() method which mutates itself, x.inc() will work without a hitch.</span>
<span class="comment-copy">@ThanhDK Doesn't that mean that you cannot write to the variable? When you use call a method from a mutable object, you are just telling it to modify itself, you are <i>not actually</i> modifying the variable (which merely holds a reference to the object). In other words, the reference which the variable <code>x</code> points to remains exactly the same even if you call <code>inc()</code> or whatever, and you did not effectively write to the variable.</span>
<span class="comment-copy">There's another option, strictly better than #2, imv, of <a href="http://stackoverflow.com/a/279597/656912">making <code>x</code> a property of <code>counter</code></a>.</span>
<span class="comment-copy">Python 3 has the <code>nonlocal</code> keyword, which is like <code>global</code> but for an outer function's variables. This will allow an inner function to rebind a name from its outer function(s). I think "bind to the name" is more accurate than "modify the variable".</span>
<span class="comment-copy">Interesting, for reference: <a href="https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement" rel="nofollow noreferrer">docs.python.org/3/reference/…</a> . I don't know why it's not easy to find more info about closures (and how you might expect them to behave, coming from JS) in the python3 documentation?</span>
<span class="comment-copy">+1 for originality.</span>
