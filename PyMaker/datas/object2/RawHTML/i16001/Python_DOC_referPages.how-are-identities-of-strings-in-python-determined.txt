<div class="post-text" itemprop="text">
<p>While this question doesn't have any real use in practice, I am curious as to how Python does string interning. I have noticed the following.</p>
<pre><code>&gt;&gt; "string" is "string"
&gt;&gt; True
</code></pre>
<p>This is as I expected.</p>
<p>You can also do this.</p>
<pre><code>&gt;&gt; "strin"+"g" is "string"
&gt;&gt; True
</code></pre>
<p>And that's pretty clever!</p>
<p>But you can't do this.</p>
<pre><code>&gt;&gt; s1 = "strin"
&gt;&gt; s2 = "string"
&gt;&gt; s1+"g" is s2
&gt;&gt; False
</code></pre>
<p>Why wouldn't Python evaluate <code>s1+"g"</code>, and realize it is the same as <code>s1</code> and point it to the same address? What is actually going on in that last block to have it return <code>False</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is implementation-specific, but your interpreter is probably interning compile-time constants but not the results of run-time expressions.</p>
<p>In what follows I use CPython 2.7.3.</p>
<p>In the second example, the expression <code>"strin"+"g"</code> is evaluated at compile time, and is replaced with <code>"string"</code>. This makes the first two examples behave the same.</p>
<p>If we examine the bytecodes, we'll see that they are exactly the same:</p>
<pre><code>  # s1 = "string"
  2           0 LOAD_CONST               1 ('string')
              3 STORE_FAST               0 (s1)

  # s2 = "strin" + "g"
  3           6 LOAD_CONST               4 ('string')
              9 STORE_FAST               1 (s2)
</code></pre>
<p>The third example involves a run-time concatenation, the result of which is not automatically interned:</p>
<pre><code>  # s3a = "strin"
  # s3 = s3a + "g"
  4          12 LOAD_CONST               2 ('strin')
             15 STORE_FAST               2 (s3a)

  5          18 LOAD_FAST                2 (s3a)
             21 LOAD_CONST               3 ('g')
             24 BINARY_ADD          
             25 STORE_FAST               3 (s3)
             28 LOAD_CONST               0 (None)
             31 RETURN_VALUE        
</code></pre>
<p>If you were to manually <code>intern()</code> the result of the third expression, you'd get the same object as before:</p>
<pre><code>&gt;&gt;&gt; s3a = "strin"
&gt;&gt;&gt; s3 = s3a + "g"
&gt;&gt;&gt; s3 is "string"
False
&gt;&gt;&gt; intern(s3) is "string"
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Case 1</strong></p>
<pre><code>&gt;&gt;&gt; x = "123"  
&gt;&gt;&gt; y = "123"  
&gt;&gt;&gt; x == y  
True  
&gt;&gt;&gt; x is y  
True  
&gt;&gt;&gt; id(x)  
50986112  
&gt;&gt;&gt; id(y)  
50986112  
</code></pre>
<p><strong>Case 2</strong></p>
<pre><code>&gt;&gt;&gt; x = "12"
&gt;&gt;&gt; y = "123"
&gt;&gt;&gt; x = x + "3"
&gt;&gt;&gt; x is y
False
&gt;&gt;&gt; x == y
True
</code></pre>
<p>Now, your question is why the id is same in case 1 and not in case 2.<br/>
In case 1, you have assigned a string literal <code>"123"</code> to <code>x</code> and <code>y</code>. </p>
<p>Since string are immutable, it makes sense for the interpreter to store the string literal only once and point all the variables to the same object.<br/>
Hence you see the id as identical.</p>
<p>In case 2, you are modifying <code>x</code> using concatenation. Both <code>x</code> and <code>y</code> has same values, but not same identity.<br/>
Both points to different objects in memory. Hence they have different <code>id</code> and <code>is</code> operator returned <code>False</code></p>
</div>
<span class="comment-copy">How did you get this sexy output?</span>
<span class="comment-copy">@Serdalis: <a href="http://docs.python.org/2/library/dis.html" rel="nofollow noreferrer">docs.python.org/2/library/dis.html</a></span>
<span class="comment-copy">And for the record: Python's peep-hole optimisation will pre-calculate arithmetic operations on constants (<code>"string1" + "s2"</code>, <code>10 + 3*20</code>, etc.) at compile time, but limits resulting <i>sequences</i> to just 20 elements (to prevent  <code>[None] * 10**1000</code> from overly expanding your bytecode). It is this optimisation that collapsed <code>"strin" + "g"</code> into <code>"string"</code>; the result is shorter than 20 characters.</span>
<span class="comment-copy">And to make it doubly clear: there is not interning going on here at all. Immutable literals are instead stored as constants with the bytecode. Interning <i>does</i> take place for names used in code, but not for string values created by the program unless specifically interned by the <code>intern()</code> function.</span>
<span class="comment-copy">For those, who tries to find <code>intern</code> function in Python 3 - it is moved to <a href="https://docs.python.org/3/library/sys.html?highlight=sys#sys.intern" rel="nofollow noreferrer">sys.intern</a></span>
<span class="comment-copy">How come, since strings are immutable, assigning x+"3" (and looking for a new spot to store the string) doesn't assign to the same reference as y?</span>
<span class="comment-copy">Because then it needs to compare the new string with all existing strings; potentially a very expensive operation. It could do this in the background after assignment I suppose, to reduce memory, but then you would end up with even stranger behaviour: <code>id(x) != id(x)</code> for instance, because the string was moved in the process of evaluation.</span>
<span class="comment-copy">@AndreaConte because strings' concatenation doesn't do the extra job of looking up into the pool of all the used strings each time it generates a new one. On the other hand, interpreter "optimizes" the expression <code>x = "12" + "3"</code> into <code>x = "123"</code> (concatenation of two string literals in a single expression) so the assignment actually does the lookup and finds the same "internal" string as for <code>y = "123"</code>.</span>
<span class="comment-copy">Actually, it isn't that assignment does the lookup rather than every string literal from the source code gets "internalized" and that object gets reused in all the other places.</span>
