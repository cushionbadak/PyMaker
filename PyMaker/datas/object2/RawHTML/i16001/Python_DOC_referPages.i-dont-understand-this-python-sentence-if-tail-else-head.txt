<div class="post-text" itemprop="text">
<p>I saw it from <em>Python Cookbook</em>:</p>
<pre><code>def sum(items):
    head, *tail = items
    return head + sum(tail) if tail else head
items = [1, 10, 7, 4, 5, 9]
print(sum(items)) #36
</code></pre>
<p>It says it's some kind of clever recursive algorithm.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's a <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="noreferrer">conditional expression</a>:</p>
<pre><code>A if PREDICATE else B
</code></pre>
<p>A is yielded if <code>PREDICATE</code> is true, otherwise B is yielded.</p>
<pre><code>&gt;&gt;&gt; 'A' if 1 &lt; 2 else 'B'
'A'
&gt;&gt;&gt; 'A' if 1 &gt; 2 else 'B'
'B'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>sum(tail)</code> is part of the expression as well.<br/>
The structure of this expression is:</p>
<pre><code>result = Val1 if condition else Val2
</code></pre>
<p>and it equivalent to:</p>
<pre><code>if (condition):
    result = Val1
else:
    result = Val2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In other words it can be written as:</p>
<pre><code>if tail:
    return head + sum(tail)
else:
    return head
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It could be rewritten as following:</p>
<pre><code>def sum(items):
    head + *tail = items
    while tail:
        return head + sum(tail)
</code></pre>
<ol>
<li>1(head) + sum(tail) - <em>as the new items</em></li>
<li>1 + 10(head) + sum(tail)</li>
<li>1 + 10 + 7(head) + sum(tail)</li>
<li>1 + 10 + 7 + 4(head) + sum(tail)</li>
<li>1 + 10 + 7 + 4 + 5(head) + sum(tail)</li>
<li>1 + 10 + 7 + 4 + 5 + 9(head) - <em>there are no tails anymore</em></li>
</ol>
</div>
<span class="comment-copy">So 'condition' in that if clause is 'tail'? But it's not a Boolean or at least I think it should be like 'if tail != []'.</span>
<span class="comment-copy">in pyhotn, you can use each variable as condition, in this case, tail is False if its empty or None.</span>
<span class="comment-copy">Any Python object, when used in a boolean context (that is at the place where boolean is finally expected) is interpreted as its <i>expected</i> boolean value. Empty strings and all containers are interpreted as <code>False</code>. Non-empty ones are interpreted as <code>True</code>. See <a href="https://docs.python.org/3/reference/expressions.html#boolean-operations" rel="nofollow noreferrer">docs.python.org/3/reference/expressions.html#boolean-operations</a> for details.</span>
<span class="comment-copy">Great! Thanks:)</span>
<span class="comment-copy">Thanks, but I'm still working on that 'tail' thing, I'm not sure if it's 'if tail = ![]', does 'tail' really work in Python?</span>
<span class="comment-copy"><code>tail</code> isn't a command here; it's simply the tuple containing all but the first item of <code>items</code>.</span>
<span class="comment-copy">Since <code>tail</code> is a list, <code>if tail:</code> is the same as <code>if tail != []:</code></span>
