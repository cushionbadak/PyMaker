<div class="post-text" itemprop="text">
<p>Technically, any odd number of backslashes, as described in <a href="http://docs.python.org/reference/lexical_analysis.html##string-and-bytes-literals" rel="noreferrer">the docs</a>.</p>
<pre><code>&gt;&gt;&gt; r'\'
  File "&lt;stdin&gt;", line 1
    r'\'
       ^
SyntaxError: EOL while scanning string literal
&gt;&gt;&gt; r'\\'
'\\\\'
&gt;&gt;&gt; r'\\\'
  File "&lt;stdin&gt;", line 1
    r'\\\'
         ^
SyntaxError: EOL while scanning string literal
</code></pre>
<p>It seems like the parser could just treat backslashes in raw strings as regular characters (isn't that what raw strings are all about?), but I'm probably missing something obvious. TIA!</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason is explained in the part of that section which I highlighted in bold:</p>
<blockquote>
<p><strong>String quotes can be escaped with a
  backslash,</strong> but the backslash remains
  in the string; for example, <code>r"\""</code> is a
  valid string literal consisting of two
  characters: a backslash and a double
  quote; <code>r"\"</code> is not a valid string
  literal (even a raw string cannot end
  in an odd number of backslashes).
  Specifically, a raw string cannot end
  in a single backslash (since the
  backslash would escape the following
  quote character). Note also that a
  single backslash followed by a newline
  is interpreted as those two characters
  as part of the string, not as a line
  continuation.</p>
</blockquote>
<p>So raw strings are not 100% raw, there is still some rudimentary backslash-processing.</p>
</div>
<div class="post-text" itemprop="text">
<p>The whole misconception about python's raw strings is that most of people think that backslash (within a raw string) is just a regular character as all others. It is NOT. The key to understand is this python's tutorial sequence:</p>
<blockquote>
<p>When an '<strong>r</strong>' or '<strong>R</strong>' prefix is present, a character following a
  backslash is included in the string without change, and all
  backslashes are left in the string</p>
</blockquote>
<p>So any character following a backslash <strong>is</strong> part of raw string. Once parser enters a raw string (non unicode one) and encounters a backslash it knows there are 2 characters (a backslash and a char following it).</p>
<p>This way:</p>
<blockquote>
<p><strong>r'abc\d'</strong> comprises <strong>a, b, c, \, d</strong></p>
<p><strong>r'abc\'d'</strong> comprises <strong>a, b, c, \, ', d</strong></p>
<p><strong>r'abc\''</strong> comprises <strong>a, b, c, \, '</strong></p>
</blockquote>
<p>and:</p>
<blockquote>
<p><strong>r'abc\'</strong> comprises <strong>a, b, c, \, '</strong> but there is no terminating quote now.</p>
</blockquote>
<p>Last case shows that according to documentation now a parser cannot find closing quote as the last qoute you see above is part of the string ie. backslash cannot be last here as it will 'devour' string closing char.</p>
</div>
<div class="post-text" itemprop="text">
<p>That's the way it is! I see it as one of those small defects in python!</p>
<p>I don't think there's a good reason for it, but it's definitely not parsing; it's really easy to parse raw strings with \ as a last character.</p>
<p>The catch is, if you allow \ to be the last character in a raw string then you won't be able to put " inside a raw string. It seems python went with allowing " instead of allowing \ as the last character.</p>
<p>However, this shouldn't cause any trouble.</p>
<p>If you're worried about not being able to easily write windows folder pathes such as <code>c:\mypath\</code> then worry not, for, you can represent them as <code>r"C:\mypath"</code>, and, if you need to append a subdirectory name, don't do it with string concatenation, for it's not the right way to do it anyway! use <code>os.path.join</code></p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.join(r"C:\mypath", "subfolder")
'C:\\mypath\\subfolder'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another trick is to use chr(92) as it evaluates to "\". </p>
<p>I recently had to clean a string of backslashes and the following did the trick:</p>
<pre><code>CleanString = DirtyString.replace(chr(92),'')
</code></pre>
<p>I realize that this does not take care of the "why" but the thread attracts many people looking for a solution to an immediate problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>In order for you to end a raw string with a slash I suggest you can use this trick:</p>
<pre><code>&gt;&gt;&gt; print r"c:\test"'\\'
test\
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since \" is allowed inside the raw string.  Then it can't be used to identify the end of the string literal. </p>
<p>Why not stop parsing the string literal when you encounter the first "?</p>
<p>If that was the case, then \" wouldn't be allowed inside the string literal.  But it is.</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason for why <code>r'\'</code> is syntactical incorrect is that although the string expression is raw the used quotes (single or double) always have to be escape since they would mark the end of the quote otherwise. So if you want to express a single quote inside single quoted string, there is no other way than using <code>\'</code>. Same applies for double quotes.</p>
<p>But you could use:</p>
<pre><code>'\\'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another user who has since deleted their answer (not sure if they'd like to be credited) suggested that the Python language designers may be able to simplify the parser design by using the same parsing rules and expanding escaped characters to raw form as an afterthought (if the literal was marked as raw).</p>
<p>I thought it was an interesting idea and am including it as community wiki for posterity.</p>
</div>
<div class="post-text" itemprop="text">
<p>Comming from C it pretty clear to me that a single \ works as escape character allowing you to put special characters such as newlines, tabs and quotes into strings.</p>
<p>That does indeed disallow \ as last character since it will escape the " and make the parser choke. But as pointed out earlier \ is legal.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Despite its role, even a raw string cannot end in a single
  backslash, because the backslash escapes the following quote
  character—you still must escape the surrounding quote character to
  embed it in the string.  That is, r"...\" is not a valid string
  literal—a raw string cannot end in an odd number of backslashes.<br/>
  If you need to end a raw string with a single backslash, you can use
  two and slice off the second.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>some tips :</p>
<p>1) if you need to manipulate backslash for path then standard python module os.path is your friend. for example : </p>
<blockquote>
<p>os.path.normpath('c:/folder1/')</p>
</blockquote>
<p>2) if you want to build strings with backslash in it BUT without backslash at the END of your string then raw string is your friend (use 'r' prefix before your literal string). for example : </p>
<pre><code>r'\one \two \three'
</code></pre>
<p>3) if you need to prefix a string in a variable X with a backslash then you can do this :</p>
<pre><code>X='dummy'
bs=r'\ ' # don't forget the space after backslash or you will get EOL error
X2=bs[0]+X  # X2 now contains \dummy
</code></pre>
<p>4) if you need to create a string with a backslash at the end then combine tip 2 and 3 :</p>
<pre><code>voice_name='upper'
lilypond_display=r'\DisplayLilyMusic \ ' # don't forget the space at the end
lilypond_statement=lilypond_display[:-1]+voice_name
</code></pre>
<p>now lilypond_statement contains <code>"\DisplayLilyMusic \upper"</code></p>
<p>long live python ! :)</p>
<p>n3on</p>
</div>
<div class="post-text" itemprop="text">
<p>I encountered this problem and found a partial solution which is good for some cases. Despite python not being able to end a string with a single backslash, it can be serialized and saved in a text file with a single backslash at the end. Therefore if what you need is saving a text with a single backslash on you computer, it is possible:</p>
<pre><code>x = 'a string\\' 
x
'a string\\' 

# Now save it in a text file and it will appear with a single backslash:

with open("my_file.txt", 'w') as h:
    h.write(x)
</code></pre>
<p>BTW it is not working with json if you dump it using python's json library. </p>
<p>Finally, I work with Spyder, and I noticed that if I open the variable in spider's text editor by double clicking on its name in the variable explorer, it is presented with a single backslash and can be copied to the clipboard that way (it's not very helpful for most needs but maybe for some..). </p>
</div>
<span class="comment-copy">looks like this is now a <a href="http://docs.python.org/faq/design.html#why-can-t-raw-strings-r-strings-end-with-a-backslash" rel="nofollow noreferrer">faq</a>.  might not have been when you asked the question.  i know the docs you cited say pretty much the same thing, but i just thought i would add another source of documentation.</span>
<span class="comment-copy">Oh wow... that's weird. Nice catch. Makes sense that r'\'' == "\\'" but it's still strange that the escape character has an effect without disappearing.</span>
<span class="comment-copy">You might as well use a forward slash to achieve the same purpose.. This worked on Windows 7 Python 2.7... root_path = r'P:/Temp/IT/' then use it to create subfolder like this: create_folder = root_path + sub_folder</span>
<span class="comment-copy">@ihightower this may work for file system paths, but there are other uses of the backslash. And for file system paths, don't hardcode the separator. Use 'os.path.sep', or better the higher level features of 'os.path'. (Or 'pathlib', when available)</span>
<span class="comment-copy">Note: Workaround is to use adjacent literal concatentation. <code>r"foo\bar\baz" "\\"</code> (wrap in parens if ambiguous) will create a single literal at compile time, the first part of which is raw, and only the last tiny bit is non-raw, to allow the trailing backslash.</span>
<span class="comment-copy">IMO this just restates the question (what is allowed/will work, and what not), without saying why it's designed this way. There's a <a href="https://docs.python.org/3/faq/design.html#why-can-t-raw-strings-r-strings-end-with-a-backslash" rel="nofollow noreferrer">FAQ entry</a> that sort of explains the why (raw strings were designed for a specific purpose, and it makes sense in the context of that purpose).</span>
<span class="comment-copy">This is actually clearer than the accepted answer. Nice breakdown.</span>
<span class="comment-copy">i also find this significantly clearer than the accepted answer, and I also happen to be a physicist</span>
<span class="comment-copy">Good ancillary material. :-) Devil's advocate, though: sometimes you want to differentiate file paths from directory paths by appending the path separator. Nice thing about os.path.join is that it will collapse them: assert os.path.join('/home/cdleary/', 'foo/', 'bar/') == '/home/cdleary/foo/bar/'</span>
<span class="comment-copy">It doesn't make a (technical) difference though! os.path.isdir will tell you whether a certain path is a directory (folder)</span>
<span class="comment-copy">Yep, it's just to indicate to someone reading the code whether you expect a path to be a directory or a file.</span>
<span class="comment-copy">The convention on windows is that files have an extension, always. it's not likely at all (under normal circumstances) to have a text file with a path such as c:\path\data</span>
<span class="comment-copy">..or you can represent them as "c:/mypath" and forget your backslash woes altogether :-)</span>
<span class="comment-copy">But what if the original string contains backslashes?</span>
<span class="comment-copy">chr(92) is awfully obscure, probably better to use <code>"\\"</code> (non-raw string with backslash)</span>
<span class="comment-copy">Exactly. Python designers likely evaluated the liklihood of the two alternatives: the two-character sequence <code>\"</code> anywhere within a double-quoted raw string, OR \ at end of double-quoted raw string. The usage statistics must favor the two character sequence anywhere vs. the one-character sequence at the end.</span>
<span class="comment-copy">Doesn't answer 'why' :-)</span>
<span class="comment-copy">parsing is easy either way ..</span>
<span class="comment-copy">But it might let you avoid having two separate string-literal-parser code paths.</span>
<span class="comment-copy">Yeah -- the heart of the issue was that raw strings treat \ as a literal instead of the start of an escape sequence. The strange thing is that it still has escape properties for quoting, despite being treated as a literal character.</span>
<span class="comment-copy">None of these answer the question of "why", but #3 and #4 should not be used. Slicing and adding strings is generally bad practice, and you should prefer r'\dummy' for #3 (which works fine) and ' '.join([r'\DisplayLilyMusic', r'\upper']) to #4.</span>
<span class="comment-copy">Reason being that strings are immutable and each slice/concatenation creates a new immutable string object that is typically discarded. Better to accumulate them all and join them together in one step with str.join(components)</span>
<span class="comment-copy">Oh, whoops -- misunderstood what you meant for #3. I think there a simple '\\' + X is preferred to creating a string just to slice it.</span>
