<div class="post-text" itemprop="text">
<p>I am trying to find the MIN and MAX values for each row of a CSV file and append them to the next position in the list, positions 5 and 6. I have managed to calculate the average, append this to the forth position and output this in highest to lowest however, I am struggling to work out how to find the MAX and MIN values of each row so I can do the same - highest to lowest. The original CSV is formatted: Fred,56,78,99 with each user on a new line.</p>
<p>Any help would be appreciate.</p>
<pre><code>import csv
import operator

sample  = open("sampleData.txt", "r")

csv1 = csv.reader(sample, delimiter = ',')

sort = sorted(csv1,key=operator.itemgetter(0))

for i in range( 0, len(sort)):
    sort[i].append((int(sort[i][1]) + int(sort[i][2]) + int(sort[i][3])) / int(len(sort[i])-1))   
sort = list(reversed(sorted(sort,key=operator.itemgetter(4))))
for i in range( 0, len( sort ) ):
print(sort[i][0], round(sort[i][4]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import csv

sample  = open("sampleData.txt", "r")
csv1 = csv.reader(sample, delimiter = ',')

sorted_list = []

for line in csv1:
    print '-- ORIG:', line
    tmp = sorted( [int(i) for i in line[1:]], reverse=True )  # eg: [99,78,56]
    stat_list = [round(sum(tmp)/float(len(tmp)), 2), min(tmp), max(tmp)]
    sorted_list.append( [line[0]] + tmp + stat_list )

for s in sorted_list: print '** NEW: ', s # has ['Fred',99,78,56,78.0,57,99]
</code></pre>
<p>You can use/modify the quick &amp; dirty solution above. Note:</p>
<ol>
<li>The result is a list of lists with digits converted to integers. </li>
<li>The float() is needed for computing average - just doing it on the denominator is enough for the whole result to be a float.</li>
<li>List comprehensions are great shortcuts and efficient for avoiding for loops.  </li>
<li>The <b>numpy</b> module has builtin mean() function (among many others) that are useful and fast, especially for large arrays.</li>
</ol>
<h2>OUTPUT (space added)</h2>
<ul>
<li>ORIG: ['Fred', '57', '78', '99']</li>
<li>ORIG: ['Wilma', '96', '4', '105']</li>
<li><p>ORIG: ['Bar', '23', '88', '65']</p></li>
<li><p>NEW:  ['Fred', 99, 78, 57, 78.0, 57, 99]</p></li>
<li>NEW:  ['Wilma', 105, 96, 4, 68.33, 4, 105]</li>
<li>NEW:  ['Bar', 88, 65, 23, 58.67, 23, 88]</li>
</ul>
</div>
<span class="comment-copy">Perhaps the built-in <a href="https://docs.python.org/3/library/functions.html#min" rel="nofollow noreferrer">min</a> and <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer">max</a> functions will be useful to you.</span>
<span class="comment-copy"><code>sort</code> is a builtin function, please don't use it as a variable name.</span>
<span class="comment-copy">Well, <code>sorted</code> is a builtin function but <code>sort</code> isn't. One might argue that <code>list.sort</code> is a built-in method of a built-in class, but then the usual "you can no longer access the original functionality" argument doesn't apply.</span>
<span class="comment-copy">I have tried using the built in min and max functions but some how I need to exclude position [0] as it includes the name.</span>
<span class="comment-copy">You can use list slicing syntax to exclude the first element. <code>list[1:]</code> will give you from the 2nd element of the list to the end.</span>
<span class="comment-copy">Does the job perfectly thanks.</span>
