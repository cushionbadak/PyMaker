<div class="post-text" itemprop="text">
<p>Is there a way (preferably using the <a href="https://docs.python.org/3/library/ast.html" rel="nofollow">ast</a> module) to know if a function has a required number of arguments? </p>
<p>For example, if a user interface allows a user to insert a python expression for example "sum(x)" but the user has mistakenly typed "sum()" is there a way to validate that expression before runtime?</p>
<p>I have called ast.dump on every node in the symbol tree but the information on these symbols seems insufficient for this kind of analysis? </p>
<p>For example:</p>
<pre><code>#own debug code added to ast.py
def visit(self, node):
  print(dump(node),True, False)
  method = 'visit_' + node.__class__.__name__
  visitor = getattr(self, method, self.generic_visit)
  return visitor(node)  
</code></pre>
<p>yields:</p>
<pre><code>'Module(body=[Expr(value=Call(func=Attribute(value=Name(id='Math', ctx=Load()),
 attr='cos', ctx=Load()), args=[Num(n=0.5)], 
 keywords=[], starargs=None, kwargs=None))])'
</code></pre>
<p>Which doesn't really differ from a function like print() which does not require a specific number of arguments.</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot see from a <em>call expression</em> what arguments the <em>callable</em> expects. Python leaves this entirely to the callable at runtime.</p>
<p>For static code analysis your only option is to resolve the callable (hoping that it is not too dynamic in nature, e.g. will change at the runtime), and for C-defined objects have your own database of signatures. This is the route the <a href="http://docs.activestate.com/komodo/4.4/codeintel.html" rel="nofollow noreferrer">Komodo CodeIntel</a> library takes (OSS, used in other projects such as <a href="http://sublimecodeintel.github.io/SublimeCodeIntel/" rel="nofollow noreferrer">SublimeCodeIntel</a>). C-based extensions are supported with <a href="https://community.activestate.com/tags/komodo-codeintel-cix-apic" rel="nofollow noreferrer">CIX files</a>, which essentially contain callable signatures.</p>
<p>At runtime, you can use <a href="https://docs.python.org/3/library/inspect.html" rel="nofollow noreferrer"><code>inspect.signature()</code></a> to introspect call signatures. C functions are only partially supported at the moment, only those that use the Argument Clinic have signature info stored, see <a href="https://stackoverflow.com/questions/25847035/what-are-signature-and-text-signature-used-for-in-python-3-4/25847066#25847066">What are __signature__ and __text_signature__ used for in Python 3.4</a></p>
</div>
<span class="comment-copy">You'd have to resolve the object being called and analyse <i>that</i>. Python doesn't know this either <i>until you actually execute the call</i>.</span>
<span class="comment-copy">How do you define "required argument" for a Python function? Where is this defined?</span>
<span class="comment-copy">I'd refrain from naming your module <code>ast.py</code>.</span>
<span class="comment-copy">@Tichodroma: positional arguments on the callable object, presumably. But the AST of the <i>call expression</i> won't show this because that isn't known until you actually run the code.</span>
<span class="comment-copy">@Tichodroma I'm trying to think of a way to pre-empt 'TypeError: sum expected at least 1 arguments, got 0' at runtime. I'm actually not sure how this is defined for the sum() built-in function</span>
