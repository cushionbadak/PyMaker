<div class="post-text" itemprop="text">
<p>How to check to which module a function belongs?
Like,</p>
<pre><code>check_module(sqrt)
</code></pre>
<p>Would return <code>math</code> and so on, if at all. </p>
</div>
<div class="post-text" itemprop="text">
<p>Functions have a <code>__module__</code> attribute:</p>
<pre><code>&gt;&gt;&gt; from math import sqrt
&gt;&gt;&gt; sqrt.__module__
'math'
</code></pre>
<p>You can use the <a href="https://docs.python.org/3/library/inspect.html#inspect.getmodule" rel="nofollow noreferrer"><code>inspect.getmodule()</code> function</a> to get the actual module object for a given object:</p>
<pre><code>&gt;&gt;&gt; from inspect import getmodule
&gt;&gt;&gt; getmodule(sqrt)
&lt;module 'math' from '/Users/mj/Development/Library/buildout.python/python-3.4/lib/python3.4/lib-dynload/math.so'&gt;
</code></pre>
<p><code>inspect.getmodule()</code> works for more than just functions and classes; it'll go through some length to find a module for a given object, based on the metadata on that object.</p>
</div>
<span class="comment-copy">For me (<code>Python 2.7.3</code>) <code>&gt;&gt;&gt; getmodule(math.sqrt)</code> returns <code>&lt;module 'math' (built-in)&gt;</code></span>
<span class="comment-copy">@g4ur4v: <code>math</code> is a C-extension module, and it can either be compiled as a dynamically loaded library or made part of the Python binary itself. It looks like yours is compiled into the Python binary. <code>built-in</code> just means: no separate filename.</span>
<span class="comment-copy">@g4ur4v getmodule(math.sqrt) assumes you know the module 'math' already, not the case here.</span>
<span class="comment-copy">@AbdullahLeghari: even so, the result would not be any different; and just echoing <code>math</code> would also give the same output of course.</span>
<span class="comment-copy">It's usually better to avoid "from" imports - this eliminates the problem.</span>
