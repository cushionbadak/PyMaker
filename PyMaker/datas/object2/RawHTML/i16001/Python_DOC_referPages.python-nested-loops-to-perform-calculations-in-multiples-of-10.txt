<div class="post-text" itemprop="text">
<p>I'm new to using python and the goal of this program is to have it add (1/2) and (1/3) to itself a large number of times like the output below shows. What I believe I need to do is have the outer loop determine how many times to add when starting at "1000" and go up by multiples of ten from there (1000, 10000, 100000, etc...). The inner loop is where I want to do the actual addition of the (1/2) and (1/3). Below is the code I have currently written which isn't performing how I need it to as well as an example output of what the code should do. I think I'm on the right track I just don't know what else to do, I feel like I have tried everything. Any help with this would be greatly appreciated! Thanks!</p>
<p>My code:</p>
<pre><code>def main():

    for count in range(1000, 1000000000):
        sum12 = 0.0
        sum13 = 0.0
        for count2 in (1000, 1000000000):
            sum12 = sum12 + (1.0 / 2.0)
            sum13 = sum13 + (1.0 / 3.0)

        print(sum12, sum13)

main()
</code></pre>
<p>Example output:</p>
<pre><code>Iterations, 1/2 sum, 1/2 product, diff, 1/3 sum, 1/3 product, diff

1000 500.0 500.0 0.0 333.33333333333184 333.3333333333333 -1.4779288903810084e-12

10000 5000.0 5000.0 0.0 3333.3333333337314 3333.333333333333 3.9835867937654257e-10

100000 50000.0 50000.0 0.0 33333.33333328976 33333.33333333333 -4.3568434193730354e-08

1000000 500000.0 500000.0 0.0 333333.3333322413 333333.3333333333 -1.092033926397562e-06

10000000 5000000.0 5000000.0 0.0 3333333.3337136623 3333333.333333333 0.00038032932206988335

100000000 50000000.0 50000000.0 0.0 33333333.28415699 33333333.333333332 -0.04917634278535843

1000000000 500000000.0 500000000.0 0.0 333333332.6651181 333333333.3333333 -0.6682152152061462
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>What I believe I need to do is have the outer loop determine how many times to add when starting at "1000" and go up by multiples of ten from there (1000, 10000, 100000, etc...). </p>
</blockquote>
<p>In other words, your question is how to write something that's like your <code>range(1000, 1000000000)</code>, but instead of giving you all the values <code>1000</code>, <code>1001</code>, …, <code>1000000000</code>, it only gives you <code>1000</code>, <code>10000</code>, etc., right? So, just like <code>range(start, stop, step)</code>, except that it <em>multiplies</em>, instead of <em>adds</em>, <code>step</code> at each iteration.</p>
<hr/>
<p>Let's start with a simplified version of how <code>range</code> works:</p>
<pre><code>def range(start, stop, step):
    while start &lt; stop:
        yield start
        start += step
</code></pre>
<p>The real <code>range</code> is actually a sequence, not an iterator, and it handles things like negative step values, but let's ignore that; this minimal version is all you need.</p>
<hr/>
<p>If you don't understand that <code>yield</code> bit, read <a href="https://docs.python.org/3/tutorial/classes.html#iterators" rel="nofollow">Iterators</a> and the following section on Generators in the tutorial, but for the moment you can pretend it's a smarter version of this:</p>
<pre><code>def range(start, stop, step):
    result = []
    while start &lt; stop:
        result.append(start)
        start += step
    return result
</code></pre>
<hr/>
<p>So, how do we turn that into a geometric range that multiplies instead of adds? Just change the <code>+</code> to a <code>*</code>:</p>
<pre><code>def geometric_range(start, stop, step):
    while start &lt; stop:
        yield start
        start *= step
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>What I believe I need to do is have the outer loop determine how many times to add when starting at "1000" and go up by multiples of ten from there (1000, 10000, 100000, etc...). </p>
</blockquote>
<p>That is exactly what the sample output suggests you should do.</p>
<p>There are a number of ways to do this. I'll start with an easy to understand approach that will make most seasoned python programmers cringe and build up to something that hopefully wont make that seasoned python programmer cringe.</p>
<p>Here's the easy to understand, non-pythonic approach:</p>
<pre><code>count = 100 # Note that I'm starting at 100 rather than 1000
while count &lt; 1000000000 : 
    count = count * 10
    # Rest of your code goes here
</code></pre>
<p>In general, it's better to use a for loop than a while loop, and it's better to use some kind of generator. What you want to do is to perform your analysis on the numbers 10<sup>3</sup>, 10<sup>4</sup>, ..., 10<sup>8</sup>. This suggests working with the integers 3, 4, 5, ..., 8. In python, this is expressed with <code>range(3,9)</code>.</p>
<pre><code>for log10count in range(3,9) :
    count = 10**log10count
    # Rest of your code goes here
</code></pre>
<p>A seasoned python programmer might not cringe at the above, but will say that there's a better way. That better way starts with the python <code>map</code> function and ends with python list comprehensions. The <code>map</code> function takes a function and an <em>iterable</em> (or a set of <em>iterables</em>; <code>map</code> is a very powerful tool) as arguments. The result of the mapping is a list formed by applying the function to each element of the <em>iterable</em>. For example:</p>
<pre><code>def pow10 (n) :
    return 10**n
for count in map (pow10, range(3,9))
    # Rest of your code goes here
</code></pre>
<p>The above applies the rest of your code to the list <code>[1000, 10000, 100000, 1000000, 10000000, 100000000]</code>. There are a some issues with the above. The first is that I had to define that function <code>pow10</code> that most likely is never used anywhere else. Python has a concept of anonymous functions, implemented using the <code>lambda</code> keyword. We can get rid of that function <code>pow10</code> by using a lambda expression.</p>
<pre><code>for count in map (lambda n : 10**n, range(3,9))
    # Rest of your code goes here
</code></pre>
<p>We still haven't fixed all of the problems. One issue is that using <code>map</code> and <code>lambda</code> expressions, while certainly pythonic, is perhaps a bit too esoteric. Another problem is that <code>map</code> returns a list. It would be much better to use a generator that only generates values when they are needed. The way around both problems is python's concept of a <em>list comprehension</em>. List comprehensions also use anonymous functions, but the <code>lambda</code> is implied. Think of list comprehensions as a more compact and easier to understand version of <code>map</code>. In addition to mappings, list comprehensions can also filter out things before applying the anonymous mapping. List comprehensions are incredibly powerful. Here's the start of your program using a list comprehension:</p>
<pre><code>for count in (10**n for n in range(3,9)) :
    # Rest of your code goes here
</code></pre>
</div>
<span class="comment-copy">It's not entirely clear what part you're asking for help with, and what that part is doing wrong that you don't know how to change. I've made a guess (see my answer); please edit your question so that it's obvious whether my guess is right or wrong (and, if it's wrong, so that the next guy doesn't have to guess and screw up like me).</span>
<span class="comment-copy">Honestly, my assignment isn't entirely clear. What I do know is that I need to be able to reproduce the example output by using nested loops.</span>
<span class="comment-copy">Starting at 1000 and going by multiples of 10 would be 1000, 1010, 1020, 1030, ....  You want powers of 10.</span>
<span class="comment-copy">So I would replace all the starts with "1000", the stops with "1000000000" and set step equal to "10"?</span>
<span class="comment-copy">Is <code>[pow(10, x) for x in range(3, 10)]</code> a pythonic way to do this?</span>
<span class="comment-copy">@Ben: Well, you don't need to replace the variables manually with constants—that's what functions are for. Just add this function to your code, then use <code>geometric_range(1000, 1000000000, 10)</code> instead of <code>range(1000, 1000000000, 1)</code> in your code.</span>
<span class="comment-copy">@AntonSavin: Well, I'd probably write it similar to that. (I've got plenty of code that uses <code>2**x</code> or <code>8&lt;&lt;x</code> in a comprehension.) But without knowing whether the OP intuitively gets basic exponentiation and logarithms, I'm not sure I'd offer it as an answer. Also, I'd probably use a generator expression instead of a list comprehension (not that it matters much for only 7 values, but just out of principle).</span>
<span class="comment-copy">@AntonSavin:  Also, it would be nice to come up with some way to make it clearer without the reader having to know that <code>10</code> means <code>log(1000000000, 10)+1</code>… but I can't think of a good way to do that. (I wouldn't want to actually write <code>log(1000000000, 10)+1</code> in the code, that would be silly…)</span>
