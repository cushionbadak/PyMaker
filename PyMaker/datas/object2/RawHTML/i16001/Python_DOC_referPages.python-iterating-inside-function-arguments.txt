<div class="post-text" itemprop="text">
<p>I know I’ve seen (perhaps exclusively in other languages) where you can use for loops in function arguments. I forget what it was called, but in an attempt to make my code smaller I want to try it. For those of you who don't know what I'm talking about, it goes something like this:</p>
<pre><code>math.sum(for i in range(5)) # Just an example; code will probably not work
</code></pre>
<p>Or something like that? I'm not sure how it works yet, but I intend to learn. I know there is a name for this sort of thing, but I've forgotten what it is. Could anyone give me some pointers, or am I insane and this doesn't exist in python?</p>
</div>
<div class="post-text" itemprop="text">
<p>A "for loop as an expression" is usually called a "comprehension", at least in Haskell, Python, and other languages inspired by them.</p>
<p>Read <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">List Comprehensions</a> in the tutorial for an introduction to the idea. There are also set comprehensions and dict comprehensions, which are pretty obvious once you get list comprehensions.</p>
<p>Then there are generator expressions, which are a bit trickier—but a lot cooler. You're not going to understand those until you first read <a href="https://docs.python.org/3/tutorial/classes.html#iterators" rel="nofollow">Iterators</a>, and then <a href="https://docs.python.org/3/tutorial/classes.html#generators" rel="nofollow">Generators</a>, and then <a href="https://docs.python.org/3/tutorial/classes.html#generator-expressions" rel="nofollow">Generator Expressions</a> is the very next section.</p>
<p>It still probably won't be clear <em>why</em> generator expressions are cool, but <a href="http://www.dabeaz.com/generators-uk/" rel="nofollow">David Beazley explains that masterfully</a>.</p>
<hr/>
<p>To translate your code to real code, all you need is:</p>
<pre><code>math.sum(i for i in range(5))
</code></pre>
<p>However, what you're asking for is "all of the elements of <code>range(5)</code>, which you can do a lot more easily like this:</p>
<pre><code>math.sum(range(5))
</code></pre>
<p>Why? Because a <code>range</code> is already an iterable object.* If it weren't, you couldn't use it in a <code>for</code> loop in the first place, by definition.
Unless you have either some expression to perform on each element, or an <code>if</code> clause to filter the loop, or multiple <code>for</code> clauses for nested looping, comprehensions don't buy you anything. So, here's some more useful examples:</p>
<pre><code>math.sum(i*i for i in range(5))
math.sum(i for i in range(5) if i%3 != 0)
math.sum(j for i in range(5) for j in range(i))
</code></pre>
<p><sub>* Technically speaking, you're asking for an <em>iterator</em> over all of the elements in <code>range(5)</code>, not just any iterable over them. For a <code>for</code> loop it doesn't matter, but if you need something that you can call <code>next</code> on manually, have it remember its current position, etc., it does. In that case, what you want is <code>iter(range(5))</code>.</sub></p>
<hr/>
<p>The fact that your comprehension happens to be a function argument is almost completely irrelevant here. You can use them anywhere you can use an expression:</p>
<pre><code>squares_to_5 = (i*i for i in range(5)) # often useful
for square in (i*i for i in range(5)): # silly, but legal
</code></pre>
<p>However, notice that generator expressions need to be put inside parentheses. In the special case where a generator expression is the only argument to a function, so it's already in parentheses, you can leave the extra parentheses off.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're thinking of list comprehensions and generator expressions.</p>
<p>This would work in Python with only a slight modification:</p>
<pre><code>sum(i for i in range(5))
</code></pre>
<p>This is the seminal work on generators: <a href="http://www.dabeaz.com/generators/" rel="nofollow">http://www.dabeaz.com/generators/</a></p>
<p>Technically speaking they are completely unrelated to the fact that you're using them as function arguments:</p>
<pre><code>x = (i for i in range(5))
evens = [i for i in range(100) if i % 2 == 0]
even_squares = [i**2 for i in evens]
</code></pre>
</div>
