<div class="post-text" itemprop="text">
<p>I am working through Learn Python the Hard Way and am browsing through some code on Git Hub before moving on. I am just curious what the .N does on the line with "tm.N = 1000" and how it relates to the end of the code.</p>
<pre><code>import matplotlib.pyplot as plt

import random
import pandas.util.testing as tm
tm.N = 1000
df = tm.makeTimeDataFrame()
import string
foo = list(string.letters[:5]) * 200
df['indic'] = list(string.letters[:5]) * 200
random.shuffle(foo)
df['indic2'] = foo
df.boxplot(by=['indic', 'indic2'], fontsize=8, rot=90)

plt.show()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>N</code> is a global in the <code>testing.py</code> module, that is used all around the module to test arrays and other things. Its default value is 30. E.g.</p>
<pre><code>np.arange(N * K).reshape((N, K))
Series(randn(N), index=index)
</code></pre>
<p>In the code you're posting it have poor usage, because <code>makeTimeDataFrame</code> can be feed with a <code>nper</code> parameter that end up being substituted by <code>N</code> if <code>nper</code> is not provided. This is the correct usage, that would not confuse you:</p>
<pre><code>df = tm.makeTimeDataFrame(nper=1000)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The previous line, <code>import pandas.util.testing as tm</code>, imports the module <code>pandas.util.testing</code> and, for convenience, gives it the name <code>tm</code>.  Thus, <code>tm</code> afterwards refers to this module, and so <code>tm.N</code> refers to the object named "<code>N</code>" (whatever that is) in the module.</p>
</div>
<div class="post-text" itemprop="text">
<p>Source: <a href="https://github.com/pydata/pandas/blob/master/pandas/util/testing.py" rel="nofollow">https://github.com/pydata/pandas/blob/master/pandas/util/testing.py</a></p>
<p>N is a variable in the pandas.util.testing library (imported as <code>tm</code>). It's used in a few of the functions defined in that library, including the <code>makeTimeSeries</code> function called in the <code>getTimeSeriesData</code> which is in turn called in the <code>makeTimeDataFrame</code> function that you call with <code>df = tm.makeTimeDataFrame()</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can get information about <code>pandas.util.testing.N</code> from the <a href="http://www.pythonforbeginners.com/basics/python-docstrings" rel="nofollow">docstring</a> and the <a href="https://docs.python.org/3/library/functions.html#type" rel="nofollow">type()</a> function:</p>
<pre><code>&gt;&gt;&gt; tm.N.__doc__
'int(x[, base]) -&gt; integer\n\nConvert a string or number to an integer, if possible.  A floating point\nargument will be truncated towards zero (this does not include a string\nrepresentation of a floating point number!)  When converting a string, use\nthe optional base.  It is an error to supply a base when converting a\nnon-string.  If base is zero, the proper base is guessed based on the\nstring content.  If the argument is outside the integer range a\nlong object will be returned instead.'
&gt;&gt;&gt; print(tm.N.__doc__)
int(x[, base]) -&gt; integer

Convert a string or number to an integer, if possible.  A floating point
argument will be truncated towards zero (this does not include a string
representation of a floating point number!)  When converting a string, use
the optional base.  It is an error to supply a base when converting a
non-string.  If base is zero, the proper base is guessed based on the
string content.  If the argument is outside the integer range a
long object will be returned instead.
&gt;&gt;&gt; type(tm.N)
&lt;type 'int'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In pandas in the module pandas.util.testing the N property means TimeSeries 
See <a href="http://www.statalgo.com/2011/09/01/pandas-timeseries-and-dataframes-in-python/" rel="nofollow">this</a> reference in the section:</p>
<pre><code>We could alternatively have used the unit testing function to create a TimeSeries of length 20:


&gt;&gt;&gt;&gt; pandas.util.testing.N = 20
&gt;&gt;&gt;&gt; ts = pandas.util.testing.makeTimeSeries()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It makes a timeseries of length 1000. </p>
<pre><code>&gt;&gt;&gt; df.head()
Out[7]: 
                   A         B         C         D
2000-01-03 -0.734093 -0.843961 -0.879394  0.415565
2000-01-04  0.028562 -1.098165  1.292156  0.512677
2000-01-05  1.135995 -0.864060  1.297646 -0.166932
2000-01-06 -0.738651  0.426662  0.505882 -0.124671
2000-01-07 -1.242401  0.225207  0.053541 -0.234740
&gt;&gt;&gt; len(df)
Out[8]: 1000
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>.N provides the number of elements in array type. For example, if you use a colormap,
<code>plt.get_cmap('Pastel1').N</code> will return <code>9</code> because it consists of 9 colors whereas 
<code>plt.get_cmap('nipy_spectral').N</code> will return <code>256</code> </p>
</div>
<span class="comment-copy">Apparently <code>tm</code> is an object with property <code>N</code>.</span>
<span class="comment-copy"><a href="https://github.com/pydata/pandas/blob/master/pandas/util/testing.py" rel="nofollow noreferrer">github.com/pydata/pandas/blob/master/pandas/util/testing.py</a></span>
<span class="comment-copy">Thanks everyone for the explanations.</span>
<span class="comment-copy">Lots of people took the time to answer your questions, please mark one as an answer.</span>
