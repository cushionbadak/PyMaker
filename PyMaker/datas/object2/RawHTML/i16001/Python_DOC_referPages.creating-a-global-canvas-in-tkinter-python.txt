<div class="post-text" itemprop="text">
<p>I am doing a simple game as a school assignment but I have problems updating my canvas. I've tried some loops and sleep commands but they don't seem to work. Now I have code that should refresh the canvas but I have no idea how to pass my canvas into my updateCanvas function.</p>
<p>Basically I have two functions:</p>
<pre><code>def canvas(self):
    canvas = Canvas(self)
    button = Button(self, text="test", command=self.updateCanvas)
    button.place(x=240, y=5)
</code></pre>
<p>then I have a method that updates the canvas</p>
<pre><code>def updateCanvas(self):
    canvas.create_oval(ovalx, ovaly, ovalx2, ovaly2, fill="black")
</code></pre>
<p>pressing button should update canvas but it says that canvas isn't global. That makes sense. I've done java programming before. For some reason changing canvas to:</p>
<pre><code>def canvas(self):
    global canvas = Canvas(self)
</code></pre>
<p>this gives me a "Syntax Error: invalid syntax"</p>
<p>What should I do? Use a loop? Can't I create a global variable inside class? Think the game as checkers or chess where I need to update the screen when a checker or piece is moved.</p>
</div>
<div class="post-text" itemprop="text">
<p>First:</p>
<pre><code>global canvas = Canvas(self)
</code></pre>
<p>The reason this gives you a <code>SyntaxError</code> is that it's not valid Python.</p>
<p>The <a href="https://docs.python.org/3/reference/simple_stmts.html#the-global-statement" rel="nofollow"><code>global</code></a> statement just takes one or more names. If you want to assign anything to the name, you need a separate assignment statement:</p>
<pre><code>global canvas
canvas = Canvas(self)
</code></pre>
<p>(If you're wondering why Python is designed this way, it's not that hard to explain… but if you just want to know how to use Python, not how to design your own language, that isn't relevant here.)</p>
<p>However, you probably don't want to be using globals in the first place here. The whole point of classes is that their instances can have attributes, which tie together related state about something. You almost certainly want this instead:</p>
<pre><code>self.canvas = Canvas(self)
</code></pre>
<p>And then elsewhere, in your other methods, you do things like:</p>
<pre><code>self.canvas.create_oval(ovalx, ovaly, ovalx2, ovaly2, fill="black")
</code></pre>
<p>You may be confused because in Java, you declare instance members on the class, and then <code>canvas</code> magically means the same thing as <code>this.canvas</code>. Python doesn't work that way. Variables aren't declared anywhere, they're just created on the fly, and instance variables (and methods, too) always need an explicit <code>self.</code>.</p>
</div>
<span class="comment-copy">This answer makes me wonder if there is a compendium of syntax differences between languages, similar to MSDN but with a wider array of languages.  Being that there are so many similar concepts.  Or even just a summary of the languages in one place to compare all the benefits and drawbacks.</span>
<span class="comment-copy">@PJRosenburg: There are a lot of sites that compare and contrast two languages, but often they're either written by a partisan of one of the two languages ("Why JS sucks compared to Ruby"), or written as a guide for people moving from one language to the other ("Python for Java programmers"). But really, the syntax issues are usually a minor thing; without knowing that globals are still module-restricted in Python, and idiomatically most Java class variables should actually be Python globals, and so on, you're going to write bad code even if it compiles…</span>
<span class="comment-copy">@PJRosenburg: Also, Wikipedia is often surprisingly good for both syntactic and semantic differences across a wide range of languages for common features. For example, see <a href="http://en.wikipedia.org/wiki/For_loop" rel="nofollow noreferrer"><code>for</code></a>.</span>
