<div class="post-text" itemprop="text">
<p>I'm facing a problem in my python program, I have two optional arguments, the problem is that there must be at least one of these two arguments that must be used but the two arguments can't be passed together, is there a way of doing this with argparse ?</p>
<p>Here is the code I'm currently using:</p>
<pre><code>parser = argparse.ArgumentParser(description='worker')
arser.add_argument('-i', "--item", type=bool, default=False, required=False)
parser.add_argument('-o', "--offer", type=bool, default=False, required=False)
</code></pre>
<p>Here are some examples of how I would like it to work:</p>
<ul>
<li><p><code>./main.py -i True</code> =&gt; OK</p></li>
<li><p><code>./main.py -o True</code> =&gt; OK</p></li>
<li><p><code>./main.py -o True -i True</code> =&gt; Not OK</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest, you refactor the arguments and combine -o and -i into one mandatory argument. 
Then you define o and i (or whatever is appropriate) as allowed values using the <a href="https://docs.python.org/3/library/argparse.html#choices" rel="nofollow">choices</a> argument of <code>add_argument</code>.</p>
<p>E.g:</p>
<pre><code>   parser.add_argument('foo', choices=['i', 'o'])
</code></pre>
<p>Now the user has to specify one of the two, but can't specify both at the same time.</p>
</div>
<div class="post-text" itemprop="text">
<p>A <code>mutually_exclusive_group</code> will give you the required, but not both action.</p>
<p>But first, you don't want <code>type=bool</code>.  <code>bool</code> is a function that converts its input to <code>True</code> or <code>False</code>, but does not convert the string 'False' to boolean <code>False</code>.   I'd suggest using the <code>action='store_true'</code> instead.</p>
<pre><code>In [1]: import argparse
In [2]: parser=argparse.ArgumentParser()
In [3]: g = parser.add_mutually_exclusive_group(required=True)
In [4]: g.add_argument('-i', '--item', action='store_true')
In [5]: g.add_argument('-o', '--offer', action='store_true')

In [6]: parser.parse_args('-i'.split())
Out[6]: Namespace(item=True, offer=False)

In [7]: parser.parse_args('-o'.split())
Out[7]: Namespace(item=False, offer=True)

In [8]: parser.parse_args('-o -i'.split())
usage: ipython [-h] (-i | -o)
ipython: error: argument -i/--item: not allowed with argument -o/--offer

In [11]: parser.parse_args(''.split())
usage: ipython [-h] (-i | -o)
ipython: error: one of the arguments -i/--item -o/--offer is required
</code></pre>
<p>It raises an error is neither of <code>-i</code> or <code>-o</code> is used, or if both.  It sets the appropriate attribute to <code>True</code> if one or the other is used.  Note that the usage line indicates this 'exclusive or' logic with <code>(-i | -o)</code>.</p>
</div>
<span class="comment-copy">I don't know much about argparse, but this <a href="http://argparse.googlecode.com/svn/trunk/doc/other-methods.html#mutual-exclusion" rel="nofollow noreferrer">"mutual exclusion"</a> method sounds like it would be useful.</span>
<span class="comment-copy">Whenever you have "optional" arguments from which you must choose one, think "subparsers": <code>main.py item</code>, <code>main.py offer</code>.</span>
<span class="comment-copy">You don't need the <code>required=True</code>; positional arguments are <i>always</i> required (well, as long as you don't set <code>nargs='?'</code>, anyway).</span>
<span class="comment-copy">Thanks, I edited it out!</span>
