<div class="post-text" itemprop="text">
<p>Say I have the following folder structure:</p>
<pre><code>mysite
   - mysite
       - views.py
       - urls.py
   - books
       - views.py
       - urls.py
   - contact
       - views.py
       - urls.py
</code></pre>
<p>I want to seperate the views and urls to make the code easier to handle. Up until this point I have just been bundling the views into one file and urls into another, both in the "mysite" folder, but I feel this is the wrong thing to do. I started by trying to point the url "/contact" to the urls.py file in the contact folder, then that url would point to the view (called "contact") in the /contact/views.py file.</p>
<p><strong>/mysite/urls.py</strong></p>
<pre><code>from django.conf.urls import include, patterns, url
from mysite import views
from django.contrib import admin
admin.autodiscover()

urlpatterns = patterns('',
    url(r'^contact/$', include('contact.views.contact')),
)
</code></pre>
<p><strong>/contact/urls.py</strong></p>
<pre><code>from django.conf.urls import include, patterns, url
from mysite import views
from django.contrib import admin
admin.autodiscover()

urlpatterns = patterns('',
    url(r'^contact/$', views.contact),
)
</code></pre>
<p><strong>/contact/views.py</strong></p>
<pre><code>from django.core.mail import send_mail
from django.http import HttpResponseRedirect
from django.shortcuts import render

def contact(request):
    errors = []
    if request.method == 'POST':
        if not request.POST.get('subject', ''):
            errors.append('Enter a subject.')
        if not request.POST.get('message', ''):
            errors.append('Enter a message.')
        if request.POST.get('email') and '@' not in request.POST['email']:
            errors.append('Enter a valid e-mail address.')
        if not errors:
            send_mail(
                request.POST['subject'],
                request.POST['message'],
                request.POST.get('email', 'noreply@example.com'),
                ['siteowner@example.com'],
            )
            return HttpResponseRedirect('/contact/thanks/')
    return render(request, 'contact_form.html',
        {'errors': errors})
</code></pre>
<p>This is giving me the error</p>
<blockquote>
<p>ImportError at /contact<br/>
  No module named contact</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>include</code> should be pointing at a urls.py file, not a view.</p>
<p>Plus, you must not terminate the regex (with a $) in your main urlconf, otherwise there won't be anything to match against.</p>
<pre><code>url(r'^contact/', include('contact.urls')),
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You will need an <code>__init__.py</code> file in each of those subfolders in order for the import to work. It doesn't need anything in it; it just needs to be present.</p>
<p><a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow">Package documentation</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Pointing /contact to the urls.py file in the contact folder was working fine after @Daniel Roseman's help. </p>
<p>I then ended up matching "/contact/contact" because the second urls.py file only needed to match its root:</p>
<p><strong>/mysite/urls.py</strong></p>
<pre><code>url(r'^contact/', include('contact.urls')),
</code></pre>
<p><strong>/contact/urls.py</strong></p>
<pre><code>urlpatterns = patterns('',
    url(r'^$', views.contact),
)
</code></pre>
</div>
<span class="comment-copy">Thank you, that made an improvement. However I am now getting AttributeError at /contact - 'module' object has no attribute 'contact'. I don't think I need anything in the models.py file do I?</span>
<span class="comment-copy">Because your contact/urls.py file is importing the wrong views: it's importing from mysite, rather than contact.</span>
<span class="comment-copy">Yep just noticed that, I am getting a 404 now. My regex must be wrong somewhere</span>
<span class="comment-copy">Fixed it! I had the wrong url. It was looking for /contact/contact, because I has the same in both URL files... I changed the url.py file in the contact folder to match "url(r'^$', views.contact)," and it worked!</span>
<span class="comment-copy">Cool. Note that your contact view itself could be considerably simplified if you used a Django form.</span>
<span class="comment-copy">Yes they are there, I ran "python manage.py startapp contact", which gave me init, admin, models, tests, urls, views and a migrations folder.</span>
