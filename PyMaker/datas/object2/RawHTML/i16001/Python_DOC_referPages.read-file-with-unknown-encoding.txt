<div class="post-text" itemprop="text">
<p>I'm trying to load the columns of a file with a strange encoding. Windows appears to have no issues opening it, but Linux complains and I have only been able to open it using the <a href="https://atom.io/" rel="nofollow">Atom</a> text editor (others give me either a blank file or a file with data encoded)</p>
<p>The command:</p>
<pre><code>file -i data_file.tit
</code></pre>
<p>returns:</p>
<pre><code>application/octet-stream; charset=binary
</code></pre>
<p>Opening the file in binary mode and reading the first 400 bytes gives:</p>
<p><code>'0905077U1- a\r\nIntegration time: 19,00 ms\r\nAverage: 25 scans\r\nNr of pixels used for smoothing: 2\r\nData measured with spectrometer name: 0905077U1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\nWave   ;Dark     ;Ref      ;Sample   ;Absolute Irradiance  ;Photon Counts\r\n[nm]   ;[counts] ;[counts] ;[counts] ;[\xb5Watt/cm\xb2/nm]       ;[\xb5Mol/s/m\xb2/nm]\r\n247,40;-1,0378;18,713;10,738;21,132;0,4369\r\n247,'</code></p>
<p>The rest of the file consists only of ASCII numbers separated by semicolons.</p>
<p>I tried the following ways to load the file:</p>
<pre><code>with open('data_file.tit') as f:
    bytes = f.read() # (1)
    # bytes = f.read().decode('???')  # (2)
    # bytes = np.genfromtxt(f)  # (3)
    print bytes
</code></pre>
<ul>
<li><p><code>(1)</code> Sort of works but skips the first several hundred lines.</p></li>
<li><p><code>(2)</code> Failed with every <a href="https://docs.python.org/3/library/codecs.html#standard-encodings" rel="nofollow">encoding</a> I tried with the error:</p>
<pre><code>codec can't decode byte 0xb5 in position 315: unexpected special character
</code></pre></li>
<li><p><code>(3)</code> Complains about <code>ValueError: Some errors were detected !</code> and shows for each line something similar to <code>Line #3 (got 3 columns instead of 2)</code>.</p></li>
</ul>
<p>How can I load this data file?</p>
</div>
<div class="post-text" itemprop="text">
<p>You have a <a href="http://en.wikipedia.org/wiki/Windows-1252" rel="nofollow">codepage 1252</a> encoded text file, with one line containing NULL bytes. The <code>file</code> command determined you have binary data on the basis of those NULLs, while I made an educated guess on the basis of the <code>\xb2</code> and <code>\xb5</code> codepoints, which stand for the <code>²</code> and <code>µ</code> characters.</p>
<p>To open, just decode from that encoding:</p>
<pre><code>import io

with io.open(filename, 'r', encoding='cp1252') as f:
    for line in f:
        print(line.rstrip('\n\x00'))
</code></pre>
<p>The first 10 lines are then:</p>
<pre><code>0905077U1- a
Integration time: 19,00 ms
Average: 25 scans
Nr of pixels used for smoothing: 2
Data measured with spectrometer name: 0905077U1
Wave   ;Dark     ;Ref      ;Sample   ;Absolute Irradiance  ;Photon Counts
[nm]   ;[counts] ;[counts] ;[counts] ;[µWatt/cm²/nm]       ;[µMol/s/m²/nm]
247,40;-1,0378;18,713;10,738;21,132;0,4369
247,57;3,0793;19,702;9,5951;11,105;0,2298
247,74;-0,9414;19,929;8,8908;16,567;0,3430
</code></pre>
<p>The NULLs were stripped from the <em>Data measured with spectrometer name: 0905077U1</em> line; the spetrometer name is now 9 bytes long, together with the 55 NULLs it looks like the name could be up to 64 characters long and the file writer didn't bother to strip those NULLs.</p>
</div>
<div class="post-text" itemprop="text">
<p>Guessing an encoding can be really hard, luckily there's a library that tries to help with that: <a href="https://pypi.python.org/pypi/chardet" rel="nofollow">https://pypi.python.org/pypi/chardet</a></p>
</div>
<span class="comment-copy">We cannot possibly know. You have random data, we are not clairvoyants I am afraid.</span>
<span class="comment-copy">@MartijnPieters what do you mean? I posted a link to the file, I'm not hiding it.</span>
<span class="comment-copy">Your question needs to be self-contained however; don't expect people to download random data from the internets! And guessing at the encoding of your file is not going to be helpful to anyone else.</span>
<span class="comment-copy">How else can I share the data file? If I paste the contents here, won't they be overwritten or the encoding changed by the page? And finding a way to tell the encoding is part of the question.</span>
<span class="comment-copy"><code>repr()</code> can give you Python representations of the data. Open the file in binary mode (<code>'rb'</code>) and give us a sample perhaps.</span>
<span class="comment-copy">Thanks @Martijn. When I try this I get: <code>UnicodeEncodeError: 'ascii' codec can't encode character u'\xb5' in position 39: ordinal not in range(128)</code>. The issue is with the $\mu$ chars in line 7 I believe. Is there a way to skip reading these?</span>
<span class="comment-copy">@Gabriel: you are trying to decode data that is already Unicode. Don't do that.</span>
<span class="comment-copy">I'm just trying to read the file using your answer, nothing else I swear. I don't know why I get that error, I've tried stripping those characters using <code>\xb5</code> instead of <code>\n\x00</code> in your answer but it doesn't work.</span>
<span class="comment-copy">@Gabriel: try <code>print line.rstrip('\n\x00').encode('ascii', 'replace')</code>; that'll force an encoding to ASCII ignoring the 4 non-ASCII characters. That way you can at least see the file contents.</span>
<span class="comment-copy">@Gabriel: then your <i>console</i> or <i>terminal</i> can only handle ASCII output.</span>
<span class="comment-copy">May be a stupid question, but can't you use try: except: repeatedly with different guesses at the encoding until you get no errors?  Would this work?  I'm writing code that reads csv files but for a client that will be creating his own files so I have no idea what encoding they might be in.  Thanks.</span>
<span class="comment-copy">Not stupid, but also not Pythonic. chardet does the trick, so just use it.</span>
