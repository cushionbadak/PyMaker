<div class="post-text" itemprop="text">
<p>I'd like to make a simple clock (CLI) that prints the time into one line, and updates it every second. Is this even possible? Should I just print a new line every second?</p>
<p>This is what I have at the moment, which functions terribly:</p>
<pre><code>import calendar, time

a = 1
while a == 1:
    print (calendar.timegm(time.gmtime()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I understand, what you want to do is write the time, then, a second later, overwrite it with the new time, and so on.</p>
<p>On most terminals, printing a carriage return without a newline will take you back to the start of the same line. So, you can <em>almost</em> just do this:</p>
<pre><code>print('\r{}'.format(calendar.timegm(time.gmtime())), end='')
</code></pre>
<p>In general, there's a problem with this: the carriage return doesn't erase the existing text, it just lets you overwrite it. So, what happens if the new value is shorter than the old one? Well, in your case, that isn't possible; you're printing a 10-digit number that can never turn into a 9-digit number. But if it <em>were</em> a problem, the easiest solution would be to change that <code>{}</code> to something like <code>{&lt;70}</code>, which will pad a short line with spaces, up to 70 characters. (Of course if your lines could be longer than 70 character, or your terminal could be narrower than 70, don't use that number.)</p>
<hr/>
<p>Meanwhile, if you just do this over and over as fast as possible, you're wasting a lot of CPU and I/O, and possibly screwing up your terminal's scrollback buffer, and who knows what else. If you want to do this once per second, you should <code>sleep</code> for a second in between.</p>
<p>So:</p>
<pre><code>while True:
    print('\r{}'.format(calendar.timegm(time.gmtime())))
    time.sleep(1)
</code></pre>
<hr/>
<p>If you want to get fancy, you can take over the whole terminal with <a href="https://docs.python.org/3/library/curses.html" rel="nofollow"><code>curses</code></a> on most non-Windows platforms, <a href="https://docs.python.org/3/library/msvcrt.html#console-i-o" rel="nofollow"><code>msvcrt</code></a> console I/O on Windows, or even manually printing out terminal escape sequences. But you probably don't want to get fancy.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>print</code> function print newline (<code>\n</code>) after the string you passed. Specify carriage return (<code>\r</code>) explicitly does what you want.</p>
<p>To print every second, call <code>time.sleep(1)</code> after printing.</p>
<pre><code>import calendar
import time

while 1:
    print(calendar.timegm(time.gmtime()), end='\r')
    time.sleep(1)
</code></pre>
<p><strong>UPDATE</strong></p>
<p>To make cursor remains at the end of the line, prepend <code>\r</code>:</p>
<pre><code>print('\r', calendar.timegm(time.gmtime()), sep='', end='')
</code></pre>
</div>
<span class="comment-copy"><a href="http://docs.python.org/2/howto/curses.html" rel="nofollow noreferrer">Curses Programming with Python</a>. With the proper library, then: possible duplicate of <a href="http://stackoverflow.com/questions/9653688/how-to-refresh-curses-window-correctly">How to refresh curses window correctly?</a>.</span>
<span class="comment-copy">@jww: Curses is probably overkill for this. Not to mention that it would make his code much less portable—while <code>'\r'</code> won't work <i>everywhere</i>, it will work in more places than Curses, most notably on Windows (which, for all we know, is what the asker is using).</span>
<span class="comment-copy">+1, though I would prepend the <code>\r</code> instead of appending it, so that the cursor remains at the end of the line.</span>
<span class="comment-copy">@uʍopǝpısdn, updated the answer accordingly. Thank you for comment.</span>
