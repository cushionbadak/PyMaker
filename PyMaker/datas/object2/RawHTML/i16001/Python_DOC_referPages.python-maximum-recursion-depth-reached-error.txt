<div class="post-text" itemprop="text">
<p>So what I got here is a series of functions searching for the targeted value in a string.<br/>
(for example: find R in $&amp;(*,.02468:&lt;&gt;@BDFHJLNPRTVXZ\^`bdfhj, H is found at index 18.)</p>
<p>But when the test for the function is executed for some characters it works fine but for some others(such as D or L) it gives me the <strong><em>"maximum recursion depth reached error"</em></strong>. </p>
<p>Also for the characters in front such as $ in $&amp;(<em>,.02468:&lt;&gt;@BDFHJLNPRTVXZ\^`bdfhj, the result is <strong></strong></em>"it cannot be found"*</p></div>
<div class="post-text" itemprop="text">
<p>There are two issues in your <strong><code>str_search</code></strong> function.</p>
<ol>
<li><p>Code below fails for <code>$</code> which is at the beginning. Your search eventually comes to <code>(start,end)=(0,0)</code> then <code>start == end</code> will be <code>True</code>, returning <code>None</code></p>
<pre><code>if start == end:
    return None
</code></pre></li>
<li><p>Bigger problem is you enter into endless recursion loop in the code below when you search for 'D'. When you search for D, your start and end will be following <code>(0,35)</code>,<code>(0,16)</code>,<code>(8,16)</code>,<code>(12,16)</code>,<code>(14,16)</code>,<code>(15,16)</code>,<code>(15,16)</code>....<strong>infinitely</strong>!!!</p>
<pre><code>elif target &lt; mid_value:
    return str_search( data, target, start, mid_index-1 )
</code></pre></li>
</ol>
<p>I believe the fix for both 1 and 2 above can be done by handling situations where <code>end - start=1</code>.</p>
<p><strong>Remove lines below:</strong></p>
<pre><code>if start == end:
    return None
</code></pre>
<p><strong>Replace with:</strong></p>
<pre><code>if (end - start == 1):
    if target == data[end]:
        return end
    elif target == data[start]:
        return start
    else:
        return None
</code></pre>
<p>Quick sample way to test without having the you enter the input is:</p>
<pre><code>def testSearch():
    data =  makeString()
    for target in data:
        index = find_target(data, target )
        print()
        if index != None:
            print( target, "found at index", index )
        else:
            print( target, "not found" )

testSearch()
</code></pre>
<p>However if you want thorough testing you would be better off using python unit-testing and use assertions. See the documentation here: <a href="https://docs.python.org/2/library/unittest.html" rel="nofollow">https://docs.python.org/2/library/unittest.html</a> </p>
</div>
<div class="post-text" itemprop="text">
<p>This works without errors for the characters contained in the string:</p>
<pre class="lang-python prettyprint-override"><code>if target == mid_value:
    return mid_index
elif target == data[mid_index+1]:
    return mid_index+1
elif target &lt; mid_value:
    return str_search( data, target, start, mid_index )
else:
    return str_search( data, target, mid_index, end )
</code></pre>
<p>Built-in python function:</p>
<pre class="lang-python prettyprint-override"><code>data = "something"
index_of_chr_in_string = data.find("m")
# or
print("something".find("t"))
</code></pre>
</div>
<span class="comment-copy">Well, you obviously knew to insert some debugging print statements, so at what point does the debugging output differ from what you expected?</span>
<span class="comment-copy">You're asking multiple questions here. Which one do you want an answer to? If it's the last one, just "what seems to be wrong", that's way too broad for StackOverflow. If it's about maximum recursion depth, that's easy (Python doesn't allow unbounded recursion, and doesn't do tail call elimination, so you can't use recursive algorithms that might have a depth approaching 1000), but almost certainly a duplicate. If it's about something else, tell us specifically what's wrong that you need to fix. The other stuff makes nice background detail, but we still need to know the actual problem.</span>
<span class="comment-copy">Anyway, even without reading your code, I'm willing to be you've got an off-by-one error. That's really easy to do in a bisect algorithm. Look at the source to the stdlib's <code>bisect</code> module (linked from <a href="https://docs.python.org/3/library/bisect.html" rel="nofollow noreferrer">the documentation</a>; it's pretty easy to read and understand, so if you're trying to do the same thing, it should be easy to see (either by inspection or by printing out debug information) where your off-by-one is happening.</span>
<span class="comment-copy">Thanks! It did work! But now how would I test them if they work or not?</span>
<span class="comment-copy">@Eric, You can write a function to loop through each character of the data and test if it succeeds. If you are asking how to write test cases for your code please look at python unit testing. I will update the answer with this info and please select it as answer if it answered your questions.</span>
