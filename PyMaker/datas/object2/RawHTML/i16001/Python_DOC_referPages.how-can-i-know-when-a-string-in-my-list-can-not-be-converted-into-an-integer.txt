<div class="post-text" itemprop="text">
<p>Such that if there is a string that can not be converted into an integer it would produce an error message</p>
<p>Example: </p>
<pre><code>List = ['1', '2', 'a', '4/2']
-&gt;produce error message

List2 = ['1', '2', '4/2']
-&gt;proceed to condition
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You know when something can't be converted to an integer because it will throw a <a href="https://docs.python.org/2/library/exceptions.html#exceptions.ValueError" rel="nofollow noreferrer"><code>ValueError</code></a>.</p>
<pre><code>&gt;&gt;&gt; list1 = ['1', '2', 'a', '4/2']
&gt;&gt;&gt; for x in list1:
...     try:
...         int(x)
...     except ValueError:
...         print "Can't convert '%s' to an int" % x
...
1
2
Can't convert 'a' to an int
Can't convert '4/2' to an int
</code></pre>
<p>Notice that with this code block, only your <code>'1'</code> and <code>'2'</code> are converted to integers. <code>'a'</code> is obviously a character. <code>'4/2'</code> is a string made up of numbers. It is not evaluated as a mathematical expression. Doing something like this would take much more complicated logic.</p>
<p>The <code>try</code>/<code>except</code> logic is simple - Convert the item to an integer. If fails by throwing a <code>ValueException</code>, this can't become an integer. </p>
<p>Finally, a couple of the other answers have <code>try</code>/<code>except</code> blocks. However, they are not catching specific exception types. This is bad <a href="https://stackoverflow.com/a/736029/189134">practice.</a> Catch specific exceptions. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>for x in mylist:
    try:
        int(x)
    except:
        print("not possible to convert into int_variable")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's a function of string called "isdigit"</p>
<pre><code>print '4'.isdigit()
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If all you need is an error message when parsing the list, you could try:</p>
<pre><code>try:
    [eval(x) for x in list]
    # Do whatever with list here  
except:
    #Error code here
</code></pre>
<p>This isn't really the best approach and probably not the most secure if you are worried about that but might help do what you want.</p>
</div>
<span class="comment-copy">"4/2" cannot be converted to an integer, at least not via <code>int("4/2")</code>.. how are you planning to convert these strings?</span>
<span class="comment-copy">Anything can be converted to an integer if you try hard enough.</span>
<span class="comment-copy">@nu993t - you also have big integers, which would overflow the native data type.</span>
<span class="comment-copy">@jww: Python handles big integers without problems.</span>
<span class="comment-copy">please put some explanation to your answer</span>
<span class="comment-copy"><code>'-4'.isdigit()</code> is <code>False</code>.</span>
<span class="comment-copy">At least use <a href="http://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a> and catch the specific exception. Also, this doesn't ensure that integers are produced at all. Could be any object.</span>
