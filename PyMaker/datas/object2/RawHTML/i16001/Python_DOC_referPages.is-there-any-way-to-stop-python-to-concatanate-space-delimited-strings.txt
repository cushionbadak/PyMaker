<div class="post-text" itemprop="text">
<p>Recently we found a couple of bugs in our code based because a developer forgot to add a comma in the middle of a list of strings and python just concatenated the strings. 
look below:</p>
<p>The intended list was:
["abc", "def"]</p>
<p>Developer wrote:
["abc"
 "def"]</p>
<p>and we got: ["abcdef"]</p>
<p>now I am concerned over similar mistakes in other part of the code, is this functionality a core part of python? is it possible to disable it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, this is a <a href="https://docs.python.org/2/reference/lexical_analysis.html#string-literal-concatenation" rel="nofollow noreferrer">core part of python</a>:</p>
<blockquote>
<p>Multiple adjacent string literals (delimited by whitespace), possibly
  using different quoting conventions, are allowed, and their meaning is
  the same as their concatenation. Thus, <code>"hello" 'world'</code> is equivalent
  to <code>"helloworld"</code>.</p>
</blockquote>
<p>I don't think there is a way to disable it, short of hacking Python itself.</p>
<hr/>
<p>However, you could use the script below to <a href="https://docs.python.org/3/library/tokenize.html" rel="nofollow noreferrer">tokenize</a> your code and warn you when it finds multiple adjacent strings:</p>
<pre><code>import tokenize
import token
import io
import collections


class Token(collections.namedtuple('Token', 'num val start end line')):
    @property
    def name(self):
        return token.tok_name[self.num]

def check(codestr):
    lastname = None
    for tok in tokenize.generate_tokens(io.BytesIO(codestr).readline):
        tok = Token(*tok)
        if lastname == 'STRING' and lastname == tok.name:
            print('ADJACENT STRINGS: {}'.format(tok.line.rstrip()))
        else:
            lastname = tok.name


codestr = '''
'hello'\
'world'

for z in ('foo' 'bar', 'baz'):
    x = ["abc" "def"]
    y = [1, 2, 3]
'''

check(codestr)
</code></pre>
<p>yields</p>
<pre><code>ADJACENT STRINGS: 'hello''world'
ADJACENT STRINGS: for z in ('foo' 'bar', 'baz'):
ADJACENT STRINGS:     x = ["abc" "def"]
</code></pre>
</div>
<span class="comment-copy"><code>grep -IrH '"[^"]*"\s\+"[^"]*"' *</code> can help</span>
<span class="comment-copy">This would be a good incentive to write tests for your code.</span>
<span class="comment-copy">Why not use assertions to verify the length of the sequence?</span>
