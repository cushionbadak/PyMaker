<div class="post-text" itemprop="text">
<p>I am learning to use unittest with python and walkthrough with this example
<a href="http://agiletesting.blogspot.com/2005/01/python-unit-testing-part-1-unittest.html" rel="nofollow">http://agiletesting.blogspot.com/2005/01/python-unit-testing-part-1-unittest.html</a></p>
<p>so my test script is like this:</p>
<pre><code>import json
import urllib
import time
#from util import *
import httplib
#import sys
#from scapy.all import *
import unittest

import os, sys, socket, struct, select, time 
from threading import Thread

import logging
import traceback



class testFirewall( unittest.TestCase ):
    def setUp(self):
        """

            set up data used in the tests.

            setUp is called before each test function execution.

            """

            self.controllerIp="127.0.0.1"
        self.switches = ["00:00:00:00:00:00:00:01"]
        self.startTime_ = time.time()
        self.failed = False
        self.reportStatus_ = True
        self.name_ = "Firewall"
        self.log = logging.getLogger("unittest")

    def tearDown(self):
        if self.failed:
            return
        duration = time.time() - self.startTime_
        self.cleanup(True)
        if self.reportStatus_:
            self.log.info("=== Test %s completed normally (%d sec)", self.name_, duration

    def cleanup(self, success):
        sys.excepthook = sys.__excepthook__
        try:
            return
        except NameError:
            self.log.error("Exception hit during cleanup, bypassing:\n%s\n\n" % traceback.format_exc())
            pass
        else:

                fail("Expected a NameError")


    def testStatusFirewall(self):
        command = "http://%s:8080/wm/firewall/module/status/json" % self.controllerIp
        x = urllib.urlopen(command).read()
        parsedResult = json.loads(x)
        return parsedResult['result']


    def suite():

            suite = unittest.TestSuite()

            suite.addTest(unittest.makeSuite(testFirewall))

            return suite    

if __name__ == '__main__':
    logging.basicConfig(filename='/tmp/testfirewall.log', level=logging.DEBUG, 
                    format='%(asctime)s %(levelname)s %(name)s %(message)s')
    logger=logging.getLogger(__name__)  

    suiteFew = unittest.TestSuite()

        suiteFew.addTest(testFirewall("testStatusFirewall"))

        unittest.TextTestRunner(verbosity=2).run(suiteFew)

    #unittest.main()

        #unittest.TextTestRunner(verbosity=2).run(suite())
</code></pre>
<p>while running it in console using python .py</p>
<p>It gives me error   </p>
<pre><code>File "TestTest.py", line 44
    def cleanup(self, success):
      ^
SyntaxError: invalid syntax
</code></pre>
<p>I guess it is due to time module but as you can see I already had import time.</p>
<p>what can be the reason if I comment those line containing the time it works.</p>
<p>But i need to keep track of duration </p>
<p>What can be the reason and solution to this problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>The syntax error is in your tearDown method.</p>
<pre><code>def tearDown(self):
    if self.failed:
        return
    duration = time.time() - self.startTime_
    self.cleanup(True)
    if self.reportStatus_:
        self.log.info(
            "=== Test %s completed normally (%d sec)",
            self.name_,
            duration
        )
</code></pre>
<p>on the <code>self.log.info</code> call you forgot to close the parenthesis, that is the last line of your <code>tearDown</code> method.</p>
<p>I would also suggest you keep the style of your code conforming to PEP8</p>
</div>
<span class="comment-copy">check your log in teardown</span>
<span class="comment-copy">Thanks, is there any way to test multiple dependent function in python unittest? @Rafael</span>
<span class="comment-copy">@Milson, yes, if I understand your question correctly, you're looking for the <code>mock</code> library.</span>
<span class="comment-copy">Thanks @Rafael if you got link of that library module? please share</span>
<span class="comment-copy">@Milson I'm glad to help. Here is the link for the mock library docs: <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer">docs.python.org/3/library/unittest.mock.html</a>, here is the link for the PyPI: <a href="https://pypi.python.org/pypi/mock" rel="nofollow noreferrer">pypi.python.org/pypi/mock</a>, and here is a tutorial for mocking with python: <a href="http://www.toptal.com/python/an-introduction-to-mocking-in-python" rel="nofollow noreferrer">toptal.com/python/an-introduction-to-mocking-in-python</a>.  If my original answer fixes your original question, I would appreciate if you could accept that as the correct answer. Thank you!</span>
