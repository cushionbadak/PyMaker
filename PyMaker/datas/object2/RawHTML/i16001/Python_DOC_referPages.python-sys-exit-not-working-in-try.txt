<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/21553327/why-is-except-pass-a-bad-programming-practice">Why is “except: pass” a bad programming practice?</a>
<span class="question-originals-answer-count">
                    16 answers
                </span>
</li>
</ul>
</div>
<pre><code>Python 2.7.5 (default, Feb 26 2014, 13:43:17)
[GCC 4.4.7 20120313 (Red Hat 4.4.7-4)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import sys
&gt;&gt;&gt; try:
...  sys.exit()
... except:
...  print "in except"
...
in except
&gt;&gt;&gt; try:
...  sys.exit(0)
... except:
...  print "in except"
...
in except
&gt;&gt;&gt; try:
...  sys.exit(1)
... except:
...  print "in except"
...
in except
</code></pre>
<p>Why am not able to trigger sys.exit() in try, any suggestions...!!!</p>
<p>The code posted here has all the version details.</p>
<p>I have tried all possible ways i know to trigger it, but i failed.
It gets to 'except' block.</p>
<p>Thanks in advance..</p>
</div>
<div class="post-text" itemprop="text">
<p><code>sys.exit()</code> raises an exception, namely <code>SystemExit</code>. That's why you land in the <code>except</code>-block.</p>
<p>See this example:</p>
<pre><code>import sys

try:
    sys.exit()
except:
    print(sys.exc_info()[0])
</code></pre>
<p>This gives you:</p>
<pre><code>&lt;type 'exceptions.SystemExit'&gt;
</code></pre>
<p>Although I can't imagine that one has any practical reason to do so, you can use this construct:</p>
<pre><code>import sys

try:
    sys.exit() # this always raises SystemExit
except SystemExit:
    print("sys.exit() worked as expected")
except:
    print("Something went horribly wrong") # some other exception got raised
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>based on python wiki :</p>
<blockquote>
<p>Since <a href="https://docs.python.org/2/library/sys.html#sys.exit" rel="nofollow noreferrer">exit()</a> ultimately “only” raises an exception, it will only exit the process when called from the main thread, and the exception is not intercepted.</p>
</blockquote>
<p>And:</p>
<blockquote>
<p>The <code>exit</code> function is not called when the program is killed by a signal, when a Python fatal internal error is detected, or when <code>os._exit()</code> is called.</p>
</blockquote>
<p>Therefore, If you use <code>sys.exit()</code> within a <code>try</code> block python after raising the <code>SystemExit</code> exception python refuses of completing the <code>exits</code>'s functionality and executes the <code>exception</code> block.</p>
<p>Now, from a programming perspective you basically don't need to put something that you know definitely raises an exception in a <code>try</code> block. Instead you can either raise a <a href="https://docs.python.org/3/library/exceptions.html#SystemExit" rel="nofollow noreferrer"><code>SystemExit</code></a> exception manually or as a more Pythonic approach if you don't want to loose the respective functionalities of <code>sys.exit()</code> like passing optional argument to its constructor you can call <code>sys.exit()</code> in a <code>finally</code>, <code>else</code> or even <code>except</code> block.</p>
<p>Method 1 (not recommended)</p>
<pre><code>try:
    # do stuff
except some_particular_exception:
    # handle this exception and then if you want 
    # do raise SystemExit
else:
    # do stuff and/or do raise SystemExit
finally:
    # do stuff and/or do raise SystemExit
</code></pre>
<p>Method 2 (Recommended):</p>
<pre><code>try:
    # do stuff
except some_particular_exception:
    # handle this exception and then if you want 
    # do sys.exit(stat_code)
else:
    # do stuff and/or do sys.exit(stat_code)
finally:
    # do stuff and/or do sys.exit(stat_code)
</code></pre>
</div>
<span class="comment-copy">I closed this as a duplicate, because the other post explains a) what goes wrong and b) how to avoid this. Blanket <code>except:</code> clauses are not a good idea, at best use <code>except Exception:</code> to avoid catching <code>SystemExit</code>.</span>
<span class="comment-copy">use os._exit(0) if you don't want to trigger an exception.</span>
<span class="comment-copy">@Back2Basics: <b>Don't</b> call <code>os._exit()</code>; that just ensures nothing gets cleaned up as the processor exits.</span>
<span class="comment-copy">Is there any way to do this in try block.</span>
<span class="comment-copy">There is no reason, since what you try to achieve is raising an exception in <code>try</code> and "catch" it in the next moment. It is absolutely clueless ;-)</span>
<span class="comment-copy">Use <code>except Exception</code>, because <code>SystemExit</code> inherits directly from <code>BaseException</code>. See the <a href="https://docs.python.org/2/library/exceptions.html#exception-hierarchy" rel="nofollow noreferrer">exception hierarchy</a></span>
<span class="comment-copy">Thanks buddy..!! If u come across any idea regarding this, plz do update me.</span>
<span class="comment-copy">@onlyvinish He already gave you an idea! What else are you missing?</span>
<span class="comment-copy">Don't call <code>os._exit()</code> yourself, *just don't catch <code>SystemExit</code>. Calling <code>os._exit()</code> means nothing gets cleaned up either.</span>
