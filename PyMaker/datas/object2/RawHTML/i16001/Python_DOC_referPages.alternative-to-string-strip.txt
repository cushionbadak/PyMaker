<div class="post-text" itemprop="text">
<p>Often I use <code>string.strip</code> in conjunction with <code>map</code> to strip white-spaces in a list of string. <code>string</code> is a deprecated module. Pylint and Google Style Guide advise not to use it. What is the best way to string strip a list of string? </p>
<pre><code>&gt;&gt;&gt; import string
&gt;&gt;&gt; s = ['a', ' b', 'c ', ' d ']
&gt;&gt;&gt; print map(string.strip, s)
['a', 'b', 'c', 'd']
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3.4/library/stdtypes.html#str.split" rel="nofollow"><code>split</code></a> is a method of strings now. <code>map</code> is easily replaced with <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list</a> or <a href="https://docs.python.org/3/reference/expressions.html#generator-expressions" rel="nofollow">generator</a> comprehensions.</p>
<pre><code>print([i.strip() for i in s])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>strip</code> is also a method of the <code>str</code> and <code>unicode</code> builtin types. So, rather than digging <code>string.strip</code> out of a module, just pass the unbound method to <code>map</code>: <code>map(str.strip, s)</code></p>
</div>
<span class="comment-copy">... and map is a generator in python 3, so you have more changes to come.</span>
<span class="comment-copy">@PeterDeGlopper  That syntax works for 2.x and 3.x. You only have to worry about dropping the parentheses if you're printing multiple things or using keyword arguments. Though you should be using <code>from __future__ import print_function</code> in 2.x either way.</span>
<span class="comment-copy">There's no need to drop <code>map</code>, it hasn't even been moved out to <code>functools</code>.</span>
<span class="comment-copy">@jonrsharpe I find it less intuitive to use <code>str.strip</code> with <code>map</code>, so I usually recommend the list or generator comprehension. The comprehension also works whether your input is <code>bytes</code> or <code>str</code>, which can either be a useful or dangerous feature.</span>
