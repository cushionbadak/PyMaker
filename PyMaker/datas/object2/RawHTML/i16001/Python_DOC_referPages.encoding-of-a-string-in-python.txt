<div class="post-text" itemprop="text">
<p>I have a string S="Test" in Python. I want to encode the string into CP1256, ISO-8859-1, ISO-8859-2, ISO-8859-6, ISO-8859-15 and Window-1252 formats. How can I do the encoding of the string into the mentioned formats?</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know why Slava Bacherikov deleted his answer, but it was the right answer, so I'll repeat it with more detail.</p>
<hr/>
<p><a href="https://docs.python.org/3/library/stdtypes.html#str.encode" rel="nofollow"><code>str.encode</code></a> is exactly what you want:</p>
<blockquote>
<p>Return an encoded version of the string as a <code>bytes</code> object. Default encoding is <code>'utf-8'</code>. <em>errors</em> may be given to set a different error handling scheme. The default for errors is <code>'strict'</code>, meaning that encoding errors raise a <a href="https://docs.python.org/3.4/library/exceptions.html#UnicodeError" rel="nofollow"><code>UnicodeError</code></a>. Other possible values are <code>'ignore'</code>, <code>'replace'</code>, <code>'xmlcharrefreplace'</code>, <code>'backslashreplace'</code> and any other name registered via <a href="https://docs.python.org/3.4/library/codecs.html#codecs.register_error" rel="nofollow"><code>codecs.register_error()</code></a>, see section <a href="https://docs.python.org/3.4/library/codecs.html#codec-base-classes" rel="nofollow">Codec Base Classes</a>. For a list of possible encodings, see section <a href="https://docs.python.org/3.4/library/codecs.html#standard-encodings" rel="nofollow">Standard Encodings</a>.</p>
</blockquote>
<p>If you follow that link to Standard Encodings, you'll see a nice table that shows you the names to use for each of these (you can use either the main codec name, or any of the aliases). </p>
<p>So:</p>
<pre><code>encoded_bytes = [S.encode(codec) for codec in
                 ('cp1256', 'iso-8859-1', 'iso-8859-2', 'iso-8859-6', 
                  'iso-8859-15', 'windows-1252')]
</code></pre>
<hr/>
<p>While you <em>could</em> use <a href="https://docs.python.org/3/library/codecs.html#codecs.encode" rel="nofollow"><code>codecs.encode</code></a> as the other answers suggest, there's really no good reason to do so, and one good reason not to: <code>str.encode</code> enforces the fact that you're calling it on a <code>str</code> object, and using a codec that translates <code>str</code> to <code>bytes</code>; you'll get an exception if you accidentally use it on an already-encoded <code>bytes</code> or a <code>list</code> or something.</p>
<hr/>
<p>All of the above is assuming you're using Python 3. If you're using Python 2, a <code>str</code> is already encoded. So, if you can start with a <code>unicode</code> object, like <code>u"Test"</code> instead of <code>"Test"</code>, do that; if not, you will want to <code>decode</code> it first. Unfortunately, Python 2 won't enforce that; if you call <code>str.encode</code> it will actually decode it with <code>sys.getdefaultencoding</code>, which will usually be ASCII, which will lead to silly errors.</p>
</div>
<div class="post-text" itemprop="text">
<p>its what that <a href="https://docs.python.org/2/library/codecs.html#module-codecs" rel="nofollow"><code>codecs</code></a>  module is for :</p>
<pre><code>codecs.encode(S,'CP1256')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just use the <a href="https://docs.python.org/2/library/codecs.html" rel="nofollow"><code>codecs</code></a> module</p>
<pre><code>import codecs
codecs.encode("hello", "iso-8859-6")
</code></pre>
<p>If you want to first check if python is aware of a certain encoding format just use</p>
<pre><code>format_name = "iso-8859-6"
try:
    codecs.lookup(format_name)
except LookupError:
    print "Encoding {} can't be found".format(format_name)
</code></pre>
</div>
<span class="comment-copy">have you tried anything yourself?</span>
<span class="comment-copy">I tried for UTF-8, UTF-16 and ASCII encoding which was being encoded without any error, but i was facing problem in case of the mentioned encoding.</span>
<span class="comment-copy">Thanks Abarnert Finally it worked ... May god bless you :)</span>
<span class="comment-copy">Why use <code>codecs.encode(S)</code> instead of just <code>S.encode</code>?</span>
