<div class="post-text" itemprop="text">
<p>So, when I chose to enter certain data into a table, instead of entering the values that the variables represent, it enters the actual name of the variable, here's an example.</p>
<pre><code>name = Josh
surname = Smith
age = 15

import sqlite3

scores_db=sqlite3.connect('E:\\scores_db.db')
c=scores_db.cursor()

c.execute('''INSERT INTO Scores_1A
VALUES ('name','surname','age')''')
scores_db.commit()
scores_db.close()
</code></pre>
<p>When I check the database files, instead of having the information that the variable represents, it instead enters the variable name. I guess there is some kind of syntax to put around the variable name?</p>
</div>
<div class="post-text" itemprop="text">
<p>The string is passed literally to the database driver which has no idea there is a variable of that name in you Python code.</p>
<p>The seemingly straight forward solution to this problem is to use string formatting to substitute the representation of your variables into the SQL query before sending it to the database.</p>
<pre><code>c.execute("INSERT INTO Scores_1A VALUES ('{}', '{}', '{}')".format(name, surname, age))
</code></pre>
<p>However, <em>please don't do that</em>.  It makes your code vulnerable to <strong>SQL injection</strong> if one of the variables expands to some unexpected value.  For example consider what would happen if <code>name</code> was the string <code>"Robert'; DROP TABLE Scores_1A; -- "</code>.</p>
<p>Instead, you should use <strong>prepared statements</strong>:</p>
<pre><code>c.execute("INSERT INTO Scores_1A VALUES (?, ?, ?)", (name, surname, age))
</code></pre>
<p>Here, the database driver will receive the unmodified string followed by the serialized tuple of arguments.  This is not only faster but also secure against SQL injection.</p>
<p>From the <a href="https://docs.python.org/3/library/sqlite3.html" rel="nofollow">Python documentation</a>:</p>
<blockquote>
<p>Usually your SQL operations will need to use values from Python variables.  You shouldn't assemble your query using Python's string operations because doing so is insecure; it makes your program vulnerable to an SQL injection attack (see <a href="http://xkcd.com/327/" rel="nofollow">http://xkcd.com/327/</a> for humorous example of what can go wrong).</p>
<p>Instead, use the DB-API's parameter substitution.  Put <code>?</code> as a placeholder wherever you want to use a value, and then provide a tuple of values as the second argument to the cursor's <code>execute()</code> method.</p>
</blockquote>
</div>
<span class="comment-copy"><code>c.execute("""INSERT INTO Scores_1A VALUES ({}, {}, {})""".format(name, surname, age))</code> -- take a look at the Python documentation for string formatting</span>
<span class="comment-copy">Or using binding <code>c.execute('''INSERT INTO Scores_1A VALUES (?, ?, ?)''', (name, surname, age))</code></span>
<span class="comment-copy">@Stick Sorry I have to say this but I wish we could downvote your comment because that's exactly what you should <i>not</i> do.  Please see my answer for why.</span>
<span class="comment-copy">if SO's taught me anything it's that incomplete questions yield incomplete answers. there's no context for assuming this is for anything beyond a homework assignment. is it a client-facing app? is Little Bobby Tables ever going to see this code? The fact that no mention of string formatting was even in the OP makes it seem as though the author is entirely unaware of how to do it. SQL injection is a real thing, but it's a problem that homework assignments don't have</span>
<span class="comment-copy">@Stick If you find the question unclear, you can ask in a comment what the OP wants to do or if it seems hopeless, downvote it and move on.  Suggesting a bad solution is not going to help anyone, especially if the appropriate solution is actually even <i>less</i> to type.  Yes, this might be homework, but homework is there to learn.  And if you are learning database programming, you should really learn about how to prevent SQL injection.  At least if I am the guy who grades your homework, vulnerabilities to SQL injection <i>will</i> have negative consequences for you.</span>
<span class="comment-copy">Thank you...I guessed it was something like this, I just didn't know where to look. You've been a great help! &lt;3xox</span>
