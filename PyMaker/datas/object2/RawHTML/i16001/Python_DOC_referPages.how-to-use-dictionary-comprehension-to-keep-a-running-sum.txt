<div class="post-text" itemprop="text">
<p>I have a files scores that looks like: </p>
<pre><code>z:100
a:50
c:75
a:-20
c:45
a:10
c:20
z:10
z:-50
</code></pre>
<p>I want to return a dictionary with the key being the letter and the value being he sum of the value that letter has in the file. I am unsure how to keep a sum going while using this method.</p>
<p>I have</p>
<pre><code>a = {key: value for (key,value) in [line.strip().split(":") for line in    open("scores.txt","r")]}
print a
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd advise against cramming everything into one line here. You can do something like this (using <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow"><code>collections.defaultdict</code></a>):</p>
<pre><code>from collections import defaultdict

counts = defaultdict(int)

with open('scores.txt', 'r') as f:
    for line in f:
        name, score = line.strip().split(':')
        d[name] += int(score)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Are you sure you want a "one-line" dictionary comprehension?</p>
<pre><code>from itertools import imap, groupby
from operator import methodcaller, itemgetter

a = { k : sum(int(v[1]) for v in v_itr)
       for k, v_itr in groupby(sorted(imap(methodcaller("split", ":"),
                                           imap(methodcaller("rstrip"),
                                                open("scores.txt", "r"))),
                                      key=itemgetter(0)), itemgetter(0)) }
</code></pre>
<p>(This is not a recommendation to actually <em>use</em> this code; use the loop in arshajii's answer.)</p>
<p>A slightly easier-to-read version that uses a generator expression instead of nested calls to <code>imap</code>.</p>
<pre><code>a = { k : sum(int(v[1]) for v in v_itr)
       for k, v_itr in groupby(sorted(line.rstrip().split(":")
                                        for line in open("scores.txt", "r"),
                                      key=itemgetter(0)), itemgetter(0)) }
</code></pre>
</div>
<span class="comment-copy">...so what does what you have do? And what do you want instead? Why don't you do this in multiple lines, <i>then</i> consider whether it's worth compressing to a comprehension?</span>
<span class="comment-copy">Do you have any real reason to want to write a comprehension? Line breaks are free; write a loop.</span>
