<div class="post-text" itemprop="text">
<p>Have noticed someone write an enum like this:</p>
<pre><code>from enum import IntEnum

class Animal(IntEnum):
    dog = 1,
    cat = 2
</code></pre>
<p>And I thought it was a mistake which would make a runtime error because dog's value was actually a tuple.  To my surprise it works, and <code>Animal.dog.value == 1</code>.  </p>
<p>This works:</p>
<pre><code>class Potato(IntEnum):
    spud = ()
</code></pre>
<p>with the empty tuple being converted to integer 0 somehow (possibly argument splatting to a call to <code>int</code>?).  </p>
<p>This doesn't work though:</p>
<pre><code>class Potato(IntEnum):
    spud = []
</code></pre>
<p>We get <code>TypeError: int() argument must be a string or a number, not 'list'</code>.  </p>
<p>I see this on both python3 and the enum34 backport to python 2.  </p>
<p><strong>How/why <code>IntEnum</code> or his metaclass implicitly converts tuples to integers?</strong> </p>
</div>
<div class="post-text" itemprop="text">
<p>I had to look into <code>enum.py</code> to understand what happens. In fact, when you enter a value <strong>that is not a tuple</strong>, it is converted to <code>(value,)</code>, and if a tuple it is left unchanged. Then for a <code>IntEnum</code> the actual value is computed with <code>int(*args)</code>.</p>
<p>Ok, now what happens :</p>
<ul>
<li>if you give a simple int : <code>int(10) = 10</code>, all is fine</li>
<li>if you give a tuple containing a single int : conversion leads to same case</li>
<li>if you give a list : <code>int([...])</code> gives an error</li>
<li><p>if you give a tuple (string_value, base) example <code>('1f', 16)</code> : you correctly get 31 !</p>
<pre><code>&gt;&gt;&gt; class Animal(IntEnum):
    dog = '1F', 16
    cat = 5

&gt;&gt;&gt; Animal.dog.value
31
</code></pre></li>
</ul>
<p>But I could not find any trace of it in module documentation, and I thing it must be considered as an implementation detail ...</p>
</div>
<div class="post-text" itemprop="text">
<p>To support <code>__new__</code> and <code>__init__</code> methods, your values are converted to tuples and passed as arguments to the <code>__init__</code> or <code>__new__</code> method to produce the values of the enum. To support multiple arguments, any existing tuples are not converted.</p>
<p>In <a href="https://docs.python.org/3/library/enum.html#allowed-members-and-attributes-of-enumerations" rel="nofollow"><em>Allowed members and attributes of enumerations</em></a> it states:</p>
<blockquote>
<p>Note: if your enumeration defines <code>__new__()</code> and/or <code>__init__()</code> then whatever value(s) were given to the enum member will be passed into those methods. See <code>Planet</code> for an example.</p>
</blockquote>
<p>And in the <a href="https://docs.python.org/3/library/enum.html#planet" rel="nofollow"><em>Planet</em> example</a>:</p>
<blockquote>
<p>If <code>__new__()</code> or <code>__init__()</code> is defined the value of the enum member will be passed to those methods.</p>
</blockquote>
<p>For your case then, this happens:</p>
<ul>
<li>Single non-tuple values are converted to a tuple, so <code>2</code> becomes <code>(2,)</code></li>
<li>Tuple values are left untouched, so <code>1,</code> or <code>()</code> stay tuples.</li>
</ul>
<p>after which the <code>int.__new__</code> method is called as <code>int.__new__(*args)</code>.</p>
<p>Now what happens:</p>
<ul>
<li><code>int(1,)</code> is <code>1</code>.</li>
<li><code>int(2,)</code> is <code>2</code>.</li>
<li><code>int()</code> is <code>0</code>.</li>
</ul>
<p>You can extend this to support arbitrary base integers:</p>
<pre><code>&gt;&gt;&gt; class BasesOfTenEnum(IntEnum):
...     octal = '10', 8
...     decimal = '10', 10
...     hexadecimal = '10', 16
... 
&gt;&gt;&gt; list(BasesOfTenEnum)
[&lt;BasesOfTenEnum.octal: 8&gt;, &lt;BasesOfTenEnum.decimal: 10&gt;, &lt;BasesOfTenEnum.hexadecimal: 16&gt;]
</code></pre>
<p>As an interesting side note, to make matters just a little more complicated, if you mix in <code>tuple</code> with <code>Enum</code>, the tuple value is wrapped in another tuple so you can still pass it to <code>tuple.__new__</code> as a single argument.</p>
</div>
<span class="comment-copy">This doesn't answer your question, but it looks like the values are converted to tuple internally:  <a href="https://hg.python.org/cpython/file/3.4/Lib/enum.py#l141" rel="nofollow noreferrer">hg.python.org/cpython/file/3.4/Lib/enum.py#l141</a></span>
<span class="comment-copy">fun!  fortunately you can not trick the <code>@enum.unique</code> decorator by abusing this ..</span>
