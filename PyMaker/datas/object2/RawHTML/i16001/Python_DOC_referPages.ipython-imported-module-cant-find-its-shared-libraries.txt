<div class="post-text" itemprop="text">
<p>In iPython, I import a module, which in turn imports another module. This another module (namely gurobipy) tries to load its shared library, which fails. The path to the shared library is added to <code>LD_LIBRARY_PATH</code> in .bashrc. When I run the whole thing as a script from the shell, everything is fine.</p>
<p>I googled for a while now but didn't find the ultimate answer to the question: how do I set <code>LD_LIBRARY_PATH</code> in iPython such that imported modules will see it?</p>
<p>I tried os.environ but still got the same error message: <code>ImportError: libgurobi50.so: cannot open shared object file: No such file or directory</code></p>
<p>EDIT: I'm using Ubuntu 13.04.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try including LD_LIBRARY_PATH to a system-wide file. For instance, /etc/profile  (at the end of it). For instance this is what I needed to add for my case:</p>
<p>export NEVESIM_HOME=/home/kam/Applications/Nevesim</p>
<p>export LD_LIBRARY_PATH=${NEVESIM_HOME}/lib:${LD_LIBRARY_PATH}</p>
<p>Be careful with the syntax. Also you have to re-log in to make the changes active.
For more help see <a href="https://help.ubuntu.com/community/EnvironmentVariables" rel="nofollow">https://help.ubuntu.com/community/EnvironmentVariables</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The runtime library path is configured when the python (or IPython) interpreter starts up. <a href="https://stackoverflow.com/questions/856116/changing-ld-library-path-at-runtime-for-ctypes">Read this</a>.</p>
<p>It seems that tools like ctypes use this path when searching for libraries. Likewise, if a module depends on a particular library, it will search this path when it's imported or run.</p>
<p>This is true for any process, not just IPython. You can't just change the loader path while a process is running. <a href="https://stackoverflow.com/questions/1178094/change-current-process-environment">Also read this</a>.</p>
<p>If you think about it, that's really a good thing. It could cause all kinds of problems. All of the sudden, the process can't find a library it needs, and crashes.</p>
<p>This is unfortunate, though, as it means that IPython can't really be used as a full shell replacement.</p>
<p>I'm not sure how shells such as BASH handle this. I imagine that BASH uses one runtime path for itself, and exports another for processes run inside it.</p>
</div>
<span class="comment-copy">How are you starting IPython? If you start it from a terminal, it should get the same environment variables. You should be able to modify environment variables using <a href="https://docs.python.org/3/library/os.html#os.environ" rel="nofollow noreferrer">os.environ</a>.</span>
<span class="comment-copy">Yes, I forgot to mention that. I'm starting from the Unity launcher. You're right, when started from a terminal, it works. I am able to modify LD_LIBRARY_PATH with os.environ. However, when I then import the module, it still does not find the library.</span>
<span class="comment-copy">Possibly LD_LIBRARY_PATH has to be set before the process starts.</span>
<span class="comment-copy">I was thinking about that as well. I would, however, be really curious to know if it can be done from within the python script itself or from within an iPython shell.</span>
