<div class="post-text" itemprop="text">
<p>I want to prohibit certain operators being used in a function, for example, say I want to make sure the <code>**</code> power operator is not being used in the following function: </p>
<pre><code>def pow(x, y):
    return x ** y
</code></pre>
<p>I have used <code>inspect.getsource</code> to get the source and checked if <code>"**"</code> is in the source but that will wrongly cause an assert error if there happens to be <code>"**"</code> in the source elsewhere  so how to actually check the code for the existence of a particular operator?</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd personally go for Ashwini's answer if you have 3.4 at hand, however, if you need to be a bit more compatible and don't mind parsing the source, then you can make use of <code>ast</code>, eg:</p>
<pre><code>import inspect
import ast

def pow(x, y):
    return x ** y

nodes = ast.walk(ast.parse(inspect.getsource(pow)))
has_power = any(isinstance(node, ast.Pow) for node in nodes)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Note:</strong> Byte code we are dealing with here is a CPython implementation detail. Don't expect it to work on other implementations of Python. Prefer <a href="https://stackoverflow.com/a/25878033/846892">Jon Clements's approach</a>.</p>
<hr/>
<p>In CPython 3.4+ you can use <a href="https://docs.python.org/3/library/dis.html#dis.get_instructions" rel="nofollow noreferrer"><code>dis.get_instructions</code></a> to check if <a href="https://docs.python.org/3/library/dis.html#opcode-BINARY_POWER" rel="nofollow noreferrer"><code>BINARY_POWER</code></a> instruction is present in function's code object or not(Also explained in <a href="https://docs.python.org/3/whatsnew/3.4.html#dis" rel="nofollow noreferrer">What's new in Python 3.4</a> doc):</p>
<pre><code>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def search_instruction(code_object, instr_code):
        for ins in dis.get_instructions(code_object):
            if ins.opcode == instr_code:
                return True
        return False
... 
&gt;&gt;&gt; def f1():                                       
    s = x ** 2
...     
&gt;&gt;&gt; def f2():
    s = 'x ** 2'
...     
&gt;&gt;&gt; dis.opmap['BINARY_POWER']
19
&gt;&gt;&gt; search_instruction(f1.__code__, 19)
True
&gt;&gt;&gt; search_instruction(f2.__code__, 19)
False
</code></pre>
<hr/>
<p>For CPython 2.X specifically you can try <a href="https://pypi.python.org/pypi/byteplay/0.2" rel="nofollow noreferrer"><code>byteplay</code></a> package available on PyPI(its Python 3 fork: <a href="https://github.com/serprex/byteplay" rel="nofollow noreferrer">https://github.com/serprex/byteplay</a>).:</p>
<pre><code>&gt;&gt;&gt; import byteplay
&gt;&gt;&gt; def search_instruction(code_object, instr_code):
        for ins, _ in byteplay.Code.from_code(code_object).code:
                if ins == instr_code:
                    return True
        return False
...     
&gt;&gt;&gt; search_instruction(f1.__code__, 19)
True
&gt;&gt;&gt; search_instruction(f2.__code__, 19)
False
</code></pre>
<hr/>
<p><sub>Related: <a href="https://www.youtube.com/watch?v=ve7lLHtJ9l8" rel="nofollow noreferrer">Bytecode: What, Why, and How to Hack it - Dr. Ryan F Kelly</a></sub></p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe using the <a href="https://docs.python.org/2/library/dis.html" rel="nofollow noreferrer">dis</a> module?:</p>
<pre><code>In [9]: dis.dis(pow)
  2           0 LOAD_FAST                0 (x)
              3 LOAD_FAST                1 (y)
              6 BINARY_POWER
              7 RETURN_VALUE
</code></pre>
<p>You probably need to <a href="https://stackoverflow.com/a/14707227/1007990">redirect stdout to a stringIO</a> to parse it in Python&lt;3.4</p>
</div>
<span class="comment-copy">I think you would have to put in a dummy class instance, in which the forbidden operations (e.g., <b>pow</b>) raise an exception.</span>
<span class="comment-copy">I am using python 2.7, I should have specified. This is exactly what I was looking for, I had looked at <code>ast.walk</code> but was missing the <code>ast.parse</code> to make it work.</span>
<span class="comment-copy">cheers, I should have specified it was for python 2.7 but the answer will be useful to others no doubt, I could not find any related question on SO.</span>
<span class="comment-copy">Why the downvote?</span>
<span class="comment-copy"><code>dis</code> is not available in some python implementations.  <code>ast</code> is better choice.</span>
<span class="comment-copy">@wim Cool. Add a note about it.</span>
<span class="comment-copy">+1, cheers  for the answer.</span>
