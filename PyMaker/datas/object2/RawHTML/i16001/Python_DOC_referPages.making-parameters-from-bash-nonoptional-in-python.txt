<div class="post-text" itemprop="text">
<p>I'm pretty much a complete newbie when it comes to Python, and googling this leads to a lot of information about parameters... but not this specific question.</p>
<p>But here's the question: Is there an easy way to make a Python script require a variable when called from outside the script (e.g. Bash)? I realize I can just test on sys.argv, but it really seems like a clunky solution. </p>
<p>For example, could I construct this script so sys.argv[1] has to be passed to use the script without doing tests on it here?:</p>
<pre><code>#!/usr/bin/env python
import string
import random
import sys

def RandomString(length=6):
    x=''.join(random.choice(string.ascii_uppercase) for i in range(length))
    return x

random.seed(sys.argv[1])
y=RandomString()
print y
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/3/library/argparse.html#required" rel="nofollow">argparse</a> module. You can define positional arguments that are required, and it will return an error if that argument is not included. </p>
<pre><code>parser = argparse.ArgumentParser()
parser.add_argument('RandomSeed')
args = parser.parse_args()

random.seed(args.RandomSeed)
</code></pre>
<p>Usage of the above to lines from bash would be something like:</p>
<pre><code>python main.py thisisarandomstring
</code></pre>
<p>Argparse is a nice way to <em>parse</em> your <em>arguments</em> for a command line application(and is a preferred, or good avenue to take when you make a command line app). It automatically generates you some help pages and other documentation, and generates appropriate errors without you having to do all the overehead yourself. </p>
<p>Check out <a href="http://www.binaryadventure.com/2013/10/25/simple-argparse-tutorial/" rel="nofollow">this link</a> for a pretty nice tutorial. </p>
</div>
<div class="post-text" itemprop="text">
<ul>
<li>Argparser is not safe. "Argparse has built-in magic behavior to guess if something is an argument or an option." "Argparse currently does not support disabling of interspearsed arguments." Ref: <a href="http://click.pocoo.org/3/why/" rel="nofollow">http://click.pocoo.org/3/why/</a></li>
<li>You should always check argv because that is what is going to be used in your later code. Avoiding it seems nonsensical. </li>
</ul>
<p>An answer without running "tests" on argv the best I know how to. At least here we are not looking at <code>argv[1]</code>:</p>
<hr/>
<pre><code>#!/usr/bin/env python
import sys

if len(sys.argv) == 1:
    print 'not read in...exiting'
    exit()
print 'read in no problem'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's one possible solution with <code>argparse</code>, that will allow <em>any</em> string as a first argument. It's got two serious problems though: you can't define <em>any</em> optional arguments, which leads to the need to disable the <code>-h/--help</code> option. The technique for disabling options is a bit of a hack. Looking at the source, it's not enough to set <code>prefix_chars</code> to an empty string, but a tuple whose first <em>element</em> is an empty string. or maybe just an empty sequence. There might be some other issues as well.</p>
<pre><code>from argparse import ArgumentParser
p = ArgumentParser(add_help=False, prefix_chars=("",))
p.add_argument("randomseed")

args = p.parse_args()

random.seed(args.randomseed)
</code></pre>
<p>Then a call like</p>
<pre><code>python main.py -foo
</code></pre>
<p>would set <code>args.randomseed</code> to the string <code>-foo</code>.</p>
<p>Given all this, I think you will just have to accept you'll have to verify in-script that <code>sys.argv</code> has at least one command-line argument, since there is no better way to have <code>bash</code> check for you.</p>
<pre><code>try:
    randomseed = sys.argv[1]
except IndexError:
    # Do something here; I suggest just using a value that 
    # lets random.seed() invoke its default, no-argument behavior
    randomseed = None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This an extremely rich resource you should read about this: 
<a href="https://stackoverflow.com/a/4118133/3767980">https://stackoverflow.com/a/4118133/3767980</a></p>
<p>For below, I am just checking to see if the string has anything in it. If it is empty (not read in) it will print to the terminal and exit.</p>
<pre><code>#!/usr/bin/env python
import string
import random
import sys

# testing argv[1]

if 'argv[1]' in locals():
    print 'read in, no problem'
else:
    print 'not read in...exiting'
    exit()
fi
</code></pre>
<hr/>
<p>References:</p>
<ul>
<li><a href="https://stackoverflow.com/a/9573259/3767980">https://stackoverflow.com/a/9573259/3767980</a></li>
<li><a href="https://stackoverflow.com/a/4153344/3767980">https://stackoverflow.com/a/4153344/3767980</a></li>
<li><a href="https://stackoverflow.com/questions/4117530/sys-argv1-meaning-in-script">sys.argv[1] meaning in script</a></li>
<li><a href="https://stackoverflow.com/a/843293/3767980">https://stackoverflow.com/a/843293/3767980</a></li>
</ul>
</div>
<span class="comment-copy">You do realize that your question is "Can I write a script that requires a certain variable to exist without writing any code that actually ensures that the variable exists?" right?</span>
<span class="comment-copy">If I understand what you're saying, you want the requirement to somehow be checked before your script is run. This is therefore not a Python question, but a shell question.</span>
<span class="comment-copy">How would arguments be nonoptional other than by the code erroring when the argument is missing?</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/20063/whats-the-best-way-to-grab-parse-command-line-arguments-passed-to-a-python-scri">What's the best way to grab/parse command line arguments passed to a Python script?</a> See also <a href="http://stackoverflow.com/q/24833054">Argument parsing in Python: required vs. optional</a></span>
<span class="comment-copy">How does your script run if you don't give it that argument?  It raises an error, right?  Isn't that what any 'requirement' would do - raise an error if you don't give it the right arguments?  So the real question is: <code>what kind of error message do you want?</code>.</span>
<span class="comment-copy">Trying to read that manual page is confusing he hell out of me...</span>
<span class="comment-copy">@user2875994  tried to make it a little more clear if this is all new</span>
<span class="comment-copy">@user2875994: beware, if the argument looks like an option (starts with <code>-</code> then <a href="http://ideone.com/H7qNV3" rel="nofollow noreferrer"><code>argparse</code> won't recognize it as <code>randomseed</code> argument</a>)</span>
<span class="comment-copy">You could call the script with <code>python main.py -- -randomstring</code>, although I won't argue that's an ideal solution.</span>
<span class="comment-copy">@chepner can you hop on the python chat? I don't understand the edit you made, perhaps you can teach me? I don't see anything about RandomSeed on the docs</span>
<span class="comment-copy">I'm not entirely sure what is magical about "does the argument start with <code>-</code> (or a character in the parser's <code>prefix_chars</code> keyword argument)?".</span>
<span class="comment-copy">@chepner: if OP wants to accept <i>any</i> first command-line parameter as a random seed then <a href="http://stackoverflow.com/questions/25901786/making-parameters-from-bash-nonoptional-in-python#comment40544373_25902841"><code>argparse</code>'s behaviour to recognize options won't be helpful here.</a></span>
<span class="comment-copy">Unless I misunderstood your post, this seems to be exactly what I asked if you could avoid - running tests on the argv. I'm looking into KDEx's posted answer at the moment.</span>
<span class="comment-copy">Sorry, I misunderstood what you meant. See below.</span>
<span class="comment-copy">The string <code>argv[1]</code> is not going to appear as a key in the dictionary returned by <code>locals()</code>.</span>
<span class="comment-copy">Not even <code>argv</code> is going to be in locals() unless you change the <code>import</code> statement to <code>from sys import argv</code>, but the existence (or not) of <code>argv</code> only demonstrates that you've imported it, which is not very useful in this context.</span>
<span class="comment-copy">I realized this was not the best solution so I submitted a new answer. But I figured it was still useful to leave this up. But yes, I agree with you.</span>
