<div class="post-text" itemprop="text">
<p>I am creating a program that automatically generates my reports in LaTeX, where I have to escape special LaTeX characters. Basically, whenever I read <code>$</code> or <code>_</code> or <code>%</code>, etc, I have to replace it by <code>\$</code>, <code>\_</code> and <code>\%</code>, respectively.</p>
<p>I naively tried to do <code>mystring.replace('$','\$')</code>, yet it adds a double backslash, as shown below:</p>
<pre><code>my_text_to_parse = "$x^2+2\cdot x + 2 = 0$"
my_text_to_parse.replace('$','\$')
#=&gt; "\\$x^2+2\cdot x + 2 = 0\\$"
</code></pre>
<p>Is there any way to avoid doubling escape characters?</p>
</div>
<div class="post-text" itemprop="text">
<p>You're seeing the double backslash because you're getting the <a href="https://docs.python.org/3/library/functions.html#repr" rel="nofollow"><em>representation</em></a> of the string, not the output. In the representation, it prints an backslash because <code>\</code> is a protected character and therefore must be escaped. This is because it is used in special characters (e.g. <code>\t</code>, <code>\n</code>) and usage might be confused.. When the string is actually printed or saved, those double backslashes should be printed properly as a single backslash.</p>
<p>For example, compare</p>
<pre><code>print('\')
# SyntaxError: EOL while scanning string literal
</code></pre>
<p>to</p>
<pre><code>print('\\')
# \
</code></pre>
<p>In the first string, the second quotation mark is being escaped by the backslash. This shows why you generally can't use raw backslashes in strings. In the second string, the second backslash is being escaped by the first. The two backslashes get interpreted as a single one.</p>
<pre><code>print(repr('\\'))
# '\\'
</code></pre>
<p>But the representation of the second string still shows both backslashes. This behavior is the same as other special characters such as <code>\n</code>, where it can be a bit easier to see the issue. Just as <code>\n</code> is the special character that means <code>line break</code>, <code>\\</code> is the special character that means <code>single backslash</code>.</p>
<pre><code>print('hi\nmom')
# hi
# mom

print(repr('hi\nmom'))
# 'hi\nmom'
</code></pre>
<hr/>
<p>To actually answer your question, the way you're doing it should work properly, but you probably don't want to do it quite that way. This is because creating a string with <code>'\$'</code> doesn't make this escaping issue clear. It seems like it is a special character <code>\$</code> in the same way that <code>\n</code> is a special character, but because there is no character defined like that, the python interpreter is smart enough to replace the single backslash with a double backslash. But you generally don't want to rely on that behavior.</p>
<p>A better way to do it is to explicitly escape the backslash with another one or to use a <a href="https://docs.python.org/3.4/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow">raw string</a>, where no escaping is allowed. All of these will give the same result.</p>
<pre><code>s = '$x^2+2\\cdot x + 2 = 0$'

print(s.replace('$', '\$'))   # Technically works, but not as clear
# \$x^2+2\cdot x + 2 = 0\$

print(s.replace('$', '\\$'))  # Escaping the backslash
# \$x^2+2\cdot x + 2 = 0\$

print(s.replace('$', r'\$'))  # Using a raw string
# \$x^2+2\cdot x + 2 = 0\$
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>print re.sub(r"\$","\$",x)
</code></pre>
<p>You can try re.sub.It will give the expected result.</p>
</div>
