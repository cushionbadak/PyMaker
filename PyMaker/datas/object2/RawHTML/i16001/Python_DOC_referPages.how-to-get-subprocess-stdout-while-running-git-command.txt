<div class="post-text" itemprop="text">
<p>I have a program written in python and used git command in it..
For some reason I don't want to use git-python or others instead of subprocess.
But I'm currently stuck in getting <code>git clone</code> output.</p>
<p>I've tried some code snippet. Some works fine with commands like <code>ping 8.8.8.8</code>, but not the <code>git clone</code>.</p>
<p>for example</p>
<p>using thread</p>
<pre><code>def log_worker(stdout):
    while True:
        last = non_block_read(stdout).strip() 
        if last != "":
            print(last)


def non_block_read(output):
    fd = output.fileno()
    fl = fcntl.fcntl(fd, fcntl.F_GETFL)
    fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)
    try:
        return output.read()
    except:
        return ''

def test():
    mysql_process = subprocess.Popen(
        "ping google.com",
        shell=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE)

    thread = Thread(target=log_worker, args=[mysql_process.stdout])
    thread.daemon = True
    thread.start()

    mysql_process.wait()
    thread.join(timeout=1)

test()
</code></pre>
<p>or </p>
<pre><code>newlines = ['\n', '\r\n', '\r']
def unbuffered(proc, stream='stdout'):
    stream = getattr(proc, stream)
    with contextlib.closing(stream):
        while True:
            print('tt')
            out = []
            last = stream.read(1)
            # Don't loop forever
            if last == '' and proc.poll() is not None:
                break
            print('last', last)
            while last not in newlines:
                print("loop")
                # Don't loop forever
                if last == '' and proc.poll() is not None:
                    break
                out.append(last)
                last = stream.read(1)
            out = ''.join(out)
            yield out

def example():
    cmd = ['ls', '-l', '/']
    proc = subprocess.Popen(
        cmd,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        # Make all end-of-lines '\n'
        universal_newlines=True,
        shell = True
    )
    for line in unbuffered(proc):
        print('new line')
        print line

example()
</code></pre>
<p>and most common one</p>
<pre><code>for line in iter(proc.stdout.readline, ''):
    sys.stdout.write('{:.2f}  {}\n'.format(
        time.time() - start,
        line.rstrip()
    ))
    sys.stdout.flush()
</code></pre>
<p>all of them works fine with <code>ping google.com</code>, but not <code>git clone</code>.
Is there any way to solve this?
Thanks in advance!</p>
<p>UPDATE1:
In face, I'm just want to get the finished percent of <code>git clone</code>. Log or any log files are not needed.</p>
</div>
<div class="post-text" itemprop="text">
<p>When not writing to a terminal, <code>git clone</code> doesn't have any output to either stdout or stderr, except on error.</p>
<p>When writing to a terminal, of course, it has lots of output—but that output is progress bars that are continually overwritten. Usually, you don't want that—it's going to be a big mess of control characters and repeated lines.</p>
<p>But if you <em>do</em> want it, there are two options.</p>
<hr/>
<p>First, you can use a PTY (Pseudo-TTY). You can create a PTY with <a href="https://docs.python.org/3/library/os.html#os.openpty" rel="nofollow"><code>os.openpty</code></a>, then hand the PTY off explicitly to the child process. Or you can use <a href="https://docs.python.org/3/library/os.html#os.forkpty" rel="nofollow"><code>os.forkpty</code></a>, which handles forking and automatically hooking up the PTY so all you have to do is call one of the <a href="https://docs.python.org/3/library/os.html#process-management" rel="nofollow"><code>os.exec</code></a> functions. Or you can use the <a href="https://docs.python.org/3/library/pty.html#module-pty" rel="nofollow"><code>pty</code></a> module. (It's not entirely clear which is more portable; <code>openpty</code> and <code>forkpty</code> claim that <code>pty</code> is more portable, and conceptually it's designed that way… but it's also only really tested on Linux.)</p>
<p>Note that <code>git</code> wants the PTY as its stderr, not its stdout.</p>
<hr/>
<p>Alternatively, most <code>git</code> commands have a <code>--progress</code> flag that causes them to write progress to stderr even if it's not a terminal. At least as of the version documented <a href="https://www.kernel.org/pub/software/scm/git/docs/git-clone.html" rel="nofollow">here</a>, this includes <code>clone</code>, but of course you should check the <code>man</code> for your local version. So, that <em>may</em> be all you need. (Also see the <code>--verbose</code> flag.)</p>
<p>However, this may not be as nice. For me, when I provide a PTY with no attached termcaps, I get each line followed by a <code>\r</code> without <code>\n</code> to overwrite it; when I use the <code>--progress</code> option, <code>git</code> detects the termcaps of whatever terminal my script happens to be running it, which means I end up getting ANSI color codes as well as <code>\r</code>s.</p>
<hr/>
<p>Of course either way I'm getting hundreds of useless lines that I have no interest in, but I assume that's what you wanted? (Or maybe you want to use <code>universal_newlines='\r'</code> to translate the <code>'\r'</code> to <code>'\n'</code>? That's slightly cheating, because this is self-overwriting Unix terminal output, and you're pretending it's classic-Mac output… but it works.)</p>
</div>
<span class="comment-copy">Why are you using <code>shell=True</code> (especially since you're using an argument list rather than a shell command line)?</span>
<span class="comment-copy">wouldn't subprocess.check_output be a whole lot easier?</span>
<span class="comment-copy">Also, in what word is the last version "most common"? When have you ever needed log-style timestamping but not wanted to use the <code>logging</code> module?</span>
<span class="comment-copy">related: <a href="http://stackoverflow.com/q/25750468/4279">Displaying subprocess output to stdout and redirecting it</a></span>
<span class="comment-copy">look at <a href="http://stackoverflow.com/a/25968448/4279"><code>pty.spawn()</code> solution</a></span>
<span class="comment-copy">Thank you for your advice. I assume that the PTY solution would be painful on over-cross platform? My program must runs on Windows 7 and MacOS.</span>
<span class="comment-copy">@RobinZhang: On Windows there's no way to use a PTY. (Windows does have a similar concept, but Python doesn't try to wrap the two concepts up in a single API.) So I suppose <code>--progress</code> is the only option. But first: does the problem actually happen on Windows in the first place? Many command-line apps don't do the <code>isatty</code> check at all on Windows, which means you can just use a PTY on Unix and do nothing special on Windows…</span>
<span class="comment-copy">+1 for <code>git clone --progress -- repo</code></span>
<span class="comment-copy">Thanks ! <code>--progress</code> is what I wanted !</span>
