<div class="post-text" itemprop="text">
<p>Am getting this error when using the <code>pool.map(funct, iterable)</code>:</p>
<pre><code>AttributeError: __exit__
</code></pre>
<p>No Explanation, only stack trace to the pool.py file within the module.</p>
<p>using in this way:</p>
<pre><code>with Pool(processes=2) as pool:
   pool.map(myFunction, mylist)
   pool.map(myfunction2, mylist2)
</code></pre>
<p>I suspect there could be a problem with the picklability (python needs to <code>pickle</code>, or transform list data into byte stream) yet I'm not sure if this is true or if it is how to debug.</p>
<p>EDIT: new format of code that produces this error :</p>
<pre><code>def governingFunct(list):
    #some tasks
    def myFunction():
         # function contents
    with closing(Pool(processes=2)) as pool:
         pool.map(myFunction, sublist)
         pool.map(myFunction2, sublist2)
</code></pre>
<p>ERROR PRODUCED:</p>
<pre><code>PicklingError: Can't pickle &lt;type 'function'&gt;: attribute lookup __builtin__.function failed
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2.x and 3.0, 3.1 and 3.2, <code>multiprocessing.Pool()</code> objects are <em>not context managers</em>. You cannot use them in a <code>with</code> statement. Only in Python 3.3 and up can you use them as such. From the <a href="https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.pool">Python 3 <code>multiprocessing.Pool()</code> documentation</a>:</p>
<blockquote>
<p><em>New in version 3.3</em>: Pool objects now support the context management protocol â€“ see Context Manager Types. <code>__enter__()</code> returns the pool object, and <code>__exit__()</code> calls terminate().</p>
</blockquote>
<p>For earlier Python versions, you could use <a href="https://docs.python.org/2/library/contextlib.html#contextlib.closing"><code>contextlib.closing()</code></a>, but take into account this'll call <em><code>pool.close()</code></em>, not <code>pool.terminate()</code>. Terminate manually in that case:</p>
<pre><code>from contextlib import closing

with closing(Pool(processes=2)) as pool:
    pool.map(myFunction, mylist)
    pool.map(myfunction2, mylist2)
    pool.terminate()
</code></pre>
<p>or create your own <code>terminating()</code> context manager:</p>
<pre><code>from contextlib import contextmanager

@contextmanager
def terminating(thing):
    try:
        yield thing
    finally:
        thing.terminate()

with terminating(Pool(processes=2)) as pool:
    pool.map(myFunction, mylist)
    pool.map(myfunction2, mylist2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>with</code> statement is for object that have <code>__enter__</code> and <code>__exit__</code> functions, i.e.  <a href="https://docs.python.org/2/library/stdtypes.html#typecontextmanager" rel="nofollow">Context Manager Types</a><br/>
<code>multiprocessing.Pool</code> is not Context Manager Type.
try do the following:</p>
<pre><code>pool = Pool(processes=2)
pool.map(myFunction, mylist)
pool.map(myfunction2, mylist2)
</code></pre>
</div>
<span class="comment-copy">what do you mean by <code>while .. as</code>? did you mean <code>with</code>?</span>
<span class="comment-copy">Do include the <i>full traceback</i> for errors, and your actual code. <code>while</code> is an obvious syntax error here, for example, but from the exception it is clear you used <code>with</code> really.</span>
<span class="comment-copy">Well Sir thank you for such a detailed explanation. You're solution has moved the function a step closer to working - now I am getting this error:  <code>PicklingError: Can't pickle &lt;type 'function'&gt;: attribute lookup __builtin__.function failed</code></span>
<span class="comment-copy">@sidewaiise: are you trying to use a method on a class perhaps? See <a href="http://stackoverflow.com/q/3288595">Multiprocessing: using Pool.map on a function defined in a class</a></span>
<span class="comment-copy">Heh I was actually just reading that as you posted this. Thanks - I'll have a read and comment shortly.</span>
<span class="comment-copy">Not sure I understand the solution on that link - I'm not using classes. It's as simple as I wrote above, except that it is inside another function.... eg:  **** Refer to Edited Question ^ ****  So not sure.. any ideas?</span>
<span class="comment-copy">@paulochf: for some reason the decorator line was missing. Only import it when you actually plan on using it! :-) (and <i>sorry</i>).</span>
<span class="comment-copy">The question is <i>why the OP thought it was</i>. The answer is that the Python 3 documentation tells you it is. But it also qualifies that as Python 3.3 and up.</span>
<span class="comment-copy">ok. didn't know it is context mgr in Python 3.3 and up</span>
