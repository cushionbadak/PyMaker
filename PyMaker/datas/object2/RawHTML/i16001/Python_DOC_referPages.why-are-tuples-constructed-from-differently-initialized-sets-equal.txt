<div class="post-text" itemprop="text">
<p>I expected the following two tuples</p>
<pre><code>&gt;&gt;&gt; x = tuple(set([1, "a", "b", "c", "z", "f"]))
&gt;&gt;&gt; y = tuple(set(["a", "b", "c", "z", "f", 1]))
</code></pre>
<p>to compare unequal, but they don't:</p>
<pre><code>&gt;&gt;&gt; x == y
&gt;&gt;&gt; True
</code></pre>
<p>Why is that?</p>
</div>
<div class="post-text" itemprop="text">
<p>At first glance, it appears that <code>x</code> should always equal <code>y</code>, because two sets constructed from the same elements are always equal:</p>
<pre><code>&gt;&gt;&gt; x = set([1, "a", "b", "c", "z", "f"])
&gt;&gt;&gt; y = set(["a", "b", "c", "z", "f", 1])
&gt;&gt;&gt; x
{1, 'z', 'a', 'b', 'c', 'f'}
&gt;&gt;&gt; y
{1, 'z', 'a', 'b', 'c', 'f'}
&gt;&gt;&gt; x == y
True
</code></pre>
<p><strong>However</strong>, it is <em>not</em> always the case that tuples (or other ordered collections) constructed from two equal sets are equal.</p>
<p>In fact, the result of your comparison is sometimes <code>True</code> and sometimes <code>False</code>, at least in Python &gt;= 3.3. Testing the following code:</p>
<pre class="lang-py prettyprint-override"><code># compare.py
x = tuple(set([1, "a", "b", "c", "z", "f"]))
y = tuple(set(["a", "b", "c", "z", "f", 1]))
print(x == y)
</code></pre>
<p>... a thousand times:</p>
<pre class="lang-sh prettyprint-override"><code>$ for x in {1..1000}
&gt; do
&gt;   python3.3 compare.py
&gt; done | sort | uniq -c
147 False
853 True
</code></pre>
<p>This is because, since Python 3.3, the hash values of strings, bytes and datetimes are randomized as a result of a <a href="https://mail.python.org/pipermail/python-announce-list/2012-March/009394.html">security fix</a>. Depending on what the hashes are, "collisions" may occur, which will mean that the order items are stored in the underlying array (and therefore the iteration order) depends on the insertion order.</p>
<p>Here's the relevant bit from the docs:</p>
<blockquote>
<p>Security improvements:</p>
<ul>
<li>Hash randomization is switched on by default.</li>
</ul>
<p>— <a href="https://docs.python.org/3/whatsnew/3.3.html#summary-release-highlights">https://docs.python.org/3/whatsnew/3.3.html</a></p>
</blockquote>
<p><strong>EDIT</strong>: Since it's mentioned in the comments that the <code>True</code>/<code>False</code> ratio above is superficially surprising ...</p>
<p>Sets, like dictionaries, are implemented as hash tables - so if there's a collision, the order of items in the table (and so the order of iteration) will depend both on which item was added first (different in <code>x</code> and <code>y</code> in this case) and the seed used for hashing (different across Python invocations since 3.3). Since collisions are rare by design, and the examples in this question are smallish sets, the issue doesn't arise as often as one might initially suppose.</p>
<p>For a thorough explanation of Python's implementation of dictionaries and sets, see <a href="http://pyvideo.org/video/276/the-mighty-dictionary-55">The Mighty Dictionary</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are two things at play here.</p>
<ol>
<li><p>Sets are unordered. <code>set([1, "a", "b", "c", "z", "f"])) == set(["a", "b", "c", "z", "f", 1])</code></p></li>
<li><p>When you convert a set to a tuple via the <code>tuple</code> constructor it essentially iterates over the set and adds each element returned by the iteration .</p></li>
</ol>
<p>The constructor syntax for tuples is</p>
<pre><code>tuple(iterable) -&gt; tuple initialized from iterable's items
</code></pre>
<p>Calling <code>tuple(set([1, "a", "b", "c", "z", "f"]))</code> is the same as calling <code>tuple([i for i in set([1, "a", "b", "c", "z", "f"])])</code></p>
<p>The values for </p>
<pre><code>[i for i in set([1, "a", "b", "c", "z", "f"])]
</code></pre>
<p>and</p>
<pre><code>[i for i in set(["a", "b", "c", "z", "f", 1])]
</code></pre>
<p>are the same as it iterates over the same set.</p>
<p><strong>EDIT</strong> thanks to @ZeroPiraeus (check his <a href="https://stackoverflow.com/a/26116307/1014938">answer</a>  ). This is not guaranteed. The value of the iteration will not always be the same even for the same set. </p>
<p>The tuple constructor doesn't know the order in which the set is constructed.</p>
</div>
<div class="post-text" itemprop="text">
<p>Sets are not ordered and are defined only by their membership. </p>
<p>For example, <code>set([1, 2]) == set([2, 1])</code></p>
<p>Tuples are equal if their members at each position are equal, but since the collections the tuples were created from iterate equally (in increasing order), tuples end up being equal as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>so you have two lists - which have the same content but in different orders, you convert them into sets - which will be equal, as they have the same content.</p>
<p>When you convert those sets into tuples, they will be converted in the same order, as they are the same set, so the tuples will be the same.</p>
<p>This is true in Python2.7 - but from 3.3 onwards when hashes are randomised you will not be able to guarantee this - as the two sets, although equal in content wont neccessarily iterate in the same order.</p>
</div>
<span class="comment-copy">why do you expect it to be False - the contents of the two sets are the same !</span>
<span class="comment-copy"><a href="http://stackoverflow.com/a/26099671/1763356">Relevant.</a> As Zero Piraeus says, though, hash randomization makes this untrue <b>for strings, bytes and dates</b> as <code>hash(a_string)</code> will change every time you instantiate the interpreter.</span>
<span class="comment-copy">@stalk As I said, <b>since Python 3.3</b>, the behaviour has changed. See also <a href="https://docs.python.org/3/reference/datamodel.html#object.__hash__" rel="nofollow noreferrer"><code>object.__hash__</code></a>: "Changing hash values affects the iteration order of dicts, sets and other mappings. <b>Python has never made guarantees about this ordering</b> (and it typically varies between 32-bit and 64-bit builds)." (my emphasis)</span>
<span class="comment-copy">It's weird that it's true that many times.</span>
<span class="comment-copy">The hashes may well still be entirely random, but the 853/1000 is not a measure of the collision rate, it is a measure that the hashes are in the same order between the two different sets. Depending on exactly how the hash is calculated - hash("a") &lt; hash("b") could well be true very often even if the randomness is high (measured across multiple calls of hash(item))</span>
<span class="comment-copy">@Floris The number is 5/32. See: <a href="http://stackoverflow.com/questions/26136894/why-does-tupleset1-a-b-c-z-f-tupleseta-b-c-z-f-1/26136895#26136895" title="why does tupleset1 a b c z f tupleseta b c z f 1">stackoverflow.com/questions/26136894/…</a></span>
<span class="comment-copy">@TonySuffolk66 It's exactly the measure of the collision rate. See: <a href="http://stackoverflow.com/questions/26136894/why-does-tupleset1-a-b-c-z-f-tupleseta-b-c-z-f-1/26136895#26136895" title="why does tupleset1 a b c z f tupleseta b c z f 1">stackoverflow.com/questions/26136894/…</a></span>
<span class="comment-copy">So is it guaranteed, that if values in two <code>set</code>s are the same, they will be iterated in same order?</span>
<span class="comment-copy">@stalk <b>no</b>, it isn't: see <a href="http://stackoverflow.com/a/26116307/1014938">my answer</a>.</span>
<span class="comment-copy">You should update your answer as per @ZeroPiraeus's answer - "The values for _ and _ are the same as it iterates over the same set" is not always true.</span>
<span class="comment-copy">why the downvote ?</span>
<span class="comment-copy">I didn't downvote, but your answer is incorrect, regardless of hash randomization: for example, in every Python since 2.4 (when <code>set</code> became a builtin), <code>tuple(set([0, 8])) != tuple(set([8, 0]))</code> (and the same applies to <code>sets.Set</code> in Python 2.3).</span>
<span class="comment-copy">so a set doesn't do what set should do - i.e. be equal when the contents are equal - very weird.</span>
<span class="comment-copy">The fact that two objects are equal doesn't necessarily mean the result of the same operation on them should be. In this case the result occurs because two equal sets with different iteration order are used to construct an object which cares about order, but there are other examples, e.g. <code>8.0 == 8</code> but <code>str(8.0) != str(8)</code>.</span>
