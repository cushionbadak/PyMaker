<div class="post-text" itemprop="text">
<p>I'm still new to Python and learning the more basic things in programming.
Right now i'm trying to create a function that will dupilicate a set of numbers varies names.</p>
<p>Example:</p>
<pre><code>def expand('d3f4e2')
&gt;dddffffee
</code></pre>
<p>I'm not sure how to write the function for this. 
Basically i understand you want to times the letter variable to the number variable beside it.</p>
</div>
<div class="post-text" itemprop="text">
<p>The key to any solution is splitting things into pairs of strings to be repeated, and repeat counts, and then iterating those pairs in lock-step.</p>
<p>If you only need single-character strings and single-digit repeat counts, this is just breaking the string up into 2-character pairs, which you can do with mshsayem's answer, or with slicing (<code>s[::2]</code> is the strings, <code>s[1::2]</code> is the counts).</p>
<p>But what if you want to generalize this to multi-letter strings and multi-digit counts?</p>
<p>Well, somehow we need to group the string into runs of digits and non-digits. If we could do that, we could use pairs of those groups in exactly the same way mshsayem's answer uses pairs of characters.</p>
<p>And it turns out that we can do this very easily. There's a nifty function in the standard library called <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow"><code>groupby</code></a> that lets you group anything into runs according to any function. And there's a function <a href="https://docs.python.org/3/library/stdtypes.html#str.isdigit" rel="nofollow"><code>isdigit</code></a> that distinguishes digits and non-digits.</p>
<p>So, this gets us the runs we want:</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; s = 'd13fx4e2'
&gt;&gt;&gt; [''.join(group) for (key, group) in itertools.groupby(s, str.isdigit)]
['d', '13', 'ff', '4', 'e', '2']
</code></pre>
<p>Now we zip this up the same way that mshsayem zipped up the characters:</p>
<pre><code>&gt;&gt;&gt; groups = (''.join(group) for (key, group) in itertools.groupby(s, str.isdigit))
&gt;&gt;&gt; ''.join(c*int(d) for (c, d) in zip(groups, groups))
'dddddddddddddfxfxfxfxee'
</code></pre>
<p>So:</p>
<pre><code>def expand(s):
    groups = (''.join(group) for (key, group) in itertools.groupby(s, str.isdigit))
    return ''.join(c*int(d) for (c, d) in zip(groups, groups))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Naive approach (if the digits are only single, and characters are single too):</p>
<pre><code>&gt;&gt;&gt; def expand(s):
       s = iter(s)
       return "".join(c*int(d) for (c,d) in zip(s,s))

&gt;&gt;&gt; expand("d3s5")
'dddsssss'
</code></pre>
<p>Poor explanation:</p>
<p>Terms/functions:</p>
<ul>
<li><a href="https://docs.python.org/2/library/functions.html#iter" rel="nofollow noreferrer"><code>iter()</code></a> gives you an <a href="https://stackoverflow.com/questions/9884132/understanding-pythons-iterator-iterable-and-iteration-protocols-what-exact">iterator</a> object.</li>
<li><a href="https://docs.python.org/2/library/functions.html#zip" rel="nofollow noreferrer"><code>zip()</code></a> makes <a href="http://www.tutorialspoint.com/python/python_tuples.htm" rel="nofollow noreferrer">tuples</a> from iterables.</li>
<li><a href="https://docs.python.org/2/library/functions.html#int" rel="nofollow noreferrer"><code>int()</code></a> parses an integer from string</li>
<li><code>&lt;expression&gt; for &lt;variable&gt; in &lt;iterable&gt;</code> is <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a></li>
<li><a href="https://docs.python.org/2/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>&lt;string&gt;.join</code></a> joins an iterable strings with <code>string</code></li>
</ul>
<p>Process:</p>
<ul>
<li>First we are making an iterator of the given string</li>
<li><code>zip()</code> is being used to make tuples of character and repeating times. e.g. <code>('d','3'), ('s','5)</code> (<code>zip()</code> will call the iterable to make the tuples. Note that for each tuple, it will call the same iterable twice—and, because our iterable is an iterator, that means it will advance twice)</li>
<li>now <code>for in</code> will iterate the tuples. using two variables <code>(c,d)</code> will unpack the tuples into those</li>
<li>but <code>d</code> is still an string. <code>int</code> is making it an integer</li>
<li><code>&lt;string&gt; * integer</code> will repeat the <code>string</code> with <code>integer</code> times</li>
<li>finally <code>join</code> will return the result</li>
</ul>
<p>Here is a multi-digit, multi-char version:</p>
<pre><code>import re

def expand(s):
    s = re.findall('([^0-9]+)(\d+)',s)
    return "".join(c*int(d) for (c,d) in s)
</code></pre>
<p>By the way, using <a href="https://docs.python.org/2/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> is better, as <a href="https://stackoverflow.com/questions/26006949/python-expanding-a-string-of-variables-with-integers#26007121">shown by abarnert</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Let's look at how you could do this manually, using only tools that a novice will understand. It's <em>better</em> to actually learn about <code>zip</code> and iterators and comprehensions and so on, but it may <em>also</em> help to see the clunky and verbose way you write the same thing.</p>
<p>So, let's start with just single characters and single digits:</p>
<pre><code>def expand(s):
    result = ''
    repeated_char_next = True
    for char in s:
        if repeated_char_next:
            char_to_repeat = char
            repeated_char_next = False
        else:
            repeat_count = int(char)
            s += char_to_repeat * repeat_count
            repeated_char_next = True
    return char
</code></pre>
<p>This is a very simple <em>state machine</em>. There are two states: either the next character is a character to be repeated, or it's a digit that gives a repeat count. After reading the former, we don't have anything to add yet (we know the character, but not how many times to repeat it), so all we do is switch states. After reading the latter, we now know what to add (since we know both the character and the repeat count), so we do that, and also switch states. That's all there is to it.</p>
<hr/>
<p>Now, to expand it to multi-char repeat strings and multi-digit repeat counts:</p>
<pre><code>def expand(s):
    result = ''
    current_repeat_string = ''
    current_repeat_count = ''
    for char in s:
        if isdigit(char):
            current_repeat_count += char
        else:
            if current_repeat_count:
                # We've just switched from a digit back to a non-digit
                count = int(current_repeat_count)
                result += current_repeat_string * count
                current_repeat_count = ''
                current_repeat_string = ''
            current_repeat_string += char
    return char
</code></pre>
<p>The state here is pretty similar—we're either in the middle of reading non-digits, or in the middle of reading digits. But we don't automatically switch states after each character; we only do it when getting a digit after non-digits, or vice-versa. Plus, we have to keep track of all the characters in the current repeat string and in the current repeat count. I've collapsed the state flag into that repeat string, but there's nothing else tricky here.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is more than one way to do this, but assuming that the sequence of characters in your input is always the same, eg: a single character followed by a number, the following would work
<code>
def expand(input):
    alphatest = False 
    finalexpanded = "" #Blank string variable to hold final output
    #first part is used for iterating through range of size i
    #this solution assumes you have a numeric character coming after your
    #alphabetic character every time 
    for i in input: 
        if alphatest == True:
            i = int(i) #converts the string number to an integer
            for value in range(0,i): #loops through range of size i
                finalexpanded += alphatemp #adds your alphabetic character to string
            alphatest = False #Once loop is finished resets your alphatest variable to False
            i = str(i) #converts i back to string to avoid error from i.isalpha() test
        if i.isalpha(): #tests i to see if it is an alphabetic character
            alphatemp = i #sets alphatemp to i for loop above
            alphatest = True #sets alphatest True for loop above<br/>
    print finalexpanded #prints the final result
</code></p>
</div>
<span class="comment-copy">Can the numbers be <code>&gt;9</code>, or do they have to be a single digit?</span>
<span class="comment-copy">Umm...I i think it's single digit numbers. I was never told if it had to be double digits so i'm going with single.</span>
<span class="comment-copy">@mshsayem: Why did you delete your answer? It could definitely use some explanation, and it obviously won't work if multi-digit numbers are allowed, but it certainly demonstrated a working answer.</span>
<span class="comment-copy">I deleted it because I did not consider the multi digit possibility. Undeleted now.</span>
<span class="comment-copy">I really like the groupby function. +1. This is very helpful. Thanks!</span>
<span class="comment-copy">This needs some explanation. A novice isn't going to be able to understand that zipping an iterator with itself gives you an iterator over pairs from the underlying iterable.</span>
<span class="comment-copy">Working on it. I am not good at this though :p</span>
<span class="comment-copy">or just ` ... in zip( s[::2], s[1::2] )`</span>
<span class="comment-copy">One thing: You don't have a list comprehension, you have a generator expression (which is a different kind of comprehension, one that doesn't build a list). Otherwise, pretty nice.</span>
<span class="comment-copy">I don't think this is a very poor explanation, especially since it has the links to let the OP follow up whatever part he doesn't understand. The tutorial sections on <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">Comprehensions</a> and <a href="https://docs.python.org/3/tutorial/classes.html#iterators" rel="nofollow noreferrer">Iterators</a> (and the next two sections) might help. Also, <a href="http://stupidpythonideas.blogspot.com/2013/08/how-grouper-works.html" rel="nofollow noreferrer">How grouper works</a> attempts to explain the zipping-iterators thing; I don't know how well it succeeds, but another take on it never hurts.</span>
