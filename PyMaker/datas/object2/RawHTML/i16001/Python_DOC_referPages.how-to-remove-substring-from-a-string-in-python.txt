<div class="post-text" itemprop="text">
<p>How can I remove the all lowercase letters before and after "Johnson" in these strings? </p>
<pre><code>str1 = 'aBcdJohnsonzZz'
str2 = 'asdVJohnsonkkk'
</code></pre>
<p>Expected results are as below:</p>
<pre><code>str1 = 'BJohnsonZ'
str2 = 'VJohnson'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can partition the string, check it had the separator, than translate out lowercase letters, eg:</p>
<pre><code>from string import ascii_lowercase as alc

str1 = 'aBcdJohnsonzZz'
p1, sep, p2 = str1.partition('Johnson')
if sep:
    str1 = p1.translate(None, alc) + sep + p2.translate(None, alc)
print str1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/stdtypes.html#str.partition" rel="nofollow"><code>str.partition()</code></a> is your friend here:</p>
<pre><code>def munge(text, match):
    prefix, match, suffix = text.partition(match)
    prefix = "".join(c for c in prefix if not c.islower())
    suffix = "".join(c for c in suffix if not c.islower())
    return prefix + match + suffix
</code></pre>
<p>Example use:</p>
<pre><code>&gt;&gt;&gt; munge("aBcdJohnsonzZz", "Johnson")
'BJohnsonZ'
&gt;&gt;&gt; munge("asdVJohnsonkkk", "Johnson")
'VJohnson'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are a couple of ways you could tackle this.  Here's the simplest one I could think of.  The idea is to tackle it in three parts.  First off, you need to know the middle string.  In your case 'Johnson.'  Then you can remove the lowercase letters from the part before and the part after.</p>
<pre><code>def removeLowercaseAround(full, middle):
    stop_at = full.index(middle) #the beginning of the name
    start_again = stop_at+len(middle) #the end of the name
    new_str = ''; #the string we'll return at the end

    for i in range(stop_at): #for each char until the middle starts
        if not full[i].islower(): #if it is not a lowercase char
            new_str += full[i] #add it to the end of the new string

    new_str+=middle #then add the middle char

    for i in range(start_again, len(full)): #do the same thing with the end
        if not full[i].islower(): #if it is not a lowercase char
            new_str += full[i] #add it to the string
    return new_str

print removeLowercaseAround('ABcdJohnsonzZZ', 'Johnson')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not exactly very simple or streamlined, but you could do this sort of thing (based partially on Zero Piraeus') </p>
<p>(edited to reflect errors)</p>
<pre><code>def remove_lower(string):
    return ''.join(filter(str.isupper, string))

def strip_johnson(input_str):
    prefix, match, postfix = input_str.partition("Johnson")
    return (
        remove_lower(prefix) +
        match +
        remove_lower(postfix)
    )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import re
def foo(input_st, keep_st):
    parts = input_st.split(keep_st)
    clean_parts = [re.sub("[a-z]*", "", part) for part in parts]
    return keep_st.join(clean_parts)
</code></pre>
<p>Other methods using the partition module don't seem to take into account your trigger word being repeated.  This example will work in the case you have 'aBcJohnsonDeFJohnsonHiJkL' in the event that, that particular case is of concern to you.</p>
</div>
<span class="comment-copy">What Python version are you using?</span>
<span class="comment-copy">What do you want to happen if "Johnson" <b>doesn't</b> occur in the string?</span>
<span class="comment-copy">Try: <code>munge('NoMatchWordHere', 'Johnson')</code> :)</span>
<span class="comment-copy">@JonClements honestly, I think the result is correct according to spec - if <code>"Johnson"</code> doesn't occur, all the letters in the string are before it.</span>
<span class="comment-copy">Umm... That may be true, but if it doesn't occur then there can't be any <i>after</i> it... so removing lowercase <i>before</i> <b>and</b> <i>after</i> doesn't make sense...</span>
<span class="comment-copy">While <code>.strip(lower)</code> will work on the example data - it doesn't remove <i>all</i> lowercase letters, just at the head and tail of the string, try: <code>'KlotsoflowercaselettershereK'.strip(lower)</code> for instance</span>
<span class="comment-copy">... was just about to say the same as @JonClements ... also, you need to change one of <code>suffix</code> or <code>postfix</code>.</span>
<span class="comment-copy">ah hell, thought i was being clever :/</span>
<span class="comment-copy">right, corrected</span>
<span class="comment-copy">Note that keeping only upper case letters isn't the same as removing lower case letters (although again, is valid for the example data)... :)</span>
