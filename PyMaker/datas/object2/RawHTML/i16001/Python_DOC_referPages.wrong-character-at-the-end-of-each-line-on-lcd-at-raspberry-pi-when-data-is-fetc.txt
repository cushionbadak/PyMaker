<div class="post-text" itemprop="text">
<p>Hi connected a HD44780 compatible LCD with a Raspberry Pi Model B. The wiring is as follows:</p>
<pre><code>LCD                                        Raspberry Pi Model B/B+
1 : GND                                    6 : GND
2 : 5V                                     2 : 5V                            
3 : Contrast (0-5V)                        6 : GND
4 : RS (Register Select)                   26 (GPIO7)
5 : R/W (Read Write)                       6 : GND
6 : Enable                                 24 (GPIO8)
7 : Data Bit 0  --- NOT USED in 4 Bit mode ---
8 : Data Bit 1  --- NOT USED in 4 Bit mode ---
9 : Data Bit 2  --- NOT USED in 4 Bit mode ---
10: Data Bit 3  --- NOT USED in 4 Bit mode ---
11: Data Bit 4                             22 (GPIO25)
12: Data Bit 5                             18 (GPIO24)
13: Data Bit 6                             16 (GPIO23)
14: Data Bit 7                             12 (GPIO28)
15: LCD Backlight +5V**                    2 : 5V   
16: LCD Backlight GND                      6 : GND
</code></pre>
<p>When I execute this script, which just grabs via Python subprocess some host information from the system, I get on the LCD a wrong character at the end of each line.</p>
<pre><code>#!/usr/bin/python
#
# HD44780 LCD Test Script for
# Raspberry Pi
#
# Author : Matt Hawkins
# Site   : http://www.raspberrypi-spy.co.uk
#
# Date   : 26/07/2012

#import
import RPi.GPIO as GPIO
import time

# Define GPIO to LCD mapping
LCD_RS = 7
LCD_E  = 8
LCD_D4 = 25
LCD_D5 = 24
LCD_D6 = 23
LCD_D7 = 18

# Define some device constants
LCD_WIDTH = 16    # Maximum characters per line
LCD_CHR = True
LCD_CMD = False

LCD_LINE_1 = 0x80 # LCD RAM address for the 1st line
LCD_LINE_2 = 0xC0 # LCD RAM address for the 2nd line 

# Timing constants
E_PULSE = 0.00005
E_DELAY = 0.00005

def main():
  # Main program block

  GPIO.setmode(GPIO.BCM)       # Use BCM GPIO numbers
  GPIO.setup(LCD_E, GPIO.OUT)  # E
  GPIO.setup(LCD_RS, GPIO.OUT) # RS
  GPIO.setup(LCD_D4, GPIO.OUT) # DB4
  GPIO.setup(LCD_D5, GPIO.OUT) # DB5
  GPIO.setup(LCD_D6, GPIO.OUT) # DB6
  GPIO.setup(LCD_D7, GPIO.OUT) # DB7

  # Initialise display
  lcd_init()

  lcd_byte(LCD_LINE_1, LCD_CMD)
  p = subprocess.Popen('''hostname''', stdout=subprocess.PIPE, shell=True)
  hostname_output = p.communicate()[0]
  lcd_string(hostname_output)

  lcd_byte(LCD_LINE_2, LCD_CMD)
  p = subprocess.Popen("ip addr | grep 'state UP' -A2 | tail -n1 | awk '{print $2}' | cut -f1  -d'/'", stdout=subprocess.PIPE, shell=True)
  ip_address_output = p.communicate()[0]   
  lcd_string(str(ip_address_output))

def lcd_init():
  # Initialise display
  lcd_byte(0x33,LCD_CMD)
  lcd_byte(0x32,LCD_CMD)
  lcd_byte(0x28,LCD_CMD)
  lcd_byte(0x0C,LCD_CMD)
  lcd_byte(0x06,LCD_CMD)
  lcd_byte(0x01,LCD_CMD)  

def lcd_string(message):
  # Send string to display

  message = message.ljust(LCD_WIDTH," ")  

  for i in range(LCD_WIDTH):
    lcd_byte(ord(message[i]),LCD_CHR)

def lcd_byte(bits, mode):
  # Send byte to data pins
  # bits = data
  # mode = True  for character
  #        False for command

  GPIO.output(LCD_RS, mode) # RS

  # High bits
  GPIO.output(LCD_D4, False)
  GPIO.output(LCD_D5, False)
  GPIO.output(LCD_D6, False)
  GPIO.output(LCD_D7, False)
  if bits&amp;0x10==0x10:
    GPIO.output(LCD_D4, True)
  if bits&amp;0x20==0x20:
    GPIO.output(LCD_D5, True)
  if bits&amp;0x40==0x40:
    GPIO.output(LCD_D6, True)
  if bits&amp;0x80==0x80:
    GPIO.output(LCD_D7, True)

  # Toggle 'Enable' pin
  time.sleep(E_DELAY)
  GPIO.output(LCD_E, True)
  time.sleep(E_PULSE)
  GPIO.output(LCD_E, False)
  time.sleep(E_DELAY)      

  # Low bits
  GPIO.output(LCD_D4, False)
  GPIO.output(LCD_D5, False)
  GPIO.output(LCD_D6, False)
  GPIO.output(LCD_D7, False)
  if bits&amp;0x01==0x01:
    GPIO.output(LCD_D4, True)
  if bits&amp;0x02==0x02:
    GPIO.output(LCD_D5, True)
  if bits&amp;0x04==0x04:
    GPIO.output(LCD_D6, True)
  if bits&amp;0x08==0x08:
    GPIO.output(LCD_D7, True)

  # Toggle 'Enable' pin
  time.sleep(E_DELAY)
  GPIO.output(LCD_E, True)
  time.sleep(E_PULSE)
  GPIO.output(LCD_E, False)
  time.sleep(E_DELAY)   

if __name__ == '__main__':
  try:
    main()
  except KeyboardInterrupt:
    lcd_byte(LCD_LINE_1, LCD_CMD) 
    lcd_string("")
    lcd_byte(LCD_LINE_2, LCD_CMD)
    lcd_string("")

    GPIO.cleanup()
</code></pre>
<p>This image shows the result.</p>
<p><img alt="Wrong character at the end of each line when Python subprocess is used" src="https://i.stack.imgur.com/UtUrq.jpg"/></p>
<p>When I do not use subprocess and just insert any strings, I do not get the wrong character a the end of each line. This what this example proves:</p>
<pre><code>#!/usr/bin/python
#
# HD44780 LCD Test Script for
# Raspberry Pi
#
# Author : Matt Hawkins
# Site   : http://www.raspberrypi-spy.co.uk
#
# Date   : 26/07/2012

#import
import RPi.GPIO as GPIO
import time
import subprocess # Execute UNIX commands as subprocess

# Define GPIO to LCD mapping
LCD_RS = 7
LCD_E  = 8
LCD_D4 = 25
LCD_D5 = 24
LCD_D6 = 23
LCD_D7 = 18

# Define some device constants
LCD_WIDTH = 16    # Maximum characters per line
LCD_CHR = True
LCD_CMD = False

LCD_LINE_1 = 0x80 # LCD RAM address for the 1st line
LCD_LINE_2 = 0xC0 # LCD RAM address for the 2nd line 

# Timing constants
E_PULSE = 0.00005
E_DELAY = 0.00005

def main():
  # Main program block

  GPIO.setmode(GPIO.BCM)       # Use BCM GPIO numbers
  GPIO.setup(LCD_E, GPIO.OUT)  # E
  GPIO.setup(LCD_RS, GPIO.OUT) # RS
  GPIO.setup(LCD_D4, GPIO.OUT) # DB4
  GPIO.setup(LCD_D5, GPIO.OUT) # DB5
  GPIO.setup(LCD_D6, GPIO.OUT) # DB6
  GPIO.setup(LCD_D7, GPIO.OUT) # DB7

  # Initialise display
  lcd_init()

  lcd_byte(LCD_LINE_1, LCD_CMD)
  lcd_string("1st test line")

  lcd_byte(LCD_LINE_2, LCD_CMD)
  lcd_string('''2nd line here''')

def lcd_init():
  # Initialise display
  lcd_byte(0x33,LCD_CMD)
  lcd_byte(0x32,LCD_CMD)
  lcd_byte(0x28,LCD_CMD)
  lcd_byte(0x0C,LCD_CMD)
  lcd_byte(0x06,LCD_CMD)
  lcd_byte(0x01,LCD_CMD)  

def lcd_string(message):
  # Send string to display

  message = message.ljust(LCD_WIDTH," ")  

  for i in range(LCD_WIDTH):
    lcd_byte(ord(message[i]),LCD_CHR)

def lcd_byte(bits, mode):
  # Send byte to data pins
  # bits = data
  # mode = True  for character
  #        False for command

  GPIO.output(LCD_RS, mode) # RS

  # High bits
  GPIO.output(LCD_D4, False)
  GPIO.output(LCD_D5, False)
  GPIO.output(LCD_D6, False)
  GPIO.output(LCD_D7, False)
  if bits&amp;0x10==0x10:
    GPIO.output(LCD_D4, True)
  if bits&amp;0x20==0x20:
    GPIO.output(LCD_D5, True)
  if bits&amp;0x40==0x40:
    GPIO.output(LCD_D6, True)
  if bits&amp;0x80==0x80:
    GPIO.output(LCD_D7, True)

  # Toggle 'Enable' pin
  time.sleep(E_DELAY)
  GPIO.output(LCD_E, True)
  time.sleep(E_PULSE)
  GPIO.output(LCD_E, False)
  time.sleep(E_DELAY)      

  # Low bits
  GPIO.output(LCD_D4, False)
  GPIO.output(LCD_D5, False)
  GPIO.output(LCD_D6, False)
  GPIO.output(LCD_D7, False)
  if bits&amp;0x01==0x01:
    GPIO.output(LCD_D4, True)
  if bits&amp;0x02==0x02:
    GPIO.output(LCD_D5, True)
  if bits&amp;0x04==0x04:
    GPIO.output(LCD_D6, True)
  if bits&amp;0x08==0x08:
    GPIO.output(LCD_D7, True)

  # Toggle 'Enable' pin
  time.sleep(E_DELAY)
  GPIO.output(LCD_E, True)
  time.sleep(E_PULSE)
  GPIO.output(LCD_E, False)
  time.sleep(E_DELAY)   

if __name__ == '__main__':
  try:
    main()
  except KeyboardInterrupt:
    lcd_byte(LCD_LINE_1, LCD_CMD) 
    lcd_string("")
    lcd_byte(LCD_LINE_2, LCD_CMD)
    lcd_string("")

    GPIO.cleanup()
</code></pre>
<p>This image shows the result. There are no wrong characters.</p>
<p><img alt="No wrong character at the end of each line" src="https://i.stack.imgur.com/QXQ16.jpg"/></p>
<p>The software I use is Raspbian os operating system.</p>
<pre><code>$ uname -a
Linux pi71 3.12.28+ #709 PREEMPT Mon Sep 8 15:28:00 BST 2014 armv6l GNU/Linux

$ python -V
Python 2.7.3

$ locate subprocess | grep 2.7
/usr/lib/pypy-upstream/lib-python/2.7/subprocess.py
/usr/lib/pypy-upstream/lib-python/2.7/test/subprocessdata
/usr/lib/pypy-upstream/lib-python/2.7/test/subprocessdata/sigchild_ignore.py
/usr/lib/pypy-upstream/lib-python/2.7/test/test_subprocess.py
/usr/lib/python2.7/subprocess.py
/usr/lib/python2.7/subprocess.pyc
</code></pre>
<p>I think this issue is caused by subprocess. 
What can I do to fix this?</p>
<p>Thanks for any help!</p>
</div>
<div class="post-text" itemprop="text">
<p>When confused about string contents, always inspect the string with using the <a href="https://docs.python.org/2/library/functions.html#repr" rel="nofollow"><code>repr()</code> function</a> (or when using Python 3, <a href="https://docs.python.org/3/library/functions.html#ascii" rel="nofollow"><code>ascii()</code></a>). This'll produce a string representation of the string that can be pasted back into your interpreter without encoding headaches and will show any non-printable or special control character as an escape sequence instead.</p>
<p>In this case, the most likely culprit is a newline character, <code>\n</code> when represented as an escape sequence. </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/users/3185884/james-kent">James Kent</a> and <a href="https://stackoverflow.com/users/100297/martijn-pieters">Martijn Pieters</a> solved it. There was newline at the end of each line. <code>string.rstrip()</code> removed the newline.</p>
</div>
<span class="comment-copy">i suspect what is happening is you are picking up a trailing character from the stdout of your other process, its most probably a newline character. you could try using string.rstrip() this should with no arguments remove all whitespace characters.</span>
<span class="comment-copy">Since <code>Process.communitate()</code> gives you <i>just</i> a tuple of two strings, can you show us what <code>print repr(ip_address_output)</code> produces? I suspect you have <code>\n</code> characters there.</span>
<span class="comment-copy">Thats it! You were right. There is a newline. The output of <code>print repr(ip_address_output)</code> is <code>'10.0.0.71\n'</code> and <code>string.rstrip()</code> removed the newline. Thanks a lot !!!</span>
