<div class="post-text" itemprop="text">
<p>What I want is to generate a string(key) of size 5 for my users on my website. More like a BBM PIN.</p>
<p>The key will contain numbers and uppercase English letters:</p>
<ul>
<li><strong>AU1B7</strong></li>
<li><strong>Y56AX</strong></li>
<li><strong>M0K7A</strong></li>
</ul>
<p>How can I also be at rest about the uniqueness of the strings even if I generate them in millions?</p>
<p>In the most pythonic way possible, how can I do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>My favourite is </p>
<pre><code>import uuid 
uuid.uuid4().hex[:6].upper()
</code></pre>
<p>If you using django you can set the unique constrain on this field in order to make sure it is unique. <a href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.Field.unique" rel="noreferrer">https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.Field.unique</a> </p>
</div>
<div class="post-text" itemprop="text">
<p>Am not sure about any short cryptic ways, but it can be implemented using a simple straight forward function assuming that you save all the generated strings in a set:</p>
<pre><code>import random

def generate(unique):
    chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"
    while True:
        value = "".join(random.choice(chars) for _ in range(5))
        if value not in unique:
            unique.add(value)
            break

unique = set()
for _ in range(10):
    generate(unique)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>size = 5
''.join(random.choice(string.letters[26:] + string.digits) for in range(size))
</code></pre>
<p>this will generate some short code, but they can be duplicated. so check if they are unique in your database before saving.</p>
<pre><code>def generate(size=5):
    code = ''.join(random.choice(string.letters[26:] + string.digits) for in range(size))
    if check_if_duplicate(code):
        return generate(size=5)
    return code
</code></pre>
<p>or using django unique constrain, and handle exceptions. </p>
</div>
<div class="post-text" itemprop="text">
<p>From 3.6 You can use secrets module to generate nice random strings.
<a href="https://docs.python.org/3/library/secrets.html#module-secrets" rel="nofollow noreferrer">https://docs.python.org/3/library/secrets.html#module-secrets</a></p>
<pre><code>import secrets
print(secrets.token_hex(5))
</code></pre>
</div>
<span class="comment-copy"><code>base64.b32encode('12345') == 'GEZDGNBV'</code></span>
<span class="comment-copy">se also <a href="https://github.com/jbittel/base32-crockford" rel="nofollow noreferrer">github.com/jbittel/base32-crockford</a></span>
<span class="comment-copy">You can generate them with <code>django.utils.crypto.get_random_string(5, string.ascii_uppercase+string.digits)</code>. You might want to restrict the set of characters so that you don't generate potentially confusing strings such as <code>l1I1l</code> which might be indecipherable in certain fonts. Uniqueness is going to require that you persist the set of allocated strings.</span>
<span class="comment-copy">You can't have both "random" <i>and</i> "unique". Replace the "random" with "random-looking".</span>
<span class="comment-copy">Because I am the crusher of dreams, the bringer of woe and despair. WOE AND DESPAIR.</span>
<span class="comment-copy">+1 for the length of the code. But I was curious about how you are sure that you are generating unique values ? Doesn't it generate repeated values ?</span>
<span class="comment-copy">Sure there could be collisions! <a href="http://en.wikipedia.org/wiki/Universally_unique_identifier#Random_UUID_probability_of_duplicates" rel="nofollow noreferrer">en.wikipedia.org/wiki/â€¦</a> The longer uuid the chances of collision are slimmer. Basically  there need to be some further logic to it as all depens HOW you are going about generating and storing them.</span>
<span class="comment-copy">This isn't going to generate AU1B7, Y56AX, nor M0K7A as alpha characters are limited to A..F. It's not going to generate guaranteed unique values either. You could add the code to show how to handle collisions.</span>
<span class="comment-copy">You could handle collisions like <a href="http://stackoverflow.com/questions/3928016/">in this SO question</a></span>
<span class="comment-copy">Could you clarify what is <code>string.letters</code> and <code>string.digits</code>?</span>
