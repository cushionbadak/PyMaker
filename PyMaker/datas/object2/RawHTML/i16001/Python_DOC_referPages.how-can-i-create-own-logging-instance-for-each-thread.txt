<div class="post-text" itemprop="text">
<p>For example, i have these files with classes that i want to use (only example, maybe not working)</p>
<pre><code># helper_one.py

import logging

logger = logging.getLogger('HelperOne')

class HelperOne:
    def __init__(self, data):
        self.data = data

    def run(self):
        logger.debug('HelperOne::Run function with data: ' + self.data)
        return True
</code></pre>
<p>.</p>
<pre><code># controller_one.py

import logging

from helper_one import HelperOne

logger = logging.getLogger('ControllerOne')

class ControllerOne:
    def __init__(self, data):
        self.data = data

    def run(self):
        logger.debug('ControllerOne::Run function with data: ' + self.data)

        ho = HelperOne(self.data + '_data')
        return ho.run()
</code></pre>
<p>And i have a file which creates Threads </p>
<pre><code>import logging 

from controller_one import ControllerOne

# this function creates threads (its just an example)
def run_task(task_id, data):
    logging.basicConfig(
        filename=os.path.join('logs', str(task_id) + '.log'),
        level=logging.DEBUG,
        format='%(asctime)s\t%(name)s\t%(levelname)s\t%(message)s'
    )

    result = ControllerOne(data)

    logging.debug('run_task: ' + result)
</code></pre>
<p>If i create logging instance like in my example, all log are written in a single file.
How can I, for every thread, create its own logging instance with logging to its own file ? </p>
<p>Regards, Alex.</p>
</div>
<div class="post-text" itemprop="text">
<p>The logger name (the string passed to the <code>getLogger</code> function) can be anything you want. As <a href="https://docs.python.org/3/library/logging.html#logger-objects" rel="noreferrer">the docs</a> explain:</p>
<blockquote>
<p>The <code>name</code> is potentially a period-separated hierarchical value, like <code>foo.bar.baz</code> (though it could also be just plain <code>foo</code>, for example). Loggers that are further down in the hierarchical list are children of loggers higher up in the list. For example, given a logger with a name of <code>foo</code>, loggers with names of <code>foo.bar</code>, <code>foo.bar.baz</code>, and <code>foo.bam</code> are all descendants of <code>foo</code>. The logger name hierarchy is analogous to the Python package hierarchy, and identical to it if you organise your loggers on a per-module basis using the recommended construction <code>logging.getLogger(__name__)</code>. That’s because in a module, <code>__name__</code> is the module’s name in the Python package namespace.</p>
</blockquote>
<p>So, using <code>__name__</code> as the name is <em>recommended</em>, but not <em>required</em>. And in fact you're already explicitly violating it:</p>
<pre><code>logger = logging.getLogger('ControllerOne')
</code></pre>
<p>So, you could just use a separate name per thread, by putting a thread ID or name into the logger name. For example:</p>
<pre><code>logger = logging.getLogger('ControllerOne.{}'.format(threading.get_ident())
</code></pre>
<p>Or, in your case, since you seem to have a unique <code>task_id</code> for each thread, you can just use that instead of the thread ID.</p>
<p>Of course this means you have to actually <em>use</em> the logger; you can't just call <code>logging.debug</code>. And you can't rely on the <code>basicConfig</code>; you're going to need to explicitly configure the logger in each thread. Since each thread creates its own independent <code>ControllerOne</code> instance, the obvious place to do that is in <code>ControllerOne.__init__</code>; in that function, you can call <code>getLogger</code> with a logger name that incorporates the thread or task ID, create and set a <code>FileHandler</code> that also incorporates the thread or task ID in the name, and store it as <code>self.logger</code>. Then, whenever you need to log something, you just do <code>self.logger.debug(…)</code>.</p>
<p>If that all sounds like gobbledegook to you because you have no idea what a <code>FileHandler</code> is, you probably need to read at least the <a href="https://docs.python.org/3/howto/logging.html#logging-basic-tutorial" rel="noreferrer">basic tutorial</a> in the HOWTOs, but the <a href="https://docs.python.org/3/howto/logging.html#logging-advanced-tutorial" rel="noreferrer">advanced tutorial</a> and <a href="https://docs.python.org/3/howto/logging-cookbook.html#logging-cookbook" rel="noreferrer">cookbook</a> are also very useful.</p>
</div>
<span class="comment-copy">I am not very good in python, but if the logger can only be set up statically (i.e. 1 instance per process) then try having separate sub-processes instead of threads.</span>
<span class="comment-copy">@Kam, yes i can do it, but in my situation it's not possible.</span>
