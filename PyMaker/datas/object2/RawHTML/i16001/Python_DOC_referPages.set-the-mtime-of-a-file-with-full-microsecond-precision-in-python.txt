<div class="post-text" itemprop="text">
<p>Let's say I create a test file and check its mtime:</p>
<pre><code>$ touch testfile.txt 
$ stat testfile.txt
  File: `testfile.txt'
  Size: 0           Blocks: 0          IO Block: 4096   regular empty file
Device: fc01h/64513d    Inode: 3413533     Links: 1
Access: (0664/-rw-rw-r--)  Uid: ( 1000/ me)   Gid: ( 1000/ me)
Access: 2014-09-17 18:38:34.248965866 -0400
Modify: 2014-09-17 18:38:34.248965866 -0400
Change: 2014-09-17 18:38:34.248965866 -0400
 Birth: -

$ date -d '2014-09-17 18:38:34.248965866 -0400' +%s
1410993514
</code></pre>
<p>The <code>mtime</code> above is listed with microsecond precision (I realize the system clock resolution makes the higher part of this resolution kind of useless).  The <code>utimes(2)</code> system call allows me to pass in the microseconds.  However, the <code>os.utime()</code> function seems to combine it into a single number.</p>
<p>I can pass a <code>float</code> like this:</p>
<pre><code>&gt;&gt;&gt; os.utime('testfile.txt', (1410993514.248965866, 1410993514.248965866))
</code></pre>
<p>but now</p>
<pre><code>$ stat testfile.txt 
  File: `testfile.txt'
  Size: 0           Blocks: 0          IO Block: 4096   regular empty file
Device: fc01h/64513d    Inode: 3413533     Links: 1
Access: (0664/-rw-rw-r--)  Uid: ( 1000/ me)   Gid: ( 1000/ me)
Access: 2014-09-17 18:38:34.248965000 -0400
Modify: 2014-09-17 18:38:34.248965000 -0400
Change: 2014-09-17 18:46:07.544974140 -0400
 Birth: -
</code></pre>
<p>Presumably the precision is lost because the value was converted to a <code>float</code> and python knew better than to trust the last few decimal places.</p>
<p>Is there any way to set the full microseconds field via python?</p>
</div>
<div class="post-text" itemprop="text">
<p>You already <em>are</em> setting the full microseconds. Micro means millionth; <code>.248965</code> is 248965 microseconds. <code>.248965866</code> is 248965866 <em>nano</em> seconds.</p>
<p>Of course it's also 248965.866 microseconds, but the portable APIs that Python uses to set times on every platform but Windows only accept integral microseconds, not fractional. (And, in fact, POSIX doesn't require a system to remember anything smaller than microseconds.)</p>
<p>As of Python 3.3, <a href="https://docs.python.org/3/library/os.html#os.utime" rel="nofollow"><code>os.utime</code></a> adds an <code>ns</code> keyword argument, on systems that support a way to set nanoseconds.1,2 So, you can pass integers for the times, and then pass the nanoseconds in a separate argument. Like this:</p>
<pre><code>&gt;&gt;&gt; os.utime('testfile.txt', (1410993514, 1410993514), ns=(248965866, 248965866))
</code></pre>
<hr/>
<p>One last thing:</p>
<blockquote>
<p>Presumably the precision is lost because the value was converted to a float and python knew better than to trust the last few decimal places.</p>
</blockquote>
<p>That actually might make sense… but Python doesn't do that. You can see the exact code it uses <a href="https://hg.python.org/cpython/file/3.2/Modules/posixmodule.c#l3371" rel="nofollow">here</a>, but basically, the only compensation they make for rounding is ensuring that negative microseconds become 0.3</p>
<p>But you're right that rounding errors are a potential problem here… which is why both *nix and Python avoid the problem by using separate <code>seconds</code> and <code>nanoseconds</code> integers (and Windows solves it by using a 64-bit int instead of a double).</p>
<hr/>
<p><sub>1 If you're on Unix, that means you have a <code>utimens</code> function that's like <code>utimes</code> but takes <code>struct timespec</code> instead of <code>struct timeval</code>. You should have it on any non-ancient linux/glibc system; on *BSD it depends on the kernel, but I think everything but OS X has it nowadays; otherwise you probably don't have it. But the easiest way to check is just <code>man utimens</code>.</sub></p>
<p><sub>2 On Windows, Python uses native Win32 APIs that deal in 100ns units, so you get only one extra digit this way, not three.</sub></p>
<p><sub>3 I linked to 3.2, because 3.3 is a bit harder to follow, partly because of the <code>ns</code> support that you care about, but mostly because of the <code>at</code> support that you don't.</sub></p>
</div>
<span class="comment-copy">You <i>are</i> setting the full microseconds. <code>.248965</code> is 248965 microseconds. <code>.248965866</code> is 248965866 _nano_seconds. Of course it's also <code>248965.866</code> microseconds. but the portable APIs that Python relies on for every system but Windows only take an integer number of microseconds. So, either use the nanoseconds-based API, or use the microseconds-based API and stop expecting nanoseconds.</span>
<span class="comment-copy">On UNIX (SVR4/POSIX) and Linux, <code>utime</code> is also limited to microseconds.</span>
<span class="comment-copy">@isedev: Python doesn't <code>utime</code> on POSIX systems, it uses <code>utimes</code>. And <code>utimes</code> isn't <i>technically</i> limited to microseconds, it's just that no real-life POSIX system has a <code>struct timeval</code> with addition parameters beyond seconds and microseconds even though they're allowed to. (Instead, they use the separate <code>timespec</code> struct, and separate <code>foons</code> functions. Which Python can also use in 3.3+.)</span>
<span class="comment-copy">ok, point taken, the spec does say "includes at least the following members"...</span>
