<div class="post-text" itemprop="text">
<p>My application parses the command line arguments:</p>
<pre><code>import sys
import getopt

arguments = sys.argv[1:]
options, remainder = getopt.getopt(arguments, "aa:bb:cc:dd:h", ["aaaa=", "bbbb=", "cccc=", "dddd=", "help"])

print dict(options)
</code></pre>
<p>This works great but at the same time odd: if I put the arguments in the different order, they aren't get parsed</p>
<pre><code>python my_app.py --aaaa=value1 --bbbb=value2 --cccc=value3 --dddd=value4 #ok
python my_app.py --dddd=value4 --bbbb=value2 --cccc=value3 --aaaa=value1 # empty
</code></pre>
<p>That's disappointing because the order of the arguments shouldn't matter, should it? Is there any way to solve that?</p>
<p>UPDATE:</p>
<pre><code>python my_app.py -aa value1 # odd, empty { "-a" : "" } 
python my_app.py -a value1 # even this empty { "-a" : "" }
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As stated in the first comment to your question, your main example regarding failed parsing of arguments in a different order works just fine:</p>
<pre><code>~/tmp/so$ python my_app.py --aaaa=value1 --bbbb=value2 --cccc=value3 --dddd=value4
{'--aaaa': 'value1', '--cccc': 'value3', '--dddd': 'value4', '--bbbb': 'value2'}
~/tmp/so$ python my_app.py --dddd=value4 --bbbb=value2 --cccc=value3 --aaaa=value1
{'--cccc': 'value3', '--bbbb': 'value2', '--aaaa': 'value1', '--dddd': 'value4'}
</code></pre>
<p>If that's not the case for you, please update the script to print the remainder as well, and show its output.</p>
<p>However, you have still misused the <code>getopt</code> library and that's the reason the latest examples you provided don't work as expected. You can't specify more than a single character as an option, since the second character would count as a new separate option. <code>getopt</code> provides no way to differentiate between two consecutive characters that count as a single option (with the first one carrying no argument value, as it is not followed by a colon) or a single option that is composed of two characters. From <a href="https://docs.python.org/2/library/getopt.html#getopt.getopt" rel="nofollow noreferrer"><code>getopt.getopt</code>'s documentation</a>, with my added emphasis:</p>
<blockquote>
<p>options is the string of option <strong>letters</strong> that the script wants to recognize, with options that require an argument followed by a colon.</p>
</blockquote>
<p>Therefore, when <code>getopt</code> parses your arguments, each time it encounters a <code>-a</code> argument, it associates it with the first <code>a</code> option it notices, which in your case is not followed by a colon. Thus, it sets this option, discards its argument value, if there was any (if <code>-aa</code> was passed as an argument to the script, the second <code>a</code> counts as the argument value) and moves on to the next argument.</p>
<p>Finally, regarding <code>getopt</code> and <a href="https://docs.python.org/2/howto/argparse.html" rel="nofollow noreferrer"><code>argparse</code></a>. <a href="https://docs.python.org/2/library/getopt.html" rel="nofollow noreferrer">The documentation clearly advocates <code>argparse</code></a>:</p>
<blockquote>
<p>The getopt module is a parser for command line options whose API is designed to be familiar to users of the C getopt() function. Users who are unfamiliar with the C getopt() function or who would like to write less code and get better help and error messages should consider using the argparse module instead.</p>
</blockquote>
<p>More about why <code>argparse</code> is better than both <code>getopt</code> and the deprecated <code>optparse</code> can be read in <a href="http://legacy.python.org/dev/peps/pep-0389/#why-aren-t-getopt-and-optparse-enough" rel="nofollow noreferrer">this PEP</a> and in the answers to <a href="https://stackoverflow.com/q/3217673/3903832">this question</a>.<br/>
The only functionality that I've found to be supported in <code>getopt</code> while it requires a bit of work in <code>argparse</code> is argument order permutation like that of <code>gnu getopt</code>. However, <a href="https://stackoverflow.com/q/9537510/3903832">this question</a> explains how this can be achieved via <code>argparse</code>.</p>
</div>
<span class="comment-copy">works fine for me. How are you populating arguments?</span>
<span class="comment-copy">What version of Python are you at?  If you have 3.2 or later, <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">argparse</a> is a good way to go, much more flexible than getopt.</span>
<span class="comment-copy">@user3885927, I just showed you. What do you mean?</span>
<span class="comment-copy">you don't show how sys.argv is read.</span>
<span class="comment-copy">@user3885927, do you want me to show that? Ok, I'll show that. From the blackest part of my heart. Updated.</span>
