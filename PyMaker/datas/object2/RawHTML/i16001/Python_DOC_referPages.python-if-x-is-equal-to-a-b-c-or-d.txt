<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/15112125/how-to-test-multiple-variables-against-a-value">How to test multiple variables against a value?</a>
<span class="question-originals-answer-count">
                    20 answers
                </span>
</li>
</ul>
</div>
<p>I am writing a security system that denies access to unauthorized users.</p>
<pre class="lang-python prettyprint-override"><code>import sys

print("Hello. Please enter your name:")
name = sys.stdin.readline().strip()
if name == "Kevin" or "Jon" or "Inbar":
    print("Access granted.")
else:
    print("Access denied.")
</code></pre>
<p>It grants access to authorized users as expected, but it also lets in unauthorized users!</p>
<pre class="lang-none prettyprint-override"><code>Hello. Please enter your name:
Bob
Access granted.
</code></pre>
<p>Why does this occur? I've plainly stated to only grant access when <code>name</code> equals Kevin, Jon, or Inbar. I have also tried the opposite logic, <code>if "Kevin" or "Jon" or "Inbar" == name</code>, but the result is the same.</p>
</div>
<div class="post-text" itemprop="text">
<p>In many cases, Python looks and behaves like natural English, but this is one case where that abstraction fails. People can use context clues to determine that "Jon" and "Inbar" are objects joined to the verb "equals", but the Python interpreter is more literal minded.</p>
<pre><code>if name == "Kevin" or "Jon" or "Inbar":
</code></pre>
<p>is logically equivalent to:  </p>
<pre><code>if (name == "Kevin") or ("Jon") or ("Inbar"):
</code></pre>
<p>Which, for user Bob, is equivalent to:</p>
<pre><code>if (False) or ("Jon") or ("Inbar"):
</code></pre>
<p>The <code>or</code> operator chooses the first argument with a positive <a href="http://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="noreferrer">truth value</a>:  </p>
<pre><code>if ("Jon"):
</code></pre>
<p>And since "Jon" has a positive truth value, the <code>if</code> block executes. That is what causes "Access granted" to be printed regardless of the name given.</p>
<p>All of this reasoning also applies to the expression <code>if "Kevin" or "Jon" or "Inbar" == name</code>. the first value, <code>"Kevin"</code>, is true, so the <code>if</code> block executes.</p>
<hr/>
<p>There are two common ways to properly construct this conditional.  </p>
<ol>
<li><p>Use multiple <code>==</code> operators to explicitly check against each value:<br/>
<code>if name == "Kevin" or name == "Jon" or name == "Inbar":</code> </p></li>
<li><p>Compose a sequence of valid values, and use the <code>in</code> operator to test for membership:<br/>
<code>if name in ("Kevin", "Jon", "Inbar"):</code></p></li>
</ol>
<p>In general of the two the second should be preferred as it's easier to read and also faster:</p>
<pre><code>In [1]: name = "Inbar"

In [2]: %timeit name == "Kevin" or name == "Jon" or name == "Inbar"
10000000 loops, best of 3: 116 ns per loop

In [3]: %timeit name in ("Kevin", "Jon", "Inbar")
10000000 loops, best of 3: 65.2 ns per loop
</code></pre>
</div>
<span class="comment-copy">Most idiomatic way of writing the condition will be <code>if name in ["Kevin", "Jon", "Inbar"]:</code></span>
