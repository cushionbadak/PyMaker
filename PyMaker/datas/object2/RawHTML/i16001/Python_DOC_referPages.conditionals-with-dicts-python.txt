<div class="post-text" itemprop="text">
<p>I was wondering what is the correct way to check a <code>key:value</code> pair of a dict. Lets say I have this dict</p>
<pre><code>dict_ = {
            'key1':'val1',
            'key2':'val2'
        }
</code></pre>
<p>I can check a condition like this</p>
<pre><code>if dict_['key1'] == 'val1'
</code></pre>
<p>but I feel like there is a more elegant way that takes advantage of the dict data structure.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you're doing already <em>does</em> take advantage of the data structure, which is why it's "the one obvious way" to do what you want to do. (You can find examples like this all over the tutorial, the reference docs, and the stdlib implementation.)</p>
<p>However, I can see what you're thinking: the dict is in some sense a container of key-value pairs (even if it's only a <code>collections.Container</code> of keys…), so… shouldn't there be some way to just check whether a key-value pair exists?</p>
<p>Up to Python 2.6, there really isn't.* But in 3.0, the <a href="https://docs.python.org/3/library/stdtypes.html#dict.items" rel="nofollow"><code>items()</code></a> method returns a special <a href="https://docs.python.org/3/library/stdtypes.html#dict-views" rel="nofollow"><code>set</code>-like view</a> of the key-value pairs. And 2.7 backported that functionality, under the name <a href="https://docs.python.org/2/library/stdtypes.html#dict.viewitems" rel="nofollow"><code>viewitems</code></a>. So:</p>
<pre><code>('key1', 'val1') in d.viewitems()
</code></pre>
<p>But I don't think that's really clearer or cleaner; "items" feels like a lower-level way to think of dictionaries than "mappings", which is what both your original code and smci's answer rely on.</p>
<p>It's also less concise, it doesn't work in 2.6 or earlier, and many <code>dict</code>-like mapping objects don't support it,** and it's and slightly slower on 2.7 to boot, but these are probably less important, and not what you asked about.</p>
<hr/>
<p><sub>* Well, there <em>is</em>, but only by iterating over all of the items with <code>iteritems</code>, or using <code>items</code> to effectively do the same exhaustive search behind your back, neither of which is what you want.</sub> </p>
<p><sub>** In fact, in 2.7, it's not actually <em>possible</em> to support it with a pure-Python class…</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to avoid throwing KeyError if dict doesn't even contain 'key1':</p>
<pre><code>if dict_.get('key1')=='val1':
</code></pre>
<p>(However, throwing an exception for missing key is perfectly fine Python idiom.)</p>
<p>Otherwise, @Cyber is correct that it's already fine! (What exactly is the problem?)</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a has_key function</p>
<pre><code>dict_.has_key('key1')
</code></pre>
<p>This returns a boolean true or false.</p>
<p>Alternatively, you can have you get function return a default value when the key is not present.</p>
<pre><code>dict_.get('key3','Default Value')
</code></pre>
<p>Modified typo* </p>
</div>
<span class="comment-copy">It's one line, how much simpler could it be?</span>
<span class="comment-copy">You can't use slicing on a dict because it's an unordered collection.</span>
<span class="comment-copy"><code>('key1', 'val1') in d.viewitems()</code> is terrible, it's order(N). The whole point of a dict is it's O(1) to lookup!</span>
<span class="comment-copy">@smci: No it isn't. <code>viewitems()</code> is a <i>view</i>, and its <code>__contains__</code> method is guaranteed to be O(1).</span>
<span class="comment-copy">@abamert: ah, ok! More efficient than looking up <code>dict.items()</code> then. But still <code>dict.get('key1')=='val1'</code> is best, no, since it works pre-2.7?</span>
<span class="comment-copy">@smci: It depends on your needs. I don't think "works pre-2.7" is usually the most important thing for most people nowadays. But there are plenty of other good reasons to use <code>get</code> as well, which I hope I've explained.</span>
<span class="comment-copy"><code>.get()</code> is better and more compact than <code>if dict.has_key('key1') and dict['key1']=='val1':</code></span>
<span class="comment-copy">This doesn't tell you whether the key <code>'key1'</code> is mapped to <code>'val1'</code>. Also, <code>has_key</code> is deprecated, and it's just a more verbose way of writing <code>'key1' in dict_</code>. And <code>has_key</code> doesn't take an optional second argument, either</span>
<span class="comment-copy">My bad, Typo on has_key.. it should be get instead in the 2nd part</span>
<span class="comment-copy">@stayhungry: OK, so now the second half is correct, but it's the same as smci's answer, but with less explanation, and following a misleading first half…</span>
