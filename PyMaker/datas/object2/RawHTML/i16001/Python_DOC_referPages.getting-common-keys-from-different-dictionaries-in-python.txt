<div class="post-text" itemprop="text">
<p>If I have two dictionaries (in my program there are more than two):</p>
<pre><code>a={'ab':3, 'bc':4, 'cj':2}
b={'ab':2, 'cd':2, 'ed':2, 'cj':4}
</code></pre>
<p>and want to get the common keys between them:</p>
<pre><code>common_keys=['ab','cj']
</code></pre>
<p>what should I do?</p>
<p>I understand <code>set.intersection</code> but do not know how to turn the dictionary keys into a set.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use dictionary views with <a href="https://docs.python.org/2/library/stdtypes.html#dict.viewkeys" rel="nofollow"><code>dict.viewkeys()</code></a> and set operations:</p>
<pre><code>common_keys = a.viewkeys() &amp; b.viewkeys() &amp; c.viewkeys()
</code></pre>
<p>If you are using Python 3 instead, the <a href="https://docs.python.org/3/library/stdtypes.html#dict.keys" rel="nofollow"><code>dict.keys()</code> method</a> returns a dictionary view already:</p>
<pre><code>common_keys = a.keys() &amp; b.keys() &amp; c.keys()
</code></pre>
<p>Either operation returns a <a href="https://docs.python.org/2/library/stdtypes.html#set-types-set-frozenset" rel="nofollow"><code>set</code> object</a>.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; a = {'ab': 3, 'bc': 4, 'cj': 2}
&gt;&gt;&gt; b = {'ab': 2, 'cd': 2, 'ed': 2, 'cj': 4}
&gt;&gt;&gt; c = {'ab': 6, 'ad': 2, 'dd': 2, 'cj': 1}
&gt;&gt;&gt; a.viewkeys() &amp; b.viewkeys() &amp; c.viewkeys()
set(['cj', 'ab'])
</code></pre>
</div>
<span class="comment-copy">why is using sets faster than using viewkeys?</span>
<span class="comment-copy">@PadraicCunningham: are sets faster than viewkeys?</span>
<span class="comment-copy">Using the OP's the code, <code>viewkeys -&gt; 1.15 Âµs per loop</code>,<code>set(a).intersection... -&gt; 706 ns per loop </code></span>
<span class="comment-copy">@PadraicCunningham: on 2.7 I do see a speed difference too; not sure why. Not big enough to forgo the clarity though.</span>
<span class="comment-copy">Yep,not a major difference I just presumed using <code>viewkeys</code> would be faster.</span>
