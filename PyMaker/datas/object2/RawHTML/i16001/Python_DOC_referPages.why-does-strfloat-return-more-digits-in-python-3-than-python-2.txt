<div class="post-text" itemprop="text">
<p>In Python 2.7, <code>repr</code> of a <code>float</code> returns the nearest decimal number up to 17 digits long; this is precise enough to uniquely identify each possible IEEE floating point value. <code>str</code> of a <code>float</code> worked similarly, except that it limited the result to 12 digits; for most purposes this is a more reasonable result, and insulates you from the slight differences between binary and decimal representation.</p>
<p>Python 2 demo: <a href="http://ideone.com/OKJtxv">http://ideone.com/OKJtxv</a></p>
<pre><code>print str(1.4*1.5)
2.1
print repr(1.4*1.5)
2.0999999999999996
</code></pre>
<p>In Python 3.2 it appears <code>str</code> and <code>repr</code> return the same thing.</p>
<p>Python 3 demo: <a href="http://ideone.com/oAKRsb">http://ideone.com/oAKRsb</a></p>
<pre><code>print(str(1.4*1.5))
2.0999999999999996
print(repr(1.4*1.5))
2.0999999999999996
</code></pre>
<p>Is there a PEP that describes the change, or some other statement from someone responsible?</p>
</div>
<div class="post-text" itemprop="text">
<p>No, there's no PEP.  There's an <a href="http://bugs.python.org/issue9337" rel="noreferrer">issue</a> in the bug tracker, and an <a href="https://mail.python.org/pipermail/python-dev/2010-July/102515.html" rel="noreferrer">associated discussion</a> on the Python developers mailing list.  While I was responsible for proposing and implementing the change, I can't claim it was my idea: it had arisen during conversations with Guido at EuroPython 2010.</p>
<p>Some more details: as already mentioned in comments, Python 3.1 introduced a new algorithm for the string <code>repr</code> of a float, (later backported to the Python 2 series, so that it also appears in Python 2.7).  As a result of this new algorithm, a "short" decimal number typed in at the prompt has a correspondingly short representation.  This eliminated one of the existing reasons for the difference between <code>str</code> and <code>repr</code>, and made it possible to use the same algorithm for both <code>str</code> and <code>repr</code>.  So for Python 3.2, following the discussion linked to above, <code>str</code> and <code>repr</code> were made identical.  As to why: it makes the language a little bit smaller and cleaner, and it removes the rather arbitrary choice of 12 digits when outputting the string.  (The choice of 17 digits used for the <code>repr</code> in Python versions prior to 2.7 is far from arbitrary, by the way: two distinct IEEE 754 binary64 floats will have distinct representations when converted to decimal with 17 significant digits, and 17 is the smallest integer with this property.)</p>
<p>Apart from simplicity, there are some less obvious benefits.  One aspect of the <code>repr</code> versus <code>str</code> distinction that's been confusing for users in the past is the fact that <code>repr</code> automatically gets used in containers.  So for example in Python 2.7:</p>
<pre><code>&gt;&gt;&gt; x = 1.4 * 1.5
&gt;&gt;&gt; print x
2.1
&gt;&gt;&gt; print [x]
[2.0999999999999996]
</code></pre>
<p>I'm sure there's at least one StackOverflow question asking about this phenomenon somewhere: <a href="https://stackoverflow.com/q/7374836/270986">here is one such</a>, and <a href="https://stackoverflow.com/q/22429955/270986">another</a> more recent one.  With the simplification introduced in Python 3.2, we get this instead:</p>
<pre><code>&gt;&gt;&gt; x = 1.4 * 1.5
&gt;&gt;&gt; print(x)
2.0999999999999996
&gt;&gt;&gt; print([x])
[2.0999999999999996]
</code></pre>
<p>which is at least more consistent.</p>
<p>If you do want to be able to hide imprecisions, the right way to do it remains the same: use string formatting for precise control of the output format.</p>
<pre><code>&gt;&gt;&gt; print("{:.12g}".format(x))
2.1
</code></pre>
<p>I hope that explains some of the reasoning behind the change. I'm not going to argue that it's universally beneficial: as you point out, the old <code>str</code> had the convenient side-effect of hiding imprecisions.  But in my opinion (of course, I'm biased), it does help eliminate a few surprises from the language.</p>
</div>
<span class="comment-copy">Looks like issue <a href="http://bugs.python.org/issue1580" rel="nofollow noreferrer">#1580</a> could be relevant here. There's also a note on this change in <a href="https://docs.python.org/3/whatsnew/3.1.html#other-language-changes" rel="nofollow noreferrer">Whatâ€™s New In Python 3.1: Other Language Changes</a> (last bullet point).</span>
<span class="comment-copy">I guess this is this one: <a href="http://bugs.python.org/issue9337" rel="nofollow noreferrer">bugs.python.org/issue9337</a></span>
<span class="comment-copy">Python 3.1 added a new feature to hide irrelevant rounding errors by rounding to the <i>shortest</i> decimal fraction within one epsilon of the float, instead of the <i>closest</i>, so the 12-digit hack is no longer necessary.</span>
<span class="comment-copy">@abarnert I think my short example shows the fallacy of that thinking. The link you provide seems only concerned with what tests are going to break, rather than whether it's a good idea in the first place; perhaps the mailing list discussion has more rationale.</span>
<span class="comment-copy">@MarkRansom: Well, in that particular case, the 12-digit hack was <i>wrong</i>, as you can see by <code>2.0999999999999996 == 2.1</code>. Sure, sometimes you may want that imprecision even though it's not irrelevant, but then sometimes you want only 2 digits too, and of course Python provides ways to do that explicitly and easily, it just doesn't do it implicitly. At any rate, if you want to argue over the rationale or try to change Python, this isn't the place to do it. Whether the arguments in the issues that Lukas and georg (not me) posted are fallacious or not, they were the arguments.</span>
<span class="comment-copy">Thanks for the info, this is exactly what I was looking for. I just wish there was an equivalent to the <code>g</code> format spec that didn't arbitrarily switch to scientific notation, I avoid it for that reason.</span>
<span class="comment-copy">Agreed; I've often wished for string formatting to be a little bit more configurable.  One day, maybe.</span>
<span class="comment-copy">P.S. I'm not sure I buy the argument that the output of an object needs to be the same as the output of a list containing the object, that's <i>still</i> not the case for strings containing unprintable characters: <a href="http://ideone.com/zNauZB" rel="nofollow noreferrer">ideone.com/zNauZB</a></span>
