<div class="post-text" itemprop="text">
<p>Can someone explain what this regular expression means? I am looking at someone else's python code, and I just find myself curious as to what the expression is doing. I am also not certain what the 2nd % sign means.</p>
<pre><code>regexStr = '(%s)' % '|'.join(['.*'.join(str(i) for i in p) for p in itertools.permutations(charList)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So it does this:</p>
<pre><code>import itertools
charList = [1, 2, 3]

'(%s)' % '|'.join(['.*'.join(str(i) for i in p) for p in itertools.permutations(charList)])
#&gt;&gt;&gt; '(1.*2.*3|1.*3.*2|2.*1.*3|2.*3.*1|3.*1.*2|3.*2.*1)'
</code></pre>
<p>First it generates all of the permutations of the input (unique orders):</p>
<pre><code>for permutation in itertools.permutations(charList):
    print(permutation)
#&gt;&gt;&gt; (1, 2, 3)
#&gt;&gt;&gt; (1, 3, 2)
#&gt;&gt;&gt; (2, 1, 3)
#&gt;&gt;&gt; (2, 3, 1)
#&gt;&gt;&gt; (3, 1, 2)
#&gt;&gt;&gt; (3, 2, 1)
</code></pre>
<p>For each of these, it converts each item to a string and joins them with <code>.*</code></p>
<pre><code>'.*'.join(str(i) for i in (1, 2, 3))
#&gt;&gt;&gt; '1.*2.*3'
</code></pre>
<p>Then it joins all of those with <code>|</code></p>
<pre><code>'|'.join(['.*'.join(str(i) for i in p) for p in itertools.permutations(charList)])
#&gt;&gt;&gt; '1.*2.*3|1.*3.*2|2.*1.*3|2.*3.*1|3.*1.*2|3.*2.*1'
</code></pre>
<p>and finally uses <code>'(%s)' % result</code> to <a href="https://docs.python.org/3.4/tutorial/inputoutput.html#old-string-formatting" rel="nofollow">wrap the result in brackets</a>:</p>
<pre><code>'(%s)' % '|'.join(['.*'.join(str(i) for i in p) for p in itertools.permutations(charList)])
#&gt;&gt;&gt; '(1.*2.*3|1.*3.*2|2.*1.*3|2.*3.*1|3.*1.*2|3.*2.*1)'
</code></pre>
<p>The pattern <code>'1.*2.*3'</code> matches all sequences like <code>111111222333333</code>.</p>
<p>The patern <code>A|B|C|D</code> matches <em>one</em> of <code>A</code>, <code>B</code>, <code>C</code> or <code>D</code>.</p>
<p>So the resulting regex matches any permutation, with each item repeated any number of times (including 0).</p>
<p>The outer brackets make this a capturing group.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just try it with a test string. Let's try 'abc'</p>
<pre><code>regexStr = '(%s)' % '|'.join(['.*'.join(str(i) for i in p) for p in itertools.permutations('abc')])

&gt;&gt;&gt; regexStr
'(a.*b.*c|a.*c.*b|b.*a.*c|b.*c.*a|c.*a.*b|c.*b.*a)'
</code></pre>
<p>So it creates a <code>regex</code> search string, with each character of the permeated passed in string delimited by <code>'.*'</code> and each of the permutations delimeted by <code>'|'</code>.</p>
<p>If any of the steps within that line of code confuse you, look at the documentation for each component</p>
<p><a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow"><code>itertools.permutations</code></a><br/>
<a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow"><code>str.join</code></a><br/>
<a href="https://docs.python.org/3/library/re.html" rel="nofollow"><code>regex formatting</code></a></p>
</div>
<span class="comment-copy">have you tried running it?</span>
