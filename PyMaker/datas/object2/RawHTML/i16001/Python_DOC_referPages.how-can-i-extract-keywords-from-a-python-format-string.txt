<div class="post-text" itemprop="text">
<p>I want to provide automatic string formatting in an API such that:</p>
<pre><code>my_api("path/to/{self.category}/{self.name}", ...)
</code></pre>
<p>can be replaced with the values of attributes called out in the formatting string.</p>
<hr/>
<p>How do I extract the keyword arguments from a Python format string:</p>
<pre><code>"non-keyword {keyword1} {{escaped brackets}} {} {keyword2}" =&gt; 'keyword1', 'keyword2'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/string.html#string.Formatter" rel="noreferrer"><code>string.Formatter()</code> class</a> to parse out the fields in a string, with the <a href="https://docs.python.org/3/library/string.html#string.Formatter.parse" rel="noreferrer"><code>Formatter.parse()</code> method</a>:</p>
<pre><code>from string import Formatter

fieldnames = [fname for _, fname, _, _ in Formatter().parse(yourstring) if fname]
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from string import Formatter
&gt;&gt;&gt; yourstring = "path/to/{self.category}/{self.name}"
&gt;&gt;&gt; [fname for _, fname, _, _ in Formatter().parse(yourstring) if fname]
['self.category', 'self.name']
&gt;&gt;&gt; yourstring = "non-keyword {keyword1} {{escaped brackets}} {} {keyword2}"
&gt;&gt;&gt; [fname for _, fname, _, _ in Formatter().parse(yourstring) if fname]
['keyword1', 'keyword2']
</code></pre>
<p>You can parse those field names further; for that you can use the <code>str._formatter_field_name_split()</code> method (Python 2) / <code>_string.formatter_field_name_split()</code> function (Python 3) (this internal implementation detail is not otherwise exposed; <a href="https://docs.python.org/3/library/string.html#string.Formatter.get_field" rel="noreferrer"><code>Formatter.get_field()</code></a> uses it internally). This function returns the <em>first part</em> of the name, the one that'd be looked up on in the arguments passed to <code>str.format()</code>, plus a generator for the rest of the field.</p>
<p>The generator yields <code>(is_attribute, name)</code> tuples; <code>is_attribute</code> is true if the next name is to be treated as an attribute, false if it is an item to look up with <code>obj[name]</code>:</p>
<pre><code>try:
    # Python 3
    from _string import formatter_field_name_split
except ImportError:
    formatter_field_name_split = str._formatter_field_name_split
from string import Formatter

field_references = {formatter_field_name_split(fname)[0]
 for _, fname, _, _ in Formatter().parse(yourstring) if fname}
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from string import Formatter
&gt;&gt;&gt; from _string import formatter_field_name_split
&gt;&gt;&gt; yourstring = "path/to/{self.category}/{self.name}"
&gt;&gt;&gt; {formatter_field_name_split(fname)[0]
...  for _, fname, _, _ in Formatter().parse(yourstring) if fname}
{'self'}
</code></pre>
<p>Take into account that this function is part of the internal implementation details of the <code>Formatter()</code> class and can be changed or removed from Python without notice, and may not even be available in other Python implementations.</p>
</div>
<div class="post-text" itemprop="text">
<p>If all placeholders are named, a special dictionary could be used to intercept which keys are tried to be accessed and logged to an array.</p>
<pre><code>def format_keys(str_):
    class HelperDict(dict):
        def __init__(self):
            self._keys = []
        def __getitem__(self, key):
            self._keys.append(key)    
    d = HelperDict()
    str_.format_map(d)
    return d._keys
</code></pre>
<p>Note that if there are unnamed placeholders, an IndexError will be raised by <code>.format()</code> (tuple index out of range).</p>
</div>
<div class="post-text" itemprop="text">
<p>Building off Martijn's answer, an easier format for the comprehensive list that I've used is:</p>
<pre><code>&gt;&gt;&gt; yourstring = "path/to/{self.category}/{self.name}"
&gt;&gt;&gt; [x[1] for x in yourstring._formatter_parser() if x[1]]
['self.category', 'self.name']
</code></pre>
<p>It's functionally exactly the same, just much easier to digest.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do <code>"path/to/{self.category}/{self.name}".format(self=self)</code>. You could thus work with those kwargs in <code>__getattr__</code>.</p>
</div>
<span class="comment-copy">I guess you don't want to use format?</span>
<span class="comment-copy">@user189 I <b>will</b> use <code>&lt;str&gt;.format(**kwargs)</code>. My question is about building that <code>kwargs</code> dictionary automatically.</span>
<span class="comment-copy">Just curious, Martijn, would <i>you</i> use a simple str.replace() or re.sub() (or something entirely different) to generate the new string?</span>
<span class="comment-copy">@mtik00: depends on the use case; sometimes a <code>str.replace()</code> is just what is called for.</span>
<span class="comment-copy">Thanks for your input!  In this specific case, I would have used <code>str.replace()</code> in a loop; nice and simple.</span>
<span class="comment-copy">@mtik00: this is not a simple replace job however; the <code>str.format()</code> format allows for <i>nested</i> placeholders too, for example.</span>
<span class="comment-copy">When does the parse() function return a None as field? I'm not able to understand the documentation :(</span>
<span class="comment-copy">A fun idea but it needs some polish.  e.g. the <code>None</code> returned by <code>__getitem__</code> will cause unhandled exception from a format string like <code>'My {foo} is {bar:03d}'</code>.</span>
<span class="comment-copy">I don't think this will actually.</span>
<span class="comment-copy">You don't think this will actually what?</span>
<span class="comment-copy">@JaceBrowning: it'll work; <code>self.__getattr__</code> will be called for each attribute on <code>self</code>. However, this doesn't help for anything that isn't an attribute on <code>self</code>.</span>
<span class="comment-copy">@MartijnPieters thanks for the clarification. This answer is almost exactly what I need, but I expect there will be non-attribute keywords as well.</span>
