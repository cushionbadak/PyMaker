<div class="post-text" itemprop="text">
<p>In my program, I need to check a user-input equation to make sure that it's a valid equation. I got rid of any operators at the beginning or end by using <code>myEquation[0].isdigit</code> and <code>myEquation[-1].isdigit()</code> but now I need to make sure that no operators are next to each other.</p>
<p>I thought about somehow putting '+', '-', '/', '*', and 'x' into a list called <code>operator</code> and then checking if any contents of that list were adjacent but I don't really know if lists work like that or how to do that.</p>
<p>For example, if the user inputs <code>"4++8-9"</code> the program should return <code>False</code></p>
</div>
<div class="post-text" itemprop="text">
<p>List works</p>
<pre><code>operator = ['+', '-', '/', '*']

def is_valid_input(myEquation):
    for c1,c2 in zip(myEquation[:-1],myEquation[1:]):
        if c1 in operator and c2 in operator:
            return False
    return True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>use this :</p>
<pre><code>([+-\/*x])\1+
</code></pre>
<p>demo here : <a href="http://regex101.com/r/lL7bL8/2" rel="nofollow">http://regex101.com/r/lL7bL8/2</a></p>
<p>this will replace the operators if they are repeated by one operator</p>
</div>
<div class="post-text" itemprop="text">
<p>Given an string <code>s</code> which contains an equation the following code will iterate it and check that no subsequent characters are in a set <code>operators</code>.</p>
<pre><code>from itertools import tee

s = '2 + / 3'
operators = {'+', '-', '/', '*'}

# Create two iterators to iterate over the string but then advance one of them with next()
a, b = tee(s.replace(' ', ''))
next(b)

print(any(i in operators and j in operators for i, j in zip(a, b)))
# True
</code></pre>
<p>It uses <a href="https://docs.python.org/3/library/itertools.html#itertools.tee" rel="nofollow"><code>itertools.tee</code></a> to set up to iterators which can be iterated over in turn to check neighbouring characters. <a href="https://docs.python.org/3.4/library/functions.html#any" rel="nofollow"><code>any</code></a> will return <code>True</code> if any of the iterations returns <code>True</code> (in this case if two neighbouring characters are in <code>operators</code>).</p>
<p>I've also done some simplistic replacing of <code>' '</code> with <code>''</code> to take into account people who like to put spaces in their equations, this is something you'll have to think about more seriously.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could achieve this through regex.</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; r = re.compile(r'^(?!.*?[-+*\/x][-+x*\/])')
&gt;&gt;&gt; if r.match('a+/b'): print 'Valid'
... 
&gt;&gt;&gt; if r.match('a+b*cxd'): print 'Valid'
... 
Valid
</code></pre>
<p><strong>Explanation:</strong></p>
<p><code>^(?!.*?[-+*\/x][-+x*\/])</code> matches the start of a line only when the operators aren't exists consecutively. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can generate all the pairs of consecutive characters like this:</p>
<pre><code>&gt;&gt;&gt; eq = 'a+b*c'
&gt;&gt;&gt; zip(eq[:-1], eq[1:])
[('a', '+'), ('+', 'b'), ('b', '*'), ('*', 'c')]
</code></pre>
<p>So then you only have to check that there aren't any of those pairs
for which both symbols are operators:</p>
<pre><code>&gt;&gt;&gt; def valid(eq):
...   ops = '+-*/'
...   return not any(x in ops and y in ops for x, y in zip(eq[:-1], eq[1:]))
... 
&gt;&gt;&gt; valid('a+/b')
False
&gt;&gt;&gt; valid('a+b*c')
True
</code></pre>
</div>
<span class="comment-copy">post some examples.</span>
<span class="comment-copy">give some examples please.</span>
<span class="comment-copy">I think he wants to detect consecutive operators, even if they aren't the same operator. Ex. "a*/b" is an invalid equation.</span>
<span class="comment-copy">@Kevin <code>+-</code> could be valid though :)</span>
<span class="comment-copy">Good answers accompany code samples with an explanation for future readers. While the person asking this question may understand your answer, explaining how you arrived at it could help countless others.</span>
