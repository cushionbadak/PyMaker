<div class="post-text" itemprop="text">
<p>I have a dictionary of keys that have different integer values, e.g. </p>
<pre><code>d = {'a':1, 'b':12, 'c':33, 'd':40, 'e':15, 'f':6, 'g':27}
</code></pre>
<p>I want to be able to return a list of keys whose combined values equal a certain number, e.g.</p>
<pre><code>number = 55
result = ['d', 'e']
</code></pre>
<p>I'm not sure how to approach the problem, or whether I should be thinking about it iteratively or recursively.  I'm at a bit of a loss on this one.
At the moment I am working in Python 2.7, but wouldn't mind seeing solutions in Python 3 as well.
To be honest, even suggestions would be appreciated at this stage.</p>
</div>
<div class="post-text" itemprop="text">
<p>As long as the number of items isn't too large, you can brute-force this:</p>
<pre><code>import itertools
def matches(d, target):
    # First try single items, then couples, then triplets etc.
    for num in range(1,len(d)+1):
        # Iterate over all possible combinations of length num
        for com in itertools.combinations(d.items(), num):
            # Does the sum of all second items per key/value pair match the target?
            if sum(item[1] for item in com) == target:
                # Yield one item at a time, so the caller can decide when to stop
                yield com
</code></pre>
<p>You can use it to iterate over all matches:</p>
<pre><code>&gt;&gt;&gt; mydict = {'a':1, 'b':12, 'c':33, 'd':40, 'e':15, 'f':6, 'g':27}
&gt;&gt;&gt; for match in matches(mydict,55):
...     print(match)
...
(('d', 40), ('e', 15))
(('c', 33), ('e', 15), ('f', 6), ('a', 1))
(('b', 12), ('e', 15), ('g', 27), ('a', 1))
</code></pre>
<p>or add a <code>break</code> after the <code>print()</code> line to make your program stop at the first match.</p>
</div>
<div class="post-text" itemprop="text">
<p>1)Sort dictionary to create a list of tuples .<br/>
 2)Now, For each index <code>i</code> in sorted list, find index <code>j</code> for which
   <code>sum-value_at_index_i</code> is equal to <code>value_at_index_j</code> .</p>
<pre><code>a= {'a':1, 'b':12, 'c':33, 'd':40, 'e':15, 'f':6, 'g':27}
# Lets sort it first
a_sort = sorted(a.items(),key=lambda x:x[1])
n=len(a)
i=j=flag=0
sum=55 #Input the sum from user
result = []
while i&lt;n:
        j=i+1
        while j&lt;n:
                if (sum-a_sort[i][1]) == a_sort[j][1] :
                        result.append(a_sort[j][0])
                        result.append(a_sort[i][0])
                        flag=1
                        break
                else:
                        j=j+1
        if flag==1:
                break
        i=i+1

print result
</code></pre>
<p>Output:</p>
<pre><code>['d', 'e']
</code></pre>
</div>
<span class="comment-copy"><a href="http://en.wikipedia.org/wiki/Knapsack_problem" rel="nofollow noreferrer">en.wikipedia.org/wiki/Knapsack_problem</a></span>
<span class="comment-copy">I like what you did there.  It's more elegant than what I was expecting and I can kind of follow what's going on, even though I am unfamiliar with itertools and combinations.  Thanks for your help.</span>
<span class="comment-copy">@ErmahgerdLulz: I added some comments; you should definitely check out the <a href="http://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code> module</a>. While you're at it, also read about <a href="http://docs.python.org/3/library/collections.html" rel="nofollow noreferrer"><code>collections</code></a> which is full of extremely useful objects.</span>
<span class="comment-copy">Thanks a lot for that.  =)</span>
<span class="comment-copy">Thanks.  You code works, but I'm having a little trouble understanding what's going on.  I'm relatively new to Python, so my next mission will be to understand your code. Thanks again.</span>
