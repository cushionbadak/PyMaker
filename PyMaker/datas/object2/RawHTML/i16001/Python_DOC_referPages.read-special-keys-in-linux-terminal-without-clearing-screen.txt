<div class="post-text" itemprop="text">
<p>I have a program where I simply need to read special keys in a linux terminal (both xterm and console). Currently I am using the <a href="https://docs.python.org/3/library/curses.html#module-curses" rel="nofollow"><code>curses</code></a> to do it (though I absolutely do not need curses for anything else), and it works perfectly except for the one nuisance: I do not want curses to clear the screen and change the CRLF mode.</p>
<p>That is, this code would do it:</p>
<pre><code>stdscr = curses.initscr()
curses.cbreak()
curses.noecho()
stdscr.keypad(1)

while True:
    c = stdscr.getch()
    if c == curses.KEY_UP:
        scroll_up()
    elif c == curses.KEY_DOWN:
        scroll_down()
</code></pre>
<p>but the complication is that it will clear the screen and previous content on the terminal is not seen; also all output from background processes will have newlines converted to linefeed only.</p>
<p>I know I can turn the terminal into uncooked mode myself, delay after <code>ESC</code> character, and so, but I want this program to work with special keys such as <kbd>F1</kbd>, <kbd>Home</kbd> and <kbd>â†‘</kbd> consistently, on all terminals, and as such it would be PITA</p>
<p>Thus is there any way to either</p>
<ul>
<li>Avoid clearing screen with curses and changing the newline mode (I read that the function <code>newterm</code> of ncurses could be used for it, but it is not implemented by Python), <strong>or</strong></li>
<li>Any way to restore the original screen after it was cleared and manually restore the CRLF behavior and such, <strong>or</strong></li>
<li>Any other simple way of consistently reading special keys in Linux?</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>(Moved from the comments)</p>
<p>Maybe have a look at <code>https://bitbucket.org/pypy/pyrepl</code>. It is curses-based but doesn't clear the screen.  The applications <code>pythoni</code> and <code>pythoni1</code> give a Python prompt that doesn't use <code>readline</code>, but present a similarish interface, with a few extras like multiline editing (in case we try to type a multiline command).</p>
<p>To answer your latest comment: the arrow keys work for me in <code>pythoni</code> and <code>pythoni1</code>...</p>
</div>
<span class="comment-copy">Maybe have a look at <code>https://bitbucket.org/pypy/pyrepl</code>.  It is curses-based but doesn't clear the screen.</span>
<span class="comment-copy">Looks interesting, but it wasn't quite obvious how to hook it in here, should I instantiate UnixConsole?</span>
<span class="comment-copy">ah, prepare(), and get_event(). Now just how do I change the newline back to CRLF? :D would you want to make this into an answer ;)</span>
<span class="comment-copy">EXCEPT that it did not decode arrow keys :(</span>
<span class="comment-copy">I am going to accept this answer, as indeed it worked beautifully. However in this case we ended up reading the <code>hidraw0</code> device instead.</span>
