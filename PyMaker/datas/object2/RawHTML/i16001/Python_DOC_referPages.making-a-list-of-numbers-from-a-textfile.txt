<div class="post-text" itemprop="text">
<p>I'm trying to make a program which bubblesorts a list of numbers from a text file. The file has one integer per line. I tried opening the file like so:</p>
<pre><code>data = open(file).readlines()
</code></pre>
<p>but if I do this, the line breaks <code>\n</code> are included in the list and my bubblesort orders the number by the first digit only (i.e. 6 is after 19).  Here's an example of what happens when I run my program.  I first print out the unsorted list, then print the sorted list.</p>
<pre><code>['13\n', '6\n', '87\n', '19\n', '8\n', '23\n', '8\n', '65']
['13\n', '19\n', '23\n', '6\n', '65', '8\n', '8\n', '87\n']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to convert the elements of <code>data</code> into ints, as files are read in as strings. Before you do the conversion, it's probably also wise to remove the <code>\n</code> characters, which you can do with <a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow"><code>str.strip</code></a>.</p>
<p>Using a list comprehension:</p>
<pre><code>with open(file, 'r') as f:
    data = [int(line.strip()) for line in f]
</code></pre>
<p>I added the <a href="https://docs.python.org/3/reference/compound_stmts.html#the-with-statement" rel="nofollow"><code>with</code></a> context manager. It's usually good practice to use it when opening files, as it ensures that the file is afterwards. Also note that <code>readlines</code> isn't actually needed - iterating over a file provides each line as a string by default.</p>
<p>Actually, <code>strip</code> isn't even needed, as <code>int</code> automatically seems to strip whitespace. I might keep it just in case though.</p>
<pre><code>int(' 13')    # 13
int('13\t')   # 13
int('13 \n')  # 13
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You want a list of integers:</p>
<pre><code>int_data = [int(dat) for dat in data]
</code></pre>
<p>Of course, it'd be even better to do it one integer at a time instead of reading the whole file and then converting it to integers:</p>
<pre><code>with open('datafile') as fin:
    int_data = [int(line) for line in fin]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd recommend stripping the newline character and int converting.  You can do this in one succinct line with a list comprehension, but a for loop would also suffice if the list comprehension syntax is confusing.</p>
<pre><code>data = open(file).readlines()
out = [int(x.strip('\n') for x in data]
out.sort()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>with open(filename) as f:
    data = f.read().splitlines() # give list without endline chars
numbers = map(int, data) 
# but be careful, this can throw ValueError on non-number strings
</code></pre>
<p>if you expect that not all rows can be converted to integers, write helper generator:</p>
<pre><code>def safe_ints(iterable):
    for item in iterable:
            try:
                yield int(item)
            except ValueError as err:
                continue
</code></pre>
<p>and then use:</p>
<pre><code>numbers = list(safe_ints(data))
</code></pre>
</div>
