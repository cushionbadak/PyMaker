<div class="post-text" itemprop="text">
<p>I have to extract hundreds of tar.bz files each with size of 5GB. So tried the following code:</p>
<pre><code>import tarfile
from multiprocessing import Pool

files = glob.glob('D:\\*.tar.bz') ##All my files are in D
for f in files:

   tar = tarfile.open (f, 'r:bz2')
   pool = Pool(processes=5)

   pool.map(tar.extractall('E:\\') ###I want to extract them in E
   tar.close()
</code></pre>
<p>But the code has type error:
TypeError: map() takes at least 3 arguments (2 given)</p>
<p>How can I solve it?
Any further ideas to accelerate extracting?</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to change <code>pool.map(tar.extractall('E:\\')</code> to something like  <code>pool.map(tar.extractall(),"list_of_all_files")</code></p>
<p>Note that <code>map()</code> takes 2 argument first is a function , second is a iterable , and Apply function to every item of iterable and return a list of the results. </p>
<p>Edit : you need to pass a <code>TarInfo</code> object into the other process : </p>
<pre><code>def test_multiproc():
    files = glob.glob('D:\\*.tar.bz2')
    pool  = Pool(processes=5)
    result = pool.map(read_files, files)


def read_files(name):

 t = tarfile.open (name, 'r:bz2')
 t.extractall('E:\\')
 t.close()

&gt;&gt;&gt;test_multiproc()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Define a function that extract a single tar file. Pass that function and a tar file list to <code>multiprocessing.Pool.map</code>:</p>
<pre><code>from functools import partial
import glob
from multiprocessing import Pool
import tarfile


def extract(path, dest):
    with tarfile.open(path, 'r:bz2') as tar:
        tar.extractall(dest)

if __name__ == '__main__':
    files = glob.glob('D:\\*.tar.bz')
    pool = Pool(processes=5)
    pool.map(partial(extract, dest='E:\\'), files)
</code></pre>
</div>
<span class="comment-copy">I'm betting your problem here is the I/O rather than the code. The <code>map</code> error is clear: you have to provide a function and the list of parameters to that function. Your case: <code>map(extractall, [list, of, files])</code></span>
<span class="comment-copy">How can I provide the destination directory? map(extractall, [list, of, files])</span>
<span class="comment-copy">Different targets to each file? <code>[(list, dest), (of, dest2), (files, dest3)]</code>. Same target? Create a <code>functools.partial</code> for the <code>extractall</code>.</span>
<span class="comment-copy">Actually same target to each file.</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/8250264/how-can-i-process-a-tarfile-with-a-python-multiprocessing-pool">How can I process a tarfile with a Python multiprocessing pool?</a></span>
<span class="comment-copy">E is the destination directory to put the extracted file.</span>
<span class="comment-copy">So is not it necessary to use tar = tarfile.open (f, 'r:bz2')?</span>
<span class="comment-copy">yes and i think instead that you can use <code>TarFile.getmembers()</code> inside <code>tar.extractall</code></span>
<span class="comment-copy">Sorry I could not understand what you said; waiting for your complete solution.</span>
<span class="comment-copy">i edit the answer , could you pls try it and give me the result ?</span>
<span class="comment-copy">Also, you could have a look to concurrent.futures.ProcessPoolExecutor() <a href="https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
