<div class="post-text" itemprop="text">
<p>What is the most pythonic way for me to check if value from one dictionary is subset over value of list from the other dictionary. So far I have following code
However, the code is ok, if itemB's value from res is valB. But it failed, if value are valBA or valBB.</p>
<pre><code>exp = dict(itemA = ['valA1', 'valA2'], itemB = ['valB', ['valBA', 'valBB']], itemC = ['valC1', 'valC2'])
res = dict(itemA = 'valA1', itemB = 'valBA', itemC = 'valC1')
for e, r in zip(sorted(exp), sorted(res)):
    if r == 'itemB':
        return any(res[r] in s for s in exp[e][0])
    else:
        return res[r] in exp[e]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's not clear what you want - to list which are subsets, or the subset values? Also, you don't need zip - since <code>dict</code> is an unordered set unless you can provide a clear order (which you're attempting with sorted) and if the two dicts don't have the same number and the same named keys - it will fail. It's much simpler to do it like:</p>
<pre><code>exp = dict(itemA=['valA1','valA2'],itemB=['valB',['valBA','valBB']],itemC=['valC1','valC2'])
res = dict(itemA='valA1',itemB='valBA',itemC='valC1')

subsets = [k for k, v in res.items() if v in exp.get(k, {})]
# ['itemC', 'itemA']

subset_values = [v for k, v in res.items() if v in exp.get(k, {})]
# ['valA1', 'valC1']

# to check if all subsets exist
all_subsets = all(v in exp.get(k, {}) for k, v in res.items())
# False
</code></pre>
<p>If you need to check two levels, assuming the sub-sublevel is a list, you can do it as:</p>
<pre><code>subsets = []
for group, value in res.items():
    for subgroup in exp.get(group, []):
        if value == subgroup or (isinstance(subgroup, list) and value in subgroup):
            subsets.append(group)  # or append value if you're after that
            break

 # ['itemA', 'itemB', 'itemC']

 # or to check if all matched:
 all_subsets = len(subsets) == len(exp)
 # True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>exp = dict(itemA = ['valA1', 'valA2'], itemB = ['valB', ['valBA', 'valBB']], itemC = ['valC1', 'valC2'])
res = dict(itemA = 'valA1', itemB = 'valBA', itemC = 'valC1')

new_vals = [a for a, b in zip(res.values(), exp.values()) if a in b]
</code></pre>
</div>
<span class="comment-copy">It would help if you started with valid Python syntax.... where did you come up with that <code>dict</code> syntax?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/stdtypes.html#dict" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#dict</a> i just use dict to create dictionary variablae</span>
<span class="comment-copy">the main purpose is I want to check if all value from res dictionary are in value of dictionary exp</span>
<span class="comment-copy">I've added how to check for subsets too. But looking at your data, do you want to check subsets of subsets as well? And if so, how deep does that go?</span>
<span class="comment-copy">yes, only 2 level, but i would like to write something more pythonic that can check for subset and subset of subset at the same time</span>
<span class="comment-copy">@jacobcan118 check the update... it's a bit more verbose but, while you can totally do it in one line, if you're after the illusive 'Pythonic' approach then simple is always better than complex and readable is always better than unreadable. Comprehensions are frequently abused by people thinking that one-liners are by default Pythonic, even tho it's often done at the expense of readability and/or performance.</span>
