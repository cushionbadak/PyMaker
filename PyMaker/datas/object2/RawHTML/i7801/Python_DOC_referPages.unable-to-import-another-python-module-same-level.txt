<div class="post-text" itemprop="text">
<p>I have a file called</p>
<pre><code>server.py
</code></pre>
<p>another called <code>constants.py</code></p>
<pre><code>constants.py
</code></pre>
<p>is on the same level as <code>server.py</code></p>
<p>Here is what I am doing:</p>
<p><strong>server.py</strong></p>
<pre><code>import constants
def hello_world():
   print(BUCKET_NAME)
</code></pre>
<p><strong>constants.py</strong></p>
<p><code>BUCKET_NAME = 'uw-note-share'</code></p>
<p>I am getting the error:</p>
<p><code>NameError: global name 'BUCKET_NAME' is not defined</code></p>
<p>Even though I am properly importing. What is the issue?</p>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at the <a href="https://docs.python.org/3/tutorial/modules.html#more-on-modules" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p>Enter the Python interpreter and import this module with the following command:
  <code>import fibo</code>
  This does not enter the names of the functions defined in <code>fibo</code> directly in the current symbol table; it only enters the module name <code>fibo</code> there.</p>
<p>Each module has its own private symbol table, which is used as the global symbol table by all functions defined in the module. Thus, the author of a module can use global variables in the module without worrying about accidental clashes with a user’s global variables. On the other hand, if you know what you are doing you can touch a module’s global variables with the same notation used to refer to its functions, <code>modname.itemname</code>.</p>
</blockquote>
<p>This may seem very complicated, but what it says is basically, when you import a module, all of its contents remain in a separate <a href="https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces" rel="nofollow noreferrer">namespace</a> in order to prevent collisions (i.e. two variables in two modules with the exact same name). </p>
<p>Lets take your example. For your code to work you have two options.</p>
<p><strong>Option A</strong></p>
<p>Explicitly tell python that the variable you're looking for is defined in the <code>constants</code> module.</p>
<pre><code>import constants
def hello_world():
   print(constants.BUCKET_NAME)
</code></pre>
<p><strong>Option B</strong></p>
<p>Again, from the <a href="https://docs.python.org/3/tutorial/modules.html#more-on-modules" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p>There is a variant of the import statement that imports names from a module directly into the importing module’s symbol table.</p>
</blockquote>
<p>This variant is the following:</p>
<pre><code>from module import x
</code></pre>
<p>What this does is it imports everything one by one from the <code>constants</code> module. From then on, python treats that data as if it was defined in your current module. </p>
<p>Using this approach, you can do the following:</p>
<pre><code>from constants import *
def hello_world():
   print(BUCKET_NAME)
</code></pre>
<p>The <code>*</code> here tells python to import <em>everything</em> from that module. This is convenient in a lot of cases, however be advised, this may cause performance issues when dealing with large modules. Also, keep in mind:</p>
<blockquote>
<p>This does not introduce the module name from which the imports are taken in the local symbol table</p>
</blockquote>
<p>What this means is that if you opt to only import <code>BUCKET_NAME</code> from constants (<code>from constants import BUCKET_NAME</code> instead of <code>import *</code>), <code>constants</code> won't be defined. You will not be able to access other variables defined in that module without <em>also</em> writing <code>import constants</code>.</p>
<p>For a more detailed explanation regarding the performance of the latter approach, take a look at <a href="https://stackoverflow.com/a/3592137/7662085">this</a> excellent post by <a href="https://stackoverflow.com/users/43927/roberto-liffredo">Roberto Liffredo</a>, as well as <a href="https://softwareengineering.stackexchange.com/a/187471">this</a> by resident python master <a href="https://softwareengineering.stackexchange.com/users/55400/martijn-pieters">Martijn Pieters</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try ,</p>
<pre><code>from constants import BUCKET_NAME
print(BUCKET_NAME)
</code></pre>
<p>Or you could,</p>
<pre><code>import constants
print(constants.BUCKET_NAME)
</code></pre>
<p>When we import a module, we are making it available to us in our current program as a separate namespace. This means that we will have to refer to the function in dot notation, as in [module].[function].</p>
</div>
<div class="post-text" itemprop="text">
<p>You are trying to import whole file itself. You can get it to work in two ways,</p>
<pre><code>import constants
def hello_world():
   print(constants.BUCKET_NAME)
</code></pre>
<p>OR</p>
<pre><code>from constants import BUCKET_NAME
def hello_world():
   print(BUCKET_NAME)
</code></pre>
<p>I hope this helps you.</p>
</div>
<span class="comment-copy"><code>constants.BUCKET_NAME</code></span>
