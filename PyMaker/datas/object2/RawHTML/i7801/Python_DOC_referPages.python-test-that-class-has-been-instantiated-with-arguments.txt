<div class="post-text" itemprop="text">
<p>I'm pretty new with python, and I'm trying to figure out how to test this code.</p>
<p>Here is my class:</p>
<pre><code>#!/usr/bin/python

import argparse
from generator import *

parse = argparse.ArgumentParser(description='XOS Generative Toolchain')
parse.add_argument('--rev', dest='rev', action='store_true',default=False, help='Convert proto to xproto')
parse.add_argument('--target', dest='target', action='store',default=None, help='Output format, corresponding to &lt;output&gt;.yaml file', required=True)
parse.add_argument('--output', dest='output', action='store',default=None, help='Destination dir', required=True)
parse.add_argument('--attic', dest='attic', action='store',default=None, help='The location at which static files are stored')
parse.add_argument('--kvpairs', dest='kv', action='store',default=None, help='Key value pairs to make available to the target')
parse.add_argument('inputs', metavar='&lt;input file&gt;', nargs='+', action='store', help='xproto files to compile')

class XosGen:

    @staticmethod
    def init(args=None):

        if not args:
            args = parse.parse_args()

        args.quiet = False

        # convert output to absolute path
        if not os.path.isabs(args.output):
            args.output = os.path.abspath(os.getcwd() + '/' + args.output)
        if not os.path.isabs(args.target):
            args.target = os.path.abspath(os.getcwd() + '/' + args.target)

        inputs = []
        for fname in args.inputs:
            if not os.path.isabs(fname):
                inputs.append(os.path.abspath(os.getcwd() + '/' + fname))
            else:
                inputs.append(fname)
        args.inputs = inputs

        print args.output

        generator = XOSGenerator(args)
        generator.generate()
</code></pre>
<p>And here is the test:
    import unittest
    from mock import patch
    from xosgen.xosgen import XosGen</p>
<pre><code>class Args:
    pass

class XOSGeneratorTest(unittest.TestCase):
    """
    Testing the CLI binding for the XOS Generative Toolchain
    """

    def test_generator(self):
        """
        [XOS-GenX] The CLI entry point should correctly parse params  
        """
        args = Args()
        args.inputs = ['../test.xproto']
        args.target = '../test.xtarget'
        args.output = '../out/dir'

        expected_args = Args()
        expected_args.inputs = ['/Users/teone/Sites/opencord/orchestration/xos/lib/test.xproto']
        expected_args.target = '/Users/teone/Sites/opencord/orchestration/xos/lib/test.xtarget'
        expected_args.output = '/Users/teone/Sites/opencord/orchestration/xos/lib/out/dir'

        with patch("xosgen.xosgen.XOSGenerator") as generator:
            XosGen.init(args)
            generator.assert_called_with(expected_args)

if __name__ == '__main__':
    unittest.main()
</code></pre>
<p>What I want to test is if the passed arguments were changed correctly, but my test is failing with:</p>
<pre><code>AssertionError: Expected call: XOSGenerator(&lt;test_cli.Args instance at 0x10abc29e0&gt;)
Actual call: XOSGenerator(&lt;test_cli.Args instance at 0x10abc2950&gt;)
</code></pre>
<p>What would be the correct way to test this?</p>
</div>
<div class="post-text" itemprop="text">
<p>By calling both</p>
<pre><code>args = Args()
</code></pre>
<p>and</p>
<pre><code>expected_args = Args()
</code></pre>
<p>you are assigning these two variables to two different objects, thus they fail the test case even though their attributes are the same.</p>
<p>To overcome this, you might want to specifically compare their attributes. Referring to <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.call_args" rel="nofollow noreferrer">call_args</a>, </p>
<pre><code>with patch("xosgen.xosgen.XOSGenerator") as generator:
    XosGen.init(args)
    actual_args = generator.call_args[1]['args'] # if XOSGenerator takes in a keyword argument
    actual_args = generator.call_args[0][0] # otherwise, so comment one of these lines out
    assert actual_args.inputs == expected_args.inputs
    assert actual_args.target == expected_args.target
    assert actual_args.output == expected_args.output
</code></pre>
</div>
