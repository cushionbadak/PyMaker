<div class="post-text" itemprop="text">
<p>Situation: Comparing strings in fileA with pre-defined strings in fileB. Example of said function in my code:</p>
<pre><code>string = open('fileA', 'r')
stringlist = open('fileB', 'r')

//compare the strings
for i in string:
    for j in stringlist:
        if i == j:
            print("Same String found!" + i + " " + j)
</code></pre>
<p>Problem: In my actual program, <code>string</code> contains more than 200 strings, while <code>stringlist</code> is a file with more than 50,000 strings. The nested for loop, as I have read, is slow as a comparison function.</p>
<p>Question: What is the fastest way to compare the two files' content?</p>
<p>Additional information 1: Both files are CSV files, and are opened in my program as CSV-delimited.</p>
<p>Additional information 2: Strings are md5 hashes (32 characters).</p>
<p>Additional information 3: I am open to other ways to store the strings, i.e. Compare the strings on-the-fly instead of saving it to fileA.</p>
<p>Additional information 4: I am also open to other methods or modules that I can use (i.e.: Threading/parallel processing) -- speed is the key here.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should use <a href="https://docs.python.org/2/library/sets.html" rel="nofollow noreferrer">sets</a>:</p>
<pre><code>setA = set(listA)
setB = set(listB)
common = setA.intersection(setB)
</code></pre>
<p><code>common</code> now holds all the strings that are present in both lists</p>
<p>You can also do this with a one-liner:</p>
<pre><code>common = set(listA).intersection(set(listB))
</code></pre>
<p>If you can do this comparison "on the fly" it is of course better and faster than saving the lists to a file and then reading again from that file, you gain nothing by doing that.</p>
<p>And of course, to print duplicates:</p>
<pre><code>for x in common:
    print(x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are okay with not printing duplicates, using <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">set.intersection</a> should be really fast:</p>
<pre><code>list1 = ["hello", "world", "foo"]
list2 = ["foo", "bar", "baz"]

set(list1).intersection(list2)
# {'foo'}
</code></pre>
</div>
<span class="comment-copy">I am only generating <code>strings</code>. <code>stringlist</code> is a file that is downloaded from the internet. I do have plans to load it to RAM for supposedly faster access</span>
<span class="comment-copy">Then don't save <code>string</code> to file and load <code>stringlist</code> to memory like you said, that is optimal. as long as <code>stringlist</code> file isn't too big for your memory to contain</span>
<span class="comment-copy">one last question: So I can use threading like this for optimal speed?: thread1 = //hash; thread2 = //compare; //pass thread1 to thread2; //thread2 compares while thread1 hashes a new file</span>
<span class="comment-copy">you can do something like that with a little effort, yes, but for file sizes that you mentioned the gain in speed will not be large in comparison to the <code>set</code> example</span>
<span class="comment-copy">Also, re-edited my answer to show how to <code>common</code> list, but that was probably obvious</span>
<span class="comment-copy">If I want to print the duplicates is there a way?</span>
<span class="comment-copy">@TimothyWongGlash I can't think of another way than using list comprehensions. <code>[s for s in list1 if s in list2]</code> but this doesn't account the duplicates (repetitions) in list2. So you need to do a second loop which gives cluttered results and similar in performance to the question. Maybe you can use <code>collections.Counter</code> to find how many duplicates there are and print accordingly but that would not be in same order.</span>
