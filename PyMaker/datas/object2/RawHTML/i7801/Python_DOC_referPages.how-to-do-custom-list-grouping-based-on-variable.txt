<div class="post-text" itemprop="text">
<p>Say I have a list that gets generated such as:</p>
<pre><code>list_x = [0,1,2,3,4,5,6,7,8,9]
</code></pre>
<p>Then I divide it up like this:</p>
<pre><code>list_x = [01,23,45,67,89]
</code></pre>
<p>with this list comprehension:</p>
<pre><code>list_x = [0,1,2,3,4,5,6,7,8,9]
grp_count = 2
new_list = map(int, [list_x[i+0]+list_x[i+1] for i in range(0, len(list_x)-1, grp_count)])
</code></pre>
<p>How can I make this code so I can group it into a grouping based on `grp_count'</p>
<p>for example if <code>group_count = 5</code>:</p>
<pre><code>list_x = [01234,56789]
</code></pre>
<p>I know I have to insert multiple <code>list_x[i+n]</code> for each addition of grouping size somehow.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>list comprehension</code> to do the trick like this example:</p>
<pre><code>def grouper(a, num):
    if num &gt; int(len(a)/2):
        return []
    # If you need to return only a list of lists use:
    # return [a[k:k+num] for k in range(0, len(a), num)]
    return ["".join(map(str, a[k:k+num])) for k in range(0, len(a), num)]

a = [0,1,2,3,4,5,6,7,8,9]
print(grouper(a, 2))
print(grouper(a, 5))
</code></pre>
<p>Output:</p>
<pre><code>['01', '23', '45', '67', '89']
['01234', '56789']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This looks a lot like the itertools grouper recipe from <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">https://docs.python.org/3/library/itertools.html</a> </p>
<pre><code>from itertools import zip_longest

def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return zip_longest(*args, fillvalue=fillvalue)
</code></pre>
<p>then</p>
<pre><code>list_x = [0,1,2,3,4,5,6,7,8,9]
print(list(grouper(list_x, 5, 0)))
</code></pre>
<p>gives</p>
<pre><code>[(0, 1, 2, 3, 4), (5, 6, 7, 8, 9)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As I said in a comment, there's no way to create a list of integers in Python that would display like <code>[01234,56789]</code> because Python doesn't show the value of integers with a leading zero like that. The closest you could get is <code>[1234, 56789]</code>.</p>
<p>However you can create a list of <strong>strings</strong> with those digits in them like this:</p>
<pre><code>def grouper(n, iterable):
    return zip(*[iter(iterable)]*n)

list_x = [0,1,2,3,4,5,6,7,8,9]
grp_count = 5
new_list = [''.join(map(str, g)) for g in grouper(grp_count, list_x)]
print(new_list)  #-&gt; ['01234', '56789']
</code></pre>
</div>
<span class="comment-copy">Your code gives <code>1,5,9,13,17</code>. Is that what you need?</span>
<span class="comment-copy">Python doesn't display the leading zeros of integers like that by default.</span>
<span class="comment-copy">What should be the returnformat: strings (list of chars in python) in a list? O tuples?</span>
<span class="comment-copy">The line with the return is very readable and totaly easy to understand... not</span>
<span class="comment-copy">And now with <code>map()</code> ? It's a simple <code>list comprehension</code> ...</span>
<span class="comment-copy">You're welcome. Glade that this answer is helping you. Happy coding.</span>
<span class="comment-copy"><b>edited over 5 min</b>: This works great without new imports. Thanks! I'm still trying to comprehend the return with the nested loop in the function. Seems complicated.</span>
<span class="comment-copy">Can you explain why are you using <code>*[iter(iterable)]*n</code> inside of <code>zip()</code> ? I didn't get the reason behind. Thanks.</span>
<span class="comment-copy">@Chiheb: Why? Because, used as arguments to <code>zip()</code>, it's a compact way to create an iterator that will return elements from its second argument in groups of <code>n</code> items. Is that what you want to know? Perhaps it would be a little more understandable if written as <code>*([iter(iterable)]*n)</code>.</span>
<span class="comment-copy">Thanks for your comment. It's the first time i see a piece of code like yours. And i think that i didn't get it well even After your comment. I'll try to meditate on your answer and try to understand they way you used to solve this current question. Thanks a lot for your comment. Have a nice day.</span>
<span class="comment-copy">@Chiheb: You're welcome. It's almost identical to a similarly named recipe in the <a href="https://docs.python.org/3/library/itertools.html?highlight=grouper#itertools-recipes" rel="nofollow noreferrer"><b>Itertools Recipes</b></a> section of the documentation for the <code>itertools</code> module. Also note that the first <code>*</code> in the expression is using something called "<a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">argument unpacking</a>" to pass multiple arguments to the <code>zip()</code> function.</span>
<span class="comment-copy">Yes indeed. Thanks for the links.</span>
