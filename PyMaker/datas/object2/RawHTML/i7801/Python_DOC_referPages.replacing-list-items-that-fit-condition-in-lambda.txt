<div class="post-text" itemprop="text">
<p>I've been stuck on a line of my code for a while, and I'm at a loss as to why it returns as it does.</p>
<pre><code>guess = 'a'
word = ['a', 'b', 'c']
board = ['_', '_', '_']
board = list(map(lambda x: guess if word[board.index(x)] == guess else x, board))

print(board)
</code></pre>
<p>This returns</p>
<pre><code>['a', 'a', 'a']
</code></pre>
<p>Whereas my goal is a return of</p>
<pre><code>['a', '_', '_']
</code></pre>
<p>My previous solution was to loop through the list with an increasing value for the index, and to individually check each entry in word against the guess, and to replace the board list at the same index, but I feel that there is a more concise and pythonic way using <code>lambda</code>, I just can't quite get it.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is the <a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists" rel="nofollow noreferrer"><code>list.index</code> method</a> which returns the index of the <strong>first match</strong>:</p>
<blockquote>
<p><code>list.index(x[, start[, end]])</code></p>
<p>Return zero-based index in the list of the <strong>first item whose value is x</strong>. Raises a <code>ValueError</code> if there is no such item. [...]</p>
</blockquote>
<p>If you're also interested in a solution: You could simply iterate over both <code>word</code> and <code>board</code>:</p>
<pre><code>guess = 'a'
word = ['a', 'b', 'c']
board = ['_', '_', '_']
board = list(map(lambda x, y: guess if x == guess else y, word, board))  # 3 parameters!

print(board)  # ['a', '_', '_']
</code></pre>
<p>Given that you want to "replace" you could also use a normal <code>for</code>-loop. That way you would avoid creating and discarding lists all the time:</p>
<pre><code>for idx, char in enumerate(word):
    if char == guess:
        board[idx] = char
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use list comprehension:</p>
<pre><code>guess = 'a'

word = ['a', 'b', 'c']

new_word = [i if i == guess else "_" for i in word]
</code></pre>
<p>This will give you:</p>
<pre><code>["a", "_", "_"]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're probably looking for something like this:</p>
<pre><code>board=map(lambda x: x[1] if x[1] == guess else board[x[0]], enumerate(word))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>list</code> comprehension as mentioned in the answers, but in your code <code>board</code> will always reset with every guess. I'm guessing you want to keep track of the guesses till all letters are guessed (or till number of guesses) so your <code>loop</code> should have a temporary <code>list</code> and then <code>loop</code> through board to add the new guesses(if found) something like:</p>
<pre><code>word = ['a', 'b', 'c']
board = ['_', '_', '_']
tries = 0
while tries != 3:
    guess = raw_input("Enter a guess: ")
    tmp = [x if x == guess else '_' for x in word]
    for i in xrange(len(board)):
        if board[i] == '_':
            try:
                board[i] = tmp[i]
            except IndexError:
                pass
    print(board)
    if '_' not in board:
        print('Solved!')
        break
    tries += 1
    if tries == 3:
        print('Not solved!')
</code></pre>
</div>
<span class="comment-copy">the problem is that all your <code>x</code>s are going to be <code>_</code>, and <code>board.index(x)</code> is always going to return <code>0</code> since that's the first underscore in your board. You'll need to use <code>enumerate(board)</code> to be able to iterate over the values and indexes independently</span>
<span class="comment-copy">I would also recommend you use a list comprehension rather than a map; it's much easier, more readable, and more suitable to your use case</span>
<span class="comment-copy">This solution ignores the whole board aspect  He doesn't mention it but a possible eventual goal would be to "guess" again and update the state of the board.  Your solution won't work for that.  It assumes the board is always made up a single character.</span>
