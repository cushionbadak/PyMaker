<div class="post-text" itemprop="text">
<p>I observed that even if you import modules in python through <code>from</code> 
e.g </p>
<pre><code>from b import x
</code></pre>
<p>whole module is loaded. It can be seen in <code>sys.modules</code> dictionary. So why the name of the module <code>b</code> is not accessible to our program. What am i missing? </p>
<p>It looks like namespace of the main(top-level) file does not have module name. </p>
<p>But I can not verify this as I am not able to see main file namespace. It also does not feel ok, just to remove one entry from <code>__dict__</code> without many advantages. Can somebody clear this in detail?   </p>
</div>
<div class="post-text" itemprop="text">
<p>Because that's what that syntax does; it only imports the names you specify, not the containing module. If you want the module itself, just do <code>import b</code>.</p>
</div>
<span class="comment-copy">Why <i>would</i> it be accessible? By using <code>from b import x</code> you specified that you <i>only</i> wanted <code>x</code> to be added to the current namespace. If you want all of <code>b</code>, add <code>import b</code>.</span>
<span class="comment-copy">@jonrsharpe I understand that if i use <code>import b</code> I would get access to b, but I was looking for some reasons to why is it not logical to keep the module name accessible(in python) even if we want to use direct attributes of the module? What will be the overhead of this on execution?</span>
<span class="comment-copy">Well <i>explicit is better than implicit</i>, for one. For another, that's what the reference says it does: <a href="https://docs.python.org/3/reference/simple_stmts.html#the-import-statement" rel="nofollow noreferrer">docs.python.org/3/reference/â€¦</a>. It's not that it doesn't <i>"keep the module name accessible"</i>, it doesn't make it accessible to begin with.</span>
<span class="comment-copy">You get what you ask for. If you just want the <code>x</code> name in your namespace do <code>from b import x</code>. If you want the <code>b</code> name do <code>import b</code>. Why is that a problem? IMHO, it would be <i>bad</i> design if the <code>from</code> import also dumped the module name into the namespace. It would make code messy to have a mixture of some objects from the module having simple names like <code>b</code> but others having qualified names like <code>x.a</code> and <code>x.c</code>.</span>
<span class="comment-copy">I strongly agree with you both. But somewhere I still feel there is something more and I wish if I can get a perspective from python language developer's side on this.</span>
<span class="comment-copy">I understand that if i use import b I would get access to b, but I was looking for some reasons to why is it not logical to keep the module name accessible(in python) even if we want to use direct attributes of the module? What will be the overhead of this on execution?</span>
