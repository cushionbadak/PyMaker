<div class="post-text" itemprop="text">
<pre><code>def recursion(x):
    if x == 0:
        return 0
    else:
        return x &lt;&lt; 1 + recursion(x - 1)

print(recursion(3)) # 393216


print(3 &lt;&lt; 1) # 6
print(2 &lt;&lt; 1) # 4
print(1 &lt;&lt; 1) # 2
</code></pre>
<p>In my head the output of the recursion function should be: 12 <em>(6+4+2)</em>
Why is this not the case? I must say "393216" is slightly bigger than my expected number "12".</p>
<p><strong>My expectation:</strong></p>
<pre><code>--&gt; return 1&lt;&lt;1==2 for 1
--&gt; return 2&lt;&lt;1==4 for 2
--&gt; return 3&lt;&lt;1==6 for 3
0 --&gt; return 0 for 0 
</code></pre>
<p>All together = 12</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason is due to operator precedence. Bitshift operators have lower precedence than arithmetic.</p>
<p>By default, <code>x &lt;&lt; 1 + recursion(x - 1)</code> is assumed to be <code>x &lt;&lt; (1 + recursion(x - 1))</code>.</p>
<p>You can fix the issue by overriding the default precedence using parentheses.</p>
<pre><code>def recursion(x):
    if x == 0:
        return 0
    else:
        return (x &lt;&lt; 1) + recursion(x - 1)

print(recursion(3)) # 12
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Operator precedence. Bit shifts have lower precedence than addition/subtraction (<a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">see in docs</a>). Hence you need </p>
<pre><code>def recursion(x):
    if x == 0:
        return 0
    else:
        return (x &lt;&lt; 1) + recursion(x - 1)
</code></pre>
<p>as currently your function is being interpreted equivalent to </p>
<pre><code>def recursion(x):
    if x == 0:
        return 0
    else:
        return x &lt;&lt; (1 + recursion(x - 1))
</code></pre>
</div>
<span class="comment-copy">Quick correction, bitshifts have lower precedence, not stronger.</span>
<span class="comment-copy">@Shiva Oops, typo yes, fixed thanks.</span>
