<div class="post-text" itemprop="text">
<p>I have an enum like this</p>
<pre><code>class testEnum(Enum):
   Code_1 = "successful response"
   Code_2 = "failure response"
</code></pre>
<p>Then I have a method that takes the enum key name <code>Code_1</code> and enum key value <code>successful response</code> as inputs.</p>
<p>If I send <code>testEnum.Code_1</code> then that resolves to <code>successful response</code> and not <code>Code_1</code>.</p>
<p>I checked some documentation online that suggests to use <code>testEnum.Code_1.name</code> but that throws an error saing that 'name' doesn't exist for the enum item.</p>
<p>Does anyone know how to get the name of the enum key ?</p>
</div>
<div class="post-text" itemprop="text">
<p>I suspect that what's happened is that you're using the outdated pip-installable library called <a href="https://pypi.python.org/pypi/enum/" rel="noreferrer">enum</a>.  If you did, you'd get something like</p>
<pre><code>&gt;&gt;&gt; from enum import Enum
&gt;&gt;&gt; class testEnum(Enum):
...    Code_1 = "successful response"
...    Code_2 = "failure response"
... 
&gt;&gt;&gt; testEnum.Code_1
'successful response'
&gt;&gt;&gt; testEnum.Code_1.name
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'str' object has no attribute 'name'
</code></pre>
<p>whereas with the "real" enum (either <code>enum</code> in the standard library if you're using modern Python, or the <a href="https://pypi.python.org/pypi/enum34" rel="noreferrer"><code>enum34</code> backport</a> if you're not), you'd see</p>
<pre><code>&gt;&gt;&gt; from enum import Enum
&gt;&gt;&gt; class testEnum(Enum):
...    Code_1 = "successful response"
...    Code_2 = "failure response"
... 
&gt;&gt;&gt; testEnum.Code_1
&lt;testEnum.Code_1: 'successful response'&gt;
&gt;&gt;&gt; testEnum.Code_1.name
'Code_1'
</code></pre>
<p>You can confirm this independently by typing <code>help(enum)</code> and seeing whether you see "NAME / enum / MODULE REFERENCE / <a href="https://docs.python.org/3.6/library/enum" rel="noreferrer">https://docs.python.org/3.6/library/enum</a>" (as you should) or simply "NAME / enum - Robust enumerated type support in Python" if you're using the older one.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can start your investigation with the <code>__dict__</code> that comes with your object. Interesting reading is found with </p>
<pre><code>print(testEnum.__dict__)
</code></pre>
<p>In that dict you will see a good start which you can test with the following:</p>
<pre><code>print(testEnum._member_names_)
</code></pre>
<p>which, indeed, yields</p>
<pre><code>['Code_1', 'Code_2']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>dir(testEnum) will give you the dictionary keys.</p>
<p>e.g.</p>
<pre><code>dir(testEnum)
</code></pre>
<p>returns:</p>
<p>['Code_1',
 'Code_2',
 '<strong>class</strong>',
 '<strong>delattr</strong>',
 '<strong>dict</strong>',
 '<strong>dir</strong>',
 '<strong>doc</strong>',
 '<strong>eq</strong>',
 '<strong>format</strong>',
 '<strong>ge</strong>',
 '<strong>getattribute</strong>',
 '<strong>gt</strong>',
 '<strong>hash</strong>',
 '<strong>init</strong>',
 '<strong>init_subclass</strong>',
 '<strong>le</strong>',
 '<strong>lt</strong>',
 '<strong>module</strong>',
 '<strong>ne</strong>',
 '<strong>new</strong>',
 '<strong>reduce</strong>',
 '<strong>reduce_ex</strong>',
 '<strong>repr</strong>',
 '<strong>setattr</strong>',
 '<strong>sizeof</strong>',
 '<strong>str</strong>',
 '<strong>subclasshook</strong>',
 '<strong>weakref</strong>']</p>
</div>
<span class="comment-copy">I can't reproduce the error.</span>
<span class="comment-copy">Are you using the standard distribution of python? Which version?</span>
<span class="comment-copy">I cannot reproduce the error in Python 3.5.2 nor on Python 2.7.12.</span>
<span class="comment-copy">If your getting a traceback, post the full error verbatim.</span>
<span class="comment-copy">you are right, I did pip install enum. Looks  like that is the old one ? So I should be doing pip install enum34 instead ?</span>
<span class="comment-copy">@Hary: really, you should be using a modern Python! ;-)  But yes, enum34 should work for the moment.</span>
<span class="comment-copy">I am using python version 2.7. would that not suffice ? Do I still need to do pip install enum34 in python 2.7 ?</span>
<span class="comment-copy">I was indeed using an old version of enum. I installed enum34 and it worked as you explained. Wondering if these enums aren't part of  standard python distribution and not sure why such standard constructs like enumerations need to be separately installed ?</span>
<span class="comment-copy">We began to move to python3 10 years ago :) <code>enum</code> went into python in <a href="https://docs.python.org/3/library/enum.html?highlight=enum#module-enum" rel="nofollow noreferrer"><code>3.4</code></a>.</span>
<span class="comment-copy">I'm not exactly sure how this answers the question. Could you elaborate?</span>
<span class="comment-copy">OP seems to be looking for a way to return "Code_1" and "Code_2". dir(testEnum)[0] will return Code_1, for example.</span>
<span class="comment-copy">OK, I see what you were trying to do. But he was trying to get the names from doing <code>testEnum.Code_1</code>, like the documentation said he could.</span>
<span class="comment-copy">No, he didn't. His code should work because he in inheriting from the <code>enum.Enum</code> class <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">from the standard library</a>.</span>
<span class="comment-copy">If I have an enum then, converting it to a dictionary and referencing to it's members using dictionary index like [0] is counter intuitive and defeats the whole purpose of using an enum. Using an enum lets the code talk to the user when you do enum.code_1 rather than doing dict(enum)[0]</span>
