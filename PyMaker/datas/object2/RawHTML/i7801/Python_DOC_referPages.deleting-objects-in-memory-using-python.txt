<div class="post-text" itemprop="text">
<p>I am trying this approach to delete an object in python. I read the documentation of Python stating that garbage collector will automatically delete the object that is not referenced.</p>
<pre><code>def check():
    class newOb():
        def __init__(self,value):
            self.value = value
            print self.value
            return None

    class ob:
        ins = {}
        def cr(self,someuniqueid,value) :
            newV = newOb(value)
            ob.ins[someuniqueid] = newV ## saving this object refernce to the ob class ins dictionary
            return newV

    #### Accessing Object ###
    someuniqueid  = 12
    c = ob()
    d = c.cr(someuniqueid,123)
    print d.value ## will print 123
    # now deleting the associated object
    del c.ins[someuniqueid]

check()
</code></pre>
<p>At the last step, I am removing the object reference from the memory 
is using above procedure will delete the object from memory</p>
<p>If not then what is wrong with code and how to correct it</p>
</div>
<div class="post-text" itemprop="text">
<p>You would need to do <code>del d</code> as well, since <code>d</code> is also holding a reference to the same object. Calling <code>del</code> will only decrement the reference count and remove the particular reference from usage, but the actual in memory object is not garbage collected until the reference count hits <code>0</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know what do you mean by writing:</p>
<blockquote>
<p>If not then what is wrong with code and how to correct it</p>
</blockquote>
<p>When you use <code>del</code> statement you delete a reference to an object. It will use up memory untill garbage collector is invoked. Remember that this can be a time-consuming process and not necessary if the process has enough memory to continue executing.</p>
<p>Generally speaking Python does not perform C++-like destructor bahaviour.</p>
<p>A quote from "Expert Python Programming":</p>
<blockquote>
<p>The approach of such a memory manager is roughly based on a simple
  statement: If a given object is not referenced anymore, it is removed.
  In other words, all local references in a function are removed after
  the interpreter: </p>
<p>• Leaves the function</p>
<p>• Makes sure the object is not being used anymore.</p>
<p>Under normal conditions, the collector will do a
  nice job. But a del call can be used to help the garbage collector by
  manually removing the references to an object manually.</p>
</blockquote>
<p>So you don't manage memory by hand. You can help garbage collector, but it's better to leave memory managment behind the scenes.</p>
</div>
<span class="comment-copy">It's not really clear what you're trying to do. If you want to remove an entry from a dictionary, <code>del</code> is not really what you want. See <a href="https://stackoverflow.com/questions/6146963/when-is-del-useful-in-python" title="when is del useful in python">stackoverflow.com/questions/6146963/…</a></span>
<span class="comment-copy">What is your question? Are you asking if the <code>del</code> operator is sufficient to allow the value referenced by <code>c.ins[someuniqueid]</code> to be garbage collected? If so, yes (unless something else still holds a reference).</span>
<span class="comment-copy"><code>del</code> wil decrement the reference count.  When the reference count is zero the object is a candidate for removal - the exact timing of the garbage collector is complex and is rarely immediate.  See <code>sys.getrefcount()</code> <a href="https://docs.python.org/3/library/sys.html#sys.getrefcount" rel="nofollow noreferrer">docs.python.org/3/library/sys.html#sys.getrefcount</a></span>
<span class="comment-copy">Your object won't be garbage collected when the reference <code>c.ins[someuniqueid]</code> is deleted, since <code>d</code> is also a reference to it. Only if you also do <code>del d</code> will the object (which you can't access any more) be deleted. And garbage collection is not guaranteed. It <i>may</i> happen any time after the last reference goes away, but exactly when it happens is an implementation detail that you shouldn't rely upon.</span>
<span class="comment-copy">Then you probably need to ask a question more closely related to your real code. This question doesn't make a whole lot of sense. It's likely that you can reduce the memory footprint of your program more effectively by using better data structures or avoiding loading all the data in memory at one time, rather than messing around with <code>del</code>.</span>
