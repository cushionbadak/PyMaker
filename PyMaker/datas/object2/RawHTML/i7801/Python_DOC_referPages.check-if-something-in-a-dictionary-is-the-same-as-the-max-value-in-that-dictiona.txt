<div class="post-text" itemprop="text">
<p>How can I check if something in a dictionary is the same as the max in that dictionary. In other words, get all the max values instead of the max value with lowest position.
I have this code which returns the max variable name and value:</p>
<pre><code>d = {'g_dirt4': g_dirt4, 'g_destiny2': g_destiny2, 'g_southpark': g_southpark, 'g_codww2': g_codww2, 'g_bfront2': g_bfront2, 'g_reddead2': g_reddead2, 'g_fifa18': g_fifa18, 'g_motogp17': g_motogp17, 'g_elderscrolls': g_elderscrolls, 'g_crashbandicoot': g_crashbandicoot} 
print("g_dirt4", g_dirt4, "g_destiny2", g_destiny2, "g_southpark", g_southpark, "g_codww2", g_codww2, "g_bfront2", g_bfront2, "g_reddead2", g_reddead2, "g_fifa18", g_fifa18, "g_motogp17", g_motogp17, "g_elderscrolls", g_elderscrolls, "g_crashbandicoot", g_crashbandicoot)
print (max(d.items(), key=lambda x: x[1]))
</code></pre>
<p>Now it prints the variable with the highest value plus the value itself, but what if there are two or three variables with the same max value? I would like to print <strong>all</strong> of the max values.</p>
<p>Edit:</p>
<p>The user has to fill in a form, which adds values to the variables in the dictionary. When the user is done, there will be one, two or more variables with the highest value. For example, the code gives me this:</p>
<pre class="lang-none prettyprint-override"><code>2017-06-08 15:05:43 g_dirt4 9 g_destiny2 8 g_southpark 5 g_codww2 8 g_bfront2 8 g_reddead2 7 g_fifa18 8 g_motogp17 9 g_elderscrolls 5 g_crashbandicoot 6
2017-06-08 15:05:43 ('g_dirt4', 9)
</code></pre>
<p>Now it tells me that <code>g_dirt4</code> has the highest value of 9, but if you look at <code>motogp17</code>, it also had 9 but it doesn't get printed because it's at a higher position in the dictionary. So how do I print them both? And what if it has 3 variables with the same max value?</p>
</div>
<div class="post-text" itemprop="text">
<p>Given a dictionary</p>
<pre><code>d = {'too': 2, 'one': 1, 'two': 2, 'won': 1, 'to': 2}
</code></pre>
<p>the following command:</p>
<pre><code>result = [(n,v) for n,v in d.items() if v == max(d.values())]
</code></pre>
<p>yields: <code>[('too', 2), ('two', 2), ('to', 2)]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Let me introduce you to a more complicated but more powerful answer.  If you sort your dictionary items, you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer">itertools.groupby</a> for some powerful results:</p>
<pre><code>import itertools
foo = {"one": 1, "two": 2, "three": 3, "tres": 3, "dos": 2, "troi": 3}
sorted_kvp = sorted(foo.items(), key=lambda kvp: -kvp[1])
grouped = itertools.groupby(sorted_kvp, key=lambda kvp: kvp[1])
</code></pre>
<p>The <code>sorted</code> line takes the key/value pairs of dictionary items and sorts them based on the value.  I put a <code>-</code> in front so that the values will end up being sorted descending.  The results of that line are:</p>
<blockquote>
<p>&gt;&gt;&gt; print(sorted_kvp)</p>
<p>[('tres', 3), ('troi', 3), ('three', 3), ('two', 2), ('dos', 2), ('one', 1)]</p>
</blockquote>
<p>Note, as the comments said above, the order of the keys (in this case, 'tres', 'troi', and 'three', and then 'two' and 'dos', is arbitrary, since the order of the keys in the dictionary is arbitrary.</p>
<p>The <code>itertools.groupby</code> line makes groups out of the runs of data.  The lambda tells it to look at <code>kvp[1]</code> for each key-value pair, i.e. the value.</p>
<p>At the moment, you're only interested in the max, so you can then do this:</p>
<pre><code>max, key_grouper = next(grouped)
print("{}: {}".format(max, list(key_grouper)))
</code></pre>
<p>And get the following results:</p>
<blockquote>
<p>3: [('tres', 3), ('troi', 3), ('three', 3)]</p>
</blockquote>
<p>But if you wanted all the information sorted, instead, with this method, that's just as easy:</p>
<pre><code>for value, grouper in grouped: 
    print("{}: {}".format(value, list(grouper)))
</code></pre>
<p>produces:</p>
<blockquote>
<p>3: [('tres', 3), ('troi', 3), ('three', 3)] </p>
<p>2: [('two', 2), ('dos', 2)] </p>
<p>1: [('one', 1)]</p>
</blockquote>
<p>One last note: you can use <code>next</code> or you can use the for loop, but using both will give you different results.  <code>grouped</code> is an iterator, and calling <code>next</code> on it moves it to its next result (and the for loop consumes the entire iterator, so a subsequent <code>next(grouped)</code> would cause a <code>StopIteration</code> exception).</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do something like this:</p>
<pre><code>max_value = (max(d.items(), key=lambda x: x[1]))[1]
max_list = [max_value]

for key, value in d.items():
    if value == max_value:
        max_list.append((key, value))

print(max_list)
</code></pre>
<p>This will get the maximum value, then loop through all the keys and values in your dictionary and add all the ones matching that max value to a list. Then you print the list and it should print all of them.</p>
</div>
<span class="comment-copy">I do not see any <code>list</code> here. <code>d</code> is a dictionary and <code>d.items()</code> is not a list either.</span>
<span class="comment-copy">Whoops.... my bad, I know it was I don't know why I typed list, sorry.</span>
<span class="comment-copy">Could you also post the desired result because I don't understand your question fully..</span>
<span class="comment-copy">Dictionaries are unorderedâ€”so what do you mean by "a higher position in the dictionary"?</span>
<span class="comment-copy">very relevant comment by @martineau if you mean that {"one": 1, "two": 1} with your algorithm should produce "one" as this is the first <code>key</code> with the value 1 then you are wrong. Being unsorted the key orders at iteration are not always the same. That is why you have something called  <a href="https://docs.python.org/3/whatsnew/2.7.html#pep-0372" rel="nofollow noreferrer">ordered dict</a></span>
<span class="comment-copy">Thanks a lot, both answers work :) Ron Norris answer: [('g_codww2', 9), ('g_bfront2', 9), ('g_fifa18', 9)] ISOmetric answer: [9, ('g_codww2', 9), ('g_bfront2', 9), ('g_fifa18', 9)]</span>
<span class="comment-copy">By the way, maybe a stupid question: How could I print it something like this: "The results are, Call of Duty World War II, Battlefront II ,(and) Fifa18"</span>
<span class="comment-copy">How do I check something like this?? if result == 'g_dirt4':             print("Result is dirt4") and what if there are multiple results? How do I make the if statement?</span>
<span class="comment-copy">If you are looking to parse on the dict results further, a looping structure is a better approach. If you have g_dirt4 and want dirt4, you can use result[2:]. So the loop would look like for key,value in d.items(): ... And then set your result = value[2:] (which reads all characters after the first two).</span>
<span class="comment-copy">Thanks for the explanation</span>
<span class="comment-copy">Thanks a lot, both answers work :)</span>
<span class="comment-copy">Ron's answer is certainly more concise.</span>
