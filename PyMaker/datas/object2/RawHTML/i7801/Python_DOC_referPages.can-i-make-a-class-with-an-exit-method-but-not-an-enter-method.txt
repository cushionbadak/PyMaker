<div class="post-text" itemprop="text">
<p>I have a class that needs to run a TensorFlow session for each instance of the class, as long as that instance exists.</p>
<p>TensorFlow sessions use context managers, but I don't want to force anyone who uses my class to put my class into a context manager.</p>
<p>Is there any way to auto-close the session once the instance is no longer in use without using a context manager?</p>
<p>Can I just put in an <code>__exit__</code> method and not an <code>__enter__</code> method and start the session without the context manager and just close the session in the exit?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Is there any way to auto-close the session once the instance is no longer in use without using a context manager?</p>
</blockquote>
<p>Not really, how would an object figure out when it’s no longer being used? If there was a safe way to do this, there wouldn’t be a need for context managers in the first place.</p>
<p>So you <em>have</em> to use context managers and the <code>with</code> statement to get this kind of feedback. But just because you have to use context managers, that does not mean that you actually need to have some separate “thing” you open. You can return anything in the <code>__enter__</code> method, including the current object.</p>
<p>So the simplest context manager implementation that closes itself when the context is closed looks like this:</p>
<pre><code>class MyClass:
    def __enter__ (self):
        return self

    def __exit__ (self, *exc):
        self.close()

    def close (self):
        # actually close the object
</code></pre>
<p>In fact, this pattern is so common, that there is a built-in recipe for this context manager: <a href="https://docs.python.org/3/library/contextlib.html#contextlib.closing" rel="nofollow noreferrer"><code>contextlib.closing</code></a>. Using that, you do not actually need to modify your class at all, you can just wrap it in a <code>closing()</code> call and have it call <code>close</code> when the context is exited:</p>
<pre><code>with closing(my_object):
    my_object.do_something()

# my_object.close() is automatically called
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You must define an <code>__enter__</code> method, but you can just define it as:</p>
<pre><code>def __enter__(self):
    return self
</code></pre>
<p>and have the session defined in the init. Then, define <code>__exit__</code> like so:</p>
<pre><code>def __exit__(self, *exc):
    self.close()
</code></pre>
<p>Then, define a close method that closes whatever resources were opened in <code>__init__</code>. (In my case, it's a TensorFlow session.)</p>
<p>This way, if the user decides to use the context manager, it will close it for them, and if they don't, they'll have to close it on their own.</p>
</div>
<span class="comment-copy">why would adding an <code>__enter__</code> method force users into using a context manager?</span>
<span class="comment-copy">Your users <i>should</i> use context managers in this case...</span>
<span class="comment-copy">I also don't understand why you would define an <code>__exit__</code> method in <i>your class</i> if you don't want to use a context manager?</span>
<span class="comment-copy">@AdamSmith it wouldn't, and that's what I ended up doing. I thought it would though...</span>
<span class="comment-copy">@juanpa.arrivillaga I want it to be like the TensorFlow class; the user has the choice. I think I figured out how to do it. (does my answer below make sense?)</span>
<span class="comment-copy">Is there anything I can do in my init method that would allow my class to have the same functionality as MyClass without me specifying (pretty much redundant) <code>__enter__</code> and <code>__exit__</code> methods?</span>
<span class="comment-copy">You could always move the <code>__enter__</code> and <code>__exit__</code> definitions into a new class and inherit from that then. Since Python allows multiple inheritance, you can treat it as a <i>mixin</i> that gives you this “closability”.</span>
