<div class="post-text" itemprop="text">
<p>I am working on parsing XML dumps of English Wikipedia and have got stuck at writing killing regular expression in Python. I am attaching a sample data snippet as follows:</p>
<blockquote>
<p>Amy Jean Klobuchar''' ({{IPAc-en|ˈ|k|l|oʊ|b|ə|ʃ|ɑr}}; born May 25,
  1960) is the [[Seniority in the United States Senate|senior]] [[United
  States Senator]] from [[Minnesota]]. She is a member of the
  [[Minnesota Democratic-Farmer-Labor Party]], an affiliate of the
  [[Democratic Party (United States)|Democratic Party]]. She is the
  first woman to be elected as a senator for Minnesota and is one of
  twenty-one women serving in the current [[United States Senate]]. </p>
<p>She previously served as the [[county attorney]] for [[Hennepin
  County, Minnesota]], the most populous county in Minnesota. As an
  attorney, she worked with former [[Vice President of the United
  States|Vice President]] [[Walter Mondale]].{{cite web|
  author= Senate Web site| title = U.S. Senator for Minnesota Amy
  Klobuchar: Biography| year = 2007| url=
  [URL]| accessdate=
  2007-02-23|archiveurl =
  [URL]
  |archivedate = February 21, 2007}} She has been calld a "rising
  star" in the Democratic Party.{{Cite
  news|url=[URL]|title=Huffington
  Post names Klobuchar the smartest U.S.
  Senator|last=Tsukayama|first=Hayley|date=March 15,
  2010|work=|access-date=May 14,
  2017|archive-url=|archive-date=|dead-url=}}{{Cite
  news|url=[URL]|title=As
  state's only senator, Klobuchar gains sympathetic
  attention|last=Dizikes|first=Cynthia|date=May 20,
  2009|work=MinnPost|access-date=May 14,
  2017|archive-url=|archive-date=|dead-url=|language=en}}</p>
<p>==Early life and education== </p>
<p>Born in [[Plymouth, Minnesota]], Klobuchar is the daughter of Rose Katherine (née Heuberger), who
  retired at age 70 from teaching second grade,{{Cite
  news|url=[URL]|title=Rose
  Klobuchar, mother of Sen. Amy Klobuchar,
  dies|last=Nelson|first=Tim|access-date=2017-02-22}} and [[Jim
  Klobuchar|James John "Jim" Klobuchar]], an author and a retired
  sportswriter and columnist for the ''[[Star Tribune]]''.{{Cite
  news|url=[URL]|title=Born
  to ride: Jim Klobuchar and the birth of the Minnesota bike
  tour|newspaper=Star Tribune|access-date=2017-02-22}} Amy has one
  younger sister. Jim's grandparents were [[Slovene
  American|Slovene]] immigrants, and his father was a miner on the
  [[Iron Range]]; Amy's maternal grandparents were from
  [[Switzerland]].{{cite
  web|url=[URL]|title=1|work=rootsweb.com|accessdate=11
  September 2015}}</p>
</blockquote>
<p>From this data, I want to parse 1) <strong>ref</strong> tags and <strong>content</strong> between and 2) <strong>section headers</strong>. For instance, ref tags and its content indicate</p>
<pre><code>&lt;ref name=bio&gt; 
{{cite web
  |author=Senate Web site
  |title=U.S.Senator for Minnesota Amy Klobuchar: Biography
  |year=2007
  |url=[URL]
  |accessdate=2007-02-23
  |archiveurl=[URL]
  |archivedate = February 21, 2007}}
&lt;/ref&gt;
</code></pre>
<p>whereas a section header means </p>
<pre><code>==Early life and education==
</code></pre>
<p>I've actually succeeded in parsing these fields with following code:</p>
<pre><code>import re


LEXEME = [
  ('ref', re.compile(r'&lt;ref[^/&gt;]*&gt;[\s\S]*?&lt;/ref&gt;)', 
    re.M | re.I)), 
  ('header', re.compile(r'(^|\n)((==[^=]+==)|(===[^=]+===)|(====[^=]+====))\s*$', 
    re.M | re.I))]

GROUP_RE = re.compile(
  '|'.join('(?P&lt;{0}&gt;{1})'.format(name, regex.pattern) 
    for name, regex in LEXEME), 
  re.M | re.I)


for match in GROUP_RE.finditer(content):
  print(match.lastgroup, '\t', match.group(0), '\n')

# Output
ref  &lt;ref name=bio&gt;{{cite web| author= Senate Web site| title = U.S. Senator for Minnesota Amy Klobuchar: Biography| year = 2007| url= [URL]| accessdate= 2007-02-23|archiveurl = [URL] |archivedate = February 21, 2007}}&lt;/ref&gt;
ref  &lt;ref&gt;{{Cite news|url=[URL]|title=Huffington Post names Klobuchar the smartest U.S. Senator|last=Tsukayama|first=Hayley|date=March 15, 2010|work=|access-date=May 14, 2017|archive-url=|archive-date=|dead-url=}}&lt;/ref&gt;
ref  &lt;ref&gt;{{Cite news|url=[URL]|title=As state's only senator, Klobuchar gains sympathetic attention|last=Dizikes|first=Cynthia|date=May 20, 2009|work=MinnPost|access-date=May 14, 2017|archive-url=|archive-date=|dead-url=|language=en}}&lt;/ref&gt;
header  ==Early life and education==
</code></pre>
<p>I want to expand the current regex so that I can also get preceding and succeeding texts of up to 250 characters when parsing ref tags and its content.
For example, I want to get</p>
<pre><code>She previously served as the [[county attorney]] for [[Hennepin County, Minnesota]], the most populous county in Minnesota. As an attorney, she worked with former [[Vice President of the United States|Vice President]] [[Walter Mondale]].
&lt;ref name=bio&gt;
{{cite web
  |author=Senate Web site
  |title=U.S. Senator for Minnesota Amy Klobuchar: Biography
  |year=2007
  |url=[URL]
  |accessdate=2007-02-23
  |archiveurl=[URL] 
  |archivedate=February 21, 2007}}
&lt;/ref&gt;
She has been called a "rising star" in the Democratic Party.&lt;ref&gt;{{Cite news|url=[URL]|title=Huffington Post names Klobuchar the smartest U.S
</code></pre>
<p>instead of</p>
<pre><code>&lt;ref name=bio&gt;
{{cite web
  |author=Senate Web site
  |title=U.S. Senator for Minnesota Amy Klobuchar: Biography
  |year=2007
  |url=[URL]
  |accessdate=2007-02-23
  |archiveurl=[URL] 
  |archivedate=February 21, 2007}}
&lt;/ref&gt;
</code></pre>
<p>So, I modified my code as follows:</p>
<pre><code>LEXEME = [
  ('ref', re.compile(r'([\s\S]{1,250})(&lt;ref[^/&gt;]*&gt;[\s\S]*?&lt;/ref&gt;)([\s\S]{1,250}))', 
    re.M | re.I)), 
  ('header', re.compile(r'(^|\n)((==[^=]+==)|(===[^=]+===)|(====[^=]+====))\s*$', 
    re.M | re.I))]
</code></pre>
<p>Some problems arise </p>
<p>1) when multiple ref tags occur consecutively at the end of a sentence:</p>
<pre><code>&lt;ref&gt;{{Cite
news|url=[URL]|title=Huffington
Post names Klobuchar the smartest U.S.
Senator|last=Tsukayama|first=Hayley|date=March 15,
2010|work=|access-date=May 14,
2017|archive-url=|archive-date=|dead-url=}}&lt;/ref&gt;&lt;ref&gt;{{Cite
news|url=[URL]|title=As
state's only senator, Klobuchar gains sympathetic
attention|last=Dizikes|first=Cynthia|date=May 20,
2009|work=MinnPost|access-date=May 14,
2017|archive-url=|archive-date=|dead-url=|language=en}}&lt;/ref&gt;
</code></pre>
<p>The anticipated result was </p>
<pre><code>ref  up-to-250-chars&lt;ref&gt;content&lt;/ref&gt;up-to-250-chars
ref  up-to-250-chars&lt;ref&gt;content&lt;/ref&gt;up-to-250-chars
</code></pre>
<p>However, the code only captures the latter ref tags and related preceding/succeeding texts.</p>
<p>2) when section heading appears in succeeding text. ref regex captures the header as succeeding text and header regex is skipped as follows.</p>
<pre><code>ref  s-date=May 14,
2017|archive-url=|archive-date=|dead-url=|language=en}}&lt;/ref&gt;

==Early life and education== Born in [[Plymouth, Minnesota]], Klobuchar is the daughter of Rose Katherine (née Heuberger), who
retired at age 70 from teaching second grade,&lt;ref&gt;{{Cite
news|url=[URL]|title=Rose
Klobuchar, mother of Sen. Amy Klobuchar,
dies|last=Nelson|first=Tim|access-date=2017-02-22}}&lt;/ref&gt; and [[Jim
Klobuchar|James John "Jim" Klobuchar]], an author and a retired
sportswriter and columnist for the ''[[Star Tribune]]''.&lt;ref&gt;{{Cite
news|url=[URL]
</code></pre>
<p>I wonder how I can tackle this issue.</p>
<p>Happy coding!</p>
</div>
<div class="post-text" itemprop="text">
<p>While this is (probably) possible with regex by making use of <a href="https://docs.python.org/3/howto/regex.html#lookahead-assertions" rel="nofollow noreferrer">lookarounds</a>, it's a lot easier to just use string operations:</p>
<pre><code>for match in GROUP_RE.finditer(content):
    start= max(0, match.start()-250)
    end= min(len(content), match.end()+250)
    matched_text= content[start:end]
</code></pre>
</div>
<span class="comment-copy">Blockquote doesn't allow me to user &lt;ref&gt; and &lt;/ref&gt; as text. Please assume any {{cite ... }} is aurrounded by &lt;ref&gt; and &lt;/ref&gt; in the sample data.</span>
<span class="comment-copy">OMG, it could've been much simpler than I thought! Appreciated it a lot, @Rawing!</span>
