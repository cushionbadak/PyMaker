<div class="post-text" itemprop="text">
<p>I'm trying to use numpy/pandas to constuct a sliding window style comparator. I've got list of lists each of which is a different length. I want to compare each list to to another list as depicted below:</p>
<pre><code>lists = [[10,15,5],[5,10],[5]]

window_diff(l[1],l[0]) = 25
</code></pre>
<p>The window diff for lists[0] and lists[<a href="https://i.stack.imgur.com/2ei0C.png" rel="nofollow noreferrer">1</a>] would give 25 using the following window sliding technique shown in the image below. Because lists[<a href="https://i.stack.imgur.com/2ei0C.png" rel="nofollow noreferrer">1</a>] is the shorter path we shift it once to the right, resulting in 2 windows of comparison. If you sum the last row in the image below we get the total difference between the two lists using the two windows of comparison; in this case a total of 25. To note we are taking the <strong>absolute</strong> difference.<a href="https://i.stack.imgur.com/2ei0C.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/2ei0C.png"/></a></p>
<p>The function should aggregate the total window_diff between each list and the other lists, so in this case</p>
<pre><code>tot = total_diffs(lists)
tot&gt;&gt;[40, 30, 20]

# where tot[0] represents the sum of lists[0] window_diff with all other lists. 
</code></pre>
<p>I wanted to know if there was a quick route to doing this in pandas or numpy. Currently I am using a very long winded process of for looping through each of the lists and then comparing bitwise by shifting the shorter list in accordance to the longer list. </p>
<p>My approach works fine for short lists, but my dataset is 10,000 lists long and some of these lists contain 60 or so datapoints, so speed is a criteria here. I was wondering if numpy, pandas had some advice on this? Thanks</p>
<h2>Sample problem data</h2>
<pre><code>from random import randint
lists = [[random.randint(0,1000) for r in range(random.randint(0,60))] for x in range(100000)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Steps :</p>
<ul>
<li><p>Among each pair of lists from the input list of lists create sliding windows for the bigger array  and then get the absolute difference against the smaller one in that pair. We can use <a href="http://www.scipy-lectures.org/advanced/advanced_numpy/#indexing-scheme-strides" rel="nofollow noreferrer"><code>NumPy strides</code></a> to get those sliding windows.</p></li>
<li><p>Get the total sum and store this summation as a pair-wise differentiation.</p></li>
<li><p>Finally sum along each row and col on the <code>2D</code> array from previous step and their summation is final output.</p></li>
</ul>
<p>Thus, the implementation would look something like this -</p>
<pre><code>import itertools

def strided_app(a, L, S=1 ):  # Window len = L, Stride len/stepsize = S
    a = np.asarray(a)
    nrows = ((a.size-L)//S)+1
    n = a.strides[0]
    return np.lib.stride_tricks.as_strided(a, shape=(nrows,L), strides=(S*n,n))

N = len(lists)
pair_diff_sums = np.zeros((N,N),dtype=type(lists[0][0]))
for i, j in itertools.combinations(range(N), 2):
    A, B = lists[i], lists[j]
    if len(A)&gt;len(B):
        pair_diff_sums[i,j] = np.abs(strided_app(A,L=len(B)) - B).sum()
    else:
        pair_diff_sums[i,j] = np.abs(strided_app(B,L=len(A)) - A).sum()

out = pair_diff_sums.sum(1) + pair_diff_sums.sum(0)
</code></pre>
<p>For really heavy datasets, here's one method using one more level of looping -</p>
<pre><code>N = len(lists)
out = np.zeros((N),dtype=type(lists[0][0]))
for k,i in enumerate(lists):
    for j in lists:
        if len(i)&gt;len(j):
            out[k] += np.abs(strided_app(i,L=len(j)) - j).sum()
        else:
            out[k] += np.abs(strided_app(j,L=len(i)) - i).sum()
</code></pre>
<p><code>strided_app</code> is inspired from <a href="https://stackoverflow.com/a/40085052/3293881"><code>here</code></a>.</p>
<p>Sample input, output -</p>
<pre><code>In [77]: lists
Out[77]: [[10, 15, 5], [5, 10], [5]]

In [78]: pair_diff_sums
Out[78]: 
array([[ 0, 25, 15],
       [25,  0,  5],
       [15,  5,  0]])

In [79]: out
Out[79]: array([40, 30, 20])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just for completeness of @Divakar's great answer and for its application to very large datasets:</p>
<pre><code>import itertools

N = len(lists)
out = np.zeros(N, dtype=type(lists[0][0]))

for i, j in itertools.combinations(range(N), 2):
    A, B = lists[i], lists[j]

    if len(A)&gt;len(B):
        diff = np.abs(strided_app(A,L=len(B)) - B).sum()
    else:
        diff = np.abs(strided_app(B,L=len(A)) - A).sum()

    out[i] += diff
    out[j] += diff
</code></pre>
<p>It does not create unnecessary large datasets and updates a single vector while iterating only over the upper triangular array.</p>
<p>It will still take a while to compute, as there is a tradeoff between computational complexity and larger-than-ram datasets. Solutions for larger than ram datasets often rely on iterations, and python is not great at it. Iterating in python over a large dataset is slow, very slow.</p>
<p>Translating the code above to cython could speedup things a bit.</p>
</div>
<span class="comment-copy">The problem is not completely specified and it is not very obvious. It seems that you do l1 (abs) distance between windows, as it is the only thing that explains <code>5 - 10 -&gt; 5</code>. But it is not clear to me your expected behaviour for the last window with just one element. Would you repeat it 3 times, or just 2 padding with zeros the begining and end of it? What would happen when you compare 2nd and 3rd rows? would you slide 2 x 3 times, or just 2 times the 3rd window over the 2nd one?</span>
<span class="comment-copy">Hi Imanol, I have updated the question to address that we are taking abs difference</span>
<span class="comment-copy">You a wizard :)</span>
<span class="comment-copy">@Divakar, thanks! Your code works pretty well, but I ran into some memory issues with the triu.indices when working the example data which I've added to the question. Thanks for the help!</span>
<span class="comment-copy">@user3063482 @Divakar you could replace the <code>r, c = np.triu_indices(N)</code> and the for loop by <code>for i, j in itertools.combinations(range(N), 2)</code>. <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">itertools.combinations</a> does not precalculate all the indices into the memory and yields them lazily (it is essentially a python generator). You could then shift the line <code>pair_diff_sums[c,r] = pair_diff_sums[r,c]</code> inside the for loop as <code>pair_diff_sums[j, i] = pair_diff_sums[i,j]</code></span>
<span class="comment-copy">Also, <code>pair_diff_sums</code> which is <code>N x N</code> could be ommited for large <code>N</code> and have just <code>diff_sums = np.zeros(N) # out</code> which would then be updated as <code>diff_sums[i] += pair_diff; diff_sums[j] += pair_diff</code> where <code>pair_diff</code> is the difference between the row <code>i</code> and <code>j</code>.</span>
<span class="comment-copy">@ImanolLuengo Thanks for helping out! Made some edits based on your suggestions!</span>
