<div class="post-text" itemprop="text">
<p>While deleting the end node from the linked list we just set the link of the node pointing to the end node to "None".Does that mean that the end node is destroyed and memory occupied by it has been released?</p>
</div>
<div class="post-text" itemprop="text">
<p>You ask: "Does that mean that the end node is destroyed and memory occupied by it has been released?"</p>
<p>With the little information you have given the answer to your question as you posed it is definitely <em>not</em> a plain unqualified "yes".</p>
<p>The simplest example of why "yes" is wrong is that if there is any other reference to that end node, then it can't immediately be released - if that were the case then nothing much would work, would it? However that doesn't mean the node won't ever be regarded as deleteable.</p>
<p>Moreover, even once releasable, that doesn't mean the memory "has been released" - this is implementation-dependent and may well not be deterministic, i.e. you can't necessarily rely on the memory having been immediately released, or predict when (if ever) it is actually released.</p>
<p>The "garbage collector" metaphor is used to refer to recovering unused memory because IRL garbage collection happens every now and then but can't be relied on to happen (or have happened) at a particular time.</p>
<p>What happens to unreferenced data is nothing to do with the language specification, which is another reason why the answer is <em>not</em> a plain "yes". It is completely implementation-dependent. You don't say if you are using cPython or Jython, or some other flavour. You need to refer to the documentation for the implementation you are using. cPython does expose its garbage collector, refer to e.g. <a href="https://docs.python.org/2/library/gc.html" rel="nofollow noreferrer">https://docs.python.org/2/library/gc.html</a> and <a href="https://docs.python.org/3/library/gc.html" rel="nofollow noreferrer">https://docs.python.org/3/library/gc.html</a>, and Jython uses the Java garbage collector. You may or may not be able to influence their behaviour, you should refer to the documentation for the interpreter you are using.</p>
<p>The reasons for not necessarily immediately recycling releasable memory are usually to do with performance - why do work which isn't needed? - but if your interpreter does postpone recycling then it will at some point, when based on some criteria resources become limited, make some effort to tidy up - do the garbage collection - and this means that 99.9...% of the time you don't need to concern yourself with the recycling because it is automatically handled (with corresponding overhead cost) once the interpreter implementation considers it necessary.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes.</p>
<p>Python has a garbage collector so objects that cannot be reached in any way are automatically destroyed and their memory will be reused for other objects created in the future.</p>
</div>
<span class="comment-copy">Have you tried referring to the documentation for whichever python interpreter you are using?</span>
<span class="comment-copy">"Python" (as in the language) doesn't necessarily have this behaviour, although the cPython interpreter implementation may have this behaviour. Others may have different behaviours. Garbage collection is often not a deterministic thing.</span>
<span class="comment-copy">@barny: Python is not guaranteed to use a reference counting (for example CPython does but PyPy doesn't), but a garbage collector is guaranteed (there is no way to explicitly deallocate objects).</span>
<span class="comment-copy">I am using eclipse and it does have a garbage collector button.If python automatically releases the unused memory what is the advantage of the button?</span>
<span class="comment-copy">The language Python doesn't "require" its implementation to have a garbage collector, although an implementation might not be much use without one. My point about GC not being deterministic was that although a value may be deleteable once it has no references, when it is actually deleted is unknown. It might well persist in memory for an unknown time before being GCed, if it ever is, the memory it occupies might be simply recovered by OS after the process exits. So saying that once a value has no references that means its memory "has been released" is not true.</span>
<span class="comment-copy">is there any way that we can explicitly release it?</span>
