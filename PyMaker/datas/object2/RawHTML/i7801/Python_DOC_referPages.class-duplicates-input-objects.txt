<div class="post-text" itemprop="text">
<p>I have two python class objects that I use to extract data from Oracle to ArcMap.  The various activities in the process cause me to start with a list of 'column' objects and build a <code>pyTable</code> object.  The <code>pyTable</code> object has a list of insert Fields by name.  During <code>__init__</code> I use the <code>getSelect()</code> function to populate the list of insert Fields.</p>
<p>I have added a bunch of statements to make sure that each time I call <code>pyTable</code> I get a newly created object, but I'm still seeing a strange result.  The first time I use the class, all is fine.  The second time I issue the same statement, the <code>colList</code> is new, but the field list is duplicated.  My apologies for not cleaning out the extraneous code sections.  </p>
<p>Where am I messing up my object references?</p>
<p>Here are the execution results.  <code>myList</code> has 8 column objects.</p>
<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; arcTable = pyTable(myList)
&gt;&gt;&gt; len(arcTable.getTuple())
8
&gt;&gt;&gt; arcTable = pyTable(myList)
&gt;&gt;&gt; len(arcTable.getTuple())
16
&gt;&gt;&gt; arcTable = pyTable(myList)
&gt;&gt;&gt; len(arcTable.getTuple())
8
&gt;&gt;&gt; arcTable = pyTable(myList)
&gt;&gt;&gt; len(arcTable.getTuple())
8
&gt;&gt;&gt; newTable = pyTable(myList)
&gt;&gt;&gt; len(newTable.getTuple())
8
&gt;&gt;&gt; thirdTable = pyTable(myList)
&gt;&gt;&gt; len(thirdTable.getTuple())
16
&gt;&gt;&gt; thirdTable = pyTable(myList)
&gt;&gt;&gt; len(thirdTable.getTuple())
24
&gt;&gt;&gt; thirdTable = pyTable(myList)
&gt;&gt;&gt; len(thirdTable.getTuple())
8
&gt;&gt;&gt; 
</code></pre>
<p>Here are the two classes:</p>
<pre><code>import arcpy, cx_Oracle

class column:
    # Add to the arcType and cxType functions to support more Oracle data types.
    # BLOB and CLOB fields will need additional support in Read and Write fx's.
      name = ''
      dataType = ''
      dataLen = 1
      dataPrecision = 0
      dataScale = 0
      query = ''
      isShape = False
      isLOB = False

      def __init__(self, Name, DataType, DataLen, DataPrecision, DataScale):
          self.name = Name
          self.dataType = DataType
          self.dataLen = DataLen
          self.dataPrecision = DataPrecision
          self.dataScale = DataScale
          if DataType == 'WKT':
              self.query = 'sdo_util.to_wktgeometry(t.' + Name + ') wkb, '
          else:
              self.query = 't.' + Name
          if DataType == 'SDO_GEOMETRY':
              self.isShape = True
          if DataType == 'BLOB' or DataType == 'CLOB' or DataType == 'WKT':
              self.isLOB = True

      def getArcType(self, *args):        # Data type translation 'Oracle_type':'ESRI_type'
          return {
#             'BINARY_DOUBLE':'DOUBLE',
#             'BINARY_FLOAT':'FLOAT',
#             'BLOB':'BLOB',
              'CHAR':'STRING',
              'CLOB':'CLOB',
              'DATE':'DATE',
#             'FLOAT':'FLOAT',
#             'LONG':'LONG',
#             'LONG RAW':'BLOB',
              'NUMBER':'DOUBLE',
#             'RAW':'BLOB',
#             'ROWID':'SHORT',
              'SDO_GEOMETRY':'GEOMETRY',
              'VARCHAR2':'STRING',
              'WKT':'WKT',
          }.get(self.dataType,"undefined")

      def getCxType(self, *args):        # Data type translation 'Oracle_type':'cx_Oracle.type'
          return {
              'BLOB':cx_Oracle.BLOB,
              'CHAR':cx_Oracle.STRING,
              'CLOB':cx_Oracle.CLOB,
              'DATE':cx_Oracle.DATETIME,
              'NUMBER':cx_Oracle.NUMBER,
              'SDO_GEOMETRY':cx_Oracle.CLOB,
              'VARCHAR2':cx_Oracle.STRING,
          }.get(self.dataType,"undefined")

class pyTable:
    # Create an object to track columns for read and write operations.
    # BLOB, CLOB and SDO_GEOMETRY types will need additional support in Read and Write fx's.
    length = 0
    # colList = []       # The original list of columns is coming from an Oracle query.
    # These two lists are different because of the way I treat shape.
    # I create a FC and then add attribute columns.  This puts the Shape column first in the list. 
    __insCols = []       # I use insCols as a list of column type objects to write to ArcMap.
    __insertFields = []
    __colTuple = None
    __myData = []
    __pKey = 'P_KEY'     # The name of the primary key field should be &lt;table&gt;_CN
    __insBlobCols = []   # A list of column positions that contain BLOB data types.
    __insKeyCol = -1     # The position of the primary key column.

    def __init__(self, ColList):
        self.colList = ColList[:]
        self.length = len(ColList)
        self.isFC = self.__getShape()
        self.__select = self.getSelect()
        arcpy.AddMessage('New table class created with ' + str(self.length) + ' columns.')

    def __del__(self):
        self.colList = []
        del self.__insCols [:]
        del self.__insertFields [:]
        del self.__myData [:]
        del self.__insBlobCols [:]

    def addDataRow(self, inDataRow):
        self.__myData.append(inDataRow)

    def getInsCols(self):
        return self.__insCols

    def getTuple(self):
        return self.__colTuple

    def getPK(self):
        return self.__pKey

    def getInsBlobCols(self):
        return self.__insBlobCols

    def clearData(self):
        self.__myData = []

    def getData(self):
        return self.__myData

    def getKeyCol(self):
        return self.__insKeyCol

    def __getShape(self):
        isFeature = False
        featureName = ''
        for col in self.colList:
            if col.isShape:
                isFeature = True
                featureName = col.name
        if isFeature:
            wktShape = column(featureName, 'WKT', 0, 0, 0)
            self.__insCols.append(wktShape)
        for col in self.colList:
            if not col.isShape:
                self.__insCols.append(col)
        return isFeature

    def getSelect(self):
        # Build the select statement
        # Build the list of insert Field names
        # Build the Tuple of insert Field names
        # Identify the LOB columns by index number
        statement = 'select '
        del self.__insertFields[:]
        indx = 0
#        print ('Table has ', len(self.__insCols), ' insert columns.')
        for col in self.__insCols:
            if col.dataType == 'WKT':
                statement += 'sdo_util.to_wktgeometry(t.shape) wkb, '
                self.__insertFields.append('SHAPE@WKT')
            else:
                statement += 't.' + col.name + ', '
                self.__insertFields.append(col.name)
                if col.dataType == 'BLOB':
                    self.__insBlobCols.append(indx)
            #
            # ToDo: The key column should be &lt;table&gt;_CN
            #   But, the logic needs to work for views with different names.
            #
            if col.name == self.__pKey:
                self.__insKeyCol = indx
            indx += 1
        statement = statement[:statement.rfind(',')]  # Trim off the trailing comma
#        print ('Insert is composed of ', len(self.__insertFields), ' fields.' )
        self.__colTuple = tuple(self.__insertFields)
        return statement

    def createTemp(self, WorkSpace, tempFC):
        success = False
        insertCols = self.__insCols
        arcpy.AddMessage('Adding ' + tempFC + ' with ' + str(len(insertCols)) + ' columns.')
        try:
            if self.isFC:
                arcpy.CreateFeatureclass_management(WorkSpace, tempFC, 'POINT')
                arcpy.AddMessage(tempFC + ' feature class was successfully created.')
            else:
                arcpy.CreateTable_management(WorkSpace, tempFC)
                arcpy.AddMessage(tempFC + ' table was successfully created.')
            for col in insertCols:
                esriType = col.getArcType()
                if esriType == "undefined":
                    arcpy.AddError('Data type not currently supported, ' + col.dataType)
                    return success
                if col.dataType &lt;&gt; 'WKT':
                    arcpy.AddField_management(tempFC, col.name, esriType, col.dataPrecision, col.dataScale, col.dataLen)
                    arcpy.AddMessage('Created column: ' + col.name)
            success = True
        except:
            e = sys.exc_info()[1]
            arcpy.AddError('Create of ' + tempFC + ' failed with ' + str(e.args[0]))            
        return success
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are making a shallow copy of the list passed to your class in the init function.</p>
<p>See <a href="https://docs.python.org/3/library/copy.html" rel="nofollow noreferrer">Shallow and deep copy operations</a> in the Python documentation for some basic information.</p>
<p><code>self.colList = ColList[:]</code> makes a new LIST, but inside that new list are references to the same objects that were in the original list (a shallow copy).</p>
<p>You need a deep copy:</p>
<pre><code>import copy
...
self.colList = copy.deepcopy(ColList)
</code></pre>
<p>A deep copy has a new list, as well as new objects initialized to match the objects in the original list.  So if the objects in one class' list change, they don't change in every class.</p>
</div>
<span class="comment-copy">Thanks Robert.  I had to import the copy library in my python 2.7 environment.  Your suggestion was the key.</span>
