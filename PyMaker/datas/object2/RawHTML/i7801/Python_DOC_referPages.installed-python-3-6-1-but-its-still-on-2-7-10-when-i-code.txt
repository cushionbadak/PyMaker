<div class="post-text" itemprop="text">
<p>I downloaded and installed python 3.6.1 and I checked. It is properly installed and all. I even installed it again using Homebrew just in case.
But when I ran 'python -V' or 'python --version', it gives 'python 2.7.10'.
I know that 2.7.10 it comes preinstalled with MacOs (I am on a Mac running the latest version of Sierra) but how do I change it to run 3.6.1 instead.</p>
<p>The real problem is that when I code, there are a bunch of Turtle (and more) functions and modules missing (because they were only added in python 3). I need these functions in my program to make it work well.</p>
<p>If, instead of running 'python -V', I do 'python3 -V', it gives 'python 3.6.1'.
But it isn't the right version when I code. Also, in case this is useful, I program with Visual studio code.</p>
<p>Here is my ENTIRE program:</p>
<pre><code>import time
import datetime
from turtle import Turtle, Screen, mainloop
screen = Screen()
turtle1 = Turtle()
screen = turtle1.getscreen()
goPressed = False

currentWatts=0
solarPanelCost=10
Waittimevar2=0
Allsecs1=0
Allsecs2=0
Allsecs3=0
monthvar=0
ship_rotation=0
last_ship_angle=0

def wait_Mins():
         for i in range(0,1):
            global Waittimevar2
            global Allsecs1
            global Allsecs2
            global Allsecs3
            global monthvar

            monthvar = int(datetime.datetime.now().strftime("%C"))+int(datetime.datetime.now().strftime("%d"))
            Allsecs1 = (int(datetime.datetime.now().strftime("%S")))+(int(datetime.datetime.now().strftime("%M"))*60)+(int(datetime.datetime.now().strftime("%H"))*60*60)+(int(datetime.datetime.now().strftime("%d"))*24*60*60)+(int(datetime.datetime.now().strftime("%m"))*monthvar*24*60*60)+(int(datetime.datetime.now().strftime("%Y"))*12*monthvar*24*60*60)
            time.sleep(1.1)
            while Allsecs3 &lt; Waittimevar2:
                        print ("\n"*100)
                        print ("")
                        monthvar = int(datetime.datetime.now().strftime("%C"))+int(datetime.datetime.now().strftime("%d"))
                        Allsecs2=(int(datetime.datetime.now().strftime("%S")))+(int(datetime.datetime.now().strftime("%M"))*60)+(int(datetime.datetime.now().strftime("%H"))*60*60)+(int(datetime.datetime.now().strftime("%d"))*24*60*60)+(int(datetime.datetime.now().strftime("%m"))*monthvar*24*60*60)+(int(datetime.datetime.now().strftime("%Y"))*12*monthvar*24*60*60)
                        Allsecs3 = Allsecs2 - Allsecs1
                        percentage=float(float(Allsecs3)/float(Waittimevar2))*100
                        if percentage &lt; 100:
                              print ("{}%".format(percentage))
                        else:
                              print ("100%")
                        time.sleep(0.09)
            Waittimevar1=0

'''
Waittimevar2=5.123456789
wait_Mins()
print ("Loading...")
time.sleep(2)
print ("booting ship...")
time.sleep(2)
Waittimevar2=9.123456789
wait_Mins()
print("\n"*100)
time.sleep(1.5)
Waittimevar2=29.123456789
wait_Mins()
print("loading libraries...")
time.sleep(3)
Waittimevar2=1.123456789
wait_Mins()

print("Low power.")
time.sleep(1)
print("To make electricity, click the spacebar after clicking on Python Turtle Graphics (The rocket thing that will open in 9.5 seconds).\nDO NOT CLOSE THE PYTHON WINDOW or the game will close!\nPlease fullscreen Python Graphics.\nThe game will be played there.\nTo see Watts, check the terminal.")
time.sleep(1)
print("\nIf you see a scroll bar on your python graphics screen, fullscreen it.")
time.sleep(10)
'''


turtle1.speed(0)
screen.colormode(255)
def printbackground():
      turtle1.penup()
      turtle1.fillcolor((30, 30, 30))
      turtle1.goto(0,-5000)
      turtle1.pendown()
      turtle1.begin_fill()
      turtle1.circle(10000)
      turtle1.end_fill()

def printship(angle,previous_angle):
      turtle1.penup()
      turtle1.home()
      turtle1.left(previous_angle)
      turtle1.fd(100)
      turtle1.width(8)
      turtle1.pencolor((30, 30, 30))
      turtle1.pendown()
      turtle1.seth(0)
      turtle1.fd(1)
      turtle1.penup()
      turtle1.home()
      turtle1.pencolor("white")
      turtle1.left(angle)
      turtle1.fd(100)
      turtle1.seth(0)
      turtle1.width(4)
      turtle1.pendown()
      turtle1.seth(0)
      turtle1.fd(1)
      turtle1.left(90)
      turtle1.fd(1)
      turtle1.left(90)
      turtle1.fd(1)
      turtle1.left(90)
      turtle1.fd(1)
      turtle1.left(90)

def onaclicked():
     global currentWatts
     currentWatts+=1
     print (currentWatts)


def printplanet():
    turtle1.penup()
    turtle1.pencolor("red")
    turtle1.home()
    turtle1.pendown()
    turtle1.width(75)
    turtle1.left(90)
    turtle1.forward(1)
    turtle1.left(90)
    turtle1.forward(1)
    turtle1.left(90)
    turtle1.forward(1)
    turtle1.left(90)
    turtle1.forward(1)

def shipmovement():
      global ship_rotation
      global last_ship_angle
      print ("1")
      printship(ship_rotation,last_ship_angle)
      last_ship_angle=ship_rotation
      ship_rotation+=2

def printsidemenu():
      #Left menu:
      turtle1.penup()
      turtle1.pencolor((25, 25, 30))
      turtle1.home()
      turtle1.seth(90)
      turtle1.fd(500)
      turtle1.left(90)
      turtle1.fd(1050)
      turtle1.left(90)
      turtle1.width(1700)
      turtle1.pendown()
      turtle1.fd(1000)
      turtle1.penup()

      #Right menu:
      turtle1.home()
      turtle1.seth(90)
      turtle1.fd(500)
      turtle1.right(90)
      turtle1.fd(1050)
      turtle1.right(90)
      turtle1.width(1700)
      turtle1.pendown()
      turtle1.fd(1000)
      turtle1.penup()

      #Left menu borderline:
      turtle1.home()
      turtle1.pencolor((155, 155, 155))
      turtle1.goto(-200, 500)
      turtle1.width(1.5)
      turtle1.pendown()
      turtle1.seth(270)
      turtle1.fd(1000)
      turtle1.penup()

      #Right menu borderline:
      turtle1.home()
      turtle1.pencolor((155, 155, 155))
      turtle1.goto(200,500)
      turtle1.width(1.5)
      turtle1.pendown()
      turtle1.seth(270)
      turtle1.fd(1000)
      turtle1.penup()

def printsideoptions(level):
      #Solar panel:
      turtle1.penup()
      turtle1.home()
      turtle1.goto(-500, 350)
      turtle1.pendown()
      turtle1.pencolor("white")
      turtle1.write("Solar panel", align="left", font=("Source Code Pro", 16, "normal"))
      turtle1.penup()
      turtle1.goto(-500, 330)
      turtle1.pendown()
      turtle1.write(str(solarPanelCost)+" Watts. Press 1 to purchase.", align="left",font=("Source Code Pro", 11, "bold"))

def printtext(text,fontsize,locationX,locationY):
      turtle1.penup()
      turtle1.goto(locationX, locationY)
      turtle1.pencolor("white")
      turtle1.write(text, align="center", font=("Source Code Pro", fontsize, "normal"))


screen.onkey(onaclicked, "space")

turtle1.setup(width=1920, height=1080)
screen.listen()
screen.screensize(960,540)
turtle1.hideturtle()



printbackground()
printsidemenu()
printplanet()

printsideoptions(1)
printtitle=printtext("In Space",40,0,400)
printtitle

screen.ontimer(shipmovement, 1000)

screen.exitonclick()
</code></pre>
<p>And here is the error message when I run the code like this:</p>
<pre><code>Sophies-iMac-2:python Cedric$ python InSpace.py
Traceback (most recent call last):
  File "InSpace.py", line 208, in &lt;module&gt;
    turtle1.setup(width=1920, height=1080)
AttributeError: 'Turtle' object has no attribute 'setup'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you say you are programming with an IDE, I would assume it has settings for the default Python interpreter to use.  And it overrides the environmental variables to make sure the interpreter is the one the IDE has configured to be the default.  Try changing your MSVS settings. </p>
</div>
<div class="post-text" itemprop="text">
<p>Sounds like you have two Python versions installed in parallel.</p>
<p>Just throw shebang at the top of your desired Python3 scripts.</p>
<p><strong>eg:</strong> <code>#! /usr/bin/env python3</code></p>
<p>For more information, here are the <a href="https://docs.python.org/3/using/windows.html#shebang-lines" rel="nofollow noreferrer">PyDocs</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Check the result of the command <code>which python</code>. On my computer I have</p>
<pre><code>$ which python
/usr/local/bin/python
</code></pre>
<p>In my specific case, I installed python using <code>brew</code>. If I check the executable I see:</p>
<pre><code>/usr/local/bin/python -&gt; ../Cellar/python/2.7.13/bin/python
</code></pre>
<p>And the python3 executable is:</p>
<pre><code>/usr/local/bin/python3 -&gt; ../Cellar/python3/3.6.1/bin/python3
</code></pre>
<p>What you can do is make the <code>/usr/local/bin/python</code> a new link to the python version you want to use using the command <code>ln</code>.</p>
<pre><code>sudo rm /usr/local/bin/python
sudo ln -s /usr/local/Cellar/python3/3.6.1/bin/python3 /usr/local/bin/python
</code></pre>
<p>Now the executable is correct:</p>
<pre><code>/usr/local/bin/python -&gt; /usr/local/Cellar/python3/3.6.1/bin/python3
</code></pre>
<p>If I execute the version:</p>
<pre><code>$ python --version
Python 3.6.1
</code></pre>
<h3>Fix your bug</h3>
<p>To make your code works change the line:</p>
<pre><code>turtle1.setup(width=1920, height=1080)
</code></pre>
<p>To</p>
<pre><code>turtle1.screen.setup(width=1920, height=1080)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>But what I want to work the most is the 'screen.ontimer(shipmovement,
  1000)'</p>
</blockquote>
<p>This really should be asked as a separate SO quesion but here's a MCVE for moving your ship:</p>
<pre><code>from turtle import Turtle, Screen

def printbackground():
    turtle1.penup()
    turtle1.goto(0, -5000)
    turtle1.fillcolor(30, 30, 30)

    turtle1.begin_fill()
    turtle1.circle(10000)
    turtle1.end_fill()

def printship(angle):
    turtle1.hideturtle()
    turtle1.penup()
    turtle1.home()
    turtle1.color("white")
    turtle1.left(angle)
    turtle1.fd(100)
    turtle1.seth(0)
    turtle1.showturtle()

def shipmovement():
    global ship_rotation

    printship(ship_rotation)

    ship_rotation += 2

    screen.ontimer(shipmovement, 1000)

ship_rotation = 0

turtle1 = Turtle(shape='circle')
turtle1.shapesize(4 / 20)
turtle1.speed('fastest')

screen = Screen()
screen.setup(width=1920, height=1080)
screen.colormode(255)

printbackground()

screen.ontimer(shipmovement, 1000)

screen.exitonclick()
</code></pre>
<p>The key point to take note of is that <code>screen.ontimer()</code> is a one-shot, you have to keep doing them -- it doesn't repeat automatically.  </p>
<p>Some general guidelines:</p>
<ul>
<li><p>Don't use a single turtle (<code>turtle1</code>) for everything.  Allocate
separate turtles.  If the ship is it's own turtle, you don't have to
keep (re)setting it's color, etc.  Use separate turtles for writing
onto the screen -- if a turtle is allocated for each piece of
stationary, updating text, then you can simply <code>undo()</code> to erase the
last text before writing the new one.</p></li>
<li><p>It's easier to move a turtle then to erase and redraw using a turtle.
Create a custom shaped turtle to be your ship, then just move that
turtle, no erasing and repositioning necessary.</p></li>
<li><p>I think you're misunderstanding the difference between
<code>screen.setup()</code> and <code>screen.screensize()</code>.  One is for
setting the size of window the user sees, the other defines
how large a canvas backs that window, into which you can scroll. 
Reread the documentation.</p></li>
</ul>
</div>
<span class="comment-copy">It is normal for <code>python</code> to run Python 2, and <code>python3</code> to run Python 3. Anything in your system that looks for <code>python</code> expects to find Python 2. Why is it a problem?</span>
<span class="comment-copy">I also looked in the python 3.6.1 documentation and found turtle.setup. When I added that to my program properly, it returned an error 'AttributeError: 'Turtle' object has no attribute 'setup''. So it's obviously not running python 3. I also ran the code like this 'python3 InSpace.py' (InSpace.py is the name of the program)</span>
<span class="comment-copy">"I even installed it again using Homebrew just in case. " probably a <i>bad</i> idea. Now you have a 2.7 interpreter, and <i>two</i> 3.6 interpreters?</span>
<span class="comment-copy">no, I checked and it must've deleted the last 3.6 folder when it reinstalled it. There is only one 3.6 folder</span>
<span class="comment-copy">Where have you checked for the Python 3.6 folder? What is the output of <code>echo $PATH</code></span>
<span class="comment-copy">I don't understand...</span>
<span class="comment-copy">@Cedric What dont you understand?</span>
<span class="comment-copy">This works only if you make the .py file executable with a <code>chmod +x</code> and you run it directly without using python. E.g: <code>./InSpace.py</code></span>
<span class="comment-copy">@Karim Not true. If you have multiple python environments in the $PATH variable, you can use a shebang at the top of the file and the Python interpreter determines what environment version to use.</span>
<span class="comment-copy">I didn't know that @pstatix. Thank you.</span>
<span class="comment-copy">Ok, it does say python 3.6.1 now but it still has the same error as before when I run my file, here is the error: Sophies-iMac-2:python Cedric$ python InSpace.py Traceback (most recent call last):   File "InSpace.py", line 208, in &lt;module&gt;     turtle1.setup(width=1920, height=1080) AttributeError: 'Turtle' object has no attribute 'setup'</span>
<span class="comment-copy">these are the first lines of my code too : 'from turtle import Turtle, Screen, mainloop screen = Screen() turtle1 = Turtle() screen = turtle1.getscreen() '</span>
<span class="comment-copy">Edit your question and post both code and error message. It seems like you are finally running python3 and are able to import the turtle package at least.</span>
<span class="comment-copy">@Cedric, the <code>turtle1.setup(...)</code> error is valid, turtle instances don't have a <code>.setup()</code> method.  It's a method of the screen: <code>screen.setup(...)</code>.  In your list of code lines, ` screen = turtle1.getscreen()` isn't needed as you've already set screen correctly via <code>screen = Screen()</code></span>
<span class="comment-copy">@Cedric: check the update.</span>
<span class="comment-copy">so then how do I make it repeat the function all the time so that the ship moves, yet run other Turtle code at the same time. Obviously I can't use a while loop.</span>
<span class="comment-copy">@Cedric, look at the definition of <code>shipmovement()</code> in the code I posted -- the last thing it does is set up another timer to call <code>shipmovement()</code> again in the future.  Other tutle code that needs to run has to be event-based as well, either triggered by the keyboard, the mouse or a another timer.</span>
