<div class="post-text" itemprop="text">
<p>i have a code :</p>
<pre><code>s = '127.0.0.0'

def validate(a):
    a = s.split('.')
    if len(a) !=4:
        return False
    for x in a :
        if not x.isdigit():
            return False
        i = int(x)
        if i &lt; 0 or i &gt; 255 :
            return False
    return False

try:
    validate(s) #ip validation
    #my code here
except :
    print("insert you're ip correctly")
</code></pre>
<p>can i combine <strong>if else</strong> with <strong>try catch</strong> like that? </p>
<p>if the <strong>try catch</strong> got error message or like return false from <strong>if condition</strong> it will run the <strong>except</strong> condition, if not it will run the <strong>try</strong> condition until the process is end.</p>
<p>there's have a better ways to dot this? </p>
</div>
<div class="post-text" itemprop="text">
<p>You can raise an exception if the function returns False, by doing:</p>
<pre><code>s = '127.0.0.0'

def validate(a):
    a = a.split('.')
    if len(a) !=4:
        return False
    for x in a :
        if not x.isdigit():
            return False
        i = int(x)
        if i &lt; 0 or i &gt; 255 :
            return False
    return True

try:
    if not validate(s): #ip validation
        raise TypeError
except TypeError:
    print("insert you're ip correctly")
</code></pre>
<p>Note: you probably want to <code>return True</code> for the end, since I believe that's when the function validates successfully, and <code>a = a.split('.')</code> not <code>s.split</code>, or else you're splitting the global variable <code>s</code>. </p>
<p>Tip: when using try...except, try to catch a specific error than to use the catch-all <code>except:</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The answers above may be technically correct, but considering coding style etc. I don't see any reason to use exceptions here instead a plain if else:</p>
<pre><code>if not validate(s): #ip validation
    print("insert you're ip correctly")
</code></pre>
<p>That actually does what you want and it's much cleaner and better to read.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try/catch is to <a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">handle</a> <a href="https://docs.python.org/3/tutorial/errors.html#exceptions" rel="nofollow noreferrer">exceptions</a>, not to handle return values from methods. In your case, what you wrote would compile but is not what you want to do. </p>
<p>The easiest solution for you would be it use what already exists in python, ie. socket, which can nicely validate IP for you. If you still want to use the validate() method for other purpose, then you can write:</p>
<pre><code>import socket

def validate(a):
  socket.inet_aton(s)

try:
    validate(s)
    # your code here
except socket.error:
    print("insert your ip correctly")
</code></pre>
<p>In that case, the <a href="https://docs.python.org/3.4/library/socket.html#socket.inet_aton" rel="nofollow noreferrer">socket.inet_aton</a> method will raise the exception <code>socket.error</code>, which you can then catch. If for some reason you do not want to use socket, then you can define your own exception, raise it from validate() and catch it outside validate().</p>
<p>For Python 3, you will be better served by <a href="https://docs.python.org/3.4/library/ipaddress.html" rel="nofollow noreferrer">ipaddress</a> as socket is too permissive (for good reasons, see man inet(3)):</p>
<pre><code>import ipaddress

def validate(a):
    ipaddress.ip_address(a)

try:
    validate(s)
    # your code here
except ValueError:
    print("insert your ip correctly")
</code></pre>
<p>On a side note, I believe you want to <code>return True</code> as the last line of validate(), but that would not change the problem.</p>
<p>On a (second) side note, catching all exceptions (bare <code>catch</code> statement) is bad practice. In your code you handle a specific error (IP not valid) you should only catch exceptions related to this problem.</p>
</div>
<span class="comment-copy">You are not <code>raise</code>ing an exception, either <code>raise</code> in <code>validate()</code> or <code>assert validate(s) == True</code> (Note: you never <code>return True</code> from <code>validate()</code>)</span>
<span class="comment-copy">more ways to do <a href="https://stackoverflow.com/questions/319279/how-to-validate-ip-address-in-python" title="how to validate ip address in python">stackoverflow.com/questions/319279/â€¦</a></span>
<span class="comment-copy">this code is worked, oh yaa i got a typo :) and thanks for the Tip.</span>
<span class="comment-copy">i already try with socket, but i think there's still have a problem, when i input the ip with 1.1.1 the <b>socket</b> still recognize that's a IP, whereas a IP have 4 octets not 3 octets i use validate() function to make it more specific.</span>
<span class="comment-copy">Fair enough. I added an option for python 3 which would fit your needs better.</span>
<span class="comment-copy">now its worked when i try <b>ipaddress</b>.</span>
