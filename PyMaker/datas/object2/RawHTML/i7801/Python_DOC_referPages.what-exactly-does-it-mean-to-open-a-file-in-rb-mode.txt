<div class="post-text" itemprop="text">
<p>I just started to learn Python 2.X. I am trying to encrypt a file using Python. Professional users all are using pycrpto, while I am just doing a simple project to explore some of the basics in python's open file in "rb". Here is the code:</p>
<pre><code>def BinXor(tBIN, kBIN):
    tLength = len(tBIN)
    kLength = len(kBIN)
    if tLength &gt; kLength:
        while True:
            kBIN = kBIN + kBIN
            if not len(kBIN) &lt; tLength:
                break
    kBINXOR = kBIN[:tLength]
    return "".join(["%x" % (int(x, 2) ^ int(y, 2)) for (x, y) in
    zip(tBIN,kBINXOR)])

def question():
    t = open("b.xlsx",'rb').read()
    k = '00101101'
    print BinXor(t,k)
</code></pre>
<p>The error message is:</p>
<pre class="lang-none prettyprint-override"><code>File "....py", line 27, in BinXor
    return "".join(["%x" % (int(x, 2) ^ int(y, 2)) for (x, y) in zip(tBIN,kBINXOR)])
ValueError: invalid literal for int() with base 2: 'P'
</code></pre>
<p>The error is the same if I remove "b" from the open file statement. I have been reading couple of related questions here but still could not get a clue. Can anyone help me here? Why my code is not working? What is exactly inside the result of a file opened in 'rb' mode?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your error is unrelated to <code>open</code>. The error message says explicitly that the problem is with <code>int</code> function being called with <code>'P'</code> as an argument. Since <code>'P'</code> does not represent a binary number, <code>int</code> fails.</p>
</div>
<span class="comment-copy">Thanks, Blotosmetek!My native thinking has been that since I am opening in "rb", I should get nothing but binary value/numbers. This is not the case then what is inside the results from open file in "rb" ?</span>
<span class="comment-copy">No, the difference is that if you open file in text mode (without <code>b</code>) then it is treated as a sequence of strings; if you open file in binary mode, it is treated as a sequence of <code>bytes</code>. This means that no charset decoding is done.</span>
<span class="comment-copy">It looks like it returns a string of bytes.  Each byte can be converted to int, but the string itself is not a number.  Try looking at the <code>struct</code> module - <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer">docs.python.org/3/library/struct.html</a></span>
<span class="comment-copy">@OldGeeksGuide: The elements of a byte string <i>are</i> integers (although, as you say, the string itself is not).</span>
<span class="comment-copy">Thanks for everyone's help. Now I can better understand a post I read before. <a href="https://stackoverflow.com/questions/20004859/python-how-to-read-raw-binary-from-a-file-audio-video-text">Link</a> I looked into "struck", yet had a hard time to find the right "fmt" for my data. This trick (bin(int(binascii.hexlify(b), 16))[2:].zfill(8)) seemed get me what I need 8-digit 0 and 1.  Now, the last questions, after I did the XoR to encrypt then another XoR to decrypt, how can I write them back using "wb" mode?</span>
