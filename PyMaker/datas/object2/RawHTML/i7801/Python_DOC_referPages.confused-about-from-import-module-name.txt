<div class="post-text" itemprop="text">
<p>Perhaps I didn't understand this topic well. I can import the 'siblings' or 'nephews' directories but I can't import the 'cousin' directories. I read <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">this</a> Python document and tried to do this as they show but I still can't import the 'cousin' directory. In my example, I have a directory structure like the below:</p>
<pre><code>"""+
   |__directory_1+
   |             |__directory_1_1+
   |             |               |__test_1_1.py
   |             |
   |             |__directory_1_2+
   |             |               |__test_1_2.py
   |             |
   |             |__test_1.py
   |
   |__directory_2+
   |             |__directory_2_1+
   |             |               |__test_2_1.py
   |             |
   |             |__directory_2_2+
   |             |               |__test_2_2.py
   |             |
   |             |__test_2.py
   |
   |__test.py"""
</code></pre>
<p><b>For example:</b> When I run the test.py file and write the below codes:</p>
<pre><code>import directory_1, directory_2
</code></pre>
<p>This code import it's siblings.</p>
<p><b>For example:</b> When I run the test.py file again and write the below codes:</p>
<pre><code>from directory_1 import test_1
from directory_2 import test_2
</code></pre>
<p>This codes import it's nephews and also it can import it's grandnephews like the below:</p>
<pre><code>from directory_1.directory_1_1 import test_1_1
from directory_1.directory_1_2 import test_1_2
#...And can be adaptated to other ''grand nephews''.
</code></pre>
<p>But suppose I want to import the 'cousin' file. How can I import the cousin file?  I run the test_1.py file. It's 'cousin' is 'test_2'.</p>
<pre><code>import directory_1_1.test_1_1
#It can import the 'nephew'.

from . import test_2
#It can't import the 'cousin'.
#SystemError: Parent module '' not loaded, cannot perform relative import
</code></pre>
<p>When I read the Python document which was given above, there's an example at the intra-package reference topic about this example. And there has written a method that written as below to import the 'cousin' module.</p>
<pre><code>from . import module_name
</code></pre>
<p>In my example there's no <b><strong>init</strong>.py</b> file in the directories. I suspected that the problem arise from here. And also I wonder is there something written in the <strong>init</strong> that I haven't learned yet?</p>
<p>While I was thinking about why still I get an error like: &lt;<b>SystemError: Parent module '' not loaded, cannot perform relative import</b>&gt; I added an empty <b><strong>init</strong>.py</b> file into the directories as shown in the Python document. 
<img src="https://i.hizliresim.com/WQ4gYE.jpg"/></p>
<p>I hope I explained my problem. And definitely, as a beginner of Python, I would like to learn how to use <b>'from . import module'</b> expression. 
Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>The advantage of adding a path to sys.path (over using imp) is that it simplifies things when importing more than one module from a single package.</p>
<p>Say 
Soundpackage has sound , modifysound , audioenhance
Etc. Which are modules inside the package.</p>
<pre><code>import sys
sys.path.append('your_path/foo/bar/soundpackage') 
#your module name
from sound import effects.reverse.py
from modifysound import some_module
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Import statements are dependent on the main script executing, or rather the directory your main script is executing from gets automatically added to the <code>sys.path</code> which is what Python uses to search for modules on import.</p>
<p>Therefore, if you run your <code>test.py</code> script which ends up importing <code>directory_1.directory_1_1.test_1_1</code>, if that script has <code>import directory_2.directory_2_1.test_1_1</code> everything will be fine, but if some other script calls it, from some other place, it won't be able to find it.</p>
<p>For that reason, when making inter-dependent modules, since you cannot know who will be importing them <strong>always</strong> use relative paths. For example, your <code>test_2_2.py</code> can import its <code>test_1_1.py</code> 'cousin' with: <code>from ....directory_1.directory_1_1 import test_1_1</code> (relative names follow similar rules to path names, except you don't need separators, so <code>.</code> is the current path, <code>..</code> is a path one level up, <code>...</code> is a path two levels up and so on). </p>
<p>NOTE: These kinds of multi-level relative imports work only when used in packages, you cannot use this for referencing your running scripts (and why should you when you know where everything is running from?). All your directories need to have <code>__init__.py</code> in order to be considered as <em>packages</em> by the Python interpreter.</p>
</div>
<span class="comment-copy">That's everything but <i>better</i>, a lot of unintended consequences can arise from changing the search path.</span>
<span class="comment-copy">Many thanks, works with this method but still i wonder in which cases we use &lt;from . import module_name&gt;</span>
<span class="comment-copy">The . specifies that it's from the current working directory. If you have any modules in your current directory then use this. Won't work for your 'type' of relative cousin imports i guess.</span>
<span class="comment-copy">Ok. Perhaps i should practise with a real module in order to see the .'s function. Thank you very much.</span>
<span class="comment-copy">Thanks for your participation. You said that ''your test_2_2.py can import it's test_1_1.py 'cousin' with from ....directory_1.directory_1_1.test_1_1". I wrote this code like, from .... import directory_1.directory_1_1.test_1_1 but this gave me a syntax error. Also i recieve a syntax error with the codes you shared.</span>
<span class="comment-copy">@dildeolupbiten - it's a valid syntax, what does your Python say exacly? Keep in mind that you can use this kind of relative imports only in packages (e.g. the root structure, where the <code>test.py</code> is, needs to have <code>__init__.py</code> and should be imported from outside), you cannot use this to reference your current scripts (but then, why should you, you already know their locations and what's the main runner of the script so you can adjust your imports).</span>
<span class="comment-copy">I run the test_2_2.py file and wrote the codes that you shared. But gave me a syntax error. It exactly said "File "C:/Users/TCK/Desktop/example/klasör_2/klasör_2_2/test_2_2.py", line 3     from .... import klasör_1.klasör_1_1.test_1_1                                               ^ SyntaxError: invalid syntax" (The word klasör is Turkish, it means directory, i changed the word 'directory' to 'klasör' when i run the program)</span>
<span class="comment-copy">Continue...Then i changed the code write "from ....  klasör_1.klasör_1_1 import test_1_1. But while i was typing the codes Pycharm underline the codes which means this code will give a syntax error. And finally it gives an syntax error.  Yes, i know their locations but i want to learn the from . import module name method with an example. And this example was designed for this education.</span>
<span class="comment-copy"><b>DO NOT</b> use non-ascii, non-alphanumeric (plus underscore) characters in your package names. Yes, Python 3.3+ will know how to deal with them but so many things can go wrong. Python 2.x does not support them at all.</span>
