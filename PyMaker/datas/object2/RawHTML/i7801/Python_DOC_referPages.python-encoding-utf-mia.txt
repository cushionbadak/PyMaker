<div class="post-text" itemprop="text">
<p>H!
This problem concerns strings and encoding.
I have a file 'build_list.txt' :</p>
<pre><code>Miały password
something not important
stuff stuff
stuff
</code></pre>
<p>and reading file.py:</p>
<pre><code>import csv

with open('build_list.txt', 'r', encoding='utf-8') as csvfile:
    spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')

    for i, row in enumerate(spamreader):
        if i == 0:
            username = str(row[0]).strip()
            password = str(row[1]).strip()
            if username != "Miały":
                print("FAIL: {!r} != {!r}".format(
                    username.encode('utf-8'), "Miały".encode('utf-8')))
</code></pre>
<p>It prints</p>
<pre><code>FAIL: b'\xef\xbb\xbfMia\xc5\x82y' != b'Mia\xc5\x82y'
</code></pre>
<p>why is so, and how to fix it?</p>
<p>I'm using pycharm, saving txt file in windows with utf-8 encoding (ANSI yields strange characters)</p>
</div>
<div class="post-text" itemprop="text">
<p>Your CSV file has an invisible <a href="https://en.wikipedia.org/wiki/Byte_order_mark" rel="nofollow noreferrer">byte order mark</a> at its beginning, which is getting treated as part of the first record in the file.  <a href="http://www.unicode.org/faq/utf_bom.html" rel="nofollow noreferrer">UTF-8-encoded text files aren't supposed to have byte order marks</a>, but Windows programs have a bad habit of inserting them anyway.  You can make Python ignore the BOM by opening the file with the <a href="https://docs.python.org/3/library/codecs.html#module-encodings.utf_8_sig" rel="nofollow noreferrer">utf-8-sig</a> encoding, instead of plain utf-8:</p>
<pre><code>with open('build_list.txt', 'rt', encoding='utf-8-sig') as csvfile:
    # ...
</code></pre>
<p>But don't use that encoding when <em>writing</em> files, unless you have to interoperate with a program that fails to recognize files as UTF-8 without the byte order mark.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is because you are using unicode in <code>Miały</code>,</p>
<ol>
<li><p><code>from __future__ import unicode_literals</code></p></li>
<li><p>use <code>print(username == u'Miały')</code></p></li>
</ol>
<p>Have a look at <a href="https://github.com/luckydonald/pytg/blob/master/examples/bot_ping.py" rel="nofollow noreferrer">this link</a> and how unicode is being used.</p>
<p><strong>UPDATE:</strong></p>
<p>After testing your code I got <code>True</code> With No Error.</p>
</div>
<span class="comment-copy">FAIL: b'\xef\xbb\xbfMa\xc5\x82y' != b'Mia\xc5\x82y'</span>
<span class="comment-copy">Aha! Byte order marks strike again.  Would you please edit that into your question, while I rewrite my answer to actually answer?</span>
<span class="comment-copy">hm? could you point me to solution? :&gt; // missing braces if (row[0] == "Miały"):</span>
<span class="comment-copy">@KrzysztofJurkiewicz Please see edited answer.</span>
<span class="comment-copy">still yields false</span>
<span class="comment-copy">I tested your code with no edit, then I got <code>True</code> without even adding unicode support, can you please confirm that you are running same code that you are pasted here?</span>
<span class="comment-copy">@SadeghAlirezaie The problem is an invisible character in OP's actual text file; copying and pasting from the question will not reproduce the problem.</span>
<span class="comment-copy">@zwol that was good point, thanks</span>
