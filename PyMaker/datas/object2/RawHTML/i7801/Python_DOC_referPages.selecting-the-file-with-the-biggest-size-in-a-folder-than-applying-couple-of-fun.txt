<div class="post-text" itemprop="text">
<p>I am interested in finding the files with the biggest size in terms of kbs in a folder and then apply a function. After that, I want to apply a different function to remaining files in the same folder. If I knew which files I was going to use, names and sizes of the files, I would use the following code:</p>
<pre><code>with open(big_file, 'r') as bigfile:
   bigfile.rotate #predefined function
   minx, maxx, miny, maxy, minz, maxz = find_mins_maxs(bigfile) #predefined function
   w1 = maxx - minx
   l1 = maxy - miny
   h1 = maxz - minz
   copies = copy_obj(bigfile, (w1, l1, h1), 2, 2, 1)
with open(small_file, 'r') as smallfile:
    minx, maxx, miny, maxy, minz, maxz = find_mins_maxs(smallfile)
    w2 = maxx - minx
    l2 = maxy - miny
    h2 = maxz - minz
    translate(smallfile, w1, w1 / 10., 3, 'x')
    copies2 = copy_obj(smallfile, (w2, l2, h2), 2, 2, 1)
    combined = mesh.Mesh(numpy.concatenate([bigfile.data, smallfile.data] +
                                [copy.data for copy in copies] +
                                [copy.data for copy in copies2]))
    combined.save(folder + '.stl', mode=stl.Mode.ASCII)  # save as ASCII
</code></pre>
<p>How I could apply it to many folders that consist of many files</p>
</div>
<div class="post-text" itemprop="text">
<p>This finds the biggest file in a given directory:</p>
<pre><code>import os
path = '/path/to/directory'
print(max(os.listdir(path), key=lambda x: os.stat(os.path.join(path,x)).st_size))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.5 and higher, you can do this:</p>
<pre><code>import os

direntries = list(os.scandir(PATH))
bigfile = max(direntries, key=lambda x: x.stat().st_size)
</code></pre>
<p>Now <code>bigfile</code> is a <a href="https://docs.python.org/3/library/os.html#os.DirEntry" rel="nofollow noreferrer">DirEntry object</a>. Then <code>bigfile.name</code> is the filename, and <code>bigfile.path</code> is the full path.</p>
<p>Then you can do </p>
<pre><code>dostuff(bigfile)
for f in direntries:
    if f is not bigfile:
       otherstuff(f)
</code></pre>
<p>Or, if you want to skip directories:</p>
<pre><code>for f in direntries:
    if f.is_file() and f is not bigfile:
       otherstuff(f)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just list your files with <code>os.listdir</code>, check for files using <code>os.path.isfile</code> and use <code>os.stat</code> for a more reliable size readout, store them in a list and sort that list:</p>
<pre><code>import os

target = "."  # let's use the current dir as our target

file_list = sorted((os.stat(os.path.join(target, f)).st_size, os.path.join(target, f))
                    for f in os.listdir(target)
                    if os.path.isfile(os.path.join(target, f)))
</code></pre>
<p>Now your <code>file_list</code> will contain a list of tuples <code>(file_size, file_path)</code> ordered from smallest to the biggest size in the <code>target</code> directory.</p>
<p>You can then use <code>file_list[-1][1]</code> to get the biggest file, and you can loop through all of the others (<code>file_list[:-1]</code>) to execute something else on them, e.g.:</p>
<pre><code>function_for_the_biggest_file(file_list[-1][1])

for other_file in file_list[:-1]:
    function_for_other_files(other_file[1])
</code></pre>
<p><strong>EDIT</strong> - It seems that after you execute your functions you want to save them all in one file, so:</p>
<pre><code>with open(os.path.join(target, "combined.dat"), "w") as outfile:
    for files in file_list:
        with open(files[1], "r") as f:
            outfile.write(f.read())
</code></pre>
<p>This will concentrate all of the files in <code>combined.dat</code> in the same directory, in order of the smallest to the biggest file. You can use <code>for files in reversed(file_list):</code> if you want to store from the biggest to the smallest file.</p>
</div>
<span class="comment-copy"><code>os.stat(fname).st_size</code> should tell you the size of any given file (according to the OS) (i think its <code>st_size</code> attribute at least ...</span>
<span class="comment-copy">then I should write a loop for remaining files?</span>
<span class="comment-copy">thats probably a reasonable method to check many files</span>
<span class="comment-copy">What I mean is after finding and applying the first step to the file with the biggest size, how can I loop through other files to apply second step</span>
<span class="comment-copy">that doesn't work unless you're listing the current directory because <code>listdir</code> returns the file names, not paths.</span>
<span class="comment-copy">(just use glob.glob instead of os.listdir and your good ... or do os.path.join)</span>
<span class="comment-copy"><code>max(glob.glob('/path/to/directory/*'), key=os.path.getsize)</code></span>
<span class="comment-copy">Corrected. Unless I'm mistaken, <code>glob.glob</code> won't include hidden files (dot-files in Unix).</span>
<span class="comment-copy">and <code>stat</code> / <code>getsize</code> return a different result for directories. It would be better to filter them out.</span>
<span class="comment-copy">but in the end, I have to combine all of them, how I wil lbe able to achieve it?</span>
<span class="comment-copy">How can i combine them at the end if I don't know the number of files to combine ?</span>
<span class="comment-copy">What do you mean "combine" them? You have them all listed in ascending order in the <code>file_list</code>, together with their sizes - you can do whatever you want with the list.</span>
<span class="comment-copy">@Cenk_Mitir - check the update, if I understood what you want correctly. Although if you're already doing something with the contents of the files, you should probably pass an open file handle to the <code>combined.dat</code> to your functions so they can write directly to the combined file instead of reading and saving the modified files, just so you can read them again a moment later...</span>
<span class="comment-copy">Actually, I have to combine them in a way that I have done in the question, that is little bit tricky</span>
