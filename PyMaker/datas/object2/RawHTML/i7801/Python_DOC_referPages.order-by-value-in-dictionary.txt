<div class="post-text" itemprop="text">
<p>I'm just practising with python. I have a dictionary in the form:</p>
<pre><code>my_dict = [{'word': 'aa', 'value': 2}, 
           {'word': 'aah', 'value': 6}, 
           {'word': 'aahed', 'value': 9}]
</code></pre>
<p>How would I go about ordering this dictionary such that if I had thousands of words I would then be able to select the top 100 based on their value ranking? e.g., from just the above example:</p>
<pre><code>scrabble_rank = [{'word': 'aahed', 'rank': 1},
                 {'word': 'aah', 'rank': 2}, 
                 {'word': 'aa', 'rank': 3}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Firstly, that's not a dictionary; it's a list of dictionaries. Which is good, because dictionaries are unordered, but lists are ordered.</p>
<p>You can sort the list by the value of the <code>rank</code> element by using it as a key to the sort function:</p>
<pre><code>scrabble_rank.sort(key=lambda x: x['value'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Is this what you are looking for:</p>
<pre><code>scrabble_rank = [{'word':it[1], 'rank':idx+1} for idx,it in enumerate(sorted([[item['value'],item['word']] for item in my_dict],reverse=True))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>Pandas</code> Library:</p>
<pre><code>import pandas as pd
</code></pre>
<p>There is this one-liner:</p>
<pre><code>scrabble_rank = pd.DataFrame(my_dict).sort_values('value', ascending=False).reset_index(drop=True).reset_index().to_dict(orient='records')
</code></pre>
<p>It outputs:</p>
<pre><code>[{'index': 0, 'value': 9, 'word': 'aahed'},
 {'index': 1, 'value': 6, 'word': 'aah'},
 {'index': 2, 'value': 2, 'word': 'aa'}]
</code></pre>
<p>Basically it reads your records into a DataFrame, then it sort by <code>value</code> in descending order, then it drops original index (order), and it exports as records (your previous format).</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/heapq.html" rel="nofollow noreferrer">heapq</a>:</p>
<pre><code>import heapq

my_dict = [{'word': 'aa', 'value': 2}, 
           {'word': 'aah', 'value': 6}, 
           {'word': 'aahed', 'value': 9}]

# Select the top 3 records based on `value`
values_sorted = heapq.nlargest(3, # fetch top 3
                               my_dict, # dict to be used
                               key=lambda x: x['value']) # Key definition
print(values_sorted)
[{'word': 'aahed', 'value': 9}, {'word': 'aah', 'value': 6}, {'word': 'aa', 'value': 2}]
</code></pre>
</div>
<span class="comment-copy">Hmmm, this is quite cool - I will accept but this orders from "worst" to "best" value - so for three items with values 2, 5, 8, it should be ordered 8, 5, 2 - highest to lowest...</span>
<span class="comment-copy">I can use reverse=True as one of the args for the sort function.</span>
<span class="comment-copy">@MichaelRoberts using <code>my_dict.sort(key=lambda x: -x['value'])</code> does the trick</span>
