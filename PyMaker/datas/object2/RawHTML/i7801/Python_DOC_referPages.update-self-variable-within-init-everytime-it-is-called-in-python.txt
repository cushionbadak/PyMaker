<div class="post-text" itemprop="text">
<p>I want a self variable within <strong>init</strong> to update every time it is called  e.g. every time I execute <code>Data(10).plot</code>, self.plot should reinitialise by parsing the self.n to the Plot class.</p>
<pre><code>class Data(object):
    def __init__(self, n):
        self.n = n
        self.plot = Plot(self.n)

    def minus(self, x):
        self.n -= x
        return self.n


class Plot(object):
    def __init__(self, n):
        self.n = n

    def double(self):
        return self.n * 2
</code></pre>
<p>Another example: When I execute the following code, I want the answer variable to equal 16. Instead it equals 20. How do I implement this behaviour within the above classes?</p>
<pre><code>data = Data(10)
data.minus(2)
answer = vcf.plot.double())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you want is a <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer"><code>property</code></a>. This is a special type of attribute that calls a custom getter function when getting the value, so you can make it dynamically return the correct plot.</p>
<pre><code>class Data(object):
    def __init__(self, n):
        self.n = n

    @property
    def plot(self):
        return Plot(self.n)

    def __sub__(self, x):
        return Data(self.n - x)
</code></pre>
<p>As a side note, look at <a href="https://docs.python.org/3/reference/datamodel.html#basic-customization" rel="nofollow noreferrer">the data model</a> to override python operators.</p>
<pre><code>data = Data(10)
data -= 2
answer = data.plot.double()  # Calls the `plot()` function to get a value for `data.plot`.
print(answer)  # 16
</code></pre>
<p>Another way would be to link the Plot to the data, so when the data changes, the plot does to. A way to do it would be just to have it as an attribute, so when it changes, the attribute does too.</p>
<pre><code>class Plot(object):
    def __init__(self, data):
        self.data = data

    @property
    def n(self):
        return self.data.n

    @n.setter
    def n(self, x):
        self.data.n = x

    def double(self):
        return self.n * 2

data = Data(10)
plot = Plot(data)
data.minus(2)
answer = plot.double()  # 16
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need <code>n</code> in the <code>Data</code>-object:</p>
<pre><code>class Data(object):
    def __init__(self, n):
        self.plot = Plot(n)

    def minus(self, x):
        self.plot.n -= x    


class Plot(object):
    def __init__(self, n):
        self.n = n

    def double(self):
        return self.n * 2
</code></pre>
</div>
<span class="comment-copy">Thanks, this seems to do the trick. Regarding your last comment, I am wondering if you know of any design patterns or attributes to allow me to link the data between the two classes?</span>
