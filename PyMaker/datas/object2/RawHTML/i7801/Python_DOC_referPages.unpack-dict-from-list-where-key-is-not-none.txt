<div class="post-text" itemprop="text">
<p>Trying to unpack the <code>dict</code>s which are not <code>None</code> from a <code>list</code>:</p>
<pre><code>In [4]: unpack_dict = [{'key': 'a'}, {'key_2': 'b'}, None]
</code></pre>
<p>Tried a dict comprehension</p>
<pre><code>In [5]: {key: value for (key, value) in unpack_dict if (key, value) is not None}
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;ipython-input-5-ec0e44b95586&gt; in &lt;module&gt;()
----&gt; 1 {key: value for (key, value) in unpack_dict if (key, value) is not None}

&lt;ipython-input-5-ec0e44b95586&gt; in &lt;dictcomp&gt;(.0)
----&gt; 1 {key: value for (key, value) in unpack_dict if (key, value) is not None}

ValueError: not enough values to unpack (expected 2, got 1)
</code></pre>
<p>And a list comprehension:</p>
<pre><code>In [6]: {**[x for x in [unpack_dict] if x is not None]}
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-6-ac36898d39a1&gt; in &lt;module&gt;()
----&gt; 1 {**[x for x in [unpack_dict] if x is not None]}

TypeError: 'list' object is not a mapping
</code></pre>
<p>Expected result:</p>
<pre><code>{'key': 'a', 'key_2': 'b'}
</code></pre>
<p>What is the right syntax?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are trying to unpack either a dictionary or <code>None</code> to two variables (<code>key</code> and <code>value</code>). You can't unpack <em>either type</em> in this way. <code>None</code> is not iterable, and iteration over a dict would yield <em>only the keys</em>, not the values.</p>
<p>Loop over the dictionary items if there is a dictionary, otherwise loop over an empty sequence, and unpack the <em>iteration results</em>:</p>
<pre><code>{key: value for d in unpack_dict for key, value in (d.items() if d else ())}
</code></pre>
<p>The <code>d.items() if d else ()</code> expression produces either an iterable of <code>(key, value)</code> pairs from a (non-empty) dictionary, or an empty tuple (causing that nested iteration to stop immediately).</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; unpack_dict = [{'key': 'a'}, {'key_2': 'b'}, None]
&gt;&gt;&gt; {key: value for d in unpack_dict for key, value in (d.items() if d else ())}
{'key': 'a', 'key_2': 'b'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>FWIW, you can do this with a <code>for</code> loop and successive calls to <code>dict.update</code>, which I think is quite readable: </p>
<pre><code>&gt;&gt;&gt; dct = {}
&gt;&gt;&gt; for d in unpack_dict:
...    if d:
...       dct.update(d)
... 
&gt;&gt;&gt; dct
{'key': 'a', 'key_2': 'b'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using the built-in function <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer"><code>filter</code></a>:</p>
<p>Assuming you actually do have a list of dicts or None, as per your example:</p>
<pre><code>merged_dict = {}
for dict in filter(None, unpack_dict):
    merged_dict.update(dict)
</code></pre>
<p>Or in one line:</p>
<pre><code>dict(pair for dict in filter(None, unpack_dict) for pair in dict.items())
</code></pre>
<p>Or if your input was supposed to be a list of <em>tuples</em>, then it's quite easy, and similar to what you were attempting:</p>
<pre><code>unpack_dict = [('key': 'a'), ('key_2': 'b'), None]
{key: value for (key, value) in filter(None, unpack_dict)}
</code></pre>
</div>
