<div class="post-text" itemprop="text">
<p>Good day,</p>
<p>I'm gathering data from an api, and trying to save it as a csv. The format that I'm receiving it is:</p>
<pre><code>for title in titles:
   print(title.name)
   for data in title.data:
      print(data)

Title1
data1
data2
data3
Title2
data4
data5
data6
</code></pre>
<p>etc., (top first, bottom last, from a giant loop)</p>
<p>I'd like to make a csv so that it looks like</p>
<pre><code>Title1 Title2
data1 data4
data2 data5
data3 data6
</code></pre>
<p>There is a lot of data, so I can't save it as a list and zip it. Seems like it should be a simple task but I can't find a solution.</p>
</div>
<div class="post-text" itemprop="text">
<p>Following Maarten Fabr√©'s suggestion, you can make your data receiving function as data generator:</p>
<pre><code>import pyexce as p

...

def data_gen():
    for title in titles: # put your data recicving api code here
       yield [title.name] +  title.data


p.save_as(array=data_gen(), dest_file_name='result.csv')
</code></pre>
<p>Then you will have the data in result.csv as:</p>
<pre><code>Title1,data1,data2,data3
Title2,data4,data5,data6
</code></pre>
<p>Then you can transpose it later:</p>
<pre><code>&gt;&gt;&gt; s=p.get_sheet(file_name='result.csv')
&gt;&gt;&gt; s
result.csv:
+--------+-------+-------+-------+
| Title1 | data1 | data2 | data3 |
+--------+-------+-------+-------+
| Title2 | data4 | data5 | data6 |
+--------+-------+-------+-------+
&gt;&gt;&gt; s.transpose()
&gt;&gt;&gt; s
result.csv:
+--------+--------+
| Title1 | Title2 |
+--------+--------+
| data1  | data4  |
+--------+--------+
| data2  | data5  |
+--------+--------+
| data3  | data6  |
+--------+--------+
&gt;&gt;&gt; s.save_as('perferct_result.csv')
</code></pre>
<p>Alternatively, you can consume it right away without transposing it:</p>
<pre><code>&gt;&gt;&gt; s=p.get_sheet(file_name='result.csv')
&gt;&gt;&gt; s.name_rows_by_column(0)
&gt;&gt;&gt; s
result.csv:
+--------+-------+-------+-------+
| Title1 | data1 | data2 | data3 |
+--------+-------+-------+-------+
| Title2 | data4 | data5 | data6 |
+--------+-------+-------+-------+
&gt;&gt;&gt; s.to_dict()
OrderedDict([(u'Title1', [u'data1', u'data2', u'data3']), (u'Title2', [u'data4', u'data5', u'data6'])])
</code></pre>
</div>
<span class="comment-copy">is the data numbers or some form that is different than than title? like titles are always words and data is always ints or floats/</span>
<span class="comment-copy">You should take a look at the csv module: <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">docs.python.org/3/library/csv.html</a></span>
<span class="comment-copy">@Jacobr365 Titles and data are both strings containing letters and numbers.</span>
<span class="comment-copy">@Uriel There are a lot of titles. Would I need to do that for every one?</span>
<span class="comment-copy">Can you know the max number of columns and length of each string you may get ? If so a solution would be to create a huge file and write each piece at the right position in the file as they arrive. (eg Title1 would be @ pos 0, data1 @ pos <code>len(s)*1*max(ncol)</code>, data2 @ pos <code>len(s)*2*max(ncol)</code>, data4 @ pos <code>len(s)*1*max(ncol)+1</code>)</span>
