<div class="post-text" itemprop="text">
<p>I have a massive list of directories and I am trying to copy specified directories/ folders from one place to another, and trying to replicate the 'hierarchy' but failing badly to do so.</p>
<pre><code>list_of_dirs = [
'/serverA/user_data/2017_Jan/2017_01_25/reference/images/setA/',
'/serverA/user_data/2017_Jan/2017_01_26/reference/images/setA/',
 ]

lib_path = '/serverB/user_data'
dirs_length = len(list_of_dirs)

collate_date_names = []   

def create_main_folder(main_folder_name):
    base_folder_path = '{0}/{1}/'.format(lib_path, main_folder_name)
    base_folder = os.path.dirname(base_folder_path)
    if not os.path.exists(base_folder):
        os.makedirs(base_folder_path)



def create_sub_date_folder(base_folder, folder_name):
    folder_path = '{0}/{1}/{2}/'.format(lib_path, base_folder, folder_name)
    base_folder = os.path.dirname(folder_path)
    if not os.path.exists(base_folder):
        os.makedirs(folder_path)

def main():
    for directory in enumerate(list_of_dirs):
        date_range_string = directory[1].split('/')[3]
        create_main_folder(date_range_string)

        if date_range_string in directory[1]:
            folder_name = directory[1].split('/')[-2]
            create_sub_date_folder(date_range_string, folder_name)

            new_main_folder = '{0}/{1}'.format(lib_path, date_range_string)
            new_folder_path = '{0}/{1}/{2}'.format(lib_path, date_range_string, folder_name)

            subprocess.call('cp -r {0} {1}'.format(directory[1], new_main_folder), shell=True)

main()
</code></pre>
<p>It seems that the way that I am trying to create these multiple folders may not be ideal as I am simply trying to get the next item while using the <code>split</code> command.</p>
<p>While running my above code, this is the hierarchy structure that I am seeing and it is not what I wanted:</p>
<pre><code>|- 2017_Jan
|--|-- 2017_01_25
|--|--|-- setA
|--|-- 2017_01_26
|--|--|-- setA
</code></pre>
<p>Whereas this is what I am trying to achieve:</p>
<pre><code>|- 2017_Jan
|--|-- 2017_01_25
|--|--|-- reference
|--|--|--|-- images
|--|--|--|--|-- setA
|--|-- 2017_01_26
|--|--|-- reference
|--|--|--|-- images
|--|--|--|--|-- setA
</code></pre>
<p>What is the best way that I can go around creating this structure?</p>
</div>
<div class="post-text" itemprop="text">
<p>Unless I'm not getting something from your explanation, this looks way more complicated than it needs to be. All you need is to shave off the common prefix path and just create the rest, presumably on the other path so:</p>
<pre><code>import os

list_of_dirs = [
    '/serverA/user_data/2017_Jan/2017_01_25/reference/images/setA/',
    '/serverA/user_data/2017_Jan/2017_01_26/reference/images/setA/',
]

source_path = "/serverA/user_data/"  # strip off this from all paths
target_path = "/serverB/user_data/"  # destination for the paths

for path in list_of_dirs:
    if path.startswith(source_path):  # just in case we have a path without a common prefix
        path = path[len(source_path):]
    os.makedirs(target_path + path, exist_ok=True)  # this creates the desired path

# gives:
#
# / serverB
#    |-- user_data
#       |-- 2017_Jan
#          |-- 2017_01_25
#          |  |-- reference
#          |      |-- images
#          |         |-- setA
#          |-- 2017_01_26
#             |-- reference
#                |-- images
#                   |-- setA
</code></pre>
</div>
<span class="comment-copy">Why not just <a href="https://docs.python.org/3/library/os.html?highlight=os.makedirs#os.makedirs" rel="nofollow noreferrer"><code>os.makedirs()</code></a>?</span>
<span class="comment-copy">Thanks, I used the code you wrote, change it slightly and implemented into my code, and it works! But I am curious though - the code you have wrote can and only work if there is a 'common' path term?</span>
<span class="comment-copy">The above code uses that 'feature' of the original data to easily strip-away the beginning of the path and put the target path in its place. For a different dataset you'd use a different strategy on finding the 'root' path you want to replicate to the target path. There is a slew of tools for working with paths available in the <a href="https://docs.python.org/3/library/os.path.html" rel="nofollow noreferrer"><code>os.path</code></a> module so definitely check that out if you intend something more complex. Once you have your target path, <code>os.makedirs()</code> with <code>exist_ok=True</code> will create any valid path you feed to it.</span>
