<div class="post-text" itemprop="text">
<p>I am very new to python as well a programming, I like to slice the folder path. For example, if my original path is:</p>
<pre><code>C:/Users/arul/Desktop/jobs/project_folder/shots/shot_folder/elements/MexicoCity-Part1/
</code></pre>
<p>I like to get the path like this:</p>
<pre><code>C:/Users/arul/Desktop/jobs/project_folder/shots/shot_folder/
</code></pre>
<p>please share the methods of doing this in python</p>
</div>
<div class="post-text" itemprop="text">
<p>If you just want to split on <code>elements</code>, then use this.</p>
<pre><code>&gt;&gt;&gt; path = 'C:/Users/arul/Desktop/jobs/project_folder/shots/shot_folder/elements/MexicoCity-Part1/'
&gt;&gt;&gt; path.split('elements')[0]
'C:/Users/arul/Desktop/jobs/project_folder/shots/shot_folder/'
</code></pre>
<p>One drawback of this approach is that it'll fail if you encounter the word <code>elements</code> in your path multiple times. In that case, you can do something like:</p>
<pre><code>&gt;&gt;&gt; '/'.join(path.split('/')[:-3]) + '/'
'C:/Users/arul/Desktop/jobs/project_folder/shots/shot_folder/'
</code></pre>
<p>Assuming you know the depth of the path you need.</p>
</div>
<div class="post-text" itemprop="text">
<p>you could use the <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code></a> module:</p>
<pre><code>from pathlib import Path

pth = Path('C:/Users/arul/Desktop/jobs/project_folder/shots/shot_folder/')

print(pth)
print(pth.parent)
print(pth.parent.parent)  # C:/Users/arul/Desktop/jobs/project_folder
</code></pre>
<p>the module has a lot more of very convenient methods for handling paths: your problem could also be solved using <a href="https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.parts" rel="nofollow noreferrer"><code>parts</code></a> like this:</p>
<pre><code>print('/'.join(pth.parts[:-2]))
</code></pre>
<p>in python 2.7 you could build your own <code>parts</code> function using <a href="https://docs.python.org/2/library/os.path.html" rel="nofollow noreferrer"><code>os.path</code></a>:</p>
<pre><code>from os import path

pth = 'C:/Users/arul/Desktop/jobs/project_folder/shots/shot_folder/'

def parts(pth):
    ret = []
    head, tail = path.split(pth)
    if tail != '':
        ret.append(tail)
    while head != '':
        head, tail = path.split(head)
        ret.append(tail)
    return ret[::-1]

ret = path.join(*parts(pth)[:-2])
print(ret)  # C:/Users/arul/Desktop/jobs/project_folder
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do something like this:</p>
<pre><code>folder = 'C:/Users/arul/Desktop/jobs/project_folder/shots/shot_folder/elements/MexicoCity-Part1/'

folder.rsplit('/', 3)[0]
</code></pre>
<p><code>str.rsplit()</code> basically returns a list of the words in the string, separated by the delimiter string (starting from right).</p>
<p>Please have a look at <a href="http://python-reference.readthedocs.io/en/latest/docs/str/rsplit.html" rel="nofollow noreferrer">documentation</a> for more details on this method.</p>
</div>
<span class="comment-copy">Have you tried anything? <a href="https://stackoverflow.com/help/how-to-ask">Stack Overflow</a> helps you with asking questions, so that the community is glad to help you</span>
<span class="comment-copy">@arul Cheers. Consider marking this answer if it helped, and close the question. :)</span>
<span class="comment-copy">Take a look at my solution @arul</span>
<span class="comment-copy">This answer shouldn't be accepted . @Coldspeed what if the path has a different file seperator? Can be \  or  /</span>
<span class="comment-copy">Okay, you have a valid point. But can you please refrain from browbeating here? This is not a competition to see who can get the most upvotes. In the last 10 minutes you have made over 3 comments explaining why my answer is trash. Alright, you are contributing to a collective knowledge base, not racing at the derby. Please behave accordingly. Thank you.</span>
<span class="comment-copy">@s_vishnu Also I should mention hiro protagonist's answer is the best one here.</span>
<span class="comment-copy">thank you hiro, but want this to be done in python 2.7.13 .</span>
<span class="comment-copy">ohh ok thank you hiro.</span>
<span class="comment-copy">thank you i will try this out</span>
<span class="comment-copy">@arul You're welcome.</span>
