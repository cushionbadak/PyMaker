<div class="post-text" itemprop="text">
<p>I would like to use a decorator for validating data in Python.
Normally in Python one uses a decorator on a function, but I would like to use a decorator on a variable, similar to Java:</p>
<pre class="lang-java prettyprint-override"><code>public class Main {
   public static void main(String[] args) {
      @BoldWrapper
      @ItalicWrapper
      String str = "Hello World";
      // Display &lt;b&gt;&lt;i&gt;Hello World&lt;/i&gt;&lt;/b&gt;
   }
}

public @interface BoldWrapper {
    public void wrap() default "&lt;b&gt;" + str + "&lt;/b&gt;";
}

public @interface ItalicWrapper {
    public void wrap() default "&lt;i&gt;" + str + "&lt;/i&gt;";
}
</code></pre>
<p>So in Python I would have something like:</p>
<pre><code>if __name__ == '__main__':
    @BoldWrapper
    @ItalicWrapper
    str = "Hello World";
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>only classes and functions/methods definitions may be decorated (functions/methods since <strong>Python 2.4</strong>, classes since <strong>Python 2.6</strong>):</p>
<p>from docs about <a href="https://docs.python.org/3/reference/compound_stmts.html#function" rel="nofollow noreferrer">function definition</a></p>
<blockquote>
<p>A function definition may be wrapped by one or more decorator expressions. Decorator expressions are evaluated when the function is defined, in the scope that contains the function definition.</p>
</blockquote>
<p>and <a href="https://docs.python.org/3/reference/compound_stmts.html#class-definitions" rel="nofollow noreferrer">class definition</a></p>
<blockquote>
<p>Classes can also be decorated: just like when decorating functions</p>
</blockquote>
<p>so</p>
<pre><code>@BoldWrapper
@ItalicWrapper
text = "Hello World"
</code></pre>
<p>will cause <a href="https://docs.python.org/3/library/exceptions.html#SyntaxError" rel="nofollow noreferrer"><code>SynaxError</code></a>.</p>
<p>There is no need for this feature, because we can just write function calls</p>
<pre><code>text = BoldWrapper(ItalicWrapper("Hello World"))
</code></pre>
<h2>P. S.</h2>
<ul>
<li>do not use names of built-ins like <code>str</code> for your objects,</li>
<li>semicolons are redundant in <strong>Python</strong></li>
</ul>
<h1>Further reading</h1>
<ul>
<li>functions and methods decorators: <a href="https://www.python.org/dev/peps/pep-0318/" rel="nofollow noreferrer">PEP-318</a>,</li>
<li>class decorators: <a href="https://www.python.org/dev/peps/pep-3129/" rel="nofollow noreferrer">PEP-3129</a>,</li>
<li><a href="https://wiki.python.org/moin/PythonDecorators" rel="nofollow noreferrer"><strong>PythonWiki</strong> page</a></li>
</ul>
</div>
<span class="comment-copy">You can only decorate functions/methods and classes</span>
<span class="comment-copy">You can decorate a function and have it return that string.</span>
<span class="comment-copy">@fechnert - you can decorate getters/setters which would, from the outside, appear as properties.</span>
<span class="comment-copy">@zwer - which are functions in the first place ;) but yeah, thats also a possible way</span>
<span class="comment-copy">Java annotations != Python decorators... see <a href="https://www.reddit.com/r/learnprogramming/comments/3j5aqw/java_annotations_what_are_they/" rel="nofollow noreferrer">this discussion</a></span>
<span class="comment-copy">But use <code>lower_case</code> because they are functions and not classes</span>
<span class="comment-copy">@fechnert: they may be callable classes, we don't know what is OP's case</span>
<span class="comment-copy">Hi, thank you for the answer, but I would really like to know whether in Python is possible to have a decorator on a variable, not alternatives.</span>
<span class="comment-copy">@Petronella: i answered that it is impossible because there is no need for that</span>
<span class="comment-copy">@Petronella no, it is a syntax error. The decorator syntax is syntactic sugar for <code>f = deco(f)</code> after a function definition. It merely exists for the added benefit of readability - one often wants to see the decorators before reading the function body. Decorators in Python are not the same thing as annotations in Java.</span>
