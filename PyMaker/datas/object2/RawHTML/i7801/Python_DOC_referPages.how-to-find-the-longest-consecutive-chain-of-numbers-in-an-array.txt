<div class="post-text" itemprop="text">
<p>For example we have <code>[0, 1, 3, 5, 7, 8, 9, 10, 12, 13]</code> . </p>
<p>The result must be <code>7, 8, 9, 10</code> because they are adjacent to each other, index wise and are consecutive integers, and also this chain is longer than <code>0, 1</code>.</p>
<p>English is not my first language, excuse me if the writing is a bit obscure. </p>
</div>
<div class="post-text" itemprop="text">
<p>Group the items into subsequences using <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> based on  constant differences from an increasing count (provided by an <a href="https://docs.python.org/3/library/itertools.html#itertools.count" rel="nofollow noreferrer"><code>itertools.count</code></a> object), and then take the longest subsequence using the built-in <code>max</code> on <em>key</em> parameter <code>len</code>:</p>
<pre><code>from itertools import groupby, count

lst = [0, 1, 3, 5, 7, 8, 9, 10, 12, 13]
c = count()
val = max((list(g) for _, g in groupby(lst, lambda x: x-next(c))), key=len)
print(val)
# [7, 8, 9, 10]
</code></pre>
<p>You may include the group key in the result (suppressed as <code>_</code>) to further understand how this works.</p>
</div>
<div class="post-text" itemprop="text">
<p>Alternative solution using <a href="http://www.numpy.org/" rel="nofollow noreferrer">numpy</a> module:</p>
<pre><code>import numpy as np

nums = np.array([0, 1, 3, 5, 7, 8, 9, 10, 12, 13])
longest_seq = max(np.split(nums, np.where(np.diff(nums) != 1)[0]+1), key=len).tolist()    
print(longest_seq)
</code></pre>
<p>The output:</p>
<pre><code>[7, 8, 9, 10]
</code></pre>
<hr/>
<ul>
<li><p><code>np.where(np.diff(nums) != 1)[0]+1</code> - gets the indices of elements on which the array should be split (if difference between 2 consequtive numbers is not equal to <code>1</code>, e.g. <code>3</code> and <code>5</code>)</p></li>
<li><p><code>np.split(...)</code> - split the array into sub-arrays</p></li>
</ul>
<p><a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.diff.html#numpy.diff" rel="nofollow noreferrer">https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.diff.html#numpy.diff</a>
<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.split.html" rel="nofollow noreferrer">https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.split.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Code</strong></p>
<p>Using <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> (similar to @Moses Koledoye's answer):</p>
<pre><code>groups = [[y[1] for y in g] for k, g in itertools.groupby(enumerate(iterable), key=lambda x: x[0]-x[1])]
groups
# [[0, 1], [3], [5], [7, 8, 9, 10], [12, 13]]

max(groups, key=len)
# [7, 8, 9, 10]
</code></pre>
<p><em>Alternative</em></p>
<p>Consider the third-party tool <a href="https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.consecutive_groups" rel="nofollow noreferrer"><code>more_itertools.consecutive_groups</code></a>:</p>
<pre><code>import more_itertools as mit


iterable = [0, 1, 3, 5, 7, 8, 9, 10, 12, 13]
max((list(g) for g in mit.consecutive_groups(iterable)), key=len)
# [7, 8, 9, 10]
</code></pre>
</div>
<span class="comment-copy">Some kind of code golf or homework here</span>
<span class="comment-copy">It's not homework, I'm trying to solve a problem using this method but can't seem to figure it out</span>
<span class="comment-copy">Using for loop: if n &lt; n+1, but I need to include bigger by one, because this way all the successive numbers are &lt;</span>
<span class="comment-copy">This is seriously awesome.</span>
