<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/2/tutorial/introduction.html" rel="noreferrer">python.org tutorial</a></p>
<blockquote>
<p>Slice indices have useful defaults; an omitted first index defaults to zero, an omitted second index defaults to the size of the string being sliced.</p>
</blockquote>
<pre><code>&gt;&gt;&gt; a = "hello"
&gt;&gt;&gt; print(a[::-1])
olleh
</code></pre>
<p>As the tutorial says <code>a[::-1]</code> should equals to <code>a[0:5:-1]</code></p>
<p>but <code>a[0:5:-1]</code> is empty as follows:</p>
<pre><code>&gt;&gt;&gt; print(len(a[0:5:-1]))
0
</code></pre>
<p>The question is not a duplicate of <a href="https://stackoverflow.com/questions/509211/explain-slice-notation">explain-slice-notation</a>. That question is about the general use of slicing in python.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think the docs are perhaps a little misleading on this, but the optional arguments of slicing if omitted are the same as using <code>None</code>:</p>
<pre><code>&gt;&gt;&gt; a = "hello"
&gt;&gt;&gt; a[::-1]
'olleh'
&gt;&gt;&gt; a[None:None:-1]
'olleh'
</code></pre>
<p>You can see that these 2 above slices are identical from the CPython bytecode:</p>
<pre><code>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis('a[::-1]') # or dis.dis('a[None:None:-1]')
  1           0 LOAD_NAME                0 (a)
              3 LOAD_CONST               0 (None)
              6 LOAD_CONST               0 (None)
              9 LOAD_CONST               2 (-1)
             12 BUILD_SLICE              3
             15 BINARY_SUBSCR
             16 RETURN_VALUE
</code></pre>
<p>For a negative <code>step</code>, the substituted values for <code>None</code> are <code>len(a) - 1</code> for the <code>start</code> and <code>-len(a) - 1</code> for the <code>end</code>:</p>
<pre><code>&gt;&gt;&gt; a[len(a)-1:-len(a)-1:-1]
'olleh'
&gt;&gt;&gt; a[4:-6:-1]
'olleh'
&gt;&gt;&gt; a[-1:-6:-1]
'olleh'
</code></pre>
<p>This may help you visualize it:</p>
<pre><code>    h  e  l  l  o   
    0  1  2  3  4  5
-6 -5 -4 -3 -2 -1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are confused with the behavior of the stepping. To get the same result, what you can do is:</p>
<pre><code>a[0:5][::-1]
'olleh'
</code></pre>
<p>Indeed, stepping wants to 'circle' around backwards in your case, but you are limiting it's movement by calling <code>a[0:5:-1]</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>All it does is <a href="https://docs.python.org/3/library/functions.html#slice" rel="nofollow noreferrer">slice</a>. You pick. start stop and step so basically you're saying it should start at the beginning until the beginning but going backwards (-1).</p>
<p>If you do it with -2 it will skip letters:</p>
<pre><code>&gt;&gt;&gt; a[::-2]
'olh'
</code></pre>
<p>When doing <code>[0:5:-1]</code> your'e starting at the first letter and going back directly to 5 and thus it will stop. only if you try <code>[-1::-1]</code> will it correctly be able to go to the beginning by doing steps of negative 1.</p>
<p><strong>Edit to answer comments</strong></p>
<p>As pointed out the <a href="https://docs.python.org/2/tutorial/introduction.html" rel="nofollow noreferrer">documentation</a> says</p>
<blockquote>
<p>an omitted second index defaults to the size of the string being
  sliced. </p>
</blockquote>
<p>Lets assume we have <code>str</code> with <code>len(str) = 5</code>. When you slice the string and omit, leave out, the second number it defaults to the length of the string being sliced, in this case - 5.
i.e <code>str[1:] == str[1:5]</code>, <code>str[2:] == str[2:5]</code>. The sentence refers to the length of the original object and not the newly sliced object.</p>
<p>Also, <a href="https://stackoverflow.com/a/509295/2307698">this answer</a> is great</p>
</div>
<div class="post-text" itemprop="text">
<p><code>a[0:5:-1]</code> does not make much sense, since when you use this notation the indices mean: <code>a[start:end:step]</code>. When you use a negative step your end value needs to be at an "earlier" position than your start value.</p>
</div>
<div class="post-text" itemprop="text">
<p>You'll notice that the third slice argument, the <code>step</code>, is not presented in the part of the tutorial you quoted. That particular snippet assumes a positive step.</p>
<p>When you add in the possibility of a negative step, the behavior is actually pretty intuitive. An empty <code>start</code> parameter refers to whichever end of the sequence one would start at to step through the whole sequence in the direction indicated by the <code>step</code> value. In other words it refers to the lowest index (to count up) if you have a positive step, and the highest index (to count down) if you have a negative step. Likewise, an empty <code>end</code> parameter refers to whichever end of the sequence one would end up at after stepping through in the appropriate direction.</p>
</div>
<div class="post-text" itemprop="text">
<p>The docs simply aren't correct about the default values as you've pointed out. However, they're consistent other than that minor error. You can view the docs I am referring to here: <a href="https://docs.python.org/3/library/stdtypes.html#common-sequence-operations" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#common-sequence-operations</a></p>
<h2>Note that the behavior is definitionaly correct according to the docs:</h2>
<blockquote>
<p>The slice of s from i to j with step k is defined as the sequence of
  items with index x = i + n*k such that 0 &lt;= n &lt; (j-i)/k. In other
  words, the indices are i, i+k, i+2*k, i+3*k and so on, stopping when j
  is reached (but never including j).</p>
</blockquote>
<p>When you do:</p>
<pre><code>&gt;&gt;&gt; a = "hello"
&gt;&gt;&gt; y = a[0:5:-1]
</code></pre>
<p>we have that <code>i == 0</code>, <code>j == 5</code>, and <code>k == -1</code>. So we are grabbing items at index <code>x = i + n*k</code> for <code>n</code> starting at <code>0</code> and going up to <code>(j-i)/k</code>. However, observe that <code>(j-i)/k == (5-0)/-1 == -5</code>. There are no <code>n</code> such that <code>0 &lt;= n &lt; -5</code>, so you get the empty string:</p>
<pre><code>&gt;&gt;&gt; y
''
</code></pre>
<h2>Do <code>a[start:stop][::step]</code> when in doubt (it's almost always what we want)</h2>
<p>It's almost always the case that when you pass a negative step to something like <code>x[start:stop:step]</code>, what you <em>want</em> to happen is for the sub selection to happen first, and then just go backwards by <code>step</code> (i.e. we usually want <code>x[start:stop][::step]</code>.</p>
<p>Futhermore, to add to the confusion, it happens to be the case that </p>
<pre><code>x[start:stop:step] == x[start:stop][::step] 
</code></pre>
<p>if <code>step &gt; 0</code>. For example:</p>
<pre><code>&gt;&gt;&gt; x = list(range(10))
&gt;&gt;&gt; x
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; x[2:6:2]
[2, 4]
&gt;&gt;&gt; x[2:6][::2]
[2, 4]
&gt;&gt;&gt; x[1:10][::3]
[1, 4, 7]
&gt;&gt;&gt; x[1:10:3]
[1, 4, 7]
</code></pre>
<p>Unfortunately, this doesn't hold when <code>step &lt; 0</code>, even though it's tempting to think that it should.</p>
<p>After being burned by this a couple times, I realized it's just safer to always do the step clause <em>after</em> you perform the <code>start:stop</code> slice. So I <em>almost always</em> start with <code>y = x[start:stop][::step]</code>, at least when prototyping or creating a new module where correctness/readability is the primiary concern. This is less performant than doing a single slice, but if performance is an issue, then you can do the less readable:</p>
<pre><code>y = x[start:stop:step] if step &gt; 0 else x[stop:start:step]
</code></pre>
<p>HTH.</p>
</div>
<span class="comment-copy">@Jean-FrançoisFabre  &gt;&gt;&gt; print(a[5:0:-1]) olle</span>
<span class="comment-copy">the docs don't mention the case of reverse iteration, yes. Good point.</span>
<span class="comment-copy">How about <code>a[5::-1]</code></span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/509211/explain-slice-notation">Explain slice notation</a></span>
<span class="comment-copy">@juanpa.arrivillaga with great power comes great responsibility : you just found out that python gold badge can close/reopen singlehandedly :)</span>
<span class="comment-copy">Can you show some referece for <code>the substituted values for None are len(a) - 1 for the start and -len(a) - 1 for the end</code></span>
<span class="comment-copy">@Alex "When k is negative, i and j are reduced to len(s) - 1 if they are greater. If i or j are omitted or None, they become “end” values (which end depends on the sign of k)" see point 5. <a href="https://docs.python.org/3/library/stdtypes.html#common-sequence-operations" rel="nofollow noreferrer">docs.python.org/3/library/…</a></span>
<span class="comment-copy">@Alex Also see this relevant SO question: <a href="https://stackoverflow.com/questions/12521798/what-are-the-default-slice-indices-in-python-really" title="what are the default slice indices in python really">stackoverflow.com/questions/12521798/…</a></span>
<span class="comment-copy">I disagree with this explanation, <code>hello'[0:5:1]</code> will return <code>hello</code>, so why does -1 evaluate to <code>''</code>?</span>
<span class="comment-copy">because stepping doesn't slice at all, just steps.</span>
<span class="comment-copy">Not sure what you mean, I personally think this is a language inconsistency.</span>
<span class="comment-copy">I'm sure OP knows what <code>a[::-1]</code> does.</span>
<span class="comment-copy">The tutorial says "the omitted second index of a[::-1]  should be the size of string", so a[::-1] is equal to  a[:5:-1]. Why do you say " it should start at the beginning until the beginning"? Do I misunderstand?</span>
<span class="comment-copy">@Alex Can you show me the exact location?</span>
<span class="comment-copy">@IsaacDj tutorial link  <a href="https://docs.python.org/2/tutorial/introduction.html" rel="nofollow noreferrer">docs.python.org/2/tutorial/introduction.html</a>    As follows <code>Slice indices have useful defaults; an omitted first index defaults to zero, an omitted second index defaults to the size of the string being sliced.</code></span>
<span class="comment-copy">@Alex updated the answer</span>
