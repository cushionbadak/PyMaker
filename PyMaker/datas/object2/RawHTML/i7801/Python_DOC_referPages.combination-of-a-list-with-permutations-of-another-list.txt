<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/25362355/cartesian-product-giving-a-dictionary">Cartesian product giving a dictionary</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
<li>
<a dir="ltr" href="/questions/942543/operation-on-every-pair-of-element-in-a-list">Operation on every pair of element in a list</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I have two lists:</p>
<pre><code>object = ['square','circle','triangle']
description = ['red','green']
</code></pre>
<p>I want as output a list of dictionaries:</p>
<pre><code>{'square': 'red', 'circle': 'red', 'triangle': 'red'}
{'square': 'red', 'circle': 'red', 'triangle': 'green'}
{'square': 'green', 'circle': 'red', 'triangle': 'green'}
</code></pre>
<p>etc.</p>
<p>So the objects don't repeat, but the descriptions may. Each dictionary has as its keys the original list of objects.</p>
<p>I'm not sure of the name of the algorithm I want, so I'm having trouble finding the correct one. (I've looked at <a href="https://stackoverflow.com/questions/1953194/permutations-of-two-lists-in-python">permutations of two lists in python</a>, but that's seeking a different result. <a href="https://stackoverflow.com/questions/14740866/permutations-of-two-lists">Permutations of two lists</a> is the same question, but using OCAML.)</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools.product</code></a> to generate all possible combinations of your <code>descriptions</code>. </p>
<p>Then create a dictionary with the <code>objects</code> as keys and the "combination" as values:</p>
<pre><code>&gt;&gt;&gt; import itertools

&gt;&gt;&gt; objects = ['square','circle','triangle']
&gt;&gt;&gt; description = ['red','green']

&gt;&gt;&gt; [dict(zip(objects, comb)) for comb in itertools.product(description, repeat=len(objects))]
[{'circle': 'red', 'square': 'red', 'triangle': 'red'},
 {'circle': 'red', 'square': 'red', 'triangle': 'green'},
 {'circle': 'green', 'square': 'red', 'triangle': 'red'},
 {'circle': 'green', 'square': 'red', 'triangle': 'green'},
 {'circle': 'red', 'square': 'green', 'triangle': 'red'},
 {'circle': 'red', 'square': 'green', 'triangle': 'green'},
 {'circle': 'green', 'square': 'green', 'triangle': 'red'},
 {'circle': 'green', 'square': 'green', 'triangle': 'green'}]
</code></pre>
</div>
<span class="comment-copy">This question is a duplicate of "Cartesian product giving a dictionary", but not of "Operation on every pair of element in a list".</span>
<span class="comment-copy">BTW, you shouldn't use <code>object</code> as a variable name because that shadows the built-in <code>object</code> type. It won't hurt anything here, but it looks weird in a decent syntax highlighter. And it will cause weird error messages if the subsequent code uses Python 2 new-style class definitions: <code>class MyClass(object):</code>.</span>
