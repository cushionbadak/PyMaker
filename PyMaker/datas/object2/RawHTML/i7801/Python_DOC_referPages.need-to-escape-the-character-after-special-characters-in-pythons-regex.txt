<div class="post-text" itemprop="text">
<p>I have the following python code:</p>
<pre><code>#!/usr/bin/python
# -*- coding: utf-8 -*-

import re
line = 'div&gt;&lt;div class="fieldRow jr_name"&gt;&lt;div class="fieldLabel"&gt;name&lt;'
regex0 = re.compile('(.+?)\v class="fieldLabel"&gt;name.+?', re.VERBOSE | re.UNICODE)
regex1 = re.compile('(.+?)v class="fieldLabel"&gt;name.+?', re.VERBOSE | re.UNICODE)
regex2 = re.compile('(.+?) class="fieldLabel"&gt;name.+?', re.VERBOSE | re.UNICODE)

m0 = regex0.match(line)
m1 = regex1.match(line)
m2 = regex2.match(line)

if m0:
    print 'regex0 is good'
else:
    print 'regex0 is no good'

if m1:
    print 'regex1 is good'
else:
    print 'regex1 is no good'

if m2:
    print 'regex2 is good'
else:
    print 'regex2 is no good'
</code></pre>
<p>The output is</p>
<pre><code>regex0 is good
regex1 is no good
regex2 is good
</code></pre>
<p>I don't quite understand why I need to escape the character 'v' after "(.+?)" in regex0.  If I don't escape, which will become regex1, then the matching will fail.  However, for space right after "(.+?)" in regex3, I don't have to escape.</p>
<p>Any idea?</p>
<p>Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>So, there are some issues with your approach
The ones that contribute to your specific complaint are:</p>
<ul>
<li>You do not mark te regexp string as raw (<code>r'</code> prefix) - that makes the Python compiler change some "\" prefixed characters inside the string before they even reach the re.match call.</li>
<li>"\v" happens to be one such character - a vertical tab that is replaced by "\0x0b"</li>
<li>You use the  "re.VERBOSE" flag - that simply tells the regexp engine to ignore any whitesapce character. "\v" being a vertical tab is one character in this class and is ignored. </li>
</ul>
<p>So, there is your match for regex0: the letter "v" os never seem as such.</p>
<p>Now, for the possible fixes on you approach, in the order that you should be trying to do them:</p>
<p>1) Don't use regular expressions to parse HTML. Really. There are a lot of packages that can do a good job on parsing HTML, and in missing those you can use stdlib's own <code>HTMLParser</code> (<code>html.parser</code> in Python3);</p>
<p>2) If possible, use Python 3 instead of Python 2 - you will be bitten on the first non-ASCII character inside yourt HTML body if you go on with the naive approach of treating Python2 strings as "real life" text. Python 3 automatic encoding handling (and explicit settings allowed to you when it is not automatic) .</p>
<p>Since you are probably not changing anyway, so try to use <code>regex.findall</code> instead of <code>regex.match</code> - this returns a list of matching strings and could retreive the attributes you are looking at once, without searching from the beggining of the file, or depending on line-breaks inside the HTML.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a special symbol in Python regex \v, about which you can read here:
<a href="https://docs.python.org/2/library/re.html" rel="nofollow noreferrer">https://docs.python.org/2/library/re.html</a></p>
<p>Python regex usually are written in <code>r'your regex'</code> block, where "r" means raw string. (<a href="https://docs.python.org/3/reference/lexical_analysis.html" rel="nofollow noreferrer">https://docs.python.org/3/reference/lexical_analysis.html</a>)</p>
<p>In your code all special characters should be escaped to be understood as normal characters. E.g. if you write s - this is space, \s is just "s". To make it work in an opposite way use raw strings.
The line below is the solution you need, I believe.</p>
<pre><code>regex1 = re.compile(r'(.+?)v class="fieldLabel"&gt;name.+?', re.VERBOSE | re.UNICODE)
</code></pre>
</div>
<span class="comment-copy">Strange enough.  Python 2.7.5 says it matches.</span>
<span class="comment-copy">my guess is: <code>\v</code> being interpreted as a space, it matches. Try <code>\t</code> or <code>\s</code> it also works. But I'm puzzled....</span>
<span class="comment-copy">I am puzzled as well. Why <code>\v</code> is treated differently?!</span>
<span class="comment-copy">Thanks @jsbueno Yes, I did read others' posts about using some HTML parsers instead.  However, I just try to avoid dealing with malformed HTML content later.  re.VERBOSE is the issue.  Thanks!</span>
<span class="comment-copy">Thanks for your suggestion.  I just prefixed all regular expression with 'r' as you suggested.  It does affect the result of regex0.match(); however, regex1.match() still returns None.</span>
<span class="comment-copy">\s in regex is "when the UNICODE flag is not specified, it matches any whitespace character" according to the python documentation that you've linked</span>
