<div class="post-text" itemprop="text">
<p>Assuming:</p>
<pre><code>def myfunc(x):
    my_list  = []
    list.append(x)
</code></pre>
<p>is there a keyword to stop a variable(my_list) from being reassigned?
Let's suppose that NA is the keyword:</p>
<pre><code>def myfunc(x):
    NA listv  = []
    list.append(x)
</code></pre>
<p>in such way that the line will be read and not reassigned but the variable still active appending new values for every function call. I know about the GLOBAL variable, but I just want to know is the keyword exists!                    <br/></p>
</div>
<div class="post-text" itemprop="text">
<p>You can declare the variable globally as in C/C++ and use global keyword in python to refer them as variable in global data section.
Some of references about them:</p>
<ul>
<li><p><a href="https://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python" rel="nofollow noreferrer">https://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python</a></p></li>
<li><p><a href="http://www.geeksforgeeks.org/global-local-variables-python/" rel="nofollow noreferrer">http://www.geeksforgeeks.org/global-local-variables-python/</a></p></li>
<li><p><a href="https://stackoverflow.com/questions/4693120/use-of-global-keyword-in-python">Use of "global" keyword in Python</a></p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>I guess you are looking for something equivalent to the <code>final</code> keyword in Java. Simply put, there is no such keyword. The Python attitude is "if you don't want this modified at all, just don't modify it, I wont stop you though".</p>
<p>However you can mimic something like it by some tweaks in your class.</p>
<pre><code>class MyFinalVariablesClass:
    def __setattr__(self, attr, value):
        # if it already has this attribute, complain !
        if hasattr(self, attr):
            raise Exception("Attempting to alter read-only value")

        self.__dict__[attr] = value
</code></pre>
<p>Or in the case of your variable (haven't tested it)</p>
<pre><code>class WriteOnceReadWhenever:
    def __setattr__(self, attr, value):
        if attr == 'my_list' and hasattr(self, attr):
            raise Exception("Attempting to alter read-only value")
        self.__dict__[attr] = value
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I believe the behaviour you're seeking is almost exactly how mutable default arguments work in python: instantiated only during function definition.</p>
<pre><code>def myfunc(x,*args,my_list=[]):
    my_list.append(x)
</code></pre>
<p>The <code>*args</code> will protect the list from being overwritten by an erroneously passed second argument.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is not a keyword to do this. There are workarounds (such as the mutable default argument), but there are better ways to achieve the same thing.</p>
<p>For exaple you could set the variable as a function attribute:</p>
<pre><code>def my_func():
    my_func.my_list.append(1)

my_func.my_list = []
</code></pre>
<p>However this is just a hacky way of doing this:</p>
<pre><code>class MyFuncFactory:
    def __init__(self):
        self.my_list = []
    def __call__(self):
        self.my_list.append(1)
</code></pre>
<p>Hence you are probably better of writing a class instead of a function in this case.</p>
<hr/>
<p>Sometimes you could use a <code>nonlocal</code> variable. For example to define a <code>key</code> function which requires state I usually write something like:</p>
<pre><code>def my_key_builder():
    some_state = 0

    def key_function(arg):
        nonlocal some_state
        some_state += 1
        return some_state % 2
    return key_function

for x in sorted(a_list, key=my_key_builder()):
    print(x)
</code></pre>
<p>Using a <code>nonlocal</code> instead of a <code>global</code> (or mutable default argument) allows you to use the key function multiple times. However if the function becomes slightly bigger using a class is probably the best option.</p>
</div>
<span class="comment-copy">If you want to <i>append</i> a new value, <code>append</code> it, and if you want a variable that maintains its value across function invocations, don't make it local to that function.</span>
<span class="comment-copy">You're not appending to the list here</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/4693120/use-of-global-keyword-in-python">Use of "global" keyword in Python</a></span>
<span class="comment-copy">@cricket_007: While that is one solution to the problem, it is not the only one. I'd say closing this as a duplicate of that is restrictive.</span>
<span class="comment-copy">@zondo Sure, but it's the keyword that is probably being asked about</span>
