<div class="post-text" itemprop="text">
<p>Given a list of file paths:</p>
<pre><code>my_file_list = ['a.txt','b.txt','c.txt','d.txt']
</code></pre>
<p>I want to compare each file with the rest in the list and remove the duplicate file's path.</p>
<p>So, if b.txt is the same as c.txt, then my list should be</p>
<pre><code>my_file_list = ['a.txt','b.txt','d.txt']
</code></pre>
<p>The only additional challenge with this scenario is that all the 4 files are in a zip file, let's name it files.zip.</p>
<p>So is it better to navigate within the zip file and access each of these files and do filecmp or just extract the text from the files and do a text comparison and determine and remove the duplicates?</p>
<p>What is the most efficient way of doing this in Python 3?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>#!/usr/bin/python3
#!Py 3.6.1

import os
import filecmp

location = '.'
my_file_list = []

for filename in os.listdir(location):
    if filename.endswith('.txt'):
        my_file_list.append(filename)

print(my_file_list)
# ['b.txt', 'a.txt', 'c.txt', 'd.txt']

for i in range(0,len(my_file_list)-2):
    for j in range(i,len(my_file_list)-1):
        if filecmp.cmp(my_file_list[i],my_file_list[j],shallow=True):
            my_file_list.pop(j)

print(my_file_list)
# ['b.txt', 'a.txt', 'd.txt']
</code></pre>
<p>an alternative code:</p>
<pre><code>#!/usr/bin/python3
#!Py 3.6.1

import os
import filecmp

location = '.'
my_file_list = []

# Retrieve the files from the especified location
for filename in os.listdir(location):
    if filename.endswith('.txt'):
        my_file_list.append(filename)

# Sort the files 
my_file_list.sort()

print(my_file_list)
# ['a.txt', 'b.txt', 'c.txt', 'd.txt', 'e.txt', 'f.txt']
#  b.txt and c.txt are duplicated and also
#  d.txt and e.txt are equals

# remove from my_file_list duplicated files
i=0
while i &lt; len(my_file_list):
    for j in range(0,len(my_file_list)):
        if (filecmp.cmp(my_file_list[i],my_file_list[j],shallow=True) and i!=j):
            my_file_list.pop(j)
            break
    i=i+1

print(my_file_list)
# Results are only the first unique files
# ['a.txt', 'b.txt', 'd.txt', 'f.txt']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The usage of <strong>Set</strong> would be appropriate.
<a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/datastructures.html#sets</a></p>
</div>
<span class="comment-copy">@EugenConstantinDinca I would add, keep the <a href="https://wiki.python.org/moin/TimeComplexity" rel="nofollow noreferrer">following in mind</a>.</span>
<span class="comment-copy">Actually my original comment was quite wrong...</span>
<span class="comment-copy">You might want to use <code>itertools.combinations</code> instead of those double for loops (not faster, just more readable) and add a bit of explanation.</span>
<span class="comment-copy">Also, I think this would result in an <code>IndexError</code> when you <code>pop(j)</code> but the loop continues. Instead, how about comparing the files to those in an (initially empty) unique files list and then adding them to that list if they are not a dupe of any in that list?</span>
<span class="comment-copy">For most of the cases <code>shallow=True</code> will work, but keep in mind, that this isn't actually checking the content but only the file stats Meta. On some operating system this might be very sparse and therefore prone to errors.</span>
<span class="comment-copy">Thank you. Both are good solutions. However I just updated my question with a new challenge. All the files are within a zip file, called files.zip. Now how do we go about this?</span>
<span class="comment-copy">But what if he needs the filenames to stay in order?</span>
<span class="comment-copy">@ChristianDean then this should do: <code>my_set = set(my_file_list); my_file_list = [ x for x in my_file_list if x in my_set ]</code></span>
<span class="comment-copy">Set does not really help here. OP does not want to filter duplicate file names, but duplicate files going by different names. Or are you suggesting storing the files' content's in the set?</span>
<span class="comment-copy">Thank you for the solution. However I just updated my question with a new challenge. All the files are within a zip file, called files.zip. Now how do we go about this?</span>
