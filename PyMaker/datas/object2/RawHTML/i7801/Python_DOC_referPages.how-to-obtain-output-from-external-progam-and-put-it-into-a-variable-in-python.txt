<div class="post-text" itemprop="text">
<p>I am still fairly new to the python world and know this should be an easy question to answer. I have this section of a script in python that calls a script in Perl. This Perl script is a SOAP service that fetches data from a web page. Everything works great and outputs what I want, but after a bit of trial and error I am confused to how I can capture the data with a python variable and not just output to the screen like it does now. </p>
<p>Any pointers appreciated!</p>
<p>Thank you,</p>
<p>Pablo</p>
<pre><code># SOAP SERVICE
# Fetch the perl script that will request the users email.
# This service will return a name, email, and certificate. 

var = "soap.pl"
pipe = subprocess.Popen(["perl", "./soap.pl", var], stdin = subprocess.PIPE)
pipe.stdin.write(var)
print "\n"
pipe.stdin.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I am not sure what your code aims to do (with <code>var</code> in particular), but here are the basics.</p>
<p>There is the <a href="https://docs.python.org/2/library/subprocess.html#subprocess.check_output" rel="nofollow noreferrer">subprocess.check_output()</a> function for this</p>
<pre><code>import subprocess
out = subprocess.check_output(['ls', '-l'])
print out
</code></pre>
<p>If your Python is before 2.7 use <a href="https://docs.python.org/2/library/subprocess.html#popen-constructor" rel="nofollow noreferrer">Popen</a> with the <a href="https://docs.python.org/2/library/subprocess.html#popen-objects" rel="nofollow noreferrer">communicate()</a> method</p>
<pre><code>import subprocess
proc = subprocess.Popen(['ls', '-l'], stdout=subprocess.PIPE)
out, err = proc.communicate()
print out
</code></pre>
<p>You can instead iterate <code>proc.stdout</code> but it appears that you want all output in one variable.</p>
<p>In both cases you provide the program's arguments in the list. </p>
<p>Or add <code>stdin</code> if needed</p>
<pre><code>proc = subprocess.Popen(['perl', 'script.pl', 'arg'],\
    stdin  = subprocess.PIPE,\
    stdout = subprocess.PIPE)
</code></pre>
<p>The purpose of <code>stdin = subprocess.PIPE</code> is to be able to feed the <code>STDIN</code> of the process that is started, as it runs. Then you would do <code>proc.stdin.write(string)</code> and this  writes to the invoked program's <code>STDIN</code>. That program generally waits on its <code>STDIN</code> and after you send a newline it gets everything written to it (since the last newline) and runs relevant processing.</p>
<p>If you simply need to pass parameters/arguments to the script at its invocation then that generally doesn't need nor involve its <code>STDIN</code>.</p>
<p>In Python 3 (since 3.5) the recommended method is <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow noreferrer">subprocess.run()</a></p>
</div>
<span class="comment-copy">What is the purpose of <code>var</code>? Do you want to send the script the content of <code>var</code> on the command line or do you want to send it to its STDIN stream?</span>
<span class="comment-copy">Var is a string of characters that is outputted by the perl script. Each variable is line by line already so I am just printing it to a txt file and then reading it in and using ".read()" and ".splitlines()" to organize it</span>
<span class="comment-copy">@PabloSmith  Ah, that explains it, thank you.  So: when you say <code>pipe.stdin.write(var)</code> then the object <code>pipe</code> that represents the process is <i>sending the contents of <code>var</code> to STDIN</i> of the script it invoked. The part <code>stdin = subprocess.PIPE</code> is needed when you want to feed some <code>STDIN</code> into a program as it runs.  It sounds like you don't need that here.</span>
<span class="comment-copy">This question really has none of Perl (other than yours nicely informing the reader of the context).  So I've removed the perl tag and the reference to perl from the title.  If you don't like this by all means please roll it back.  (Click on "edited ..." above my user name and you'll see how to "roll back" to a previous version.)</span>
<span class="comment-copy">Thank you! Much appreciated!</span>
