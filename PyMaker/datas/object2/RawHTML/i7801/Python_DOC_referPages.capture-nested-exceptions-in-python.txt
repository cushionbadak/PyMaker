<div class="post-text" itemprop="text">
<p>I have set of Python scripts which are calling functions in a nested way. For each of these functions I have a try, except statement to capture every exception and print them. I would like to send an e-mail alert containing the complete sequence of exceptions encountered during the execution. Example:</p>
<pre><code>import sys

def SendAlert(ErrorMessage):
    try:
        #send email alert with error message
        #[...]
    except:
        print(str(sys.exc_info()))
        return(sys.exc_info())

def ParentFunction():
    try:
        #call ChildFunction
        ChildResult = ChildFunction()

        #do stuff with ChildResult
        #[...]
        return ParentResult
    except:
        ErrorMessage = str(sys.exc_info())
        print(ErrorMessage)
        SendAlert(ErrorMessage)

def ChildFunction():
    try:
        #do stuff
        #[...]
        return ChildResult
    except:
        print(str(sys.exc_info()))
        return(sys.exc_info())

#main
if __name__ == '__main__':
    Result = ParentFunction()
</code></pre>
<p>The code above would behave as follow in case of error in <code>ChildFunction</code> which is the most nested function:</p>
<ul>
<li><code>ChildFunction</code> encounters an exception it will print it and return
the error message to <code>ParentFunction</code></li>
<li><code>ParentFunction</code> will fail because <code>ChildResult</code> contains an error message and not a valid value</li>
<li><code>ParentFunction</code> will trigger and exception and send its own error message in the e-mail alert</li>
</ul>
<p>In addition to the error message from <code>ParentFunction</code>, I would like the e-mail alert to contain the error message from <code>ChildFunction</code>. Note that I would like to avoid passing <code>ChildResult</code> variable to <code>SendAlert</code> function in the except statement of <code>ParentFunction</code> because in real life my program has a lot of nested functions and it would mean passing the result variable of every single function into the except statement.</p>
<p>How would you achieve this? Is there a way to access the complete sequence of errors triggered by the whole program?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>you don't need to return exceptions obtained with <code>sys.exc_info</code>: we can just re-raise it</p>
<pre><code>try:
    # do stuff
# FIXME: we should avoid catching too broad exception
except Exception as err:
    # do stuff with exception
    raise err
</code></pre>
<p>so your example may look like</p>
<pre><code>def SendAlert(ErrorMessage):
    try:
        # send email alert with error message
        # [...]
        pass
    # what kind of exceptions may occur while sending email?
    except Exception as err:
        print(err)
        raise err


def ParentFunction():
    try:
        # call ChildFunction
        ChildResult = ChildFunction()

        ParentResult = ChildResult
        # do stuff with ChildResult
        # [...]
        return ParentResult
    # FIXME: we should avoid catching too broad exception
    except Exception as err:
        ErrorMessage = str(err)
        # why do we need to print again?
        print(ErrorMessage)
        SendAlert(ErrorMessage)


def ChildFunction():
    try:
        ChildResult = 0
        # do stuff
        # [...]

        # let's raise `ZeroDivisionError`

        ChildResult /= 0

        return ChildResult
    # FIXME: we should avoid catching too broad exception
    except Exception as err:
        print(err)
        raise err


# main
if __name__ == '__main__':
    Result = ParentFunction()
</code></pre>
<h1>Further improvements</h1>
<p>For printing full error traceback we can use <a href="https://docs.python.org/3/library/logging.html#module-logging" rel="nofollow noreferrer"><code>logging</code></a> module like</p>
<pre><code>import logging

logging.basicConfig(level=logging.DEBUG)

logger = logging.getLogger(__name__)


def SendAlert(ErrorMessage):
    try:
        # send email alert with error message
        # [...]
        pass
    # what kind of exceptions may occur while sending email?
    except Exception as err:
        logger.exception('Error while sending email')
        # we're not receiving values from this function
        raise err


def ParentFunction():
    try:
        # call ChildFunction
        ChildResult = ChildFunction()

        ParentResult = ChildResult
        # do stuff with ChildResult
        # [...]
        return ParentResult
    # FIXME: we should avoid catching too broad exception
    except Exception as err:
        # this will log full error traceback
        # including `ChildFunction`
        logger.exception('Error in ParentFunction')
        ErrorMessage = str(err)
        SendAlert(ErrorMessage)


def ChildFunction():
    ChildResult = 0
    # do stuff
    # [...]

    # e. g. let's raise `ZeroDivisionError`
    ChildResult /= 0

    return ChildResult


# main
if __name__ == '__main__':
    Result = ParentFunction()
</code></pre>
<p>And it is just  the tip of the iceberg, <code>logging</code> is awesome and you definitely should use it.</p>
<h1>Further reading</h1>
<ul>
<li><a href="https://docs.python.org/3/howto/logging.html#logging-basic-tutorial" rel="nofollow noreferrer">Logging HOWTO</a>,</li>
<li><a href="https://docs.python.org/3/library/logging.handlers.html#smtphandler" rel="nofollow noreferrer">SMTPHandler</a> for sending errors on email via <a href="https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol" rel="nofollow noreferrer">SMTP</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You can, also, create a <code>custom exception</code> that can take a descriptive error message and return it.</p>
<p>Here is, a trivial example that you can modify and implement it into your code untill it fills your needs:</p>
<pre><code>class MyCustomError(Exception):
    def __init__(self, err):
        Exception.__init__(self)
        self.error = err
    def __str__(self):
        return "%r" % self.error

a = 1
try:
    if a != 0:
        raise MyCustomError("This is an Error!")
except MyCustomError as err:
    print(err)
</code></pre>
<p>Output:</p>
<pre><code>'This is an Error!'
</code></pre>
</div>
<span class="comment-copy">what about re-raising exceptions?</span>
<span class="comment-copy">What do you mean?</span>
<span class="comment-copy">Why not using <code>try ... except Exception as error</code> ?</span>
<span class="comment-copy">Thanks Chiheb, that's what Azat recommended below too. I will try.</span>
<span class="comment-copy">Thanks for the further improvements, I have just tested the script above. One question, since the script is re-raising and logging the exceptions in <code>ParentFunction</code> with the complete sequence of exceptions, maybe I don't need to log it too in <code>ChildFunction</code>? Otherwise the log would get quite spammy with a lot of redundancy and hence less readable. What do you think?</span>
<span class="comment-copy">@Alexis.Rolland: ofc you should not log same exception twice, so feel free to remove logging inside of <code>ChildFunction</code></span>
<span class="comment-copy">Ok, sorry if this sounds a stupid question but what if I litterally remove the try... except clauses from ChildFunction? Would ParentFunction still be able to do the logging? (Can't test now I'm on my phone)</span>
<span class="comment-copy">I mean do the logging of the complete sequence of exceptions of course... :)</span>
<span class="comment-copy">@Alexis.Rolland: yeap, it will work</span>
<span class="comment-copy">Thanks Chiheb, I'm kind of new to classes, could you please elaborate on what it does here and its benefit?</span>
<span class="comment-copy">With this kind of custom exceptions (classes), you can trace easly the error within your code, also, you can add other repetitive codes into your classes. For example, when there is an exception, you want to log the error into a file then continue processing the rest of your code. Or maybe, when there is an exception you want to call a method/function before executing the rest of your code. There is no limitations ... Also this is a handy trick to classify the exceptions into groups. etc...</span>
<span class="comment-copy">See <a href="https://docs.python.org/3/tutorial/errors.html#user-defined-exceptions" rel="nofollow noreferrer">here</a> for more informations.</span>
