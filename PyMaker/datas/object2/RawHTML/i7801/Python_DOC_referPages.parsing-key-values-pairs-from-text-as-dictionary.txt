<div class="post-text" itemprop="text">
<p>I'm still quite new to Python and I was wondering how would I convert something that is already in key:value form in a text file into a Python dictionary? </p>
<p>Eg. </p>
<pre><code>2:red 
3:orange 
5:yellow 
6:green 
</code></pre>
<p>(each key:value on a separate line)</p>
<p>I've looked at other posts but none of them seem to work and I know I'm doing something wrong. So far, I have:</p>
<pre><code>def create_colours_dictionary(filename):
    colours_dict = {}
    file = open(filename,'r')
    contents = file.read()

    for key in contents:
        #???
    return colours_dict
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Iterate over your file and build a dictionary.</p>
<pre><code>def create_colours_dictionary(filename):
    colours_dict = {}
    with open(filename) as file:
        for line in file:
            k, v = line.rstrip().split(':')
            colours_dict[k] = v

    return colours_dict

dct = create_colours_dictionary('file.txt')
</code></pre>
<p>Or, if you're looking for something compact, you can use a dict comprehension with a lambda to split on colons.</p>
<pre><code>colours_dict = {k : v for k, v in (
    line.rstrip().split(':') for line in open(filename)
}
</code></pre>
<p>This approach will need some modification if the colon is surrounded by spacesâ€”perhaps regex?</p>
</div>
<div class="post-text" itemprop="text">
<p>The straight-forward way to do this is to use a traditional <code>for</code> loop, and the <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>str.split</code></a> method. </p>
<p>Rather than reading from a file, I'll embed the input data into the script as a multi-line string, and use <a href="https://docs.python.org/3/library/stdtypes.html#str.splitlines" rel="nofollow noreferrer"><code>str.splitlines</code></a> to convert it to a list of strings, so we can loop over it, just like looping over the lines of a file.</p>
<pre><code># Use a list of strings to simulate the file
contents = '''\
2:red
3:orange
5:yellow
6:green
'''.splitlines()

colours_dict = {}
for s in contents:
    k, v = s.split(':')
    colours_dict[k] = v

print(colours_dict) 
</code></pre>
<p><strong>output</strong></p>
<pre><code>{'2': 'red', '3': 'orange', '5': 'yellow', '6': 'green'}
</code></pre>
<p>Be aware that this code will only work correctly if there are no spaces surrounding the colon. If there could be spaces (or spaces at the start or end of the line), they you can use the <a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow noreferrer"><code>str.strip</code></a> method to remove them.</p>
<hr/>
<p>There are a couple of ways to make this more compact.</p>
<p>We <em>could</em> use a list comprehension nested inside a dictionary comprehension:</p>
<pre><code>colours_dict = {k: v for k, v in [s.split(':') for s in contents]}
</code></pre>
<p>But it's even more compact to use the <code>dict</code> constructor on a <a href="https://docs.python.org/3/tutorial/classes.html#generator-expressions" rel="nofollow noreferrer">generator expression</a>:</p>
<pre><code>colours_dict = dict(s.split(':') for s in contents)
</code></pre>
<p>If you aren't familiar with comprehensions, please see 
<a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">List Comprehensions</a> and <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">Dictionaries</a> in the official tutorial.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming the textfile has the stated 'key:value' and the name of the file is contained in the variable <code>fname</code> you could write a function that will read the file and return a <code>dict</code> or just use a simple <code>with</code> statment.  </p>
<p>A function is probably a better choice if this opertion is performed in several places in your code.  If only done once a 2-liner will do fine.</p>
<pre><code>    # Example with fname being the path to the textfile
    def dict_from(fname):
        return dict(line.strip().split(':') for line in open(fname))

    fname = '...'
    # ...
    d1 = dict_from(fname)

    # Alternative solution
    with open(fname) as fd:
       d2 = dict(line.strip().split(':') for line in fd)
</code></pre>
<p>Both suggested solutions uses a built-in <code>dict</code>constructor and a generator expression to parse each line. Use <code>strip</code> to remove white space at both start and end of the line.  Use <code>split</code> create a (key, value) pair from each line.</p>
</div>
<span class="comment-copy">It's a little inefficient to call <code>x.split(':')</code> twice on each <code>x</code>. Also, this algorithm is somewhat brittle: it will fail if the separator isn't exactly <code>':'</code>, i.e., if there are any intervening spaces.</span>
<span class="comment-copy">@PM2Ring I agree. But fixing that would require a loop instead of a comprehension. Isn't the former more pythonic and readable? The delimiter is solely based on OP's question.</span>
<span class="comment-copy">Sure, it's ok to use the <code>':'</code> delimiter, but it's still good to mention that the algorithm won't work if there are any spaces around the colon.</span>
<span class="comment-copy">Using a comprehension isn't necessarily more Pythonic: if it's less efficient than a traditional <code>for</code> loop solution, then it's better to use the traditional loop. However, there are a couple of ways to avoid the double <code>.split</code> call.</span>
<span class="comment-copy">@mancha It's good practice to mark questions that helped. :)</span>
