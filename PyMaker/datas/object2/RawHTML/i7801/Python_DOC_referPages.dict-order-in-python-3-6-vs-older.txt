<div class="post-text" itemprop="text">
<p>I have this bit of code that I need printed out in this exact order (Visitor Team, Visitor Rating, Home Team, Home Rating, Expected Winner, Margin) when I run it through <code>tabulate</code>.</p>
<pre><code>final_dict = {'Visitor Team': visitor_team, 'Visitor Rating': visitor_rating, 'Home Team': home_team,
              'Home Rating': home_rating, 'Expected Winner': expected_winner, 'Margin': expected_winner_diff}

print(tabulate(final_dict, headers="keys", floatfmt=".2f", tablefmt="fancy_grid"))
</code></pre>
<p>I've been learning and using Python 3.6 and, unbeknownst to me, dicts in 3.6 are ordered now so this actually prints out as I intended it to.  It was just dumb luck I guess that Python 3.6 gave me exactly what I needed!</p>
<p>But I went to install Python 3.5 on another computer and this doesn't print out like I want.  I've been reading about ordereddicts but I'm not sure how exactly to use it.  Do I need to declare final_dict as empty first and then iterate into it the key order I need?  </p>
</div>
<div class="post-text" itemprop="text">
<p>Dictionaries in Python 3.6 are ordered, but that feature is considered an implementation detail that you shouldn't rely upon (except in a few specific cases like <code>**kwargs</code>). If you do require a specific order, you should use <code>collections.OrderedDict</code> instead. You can construct one using a list of <code>key, value</code> tuples that are in the desired order:</p>
<pre><code>from collections import OrderedDict

finaldict = OrderedDict([('Visitor Team', visitor_team),
                         ('Visitor Rating', visitor_rating),
                         ('Home Team', home_team),
                         ('Home Rating', home_rating),
                         ('Expected Winner', expected_winner),
                         ('Margin', expected_winner_diff),
                        ])
</code></pre>
<p>An <code>OrderedDict</code> works just like a normal <code>dict</code> in most respects, other than having a different <code>repr</code> and a few additional methods. You can read more about it in <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">the docs</a>.</p>
<p>In Python 3.6+ you'd also be able to use keyword arguments to the constructor if your key strings were valid identifiers (e.g. <code>OrderedDict(Margin=expected_winner_diff)</code>). Unlike the ordering of normal <code>dict</code>s, the order of keywords is guaranteed to be preserved (not an implementation detail). That's not backwards compatible though (and can't work for your non-identifier keys anyway).</p>
<p>But it's probably worth considering that if you need a very specific order for your data, a dictionary may not be the best type to use to store it in. I see the <code>tabulate</code> function you're using comes from a library, and according to the docs, it accepts many different formats of data. I'd probably just pass it a list of column data, and give it the headers separately:</p>
<pre><code>data = [visitor_team, visitor_rating, home_team,
        home_rating, expected_winner, expected_winner_diff]

headers = ["Visitor Team", "Visitor Rating", "Home Team",
           "Home Rating", "Expected Winner", "Margin"]

print(tabulate(data, headers=headers, floatfmt=".2f", tablefmt="fancy_grid"))
</code></pre>
<p>(Note, I've not actually tested that code, since I don't have the <code>tabulate</code> library on my system. But it should at least be close to working.)</p>
</div>
<span class="comment-copy">Dictionaries don't store the keys in order. You should use a list if you want to maintain the order.</span>
<span class="comment-copy">You didn't present the function <code>tabulate</code> but that's where the printing gets done.  The important question here is, how does <code>tabulate</code> increment through the elements of <code>final_dict</code>?  How does it use the value of <code>headers</code> to control the order of printing?  How does it know which element of the dictionary matches which header?  I think you should look at <code>tabulate</code> to understand how it works.  Otherwise there is no guarantee that changing to an OrderedDict will fix your problem.</span>
<span class="comment-copy">@PaulCornelius Those are all good points.  <code>tabulate</code> is a package used to printing tabular output: <a href="https://pypi.python.org/pypi/tabulate" rel="nofollow noreferrer">pypi.python.org/pypi/tabulate</a>  I didn't write it so I'm not exactly sure how it's 'internals' work.</span>
<span class="comment-copy">The docs <a href="https://pypi.python.org/pypi/tabulate" rel="nofollow noreferrer">pypi.python.org/pypi/tabulate</a> say that the first argument to tabulate can be a list of lists.  That seems to be the only sure-fire way to control the column order.  Since that's important to you, I would convert your data to a list of lists before passing it off to tabulate.</span>
<span class="comment-copy">Relevant <a href="https://stackoverflow.com/questions/39980323/dictionaries-are-ordered-in-python-3-6" title="dictionaries are ordered in python 3 6">stackoverflow.com/questions/39980323/â€¦</a></span>
<span class="comment-copy">The docs say that <code>data</code> has to be a two-dimensional data type, like a list of lists or a dict of lists.  A simple list won't work.  I'm guessing that OP's original code works because all of his dictionary values are actually lists.</span>
<span class="comment-copy">@PaulCornelius Yes, that is correct.  All of that is stored as lists.  I'll play around with what I have and see what I can come up with.</span>
<span class="comment-copy">I ended up just converting my finaldict to a list.  I figured it was a whole lot easier just dealing with lists and not messing around with getting ordereddict to work.  Thanks for your help guys!</span>
