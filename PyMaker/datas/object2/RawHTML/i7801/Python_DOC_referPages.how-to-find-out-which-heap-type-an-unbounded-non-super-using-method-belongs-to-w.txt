<div class="post-text" itemprop="text">
<p>Say I want to make a decorator for methods defined in a class. I want that decorator, when invoked, to be able to set an attribute on the class defining the method (in order to register it in a list of methods that serve a particular purpose).</p>
<p>In Python 2, the <code>im_class</code> method accomplishes this nicely:</p>
<pre><code>def decorator(method):
  cls = method.im_class
  cls.foo = 'bar'
  return method
</code></pre>
<p>However, in Python 3, no such attribute (or a  replacement for it) seems to exist. I suppose the idea was that you could call <code>type(method.__self__)</code> to get the class, but this does not work for unbound methods, since <code>__self__ == None</code> in that case.</p>
<p><strong>NOTE:</strong> This question is actually a bit irrelevant for my case, since I've chosen instead to set an attribute on the method itself and then have the instance scan through all of its methods looking for that attribute at the appropriate time. I am also (currently) using Python 2.6. However, I am curious if there is any replacement for the version 2 functionality, and if not, what the rationale was for removing it completely.</p>
<p><strong>EDIT</strong>: I just found <a href="https://stackoverflow.com/questions/2188409/how-to-find-class-of-bound-method-during-class-construction-in-python-3-1">this question</a>. This makes it seem like the best solution is just to avoid it like I have. I'm still wondering why it was removed though.</p>
</div>
<div class="post-text" itemprop="text">
<p>The point you appear to be missing is, in Python 3 the "unbound method" type has entirely disappeared -- a method, until and unless it's bound, is just a function, without the weird "type-checking" unbound methods used to perform.  This makes the language simpler!</p>
<p>To wit...:</p>
<pre><code>&gt;&gt;&gt; class X:
...   def Y(self): pass
... 
&gt;&gt;&gt; type(X.Y)
&lt;class 'function'&gt;
</code></pre>
<p>and voila -- one less subtle concept and distinction to worry about.  Such simplifications are the core advantage of Python 3 wrt Python 2, which (over the years) had been accumulating so many subtleties that it was in danger (if features kept being added to it) of really losing its status as a <strong>simple</strong> language.  With Python 3, simplicity is <em>back</em>!-)</p>
</div>
<div class="post-text" itemprop="text">
<p>I thought it would be worthwhile writing something that does it best at guessing the defining class. For completeness' sake this answer also addresses bound methods.</p>
<p>At worst, guessing should fail altogether, with the function returning <code>None</code>. However, under any circumstances, it shouldn't raise an exception or return an incorrect class.</p>
<h1>TL;DR</h1>
<p>The final version of our function successfully overcomes most simple cases, and a few pitfalls as well.</p>
<p>In a nutshell, its implementation differentiates between bound methods and <a href="https://docs.python.org/3.0/whatsnew/3.0.html#operators-and-special-methods" rel="nofollow noreferrer">“unbound methods“ (functions)</a> since in <code>Python 3</code> there is no reliable way to extract the enclosing class from an “unbound method".</p>
<ul>
<li>For a bound method, it simply traverses the <a href="http://makina-corpus.com/blog/metier/2014/python-tutorial-understanding-python-mro-class-search-path" rel="nofollow noreferrer"><code>MRO</code></a>, in a similar manner to that done in the <a href="https://stackoverflow.com/a/961057/3903832">accepted answer to an equivalent question for <code>Python 2</code></a>.</li>
<li>For an “unbound method“, it relies on parsing its <a href="https://docs.python.org/3.3/glossary.html#term-qualified-name" rel="nofollow noreferrer">qualified name</a>, which is <a href="https://docs.python.org/3.3/whatsnew/3.3.html#pep-3155-qualified-name-for-classes-and-functions" rel="nofollow noreferrer">available only from <code>Python 3.3</code></a> and is quite reckless (if this feature is unnecessary it's probably best to remove this block of code and just return <code>None</code> instead).</li>
</ul>
<p>There is also partial handling for methods defined via descriptors, that aren't classified as ordinary methods or functions (for example, <code>set.union</code>, <code>int.__add__</code> and <code>int().__add__</code> but not <code>set().union</code>).</p>
<p>The resulting function is:</p>
<pre class="lang-py prettyprint-override"><code>def get_class_that_defined_method(meth):
    if inspect.ismethod(meth):
        for cls in inspect.getmro(meth.__self__.__class__):
           if cls.__dict__.get(meth.__name__) is meth:
                return cls
        meth = meth.__func__  # fallback to __qualname__ parsing
    if inspect.isfunction(meth):
        cls = getattr(inspect.getmodule(meth),
                      meth.__qualname__.split('.&lt;locals&gt;', 1)[0].rsplit('.', 1)[0])
        if isinstance(cls, type):
            return cls
    return getattr(meth, '__objclass__', None)  # handle special descriptor objects
</code></pre>
<h1>A small request</h1>
<p>If you decide to use this implementation, and encounter any caveats, please comment and describe what happened.</p>
<hr/>
<h1>The Full Version</h1>
<h2>“Unbound methods” are regular functions</h2>
<p>First of all, it's worth noting the following <a href="https://docs.python.org/3.0/whatsnew/3.0.html#operators-and-special-methods" rel="nofollow noreferrer">change</a> made in <code>Python 3</code> (see Guido's motivation <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=86641#loose-ends" rel="nofollow noreferrer">here</a>):</p>
<blockquote>
<p>The concept of “unbound methods” has been removed from the language. When referencing a method as a class attribute, you now get a plain function object.</p>
</blockquote>
<p>This makes it practically impossible to reliably extract the class in which a certain “unbound method“ was defined unless it's bound to an object of that class (or of one of its subclasses).</p>
<h2>Handling bound methods</h2>
<p>So, let us first handle the “easier case“ in which we have a bound method. Note that the bound method must be written in <code>Python</code>, as described in <a href="https://docs.python.org/3/library/inspect.html#inspect.ismethod" rel="nofollow noreferrer"><code>inspect.ismethod</code>'s documentation</a>.</p>
<pre class="lang-py prettyprint-override"><code>def get_class_that_defined_method(meth):
    # meth must be a bound method
    if inspect.ismethod(meth):
        for cls in inspect.getmro(meth.__self__.__class__):
            if cls.__dict__.get(meth.__name__) is meth:
                return cls
    return None  # not required since None would have been implicitly returned anyway
</code></pre>
<p>However, this solution is not perfect and has its perils, as methods can be assigned in runtime, rendering their name possibly different than that of the attribute that they are assigned to (see example below). This problem exists also in <code>Python 2</code>. A possible workaround would be to iterate over all of the class's attributes, looking for one whose identity is that of the specified method.</p>
<h2>Handling “unbound methods“</h2>
<p>Now that we got that out of the way, we can suggest a hack that tries to handle “unbound methods”. The hack, its rationale, and some discouragement words can be found in <a href="https://stackoverflow.com/a/25922101/3903832">this answer</a>. It relies on manually parsing <a href="https://docs.python.org/3.3/glossary.html#term-qualified-name" rel="nofollow noreferrer">the <code>__qualname__</code> attribute</a>, <a href="https://docs.python.org/3.3/whatsnew/3.3.html#pep-3155-qualified-name-for-classes-and-functions" rel="nofollow noreferrer">available only from <code>Python 3.3</code></a>, is highly unrecommended, but <em>should</em> work for <strong>simple</strong> cases:</p>
<pre class="lang-py prettyprint-override"><code>def get_class_that_defined_method(meth):
    if inspect.isfunction(meth):
        return getattr(inspect.getmodule(meth),
                       meth.__qualname__.split('.&lt;locals&gt;', 1)[0].rsplit('.', 1)[0])
    return None  # not required since None would have been implicitly returned anyway
</code></pre>
<h2>Combining both approaches</h2>
<p>Since <code>inspect.isfunction</code> and <code>inspect.ismethod</code> are mutually exclusive, combining both approaches into a single solution gives us the following (with added logging facilities for the upcoming examples):</p>
<pre class="lang-py prettyprint-override"><code>def get_class_that_defined_method(meth):
    if inspect.ismethod(meth):
        print('this is a method')
        for cls in inspect.getmro(meth.__self__.__class__):
            if cls.__dict__.get(meth.__name__) is meth:
                return cls
    if inspect.isfunction(meth):
        print('this is a function')
        return getattr(inspect.getmodule(meth),
                       meth.__qualname__.split('.&lt;locals&gt;', 1)[0].rsplit('.', 1)[0])
    print('this is neither a function nor a method')
    return None  # not required since None would have been implicitly returned anyway
</code></pre>
<h2>Execution example</h2>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; class A:
...     def a(self): pass
... 
&gt;&gt;&gt; class B:
...     def b(self): pass
... 
&gt;&gt;&gt; class C(A, B):
...     def a(self): pass
... 
&gt;&gt;&gt; A.a
&lt;function A.a at 0x7f13b58dfc80&gt;
&gt;&gt;&gt; get_class_that_defined_method(A.a)
this is a function
&lt;class '__main__.A'&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; A().a
&lt;bound method A.a of &lt;__main__.A object at 0x7f13b58ca9e8&gt;&gt;
&gt;&gt;&gt; get_class_that_defined_method(A().a)
this is a method
&lt;class '__main__.A'&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; C.a
&lt;function C.a at 0x7f13b58dfea0&gt;
&gt;&gt;&gt; get_class_that_defined_method(C.a)
this is a function
&lt;class '__main__.C'&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; C().a
&lt;bound method C.a of &lt;__main__.C object at 0x7f13b58ca9e8&gt;&gt;
&gt;&gt;&gt; get_class_that_defined_method(C().a)
this is a method
&lt;class '__main__.C'&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; C.b
&lt;function B.b at 0x7f13b58dfe18&gt;
&gt;&gt;&gt; get_class_that_defined_method(C.b)
this is a function
&lt;class '__main__.B'&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; C().b
&lt;bound method C.b of &lt;__main__.C object at 0x7f13b58ca9e8&gt;&gt;
&gt;&gt;&gt; get_class_that_defined_method(C().b)
this is a method
&lt;class '__main__.B'&gt;
</code></pre>
<p>So far, so good, but...</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; def x(self): pass
... 
&gt;&gt;&gt; class Z:
...     y = x
...     z = (lambda: lambda: 1)()  # this returns the inner function
...     @classmethod
...     def class_meth(cls): pass
...     @staticmethod
...     def static_meth(): pass
...
&gt;&gt;&gt; Z.y
&lt;function x at 0x7f13b58dfa60&gt;
&gt;&gt;&gt; get_class_that_defined_method(Z.y)
this is a function
&lt;function x at 0x7f13b58dfa60&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; Z().y
&lt;bound method Z.x of &lt;__main__.Z object at 0x7f13b58ca9e8&gt;&gt;
&gt;&gt;&gt; get_class_that_defined_method(Z().y)
this is a method
this is neither a function nor a method
&gt;&gt;&gt;
&gt;&gt;&gt; Z.z
&lt;function Z.&lt;lambda&gt;.&lt;locals&gt;.&lt;lambda&gt; at 0x7f13b58d40d0&gt;
&gt;&gt;&gt; get_class_that_defined_method(Z.z)
this is a function
&lt;class '__main__.Z'&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; Z().z
&lt;bound method Z.&lt;lambda&gt; of &lt;__main__.Z object at 0x7f13b58ca9e8&gt;&gt;
&gt;&gt;&gt; get_class_that_defined_method(Z().z)
this is a method
this is neither a function nor a method
&gt;&gt;&gt;
&gt;&gt;&gt; Z.class_meth
&lt;bound method type.class_meth of &lt;class '__main__.Z'&gt;&gt;
&gt;&gt;&gt; get_class_that_defined_method(Z.class_meth)
this is a method
this is neither a function nor a method
&gt;&gt;&gt;
&gt;&gt;&gt; Z().class_meth
&lt;bound method type.class_meth of &lt;class '__main__.Z'&gt;&gt;
&gt;&gt;&gt; get_class_that_defined_method(Z().class_meth)
this is a method
this is neither a function nor a method
&gt;&gt;&gt;
&gt;&gt;&gt; Z.static_meth
&lt;function Z.static_meth at 0x7f13b58d4158&gt;
&gt;&gt;&gt; get_class_that_defined_method(Z.static_meth)
this is a function
&lt;class '__main__.Z'&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; Z().static_meth
&lt;function Z.static_meth at 0x7f13b58d4158&gt;
&gt;&gt;&gt; get_class_that_defined_method(Z().static_meth)
this is a function
&lt;class '__main__.Z'&gt;
</code></pre>
<h2>Final touches</h2>
<ul>
<li>The outcome generated by <code>Z.y</code> can be partially fixed (to return <code>None</code>) by verifying that the returned value is a class, before actually returning it.</li>
<li>The outcome generated by <code>Z().z</code> can be fixed by falling back to parsing the function's <code>__qualname__</code> attribute (the function can be extracted via <code>meth.__func__</code>).</li>
<li><p>The outcome generated by <code>Z.class_meth</code> and <code>Z().class_meth</code> is incorrect because accessing a class method always returns a bound method, whose <code>__self__</code> attribute is the class itself, rather than its object. Thus, further accessing the <code>__class__</code> attribute on top of that <code>__self__</code> attribute doesn't work as expected:</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; Z().class_meth
&lt;bound method type.class_meth of &lt;class '__main__.Z'&gt;&gt;
&gt;&gt;&gt; Z().class_meth.__self__
&lt;class '__main__.Z'&gt;
&gt;&gt;&gt; Z().class_meth.__self__.__class__
&lt;class 'type'&gt;
</code></pre>
<p>This can be fixed by checking whether the method's <code>__self__</code> attribute returns an instance of <code>type</code>. However, this might be confusing when our function is invoked against methods of a metaclass, so we'll leave it as is for now.</p></li>
</ul>
<p>Here is the final version:</p>
<pre class="lang-py prettyprint-override"><code>def get_class_that_defined_method(meth):
    if inspect.ismethod(meth):
        for cls in inspect.getmro(meth.__self__.__class__):
            if cls.__dict__.get(meth.__name__) is meth:
                return cls
        meth = meth.__func__  # fallback to __qualname__ parsing
    if inspect.isfunction(meth):
        cls = getattr(inspect.getmodule(meth),
                      meth.__qualname__.split('.&lt;locals&gt;', 1)[0].rsplit('.', 1)[0])
        if isinstance(cls, type):
            return cls
    return None  # not required since None would have been implicitly returned anyway
</code></pre>
<p>Surprisingly, this also fixes the outcome of <code>Z.class_meth</code> and <code>Z().class_meth</code> which now correctly return <code>Z</code>. This is because the <code>__func__</code> attribute of a class method returns a regular function whose <code>__qualname__</code> attribute may be parsed:</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; Z().class_meth.__func__
&lt;function Z.class_meth at 0x7f13b58d4048&gt;
&gt;&gt;&gt; Z().class_meth.__func__.__qualname__
'Z.class_meth'
</code></pre>
<hr/>
<p><strong>EDIT:</strong></p>
<p>As per the issue raised by <a href="https://stackoverflow.com/users/487464/bryce-guinta">Bryce</a>, it's possible to handle <code>method_descriptor</code> objects, like <code>set.union</code>, and <code>wrapper_descriptor</code> objects, like <code>int.__add__</code>, merely by returning their <a href="https://docs.python.org/3/reference/datamodel.html#implementing-descriptors" rel="nofollow noreferrer"><code>__objclass__</code></a> attribute (introduced by <a href="https://www.python.org/dev/peps/pep-0252/" rel="nofollow noreferrer">PEP-252</a>), if such exists:</p>
<pre class="lang-py prettyprint-override"><code>if inspect.ismethoddescriptor(meth):
    return getattr(meth, '__objclass__', None)
</code></pre>
<p>However, <code>inspect.ismethoddescriptor</code> returns <code>False</code> for the respective instance method objects, i.e. for <code>set().union</code> and for <code>int().__add__</code>:</p>
<ul>
<li>Since <code>int().__add__.__objclass__</code> returns <code>int</code>, the above if clause may be relinquished in order to solve the problem for <code>int().__add__</code>. Unfortunately, this doesn't address the matter of <code>set().union</code>, for which no <code>__objclass__</code> attribute is defined. In order to avoid an <code>AttributeError</code> exception in such a case, the <code>__objclass__</code> attribute isn't accessed directly, but rather via the <code>getattr</code> function.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Since python 3.6 you could accomplish what you are describing using a decorator that defines a <code>__set_name__</code> method. <a href="https://docs.python.org/3/reference/datamodel.html#object.__set_name__" rel="nofollow noreferrer">The documentation</a> states that <code>object.__set_name__</code> is called when the class is being created.</p>
<p>Here is an example that decorates a method "in order to register it in a list of methods that serve a particular purpose":</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; class particular_purpose: 
...     def __init__(self, fn): 
...         self.fn = fn 
...      
...     def __set_name__(self, owner, name): 
...         owner._particular_purpose.add(self.fn) 
...          
...         # then replace ourself with the original method 
...         setattr(owner, name, self.fn) 
...  
... class A: 
...     _particular_purpose = set() 
...  
...     @particular_purpose 
...     def hello(self): 
...         return "hello" 
...  
...     @particular_purpose 
...     def world(self): 
...         return "world" 
...  
&gt;&gt;&gt; A._particular_purpose
{&lt;function __main__.A.hello(self)&gt;, &lt;function __main__.A.world(self)&gt;}
&gt;&gt;&gt; a = A() 
&gt;&gt;&gt; for fn in A._particular_purpose: 
...     print(fn(a)) 
...                                                                                                                                     
world
hello
</code></pre>
<p>Note that this question is very similar to <a href="https://stackoverflow.com/questions/2366713/can-a-python-decorator-of-an-instance-method-access-the-class">Can a Python decorator of an instance method access the class?</a> and therefore my answer as well to <a href="https://stackoverflow.com/a/54316392/641317">the answer I provided there</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>A small extension for <strong>python 3.6</strong> (python 2.7 worked fine) to the great answer of <a href="https://stackoverflow.com/a/25959545/4013571">https://stackoverflow.com/a/25959545/4013571</a></p>
<pre><code>def get_class_that_defined_method(meth):
    if inspect.ismethod(meth):
        for cls in inspect.getmro(meth.__self__.__class__):
            if cls.__dict__.get(meth.__name__) is meth:
                return cls
        meth = meth.__func__  # fallback to __qualname__ parsing
    if inspect.isfunction(meth):
        class_name = meth.__qualname__.split('.&lt;locals&gt;', 1)[0].rsplit('.', 1)[0]
        try:
            cls = getattr(inspect.getmodule(meth), class_name)
        except AttributeError:
            cls = meth.__globals__.get(class_name)
        if isinstance(cls, type):
            return cls
    return None  # not required since None would have been implicitly returned anyway
</code></pre>
<p>I found the following adjustment was required for <code>doctest</code></p>
<pre><code>        except AttributeError:
            cls = meth.__globals__.get(class_name)
</code></pre>
<p>As for some reason, when using <code>nose</code> the <code>inspect.getmodule(meth)</code> didn't contain the defining class</p>
</div>
<span class="comment-copy">The removal of unbound methods is documented here: <a href="http://docs.python.org/py3k/whatsnew/3.0.html#operators-and-special-methods" rel="nofollow noreferrer">docs.python.org/py3k/whatsnew/…</a></span>
<span class="comment-copy">Guido van Rossum's rationale for removing unbound methods can be found here: <a href="http://mail.python.org/pipermail/python-dev/2005-January/050625.html" rel="nofollow noreferrer">mail.python.org/pipermail/python-dev/2005-January/050625.html</a>, and the blog mentioned in that post is here: <a href="http://artima.com/weblogs/viewpost.jsp?thread=86641" rel="nofollow noreferrer">artima.com/weblogs/viewpost.jsp?thread=86641</a></span>
<span class="comment-copy">Thanks to all of you. That was exactly what I was looking for.</span>
<span class="comment-copy">The solution described in the question you linked to (use a decorator to just tag the functions, and then use a class decorator to modify the tagged functions after the fact) has some nice advantages. It's explicit, it doesn't rely on anything tricky or not-well-known, it's guaranteed to work in any version of Python (well, you need decorators… but even without them, <code>spam = deco(spam)</code> works), it's flexible to a wide range of similar but not identical problems, …</span>
<span class="comment-copy">@PavelPatrin You're right, looks like it only works as <code>decorator(Foo.bar)</code>, not as <code>@decorator</code>. I was probably doing something slightly different, but it's been six years and it never worked where I wanted it anyway, so who knows.</span>
<span class="comment-copy">That makes sense. I didn't even realize there was extra functionality for methods like the first-argument type checking--I just thought they would be normal functions with a few extra attributes. With that, I can completely understand the removal.</span>
<span class="comment-copy">@Tim, yes, the check that the first argument was of an instance of the <code>.im_class</code> (including subclasses thereof of course) is why <code>im_class</code> was kept in the first place (and the same layer of indirectness wrapped around functions to make unbound methods, as needs to be wrapped anyway to make bound ones).  The underlying function always was (and still is for <i>bound</i> methods) the <code>.im_func</code>, BTW, never the method object itself.</span>
<span class="comment-copy">"With Python 3, simplicity is back!" sounds like it would make a good bumper sticker (or laptop sticker).</span>
<span class="comment-copy">Would anyone mind explaining how this answers tim's question? Thanks!</span>
<span class="comment-copy">@GershomMaes, if a question was, "how do I get the defining class of a unicorn", are you really unable to see how "unicorns don't exist" answers it? The question being "how do I get the defining class of an unbound method in Python 3", clearly "unbound methods in Python 3 do not exist" answers it in exactly the same way: obviously, you can't "get the defining class" (or any other characteristic) of something that just does not exist!-)</span>
<span class="comment-copy">This identifies @staticmethod's as methods with this base class. They really aren't.   Once you have the class you should check that not isinstance( cls.__dict__[meth.__name__], staticmethod ).  It is ambiguous whether you should also check for classmethod.  (The point of using <b>dict</b> is to dodge substitutions done by <b>get</b>) . I don't think you need to scan up the <b>mro</b> in this case, because the definition will really lie in whatever class <b>qualname</b> indicates, but I am not entirely certain.  (This insight comes from the new 'inspect.getattr_static' method implementation)</span>
<span class="comment-copy">Also, re: the edit.  set().union is <i>bound</i>.  It has a <b>self</b>.  So you can use the type of that as the declaring class.  And set.union has an <b>objclass</b>.</span>
<span class="comment-copy">@jobermark, thanks for your comments, but I don't quite follow. Can you provide an example for which the returned class is incorrect for a <code>@staticmethod</code> or a <code>@classmethod</code>? Also, regarding <code>set().union</code> and <code>int().__add__</code>, I'd rather refrain from trying to obtain its "<code>self</code> object" unless I'm certain that I'm dealing with a bound method.</span>
<span class="comment-copy">The function takes an unbound method...  set().__add__ is a bound method.  And set.__add__ now has an <b>objclass</b> in Python 3.7.  So this special case from the comment has disappeared.</span>
<span class="comment-copy">Maybe I misunderstood.  I guess I am after something other than the defining class.  As named this is correct, but it is less useful than it might be.  The primary use is going to be to check that I can take an object of the returned class, .__get__ the method onto it to bind, and use the result as expected.  For staticmethods and classmethods this is not quite right.  You should not bind it to anything if it is a staticmethod, and if it is a classmethod you should bind it to the class.</span>
