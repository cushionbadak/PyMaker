<div class="post-text" itemprop="text">
<p>Essentially what I'm trying to do is remove values within a list when a condition has been met.</p>
<p>The conditions are based upon the position of the value in the list, which is what remove_position stands for in the function definition. The code below is what I have so far and I'm using Python 3.6.0. The list in this case is from an external python file which imports the function from another python and is:  </p>
<pre><code>str_list5 = ['w', 'i', 'n', 'g']
new_list = list_function.remove_value(str_list5, 2)
print(new_list)
new_list = list_function.remove_value(str_list5, -1)
print(new_list)
new_list = list_function.remove_value(str_list5, 10)
print(new_list)
</code></pre>
<p>What I'm trying to do use the remove_position value above in an arithmetic function that will delete the item that corresponds to the function's result.</p>
<pre><code>def remove_value(my_list, remove_position):
    newlist = []
    count = 0

    for item in my_list:
        if remove_position &lt; count:
            newlist.remove(item)

        if remove_position &gt; count:
            newlist.remove(item)

    return newlist
</code></pre>
<p>The output that I'm looking for is this:</p>
<pre><code>remove_value Test
['w', 'i', 'g']
['i', 'n', 'g']
['w', 'i', 'n']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do something like this:</p>
<pre><code>my_list = ['w','i','n','g']

def remove_value(my_list, position):
    if position &gt;= len(my_list):
        return my_list[:-1]
    elif position &lt; 0:
        return my_list[1:]
    else:
        return my_list[:position] + my_list[position+1:]


# Test
remove_value(my_list, 2)
remove_value(my_list, -1)
remove_value(my_list, 10)
</code></pre>
<p>Output:</p>
<pre><code>['w', 'i', 'g']
['i', 'n', 'g']
['w', 'i', 'n']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>First of all</strong>: <code>list</code> objects are <a href="https://docs.python.org/3/glossary.html#term-mutable" rel="nofollow noreferrer">mutable</a> and when you change them inside of a function â€“ the original changes too, so if you use <code>list.remove</code> method in <code>remove_value</code> your <code>str_list5</code> loses element as well.</p>
<p>I advise you to create new object instead of mutating the old one.
We can write this</p>
<pre><code>def remove_value(my_list, remove_position):
    result = []
    remove_position = min(max(remove_position, 0), len(my_list) - 1)
    for position, element in enumerate(my_list):
        if position == remove_position:
            continue
        result.append(element)
    return result
</code></pre>
<p>or using <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a></p>
<pre><code>def remove_value(my_list, remove_position):
    remove_position = min(max(remove_position, 0), len(my_list) - 1)
    return [element
            for position, element in enumerate(my_list)
            if position != remove_position]
</code></pre>
<p>or following @ChihebNexus suggestion using <code>list</code> <a href="https://docs.python.org/3/glossary.html#term-slice" rel="nofollow noreferrer">slices</a></p>
<pre><code>def remove_value(my_list, remove_position):
    remove_position = min(max(remove_position, 0), len(my_list) - 1)
    return my_list[0: remove_position] + my_list[remove_position + 1:]
</code></pre>
<p>So which one to choose? The last version looks more elegant to me.</p>
<h1>Tests</h1>
<pre><code>str_list5 = ['w', 'i', 'n', 'g']
new_list = remove_value(str_list5, 2)
print(new_list)
new_list = remove_value(str_list5, -1)
print(new_list)
new_list = remove_value(str_list5, 10)
print(new_list)
</code></pre>
<p>gives us</p>
<pre><code>['w', 'i', 'g']
['i', 'n', 'g']
['w', 'i', 'n']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this</p>
<pre><code>    def remove_value(my_list, remove_position):
    my_list.pop(remove_position)

    return my_list

str_list5 = ['w','i','n','g']
new_list = remove_value(str_list5, 2)
print(new_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>list comprehension is a good choice</p>
<pre><code>new_list = [x for x in old_list if your_condition]
</code></pre>
<p>specifically, you may want this</p>
<pre><code>def remove_value(my_list, remove_position):
    return [my_list[i] for i in range(len(my_list)) if i != remove_position]
</code></pre>
</div>
<span class="comment-copy">What language are you using?</span>
<span class="comment-copy">Using Python 3.6.0</span>
<span class="comment-copy">what is the problem that you are facing?</span>
<span class="comment-copy">Count's always zero and nothing changes it. newlist is empty and nothing ever adds to it, just removes from it. Can you fix up your code or explain why you're doing what you're doing?</span>
<span class="comment-copy">why <code>new_list = remove_value2(str_list5, -1)</code> should remove first element?</span>
<span class="comment-copy">Thank you very very much, this helped a lot!</span>
<span class="comment-copy">You can have a look at <a href="http://pythoncentral.io/how-to-slice-listsarrays-and-tuples-in-python/" rel="nofollow noreferrer">List/tuple/string slicing</a> if you need more informations.</span>
<span class="comment-copy">This definitely is a step in the right direction but I'm having trouble with the final two outputs using -1 and 10 as remove_position's value and was wondering how I can get around that.</span>
<span class="comment-copy">@almight_vizzo: what logic lies behind <code>-1</code> and <code>10</code> as <code>remove_position</code>?</span>
<span class="comment-copy">@almight_vizzo: how it should be changed to get valid position inside of <code>my_list</code>?</span>
<span class="comment-copy">that's the thing, i wanted to see if there was a way to work around using such values that clearly don't correspond to the element number in the string through arithmetic</span>
<span class="comment-copy">@almight_vizzo: i think i've finally understood the logic</span>
