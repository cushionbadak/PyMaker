<div class="post-text" itemprop="text">
<p>In the interest of <em>not</em> rewriting an open source library,  I want to treat a string of text as a file in python 3.</p>
<p>Suppose I have the file contents as a string:</p>
<pre><code>not_a_file = 'there is a lot of blah blah in this so-called file'
</code></pre>
<p>I want to treat this variable, i.e. the contents of a file, as a  <a href="https://docs.python.org/3/glossary.html#term-path-like-object" rel="nofollow noreferrer">path-like object</a> that way I can use it in python's <code>open()</code> <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer">function</a>.</p>
<p>Here is a simple example which shows my dilemma:</p>
<pre><code>not_a_file = 'there is a lot of blah blah in this so-called file'
file_ptr = open(not_a_file, 'r')
</code></pre>
<p>Clearly the example doesn't work because <code>not_a_file</code> is not a path-like object.  I don't want to write a file nor create any temporary directories for portability purposes.</p>
<p>With that said, I need is to solve this mystery:</p>
<pre><code>not_a_file = 'there is a lot of blah blah in this so-called file'
... Something goes here ... 
file_ptr = open(also_not_a_file, 'r') 
</code></pre>
<h2>What I've Tried So Far</h2>
<ol>
<li><p>I've looked into StringIO and tried using that as a path-like object and no dice:
<code>
import StringIO
output = StringIO.StringIO()
output.write('First line.\n')
file_ptr = open(output,'r')
</code>
Well this doesn't work because StringIO isn't a path-like object.</p></li>
<li><p>I've tried tempfile in a similar fashion with no success.
<code>
import tempfile
tp = tempfile.TemporaryFile()
tp.write(b'there is a lot of blah blah in this so-called file')
open(tp,'r')
</code></p></li>
<li>Finally I tried mmap to see if I can write the string into memory and then open the memory pointer with <code>open</code> with no success.</li>
</ol>
<p>Any help is appreciated! :-)</p>
<h2>Edit 1: What I'm thinking of to possibly solve problem</h2>
<p>So <code>pathlib.PurePath</code> can work with <code>open()</code> if <a href="https://docs.python.org/3/library/pathlib.html#pure-paths" rel="nofollow noreferrer">PurePath</a> is initialized to a file.  Perhaps I can create an instance of a class that inherits PurePath and when read by <code>open()</code>, it reads my string.  Let me give an example:</p>
<pre><code>from pathlib import PurePath

not_a_file = 'there is a lot of blah blah in this so-called file'
class Magic(PurePath):
    def __init__(self, string_input):
        self.file_content = string_input
        PurePath.__init__(self, 'Something magical goes here')
    #some more magic happens in this class

also_not_a_file = Magic(not_a_file)
fp = open(also_not_a_file,'r')
print(fp.readlines()) # 'there is a lot of blah blah in this so-called file'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can create a temporary file and pass its name to open:</p>
<p>On Unix:</p>
<pre><code>tp = tempfile.NamedTemporaryFile()
tp.write(b'there is a lot of blah blah blah in this so-called file')
tp.flush()
open(tp.name, 'r')
</code></pre>
<p>On Windows, you need to close the temporary file before it can be opened:</p>
<pre><code>tp = tempfile.NamedTemporaryFile(delete=False)
tp.write(b'there is a lot of blah blah blah in this so-called file')
tp.close()
open(tp.name, 'r')
</code></pre>
<p>You then become responsible for deleting the file once you're done using it.</p>
</div>
<div class="post-text" itemprop="text">
<p>StringIO returns an <code>StringIO</code> object, it's almost equivalent to the file object returned by the <code>open</code> statement. So basically, you can use the StringIO in place of the <code>open</code> statement.</p>
<pre><code># from io import StringIO for python 3
from StringIO import StringIO
with StringIO('there is a lot of blah blah in this so-called file') as f:
    print(f.read())
</code></pre>
<p>Output:</p>
<pre><code>there is a lot of blah blah in this so-called file
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With what I can tell from your comments and recent edits, you want a file that can be opened using the <code>open</code> statement. (I'll leave my other answer be since it's the more correct approach to this type of question)</p>
<p>You <em>can</em> use <code>tempfile</code> to solve your problem, it basically is doing this: create your file, do stuff to your file, then delete your file upon closure.</p>
<pre><code>import os
from tempfile import NamedTemporaryFile

f = NamedTemporaryFile(mode='w+', delete=False)
f.write("there is a lot of blah blah in this so-called file")
f.close()
with open(f.name, "r") as new_f:
    print(new_f.read())

os.unlink(f.name) # delete the file after
</code></pre>
</div>
<span class="comment-copy">Why do you want to use the open command?  output.write("line 1\n"); output.seek(0); file_ptr=output</span>
<span class="comment-copy">@clockwatcher so in a different library that I'm going to use, there is this <code>open</code> command expecting the usual file input.  For my purposes and portability I need to somehow pass the string into the <code>open</code> somehow.</span>
<span class="comment-copy">Is there a way to use pathlib.PurePath with a string to create an object that will read the string?   <code>open(pathlib.PurePath('path/to/filename.ext'),'r')</code> is valid python.  Can I incorporate <code>PurePath</code> and my string into a class which when passed into <code>open()</code> reads my string?</span>
<span class="comment-copy">Did you pass <code>tp.name</code> and not <code>tp</code> to open?</span>
<span class="comment-copy">The unix example isn't working for me.  Is NamedTemporaryFile() a path-like object?  I get:  Traceback (most recent call last):   File "&lt;stdin&gt;", line 1, in &lt;module&gt; TypeError: expected str, bytes or os.PathLike object, not _TemporaryFileWrapper</span>
<span class="comment-copy">Ah!!! damn <code>.name</code>.  Thank you!!!</span>
<span class="comment-copy">I'm still not able to read the contents of the object properly.  <code>open(tp.name, 'r').readlines()</code> just gives me <code>''</code></span>
<span class="comment-copy">Thank you!  This now works as intended.</span>
<span class="comment-copy">This won't suffice.  I would need a path like object <code>also_not_a_string</code> to be a valid input into <code>open()</code>.  This object, when read via <code>open()</code> should have the 'there is a lot of blah blah in this so-called file' string.</span>
<span class="comment-copy">So you're basically wanting to create a real existing file onto storage? Since <code>open()</code> must take an openable file name/path as an argument. You <i>can</i> use tempfile, but that's just like creating a file, use it, and delete it later. Is that what you want instead?</span>
<span class="comment-copy">See my revised edit of #2.  That is an example of tempfile which does not work.  Again, I need a path-like object when read via <code>open()</code>, yields the string 'there is a lot of blah blah in this so-called file'</span>
