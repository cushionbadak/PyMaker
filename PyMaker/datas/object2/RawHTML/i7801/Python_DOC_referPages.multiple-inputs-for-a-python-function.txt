<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/919680/can-a-variable-number-of-arguments-be-passed-to-a-function">Can a variable number of arguments be passed to a function?</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>I am starting with Python, and trying to make a function.
The one i am in trouble is:</p>
<pre><code>#~ this function should make a directory only if it doesn't exist
def make_dir(directoryname):
    if not os.path.exists(directoryname):
       return os.makedirs(directoryname)
    else: 
        print "la carpeta %s ya existe" %(directoryname)
</code></pre>
<p>What i want to know is if it is possible to give multiple inputs like </p>
<pre><code>def make_dir(a,b,c,d,r)  #where a,b,c,d,r are directory names.
</code></pre>
<p>and how can i do it.</p>
<p>I apologize if it is an obvious question.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python has specific syntax for this. It is commonly referred to as <code>*args</code>. When Python sees this in a function definition, it allows the function caller to pass in a variable amount of arguments to the function.</p>
<p>The variable used in the <code>*args</code> syntax - which is a tuple - can then be used to access the arguments. In your case you can simply loop over the arguments and process them accordingly.</p>
<pre><code>def make_dir(*dirs):
    for directory in dirs:
        if not os.path.exists(directory):
            return os.makedirs(directory)
        else:
            print "la carpeta %s ya existe" %(directory)
</code></pre>
<p>It is important to note you may name the <em><code>args</code></em> in <code>*args</code> anything you want. I renamed it <code>dirs</code>(short for directories). And while it is common practice to simply name it <code>*args</code>, in my opinion it is much better to rename it to fit each specific case. That way, you can clearly convey what kind of arguments your function expects.</p>
</div>
<div class="post-text" itemprop="text">
<p>Either pass your variables as a sequence such as a <code>tuple</code> or <code>list</code>. Or use the splat operator <code>*</code> to unpack a variable amount of arguments.</p>
<p>i.e.</p>
<pre><code>def foo(*args):
    return args
</code></pre>
<p><strong>Sample Output:</strong></p>
<pre><code>&gt;&gt;&gt; foo(1, 2, 3)
(1, 2, 3)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a variable arguments variable with *directorynames and use a for loop in the function:</p>
<pre><code>import os

def make_dir(*directorynames):
    for dir_ in directorynames:
        if not os.path.exists(dir_):
            return os.makedirs(dir_)
        else: 
            print("la carpeta %s ya existe" %(dir_))
</code></pre>
<p>Regards.</p>
</div>
<span class="comment-copy">Use the <code>*args</code> syntax. This tells Python that a function can take a variable amount of arguments.</span>
<span class="comment-copy">or pass them in a list then use a simple for loop</span>
<span class="comment-copy">oh, oh. I wanted to avoid loops until i understand them better. I did not understand about <code>*args</code> but i will look in the web</span>
<span class="comment-copy">See <a href="https://docs.python.org/3/tutorial/controlflow.html#arbitrary-argument-lists" rel="nofollow noreferrer">Arbitrary Argument Lists</a>.</span>
<span class="comment-copy">i just need to add <code>*</code> inside the function, am i right? @PM2Ring</span>
<span class="comment-copy">And what if i just add <code>*</code> to the function in the original post? Would it be bad?</span>
<span class="comment-copy">@santimirandarp Opps! I just realized my code wouldn't work. You'd need to use a manual for loop instead. See my edits.</span>
<span class="comment-copy">This looks much better (to my unklowledge). I will try it.</span>
<span class="comment-copy">I am not sure but, shouldn't it be "if not os.path"..etc?</span>
<span class="comment-copy">@santimirandarp You correct. Thanks for catching the typo.</span>
