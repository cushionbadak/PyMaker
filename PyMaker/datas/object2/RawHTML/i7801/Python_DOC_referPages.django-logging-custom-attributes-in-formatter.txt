<div class="post-text" itemprop="text">
<p>How can Django use logging to log using custom attributes in the formatter? I'm thinking of logging the logged in username for example.</p>
<p>In the <code>settings.py</code> script, the LOGGING variable is defined:</p>
<pre><code>LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        },
    },
    'formatters' : {
        'info_format' : {
            'format' : '%(asctime)s %(levelname)s - %(message)s',
        },
    }
}
</code></pre>
<p>I wish to use a format, something like:</p>
<pre><code>'format' : '%(asctime).19s %(levelname)s - %(username)s: %(message)s'
</code></pre>
<p>Where username would be the currently logged in user. Maybe any other kind of session's variables may be added here.</p>
<p>A workaround here is to use the <code>extra</code> parameter on the logger methods, which receives a dictionary with the keys as the strings I want to use on the format string:</p>
<pre><code>logger.info(message, extra={'username' : request.user.username})
</code></pre>
<p>Another (ugly) workaround would be to build the message attribute to include the things that are not part of the default attributes that logging formatters have.</p>
<pre><code>message = request.user.username + " - " + message
logger.info(message)
</code></pre>
<p>But, is there a way to set up the format string with certain attributes and make Django give them automatically to the logging API? If %(username)s for example, the request.user.username, of any others perhaps...</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a filter to add your custom attribute. For example :</p>
<pre><code>def add_my_custom_attribute(record):
    record.myAttribute = 'myValue'
    record.username = record.request.user.username 
    return True

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        ...
        'add_my_custom_attribute': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': add_my_custom_attribute,
        }
    },
    'handlers': {
        ...
        'django.server': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'filters': ['add_my_custom_attribute'],
            'formatter': 'django.server',
        },            
    },
    ...
}
</code></pre>
<hr/>
<p>By installing a filter, you can process each log record and decide whether it should be passed from logger to handler. </p>
<p>The filter get the log record which contains all the details of log (i.e : time, severity, request, status code). </p>
<p>The attributes of the record are used by the formatter to format it to string message. If you add your custom attributes to that record - they will also be available to the formatter.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>extra</code> keyword is not a workaround. That's the most eloquent way of writing customized formatters, unless you are writing a <a href="https://docs.djangoproject.com/en/1.11/topics/logging/#custom-logging-configuration" rel="nofollow noreferrer">custom logging</a> altogether.</p>
<pre><code>format: '%(asctime).19s %(levelname)s - %(username)s: %(message)s'
logging.basicConfig(format=format)
logger.info(message, extra={'username' : request.user.username})
</code></pre>
<p>Some note from the documentation (<a href="https://docs.python.org/3/library/logging.html#logging.debug" rel="nofollow noreferrer">**kwars for Django logger</a>):</p>
<blockquote>
<p>The keys in the dictionary passed in extra should not clash with the keys used by the logging system.</p>
<p>If the strings expected by the Formatter are missing, the message will not be logged.</p>
<p>This feature is intended for use in specialized circumstances, and not always.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>I will provide one of many possible complete answers to this question:</p>
<blockquote>
<p>How can Django use logging to log using custom attributes in the formatter? I'm thinking of logging the logged in username for example.</p>
</blockquote>
<p>Other answers touched on the way to add extra contextual info through python's logging utilities. The method of using filters to attach additional information to the log record is ideal, and best described in the docs:</p>
<p><a href="https://docs.python.org/3/howto/logging-cookbook.html#using-filters-to-impart-contextual-information" rel="nofollow noreferrer">https://docs.python.org/3/howto/logging-cookbook.html#using-filters-to-impart-contextual-information</a></p>
<p>This still does not tell us <em>how to get the user</em> from the request in a universal way. The following library does this:</p>
<p><a href="https://github.com/ninemoreminutes/django-crum" rel="nofollow noreferrer">https://github.com/ninemoreminutes/django-crum</a></p>
<p>Thus, combine the two, and you will have a complete answer to the question that has been asked.</p>
<pre><code>import logging
from crum import get_current_user

class ContextFilter(logging.Filter):
    """
    This is a filter injects the Django user
    """

    def filter(self, record):

        record.user = get_current_user()
        return True

if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG,
                        format='User: %(user)-8s %(message)s')
    a1 = logging.getLogger('a.b.c')

    f = ContextFilter()
    a1.addFilter(f)
    a1.debug('A debug message')
</code></pre>
<p>This will need to happen within a Django request-response cycle with the CRUM library properly installed.</p>
</div>
<span class="comment-copy">Please show some code of what has been done.</span>
<span class="comment-copy">@JohnPeters there you go!</span>
<span class="comment-copy">could you please ellaborate on how I can use certain custom attribute I add via a filter on the logging formatter string?</span>
<span class="comment-copy">ellaborated about filters.</span>
<span class="comment-copy">One thing to watch out for is that logging can also happen in places where there's no <code>request</code> (generic python code or <code>models.py</code> for instance). So the production version will probably need a bit more code for robustness. (As an example, it is fine, of course! I've learned something from it and I'll look at filters a bit more!)</span>
<span class="comment-copy"><a href="https://docs.python.org/3/howto/logging-cookbook.html#using-filters-to-impart-contextual-information" rel="nofollow noreferrer">Python docs</a> for reference</span>
<span class="comment-copy">The python docs link comes the closest to answering the question. It allows you to attach information from another context to the log record, so that the value will be available to the formatter. This still falls short of the thing being asked - which is how to pass the request user through.</span>
<span class="comment-copy">Using <code>extra</code> works, but it gets tedious if you have/want to add it all the time. The original question is for a standard way to specify it in one place only (namely the logging setup).</span>
