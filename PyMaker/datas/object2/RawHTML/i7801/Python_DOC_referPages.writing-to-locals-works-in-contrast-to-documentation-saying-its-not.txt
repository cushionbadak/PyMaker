<div class="post-text" itemprop="text">
<p>I am currently tinkering with the variable scopes and how they can be modified / copied, as I would like to postprocess some results dynamically in IPython.
The confusion about locals(), vars() and globals() is real for me right now. 
Especially because the output of this piece of code:</p>
<pre><code>Python 3.6.1 (v3.6.1:69c0db5050, Mar 21 2017, 01:21:04) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; locals()["test"] = 5
&gt;&gt;&gt; print(test)
5
</code></pre>
<p>According to the more than brief documentation this should not be possible in my understanding:</p>
<blockquote>
<p>Note, the locals dictionary is only useful for reads since updates to
  the locals dictionary are ignored.</p>
</blockquote>
<p>(which is for whatever reason stated in the <a href="https://docs.python.org/3.6/library/functions.html#vars" rel="nofollow noreferrer">description</a> of the vars() function)</p>
<p>I hope someone can enlight me :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Where are you reading this? Both <a href="https://docs.python.org/2/library/functions.html#locals" rel="nofollow noreferrer">Py 2 docs</a> and <a href="https://docs.python.org/3/library/functions.html#locals" rel="nofollow noreferrer">Py 3 docs</a> have the following disclaimer:</p>
<blockquote>
<p><strong>Note</strong>: The contents of this dictionary should not be modified; changes may not affect the values of local and free variables used by the interpreter.</p>
</blockquote>
<p>This shows exactly what this is: an implementation detail. Sure, it works in CPython, but it might not  work in the various other interpreters, like IronPython and Jython. It's what would be called a hack.</p>
<p>Do not rely on it updating any variables. Do not even try to do it for anything serious, as it causes undefined behaviour.</p>
<p>In CPython 3.6.0, <code>help(locals)</code> has the following note:</p>
<pre class="lang-none prettyprint-override"><code>NOTE: Whether or not updates to this dictionary will affect name lookups in
the local scope and vice-versa is *implementation dependent* and not
covered by any backwards compatibility guarantees.
</code></pre>
<p>CPython 2.7.13 has no such note, however.</p>
</div>
<div class="post-text" itemprop="text">
<p>at module scope, <code>locals()</code> returns the global module dict which can be modified. locals in a function are different. Here, the variable is not changed. As mentioned elsewhere, this is all implementation dependent. You can't rely on <code>locals()</code> working as a writer.</p>
<pre><code>&gt;&gt;&gt; def foo():
...     x = 2
...     locals()['x'] = 3
...     print(x)
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; foo()
2
</code></pre>
</div>
<span class="comment-copy">You're <code>locals</code> are <code>globals</code>, therefore writing is possible.</span>
<span class="comment-copy">This is seen as <code>vars() is locals() is globals()</code> gives <code>True</code>. That note seems like a documentation error.</span>
<span class="comment-copy">At first: Thanks a lot! I have added the link to the docs. I will stop modifying locals(), but is there a way you are aware of, to copy all local variables of a function to another function that is contained in a module which is imported dynamically via IPython? I would like to avoid copying to the globals() in the imported module. Are you maybe aware of any way so that I can modify the local variables?</span>
<span class="comment-copy">@sh4kesbeer Instead of modifying variables like that, just hold the values in an actual dictionary. That way, you can return the dictionary. There really is no way to do it without redesigning it like this, as dynamic variables aren't meant to be assigned to.</span>
<span class="comment-copy">mhh okay thank you! I was hoping I could build some kind of processing pipeline, in which I would copy the local "workspace" but it seems this does not translate to python. I will try to get used to the dictionary notation then</span>
<span class="comment-copy">Interetingly, replacing <code>print(x)</code> with <code>print(locals()['x'])</code> still prints 2, but adding <code>global x</code> to the top of the function makes <code>print(x)</code> print 2, and <code>print(locals()['x'])</code> print 3.</span>
