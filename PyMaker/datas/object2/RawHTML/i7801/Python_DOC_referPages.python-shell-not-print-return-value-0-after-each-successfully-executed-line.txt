<div class="post-text" itemprop="text">
<p>when i run (for example)</p>
<pre><code>print("Hello")
</code></pre>
<p>the interpreter shows</p>
<pre><code>Hello
</code></pre>
<p>thats perfect, but...</p>
<pre><code>from subprocess import call
ls = 'ls'
call(ls)
</code></pre>
<p>prints</p>
<pre><code>file1 file2 file3
0
</code></pre>
<p>im guessing that the 0 is the return value saying it was successfull (still very new to programming :)   )</p>
<p>soooo..... my question is how to get rid of the 0 so that i only get the output from it, with this example and others as well?</p>
<p>lol im probably over looking something simple here</p>
<p>any help is greatly apreciated!!! :)</p>
<p>EDIT: something like </p>
<pre><code>@echo off
</code></pre>
<p>in windows batch scripts would be prefered(so i can use it once and ignore it)</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are using python 2x:
You can use the commands module for getting the output of the command.</p>
<pre><code>import commands
commands.getoutput("ls")
</code></pre>
<p>if you are using python 3x:</p>
<pre><code>import subprocess
subprocess.getoutput("ls")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the following:</p>
<pre><code>import subprocess
subprocess.check_output('ls')
# subprocess.check_output('ls', shell=True)
</code></pre>
</div>
<span class="comment-copy">You already know about <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">the <code>subprocess</code> module</a>. Look around the reference, there are many other functions that can be used to execute external commands, and which can capture the output of the command. I recommend a search for <code>Popen</code>.</span>
<span class="comment-copy">And if you just don't want the interpreter to output the zero, just assign to a dummy variable?</span>
<span class="comment-copy">after importing getoutput from subprocess i tried                                           ls = ['ls','-I','<b>init</b>.py','-I','<b>pycache</b>'] getoutput(ls)</span>
<span class="comment-copy">lol sry enter is saving it not going to next line</span>
<span class="comment-copy">enter the command directly in getoutput as in <code>getoutput("ls -l init.py")</code></span>
<span class="comment-copy">i tried the one for python 3 using 'ls' as a variable for the ls command with arguments(as a string. iv been doing that for subprocess.call())</span>
<span class="comment-copy">the getoutput method accepts a string which is the full command you'd put on the terminal</span>
