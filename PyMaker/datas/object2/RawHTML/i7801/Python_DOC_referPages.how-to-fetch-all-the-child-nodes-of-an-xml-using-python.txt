<div class="post-text" itemprop="text">
<p>This is my XML file</p>
<pre><code>&lt;?xml version="1.0"?&gt;
&lt;data&gt;
    &lt;country name="Liechtenstein"&gt;
        &lt;rank&gt;1&lt;/rank&gt;
        &lt;year&gt;2008&lt;/year&gt;
        &lt;gdp&gt;141100&lt;/gdp&gt;
        &lt;neighbor name="Austria" direction="E"/&gt;
        &lt;neighbor name="Switzerland" direction="W"/&gt;
    &lt;/country&gt;
&lt;/data&gt;
</code></pre>
<p>How to pull all the child nodes of <code>country</code>?</p>
<p>For Example, I need the output as <code>['rank','year','gdp','neighbor']</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Use ElementTree lib to pull out the child nodes. This might help you.</p>
<pre><code>import xml.etree.ElementTree as ET
tree = ET.parse("file.xml")
root = tree.getroot()
for child in root:
  print({x.tag for x in root.findall(child.tag+"/*")})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The solution using <a href="https://docs.python.org/3/library/xml.etree.elementtree.html" rel="nofollow noreferrer">xml.etree.ElementTree</a> module:</p>
<pre><code>import xml.etree.ElementTree as ET

tree = ET.parse("yourxml.xml")
root = tree.getroot()
tag_names = {t.tag for t in root.findall('.//country/*')}

print(tag_names)  # print a set of unique tag names
</code></pre>
<p>The output:</p>
<pre><code>{'gdp', 'rank', 'neighbor', 'year'}
</code></pre>
<hr/>
<ul>
<li><code>'.//country/*'</code> - xpath expression to extract all child elements of node <code>country</code></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/xml.etree.elementtree.html" rel="nofollow noreferrer">Have a look up to python documentation</a>. It verily uses this xml tree as example. </p>
<pre><code>import xml.etree.ElementTree as ET
tree = ET.parse('country_data.xml')
root = tree.getroot()

country = root[0].getchildren()
map(lambda e: e.tag, r)
# ['rank', 'year', 'gdp', 'neighbor', 'neighbor']
</code></pre>
<p>Btw, when you are stuck, open repl and go step by step. I do not remember all those stuff above. And last used xml parser 2 or 3 years ago. But I know, "try and see" is the best teacher. </p>
<p>Those are steps, how I come up with a solution.</p>
<pre><code># imports and other stuff.
&gt;&gt;&gt; tree = ET.parse('data.xml')
&gt;&gt;&gt; root = tree.getroot()
&gt;&gt;&gt; country = root[0]
&gt;&gt;&gt; dir(country)
['__class__', '__delattr__', '__delitem__', '__dict__', '__doc__', '__format__', '__getattribute__', '__getitem__', '__hash__', '__init__', '__len__', '__module__', '__new__', '__nonzero__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_children', 'append', 'attrib', 'clear', 'copy', 'extend', 'find', 'findall', 'findtext', 'get', 'getchildren', 'getiterator', 'insert', 'items', 'iter', 'iterfind', 'itertext', 'keys', 'makeelement', 'remove', 'set', 'tag', 'tail', 'text']
&gt;&gt;&gt; country.keys()
['name']
&gt;&gt;&gt; country.getchildren()
[&lt;Element 'rank' at 0x7f873cf53910&gt;, &lt;Element 'year' at 0x7f873cf539d0&gt;, &lt;Element 'gdp' at 0x7f873cf53a90&gt;, &lt;Element 'neighbor' at 0x7f873cf53c10&gt;, &lt;Element 'neighbor' at 0x7f873cf53c50&gt;]
&gt;&gt;&gt; country.getchildren()[0]
&lt;Element 'rank' at 0x7f873cf53910&gt;
&gt;&gt;&gt; r = country.getchildren()[0]
&gt;&gt;&gt; dir(r)
['__class__', '__delattr__', '__delitem__', '__dict__', '__doc__', '__format__', '__getattribute__', '__getitem__', '__hash__', '__init__', '__len__', '__module__', '__new__', '__nonzero__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_children', 'append', 'attrib', 'clear', 'copy', 'extend', 'find', 'findall', 'findtext', 'get', 'getchildren', 'getiterator', 'insert', 'items', 'iter', 'iterfind', 'itertext', 'keys', 'makeelement', 'remove', 'set', 'tag', 'tail', 'text']
&gt;&gt;&gt; r.tag
'rank'
&gt;&gt;&gt; r = country.getchildren()[0]
&gt;&gt;&gt; r
&lt;Element 'rank' at 0x7f873cf53910&gt;
&gt;&gt;&gt; r = country.getchildren()
&gt;&gt;&gt; r
[&lt;Element 'rank' at 0x7f873cf53910&gt;, &lt;Element 'year' at 0x7f873cf539d0&gt;, &lt;Element 'gdp' at 0x7f873cf53a90&gt;, &lt;Element 'neighbor' at 0x7f873cf53c10&gt;, &lt;Element 'neighbor' at 0x7f873cf53c50&gt;]
&gt;&gt;&gt; map(lambda e: e.tag, r)
['rank', 'year', 'gdp', 'neighbor', 'neighbor']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Looks like there are a few APIs that Python can use to parse XML files: </p>
<p><a href="http://python-guide-pt-br.readthedocs.io/en/latest/scenarios/xml/" rel="nofollow noreferrer">http://python-guide-pt-br.readthedocs.io/en/latest/scenarios/xml/</a></p>
<p><a href="https://www.tutorialspoint.com/python/python_xml_processing.htm" rel="nofollow noreferrer">https://www.tutorialspoint.com/python/python_xml_processing.htm</a></p>
</div>
<div class="post-text" itemprop="text">
<p>this code tested under python 3.6</p>
<pre><code> import xml.etree.ElementTree as ET

 name = '4.xml'
 tree = ET.parse(name)
 root = tree.getroot()
 ditresult =[]

 for child in root:
     for child1 in child:         
          ditresult.append(child1.tag)

  print (ditresult)

=============

['rank', 'year', 'gdp', 'neighbor', 'neighbor']
</code></pre>
</div>
<span class="comment-copy">okay, what have you tried?</span>
