<div class="post-text" itemprop="text">
<p>I am trying to implement Euclid's algorithm in Python3.
If max(a, b) returns the object with the largest value in (a, b), 
why can't you operate on that object like so:</p>
<p><code>max(a, b) %= min(a, b)</code></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; a = 5
&gt;&gt;&gt; b = 6
&gt;&gt;&gt; max(a, b) %= min(a, b)
  File "&lt;stdin&gt;", line 1
SyntaxError: can't assign to function call
</code></pre>
<p>The interpreter has spoken. You are trying to operate on a value/object, which is not possible. Assignments can be performed on variables only, which are references pointing to said values/objects. </p>
<p>Even if you could do it, it's pointless, because you're trying to change the return value of a function, that hasn't been captured by any variable. You can't even use it.</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe the short answer to your question is <strong>no</strong>. The function max(a,b) is returning the largest value to you, not a variable reference to the largest value. </p>
<p>I believe what you are looking for is:</p>
<pre><code>if max(a,b) == a:
    a %= min(a,b)
else
    b %= min(a,b)
</code></pre>
<p>which will check if the largest value is indeed the variable a before the assignment. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can only assign to variables, but there's no way for a function to return a variable. (It can only return a value.)</p>
<p>For example:</p>
<pre><code>a = 4
b = 5
max(a, b)  # What does this return?
</code></pre>
<p><code>max(a, b)</code> returns the <em>value</em> <code>5</code>, not the <em>variable</em> <code>b</code>. (So the code you're trying to write is essentially <code>5 = ...</code> which makes little sense.)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't do like this, the function <code>max</code> returns a value, not a variable, what you can do, however is to execute:</p>
<pre><code>a,b = sorted((a,b))
</code></pre>
<p>then, after this line, <code>a</code> will always be the greater value (or equal <code>b</code>)</p>
<p>this way you can just do in the line after:</p>
<pre><code>a%=b
</code></pre>
<p>Since b will be the min value...</p>
</div>
<span class="comment-copy">Assignment isn't an operation on objects in Python. <code>x = y</code> has no effect on the object previously bound to the <code>x</code> variable; it's purely an operation on the variable itself.</span>
<span class="comment-copy">You can't, no. Names are not objects, and can't be returned from a function. <code>max()</code> returns <i>values</i>, objects that names reference.</span>
<span class="comment-copy">Thank you. It would be nice if the <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer">documentation</a> stated value and not item. Aren't items in iterables stored as references to variables?</span>
<span class="comment-copy">@Lupilum No, items in iterables are values.</span>
<span class="comment-copy">Sorry but -1, since this is not the reason it's not allowed. The error you get from running the OP's code is <code>SyntaxError: can't assign to function call</code> and not <code>SyntaxError: can't assign to literal</code>(as you said, <code>5=...</code>)</span>
<span class="comment-copy">Or just a, b = sorted(a, b)</span>
<span class="comment-copy">Nice, thanks, i will edit my answer</span>
<span class="comment-copy"><code>sorted</code> doesn't work that way. <code>sorted([a, b])</code> would work, but this is way off-topic already.</span>
<span class="comment-copy">Or, rather, sorted((a, b)) since sorted needs an iterable.</span>
<span class="comment-copy">@Lupilum That would work too. Whether you pass a tuple or a list doesn't really matter. (Perhaps one is slightly faster?)</span>
