<div class="post-text" itemprop="text">
<p>I want to remove elements of a <code>bytes</code> parameter in a function. I want the parameter to be changed, not return a new object.</p>
<pre><code>def f(b: bytes):
  b.pop(0)   # does not work on bytes
  del b[0]   # deleting not supported by _bytes_
  b = b[1:]  # creates a copy of b and saves it as a local variable
  io.BytesIO(b).read(1)  # same as b[1:]
</code></pre>
<p>What's the solution here?</p>
</div>
<div class="post-text" itemprop="text">
<p>Just use a <a href="https://docs.python.org/library/functions.html#func-bytearray" rel="nofollow noreferrer"><code>bytearray</code></a>:</p>
<pre><code>&gt;&gt;&gt; a = bytearray(b'abcdef')
&gt;&gt;&gt; del a[1]
&gt;&gt;&gt; a
bytearray(b'acdef')
</code></pre>
<p>It's almost like <code>bytes</code> but mutable:</p>
<blockquote>
<p>The <code>bytearray</code> class is a mutable sequence of integers in the range 0 &lt;= x &lt; 256. It has most of the usual methods of mutable sequences, described in <a href="https://docs.python.org/library/stdtypes.html#typesseq-mutable" rel="nofollow noreferrer">Mutable Sequence Types</a>, as well as most methods that the <code>bytes</code> type has, see <a href="https://docs.python.org/library/stdtypes.html#bytes-methods" rel="nofollow noreferrer">Bytes and Bytearray Operations</a>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Using a bytearray as shown by @MSeifert above, you can extract the first n elements using <a href="https://docs.python.org/3/library/stdtypes.html#common-sequence-operations" rel="nofollow noreferrer">slicing</a> </p>
<pre><code>&gt;&gt;&gt; a = bytearray(b'abcdef')
&gt;&gt;&gt; a[:3]
bytearray(b'abc')
&gt;&gt;&gt; a = a[3:]
a
bytearray(b'def')
</code></pre>
</div>
<span class="comment-copy">I <i>think</i> you'd only be able to do this through ctypes in an unconventional way. Bytes are immutable, they don't allow mutation w/o creating a new bytes object.</span>
<span class="comment-copy">This sucks.. But since I only need it at that exact point, maybe an unconventional way would be okay</span>
<span class="comment-copy">Why is this requirement in place? If you elaborate maybe a different solution might be found.</span>
