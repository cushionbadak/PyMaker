<div class="post-text" itemprop="text">
<p>I would like to remove to ignore duplicates in my list. For example, let's say the function checks for words that end with a ''.'' and puts them in a list. I would like to make sure that duplicate words don't go in the list.</p>
<p>Here is what I have so far </p>
<pre><code>def endwords(sent):
    list = []
    words = sent.split()
    for word in words:
        if "." in word:
            list.append(word)
        # bottom if statment does not work for some reason. thats the one i am trying to fix    
        if (word == list):
            list.remove(word)
    return list     
</code></pre>
<p>Please note I am using Python 3.</p>
</div>
<div class="post-text" itemprop="text">
<p>How about you check if the word is already in the list before appending it, like so: </p>
<pre><code>def endwords(sent):
     wordList = []
     words = sent.split()
     for word in words:
         if "." in word and word not in wordList:
             wordList.append(word)
     return wordList
</code></pre>
<p>You're trying to check if <code>word == list</code>, but that's seeing if the word is equal to the entire list. To check if an element is in a container in python, you can use the <code>in</code> keyword. Alternatively, to check if something is not in a container, you can use <code>not in</code>.</p>
<p>Another option is to use a set:</p>
<pre><code>def endwords(sent):
     wordSet = set()
     words = sent.split()
     for word in words:
         if "." in word:
             wordSet.add(word)
     return wordSet
</code></pre>
<p>And to make things a little cleaner, here is a version using set comprehension:</p>
<pre><code>def endwords(sent):
    return {word for word in sent.split() if '.' in word}
</code></pre>
<p>If you want to get a list out of this function, you can do so like this:</p>
<pre><code>def endwords(sent):
    return list({word for word in sent.split() if '.' in word})
</code></pre>
<p>Since you said in your question you want to check if the word ends with a '.', you probably also want to use the endswith() function like so:</p>
<pre><code>def endwords(sent):
    return list({word for word in sent.split() if word.endswith('.')})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>After statement</p>
<pre><code>list = []
</code></pre>
<p>you can't use built-in <a href="https://docs.python.org/3/library/stdtypes.html#lists" rel="nofollow noreferrer"><code>list</code> class</a> and to understand that you can spend about an hour or so, that's why we avoid names of built-ins for our objects. </p>
<p>More at <a href="https://stackoverflow.com/a/31087151/5997596">this answer</a>.</p>
<hr/>
<blockquote>
<p>function checks for words that end with a ''.''</p>
</blockquote>
<p>Statement </p>
<pre><code>"." in word
</code></pre>
<p>checks if <code>word</code> contains dot symbol (e.g. <code>"." in "sample.text"</code> will work ok while it simply doesn't end with dot), if you need to check that it ends with dot – use <code>str.endswith</code> method.</p>
<hr/>
<blockquote>
<p>I would like to make sure that duplicate words don't go in the list.</p>
</blockquote>
<p>just make sure before storing one that it hasn't been stored already.</p>
<hr/>
<p>Finally we can write</p>
<pre><code>def endwords(sent, end='.'):
    unique_words = []
    words = sent.split()
    for word in words:
        if word.endswith(end) and word not in unique_words:
            unique_words.append(word)
    return unique_words
</code></pre>
<h1>Test</h1>
<pre><code>&gt;&gt;&gt;sent = ' '.join(['some.', 'oth.er'] * 10)
&gt;&gt;&gt;unique_words = endwords(sent)
&gt;&gt;&gt;unique_words
['some.']
</code></pre>
<h1>P. S.</h1>
<p>If order doesn't matter – use <code>set</code>, it will take care of duplicates (works only with hashable types, <code>str</code> is hashable):</p>
<pre><code>def endwords(sent, end='.'):
    unique_words = set()
    words = sent.split()
    for word in words:
        if word.endswith(end) and word not in unique_words:
            unique_words.add(word)
    return unique_words
</code></pre>
<p>or with set comprehension</p>
<pre><code>def endwords(sent, end='.'):
    words = sent.split()
    return {word for word in words if word.endswith(end)}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can add a sample judge for the question.</p>
<pre><code>def endwords(sent):
    list = []
    words = sent.split()
    for word in words:
        if "." in word:
            if word not in list:
                list.append(word)
        # bottom if statment does not work for some reason. thats the one i am trying to fix   

    return list
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why not use a set?</p>
<pre><code>def endwords(sent):
    my_list = set()
    words = sent.split()
    for word in words:
        if "." in word:
            my_list.add(word)
    return my_list
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The less verbose way to do it would be using list comprehension, that is</p>
<pre><code>my_list = [word for word in words if '.' in word]
</code></pre>
<p>And to ensure the elements aren't duplicated, just use <code>set</code>.</p>
<pre><code>my_list = set(my_list)  # No more duplicated values
</code></pre>
</div>
<span class="comment-copy">you should avoid using names of built-ins for your objects (like <code>list</code>, <code>dict</code>, <code>str</code>, etc)</span>
