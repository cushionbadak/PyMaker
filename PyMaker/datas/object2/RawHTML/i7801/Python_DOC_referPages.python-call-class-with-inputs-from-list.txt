<div class="post-text" itemprop="text">
<p>I have a class called Interval for which I want to create multiple interval objects from a list of intervals. How do I do it with map ?</p>
<pre><code>class Interval(object):
    def __init__(self, s=0, e=0):
        self.start = s
        self.end = e

intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]]
</code></pre>
<p>I tried to do:</p>
<pre><code>objs = map(Interval, intervals)
</code></pre>
<p>But this sends the full interval as the first parameter rather than the inputs to the class individually. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.starmap" rel="nofollow noreferrer"><code>starmap</code></a> from <code>itertools</code>:</p>
<pre><code><b>from itertools import starmap</b>

objs = <b>starmap</b>(Interval,intervals)</code></pre>
<p>Mind that <code>starmap</code> works lazily (like <code>map</code> in Python-3.x) and that you will need to materialize it, for instance using <code>list(..)</code>:</p>
<pre><code>&gt;&gt;&gt; list(objs)
[&lt;__main__.Interval object at 0x7efbf7e82358&gt;, &lt;__main__.Interval object at 0x7efbf7e82390&gt;, &lt;__main__.Interval object at 0x7efbf7e823c8&gt;, &lt;__main__.Interval object at 0x7efbf7e82400&gt;, &lt;__main__.Interval object at 0x7efbf7e82438&gt;]
</code></pre>
<p>If you do not want to use the <code>itertools</code> library, an equivalent is:</p>
<pre><code>objs = map(<b>lambda x: Interval(*x)</b>,intervals)</code></pre>
<p>As far as I know, that's why they call it <em>star</em>map: because of the asterisk if you would use a lambda expression.</p>
</div>
<div class="post-text" itemprop="text">
<p>This worked for me.</p>
<pre><code>&gt;&gt;&gt; objs = []
&gt;&gt;&gt; for interval in intervals:
...     objs.append(Interval(*interval))
... 
&gt;&gt;&gt; objs
[&lt;__main__.Interval object at 0x013E67D0&gt;, &lt;__main__.Interval object at 0x013E6910&gt;, &lt;__main__.Interval object at 0x013E68F0&gt;, &lt;__main__.Interval object at 0x013E6870&gt;, &lt;__main__.Interval object at 0x013E6950&gt;]
&gt;&gt;&gt; objs[0]
&lt;__main__.Interval object at 0x013E67D0&gt;
&gt;&gt;&gt; objs[0].start
1
&gt;&gt;&gt; objs[0].end
2
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Maybe you can try also the old-school way:</p>
<pre><code>class Interval(object):
    def __init__(self, s=0, e=0):
        self.start = s
        self.end = e


def map_intervals(intervals):
        ret = []
        for inter in intervals:
          ret.append(Interval(inter[0],inter[1]))
        return ret
inters = [[1,2],[3,5],[6,7],[8,10],[12,16]]
</code></pre>
</div>
<span class="comment-copy">objs = list(map(Interval, intervals)) should work</span>
<span class="comment-copy">@AlanLeuthard: it works, but then <code>s</code> will get a list as input, and <code>e</code> will be <code>0</code> for all cases...</span>
<span class="comment-copy">Are you everywhere at this time of the night? hahaha, and also better answer... I must admit</span>
<span class="comment-copy">Ah! starmap, this is what I was looking for. Thanks!</span>
<span class="comment-copy">yeah that works! good</span>
<span class="comment-copy">yeah that works! good</span>
