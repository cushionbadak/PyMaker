<div class="post-text" itemprop="text">
<p>I have <code>import.py</code> script. I want to extract some code into a separate file, say, <code>m1.py</code>:</p>
<pre><code>$ ls
import.py  m1.py

$ cat import.py
from .m1 import a
a()

$ cat m1.py
def a():
    print('it works')

$ python import.py
Traceback (most recent call last):
  File "import.py", line 1, in &lt;module&gt;
    from .m1 import a
ModuleNotFoundError: No module named '__main__.m1'; '__main__' is not a package
</code></pre>
<p>When I switch to absolute import, it works. But I don't want accidentally importing other module. I want to be sure module from script's directory is imported. How do I make it work? Or what am I doing wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're not overriding the built in modules. By default, python looks first in your current directory for the file name you want to import. So if there is another script having the same name in another directory, only the one you have in the current directory is the one that will be imported.</p>
<p>Then, you could import using the absolute import.</p>
<pre><code>from m1 import a
a()
</code></pre>
<p>You can check <a href="https://stackoverflow.com/questions/4383571/importing-files-from-different-folder-in-python">this</a> post out, for more infrotmation about importing in python.</p>
<p>To make sure that the one your importing isn't the built in. You can create your own package in the current directory for example,"my_package" and have your module m1 moved in it. Then you can import by:</p>
<pre><code>from my_package import m1
m1.a()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Add <code>__init__.py</code> in the directory where m1.py is.<br/>
EDIT : Run it as a package from the previous working directory. <code>cd .. &amp;&amp; python -m prev_dir.import</code></p>
</div>
<span class="comment-copy">The <a href="https://docs.python.org/3/tutorial/modules.html#the-module-search-path" rel="nofollow noreferrer">doc</a> says, "When a module named spam is imported, the interpreter first searches for a built-in module with that name. If not found, it then searches for a file named spam.py in a list of directories given by the variable <a href="https://docs.python.org/3/library/sys.html#sys.path" rel="nofollow noreferrer">sys.path</a>." So I can't override built-in module with module from script's directory.</span>
<span class="comment-copy">Yes, you are write. What I said above will work if your overriding a module located one of your PATH directories. You can make sure by creating your own package. In the current directory create folder called "my_package" in that folder create an "__init__".py then move your m1.py file in the my_package folder. Then import by saying from my_package import m1 m1.a()</span>
<span class="comment-copy">I was just correcting your words (the ones in the answer, concerning built-in modules). I like your answer more. As for creating a package, what difference would that make?</span>
<span class="comment-copy">Nothing really, Creating a package is just a way to organize your modules. You can group modules that are some how related, in one package. So Instead of filling your main directory with bunch of individual files you can have a packages, and each package contains some modules. For ex: I can create a package "Communication" which contains all modules that my main script communicate with, and so on.</span>
<span class="comment-copy">No it's not like that, I am not trying to override the built in module by that. It's more of addressing the full path of the module that you want to import. So instead of just specifying the name of the module, we are specifying the parent package that the module is found in. The only way you will import a built in module like that, is if there is a built in package\module called my_package and inside that package there is a module called m1.</span>
<span class="comment-copy">One might probably add here, that relative imports are <a href="https://docs.python.org/3/tutorial/modules.html#intra-package-references" rel="nofollow noreferrer">not available</a> in main modules.</span>
