<div class="post-text" itemprop="text">
<p>I have a list of lists like:</p>
<pre><code>[ ['key1287', 'key5842', 'key3209','key5940', 'key42158', 'key43402', 'key31877', 'key51205', 'key2886'], 
  ['key41931', 'key41931', 'key41931', 'key41931'], 
  ['key453','key0090'], 
  ['key45333','key5432'],
  ['key453313','key51432'] ]
</code></pre>
<p>How can I access the elements one by one of the first and second index?</p>
<p>Thanks in advance.</p>
<p><strong>EDITED</strong></p>
<p>Suppose I have a list of many lists. The lenth of the list in unknown. Suppose 30000. After some calculation i end up that i want to take the elements (one-by-one) of the 30 and 31 index of the list. Also these indexes is not known. I know of them in runtime. Can someone help me with this?</p>
<p>Thank you again.</p>
</div>
<div class="post-text" itemprop="text">
<p>Take a slice at the desired position and <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer">chain</a> the results:</p>
<pre><code>def get_sublist_items(the_list, index=0, n=2):
    return chain.from_iterable(the_list[index:index + n])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>for key in listoflists[0]+listoflists[1]:
   # do your magic
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You want the first and second element of the sublists right?</p>
<pre><code>your_list = [ ['key1287', 'key5842', 'key3209','key5940', 'key42158', 'key43402', 'key31877', 'key51205', 'key2886'], 
  ['key41931', 'key41931', 'key41931', 'key41931'], 
  ['key453','key0090'], 
  ['key45333','key5432'],
  ['key453313','key51432'] ]
s=[(sublist[0],sublist[1]) for sublist in your_list]

print(s)
</code></pre>
<p>output:</p>
<pre><code>[('key1287', 'key5842'), ('key41931', 'key41931'), ('key453', 'key0090'), ('key45333', 'key5432'), ('key453313', 'key51432')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd recommend using chain:</p>
<pre><code>from itertools import chain
superlist = [["a", "b"], ["c", "d"], ["e", "f"]]
for element in chain(superlist[0], superlist[1]):
    print(element)
# or
for element in chain.from_iterable(superlist[0:2])
    print(element)
</code></pre>
<p>They both output:</p>
<pre><code>a
b
c
d
</code></pre>
<p>Chain iterates over the first list until completed, then begins with the following and so on. 
This is quite efficient due to not needing to create a new list that is the sum of the lists you want to iterate over.</p>
<p>Update:</p>
<p>If the indexes may vary you can do the following:</p>
<pre><code>def get_sublist(superlist, index, n):
    return chain.from_iterable(superlist[index:index + n])

for element in get_sublist(superlist, 30, 2):
    print(element)
</code></pre>
</div>
<span class="comment-copy">With a <i>nested</i> <code>for</code> loop...</span>
<span class="comment-copy"><code>(element for sublist in lists for element in sublist[:2])</code></span>
<span class="comment-copy">What did you mean by "of the first and second index"?</span>
<span class="comment-copy">Btw you should've included all of this in the question to begin with. No such thing as too clear a question. Having a small sample set of data is a good start. Providing a sample of desired output even better. Showing the actual code you're having trouble with pretty much required, or you'll get a lot of "SO is not a code writing service" comments.</span>
<span class="comment-copy">That's when you have to reduce it down to a bare minimal, complete and verifiable example. Remove the unnecessary, leaving just what you're after â€“ in this case the "get a couple of sublists from a list of lists". You don't need to post your current code as is. In producing said minimal example you might even find the answer yourself :)</span>
