<div class="post-text" itemprop="text">
<p>I wanted to make sure that when using requests library to post to an HTTP server, it would refuse to communicate using TLSv1 or TLSv1.1.  To do this, I configured my https server to force the SSL protocol to use either TLSv1 or TLSv1.1. I expected these versions to be rejected.</p>
<p>My python program is running on CentOs machine:</p>
<pre><code>cat /etc/centos-release
CentOS release 6.7 (Final)
</code></pre>
<p>The default Python version is 2.6.6:</p>
<pre><code>which python
/usr/bin/python
Python 2.6.6 (r266:84292, Aug 18 2016, 15:13:37) 
[GCC 4.4.7 20120313 (Red Hat 4.4.7-17)] on linux2
</code></pre>
<p>I installed python 2.7:</p>
<pre><code>which python2.7
/usr/local/bin/python2.7
Python 2.7.6 (default, Jun  2 2017, 11:37:31) 
[GCC 4.4.7 20120313 (Red Hat 4.4.7-16)] on linux2
&gt;&gt;&gt; import ssl
&gt;&gt;&gt; ssl.OPENSSL_VERSION
'OpenSSL 1.0.1e-fips 11 Feb 2013'

openssl version
OpenSSL 1.0.1e-fips 11 Feb 2013
</code></pre>
<p>Using pip2.7, I installed the libraries required get requests to run.  I did not make any changes to the openssl.</p>
<p>I sent two test alerts and it seems that my program negotiated down to TLSv1.  I was under the impression that TLSv1 is deprecated.  The program is executing using python 2.7 and not the system default of python 2.6.</p>
<p>At the top of the python program I embedded:
    #!/usr/local/bin/python2.7</p>
<p>Below are the 2 post alerts that shows TLSv1.1 and TLSv1 going through:</p>
<pre><code>"POST /testpost HTTP/1.1" 200 43 TLSv1.1/ECDHE-RSA-AES256-SHA "-" "python-requests/2.5.1 CPython/2.6.6 Linux/2.6.32-573.22.1.el6.x86_64" 0.006 &lt;"{for: test purposes}"

"POST /testpost HTTP/1.1" 200 43 TLSv1/ECDHE-RSA-AES256-SHA "-" "python-requests/2.5.1 CPython/2.6.6 Linux/2.6.32-573.22.1.el6.x86_64" 0.006 &lt;"{for: test purposes}"
</code></pre>
<p>Any thoughts?</p>
</div>
<div class="post-text" itemprop="text">
<p>The documentation of the <a href="https://docs.python.org/3/library/ssl.html#ssl.wrap_socket" rel="nofollow noreferrer">ssl</a> module has a table which shows which protocol settings work together. Usually if a client and a server both using <code>PROTOCOL_TLS</code> (which is the same as <code>PROTOCOL_SSLv23</code>) connect they use the highest shared protocol version. If there is no compatible version (e.g. the server only speaks 1.1, the client only 1.0) then you'll get an error.</p>
<p>The <code>requests</code> <a href="http://docs.python-requests.org/en/master/user/advanced/#example-specific-ssl-version" rel="nofollow noreferrer">documentation</a> shows how you can force a <em>client</em> to use a specific tls version, e.g. to force TLS 1.2 you could use (slightly modified example):</p>
<pre><code>import ssl

from requests.adapters import HTTPAdapter
from requests.packages.urllib3.poolmanager import PoolManager

class Tls12Adapter(HTTPAdapter):
    """"Transport adapter that forces TLSv1.2"""

    def init_poolmanager(self, *pool_args, **pool_kwargs):
        self.poolmanager = PoolManager(
            *pool_args,
            ssl_version=ssl.PROTOCOL_TLSv1_2,
            **pool_kwargs)
</code></pre>
<p><a href="https://github.com/shazow/urllib3/blob/a8948b82f1a54c8f5ffabb01c52f2098785013a2/CHANGES.rst#117-2016-09-06" rel="nofollow noreferrer">Recent</a> versions of <code>urllib3</code> (which requests uses for connections) allow to pass a <code>SSLContext</code> instead, which allows for more flexible configurations, e.g. blocking specific versions while allowing any newer version:</p>
<pre><code>import ssl
import requests

from requests.adapters import HTTPAdapter
from requests.packages.urllib3.poolmanager import PoolManager
from requests.packages.urllib3.util import ssl_


class TlsAdapter(HTTPAdapter):

    def __init__(self, ssl_options=0, **kwargs):
        self.ssl_options = ssl_options
        super(TlsAdapter, self).__init__(**kwargs)

    def init_poolmanager(self, *pool_args, **pool_kwargs):
        ctx = ssl_.create_urllib3_context(ssl.PROTOCOL_TLS)
        # extend the default context options, which is to disable ssl2, ssl3
        # and ssl compression, see:
        # https://github.com/shazow/urllib3/blob/6a6cfe9/urllib3/util/ssl_.py#L241
        ctx.options |= self.ssl_options
        self.poolmanager = PoolManager(*pool_args,
                                       ssl_context=ctx,
                                       **pool_kwargs)

session = requests.session()
# disallow tls1.0 and tls1.1, allow only tls1.2 (and newer if suported by
# the used openssl version)
adapter = TlsAdapter(ssl.OP_NO_TLSv1 | ssl.OP_NO_TLSv1_1)
session.mount("https://", adapter)
</code></pre>
</div>
<span class="comment-copy">The client will try to speak the tls version the server supports, it doesn't automatically reject it unless you tell it to. How did you do that in your script? See <a href="https://lukasa.co.uk/2013/01/Choosing_SSL_Version_In_Requests/" rel="nofollow noreferrer">this post</a> (or <a href="http://docs.python-requests.org/en/master/user/advanced/#example-specific-ssl-version" rel="nofollow noreferrer">this</a>) on how to force a specific ssl/tls version.</span>
<span class="comment-copy">Thank you, this is what I suspected but wasn't clear.  I have already read that blog post you referred to and it seems it restricts to one protocol.  I was hoping that one could supply a list of ones you would be okay with.</span>
<span class="comment-copy">This second codeblock is the correct method, very good example.</span>
<span class="comment-copy">Thank you, that worked.  Just as an FYI, you need to have Python 2.7.9 for the first approach and 2.7.13 for the second approach.  I upgraded from 2.7.6 to 2.7.13 to get it to work.</span>
