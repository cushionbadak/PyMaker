<div class="post-text" itemprop="text">
<p>I've tried the following function. Which is supposed to get a list of lists, check if each one of its sublists contain an int value, turning it into int, or if it doesn't, deleting it. To do this this is supposed to create a newX which would be a new sublist with nothing but ints, and a newlist which would contain the sublists.</p>
<p>I've managed to get the values from the sublist, but I can't wrap my mind around how to put the values of each sublist back into x. Since by creating a new sublist now I need a whole new list of lists and I'm really confused around the whole thing. There must be an easier way.</p>
<pre><code>def forceInt(list):
    newList = []
    for x in list:
        newX = []
        for y in x:
            try:
                int(y)
            except:
                continue
            else:
                newX.append(int(y))
        newList.append(newX)
    return newList

print(forceInt(adsVal))
</code></pre>
<p>Sample input:</p>
<pre><code>adsVal = [['Students', 'inactive', '3'], ['Campaign 1', 'not_delivering', '']]
</code></pre>
<p>Sample output:</p>
<pre><code>[['3'], []]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may use nested <em>dict comprehension</em> with <a href="https://docs.python.org/3/library/stdtypes.html#str.isdigit" rel="nofollow noreferrer"><strong><code>str.isdigit()</code></strong></a> filter as:</p>
<pre><code>&gt;&gt;&gt; adsVal = {'Students': ['inactive', '3'], 'Campaign 1': ['not_delivering', '']}

#                           v returns `True` if the string is a digit
&gt;&gt;&gt; {k:[vv for vv in v if vv.isdigit()] for k, v in adsVal.items()}}
{'Students': ['3'], 'Campaign 1': []}
</code></pre>
<p><strong>Edit:</strong> Based on the edit in the question, <em>dict comprehension</em> is not required. In order to get the list of values, you may use <em>list comprehension</em> expression as:</p>
<pre><code>&gt;&gt;&gt; [[vv for vv in v if vv.isdigit()] for v in adsVal.values()]
[['3'], []]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is a bit verbose but here is my take:</p>
<pre><code>adsVal = {'Students': ['inactive', '3'], 'Campaign 1': ['not_delivering', '']}

def check(value):
    try:
        int(value)
        return True
    except ValueError:
        return False

res = {k: [x for x in v if check(x)] for k, v in adsVal.items()}
print(res)  # {'Students': ['3'], 'Campaign 1': []}
</code></pre>
<hr/>
<p>Now for your edit if you have a list of lists you can apply the same logic:</p>
<pre><code>adsVal = [['Students', 'inactive', '3'], ['Campaign 1', 'not_delivering', '']]

def check(value):
    try:
        int(value)
        return True
    except ValueError:
        return False

res = [[x for x in sub if check(x)] for sub in adsVal]
print(res)  # [['3'], []]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In case you want to work with a <strong>list of lists</strong>, you can simply use nested <em>list comprehension</em>:</p>
<pre><code>[[v for v in vs if isinstance(v,int)] for vs in data]
</code></pre>
<p>(where <code>data</code> is the original list). This generates:</p>
<pre><code>&gt;&gt;&gt; [[v for v in vs if isinstance(v,int)] for vs in data]
[[], []]
</code></pre>
<p>Nevertheless your sample list does <strong>not contain any <code>int</code>s</strong>: it contains <strong><code>str</code>ings that <em>represent</em> numbers</strong>. In that case, you should use <code>str.isdigit()</code>:</p>
<pre><code>[[v for v in vs if v.isdigit()] for vs in data]
</code></pre>
<p>this generates:</p>
<pre><code>&gt;&gt;&gt; [[v for v in vs if v.isdigit()] for vs in data]
[['3'], []]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do</p>
<pre><code>In [1]: adsVal = [['Students', 'inactive', '3'], ['Campaign 1', 'not_delivering', '']]
In [2]: map(lambda x: filter(str.isdigit, x), adsVal)
Out[2]: [['3'], []]
</code></pre>
<p><strong>Py3</strong></p>
<pre><code>In [3]: list(map(lambda x: list(filter(str.isdigit, x)), adsVal))
Out[3]: [['3'], []]
</code></pre>
</div>
<span class="comment-copy">That's not a list of lists, but a dict of lists...</span>
<span class="comment-copy">My bad, let me fix it</span>
<span class="comment-copy">but then why is <code>'Students'</code> and <code>'Campaign 1'</code> still part of the output?</span>
<span class="comment-copy">My bad again, sorry</span>
<span class="comment-copy">The specs have changed a bit, so perhaps the answer should be updated. Nevertheless +1 for solving it rather elegantly.</span>
<span class="comment-copy">@WillemVanOnsem Thanks for pointing the updates in the question. I appreciate it!</span>
<span class="comment-copy">The dictionary form is useful too! Thanks!</span>
<span class="comment-copy">It works! It'll take me a while to understand it but thanks! :)</span>
<span class="comment-copy">@MiguelAlberolaCano See the edit for the list of lists</span>
<span class="comment-copy">I checked it out too, thanks!</span>
<span class="comment-copy">I love how it's all in one line! It's so elegant! I'll take this one. Thanks :)</span>
<span class="comment-copy">Note that in Python-3.x, this will produce generators, and not lists.</span>
<span class="comment-copy">Updated @WillemVanOnsem</span>
<span class="comment-copy">I'm confused about what In and Out mean :S</span>
<span class="comment-copy">it is in <code>ipython</code>. In means input and Out means output in interpreter</span>
