<div class="post-text" itemprop="text">
<p>For example, I created a directory and want to populate it with a specified number of files.
For example</p>
<pre><code>File 1 
File 2
File 3
etc . . .
File n
</code></pre>
<p>all in the same directory.</p>
</div>
<div class="post-text" itemprop="text">
<p>Without <code>pathlib</code>, and cross-platform:</p>
<pre><code>import os

target_path = "/path/to/target/dir"
files_num = 9

for i in range(files_num):
    with open(os.path.join(target_path, "File{}".format(i+1)), "a"):
        pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're running Python 3.4+ you can do it easily with <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code></a>:</p>
<pre><code>from pathlib import Path

n = 9 
for i in range(1, n+1):
    Path(f"File{i}").touch() 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python2/3 compliant, using <code>os.system</code>.</p>
<h3>Unix/GNU</h3>
<pre><code>import os

for i in range(5):
    os.system('touch File%d' %i)
</code></pre>
<p>An alternative approach using <code>subprocess</code>, as suggested by idjaw:</p>
<pre><code>import subprocess
for i in range(5):
    subprocess.Popen(['touch', 'File{}'.format(i)])
</code></pre>
<h3>Windows</h3>
<pre><code>for i in range(5):
    os.system('type nul &gt; File%d' %i)
</code></pre>
<h3>OS Independent</h3>
<pre><code>for i in range(5):
    with open('File%d' %i, 'w') as f: pass
</code></pre>
</div>
<span class="comment-copy">show your current code</span>
<span class="comment-copy">don't have any code and not looking for any. Just want a hint for a starting point, like commands I should use or packages I should import</span>
<span class="comment-copy">a hint: use <code>os</code> module. that's all</span>
<span class="comment-copy">I understand that this method would call for a for loop also for the specified number of files to be created. Do you know the command to create files in python. (Still learning the langauge)</span>
<span class="comment-copy"><code>"/path/to/target/dir"</code> is not a very cross-platform path.</span>
<span class="comment-copy">@planetp - actually, it is (as long as we're not talking about some obscure OSes or fringe Python implementations, of course). Python does automatic path conversions for all file operations, it's just that different OSes will mount different devices/partitions in different ways so Windows would expect to set a drive letter in the beginning if you want to select a different partition/device, but the above path will work perfectly fine for selecting the root path from your CWD be it Windows, Linux, BSD, OSX or any other flair of those.</span>
<span class="comment-copy">Then why bother with <code>os.path.join()</code>?</span>
<span class="comment-copy">Because while one cannot be responsible for user input (and both <code>target_path</code> and <code>files_num</code> are obviously user inputs here) that doesn't mean that the meat of a process should not follow best practices.</span>
<span class="comment-copy">Good call on <code>Path</code>! And funny how this was only introduced in Python 3.4. So useful!</span>
<span class="comment-copy">I appreciate the help</span>
<span class="comment-copy">This is Python 3.6+ only, format prefix is not available in earlier versions.</span>
<span class="comment-copy">@zwer If you have an earlier version, then format with <code>str.format()</code> or <code>%</code></span>
<span class="comment-copy">Good call, yeah. I agree with making use of the string format method here.</span>
<span class="comment-copy">If you are going to go that route, you are better off using subprocess instead: <code>subprocess.Popen(['touch', 'file{}'.format(i)])</code></span>
<span class="comment-copy">@idjaw It's a clean alternative. But why would you prefer one over the other, in this instance?</span>
<span class="comment-copy">To your point, absolutely a clean alternative. The <code>subprocess</code> module was introduced after <code>os.system</code>, therefore is more well supported and I believe supports more if you look to go more <i>advanced</i>. I'll point to some answers that discussed this <a href="https://stackoverflow.com/questions/4813238/difference-between-subprocess-popen-and-os-system">here</a>. However, to not take away from your answer, for this example in particular, yes it provides a clean solution.</span>
<span class="comment-copy">I never thought I'd see a platform-dependent way of creating a file in <i>python</i>, yet here we are. Just... just why?</span>
<span class="comment-copy">@Rawing for the purpose of completeness, I suppose? I don't know, it is very late here.</span>
