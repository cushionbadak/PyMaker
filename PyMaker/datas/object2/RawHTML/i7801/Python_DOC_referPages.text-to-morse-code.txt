<div class="post-text" itemprop="text">
<p>I recently found out that you can play sounds in python. I instantly wanted to make a text to morse code program but when I try to assign winsound.Beep(600,300) to "a" and launch, it just beeps once and when i type a it does nothing.</p>
<pre><code>import winsound
def dot():
    winsound.Beep(600,100)
def line():
    winsound.Beep(600,100)
a = dot(), line()    #it doesn't work when i just do
                     #a = winsound.Beep(600,100) either
                     #and it beeps at the beginning which i don't want
</code></pre>
<p>can you tell me how i can assign winsound.Beep() to a varible?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are mixing up "code that runs right now" with "code I want to run later".</p>
<p>Your line,</p>
<pre><code>a = dot(), line()
</code></pre>
<p>runs <code>dot()</code> (which beeps and returns <code>None</code>) then runs <code>line()</code> (which beeps and returns <code>None</code>) then assigns the result <code>(None, None)</code> to the variable <code>a</code>.</p>
<p>Instead try</p>
<pre><code>def a():
    dot()
    line()
</code></pre>
<p>which creates a function which you can run later by calling <code>a()</code>... but it will still sound like one continuous beep, because you need to add a short pause after each tone in the definitions of <code>dot()</code> and <code>line()</code>. You might find <code>time.sleep()</code> useful, or possibly <code>winsound</code> already provides something similar.</p>
<p><strong>Edit:</strong></p>
<p>You can use a dispatch table (a dict that translates characters to function calls) and an input loop, like so:</p>
<pre><code>MORSE_CHARS = {
    "a": (dot, line),
    "b": (dot, dot, line),
    # define other characters and space here
}

def morse(s):
    """
    Turn string s into Morse beeps
    """
    for ch in s.lower():
        for fn in MORSE_CHARS[ch]:
            fn()

def main():
    while True:
        s = input("Enter text to play (or just hit Enter to quit): ")
        if s:
            morse(s)
        else:
            break

if __name__ == "__main__":
    main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My solution to your problem will involve passing functions as parameters to other functions. If this is unfamiliar to you, I suggest you look into functional programming with Python a little bit.</p>
<pre><code>import winsound
import time

# first - create the `dot` and `line` functions
def dot():
    winsound.Beep(600, 100)
    time.sleep(0.1)               # this is in seconds

def line():
    ....

def space():
    ....

def full_stop():
    ....

# now you need some way of mapping letters to sounds
mapping = {
    "a": (dot, line),
    "b": (line, dot, dot, dot),
    ....
    " ": (space,),                 # A one-tuple is defined like this, not like `(var)`
    ".": (full_stop,)
}

# And as a final step you need a function to play the sounds
def play_morse(message):
    for character in message:
        character = character.lower()
        if character in mapping:
            for func in mapping[character]:
                func()
        else:
            print("Unknown character: '{}'".format(character))
</code></pre>
<p>You would use the function like so:</p>
<pre><code>&gt;&gt;&gt; play_morse("Hello world!")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In python everything is an object. If you run this:</p>
<pre><code>a = dot()
</code></pre>
<p>Execute dot() and assign the returned value to <code>a</code> - in your case it's <code>None</code>. </p>
<p>However, if you want to "assign" the function <code>dot()</code> to <code>a</code> and then call <code>a</code> you do this:</p>
<pre><code>a = dot
a()
</code></pre>
<p>In this case the names <code>a</code> and <code>dot</code> refer to the same object. <code>a</code> is now a function which you call with parentheses only.</p>
</div>
<div class="post-text" itemprop="text">
<p>Adding a layer of indirection is often helpful. Define the character values separately from the playing, then you can loop over any text:</p>
<pre><code>import winsound
import time

# define the values for the alphabet (using easy to verify strings)
alphabet = dict(
    a='.-',
    b='-...',
    c='-.-.',
    d='-..',
    e='.',
    h='....',
    l='.-..',
    o='---',
    w='.--',
    r='.-.',
    # etc.
)
</code></pre>
<p>How to play (single) dots and dashes (the lines are referred to as dashes):</p>
<pre><code>def play_dot():
    winsound.Beep(600, 100)

def play_dash():
    winsound.Beep(500, 200)  # a bit lower frequency, double length
</code></pre>
<p>Play one character by looking up the morse value for the character in the <code>alphabet</code> and then iterate over the dots/dashes:</p>
<pre><code>def play_char(ch):
    if ch == ' ':             # space is a special case
        time.sleep(0.9)       # wait for 0.9 seconds before returning
        return '&lt;space&gt;'

    morseval = alphabet[ch]   # morseval is now a series of dots/dashes
    for d in morseval:        # loop over them
        if d == '.':          # if it's a dot, play a dot
            play_dot()
        else:
            play_dash()
        time.sleep(0.1)       # a small break (0.1 secs) makes it easier on the ears

    return morseval           # return the morse value so we can see what was played.. 
</code></pre>
<p>to play a text, assuming it's ascii, just iterate through the characters and play each of them in turn:</p>
<pre><code>def txt2morse(txt):
    for ch in txt.lower():    # convert the text to lower case, just in case..
        print play_char(ch),  # Python 2.7'ism to keep printing on the same line
    print
</code></pre>
<p>then:</p>
<pre><code>&gt;&gt;&gt; txt2morse('hello world')
.... . .-.. .-.. --- &lt;space&gt; .-- --- .-. .-.. -..
</code></pre>
</div>
<span class="comment-copy">How about make a dict of alphabet with strings of 1 and zero and then when the letter is called you open the dict, go char by char and play the correct sound?</span>
<span class="comment-copy">maybe you'll need a pause between them (<code>time.sleep(100)</code>?)</span>
<span class="comment-copy">What <code>a = dot(), line()</code> means is the following: "Execute function <code>dot</code> and get the result. Execute the function <code>line</code> and get the result. Assign a <code>tuple</code> of the results to the variable <code>a</code>." So you get two beeps (with no time in between) and the variable <code>a</code> which equals <code>(None, None)</code>.</span>
<span class="comment-copy">You can't expect to type the name of a variable (<code>a</code>) and have it run some code. That's not how it works. The best you can do is to make <code>a</code> a function and then call <code>a()</code>.</span>
<span class="comment-copy">@Rawing i can try that but when i run the program i'll have to write h(), i() in order to get hi right?</span>
<span class="comment-copy">is there a way to do it with an input?</span>
<span class="comment-copy">You mean like <code>play_morse(input("Enter a message: "))</code> ?</span>
<span class="comment-copy">like when i run the program it'll say "enter a message:"</span>
<span class="comment-copy">The <a href="https://docs.python.org/3/library/functions.html#input" rel="nofollow noreferrer"><code>input</code></a> function is meant exactly for this.</span>
