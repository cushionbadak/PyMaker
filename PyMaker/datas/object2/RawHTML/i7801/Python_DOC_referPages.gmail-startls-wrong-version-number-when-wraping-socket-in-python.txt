<div class="post-text" itemprop="text">
<p>I am trying to connect to Gmail's SMTP using sockets in Python3. With this code (omitting the response-recieving parts):</p>
<pre><code>import ssl
import base64
from socket import *

cs = socket(AF_INET, SOCK_STREAM)
cs.connect(("smtp.gmail.com", 587))
cs.send(b'EHLO smtp.google.com\r\n')
cs.send(b'STARTTLS\r\n')
ws = ssl.wrap_socket(cs, ssl_version=ssl.PROTOCOL_TLSv1, ciphers="ADH-AES256-SHA")
</code></pre>
<p>But I'm getting the following error in <code>do_handshake</code>
    in the last line: </p>
<p><code>ssl.SSLError: [SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:645)</code></p>
<p>I have also tried the following version in the last line:</p>
<pre><code>ssl_version=ssl.PROTOCOL_SSLv23
            ssl.PROTOCOL_TLSv1
            ssl.OP_NO_SSLv3
            ssl.OP_NO_TLSv1
            ssl.PROTOCOL_SSLv2
            ssl.PROTOCOL_SSLv23
            ssl.PROTOCOL_SSLv3
            ssl.PROTOCOL_TLSv1
</code></pre>
<p>Am I doing something wrong ? Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that you're never receiving on your socket.  You may be able to get away with that on some servers (have my doubts) but Google's servers don't like it.  Really don't think it would work with any server as I'm pretty sure you need a clean receive buffer so the TLS negotiation can take place without a bunch of prior junk still in the pipeline.</p>
<p>Your code is working with the following changes for me:</p>
<pre><code>import ssl
import base64
from socket import *

cs = socket(AF_INET, SOCK_STREAM)
cs.connect(("smtp.gmail.com", 587))
print(cs.recv(4096))
cs.send(b'EHLO smtp.google.com\r\n')
print(cs.recv(4096))
cs.send(b'STARTTLS\r\n')
print(cs.recv(4096))
ws = ssl.wrap_socket(cs, ssl_version=ssl.PROTOCOL_TLSv1)
ws.send(b'MAIL FROM: abc@def.com\r\n')
print(ws.recv(4096))
</code></pre>
<p>But as has already been mentioned in the comments, unless this is just for fun and/or a learning experience, you should be using python's smtplib.</p>
</div>
<span class="comment-copy">You are not correctly handling STARTTLS connections. The way to do so is specified in <a href="https://tools.ietf.org/html/rfc3207" rel="nofollow noreferrer">RFC 3207</a> for SMTP. You should be using instead an smtp library that can handle STARTTLS. Fortunately python's <a href="https://docs.python.org/3/library/smtplib.html" rel="nofollow noreferrer">smtplib</a> module does this.</span>
<span class="comment-copy">@JamesKPolk I'll read the RFC better this time.  And yes I've used the smtp lib before, but I need to use sockets for this experiment.  Thank you.</span>
<span class="comment-copy">@JamesKPolk I belive the only wrong part in this code is the last line, where i try to create a SSL socket. Can you help me there ?</span>
<span class="comment-copy">Interesting, it does work but it seams to fail afterwards.  Is it possible to be that my TLS protocols are different from GMails ones ?</span>
<span class="comment-copy">Not sure what fails afterwards is supposed to mean.  You'd need to be a bit more specific.  Gmail is going to require that you authenticate properly before it has any chance of working.</span>
