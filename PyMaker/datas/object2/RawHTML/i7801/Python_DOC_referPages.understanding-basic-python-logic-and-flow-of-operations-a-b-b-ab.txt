<div class="post-text" itemprop="text">
<p>I am trying to understand the code provided on the Python.org tutorial in section 3.2</p>
<pre><code>a, b = 0, 1
&gt;&gt;&gt; while b &lt; 10:
...     print(b)
...     a, b = b, a+b
</code></pre>
<p>The code above results in the sequence as follows:</p>
<pre><code>1
1
2
3
5
8
</code></pre>
<p>My questions are as follows:</p>
<ol>
<li><p>Why do the numbers appear vertically and not horizontally like a print statement generally does?  I know you can force the numbers to appear horizontally but want to understand why that is not the default.</p></li>
<li><p>Most importantly, how is the python logic working?  I understand its the fibonacci sequence but you're only asking the code to print "b".  It should just print a+b over and over again, should it not (resulting in 1 being printed over and over again)?  I don't understand how the logic within python progresses the sequence.</p></li>
</ol>
<p>Any help is much appreciated.  Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>The python print statement by default generates a newline after each print. 
This causes each printed item to appear on its own line. If you print a literal newline, you get two blank lines:</p>
<pre><code>&gt;&gt;&gt; print "\n"


&gt;&gt;&gt; 
</code></pre>
<blockquote>
<p>Most importantly, how is the python logic working? I understand its
  the fibonacci sequence but you're only asking the code to print "b".
  It should just print a+b over and over again, should it not (resulting
  in 1 being printed over and over again)?</p>
</blockquote>
<p>This line: </p>
<pre><code>a, b = b, a+b
</code></pre>
<p>evaluates the expressions <code>b</code> and <code>a+b</code>. If b=1 and a=0, then this results in the tuple <code>(1, 1)</code>. That tuple is then split into its two components and assigned respectively to the variables <code>a</code> and <code>b</code>. So at the end of the first iteration, a and b each get the value 1. This is ultimately equivalent to the successive operations</p>
<pre><code>tmp = b
b = a + b
a = tmp
</code></pre>
<p>but notice that here we have to create a temp variable to hold the original value of b. This is because the one-liner evaluates both of the expressions on its right-hand side before it assigns to the variables named on the left-hand side. </p>
</div>
<div class="post-text" itemprop="text">
<p>First of all your code would be quite simple if you used parentheses. The code a,b is a tupel:
<code>(a,b)=(0,1)</code>
Let's interpret the code line per line:</p>
<pre><code>While b&lt;10: #b=1
    print(b) #output:1
    (a,b) = (a,a+b) # a=1, b=1
</code></pre>
<p>Now the next iteration:</p>
<pre><code>While b&lt;10: #b=1
    print(b) #output:1
    (a,b) = (a,a+b) # a=1, b=2
</code></pre>
<p>And the next:</p>
<pre><code>While b&lt;10: #b=1
    print(b) #output:2
    (a,b) = (a,a+b) # a=2, b=3
</code></pre>
<p>And so on....
You will get
1
1
2
3
5
8
But each number in a separate line because print function add '\n'. So the output is "vertical".</p>
</div>
<span class="comment-copy">For 1. <code>print()</code> by default adds a new line character. 2. is simply assignment, <code>b</code> is assigned to <code>a</code> and <code>a+b</code> is assigned to <code>b</code>, RHS operations are conducted before the assignment</span>
<span class="comment-copy">Think og <code>a, b = b, a+b</code> as <code>(a,b) = (b, a+b)</code>. That is assigning the pair on the right hand side to the pair on the left hand side. This will result in <code>a</code> being assigned the value of <code>b</code>, and <code>b</code> the value of <code>a+b</code>. The key is that the righthand side is evaluated before either of the assignments.</span>
<span class="comment-copy">I'm trying to understand why you think it should print the same number each time. It prints the value of b, then assigns b a new value. Is that not clear?</span>
<span class="comment-copy">Thanks all for your prompt replies, I'm brand new to python so this is all very new.    when you say print(b), shouldn't that only print whatever value b was assigned?  why does it take anything related to a into account?</span>
<span class="comment-copy">@NRF It prints <code>b</code>, but the loop keeps updating <code>b</code> with new values.</span>
<span class="comment-copy">With this code <code>a,b = (1,2)</code>, <code>a and b</code> are the unpacked values of the tuple <code>(1,2)</code> this also work with <code>a, b, *c = (1, 2, 3, 4, 5)</code> where <code>a=1, b = 2 and c = (3,4,5)</code>. The same thing will happen with lists too.</span>
<span class="comment-copy">Also, it's called <code>tuple</code> not <code>tupel</code> see <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow noreferrer">here</a></span>
<span class="comment-copy">Thank you for pointing out the spelling mistake. You remind me of my Algebra teacher, Always focusingâ€‹ on what most important.</span>
