<div class="post-text" itemprop="text">
<p>I have a python command like the following:</p>
<pre><code>pick_closed_reference_otus.py -i **your_seq.fasta** -o **your_folder_name**
-i: input files
-o: output folder
</code></pre>
<p>However, I have 90 files and I would like to execute the same command.
All the Filename Extension are <code>.fasta</code>, and each output file should be placed in a specific folder.</p>
<p>Would there be anyway I can execute the command at once?</p>
</div>
<div class="post-text" itemprop="text">
<p>Internal to your program, I'm going to assume that you are opening the input file.  So when you parse the argument why not allow wildcards?<br/>
the <a href="https://docs.python.org/2/library/glob.html" rel="nofollow noreferrer">glob module</a> is what you want.  It will take a string and turn it into a list file paths, then in your program you can loop over them (or maybe use <a href="https://docs.python.org/2/library/multiprocessing.html?highlight=multiprocess#module-multiprocessing" rel="nofollow noreferrer">multiprocess</a> to run them in parallel.  </p>
<p>Here's how it works.  (I'm assuming that you're using <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">argparse</a> to get the argument from the command line...)</p>
<pre><code>import glob
import argparse
import sys
from multiprocessing import Pool, cpu_count

def your_mappable_function(filename):
    print filename.upper()


#parse the command line   
parser = argparse.ArgumentParser(description='Example argparse')
parser.add_argument('-i', action="store", type=str)
parser.add_argument('-o', action="store", type=str)
args = parser.parse_args()

#glob to get the files from the wild card
input_file_list = glob.glob(args.i)

#use multiprocessing pool to process files in parallel
pool = Pool(cpu_count())
#results = map(your_mappable_function, input_file_list)
results = pool.map(your_mappable_function, input_file_list)

sys.exit(0)
</code></pre>
<p>If you want a tutorial on these modules, check out <a href="https://pymotw.com/2/" rel="nofollow noreferrer">Python Module of the Week</a>.  It covers all of these tools (and more).  You just replace """your_mappable_function""" with a function wrapper that takes a single filename as the input, and you should be good to go.  This is faster than bash scripting, because it will not have to start and stop the python processes until the whole list has been mapped over. </p>
<p>EDIT:
When I went back to make sure the code ran, I added a function wrapper, and a way to test the code without process pooling.  Because, whenever you do mess with a pool, then it can take over your terminal on a bug.</p>
</div>
<span class="comment-copy">Yes, of course there's a way to do it. Do these have to execute concurrently, or are you just trying to save typing? What OS are you on? Is there some pattern mapping each file to its target folder?</span>
<span class="comment-copy">Note that the <a href="https://stackoverflow.com/questions/tagged/batch-file">batch-file</a> tag relates to DOS/Windows batch files, it has nothing to do with Unix; so please rethink and edit the tags...</span>
<span class="comment-copy"><a href="https://stackoverflow.com/a/30492833/6805091">This post</a> might help.</span>
