<div class="post-text" itemprop="text">
<p>I have problem accessing fields from an object in a python script I did. Basically it boils down to this little piece of code:</p>
<pre><code>from enum import Enum

class AbstractFoo:
    def __init__(self, foo='works', bar='nope'):
        self.foo = foo
        self.bar = bar

class Foo(Enum):
    test = AbstractFoo('bla', 'tada')
</code></pre>
<p>So when in the python console I try to access an element of my enum with:</p>
<pre><code>Foo.test.foo
</code></pre>
<p>I would expect it to print me 'bla' which is the value I pass to the constructor (or at least it should print 'works' which would be the default value I've assigned).</p>
<p>What I actually get is</p>
<pre><code>AttributeError: 'Foo' object has no attribute 'foo'
</code></pre>
<p>you can probably tell by now that I'm pretty new to python and especially the concept objects in python (I mostly write code in Java which might lead to some missconceptions from my part about the behaviour of objects in python).</p>
<p>What I figured out though is that I can do:</p>
<pre><code>Foo.test.foo = 'whatever'
</code></pre>
<p>and assign a value to foo in this way. But when doing this I can also assign a value to a field I haven't even specified in the constructor such as:</p>
<pre><code>Foo.test.noField = 'shouldn't even exist'
</code></pre>
<p>and it will work just as fine which I don't understand at all.</p>
<p>I would be really glad about some clarification how objects work in python and/or how I could realize an enum of a class in python.</p>
<p>EDIT: Apparently the code behaves the way I want it to if I remove the inheritance from Enum.</p>
</div>
<div class="post-text" itemprop="text">
<p>That can be quite confusing, since you are literally saying that <code>test</code> is something and then it is not anymore. That is because <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer"><code>Enum</code></a> is a special kind of class that takes all of its members and "converts" them into instance of the class. So the type of <code>test</code> is not <code>AbstractFoo</code> anymore, but instead <code>Foo</code>. However, you can get back the original value assigned to the enum instance with the <code>value</code> property:</p>
<pre><code>from enum import Enum

class AbstractFoo:
    def __init__(self, foo='works', bar='nope'):
        self.foo = foo
        self.bar = bar

class Foo(Enum):
    test = AbstractFoo('bla', 'tada')

print(Foo.test.value.foo)

&gt;&gt;&gt; bla
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As @jdehesa noted, <code>Enum</code> members are instances of their parent <code>Enum</code> class.  If you need them to also be instances of some other class simply inherit from it as well:</p>
<pre><code>class Foo(AbstractFoo, Enum):
    test = 'bla', 'tada'
</code></pre>
<p>Note that you no longer need to call <code>AbstractFoo</code> directly.</p>
</div>
<span class="comment-copy">Do you have to have an enum?  The code works the way you expect if you do not inherit <code>Foo</code> from <code>Enum</code></span>
<span class="comment-copy">It does! Thank you a lot! But what is the problem with enum then?</span>
<span class="comment-copy">When I don't use enum isn't this more like static fields (using Java lingo) belonging to class Foo now and not an enum? Not that it matters for what I'm trying to do but I prefer understanding why my code works (:</span>
<span class="comment-copy">Without enum, yes, it is similar to a static field as I understand static fields.</span>
<span class="comment-copy">I see what you're getting at! Thanks a lot for the explanation! As the first person to comment pointed out I don't really need Enum for my case anyways.. so the only thing I don't yet understand is when would you actually use Enum in python? I mean all it does is basically give the instances of your class the type Enum and force you to access fields via .value.. so why not simply leave the inheritance from Enum away and be happy?</span>
<span class="comment-copy">@Desperate <code>Enum</code> is just a convenience thing really (like most things in Python it seems 8D). It disallows (kinda) direct class instance creation and makes values comparison safer (kinda). Also it allows you to iterate through the existing values. However, it does not give you anything like switch/case completeness checking (which would require switch statements in the first place) or anything like that, so the advantages are limited.</span>
