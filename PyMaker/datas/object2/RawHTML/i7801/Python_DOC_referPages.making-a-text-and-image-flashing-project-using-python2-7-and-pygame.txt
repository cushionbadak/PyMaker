<div class="post-text" itemprop="text">
<p>I am working on a art project for school using python2.7 and pygame.</p>
<p>The effect I want to achieve is having rectangle containers scattered at random places on the screen. Each contain display while iterating through a list of chars (e.g. a to z, or alphabet in other language), or a list of images.</p>
<p>I am new to programming, and so far I have figured out how to use pygame's font and image to display image and text on display, but I m really lost in the "update" part. </p>
<p>say I am iterating through a to z, and want to display it in the same container flashing through a to z, where or how should I put it in the main while loop?</p>
<pre><code>import pygame
from string import ascii_lowercase

pygame.init()
width=4096
height=2160

testSize = 3

bgR = 0   # background red
bgG = 0   # background green
bgB = 0   # background Blue

screen = pygame.display.set_mode( ( width/testSize, height/testSize) )
imageContainer = pygame.image.load("images/westernEmoji/aaa.jpg").convert()
fpsClock = pygame.time.Clock()

imageX= 200/testSize; # x coordnate of image
imageY= 30/testSize; # y coordinate of image
running = True

# background color
black = ( bgR , bgG , bgB)

# text Container
textX= 100/testSize
textY= 100/testSize

font = pygame.font.SysFont("comicsansms", 72/testSize)
for contentA in ascii_lowercase:
    textContainer = font.render(contentA, True, (0, 128, 0))


# main while loop
while (running): # loop listeneint for end of game

    # imageContainer
    # imageX -= 20 ; #move image
    screen.fill(black) # clear screen 
    screen.blit(imageContainer , (imageX, imageY) ) # paint to screen
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.MOUSEBUTTONDOWN:
            # Set the x, y postions of the mouse click
            x, y = event.pos

    # fontContainer
    screen.fill(black) # clear screen 
    screen.blit(textContainer,(textX, textY))


    pygame.display.update()
    fpsClock.tick(30)

#loop over, quite pygame
pygame.quit()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's one solution (for the letters from a-z): Store the letters in a list or another container (I just use <a href="https://docs.python.org/3/library/string.html#string.ascii_lowercase" rel="nofollow noreferrer">string.ascii_lowercase</a> here), then after some time interval or arbitrary amount of frames increment the index, modulo by the length of the container (to keep the index in the correct range) and then rerender the font and just blit the returned surface.</p>
<pre><code>import sys
from string import ascii_lowercase
import pygame as pg


def main():
    screen = pg.display.set_mode((640, 480))
    clock = pg.time.Clock()
    font = pg.font.Font(None, 90)
    font_color = pg.Color('aquamarine1')
    index = 0
    txt_surface = font.render(ascii_lowercase[index], True, font_color)
    counter = 8  # To limit the updates to one per eight frames.

    done = False

    while not done:
        for event in pg.event.get():
            if event.type == pg.QUIT:
                done = True

        counter -= 1
        if counter &lt;= 0:
            counter = 8
            index += 1
            index %= len(ascii_lowercase)
            txt_surface = font.render(ascii_lowercase[index], True, font_color)

        screen.fill((30, 30, 30))
        screen.blit(txt_surface, (140, 140))

        pg.display.flip()
        clock.tick(30)


if __name__ == '__main__':
    pg.init()
    main()
    pg.quit()
    sys.exit()
</code></pre>
</div>
