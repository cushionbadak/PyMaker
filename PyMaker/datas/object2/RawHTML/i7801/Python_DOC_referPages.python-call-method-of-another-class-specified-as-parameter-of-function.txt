<div class="post-text" itemprop="text">
<p>I know the simplified example below is embarrassingly ugly ... hence why I have come to SO to share it with the world.</p>
<p>I would like to be able to call a class method from <code>cls</code>, specifying the particular method within <code>callmethod</code>.</p>
<pre><code>class cls(object):
    def __init__(self, var1):
        self.var1 = var1
    def method1(self):
        return self.var1 ** 2
    def method2(self):
        return self.var1 ** 3

def callmethod(method, var1):
    methods = {'method1' : cls(var1).method1(),
               'method2' : cls(var1).method2()
              }
    return methods[method]

callmethod('method1', 2)
Out[56]: 4
</code></pre>
<p><strong>Is there a way to go about this without creating a (possibly large and cumbersome) dict that links a string form of each method to the actual thing?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>What you're looking for is likely just:</p>
<pre><code>def callmethod(method, arg)
    inst = cls(arg)
    return getattr(inst, method)()
</code></pre>
<p>You can think of <code>a.b</code> as a syntax sugar for <code>getattr(a, "b")</code></p>
</div>
<span class="comment-copy">I mean just using <code>getattr</code> would negate the need for that dictionary, but I don't see how your real example and abstract example are connected at all.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/operator.html#operator.methodcaller" rel="nofollow noreferrer">operator.methodcaller</a></span>
<span class="comment-copy">or think of <code>getattr(a, "b")</code> as a function / dynamic way of doing <code>a.b</code> :P</span>
