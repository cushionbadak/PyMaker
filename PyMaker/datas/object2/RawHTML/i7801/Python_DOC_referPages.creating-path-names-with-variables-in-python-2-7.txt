<div class="post-text" itemprop="text">
<p>I'd like to create some folders to store results of some simulations in a logical way with a naming system.</p>
<p>My code has 4 main parameters that I'm investigating and I'd like to dynamically create paths with these parameters in the pathnames, example below:</p>
<pre><code>a = 'test'
b = 2
c = 3
d = 4

os.chdir('./results/test_b_c_d/outputs')
</code></pre>
<p>I'll manually change the values of a-d for now as these are just a few test results. A needs to be a string but b-d are just integers.</p>
<p>I've seen I can do </p>
<pre><code>os.path.join('./results/', test, '/outputs/'))
</code></pre>
<p>Where the 'join' command will add a folder of that name in that path directory, but can I use this or a similar command to change the actual folder name with changing variables?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>To create a string including variables values (well, the string representation of variables values), you want <code>str.format()</code>:</p>
<pre><code>a = 'test'
b = 2
c = 3
d = 4

dirname = "{}_{}_{}_{}".format(a, b, c d)
</code></pre>
<p>Then you use <code>os.path.join()</code> to create the full path in a portable way (so your code works on any supported OS). Also it's better to use absolute path (this make the code more predictable) instead of relying on either os-specific stuff ("./xxx") and/or <code>os.chdir()</code>. Here I'm using <code>o.getcwd()</code> to use the current working directory as root but it's better to use something more reliable, based either on the current user's homedir, the application's directory or some command line arg or environment variable:</p>
<pre><code>root = os.getcwd() # or whatever root folder you want 
dirpath = os.path.join(root, "results", dirname, "outputs")
</code></pre>
<p>And finally, you use <code>os.makedirs</code> to create the whole directory tree in one single call:</p>
<pre><code>if not os.path.exists(dirpath):
    os.makedirs(dirpath)
</code></pre>
<p>NB : </p>
<blockquote>
<p>I've seen I can do <code>os.path.join('./results/', test, '/outputs/')</code></p>
</blockquote>
<p>The point of <code>os.path.join()</code> is to use the appropriate path separators for the current OS, so <strong>do not</strong> hardcode path separators in your arguments - this should have been <code>os.path.join('results', test, 'outputs')</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You're looking for <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer">str.format</a>:</p>
<pre><code>&gt;&gt;&gt; print("./results/{a}_{b}_{c}_{d}/outputs".format(a=a, b=b, c=c, d=d))
./results/test_2_3_4/outputs
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a mix between <a href="https://docs.python.org/2/library/stdtypes.html#str.format" rel="nofollow noreferrer">str.format</a> to build a string using variables values and <a href="https://docs.python.org/2/library/os.path.html#os.path.join" rel="nofollow noreferrer">os.path.join</a> to build intelligently a path with the right separator (depending on platform).</p>
<p>Example:</p>
<pre><code>a = 'test'
b = 2
c = 3
d = 4

my_path = os.path.join(os.getcwd(), 'results', '{}_{}_{}_{}'.format(a,b,c,d), 'outputs')

os.chdir(my_path)
</code></pre>
<p>Not that <a href="https://docs.python.org/2/library/os.html#os.getcwd" rel="nofollow noreferrer">os.getcwd</a> is one solution to get the current working directory</p>
</div>
<span class="comment-copy">So if I understand correctly you want to generate the path <code>"./results/test_2_3_4/outputs"</code>?</span>
<span class="comment-copy">yes, but I'll be changing the values of b, c and d each time I want to save data so I want a whole bunch of folders in '/results/' with various names. And in each one of those is a folder called 'outputs'.</span>
<span class="comment-copy">This is great! Thanks :)</span>
<span class="comment-copy">Thanks this works :)</span>
