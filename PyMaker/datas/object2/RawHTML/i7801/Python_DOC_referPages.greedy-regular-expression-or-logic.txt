<div class="post-text" itemprop="text">
<p>Consider the string <code>'X Y Z'</code> and the substitution</p>
<pre><code>re.sub('Y|Y Z', '', 'X Y Z')
</code></pre>
<p>This returns</p>
<pre><code>'X  Z'
</code></pre>
<p>When it could have returned <code>'X '</code> as well.  Obviously it took the first thing it matched, substituted, and afterwards the pattern for the other alternative no longer matched.</p>
<p>Is there a way to tell the substitution to prefer the longest substitution?</p>
</div>
<div class="post-text" itemprop="text">
<p>According to <a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="nofollow noreferrer">Python <code>re</code> documentation - Regular Expression Syntax, <code>|</code> part</a>,</p>
<blockquote>
<p><code>A|B</code>, where A and B can be arbitrary REs, creates a regular expression
  that will match either A or B. An arbitrary number of REs can be
  separated by the '|' in this way. This can be used inside groups (see
  below) as well. As the target string is scanned, REs separated by '|'
  are <strong>tried from left to right. When one pattern completely matches,
  that branch is accepted. This means that once A matches, B will not be
  tested further, even if it would produce a longer overall match</strong>. In
  other words, the '|' operator is never greedy. To match a literal '|',
  use \|, or enclose it inside a character class, as in [|].</p>
</blockquote>
<p>Position the longest pattern before the shorter pattern:</p>
<pre><code>&gt;&gt;&gt; re.sub('Y Z|Y', '', 'X Y Z')
'X '
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>That would beâ€¦</h1>
<pre><code>re.sub('Y( Z)*','','X Y Z')
</code></pre>
</div>
<span class="comment-copy">What would you like the result to be?</span>
<span class="comment-copy">@ShammelLee 'X '</span>
<span class="comment-copy">See <a href="https://stackoverflow.com/a/44381861/3682217">my answer</a></span>
<span class="comment-copy">@ShammelLee upvoted already</span>
