<div class="post-text" itemprop="text">
<p>I don't know why my canvas is not displaying. There is a reference to it, <code>self._screen</code>, and it is being <code>pack</code>ed, but it does not display at all. What am I missing?</p>
<pre><code>class Map(Frame):

    def __init__(self, size):

        Frame.__init__(self)
        self.pack()

        #images
        self.spriteDimension = 20
        self.img1 = PhotoImage(file="Terrain1.gif")
        self.img2 = PhotoImage(file="Terrain2.gif")

        #grid
        self._mapSize = size
        # self._grid = self.randomize()

        #canvas
        canvas_dimension = self._mapSize * self.spriteDimension

        self._screen = Canvas(self, width=canvas_dimension, height=canvas_dimension)
        self._screen.pack()

        self.test()

    def test(self):
        print("in here")
        self._screen.create_image((50,50), anchor = NW, image = self.img1)
        print("out here")

def main():

    m =Map(20);
    m.mainloop(20);
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have a few problems from what I can see.
Unlike other programming languages you don't use <code>;</code> at the end of a line of code. You don't need to place <code>m = Map(20)</code> or <code>root.mainloop()</code> in a function. You also need to define a tkinter window so add <code>root = Tk()</code> to the start of your program. Take a look at the code below and let me know if you don't understand something.</p>
<pre><code>from tkinter import *

root = Tk()

class Map(Frame):

    def __init__(self, size):

        Frame.__init__(self)
        self.pack()

        self.spriteDimension = 20
        self.img1 = PhotoImage(file="Terrain1.gif")
        self.img2 = PhotoImage(file="Terrain2.gif")

        self._mapSize = size

        canvas_dimension = self._mapSize * self.spriteDimension

        self._screen = Canvas(self, width=canvas_dimension, height=canvas_dimension)
        self._screen.pack()

        self.test()

    def test(self):
        print("in here")
        self._screen.create_image((50,50), anchor = NW, image = self.img1)
        print("out here")

m = Map(20)
root.mainloop()
</code></pre>
</div>
<span class="comment-copy">Remove the argument to <code>mainloop</code>: i.e. use <code>m.mainloop()</code>. You also don't need the ending semicolons, but they don't hurt anything,</span>
<span class="comment-copy">my apologies I forgot to edit that mistake out</span>
<span class="comment-copy">Thank you so much! Helped a lot, but I do have a question. At one point in time my canvas was working without the root (I dont remember the exact conditions) So, What is the purpose of instantiated the root?</span>
<span class="comment-copy">ok so for tkinter you start building you GUI by creating the main toplevel window to put everything in using <a href="https://docs.python.org/3/library/tkinter.html#tkinter.Tk" rel="nofollow noreferrer">Tk()</a> and then at the bottom of your GUI code you must call <code>mainloop()</code> one time. The reason for this is to monitor all the events going on in the GUI so things can be interacted with and updated. Its kinda like a big loop for the program hence the name. Check out this <a href="https://stackoverflow.com/questions/8683217/when-do-i-need-to-call-mainloop-in-a-tkinter-application">link</a>. There is more information about <code>mainloop()</code></span>
