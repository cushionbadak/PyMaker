<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/22444/my-regex-is-matching-too-much-how-do-i-make-it-stop">My regex is matching too much. How do I make it stop?</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>Here is my code:</p>
<pre><code>s = '''I wish I may, I wish I might
Have a dish of fish tonight.'''

import re
m = re.search('w.*m', s)
print(m.group())
</code></pre>
<p>and I got the result:</p>
<pre><code>wish I may, I wish I m
</code></pre>
<p>If I want to get the result only the first half <code>wish I m</code>, how can I revise my code?</p>
<p>Thanks a lot!</p>
</div>
<div class="post-text" itemprop="text">
<p>In regular expressions, <code>.</code> means a single character and <code>.*</code> means any number of characters (0 or more).</p>
<p>When you used <code>w.*m</code>, by default, python will look for the longest sub-string that starts with <code>w</code> and ends with <code>m</code>.
This is called <em>GREEDY MATCH</em>.</p>
<p>To find a smaller sub-string in a string that starts with <code>w</code> and ends with <code>m</code>, you have to search <em>NON GREEDILY</em>.</p>
<p>For this, instead of using <code>w.*m</code>, use <code>w.*?m</code> .
Because of the <code>?</code> operator, python matches the first sub-string that is given by the regular expression.</p>
<p>Technically, <code>?</code> Causes the resulting RE to match 0 or 1 repetitions of the preceding RE. example : <code>ab?</code> will match either <code>a</code> or <code>ab</code>.
So, Here, <code>w.*?m</code> will match minimum number of characters after <code>w</code>(included) that ends with <code>m</code>(included).</p>
<pre><code>&gt;&gt;&gt; s = '''I wish I may, I wish I might
... Have a dish of fish tonight.'''
&gt;&gt;&gt;
&gt;&gt;&gt; import re
&gt;&gt;&gt; m = re.search('w.*m', s)    #GREEDY SEARCH
&gt;&gt;&gt; print(m.group())
wish I may, I wish I m
&gt;&gt;&gt; m = re.search('w.*?m', s)   #NON GREEDY SEARCH
&gt;&gt;&gt; print(m.group())
wish I m
</code></pre>
<p>Read more about REGULAR EXPRESSIONS <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>.*?</code> to <a href="http://www.regular-expressions.info/repeat.html#greedy" rel="nofollow noreferrer">match non-greedily</a>.</p>
<pre><code>&gt;&gt;&gt; s = '''I wish I may, I wish I might
... Have a dish of fish tonight.'''
&gt;&gt;&gt; 
&gt;&gt;&gt; import re
&gt;&gt;&gt; m = re.search('w.*?m', s)
&gt;&gt;&gt; m.group()
'wish I m'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What are you trying to accomplish here? Your regular expression means it will match any of the following</p>
<pre><code>'w.*m' will match:
'well my cat is married' -&gt; 'well my cat is m'
'willy wonka had a wonky moped' -&gt; 'willy wonka had a wonky m'
</code></pre>
<p>You are pretty much saying it should match any phrase that starts with <code>w</code> and ends with <code>m</code>.</p>
<p><code>wish i m</code> appears twice in the phrase as highlighted below</p>
<p>"I <code>wish I m</code>ay, I <code>wish I m</code>ight
Have a dish of fish tonight."</p>
<p>So if that's the phrase you are looking for, your result should be <code>wish I m</code>, <code>wish I m</code>. For that result you'd need this pattern - <code>w[\w\s]*m</code>.  So instead of a greedy <code>.*</code> you are limiting the matched characters to words <code>\w</code> and spaces <code>\s</code> which is all that is in <code>will I m</code>.</p>
<p>Again, it depends on what you are looking for.</p>
<pre><code>In [1]: import re
In [4]: x = 'I wish I may, I wish I might Have a dish of fish tonight'
In [5]: re.findall(r'w[\w\s]*m', x)
Out[5]: ['wish I m', 'wish I m']
</code></pre>
</div>
