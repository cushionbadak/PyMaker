<div class="post-text" itemprop="text">
<p>Suppose I want to generate index for a large header row automatically using forloop, to prevent writing index for each header.</p>
<p>In a file, I have say a header with lots of fruits name. Each column has a data which I have to access using index for downstream parsing. Rather than preparing index for each fruit name, I want to run a forloop to create the index values on fly to save time.</p>
<pre><code>data = 

      apple                     banana              orange
      genus:x,species:b    genus:x,species:b     genus:x,species:b
      genus:x,species:b    genus:x,species:b     genus:x,species:b
      variety:gala,pinklady,...  variety:wild,hybrid...   variety:florida,venz,
      flavors:tangy,tart,sweet..
      global_consumption:....
      pricePerUnit:...
      seedstocks:.....
      insect_resistance:.....
      producer:....


# first I convert the header into list like this:

for lines in data:
    if 'apple' in lines:
        fruits = lines.split('\t')
        # this will give me header as list:
        # ['apple', 'banana', 'orange']

        # then create the index as:           
        for x in fruits:
            str(x) + '_idx' = fruits.index(x)  
            # this is where the problem is for me .. !??   
            # .. because this is not valid python method
            print(x)

            # if made possible, new variable are created as
            apple_idx = 0, banana_idx = 1 ... so on

# Now, start mining your data for interested fruits
     data = lines.split('\t')
     apple_values = data[apple_idx]
     for values in apple_values:
          do something ......

     same for others. I also need to do several other things.

Make sense?? 
</code></pre>
<p>How can this be made possible? in a very simply way.</p>
<p><strong>Post Edit:</strong> After doing a lots of reading, I realized that it is possible to <strong>create a <code>variable_name</code> using <code>value(string)</code> of another varible in bash</strong>:</p>
<p><a href="https://stackoverflow.com/questions/9714902/how-to-use-a-variables-value-as-other-variables-name-in-bash">how to use a variable's value as other variable's name in bash</a></p>
<p><a href="https://unix.stackexchange.com/questions/98419/creating-variable-using-variable-value-as-part-of-new-variable-name">https://unix.stackexchange.com/questions/98419/creating-variable-using-variable-value-as-part-of-new-variable-name</a></p>
<p>But, not possible in python as I had thought. My gut feeling is that, it is possible to prepare this method within python programming language (if hacked or if author decided), but it is also possible that author of python thought and knew about possible dangers or using this method.</p>
<ul>
<li>The danger is that you always want <code>variable_name</code> to be visible in the written python script. Preparing a dynamic variable_names would have been nice, but it could lead to a problem when tracing back, if any problem arose. </li>
<li>Since, the variable name was never typed in it would be a nightmare to track and debug if any problem arose (especially in large programme), say when the variable_value was like <code>2BetaTheta</code> or <code>*ping^pong</code> which is not a valid variable_name.This is my thought. <strong>Please other people can chime in as to Why this capability was not introduced in python?</strong></li>
<li>Dict method over comes this issue since we have the record of the origin of the <code>variable_name</code>, but still the issue with valid vs. invalid variable_name doesn't go away.</li>
</ul>
<p>I am going to take some the provided answer using <code>dict method</code> and see if I can work out a very simple-comprehensive way of making this possible.</p>
<p>Thanks everyone !</p>
</div>
<div class="post-text" itemprop="text">
<p>Hopefully the code below will give you some ideas on ways that you might move forward. There are actually better ways than these to do some of these things, but for a beginner it is best to learn the basics first. Mind you: there's nothing really WRONG with the code below, but it could be a lot shorter and even more usable if we used some more advanced concepts. </p>
<pre><code># get the headers from the first line out of the data
# this won't work if the headers are not on the first line
fruits = data[0].split('\t')

# now you have this list, as before
&gt;&gt;&gt; ['apple', 'banana', 'orange']

# make a dictionary that will hold a data list
# for each fruit; these lists will be empty to start
# each fruit's list will hold the data appearing on 
# each line in the data file under each header
data_dict = dict()
for fruit in data_dict:
    data_dict[fruit] = [] # an empty list

# now you have a dictionary that looks like this
&gt;&gt;&gt; {'apple': [], 'banana': [], 'orange': []}

# you can access the (now empty) lists this way
&gt;&gt;&gt; data_dict['apple']
[]

# now use a for loop to go through the data, but skip the 
# first line which you already handled
for lines in data[1:]:
    values = lines.split('\t')
    # append the values to the end of the list for each 
    # fruit. use enumerate so you know the index number
    for idx,fruit in enumerate(fruits):
        data_dict[fruit].append(values[idx])

# now you have the data dictionary that looks like this
&gt;&gt;&gt; {'apple': ['genus:x,species:b', 'genus:x,species:b'], 
     'banana': ['genus:x,species:b', 'genus:x,species:b'], 
     'orange': ['genus:x,species:b', 'genus:x,species:b']}

print("&lt;&lt;here's some interesting data about apples&gt;&gt;")
# Mine the data_dict for interesting fruits this way
data_list = fruits['apple']
for data_line in data_list:
    genus_and_species = data_line.split(',')
    genus = genus_and_species[0].split(':')[1] 
    species = genus_and_species[1].split(':')[1] 
    print("\tGenus: ",genus,"\tSpecies: ",species)
</code></pre>
<p>If you want to have a look at ALL the fruits (in the original order as before), you can do that this way: </p>
<pre><code>for fruit in fruits:
    data_list = data_dict[fruit]
    for data_line in data_list:
        print(data_line)
</code></pre>
<p>If you don't care about the order (<code>dicts</code> do not have order*), you can forget about your fruits list and just loop over the data dictionary itself: </p>
<pre><code>for fruit in data_dict:
    print(fruit)
</code></pre>
<p>OR to get the values (the data lists), use <code>values</code> (<code>viewvalues</code> in Python 2.7):</p>
<pre><code>for data_list in data_dict.values():
    print(data_list)
</code></pre>
<p>OR to get both the keys (fruits) and the values, use <code>items</code> (<code>viewitems</code> in Python 2.7):</p>
<pre><code>for fruit,data_list in data_dict.items():
    print(data_list)
</code></pre>
<p>TIP: if you want to mutate (change) the dictionary, DO NOT use <code>for fruit in data_dict:</code>. Instead, you need to make sure you use the <code>values</code>, <code>items</code>, or <code>keys</code> (<code>viewkeys</code> in Python 2.7) methods. If you don't, you will have problems:</p>
<pre><code>for fruit in data_dict.keys():
    # remove it
    data_dict.pop(fruit)
</code></pre>
<p>* Quick note: <code>dict</code>s have been undergoing some changes and it is very likely you will be allowed to assume that they will actually remember their order in the upcoming next version of Python (3.7). </p>
</div>
<div class="post-text" itemprop="text">
<p>EDIT: now that the question has been edited I'll provide a much more useful answer later if I have time. </p>
<p>I don't fully understand what it is you actually are trying to do, but here are some things that might help. </p>
<p>The thing to recognize is you already have an object that has all the information you are after in it: a list with all the object names. By its very nature, your list of names already has the indexes in it. The data exists; it is there. What you need to do is learn to access this information the right way. </p>
<p>What you probably need is the <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code> function</a>. This function generates a two tuple (which is a pair of objects) that contain the list indexes and the contents of the list as you go: </p>
<pre><code>for idx,fruit in enumerate(fruits): 
    print(fruit+'_idx: ', idx)
</code></pre>
<p>There is no reason to STORE these indexes in some other data structure; THEY ARE ALREADY IN your list. </p>
<p>If you insist that you want to access some arbitrary value by some name (a string), you should do that with a dictionary, or <code>dict</code>: </p>
<pre><code>fruit_dict = dict()
fruit_dict['apple'] = 1
</code></pre>
<p>However, since you are after the <em>index</em> values, this seems a little bit odd to do because a <code>dict</code> by its very nature is intended to be un-ordered. And as I have said, you already KNOW the indexes in your list. Storing indexes with the names a second time most likely makes little sense, although there may be situations where you'd want to do it. </p>
</div>
<div class="post-text" itemprop="text">
<p>The built-in functions <code>exec</code> and <code>eval</code> are relevant here.</p>
<p>From the <a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow noreferrer">Python documentation</a>:</p>
<ul>
<li><code>eval</code>: "The expression argument is parsed and evaluated as a Python expression"</li>
<li><code>exec</code>: "This function supports dynamic execution of Python code"</li>
</ul>
<p>Really, you only need <code>exec</code> for your problem, as follows:</p>
<p><code>for fruit in fruits:
    exec('{0}_idx = fruits.index("{0}")'.format(fruit))</code></p>
<p>(Notice that we need quotes in the second <code>{}</code>, since otherwise Python will think that you are trying to get the index of some variable named <code>apple</code>, rather than passing it the string <code>'apple'</code>.</p>
<p>If you now type <code>apple_idx</code> (for example) into your console, it should return <code>0</code>.</p>
</div>
<span class="comment-copy">This is an <a href="http://mywiki.wooledge.org/XyProblem" rel="nofollow noreferrer">XY problem</a>- meaning, you are asking about what you believe is a good solution to the problem you are trying to solve, rather than asking about the actual problem you are trying to solve. There is no reason to name lots of variables with different names in the manner you are attempting. What is the actual thing you are trying to accomplish?</span>
<span class="comment-copy">I want to create a variable automatically where the variablename is (x-name + '_idx') and its value is it's position in that list.</span>
<span class="comment-copy">Maybe you can create a dictionary? Then you can access it like <code>dict["apple"]</code> and you get the corresponding index.</span>
<span class="comment-copy">Ok yes but WHY do you want to do this? What is it you are trying to accomplish?</span>
<span class="comment-copy">I think, I explained what I want to accomplish. I am trying to create new variables and it's values as it's position in the list, so I don't have to type index for each, when I have 100s rows. Make sense.</span>
<span class="comment-copy">Feeding someone who obviously doesn't know what they are doing a solution that is going to end up sending them in a direction they should not go isn't helpful to them, even if they believe it is. (downvote)</span>
<span class="comment-copy">Hi Rick, i think there is solution to this problem. My python isn't that strong to work this right way, but there is always a way. I understand X/Y problem. But, this is not XY problem. There should be a way.</span>
<span class="comment-copy">I am telling you: it is an XY problem. I'm sure you believe it isn't, but it definitely is.</span>
<span class="comment-copy">I am going to do some more reading. Which such a small rep of mine, I hope you are right. It will be another elightnment, no matter what the answer I will find. Lol. Thanks much at least for jostling.</span>
