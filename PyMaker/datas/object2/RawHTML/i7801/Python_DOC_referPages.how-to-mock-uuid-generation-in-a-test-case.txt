<div class="post-text" itemprop="text">
<p>I have a test case in which in the setUp, I create an object for which I want to mock the function <code>uuid4</code> in the module <code>uuid</code>. </p>
<pre><code>TEST_UUIDS = ['uuid_{}'.format(i) for i in range(10000)]
UUID_POOL = iter(TEST_UUIDS)

def generate_uuid() -&gt; str:
    return next(UUID_POOL)

class MyTestCase(TestCase):

    def setUp(self, **kwargs):
        self._create_my_object

    @patch.object(uuid, 'uuid4', generate_uuid)
    def _create_my_object(self):
        # Create an object using a uuid
</code></pre>
<p>My problem now is that when I run write two test cases, the second time the object is created, it gets other uuids as the first time. Therefore, the result is dependent on the number of test cases in my test class and the order they are run in, something I don't want.</p>
<ul>
<li>Is this the best way to mock a uuid generator?</li>
<li>How do I reset or recreate the iterator at every call of setUp (or tearDown)?</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>The answer was easier than I thought: just don't use iterators! Instead, set the list of uuids as <code>side_effect</code> of the mock.</p>
<pre><code>TEST_UUIDS = ['uuid_{}'.format(i) for i in range(10000)]

class MyTestCase(TestCase):

    def setUp(self, **kwargs):
        self._create_my_object

    @patch.object(uuid, 'uuid4', side_effect=TEST_UUIDS)
    def _create_my_object(self):
        # Create an object using a uuid
</code></pre>
<p><strong>EDIT</strong></p>
<p>I found an even nicer way to write this as a context manager, which allows for prefixing uuids based on the context.</p>
<pre><code>TEST_UUIDS = ['uuid_{}'.format(i) for i in range(10000)]

def uuid_prefix(prefix: str):
    return patch.object(uuid, 'uuid4', side_effect=['{}_{}'.format(prefix, x) for x in TEST_UUIDS])

class MyTestCase(TestCase):

    def setUp(self, **kwargs):
        self._create_my_object

    def _create_my_object(self):
        with uuid_prefix('obj_a'):
            # Create an object A using a uuid
        with uuid_prefix('obj_b'):
            # Create an object B using a uuid
</code></pre>
<p>Explanation: I am mocking the function <code>uuid.uuid4</code> using <code>patch.object(uuid, 'uuid4')</code>. In it, I define a side effect as a list. If your side effect is a list, it can be seen as a list of return values of that function on subsequent calls, so the first time the function <code>uuid4()</code> is called, it returns the first element of that list, the second time the second element, etc. If in the with-context I am generating 10 objects A, the UUIDs will be <code>'obj_a_uuid_0'</code> up to <code>'obj_a_uuid_9'</code>.</p>
</div>
<span class="comment-copy">More details on <code>side_effect</code> can be found here: <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.side_effect" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
<span class="comment-copy">Can you extend a bit more the example , on how to use it? I do not understand why now the uuid generated are the same. And also why prefixing uuid with a string can work. Thank you</span>
<span class="comment-copy">@Gonzalo: I have added some more explanation to the answer.</span>
