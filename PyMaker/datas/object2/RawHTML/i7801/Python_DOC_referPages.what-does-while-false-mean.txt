<div class="post-text" itemprop="text">
<p>I don't undestand how this code works:</p>
<pre><code>i = 1
while False:
    if i % 5 == 0:
        break
    i = i + 2
print(i)
</code></pre>
<p>what does <code>while False</code>? What does it have to be false? I don't get it...</p>
</div>
<div class="post-text" itemprop="text">
<p>A <a href="https://docs.python.org/3.6/reference/compound_stmts.html#while" rel="noreferrer">while loop</a> checks the condition (well, the expression) behind the <code>while</code> before each iteration and stops executing the loop body when the condition is <code>False</code>.</p>
<p>So <code>while False</code> means that the loop body will never execute. Everything inside the loop is "dead code". Python-3.x will go so far that it "optimizes" the <code>while</code>-loop away because of that:</p>
<pre><code>def func():
    i = 1
    while False:
        if i % 5 == 0:
            break
        i = i + 2
    print(i)

import dis

dis.dis(func)
</code></pre>
<p>Gives the following:</p>
<pre><code>  Line        Bytecode

  2           0 LOAD_CONST               1 (1)
              3 STORE_FAST               0 (i)

  7           6 LOAD_GLOBAL              0 (print)
              9 LOAD_FAST                0 (i)
             12 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             15 POP_TOP
             16 LOAD_CONST               0 (None)
             19 RETURN_VALUE
</code></pre>
<p>That means the compiled function won't even know there has been a <code>while</code> loop (no instructions for line 3-6!), because there is no way that the <code>while</code>-loop could be executed.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>while True:
</code></pre>
<p>means that it will loop forever.</p>
<pre><code>while False:
</code></pre>
<p>means it won't execute.</p>
</div>
<div class="post-text" itemprop="text">
<p>it is saying if something is not true do this. for example:</p>
<pre><code>while (0 == 1) == False: # this statement is true because 0 does not equal 1
     print('hi') # this will create a infinite loop of hi.
</code></pre>
<p>meanwhile.</p>
<pre><code>while (0 == 0) == False: # this statement is false since 0 does equal 0.
     print('hi') # this will do nothing since the past statement is false.
</code></pre>
</div>
<span class="comment-copy"><code>while False</code> =&gt; a loop that never runs.</span>
<span class="comment-copy">@capybara that you could have done by running this code. Why did you ask this on stackoverflow.</span>
<span class="comment-copy">How do you convert py to ast?</span>
<span class="comment-copy">@SzabolcsDombi It's not the abstract syntax tree, it's the disassembled bytecode. You might want to take a look at <a href="https://docs.python.org/3/library/dis.html" rel="nofollow noreferrer">the <code>dis</code> module documentation</a> for more informations. But in general you can "get the bytecode" using the mentioned <code>import dis</code> followed by a <code>dis.dis(the_function)</code>.</span>
<span class="comment-copy">I don't know why this answer got downvoted. It's not as detailed as the others, but it's not wrong, it doesn't suggest that the answerer didn't bother to read the question, and it doesn't deserve a negative score.</span>
