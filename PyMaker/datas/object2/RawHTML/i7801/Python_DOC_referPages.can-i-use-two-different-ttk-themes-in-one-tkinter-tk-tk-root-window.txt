<div class="post-text" itemprop="text">
<p>This question concerns Python and Tkinter. </p>
<p>I'd like to use two different ttk themes simultaneously, e.g. 'clam' and 'vista' in one Tkinter window. So I wrote this:</p>
<pre><code>import tkinter as tk
import tkinter.ttk as ttk

class GUI(tk.Tk):

    def __init__(self):

        super().__init__()
        Button_v1()
        Button_v2()


class Button_v1(ttk.Button):

    def __init__(self, default_text="Test"):

        super().__init__(text=default_text)

        s = ttk.Style()
        s.theme_use('clam')
        s.configure(self.winfo_class(), foreground='blue')
        self.pack()


class Button_v2(ttk.Button):

    def __init__(self, default_text="Test2"):

        super().__init__(text=default_text)

        s2 = ttk.Style()
        s2.theme_use('vista')
        s2.configure(self.winfo_class(), foreground='red')
        self.pack()


GUI().mainloop()
</code></pre>
<p>The code loads, however:</p>
<ol>
<li><p>I expected the first Button's foreground to be blue and the second Button's foreground to be red, and for two separate themes to be used. </p></li>
<li><p>Instead, both buttons have a red foreground, and both apply the same theme.</p></li>
</ol>
<p>Is it possible to use two separate ttk themes in one Tkinter program?</p>
</div>
<div class="post-text" itemprop="text">
<p>No, it's not possible, because <code>theme</code> has a global meaning in this context. You can represent <code>theme</code> as a set of styles for widgets (<a href="https://stackoverflow.com/a/44385810/6634373">for widget layout elements, actually</a>), you can change style and/or create a new one, but you can't use more than one of themes at the time, because widget's layout depends heavily on it.</p>
<p>When you call <code>theme_use('theme_name')</code> tkinter rebuilds all widget's layouts and <a href="https://docs.python.org/3/library/tkinter.ttk.html#tkinter.ttk.Style.theme_use" rel="nofollow noreferrer">redraws your entire application</a>, and you can easily check this, thanks to <code>&lt;&lt;ThemeChanged&gt;&gt;</code> virtual event.</p>
<p>Here's a snippet. You will see three prints, caused by each button and by root himself.</p>
<pre><code>try:
    import tkinter as tk
    import tkinter.ttk as ttk
except ImportError:
    import Tkinter as tk
    import ttk


class GUI(tk.Tk):
    def __init__(self):
        super().__init__()
        self.bind('&lt;&lt;ThemeChanged&gt;&gt;', lambda event: print('theme changed in root and across all widgets!'))
        Button_v1()
        Button_v2()


class Button_v1(ttk.Button):
    def __init__(self, default_text="Test"):
        super().__init__(text=default_text)
        s = ttk.Style()
        s.theme_use('clam')
        s.configure(self.winfo_class(), foreground='blue')
        self.pack()


class Button_v2(ttk.Button):
    def __init__(self, default_text="Test2"):
        super().__init__(text=default_text)
        s2 = ttk.Style()
        s2.theme_use('vista')
        s2.configure(self.winfo_class(), foreground='red')
        self.pack()

GUI().mainloop()
</code></pre>
<p>If you need different foreground for each button - <a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/ttk-style-layer.html" rel="nofollow noreferrer">then create a new</a> <code>style</code> for each of them and use the <code>style</code> parameter:</p>
<p>Here's an another snippet:</p>
<pre><code>try:
    import tkinter as tk
    import tkinter.ttk as ttk
except ImportError:
    import Tkinter as tk
    import ttk


class GUI(tk.Tk):
    def __init__(self):
        super().__init__()

        s = ttk.Style()
        s.configure('blue.TButton', foreground='blue')
        s.configure('red.TButton', foreground='red')

        Button_v1()
        Button_v2()


class Button_v1(ttk.Button):
    def __init__(self, default_text="Test"):
        super().__init__(text=default_text, style='blue.TButton')
        self.pack()


class Button_v2(ttk.Button):
    def __init__(self, default_text="Test2"):
        super().__init__(text=default_text, style='red.TButton')
        self.pack()

GUI().mainloop()
</code></pre>
<p>Everything is well described <a href="https://docs.python.org/3/library/tkinter.ttk.html#tkinter.ttk.Style" rel="nofollow noreferrer">here</a> and <a href="http://www.tkdocs.com/tutorial/styles.html" rel="nofollow noreferrer">there</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>No, it is not possible to use two different themes at the same time. </p>
<p>From the canonical documentation <a href="http://tcl.tk/man/tcl8.5/TkCmd/ttk_style.htm#M17" rel="nofollow noreferrer">[1]</a> for the function underlying the <code>theme_use</code> method (emphasis added by me):</p>
<blockquote>
<p>Without an argument the result is the name of the current theme. Otherwise this command sets the current theme to themeName, and <strong>refreshes all widgets.</strong></p>
</blockquote>
<p>Here is a simple example showing how you can switch themes on the fly:</p>
<pre><code># python  2
import Tkinter as tk
import ttk

# python 3
#import tkinter as tk
#import tkinter.ttk as ttk

def switch_theme(theme):
    style = ttk.Style()
    style.theme_use(theme)

root = tk.Tk()

style = ttk.Style()
for theme in style.theme_names():
    button = ttk.Button(root, text=theme,
                        command=lambda theme=theme: switch_theme(theme))
    button.pack(side="top", padx=4, pady=4)

root.mainloop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No. You can't use two different themes. But, you can create a style:</p>
<pre><code>style = ttk.Style()
style.configure("BW.TLabel", foreground="black", background="white")

l1 = ttk.Label(text="Test", style="BW.TLabel")
l2 = ttk.Label(text="Test", style="BW.TLabel")
</code></pre>
<p>You can create another style for a different widget</p>
</div>
<span class="comment-copy">You can't do that. But, you can change it at runtime.</span>
<span class="comment-copy">Thank you. Further, in the above code, the foreground colours of the Buttons do not change -- they are <i>both</i> red, even though they are based on two different styles (labelled as <code>s</code> and <code>s2</code>) and supposedly coloured red/blue. Does this mean that every Tkinter program can only use <i>one</i> set of styles?</span>
<span class="comment-copy">@anonnoir: no, you can switch between styles. You can only use one at a time, but you can switch them at runtime.</span>
<span class="comment-copy">I see. So that means I can 'stock' two or three different styles (with variations of <code>s=ttk.Style()</code>), and activate them on the occurrence of events? I didn't know that was possible.</span>
<span class="comment-copy">@anonnoir: yes, that is correct.</span>
