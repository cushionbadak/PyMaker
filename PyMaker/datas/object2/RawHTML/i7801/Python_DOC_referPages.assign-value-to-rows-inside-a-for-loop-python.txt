<div class="post-text" itemprop="text">
<p>I can't figure out why my below code won't assign a new value to the nth row inside the for loop. As far as I know, the way I index the b matrix should be correct but it seems like the count variable won't update for each iteration.
The print statements serve only as a way of checking what is going on.</p>
<p>I assume that it's pretty simple, so I would highly appreciate if one could point out were I'm wrong.</p>
<pre><code>#!/usr/bin/python
import sys
#from string import maketrans
#import re
import numpy as np

lines = sum(1 for line in sys.stdin)
b = np.zeros((lines,2))

count = 0
for line in sys.stdin:

    line = line.strip()
    myline = line.split(",")

    Depart = myline[3]
    DepartDelay = float(myline[6])  

    if DepartDelay&lt;0:

        DepartDelay=0

    b[count,0] = Depart
    b[count, 1] = DepartDelay

    count = count + 1
    print(count)
print(b)
print(count)    
</code></pre>
<p>I use the following command to execute the code within the terminal of Ubuntu.</p>
<pre><code>cat sample.txt | mapper.py
</code></pre>
<p>which is why there as such aren't specified any data/text file.</p>
<p>In advance, thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p><code>sys.stdin</code> is basically a file object, so it's just my opinion not to do something like <code>for line in sys.stdin</code> (it may technically work, but it's bad form. plus, you have other issues, all ahead)</p>
<p>i would prefer to call <code>read()</code> or <code>readlines()</code> methods on sys.stdin to read the contents</p>
<p>get familiar with the basics of stdin here: <a href="https://stackoverflow.com/questions/1450393/how-do-you-read-from-stdin-in-python">How do you read from stdin in Python?</a></p>
<p>a loop that would work for you should look like this:</p>
<pre><code>lines = sys.stdin.readlines()
for line in lines:
    do_something(line)
</code></pre>
<p>but be careful, if you iterate over the entire stdin at the start of your program (when you did <code>lines = sum(1 for line in sys.stdin)</code>) you can't simply start iterating again</p>
<p>a more simple approach for you will be to read all the lines as mentioned above, but if you need the length of lines you can simply do this first:</p>
<pre><code>count_lines = len(lines)
</code></pre>
<p>to summarize, the start of your program should be this:</p>
<pre><code>lines = sys.stdin.readlines()
b = []
count = 0
for line in lines:
    Depart, DepartDelay = do_something(line)
    b.append([Depart, DepartDelay])
</code></pre>
<p><strong>EDIT:</strong> i wouldnt use numpy at all for such a simple problem with multiple types to store (float and string)</p>
</div>
<div class="post-text" itemprop="text">
<p>The core problem seems to be that you're reading from <code>sys.stdin</code> twice. Once in the argument to <code>sum</code>, which will read the entire input, then again in the for loop. Because files have a current position, the usual result is that the for loop gets nothing to process. stdin is also likely to be a stream, so cannot be rewound. You must load the data only once. </p>
<p>A second question is if you can load the data using a higher abstraction level. It looks like you're reading a CSV, for which <a href="https://docs.python.org/3/library/csv.html#csv.reader" rel="nofollow noreferrer"><code>csv.reader</code></a> might be useful, but it's collected in a numpy array, which makes <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.loadtxt.html" rel="nofollow noreferrer"><code>numpy.loadtxt</code></a> even more appealing. It even has a <code>usecols</code> field to read specific columns. </p>
<p>The <code>count</code> variable can also be handled a little more easily, using <code>for count, line in enumerate(sys.stdin):</code>. This will increment it along with the reading of lines. </p>
<p>I think a decent starting point is something like:</p>
<pre><code>b = np.loadtxt(sys.stdin, delimiter=',', usecols=(3,6))
b[:,1] = np.maximum(b[:,1], 0)   # Set no lower than 0
</code></pre>
</div>
<span class="comment-copy">thank you for your reply! I'll will implement your modifications to make my code more smooth. But could you please let me know how this would solve my initial problem?</span>
<span class="comment-copy">sure, but you have to be more specific - give an example of the desired output, and what do you get instead? is there an error or simply unexpected behavior? define what your problem is if you want a solution</span>
<span class="comment-copy">You can absolutely <a href="https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects" rel="nofollow noreferrer">iterate over text files</a>, and it's encouraged for both clarity and efficiency (readlines forces loading the entire file into memory). The only thing to keep in mind is that they're iterable, not sequences, so you may not have a chance to rewind or reread.</span>
<span class="comment-copy">@YannVernier tnx for the corrections, edited them into my answer</span>
<span class="comment-copy">Thank you for taking you the time to help me on this, I think it works now. I will try to get on with my task to see if works in the end. A last question, is it possible to print, what would be the first column in a matrix, for a list?</span>
