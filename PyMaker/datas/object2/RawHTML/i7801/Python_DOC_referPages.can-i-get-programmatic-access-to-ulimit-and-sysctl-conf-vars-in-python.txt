<div class="post-text" itemprop="text">
<p>I'd like to verify that a large number of Linux hosts are set up correctly. Currently I can do this by grepping sysctl.conf and executing commands like ulimit:</p>
<pre><code>[username@hostname ~]$ tail -2 /etc/sysctl.conf
fs.file-max = 65536
vm.max_map_count = 262144
[username@hostname ~]$ ulimit -u
4096
</code></pre>
<p>I'd like to write a script to gather all the following data:</p>
<ul>
<li>Maximum file descriptors</li>
<li>Max threads</li>
<li>Max map count</li>
</ul>
<p>Sure, I can get this by automating my manual process, but is there a more programmatic way of getting this data in Python? I'd rather know what the OS reports the value as, and not what's in the config file - just in case there's a difference.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are two locations you can get this information:</p>
<ul>
<li><p>for <code>ulimit</code> information, use the <a href="https://docs.python.org/3/library/resource.html" rel="nofollow noreferrer"><code>resource</code> module</a>; the process limit is the <code>resource.RLIMIT_NPROC</code> constant.</p>
<pre><code>import resource

nproc_soft, nproc_hard = resource.getrlimit(resource.RLIMIT_NPROC)
</code></pre></li>
<li><p>For reading current <code>sysctl.conf</code> values, read the <code>/proc/sys</code> filesystem. The options in <code>sysctl.conf</code> map one-on-one to paths in that system, just replace <code>.</code> with a path separator:</p>
<pre><code># read the current setting for fs.file-max
with open('/proc/sys/fs/file-max') as f:
    file_max = int(f.read())

# thread count limit, kernel.threads-max
with open('/proc/sys/kernel/threads-max') as f:
    threads_max = int(f.read())

# map count limit, vm.max_map_count
with open('/proc/sys/vm/max_map_count') as f:
    max_map_count = int(f.read())
</code></pre></li>
</ul>
</div>
<span class="comment-copy">Excellent, thank you!</span>
