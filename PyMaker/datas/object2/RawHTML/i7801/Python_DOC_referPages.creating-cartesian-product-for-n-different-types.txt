<div class="post-text" itemprop="text">
<p>Consider I have a dict holding n different types represented by keys:<code>x1, x2 ..xn</code></p>
<p>For simplicity let's take a small example:</p>
<pre><code>{"x1":["foo1", "goo1" ,"doo1"], "x2":["foo2","goo2"]}
</code></pre>
<p>I want to calculate cartesian product of the above. My output should be:</p>
<pre><code>{"output":[{"x1":"foo1", "x2":"foo2"}, {"x1":"foo1", "x2":"goo2"}, {"x1":"goo1", "x2":"foo2"} , {"x1":"goo1", "x2":"goo2"}, {"x1":"doo1", "x2":"foo2"} {"x1":"doo1", "x2":"goo2"}]}
</code></pre>
<p>Should I traverse each <code>unique pair</code> out of input dictionary keys and calculate their cartesian product and append their values?
How do I concatenate the rest of values if another value appears let's say x3?</p>
<p>In this kind of approach I will calculate cartesian product for x1*x2 values
and then x2*x3 values and how do I merge the results to be x1*x2*x3?</p>
<p>Can you think of a more simple algorithm and an efficient one? Or this should be the way?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> to get the cartesian product.
To reconstruct the <em>key-value</em> pairs for the new dicts, you can first freeze the order of keys (<code>.keys</code> and <code>.values</code> ordering is not guaranteed across all Python versions unless dict is not altered) by calling list on it before taking the cartesian product. The values from the cartesian product now maintain the order of the keys and the key-value pairs for the resulting dicts can now be <em>safely</em> constructed with <code>zip</code>:</p>
<pre><code>from itertools import product
from pprint import pprint

dct = {"x1":["foo1", "goo1" ,"doo1"], "x2":["foo2","goo2"]}

keys = list(dct)
lst = [dict(zip(keys, vals)) for vals in product(*[dct[k] for k in keys])]
pprint(lst)
</code></pre>
<hr/>
<pre><code>[{'x1': 'foo1', 'x2': 'foo2'},
 {'x1': 'foo1', 'x2': 'goo2'},
 {'x1': 'goo1', 'x2': 'foo2'},
 {'x1': 'goo1', 'x2': 'goo2'},
 {'x1': 'doo1', 'x2': 'foo2'},
 {'x1': 'doo1', 'x2': 'goo2'}]
</code></pre>
<p>This will scale to as many value lists as the original list contains.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>product</code> from <code>itertools</code> module within a comprehension: </p>
<pre><code>from itertools import product

a = {"x1":["foo1", "goo1" ,"doo1"], "x2":["foo2","goo2"]}
final = [{i:j for i, j in zip(a.keys(), k)} for k in product(*a.values())]
# Or:
# final = [dict(zip(a.keys(), k)) for k in product(*a.values())]
# Or:
# final = list(map(lambda x: dict(zip(a.keys(), x)), product(*a.values())))

print(final)
</code></pre>
<p>Output:</p>
<pre><code>[{'x1': 'foo1', 'x2': 'foo2'},
 {'x1': 'foo1', 'x2': 'goo2'},
 {'x1': 'goo1', 'x2': 'foo2'},
 {'x1': 'goo1', 'x2': 'goo2'},
 {'x1': 'doo1', 'x2': 'foo2'},
 {'x1': 'doo1', 'x2': 'goo2'}]
</code></pre>
</div>
<span class="comment-copy">It's unclear why you want the output in that format. But for the cartesian product you can just use <code>itertools.product(*my_dict.values())</code></span>
<span class="comment-copy">Can you please add explanation for <code>zip</code> method and  the <code>*[dct[k] for k in keys])</code>- why do we need * parameter. Thanks</span>
<span class="comment-copy">@JavaSa <code>*</code> is used for unpacking the sequence of value lists so each value list is passed as parameter to <code>product</code>. <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> is described in the docs <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">here</a></span>
<span class="comment-copy">I think listifying the keys is unnecessary, for precisely the reason you gave -- the dictionary is unmodified by the listcomp.  Admittedly I might be <a href="https://stackoverflow.com/questions/15211568/combine-python-dictionary-permutations-into-list-of-dictionaries">biased</a>..</span>
<span class="comment-copy">@DSM I had vomited a lot of text before realizing the supposed <i>freezing</i> was unnecessary, couldn't make a fix that won't conflict the other answer. The other answer addresses this nicely.</span>
