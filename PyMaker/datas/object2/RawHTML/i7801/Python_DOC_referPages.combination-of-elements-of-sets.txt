<div class="post-text" itemprop="text">
<p>I have a dictionary.</p>
<pre><code>d = {
    'Cause Class': {'CC1', 'CC2'},
    'Cause Type': {'Ct1', 'Ct2', 'Ct3', 'Ct4'},
    'Incident Type': {'It1', 'It2', 'It3'}
} 
</code></pre>
<p>I want to find the combinations of two elements of which each element must be from different keys of dict. </p>
<p>for example: <code>('CC1', 'Ct1')</code> is one such combination whereas <code>('Ct1', 'Ct2')</code> is not.</p>
<p>I have tried this </p>
<pre><code>ksgg = []
for i in d:
    #print(i)
    for j in d:
        if i != j:
            ksgg.append(list(set(it.product(d[i],d[j]))))
</code></pre>
<p>but it's giving <code>('CC1', 'Ct1')</code> and <code>('Ct1', 'CC1')</code> as two different combination but I want only one of them.</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of a nested loop over the keys, pass all values to <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer"><code>itertools.combinations()</code></a>; it'll pick unique combinations of a given length:</p>
<pre><code>from itertools import combinations, product

ksgg = []
for set1, set2 in combinations(d.values(), 2):
    ksgg += product(set1, set2)
</code></pre>
<p>For your given dictionary, the following combinations are created:</p>
<pre><code>&gt;&gt;&gt; from itertools import combinations, product
&gt;&gt;&gt; for set1, set2 in combinations(d, 2):
...     print(set1, set2, sep=' - ')
...
Cause Class - Cause Type
Cause Class - Incident Type
Cause Type - Incident Type
</code></pre>
<p>The exact order of the pairing differs based on dictionary ordering.</p>
<p>Full demo:</p>
<pre><code>&gt;&gt;&gt; ksgg = []
&gt;&gt;&gt; for set1, set2 in combinations(d.values(), 2):
...     ksgg += product(set1, set2)
...
&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(ksgg)
[('CC1', 'Ct4'),
 ('CC1', 'Ct2'),
 ('CC1', 'Ct1'),
 ('CC1', 'Ct3'),
 ('CC2', 'Ct4'),
 ('CC2', 'Ct2'),
 ('CC2', 'Ct1'),
 ('CC2', 'Ct3'),
 ('CC1', 'It2'),
 ('CC1', 'It1'),
 ('CC1', 'It3'),
 ('CC2', 'It2'),
 ('CC2', 'It1'),
 ('CC2', 'It3'),
 ('Ct4', 'It2'),
 ('Ct4', 'It1'),
 ('Ct4', 'It3'),
 ('Ct2', 'It2'),
 ('Ct2', 'It1'),
 ('Ct2', 'It3'),
 ('Ct1', 'It2'),
 ('Ct1', 'It1'),
 ('Ct1', 'It3'),
 ('Ct3', 'It2'),
 ('Ct3', 'It1'),
 ('Ct3', 'It3')]
</code></pre>
</div>
<span class="comment-copy">Thanks! This is exactly what I wanted.</span>
