<div class="post-text" itemprop="text">
<p>As a newb to python and pandas, I tried:</p>
<pre><code>df_rows = np.where('y' in df['x'])[0]
for i in df_rows:
    print df_rows.iloc[i]
</code></pre>
<p>returned no rows, but</p>
<pre><code>df_rows = np.where(df['x'].str.contains('y'))[0]
for i in df_rows:
    print df_rows.iloc[i]
</code></pre>
<p>did work and returned rows containing <code>'y'</code> in <code>df['x']</code>.</p>
<p>What am I missing? Why did the first form fail? (Python 2.7) </p>
</div>
<div class="post-text" itemprop="text">
<p>These are different operations:</p>
<ul>
<li><p>The <code>in</code> check searches if any element is equal to <code>'y'</code>. (note: For <code>Series</code> of <code>str</code>ings that may not even work correctly).</p></li>
<li><p>The <code>.str.contains</code> method searches the string-representation of each element if it contains <code>'y'</code>.</p></li>
</ul>
<p>The first one can only return <code>True</code> or <code>False</code> (that's because <a href="https://docs.python.org/3/reference/datamodel.html#object.__contains__" rel="nofollow noreferrer">Pythons data model says so</a> and enforces it). The second one is a normal method and returns a <code>Series</code> containing <code>True</code> or <code>False</code> (because normal methods can do what they like).</p>
<pre><code>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; s = pd.Series(['abc', 'def', 'ghi'])
&gt;&gt;&gt; s.str.contains('a')
0     True
1    False
2    False
dtype: bool
&gt;&gt;&gt; s.eq('a')  # looking for an identical match
0    False
1    False
2    False
dtype: bool
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Pandas requires specific syntax for things to work. Looking for a <code>str</code> <code>y</code> using the operator <a href="https://docs.python.org/3/reference/expressions.html#in" rel="nofollow noreferrer">in</a> checks for membership of the string <code>y</code> in a pandas <code>Series</code>.</p>
<pre><code>&gt;&gt;&gt; df = pd.DataFrame({'x': ['hiya', 'howdy', 'hello']})
&gt;&gt;&gt; df
       x
0   hiya
1  howdy
2  hello
&gt;&gt;&gt; df_rows = np.where('y' in df['x'])[0]
&gt;&gt;&gt; df_rows
array([], dtype=int64)
&gt;&gt;&gt; df_rows = np.where(df['x'].str.contains('y'))[0]
&gt;&gt;&gt; df_rows
array([0, 1], dtype=int64)
</code></pre>
<p>Try this and notice it returns one bool instead of three (like we might first think since there are three items in the series):</p>
<pre><code>&gt;&gt;&gt; 'y' in df['x']
False
&gt;&gt;&gt; 'hiya' in df['x']
False
&gt;&gt;&gt; 'hiya' in df['x'].values
True
</code></pre>
<p>You always need to think to yourself: "am I looking for items in a series, or am I looking for strings within the items within the series?"</p>
<p>For items in a series, use <code>isin</code>:</p>
<pre><code>df['x'].isin(['hello'])
</code></pre>
<p>For strings within an item, use <code>.str.{whatever}</code> (or <code>.apply(lambda s: s)</code>):</p>
<pre><code>&gt;&gt;&gt; df['x'].str.contains('y')
0     True
1     True
2    False
Name: x, dtype: bool
&gt;&gt;&gt; df['x'].apply(lambda s: 'y' in s)
0     True
1     True
2    False
Name: x, dtype: bool
</code></pre>
</div>
<span class="comment-copy">in the first, <code>df['x']</code> is a list-like sequence and you're looking for entries that are exactly <code>'y'</code>. In the second, <code>df['x'].str</code> vectorizes string-like operations to each element in <code>df['x']</code></span>
