<div class="post-text" itemprop="text">
<p>I have found a weird behavior that it is related to testing generator functions. I guess that there is a reason behind it, but I don't undestand what. This is my code:</p>
<pre class="lang-py prettyprint-override"><code>class Foo:
    def foo_function(self):
        return range(10)

class Client:
    def __init__(self):
        self.client = Foo()

    def baz(self):
        for i in self.client.foo_function():
            yield i
</code></pre>
<p>And this is my test:</p>
<pre class="lang-py prettyprint-override"><code>from unittest.mock import patch

from django.test import TestCase

from my_app.my_module.client import Client


class ClientTestCase(TestCase):

    @patch('my_app.my_module.client.Foo')
    def test_baz(self, foo):
        client = Client('')
        client.baz()

        foo().foo_function.assert_called_once()

</code></pre>
<p>When I run this test, I get an <code>AssertionError</code>:</p>
<pre class="lang-sh prettyprint-override"><code>AssertionError: Expected 'foo_function' to have been called once. Called 0 times.
</code></pre>
<p>which could be just my fault, but once I try to debug with <code>pdb</code> I see the strange behavior. If I put the trace inside <code>foo_function</code>, I realized that it never gets inside it. So putting the trace right before calling it and stepping in, gives me a <code>GeneratorExit</code> and leaves:</p>
<pre class="lang-sh prettyprint-override"><code>[28] &gt; /app/my_app/my_module/tests/test_client.py(14)test_baz()
-&gt; client.baz()
   6 frames hidden (try 'help hidden_frames')
(Pdb++) step
--Call--
[29] &gt; /app/my_app/my_module/client.py(11)foo_function()
-&gt; def foo_function(self):
   6 frames hidden (try 'help hidden_frames')
(Pdb++) next
GeneratorExit
[29] &gt; /app/my_app/my_module/client.py(11)foo_function()
-&gt; def foo_function(self):
   6 frames hidden (try 'help hidden_frames')
(Pdb++)
</code></pre>
<p>I am sure it is not related to the mock either, because I have been making changes to try to understand what is going on, but I still can't find any reason. Does anybody have any idea what this is happening? And if so, how can I test a function like that? Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Calling <code>client.baz()</code> creates a generator. Generators do not execute any code until you start iterating over them.</p>
<p>Change <code>client.baz()</code> to <code>next(client.baz())</code> and your test will pass.</p>
</div>
<span class="comment-copy">Right! My problem was understanding that: <code>Generators do not execute any code until you start iterating over them</code>. Thanks!</span>
