<div class="post-text" itemprop="text">
<p>Take the following python program which "filters" out the <code>banned_fruit</code> from the <code>fruits</code>:</p>
<pre><code>banned_fruit = {"apple", "orange", "grape"} # always size = 3
fruits = ["banana", "apple", "blueberry", "kiwi", "orange"]  # size = N

good_fruit = []
for fruit in fruits: # O(N)
    if fruit not in banned_fruit: # O(1) average case, worst case O(3) = O(1) ?
        good_fruit.append(fruit) 

print(good_fruit) # Output: ['banana', 'blueberry', 'kiwi']
</code></pre>
<p><strong>My question is</strong> what is the worst case time complexity of the above program? The thing which is confusing me is the line:</p>
<pre><code>if fruit not in banned_fruit:
</code></pre>
<p>If <code>banned_fruit</code> is a python set, then to my understanding it can have a worst-case time complexity of <code>O(K)</code> where <code>K</code> is the length of the <code>banned_fruit</code> set. But, if the length of the <code>banned_fruit</code> set is always constant (ie: 3), will this mean that the worst case will be <code>O(1)</code> thus making my overall program have a time-complexity of <code>O(N)</code>, or do I need to factor in the search time of the set, making my time-complexity <code>O(NK)</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Complexity theory is about how the time or space of a program varies based on variable-sized inputs.</p>
<p>If part of the algorithm uses a fixed-size object, that's not a variable that you consider when determining the complexity. If the set size is predefined rather than something that can vary, it doesn't affect the complexity of the algorithm.</p>
</div>
<div class="post-text" itemprop="text">
<p>The time complexity would be O(N) . The worst case complexity of a set lookup would be O(length of the set) if there are too many hash collisions which would happen if many items in the set hash to the same value. So in your case it would be O(N) [ the complexity of your loop ] practically [ your set size is constant ]  and you don't need to call it O(NK) . </p>
</div>
<span class="comment-copy">While the worst case for sets is O(n), they're generally considered O(1). Decent set implementations rarely exhibit the worst case.</span>
<span class="comment-copy">You can say that the complexity is O(NK), and since K is always constant at 3, it equals 3*O(N), which is O(N). There is nothing wrong with approaching the solution this way.</span>
