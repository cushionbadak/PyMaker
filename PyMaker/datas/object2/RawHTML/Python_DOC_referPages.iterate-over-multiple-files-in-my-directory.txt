<div class="post-text" itemprop="text">
<p>Currently I am grabbing a excel file from a folder with Python just fine; in the below code.. and pushing this to a web form via selenium.</p>
<p>However, I am trying to modify this to continue to go through a directory <strong>over multiple files</strong>. (there will be many excel files in my 'directory' or 'folder').</p>
<p><em>main.py</em></p>
<hr/>
<pre><code>from data.find_pending_records import FindPendingRecords
from vital.vital_entry import VitalEntry

if __name__ == "__main__":
    try: 
        #Instantiates FindPendingRecords then gets records to process
        PENDING_RECORDS = FindPendingRecords().get_excel_data()

        #Reads excel to map data from excel to vital
        MAP_DATA = FindPendingRecords().get_mapping_data()

        #Configures Driver for vital
        VITAL_ENTRY = VitalEntry()

        #Start chrome and navigate to vital website
        VITAL_ENTRY.instantiate_chrome()

        #Begin processing Records
        VITAL_ENTRY.process_records(PENDING_RECORDS, MAP_DATA)

        print("All done, Bill")
    except Exception as exc:
        print(exc)
</code></pre>
<hr/>
<p><em>config.py</em></p>
<pre><code>FILE_LOCATION = r"C:\Zip\2019.02.12 Data Docs.zip"
UNZIP_LOCATION = r"C:\Zip\Pending"
VITAL_URL = 'http://boringdatabasewebsite:8080/Horrible'
HEADLESS = False
PROCESSORS = 4
MAPPING_DOC = ".//map/mapping.xlsx"
</code></pre>
<p><em>find_pending_records.py</em></p>
<hr/>
<pre><code>"""Module used to find records that need to be inserted into Horrible website"""
from zipfile import ZipFile
import math
import pandas
import config

class FindPendingRecords:
    """Class used to find records that need to be inserted into Site"""

    @classmethod
    def find_file(cls):
        """"Finds the excel file to process"""
        archive = ZipFile(config.FILE_LOCATION)
        for file in archive.filelist:
            if file.filename.__contains__('Horrible Data Log '):
                return archive.extract(file.filename, config.UNZIP_LOCATION)

        return FileNotFoundError

    def get_excel_data(self):
        """Places excel data into pandas dataframe"""
        excel_data = pandas.read_excel(self.find_file())

        columns = pandas.DataFrame(columns=excel_data.columns.tolist())
        excel_data = pandas.concat([excel_data, columns])

        excel_data.columns = excel_data.columns.str.strip()
        excel_data.columns = excel_data.columns.str.replace("/", "_")
        excel_data.columns = excel_data.columns.str.replace(" ", "_")

        num_valid_records = 0

        for row in excel_data.itertuples():
            person = row.PERSON

            if person in ("", " ", None) or math.isnan(mrn):
                print(f"Invalid record: {row}")
                excel_data = excel_data.drop(excel_data.index[row.Index])
            else:
                num_valid_records += 1

        print(f"Processing #{num_valid_records} records")

        return self.clean_data_frame(excel_data)

    def clean_data_frame(self, data_frame):
        """Cleans up dataframes"""
        for col in data_frame.columns:
            if "date" in col.lower():
                data_frame[col] = pandas.to_datetime(data_frame[col],
                                                     errors='coerce', infer_datetime_format=True)
                data_frame[col] = data_frame[col].dt.date
        data_frame['PERSON'] = data_frame['PERSON'].astype(int).astype(str)

        return data_frame

    def get_mapping_data(self):
        map_data = pandas.read_excel(config.MAPPING_DOC, sheet_name='main')
        columns = pandas.DataFrame(columns=map_data.columns.tolist())
        return pandas.concat([map_data, columns])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way is as below (pseudocode)</p>
<pre><code>class FindPendingRecords:
    @classmethod
    def find_file(cls):
        return ["file1", "file2", "file3"]

    def __init__(self):
        self.files = self.find_file()

    def get_excel_data(self):
        for excel_data in self.files:
            # process your excel_data
            yield excel_data
</code></pre>
<p>Your main should be </p>
<pre><code>if __name__ == "__main__":
    try: 
        for PENDING_RECORDS in FindPendingRecords().get_excel_data():
            # Do operations on PENDING_RECORDS
            print (PENDING_RECORDS)     
        print("All done, Bill")
    except Exception as exc:
        print(exc)
</code></pre>
<p>Your find_file method will be</p>
<pre><code>@classmethod
def find_file(cls):
    all_files = list()
    """"Finds the excel file to process"""
    archive = ZipFile(config.FILE_LOCATION)
    for file in archive.filelist:
        if file.filename.__contains__('Horrible Data Log '):
            all_files.append(archive.extract(file.filename, config.UNZIP_LOCATION))
    return all_files
</code></pre>
</div>
<span class="comment-copy">What does FindPendingRecords().get_excel_data() do ? Will each call to it return data of different files ?</span>
<span class="comment-copy">Just added the FindPendingRecords() code - all the files will be formatted the same via excel; just with different cell/data values.</span>
<span class="comment-copy">Thanks! will they process one after another in this fashion? I don't want them all to run at the same time and conflict?</span>
<span class="comment-copy">@PeterGibbons of course they are processed sequentially one after the other.</span>
<span class="comment-copy">Oh, great; thanks! I will have to define the amount of files in a array like that? '        return ["file1", "file2", "file3"]'?</span>
<span class="comment-copy">No you don't have to, check the find_file I have given</span>
<span class="comment-copy">You are mentioning the find_files method twice? With the second suggestions you have; I am getting the error 'Invalid file path or buffer object type: &lt;class 'list'&gt;'</span>
