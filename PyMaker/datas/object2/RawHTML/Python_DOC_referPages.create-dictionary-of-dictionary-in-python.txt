<div class="post-text" itemprop="text">
<h3>Problem</h3>
<p>I get individual dictionaries in each iteration of <code>for</code> loop, but when the second iteration runs, instead of adding the second dictionary to the first, it replaces the second dictionary over the first dictionary.</p>
<pre><code>class Nation:
    def __init__(self, short_name, long_name, iso_code, iso_short, iso_long, capital):
        self.short_name = short_name
        self.long_name = long_name
        self.iso_code = iso_code
        self.iso_short = iso_short
        self.iso_long = iso_long
        self.capital = capital

def to_dictionaries(z):
    a = {}
    sD = {}
    for i in range(len(z)):
        sD["long_name"] = z[i].long_name
        sD["iso_code"] = z[i].iso_code
        sD["iso_short"] = z[i].iso_short
        sD["iso_long"] = z[i].iso_long
        sD["capital"] = z[i].capital
        a.update(sD)
    return a

new_nation_1 = Nation("Albania", "Republic of Albania", 8, "AL", "ALB", "Tirana")
new_nation_2 = Nation("Angola", "Republic of Angola", 24, "AO", "AGO", "Luanda")
nation_list = [new_nation_1, new_nation_2]
print(to_dictionaries(nation_list))
</code></pre>
<h3>Desired output:</h3>
<pre><code> {"Albania": {"long_name": "Republic of Albania", "iso_code": 8, "iso_short": "AL", "iso_long": "ALB", "capital": "Tirana"},
    "Angola": {"long_name": "Republic of Angola", "iso_code": 24, "iso_short": "AO", "iso_long": "AGO", "capital": "Luanda"}}
</code></pre>
<h3>Actual output:</h3>
<pre><code>{'long_name': 'Republic of Angola', 'iso_code': 24, 'iso_short': 'AO', 'iso_long': 'AGO', 'capital': 'Luanda'}
</code></pre>
<p>How do I solve this issue?</p>
</div>
<div class="post-text" itemprop="text">
<p>Change</p>
<pre><code>a.update(sD)
</code></pre>
<p>to</p>
<pre><code>a[z[i].short_name] = sD
</code></pre>
<p>Because you need to use the <code>short_name</code> as a key.</p>
<p>Another suggestion is put <code>sD = {}</code> in the <code>for</code> block. So would like:</p>
<pre><code>def to_dictionaries(z):
    a = {}
    for i in range(len(z)):
        sD = {}
        sD["long_name"] = z[i].long_name
        sD["iso_code"] = z[i].iso_code
        sD["iso_short"] = z[i].iso_short
        sD["iso_long"] = z[i].iso_long
        sD["capital"] = z[i].capital
        a[z[i].short_name] = sD
    return a
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import json

class Nation:

    def __init__(self, short_name, long_name, iso_code, iso_short, iso_long, capital):
        self.short_name = short_name
        self.long_name = long_name
        self.iso_code = iso_code
        self.iso_short = iso_short
        self.iso_long = iso_long
        self.capital = capital

nations = [
    Nation('Albania', 'Republic of Albania', 8, 'AL', 'ALB', 'Tirana'),
    Nation('Angola', 'Republic of Angola', 24, 'AO', 'AGO', 'Luanda'),
]

d = {n.short_name : dict(n.__dict__) for n in nations}
print(json.dumps(d, indent = 4))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>@FMc answer is great and we can remove the short_name by <strong>pop</strong>.</p>
<pre><code>import json

class Nation:

    def __init__(self, short_name, long_name, iso_code, iso_short, iso_long, capital):
        self.short_name = short_name
        self.long_name = long_name
        self.iso_code = iso_code
        self.iso_short = iso_short
        self.iso_long = iso_long
        self.capital = capital

nations = [
    Nation('Albania', 'Republic of Albania', 8, 'AL', 'ALB', 'Tirana'),
    Nation('Angola', 'Republic of Angola', 24, 'AO', 'AGO', 'Luanda'),
]
nations = [dict(n.__dict__) for n in nations]
# pop will remove short_name from n and returns it's value.
d = {n.pop('short_name') : n for n in nations}
print(json.dumps(d, indent = 4))
</code></pre>
</div>
<span class="comment-copy">Additionally, the OP never uses index <code>i</code>, so a <code>for nation in z</code> and replacing <code>z[i]</code> with <code>nation</code> would be more readable.</span>
<span class="comment-copy">Also, should remove the short name from n.__dict__</span>
<span class="comment-copy">@MohammadEtemaddar It's true that removing <code>short_name</code> would better match the OP's literal question, but there is rarely benefit to doing so -- at least in my experience. If you have a dict-of-dictified-objects, it's almost always handier and more flexible across a wide variety of programming situations to retain all attributes of interest inside the values -- even if it means that the outer keys will indeed duplicate one piece of information among the inner dicts.</span>
