<div class="post-text" itemprop="text">
<p>I writing some Python code in an interactive console when I accidentally typed</p>
<pre><code>def f(_, ): pass
</code></pre>
<p>only to find that, to my surprise, the interpreter wouldn't complain. I actually meant to have two dummy arguments, but why does the interpreter accept the function if the second parameter does not have a name?</p>
</div>
<div class="post-text" itemprop="text">
<p>Taking a look at the <a href="https://docs.python.org/3/reference/compound_stmts.html#function-definitions" rel="nofollow noreferrer">function definition syntax</a> you can see that the list of parameters of a function has the following syntax:</p>
<pre>
parameter_list ::= defparameter ("," defparameter)* ["," [parameter_list_starargs]]
                   | parameter_list_starargs
</pre>
<p>Which means that, after you are done with positional parameters, you can put a comma and go on with the named or starred parameters (<code>parameter_list_starargs</code>); but actually having those after that last comma is optional, and so it is legal to have one extra comma at the end of the list of positional parameters. Furthermore, looking at the syntax of <code>parameter_list_starargs</code>:</p>
<pre>
parameter_list_starargs ::= "*" [parameter] ("," defparameter)* ["," ["**" parameter [","]]]
                            | "**" parameter [","]
</pre>
<p>It can be seen that it is also allowed to have one extra comma after the last named parameter.</p>
<p>As a side syntactic note, the general syntax of a function declaration is:</p>
<pre>
funcdef ::= [decorators] "def" funcname "(" [parameter_list] ")" ["-&gt;" expression] ":" suite
</pre>
<p>Which, among other things, indicates that the <a href="https://www.python.org/dev/peps/pep-3107/" rel="nofollow noreferrer">annotation</a> of a function can be <em>any</em> expression, rendering in fact as valid code things like:</p>
<pre><code>def f(_,) -&gt; (lambda x, y: True): pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is quite a general thing for python to accept trailing commas, but they are not interpreted as indicating another "anonymous" item to follow. They are just dropped</p>
<pre><code>[1, 2, 3,] # legal: creates a three element list
{1, 2, 3,} # legal: creates a three element set
(1, 2, 3,) # legal: creates a three element tuple
1, 2, 3, # legal: creates a three element tuple
{1: 2, 3: 4,} # legal: creates a two item dict
</code></pre>
<p>And, of course, for the one element tuple the trailing comma is actually required.</p>
<p>So it is not only function definitions (and calls for that matter) that handle trailing commas gracefully.</p>
</div>
