<div class="post-text" itemprop="text">
<pre><code>import time
s = time.time()
def insertionSort(alist):
    for index in range(1, len(alist)):

        currentvalue = alist[index]
        position = index

        while position &gt; 0 and alist[position - 1] &gt; currentvalue:
            alist[position] = alist[position - 1]
            position = position - 1

        alist[position] = currentvalue
alist = [54,26,93,17,77,31,44,55,20]
insertionSort(alist)
print (time.time() - s) # Result 0.0
</code></pre>
<p>I look up for time module, but is hard to me as newbie to read it. I already searching an answer what comes up it's measure the start of code and end of a code. And the result is 0.0. Please help me with this.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is nothing wrong with how you use <code>time.time</code>.</p>
<p>The reason that <code>0.0</code> was printed is the code ran so quickly that the timer did not change at all. </p>
<p>To illustrate my point, I have looped your code for 1000 times.</p>
<pre><code>import time
s = time.time()
def insertionSort(alist):
    for index in range(1, len(alist)):

        currentvalue = alist[index]
        position = index

        while position &gt; 0 and alist[position - 1] &gt; currentvalue:
            alist[position] = alist[position - 1]
            position = position - 1

        alist[position] = currentvalue
for x in xrange(1000):
    insertionSort([54,26,93,17,77,31,44,55,20])
e = time.time()
print (e - s) 
</code></pre>
<p>Output:</p>
<pre><code>0.00600004196167
</code></pre>
<p>There is a bulti-in library called <code>timeit</code> which is useful for this situation if you are interested in code performance.</p>
<pre><code>import timeit
t = timeit.Timer("insertionSort([54,26,93,17,77,31,44,55,20])", "from __main__ import insertionSort")
time = t.timeit(1000)
print(time)
</code></pre>
<p>Output:</p>
<pre><code>0.00587430725292
</code></pre>
</div>
<span class="comment-copy">It finished too fast to be registered; try running the sort several times (making sure to initialize the array <i>inside</i> the loop). Also, use <a href="https://docs.python.org/3/library/time.html#time.perf_counter" rel="nofollow noreferrer"><code>time.perf_counter()</code></a> to measure performance. (Or <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer">timeit</a>.)</span>
<span class="comment-copy">What did you expect?</span>
<span class="comment-copy">Yesss! Thanks a lot Alex!</span>
