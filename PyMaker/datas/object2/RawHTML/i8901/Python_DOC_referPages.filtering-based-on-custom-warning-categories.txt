<div class="post-text" itemprop="text">
<p>In addition to pre-existing warning categories, users can <a href="https://docs.python.org/3/library/warnings.html#warning-categories" rel="nofollow noreferrer">define their own warning classes</a>, such as in the code below:</p>
<pre><code>$ cat mwe.py 
#!/usr/bin/env python3.5

import warnings
import pprint

class ObnoxiousWarning(UserWarning):
    pass

for i in range(3):
    print(i)
    warnings.warn("I don't like this.", ObnoxiousWarning)
</code></pre>
<p>When invoking Python, the <a href="https://docs.python.org/3.5/using/cmdline.html#cmdoption-W" rel="nofollow noreferrer"><code>-W</code> flag controls how to filter warnings</a>.  But when I try to get it to ignore my freshly minted warning category, I'm told the filter is ignored:</p>
<pre><code>$ python3.5 -W ignore::ObnoxiousWarning ./mwe.py
Invalid -W option ignored: unknown warning category: 'ObnoxiousWarning'
0
./mwe.py:11: ObnoxiousWarning: I don't like this.
  warnings.warn("I don't like this.", ObnoxiousWarning)
1
2
</code></pre>
<p>How can I use the commandline to insert a filter for custom warning categories (as opposed to all UserWarnings or filtering based on the warning message, which I can do)?</p>
<p><strong>Edit 2018-11-29</strong>: See <a href="https://bugs.python.org/issue22543" rel="nofollow noreferrer">Issue 22543: -W option cannot use nonstandard categories</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Some of the answers lie in python source code. Look at the _getcategory function:
<a href="https://github.com/python/cpython/blob/3.5/Lib/warnings.py#L147" rel="nofollow noreferrer">https://github.com/python/cpython/blob/3.5/Lib/warnings.py#L147</a></p>
<pre><code>def _getcategory(category):
    import re
    if not category:
        return Warning
    if re.match("^[a-zA-Z0-9_]+$", category):
        try:
            cat = eval(category)
        except NameError:
            raise _OptionError("unknown warning category: %r" % (category,))
    else:
        i = category.rfind(".")
        module = category[:i]
        klass = category[i+1:]
        try:
            m = __import__(module, None, None, [klass])
        except ImportError:
            raise _OptionError("invalid module name: %r" % (module,))
        try:
            cat = getattr(m, klass)
        except AttributeError:
            raise _OptionError("unknown warning category: %r" % (category,))
    if not issubclass(cat, Warning):
        raise _OptionError("invalid warning category: %r" % (category,))
    return cat
</code></pre>
<p>Python tries to eval your category or to import it from module you specify in filter. And that will fail, unless you have your module in PYTHONPATH.</p>
<pre><code>PYTHONPATH='&lt;path_to_dir_where_mwe_located&gt;' python -W ignore::mwe.ObnoxiousWarning
</code></pre>
<p>This way, if you import your module in python shell warning would be filtered as you wish.
To use filter in commandline, you must define your warning in separate module, other than that you execute.</p>
<p>mwe.py</p>
<pre><code>class ObnoxiousWarning(UserWarning):
    pass
</code></pre>
<p>entrypoint.py</p>
<pre><code>#!/usr/bin/env python3.5

import warnings
import pprint

from mwe import ObnoxiousWarning

for i in range(3):
    print(i)
    warnings.warn("I don't like this.", ObnoxiousWarning)
</code></pre>
<p>And finally:</p>
<pre><code>PYTHONPATH='&lt;path_to_dir_where_mwe_located&gt;' python -W ignore::mwe.ObnoxiousWarning ./entrypoint.py
0
1
2
</code></pre>
<p>I don't understand why defining separate module with warning works, but it is. May be someone will explain it.</p>
</div>
<span class="comment-copy">That's a surprisingly fragile piece of code in the warnings module, using <code>eval</code>...</span>
<span class="comment-copy">@gerrit: at least it limits that to a simple identifier-like string, so that's something. But it really should've used <code>import builtins</code>, then <code>getattr(builtins, category) or globals().get(category)</code> or similar.</span>
<span class="comment-copy">Odd that I need to explicitly add directories to my PYTHONPATH, when the same modules are normally importable due to the directories they're in being part of <code>sys.path</code>.  Maybe the warnings rules are processed before <code>sys.path</code> has been properly initialised?  It looks like site packages are not available at this stage.</span>
<span class="comment-copy">I just noticed <a href="https://bugs.python.org/issue22543" rel="nofollow noreferrer">this has been reported as a Python bug back in 2014</a>.  See also <a href="https://stackoverflow.com/q/4271494/974555">stackoverflow.com/q/4271494/974555</a></span>
