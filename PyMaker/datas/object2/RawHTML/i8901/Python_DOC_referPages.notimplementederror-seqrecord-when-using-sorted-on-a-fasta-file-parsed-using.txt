<div class="post-text" itemprop="text">
<p>I'm trying to sort a fasta file by alphabetical order of the sequences in the file (not the ID of the sequences). The fasta file contains over a 200 sequences and I'm trying to find duplicates (by duplicates I mean almost same protein sequence, but not same ID) within a bit master (using a python code).
So I wanted to make a dictionary out of the fasta file and then sort dictionary's values.
The code I am trying to use is the following :</p>
<pre><code>from Bio import SeqIO


input_file = open("PP_Seq.fasta")    
my_dict = SeqIO.to_dict(SeqIO.parse(input_file, "fasta"))
print sorted(my_dict.values())
</code></pre>
<p>I keep getting this message error :</p>
<pre><code>"Traceback (most recent call last):
  File "sort.py", line 4, in &lt;module&gt;
    print sorted(my_dict.values())
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Bio/SeqRecord.py", line 730, in __lt__
    raise NotImplementedError(_NO_SEQRECORD_COMPARISON)
NotImplementedError: SeqRecord comparison is deliberately not implemented. Explicitly compare the attributes of interest."
</code></pre>
<p>I also tried to look for how to fin this error but there ares't much information about this, and few of the informations I read where apparently saying that the length of sequences stored in dictionary dictionary may be a problem?... If so how to sort the fasta file without SeqIO?</p>
</div>
<div class="post-text" itemprop="text">
<p>As <a href="https://stackoverflow.com/users/1350899/mata">mata</a> said, you need to pass a key function to <code>sorted</code>:</p>
<pre><code>from Bio import SeqIO
import operator
input_file = open("example.fasta")    
my_dict = SeqIO.to_dict(SeqIO.parse(input_file, "fasta"))
for r in sorted(my_dict.values(), key=operator.attrgetter('seq')):
    print r.id, str(r.seq)
</code></pre>
<p>returns:</p>
<pre><code>seq3 ABCDEFG
seq0 ABCWYXO
seq2 BCDEFGH
seq1 IJKLMNOP
</code></pre>
<p>Now, for what you're trying to accomplish. If you've sorted the 200 sequences alphabetically, you still need to scan the list manually to find the near duplicates. That is error prone, so better write some code for that as well.</p>
<p>In computer science, <a href="https://en.wikipedia.org/wiki/Edit_distance" rel="nofollow noreferrer">edit distance</a> is a way of quantifying how dissimilar two strings (e.g., words) are to one another by counting the minimum number of operations required to transform one string into the other.</p>
<p>There are several implementations of this algorithm available. We'll take the one from <a href="https://stackoverflow.com/a/32558749/50065">this answer</a>.</p>
<pre><code>def levenshteinDistance(s1, s2):
    if len(s1) &gt; len(s2):
        s1, s2 = s2, s1

    distances = range(len(s1) + 1)
    for i2, c2 in enumerate(s2):
        distances_ = [i2+1]
        for i1, c1 in enumerate(s1):
            if c1 == c2:
                distances_.append(distances[i1])
            else:
                distances_.append(1 + min((distances[i1], distances[i1 + 1], distances_[-1])))
        distances = distances_
    return distances[-1]
</code></pre>
<p>Now we need to decide on a treshold of how dissimilar (how many insertions/delations/substituons) two sequences may be. Then we pairwise compare every two sequences in our FASTA file:</p>
<pre><code>from Bio import SeqIO
from itertools import combinations
input_file = open("example.fasta")    

treshold = 4
records = SeqIO.parse(input_file, "fasta")
for record1, record2 in combinations(records, 2):
    edit_distance = levenshteinDistance(str(record1.seq), str(record2.seq))
    if edit_distance &lt;= treshold:
        print "{} and {} differ in {} characters".format(record1.id, record2.id, edit_distance)
</code></pre>
<p>This gives:</p>
<pre><code>seq0 and seq3 differ in 4 characters
seq2 and seq3 differ in 2 characters
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is another way to eliminate duplicates from a fasta file based on <a href="https://github.com/lh3/bioawk" rel="nofollow noreferrer">bioawk</a> and <a href="https://github.com/dcjones/fastq-tools" rel="nofollow noreferrer">fastq-tools</a> (and also <code>awk</code> and <code>uniq</code> which are usually present in any UNIX-like command-line environment):</p>
<pre><code>bioawk -c fastx '{print "@"$name"\n"$seq"\n+\n"$seq}' test.fasta \
    | fastq-sort -s \
    | bioawk -c fastx '{print $name"\t"$seq}' \
    | uniq -f 1 \
    | awk '{print "&gt;"$1"\n"$2}'
</code></pre>
<p><code>bioawk</code> is a modified version of <code>awk</code> that facilitates the manipulation of some common bioinformatics formats.</p>
<p>The first line converts the data to fastq format because that's what <code>fastq-sort</code> can work with. The <code>-c fastx</code> option tells <code>bioawk</code> to parse the data as fasta or fastq. This defines a <code>$name</code> and a <code>$seq</code> field that can be used in the command. We use the <code>$seq</code> field as a dummy quality to get valid fastq format.</p>
<p>The second line tells <code>fastq-sort</code> (from fastq-tools) to sort the data by sequence (option <code>-s</code>).</p>
<p>The third line uses <code>bioawk</code> to extract the name and sequence and put them as two tab-separated fields, to have the relevant information in one line per record.</p>
<p>The fourth line uses <code>uniq</code> to eliminate duplicates ignoring the first field when comparing successive lines (if I understood properly the meaning of <code>-f</code> option I just discovered). If my understanding of <code>uniq</code> is correct, the name of the fused records will be that of the first record in a same-sequence series.</p>
<p>The fifth line uses <code>awk</code> to reformat the tab-separated fields into fasta.</p>
<p>I tested this approach on some of my data and it seemed to work.</p>
</div>
<span class="comment-copy">Is your dict like  <code>{fasta_header: sequence}</code>?</span>
<span class="comment-copy">That means that <code>SeqRecords</code> are not compareable so they can't be sorted. By what key do you want to sort them? Something like <code>sorted(my_dict.values(), key=operator.attrgetter('seq'))</code> would probably work.</span>
<span class="comment-copy">@mata lets say I have this file as input : &gt;seq0 ABCWYXO &gt;seq1 IJKLMNOP &gt;seq2 BCDEFGH &gt;seq3 ABCDEFG  I want the output to be a file organized like this : &gt;seq3 ABCDEFG &gt;seq0 ABCWYXO &gt;seq2 BCDEFGH &gt;seq1 IJKLMNOP  Basically sort them out by alphabetical order of protein sequences... So I am thinking like comparing one sequence (string) to the other one character at the time in a loop, and sort them in that way. Be able to place them in a new file based on that order and retrieving their own ID each time...</span>
<span class="comment-copy">You need to pass a <a href="https://docs.python.org/3/howto/sorting.html#key-functions" rel="nofollow noreferrer"><code>key</code> function</a> to <code>sorted()</code> which returns a sortable key for each record. <code>operator.attrgetter('seq')</code> should do it, it returns a (compareable) <a href="https://github.com/biopython/biopython/blob/master/Bio/Seq.py" rel="nofollow noreferrer"><code>Seq</code></a> for each <a href="https://github.com/biopython/biopython/blob/master/Bio/SeqRecord.py#L95" rel="nofollow noreferrer"><code>SeqRecord</code></a>, but I don't really have any experience with those libraries.</span>
<span class="comment-copy">You might achieve something faster using <code>fastq-sort -s</code> from fastq-tools and bioawk to create and then remove dummy qualities. See <a href="http://stackoverflow.com/a/41278639/1878788">stackoverflow.com/a/41278639/1878788</a> for a related case.</span>
