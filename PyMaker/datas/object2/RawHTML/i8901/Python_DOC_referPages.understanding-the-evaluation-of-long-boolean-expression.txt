<div class="post-text" itemprop="text">
<pre><code>def main():
    x = True
    y = False
    z = False
    if not x or y: #False
        print (1)
    elif not x or not y and z: #False
        print (2)
    elif not x or y or not y and x: #True
        print (3)
    else:
        print (4)

main()
</code></pre>
<p>This is a logic question we are learning in a Python class. I dont understand how the answer is 3, that is how <code>not x or y or not y and x</code> is <code>True</code>, can anyone help?</p>
</div>
<div class="post-text" itemprop="text">
<p>Whenever confused with boolean expressions, it helps to use parentheses to make the sequence of evaluation clear. The parentheses can be placed by following <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">the precedence rules</a> and the associativity of operators. Then you can substitute and evaluate the results:</p>
<pre><code>&gt;&gt;&gt; (not x) or y
# not x ==&gt; not False == False
# y == False
# False or False == False

&gt;&gt;&gt; (not x) or ((not y) and z)
# not x == False 
# not y == True
# z == False
# True and z ==&gt; True and False == False
# False or False == False

&gt;&gt;&gt; ((not x) or y) or ((not y) and x)
# Evaluate it yourself
</code></pre>
<p>If you evaluate the last example yourself, you'll see how it leads to <code>False or True</code> which yields <code>True</code> thereby allowing the <code>if</code> statement that contains it to run.</p>
</div>
<span class="comment-copy">Have you asked your instructor about this?</span>
<span class="comment-copy">So it would be   not x == F # not y == T # not x or y or true == T # False or True == T      I get it :) Thank you! Just one question..for it to print 1 would it have to be if not x or y: #true?</span>
<span class="comment-copy">oh wow..im sorry about the formatting. Im new to this site and i really dont know how to make the code cleaner.</span>
<span class="comment-copy">That's ok @DanSieger. For it to be <code>1</code> you need to have at least one <code>True</code> value for the <code>or</code> operator. <code>x or y</code> (<code>x == True</code>) does the trick, so does <code>not x or not y</code> (<code>not y == True</code>)  and <code>x or not y</code> (both <code>x</code> and <code>not y</code> equal <code>True</code>).</span>
<span class="comment-copy">ooooh I get it completely now. I just realized that the :#false was a comment. and so i was just super confused hahaha thank you so much for your help. I will definitely keep the way you organized the booleans in mind for my exam on thursday</span>
<span class="comment-copy">To make this great answer even better you should explain the short-circuiting behaviour of <code>and</code> and <code>or</code>. And that they can take arbitrary operands, not just booleans.</span>
