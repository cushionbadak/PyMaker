<div class="post-text" itemprop="text">
<p>There is a file which contains two or more json string like this:</p>
<pre><code>{
"a":"1",
"b":"2"
}
{
"c":"3",
"d":"4"
}
</code></pre>
<p>how to use python to transform these json string to json Object from this file?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/re.html#re.split" rel="nofollow noreferrer"><code>re.split</code></a> to split every occurrence of <code>}\W*{</code> while preserving the brackets and then convert every item in the result with <a href="https://docs.python.org/3/library/json.html#json.loads" rel="nofollow noreferrer"><code>json.loads</code></a>:</p>
<pre><code>import json
import re

s = '''{
"a":"1",
"b":"2"
}
{
"c":"3",
"d":"4"
}'''

res = [json.loads(g) for g in re.split(r'(?&lt;=})\W*(?={)', s)]
print(res)
</code></pre>
<p>Output:</p>
<pre><code>[{'b': '2', 'a': '1'}, {'c': '3', 'd': '4'}]
</code></pre>
<p>In the regular expression above <code>(?&lt;=})</code> is positive lookbehind assertion which causes <code>\W*</code> to match only if it is immediately preceded by <code>}</code>. Similarly <code>(?={)</code> is positive lookahead assertion that requires <code>{</code> to follow <code>\W*</code>.</p>
<p><strong>Update</strong> Alternatively you can use <a href="https://docs.python.org/3/library/re.html#re.finditer" rel="nofollow noreferrer"><code>re.finditer</code></a> to find matches instead of splitting the string. It will also work in a case where there's no whitespace between the objects:</p>
<pre><code>import json
import re

s = '''{
"a":"1",
"b":"2"
}{
"c":"3",
"d":"4"
}
{
"foo":"bar"
}'''

res = [json.loads(m.group(0)) for m in re.finditer(r'({.*?}\W*(?=({|$)))', s, re.DOTALL)]
print(res)
</code></pre>
<p>Output:</p>
<pre><code>[{'a': '1', 'b': '2'}, {'d': '4', 'c': '3'}, {'foo': 'bar'}]
</code></pre>
<p>Note that both of the methods above will break if your JSON has a string with <code>} {</code> with any amount of whitespace in between.</p>
</div>
<span class="comment-copy">I would fix how that file is created to make valid JSON</span>
<span class="comment-copy">Those are not valid JSON objects because there's no comma between the values.</span>
<span class="comment-copy">@cricket_007  sorry, I forget it! I fix it now</span>
<span class="comment-copy">Thanks! I got it!</span>
<span class="comment-copy">how to match <code>}{</code> using regular expression? I use <code>re.split(r'(?&lt;=})(?={)', s)</code>, but always failed.</span>
<span class="comment-copy">@Guo <code>}{</code> <b>is</b> that expression.</span>
<span class="comment-copy">@cricket_007 sorry! I didn't express clearly. I mean, I need split <code>}{</code> to <code>}</code> and <code>{</code>, but <code>re.split(r'(?&lt;=})(?={)', s)</code> can't split it.</span>
<span class="comment-copy">@Guo Updated the answer to work with separate JSON objects on the same line.</span>
