<div class="post-text" itemprop="text">
<p>I have an abstract base class:</p>
<pre><code>import abc
import six

@six.add_metaclass(abc.ABCMeta)
class A(object):

    @abc.abstractmethod
    def f(self, arg1):
        pass
</code></pre>
<p>I'd like to use this class as a spec for a mock.</p>
<pre><code>import mock
mock_a = mock.Mock(spec=A)
</code></pre>
<p>This works partially. For example, <code>mock_a.x</code> results in <code>AttribureError("Mock object has no attribute 'x')</code>. However <code>mock_a.f</code> is not speced based on the abstract method from <code>A.f</code>. It returns a mock regardless of the number of arguments passed to <code>f</code>.</p>
<pre><code>mock_a = mock.Mock(spec=A)

# Succeeds
print mock_a.f(1)

# Should fail, but returns a mock
print mock_a.f(1,2)

# Correctly fails
print mock_a.x
</code></pre>
<p>Mock can create a mock speced from <code>A.f</code> with <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.create_autospec" rel="nofollow noreferrer"><code>create_autospec</code></a> ...</p>
<pre><code>f_spec = mock.create_autospec(A.f)

# Succeeds
f_spec(mock_a, 1)

# Correctly fails
f_spec(mock_a, 1, 2)
</code></pre>
<p>... but doesn't do so for the attributes of A</p>
<p>How can I create a mock that accurately implements the abstract base class?</p>
</div>
<div class="post-text" itemprop="text">
<p>Apply <code>mock.create_autospec()</code> to the class:</p>
<pre><code>&gt;&gt;&gt; mock_a = mock.create_autospec(spec=A)
&gt;&gt;&gt;
&gt;&gt;&gt; # Should succeed
&gt;&gt;&gt; print mock_a.f(1)
&lt;MagicMock name='mock.f()' id='140401932347984'&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; # Should fail
&gt;&gt;&gt; print mock_a.f(1,2)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.7/dist-packages/mock/mock.py", line 1061, in __call__
    _mock_self._mock_check_sig(*args, **kwargs)
  File "/usr/lib/python2.7/dist-packages/mock/mock.py", line 227, in checksig
    sig.bind(*args, **kwargs)
  File "/usr/lib/python2.7/dist-packages/mock/mock.py", line 95, in fixedbind
    return self._bind(args, kwargs)
  File "/usr/lib/python2.7/dist-packages/funcsigs/__init__.py", line 712, in _bind
    raise TypeError('too many positional arguments')
TypeError: too many positional arguments
&gt;&gt;&gt;
&gt;&gt;&gt; # Should fail
&gt;&gt;&gt; print mock_a.x
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.7/dist-packages/mock/mock.py", line 716, in __getattr__
    raise AttributeError("Mock object has no attribute %r" % name)
AttributeError: Mock object has no attribute 'x'
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">this was very helpful to me today, thanks!</span>
