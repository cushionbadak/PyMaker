<div class="post-text" itemprop="text">
<p>I found this block of code <a href="https://stackoverflow.com/questions/8391411/suppress-calls-to-print-python/8391926#answer-8391735">elsewhere on stackoverflow</a>.  I've been using it quite a bit, but now I can't seem to get any print function to work, no matter how many times I execute enablePrint()...  any ideas?</p>
<pre><code># Disable
def blockPrint():
    sys.stdout = open(os.devnull, 'w')

# Restore
def enablePrint():
    sys.stdout = sys.__stdout__
</code></pre>
<p>and Print('test') results in no output.  I'm doing this all in Juptyer. </p>
</div>
<div class="post-text" itemprop="text">
<p>You need to store the old stdin so that you can restore it:</p>
<pre><code>import sys
import os

# Disable
def blockPrint():
    sys.__stdout__ = sys.stdout
    sys.stdout = open(os.devnull, 'w')

# Restore
def enablePrint():
    sys.stdout = sys.__stdout__

blockPrint()
print("test")
enablePrint()
print("test")
</code></pre>
<p>will print <code>test</code> once. Furthermore I'd recommend the use of a contextmanager:</p>
<pre><code>from contextlib import contextmanager

@contextmanager
def blockPrint():
    import sys
    old_stdout = sys.stdout
    sys.stdout = None
    try:
        yield
    finally:
        sys.stdout = old_stdout

with blockPrint():
    print("test")

print("test")
</code></pre>
<p>which will again print <code>test</code> just once.</p>
<p><strong>Edit:</strong> For those wondering <em>why</em> this can benecessary: Under some circumstances <code>sys.__stdout__</code> can be None (see <a href="https://docs.python.org/3/library/sys.html" rel="nofollow noreferrer">https://docs.python.org/3/library/sys.html</a>) - For me this is for example the case in a Python 3.5 shell within IDLE on Windows.</p>
<pre><code>Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:01:18) [MSC v.1900 32 bit (Intel)] on win32
Type "copyright", "credits" or "license()" for more information.
&gt;&gt;&gt; import sys
&gt;&gt;&gt; repr(sys.__stdout__)
'None'
&gt;&gt;&gt; repr(sys.stdout)
'&lt;idlelib.PyShell.PseudoOutputFile object at 0x03ACF8B0&gt;'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In python 3 in order to work with WITH statement (context manager) you have to implement just two methods:</p>
<pre><code>import os, sys

class HiddenPrints:
    def __enter__(self):
        self._original_stdout = sys.stdout
        sys.stdout = open(os.devnull, 'w')

    def __exit__(self, exc_type, exc_val, exc_tb):
        sys.stdout = self._original_stdout
</code></pre>
<p>Then you can use it like this:</p>
<pre><code>with HiddenPrints():
    print("This will not be printed")

print("This will be printed as before")
</code></pre>
</div>
<span class="comment-copy">Thanks for this.  I'm still a little unclear as to why you use the context manager? (I'm using 2.7 for what its worth)</span>
<span class="comment-copy">If you only want to temporarily use a <code>resource</code> a context manager can make sure that that resource is <i>freed</i> afterwards. I feel the <code>with</code>-statement makes the intention more clear (and also what part of the code should be affected). But obviously there is no need to use it.</span>
