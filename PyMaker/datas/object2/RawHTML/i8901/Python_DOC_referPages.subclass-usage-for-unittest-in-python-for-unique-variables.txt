<div class="post-text" itemprop="text">
<p>I'd like to find out if the idea below is safe for usage in unittest.  The issue that I have is that I want to perform the exact same set of tests but with slightly different setup work.  Sudo code to follow:</p>
<pre><code>def reusableTest( var1 ):
  # do base test

class Suite_Finds_Type1( unittest.TestCase, myFinds ):
    @classmethod
    def setUpClass ( self ):
        self.somevar = 'method1'

class Suite_Finds_Type2( unittest.TestCase, myFinds ):
    @classmethod
    def setUpClass ( self ):
        self.somevar = 'method2'

class myFinds( ):
    def test_001( self ):
        reusableTest( self.somevar )

    def test_002( self ):
        reusableTest( self.somevar )

if __name__=='__main__':
    unittest.main( argv=sys.argv, testRunner = unittest.TextTestRunner(verbosity=2))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No, this won't really work; you've defined <code>setUpClass</code> in your test suites so that's the one that will be run, and the one in <code>myFinds</code> will be ignored.</p>
<p>By the way, <code>setUpClass</code> should be a class method.</p>
<p>One way to fix this is to use a simple inheritance hierarchy and define <code>somevar</code> as a class variable in your child classes:</p>
<pre><code>class myFinds(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        # ...
        pass

class Suite_Finds_Type1(myFinds):
    somevar = 'method1'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're using Python 3.4 or later, consider the use of <a href="https://docs.python.org/3/library/unittest.html#distinguishing-test-iterations-using-subtests" rel="nofollow noreferrer">subtests</a>. Subtests provide a mechanism for parameterizing a test.</p>
<p>For your code you could consider something like the following:</p>
<pre class="lang-py prettyprint-override"><code>def reusableTest( var1 ):
    # do base test

class Suite_Finds( unittest.TestCase ):
    def test_methods( var1 ):
        for method in ('method1', 'method2'):
            with self.subTest(method = method):
                reusableTest(method)
</code></pre>
<p>The subtests will each report as a separate test, but allow you to reuse test code.</p>
</div>
<span class="comment-copy">I found out that this very method does work.  Better then expected.</span>
<span class="comment-copy">â€“ Terrific, I'll finish my conversion of this file today and move things around a bit.  I knew about the class method decorator (I'll try to edit original code) but forgot it in my example code.  Ty... sounds like it will otherwise work and is fine to create a collection of reusable tests.</span>
<span class="comment-copy">OK will do... Unfortunately still in Python 2.7</span>
