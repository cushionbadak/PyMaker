<div class="post-text" itemprop="text">
<p>im trying to update a 2 dimensional list i use for keeping track of a stage in a console game. I use the following code for updating:</p>
<pre><code>def updateBoard():
    stage[bird[0]][3] = "#"
    #print(bird) Debugging
    #print(stage) Debugging
</code></pre>
<p>and this snippet for flushing the board on a new update:</p>
<pre><code>def flushBoard():
    stage = 0
    stage = [[0 for x in range(8)] for y in range(8)]
    #print(stage) Debugging
</code></pre>
<p>The snippet used for printing the board is the following:</p>
<pre><code>def printBoard():

    for row in stage:
        for square in row:
            print(square, end="")
        print("")
    print("")
    print(stage)
</code></pre>
<p>The problem i get is, after flushing then updating, i get the "bird" on the new spot, but i get it on the previous spot also, even after flushing the list. Any reasons why? NOTE: The stage is a global variable declared on top of the file, while the functions are run in the proper order in a while loop. (Flush, Update, Print) NOTE: im using <strong>future</strong> to get the proper print function.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think that in flushBoard you are using local stage instead of global. That's what happens when you use assignment. You should do:</p>
<pre><code>def flushBoard():
    global stage
    stage = 0
    stage = [[0 for x in range(8)] for y in range(8)]
    #print(stage) Debugging
</code></pre>
<p>I'd recommend to read <strong><a href="http://python-textbok.readthedocs.io/en/1.0/Variables_and_Scope.html" rel="nofollow noreferrer">Python docs on variable scope</a></strong>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If <code>stage</code> is a global variable, you have to use the <code>global</code> keyword. Right now, you are just declaring and creating a new <code>stage</code> within the scope of the <code>flushBoard</code> function.</p>
<pre><code>def flushBoard():
    global stage  # use globally defined stage in this function
    stage = [[0 for x in range(8)] for y in range(8)]
</code></pre>
<p>In the other methods, where you just access or modify <code>stage</code>, <code>global</code> is not needed.</p>
<p>Having said that, you could also use the <code>[:]</code> slice notation to <em>modify</em> the list, replacing it's entire content with new values. This way, you do not need <code>global</code>.</p>
<pre><code>def flushBoard():
    stage[:] = [[0 for x in range(8)] for y in range(8)]
</code></pre>
</div>
<span class="comment-copy">Those are not the python docs my friend, these are: <a href="https://docs.python.org/3/reference/executionmodel.html" rel="nofollow noreferrer">docs.python.org/3/reference/executionmodel.html</a></span>
<span class="comment-copy">Thank you :) This worked fairly nice! Will do!</span>
