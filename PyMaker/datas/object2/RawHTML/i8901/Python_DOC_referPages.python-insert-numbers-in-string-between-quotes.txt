<div class="post-text" itemprop="text">
<p>I need to replace every number in a string with the number itself but between quotes:</p>
<pre><code>str = 'This is number 1 and this is number 22'
</code></pre>
<p>Result:</p>
<pre><code>str= 'This is number "1" and this is number "22"'
</code></pre>
<p>I know I can use use this regex to replace every number in a string with another string:</p>
<pre><code>str = re.sub("\d", "x", str)
</code></pre>
<p>but this would give me:</p>
<pre><code>str= 'This is number x and this is number xx'
</code></pre>
<p>How to replace with the matched number itself modified?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>\1</code> construct to refer to matched groups.</p>
<pre><code>&gt;&gt;&gt; re.sub(r"(\d+)", r'"\1"', "This is number 1 and this is number 22")
'This is number "1" and this is number "22"'
</code></pre>
<p>Note the use of raw strings (prefixed with r) to avoid having to escape the backslash – you should be using a raw string for the pattern to match as well, otherwise the <code>\d</code> may be interpreted as an escape in the future.</p>
<p>In addition, the pattern <code>(\d+)</code> matches any number of digits in a row, rather than just one digit – without this, a string like <code>This is number "1" and this is number "2""2"</code> would be produced.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a backreference to the previously matched content in the replacement pattern. Syntax is <code>\g&lt;Number&gt;</code>, where Number is the number of the captured group or 0 for the whole match.</p>
<p>As you want to quote contiguous numbers as one and not number by number, you need to use  <code>\d+</code> as pattern, not just <code>\d</code></p>
<p>Full code:</p>
<pre><code>import re
str = 'This is number 1 and this is number 22'
pat = r'\d+'
repl = r'"\g&lt;0&gt;"'
print(re.sub(pat, repl, str))
</code></pre>
<p>See <a href="http://ideone.com/x5uLte" rel="nofollow noreferrer">http://ideone.com/x5uLte</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You don't even need regular expressions for something this simple:</p>
<pre><code>&gt;&gt;&gt; words = 'This is number 1 and this is number 22'
&gt;&gt;&gt; " ".join('"{}"'.format(x) if x.isdigit() else x for x in words.split())
'This is number "1" and this is number "22"'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to capture your number like so:</p>
<pre><code>(\d+)
</code></pre>
<p>And the replace with back reference (+your quotes around it) <code>"$1"</code></p>
<p>see here: <a href="https://regex101.com/r/oXsFX7/1" rel="nofollow noreferrer">https://regex101.com/r/oXsFX7/1</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This will do:</p>
<pre><code>s = re.sub("([0-9]+)",r'"\1"' , s)
</code></pre>
<p>Also please avoid using <code>str</code> as variable as <code>str</code> is a built-in type of <a href="https://docs.python.org/3/library/stdtypes.html" rel="nofollow noreferrer">string</a> in Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this,</p>
<pre><code>import re
str = 'This is number 1 and this is number 22'
for s in str.split():
    if s.isdigit():
        str=re.sub(s, '"'+s+'"', str)
print str
</code></pre>
</div>
<span class="comment-copy">FYI you should never use <code>str</code> as variable as <code>str</code> is a built in Python data type.</span>
<span class="comment-copy">is there any advantage to using <code>[0-9]</code> over <code>\d</code>?</span>
<span class="comment-copy">@asongtoruin they are identical I believe. I like <code>[0-9]</code> as I have more control. This also demonstrates how to specify range of chars like <code>[a-z] </code></span>
