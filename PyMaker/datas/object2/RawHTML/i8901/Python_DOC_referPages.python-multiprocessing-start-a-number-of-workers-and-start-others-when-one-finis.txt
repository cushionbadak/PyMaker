<div class="post-text" itemprop="text">
<p>So i have something similar to this</p>
<pre><code>import multiprocessing

class MyFancyClass(object):

    def __init__(self, name):
    self.name = name

    def do_something(self):
    proc_name = multiprocessing.current_process().name
    print 'Doing something fancy in %s for %s!' % (proc_name, self.name)


def worker(q):
    obj = q.get()
    obj.do_something()


if __name__ == '__main__':
        urls = [
    'http://www.python.org',
    'http://www.python.org/about/',
    'http://www.python.org/community/awards/'
    # etc..
]

    queue = multiprocessing.Queue()

    p = multiprocessing.Process(target=worker, args=(queue,))
    p.start()

    queue.put(MyFancyClass('Fancy Dan'))

    # Wait for the worker to finish
    queue.close()
    queue.join_thread()
    p.join()
</code></pre>
<p>What i want to do is have 4 or more "workers" start and process the urls and when one finishes start another one.
What would be the best way to do this. I spend two days on this and can't figure it out.</p>
<p>Thank you
Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using concurrent.futures</p>
<pre><code>import concurrent.futures
import multiprocessing

def do_something(name):
    proc_name = multiprocessing.current_process().name
    print 'Doing something fancy in %s for %s!' % (proc_name, name)

class MyFancyClass(object):

    def __init__(self, name):
    self.name = name


MyFancy = MyFancyClass("Name")

if __name__ == '__main__':
    urls = [
        'http://www.python.org',
        'http://www.python.org/about/',
        'http://www.python.org/community/awards/'
        # etc..
]

with concurrent.futures.ProcessPoolExecutor() as executor:
    results = executor.map(do_something, urls)
</code></pre>
<p>See <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer">concurrent.futures documentation</a> for details.</p>
</div>
<div class="post-text" itemprop="text">
<p>No need to invent the wheel. <code>ProcessPoolExecutor</code> from <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer">concurrent.futures</a> does exactly what you need.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>Pool</code> from <a href="https://docs.python.org/2/library/multiprocessing.html" rel="nofollow noreferrer"><code>multiprocessing</code></a>:</p>
<p>Here is a short usage example that may fit your purpose:</p>
<pre><code>from multiprocessing import Pool

def f(x,y):
    print x*y

p = Pool(5)
for i in range(100):
    p.apply_async(f,(i,i+1))
p.close()
p.join()
</code></pre>
</div>
<span class="comment-copy">You should use a process pool. Read more here    <a href="https://docs.python.org/2/library/multiprocessing.html" rel="nofollow noreferrer">docs.python.org/2/library/multiprocessing.html</a></span>
<span class="comment-copy">Could you give me an example of how to use it with a class ?</span>
<span class="comment-copy"><a href="https://www.pythonsheets.com/notes/python-concurrency.html" rel="nofollow noreferrer">pythonsheets.com/notes/python-concurrency.html</a>  --many of examples to use as templates for various parallel processing including multiprocessing</span>
<span class="comment-copy">NameError: name 'do_something' is not defined</span>
<span class="comment-copy">You need to integrate the code above with yours. I'll update my answer.</span>
<span class="comment-copy">PicklingError: Can't pickle &lt;type 'instancemethod'&gt;: attribute lookup <b>builtin</b>.instancemethod failed</span>
<span class="comment-copy">Define <code>do_something</code> as a function and not a class method to resolve this. Check <a href="http://stackoverflow.com/questions/1816958/cant-pickle-type-instancemethod-when-using-pythons-multiprocessing-pool-ma" title="cant pickle type instancemethod when using pythons multiprocessing pool ma">stackoverflow.com/questions/1816958/â€¦</a>  I've updated my answer</span>
<span class="comment-copy">Take a look at the link in my last comment. It'll show you how to prepare your instance methods for pickling.</span>
