<div class="post-text" itemprop="text">
<p>I have a function that can accept as input any variable that can be indexed, such as a list of a tuple. How do I indicate this in the type-hint of the function?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your method is accepting a <a href="https://docs.python.org/3/glossary.html#term-sequence" rel="noreferrer"><em>sequence</em></a>, so use <a href="https://docs.python.org/3/library/typing.html#typing.Sequence" rel="noreferrer"><code>typing.Sequence</code></a>. That's a generic, so you can specify what type of object(s) the sequence must contain:</p>
<pre><code>from typing import Sequence

def foo(bar: Sequence[int]):
    # bar is a sequence of integers
</code></pre>
<p>Quoting the <a href="https://docs.python.org/3/glossary.html#term-sequence" rel="noreferrer">Python glossary</a>:</p>
<blockquote>
<p>An iterable which supports efficient element access using integer indices via the <code>__getitem__()</code> special method and defines a <code>__len__()</code> method that returns the length of the sequence. Some built-in sequence types are <code>list</code>, <code>str</code>, <code>tuple</code>, and <code>bytes</code>.</p>
</blockquote>
</div>
<span class="comment-copy">Must I specify the type of items in the sequence, or can I just say "bar: sequence" ?</span>
<span class="comment-copy">@ErelSegal-Halevi: not specifying a contained type is allowed; the default is <code>Any</code>, so <code>bar: Sequence</code> and <code>bar: Sequence[Any]</code> are equivalent.</span>
<span class="comment-copy">Is there a type which contains <code>list</code> and <code>tuple</code> but not <code>str</code> and <code>bytes</code>? Or should one just use <code>Union[list, tuple]</code> for such cases?</span>
<span class="comment-copy">@Nathan: yes, you'd have to be explicit about the specific types. You can't spell <i>this should be a sequence, but not these specific sequence types</i>.</span>
<span class="comment-copy">@Nathan: note, however, that <code>str</code> is a <code>Sequence[str]</code> type, and wouldn't be acceptable if <code>Sequence[int]</code> is required. Vice-versa, <code>bytes</code> is a <code>Sequence[int]</code> type, and would be rejected if you tried to use it with a function that requires <code>Sequence[str]</code>. Both are immutable types, so <code>MutableSequence[int]</code> or <code>MutableSequence[str]</code> would not accept either (but <code>bytearray</code> would be acceptable for <code>MutableSequence[int]</code>).</span>
