<div class="post-text" itemprop="text">
<p>Got a Problem with generating a .SVG File with Python3 and ElementTree.</p>
<pre><code>    from xml.etree import ElementTree as et
    doc = et.Element('svg', width='480', height='360', version='1.1', xmlns='http://www.w3.org/2000/svg')

    #Doing things with et and doc

    f = open('sample.svg', 'w')
    f.write('&lt;?xml version=\"1.0\" standalone=\"no\"?&gt;\n')
    f.write('&lt;!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n')
    f.write('\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"&gt;\n')
    f.write(et.tostring(doc))
    f.close()
</code></pre>
<p>The Function et.tostring(doc) generates the TypeError "write() argument must be str, not bytes". I don't understand that behavior, "et" should convert the ElementTree-Element into a string? It works in python2, but not in python3. What did i do wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>As it turns out, <code>tostring</code>, <em>despite its name</em>, really <em>does</em> return an object whose type is <code>bytes</code>.</p>
<p>Stranger things have happened. Anyway, here's the proof:</p>
<pre><code>&gt;&gt;&gt; from xml.etree.ElementTree import ElementTree, tostring
&gt;&gt;&gt; import xml.etree.ElementTree as ET
&gt;&gt;&gt; element = ET.fromstring("&lt;a&gt;&lt;/a&gt;")
&gt;&gt;&gt; type(tostring(element))
&lt;class 'bytes'&gt;
</code></pre>
<p>Silly, isn't it?</p>
<p>Fortunately you can do this:</p>
<pre><code>&gt;&gt;&gt; type(tostring(element, encoding="unicode"))
&lt;class 'str'&gt;
</code></pre>
<p>Yes, we all thought the ridiculousness of bytes and that ancient, forty-plus-year-old-and-obsolete encoding called <code>ascii</code> was dead.</p>
<p>And don't get me started on the fact that they call <code>"unicode"</code> an <em>encoding</em>!!!!!!!!!!!</p>
</div>
<div class="post-text" itemprop="text">
<p>Try:</p>
<pre><code>f.write(et.tostring(doc).decode(encoding))
</code></pre>
<p>Example:</p>
<pre><code>f.write(et.tostring(doc).decode("utf-8"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Specify encoding of string while writing the xml file.</p>
<p>Like <code>decode(UTF-8)</code> with <code>write()</code>.
Example: <code>file.write(etree.tostring(doc).decode(UTF-8))</code></p>
</div>
<div class="post-text" itemprop="text">
<p>For me it was the easiest to create first some template xml (just defining the root) and then parse it...</p>
<pre><code>docXml = ET.parse('template.xml')
root = docXml.getroot()
</code></pre>
<p>then doing what I wanted to do in my xml and them print it...</p>
<pre><code>docXml.write("output.xml", encoding="utf-8")
</code></pre>
</div>
<span class="comment-copy">Did you check the documentation? See <a href="https://docs.python.org/3/library/xml.etree.elementtree.html" rel="nofollow noreferrer">this page</a> and search for <code>tostring</code>. Does that help?</span>
<span class="comment-copy">not really, it should be decoded already in utf-8 bytestring, but python3 seems to have a problem with that</span>
<span class="comment-copy">It was fun to test out. I couldn't believe it when I saw the result of <code>type(tostring(element))</code>. And then seeing the result change because of a change to a parameter value. Wow. That was really weird. Nice question.</span>
