<div class="post-text" itemprop="text">
<p>I have a list of dictionaries of images resolutions:</p>
<pre><code>[
{'ratio': 1.7777777777777777, 'pixels': 230400, 'key': 'hor_640x360'}, 
{'ratio': 2.1006711409395975, 'pixels': 46637, 'key': 'hor_313x149'}, 
{'ratio': 2.1006711409395975, 'pixels': 746192, 'key': 'hor_1252x596'}
]
</code></pre>
<p>I need to choose the dictionary which ratio is closer to <code>1.77672955975</code> (that is the result of <code>float(565) / float(318)</code>) and, if the ratio is equal, the one with the most pixels. In other words I need to choose the biggest image from the list which, once resized and cropped to 565x318, will need less cropping.</p>
<p>I was thinking about sorting the list 2 times, the first time based on pixels and the second one based on which has the result of <code>abs(ratio - (float(565) / float(318)))</code> smaller. In this way on the top would remain the one with the most pixels and the closest ratio match. But how to do the sorting?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html?highlight=super#min" rel="nofollow noreferrer"><code>min(..)</code></a> for that with a <code>key</code>:</p>
<pre><code>matching_dic = min(dicts,key=lambda x:(abs(1.77672955975-x['ratio']),-x['pixels']))
</code></pre>
<p>resulting into:</p>
<pre><code>&gt;&gt;&gt; min(dicts,key=lambda x:(abs(1.77672955975-x['ratio']),-x['pixels']))
{'key': 'hor_640x360', 'pixels': 230400, 'ratio': 1.7777777777777777}
</code></pre>
<p>The idea is that the <code>key</code>: <code>lambda x:(abs(1.77672955975-x['ratio']),-x['pixels'])</code> will for each dictionary calculate the difference between your given ratio (here <code>1.77672955975</code>) and the <code>'ratio'</code> of this dictionary. We return a tuple (with <code>-x['pixels']</code> as second element for <em>tie-breaking</em> (kudos to @MosesKoledoye for spotting that).</p>
</div>
<div class="post-text" itemprop="text">
<p>The standard solution for sorting by multiple attributes is to use tuples, because tuples get sorted by their elements.</p>
<pre><code>keyfunc= lambda r:(abs(r['ratio']-1.77672955975), -r['pixels'])
print(min(resolutions, key=keyfunc))
</code></pre>
</div>
<span class="comment-copy">If the ratio can't be negative (which I think is the case), you can simply use <code>x['ratio']</code> alone.</span>
<span class="comment-copy">@MosesKoledoye: but you have to calculate the <i>difference</i>: the difference can be negative.</span>
<span class="comment-copy">Ah yes. You'll need <code>'pixels'</code> to break ties tho.</span>
<span class="comment-copy">@MosesKoledoye: apparently I missed that.</span>
<span class="comment-copy">Which should be equivalent to: <code>keyfunc = lambda r: (-abs(r['ratio'] - 1.77672955975), r['pixels']) print(max(resolutions, key=keyfunc))</code></span>
