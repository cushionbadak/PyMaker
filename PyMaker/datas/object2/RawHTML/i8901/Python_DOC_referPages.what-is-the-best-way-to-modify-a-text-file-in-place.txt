<div class="post-text" itemprop="text">
<p>Apologies if something similar has already been asked - I did search around a bit, and I probably missed something, but it seems to me at least that the answers for other questions weren't really about the same thing I'm wanting to do.</p>
<p>I have a text file, (let's call it 'Potatoes.txt') containing the following info:</p>
<pre><code>Town 1,300,
Town 2,205,
Town 3,600,
Town 4,910,
Town 5,360,
</code></pre>
<p>What I want to do is decrease the number for certain towns, and modify the text file accordingly.
I did a little research and it appears you can't modify text files, and I need the text file to have the same name, just have different values inside it, so I'm currently doing this instead:</p>
<pre><code>f = open("ModifiedPotatoes.txt","w")
f.close()

with open("Potatoes.txt","r") as file:
    for line in file:
       info = line.split(",")
       if "Town 2" or "Town 4" in line:
           info[1] -= 20
       with open("ModifiedPotatoes.txt","a"):
           infoStr = "\n" + ",".join(str(x) for x in info)
           file.write(infoStr)

f = open("Potatoes.txt","w")
f.close()

with open("ModifedPotatoes.txt","r") as file:
    for line in file:
        with open("Potatoes.txt","a") as potatoesFile:
            potatoesFile.write(line)
</code></pre>
<p>So basically I'm just overwriting the old file to a blank one, then copying the value from the modified / temporary file. Is there a better way to do this I'm missing?</p>
<p>Thanks for the help.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I did a little research and it appears you can't modify text files</p>
</blockquote>
<p>There is a module that gives you the same effect as modifying text as you loop over it.  Try using the <a href="https://docs.python.org/3/library/fileinput.html" rel="nofollow noreferrer"><em>fileinput</em></a> module with the <em>inplace</em> option set to <em>True</em>.  </p>
<p>Here is a little Python3.6 code to get you started:</p>
<pre><code>from fileinput import FileInput

with FileInput(files=['Potatoes.txt'], inplace=True) as f:
    for line in f:
        line = line.rstrip()
        info = line.split(",")
        if "Town 2" in line or "Town 4" in line:
            info[1] = int(info[1]) - 20
            line = ",".join(str(x) for x in info))
        print(line)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try:</p>
<pre><code>mod_lines = []

with open("Potatoes.txt", "r") as f:
    for line in f:
        info = line.split(",")
        if info[0] in ("Town 2", "Town 4"):
            info[1] = int(info[1]) - 20
        mod_lines.append(info)

with open("Potatoes.txt", "w") as f:
    for m in mod_lines:
        f.write(",".join([str(x) for x in m]))
</code></pre>
<p>This is certainly not the best way, but it's certainly better and works.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>csv</code> module to do the file/string handling.</p>
<p>Just read all the values in and loop over them line by line, making adjustments as required. Then write them back to a new file using a <code>csv.writer</code> object.</p>
<pre><code>import csv
import shutil
import os

with open('potatoes.txt') as f, open('newpotatoes.txt', 'w') as fout:
    rdr = csv.reader(f)
    wrt = csv.writer(fout)

    for line in rdr:
        if line[0] in ('Town 2', 'Town 4'):
            line[1] = str(int(line[1]) - 20)
        wrt.writerow(line)

shutil.copyfile('newpotatoes.txt', 'potatoes.txt')
os.remove('newpotatoes.txt')
</code></pre>
<p>The line</p>
<pre><code>line[1] = str(int(line[1]) - 20)
</code></pre>
<p>is possibly a little messy. It arises because the values from the csv are all strings. So this is a simple way to convert it to an integer, subtract 20 and convert back to a string.</p>
<p>Looking at your code, there is a mistake in there often made by beginners.</p>
<pre><code>if "Town 2" or "Town 4" in line:
</code></pre>
<p>You have to realize that this is combination of two separate statements and is not what you expect. The first statement is just <code>Town 2</code>, which will always evaluate to <code>True</code>. The second statement is <code>"Town 4" in line"</code>, which will return True if the string "Town 4" is contained anywhere in the <code>line</code> string. </p>
<p>Your intent was no doubt to test if either string was in <code>line</code>. To do that you need to explicitly test both strings.</p>
<pre><code>if "Town 2" in line or "Town 4" in line:
</code></pre>
<p>Will work as expected. You can take it a step further though and cut out some inelegance present in that statement. </p>
<p>You know that string should always occur in the first element of the string, after the <code>split</code> this is <code>info[0]</code> in your code (or <code>line[0]</code> in mine as I let <code>csv</code> do the split).</p>
<p>You can therefore write</p>
<pre><code>if line[0] in ('Town 2', 'Town 4'):
</code></pre>
<p>Which I think you'll agree is easier to read and less repetitive typing, especially if you go on to add more Towns.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is possible to open a file for both reading and writing using mode "r+"</p>
<pre><code>data = []
with open("temp", "r+") as inFile:
    for line in inFile:
        ar = line.split(",")
        if ar[0] in ("Town 2", "Town 4"):
            data.append( (ar[0], int(ar[1]) - 20, "\n") )
        else:
            data.append(ar)

    inFile.seek(0)
    for d in data:
        inFile.write(",".join([str(x) for x in d]))
    inFile.truncate()
</code></pre>
<p>In order to keep everything clean, I rewind the file after reading it using seek(0), write every line back into it from a buffer, and truncate any remaining part of the file before closing it. I would be interested to know if and when these operations aren't necessary.</p>
<p>This variation doesn't modify (clobber) any other files in the directory, which is a benefit in cases where the code might run simultaneously on different input files. I have no idea if only opening one file one time has any performance benefit, but it probably does to a small degree.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/19134163/python-modifying-text-file-after-certain-character">Python: Modifying text file after certain character</a> and <a href="http://stackoverflow.com/q/17067573/62576">Modifying parameter in existing text file with Python</a> and many others (search here for <i>python modify text file</i>).</span>
<span class="comment-copy">Does the order of the towns in the file matter? How large is the file (can we fit it all into memory)?</span>
<span class="comment-copy">Don't forget to use <code>w</code> instead of <code>r</code> in <code>with open("ModifedPotatoes.txt","r") as file:</code></span>
