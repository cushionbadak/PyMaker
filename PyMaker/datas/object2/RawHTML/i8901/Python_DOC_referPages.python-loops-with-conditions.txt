<div class="post-text" itemprop="text">
<p>Function <code>f</code> will do needless iterations. </p>
<pre><code>def f(array):
    for (i, row) in enumerate(array):
        for (j, value) in enumerate(row):
            if i &lt; some_number and j &gt; some_other_number:
                do_something
</code></pre>
<p>Is there an idiomatic way to enforce the condition in the <code>for</code> loop?</p>
<pre><code>def f(array):
    for (i &lt; some_number, row) in enumerate(array):
        for (j &gt; some_other_number, value) in enumerate(row):
            do_something
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html?highlight=islice#itertools.islice" rel="nofollow noreferrer"><code>itertools.islice(iterable,start,stop[,step])</code></a> for that:</p>
<pre><code><b>from itertools import islice</b>

def f(array):
    for (i, row) in <b>islice(</b>enumerate(array)<b>,some_number)</b>:
        for (j, value) in <b>islice(</b>enumerate(row)<b>,some_other_number+1,None)</b>:
            # do_something
            pass</code></pre>
<p>Given you do not need <code>i</code> and <code>j</code> in your computation (you only need them for bounds checks, you can even omit them).</p>
<pre><code>from itertools import islice

def f(array):
    for row in islice(array,some_number):
        for value in islice(row,some_other_number+1,None):
            # do_something
            pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well, you can always use <code>range</code>:</p>
<pre><code>def f(array):
    for i in range(some_number, len(array)):
        row = array[i]
        for j in range(some_other_number, len(row)):
            value = row[j]
            # do_something
</code></pre>
<p>provided that <code>some_number</code> does not depend on <code>row</code> and <code>some_other_number</code> does not depend on <code>value</code>. Otherwise you can't really do anything.</p>
<p>Note that this requires both <code>array</code> and <code>row</code> objects to support <code>__getelement__</code> (e.g. when both are real list). It won't work for generators.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't in-line that condition, but you can prevent the inner loop from being entered. </p>
<pre><code>def f(array):
    for (i, row) in enumerate(array):
        if i &lt; some_number:
            for (j, value) in enumerate(row):
                j &gt; some_other_number:
                    do_something
</code></pre>
<p><code>enumerate</code> does have a <code>start</code> parameter you could try</p>
</div>
<span class="comment-copy">Even if this were possible, the same iterations would be done</span>
<span class="comment-copy">However since <code>i</code> is always increasing a <code>break</code> might be useful here.</span>
<span class="comment-copy">Why not just use a while loop?</span>
<span class="comment-copy">That will only work if <code>array</code> and <code>row</code> support <code>__getelement__</code> however. Not generators, etc. But +1 (althoug it is perhaps worth mentioning).</span>
<span class="comment-copy">@WillemVanOnsem True.</span>
