<div class="post-text" itemprop="text">
<p><strong>Question</strong></p>
<p>I installed a local package called <code>credentials</code> using</p>
<pre><code>pip install -e c:\users\worker\src\clockwork\lib\credentials
</code></pre>
<p>But when I try to import the package from a sibling directory, it fails with an ImporError:</p>
<pre><code>cd c:\users\worker\src\clockwork\bank
python -c "import credentials"
...
ImportError: No module named 'credentials'
</code></pre>
<p>Confusingly, the package <code>credentials</code> is listed as successfully installed as shown when I run <code>pip list</code>:</p>
<pre><code>...
credentials (1.0.0, c:\users\worker\src\clockwork\lib\credentials)
...
</code></pre>
<p>How can I install my local package so that it can be imported?</p>
<p><strong>Background</strong></p>
<p>I am using Python 3.4 (32-bit). The package contains two files:</p>
<pre><code>credentials\__init__.py
credentials\setup.py
</code></pre>
<p>The <code>__init__.py</code> file defines a single function. The <code>setup.py</code> file is short:</p>
<pre><code>from distutils.core import setup

setup(name='credentials', version='1.0.0')
</code></pre>
<p><strong>Workaround</strong></p>
<p>I currently add the directory containing the package (<code>c:\users\worker\src\clockwork\lib</code>) to my <code>PATH</code> variable as a workaround. But my question is how to install the package properly so that I do not need to modify the <code>PATH</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem centers on <code>setup.py</code>. It needs to declare a package:</p>
<pre><code>from distutils.core import setup

setup(name='credentials', version='1.0.0', packages=['credentials'])
</code></pre>
<p>But this <code>setup.py</code> must be in the parent directory of the <code>credentials</code> package, so in the end, the directory structure is:</p>
<pre><code>...\credentials\setup.py
...\credentials\credentials\__init__.py
</code></pre>
<p>With this change, the module is found after reinstalling the package.</p>
<p>This could also be caused by two Python installs (but wasn't in my case), and @Mr_and_Mrs_D gives an answer for that case.</p>
</div>
<div class="post-text" itemprop="text">
<p>Uninstall the python package then install it using:</p>
<pre><code>python -m pip install -e c:\users\worker\src\clockwork\lib\credentials
</code></pre>
<p>What is probably happening is that you have multiple python installs and pip is run from one install while you are trying to use the package from another. See also:</p>
<ul>
<li><a href="https://stackoverflow.com/q/25749621/281545">What's the difference between pip install and python -m pip install?</a></li>
<li><a href="https://docs.python.org/3/installing/#basic-usage" rel="noreferrer">https://docs.python.org/3/installing/#basic-usage</a></li>
</ul>
</div>
<span class="comment-copy">Do you have multiple versions of Python installed?</span>
<span class="comment-copy">It looks to me like your <code>setup.py</code> is <i>too</i> short.  See the example in <a href="https://docs.python.org/2/distutils/introduction.html#distutils-simple-example" rel="nofollow noreferrer">the documentation</a> (and <a href="https://docs.python.org/3/distutils/setupscript.html" rel="nofollow noreferrer">another</a>).  You didn't specify any modules or packages to install.</span>
<span class="comment-copy">@BrenBarn your comment is half the answer. The other half is to create a subdirectory for the package and leave setup.py in the parent directory. If you post it as an answer, then I'll accept it.</span>
