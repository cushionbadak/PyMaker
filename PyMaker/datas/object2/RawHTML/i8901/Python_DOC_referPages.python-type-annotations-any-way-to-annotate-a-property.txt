<div class="post-text" itemprop="text">
<p>I'm defining a Python class:</p>
<pre><code>class Foo:
    bar = property(lambda self: Bar(self))
</code></pre>
<p>I want to annotate the <code>bar</code> property to say that it contains an item of class <code>Bar</code>. Is there an accepted way of doing that? I know that this is valid Python syntax:</p>
<pre><code>bar: Bar = property(lambda self: Bar(self))
</code></pre>
<p>But is this an accepted way of annotating a property?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to be safe, simply refactor it into using the decorator form and specify a return value:</p>
<pre><code>class Foo:
    @property
    def bar(self) -&gt; Bar:
        return Bar(self)
</code></pre>
<p>this is also the form used in <a href="https://github.com/python/typeshed" rel="nofollow noreferrer"><code>typeshed</code></a> which collects stubs annotating the standard library and also smoothly passes through <code>mypy</code>. </p>
<p>As for variable annotation syntax of Python 3.6, the form:</p>
<pre><code>bar: Bar = property(lambda self: Bar(self))
</code></pre>
<p>is currently acceptable when checking with <code>mypy</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>In such situation. I may well draw upon the design of other languages.
Take Scala for example:</p>
<pre class="lang-scala prettyprint-override"><code>object A {
    def property: Int = { println("property called"); 1 }
}

A.property
// property called
// res: Int = 1
</code></pre>
<p>Scala language has <em>Uniform Access Principle</em> in mind:</p>
<blockquote>
<p>there should be no difference from user between accessing with an attribute, precomputed property, or parameterless method.</p>
</blockquote>
<p>A computable property in theory is just a function that has zero parameters, e.g. <code>()=&gt;T</code> in Scala. While from user viewpoint it should just be a constant property with type <code>T</code>.</p>
<hr/>
<p>Back to the question, if we borrow the principle(it's good in my opinion), the type should just the return type -- <code>Bar</code>, not the <code>property</code> decorator type in Python.</p>
</div>
<span class="comment-copy">notice that property can take a <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer">doc</a> string</span>
<span class="comment-copy">This doesn't work: "def bar(self) -&gt; Bar:"  is not valid code!</span>
<span class="comment-copy">@z0mbi3 I'm not really sure what you mean? That is valid code.</span>
