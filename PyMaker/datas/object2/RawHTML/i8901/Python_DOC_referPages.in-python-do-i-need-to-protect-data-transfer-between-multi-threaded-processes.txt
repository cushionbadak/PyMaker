<div class="post-text" itemprop="text">
<p>For example, if a process is generating an image, and other parallel process is accessing this image through a get method, my intuition tells me that it may be dangerous to access that image while it is being written.</p>
<p>In C++ I have to use mutexes to make sure the image isn't accessed while it is being written, otherwise I'm experiencing random segfaults. but since python has some data protection mechanisms that I don't fully know, I'm not sure if I need to do this.</p>
<pre><code>PSEUDO-CODE:

Class Camera(object):

    def __init__(self):
        self._capture = camera_handler() #camera_handler is a object that loads the driver and lets you control the camera.
        self.new_image = None
        self._is_to_run = False

    def start(self):
        self._is_to_run = True
        self._thread = thread_object(target=self.run)                
        self._thread.start()            

    def run(self):
        while(self._is_to_run):
            self.new_image = self._capture.update()


cam = Camera()
cam.start()

while True:
    image = cam.new_image
    result = do_some_process_image(image)
</code></pre>
<p>Is this safe? </p>
</div>
<div class="post-text" itemprop="text">
<p>First of al, the <code>threading</code> module uses threads, <em>not</em> different processes!</p>
<p>The crucial difference between threads and processes is that the former share an address space (memory), while the latter don't.</p>
<p>The "standard" python implementation (CPython) uses a Global Interpreter Lock to ensure that only one thread at a time can be executing Python bytecode. So for data that can be updated with one one bytecode instruction (like <code>store_fast</code>) you <em>might</em> not need mutexes. When a thread that is modifying such a variable is interrupted, either the store has been done or it hasn't.</p>
<p>But <em>in general</em> you definitely need to protect data structures from reading and modification by multiple threads. If a thread is interrupted while it is in the proces of modifying say a large dictionary and execution is passed to another thread that tries to read from the dictionary, it might find the data in an inconsistant state.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python <em>shouldn't</em> segfault in situations like this - the <a href="https://wiki.python.org/moin/GlobalInterpreterLock" rel="nofollow noreferrer">global intepreter lock</a> is your friend. However, even in your example there's every chance that a camera interface is going to go into some random C library that doesn't necessarily behave itself. Even then, it doesn't prevent all race conditions in your code and you could easily find inconsistent data because of that.</p>
<p>Python does have <a href="https://docs.python.org/3/library/threading.html#lock-objects" rel="nofollow noreferrer"><code>Lock</code></a> which is very low-level and doesn't provide much functionality. <a href="https://docs.python.org/3/library/threading.html#threading.Condition" rel="nofollow noreferrer"><code>Condition</code></a> is a higher-level type that is better for implementing a mutex-like lock:</p>
<pre><code># Consume one item
with cv:
    while not an_item_is_available():
        cv.wait()
    get_an_available_item()

# Produce one item
with cv:
    make_an_item_available()
    cv.notify()
</code></pre>
<p>Incidentally, there was a <a href="https://docs.python.org/2/library/mutex.html" rel="nofollow noreferrer"><code>mutex</code></a> in Python 2, which was deprecated in 2.6 and removed in Python 3.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think what you are looking for is is the lock Object -&gt; <a href="https://docs.python.org/2/library/threading.html#lock-objects" rel="nofollow noreferrer">https://docs.python.org/2/library/threading.html#lock-objects</a></p>
<blockquote>
<p>A primitive lock is a synchronization primitive that is not owned by a
  particular thread when locked. In Python, it is currently the lowest
  level synchronization primitive available, implemented directly by the
  thread extension module.</p>
</blockquote>
<p>In your example, I would encapsulate the access  to the image in a function like this</p>
<pre><code>def image_access(self, image_Data = None):
    lock = Lock()
    lock.acquire()
    temp = self.new_image
    try:
        if image_Data not None:
            self.new_image = image_Data
    finally:
        lock.release()
    if image_Data is None:
        return temp
</code></pre>
<p>For more on Thread synchronization, see -&gt; <a href="http://effbot.org/zone/thread-synchronization.htm" rel="nofollow noreferrer">http://effbot.org/zone/thread-synchronization.htm</a></p>
<p>Edit:</p>
<p>Here are the cahnges to the ohter functions</p>
<pre><code>def run(self):
    while(self._is_to_run):
        self.image_access(self._capture.update())

...

while True:
    result = do_some_process_image(cam.image_access())
</code></pre>
</div>
<span class="comment-copy">Protect from what?</span>
<span class="comment-copy">Welcome to StackOverflow. Please see <a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a>. Could you give us the code that you have, what you're expecting, and what you're seeing instead?</span>
<span class="comment-copy">I thought the question was clear. There is no need for code.</span>
<span class="comment-copy">The question is far from clear. What threat are you imagining? What environment are you operating in? What requirements do you have for reliability and security?</span>
<span class="comment-copy">Hope it is clear now.</span>
<span class="comment-copy">Yes, when I say processes, I do not mean actual processes with different ID's in the system, but different routines. I admit that it may lead to confusion. Good answer.</span>
