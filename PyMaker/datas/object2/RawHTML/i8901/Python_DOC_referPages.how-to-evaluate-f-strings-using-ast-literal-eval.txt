<div class="post-text" itemprop="text">
<p>When trying to evaluate f-strings with <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a> I get a <code>ValueError</code> about a "malformed node or string":</p>
<pre><code>from ast import literal_eval

a = 10

literal_eval("f'test {a}'")
</code></pre>
<p>Throws the following error:</p>
<pre><code>---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;...&gt; in &lt;module&gt;()
      3 a = 10
      4 
----&gt; 5 literal_eval("f'test {a}'")

C:\...\lib\ast.py in literal_eval(node_or_string)
     83                     return left - right
     84         raise ValueError('malformed node or string: ' + repr(node))
---&gt; 85     return _convert(node_or_string)
     86 
     87 

C:\...\lib\ast.py in _convert(node)
     82                 else:
     83                     return left - right
---&gt; 84         raise ValueError('malformed node or string: ' + repr(node))
     85     return _convert(node_or_string)
     86 

ValueError: malformed node or string: &lt;_ast.JoinedStr object at 0x000001F20CE718D0&gt;
</code></pre>
<p>However it works without problems for raw or binary strings:</p>
<pre><code>&gt;&gt;&gt; literal_eval("r'This'")
'This'
&gt;&gt;&gt; literal_eval("b'This'")
b'This'
</code></pre>
<p>Can I make <code>ast.literal_eval</code> work on f-strings? And if yes, what do I need to change?</p>
</div>
<div class="post-text" itemprop="text">
<p>This isn't possible.  An f-string is sort of like the following<sup>1</sup> :</p>
<pre><code>map = {}
map.update(globals())
map.update(locals())
string.format(**map)
</code></pre>
<p>This is actually a dramatic understatement -- f-strings also support other types of expressions that aren't just name-lookups or simple things like item access that you can get with vanilla format strings.  e.g. They support any other valid python expression including function calls, mathematical equations, etc.</p>
<pre><code>&gt;&gt;&gt; expr = '"boom"'
&gt;&gt;&gt; f'foo{eval(expr)}'
'fooboom'
</code></pre>
<p>The f-string gets evaluated by using the <code>__format__</code> protocol and the expressions that it contains get evaluated using normal python.  This means that an f-string <em>can't</em> be a literal.  It's an expression<sup>1</sup>.  Note that like any arbitrary expression, it cannot be evaluated safely -- so you probably wouldn't even want it to be "eval-able" by <code>ast.literal_eval</code> anyway.</p>
<p><sup><sup>1</sup>In the AST, you'll see that it is accomplished via the <code>JoinedStr</code>, <code>Str</code> and <code>FormattedValue</code> ast nodes.  Of these, the only one which could be considered a literal is <code>Str</code>.</sup></p>
</div>
<div class="post-text" itemprop="text">
<p>F strings can contain arbitrarily complex expressions.  A simple example.</p>
<pre><code>&gt;&gt;&gt; a = 2; b=3; print(f'x{a**b}x')
</code></pre>
<p>x8x</p>
<p>They are neither literals or nor anything like literals and are not suitable for literal_eval.</p>
</div>
<span class="comment-copy"><code>f'test {a}'</code> isn't a literal. It performs a calculation (the <code>FORMAT_VALUE</code> opcode).</span>
<span class="comment-copy">Your code covers a common use of f strings (name interpolation), and is enough to explain the M's failure.  But it falls short of allowing the complex expressions that can occur between the braces, or between { and :. The actual equivalent is more like <code>process(string).format(&lt;expresssion0&gt;, &lt;exression1&gt;, ...)</code> where <code>process</code>pulls out the expressions so that they can be evaluated outside the simplified string.</span>
<span class="comment-copy">@TerryJanReedy -- Yeah.  I had a footnote that was attempting to explain that f-strings are <i>more</i> than just syntactic sugar for name lookups.  I don't think that I made that at all clear enough so I've tried to rework the text a bit to hopefully make it more clear ...</span>
