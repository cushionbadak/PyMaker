<div class="post-text" itemprop="text">
<p>I have a simple question about lambda functions. I want to do a loop, in which every iteration defines a new lambda function based on a lambda function from the previous iteration.</p>
<pre><code>f = lambda x: x**2
j=0
J=2
while j&lt;J:
    f2 = lambda x: 0.5*f(x)
    f = f2
    j+=1
</code></pre>
<p>I expect the result of f(3) to be 2.25 = 0.5*0.5*3**2. However, I get the following error:</p>
<pre><code>RecursionError: maximum recursion depth exceeded
</code></pre>
<p>I thought lambda functions can be used flexibly like this. I suppose there is a known pythonic way of how to do this properly?</p>
</div>
<div class="post-text" itemprop="text">
<p>The name <code>f</code> inside your lambda is looked up <em>at the time the lambda is called</em> - at which point it refers to the lambda itself, thus the infinite recursion.</p>
<p>The usual idiom for capturing a value at a particular moment in time is to make it a default parameter of the lambda, which gets evaluated at definition time:</p>
<pre><code>    f2 = lambda x, f=f: 0.5*f(x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When a <code>lambda</code> function is created, it maintains a reference to the local environment so that it can look up variables within the <code>lambda</code> when it is called. You need to pass in your first <code>lambda</code> function as a parameter to the second one:</p>
<pre><code>f = lambda x: x**2
j=0
J=2
while j&lt;J:
    f2 = lambda x, f=f: 0.5*f(x)
    f = f2
    j+=1
</code></pre>
<p>Note that this is covered in the <a href="https://docs.python.org/3/faq/programming.html#why-do-lambdas-defined-in-a-loop-with-different-values-all-return-the-same-result" rel="nofollow noreferrer">Python docs FAQ</a>.</p>
</div>
<span class="comment-copy">Is there also a way to do this using <code>def</code> rather than <code>lambda</code>?</span>
<span class="comment-copy">Sure, the same trick with default parameters works just as well for a regular function.  Keep in mind that lambdas do not add any actual new functionality to Python, they're just a shortcut for defining really simple functions.</span>
<span class="comment-copy">Because the answers are exactly the same, I accepted the first one. Thank you</span>
<span class="comment-copy">No worries, you can't accept both :)</span>
<span class="comment-copy">Is there also a way to do this using <code>def</code> rather than <code>lambda</code>?</span>
