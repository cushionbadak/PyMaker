<div class="post-text" itemprop="text">
<p>Currently, I'm getting data from 10.000+ databases using a script like this:</p>
<pre><code>def get_data(cursor):
    cursor.execute("SELECT * FROM COMPANIES")
    identity, closing_date, owner_identity = cursor.fetchall()
    return {
        "identity": identity,
        "closing_date": closing_date,
        "owner_identity": owner_identity
    }

def collect_databases_data(options):
    options["databases"]["data"] = [
        get_data(connection.cursor())
        for connection in options["databases"].values()
    ]
    return options
</code></pre>
<p>And then I'm iterating over the list of dictionaries:</p>
<pre><code>for data in options["databases"]["data"]:
    # i do something here with identity, closing_date and owner_identity
</code></pre>
<p>I'm thinking about change the script to return a tuple, instead of a dictionary:</p>
<pre><code>def get_data(cursor):
    cursor.execute("SELECT * FROM COMPANIES")
    return cursor.fetchall()

def collect_databases_data(options):
    options["databases"]["data"] = [
        get_data(connection.cursor())
        for connection in options["databases"].values()
    ]
    return options
</code></pre>
<p>Then I could:</p>
<pre><code>for identity, closing_date, owner_identity in options["databases"]["data"]:
    # I do something here with identity, closing_date and owner_identity
</code></pre>
<p>Which would be faster (sometimes I can have 20.000 dictionaries), but unreadable without explanation. Is this considered a bad practice? Should I avoid? I see Python programmers love lists and tuples, but I don't know yet if they use tuples to store data, too.</p>
</div>
<div class="post-text" itemprop="text">
<p>Consider using a <a href="https://docs.python.org/3/library/collections.html?highlight=namedtuple#collections.namedtuple" rel="nofollow noreferrer"><code>collections.namedtuple</code></a> in your <code>get_data</code> function.</p>
<p>You can declare one like this:</p>
<pre><code>CompanyData = collections.namedtuple('CompanyData', 'identity, closing_date, owner_identity')
</code></pre>
<p>You can then create one like this:</p>
<pre><code>data = CompanyData(cursor.fetchone())
return data
</code></pre>
<p>And access it like this:</p>
<pre><code>for company in options["databases"]["data"]:
    do_something_with(company.identity, company.owner_identity)
</code></pre>
</div>
<span class="comment-copy">Have you tried using NamedTuple to represent the rows?  This should be lighter weight than a dictionary, but with description still embedded.</span>
