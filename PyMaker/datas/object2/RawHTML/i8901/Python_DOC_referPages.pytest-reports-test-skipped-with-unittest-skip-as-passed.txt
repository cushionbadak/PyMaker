<div class="post-text" itemprop="text">
<p>The test looks something like this:</p>
<pre><code>import unittest

class FooTestCase(unittest.TestCase):

    @unittest.skip
    def test_bar(self):
        self.assertIsNone('not none')
</code></pre>
<p>When run using <code>pytest</code>, the report looks something like:</p>
<pre><code>path/to/my/tests/test.py::FooTestCase::test_bar &lt;- ../../../../../usr/lib/python3.5/unittest/case.py PASSED
</code></pre>
<p>On the other hand, if I replace <code>@unittest.skip</code> with <code>@pytest.mark.skip</code>, it is properly reported as skipped:</p>
<pre><code>path/to/my/tests/test.py::FooTestCase::test_bar &lt;- ../../../../../usr/lib/python3.5/unittest/case.py SKIPPED
</code></pre>
<p>If anyone could say, am I doing something wrong or is that a bug in <code>pytest</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/unittest.html#unittest.skip" rel="nofollow noreferrer"><code>unittest.skip()</code></a> decorator requires an argument:</p>
<blockquote>
<p><code>@unittest.skip(reason)</code></p>
<p>Unconditionally skip the decorated test. <em>reason</em> should describe why
  the test is being skipped.</p>
</blockquote>
<p>Its usage is found in their <a href="https://docs.python.org/3/library/unittest.html#skipping-tests-and-expected-failures" rel="nofollow noreferrer">examples</a>:</p>
<blockquote>
<pre><code>class MyTestCase(unittest.TestCase):

    @unittest.skip("demonstrating skipping")
    def test_nothing(self):
        self.fail("shouldn't happen")
</code></pre>
</blockquote>
<p>Thus <code>unittest.skip</code> is not a decorator by itself, but a decorator factory - the actual decorator is obtained as a result of calling <code>unittest.skip</code>.</p>
<p>This explains why your test passes instead of being skipped or failing, since it is actually equivalent to the following:</p>
<pre><code>import unittest

class FooTestCase(unittest.TestCase):

    def test_bar(self):
        self.assertIsNone('not none')

    test_bar = unittest.skip(test_bar)
    # now test_bar becomes a decorator but is instead invoked by
    # pytest as if it were a unittest method and passes
</code></pre>
</div>
<span class="comment-copy">Looks like you need to call <code>unittest.skip</code>. Try <code>@unittest.skip(&lt;something&gt;)</code>.</span>
