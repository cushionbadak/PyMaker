<div class="post-text" itemprop="text">
<p>I have a <code>list</code> and want to build (via a comprehension) another list. I would like this new list to be limited in size, via a condition</p>
<p>The following code will fail:</p>
<pre><code>a = [1, 2, 1, 2, 1, 2]
b = [i for i in a if i == 1 and len(b) &lt; 3]
</code></pre>
<p>with</p>
<pre><code>Traceback (most recent call last):
  File "compr.py", line 2, in &lt;module&gt;
    b = [i for i in a if i == 1 and len(b) &lt; 3]
  File "compr.py", line 2, in &lt;listcomp&gt;
    b = [i for i in a if i == 1 and len(b) &lt; 3]
NameError: name 'b' is not defined
</code></pre>
<p>because <code>b</code> is not defined <strong>yet</strong> at the time the comprehension is built.</p>
<p><strong>Is there a way to limit the size of the new list at build time?</strong></p>
<p>Note: I could break the comprehension into a <code>for</code> loop with the proper <code>break</code> when a counter is reached but I would like to know if there is a mechanism which uses a comprehension.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a generator expression to do the filtering, then use <code>islice()</code> to limit the number of iterations:</p>
<pre><code>from itertools import islice

filtered = (i for i in a if i == 1)
b = list(islice(filtered, 3))
</code></pre>
<p>This ensures you don't do more work than you have to to produce those 3 elements.</p>
<p>Note that there is no point anymore in using a list comprehension here; a list comprehension can't be broken out of, you are locked into iterating to the end.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/a/42393595/5393381">@Martijn Pieters</a> is completly right that <code>itertools.islice</code> is the best way to solve this. However if you don't mind an additional (external) library you can use <a href="http://iteration-utilities.readthedocs.io/en/latest/" rel="nofollow noreferrer"><code>iteration_utilities</code></a> which wraps a lot of these <code>itertools</code> and their applications (and some additional ones). It could make this a bit easier, at least if you like functional programming:</p>
<pre><code>&gt;&gt;&gt; from iteration_utilities import Iterable

&gt;&gt;&gt; Iterable([1, 2, 1, 2, 1, 2]).filter((1).__eq__)[:2].as_list()
[1, 1]

&gt;&gt;&gt; (Iterable([1, 2, 1, 2, 1, 2])
...          .filter((1).__eq__)   # like "if item == 1"
...          [:2]                  # like "islice(iterable, 2)"
...          .as_list())           # like "list(iterable)"
[1, 1]
</code></pre>
<p>The <a href="http://iteration-utilities.readthedocs.io/en/latest/generated/Iterable.html" rel="nofollow noreferrer"><code>iteration_utilities.Iterable</code></a> class uses generators internally so it will only process as many items as neccessary until you call any of the <code>as_*</code> (or <code>get_*</code>) -methods.</p>
<hr/>
<p><sup>Disclaimer: I'm the author of <a href="https://github.com/MSeifert04/iteration_utilities" rel="nofollow noreferrer">the <code>iteration_utilities</code> library</a>.</sup></p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>itertools.count</code> to generate a counter and <code>itertools.takewhile</code> to stop the iterating over a generator when the counter reaches the desired integer (<code>3</code> in this case):</p>
<pre><code>from itertools import count, takewhile
c = count()
b = list(takewhile(lambda x: next(c) &lt; 3, (i for i in a if i == 1)))
</code></pre>
<p>Or a similar idea building a construct to raise <code>StopIteration</code> to terminate the generator. That is the closest you'll get to your original idea of <a href="https://stackoverflow.com/a/9572933/6260170">breaking the list comprehension</a>, but I would not recommend it as best practice:</p>
<pre><code>c = count()
b = list(i if next(c) &lt; 3 else next(iter([])) for i in a if i == 1)
</code></pre>
<p>Examples:</p>
<pre><code>&gt;&gt;&gt; a = [1,2,1,4,1,1,1,1]

&gt;&gt;&gt; c = count()
&gt;&gt;&gt; list(takewhile(lambda x: next(c) &lt; 3, (i for i in a if i == 1)))
[1, 1, 1]

&gt;&gt;&gt; c = count()
&gt;&gt;&gt; list(i if next(c) &lt; 3 else next(iter([])) for i in a if i == 1)
[1, 1, 1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>itertools.slice</code></a> is the natural way to extract <em>n</em> items from a generator.</p>
<p>But you can also implement this yourself using a helper function. Just like the <code>itertools.slice</code> <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer">pseudo-code</a>, we catch <code>StopIteration</code> to limit the number of items yielded.</p>
<p>This is more adaptable because it allows you to specify logic if <em>n</em> is greater than the number of items in your generator.</p>
<pre><code>def take_n(gen, n):
    for _ in range(n):
        try:
            yield next(gen)
        except StopIteration:
            break

g = (i**2 for i in range(5))
res = list(take_n(g, 20))

print(res)

[0, 1, 4, 9, 16]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>use enumerate:</p>
<pre><code>b = [n for i,n in enumerate(a) if n==1 and i&lt;3]
</code></pre>
</div>
<span class="comment-copy"><code>[1/i for i in range(-5, 5)]</code> does break out and doesn't iterate to the end.</span>
<span class="comment-copy">@StefanPochmann: it raises an exception, that's <i>not the same thing</i> as a <code>break</code> statement. In the end, you have no list result at all.</span>
<span class="comment-copy">Wasn't clear to me that you meant the <code>break</code> statement, that word can be understood in a more general way. <a href="http://stackoverflow.com/a/38675546/1672429">For example</a> not long ago you said <i>"[<code>return</code>] breaks out of the loop"</i>. In any case, the iteration doesn't go to the end. Also, not having a list result doesn't even have to be a problem. Consider <code>reciprocals = [1/x for x in a]</code>, I think that's reasonable code and if <code>a</code> contains a zero then one might want a <code>ZeroDivisionError</code> and not want a list.</span>
<span class="comment-copy">This is a question about how to limit the size of the list produced by a list comprehension, though. That implies you <i>still want a list result</i>.</span>
<span class="comment-copy">This is a very nice library, thanks (still reading the docs to get a grasp on the multitude of functions)</span>
<span class="comment-copy">Might I recommend changing the first link to the project's home page: <a href="http://iteration-utilities.readthedocs.io/en/latest/" rel="nofollow noreferrer">iteration-utilities.readthedocs.io/en/latest</a>?</span>
<span class="comment-copy">What advantage over the other answers does this have?</span>
<span class="comment-copy">@jpmc26 I don't think it's better than Martijn's solution for this exact purpose, but it's more generalisable because the conditions for terminating the generator could be anything, not just a counter. Also the OP asked specifically about a list comprehension and this is the closest valid syntax to that</span>
<span class="comment-copy">Fair enough. Thanks. Since you posted this well after the other answers, you might want to work something about the flexibility advantage into your answer.</span>
<span class="comment-copy">That's simply wrong. First, this will discard everything except the first 3 items of <code>a</code> (the question wanted to limit <code>b</code> not <code>a</code>) and it will process the whole iterable. It won't stop after finding the third item. It just discards everything thereafter (however it will stick check the <code>n==1 and i &lt; 3</code>).</span>
