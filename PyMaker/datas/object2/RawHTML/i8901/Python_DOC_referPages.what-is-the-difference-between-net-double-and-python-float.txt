<div class="post-text" itemprop="text">
<p>In C#:</p>
<pre><code>Console.WriteLine(1.2d - 1.0d);
</code></pre>
<p>produces <code>0.2</code>. In python 3:</p>
<pre><code>print(1.2 - 1.0)
</code></pre>
<p>produces <code>0.19999999999999996</code>.</p>
<p>My goal is to write fast code in C# that produces the same floating point results as python 3. I'm obviously interested in any and all float arithmetic, not just the example above.</p>
<p>What is the most practical way to achieve that? Is there a library I can use?</p>
<p>In addition, I would like to understand, what accounts for this difference. Both representations are 64 bit, and both seem to be based on IEEE. So what is different about these implementations that make them produce different results?</p>
<p>References:</p>
<ul>
<li><a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow noreferrer">15. Floating Point Arithmetic: Issues and Limitations</a></li>
<li><a href="https://docs.python.org/3/faq/design.html?highlight=float#why-are-floating-point-calculations-so-inaccurate" rel="nofollow noreferrer">Why are floating-point calculations so inaccurate?</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/aa691085(v=vs.71).aspx" rel="nofollow noreferrer">Real literals</a></li>
<li><a href="http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html" rel="nofollow noreferrer">What Every Computer Scientist Should Know About Floating-Point Arithmetic</a></li>
<li><a href="http://stupidpythonideas.blogspot.co.nz/2015/01/ieee-floats-and-python.html" rel="nofollow noreferrer">IEEE Floats and Python</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>As Jon Skeet points out in the comments, you need to compare the bit representations. Try this in C#:</p>
<pre><code>Console.WriteLine($"{BitConverter.DoubleToInt64Bits(1.2d - 1.0d):X}");
</code></pre>
<p>result: <code>3FC9999999999998</code>.</p>
<p>Now in python 3 (courtesy of <a href="https://stackoverflow.com/a/20639672/284111">this answer</a>):</p>
<pre><code>import struct
import binascii
print(binascii.hexlify(struct.pack('&gt;d', (1.2 - 1.0))).decode())
</code></pre>
<p>result: <code>3fc9999999999998</code></p>
<p>As you can see, the result is the same.</p>
</div>
<span class="comment-copy">I suggest you start by looking at the bitwise representation of the result, rather than the string representation - until you've done that, there's no evidence that the subtraction results are actually any different. But you also need to understand that in C# the JIT compiler is allowed to use more precise representations in some arithmetic, e.g. using 80 bit intermediate results while performing multiple 64 bit operations. If you want bit-compatible arithmetic between platforms, that's going to be tricky.</span>
<span class="comment-copy">@JonSkeet, thank you, this is bad news ;(</span>
<span class="comment-copy">FWIW, in Python 2 <code>0.2</code> is printed, but it's the same underlying bit pattern, as can be seen using <code>d = 1.2 - 1.0; print(format(d, '0.60f'))</code> which prints <code>0.199999999999999955591079014993738383054733276367187500000000</code> in either version.</span>
<span class="comment-copy">@JonSkeet I'd like to thank you for your advice to look at the <a href="http://stackoverflow.com/a/42389606/284111">binary representation</a></span>
<span class="comment-copy">In this case, yes - but the other aspect of my comment about what happens to intermediate results when you have complex computations may still be relevant, I'm afraid. (It may happen in Python as well, but the precise rules for <i>when</i> it happens are implementation-specific in .NET.)</span>
<span class="comment-copy">@JonSkeet understood. On an unrelated note, can you tell me, how can be explained that the same bits are printed out as different numbers? Are there any particular (well-known) algorithms that are used for formatting doubles for output?</span>
<span class="comment-copy">For .NET, calling <code>double.ToString()</code> is equivalent to using the <a href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx#GFormatString" rel="nofollow noreferrer">G format specifier</a> - see details there. I have <a href="http://jonskeet.uk/csharp/DoubleConverter.cs" rel="nofollow noreferrer">a class you can use</a> which will print out the <i>exact</i> value of a <code>double</code> - I don't know whether there's an equivalent in Python.</span>
<span class="comment-copy">@JonSkeet, thank you so much again! This is very helpful.</span>
