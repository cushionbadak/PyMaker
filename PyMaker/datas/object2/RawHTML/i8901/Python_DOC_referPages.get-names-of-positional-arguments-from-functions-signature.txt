<div class="post-text" itemprop="text">
<p>Using Python 3.x, I'm trying to get the name of all positional arguments from some function i.e:</p>
<pre><code>def foo(a, b, c=1):
    return
</code></pre>
<p>Right now I'm doing this:</p>
<pre><code>from inspect import signature, _empty
args =[x for x, p in signature(foo).parameters.items() if p.default == _empty]
</code></pre>
<p>When the function alows *args i.e:</p>
<pre><code>def foo(a, b, c=1, *args):
    return
</code></pre>
<p>I'm adding the line:</p>
<pre><code>args.remove("args")
</code></pre>
<p>I was wondering if there is a better way to achieve this.</p>
<hr/>
<p>As <a href="https://stackoverflow.com/a/42352775/6076911">suggested by Jim Fasarakis-Hilliard</a> one better way to deal with *args case is using Parameter.kind:</p>
<pre><code>from inspect import signature, Parameter
args =[]
for x, p in signature(foo).parameters.items():
    if p.default == Parameter.empty and p.kind != Parameter.VAR_POSITIONAL:
        args.append(x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, you can achieve a more robust solution by additionally checking if the <a href="https://docs.python.org/3/library/inspect.html#inspect.Parameter.kind" rel="nofollow noreferrer"><code>.kind</code></a> attribute of the parameter is not equal to <code>Parameter.VAR_POSITIONAL</code>. </p>
<p>For <code>*args</code>, this is the value that is set when you build the signature object from a function:</p>
<pre><code>&gt;&gt;&gt; def foo(a, b, c=1, *args): pass
&gt;&gt;&gt; print(signature(foo).parameters['args'].kind)
VAR_POSITIONAL
</code></pre>
<p>So just import <code>Parameter</code> from <code>inspect</code> and add or the condition that <code>kind != Parameter.VAR_POSITIONAL</code>:</p>
<pre><code>&gt;&gt;&gt; from inspect import Parameter
&gt;&gt;&gt; Parameter.VAR_POSITIONAL == p['args'].kind
True
</code></pre>
</div>
<span class="comment-copy">Note that <code>args</code> is just some kind of "<i>agreement</i>": you can call the parameters whatever you want so there are definitely cases where this won't work.</span>
<span class="comment-copy">Indeed, that's one of the reasons why I'm asking the question. Right now I'm using this for my own functions and I follow the args convention but I'm wondering how to achieve the same in a more "robust" way.</span>
<span class="comment-copy">Isn't it better to use <code>.kind</code> instead of <code>._kind</code>? Attributes starting with an underscore are considered <i>private</i>.</span>
<span class="comment-copy">Yes @WillemVanOnsem, quick typing gets the better of me sometimes.</span>
<span class="comment-copy">Thanks! that solve the problem of *args. Although I still found the list comprehension a little ugly.</span>
<span class="comment-copy">@DaviddelaIglesia Packing everything in a one-liner often has the effect of resulting in an ugly one-liner. Refactoring it into a function with a loop is often a good idea.</span>
