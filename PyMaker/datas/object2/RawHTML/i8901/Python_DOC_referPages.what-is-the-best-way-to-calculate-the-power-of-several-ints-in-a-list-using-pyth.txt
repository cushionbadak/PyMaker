<div class="post-text" itemprop="text">
<p>So what I have is a list of integers such as [2, 2, 2, 3, ..., n] the length of the list can be anywhere from 1 to 100. What I need to do is calculate the powers of all the numbers. This should be super easy but there is also the stipulation that you must raise each number to the power of the next number to the power of the next number and so on. FOR EXAMPLE: if the list contained [2, 3, 4] first I would need to calculate the power of 3^4 and then 2^(answer of 3^4). If the list is longer it would need to calculate the value for all of them. The example above [2, 3, 4] should return 2^81 which should be something like 2417851639229258349412352 according to wolfram. Any help would be awesome even if its just an algorithm (I can figure out the code from there) I've just been struggling to come up with a sufficient algorithm for some time now. </p>
<p>here is some code I have now...</p>
<pre><code>temp = [] 
length = 0

for num in powernumbers:
    for index in num:
        if index.isdigit():
            temp.append(index)
        length = len(temp)
    if length &gt; 0:
        for j in reversed(range(len(temp))):
            _temp = math.pow(int(temp[j-1]), int(temp[j]))
            #THE ABOVE CODE WILL ONLY WORK FOR A LIST OF LEN 2
        print(_temp)
        #needs math.pow(0,(math.pow(1,(math.pow(2,...)))))

print("TEMP:", temp)
</code></pre>
<p>Once again any help is super appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; numbers = [2,3,4] # your list
&gt;&gt;&gt; result = 1
&gt;&gt;&gt; for n in reversed(numbers):
        result = n**result


&gt;&gt;&gt; result
2417851639229258349412352
&gt;&gt;&gt; 
</code></pre>
<p>first initialize the result on 1, then go through the list in reverse order raising the number to the previous result, which the first time is 1 resulting for this example in</p>
<pre><code>result = 4**1 -&gt; 4
result = 3**4 -&gt; 81
result = 2**81 -&gt; 2417851639229258349412352
</code></pre>
<p>but be aware, this <a href="https://en.wikipedia.org/wiki/Tetration" rel="nofollow noreferrer">Nested exponentials</a> will grow very very fast, and you more likely would get a memory error for the insanely big numbers</p>
<pre><code>&gt;&gt;&gt; result = 1
&gt;&gt;&gt; powers = [2,2,2,2,2,2]
&gt;&gt;&gt; for n in reversed(powers):
        result = n**result


Traceback (most recent call last):
  File "&lt;pyshell#60&gt;", line 2, in &lt;module&gt;
    result = n**result
MemoryError
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>functools.reduce</code></a> with reversed list:</p>
<pre><code>&gt;&gt;&gt; from functools import reduce
&gt;&gt;&gt; l = [2, 3, 4]
&gt;&gt;&gt; reduce(lambda x, y: y**x, reversed(l))
2417851639229258349412352
</code></pre>
<p><code>reduce</code> takes two arguments: function and iterable. Then it will cumulatively apply the function to reduce the iterable to single value. First parameter of the function is reduced value and second parameter is item from iterable. Since we want to process the list in reverse order we're using <a href="https://docs.python.org/3/library/functions.html#reversed" rel="nofollow noreferrer"><code>reversed</code></a> so that <code>3**4</code> will be executed first.</p>
<p>Note that on Python 2 <code>reduce</code> is a builtin so there's no need to import anything.</p>
</div>
<div class="post-text" itemprop="text">
<p>Pop the last element off of the list, then go through the list backwards and keep exponentiating.</p>
<pre><code>powernumbers = [2, 3, 4]
result = powernumbers.pop()
for num in powernumbers[::-1]:
    result = num**result
</code></pre>
<p>The result:</p>
<pre><code>&gt;&gt;&gt; result
2417851639229258349412352
</code></pre>
</div>
<span class="comment-copy">you're sure you want this nested power? because they grow too fast to be of any use. Making a <a href="https://en.wikipedia.org/wiki/Multiplication#Products_of_sequences" rel="nofollow noreferrer">productoria</a> make more sense to me</span>
