<div class="post-text" itemprop="text">
<p>I'm trying to use <code>str.format</code> style templating in my logging.  Can't seem to get it working properly.</p>
<pre><code>&gt;&gt;&gt; import logging
&gt;&gt;&gt; logging.basicConfig(filename='/tmp/example', format='{asctime} - {levelname} - {message}', style='{', level=logging.INFO)
&gt;&gt;&gt; logger = logging.getLogger(__name__)
&gt;&gt;&gt; logger.warning('blah')
&gt;&gt;&gt; logger.warning('{foo:03d}', {'foo': 42})
</code></pre>
<p>Actual output:</p>
<pre><code>2017-02-23 16:11:45,695 - WARNING - blah
2017-02-23 16:12:11,432 - WARNING - {foo:03d}
</code></pre>
<p>Expected output:</p>
<pre><code>2017-02-23 16:11:45,695 - WARNING - blah
2017-02-23 16:12:11,432 - WARNING - 042
</code></pre>
<p>What am I missing in this setup?</p>
<p>I'm not interested to see workarounds that format the string before it's logged, or <a href="https://stackoverflow.com/q/13131400/674039">Python 2 solutions</a> which use old %-style templating.  </p>
</div>
<div class="post-text" itemprop="text">
<p>Apparently the <code>style</code> argument only applies to information about messages (such as a timestamp, severity, etc.) and not to actual messages.</p>
<p>From the docstring of <code>logger.warning</code>:</p>
<pre class="lang-none prettyprint-override"><code>warning(msg, *args, **kwargs) method of logging.Logger instance
    Log 'msg % args' with severity 'WARNING'.
</code></pre>
<p>It seems that the <code>msg</code> is always formatted using old-style formatting, so the <code>style</code> argument of the logger is not even considered.</p>
<p>The <a href="https://docs.python.org/3/howto/logging-cookbook.html#using-particular-formatting-styles-throughout-your-application" rel="nofollow noreferrer">logging HOWTO</a> contains a bit more information:</p>
<blockquote>
<p>... you cannot directly make logging calls using <code>str.format()</code> or
  <code>string.Template</code> syntax, because internally the logging package uses
  <code>%</code>-formatting to merge the format string and the variable arguments.
  There would no changing this while preserving backward compatibility,
  since all logging calls which are out there in existing code will be
  using <code>%</code>-format strings.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>"I'm not interested to see workarounds that format the string before it's logged" Why not? The old style formats it before it's logged also... You can put the line to do the formatting inside the <code>logger.warning</code> call and it changes nothing functionally. If <code>{foo:42}</code> is just one member of a much larger dictionary you can do something like this:</p>
<pre><code>for key,val in warningsDictionary.iteritems():
    logger.warning('{'+key+':'+format(val,'03')+'}')
</code></pre>
<p>Whether or not this is sufficient is dependent on what you actually are trying to do.</p>
</div>
<span class="comment-copy">If we format the string before calling logger then log aggregation stuff doesn't work properly</span>
<span class="comment-copy">Could you be more specific? How does it not work properly?</span>
<span class="comment-copy">Consider a message such as <code>logger.warning('problem with thing %(thing_id)03d', {'thing_id': 42})</code>.  This will produce a log message like <code>problem with thing 042</code> in the output.  However, log aggregation services such as <code>sentry</code> will group together <code>problem with thing 001</code>, <code>problem with thing 042</code>, <code>problem with thing 069</code> as different manifestations of the same warning.  If you template the log record yourself, rather than letting the logger handle that, you lose all that functionality and you can get millions of distinct alerts (which should have just been 1 alert, with millions of hits).</span>
