<div class="post-text" itemprop="text">
<p>I have a large array and a function that returns index lists into the array, i.e.,</p>
<pre><code>import numpy

n = 500
a = numpy.random.rand(n)

def get_idx(k):
    # More complicated in reality
    return range(n) if k &gt; 6 else range(k)

data = a[get_idx(29)]
data = a[get_idx(30)]
# ...
</code></pre>
<p>A typical case is that the range is the entire array, <code>range(n)</code>. Unfortunately, <code>a[range(n)]</code> scales with <code>n</code> while <code>a[:]</code> is of course constant-time. It's a pity that one cannot return <code>:</code> from <code>get_idx</code>.</p>
<p>What can I return from <code>get_idx</code> to use as an index for the entire array?</p>
</div>
<div class="post-text" itemprop="text">
<p>NumPy has a helper <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.s_.html#numpy.s_" rel="nofollow noreferrer"><code>np.s_[]</code></a> which can be used to construct <code>slice</code> and <code>Ellipsis</code> objects:</p>
<pre><code>def get_idx(k):
    return np.s_[:] if k &gt; 6 else np.s_[:k]

    # or even np.s_[:None if k &gt; 6 else k]
</code></pre>
<p>In general, <code>a[np.s_[ &lt;stuff&gt; ]]</code> is exactly the same as <code>a[ &lt;stuff&gt; ]</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Have a look at <a href="https://docs.python.org/3/library/functions.html#slice" rel="nofollow noreferrer"><code>slice</code></a></p>
<pre><code>def get_x():
    return slice(2)

a=list(range(100))
a[get_x()]
</code></pre>
<p>will return <code>[0, 1]</code></p>
<h2>UPDATE</h2>
<p>And for your need <code>get_x</code> function should be</p>
<pre><code>def get_x(k, n):
    return slice(n if k &gt; 6 else k)
</code></pre>
<h3>Update</h3>
<p>as @Eric correctly noted it's better to pass <code>None</code> instead of <code>n</code>.
So function would be:</p>
<pre><code>def get_x(k):
    return slice(None if k &gt; 6 else k)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>Ellipsis</code> (translates to '...')</p>
<pre><code>np.identity(2)[Ellipsis]
# array([[1.0, 0.0], [0.0, 1.0]])
</code></pre>
<p>Edit:</p>
<p>I feel I should mention one caveat: If you are sure this will only be used on 1d arrays, it's a perfectly fine and simple solution. However, in a public interface I wouldn't recommend it because it doesn't generalise correctly if a user uses the output of <code>getidx</code> for indexing a multi dimensional array.</p>
<p>For example <code>A[getidx(k), ...]</code> won't be safe anymore and the semantics of <code>A[getidx(k), someslice]</code> will be inconsistent if <code>A</code> has three or more dims.</p>
<p>That said, <code>slice(None)</code> isn't perfect in this respect either, for exammple <code>A[getidx(k), getidx(k)]</code> will behave inconsistently.</p>
<p><code>arange(n)</code> looks like it's always giving the correct behaviour, but of course it's wasteful in most cases.</p>
</div>
<span class="comment-copy"><code>None</code> would be better than passing <code>n</code> here</span>
<span class="comment-copy">@Eric you're right, i've updated answer. Thanks!</span>
