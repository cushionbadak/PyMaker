<div class="post-text" itemprop="text">
<p>I have a Flask app that's part of a task scheduling system. The business logic in many of the routes relies on the current time.</p>
<pre><code>@app.route("/do_stuff")
def do_stuff():
  now = datetime.datetime.now()
  call_func(request.args.get("some_arg"), now)
</code></pre>
<p>I need to bring these functions under test. The tests will need to spoof timestamps, so that I can verify that the app responds properly depending on when various commands arrive.</p>
<p>Are there standard patterns for writing these kinds of tests in Flask? I can think of a bunch of clunky, non-DRY ways to do it. Wondering if there are any more elegant patterns/tools...?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can substitute <code>datetime.now()</code> with a mock implementation. For example in Python 3 there's the <a href="https://docs.python.org/3/library/unittest.mock-examples.html#partial-mocking" rel="nofollow noreferrer"><code>unittest.mock</code></a> which implements this approach.</p>
</div>
<div class="post-text" itemprop="text">
<p>This works, but I'd love to find something cleaner:</p>
<pre><code>@app.route("/do_stuff")
def do_stuff():
  if app.debug and request.args.get("now"):
    now = request.args.get("now")
  else:
    now = datetime.datetime.now()      
  call_func(request.args.get("some_arg"), now)
</code></pre>
<p>With that logic around <code>now</code>, I can pass an optional <code>now</code> argument. If we're running in debug mode, then it can override the normal logic to fetch the current time.</p>
</div>
<span class="comment-copy">You can use <code>pytest</code> and <code>pytest-flask</code> for general Flask testing. See <a href="http://stackoverflow.com/questions/23988853/how-to-mock-set-system-date-in-pytest">this answer</a> for <code>datetime.datetime.now()</code> spoofing.</span>
<span class="comment-copy">I'm on 2.7 for this project, unfortunately...</span>
<span class="comment-copy">You can check out <a href="http://docs.pytest.org/en/latest/monkeypatch.html?highlight=mock" rel="nofollow noreferrer">Pytest</a></span>
<span class="comment-copy">You can install <code>mock</code> in python 2.7 through pypi.</span>
