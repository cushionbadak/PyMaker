<div class="post-text" itemprop="text">
<p>I would like to run to run a script that opens GUI in which i press a start button which runs (opens, writes, runs) cmd.exe command line.</p>
<pre><code>from tkinter import* 
import sys, string, os
import subprocess
class App:
  def __init__(self, master):
    frame = Frame(master)
    frame.pack()

    self.slogan = Button(frame,text="Start",command=self.start)
    self.slogan.pack(side=LEFT)


  def start(self):
    subprocces.call([])

root = Tk()
app = App(root)
root.mainloop()
</code></pre>
<p>Command is following : "ConverterApp.exe"  file1.x file1.y</p>
<p>ConverterApp is placed in a random desktop folder. What is does it converts one type of photo to another. And right now i have to use the command above for every photo, so i want to write pyhton program which will convert all .x files in folder to .y.</p>
<p>From my reaserch on the topic i have to use <code>subprocess</code>, bit im kind of lost on how to use it.</p>
</div>
<div class="post-text" itemprop="text">
<p>use the <strong><code>subprocess</code></strong> module.</p>
<hr/>
<p>Python 2: <a href="https://docs.python.org/2/library/subprocess.html" rel="nofollow noreferrer">https://docs.python.org/2/library/subprocess.html</a></p>
<p>example:</p>
<pre><code>import subprocess
subprocess.call('ConverterApp.exe', 'file1.x', 'file1.y'])
</code></pre>
<hr/>
<p>Python 3: <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">https://docs.python.org/3/library/subprocess.html</a></p>
<p>you can still use <code>subprocess.call</code>, but for Python versions &gt;3.4, it's preferred to use the newer <code>subprocess.run</code>.</p>
<p>example:</p>
<pre><code>import subprocess
subprocess.run(['ConverterApp.exe', 'file1.x', 'file1.y'])
</code></pre>
<hr/>
<p>Note: in both <code>subprocess.call</code>, and <code>subprocess.run</code>, your command should be passed as a sequence (i.e. a list).</p>
</div>
<div class="post-text" itemprop="text">
<p>Have you looked into using <code>os.system</code> to execute commands? It is simple to use and may be sufficient to accomplish what you are trying to do. On Windows, it usually runs <code>cmd.exe</code> for you.</p>
<blockquote>
<p>os.<strong>system</strong>(<em>command</em>)</p>
<blockquote>
<p>Execute the command (a string) in a subshell. This
    is implemented by calling the Standard C function system(), and has
    the same limitations. Changes to sys.stdin, etc. are not reflected in
    the environment of the executed command. If command generates any
    output, it will be sent to the interpreter standard output stream.</p>
<p>On Unix, the return value is the exit status of the process encoded in
    the format specified for wait(). Note that POSIX does not specify the
    meaning of the return value of the C system() function, so the return
    value of the Python function is system-dependent.</p>
<p>On Windows, the return value is that returned by the system shell
    after running command. The shell is given by the Windows environment
    variable COMSPEC: it is usually cmd.exe, which returns the exit status
    of the command run; on systems using a non-native shell, consult your
    shell documentation.</p>
<p>The subprocess module provides more powerful facilities for spawning
    new processes and retrieving their results; using that module is
    preferable to using this function. See the Replacing Older Functions
    with the subprocess Module section in the subprocess documentation for
    some helpful recipes.</p>
<p>Availability: Unix, Windows.</p>
</blockquote>
</blockquote>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/89228/calling-an-external-command-in-python">Calling an external command in Python</a></span>
<span class="comment-copy">"From my reaserch on the topic i have to use subprocess" Yep, <code>subprocess</code> is the correct approach here. I suggest <code>call</code> or <code>check_output</code>, depending on your specific needs. Try playing around with those for a bit.</span>
<span class="comment-copy">please enter a new question for that</span>
<span class="comment-copy">os.system is deprecated... use subprocess instead</span>
<span class="comment-copy">As of the time of this writing, <code>os.system</code> is not listed as being deprecated according to the <a href="https://docs.python.org/3/library/os.html#os.system" rel="nofollow noreferrer">official documentation</a> for Python 3.6.</span>
<span class="comment-copy">perhaps not officially deprecated...  but it's not the preferred way.  from the <code>os.system</code> docs: "The subprocess module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using this function"</span>
