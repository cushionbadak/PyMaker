<div class="post-text" itemprop="text">
<p>I have two lists of list with equal len in Python (let's say 3 for this example).</p>
<pre><code>A = [['Horse','Duck','Goat'],['Rome','New York'],['Apple','Rome','Goat','Boat']]

B = [['Carrot','Duck'],['Car','Boat','Plane'],['Goat','Apple','Boat']]
</code></pre>
<p>I would like to match elements in each row and create a new list of the common elements. The resultant output I require is:</p>
<pre><code>c = [['Duck'],[],['Apple','Goat','Boat']]
</code></pre>
<p>and,</p>
<pre><code>d = [1,0,3] ; where d is a list with the count of common elements at each row.
</code></pre>
<p>Note that within each row of the list of lists, elements can appear in any order.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> and <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a>:</p>
<pre><code>&gt;&gt;&gt; A = [['Horse','Duck','Goat'],['Rome','New York'],
         ['Apple','Rome','Goat','Boat']]
&gt;&gt;&gt; B = [['Carrot','Duck'],['Car','Boat','Plane'],
         ['Goat','Apple','Boat']]
&gt;&gt;&gt; c = [[x for x in a if x in b] for a, b in zip(A, map(set, B))]
&gt;&gt;&gt; d = [len(x) for x in c]
&gt;&gt;&gt; # or d = list(map(len, c))    # you can omit `list` in python 2.x
&gt;&gt;&gt; c
[['Duck'], [], ['Apple', 'Goat', 'Boat']]
&gt;&gt;&gt; d
[1, 0, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>An alternative list comprehension:</p>
<pre><code>c = [[x for x in y if x in B[i]] for i, y in enumerate(A)]
# [['Duck'], [], ['Apple', 'Goat', 'Boat']]

d = [len(x) for x in c]
# [1, 0, 3]
</code></pre>
<p>Alternatively, you could also use this:</p>
<pre><code>res = [set(x) &amp; set(y) for x, y in zip(A, B)]
# or  [set(x).intersection(y) for x, y in zip(A, B)] as @Chris_Rands suggested
# [{'Duck'}, set(), {'Apple', 'Goat', 'Boat'}]
</code></pre>
<p>notice that the format on that last one is not the one you specified but it uses set intersections which are built for these type of operations.</p>
</div>
<span class="comment-copy">is the <code>map(set, B)</code> due to the <code>if x in b</code> lookup?</span>
<span class="comment-copy">@Ev.Kounis, Yes it is.</span>
<span class="comment-copy">Then +1 for scalability</span>
<span class="comment-copy">I like the use of sets, +1, but perhaps <code>[set(x).intersection(y) for x, y in zip(A, B)]</code> is more neat</span>
<span class="comment-copy">@Chris_Rands More <i>neat</i> as in?.. xD</span>
<span class="comment-copy">Well it saves the 2nd explicit <code>set</code> call and the docs talk about the non-operator form as "more readable" but you way is fine too <a href="https://docs.python.org/3/library/stdtypes.html#set.intersection" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#set.intersection</a></span>
<span class="comment-copy">@Chris_Rands I always thought that the <code>intersection()</code> simply hides the conversion to set but not that it is not performed. I'll look it up</span>
<span class="comment-copy">I agree, that's why I said "explicit"</span>
