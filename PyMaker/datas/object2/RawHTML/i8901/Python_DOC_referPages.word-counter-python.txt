<div class="post-text" itemprop="text">
<p>I want to print the number of words in a txt file having 1-20 letter. 
Tried this but it prints 20 zeroes instead. any idea?</p>
<p>edit - in the end the program should plot 20 numbers, each one is the number of words in the file containing 1-20 letters. </p>
<pre><code>fin = open('words.txt')
for i in range(20):
    counter = 0
    for line in fin:
        word = line.strip()
        if len(word) == i:
            counter = counter + 1
    print counter,
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>EDIT</strong></p>
<p>To produce individual counts for each word length you can use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>:</p>
<pre><code>from collections import Counter

def word_lengths(f):
    for line in f:
        for word in line.split():    # does not ignore punctuation
            yield len(word)

with open('words.txt') as fin:        
    counts = Counter(length for length in word_lengths(fin) if length &lt;= 20)
</code></pre>
<p>This uses a generator to read the file and produce a sequence of word lengths. The filtered word lengths are fed into a <code>Counter</code>. You could perform the length filtering on the <code>Counter</code> instead.</p>
<p>If you want to ignore punctuation you could look at using <a href="https://docs.python.org/3/library/stdtypes.html?highlight=str.translate#str.translate" rel="nofollow noreferrer"><code>str.translate()</code></a> to remove unwanted characters, or possibly <a href="https://docs.python.org/3/library/re.html#re.split" rel="nofollow noreferrer"><code>re.split(r'\W+', line)</code></a> instead of <code>line.split()</code>.</p>
<hr/>
<p>Try it like this:</p>
<pre><code>with open('words.txt') as fin:
    counter = 0
    for line in fin:
        for word in line.split():
            if len(word) &lt;= 20:
                counter = counter + 1
    print counter,
</code></pre>
<p>This could be simplified to:</p>
<pre><code>with open('words.txt') as fin:
    counter = sum([1 for line in fin
                      for word in line.split() if len(word) &lt;= 20])
</code></pre>
<p>but that's playing code golf.</p>
<p>You can also use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> if it is practical to read the entire file into memory:</p>
<pre><code>from collections import Counter

with open('words.txt') as fin:
    c = Counter(fin.read().split())
    counter = sum(c[k] for k in c if len(k) &lt;= 20)
</code></pre>
<p>And no doubt there are many other ways to do it. None of the above expect or handle punctuation.</p>
</div>
<div class="post-text" itemprop="text">
<p>It should be like this,<code>counter</code> shouldn't be in <code>for</code> loop,and you could use <code>len()</code> method to get the length of words:</p>
<pre><code>with open("test") as f:
    counter = 0
    for line in f:
        for word in line.split():
            if len(word)&lt;=20:
                counter+=1
    print counter
</code></pre>
<p>Or my way:</p>
<pre><code>import re

with open("file") as f:
    print len(filter(lambda x:len(x)&lt;20,re.split('\n| ', f.read())))
</code></pre>
<p>Hope this helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>using regular expressions</p>
<pre><code>import re

REGEX = r"(\b\S{1,20}\b)"
finder = re.compile(REGEX)

with open("words.txt") as out:
    data = out.read()

matches = re.findall(finder, data)

lst = [0 for _ in range(20)]

for m in matches:
    lst[len(m)] += 1

print(lst)
</code></pre>
</div>
<span class="comment-copy">The program logic is completely backward. Instead of iterating over the file and looking for words with 20 characters, you iterate over the file 20 times.</span>
<span class="comment-copy">Are you looking for one number (count of words up to 20 chars) or 20 numbers (per potential length, how many words are there)?</span>
<span class="comment-copy">looking for 20 numbers, meaning that the first number is the number of words in the file containing 1 letter, the 2nd number is the number of words conataining 2 letters etc...</span>
<span class="comment-copy">tried the first one u sent (haven't learned all the keywords in the second), gave me one number instead of 20. (i commented about it), have any idea whats wrong?</span>
<span class="comment-copy">Nothing wrong, it's just that you clarified your requirement after asking the question. You should make the clarification in the question.</span>
<span class="comment-copy">@Jonathan: answer updated to produce multiple counts.</span>
<span class="comment-copy">I edited my response based on clarified requirements provided by OP</span>
