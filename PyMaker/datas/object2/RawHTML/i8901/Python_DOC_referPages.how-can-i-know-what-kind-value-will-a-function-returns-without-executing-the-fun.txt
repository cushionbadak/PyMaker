<div class="post-text" itemprop="text">
<p>This is my decorator. I want any function that has this decorator to be checked if <code>_kwargs["_dir_abs"]</code> is an absolute path or not. If not I want to fault the <code>_function</code> by returning <code>False</code> if the decorated <code>_function</code> returns <code>bool</code>. And returning <code>None</code> if the <code>_function</code> returns anything other than <code>bool</code>.</p>
<p>The thing is <code>_function</code> is a folder operation (deleting, moving, naming, ...) hence I cannot just try it to see what it returns.</p>
<pre><code>def check_abs_dec(_function):
    def wrapper(*_args, **_kwargs):
        if not check_abs(_kwargs["_dir_abs"]):
            napw()
            """`return False` if the `_function` return `bool`. `return None`
            if the `_function` return anything other than `bool`.
            """

        return _function(*_args, **_kwargs)
    return wrapper
</code></pre>
<p>Is there anyway I can check what value <code>_function</code> will be returned without actually executing it? Is there any workaround?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try annotating your function with return type.</p>
<pre><code>def do_not_call() -&gt; bool:  # Note the `-&gt; bool` part
    raise Exception("Do not call, may have side effects")
</code></pre>
<p>Now you can get return type using <a href="https://docs.python.org/3/library/inspect.html#types-and-members" rel="nofollow noreferrer"><code>__annotations__</code></a> attribute.</p>
<pre><code>print(do_not_call.__annotations__['return'] == bool)  # True
print(do_not_call.__annotations__['return'] == int)  # False

def mysterious():  # Return type is not annotated...
    raise Exception("Do not call this either")
print(mysterious.__annotations__['return'])  # ...so this raises KeyError
</code></pre>
<p>This does however require you to annotate return type of all functions which return type you want to check.</p>
<p>To be honest, I also don't know when it was added to Python, but it works for me with Python 3.5.</p>
<p>If you are hardcore programmer who has plenty of time, I think you can use <a href="https://docs.python.org/3/library/ast.html" rel="nofollow noreferrer"><code>ast</code> module</a> to check bytecode of function for <code>return</code> statements and guess types. I don't recommend it though.</p>
</div>
<div class="post-text" itemprop="text">
<p>No, you cannot do this <em>by definition</em>. This is how dynamic languages work; you cannot know what type will be returned until you execute the function.</p>
</div>
<span class="comment-copy">Have you try the function type?    print(type(_function(*_args, **_kwargs))</span>
<span class="comment-copy">No, it executes <code>_function</code>. I have check it but without the decorators, <a href="http://pastebin.com/nAafWpks" rel="nofollow noreferrer">pastebin.com/nAafWpks</a>.</span>
<span class="comment-copy">I don't get why this is get downvoted tbh :(.</span>
<span class="comment-copy">This is a special case of the Halting Problem.. (<a href="https://en.wikipedia.org/wiki/Halting_problem" rel="nofollow noreferrer">en.wikipedia.org/wiki/Halting_problem</a>)</span>
<span class="comment-copy">This is what I need! Thank you so much!</span>
<span class="comment-copy">what is the name of "-&gt;" notation in Python (what people usually call that sign with)?</span>
<span class="comment-copy">@notalentgeek I don't know :/ This is described in deatil at <a href="https://www.python.org/dev/peps/pep-0484/#abstract" rel="nofollow noreferrer">python.org/dev/peps/pep-0484/#abstract</a> but I couldn't find any official name for this arrow :(</span>
<span class="comment-copy">Alright, so what is the work around? My current solution is to create two <b>exactly</b> the same decorator just to change the <code>return</code> to either <code>False</code> or <code>None</code> in case the <code>if</code> statement fails.</span>
<span class="comment-copy">I can't tell you a workaround because I don't really understand what you want to do. If you know enough to use a different decorator, you must already know that the function will return a different type.</span>
<span class="comment-copy">I know what my function will return into. Is just that I have this decorator that will be attached into to functions that will return <code>bool</code> or an object.</span>
