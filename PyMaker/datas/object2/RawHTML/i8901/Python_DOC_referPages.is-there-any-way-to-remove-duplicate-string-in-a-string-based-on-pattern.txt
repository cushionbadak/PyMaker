<div class="post-text" itemprop="text">
<p>I'm working with files with this format:</p>
<pre><code>=Cluster=
SPEC PRD000681;PRIDE_Exp_Complete_Ac_22491.xml;spectrum=1074 true
SPEC PRD000681;PRIDE_Exp_Complete_Ac_22498.xml;spectrum=2950 true


=Cluster=
SPEC PRD000681;PRIDE_Exp_Complete_Ac_22498.xml;spectrum=1876 true
SPEC PRD000681;PRIDE_Exp_Complete_Ac_22498.xml;spectrum=3479 true
SPEC PRD000681;PRIDE_Exp_Complete_Ac_22498.xml;spectrum=3785 true
SPEC PRD000681;PRIDE_Exp_Complete_Ac_22498.xml;spectrum=3785 true

=Cluster=
SPEC PRD000681;PRIDE_Exp_Complete_Ac_22493.xml;spectrum=473 true
SPEC PRD000681;PRIDE_Exp_Complete_Ac_22493.xml;spectrum=473 true
</code></pre>
<p>As you can see, every SPEC line is different, except two where number of the string spectrum is repeated. What I'd like to do is take every chunk of information between the pattern <code>=Cluster=</code> and check if there are lines with spectrum value repeated. In case there are several lines repeated, removes all of them except one.</p>
<p>The output file should be like this:</p>
<pre><code>=Cluster=
SPEC PRD000681;PRIDE_Exp_Complete_Ac_22491.xml;spectrum=1074 true
SPEC PRD000681;PRIDE_Exp_Complete_Ac_22498.xml;spectrum=2950 true


=Cluster=
SPEC PRD000681;PRIDE_Exp_Complete_Ac_22498.xml;spectrum=1876 true
SPEC PRD000681;PRIDE_Exp_Complete_Ac_22498.xml;spectrum=3479 true
SPEC PRD000681;PRIDE_Exp_Complete_Ac_22498.xml;spectrum=3785 true

=Cluster=
SPEC PRD000681;PRIDE_Exp_Complete_Ac_22493.xml;spectrum=473 true
</code></pre>
<p>I was using <code>groupby</code> from itertools module. I assume my input file is called f_input.txt and the output file is called new_file.txt, but this script remove the words SPEC as well... And I don't know what I can change in order to don't do this. </p>
<pre><code>from itertools import groupby

data = (k.rstrip().split("=Cluster=") for k in open("f_input.txt", 'r'))
final = list(k for k,_ in groupby(list(data)))

with open("new_file.txt", 'a') as f:
    for k in final:
        if k == ['','']:
            f.write("=Cluster=\n")
        elif k == ['']:
            f.write("\n\n")
        else:
            f.write("{}\n".join(k))
</code></pre>
<p>EDIT: 
New conditional. Sometimes part of the line number can change, for example: </p>
<pre><code>=Cluster=
SPEC PRD000681;PRIDE_Exp_Complete_Ac_22498.xml;spectrum=1876 true
SPEC PRD000681;PRIDE_Exp_Complete_Ac_22498.xml;spectrum=3479 true
SPEC PRD000681;PRIDE_Exp_Complete_Ac_22498.xml;spectrum=3785 true
SPEC PRD000682;PRIDE_Exp_Complete_Ac_22498.xml;spectrum=3785 true
</code></pre>
<p>As you can see, the last line has changed the part PRDnumber. One solution would be check the spectrum number, and remove the line based in repeated spectrum. </p>
<p>This would be a solution: </p>
<pre><code>=Cluster=
SPEC PRD000681;PRIDE_Exp_Complete_Ac_22498.xml;spectrum=1876 true
SPEC PRD000681;PRIDE_Exp_Complete_Ac_22498.xml;spectrum=3479 true
SPEC PRD000681;PRIDE_Exp_Complete_Ac_22498.xml;spectrum=3785 true
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Shortest solution in Python :p</p>
<pre><code>import os
os.system("""awk 'line != $0; { line = $0 }' originalfile.txt &gt; dedup.txt""")
</code></pre>
<p>output:</p>
<pre><code>=Cluster=
SPEC PRD000681;PRIDE_Exp_Complete_Ac_22491.xml;spectrum=1074 true
SPEC PRD000681;PRIDE_Exp_Complete_Ac_22498.xml;spectrum=2950 true

=Cluster=
SPEC PRD000681;PRIDE_Exp_Complete_Ac_22498.xml;spectrum=1876 true
SPEC PRD000681;PRIDE_Exp_Complete_Ac_22498.xml;spectrum=3479 true
SPEC PRD000681;PRIDE_Exp_Complete_Ac_22498.xml;spectrum=3785 true

=Cluster=
SPEC PRD000681;PRIDE_Exp_Complete_Ac_22493.xml;spectrum=473 true
</code></pre>
<p>(if you are on Windows, awk can be installed easily with <a href="https://github.com/bmatzelle/gow/wiki" rel="nofollow noreferrer">Gow</a>.)</p>
</div>
<div class="post-text" itemprop="text">
<p>This is how I would do it.</p>
<pre><code>file_in = r'someFile.txt'   
file_out = r'someOtherFile.txt'
with open(file_in, 'r') as f_in, open(file_out, 'w') as f_out:
    seen_spectra = set()
    for line in f_in:
        if '=Cluster=' in line or line.strip() == '':
            seen_spectra = set()
            f_out.write(line)
        else:
            new_spectrum = line.rstrip().split('=')[-1].split()[0]
            if new_spectrum in seen_spectra:
                continue
            else:
                f_out.write(line)
                seen_spectra.add(new_spectrum)      
</code></pre>
<p>This is not a <code>groupby</code> solution but a solution that you can easily follow and debug if you have to. As you mentioned in the comments, this file of yours is 16GB big and loading it to memory is probably not the best idea..</p>
<blockquote>
<p>EDIT: <em>"Each cluster has a specific spectrum. It is not possible to have one spec in one cluster and the same in another"</em></p>
</blockquote>
<pre><code>file_in = r'someFile.txt'   
file_out = r'someOtherFile.txt'
with open(file_in, 'r') as f_in, open(file_out, 'w') as f_out:
    seen_spectra = set()
    for line in f_in:
        if line.startswith('SPEC'):
            new_spectrum = line.rstrip().split('=')[-1].split()[0]
            if spectrum in seen_spectra:
                continue
            else:
                seen_spectra.add(new_spectrum)      
                f_out.write(line)          
        else:
            f_out.write(line)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will open your file containing your original code as well as a new file that will output the unique lines per group.</p>
<p><code>seen</code> is a <code>set</code> and is great for seeing if something exists within it already.</p>
<p><code>data</code> is a <code>list</code> and will keep track of the iterations of <code>"=Cluster="</code> groups.</p>
<p>Then you simply review each line of each of the groups (designated as <code>i</code> within <code>data</code>).</p>
<p>If the line does not exist within <code>seen</code> it is added.</p>
<pre><code>with open ("input file", 'r') as in_file, open("output file", 'w') as out_file:
    data = [k.rstrip().split("=Cluster=") for k in in_file]
    for i in data:
        seen = set()
        for line in i:
            if line in seen:
                continue
            seen.add(line)
            out_file.write(line)
</code></pre>
<p><strong>EDIT</strong>: Moved <code>seen=set()</code> to within the <code>for i in data</code> to reset the set each time otherwise <code>"=Cluster="</code> would always exist and would not print for each group within <code>data</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The solution using <a href="https://docs.python.org/3/library/re.html#re.search" rel="nofollow noreferrer"><strong><em>re.search()</em></strong></a> function and custom <code>spectrums</code> set object for keeping only unique <code>spectrum</code> numbers:</p>
<pre><code>with open('f_input.txt') as oldfile, open('new_file.txt', 'w') as newfile:
    spectrums = set()
    for line in oldfile:
        if '=Cluster=' in line or not line.strip():
            newfile.write(line)
        else:
            m = re.search(r'spectrum=(\d+)', line)
            spectrum = m.group(1)
            if spectrum not in spectrums:
                spectrums.add(spectrum)
                newfile.write(line)
</code></pre>
</div>
<span class="comment-copy">Are you asking why your code is not working or for any code that would work?</span>
<span class="comment-copy">You could try iterating the whole files and check line by line , i= file.read().split('\n') , now while i[1] in other lines like i[2]or i[3] , then delete i , and do this for the whole splited string one by one. but yeah it would be lot of code. i bet there would a good solution!</span>
<span class="comment-copy">Your code works fine, don't see any problem</span>
<span class="comment-copy">@UbdusSamad I'm working just with one file and is bigger than 16GB.</span>
<span class="comment-copy">@Ev.Kounis No. I'm asking about a cooking recipe.</span>
<span class="comment-copy">Great easy solution. Thanks!</span>
<span class="comment-copy">Be aware that this trick works only if duplicates are consecutive.</span>
<span class="comment-copy">Yes. your code worked perfectly. Thank you!</span>
<span class="comment-copy">Hi Ev. Kounis. I just talk with my supervisor and he said me that the pattern inside =Cluster= should be spectrum=number, because the numbers of (Ex. PRD0013 and PRD0014) can change but not the spectrum number, so the script will not consider this as repeated. How could I change your script to take into account the spectrum part?</span>
<span class="comment-copy">@Enrique I am afraid I did not understand..</span>
<span class="comment-copy">Sorry for my English. I just edit the question to clarify the concept.</span>
<span class="comment-copy">@Enrique This does not change anything. We were neglecting that part anyway. The solution presented above should work just as well now.</span>
<span class="comment-copy">yeah , looks cool , have you tried the code?</span>
<span class="comment-copy">you have to reset the <code>seen</code> set.</span>
<span class="comment-copy">@ Ev. Kounis I was updating that as you posted this. Realized I did that erroneously!</span>
<span class="comment-copy">Ive got this error: AttributeError: 'NoneType' object has no attribute 'group'</span>
<span class="comment-copy">@Enrique, what's the point? You have already accepted one's answer</span>
<span class="comment-copy">I am comparing several solutions and seeing which is the most efficient.</span>
<span class="comment-copy">@Enrique, accepting the answer, actually, means that you have selected the best one for you</span>
<span class="comment-copy">Ok. Thank you anyway.</span>
