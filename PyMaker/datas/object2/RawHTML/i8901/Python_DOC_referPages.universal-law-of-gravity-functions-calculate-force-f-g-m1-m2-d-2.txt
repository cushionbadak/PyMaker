<div class="post-text" itemprop="text">
<p>I am currently trying to learn Python, so I can provide new opportunities for the children of my community.</p>
<p>I am stuck a on functions, I am trying to calculate the force of between two bodies of space using the Universal Law of Gravity equation. I'm not sure what I am doing wrong, I feel like I a might not even be calling the m2, so it can calculate or perhaps I need to make planet specific functions that then populate the equation, and require a user input? Here is what I have so far: </p>
<pre><code>def gravitionalForce (m1, m2, d): #d=Distance
    G= 6.673*(10**-11) #Gravity
    m1 = 1.9891 * (10 ** 30) # Sun
    m2.Jupiter= 1.8986*(10**27)#Jupiter
    m2.Saturn = 5.68646*(19**26)#Saturn
    m2.Neptune = 1.0243*(10*26)#Neptune
    d.Jupiter=7.41(10**11)
    d.Saturn=1.35(10**12)
    d.Neptune=4.45*(10**12)
    F=((G * m1 * m2) / (d ** 2))
    return F
 print (input("what planet you want to calculate? Jupiter, Saturn, Neptune? : ")
</code></pre>
<p>I am learning from reading a book, and watching youtube, I know there are holes in my understanding. Any help or orientation would be greatly appreciated.  </p>
</div>
<div class="post-text" itemprop="text">
<p>I would do something like this:</p>
<pre><code># define your constants up here
values = {
    "Jupiter": { "Mass": 1.8986*(10**27),  "Distance": 7.41*(10**11) },
    "Neptune": { "Mass": 1.0243*(10*26),   "Distance": 4.45*(10**12) },
    "Saturn:": { "Mass": 5.68646*(19**26), "Distance": 1.35*(10**12) }
}

def gravitationalForce (m1, m2, d):
    g = 6.673*(10**-11) 
    f = (g * m1 * m2) / (d ** 2)
    return f

planet = input("what planet you want to calculate? Jupiter, Saturn, Neptune? : ")
sun_mass = 1.9891*(10**30)

# get the values based on the input from the dictionary above
planet_mass = values[planet]["Mass"]
distance = values[planet]["Distance"]

# pass those arguments into your function to calculate it
print(gravitationalForce(sun_mass, planet_mass, distance))
</code></pre>
<p>A few problems to point out:</p>
<ol>
<li><p><code>d.Jupiter=7.41(10**11)</code> This gives the error <code>TypeError: 'float' object is not callable</code> because you call functions like <code>function_name()</code> and so when you use <code>7.41(10**10)</code> it thinks you're trying to call <code>7.41</code> as a function. Don't forget to add a <code>*</code> between <code>7.41</code> and <code>(10**11)</code>.</p></li>
<li><p><code>m2.Jupiter= 1.8986*(10**27)</code> This gives the error <code>AttributeError: 'float' object has no attribute 'Jupiter'</code> because you can't just assign the parameter <code>m2</code> a property without first defining what that is. If you want to have multiple options, use a dictionary like I do above or create a separate class. </p></li>
<li><p><code>print (input("what planet you want to calculate? Jupiter, Saturn, Neptune? : ")</code> Here you're just printing the value that you input. To get the input value, assign it to a variable. Then you must call the function <code>gravitationalForce</code> at some point with your arguments. Don't define your arguments within the function, get them outside and then pass them into it.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>There are a few different issues with this code. I cleaned it up a bit below, hopefully this helps to set you on the right track</p>
<pre><code>planets = {
    'Jupiter': {
        'm2': 1.8986,
        'd': 7.41
    }
}

def gravitionalForce (m1, planet): #d=Distance
    G = 6.673*(10**-11) #Gravity
    m1 = 1.9891 * (10 ** 30) # Sun

    planet_constants = planets[planet]

    F=((G * m1 * planet_constants['m2']) / (planet_constants['d'] ** 2))
    return F



planet = input("what planet you want to calculate? Jupiter, Saturn, Neptune? : ")
print(gravitionalForce(100, planet))
</code></pre>
<p>Note that the planet constants were moved into a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">dictonary</a> and the <code>m1</code> variable is being passed a constant <code>100</code> </p>
</div>
<span class="comment-copy">Sorry to say but it is nowhere near to Python Syntax</span>
<span class="comment-copy">@ZdaR: it's actually very much Python syntax, but just shows a misunderstanding of how to convert concepts to working code. A helpful answer is better than an unhelpful comment.</span>
<span class="comment-copy">As an aside, if you're going to leave comments saying that <code>d</code> stands for distance and that <code>g</code> stands for gravity, you can just define those variables as <code>distance</code> and <code>gravity</code>. It's easier to make your code descriptive than to leave excessive comments and it will help your students.</span>
<span class="comment-copy">that makes perfect sense! I hadn't even thought of defining the constants, thank you so much!  Your 3rd point just cleared things up. Thank you! Thank you!</span>
<span class="comment-copy">Thank you so much! Thank you for the orientation, I hadn't thought of that. Thank you again!</span>
<span class="comment-copy">This is what I ended up with,                                                            <code>G=6.673e-11 m1=1.9891e30  def gravitationalForce (mass2, distance):     F= ((G*m1*mass2)/ (distance**2))     return (F)          Jupiter = gravitationalForce(1.8986e27, 7.41e11) Saturn = gravitationalForce(5.6846e26, 1.35e12) Neptune = gravitationalForce(1.0243e26, 4.45e12)  print(Jupiter) print(Saturn) print(Neptune)</code></span>
