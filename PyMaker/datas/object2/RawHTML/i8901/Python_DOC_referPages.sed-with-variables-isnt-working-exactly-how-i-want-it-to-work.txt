<div class="post-text" itemprop="text">
<pre><code>('cd /etc/squid/ &amp;&amp; new_val=9 &amp;&amp; old_val=3 &amp;&amp; sed -i "s/$old_val/$new_val/g" *.conf')
</code></pre>
<p>this gives me an error </p>
<blockquote>
<p>ExecutionError: sed: -e expression #1, char 0: no previous regular expression</p>
</blockquote>
<p>I am not sure what the issue is.</p>
<p>The above is being used in a Python script.</p>
</div>
<div class="post-text" itemprop="text">
<p>Change it to:</p>
<pre><code>('cd /etc/squid/ &amp;&amp; new_val=9 &amp;&amp; old_val=3 &amp;&amp; sed -i "s/$old_val/$new_val/g" *.conf')
</code></pre>
<p>The variable assignment needs to be a separate statement from <code>sed</code>. When you put a variable assignment at the beginning of a statement, it only sets an environment variable that gets inherited by the child process. But you need the variable to be expanded by the original shell, so you need to set the variable before executing the <code>sed</code> command.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is that:</p>
<pre><code>old_val=3 sed "s/$old_val/$new_val/g"
</code></pre>
<p>is relying on the shell to expand the variables, not <code>sed</code>. But setting variables via command prefix only affects the environment of the command, not bash, so <code>old_val</code> is <em>never</em> defined for the purposes of string interpolation. Per the <a href="https://www.gnu.org/software/bash/manual/bash.html#Environment" rel="nofollow noreferrer">bash reference manual</a> (emphasis added):</p>
<blockquote>
<p>The environment for any simple command or function may be augmented temporarily by prefixing it with parameter assignments, as described in Shell Parameters. These assignment statements affect <em>only</em> the environment seen by <em>that command</em>.</p>
</blockquote>
<p>So if <code>sed</code> tried to read <code>old_val</code> from its own environment it would see the correct value. But what <code>sed</code> is receiving is the post-interpolation string passed, which is <code>s//9/g</code>, because bash interpolation doesn't see <code>old_val</code> (that exists only for <code>sed</code>).</p>
<p>To fix, set the variable in bash by performing the assignment as a separate command, not a <code>sed</code> prefix:</p>
<pre><code>('cd /etc/squid/ &amp;&amp; new_val=9 &amp;&amp; old_val=3 &amp;&amp; sed -i "s/$old_val/$new_val/g" *.conf')
</code></pre>
<p>Or more correctly, you should really avoid relying on <code>shell=True</code> (it's dangerous/easy to misuse). Even if you must use <code>sed</code>, all the stuff you were using the shell for can be done at the Python layer:</p>
<pre><code>import os

# Get the (unqualified) names of all the entries with the desired name
files = [f for f in os.listdir('/etc/squid') if f.endswith('.conf')]
# Run w/o shell=True, in list form, letting Python handle the working directory
# and variable formatting
subprocess.Popen(['sed', '-i', 's/{}/{}/g'.format(old_val, new_val)] + files, cwd='/etc/squid')
</code></pre>
<p>This has the same behavior (operates in <code>/etc/squid</code>, and passes the unqualified file names so you won't have new command line length issues if there are a lot of files in a deeply nested directory).</p>
<p>Of course, you could go even further, and just use <a href="https://docs.python.org/3/library/fileinput.html" rel="nofollow noreferrer">the <code>fileinput</code> module</a> to do the work of <code>sed</code> in Python too; it features editing files in place just like <code>sed</code> (though it will likely be slightly slower if the files are of meaningful size).</p>
</div>
<div class="post-text" itemprop="text">
<p>Actually i found something that worked, putting each of the variables in single quotes and escaping the single quotes.</p>
</div>
<span class="comment-copy">I know I could use subprocess but I want to know what i m missing here..</span>
<span class="comment-copy">Works fine for me from command line. I suspect Python might be the problem here.</span>
<span class="comment-copy">@miken32: It's not Python, it's misuse of <code>bash</code>. It does not work fine from the command line, simple repro: <code>new_val=9 &amp;&amp; old_val=3 sed "s/$old_val/$new_val/g" &lt;(echo "1234567890")</code></span>
<span class="comment-copy">@ShadowRanger when I saw the question the send command was on a separate line, hence the confusion. I suspect Python because they say it's being used in a Python script, meaning there's got to be more context to it than what we're seeing.</span>
<span class="comment-copy">Can you explain/provide the solution code? I'm not seeing an obvious way that the single quotes would help here (you could use them to avoid bash variable interpolation, but off hand I don't think <code>sed</code> will do it for you if it receives the <code>$</code> names, it will just treat them as literal strings).</span>
