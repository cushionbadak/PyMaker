<div class="post-text" itemprop="text">
<p>Given the following program:</p>
<pre><code>from functools import update_wrapper                                                                                      

class MyClass:                                                                                                            
    @classmethod                                                                                                          
    def my_function(cls):                                                                                                 
        def another_function():                                                                                           
            print('hello')                                                                                                
        return update_wrapper(another_function, cls)                                                                      

def do_something(the_func):                                                                                              
    print(the_func)                                                                                                             
    # &lt;function MyClass at 0x7f5cb69fd848&gt;                                                                               
    print(the_func.__class__)                                                                                                   
    # &lt;type 'function'&gt;                                                                                                  
    print(the_func())                                                                                                     

x = MyClass()                                                                                                            
y = x.my_function()                                                                                                      

do_something(y)                                                                                                          
</code></pre>
<p>In my do_something function, how can I identify that the 'the_func' variable came from the 'MyClass' class?  Specifically, how can I get an un-instantiated reference to MyClass?</p>
<pre><code>print(dir(the_func))
</code></pre>
<p>...returns nothing obvious.</p>
</div>
<div class="post-text" itemprop="text">
<p>Look at the <code>__wrapped__</code> dunder:</p>
<pre><code>&gt;&gt;&gt; y.__wrapped__
__main__.MyClass
</code></pre>
<p>It's <a href="https://docs.python.org/3/library/functools.html#functools.update_wrapper" rel="nofollow noreferrer"><code>functools.update_wrapper</code></a> that adds this attribute.  </p>
<p>I also want to point out that your usage of <code>update_wrapper</code> is somewhat strange.  It would be more usual to use <code>my_function</code> and <code>another_function</code> here rather than <code>another_function</code> and <code>cls</code>.  Then you would access the class object through <code>__wrapped__</code> and <code>__self__</code>.  </p>
</div>
<div class="post-text" itemprop="text">
<p>when you print <code>the_func</code>, you get the function object.
So <code>the_func.__name__</code> will give you the name of that class name in which the function is wrapped!</p>
<pre><code>from functools import update_wrapper                                                                                      

class MyClass:                                                                                                            
    @classmethod                                                                                                          
    def my_function(cls):                                                                                                 
        def another_function():                                                                                           
            print('hello')                                                                                                
        return update_wrapper(another_function, cls)                                                                      

def do_something(the_func):                                                                                              
    print(the_func)                                                                                                             
    # &lt;function MyClass at 0x7f5cb69fd848&gt;                                                                               
    print(the_func.__class__)                                                                                                   
    # &lt;type 'function'&gt;                                                                                                  
    print(the_func.__name__)                                                                                                     
    #MyClass

x = MyClass()                                                                                                            
y = x.my_function()                                                                                                      

do_something(y)    
</code></pre>
</div>
<span class="comment-copy">I guess my example was bad.  I have a variable containing the result of calling as_view() here <a href="https://github.com/django/django/blob/master/django/views/generic/base.py#L47" rel="nofollow noreferrer">github.com/django/django/blob/master/django/views/generic/â€¦</a>, but it doesn't have a <b>wrapped</b> property.  Thanks for the pointer though, it does work with my sample app.</span>
