<div class="post-text" itemprop="text">
<p>I have created a package <code>pkg</code> in this manner.</p>
<pre><code>$ tree
.
└── pkg
    ├── foo.py
    └── __init__.py

1 directory, 2 files
susam@debian1:~/so$ cat pkg/__init__.py
susam@debian1:~/so$ cat pkg/foo.py
print('executing module foo ...')

def bar():
    print('bar')
</code></pre>
<p>All the Python shell snippets below are from a single interactive
session with the Python interpreter. I have split them up into multiple
blocks to add my own commentary in between.</p>
<p>Here is my Python version.</p>
<pre><code>Python 3.4.2 (default, Oct  8 2014, 10:45:20)
[GCC 4.9.1] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;
</code></pre>
<p>The following import does not import <code>foo</code> because <code>__all__</code> is not
defined in <code>__init__.py</code>.</p>
<pre><code>&gt;&gt;&gt; from pkg import *
&gt;&gt;&gt; foo.bar()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'foo' is not defined
&gt;&gt;&gt;
</code></pre>
<p>The above behaviour has been described in the Python tutorial at
<a href="https://docs.python.org/3/tutorial/modules.html#importing-from-a-package" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/modules.html#importing-from-a-package</a>.</p>
<blockquote>
<p>If <code>__all__</code> is not defined, the statement <code>from sound.effects import *</code>
  does not import all submodules from the package <code>sound.effects</code> into the
  current namespace; it only ensures that the package <code>sound.effects</code> has
  been imported (possibly running any initialization code in
  <code>__init__.py</code>) and then imports whatever names are defined in the
  package.</p>
</blockquote>
<p>The following imports only <code>bar()</code>. It does not import <code>foo</code>.</p>
<pre><code>&gt;&gt;&gt; from pkg.foo import bar
executing module foo ...
&gt;&gt;&gt; bar()
bar
&gt;&gt;&gt; foo.bar()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'foo' is not defined
</code></pre>
<p>But strangely after the previous import, the following import ends up
importing <code>foo</code> even if <code>__all__</code> is not defined in <code>__init__.py</code>.</p>
<pre><code>&gt;&gt;&gt; from pkg import *
&gt;&gt;&gt; foo.bar()
bar
</code></pre>
<p>Why does this happen?</p>
</div>
<div class="post-text" itemprop="text">
<p>Based off of the Python documentation that you cited, when you use <code>from pkg import *</code> you are importing only the module <code>foo</code> as well as <code>__init__.py</code> and not the functions of <code>foo</code>.</p>
<p>I suspect the last code snippet you provided works because you have already imported <code>bar()</code> directly from <code>foo</code> and reimporting <code>foo</code> after you've strictly imported the bar function establishes the connection between <code>foo</code> and <code>bar()</code>.</p>
<p>Do you run into this same issue when specifying <code>__all__</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>foo</code> is already imported in <code>pkg</code> namespace as <code>pkg.foo</code> when you do <code>from pkg.foo import bar</code>. So when you then import all names from <code>pkg</code> namespace to current scope you also import <code>foo</code>. See:</p>
<pre><code>&gt;&gt;&gt; import pkg
&gt;&gt;&gt; dir(pkg)
['__builtins__', '__doc__', '__file__', '__name__', '__package__', '__path__']
&gt;&gt;&gt; from pkg.foo import bar
executing module foo ...
&gt;&gt;&gt; dir(pkg)
['__builtins__', '__doc__', '__file__', '__name__', '__package__', '__path__', 'foo']
</code></pre>
<p>(I am on python 2 but the logic for this is the same)</p>
</div>
<span class="comment-copy"><code>from pkg import *</code> should not import the module <code>foo</code> unless <code>__all__</code> is defined. I don't run into the same issue if <code>__all__</code> is specified. What I am curious to understand is why the first occurrence of <code>from pkg import *</code> agrees with the documentation, i.e. does not import <code>foo</code> but the second occurrence of <code>from pkg import *</code> violates the documentation and imports <code>foo</code>.</span>
