<div class="post-text" itemprop="text">
<p>There is a C API function for Python dictionaries called <a href="https://docs.python.org/3/c-api/dict.html#c.PyDict_ClearFreeList" rel="nofollow noreferrer"><code>PyDict_ClearFreeList</code></a>. However the docstring is rather sparse:</p>
<blockquote>
<p><code>int PyDict_ClearFreeList()</code></p>
<p>Clear the free list. Return the total number of freed items.</p>
<p>New in version 3.3.</p>
</blockquote>
<p>This function has no parameters so it (probably) has nothing to do with any specific dictionary.</p>
<p>And it returns an <code>int</code>. This seems rather weird because that indicates it refers to some C state because python "classes" always have a <code>Py_ssize_t</code> size.</p>
<p>So what exactly is this "free list"?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are correct that the free list has nothing to do with any specific dictionary; in fact, it applies to numerous data types (e.g. <a href="https://docs.python.org/2/c-api/float.html#c.PyFloat_ClearFreeList" rel="nofollow noreferrer"><code>PyFloat_ClearFreeList</code></a>).</p>
<p>The free list is where Python keeps the list of the free places it could put things - i.e. memory containing objects it is no longer using, but which it hasn't released back to the global Python memory pool or the system.</p>
<p>Per <a href="http://deeplearning.net/software/theano/tutorial/python-memory-management.html#internal-memory-management" rel="nofollow noreferrer">this useful Theano tutorial</a>:</p>
<blockquote>
<p>To speed-up memory allocation (and reuse) Python uses a number of
  lists for small objects. Each list will contain objects of similar
  size: there will be a list for objects 1 to 8 bytes in size, one for 9
  to 16, etc. When a small object needs to be created, either we reuse a
  free block in the list, or we allocate a new one.</p>
</blockquote>
</div>
<span class="comment-copy">Are you vaguely familiar with the dictobject.c source?  <a href="https://github.com/python/cpython/blob/master/Objects/dictobject.c" rel="nofollow noreferrer">github.com/python/cpython/blob/master/Objects/dictobject.c</a> Don't worry if you aren't a C expert.  You can learn quite a lot about how dicts work just from the comments.</span>
