<div class="post-text" itemprop="text">
<p>I'm trying to understand why should I use types annotation in python. For exemple I can write function like: </p>
<pre><code>def some_function(a: int, b: int) -&gt; int:
    return a + b
</code></pre>
<p>When I use it with int all gone good:</p>
<pre><code>some_function(1, 2)  # return 3, type int
</code></pre>
<p>But when I run for exemple</p>
<pre><code>some_function(1, 2.0) # return 3.0, type float
</code></pre>
<p>I have result without any notes that types are wrong. So what is the reason to use types annotation? </p>
</div>
<div class="post-text" itemprop="text">
<p>Type hints are there for <em>other tools</em> to check your code, they are not enforced at runtime. The goal is enable static analysis tools to detect invalid argument use.</p>
<p>Use an IDE like PyCharm, or the <a href="http://mypy-lang.org/" rel="nofollow noreferrer">commandline code checker <code>mypy</code></a> to be told that <code>2.0</code> is not a valid argument type.</p>
<p>From the <a href="https://www.python.org/dev/peps/pep-0484/#rationale-and-goals" rel="nofollow noreferrer">Type Hinting PEP (484)</a>:</p>
<blockquote>
<p>This PEP aims to provide a standard syntax for type annotations, opening up Python code to easier <strong>static analysis and refactoring</strong>, potential runtime type checking, and (perhaps, in some contexts) code generation utilizing type information.</p>
</blockquote>
<p>Emphasis mine. Runtime type checking is left to third-party tools. Note that such runtime checks would come with a performance downside, your code will likely run slower if you were to check for types on every call.</p>
</div>
<div class="post-text" itemprop="text">
<p>As one can read in the PEP 484 <a href="https://www.python.org/dev/peps/pep-0484/#rationale-and-goals" rel="nofollow noreferrer">that introduces <em>type hints</em></a>:</p>
<blockquote>
<p>(...)</p>
<p>This PEP aims to provide a standard syntax for type annotations,
  opening up Python code to <strong>easier static analysis and refactoring,
  potential runtime type checking</strong>, and (perhaps, in some contexts) <strong>code
  generation utilizing type information</strong>.</p>
<p>Of these goals, static analysis is the most important. This includes
  support for <strong>off-line type checkers such as mypy</strong>, as well as providing
  a standard notation that can be used by <strong>IDEs for code completion</strong> and
  refactoring.</p>
</blockquote>
<h1>IDE's (static analysis)</h1>
<p>So the main use is in <em>static analysis</em>: your IDE can detect that something is wrong when you call a function and can provide a list of functions you can call on the result of function.</p>
<p>For instance if you write:</p>
<pre><code>some_function(1,2).
</code></pre>
<p>your IDE can provide a list with <code>real</code> as a possible option so you can easily write:</p>
<pre><code>some_function(1,2).real
</code></pre>
<p>and if you write:</p>
<pre><code>some_function('foo',2).bar
</code></pre>
<p>It will hint that <code>'foo'</code> is not an acceptable parameter nor is <code>.bar</code> a good call on that object.</p>
<h1>Dynamic inspection</h1>
<p>You can also use it for dynamic inspection with <a href="https://docs.python.org/3/library/inspect.html?highlight=inspect.getfull#inspect.getfullargspec" rel="nofollow noreferrer"><code>inspect.getfulargspec</code></a> like:</p>
<pre><code>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; inspect.getfullargspec(some_function).annotations
{'return': &lt;class 'int'&gt;, 'a': &lt;class 'int'&gt;, 'b': &lt;class 'int'&gt;}
</code></pre>
<p>Now we know that <code>some_function</code> returns an <code>int</code> and can be feeded two <code>int</code>s. This can be used for <em>arbitrary tests</em> (which are popular in Haskell): you simply feed the <code>some_function</code> random integers and looks that it always returns an <code>int</code> (and does not raises an exception for instance).</p>
</div>
<span class="comment-copy">Type hints are not enforced at runtime. Run <code>mypy</code> on your project to get told you are using <code>some_function()</code> wrong.</span>
<span class="comment-copy">IDE support....</span>
<span class="comment-copy">Thank you for the response. Just one addition, is it a good practice to use it in the code?</span>
<span class="comment-copy">@OleksandrDashkov: absolutely! We use it at Facebook to make working in large projects easier and to reduce errors.</span>
<span class="comment-copy">Quick question, are you supplying them via stubs or do you add them directly in the source files?</span>
<span class="comment-copy">@JimFasarakis-Hilliard: we add them directly to <i>Python</i> source files. For C extensions, you are limited to stubs.</span>
