<div class="post-text" itemprop="text">
<p>I want to understand how this piece of code is working when we don't have any reference to printScore function, yet we are passing it as an argument to processGame function which is called. </p>
<pre><code>import time
def printScore(score):
    print("The score is {}".format(score))

def processGame(score,callback):
    time.sleep(3)
    callback(5)

processGame(5,printScore)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here processGame is being called with arguments (5,printScore).Python creates a second reference to the function object called "callback" in the local function namespace.Therefore now score has value 5 and callback refers to printScore.In the body printScore is invoked by callback() with argument 5.:P</p>
</div>
<div class="post-text" itemprop="text">
<p>Functions in Python are first-class objects. A function object, and a variable holding a reference to it are created by the <code>def</code> statement. There's no need to "create a reference" to a function, it's name is a reference already.</p>
<p>You can learn more about the different kinds of objects in Python in the <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">Data model</a> chapter of the Python language reference. The parenthetical comment in its first paragraph is very relevant to your question:</p>
<blockquote>
<p><em>Objects</em> are Python’s abstraction for data. All data in a Python program is represented by objects or by relations between objects. (In a sense, and in conformance to Von Neumann’s model of a “stored program computer,” code is also represented by objects.)</p>
</blockquote>
<p>The statement "code is also represented by objects" is speaking about functions. (It probably also refers to code objects, but you usually don't need to interact with those directly, since they're wrapped in function objects.)</p>
</div>
<span class="comment-copy">What do you mean "we don't have a reference to the callback function?" Yes you do, it's right there: <code>printScore</code>.</span>
<span class="comment-copy"><code>def printScore(score):</code> is an executable statement that creates a reference named <code>printScore</code> in the current scope.</span>
<span class="comment-copy">I meant, we didnt do anything like printScoreObject = printScore() or something, yet we are passing printScore (which is name of a function instead of an object) to the processGame function. I am confused.</span>
<span class="comment-copy">The function object is referenced by the variable "printScore" in the global context. When you call <code>processGame</code>, python creates a second reference to the function object called "callback" in the local function namespace. Until that function exits, there are two references to the function object.</span>
<span class="comment-copy">Functions are objects.</span>
