<div class="post-text" itemprop="text">
<p>Python has the built-in function <a href="https://docs.python.org/3/library/functions.html#type" rel="noreferrer"><code>type</code></a> and each instance also has a <a href="https://docs.python.org/3/library/stdtypes.html#instance.__class__" rel="noreferrer"><code>__class__</code></a> attribute. I generally believed they returned the same thing. Even the documentation of both sounds similar:</p>
<blockquote>
<p><code>instance.__class__</code></p>
<p>The class to which a class instance belongs.</p>
</blockquote>
<p>and </p>
<blockquote>
<p><code>type(object)</code></p>
<p>With one argument, return the type of an object.</p>
</blockquote>
<p>However in <a href="https://github.com/python/cpython/blob/master/Lib/abc.py#L185" rel="noreferrer"><code>abc.ABCMeta.__instancecheck__</code></a> there is a check if they are identical (slightly shortened):</p>
<pre><code>subclass = instance.__class__
subtype = type(instance)
if subtype is subclass:
</code></pre>
<p>When will this not be the case? When is <code>type(instance)</code> not the same as <code>instance.__class__</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>type(instance)</code> and <code>instance.__class__</code> may be different, even with <a href="https://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes" rel="nofollow noreferrer">new-style classes</a>, as Guido mentioned in <a href="https://www.python.org/dev/peps/pep-3119/#the-abc-module-an-abc-support-framework" rel="nofollow noreferrer">PEP 3119</a>:</p>
<blockquote>
<p>Also, <code>isinstance(x, B)</code> is equivalent to <code>issubclass(x.__class__, B) or issubclass(type(x), B)</code>. (It is possible <code>type(x)</code> and <code>x.__class__</code> are not the same object, e.g. when <code>x</code> is a proxy object.)</p>
</blockquote>
<p>For instance:</p>
<pre><code>class A:
    pass

class B:
    __class__ = A

b = B()
print(type(b))      # prints &lt;class '__main__.B'&gt;
print(b.__class__)  # prints &lt;class '__main__.A'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is the case for old style objects (inheriting from nothing). Such objects do not have the <code>__class__</code> property. I think they do it this way to prevent errors. Example for Python 2.7:</p>
<pre><code>class A:
    pass

class B(object):
    pass

a = A()
b = B()

print(dir(a)) # ['__doc__', '__module__']
print(dir(b)) # ['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__']

print(b.__class__) # &lt;class '__main__.B'&gt;
print(type(b))     # &lt;class '__main__.B'&gt;

#####################
# The intersting part
print(a.__class__) # __main__.A
print(type(a))     # &lt;type 'instance'&gt;


print(B.__class__) # &lt;type 'type'&gt;
print(type(B))     # &lt;type 'type'&gt;

print(type(A))      # &lt;type 'classobj'&gt;
#print(A.__class__) # AttributeError: class A has no attribute '__class__'
</code></pre>
<p>See this for further information: </p>
<ul>
<li><a href="https://stackoverflow.com/questions/9610993/python-type-or-class-or-is">Python type() or __class__, == or is</a></li>
<li><a href="https://wiki.python.org/moin/NewClassVsClassicClass" rel="nofollow noreferrer">NewClassVsClassicClass</a></li>
<li><a href="https://stackoverflow.com/questions/6666856/why-does-typemyfield-return-type-instance-and-not-type-field">Why does `type(myField)` return `&lt;type 'instance'&gt;` and not `&lt;type 'Field'&gt;`?</a></li>
</ul>
<p><strong>Note:</strong> The given lines from cpython were changed in 2008 last time (<a href="https://github.com/python/cpython/commit/68f5fbe94488b671ee6dfae74d918cc6a8eeca56" rel="nofollow noreferrer">commit</a>), so it really seems to be a compatibility thing or they just forgot about it.</p>
</div>
<span class="comment-copy">Possible duplicate <a href="http://stackoverflow.com/questions/9610993/python-type-or-class-or-is" title="python type or class or is">stackoverflow.com/questions/9610993/python-type-or-class-or-is</a></span>
<span class="comment-copy">@Kasramvd Thanks for that link, I believe it's probably rather a duplicate of <a href="http://stackoverflow.com/questions/1060499/difference-between-typeobj-and-obj-class" title="difference between typeobj and obj class">stackoverflow.com/questions/1060499/…</a>. I'm not sure why they haven't showed up when googling the question and neither in the "proposed duplicates" when asking the question.</span>
<span class="comment-copy">Yeah that's happens sometimes ;)</span>
<span class="comment-copy">@MSeifert Would you please accept / close the question? I still don't think it's a duplicate, although the answer has the same content :)</span>
<span class="comment-copy">While that makes sense - I was thinking about (forgot to mention that explicitly) about python 3.x and there are no old-style classes anymore.</span>
<span class="comment-copy">@MSeifert The given lines from cpython were changed in 2008 last time (<a href="https://github.com/python/cpython/commit/68f5fbe94488b671ee6dfae74d918cc6a8eeca56" rel="nofollow noreferrer">github.com/python/cpython/commit/…</a>), so it seems to be a compatibility thing or they just forgot about it.</span>
<span class="comment-copy">@MSeifert I've updated my answer.</span>
