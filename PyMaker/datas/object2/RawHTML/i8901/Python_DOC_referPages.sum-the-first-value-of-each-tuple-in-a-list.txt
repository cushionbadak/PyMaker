<div class="post-text" itemprop="text">
<pre><code>x = [(5,3), (8, 3), (7, 3), (5, 4), (2, 4), (3, 4)]
d = {}
[d.__setitem__(d.get(key1,0)+key1,key2) for key1,key2 in x]
print(list(d.items()))
</code></pre>
<p>I want to add the first value in the tuple having the same second value. I have written the code, but i am not able to find my mistake. 
Any ideas ??</p>
</div>
<div class="post-text" itemprop="text">
<p><code>__setitem__</code> returns None, also your logic is wrong too. You need to categorize your items based on the second value then sum their first value up.</p>
<p>You can use <code>collections.defaultdict()</code> for categorization:</p>
<pre><code>In [13]: x = [(5,3), (8, 3), (7, 3), (5, 4), (2, 4), (3, 4)]

In [16]: from collections import defaultdict

In [17]: d = defaultdict(int)

In [18]: for i, j in x:
   ....:     d[j] += i
   ....:     

In [19]: d
Out[19]: defaultdict(&lt;class 'int'&gt;, {3: 20, 4: 10})
</code></pre>
<p>You could also use <code>itertools.groupby()</code> within a dictionary comprehension:</p>
<pre><code>In [28]: from itertools import groupby

In [29]: from operator import itemgetter

In [30]: {k: sum(i for i, _ in g) for k, g in groupby(x, itemgetter(1))}
Out[30]: {3: 20, 4: 10}
</code></pre>
<p>Note that if your list is not sorted based on second item you need to sort it based on that second item before passing to <code>groupby()</code> function. (In that case this solution would be so inefficient against the <code>defaultdict</code> one)</p>
</div>
<div class="post-text" itemprop="text">
<p>Kasramvd already has you covered as for why your approach doesn't work. You could use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> to group by second tuple elements, then sum the first elements with <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>operator.itemgetter</code></a>. </p>
<pre><code>{k: sum(map(itemgetter(0), g)) for k, g in groupby(x, itemgetter(1))}
</code></pre>
<p>Evidently if your list wasn't sorted by second tuple elements as it currently is, you would have to sort first. </p>
<p><strong>Demo</strong></p>
<pre><code>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; x = [(5,3), (8, 3), (7, 3), (5, 4), (2, 4), (3, 4)]
&gt;&gt;&gt; {k: sum(map(itemgetter(0), g)) for k, g in groupby(x, itemgetter(1))}
{3: 20, 4: 10}
</code></pre>
</div>
<span class="comment-copy">I don't understand what you want to do, and not sure if your explanation is more confusing than the code or the other way around :) Please elaborate more and add examples of what you want to achieve</span>
<span class="comment-copy">using <code>__setitem__</code> in a list comprehension should scream "this is the wrong approach"</span>
<span class="comment-copy">Please provide expected output so that question is clearer.</span>
