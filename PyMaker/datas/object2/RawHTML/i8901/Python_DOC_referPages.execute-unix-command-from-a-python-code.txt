<div class="post-text" itemprop="text">
<pre><code>diff -u &lt;(echo "aba"| fold -w1) &lt;(echo "abaa" | fold -w1)
</code></pre>
<p>I want to execute the above command from Python code. Below is the code I have written.</p>
<pre><code>cmd = "diff -u &lt; (echo 'aba'| fold -w1) &lt; (echo 'abaa' | fold -w1)"
os.system(cmd)
</code></pre>
<p>Running the above code, I get <code>sh: 1: Syntax error: "(" unexpected</code> error. As per my knowledge the unix os can't parse the echo command which is inside the braces.</p>
<p>Help me fix this error.</p>
</div>
<div class="post-text" itemprop="text">
<p>First, <a href="https://docs.python.org/3/library/os.html#os.system" rel="nofollow noreferrer"><code>os.system()</code></a> is discouraged in favor of <a href="https://docs.python.org/3/library/subprocess.html#replacing-os-system" rel="nofollow noreferrer"><code>subprocess.call(cmd, shell=True)</code></a>. That's worth knowing because there's a lot of additional detail in the <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer"><code>subprocess</code></a> documentation, including this description of the <code>shell=True</code> parameter (emphasis added):</p>
<blockquote>
<p>On POSIX with <code>shell=True</code>, the <strong>shell defaults to <code>/bin/sh</code></strong>.... Popen does the equivalent of:</p>
<pre><code>Popen(['/bin/sh', '-c', args[0], args[1], ...])
</code></pre>
</blockquote>
<p>So now we know why your command doesn't work - it's not invoking Bash. As mhawke suggests you should instead invoke <code>bash</code> directly, but you should prefer the <code>subprocess</code> module over <code>os.system()</code>:</p>
<pre><code>&gt;&gt;&gt; subprocess.call(['/bin/bash', '-c', 'diff -u &lt;(echo "aba"| fold -w1) &lt;(echo "abaa" | fold -w1)'])
--- /dev/fd/63  2017-02-25 14:32:49.000000000 -0800
+++ /dev/fd/62  2017-02-25 14:32:49.000000000 -0800
@@ -1,3 +1,4 @@
 a
 b
 a
+a
1
</code></pre>
<p>Note that, since we're explicitly invoking the Bash shell, we don't need <code>shell=True</code>, and since the command we're telling Bash to invoke is a single argument we don't need to repeatedly escape them, e.g. with <code>"""</code> as mhawke did.</p>
<p>Once you've verified this command works, you'll likely want to move away from simply invoking <code>call()</code> to one of <code>subprocess</code> other functions that are more scripting-friendly, such as <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow noreferrer"><code>run()</code></a>, which returns a <code>CompletedProcess</code> object you can inspect.</p>
<p>As Jean-François Fabre suggests you can do a lot more powerful things with <code>subprocess</code> as well, including starting the <code>&lt;()</code> substitutions as separate processes and piping them into a call to <code>diff</code>, thus avoiding needing to invoke <code>bash</code> or write Bash syntax in Python. It's more verbose, but more extensible and maintainable.</p>
</div>
<div class="post-text" itemprop="text">
<p>The command runs fine in <code>bash</code>, however, <code>os.system()</code> is executing the command in <code>/bin/sh</code>. You can check with:</p>
<pre><code>&gt;&gt;&gt; os.system('echo $0')
sh
0
</code></pre>
<p>The command fails when executed with <code>/bin/sh</code>:</p>
<pre><code>[mhawke@localhost-localdomain ~]$ /bin/sh
sh-4.3$ diff -u &lt;(echo "aba"| fold -w1) &lt;(echo "abaa" | fold -w1)
sh: syntax error near unexpected token `('
sh-4.3$ 
</code></pre>
<p>You can explicitly run the command in <code>bash</code> like this:</p>
<pre><code>&gt;&gt;&gt; os.system("""bash -c 'diff -u &lt;(echo "aba"| fold -w1) &lt;(echo "abaa" | fold -w1)'""")
--- /dev/fd/63  2017-02-26 09:18:14.633395225 +1100
+++ /dev/fd/62  2017-02-26 09:18:14.633395225 +1100
@@ -1,3 +1,4 @@
 a
 b
 a
+a
256
</code></pre>
<hr/>
<p>Since you are probably interested in the output of the command you would ordinarily be able to use <code>subprocess.check_output()</code> to execute the command and collect its output. Unfortunately <code>diff</code> likes to return non-zero exit codes when it detects differences in the input files, so that prevents simply using <code>check_output</code>. You can cheat by piping <code>diff</code>'s output through <code>cat</code>:</p>
<pre><code>&gt;&gt;&gt; from subprocess import check_output
&gt;&gt;&gt; output = check_output(['bash', '-c', 'diff -u &lt;(echo "aba"| fold -w1) &lt;(echo "abaa" | fold -w1) | cat'])
&gt;&gt;&gt; print(output)
b'--- /dev/fd/63\t2017-02-26 10:02:56.814044987 +1100\n+++ /dev/fd/62\t2017-02-26 10:02:56.814044987 +1100\n@@ -1,3 +1,4 @@\n a\n b\n a\n+a\n'

&gt;&gt;&gt; print(str(output, encoding='utf8'))
--- /dev/fd/63  2017-02-26 10:02:56.814044987 +1100
+++ /dev/fd/62  2017-02-26 10:02:56.814044987 +1100
@@ -1,3 +1,4 @@
 a
 b
 a
+a
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>or you could</p>
<pre><code>import subprocess
cmd = """bash -c 'diff -u &lt;(echo "aba"| fold -w1) &lt;(echo "abaa" | fold -w1)'"""

ps = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
output = ps.communicate()[0]
</code></pre>
</div>
<span class="comment-copy">and portable too, you'd only have to install <code>diff</code> &amp; <code>fold</code> on windows.</span>
<span class="comment-copy">the best way would be to use 3 <code>Popen</code> objects chained together with pipes.</span>
<span class="comment-copy">@Jean-FrançoisFabre: that's true, but it depends on your point of view. OP is asking about <code>os.system()</code>.</span>
<span class="comment-copy">I was not criticizing your answer but the question :) the +1 is mine. I should have commented the question, not the answer. I can't blame you for not trying to write the 3 pipes in python!</span>
<span class="comment-copy">@Jean-FrançoisFabre: no problem, I didn't take it as criticism - thanks for the upvote.</span>
<span class="comment-copy">don't thank me, I'm running windows :)</span>
<span class="comment-copy">what's the point of using <code>subprocess</code> instead of <code>os.system()</code> if you're not going all the way with 3 subprocess objects and drop the <code>shell=True</code> part?</span>
<span class="comment-copy">@Jean-FrançoisFabre "the best way would be to use 3 Popen objects chained together with pipes." is this what you mean?</span>
