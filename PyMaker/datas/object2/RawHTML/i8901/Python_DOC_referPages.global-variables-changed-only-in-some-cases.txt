<div class="post-text" itemprop="text">
<pre><code>def insertionSort(lst):
    #create variable to store final sorted list
    sortedLst = []
    #add any number into the list so the program can start inserting
    sortedLst.append(lst.pop())

    #for each item left over in the original list compare to sorted list
    for sortInd in range(len(lst)-1,-1,-1):
    #for each index to sort
        for sortingInd in range(len(sortedLst),-1,-1):
            if sortingInd == 0 or sortingInd == len(sortedLst):
                sortedLst.insert(sortingInd,lst.pop())
                break
            if lst[sortInd] &gt; sortedLst[sortingInd]:
                sortedLst.insert(sortingInd,lst.pop())
                break

    print(sortedLst) #gives [1,2,3]
    print(lst) #gives []
    lst = sortedLst
    print(lst) #gives [1,2,3]

lst = [3,2,1]
insertionSort(lst)
#lst should be [1,2,3] yet gives []
print(lst)
</code></pre>
<p>I am trying to program an insertion sort, the insertion sort itself does work however as this is part of more sorts I have programmed, I specifically do not want to declare a new variable for the sorted list outside the function and have the function return a sorted list to be consistent with my other functions. eg i don't want:</p>
<pre><code>lst = [3,2,1]
newLst = insertionSort(lst)
</code></pre>
<p>Instead I want the insertionSort function to change my original lst variable and it does change when I pop the values to sort but does not change when I set it to the sortedLst before the function ends. </p>
<p>Thank you in advance for any answers :). </p>
</div>
<div class="post-text" itemprop="text">
<p>You don't change any global variables here at all.</p>
<p>You could fix this by declaring <code>lst</code> as global within your <code>insertionSort</code> function, but I'm not sure why you want to; it would be much better to simply return <code>sortedLst</code> and print that.</p>
</div>
<span class="comment-copy">Python has excellent documentation, this should be explained in the section on the <a href="https://docs.python.org/3/reference/executionmodel.html" rel="nofollow noreferrer">execution model</a>. For example that <code>lst</code> inside your function <b>isn't</b> the <code>lst</code> outside your function and that <code>lst = x</code> doesn't copy <code>x</code>.</span>
<span class="comment-copy">Hm, I understand that and it makes some sense as to why my lst doesn't change to my sortedLst when I do 'lst = sortedLst' but why does lst.pop() actually pop from my lst outside the function and not just the one inside? Thanks</span>
<span class="comment-copy">Do you know about the difference between names, references (pointers) and values?</span>
<span class="comment-copy">I am pretty sure I do, references refer to memory locations, values being the thing stored at the memory location, names being the name of the reference to a memory location. Correct me if I'm wrong. My question has been answered now in the comments of the answer by Daniel Roseman. Thank you for your help though.</span>
<span class="comment-copy">Is my original 'lst = [3,2,1]' not classed as a global variable since its declared in the outermost scope. Also, I know I can return my sortedLst but I am wondering why my original lst is changed from [3,2,1] to [] but then not from [] to my sortedLst. Thank you for the quick reply.</span>
<span class="comment-copy">No, because that global variable is shadowed by the <code>lst</code> parameter in the function itself. It so happens that they originally point to the same list, which is why your <code>pop</code> works; but then you break that by reassigning the local name <code>lst</code> to point  to <code>sortedLst</code>. If you wanted to keep the reference, you could do <code>lst[:] = sortedLst</code>.</span>
<span class="comment-copy">I understand now. I know there are better ways of going about this problem, however I was just wanting to understand why this was happening. Thank you :)</span>
