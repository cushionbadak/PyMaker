<div class="post-text" itemprop="text">
<p>I want to use something like the usual <a href="https://stackoverflow.com/a/3013910/1346276">lazy property</a> decorator, but due to how TensorFlow works and how I use it, I need all of the lazy properties to be initialized automatically at <code>__init__</code> the latest (the TensorFlow part is not part of the question, but see <a href="http://danijar.com/structuring-your-tensorflow-models/" rel="nofollow noreferrer">here</a> for what I mean). By "initializing" I just mean calling <code>getattr</code> to run the property method once and cache the result.</p>
<p>The following works already:</p>
<pre><code>import functools

def graph_property(getter):
    property_name = getter.__name__
    attribute = '_cache_' + property_name

    @property
    @functools.wraps(getter)
    def decorated(self):
        if not hasattr(self, attribute):
            setattr(self, attribute, getter(self))
            self._graph.append(property_name) # for illustration
            print('Initializing ' + property_name)
        return getattr(self, attribute)

    return decorated


class Test:
    def __init__(self):
        self._graph = []
        self.inputs    # DON'T LIKE TO DO THIS
        self.do_stuff  # AND THIS

    @graph_property
    def inputs(self):
        return 42.0

    @graph_property
    def do_stuff(self):
        return self.inputs + 1.0


if __name__ == '__main__':
    t = Test()
    print(t._graph)
</code></pre>
<p>However, it would be nice to get rid of the manual calls to <code>self.input</code> and <code>self.do_stuff</code> in <code>__init__</code> -- that quickly gets tedious.</p>
<p>I was thinking about multiple ways of "remembering" which properties are <code>graph_property</code>s somewhere in a list, but all must fail, I think, since at the time the decorator is applied, the class is not yet known to it (let alone <code>self</code>). </p>
<p>One way I could imagine to work is giving the returned <code>decorated</code> object some tag attribute, and write a metaclass for <code>Test</code> which looks at all methods, collects the ones with this tag, and somehow creates an initializer for them. I failed to implement this because I'm very not familiar with metaclasses and the <code>property</code> descriptor doesn't let me add attributes. </p>
<p>Would the described approach be feasible (if so, how)? Or is there an easier way (without manual overhead and with equally nice syntax) and I'm just not seeing it?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could add a simple mixin and define a subclass of <code>property</code> and then do all of the initializing related to this custom property in the <code>__init__</code> method of mixin. This way you can choose in which class you want them to initialize and when you don't want them initialized.</p>
<pre><code>import functools


class lazy_property(property):
    """
    This class will help us in identifying our lazy properties, so that we
    don't confuse them with normal properties. 
    """
    pass

def graph_property(getter):
    property_name = getter.__name__
    attribute = '_cache_' + property_name

    @lazy_property
    @functools.wraps(getter)
    def decorated(self):
        if not hasattr(self, attribute):
            setattr(self, attribute, getter(self))
            self._graph.append(property_name)  # for illustration
            print('Initializing ' + property_name)
        return getattr(self, attribute)

    return decorated

class InitializeLazyPropertiesMixin:
    """
    This mixin does all of the work of initializing lazy properties
    """
    def __init__(self):
        cls = type(self)
        fields = (k for k in dir(cls) if isinstance(getattr(cls, k), lazy_property))
        for field in fields:
            getattr(self, field)


class Test(InitializeLazyPropertiesMixin):
    def __init__(self):
        self._graph = []
        # Whenever you're inheriting from this mixin make sure to call
        # super `__init__` method.
        super().__init__()

    @graph_property
    def inputs(self):
        return 42.0

    @graph_property
    def do_stuff(self):
        return self.inputs + 1.0

class Test1:
    """
    Just another class that doesn't require initializing any of the lazy properties
    """
    def __init__(self):
        self._graph = []

    @graph_property
    def inputs(self):
        return 42.0

    @graph_property
    def do_stuff(self):
        return self.inputs + 1.0
</code></pre>
<p><strong>Demo output:</strong></p>
<pre><code>&gt;&gt;&gt; t = Test()
Initializing inputs
Initializing do_stuff
&gt;&gt;&gt; print(t._graph)
['inputs', 'do_stuff']
&gt;&gt;&gt; t = Test1()
&gt;&gt;&gt; print(t._graph)
[]
&gt;&gt;&gt; t.inputs
Initializing inputs
42.0
&gt;&gt;&gt; t._graph
['inputs']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you have full control of your properties and class hierarchy, it is simply a matter of marking the properties you want initalized, and have code in a base class <code>__init__</code> method that will call all of them.</p>
<p>So, first, in your decorator, set a variable on your graph_property decorator, so that it marks the methods to be initialized.
Since <code>property</code> objects, unlike functions, can't be assigned arbitrary attributes, the fix for that is to wrap Python's native property in a user-defined class:</p>
<pre><code>class MarcableProperty(property):
    pass

def graph_property(getter):
    property_name = getter.__name__
    attribute = '_cache_' + property_name

    @MarcableProperty
    @functools.wraps(getter)
    def decorated(self):
        ...

    decorated._graph_initialize = True
    return decorated
</code></pre>
<p>And then, on a Base or mixin class for all your other classes, do this:</p>
<pre><code>def __init__(self, *args, **kwargs):
    super().__init__(*args, **kwargs)
    for cls_member_name in dir(self.__class__): 
         # "dir" is good because it automatically looks
         # at the superclasses as well
         cls_member = getattr(self.__class__, cls_member_name)
         if getattr(cls_member, "_graph_initialize", False):
              # Fetch property, initializing its value:
              getattr(self, cls_member_name)
</code></pre>
<p>And that should be it.</p>
</div>
<span class="comment-copy">Ah, this subclassing trick is beautiful! I have a common base class anyhow, so this fits perfectly.</span>
<span class="comment-copy">It just occurred me that <code>vars(type(self)).items()</code> won't include variables defined in super-classes - this just checks the descriptors on the declared class itself, not on it ancestors.</span>
<span class="comment-copy">@jsbueno Good catch, updated to use <code>dir()</code> which <a href="http://stackoverflow.com/a/33089239/846892">goes recursively</a> to get the attributes.</span>
<span class="comment-copy">That was exactly my initial idea, but setting a variable on <code>decorated</code> results in "AttributeError: 'property' object has no attribute '_graph_initialize'".</span>
<span class="comment-copy">That just means that Python's <code>property</code> uses <code>__slots__</code> - just use a custom property that can be aas simple as :  <code>class MyProperty(property): pass</code></span>
<span class="comment-copy">(I've updated the answer with this example)  and actually, you dn even need the mark now, just check if the class attribute is an instance of MarcableProperty - just like it is in @Ashwini's answer)</span>
<span class="comment-copy">Yeah, I recognized that would work but be redundant. Thanks anyway!</span>
<span class="comment-copy">Yep, <a href="https://github.com/python/cpython/blob/master/Objects/descrobject.c#L1671" rel="nofollow noreferrer"><code>property</code> implements</a> something called <a href="https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_members" rel="nofollow noreferrer"><code>tp_members</code></a> slot, which is equivalent to <code>__slots__</code>.</span>
