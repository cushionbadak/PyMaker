<div class="post-text" itemprop="text">
<p>I want to ignore the duplicates from an array that has multiple array in lowest running cost. For example;</p>
<pre><code>A = [['1','2'],['3','4'],['5','6'],['1','2'],['3','4'],['7','8']]
</code></pre>
<p>the expected output should be like as</p>
<pre><code>Output = [['1','2'],['3','4'],['5','6'],['7','8']]
</code></pre>
<p>Is it possible to compare arrays inside an array.
I am doing in this way; </p>
<pre><code> A = [['1','2'],['3','4'],['5','6'],['1','2'],['3','4'],['7','8']]
        output = set()
        for x in A:
            output.add(x)
        print (output)
</code></pre>
<p>But it prompts;</p>
<blockquote>
<p>TypeError: unhashable type: 'list'</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>How about something simple like:</p>
<pre><code>B = list(map(list, set(map(tuple, A))))
</code></pre>
<p>Here's my "bakeoff" -- please let me know if I've misrepresented your solution:</p>
<pre><code>import timeit
from random import choice

DIGITS = list("123456789")

# one million elements in list
A = [[choice(DIGITS), choice(DIGITS)] for _ in range(1000000)]

def elena(A):  # MrName's solution is identical
    B = []

    for i in A:
        if i not in B:
            B.append(i)
    return B

def cdlane(A):

    return list(map(list, set(map(tuple, A))))

def VikashSingh(A):
    uniques = set()
    B = []

    for x in A:
        val = '-'.join([str(key) for key in x])
        if val not in uniques:
            B.append(x)
            uniques.add(val)
    return B

def AbhilekhSingh(A):
    def unique_elements(l):
        last = object()
        for item in l:
            if item == last:
                continue
            yield item
            last = item

    return list(unique_elements(sorted(A)))

# sanity check to make sure everyone one agrees on the answer
B = sorted(elena(A))
assert(B == sorted(cdlane(A)))
assert(B == sorted(VikashSingh(A)))
assert(B == sorted(AbhilekhSingh(A)))

print("elena:", format(timeit.timeit('B = elena(A)', number=10, globals=globals()), ".3"))

print("cdlane:", format(timeit.timeit('B = cdlane(A)', number=10, globals=globals()), ".3"))

print("VikashSingh:", format(timeit.timeit('B = VikashSingh(A)', number=10, globals=globals()), ".3"))

print("AbhilekhSingh:", format(timeit.timeit('B = AbhilekhSingh(A)', number=10, globals=globals()), ".3"))
</code></pre>
<p>RESULTS</p>
<pre><code>elena: 17.5
cdlane: 2.04
VikashSingh: 10.0
AbhilekhSingh: 8.83
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a simple solution:</p>
<pre><code>In [27]: A = [['1','2'],['3','4'],['5','6'],['1','2'],['3','4'], ['7','8']]

In [28]: new_list = []

In [29]: for i in A:
    ...:     if i not in new_list:
    ...:         new_list.append(i)
    ...:         

In [30]: new_list
Out[30]: [['1', '2'], ['3', '4'], ['5', '6'], ['7', '8']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can sort the list and compare every element with it's previous one.</p>
<pre><code>List length: n
Element length: m 
Complexity: Sorting(n * log(n) * m) + Comparison(n * m) = Total(n * log(n) * m)
</code></pre>
<p>Try this:</p>
<pre><code>def unique_elements(l):
    last = object()
    for item in l:
        if item == last:
            continue
        yield item
        last = item

def remove_duplicates(l):
    return list(unique_elements(sorted(l)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another potentially simple solution, but not sure how the "cost" would compare to other presented solutions:</p>
<pre><code>A = [['1','2'],['3','4'],['5','6'],['1','2'],['3','4'],['7','8']]

res = []
for entry in A:
    if not entry in res:
        res.append(entry)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>List length: n
Element length: m 
Complexity: 
    Iterate on n
    Format key by iterating on m
    Check key exists is set `uniques` in O(1)
    Total running time is is O(n * m)
</code></pre>
<p>one simple way to do this is:</p>
<pre><code>uniques = set()
output = []
for x in A:
    val = '-'.join([str(key) for key in x])
    if val not in uniques:
        output.append(x)
        uniques.add(val)
print (output)
</code></pre>
<p>output:</p>
<pre><code>[['1', '2'], ['3', '4'], ['5', '6'], ['7', '8']]
</code></pre>
</div>
<span class="comment-copy">You can't put a list in a set because a list is not hashable. And even if that worked, you'll lose the ordering of the items.</span>
<span class="comment-copy">@MosesKoledoye Order does not matter but the cost matters.</span>
<span class="comment-copy">Also, those are lists, not <a href="https://docs.python.org/3/library/array.html" rel="nofollow noreferrer">arrays</a></span>
<span class="comment-copy">Kindly mention the running cost as well.</span>
<span class="comment-copy">This will change the order of the list elements, though, which might or might not be a problem.</span>
<span class="comment-copy">What is the running cost?</span>
<span class="comment-copy">@sphericalcowboy, that was already addressed by the OP in the comments to his post.</span>
<span class="comment-copy">I don't think <code>log(n)</code> is possible. Because if <code>log(n)</code> was possible we could reverse engineer it and use it for sorting of list. which we know can not be <code>log(n)</code>.</span>
<span class="comment-copy">Kindly mention the running cost as well. I think it has o(n). is it?</span>
<span class="comment-copy"><code>if i not in new_list:</code> won't this be a costly step and make the process n^2?</span>
<span class="comment-copy">Kindly mention the running cost as well. I think it has o(n). is it?</span>
<span class="comment-copy">Added the running cost and let me know of you have any questions regarding it.</span>
<span class="comment-copy">your solution on 1Million list is giving <code>CPU times: user 1.21 s, sys: 17.9 ms, total: 1.23 s</code></span>
<span class="comment-copy">For the input data provided, this solution is quite adequate, order-preserving, and as straightforward as it gets. For a list of 10000 lists, 1000 numbers each, it's going to be expensive.</span>
<span class="comment-copy">Kindly mention the running cost as well. I think it has o(n). is it?</span>
<span class="comment-copy">O(n) running time.</span>
