<div class="post-text" itemprop="text">
<p>Ok, I read all of these before and I think pandas could be a solution, but my problem is slighly different:<br/>
<a href="https://stackoverflow.com/questions/23607664/print-a-dictionary-of-lists-vertically">Print a dictionary of lists vertically</a><br/>
<a href="https://stackoverflow.com/questions/9535954/printing-lists-as-tabular-data">Printing Lists as Tabular Data</a><br/>
<a href="https://stackoverflow.com/questions/15159962/print-dictionary-values-which-are-inside-a-list-in-python">print dictionary values which are inside a list in python</a><br/>
<a href="https://stackoverflow.com/questions/29265002/print-a-dictionary-into-a-table?noredirect=1&amp;lq=1">Print a dictionary into a table</a> </p>
<p>I have a dict of lists :  </p>
<pre><code>dict={"A":[i1, i2,i3], "B":[i1, i4,i5], "C":[i1, i2,i5]}
</code></pre>
<p>What I want as an output is :  </p>
<pre><code>    i1    i2    i3    i4    i5   
A    x     x     x     -     -   
B    x     -     -     x     x   
C    x     x     -     -     x  
</code></pre>
<p>(or even better,</p>
<pre><code>    i1    i2    i3    i4    i5  
A    A     A     A     -     -  
B    B     -     -     B     B  
C    C     C     -     -     C  
</code></pre>
<p>or a value matching A, B, C or (A,in) in another dictionary,
but if I can merely have the first table, I'll be more than happy)</p>
<p>No list contains repeats, but every elements in these lists are extracted from a same list (actually my problem is making a grid of annotated terms with the corresponding proteins, the keys being the annotated terms, which are functions related to these proteins in my context of study).</p>
<p>I indeed can think of a convoluted way to do so (building vectors of 0 and 1 for comparison of each list to the general list, associating these vectors with the keys, putting this in a pandas DataFrame which will be well formatted by the magic of me restablishing the good number of entities per list, and print this), but this seems/is tedious/unpythonic.</p>
<p>I think there must be a known way to do that with some module (pandas, prettytable, other?); and that I just don't know it.
So I'll be glad for any insight about this. Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p><code>apply</code> with a <code>lambda</code></p>
<pre><code>d = {
    "A": ['i1', 'i2', 'i3'],
    "B": ['i1', 'i4', 'i5'],
    "C": ['i1', 'i2', 'i5']
}

df = pd.DataFrame(d)

df.apply(lambda c: pd.Series(c.name, c.values)).fillna('-').T

  i1 i2 i3 i4 i5
A  A  A  A  -  -
B  B  -  -  B  B
C  C  C  -  -  C
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just a simple draft (based on a lot of <code>str.format</code>):</p>
<pre><code>def create_table(dictionary, columns):
    column_set = set(columns)  # only to speed up "in" calls, could be omitted
    # Fill in the symbols depending on the presence of the corresponding columns
    filled_dct = {key: [' X' if col in lst else ' -' for col in column_set] 
                  for key, lst in dct.items()}

    # A template string that is filled for each row
    row_template = '   '.join(['{}']*(len(columns)+1))

    print(row_template.format(*([' '] + columns)))
    for rowname, rowcontent in sorted(filled_dct.items()):
        print(row_template.format(*([rowname] + rowcontent)))

dct = {"A": ['i1', 'i2', 'i3'], 
       "B": ['i1', 'i4', 'i5'], 
       "C": ['i1', 'i2', 'i5']}

columns = ['i1', 'i2', 'i3', 'i4', 'i5']

create_table(dct, columns)
    i1   i2   i3   i4   i5
A    X    X    -    -    X
B    X    -    X    X    -
C    X    X    X    -    -
</code></pre>
<p>It's not really flexible (variable column width, etc.) though but should be easily extendable.</p>
</div>
<div class="post-text" itemprop="text">
<p>Consider your input dictionary:</p>
<pre><code>dic = {"A":["i1", "i2", "i3"], "B":["i1", "i4", "i5"], "C":["i1", "i2", "i5"]}
</code></pre>
<p>Use <a href="https://docs.python.org/3/library/stdtypes.html#dict.fromkeys" rel="nofollow noreferrer"><code>dict.fromkeys()</code></a> so that the iterable becomes the values present inside <code>dic</code> (a.k.a <code>dic.values()</code>) which is a <code>list</code> and it's default value would be the <code>dic's</code> key (a.k.a <code>dic.keys()</code>). </p>
<p>With the help of a <em>dictionary comprehension</em>, the result computed at the last step would constitute the values of the dataframe. Transpose it so that the column headers become index axis and vice-versa.</p>
<p>Later, fill <code>Nans</code> by <code>"-"</code>.</p>
<pre><code>pd.DataFrame({k:dict.fromkeys(v,k) for k,v in dic.items()}).T.fillna("-")
#                               ^----- replace k with "x" to get back the first o/p
</code></pre>
<p><a href="https://i.stack.imgur.com/ewk68.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/ewk68.png"/></a></p>
</div>
<span class="comment-copy">Awesome. Thanks. I think I am always disturbed by the way pandas convert lists in dicts to columns. If I understand well, I just have to get c.values instead of c.name to have the value instead? That's great.</span>
<span class="comment-copy">Thanks for the answer. this is what I thought about "convoluted ways" (admittedly, it is not as much convoluted as I would have thought, but it is not really the python way to do what I wanted. I'll upvote you for the effort)</span>
<span class="comment-copy">Nice answer too, very pythonic and clever. I won't select it as the accepted answer because the process of creating a dict of dicts is slightly more complex to handle conceptually. But I retain the masterful use of it to tell pandas what to do with columns and rows...</span>
