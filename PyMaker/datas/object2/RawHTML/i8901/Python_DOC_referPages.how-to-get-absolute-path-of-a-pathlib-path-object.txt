<div class="post-text" itemprop="text">
<p>Making a path object with <code>pathlib</code> module like:</p>
<pre><code>p = pathlib.Path('file.txt')
</code></pre>
<p>The <code>p</code> object will point to some file in the filesystem, since I can do for example <code>p.read_text()</code>.</p>
<p>How can I get the absolute path of the <code>p</code> object in a string?</p>
<p>Appears that I can use for example <code>os.path.abspath(p)</code> to get the absolute path, but it awkward to use an <code>os.path</code> method, since I assume that <code>pathlib</code> should be a replacement for <code>os.path</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're looking for the method <code>.absolute</code>, if my understanding is correct, who's documentation states:</p>
<pre><code>&gt;&gt;&gt; print(p.absolute.__doc__)
Return an absolute version of this path.  This function works
        even if the path doesn't point to anything.

        No normalization is done, i.e. all '.' and '..' will be kept along.
        Use resolve() to get the canonical path to a file.
</code></pre>
<p>With a test file on my system this returns:</p>
<pre><code>&gt;&gt;&gt; p = pathlib.Path('testfile')
&gt;&gt;&gt; p.absolute()
PosixPath('/home/jim/testfile')
</code></pre>
<p><a href="https://github.com/python/cpython/blob/c4a786b8ad2a625594551ab3bc991a6831ba7688/Lib/pathlib.py#L1096" rel="noreferrer">This method</a> seems to be a new, <strike>and still, undocumented addition to <code>Path</code> and <code>Path</code> inheritting objects.</strike></p>
<p><a href="https://bugs.python.org/issue29688" rel="noreferrer">Created an issue to document this</a>.</p>
</div>
<div class="post-text" itemprop="text">
<h3>Use resolve()</h3>
<p>Simply use <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.resolve" rel="noreferrer">Path.resolve()</a> like this:</p>
<pre><code>p = p.resolve()
</code></pre>
<p>This makes your path absolute and replaces all relative parts with absolute parts.</p>
<h3>Avoid absolute()</h3>
<p>You should <em>not use</em> <code>absolute()</code> (which does nearly the same) because it's not documented, untested, and considered for removal.  (See the discussion in <a href="https://bugs.python.org/issue29688" rel="noreferrer">the bug report</a> created by @Jim Fasarakis Hilliard).</p>
<p>The difference is that absolute() does not replace the relative parts of the path, and it never raises <code>FileNotFoundError</code>.</p>
<h3>Beware FileNotFoundError</h3>
<p>On Python versions predating v3.6, <code>resolve()</code> <strong>does</strong> raise a <code>FileNotFoundError</code> if the path is not present on disk.</p>
<p>So if there's any risk to that, either check beforhand with <code>p.exists()</code> or try/catch the error.</p>
<pre><code># check beforehand
if p.exists():
    p = p.resolve()

# or catch afterward
try:
    p = p.resolve()
catch FileNotFoundError:
    # deal with the missing file here
    pass
</code></pre>
<p>If you're dealing with a path that's not on disk to begin with, and you're not on Python 3.6+, it's best to revert to <code>os.path.abspath(str(p))</code>.</p>
<p>From 3.6 on, <code>resolve()</code> only raises FileNotFoundError if you use the <code>strict</code> argument.</p>
<pre><code># might raise FileNotFoundError
p = p.resolve(strict=True)
</code></pre>
<p>But beware, using <code>strict</code> makes your code incompatible with Python versions predating 3.6 since those don't accept the that argument.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>.absolute()</code> function (which, oddly, doesn't seem to be documented) to make your path absolute, then <a href="https://docs.python.org/3.4/library/pathlib.html#operators" rel="noreferrer"><code>str</code> to convert it to a string</a>:</p>
<pre><code>str(p.absolute())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you simply want the path and do note want to check if the file exists, you can do</p>
<pre><code>str(p)
</code></pre>
<p>as document in the <a href="https://docs.python.org/3/library/pathlib.html#operators" rel="nofollow noreferrer">Operations</a> section.</p>
</div>
<span class="comment-copy">does <code>'file.txt'</code> exist as a relative path in comparison to your .py file? If yes, then all you need to do is get "current path" and then concatenate it in front of the <code>'file.txt</code>'</span>
<span class="comment-copy">@TehTris: I would assume that it is possible to get the absolute path of <code>p</code> based on only <code>p</code>, since I can open a file based on <code>p</code>, so the location must be fixed in the file system already.</span>
<span class="comment-copy">@EquipDev indeed, which is odd. If you'd want you could go ahead and submit an issue on the <a href="https://bugs.python.org/" rel="nofollow noreferrer">bug tracker</a> for this. I'd be happy to do so if you don't (and see if any other methods have escaped)</span>
<span class="comment-copy">@JimFasarakisHilliard: May I ask you to submit the bug for this?  I have submitted bugs previously, but I am not that experience with for example checking if other methods are missing.</span>
<span class="comment-copy">@EquipDev Sure thing, I'll do that and edit the answer when it's resolved.</span>
<span class="comment-copy">I still have problem with back porting -- <code>openpyxl</code>'s <code>wb.save_workbook()</code>and <code>open(str, 'w')</code> in Python 3.5.5 (in Travis CI). So, yes, this, "On Python versions predating v3.6, resolve() does raise a FileNotFoundError if the path is not present on disk." is not True.</span>
<span class="comment-copy">@Polv Take a look at the official docs for 3.5: <a href="https://docs.python.org/3.5/library/pathlib.html#pathlib.Path.resolve" rel="nofollow noreferrer">docs.python.org/3.5/library/pathlib.html#pathlib.Path.resolve</a>  It clearly states 'If the path doesnâ€™t exist, <code>FileNotFoundError</code> is raised.'</span>
<span class="comment-copy">Sorry I misread, but how would I <code>write to a new file</code> with absolute path... before 3.6</span>
<span class="comment-copy">Just... write to the file first, and afterwards, call <code>resolve()</code> to get its canonical path?  Else, use <code>os.path.abspath(str(pathlib_path_object))</code>.</span>
<span class="comment-copy">This is not recommended, since that's an undocumented method.</span>
