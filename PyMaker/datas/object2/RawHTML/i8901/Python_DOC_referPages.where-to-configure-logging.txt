<div class="post-text" itemprop="text">
<p>I'm wondering where to configure and initialize stuff related with logging module?</p>
<p>For example I writing some class and I want to log some info while method will be executed. Should I configure logging in <strong>init</strong> or above class on the top of module:</p>
<pre><code># LOGGING STUFF &lt;--- Should be here ? 

class SomeClass:

    def __init__(self):
        # class stuff
        # LOGGING STUFF &lt;--- Or should be here ? 

    def some_method(self):
        # method stuff
        # LOGGING SOME INFO    

    def some_method2(self):
        # method stuff
        # LOGGING SOME INFO
</code></pre>
<p>What is the best practice ?</p>
</div>
<div class="post-text" itemprop="text">
<p>The logging package serves two purposes, assisting the author to produce logs and assisting the user to consume logs. You might perform both those roles but thinking about them separately will help you write clean, understandable code.</p>
<h2>Authors Concerns</h2>
<p>Author should instantiate the logger at the right level:</p>
<ul>
<li><p>Package logger should go in the packages <code>__init__</code> file. Note the use of <code>__name__</code>, it'll resolve to <code>SomePackage</code>:</p>
<pre><code>import logging
package_logger = logging.getLogger(__name__)
</code></pre></li>
<li><p>Module logger at the top of your module. Note the power of <code>__name__</code>! Here it'll resolve to <code>SomePackage.SomeModule</code>.</p>
<pre><code>import logging
module_logger = logging.getLogger(__name__)
</code></pre></li>
<li><p>Class level logger could go in a classes <code>__init__</code> (or use a <a href="https://stackoverflow.com/questions/29069655/python-logging-with-a-common-logger-class-mixin-and-class-inheritance/50731615#50731615">meta-class</a>). Note the awesome power of <code>__name__</code> enhanced with getLogger! The loggers name will be <code>SomePackage.SomeModule.SomeClass</code>. Also, not the underscore in <code>_class_logger</code> to signal that it is for internal use.:</p>
<pre><code>class SomeClass:
    def __init__(self):
        self._class_logger = logging.getLogger(__name__).getChild(self.__class__.__name__)
</code></pre></li>
<li><p>Instance logger in the classes <code>__init__</code>. Use ID to produce a unique identifier. Note the stupend... you get the idea. Logger name will be <code>SomePackage.SomeModule.SomeClass.&lt;large_unique_number&gt;</code>:</p>
<pre><code>class SomeClass:
    def __init__(self):
        self._instance_logger = logging.getLogger(__name__).getChild(self.__class__.__name__).getChild(id(self))
</code></pre></li>
</ul>
<p>The names may not suit your application. For instance you may want an instance logger that is derived from one of it's instantiating args. However, you should still aim to get a grip on your logger at the right level.</p>
<h2>Users Concerns</h2>
<p>It's the Users job to configure handlers. Generally, the author will have ensured that no handlers will be active by default. <code>logging.basicConfig</code> will dump all log records of level warning and above to stderr.</p>
<pre><code>import SomePackage
import logging

logging.basicConfig()
</code></pre>
<p>Remember you can use logging.getLogger() to access the same loggers that the author defined.</p>
<pre><code>from SomePackage import SomeModule
import logging

# module_logger debug to a file 
h = logging.FileHandler('debug')
h.setLevel('DEBUG')
SomeModule.module_logger.addHandler(h)

# class_logger warning to stderr
h = logging.StreamHandler()
getLogger('SomePackage.SomeModule.SomeClass').addHandler(h)
</code></pre>
<p>If you're debugging your own modules by calling them directly, you probably have a <code>def main()</code> and they should go in there. This ensures a package user won't get unexpected log files or consoles messages.</p>
</div>
<span class="comment-copy">Two objects with non-overlapping lifetimes may have the same <a href="https://docs.python.org/3/library/functions.html#id" rel="nofollow noreferrer">id()</a> value. <a href="https://docs.python.org/3.2/library/uuid.html?highlight=uuid#uuid.uuid4" rel="nofollow noreferrer">uuid4()</a> is a better way of obtaining a unique identifier for the life of the program run.</span>
