<div class="post-text" itemprop="text">
<p>Control characters I'm talking about can be found here:
<a href="http://ascii.cl/control-characters.htm" rel="nofollow noreferrer">http://ascii.cl/control-characters.htm</a></p>
<p>I need the control characters as their single character length entity, not represented as an ASCII code, or the plain text of their symbol.</p>
<p>See below...
<a href="https://i.stack.imgur.com/2e9yb.png" rel="nofollow noreferrer"><img alt="a" src="https://i.stack.imgur.com/2e9yb.png"/></a>
<a href="https://i.stack.imgur.com/6uMoL.png" rel="nofollow noreferrer"><img alt="b" src="https://i.stack.imgur.com/6uMoL.png"/></a></p>
<p>As shown above in both sublime and notepad text editors, I need the actual symbols, not their ascii code. So I need the characters as shown in the second invalid_chrs_list.</p>
<p>Is there a way to get these symbols, a file somewhere online, or a site that I can copy paste them from?</p>
<p>Edit:</p>
<pre><code>#Invalid characters ascii codes here (http://ascii.cl/control-characters.htm)
#invalid_chrs_list = [0,1,2,3,4,5,6,7,8,16,17,18,19,20,21,22,23,24,25,26,27] # ascii
#invalid_chrs_list = ['', ''] # real for acsii code 3 and 17 - NEED THE REST - Can't post these characters into stackoverflow so just pretend their there like in my screenshot.
invalid_chrs_list = ['\x00','\x01','\x02','\x03','\x04','\x05','\x06','\x07','\x08','\x10','\x11','\x12','\x13','\x14','\x15','\x16','\x17','\x18','\x19','\x1a','\x1b'] # escaped

with open(file, 'rb') as f:
    # Iterate through the rows
    for row in f:
        # Catch invalid characters
        for char in row:
            if char in invalid_chrs_list: # &lt;--- MAKE THIS FASTER
                print ('found')
                break
</code></pre>
<p>alternate for loop which would be faster if the check worked:</p>
<pre><code>for char in invalid_chrs_list:
    if char in row:
</code></pre>
<p>I've tried using <code>ord(char)</code> and <code>chr(char)</code> in <code>if char in invalid_chrs_list:</code> on each of the lists, but am not sure how to compare them to each other to verify a match</p>
<p><strong>Edit - Solution:</strong>
The list in the code below is the correct list, it is not necessary to use the literals I showed in my images.</p>
<p>I was looking in the wrong place for the answer, thank you to @Peteris for pointing me in the right direction.</p>
<p>I needed to switch the file mode to text: <code>'r'</code> or I need to encode the character I'm checking with <code>char.encode()</code> for it to check the literal properly. In my case I need to be opening the file in binary mode so I went with <code>char.encode()</code>.</p>
<pre><code>    invalid_chrs_list = ['\x00','\x01','\x02','\x03','\x04','\x05','\x06','\x07','\x08','\x10','\x11','\x12','\x13','\x14','\x15','\x16','\x17','\x18','\x19','\x1a','\x1b']

    with open('test.txt', 'rb') as f:
            # Iterate through the rows
            for row in f:
                    for char in invalid_chrs_list:
                            if char.encode() in row:
                                    print ('found')
                                    break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Make a tiny program that simply outputs the bytes you want to a file, converting them to bytes from the ascii code?</p>
<p>But I'd bet that you <em>don't</em> really want to copy/paste them as literal characters in your code, it can't work that way for e.g. newline character and others; ascii codes or escaped representations is the proper way to go.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since I don't have enough reputation to comment, I'll have to leave my comment as an answer.</p>
<p>I presume you want the literal characters and not their represented forms, such as \000.  Since plenty of these characters are not printable or visible, storing them in a text files seems pointless.  I may not be fully understanding your need, but it seems you want them in a text file for reference by code?  You certainly will not be able to make much use out of them viewing them in a plain text editor.  How do you want them stored in this file?  One per line, tab delimited?  You'd be better off opening a hex editor and manually coding each byte.</p>
</div>
<span class="comment-copy">Can't you just copy the "Symbols" column shown at the linked website? Here they all are, if not: <code>NUL, SOH, STX, ETX, EOT, ENQ, ACK, BEL, BS, TAB, LF, VT, FF, CR, SO, SI, DLE DC1, DC2, DC3, DC4, NAK, SYN, ETB, CAN, EM, SUB, ESC, FS, GS, RS, US</code>. I know of no way you could make them into single character entities/symbols that could be pasted into a text document however. You might be able to find a font somewhere that has them in it, but again, it's unclear how that could be used the way you want.</span>
<span class="comment-copy">Those are not symbols, those are 2-3 characters long. I need instances of these characters that are 1 character in length.</span>
<span class="comment-copy">Unicode has code points for these characters, which I believe implies they could be put into Python Unicode strings, but they would likely require more than one byte each in the string. If strings containing them were displayed on a device that used a font containing glyphs for them, they would appear as you describe.See answer to <a href="http://graphicdesign.stackexchange.com/a/57822/42230"><b><i>Font for representing Unicode non‐printable characters</i></b></a>.</span>
<span class="comment-copy">I do, as you can see I have started the list of characters already. And I do not have newline in my list of ascii code versions because I don't need that specific one.  I need to check if a file contains any of these characters, it takes a lot longer to convert every character in the file into it's ascii code and then compare the values of my list, then it would to compare the single character entities to every character in the file without any converting.</span>
<span class="comment-copy">@Wafer you don't need to convert every character in the file into its ascii code, but the reasonable way would be to have a list of ascii codes and then have your program first convert it to a list of the appropriate characters and then do everything as if you had a "manually written" list. And why wouldn't '\x03' work for you, as you already have that representation but commented it out? The result of '\x03' <i>is</i> a single character with ascii code 3.</span>
<span class="comment-copy">I added the code I'm trying to get working faster. I can't match \xo3 to the symbol for ETX, at least not in a method that I've found yet.</span>
<span class="comment-copy">checking <code>if '\x03' in the row</code> does not work because it isn't <code>\x03</code> it's a single character <code>ETX</code> - with a length of one.</span>
<span class="comment-copy">@Wafer '\x03' <i>is</i> a string literal that (after compilation) is a single character ETX. Try print(len('\x03')) or print('\x03' == chr(3)) or refer to python spec on string literals at <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">docs.python.org/3/reference/…</a></span>
<span class="comment-copy">Yea, literals is probably the best way of putting it, I just need them in a .txt file so that I can copy paste their literals.  I need to compare this small list of control characters (the one that is already started containing EXT, and DC1) against each character in an entire file. I can convert the characters in the file to ascii and check if they are in the list of integers in my image, however that is much slower than it would be if I didn't have to convert every character in the file to its ascii code.  I will give the hex editor a shot.</span>
<span class="comment-copy">The hex editor only outputs full stop dots for these characters.</span>
