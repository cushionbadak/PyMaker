<div class="post-text" itemprop="text">
<p>I have a script 'preprocessing.py' containing the function for text preprocessing:</p>
<pre><code>def preprocess():
    #...some code here
    with open('stopwords.txt') as sw:
        for line in sw.readlines():
            stop_words.add(something)
    #...some more code than doesn't matter
    return stop_words
</code></pre>
<p>Now I want to use this function in another Python script.
So, I do the following:</p>
<pre><code>import sys
sys.path.insert(0, '/path/to/first/script')

from preprocessing import preprocess
x = preprocess(my_text)
</code></pre>
<p>Finally, I end up with the issue:</p>
<pre><code>IOError: [Errno 2] No such file or directory: 'stopwords.txt'
</code></pre>
<p>The problem is surely that the 'stopwords.txt' file is located next to the first script, not the second. </p>
<p>Is there any way to specify the path to this file, not making any changes to the script 'preprocessing.py'?</p>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you're running on a *nix like system, it seems, why not use that marvellous environment to glue your stuff together?</p>
<pre><code>cat stopwords.txt | python preprocess.py | python process.py
</code></pre>
<p>Of course, your scripts should just use the standard input, and produce just standard output.  See!  Remove code and get functionality for free!</p>
</div>
<div class="post-text" itemprop="text">
<p>The simplest, and possibly most sensible way is to pass in the fully pathed filename:</p>
<pre><code>def preprocess(filename):
    #...some code here
    with open(filename) as sw:
        for line in sw.readlines():
            stop_words.add(something)
    #...some more code than doesn't matter
    return stop_words
</code></pre>
<p>Then you can call it appropriately.</p>
</div>
<div class="post-text" itemprop="text">
<p>Looks like you can put</p>
<pre><code>import os
os.chdir('path/to/first/script')
</code></pre>
<p>in your second script. Please try.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os
def preprocess():
    #...some code here
    # get path in same dir
    path = os.path.splitext(__file__)
    # join them with file name
    file_id = os.path.join(path, "stopwords.txt")

    with open(file_id) as sw:
        for line in sw.readlines():
            stop_words.add(something)
    #...some more code than doesn't matter
    return stop_words
</code></pre>
</div>
<span class="comment-copy">Try with a full qualified path here: <code>with open('stopwords.txt') as sw:</code></span>
<span class="comment-copy">Do not rely on the current working directory in <code>preprocess</code>. Get the directory with <code>os.path.dirname(os.path.realpath(__file__))</code> and use that to find <code>stopwords.txt</code>.</span>
<span class="comment-copy">I see two questions here: 1- <b>Q:</b> how to import a Python module that does not belong to the same Python project (package)? <b>A:</b> put it in pythonpath --  the preferred way is to install it (<a href="https://docs.python.org/3/distutils/setupscript.html" rel="nofollow noreferrer">create a simple <code>setup.py</code></a> (or using <code>cookiecutter</code> package), run <code>pip install -e .</code>). <code>sys.path.insert()</code> with/without the hardcoded path should be avoided¶ 2- <b>Q:</b> how to access resources (files) that are located relative to the code. <b>A:</b> <a href="http://stackoverflow.com/q/17244406/4279"><code>pkgutil.get_data()</code>, <code>pkg_resources</code>, appdirs</a></span>
<span class="comment-copy">I'm curious as to why you would consider this the most sensible way? If you moved a large project set up like this, wouldn't it be horrible to correct all of the full paths?</span>
<span class="comment-copy">Hard coded things make me conrcerned and I guessed that it wasn't being called from anywhere else (yet) since the question was about failing to call it from anywhere else.</span>
<span class="comment-copy">Ah, I think we're coming from different angles. I agree that you'd want to be able to pass the file name as an argument but I would generate the directory path inside <code>preprocessing.py</code> if the code was separated into multiple directories; assuming it was a project with a fixed structure. We perhaps made opposite assumptions in that aspect.</span>
<span class="comment-copy">1- <code>splitext()</code> seems incorrect. You might mean <a href="http://stackoverflow.com/q/3718657/4279"><code>os.path.dirname(os.path.abspath(__file__))</code></a> instead¶ 2- Consider  <a href="http://stackoverflow.com/q/17244406/4279"><code>pkgutil.get_data()</code>, <code>pkg_resources</code> (setuptools)</a> instead of manually locating files e.g., the <a href="http://stackoverflow.com/q/5355694/4279">data may be in a zip archive</a></span>
