<div class="post-text" itemprop="text">
<p>I apoligise now, my programming habits aren't very good. I have modified the basic pyDes code from thier website:</p>
<pre><code>import os, sys, binascii
text = input ("Text to be encrypted...")
key = input ("Key...")
sys.path.append (os.path.abspath ("").split (":") [0] + ":\\Python\\Libraries\\pyDes")
import pyDes
def toKey (string):
    b = string
    a = 0
    if len (b) &gt; 16:
        while len (b) != 16:
            b = b [:-1]
    elif len (b) &lt; 16:
        while len (b) != 16:
            b += b [a]
            a += 1
    return b
key = toKey (key)
data = pyDes.triple_des(key, pyDes.CBC, "\0\0\0\0\0\0\0\0", pad=None, padmode=pyDes.PAD_PKCS5)
print ("Before: " + text)
encrypted = str (data.encrypt (text)) [2:-1]
print ("Encrypted: " + encrypted)
decrypted = str (data.decrypt (encrypted)) [2:-1]
print ("Decrypted: " + decrypted)
</code></pre>
<p>When I run the program, the encryption works fine, however, the decryption throws the error:</p>
<pre><code>Traceback (most recent call last):
  File "E:\Python\Examples\Encrypt.py", line 23, in &lt;module&gt;
    decrypted = str (data.decrypt (encrypted)) [2:-1]
  File "E:\Python\Libraries\pyDes\pyDes.py", line 836, in decrypt
    block = self.__key3.crypt(iv,    DECRYPT)
  File "E:\Python\Libraries\pyDes\pyDes.py", line 572, in crypt
    raise ValueError("Invalid data length, data must be a multiple of " + str(self.block_size) + " bytes\n.")
ValueError: Invalid data length, data must be a multiple of 8 bytes
</code></pre>
<p>Sorry if this is really annoying and simple :-(</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem appears to be your use of <code>str(...)[2:-1]</code> to convert a <code>bytes</code> value to a string.</p>
<p>Perhaps you settled on using this after trying the following code</p>
<pre><code>encrypted = data.encrypt (text)
print ("Encrypted: " + encrypted)
</code></pre>
<p>and finding that it reports the error <code>TypeError: Can't convert 'bytes' object to str implicitly</code>.</p>
<p>One thing to note about the output of the <code>encrypt</code> and <code>decrypt</code> methods (and the inputs as well, for that matter) is that they use <code>bytes</code> objects, not strings (<code>str</code>).  What you are doing is taking the <code>bytes</code> object that comes back from a call to <code>data.encrypt</code>, converting it to a string using <code>str</code> (which isn't the right way to do this) and then attempting to decrypt your string rather than the <code>bytes</code> value you got back from <code>encrypt</code>.</p>
<p>What you need to be doing instead is converting the text to be encrypted into a <code>bytes</code> object, using the <code>encode</code> method of a <code>str</code>, before you pass this to <code>data.encrypt</code>.  You'll need to specify a character set to do this encoding in, such as <code>utf-8</code>.  Once you get the output back from <code>decrypt</code>,  convert it back to a string using the <code>decode</code> method of a <code>bytes</code> object.</p>
<p>The encrypted data, however, isn't likely to be readable in any character set.  (It's quite likely not to be well-formed UTF-8, so don't try converting it into that.)  If you want to take a look at what it looks like, perhaps the best thing to do is to use the built-in <a href="https://docs.python.org/3/library/functions.html#repr" rel="nofollow noreferrer"><code>repr</code></a> function, but only use that when printing the value.</p>
<p>After making these changes, here's what the last few lines of your code look like:</p>
<pre><code>charset = "utf-8"
encrypted = data.encrypt(text.encode(charset))
print ("Encrypted: " + repr(encrypted))
decrypted = data.decrypt(encrypted).decode(charset)
print ("Decrypted: " + decrypted)
</code></pre>
<p>Here's the output from a sample run:</p>
<pre class="lang-none prettyprint-override"><code>Text to be encrypted...example1234
Key...5678
Before: example1234
Encrypted: b'\xf1\xed6cR9p\x18u\x1e\xf7\xcb\x98\xe40\xed'
Decrypted: example1234
</code></pre>
<p>The <code>\xNN</code> sequences within the encrypted data are how Python displays individual bytes within a <code>bytes</code> object that aren't in the ASCII range.</p>
</div>
<span class="comment-copy">If encoding / decoding issues were not allowed we could remove about 30% about the questions with regard to cryptography if you ask me.</span>
