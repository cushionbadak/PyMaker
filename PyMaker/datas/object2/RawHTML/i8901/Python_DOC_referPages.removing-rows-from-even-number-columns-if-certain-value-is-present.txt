<div class="post-text" itemprop="text">
<p>I have a numpy array with the shape </p>
<pre><code>(500,12) 
</code></pre>
<p>All I want to do is to check whether the even number columns has a positive value, eg. <code>value &gt; 0</code>. In that case I want to remove the whole row in my array. 
I put this up:</p>
<pre><code>a = a[a[:,1] &lt; 0, :]
</code></pre>
<p>This eliminates the desired rows but looks at the second column. I want it to check for column 4, column 6, column 8 etc too. </p>
<p>Is there an way of doing that using my method above? </p>
</div>
<div class="post-text" itemprop="text">
<p>If you are dealing with NumPy arrays, then you could use <a href="https://docs.scipy.org/doc/numpy-dev/user/quickstart.html#fancy-indexing-and-index-tricks" rel="nofollow noreferrer">fancy indexing</a> approach (indexing an array with an array sequence of integers) as shown:</p>
<pre><code>mask = (a[:, np.arange(1, a.shape[1], 2)] &lt; 0).all(axis=1)
out = a[mask]
</code></pre>
<hr/>
<p><strong><em>Explanation:</em></strong></p>
<p>To select positions of odd numbered columns whose values are to be compared:</p>
<pre><code>np.arange(1, a.shape[1], 2)         # a.shape[1] gives the number of columns
# array([ 1,  3,  5,  7,  9, 11])
</code></pre>
<p>Next we subset the array based on these indices and see if the values under these columns are lesser than zero by providing <code>axis=1</code> which performs column-wise check and returns an array containing a reduced number of rows after dropping the remaining ones.</p>
</div>
<div class="post-text" itemprop="text">
<p>Although perhaps not the most efficient way, you can use the <em>elementwise and</em> <code>&amp;</code> for all the rows:</p>
<pre><code>a = a[<b>(a[:,1]&lt;0)&amp;(a[:,3]&lt;0)&amp;(a[:,5]&lt;0)&amp;(a[:,7]&lt;0)&amp;(a[:,9]&lt;0)&amp;(a[:,11]&lt;0)</b>,:]</code></pre>
<p>So you mask out all items for which there exists an even column that is positive.</p>
<p>You can make it more elegantly (with a minor performance penalty) by using <a href="https://docs.python.org/3/library/functools.html?highlight=functools.reduce#functools.reduce" rel="nofollow noreferrer"><code>functools.reduce</code></a>:</p>
<pre><code><b>from functools import reduce</b>

a = a[<b>reduce(lambda x,y:x&amp;y,(a[:,i]&lt;0 for i in range(1,12,2)))</b>,:]</code></pre>
<p>In case the <code>shape</code> is not fully known in advance, you can use <code>.shape[1]</code>:</p>
<pre><code>from functools import reduce

a = a[reduce(lambda x,y:x&amp;y,(a[:,i]&lt;0 for i in range(1,<b>a.shape[1]</b>,2))),:]</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The general way is to build a list comprehension with a condition:</p>
<pre><code>a = [row for row in a if all(row[j] &lt;= 0 for j in range(0, len(row), 2))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want a loop (as it iteratively shrinks your dataframe with some associated overhead):</p>
<pre><code>m = (arr &gt; 0) # check if positive; this is what you want to keep
m = arr.ix[:,1::2] # select only the even columns
m = arr.any(axis=1) # and check if any of them is true
</code></pre>
<p>So in one line:</p>
<pre><code> arr[(arr &gt; 0)[:,1::2].all(axis=1),:]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Without using a loop, there is no single command that will help you with your motive. I suggest looping over all the rows and then doing this. </p>
</div>
<span class="comment-copy">Shouldn't the check be <code>&lt;=</code>?</span>
<span class="comment-copy">Not clear to me what you define to be the columns and what the rows. You say "In that case i want to remove the whole row in my array", you mean the whole column? You might consider using pandas.</span>
<span class="comment-copy">My main array has 500 rows and 12 columns. I then want to check for each even column if it contains a positive value. If it does, the row should be eliminated from my main array, which then becomes 499 rows with 12 columns instead.</span>
<span class="comment-copy">Yes numpy arrays. Im not sure what you're missing of information</span>
<span class="comment-copy">Ah we are talking about numpy arrays. - your verbal description of the problem is ambiguous.</span>
<span class="comment-copy">I could but the thing is i would have a much larger number of columns. So im seeking for a general solution. I actually put this up, it looks like it works:  for i in range (1, 12, 2):         a = a[a[:,i] &lt; 0, :]  Can you see any problems with this?</span>
<span class="comment-copy">@MatiMalik: I think the edit crossed you comment. Semantically it is equivalent. But my guess is that you will pay a higher perforamance penalty since you filter the array each time in you approach.</span>
<span class="comment-copy">Your updated solution is probably more simplified, thanks! Also do you have a suggestion to how to now convert all the negative values to positive in the even columns?</span>
<span class="comment-copy">what about <code>a[:,1::2] = abs(a[:,1::2])</code>...</span>
<span class="comment-copy">Works, awesome! The last thing i need to do now is to add the minimum absolute value of each ODD column to its respective column. This is a bit more tricky, i figured out how to do it individually a[:,0::2][:,0]+abs(min(a[:,0::2][:,0])) for the first row, but can't really put it in a loop for all the ODD columns</span>
<span class="comment-copy">Shouldn't it be <code>all</code> instead of <code>any</code>?</span>
<span class="comment-copy">Not entirely sure, but the comments seem to suggest that. Changed it.</span>
