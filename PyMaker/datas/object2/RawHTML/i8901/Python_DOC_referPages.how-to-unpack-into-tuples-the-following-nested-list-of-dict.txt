<div class="post-text" itemprop="text">
<p>I have a very large nested list like this one:</p>
<pre><code>a_lis = [[{'A': 'the', 'B': 'US3---'}, {'A': 'the', 'B': 'PS3N'}, {'A': 'the', 'B': 'P3N'}, {'A': 'quick', 'B': 'GS'}, {'A': 'quick', 'B': 'NCMSN-'}, {'A': 'fox', 'B': 'YN-'}, {'A': 'it', 'B': 'VI--2PSA--N-'}, {'A': 'jumping', 'B': 'GNM-'}]]
</code></pre>
<p><strong>How can to transform it into?:</strong></p>
<pre><code>[('the', 'US3---'), ('the', 'PS3N'), ('the', 'P3N'), ('quick', 'GS'), ('quick', 'NCMSN-'), ('fox', 'YN-'), ('it's, 'VI--2PSA--N-'), ('jumping', 'GNM-')]
</code></pre>
<p>I tried to:</p>
<pre><code>tuples = ['{}'.join(x) for x in a_list[0]]
</code></pre>
<p>And:</p>
<pre><code>values = [','.join(str(v) for v in a_list)]
</code></pre>
<p>The main issue is that I do not how to manage the <code>}{</code> characters. Could somebody explain which is the best way to manage them with a comprehension list?.</p>
</div>
<div class="post-text" itemprop="text">
<p>Fixing the syntax error with strings in your input line, you could the correct ensure order with something like </p>
<pre><code>&gt;&gt;&gt; list(map(lambda d: (d['A'], d['B']), a_lis[0]))

[('the', 'US3---'),
 ('the', 'PS3N'),
 ('the', 'P3N'),
 ('quick', 'GS'),
 ('quick', 'NCMSN-'),
 ('fox', 'YN-'),
 ("it's", 'VI--2PSA--N-'),
 ('jumping', 'GNM-')]
</code></pre>
<p>or equivalently with a list comprehension </p>
<pre><code>&gt;&gt;&gt; [(d['A'], d['B']) for d in a_lis[0]]

[('the', 'US3---'),
 ('the', 'PS3N'),
 ('the', 'P3N'),
 ('quick', 'GS'),
 ('quick', 'NCMSN-'),
 ('fox', 'YN-'),
 ("it's", 'VI--2PSA--N-'),
 ('jumping', 'GNM-')]
</code></pre>
<p>If <code>a_lis</code> had items beyond further lists beyond the first index you wanted to also have in the list of tuples, you could unpack. </p>
<pre><code>list(map(lambda d: (d['A'], d['B']), *a_lis))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>[tuple(j.values()) for i in a_lis for j in i]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can get what you want by calling <a href="https://docs.python.org/3/library/functions.html#func-tuple" rel="nofollow noreferrer">tuple</a> on the values in each dictionary:</p>
<pre><code>nested = a_lis[0]
value_tuples = [tuple(dictionary.values()) for dictionary in nested]
</code></pre>
<p>If you need the tuples to be sorted on key:</p>
<pre><code>nested = a_lis[0]
value_tuples = [tuple(dictionary[k] for k in sorted(dictionary)) for dictionary in nested]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Chain the lists and provide them to <code>tuple</code>:</p>
<pre><code>from itertools import chain

tps = [tuple(i.values()) for i in chain.from_iterable(a_lis)]
</code></pre>
<p>The variable <code>tps</code> now (randomly) holds:</p>
<pre><code>[('the', 'US3---'),
 ('the', 'PS3N'),
 ('the', 'P3N'),
 ('quick', 'GS'),
 ('quick', 'NCMSN-'),
 ('fox', 'YN-'),
 ('its', 'VI--2PSA--N-'),
 ('jumping', 'GNM-')]
</code></pre>
<p>If you need to deterministically handle the creation of tuples you should first transform all nested dictionaries into ordered dictionaries:</p>
<pre><code>from collections import OrderedDict

a_lis = [OrderedDict(d) for d in a_lis[0]]
</code></pre>
<p>and then perform the dictionary conversion as previously.</p>
</div>
<div class="post-text" itemprop="text">
<p>your nested list has a "quote" issue somewhere. Once fixed you can recreate the tuples from the dictionary values using a list comprehension:</p>
<pre><code>a_lis = [[{'A': 'the', 'B': 'US3---'}, {'A': 'the', 'B': 'PS3N'}, {'A': 'the', 'B': 'P3N'}, {'A': 'quick', 'B': 'GS'}, {'A': 'quick', 'B': 'NCMSN-'}, {'A': 'fox', 'B': 'YN-'}, {'A': "it's", 'B': 'VI--2PSA--N-'}, {'A': 'jumping', 'B': 'GNM-'}]]

n = [tuple(a.values()) for a in a_lis[0]]

print(n)
</code></pre>
<p>you get:</p>
<pre><code>[('US3---', 'the'), ('PS3N', 'the'), ('P3N', 'the'), ('GS', 'quick'), ('NCMSN-', 'quick'), ('YN-', 'fox'), ('VI--2PSA--N-', "it's"), ('GNM-', 'jumping')]
</code></pre>
<p>As someone noted, unless you're using Python 3.6, you get the natural internal order of the dictionary by doing this (not necessarily the input order), which may not be what you want.</p>
</div>
<span class="comment-copy">Is the second list in the original structure a typo or is it actually like that? How many inner lists do you have?</span>
<span class="comment-copy">@Elmex80s I fixed that.</span>
<span class="comment-copy">It is actually like that. That's why I used <code>[0]</code>. Just one list, thanks for the help! @Ev.Kounis</span>
<span class="comment-copy">@J.Do. Is the order of the items in the tuples significant? If so, are the keys in the <code>dict</code> really "A" and "B"?</span>
<span class="comment-copy">I didn't downvote. But isn't it just coincidence that you get the correct ordering here and other dictionaries would not necessarily give the expected output?</span>
<span class="comment-copy">it is a coincidence all right (except on python 3.6) (I didn't downvote either, I may have an idea of who did :))</span>
<span class="comment-copy">Yes, it is @roganjosh I completely forget that nowdays :-).</span>
<span class="comment-copy">dictionaries do not have an order. so what guarantees the values will be in the right order?</span>
<span class="comment-copy">nothing guarantees it, actually, you're right.</span>
<span class="comment-copy">Sorting? No that won't help unfortunately.</span>
<span class="comment-copy">use Python 3.6 if you need that, else, nothing can help you if you input the dict as is, but maybe manual parsing...</span>
<span class="comment-copy">Yes you have to manually extract the values from the dict.</span>
