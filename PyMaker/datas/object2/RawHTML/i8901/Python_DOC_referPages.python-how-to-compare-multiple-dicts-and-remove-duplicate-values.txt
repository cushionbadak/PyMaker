<div class="post-text" itemprop="text">
<p>As you can see down here I have a "main" dictionary where each value is a dict by itself. Now I want to compare the main dictonaries'<strong>(can be more than 2)</strong> "name" values to each other, so for example "DE, Stuttgart" with "DE, Dresden" and X and have only unique "name" values left. </p>
<p>I know of the <code>x for x in y if x['key'] != None</code> structure for example, but to my knowledge I can only use this to filter single dictionaries.</p>
<p>Input:</p>
<pre><code>"DE, Stuttgart": [
    {
        "url": "http://twitter.com/search?q=%23ISIS", 
        "query": "%23ISIS", 
        "tweet_volume": 21646, 
        "name": "#ISIS", 
        "promoted_content": null
    }, 
    {
        "url": "http://twitter.com/search?q=%22Hans+Rosling%22", 
        "query": "%22Hans+Rosling%22", 
        "tweet_volume": 44855, 
        "name": "Hans Rosling", 
        "promoted_content": null
    }, 
    {
        "url": "http://twitter.com/search?q=%22Betsy+DeVos%22", 
        "query": "%22Betsy+DeVos%22", 
        "tweet_volume": 664741, 
        "name": "Betsy DeVos", 
        "promoted_content": null
    }, 
    {
        "url": "http://twitter.com/search?q=Nioh", 
        "query": "Nioh", 
        "tweet_volume": 24160, 
        "name": "Nioh", 
        "promoted_content": null
    }, 
    {
        "url": "http://twitter.com/search?q=%23FCBWOB", 
        "query": "%23FCBWOB", 
        "tweet_volume": 14216, 
        "name": "#FCBWOB", 
        "promoted_content": null
    }, 
    {
        "url": "http://twitter.com/search?q=%23sid2017", 
        "query": "%23sid2017", 
        "tweet_volume": 28277, 
        "name": "#sid2017", 
        "promoted_content": null
    }
], 
"DE, Dresden": [
    {
        "url": "http://twitter.com/search?q=%22Hans+Rosling%22", 
        "query": "%22Hans+Rosling%22", 
        "tweet_volume": 44855, 
        "name": "Hans Rosling", 
        "promoted_content": null
    }, 
    {
        "url": "http://twitter.com/search?q=%22Betsy+DeVos%22", 
        "query": "%22Betsy+DeVos%22", 
        "tweet_volume": 664741, 
        "name": "Betsy DeVos", 
        "promoted_content": null
    }, 
    {
        "url": "http://twitter.com/search?q=Nioh", 
        "query": "Nioh", 
        "tweet_volume": 24160, 
        "name": "Nioh", 
        "promoted_content": null
    }, 
    {
        "url": "http://twitter.com/search?q=%23FCBWOB", 
        "query": "%23FCBWOB", 
        "tweet_volume": 14216, 
        "name": "#FCBWOB", 
        "promoted_content": null
    }, 
    {
        "url": "http://twitter.com/search?q=%23sid2017", 
        "query": "%23sid2017", 
        "tweet_volume": 28277, 
        "name": "#sid2017", 
        "promoted_content": null
    }
], 
</code></pre>
<p>output:</p>
<pre><code>"DE, Stuttgart": [
        {
            "url": "http://twitter.com/search?q=%23ISIS", 
            "query": "%23ISIS", 
            "tweet_volume": 21646, 
            "name": "#ISIS", 
            "promoted_content": null
        }
    ], 
    "DE, Dresden": [
    ], 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could collect the names to <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a> and then reconstruct the original dict while preserving only those sub dicts which have unique name:</p>
<pre><code>main = {
    "DE, Stuttgart": [
        {
            "url": "http://twitter.com/search?q=%23ISIS",
            "query": "%23ISIS",
            "tweet_volume": 21646,
            "name": "#ISIS",
            "promoted_content": None
        },
        {
            "url": "http://twitter.com/search?q=%22Hans+Rosling%22",
            "query": "%22Hans+Rosling%22",
            "tweet_volume": 44855,
            "name": "Hans Rosling",
            "promoted_content": None
        },
        {
            "url": "http://twitter.com/search?q=%22Betsy+DeVos%22",
            "query": "%22Betsy+DeVos%22",
            "tweet_volume": 664741,
            "name": "Betsy DeVos",
            "promoted_content": None
        },
        {
            "url": "http://twitter.com/search?q=Nioh",
            "query": "Nioh",
            "tweet_volume": 24160,
            "name": "Nioh",
            "promoted_content": None
        },
        {
            "url": "http://twitter.com/search?q=%23FCBWOB",
            "query": "%23FCBWOB",
            "tweet_volume": 14216,
            "name": "#FCBWOB",
            "promoted_content": None
        },
        {
            "url": "http://twitter.com/search?q=%23sid2017",
            "query": "%23sid2017",
            "tweet_volume": 28277,
            "name": "#sid2017",
            "promoted_content": None
        }
    ],
    "DE, Dresden": [
        {
            "url": "http://twitter.com/search?q=%22Hans+Rosling%22",
            "query": "%22Hans+Rosling%22",
            "tweet_volume": 44855,
            "name": "Hans Rosling",
            "promoted_content": None
        },
        {
            "url": "http://twitter.com/search?q=%22Betsy+DeVos%22",
            "query": "%22Betsy+DeVos%22",
            "tweet_volume": 664741,
            "name": "Betsy DeVos",
            "promoted_content": None
        },
        {
            "url": "http://twitter.com/search?q=Nioh",
            "query": "Nioh",
            "tweet_volume": 24160,
            "name": "Nioh",
            "promoted_content": None
        },
        {
            "url": "http://twitter.com/search?q=%23FCBWOB",
            "query": "%23FCBWOB",
            "tweet_volume": 14216,
            "name": "#FCBWOB",
            "promoted_content": None
        },
        {
            "url": "http://twitter.com/search?q=%23sid2017",
            "query": "%23sid2017",
            "tweet_volume": 28277,
            "name": "#sid2017",
            "promoted_content": None
        }
    ]
}
from collections import Counter
import pprint

names = Counter(d['name'] for l in main.values() for d in l)
result = {k: [d for d in v if names[d['name']] == 1] for k, v in main.items()}

pprint.pprint(result)
</code></pre>
<p>Output:</p>
<pre><code>{'DE, Dresden': [],
 'DE, Stuttgart': [{'name': '#ISIS',
                    'promoted_content': None,
                    'query': '%23ISIS',
                    'tweet_volume': 21646,
                    'url': 'http://twitter.com/search?q=%23ISIS'}]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will output the desired dict, for any number of locations. Note that @niemmi's solution is much more efficient :</p>
<pre><code>main_dict = {"DE, Stuttgart": [
    {
        "url": "http://twitter.com/search?q=%23ISIS", 
        "query": "%23ISIS", 
        "tweet_volume": 21646, 
        "name": "#ISIS", 
        "promoted_content": None
    }, 
    {
        "url": "http://twitter.com/search?q=%22Hans+Rosling%22", 
        "query": "%22Hans+Rosling%22", 
        "tweet_volume": 44855, 
        "name": "Hans Rosling", 
        "promoted_content": None
    }, 
    {
        "url": "http://twitter.com/search?q=%22Betsy+DeVos%22", 
        "query": "%22Betsy+DeVos%22", 
        "tweet_volume": 664741, 
        "name": "Betsy DeVos", 
        "promoted_content": None
    }, 
    {
        "url": "http://twitter.com/search?q=Nioh", 
        "query": "Nioh", 
        "tweet_volume": 24160, 
        "name": "Nioh", 
        "promoted_content": None
    }, 
    {
        "url": "http://twitter.com/search?q=%23FCBWOB", 
        "query": "%23FCBWOB", 
        "tweet_volume": 14216, 
        "name": "#FCBWOB", 
        "promoted_content": None
    }, 
    {
        "url": "http://twitter.com/search?q=%23sid2017", 
        "query": "%23sid2017", 
        "tweet_volume": 28277, 
        "name": "#sid2017", 
        "promoted_content": None
    }
], 
"DE, Dresden": [
    {
        "url": "http://twitter.com/search?q=%22Hans+Rosling%22", 
        "query": "%22Hans+Rosling%22", 
        "tweet_volume": 44855, 
        "name": "Hans Rosling", 
        "promoted_content": None
    }, 
    {
        "url": "http://twitter.com/search?q=%22Betsy+DeVos%22", 
        "query": "%22Betsy+DeVos%22", 
        "tweet_volume": 664741, 
        "name": "Betsy DeVos", 
        "promoted_content": None
    }, 
    {
        "url": "http://twitter.com/search?q=Nioh", 
        "query": "Nioh", 
        "tweet_volume": 24160, 
        "name": "Nioh", 
        "promoted_content": None
    }, 
    {
        "url": "http://twitter.com/search?q=%23FCBWOB", 
        "query": "%23FCBWOB", 
        "tweet_volume": 14216, 
        "name": "#FCBWOB", 
        "promoted_content": None
    }, 
    {
        "url": "http://twitter.com/search?q=%23sid2017", 
        "query": "%23sid2017", 
        "tweet_volume": 28277, 
        "name": "#sid2017", 
        "promoted_content": None
    }
]
}

def get_names(main_dict, location):
    return {small_dict["name"] for small_dict in main_dict[location]}

def get_names_from_other_locations(main_dict, location):
    other_locations = [other_loc for other_loc in main_dict if other_loc != location]
    return {small_dict["name"] for other_location in other_locations for small_dict in main_dict[other_location]}

def get_uniq_names(main_dict, location):
    return get_names(main_dict, location) - get_names_from_other_locations(main_dict, location)

def get_dict(main_dict, location, name):
    for small_dict in main_dict[location]:
        if small_dict["name"] == name:
            return small_dict
    return None

print {location: [get_dict(main_dict,location,uniq_name) for uniq_name in get_uniq_names(main_dict, location)] for location in main_dict }
# {'DE, Stuttgart': [{'url': 'http://twitter.com/search?q=%23ISIS', 'query': '%23ISIS', 'tweet_volume': 21646, 'name': '#ISIS', 'promoted_content': None}], 'DE, Dresden': []}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let's say <code>d1</code> and <code>d2</code> are your two dictionaries. You can get the list of keys of <code>d1</code> that are not in <code>d2</code> with :</p>
<pre><code>[k for k in d if k not in d2]
</code></pre>
</div>
<span class="comment-copy">What syntax is that?</span>
<span class="comment-copy"><code>null</code> isn't python code. Is this JSON text?</span>
<span class="comment-copy">@Jean-FrançoisFabre Yeah I'm pretty sure it is</span>
<span class="comment-copy">but not properly loadable as is.</span>
<span class="comment-copy">Yeah sorry I should have added that it's just put out as "print json.dumps()"</span>
<span class="comment-copy">Nice, clean and simple. Well done!</span>
<span class="comment-copy">Works really well. I've got in total like 15 dicts in the main dict right now and it works really fast and as expected.</span>
<span class="comment-copy">I get what the function does, but in the moment I have 3 dicts, does this still work?</span>
<span class="comment-copy">Updated the answer.</span>
<span class="comment-copy">Hey Eric, thank you for the help! As you wrote in your edit, I went with the solution by @niemmi, but thank you very much. I didn't know before that you can just "substract" dicts in python.</span>
<span class="comment-copy">Note that I substract sets, not dicts.</span>
