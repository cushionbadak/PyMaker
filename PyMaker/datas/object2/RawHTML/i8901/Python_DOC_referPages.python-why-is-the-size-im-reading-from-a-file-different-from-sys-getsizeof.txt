<div class="post-text" itemprop="text">
<p>I have a file that has a size of 10240 bytes. This is my script to get file size:</p>
<pre><code>fh = open(name, "r")
data = fh.read(10240)
print sys.getsizeof(data)
</code></pre>
<blockquote>
<p>Output: 10277</p>
</blockquote>
<p>I'm reading 10240 bytes from the file but when I print the size, I get 10277. How do I make sure I don't read more than 10240 bytes? I should be sending 10240 bytes to my Consumer but it looks like it's sending more. </p>
</div>
<div class="post-text" itemprop="text">
<p>To get the <em>length</em> of <code>data</code>, use <code>len(data)</code>. Assuming your file is sufficiently large enough, <code>len(data)</code> will equal 10240; it won't read more than you requested.</p>
<p><a href="https://docs.python.org/2/library/sys.html#sys.getsizeof" rel="noreferrer"><code>sys.getsizeof()</code></a> returns the total size of the Python object in memory, including any additional overhead used by the runtime. It is not generally useful in most all Python applications.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/sys.html#sys.getsizeof" rel="nofollow noreferrer">From the Python 3.6 docs:</a></p>
<blockquote>
<p>getsizeof() calls the objectâ€™s <strong>sizeof</strong> method and adds an additional garbage collector overhead if the object is managed by the garbage collector.</p>
</blockquote>
<p>So the extra size you're getting from <code>getsizeof</code> is actually the garbage collector data Python adds to the <code>bytes</code> object so it knows how to delete the data from the file when you're done with it, and any other data only the runtime needs to know about. </p>
<p>When you serialize the <code>bytes</code> object to send it to your consumer, this overhead gets thrown away by the serializer, so don't worry. If you need to know how many bytes <em>actually</em> get sent, use the <code>len()</code> function.</p>
</div>
<span class="comment-copy">Thanks Jonathon. So how can I read bytes instead of the characters?</span>
<span class="comment-copy">In Python 2, there is no difference. All "buffers" returned from things like <code>file.read()</code> are of type <code>str</code>, just like any other string.</span>
<span class="comment-copy"><code>fh = open(name, "rb")</code> will read bytes in python 2 and 3.</span>
<span class="comment-copy">@tdelaney <code>bytes is str</code> is <code>True</code> in Python 2.</span>
<span class="comment-copy">If you open for read without the "b" for binary, python will convert any <code>\r\n</code> sequences in the file to <code>\n</code>. In python3, it will also try to decode from whatever <code>sys.getdefaultencoding()</code> is. So, if its utf-8, <code>len</code> will report the number of unicode chars, not bytes.</span>
