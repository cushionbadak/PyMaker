<div class="post-text" itemprop="text">
<p>I have several <a href="http://en.wikipedia.org/wiki/Comma-separated_values" rel="noreferrer">CSV</a> files that look like this:</p>
<pre class="lang-none prettyprint-override"><code>Input
Name        Code
blackberry  1
wineberry   2
rasberry    1
blueberry   1
mulberry    2
</code></pre>
<p>I would like to add a new column to all CSV files so that it would look like this:</p>
<pre class="lang-none prettyprint-override"><code>Output
Name        Code    Berry
blackberry  1   blackberry
wineberry   2   wineberry
rasberry    1   rasberry
blueberry   1   blueberry
mulberry    2   mulberry
</code></pre>
<p>The script I have so far is this:</p>
<pre><code>import csv
with open(input.csv,'r') as csvinput:
    with open(output.csv, 'w') as csvoutput:
        writer = csv.writer(csvoutput)
        for row in csv.reader(csvinput):
            writer.writerow(row+['Berry'])
</code></pre>
<p>(Python 3.2)</p>
<p>But in the output, the script skips every line and the new column has only Berry in it:</p>
<pre class="lang-none prettyprint-override"><code>Output
Name        Code    Berry
blackberry  1   Berry

wineberry   2   Berry

rasberry    1   Berry

blueberry   1   Berry

mulberry    2   Berry
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should give you an idea of what to do:</p>
<pre><code>&gt;&gt;&gt; v = open('C:/test/test.csv')
&gt;&gt;&gt; r = csv.reader(v)
&gt;&gt;&gt; row0 = r.next()
&gt;&gt;&gt; row0.append('berry')
&gt;&gt;&gt; print row0
['Name', 'Code', 'berry']
&gt;&gt;&gt; for item in r:
...     item.append(item[0])
...     print item
...     
['blackberry', '1', 'blackberry']
['wineberry', '2', 'wineberry']
['rasberry', '1', 'rasberry']
['blueberry', '1', 'blueberry']
['mulberry', '2', 'mulberry']
&gt;&gt;&gt; 
</code></pre>
<p>Edit, note in py3k you must use <code>next(r)</code></p>
<p>Thanks for accepting the answer. Here you have a bonus (your working script):</p>
<pre><code>import csv

with open('C:/test/test.csv','r') as csvinput:
    with open('C:/test/output.csv', 'w') as csvoutput:
        writer = csv.writer(csvoutput, lineterminator='\n')
        reader = csv.reader(csvinput)

        all = []
        row = next(reader)
        row.append('Berry')
        all.append(row)

        for row in reader:
            row.append(row[0])
            all.append(row)

        writer.writerows(all)
</code></pre>
<p>Please note </p>
<ol>
<li>the <code>lineterminator</code> parameter in <code>csv.writer</code>. By default it is
set to <code>'\r\n'</code> and this is why you have double spacing.</li>
<li>the use of a list to append all the lines and to write them in
one shot with <code>writerows</code>. If your file is very, very big this
probably is not a good idea (RAM) but for normal files I think it is
faster because there is less I/O.</li>
<li><p>As indicated in the comments to this post, note that instead of
nesting the two <code>with</code> statements, you can do it in the same line:</p>
<p>with open('C:/test/test.csv','r') as csvinput, open('C:/test/output.csv', 'w') as csvoutput:</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>I'm surprised no one suggested Pandas. Although using a set of dependencies like Pandas might seem more heavy-handed than is necessary for such an easy task, it produces a very short script and Pandas is a great library for doing all sorts of CSV (and really all data types) data manipulation. Can't argue with 4 lines of code:</p>
<pre><code>import pandas as pd
csv_input = pd.read_csv('input.csv')
csv_input['Berries'] = csv_input['Name']
csv_input.to_csv('output.csv', index=False)
</code></pre>
<p>Check out <a href="http://pandas.pydata.org/" rel="noreferrer">Pandas Website</a> for more information!</p>
<p>Contents of <code>output.csv</code>:</p>
<pre><code>Name,Code,Berries
blackberry,1,blackberry
wineberry,2,wineberry
rasberry,1,rasberry
blueberry,1,blueberry
mulberry,2,mulberry
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import csv
with open('input.csv','r') as csvinput:
    with open('output.csv', 'w') as csvoutput:
        writer = csv.writer(csvoutput)

        for row in csv.reader(csvinput):
            if row[0] == "Name":
                writer.writerow(row+["Berry"])
            else:
                writer.writerow(row+[row[0]])
</code></pre>
<p>Maybe something like that is what you intended?</p>
<p>Also, csv stands for comma separated values.  So, you kind of need commas to separate your values like this I think:</p>
<pre><code>Name,Code
blackberry,1
wineberry,2
rasberry,1
blueberry,1
mulberry,2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I used pandas and it worked well...
While I was using it, I had to open a file and add some random columns to it and then save back to same file only.</p>
<p>This code adds multiple column entries, you may edit as much you need.</p>
<pre><code>import pandas as pd

csv_input = pd.read_csv('testcase.csv')         #reading my csv file
csv_input['Phone1'] = csv_input['Name']         #this would also copy the cell value 
csv_input['Phone2'] = csv_input['Name']
csv_input['Phone3'] = csv_input['Name']
csv_input['Phone4'] = csv_input['Name']
csv_input['Phone5'] = csv_input['Name']
csv_input['Country'] = csv_input['Name']
csv_input['Website'] = csv_input['Name']
csv_input.to_csv('testcase.csv', index=False)   #this writes back to your file
</code></pre>
<p>If you want that cell value doesn't gets copy, so first of all create a empty Column in your csv file manually, like you named it as <strong><em>Hours</em></strong>
then,  Now for this you can add this line in above code,</p>
<pre><code>csv_input['New Value'] = csv_input['Hours']
</code></pre>
<p>or simply we can, without adding the manual column, we can</p>
<pre><code>csv_input['New Value'] = ''    #simple and easy
</code></pre>
<p><strong>I Hope it helps.</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>I don't see where you're adding the new column, but try this:</p>
<pre><code>    import csv
    i = 0
    Berry = open("newcolumn.csv","r").readlines()
    with open(input.csv,'r') as csvinput:
        with open(output.csv, 'w') as csvoutput:
            writer = csv.writer(csvoutput)
            for row in csv.reader(csvinput):
                writer.writerow(row+","+Berry[i])
                i++
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This code will suffice your request and I have tested on the sample code. </p>
<pre><code>import csv

with open(in_path, 'r') as f_in, open(out_path, 'w') as f_out:
    csv_reader = csv.reader(f_in, delimiter=';')
    writer = csv.writer(f_out)

    for row in csv_reader:
    writer.writerow(row + [row[0]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes Its a old question but it might help some</p>
<pre><code>import csv
import uuid

# read and write csv files
with open('in_file','r') as r_csvfile:
    with open('out_file','w',newline='') as w_csvfile:

        dict_reader = csv.DictReader(r_csvfile,delimiter='|')
        #add new column with existing
        fieldnames = dict_reader.fieldnames + ['ADDITIONAL_COLUMN']
        writer_csv = csv.DictWriter(w_csvfile,fieldnames,delimiter='|')
        writer_csv.writeheader()


        for row in dict_reader:
            row['ADDITIONAL_COLUMN'] = str(uuid.uuid4().int &gt;&gt; 64) [0:6]
            writer_csv.writerow(row)
</code></pre>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/11063707/copy-one-column-to-another-but-with-different-header">Copy one column to another but with different header</a></span>
<span class="comment-copy">is it possible you only have 'Berry' in your last column because you are only writing 'Berry' to the file? (row+['Berry'])  What did you expect to write?</span>
<span class="comment-copy">@Dhara: I would like to have Berry as a header and Name column value as row value for the Berry. See above.</span>
<span class="comment-copy">you also use pandas data frame as  suggested in this <a href="https://stackoverflow.com/questions/33139513/python-pandas-insert-column">page</a></span>
<span class="comment-copy">thanks for the note. I tried and it gives me attribute error: '_csv.reader' object has no attribute 'next'. Do you have any idea?</span>
<span class="comment-copy">I see you are in py3k. then you must use next(r) instead of r.next()</span>
<span class="comment-copy">it works now. Thank you so much for your help!!</span>
<span class="comment-copy">ï¼ joaquin: OMG. Thanks for the bonus!!</span>
<span class="comment-copy">Note: instead of nesting <code>with</code> statements, you can do it at the same line separating them with a comma e.g.: <code>with open(input_filename) as input_file, open(output_filename, 'w') as output_file</code></span>
<span class="comment-copy">Thanks @Jough Dempsey!</span>
<span class="comment-copy">wow. amazing suggestion!</span>
<span class="comment-copy">does this work ?</span>
<span class="comment-copy">I fixed it, so it does, but his input.csv is wrong too.</span>
<span class="comment-copy">@jgritty: thanks for your help.</span>
<span class="comment-copy">Create a new question on stack overflow.</span>
<span class="comment-copy">again, does this work ?</span>
