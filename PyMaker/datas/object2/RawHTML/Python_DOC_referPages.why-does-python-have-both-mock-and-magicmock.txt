<div class="post-text" itemprop="text">
<p>My understanding is that <em>MagicMock</em> is a superset of <em>Mock</em> that automatically does "magic methods" thus seamlessly providing support for lists, iterations and so on... Then what is the reason for plain <em>Mock</em> existing? Isn't that just a stripped down version of <em>MagicMock</em> that can be practically ignored? Does <em>Mock</em> class know any tricks that are not available in <em>MagicMock</em>?</p>
</div>
<div class="post-text" itemprop="text">
<h3>What is the reason for plain <em>Mock</em> existing?</h3>
<p>Mock's author, Michael Foord, addressed <a href="http://pyvideo.org/video/392/pycon-2011--testing-with-mock">a very similar question at Pycon 2011 (31:00)</a>:</p>
<blockquote>
<p><strong>Q:</strong> Why was MagicMock made a separate thing rather than just folding the ability into the default mock object?</p>
<p><strong>A:</strong> One reasonable answer is that the way MagicMock works is that it preconfigures all these protocol methods by creating new Mocks and
  setting them, so if every new mock created a bunch of new mocks and
  set those as protocol methods and then all of those protocol methods
  created a bunch more mocks and set them on their protocol methods,
  you've got infinite recursion...</p>
<p>What if you want accessing your mock as a container object to be an
  error -- you don't want that to work? If every mock has automatically
  got every protocol method, then it becomes much more difficult to do
  that. And also, MagicMock does some of this preconfiguring for you,
  setting return values that might not be appropriate, so I thought it
  would be better to have this convenience one that has everything
  preconfigured and available for you, but you can also take a ordinary
  mock object and just configure the magic methods you want to exist...</p>
<p>The simple answer is: just use MagicMock everywhere if that's the
  behavior you want.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>With Mock you <em>can</em> mock magic methods but you have to define them. MagicMock has <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.MagicMock" rel="nofollow noreferrer">"default implementations of most of the magic methods."</a>.</p>
<p>If you don't need to test any magic methods, Mock is adequate and doesn't bring a lot of extraneous things into your tests. If you need to test a lot of magic methods MagicMock will save you some time.</p>
</div>
<div class="post-text" itemprop="text">
<p>To begin with, <code>MagicMock</code> is a subclass of <code>Mock</code>.</p>
<pre><code>class MagicMock(MagicMixin, Mock)
</code></pre>
<p>As a result, MagicMock provides everything that Mock provides and more.  Rather than thinking of Mock as being a stripped down version of MagicMock, think of MagicMock as an extended version of Mock.  This should address your questions about why Mock exists and what does Mock provide on top of MagicMock.</p>
<p>Secondly, MagicMock provides default implementations of many/most magic methods, whereas Mock doesn't.  See <a href="http://www.voidspace.org.uk/python/mock/magicmock.html#mock.MagicMock" rel="noreferrer">here</a> for more information on the magic methods provided.</p>
<p>Some examples of provided magic methods:</p>
<pre><code>&gt;&gt;&gt; int(Mock())
TypeError: int() argument must be a string or a number, not 'Mock'
&gt;&gt;&gt; int(MagicMock())
1
&gt;&gt;&gt; len(Mock())
TypeError: object of type 'Mock' has no len()
&gt;&gt;&gt; len(MagicMock())
0
</code></pre>
<p>And these which may not be as intuitive (at least not intuitive to me):</p>
<pre><code>&gt;&gt;&gt; with MagicMock():
...     print 'hello world'
...
hello world
&gt;&gt;&gt; MagicMock()[1]
&lt;MagicMock name='mock.__getitem__()' id='4385349968'&gt;
</code></pre>
<p>You can "see" the methods added to MagicMock as those methods are invoked for the first time:</p>
<pre><code>&gt;&gt;&gt; magic1 = MagicMock()
&gt;&gt;&gt; dir(magic1)
['assert_any_call', 'assert_called_once_with', ...]
&gt;&gt;&gt; int(magic1)
1
&gt;&gt;&gt; dir(magic1)
['__int__', 'assert_any_call', 'assert_called_once_with', ...]
&gt;&gt;&gt; len(magic1)
0
&gt;&gt;&gt; dir(magic1)
['__int__', '__len__', 'assert_any_call', 'assert_called_once_with', ...]
</code></pre>
<p>So, why not use MagicMock all the time?</p>
<p>The question back to you is: Are you okay with the default magic method implementations?  For example, is it okay for <code>mocked_object[1]</code> to not error?  Are you okay with any unintended consequences due to the magic method implementations being already there?</p>
<p>If the answer to these questions is a yes, then go ahead and use MagicMock.  Otherwise, stick to Mock.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is what <a href="http://docs.python.org/dev/library/unittest.mock-examples.html" rel="noreferrer">python's official documentation</a>
says:</p>
<blockquote>
<p>In most of these examples the Mock and MagicMock classes are interchangeable. As the MagicMock is the more capable class it makes a sensible one to use by default.</p>
</blockquote>
</div>
<span class="comment-copy">I think a better answer is: Use MagicMock if you know what you're doing, otherwise use Mock.</span>
<span class="comment-copy">Sure enough I've already read the documentation. That doesn't answer my question - why bother with plain Mock if MagicMock does exactly the same plus much more? I don't see any extraneous things things in my tests - just use the different name and that's it. So where is the catch?</span>
<span class="comment-copy">Tests should be minimal and mock objects should be minimally functional so that you are sure exactly what you're testing. If you use MagicMock just because is does more but you're not explicitly testing all that "more" you run the risk of a test failing because of a default MagicMock behavior. This failure might reflect something about MagicMock's defaults more than the the thing it's supposed to mock. Even worse, you run the risk of a test <i>succeeding</i> when it should have failed. The risk is small but if this happens it will waste a lot of your time.</span>
<span class="comment-copy">I think of it like using plain JS vs Jquery. Sure, you <i>could</i> use Jquery to do all your JS, but in some cases, you just want to use the very minimum tool required to get the job done. I find those cases are usually either the extremely simple or the extremely complex.</span>
