<div class="post-text" itemprop="text">
<p>I used <code>matplotlib.pyplot.contour</code> to draw a line, but the result is strange.<br/>
My python code:</p>
<pre><code>import numpy as np
from matplotlib import pyplot as plt

N = 1000

E = np.linspace(-5,0,N)
V = np.linspace(0, 70,N)
E, V = np.meshgrid(E, V)

L = np.sqrt(-E)
R = -np.sqrt(E+V)/np.tan(np.sqrt(E+V))

plt.contour(V, E,(L-R),levels=[0])
plt.show()
</code></pre>
<p>The result is:<br/>
<img alt="enter image description here" src="https://i.stack.imgur.com/nDsVI.png"/></p>
<p>But when I use Mathematica, the result is different.<br/>
Mathematica code is:  </p>
<pre><code>ContourPlot[Sqrt[-en] == -Sqrt[en + V]/Tan[Sqrt[en + V]], {V, 0, 70}, {en, -5, 0}]
</code></pre>
<p>The result is:</p>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/NnoTE.jpg"/></p>
<p>The result that I want is Mathematica's result.</p>
<p>Why does <code>matplotlib.pyplot.contour</code> give the wrong result? I am very confused!</p>
<p>It would be very appreciate if you can give me some idea! Thank you very much!</p>
</div>
<div class="post-text" itemprop="text">
<p>The result given by <code>matplotlib.pyplot.contour</code> is numerically correct, but mathematically wrong.</p>
<p>Check what happens if you simply plot the <code>tan(x)</code>:</p>
<pre><code>import numpy as np
from matplotlib import pyplot as plt

x = np.linspace(0,2*np.pi,1000)
y = np.tan(x)

plt.plot(x,y)
plt.show()
</code></pre>
<p><a href="https://i.stack.imgur.com/LKvMG.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/LKvMG.png"/></a></p>
<p>You will get a line at the poles. This is because subsequent points are connected.</p>
<p>You can circumvent this by using <code>np.inf</code> for points larger than a certain number. E.g. adding</p>
<pre><code>y[np.abs(y)&gt; 200] = np.inf
</code></pre>
<p>would result in </p>
<p><a href="https://i.stack.imgur.com/SVFWy.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/SVFWy.png"/></a></p>
<p>The same approach can be used for the contour.</p>
<pre><code>import numpy as np
from matplotlib import pyplot as plt

N = 1000

x = np.linspace(0, 70,N)
y = np.linspace(-5,0,N)
X,Y = np.meshgrid(x, y)

F = np.sqrt(-Y) + np.sqrt(Y+X)/np.tan(np.sqrt(Y+X))
F[np.abs(F) &gt; 200] = np.inf

plt.contour(X, Y, F, levels=[0])
plt.show()
</code></pre>
<p><a href="https://i.stack.imgur.com/tHaB7.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/tHaB7.png"/></a></p>
</div>
<span class="comment-copy">Have you tried not using the optional parameters for contour? Those could be causing these problems</span>
