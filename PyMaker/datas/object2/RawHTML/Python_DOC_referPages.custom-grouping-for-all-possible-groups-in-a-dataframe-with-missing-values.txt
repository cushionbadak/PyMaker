<div class="post-text" itemprop="text">
<p>I have a dataframe which represents a set of products. I need to find all duplicate products within these products. If products have same <code>product_type</code>,<code>color</code> and <code>size</code> -&gt; they are duplicates. This would be an easy <code>df.groupby('product_type','color','size')</code> line if I did not have a problem: some values are missing. Now I have to find all possible groups of products that might be duplicates between themselves. <strong>This means that some elements can appear in multiple groups.</strong></p>
<p>Let me illustrate:</p>
<pre><code>import pandas as pd


def main():
    df = pd.DataFrame({'product_id': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
                       'product_type': ['shirt', 'shirt', 'shirt', 'shirt', 'shirt', 'hat', 'hat', 'hat', 'hat', 'hat', 'hat', ],
                       'color': [None, None, None, 'red', 'blue', None, 'blue', 'blue', 'blue', 'red', 'red', ],
                       'size': [None, 's', 'xl', None, None, 's', None, 's', 'xl', None, 'xl', ],
                       })
    print df   

if __name__ == '__main__':
    main()
</code></pre>
<p>for this dataframe:</p>
<p><a href="https://i.stack.imgur.com/eNU4J.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/eNU4J.png"/></a></p>
<p>I need this result - list of possibly duplicate products for each possible group (take only the biggest super groups):</p>
<p><a href="https://i.stack.imgur.com/XU2D9.png" rel="nofollow noreferrer"><img alt="![enter image description here" src="https://i.stack.imgur.com/XU2D9.png"/></a></p>
<p>So for example, lets take "shirt" with <code>id=1</code>
this product does not have color or size so he can appear in a possible "duplicates group" together with shirt #2 (which has size "s" but does not have color) and shirt #4 (which has color "red" but does not have size). So these three shirts (1,2,4) are possibly duplicates that same color "red" and size "s".</p>
<p>I tried to implement it by looping through all possible combinations of missing values but it feels wrong and complex.</p>
<p>Is there a way to get the desired result?</p>
</div>
<div class="post-text" itemprop="text">
<p>This problem of finding all combinations is likely of exponential complexity; </p>
<pre><code>from itertools import product

def get_possible_combinations(df, columns=['size',  'product_type', 'color']):
    col_vals = []
    for col in columns:
        col_vals.append(df.loc[~df.loc[:, col].isnull(), col].unique().tolist())
    for comb in product(*col_vals):
        df_ = df.copy()
        for val, col in zip(comb, columns):
            df_.loc[:, col].fillna(val, inplace=True)
        yield df_.groupby(columns)
</code></pre>
<p>So, we can apply this function to the <code>df</code>:</p>
<pre><code>resulting_groups = []
for g in get_possible_combinations(df):
    sorted_groups = [ind.tolist() for a, ind in g.groups.items()]
    resulting_groups.append(sorted_groups)

resulting_groups = sum(resulting_groups, [])
sorted(list(set(map(tuple, resulting_groups))), key=len, reverse=True)
</code></pre>
<blockquote>
<p>[(5, 6, 7),  (0, 2, 3),  (0, 1, 3),  (0, 1, 4),  (0, 2, 4),  (5, 9), 
  (6, 7),  (6, 8),  (5, 7),  (9, 10),  (1,),  (2,),  (8,),  (3,),  (9,),
  (4,),  (10,),  (5,),  (7,)]</p>
</blockquote>
<p>This almost the same what you are looking for. </p>
</div>
<span class="comment-copy">this does not provide the result I demonstrated</span>
<span class="comment-copy">I significantly restructure my answer; it isn't elegant, but it works...</span>
