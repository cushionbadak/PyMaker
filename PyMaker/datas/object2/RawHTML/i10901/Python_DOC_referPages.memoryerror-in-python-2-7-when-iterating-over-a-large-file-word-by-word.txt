<div class="post-text" itemprop="text">
<p>I need to read a large file multiple times and need access to the total number of words in the file. I've implemented a wrapper class that contains an iterator, a copy of the iterator (to reset the iterator) and its length:</p>
<pre><code>Class DataWrapper(object):
  def __init__(self, data):
    self.data, self.copy = itertools.tee(data)
    self.length = None

  def __iter__(self):
    return self.data

  def next(self):
    return self.data.next()

  def reset(self):
    self.data, self.copy = itertools.tee(self.copy)

  def __len__(self):
    if self.length is None:
      self.data, dcopy = itertools.tee(self.data)
      self.length = sum(1 for x in dcopy)
    return self.length
</code></pre>
<p>I then create the actual file reading iterator and start iterating:</p>
<pre><code>def my_iter(fname):
  with open(fname, 'r') as f:
    for line in f:
      for word in line.split():
        yield word

dw = DataWrapper(my_iter("large_file.txt"))
for w in dw:
    pass
</code></pre>
<p>For some reason though, I get a <code>MemoryError</code> while iterating:</p>
<p>File "my_script.py", line 164, in my_iter
   for line in f:
MemoryError</p>
<p>Since this does not happen without the wrapper, I assume <a href="https://docs.python.org/3/library/itertools.html#itertools.tee" rel="nofollow"><code>itertools.tee</code></a> is to blame. But is there another way to reset the iterator?</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem here is that if the data is only read once, and must be iterated multiple times, it has to been kept in memory. If the file is large enough to exhaust the memory you will end with a MemoryError. Here the <code>itertool.tee</code> is indeed the culprit, even if IMHO it is not to blame for it because it has no other way to do ;-)</p>
<p>If you cannot keep the data in memory, the only foolproof way would be to open a new file handler for each iterator - provided the OS and file system allow it. That way the memory will only contain one buffer and one line per iterator instead of the whole file.</p>
</div>
<span class="comment-copy">Please <a href="https://stackoverflow.com/posts/38474476/edit">edit</a> your question and include the details of the error. On which line does it happen?</span>
<span class="comment-copy">I agree -- this is probably the work of <code>itertools.tee</code>.  As far as I an come up with, there is no way to reset this iterator without keeping a cache of the data.  However, if you abstract around the file object rather than the iterator, you can <code>.seek</code> back to particular file locations ...</span>
<span class="comment-copy">From <a href="https://docs.python.org/3.4/library/itertools.html#itertools.tee" rel="nofollow noreferrer">the docs</a>: "This itertool may require significant auxiliary storage (depending on how much temporary data needs to be stored). In general, if one iterator uses most or all of the data before another iterator starts, it is faster to use list() instead of tee()."</span>
<span class="comment-copy">there is also <a href="https://docs.python.org/2/library/mmap.html" rel="nofollow noreferrer"><code>mmap</code></a> which may or may not be helpful ...</span>
<span class="comment-copy">@niefpaarschoenen why not just open a new file handle and create a new iterator?</span>
