<div class="post-text" itemprop="text">
<p>I'm trying to figure out how this code works. How is <code>i</code> accessible outside the for loop?</p>
<pre><code># Palindrome of string
str=raw_input("Enter the string\n")
ln=len(str)
for i in range(ln/2) :
    if(str[ln-i-1]!=str[i]):
        break
if(i==(ln/2)-1):         ## How is i accessible outside the for loop ? 
    print "Palindrome"
else:
    print "Not Palindrome"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is part of Python. Variables declared inside for loops (that includes loop counters) won't decay until they fully leave scope.</p>
<p>Take a look at this question:</p>
<p><a href="https://stackoverflow.com/questions/3611760/scoping-in-python-for-loops">Scoping In Python For Loops</a></p>
<p>From the answers:</p>
<blockquote>
<pre><code>for foo in xrange(10):
    bar = 2
print(foo, bar)
</code></pre>
<p>The above will print (9,2).</p>
</blockquote>
</div>
<span class="comment-copy">for loops do not have their own namespace. <a href="http://stackoverflow.com/questions/291978/short-description-of-python-scoping-rules">Short Description of Python Scoping Rules</a></span>
<span class="comment-copy"><code>i</code> is accessible because loop variables stay in the current scope with their last value unless you assign something else to the name.</span>
<span class="comment-copy">Why? How or what are you implementing this for? It is overly complex for what it does. <code>mystr == mystr[::-1]</code></span>
<span class="comment-copy">Good job actually asking about the specific aspect of the code you don't understand! That makes your question way more answerable.</span>
<span class="comment-copy">Side note: do not use <code>str</code> as a variable name, as you are shadowing the built-in <a href="https://docs.python.org/3/library/stdtypes.html#str" rel="nofollow noreferrer">str</a></span>
