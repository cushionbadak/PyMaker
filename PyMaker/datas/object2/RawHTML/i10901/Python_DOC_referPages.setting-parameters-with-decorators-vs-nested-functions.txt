<div class="post-text" itemprop="text">
<p>I need to call a multi-parameter function many times while all but one parameter is fixed. I was thinking of using decorators:</p>
<pre><code># V1 - with @decorator
def dec_adder(num):
    def wrap(fun):
        def wrapped_fun(n1):
            return fun(n1, second_num=num)
        return wrapped_fun
    return wrap

@dec_adder(2)
def adder(first_num, second_num):
    return first_num + second_num

print adder(5)
&gt;&gt;&gt; 7
</code></pre>
<p>But this seems confusing since it appears to be calling a 2-parameter function, <code>adder</code> with only one argument.</p>
<p>Another approach is to use a nested function definition that uses local variables from the parent function:</p>
<pre><code># V2 - without @decorator
def add_wrapper(num):
    def wrapped_adder(num_2):
        return num + num_2
    return wrapped_adder

adder = add_wrapper(2)
print adder(5)
&gt;&gt;&gt; 7
</code></pre>
<p>But I hesitate to use this approach since in my actual implementation the wrapped function is very complex. My instinct is that it should have a stand-alone definition.</p>
<p>Forgive me if this ventures into the realm of opinion, but is either approach considered better design and/or more Pythonic? Is there some other approach I should consider?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow"><code>functools.partial</code></a> should work nicely in this case:</p>
<pre><code>from functools import partial

def adder(n1, n2):
    return n1 + n2

adder_2 = partial(adder, 2)

adder_2(5)
</code></pre>
<p>Its' docstring:</p>
<blockquote>
<p>partial(func, *args, **keywords) - new function with partial application 
   of the given arguments and keywords.</p>
</blockquote>
<p>-- so, you can set keyword arguments as well.</p>
<p>PS</p>
<p>Sadly, the built-in <code>sum</code> does not suit this case: it sums over an iterable (in fact, <code>sum(iterable[, start]) -&gt; value</code>), so <code>partial(sum, 2)</code> does not work.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another possible solution - you can use functools and parametrized decorator:</p>
<pre><code>from functools import wraps

def decorator(num):
    def decor(f):
        @wraps(f)
        def wrapper(n,*args,**kwargs):
            return f(n+num,*args,**kwargs)
        return wrapper
    return decor


@decorator(num=2) # number to add to the parameter
def test(n,*args,**kwargs):
    print n


test(10)  # base amount - prints 12
</code></pre>
</div>
<span class="comment-copy">This is nice and clean. Thank you.</span>
