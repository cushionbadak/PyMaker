<div class="post-text" itemprop="text">
<p>I've seen somewhere that there was a way to change some object functions in python</p>
<pre><code>def decorable(cls):
    cls.__lshift__ = lambda objet, fonction: fonction(objet)
    return cls
</code></pre>
<p>I wondered if you could do things like in ruby, with the :</p>
<pre><code>number.times
</code></pre>
<p>Can we actually change some predefined classes by applying the function above to the class int for example? If so, any ideas how I could manage to do it? And could you link me the doc of python showing every function (like <strong>lshift</strong>) that can be changed?</p>
</div>
<div class="post-text" itemprop="text">
<p>Ordinarily not - 
as a rule, Python types defined in native code -in CPython can't be monkey patched to have new methods. Although there are means to do that with direct memory access and changing the C object structures, using CPython - that is not considered "clever", "beautiful", much less usable. (check <a href="https://github.com/clarete/forbiddenfruit" rel="nofollow">https://github.com/clarete/forbiddenfruit</a>)</p>
<p>That said, for class hierarchies you define on your own packages, that pretty much works - any magic "dunder" method that is set changes the behavior for all objects of that class, in all the process. </p>
<p>So, you can't do that to Python's "int" - but you can have a </p>
<pre><code>class MyInt(int):
    pass

a = MyInt(10)

MyInt.__rshift__ = lambda self, other: MyInt(str(self) + str(other))

print(a &gt;&gt; 20)
</code></pre>
<p>Will result in <code>1020</code> being printed.</p>
<p>The Python document thta tells about all the magic methods taht are used by the language is the Data Model:</p>
<p><a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow">https://docs.python.org/3/reference/datamodel.html</a></p>
</div>
<span class="comment-copy">EVERY function in python can be changed. (There are a few exceptions with built-in classes and functions but other than that the rule holds true)</span>
<span class="comment-copy">um... when would you ever want to write <code>x &gt;&gt; func</code> instead of <code>func(x)</code>? And have you tried it? you can add or remove arbitrary attributes on the class any time after it's construction (or variables in the class block before it's creation)</span>
