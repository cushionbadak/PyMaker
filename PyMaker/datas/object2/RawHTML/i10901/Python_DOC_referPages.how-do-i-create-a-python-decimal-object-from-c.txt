<div class="post-text" itemprop="text">
<p>...or any Python object that exists in an importable library. I have found PyDateTime_* functions in the <a href="https://docs.python.org/3/c-api/datetime.html" rel="nofollow">documentation</a> for creating objects from the datetime module, but I can't find anything to do with the python decimal module. Is this possible?</p>
<p>Looking for a Boost.Python way if there is one, but the native API's will suffice if not.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Boost.Python that would be something like</p>
<pre><code>bp::object decimal = bp::import("decimal").attr("Decimal");
bp::object decimal_obj = decimal(1, 4);
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Should be straightforward enough.  Although untested, something like the following should work:</p>
<pre><code>PyObject * decimal_mod = PyImport_ImportModule("decimal");
assert(decimal_mod);
PyObject * decimal_ctor = PyObject_GetAttrString(decimal_mod, "Decimal");
assert(decimal_ctor);
PyObject * four = PyObject_CallFunction(decimal_ctor, "i", 4);
assert(four);
</code></pre>
<p>Do keep in mind that all three <code>PyObject *</code> references here should be decreffed (using <code>Py_DECREF()</code>) once you are done with them.  Also, I use <code>assert()</code> here for pedagogical purposes.  Actual code should have real error handling.</p>
<p>Also, I use the raw Python/C API here.  I've never used boost-python, so I don't know what differences exist, if any.</p>
</div>
<span class="comment-copy">yep this worked. thanks!</span>
<span class="comment-copy">i've accepted the other answer as i've tested it and it works (although i tagged boost-python in my question i didn't actually state it so i'll edit my question now). thanks for answering though, i'm sure this will help anybody who finds this page that doesn't want the boost dependency.</span>
