<div class="post-text" itemprop="text">
<p>Is there a means in IPython to <code>import</code> the contents of a notebook cell as if it were a separate module? Or alternatively get the contents of a cell to have its own namespace.</p>
</div>
<div class="post-text" itemprop="text">
<p>@Mike, as mentioned in the comment you can follow the well documented steps in the following link to import a Jupyter Notebook as a module:</p>
<p><a href="http://jupyter-notebook.readthedocs.io/en/latest/examples/Notebook/Importing%20Notebooks.html" rel="nofollow">Importing Jupyter Notebooks as Modules</a></p>
<p>In the link they will mention the work done in Python to provide users with <a href="https://www.python.org/dev/peps/pep-0302/#id21" rel="nofollow">hooks</a> (now superseded with <a href="https://docs.python.org/3/library/importlib.html#module-importlib" rel="nofollow">importlib</a> and <a href="https://docs.python.org/3/reference/import.html" rel="nofollow">import system</a>) to provide better customization of the import mechanism.</p>
<p>As so the recipe they propose is the following:</p>
<blockquote>
<ul>
<li>load the notebook document into memory</li>
<li>create an empty Module</li>
<li>execute every cell in the Module namespace</li>
</ul>
</blockquote>
<p>, and they offer their own implementation for the <a href="http://jupyter-notebook.readthedocs.io/en/latest/examples/Notebook/Importing%20Notebooks.html#Notebook-Loader" rel="nofollow">Notebook Loader</a> (unnecessary if the code is all pure python):</p>
<pre><code>class NotebookLoader(object):
    """Module Loader for Jupyter Notebooks"""
    def __init__(self, path=None):
        self.shell = InteractiveShell.instance()
        self.path = path

    def load_module(self, fullname):
        """import a notebook as a module"""
        path = find_notebook(fullname, self.path)

        print ("importing Jupyter notebook from %s" % path)

        # load the notebook object
        with io.open(path, 'r', encoding='utf-8') as f:
            nb = read(f, 4)


        # create the module and add it to sys.modules
        # if name in sys.modules:
        #    return sys.modules[name]
        mod = types.ModuleType(fullname)
        mod.__file__ = path
        mod.__loader__ = self
        mod.__dict__['get_ipython'] = get_ipython
        sys.modules[fullname] = mod

        # extra work to ensure that magics that would affect the user_ns
        # actually affect the notebook module's ns
        save_user_ns = self.shell.user_ns
        self.shell.user_ns = mod.__dict__

        try:
          for cell in nb.cells:
            if cell.cell_type == 'code':
                # transform the input to executable Python
                code = self.shell.input_transformer_manager.transform_cell(cell.source)
                # run the code in themodule
                exec(code, mod.__dict__)
        finally:
            self.shell.user_ns = save_user_ns
        return mod
</code></pre>
<p>Also here is the implementation for the <a href="http://jupyter-notebook.readthedocs.io/en/latest/examples/Notebook/Importing%20Notebooks.html#The-Module-Finder" rel="nofollow">Notebook Finder</a>:</p>
<pre><code>class NotebookFinder(object):
    """Module finder that locates Jupyter Notebooks"""
    def __init__(self):
        self.loaders = {}

    def find_module(self, fullname, path=None):
        nb_path = find_notebook(fullname, path)
        if not nb_path:
            return

        key = path
        if path:
            # lists aren't hashable
            key = os.path.sep.join(path)

        if key not in self.loaders:
            self.loaders[key] = NotebookLoader(path)
        return self.loaders[key] 
</code></pre>
<p>And the final step being the <a href="http://jupyter-notebook.readthedocs.io/en/latest/examples/Notebook/Importing%20Notebooks.html#Register-the-hook" rel="nofollow">registration</a> of the new module:</p>
<pre><code>sys.meta_path.append(NotebookFinder())
</code></pre>
<p>All of this is, however, a direct quote from the first link given in this answer. The document is well built and provides answers for other stuff such as <a href="http://jupyter-notebook.readthedocs.io/en/latest/examples/Notebook/Importing%20Notebooks.html#Aside:-displaying-notebooks" rel="nofollow">displaying notebooks</a> or dealing with <a href="http://jupyter-notebook.readthedocs.io/en/latest/examples/Notebook/Importing%20Notebooks.html#Notebooks-in-packages" rel="nofollow">packages</a>.</p>
</div>
<span class="comment-copy">Yes, check <a href="http://jupyter-notebook.readthedocs.io/en/latest/examples/Notebook/Importing%20Notebooks.html" rel="nofollow noreferrer">Importing Jupyter Notebooks as Modules</a></span>
<span class="comment-copy">@armatita You should add this as an answer :)</span>
<span class="comment-copy">@ChristianTernus Done. I put it in a comment because I actually never tried it before (I'm not a Jupyter user) but the document seems very complete. As so I wrote a more complete (meaning quoted stuff from the site) answer. Thanks.</span>
