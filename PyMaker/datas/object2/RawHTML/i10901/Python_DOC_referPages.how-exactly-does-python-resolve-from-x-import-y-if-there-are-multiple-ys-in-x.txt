<div class="post-text" itemprop="text">
<p>I have a package X which contains two different things named Y</p>
<p>One is a module:</p>
<pre><code># X/Y.py
print 'hello'
</code></pre>
<p>The other is a variable:</p>
<pre><code># X/__init__.py
Y = 'world'
</code></pre>
<p>If I execute <code>from X import Y</code> which Y do I get and <em>why</em>? What determines the order and shadowing rules for import statements?</p>
<p>Lastly, is there anything I might do accidentally that would change the answer?</p>
<p>Basically I got a bug report that indicates on a user's machine this code results in the opposite Y importing from what I get on my machine. I don't have access to the user's machine, so I am trying to figure out what happened.</p>
<p>I am wondering if there are clues in this previous question:
<a href="https://stackoverflow.com/questions/37317153/python-from-x-import-y-changes-previous-import-result">python: from x import y changes previous import result</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Modules in packages, once imported, are also set as an attribute on the parent module object. The <code>from module import name</code> syntax, however, will <em>first</em> look at the attributes of the imported module object (the globals of <code>X</code>) to resolve <code>name</code>.</p>
<p>So, the answer is that it depends. If you have not imported the <code>X.Y</code> module yet, then you'll end up with <code>Y</code> bound to <code>'world'</code>. If you have imported <code>X.Y</code> (with <code>import X.Y</code> or <code>from X.Y import some_name</code>), then <code>Y</code> is bound to the <code>X.Y</code> submodule. The latter is a side-effect of <code>Y</code> in <code>X</code> having been set as a global.</p>
<p>Demo:</p>
<pre><code>$ mkdir foo
$ cat &lt;&lt; EOF &gt; foo/__init__.py
&gt; bar = 'from the foo package'
&gt; EOF
$ cat &lt;&lt; EOF &gt; foo/bar.py
&gt; baz = 'from the foo.bar module'
&gt; EOF
$ bin/python -c 'from foo import bar; print(bar)'
from the foo package
$ bin/python -c 'import foo.bar; from foo import bar; print(bar); print(bar.baz)'
&lt;module 'foo.bar' from 'foo/bar.py'&gt;
from the foo.bar module
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A name in the module will take precedence.  From <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow">the Python tutorial</a>.</p>
<blockquote>
<p>Note that when using from package import item, the item can be either a submodule (or subpackage) of the package, or some other name defined in the package, like a function, class or variable. The import statement first tests whether the item is defined in the package; if not, it assumes it is a module and attempts to load it.</p>
</blockquote>
<p>The same information is given in <a href="https://docs.python.org/3/reference/simple_stmts.html#the-import-statement" rel="nofollow">the language reference</a>.</p>
<p>However, if any code imports the submodule (by other, more explicit means, such as <code>import X.Y</code>, where <code>Y</code> can only refer to a module), then the submodule will also exist as a name in the package.  So in that case it will depend on the order of the code: once you import the module, it will overwrite the variable of the same name.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python looks first on the current working directory for any file Y.py under X folder, then it looks for the installed libraries for X package to import Y file. 
If there is a Y variable in the package X then it is imported and then replaced by the content on file Y.py of that package</p>
</div>
