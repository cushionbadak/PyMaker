<div class="post-text" itemprop="text">
<p>I've been trying to catch an exception that should be caused by clicking a hotkey, unfortunately adding a hotkey requires to add a function that should be called when said hotkey is pressed.</p>
<p>Now I know that exceptions will only be caught if they're raised inside the <code>try-catch</code> block, but this doesn't seem to work.</p>
<pre><code>class resetException(Exception): pass

try:
    def resetRun(event):
        raise resetException

    Env.addHotkey(resetKey, 0, resetRun)

    while True:
        [...]
except resetException:
    popup("reset")
</code></pre>
<p>The exception is raised, but it seems like it isn't raised inside the try-block? If I just raise the <code>resetException</code> without the function, this works perfectly fine.</p>
<pre><code>Exception in thread "Thread-8" Traceback (most recent call last):
  File "Sikuli\sikulix.jar\Lib\sikuli\Env.py", line 13, in hotkeyPressed
  File "Sikuli\Test.sikuli\Test.py", line 339, in resetRun
    raise resetException
__main__.resetException
</code></pre>
<p>Is there any solution to this?</p>
<p>Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that you're out of the main thread's context. This is a multi-threaded environment which is hinted by you binding keys to callbacks.</p>
<p>There is probably an eventloop with a thread (or threads) waiting to handle your key callbacks once a user presses a key.</p>
<p>What you need to do is put the try-catch inside the <code>resetRun</code> so that the thread actually executing the code (which is calling your callback) can handle the exception.</p>
<p>You could create a wrapper like this:</p>
<pre><code>def with_try_catch(f):
    def wrapped():
        try:
            f()
        catch YourException:
            # handle exception
    return wrapped
</code></pre>
<p>Now bind like this:</p>
<pre><code>Env.addHotkey(resetKey, 0, with_try_catch(resetRun))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That's because the exception inside your function doesn't raised at <strong>run-time</strong>. The fact is that a <a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer"><code>try-except</code> expression</a> will catch the exceptions in run-time, for example:</p>
<pre><code>&gt;&gt;&gt; try:
...     def a():
...        raise ValueError
...     a()
... except ValueError:
...     print('The exception is caught')
... 
The exception caught
</code></pre>
<p>And in this case it seems that you are just instantiating an object or smth. (your function is not executed at run-time)  </p>
<pre><code>Env.addHotkey(resetKey, 0, resetRun)
</code></pre>
<p>Which means that the exceptions will raise after compile time (when you use that function), in this case, when you push the button.</p>
<p>So if you want to handle the exception inside the function you need to catch them inside the function.</p>
</div>
<div class="post-text" itemprop="text">
<p>I am no expert, but it seems to me that the problem is your <code>def resetRun(event)</code> bit. The <code>try...except</code> instruction set cannot dig into a function definition. What happens if you create resetRun(event) outside of <code>try...except</code>? Does it work then?</p>
</div>
<span class="comment-copy">Is this multi-threaded? (seems like your binding keys, so I'm guessing you have an event-loop active)</span>
<span class="comment-copy">Take out exception function out of try..catch block</span>
<span class="comment-copy">Why are you wrapping the <code>def</code> with <code>try/catch</code>? Move it inside of the <code>def</code>.</span>
<span class="comment-copy">I'm not sure, but it looks like it is. I don't know if it helps, but everytime I press the hotkey, the thread in the traceback increases by 1 (<code>"Thread-8"</code>, <code>"Thread-9"</code>, <code>"Thread-10"</code>, ...)</span>
<span class="comment-copy">@FullName I was trying to wrap the while-loop with the try/catch</span>
<span class="comment-copy">Unfortunately, that doesn't change anything at all. I don't think that could work anyways, since the <code>raise</code> must happen inside the try/catch block?</span>
