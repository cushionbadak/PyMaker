<div class="post-text" itemprop="text">
<p>Is there a way to expand a Python tuple into a function - as actual parameters?</p>
<p>For example, here <code>expand()</code> does the magic:</p>
<pre><code>tuple = (1, "foo", "bar")

def myfun(number, str1, str2):
    return (number * 2, str1 + str2, str2 + str1)

myfun(expand(tuple)) # (2, "foobar", "barfoo")
</code></pre>
<p>I know one could define <code>myfun</code> as <code>myfun((a, b, c))</code>, but of course there may be legacy code.
Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p><code>myfun(*tuple)</code> does <strong>exactly</strong> what you request.</p>
<p>Side issue: <strong>don't</strong> use as your identifiers builtin type names such as <code>tuple</code>, <code>list</code>, <code>file</code>, <code>set</code>, and so forth -- it's horrible practice and it <em>will</em> come back and bite you when you least expect it,
so just get into the habit of actively <em>avoiding</em> hiding builtin names with your own identifiers.</p>
</div>
<div class="post-text" itemprop="text">
<p>Note that you can also expand part of argument list:</p>
<pre><code>myfun(1, *("foo", "bar"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at <a href="http://docs.python.org/tutorial/controlflow.html#more-on-defining-functions" rel="nofollow noreferrer">the Python tutorial</a> section 4.7.3 and 4.7.4.
It talks about passing tuples as arguments.</p>
<p>I would also consider using named parameters (and passing a dictionary) instead of using a tuple and passing a sequence. I find the use of positional arguments to be a bad practice when the positions are not intuitive or there are multiple parameters. </p>
</div>
<div class="post-text" itemprop="text">
<p>This is the functional programming method. It lifts the tuple expansion feature out of syntax sugar:</p>
<p><code>apply_tuple = lambda f, t: f(*t)</code></p>
<p>Example usage:</p>
<pre><code>from toolz import * 
from operator import add, eq

apply_tuple = curry(apply_tuple)

thread_last(
    [(1,2), (3,4)],
    (map, apply_tuple(add)),
    list,
    (eq, [3, 7])
)
# Prints 'True'
</code></pre>
<p><a href="http://toolz.readthedocs.io/en/latest/api.html#toolz.functoolz.curry" rel="noreferrer">curry</a> redefiniton of <code>apply_tuple</code> saves a lot of <code>partial</code> calls in the long run.</p>
</div>
<div class="post-text" itemprop="text">
<p>I ran across similar problem and created this function which expand the fixed function. Hope this helps.</p>
<pre><code>def run_argtup(func, argvalues):
    """
    Execute any functions with their arguments in tuple.

    :param func:
    :param argvalues:
    :return:
    """
    argnames = get_func_argnames(func)
    if len(argnames) != len(argvalues):
        raise ValueError("Length of args doens't match.")
    for argn, argv in zip(argnames, argvalues):
        exec('{}=argv'.format(argn))
    return eval('func(%s, %s)' % argnames)
</code></pre>
</div>
<span class="comment-copy">Could you please provide an explanation why the asteriks operator does what was asked for?</span>
<span class="comment-copy">The * operator simply unpacks the tuple and passes them as the positional arguments to the function. See more here: <a href="https://docs.python.org/3/tutorial/controlflow.html#tut-unpacking-arguments" rel="nofollow noreferrer">docs.python.org/3/tutorial/â€¦</a></span>
<span class="comment-copy">Note that the same syntax can be used for lists as well as tuples.</span>
<span class="comment-copy">I've found that you can do the same with lists, (in fact, any iterable, including strings), not sure how their mutability affects things. That would be interesting to look into.</span>
<span class="comment-copy">It appears you can only do this if the expanded tuple is after the normally-provided arguments - the interpreter doesn't like it when I do this: <code>some_func(*tuple_of_stuff, another_argument)</code></span>
<span class="comment-copy">@Quackmatic Having the expanded tuple in any location seems to work fine in Python 3.5.1</span>
<span class="comment-copy">@Quackmatic seconding @River, this works fine in Python 3.5.4: <code>def func(a,b,c,d): print(a,b,c,d)</code> with <code>args = ('fee', 'fi', 'fo'); func(*args, 'fum')</code></span>
<span class="comment-copy">This is not helpful for a beginner. It uses third-party modules and does other confusing stuff...</span>
<span class="comment-copy">gberger, <code>lambda f, t: f(*t)</code> does not use third-party modules and I am a Python beginner and this is helpful to me. This is a pure functional approach. If you don't use this style then this answer is not for you.</span>
<span class="comment-copy">toolz is third-party, is what I meant</span>
<span class="comment-copy">Not every answer has to be for a beginner</span>
<span class="comment-copy">@gberger I'm here because I was curious about a functional approach. :D</span>
