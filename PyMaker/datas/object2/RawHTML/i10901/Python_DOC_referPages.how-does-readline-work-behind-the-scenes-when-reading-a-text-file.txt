<div class="post-text" itemprop="text">
<p>I would like to understand how <code>readline()</code> takes in a single line from a text file. The specific details I would like to know about, with respect to how the compiler interprets the Python language and how this is handled by the CPU, are:</p>
<ol>
<li>How does the <code>readline()</code> know which line of text to read, given that successive calls to <code>readline()</code> read the text line by line?</li>
<li>Is there a way to start reading a line of text from the middle of a text? How would this work with respect to the CPU?</li>
</ol>
<p>I am a "beginner" (I have about 4 years of "simpler" programming experience), so I wouldn't be able to understand technical details, but feel free to expand if it could help others understand!</p>
</div>
<div class="post-text" itemprop="text">
<p>Example using the file <code>file.txt</code>:</p>
<pre><code>fake file
with some text
in a few lines
</code></pre>
<p><strong>Question 1:</strong> How does the readline() know which line of text to read, given that successive calls to readline() read the text line by line?</p>
<p>When you open a file in python, it creates a <code>file</code> object. File objects act as file descriptors, which means at any one point in time, they point to a specific place in the file.  When you first open the file, that pointer is at the beginning of the file. When you call <code>readline()</code>, it moves the pointer forward to the character just after the next newline it reads.</p>
<p>Calling the <code>tell()</code> function of a <code>file</code> object returns the location the file descriptor is currently pointing to.</p>
<pre><code>with open('file.txt', 'r') as fd:
    print fd.tell()
    fd.readline()
    print fd.tell()

# output:
0
10
</code></pre>
<p><br/></p>
<p><strong>Question 2</strong>: Is there a way to start reading a line of text from the middle of a text? How would this work with respect to the CPU?</p>
<p>First off, reading a file doesn't really have anything to do with the CPU. It has to do with the <em>operating system</em> and the <em>file system</em>. Both of those determine how files can be read and written to. <a href="http://www.tutorialspoint.com/operating_system/os_file_system.htm" rel="nofollow">Barebones explanation of files</a></p>
<p>For random access in files, you can use the <a href="https://docs.python.org/2/library/mmap.html" rel="nofollow"><code>mmap</code></a> module of python. The Python Module of the Week site has a <a href="https://pymotw.com/2/mmap/" rel="nofollow">great tutorial</a>.</p>
<p>Example, jumping to the 2nd line in the example file and reading until the end:</p>
<pre><code>import mmap
import contextlib

with open('file.txt', 'r') as fd:
    with contextlib.closing(mmap.mmap(fd.fileno(), 0, access=mmap.ACCESS_READ)) as mm:
        print mm[10:]

# output:
with some text
in a few lines
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a very broad question and it's unlikely that all details about what the CPU does would fit in an answer. But a high-level answer is possible:</p>
<ol>
<li><p><code>readline</code> reads each line in order. It starts by reading chunks of the file from the beginning. When it encounters a line break, it returns that line. Each successive invocation of <code>readline</code> returns the next line until the last line has been read. Then it returns an empty string.</p>
<pre><code>with open("myfile.txt") as f:
    while True:
        line = f.readline()
        if not line:
            break
        # do something with the line
</code></pre>
<p>Readline uses operating system calls under the hood. The file object corresponds to a file descriptor in the OS, and it has a pointer that keeps track of where in the file we are at the moment. The next read will return the next chunk of data from the file from that point on.</p></li>
<li><p>You would have to scan through the file first in order to know how many lines there are, and then use some way of starting from the "middle" line. If you meant some arbitrary line except the first and last lines, you would have to scan the file from the beginning identifying lines (for example, you could repeatedly call <code>readline</code>, throwing away the result), until you have reached the line you want). There is a ready-made module for this: <a href="https://docs.python.org/3/library/linecache.html" rel="nofollow"><code>linecache</code></a>.</p>
<pre><code>import linecache

linecache.getline("myfile.txt", 5) # we already know we want line 5
</code></pre></li>
</ol>
</div>
<span class="comment-copy">good catch. I'm so used to Java's readLine() that I typed it as such</span>
<span class="comment-copy">What about the CPU interests you in this case?</span>
<span class="comment-copy">You can start in the middle by doing seek and then doing readline to advance to the end of a line.</span>
<span class="comment-copy">The way the CPU handles fetching the data from the file, possibly making a note in the text file. Go into as much detail as you want; I'm basically curious from a technical standpoint on how it works</span>
<span class="comment-copy">Nothing makes notes in the file.  Open files have a file pointer to keep track of the current read or write position.</span>
<span class="comment-copy">I recognize that this question is extremely broad; as a novice to Python, I came upon this in a tutorial on codecademy and I was interested in how it works on the lower levels. Thanks for your answer!</span>
<span class="comment-copy">I was more curious as to how <code>readline</code> knows where it read last (and thus where to start next). Could you possibly add that to your answer?</span>
<span class="comment-copy">Sure, added that.</span>
