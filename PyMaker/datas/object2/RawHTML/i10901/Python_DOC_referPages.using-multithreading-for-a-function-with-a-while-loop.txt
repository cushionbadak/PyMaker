<div class="post-text" itemprop="text">
<p>I have a pretty basic function that iters through a directory, reading files and collecting data, however it does this way too slow and only uses about a quarter of each core (quad-core i5 CPU) for processing power. How can I run the function 4 times simultaneously. Because it's going through a rather large directory, could I have the parameter use random.shuffle()? Here's the code I have now:</p>
<pre><code>import multiprocessing

def function():
    while True:
        pass #do the code. variables are assigned inside the function.

with Pool(processes=4) as pool:
    pool.map(function)
</code></pre>
<p>Because the function doesn't take any parameters, what can I do?</p>
</div>
<div class="post-text" itemprop="text">
<p>I didn't use <code>map()</code>, it is said map takes only one iterable argument, theoretically, you either modify your <code>fuction()</code> to <code>function(one_arg)</code> or try to use an empty list or tuple or other iterable structure but I didn't test it. </p>
<p>I suggest you put all files into queue(can be shared by processes), and share the queue to multiple processes(in your case it is 4).  Use try-except to quit when finish reading a file. Creates 4 processes to consume the files queue and quit until all files are processed.</p>
<p>Queue is easy for you to tell whether there's more files need to be read or not based on <code>Queue.Empty</code> and <code>TimeoutError</code></p>
<pre><code>from multiprocessing import Process
import Queue

def function(files_queue):
    try:
        filename = files_queue.get(timeout=60)  # set timeout
        with open(filename) as inputs:
            # process lines
            # time consuming work is here
    except (multiprocessing.TimeoutError, Queue.Empty) as toe:
        # queue is empty or timeout
        break 

if __name__ == '__main__':
    files_queue = ...  # put all files into queue
    processes = list()

    # here you need a loop to create 4/multiple processes
    p = Process(target=function, args=(files_queue,))

    processes.add(p)
    p.start()

    for pro in processes:
        pro.join()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This method <code>pool.map(function)</code> will create 4 threads, not actually 4 processes. All this "multiprocessing" will happen in the same process with 4 threads.</p>
<p>What I suggest is to use the <code>multiprocessing.Process</code> according the documentation <a href="https://docs.python.org/2/library/multiprocessing.html#multiprocessing.Process" rel="nofollow">here (Python 2)</a> or <a href="https://docs.python.org/3/library/multiprocessing.html#the-process-class" rel="nofollow">here (Python 3)</a>.</p>
</div>
<span class="comment-copy">Show an example of what <code>function()</code> does.</span>
<span class="comment-copy"><code>map</code> takes only one iterable argument, you can create an empty list or tuple</span>
<span class="comment-copy">@haifzhan So then would I have it like this?: pool.map() pool.map() pool.map()pool.map()</span>
<span class="comment-copy">The function has multiple print functions inside of it, but there's no output. In the last loop, I tried to print pro and I just got &lt;Process(Process-1, stopped[1])&gt;</span>
<span class="comment-copy">@MrSquer can you post your code?</span>
<span class="comment-copy">Nevermind, I got it!</span>
<span class="comment-copy">No, <code>multiprocessing.Pool()</code> uses processes, not threads.</span>
