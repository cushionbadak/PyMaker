<div class="post-text" itemprop="text">
<p>I'm confused about the use of the <code>continue</code> statement in a <code>while</code> loop.</p>
<p>In this <a href="https://stackoverflow.com/a/23294659/1391441">highly upvoted answer</a>, <code>continue</code> is used inside a <code>while</code> loop to indicate that the execution should continue (obviously). It's <a href="https://docs.python.org/3/reference/simple_stmts.html#continue" rel="nofollow noreferrer">definition</a> also mentions its use in a <code>while</code> loop:</p>
<blockquote>
<p>continue may only occur syntactically nested in a for or while loop</p>
</blockquote>
<p>But in <a href="https://stackoverflow.com/q/8420705/1391441">this (also highly upvoted) question</a> about the use of <code>continue</code>, all examples are given using a <code>for</code> loop.</p>
<p>It would also appear, given the tests I've run, that it is completely unnecessary. This code:</p>
<pre><code>while True:
    data = raw_input("Enter string in all caps: ")
    if not data.isupper():
        print("Try again.")
        continue
    else:
        break
</code></pre>
<p>works just as good as this one:</p>
<pre><code>while True:
    data = raw_input("Enter string in all caps: ")
    if not data.isupper():
        print("Try again.")
    else:
        break
</code></pre>
<p>What am I missing?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a really simple example where <code>continue</code> actually does something measureable:</p>
<pre><code>animals = ['dog', 'cat', 'pig', 'horse', 'cow']
while animals:
    a = animals.pop()
    if a == 'dog':
        continue
    elif a == 'horse':
        break
    print(a)
</code></pre>
<p>You'll notice that if you run this, you won't see <code>dog</code> printed.  That's because when python sees <code>continue</code>, it skips the rest of the while suite and starts over from the top.</p>
<p>You won't see <code>'horse'</code> or <code>'cow'</code> either because when <code>'horse'</code> is seen, we encounter the break which exits the <code>while</code> suite entirely.</p>
<p>With all that said, I'll just say that over 90%<sup>1</sup> of loops <em>won't</em> need a <code>continue</code> statement.</p>
<p><sup><sup>1</sup>This is complete guess, I don't have any <em>real</em> data to support this claim :)</sup></p>
</div>
<div class="post-text" itemprop="text">
<p><code>continue</code> just means skip to the next iteration of the loop. The behavior here is the same because nothing further happens after the <code>continue</code> statement anyways.</p>
<p>The docs you quoted are just saying that you can <em>only</em> use <code>continue</code> inside of a loop structure - outside, it's meaningless.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>continue</code> is only necessary if you want to jump to the next iteration of a loop without doing the rest of the loop. It has no effect if it's the last statement to be run.</p>
<p><code>break</code> exits the loop altogether.</p>
<p>An example:</p>
<pre><code>items = [1, 2, 3, 4, 5]
print('before loop')
for item in items:
    if item == 5:
        break
    if item &lt; 3:
        continue
    print(item)

print('after loop')
</code></pre>
<p>result:</p>
<pre><code>before loop
3
4
after loop
</code></pre>
</div>
<span class="comment-copy">You're not missing anything - in your simple example, it's completely unnecessary. In a much more complicated example (or in more poorly organized code) it can be useful (for example, you can remove the "else" clause if you keep the continue in there).</span>
<span class="comment-copy">Both examples have the same behaviour: the <code>continue</code> is programmatically useless here. In your examples, it is useful for a reviewer to understand more easily you algorithm. It can be useful too for IDEs to automatically unindent the next line like with the <code>pass</code> statement.</span>
<span class="comment-copy"><code>continue</code> means: Terminate <i>this iteration</i> of the loop (i.e. <i>skip</i> the rest of the loop body) and <i>continue</i> with the next iteration.</span>
<span class="comment-copy">The answers to the <a href="http://stackoverflow.com/questions/8420705/example-use-of-continue-statement-in-python">question you linked</a> already explain the point of <code>continue</code>. That their examples use <code>for</code> instead of <code>while</code> doesn't matter at all. <code>continue</code> is the same for both kinds of loops.</span>
<span class="comment-copy">'continue' could also be avoided by this way animals = ['dog', 'cat', 'pig', 'horse', 'cow'] while animals:     a = animals.pop()         if a == 'horse':         break     if a != 'dog':         print(a)</span>
<span class="comment-copy">Ahh so <code>continue</code> breaks <i>inside</i> the loop, while <code>break</code> breaks <i>outside</i> of it. Did I understand you correctly?</span>
<span class="comment-copy">Yeah, that's a way of looking at it. I frequently use <code>continue</code> as a way of saying 'discard the rest of this loop body, we aren't interested in it anymore. But don't exit the loop, just discard this one step in iteration.'</span>
