<div class="post-text" itemprop="text">
<p>I've recently been practicing using <code>map()</code> in Python 3.5.2, and when I tried to run the module it said the comma separating the function and the <code>iterable</code> was a <code>SyntaxError</code>. Here's the code:</p>
<pre><code>eng_swe = {"merry":"god", "christmas":"jul", "and":"och", "happy":"gott",
       "new":"nytt", "year":"Ã¥r"}

def map_translate(l):
    """Translates English words into Swedish using the dictionary above."""

    return list(map(lambda x: eng_swe[x] if x in eng_swe.keys(), l))
</code></pre>
<p>I noticed that if I eliminate the conditional statement like this:</p>
<pre><code>return list(map(lambda x: eng_swe[x], l))
</code></pre>
<p>it works fine, but it sacrifices the ability to avoid attempting to add items to the list that aren't in the dictionary. Interestingly enough, there also weren't any problems when I tried using a conditional statement with <code>reduce()</code>, as shown here:</p>
<pre><code>from functools import reduce

def reduce_max_in_list(l):
    """Returns maximum integer in list using the 'reduce' function."""

    return reduce(lambda x, y: x if x &gt; y else y, l)
</code></pre>
<p>Yes, I know I could do the exact same thing more cleanly and easily with a list comprehension, but I consider it worth my time to at least learn how to use <code>map()</code> correctly, even if I end up never using it again. </p>
</div>
<div class="post-text" itemprop="text">
<p>You're getting the <code>SyntaxError</code> because you're using a conditional expression without supplying the <code>else</code> clause which is mandatory. </p>
<p><a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow">The grammar</a> for conditional expressions (i.e <code>if</code> statements in an expression form) <strong><em>always</em></strong> includes an <code>else</code> clause:</p>
<pre><code>conditional_expression ::=  or_test ["if" or_test "else" expression]
                                                    ^^
</code></pre>
<p>In your <code>reduce</code> example you <strong>do</strong> supply it and, as a result, no errors are being raised. </p>
</div>
<div class="post-text" itemprop="text">
<p>In your first example, you don't specify what should be returned if the condition <em>isn't</em> true.  Since python <em>can't</em> yield nothing from an expression, that is a syntax error.  e.g:</p>
<pre><code>a if b  # SyntaxError.
a if b else c  # Ok.
</code></pre>
<p><sup>You might argue that it could be useful to implicitly yield <code>None</code> in this case, but I doubt that a proposal of that sort would get any traction within the community... (I wouldn't vote for it ;-)</sup></p>
</div>
<div class="post-text" itemprop="text">
<p>While the others' explanations of why your code is causing a <code>SyntaxError</code> are completely accurate, the goal of my answer is to aid you in your goal "to at least learn how to use map() correctly."</p>
<p>Your use of <code>map</code> in this context does not make much sense. As you noted in your answer it would be much cleaner if you used a list comprehension:</p>
<pre><code>[eng_swe[x] for x in l if x in eng_swe]
</code></pre>
<p>As you can see, this looks awfully similar to your map expression, minus some of the convolution. Generally, this is a sign that you're using <code>map</code> incorrectly. <code>map(lambda...</code> is pretty much a code smell. (Note that I am saying this as an ardent supporter of the use of <code>map</code> in Python. I know many people think it should never be used, but I am not one of those people, as long as it is used properly.)</p>
<p>So, you might be wondering, what is an example of a good time to use <code>map</code>? Well, one use case I can think of off the top of my head is converting a list of <code>str</code>s to <code>int</code>s. For example, if I am reading a table of data stored in a file, I might do:</p>
<pre><code>with open('my_file.txt', 'r') as f:
    data = [map(int, line.split(' ')) for line in f]
</code></pre>
<p>Which would leave me with a 2d-array of <code>int</code>s, perfect for further manipulation or analysis. What makes this a better use of <code>map</code> than your code is that it uses a built-in function. I am not writing a lambda expressly to be used by map (as this is a sign that you should use a list comprehension).</p>
<p>Getting back to your code, however... if you want to write your code functionally, you should really be using <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow"><code>filter</code></a>, which is just as important to know as <code>map</code>.</p>
<pre><code>map(lambda x: eng_swe[x], filter(lambda x: eng_swe.get(x), l))
</code></pre>
<p>Note that I was unable to get rid of the <code>map(lambda...</code> code smell in my version, but at least I broke it down into smaller parts. The <code>filter</code> finds the words that can be translated and the <code>map</code> performs the actual translation. (Still, in this case, a list comprehension is probably better.) I hope that this explanation helps you more than it confuses you in your quest to write Python code functionally.</p>
</div>
<span class="comment-copy">Ternary operators require an <code>else</code> condition.</span>
<span class="comment-copy">I appreciate it. I searched for a long time for a guide on how to use conditional statements but could never find one, hence this mistake.</span>
