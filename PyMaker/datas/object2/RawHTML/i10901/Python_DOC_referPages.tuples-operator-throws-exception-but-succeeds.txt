<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/29747224/append-to-a-list-defined-in-a-tuple-is-it-a-bug">Append to a list defined in a tuple - is it a bug? [duplicate]</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>Why does the following throw an exception, although it succeeds?</p>
<pre><code>&gt;&gt;&gt; t = ([1, 2, 3], 4)
&gt;&gt;&gt; t[0] += [1]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'tuple' object does not support item assignment
&gt;&gt;&gt; t
([1, 2, 3, 1], 4)
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Found the answer on IRC.</p>
<p><code>t[0] += [1]</code> is several discrete actions:</p>
<ol>
<li>loading <code>t[0]</code></li>
<li>building a new list with <code>1</code> in it</li>
<li>adding that <code>[1]</code> to whatever <code>t[0]</code> is</li>
<li>reassigning <code>t[0]</code></li>
</ol>
<p>It seems that <code>x += y</code> is basically <code>x = x + y</code> (but, is it?)</p>
<p>The tricky bit is that <code>+=</code> implies assignment to both the tuple <code>t</code> and to the list <code>t[0]</code></p>
<p><code>t[0] += [1]</code> is not <em>literally</em> <code>t[0] = t[0] + [1]</code>, it is: <code>t[0] = t[0].__iadd__([1])</code></p>
<p>What really happens is:</p>
<ol>
<li><code>__iadd__</code> both mutates the list and returns it. So the list (which is the first element in <code>t</code>) has already got <code>1</code> appended to it.</li>
<li>tuple's mutation is attempted in-place as well, but tuples are immutable, resulting in the exception.</li>
</ol>
<p>Why is this not visible in plain sight? Because a n00b like me would expect <code>t[0] += [1]</code> to either succeed all together or fail, because it's one short line of python. But that's not always the case.</p>
</div>
<div class="post-text" itemprop="text">
<p>It can also help to understand this behavior by taking a look at the bytecode with <a href="https://docs.python.org/3/library/dis.html" rel="nofollow"><code>dis.dis</code></a>.  </p>
<pre><code>In[5]: dis('t[0] += [1]')
  1           0 LOAD_NAME                0 (t)
              3 LOAD_CONST               0 (0)
              6 DUP_TOP_TWO
              7 BINARY_SUBSCR
              8 LOAD_CONST               1 (1)
             11 BUILD_LIST               1
             14 INPLACE_ADD
             15 ROT_THREE
             16 STORE_SUBSCR
             17 LOAD_CONST               2 (None)
             20 RETURN_VALUE
</code></pre>
<ul>
<li>The value of <code>t[0]</code> is placed on top of the stack with <code>BINARY_SUBSCR</code>, which is a (mutable) list in this case. </li>
<li>The value on the top of the stack has <code>+= [1]</code> performed on it with <code>INPLACE_ADD</code>, where in this case the top of the stack refers to the list inside the tuple. </li>
<li>The assigning of <code>t[0]</code> to the top of the stack occurs with <code>STORE_SUBSCR</code>, which fails here as <code>t</code> itself is an immutable tuple, raising the error <em>after</em> the <code>+=</code> assignment has already occurred. </li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>The Python developers wrote an official explanation about why it happens here: <a href="https://docs.python.org/2/faq/programming.html#why-does-a-tuple-i-item-raise-an-exception-when-the-addition-works" rel="nofollow">https://docs.python.org/2/faq/programming.html#why-does-a-tuple-i-item-raise-an-exception-when-the-addition-works</a></p>
<p>The short version is that += actually does two things, one right after the other:</p>
<ol>
<li>Take the thing on the right and add it to the variable on the left</li>
<li>Put the result into the variable on the left</li>
</ol>
<p>In this case, step 1 works because you’re allowed to add stuff to lists (they’re mutable), but step 2 fails because you can’t put stuff into tuples after creating them (tuples are immutable). </p>
<p>In a real program, I would suggest you don't do this because t[0].extend(['c']) does the exact same thing.</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/2/faq/programming.html#why-does-a-tuple-i-item-raise-an-exception-when-the-addition-works" rel="nofollow noreferrer">Why does <code>a_tuple[i] += [‘item’]</code> raise an exception when the addition works</a></span>
<span class="comment-copy">This is a good question and a good answer.  +1 from me.  Also, for more background on  <code>a += b</code> vs  <code>a = a + b</code>, see <a href="http://stackoverflow.com/questions/15376509/when-is-i-x-different-from-i-i-x-in-python/15376520#15376520">this answer</a> (disclaimer -- I wrote one of the answers).</span>
<span class="comment-copy">s/tables/lists/</span>
