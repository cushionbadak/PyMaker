<div class="post-text" itemprop="text">
<p>I am new to <em>python</em>, and am trying to make use of <code>string.format()</code> to pass indexed elements of a list as the key values for my dictionary. This will then be used in a <code>request</code>.</p>
<p>To be more specific, the overarching idea for this is that the input for the list will be chosen/spoken by the client. This list, which will vary with spoken utterance, will then have it's elements passed to fill parameters for a <code>request.get</code>. This gets information that it will then send to a database, so it needs to be flexible; this is why I do not want the passed string elements to be explicitly specified, and would rather use their indexed placements in the list. I include this because there might be a way other than with <code>requests</code> that I could do this, but I'm just not sure how. Here is what my code looks like:</p>
<pre><code>import requests

def func():
    # query will be populated via spoken utterances; for now it's hard-coded for testing purposes
    query = ["value1", "value2", "value3"]
    intent = {'string1': '{0[0]}', 'string2': '{0[1]}', 'RelString': '{0[2]}'}.format(query)
    url = "http://path-to-cloudobject"
    r = requests.get(url, params=intent)
    return r.text
</code></pre>
<p>Because I know where the issue lies, I've tried inputting <code>print(intent)</code> underneath <code>intent</code> to get a look at what's going on but that doesn't help; I get nothing upon execution. Is there an easier (and legal) way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>intent</code> is a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow">dictionary</a> which doesn't have a <a href="https://docs.python.org/3.5/library/functions.html#format" rel="nofollow"><code>format</code></a> method. What you want to do instead, is format every value in that dictionary to map to the right query field. Try this instead:</p>
<pre><code>&gt;&gt;&gt; query = ["value1", "value2", "value3"]
&gt;&gt;&gt; intent = {'string1': '{0}'.format(query[0]), 'string2': '{0}'.format(query[1]), 'RelString': '{0}'.format(query[2])}
&gt;&gt;&gt; intent
{'RelString': 'value3', 'string2': 'value2', 'string1': 'value1'}
&gt;&gt;&gt; 
</code></pre>
<p>As a matter of fact this could be further simplified with <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow">zip</a>:</p>
<pre><code>&gt;&gt;&gt; query = ['value1', 'value2', 'value3']
&gt;&gt;&gt; intent = dict(zip(['string1', 'string2', 'RelString'], query))
&gt;&gt;&gt; intent
{'RelString': 'value3', 'string2': 'value2', 'string1': 'value1'}
&gt;&gt;&gt; 
</code></pre>
<p>Where the order of keys <code>['string1', 'string2', 'RelString']</code> must correspond to the order of values inside <code>query</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If I understand your question correctly . The following should be the desired output value for "intent" after formatting:</p>
<pre><code>{'string1': 'value1[0]', 'string2': 'value2[1]', 'RelString':    'value3[2]'}
</code></pre>
<p>You can actually convert dictionary into string  and then back to Dictionary through tuples as </p>
<pre><code>import ast
query = ["value1", "value2", "value3"]
intent = {'string1': '{0}[0]', 'string2': '{1}[1]', 'RelString': '{2}[2]'}
tupleIntent = intent.items()
listIntent = ast.literal_eval(str(tupleIntent).format(*query))
DictIntent = dict(listIntent)
print DictIntent
</code></pre>
<p>I did edit your "intent" dictionary to match the formatting results.</p>
</div>
<span class="comment-copy">This makes a lot more sense than what I was doing, and I really like the added use of <code>zip</code> to make it cleaner (which helps me, as I always order keys in the way I'm mapping them to values anyway)</span>
