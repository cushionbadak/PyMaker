<div class="post-text" itemprop="text">
<p>I followed <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow">Python 3 Modules tutorial</a> and I cannot get absolute or relative intra-package imports to work.</p>
<p>Specifically I replicated the project structure from the tutorial. The <code>sound</code> folder is located in my home <code>/home/user/</code> directory. All project files (excluding <code>filters/vocoder.py</code> and <code>effects/surround.py</code>) are empty and have been generated using <code>touch</code>.</p>
<pre><code>sound/                          Top-level package
      __init__.py               Initialize the sound package
      formats/                  Subpackage for file format conversions
              __init__.py
              wavread.py
              wavwrite.py
              aiffread.py
              aiffwrite.py
              auread.py
              auwrite.py

      effects/                  Subpackage for sound effects
              __init__.py
              echo.py
              surround.py
              reverse.py

      filters/                  Subpackage for filters
              __init__.py
              equalizer.py
              vocoder.py
              karaoke.py
</code></pre>
<p>As per instruction <code>filters/vocoder.py</code> contains:</p>
<pre><code>from sound.effects import echo
</code></pre>
<p>When this file is executed, it results in an import error:</p>
<pre><code>user@pc:~/sound$ python filters/vocoder.py
Traceback (most recent call last):
  File "filters/vocoder.py", line 1, in &lt;module&gt;
    from sound.effects import echo
ImportError: No module named 'sound'

user@pc:~/sound$ cd filters/

user@pc:~/sound/filters$ python vocoder.py 
Traceback (most recent call last):
  File "vocoder.py", line 1, in &lt;module&gt;
    from sound.effects import echo
ImportError: No module named 'sound'
</code></pre>
<p>Likewise I have executed each of the following lines of code in <code>effects/surround.py</code> separately (I commented the lines out <code>#</code> and rerun the script):</p>
<pre><code>from . import echo
from .. import formats
from ..filters import equalizer
</code></pre>
<p>Which when it is executed results in:</p>
<pre><code>user@pc:~/sound$ python effects/surround.py
Traceback (most recent call last):
  File "effects/surround.py", line 1, in &lt;module&gt;
    from . import echo
SystemError: Parent module '' not loaded, cannot perform relative import

user@pc:~/sound$ cd effects/

user@pc:~/sound/effects$ python surround.py
Traceback (most recent call last):
  File "surround.py", line 1, in &lt;module&gt;
    from . import echo
SystemError: Parent module '' not loaded, cannot perform relative import
</code></pre>
<p>What am I doing wrong, why can I not get absolute and relative imports to work in my package?</p>
<p>Below is a script which should help replicate the project:</p>
<pre><code>mkdir ~/sound
touch ~/sound/__init__.py

mkdir ~/sound/formats
touch ~/sound/formats/__init__.py
touch ~/sound/folder/wavread.py
touch ~/sound/folder/wavwrite.py
touch ~/sound/folder/aiffread.py
touch ~/sound/folder/aiffwrite.py
touch ~/sound/folder/auread.py
touch ~/sound/folder/auwrite.py

mkdir ~/sound/effects
touch ~/sound/effects/__init__.py
touch ~/sound/folder/echo.py
touch ~/sound/folder/surround.py
touch ~/sound/folder/reverse.py

mkdir ~/sound/filters
touch ~/sound/filters/__init__.py
touch ~/sound/folder/equalizer.py
touch ~/sound/folder/vocoder.py
touch ~/sound/folder/karaoke.py


echo "from sound.effects import echo" &gt;&gt; ~/sound/filters/vocoder.py

echo "from . import echo" &gt;&gt; ~/sound/effects/surround.py
echo "from .. import formats" &gt;&gt; ~/sound/effects/surround.py
echo "from ..filters import equalizer" &gt;&gt; ~/sound/effects/surround.py
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I was just looking at the tutorial.  I <strong>don't</strong> read that <code>from sound.effects import echo</code> is supposed to work as is from <code>filters/vocoders.py</code>.  What is says there in the tutorial is:</p>
<blockquote>
<p>Users of the package can import individual modules from the package,
  for example:</p>
</blockquote>
<pre><code>import sound.effects.echo
</code></pre>
<p>So that would be as if a user could reference the <code>sound</code> directory from their current directory.  Like some of the comments said, in order to do that, the user needs to either be in the same directory as <code>sound</code> or add the <code>sound</code> directory to your <code>PATH</code> variable.  Like this:</p>
<pre><code>import sys
sys.path.append( &lt;path to sound&gt; )
from sound.effects import echo
</code></pre>
<p>See also: <a href="https://stackoverflow.com/questions/279237/import-a-module-from-a-relative-path">Import a module from a relative path</a></p>
<p>Further down the tutorial, they touch on what you are trying to do, which is <a href="https://stackoverflow.com/questions/279237/import-a-module-from-a-relative-path">intra-package references</a>.  You could use this technique without adding <code>sound</code> to your <code>PATH</code>:</p>
<p>For example from your <code>filters/vocoders.py</code> module, this should work to import <code>echo</code>:</p>
<pre><code>from ..effects import echo
</code></pre>
</div>
<span class="comment-copy">Is your <code>/home/user</code> directory on the Python library search path?  The documentation you linked to says: "When importing the package, Python searches through the directories on sys.path looking for the package subdirectory."  If the directory containing <code>sound</code> is not on <code>sys.path</code>, <code>sound</code> will not be found.</span>
<span class="comment-copy">I am not sure, how can I check that? Running <code>printenv PYTHONPATH</code> did not show any results.</span>
<span class="comment-copy">You can do <code>import sys</code> and then <code>print sys.path</code> from inside the Python interpreter.  Most likely you would want to create a directory like <code>/home/mypythonstuff</code> and then add that to PYTHONPATH.  Or you could use the <a href="https://www.python.org/dev/peps/pep-0370/" rel="nofollow noreferrer">per-user site-packages directory</a>, which on Unix-like systems is something like <code>~/.local/lib/python3.5</code>.</span>
<span class="comment-copy">Thank you! To confirm, if a module is installed using <code>python setup.py install</code>, it gets copied into <code>~/.local/lib/python3.5</code> (or the equivalent) and as a result Python finds it?</span>
<span class="comment-copy">It will actually usually get copied into the global Python module directory (often something like <code>/usr/local/lib/python3.5/dist-packages</code>.  You can read documentation of <a href="https://docs.python.org/3/library/site.html" rel="nofollow noreferrer">the <code>site</code> module</a> for more info on how the path is determined.</span>
<span class="comment-copy">In contrast to your answer, importing modules in such a way is definitely possible as per the tutorial: "For example, if the module sound.filters.vocoder needs to use the echo module in the sound.effects package, it can use from sound.effects import echo."  I've also tested it and it worked (after BrenBarn's answer).</span>
