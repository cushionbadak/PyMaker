<div class="post-text" itemprop="text">
<p>I'm struggling to align some data after iterating it through a for loop. I'd like to have each for loop output a separate column but failing to figure out how to accomplish this. I've tried ending with end='' for new lines but does not bring the next column back top.  Can you please help?  Below is a testable example of the code I am trying to build. Your help is well appreciated.</p>
<pre><code>import time, re, collections, operator

output_list = [['2016-07-12', 'Magazine', 'News Paper #2', 'Podcast', '1234567', '10-10-10-10', 'ABCDEFG', 'Zoo'],
['2016-07-12', 'Book', 'News Paper #2', 'Podcast', '1234567', '10-10-10-10', 'ABCDEFG', 'Zoo'],
['2016-07-13', 'Book', 'News Paper #2', 'Podcast', '1234567', '10-10-10-10', 'ABREF', 'Zoo'],
['2016-07-14', 'Article', 'News Paper #4', 'Radio', '1234567', '10-10-10-10', 'ABCDEFG', 'Zoo'],
['2016-07-15', 'Article', 'News Paper #4', 'Radio', '1234567', '10-10-10-10', 'ABCDEFG', 'Zoo'],
['2016-07-15', 'Snippet', 'News Paper #2', 'Podcast', '1234567', '10-10-10-10', 'ABCDEFG', 'Zoo']]


def count_types():
    #item_1 = mm_counts(0)
    item_2 = mm_counts(1)
    item_3 = mm_counts(2)
    item_4 = mm_counts(3)
    item_5 = mm_counts(4)
    item_6 = mm_counts(5)
    item_7 = mm_counts(6)
    item_8 = mm_counts(7)

print('=' * 90)
print(('Media1    Media2    Media3    Media4    Media5    Media6    Media7'))
print('=' * 90)
def mm_counts(a):
    r = []
    for i in output_list:
        x = (i[a])
        r.append(x)
    y = collections.Counter(r)

    padding = 9
    for k, v in sorted(y.items(), key=operator.itemgetter(1), reverse=True):
        z = (str(k).ljust(13, ' ') + ' ' + (str(v).ljust(5, ' ')))
        print (z)

count_types()
</code></pre>
<p>Current Output:</p>
<pre><code>==========================================================================================
Media1    Media2    Media3    Media4    Media5    Media6    Media7
==========================================================================================
Article       2    
Book          2    
Snippet       1    
Magazine      1    
News Paper #2 4    
News Paper #4 2    
Podcast       4    
Radio         2    
1234567       6    
10-10-10-10   6    
ABCDEFG       5    
ABREF         1    
Zoo           6    
</code></pre>
<p>Desired Output:</p>
<pre><code>=============================================================================================
Media1       Media2            Media3      Media4      Media5           Media6      Media7
==============================================================================================
Article   2  Magazine       1  Podcast  4  1234567  6  10-10-10-10   6  ABCDEFG  5  Zoo  6 
Book      2  News Paper #2  4  Radio    2               ABREF    1
Snippet   1  News Paper #4  2    
Magazine  1 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Learn to use the <code>.format</code> method (of a format string). You can specify field length, left/centre/right justification, decimal places and/or leading zeros of numeric values, and much more. <a href="https://docs.python.org/3/library/string.html#formatspec" rel="nofollow">https://docs.python.org/3/library/string.html#formatspec</a></p>
<p>An example</p>
<pre><code>&gt;&gt;&gt; kvp = [('Newspaper', 47), ('TV', 192), ('Radio', 543)]
&gt;&gt;&gt; fs = '{0[0]:&gt;10s} {0[1]:6d}'
&gt;&gt;&gt; '    '.join( [ fs.format(kv) for kv in kvp ] )
' Newspaper     47            TV    192         Radio    543    '
</code></pre>
<p>Quite a bit going on there. <code>fs</code> is a format string. <code>{...}</code> in a format string mark items to format. Inside the braces the thing before the <code>:</code> identifies what to format and the stuff after, how to format it. <code>0[0]</code> and <code>0[1]</code> are the first and second elements of the first (here only) argument of the <code>.format</code> method (which has to be subscript-able). <code>&gt;10s</code> means right-justify a string in a field-width of 10. <code>6d</code> means decimal integer in a field width of 6. </p>
<p>Finally <code>'    '.join( [ fs.format(kv) for kv in kvp ] )</code> creates a list of formatted elements of <code>kvp</code> (i.e. strings) and concatenates them all with four spaces between them (but no four leading or trailing spaces).</p>
<p>(Yes, this is a partial answer. Someone else can answer putting the right entities in the right order to format into the desired lines of output, if I mis-interpreted "align" in the question)</p>
</div>
<span class="comment-copy">Can't you store all the data initially in <code>lists</code> and then <code>zip</code> them (or iterate over them together) before printing?</span>
<span class="comment-copy">Just do <code>from __future__ import print_function</code> and consecutively executing <code>print("...", end="")</code> should not break the line. <a href="http://stackoverflow.com/questions/493386/how-to-print-in-python-without-newline-or-space">How to print in Python without newline or space?</a></span>
<span class="comment-copy">@MichaelHoff, I tried that but it just prints all the lines in one row and not as columns. If it has worked for you can you please post the modified code?</span>
<span class="comment-copy">@MutationalMeltdown I tried to read up on zip but not familiar enough with to understand where I would insert it into the code.  Can you provide some input on where I would place that in the code?</span>
<span class="comment-copy">Thanks for the response.  I tried that as well and it does get the text into alignment if the value is only one item. However, i am iterating through multiple values so it doesn't quite work when there are multiple values per column.</span>
<span class="comment-copy">Isn't that what I showed you with <code>.join</code>? <code>kvp</code> is a list of tuples, the list is of arbitrary length. Each tuple is turned into a (here fixed-length) string via <code>.format</code> and these formatted strings are then joined together to make a line of output. If the issue is how to reorder your input data into something like the example's <code>kvp</code>, I didn't find the question entirely clear. Ask again with the emphasis on ordering not formatting?</span>
<span class="comment-copy">Okay, sorry, I am very new to python. This is is what I added but did not accomplish putting them in column. Can you please let me know what I am doing wrong. <code>fs = '{0[0]:&gt;10s} {0[1]:6d}'     for kv in sorted(y.items(), key=operator.itemgetter(1), reverse=True):         print('    '.join([fs.format(kv)]))</code></span>
