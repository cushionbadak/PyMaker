<div class="post-text" itemprop="text">
<p>Having such code</p>
<pre><code>numbers = '1 2 3 4 5 6 7 8'
nums = {'evens': [], 'odds': []}

for number in numbers.split(' '):
    if int(number) % 2:
        nums['odds'].append(number)
    else:
        nums['evens'].append(number)
</code></pre>
<p>How can accomplish same on fewer lines?</p>
</div>
<div class="post-text" itemprop="text">
<p>Short code is not better code. Short code is not faster code. Short code is not maintainable code. Now, that said, it <em>is</em> good to make your individual components concise and simple.</p>
<p>Here's what I would do:</p>
<pre><code>def split_odd_even(number_list):
    return {
        'odds': filter(lambda n: (n % 2) != 0, number_list),
        'evens': filter(lambda n: (n % 2) == 0, number_list)
    }

def string_to_ints(string):
    return map(int, numbers.strip().split())

numbers = '1 2 3 4 5 6 7 8 9 10'
nums = split_odd_even(string_to_ints(numbers))

print nums
</code></pre>
<p>This gives me:</p>
<pre><code>{'odds': [1, 3, 5, 7, 9], 'evens': [2, 4, 6, 8, 10]}
</code></pre>
<p>While this code has actually added a few lines in length, it has become much more clear what the program is doing, as we've applied <a href="https://en.wikipedia.org/wiki/Abstraction_(software_engineering)" rel="nofollow"><em>Abstraction</em></a> and made each component of the code do only one thing well.</p>
<p>Even though we've added two functions, the most-visible part of the code has gone from this:</p>
<pre><code>numbers = '1 2 3 4 5 6 7 8'
nums = {'evens': [], 'odds': []}
for number in numbers.split(' '):
    if int(number) % 2:
        nums['odds'].append(number)
    else:
        nums['evens'].append(number)
</code></pre>
<p>To this:</p>
<pre><code>numbers = '1 2 3 4 5 6 7 8 9 10'
nums = split_odd_even(string_to_ints(numbers))
</code></pre>
<p>And just by reading these two lines, we know that <code>numbers</code> is converted from a string to a list of <code>int</code>s, and that we then split those numbers into odd and even, and assign the result to <code>nums</code>.</p>
<p>To explain a a couple of things that may not be familiar to all:</p>
<ul>
<li><p><a href="https://docs.python.org/2/library/functions.html#map" rel="nofollow"><code>map()</code></a> calls a function for every item in a <code>list</code> (or <code>tuple</code> or other iterable), and returns <em>a new list with the result of the function being called on each item</em>. In this case, we use it to call <code>int()</code> on each item in the list.</p></li>
<li><p><a href="https://docs.python.org/2/library/functions.html#filter" rel="nofollow"><code>filter()</code></a> calls a function for every item in a <code>list</code> (or <code>tuple</code> or other iterable), which returns <code>True</code> or <code>False</code> for each item (well, <a href="https://developer.mozilla.org/en-US/docs/Glossary/Falsy" rel="nofollow"><em>truthy</em> or <em>falsey</em></a>), and returns a list of items that evaluated to <code>True</code> when the function is called.</p></li>
<li><p>Lambda Expressions (<a href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions" rel="nofollow"><code>lambda</code></a>) are like "mini-functions" that take arguments and can be created in-place.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>A functional aproach:</p>
<pre><code>&gt;&gt;&gt; numbers = '1 2 3 4 5 6 7 8'
&gt;&gt;&gt; numbers = map(int, numbers.split())
&gt;&gt;&gt; nums = {'evens': filter(lambda x: x%2 == 0, numbers), 'odds': filter(lambda x: x%2 != 0, numbers)}
&gt;&gt;&gt; nums
{'evens': [2, 4, 6, 8], 'odds': [1, 3, 5, 7]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can accomplish the same results with <a href="https://docs.python.org/3.4/library/itertools.html?highlight=itertools#itertools.groupby" rel="nofollow"><code>itertools.groupby</code></a>, like so:</p>
<pre><code>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt;
&gt;&gt;&gt; numbers = '1 2 3 4 5 6 7 8'
&gt;&gt;&gt; d = {'even':[], 'odd':[]}
&gt;&gt;&gt; mynum = [int(x) for x in numbers.strip().split()]
&gt;&gt;&gt; for k,g in groupby(mynum, lambda x: x % 2):
        if k:
            d['odd'].extend(g)
        else:
            d['even'].extend(g)


&gt;&gt;&gt; d
{'even': [2, 4, 6, 8], 'odd': [1, 3, 5, 7]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>numbers = '1 2 3 4 5 6 7 8'
nums = {}
nums["even"] = [int(i) for i in numbers.split() if int(i) % 2 == 0]
nums["odd"] = [int(i) for i in numbers.split() if int(i) % 2 == 1]
print(nums)
</code></pre>
<p>Output:</p>
<pre><code>{'even': [2, 4, 6, 8], 'odd': [1, 3, 5, 7]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you just want to try it out:</p>
<pre><code>numbers = '1 2 3 4 5 6 7 8'
nums = {'evens': [], 'odds': []}
for number in numbers.split(' '):
    category = 'odds' if int(number) % 2 else 'evens'
    nums[category].append(number)
</code></pre>
<p>But if you want to use it in production: <strong>Readable code is more important than 'short' code</strong> </p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it as a one-liner, but I wouldn't recommend it. Your code is perfectly fine.</p>
<pre><code>[nums['odds'].append(n) if int(n)%2 else nums['evens'].append(n) for n in numbers.split(' ')]
</code></pre>
</div>
<span class="comment-copy">Accomplish what?</span>
<span class="comment-copy">Your code is easy to understand and is only a handful of lines long.  It uses basic building blocks of python coding.  I actually prefer it to some of the more esoteric answers</span>
<span class="comment-copy">That is interesting, thank you for suggestion</span>
<span class="comment-copy">Sure...@micgeronimo..</span>
<span class="comment-copy">list comprehension hacking is not a good advise...</span>
<span class="comment-copy">Yes, I said so in my answer.</span>
