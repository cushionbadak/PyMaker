<div class="post-text" itemprop="text">
<p>I am learning Python, and I am a little confused about the data types of Python. I am reading this line again and again.:</p>
<blockquote>
<p>'Everything is an object in Python'</p>
</blockquote>
<p>This includes integer, floats, string, sets, lists, etc. and when we write like this:  <code>[1, 2, 3]</code>, so we are actually creating an object of <code>list</code> class (or not)?  So, when we write an integer like <code>123</code>, does it mean it's an object of <code>int</code> class? But when we read in books it says that to convert a string into integer we need to use the <code>int</code> method? </p>
<p>But what I am thinking is that <code>int</code> is a class that also accepts the string object in constructor and then we get integer object, right?</p>
<p>So, is <code>int</code> a method or class in Python? </p>
</div>
<div class="post-text" itemprop="text">
<p>Yes <code>int</code> is a class (and it's also called a type; see <a href="https://stackoverflow.com/questions/4162578/python-terminology-class-vs-type">Python : terminology 'class' VS 'type'</a>), and doing <code>int('123')</code> returns an instance of an <code>int</code> object. </p>
<p>However, (in standard Python aka CPython) for small integers (in the range -5 to 256, inclusive) the <code>int</code> constructor doesn't actually build a new integer object. For efficiency reasons the interpreter has a cache of small integers and the constructor simply returns a reference to the existing <code>int</code> object. This topic is discussed in the answers to <a href="https://stackoverflow.com/questions/306313/is-operator-behaves-unexpectedly-with-integers">“is” operator behaves unexpectedly with integers</a>.</p>
<p>Your book that calls <code>int()</code> "the <code>int</code> method" is being a tiny bit sloppy, IMHO. Pedantically speaking, <code>int</code> itself is a class, which is a callable object, and when you call a class that call gets automatically converted into a call to the class's constructor method (that is, its <code>__new__</code> method). But informally it's common to refer to <code>int()</code> as a function call or method call.</p>
<p>I almost forgot about the question in your first paragraph. When we write </p>
<pre><code>[1, 2, 3]
</code></pre>
<p>the interpreter creates the 3 <code>int</code> objects and puts them inside a fresh <code>list</code> instance. (To be more precise, it puts <em>references</em> to the <code>int</code> objects into the list).</p>
<p>Using the standard <a href="https://docs.python.org/3/library/dis.html" rel="nofollow noreferrer"><code>dis</code> module</a> you can disassemble the bytecode for this operation:</p>
<pre><code>from dis import dis
dis('a=[1,2,3]')    
</code></pre>
<p><strong>output</strong></p>
<pre><code>  1           0 LOAD_CONST               0 (1)
              3 LOAD_CONST               1 (2)
              6 LOAD_CONST               2 (3)
              9 BUILD_LIST               3
             12 STORE_NAME               0 (a)
             15 LOAD_CONST               3 (None)
             18 RETURN_VALUE
</code></pre>
<p>So even though we're "just" creating a literal list it's still a fully-fledged <code>list</code> instance object. Unlike some OOP languages, Python doesn't have any "primitive" datatypes that aren't objects, so literal integers and literal strings are also objects. Thus a literal string comes equipped with all the standard string methods. Eg,</p>
<pre><code>print('hello'.lower)
</code></pre>
<p><strong>output</strong></p>
<pre><code>built-in method lower of str object at 0xb72e7880&gt;
</code></pre>
<p>shows us that the literal string <code>'hello'</code> has the standard <code>lower()</code> method. </p>
</div>
<div class="post-text" itemprop="text">
<p>As you can read in the python <a href="https://docs.python.org/2/library/functions.html#int" rel="nofollow">documentation</a>.</p>
<blockquote>
<p>class int(x, base=10) Return an integer object constructed from a
  number or string x, or return 0 if no arguments are given. If x is a
  number, it can be a plain integer, a long integer, or a floating point
  number. If x is floating point, the conversion truncates towards zero.
  If the argument is outside the integer range, the function returns a
  long object instead.</p>
</blockquote>
<p>So it's a class constructor that constructs an int object, depending on the given input x.</p>
</div>
<span class="comment-copy">Try <code>help(int)</code> in the Python interpreter. It's a class.</span>
<span class="comment-copy">thanks smarx, i understood :) i was beginner and different - 2 terms confused me :)</span>
<span class="comment-copy">sidenote: <code>1</code>, <code>"x"</code>, etc. are literals.</span>
<span class="comment-copy">thanks PM 2Ring, that was an useful information :)</span>
<span class="comment-copy">@vikram I've expanded my answer a bit. I hope you like it. :)</span>
<span class="comment-copy">thanks :) , that was useful</span>
<span class="comment-copy">Just a minor mistake (according to me) : <code>the interpreter creates the 3 int objects and puts them inside a fresh list instance.</code> It does not put the objects in the list, it's the references of the objects that is kept in the list.</span>
<span class="comment-copy">@PranjalKumar I've updated my answer. I didn't mention references originally because we always work with object references in Python, and discussing that is a topic for another question. ;)</span>
<span class="comment-copy">thanks DJanssens :), so when we create datatypes literls actually we are creating the objects of their classes ? ex:- x = [] so x is an list class object ? right , and similer in other datatypes, because that's why we can call method on them ? x.index('aa') ?</span>
<span class="comment-copy">Yep @vikram, some objects are created that often that they made a literal for it. Because of that you can do x = 3, which will create an int object under the cover. Same goes for lists and any other python type.</span>
