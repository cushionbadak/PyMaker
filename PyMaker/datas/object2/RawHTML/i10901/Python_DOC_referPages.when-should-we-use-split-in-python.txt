<div class="post-text" itemprop="text">
<p>So I would like to remove the white space from my integer input and store them into a list.</p>
<pre><code>t = raw_input().split()
numbers = [int(x.strip()) for x in t]
numbers = sorted(numbers)
print numbers
</code></pre>
<p>However, the output's still the same when I don't use <code>strip()</code>. Can somebody please explain to me why we should use <code>strip()</code>. I saw a couple of posts on the forum and people also frequently use <code>strip()</code>. I understand <code>split()</code> returns all the numbers by eliminating the white space, and <code>strip()</code> also does the same job.</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't understand the confusion. The <code>split()</code> function return a list of all subparts of your string by removing all occurences of the given argument.</p>
<p>For example, if you have the following string : "Hello world!" and split this one by split("o") then your output will be : ["Hell", " w", "rld!"]</p>
<p>With a code:</p>
<pre><code>str = "Hello world!"
split_str = str.split("o")

print "str has type", type(str), "with the value", str, "\n"
print "split_str has type", type(split_str), "with the value", split_str
</code></pre>
<p>Then, the output will be :</p>
<blockquote>
<p>str has type string with the value Hello world!</p>
<p>split_str has type list with the value ["Hell", " w", "rld!"]</p>
</blockquote>
<p>So, if you have a string that represents a sequence of different integers separated by space: you could operate with this solution.</p>
<pre><code>input_integers = raw_input().split(" ") # splits the given input string
numbers = [int(x) for x in input_integers] # iteration to convert from string to int
numbers = sorted(numbers) # makes a sort on the integer list
print numbers # display
</code></pre>
<p>It's a very basic use of string so, for the next time, have the reflex to read the doc. It's the first tool that you may read to have your solution.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>split(split_item)</code> returns a list with dividing the input by the split_item</p>
<p><code>strip(strip_item)</code> will remove the strip_item from leading and trailing end and will return the remaining item.</p>
<p>eg:</p>
<p><code>a = " how are you "</code></p>
<p><code>a.split()</code> will give <code>['how', 'are', 'you']</code></p>
<p><code>a.strip()</code> will give <code>'how are you'</code></p>
<p>You can specify any string inside the <code>()</code></p>
<p><code>a.split("o")</code> will give <code>[' h', 'w are y', 'u ']</code></p>
<p><code>a.strip("o")</code> will give <code>' how are you '</code> --&gt; same string</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>str.split</code></a> vs <a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow noreferrer"><code>str.strip</code></a></span>
<span class="comment-copy">input: <code>' 1 2 3 '</code>, <code>split: </code>['1','2','3'], strip: <code>'1 2 3'</code></span>
<span class="comment-copy">How did the documentation of <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>split</code></a> and <a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow noreferrer"><code>strip</code></a> make you think that those functions do the same thing?</span>
<span class="comment-copy">FWIW, <code>int()</code> ignores leading &amp; trailing whitespace on a string argument, so you never need to do call <code>strip</code> on strings you pass to <code>int()</code>. OTOH, <code>.split()</code> removes <i>all</i> whitespace so it's pointless calling <code>.strip()</code> on the strings in the list it returns.</span>
