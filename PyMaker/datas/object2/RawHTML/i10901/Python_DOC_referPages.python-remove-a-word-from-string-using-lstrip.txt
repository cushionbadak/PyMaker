<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/599953/how-to-remove-the-left-part-of-a-string">How to remove the left part of a string?</a>
<span class="question-originals-answer-count">
                    17 answers
                </span>
</li>
</ul>
</div>
<p>I have string like: <code>st= 'Product=Product Name 25'</code>
Want to lstrip. output desired:  <code>out= 'Product Name 25'</code></p>
<p>For this i am doing like <code>out = st.lstrip('Product=')</code></p>
<p>Here I am getting as output as <code>out= 'Name 25'</code>.This is I don't want.
As it is removing all occurence in my string but need to remove the first occurence.</p>
<p>Desired output should be: <strong>out= 'Product Name 25'</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>Use split instead:</p>
<pre><code>&gt;&gt;&gt; st= 'Product=Product Name 25'
&gt;&gt;&gt; st.split("Product=")[1]
'Product Name 25'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>replace</code> instead:</p>
<pre><code>st = 'Product=Product Name 25'
print(st.replace('Product=', ''))
&gt;&gt; Product Name 25
</code></pre>
<p>If it wasn't for the <code>'='</code> you could have also take advantage of the <code>count</code> argument that <code>replace</code> has, for example:</p>
<pre><code>st = 'Product Product Name 25'
print(st.replace('Product', '', 1))
&gt;&gt; Product Name 25
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could do <code>out = st.replace('Product=Product','Product')</code> or <code>out = st.replace('Product=Product','')</code>. I tend to find that simple and readable. </p>
</div>
<div class="post-text" itemprop="text">
<p>Just in case you're reading key-value pairs from a text file, there's a python module in the standard library for that: <a href="https://docs.python.org/2/library/configparser.html" rel="nofollow"><code>ConfigParser</code></a></p>
</div>
<div class="post-text" itemprop="text">
<p>According to the documentation, the <code>lstrip</code> function remove the characters in chars.</p>
<pre><code>&gt;&gt;&gt; help(str.lstrip)

Help on method_descriptor:

lstrip(...)
    S.lstrip([chars]) -&gt; str

    Return a copy of the string S with leading whitespace removed.
    **If chars is given and not None, remove characters in chars instead.**
</code></pre>
<p>So <code>st.lstrip('Product=')</code> removes "P", "r", "o", "d", "u", "c", "t", "=" at the beginning of "Product=Product Name 25". Then, the two words are removed!</p>
<p>I think your string represents a "key=value" pair.
The best way to split it is to use <code>split()</code> method:</p>
<pre><code>st = "Product=Product Name 25"

key, value = st.split("=")
print("key: " + key)
print("value: " + value)
</code></pre>
<p>You get:</p>
<pre><code>key: Product
value: Product Name 25
</code></pre>
<p>Only the value:</p>
<pre><code>value = st.split("=")[1]
print("value only: " + value)
</code></pre>
<p>You get:</p>
<pre><code>value only: Product Name 25
</code></pre>
<p>If you want a "left-trim":</p>
<pre><code>p = "Product="
value = st[len(p):]
print("trimmed value: " + value)
</code></pre>
<p>You get:</p>
<pre><code>trimmed value: Product Name 25
</code></pre>
</div>
<span class="comment-copy">That's because <a href="https://docs.python.org/3/library/stdtypes.html#str.lstrip" rel="nofollow noreferrer"><code>lstrip</code></a> accepts a set of characters to remove, not a string pattern to remove.</span>
<span class="comment-copy">You say you want to remove the first occurence. That means the string <code>Product=</code> can occur <i>anywhere</i> in the string, not only at the start?</span>
