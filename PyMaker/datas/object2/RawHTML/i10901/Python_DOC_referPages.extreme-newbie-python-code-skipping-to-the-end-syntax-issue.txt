<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/15446560/main-function-doesnt-run-when-running-script">main() function doesn't run when running script</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>When I run the following code, it skips to the end and simply prints "Thanks for playing!"</p>
<p>I'm sure it's something super obvious that I've missed, any ideas?  I am using Python 2.7.6.</p>
<p>Thanks.</p>
<pre><code>import random

def roll (sides = 6):
    numberRolled = random.randint(1,sides)
    return numberRolled

def main():
    sides = 6
    rolling = True
    while rolling:
        roll_again = raw_input("Press Enter to roll, or Q to quit.")
        if roll_again.lower() != "q":
            numberRolled = roll(sides)
            print ("You rolled a " + numberRolled)

        else:
            rolling = False
print ("Thanks for playing!")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python in itself has no concept of a <code>main</code> method. When it reads your code, it imports random, defines a method named roll, defines another method named main, then prints "Thanks for playing". It does nothing else, unless you tell it to</p>
<p>If you want to call <code>main()</code>, you'll need to do this yourself. Traditionally (to work with other code that might want to import yours as a module), it would look like this:</p>
<pre><code>import random

def roll():
    ...

def main():
    ...

if __name__ == '__main__':
    main()
    print("Thanks for playing")
</code></pre>
<p>That will check if the module name is <code>__main__</code> (which is true for the main script) and call your main method</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to add <code>if __name__ == '__main__:'</code>, and call <code>main()</code> from there:</p>
<pre><code>import random

def roll (sides = 6):
    numberRolled = random.randint(1,sides)
    return numberRolled

def main():
    sides = 6
    rolling = True
    while rolling:
        roll_again = raw_input("Press Enter to roll, or Q to quit.")
        if roll_again.lower() != "q":
            numberRolled = roll(sides)
            print ("You rolled a " + numberRolled)

        else:
            rolling = False

if __name__ == '__main__':
    main()
    print ("Thanks for playing!")
</code></pre>
<p>For details as to why and how it works, please see:<br/>
- <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do">what-does-if-name-main-do</a><br/>
- <a href="https://www.youtube.com/watch?v=sugvnHA7ElY" rel="nofollow noreferrer">tutorial name == main</a><br/>
- <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer">python documentation</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You need to run main</p>
<pre><code>if __name__ == "__main__":
        main()
</code></pre>
</div>
<span class="comment-copy">In Python <code>main()</code> doesn't have any special meaning, you're supposed to call it yourself.</span>
<span class="comment-copy">Thanks for the clear explanation!</span>
<span class="comment-copy">Thank you, that's awesome!  Appreciate the extra help links.</span>
