<div class="post-text" itemprop="text">
<p>I have the following Python code that has 1 command line optional parameter (<code>c</code>) that has an argument and 2 options (<code>a</code> and <code>b</code>) that do not have an argument:</p>
<pre><code>import sys, getopt

def main(argv):
   inputfile = ''
   outputfile = ''
   try:
      opts, args = getopt.getopt(argv,"abc:",["csvfile="])
   except getopt.GetoptError:
      print 'Error in usage - a does not require an argument'
      sys.exit(2)
   for opt, arg in opts:
      print "Raw input is: {}" .format(opt)
      if opt in ("-c", "--csvfile"):
         outputfile = arg
         print 'Output file is {}' .format(outputfile)
      elif opt == '-a':
         print 'Alpha'
      elif opt == '-b':
         print 'Beta'
      print 'User choice is {}' .format(opt.lstrip('-'))

if __name__ == "__main__":
   main(sys.argv[1:])
</code></pre>
<p>When I enter <code>python readwritestore.py -a</code> I get:</p>
<pre><code>Raw input is: -a
Alpha
User choice is a
</code></pre>
<p>This is what I was hoping for if the commandline argument is <code>-a</code>. However, if I enter <code>python readwritestore.py -a csvfile_name</code>, then I get:</p>
<pre><code>Raw input is: -a
Alpha
User choice is a
</code></pre>
<p>This is not what I intended for. In this function, <code>c</code> is the only option that rquires an argument. If I enter <code>a</code> with an argument,
the code should give the error message that I set up</p>
<pre><code>Error in usage - a does not require an argument
</code></pre>
<p>This does not happen for <code>a</code> or <code>b</code>. It is allowing the argument to be entered without raising an error.</p>
<p>If the options that do not require an argument are entered with an argument, then I would like it to raise an error. <code>python readwritestore.py -a text</code>
and <code>python readwritestore.py -b text</code> should raise the error <code>Error in usage - a does not require an argument</code>.</p>
<p>Is there a way to specify this? Is <code>getopt()</code> the correct way to do this?</p>
<p><strong>Additional Information:</strong></p>
<p>I only want <code>python readwritestore.py -c text</code> to work with the argument. For the other 2 options, <code>a</code> and <code>b</code>, the code should raise the error.</p>
</div>
<div class="post-text" itemprop="text">
<p>checking the size of sys.argv (the list of argument supplied when calling the script) can help you checking that : </p>
<pre><code>import sys
import getopt


def main(argv):
    inputfile = ''
    outputfile = ''
    opts, args = getopt.getopt(argv, "abc:", ["csvfile="])
    for opt, arg in opts:
        print "Raw input is:", opt
        if opt in ("-c", "--csvfile"):
            outputfile = arg
            print 'Output file is ', outputfile
        elif opt == '-a':
            if len(sys.argv)=2:
                print 'Alpha'
            else:
                print "incorect number of argument"
        elif opt == '-b':
            if len(sys.argv)=2:
                print 'Beta'
            else:
                print "incorect number of argument"
        print 'User choice is ', opt

if __name__ == "__main__":
    main(sys.argv[1:])
</code></pre>
<p>I know it's not what you asked (argparse) but here is how you could do it with argparse :</p>
<pre><code>from argparse import *

def main():
    parser = ArgumentParser()
    parser.add_argument('-c', '--csvfile', help='do smth with cvsfile')
    parser.add_argument(
        '-a', '--Alpha', help='Alpha', action='store_true')
    parser.add_argument(
        '-b', '--Beta', help='beta smth', action='store_true')
    if args.csvfile:
        print 'Output file is {}' .format(args.csvfile)
    if args.Alpha:
        print 'Alpha'
    if args.Beta:
        print 'Beta'

if __name__ == "__main__":
    main()
</code></pre>
<p>It will raise an error is to many argument are supplied. (also <code>python readwritestore.py -h</code> will display the help just like man in unix)</p>
</div>
<span class="comment-copy">You might want to consider <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code></a>, Python's more intuitive module for this.</span>
<span class="comment-copy">I have a lot of issue managing argument for script without a lib. But with <a href="https://docs.python.org/2/howto/argparse.html" rel="nofollow noreferrer">Argparse</a> this is really easy.  I can post an anwser using this lib if you want.</span>
<span class="comment-copy">Was going to suggest the same, if you have no problems changing, give argparse a shot</span>
<span class="comment-copy">That's exactly the mistake I made! Thanks for catching it. But <code>argparse</code> seems a lot better. I'll have to look into this. Thanks for the suggestion.</span>
<span class="comment-copy">Sorry, I just wanted to ask a followup question. <code>argparse</code> looks really good - I am having trouble finding beginner's level tutorials for it - is there a good one that can be recommended for this?</span>
<span class="comment-copy">@WR I understand you, the first time you use it it seems messed up. To learn it, i just copy-pasted exemple from there Doc, and tried to test value and tried to understand what appends. here is the tiniest exemple i satrted with : <a href="http://stackoverflow.com/questions/7427101/dead-simple-argparse-example-wanted-1-argument-3-results">SO exemple</a></span>
<span class="comment-copy">@WR the thing you have to focus on are  : <code>action=</code> and <code>nargs=</code>. And at first, don't look into subparser</span>
<span class="comment-copy">@WR I stumbled upon that today : <a href="http://null-byte.wonderhowto.com/how-to/train-your-python-part-23-argparse-module-0170874/" rel="nofollow noreferrer">null-byte.wonderhowto.com/how-to/â€¦</a></span>
