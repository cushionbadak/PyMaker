<div class="post-text" itemprop="text">
<p>I have a bunch of code:</p>
<pre><code>statement1(args)
statement2(args)
statement3(args)
statement4(args)
statement5(args)
</code></pre>
<p>I want to divide the statements into blocks and write to a log after each block.  The logging is a bit complex: I want to log things like the running time of each block and the state of a particular data structure after the block executes.  So I created a decorator called <code>log_block</code> which handles all of these details.  Now my code looks like this:</p>
<pre><code>@log_block()
def block1():
    statement1(args)
    statement2(args)

@log_block()
def block2()
    statement3(args)

@log_block()
def block3():
    statement4(args)
    statement5(args)

block1()
block2()
block3()
</code></pre>
<p>This works just fine, but it's a little clunky.  It's annoying that I have to separately call the three block functions, and if I want to share a variable between the blocks then I either have to give the block functions arguments and return statements or use global variables, neither of which is particularly palatable.  What I really want is syntax which looks like this:</p>
<pre><code>@log_block()
    statement1(args)
    statement2(args)

@log_block()
    statement3(args)

@log_block()
    statement4(args)
    statement5(args)
</code></pre>
<p>so that I am decorating the statements directly rather than enclosing them in auxiliary block functions.  Is there any way to achieve something like this?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/reference/datamodel.html#context-managers" rel="noreferrer">Context managers</a> are exactly what you are looking for. You use them with the <code>with</code> statement, and they define code to be run on entering and exiting the with block.</p>
</div>
<span class="comment-copy">That won't work with decorators. Have you looked into <i>"context managers"</i>? <code>with log_block(): ...</code></span>
<span class="comment-copy">What you are trying to achieve? Why just not call the function log_block()? What I understand, you do not intend to modify the behavior, by providing a replacement of the statements following it. So, you are probably overthinking. Moreover, context manager might be useful if you want to maintain a scope under which the statements needs to be executed.</span>
<span class="comment-copy">I had never built a context manager before, it but it turned out to be quite easy and indeed it was exactly what I needed.  Thanks!</span>
