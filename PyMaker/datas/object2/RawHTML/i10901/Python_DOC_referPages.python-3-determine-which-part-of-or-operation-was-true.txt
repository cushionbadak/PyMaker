<div class="post-text" itemprop="text">
<p>I have a functioning piece of code that suits my purposes but I wasn't sure if there was a better way to meet the end I am looking for. Here is my code : </p>
<pre><code>def eitherOne(image1, image2):
    curIm1 = pyautogui.locateOnScreen(image1)
    curIm2 = pyautogui.locateOnScreen(image2)
    while curIm1 == None or curIm2 == None:
        curIm1 = pyautogui.locateOnScreen(image1)
        curIm2 = pyautogui.locateOnScreen(image2)
    if curIm1 != None:
        x, y = pyautogui.center(curIm1)
        pyautogui.click(x,y)
    if curIm2 != None:
        x, y = pyautogui.center(curIm2)
        pyautogui.click(x,y)
</code></pre>
<p>What this is doing is looking for one of two images and then clicking on whichever ends up being true. Is there any method or function I can use that can determine which of the conditions around the "or" returned true without running a subsequent set of "if" operations? Even if the answer is "No, you need the if statements" I'd appreciate it so I am not going on a wild goose chase for no reason.</p>
<p>Thank you for your time!</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd probably do something like this. You create an infinite loop that repeatedly tries one image, then the other, breaking once one of them suceeds.</p>
<pre><code>def eitherOne(image1, image2):
    images = itertools.cycle([image1, image2])
    for img in images:
        curIm = pyautogui.locateOnScreen(img)
        if curIm is not None:
            break
    x, y = pyautogui.center(curIm)
    pyautogui.click(x, y)
</code></pre>
<p>If you prefer a <code>while</code> loop to a <code>for</code> loop,</p>
<pre><code>def eitherOne(image1, image2):
    images = itertools.cycle([image1, image2])
    curIm = None
    while curIm is None:
        curIm = pyautogui.locateOnScreen(next(images))
    x, y = pyautogui.center(curIm)
    pyautogui.click(x, y)
</code></pre>
<p>Or, you can do more with <code>itertools</code> to avoid an explicit loop altogether.</p>
<pre><code>from itertools import cycle, imap, dropwhile

def eitherOne(image1, image2):
    curIm = next(dropwhile(lambda x: x is None, 
                           imap(pyautogui.locateOnScreen,
                                cycle([image1, image2]))))
    x, y = pyautogui.center(curIm)
    pyautogui.click(x, y)
</code></pre>
<p>(I'm mildly surprised you can't use <code>None</code> as the predicate to <code>dropwhile</code>, similar to how you can with <code>filterfalse</code>.)</p>
<hr/>
<p>Update: actually, since <code>filter</code> and <code>map</code> already return iterators in Python 3, there's no need to use <code>dropwhile</code> and <code>imap</code>:</p>
<pre><code>def eitherOne(image1, image2):
    curIm = next(filter(None,
                        map(pyautogui.locateOnScreen,
                            cycle([image1, image2]))))
    x, y = pyautogui.center(curIm)
    pyautogui.click(x, y)
</code></pre>
<hr/>
<p>Bonus content!</p>
<p>To take the functional approach to an extreme, you could write the following in <a href="http://coconut-lang.org" rel="nofollow">coconut</a>:</p>
<pre><code>def eitherOne(image1, image2) = ([images1, images2] |&gt;
                                 cycle |&gt; 
                                 map$(pyautogui.locateOnScreen) |&gt;
                                 filter$(None) |&gt;
                                 next |&gt;
                                 pyautogui.center |*&gt;
                                 pyautogui.click)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A v2.7 example of @tobias_k's comment to your question.  In <a href="https://docs.python.org/3/reference/expressions.html#boolean-operations" rel="nofollow">Boolean Operation</a>s, the <em>value</em> of the <code>True</code> espresion is returned.</p>
<pre><code>class Img(object):
    def __init__(self, name):
        self.name = name
    def __bool__(self):
        return True

c1 = Img('c1')
c2 = None

current_image = c2 or c1
if current_image:
    print(current_image.name)
else:
    print('None')
</code></pre>
<p>In this example, <code>c1</code> is assigned to <code>current_image</code> because it evaluates to <code>True</code> and its <code>name</code> is printed.</p>
</div>
<span class="comment-copy">you do need some kind of <i>secondary structure</i> that is going to go in and look which of the tested conditions were actually <code>True</code>. The thing with your code that is weird is that if for example <code>curIm2 = None</code> you will try updating <code>curIm1</code> too. Is that what you really want?</span>
<span class="comment-copy">Your current logic requires that <i>both</i> <code>curIm1</code> and <code>curIm2</code> not be <code>None</code> before the loop will end, so neither of your <code>if</code> statements afterwards are necessary. Do you mean for the <code>while</code> to use an <code>and</code>, so that it only loops while they're both <code>None</code>?</span>
<span class="comment-copy">Assuming exactly one of them is there, you can do <code>theRightImage = curImg1 or curImg2</code>.</span>
<span class="comment-copy">BTW, after <code>while curIm1 == None or curIm2 == None</code>, shouldn't <i>both</i> images be guaranteed to be non-None?</span>
<span class="comment-copy">@tobias_k , The situation may provide either image, not both. It is an inconsistency with the platform I am working with that I am trying to work around.</span>
