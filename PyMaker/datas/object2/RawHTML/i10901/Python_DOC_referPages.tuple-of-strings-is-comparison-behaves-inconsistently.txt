<div class="post-text" itemprop="text">
<p>I'm confused.</p>
<pre><code>foo = ("empty", 0)
foo[0] is "empty"
</code></pre>
<p>Returns False. This seems to be a problem with keyword strings, as "list" fails as well. "empt" and other strings return true. This only seems to happen with tuples, as if foo is a list the code also returns true</p>
<p>I've tested this with python 3.4.3 and python 3.5 and both behave this way, python2.7 doesn't seem to have this issue though and returns true as expected.</p>
<p>Am I missing some standard on tuples in python3? I've attempted to google-foo this problem but am coming up short.</p>
<p><strong>Edit:
To clear things up, my exact question is why does</strong></p>
<pre><code>foo = ("empty", 0)
foo[0] is "empty"
</code></pre>
<p>return False, but</p>
<pre><code>foo = ("empt", 0)
foo[0] is "empt"
</code></pre>
<p>return True?</p>
</div>
<div class="post-text" itemprop="text">
<p>As the other answers already mentioned: You are comparing strings by identity and this is likely to fail. Assumptions about the identity of string literals can not be made.</p>
<p>However, you actually found a subtle issue.</p>
<pre><code>&gt;&gt;&gt; t = ("list",); t[0] is "list"
False
&gt;&gt;&gt; t = ("notlist",); t[0] is "notlist"
True
&gt;&gt;&gt; t = ("list",)
&gt;&gt;&gt; id(t[0])
140386135830064
&gt;&gt;&gt; id("list")
140386137208400
&gt;&gt;&gt; t[0] is "list"
False
&gt;&gt;&gt; l = ("notlist",)
&gt;&gt;&gt; id(l[0])
140386135830456
&gt;&gt;&gt; id("notlist")
140386135830456
&gt;&gt;&gt; l[0] is "notlist"
True
# interestingly, this works:
&gt;&gt;&gt; ("list",)[0] is "list"
True
</code></pre>
<p><em>(Tested with Python 3.5.1+ interactive shell)</em></p>
<p>This is plainly implementation-dependent behavior by some component of python, presumably lexer or parser.</p>
<p>Bottom-line: Use <code>==</code> for string comparison, as long as you do not depend on object identity.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>a is b
</code></pre>
<p>Equals to</p>
<pre><code>id(a) == id(b)
</code></pre>
<p>As mentioned here <a href="https://stackoverflow.com/questions/1504717/why-does-comparing-strings-in-python-using-either-or-is-sometimes-produce">Comparing strings</a>
Also read this 
<a href="https://docs.python.org/3/library/functions.html#id" rel="nofollow noreferrer">Built-in Functions - id</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Using a literal value with <code>is</code> is almost certainly going to give you an implementation-dependent result. The only literal that Python guarantees to be a singleton is <code>None</code>. Any other literal may or may not resolve to a reference to an existing object. You can't assume that the interpreter will "recognize" the duplicate value and use the same underlying object to represent it.</p>
</div>
<span class="comment-copy">You're <i>comparing strings</i>. Why did you decide to use <code>is</code> and not <code>==</code>?</span>
<span class="comment-copy">Because the two are not literally the same object, which is what <code>is</code> tests for. They are <i>equal.</i></span>
<span class="comment-copy"><code>t = ("list",); t[0] is "list"</code> evalutes to <code>False</code> and <code>t = ("notlist",); t[0] is "notlist"</code> to <code>True</code>. I think this is the core of the question.</span>
<span class="comment-copy">@kalsi Please make the core of your question more clear <b>and prominent</b>. People are downvoting your question because they think you simply mixed up <code>==</code> and <code>is</code>.</span>
<span class="comment-copy">I am seeing the same issue with Python 3.3 but not on 2.7</span>
<span class="comment-copy">You assume correctly; there is no reason to expect <code>("list",)[0] is "list"</code> to be true, either. An interpreter is free to allocate separate objects for each literal.</span>
<span class="comment-copy">"subtle issue" - nope, not an issue. Python makes no promises that this behavior would violate.</span>
<span class="comment-copy">Do you have a better word for this behavior? I know that this is no violation. However, it is not very intuitive, as a string <i>containing</i> a python keyword seems nothing special.</span>
<span class="comment-copy">Neat, the behavior seemed to be dependent on keywords or something. Good to know this falls into the undefined territory with is comparisons.</span>
