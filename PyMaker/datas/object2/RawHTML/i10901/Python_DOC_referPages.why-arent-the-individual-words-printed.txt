<div class="post-text" itemprop="text">
<p>I am writing a mini program and within my program there is a function which reads in a text file and returns the individual words from the sentence. However I am having trouble seeing the individual words printed even though I return them. I don't really get why unless I have a big problem with my whitespace. Can you please help? For your information I am only a beginner. The program asks the user for an input of a filename the program then reads the file in the function should then turn the fie into a list and find the individual words from the list and stores them in that list</p>
<pre><code>file_input = input("enter a filename to read: ")
#unique_words = []
def file(user): 
    unique_words = []
    csv_file = open(user + ".txt","w")
    main_file = csv_file.readlines()
    csv_file.close()


    for i in main_list:
            if i not in unique_words:
                    unique_words.append(i)


    return unique_words

#display the results of the file being read in

print (file(file_input))
</code></pre>
<p>Sorry I am using notepad:</p>
<pre><code>check to see if checking works
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>it seems you only have one word for each line in your file.</p>
<pre><code>def read_file(user): 
    with open(user + ".txt","r") as f:
        data = [ line.strip() for line in f.readlines() ]
    return list( set(data) )
</code></pre>
<p>--update---
if you have more than one word in each line and separated by space</p>
<pre><code>def read_file(user): 
        with open(user + ".txt","r") as f:
            data = [ item.strip() for line in f.readlines() for item in line.split(' ')]
        return list( set(data) )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In fact, I can not reproduce you problem. Given a proper CSV input file <sup>1)</sup> such as</p>
<pre><code>a,b,c,d
e,f,g,h
i,j,k,l
</code></pre>
<p>your program prints this, which apart from the last <code>''</code> seems fine:</p>
<pre><code>['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', '']
</code></pre>
<p>However, you can <em>significantly</em> simplify your code.</p>
<ul>
<li>instead of appending a <code>,</code> to each line, and then joining by <code>""</code>, just join by <code>,</code> (this will also get rid of that last <code>''</code>)</li>
<li><p>do the <code>strip</code> directly in <code>join</code>, using a generator expression</p>
<pre><code>main_string = ",".join(line.strip() for line in main_file)
</code></pre></li>
<li><p>instead of <code>join</code> and then <code>split</code>, use a double-for-loop list comprehension:</p>
<pre><code>main_list = [word for line in csv_file for word in line.strip().split(",")]
</code></pre></li>
<li><p>instead of doing all this by hand, use the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow"><code>csv</code></a> module:</p>
<pre><code>main_list = [word for row in csv.reader(csv_file) for word in row]
</code></pre></li>
<li><p>assuming that order is not important, use a <code>set</code> to remove duplicates:</p>
<pre><code>unique_words = set(main_list)
</code></pre></li>
<li><p>and <em>if</em> order is important, you can (ab)use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow"><code>collections.OrderedDict</code></a>:</p>
<pre><code>unique_words = list(collections.OrderedDict((x, None) for x in main_list))
</code></pre></li>
<li><p>use <code>with</code> to open and close the file</p></li>
</ul>
<p>Putting it all together:</p>
<pre><code>import csv
def read_file(user): 
    with open(user + ".txt") as csv_file:
        main_list = [word for row in csv.reader(csv_file) for word in row]
        unique_words = set(main_list)  # or OrderedDict, see above
        return unique_words
</code></pre>
<hr/>
<p><sup>1)</sup> Update: The reason why it does not work on your "Example text..." file shown in your edit is because that is <em>not</em> a CSV file. CSV mean "comma separated values", but the words in that file a separated by spaces, so you will have to <code>split</code> by spaces instead of by commas:</p>
<pre><code>def read_file(user): 
    with open(user + ".txt") as text_file:
        main_list = [word for line in text_file for word in line.strip().split()]
        return set(main_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If all you want is a list of each word that occurs in the text, you are doing far too much work.  You want something like this:</p>
<pre><code>unique_words = []
all_words = []
with open(file_name, 'r') as in_file:
  text_lines = in_file.readlines() # Read in all line from the file as a list.
for line in text_lines:
  all_words.extend(line.split()) # iterate through the list of lines, extending the list of all words to include the words in this line.
unique_words = list(set(all_words)) # reduce the list of all words to unique words.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can simplify your code by using a <code>set</code> because it will only contain unique elements.</p>
<pre><code>user_file = raw_input("enter a filename to read: ")

#function to read any file
def read_file(user):
    unique_words = set()
    csv_file = open(user + ".txt","r")
    main_file = csv_file.readlines()
    csv_file.close()

    for line in main_file:
        line = line.split(',')
        unique_words.update([x.strip() for x in line])

    return list(unique_words)

#display the results of the file being read in
print (read_file(user_file))
</code></pre>
<p>The output for a file with the contents:</p>
<pre><code>Hello, world1
Hello, world2
</code></pre>
<p>is </p>
<pre><code>['world2', 'world1', 'Hello']
</code></pre>
</div>
<span class="comment-copy">where is <code>individual_words</code> defined? are you after <code>unique_words.append</code>?</span>
<span class="comment-copy">Thats probably what the <code>unique_words</code> is for but OP should <b>move that inside the function</b>.</span>
<span class="comment-copy">@pythonslittlehelper Add a <code>print(main_list)</code> just before the final for loop to make sure it is populated as you expect.</span>
<span class="comment-copy">Why do you append <code>,</code>, join, and then split by <code>,</code>? Just convert the file to a list directly! Also, just do <code>unique_words = set(main_list)</code></span>
<span class="comment-copy">Also, can not reproduce. Using a test file with a few lines with comma-separated values, the program works just fine.</span>
<span class="comment-copy">i would return the <code>list</code> of the <code>set</code> because that's what OP wants.</span>
<span class="comment-copy">@Ev.Kounis thank you.updated</span>
<span class="comment-copy">@Ev.Kounis I would return a <code>set</code>, because a <code>list</code> implies some order, which the <code>set</code> will have destroyed.</span>
<span class="comment-copy">Still does not print the individual words of a sentence</span>
<span class="comment-copy">@pythonslittlehelper I think the issue is the structure of your txt. could you post some sample?</span>
