<div class="post-text" itemprop="text">
<p>If I have a list of objects as such in Python:</p>
<pre><code>li = [obj1, obj2, obj3, ob4, obj5]
</code></pre>
<p>And I append the last two objects to the end of the list again:</p>
<pre><code>li.extend(li[-2:])
</code></pre>
<p>Do duplicates in <code>li</code> now have the same or different addresses? If I make changes to one of the elements of the array that has been appended to the end of the list <code>li</code>, will the duplicate at the end also change? Is there a better way to preform this copy if so?</p>
</div>
<div class="post-text" itemprop="text">
<p>The same addresses - you can check this with <a href="https://docs.python.org/3/library/functions.html#id" rel="nofollow"><code>id</code></a>. If the elements of the list are mutable, then modifying one will modify the other. If the elements of the list are immutable, then you cannot modify them.</p>
<pre><code>li = [1, 1.0, None, ['a', 'b'], ('c', 'd')]

li.extend(li[-2:])
print(li)
# outputs [1, 1.0, None, ['a', 'b'], ('c', 'd'), ['a', 'b'], ('c', 'd')]

li[-2].pop()
print(li)
# outputs [1, 1.0, None, ['a'], ('c', 'd'), ['a'], ('c', 'd')]
# Note that elemnts at indices -2 and -4 have changed since id(li[-2]) == id(li[-4])

print(id(li[-1]) == id(li[-3]))
# True
</code></pre>
<p>To add deep copies, you can use the <a href="https://docs.python.org/2/library/copy.html#copy.deepcopy" rel="nofollow">copy module</a>.</p>
<pre><code>li = [1, 1.0, None, ['a', 'b'], ('c', 'd')]

li.extend(list(map(copy.deepcopy, li[-2:])))
print(li)
# outputs [1, 1.0, None, ['a', 'b'], ('c', 'd'), ['a', 'b'], ('c', 'd')]

li[-2].pop()
print(li)
# outputs [1, 1.0, None, ['a', 'b'], ('c', 'd'), ['a'], ('c', 'd')]
# Note that only the list at index -2 has changed since id(li[-2]) != id(li[-4])
</code></pre>
<p>Note that for immutable objects, <code>copy.deepcopy</code> does not make a copy of the object unless that object has references to other mutable objects. So in the last list <code>id(li[-1]) == id(li[-3])</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, python will <em>reference</em> the same object in memory if you use the <code>extend()</code> method in this way, if this is your desired outcome, then simply execute:</p>
<pre><code>li.extend(li[-2:])
</code></pre>
<p>Example:</p>
<pre><code>a = object()
b = object()
c = object()
d = object()
# Alternatively a, b, c, d = object(), object(), object(), object()
li = [a, b, c, d]
</code></pre>
<p>Now we check out our list <code>li</code>:</p>
<pre><code>[&lt;object object at 0x7fb84a31e0b0&gt;, 
&lt;object object at 0x7fb84a31e0c0&gt;, 
&lt;object object at 0x7fb84a31e0d0&gt;,  # c
&lt;object object at 0x7fb84a31e0e0&gt;]  # d
</code></pre>
<p>Running your operation on <code>li</code>, <em>notice</em> the memory address':</p>
<pre><code>[&lt;object object at 0x7fb84a31e0b0&gt;, 
&lt;object object at 0x7fb84a31e0c0&gt;, 
&lt;object object at 0x7fb84a31e0d0&gt;,
&lt;object object at 0x7fb84a31e0e0&gt;, 
&lt;object object at 0x7fb84a31e0d0&gt;,  # &lt;- Same object as c
&lt;object object at 0x7fb84a31e0e0&gt;]  # &lt;- Same object as d
</code></pre>
<p>You'll notice that the last two elements that were appended are indeed the <strong>same</strong> objects in memory as what the variables <code>c</code> and <code>d</code> are assigned to. This means that making changes to the last two objects in the list will also change the objects at index 2 <em>and</em> 3.</p>
<p>Now if you wanted to add copy's of the last two elements, you could do the following:</p>
<pre><code>extend_elements = [copy.deepcopy(i) for i in li[-2:]]
li.extend(extend_elements)
</code></pre>
<p>Please refer to <a href="https://docs.python.org/2/library/copy.html" rel="nofollow">Python's copy module doc</a> for copy operations.</p>
</div>
<span class="comment-copy">Another part of my question is: 'Is there a way to do this such that a real copy is made?'</span>
<span class="comment-copy">@jackskis updated</span>
<span class="comment-copy">Thank you very much!</span>
<span class="comment-copy">You are welcome :)</span>
