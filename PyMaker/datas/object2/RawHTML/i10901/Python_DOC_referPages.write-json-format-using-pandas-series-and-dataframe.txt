<div class="post-text" itemprop="text">
<p>I'm working with csvfiles. My goal is to write a json format with csvfile information. Especifically, I want to get a similar format as miserables.json</p>
<p>Example:</p>
<pre><code>{"source": "Napoleon", "target": "Myriel", "value": 1},
</code></pre>
<p>According with the information I have the format would be:</p>
<pre><code>[
{
    "source": "Germany",
    "target": "Mexico",
    "value": 1
},
{
    "source": "Germany",
    "target": "USA",
    "value": 2
},
{
    "source": "Brazil",
    "target": "Argentina",
    "value": 3
}
]
</code></pre>
<p>However, with the code I used the output looks as follow:</p>
<pre><code>[
{
    "source": "Germany",
    "target": "Mexico",
    "value": 1
},
{
    "source": null,
    "target": "USA",
    "value": 2
}
][
{
    "source": "Brazil",
    "target": "Argentina",
    "value": 3
}
]
</code></pre>
<p><code>Null</code> source must be Germany. This is one of the main problems, because there are more cities with that issue. Besides this, the information is correct. I just want to remove several list inside the format and replace null to correct country.</p>
<p>This is the code I used using <code>pandas</code> and <code>collections</code>.</p>
<pre><code>csvdata = pandas.read_csv('file.csv', low_memory=False, encoding='latin-1')
countries = csvdata['country'].tolist()
newcountries = list(set(countries))
for element in newcountries:
    bills = csvdata['target'][csvdata['country'] == element]
    frquency = Counter(bills)
    sourceTemp = []
    value = []
    country = element
    for k,v in frquency.items():
        sourceTemp.append(k)
        value.append(int(v))
    forceData = {'source': Series(country), 'target': Series(sourceTemp), 'value': Series(value)}
    dfForce = DataFrame(forceData)
    jsondata = dfForce.to_json(orient='records', force_ascii=False, default_handler=callable)
    parsed = json.loads(jsondata)
    newData = json.dumps(parsed, indent=4, ensure_ascii=False, sort_keys=True)
    # since to_json doesnÂ´t have append mode this will be written in txt file
    savetxt = open('data.txt', 'a')
    savetxt.write(newData)
    savetxt.close()
</code></pre>
<p>Any suggestion to solve this problem are appreciate!</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Consider removing the <code>Series()</code> around the scalar value, country. By doing so and then upsizing the dictionaries of series into a dataframe, you force <code>NaN</code> (later converted to <code>null</code> in json) into the series to match the lengths of other series. You can see this by printing out the dfForce dataframe:</p>
<pre><code>from pandas import Series
from pandas import DataFrame

country = 'Germany'    
sourceTemp = ['Mexico', 'USA', 'Argentina']
value = [1, 2, 3]

forceData = {'source': Series(country),
             'target': Series(sourceTemp),
             'value': Series(value)}
dfForce = DataFrame(forceData)

#     source     target  value
# 0  Germany     Mexico      1
# 1      NaN        USA      2
# 2      NaN  Argentina      3
</code></pre>
<p>To resolve, simply keep country as scalar in dictionary of series:</p>
<pre><code>forceData = {'source': country,
             'target': Series(sourceTemp),
             'value': Series(value)}
dfForce = DataFrame(forceData)

#     source     target  value
# 0  Germany     Mexico      1
# 1  Germany        USA      2
# 2  Germany  Argentina      3
</code></pre>
<hr/>
<p>By the way, you do not need a dataframe object to output to json. Simply use a list of dictionaries. Consider the following using an <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow">Ordered Dictionary collection</a> (to maintain the order of keys). In this way the growing list dumps into a text file without appending which would render an invalid json as opposite facing adjacent square brackets <code>...][...</code> are not allowed.</p>
<pre><code>from collections import OrderedDict
...

data = []

for element in newcountries:
    bills = csvdata['target'][csvdata['country'] == element]
    frquency = Counter(bills)

    for k,v in frquency.items():
        inner = OrderedDict()
        inner['source']  = element
        inner['target'] = k
        inner['value'] = int(v)

        data.append(inner)

newData = json.dumps(data, indent=4)

with open('data.json', 'w') as savetxt:
    savetxt.write(newData)
</code></pre>
</div>
<span class="comment-copy">Can you provide some lines of the input CSV file?</span>
<span class="comment-copy">Thanks, @Parfait Much better.</span>
