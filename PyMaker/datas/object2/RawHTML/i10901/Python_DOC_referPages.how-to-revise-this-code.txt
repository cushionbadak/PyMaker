<div class="post-text" itemprop="text">
<pre><code>score = raw_input("Enter Score:___ (between 0.0 and 1.0)")
try:
    y = float(score)
except:
    print 'Type a Number'      
try:
    if y &gt; 1 or y &lt; 0:
        y = 'Not in Score Range'
    x = int(y)
except:
    print 'Not in Score Range'
else:
    if y &gt;= 0.9:
        print 'A'
    elif y &gt;= .8:
        print 'B'
    elif y &gt;= .7:
        print 'C' 
    elif y &gt;= .6:
        print 'D'       
    else:
        print 'F'
</code></pre>
<p>I'm trying to eliminate invalid input from users. With this code, if the input is not in (0,1), the result shows "not in Score Range", which is good.</p>
<p>However, when the input is not a number, the result shows both "type a number" and "not in Score Range". </p>
<p>I want it to show only the "type a number". Could anyone tell me how to do that? I was thinking about using "elif", but just didn't know how to handle it.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do that by simply adding a <code>flag</code> variable:</p>
<pre><code>score = raw_input("Enter Score:___ (between 0.0 and 1.0)")

flag = 0
try:
    y = float(score)
except:
    print 'Type a Number'      
    flag = 1

if flag == 0:
    try:
        if y &gt; 1 or y &lt; 0:
            y = 'Not in Score Range'
        x = int(y)
    except:
        print 'Not in Score Range'
    else:
        if y &gt;= 0.9:
            print 'A'
        elif y &gt;= .8:
            print 'B'
        elif y &gt;= .7:
            print 'C' 
        elif y &gt;= .6:
            print 'D'       
        else:
            print 'F'
</code></pre>
<p>Update 1:</p>
<p>I am also not much a fan of <code>flag</code>. So this is a flagless way of doing it:</p>
<pre><code>score = raw_input("Enter Score:___ (between 0.0 and 1.0)")

try:
    y = float(score)
except:
    print 'Type a Number'      
else:
    try:
        if y &gt; 1 or y &lt; 0:
            y = 'Not in Score Range'
        x = int(y)
    except:
        print 'Not in Score Range'
    else:
        if y &gt;= 0.9:
            print 'A'
        elif y &gt;= .8:
            print 'B'
        elif y &gt;= .7:
            print 'C' 
        elif y &gt;= .6:
            print 'D'       
        else:
            print 'F'
</code></pre>
<blockquote>
<p>The try ... except statement has an optional else clause, which, when present, must follow all except clauses. It is useful for code that must be executed if the try clause does not raise an exception. For example:</p>
</blockquote>
<p>source: <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow">link</a></p>
<p>Please comment in case of any problem.</p>
<p>Hope it helps : )</p>
</div>
<div class="post-text" itemprop="text">
<p>I personally prefer to work without flags, and simply wrapping it in a function.</p>
<pre><code>def get_classifier():
    score = raw_input("Enter Score:___ (between 0.0 and 1.0)")
    try:
        score = float(score)
    except:
        print('Type a Number')
        return None

    if not 0. &lt;= score &lt;= 1.:
        print('Not in Score Range')
        return None

    if y &gt;= 0.9:
        return 'A'
    elif y &gt;= .8:
        return 'B'
    elif y &gt;= .7:
        return 'C' 
    elif y &gt;= .6:
        return 'D'       
    else:
        return 'F'

# Continuously ask until correct number was given
a = get_classifier()
while a == None:
    a = get_classifier()
print(a)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To add yet another variant, you could differentiate between different exceptions. May be overkill for this problem, but I think in general this is more elegant:</p>
<pre><code>class OutOfRangeException(Exception):
    pass

def stringToScore(string):
    x = float(string)
    if not ( 0 &lt; x &lt; 1):
        raise OutOfRangeException()


score = raw_input("Enter Score:___ (between 0.0 and 1.0)")
try:
    y = stringToScore(score)

    if y &gt;= 0.9:
        print 'A'
    elif y &gt;= .8:
        print 'B'
    elif y &gt;= .7:
        print 'C'
    elif y &gt;= .6:
        print 'D'
    else:
        print 'F'
except ValueError:
    print 'Type a Number'
except OutOfRangeException:
    print 'Not in Score Range'
</code></pre>
</div>
<span class="comment-copy">who so ever had downvoted the question. Can you please comment the reason. It will help other viewers too.</span>
<span class="comment-copy">Nice, never knew that the <code>try...except</code> had an optional else clause.</span>
<span class="comment-copy">cool .. even I didn't know it. Just googled :)</span>
<span class="comment-copy">The flag may not look as "cool" as others, but it shows me a new way of using assignment. The second try...except...else is also really helpful. Thank you.</span>
<span class="comment-copy">Am really very glad that it helped :)</span>
<span class="comment-copy">plus one - a good alternative to my answer : )</span>
<span class="comment-copy">I'd like to suggest <code>if not 0.0 &lt;= score &lt;= 1.0</code></span>
<span class="comment-copy">Thanks for the suggestion, updated</span>
<span class="comment-copy">@WorkofArtiz I am also not much fan of flag approach! I have updated my answer to flagless way also. I guess you will like it.</span>
<span class="comment-copy"><code>exception:</code> should be <code>except:</code></span>
<span class="comment-copy">I need some time to understand it, but thank you!</span>
