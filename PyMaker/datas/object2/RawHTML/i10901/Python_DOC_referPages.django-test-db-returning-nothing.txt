<div class="post-text" itemprop="text">
<p>I'm getting the exact same issue as <a href="https://stackoverflow.com/questions/30232963/when-does-the-database-is-being-destroy-in-django-tests?rq=1">when does the database is being destroy in django tests?</a> , where my test DB seems to be getting deleted between each method. I know it's being cleared out each time I re-run <strong>python3 manage.py test</strong> , but it shouldn't be deleted in the middle of the test.</p>
<p>I'm running Python 3.4.3, Postgresql 9.5.3, Django 1.9</p>
<pre><code>from django.test import TestCase
class myTestCases(TestCase):
    def test_1_load_regions(self):
        MyMethods._updateRegions()
        self.assertEqual(True, len(Region.objects.all()) &gt;= minRegionsExpected)
        print("Regions: %s Languages: %s"%(len(Region.objects.all()), len(Language.objects.all())))

    def test_2_load_languages(self): 
        # Generated by _updateRegions, just check that a few languages exist
        print("Regions: %s Languages: %s"%(len(Region.objects.all()), len(Language.objects.all())))

        self.assertEqual(True, len(Language.objects.all()) &gt;= minLanguagesExpected)
</code></pre>
<p>And I'm get an output like this:</p>
<pre><code>Regions: 11 Languages: 19
.Regions: 0 Languages: 0
F
</code></pre>
<p>That makes me think everything is saving when the first test ends, but somehow when the second test starts everything is cleared out. I would rather avoid re-running everything at the start of each test, but right now I'm stumped at how to get the test DB to actually keep my results...</p>
<p><strong>Edit/Results:</strong> So after some poking in the right direction from the comments and answers, I found what I was looking for. 
<a href="https://docs.djangoproject.com/en/1.9/topics/testing/overview/" rel="nofollow noreferrer">https://docs.djangoproject.com/en/1.9/topics/testing/overview/</a></p>
<blockquote>
<p><strong>Warning</strong></p>
<p>If your tests rely on database access such as creating or querying models, be sure to create your test classes as subclasses of <strong>django.test.TestCase</strong> rather than <strong>unittest.TestCase</strong>.</p>
<p>Using <strong>unittest.TestCase</strong> avoids the cost of running each test in a transaction and flushing the database, but if your tests interact with the database their behavior will vary based on the order that the test runner executes them. This can lead to unit tests that pass when run in isolation but fail when run in a suite.</p>
</blockquote>
<p>I was using test_1, test_2, test_3 as my names to ensure the order of operations, so that wasn't a problem. By swapping from django.test.TestCase to unittest.TestCase I got the results I wanted, with my database persisting between each test case.</p>
</div>
<div class="post-text" itemprop="text">
<p>Actually, according to the <a href="https://docs.djangoproject.com/en/1.9/intro/tutorial05/#testing-our-new-view" rel="nofollow">Django tutorial</a>, the database is rolled back between each test. (See the bottom of the linked section.) </p>
<p>If you're looking to have a common setup between tests, you should consider overriding the <code>TestCase</code> method <code>setUp</code>. This is run before each test function.  The <a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase" rel="nofollow"><code>unittest</code> documentation</a> should be helpful for this, and Django has an <a href="https://docs.djangoproject.com/en/1.9/topics/testing/overview/" rel="nofollow">example</a> in their documentation as well.</p>
</div>
<span class="comment-copy">Er, yes it should be. That is how tests are supposed to work.</span>
<span class="comment-copy">Yes, when you run tests, a new, empty database is created. It does not carry data over from your "primary" db.</span>
<span class="comment-copy">@Justin I know it's different from my main DB, but it should stick around in the Test DB between test_1 and test_2, right? Otherwise what's the point of even having a DB, much less the command line option to not delete the DB after the tests?</span>
<span class="comment-copy">Oh, my apologies, I misunderstood your question.</span>
<span class="comment-copy">@DanielRoseman No, that's not how tests are suppose to work. Otherwise the --keepdb option wouldn't exist, as it would always be saving an empty database, which has no benefit over creating a brand new database.</span>
<span class="comment-copy">Any idea why they would have an arg <b>--keepdb</b> then? Seems pretty useless if the DB is destroyed between each test, you'd be left with a mostly empty DB.</span>
<span class="comment-copy">@Dr.Cyanide Even before the tests start, the database isn't totally empty, though. All of your migrations have to be applied before running the first test to set up the tables in the database. So it looks like the benefit of <code>--keepdb</code> is that it means you don't have to re-run migrations each time. But I'm definitely not an expert on this, so maybe someone else knows more.</span>
