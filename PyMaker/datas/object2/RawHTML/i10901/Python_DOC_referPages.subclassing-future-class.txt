<div class="post-text" itemprop="text">
<p>I would like to subclass the <a href="https://docs.python.org/3/library/concurrent.futures.html#future-objects" rel="nofollow">Future</a> class of the <code>concurrent</code> Python module.</p>
<p>The docs:</p>
<blockquote>
<p>The Future class encapsulates the asynchronous execution of a callable. Future instances are created by Executor.submit().</p>
</blockquote>
<p>The docs of <code>Executor</code> don't explain where it takes the <code>Future</code> class from.</p>
<p>... How can make Executor.submit() force to take my custom Future class?</p>
<h1>Why do I need it?</h1>
<p>I like OOP since it creates readable code. I would like the result to look like this:</p>
<pre><code>for my_future in concurrent.futures.as_completed(...):
    my_future.my_custom_method()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Looking at the code, <a href="https://github.com/python/cpython/blob/3.5/Lib/concurrent/futures/process.py#L437-L456" rel="nofollow">ProcessPoolExecutor.submit()</a> and <a href="https://github.com/python/cpython/blob/3.5/Lib/concurrent/futures/thread.py#L104-L114" rel="nofollow">ThreadPollExecutor.submit()</a>, <code>Excutor.submit()</code> returns an instance of Future, which is defined in <a href="https://github.com/python/cpython/blob/3.5/Lib/concurrent/futures/_base.py#L282" rel="nofollow"><code>conccurent.futures._base.Future</code></a>.</p>
<p>So, here comes the trick. You can subclass and replace the original Future, and then add custom methods in the subclass.</p>
<p>It's doable, but not recommended. It's better to use composition rather than inheritance for this purpose. There is a good chapter on inheritance and composition in <a href="http://learnpythonthehardway.org/book/ex44.html" rel="nofollow">Learn Python the Hard Way</a></p>
<p>Back to the the question, here is a composition example:
</p>
<pre><code>class Myclass(object):
    def __init__(self, workers=3):
         self.executor = concurrent.futures.ProcessPoolExcutor(workers)

    def run(self, job):
        '''Job to be run in a Executor'''

    def submit(self, jobs):
        self.futures = [executor.submit(self, foo, job) for job in jobs]

    def done(self, result):
        '''Dealing with the result'''

    def harvest(self):
        for my_future in concurrent.futures.as_completed(self.futures):
            self.done(my_future.result())
</code></pre>
<p>And then you can subclass <code>MyClass</code> and implement different done method.</p>
</div>
<div class="post-text" itemprop="text">
<p>The use of the <code>Future</code> concrete class is hard-wired into <code>Executor.submit()</code> (whether for <a href="https://hg.python.org/cpython/file/3.5/Lib/concurrent/futures/process.py#l445" rel="nofollow noreferrer">processes</a> or <a href="https://hg.python.org/cpython/file/3.5/Lib/concurrent/futures/thread.py#l109" rel="nofollow noreferrer">threads</a>).  Therefore, I do not think it is possible to do exactly what you are asking.  However, you can return any result from the callable passed to <code>Executor.submit()</code>.  Therefore, put your custom methods in a custom return class:</p>
<pre><code>class my_result(object):
    def my_custom_method(self):
        pass

def x():
    return my_result()

with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
    futures = [executor.submit(x), executor.submit(x)]
    for my_future in concurrent.futures.as_completed(futures):
        my_future.result().my_custom_method()
               # ^^^^^^^^^
</code></pre>
<p><strong>Edit</strong> Or, if you <em>really</em> want your inner loop to be clean, change the last two lines to:</p>
<pre><code>    for my_result in (f.result() for f in concurrent.futures.as_completed(futures)):
                   # ^^^^^^^^^^^^^^^^^^^^
        my_result.my_custom_method()
</code></pre>
<p>The <a href="https://stackoverflow.com/a/6407222/2877364">generator expression</a> <code>(f.result() ... (futures))</code> takes the iterator of futures from <code>as_completed</code> and gives you an iterator of the results of those futures.  You can then loop through those results.</p>
</div>
<span class="comment-copy">Why do you need it? What does your Future do?</span>
<span class="comment-copy">Oh, that's an <i>awful</i> reason to do subclassing. Don't.</span>
<span class="comment-copy">@Elazar please explain why this is awful.</span>
<span class="comment-copy">Because by subclassing you potentially mutate the implementation you know nothing about. You might accidentally override methods you know nothing about, and if you don't, it might break on next release.</span>
<span class="comment-copy">In general, inheritance is last resort. You should favor composition and wrapping/adapting. Even if your reasons are better than syntactic convenience - of a form that is unconventional and therefore only seems to be readable.</span>
<span class="comment-copy">Yes, this works. I just ask myself why the library was not implemented with subclassing in mind. The method <code>as_completed()</code> returns futures. It needs useless code to wrap this. Yes, for this case your sentence "It's better to use composition rather than inheritance for this purpose" applies. But it only applies since the upstream code does not provide an easy way for subclassing. Don't get me wrong. It's not your fault. Thank your for your answer!</span>
<span class="comment-copy">@guettli  You're welcome.From <a href="https://www.python.org/dev/peps/pep-3148/#rationale" rel="nofollow noreferrer">python.org/dev/peps/pep-3148/#rationale</a>, we can know that Python's futures module was heavily influenced by java.util.concurrent package. Don't why upstream doesn't provide an easy way for subclassing, too. Maybe upstream want it simple, maybe subclass is not a major requirement, or maybe it's already done. There is no perfect thing [shrug].</span>
