<div class="post-text" itemprop="text">
<p>I have a phrase like this:</p>
<pre><code>a='Hello I have 4 ducks'
</code></pre>
<p>and I apply <code>str.split</code> to this, so I now I have </p>
<pre><code>&gt;&gt;&gt; a.split()
['Hello','I','have','4','ducks'].
</code></pre>
<p>the problem is that every <code>a.split()[i]</code> is a string, but I need the program to recognize that the 4 is an integer. I need this to know which position the first integer is in, so I do this:</p>
<pre><code>if(isinstance(a[i], float) or isinstance(a[i], int)):
    punt=k
</code></pre>
<p>but every <code>a[i]</code> is a string.</p>
<p>Can I do something that makes my program recognize the integers inside this list?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>demo_list = ['Hello','I','have','4','ducks']
i=0
for temp in demo_list:
    print temp
    if temp.isdigit():
        print "This is digit"
        print "It is present at location - ", i
    i=i+1
</code></pre>
<p>Output:
This is digit.</p>
<p>It is present at location -  3</p>
</div>
<div class="post-text" itemprop="text">
<p>You did not define the output you wish, thus I am not sure whether this is what you want, yet it works: </p>
<pre><code>a='Hello I have 4 ducks'
a=a.split()
ints=[]
strings=[]
for part in a: 
    try: 
        ints.append(int(part))
    except:
        strings.append(part)

ints,strings
</code></pre>
<p>gives:</p>
<pre><code>([4], ['Hello', 'I', 'have', 'ducks'])
</code></pre>
<p>If you want to have a list of types, then you can modify like this:</p>
<pre><code>types = []
for part in a:
    try:
        int(part)
        types.append('int')
    except:
        types.append('string')

types    
</code></pre>
<p>which gives: </p>
<p>types</p>
<pre><code>['string', 'string', 'string', 'int', 'string']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>split()</code> won't do this because it is specific to strings.</p>
<p>However you can post-process the output from <code>split</code> to check whether each element of its output could be cast to an integer or not, <a href="https://stackoverflow.com/q/1265665/850883">per this answer</a>. Something like:</p>
<pre><code>def maybeCoerceInt(s):
    try: 
        return int(s)
    except ValueError:
        return s

tokens = a.split()
for i in range(len(tokens)):
    tokens[i] = maybeCoerceInt(tokens[i])
</code></pre>
<p>Which produces</p>
<pre><code>&gt;&gt;&gt; print(tokens)
['Hello', 'I', 'have', 4, 'ducks']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can use isdigit function</p>
<pre><code>a='Hello I have 4 ducks'
i=0
for  x in a.split():
  i+=1
  if x.isdigit():
     print "Element:"+x
     print "Position:"+i
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Probably using exception is the best way. (see <a href="https://stackoverflow.com/questions/354038/how-do-i-check-if-a-string-is-a-number-float-in-python">here</a>). Other methods like <code>isdigit</code> do not work with negative numbers.</p>
<pre><code>def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        return False
</code></pre>
<p>Also note:</p>
<pre><code>float('NaN')
nan
</code></pre>
<p>Then you could use:</p>
<pre><code>if is_number(a[i]):
    punt=k
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can define your own version of <code>split()</code>. Here i named it <code>my_split()</code>.</p>
<pre><code>def my_split(astring):
    return [find_type(x) for x in astring.split()]


def find_type(word):
    try:
        word_type = int(word)
    except ValueError:
        try:
            word_type = float(word)
        except ValueError:
            word_type = word
    return word_type

a = 'Hello I have 4 ducks weighing 3.5 kg each'

split_type = [x for x in my_split(a)]
print(split_type)
#['Hello', 'I', 'have', 4, 'ducks', 'weighing', 3.5, 'kg', 'each']
print([type(x) for x in my_split(a)])
#[&lt;class 'str'&gt;, &lt;class 'str'&gt;, &lt;class 'str'&gt;, &lt;class 'int'&gt;, &lt;class 'str'&gt;, &lt;class 'str'&gt;, &lt;class 'float'&gt;, &lt;class 'str'&gt;, &lt;class 'str'&gt;]

for i, word in enumerate(split_type):
    if type(word) == int:
        print('Integer found at position {:d}'.format(i + 1))
# Returns: 'Integer found at position 4'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>eval</code> function to do it, here is my anwser:</p>
<pre><code>a = 'Hello I have 4 ducks weighing 3 kg each'
a = a.split()
print a

for i in a:
    try:
        if isinstance(eval(i), int):
            print "the index of {i} is {index}".format(i=i, index=a.index(i))
    except NameError:
        pass

# the results
['Hello', 'I', 'have', '4', 'ducks', 'weighing', '3', 'kg', 'each']
the index of 4 is 3
the index of 3 is 6
</code></pre>
</div>
<span class="comment-copy">Have you looked into the other string methods? <code>str.isdigit</code> will probably be helpful. Or could you <code>try</code> the conversion to integer and handle failures on things like <code>'ducks'</code>?</span>
<span class="comment-copy">So, there is a metod that acts like split() but recognizes the type of every part? Does str.isdigit do that? Thank you</span>
<span class="comment-copy">No, there isn't. You will have to implement that functionality yourself, but there are helpful methods to do it relatively easily.</span>
<span class="comment-copy">Why is this question getting downvoted? Seems like a reasonable concept to me...</span>
<span class="comment-copy">@JeffG the fact that it's received a cavalcade of crap answers in a few minutes suggests that it's the kind of thing the OP should have worked on themselves.</span>
<span class="comment-copy">Thank you! this one function perfectly!</span>
<span class="comment-copy">Note that this would be much simpler with <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a>.</span>
<span class="comment-copy">You are welcome Genís Algans Seguí !!! Please mark it useful if really helpful.</span>
