<div class="post-text" itemprop="text">
<p>Where are <code>__file__</code>, <code>__main__</code>, etc. defined, and what are they officially called? <code>__eq__</code> and <code>__ge__</code> are "magic methods", so right now I'm just referring to them as "magic constants" but I don't even know if that's right.</p>
<p>Google search really isn't turning up anything and even Python's own documentation doesn't seem to have a comprehensive list of them after scanning through the layers of pages.</p>
</div>
<div class="post-text" itemprop="text">
<p>Short answer: <strong>no</strong>. For the longer answer, which got badly out of hand, keep reading...</p>
<hr/>
<p>There is no comprehensive table of those <code>__dunder_names__</code> (also not their official title!), as far as I'm aware. There are a couple of sources:</p>
<ul>
<li><p>The only real <em>"magic constant"</em> is <code>__debug__</code>: it's a <code>SyntaxError</code> to attempt to assign to this name. It's covered <a href="https://docs.python.org/3/library/constants.html#__debug__" rel="noreferrer">in the list of constants</a> and mentioned in the context of <a href="https://docs.python.org/3/reference/simple_stmts.html#the-assert-statement" rel="noreferrer">the <code>assert</code> statement</a>.</p></li>
<li><p>Another module-level name with specific use by a statement is <code>__all__</code>, which is documented alongside <a href="https://docs.python.org/3/reference/simple_stmts.html#the-import-statement" rel="noreferrer">the <code>import</code> statement</a>.</p></li>
<li><p>There are two special modules, documented in the <a href="https://docs.python.org/3/library/index.html" rel="noreferrer">library reference</a>, which have their own pages:</p>
<ul>
<li><p><a href="https://docs.python.org/3/library/__main__.html" rel="noreferrer"><code>__main__</code></a> is the top-level environment in which a script is executed.</p></li>
<li><p><a href="https://docs.python.org/3/library/__future__.html#module-__future__" rel="noreferrer"><code>__future__</code></a> is for accessing language features that aren't yet mandatory (e.g. <code>print_function</code> to replace the <code>print</code> statement in Python 2).</p></li>
</ul></li>
<li><p>Most of the rest (<code>__name__</code>, <code>__file__</code>, etc.) are added to modules by the import system, so are listed in <a href="https://docs.python.org/3/reference/import.html#import-related-module-attributes" rel="noreferrer">the import documentation</a>.</p></li>
</ul>
<p>There are also many related to objects. The basic methods for implementing built-in behaviour (like <code>__eq__</code> and <code>__ge__</code>, as you mention) are listed in <a href="https://docs.python.org/3/reference/datamodel.html" rel="noreferrer">the data model documentation</a>. But plenty of other, more specific names exist; for example, there are several related specifically to exceptions, like <code>__cause__</code> and <code>__traceback__</code>, in <a href="https://docs.python.org/3/library/exceptions.html" rel="noreferrer">the exceptions documentation</a>.</p>
<hr/>
<p>Note that there is nothing particularly "magic" about most of these, they are just regular attributes and can be assigned to as you see fit. However, they are considered reserved for internal Python machinery, so you shouldn't add your own; per <a href="https://docs.python.org/3/reference/lexical_analysis.html#reserved-classes-of-identifiers" rel="noreferrer">the language reference on "reserved classes of identifiers"</a>:</p>
<blockquote>
<p><em>Any</em> use of <code>__*__</code> names, in any context, that does not follow explicitly documented use, is subject to breakage without warning.</p>
</blockquote>
<p>That said, there are a couple in common use that I don't think are actually specified <em>anywhere</em> in the official docs, like <code>__author__</code> and <code>__version__</code>; see e.g. <a href="https://stackoverflow.com/q/1523427/3001761">What is the common header format of Python files?</a> and <a href="https://stackoverflow.com/q/9531136/3001761">What is the origin of __author__?</a> A few have semi-official status via <a href="https://www.python.org/dev/peps/pep-0008/#module-level-dunder-names" rel="noreferrer">PEP-8</a>, but that's about it.</p>
<hr/>
<p>A few others have trodden this path, by the looks of it:</p>
<ul>
<li><a href="https://stackoverflow.com/q/8920341/3001761">Finding a list of all double-underscore variables?</a></li>
<li><a href="https://stackoverflow.com/q/1609716/3001761">I need __closure__</a></li>
<li><a href="https://stackoverflow.com/q/20340815/3001761">Built-in magic variable names/attributes</a></li>
</ul>
</div>
<span class="comment-copy">They aren't "magic constants", so not really. Some are related to imports: <a href="https://docs.python.org/3/reference/import.html#import-related-module-attributes" rel="nofollow noreferrer">docs.python.org/3/reference/â€¦</a>. <code>__main__</code> is here: <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer">docs.python.org/3/library/__main__.html</a>. The object attributes are in the data model: <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">docs.python.org/3/reference/datamodel.html</a></span>
<span class="comment-copy">Try to call <code>globals()</code> function and see the result.</span>
<span class="comment-copy">Out of curiosity, why do you want such a table?  Is it curiosity to know what is there?  Are you wanting to define your own and feel worried that you might conflict with something that is already there?  If the second case, IIRC, <i>all</i> dunder names are reserved by the interpreter and so you should <i>never</i> define new ones.  There are a few which are used so frequently that it is unlikely that the language will ever use them for a different purpose (e.g. <code>__version__</code>) -- though it <i>could</i>...  In any case, you definitely shouldn't go about defining anything new.</span>
<span class="comment-copy">@mgilson Pure curiosity and a desire to know whats out there. I like to study things that some others might consider redundant or useless</span>
<span class="comment-copy">There are also some in <a href="https://docs.python.org/3/library/types.html#types.ModuleType" rel="nofollow noreferrer">here</a></span>
<span class="comment-copy">@MathiasEttinger true, but they are all covered in either the data model (<code>__doc__</code>) or the import docs.</span>
<span class="comment-copy">So since there isnt a comprehensive list, is there at least somewhere (or perhaps you would like to provide them) that gives just the couple of main ones. As a newcomer to python, it would sure be nice to have some sort of table, even if it is incomplete. Or am I doomed to play scavenger hunt?</span>
<span class="comment-copy">@Alan <i>"is there at least somewhere ... that gives just the couple of main ones"</i> - you mean like the resources I'm linking to in the answer?</span>
<span class="comment-copy">@Alan to be honest, I think that most of these you will find out about when you need to know them. As the rule is not to invent <i>any</i> of your own, you won't have any clashes.</span>
