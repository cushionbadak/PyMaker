<div class="post-text" itemprop="text">
<p>I am working in python, and was using <code>dict</code> in my code.</p>
<p>I have case where I always need <code>default</code> value if the give <code>key</code> is not exist or if <code>key</code> exists and it has <code>falsy</code> value.</p>
<p>for example</p>
<pre><code>x = {'a': 'test', 'b': False, 'c': None, 'd': ''}
print x.get('a', [])
test
print x.get('b', []) # Need [] as False is falsy value in python
False 
print x.get('e', []) # This will work fine, because `e` is not valid key
None
print x.get('c', []) 
None
print x.get('c', []) or [] # This gives output which I want
</code></pre>
<p>Instead of check <code>Falsy</code> value in <code>or</code> operation, is there any pythonic way to get my default value?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>or</code> to <em>return</em> your default value is Pythonic. I'm not sure you will get a more <em>readable</em> workaround.</p>
<p>About using <code>or</code> in the <a href="https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not" rel="nofollow">docs</a>:</p>
<blockquote>
<p>This is a <strong>short-circuit</strong> operator, so it only evaluates the second
  argument if the first one is False.</p>
</blockquote>
<p>You must also consider that the value must have been accessed first before it can then be evaluated as <em>Falsy</em> or <em>Truthy</em>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is an ugly hack:</p>
<pre><code>from collections import defaultdict

x = {'a': 'test', 'b': False, 'c': None, 'd': ''}
d = defaultdict(lambda : [], dict((k, v) if v is not None else (k, []) for k, v in x.items()))
print(d['a'])
# test
print(d['b'])
# False
print(d['e'])
# []
print(d['c']) 
# []
</code></pre>
</div>
<span class="comment-copy">It is pythonic; the alternative, if you want it to happen automatically, is to subclass dict and implement <b>getitem</b>.</span>
<span class="comment-copy">I'd note that with <code>x.get('c', []) or []</code>, the first <code>[]</code> is not needed. Since it's falsey, you'll never return it, but rather use the second <code>[]</code> after the <code>or</code>. So just use <code>x.get('c') or []</code>.</span>
<span class="comment-copy">Thanks @Blckknght, but my example also required <code>notexistkey</code> in this case <code>c</code> is available, but if other key is not available then <code>.get('notexistkey', [])</code> will return value.</span>
<span class="comment-copy">I guess I'm confused then.  <code>x.get('e', [])</code> will return <code>[]</code> not <code>None</code> as you're showing. And I can't tell what it is that you actually want from the two versions for key <code>'c'</code>. I'm assuming you want <code>[]</code>, but maybe not? My suggestion of <code>x.get(whatever) or []</code> should work the same as <code>x.get(whatever, []) or []</code> in all cases, it's just a little shorter and maybe a bit more Pythonic.</span>
<span class="comment-copy">Thanks @Blckknght i will use the second approach, thanks again</span>
