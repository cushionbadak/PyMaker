<div class="post-text" itemprop="text">
<p>Is it okay to initialize the state of a <code>multiprocessing.Process</code> subclass in the <code>__init__()</code> method?  Or will this result in duplicate resource utilization when the process forks?  Take this example:</p>
<pre><code>from multiprocessing import Process, Pipe
import time

class MyProcess(Process):
    def __init__(self, conn, bar):
        super().__init__()
        self.conn = conn
        self.bar = bar
        self.databuffer = []

    def foo(self, baz):
        return self.bar * baz

    def run(self):
        '''Process mainloop'''
        running = True
        i = 0
        while running:
            self.databuffer.append(self.foo(i))
            if self.conn.poll():
                m = self.conn.recv()
                if m=='get':
                    self.conn.send((i, self.databuffer))
                elif m=='stop':
                    running = False
            i += 1
            time.sleep(0.1)


if __name__=='__main__':
    conn, child_conn = Pipe()
    p = MyProcess(child_conn, 5)
    p.start()      
    time.sleep(2)

    # Touching the instance does not affect the process which has forked.
    p.bar=1
    print(p.databuffer)

    time.sleep(2)
    conn.send('get')
    i,data = conn.recv()
    print(i,data)
    conn.send('stop')
    p.join()
</code></pre>
<p>As I note in the code, you cannot communicate with the process via the instance <code>p</code>, only via the <code>Pipe</code> so if I do a bunch of setup in the <code>__init__</code> method such as create file handles, how is this duplicated when the process forks?</p>
<p>Does this mean that subclassing <code>multiprocessing.Process</code> in the same way you would a <code>threading.Thread</code> a bad idea?</p>
<p>Note that my processes are long running and meant to handle blocking IO.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is easy to test. In <code>__init__</code>, add the following:</p>
<pre><code> self.file = open('does_it_open.txt'.format(self.count), 'w')
</code></pre>
<p>Then run:</p>
<pre><code> $ strace -f python youprogram.py 2&gt; test.log
 $ grep does_it_open test.log
 open("does_it_open.txt", O_WRONLY|O_CREAT|O_TRUNC|O_CLOEXEC, 0666) = 6
</code></pre>
<p>That means that at least on my system, copying your code and adding that call, the file was opened once, and only once.</p>
<p>For more about the wizardry that is <code>strace</code>, check out <a href="http://jvns.ca/blog/2014/04/20/debug-your-programs-like-theyre-closed-source/" rel="nofollow">this fantastic blog post</a>.</p>
</div>
<span class="comment-copy">I think that <code>strace</code> is only looking at the main process. When I move the <code>open()</code> call to the <code>run()</code> method it does not show up in <code>strace</code>.</span>
<span class="comment-copy">Good catch. Add the <code>-f</code> flag to <a href="http://stackoverflow.com/a/6314744/344286">include forked processes</a>.</span>
<span class="comment-copy">Appending <code>os.getpid()</code> to the filename does confirm that the file is only opened up once. This makes sense since the file handle can be passed to the new process without trouble. I don't believe that the processes share any memory though, so is any memory I allocate in the constructor duplicated?</span>
<span class="comment-copy">You don't allocate memory. You might create new objects, but you don't allocate memory. If you look at <a href="https://docs.python.org/3/library/multiprocessing.html#the-process-class" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a> you'll see that the whole point of the <code>if __name__ == '__main__'</code> block is to prevent that code from running in forked processes - either via threading or multiprocessing.</span>
<span class="comment-copy">It looks like process is forked by default (on Linux at least) so the <code>__name__</code> check should not come into play. If I were to allocate memory in the parent process prior to calling <code>p.start()</code> then that data will simply be memory mapped to the fork until it is written. From my understanding of fork, there will be a copy of the data structure when I try to write to it. Not sure if the copy is partial or total.</span>
