<div class="post-text" itemprop="text">
<p>I have a configuration file which I recover like this:</p>
<pre><code>path = os.path.dirname(os.path.realpath(__file__)) + '/repository/logging.json'
with open(path, 'r') as file:
    logging_config = json.load(file)

dictConfig(logging_config)
</code></pre>
<p>It works but my concern is about packaging the project. What is the best practice to adopt? Is it correct to use a relative path like this or should I create a module and import it instead of loading a <code>json</code> file?</p>
<p>Thanks for your help!</p>
</div>
<div class="post-text" itemprop="text">
<p>Depending of the kind of application you have, you can have several configurations levels.</p>
<p>The common one is two levels :</p>
<ol>
<li><p>Application-wide configuration located:</p>
<ul>
<li>near your application's installation folder (mostly for Windows applications),</li>
<li>in a specific folder (in <code>/etc</code> for Posix applications).</li>
</ul></li>
<li><p>User-wide configuration, located is the user HOME directory.</p></li>
</ol>
<p>For a description of directory structure, see this article on Wikipedia: <a href="https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard" rel="nofollow">Filesystem Hierarchy Structure</a>.</p>
<h2>Common application folder and configuration files</h2>
<p>Mac OS X:
  <code>/Application/&lt;Your App&gt;</code> (app folder),
  <code>/Library/&lt;Your App&gt;</code> (lib folder),
  <code>/Library/Preferences/&lt;Your App&gt;.plist</code> (config file).</p>
<p>Mac OS X (POSIX):
  <code>/usr/bin</code> or <code>/usr/local/bin</code> (app folder),
  <code>/usr/lib</code> or <code>/usr/local/lib</code> (lib folder),
  <code>/etc</code> or <code>/etc/&lt;Your App&gt;</code> (config folder).</p>
<p>Unix:
  <code>/usr/bin</code> or <code>/usr/local/bin</code> (app folder),
  <code>/usr/lib</code> or <code>/usr/local/lib</code> (lib folder),
  <code>/etc</code> or <code>/etc/&lt;Your App&gt;</code> (config folder).</p>
<p>Win XP:
  <code>C:\Program Files\&lt;Your Company&gt;\&lt;Your App&gt;</code></p>
<p>Win 7 (32 bits app):
  <code>C:\Program Files (x86)\&lt;Your Company&gt;\&lt;Your App&gt;</code></p>
<p>Win 7 (64 bits app):
  <code>C:\Program Files\&lt;Your Company&gt;\&lt;Your App&gt;</code></p>
<h2>Common user configuration folders</h2>
<p>Mac OS X:
  <code>~/Library/Application Support/&lt;Your App&gt;</code></p>
<p>Mac OS X (POSIX):
  <code>~/.foo-bar</code></p>
<p>Unix:
  <code>~/.config/foo-bar</code></p>
<p>Unix (POSIX):
  <code>~/.foo-bar</code></p>
<p>Win XP (roaming):
  <code>C:\Documents and Settings\&lt;user&gt;\Local Settings\Application Data\&lt;Your App&gt;</code></p>
<p>Win XP (not roaming):
  <code>C:\Documents and Settings\&lt;user&gt;\Application Data\&lt;Your App&gt;</code></p>
<p>Win 7 (roaming):
  <code>C:\Users\&lt;user&gt;\AppData\Roaming\&lt;Your App&gt;</code></p>
<p>Win 7 (not roaming):
  <code>C:\Users\&lt;user&gt;\AppData\Local\&lt;Your App&gt;</code></p>
<h2>Common application folder and configuration files</h2>
<p>There is a plethora list of configuration formats, but the most common are:</p>
<ul>
<li><p>Mac OS X:
<code>plist</code> format, see: <a href="https://docs.python.org/2/library/plistlib.html" rel="nofollow">Generate and parse Mac OS X .plist files</a></p></li>
<li><p>Unix:
<code>cfg</code> format is similar to <code>ini</code> format,
<code>rc</code> format,
<code>json</code> format, see: <a href="https://docs.python.org/2/library/json.html" rel="nofollow">JSON encoder and decoder</a>,</p></li>
<li><p>Win:
<code>ini</code> format format, see: <a href="https://docs.python.org/2/library/configparser.html" rel="nofollow">Configuration file parser</a></p></li>
</ul>
<p>Take a look at <a href="https://docs.python.org/2/library/fileformats.html" rel="nofollow">File Formats</a>.</p>
<p>For the <code>ini</code> format, I recommend the excellent work of Armin Ronacher, see the <a href="https://github.com/mitsuhiko/python-inifile" rel="nofollow">python-inifile</a> library.</p>
<p>You can also use a Python file as a configuration format.</p>
</div>
<div class="post-text" itemprop="text">
<h1>My App - Two-level configuration example</h1>
<p>Example of project with two levels of configuration files:</p>
<ul>
<li>LEVEL 1: read the configuration from the sources/application's folder (virtualenv)</li>
<li>LEVEL 2: read the configuration from the user HOME</li>
</ul>
<h2>Python project structure</h2>
<p>According to the reference <a href="https://packaging.python.org/distributing/" rel="nofollow">Packaging and Distributing Projects</a>
a (modern) Python project should have the following structure.
In the package directory, I add a <code>__main__.py</code> for the main entry pointand a <code>my_app.ini</code> for configuration.</p>
<p>Here is the structure::</p>
<pre><code>my_app
+-- MANIFEST.in
+-- README.rst
+-- setup.py
+-- setup.cfg
    src/
    \-- my_app/
        +-- __init__.py
        +-- __main__.py
        \-- my_app.ini
</code></pre>
<h2>Project's configuration</h2>
<p>You must add a <code>package_data</code> entry in you <code>setup.py</code> to include "my_app.ini" in your Source Distribution.</p>
<p>For exemple, here is a small <code>setup.py</code>::</p>
<pre><code>from distutils.core import setup

from setuptools import find_packages

setup(
    name='my_app',
    version='0.1.0',
    url="http://url/to/your/project",
    author="My NAME",
    author_email="my@email.com",
    packages=find_packages("src"),
    package_dir={'': 'src'},
    package_data={
        'my_app': ['my_app.ini'],
    },
)
</code></pre>
<p>For backward compatibility with Python 2.6, you also need a <code>MANIFEST.in</code> file.</p>
<p>For instance, we can include all <code>*.ini</code> files::</p>
<pre><code>include src/my_app/*.ini
</code></pre>
<p>To check your configuration, run the following command::</p>
<pre><code>python setup.py sdist
</code></pre>
<h2>Default configuration for logging</h2>
<p>The <code>my_app.ini</code> store the default configuration for logging.</p>
<pre><code>[formatters]
keys=default

[formatter_default]
format=%(asctime)s:%(levelname)s:%(message)s
class=logging.Formatter

[handlers]
keys=console

[handler_console]
class=logging.StreamHandler
formatter=default
args=tuple()

[loggers]
keys=root

[logger_root]
level=DEBUG
formatter=default
handlers=console
</code></pre>
<p>It has only one logger (the <strong>root</strong> logger), with default handlers and formatters.</p>
<h2>Main application</h2>
<p>The <code>__main__.py</code> is the entry point of the application.</p>
<p>Here is the source code of <code>__main__.py</code>::</p>
<pre><code># -*- coding: utf-8 -*-
import logging.config
import os.path

import sys

WIN = sys.platform.startswith('win')


def _posixify(name):
    return '-'.join(name.split()).lower()


def get_app_dir(app_name, roaming=True, force_posix=False):
    if WIN:
        key = roaming and 'APPDATA' or 'LOCALAPPDATA'
        folder = os.environ.get(key)
        if folder is None:
            folder = os.path.expanduser('~')
        return os.path.join(folder, app_name)
    if force_posix:
        return os.path.join(os.path.expanduser('~/.' + _posixify(app_name)))
    if sys.platform == 'darwin':
        return os.path.join(os.path.expanduser(
            '~/Library/Application Support'), app_name)
    return os.path.join(
        os.environ.get('XDG_CONFIG_HOME', os.path.expanduser('~/.config')),
        _posixify(app_name))


def run_my_app():
    # LEVEL 1: read the configuration from the sources/application's folder (virtualenv)
    ini1_path = os.path.join(os.path.dirname(__file__), "my_app.ini")
    logging.config.fileConfig(ini1_path)
    logging.info("Starting...")

    # LEVEL 2: read the configuration from the user HOME
    ini2_path = get_app_dir("MyApp")
    logging.debug('Reading configuration from "{ini2_path}...'.format(ini2_path=ini2_path))
    try:
        logging.config.fileConfig(ini2_path)
    except KeyError:
        logging.warning('Bad logging configuration in "{ini2_path}...'.format(ini2_path=ini2_path))

    logging.info("Running...")


if __name__ == '__main__':
    run_my_app()
</code></pre>
<p>You can add this entry point in your <code>setup.py</code>, like this::</p>
<pre><code>entry_points={
    'console_scripts': [
        'my_cmd = my_app.__main__:run_my_app',
    ],
},
</code></pre>
<p>To test the entry point, you can install it with <code>pip</code>::</p>
<pre><code>pip install -e .
</code></pre>
<p>Then you can test your application::</p>
<pre><code>my_cmd

2016-07-16 15:47:35,613:INFO:Starting...
2016-07-16 15:47:35,613:DEBUG:Reading configuration from "/Users/my_name/Library/Application Support/MyApp...
2016-07-16 15:47:35,613:WARNING:Bad logging configuration in "/Users/my_name/Library/Application Support/MyApp...
2016-07-16 15:47:35,613:INFO:Running...
</code></pre>
<p><em>Note: the <code>my_cmd</code> was launched in a Mac OSX</em>.</p>
<p>Her it is.</p>
<p><strong>EDIT: Project on GitHub</strong></p>
<p>See <a href="https://github.com/tantale/python-ini-cfg-demo" rel="nofollow">Ini Cfg Demo</a></p>
</div>
<span class="comment-copy">You ought to vote… Any issue remaining?</span>
<span class="comment-copy">Both your answers don't address directly the problem. However your comment saying that the best practice is to use a file could be ok if you post it as an answer. My question was: between a file and a module to import, what is the best practice. Your answers are way two obfuscated...</span>
<span class="comment-copy">Thanks for the answer, but I don't see how it is relevant to the question... The recommended thing to do in Python is to use yaml or json file for the logger. The question is more: if I create a package, how I deal with such a file. Is the procedure I use the Pythonic way?</span>
<span class="comment-copy">You ask "What is the best practice to adopt?": the best practice is to use an external configuration file located in a "common" folder (depending of your OS). But you can have a default configuration located in your sources. Using a relative path is OK (make sure you add your *.json file in MANIFEST.in). You can use <code>logging.config.fileConfig</code> to read the logging configuration from a <code>INI</code> file directly.</span>
<span class="comment-copy">Ok but when another user will install it with <code>pip</code> how this will exactly work?</span>
<span class="comment-copy">In your <code>setup.py</code> you need to specify <code>data_files</code>, see: <a href="https://docs.python.org/3/distutils/setupscript.html#installing-additional-files" rel="nofollow noreferrer">docs.python.org/3/distutils/…</a></span>
