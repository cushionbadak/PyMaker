<div class="post-text" itemprop="text">
<p>I have a unsorted array of 10,000 integers from 0 to 9,999. I wanted to apply merge sort on this unsorted array and I wrote the following code-</p>
<pre><code>import sys
def merge_sort(data):
    result = []
    if len(data) &lt;= 1:
        return data
    else:
        mid = int(len(data)/2)
        left = data[:mid]
        right = data[mid:]
        sorted_left = merge_sort(left)
        sorted_right = merge_sort(right)
        i = j = k = 0
        total_len = len(sorted_left) + len(sorted_right)
        for k in range(0, total_len):
            if i &lt; len(sorted_left) and j &lt; len(sorted_right):
                if sorted_left[i] &lt; sorted_right[j]:
                    result.append(sorted_left[i])
                    i = i+1
                    k = k+1
                elif sorted_left[i] &gt; sorted_right[j]:
                    result.append(sorted_right[j])
                    j = j+1
                    k = k+1
            elif i &lt; len(sorted_left):
                result.append(sorted_left[i])
                i = i+1
                k = k+1
            elif j &lt; len(sorted_right):
                result.append(sorted_right[j])
                j = j+1
                k = k+1
            else:
                sys.exit("There is some issue with the code")
        return result
print merge_sort(data)
</code></pre>
<p>So when I sort this data, I get a correct sort order except for a few entries. For example- towards the end I get this kind of result-</p>
<p>[...'9989', '999', '9990', '9991', '9992', '9993', '9994', '9995', '9996', '9997', '9998', '9999']</p>
<p>As you might observe, number '999' is at the wrong place. Not just in this snippet but it happens in other places too like '995' appearing between '9949' and '9950'.So anybody has any idea why this is happening? 
P.S.- I ran this code for debug and it ran without errors producing these results</p>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>data</code> is in strings, not numbers.  To convert to integers, use:</p>
<pre><code>data = [int(x) for x in data]
</code></pre>
<p>Python will "compare" a wide variety of objects.  For example:</p>
<pre><code>&gt;&gt;&gt; "a" &lt; "ab"
True
&gt;&gt;&gt; None &lt; "a"
True
&gt;&gt;&gt; 1 &lt; "a"
True
</code></pre>
<p>If you compare such items, python will not object.</p>
<h3>Comparison in python</h3>
<p>For integers and strings, python has built-in methods for comparisons.  For objects that you create, you can define your own comparison methods.  Methods that you can define for your objects that python will use for comparison  <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow">include</a>:</p>
<pre><code>object.__lt__(self, other)
object.__le__(self, other)
object.__eq__(self, other)
object.__ne__(self, other)
object.__gt__(self, other)
object.__ge__(self, other)
</code></pre>
<p>By defining your own methods for your objects, there is great flexibility.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are ordering strings: <code>'9989' &lt; '999' &lt; '9990'</code>. If you want to order integers, you'll have to convert your input list to integers.</p>
</div>
<div class="post-text" itemprop="text">
<p>Is your data coming in as strings or integers? Based on your sample output, they are strings.</p>
<p>In such a case, '1' comes just before '10'. If you're expecting integers, then you could convert to int to do the sort.</p>
</div>
<span class="comment-copy">It looks like your <code>data</code> is string, not numeric.  String sorting leads to the order that you see.  Try converting data to integer before passing it to <code>merge_sort</code>.</span>
<span class="comment-copy">I'll try to parse it first to numbers</span>
<span class="comment-copy">Try: <code>data = [int(x) for x in data]</code>.</span>
<span class="comment-copy">Yeah, it worked!! it was quite weird for me to know how the code was able to compare the two strings...</span>
