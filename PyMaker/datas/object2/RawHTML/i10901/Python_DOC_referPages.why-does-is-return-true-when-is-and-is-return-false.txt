<div class="post-text" itemprop="text">
<p>From what I've been aware of, using <code>[], {}</code> or <code>()</code> to instantiate objects returns a new instance of <code>list, dict</code> or <code>tuple</code> respectively; a new instance object with <em>a new identity</em>. </p>
<p>This was pretty clear to me until I actually tested it and I noticed that <code>() is ()</code> actually returns <code>True</code> instead of the expected <code>False</code>:</p>
<pre><code>&gt;&gt;&gt; () is (), [] is [], {} is {}
(True, False, False)
</code></pre>
<p>as expected, this behavior is also manifested when creating objects with <a href="https://docs.python.org/3/library/functions.html#func-list" rel="nofollow noreferrer"><code>list()</code></a>, <a href="https://docs.python.org/3/library/functions.html#func-dict" rel="nofollow noreferrer"><code>dict()</code></a> and <a href="https://docs.python.org/3/library/functions.html#func-tuple" rel="nofollow noreferrer"><code>tuple()</code></a> respectively:</p>
<pre><code>&gt;&gt;&gt; tuple() is tuple(), list() is list(), dict() is dict()
(True, False, False)
</code></pre>
<p>The only relevant piece of information I could find in <a href="https://docs.python.org/3/library/stdtypes.html#tuple" rel="nofollow noreferrer">the docs for <code>tuple()</code></a> states:</p>
<blockquote>
<p>[...] For example, <code>tuple('abc')</code> returns <code>('a', 'b', 'c')</code> and <code>tuple([1, 2, 3])</code> returns <code>(1, 2, 3)</code>. <strong>If no argument is given, the constructor creates a new empty tuple, <code>()</code>.</strong></p>
</blockquote>
<p>Suffice to say, this isn't sufficient for answering my question. </p>
<p>So, why do empty tuples have the same identity whilst others like lists or dictionaries do not?</p>
</div>
<div class="post-text" itemprop="text">
<h3>In short:</h3>
<p>Python internally creates a <code>C</code> list of tuple objects whose first element contains the empty tuple. Every time <code>tuple()</code> or <code>()</code> is used, Python will return the existing object contained in the aforementioned <code>C</code> list and not create a new one.</p>
<p>Such mechanism does not exist for <code>dict</code> or <code>list</code> objects which are, on the contrary, <em>recreated from scratch every time</em>.</p>
<p>This is most likely related to the fact that immutable objects (like tuples) cannot be altered and, as such, are guaranteed to not change during execution. This is further solidified when considering that <code>frozenset() is frozenset()</code> returns <code>True</code>; like <code>()</code> an empty <code>frozenset</code> <a href="https://github.com/python/cpython/blob/master/Objects/setobject.c#L1082" rel="nofollow noreferrer">is considered an singleton in the implementation of <code>CPython</code></a>. With mutable objects, <em>such guarantees are not in place</em> and, as such, there's no incentive to cache their zero element instances (i.e their contents could change with the identity remaining the same).</p>
<p><strong>Take note:</strong> <em>This isn't something one should depend on, i.e one shouldn't consider empty tuples to be singletons. No such guarantees are explicitly made in the documentation so one should assume it is implementation dependent.</em> </p>
<hr/>
<h3>How it is done:</h3>
<p>In the most common case, the implementation of <code>CPython</code> is compiled with two macros <a href="https://github.com/python/cpython/blob/master/Objects/tupleobject.c#L11" rel="nofollow noreferrer"><code>PyTuple_MAXFREELIST</code></a> and <a href="https://github.com/python/cpython/blob/master/Objects/tupleobject.c#L8" rel="nofollow noreferrer"><code>PyTuple_MAXSAVESIZE</code></a> set to positive integers. The positive value for these macros results in the creation of an <a href="https://github.com/python/cpython/blob/master/Objects/tupleobject.c#L19" rel="nofollow noreferrer">array of <code>tuple</code> objects</a> with size <code>PyTuple_MAXSAVESIZE</code>.</p>
<p>When <code>PyTuple_New</code> is called with the parameter <code>size == 0</code> it makes sure to <a href="https://github.com/python/cpython/blob/master/Objects/tupleobject.c#L120" rel="nofollow noreferrer">add a new empty tuple</a> to the list if it doesn't already exist:</p>
<pre class="lang-C prettyprint-override"><code>if (size == 0) {
    free_list[0] = op;
    ++numfree[0];
    Py_INCREF(op);          /* extra INCREF so that this is never freed */
}
</code></pre>
<p>Then, if a new empty tuple is requested, the one that is located in the <a href="https://github.com/python/cpython/blob/master/Objects/tupleobject.c#L84" rel="nofollow noreferrer">first position of this list</a> is going to get returned instead of a new instance: </p>
<pre class="lang-C prettyprint-override"><code>if (size == 0 &amp;&amp; free_list[0]) {
    op = free_list[0];
    Py_INCREF(op);
    /* rest snipped for brevity.. */
</code></pre>
<p>One additional reason causing an incentive to do this is the fact that function calls construct a tuple to hold the positional arguments that are going to be used. This can be seen in the <a href="https://github.com/python/cpython/blob/master/Python/ceval.c" rel="nofollow noreferrer"><code>load_args</code></a> function in <code>ceval.c</code>:</p>
<pre class="lang-C prettyprint-override"><code>static PyObject *
load_args(PyObject ***pp_stack, int na)
{
    PyObject *args = PyTuple_New(na);
    /* rest snipped for brevity.. */
</code></pre>
<p>which is called via <a href="https://github.com/python/cpython/blob/master/Objects/setobject.c#L1082" rel="nofollow noreferrer"><code>do_call</code></a> in the same file. If the number of arguments <code>na</code> is zero, an empty tuple is going to be returned. </p>
<p>In essence, this might be an operation that's performed frequently so it makes sense to not reconstruct an empty tuple every single time.</p>
<hr/>
<h3>Further reading:</h3>
<p>A couple more answers shed light on <code>CPython</code>'s caching behaviour with immutables:</p>
<ul>
<li>For integers, another answer that digs in the source can be found <a href="https://stackoverflow.com/a/34964030/4952130">here</a>.</li>
<li>For strings, a handful of answers can be found <a href="https://stackoverflow.com/questions/16756699/is-operator-behaves-differently-when-comparing-strings-with-spaces">here</a>, <a href="https://stackoverflow.com/questions/28329498/why-does-a-space-effect-the-identity-comparison-of-equal-strings">here</a> and <a href="https://stackoverflow.com/questions/24245324/about-the-changing-id-of-a-python-immutable-string">here</a>.</li>
</ul>
</div>
<span class="comment-copy">Related: <a href="//stackoverflow.com/q/14135542">How is tuple implemented in CPython?</a></span>
<span class="comment-copy">@vijrox definitely not considered a bug; my advice is don't depend on this since there is no reference on them being singletons in the <a href="https://docs.python.org/3/reference/index.html#reference-index" rel="nofollow noreferrer">Python Reference Manual</a>. Notable singletons like <code>None</code>, <code>Ellipsis</code> and others are explicitly mentioned, <code>()</code> or <code>frozenset()</code> are not therefore it is safe to assume they are considered an implementation detail which one should not rely on.</span>
<span class="comment-copy">Right -- however I was referring to the part of the documentation you pointed out in the question which says "If no argument is given, the constructor creates a new empty tuple, ()." This behavior seems (to me) to exactly contradict that part of the documentation.</span>
<span class="comment-copy">@vijrox ah yes, that did make me scratch my head too. Maybe it is a case of not trying to make the reference manual too confusing; maybe it is written that way as to not enforce other implementations to have that restriction. I can't really know but, I get the confusion.</span>
<span class="comment-copy">@vijrox no, it's just implementation detail. Empty tuples behave 100% accurate to language specification. Language specification does not say, that empty tuple cannot be a singleton. Same as language specification <i>does not say</i> that small integers have to be cached (and yet, <a href="http://stackoverflow.com/questions/306313/is-operator-behaves-unexpectedly-with-integers">in CPython they are</a>). It's not guaranteed that <code>() is ()</code> is True, same as is not guaranteed that <code>3 is 3</code> is True, but if it does, it does not break any kind of contract between tuple class and they users.</span>
<span class="comment-copy">The pypy implementation for example is different. <code>() is ()</code> still returns True, but <code>() is tuple()</code> or <code>tuple() is tuple()</code> return False. And in jython all three forms return False.</span>
