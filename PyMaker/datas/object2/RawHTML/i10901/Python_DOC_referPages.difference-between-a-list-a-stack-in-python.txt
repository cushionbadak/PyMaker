<div class="post-text" itemprop="text">
<p>What is the difference between a list &amp; a stack in python? </p>
<p>I have read its explanation in the python documentation but there both the things seems to be same?</p>
<pre><code>&gt;&gt;&gt; stack = [3, 4, 5]
&gt;&gt;&gt; stack.append(6)
&gt;&gt;&gt; stack.append(7)
&gt;&gt;&gt; stack
[3, 4, 5, 6, 7]
&gt;&gt;&gt; stack.pop()
7
&gt;&gt;&gt; stack
[3, 4, 5, 6]
&gt;&gt;&gt; stack.pop()
6
&gt;&gt;&gt; stack.pop()
5
&gt;&gt;&gt; stack
[3, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A stack is a <em>data structure concept</em>. The documentation uses a Python <code>list</code> object to implement one. That's why that section of the tutorial is named <em>Using Lists as Stacks</em>.</p>
<p>Stacks are just things you add stuff to, and when you take stuff away from a stack again, you do so in reverse order, first in, last out style. Like a stack of books or hats or... <em>beer crates</em>:</p>
<p><a href="https://www.youtube.com/watch?v=9SReWtHt68A" rel="nofollow noreferrer"><img alt="beer crate stacking" src="https://i.stack.imgur.com/9jJBd.jpg"/></a></p>
<p>See the <a href="https://en.wikipedia.org/wiki/Stack_(abstract_data_type)" rel="nofollow noreferrer">Wikipedia explanation</a>.</p>
<p>Lists on the other hand are far more versatile, you can add and remove elements anywhere in the list. You wouldn't try that with a stack of beer crates with someone on top!</p>
<p>You could implement a stack with a custom class:</p>
<pre><code>from collections import namedtuple

class _Entry(namedtuple('_Entry', 'value next')):
    def _repr_assist(self, postfix):
        r = repr(self.value) + postfix
        if self.next is not None:
            return self.next._repr_assist(', ' + r)
        return r

class Stack(object):
    def __init__(self):
        self.top = None
    def push(self, value):
        self.top = _Entry(value, self.top)
    def pop(self):
        if self.top is None:
            raise ValueError("Can't pop from an empty stack")
        res, self.top = self.top.value, self.top.next
        return res
    def __repr__(self):
        if self.top is None: return '[]'
        return '[' + self.top._repr_assist(']')
</code></pre>
<p>Hardly a list in sight (somewhat artificially), but it is definitely a stack:</p>
<pre><code>&gt;&gt;&gt; stack = Stack()
&gt;&gt;&gt; stack.push(3)
&gt;&gt;&gt; stack.push(4)
&gt;&gt;&gt; stack.push(5)
&gt;&gt;&gt; stack
[3, 4, 5]
&gt;&gt;&gt; stack.pop()
5
&gt;&gt;&gt; stack.push(6)
&gt;&gt;&gt; stack
[3, 4, 6]
&gt;&gt;&gt; stack.pop()
6
&gt;&gt;&gt; stack.pop()
4
&gt;&gt;&gt; stack.pop()
3
&gt;&gt;&gt; stack
[]
</code></pre>
<p>The Python standard library doesn't come with a specific stack datatype; a <code>list</code> object does just fine. Just limit any use to <code>list.append()</code> and <code>list.pop()</code> (the latter with no arguments) to treat a list <em>as</em> a stack.</p>
</div>
<div class="post-text" itemprop="text">
<p>A "stack" is a specific application of <code>list</code>, with operations limited to appending (pushing) to and popping (pulling) from the end.</p>
</div>
<div class="post-text" itemprop="text">
<p>In python lists can also be used as stacks. Think of a list like a combination between your normal lists and a stack.
This is also described <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow">here</a> </p>
<blockquote>
<p>The list methods make it very easy to use a list as a stack, where the
  last element added is the first element retrieved (“last-in,
  first-out”). To add an item to the top of the stack, use append(). To
  retrieve an item from the top of the stack, use pop() without an
  explicit index</p>
</blockquote>
<p>In fact you are using their exact example. Are you confused by the fact that it's a "combined data structure" ?</p>
<p>EDIT: as another user mentioned, it is a concept that is implemented using lists.</p>
</div>
<div class="post-text" itemprop="text">
<p>Stack works in the concept of Last in First out.
We can perform push and pop operations in the stack
But compare to stack list is easy to do all operations like add,insert,delete,concat etc...
Stack is the application of stack and it's like data structures we use it more.</p>
</div>
<span class="comment-copy">Thanks @Martijn...its a great help. Though some people have downrated the question, I as a beginner was confused &amp; found your answer extremely helpful</span>
