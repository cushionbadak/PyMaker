<div class="post-text" itemprop="text">
<p>I have an application that consists of many distinct modules, yet everything is still part of a single application. How can I properly share a logger, so that everything writes to the same file. Do I need to pass a logger around? I'd prefer not to have to do this.</p>
<p>Example project layout:</p>
<pre><code>/
    __init__.py
    main_application.py
    functions_group1.py
    functions_group2.py
    functions_group3.py
</code></pre>
<p>I want to be able to define a <a href="https://docs.python.org/3/howto/logging-cookbook.html" rel="nofollow">logger</a> in <code>main_application.py</code> like so:</p>
<pre><code>logger = logging.getLogger()
logger.setLevel(logging.DEBUG)
file_log = logging.FileHandler('logs/%s.log' % (file_name), 'a', encoding='UTF-8')
file_log.setLevel(file_level)
formatter = logging.Formatter('%(asctime)s - %(levelname)-8s - %(name)-12s - %(message)s')
file_log.setFormatter(formatter)
logger.addHandler(file_log)
</code></pre>
<p>Then be able to use <code>logger</code> in <code>functions_group1</code>, <code>functions_group1</code>, <code>functions_group3</code> which are imported like this in <code>main_application</code>:</p>
<pre><code>import functions_group1
import functions_group2
import functions_group3
</code></pre>
<p>Each of these files has only a list of functions (grouped by similar functionality)</p>
<p><em>functions_group1</em></p>
<pre><code>def function1_dothing():
    # Want to log in here!
    return ...

def function1_dothing2():
    # Want to log in here!
    return ...

def function1_dothing3():
    # Want to log in here!
    return ...
</code></pre>
<p>How can I share the <code>logger</code> across the entire application?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think the point that you are missing is that by default, Python loggers are hierarchical. In your main application you simply create a logger with a fixed name (you can use the name of the main script). For example:</p>
<pre><code>mainapp.py:

import logging

root_logger = logging.getLogger(appname())
# do any logger setup 
</code></pre>
<p>where <code>appname()</code> is defined as:</p>
<pre><code>def appname():
    return os.path.splitext(os.path.basename(sys.argv[0]))[0]
</code></pre>
<p>In any of your modules you can either get the root logger or get a child of the root logger.</p>
<pre><code>moduleX.py:

import logging
module_logger = logging.getLogger("%s.moduleX" % (appname()))
</code></pre>
<p>Any logging that <code>module_logger</code> performs will be handled by the root logger. There's much more you can accomplish with the <code>logging</code> module. Maybe another read of <a href="https://docs.python.org/2/howto/logging.html" rel="nofollow">https://docs.python.org/2/howto/logging.html</a> with a different perspective will be valuable.</p>
</div>
<span class="comment-copy">Have you considered reading <a href="https://docs.python.org/3/howto/logging.html" rel="nofollow noreferrer">docs.python.org/3/howto/logging.html</a>?</span>
<span class="comment-copy">What part do you recommend @jonrsharpe? I know how to create a logger. I don't know how to share it across the entire application without passing the logger object everywhere.</span>
<span class="comment-copy">You don't need to <i>"share a single logger"</i>; each part builds a logger for its <code>__name__</code>, but you can configure what happens to those logs (e.g. writing to a file) at the top level of your module.</span>
<span class="comment-copy">Ok. What if each of my functions_groups is just a list of functions then? It's not a true module with it's own <b>init</b>.py</span>
<span class="comment-copy">I'm not sure what difference you think there is. Have you actually <i>tried</i> configuring a log file and seeing what happens with a call to <code>getLogger</code> everywhere you need to log?</span>
