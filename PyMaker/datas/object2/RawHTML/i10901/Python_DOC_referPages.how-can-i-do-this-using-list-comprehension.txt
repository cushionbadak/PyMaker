<div class="post-text" itemprop="text">
<pre><code>a='abcdcdc'
list_=[x*3 for x in a]
print list_
</code></pre>
<p>This is printing this OK!!!! :</p>
<pre><code>['aaa', 'bbb', 'ccc', 'ddd', 'ccc', 'ddd', 'ccc']
</code></pre>
<p>But How can i print this ? :</p>
<pre><code>['abc','cdc','cdc']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use:</p>
<pre><code>&gt;&gt;&gt; [a[i:i+3] for i in range(0,len(a) - 1,2)]
['abc', 'cdc', 'cdc']
</code></pre>
<p>This means <code>i</code> will get the following values:</p>
<pre><code>&gt;&gt;&gt; list(range(0,len(a) - 1,2))
[0, 2, 4]
</code></pre>
<p>(as the list comprehension loops over <code>i</code>). This means that <code>range(0,len(a) - 1,2)</code> starts at <code>0</code> and in increments of <code>2</code> it'll increase until it reaches the highest value but no more than <code>len(a) - 1</code>. There is a longer explanation in the Python 3 documentation about <a href="https://docs.python.org/3/library/stdtypes.html#typesseq-range" rel="nofollow"><code>range()</code></a> which can be helpful to read.</p>
<p>This means it'll slice <code>a</code> into the desired segments (the notation <code>a[i:j]</code> means it'll take the slice from <code>i</code> to <code>j</code> of <code>a</code>). It'll first take the slice <code>a[0:0 + 3]</code>, then the slice <code>a[2:2 + 3]</code> and lastly the slice <code>a[4:4 + 3]</code> which are the strings that you're looking for.</p>
<p>We're subtracting 1 from the length of <code>a</code> as otherwise we don't end up with the result that we want:</p>
<pre><code>&gt;&gt;&gt; [a[i:i+3] for i in range(0,len(a),2)]
['abc', 'cdc', 'cdc', 'c']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>[a[i]+a[i+1]+a[i+2] for i in range(0,len(a)-1,2)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>list comprehension</code> here might actually be counter to the <em>zen of Python</em> ("simple is better than complex").</p>
<p>Though the other list comprehensions answers are correct, it takes a while to understand why they work.</p>
<p>On the other hand, a code like the following isn't hard to figure out at first glance:</p>
<pre><code>a='abcdcdc'

for i in range(0, len(a), 2):
    b = a[i:i+3]
    if len(b) == 3:
        print(b)
</code></pre>
</div>
<span class="comment-copy">what a weird pattern to try to produce.</span>
<span class="comment-copy">Thanks for the response I'm novice can you tell me how is this working len(a)- 1,2</span>
<span class="comment-copy">@AutomaSha: I have expanded the answer a bit.</span>
<span class="comment-copy">Thanks :) @simeon I didn't know that we could do list kind of step stop beg thing on range function</span>
