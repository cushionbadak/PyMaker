<div class="post-text" itemprop="text">
<p>I am having below two line of log, where I want to have separate regular expression for finding each of them. There is no problem to trigger on the second log line. But I have problem to design expression for the first line. The name <code>Reset Reason test</code> is just an example of test, number of words in it may vary therefore I cannot define here any, more specific pattern, then  just <code>.*</code>.</p>
<pre><code>12.07.2016 13:54:20 SCR_OUTPUT: #### TC_0006 Reset Reason test
12.07.2016 13:54:20 SCR_OUTPUT: #### TC_0006 Reset Reason test done.
</code></pre>
<p>I am having regular expression generally doing the thing I want it to do:</p>
<pre><code>([0-9:. ]*) SCR_OUTPUT: #### (TC_[a-fA-F0-9]{4,5}[:0-9]{0,4}) .*[ ](?!done\.$)
</code></pre>
<p>And I have two cases that I want to differentiate:
I based on example given here.
<a href="https://docs.python.org/3/howto/regex.html#lookahead-assertions" rel="nofollow">https://docs.python.org/3/howto/regex.html#lookahead-assertions</a></p>
<p>Everything work fine when it ends like this: (of course I have to modify my test strings)</p>
<pre><code>[.](?!done$)
</code></pre>
<p>When I try it to be something that suits me more eg: ( my <code>done.</code> has dot at the end)</p>
<pre><code>[.](?!done\.$)
</code></pre>
<p>Then it gets weird.
Another adaptation. <code>done.</code> should be followed with space and not with dot and the result gets crazy. Each line is giving positive findings.</p>
<pre><code>[.](?!done\.$)
</code></pre>
<p>I have been testing that on <a href="http://pythex.org/?regex=(%5B0-9%3A.%20%5D%7B19%7D)%20.*SCR_OUTPUT%3A%20%23%23%23%23%20(TC_%5Ba-fA-F0-9%5D%7B4%2C5%7D%5B%3A0-9%5D%7B0%2C4%7D)%20(.*)%5B%20%5D(%3F!done%5C.%24)&amp;test_string=12.07.2016%2013%3A26%3A11%20SCR_OUTPUT%3A%20%23%23%23%23%20TC_0006%20Reset%20Reason%20test%20sendmail.cf%0A12.07.2016%2013%3A26%3A11%20SCR_OUTPUT%3A%20%23%23%23%23%20TC_0006%20Reset%20Reason%20test%20%20autoexec%0A12.07.2016%2013%3A26%3A11%20SCR_OUTPUT%3A%20%23%23%23%23%20TC_0006%20Reset%20Reason%20test%20autoexec%20bat%0A12.07.2016%2013%3A26%3A11%20SCR_OUTPUT%3A%20%23%23%23%23%20TC_0006%20Reset%20Reason%20test%20foo.bar%0A12.07.2016%2013%3A26%3A11%20SCR_OUTPUT%3A%20%23%23%23%23%20TC_0006%20Reset%20Reason%20test%20first.run%0A12.07.2016%2013%3A26%3A11%20SCR_OUTPUT%3A%20%23%23%23%23%20TC_0006%20Reset%20Reason%20test%20%20run.exe%0A12.07.2016%2013%3A54%3A20%20SCR_OUTPUT%3A%20%23%23%23%23%20TC_0006%20Reset%20Reason%20test%20done%0A12.07.2016%2013%3A54%3A20%20SCR_OUTPUT%3A%20%23%23%23%23%20TC_0006%20Reset%20Reason%20test%20done.&amp;ignorecase=0&amp;multiline=1&amp;dotall=0&amp;verbose=0" rel="nofollow">pythex.org</a>.
Under this link you can find latest version my experiment.</p>
<p>Anyone knows where I am having a bug?
Is it anyhow possible to trigger on such case?
Maybe I should do it in two steps?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to exclude matching lines with <code> done.</code> at the end, you need to use a negative lookahead, and better anchored at the start of the line:</p>
<pre><code>^(?!.* done\.$)([0-9.]+\s+[\d:]+)\s+SCR_OUTPUT:\s*####\s*(TC_\w+).*
 ^^^^^^^^^^^^^^
</code></pre>
<p>See the <a href="https://regex101.com/r/nI7eQ2/2" rel="nofollow">regex demo</a> (remember to use the <code>re.M</code> flag to make <code>^</code> match the beginning of the line rather than the string start if you have multiline string input).</p>
<p>Note I enhanced the regex pattern for the strings you supplied (the initial part turned to <code>([0-9.]+\s+[\d:]+)\s+</code> greatly reduces backtracking, you should consider using something similar if this exact pattern does not match all your data).</p>
<p>Anyway, the core point of interest is the lookahead <code>(?!.* done\.$)</code> that immediately fails the match once it checks if there is a space + <code>done.</code> at the end (<code> done.</code>) after 0+ characters other than a newline, as many as possible (<code>.*</code>).</p>
</div>
<span class="comment-copy">Do you want to fail the match once a line/string ends with <code>done.</code>? <a href="https://regex101.com/r/nI7eQ2/1" rel="nofollow noreferrer"><code>^([0-9:. ]*) .*SCR_OUTPUT: #### (TC_[a-fA-F0-9]{4,5}[:0-9]{0,4}) (?!.* done\.$).*</code></a>?</span>
<span class="comment-copy">Or <a href="https://regex101.com/r/nI7eQ2/2" rel="nofollow noreferrer"><code>^(?!.* done\.$)([0-9.]+\s+[\d:]+)\s+SCR_OUTPUT:\s*####\s*(TC_\w+).*</code></a> (which is faster)?</span>
<span class="comment-copy">Exactly. Whenever a line with "done." is given it should fail on it.</span>
<span class="comment-copy">also, <code>[a-fA-F0-9] = \w</code> and <code>[:0-9] = [:\d]</code></span>
<span class="comment-copy">@pwnsauce I need it to be in hex range therefore \w does not fit here. But thanks.</span>
<span class="comment-copy">Thank you. This is exactly, what does the job. This lesson I haven't seen in any example.</span>
<span class="comment-copy">In case of date a time I put the shortest possible pattern, just to make it short. This part was anyhow unimportant in my problem. But thanks for advise, I will consider it.</span>
<span class="comment-copy">Yes, you can use <code>[0-9.: ]+</code> to make it "shorter", but the <code>.*</code> befire the <code>SCR_OUTPUT</code> was an overkill. Also, bear in mind that "shorter" does not mean "more efficient" and almost never means "more precise" in the regex world.</span>
<span class="comment-copy">That <code>.*</code> is my obvious mistake in this case (lost in experimenting). By "shorter" I meant only the presentation here, to avoid scrolling bar and not to be more efficient.</span>
<span class="comment-copy">I removed this <code>.*</code> from expression <code>...]*) .*SCR_OUT...</code> to not fool anyone.</span>
