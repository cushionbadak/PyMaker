<div class="post-text" itemprop="text">
<p>The following is a simple code showing division of a number: </p>
<pre><code>//pointer.h
#include&lt;stdio.h&gt;
int divide(int , int , int *);

//pointer.c
#include&lt;stdio.h&gt;

__declspec(dllexport) int divide(int a, int b, int *remainder)

{
    int quot = a / b;    
    remainder = a % b;
    return quot;
}
</code></pre>
<p>As shown in the pointer.c, remainder is a pointer type argument whose value will be calculated in the function itself. Can anyone tell me how to get the value linked from this function to the python script as written below:</p>
<pre><code>//python script
import ctypes as C
from ctypes import *
mydll=CDLL('pointer.dll')
mydll.divide.argtypes=(C.c_int,C.c_int,C.POINTER(C.c_int))
mydll.divide.restype=C.c_int
</code></pre>
<p>The below is the error that I'm getting.</p>
<blockquote>
<blockquote>
<blockquote>
<p>mydll.divide(4,32,3)
      Traceback (most recent call last):
        File "", line 1, in 
          mydll.divide(4,32,3)
      ctypes.ArgumentError: argument 3: : expected LP_c_long instance instead of int</p>
</blockquote>
</blockquote>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p><strong>Edit</strong></p>
<p>It looks like you're calling your wrapped divide function with three integer arguments (<code>mydll.divide(4,32,3)</code>).  That won't work.  See the below code for how you probably want to specify the third argument.  The rest of my post may be unnecessary, but I'm leaving it anyway for any future readers with different problems.</p>
<hr/>
<p>I'd first make sure you're compiling your DLL with the same bitness as your python distribution (e.g. 32 vs. 64 bit).</p>
<p>Next, your code has an error in that <code>remainder = a % b;</code> should be <code>*remainder = a % b;</code> (Presumably you're working from <a href="http://chimera.labs.oreilly.com/books/1230000000393/ch15.html" rel="nofollow noreferrer">here</a>.)</p>
<p>Lastly, the following code works for me (under Linux, so using gcc and .so files instead of .dll files):</p>
<p><strong>pointer.c</strong></p>
<pre><code>#include&lt;stdio.h&gt;

int divide(int a, int b, int *remainder)
{
    int quot = a / b;    
    *remainder = a % b;
    return quot;
}
</code></pre>
<p><strong>test.py</strong></p>
<pre><code>import ctypes as C
from ctypes import *
mydll=CDLL('pointer.so')
mydll.divide.argtypes=(C.c_int, C.c_int, C.POINTER(C.c_int))
mydll.divide.restype=C.c_int

rem = C.c_int()
res = mydll.divide(10, 3, rem)

print(res, rem.value)
</code></pre>
<p>When run, this correctly prints <code>(3, 1)</code>.</p>
<hr/>
<p>Notes:</p>
<ul>
<li>Using gcc, this was compiled with: <code>gcc -g -Wall -shared -fPIC -I/usr/include/python2.7/ pointer.c -o pointer.so</code></li>
<li>I was able to remove the <code>__declspec</code> because <a href="https://stackoverflow.com/questions/18276362/why-do-i-need-declspecdllexport-to-make-some-functions-accessible-from-ctype">gcc exports all symbols by default</a>, if you're using a different compiler, you may need to leave it in.</li>
<li>I didn't use a .h file</li>
</ul>
</div>
<span class="comment-copy">Thanks a lot :) The problem got solved. As I'm new to Python ,can you refer me any tutorials or any website where I can learn linking the shared libraries having structures,pointers etc. with the python script ? Because I'm somewhere stuck with one of the structures code also.</span>
<span class="comment-copy">You've seen the link I referenced in the question, right?  (<a href="http://chimera.labs.oreilly.com/books/1230000000393/ch15.html" rel="nofollow noreferrer">This</a>).  The <a href="https://docs.python.org/3/library/ctypes.html" rel="nofollow noreferrer">ctypes documentation</a> is quite helpful, as well as the <a href="https://docs.python.org/2/extending/index.html" rel="nofollow noreferrer">Extending Python...</a> section of the docs.</span>
<span class="comment-copy">Ya I referred to the code that you had mentioned in the link :). Well again thanks, will have a look to the ctypes documentation and the extended python docs.</span>
