<div class="post-text" itemprop="text">
<p>I'm beginning to appreciate the value of lambda expressions in python, particularly when it comes to functional programming, <code>map</code>, <a href="https://stackoverflow.com/a/16509/1533474">functions returning functions</a>, etc. However, I've also been naming lambdas within functions because:</p>
<ul>
<li>I need the same functionality several times and don't want to repeat code.</li>
<li>The functionality is specific to the function in which it appears; its not needed elsewhere.</li>
</ul>
<p>When I encounter a situation that meets the above criteria, I've been writing a named lambda expression in order to DRY and narrowly scope functionality. For example, I am writing a function that operates on some <code>numpy</code> arrays, and I need to do some moderately tedious indexing of all the arrays passed to the function (which can easily fit on a single line). I've written a named lambda expression to do the indexing instead of writing a whole other function or copy/pasting the indexing several times throughout the function definition.</p>
<pre><code>def fcn_operating_on_arrays(array0, array1):
    indexer = lambda a0, a1, idx: a0[idx] + a1[idx]

    # codecodecode

    indexed = indexer(array0, array1, indices)

    # codecodecode in which other arrays are created and require `indexer`

    return the_answer
</code></pre>
<p>Is this an abuse of python's lambdas? Should I just suck it up and define a separate function?</p>
<h1>Edits</h1>
<p>Probably worth linking <a href="https://stackoverflow.com/questions/4831680/function-inside-function">function inside function</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is not Pythonic and <a href="https://www.python.org/dev/peps/pep-0008/#programming-recommendations" rel="nofollow noreferrer">PEP8 discourages it</a>:</p>
<blockquote>
<p>Always use a def statement instead of an assignment statement that
  binds a lambda expression directly to an identifier.</p>
<p>Yes:</p>
<pre><code>def f(x): return 2*x
</code></pre>
<p>No:</p>
<pre><code>f = lambda x: 2*x
</code></pre>
<p>The first form means that the name of the resulting function object is
  specifically <code>'f'</code> instead of the generic <code>'&lt;lambda&gt;'</code>. This is more
  useful for tracebacks and string representations in general. The use
  of the assignment statement eliminates the sole benefit a lambda
  expression can offer over an explicit def statement (i.e. that it can
  be embedded inside a larger expression)</p>
</blockquote>
<p>A rule of thumb for this is to think on its <a href="https://docs.python.org/3/reference/expressions.html#lambda" rel="nofollow noreferrer">definition</a>: lambdas expressions are anonymous functions. If you name it, it isn't anonymous anymore. :)</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I've written a named lambda expression to do the indexing instead of writing a whole other function</p>
</blockquote>
<p>Well, you <em>are</em> writing a whole other function. You're just writing it with a lambda expression.</p>
<p>Why not use <code>def</code>? You get nicer stack traces and more syntactical flexibility, and you don't lose anything. It's not like <code>def</code> can't occur inside another function:</p>
<pre><code>def fcn_operating_on_arrays(array0, array1):
    def indexer(a0, a1, idx):
        return a0[idx] + a1[idx]
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>These are functionally (no pun intended) identical.</p>
<pre><code>indexer = lambda a0, a1, idx: a0[idx] + a1[idx]

def indexer(a0, a1, idx):
    return a0[idx] + a1[idx]
</code></pre>
<p>If you have an aesthetic preference for one or the other, then use it.</p>
</div>
<span class="comment-copy">Not, it is not pythonic. By definition, lambda are anonymous function used for example to simplify usage of function as argument (like in <code>sort()</code>), you can name it but you better should use the known <code>def</code> which is easier to understand.</span>
<span class="comment-copy">How pythonic is <code>def</code> within another function? Whenever I've seen someone do that they were abusing it.</span>
<span class="comment-copy">@joshua.r.smith: Putting a <code>def</code> inside another function is perfectly fine. People do it all the time for decorators or other cases when they want a closure. I personally prefer to avoid it when the inner function doesn't use any closure variables, since it's convenient to be able to access the function for testing or interactive use.</span>
<span class="comment-copy">That's how decorators work, so I'd say "very".</span>
