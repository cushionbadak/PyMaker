<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/972/adding-a-method-to-an-existing-object-instance">Adding a Method to an Existing Object Instance</a>
<span class="question-originals-answer-count">
                    17 answers
                </span>
</li>
</ul>
</div>
<pre><code>&gt;&gt;&gt; class A:
...     def foo(self):
...             print(self)
...
&gt;&gt;&gt;
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.foo()
&lt;__main__.A instance at 0x7f4399136cb0&gt;
&gt;&gt;&gt; def foo(self):
...     print(self)
...
&gt;&gt;&gt; a.foo = foo
&gt;&gt;&gt; a.foo()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: foo() takes exactly 1 argument (0 given)
</code></pre>
<p>I am trying to understand monkey-patching in Python. Please illustrate the reason for the error and how to fix it.</p>
</div>
<div class="post-text" itemprop="text">
<p>As described in <a href="https://stackoverflow.com/questions/972/adding-a-method-to-an-existing-object-instance">this SO answer</a>, you need to use <code>types.MethodType</code> or something similar when doing this, e.g.:</p>
<pre><code>a.foo = types.MethodType(foo, a)
</code></pre>
<p>The reason is that <code>a.foo = foo</code> just sets the function <code>foo</code> as an attribute of <code>a</code> - no "binding magic" is done. To have Python "magically" pass the instance as the first argument when calling <code>a.foo</code>, you need to tell Python to do such binding, e.g. by using <code>types.MethodType</code>.</p>
<p>See the above linked answer for (much) more details.</p>
</div>
<div class="post-text" itemprop="text">
<p>So the tricky thing here is that what you get depends on where the method lives:</p>
<pre><code>class A(object):
    def foo(self):
        print("Hello world")


def patch(self):
    print("patched!")


print(type(A.foo))
a = A()
print(type(a.foo))
</code></pre>
<p>If you run this, you'll get different results on python2.x and 3.x:</p>
<pre><code>$ python ~/sandbox/test.py  # python2.x
&lt;type 'instancemethod'&gt;
&lt;type 'instancemethod'&gt;
$ python3 ~/sandbox/test.py  # python3.x
&lt;class 'function' at 0x100228020&gt;
&lt;class 'method' at 0x10021d0c0&gt;
</code></pre>
<p>But in either case it's clear that <code>a.foo</code> is a method of some sort.</p>
<p>What happens if we try to monkey patch it?</p>
<pre><code>a.foo = patch
print(type(a.foo))  # &lt;type 'function'&gt; (2.x) / &lt;class 'function'&gt; (3.x)
</code></pre>
<p>Ok, now we see that <code>a.foo</code> is of type <code>function</code> (not a method).  So the question is how do we make a method out of out "patch"?  The answer is we use it's descriptor protocol when adding it as an attribute:</p>
<pre><code>a.foo = patch.__get__(a, A)
</code></pre>
<p>For a method on a class, when you do <code>a.some_method</code>, python actually does:  <code>a.some_method.__get__(a, type(a))</code> so we're just reproducing that call sequence here (explicitly).</p>
</div>
<span class="comment-copy">Thanks! Is there any case where a descriptor protocol won't be necessary for monkey patching. In this example, <a href="https://github.com/yasoob/intermediatePython/blob/master/args_and_kwargs.rst#when-to-use-them" rel="nofollow noreferrer">github.com/yasoob/intermediatePython/blob/master/â€¦</a> the guy doesn't use it and it still works.</span>
<span class="comment-copy">@AbhishekBhatia -- you don't need it if you patch the class before you create the instance:  <code>A.foo = patch; a = A(); a.foo()</code> -- However, if you're really going to be doing a lot of patching, I hope it's just in tests and I'd advise you use a mocking library to do it (e.g. <code>mock</code>)</span>
<span class="comment-copy">Thanks! Can you explain why you advised to create a separate library. Not sure I understand you.</span>
<span class="comment-copy">@AbhishekBhatia -- Not <i>create</i>.  <i>use</i> :-).  And the reason is because they've probably done most of the hard work for you already.  I'd suggest <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer"><code>unittest.mock</code></a> (which can be downloaded/installed using <code>pip</code> if you're on python2.x).  Obviously it's good to know how these things work for the occasions when you need them, but most of the time, you can use the library and not worry about the details.</span>
