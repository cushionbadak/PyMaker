<div class="post-text" itemprop="text">
<p>I have a xml file in which elements are present in some random order. I have to compare these files but due to the change in order of elements, it requires manual effort. </p>
<p>I am looking for some way to sort these files. Can someone please give me some pointers/approach to this problem. I tried reading the documentation of lxml (ElementTree and Element classes), but there doesn't seems to be a method by which I can sort the children elements based on xml text.</p>
<p>I can sort the elements based on Name, but within an attribute element, how can the legal element childs can be sorted?</p>
<p>Input :-</p>
<pre><code>&lt;root&gt;
    &lt;attribute Name="attr2"&gt;
            &lt;v&gt;
              &lt;cstat&gt;
                &lt;s&gt;nObjDef2&lt;/s&gt;
                &lt;s&gt;nObjDef1&lt;/s&gt;
              &lt;/cstat&gt;
            &lt;/v&gt;
            &lt;objects&gt;
              &lt;legal&gt;
                &lt;o&gt;otype2&lt;/o&gt;
                &lt;o&gt;otype1&lt;/o&gt;
              &lt;/legal&gt;
            &lt;/objects&gt;
    &lt;/attribute&gt;
    &lt;attribute Name="attr1"&gt;
            &lt;v&gt;
              &lt;cstat&gt;
                &lt;s&gt;nObjDef2&lt;/s&gt;
                &lt;s&gt;nObjDef1&lt;/s&gt;
              &lt;/cstat&gt;
            &lt;/v&gt;
            &lt;objects&gt;
              &lt;legal&gt;
                &lt;o&gt;otype2&lt;/o&gt;
                &lt;o&gt;otype1&lt;/o&gt;
              &lt;/legal&gt;
            &lt;/objects&gt;
    &lt;/attribute&gt;
&lt;/root&gt;
</code></pre>
<p>Expected Output :</p>
<pre><code>&lt;root&gt;
    &lt;attribute Name="attr1"&gt;
            &lt;v&gt;
              &lt;cstat&gt;
                &lt;s&gt;nObjDef1&lt;/s&gt;
                &lt;s&gt;nObjDef2&lt;/s&gt;
              &lt;/cstat&gt;
            &lt;/v&gt;
            &lt;objects&gt;
              &lt;legal&gt;
                &lt;o&gt;otype1&lt;/o&gt;
                &lt;o&gt;otype2&lt;/o&gt;
              &lt;/legal&gt;
            &lt;/objects&gt;
    &lt;/attribute&gt;
    &lt;attribute Name="attr2"&gt;
            &lt;v&gt;
              &lt;cstat&gt;
                &lt;s&gt;nObjDef1&lt;/s&gt;
                &lt;s&gt;nObjDef2&lt;/s&gt;
              &lt;/cstat&gt;
            &lt;/v&gt;
            &lt;objects&gt;
              &lt;legal&gt;
                &lt;o&gt;otype1&lt;/o&gt;
                &lt;o&gt;otype2&lt;/o&gt;
              &lt;/legal&gt;
            &lt;/objects&gt;
    &lt;/attribute&gt;
&lt;/root&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to sort the children by the text, just find the legal nodes and sort the children using <em>child.text</em> as the key:</p>
<pre><code>x = """&lt;root&gt;
    &lt;attribute Name="attr2"&gt;
            &lt;v&gt;
              &lt;cstat&gt;
                &lt;s&gt;nObjDef2&lt;/s&gt;
                &lt;s&gt;nObjDef1&lt;/s&gt;
              &lt;/cstat&gt;
            &lt;/v&gt;
            &lt;objects&gt;
              &lt;legal&gt;
                &lt;o&gt;otype2&lt;/o&gt;
                &lt;o&gt;otype1&lt;/o&gt;
              &lt;/legal&gt;
            &lt;/objects&gt;
    &lt;/attribute&gt;
    &lt;attribute Name="attr1"&gt;
            &lt;v&gt;
              &lt;cstat&gt;
                &lt;s&gt;nObjDef2&lt;/s&gt;
                &lt;s&gt;nObjDef1&lt;/s&gt;
              &lt;/cstat&gt;
            &lt;/v&gt;
            &lt;objects&gt;
              &lt;legal&gt;
                &lt;o&gt;otype2&lt;/o&gt;
                &lt;o&gt;otype1&lt;/o&gt;
              &lt;/legal&gt;
            &lt;/objects&gt;
    &lt;/attribute&gt;
&lt;/root&gt;
"""
</code></pre>
<p>The to sort each node:</p>
<pre><code>from lxml import etree

xml = etree.fromstring(x)

for node in xml.xpath("//legal"):
    node[:] = sorted(node, key=lambda ch: ch.text)
</code></pre>
<p>That will reorder the children:</p>
<pre><code>print(etree.tostring(xml, pretty_print=1).decode("utf-8"))
</code></pre>
<p>Giving you:</p>
<pre><code>&lt;root&gt;
    &lt;attribute Name="attr2"&gt;
            &lt;v&gt;
              &lt;cstat&gt;
                &lt;s&gt;nObjDef2&lt;/s&gt;
                &lt;s&gt;nObjDef1&lt;/s&gt;
              &lt;/cstat&gt;
            &lt;/v&gt;
            &lt;objects&gt;
              &lt;legal&gt;
                &lt;o&gt;otype1&lt;/o&gt;
              &lt;o&gt;otype2&lt;/o&gt;
                &lt;/legal&gt;
            &lt;/objects&gt;
    &lt;/attribute&gt;
    &lt;attribute Name="attr1"&gt;
            &lt;v&gt;
              &lt;cstat&gt;
                &lt;s&gt;nObjDef2&lt;/s&gt;
                &lt;s&gt;nObjDef1&lt;/s&gt;
              &lt;/cstat&gt;
            &lt;/v&gt;
            &lt;objects&gt;
              &lt;legal&gt;
                &lt;o&gt;otype1&lt;/o&gt;
              &lt;o&gt;otype2&lt;/o&gt;
                &lt;/legal&gt;
            &lt;/objects&gt;
    &lt;/attribute&gt;
&lt;/root&gt;
</code></pre>
<p>Or a more efficient approach, use <a href="https://docs.python.org/3/library/operator.html#operator.attrgetter" rel="nofollow">operator.attrgetter</a> in place of the lambda:</p>
<pre><code>from lxml import etree
from operator import attrgetter
xml = etree.fromstring(x)

for node in xml.xpath("//legal"):
    node[:] = sorted(node, key=attrgetter("text"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Consider <a href="https://www.w3.org/Style/XSL/" rel="nofollow">XSLT</a>, the special purpose language designed specifically to manipulate and transform XML files. Python's lxml can run XSLT 1.0 scripts. Specifically, XSLT maintains the <a href="http://www.w3schools.com/xsl/el_sort.asp" rel="nofollow"><code>&lt;xsl:sort&gt;</code></a> method which can be run inside templates:</p>
<pre><code>import lxml.etree as et

# LOAD XML (FROM FILE) AND XSL (FROM STRING)
xml = et.parse('Input.xml')

xslstr = '''&lt;xsl:transform xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"&gt;
&lt;xsl:output version="1.0" encoding="UTF-8" indent="yes" /&gt;
&lt;xsl:strip-space elements="*"/&gt;

  &lt;!-- Identity Transform --&gt;
  &lt;xsl:template match="@*|node()"&gt;
    &lt;xsl:copy&gt;
      &lt;xsl:apply-templates select="@*|node()"/&gt;
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;  

  &lt;!-- Sort Children Text of Nodes --&gt;
  &lt;xsl:template match="cstat|legal"&gt;
    &lt;xsl:copy&gt;
      &lt;xsl:apply-templates select="*"&gt;
        &lt;xsl:sort select="." order="ascending" data-type="text"/&gt;
      &lt;/xsl:apply-templates&gt;
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:transform&gt;'''

xslt = et.fromstring(xslstr)

# TRANSFORM SOURCE TO NEW TREE
transform = et.XSLT(xslt)
newdom = transform(xml)
print(newdom)

# OUTPUT TO FILE
tree_out = et.tostring(newdom, encoding='UTF-8', pretty_print=True, xml_declaration=True)

xmlfile = open('Output.xml','wb')
xmlfile.write(tree_out)
xmlfile.close()
</code></pre>
</div>
<span class="comment-copy">otype2 and nObjDef1 are sortable ?</span>
<span class="comment-copy">@pwnsauce this is just a dummy example. In actual, it will be strings.</span>
<span class="comment-copy">i'm trying to figure out someting with the help of <a href="http://effbot.org/zone/element-sort.htm" rel="nofollow noreferrer">this</a></span>
<span class="comment-copy">actually, In my case, I have same element tag "&lt;o&gt;" and I need to sort based on its text value. In other examples available online, sorted function is handy to obtain the results</span>
