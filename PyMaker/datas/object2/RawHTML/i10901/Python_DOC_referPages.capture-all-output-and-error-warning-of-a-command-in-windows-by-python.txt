<div class="post-text" itemprop="text">
<p>In bash shell of Linux, I can read a command (from file), then execute the command and write all the output, error, and return code to a file. Can I do that by using python in windows.</p>
</div>
<div class="post-text" itemprop="text">
<p>Of course you can.  There are many ways to do this.</p>
<p>Assuming you had a text file named <code>commands</code> that contained a command on each line.  You could do something like this:</p>
<ul>
<li>open the input file</li>
<li>read the next command name from the file</li>
<li>execute the command using <code>subprocess</code></li>
<li>redirect stderr to stdout</li>
<li>capture the combined output</li>
<li>if the command succeeded set return code to 0, otherwise capture the return code from the exception that is thrown.</li>
<li>write the return code and output to file </li>
</ul>
<p>You will want to use:
<a href="https://docs.python.org/2/library/subprocess.html" rel="nofollow">https://docs.python.org/2/library/subprocess.html</a>
or
<a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow">https://docs.python.org/3/library/subprocess.html</a></p>
<p>for example:</p>
<pre><code>import shlex
import subprocess

with open('commands.txt') as fin:
    for command in fin:
        try:
            proc = subprocess.Popen(
                shlex.split(command),
                stderr=subprocess.STDOUT,
                stdout=subprocess.PIPE
            )
            returncode = 0
            output = proc.communicate()[0]
        except subprocess.CalledProcessError as e:
            returncode = e.returncode
            output = e.output
        with open('output.txt', 'w') as fout:
            fout.write('{}, {}'.format(returncode, output))
</code></pre>
</div>
<span class="comment-copy">If it just writes to <code>stdout</code> and <code>stderr</code>, then of course you can simply use <code>subprocess.Popen</code>; set these standard files to <code>subprocess.PIPE</code>; and call the <code>communicate</code> method of the <code>Popen</code> instance. But if it outputs directly to the console by opening <code>\\.\CONOUT$</code>, then you'll need to scrape the console's output via <a href="https://msdn.microsoft.com/en-us/library/ms684965" rel="nofollow noreferrer"><code>ReadConsoleOutput</code></a>. It may also output debug messages using <a href="https://msdn.microsoft.com/en-us/library/aa363362" rel="nofollow noreferrer"><code>OutputDebugString</code></a>, in which case you'll need to use the debugger API to capture these messages.</span>
<span class="comment-copy">@eryksun, why jam an entire answer into a comment?  what you wrote is an attempted answer.  When you do that, it's confusing to anyone reading it.  I'm sure you are trying to be helpful, but IMO it degrades the usefulness of SO.  Also there is no markdown formatting in comments...which makes them difficult to read when you include examples.  So...if you have an actual comment or clarifying question, use the comment field.  Otherwise, just answer the question.</span>
<span class="comment-copy">@CoreyGoldberg, it's just comment, which may help someone that's writing a full answer. I don't have the time to write (and maintain) satisfying answers for most of the questions I look at. So I provide a bit of information that I think is helpful, or provide feedback on existing answers to improve them.</span>
<span class="comment-copy">I don't recommend using <code>shlex.split</code> in Windows. That's for splitting a command-line that's intended for a POSIX shell. If you have a command-line already, you can pass that directly in Windows; you don't need to split it into a list. <code>subprocess.list2cmdline</code> will just have to rebuild it into a command line.</span>
