<div class="post-text" itemprop="text">
<p>I have a binary file that contains 4-byte binary values that represent a set of two <code>short int</code> each. I know that I can unpack a single 4-byte binary value into two short integers like this:</p>
<pre><code>from struct import unpack

fval = b'\xba\x1e\x99\x01' #actualy read from some file
qualdip, azi = unpack('hh', fval)
print(type(qualdip), qualdip)
print(type(azi), azi)

&gt;&gt;&gt; &lt;class 'int'&gt; 7866
&gt;&gt;&gt; &lt;class 'int'&gt; 409
</code></pre>
<p>Now, I want to unpack the entire buffer. For the moment I am doing:</p>
<pre><code>qualdips = []
azis = []
with open(bfile, 'rb') as buf:
    fval = buf.read(4)
    while fval:
        qualdip, azi = unpack('hh', fval)
        azis.append(azi)
        qualdips.append(qualdip)
        fval = buf.read(4)
</code></pre>
<p>Which takes over a minute for a 277MB file and seems to produce a huge memory overhead.</p>
<p>I would like to unpack the entire filebuffer directly into the two variables. How do I accomplish this?</p>
<p>I suspect that <a href="https://docs.python.org/2/library/struct.html" rel="nofollow" title="optional title"><code>struct.unpack_from</code></a> is my friend, but I am unsure how to formulate the format.</p>
<pre><code>with open(bfile, 'rb') as buf:
    qualdip, azi = unpack_from('hh', buf)
</code></pre>
<p>only extracts two values, and (i know the number of elements of my file)</p>
<pre><code>with open(bfile, 'rb') as buf:
    qualdip, azi = unpack_from('72457091h72457091h', buf)
</code></pre>
<p>expects this ridiculous amount of output variables. So:</p>
<p>How <em>do</em> I unpack the entire filebuffer directly into the two variables?</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know a way to unpack the values directly into two lists, but you can unpack the entire file into a tuple and then slice it in two:</p>
<pre><code>fval = b'\xba\x1e\x99\x01' * 3
unpacked= unpack('3h3h', fval)
qualdip = unpacked[0::2]
azi = unpacked[1::2]
</code></pre>
<p>Alternatively, use <a href="https://docs.python.org/2/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>islice</code></a> to create an <a href="https://docs.python.org/3/tutorial/classes.html#iterators" rel="nofollow noreferrer">iterator</a>, which will reduce memory consumption.</p>
<pre><code>qualdip = islice(unpacked, 0, None, 2)
azi = islice(unpacked, 1, None, 2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think this might be a faster way to do it:</p>
<pre><code>import os
import struct

def pairwise(iterable):
    "s -&gt; (s0,s1), (s2,s3), (s4, s5), ..."
    a = iter(iterable)
    return zip(a, a)

bfile = 'bfile.bin'
filesize = os.stat(bfile).st_size
numvals = filesize // 2

with open(bfile, 'rb') as bf:
    fmt = '{}h'.format(numvals)
    values = struct.unpack(fmt, str(bf.read()))

qualdips, azis = zip(*pairwise(values))
</code></pre>
</div>
<span class="comment-copy">Have you profiled your code to see where the overhead is? If the i/o operations are taking the longest time, you might try reading from the file in larger blocks.</span>
<span class="comment-copy">islice only returns the iterator object, but I need the actual values. Slicing works great. I now use <code>qualdip = unpacked[0::2]</code>, <code>azi = unpacked[1::2]</code>.</span>
<span class="comment-copy">I edited your answer accordingly, however, I am unsure about how to get the actual values from the islice object generated in the second block of the answer.</span>
<span class="comment-copy">@wsj <code>islice</code> is a <a href="http://stackoverflow.com/documentation/python/292/generators-yield#t=201607221128531431962">generator object</a>, you can iterate over it with <code>for value in azi:</code> or get the values one by one with <code>next(azi)</code>.</span>
<span class="comment-copy">Thanks, I need all the values in the grid at once in order to plot them. So the slicing part is the answer I have looked for.</span>
