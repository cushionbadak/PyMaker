<div class="post-text" itemprop="text">
<p>I am trying to use Python's (2.7) <code>eval</code> in a (relatively) safe manner. Hence, I defined:</p>
<pre><code>def safer_eval(string):
    """Safer version of eval() as globals and builtins are inaccessible"""
    return eval(string, {'__builtins__': {}})
</code></pre>
<p>As expected, the following does not work any more:</p>
<pre><code>print safer_eval("True")
NameError: name 'True' is not defined
</code></pre>
<p>However, I can still eval a <code>"None"</code> string:</p>
<pre><code>print safer_eval("None")
None
</code></pre>
<ul>
<li><p>So, is <code>None</code> not a built-in?
They are at least both part of <code>__builtin__</code> ...</p></li>
<li><p>Why is it still eval-able?</p></li>
<li>How would I get rid of it, if I had to?</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p><code>None</code> is a <em>constant</em> in Python, see the <a href="https://docs.python.org/2/reference/lexical_analysis.html#keywords" rel="nofollow"><em>Keywords</em> documentation</a>:</p>
<blockquote>
<p>Changed in version 2.4: <code>None</code> became a constant and is now recognized by the compiler as a name for the built-in object <code>None</code>. Although it is not a keyword, you cannot assign a different object to it.</p>
</blockquote>
<p>The compiler simply inserts a reference to the singleton <code>None</code> object whenever you name it:</p>
<pre><code>&gt;&gt;&gt; from dis import dis
&gt;&gt;&gt; dis(compile('None', '', 'eval'))
  1           0 LOAD_CONST               0 (None)
              3 RETURN_VALUE
</code></pre>
<p><code>True</code> and <code>False</code> are built-ins in Python 2, which also means they can be masked.</p>
<p>In Python 3, <code>None</code>, <code>True</code> and <code>False</code> all are <a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords" rel="nofollow">now keywords</a>, and all three are materialised merely by naming them:</p>
<pre><code>&gt;&gt;&gt; eval('True', {'__builtins__': {}})
True
</code></pre>
<p>See <a href="http://python-history.blogspot.co.uk/2013/11/story-of-none-true-false.html" rel="nofollow">Guido van Rossum's blog post on why this was changed</a>.</p>
<p>Note that there is <strong>nothing safe</strong> about eval, even with <code>__builtins__</code> neutered, as it can still be referenced via other means:</p>
<pre><code>&gt;&gt;&gt; s = '''
... [
...     c for c in ().__class__.__base__.__subclasses__()
...     if c.__name__ == 'catch_warnings'
... ][0]()._module.__builtins__
... '''
&gt;&gt;&gt; eval(s, {'__builtins__': {}})
{'bytearray': &lt;type 'bytearray'&gt;, 'IndexError': &lt;type 'exceptions.IndexError'&gt;, 'all': &lt;built-in function all&gt;, 'help': Type help() for interactive help, or help(object) for help about object., 'vars': &lt;built-in function vars&gt;, 'SyntaxError': &lt;type 'exceptions.SyntaxError'&gt;, 'unicode': &lt;type 'unicode'&gt;, 'UnicodeDecodeError': &lt;type 'exceptions.UnicodeDecodeError'&gt;, 'memoryview': &lt;type 'memoryview'&gt;, 'isinstance': &lt;built-in function isinstance&gt;, 'copyright': Copyright (c) 2001-2015 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'NameError': &lt;type 'exceptions.NameError'&gt;, 'BytesWarning': &lt;type 'exceptions.BytesWarning'&gt;, 'dict': &lt;type 'dict'&gt;, 'input': &lt;built-in function input&gt;, 'oct': &lt;built-in function oct&gt;, 'bin': &lt;built-in function bin&gt;, 'SystemExit': &lt;type 'exceptions.SystemExit'&gt;, 'StandardError': &lt;type 'exceptions.StandardError'&gt;, 'format': &lt;built-in function format&gt;, 'repr': &lt;built-in function repr&gt;, 'sorted': &lt;built-in function sorted&gt;, 'False': False, 'RuntimeWarning': &lt;type 'exceptions.RuntimeWarning'&gt;, 'list': &lt;type 'list'&gt;, 'iter': &lt;built-in function iter&gt;, 'reload': &lt;built-in function reload&gt;, 'Warning': &lt;type 'exceptions.Warning'&gt;, '__package__': None, 'round': &lt;built-in function round&gt;, 'dir': &lt;built-in function dir&gt;, 'cmp': &lt;built-in function cmp&gt;, 'set': &lt;type 'set'&gt;, 'bytes': &lt;type 'str'&gt;, 'reduce': &lt;built-in function reduce&gt;, 'intern': &lt;built-in function intern&gt;, 'issubclass': &lt;built-in function issubclass&gt;, 'Ellipsis': Ellipsis, 'EOFError': &lt;type 'exceptions.EOFError'&gt;, 'locals': &lt;built-in function locals&gt;, 'BufferError': &lt;type 'exceptions.BufferError'&gt;, 'slice': &lt;type 'slice'&gt;, 'FloatingPointError': &lt;type 'exceptions.FloatingPointError'&gt;, 'sum': &lt;built-in function sum&gt;, 'getattr': &lt;built-in function getattr&gt;, 'abs': &lt;built-in function abs&gt;, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'print': &lt;built-in function print&gt;, 'True': True, 'FutureWarning': &lt;type 'exceptions.FutureWarning'&gt;, 'ImportWarning': &lt;type 'exceptions.ImportWarning'&gt;, 'None': None, 'hash': &lt;built-in function hash&gt;, 'ReferenceError': &lt;type 'exceptions.ReferenceError'&gt;, 'len': &lt;built-in function len&gt;, 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'frozenset': &lt;type 'frozenset'&gt;, '__name__': '__builtin__', 'ord': &lt;built-in function ord&gt;, 'super': &lt;type 'super'&gt;, '_': None, 'TypeError': &lt;type 'exceptions.TypeError'&gt;, 'license': See http://www.python.org/2.7/license.html, 'KeyboardInterrupt': &lt;type 'exceptions.KeyboardInterrupt'&gt;, 'UserWarning': &lt;type 'exceptions.UserWarning'&gt;, 'filter': &lt;built-in function filter&gt;, 'range': &lt;built-in function range&gt;, 'staticmethod': &lt;type 'staticmethod'&gt;, 'SystemError': &lt;type 'exceptions.SystemError'&gt;, 'BaseException': &lt;type 'exceptions.BaseException'&gt;, 'pow': &lt;built-in function pow&gt;, 'RuntimeError': &lt;type 'exceptions.RuntimeError'&gt;, 'float': &lt;type 'float'&gt;, 'MemoryError': &lt;type 'exceptions.MemoryError'&gt;, 'StopIteration': &lt;type 'exceptions.StopIteration'&gt;, 'globals': &lt;built-in function globals&gt;, 'divmod': &lt;built-in function divmod&gt;, 'enumerate': &lt;type 'enumerate'&gt;, 'apply': &lt;built-in function apply&gt;, 'LookupError': &lt;type 'exceptions.LookupError'&gt;, 'open': &lt;built-in function open&gt;, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'basestring': &lt;type 'basestring'&gt;, 'UnicodeError': &lt;type 'exceptions.UnicodeError'&gt;, 'zip': &lt;built-in function zip&gt;, 'hex': &lt;built-in function hex&gt;, 'long': &lt;type 'long'&gt;, 'next': &lt;built-in function next&gt;, 'ImportError': &lt;type 'exceptions.ImportError'&gt;, 'chr': &lt;built-in function chr&gt;, 'xrange': &lt;type 'xrange'&gt;, 'type': &lt;type 'type'&gt;, '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", 'Exception': &lt;type 'exceptions.Exception'&gt;, 'tuple': &lt;type 'tuple'&gt;, 'UnicodeTranslateError': &lt;type 'exceptions.UnicodeTranslateError'&gt;, 'reversed': &lt;type 'reversed'&gt;, 'UnicodeEncodeError': &lt;type 'exceptions.UnicodeEncodeError'&gt;, 'IOError': &lt;type 'exceptions.IOError'&gt;, 'hasattr': &lt;built-in function hasattr&gt;, 'delattr': &lt;built-in function delattr&gt;, 'setattr': &lt;built-in function setattr&gt;, 'raw_input': &lt;built-in function raw_input&gt;, 'SyntaxWarning': &lt;type 'exceptions.SyntaxWarning'&gt;, 'compile': &lt;built-in function compile&gt;, 'ArithmeticError': &lt;type 'exceptions.ArithmeticError'&gt;, 'str': &lt;type 'str'&gt;, 'property': &lt;type 'property'&gt;, 'GeneratorExit': &lt;type 'exceptions.GeneratorExit'&gt;, 'int': &lt;type 'int'&gt;, '__import__': &lt;built-in function __import__&gt;, 'KeyError': &lt;type 'exceptions.KeyError'&gt;, 'coerce': &lt;built-in function coerce&gt;, 'PendingDeprecationWarning': &lt;type 'exceptions.PendingDeprecationWarning'&gt;, 'file': &lt;type 'file'&gt;, 'EnvironmentError': &lt;type 'exceptions.EnvironmentError'&gt;, 'unichr': &lt;built-in function unichr&gt;, 'id': &lt;built-in function id&gt;, 'OSError': &lt;type 'exceptions.OSError'&gt;, 'DeprecationWarning': &lt;type 'exceptions.DeprecationWarning'&gt;, 'min': &lt;built-in function min&gt;, 'UnicodeWarning': &lt;type 'exceptions.UnicodeWarning'&gt;, 'execfile': &lt;built-in function execfile&gt;, 'any': &lt;built-in function any&gt;, 'complex': &lt;type 'complex'&gt;, 'bool': &lt;type 'bool'&gt;, 'ValueError': &lt;type 'exceptions.ValueError'&gt;, 'NotImplemented': NotImplemented, 'map': &lt;built-in function map&gt;, 'buffer': &lt;type 'buffer'&gt;, 'max': &lt;built-in function max&gt;, 'object': &lt;type 'object'&gt;, 'TabError': &lt;type 'exceptions.TabError'&gt;, 'callable': &lt;built-in function callable&gt;, 'ZeroDivisionError': &lt;type 'exceptions.ZeroDivisionError'&gt;, 'eval': &lt;built-in function eval&gt;, '__debug__': True, 'IndentationError': &lt;type 'exceptions.IndentationError'&gt;, 'AssertionError': &lt;type 'exceptions.AssertionError'&gt;, 'classmethod': &lt;type 'classmethod'&gt;, 'UnboundLocalError': &lt;type 'exceptions.UnboundLocalError'&gt;, 'NotImplementedError': &lt;type 'exceptions.NotImplementedError'&gt;, 'AttributeError': &lt;type 'exceptions.AttributeError'&gt;, 'OverflowError': &lt;type 'exceptions.OverflowError'&gt;}
</code></pre>
<p>or you can simply blow up the interpreter by creating a broken code object. See <a href="http://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html" rel="nofollow"><em>Eval really is dangerous</em></a>.</p>
<p>If all you want to do is load Python literal syntax (lists, tuples, dictionaries, strings, numbers, etc.) then you want to use the <a href="https://docs.python.org/2/library/ast.html#ast.literal_eval" rel="nofollow"><code>ast.literal_eval()</code> function</a>, specifically designed to be safe.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2.7, this is a perfectly valid statement.</p>
<pre><code>True = False
&gt;&gt;&gt; print True
False
</code></pre>
<p>Try to do it with <code>None</code> though, and..</p>
<p><code>SyntaxError: cannot assign to None</code></p>
<p>Can kind of make your head spin. I'm not sure, but I suspect that <code>True</code> is a builtin and <code>None</code> is actually a <em>constant</em>. You can <em>change</em> <code>True</code> to a different value, but you can't change <code>None</code>.</p>
</div>
<span class="comment-copy">Why not just use <code>ast.literal_eval</code>?</span>
<span class="comment-copy">What Python version?</span>
<span class="comment-copy">Yes, <code>None</code> is a built-in singleton object and a <i>keyword</i>.</span>
<span class="comment-copy">Oh, that's a good one :) I most likely should use it instead of my approach. However, my questions still stand. Why are the bools and None behaving differently here?</span>
<span class="comment-copy">@NichtJens: because their names are reserved. In Python 3 <code>safer_eval('True')</code> will work too.</span>
<span class="comment-copy">Maybe you want to mention <code>ast.literal_eval</code> and  link to that question: <a href="http://stackoverflow.com/questions/4710247/python-3-are-there-any-known-security-holes-in-ast-literal-evalnode-or-string" title="python 3 are there any known security holes in ast literal evalnode or string">stackoverflow.com/questions/4710247/…</a> ? It seems like a likely follow-up question...</span>
<span class="comment-copy">@NichtJens: added a mention; I don't think that question needs linking, the documentation is enough: <i>Safely evaluate ...</i></span>
<span class="comment-copy">Yes, great! You are actually simply answering that follow-up question already here ;-)</span>
<span class="comment-copy">No, True and False are the built-ins and can be masked.</span>
<span class="comment-copy">So they're all built in? What's the difference then? EDIT: Ah, I see, <code>None</code> is a keyword too.</span>
<span class="comment-copy">I'm not sure that it's technically a keyword either (at least not in python2.x):  <code>import keyword; print keyword.iskeyword('None')</code></span>
<span class="comment-copy">@mgilson: it isn't. It is a 'constant', so the compiler simply inserts the reference.</span>
<span class="comment-copy">Well, I learned something at least...  I updated my answer to be as close to reality as possible.</span>
