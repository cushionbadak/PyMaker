<div class="post-text" itemprop="text">
<p>In Perl I often read data in from the filehandle <code>__DATA__</code> at the end of the script:</p>
<pre><code>while (&lt;DATA&gt;) {
    chomp;
    say;
}
__DATA__
line1
line2 
</code></pre>
<p>I find this quicker for testing code etc than reading in a file, as it means I can edit its contents on the fly. </p>
<p>From the <a href="http://perldoc.perl.org/SelfLoader.html#The-__DATA__-token" rel="nofollow noreferrer">doc</a>: </p>
<blockquote>
<p>The <code>__DATA__</code> token tells the perl compiler that the perl code for
  compilation is finished.</p>
<p>Everything after the <code>__DATA__</code> token is available for reading via the
  filehandle <code>FOOBAR::DATA</code>, where <code>FOOBAR</code> is the name of the current
  package when the <code>__DATA__</code> token is reached.</p>
</blockquote>
<p>Is there an equivalent in Python? If not, can anybody suggest the most Python-ish way of achieving a similar thing? </p>
</div>
<div class="post-text" itemprop="text">
<p>No, there is no direct equivalent in Python. Put your data in a multi-line variable:</p>
<pre><code>DATA = '''\
line1
line2
'''
</code></pre>
<p>You can then use <code>DATA.splitlines()</code> <sup><a href="https://docs.python.org/2/library/stdtypes.html#str.splitlines" rel="nofollow noreferrer">v2</a>/<a href="https://docs.python.org/3/library/stdtypes.html#str.splitlines" rel="nofollow noreferrer">v3</a></sup> if you must have access to separate lines. You can put this at the end of your Python file provided you only use the name <code>DATA</code> in a function that is not called until after the whole module has loaded.</p>
<p>Alternatively, open the current module and read from that:</p>
<pre><code>with open(__file__.rstrip('co')) as data:
    for line in data:
        while line != '# __DATA__\n':
            continue
        # do something with the rest of the 'data' in the current source file.

# ...

# __DATA__
# This is going to be read later on.
</code></pre>
<p>However the rest of the module must still at least be valid Python syntax; the Python parser can't be told to stop parsing beyond a given point.</p>
<p>Generally speaking, in Python you'd just put the data file <em>next</em> to your source files and read that. You can use the <code>__file__</code> variable to produce a path the 'current directory' and thus to any other files in the same location:</p>
<pre><code>import os.path

current_dir = os.path.dirname(os.path.abspath(__file__))
with open(os.path.join(current_dir, 'data.txt')) as data:
    # read from data.txt
</code></pre>
</div>
<span class="comment-copy">Could you explain what that actually <i>does</i>, for those of us better versed in Python than Perl?</span>
<span class="comment-copy">@jonrsharpe: it lets you add on data to the end of a module that can then be read as if it is a file.</span>
