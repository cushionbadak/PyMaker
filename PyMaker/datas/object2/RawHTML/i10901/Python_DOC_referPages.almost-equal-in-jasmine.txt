<div class="post-text" itemprop="text">
<p><strong>The Story:</strong></p>
<p>In Python built-in <code>unittest</code> framework, there is an "approximate equality" assertion implemented via <a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertAlmostEqual" rel="noreferrer"><code>assertAlmostEqual()</code></a> method:</p>
<pre><code>x = 0.1234567890
y = 0.1234567891
self.assertAlmostEqual(x, y)
</code></pre>
<p>Which has the number of decimal places to check configurable.</p>
<p>And, there is a <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.assert_almost_equal.html" rel="noreferrer"><code>numpy.testing.assert_almost_equal()</code></a> which also works for the arrays of floats:</p>
<pre><code>import numpy.testing as npt
import numpy as np

npt.assert_almost_equal(np.array([1.0,2.3333333333333]), np.array([1.0,2.33333334]))
</code></pre>
<p><strong>The Question:</strong></p>
<p>How to make an "almost equal" assertion <em>in JavaScript/Jasmine</em> for floats and array of floats?</p>
</div>
<div class="post-text" itemprop="text">
<p>For a single float, use <a href="https://github.com/jasmine/jasmine/blob/master/src/core/matchers/toBeCloseTo.js" rel="noreferrer"><code>toBeCloseTo</code></a>:</p>
<pre><code>expect(x).toBeCloseTo(y, 7)
</code></pre>
<p>For a float array, it seems the best you could do is loop over it and call <code>toBeCloseTo</code> for each pair of elements (or write your own matcher). See <a href="https://stackoverflow.com/questions/35318278/expect-an-array-of-float-numbers-to-be-close-to-another-array-in-jasmine">Expect an array of float numbers to be close to another array in Jasmine</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can add a custom equality tester for the float type. It will be called on a single float and on each float present in an array:</p>
<pre class="lang-js prettyprint-override"><code>beforeEach(function () {
  jasmine.addCustomEqualityTester(function floatEquality(a, b) {
      if (a === +a &amp;&amp; b === +b &amp;&amp; (a !== (a|0) || b !== (b|0))) { // if float
          return Math.abs(a - b) &lt; 5e-8;
      }
  });
});

it("Should compare array of floats", function() {
    expect([0.1234567890]).toEqual([0.1234567891]);  // OK
    expect([0.12345]).toEqual([0.12346]);            // FAIL
});
</code></pre>
</div>
<span class="comment-copy">Is there something i'm missing about javascript that the algorithm described in python documentation wont work? <code>Test that first and second are approximately (or not approximately) equal by computing the difference, rounding to the given number of decimal places (default 7), and comparing to zero. Note that these methods round the values to the given number of decimal places (i.e. like the round() function) and not significant digits.  If delta is supplied instead of places then the difference between first and second must be less or equal to (or greater than) delta.</code></span>
<span class="comment-copy">@dm03514 yup, the algorithm itself is exactly what I am up to. Looking if there is something built-in or the best way to address it with javascipt/jasmine. Thanks.</span>
<span class="comment-copy">Do you know how to compare floating point numbers for "almost" equality? It's pretty much standard how it's typically implemented. Take the difference of the numbers being compared and check it is very very small (less than some epsilon).</span>
<span class="comment-copy">@JeffMercado of course. Sometimes, I ask questions even if I know the answer or it is not difficult for me to self-answer. Because asking questions that were not asked before and that might help others with a similar problem is also a contribution from my point of view. Ideally, I'm looking for a reusable matcher that one might just add to the project and use in tests. E.g. <code>expect(value1).toAlmostEqual(value2)</code>. Thanks.</span>
